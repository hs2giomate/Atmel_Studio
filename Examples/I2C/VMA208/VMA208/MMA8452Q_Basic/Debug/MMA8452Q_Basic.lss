
MMA8452Q_Basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000024f2  00002586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  0080019a  0080019a  00002620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d40c  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035c3  00000000  00000000  00012fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001244  00000000  00000000  0001657c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003727  00000000  00000000  000177c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005fb2  00000000  00000000  0001aee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  00020e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
       8:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
       c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      10:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      14:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      18:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      1c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      20:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      24:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      28:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_10>
      2c:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_11>
      30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      34:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      38:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      3c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      40:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      44:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      48:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      4c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      50:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      54:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      58:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      5c:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_23>
      60:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      64:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      68:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      6c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      70:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      74:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      78:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      7c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      80:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      84:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      88:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      8c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      90:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__vector_36>
      94:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      98:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      9c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      a0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      a4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      a8:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__bad_interrupt>
      ac:	ba 10       	cpse	r11, r10
      ae:	bd 10       	cpse	r11, r13
      b0:	ac 10       	cpse	r10, r12
      b2:	b0 10       	cpse	r11, r0
      b4:	b6 10       	cpse	r11, r6
      b6:	de 10       	cpse	r13, r14
      b8:	de 10       	cpse	r13, r14
      ba:	de 10       	cpse	r13, r14
      bc:	c1 10       	cpse	r12, r1
      be:	c5 10       	cpse	r12, r5
      c0:	c9 10       	cpse	r12, r9
      c2:	cf 10       	cpse	r12, r15
      c4:	d3 10       	cpse	r13, r3
      c6:	de 10       	cpse	r13, r14
      c8:	d9 10       	cpse	r13, r9

000000ca <__trampolines_end>:
      ca:	08 0b       	sbc	r16, r24
      cc:	00 02       	muls	r16, r16
      ce:	02 02       	muls	r16, r18
      d0:	00 00       	nop
      d2:	09 04       	cpc	r0, r9
      d4:	00 00       	nop
      d6:	01 02       	muls	r16, r17
      d8:	02 00       	.word	0x0002	; ????
      da:	00 05       	cpc	r16, r0
      dc:	24 00       	.word	0x0024	; ????
      de:	10 01       	movw	r2, r0
      e0:	05 24       	eor	r0, r5
      e2:	01 01       	movw	r0, r2
      e4:	01 04       	cpc	r0, r1
      e6:	24 02       	muls	r18, r20
      e8:	06 05       	cpc	r16, r6
      ea:	24 06       	cpc	r2, r20
      ec:	00 01       	movw	r0, r0
      ee:	07 05       	cpc	r16, r7
      f0:	81 03       	fmuls	r16, r17
      f2:	10 00       	.word	0x0010	; ????
      f4:	40 09       	sbc	r20, r0
      f6:	04 01       	movw	r0, r8
      f8:	00 02       	muls	r16, r16
      fa:	0a 00       	.word	0x000a	; ????
      fc:	00 00       	nop
      fe:	07 05       	cpc	r16, r7
     100:	02 02       	muls	r16, r18
     102:	40 00       	.word	0x0040	; ????
     104:	00 07       	cpc	r16, r16
     106:	05 83       	std	Z+5, r16	; 0x05
     108:	02 40       	sbci	r16, 0x02	; 2
	...

0000010c <USB_DeviceDescriptorIAD>:
     10c:	12 01 00 02 ef 02 01 40 41 23 41 80 00 01 01 02     .......@A#A.....
     11c:	03 01                                               ..

0000011e <STRING_MANUFACTURER>:
     11e:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

0000012a <STRING_PRODUCT>:
     12a:	41 72 64 75 69 6e 6f 20 59 75 6e 00                 Arduino Yun.

00000136 <STRING_LANGUAGE>:
     136:	04 03 09 04                                         ....

0000013a <digital_pin_to_timer_PGM>:
     13a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000159 <digital_pin_to_bit_mask_PGM>:
     159:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     169:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000178 <digital_pin_to_port_PGM>:
     178:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     188:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000197 <port_to_output_PGM>:
     197:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00 00        ....%.(.+...1..

000001a6 <__ctors_start>:
     1a6:	94 03       	fmuls	r17, r20
     1a8:	a2 05       	cpc	r26, r2
     1aa:	d9 0d       	add	r29, r9

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	e2 ef       	ldi	r30, 0xF2	; 242
     1c0:	f4 e2       	ldi	r31, 0x24	; 36
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	aa 39       	cpi	r26, 0x9A	; 154
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	22 e0       	ldi	r18, 0x02	; 2
     1d0:	aa e9       	ldi	r26, 0x9A	; 154
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a2 3e       	cpi	r26, 0xE2	; 226
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>

000001de <__do_global_ctors>:
     1de:	10 e0       	ldi	r17, 0x00	; 0
     1e0:	c6 ed       	ldi	r28, 0xD6	; 214
     1e2:	d0 e0       	ldi	r29, 0x00	; 0
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__do_global_ctors+0x10>
     1e6:	21 97       	sbiw	r28, 0x01	; 1
     1e8:	fe 01       	movw	r30, r28
     1ea:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__tablejump2__>
     1ee:	c3 3d       	cpi	r28, 0xD3	; 211
     1f0:	d1 07       	cpc	r29, r17
     1f2:	c9 f7       	brne	.-14     	; 0x1e6 <__do_global_ctors+0x8>
     1f4:	0e 94 b8 05 	call	0xb70	; 0xb70 <main>
     1f8:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <_exit>

000001fc <__bad_interrupt>:
     1fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000200 <_ZN8MMA8452QC1Eh>:
	{
		return tapStat & 0x7F;
	}
	else
		return 0;
}
     200:	fc 01       	movw	r30, r24
     202:	62 8b       	std	Z+18, r22	; 0x12
     204:	08 95       	ret

00000206 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	c6 2f       	mov	r28, r22
     214:	7a 01       	movw	r14, r20
     216:	02 2f       	mov	r16, r18
     218:	fc 01       	movw	r30, r24
     21a:	62 89       	ldd	r22, Z+18	; 0x12
     21c:	82 e1       	ldi	r24, 0x12	; 18
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN7TwoWire17beginTransmissionEh>
     224:	6c 2f       	mov	r22, r28
     226:	82 e1       	ldi	r24, 0x12	; 18
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN7TwoWire5writeEh>
     22e:	e7 01       	movw	r28, r14
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	ce 01       	movw	r24, r28
     234:	8e 19       	sub	r24, r14
     236:	9f 09       	sbc	r25, r15
     238:	80 17       	cp	r24, r16
     23a:	91 07       	cpc	r25, r17
     23c:	34 f4       	brge	.+12     	; 0x24a <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x44>
     23e:	69 91       	ld	r22, Y+
     240:	82 e1       	ldi	r24, 0x12	; 18
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN7TwoWire5writeEh>
     248:	f4 cf       	rjmp	.-24     	; 0x232 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x2c>
     24a:	82 e1       	ldi	r24, 0x12	; 18
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <_ZN7TwoWire15endTransmissionEv>

0000025e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	49 83       	std	Y+1, r20	; 0x01
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	ae 01       	movw	r20, r28
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	0e 94 03 01 	call	0x206	; 0x206 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
     276:	0f 90       	pop	r0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <_ZN8MMA8452Q8setupTapEhhh>:
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	8c 01       	movw	r16, r24
     28a:	f4 2e       	mov	r15, r20
     28c:	d2 2f       	mov	r29, r18
     28e:	67 fd       	sbrc	r22, 7
     290:	06 c0       	rjmp	.+12     	; 0x29e <_ZN8MMA8452Q8setupTapEhhh+0x20>
     292:	46 2f       	mov	r20, r22
     294:	63 e2       	ldi	r22, 0x23	; 35
     296:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
     29a:	c3 e0       	ldi	r28, 0x03	; 3
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <_ZN8MMA8452Q8setupTapEhhh+0x22>
     29e:	c0 e0       	ldi	r28, 0x00	; 0
     2a0:	f7 fc       	sbrc	r15, 7
     2a2:	06 c0       	rjmp	.+12     	; 0x2b0 <_ZN8MMA8452Q8setupTapEhhh+0x32>
     2a4:	cc 60       	ori	r28, 0x0C	; 12
     2a6:	4f 2d       	mov	r20, r15
     2a8:	64 e2       	ldi	r22, 0x24	; 36
     2aa:	c8 01       	movw	r24, r16
     2ac:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
     2b0:	d7 fd       	sbrc	r29, 7
     2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <_ZN8MMA8452Q8setupTapEhhh+0x42>
     2b4:	c0 63       	ori	r28, 0x30	; 48
     2b6:	4d 2f       	mov	r20, r29
     2b8:	65 e2       	ldi	r22, 0x25	; 37
     2ba:	c8 01       	movw	r24, r16
     2bc:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
     2c0:	4c 2f       	mov	r20, r28
     2c2:	40 64       	ori	r20, 0x40	; 64
     2c4:	61 e2       	ldi	r22, 0x21	; 33
     2c6:	c8 01       	movw	r24, r16
     2c8:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
     2cc:	40 e3       	ldi	r20, 0x30	; 48
     2ce:	66 e2       	ldi	r22, 0x26	; 38
     2d0:	c8 01       	movw	r24, r16
     2d2:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
     2d6:	40 ea       	ldi	r20, 0xA0	; 160
     2d8:	67 e2       	ldi	r22, 0x27	; 39
     2da:	c8 01       	movw	r24, r16
     2dc:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
     2e0:	4f ef       	ldi	r20, 0xFF	; 255
     2e2:	68 e2       	ldi	r22, 0x28	; 40
     2e4:	c8 01       	movw	r24, r16
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000002f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	16 2f       	mov	r17, r22
     2fe:	6a 89       	ldd	r22, Y+18	; 0x12
     300:	82 e1       	ldi	r24, 0x12	; 18
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN7TwoWire17beginTransmissionEh>
     308:	61 2f       	mov	r22, r17
     30a:	82 e1       	ldi	r24, 0x12	; 18
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN7TwoWire5writeEh>
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	82 e1       	ldi	r24, 0x12	; 18
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN7TwoWire15endTransmissionEh>
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	6a 89       	ldd	r22, Y+18	; 0x12
     320:	82 e1       	ldi	r24, 0x12	; 18
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN7TwoWire11requestFromEhh>
     328:	82 e1       	ldi	r24, 0x12	; 18
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN7TwoWire9availableEv>
     330:	89 2b       	or	r24, r25
     332:	d1 f3       	breq	.-12     	; 0x328 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x34>
     334:	82 e1       	ldi	r24, 0x12	; 18
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN7TwoWire4readEv>
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	08 95       	ret

00000344 <_ZN8MMA8452Q9availableEv>:
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
     34a:	83 fb       	bst	r24, 3
     34c:	88 27       	eor	r24, r24
     34e:	80 f9       	bld	r24, 0
     350:	08 95       	ret

00000352 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	8c 01       	movw	r16, r24
     35a:	c6 2f       	mov	r28, r22
     35c:	6e e0       	ldi	r22, 0x0E	; 14
     35e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
     362:	4c 2f       	mov	r20, r28
     364:	46 95       	lsr	r20
     366:	46 95       	lsr	r20
     368:	8c 7f       	andi	r24, 0xFC	; 252
     36a:	48 2b       	or	r20, r24
     36c:	6e e0       	ldi	r22, 0x0E	; 14
     36e:	c8 01       	movw	r24, r16
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

0000037a <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	8c 01       	movw	r16, r24
     382:	c6 2f       	mov	r28, r22
     384:	6a e2       	ldi	r22, 0x2A	; 42
     386:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
     38a:	98 e0       	ldi	r25, 0x08	; 8
     38c:	c9 9f       	mul	r28, r25
     38e:	b0 01       	movw	r22, r0
     390:	11 24       	eor	r1, r1
     392:	8f 7c       	andi	r24, 0xCF	; 207
     394:	48 2f       	mov	r20, r24
     396:	46 2b       	or	r20, r22
     398:	6a e2       	ldi	r22, 0x2A	; 42
     39a:	c8 01       	movw	r24, r16
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000003a6 <_ZN8MMA8452Q7setupPLEv>:

// SET UP PORTRAIT/LANDSCAPE DETECTION
//	This function sets up portrait and landscape detection.
void MMA8452Q::setupPL()
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
	// Must be in standby mode to make changes!!!
	// For more info check out this app note:
	//	http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
	// 1. Enable P/L
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
     3ac:	61 e1       	ldi	r22, 0x11	; 17
     3ae:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
     3b2:	48 2f       	mov	r20, r24
     3b4:	40 64       	ori	r20, 0x40	; 64
     3b6:	61 e1       	ldi	r22, 0x11	; 17
     3b8:	ce 01       	movw	r24, r28
     3ba:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	// 2. Set the debounce rate
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
     3be:	40 e5       	ldi	r20, 0x50	; 80
     3c0:	62 e1       	ldi	r22, 0x12	; 18
     3c2:	ce 01       	movw	r24, r28
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
	// For more info check out this app note:
	//	http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
	// 1. Enable P/L
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
	// 2. Set the debounce rate
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
     3c8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000003cc <_ZN8MMA8452Q6readPLEv>:
//	This function reads the portrait/landscape status register of the MMA8452Q.
//	It will return either PORTRAIT_U, PORTRAIT_D, LANDSCAPE_R, LANDSCAPE_L,
//	or LOCKOUT. LOCKOUT indicates that the sensor is in neither p or ls.
byte MMA8452Q::readPL()
{
	byte plStat = readRegister(PL_STATUS);
     3cc:	60 e1       	ldi	r22, 0x10	; 16
     3ce:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	
	if (plStat & 0x40) // Z-tilt lockout
     3d2:	86 fd       	sbrc	r24, 6
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <_ZN8MMA8452Q6readPLEv+0x10>
		return LOCKOUT;
	else // Otherwise return LAPO status
		return (plStat & 0x6) >> 1;
     3d6:	86 70       	andi	r24, 0x06	; 6
     3d8:	86 95       	lsr	r24
     3da:	08 95       	ret
byte MMA8452Q::readPL()
{
	byte plStat = readRegister(PL_STATUS);
	
	if (plStat & 0x40) // Z-tilt lockout
		return LOCKOUT;
     3dc:	80 e4       	ldi	r24, 0x40	; 64
	else // Otherwise return LAPO status
		return (plStat & 0x6) >> 1;
}
     3de:	08 95       	ret

000003e0 <_ZN8MMA8452Q7standbyEv>:

// SET STANDBY MODE
//	Sets the MMA8452 to standby mode. It must be in standby to change most register settings
void MMA8452Q::standby()
{
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ec 01       	movw	r28, r24
	byte c = readRegister(CTRL_REG1);
     3e6:	6a e2       	ldi	r22, 0x2A	; 42
     3e8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
     3ec:	48 2f       	mov	r20, r24
     3ee:	4e 7f       	andi	r20, 0xFE	; 254
     3f0:	6a e2       	ldi	r22, 0x2A	; 42
     3f2:	ce 01       	movw	r24, r28
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
// SET STANDBY MODE
//	Sets the MMA8452 to standby mode. It must be in standby to change most register settings
void MMA8452Q::standby()
{
	byte c = readRegister(CTRL_REG1);
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
     3f8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000003fc <_ZN8MMA8452Q6activeEv>:
}

// SET ACTIVE MODE
//	Sets the MMA8452 to active mode. Needs to be in this mode to output data
void MMA8452Q::active()
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
	byte c = readRegister(CTRL_REG1);
     402:	6a e2       	ldi	r22, 0x2A	; 42
     404:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
     408:	48 2f       	mov	r20, r24
     40a:	41 60       	ori	r20, 0x01	; 1
     40c:	6a e2       	ldi	r22, 0x2A	; 42
     40e:	ce 01       	movw	r24, r28
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
// SET ACTIVE MODE
//	Sets the MMA8452 to active mode. Needs to be in this mode to output data
void MMA8452Q::active()
{
	byte c = readRegister(CTRL_REG1);
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
     414:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

00000418 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR>:
//	This function initializes the MMA8452Q. It sets up the scale (either 2, 4,
//	or 8g), output data rate, portrait/landscape detection and tap detection.
//	It also checks the WHO_AM_I register to make sure we can communicate with
//	the sensor. Returns a 0 if communication failed, 1 if successful.
byte MMA8452Q::init(MMA8452Q_Scale fsr, MMA8452Q_ODR odr)
{
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
     420:	14 2f       	mov	r17, r20
	scale = fsr; // Haul fsr into our class variable, scale
     422:	6b 8b       	std	Y+19, r22	; 0x13
	
	Wire.begin(); // Initialize I2C
     424:	82 e1       	ldi	r24, 0x12	; 18
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_ZN7TwoWire5beginEv>
	
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
     42c:	6d e0       	ldi	r22, 0x0D	; 13
     42e:	ce 01       	movw	r24, r28
     430:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
     434:	8a 32       	cpi	r24, 0x2A	; 42
     436:	c9 f4       	brne	.+50     	; 0x46a <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x52>
	{
		return 0;
	}
	
	standby();  // Must be in standby to change registers
     438:	ce 01       	movw	r24, r28
     43a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN8MMA8452Q7standbyEv>
	
	setScale(scale);  // Set up accelerometer scale
     43e:	6b 89       	ldd	r22, Y+19	; 0x13
     440:	ce 01       	movw	r24, r28
     442:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
     446:	61 2f       	mov	r22, r17
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
     44e:	ce 01       	movw	r24, r28
     450:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN8MMA8452Q7setupPLEv>
	// Multiply parameter by 0.0625g to calculate threshold.
	setupTap(0x80, 0x80, 0x08); // Disable x, y, set z to 0.5g
     454:	28 e0       	ldi	r18, 0x08	; 8
     456:	40 e8       	ldi	r20, 0x80	; 128
     458:	60 e8       	ldi	r22, 0x80	; 128
     45a:	ce 01       	movw	r24, r28
     45c:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN8MMA8452Q8setupTapEhhh>
	
	active();  // Set to active to start reading
     460:	ce 01       	movw	r24, r28
     462:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN8MMA8452Q6activeEv>
	
	return 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	01 c0       	rjmp	.+2      	; 0x46c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x54>
	
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
	
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
	{
		return 0;
     46a:	80 e0       	ldi	r24, 0x00	; 0
	setupTap(0x80, 0x80, 0x08); // Disable x, y, set z to 0.5g
	
	active();  // Set to active to start reading
	
	return 1;
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	08 95       	ret

00000474 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>:

// READ MULTIPLE REGISTERS
//	Read "len" bytes from the MMA8452Q, starting at register "reg". Bytes are stored
//	in "buffer" on exit.
void MMA8452Q::readRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	8c 01       	movw	r16, r24
     482:	d6 2f       	mov	r29, r22
     484:	7a 01       	movw	r14, r20
     486:	c2 2f       	mov	r28, r18
	Wire.beginTransmission(address);
     488:	fc 01       	movw	r30, r24
     48a:	62 89       	ldd	r22, Z+18	; 0x12
     48c:	82 e1       	ldi	r24, 0x12	; 18
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     494:	6d 2f       	mov	r22, r29
     496:	82 e1       	ldi	r24, 0x12	; 18
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN7TwoWire5writeEh>
	Wire.write(reg);
	Wire.endTransmission(false); //endTransmission but keep the connection active
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	82 e1       	ldi	r24, 0x12	; 18
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN7TwoWire15endTransmissionEh>

	Wire.requestFrom(address, len); //Ask for bytes, once done, bus is released by default
     4a8:	4c 2f       	mov	r20, r28
     4aa:	f8 01       	movw	r30, r16
     4ac:	62 89       	ldd	r22, Z+18	; 0x12
     4ae:	82 e1       	ldi	r24, 0x12	; 18
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN7TwoWire11requestFromEhh>

	while(Wire.available() < len); //Hang out until we get the # of bytes we expect
     4b6:	d0 e0       	ldi	r29, 0x00	; 0
     4b8:	82 e1       	ldi	r24, 0x12	; 18
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN7TwoWire9availableEv>
     4c0:	8c 17       	cp	r24, r28
     4c2:	9d 07       	cpc	r25, r29
     4c4:	cc f3       	brlt	.-14     	; 0x4b8 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x44>
     4c6:	87 01       	movw	r16, r14
     4c8:	ce 0d       	add	r28, r14
     4ca:	df 1d       	adc	r29, r15

	for(int x = 0 ; x < len ; x++)
     4cc:	c0 17       	cp	r28, r16
     4ce:	d1 07       	cpc	r29, r17
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x6e>
		buffer[x] = Wire.read();    
     4d2:	82 e1       	ldi	r24, 0x12	; 18
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN7TwoWire4readEv>
     4da:	f8 01       	movw	r30, r16
     4dc:	81 93       	st	Z+, r24
     4de:	8f 01       	movw	r16, r30

	Wire.requestFrom(address, len); //Ask for bytes, once done, bus is released by default

	while(Wire.available() < len); //Hang out until we get the # of bytes we expect

	for(int x = 0 ; x < len ; x++)
     4e0:	f5 cf       	rjmp	.-22     	; 0x4cc <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x58>
		buffer[x] = Wire.read();    
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	08 95       	ret

000004f0 <_ZN8MMA8452Q4readEv>:
//		* int's x, y, and z will store the signed 12-bit values read out
//		  of the acceleromter.
//		* floats cx, cy, and cz will store the calculated acceleration from
//		  those 12-bit values. These variables are in units of g's.
void MMA8452Q::read()
{
     4f0:	4f 92       	push	r4
     4f2:	5f 92       	push	r5
     4f4:	6f 92       	push	r6
     4f6:	7f 92       	push	r7
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	00 d0       	rcall	.+0      	; 0x50e <_ZN8MMA8452Q4readEv+0x1e>
     50e:	00 d0       	rcall	.+0      	; 0x510 <_ZN8MMA8452Q4readEv+0x20>
     510:	00 d0       	rcall	.+0      	; 0x512 <_ZN8MMA8452Q4readEv+0x22>
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	8c 01       	movw	r16, r24
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
     518:	26 e0       	ldi	r18, 0x06	; 6
     51a:	ae 01       	movw	r20, r28
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>
	
	x = (rawData[0]<<8 | rawData[1]) >> 4;
     526:	a9 80       	ldd	r10, Y+1	; 0x01
     528:	ba 80       	ldd	r11, Y+2	; 0x02
     52a:	ba 24       	eor	r11, r10
     52c:	ab 24       	eor	r10, r11
     52e:	ba 24       	eor	r11, r10
     530:	84 e0       	ldi	r24, 0x04	; 4
     532:	b5 94       	asr	r11
     534:	a7 94       	ror	r10
     536:	8a 95       	dec	r24
     538:	e1 f7       	brne	.-8      	; 0x532 <_ZN8MMA8452Q4readEv+0x42>
     53a:	f8 01       	movw	r30, r16
     53c:	b1 82       	std	Z+1, r11	; 0x01
     53e:	a0 82       	st	Z, r10
	y = (rawData[2]<<8 | rawData[3]) >> 4;
     540:	cb 80       	ldd	r12, Y+3	; 0x03
     542:	dc 80       	ldd	r13, Y+4	; 0x04
     544:	dc 24       	eor	r13, r12
     546:	cd 24       	eor	r12, r13
     548:	dc 24       	eor	r13, r12
     54a:	94 e0       	ldi	r25, 0x04	; 4
     54c:	d5 94       	asr	r13
     54e:	c7 94       	ror	r12
     550:	9a 95       	dec	r25
     552:	e1 f7       	brne	.-8      	; 0x54c <_ZN8MMA8452Q4readEv+0x5c>
     554:	d3 82       	std	Z+3, r13	; 0x03
     556:	c2 82       	std	Z+2, r12	; 0x02
	z = (rawData[4]<<8 | rawData[5]) >> 4;
     558:	ed 80       	ldd	r14, Y+5	; 0x05
     55a:	fe 80       	ldd	r15, Y+6	; 0x06
     55c:	fe 24       	eor	r15, r14
     55e:	ef 24       	eor	r14, r15
     560:	fe 24       	eor	r15, r14
     562:	24 e0       	ldi	r18, 0x04	; 4
     564:	f5 94       	asr	r15
     566:	e7 94       	ror	r14
     568:	2a 95       	dec	r18
     56a:	e1 f7       	brne	.-8      	; 0x564 <_ZN8MMA8452Q4readEv+0x74>
     56c:	f5 82       	std	Z+5, r15	; 0x05
     56e:	e4 82       	std	Z+4, r14	; 0x04
	cx = (float) x / (float)(1<<11) * (float)(scale);
     570:	63 89       	ldd	r22, Z+19	; 0x13
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
     57c:	2b 01       	movw	r4, r22
     57e:	3c 01       	movw	r6, r24
     580:	b5 01       	movw	r22, r10
     582:	bb 0c       	add	r11, r11
     584:	88 0b       	sbc	r24, r24
     586:	99 0b       	sbc	r25, r25
     588:	0e 94 9b 03 	call	0x736	; 0x736 <__floatsisf>
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	5a e3       	ldi	r21, 0x3A	; 58
     594:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     598:	a3 01       	movw	r20, r6
     59a:	92 01       	movw	r18, r4
     59c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     5a0:	f8 01       	movw	r30, r16
     5a2:	66 83       	std	Z+6, r22	; 0x06
     5a4:	77 83       	std	Z+7, r23	; 0x07
     5a6:	80 87       	std	Z+8, r24	; 0x08
     5a8:	91 87       	std	Z+9, r25	; 0x09
	cy = (float) y / (float)(1<<11) * (float)(scale);
     5aa:	b6 01       	movw	r22, r12
     5ac:	dd 0c       	add	r13, r13
     5ae:	88 0b       	sbc	r24, r24
     5b0:	99 0b       	sbc	r25, r25
     5b2:	0e 94 9b 03 	call	0x736	; 0x736 <__floatsisf>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	5a e3       	ldi	r21, 0x3A	; 58
     5be:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     5c2:	a3 01       	movw	r20, r6
     5c4:	92 01       	movw	r18, r4
     5c6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     5ca:	f8 01       	movw	r30, r16
     5cc:	62 87       	std	Z+10, r22	; 0x0a
     5ce:	73 87       	std	Z+11, r23	; 0x0b
     5d0:	84 87       	std	Z+12, r24	; 0x0c
     5d2:	95 87       	std	Z+13, r25	; 0x0d
	cz = (float) z / (float)(1<<11) * (float)(scale);
     5d4:	b7 01       	movw	r22, r14
     5d6:	ff 0c       	add	r15, r15
     5d8:	88 0b       	sbc	r24, r24
     5da:	99 0b       	sbc	r25, r25
     5dc:	0e 94 9b 03 	call	0x736	; 0x736 <__floatsisf>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	5a e3       	ldi	r21, 0x3A	; 58
     5e8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     5ec:	a3 01       	movw	r20, r6
     5ee:	92 01       	movw	r18, r4
     5f0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     5f4:	f8 01       	movw	r30, r16
     5f6:	66 87       	std	Z+14, r22	; 0x0e
     5f8:	77 87       	std	Z+15, r23	; 0x0f
     5fa:	80 8b       	std	Z+16, r24	; 0x10
     5fc:	91 8b       	std	Z+17, r25	; 0x11
}
     5fe:	26 96       	adiw	r28, 0x06	; 6
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	7f 90       	pop	r7
     620:	6f 90       	pop	r6
     622:	5f 90       	pop	r5
     624:	4f 90       	pop	r4
     626:	08 95       	ret

00000628 <setup>:
  Serial.print(accel.x, 3);
  Serial.print("\t");
  Serial.print(accel.y, 3);
  Serial.print("\t");
  Serial.print(accel.z, 3);
  Serial.print("\t");
     628:	40 e8       	ldi	r20, 0x80	; 128
     62a:	55 e2       	ldi	r21, 0x25	; 37
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	8e ea       	ldi	r24, 0xAE	; 174
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN7Serial_5beginEm>
     638:	63 e1       	ldi	r22, 0x13	; 19
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	8e ea       	ldi	r24, 0xAE	; 174
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN5Print7printlnEPKc>
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	62 e0       	ldi	r22, 0x02	; 2
     648:	8a e9       	ldi	r24, 0x9A	; 154
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR>

00000650 <_Z21printCalculatedAccelsv>:
// This function demonstrates how to use the accel.cx, accel.cy,
//  and accel.cz variables.
// Before using these variables you must call the accel.read()
//  function!
void printCalculatedAccels()
{ 
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
  Serial.print(accel.cx, 3);
     654:	ca e9       	ldi	r28, 0x9A	; 154
     656:	d1 e0       	ldi	r29, 0x01	; 1
     658:	4e 81       	ldd	r20, Y+6	; 0x06
     65a:	5f 81       	ldd	r21, Y+7	; 0x07
     65c:	68 85       	ldd	r22, Y+8	; 0x08
     65e:	79 85       	ldd	r23, Y+9	; 0x09
     660:	23 e0       	ldi	r18, 0x03	; 3
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	8e ea       	ldi	r24, 0xAE	; 174
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN5Print5printEdi>
  Serial.print("\t");
     66c:	67 e2       	ldi	r22, 0x27	; 39
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	8e ea       	ldi	r24, 0xAE	; 174
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN5Print5printEPKc>
  Serial.print(accel.cy, 3);
     678:	4a 85       	ldd	r20, Y+10	; 0x0a
     67a:	5b 85       	ldd	r21, Y+11	; 0x0b
     67c:	6c 85       	ldd	r22, Y+12	; 0x0c
     67e:	7d 85       	ldd	r23, Y+13	; 0x0d
     680:	23 e0       	ldi	r18, 0x03	; 3
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	8e ea       	ldi	r24, 0xAE	; 174
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN5Print5printEdi>
  Serial.print("\t");
     68c:	67 e2       	ldi	r22, 0x27	; 39
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	8e ea       	ldi	r24, 0xAE	; 174
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN5Print5printEPKc>
  Serial.print(accel.cz, 3);
     698:	4e 85       	ldd	r20, Y+14	; 0x0e
     69a:	5f 85       	ldd	r21, Y+15	; 0x0f
     69c:	68 89       	ldd	r22, Y+16	; 0x10
     69e:	79 89       	ldd	r23, Y+17	; 0x11
     6a0:	23 e0       	ldi	r18, 0x03	; 3
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	8e ea       	ldi	r24, 0xAE	; 174
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN5Print5printEdi>
  Serial.print("\t");
     6ac:	67 e2       	ldi	r22, 0x27	; 39
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	8e ea       	ldi	r24, 0xAE	; 174
     6b2:	91 e0       	ldi	r25, 0x01	; 1
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
  Serial.print(accel.cx, 3);
  Serial.print("\t");
  Serial.print(accel.cy, 3);
  Serial.print("\t");
  Serial.print(accel.cz, 3);
  Serial.print("\t");
     6b8:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_ZN5Print5printEPKc>

000006bc <_Z16printOrientationv>:
{
  // accel.readPL() will return a byte containing information
  // about the orientation of the sensor. It will be either
  // PORTRAIT_U, PORTRAIT_D, LANDSCAPE_R, LANDSCAPE_L, or
  // LOCKOUT.
  byte pl = accel.readPL();
     6bc:	8a e9       	ldi	r24, 0x9A	; 154
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN8MMA8452Q6readPLEv>
  switch (pl)
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	89 f0       	breq	.+34     	; 0x6ea <_Z16printOrientationv+0x2e>
     6c8:	28 f4       	brcc	.+10     	; 0x6d4 <_Z16printOrientationv+0x18>
     6ca:	88 23       	and	r24, r24
     6cc:	41 f0       	breq	.+16     	; 0x6de <_Z16printOrientationv+0x22>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	49 f0       	breq	.+18     	; 0x6e4 <_Z16printOrientationv+0x28>
     6d2:	08 95       	ret
     6d4:	83 30       	cpi	r24, 0x03	; 3
     6d6:	61 f0       	breq	.+24     	; 0x6f0 <_Z16printOrientationv+0x34>
     6d8:	80 34       	cpi	r24, 0x40	; 64
     6da:	69 f0       	breq	.+26     	; 0x6f6 <_Z16printOrientationv+0x3a>
     6dc:	08 95       	ret
  {
  case PORTRAIT_U:
    Serial.print("Portrait Up");
     6de:	69 e2       	ldi	r22, 0x29	; 41
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	0b c0       	rjmp	.+22     	; 0x6fa <_Z16printOrientationv+0x3e>
    break;
  case PORTRAIT_D:
    Serial.print("Portrait Down");
     6e4:	65 e3       	ldi	r22, 0x35	; 53
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <_Z16printOrientationv+0x3e>
    break;
  case LANDSCAPE_R:
    Serial.print("Landscape Right");
     6ea:	63 e4       	ldi	r22, 0x43	; 67
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <_Z16printOrientationv+0x3e>
    break;
  case LANDSCAPE_L:
    Serial.print("Landscape Left");
     6f0:	63 e5       	ldi	r22, 0x53	; 83
     6f2:	71 e0       	ldi	r23, 0x01	; 1
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <_Z16printOrientationv+0x3e>
    break;
  case LOCKOUT:
    Serial.print("Flat");
     6f6:	62 e6       	ldi	r22, 0x62	; 98
     6f8:	71 e0       	ldi	r23, 0x01	; 1
     6fa:	8e ea       	ldi	r24, 0xAE	; 174
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_ZN5Print5printEPKc>

00000702 <loop>:
//  accelerometer and print it out if it's available.
void loop()
{
  // Use the accel.available() function to wait for new data
  //  from the accelerometer.
  if (accel.available())
     702:	8a e9       	ldi	r24, 0x9A	; 154
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN8MMA8452Q9availableEv>
     70a:	88 23       	and	r24, r24
     70c:	61 f0       	breq	.+24     	; 0x726 <loop+0x24>
  {
    // First, use accel.read() to read the new variables:
    accel.read();
     70e:	8a e9       	ldi	r24, 0x9A	; 154
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN8MMA8452Q4readEv>
    // * floats cx, cy, and cz will store the calculated 
    //   acceleration from those 12-bit values. These variables 
    //   are in units of g's.
    // Check the two function declarations below for an example
    // of how to use these variables.
    printCalculatedAccels();
     716:	0e 94 28 03 	call	0x650	; 0x650 <_Z21printCalculatedAccelsv>
    //printAccels(); // Uncomment to print digital readings
    
    // The library also supports the portrait/landscape detection
    //  of the MMA8452Q. Check out this function declaration for
    //  an example of how to use that.
    printOrientation();
     71a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_Z16printOrientationv>
    
    Serial.println(); // Print new line every time.
     71e:	8e ea       	ldi	r24, 0xAE	; 174
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_ZN5Print7printlnEv>
     726:	08 95       	ret

00000728 <_GLOBAL__sub_I_accel>:


// Begin using the library by creating an instance of the MMA8452Q
//  class. We'll call it "accel". That's what we'll reference from
//  here on out.
MMA8452Q accel;
     728:	6d e1       	ldi	r22, 0x1D	; 29
     72a:	8a e9       	ldi	r24, 0x9A	; 154
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0c 94 00 01 	jmp	0x200	; 0x200 <_ZN8MMA8452QC1Eh>

00000732 <__floatunsisf>:
     732:	e8 94       	clt
     734:	09 c0       	rjmp	.+18     	; 0x748 <__floatsisf+0x12>

00000736 <__floatsisf>:
     736:	97 fb       	bst	r25, 7
     738:	3e f4       	brtc	.+14     	; 0x748 <__floatsisf+0x12>
     73a:	90 95       	com	r25
     73c:	80 95       	com	r24
     73e:	70 95       	com	r23
     740:	61 95       	neg	r22
     742:	7f 4f       	sbci	r23, 0xFF	; 255
     744:	8f 4f       	sbci	r24, 0xFF	; 255
     746:	9f 4f       	sbci	r25, 0xFF	; 255
     748:	99 23       	and	r25, r25
     74a:	a9 f0       	breq	.+42     	; 0x776 <__floatsisf+0x40>
     74c:	f9 2f       	mov	r31, r25
     74e:	96 e9       	ldi	r25, 0x96	; 150
     750:	bb 27       	eor	r27, r27
     752:	93 95       	inc	r25
     754:	f6 95       	lsr	r31
     756:	87 95       	ror	r24
     758:	77 95       	ror	r23
     75a:	67 95       	ror	r22
     75c:	b7 95       	ror	r27
     75e:	f1 11       	cpse	r31, r1
     760:	f8 cf       	rjmp	.-16     	; 0x752 <__floatsisf+0x1c>
     762:	fa f4       	brpl	.+62     	; 0x7a2 <__floatsisf+0x6c>
     764:	bb 0f       	add	r27, r27
     766:	11 f4       	brne	.+4      	; 0x76c <__floatsisf+0x36>
     768:	60 ff       	sbrs	r22, 0
     76a:	1b c0       	rjmp	.+54     	; 0x7a2 <__floatsisf+0x6c>
     76c:	6f 5f       	subi	r22, 0xFF	; 255
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	8f 4f       	sbci	r24, 0xFF	; 255
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	16 c0       	rjmp	.+44     	; 0x7a2 <__floatsisf+0x6c>
     776:	88 23       	and	r24, r24
     778:	11 f0       	breq	.+4      	; 0x77e <__floatsisf+0x48>
     77a:	96 e9       	ldi	r25, 0x96	; 150
     77c:	11 c0       	rjmp	.+34     	; 0x7a0 <__floatsisf+0x6a>
     77e:	77 23       	and	r23, r23
     780:	21 f0       	breq	.+8      	; 0x78a <__floatsisf+0x54>
     782:	9e e8       	ldi	r25, 0x8E	; 142
     784:	87 2f       	mov	r24, r23
     786:	76 2f       	mov	r23, r22
     788:	05 c0       	rjmp	.+10     	; 0x794 <__floatsisf+0x5e>
     78a:	66 23       	and	r22, r22
     78c:	71 f0       	breq	.+28     	; 0x7aa <__floatsisf+0x74>
     78e:	96 e8       	ldi	r25, 0x86	; 134
     790:	86 2f       	mov	r24, r22
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	2a f0       	brmi	.+10     	; 0x7a2 <__floatsisf+0x6c>
     798:	9a 95       	dec	r25
     79a:	66 0f       	add	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	88 1f       	adc	r24, r24
     7a0:	da f7       	brpl	.-10     	; 0x798 <__floatsisf+0x62>
     7a2:	88 0f       	add	r24, r24
     7a4:	96 95       	lsr	r25
     7a6:	87 95       	ror	r24
     7a8:	97 f9       	bld	r25, 7
     7aa:	08 95       	ret

000007ac <__mulsf3>:
     7ac:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__mulsf3x>
     7b0:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
     7b4:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
     7b8:	38 f0       	brcs	.+14     	; 0x7c8 <__mulsf3+0x1c>
     7ba:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
     7be:	20 f0       	brcs	.+8      	; 0x7c8 <__mulsf3+0x1c>
     7c0:	95 23       	and	r25, r21
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <__mulsf3+0x1c>
     7c4:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
     7c8:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_nan>
     7cc:	11 24       	eor	r1, r1
     7ce:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>

000007d2 <__mulsf3x>:
     7d2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
     7d6:	70 f3       	brcs	.-36     	; 0x7b4 <__mulsf3+0x8>

000007d8 <__mulsf3_pse>:
     7d8:	95 9f       	mul	r25, r21
     7da:	c1 f3       	breq	.-16     	; 0x7cc <__mulsf3+0x20>
     7dc:	95 0f       	add	r25, r21
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	55 1f       	adc	r21, r21
     7e2:	62 9f       	mul	r22, r18
     7e4:	f0 01       	movw	r30, r0
     7e6:	72 9f       	mul	r23, r18
     7e8:	bb 27       	eor	r27, r27
     7ea:	f0 0d       	add	r31, r0
     7ec:	b1 1d       	adc	r27, r1
     7ee:	63 9f       	mul	r22, r19
     7f0:	aa 27       	eor	r26, r26
     7f2:	f0 0d       	add	r31, r0
     7f4:	b1 1d       	adc	r27, r1
     7f6:	aa 1f       	adc	r26, r26
     7f8:	64 9f       	mul	r22, r20
     7fa:	66 27       	eor	r22, r22
     7fc:	b0 0d       	add	r27, r0
     7fe:	a1 1d       	adc	r26, r1
     800:	66 1f       	adc	r22, r22
     802:	82 9f       	mul	r24, r18
     804:	22 27       	eor	r18, r18
     806:	b0 0d       	add	r27, r0
     808:	a1 1d       	adc	r26, r1
     80a:	62 1f       	adc	r22, r18
     80c:	73 9f       	mul	r23, r19
     80e:	b0 0d       	add	r27, r0
     810:	a1 1d       	adc	r26, r1
     812:	62 1f       	adc	r22, r18
     814:	83 9f       	mul	r24, r19
     816:	a0 0d       	add	r26, r0
     818:	61 1d       	adc	r22, r1
     81a:	22 1f       	adc	r18, r18
     81c:	74 9f       	mul	r23, r20
     81e:	33 27       	eor	r19, r19
     820:	a0 0d       	add	r26, r0
     822:	61 1d       	adc	r22, r1
     824:	23 1f       	adc	r18, r19
     826:	84 9f       	mul	r24, r20
     828:	60 0d       	add	r22, r0
     82a:	21 1d       	adc	r18, r1
     82c:	82 2f       	mov	r24, r18
     82e:	76 2f       	mov	r23, r22
     830:	6a 2f       	mov	r22, r26
     832:	11 24       	eor	r1, r1
     834:	9f 57       	subi	r25, 0x7F	; 127
     836:	50 40       	sbci	r21, 0x00	; 0
     838:	9a f0       	brmi	.+38     	; 0x860 <__mulsf3_pse+0x88>
     83a:	f1 f0       	breq	.+60     	; 0x878 <__mulsf3_pse+0xa0>
     83c:	88 23       	and	r24, r24
     83e:	4a f0       	brmi	.+18     	; 0x852 <__mulsf3_pse+0x7a>
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	bb 1f       	adc	r27, r27
     846:	66 1f       	adc	r22, r22
     848:	77 1f       	adc	r23, r23
     84a:	88 1f       	adc	r24, r24
     84c:	91 50       	subi	r25, 0x01	; 1
     84e:	50 40       	sbci	r21, 0x00	; 0
     850:	a9 f7       	brne	.-22     	; 0x83c <__mulsf3_pse+0x64>
     852:	9e 3f       	cpi	r25, 0xFE	; 254
     854:	51 05       	cpc	r21, r1
     856:	80 f0       	brcs	.+32     	; 0x878 <__mulsf3_pse+0xa0>
     858:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
     85c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
     860:	5f 3f       	cpi	r21, 0xFF	; 255
     862:	e4 f3       	brlt	.-8      	; 0x85c <__mulsf3_pse+0x84>
     864:	98 3e       	cpi	r25, 0xE8	; 232
     866:	d4 f3       	brlt	.-12     	; 0x85c <__mulsf3_pse+0x84>
     868:	86 95       	lsr	r24
     86a:	77 95       	ror	r23
     86c:	67 95       	ror	r22
     86e:	b7 95       	ror	r27
     870:	f7 95       	ror	r31
     872:	e7 95       	ror	r30
     874:	9f 5f       	subi	r25, 0xFF	; 255
     876:	c1 f7       	brne	.-16     	; 0x868 <__mulsf3_pse+0x90>
     878:	fe 2b       	or	r31, r30
     87a:	88 0f       	add	r24, r24
     87c:	91 1d       	adc	r25, r1
     87e:	96 95       	lsr	r25
     880:	87 95       	ror	r24
     882:	97 f9       	bld	r25, 7
     884:	08 95       	ret

00000886 <__fp_inf>:
     886:	97 f9       	bld	r25, 7
     888:	9f 67       	ori	r25, 0x7F	; 127
     88a:	80 e8       	ldi	r24, 0x80	; 128
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	08 95       	ret

00000892 <__fp_nan>:
     892:	9f ef       	ldi	r25, 0xFF	; 255
     894:	80 ec       	ldi	r24, 0xC0	; 192
     896:	08 95       	ret

00000898 <__fp_pscA>:
     898:	00 24       	eor	r0, r0
     89a:	0a 94       	dec	r0
     89c:	16 16       	cp	r1, r22
     89e:	17 06       	cpc	r1, r23
     8a0:	18 06       	cpc	r1, r24
     8a2:	09 06       	cpc	r0, r25
     8a4:	08 95       	ret

000008a6 <__fp_pscB>:
     8a6:	00 24       	eor	r0, r0
     8a8:	0a 94       	dec	r0
     8aa:	12 16       	cp	r1, r18
     8ac:	13 06       	cpc	r1, r19
     8ae:	14 06       	cpc	r1, r20
     8b0:	05 06       	cpc	r0, r21
     8b2:	08 95       	ret

000008b4 <__fp_round>:
     8b4:	09 2e       	mov	r0, r25
     8b6:	03 94       	inc	r0
     8b8:	00 0c       	add	r0, r0
     8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0xc>
     8bc:	88 23       	and	r24, r24
     8be:	52 f0       	brmi	.+20     	; 0x8d4 <__fp_round+0x20>
     8c0:	bb 0f       	add	r27, r27
     8c2:	40 f4       	brcc	.+16     	; 0x8d4 <__fp_round+0x20>
     8c4:	bf 2b       	or	r27, r31
     8c6:	11 f4       	brne	.+4      	; 0x8cc <__fp_round+0x18>
     8c8:	60 ff       	sbrs	r22, 0
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__fp_round+0x20>
     8cc:	6f 5f       	subi	r22, 0xFF	; 255
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	8f 4f       	sbci	r24, 0xFF	; 255
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	08 95       	ret

000008d6 <__fp_split3>:
     8d6:	57 fd       	sbrc	r21, 7
     8d8:	90 58       	subi	r25, 0x80	; 128
     8da:	44 0f       	add	r20, r20
     8dc:	55 1f       	adc	r21, r21
     8de:	59 f0       	breq	.+22     	; 0x8f6 <__fp_splitA+0x10>
     8e0:	5f 3f       	cpi	r21, 0xFF	; 255
     8e2:	71 f0       	breq	.+28     	; 0x900 <__fp_splitA+0x1a>
     8e4:	47 95       	ror	r20

000008e6 <__fp_splitA>:
     8e6:	88 0f       	add	r24, r24
     8e8:	97 fb       	bst	r25, 7
     8ea:	99 1f       	adc	r25, r25
     8ec:	61 f0       	breq	.+24     	; 0x906 <__fp_splitA+0x20>
     8ee:	9f 3f       	cpi	r25, 0xFF	; 255
     8f0:	79 f0       	breq	.+30     	; 0x910 <__fp_splitA+0x2a>
     8f2:	87 95       	ror	r24
     8f4:	08 95       	ret
     8f6:	12 16       	cp	r1, r18
     8f8:	13 06       	cpc	r1, r19
     8fa:	14 06       	cpc	r1, r20
     8fc:	55 1f       	adc	r21, r21
     8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <__fp_split3+0xe>
     900:	46 95       	lsr	r20
     902:	f1 df       	rcall	.-30     	; 0x8e6 <__fp_splitA>
     904:	08 c0       	rjmp	.+16     	; 0x916 <__fp_splitA+0x30>
     906:	16 16       	cp	r1, r22
     908:	17 06       	cpc	r1, r23
     90a:	18 06       	cpc	r1, r24
     90c:	99 1f       	adc	r25, r25
     90e:	f1 cf       	rjmp	.-30     	; 0x8f2 <__fp_splitA+0xc>
     910:	86 95       	lsr	r24
     912:	71 05       	cpc	r23, r1
     914:	61 05       	cpc	r22, r1
     916:	08 94       	sec
     918:	08 95       	ret

0000091a <__fp_zero>:
     91a:	e8 94       	clt

0000091c <__fp_szero>:
     91c:	bb 27       	eor	r27, r27
     91e:	66 27       	eor	r22, r22
     920:	77 27       	eor	r23, r23
     922:	cb 01       	movw	r24, r22
     924:	97 f9       	bld	r25, 7
     926:	08 95       	ret

00000928 <_ZN5Print17availableForWriteEv>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret

0000092e <_ZN7Serial_5writeEh>:
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	1f 92       	push	r1
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	69 83       	std	Y+1, r22	; 0x01
     93a:	dc 01       	movw	r26, r24
     93c:	ed 91       	ld	r30, X+
     93e:	fc 91       	ld	r31, X
     940:	02 80       	ldd	r0, Z+2	; 0x02
     942:	f3 81       	ldd	r31, Z+3	; 0x03
     944:	e0 2d       	mov	r30, r0
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	09 95       	icall
     952:	0f 90       	pop	r0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <_ZN7Serial_4peekEv>:
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	8c 85       	ldd	r24, Y+12	; 0x0c
     962:	9d 85       	ldd	r25, Y+13	; 0x0d
     964:	97 ff       	sbrs	r25, 7
     966:	05 c0       	rjmp	.+10     	; 0x972 <_ZN7Serial_4peekEv+0x18>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	0e 94 3e 08 	call	0x107c	; 0x107c <_Z8USB_Recvh>
     96e:	9d 87       	std	Y+13, r25	; 0x0d
     970:	8c 87       	std	Y+12, r24	; 0x0c
     972:	8c 85       	ldd	r24, Y+12	; 0x0c
     974:	9d 85       	ldd	r25, Y+13	; 0x0d
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <_ZN7Serial_17availableForWriteEv>:
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z13USB_SendSpaceh>
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret

00000986 <_ZN7Serial_5flushEv>:
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_Z9USB_Flushh>

0000098c <_ZN7Serial_9availableEv>:
     98c:	fc 01       	movw	r30, r24
     98e:	84 85       	ldd	r24, Z+12	; 0x0c
     990:	95 85       	ldd	r25, Z+13	; 0x0d
     992:	97 fd       	sbrc	r25, 7
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <_ZN7Serial_9availableEv+0x16>
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_Z13USB_Availableh>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	08 95       	ret
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_Z13USB_Availableh>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret

000009ac <_ZN7Serial_4readEv>:
     9ac:	fc 01       	movw	r30, r24
     9ae:	84 85       	ldd	r24, Z+12	; 0x0c
     9b0:	95 85       	ldd	r25, Z+13	; 0x0d
     9b2:	97 fd       	sbrc	r25, 7
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <_ZN7Serial_4readEv+0x14>
     9b6:	2f ef       	ldi	r18, 0xFF	; 255
     9b8:	3f ef       	ldi	r19, 0xFF	; 255
     9ba:	35 87       	std	Z+13, r19	; 0x0d
     9bc:	24 87       	std	Z+12, r18	; 0x0c
     9be:	08 95       	ret
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0c 94 3e 08 	jmp	0x107c	; 0x107c <_Z8USB_Recvh>

000009c6 <_ZN7Serial_5writeEPKhj>:
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	ec 01       	movw	r28, r24
     9cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo+0x7>
     9d0:	88 23       	and	r24, r24
     9d2:	31 f0       	breq	.+12     	; 0x9e0 <_ZN7Serial_5writeEPKhj+0x1a>
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z8USB_SendhPKvi>
     9da:	18 16       	cp	r1, r24
     9dc:	19 06       	cpc	r1, r25
     9de:	34 f0       	brlt	.+12     	; 0x9ec <_ZN7Serial_5writeEPKhj+0x26>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9b 83       	std	Y+3, r25	; 0x03
     9e6:	8a 83       	std	Y+2, r24	; 0x02
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <_Z16isLUFAbootloaderv>:
     9f2:	ee ef       	ldi	r30, 0xFE	; 254
     9f4:	ff e7       	ldi	r31, 0x7F	; 127
     9f6:	25 91       	lpm	r18, Z+
     9f8:	34 91       	lpm	r19, Z
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	2b 3f       	cpi	r18, 0xFB	; 251
     9fe:	3c 4d       	sbci	r19, 0xDC	; 220
     a00:	09 f0       	breq	.+2      	; 0xa04 <_Z16isLUFAbootloaderv+0x12>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret

00000a06 <_Z16CDC_GetInterfacePh>:
     a06:	fc 01       	movw	r30, r24
     a08:	90 81       	ld	r25, Z
     a0a:	9e 5f       	subi	r25, 0xFE	; 254
     a0c:	90 83       	st	Z, r25
     a0e:	42 e4       	ldi	r20, 0x42	; 66
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	6a ec       	ldi	r22, 0xCA	; 202
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e8       	ldi	r24, 0x80	; 128
     a18:	0c 94 1f 09 	jmp	0x123e	; 0x123e <_Z15USB_SendControlhPKvi>

00000a1c <_Z9CDC_SetupR8USBSetup>:
     a1c:	fc 01       	movw	r30, r24
     a1e:	81 81       	ldd	r24, Z+1	; 0x01
     a20:	90 81       	ld	r25, Z
     a22:	91 3a       	cpi	r25, 0xA1	; 161
     a24:	59 f4       	brne	.+22     	; 0xa3c <_Z9CDC_SetupR8USBSetup+0x20>
     a26:	81 32       	cpi	r24, 0x21	; 33
     a28:	09 f0       	breq	.+2      	; 0xa2c <_Z9CDC_SetupR8USBSetup+0x10>
     a2a:	65 c0       	rjmp	.+202    	; 0xaf6 <_Z9CDC_SetupR8USBSetup+0xda>
     a2c:	47 e0       	ldi	r20, 0x07	; 7
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	64 e0       	ldi	r22, 0x04	; 4
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z15USB_SendControlhPKvi>
     a3a:	5b c0       	rjmp	.+182    	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>
     a3c:	91 32       	cpi	r25, 0x21	; 33
     a3e:	09 f0       	breq	.+2      	; 0xa42 <_Z9CDC_SetupR8USBSetup+0x26>
     a40:	5a c0       	rjmp	.+180    	; 0xaf6 <_Z9CDC_SetupR8USBSetup+0xda>
     a42:	83 32       	cpi	r24, 0x23	; 35
     a44:	69 f4       	brne	.+26     	; 0xa60 <_Z9CDC_SetupR8USBSetup+0x44>
     a46:	82 81       	ldd	r24, Z+2	; 0x02
     a48:	93 81       	ldd	r25, Z+3	; 0x03
     a4a:	a0 e0       	ldi	r26, 0x00	; 0
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a52:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     a56:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     a5a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     a5e:	49 c0       	rjmp	.+146    	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>
     a60:	80 32       	cpi	r24, 0x20	; 32
     a62:	39 f4       	brne	.+14     	; 0xa72 <_Z9CDC_SetupR8USBSetup+0x56>
     a64:	67 e0       	ldi	r22, 0x07	; 7
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 46 09 	call	0x128c	; 0x128c <_Z15USB_RecvControlPvi>
     a70:	40 c0       	rjmp	.+128    	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>
     a72:	82 32       	cpi	r24, 0x22	; 34
     a74:	09 f0       	breq	.+2      	; 0xa78 <_Z9CDC_SetupR8USBSetup+0x5c>
     a76:	3d c0       	rjmp	.+122    	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZL12_usbLineInfo+0x7>
     a7e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z16isLUFAbootloaderv>
     a82:	88 23       	and	r24, r24
     a84:	19 f0       	breq	.+6      	; 0xa8c <_Z9CDC_SetupR8USBSetup+0x70>
     a86:	ee ef       	ldi	r30, 0xFE	; 254
     a88:	fa e0       	ldi	r31, 0x0A	; 10
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <_Z9CDC_SetupR8USBSetup+0x74>
     a8c:	e0 e0       	ldi	r30, 0x00	; 0
     a8e:	f8 e0       	ldi	r31, 0x08	; 8
     a90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_ZL12_usbLineInfo>
     a94:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_ZL12_usbLineInfo+0x1>
     a98:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_ZL12_usbLineInfo+0x2>
     a9c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_ZL12_usbLineInfo+0x3>
     aa0:	80 3b       	cpi	r24, 0xB0	; 176
     aa2:	94 40       	sbci	r25, 0x04	; 4
     aa4:	a1 05       	cpc	r26, r1
     aa6:	b1 05       	cpc	r27, r1
     aa8:	41 f5       	brne	.+80     	; 0xafa <_Z9CDC_SetupR8USBSetup+0xde>
     aaa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo+0x7>
     aae:	80 fd       	sbrc	r24, 0
     ab0:	24 c0       	rjmp	.+72     	; 0xafa <_Z9CDC_SetupR8USBSetup+0xde>
     ab2:	ee 3f       	cpi	r30, 0xFE	; 254
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	f8 07       	cpc	r31, r24
     ab8:	51 f0       	breq	.+20     	; 0xace <_Z9CDC_SetupR8USBSetup+0xb2>
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	87 37       	cpi	r24, 0x77	; 119
     ac0:	27 e7       	ldi	r18, 0x77	; 119
     ac2:	92 07       	cpc	r25, r18
     ac4:	21 f0       	breq	.+8      	; 0xace <_Z9CDC_SetupR8USBSetup+0xb2>
     ac6:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x81d>
     aca:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x81c>
     ace:	87 e7       	ldi	r24, 0x77	; 119
     ad0:	97 e7       	ldi	r25, 0x77	; 119
     ad2:	91 83       	std	Z+1, r25	; 0x01
     ad4:	80 83       	st	Z, r24
     ad6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ada:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <_ZL11wdtcsr_save>
     ade:	9b e0       	ldi	r25, 0x0B	; 11
     ae0:	88 e1       	ldi	r24, 0x18	; 24
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	a8 95       	wdr
     ae8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	08 95       	ret
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 95       	ret
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	87 37       	cpi	r24, 0x77	; 119
     b00:	97 47       	sbci	r25, 0x77	; 119
     b02:	b9 f7       	brne	.-18     	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>
     b04:	a8 95       	wdr
     b06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b0a:	88 61       	ori	r24, 0x18	; 24
     b0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     b10:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <_ZL11wdtcsr_save>
     b14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     b18:	ee 3f       	cpi	r30, 0xFE	; 254
     b1a:	8a e0       	ldi	r24, 0x0A	; 10
     b1c:	f8 07       	cpc	r31, r24
     b1e:	39 f0       	breq	.+14     	; 0xb2e <__stack+0x2f>
     b20:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x81c>
     b24:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x81d>
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	80 83       	st	Z, r24
     b2c:	e2 cf       	rjmp	.-60     	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>
     b2e:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x81d>
     b32:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x81c>
     b36:	dd cf       	rjmp	.-70     	; 0xaf2 <_Z9CDC_SetupR8USBSetup+0xd6>

00000b38 <_ZN7Serial_5beginEm>:
     b38:	2f ef       	ldi	r18, 0xFF	; 255
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	fc 01       	movw	r30, r24
     b3e:	35 87       	std	Z+13, r19	; 0x0d
     b40:	24 87       	std	Z+12, r18	; 0x0c
     b42:	08 95       	ret

00000b44 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b44:	ee ea       	ldi	r30, 0xAE	; 174
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	13 82       	std	Z+3, r1	; 0x03
     b4a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b4c:	88 ee       	ldi	r24, 0xE8	; 232
     b4e:	93 e0       	ldi	r25, 0x03	; 3
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	84 83       	std	Z+4, r24	; 0x04
     b56:	95 83       	std	Z+5, r25	; 0x05
     b58:	a6 83       	std	Z+6, r26	; 0x06
     b5a:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
     b5c:	8b e6       	ldi	r24, 0x6B	; 107
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	80 83       	st	Z, r24
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9f ef       	ldi	r25, 0xFF	; 255
     b68:	95 87       	std	Z+13, r25	; 0x0d
     b6a:	84 87       	std	Z+12, r24	; 0x0c
     b6c:	08 95       	ret

00000b6e <initVariant>:
     b6e:	08 95       	ret

00000b70 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     b70:	0e 94 1c 0c 	call	0x1838	; 0x1838 <init>

	initVariant();
     b74:	0e 94 b7 05 	call	0xb6e	; 0xb6e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     b80:	0e 94 14 03 	call	0x628	; 0x628 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     b88:	0e 94 81 03 	call	0x702	; 0x702 <loop>
		if (serialEventRun) serialEventRun();
     b8c:	20 97       	sbiw	r28, 0x00	; 0
     b8e:	e1 f3       	breq	.-8      	; 0xb88 <main+0x18>
     b90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b94:	f9 cf       	rjmp	.-14     	; 0xb88 <main+0x18>

00000b96 <_ZN5Print5writeEPKc>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     b96:	61 15       	cp	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	79 f0       	breq	.+30     	; 0xbba <_ZN5Print5writeEPKc+0x24>
     b9c:	fb 01       	movw	r30, r22
     b9e:	01 90       	ld	r0, Z+
     ba0:	00 20       	and	r0, r0
     ba2:	e9 f7       	brne	.-6      	; 0xb9e <_ZN5Print5writeEPKc+0x8>
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	af 01       	movw	r20, r30
     ba8:	46 1b       	sub	r20, r22
     baa:	57 0b       	sbc	r21, r23
     bac:	dc 01       	movw	r26, r24
     bae:	ed 91       	ld	r30, X+
     bb0:	fc 91       	ld	r31, X
     bb2:	02 80       	ldd	r0, Z+2	; 0x02
     bb4:	f3 81       	ldd	r31, Z+3	; 0x03
     bb6:	e0 2d       	mov	r30, r0
     bb8:	09 94       	ijmp
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	08 95       	ret

00000bc0 <_ZN5Print5printEPKc>:
     bc0:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <_ZN5Print5writeEPKc>

00000bc4 <_ZN5Print5printEc>:
     bc4:	dc 01       	movw	r26, r24
     bc6:	ed 91       	ld	r30, X+
     bc8:	fc 91       	ld	r31, X
     bca:	01 90       	ld	r0, Z+
     bcc:	f0 81       	ld	r31, Z
     bce:	e0 2d       	mov	r30, r0
     bd0:	09 94       	ijmp

00000bd2 <_ZN5Print7printlnEv>:
     bd2:	69 e7       	ldi	r22, 0x79	; 121
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <_ZN5Print5writeEPKc>

00000bda <_ZN5Print7printlnEPKc>:
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ec 01       	movw	r28, r24
     be4:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN5Print5writeEPKc>
     be8:	8c 01       	movw	r16, r24
     bea:	ce 01       	movw	r24, r28
     bec:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN5Print7printlnEv>
     bf0:	80 0f       	add	r24, r16
     bf2:	91 1f       	adc	r25, r17
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret

00000bfe <_ZN5Print11printNumberEmh>:
     bfe:	8f 92       	push	r8
     c00:	9f 92       	push	r9
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	a1 97       	sbiw	r28, 0x21	; 33
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	7c 01       	movw	r14, r24
     c24:	fa 01       	movw	r30, r20
     c26:	cb 01       	movw	r24, r22
     c28:	19 a2       	std	Y+33, r1	; 0x21
     c2a:	22 30       	cpi	r18, 0x02	; 2
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <_ZN5Print11printNumberEmh+0x32>
     c2e:	2a e0       	ldi	r18, 0x0A	; 10
     c30:	8e 01       	movw	r16, r28
     c32:	0f 5d       	subi	r16, 0xDF	; 223
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	82 2e       	mov	r8, r18
     c38:	91 2c       	mov	r9, r1
     c3a:	a1 2c       	mov	r10, r1
     c3c:	b1 2c       	mov	r11, r1
     c3e:	bf 01       	movw	r22, r30
     c40:	a5 01       	movw	r20, r10
     c42:	94 01       	movw	r18, r8
     c44:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodsi4>
     c48:	f9 01       	movw	r30, r18
     c4a:	ca 01       	movw	r24, r20
     c4c:	01 50       	subi	r16, 0x01	; 1
     c4e:	11 09       	sbc	r17, r1
     c50:	6a 30       	cpi	r22, 0x0A	; 10
     c52:	10 f4       	brcc	.+4      	; 0xc58 <_ZN5Print11printNumberEmh+0x5a>
     c54:	60 5d       	subi	r22, 0xD0	; 208
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <_ZN5Print11printNumberEmh+0x5c>
     c58:	69 5c       	subi	r22, 0xC9	; 201
     c5a:	d8 01       	movw	r26, r16
     c5c:	6c 93       	st	X, r22
     c5e:	23 2b       	or	r18, r19
     c60:	24 2b       	or	r18, r20
     c62:	25 2b       	or	r18, r21
     c64:	61 f7       	brne	.-40     	; 0xc3e <_ZN5Print11printNumberEmh+0x40>
     c66:	b8 01       	movw	r22, r16
     c68:	c7 01       	movw	r24, r14
     c6a:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN5Print5writeEPKc>
     c6e:	a1 96       	adiw	r28, 0x21	; 33
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	08 95       	ret

00000c90 <_ZN5Print5printEmi>:
     c90:	21 15       	cp	r18, r1
     c92:	31 05       	cpc	r19, r1
     c94:	41 f4       	brne	.+16     	; 0xca6 <_ZN5Print5printEmi+0x16>
     c96:	dc 01       	movw	r26, r24
     c98:	ed 91       	ld	r30, X+
     c9a:	fc 91       	ld	r31, X
     c9c:	01 90       	ld	r0, Z+
     c9e:	f0 81       	ld	r31, Z
     ca0:	e0 2d       	mov	r30, r0
     ca2:	64 2f       	mov	r22, r20
     ca4:	09 94       	ijmp
     ca6:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_ZN5Print11printNumberEmh>

00000caa <_ZN5Print5printEji>:
     caa:	9a 01       	movw	r18, r20
     cac:	ab 01       	movw	r20, r22
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0c 94 48 06 	jmp	0xc90	; 0xc90 <_ZN5Print5printEmi>

00000cb6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     cb6:	7f 92       	push	r7
     cb8:	8f 92       	push	r8
     cba:	9f 92       	push	r9
     cbc:	af 92       	push	r10
     cbe:	bf 92       	push	r11
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	8c 01       	movw	r16, r24
     cd2:	6a 01       	movw	r12, r20
     cd4:	7b 01       	movw	r14, r22
     cd6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     cd8:	9a 01       	movw	r18, r20
     cda:	ab 01       	movw	r20, r22
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	0e 94 4a 12 	call	0x2494	; 0x2494 <__unordsf2>
     ce4:	88 23       	and	r24, r24
     ce6:	19 f0       	breq	.+6      	; 0xcee <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ce8:	6c e7       	ldi	r22, 0x7C	; 124
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	27 c0       	rjmp	.+78     	; 0xd3c <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     cee:	46 01       	movw	r8, r12
     cf0:	57 01       	movw	r10, r14
     cf2:	e8 94       	clt
     cf4:	b7 f8       	bld	r11, 7
     cf6:	2f ef       	ldi	r18, 0xFF	; 255
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	4f e7       	ldi	r20, 0x7F	; 127
     cfc:	5f e7       	ldi	r21, 0x7F	; 127
     cfe:	c5 01       	movw	r24, r10
     d00:	b4 01       	movw	r22, r8
     d02:	0e 94 4a 12 	call	0x2494	; 0x2494 <__unordsf2>
     d06:	81 11       	cpse	r24, r1
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <_ZN5Print10printFloatEdh+0x6e>
     d0a:	2f ef       	ldi	r18, 0xFF	; 255
     d0c:	3f ef       	ldi	r19, 0xFF	; 255
     d0e:	4f e7       	ldi	r20, 0x7F	; 127
     d10:	5f e7       	ldi	r21, 0x7F	; 127
     d12:	c5 01       	movw	r24, r10
     d14:	b4 01       	movw	r22, r8
     d16:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__cmpsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	1c f4       	brge	.+6      	; 0xd24 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d1e:	60 e8       	ldi	r22, 0x80	; 128
     d20:	71 e0       	ldi	r23, 0x01	; 1
     d22:	0c c0       	rjmp	.+24     	; 0xd3c <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     d24:	2f ef       	ldi	r18, 0xFF	; 255
     d26:	3f ef       	ldi	r19, 0xFF	; 255
     d28:	4f e7       	ldi	r20, 0x7F	; 127
     d2a:	5f e4       	ldi	r21, 0x4F	; 79
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 45 12 	call	0x248a	; 0x248a <__gesf2>
     d34:	18 16       	cp	r1, r24
     d36:	94 f4       	brge	.+36     	; 0xd5c <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d38:	64 e8       	ldi	r22, 0x84	; 132
     d3a:	71 e0       	ldi	r23, 0x01	; 1
     d3c:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	af 90       	pop	r10
     d52:	9f 90       	pop	r9
     d54:	8f 90       	pop	r8
     d56:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d58:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     d5c:	2f ef       	ldi	r18, 0xFF	; 255
     d5e:	3f ef       	ldi	r19, 0xFF	; 255
     d60:	4f e7       	ldi	r20, 0x7F	; 127
     d62:	5f ec       	ldi	r21, 0xCF	; 207
     d64:	c7 01       	movw	r24, r14
     d66:	b6 01       	movw	r22, r12
     d68:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__cmpsf2>
     d6c:	87 fd       	sbrc	r24, 7
     d6e:	e4 cf       	rjmp	.-56     	; 0xd38 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	a9 01       	movw	r20, r18
     d76:	c7 01       	movw	r24, r14
     d78:	b6 01       	movw	r22, r12
     d7a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__cmpsf2>
     d7e:	87 ff       	sbrs	r24, 7
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     d82:	6d e2       	ldi	r22, 0x2D	; 45
     d84:	c8 01       	movw	r24, r16
     d86:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN5Print5printEc>
     d8a:	ec 01       	movw	r28, r24
     number = -number;
     d8c:	f7 fa       	bst	r15, 7
     d8e:	f0 94       	com	r15
     d90:	f7 f8       	bld	r15, 7
     d92:	f0 94       	com	r15
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     d96:	c0 e0       	ldi	r28, 0x00	; 0
     d98:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     d9a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     da4:	7b 14       	cp	r7, r11
     da6:	41 f0       	breq	.+16     	; 0xdb8 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e2       	ldi	r20, 0x20	; 32
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 80 11 	call	0x2300	; 0x2300 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     db4:	b3 94       	inc	r11
     db6:	f6 cf       	rjmp	.-20     	; 0xda4 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     db8:	a7 01       	movw	r20, r14
     dba:	96 01       	movw	r18, r12
     dbc:	0e 94 0f 11 	call	0x221e	; 0x221e <__addsf3>
     dc0:	6b 01       	movw	r12, r22
     dc2:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     dc4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fixunssfsi>
     dc8:	4b 01       	movw	r8, r22
     dca:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	ab 01       	movw	r20, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	c8 01       	movw	r24, r16
     dd4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     dd8:	c8 0f       	add	r28, r24
     dda:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     ddc:	77 20       	and	r7, r7
     dde:	b9 f1       	breq	.+110    	; 0xe4e <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     de0:	c5 01       	movw	r24, r10
     de2:	b4 01       	movw	r22, r8
     de4:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	0e 94 0e 11 	call	0x221c	; 0x221c <__subsf3>
     df4:	6b 01       	movw	r12, r22
     df6:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     df8:	6e e2       	ldi	r22, 0x2E	; 46
     dfa:	c8 01       	movw	r24, r16
     dfc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN5Print5printEc>
     e00:	c8 0f       	add	r28, r24
     e02:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	c7 01       	movw	r24, r14
     e0e:	b6 01       	movw	r22, r12
     e10:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
     e14:	4b 01       	movw	r8, r22
     e16:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     e18:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fixunssfsi>
     e1c:	6b 01       	movw	r12, r22
     e1e:	7c 01       	movw	r14, r24
    n += print(toPrint);
     e20:	4a e0       	ldi	r20, 0x0A	; 10
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	c8 01       	movw	r24, r16
     e26:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print5printEji>
     e2a:	c8 0f       	add	r28, r24
     e2c:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     e2e:	b6 01       	movw	r22, r12
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	c5 01       	movw	r24, r10
     e3e:	b4 01       	movw	r22, r8
     e40:	0e 94 0e 11 	call	0x221c	; 0x221c <__subsf3>
     e44:	6b 01       	movw	r12, r22
     e46:	7c 01       	movw	r14, r24
     e48:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     e4a:	71 10       	cpse	r7, r1
     e4c:	db cf       	rjmp	.-74     	; 0xe04 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     e4e:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	bf 90       	pop	r11
     e62:	af 90       	pop	r10
     e64:	9f 90       	pop	r9
     e66:	8f 90       	pop	r8
     e68:	7f 90       	pop	r7
     e6a:	08 95       	ret

00000e6c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     e6c:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_ZN5Print10printFloatEdh>

00000e70 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     e70:	61 50       	subi	r22, 0x01	; 1
     e72:	30 f0       	brcs	.+12     	; 0xe80 <_ZL4RecvPVhh+0x10>
     e74:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	f8 cf       	rjmp	.-16     	; 0xe70 <_ZL4RecvPVhh>
     e80:	28 98       	cbi	0x05, 0	; 5
     e82:	84 e6       	ldi	r24, 0x64	; 100
     e84:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <RxLEDPulse>
     e88:	08 95       	ret

00000e8a <_ZL11SendControlh>:
     e8a:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <_ZL6_cmark>
     e8e:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <_ZL6_cmark+0x1>
     e92:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_ZL5_cend>
     e96:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_ZL5_cend+0x1>
     e9a:	42 17       	cp	r20, r18
     e9c:	53 07       	cpc	r21, r19
     e9e:	b4 f4       	brge	.+44     	; 0xecc <_ZL11SendControlh+0x42>
     ea0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     ea4:	95 70       	andi	r25, 0x05	; 5
     ea6:	e1 f3       	breq	.-8      	; 0xea0 <_ZL11SendControlh+0x16>
     ea8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     eac:	92 fd       	sbrc	r25, 2
     eae:	19 c0       	rjmp	.+50     	; 0xee2 <_ZL11SendControlh+0x58>
     eb0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     eb4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZL6_cmark>
     eb8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <_ZL6_cmark+0x1>
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	8f 73       	andi	r24, 0x3F	; 63
     ec0:	99 27       	eor	r25, r25
     ec2:	89 2b       	or	r24, r25
     ec4:	19 f4       	brne	.+6      	; 0xecc <_ZL11SendControlh+0x42>
     ec6:	8e ef       	ldi	r24, 0xFE	; 254
     ec8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     ecc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZL6_cmark>
     ed0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <_ZL6_cmark+0x1>
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <_ZL6_cmark+0x1>
     eda:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZL6_cmark>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	08 95       	ret

00000ee6 <_ZL24USB_SendStringDescriptorPKhhh>:
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	d8 2e       	mov	r13, r24
     ef6:	f9 2e       	mov	r15, r25
     ef8:	e4 2e       	mov	r14, r20
     efa:	06 2f       	mov	r16, r22
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	c8 01       	movw	r24, r16
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	88 0f       	add	r24, r24
     f04:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZL11SendControlh>
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZL11SendControlh>
     f0e:	cd 2d       	mov	r28, r13
     f10:	df 2d       	mov	r29, r15
     f12:	0c 0f       	add	r16, r28
     f14:	1d 1f       	adc	r17, r29
     f16:	c0 17       	cp	r28, r16
     f18:	d1 07       	cpc	r29, r17
     f1a:	89 f0       	breq	.+34     	; 0xf3e <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     f1c:	e7 fe       	sbrs	r14, 7
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     f20:	fe 01       	movw	r30, r28
     f22:	84 91       	lpm	r24, Z
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     f26:	88 81       	ld	r24, Y
     f28:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZL11SendControlh>
     f2c:	f8 2e       	mov	r15, r24
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZL11SendControlh>
     f34:	8f 21       	and	r24, r15
     f36:	21 96       	adiw	r28, 0x01	; 1
     f38:	81 11       	cpse	r24, r1
     f3a:	ed cf       	rjmp	.-38     	; 0xf16 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	08 95       	ret

00000f50 <_ZL15USB_ClockEnablev>:
     f50:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
     f5a:	80 ea       	ldi	r24, 0xA0	; 160
     f5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     f60:	89 b5       	in	r24, 0x29	; 41
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	89 bd       	out	0x29, r24	; 41
     f66:	89 b5       	in	r24, 0x29	; 41
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	89 bd       	out	0x29, r24	; 41
     f6c:	09 b4       	in	r0, 0x29	; 41
     f6e:	00 fe       	sbrs	r0, 0
     f70:	fd cf       	rjmp	.-6      	; 0xf6c <_ZL15USB_ClockEnablev+0x1c>
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <delay>
     f7e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     f82:	8f 7c       	andi	r24, 0xCF	; 207
     f84:	80 61       	ori	r24, 0x10	; 16
     f86:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     f8a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
     f8e:	80 7f       	andi	r24, 0xF0	; 240
     f90:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
     f94:	08 95       	ret

00000f96 <_ZL14SendInterfacesv>:
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	1f 92       	push	r1
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z16CDC_GetInterfacePh>
     faa:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_Z12PluggableUSBv>
     fae:	be 01       	movw	r22, r28
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN13PluggableUSB_12getInterfaceEPh>
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <_ZN6LockEPC1Eh>:
     fc2:	2f b7       	in	r18, 0x3f	; 63
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 83       	st	Z, r18
     fc8:	f8 94       	cli
     fca:	67 70       	andi	r22, 0x07	; 7
     fcc:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     fd0:	08 95       	ret

00000fd2 <_Z13USB_Availableh>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	68 2f       	mov	r22, r24
     fde:	ce 01       	movw	r24, r28
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6LockEPC1Eh>
     fe6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     fea:	99 81       	ldd	r25, Y+1	; 0x01
     fec:	9f bf       	out	0x3f, r25	; 63
     fee:	0f 90       	pop	r0
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <_Z8USB_RecvhPvi>:
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	1f 92       	push	r1
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_usbConfiguration>
    100c:	99 23       	and	r25, r25
    100e:	11 f0       	breq	.+4      	; 0x1014 <_Z8USB_RecvhPvi+0x1e>
    1010:	57 ff       	sbrs	r21, 7
    1012:	03 c0       	rjmp	.+6      	; 0x101a <_Z8USB_RecvhPvi+0x24>
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	29 c0       	rjmp	.+82     	; 0x106c <_Z8USB_RecvhPvi+0x76>
    101a:	8a 01       	movw	r16, r20
    101c:	7b 01       	movw	r14, r22
    101e:	68 2f       	mov	r22, r24
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6LockEPC1Eh>
    1028:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	02 17       	cp	r16, r18
    1030:	13 07       	cpc	r17, r19
    1032:	0c f4       	brge	.+2      	; 0x1036 <_Z8USB_RecvhPvi+0x40>
    1034:	98 01       	movw	r18, r16
    1036:	82 2f       	mov	r24, r18
    1038:	f7 01       	movw	r30, r14
    103a:	94 e6       	ldi	r25, 0x64	; 100
    103c:	81 50       	subi	r24, 0x01	; 1
    103e:	38 f0       	brcs	.+14     	; 0x104e <_Z8USB_RecvhPvi+0x58>
    1040:	28 98       	cbi	0x05, 0	; 5
    1042:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <RxLEDPulse>
    1046:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    104a:	41 93       	st	Z+, r20
    104c:	f7 cf       	rjmp	.-18     	; 0x103c <_Z8USB_RecvhPvi+0x46>
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	21 f0       	breq	.+8      	; 0x105c <_Z8USB_RecvhPvi+0x66>
    1054:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1058:	88 23       	and	r24, r24
    105a:	21 f0       	breq	.+8      	; 0x1064 <_Z8USB_RecvhPvi+0x6e>
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	8f bf       	out	0x3f, r24	; 63
    1060:	c9 01       	movw	r24, r18
    1062:	04 c0       	rjmp	.+8      	; 0x106c <_Z8USB_RecvhPvi+0x76>
    1064:	8b e6       	ldi	r24, 0x6B	; 107
    1066:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    106a:	f8 cf       	rjmp	.-16     	; 0x105c <_Z8USB_RecvhPvi+0x66>
    106c:	0f 90       	pop	r0
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <_Z8USB_Recvh>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	be 01       	movw	r22, r28
    108c:	6f 5f       	subi	r22, 0xFF	; 255
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z8USB_RecvhPvi>
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	19 f4       	brne	.+6      	; 0x109e <_Z8USB_Recvh+0x22>
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <_Z8USB_Recvh+0x26>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	0f 90       	pop	r0
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_Z13USB_SendSpaceh>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	1f 92       	push	r1
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	68 2f       	mov	r22, r24
    10b6:	ce 01       	movw	r24, r28
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6LockEPC1Eh>
    10be:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    10c2:	89 2f       	mov	r24, r25
    10c4:	80 72       	andi	r24, 0x20	; 32
    10c6:	95 ff       	sbrs	r25, 5
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <_Z13USB_SendSpaceh+0x28>
    10ca:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    10ce:	80 e4       	ldi	r24, 0x40	; 64
    10d0:	89 1b       	sub	r24, r25
    10d2:	99 81       	ldd	r25, Y+1	; 0x01
    10d4:	9f bf       	out	0x3f, r25	; 63
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <_Z8USB_SendhPKvi>:
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	1f 92       	push	r1
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	98 2e       	mov	r9, r24
    1104:	6b 01       	movw	r12, r22
    1106:	b4 2e       	mov	r11, r20
    1108:	05 2f       	mov	r16, r21
    110a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_usbConfiguration>
    110e:	81 11       	cpse	r24, r1
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <_Z8USB_SendhPKvi+0x3a>
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	9f ef       	ldi	r25, 0xFF	; 255
    1116:	77 c0       	rjmp	.+238    	; 0x1206 <_Z8USB_SendhPKvi+0x128>
    1118:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_usbSuspendState>
    111c:	80 ff       	sbrs	r24, 0
    111e:	05 c0       	rjmp	.+10     	; 0x112a <_Z8USB_SendhPKvi+0x4c>
    1120:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    1124:	82 60       	ori	r24, 0x02	; 2
    1126:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    112a:	eb 2c       	mov	r14, r11
    112c:	f0 2e       	mov	r15, r16
    112e:	a1 2c       	mov	r10, r1
    1130:	8a ef       	ldi	r24, 0xFA	; 250
    1132:	88 2e       	mov	r8, r24
    1134:	89 2d       	mov	r24, r9
    1136:	80 72       	andi	r24, 0x20	; 32
    1138:	68 2e       	mov	r6, r24
    113a:	89 2d       	mov	r24, r9
    113c:	80 74       	andi	r24, 0x40	; 64
    113e:	58 2e       	mov	r5, r24
    1140:	9a e3       	ldi	r25, 0x3A	; 58
    1142:	79 2e       	mov	r7, r25
    1144:	e1 14       	cp	r14, r1
    1146:	f1 04       	cpc	r15, r1
    1148:	19 f4       	brne	.+6      	; 0x1150 <_Z8USB_SendhPKvi+0x72>
    114a:	aa 20       	and	r10, r10
    114c:	09 f4       	brne	.+2      	; 0x1150 <_Z8USB_SendhPKvi+0x72>
    114e:	55 c0       	rjmp	.+170    	; 0x11fa <_Z8USB_SendhPKvi+0x11c>
    1150:	89 2d       	mov	r24, r9
    1152:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z13USB_SendSpaceh>
    1156:	18 2f       	mov	r17, r24
    1158:	81 11       	cpse	r24, r1
    115a:	0a c0       	rjmp	.+20     	; 0x1170 <_Z8USB_SendhPKvi+0x92>
    115c:	8a 94       	dec	r8
    115e:	88 20       	and	r8, r8
    1160:	c1 f2       	breq	.-80     	; 0x1112 <_Z8USB_SendhPKvi+0x34>
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <delay>
    116e:	ea cf       	rjmp	.-44     	; 0x1144 <_Z8USB_SendhPKvi+0x66>
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	e8 16       	cp	r14, r24
    1174:	f9 06       	cpc	r15, r25
    1176:	0c f4       	brge	.+2      	; 0x117a <_Z8USB_SendhPKvi+0x9c>
    1178:	1e 2d       	mov	r17, r14
    117a:	69 2d       	mov	r22, r9
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6LockEPC1Eh>
    1184:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1188:	85 ff       	sbrs	r24, 5
    118a:	34 c0       	rjmp	.+104    	; 0x11f4 <_Z8USB_SendhPKvi+0x116>
    118c:	81 2f       	mov	r24, r17
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	e8 1a       	sub	r14, r24
    1192:	f9 0a       	sbc	r15, r25
    1194:	66 20       	and	r6, r6
    1196:	29 f0       	breq	.+10     	; 0x11a2 <_Z8USB_SendhPKvi+0xc4>
    1198:	11 50       	subi	r17, 0x01	; 1
    119a:	a0 f0       	brcs	.+40     	; 0x11c4 <_Z8USB_SendhPKvi+0xe6>
    119c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    11a0:	fb cf       	rjmp	.-10     	; 0x1198 <_Z8USB_SendhPKvi+0xba>
    11a2:	f6 01       	movw	r30, r12
    11a4:	97 fe       	sbrs	r9, 7
    11a6:	0a c0       	rjmp	.+20     	; 0x11bc <_Z8USB_SendhPKvi+0xde>
    11a8:	11 50       	subi	r17, 0x01	; 1
    11aa:	50 f0       	brcs	.+20     	; 0x11c0 <_Z8USB_SendhPKvi+0xe2>
    11ac:	24 91       	lpm	r18, Z
    11ae:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    11b2:	31 96       	adiw	r30, 0x01	; 1
    11b4:	f9 cf       	rjmp	.-14     	; 0x11a8 <_Z8USB_SendhPKvi+0xca>
    11b6:	21 91       	ld	r18, Z+
    11b8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    11bc:	11 50       	subi	r17, 0x01	; 1
    11be:	d8 f7       	brcc	.-10     	; 0x11b6 <_Z8USB_SendhPKvi+0xd8>
    11c0:	c8 0e       	add	r12, r24
    11c2:	d9 1e       	adc	r13, r25
    11c4:	aa 20       	and	r10, r10
    11c6:	19 f0       	breq	.+6      	; 0x11ce <_Z8USB_SendhPKvi+0xf0>
    11c8:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    11cc:	0b c0       	rjmp	.+22     	; 0x11e4 <_Z8USB_SendhPKvi+0x106>
    11ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    11d2:	85 fd       	sbrc	r24, 5
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <_Z8USB_SendhPKvi+0x10a>
    11d6:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    11da:	aa 24       	eor	r10, r10
    11dc:	a3 94       	inc	r10
    11de:	e1 14       	cp	r14, r1
    11e0:	f1 04       	cpc	r15, r1
    11e2:	41 f0       	breq	.+16     	; 0x11f4 <_Z8USB_SendhPKvi+0x116>
    11e4:	a1 2c       	mov	r10, r1
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <_Z8USB_SendhPKvi+0x116>
    11e8:	e1 14       	cp	r14, r1
    11ea:	f1 04       	cpc	r15, r1
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <_Z8USB_SendhPKvi+0x116>
    11ee:	51 10       	cpse	r5, r1
    11f0:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	8f bf       	out	0x3f, r24	; 63
    11f8:	a5 cf       	rjmp	.-182    	; 0x1144 <_Z8USB_SendhPKvi+0x66>
    11fa:	5d 98       	cbi	0x0b, 5	; 11
    11fc:	84 e6       	ldi	r24, 0x64	; 100
    11fe:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <TxLEDPulse>
    1202:	8b 2d       	mov	r24, r11
    1204:	90 2f       	mov	r25, r16
    1206:	0f 90       	pop	r0
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	7f 90       	pop	r7
    1222:	6f 90       	pop	r6
    1224:	5f 90       	pop	r5
    1226:	08 95       	ret

00001228 <_Z11InitControli>:
    1228:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    122c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_ZL6_cmark+0x1>
    1230:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <_ZL6_cmark>
    1234:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_ZL5_cend+0x1>
    1238:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_ZL5_cend>
    123c:	08 95       	ret

0000123e <_Z15USB_SendControlhPKvi>:
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	d8 2e       	mov	r13, r24
    124e:	8a 01       	movw	r16, r20
    1250:	7b 01       	movw	r14, r22
    1252:	e4 0e       	add	r14, r20
    1254:	f5 1e       	adc	r15, r21
    1256:	eb 01       	movw	r28, r22
    1258:	ce 15       	cp	r28, r14
    125a:	df 05       	cpc	r29, r15
    125c:	71 f0       	breq	.+28     	; 0x127a <_Z15USB_SendControlhPKvi+0x3c>
    125e:	d7 fe       	sbrs	r13, 7
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <_Z15USB_SendControlhPKvi+0x2a>
    1262:	fe 01       	movw	r30, r28
    1264:	84 91       	lpm	r24, Z
    1266:	01 c0       	rjmp	.+2      	; 0x126a <_Z15USB_SendControlhPKvi+0x2c>
    1268:	88 81       	ld	r24, Y
    126a:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZL11SendControlh>
    126e:	21 96       	adiw	r28, 0x01	; 1
    1270:	81 11       	cpse	r24, r1
    1272:	f2 cf       	rjmp	.-28     	; 0x1258 <_Z15USB_SendControlhPKvi+0x1a>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	9f ef       	ldi	r25, 0xFF	; 255
    1278:	01 c0       	rjmp	.+2      	; 0x127c <_Z15USB_SendControlhPKvi+0x3e>
    127a:	c8 01       	movw	r24, r16
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	08 95       	ret

0000128c <_Z15USB_RecvControlPvi>:
    128c:	af 92       	push	r10
    128e:	bf 92       	push	r11
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	5c 01       	movw	r10, r24
    12a0:	8b 01       	movw	r16, r22
    12a2:	eb 01       	movw	r28, r22
    12a4:	9b ef       	ldi	r25, 0xFB	; 251
    12a6:	d9 2e       	mov	r13, r25
    12a8:	20 97       	sbiw	r28, 0x00	; 0
    12aa:	c1 f0       	breq	.+48     	; 0x12dc <_Z15USB_RecvControlPvi+0x50>
    12ac:	7e 01       	movw	r14, r28
    12ae:	c1 34       	cpi	r28, 0x41	; 65
    12b0:	d1 05       	cpc	r29, r1
    12b2:	1c f0       	brlt	.+6      	; 0x12ba <_Z15USB_RecvControlPvi+0x2e>
    12b4:	80 e4       	ldi	r24, 0x40	; 64
    12b6:	e8 2e       	mov	r14, r24
    12b8:	f1 2c       	mov	r15, r1
    12ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    12be:	82 ff       	sbrs	r24, 2
    12c0:	fc cf       	rjmp	.-8      	; 0x12ba <_Z15USB_RecvControlPvi+0x2e>
    12c2:	c8 01       	movw	r24, r16
    12c4:	8c 1b       	sub	r24, r28
    12c6:	9d 0b       	sbc	r25, r29
    12c8:	6e 2d       	mov	r22, r14
    12ca:	8a 0d       	add	r24, r10
    12cc:	9b 1d       	adc	r25, r11
    12ce:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZL4RecvPVhh>
    12d2:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    12d6:	ce 19       	sub	r28, r14
    12d8:	df 09       	sbc	r29, r15
    12da:	e6 cf       	rjmp	.-52     	; 0x12a8 <_Z15USB_RecvControlPvi+0x1c>
    12dc:	c8 01       	movw	r24, r16
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	bf 90       	pop	r11
    12ee:	af 90       	pop	r10
    12f0:	08 95       	ret

000012f2 <__vector_11>:
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	0f 92       	push	r0
    12fa:	11 24       	eor	r1, r1
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	6c 97       	sbiw	r28, 0x1c	; 28
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1332:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1336:	83 ff       	sbrs	r24, 3
    1338:	17 c1       	rjmp	.+558    	; 0x1568 <__vector_11+0x276>
    133a:	68 e0       	ldi	r22, 0x08	; 8
    133c:	ce 01       	movw	r24, r28
    133e:	45 96       	adiw	r24, 0x15	; 21
    1340:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZL4RecvPVhh>
    1344:	82 ef       	ldi	r24, 0xF2	; 242
    1346:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    134a:	8d 89       	ldd	r24, Y+21	; 0x15
    134c:	87 ff       	sbrs	r24, 7
    134e:	05 c0       	rjmp	.+10     	; 0x135a <__vector_11+0x68>
    1350:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1354:	90 ff       	sbrs	r25, 0
    1356:	fc cf       	rjmp	.-8      	; 0x1350 <__vector_11+0x5e>
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <__vector_11+0x6e>
    135a:	9e ef       	ldi	r25, 0xFE	; 254
    135c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1360:	98 2f       	mov	r25, r24
    1362:	90 76       	andi	r25, 0x60	; 96
    1364:	09 f0       	breq	.+2      	; 0x1368 <__vector_11+0x76>
    1366:	d8 c0       	rjmp	.+432    	; 0x1518 <__vector_11+0x226>
    1368:	9e 89       	ldd	r25, Y+22	; 0x16
    136a:	4f 89       	ldd	r20, Y+23	; 0x17
    136c:	58 8d       	ldd	r21, Y+24	; 0x18
    136e:	2f 89       	ldd	r18, Y+23	; 0x17
    1370:	18 8d       	ldd	r17, Y+24	; 0x18
    1372:	91 11       	cpse	r25, r1
    1374:	0c c0       	rjmp	.+24     	; 0x138e <__vector_11+0x9c>
    1376:	80 38       	cpi	r24, 0x80	; 128
    1378:	29 f4       	brne	.+10     	; 0x1384 <__vector_11+0x92>
    137a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_usbCurrentStatus>
    137e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <__vector_11+0x96>
    1384:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1388:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    138c:	e6 c0       	rjmp	.+460    	; 0x155a <__vector_11+0x268>
    138e:	91 30       	cpi	r25, 0x01	; 1
    1390:	51 f4       	brne	.+20     	; 0x13a6 <__vector_11+0xb4>
    1392:	81 11       	cpse	r24, r1
    1394:	e2 c0       	rjmp	.+452    	; 0x155a <__vector_11+0x268>
    1396:	41 30       	cpi	r20, 0x01	; 1
    1398:	51 05       	cpc	r21, r1
    139a:	09 f0       	breq	.+2      	; 0x139e <__vector_11+0xac>
    139c:	de c0       	rjmp	.+444    	; 0x155a <__vector_11+0x268>
    139e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_usbCurrentStatus>
    13a2:	8d 7f       	andi	r24, 0xFD	; 253
    13a4:	0b c0       	rjmp	.+22     	; 0x13bc <__vector_11+0xca>
    13a6:	93 30       	cpi	r25, 0x03	; 3
    13a8:	61 f4       	brne	.+24     	; 0x13c2 <__vector_11+0xd0>
    13aa:	81 11       	cpse	r24, r1
    13ac:	d6 c0       	rjmp	.+428    	; 0x155a <__vector_11+0x268>
    13ae:	41 30       	cpi	r20, 0x01	; 1
    13b0:	51 05       	cpc	r21, r1
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <__vector_11+0xc4>
    13b4:	d2 c0       	rjmp	.+420    	; 0x155a <__vector_11+0x268>
    13b6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_usbCurrentStatus>
    13ba:	82 60       	ori	r24, 0x02	; 2
    13bc:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_usbCurrentStatus>
    13c0:	cc c0       	rjmp	.+408    	; 0x155a <__vector_11+0x268>
    13c2:	95 30       	cpi	r25, 0x05	; 5
    13c4:	49 f4       	brne	.+18     	; 0x13d8 <__vector_11+0xe6>
    13c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    13ca:	80 ff       	sbrs	r24, 0
    13cc:	fc cf       	rjmp	.-8      	; 0x13c6 <__vector_11+0xd4>
    13ce:	82 2f       	mov	r24, r18
    13d0:	80 68       	ori	r24, 0x80	; 128
    13d2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    13d6:	c1 c0       	rjmp	.+386    	; 0x155a <__vector_11+0x268>
    13d8:	96 30       	cpi	r25, 0x06	; 6
    13da:	09 f0       	breq	.+2      	; 0x13de <__vector_11+0xec>
    13dc:	70 c0       	rjmp	.+224    	; 0x14be <__vector_11+0x1cc>
    13de:	eb 8c       	ldd	r14, Y+27	; 0x1b
    13e0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    13e2:	12 30       	cpi	r17, 0x02	; 2
    13e4:	69 f5       	brne	.+90     	; 0x1440 <__vector_11+0x14e>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z11InitControli>
    13ee:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZL14SendInterfacesv>
    13f2:	99 e0       	ldi	r25, 0x09	; 9
    13f4:	9e 01       	movw	r18, r28
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	69 01       	movw	r12, r18
    13fc:	f9 01       	movw	r30, r18
    13fe:	29 2f       	mov	r18, r25
    1400:	11 92       	st	Z+, r1
    1402:	2a 95       	dec	r18
    1404:	e9 f7       	brne	.-6      	; 0x1400 <__vector_11+0x10e>
    1406:	99 83       	std	Y+1, r25	; 0x01
    1408:	1a 83       	std	Y+2, r17	; 0x02
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	90 ea       	ldi	r25, 0xA0	; 160
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	9a ef       	ldi	r25, 0xFA	; 250
    1414:	99 87       	std	Y+9, r25	; 0x09
    1416:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <_ZL6_cmark>
    141a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <_ZL6_cmark+0x1>
    141e:	27 5f       	subi	r18, 0xF7	; 247
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	c7 01       	movw	r24, r14
    142a:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z11InitControli>
    142e:	49 e0       	ldi	r20, 0x09	; 9
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	b6 01       	movw	r22, r12
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z15USB_SendControlhPKvi>
    143a:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZL14SendInterfacesv>
    143e:	8d c0       	rjmp	.+282    	; 0x155a <__vector_11+0x268>
    1440:	c7 01       	movw	r24, r14
    1442:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z11InitControli>
    1446:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_Z12PluggableUSBv>
    144a:	be 01       	movw	r22, r28
    144c:	6b 5e       	subi	r22, 0xEB	; 235
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	19 f0       	breq	.+6      	; 0x145e <__vector_11+0x16c>
    1458:	0c f0       	brlt	.+2      	; 0x145c <__vector_11+0x16a>
    145a:	7f c0       	rjmp	.+254    	; 0x155a <__vector_11+0x268>
    145c:	82 c0       	rjmp	.+260    	; 0x1562 <__vector_11+0x270>
    145e:	11 30       	cpi	r17, 0x01	; 1
    1460:	09 f4       	brne	.+2      	; 0x1464 <__vector_11+0x172>
    1462:	70 c0       	rjmp	.+224    	; 0x1544 <__vector_11+0x252>
    1464:	13 30       	cpi	r17, 0x03	; 3
    1466:	09 f0       	breq	.+2      	; 0x146a <__vector_11+0x178>
    1468:	7c c0       	rjmp	.+248    	; 0x1562 <__vector_11+0x270>
    146a:	8f 89       	ldd	r24, Y+23	; 0x17
    146c:	88 23       	and	r24, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <__vector_11+0x180>
    1470:	6c c0       	rjmp	.+216    	; 0x154a <__vector_11+0x258>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	29 f4       	brne	.+10     	; 0x1480 <__vector_11+0x18e>
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	6b e0       	ldi	r22, 0x0B	; 11
    147a:	8a e2       	ldi	r24, 0x2A	; 42
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	06 c0       	rjmp	.+12     	; 0x148c <__vector_11+0x19a>
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	39 f4       	brne	.+14     	; 0x1492 <__vector_11+0x1a0>
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	6b e0       	ldi	r22, 0x0B	; 11
    1488:	8e e1       	ldi	r24, 0x1E	; 30
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 73 07 	call	0xee6	; 0xee6 <_ZL24USB_SendStringDescriptorPKhhh>
    1490:	56 c0       	rjmp	.+172    	; 0x153e <__vector_11+0x24c>
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	09 f0       	breq	.+2      	; 0x1498 <__vector_11+0x1a6>
    1496:	65 c0       	rjmp	.+202    	; 0x1562 <__vector_11+0x270>
    1498:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_Z12PluggableUSBv>
    149c:	8e 01       	movw	r16, r28
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	b8 01       	movw	r22, r16
    14a4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZN13PluggableUSB_12getShortNameEPc>
    14a8:	f8 01       	movw	r30, r16
    14aa:	01 90       	ld	r0, Z+
    14ac:	00 20       	and	r0, r0
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <__vector_11+0x1b8>
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	bf 01       	movw	r22, r30
    14b4:	60 1b       	sub	r22, r16
    14b6:	71 0b       	sbc	r23, r17
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	c8 01       	movw	r24, r16
    14bc:	e7 cf       	rjmp	.-50     	; 0x148c <__vector_11+0x19a>
    14be:	97 30       	cpi	r25, 0x07	; 7
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__vector_11+0x1d2>
    14c2:	4f c0       	rjmp	.+158    	; 0x1562 <__vector_11+0x270>
    14c4:	98 30       	cpi	r25, 0x08	; 8
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <__vector_11+0x1de>
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    14ce:	45 c0       	rjmp	.+138    	; 0x155a <__vector_11+0x268>
    14d0:	99 30       	cpi	r25, 0x09	; 9
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <__vector_11+0x1e4>
    14d4:	42 c0       	rjmp	.+132    	; 0x155a <__vector_11+0x268>
    14d6:	83 70       	andi	r24, 0x03	; 3
    14d8:	09 f0       	breq	.+2      	; 0x14dc <__vector_11+0x1ea>
    14da:	43 c0       	rjmp	.+134    	; 0x1562 <__vector_11+0x270>
    14dc:	ed e0       	ldi	r30, 0x0D	; 13
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	96 e3       	ldi	r25, 0x36	; 54
    14e6:	20 81       	ld	r18, Z
    14e8:	21 11       	cpse	r18, r1
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <__vector_11+0x20c>
    14ec:	8e e7       	ldi	r24, 0x7E	; 126
    14ee:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    14f2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    14f6:	8f 89       	ldd	r24, Y+23	; 0x17
    14f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_usbConfiguration>
    14fc:	2e c0       	rjmp	.+92     	; 0x155a <__vector_11+0x268>
    14fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1502:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1506:	21 91       	ld	r18, Z+
    1508:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    150c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	87 30       	cpi	r24, 0x07	; 7
    1514:	41 f7       	brne	.-48     	; 0x14e6 <__vector_11+0x1f4>
    1516:	ea cf       	rjmp	.-44     	; 0x14ec <__vector_11+0x1fa>
    1518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151c:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z11InitControli>
    1520:	89 8d       	ldd	r24, Y+25	; 0x19
    1522:	81 11       	cpse	r24, r1
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <__vector_11+0x23e>
    1526:	ce 01       	movw	r24, r28
    1528:	45 96       	adiw	r24, 0x15	; 21
    152a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z9CDC_SetupR8USBSetup>
    152e:	07 c0       	rjmp	.+14     	; 0x153e <__vector_11+0x24c>
    1530:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_Z12PluggableUSBv>
    1534:	be 01       	movw	r22, r28
    1536:	6b 5e       	subi	r22, 0xEB	; 235
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN13PluggableUSB_5setupER8USBSetup>
    153e:	88 23       	and	r24, r24
    1540:	81 f0       	breq	.+32     	; 0x1562 <__vector_11+0x270>
    1542:	0b c0       	rjmp	.+22     	; 0x155a <__vector_11+0x268>
    1544:	6c e0       	ldi	r22, 0x0C	; 12
    1546:	71 e0       	ldi	r23, 0x01	; 1
    1548:	02 c0       	rjmp	.+4      	; 0x154e <__vector_11+0x25c>
    154a:	66 e3       	ldi	r22, 0x36	; 54
    154c:	71 e0       	ldi	r23, 0x01	; 1
    154e:	fb 01       	movw	r30, r22
    1550:	44 91       	lpm	r20, Z
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	80 e8       	ldi	r24, 0x80	; 128
    1556:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z15USB_SendControlhPKvi>
    155a:	8e ef       	ldi	r24, 0xFE	; 254
    155c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <__vector_11+0x276>
    1562:	81 e2       	ldi	r24, 0x21	; 33
    1564:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1568:	6c 96       	adiw	r28, 0x1c	; 28
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <_Z9USB_Flushh>:
    15a6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    15aa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    15ae:	88 23       	and	r24, r24
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <_Z9USB_Flushh+0x12>
    15b2:	8a e3       	ldi	r24, 0x3A	; 58
    15b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    15b8:	08 95       	ret

000015ba <__vector_10>:
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	cf 93       	push	r28
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
    15de:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    15e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    15e6:	83 7f       	andi	r24, 0xF3	; 243
    15e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    15ec:	c3 ff       	sbrs	r28, 3
    15ee:	0f c0       	rjmp	.+30     	; 0x160e <__vector_10+0x54>
    15f0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    15fa:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    15fe:	82 e3       	ldi	r24, 0x32	; 50
    1600:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1604:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_usbConfiguration>
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    160e:	c2 ff       	sbrs	r28, 2
    1610:	19 c0       	rjmp	.+50     	; 0x1644 <__vector_10+0x8a>
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_Z9USB_Flushh>
    1618:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <TxLEDPulse>
    161c:	88 23       	and	r24, r24
    161e:	39 f0       	breq	.+14     	; 0x162e <__vector_10+0x74>
    1620:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <TxLEDPulse>
    1624:	81 50       	subi	r24, 0x01	; 1
    1626:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <TxLEDPulse>
    162a:	88 23       	and	r24, r24
    162c:	89 f1       	breq	.+98     	; 0x1690 <__vector_10+0xd6>
    162e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <RxLEDPulse>
    1632:	88 23       	and	r24, r24
    1634:	39 f0       	breq	.+14     	; 0x1644 <__vector_10+0x8a>
    1636:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <RxLEDPulse>
    163a:	81 50       	subi	r24, 0x01	; 1
    163c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <RxLEDPulse>
    1640:	88 23       	and	r24, r24
    1642:	41 f1       	breq	.+80     	; 0x1694 <__vector_10+0xda>
    1644:	c4 ff       	sbrs	r28, 4
    1646:	10 c0       	rjmp	.+32     	; 0x1668 <__vector_10+0xae>
    1648:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    164c:	8e 7e       	andi	r24, 0xEE	; 238
    164e:	81 60       	ori	r24, 0x01	; 1
    1650:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1654:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1658:	8f 7e       	andi	r24, 0xEF	; 239
    165a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    165e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_usbSuspendState>
    1662:	8e 7e       	andi	r24, 0xEE	; 238
    1664:	80 61       	ori	r24, 0x10	; 16
    1666:	11 c0       	rjmp	.+34     	; 0x168a <__vector_10+0xd0>
    1668:	c0 ff       	sbrs	r28, 0
    166a:	16 c0       	rjmp	.+44     	; 0x1698 <__vector_10+0xde>
    166c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1670:	8e 7e       	andi	r24, 0xEE	; 238
    1672:	80 61       	ori	r24, 0x10	; 16
    1674:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1678:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    167c:	8e 7e       	andi	r24, 0xEE	; 238
    167e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1682:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_usbSuspendState>
    1686:	8e 7e       	andi	r24, 0xEE	; 238
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_usbSuspendState>
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <__vector_10+0xde>
    1690:	5d 9a       	sbi	0x0b, 5	; 11
    1692:	cd cf       	rjmp	.-102    	; 0x162e <__vector_10+0x74>
    1694:	28 9a       	sbi	0x05, 0	; 5
    1696:	d6 cf       	rjmp	.-84     	; 0x1644 <__vector_10+0x8a>
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	cf 91       	pop	r28
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    16bc:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_usbConfiguration>
	_usbCurrentStatus = 0;
    16c0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_usbCurrentStatus>
	_usbSuspendState = 0;
    16c4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_usbSuspendState>
	USB_ClockEnable();
    16c8:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    16cc:	e1 ee       	ldi	r30, 0xE1	; 225
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8e 7e       	andi	r24, 0xEE	; 238
    16d4:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    16d6:	8d e0       	ldi	r24, 0x0D	; 13
    16d8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	
	TX_RX_LED_INIT;
    16dc:	55 9a       	sbi	0x0a, 5	; 10
    16de:	20 9a       	sbi	0x04, 0	; 4
    16e0:	08 95       	ret

000016e2 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	2f 93       	push	r18
    16ee:	3f 93       	push	r19
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer0_millis>
    16fc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer0_millis+0x1>
    1700:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer0_millis+0x2>
    1704:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer0_millis+0x3>
    1708:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <timer0_fract>
    170c:	23 e0       	ldi	r18, 0x03	; 3
    170e:	23 0f       	add	r18, r19
    1710:	2d 37       	cpi	r18, 0x7D	; 125
    1712:	20 f4       	brcc	.+8      	; 0x171c <__vector_23+0x3a>
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	a1 1d       	adc	r26, r1
    1718:	b1 1d       	adc	r27, r1
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <__vector_23+0x44>
    171c:	26 e8       	ldi	r18, 0x86	; 134
    171e:	23 0f       	add	r18, r19
    1720:	02 96       	adiw	r24, 0x02	; 2
    1722:	a1 1d       	adc	r26, r1
    1724:	b1 1d       	adc	r27, r1
    1726:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <timer0_fract>
    172a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer0_millis>
    172e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <timer0_millis+0x1>
    1732:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <timer0_millis+0x2>
    1736:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <timer0_millis+0x3>
    173a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer0_overflow_count>
    173e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer0_overflow_count+0x1>
    1742:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer0_overflow_count+0x2>
    1746:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer0_overflow_count+0x3>
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	a1 1d       	adc	r26, r1
    174e:	b1 1d       	adc	r27, r1
    1750:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timer0_overflow_count>
    1754:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timer0_overflow_count+0x1>
    1758:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <timer0_overflow_count+0x2>
    175c:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <timer0_overflow_count+0x3>
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <micros>:
    1776:	3f b7       	in	r19, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer0_overflow_count>
    177e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer0_overflow_count+0x1>
    1782:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer0_overflow_count+0x2>
    1786:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer0_overflow_count+0x3>
    178a:	26 b5       	in	r18, 0x26	; 38
    178c:	a8 9b       	sbis	0x15, 0	; 21
    178e:	05 c0       	rjmp	.+10     	; 0x179a <micros+0x24>
    1790:	2f 3f       	cpi	r18, 0xFF	; 255
    1792:	19 f0       	breq	.+6      	; 0x179a <micros+0x24>
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	a1 1d       	adc	r26, r1
    1798:	b1 1d       	adc	r27, r1
    179a:	3f bf       	out	0x3f, r19	; 63
    179c:	ba 2f       	mov	r27, r26
    179e:	a9 2f       	mov	r26, r25
    17a0:	98 2f       	mov	r25, r24
    17a2:	88 27       	eor	r24, r24
    17a4:	82 0f       	add	r24, r18
    17a6:	91 1d       	adc	r25, r1
    17a8:	a1 1d       	adc	r26, r1
    17aa:	b1 1d       	adc	r27, r1
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	42 e0       	ldi	r20, 0x02	; 2
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	88 1f       	adc	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	4a 95       	dec	r20
    17bc:	d1 f7       	brne	.-12     	; 0x17b2 <micros+0x3c>
    17be:	08 95       	ret

000017c0 <delay>:
    17c0:	8f 92       	push	r8
    17c2:	9f 92       	push	r9
    17c4:	af 92       	push	r10
    17c6:	bf 92       	push	r11
    17c8:	cf 92       	push	r12
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	6b 01       	movw	r12, r22
    17d2:	7c 01       	movw	r14, r24
    17d4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <micros>
    17d8:	4b 01       	movw	r8, r22
    17da:	5c 01       	movw	r10, r24
    17dc:	c1 14       	cp	r12, r1
    17de:	d1 04       	cpc	r13, r1
    17e0:	e1 04       	cpc	r14, r1
    17e2:	f1 04       	cpc	r15, r1
    17e4:	01 f1       	breq	.+64     	; 0x1826 <delay+0x66>
    17e6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <yield>
    17ea:	0e 94 bb 0b 	call	0x1776	; 0x1776 <micros>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	88 19       	sub	r24, r8
    17f4:	99 09       	sbc	r25, r9
    17f6:	aa 09       	sbc	r26, r10
    17f8:	bb 09       	sbc	r27, r11
    17fa:	88 3e       	cpi	r24, 0xE8	; 232
    17fc:	93 40       	sbci	r25, 0x03	; 3
    17fe:	a1 05       	cpc	r26, r1
    1800:	b1 05       	cpc	r27, r1
    1802:	60 f3       	brcs	.-40     	; 0x17dc <delay+0x1c>
    1804:	21 e0       	ldi	r18, 0x01	; 1
    1806:	c2 1a       	sub	r12, r18
    1808:	d1 08       	sbc	r13, r1
    180a:	e1 08       	sbc	r14, r1
    180c:	f1 08       	sbc	r15, r1
    180e:	88 ee       	ldi	r24, 0xE8	; 232
    1810:	88 0e       	add	r8, r24
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	98 1e       	adc	r9, r24
    1816:	a1 1c       	adc	r10, r1
    1818:	b1 1c       	adc	r11, r1
    181a:	c1 14       	cp	r12, r1
    181c:	d1 04       	cpc	r13, r1
    181e:	e1 04       	cpc	r14, r1
    1820:	f1 04       	cpc	r15, r1
    1822:	19 f7       	brne	.-58     	; 0x17ea <delay+0x2a>
    1824:	db cf       	rjmp	.-74     	; 0x17dc <delay+0x1c>
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	08 95       	ret

00001838 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1838:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    183a:	84 b5       	in	r24, 0x24	; 36
    183c:	82 60       	ori	r24, 0x02	; 2
    183e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1840:	84 b5       	in	r24, 0x24	; 36
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1846:	85 b5       	in	r24, 0x25	; 37
    1848:	82 60       	ori	r24, 0x02	; 2
    184a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    184c:	85 b5       	in	r24, 0x25	; 37
    184e:	81 60       	ori	r24, 0x01	; 1
    1850:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1852:	ee e6       	ldi	r30, 0x6E	; 110
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	81 60       	ori	r24, 0x01	; 1
    185a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    185c:	e1 e8       	ldi	r30, 0x81	; 129
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1862:	80 81       	ld	r24, Z
    1864:	82 60       	ori	r24, 0x02	; 2
    1866:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1868:	80 81       	ld	r24, Z
    186a:	81 60       	ori	r24, 0x01	; 1
    186c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    186e:	e0 e8       	ldi	r30, 0x80	; 128
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	81 60       	ori	r24, 0x01	; 1
    1876:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1878:	e1 e9       	ldi	r30, 0x91	; 145
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1882:	80 81       	ld	r24, Z
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1888:	e0 e9       	ldi	r30, 0x90	; 144
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	81 60       	ori	r24, 0x01	; 1
    1890:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    1892:	e1 ec       	ldi	r30, 0xC1	; 193
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	84 60       	ori	r24, 0x04	; 4
    189a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    189c:	80 81       	ld	r24, Z
    189e:	82 60       	ori	r24, 0x02	; 2
    18a0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    18a2:	80 81       	ld	r24, Z
    18a4:	81 60       	ori	r24, 0x01	; 1
    18a6:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    18a8:	e3 ec       	ldi	r30, 0xC3	; 195
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    18b2:	e0 ec       	ldi	r30, 0xC0	; 192
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	82 60       	ori	r24, 0x02	; 2
    18ba:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    18bc:	e2 ec       	ldi	r30, 0xC2	; 194
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	81 60       	ori	r24, 0x01	; 1
    18c4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    18c6:	ea e7       	ldi	r30, 0x7A	; 122
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	84 60       	ori	r24, 0x04	; 4
    18ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    18d0:	80 81       	ld	r24, Z
    18d2:	82 60       	ori	r24, 0x02	; 2
    18d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    18d6:	80 81       	ld	r24, Z
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	80 83       	st	Z, r24
    18e2:	08 95       	ret

000018e4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    18e4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    18ee:	82 1b       	sub	r24, r18
    18f0:	91 09       	sbc	r25, r1
    18f2:	08 95       	ret

000018f4 <_ZN7TwoWire4readEv>:
    18f4:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    18f8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    18fc:	98 17       	cp	r25, r24
    18fe:	50 f4       	brcc	.+20     	; 0x1914 <_ZN7TwoWire4readEv+0x20>
    1900:	e9 2f       	mov	r30, r25
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	e8 5b       	subi	r30, 0xB8	; 184
    1906:	fd 4f       	sbci	r31, 0xFD	; 253
    1908:	20 81       	ld	r18, Z
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	9f 5f       	subi	r25, 0xFF	; 255
    190e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <_ZN7TwoWire4readEv+0x24>
    1914:	2f ef       	ldi	r18, 0xFF	; 255
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	c9 01       	movw	r24, r18
    191a:	08 95       	ret

0000191c <_ZN7TwoWire4peekEv>:
    191c:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1920:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1924:	e8 17       	cp	r30, r24
    1926:	30 f4       	brcc	.+12     	; 0x1934 <_ZN7TwoWire4peekEv+0x18>
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	e8 5b       	subi	r30, 0xB8	; 184
    192c:	fd 4f       	sbci	r31, 0xFD	; 253
    192e:	80 81       	ld	r24, Z
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	08 95       	ret
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	9f ef       	ldi	r25, 0xFF	; 255
    1938:	08 95       	ret

0000193a <_ZN7TwoWire5flushEv>:
    193a:	08 95       	ret

0000193c <_ZN7TwoWire16onReceiveServiceEPhi>:
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	ec 01       	movw	r28, r24
    1942:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <_ZN7TwoWire14user_onReceiveE>
    1946:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <_ZN7TwoWire14user_onReceiveE+0x1>
    194a:	30 97       	sbiw	r30, 0x00	; 0
    194c:	f1 f0       	breq	.+60     	; 0x198a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    194e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1952:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1956:	98 17       	cp	r25, r24
    1958:	c0 f0       	brcs	.+48     	; 0x198a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	29 2f       	mov	r18, r25
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	26 17       	cp	r18, r22
    1962:	37 07       	cpc	r19, r23
    1964:	54 f4       	brge	.+20     	; 0x197a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1966:	de 01       	movw	r26, r28
    1968:	a2 0f       	add	r26, r18
    196a:	b3 1f       	adc	r27, r19
    196c:	4c 91       	ld	r20, X
    196e:	d9 01       	movw	r26, r18
    1970:	a8 5b       	subi	r26, 0xB8	; 184
    1972:	bd 4f       	sbci	r27, 0xFD	; 253
    1974:	4c 93       	st	X, r20
    1976:	9f 5f       	subi	r25, 0xFF	; 255
    1978:	f1 cf       	rjmp	.-30     	; 0x195c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    197a:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    197e:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1982:	cb 01       	movw	r24, r22
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	09 94       	ijmp
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <_ZN7TwoWire16onRequestServiceEv>:
    1990:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <_ZN7TwoWire14user_onRequestE>
    1994:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <_ZN7TwoWire14user_onRequestE+0x1>
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	29 f0       	breq	.+10     	; 0x19a6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    199c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    19a0:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    19a4:	09 94       	ijmp
    19a6:	08 95       	ret

000019a8 <_ZN7TwoWire5writeEPKhj>:
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	7c 01       	movw	r14, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8a 01       	movw	r16, r20
    19be:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <_ZN7TwoWire12transmittingE>
    19c2:	22 23       	and	r18, r18
    19c4:	89 f0       	breq	.+34     	; 0x19e8 <_ZN7TwoWire5writeEPKhj+0x40>
    19c6:	eb 01       	movw	r28, r22
    19c8:	6b 01       	movw	r12, r22
    19ca:	c4 0e       	add	r12, r20
    19cc:	d5 1e       	adc	r13, r21
    19ce:	cc 15       	cp	r28, r12
    19d0:	dd 05       	cpc	r29, r13
    19d2:	69 f0       	breq	.+26     	; 0x19ee <_ZN7TwoWire5writeEPKhj+0x46>
    19d4:	69 91       	ld	r22, Y+
    19d6:	d7 01       	movw	r26, r14
    19d8:	ed 91       	ld	r30, X+
    19da:	fc 91       	ld	r31, X
    19dc:	01 90       	ld	r0, Z+
    19de:	f0 81       	ld	r31, Z
    19e0:	e0 2d       	mov	r30, r0
    19e2:	c7 01       	movw	r24, r14
    19e4:	09 95       	icall
    19e6:	f3 cf       	rjmp	.-26     	; 0x19ce <_ZN7TwoWire5writeEPKhj+0x26>
    19e8:	64 2f       	mov	r22, r20
    19ea:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <twi_transmit>
    19ee:	c8 01       	movw	r24, r16
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	08 95       	ret

00001a02 <_ZN7TwoWire5writeEh>:
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	1f 92       	push	r1
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	69 83       	std	Y+1, r22	; 0x01
    1a0e:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <_ZN7TwoWire12transmittingE>
    1a12:	22 23       	and	r18, r18
    1a14:	d1 f0       	breq	.+52     	; 0x1a4a <_ZN7TwoWire5writeEh+0x48>
    1a16:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1a1a:	20 32       	cpi	r18, 0x20	; 32
    1a1c:	40 f0       	brcs	.+16     	; 0x1a2e <_ZN7TwoWire5writeEh+0x2c>
    1a1e:	21 e0       	ldi	r18, 0x01	; 1
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	fc 01       	movw	r30, r24
    1a24:	33 83       	std	Z+3, r19	; 0x03
    1a26:	22 83       	std	Z+2, r18	; 0x02
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	15 c0       	rjmp	.+42     	; 0x1a58 <_ZN7TwoWire5writeEh+0x56>
    1a2e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1a32:	e8 2f       	mov	r30, r24
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	eb 5d       	subi	r30, 0xDB	; 219
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	99 81       	ldd	r25, Y+1	; 0x01
    1a3c:	90 83       	st	Z, r25
    1a3e:	8f 5f       	subi	r24, 0xFF	; 255
    1a40:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1a44:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <_ZN7TwoWire5writeEh+0x52>
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <twi_transmit>
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0f 90       	pop	r0
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <_ZN7TwoWireC1Ev>:
    1a60:	fc 01       	movw	r30, r24
    1a62:	13 82       	std	Z+3, r1	; 0x03
    1a64:	12 82       	std	Z+2, r1	; 0x02
    1a66:	88 ee       	ldi	r24, 0xE8	; 232
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	84 83       	std	Z+4, r24	; 0x04
    1a70:	95 83       	std	Z+5, r25	; 0x05
    1a72:	a6 83       	std	Z+6, r26	; 0x06
    1a74:	b7 83       	std	Z+7, r27	; 0x07
    1a76:	8c e8       	ldi	r24, 0x8C	; 140
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
    1a7e:	08 95       	ret

00001a80 <_ZN7TwoWire5beginEv>:
    1a80:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1a84:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1a88:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1a8c:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1a90:	0e 94 77 0e 	call	0x1cee	; 0x1cee <twi_init>
    1a94:	88 ec       	ldi	r24, 0xC8	; 200
    1a96:	9c e0       	ldi	r25, 0x0C	; 12
    1a98:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <twi_attachSlaveTxEvent>
    1a9c:	8e e9       	ldi	r24, 0x9E	; 158
    1a9e:	9c e0       	ldi	r25, 0x0C	; 12
    1aa0:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <twi_attachSlaveRxEvent>

00001aa4 <_ZN7TwoWire17beginTransmissionEh>:
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZN7TwoWire12transmittingE>
    1aaa:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <_ZN7TwoWire9txAddressE>
    1aae:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1ab2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1ab6:	08 95       	ret

00001ab8 <_ZN7TwoWire15endTransmissionEh>:
    1ab8:	0f 93       	push	r16
    1aba:	06 2f       	mov	r16, r22
    1abc:	21 e0       	ldi	r18, 0x01	; 1
    1abe:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1ac2:	65 e2       	ldi	r22, 0x25	; 37
    1ac4:	72 e0       	ldi	r23, 0x02	; 2
    1ac6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <_ZN7TwoWire9txAddressE>
    1aca:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_writeTo>
    1ace:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_ZN7TwoWire13txBufferIndexE>
    1ad2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_ZN7TwoWire14txBufferLengthE>
    1ad6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <_ZN7TwoWire12transmittingE>
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <_ZN7TwoWire11requestFromEhhmhh>:
    1ade:	4f 92       	push	r4
    1ae0:	5f 92       	push	r5
    1ae2:	6f 92       	push	r6
    1ae4:	7f 92       	push	r7
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	5c 01       	movw	r10, r24
    1afa:	f6 2e       	mov	r15, r22
    1afc:	d4 2f       	mov	r29, r20
    1afe:	28 01       	movw	r4, r16
    1b00:	39 01       	movw	r6, r18
    1b02:	ee 20       	and	r14, r14
    1b04:	21 f1       	breq	.+72     	; 0x1b4e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1b06:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN7TwoWire17beginTransmissionEh>
    1b0a:	ce 2d       	mov	r28, r14
    1b0c:	c4 30       	cpi	r28, 0x04	; 4
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1b10:	c3 e0       	ldi	r28, 0x03	; 3
    1b12:	c1 50       	subi	r28, 0x01	; 1
    1b14:	c0 f0       	brcs	.+48     	; 0x1b46 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1b16:	28 e0       	ldi	r18, 0x08	; 8
    1b18:	c2 9f       	mul	r28, r18
    1b1a:	c0 01       	movw	r24, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	a3 01       	movw	r20, r6
    1b20:	92 01       	movw	r18, r4
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1b24:	56 95       	lsr	r21
    1b26:	47 95       	ror	r20
    1b28:	37 95       	ror	r19
    1b2a:	27 95       	ror	r18
    1b2c:	8a 95       	dec	r24
    1b2e:	d2 f7       	brpl	.-12     	; 0x1b24 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1b30:	ca 01       	movw	r24, r20
    1b32:	b9 01       	movw	r22, r18
    1b34:	d5 01       	movw	r26, r10
    1b36:	ed 91       	ld	r30, X+
    1b38:	fc 91       	ld	r31, X
    1b3a:	01 90       	ld	r0, Z+
    1b3c:	f0 81       	ld	r31, Z
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	c5 01       	movw	r24, r10
    1b42:	09 95       	icall
    1b44:	e6 cf       	rjmp	.-52     	; 0x1b12 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	c5 01       	movw	r24, r10
    1b4a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN7TwoWire15endTransmissionEh>
    1b4e:	4d 2f       	mov	r20, r29
    1b50:	d1 32       	cpi	r29, 0x21	; 33
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	2c 2d       	mov	r18, r12
    1b58:	68 e4       	ldi	r22, 0x48	; 72
    1b5a:	72 e0       	ldi	r23, 0x02	; 2
    1b5c:	8f 2d       	mov	r24, r15
    1b5e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <twi_readFrom>
    1b62:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <_ZN7TwoWire13rxBufferIndexE>
    1b66:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <_ZN7TwoWire14rxBufferLengthE>
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	7f 90       	pop	r7
    1b7e:	6f 90       	pop	r6
    1b80:	5f 90       	pop	r5
    1b82:	4f 90       	pop	r4
    1b84:	08 95       	ret

00001b86 <_ZN7TwoWire11requestFromEhhh>:
    1b86:	cf 92       	push	r12
    1b88:	ef 92       	push	r14
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	c2 2e       	mov	r12, r18
    1b90:	e1 2c       	mov	r14, r1
    1b92:	00 e0       	ldi	r16, 0x00	; 0
    1b94:	10 e0       	ldi	r17, 0x00	; 0
    1b96:	98 01       	movw	r18, r16
    1b98:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_ZN7TwoWire11requestFromEhhmhh>
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ef 90       	pop	r14
    1ba2:	cf 90       	pop	r12
    1ba4:	08 95       	ret

00001ba6 <_ZN7TwoWire11requestFromEhh>:
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <_ZN7TwoWire11requestFromEhhh>

00001bac <_ZN7TwoWire15endTransmissionEv>:
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <_ZN7TwoWire15endTransmissionEh>

00001bb2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1bb2:	82 e1       	ldi	r24, 0x12	; 18
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <_ZN7TwoWireC1Ev>

00001bba <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1bba:	08 95       	ret

00001bbc <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	7b 01       	movw	r14, r22
    1bca:	fc 01       	movw	r30, r24
    1bcc:	c2 81       	ldd	r28, Z+2	; 0x02
    1bce:	d3 81       	ldd	r29, Z+3	; 0x03
    1bd0:	00 e0       	ldi	r16, 0x00	; 0
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
    1bd4:	20 97       	sbiw	r28, 0x00	; 0
    1bd6:	81 f0       	breq	.+32     	; 0x1bf8 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    1bd8:	e8 81       	ld	r30, Y
    1bda:	f9 81       	ldd	r31, Y+1	; 0x01
    1bdc:	02 80       	ldd	r0, Z+2	; 0x02
    1bde:	f3 81       	ldd	r31, Z+3	; 0x03
    1be0:	e0 2d       	mov	r30, r0
    1be2:	b7 01       	movw	r22, r14
    1be4:	ce 01       	movw	r24, r28
    1be6:	09 95       	icall
    1be8:	97 fd       	sbrc	r25, 7
    1bea:	08 c0       	rjmp	.+16     	; 0x1bfc <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    1bec:	08 0f       	add	r16, r24
    1bee:	19 1f       	adc	r17, r25
    1bf0:	08 84       	ldd	r0, Y+8	; 0x08
    1bf2:	d9 85       	ldd	r29, Y+9	; 0x09
    1bf4:	c0 2d       	mov	r28, r0
    1bf6:	ee cf       	rjmp	.-36     	; 0x1bd4 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	9f ef       	ldi	r25, 0xFF	; 255
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	ff 90       	pop	r15
    1c0a:	ef 90       	pop	r14
    1c0c:	08 95       	ret

00001c0e <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	8b 01       	movw	r16, r22
    1c18:	fc 01       	movw	r30, r24
    1c1a:	c2 81       	ldd	r28, Z+2	; 0x02
    1c1c:	d3 81       	ldd	r29, Z+3	; 0x03
    1c1e:	20 97       	sbiw	r28, 0x00	; 0
    1c20:	71 f0       	breq	.+28     	; 0x1c3e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    1c22:	e8 81       	ld	r30, Y
    1c24:	f9 81       	ldd	r31, Y+1	; 0x01
    1c26:	04 80       	ldd	r0, Z+4	; 0x04
    1c28:	f5 81       	ldd	r31, Z+5	; 0x05
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	b8 01       	movw	r22, r16
    1c2e:	ce 01       	movw	r24, r28
    1c30:	09 95       	icall
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	31 f4       	brne	.+12     	; 0x1c42 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    1c36:	08 84       	ldd	r0, Y+8	; 0x08
    1c38:	d9 85       	ldd	r29, Y+9	; 0x09
    1c3a:	c0 2d       	mov	r28, r0
    1c3c:	f0 cf       	rjmp	.-32     	; 0x1c1e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	08 95       	ret

00001c4c <_ZN13PluggableUSB_12getShortNameEPc>:
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	8b 01       	movw	r16, r22
    1c56:	fc 01       	movw	r30, r24
    1c58:	c2 81       	ldd	r28, Z+2	; 0x02
    1c5a:	d3 81       	ldd	r29, Z+3	; 0x03
    1c5c:	20 97       	sbiw	r28, 0x00	; 0
    1c5e:	71 f0       	breq	.+28     	; 0x1c7c <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    1c60:	e8 81       	ld	r30, Y
    1c62:	f9 81       	ldd	r31, Y+1	; 0x01
    1c64:	06 80       	ldd	r0, Z+6	; 0x06
    1c66:	f7 81       	ldd	r31, Z+7	; 0x07
    1c68:	e0 2d       	mov	r30, r0
    1c6a:	b8 01       	movw	r22, r16
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	09 95       	icall
    1c70:	08 0f       	add	r16, r24
    1c72:	11 1d       	adc	r17, r1
    1c74:	08 84       	ldd	r0, Y+8	; 0x08
    1c76:	d9 85       	ldd	r29, Y+9	; 0x09
    1c78:	c0 2d       	mov	r28, r0
    1c7a:	f0 cf       	rjmp	.-32     	; 0x1c5c <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	10 82       	st	Z, r1
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	08 95       	ret

00001c8a <_ZN13PluggableUSB_5setupER8USBSetup>:
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	8b 01       	movw	r16, r22
    1c94:	fc 01       	movw	r30, r24
    1c96:	c2 81       	ldd	r28, Z+2	; 0x02
    1c98:	d3 81       	ldd	r29, Z+3	; 0x03
    1c9a:	20 97       	sbiw	r28, 0x00	; 0
    1c9c:	71 f0       	breq	.+28     	; 0x1cba <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    1c9e:	e8 81       	ld	r30, Y
    1ca0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca2:	01 90       	ld	r0, Z+
    1ca4:	f0 81       	ld	r31, Z
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	b8 01       	movw	r22, r16
    1caa:	ce 01       	movw	r24, r28
    1cac:	09 95       	icall
    1cae:	81 11       	cpse	r24, r1
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    1cb2:	08 84       	ldd	r0, Y+8	; 0x08
    1cb4:	d9 85       	ldd	r29, Y+9	; 0x09
    1cb6:	c0 2d       	mov	r28, r0
    1cb8:	f0 cf       	rjmp	.-32     	; 0x1c9a <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1cc6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZGVZ12PluggableUSBvE3obj>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	0d c0       	rjmp	.+26     	; 0x1ce8 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <_ZZ12PluggableUSBvE3obj>
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <_ZZ12PluggableUSBvE3obj+0x1>
    1cda:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_ZZ12PluggableUSBvE3obj+0x3>
    1cde:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    1ce8:	88 e6       	ldi	r24, 0x68	; 104
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	08 95       	ret

00001cee <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1cee:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_state>
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <twi_sendStop>
    1cf8:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_inRepStart>
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	83 e0       	ldi	r24, 0x03	; 3
    1d08:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    1d0c:	e9 eb       	ldi	r30, 0xB9	; 185
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8e 7f       	andi	r24, 0xFE	; 254
    1d14:	80 83       	st	Z, r24
    1d16:	80 81       	ld	r24, Z
    1d18:	8d 7f       	andi	r24, 0xFD	; 253
    1d1a:	80 83       	st	Z, r24
    1d1c:	88 e4       	ldi	r24, 0x48	; 72
    1d1e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1d22:	85 e4       	ldi	r24, 0x45	; 69
    1d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d28:	08 95       	ret

00001d2a <twi_readFrom>:
    1d2a:	41 32       	cpi	r20, 0x21	; 33
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <twi_readFrom+0x6>
    1d2e:	43 c0       	rjmp	.+134    	; 0x1db6 <twi_readFrom+0x8c>
    1d30:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <twi_state>
    1d34:	91 11       	cpse	r25, r1
    1d36:	fc cf       	rjmp	.-8      	; 0x1d30 <twi_readFrom+0x6>
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <twi_state>
    1d3e:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <twi_sendStop>
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <twi_error>
    1d48:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <twi_masterBufferIndex>
    1d4c:	24 0f       	add	r18, r20
    1d4e:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <twi_masterBufferLength>
    1d52:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <twi_slarw>
    1d56:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <twi_slarw>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	89 2b       	or	r24, r25
    1d5e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_slarw>
    1d62:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_inRepStart>
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	61 f4       	brne	.+24     	; 0x1d82 <twi_readFrom+0x58>
    1d6a:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_inRepStart>
    1d6e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <twi_slarw>
    1d72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1d76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d7a:	83 fd       	sbrc	r24, 3
    1d7c:	f8 cf       	rjmp	.-16     	; 0x1d6e <twi_readFrom+0x44>
    1d7e:	85 ec       	ldi	r24, 0xC5	; 197
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <twi_readFrom+0x5a>
    1d82:	85 ee       	ldi	r24, 0xE5	; 229
    1d84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d88:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_state>
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	e1 f3       	breq	.-8      	; 0x1d88 <twi_readFrom+0x5e>
    1d90:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    1d94:	84 17       	cp	r24, r20
    1d96:	10 f4       	brcc	.+4      	; 0x1d9c <twi_readFrom+0x72>
    1d98:	40 91 b9 02 	lds	r20, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    1d9c:	aa eb       	ldi	r26, 0xBA	; 186
    1d9e:	b2 e0       	ldi	r27, 0x02	; 2
    1da0:	96 2f       	mov	r25, r22
    1da2:	fb 01       	movw	r30, r22
    1da4:	8e 2f       	mov	r24, r30
    1da6:	89 1b       	sub	r24, r25
    1da8:	84 17       	cp	r24, r20
    1daa:	18 f4       	brcc	.+6      	; 0x1db2 <twi_readFrom+0x88>
    1dac:	8d 91       	ld	r24, X+
    1dae:	81 93       	st	Z+, r24
    1db0:	f9 cf       	rjmp	.-14     	; 0x1da4 <twi_readFrom+0x7a>
    1db2:	84 2f       	mov	r24, r20
    1db4:	08 95       	ret
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	08 95       	ret

00001dba <twi_writeTo>:
    1dba:	0f 93       	push	r16
    1dbc:	41 32       	cpi	r20, 0x21	; 33
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <twi_writeTo+0x8>
    1dc0:	4a c0       	rjmp	.+148    	; 0x1e56 <twi_writeTo+0x9c>
    1dc2:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <twi_state>
    1dc6:	91 11       	cpse	r25, r1
    1dc8:	fc cf       	rjmp	.-8      	; 0x1dc2 <twi_writeTo+0x8>
    1dca:	32 e0       	ldi	r19, 0x02	; 2
    1dcc:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <twi_state>
    1dd0:	00 93 df 02 	sts	0x02DF, r16	; 0x8002df <twi_sendStop>
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <twi_error>
    1dda:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <twi_masterBufferIndex>
    1dde:	40 93 b8 02 	sts	0x02B8, r20	; 0x8002b8 <twi_masterBufferLength>
    1de2:	56 2f       	mov	r21, r22
    1de4:	aa eb       	ldi	r26, 0xBA	; 186
    1de6:	b2 e0       	ldi	r27, 0x02	; 2
    1de8:	fb 01       	movw	r30, r22
    1dea:	3e 2f       	mov	r19, r30
    1dec:	35 1b       	sub	r19, r21
    1dee:	34 17       	cp	r19, r20
    1df0:	18 f4       	brcc	.+6      	; 0x1df8 <twi_writeTo+0x3e>
    1df2:	31 91       	ld	r19, Z+
    1df4:	3d 93       	st	X+, r19
    1df6:	f9 cf       	rjmp	.-14     	; 0x1dea <twi_writeTo+0x30>
    1df8:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <twi_slarw>
    1dfc:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <twi_slarw>
    1e00:	88 0f       	add	r24, r24
    1e02:	83 2b       	or	r24, r19
    1e04:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_slarw>
    1e08:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_inRepStart>
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	61 f4       	brne	.+24     	; 0x1e28 <twi_writeTo+0x6e>
    1e10:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_inRepStart>
    1e14:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <twi_slarw>
    1e18:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1e1c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1e20:	83 fd       	sbrc	r24, 3
    1e22:	f8 cf       	rjmp	.-16     	; 0x1e14 <twi_writeTo+0x5a>
    1e24:	85 ec       	ldi	r24, 0xC5	; 197
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <twi_writeTo+0x70>
    1e28:	85 ee       	ldi	r24, 0xE5	; 229
    1e2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1e2e:	22 23       	and	r18, r18
    1e30:	21 f0       	breq	.+8      	; 0x1e3a <twi_writeTo+0x80>
    1e32:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_state>
    1e36:	82 30       	cpi	r24, 0x02	; 2
    1e38:	d1 f3       	breq	.-12     	; 0x1e2e <twi_writeTo+0x74>
    1e3a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <twi_error>
    1e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e40:	79 f0       	breq	.+30     	; 0x1e60 <twi_writeTo+0xa6>
    1e42:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <twi_error>
    1e46:	80 32       	cpi	r24, 0x20	; 32
    1e48:	41 f0       	breq	.+16     	; 0x1e5a <twi_writeTo+0xa0>
    1e4a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <twi_error>
    1e4e:	80 33       	cpi	r24, 0x30	; 48
    1e50:	31 f0       	breq	.+12     	; 0x1e5e <twi_writeTo+0xa4>
    1e52:	94 e0       	ldi	r25, 0x04	; 4
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <twi_writeTo+0xa6>
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <twi_writeTo+0xa6>
    1e5a:	92 e0       	ldi	r25, 0x02	; 2
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <twi_writeTo+0xa6>
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	89 2f       	mov	r24, r25
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <twi_transmit>:
    1e66:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <twi_txBufferLength>
    1e6a:	26 2f       	mov	r18, r22
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	24 0f       	add	r18, r20
    1e70:	31 1d       	adc	r19, r1
    1e72:	21 32       	cpi	r18, 0x21	; 33
    1e74:	31 05       	cpc	r19, r1
    1e76:	dc f4       	brge	.+54     	; 0x1eae <twi_transmit+0x48>
    1e78:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <twi_state>
    1e7c:	24 30       	cpi	r18, 0x04	; 4
    1e7e:	c9 f4       	brne	.+50     	; 0x1eb2 <twi_transmit+0x4c>
    1e80:	fc 01       	movw	r30, r24
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	86 17       	cp	r24, r22
    1e88:	58 f4       	brcc	.+22     	; 0x1ea0 <twi_transmit+0x3a>
    1e8a:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <twi_txBufferLength>
    1e8e:	21 91       	ld	r18, Z+
    1e90:	dc 01       	movw	r26, r24
    1e92:	a8 56       	subi	r26, 0x68	; 104
    1e94:	bd 4f       	sbci	r27, 0xFD	; 253
    1e96:	a3 0f       	add	r26, r19
    1e98:	b1 1d       	adc	r27, r1
    1e9a:	2c 93       	st	X, r18
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	f3 cf       	rjmp	.-26     	; 0x1e86 <twi_transmit+0x20>
    1ea0:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <twi_txBufferLength>
    1ea4:	68 0f       	add	r22, r24
    1ea6:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <twi_txBufferLength>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	08 95       	ret
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	08 95       	ret
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	08 95       	ret

00001eb6 <twi_attachSlaveRxEvent>:
    1eb6:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <twi_onSlaveReceive+0x1>
    1eba:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_onSlaveReceive>
    1ebe:	08 95       	ret

00001ec0 <twi_attachSlaveTxEvent>:
    1ec0:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <twi_onSlaveTransmit+0x1>
    1ec4:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_onSlaveTransmit>
    1ec8:	08 95       	ret

00001eca <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1eca:	85 ed       	ldi	r24, 0xD5	; 213
    1ecc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1ed0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1ed4:	84 fd       	sbrc	r24, 4
    1ed6:	fc cf       	rjmp	.-8      	; 0x1ed0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1ed8:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_state>
    1edc:	08 95       	ret

00001ede <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1ede:	85 ec       	ldi	r24, 0xC5	; 197
    1ee0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    1ee4:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_state>
    1ee8:	08 95       	ret

00001eea <__vector_36>:
}

ISR(TWI_vect)
{
    1eea:	1f 92       	push	r1
    1eec:	0f 92       	push	r0
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	0f 92       	push	r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	2f 93       	push	r18
    1ef6:	3f 93       	push	r19
    1ef8:	4f 93       	push	r20
    1efa:	5f 93       	push	r21
    1efc:	6f 93       	push	r22
    1efe:	7f 93       	push	r23
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	af 93       	push	r26
    1f06:	bf 93       	push	r27
    1f08:	ef 93       	push	r30
    1f0a:	ff 93       	push	r31
  switch(TW_STATUS){
    1f0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1f10:	88 7f       	andi	r24, 0xF8	; 248
    1f12:	80 36       	cpi	r24, 0x60	; 96
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <__vector_36+0x2e>
    1f16:	9e c0       	rjmp	.+316    	; 0x2054 <__vector_36+0x16a>
    1f18:	78 f5       	brcc	.+94     	; 0x1f78 <__vector_36+0x8e>
    1f1a:	88 32       	cpi	r24, 0x28	; 40
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <__vector_36+0x36>
    1f1e:	5d c0       	rjmp	.+186    	; 0x1fda <__vector_36+0xf0>
    1f20:	90 f4       	brcc	.+36     	; 0x1f46 <__vector_36+0x5c>
    1f22:	80 31       	cpi	r24, 0x10	; 16
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <__vector_36+0x3e>
    1f26:	56 c0       	rjmp	.+172    	; 0x1fd4 <__vector_36+0xea>
    1f28:	38 f4       	brcc	.+14     	; 0x1f38 <__vector_36+0x4e>
    1f2a:	88 23       	and	r24, r24
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <__vector_36+0x46>
    1f2e:	f5 c0       	rjmp	.+490    	; 0x211a <__vector_36+0x230>
    1f30:	88 30       	cpi	r24, 0x08	; 8
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <__vector_36+0x4c>
    1f34:	4f c0       	rjmp	.+158    	; 0x1fd4 <__vector_36+0xea>
    1f36:	f5 c0       	rjmp	.+490    	; 0x2122 <__vector_36+0x238>
    1f38:	88 31       	cpi	r24, 0x18	; 24
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <__vector_36+0x54>
    1f3c:	4e c0       	rjmp	.+156    	; 0x1fda <__vector_36+0xf0>
    1f3e:	80 32       	cpi	r24, 0x20	; 32
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <__vector_36+0x5a>
    1f42:	5f c0       	rjmp	.+190    	; 0x2002 <__vector_36+0x118>
    1f44:	ee c0       	rjmp	.+476    	; 0x2122 <__vector_36+0x238>
    1f46:	80 34       	cpi	r24, 0x40	; 64
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <__vector_36+0x62>
    1f4a:	6a c0       	rjmp	.+212    	; 0x2020 <__vector_36+0x136>
    1f4c:	58 f4       	brcc	.+22     	; 0x1f64 <__vector_36+0x7a>
    1f4e:	80 33       	cpi	r24, 0x30	; 48
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <__vector_36+0x6a>
    1f52:	57 c0       	rjmp	.+174    	; 0x2002 <__vector_36+0x118>
    1f54:	88 33       	cpi	r24, 0x38	; 56
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <__vector_36+0x70>
    1f58:	e4 c0       	rjmp	.+456    	; 0x2122 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1f5a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <twi_error>
      twi_releaseBus();
    1f5e:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <twi_releaseBus>
      break;
    1f62:	df c0       	rjmp	.+446    	; 0x2122 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f64:	80 35       	cpi	r24, 0x50	; 80
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <__vector_36+0x80>
    1f68:	4f c0       	rjmp	.+158    	; 0x2008 <__vector_36+0x11e>
    1f6a:	88 35       	cpi	r24, 0x58	; 88
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <__vector_36+0x86>
    1f6e:	5d c0       	rjmp	.+186    	; 0x202a <__vector_36+0x140>
    1f70:	88 34       	cpi	r24, 0x48	; 72
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__vector_36+0x8c>
    1f74:	d6 c0       	rjmp	.+428    	; 0x2122 <__vector_36+0x238>
    1f76:	d3 c0       	rjmp	.+422    	; 0x211e <__vector_36+0x234>
    1f78:	88 39       	cpi	r24, 0x98	; 152
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <__vector_36+0x94>
    1f7c:	c4 c0       	rjmp	.+392    	; 0x2106 <__vector_36+0x21c>
    1f7e:	a8 f4       	brcc	.+42     	; 0x1faa <__vector_36+0xc0>
    1f80:	88 37       	cpi	r24, 0x78	; 120
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <__vector_36+0x9c>
    1f84:	67 c0       	rjmp	.+206    	; 0x2054 <__vector_36+0x16a>
    1f86:	38 f4       	brcc	.+14     	; 0x1f96 <__vector_36+0xac>
    1f88:	88 36       	cpi	r24, 0x68	; 104
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <__vector_36+0xa4>
    1f8c:	63 c0       	rjmp	.+198    	; 0x2054 <__vector_36+0x16a>
    1f8e:	80 37       	cpi	r24, 0x70	; 112
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__vector_36+0xaa>
    1f92:	60 c0       	rjmp	.+192    	; 0x2054 <__vector_36+0x16a>
    1f94:	c6 c0       	rjmp	.+396    	; 0x2122 <__vector_36+0x238>
    1f96:	88 38       	cpi	r24, 0x88	; 136
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <__vector_36+0xb2>
    1f9a:	b5 c0       	rjmp	.+362    	; 0x2106 <__vector_36+0x21c>
    1f9c:	80 39       	cpi	r24, 0x90	; 144
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <__vector_36+0xb8>
    1fa0:	5f c0       	rjmp	.+190    	; 0x2060 <__vector_36+0x176>
    1fa2:	80 38       	cpi	r24, 0x80	; 128
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <__vector_36+0xbe>
    1fa6:	bd c0       	rjmp	.+378    	; 0x2122 <__vector_36+0x238>
    1fa8:	5b c0       	rjmp	.+182    	; 0x2060 <__vector_36+0x176>
    1faa:	80 3b       	cpi	r24, 0xB0	; 176
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <__vector_36+0xc6>
    1fae:	83 c0       	rjmp	.+262    	; 0x20b6 <__vector_36+0x1cc>
    1fb0:	38 f4       	brcc	.+14     	; 0x1fc0 <__vector_36+0xd6>
    1fb2:	80 3a       	cpi	r24, 0xA0	; 160
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <__vector_36+0xce>
    1fb6:	66 c0       	rjmp	.+204    	; 0x2084 <__vector_36+0x19a>
    1fb8:	88 3a       	cpi	r24, 0xA8	; 168
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <__vector_36+0xd4>
    1fbc:	7c c0       	rjmp	.+248    	; 0x20b6 <__vector_36+0x1cc>
    1fbe:	b1 c0       	rjmp	.+354    	; 0x2122 <__vector_36+0x238>
    1fc0:	80 3c       	cpi	r24, 0xC0	; 192
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <__vector_36+0xdc>
    1fc4:	a4 c0       	rjmp	.+328    	; 0x210e <__vector_36+0x224>
    1fc6:	88 3c       	cpi	r24, 0xC8	; 200
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <__vector_36+0xe2>
    1fca:	a1 c0       	rjmp	.+322    	; 0x210e <__vector_36+0x224>
    1fcc:	88 3b       	cpi	r24, 0xB8	; 184
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <__vector_36+0xe8>
    1fd0:	87 c0       	rjmp	.+270    	; 0x20e0 <__vector_36+0x1f6>
    1fd2:	a7 c0       	rjmp	.+334    	; 0x2122 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1fd4:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <twi_slarw>
    1fd8:	10 c0       	rjmp	.+32     	; 0x1ffa <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1fda:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    1fde:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <twi_masterBufferLength>
    1fe2:	98 17       	cp	r25, r24
    1fe4:	70 f5       	brcc	.+92     	; 0x2042 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1fe6:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	8e 0f       	add	r24, r30
    1fee:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <twi_masterBufferIndex>
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	e6 54       	subi	r30, 0x46	; 70
    1ff6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ffe:	85 ec       	ldi	r24, 0xC5	; 197
    2000:	83 c0       	rjmp	.+262    	; 0x2108 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2002:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <twi_error>
    2006:	8b c0       	rjmp	.+278    	; 0x211e <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2008:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	8e 0f       	add	r24, r30
    2010:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <twi_masterBufferIndex>
    2014:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	e6 54       	subi	r30, 0x46	; 70
    201c:	fd 4f       	sbci	r31, 0xFD	; 253
    201e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2020:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    2024:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <twi_masterBufferLength>
    2028:	6b c0       	rjmp	.+214    	; 0x2100 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    202a:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <twi_masterBufferIndex>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	8e 0f       	add	r24, r30
    2032:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <twi_masterBufferIndex>
    2036:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e6 54       	subi	r30, 0x46	; 70
    203e:	fd 4f       	sbci	r31, 0xFD	; 253
    2040:	80 83       	st	Z, r24
	if (twi_sendStop)
    2042:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_sendStop>
    2046:	81 11       	cpse	r24, r1
    2048:	6a c0       	rjmp	.+212    	; 0x211e <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2050:	84 ea       	ldi	r24, 0xA4	; 164
    2052:	5e c0       	rjmp	.+188    	; 0x2110 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2054:	83 e0       	ldi	r24, 0x03	; 3
    2056:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    205a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <twi_rxBufferIndex>
    205e:	cf cf       	rjmp	.-98     	; 0x1ffe <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2060:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <twi_rxBufferIndex>
    2064:	80 32       	cpi	r24, 0x20	; 32
    2066:	08 f0       	brcs	.+2      	; 0x206a <__vector_36+0x180>
    2068:	4e c0       	rjmp	.+156    	; 0x2106 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    206a:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <twi_rxBufferIndex>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	8e 0f       	add	r24, r30
    2072:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <twi_rxBufferIndex>
    2076:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	ea 58       	subi	r30, 0x8A	; 138
    207e:	fd 4f       	sbci	r31, 0xFD	; 253
    2080:	80 83       	st	Z, r24
    2082:	bd cf       	rjmp	.-134    	; 0x1ffe <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2084:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2088:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <twi_rxBufferIndex>
    208c:	80 32       	cpi	r24, 0x20	; 32
    208e:	30 f4       	brcc	.+12     	; 0x209c <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2090:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <twi_rxBufferIndex>
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	ea 58       	subi	r30, 0x8A	; 138
    2098:	fd 4f       	sbci	r31, 0xFD	; 253
    209a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    209c:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <twi_rxBufferIndex>
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <twi_onSlaveReceive>
    20a6:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <twi_onSlaveReceive+0x1>
    20aa:	86 e7       	ldi	r24, 0x76	; 118
    20ac:	92 e0       	ldi	r25, 0x02	; 2
    20ae:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    20b0:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <twi_rxBufferIndex>
      break;
    20b4:	36 c0       	rjmp	.+108    	; 0x2122 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    20b6:	84 e0       	ldi	r24, 0x04	; 4
    20b8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    20bc:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    20c0:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    20c4:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <twi_onSlaveTransmit>
    20c8:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <twi_onSlaveTransmit+0x1>
    20cc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    20ce:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <twi_txBufferLength>
    20d2:	81 11       	cpse	r24, r1
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    20dc:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    20e0:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <twi_txBufferIndex>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	8e 0f       	add	r24, r30
    20e8:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <twi_txBufferIndex>
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	e8 56       	subi	r30, 0x68	; 104
    20f0:	fd 4f       	sbci	r31, 0xFD	; 253
    20f2:	80 81       	ld	r24, Z
    20f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20f8:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <twi_txBufferIndex>
    20fc:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <twi_txBufferLength>
    2100:	98 17       	cp	r25, r24
    2102:	08 f4       	brcc	.+2      	; 0x2106 <__vector_36+0x21c>
    2104:	7c cf       	rjmp	.-264    	; 0x1ffe <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2106:	85 e8       	ldi	r24, 0x85	; 133
    2108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    210e:	85 ec       	ldi	r24, 0xC5	; 197
    2110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2114:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_state>
      break;
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    211a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <twi_error>
      twi_stop();
    211e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <twi_stop>
      break;
  }
}
    2122:	ff 91       	pop	r31
    2124:	ef 91       	pop	r30
    2126:	bf 91       	pop	r27
    2128:	af 91       	pop	r26
    212a:	9f 91       	pop	r25
    212c:	8f 91       	pop	r24
    212e:	7f 91       	pop	r23
    2130:	6f 91       	pop	r22
    2132:	5f 91       	pop	r21
    2134:	4f 91       	pop	r20
    2136:	3f 91       	pop	r19
    2138:	2f 91       	pop	r18
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	0f 90       	pop	r0
    2140:	1f 90       	pop	r1
    2142:	18 95       	reti

00002144 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	fc 01       	movw	r30, r24
    2148:	31 97       	sbiw	r30, 0x01	; 1
    214a:	ef 30       	cpi	r30, 0x0F	; 15
    214c:	f1 05       	cpc	r31, r1
    214e:	b0 f5       	brcc	.+108    	; 0x21bc <turnOffPWM+0x78>
    2150:	ea 5a       	subi	r30, 0xAA	; 170
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__tablejump2__>
    2158:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    215c:	8f 77       	andi	r24, 0x7F	; 127
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <turnOffPWM+0x22>
    2160:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2164:	8f 7d       	andi	r24, 0xDF	; 223
    2166:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    216a:	08 95       	ret
    216c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2170:	87 7f       	andi	r24, 0xF7	; 247
    2172:	f9 cf       	rjmp	.-14     	; 0x2166 <turnOffPWM+0x22>
    2174:	84 b5       	in	r24, 0x24	; 36
    2176:	8f 77       	andi	r24, 0x7F	; 127
    2178:	02 c0       	rjmp	.+4      	; 0x217e <turnOffPWM+0x3a>
    217a:	84 b5       	in	r24, 0x24	; 36
    217c:	8f 7d       	andi	r24, 0xDF	; 223
    217e:	84 bd       	out	0x24, r24	; 36
    2180:	08 95       	ret
    2182:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    2186:	8f 77       	andi	r24, 0x7F	; 127
    2188:	07 c0       	rjmp	.+14     	; 0x2198 <turnOffPWM+0x54>
    218a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    218e:	8f 7d       	andi	r24, 0xDF	; 223
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <turnOffPWM+0x54>
    2192:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    2196:	87 7f       	andi	r24, 0xF7	; 247
    2198:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    219c:	08 95       	ret
    219e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    21a2:	8f 77       	andi	r24, 0x7F	; 127
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <turnOffPWM+0x68>
    21a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    21aa:	8f 7d       	andi	r24, 0xDF	; 223
    21ac:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    21b0:	08 95       	ret
    21b2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    21b6:	87 7f       	andi	r24, 0xF7	; 247
    21b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    21bc:	08 95       	ret

000021be <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	f9 01       	movw	r30, r18
    21ca:	e6 5c       	subi	r30, 0xC6	; 198
    21cc:	fe 4f       	sbci	r31, 0xFE	; 254
    21ce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    21d0:	f9 01       	movw	r30, r18
    21d2:	e7 5a       	subi	r30, 0xA7	; 167
    21d4:	fe 4f       	sbci	r31, 0xFE	; 254
    21d6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21d8:	f9 01       	movw	r30, r18
    21da:	e8 58       	subi	r30, 0x88	; 136
    21dc:	fe 4f       	sbci	r31, 0xFE	; 254
    21de:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21e0:	cc 23       	and	r28, r28
    21e2:	c1 f0       	breq	.+48     	; 0x2214 <digitalWrite+0x56>
    21e4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21e6:	81 11       	cpse	r24, r1
    21e8:	0e 94 a2 10 	call	0x2144	; 0x2144 <turnOffPWM>

	out = portOutputRegister(port);
    21ec:	ec 2f       	mov	r30, r28
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	e9 56       	subi	r30, 0x69	; 105
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	a5 91       	lpm	r26, Z+
    21fa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21fc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    21fe:	f8 94       	cli

	if (val == LOW) {
    2200:	11 11       	cpse	r17, r1
    2202:	04 c0       	rjmp	.+8      	; 0x220c <digitalWrite+0x4e>
		*out &= ~bit;
    2204:	8c 91       	ld	r24, X
    2206:	d0 95       	com	r29
    2208:	d8 23       	and	r29, r24
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <digitalWrite+0x52>
	} else {
		*out |= bit;
    220c:	ec 91       	ld	r30, X
    220e:	de 2b       	or	r29, r30
    2210:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2212:	9f bf       	out	0x3f, r25	; 63
}
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	08 95       	ret

0000221c <__subsf3>:
    221c:	50 58       	subi	r21, 0x80	; 128

0000221e <__addsf3>:
    221e:	bb 27       	eor	r27, r27
    2220:	aa 27       	eor	r26, r26
    2222:	0e 94 26 11 	call	0x224c	; 0x224c <__addsf3x>
    2226:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
    222a:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
    222e:	38 f0       	brcs	.+14     	; 0x223e <__addsf3+0x20>
    2230:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
    2234:	20 f0       	brcs	.+8      	; 0x223e <__addsf3+0x20>
    2236:	39 f4       	brne	.+14     	; 0x2246 <__addsf3+0x28>
    2238:	9f 3f       	cpi	r25, 0xFF	; 255
    223a:	19 f4       	brne	.+6      	; 0x2242 <__addsf3+0x24>
    223c:	26 f4       	brtc	.+8      	; 0x2246 <__addsf3+0x28>
    223e:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_nan>
    2242:	0e f4       	brtc	.+2      	; 0x2246 <__addsf3+0x28>
    2244:	e0 95       	com	r30
    2246:	e7 fb       	bst	r30, 7
    2248:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>

0000224c <__addsf3x>:
    224c:	e9 2f       	mov	r30, r25
    224e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
    2252:	58 f3       	brcs	.-42     	; 0x222a <__addsf3+0xc>
    2254:	ba 17       	cp	r27, r26
    2256:	62 07       	cpc	r22, r18
    2258:	73 07       	cpc	r23, r19
    225a:	84 07       	cpc	r24, r20
    225c:	95 07       	cpc	r25, r21
    225e:	20 f0       	brcs	.+8      	; 0x2268 <__addsf3x+0x1c>
    2260:	79 f4       	brne	.+30     	; 0x2280 <__addsf3x+0x34>
    2262:	a6 f5       	brtc	.+104    	; 0x22cc <__addsf3x+0x80>
    2264:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_zero>
    2268:	0e f4       	brtc	.+2      	; 0x226c <__addsf3x+0x20>
    226a:	e0 95       	com	r30
    226c:	0b 2e       	mov	r0, r27
    226e:	ba 2f       	mov	r27, r26
    2270:	a0 2d       	mov	r26, r0
    2272:	0b 01       	movw	r0, r22
    2274:	b9 01       	movw	r22, r18
    2276:	90 01       	movw	r18, r0
    2278:	0c 01       	movw	r0, r24
    227a:	ca 01       	movw	r24, r20
    227c:	a0 01       	movw	r20, r0
    227e:	11 24       	eor	r1, r1
    2280:	ff 27       	eor	r31, r31
    2282:	59 1b       	sub	r21, r25
    2284:	99 f0       	breq	.+38     	; 0x22ac <__addsf3x+0x60>
    2286:	59 3f       	cpi	r21, 0xF9	; 249
    2288:	50 f4       	brcc	.+20     	; 0x229e <__addsf3x+0x52>
    228a:	50 3e       	cpi	r21, 0xE0	; 224
    228c:	68 f1       	brcs	.+90     	; 0x22e8 <__addsf3x+0x9c>
    228e:	1a 16       	cp	r1, r26
    2290:	f0 40       	sbci	r31, 0x00	; 0
    2292:	a2 2f       	mov	r26, r18
    2294:	23 2f       	mov	r18, r19
    2296:	34 2f       	mov	r19, r20
    2298:	44 27       	eor	r20, r20
    229a:	58 5f       	subi	r21, 0xF8	; 248
    229c:	f3 cf       	rjmp	.-26     	; 0x2284 <__addsf3x+0x38>
    229e:	46 95       	lsr	r20
    22a0:	37 95       	ror	r19
    22a2:	27 95       	ror	r18
    22a4:	a7 95       	ror	r26
    22a6:	f0 40       	sbci	r31, 0x00	; 0
    22a8:	53 95       	inc	r21
    22aa:	c9 f7       	brne	.-14     	; 0x229e <__addsf3x+0x52>
    22ac:	7e f4       	brtc	.+30     	; 0x22cc <__addsf3x+0x80>
    22ae:	1f 16       	cp	r1, r31
    22b0:	ba 0b       	sbc	r27, r26
    22b2:	62 0b       	sbc	r22, r18
    22b4:	73 0b       	sbc	r23, r19
    22b6:	84 0b       	sbc	r24, r20
    22b8:	ba f0       	brmi	.+46     	; 0x22e8 <__addsf3x+0x9c>
    22ba:	91 50       	subi	r25, 0x01	; 1
    22bc:	a1 f0       	breq	.+40     	; 0x22e6 <__addsf3x+0x9a>
    22be:	ff 0f       	add	r31, r31
    22c0:	bb 1f       	adc	r27, r27
    22c2:	66 1f       	adc	r22, r22
    22c4:	77 1f       	adc	r23, r23
    22c6:	88 1f       	adc	r24, r24
    22c8:	c2 f7       	brpl	.-16     	; 0x22ba <__addsf3x+0x6e>
    22ca:	0e c0       	rjmp	.+28     	; 0x22e8 <__addsf3x+0x9c>
    22cc:	ba 0f       	add	r27, r26
    22ce:	62 1f       	adc	r22, r18
    22d0:	73 1f       	adc	r23, r19
    22d2:	84 1f       	adc	r24, r20
    22d4:	48 f4       	brcc	.+18     	; 0x22e8 <__addsf3x+0x9c>
    22d6:	87 95       	ror	r24
    22d8:	77 95       	ror	r23
    22da:	67 95       	ror	r22
    22dc:	b7 95       	ror	r27
    22de:	f7 95       	ror	r31
    22e0:	9e 3f       	cpi	r25, 0xFE	; 254
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <__addsf3x+0x9a>
    22e4:	b0 cf       	rjmp	.-160    	; 0x2246 <__addsf3+0x28>
    22e6:	93 95       	inc	r25
    22e8:	88 0f       	add	r24, r24
    22ea:	08 f0       	brcs	.+2      	; 0x22ee <__addsf3x+0xa2>
    22ec:	99 27       	eor	r25, r25
    22ee:	ee 0f       	add	r30, r30
    22f0:	97 95       	ror	r25
    22f2:	87 95       	ror	r24
    22f4:	08 95       	ret

000022f6 <__cmpsf2>:
    22f6:	0e 94 21 12 	call	0x2442	; 0x2442 <__fp_cmp>
    22fa:	08 f4       	brcc	.+2      	; 0x22fe <__cmpsf2+0x8>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	08 95       	ret

00002300 <__divsf3>:
    2300:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3x>
    2304:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
    2308:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
    230c:	58 f0       	brcs	.+22     	; 0x2324 <__divsf3+0x24>
    230e:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
    2312:	40 f0       	brcs	.+16     	; 0x2324 <__divsf3+0x24>
    2314:	29 f4       	brne	.+10     	; 0x2320 <__divsf3+0x20>
    2316:	5f 3f       	cpi	r21, 0xFF	; 255
    2318:	29 f0       	breq	.+10     	; 0x2324 <__divsf3+0x24>
    231a:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
    231e:	51 11       	cpse	r21, r1
    2320:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
    2324:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_nan>

00002328 <__divsf3x>:
    2328:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
    232c:	68 f3       	brcs	.-38     	; 0x2308 <__divsf3+0x8>

0000232e <__divsf3_pse>:
    232e:	99 23       	and	r25, r25
    2330:	b1 f3       	breq	.-20     	; 0x231e <__divsf3+0x1e>
    2332:	55 23       	and	r21, r21
    2334:	91 f3       	breq	.-28     	; 0x231a <__divsf3+0x1a>
    2336:	95 1b       	sub	r25, r21
    2338:	55 0b       	sbc	r21, r21
    233a:	bb 27       	eor	r27, r27
    233c:	aa 27       	eor	r26, r26
    233e:	62 17       	cp	r22, r18
    2340:	73 07       	cpc	r23, r19
    2342:	84 07       	cpc	r24, r20
    2344:	38 f0       	brcs	.+14     	; 0x2354 <__divsf3_pse+0x26>
    2346:	9f 5f       	subi	r25, 0xFF	; 255
    2348:	5f 4f       	sbci	r21, 0xFF	; 255
    234a:	22 0f       	add	r18, r18
    234c:	33 1f       	adc	r19, r19
    234e:	44 1f       	adc	r20, r20
    2350:	aa 1f       	adc	r26, r26
    2352:	a9 f3       	breq	.-22     	; 0x233e <__divsf3_pse+0x10>
    2354:	35 d0       	rcall	.+106    	; 0x23c0 <__divsf3_pse+0x92>
    2356:	0e 2e       	mov	r0, r30
    2358:	3a f0       	brmi	.+14     	; 0x2368 <__divsf3_pse+0x3a>
    235a:	e0 e8       	ldi	r30, 0x80	; 128
    235c:	32 d0       	rcall	.+100    	; 0x23c2 <__divsf3_pse+0x94>
    235e:	91 50       	subi	r25, 0x01	; 1
    2360:	50 40       	sbci	r21, 0x00	; 0
    2362:	e6 95       	lsr	r30
    2364:	00 1c       	adc	r0, r0
    2366:	ca f7       	brpl	.-14     	; 0x235a <__divsf3_pse+0x2c>
    2368:	2b d0       	rcall	.+86     	; 0x23c0 <__divsf3_pse+0x92>
    236a:	fe 2f       	mov	r31, r30
    236c:	29 d0       	rcall	.+82     	; 0x23c0 <__divsf3_pse+0x92>
    236e:	66 0f       	add	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	88 1f       	adc	r24, r24
    2374:	bb 1f       	adc	r27, r27
    2376:	26 17       	cp	r18, r22
    2378:	37 07       	cpc	r19, r23
    237a:	48 07       	cpc	r20, r24
    237c:	ab 07       	cpc	r26, r27
    237e:	b0 e8       	ldi	r27, 0x80	; 128
    2380:	09 f0       	breq	.+2      	; 0x2384 <__divsf3_pse+0x56>
    2382:	bb 0b       	sbc	r27, r27
    2384:	80 2d       	mov	r24, r0
    2386:	bf 01       	movw	r22, r30
    2388:	ff 27       	eor	r31, r31
    238a:	93 58       	subi	r25, 0x83	; 131
    238c:	5f 4f       	sbci	r21, 0xFF	; 255
    238e:	3a f0       	brmi	.+14     	; 0x239e <__divsf3_pse+0x70>
    2390:	9e 3f       	cpi	r25, 0xFE	; 254
    2392:	51 05       	cpc	r21, r1
    2394:	78 f0       	brcs	.+30     	; 0x23b4 <__divsf3_pse+0x86>
    2396:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
    239a:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
    239e:	5f 3f       	cpi	r21, 0xFF	; 255
    23a0:	e4 f3       	brlt	.-8      	; 0x239a <__divsf3_pse+0x6c>
    23a2:	98 3e       	cpi	r25, 0xE8	; 232
    23a4:	d4 f3       	brlt	.-12     	; 0x239a <__divsf3_pse+0x6c>
    23a6:	86 95       	lsr	r24
    23a8:	77 95       	ror	r23
    23aa:	67 95       	ror	r22
    23ac:	b7 95       	ror	r27
    23ae:	f7 95       	ror	r31
    23b0:	9f 5f       	subi	r25, 0xFF	; 255
    23b2:	c9 f7       	brne	.-14     	; 0x23a6 <__divsf3_pse+0x78>
    23b4:	88 0f       	add	r24, r24
    23b6:	91 1d       	adc	r25, r1
    23b8:	96 95       	lsr	r25
    23ba:	87 95       	ror	r24
    23bc:	97 f9       	bld	r25, 7
    23be:	08 95       	ret
    23c0:	e1 e0       	ldi	r30, 0x01	; 1
    23c2:	66 0f       	add	r22, r22
    23c4:	77 1f       	adc	r23, r23
    23c6:	88 1f       	adc	r24, r24
    23c8:	bb 1f       	adc	r27, r27
    23ca:	62 17       	cp	r22, r18
    23cc:	73 07       	cpc	r23, r19
    23ce:	84 07       	cpc	r24, r20
    23d0:	ba 07       	cpc	r27, r26
    23d2:	20 f0       	brcs	.+8      	; 0x23dc <__divsf3_pse+0xae>
    23d4:	62 1b       	sub	r22, r18
    23d6:	73 0b       	sbc	r23, r19
    23d8:	84 0b       	sbc	r24, r20
    23da:	ba 0b       	sbc	r27, r26
    23dc:	ee 1f       	adc	r30, r30
    23de:	88 f7       	brcc	.-30     	; 0x23c2 <__divsf3_pse+0x94>
    23e0:	e0 95       	com	r30
    23e2:	08 95       	ret

000023e4 <__fixunssfsi>:
    23e4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_splitA>
    23e8:	88 f0       	brcs	.+34     	; 0x240c <__fixunssfsi+0x28>
    23ea:	9f 57       	subi	r25, 0x7F	; 127
    23ec:	98 f0       	brcs	.+38     	; 0x2414 <__fixunssfsi+0x30>
    23ee:	b9 2f       	mov	r27, r25
    23f0:	99 27       	eor	r25, r25
    23f2:	b7 51       	subi	r27, 0x17	; 23
    23f4:	b0 f0       	brcs	.+44     	; 0x2422 <__fixunssfsi+0x3e>
    23f6:	e1 f0       	breq	.+56     	; 0x2430 <__fixunssfsi+0x4c>
    23f8:	66 0f       	add	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	88 1f       	adc	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	1a f0       	brmi	.+6      	; 0x2408 <__fixunssfsi+0x24>
    2402:	ba 95       	dec	r27
    2404:	c9 f7       	brne	.-14     	; 0x23f8 <__fixunssfsi+0x14>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <__fixunssfsi+0x4c>
    2408:	b1 30       	cpi	r27, 0x01	; 1
    240a:	91 f0       	breq	.+36     	; 0x2430 <__fixunssfsi+0x4c>
    240c:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_zero>
    2410:	b1 e0       	ldi	r27, 0x01	; 1
    2412:	08 95       	ret
    2414:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_zero>
    2418:	67 2f       	mov	r22, r23
    241a:	78 2f       	mov	r23, r24
    241c:	88 27       	eor	r24, r24
    241e:	b8 5f       	subi	r27, 0xF8	; 248
    2420:	39 f0       	breq	.+14     	; 0x2430 <__fixunssfsi+0x4c>
    2422:	b9 3f       	cpi	r27, 0xF9	; 249
    2424:	cc f3       	brlt	.-14     	; 0x2418 <__fixunssfsi+0x34>
    2426:	86 95       	lsr	r24
    2428:	77 95       	ror	r23
    242a:	67 95       	ror	r22
    242c:	b3 95       	inc	r27
    242e:	d9 f7       	brne	.-10     	; 0x2426 <__fixunssfsi+0x42>
    2430:	3e f4       	brtc	.+14     	; 0x2440 <__fixunssfsi+0x5c>
    2432:	90 95       	com	r25
    2434:	80 95       	com	r24
    2436:	70 95       	com	r23
    2438:	61 95       	neg	r22
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	8f 4f       	sbci	r24, 0xFF	; 255
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	08 95       	ret

00002442 <__fp_cmp>:
    2442:	99 0f       	add	r25, r25
    2444:	00 08       	sbc	r0, r0
    2446:	55 0f       	add	r21, r21
    2448:	aa 0b       	sbc	r26, r26
    244a:	e0 e8       	ldi	r30, 0x80	; 128
    244c:	fe ef       	ldi	r31, 0xFE	; 254
    244e:	16 16       	cp	r1, r22
    2450:	17 06       	cpc	r1, r23
    2452:	e8 07       	cpc	r30, r24
    2454:	f9 07       	cpc	r31, r25
    2456:	c0 f0       	brcs	.+48     	; 0x2488 <__fp_cmp+0x46>
    2458:	12 16       	cp	r1, r18
    245a:	13 06       	cpc	r1, r19
    245c:	e4 07       	cpc	r30, r20
    245e:	f5 07       	cpc	r31, r21
    2460:	98 f0       	brcs	.+38     	; 0x2488 <__fp_cmp+0x46>
    2462:	62 1b       	sub	r22, r18
    2464:	73 0b       	sbc	r23, r19
    2466:	84 0b       	sbc	r24, r20
    2468:	95 0b       	sbc	r25, r21
    246a:	39 f4       	brne	.+14     	; 0x247a <__fp_cmp+0x38>
    246c:	0a 26       	eor	r0, r26
    246e:	61 f0       	breq	.+24     	; 0x2488 <__fp_cmp+0x46>
    2470:	23 2b       	or	r18, r19
    2472:	24 2b       	or	r18, r20
    2474:	25 2b       	or	r18, r21
    2476:	21 f4       	brne	.+8      	; 0x2480 <__fp_cmp+0x3e>
    2478:	08 95       	ret
    247a:	0a 26       	eor	r0, r26
    247c:	09 f4       	brne	.+2      	; 0x2480 <__fp_cmp+0x3e>
    247e:	a1 40       	sbci	r26, 0x01	; 1
    2480:	a6 95       	lsr	r26
    2482:	8f ef       	ldi	r24, 0xFF	; 255
    2484:	81 1d       	adc	r24, r1
    2486:	81 1d       	adc	r24, r1
    2488:	08 95       	ret

0000248a <__gesf2>:
    248a:	0e 94 21 12 	call	0x2442	; 0x2442 <__fp_cmp>
    248e:	08 f4       	brcc	.+2      	; 0x2492 <__gesf2+0x8>
    2490:	8f ef       	ldi	r24, 0xFF	; 255
    2492:	08 95       	ret

00002494 <__unordsf2>:
    2494:	0e 94 21 12 	call	0x2442	; 0x2442 <__fp_cmp>
    2498:	88 0b       	sbc	r24, r24
    249a:	99 0b       	sbc	r25, r25
    249c:	08 95       	ret

0000249e <__udivmodsi4>:
    249e:	a1 e2       	ldi	r26, 0x21	; 33
    24a0:	1a 2e       	mov	r1, r26
    24a2:	aa 1b       	sub	r26, r26
    24a4:	bb 1b       	sub	r27, r27
    24a6:	fd 01       	movw	r30, r26
    24a8:	0d c0       	rjmp	.+26     	; 0x24c4 <__udivmodsi4_ep>

000024aa <__udivmodsi4_loop>:
    24aa:	aa 1f       	adc	r26, r26
    24ac:	bb 1f       	adc	r27, r27
    24ae:	ee 1f       	adc	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	a2 17       	cp	r26, r18
    24b4:	b3 07       	cpc	r27, r19
    24b6:	e4 07       	cpc	r30, r20
    24b8:	f5 07       	cpc	r31, r21
    24ba:	20 f0       	brcs	.+8      	; 0x24c4 <__udivmodsi4_ep>
    24bc:	a2 1b       	sub	r26, r18
    24be:	b3 0b       	sbc	r27, r19
    24c0:	e4 0b       	sbc	r30, r20
    24c2:	f5 0b       	sbc	r31, r21

000024c4 <__udivmodsi4_ep>:
    24c4:	66 1f       	adc	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	88 1f       	adc	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	1a 94       	dec	r1
    24ce:	69 f7       	brne	.-38     	; 0x24aa <__udivmodsi4_loop>
    24d0:	60 95       	com	r22
    24d2:	70 95       	com	r23
    24d4:	80 95       	com	r24
    24d6:	90 95       	com	r25
    24d8:	9b 01       	movw	r18, r22
    24da:	ac 01       	movw	r20, r24
    24dc:	bd 01       	movw	r22, r26
    24de:	cf 01       	movw	r24, r30
    24e0:	08 95       	ret

000024e2 <__tablejump2__>:
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	05 90       	lpm	r0, Z+
    24e8:	f4 91       	lpm	r31, Z
    24ea:	e0 2d       	mov	r30, r0
    24ec:	09 94       	ijmp

000024ee <_exit>:
    24ee:	f8 94       	cli

000024f0 <__stop_program>:
    24f0:	ff cf       	rjmp	.-2      	; 0x24f0 <__stop_program>
