
Accel_MMA854X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f7c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00002f7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020844  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020844  2**0
                  CONTENTS
  4 .bss          0000013c  20000844  000037c0  00020844  2**2
                  ALLOC
  5 .stack        00010000  20000980  000038fc  00020844  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020872  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001bf12  00000000  00000000  000208cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002801  00000000  00000000  0003c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a7e3  00000000  00000000  0003efde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000938  00000000  00000000  000497c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf8  00000000  00000000  0004a0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000352eb  00000000  00000000  0004adf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fd5b  00000000  00000000  000800dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a575  00000000  00000000  0008fe37  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021f0  00000000  00000000  001aa3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000084  00000000  00000000  001ac59c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000014d  00000000  00000000  001ac620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 09 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 81 13 00 00 95 13 00 00 a9 13 00 00     ................
     164:	bd 13 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000844 	.word	0x20000844
     280:	00000000 	.word	0x00000000
     284:	00002f7c 	.word	0x00002f7c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002f7c 	.word	0x00002f7c
     2c4:	20000848 	.word	0x20000848
     2c8:	00002f7c 	.word	0x00002f7c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00002f7c 	.word	0x00002f7c
     33c:	20000844 	.word	0x20000844
     340:	20000980 	.word	0x20000980
     344:	20000844 	.word	0x20000844
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00001b71 	.word	0x00001b71
     354:	000004a1 	.word	0x000004a1

00000358 <_Z21printCalculatedAccelsv>:
// This function demonstrates how to use the accel.cx, accel.cy,
//  and accel.cz variables.
// Before using these variables you must call the accel.read()
//  function!
void printCalculatedAccels()
{
     358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	p=utoa(accel.cx,&buffer[0],10);
     35c:	4c20      	ldr	r4, [pc, #128]	; (3e0 <_Z21printCalculatedAccelsv+0x88>)
     35e:	f8df a090 	ldr.w	sl, [pc, #144]	; 3f0 <_Z21printCalculatedAccelsv+0x98>
     362:	6d60      	ldr	r0, [r4, #84]	; 0x54
     364:	47d0      	blx	sl
     366:	220a      	movs	r2, #10
     368:	4621      	mov	r1, r4
     36a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3f4 <_Z21printCalculatedAccelsv+0x9c>
     36e:	47c8      	blx	r9
     370:	4605      	mov	r5, r0
     372:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3f8 <_Z21printCalculatedAccelsv+0xa0>
     376:	f8c8 0000 	str.w	r0, [r8]
	io_write(stdioDescriptor,(uint8_t *)p,strlen(buffer));
     37a:	4620      	mov	r0, r4
     37c:	4f19      	ldr	r7, [pc, #100]	; (3e4 <_Z21printCalculatedAccelsv+0x8c>)
     37e:	47b8      	blx	r7
     380:	b282      	uxth	r2, r0
     382:	4629      	mov	r1, r5
     384:	6e60      	ldr	r0, [r4, #100]	; 0x64
     386:	4d18      	ldr	r5, [pc, #96]	; (3e8 <_Z21printCalculatedAccelsv+0x90>)
     388:	47a8      	blx	r5
	io_write(stdioDescriptor, (uint8_t *)"\t", 2);
     38a:	4e18      	ldr	r6, [pc, #96]	; (3ec <_Z21printCalculatedAccelsv+0x94>)
     38c:	2202      	movs	r2, #2
     38e:	4631      	mov	r1, r6
     390:	6e60      	ldr	r0, [r4, #100]	; 0x64
     392:	47a8      	blx	r5
	p=utoa(accel.cy,&buffer[0],10);
     394:	6da0      	ldr	r0, [r4, #88]	; 0x58
     396:	47d0      	blx	sl
     398:	220a      	movs	r2, #10
     39a:	4621      	mov	r1, r4
     39c:	47c8      	blx	r9
     39e:	4683      	mov	fp, r0
     3a0:	f8c8 0000 	str.w	r0, [r8]
	io_write(stdioDescriptor,(uint8_t *)p,strlen(buffer));
     3a4:	4620      	mov	r0, r4
     3a6:	47b8      	blx	r7
     3a8:	b282      	uxth	r2, r0
     3aa:	4659      	mov	r1, fp
     3ac:	6e60      	ldr	r0, [r4, #100]	; 0x64
     3ae:	47a8      	blx	r5
	io_write(stdioDescriptor, (uint8_t *)"\t", 2);
     3b0:	2202      	movs	r2, #2
     3b2:	4631      	mov	r1, r6
     3b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
     3b6:	47a8      	blx	r5
	p=utoa(accel.cz,&buffer[0],10);
     3b8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     3ba:	47d0      	blx	sl
     3bc:	220a      	movs	r2, #10
     3be:	4621      	mov	r1, r4
     3c0:	47c8      	blx	r9
     3c2:	4681      	mov	r9, r0
     3c4:	f8c8 0000 	str.w	r0, [r8]
	io_write(stdioDescriptor,(uint8_t *)p,strlen(buffer));
     3c8:	4620      	mov	r0, r4
     3ca:	47b8      	blx	r7
     3cc:	b282      	uxth	r2, r0
     3ce:	4649      	mov	r1, r9
     3d0:	6e60      	ldr	r0, [r4, #100]	; 0x64
     3d2:	47a8      	blx	r5
	io_write(stdioDescriptor, (uint8_t *)"\t", 2);
     3d4:	2202      	movs	r2, #2
     3d6:	4631      	mov	r1, r6
     3d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
     3da:	47a8      	blx	r5
     3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3e0:	20000860 	.word	0x20000860
     3e4:	00001e01 	.word	0x00001e01
     3e8:	000009d5 	.word	0x000009d5
     3ec:	00002e38 	.word	0x00002e38
     3f0:	00001b31 	.word	0x00001b31
     3f4:	00001f5d 	.word	0x00001f5d
     3f8:	20000000 	.word	0x20000000

000003fc <_Z16printOrientationv>:

// This function demonstrates how to use the accel.readPL()
// function, which reads the portrait/landscape status of the
// sensor.
void printOrientation()
{
     3fc:	b508      	push	{r3, lr}
	// accel.readPL() will return a byte containing information
	// about the orientation of the sensor. It will be either
	// PORTRAIT_U, PORTRAIT_D, LANDSCAPE_R, LANDSCAPE_L, or
	// LOCKOUT.
	uint8_t pl = accel.readPL();
     3fe:	481e      	ldr	r0, [pc, #120]	; (478 <_Z16printOrientationv+0x7c>)
     400:	4b1e      	ldr	r3, [pc, #120]	; (47c <_Z16printOrientationv+0x80>)
     402:	4798      	blx	r3
	switch (pl)
     404:	2802      	cmp	r0, #2
     406:	d024      	beq.n	452 <_Z16printOrientationv+0x56>
     408:	d80c      	bhi.n	424 <_Z16printOrientationv+0x28>
     40a:	b1c8      	cbz	r0, 440 <_Z16printOrientationv+0x44>
     40c:	2801      	cmp	r0, #1
     40e:	d108      	bne.n	422 <_Z16printOrientationv+0x26>
		
		p="Portrait Up";
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
		break;
		case PORTRAIT_D:
		p="Portrait Down";
     410:	491b      	ldr	r1, [pc, #108]	; (480 <_Z16printOrientationv+0x84>)
     412:	4b1c      	ldr	r3, [pc, #112]	; (484 <_Z16printOrientationv+0x88>)
     414:	6019      	str	r1, [r3, #0]
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
     416:	220d      	movs	r2, #13
     418:	4b1b      	ldr	r3, [pc, #108]	; (488 <_Z16printOrientationv+0x8c>)
     41a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     41c:	4b1b      	ldr	r3, [pc, #108]	; (48c <_Z16printOrientationv+0x90>)
     41e:	4798      	blx	r3
		break;
     420:	bd08      	pop	{r3, pc}
     422:	bd08      	pop	{r3, pc}
	switch (pl)
     424:	2803      	cmp	r0, #3
     426:	d01d      	beq.n	464 <_Z16printOrientationv+0x68>
     428:	2840      	cmp	r0, #64	; 0x40
     42a:	d108      	bne.n	43e <_Z16printOrientationv+0x42>
		case LANDSCAPE_L:
		p="Landscape Left";
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
		break;
		case LOCKOUT:
		p="Flat";
     42c:	4918      	ldr	r1, [pc, #96]	; (490 <_Z16printOrientationv+0x94>)
     42e:	4b15      	ldr	r3, [pc, #84]	; (484 <_Z16printOrientationv+0x88>)
     430:	6019      	str	r1, [r3, #0]
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
     432:	2204      	movs	r2, #4
     434:	4b14      	ldr	r3, [pc, #80]	; (488 <_Z16printOrientationv+0x8c>)
     436:	6e58      	ldr	r0, [r3, #100]	; 0x64
     438:	4b14      	ldr	r3, [pc, #80]	; (48c <_Z16printOrientationv+0x90>)
     43a:	4798      	blx	r3
     43c:	bd08      	pop	{r3, pc}
     43e:	bd08      	pop	{r3, pc}
		p="Portrait Up";
     440:	4914      	ldr	r1, [pc, #80]	; (494 <_Z16printOrientationv+0x98>)
     442:	4b10      	ldr	r3, [pc, #64]	; (484 <_Z16printOrientationv+0x88>)
     444:	6019      	str	r1, [r3, #0]
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
     446:	220b      	movs	r2, #11
     448:	4b0f      	ldr	r3, [pc, #60]	; (488 <_Z16printOrientationv+0x8c>)
     44a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     44c:	4b0f      	ldr	r3, [pc, #60]	; (48c <_Z16printOrientationv+0x90>)
     44e:	4798      	blx	r3
		break;
     450:	bd08      	pop	{r3, pc}
		p="Landscape Right";
     452:	4911      	ldr	r1, [pc, #68]	; (498 <_Z16printOrientationv+0x9c>)
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_Z16printOrientationv+0x88>)
     456:	6019      	str	r1, [r3, #0]
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
     458:	220f      	movs	r2, #15
     45a:	4b0b      	ldr	r3, [pc, #44]	; (488 <_Z16printOrientationv+0x8c>)
     45c:	6e58      	ldr	r0, [r3, #100]	; 0x64
     45e:	4b0b      	ldr	r3, [pc, #44]	; (48c <_Z16printOrientationv+0x90>)
     460:	4798      	blx	r3
		break;
     462:	bd08      	pop	{r3, pc}
		p="Landscape Left";
     464:	490d      	ldr	r1, [pc, #52]	; (49c <_Z16printOrientationv+0xa0>)
     466:	4b07      	ldr	r3, [pc, #28]	; (484 <_Z16printOrientationv+0x88>)
     468:	6019      	str	r1, [r3, #0]
		io_write(stdioDescriptor, (uint8_t *)p, strlen(p));
     46a:	220e      	movs	r2, #14
     46c:	4b06      	ldr	r3, [pc, #24]	; (488 <_Z16printOrientationv+0x8c>)
     46e:	6e58      	ldr	r0, [r3, #100]	; 0x64
     470:	4b06      	ldr	r3, [pc, #24]	; (48c <_Z16printOrientationv+0x90>)
     472:	4798      	blx	r3
		break;
     474:	bd08      	pop	{r3, pc}
     476:	bf00      	nop
     478:	200008a0 	.word	0x200008a0
     47c:	00000675 	.word	0x00000675
     480:	00002e48 	.word	0x00002e48
     484:	20000000 	.word	0x20000000
     488:	20000860 	.word	0x20000860
     48c:	000009d5 	.word	0x000009d5
     490:	00002e78 	.word	0x00002e78
     494:	00002e3c 	.word	0x00002e3c
     498:	00002e58 	.word	0x00002e58
     49c:	00002e68 	.word	0x00002e68

000004a0 <main>:
		break;
	}
}
int main(void)
{
     4a0:	b580      	push	{r7, lr}
	atmel_start_init();
     4a2:	4b13      	ldr	r3, [pc, #76]	; (4f0 <main+0x50>)
     4a4:	4798      	blx	r3
	 accel.init();
     4a6:	4d13      	ldr	r5, [pc, #76]	; (4f4 <main+0x54>)
     4a8:	2200      	movs	r2, #0
     4aa:	2102      	movs	r1, #2
     4ac:	f105 0040 	add.w	r0, r5, #64	; 0x40
     4b0:	4b11      	ldr	r3, [pc, #68]	; (4f8 <main+0x58>)
     4b2:	4798      	blx	r3
	 	usart_sync_get_io_descriptor(&TARGET_IO, &stdioDescriptor);
     4b4:	4c11      	ldr	r4, [pc, #68]	; (4fc <main+0x5c>)
     4b6:	f105 0164 	add.w	r1, r5, #100	; 0x64
     4ba:	4620      	mov	r0, r4
     4bc:	4b10      	ldr	r3, [pc, #64]	; (500 <main+0x60>)
     4be:	4798      	blx	r3
	 	usart_sync_enable(&TARGET_IO);
     4c0:	4620      	mov	r0, r4
     4c2:	4b10      	ldr	r3, [pc, #64]	; (504 <main+0x64>)
     4c4:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		  if (accel.available())
     4c6:	462e      	mov	r6, r5
     4c8:	f105 0440 	add.w	r4, r5, #64	; 0x40
     4cc:	4d0e      	ldr	r5, [pc, #56]	; (508 <main+0x68>)
		  {
			  // First, use accel.read() to read the new variables:
			  accel.read();
     4ce:	4f0f      	ldr	r7, [pc, #60]	; (50c <main+0x6c>)
		  if (accel.available())
     4d0:	4620      	mov	r0, r4
     4d2:	47a8      	blx	r5
     4d4:	2800      	cmp	r0, #0
     4d6:	d0fb      	beq.n	4d0 <main+0x30>
			  accel.read();
     4d8:	4620      	mov	r0, r4
     4da:	47b8      	blx	r7
			  // * floats cx, cy, and cz will store the calculated
			  //   acceleration from those 12-bit values. These variables
			  //   are in units of g's.
			  // Check the two function declarations below for an example
			  // of how to use these variables.
			  printCalculatedAccels();
     4dc:	4b0c      	ldr	r3, [pc, #48]	; (510 <main+0x70>)
     4de:	4798      	blx	r3
			  //printAccels(); // Uncomment to print digital readings
			  
			  // The library also supports the portrait/landscape detection
			  //  of the MMA8452Q. Check out this function declaration for
			  //  an example of how to use that.
			  printOrientation();
     4e0:	4b0c      	ldr	r3, [pc, #48]	; (514 <main+0x74>)
     4e2:	4798      	blx	r3
			  
			  io_write(stdioDescriptor, (uint8_t *)"\n\r", 3);
     4e4:	2203      	movs	r2, #3
     4e6:	490c      	ldr	r1, [pc, #48]	; (518 <main+0x78>)
     4e8:	6e70      	ldr	r0, [r6, #100]	; 0x64
     4ea:	4b0c      	ldr	r3, [pc, #48]	; (51c <main+0x7c>)
     4ec:	4798      	blx	r3
     4ee:	e7ef      	b.n	4d0 <main+0x30>
     4f0:	00000861 	.word	0x00000861
     4f4:	20000860 	.word	0x20000860
     4f8:	000006d1 	.word	0x000006d1
     4fc:	2000090c 	.word	0x2000090c
     500:	00000b7d 	.word	0x00000b7d
     504:	00000b51 	.word	0x00000b51
     508:	000005f5 	.word	0x000005f5
     50c:	000007c9 	.word	0x000007c9
     510:	00000359 	.word	0x00000359
     514:	000003fd 	.word	0x000003fd
     518:	00002e80 	.word	0x00002e80
     51c:	000009d5 	.word	0x000009d5

00000520 <_GLOBAL__sub_I_accel>:
		  }
    }
}
     520:	b508      	push	{r3, lr}
MMA8452Q accel;
     522:	211d      	movs	r1, #29
     524:	4801      	ldr	r0, [pc, #4]	; (52c <_GLOBAL__sub_I_accel+0xc>)
     526:	4b02      	ldr	r3, [pc, #8]	; (530 <_GLOBAL__sub_I_accel+0x10>)
     528:	4798      	blx	r3
     52a:	bd08      	pop	{r3, pc}
     52c:	200008a0 	.word	0x200008a0
     530:	00000555 	.word	0x00000555

00000534 <_Z15I2C_tx_completeP16i2c_m_async_desc>:
//   the SA0 pin is tied to (GND or 3.3V respectively).

MMA8452Q	*ptrClass;
void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
	ptrClass->I2CTXComplete=true;
     534:	4b02      	ldr	r3, [pc, #8]	; (540 <_Z15I2C_tx_completeP16i2c_m_async_desc+0xc>)
     536:	681b      	ldr	r3, [r3, #0]
     538:	2201      	movs	r2, #1
     53a:	701a      	strb	r2, [r3, #0]
     53c:	4770      	bx	lr
     53e:	bf00      	nop
     540:	200008c8 	.word	0x200008c8

00000544 <_Z15I2C_rx_completeP16i2c_m_async_desc>:
}
void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
	ptrClass->I2CRXComplete=true;
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <_Z15I2C_rx_completeP16i2c_m_async_desc+0xc>)
     546:	681b      	ldr	r3, [r3, #0]
     548:	2201      	movs	r2, #1
     54a:	705a      	strb	r2, [r3, #1]
     54c:	4770      	bx	lr
     54e:	bf00      	nop
     550:	200008c8 	.word	0x200008c8

00000554 <_ZN8MMA8452QC1Eh>:
}

MMA8452Q::MMA8452Q(uint8_t addr)
{
	addressI2C = addr; // Store address into private variable
     554:	f880 1020 	strb.w	r1, [r0, #32]
	ptrClass=this;
     558:	4a01      	ldr	r2, [pc, #4]	; (560 <_ZN8MMA8452QC1Eh+0xc>)
     55a:	6010      	str	r0, [r2, #0]

}
     55c:	4770      	bx	lr
     55e:	bf00      	nop
     560:	200008c8 	.word	0x200008c8

00000564 <_ZN8MMA8452Q8setupTapEhhh>:
//		1. Enable tap detection on an axis. If the 7th bit is SET (0x80)
//			tap detection on that axis will be DISABLED.
//		2. Set tap g's threshold. The lower 7 bits will set the tap threshold
//			on that axis.
void MMA8452Q::setupTap(uint8_t xThs, uint8_t yThs, uint8_t zThs)
{
     564:	b538      	push	{r3, r4, r5, lr}
     566:	4615      	mov	r5, r2
     568:	461c      	mov	r4, r3
	// Set up single and double tap - 5 steps:
	// for more info check out this app note:
	// http://cache.freescale.com/files/sensors/doc/app_note/AN4072.pdf
	// Set the threshold - minimum required acceleration to cause a tap.
	uint8_t temp = 0;
	if (!(xThs & 0x80)) // If top bit ISN'T set
     56a:	f011 0f80 	tst.w	r1, #128	; 0x80
     56e:	d104      	bne.n	57a <_ZN8MMA8452Q8setupTapEhhh+0x16>
// 	Write a single uint8_t of data to a register in the MMA8452Q.
void MMA8452Q::writeRegister(MMA8452Q_Register reg, uint8_t data)
{
	uint8_t	mem=(uint8_t)reg;
	uint8_t	value;
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     570:	2200      	movs	r2, #0
     572:	2123      	movs	r1, #35	; 0x23
     574:	4812      	ldr	r0, [pc, #72]	; (5c0 <_ZN8MMA8452Q8setupTapEhhh+0x5c>)
     576:	4b13      	ldr	r3, [pc, #76]	; (5c4 <_ZN8MMA8452Q8setupTapEhhh+0x60>)
     578:	4798      	blx	r3
	if (!(yThs & 0x80))
     57a:	f015 0f80 	tst.w	r5, #128	; 0x80
     57e:	d104      	bne.n	58a <_ZN8MMA8452Q8setupTapEhhh+0x26>
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     580:	2200      	movs	r2, #0
     582:	2124      	movs	r1, #36	; 0x24
     584:	480e      	ldr	r0, [pc, #56]	; (5c0 <_ZN8MMA8452Q8setupTapEhhh+0x5c>)
     586:	4b0f      	ldr	r3, [pc, #60]	; (5c4 <_ZN8MMA8452Q8setupTapEhhh+0x60>)
     588:	4798      	blx	r3
	if (!(zThs & 0x80))
     58a:	f014 0f80 	tst.w	r4, #128	; 0x80
     58e:	d104      	bne.n	59a <_ZN8MMA8452Q8setupTapEhhh+0x36>
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     590:	2200      	movs	r2, #0
     592:	2125      	movs	r1, #37	; 0x25
     594:	480a      	ldr	r0, [pc, #40]	; (5c0 <_ZN8MMA8452Q8setupTapEhhh+0x5c>)
     596:	4b0b      	ldr	r3, [pc, #44]	; (5c4 <_ZN8MMA8452Q8setupTapEhhh+0x60>)
     598:	4798      	blx	r3
     59a:	4d09      	ldr	r5, [pc, #36]	; (5c0 <_ZN8MMA8452Q8setupTapEhhh+0x5c>)
     59c:	2200      	movs	r2, #0
     59e:	2121      	movs	r1, #33	; 0x21
     5a0:	4628      	mov	r0, r5
     5a2:	4c08      	ldr	r4, [pc, #32]	; (5c4 <_ZN8MMA8452Q8setupTapEhhh+0x60>)
     5a4:	47a0      	blx	r4
     5a6:	2200      	movs	r2, #0
     5a8:	2126      	movs	r1, #38	; 0x26
     5aa:	4628      	mov	r0, r5
     5ac:	47a0      	blx	r4
     5ae:	2200      	movs	r2, #0
     5b0:	2127      	movs	r1, #39	; 0x27
     5b2:	4628      	mov	r0, r5
     5b4:	47a0      	blx	r4
     5b6:	2200      	movs	r2, #0
     5b8:	2128      	movs	r1, #40	; 0x28
     5ba:	4628      	mov	r0, r5
     5bc:	47a0      	blx	r4
     5be:	bd38      	pop	{r3, r4, r5, pc}
     5c0:	20000918 	.word	0x20000918
     5c4:	00001575 	.word	0x00001575

000005c8 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:
}

// READ A SINGLE REGISTER
//	Read a uint8_t from the MMA8452Q register "reg".
uint8_t MMA8452Q::readRegister(MMA8452Q_Register reg)
{
     5c8:	b510      	push	{r4, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	4604      	mov	r4, r0
	//Wire.beginTransmission(addressI2C);
	uint8_t	memReg=(uint8_t)reg;
	uint8_t	value;
	I2CRXComplete=false;
     5ce:	2300      	movs	r3, #0
     5d0:	7043      	strb	r3, [r0, #1]
	i2c_m_async_cmd_read(&I2C_0,memReg,&value);
     5d2:	f10d 0207 	add.w	r2, sp, #7
     5d6:	4805      	ldr	r0, [pc, #20]	; (5ec <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x24>)
     5d8:	4b05      	ldr	r3, [pc, #20]	; (5f0 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>)
     5da:	4798      	blx	r3
	//Wire.write(reg);
	//Wire.endTransmission(false); //endTransmission but keep the connection active

	//Wire.requestFrom(addressI2C, (uint8_t) 1); //Ask for 1 uint8_t, once done, bus is released by default
	
	while(!I2CRXComplete) ; //Wait for the data to come back
     5dc:	7863      	ldrb	r3, [r4, #1]
     5de:	2b00      	cmp	r3, #0
     5e0:	d0fc      	beq.n	5dc <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x14>

	return value; //Return this one uint8_t
}
     5e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
     5e6:	b002      	add	sp, #8
     5e8:	bd10      	pop	{r4, pc}
     5ea:	bf00      	nop
     5ec:	20000918 	.word	0x20000918
     5f0:	000015dd 	.word	0x000015dd

000005f4 <_ZN8MMA8452Q9availableEv>:
{
     5f4:	b508      	push	{r3, lr}
	return (readRegister(STATUS) & 0x08) >> 3;
     5f6:	2100      	movs	r1, #0
     5f8:	4b02      	ldr	r3, [pc, #8]	; (604 <_ZN8MMA8452Q9availableEv+0x10>)
     5fa:	4798      	blx	r3
}
     5fc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     600:	bd08      	pop	{r3, pc}
     602:	bf00      	nop
     604:	000005c9 	.word	0x000005c9

00000608 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
     608:	b508      	push	{r3, lr}
	uint8_t cfg = readRegister(XYZ_DATA_CFG);
     60a:	210e      	movs	r1, #14
     60c:	4b03      	ldr	r3, [pc, #12]	; (61c <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale+0x14>)
     60e:	4798      	blx	r3
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     610:	2200      	movs	r2, #0
     612:	210e      	movs	r1, #14
     614:	4802      	ldr	r0, [pc, #8]	; (620 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale+0x18>)
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale+0x1c>)
     618:	4798      	blx	r3
     61a:	bd08      	pop	{r3, pc}
     61c:	000005c9 	.word	0x000005c9
     620:	20000918 	.word	0x20000918
     624:	00001575 	.word	0x00001575

00000628 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
     628:	b508      	push	{r3, lr}
	uint8_t ctrl = readRegister(CTRL_REG1);
     62a:	212a      	movs	r1, #42	; 0x2a
     62c:	4b03      	ldr	r3, [pc, #12]	; (63c <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR+0x14>)
     62e:	4798      	blx	r3
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     630:	2200      	movs	r2, #0
     632:	212a      	movs	r1, #42	; 0x2a
     634:	4802      	ldr	r0, [pc, #8]	; (640 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR+0x18>)
     636:	4b03      	ldr	r3, [pc, #12]	; (644 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR+0x1c>)
     638:	4798      	blx	r3
     63a:	bd08      	pop	{r3, pc}
     63c:	000005c9 	.word	0x000005c9
     640:	20000918 	.word	0x20000918
     644:	00001575 	.word	0x00001575

00000648 <_ZN8MMA8452Q7setupPLEv>:
{
     648:	b538      	push	{r3, r4, r5, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
     64a:	2111      	movs	r1, #17
     64c:	4b06      	ldr	r3, [pc, #24]	; (668 <_ZN8MMA8452Q7setupPLEv+0x20>)
     64e:	4798      	blx	r3
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     650:	4d06      	ldr	r5, [pc, #24]	; (66c <_ZN8MMA8452Q7setupPLEv+0x24>)
     652:	2200      	movs	r2, #0
     654:	2111      	movs	r1, #17
     656:	4628      	mov	r0, r5
     658:	4c05      	ldr	r4, [pc, #20]	; (670 <_ZN8MMA8452Q7setupPLEv+0x28>)
     65a:	47a0      	blx	r4
     65c:	2200      	movs	r2, #0
     65e:	2112      	movs	r1, #18
     660:	4628      	mov	r0, r5
     662:	47a0      	blx	r4
     664:	bd38      	pop	{r3, r4, r5, pc}
     666:	bf00      	nop
     668:	000005c9 	.word	0x000005c9
     66c:	20000918 	.word	0x20000918
     670:	00001575 	.word	0x00001575

00000674 <_ZN8MMA8452Q6readPLEv>:
{
     674:	b508      	push	{r3, lr}
	uint8_t plStat = readRegister(PL_STATUS);
     676:	2110      	movs	r1, #16
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <_ZN8MMA8452Q6readPLEv+0x18>)
     67a:	4798      	blx	r3
	if (plStat & 0x40) // Z-tilt lockout
     67c:	f010 0f40 	tst.w	r0, #64	; 0x40
		return (plStat & 0x6) >> 1;
     680:	bf0c      	ite	eq
     682:	f3c0 0041 	ubfxeq	r0, r0, #1, #2
		return LOCKOUT;
     686:	2040      	movne	r0, #64	; 0x40
}
     688:	bd08      	pop	{r3, pc}
     68a:	bf00      	nop
     68c:	000005c9 	.word	0x000005c9

00000690 <_ZN8MMA8452Q7standbyEv>:
{
     690:	b508      	push	{r3, lr}
	uint8_t c = readRegister(CTRL_REG1);
     692:	212a      	movs	r1, #42	; 0x2a
     694:	4b03      	ldr	r3, [pc, #12]	; (6a4 <_ZN8MMA8452Q7standbyEv+0x14>)
     696:	4798      	blx	r3
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     698:	2200      	movs	r2, #0
     69a:	212a      	movs	r1, #42	; 0x2a
     69c:	4802      	ldr	r0, [pc, #8]	; (6a8 <_ZN8MMA8452Q7standbyEv+0x18>)
     69e:	4b03      	ldr	r3, [pc, #12]	; (6ac <_ZN8MMA8452Q7standbyEv+0x1c>)
     6a0:	4798      	blx	r3
     6a2:	bd08      	pop	{r3, pc}
     6a4:	000005c9 	.word	0x000005c9
     6a8:	20000918 	.word	0x20000918
     6ac:	00001575 	.word	0x00001575

000006b0 <_ZN8MMA8452Q6activeEv>:
{
     6b0:	b508      	push	{r3, lr}
	uint8_t c = readRegister(CTRL_REG1);
     6b2:	212a      	movs	r1, #42	; 0x2a
     6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <_ZN8MMA8452Q6activeEv+0x14>)
     6b6:	4798      	blx	r3
	i2c_m_async_cmd_write(&I2C_0,mem,value);
     6b8:	2200      	movs	r2, #0
     6ba:	212a      	movs	r1, #42	; 0x2a
     6bc:	4802      	ldr	r0, [pc, #8]	; (6c8 <_ZN8MMA8452Q6activeEv+0x18>)
     6be:	4b03      	ldr	r3, [pc, #12]	; (6cc <_ZN8MMA8452Q6activeEv+0x1c>)
     6c0:	4798      	blx	r3
     6c2:	bd08      	pop	{r3, pc}
     6c4:	000005c9 	.word	0x000005c9
     6c8:	20000918 	.word	0x20000918
     6cc:	00001575 	.word	0x00001575

000006d0 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
     6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6d2:	4605      	mov	r5, r0
     6d4:	4617      	mov	r7, r2
	scale = fsr; // Haul fsr into our class variable, scale
     6d6:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
	i2c_m_async_get_io_descriptor(&I2C_0, &I2C_io);
     6da:	4c1c      	ldr	r4, [pc, #112]	; (74c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x7c>)
     6dc:	1d01      	adds	r1, r0, #4
     6de:	4620      	mov	r0, r4
     6e0:	4b1b      	ldr	r3, [pc, #108]	; (750 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x80>)
     6e2:	4798      	blx	r3
	i2c_m_async_enable(&I2C_0);
     6e4:	4620      	mov	r0, r4
     6e6:	4b1b      	ldr	r3, [pc, #108]	; (754 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x84>)
     6e8:	4798      	blx	r3
	i2c_m_async_set_slaveaddr(&I2C_0, WHO_AM_I, I2C_M_SEVEN);
     6ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
     6ee:	210d      	movs	r1, #13
     6f0:	4620      	mov	r0, r4
     6f2:	4b19      	ldr	r3, [pc, #100]	; (758 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x88>)
     6f4:	4798      	blx	r3
	i2c_m_async_register_callback(&I2C_0, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
     6f6:	4a19      	ldr	r2, [pc, #100]	; (75c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x8c>)
     6f8:	2101      	movs	r1, #1
     6fa:	4620      	mov	r0, r4
     6fc:	4e18      	ldr	r6, [pc, #96]	; (760 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x90>)
     6fe:	47b0      	blx	r6
	i2c_m_async_register_callback(&I2C_0, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
     700:	4a18      	ldr	r2, [pc, #96]	; (764 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x94>)
     702:	2101      	movs	r1, #1
     704:	4620      	mov	r0, r4
     706:	47b0      	blx	r6
	uint8_t c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
     708:	210d      	movs	r1, #13
     70a:	4628      	mov	r0, r5
     70c:	4b16      	ldr	r3, [pc, #88]	; (768 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x98>)
     70e:	4798      	blx	r3
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
     710:	282a      	cmp	r0, #42	; 0x2a
     712:	d001      	beq.n	718 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x48>
		return 0;
     714:	2000      	movs	r0, #0
}
     716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	standby();  // Must be in standby to change registers
     718:	4628      	mov	r0, r5
     71a:	4b14      	ldr	r3, [pc, #80]	; (76c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x9c>)
     71c:	4798      	blx	r3
	setScale(scale);  // Set up accelerometer scale
     71e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
     722:	4628      	mov	r0, r5
     724:	4b12      	ldr	r3, [pc, #72]	; (770 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0xa0>)
     726:	4798      	blx	r3
	setODR(odr);  // Set up output data rate
     728:	4639      	mov	r1, r7
     72a:	4628      	mov	r0, r5
     72c:	4b11      	ldr	r3, [pc, #68]	; (774 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0xa4>)
     72e:	4798      	blx	r3
	setupPL();  // Set up portrait/landscape detection
     730:	4628      	mov	r0, r5
     732:	4b11      	ldr	r3, [pc, #68]	; (778 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0xa8>)
     734:	4798      	blx	r3
	setupTap(0x80, 0x80, 0x08); // Disable x, y, set z to 0.5g
     736:	2308      	movs	r3, #8
     738:	2280      	movs	r2, #128	; 0x80
     73a:	4611      	mov	r1, r2
     73c:	4628      	mov	r0, r5
     73e:	4c0f      	ldr	r4, [pc, #60]	; (77c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0xac>)
     740:	47a0      	blx	r4
	active();  // Set to active to start reading
     742:	4628      	mov	r0, r5
     744:	4b0e      	ldr	r3, [pc, #56]	; (780 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0xb0>)
     746:	4798      	blx	r3
	return 1;
     748:	2001      	movs	r0, #1
     74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     74c:	20000918 	.word	0x20000918
     750:	00001641 	.word	0x00001641
     754:	000014f5 	.word	0x000014f5
     758:	00001541 	.word	0x00001541
     75c:	00000535 	.word	0x00000535
     760:	00001551 	.word	0x00001551
     764:	00000545 	.word	0x00000545
     768:	000005c9 	.word	0x000005c9
     76c:	00000691 	.word	0x00000691
     770:	00000609 	.word	0x00000609
     774:	00000629 	.word	0x00000629
     778:	00000649 	.word	0x00000649
     77c:	00000565 	.word	0x00000565
     780:	000006b1 	.word	0x000006b1

00000784 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>:

// READ MULTIPLE REGISTERS
//	Read "len" uint8_ts from the MMA8452Q, starting at register "reg". uint8_ts are stored
//	in "buffer" on exit.
void MMA8452Q::readRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint8_t len)
{
     784:	b570      	push	{r4, r5, r6, lr}
     786:	b082      	sub	sp, #8
     788:	4604      	mov	r4, r0
     78a:	4615      	mov	r5, r2
     78c:	461e      	mov	r6, r3
	//Wire.beginTransmission(addressI2C);
	uint8_t	mem=(uint8_t)reg;
     78e:	ab02      	add	r3, sp, #8
     790:	f803 1d01 	strb.w	r1, [r3, #-1]!
	I2CTXComplete=false;
     794:	2200      	movs	r2, #0
     796:	7002      	strb	r2, [r0, #0]
	io_write(I2C_io, &mem, 1);
     798:	2201      	movs	r2, #1
     79a:	4619      	mov	r1, r3
     79c:	6840      	ldr	r0, [r0, #4]
     79e:	4b08      	ldr	r3, [pc, #32]	; (7c0 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x3c>)
     7a0:	4798      	blx	r3
	while(!I2CTXComplete) ;
     7a2:	7823      	ldrb	r3, [r4, #0]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d0fc      	beq.n	7a2 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x1e>
	I2CTXComplete=false;
     7a8:	2300      	movs	r3, #0
     7aa:	7023      	strb	r3, [r4, #0]
	io_read(I2C_io, buffer, len);
     7ac:	4632      	mov	r2, r6
     7ae:	4629      	mov	r1, r5
     7b0:	6860      	ldr	r0, [r4, #4]
     7b2:	4b04      	ldr	r3, [pc, #16]	; (7c4 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x40>)
     7b4:	4798      	blx	r3
	while(!I2CRXComplete) ;
     7b6:	7863      	ldrb	r3, [r4, #1]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d0fc      	beq.n	7b6 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x32>
	while(Wire.available() < len); //Hang out until we get the # of uint8_ts we expect

	for(int x = 0 ; x < len ; x++)
		buffer[x] = Wire.read();   
		*/ 
     7bc:	b002      	add	sp, #8
     7be:	bd70      	pop	{r4, r5, r6, pc}
     7c0:	000009d5 	.word	0x000009d5
     7c4:	00000a05 	.word	0x00000a05

000007c8 <_ZN8MMA8452Q4readEv>:
{
     7c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     7cc:	b083      	sub	sp, #12
     7ce:	4604      	mov	r4, r0
	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
     7d0:	2306      	movs	r3, #6
     7d2:	466a      	mov	r2, sp
     7d4:	2101      	movs	r1, #1
     7d6:	4d1e      	ldr	r5, [pc, #120]	; (850 <_ZN8MMA8452Q4readEv+0x88>)
     7d8:	47a8      	blx	r5
	x = (rawData[0]<<8 | rawData[1]) >> 4;
     7da:	f89d 3000 	ldrb.w	r3, [sp]
     7de:	f89d 5001 	ldrb.w	r5, [sp, #1]
     7e2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
     7e6:	112d      	asrs	r5, r5, #4
     7e8:	60a5      	str	r5, [r4, #8]
	y = (rawData[2]<<8 | rawData[3]) >> 4;
     7ea:	f89d 3002 	ldrb.w	r3, [sp, #2]
     7ee:	f89d 7003 	ldrb.w	r7, [sp, #3]
     7f2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
     7f6:	113f      	asrs	r7, r7, #4
     7f8:	60e7      	str	r7, [r4, #12]
	z = (rawData[4]<<8 | rawData[5]) >> 4;
     7fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
     7fe:	f89d 6005 	ldrb.w	r6, [sp, #5]
     802:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
     806:	1136      	asrs	r6, r6, #4
     808:	6126      	str	r6, [r4, #16]
	cx = (float) x / (float)(1<<11) * (float)(scale);
     80a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
     80e:	4b11      	ldr	r3, [pc, #68]	; (854 <_ZN8MMA8452Q4readEv+0x8c>)
     810:	4798      	blx	r3
     812:	4680      	mov	r8, r0
     814:	f8df 9044 	ldr.w	r9, [pc, #68]	; 85c <_ZN8MMA8452Q4readEv+0x94>
     818:	4628      	mov	r0, r5
     81a:	47c8      	blx	r9
     81c:	4d0e      	ldr	r5, [pc, #56]	; (858 <_ZN8MMA8452Q4readEv+0x90>)
     81e:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     822:	47a8      	blx	r5
     824:	4641      	mov	r1, r8
     826:	47a8      	blx	r5
     828:	6160      	str	r0, [r4, #20]
	cy = (float) y / (float)(1<<11) * (float)(scale);
     82a:	4638      	mov	r0, r7
     82c:	47c8      	blx	r9
     82e:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     832:	47a8      	blx	r5
     834:	4641      	mov	r1, r8
     836:	47a8      	blx	r5
     838:	61a0      	str	r0, [r4, #24]
	cz = (float) z / (float)(1<<11) * (float)(scale);
     83a:	4630      	mov	r0, r6
     83c:	47c8      	blx	r9
     83e:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     842:	47a8      	blx	r5
     844:	4641      	mov	r1, r8
     846:	47a8      	blx	r5
     848:	61e0      	str	r0, [r4, #28]
}
     84a:	b003      	add	sp, #12
     84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     850:	00000785 	.word	0x00000785
     854:	000017e1 	.word	0x000017e1
     858:	00001891 	.word	0x00001891
     85c:	000017e9 	.word	0x000017e9

00000860 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     860:	b508      	push	{r3, lr}
	system_init();
     862:	4b02      	ldr	r3, [pc, #8]	; (86c <atmel_start_init+0xc>)
     864:	4798      	blx	r3
	stdio_redirect_init();
     866:	4b02      	ldr	r3, [pc, #8]	; (870 <atmel_start_init+0x10>)
     868:	4798      	blx	r3
     86a:	bd08      	pop	{r3, pc}
     86c:	000009b9 	.word	0x000009b9
     870:	000013d1 	.word	0x000013d1

00000874 <TARGET_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     874:	4b10      	ldr	r3, [pc, #64]	; (8b8 <TARGET_IO_PORT_init+0x44>)
     876:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     87a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     87e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     882:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     886:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     88a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     88e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     892:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     896:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     89a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     89e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     8b6:	4770      	bx	lr
     8b8:	41008000 	.word	0x41008000

000008bc <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     8bc:	4b06      	ldr	r3, [pc, #24]	; (8d8 <TARGET_IO_CLOCK_init+0x1c>)
     8be:	2240      	movs	r2, #64	; 0x40
     8c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     8c4:	2243      	movs	r2, #67	; 0x43
     8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     8ca:	4a04      	ldr	r2, [pc, #16]	; (8dc <TARGET_IO_CLOCK_init+0x20>)
     8cc:	6993      	ldr	r3, [r2, #24]
     8ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     8d2:	6193      	str	r3, [r2, #24]
     8d4:	4770      	bx	lr
     8d6:	bf00      	nop
     8d8:	40001c00 	.word	0x40001c00
     8dc:	40000800 	.word	0x40000800

000008e0 <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void TARGET_IO_init(void)
{
     8e0:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     8e2:	4b05      	ldr	r3, [pc, #20]	; (8f8 <TARGET_IO_init+0x18>)
     8e4:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     8e6:	2200      	movs	r2, #0
     8e8:	4904      	ldr	r1, [pc, #16]	; (8fc <TARGET_IO_init+0x1c>)
     8ea:	4805      	ldr	r0, [pc, #20]	; (900 <TARGET_IO_init+0x20>)
     8ec:	4b05      	ldr	r3, [pc, #20]	; (904 <TARGET_IO_init+0x24>)
     8ee:	4798      	blx	r3
	TARGET_IO_PORT_init();
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <TARGET_IO_init+0x28>)
     8f2:	4798      	blx	r3
     8f4:	bd08      	pop	{r3, pc}
     8f6:	bf00      	nop
     8f8:	000008bd 	.word	0x000008bd
     8fc:	41014000 	.word	0x41014000
     900:	2000090c 	.word	0x2000090c
     904:	00000b09 	.word	0x00000b09
     908:	00000875 	.word	0x00000875

0000090c <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     90c:	4b16      	ldr	r3, [pc, #88]	; (968 <I2C_0_PORT_init+0x5c>)
     90e:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     912:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     916:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91a:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     91e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     922:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     926:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92a:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     92e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     932:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     936:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     93a:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     93e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     942:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     946:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     94a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     94e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     952:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     956:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     95a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     95e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     962:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     966:	4770      	bx	lr
     968:	41008000 	.word	0x41008000

0000096c <I2C_0_CLOCK_init>:
     96c:	4b06      	ldr	r3, [pc, #24]	; (988 <I2C_0_CLOCK_init+0x1c>)
     96e:	2240      	movs	r2, #64	; 0x40
     970:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     974:	2243      	movs	r2, #67	; 0x43
     976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     97a:	4a04      	ldr	r2, [pc, #16]	; (98c <I2C_0_CLOCK_init+0x20>)
     97c:	6a13      	ldr	r3, [r2, #32]
     97e:	f043 0304 	orr.w	r3, r3, #4
     982:	6213      	str	r3, [r2, #32]
     984:	4770      	bx	lr
     986:	bf00      	nop
     988:	40001c00 	.word	0x40001c00
     98c:	40000800 	.word	0x40000800

00000990 <I2C_0_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void I2C_0_init(void)
{
     990:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     992:	4b04      	ldr	r3, [pc, #16]	; (9a4 <I2C_0_init+0x14>)
     994:	4798      	blx	r3
	i2c_m_async_init(&I2C_0, SERCOM6);
     996:	4904      	ldr	r1, [pc, #16]	; (9a8 <I2C_0_init+0x18>)
     998:	4804      	ldr	r0, [pc, #16]	; (9ac <I2C_0_init+0x1c>)
     99a:	4b05      	ldr	r3, [pc, #20]	; (9b0 <I2C_0_init+0x20>)
     99c:	4798      	blx	r3
	I2C_0_PORT_init();
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <I2C_0_init+0x24>)
     9a0:	4798      	blx	r3
     9a2:	bd08      	pop	{r3, pc}
     9a4:	0000096d 	.word	0x0000096d
     9a8:	43000800 	.word	0x43000800
     9ac:	20000918 	.word	0x20000918
     9b0:	00001489 	.word	0x00001489
     9b4:	0000090d 	.word	0x0000090d

000009b8 <system_init>:
}

void system_init(void)
{
     9b8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9ba:	4b03      	ldr	r3, [pc, #12]	; (9c8 <system_init+0x10>)
     9bc:	4798      	blx	r3
	init_mcu();

	TARGET_IO_init();
     9be:	4b03      	ldr	r3, [pc, #12]	; (9cc <system_init+0x14>)
     9c0:	4798      	blx	r3

	I2C_0_init();
     9c2:	4b03      	ldr	r3, [pc, #12]	; (9d0 <system_init+0x18>)
     9c4:	4798      	blx	r3
     9c6:	bd08      	pop	{r3, pc}
     9c8:	00000bad 	.word	0x00000bad
     9cc:	000008e1 	.word	0x000008e1
     9d0:	00000991 	.word	0x00000991

000009d4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	460d      	mov	r5, r1
     9d8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     9da:	4604      	mov	r4, r0
     9dc:	b160      	cbz	r0, 9f8 <io_write+0x24>
     9de:	1c08      	adds	r0, r1, #0
     9e0:	bf18      	it	ne
     9e2:	2001      	movne	r0, #1
     9e4:	2234      	movs	r2, #52	; 0x34
     9e6:	4905      	ldr	r1, [pc, #20]	; (9fc <io_write+0x28>)
     9e8:	4b05      	ldr	r3, [pc, #20]	; (a00 <io_write+0x2c>)
     9ea:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     9ec:	6823      	ldr	r3, [r4, #0]
     9ee:	4632      	mov	r2, r6
     9f0:	4629      	mov	r1, r5
     9f2:	4620      	mov	r0, r4
     9f4:	4798      	blx	r3
}
     9f6:	bd70      	pop	{r4, r5, r6, pc}
     9f8:	2000      	movs	r0, #0
     9fa:	e7f3      	b.n	9e4 <io_write+0x10>
     9fc:	00002e84 	.word	0x00002e84
     a00:	00000ba5 	.word	0x00000ba5

00000a04 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a04:	b570      	push	{r4, r5, r6, lr}
     a06:	460d      	mov	r5, r1
     a08:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     a0a:	4604      	mov	r4, r0
     a0c:	b160      	cbz	r0, a28 <io_read+0x24>
     a0e:	1c08      	adds	r0, r1, #0
     a10:	bf18      	it	ne
     a12:	2001      	movne	r0, #1
     a14:	223d      	movs	r2, #61	; 0x3d
     a16:	4905      	ldr	r1, [pc, #20]	; (a2c <io_read+0x28>)
     a18:	4b05      	ldr	r3, [pc, #20]	; (a30 <io_read+0x2c>)
     a1a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     a1c:	6863      	ldr	r3, [r4, #4]
     a1e:	4632      	mov	r2, r6
     a20:	4629      	mov	r1, r5
     a22:	4620      	mov	r0, r4
     a24:	4798      	blx	r3
}
     a26:	bd70      	pop	{r4, r5, r6, pc}
     a28:	2000      	movs	r0, #0
     a2a:	e7f3      	b.n	a14 <io_read+0x10>
     a2c:	00002e84 	.word	0x00002e84
     a30:	00000ba5 	.word	0x00000ba5

00000a34 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a38:	460f      	mov	r7, r1
     a3a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a3c:	4604      	mov	r4, r0
     a3e:	b328      	cbz	r0, a8c <usart_sync_write+0x58>
     a40:	b331      	cbz	r1, a90 <usart_sync_write+0x5c>
     a42:	1c10      	adds	r0, r2, #0
     a44:	bf18      	it	ne
     a46:	2001      	movne	r0, #1
     a48:	22f1      	movs	r2, #241	; 0xf1
     a4a:	4912      	ldr	r1, [pc, #72]	; (a94 <usart_sync_write+0x60>)
     a4c:	4b12      	ldr	r3, [pc, #72]	; (a98 <usart_sync_write+0x64>)
     a4e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     a50:	3408      	adds	r4, #8
     a52:	4d12      	ldr	r5, [pc, #72]	; (a9c <usart_sync_write+0x68>)
     a54:	4620      	mov	r0, r4
     a56:	47a8      	blx	r5
     a58:	2800      	cmp	r0, #0
     a5a:	d0fb      	beq.n	a54 <usart_sync_write+0x20>
     a5c:	3f01      	subs	r7, #1
     a5e:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a60:	f8df 9040 	ldr.w	r9, [pc, #64]	; aa4 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a64:	4d0d      	ldr	r5, [pc, #52]	; (a9c <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a66:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     a6a:	4620      	mov	r0, r4
     a6c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a6e:	4620      	mov	r0, r4
     a70:	47a8      	blx	r5
     a72:	2800      	cmp	r0, #0
     a74:	d0fb      	beq.n	a6e <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     a76:	3601      	adds	r6, #1
     a78:	4546      	cmp	r6, r8
     a7a:	d3f4      	bcc.n	a66 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     a7c:	4d08      	ldr	r5, [pc, #32]	; (aa0 <usart_sync_write+0x6c>)
     a7e:	4620      	mov	r0, r4
     a80:	47a8      	blx	r5
     a82:	2800      	cmp	r0, #0
     a84:	d0fb      	beq.n	a7e <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     a86:	4630      	mov	r0, r6
     a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     a8c:	2000      	movs	r0, #0
     a8e:	e7db      	b.n	a48 <usart_sync_write+0x14>
     a90:	2000      	movs	r0, #0
     a92:	e7d9      	b.n	a48 <usart_sync_write+0x14>
     a94:	00002e98 	.word	0x00002e98
     a98:	00000ba5 	.word	0x00000ba5
     a9c:	000010e3 	.word	0x000010e3
     aa0:	000010ed 	.word	0x000010ed
     aa4:	000010d5 	.word	0x000010d5

00000aa8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     aac:	460f      	mov	r7, r1
     aae:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     ab0:	4604      	mov	r4, r0
     ab2:	b1e0      	cbz	r0, aee <usart_sync_read+0x46>
     ab4:	b1e9      	cbz	r1, af2 <usart_sync_read+0x4a>
     ab6:	1c10      	adds	r0, r2, #0
     ab8:	bf18      	it	ne
     aba:	2001      	movne	r0, #1
     abc:	f44f 7286 	mov.w	r2, #268	; 0x10c
     ac0:	490d      	ldr	r1, [pc, #52]	; (af8 <usart_sync_read+0x50>)
     ac2:	4b0e      	ldr	r3, [pc, #56]	; (afc <usart_sync_read+0x54>)
     ac4:	4798      	blx	r3
     ac6:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     ac8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     aca:	3408      	adds	r4, #8
     acc:	4d0c      	ldr	r5, [pc, #48]	; (b00 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ace:	f8df 9034 	ldr.w	r9, [pc, #52]	; b04 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     ad2:	4620      	mov	r0, r4
     ad4:	47a8      	blx	r5
     ad6:	2800      	cmp	r0, #0
     ad8:	d0fb      	beq.n	ad2 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ada:	4620      	mov	r0, r4
     adc:	47c8      	blx	r9
     ade:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     ae2:	3601      	adds	r6, #1
     ae4:	4546      	cmp	r6, r8
     ae6:	d3f4      	bcc.n	ad2 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     ae8:	4630      	mov	r0, r6
     aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     aee:	2000      	movs	r0, #0
     af0:	e7e4      	b.n	abc <usart_sync_read+0x14>
     af2:	2000      	movs	r0, #0
     af4:	e7e2      	b.n	abc <usart_sync_read+0x14>
     af6:	bf00      	nop
     af8:	00002e98 	.word	0x00002e98
     afc:	00000ba5 	.word	0x00000ba5
     b00:	000010f7 	.word	0x000010f7
     b04:	000010db 	.word	0x000010db

00000b08 <usart_sync_init>:
{
     b08:	b538      	push	{r3, r4, r5, lr}
     b0a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     b0c:	4604      	mov	r4, r0
     b0e:	b198      	cbz	r0, b38 <usart_sync_init+0x30>
     b10:	1c08      	adds	r0, r1, #0
     b12:	bf18      	it	ne
     b14:	2001      	movne	r0, #1
     b16:	2234      	movs	r2, #52	; 0x34
     b18:	4908      	ldr	r1, [pc, #32]	; (b3c <usart_sync_init+0x34>)
     b1a:	4b09      	ldr	r3, [pc, #36]	; (b40 <usart_sync_init+0x38>)
     b1c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     b1e:	4629      	mov	r1, r5
     b20:	f104 0008 	add.w	r0, r4, #8
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <usart_sync_init+0x3c>)
     b26:	4798      	blx	r3
	if (init_status) {
     b28:	4603      	mov	r3, r0
     b2a:	b918      	cbnz	r0, b34 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     b2c:	4a06      	ldr	r2, [pc, #24]	; (b48 <usart_sync_init+0x40>)
     b2e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     b30:	4a06      	ldr	r2, [pc, #24]	; (b4c <usart_sync_init+0x44>)
     b32:	6022      	str	r2, [r4, #0]
}
     b34:	4618      	mov	r0, r3
     b36:	bd38      	pop	{r3, r4, r5, pc}
     b38:	2000      	movs	r0, #0
     b3a:	e7ec      	b.n	b16 <usart_sync_init+0xe>
     b3c:	00002e98 	.word	0x00002e98
     b40:	00000ba5 	.word	0x00000ba5
     b44:	00001095 	.word	0x00001095
     b48:	00000aa9 	.word	0x00000aa9
     b4c:	00000a35 	.word	0x00000a35

00000b50 <usart_sync_enable>:
{
     b50:	b510      	push	{r4, lr}
	ASSERT(descr);
     b52:	4604      	mov	r4, r0
     b54:	2253      	movs	r2, #83	; 0x53
     b56:	4906      	ldr	r1, [pc, #24]	; (b70 <usart_sync_enable+0x20>)
     b58:	3000      	adds	r0, #0
     b5a:	bf18      	it	ne
     b5c:	2001      	movne	r0, #1
     b5e:	4b05      	ldr	r3, [pc, #20]	; (b74 <usart_sync_enable+0x24>)
     b60:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     b62:	f104 0008 	add.w	r0, r4, #8
     b66:	4b04      	ldr	r3, [pc, #16]	; (b78 <usart_sync_enable+0x28>)
     b68:	4798      	blx	r3
}
     b6a:	2000      	movs	r0, #0
     b6c:	bd10      	pop	{r4, pc}
     b6e:	bf00      	nop
     b70:	00002e98 	.word	0x00002e98
     b74:	00000ba5 	.word	0x00000ba5
     b78:	000010c1 	.word	0x000010c1

00000b7c <usart_sync_get_io_descriptor>:
{
     b7c:	b538      	push	{r3, r4, r5, lr}
     b7e:	460c      	mov	r4, r1
	ASSERT(descr && io);
     b80:	4605      	mov	r5, r0
     b82:	b148      	cbz	r0, b98 <usart_sync_get_io_descriptor+0x1c>
     b84:	1c08      	adds	r0, r1, #0
     b86:	bf18      	it	ne
     b88:	2001      	movne	r0, #1
     b8a:	2269      	movs	r2, #105	; 0x69
     b8c:	4903      	ldr	r1, [pc, #12]	; (b9c <usart_sync_get_io_descriptor+0x20>)
     b8e:	4b04      	ldr	r3, [pc, #16]	; (ba0 <usart_sync_get_io_descriptor+0x24>)
     b90:	4798      	blx	r3
	*io = &descr->io;
     b92:	6025      	str	r5, [r4, #0]
}
     b94:	2000      	movs	r0, #0
     b96:	bd38      	pop	{r3, r4, r5, pc}
     b98:	2000      	movs	r0, #0
     b9a:	e7f6      	b.n	b8a <usart_sync_get_io_descriptor+0xe>
     b9c:	00002e98 	.word	0x00002e98
     ba0:	00000ba5 	.word	0x00000ba5

00000ba4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ba4:	b900      	cbnz	r0, ba8 <assert+0x4>
		__asm("BKPT #0");
     ba6:	be00      	bkpt	0x0000
     ba8:	4770      	bx	lr
	...

00000bac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bac:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     bae:	4a08      	ldr	r2, [pc, #32]	; (bd0 <_init_chip+0x24>)
     bb0:	8813      	ldrh	r3, [r2, #0]
     bb2:	b29b      	uxth	r3, r3
     bb4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     bb6:	4b07      	ldr	r3, [pc, #28]	; (bd4 <_init_chip+0x28>)
     bb8:	4798      	blx	r3
	_oscctrl_init_sources();
     bba:	4b07      	ldr	r3, [pc, #28]	; (bd8 <_init_chip+0x2c>)
     bbc:	4798      	blx	r3
	_mclk_init();
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <_init_chip+0x30>)
     bc0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     bc2:	4b07      	ldr	r3, [pc, #28]	; (be0 <_init_chip+0x34>)
     bc4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     bc6:	f640 70ff 	movw	r0, #4095	; 0xfff
     bca:	4b06      	ldr	r3, [pc, #24]	; (be4 <_init_chip+0x38>)
     bcc:	4798      	blx	r3
     bce:	bd08      	pop	{r3, pc}
     bd0:	41004000 	.word	0x41004000
     bd4:	00000c19 	.word	0x00000c19
     bd8:	00000c2d 	.word	0x00000c2d
     bdc:	00000c0d 	.word	0x00000c0d
     be0:	00000c49 	.word	0x00000c49
     be4:	00000be9 	.word	0x00000be9

00000be8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     be8:	f010 0f01 	tst.w	r0, #1
     bec:	d008      	beq.n	c00 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     bee:	4a05      	ldr	r2, [pc, #20]	; (c04 <_gclk_init_generators_by_fref+0x1c>)
     bf0:	4b05      	ldr	r3, [pc, #20]	; (c08 <_gclk_init_generators_by_fref+0x20>)
     bf2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     bf4:	4619      	mov	r1, r3
     bf6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     bfa:	684b      	ldr	r3, [r1, #4]
     bfc:	4213      	tst	r3, r2
     bfe:	d1fc      	bne.n	bfa <_gclk_init_generators_by_fref+0x12>
     c00:	4770      	bx	lr
     c02:	bf00      	nop
     c04:	00010101 	.word	0x00010101
     c08:	40001c00 	.word	0x40001c00

00000c0c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     c0c:	2201      	movs	r2, #1
     c0e:	4b01      	ldr	r3, [pc, #4]	; (c14 <_mclk_init+0x8>)
     c10:	715a      	strb	r2, [r3, #5]
     c12:	4770      	bx	lr
     c14:	40000800 	.word	0x40000800

00000c18 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     c18:	4b03      	ldr	r3, [pc, #12]	; (c28 <_osc32kctrl_init_sources+0x10>)
     c1a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     c1c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     c20:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     c22:	2201      	movs	r2, #1
     c24:	741a      	strb	r2, [r3, #16]
     c26:	4770      	bx	lr
     c28:	40001400 	.word	0x40001400

00000c2c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     c2c:	4a04      	ldr	r2, [pc, #16]	; (c40 <_oscctrl_init_sources+0x14>)
     c2e:	4b05      	ldr	r3, [pc, #20]	; (c44 <_oscctrl_init_sources+0x18>)
     c30:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     c32:	461a      	mov	r2, r3
     c34:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     c36:	f013 0f02 	tst.w	r3, #2
     c3a:	d0fb      	beq.n	c34 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop
     c40:	03002606 	.word	0x03002606
     c44:	40001000 	.word	0x40001000

00000c48 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     c48:	4770      	bx	lr
	...

00000c4c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     c4c:	b470      	push	{r4, r5, r6}
     c4e:	b089      	sub	sp, #36	; 0x24
     c50:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     c52:	466c      	mov	r4, sp
     c54:	4d0d      	ldr	r5, [pc, #52]	; (c8c <_sercom_get_hardware_index+0x40>)
     c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     c5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c62:	9b00      	ldr	r3, [sp, #0]
     c64:	42b3      	cmp	r3, r6
     c66:	d00d      	beq.n	c84 <_sercom_get_hardware_index+0x38>
     c68:	4631      	mov	r1, r6
     c6a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c6c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c6e:	f853 2b04 	ldr.w	r2, [r3], #4
     c72:	428a      	cmp	r2, r1
     c74:	d007      	beq.n	c86 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c76:	3001      	adds	r0, #1
     c78:	2808      	cmp	r0, #8
     c7a:	d1f8      	bne.n	c6e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     c7c:	2000      	movs	r0, #0
}
     c7e:	b009      	add	sp, #36	; 0x24
     c80:	bc70      	pop	{r4, r5, r6}
     c82:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c84:	2000      	movs	r0, #0
			return i;
     c86:	b2c0      	uxtb	r0, r0
     c88:	e7f9      	b.n	c7e <_sercom_get_hardware_index+0x32>
     c8a:	bf00      	nop
     c8c:	00002eb4 	.word	0x00002eb4

00000c90 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     c90:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
     c92:	4b03      	ldr	r3, [pc, #12]	; (ca0 <_sercom_get_irq_num+0x10>)
     c94:	4798      	blx	r3
     c96:	0080      	lsls	r0, r0, #2
     c98:	302e      	adds	r0, #46	; 0x2e
}
     c9a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     c9e:	bd08      	pop	{r3, pc}
     ca0:	00000c4d 	.word	0x00000c4d

00000ca4 <_usart_init>:
{
     ca4:	b510      	push	{r4, lr}
     ca6:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     ca8:	4b21      	ldr	r3, [pc, #132]	; (d30 <_usart_init+0x8c>)
     caa:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     cac:	2803      	cmp	r0, #3
     cae:	d005      	beq.n	cbc <_usart_init+0x18>
	ASSERT(false);
     cb0:	f240 2249 	movw	r2, #585	; 0x249
     cb4:	491f      	ldr	r1, [pc, #124]	; (d34 <_usart_init+0x90>)
     cb6:	2000      	movs	r0, #0
     cb8:	4b1f      	ldr	r3, [pc, #124]	; (d38 <_usart_init+0x94>)
     cba:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     cbc:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     cbe:	f013 0f01 	tst.w	r3, #1
     cc2:	d119      	bne.n	cf8 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cc4:	69e3      	ldr	r3, [r4, #28]
     cc6:	f013 0f03 	tst.w	r3, #3
     cca:	d1fb      	bne.n	cc4 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     ccc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     cce:	f013 0f02 	tst.w	r3, #2
     cd2:	d00b      	beq.n	cec <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     cd4:	6823      	ldr	r3, [r4, #0]
     cd6:	f023 0302 	bic.w	r3, r3, #2
     cda:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cdc:	69e3      	ldr	r3, [r4, #28]
     cde:	f013 0f03 	tst.w	r3, #3
     ce2:	d1fb      	bne.n	cdc <_usart_init+0x38>
     ce4:	69e3      	ldr	r3, [r4, #28]
     ce6:	f013 0f02 	tst.w	r3, #2
     cea:	d1fb      	bne.n	ce4 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cec:	2305      	movs	r3, #5
     cee:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cf0:	69e3      	ldr	r3, [r4, #28]
     cf2:	f013 0f03 	tst.w	r3, #3
     cf6:	d1fb      	bne.n	cf0 <_usart_init+0x4c>
     cf8:	69e3      	ldr	r3, [r4, #28]
     cfa:	f013 0f01 	tst.w	r3, #1
     cfe:	d1fb      	bne.n	cf8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     d00:	4b0e      	ldr	r3, [pc, #56]	; (d3c <_usart_init+0x98>)
     d02:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d04:	69e3      	ldr	r3, [r4, #28]
     d06:	f013 0f03 	tst.w	r3, #3
     d0a:	d1fb      	bne.n	d04 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     d0c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     d10:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d12:	69e3      	ldr	r3, [r4, #28]
     d14:	f013 0f1f 	tst.w	r3, #31
     d18:	d1fb      	bne.n	d12 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     d1a:	4b09      	ldr	r3, [pc, #36]	; (d40 <_usart_init+0x9c>)
     d1c:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     d1e:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
     d22:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     d24:	2000      	movs	r0, #0
     d26:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     d28:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     d2c:	bd10      	pop	{r4, pc}
     d2e:	bf00      	nop
     d30:	00000c4d 	.word	0x00000c4d
     d34:	00002eec 	.word	0x00002eec
     d38:	00000ba5 	.word	0x00000ba5
     d3c:	40100004 	.word	0x40100004
     d40:	00700002 	.word	0x00700002

00000d44 <_get_i2cm_index>:
{
     d44:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     d46:	4b07      	ldr	r3, [pc, #28]	; (d64 <_get_i2cm_index+0x20>)
     d48:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
     d4a:	2806      	cmp	r0, #6
     d4c:	d008      	beq.n	d60 <_get_i2cm_index+0x1c>
	ASSERT(false);
     d4e:	f44f 726b 	mov.w	r2, #940	; 0x3ac
     d52:	4905      	ldr	r1, [pc, #20]	; (d68 <_get_i2cm_index+0x24>)
     d54:	2000      	movs	r0, #0
     d56:	4b05      	ldr	r3, [pc, #20]	; (d6c <_get_i2cm_index+0x28>)
     d58:	4798      	blx	r3
	return -1;
     d5a:	f04f 30ff 	mov.w	r0, #4294967295
}
     d5e:	bd08      	pop	{r3, pc}
			return i;
     d60:	2000      	movs	r0, #0
     d62:	bd08      	pop	{r3, pc}
     d64:	00000c4d 	.word	0x00000c4d
     d68:	00002eec 	.word	0x00002eec
     d6c:	00000ba5 	.word	0x00000ba5

00000d70 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     d70:	b538      	push	{r3, r4, r5, lr}
     d72:	4605      	mov	r5, r0
     d74:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     d76:	4608      	mov	r0, r1
     d78:	4b32      	ldr	r3, [pc, #200]	; (e44 <_i2c_m_sync_init_impl+0xd4>)
     d7a:	4798      	blx	r3
     d7c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     d7e:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     d80:	f013 0f01 	tst.w	r3, #1
     d84:	d122      	bne.n	dcc <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     d86:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     d8a:	4a2f      	ldr	r2, [pc, #188]	; (e48 <_i2c_m_sync_init_impl+0xd8>)
     d8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     d92:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d96:	69e3      	ldr	r3, [r4, #28]
     d98:	f013 0f03 	tst.w	r3, #3
     d9c:	d1fb      	bne.n	d96 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     d9e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     da0:	f013 0f02 	tst.w	r3, #2
     da4:	d00b      	beq.n	dbe <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     da6:	6823      	ldr	r3, [r4, #0]
     da8:	f023 0302 	bic.w	r3, r3, #2
     dac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dae:	69e3      	ldr	r3, [r4, #28]
     db0:	f013 0f03 	tst.w	r3, #3
     db4:	d1fb      	bne.n	dae <_i2c_m_sync_init_impl+0x3e>
     db6:	69e3      	ldr	r3, [r4, #28]
     db8:	f013 0f02 	tst.w	r3, #2
     dbc:	d1fb      	bne.n	db6 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     dbe:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     dc2:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dc4:	69e3      	ldr	r3, [r4, #28]
     dc6:	f013 0f03 	tst.w	r3, #3
     dca:	d1fb      	bne.n	dc4 <_i2c_m_sync_init_impl+0x54>
     dcc:	69e3      	ldr	r3, [r4, #28]
     dce:	f013 0f01 	tst.w	r3, #1
     dd2:	d1fb      	bne.n	dcc <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     dd4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     dd8:	4a1b      	ldr	r2, [pc, #108]	; (e48 <_i2c_m_sync_init_impl+0xd8>)
     dda:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     de0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     de2:	69e3      	ldr	r3, [r4, #28]
     de4:	f013 0f03 	tst.w	r3, #3
     de8:	d1fb      	bne.n	de2 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     dea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     dee:	4916      	ldr	r1, [pc, #88]	; (e48 <_i2c_m_sync_init_impl+0xd8>)
     df0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
     df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     df6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     df8:	69e3      	ldr	r3, [r4, #28]
     dfa:	f013 0f04 	tst.w	r3, #4
     dfe:	d1fb      	bne.n	df8 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     e00:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     e04:	4910      	ldr	r1, [pc, #64]	; (e48 <_i2c_m_sync_init_impl+0xd8>)
     e06:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
     e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     e0c:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     e0e:	f3c2 6301 	ubfx	r3, r2, #24, #2
     e12:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     e14:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     e1a:	2b01      	cmp	r3, #1
     e1c:	bf94      	ite	ls
     e1e:	2300      	movls	r3, #0
     e20:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     e22:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     e26:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e28:	69e3      	ldr	r3, [r4, #28]
     e2a:	f013 0f04 	tst.w	r3, #4
     e2e:	d1fb      	bne.n	e28 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
     e30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     e34:	4b04      	ldr	r3, [pc, #16]	; (e48 <_i2c_m_sync_init_impl+0xd8>)
     e36:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     e3a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     e3c:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     e3e:	2000      	movs	r0, #0
     e40:	bd38      	pop	{r3, r4, r5, pc}
     e42:	bf00      	nop
     e44:	00000d45 	.word	0x00000d45
     e48:	00002eb4 	.word	0x00002eb4

00000e4c <_sercom_i2c_m_irq_handler>:
{
     e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e50:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
     e52:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     e54:	7e26      	ldrb	r6, [r4, #24]
     e56:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
     e58:	f8df 8234 	ldr.w	r8, [pc, #564]	; 1090 <_sercom_i2c_m_irq_handler+0x244>
     e5c:	f240 421e 	movw	r2, #1054	; 0x41e
     e60:	4641      	mov	r1, r8
     e62:	3000      	adds	r0, #0
     e64:	bf18      	it	ne
     e66:	2001      	movne	r0, #1
     e68:	4f88      	ldr	r7, [pc, #544]	; (108c <_sercom_i2c_m_irq_handler+0x240>)
     e6a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
     e6c:	6928      	ldr	r0, [r5, #16]
     e6e:	f240 421f 	movw	r2, #1055	; 0x41f
     e72:	4641      	mov	r1, r8
     e74:	3000      	adds	r0, #0
     e76:	bf18      	it	ne
     e78:	2001      	movne	r0, #1
     e7a:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
     e7c:	f016 0f80 	tst.w	r6, #128	; 0x80
     e80:	f040 80f6 	bne.w	1070 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     e84:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e86:	69e3      	ldr	r3, [r4, #28]
     e88:	f013 0f04 	tst.w	r3, #4
     e8c:	d1fb      	bne.n	e86 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     e8e:	8b63      	ldrh	r3, [r4, #26]
     e90:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     e92:	f016 0f01 	tst.w	r6, #1
     e96:	f000 8092 	beq.w	fbe <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     e9a:	f013 0f02 	tst.w	r3, #2
     e9e:	d024      	beq.n	eea <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     ea0:	2201      	movs	r2, #1
     ea2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     ea4:	886a      	ldrh	r2, [r5, #2]
     ea6:	b292      	uxth	r2, r2
     ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
     eac:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     eae:	886a      	ldrh	r2, [r5, #2]
     eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     eb4:	0412      	lsls	r2, r2, #16
     eb6:	0c12      	lsrs	r2, r2, #16
     eb8:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     eba:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
     ebe:	2b00      	cmp	r3, #0
     ec0:	bf14      	ite	ne
     ec2:	f06f 0104 	mvnne.w	r1, #4
     ec6:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     eca:	886b      	ldrh	r3, [r5, #2]
     ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     ed0:	041b      	lsls	r3, r3, #16
     ed2:	0c1b      	lsrs	r3, r3, #16
     ed4:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
     ed6:	696b      	ldr	r3, [r5, #20]
     ed8:	2b00      	cmp	r3, #0
     eda:	f000 80c7 	beq.w	106c <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
     ede:	4628      	mov	r0, r5
     ee0:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	7623      	strb	r3, [r4, #24]
     ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     eea:	f013 0f04 	tst.w	r3, #4
     eee:	d124      	bne.n	f3a <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
     ef0:	886b      	ldrh	r3, [r5, #2]
     ef2:	f413 6f80 	tst.w	r3, #1024	; 0x400
     ef6:	d03e      	beq.n	f76 <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     ef8:	882b      	ldrh	r3, [r5, #0]
     efa:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     efc:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f00:	69e3      	ldr	r3, [r4, #28]
     f02:	f013 0f04 	tst.w	r3, #4
     f06:	d1fb      	bne.n	f00 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
     f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
     f0e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
     f12:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     f14:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f16:	69e3      	ldr	r3, [r4, #28]
     f18:	f013 0f04 	tst.w	r3, #4
     f1c:	d1fb      	bne.n	f16 <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
     f1e:	886b      	ldrh	r3, [r5, #2]
     f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     f24:	041b      	lsls	r3, r3, #16
     f26:	0c1b      	lsrs	r3, r3, #16
     f28:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
     f2a:	69ab      	ldr	r3, [r5, #24]
     f2c:	2b00      	cmp	r3, #0
     f2e:	f000 8088 	beq.w	1042 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
     f32:	4628      	mov	r0, r5
     f34:	4798      	blx	r3
     f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
     f3a:	686b      	ldr	r3, [r5, #4]
     f3c:	2b00      	cmp	r3, #0
     f3e:	dd04      	ble.n	f4a <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
     f40:	886b      	ldrh	r3, [r5, #2]
     f42:	b29b      	uxth	r3, r3
     f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     f48:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     f4a:	886b      	ldrh	r3, [r5, #2]
     f4c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f50:	d108      	bne.n	f64 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
     f52:	886b      	ldrh	r3, [r5, #2]
     f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     f58:	041b      	lsls	r3, r3, #16
     f5a:	0c1b      	lsrs	r3, r3, #16
     f5c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     f5e:	f06f 0101 	mvn.w	r1, #1
     f62:	e7b2      	b.n	eca <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f64:	6863      	ldr	r3, [r4, #4]
     f66:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     f6a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f6c:	69e3      	ldr	r3, [r4, #28]
     f6e:	f013 0f04 	tst.w	r3, #4
     f72:	d1fb      	bne.n	f6c <_sercom_i2c_m_irq_handler+0x120>
     f74:	e7ed      	b.n	f52 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
     f76:	686b      	ldr	r3, [r5, #4]
     f78:	b99b      	cbnz	r3, fa2 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
     f7a:	886b      	ldrh	r3, [r5, #2]
     f7c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f80:	d106      	bne.n	f90 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
     f82:	886b      	ldrh	r3, [r5, #2]
     f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     f88:	041b      	lsls	r3, r3, #16
     f8a:	0c1b      	lsrs	r3, r3, #16
     f8c:	806b      	strh	r3, [r5, #2]
     f8e:	e7cc      	b.n	f2a <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f90:	6863      	ldr	r3, [r4, #4]
     f92:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     f96:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f98:	69e3      	ldr	r3, [r4, #28]
     f9a:	f013 0f04 	tst.w	r3, #4
     f9e:	d1fb      	bne.n	f98 <_sercom_i2c_m_irq_handler+0x14c>
     fa0:	e7ef      	b.n	f82 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     fa2:	68ab      	ldr	r3, [r5, #8]
     fa4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     fa6:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fa8:	69e3      	ldr	r3, [r4, #28]
     faa:	f013 0f04 	tst.w	r3, #4
     fae:	d1fb      	bne.n	fa8 <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
     fb0:	68ab      	ldr	r3, [r5, #8]
     fb2:	3301      	adds	r3, #1
     fb4:	60ab      	str	r3, [r5, #8]
				msg->len--;
     fb6:	686b      	ldr	r3, [r5, #4]
     fb8:	3b01      	subs	r3, #1
     fba:	606b      	str	r3, [r5, #4]
     fbc:	e7b5      	b.n	f2a <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
     fbe:	f016 0f02 	tst.w	r6, #2
     fc2:	d041      	beq.n	1048 <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     fc4:	686a      	ldr	r2, [r5, #4]
     fc6:	2a00      	cmp	r2, #0
     fc8:	d036      	beq.n	1038 <_sercom_i2c_m_irq_handler+0x1ec>
     fca:	f013 0f04 	tst.w	r3, #4
     fce:	d133      	bne.n	1038 <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     fd0:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
     fd4:	3a01      	subs	r2, #1
     fd6:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     fd8:	2a00      	cmp	r2, #0
     fda:	d137      	bne.n	104c <_sercom_i2c_m_irq_handler+0x200>
     fdc:	2900      	cmp	r1, #0
     fde:	d039      	beq.n	1054 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
     fe0:	886b      	ldrh	r3, [r5, #2]
     fe2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     fe6:	d116      	bne.n	1016 <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
     fe8:	886b      	ldrh	r3, [r5, #2]
     fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     fee:	041b      	lsls	r3, r3, #16
     ff0:	0c1b      	lsrs	r3, r3, #16
     ff2:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     ff4:	68aa      	ldr	r2, [r5, #8]
     ff6:	1c53      	adds	r3, r2, #1
     ff8:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ffa:	69e3      	ldr	r3, [r4, #28]
     ffc:	f013 0f04 	tst.w	r3, #4
    1000:	d1fb      	bne.n	ffa <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1004:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1006:	2302      	movs	r3, #2
    1008:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    100a:	69eb      	ldr	r3, [r5, #28]
    100c:	b1e3      	cbz	r3, 1048 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    100e:	4628      	mov	r0, r5
    1010:	4798      	blx	r3
    1012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1016:	6863      	ldr	r3, [r4, #4]
    1018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    101c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    101e:	69e3      	ldr	r3, [r4, #28]
    1020:	f013 0f04 	tst.w	r3, #4
    1024:	d1fb      	bne.n	101e <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1026:	6863      	ldr	r3, [r4, #4]
    1028:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    102c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    102e:	69e3      	ldr	r3, [r4, #28]
    1030:	f013 0f04 	tst.w	r3, #4
    1034:	d1fb      	bne.n	102e <_sercom_i2c_m_irq_handler+0x1e2>
    1036:	e7d7      	b.n	fe8 <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1038:	2302      	movs	r3, #2
    103a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    103c:	f06f 0101 	mvn.w	r1, #1
    1040:	e743      	b.n	eca <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    1042:	f016 0f02 	tst.w	r6, #2
    1046:	d1e0      	bne.n	100a <_sercom_i2c_m_irq_handler+0x1be>
    1048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    104c:	2a01      	cmp	r2, #1
    104e:	d1d1      	bne.n	ff4 <_sercom_i2c_m_irq_handler+0x1a8>
    1050:	2900      	cmp	r1, #0
    1052:	d0cf      	beq.n	ff4 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1054:	6863      	ldr	r3, [r4, #4]
    1056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    105a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    105c:	69e3      	ldr	r3, [r4, #28]
    105e:	f013 0f04 	tst.w	r3, #4
    1062:	d1fb      	bne.n	105c <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    1064:	686b      	ldr	r3, [r5, #4]
    1066:	2b00      	cmp	r3, #0
    1068:	d0ba      	beq.n	fe0 <_sercom_i2c_m_irq_handler+0x194>
    106a:	e7c3      	b.n	ff4 <_sercom_i2c_m_irq_handler+0x1a8>
    106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1070:	886b      	ldrh	r3, [r5, #2]
    1072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1076:	041b      	lsls	r3, r3, #16
    1078:	0c1b      	lsrs	r3, r3, #16
    107a:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    107c:	696b      	ldr	r3, [r5, #20]
    107e:	2b00      	cmp	r3, #0
    1080:	d0e2      	beq.n	1048 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    1082:	f06f 0104 	mvn.w	r1, #4
    1086:	4628      	mov	r0, r5
    1088:	4798      	blx	r3
    108a:	e72a      	b.n	ee2 <_sercom_i2c_m_irq_handler+0x96>
    108c:	00000ba5 	.word	0x00000ba5
    1090:	00002eec 	.word	0x00002eec

00001094 <_usart_sync_init>:
{
    1094:	b538      	push	{r3, r4, r5, lr}
    1096:	460c      	mov	r4, r1
	ASSERT(device);
    1098:	4605      	mov	r5, r0
    109a:	22bd      	movs	r2, #189	; 0xbd
    109c:	4905      	ldr	r1, [pc, #20]	; (10b4 <_usart_sync_init+0x20>)
    109e:	3000      	adds	r0, #0
    10a0:	bf18      	it	ne
    10a2:	2001      	movne	r0, #1
    10a4:	4b04      	ldr	r3, [pc, #16]	; (10b8 <_usart_sync_init+0x24>)
    10a6:	4798      	blx	r3
	device->hw = hw;
    10a8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    10aa:	4620      	mov	r0, r4
    10ac:	4b03      	ldr	r3, [pc, #12]	; (10bc <_usart_sync_init+0x28>)
    10ae:	4798      	blx	r3
}
    10b0:	bd38      	pop	{r3, r4, r5, pc}
    10b2:	bf00      	nop
    10b4:	00002eec 	.word	0x00002eec
    10b8:	00000ba5 	.word	0x00000ba5
    10bc:	00000ca5 	.word	0x00000ca5

000010c0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    10c0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    10c2:	6813      	ldr	r3, [r2, #0]
    10c4:	f043 0302 	orr.w	r3, r3, #2
    10c8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ca:	69d3      	ldr	r3, [r2, #28]
    10cc:	f013 0f03 	tst.w	r3, #3
    10d0:	d1fb      	bne.n	10ca <_usart_sync_enable+0xa>
}
    10d2:	4770      	bx	lr

000010d4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    10d4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    10d6:	6299      	str	r1, [r3, #40]	; 0x28
    10d8:	4770      	bx	lr

000010da <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    10da:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    10dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    10de:	b2c0      	uxtb	r0, r0
    10e0:	4770      	bx	lr

000010e2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    10e2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    10e4:	7e18      	ldrb	r0, [r3, #24]
}
    10e6:	f000 0001 	and.w	r0, r0, #1
    10ea:	4770      	bx	lr

000010ec <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    10ec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    10ee:	7e18      	ldrb	r0, [r3, #24]
}
    10f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    10f4:	4770      	bx	lr

000010f6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    10f6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    10f8:	7e18      	ldrb	r0, [r3, #24]
}
    10fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    10fe:	4770      	bx	lr

00001100 <_i2c_m_async_enable>:
{
    1100:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    1102:	4e1b      	ldr	r6, [pc, #108]	; (1170 <_i2c_m_async_enable+0x70>)
    1104:	4604      	mov	r4, r0
    1106:	f240 4244 	movw	r2, #1092	; 0x444
    110a:	4631      	mov	r1, r6
    110c:	3000      	adds	r0, #0
    110e:	bf18      	it	ne
    1110:	2001      	movne	r0, #1
    1112:	4d18      	ldr	r5, [pc, #96]	; (1174 <_i2c_m_async_enable+0x74>)
    1114:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1116:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1118:	f240 6235 	movw	r2, #1589	; 0x635
    111c:	4631      	mov	r1, r6
    111e:	1c20      	adds	r0, r4, #0
    1120:	bf18      	it	ne
    1122:	2001      	movne	r0, #1
    1124:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1126:	6823      	ldr	r3, [r4, #0]
    1128:	f043 0302 	orr.w	r3, r3, #2
    112c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    112e:	69e3      	ldr	r3, [r4, #28]
    1130:	f013 0f03 	tst.w	r3, #3
    1134:	d1fb      	bne.n	112e <_i2c_m_async_enable+0x2e>
    1136:	2104      	movs	r1, #4
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1138:	2010      	movs	r0, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    113e:	69e3      	ldr	r3, [r4, #28]
    1140:	f013 0f04 	tst.w	r3, #4
    1144:	d1fb      	bne.n	113e <_i2c_m_async_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1146:	8b63      	ldrh	r3, [r4, #26]
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1148:	f3c3 1301 	ubfx	r3, r3, #4, #2
    114c:	2b01      	cmp	r3, #1
    114e:	d009      	beq.n	1164 <_i2c_m_async_enable+0x64>
		if (timeout <= 0) {
    1150:	3a01      	subs	r2, #1
    1152:	d1f4      	bne.n	113e <_i2c_m_async_enable+0x3e>
			if (--timeout_attempt)
    1154:	3901      	subs	r1, #1
    1156:	d007      	beq.n	1168 <_i2c_m_async_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1158:	8360      	strh	r0, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    115a:	69e3      	ldr	r3, [r4, #28]
    115c:	f013 0f04 	tst.w	r3, #4
    1160:	d1fb      	bne.n	115a <_i2c_m_async_enable+0x5a>
    1162:	e7ea      	b.n	113a <_i2c_m_async_enable+0x3a>
	return ERR_NONE;
    1164:	2000      	movs	r0, #0
    1166:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1168:	f06f 0005 	mvn.w	r0, #5
}
    116c:	bd70      	pop	{r4, r5, r6, pc}
    116e:	bf00      	nop
    1170:	00002eec 	.word	0x00002eec
    1174:	00000ba5 	.word	0x00000ba5

00001178 <_i2c_m_async_init>:
{
    1178:	b570      	push	{r4, r5, r6, lr}
    117a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    117c:	4606      	mov	r6, r0
    117e:	f240 4292 	movw	r2, #1170	; 0x492
    1182:	4919      	ldr	r1, [pc, #100]	; (11e8 <_i2c_m_async_init+0x70>)
    1184:	3000      	adds	r0, #0
    1186:	bf18      	it	ne
    1188:	2001      	movne	r0, #1
    118a:	4b18      	ldr	r3, [pc, #96]	; (11ec <_i2c_m_async_init+0x74>)
    118c:	4798      	blx	r3
	i2c_dev->hw = hw;
    118e:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1190:	4629      	mov	r1, r5
    1192:	4630      	mov	r0, r6
    1194:	4b16      	ldr	r3, [pc, #88]	; (11f0 <_i2c_m_async_init+0x78>)
    1196:	4798      	blx	r3
	if (init_status) {
    1198:	4604      	mov	r4, r0
    119a:	b108      	cbz	r0, 11a0 <_i2c_m_async_init+0x28>
}
    119c:	4620      	mov	r0, r4
    119e:	bd70      	pop	{r4, r5, r6, pc}
	if (hw == SERCOM6) {
    11a0:	4b14      	ldr	r3, [pc, #80]	; (11f4 <_i2c_m_async_init+0x7c>)
    11a2:	429d      	cmp	r5, r3
		_sercom6_dev = (struct _i2c_m_async_device *)dev;
    11a4:	bf04      	itt	eq
    11a6:	4b14      	ldreq	r3, [pc, #80]	; (11f8 <_i2c_m_async_init+0x80>)
    11a8:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    11aa:	4628      	mov	r0, r5
    11ac:	4b13      	ldr	r3, [pc, #76]	; (11fc <_i2c_m_async_init+0x84>)
    11ae:	4798      	blx	r3
    11b0:	1d01      	adds	r1, r0, #4
    11b2:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11b4:	2501      	movs	r5, #1
    11b6:	f000 021f 	and.w	r2, r0, #31
    11ba:	fa05 f202 	lsl.w	r2, r5, r2
    11be:	0943      	lsrs	r3, r0, #5
    11c0:	009b      	lsls	r3, r3, #2
    11c2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    11c6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    11ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    11ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11d2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11da:	601a      	str	r2, [r3, #0]
		irq++;
    11dc:	3001      	adds	r0, #1
    11de:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    11e0:	4281      	cmp	r1, r0
    11e2:	d1e8      	bne.n	11b6 <_i2c_m_async_init+0x3e>
    11e4:	e7da      	b.n	119c <_i2c_m_async_init+0x24>
    11e6:	bf00      	nop
    11e8:	00002eec 	.word	0x00002eec
    11ec:	00000ba5 	.word	0x00000ba5
    11f0:	00000d71 	.word	0x00000d71
    11f4:	43000800 	.word	0x43000800
    11f8:	200008cc 	.word	0x200008cc
    11fc:	00000c91 	.word	0x00000c91

00001200 <_i2c_m_async_transfer>:
{
    1200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1204:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    1206:	4605      	mov	r5, r0
    1208:	f110 0800 	adds.w	r8, r0, #0
    120c:	bf18      	it	ne
    120e:	f04f 0801 	movne.w	r8, #1
    1212:	4f45      	ldr	r7, [pc, #276]	; (1328 <_i2c_m_async_transfer+0x128>)
    1214:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    1218:	4639      	mov	r1, r7
    121a:	4640      	mov	r0, r8
    121c:	4e43      	ldr	r6, [pc, #268]	; (132c <_i2c_m_async_transfer+0x12c>)
    121e:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1220:	6928      	ldr	r0, [r5, #16]
    1222:	f240 42e9 	movw	r2, #1257	; 0x4e9
    1226:	4639      	mov	r1, r7
    1228:	3000      	adds	r0, #0
    122a:	bf18      	it	ne
    122c:	2001      	movne	r0, #1
    122e:	47b0      	blx	r6
	ASSERT(msg);
    1230:	f240 42ea 	movw	r2, #1258	; 0x4ea
    1234:	4639      	mov	r1, r7
    1236:	1c20      	adds	r0, r4, #0
    1238:	bf18      	it	ne
    123a:	2001      	movne	r0, #1
    123c:	47b0      	blx	r6
	if (msg->len == 0) {
    123e:	6860      	ldr	r0, [r4, #4]
    1240:	2800      	cmp	r0, #0
    1242:	d06f      	beq.n	1324 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1244:	886b      	ldrh	r3, [r5, #2]
    1246:	f413 7f80 	tst.w	r3, #256	; 0x100
    124a:	d169      	bne.n	1320 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    124c:	8863      	ldrh	r3, [r4, #2]
    124e:	b29b      	uxth	r3, r3
    1250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1254:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    1256:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    125a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    125e:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1260:	6853      	ldr	r3, [r2, #4]
    1262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1266:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1268:	69d3      	ldr	r3, [r2, #28]
    126a:	f013 0f04 	tst.w	r3, #4
    126e:	d1fb      	bne.n	1268 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    1270:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1272:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    1274:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    1278:	492b      	ldr	r1, [pc, #172]	; (1328 <_i2c_m_async_transfer+0x128>)
    127a:	4640      	mov	r0, r8
    127c:	4b2b      	ldr	r3, [pc, #172]	; (132c <_i2c_m_async_transfer+0x12c>)
    127e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1280:	686b      	ldr	r3, [r5, #4]
    1282:	2b01      	cmp	r3, #1
    1284:	d02a      	beq.n	12dc <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1286:	6863      	ldr	r3, [r4, #4]
    1288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    128c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    128e:	69e3      	ldr	r3, [r4, #28]
    1290:	f013 0f04 	tst.w	r3, #4
    1294:	d1fb      	bne.n	128e <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    1296:	882b      	ldrh	r3, [r5, #0]
    1298:	f413 6f80 	tst.w	r3, #1024	; 0x400
    129c:	d02a      	beq.n	12f4 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    129e:	886a      	ldrh	r2, [r5, #2]
    12a0:	f012 0f01 	tst.w	r2, #1
    12a4:	d004      	beq.n	12b0 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    12a6:	886a      	ldrh	r2, [r5, #2]
    12a8:	b292      	uxth	r2, r2
    12aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    12ae:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    12b0:	f240 72fe 	movw	r2, #2046	; 0x7fe
    12b4:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    12b8:	69e3      	ldr	r3, [r4, #28]
    12ba:	f013 0f04 	tst.w	r3, #4
    12be:	d1fb      	bne.n	12b8 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    12c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    12c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    12ca:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    12cc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ce:	69e3      	ldr	r3, [r4, #28]
    12d0:	f013 0f04 	tst.w	r3, #4
    12d4:	d1fb      	bne.n	12ce <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    12d6:	2000      	movs	r0, #0
    12d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    12dc:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    12e0:	d0d1      	beq.n	1286 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    12e2:	6863      	ldr	r3, [r4, #4]
    12e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    12e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ea:	69e3      	ldr	r3, [r4, #28]
    12ec:	f013 0f04 	tst.w	r3, #4
    12f0:	d1fb      	bne.n	12ea <_i2c_m_async_transfer+0xea>
    12f2:	e7d0      	b.n	1296 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    12f4:	8869      	ldrh	r1, [r5, #2]
    12f6:	005a      	lsls	r2, r3, #1
    12f8:	b2d2      	uxtb	r2, r2
    12fa:	f001 0301 	and.w	r3, r1, #1
    12fe:	431a      	orrs	r2, r3
    1300:	69e3      	ldr	r3, [r4, #28]
    1302:	f013 0f04 	tst.w	r3, #4
    1306:	d1fb      	bne.n	1300 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1308:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    130e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1310:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1312:	69e3      	ldr	r3, [r4, #28]
    1314:	f013 0f04 	tst.w	r3, #4
    1318:	d1fb      	bne.n	1312 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    131a:	2000      	movs	r0, #0
    131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    1320:	f06f 0003 	mvn.w	r0, #3
}
    1324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1328:	00002eec 	.word	0x00002eec
    132c:	00000ba5 	.word	0x00000ba5

00001330 <_i2c_m_async_register_callback>:
	switch (type) {
    1330:	2901      	cmp	r1, #1
    1332:	d006      	beq.n	1342 <_i2c_m_async_register_callback+0x12>
    1334:	b119      	cbz	r1, 133e <_i2c_m_async_register_callback+0xe>
    1336:	2902      	cmp	r1, #2
    1338:	d005      	beq.n	1346 <_i2c_m_async_register_callback+0x16>
}
    133a:	2000      	movs	r0, #0
    133c:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    133e:	6142      	str	r2, [r0, #20]
		break;
    1340:	e7fb      	b.n	133a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    1342:	6182      	str	r2, [r0, #24]
		break;
    1344:	e7f9      	b.n	133a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    1346:	61c2      	str	r2, [r0, #28]
		break;
    1348:	e7f7      	b.n	133a <_i2c_m_async_register_callback+0xa>

0000134a <_i2c_m_async_set_irq_state>:
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    134a:	1e4b      	subs	r3, r1, #1
    134c:	b2db      	uxtb	r3, r3
    134e:	2b01      	cmp	r3, #1
    1350:	d905      	bls.n	135e <_i2c_m_async_set_irq_state+0x14>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    1352:	b919      	cbnz	r1, 135c <_i2c_m_async_set_irq_state+0x12>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    1354:	6903      	ldr	r3, [r0, #16]
	if (value == 0x0) {
    1356:	b182      	cbz	r2, 137a <_i2c_m_async_set_irq_state+0x30>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    1358:	2280      	movs	r2, #128	; 0x80
    135a:	759a      	strb	r2, [r3, #22]
    135c:	4770      	bx	lr
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    135e:	6903      	ldr	r3, [r0, #16]
	if (value == 0x0) {
    1360:	b92a      	cbnz	r2, 136e <_i2c_m_async_set_irq_state+0x24>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    1362:	2202      	movs	r2, #2
    1364:	751a      	strb	r2, [r3, #20]
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    1366:	6903      	ldr	r3, [r0, #16]
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    1368:	2201      	movs	r2, #1
    136a:	751a      	strb	r2, [r3, #20]
    136c:	4770      	bx	lr
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    136e:	2202      	movs	r2, #2
    1370:	759a      	strb	r2, [r3, #22]
    1372:	6903      	ldr	r3, [r0, #16]
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    1374:	2201      	movs	r2, #1
    1376:	759a      	strb	r2, [r3, #22]
    1378:	4770      	bx	lr
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    137a:	2280      	movs	r2, #128	; 0x80
    137c:	751a      	strb	r2, [r3, #20]
    137e:	4770      	bx	lr

00001380 <SERCOM6_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_0_Handler(void)
{
    1380:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    1382:	4b02      	ldr	r3, [pc, #8]	; (138c <SERCOM6_0_Handler+0xc>)
    1384:	6818      	ldr	r0, [r3, #0]
    1386:	4b02      	ldr	r3, [pc, #8]	; (1390 <SERCOM6_0_Handler+0x10>)
    1388:	4798      	blx	r3
    138a:	bd08      	pop	{r3, pc}
    138c:	200008cc 	.word	0x200008cc
    1390:	00000e4d 	.word	0x00000e4d

00001394 <SERCOM6_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_1_Handler(void)
{
    1394:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    1396:	4b02      	ldr	r3, [pc, #8]	; (13a0 <SERCOM6_1_Handler+0xc>)
    1398:	6818      	ldr	r0, [r3, #0]
    139a:	4b02      	ldr	r3, [pc, #8]	; (13a4 <SERCOM6_1_Handler+0x10>)
    139c:	4798      	blx	r3
    139e:	bd08      	pop	{r3, pc}
    13a0:	200008cc 	.word	0x200008cc
    13a4:	00000e4d 	.word	0x00000e4d

000013a8 <SERCOM6_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_2_Handler(void)
{
    13a8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    13aa:	4b02      	ldr	r3, [pc, #8]	; (13b4 <SERCOM6_2_Handler+0xc>)
    13ac:	6818      	ldr	r0, [r3, #0]
    13ae:	4b02      	ldr	r3, [pc, #8]	; (13b8 <SERCOM6_2_Handler+0x10>)
    13b0:	4798      	blx	r3
    13b2:	bd08      	pop	{r3, pc}
    13b4:	200008cc 	.word	0x200008cc
    13b8:	00000e4d 	.word	0x00000e4d

000013bc <SERCOM6_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_3_Handler(void)
{
    13bc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    13be:	4b02      	ldr	r3, [pc, #8]	; (13c8 <SERCOM6_3_Handler+0xc>)
    13c0:	6818      	ldr	r0, [r3, #0]
    13c2:	4b02      	ldr	r3, [pc, #8]	; (13cc <SERCOM6_3_Handler+0x10>)
    13c4:	4798      	blx	r3
    13c6:	bd08      	pop	{r3, pc}
    13c8:	200008cc 	.word	0x200008cc
    13cc:	00000e4d 	.word	0x00000e4d

000013d0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    13d0:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    13d2:	4c04      	ldr	r4, [pc, #16]	; (13e4 <stdio_redirect_init+0x14>)
    13d4:	4620      	mov	r0, r4
    13d6:	4b04      	ldr	r3, [pc, #16]	; (13e8 <stdio_redirect_init+0x18>)
    13d8:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    13da:	4620      	mov	r0, r4
    13dc:	4b03      	ldr	r3, [pc, #12]	; (13ec <stdio_redirect_init+0x1c>)
    13de:	4798      	blx	r3
    13e0:	bd10      	pop	{r4, pc}
    13e2:	bf00      	nop
    13e4:	2000090c 	.word	0x2000090c
    13e8:	00000b51 	.word	0x00000b51
    13ec:	00001649 	.word	0x00001649

000013f0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13f0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13f2:	8843      	ldrh	r3, [r0, #2]
    13f4:	f413 7f80 	tst.w	r3, #256	; 0x100
    13f8:	d102      	bne.n	1400 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    13fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    13fc:	b103      	cbz	r3, 1400 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    13fe:	4798      	blx	r3
    1400:	bd08      	pop	{r3, pc}

00001402 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1402:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1404:	8843      	ldrh	r3, [r0, #2]
    1406:	f413 7f80 	tst.w	r3, #256	; 0x100
    140a:	d102      	bne.n	1412 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    140c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    140e:	b103      	cbz	r3, 1412 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    1410:	4798      	blx	r3
    1412:	bd08      	pop	{r3, pc}

00001414 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1414:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1416:	8843      	ldrh	r3, [r0, #2]
    1418:	f413 7f80 	tst.w	r3, #256	; 0x100
    141c:	d102      	bne.n	1424 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    141e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1420:	b103      	cbz	r3, 1424 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    1422:	4798      	blx	r3
    1424:	bd08      	pop	{r3, pc}
	...

00001428 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1428:	b510      	push	{r4, lr}
    142a:	b084      	sub	sp, #16
    142c:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    142e:	8a83      	ldrh	r3, [r0, #20]
    1430:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1434:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    143a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    143e:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1440:	a901      	add	r1, sp, #4
    1442:	3828      	subs	r0, #40	; 0x28
    1444:	4b03      	ldr	r3, [pc, #12]	; (1454 <i2c_m_async_write+0x2c>)
    1446:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1448:	2800      	cmp	r0, #0
    144a:	bf08      	it	eq
    144c:	4620      	moveq	r0, r4
    144e:	b004      	add	sp, #16
    1450:	bd10      	pop	{r4, pc}
    1452:	bf00      	nop
    1454:	00001201 	.word	0x00001201

00001458 <i2c_m_async_read>:
{
    1458:	b510      	push	{r4, lr}
    145a:	b084      	sub	sp, #16
    145c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    145e:	8a83      	ldrh	r3, [r0, #20]
    1460:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1464:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1466:	f248 0301 	movw	r3, #32769	; 0x8001
    146a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    146e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1470:	a901      	add	r1, sp, #4
    1472:	3828      	subs	r0, #40	; 0x28
    1474:	4b03      	ldr	r3, [pc, #12]	; (1484 <i2c_m_async_read+0x2c>)
    1476:	4798      	blx	r3
}
    1478:	2800      	cmp	r0, #0
    147a:	bf08      	it	eq
    147c:	4620      	moveq	r0, r4
    147e:	b004      	add	sp, #16
    1480:	bd10      	pop	{r4, pc}
    1482:	bf00      	nop
    1484:	00001201 	.word	0x00001201

00001488 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    148c:	4604      	mov	r4, r0
    148e:	2289      	movs	r2, #137	; 0x89
    1490:	490f      	ldr	r1, [pc, #60]	; (14d0 <i2c_m_async_init+0x48>)
    1492:	3000      	adds	r0, #0
    1494:	bf18      	it	ne
    1496:	2001      	movne	r0, #1
    1498:	4b0e      	ldr	r3, [pc, #56]	; (14d4 <i2c_m_async_init+0x4c>)
    149a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    149c:	4629      	mov	r1, r5
    149e:	4620      	mov	r0, r4
    14a0:	4b0d      	ldr	r3, [pc, #52]	; (14d8 <i2c_m_async_init+0x50>)
    14a2:	4798      	blx	r3
	if (init_status) {
    14a4:	4605      	mov	r5, r0
    14a6:	b108      	cbz	r0, 14ac <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    14a8:	4628      	mov	r0, r5
    14aa:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    14ac:	4b0b      	ldr	r3, [pc, #44]	; (14dc <i2c_m_async_init+0x54>)
    14ae:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    14b0:	4b0b      	ldr	r3, [pc, #44]	; (14e0 <i2c_m_async_init+0x58>)
    14b2:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    14b4:	4a0b      	ldr	r2, [pc, #44]	; (14e4 <i2c_m_async_init+0x5c>)
    14b6:	2101      	movs	r1, #1
    14b8:	4620      	mov	r0, r4
    14ba:	4e0b      	ldr	r6, [pc, #44]	; (14e8 <i2c_m_async_init+0x60>)
    14bc:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    14be:	4a0b      	ldr	r2, [pc, #44]	; (14ec <i2c_m_async_init+0x64>)
    14c0:	2102      	movs	r1, #2
    14c2:	4620      	mov	r0, r4
    14c4:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    14c6:	4a0a      	ldr	r2, [pc, #40]	; (14f0 <i2c_m_async_init+0x68>)
    14c8:	2100      	movs	r1, #0
    14ca:	4620      	mov	r0, r4
    14cc:	47b0      	blx	r6
	return ERR_NONE;
    14ce:	e7eb      	b.n	14a8 <i2c_m_async_init+0x20>
    14d0:	00002f08 	.word	0x00002f08
    14d4:	00000ba5 	.word	0x00000ba5
    14d8:	00001179 	.word	0x00001179
    14dc:	00001459 	.word	0x00001459
    14e0:	00001429 	.word	0x00001429
    14e4:	000013f1 	.word	0x000013f1
    14e8:	00001331 	.word	0x00001331
    14ec:	00001403 	.word	0x00001403
    14f0:	00001415 	.word	0x00001415

000014f4 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    14f4:	b570      	push	{r4, r5, r6, lr}
	int32_t rc;

	ASSERT(i2c);
    14f6:	4604      	mov	r4, r0
    14f8:	22b9      	movs	r2, #185	; 0xb9
    14fa:	490d      	ldr	r1, [pc, #52]	; (1530 <i2c_m_async_enable+0x3c>)
    14fc:	3000      	adds	r0, #0
    14fe:	bf18      	it	ne
    1500:	2001      	movne	r0, #1
    1502:	4b0c      	ldr	r3, [pc, #48]	; (1534 <i2c_m_async_enable+0x40>)
    1504:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    1506:	4620      	mov	r0, r4
    1508:	4b0b      	ldr	r3, [pc, #44]	; (1538 <i2c_m_async_enable+0x44>)
    150a:	4798      	blx	r3
	if (rc == ERR_NONE) {
    150c:	4605      	mov	r5, r0
    150e:	b108      	cbz	r0, 1514 <i2c_m_async_enable+0x20>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
	}
	return rc;
}
    1510:	4628      	mov	r0, r5
    1512:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    1514:	2201      	movs	r2, #1
    1516:	4611      	mov	r1, r2
    1518:	4620      	mov	r0, r4
    151a:	4e08      	ldr	r6, [pc, #32]	; (153c <i2c_m_async_enable+0x48>)
    151c:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    151e:	2201      	movs	r2, #1
    1520:	2102      	movs	r1, #2
    1522:	4620      	mov	r0, r4
    1524:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    1526:	2201      	movs	r2, #1
    1528:	2100      	movs	r1, #0
    152a:	4620      	mov	r0, r4
    152c:	47b0      	blx	r6
	return rc;
    152e:	e7ef      	b.n	1510 <i2c_m_async_enable+0x1c>
    1530:	00002f08 	.word	0x00002f08
    1534:	00000ba5 	.word	0x00000ba5
    1538:	00001101 	.word	0x00001101
    153c:	0000134b 	.word	0x0000134b

00001540 <i2c_m_async_set_slaveaddr>:
/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1540:	f3c1 0109 	ubfx	r1, r1, #0, #10
    1544:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    1548:	430a      	orrs	r2, r1
    154a:	8782      	strh	r2, [r0, #60]	; 0x3c
}
    154c:	4610      	mov	r0, r2
    154e:	4770      	bx	lr

00001550 <i2c_m_async_register_callback>:
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
	switch (type) {
    1550:	2901      	cmp	r1, #1
    1552:	d008      	beq.n	1566 <i2c_m_async_register_callback+0x16>
    1554:	b121      	cbz	r1, 1560 <i2c_m_async_register_callback+0x10>
    1556:	2902      	cmp	r1, #2
    1558:	d008      	beq.n	156c <i2c_m_async_register_callback+0x1c>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		return ERR_INVALID_ARG;
    155a:	f06f 000c 	mvn.w	r0, #12
	}
	return I2C_OK;
}
    155e:	4770      	bx	lr
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    1560:	6302      	str	r2, [r0, #48]	; 0x30
	return I2C_OK;
    1562:	2000      	movs	r0, #0
		break;
    1564:	4770      	bx	lr
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    1566:	6342      	str	r2, [r0, #52]	; 0x34
	return I2C_OK;
    1568:	2000      	movs	r0, #0
		break;
    156a:	4770      	bx	lr
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    156c:	6382      	str	r2, [r0, #56]	; 0x38
	return I2C_OK;
    156e:	2000      	movs	r0, #0
		break;
    1570:	4770      	bx	lr
	...

00001574 <i2c_m_async_cmd_write>:

/**
 * \brief Async version of i2c write command
 */
int32_t i2c_m_async_cmd_write(struct i2c_m_async_desc *const i2c, uint8_t reg, uint8_t value)
{
    1574:	b510      	push	{r4, lr}
    1576:	b086      	sub	sp, #24
    1578:	4604      	mov	r4, r0
    157a:	f88d 1007 	strb.w	r1, [sp, #7]
    157e:	f88d 2006 	strb.w	r2, [sp, #6]
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
    1582:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1584:	f8ad 300c 	strh.w	r3, [sp, #12]
	msg.len    = 1;
    1588:	2301      	movs	r3, #1
    158a:	9304      	str	r3, [sp, #16]
	msg.flags  = 0;
    158c:	2300      	movs	r3, #0
    158e:	f8ad 300e 	strh.w	r3, [sp, #14]
	msg.buffer = &reg;
    1592:	f10d 0207 	add.w	r2, sp, #7
    1596:	9205      	str	r2, [sp, #20]

	i2c->device.cb.tx_complete = NULL;
    1598:	6183      	str	r3, [r0, #24]

	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    159a:	a903      	add	r1, sp, #12
    159c:	4b0d      	ldr	r3, [pc, #52]	; (15d4 <i2c_m_async_cmd_write+0x60>)
    159e:	4798      	blx	r3

	if (ret != 0) {
    15a0:	b9a0      	cbnz	r0, 15cc <i2c_m_async_cmd_write+0x58>
		i2c->device.cb.tx_complete = i2c_tx_complete;
		return ret;
	}

	/* we polling busy flag wait for send finish here */
	while (i2c->device.service.msg.flags & I2C_M_BUSY) {
    15a2:	8863      	ldrh	r3, [r4, #2]
    15a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    15a8:	d1fb      	bne.n	15a2 <i2c_m_async_cmd_write+0x2e>
		;
	}

	i2c->device.cb.tx_complete = i2c_tx_complete;
    15aa:	4b0b      	ldr	r3, [pc, #44]	; (15d8 <i2c_m_async_cmd_write+0x64>)
    15ac:	61a3      	str	r3, [r4, #24]

	msg.flags  = I2C_M_STOP;
    15ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    15b2:	f8ad 300e 	strh.w	r3, [sp, #14]
	msg.buffer = &value;
    15b6:	f10d 0306 	add.w	r3, sp, #6
    15ba:	9305      	str	r3, [sp, #20]

	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    15bc:	a903      	add	r1, sp, #12
    15be:	4620      	mov	r0, r4
    15c0:	4b04      	ldr	r3, [pc, #16]	; (15d4 <i2c_m_async_cmd_write+0x60>)
    15c2:	4798      	blx	r3
    15c4:	4603      	mov	r3, r0
		/* error occurred */
		return ret;
	}

	return I2C_OK;
}
    15c6:	4618      	mov	r0, r3
    15c8:	b006      	add	sp, #24
    15ca:	bd10      	pop	{r4, pc}
    15cc:	4603      	mov	r3, r0
		i2c->device.cb.tx_complete = i2c_tx_complete;
    15ce:	4a02      	ldr	r2, [pc, #8]	; (15d8 <i2c_m_async_cmd_write+0x64>)
    15d0:	61a2      	str	r2, [r4, #24]
		return ret;
    15d2:	e7f8      	b.n	15c6 <i2c_m_async_cmd_write+0x52>
    15d4:	00001201 	.word	0x00001201
    15d8:	000013f1 	.word	0x000013f1

000015dc <i2c_m_async_cmd_read>:

/**
 * \brief Async version of i2c read command
 */
int32_t i2c_m_async_cmd_read(struct i2c_m_async_desc *const i2c, uint8_t reg, uint8_t *value)
{
    15dc:	b530      	push	{r4, r5, lr}
    15de:	b087      	sub	sp, #28
    15e0:	4604      	mov	r4, r0
    15e2:	4615      	mov	r5, r2
    15e4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
    15e8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    15ea:	f8ad 300c 	strh.w	r3, [sp, #12]
	msg.len    = 1;
    15ee:	2301      	movs	r3, #1
    15f0:	9304      	str	r3, [sp, #16]
	msg.flags  = 0;
    15f2:	2300      	movs	r3, #0
    15f4:	f8ad 300e 	strh.w	r3, [sp, #14]
	msg.buffer = &reg;
    15f8:	f10d 0207 	add.w	r2, sp, #7
    15fc:	9205      	str	r2, [sp, #20]

	i2c->device.cb.tx_complete = NULL;
    15fe:	6183      	str	r3, [r0, #24]

	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1600:	a903      	add	r1, sp, #12
    1602:	4b0d      	ldr	r3, [pc, #52]	; (1638 <i2c_m_async_cmd_read+0x5c>)
    1604:	4798      	blx	r3

	if (ret != 0) {
    1606:	b990      	cbnz	r0, 162e <i2c_m_async_cmd_read+0x52>
		i2c->device.cb.tx_complete = i2c_tx_complete;
		return ret;
	}

	/* we polling busy flag wait for send finish here */
	while (i2c->device.service.msg.flags & I2C_M_BUSY) {
    1608:	8863      	ldrh	r3, [r4, #2]
    160a:	f413 7f80 	tst.w	r3, #256	; 0x100
    160e:	d1fb      	bne.n	1608 <i2c_m_async_cmd_read+0x2c>
		;
	}

	/* re-register to enable notify user callback */
	i2c->device.cb.tx_complete = i2c_tx_complete;
    1610:	4b0a      	ldr	r3, [pc, #40]	; (163c <i2c_m_async_cmd_read+0x60>)
    1612:	61a3      	str	r3, [r4, #24]

	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1614:	f248 0301 	movw	r3, #32769	; 0x8001
    1618:	f8ad 300e 	strh.w	r3, [sp, #14]
	msg.buffer = value;
    161c:	9505      	str	r5, [sp, #20]

	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    161e:	a903      	add	r1, sp, #12
    1620:	4620      	mov	r0, r4
    1622:	4b05      	ldr	r3, [pc, #20]	; (1638 <i2c_m_async_cmd_read+0x5c>)
    1624:	4798      	blx	r3
    1626:	4603      	mov	r3, r0
		/* error occurred */
		return ret;
	}

	return I2C_OK;
}
    1628:	4618      	mov	r0, r3
    162a:	b007      	add	sp, #28
    162c:	bd30      	pop	{r4, r5, pc}
    162e:	4603      	mov	r3, r0
		i2c->device.cb.tx_complete = i2c_tx_complete;
    1630:	4a02      	ldr	r2, [pc, #8]	; (163c <i2c_m_async_cmd_read+0x60>)
    1632:	61a2      	str	r2, [r4, #24]
		return ret;
    1634:	e7f8      	b.n	1628 <i2c_m_async_cmd_read+0x4c>
    1636:	bf00      	nop
    1638:	00001201 	.word	0x00001201
    163c:	000013f1 	.word	0x000013f1

00001640 <i2c_m_async_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    1640:	3028      	adds	r0, #40	; 0x28
    1642:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    1644:	2000      	movs	r0, #0
    1646:	4770      	bx	lr

00001648 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    164c:	4d06      	ldr	r5, [pc, #24]	; (1668 <stdio_io_init+0x20>)
    164e:	682b      	ldr	r3, [r5, #0]
    1650:	2100      	movs	r1, #0
    1652:	6898      	ldr	r0, [r3, #8]
    1654:	4c05      	ldr	r4, [pc, #20]	; (166c <stdio_io_init+0x24>)
    1656:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1658:	682b      	ldr	r3, [r5, #0]
    165a:	2100      	movs	r1, #0
    165c:	6858      	ldr	r0, [r3, #4]
    165e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <stdio_io_init+0x28>)
    1662:	601e      	str	r6, [r3, #0]
    1664:	bd70      	pop	{r4, r5, r6, pc}
    1666:	bf00      	nop
    1668:	20000004 	.word	0x20000004
    166c:	00001c5d 	.word	0x00001c5d
    1670:	200008d0 	.word	0x200008d0

00001674 <__aeabi_frsub>:
    1674:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    1678:	e002      	b.n	1680 <__addsf3>
    167a:	bf00      	nop

0000167c <__aeabi_fsub>:
    167c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00001680 <__addsf3>:
    1680:	0042      	lsls	r2, r0, #1
    1682:	bf1f      	itttt	ne
    1684:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    1688:	ea92 0f03 	teqne	r2, r3
    168c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    1690:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1694:	d06a      	beq.n	176c <__addsf3+0xec>
    1696:	ea4f 6212 	mov.w	r2, r2, lsr #24
    169a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    169e:	bfc1      	itttt	gt
    16a0:	18d2      	addgt	r2, r2, r3
    16a2:	4041      	eorgt	r1, r0
    16a4:	4048      	eorgt	r0, r1
    16a6:	4041      	eorgt	r1, r0
    16a8:	bfb8      	it	lt
    16aa:	425b      	neglt	r3, r3
    16ac:	2b19      	cmp	r3, #25
    16ae:	bf88      	it	hi
    16b0:	4770      	bxhi	lr
    16b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    16b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    16ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16be:	bf18      	it	ne
    16c0:	4240      	negne	r0, r0
    16c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    16c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    16ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    16ce:	bf18      	it	ne
    16d0:	4249      	negne	r1, r1
    16d2:	ea92 0f03 	teq	r2, r3
    16d6:	d03f      	beq.n	1758 <__addsf3+0xd8>
    16d8:	f1a2 0201 	sub.w	r2, r2, #1
    16dc:	fa41 fc03 	asr.w	ip, r1, r3
    16e0:	eb10 000c 	adds.w	r0, r0, ip
    16e4:	f1c3 0320 	rsb	r3, r3, #32
    16e8:	fa01 f103 	lsl.w	r1, r1, r3
    16ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    16f0:	d502      	bpl.n	16f8 <__addsf3+0x78>
    16f2:	4249      	negs	r1, r1
    16f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    16f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    16fc:	d313      	bcc.n	1726 <__addsf3+0xa6>
    16fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    1702:	d306      	bcc.n	1712 <__addsf3+0x92>
    1704:	0840      	lsrs	r0, r0, #1
    1706:	ea4f 0131 	mov.w	r1, r1, rrx
    170a:	f102 0201 	add.w	r2, r2, #1
    170e:	2afe      	cmp	r2, #254	; 0xfe
    1710:	d251      	bcs.n	17b6 <__addsf3+0x136>
    1712:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    1716:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    171a:	bf08      	it	eq
    171c:	f020 0001 	biceq.w	r0, r0, #1
    1720:	ea40 0003 	orr.w	r0, r0, r3
    1724:	4770      	bx	lr
    1726:	0049      	lsls	r1, r1, #1
    1728:	eb40 0000 	adc.w	r0, r0, r0
    172c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    1730:	f1a2 0201 	sub.w	r2, r2, #1
    1734:	d1ed      	bne.n	1712 <__addsf3+0x92>
    1736:	fab0 fc80 	clz	ip, r0
    173a:	f1ac 0c08 	sub.w	ip, ip, #8
    173e:	ebb2 020c 	subs.w	r2, r2, ip
    1742:	fa00 f00c 	lsl.w	r0, r0, ip
    1746:	bfaa      	itet	ge
    1748:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    174c:	4252      	neglt	r2, r2
    174e:	4318      	orrge	r0, r3
    1750:	bfbc      	itt	lt
    1752:	40d0      	lsrlt	r0, r2
    1754:	4318      	orrlt	r0, r3
    1756:	4770      	bx	lr
    1758:	f092 0f00 	teq	r2, #0
    175c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    1760:	bf06      	itte	eq
    1762:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    1766:	3201      	addeq	r2, #1
    1768:	3b01      	subne	r3, #1
    176a:	e7b5      	b.n	16d8 <__addsf3+0x58>
    176c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1770:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1774:	bf18      	it	ne
    1776:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    177a:	d021      	beq.n	17c0 <__addsf3+0x140>
    177c:	ea92 0f03 	teq	r2, r3
    1780:	d004      	beq.n	178c <__addsf3+0x10c>
    1782:	f092 0f00 	teq	r2, #0
    1786:	bf08      	it	eq
    1788:	4608      	moveq	r0, r1
    178a:	4770      	bx	lr
    178c:	ea90 0f01 	teq	r0, r1
    1790:	bf1c      	itt	ne
    1792:	2000      	movne	r0, #0
    1794:	4770      	bxne	lr
    1796:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    179a:	d104      	bne.n	17a6 <__addsf3+0x126>
    179c:	0040      	lsls	r0, r0, #1
    179e:	bf28      	it	cs
    17a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    17a4:	4770      	bx	lr
    17a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    17aa:	bf3c      	itt	cc
    17ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    17b0:	4770      	bxcc	lr
    17b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    17b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    17ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    17be:	4770      	bx	lr
    17c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    17c4:	bf16      	itet	ne
    17c6:	4608      	movne	r0, r1
    17c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    17cc:	4601      	movne	r1, r0
    17ce:	0242      	lsls	r2, r0, #9
    17d0:	bf06      	itte	eq
    17d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    17d6:	ea90 0f01 	teqeq	r0, r1
    17da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    17de:	4770      	bx	lr

000017e0 <__aeabi_ui2f>:
    17e0:	f04f 0300 	mov.w	r3, #0
    17e4:	e004      	b.n	17f0 <__aeabi_i2f+0x8>
    17e6:	bf00      	nop

000017e8 <__aeabi_i2f>:
    17e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    17ec:	bf48      	it	mi
    17ee:	4240      	negmi	r0, r0
    17f0:	ea5f 0c00 	movs.w	ip, r0
    17f4:	bf08      	it	eq
    17f6:	4770      	bxeq	lr
    17f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    17fc:	4601      	mov	r1, r0
    17fe:	f04f 0000 	mov.w	r0, #0
    1802:	e01c      	b.n	183e <__aeabi_l2f+0x2a>

00001804 <__aeabi_ul2f>:
    1804:	ea50 0201 	orrs.w	r2, r0, r1
    1808:	bf08      	it	eq
    180a:	4770      	bxeq	lr
    180c:	f04f 0300 	mov.w	r3, #0
    1810:	e00a      	b.n	1828 <__aeabi_l2f+0x14>
    1812:	bf00      	nop

00001814 <__aeabi_l2f>:
    1814:	ea50 0201 	orrs.w	r2, r0, r1
    1818:	bf08      	it	eq
    181a:	4770      	bxeq	lr
    181c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    1820:	d502      	bpl.n	1828 <__aeabi_l2f+0x14>
    1822:	4240      	negs	r0, r0
    1824:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1828:	ea5f 0c01 	movs.w	ip, r1
    182c:	bf02      	ittt	eq
    182e:	4684      	moveq	ip, r0
    1830:	4601      	moveq	r1, r0
    1832:	2000      	moveq	r0, #0
    1834:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    1838:	bf08      	it	eq
    183a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    183e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    1842:	fabc f28c 	clz	r2, ip
    1846:	3a08      	subs	r2, #8
    1848:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    184c:	db10      	blt.n	1870 <__aeabi_l2f+0x5c>
    184e:	fa01 fc02 	lsl.w	ip, r1, r2
    1852:	4463      	add	r3, ip
    1854:	fa00 fc02 	lsl.w	ip, r0, r2
    1858:	f1c2 0220 	rsb	r2, r2, #32
    185c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1860:	fa20 f202 	lsr.w	r2, r0, r2
    1864:	eb43 0002 	adc.w	r0, r3, r2
    1868:	bf08      	it	eq
    186a:	f020 0001 	biceq.w	r0, r0, #1
    186e:	4770      	bx	lr
    1870:	f102 0220 	add.w	r2, r2, #32
    1874:	fa01 fc02 	lsl.w	ip, r1, r2
    1878:	f1c2 0220 	rsb	r2, r2, #32
    187c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    1880:	fa21 f202 	lsr.w	r2, r1, r2
    1884:	eb43 0002 	adc.w	r0, r3, r2
    1888:	bf08      	it	eq
    188a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    188e:	4770      	bx	lr

00001890 <__aeabi_fmul>:
    1890:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1894:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1898:	bf1e      	ittt	ne
    189a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    189e:	ea92 0f0c 	teqne	r2, ip
    18a2:	ea93 0f0c 	teqne	r3, ip
    18a6:	d06f      	beq.n	1988 <__aeabi_fmul+0xf8>
    18a8:	441a      	add	r2, r3
    18aa:	ea80 0c01 	eor.w	ip, r0, r1
    18ae:	0240      	lsls	r0, r0, #9
    18b0:	bf18      	it	ne
    18b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    18b6:	d01e      	beq.n	18f6 <__aeabi_fmul+0x66>
    18b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    18bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    18c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    18c4:	fba0 3101 	umull	r3, r1, r0, r1
    18c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    18cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    18d0:	bf3e      	ittt	cc
    18d2:	0049      	lslcc	r1, r1, #1
    18d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    18d8:	005b      	lslcc	r3, r3, #1
    18da:	ea40 0001 	orr.w	r0, r0, r1
    18de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    18e2:	2afd      	cmp	r2, #253	; 0xfd
    18e4:	d81d      	bhi.n	1922 <__aeabi_fmul+0x92>
    18e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    18ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    18ee:	bf08      	it	eq
    18f0:	f020 0001 	biceq.w	r0, r0, #1
    18f4:	4770      	bx	lr
    18f6:	f090 0f00 	teq	r0, #0
    18fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    18fe:	bf08      	it	eq
    1900:	0249      	lsleq	r1, r1, #9
    1902:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1906:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    190a:	3a7f      	subs	r2, #127	; 0x7f
    190c:	bfc2      	ittt	gt
    190e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1912:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1916:	4770      	bxgt	lr
    1918:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    191c:	f04f 0300 	mov.w	r3, #0
    1920:	3a01      	subs	r2, #1
    1922:	dc5d      	bgt.n	19e0 <__aeabi_fmul+0x150>
    1924:	f112 0f19 	cmn.w	r2, #25
    1928:	bfdc      	itt	le
    192a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    192e:	4770      	bxle	lr
    1930:	f1c2 0200 	rsb	r2, r2, #0
    1934:	0041      	lsls	r1, r0, #1
    1936:	fa21 f102 	lsr.w	r1, r1, r2
    193a:	f1c2 0220 	rsb	r2, r2, #32
    193e:	fa00 fc02 	lsl.w	ip, r0, r2
    1942:	ea5f 0031 	movs.w	r0, r1, rrx
    1946:	f140 0000 	adc.w	r0, r0, #0
    194a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    194e:	bf08      	it	eq
    1950:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1954:	4770      	bx	lr
    1956:	f092 0f00 	teq	r2, #0
    195a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    195e:	bf02      	ittt	eq
    1960:	0040      	lsleq	r0, r0, #1
    1962:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1966:	3a01      	subeq	r2, #1
    1968:	d0f9      	beq.n	195e <__aeabi_fmul+0xce>
    196a:	ea40 000c 	orr.w	r0, r0, ip
    196e:	f093 0f00 	teq	r3, #0
    1972:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1976:	bf02      	ittt	eq
    1978:	0049      	lsleq	r1, r1, #1
    197a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    197e:	3b01      	subeq	r3, #1
    1980:	d0f9      	beq.n	1976 <__aeabi_fmul+0xe6>
    1982:	ea41 010c 	orr.w	r1, r1, ip
    1986:	e78f      	b.n	18a8 <__aeabi_fmul+0x18>
    1988:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    198c:	ea92 0f0c 	teq	r2, ip
    1990:	bf18      	it	ne
    1992:	ea93 0f0c 	teqne	r3, ip
    1996:	d00a      	beq.n	19ae <__aeabi_fmul+0x11e>
    1998:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    199c:	bf18      	it	ne
    199e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    19a2:	d1d8      	bne.n	1956 <__aeabi_fmul+0xc6>
    19a4:	ea80 0001 	eor.w	r0, r0, r1
    19a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    19ac:	4770      	bx	lr
    19ae:	f090 0f00 	teq	r0, #0
    19b2:	bf17      	itett	ne
    19b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    19b8:	4608      	moveq	r0, r1
    19ba:	f091 0f00 	teqne	r1, #0
    19be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    19c2:	d014      	beq.n	19ee <__aeabi_fmul+0x15e>
    19c4:	ea92 0f0c 	teq	r2, ip
    19c8:	d101      	bne.n	19ce <__aeabi_fmul+0x13e>
    19ca:	0242      	lsls	r2, r0, #9
    19cc:	d10f      	bne.n	19ee <__aeabi_fmul+0x15e>
    19ce:	ea93 0f0c 	teq	r3, ip
    19d2:	d103      	bne.n	19dc <__aeabi_fmul+0x14c>
    19d4:	024b      	lsls	r3, r1, #9
    19d6:	bf18      	it	ne
    19d8:	4608      	movne	r0, r1
    19da:	d108      	bne.n	19ee <__aeabi_fmul+0x15e>
    19dc:	ea80 0001 	eor.w	r0, r0, r1
    19e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    19e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    19e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    19ec:	4770      	bx	lr
    19ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    19f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    19f6:	4770      	bx	lr

000019f8 <__aeabi_fdiv>:
    19f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    19fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1a00:	bf1e      	ittt	ne
    1a02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    1a06:	ea92 0f0c 	teqne	r2, ip
    1a0a:	ea93 0f0c 	teqne	r3, ip
    1a0e:	d069      	beq.n	1ae4 <__aeabi_fdiv+0xec>
    1a10:	eba2 0203 	sub.w	r2, r2, r3
    1a14:	ea80 0c01 	eor.w	ip, r0, r1
    1a18:	0249      	lsls	r1, r1, #9
    1a1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    1a1e:	d037      	beq.n	1a90 <__aeabi_fdiv+0x98>
    1a20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1a24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    1a28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    1a2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    1a30:	428b      	cmp	r3, r1
    1a32:	bf38      	it	cc
    1a34:	005b      	lslcc	r3, r3, #1
    1a36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    1a3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    1a3e:	428b      	cmp	r3, r1
    1a40:	bf24      	itt	cs
    1a42:	1a5b      	subcs	r3, r3, r1
    1a44:	ea40 000c 	orrcs.w	r0, r0, ip
    1a48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    1a4c:	bf24      	itt	cs
    1a4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    1a52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1a56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    1a5a:	bf24      	itt	cs
    1a5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    1a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1a64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    1a68:	bf24      	itt	cs
    1a6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    1a6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1a72:	011b      	lsls	r3, r3, #4
    1a74:	bf18      	it	ne
    1a76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    1a7a:	d1e0      	bne.n	1a3e <__aeabi_fdiv+0x46>
    1a7c:	2afd      	cmp	r2, #253	; 0xfd
    1a7e:	f63f af50 	bhi.w	1922 <__aeabi_fmul+0x92>
    1a82:	428b      	cmp	r3, r1
    1a84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1a88:	bf08      	it	eq
    1a8a:	f020 0001 	biceq.w	r0, r0, #1
    1a8e:	4770      	bx	lr
    1a90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    1a94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1a98:	327f      	adds	r2, #127	; 0x7f
    1a9a:	bfc2      	ittt	gt
    1a9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1aa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1aa4:	4770      	bxgt	lr
    1aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1aaa:	f04f 0300 	mov.w	r3, #0
    1aae:	3a01      	subs	r2, #1
    1ab0:	e737      	b.n	1922 <__aeabi_fmul+0x92>
    1ab2:	f092 0f00 	teq	r2, #0
    1ab6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1aba:	bf02      	ittt	eq
    1abc:	0040      	lsleq	r0, r0, #1
    1abe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1ac2:	3a01      	subeq	r2, #1
    1ac4:	d0f9      	beq.n	1aba <__aeabi_fdiv+0xc2>
    1ac6:	ea40 000c 	orr.w	r0, r0, ip
    1aca:	f093 0f00 	teq	r3, #0
    1ace:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1ad2:	bf02      	ittt	eq
    1ad4:	0049      	lsleq	r1, r1, #1
    1ad6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1ada:	3b01      	subeq	r3, #1
    1adc:	d0f9      	beq.n	1ad2 <__aeabi_fdiv+0xda>
    1ade:	ea41 010c 	orr.w	r1, r1, ip
    1ae2:	e795      	b.n	1a10 <__aeabi_fdiv+0x18>
    1ae4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1ae8:	ea92 0f0c 	teq	r2, ip
    1aec:	d108      	bne.n	1b00 <__aeabi_fdiv+0x108>
    1aee:	0242      	lsls	r2, r0, #9
    1af0:	f47f af7d 	bne.w	19ee <__aeabi_fmul+0x15e>
    1af4:	ea93 0f0c 	teq	r3, ip
    1af8:	f47f af70 	bne.w	19dc <__aeabi_fmul+0x14c>
    1afc:	4608      	mov	r0, r1
    1afe:	e776      	b.n	19ee <__aeabi_fmul+0x15e>
    1b00:	ea93 0f0c 	teq	r3, ip
    1b04:	d104      	bne.n	1b10 <__aeabi_fdiv+0x118>
    1b06:	024b      	lsls	r3, r1, #9
    1b08:	f43f af4c 	beq.w	19a4 <__aeabi_fmul+0x114>
    1b0c:	4608      	mov	r0, r1
    1b0e:	e76e      	b.n	19ee <__aeabi_fmul+0x15e>
    1b10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1b14:	bf18      	it	ne
    1b16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    1b1a:	d1ca      	bne.n	1ab2 <__aeabi_fdiv+0xba>
    1b1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    1b20:	f47f af5c 	bne.w	19dc <__aeabi_fmul+0x14c>
    1b24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    1b28:	f47f af3c 	bne.w	19a4 <__aeabi_fmul+0x114>
    1b2c:	e75f      	b.n	19ee <__aeabi_fmul+0x15e>
    1b2e:	bf00      	nop

00001b30 <__aeabi_f2uiz>:
    1b30:	0042      	lsls	r2, r0, #1
    1b32:	d20e      	bcs.n	1b52 <__aeabi_f2uiz+0x22>
    1b34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    1b38:	d30b      	bcc.n	1b52 <__aeabi_f2uiz+0x22>
    1b3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    1b3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    1b42:	d409      	bmi.n	1b58 <__aeabi_f2uiz+0x28>
    1b44:	ea4f 2300 	mov.w	r3, r0, lsl #8
    1b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1b4c:	fa23 f002 	lsr.w	r0, r3, r2
    1b50:	4770      	bx	lr
    1b52:	f04f 0000 	mov.w	r0, #0
    1b56:	4770      	bx	lr
    1b58:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1b5c:	d101      	bne.n	1b62 <__aeabi_f2uiz+0x32>
    1b5e:	0242      	lsls	r2, r0, #9
    1b60:	d102      	bne.n	1b68 <__aeabi_f2uiz+0x38>
    1b62:	f04f 30ff 	mov.w	r0, #4294967295
    1b66:	4770      	bx	lr
    1b68:	f04f 0000 	mov.w	r0, #0
    1b6c:	4770      	bx	lr
    1b6e:	bf00      	nop

00001b70 <__libc_init_array>:
    1b70:	b570      	push	{r4, r5, r6, lr}
    1b72:	4e0f      	ldr	r6, [pc, #60]	; (1bb0 <__libc_init_array+0x40>)
    1b74:	4d0f      	ldr	r5, [pc, #60]	; (1bb4 <__libc_init_array+0x44>)
    1b76:	1b76      	subs	r6, r6, r5
    1b78:	10b6      	asrs	r6, r6, #2
    1b7a:	bf18      	it	ne
    1b7c:	2400      	movne	r4, #0
    1b7e:	d005      	beq.n	1b8c <__libc_init_array+0x1c>
    1b80:	3401      	adds	r4, #1
    1b82:	f855 3b04 	ldr.w	r3, [r5], #4
    1b86:	4798      	blx	r3
    1b88:	42a6      	cmp	r6, r4
    1b8a:	d1f9      	bne.n	1b80 <__libc_init_array+0x10>
    1b8c:	4e0a      	ldr	r6, [pc, #40]	; (1bb8 <__libc_init_array+0x48>)
    1b8e:	4d0b      	ldr	r5, [pc, #44]	; (1bbc <__libc_init_array+0x4c>)
    1b90:	1b76      	subs	r6, r6, r5
    1b92:	f001 f9df 	bl	2f54 <_init>
    1b96:	10b6      	asrs	r6, r6, #2
    1b98:	bf18      	it	ne
    1b9a:	2400      	movne	r4, #0
    1b9c:	d006      	beq.n	1bac <__libc_init_array+0x3c>
    1b9e:	3401      	adds	r4, #1
    1ba0:	f855 3b04 	ldr.w	r3, [r5], #4
    1ba4:	4798      	blx	r3
    1ba6:	42a6      	cmp	r6, r4
    1ba8:	d1f9      	bne.n	1b9e <__libc_init_array+0x2e>
    1baa:	bd70      	pop	{r4, r5, r6, pc}
    1bac:	bd70      	pop	{r4, r5, r6, pc}
    1bae:	bf00      	nop
    1bb0:	00002f60 	.word	0x00002f60
    1bb4:	00002f60 	.word	0x00002f60
    1bb8:	00002f6c 	.word	0x00002f6c
    1bbc:	00002f60 	.word	0x00002f60

00001bc0 <memset>:
    1bc0:	b470      	push	{r4, r5, r6}
    1bc2:	0786      	lsls	r6, r0, #30
    1bc4:	d046      	beq.n	1c54 <memset+0x94>
    1bc6:	1e54      	subs	r4, r2, #1
    1bc8:	2a00      	cmp	r2, #0
    1bca:	d041      	beq.n	1c50 <memset+0x90>
    1bcc:	b2ca      	uxtb	r2, r1
    1bce:	4603      	mov	r3, r0
    1bd0:	e002      	b.n	1bd8 <memset+0x18>
    1bd2:	f114 34ff 	adds.w	r4, r4, #4294967295
    1bd6:	d33b      	bcc.n	1c50 <memset+0x90>
    1bd8:	f803 2b01 	strb.w	r2, [r3], #1
    1bdc:	079d      	lsls	r5, r3, #30
    1bde:	d1f8      	bne.n	1bd2 <memset+0x12>
    1be0:	2c03      	cmp	r4, #3
    1be2:	d92e      	bls.n	1c42 <memset+0x82>
    1be4:	b2cd      	uxtb	r5, r1
    1be6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    1bea:	2c0f      	cmp	r4, #15
    1bec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    1bf0:	d919      	bls.n	1c26 <memset+0x66>
    1bf2:	f103 0210 	add.w	r2, r3, #16
    1bf6:	4626      	mov	r6, r4
    1bf8:	3e10      	subs	r6, #16
    1bfa:	2e0f      	cmp	r6, #15
    1bfc:	f842 5c10 	str.w	r5, [r2, #-16]
    1c00:	f842 5c0c 	str.w	r5, [r2, #-12]
    1c04:	f842 5c08 	str.w	r5, [r2, #-8]
    1c08:	f842 5c04 	str.w	r5, [r2, #-4]
    1c0c:	f102 0210 	add.w	r2, r2, #16
    1c10:	d8f2      	bhi.n	1bf8 <memset+0x38>
    1c12:	f1a4 0210 	sub.w	r2, r4, #16
    1c16:	f022 020f 	bic.w	r2, r2, #15
    1c1a:	f004 040f 	and.w	r4, r4, #15
    1c1e:	3210      	adds	r2, #16
    1c20:	2c03      	cmp	r4, #3
    1c22:	4413      	add	r3, r2
    1c24:	d90d      	bls.n	1c42 <memset+0x82>
    1c26:	461e      	mov	r6, r3
    1c28:	4622      	mov	r2, r4
    1c2a:	3a04      	subs	r2, #4
    1c2c:	2a03      	cmp	r2, #3
    1c2e:	f846 5b04 	str.w	r5, [r6], #4
    1c32:	d8fa      	bhi.n	1c2a <memset+0x6a>
    1c34:	1f22      	subs	r2, r4, #4
    1c36:	f022 0203 	bic.w	r2, r2, #3
    1c3a:	3204      	adds	r2, #4
    1c3c:	4413      	add	r3, r2
    1c3e:	f004 0403 	and.w	r4, r4, #3
    1c42:	b12c      	cbz	r4, 1c50 <memset+0x90>
    1c44:	b2c9      	uxtb	r1, r1
    1c46:	441c      	add	r4, r3
    1c48:	f803 1b01 	strb.w	r1, [r3], #1
    1c4c:	429c      	cmp	r4, r3
    1c4e:	d1fb      	bne.n	1c48 <memset+0x88>
    1c50:	bc70      	pop	{r4, r5, r6}
    1c52:	4770      	bx	lr
    1c54:	4614      	mov	r4, r2
    1c56:	4603      	mov	r3, r0
    1c58:	e7c2      	b.n	1be0 <memset+0x20>
    1c5a:	bf00      	nop

00001c5c <setbuf>:
    1c5c:	2900      	cmp	r1, #0
    1c5e:	bf0c      	ite	eq
    1c60:	2202      	moveq	r2, #2
    1c62:	2200      	movne	r2, #0
    1c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1c68:	f000 b800 	b.w	1c6c <setvbuf>

00001c6c <setvbuf>:
    1c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c70:	4c61      	ldr	r4, [pc, #388]	; (1df8 <setvbuf+0x18c>)
    1c72:	6825      	ldr	r5, [r4, #0]
    1c74:	b083      	sub	sp, #12
    1c76:	4604      	mov	r4, r0
    1c78:	460f      	mov	r7, r1
    1c7a:	4690      	mov	r8, r2
    1c7c:	461e      	mov	r6, r3
    1c7e:	b115      	cbz	r5, 1c86 <setvbuf+0x1a>
    1c80:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1c82:	2b00      	cmp	r3, #0
    1c84:	d064      	beq.n	1d50 <setvbuf+0xe4>
    1c86:	f1b8 0f02 	cmp.w	r8, #2
    1c8a:	d006      	beq.n	1c9a <setvbuf+0x2e>
    1c8c:	f1b8 0f01 	cmp.w	r8, #1
    1c90:	f200 809f 	bhi.w	1dd2 <setvbuf+0x166>
    1c94:	2e00      	cmp	r6, #0
    1c96:	f2c0 809c 	blt.w	1dd2 <setvbuf+0x166>
    1c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1c9c:	07d8      	lsls	r0, r3, #31
    1c9e:	d534      	bpl.n	1d0a <setvbuf+0x9e>
    1ca0:	4621      	mov	r1, r4
    1ca2:	4628      	mov	r0, r5
    1ca4:	f000 fa0c 	bl	20c0 <_fflush_r>
    1ca8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1caa:	b141      	cbz	r1, 1cbe <setvbuf+0x52>
    1cac:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1cb0:	4299      	cmp	r1, r3
    1cb2:	d002      	beq.n	1cba <setvbuf+0x4e>
    1cb4:	4628      	mov	r0, r5
    1cb6:	f000 fafd 	bl	22b4 <_free_r>
    1cba:	2300      	movs	r3, #0
    1cbc:	6323      	str	r3, [r4, #48]	; 0x30
    1cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1cc2:	2200      	movs	r2, #0
    1cc4:	61a2      	str	r2, [r4, #24]
    1cc6:	6062      	str	r2, [r4, #4]
    1cc8:	061a      	lsls	r2, r3, #24
    1cca:	d43a      	bmi.n	1d42 <setvbuf+0xd6>
    1ccc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1cd0:	f023 0303 	bic.w	r3, r3, #3
    1cd4:	f1b8 0f02 	cmp.w	r8, #2
    1cd8:	81a3      	strh	r3, [r4, #12]
    1cda:	d01d      	beq.n	1d18 <setvbuf+0xac>
    1cdc:	ab01      	add	r3, sp, #4
    1cde:	466a      	mov	r2, sp
    1ce0:	4621      	mov	r1, r4
    1ce2:	4628      	mov	r0, r5
    1ce4:	f000 fbfe 	bl	24e4 <__swhatbuf_r>
    1ce8:	89a3      	ldrh	r3, [r4, #12]
    1cea:	4318      	orrs	r0, r3
    1cec:	81a0      	strh	r0, [r4, #12]
    1cee:	2e00      	cmp	r6, #0
    1cf0:	d132      	bne.n	1d58 <setvbuf+0xec>
    1cf2:	9e00      	ldr	r6, [sp, #0]
    1cf4:	4630      	mov	r0, r6
    1cf6:	f000 fc23 	bl	2540 <malloc>
    1cfa:	4607      	mov	r7, r0
    1cfc:	2800      	cmp	r0, #0
    1cfe:	d06b      	beq.n	1dd8 <setvbuf+0x16c>
    1d00:	89a3      	ldrh	r3, [r4, #12]
    1d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1d06:	81a3      	strh	r3, [r4, #12]
    1d08:	e028      	b.n	1d5c <setvbuf+0xf0>
    1d0a:	89a3      	ldrh	r3, [r4, #12]
    1d0c:	0599      	lsls	r1, r3, #22
    1d0e:	d4c7      	bmi.n	1ca0 <setvbuf+0x34>
    1d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1d12:	f000 fbe3 	bl	24dc <__retarget_lock_acquire_recursive>
    1d16:	e7c3      	b.n	1ca0 <setvbuf+0x34>
    1d18:	2500      	movs	r5, #0
    1d1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    1d1c:	2600      	movs	r6, #0
    1d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1d22:	f043 0302 	orr.w	r3, r3, #2
    1d26:	2001      	movs	r0, #1
    1d28:	60a6      	str	r6, [r4, #8]
    1d2a:	07ce      	lsls	r6, r1, #31
    1d2c:	81a3      	strh	r3, [r4, #12]
    1d2e:	6022      	str	r2, [r4, #0]
    1d30:	6122      	str	r2, [r4, #16]
    1d32:	6160      	str	r0, [r4, #20]
    1d34:	d401      	bmi.n	1d3a <setvbuf+0xce>
    1d36:	0598      	lsls	r0, r3, #22
    1d38:	d53e      	bpl.n	1db8 <setvbuf+0x14c>
    1d3a:	4628      	mov	r0, r5
    1d3c:	b003      	add	sp, #12
    1d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d42:	6921      	ldr	r1, [r4, #16]
    1d44:	4628      	mov	r0, r5
    1d46:	f000 fab5 	bl	22b4 <_free_r>
    1d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1d4e:	e7bd      	b.n	1ccc <setvbuf+0x60>
    1d50:	4628      	mov	r0, r5
    1d52:	f000 fa0d 	bl	2170 <__sinit>
    1d56:	e796      	b.n	1c86 <setvbuf+0x1a>
    1d58:	2f00      	cmp	r7, #0
    1d5a:	d0cb      	beq.n	1cf4 <setvbuf+0x88>
    1d5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d033      	beq.n	1dca <setvbuf+0x15e>
    1d62:	9b00      	ldr	r3, [sp, #0]
    1d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1d68:	6027      	str	r7, [r4, #0]
    1d6a:	429e      	cmp	r6, r3
    1d6c:	bf1c      	itt	ne
    1d6e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
    1d72:	81a2      	strhne	r2, [r4, #12]
    1d74:	f1b8 0f01 	cmp.w	r8, #1
    1d78:	bf04      	itt	eq
    1d7a:	f042 0201 	orreq.w	r2, r2, #1
    1d7e:	81a2      	strheq	r2, [r4, #12]
    1d80:	b292      	uxth	r2, r2
    1d82:	f012 0308 	ands.w	r3, r2, #8
    1d86:	6127      	str	r7, [r4, #16]
    1d88:	6166      	str	r6, [r4, #20]
    1d8a:	d00e      	beq.n	1daa <setvbuf+0x13e>
    1d8c:	07d1      	lsls	r1, r2, #31
    1d8e:	d51a      	bpl.n	1dc6 <setvbuf+0x15a>
    1d90:	6e65      	ldr	r5, [r4, #100]	; 0x64
    1d92:	4276      	negs	r6, r6
    1d94:	2300      	movs	r3, #0
    1d96:	f015 0501 	ands.w	r5, r5, #1
    1d9a:	61a6      	str	r6, [r4, #24]
    1d9c:	60a3      	str	r3, [r4, #8]
    1d9e:	d009      	beq.n	1db4 <setvbuf+0x148>
    1da0:	2500      	movs	r5, #0
    1da2:	4628      	mov	r0, r5
    1da4:	b003      	add	sp, #12
    1da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1daa:	60a3      	str	r3, [r4, #8]
    1dac:	6e65      	ldr	r5, [r4, #100]	; 0x64
    1dae:	f015 0501 	ands.w	r5, r5, #1
    1db2:	d1f5      	bne.n	1da0 <setvbuf+0x134>
    1db4:	0593      	lsls	r3, r2, #22
    1db6:	d4c0      	bmi.n	1d3a <setvbuf+0xce>
    1db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1dba:	f000 fb91 	bl	24e0 <__retarget_lock_release_recursive>
    1dbe:	4628      	mov	r0, r5
    1dc0:	b003      	add	sp, #12
    1dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1dc6:	60a6      	str	r6, [r4, #8]
    1dc8:	e7f0      	b.n	1dac <setvbuf+0x140>
    1dca:	4628      	mov	r0, r5
    1dcc:	f000 f9d0 	bl	2170 <__sinit>
    1dd0:	e7c7      	b.n	1d62 <setvbuf+0xf6>
    1dd2:	f04f 35ff 	mov.w	r5, #4294967295
    1dd6:	e7b0      	b.n	1d3a <setvbuf+0xce>
    1dd8:	f8dd 9000 	ldr.w	r9, [sp]
    1ddc:	45b1      	cmp	r9, r6
    1dde:	d004      	beq.n	1dea <setvbuf+0x17e>
    1de0:	4648      	mov	r0, r9
    1de2:	f000 fbad 	bl	2540 <malloc>
    1de6:	4607      	mov	r7, r0
    1de8:	b920      	cbnz	r0, 1df4 <setvbuf+0x188>
    1dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1dee:	f04f 35ff 	mov.w	r5, #4294967295
    1df2:	e792      	b.n	1d1a <setvbuf+0xae>
    1df4:	464e      	mov	r6, r9
    1df6:	e783      	b.n	1d00 <setvbuf+0x94>
    1df8:	20000004 	.word	0x20000004
    1dfc:	00000000 	.word	0x00000000

00001e00 <strlen>:
    1e00:	f890 f000 	pld	[r0]
    1e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    1e08:	f020 0107 	bic.w	r1, r0, #7
    1e0c:	f06f 0c00 	mvn.w	ip, #0
    1e10:	f010 0407 	ands.w	r4, r0, #7
    1e14:	f891 f020 	pld	[r1, #32]
    1e18:	f040 8049 	bne.w	1eae <strlen+0xae>
    1e1c:	f04f 0400 	mov.w	r4, #0
    1e20:	f06f 0007 	mvn.w	r0, #7
    1e24:	e9d1 2300 	ldrd	r2, r3, [r1]
    1e28:	f891 f040 	pld	[r1, #64]	; 0x40
    1e2c:	f100 0008 	add.w	r0, r0, #8
    1e30:	fa82 f24c 	uadd8	r2, r2, ip
    1e34:	faa4 f28c 	sel	r2, r4, ip
    1e38:	fa83 f34c 	uadd8	r3, r3, ip
    1e3c:	faa2 f38c 	sel	r3, r2, ip
    1e40:	bb4b      	cbnz	r3, 1e96 <strlen+0x96>
    1e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    1e46:	fa82 f24c 	uadd8	r2, r2, ip
    1e4a:	f100 0008 	add.w	r0, r0, #8
    1e4e:	faa4 f28c 	sel	r2, r4, ip
    1e52:	fa83 f34c 	uadd8	r3, r3, ip
    1e56:	faa2 f38c 	sel	r3, r2, ip
    1e5a:	b9e3      	cbnz	r3, 1e96 <strlen+0x96>
    1e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    1e60:	fa82 f24c 	uadd8	r2, r2, ip
    1e64:	f100 0008 	add.w	r0, r0, #8
    1e68:	faa4 f28c 	sel	r2, r4, ip
    1e6c:	fa83 f34c 	uadd8	r3, r3, ip
    1e70:	faa2 f38c 	sel	r3, r2, ip
    1e74:	b97b      	cbnz	r3, 1e96 <strlen+0x96>
    1e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    1e7a:	f101 0120 	add.w	r1, r1, #32
    1e7e:	fa82 f24c 	uadd8	r2, r2, ip
    1e82:	f100 0008 	add.w	r0, r0, #8
    1e86:	faa4 f28c 	sel	r2, r4, ip
    1e8a:	fa83 f34c 	uadd8	r3, r3, ip
    1e8e:	faa2 f38c 	sel	r3, r2, ip
    1e92:	2b00      	cmp	r3, #0
    1e94:	d0c6      	beq.n	1e24 <strlen+0x24>
    1e96:	2a00      	cmp	r2, #0
    1e98:	bf04      	itt	eq
    1e9a:	3004      	addeq	r0, #4
    1e9c:	461a      	moveq	r2, r3
    1e9e:	ba12      	rev	r2, r2
    1ea0:	fab2 f282 	clz	r2, r2
    1ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    1ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    1eac:	4770      	bx	lr
    1eae:	e9d1 2300 	ldrd	r2, r3, [r1]
    1eb2:	f004 0503 	and.w	r5, r4, #3
    1eb6:	f1c4 0000 	rsb	r0, r4, #0
    1eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    1ebe:	f014 0f04 	tst.w	r4, #4
    1ec2:	f891 f040 	pld	[r1, #64]	; 0x40
    1ec6:	fa0c f505 	lsl.w	r5, ip, r5
    1eca:	ea62 0205 	orn	r2, r2, r5
    1ece:	bf1c      	itt	ne
    1ed0:	ea63 0305 	ornne	r3, r3, r5
    1ed4:	4662      	movne	r2, ip
    1ed6:	f04f 0400 	mov.w	r4, #0
    1eda:	e7a9      	b.n	1e30 <strlen+0x30>

00001edc <__utoa>:
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ede:	f8df e078 	ldr.w	lr, [pc, #120]	; 1f58 <__utoa+0x7c>
    1ee2:	4616      	mov	r6, r2
    1ee4:	4604      	mov	r4, r0
    1ee6:	460f      	mov	r7, r1
    1ee8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1eec:	b08b      	sub	sp, #44	; 0x2c
    1eee:	466d      	mov	r5, sp
    1ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1ef2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1ef8:	e89e 0003 	ldmia.w	lr, {r0, r1}
    1efc:	1eb3      	subs	r3, r6, #2
    1efe:	f845 0b04 	str.w	r0, [r5], #4
    1f02:	2b22      	cmp	r3, #34	; 0x22
    1f04:	7029      	strb	r1, [r5, #0]
    1f06:	d822      	bhi.n	1f4e <__utoa+0x72>
    1f08:	1e7d      	subs	r5, r7, #1
    1f0a:	4628      	mov	r0, r5
    1f0c:	2200      	movs	r2, #0
    1f0e:	e000      	b.n	1f12 <__utoa+0x36>
    1f10:	461a      	mov	r2, r3
    1f12:	fbb4 f1f6 	udiv	r1, r4, r6
    1f16:	ab0a      	add	r3, sp, #40	; 0x28
    1f18:	fb06 4411 	mls	r4, r6, r1, r4
    1f1c:	4423      	add	r3, r4
    1f1e:	460c      	mov	r4, r1
    1f20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    1f24:	f800 3f01 	strb.w	r3, [r0, #1]!
    1f28:	1c53      	adds	r3, r2, #1
    1f2a:	2900      	cmp	r1, #0
    1f2c:	d1f0      	bne.n	1f10 <__utoa+0x34>
    1f2e:	54f9      	strb	r1, [r7, r3]
    1f30:	18bb      	adds	r3, r7, r2
    1f32:	b14a      	cbz	r2, 1f48 <__utoa+0x6c>
    1f34:	7819      	ldrb	r1, [r3, #0]
    1f36:	7868      	ldrb	r0, [r5, #1]
    1f38:	f805 1f01 	strb.w	r1, [r5, #1]!
    1f3c:	3401      	adds	r4, #1
    1f3e:	1b11      	subs	r1, r2, r4
    1f40:	428c      	cmp	r4, r1
    1f42:	f803 0901 	strb.w	r0, [r3], #-1
    1f46:	dbf5      	blt.n	1f34 <__utoa+0x58>
    1f48:	4638      	mov	r0, r7
    1f4a:	b00b      	add	sp, #44	; 0x2c
    1f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f4e:	2000      	movs	r0, #0
    1f50:	7038      	strb	r0, [r7, #0]
    1f52:	b00b      	add	sp, #44	; 0x2c
    1f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f56:	bf00      	nop
    1f58:	00002f2c 	.word	0x00002f2c

00001f5c <utoa>:
    1f5c:	f7ff bfbe 	b.w	1edc <__utoa>

00001f60 <register_fini>:
    1f60:	4b02      	ldr	r3, [pc, #8]	; (1f6c <register_fini+0xc>)
    1f62:	b113      	cbz	r3, 1f6a <register_fini+0xa>
    1f64:	4802      	ldr	r0, [pc, #8]	; (1f70 <register_fini+0x10>)
    1f66:	f000 b805 	b.w	1f74 <atexit>
    1f6a:	4770      	bx	lr
    1f6c:	00000000 	.word	0x00000000
    1f70:	000021e1 	.word	0x000021e1

00001f74 <atexit>:
    1f74:	2300      	movs	r3, #0
    1f76:	4601      	mov	r1, r0
    1f78:	461a      	mov	r2, r3
    1f7a:	4618      	mov	r0, r3
    1f7c:	f000 be10 	b.w	2ba0 <__register_exitproc>

00001f80 <__sflush_r>:
    1f80:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    1f84:	b29a      	uxth	r2, r3
    1f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f8a:	460d      	mov	r5, r1
    1f8c:	0711      	lsls	r1, r2, #28
    1f8e:	4680      	mov	r8, r0
    1f90:	d43a      	bmi.n	2008 <__sflush_r+0x88>
    1f92:	686a      	ldr	r2, [r5, #4]
    1f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1f98:	2a00      	cmp	r2, #0
    1f9a:	81ab      	strh	r3, [r5, #12]
    1f9c:	dd6f      	ble.n	207e <__sflush_r+0xfe>
    1f9e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1fa0:	2c00      	cmp	r4, #0
    1fa2:	d049      	beq.n	2038 <__sflush_r+0xb8>
    1fa4:	2200      	movs	r2, #0
    1fa6:	b29b      	uxth	r3, r3
    1fa8:	f8d8 6000 	ldr.w	r6, [r8]
    1fac:	f8c8 2000 	str.w	r2, [r8]
    1fb0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
    1fb4:	d067      	beq.n	2086 <__sflush_r+0x106>
    1fb6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    1fb8:	075f      	lsls	r7, r3, #29
    1fba:	d505      	bpl.n	1fc8 <__sflush_r+0x48>
    1fbc:	6869      	ldr	r1, [r5, #4]
    1fbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1fc0:	1a52      	subs	r2, r2, r1
    1fc2:	b10b      	cbz	r3, 1fc8 <__sflush_r+0x48>
    1fc4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    1fc6:	1ad2      	subs	r2, r2, r3
    1fc8:	2300      	movs	r3, #0
    1fca:	69e9      	ldr	r1, [r5, #28]
    1fcc:	4640      	mov	r0, r8
    1fce:	47a0      	blx	r4
    1fd0:	1c44      	adds	r4, r0, #1
    1fd2:	d03c      	beq.n	204e <__sflush_r+0xce>
    1fd4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    1fd8:	692a      	ldr	r2, [r5, #16]
    1fda:	602a      	str	r2, [r5, #0]
    1fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1fe0:	2200      	movs	r2, #0
    1fe2:	81ab      	strh	r3, [r5, #12]
    1fe4:	04db      	lsls	r3, r3, #19
    1fe6:	606a      	str	r2, [r5, #4]
    1fe8:	d447      	bmi.n	207a <__sflush_r+0xfa>
    1fea:	6b29      	ldr	r1, [r5, #48]	; 0x30
    1fec:	f8c8 6000 	str.w	r6, [r8]
    1ff0:	b311      	cbz	r1, 2038 <__sflush_r+0xb8>
    1ff2:	f105 0340 	add.w	r3, r5, #64	; 0x40
    1ff6:	4299      	cmp	r1, r3
    1ff8:	d002      	beq.n	2000 <__sflush_r+0x80>
    1ffa:	4640      	mov	r0, r8
    1ffc:	f000 f95a 	bl	22b4 <_free_r>
    2000:	2000      	movs	r0, #0
    2002:	6328      	str	r0, [r5, #48]	; 0x30
    2004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2008:	692e      	ldr	r6, [r5, #16]
    200a:	b1ae      	cbz	r6, 2038 <__sflush_r+0xb8>
    200c:	682c      	ldr	r4, [r5, #0]
    200e:	602e      	str	r6, [r5, #0]
    2010:	0791      	lsls	r1, r2, #30
    2012:	bf0c      	ite	eq
    2014:	696b      	ldreq	r3, [r5, #20]
    2016:	2300      	movne	r3, #0
    2018:	1ba4      	subs	r4, r4, r6
    201a:	60ab      	str	r3, [r5, #8]
    201c:	e00a      	b.n	2034 <__sflush_r+0xb4>
    201e:	4623      	mov	r3, r4
    2020:	4632      	mov	r2, r6
    2022:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    2024:	69e9      	ldr	r1, [r5, #28]
    2026:	4640      	mov	r0, r8
    2028:	47b8      	blx	r7
    202a:	2800      	cmp	r0, #0
    202c:	eba4 0400 	sub.w	r4, r4, r0
    2030:	4406      	add	r6, r0
    2032:	dd04      	ble.n	203e <__sflush_r+0xbe>
    2034:	2c00      	cmp	r4, #0
    2036:	dcf2      	bgt.n	201e <__sflush_r+0x9e>
    2038:	2000      	movs	r0, #0
    203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    203e:	89ab      	ldrh	r3, [r5, #12]
    2040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2044:	81ab      	strh	r3, [r5, #12]
    2046:	f04f 30ff 	mov.w	r0, #4294967295
    204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    204e:	f8d8 4000 	ldr.w	r4, [r8]
    2052:	2c1d      	cmp	r4, #29
    2054:	d8f3      	bhi.n	203e <__sflush_r+0xbe>
    2056:	4b19      	ldr	r3, [pc, #100]	; (20bc <__sflush_r+0x13c>)
    2058:	40e3      	lsrs	r3, r4
    205a:	43db      	mvns	r3, r3
    205c:	f013 0301 	ands.w	r3, r3, #1
    2060:	d1ed      	bne.n	203e <__sflush_r+0xbe>
    2062:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    2066:	606b      	str	r3, [r5, #4]
    2068:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
    206c:	6929      	ldr	r1, [r5, #16]
    206e:	81ab      	strh	r3, [r5, #12]
    2070:	04da      	lsls	r2, r3, #19
    2072:	6029      	str	r1, [r5, #0]
    2074:	d5b9      	bpl.n	1fea <__sflush_r+0x6a>
    2076:	2c00      	cmp	r4, #0
    2078:	d1b7      	bne.n	1fea <__sflush_r+0x6a>
    207a:	6528      	str	r0, [r5, #80]	; 0x50
    207c:	e7b5      	b.n	1fea <__sflush_r+0x6a>
    207e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2080:	2a00      	cmp	r2, #0
    2082:	dc8c      	bgt.n	1f9e <__sflush_r+0x1e>
    2084:	e7d8      	b.n	2038 <__sflush_r+0xb8>
    2086:	2301      	movs	r3, #1
    2088:	69e9      	ldr	r1, [r5, #28]
    208a:	4640      	mov	r0, r8
    208c:	47a0      	blx	r4
    208e:	1c43      	adds	r3, r0, #1
    2090:	4602      	mov	r2, r0
    2092:	d002      	beq.n	209a <__sflush_r+0x11a>
    2094:	89ab      	ldrh	r3, [r5, #12]
    2096:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2098:	e78e      	b.n	1fb8 <__sflush_r+0x38>
    209a:	f8d8 3000 	ldr.w	r3, [r8]
    209e:	2b00      	cmp	r3, #0
    20a0:	d0f8      	beq.n	2094 <__sflush_r+0x114>
    20a2:	2b1d      	cmp	r3, #29
    20a4:	d001      	beq.n	20aa <__sflush_r+0x12a>
    20a6:	2b16      	cmp	r3, #22
    20a8:	d102      	bne.n	20b0 <__sflush_r+0x130>
    20aa:	f8c8 6000 	str.w	r6, [r8]
    20ae:	e7c3      	b.n	2038 <__sflush_r+0xb8>
    20b0:	89ab      	ldrh	r3, [r5, #12]
    20b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    20b6:	81ab      	strh	r3, [r5, #12]
    20b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20bc:	20400001 	.word	0x20400001

000020c0 <_fflush_r>:
    20c0:	b538      	push	{r3, r4, r5, lr}
    20c2:	460d      	mov	r5, r1
    20c4:	4604      	mov	r4, r0
    20c6:	b108      	cbz	r0, 20cc <_fflush_r+0xc>
    20c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    20ca:	b1bb      	cbz	r3, 20fc <_fflush_r+0x3c>
    20cc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    20d0:	b188      	cbz	r0, 20f6 <_fflush_r+0x36>
    20d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    20d4:	07db      	lsls	r3, r3, #31
    20d6:	d401      	bmi.n	20dc <_fflush_r+0x1c>
    20d8:	0581      	lsls	r1, r0, #22
    20da:	d517      	bpl.n	210c <_fflush_r+0x4c>
    20dc:	4620      	mov	r0, r4
    20de:	4629      	mov	r1, r5
    20e0:	f7ff ff4e 	bl	1f80 <__sflush_r>
    20e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    20e6:	07da      	lsls	r2, r3, #31
    20e8:	4604      	mov	r4, r0
    20ea:	d402      	bmi.n	20f2 <_fflush_r+0x32>
    20ec:	89ab      	ldrh	r3, [r5, #12]
    20ee:	059b      	lsls	r3, r3, #22
    20f0:	d507      	bpl.n	2102 <_fflush_r+0x42>
    20f2:	4620      	mov	r0, r4
    20f4:	bd38      	pop	{r3, r4, r5, pc}
    20f6:	4604      	mov	r4, r0
    20f8:	4620      	mov	r0, r4
    20fa:	bd38      	pop	{r3, r4, r5, pc}
    20fc:	f000 f838 	bl	2170 <__sinit>
    2100:	e7e4      	b.n	20cc <_fflush_r+0xc>
    2102:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2104:	f000 f9ec 	bl	24e0 <__retarget_lock_release_recursive>
    2108:	4620      	mov	r0, r4
    210a:	bd38      	pop	{r3, r4, r5, pc}
    210c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    210e:	f000 f9e5 	bl	24dc <__retarget_lock_acquire_recursive>
    2112:	e7e3      	b.n	20dc <_fflush_r+0x1c>

00002114 <_cleanup_r>:
    2114:	4901      	ldr	r1, [pc, #4]	; (211c <_cleanup_r+0x8>)
    2116:	f000 b9b3 	b.w	2480 <_fwalk_reent>
    211a:	bf00      	nop
    211c:	00002c89 	.word	0x00002c89

00002120 <std.isra.0>:
    2120:	b510      	push	{r4, lr}
    2122:	2300      	movs	r3, #0
    2124:	4604      	mov	r4, r0
    2126:	8181      	strh	r1, [r0, #12]
    2128:	81c2      	strh	r2, [r0, #14]
    212a:	6003      	str	r3, [r0, #0]
    212c:	6043      	str	r3, [r0, #4]
    212e:	6083      	str	r3, [r0, #8]
    2130:	6643      	str	r3, [r0, #100]	; 0x64
    2132:	6103      	str	r3, [r0, #16]
    2134:	6143      	str	r3, [r0, #20]
    2136:	6183      	str	r3, [r0, #24]
    2138:	4619      	mov	r1, r3
    213a:	2208      	movs	r2, #8
    213c:	305c      	adds	r0, #92	; 0x5c
    213e:	f7ff fd3f 	bl	1bc0 <memset>
    2142:	4807      	ldr	r0, [pc, #28]	; (2160 <std.isra.0+0x40>)
    2144:	4907      	ldr	r1, [pc, #28]	; (2164 <std.isra.0+0x44>)
    2146:	4a08      	ldr	r2, [pc, #32]	; (2168 <std.isra.0+0x48>)
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <std.isra.0+0x4c>)
    214a:	6220      	str	r0, [r4, #32]
    214c:	61e4      	str	r4, [r4, #28]
    214e:	6261      	str	r1, [r4, #36]	; 0x24
    2150:	62a2      	str	r2, [r4, #40]	; 0x28
    2152:	62e3      	str	r3, [r4, #44]	; 0x2c
    2154:	f104 0058 	add.w	r0, r4, #88	; 0x58
    2158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    215c:	f000 b9ba 	b.w	24d4 <__retarget_lock_init_recursive>
    2160:	00002aed 	.word	0x00002aed
    2164:	00002b11 	.word	0x00002b11
    2168:	00002b4d 	.word	0x00002b4d
    216c:	00002b6d 	.word	0x00002b6d

00002170 <__sinit>:
    2170:	b510      	push	{r4, lr}
    2172:	4604      	mov	r4, r0
    2174:	4812      	ldr	r0, [pc, #72]	; (21c0 <__sinit+0x50>)
    2176:	f000 f9b1 	bl	24dc <__retarget_lock_acquire_recursive>
    217a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    217c:	b9d2      	cbnz	r2, 21b4 <__sinit+0x44>
    217e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
    2182:	4810      	ldr	r0, [pc, #64]	; (21c4 <__sinit+0x54>)
    2184:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    2188:	2103      	movs	r1, #3
    218a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
    218e:	63e0      	str	r0, [r4, #60]	; 0x3c
    2190:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
    2194:	6860      	ldr	r0, [r4, #4]
    2196:	2104      	movs	r1, #4
    2198:	f7ff ffc2 	bl	2120 <std.isra.0>
    219c:	2201      	movs	r2, #1
    219e:	2109      	movs	r1, #9
    21a0:	68a0      	ldr	r0, [r4, #8]
    21a2:	f7ff ffbd 	bl	2120 <std.isra.0>
    21a6:	2202      	movs	r2, #2
    21a8:	2112      	movs	r1, #18
    21aa:	68e0      	ldr	r0, [r4, #12]
    21ac:	f7ff ffb8 	bl	2120 <std.isra.0>
    21b0:	2301      	movs	r3, #1
    21b2:	63a3      	str	r3, [r4, #56]	; 0x38
    21b4:	4802      	ldr	r0, [pc, #8]	; (21c0 <__sinit+0x50>)
    21b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    21ba:	f000 b991 	b.w	24e0 <__retarget_lock_release_recursive>
    21be:	bf00      	nop
    21c0:	20000964 	.word	0x20000964
    21c4:	00002115 	.word	0x00002115

000021c8 <__sfp_lock_acquire>:
    21c8:	4801      	ldr	r0, [pc, #4]	; (21d0 <__sfp_lock_acquire+0x8>)
    21ca:	f000 b987 	b.w	24dc <__retarget_lock_acquire_recursive>
    21ce:	bf00      	nop
    21d0:	20000978 	.word	0x20000978

000021d4 <__sfp_lock_release>:
    21d4:	4801      	ldr	r0, [pc, #4]	; (21dc <__sfp_lock_release+0x8>)
    21d6:	f000 b983 	b.w	24e0 <__retarget_lock_release_recursive>
    21da:	bf00      	nop
    21dc:	20000978 	.word	0x20000978

000021e0 <__libc_fini_array>:
    21e0:	b538      	push	{r3, r4, r5, lr}
    21e2:	4c0a      	ldr	r4, [pc, #40]	; (220c <__libc_fini_array+0x2c>)
    21e4:	4d0a      	ldr	r5, [pc, #40]	; (2210 <__libc_fini_array+0x30>)
    21e6:	1b64      	subs	r4, r4, r5
    21e8:	10a4      	asrs	r4, r4, #2
    21ea:	d00a      	beq.n	2202 <__libc_fini_array+0x22>
    21ec:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    21f0:	3b01      	subs	r3, #1
    21f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    21f6:	3c01      	subs	r4, #1
    21f8:	f855 3904 	ldr.w	r3, [r5], #-4
    21fc:	4798      	blx	r3
    21fe:	2c00      	cmp	r4, #0
    2200:	d1f9      	bne.n	21f6 <__libc_fini_array+0x16>
    2202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2206:	f000 beb1 	b.w	2f6c <_fini>
    220a:	bf00      	nop
    220c:	00002f7c 	.word	0x00002f7c
    2210:	00002f78 	.word	0x00002f78

00002214 <_malloc_trim_r>:
    2214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2216:	4f24      	ldr	r7, [pc, #144]	; (22a8 <_malloc_trim_r+0x94>)
    2218:	460c      	mov	r4, r1
    221a:	4606      	mov	r6, r0
    221c:	f000 fc48 	bl	2ab0 <__malloc_lock>
    2220:	68bb      	ldr	r3, [r7, #8]
    2222:	685d      	ldr	r5, [r3, #4]
    2224:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    2228:	310f      	adds	r1, #15
    222a:	f025 0503 	bic.w	r5, r5, #3
    222e:	4429      	add	r1, r5
    2230:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    2234:	f021 010f 	bic.w	r1, r1, #15
    2238:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    223c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2240:	db07      	blt.n	2252 <_malloc_trim_r+0x3e>
    2242:	2100      	movs	r1, #0
    2244:	4630      	mov	r0, r6
    2246:	f000 fc3f 	bl	2ac8 <_sbrk_r>
    224a:	68bb      	ldr	r3, [r7, #8]
    224c:	442b      	add	r3, r5
    224e:	4298      	cmp	r0, r3
    2250:	d004      	beq.n	225c <_malloc_trim_r+0x48>
    2252:	4630      	mov	r0, r6
    2254:	f000 fc32 	bl	2abc <__malloc_unlock>
    2258:	2000      	movs	r0, #0
    225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    225c:	4261      	negs	r1, r4
    225e:	4630      	mov	r0, r6
    2260:	f000 fc32 	bl	2ac8 <_sbrk_r>
    2264:	3001      	adds	r0, #1
    2266:	d00d      	beq.n	2284 <_malloc_trim_r+0x70>
    2268:	4b10      	ldr	r3, [pc, #64]	; (22ac <_malloc_trim_r+0x98>)
    226a:	68ba      	ldr	r2, [r7, #8]
    226c:	6819      	ldr	r1, [r3, #0]
    226e:	1b2d      	subs	r5, r5, r4
    2270:	f045 0501 	orr.w	r5, r5, #1
    2274:	4630      	mov	r0, r6
    2276:	1b09      	subs	r1, r1, r4
    2278:	6055      	str	r5, [r2, #4]
    227a:	6019      	str	r1, [r3, #0]
    227c:	f000 fc1e 	bl	2abc <__malloc_unlock>
    2280:	2001      	movs	r0, #1
    2282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2284:	2100      	movs	r1, #0
    2286:	4630      	mov	r0, r6
    2288:	f000 fc1e 	bl	2ac8 <_sbrk_r>
    228c:	68ba      	ldr	r2, [r7, #8]
    228e:	1a83      	subs	r3, r0, r2
    2290:	2b0f      	cmp	r3, #15
    2292:	ddde      	ble.n	2252 <_malloc_trim_r+0x3e>
    2294:	4c06      	ldr	r4, [pc, #24]	; (22b0 <_malloc_trim_r+0x9c>)
    2296:	4905      	ldr	r1, [pc, #20]	; (22ac <_malloc_trim_r+0x98>)
    2298:	6824      	ldr	r4, [r4, #0]
    229a:	f043 0301 	orr.w	r3, r3, #1
    229e:	1b00      	subs	r0, r0, r4
    22a0:	6053      	str	r3, [r2, #4]
    22a2:	6008      	str	r0, [r1, #0]
    22a4:	e7d5      	b.n	2252 <_malloc_trim_r+0x3e>
    22a6:	bf00      	nop
    22a8:	20000434 	.word	0x20000434
    22ac:	200008d4 	.word	0x200008d4
    22b0:	2000083c 	.word	0x2000083c

000022b4 <_free_r>:
    22b4:	2900      	cmp	r1, #0
    22b6:	d044      	beq.n	2342 <_free_r+0x8e>
    22b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22bc:	460d      	mov	r5, r1
    22be:	4680      	mov	r8, r0
    22c0:	f000 fbf6 	bl	2ab0 <__malloc_lock>
    22c4:	f855 7c04 	ldr.w	r7, [r5, #-4]
    22c8:	4969      	ldr	r1, [pc, #420]	; (2470 <_free_r+0x1bc>)
    22ca:	f027 0301 	bic.w	r3, r7, #1
    22ce:	f1a5 0408 	sub.w	r4, r5, #8
    22d2:	18e2      	adds	r2, r4, r3
    22d4:	688e      	ldr	r6, [r1, #8]
    22d6:	6850      	ldr	r0, [r2, #4]
    22d8:	42b2      	cmp	r2, r6
    22da:	f020 0003 	bic.w	r0, r0, #3
    22de:	d05e      	beq.n	239e <_free_r+0xea>
    22e0:	07fe      	lsls	r6, r7, #31
    22e2:	6050      	str	r0, [r2, #4]
    22e4:	d40b      	bmi.n	22fe <_free_r+0x4a>
    22e6:	f855 7c08 	ldr.w	r7, [r5, #-8]
    22ea:	1be4      	subs	r4, r4, r7
    22ec:	f101 0e08 	add.w	lr, r1, #8
    22f0:	68a5      	ldr	r5, [r4, #8]
    22f2:	4575      	cmp	r5, lr
    22f4:	443b      	add	r3, r7
    22f6:	d06d      	beq.n	23d4 <_free_r+0x120>
    22f8:	68e7      	ldr	r7, [r4, #12]
    22fa:	60ef      	str	r7, [r5, #12]
    22fc:	60bd      	str	r5, [r7, #8]
    22fe:	1815      	adds	r5, r2, r0
    2300:	686d      	ldr	r5, [r5, #4]
    2302:	07ed      	lsls	r5, r5, #31
    2304:	d53e      	bpl.n	2384 <_free_r+0xd0>
    2306:	f043 0201 	orr.w	r2, r3, #1
    230a:	6062      	str	r2, [r4, #4]
    230c:	50e3      	str	r3, [r4, r3]
    230e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2312:	d217      	bcs.n	2344 <_free_r+0x90>
    2314:	08db      	lsrs	r3, r3, #3
    2316:	1c58      	adds	r0, r3, #1
    2318:	109a      	asrs	r2, r3, #2
    231a:	684d      	ldr	r5, [r1, #4]
    231c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
    2320:	60a7      	str	r7, [r4, #8]
    2322:	2301      	movs	r3, #1
    2324:	4093      	lsls	r3, r2
    2326:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    232a:	432b      	orrs	r3, r5
    232c:	3a08      	subs	r2, #8
    232e:	60e2      	str	r2, [r4, #12]
    2330:	604b      	str	r3, [r1, #4]
    2332:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    2336:	60fc      	str	r4, [r7, #12]
    2338:	4640      	mov	r0, r8
    233a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    233e:	f000 bbbd 	b.w	2abc <__malloc_unlock>
    2342:	4770      	bx	lr
    2344:	0a5a      	lsrs	r2, r3, #9
    2346:	2a04      	cmp	r2, #4
    2348:	d852      	bhi.n	23f0 <_free_r+0x13c>
    234a:	099a      	lsrs	r2, r3, #6
    234c:	f102 0739 	add.w	r7, r2, #57	; 0x39
    2350:	00ff      	lsls	r7, r7, #3
    2352:	f102 0538 	add.w	r5, r2, #56	; 0x38
    2356:	19c8      	adds	r0, r1, r7
    2358:	59ca      	ldr	r2, [r1, r7]
    235a:	3808      	subs	r0, #8
    235c:	4290      	cmp	r0, r2
    235e:	d04f      	beq.n	2400 <_free_r+0x14c>
    2360:	6851      	ldr	r1, [r2, #4]
    2362:	f021 0103 	bic.w	r1, r1, #3
    2366:	428b      	cmp	r3, r1
    2368:	d232      	bcs.n	23d0 <_free_r+0x11c>
    236a:	6892      	ldr	r2, [r2, #8]
    236c:	4290      	cmp	r0, r2
    236e:	d1f7      	bne.n	2360 <_free_r+0xac>
    2370:	68c3      	ldr	r3, [r0, #12]
    2372:	60a0      	str	r0, [r4, #8]
    2374:	60e3      	str	r3, [r4, #12]
    2376:	609c      	str	r4, [r3, #8]
    2378:	60c4      	str	r4, [r0, #12]
    237a:	4640      	mov	r0, r8
    237c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	f000 bb9c 	b.w	2abc <__malloc_unlock>
    2384:	6895      	ldr	r5, [r2, #8]
    2386:	4f3b      	ldr	r7, [pc, #236]	; (2474 <_free_r+0x1c0>)
    2388:	42bd      	cmp	r5, r7
    238a:	4403      	add	r3, r0
    238c:	d040      	beq.n	2410 <_free_r+0x15c>
    238e:	68d0      	ldr	r0, [r2, #12]
    2390:	60e8      	str	r0, [r5, #12]
    2392:	f043 0201 	orr.w	r2, r3, #1
    2396:	6085      	str	r5, [r0, #8]
    2398:	6062      	str	r2, [r4, #4]
    239a:	50e3      	str	r3, [r4, r3]
    239c:	e7b7      	b.n	230e <_free_r+0x5a>
    239e:	07ff      	lsls	r7, r7, #31
    23a0:	4403      	add	r3, r0
    23a2:	d407      	bmi.n	23b4 <_free_r+0x100>
    23a4:	f855 2c08 	ldr.w	r2, [r5, #-8]
    23a8:	1aa4      	subs	r4, r4, r2
    23aa:	4413      	add	r3, r2
    23ac:	68a0      	ldr	r0, [r4, #8]
    23ae:	68e2      	ldr	r2, [r4, #12]
    23b0:	60c2      	str	r2, [r0, #12]
    23b2:	6090      	str	r0, [r2, #8]
    23b4:	4a30      	ldr	r2, [pc, #192]	; (2478 <_free_r+0x1c4>)
    23b6:	6812      	ldr	r2, [r2, #0]
    23b8:	f043 0001 	orr.w	r0, r3, #1
    23bc:	4293      	cmp	r3, r2
    23be:	6060      	str	r0, [r4, #4]
    23c0:	608c      	str	r4, [r1, #8]
    23c2:	d3b9      	bcc.n	2338 <_free_r+0x84>
    23c4:	4b2d      	ldr	r3, [pc, #180]	; (247c <_free_r+0x1c8>)
    23c6:	4640      	mov	r0, r8
    23c8:	6819      	ldr	r1, [r3, #0]
    23ca:	f7ff ff23 	bl	2214 <_malloc_trim_r>
    23ce:	e7b3      	b.n	2338 <_free_r+0x84>
    23d0:	4610      	mov	r0, r2
    23d2:	e7cd      	b.n	2370 <_free_r+0xbc>
    23d4:	1811      	adds	r1, r2, r0
    23d6:	6849      	ldr	r1, [r1, #4]
    23d8:	07c9      	lsls	r1, r1, #31
    23da:	d444      	bmi.n	2466 <_free_r+0x1b2>
    23dc:	6891      	ldr	r1, [r2, #8]
    23de:	68d2      	ldr	r2, [r2, #12]
    23e0:	60ca      	str	r2, [r1, #12]
    23e2:	4403      	add	r3, r0
    23e4:	f043 0001 	orr.w	r0, r3, #1
    23e8:	6091      	str	r1, [r2, #8]
    23ea:	6060      	str	r0, [r4, #4]
    23ec:	50e3      	str	r3, [r4, r3]
    23ee:	e7a3      	b.n	2338 <_free_r+0x84>
    23f0:	2a14      	cmp	r2, #20
    23f2:	d816      	bhi.n	2422 <_free_r+0x16e>
    23f4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    23f8:	00ff      	lsls	r7, r7, #3
    23fa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    23fe:	e7aa      	b.n	2356 <_free_r+0xa2>
    2400:	10aa      	asrs	r2, r5, #2
    2402:	2301      	movs	r3, #1
    2404:	684d      	ldr	r5, [r1, #4]
    2406:	4093      	lsls	r3, r2
    2408:	432b      	orrs	r3, r5
    240a:	604b      	str	r3, [r1, #4]
    240c:	4603      	mov	r3, r0
    240e:	e7b0      	b.n	2372 <_free_r+0xbe>
    2410:	f043 0201 	orr.w	r2, r3, #1
    2414:	614c      	str	r4, [r1, #20]
    2416:	610c      	str	r4, [r1, #16]
    2418:	60e5      	str	r5, [r4, #12]
    241a:	60a5      	str	r5, [r4, #8]
    241c:	6062      	str	r2, [r4, #4]
    241e:	50e3      	str	r3, [r4, r3]
    2420:	e78a      	b.n	2338 <_free_r+0x84>
    2422:	2a54      	cmp	r2, #84	; 0x54
    2424:	d806      	bhi.n	2434 <_free_r+0x180>
    2426:	0b1a      	lsrs	r2, r3, #12
    2428:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    242c:	00ff      	lsls	r7, r7, #3
    242e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    2432:	e790      	b.n	2356 <_free_r+0xa2>
    2434:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2438:	d806      	bhi.n	2448 <_free_r+0x194>
    243a:	0bda      	lsrs	r2, r3, #15
    243c:	f102 0778 	add.w	r7, r2, #120	; 0x78
    2440:	00ff      	lsls	r7, r7, #3
    2442:	f102 0577 	add.w	r5, r2, #119	; 0x77
    2446:	e786      	b.n	2356 <_free_r+0xa2>
    2448:	f240 5054 	movw	r0, #1364	; 0x554
    244c:	4282      	cmp	r2, r0
    244e:	d806      	bhi.n	245e <_free_r+0x1aa>
    2450:	0c9a      	lsrs	r2, r3, #18
    2452:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    2456:	00ff      	lsls	r7, r7, #3
    2458:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    245c:	e77b      	b.n	2356 <_free_r+0xa2>
    245e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
    2462:	257e      	movs	r5, #126	; 0x7e
    2464:	e777      	b.n	2356 <_free_r+0xa2>
    2466:	f043 0101 	orr.w	r1, r3, #1
    246a:	6061      	str	r1, [r4, #4]
    246c:	6013      	str	r3, [r2, #0]
    246e:	e763      	b.n	2338 <_free_r+0x84>
    2470:	20000434 	.word	0x20000434
    2474:	2000043c 	.word	0x2000043c
    2478:	20000840 	.word	0x20000840
    247c:	20000904 	.word	0x20000904

00002480 <_fwalk_reent>:
    2480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2484:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    2488:	d01f      	beq.n	24ca <_fwalk_reent+0x4a>
    248a:	4688      	mov	r8, r1
    248c:	4606      	mov	r6, r0
    248e:	f04f 0900 	mov.w	r9, #0
    2492:	687d      	ldr	r5, [r7, #4]
    2494:	68bc      	ldr	r4, [r7, #8]
    2496:	3d01      	subs	r5, #1
    2498:	d411      	bmi.n	24be <_fwalk_reent+0x3e>
    249a:	89a3      	ldrh	r3, [r4, #12]
    249c:	2b01      	cmp	r3, #1
    249e:	f105 35ff 	add.w	r5, r5, #4294967295
    24a2:	d908      	bls.n	24b6 <_fwalk_reent+0x36>
    24a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    24a8:	3301      	adds	r3, #1
    24aa:	4621      	mov	r1, r4
    24ac:	4630      	mov	r0, r6
    24ae:	d002      	beq.n	24b6 <_fwalk_reent+0x36>
    24b0:	47c0      	blx	r8
    24b2:	ea49 0900 	orr.w	r9, r9, r0
    24b6:	1c6b      	adds	r3, r5, #1
    24b8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    24bc:	d1ed      	bne.n	249a <_fwalk_reent+0x1a>
    24be:	683f      	ldr	r7, [r7, #0]
    24c0:	2f00      	cmp	r7, #0
    24c2:	d1e6      	bne.n	2492 <_fwalk_reent+0x12>
    24c4:	4648      	mov	r0, r9
    24c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24ca:	46b9      	mov	r9, r7
    24cc:	4648      	mov	r0, r9
    24ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24d2:	bf00      	nop

000024d4 <__retarget_lock_init_recursive>:
    24d4:	4770      	bx	lr
    24d6:	bf00      	nop

000024d8 <__retarget_lock_close_recursive>:
    24d8:	4770      	bx	lr
    24da:	bf00      	nop

000024dc <__retarget_lock_acquire_recursive>:
    24dc:	4770      	bx	lr
    24de:	bf00      	nop

000024e0 <__retarget_lock_release_recursive>:
    24e0:	4770      	bx	lr
    24e2:	bf00      	nop

000024e4 <__swhatbuf_r>:
    24e4:	b570      	push	{r4, r5, r6, lr}
    24e6:	460c      	mov	r4, r1
    24e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    24ec:	2900      	cmp	r1, #0
    24ee:	b090      	sub	sp, #64	; 0x40
    24f0:	4615      	mov	r5, r2
    24f2:	461e      	mov	r6, r3
    24f4:	db14      	blt.n	2520 <__swhatbuf_r+0x3c>
    24f6:	aa01      	add	r2, sp, #4
    24f8:	f000 fc28 	bl	2d4c <_fstat_r>
    24fc:	2800      	cmp	r0, #0
    24fe:	db0f      	blt.n	2520 <__swhatbuf_r+0x3c>
    2500:	9a02      	ldr	r2, [sp, #8]
    2502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    2506:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    250a:	fab2 f282 	clz	r2, r2
    250e:	0952      	lsrs	r2, r2, #5
    2510:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2514:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2518:	6032      	str	r2, [r6, #0]
    251a:	602b      	str	r3, [r5, #0]
    251c:	b010      	add	sp, #64	; 0x40
    251e:	bd70      	pop	{r4, r5, r6, pc}
    2520:	89a2      	ldrh	r2, [r4, #12]
    2522:	2300      	movs	r3, #0
    2524:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    2528:	6033      	str	r3, [r6, #0]
    252a:	d004      	beq.n	2536 <__swhatbuf_r+0x52>
    252c:	2240      	movs	r2, #64	; 0x40
    252e:	4618      	mov	r0, r3
    2530:	602a      	str	r2, [r5, #0]
    2532:	b010      	add	sp, #64	; 0x40
    2534:	bd70      	pop	{r4, r5, r6, pc}
    2536:	f44f 6380 	mov.w	r3, #1024	; 0x400
    253a:	602b      	str	r3, [r5, #0]
    253c:	b010      	add	sp, #64	; 0x40
    253e:	bd70      	pop	{r4, r5, r6, pc}

00002540 <malloc>:
    2540:	4b02      	ldr	r3, [pc, #8]	; (254c <malloc+0xc>)
    2542:	4601      	mov	r1, r0
    2544:	6818      	ldr	r0, [r3, #0]
    2546:	f000 b803 	b.w	2550 <_malloc_r>
    254a:	bf00      	nop
    254c:	20000004 	.word	0x20000004

00002550 <_malloc_r>:
    2550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2554:	f101 060b 	add.w	r6, r1, #11
    2558:	2e16      	cmp	r6, #22
    255a:	b083      	sub	sp, #12
    255c:	4605      	mov	r5, r0
    255e:	f240 809e 	bls.w	269e <_malloc_r+0x14e>
    2562:	f036 0607 	bics.w	r6, r6, #7
    2566:	f100 80bd 	bmi.w	26e4 <_malloc_r+0x194>
    256a:	42b1      	cmp	r1, r6
    256c:	f200 80ba 	bhi.w	26e4 <_malloc_r+0x194>
    2570:	f000 fa9e 	bl	2ab0 <__malloc_lock>
    2574:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    2578:	f0c0 8293 	bcc.w	2aa2 <_malloc_r+0x552>
    257c:	0a73      	lsrs	r3, r6, #9
    257e:	f000 80b8 	beq.w	26f2 <_malloc_r+0x1a2>
    2582:	2b04      	cmp	r3, #4
    2584:	f200 8179 	bhi.w	287a <_malloc_r+0x32a>
    2588:	09b3      	lsrs	r3, r6, #6
    258a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    258e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
    2592:	00c3      	lsls	r3, r0, #3
    2594:	4fbf      	ldr	r7, [pc, #764]	; (2894 <_malloc_r+0x344>)
    2596:	443b      	add	r3, r7
    2598:	f1a3 0108 	sub.w	r1, r3, #8
    259c:	685c      	ldr	r4, [r3, #4]
    259e:	42a1      	cmp	r1, r4
    25a0:	d106      	bne.n	25b0 <_malloc_r+0x60>
    25a2:	e00c      	b.n	25be <_malloc_r+0x6e>
    25a4:	2a00      	cmp	r2, #0
    25a6:	f280 80aa 	bge.w	26fe <_malloc_r+0x1ae>
    25aa:	68e4      	ldr	r4, [r4, #12]
    25ac:	42a1      	cmp	r1, r4
    25ae:	d006      	beq.n	25be <_malloc_r+0x6e>
    25b0:	6863      	ldr	r3, [r4, #4]
    25b2:	f023 0303 	bic.w	r3, r3, #3
    25b6:	1b9a      	subs	r2, r3, r6
    25b8:	2a0f      	cmp	r2, #15
    25ba:	ddf3      	ble.n	25a4 <_malloc_r+0x54>
    25bc:	4670      	mov	r0, lr
    25be:	693c      	ldr	r4, [r7, #16]
    25c0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 28a8 <_malloc_r+0x358>
    25c4:	4574      	cmp	r4, lr
    25c6:	f000 81ab 	beq.w	2920 <_malloc_r+0x3d0>
    25ca:	6863      	ldr	r3, [r4, #4]
    25cc:	f023 0303 	bic.w	r3, r3, #3
    25d0:	1b9a      	subs	r2, r3, r6
    25d2:	2a0f      	cmp	r2, #15
    25d4:	f300 8190 	bgt.w	28f8 <_malloc_r+0x3a8>
    25d8:	2a00      	cmp	r2, #0
    25da:	f8c7 e014 	str.w	lr, [r7, #20]
    25de:	f8c7 e010 	str.w	lr, [r7, #16]
    25e2:	f280 809d 	bge.w	2720 <_malloc_r+0x1d0>
    25e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    25ea:	f080 8161 	bcs.w	28b0 <_malloc_r+0x360>
    25ee:	08db      	lsrs	r3, r3, #3
    25f0:	f103 0c01 	add.w	ip, r3, #1
    25f4:	1099      	asrs	r1, r3, #2
    25f6:	687a      	ldr	r2, [r7, #4]
    25f8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
    25fc:	f8c4 8008 	str.w	r8, [r4, #8]
    2600:	2301      	movs	r3, #1
    2602:	408b      	lsls	r3, r1
    2604:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
    2608:	4313      	orrs	r3, r2
    260a:	3908      	subs	r1, #8
    260c:	60e1      	str	r1, [r4, #12]
    260e:	607b      	str	r3, [r7, #4]
    2610:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
    2614:	f8c8 400c 	str.w	r4, [r8, #12]
    2618:	1082      	asrs	r2, r0, #2
    261a:	2401      	movs	r4, #1
    261c:	4094      	lsls	r4, r2
    261e:	429c      	cmp	r4, r3
    2620:	f200 808b 	bhi.w	273a <_malloc_r+0x1ea>
    2624:	421c      	tst	r4, r3
    2626:	d106      	bne.n	2636 <_malloc_r+0xe6>
    2628:	f020 0003 	bic.w	r0, r0, #3
    262c:	0064      	lsls	r4, r4, #1
    262e:	421c      	tst	r4, r3
    2630:	f100 0004 	add.w	r0, r0, #4
    2634:	d0fa      	beq.n	262c <_malloc_r+0xdc>
    2636:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    263a:	46cc      	mov	ip, r9
    263c:	4680      	mov	r8, r0
    263e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    2642:	459c      	cmp	ip, r3
    2644:	d107      	bne.n	2656 <_malloc_r+0x106>
    2646:	e16d      	b.n	2924 <_malloc_r+0x3d4>
    2648:	2a00      	cmp	r2, #0
    264a:	f280 817b 	bge.w	2944 <_malloc_r+0x3f4>
    264e:	68db      	ldr	r3, [r3, #12]
    2650:	459c      	cmp	ip, r3
    2652:	f000 8167 	beq.w	2924 <_malloc_r+0x3d4>
    2656:	6859      	ldr	r1, [r3, #4]
    2658:	f021 0103 	bic.w	r1, r1, #3
    265c:	1b8a      	subs	r2, r1, r6
    265e:	2a0f      	cmp	r2, #15
    2660:	ddf2      	ble.n	2648 <_malloc_r+0xf8>
    2662:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    2666:	f8d3 8008 	ldr.w	r8, [r3, #8]
    266a:	9300      	str	r3, [sp, #0]
    266c:	199c      	adds	r4, r3, r6
    266e:	4628      	mov	r0, r5
    2670:	f046 0601 	orr.w	r6, r6, #1
    2674:	f042 0501 	orr.w	r5, r2, #1
    2678:	605e      	str	r6, [r3, #4]
    267a:	f8c8 c00c 	str.w	ip, [r8, #12]
    267e:	f8cc 8008 	str.w	r8, [ip, #8]
    2682:	617c      	str	r4, [r7, #20]
    2684:	613c      	str	r4, [r7, #16]
    2686:	f8c4 e00c 	str.w	lr, [r4, #12]
    268a:	f8c4 e008 	str.w	lr, [r4, #8]
    268e:	6065      	str	r5, [r4, #4]
    2690:	505a      	str	r2, [r3, r1]
    2692:	f000 fa13 	bl	2abc <__malloc_unlock>
    2696:	9b00      	ldr	r3, [sp, #0]
    2698:	f103 0408 	add.w	r4, r3, #8
    269c:	e01e      	b.n	26dc <_malloc_r+0x18c>
    269e:	2910      	cmp	r1, #16
    26a0:	d820      	bhi.n	26e4 <_malloc_r+0x194>
    26a2:	f000 fa05 	bl	2ab0 <__malloc_lock>
    26a6:	2610      	movs	r6, #16
    26a8:	2318      	movs	r3, #24
    26aa:	2002      	movs	r0, #2
    26ac:	4f79      	ldr	r7, [pc, #484]	; (2894 <_malloc_r+0x344>)
    26ae:	443b      	add	r3, r7
    26b0:	f1a3 0208 	sub.w	r2, r3, #8
    26b4:	685c      	ldr	r4, [r3, #4]
    26b6:	4294      	cmp	r4, r2
    26b8:	f000 813d 	beq.w	2936 <_malloc_r+0x3e6>
    26bc:	6863      	ldr	r3, [r4, #4]
    26be:	68e1      	ldr	r1, [r4, #12]
    26c0:	68a6      	ldr	r6, [r4, #8]
    26c2:	f023 0303 	bic.w	r3, r3, #3
    26c6:	4423      	add	r3, r4
    26c8:	4628      	mov	r0, r5
    26ca:	685a      	ldr	r2, [r3, #4]
    26cc:	60f1      	str	r1, [r6, #12]
    26ce:	f042 0201 	orr.w	r2, r2, #1
    26d2:	608e      	str	r6, [r1, #8]
    26d4:	605a      	str	r2, [r3, #4]
    26d6:	f000 f9f1 	bl	2abc <__malloc_unlock>
    26da:	3408      	adds	r4, #8
    26dc:	4620      	mov	r0, r4
    26de:	b003      	add	sp, #12
    26e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26e4:	2400      	movs	r4, #0
    26e6:	230c      	movs	r3, #12
    26e8:	4620      	mov	r0, r4
    26ea:	602b      	str	r3, [r5, #0]
    26ec:	b003      	add	sp, #12
    26ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26f2:	2040      	movs	r0, #64	; 0x40
    26f4:	f44f 7300 	mov.w	r3, #512	; 0x200
    26f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    26fc:	e74a      	b.n	2594 <_malloc_r+0x44>
    26fe:	4423      	add	r3, r4
    2700:	68e1      	ldr	r1, [r4, #12]
    2702:	685a      	ldr	r2, [r3, #4]
    2704:	68a6      	ldr	r6, [r4, #8]
    2706:	f042 0201 	orr.w	r2, r2, #1
    270a:	60f1      	str	r1, [r6, #12]
    270c:	4628      	mov	r0, r5
    270e:	608e      	str	r6, [r1, #8]
    2710:	605a      	str	r2, [r3, #4]
    2712:	f000 f9d3 	bl	2abc <__malloc_unlock>
    2716:	3408      	adds	r4, #8
    2718:	4620      	mov	r0, r4
    271a:	b003      	add	sp, #12
    271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2720:	4423      	add	r3, r4
    2722:	4628      	mov	r0, r5
    2724:	685a      	ldr	r2, [r3, #4]
    2726:	f042 0201 	orr.w	r2, r2, #1
    272a:	605a      	str	r2, [r3, #4]
    272c:	f000 f9c6 	bl	2abc <__malloc_unlock>
    2730:	3408      	adds	r4, #8
    2732:	4620      	mov	r0, r4
    2734:	b003      	add	sp, #12
    2736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    273a:	68bc      	ldr	r4, [r7, #8]
    273c:	6863      	ldr	r3, [r4, #4]
    273e:	f023 0803 	bic.w	r8, r3, #3
    2742:	45b0      	cmp	r8, r6
    2744:	d304      	bcc.n	2750 <_malloc_r+0x200>
    2746:	eba8 0306 	sub.w	r3, r8, r6
    274a:	2b0f      	cmp	r3, #15
    274c:	f300 8085 	bgt.w	285a <_malloc_r+0x30a>
    2750:	f8df 9158 	ldr.w	r9, [pc, #344]	; 28ac <_malloc_r+0x35c>
    2754:	4b50      	ldr	r3, [pc, #320]	; (2898 <_malloc_r+0x348>)
    2756:	f8d9 2000 	ldr.w	r2, [r9]
    275a:	681b      	ldr	r3, [r3, #0]
    275c:	3201      	adds	r2, #1
    275e:	4433      	add	r3, r6
    2760:	eb04 0a08 	add.w	sl, r4, r8
    2764:	f000 8155 	beq.w	2a12 <_malloc_r+0x4c2>
    2768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    276c:	330f      	adds	r3, #15
    276e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
    2772:	f02b 0b0f 	bic.w	fp, fp, #15
    2776:	4659      	mov	r1, fp
    2778:	4628      	mov	r0, r5
    277a:	f000 f9a5 	bl	2ac8 <_sbrk_r>
    277e:	1c41      	adds	r1, r0, #1
    2780:	4602      	mov	r2, r0
    2782:	f000 80fc 	beq.w	297e <_malloc_r+0x42e>
    2786:	4582      	cmp	sl, r0
    2788:	f200 80f7 	bhi.w	297a <_malloc_r+0x42a>
    278c:	4b43      	ldr	r3, [pc, #268]	; (289c <_malloc_r+0x34c>)
    278e:	6819      	ldr	r1, [r3, #0]
    2790:	4459      	add	r1, fp
    2792:	6019      	str	r1, [r3, #0]
    2794:	f000 814d 	beq.w	2a32 <_malloc_r+0x4e2>
    2798:	f8d9 0000 	ldr.w	r0, [r9]
    279c:	3001      	adds	r0, #1
    279e:	bf1b      	ittet	ne
    27a0:	eba2 0a0a 	subne.w	sl, r2, sl
    27a4:	4451      	addne	r1, sl
    27a6:	f8c9 2000 	streq.w	r2, [r9]
    27aa:	6019      	strne	r1, [r3, #0]
    27ac:	f012 0107 	ands.w	r1, r2, #7
    27b0:	f000 8115 	beq.w	29de <_malloc_r+0x48e>
    27b4:	f1c1 0008 	rsb	r0, r1, #8
    27b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    27bc:	4402      	add	r2, r0
    27be:	3108      	adds	r1, #8
    27c0:	eb02 090b 	add.w	r9, r2, fp
    27c4:	f3c9 090b 	ubfx	r9, r9, #0, #12
    27c8:	eba1 0909 	sub.w	r9, r1, r9
    27cc:	4649      	mov	r1, r9
    27ce:	4628      	mov	r0, r5
    27d0:	9301      	str	r3, [sp, #4]
    27d2:	9200      	str	r2, [sp, #0]
    27d4:	f000 f978 	bl	2ac8 <_sbrk_r>
    27d8:	1c43      	adds	r3, r0, #1
    27da:	e89d 000c 	ldmia.w	sp, {r2, r3}
    27de:	f000 8143 	beq.w	2a68 <_malloc_r+0x518>
    27e2:	1a80      	subs	r0, r0, r2
    27e4:	4448      	add	r0, r9
    27e6:	f040 0001 	orr.w	r0, r0, #1
    27ea:	6819      	ldr	r1, [r3, #0]
    27ec:	60ba      	str	r2, [r7, #8]
    27ee:	4449      	add	r1, r9
    27f0:	42bc      	cmp	r4, r7
    27f2:	6050      	str	r0, [r2, #4]
    27f4:	6019      	str	r1, [r3, #0]
    27f6:	d017      	beq.n	2828 <_malloc_r+0x2d8>
    27f8:	f1b8 0f0f 	cmp.w	r8, #15
    27fc:	f240 80fb 	bls.w	29f6 <_malloc_r+0x4a6>
    2800:	6860      	ldr	r0, [r4, #4]
    2802:	f1a8 020c 	sub.w	r2, r8, #12
    2806:	f022 0207 	bic.w	r2, r2, #7
    280a:	eb04 0e02 	add.w	lr, r4, r2
    280e:	f000 0001 	and.w	r0, r0, #1
    2812:	f04f 0c05 	mov.w	ip, #5
    2816:	4310      	orrs	r0, r2
    2818:	2a0f      	cmp	r2, #15
    281a:	6060      	str	r0, [r4, #4]
    281c:	f8ce c004 	str.w	ip, [lr, #4]
    2820:	f8ce c008 	str.w	ip, [lr, #8]
    2824:	f200 8117 	bhi.w	2a56 <_malloc_r+0x506>
    2828:	4b1d      	ldr	r3, [pc, #116]	; (28a0 <_malloc_r+0x350>)
    282a:	68bc      	ldr	r4, [r7, #8]
    282c:	681a      	ldr	r2, [r3, #0]
    282e:	4291      	cmp	r1, r2
    2830:	bf88      	it	hi
    2832:	6019      	strhi	r1, [r3, #0]
    2834:	4b1b      	ldr	r3, [pc, #108]	; (28a4 <_malloc_r+0x354>)
    2836:	681a      	ldr	r2, [r3, #0]
    2838:	4291      	cmp	r1, r2
    283a:	6862      	ldr	r2, [r4, #4]
    283c:	bf88      	it	hi
    283e:	6019      	strhi	r1, [r3, #0]
    2840:	f022 0203 	bic.w	r2, r2, #3
    2844:	4296      	cmp	r6, r2
    2846:	eba2 0306 	sub.w	r3, r2, r6
    284a:	d801      	bhi.n	2850 <_malloc_r+0x300>
    284c:	2b0f      	cmp	r3, #15
    284e:	dc04      	bgt.n	285a <_malloc_r+0x30a>
    2850:	4628      	mov	r0, r5
    2852:	f000 f933 	bl	2abc <__malloc_unlock>
    2856:	2400      	movs	r4, #0
    2858:	e740      	b.n	26dc <_malloc_r+0x18c>
    285a:	19a2      	adds	r2, r4, r6
    285c:	f043 0301 	orr.w	r3, r3, #1
    2860:	f046 0601 	orr.w	r6, r6, #1
    2864:	6066      	str	r6, [r4, #4]
    2866:	4628      	mov	r0, r5
    2868:	60ba      	str	r2, [r7, #8]
    286a:	6053      	str	r3, [r2, #4]
    286c:	f000 f926 	bl	2abc <__malloc_unlock>
    2870:	3408      	adds	r4, #8
    2872:	4620      	mov	r0, r4
    2874:	b003      	add	sp, #12
    2876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    287a:	2b14      	cmp	r3, #20
    287c:	d971      	bls.n	2962 <_malloc_r+0x412>
    287e:	2b54      	cmp	r3, #84	; 0x54
    2880:	f200 80a3 	bhi.w	29ca <_malloc_r+0x47a>
    2884:	0b33      	lsrs	r3, r6, #12
    2886:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    288a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
    288e:	00c3      	lsls	r3, r0, #3
    2890:	e680      	b.n	2594 <_malloc_r+0x44>
    2892:	bf00      	nop
    2894:	20000434 	.word	0x20000434
    2898:	20000904 	.word	0x20000904
    289c:	200008d4 	.word	0x200008d4
    28a0:	200008fc 	.word	0x200008fc
    28a4:	20000900 	.word	0x20000900
    28a8:	2000043c 	.word	0x2000043c
    28ac:	2000083c 	.word	0x2000083c
    28b0:	0a5a      	lsrs	r2, r3, #9
    28b2:	2a04      	cmp	r2, #4
    28b4:	d95b      	bls.n	296e <_malloc_r+0x41e>
    28b6:	2a14      	cmp	r2, #20
    28b8:	f200 80ae 	bhi.w	2a18 <_malloc_r+0x4c8>
    28bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    28c0:	00c9      	lsls	r1, r1, #3
    28c2:	325b      	adds	r2, #91	; 0x5b
    28c4:	eb07 0c01 	add.w	ip, r7, r1
    28c8:	5879      	ldr	r1, [r7, r1]
    28ca:	f1ac 0c08 	sub.w	ip, ip, #8
    28ce:	458c      	cmp	ip, r1
    28d0:	f000 8088 	beq.w	29e4 <_malloc_r+0x494>
    28d4:	684a      	ldr	r2, [r1, #4]
    28d6:	f022 0203 	bic.w	r2, r2, #3
    28da:	4293      	cmp	r3, r2
    28dc:	d273      	bcs.n	29c6 <_malloc_r+0x476>
    28de:	6889      	ldr	r1, [r1, #8]
    28e0:	458c      	cmp	ip, r1
    28e2:	d1f7      	bne.n	28d4 <_malloc_r+0x384>
    28e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	60e2      	str	r2, [r4, #12]
    28ec:	f8c4 c008 	str.w	ip, [r4, #8]
    28f0:	6094      	str	r4, [r2, #8]
    28f2:	f8cc 400c 	str.w	r4, [ip, #12]
    28f6:	e68f      	b.n	2618 <_malloc_r+0xc8>
    28f8:	19a1      	adds	r1, r4, r6
    28fa:	f046 0c01 	orr.w	ip, r6, #1
    28fe:	f042 0601 	orr.w	r6, r2, #1
    2902:	f8c4 c004 	str.w	ip, [r4, #4]
    2906:	4628      	mov	r0, r5
    2908:	6179      	str	r1, [r7, #20]
    290a:	6139      	str	r1, [r7, #16]
    290c:	f8c1 e00c 	str.w	lr, [r1, #12]
    2910:	f8c1 e008 	str.w	lr, [r1, #8]
    2914:	604e      	str	r6, [r1, #4]
    2916:	50e2      	str	r2, [r4, r3]
    2918:	f000 f8d0 	bl	2abc <__malloc_unlock>
    291c:	3408      	adds	r4, #8
    291e:	e6dd      	b.n	26dc <_malloc_r+0x18c>
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	e679      	b.n	2618 <_malloc_r+0xc8>
    2924:	f108 0801 	add.w	r8, r8, #1
    2928:	f018 0f03 	tst.w	r8, #3
    292c:	f10c 0c08 	add.w	ip, ip, #8
    2930:	f47f ae85 	bne.w	263e <_malloc_r+0xee>
    2934:	e02d      	b.n	2992 <_malloc_r+0x442>
    2936:	68dc      	ldr	r4, [r3, #12]
    2938:	42a3      	cmp	r3, r4
    293a:	bf08      	it	eq
    293c:	3002      	addeq	r0, #2
    293e:	f43f ae3e 	beq.w	25be <_malloc_r+0x6e>
    2942:	e6bb      	b.n	26bc <_malloc_r+0x16c>
    2944:	4419      	add	r1, r3
    2946:	461c      	mov	r4, r3
    2948:	684a      	ldr	r2, [r1, #4]
    294a:	68db      	ldr	r3, [r3, #12]
    294c:	f854 6f08 	ldr.w	r6, [r4, #8]!
    2950:	f042 0201 	orr.w	r2, r2, #1
    2954:	604a      	str	r2, [r1, #4]
    2956:	4628      	mov	r0, r5
    2958:	60f3      	str	r3, [r6, #12]
    295a:	609e      	str	r6, [r3, #8]
    295c:	f000 f8ae 	bl	2abc <__malloc_unlock>
    2960:	e6bc      	b.n	26dc <_malloc_r+0x18c>
    2962:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    2966:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
    296a:	00c3      	lsls	r3, r0, #3
    296c:	e612      	b.n	2594 <_malloc_r+0x44>
    296e:	099a      	lsrs	r2, r3, #6
    2970:	f102 0139 	add.w	r1, r2, #57	; 0x39
    2974:	00c9      	lsls	r1, r1, #3
    2976:	3238      	adds	r2, #56	; 0x38
    2978:	e7a4      	b.n	28c4 <_malloc_r+0x374>
    297a:	42bc      	cmp	r4, r7
    297c:	d054      	beq.n	2a28 <_malloc_r+0x4d8>
    297e:	68bc      	ldr	r4, [r7, #8]
    2980:	6862      	ldr	r2, [r4, #4]
    2982:	f022 0203 	bic.w	r2, r2, #3
    2986:	e75d      	b.n	2844 <_malloc_r+0x2f4>
    2988:	f859 3908 	ldr.w	r3, [r9], #-8
    298c:	4599      	cmp	r9, r3
    298e:	f040 8086 	bne.w	2a9e <_malloc_r+0x54e>
    2992:	f010 0f03 	tst.w	r0, #3
    2996:	f100 30ff 	add.w	r0, r0, #4294967295
    299a:	d1f5      	bne.n	2988 <_malloc_r+0x438>
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	ea23 0304 	bic.w	r3, r3, r4
    29a2:	607b      	str	r3, [r7, #4]
    29a4:	0064      	lsls	r4, r4, #1
    29a6:	429c      	cmp	r4, r3
    29a8:	f63f aec7 	bhi.w	273a <_malloc_r+0x1ea>
    29ac:	2c00      	cmp	r4, #0
    29ae:	f43f aec4 	beq.w	273a <_malloc_r+0x1ea>
    29b2:	421c      	tst	r4, r3
    29b4:	4640      	mov	r0, r8
    29b6:	f47f ae3e 	bne.w	2636 <_malloc_r+0xe6>
    29ba:	0064      	lsls	r4, r4, #1
    29bc:	421c      	tst	r4, r3
    29be:	f100 0004 	add.w	r0, r0, #4
    29c2:	d0fa      	beq.n	29ba <_malloc_r+0x46a>
    29c4:	e637      	b.n	2636 <_malloc_r+0xe6>
    29c6:	468c      	mov	ip, r1
    29c8:	e78c      	b.n	28e4 <_malloc_r+0x394>
    29ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    29ce:	d815      	bhi.n	29fc <_malloc_r+0x4ac>
    29d0:	0bf3      	lsrs	r3, r6, #15
    29d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
    29d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
    29da:	00c3      	lsls	r3, r0, #3
    29dc:	e5da      	b.n	2594 <_malloc_r+0x44>
    29de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    29e2:	e6ed      	b.n	27c0 <_malloc_r+0x270>
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	1092      	asrs	r2, r2, #2
    29e8:	2101      	movs	r1, #1
    29ea:	fa01 f202 	lsl.w	r2, r1, r2
    29ee:	4313      	orrs	r3, r2
    29f0:	607b      	str	r3, [r7, #4]
    29f2:	4662      	mov	r2, ip
    29f4:	e779      	b.n	28ea <_malloc_r+0x39a>
    29f6:	2301      	movs	r3, #1
    29f8:	6053      	str	r3, [r2, #4]
    29fa:	e729      	b.n	2850 <_malloc_r+0x300>
    29fc:	f240 5254 	movw	r2, #1364	; 0x554
    2a00:	4293      	cmp	r3, r2
    2a02:	d822      	bhi.n	2a4a <_malloc_r+0x4fa>
    2a04:	0cb3      	lsrs	r3, r6, #18
    2a06:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    2a0a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
    2a0e:	00c3      	lsls	r3, r0, #3
    2a10:	e5c0      	b.n	2594 <_malloc_r+0x44>
    2a12:	f103 0b10 	add.w	fp, r3, #16
    2a16:	e6ae      	b.n	2776 <_malloc_r+0x226>
    2a18:	2a54      	cmp	r2, #84	; 0x54
    2a1a:	d829      	bhi.n	2a70 <_malloc_r+0x520>
    2a1c:	0b1a      	lsrs	r2, r3, #12
    2a1e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2a22:	00c9      	lsls	r1, r1, #3
    2a24:	326e      	adds	r2, #110	; 0x6e
    2a26:	e74d      	b.n	28c4 <_malloc_r+0x374>
    2a28:	4b20      	ldr	r3, [pc, #128]	; (2aac <_malloc_r+0x55c>)
    2a2a:	6819      	ldr	r1, [r3, #0]
    2a2c:	4459      	add	r1, fp
    2a2e:	6019      	str	r1, [r3, #0]
    2a30:	e6b2      	b.n	2798 <_malloc_r+0x248>
    2a32:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2a36:	2800      	cmp	r0, #0
    2a38:	f47f aeae 	bne.w	2798 <_malloc_r+0x248>
    2a3c:	eb08 030b 	add.w	r3, r8, fp
    2a40:	68ba      	ldr	r2, [r7, #8]
    2a42:	f043 0301 	orr.w	r3, r3, #1
    2a46:	6053      	str	r3, [r2, #4]
    2a48:	e6ee      	b.n	2828 <_malloc_r+0x2d8>
    2a4a:	207f      	movs	r0, #127	; 0x7f
    2a4c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    2a50:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
    2a54:	e59e      	b.n	2594 <_malloc_r+0x44>
    2a56:	f104 0108 	add.w	r1, r4, #8
    2a5a:	4628      	mov	r0, r5
    2a5c:	9300      	str	r3, [sp, #0]
    2a5e:	f7ff fc29 	bl	22b4 <_free_r>
    2a62:	9b00      	ldr	r3, [sp, #0]
    2a64:	6819      	ldr	r1, [r3, #0]
    2a66:	e6df      	b.n	2828 <_malloc_r+0x2d8>
    2a68:	2001      	movs	r0, #1
    2a6a:	f04f 0900 	mov.w	r9, #0
    2a6e:	e6bc      	b.n	27ea <_malloc_r+0x29a>
    2a70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2a74:	d805      	bhi.n	2a82 <_malloc_r+0x532>
    2a76:	0bda      	lsrs	r2, r3, #15
    2a78:	f102 0178 	add.w	r1, r2, #120	; 0x78
    2a7c:	00c9      	lsls	r1, r1, #3
    2a7e:	3277      	adds	r2, #119	; 0x77
    2a80:	e720      	b.n	28c4 <_malloc_r+0x374>
    2a82:	f240 5154 	movw	r1, #1364	; 0x554
    2a86:	428a      	cmp	r2, r1
    2a88:	d805      	bhi.n	2a96 <_malloc_r+0x546>
    2a8a:	0c9a      	lsrs	r2, r3, #18
    2a8c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2a90:	00c9      	lsls	r1, r1, #3
    2a92:	327c      	adds	r2, #124	; 0x7c
    2a94:	e716      	b.n	28c4 <_malloc_r+0x374>
    2a96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2a9a:	227e      	movs	r2, #126	; 0x7e
    2a9c:	e712      	b.n	28c4 <_malloc_r+0x374>
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	e780      	b.n	29a4 <_malloc_r+0x454>
    2aa2:	08f0      	lsrs	r0, r6, #3
    2aa4:	f106 0308 	add.w	r3, r6, #8
    2aa8:	e600      	b.n	26ac <_malloc_r+0x15c>
    2aaa:	bf00      	nop
    2aac:	200008d4 	.word	0x200008d4

00002ab0 <__malloc_lock>:
    2ab0:	4801      	ldr	r0, [pc, #4]	; (2ab8 <__malloc_lock+0x8>)
    2ab2:	f7ff bd13 	b.w	24dc <__retarget_lock_acquire_recursive>
    2ab6:	bf00      	nop
    2ab8:	20000968 	.word	0x20000968

00002abc <__malloc_unlock>:
    2abc:	4801      	ldr	r0, [pc, #4]	; (2ac4 <__malloc_unlock+0x8>)
    2abe:	f7ff bd0f 	b.w	24e0 <__retarget_lock_release_recursive>
    2ac2:	bf00      	nop
    2ac4:	20000968 	.word	0x20000968

00002ac8 <_sbrk_r>:
    2ac8:	b538      	push	{r3, r4, r5, lr}
    2aca:	4c07      	ldr	r4, [pc, #28]	; (2ae8 <_sbrk_r+0x20>)
    2acc:	2300      	movs	r3, #0
    2ace:	4605      	mov	r5, r0
    2ad0:	4608      	mov	r0, r1
    2ad2:	6023      	str	r3, [r4, #0]
    2ad4:	f000 f99a 	bl	2e0c <_sbrk>
    2ad8:	1c43      	adds	r3, r0, #1
    2ada:	d000      	beq.n	2ade <_sbrk_r+0x16>
    2adc:	bd38      	pop	{r3, r4, r5, pc}
    2ade:	6823      	ldr	r3, [r4, #0]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d0fb      	beq.n	2adc <_sbrk_r+0x14>
    2ae4:	602b      	str	r3, [r5, #0]
    2ae6:	bd38      	pop	{r3, r4, r5, pc}
    2ae8:	2000097c 	.word	0x2000097c

00002aec <__sread>:
    2aec:	b510      	push	{r4, lr}
    2aee:	460c      	mov	r4, r1
    2af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2af4:	f000 f954 	bl	2da0 <_read_r>
    2af8:	2800      	cmp	r0, #0
    2afa:	db03      	blt.n	2b04 <__sread+0x18>
    2afc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2afe:	4403      	add	r3, r0
    2b00:	6523      	str	r3, [r4, #80]	; 0x50
    2b02:	bd10      	pop	{r4, pc}
    2b04:	89a3      	ldrh	r3, [r4, #12]
    2b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2b0a:	81a3      	strh	r3, [r4, #12]
    2b0c:	bd10      	pop	{r4, pc}
    2b0e:	bf00      	nop

00002b10 <__swrite>:
    2b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b14:	4616      	mov	r6, r2
    2b16:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    2b1a:	461f      	mov	r7, r3
    2b1c:	05d3      	lsls	r3, r2, #23
    2b1e:	460c      	mov	r4, r1
    2b20:	4605      	mov	r5, r0
    2b22:	d507      	bpl.n	2b34 <__swrite+0x24>
    2b24:	2200      	movs	r2, #0
    2b26:	2302      	movs	r3, #2
    2b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2b2c:	f000 f922 	bl	2d74 <_lseek_r>
    2b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    2b3c:	81a2      	strh	r2, [r4, #12]
    2b3e:	463b      	mov	r3, r7
    2b40:	4632      	mov	r2, r6
    2b42:	4628      	mov	r0, r5
    2b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2b48:	f000 b814 	b.w	2b74 <_write_r>

00002b4c <__sseek>:
    2b4c:	b510      	push	{r4, lr}
    2b4e:	460c      	mov	r4, r1
    2b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2b54:	f000 f90e 	bl	2d74 <_lseek_r>
    2b58:	89a3      	ldrh	r3, [r4, #12]
    2b5a:	1c42      	adds	r2, r0, #1
    2b5c:	bf0e      	itee	eq
    2b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2b66:	6520      	strne	r0, [r4, #80]	; 0x50
    2b68:	81a3      	strh	r3, [r4, #12]
    2b6a:	bd10      	pop	{r4, pc}

00002b6c <__sclose>:
    2b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2b70:	f000 b878 	b.w	2c64 <_close_r>

00002b74 <_write_r>:
    2b74:	b570      	push	{r4, r5, r6, lr}
    2b76:	460d      	mov	r5, r1
    2b78:	4c08      	ldr	r4, [pc, #32]	; (2b9c <_write_r+0x28>)
    2b7a:	4611      	mov	r1, r2
    2b7c:	4606      	mov	r6, r0
    2b7e:	461a      	mov	r2, r3
    2b80:	4628      	mov	r0, r5
    2b82:	2300      	movs	r3, #0
    2b84:	6023      	str	r3, [r4, #0]
    2b86:	f000 f94f 	bl	2e28 <_write>
    2b8a:	1c43      	adds	r3, r0, #1
    2b8c:	d000      	beq.n	2b90 <_write_r+0x1c>
    2b8e:	bd70      	pop	{r4, r5, r6, pc}
    2b90:	6823      	ldr	r3, [r4, #0]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d0fb      	beq.n	2b8e <_write_r+0x1a>
    2b96:	6033      	str	r3, [r6, #0]
    2b98:	bd70      	pop	{r4, r5, r6, pc}
    2b9a:	bf00      	nop
    2b9c:	2000097c 	.word	0x2000097c

00002ba0 <__register_exitproc>:
    2ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ba4:	4d2c      	ldr	r5, [pc, #176]	; (2c58 <__register_exitproc+0xb8>)
    2ba6:	4606      	mov	r6, r0
    2ba8:	6828      	ldr	r0, [r5, #0]
    2baa:	4698      	mov	r8, r3
    2bac:	460f      	mov	r7, r1
    2bae:	4691      	mov	r9, r2
    2bb0:	f7ff fc94 	bl	24dc <__retarget_lock_acquire_recursive>
    2bb4:	4b29      	ldr	r3, [pc, #164]	; (2c5c <__register_exitproc+0xbc>)
    2bb6:	681c      	ldr	r4, [r3, #0]
    2bb8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d03e      	beq.n	2c3e <__register_exitproc+0x9e>
    2bc0:	685a      	ldr	r2, [r3, #4]
    2bc2:	2a1f      	cmp	r2, #31
    2bc4:	dc1c      	bgt.n	2c00 <__register_exitproc+0x60>
    2bc6:	f102 0e01 	add.w	lr, r2, #1
    2bca:	b176      	cbz	r6, 2bea <__register_exitproc+0x4a>
    2bcc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    2bd0:	2401      	movs	r4, #1
    2bd2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    2bd6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    2bda:	4094      	lsls	r4, r2
    2bdc:	4320      	orrs	r0, r4
    2bde:	2e02      	cmp	r6, #2
    2be0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    2be4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    2be8:	d023      	beq.n	2c32 <__register_exitproc+0x92>
    2bea:	3202      	adds	r2, #2
    2bec:	f8c3 e004 	str.w	lr, [r3, #4]
    2bf0:	6828      	ldr	r0, [r5, #0]
    2bf2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    2bf6:	f7ff fc73 	bl	24e0 <__retarget_lock_release_recursive>
    2bfa:	2000      	movs	r0, #0
    2bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c00:	4b17      	ldr	r3, [pc, #92]	; (2c60 <__register_exitproc+0xc0>)
    2c02:	b30b      	cbz	r3, 2c48 <__register_exitproc+0xa8>
    2c04:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2c08:	f7ff fc9a 	bl	2540 <malloc>
    2c0c:	4603      	mov	r3, r0
    2c0e:	b1d8      	cbz	r0, 2c48 <__register_exitproc+0xa8>
    2c10:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    2c14:	6002      	str	r2, [r0, #0]
    2c16:	2100      	movs	r1, #0
    2c18:	6041      	str	r1, [r0, #4]
    2c1a:	460a      	mov	r2, r1
    2c1c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2c20:	f04f 0e01 	mov.w	lr, #1
    2c24:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    2c28:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    2c2c:	2e00      	cmp	r6, #0
    2c2e:	d0dc      	beq.n	2bea <__register_exitproc+0x4a>
    2c30:	e7cc      	b.n	2bcc <__register_exitproc+0x2c>
    2c32:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    2c36:	430c      	orrs	r4, r1
    2c38:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    2c3c:	e7d5      	b.n	2bea <__register_exitproc+0x4a>
    2c3e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    2c42:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    2c46:	e7bb      	b.n	2bc0 <__register_exitproc+0x20>
    2c48:	6828      	ldr	r0, [r5, #0]
    2c4a:	f7ff fc49 	bl	24e0 <__retarget_lock_release_recursive>
    2c4e:	f04f 30ff 	mov.w	r0, #4294967295
    2c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c56:	bf00      	nop
    2c58:	20000430 	.word	0x20000430
    2c5c:	00002f28 	.word	0x00002f28
    2c60:	00002541 	.word	0x00002541

00002c64 <_close_r>:
    2c64:	b538      	push	{r3, r4, r5, lr}
    2c66:	4c07      	ldr	r4, [pc, #28]	; (2c84 <_close_r+0x20>)
    2c68:	2300      	movs	r3, #0
    2c6a:	4605      	mov	r5, r0
    2c6c:	4608      	mov	r0, r1
    2c6e:	6023      	str	r3, [r4, #0]
    2c70:	f000 f8ac 	bl	2dcc <_close>
    2c74:	1c43      	adds	r3, r0, #1
    2c76:	d000      	beq.n	2c7a <_close_r+0x16>
    2c78:	bd38      	pop	{r3, r4, r5, pc}
    2c7a:	6823      	ldr	r3, [r4, #0]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d0fb      	beq.n	2c78 <_close_r+0x14>
    2c80:	602b      	str	r3, [r5, #0]
    2c82:	bd38      	pop	{r3, r4, r5, pc}
    2c84:	2000097c 	.word	0x2000097c

00002c88 <_fclose_r>:
    2c88:	b570      	push	{r4, r5, r6, lr}
    2c8a:	b159      	cbz	r1, 2ca4 <_fclose_r+0x1c>
    2c8c:	4605      	mov	r5, r0
    2c8e:	460c      	mov	r4, r1
    2c90:	b110      	cbz	r0, 2c98 <_fclose_r+0x10>
    2c92:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2c94:	2b00      	cmp	r3, #0
    2c96:	d03c      	beq.n	2d12 <_fclose_r+0x8a>
    2c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2c9a:	07d8      	lsls	r0, r3, #31
    2c9c:	d505      	bpl.n	2caa <_fclose_r+0x22>
    2c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2ca2:	b92b      	cbnz	r3, 2cb0 <_fclose_r+0x28>
    2ca4:	2600      	movs	r6, #0
    2ca6:	4630      	mov	r0, r6
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	89a3      	ldrh	r3, [r4, #12]
    2cac:	0599      	lsls	r1, r3, #22
    2cae:	d53c      	bpl.n	2d2a <_fclose_r+0xa2>
    2cb0:	4621      	mov	r1, r4
    2cb2:	4628      	mov	r0, r5
    2cb4:	f7ff f964 	bl	1f80 <__sflush_r>
    2cb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cba:	4606      	mov	r6, r0
    2cbc:	b133      	cbz	r3, 2ccc <_fclose_r+0x44>
    2cbe:	69e1      	ldr	r1, [r4, #28]
    2cc0:	4628      	mov	r0, r5
    2cc2:	4798      	blx	r3
    2cc4:	2800      	cmp	r0, #0
    2cc6:	bfb8      	it	lt
    2cc8:	f04f 36ff 	movlt.w	r6, #4294967295
    2ccc:	89a3      	ldrh	r3, [r4, #12]
    2cce:	061a      	lsls	r2, r3, #24
    2cd0:	d422      	bmi.n	2d18 <_fclose_r+0x90>
    2cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2cd4:	b141      	cbz	r1, 2ce8 <_fclose_r+0x60>
    2cd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    2cda:	4299      	cmp	r1, r3
    2cdc:	d002      	beq.n	2ce4 <_fclose_r+0x5c>
    2cde:	4628      	mov	r0, r5
    2ce0:	f7ff fae8 	bl	22b4 <_free_r>
    2ce4:	2300      	movs	r3, #0
    2ce6:	6323      	str	r3, [r4, #48]	; 0x30
    2ce8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2cea:	b121      	cbz	r1, 2cf6 <_fclose_r+0x6e>
    2cec:	4628      	mov	r0, r5
    2cee:	f7ff fae1 	bl	22b4 <_free_r>
    2cf2:	2300      	movs	r3, #0
    2cf4:	6463      	str	r3, [r4, #68]	; 0x44
    2cf6:	f7ff fa67 	bl	21c8 <__sfp_lock_acquire>
    2cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2cfc:	2200      	movs	r2, #0
    2cfe:	07db      	lsls	r3, r3, #31
    2d00:	81a2      	strh	r2, [r4, #12]
    2d02:	d50e      	bpl.n	2d22 <_fclose_r+0x9a>
    2d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2d06:	f7ff fbe7 	bl	24d8 <__retarget_lock_close_recursive>
    2d0a:	f7ff fa63 	bl	21d4 <__sfp_lock_release>
    2d0e:	4630      	mov	r0, r6
    2d10:	bd70      	pop	{r4, r5, r6, pc}
    2d12:	f7ff fa2d 	bl	2170 <__sinit>
    2d16:	e7bf      	b.n	2c98 <_fclose_r+0x10>
    2d18:	6921      	ldr	r1, [r4, #16]
    2d1a:	4628      	mov	r0, r5
    2d1c:	f7ff faca 	bl	22b4 <_free_r>
    2d20:	e7d7      	b.n	2cd2 <_fclose_r+0x4a>
    2d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2d24:	f7ff fbdc 	bl	24e0 <__retarget_lock_release_recursive>
    2d28:	e7ec      	b.n	2d04 <_fclose_r+0x7c>
    2d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2d2c:	f7ff fbd6 	bl	24dc <__retarget_lock_acquire_recursive>
    2d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d1bb      	bne.n	2cb0 <_fclose_r+0x28>
    2d38:	6e66      	ldr	r6, [r4, #100]	; 0x64
    2d3a:	f016 0601 	ands.w	r6, r6, #1
    2d3e:	d1b1      	bne.n	2ca4 <_fclose_r+0x1c>
    2d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2d42:	f7ff fbcd 	bl	24e0 <__retarget_lock_release_recursive>
    2d46:	4630      	mov	r0, r6
    2d48:	bd70      	pop	{r4, r5, r6, pc}
    2d4a:	bf00      	nop

00002d4c <_fstat_r>:
    2d4c:	b538      	push	{r3, r4, r5, lr}
    2d4e:	460b      	mov	r3, r1
    2d50:	4c07      	ldr	r4, [pc, #28]	; (2d70 <_fstat_r+0x24>)
    2d52:	4605      	mov	r5, r0
    2d54:	4611      	mov	r1, r2
    2d56:	4618      	mov	r0, r3
    2d58:	2300      	movs	r3, #0
    2d5a:	6023      	str	r3, [r4, #0]
    2d5c:	f000 f83e 	bl	2ddc <_fstat>
    2d60:	1c43      	adds	r3, r0, #1
    2d62:	d000      	beq.n	2d66 <_fstat_r+0x1a>
    2d64:	bd38      	pop	{r3, r4, r5, pc}
    2d66:	6823      	ldr	r3, [r4, #0]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d0fb      	beq.n	2d64 <_fstat_r+0x18>
    2d6c:	602b      	str	r3, [r5, #0]
    2d6e:	bd38      	pop	{r3, r4, r5, pc}
    2d70:	2000097c 	.word	0x2000097c

00002d74 <_lseek_r>:
    2d74:	b570      	push	{r4, r5, r6, lr}
    2d76:	460d      	mov	r5, r1
    2d78:	4c08      	ldr	r4, [pc, #32]	; (2d9c <_lseek_r+0x28>)
    2d7a:	4611      	mov	r1, r2
    2d7c:	4606      	mov	r6, r0
    2d7e:	461a      	mov	r2, r3
    2d80:	4628      	mov	r0, r5
    2d82:	2300      	movs	r3, #0
    2d84:	6023      	str	r3, [r4, #0]
    2d86:	f000 f831 	bl	2dec <_lseek>
    2d8a:	1c43      	adds	r3, r0, #1
    2d8c:	d000      	beq.n	2d90 <_lseek_r+0x1c>
    2d8e:	bd70      	pop	{r4, r5, r6, pc}
    2d90:	6823      	ldr	r3, [r4, #0]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d0fb      	beq.n	2d8e <_lseek_r+0x1a>
    2d96:	6033      	str	r3, [r6, #0]
    2d98:	bd70      	pop	{r4, r5, r6, pc}
    2d9a:	bf00      	nop
    2d9c:	2000097c 	.word	0x2000097c

00002da0 <_read_r>:
    2da0:	b570      	push	{r4, r5, r6, lr}
    2da2:	460d      	mov	r5, r1
    2da4:	4c08      	ldr	r4, [pc, #32]	; (2dc8 <_read_r+0x28>)
    2da6:	4611      	mov	r1, r2
    2da8:	4606      	mov	r6, r0
    2daa:	461a      	mov	r2, r3
    2dac:	4628      	mov	r0, r5
    2dae:	2300      	movs	r3, #0
    2db0:	6023      	str	r3, [r4, #0]
    2db2:	f000 f823 	bl	2dfc <_read>
    2db6:	1c43      	adds	r3, r0, #1
    2db8:	d000      	beq.n	2dbc <_read_r+0x1c>
    2dba:	bd70      	pop	{r4, r5, r6, pc}
    2dbc:	6823      	ldr	r3, [r4, #0]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d0fb      	beq.n	2dba <_read_r+0x1a>
    2dc2:	6033      	str	r3, [r6, #0]
    2dc4:	bd70      	pop	{r4, r5, r6, pc}
    2dc6:	bf00      	nop
    2dc8:	2000097c 	.word	0x2000097c

00002dcc <_close>:
    2dcc:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <_close+0xc>)
    2dce:	2258      	movs	r2, #88	; 0x58
    2dd0:	601a      	str	r2, [r3, #0]
    2dd2:	f04f 30ff 	mov.w	r0, #4294967295
    2dd6:	4770      	bx	lr
    2dd8:	2000097c 	.word	0x2000097c

00002ddc <_fstat>:
    2ddc:	4b02      	ldr	r3, [pc, #8]	; (2de8 <_fstat+0xc>)
    2dde:	2258      	movs	r2, #88	; 0x58
    2de0:	601a      	str	r2, [r3, #0]
    2de2:	f04f 30ff 	mov.w	r0, #4294967295
    2de6:	4770      	bx	lr
    2de8:	2000097c 	.word	0x2000097c

00002dec <_lseek>:
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <_lseek+0xc>)
    2dee:	2258      	movs	r2, #88	; 0x58
    2df0:	601a      	str	r2, [r3, #0]
    2df2:	f04f 30ff 	mov.w	r0, #4294967295
    2df6:	4770      	bx	lr
    2df8:	2000097c 	.word	0x2000097c

00002dfc <_read>:
    2dfc:	4b02      	ldr	r3, [pc, #8]	; (2e08 <_read+0xc>)
    2dfe:	2258      	movs	r2, #88	; 0x58
    2e00:	601a      	str	r2, [r3, #0]
    2e02:	f04f 30ff 	mov.w	r0, #4294967295
    2e06:	4770      	bx	lr
    2e08:	2000097c 	.word	0x2000097c

00002e0c <_sbrk>:
    2e0c:	4a04      	ldr	r2, [pc, #16]	; (2e20 <_sbrk+0x14>)
    2e0e:	4905      	ldr	r1, [pc, #20]	; (2e24 <_sbrk+0x18>)
    2e10:	6813      	ldr	r3, [r2, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	bf08      	it	eq
    2e16:	460b      	moveq	r3, r1
    2e18:	4418      	add	r0, r3
    2e1a:	6010      	str	r0, [r2, #0]
    2e1c:	4618      	mov	r0, r3
    2e1e:	4770      	bx	lr
    2e20:	20000908 	.word	0x20000908
    2e24:	20010980 	.word	0x20010980

00002e28 <_write>:
    2e28:	4b02      	ldr	r3, [pc, #8]	; (2e34 <_write+0xc>)
    2e2a:	2258      	movs	r2, #88	; 0x58
    2e2c:	601a      	str	r2, [r3, #0]
    2e2e:	f04f 30ff 	mov.w	r0, #4294967295
    2e32:	4770      	bx	lr
    2e34:	2000097c 	.word	0x2000097c
    2e38:	00000009 	.word	0x00000009
    2e3c:	74726f50 	.word	0x74726f50
    2e40:	74696172 	.word	0x74696172
    2e44:	00705520 	.word	0x00705520
    2e48:	74726f50 	.word	0x74726f50
    2e4c:	74696172 	.word	0x74696172
    2e50:	776f4420 	.word	0x776f4420
    2e54:	0000006e 	.word	0x0000006e
    2e58:	646e614c 	.word	0x646e614c
    2e5c:	70616373 	.word	0x70616373
    2e60:	69522065 	.word	0x69522065
    2e64:	00746867 	.word	0x00746867
    2e68:	646e614c 	.word	0x646e614c
    2e6c:	70616373 	.word	0x70616373
    2e70:	654c2065 	.word	0x654c2065
    2e74:	00007466 	.word	0x00007466
    2e78:	74616c46 	.word	0x74616c46
    2e7c:	00000000 	.word	0x00000000
    2e80:	00000d0a 	.word	0x00000d0a
    2e84:	682f2e2e 	.word	0x682f2e2e
    2e88:	732f6c61 	.word	0x732f6c61
    2e8c:	682f6372 	.word	0x682f6372
    2e90:	695f6c61 	.word	0x695f6c61
    2e94:	00632e6f 	.word	0x00632e6f
    2e98:	682f2e2e 	.word	0x682f2e2e
    2e9c:	732f6c61 	.word	0x732f6c61
    2ea0:	682f6372 	.word	0x682f6372
    2ea4:	755f6c61 	.word	0x755f6c61
    2ea8:	74726173 	.word	0x74726173
    2eac:	6e79735f 	.word	0x6e79735f
    2eb0:	00632e63 	.word	0x00632e63
    2eb4:	40003000 	.word	0x40003000
    2eb8:	40003400 	.word	0x40003400
    2ebc:	41012000 	.word	0x41012000
    2ec0:	41014000 	.word	0x41014000
    2ec4:	43000000 	.word	0x43000000
    2ec8:	43000400 	.word	0x43000400
    2ecc:	43000800 	.word	0x43000800
    2ed0:	43000c00 	.word	0x43000c00

00002ed4 <_i2cms>:
    2ed4:	00000006 00200014 00000100 00003635     ...... .....56..
    2ee4:	00d70000 00b71b00 682f2e2e 732f6c70     ........../hpl/s
    2ef4:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2f04:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    2f14:	695f6c61 6d5f6332 7973615f 632e636e     al_i2c_m_async.c
    2f24:	00000000                                ....

00002f28 <_global_impure_ptr>:
    2f28:	20000008 33323130 37363534 62613938     ... 0123456789ab
    2f38:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    2f48:	76757473 7a797877 00000000              stuvwxyz....

00002f54 <_init>:
    2f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f56:	bf00      	nop
    2f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f5a:	bc08      	pop	{r3}
    2f5c:	469e      	mov	lr, r3
    2f5e:	4770      	bx	lr

00002f60 <__init_array_start>:
    2f60:	00001f61 	.word	0x00001f61

00002f64 <__frame_dummy_init_array_entry>:
    2f64:	00000289 00000521                       ....!...

00002f6c <_fini>:
    2f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f6e:	bf00      	nop
    2f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f72:	bc08      	pop	{r3}
    2f74:	469e      	mov	lr, r3
    2f76:	4770      	bx	lr

00002f78 <__fini_array_start>:
    2f78:	00000265 	.word	0x00000265
