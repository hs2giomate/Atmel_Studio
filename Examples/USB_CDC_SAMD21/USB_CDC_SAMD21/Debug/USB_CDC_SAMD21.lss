
USB_CDC_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bcc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005d0  20000068  00002c34  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000638  00003204  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e176  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bbb  00000000  00000000  0003e25f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009009  00000000  00000000  00040e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e0  00000000  00000000  00049e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a48  00000000  00000000  0004a403  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019489  00000000  00000000  0004ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c4b2  00000000  00000000  000642d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087c75  00000000  00000000  00070786  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e98  00000000  00000000  000f83fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 26 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     8&. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	c9 1b 00 00 29 01 00 00 29 01 00 00 29 01 00 00     ....)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002bcc 	.word	0x00002bcc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002bcc 	.word	0x00002bcc
     10c:	00002bcc 	.word	0x00002bcc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000002dd 	.word	0x000002dd
     124:	00002aa9 	.word	0x00002aa9

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00002bcc 	.word	0x00002bcc
     1dc:	20000000 	.word	0x20000000
     1e0:	20000068 	.word	0x20000068
     1e4:	20000004 	.word	0x20000004
     1e8:	20000068 	.word	0x20000068
     1ec:	20000638 	.word	0x20000638
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00002ab5 	.word	0x00002ab5
     20c:	000029cd 	.word	0x000029cd

00000210 <TARGET_USB_PORT_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void TARGET_USB_PORT_init(void)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	46c6      	mov	lr, r8
     214:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     216:	24c0      	movs	r4, #192	; 0xc0
     218:	05e4      	lsls	r4, r4, #23
     21a:	2280      	movs	r2, #128	; 0x80
     21c:	0452      	lsls	r2, r2, #17
     21e:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     220:	4b1a      	ldr	r3, [pc, #104]	; (28c <TARGET_USB_PORT_init+0x7c>)
     222:	2780      	movs	r7, #128	; 0x80
     224:	05ff      	lsls	r7, r7, #23
     226:	629f      	str	r7, [r3, #40]	; 0x28
     228:	4919      	ldr	r1, [pc, #100]	; (290 <TARGET_USB_PORT_init+0x80>)
     22a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     22c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     22e:	2058      	movs	r0, #88	; 0x58
     230:	5c19      	ldrb	r1, [r3, r0]
     232:	2204      	movs	r2, #4
     234:	4690      	mov	r8, r2
     236:	4391      	bics	r1, r2
     238:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     23a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23c:	2601      	movs	r6, #1
     23e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     240:	2501      	movs	r5, #1
     242:	4329      	orrs	r1, r5
     244:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     246:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     248:	381c      	subs	r0, #28
     24a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     24c:	320b      	adds	r2, #11
     24e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     250:	3a09      	subs	r2, #9
     252:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     254:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     256:	2180      	movs	r1, #128	; 0x80
     258:	0489      	lsls	r1, r1, #18
     25a:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	629f      	str	r7, [r3, #40]	; 0x28
     25e:	4f0d      	ldr	r7, [pc, #52]	; (294 <TARGET_USB_PORT_init+0x84>)
     260:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     262:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     264:	2159      	movs	r1, #89	; 0x59
     266:	5c5c      	ldrb	r4, [r3, r1]
     268:	4642      	mov	r2, r8
     26a:	4394      	bics	r4, r2
     26c:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     270:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     272:	432a      	orrs	r2, r5
     274:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     276:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     278:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27a:	394a      	subs	r1, #74	; 0x4a
     27c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     27e:	3151      	adds	r1, #81	; 0x51
     280:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     282:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     284:	bc04      	pop	{r2}
     286:	4690      	mov	r8, r2
     288:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	41004400 	.word	0x41004400
     290:	c0000100 	.word	0xc0000100
     294:	c0000200 	.word	0xc0000200

00000298 <TARGET_USB_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     298:	4b06      	ldr	r3, [pc, #24]	; (2b4 <TARGET_USB_CLOCK_init+0x1c>)
     29a:	69da      	ldr	r2, [r3, #28]
     29c:	2120      	movs	r1, #32
     29e:	430a      	orrs	r2, r1
     2a0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     2a2:	695a      	ldr	r2, [r3, #20]
     2a4:	3120      	adds	r1, #32
     2a6:	430a      	orrs	r2, r1
     2a8:	615a      	str	r2, [r3, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2aa:	4a03      	ldr	r2, [pc, #12]	; (2b8 <TARGET_USB_CLOCK_init+0x20>)
     2ac:	4b03      	ldr	r3, [pc, #12]	; (2bc <TARGET_USB_CLOCK_init+0x24>)
     2ae:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     2b0:	4770      	bx	lr
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	40000400 	.word	0x40000400
     2b8:	00004706 	.word	0x00004706
     2bc:	40000c00 	.word	0x40000c00

000002c0 <TARGET_USB_init>:

void TARGET_USB_init(void)
{
     2c0:	b510      	push	{r4, lr}
	TARGET_USB_CLOCK_init();
     2c2:	4b03      	ldr	r3, [pc, #12]	; (2d0 <TARGET_USB_init+0x10>)
     2c4:	4798      	blx	r3
	usb_d_init();
     2c6:	4b03      	ldr	r3, [pc, #12]	; (2d4 <TARGET_USB_init+0x14>)
     2c8:	4798      	blx	r3
	TARGET_USB_PORT_init();
     2ca:	4b03      	ldr	r3, [pc, #12]	; (2d8 <TARGET_USB_init+0x18>)
     2cc:	4798      	blx	r3
}
     2ce:	bd10      	pop	{r4, pc}
     2d0:	00000299 	.word	0x00000299
     2d4:	0000057d 	.word	0x0000057d
     2d8:	00000211 	.word	0x00000211

000002dc <system_init>:

void system_init(void)
{
     2dc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2de:	4b02      	ldr	r3, [pc, #8]	; (2e8 <system_init+0xc>)
     2e0:	4798      	blx	r3
	init_mcu();

	TARGET_USB_init();
     2e2:	4b02      	ldr	r3, [pc, #8]	; (2ec <system_init+0x10>)
     2e4:	4798      	blx	r3
}
     2e6:	bd10      	pop	{r4, pc}
     2e8:	0000094d 	.word	0x0000094d
     2ec:	000002c1 	.word	0x000002c1

000002f0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2f0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     2f4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     2f6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     2f8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     2fc:	4770      	bx	lr

000002fe <atomic_leave_critical>:
     2fe:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     302:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     304:	f383 8810 	msr	PRIMASK, r3
}
     308:	4770      	bx	lr
	...

0000030c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     30c:	b5f0      	push	{r4, r5, r6, r7, lr}
     30e:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     310:	4b0e      	ldr	r3, [pc, #56]	; (34c <_usb_d_find_ep+0x40>)
     312:	785a      	ldrb	r2, [r3, #1]
     314:	4290      	cmp	r0, r2
     316:	d017      	beq.n	348 <_usb_d_find_ep+0x3c>
     318:	2300      	movs	r3, #0
     31a:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     31c:	4d0b      	ldr	r5, [pc, #44]	; (34c <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     31e:	270f      	movs	r7, #15
     320:	4027      	ands	r7, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     322:	002e      	movs	r6, r5
     324:	e008      	b.n	338 <_usb_d_find_ep+0x2c>
     326:	3001      	adds	r0, #1
     328:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     32a:	280d      	cmp	r0, #13
     32c:	d00a      	beq.n	344 <_usb_d_find_ep+0x38>
     32e:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     330:	18f2      	adds	r2, r6, r3
     332:	7852      	ldrb	r2, [r2, #1]
     334:	42a2      	cmp	r2, r4
     336:	d006      	beq.n	346 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     338:	5d59      	ldrb	r1, [r3, r5]
     33a:	2900      	cmp	r1, #0
     33c:	d1f3      	bne.n	326 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     33e:	4297      	cmp	r7, r2
     340:	d1f1      	bne.n	326 <_usb_d_find_ep+0x1a>
     342:	e000      	b.n	346 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     344:	380e      	subs	r0, #14
}
     346:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     348:	2000      	movs	r0, #0
     34a:	e7fc      	b.n	346 <_usb_d_find_ep+0x3a>
     34c:	20000084 	.word	0x20000084

00000350 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     350:	2000      	movs	r0, #0
     352:	4770      	bx	lr

00000354 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     354:	b570      	push	{r4, r5, r6, lr}
     356:	0004      	movs	r4, r0
     358:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     35a:	4b0a      	ldr	r3, [pc, #40]	; (384 <usb_d_cb_trans_more+0x30>)
     35c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     35e:	0142      	lsls	r2, r0, #5
     360:	4b09      	ldr	r3, [pc, #36]	; (388 <usb_d_cb_trans_more+0x34>)
     362:	189b      	adds	r3, r3, r2
     364:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     366:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     368:	2a03      	cmp	r2, #3
     36a:	d001      	beq.n	370 <usb_d_cb_trans_more+0x1c>
}
     36c:	0018      	movs	r0, r3
     36e:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     370:	0140      	lsls	r0, r0, #5
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <usb_d_cb_trans_more+0x34>)
     374:	1818      	adds	r0, r3, r0
     376:	6983      	ldr	r3, [r0, #24]
     378:	0029      	movs	r1, r5
     37a:	0020      	movs	r0, r4
     37c:	4798      	blx	r3
     37e:	0003      	movs	r3, r0
     380:	e7f4      	b.n	36c <usb_d_cb_trans_more+0x18>
     382:	46c0      	nop			; (mov r8, r8)
     384:	0000030d 	.word	0x0000030d
     388:	20000084 	.word	0x20000084

0000038c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	b085      	sub	sp, #20
     390:	0005      	movs	r5, r0
     392:	000f      	movs	r7, r1
     394:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     396:	4b51      	ldr	r3, [pc, #324]	; (4dc <_usb_d_cb_trans_done+0x150>)
     398:	4798      	blx	r3
     39a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     39c:	2f00      	cmp	r7, #0
     39e:	d162      	bne.n	466 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     3a0:	4b4f      	ldr	r3, [pc, #316]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     3a2:	0142      	lsls	r2, r0, #5
     3a4:	1899      	adds	r1, r3, r2
     3a6:	2000      	movs	r0, #0
     3a8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     3aa:	5cd3      	ldrb	r3, [r2, r3]
     3ac:	2b00      	cmp	r3, #0
     3ae:	d00e      	beq.n	3ce <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     3b0:	0162      	lsls	r2, r4, #5
     3b2:	4b4b      	ldr	r3, [pc, #300]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     3b4:	189b      	adds	r3, r3, r2
     3b6:	2201      	movs	r2, #1
     3b8:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     3ba:	0164      	lsls	r4, r4, #5
     3bc:	4b48      	ldr	r3, [pc, #288]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     3be:	191c      	adds	r4, r3, r4
     3c0:	78e1      	ldrb	r1, [r4, #3]
     3c2:	69e3      	ldr	r3, [r4, #28]
     3c4:	0032      	movs	r2, r6
     3c6:	0028      	movs	r0, r5
     3c8:	4798      	blx	r3
}
     3ca:	b005      	add	sp, #20
     3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     3ce:	788b      	ldrb	r3, [r1, #2]
     3d0:	2b03      	cmp	r3, #3
     3d2:	d00c      	beq.n	3ee <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     3d4:	4b42      	ldr	r3, [pc, #264]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     3d6:	0162      	lsls	r2, r4, #5
     3d8:	320c      	adds	r2, #12
     3da:	189a      	adds	r2, r3, r2
     3dc:	0164      	lsls	r4, r4, #5
     3de:	191c      	adds	r4, r3, r4
     3e0:	7860      	ldrb	r0, [r4, #1]
     3e2:	2100      	movs	r1, #0
     3e4:	69e3      	ldr	r3, [r4, #28]
     3e6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     3e8:	2302      	movs	r3, #2
     3ea:	70a3      	strb	r3, [r4, #2]
     3ec:	e7ed      	b.n	3ca <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     3ee:	4a3c      	ldr	r2, [pc, #240]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     3f0:	000b      	movs	r3, r1
     3f2:	250c      	movs	r5, #12
     3f4:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     3f6:	0161      	lsls	r1, r4, #5
     3f8:	310c      	adds	r1, #12
     3fa:	1852      	adds	r2, r2, r1
     3fc:	7858      	ldrb	r0, [r3, #1]
     3fe:	69db      	ldr	r3, [r3, #28]
     400:	2101      	movs	r1, #1
     402:	4798      	blx	r3
		if (err) {
     404:	2800      	cmp	r0, #0
     406:	d017      	beq.n	438 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     408:	0162      	lsls	r2, r4, #5
     40a:	4b35      	ldr	r3, [pc, #212]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     40c:	189b      	adds	r3, r3, r2
     40e:	2205      	movs	r2, #5
     410:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     412:	3a03      	subs	r2, #3
     414:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     416:	2d00      	cmp	r5, #0
     418:	db09      	blt.n	42e <_usb_d_cb_trans_done+0xa2>
     41a:	0164      	lsls	r4, r4, #5
     41c:	4b30      	ldr	r3, [pc, #192]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     41e:	191c      	adds	r4, r3, r4
     420:	7860      	ldrb	r0, [r4, #1]
     422:	2380      	movs	r3, #128	; 0x80
     424:	4318      	orrs	r0, r3
     426:	2101      	movs	r1, #1
     428:	4b2e      	ldr	r3, [pc, #184]	; (4e4 <_usb_d_cb_trans_done+0x158>)
     42a:	4798      	blx	r3
     42c:	e7cd      	b.n	3ca <_usb_d_cb_trans_done+0x3e>
     42e:	0164      	lsls	r4, r4, #5
     430:	4b2b      	ldr	r3, [pc, #172]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     432:	191c      	adds	r4, r3, r4
     434:	7860      	ldrb	r0, [r4, #1]
     436:	e7f6      	b.n	426 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     438:	0164      	lsls	r4, r4, #5
     43a:	4b29      	ldr	r3, [pc, #164]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     43c:	191c      	adds	r4, r3, r4
     43e:	2304      	movs	r3, #4
     440:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     442:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     444:	2200      	movs	r2, #0
     446:	9201      	str	r2, [sp, #4]
     448:	9202      	str	r2, [sp, #8]
     44a:	2d00      	cmp	r5, #0
     44c:	db08      	blt.n	460 <_usb_d_cb_trans_done+0xd4>
     44e:	3280      	adds	r2, #128	; 0x80
     450:	4313      	orrs	r3, r2
     452:	a801      	add	r0, sp, #4
     454:	7203      	strb	r3, [r0, #8]
     456:	2301      	movs	r3, #1
     458:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     45a:	4b23      	ldr	r3, [pc, #140]	; (4e8 <_usb_d_cb_trans_done+0x15c>)
     45c:	4798      	blx	r3
     45e:	e7b4      	b.n	3ca <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     460:	220f      	movs	r2, #15
     462:	4013      	ands	r3, r2
     464:	e7f5      	b.n	452 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     466:	2f01      	cmp	r7, #1
     468:	d00a      	beq.n	480 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     46a:	2f02      	cmp	r7, #2
     46c:	d01d      	beq.n	4aa <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     46e:	2f03      	cmp	r7, #3
     470:	d02c      	beq.n	4cc <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     472:	0142      	lsls	r2, r0, #5
     474:	4b1a      	ldr	r3, [pc, #104]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     476:	189b      	adds	r3, r3, r2
     478:	2206      	movs	r2, #6
     47a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     47c:	70da      	strb	r2, [r3, #3]
     47e:	e79c      	b.n	3ba <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     480:	4b17      	ldr	r3, [pc, #92]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     482:	0142      	lsls	r2, r0, #5
     484:	1899      	adds	r1, r3, r2
     486:	2002      	movs	r0, #2
     488:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     48a:	5cd3      	ldrb	r3, [r2, r3]
     48c:	2b00      	cmp	r3, #0
     48e:	d005      	beq.n	49c <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     490:	0162      	lsls	r2, r4, #5
     492:	4b13      	ldr	r3, [pc, #76]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     494:	189b      	adds	r3, r3, r2
     496:	2205      	movs	r2, #5
     498:	709a      	strb	r2, [r3, #2]
     49a:	e78e      	b.n	3ba <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     49c:	2202      	movs	r2, #2
     49e:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     4a0:	2100      	movs	r1, #0
     4a2:	0028      	movs	r0, r5
     4a4:	4b0f      	ldr	r3, [pc, #60]	; (4e4 <_usb_d_cb_trans_done+0x158>)
     4a6:	4798      	blx	r3
     4a8:	e787      	b.n	3ba <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     4aa:	4b0d      	ldr	r3, [pc, #52]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     4ac:	0142      	lsls	r2, r0, #5
     4ae:	1899      	adds	r1, r3, r2
     4b0:	2004      	movs	r0, #4
     4b2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     4b4:	5cd3      	ldrb	r3, [r2, r3]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d005      	beq.n	4c6 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     4ba:	0162      	lsls	r2, r4, #5
     4bc:	4b08      	ldr	r3, [pc, #32]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     4be:	189b      	adds	r3, r3, r2
     4c0:	2201      	movs	r2, #1
     4c2:	709a      	strb	r2, [r3, #2]
     4c4:	e779      	b.n	3ba <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     4c6:	2302      	movs	r3, #2
     4c8:	708b      	strb	r3, [r1, #2]
			return;
     4ca:	e77e      	b.n	3ca <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     4cc:	0142      	lsls	r2, r0, #5
     4ce:	4b04      	ldr	r3, [pc, #16]	; (4e0 <_usb_d_cb_trans_done+0x154>)
     4d0:	189b      	adds	r3, r3, r2
     4d2:	2200      	movs	r2, #0
     4d4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     4d6:	3205      	adds	r2, #5
     4d8:	70da      	strb	r2, [r3, #3]
     4da:	e76e      	b.n	3ba <_usb_d_cb_trans_done+0x2e>
     4dc:	0000030d 	.word	0x0000030d
     4e0:	20000084 	.word	0x20000084
     4e4:	0000178d 	.word	0x0000178d
     4e8:	00001961 	.word	0x00001961

000004ec <usb_d_cb_trans_setup>:
{
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	46c6      	mov	lr, r8
     4f0:	b500      	push	{lr}
     4f2:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     4f4:	4b1d      	ldr	r3, [pc, #116]	; (56c <usb_d_cb_trans_setup+0x80>)
     4f6:	4798      	blx	r3
     4f8:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     4fa:	0145      	lsls	r5, r0, #5
     4fc:	350c      	adds	r5, #12
     4fe:	4b1c      	ldr	r3, [pc, #112]	; (570 <usb_d_cb_trans_setup+0x84>)
     500:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     502:	0029      	movs	r1, r5
     504:	0020      	movs	r0, r4
     506:	4b1b      	ldr	r3, [pc, #108]	; (574 <usb_d_cb_trans_setup+0x88>)
     508:	4798      	blx	r3
	if (n != 8) {
     50a:	b2c0      	uxtb	r0, r0
     50c:	2808      	cmp	r0, #8
     50e:	d00a      	beq.n	526 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     510:	2101      	movs	r1, #1
     512:	0020      	movs	r0, r4
     514:	4d18      	ldr	r5, [pc, #96]	; (578 <usb_d_cb_trans_setup+0x8c>)
     516:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     518:	2080      	movs	r0, #128	; 0x80
     51a:	4320      	orrs	r0, r4
     51c:	2101      	movs	r1, #1
     51e:	47a8      	blx	r5
}
     520:	bc04      	pop	{r2}
     522:	4690      	mov	r8, r2
     524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     526:	2100      	movs	r1, #0
     528:	0020      	movs	r0, r4
     52a:	4b13      	ldr	r3, [pc, #76]	; (578 <usb_d_cb_trans_setup+0x8c>)
     52c:	4698      	mov	r8, r3
     52e:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     530:	2780      	movs	r7, #128	; 0x80
     532:	4327      	orrs	r7, r4
     534:	2100      	movs	r1, #0
     536:	0038      	movs	r0, r7
     538:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     53a:	0172      	lsls	r2, r6, #5
     53c:	4b0c      	ldr	r3, [pc, #48]	; (570 <usb_d_cb_trans_setup+0x84>)
     53e:	189b      	adds	r3, r3, r2
     540:	2201      	movs	r2, #1
     542:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     544:	695b      	ldr	r3, [r3, #20]
     546:	0029      	movs	r1, r5
     548:	0020      	movs	r0, r4
     54a:	4798      	blx	r3
     54c:	2800      	cmp	r0, #0
     54e:	d1e7      	bne.n	520 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     550:	0176      	lsls	r6, r6, #5
     552:	4b07      	ldr	r3, [pc, #28]	; (570 <usb_d_cb_trans_setup+0x84>)
     554:	199e      	adds	r6, r3, r6
     556:	2305      	movs	r3, #5
     558:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     55a:	2101      	movs	r1, #1
     55c:	0020      	movs	r0, r4
     55e:	4c06      	ldr	r4, [pc, #24]	; (578 <usb_d_cb_trans_setup+0x8c>)
     560:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     562:	2101      	movs	r1, #1
     564:	0038      	movs	r0, r7
     566:	47a0      	blx	r4
     568:	e7da      	b.n	520 <usb_d_cb_trans_setup+0x34>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	0000030d 	.word	0x0000030d
     570:	20000084 	.word	0x20000084
     574:	000018f1 	.word	0x000018f1
     578:	0000178d 	.word	0x0000178d

0000057c <usb_d_init>:

int32_t usb_d_init(void)
{
     57c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     57e:	4b14      	ldr	r3, [pc, #80]	; (5d0 <usb_d_init+0x54>)
     580:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     582:	2800      	cmp	r0, #0
     584:	db22      	blt.n	5cc <usb_d_init+0x50>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     586:	4c13      	ldr	r4, [pc, #76]	; (5d4 <usb_d_init+0x58>)
     588:	22d0      	movs	r2, #208	; 0xd0
     58a:	0052      	lsls	r2, r2, #1
     58c:	2100      	movs	r1, #0
     58e:	0020      	movs	r0, r4
     590:	4b11      	ldr	r3, [pc, #68]	; (5d8 <usb_d_init+0x5c>)
     592:	4798      	blx	r3
     594:	1c63      	adds	r3, r4, #1
     596:	0020      	movs	r0, r4
     598:	30a2      	adds	r0, #162	; 0xa2
     59a:	30ff      	adds	r0, #255	; 0xff
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     59c:	24ff      	movs	r4, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     59e:	4a0f      	ldr	r2, [pc, #60]	; (5dc <usb_d_init+0x60>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     5a0:	701c      	strb	r4, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     5a2:	0019      	movs	r1, r3
     5a4:	3113      	adds	r1, #19
     5a6:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     5a8:	3104      	adds	r1, #4
     5aa:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     5ac:	3104      	adds	r1, #4
     5ae:	600a      	str	r2, [r1, #0]
     5b0:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     5b2:	4283      	cmp	r3, r0
     5b4:	d1f4      	bne.n	5a0 <usb_d_init+0x24>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     5b6:	490a      	ldr	r1, [pc, #40]	; (5e0 <usb_d_init+0x64>)
     5b8:	2000      	movs	r0, #0
     5ba:	4c0a      	ldr	r4, [pc, #40]	; (5e4 <usb_d_init+0x68>)
     5bc:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     5be:	490a      	ldr	r1, [pc, #40]	; (5e8 <usb_d_init+0x6c>)
     5c0:	2001      	movs	r0, #1
     5c2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     5c4:	4909      	ldr	r1, [pc, #36]	; (5ec <usb_d_init+0x70>)
     5c6:	2002      	movs	r0, #2
     5c8:	47a0      	blx	r4
	return ERR_NONE;
     5ca:	2000      	movs	r0, #0
}
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	00001161 	.word	0x00001161
     5d4:	20000084 	.word	0x20000084
     5d8:	00002b0f 	.word	0x00002b0f
     5dc:	00000351 	.word	0x00000351
     5e0:	000004ed 	.word	0x000004ed
     5e4:	00001b99 	.word	0x00001b99
     5e8:	00000355 	.word	0x00000355
     5ec:	0000038d 	.word	0x0000038d

000005f0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     5f0:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     5f2:	4b01      	ldr	r3, [pc, #4]	; (5f8 <usb_d_register_callback+0x8>)
     5f4:	4798      	blx	r3
}
     5f6:	bd10      	pop	{r4, pc}
     5f8:	00001b75 	.word	0x00001b75

000005fc <usb_d_enable>:

int32_t usb_d_enable(void)
{
     5fc:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     5fe:	4b01      	ldr	r3, [pc, #4]	; (604 <usb_d_enable+0x8>)
     600:	4798      	blx	r3
}
     602:	bd10      	pop	{r4, pc}
     604:	0000123d 	.word	0x0000123d

00000608 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     608:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     60a:	4b01      	ldr	r3, [pc, #4]	; (610 <usb_d_attach+0x8>)
     60c:	4798      	blx	r3
}
     60e:	bd10      	pop	{r4, pc}
     610:	0000128d 	.word	0x0000128d

00000614 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     614:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     616:	4b01      	ldr	r3, [pc, #4]	; (61c <usb_d_set_address+0x8>)
     618:	4798      	blx	r3
}
     61a:	bd10      	pop	{r4, pc}
     61c:	0000129d 	.word	0x0000129d

00000620 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     622:	0005      	movs	r5, r0
     624:	000e      	movs	r6, r1
     626:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     628:	4b0f      	ldr	r3, [pc, #60]	; (668 <usb_d_ep_init+0x48>)
     62a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     62c:	2800      	cmp	r0, #0
     62e:	da14      	bge.n	65a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     630:	20ff      	movs	r0, #255	; 0xff
     632:	4b0d      	ldr	r3, [pc, #52]	; (668 <usb_d_ep_init+0x48>)
     634:	4798      	blx	r3
     636:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     638:	db12      	blt.n	660 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     63a:	003a      	movs	r2, r7
     63c:	0031      	movs	r1, r6
     63e:	0028      	movs	r0, r5
     640:	4b0a      	ldr	r3, [pc, #40]	; (66c <usb_d_ep_init+0x4c>)
     642:	4798      	blx	r3
	if (rc < 0) {
     644:	2800      	cmp	r0, #0
     646:	db07      	blt.n	658 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     648:	4a09      	ldr	r2, [pc, #36]	; (670 <usb_d_ep_init+0x50>)
     64a:	0164      	lsls	r4, r4, #5
     64c:	1913      	adds	r3, r2, r4
     64e:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     650:	2303      	movs	r3, #3
     652:	401e      	ands	r6, r3
     654:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     656:	2000      	movs	r0, #0
}
     658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     65a:	2014      	movs	r0, #20
     65c:	4240      	negs	r0, r0
     65e:	e7fb      	b.n	658 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     660:	2015      	movs	r0, #21
     662:	4240      	negs	r0, r0
     664:	e7f8      	b.n	658 <usb_d_ep_init+0x38>
     666:	46c0      	nop			; (mov r8, r8)
     668:	0000030d 	.word	0x0000030d
     66c:	000012ad 	.word	0x000012ad
     670:	20000084 	.word	0x20000084

00000674 <usb_d_ep0_init>:
{
     674:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     676:	b282      	uxth	r2, r0
     678:	2100      	movs	r1, #0
     67a:	2000      	movs	r0, #0
     67c:	4b01      	ldr	r3, [pc, #4]	; (684 <usb_d_ep0_init+0x10>)
     67e:	4798      	blx	r3
}
     680:	bd10      	pop	{r4, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	00000621 	.word	0x00000621

00000688 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     688:	b570      	push	{r4, r5, r6, lr}
     68a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     68c:	4b06      	ldr	r3, [pc, #24]	; (6a8 <usb_d_ep_deinit+0x20>)
     68e:	4798      	blx	r3
     690:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     692:	db07      	blt.n	6a4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     694:	0028      	movs	r0, r5
     696:	4b05      	ldr	r3, [pc, #20]	; (6ac <usb_d_ep_deinit+0x24>)
     698:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     69a:	0164      	lsls	r4, r4, #5
     69c:	4b04      	ldr	r3, [pc, #16]	; (6b0 <usb_d_ep_deinit+0x28>)
     69e:	191c      	adds	r4, r3, r4
     6a0:	23ff      	movs	r3, #255	; 0xff
     6a2:	7063      	strb	r3, [r4, #1]
}
     6a4:	bd70      	pop	{r4, r5, r6, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	0000030d 	.word	0x0000030d
     6ac:	000013d9 	.word	0x000013d9
     6b0:	20000084 	.word	0x20000084

000006b4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     6b4:	b570      	push	{r4, r5, r6, lr}
     6b6:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     6b8:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <usb_d_ep_enable+0x40>)
     6ba:	4798      	blx	r3
     6bc:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     6be:	db15      	blt.n	6ec <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     6c0:	0143      	lsls	r3, r0, #5
     6c2:	4a0d      	ldr	r2, [pc, #52]	; (6f8 <usb_d_ep_enable+0x44>)
     6c4:	5c9b      	ldrb	r3, [r3, r2]
     6c6:	425a      	negs	r2, r3
     6c8:	4153      	adcs	r3, r2
     6ca:	3301      	adds	r3, #1
     6cc:	0141      	lsls	r1, r0, #5
     6ce:	4a0a      	ldr	r2, [pc, #40]	; (6f8 <usb_d_ep_enable+0x44>)
     6d0:	1852      	adds	r2, r2, r1
     6d2:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     6d4:	0020      	movs	r0, r4
     6d6:	4b09      	ldr	r3, [pc, #36]	; (6fc <usb_d_ep_enable+0x48>)
     6d8:	4798      	blx	r3
	if (rc < 0) {
     6da:	2800      	cmp	r0, #0
     6dc:	db00      	blt.n	6e0 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     6de:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     6e0:	016d      	lsls	r5, r5, #5
     6e2:	4b05      	ldr	r3, [pc, #20]	; (6f8 <usb_d_ep_enable+0x44>)
     6e4:	195d      	adds	r5, r3, r5
     6e6:	2300      	movs	r3, #0
     6e8:	70ab      	strb	r3, [r5, #2]
     6ea:	e7f8      	b.n	6de <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     6ec:	2012      	movs	r0, #18
     6ee:	4240      	negs	r0, r0
     6f0:	e7f5      	b.n	6de <usb_d_ep_enable+0x2a>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	0000030d 	.word	0x0000030d
     6f8:	20000084 	.word	0x20000084
     6fc:	000014a5 	.word	0x000014a5

00000700 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     700:	b5f0      	push	{r4, r5, r6, r7, lr}
     702:	46d6      	mov	lr, sl
     704:	464f      	mov	r7, r9
     706:	4646      	mov	r6, r8
     708:	b5c0      	push	{r6, r7, lr}
     70a:	b086      	sub	sp, #24
     70c:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     70e:	7a07      	ldrb	r7, [r0, #8]
     710:	0038      	movs	r0, r7
     712:	4b40      	ldr	r3, [pc, #256]	; (814 <usb_d_ep_transfer+0x114>)
     714:	4798      	blx	r3
     716:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     718:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     71a:	6863      	ldr	r3, [r4, #4]
     71c:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     71e:	2800      	cmp	r0, #0
     720:	da00      	bge.n	724 <usb_d_ep_transfer+0x24>
     722:	e071      	b.n	808 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     724:	a804      	add	r0, sp, #16
     726:	4b3c      	ldr	r3, [pc, #240]	; (818 <usb_d_ep_transfer+0x118>)
     728:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     72a:	016a      	lsls	r2, r5, #5
     72c:	4b3b      	ldr	r3, [pc, #236]	; (81c <usb_d_ep_transfer+0x11c>)
     72e:	189b      	adds	r3, r3, r2
     730:	789a      	ldrb	r2, [r3, #2]
     732:	2317      	movs	r3, #23
     734:	446b      	add	r3, sp
     736:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     738:	781b      	ldrb	r3, [r3, #0]
     73a:	2b01      	cmp	r3, #1
     73c:	d010      	beq.n	760 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     73e:	a804      	add	r0, sp, #16
     740:	4b37      	ldr	r3, [pc, #220]	; (820 <usb_d_ep_transfer+0x120>)
     742:	4798      	blx	r3
		switch (state) {
     744:	2317      	movs	r3, #23
     746:	446b      	add	r3, sp
     748:	781b      	ldrb	r3, [r3, #0]
     74a:	b2db      	uxtb	r3, r3
     74c:	2b05      	cmp	r3, #5
     74e:	d05e      	beq.n	80e <usb_d_ep_transfer+0x10e>
     750:	2b06      	cmp	r3, #6
     752:	d023      	beq.n	79c <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     754:	2001      	movs	r0, #1
		switch (state) {
     756:	2b00      	cmp	r3, #0
     758:	d13c      	bne.n	7d4 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     75a:	2013      	movs	r0, #19
     75c:	4240      	negs	r0, r0
     75e:	e039      	b.n	7d4 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     760:	4b2e      	ldr	r3, [pc, #184]	; (81c <usb_d_ep_transfer+0x11c>)
     762:	4699      	mov	r9, r3
     764:	016b      	lsls	r3, r5, #5
     766:	469a      	mov	sl, r3
     768:	464b      	mov	r3, r9
     76a:	4453      	add	r3, sl
     76c:	2203      	movs	r2, #3
     76e:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     770:	a804      	add	r0, sp, #16
     772:	4b2b      	ldr	r3, [pc, #172]	; (820 <usb_d_ep_transfer+0x120>)
     774:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     776:	464b      	mov	r3, r9
     778:	4652      	mov	r2, sl
     77a:	5cd3      	ldrb	r3, [r2, r3]
     77c:	2b00      	cmp	r3, #0
     77e:	d010      	beq.n	7a2 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     780:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     782:	1e72      	subs	r2, r6, #1
     784:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     786:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     788:	6822      	ldr	r2, [r4, #0]
     78a:	9201      	str	r2, [sp, #4]
     78c:	4642      	mov	r2, r8
     78e:	9202      	str	r2, [sp, #8]
     790:	b27f      	sxtb	r7, r7
     792:	2f00      	cmp	r7, #0
     794:	db17      	blt.n	7c6 <usb_d_ep_transfer+0xc6>
     796:	220f      	movs	r2, #15
     798:	4013      	ands	r3, r2
     79a:	e016      	b.n	7ca <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     79c:	2010      	movs	r0, #16
     79e:	4240      	negs	r0, r0
     7a0:	e018      	b.n	7d4 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     7a2:	016b      	lsls	r3, r5, #5
     7a4:	4a1d      	ldr	r2, [pc, #116]	; (81c <usb_d_ep_transfer+0x11c>)
     7a6:	18d2      	adds	r2, r2, r3
     7a8:	7cd1      	ldrb	r1, [r2, #19]
     7aa:	0209      	lsls	r1, r1, #8
     7ac:	7c93      	ldrb	r3, [r2, #18]
     7ae:	185b      	adds	r3, r3, r1
     7b0:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     7b2:	2b00      	cmp	r3, #0
     7b4:	d114      	bne.n	7e0 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     7b6:	2304      	movs	r3, #4
     7b8:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     7ba:	2200      	movs	r2, #0
			zlp                 = true;
     7bc:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7be:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     7c0:	6821      	ldr	r1, [r4, #0]
     7c2:	9101      	str	r1, [sp, #4]
     7c4:	9202      	str	r2, [sp, #8]
     7c6:	2280      	movs	r2, #128	; 0x80
     7c8:	4313      	orrs	r3, r2
     7ca:	a801      	add	r0, sp, #4
     7cc:	7203      	strb	r3, [r0, #8]
     7ce:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     7d0:	4b14      	ldr	r3, [pc, #80]	; (824 <usb_d_ep_transfer+0x124>)
     7d2:	4798      	blx	r3
	return rc;
}
     7d4:	b006      	add	sp, #24
     7d6:	bc1c      	pop	{r2, r3, r4}
     7d8:	4690      	mov	r8, r2
     7da:	4699      	mov	r9, r3
     7dc:	46a2      	mov	sl, r4
     7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7e0:	4642      	mov	r2, r8
     7e2:	429a      	cmp	r2, r3
     7e4:	d900      	bls.n	7e8 <usb_d_ep_transfer+0xe8>
     7e6:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     7e8:	016d      	lsls	r5, r5, #5
     7ea:	490c      	ldr	r1, [pc, #48]	; (81c <usb_d_ep_transfer+0x11c>)
     7ec:	194d      	adds	r5, r1, r5
			if (dir) {
     7ee:	7b29      	ldrb	r1, [r5, #12]
     7f0:	297f      	cmp	r1, #127	; 0x7f
     7f2:	d805      	bhi.n	800 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7f4:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     7f6:	6821      	ldr	r1, [r4, #0]
     7f8:	9101      	str	r1, [sp, #4]
     7fa:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7fc:	2600      	movs	r6, #0
     7fe:	e7ca      	b.n	796 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     800:	429a      	cmp	r2, r3
     802:	41b6      	sbcs	r6, r6
     804:	4276      	negs	r6, r6
     806:	e7da      	b.n	7be <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     808:	2012      	movs	r0, #18
     80a:	4240      	negs	r0, r0
     80c:	e7e2      	b.n	7d4 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     80e:	2002      	movs	r0, #2
     810:	e7e0      	b.n	7d4 <usb_d_ep_transfer+0xd4>
     812:	46c0      	nop			; (mov r8, r8)
     814:	0000030d 	.word	0x0000030d
     818:	000002f1 	.word	0x000002f1
     81c:	20000084 	.word	0x20000084
     820:	000002ff 	.word	0x000002ff
     824:	00001961 	.word	0x00001961

00000828 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     828:	b570      	push	{r4, r5, r6, lr}
     82a:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     82c:	2900      	cmp	r1, #0
     82e:	d005      	beq.n	83c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     830:	2901      	cmp	r1, #1
     832:	d021      	beq.n	878 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     834:	2102      	movs	r1, #2
     836:	4b13      	ldr	r3, [pc, #76]	; (884 <usb_d_ep_halt+0x5c>)
     838:	4798      	blx	r3
	}
}
     83a:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     83c:	4b12      	ldr	r3, [pc, #72]	; (888 <usb_d_ep_halt+0x60>)
     83e:	4798      	blx	r3
     840:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     842:	db1c      	blt.n	87e <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     844:	2102      	movs	r1, #2
     846:	0020      	movs	r0, r4
     848:	4b0e      	ldr	r3, [pc, #56]	; (884 <usb_d_ep_halt+0x5c>)
     84a:	4798      	blx	r3
     84c:	2800      	cmp	r0, #0
     84e:	d0f4      	beq.n	83a <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     850:	2100      	movs	r1, #0
     852:	0020      	movs	r0, r4
     854:	4b0b      	ldr	r3, [pc, #44]	; (884 <usb_d_ep_halt+0x5c>)
     856:	4798      	blx	r3
		if (rc < 0) {
     858:	2800      	cmp	r0, #0
     85a:	dbee      	blt.n	83a <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     85c:	016d      	lsls	r5, r5, #5
     85e:	4b0b      	ldr	r3, [pc, #44]	; (88c <usb_d_ep_halt+0x64>)
     860:	195d      	adds	r5, r3, r5
     862:	2301      	movs	r3, #1
     864:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     866:	3302      	adds	r3, #2
     868:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     86a:	69eb      	ldr	r3, [r5, #28]
     86c:	2200      	movs	r2, #0
     86e:	2103      	movs	r1, #3
     870:	0020      	movs	r0, r4
     872:	4798      	blx	r3
	return ERR_NONE;
     874:	2000      	movs	r0, #0
     876:	e7e0      	b.n	83a <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     878:	4b02      	ldr	r3, [pc, #8]	; (884 <usb_d_ep_halt+0x5c>)
     87a:	4798      	blx	r3
     87c:	e7dd      	b.n	83a <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     87e:	2012      	movs	r0, #18
     880:	4240      	negs	r0, r0
     882:	e7da      	b.n	83a <usb_d_ep_halt+0x12>
     884:	0000178d 	.word	0x0000178d
     888:	0000030d 	.word	0x0000030d
     88c:	20000084 	.word	0x20000084

00000890 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     890:	b570      	push	{r4, r5, r6, lr}
     892:	000d      	movs	r5, r1
     894:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     896:	4b0f      	ldr	r3, [pc, #60]	; (8d4 <usb_d_ep_register_callback+0x44>)
     898:	4798      	blx	r3
     89a:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     89c:	1e22      	subs	r2, r4, #0
     89e:	d008      	beq.n	8b2 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     8a0:	2b00      	cmp	r3, #0
     8a2:	db05      	blt.n	8b0 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     8a4:	2d01      	cmp	r5, #1
     8a6:	d00b      	beq.n	8c0 <usb_d_ep_register_callback+0x30>
     8a8:	2d00      	cmp	r5, #0
     8aa:	d004      	beq.n	8b6 <usb_d_ep_register_callback+0x26>
     8ac:	2d02      	cmp	r5, #2
     8ae:	d00c      	beq.n	8ca <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     8b0:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     8b2:	4a09      	ldr	r2, [pc, #36]	; (8d8 <usb_d_ep_register_callback+0x48>)
     8b4:	e7f4      	b.n	8a0 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     8b6:	0140      	lsls	r0, r0, #5
     8b8:	4b08      	ldr	r3, [pc, #32]	; (8dc <usb_d_ep_register_callback+0x4c>)
     8ba:	1818      	adds	r0, r3, r0
     8bc:	6142      	str	r2, [r0, #20]
		break;
     8be:	e7f7      	b.n	8b0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     8c0:	0140      	lsls	r0, r0, #5
     8c2:	4b06      	ldr	r3, [pc, #24]	; (8dc <usb_d_ep_register_callback+0x4c>)
     8c4:	1818      	adds	r0, r3, r0
     8c6:	6182      	str	r2, [r0, #24]
		break;
     8c8:	e7f2      	b.n	8b0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     8ca:	0140      	lsls	r0, r0, #5
     8cc:	4b03      	ldr	r3, [pc, #12]	; (8dc <usb_d_ep_register_callback+0x4c>)
     8ce:	1818      	adds	r0, r3, r0
     8d0:	61c2      	str	r2, [r0, #28]
		break;
     8d2:	e7ed      	b.n	8b0 <usb_d_ep_register_callback+0x20>
     8d4:	0000030d 	.word	0x0000030d
     8d8:	00000351 	.word	0x00000351
     8dc:	20000084 	.word	0x20000084

000008e0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8e0:	2800      	cmp	r0, #0
     8e2:	d100      	bne.n	8e6 <assert+0x6>
		__asm("BKPT #0");
     8e4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8e6:	4770      	bx	lr

000008e8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8e8:	6803      	ldr	r3, [r0, #0]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d00a      	beq.n	904 <is_list_element+0x1c>
		if (it == element) {
     8ee:	428b      	cmp	r3, r1
     8f0:	d00a      	beq.n	908 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     8f2:	681b      	ldr	r3, [r3, #0]
     8f4:	2b00      	cmp	r3, #0
     8f6:	d003      	beq.n	900 <is_list_element+0x18>
		if (it == element) {
     8f8:	4299      	cmp	r1, r3
     8fa:	d1fa      	bne.n	8f2 <is_list_element+0xa>
			return true;
     8fc:	2001      	movs	r0, #1
     8fe:	e000      	b.n	902 <is_list_element+0x1a>
		}
	}

	return false;
     900:	2000      	movs	r0, #0
}
     902:	4770      	bx	lr
	return false;
     904:	2000      	movs	r0, #0
     906:	e7fc      	b.n	902 <is_list_element+0x1a>
			return true;
     908:	2001      	movs	r0, #1
     90a:	e7fa      	b.n	902 <is_list_element+0x1a>

0000090c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0005      	movs	r5, r0
     910:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     912:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     914:	4b0a      	ldr	r3, [pc, #40]	; (940 <list_insert_at_end+0x34>)
     916:	4798      	blx	r3
     918:	2301      	movs	r3, #1
     91a:	4058      	eors	r0, r3
     91c:	b2c0      	uxtb	r0, r0
     91e:	224f      	movs	r2, #79	; 0x4f
     920:	4908      	ldr	r1, [pc, #32]	; (944 <list_insert_at_end+0x38>)
     922:	4b09      	ldr	r3, [pc, #36]	; (948 <list_insert_at_end+0x3c>)
     924:	4798      	blx	r3

	if (!list->head) {
     926:	682b      	ldr	r3, [r5, #0]
     928:	2b00      	cmp	r3, #0
     92a:	d103      	bne.n	934 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     92c:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     92e:	6033      	str	r3, [r6, #0]
		return;
     930:	e005      	b.n	93e <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     932:	001c      	movs	r4, r3
	while (it->next) {
     934:	6823      	ldr	r3, [r4, #0]
     936:	2b00      	cmp	r3, #0
     938:	d1fb      	bne.n	932 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     93a:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     93c:	6033      	str	r3, [r6, #0]
}
     93e:	bd70      	pop	{r4, r5, r6, pc}
     940:	000008e9 	.word	0x000008e9
     944:	00002b20 	.word	0x00002b20
     948:	000008e1 	.word	0x000008e1

0000094c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     94c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     94e:	4b06      	ldr	r3, [pc, #24]	; (968 <_init_chip+0x1c>)
     950:	685a      	ldr	r2, [r3, #4]
     952:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <_init_chip+0x20>)
     956:	4798      	blx	r3
	_sysctrl_init_sources();
     958:	4b05      	ldr	r3, [pc, #20]	; (970 <_init_chip+0x24>)
     95a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     95c:	4b05      	ldr	r3, [pc, #20]	; (974 <_init_chip+0x28>)
     95e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     960:	20ff      	movs	r0, #255	; 0xff
     962:	4b05      	ldr	r3, [pc, #20]	; (978 <_init_chip+0x2c>)
     964:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     966:	bd10      	pop	{r4, pc}
     968:	41004000 	.word	0x41004000
     96c:	000009f1 	.word	0x000009f1
     970:	00000a11 	.word	0x00000a11
     974:	00000a71 	.word	0x00000a71
     978:	0000097d 	.word	0x0000097d

0000097c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     97c:	07c3      	lsls	r3, r0, #31
     97e:	d50a      	bpl.n	996 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     980:	4b17      	ldr	r3, [pc, #92]	; (9e0 <_gclk_init_generators_by_fref+0x64>)
     982:	2280      	movs	r2, #128	; 0x80
     984:	0052      	lsls	r2, r2, #1
     986:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     988:	2283      	movs	r2, #131	; 0x83
     98a:	0252      	lsls	r2, r2, #9
     98c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     98e:	001a      	movs	r2, r3
     990:	7853      	ldrb	r3, [r2, #1]
     992:	09db      	lsrs	r3, r3, #7
     994:	d1fc      	bne.n	990 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     996:	0703      	lsls	r3, r0, #28
     998:	d509      	bpl.n	9ae <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     99a:	4b11      	ldr	r3, [pc, #68]	; (9e0 <_gclk_init_generators_by_fref+0x64>)
     99c:	2204      	movs	r2, #4
     99e:	32ff      	adds	r2, #255	; 0xff
     9a0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     9a2:	4a10      	ldr	r2, [pc, #64]	; (9e4 <_gclk_init_generators_by_fref+0x68>)
     9a4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     9a6:	001a      	movs	r2, r3
     9a8:	7853      	ldrb	r3, [r2, #1]
     9aa:	09db      	lsrs	r3, r3, #7
     9ac:	d1fc      	bne.n	9a8 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
     9ae:	0643      	lsls	r3, r0, #25
     9b0:	d509      	bpl.n	9c6 <_gclk_init_generators_by_fref+0x4a>
	((Gclk *)hw)->GENDIV.reg = data;
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <_gclk_init_generators_by_fref+0x64>)
     9b4:	2283      	movs	r2, #131	; 0x83
     9b6:	0052      	lsls	r2, r2, #1
     9b8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     9ba:	4a0b      	ldr	r2, [pc, #44]	; (9e8 <_gclk_init_generators_by_fref+0x6c>)
     9bc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     9be:	001a      	movs	r2, r3
     9c0:	7853      	ldrb	r3, [r2, #1]
     9c2:	09db      	lsrs	r3, r3, #7
     9c4:	d1fc      	bne.n	9c0 <_gclk_init_generators_by_fref+0x44>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
     9c6:	0603      	lsls	r3, r0, #24
     9c8:	d509      	bpl.n	9de <_gclk_init_generators_by_fref+0x62>
	((Gclk *)hw)->GENDIV.reg = data;
     9ca:	4b05      	ldr	r3, [pc, #20]	; (9e0 <_gclk_init_generators_by_fref+0x64>)
     9cc:	2208      	movs	r2, #8
     9ce:	32ff      	adds	r2, #255	; 0xff
     9d0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     9d2:	4a06      	ldr	r2, [pc, #24]	; (9ec <_gclk_init_generators_by_fref+0x70>)
     9d4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     9d6:	001a      	movs	r2, r3
     9d8:	7853      	ldrb	r3, [r2, #1]
     9da:	09db      	lsrs	r3, r3, #7
     9dc:	d1fc      	bne.n	9d8 <_gclk_init_generators_by_fref+0x5c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     9de:	4770      	bx	lr
     9e0:	40000c00 	.word	0x40000c00
     9e4:	00090503 	.word	0x00090503
     9e8:	00090306 	.word	0x00090306
     9ec:	00290707 	.word	0x00290707

000009f0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     9f0:	4b06      	ldr	r3, [pc, #24]	; (a0c <_pm_init+0x1c>)
     9f2:	7a1a      	ldrb	r2, [r3, #8]
     9f4:	b2d2      	uxtb	r2, r2
     9f6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     9f8:	7a5a      	ldrb	r2, [r3, #9]
     9fa:	b2d2      	uxtb	r2, r2
     9fc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     9fe:	7a9a      	ldrb	r2, [r3, #10]
     a00:	b2d2      	uxtb	r2, r2
     a02:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     a04:	7ada      	ldrb	r2, [r3, #11]
     a06:	b2d2      	uxtb	r2, r2
     a08:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     a0a:	4770      	bx	lr
     a0c:	40000400 	.word	0x40000400

00000a10 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
     a10:	4b14      	ldr	r3, [pc, #80]	; (a64 <_sysctrl_init_sources+0x54>)
     a12:	4a15      	ldr	r2, [pc, #84]	; (a68 <_sysctrl_init_sources+0x58>)
     a14:	829a      	strh	r2, [r3, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     a16:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     a18:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     a1a:	4814      	ldr	r0, [pc, #80]	; (a6c <_sysctrl_init_sources+0x5c>)
     a1c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     a1e:	0f92      	lsrs	r2, r2, #30
     a20:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     a22:	2002      	movs	r0, #2
     a24:	4302      	orrs	r2, r0
     a26:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     a28:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     a2a:	699a      	ldr	r2, [r3, #24]
     a2c:	4302      	orrs	r2, r0
     a2e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     a30:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     a32:	211f      	movs	r1, #31
     a34:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     a36:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
     a38:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
     a3a:	2202      	movs	r2, #2
     a3c:	68cb      	ldr	r3, [r1, #12]
     a3e:	421a      	tst	r2, r3
     a40:	d0fc      	beq.n	a3c <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
     a42:	4a08      	ldr	r2, [pc, #32]	; (a64 <_sysctrl_init_sources+0x54>)
     a44:	8a93      	ldrh	r3, [r2, #20]
     a46:	2180      	movs	r1, #128	; 0x80
     a48:	430b      	orrs	r3, r1
     a4a:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     a4c:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     a4e:	2208      	movs	r2, #8
     a50:	68cb      	ldr	r3, [r1, #12]
     a52:	421a      	tst	r2, r3
     a54:	d0fc      	beq.n	a50 <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     a56:	4a03      	ldr	r2, [pc, #12]	; (a64 <_sysctrl_init_sources+0x54>)
     a58:	6a13      	ldr	r3, [r2, #32]
     a5a:	2180      	movs	r1, #128	; 0x80
     a5c:	430b      	orrs	r3, r1
     a5e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     a60:	4770      	bx	lr
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	40000800 	.word	0x40000800
     a68:	00000602 	.word	0x00000602
     a6c:	0fff0000 	.word	0x0fff0000

00000a70 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     a70:	2202      	movs	r2, #2
     a72:	4b19      	ldr	r3, [pc, #100]	; (ad8 <_sysctrl_init_referenced_generators+0x68>)
     a74:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     a76:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     a78:	320e      	adds	r2, #14
     a7a:	68cb      	ldr	r3, [r1, #12]
     a7c:	421a      	tst	r2, r3
     a7e:	d0fc      	beq.n	a7a <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     a80:	4a16      	ldr	r2, [pc, #88]	; (adc <_sysctrl_init_referenced_generators+0x6c>)
     a82:	4b15      	ldr	r3, [pc, #84]	; (ad8 <_sysctrl_init_referenced_generators+0x68>)
     a84:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     a86:	4b16      	ldr	r3, [pc, #88]	; (ae0 <_sysctrl_init_referenced_generators+0x70>)
     a88:	681b      	ldr	r3, [r3, #0]
     a8a:	0e9b      	lsrs	r3, r3, #26
     a8c:	2b3f      	cmp	r3, #63	; 0x3f
     a8e:	d01a      	beq.n	ac6 <_sysctrl_init_referenced_generators+0x56>
     a90:	029b      	lsls	r3, r3, #10
     a92:	2280      	movs	r2, #128	; 0x80
     a94:	0092      	lsls	r2, r2, #2
     a96:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     a98:	4a0f      	ldr	r2, [pc, #60]	; (ad8 <_sysctrl_init_referenced_generators+0x68>)
     a9a:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     a9c:	2393      	movs	r3, #147	; 0x93
     a9e:	005b      	lsls	r3, r3, #1
     aa0:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     aa2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     aa4:	075b      	lsls	r3, r3, #29
     aa6:	d511      	bpl.n	acc <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     aa8:	0011      	movs	r1, r2
	tmp &= mask;
     aaa:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     aac:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     aae:	421a      	tst	r2, r3
     ab0:	d0fc      	beq.n	aac <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     ab2:	4a0c      	ldr	r2, [pc, #48]	; (ae4 <_sysctrl_init_referenced_generators+0x74>)
     ab4:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     ab6:	09db      	lsrs	r3, r3, #7
     ab8:	d1fc      	bne.n	ab4 <_sysctrl_init_referenced_generators+0x44>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     aba:	4a07      	ldr	r2, [pc, #28]	; (ad8 <_sysctrl_init_referenced_generators+0x68>)
     abc:	6993      	ldr	r3, [r2, #24]
     abe:	2102      	movs	r1, #2
     ac0:	438b      	bics	r3, r1
     ac2:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     ac4:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     ac6:	23fc      	movs	r3, #252	; 0xfc
     ac8:	01db      	lsls	r3, r3, #7
     aca:	e7e5      	b.n	a98 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     acc:	4902      	ldr	r1, [pc, #8]	; (ad8 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     ace:	2210      	movs	r2, #16
     ad0:	68cb      	ldr	r3, [r1, #12]
     ad2:	421a      	tst	r2, r3
     ad4:	d0fc      	beq.n	ad0 <_sysctrl_init_referenced_generators+0x60>
     ad6:	e7ec      	b.n	ab2 <_sysctrl_init_referenced_generators+0x42>
     ad8:	40000800 	.word	0x40000800
     adc:	0401bb80 	.word	0x0401bb80
     ae0:	00806024 	.word	0x00806024
     ae4:	40000c00 	.word	0x40000c00

00000ae8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     ae8:	2000      	movs	r0, #0
     aea:	4770      	bx	lr

00000aec <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     aec:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     aee:	7c83      	ldrb	r3, [r0, #18]
     af0:	220f      	movs	r2, #15
     af2:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     af4:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     af6:	3a08      	subs	r2, #8
     af8:	400a      	ands	r2, r1
     afa:	2a01      	cmp	r2, #1
     afc:	d00b      	beq.n	b16 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     afe:	015a      	lsls	r2, r3, #5
     b00:	4919      	ldr	r1, [pc, #100]	; (b68 <_usb_d_dev_handle_setup+0x7c>)
     b02:	468c      	mov	ip, r1
     b04:	4462      	add	r2, ip
     b06:	2110      	movs	r1, #16
     b08:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     b0a:	015b      	lsls	r3, r3, #5
     b0c:	4a17      	ldr	r2, [pc, #92]	; (b6c <_usb_d_dev_handle_setup+0x80>)
     b0e:	4694      	mov	ip, r2
     b10:	4463      	add	r3, ip
     b12:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     b14:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     b16:	064a      	lsls	r2, r1, #25
     b18:	d50e      	bpl.n	b38 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     b1a:	7cc2      	ldrb	r2, [r0, #19]
     b1c:	2140      	movs	r1, #64	; 0x40
     b1e:	438a      	bics	r2, r1
     b20:	74c2      	strb	r2, [r0, #19]
     b22:	015a      	lsls	r2, r3, #5
     b24:	4c12      	ldr	r4, [pc, #72]	; (b70 <_usb_d_dev_handle_setup+0x84>)
     b26:	46a4      	mov	ip, r4
     b28:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     b2a:	2580      	movs	r5, #128	; 0x80
     b2c:	2482      	movs	r4, #130	; 0x82
     b2e:	0064      	lsls	r4, r4, #1
     b30:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     b32:	2406      	movs	r4, #6
     b34:	34ff      	adds	r4, #255	; 0xff
     b36:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     b38:	7cc2      	ldrb	r2, [r0, #19]
     b3a:	2108      	movs	r1, #8
     b3c:	438a      	bics	r2, r1
     b3e:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     b40:	490c      	ldr	r1, [pc, #48]	; (b74 <_usb_d_dev_handle_setup+0x88>)
     b42:	015a      	lsls	r2, r3, #5
     b44:	188c      	adds	r4, r1, r2
     b46:	2500      	movs	r5, #0
     b48:	72a5      	strb	r5, [r4, #10]
     b4a:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     b4c:	0013      	movs	r3, r2
     b4e:	4c06      	ldr	r4, [pc, #24]	; (b68 <_usb_d_dev_handle_setup+0x7c>)
     b50:	46a4      	mov	ip, r4
     b52:	4463      	add	r3, ip
     b54:	246f      	movs	r4, #111	; 0x6f
     b56:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <_usb_d_dev_handle_setup+0x80>)
     b5a:	469c      	mov	ip, r3
     b5c:	4462      	add	r2, ip
     b5e:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     b60:	7c80      	ldrb	r0, [r0, #18]
     b62:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     b64:	4798      	blx	r3
     b66:	e7d5      	b.n	b14 <_usb_d_dev_handle_setup+0x28>
     b68:	41005100 	.word	0x41005100
     b6c:	41005108 	.word	0x41005108
     b70:	41005000 	.word	0x41005000
     b74:	20000224 	.word	0x20000224

00000b78 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     b78:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     b7a:	2220      	movs	r2, #32
     b7c:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     b7e:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     b80:	7c81      	ldrb	r1, [r0, #18]
     b82:	230f      	movs	r3, #15
     b84:	400b      	ands	r3, r1
     b86:	015b      	lsls	r3, r3, #5
     b88:	4905      	ldr	r1, [pc, #20]	; (ba0 <_usb_d_dev_handle_stall+0x28>)
     b8a:	468c      	mov	ip, r1
     b8c:	4463      	add	r3, ip
     b8e:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     b90:	6882      	ldr	r2, [r0, #8]
     b92:	7c80      	ldrb	r0, [r0, #18]
     b94:	4b03      	ldr	r3, [pc, #12]	; (ba4 <_usb_d_dev_handle_stall+0x2c>)
     b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     b98:	2101      	movs	r1, #1
     b9a:	4798      	blx	r3
}
     b9c:	bd10      	pop	{r4, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	41005108 	.word	0x41005108
     ba4:	20000224 	.word	0x20000224

00000ba8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     ba8:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     baa:	7c83      	ldrb	r3, [r0, #18]
     bac:	2bff      	cmp	r3, #255	; 0xff
     bae:	d002      	beq.n	bb6 <_usb_d_dev_trans_done+0xe>
     bb0:	7cc2      	ldrb	r2, [r0, #19]
     bb2:	0652      	lsls	r2, r2, #25
     bb4:	d400      	bmi.n	bb8 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     bb6:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     bb8:	7cc2      	ldrb	r2, [r0, #19]
     bba:	2440      	movs	r4, #64	; 0x40
     bbc:	43a2      	bics	r2, r4
     bbe:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     bc0:	6882      	ldr	r2, [r0, #8]
     bc2:	4802      	ldr	r0, [pc, #8]	; (bcc <_usb_d_dev_trans_done+0x24>)
     bc4:	6f04      	ldr	r4, [r0, #112]	; 0x70
     bc6:	0018      	movs	r0, r3
     bc8:	47a0      	blx	r4
     bca:	e7f4      	b.n	bb6 <_usb_d_dev_trans_done+0xe>
     bcc:	20000224 	.word	0x20000224

00000bd0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     bd0:	b530      	push	{r4, r5, lr}
     bd2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     bd4:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     bd6:	ac01      	add	r4, sp, #4
     bd8:	2525      	movs	r5, #37	; 0x25
     bda:	7025      	strb	r5, [r4, #0]
     bdc:	3525      	adds	r5, #37	; 0x25
     bde:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     be0:	2bff      	cmp	r3, #255	; 0xff
     be2:	d01b      	beq.n	c1c <_usb_d_dev_trans_stop+0x4c>
     be4:	7cc4      	ldrb	r4, [r0, #19]
     be6:	0664      	lsls	r4, r4, #25
     be8:	d518      	bpl.n	c1c <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     bea:	240f      	movs	r4, #15
     bec:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
     bee:	2900      	cmp	r1, #0
     bf0:	d016      	beq.n	c20 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     bf2:	015c      	lsls	r4, r3, #5
     bf4:	4d0e      	ldr	r5, [pc, #56]	; (c30 <_usb_d_dev_trans_stop+0x60>)
     bf6:	46ac      	mov	ip, r5
     bf8:	4464      	add	r4, ip
     bfa:	2580      	movs	r5, #128	; 0x80
     bfc:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     bfe:	ac01      	add	r4, sp, #4
     c00:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     c02:	0159      	lsls	r1, r3, #5
     c04:	4d0a      	ldr	r5, [pc, #40]	; (c30 <_usb_d_dev_trans_stop+0x60>)
     c06:	46ac      	mov	ip, r5
     c08:	4461      	add	r1, ip
     c0a:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     c0c:	015b      	lsls	r3, r3, #5
     c0e:	4909      	ldr	r1, [pc, #36]	; (c34 <_usb_d_dev_trans_stop+0x64>)
     c10:	468c      	mov	ip, r1
     c12:	4463      	add	r3, ip
     c14:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     c16:	0011      	movs	r1, r2
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <_usb_d_dev_trans_stop+0x68>)
     c1a:	4798      	blx	r3
}
     c1c:	b003      	add	sp, #12
     c1e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     c20:	015c      	lsls	r4, r3, #5
     c22:	4d03      	ldr	r5, [pc, #12]	; (c30 <_usb_d_dev_trans_stop+0x60>)
     c24:	46ac      	mov	ip, r5
     c26:	4464      	add	r4, ip
     c28:	2540      	movs	r5, #64	; 0x40
     c2a:	7165      	strb	r5, [r4, #5]
     c2c:	e7e7      	b.n	bfe <_usb_d_dev_trans_stop+0x2e>
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	41005100 	.word	0x41005100
     c34:	41005108 	.word	0x41005108
     c38:	00000ba9 	.word	0x00000ba9

00000c3c <_usb_d_dev_handle_trfail>:
{
     c3c:	b570      	push	{r4, r5, r6, lr}
     c3e:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     c40:	7c83      	ldrb	r3, [r0, #18]
     c42:	220f      	movs	r2, #15
     c44:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     c46:	aa01      	add	r2, sp, #4
     c48:	2404      	movs	r4, #4
     c4a:	7014      	strb	r4, [r2, #0]
     c4c:	3404      	adds	r4, #4
     c4e:	7054      	strb	r4, [r2, #1]
     c50:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
     c52:	2900      	cmp	r1, #0
     c54:	d031      	beq.n	cba <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     c56:	001a      	movs	r2, r3
     c58:	3208      	adds	r2, #8
     c5a:	0152      	lsls	r2, r2, #5
     c5c:	4c32      	ldr	r4, [pc, #200]	; (d28 <_usb_d_dev_handle_trfail+0xec>)
     c5e:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     c60:	0664      	lsls	r4, r4, #25
     c62:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
     c64:	010a      	lsls	r2, r1, #4
     c66:	1952      	adds	r2, r2, r5
     c68:	4d30      	ldr	r5, [pc, #192]	; (d2c <_usb_d_dev_handle_trfail+0xf0>)
     c6a:	18aa      	adds	r2, r5, r2
     c6c:	7a95      	ldrb	r5, [r2, #10]
     c6e:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     c70:	2c02      	cmp	r4, #2
     c72:	d02a      	beq.n	cca <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
     c74:	07ac      	lsls	r4, r5, #30
     c76:	d541      	bpl.n	cfc <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     c78:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     c7a:	7a94      	ldrb	r4, [r2, #10]
     c7c:	2602      	movs	r6, #2
     c7e:	43b4      	bics	r4, r6
     c80:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     c82:	aa01      	add	r2, sp, #4
     c84:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     c86:	015a      	lsls	r2, r3, #5
     c88:	4e29      	ldr	r6, [pc, #164]	; (d30 <_usb_d_dev_handle_trfail+0xf4>)
     c8a:	46b4      	mov	ip, r6
     c8c:	4462      	add	r2, ip
     c8e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     c90:	015b      	lsls	r3, r3, #5
     c92:	4a28      	ldr	r2, [pc, #160]	; (d34 <_usb_d_dev_handle_trfail+0xf8>)
     c94:	4694      	mov	ip, r2
     c96:	4463      	add	r3, ip
     c98:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     c9a:	2307      	movs	r3, #7
     c9c:	402b      	ands	r3, r5
     c9e:	2b01      	cmp	r3, #1
     ca0:	d13f      	bne.n	d22 <_usb_d_dev_handle_trfail+0xe6>
     ca2:	7cc3      	ldrb	r3, [r0, #19]
     ca4:	065b      	lsls	r3, r3, #25
     ca6:	d53c      	bpl.n	d22 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     ca8:	7cc3      	ldrb	r3, [r0, #19]
     caa:	09db      	lsrs	r3, r3, #7
     cac:	4299      	cmp	r1, r3
     cae:	d038      	beq.n	d22 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     cb0:	2200      	movs	r2, #0
     cb2:	0019      	movs	r1, r3
     cb4:	4b20      	ldr	r3, [pc, #128]	; (d38 <_usb_d_dev_handle_trfail+0xfc>)
     cb6:	4798      	blx	r3
     cb8:	e033      	b.n	d22 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     cba:	001a      	movs	r2, r3
     cbc:	3208      	adds	r2, #8
     cbe:	0152      	lsls	r2, r2, #5
     cc0:	4c19      	ldr	r4, [pc, #100]	; (d28 <_usb_d_dev_handle_trfail+0xec>)
     cc2:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     cc4:	2207      	movs	r2, #7
     cc6:	4014      	ands	r4, r2
     cc8:	e7cc      	b.n	c64 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     cca:	07ec      	lsls	r4, r5, #31
     ccc:	d5d2      	bpl.n	c74 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     cce:	7a94      	ldrb	r4, [r2, #10]
     cd0:	2501      	movs	r5, #1
     cd2:	43ac      	bics	r4, r5
     cd4:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     cd6:	aa01      	add	r2, sp, #4
     cd8:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     cda:	015a      	lsls	r2, r3, #5
     cdc:	4d14      	ldr	r5, [pc, #80]	; (d30 <_usb_d_dev_handle_trfail+0xf4>)
     cde:	46ac      	mov	ip, r5
     ce0:	4462      	add	r2, ip
     ce2:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     ce4:	015b      	lsls	r3, r3, #5
     ce6:	4a13      	ldr	r2, [pc, #76]	; (d34 <_usb_d_dev_handle_trfail+0xf8>)
     ce8:	4694      	mov	ip, r2
     cea:	4463      	add	r3, ip
     cec:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     cee:	1e4b      	subs	r3, r1, #1
     cf0:	4199      	sbcs	r1, r3
     cf2:	b2c9      	uxtb	r1, r1
     cf4:	2204      	movs	r2, #4
     cf6:	4b10      	ldr	r3, [pc, #64]	; (d38 <_usb_d_dev_handle_trfail+0xfc>)
     cf8:	4798      	blx	r3
     cfa:	e012      	b.n	d22 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
     cfc:	005a      	lsls	r2, r3, #1
     cfe:	1852      	adds	r2, r2, r1
     d00:	0112      	lsls	r2, r2, #4
     d02:	480a      	ldr	r0, [pc, #40]	; (d2c <_usb_d_dev_handle_trfail+0xf0>)
     d04:	1882      	adds	r2, r0, r2
     d06:	2000      	movs	r0, #0
     d08:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     d0a:	aa01      	add	r2, sp, #4
     d0c:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     d0e:	015a      	lsls	r2, r3, #5
     d10:	4807      	ldr	r0, [pc, #28]	; (d30 <_usb_d_dev_handle_trfail+0xf4>)
     d12:	4684      	mov	ip, r0
     d14:	4462      	add	r2, ip
     d16:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     d18:	015b      	lsls	r3, r3, #5
     d1a:	4a06      	ldr	r2, [pc, #24]	; (d34 <_usb_d_dev_handle_trfail+0xf8>)
     d1c:	4694      	mov	ip, r2
     d1e:	4463      	add	r3, ip
     d20:	7019      	strb	r1, [r3, #0]
}
     d22:	b002      	add	sp, #8
     d24:	bd70      	pop	{r4, r5, r6, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	41005000 	.word	0x41005000
     d2c:	20000224 	.word	0x20000224
     d30:	41005100 	.word	0x41005100
     d34:	41005108 	.word	0x41005108
     d38:	00000bd1 	.word	0x00000bd1

00000d3c <_usb_d_dev_reset_epts>:
{
     d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3e:	46c6      	mov	lr, r8
     d40:	b500      	push	{lr}
     d42:	4d0d      	ldr	r5, [pc, #52]	; (d78 <_usb_d_dev_reset_epts+0x3c>)
     d44:	002c      	movs	r4, r5
     d46:	3474      	adds	r4, #116	; 0x74
     d48:	23a4      	movs	r3, #164	; 0xa4
     d4a:	009b      	lsls	r3, r3, #2
     d4c:	469c      	mov	ip, r3
     d4e:	4465      	add	r5, ip
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     d50:	4b0a      	ldr	r3, [pc, #40]	; (d7c <_usb_d_dev_reset_epts+0x40>)
     d52:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
     d54:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
     d56:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     d58:	2103      	movs	r1, #3
     d5a:	0020      	movs	r0, r4
     d5c:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
     d5e:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
     d60:	74e6      	strb	r6, [r4, #19]
     d62:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
     d64:	42ac      	cmp	r4, r5
     d66:	d1f7      	bne.n	d58 <_usb_d_dev_reset_epts+0x1c>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     d68:	2260      	movs	r2, #96	; 0x60
     d6a:	2100      	movs	r1, #0
     d6c:	4802      	ldr	r0, [pc, #8]	; (d78 <_usb_d_dev_reset_epts+0x3c>)
     d6e:	4b04      	ldr	r3, [pc, #16]	; (d80 <_usb_d_dev_reset_epts+0x44>)
     d70:	4798      	blx	r3
}
     d72:	bc04      	pop	{r2}
     d74:	4690      	mov	r8, r2
     d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d78:	20000224 	.word	0x20000224
     d7c:	00000ba9 	.word	0x00000ba9
     d80:	00002b0f 	.word	0x00002b0f

00000d84 <_usb_d_dev_in_next>:
{
     d84:	b5f0      	push	{r4, r5, r6, r7, lr}
     d86:	46c6      	mov	lr, r8
     d88:	b500      	push	{lr}
     d8a:	0004      	movs	r4, r0
     d8c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
     d8e:	7c83      	ldrb	r3, [r0, #18]
     d90:	250f      	movs	r5, #15
     d92:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     d94:	2900      	cmp	r1, #0
     d96:	d100      	bne.n	d9a <_usb_d_dev_in_next+0x16>
     d98:	e0aa      	b.n	ef0 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     d9a:	016a      	lsls	r2, r5, #5
     d9c:	4b5a      	ldr	r3, [pc, #360]	; (f08 <_usb_d_dev_in_next+0x184>)
     d9e:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     da0:	6958      	ldr	r0, [r3, #20]
     da2:	0480      	lsls	r0, r0, #18
     da4:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     da6:	8a23      	ldrh	r3, [r4, #16]
     da8:	4a58      	ldr	r2, [pc, #352]	; (f0c <_usb_d_dev_in_next+0x188>)
     daa:	4293      	cmp	r3, r2
     dac:	d100      	bne.n	db0 <_usb_d_dev_in_next+0x2c>
     dae:	e09a      	b.n	ee6 <_usb_d_dev_in_next+0x162>
     db0:	3b01      	subs	r3, #1
     db2:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     db4:	7ce3      	ldrb	r3, [r4, #19]
     db6:	2707      	movs	r7, #7
     db8:	401f      	ands	r7, r3
	if (isr) {
     dba:	2e00      	cmp	r6, #0
     dbc:	d005      	beq.n	dca <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     dbe:	016b      	lsls	r3, r5, #5
     dc0:	4953      	ldr	r1, [pc, #332]	; (f10 <_usb_d_dev_in_next+0x18c>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
     dc6:	2102      	movs	r1, #2
     dc8:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
     dca:	68a3      	ldr	r3, [r4, #8]
     dcc:	18c1      	adds	r1, r0, r3
     dce:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
     dd0:	6863      	ldr	r3, [r4, #4]
     dd2:	4299      	cmp	r1, r3
     dd4:	d24a      	bcs.n	e6c <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
     dd6:	1a5b      	subs	r3, r3, r1
     dd8:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
     dda:	7ce2      	ldrb	r2, [r4, #19]
     ddc:	0692      	lsls	r2, r2, #26
     dde:	d535      	bpl.n	e4c <_usb_d_dev_in_next+0xc8>
     de0:	8a22      	ldrh	r2, [r4, #16]
     de2:	1c10      	adds	r0, r2, #0
     de4:	b292      	uxth	r2, r2
     de6:	429a      	cmp	r2, r3
     de8:	d900      	bls.n	dec <_usb_d_dev_in_next+0x68>
     dea:	1c18      	adds	r0, r3, #0
     dec:	b283      	uxth	r3, r0
     dee:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
     df0:	6823      	ldr	r3, [r4, #0]
     df2:	469c      	mov	ip, r3
     df4:	4461      	add	r1, ip
     df6:	4642      	mov	r2, r8
     df8:	68e0      	ldr	r0, [r4, #12]
     dfa:	4b46      	ldr	r3, [pc, #280]	; (f14 <_usb_d_dev_in_next+0x190>)
     dfc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
     dfe:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
     e00:	016a      	lsls	r2, r5, #5
     e02:	4b41      	ldr	r3, [pc, #260]	; (f08 <_usb_d_dev_in_next+0x184>)
     e04:	189b      	adds	r3, r3, r2
     e06:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     e08:	016a      	lsls	r2, r5, #5
     e0a:	4b3f      	ldr	r3, [pc, #252]	; (f08 <_usb_d_dev_in_next+0x184>)
     e0c:	189b      	adds	r3, r3, r2
     e0e:	695a      	ldr	r2, [r3, #20]
     e10:	4641      	mov	r1, r8
     e12:	0489      	lsls	r1, r1, #18
     e14:	0c89      	lsrs	r1, r1, #18
     e16:	0b92      	lsrs	r2, r2, #14
     e18:	0392      	lsls	r2, r2, #14
     e1a:	430a      	orrs	r2, r1
     e1c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     e1e:	695a      	ldr	r2, [r3, #20]
     e20:	493d      	ldr	r1, [pc, #244]	; (f18 <_usb_d_dev_in_next+0x194>)
     e22:	400a      	ands	r2, r1
     e24:	615a      	str	r2, [r3, #20]
	if (!isr) {
     e26:	2e00      	cmp	r6, #0
     e28:	d107      	bne.n	e3a <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
     e2a:	2f01      	cmp	r7, #1
     e2c:	d059      	beq.n	ee2 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
     e2e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     e30:	016b      	lsls	r3, r5, #5
     e32:	493a      	ldr	r1, [pc, #232]	; (f1c <_usb_d_dev_in_next+0x198>)
     e34:	468c      	mov	ip, r1
     e36:	4463      	add	r3, ip
     e38:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e3a:	016d      	lsls	r5, r5, #5
     e3c:	4b34      	ldr	r3, [pc, #208]	; (f10 <_usb_d_dev_in_next+0x18c>)
     e3e:	469c      	mov	ip, r3
     e40:	4465      	add	r5, ip
     e42:	2380      	movs	r3, #128	; 0x80
     e44:	716b      	strb	r3, [r5, #5]
}
     e46:	bc04      	pop	{r2}
     e48:	4690      	mov	r8, r2
     e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e4c:	1c1a      	adds	r2, r3, #0
     e4e:	2080      	movs	r0, #128	; 0x80
     e50:	0180      	lsls	r0, r0, #6
     e52:	4283      	cmp	r3, r0
     e54:	d901      	bls.n	e5a <_usb_d_dev_in_next+0xd6>
     e56:	4b32      	ldr	r3, [pc, #200]	; (f20 <_usb_d_dev_in_next+0x19c>)
     e58:	881a      	ldrh	r2, [r3, #0]
     e5a:	b293      	uxth	r3, r2
     e5c:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
     e5e:	6823      	ldr	r3, [r4, #0]
     e60:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
     e62:	016a      	lsls	r2, r5, #5
     e64:	4b28      	ldr	r3, [pc, #160]	; (f08 <_usb_d_dev_in_next+0x184>)
     e66:	189b      	adds	r3, r3, r2
     e68:	6119      	str	r1, [r3, #16]
     e6a:	e7cd      	b.n	e08 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
     e6c:	7ce3      	ldrb	r3, [r4, #19]
     e6e:	06db      	lsls	r3, r3, #27
     e70:	d50f      	bpl.n	e92 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
     e72:	7ce3      	ldrb	r3, [r4, #19]
     e74:	2210      	movs	r2, #16
     e76:	4393      	bics	r3, r2
     e78:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     e7a:	016a      	lsls	r2, r5, #5
     e7c:	4b22      	ldr	r3, [pc, #136]	; (f08 <_usb_d_dev_in_next+0x184>)
     e7e:	189b      	adds	r3, r3, r2
     e80:	695a      	ldr	r2, [r3, #20]
     e82:	0b92      	lsrs	r2, r2, #14
     e84:	0392      	lsls	r2, r2, #14
     e86:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     e88:	695a      	ldr	r2, [r3, #20]
     e8a:	4923      	ldr	r1, [pc, #140]	; (f18 <_usb_d_dev_in_next+0x194>)
     e8c:	400a      	ands	r2, r1
     e8e:	615a      	str	r2, [r3, #20]
     e90:	e7c9      	b.n	e26 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
     e92:	2f01      	cmp	r7, #1
     e94:	d00e      	beq.n	eb4 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e96:	016d      	lsls	r5, r5, #5
     e98:	4b22      	ldr	r3, [pc, #136]	; (f24 <_usb_d_dev_in_next+0x1a0>)
     e9a:	469c      	mov	ip, r3
     e9c:	4465      	add	r5, ip
     e9e:	234a      	movs	r3, #74	; 0x4a
     ea0:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
     ea2:	8a21      	ldrh	r1, [r4, #16]
     ea4:	4002      	ands	r2, r0
     ea6:	4291      	cmp	r1, r2
     ea8:	d00b      	beq.n	ec2 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     eaa:	2100      	movs	r1, #0
     eac:	0020      	movs	r0, r4
     eae:	4b1e      	ldr	r3, [pc, #120]	; (f28 <_usb_d_dev_in_next+0x1a4>)
     eb0:	4798      	blx	r3
	return;
     eb2:	e7c8      	b.n	e46 <_usb_d_dev_in_next+0xc2>
     eb4:	016d      	lsls	r5, r5, #5
     eb6:	4b1b      	ldr	r3, [pc, #108]	; (f24 <_usb_d_dev_in_next+0x1a0>)
     eb8:	469c      	mov	ip, r3
     eba:	4465      	add	r5, ip
     ebc:	234b      	movs	r3, #75	; 0x4b
     ebe:	702b      	strb	r3, [r5, #0]
     ec0:	e7ef      	b.n	ea2 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
     ec2:	7ce3      	ldrb	r3, [r4, #19]
     ec4:	2240      	movs	r2, #64	; 0x40
     ec6:	4393      	bics	r3, r2
     ec8:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
     eca:	7ca0      	ldrb	r0, [r4, #18]
     ecc:	4b0e      	ldr	r3, [pc, #56]	; (f08 <_usb_d_dev_in_next+0x184>)
     ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     ed0:	68a1      	ldr	r1, [r4, #8]
     ed2:	4798      	blx	r3
     ed4:	2800      	cmp	r0, #0
     ed6:	d1b6      	bne.n	e46 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
     ed8:	7ce3      	ldrb	r3, [r4, #19]
     eda:	2240      	movs	r2, #64	; 0x40
     edc:	4313      	orrs	r3, r2
     ede:	74e3      	strb	r3, [r4, #19]
     ee0:	e7e3      	b.n	eaa <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
     ee2:	224e      	movs	r2, #78	; 0x4e
     ee4:	e7a4      	b.n	e30 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     ee6:	7ce7      	ldrb	r7, [r4, #19]
     ee8:	2307      	movs	r3, #7
     eea:	401f      	ands	r7, r3
     eec:	4a07      	ldr	r2, [pc, #28]	; (f0c <_usb_d_dev_in_next+0x188>)
     eee:	e766      	b.n	dbe <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     ef0:	8a03      	ldrh	r3, [r0, #16]
     ef2:	4a06      	ldr	r2, [pc, #24]	; (f0c <_usb_d_dev_in_next+0x188>)
     ef4:	2000      	movs	r0, #0
     ef6:	4293      	cmp	r3, r2
     ef8:	d000      	beq.n	efc <_usb_d_dev_in_next+0x178>
     efa:	e759      	b.n	db0 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     efc:	7ce3      	ldrb	r3, [r4, #19]
     efe:	2707      	movs	r7, #7
     f00:	401f      	ands	r7, r3
     f02:	2000      	movs	r0, #0
     f04:	4a01      	ldr	r2, [pc, #4]	; (f0c <_usb_d_dev_in_next+0x188>)
     f06:	e760      	b.n	dca <_usb_d_dev_in_next+0x46>
     f08:	20000224 	.word	0x20000224
     f0c:	000003ff 	.word	0x000003ff
     f10:	41005100 	.word	0x41005100
     f14:	00002afd 	.word	0x00002afd
     f18:	f0003fff 	.word	0xf0003fff
     f1c:	41005109 	.word	0x41005109
     f20:	00002b3e 	.word	0x00002b3e
     f24:	41005108 	.word	0x41005108
     f28:	00000ba9 	.word	0x00000ba9

00000f2c <_usb_d_dev_out_next>:
{
     f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f2e:	46de      	mov	lr, fp
     f30:	4657      	mov	r7, sl
     f32:	464e      	mov	r6, r9
     f34:	4645      	mov	r5, r8
     f36:	b5e0      	push	{r5, r6, r7, lr}
     f38:	0004      	movs	r4, r0
     f3a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     f3c:	7c83      	ldrb	r3, [r0, #18]
     f3e:	250f      	movs	r5, #15
     f40:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     f42:	2900      	cmp	r1, #0
     f44:	d057      	beq.n	ff6 <_usb_d_dev_out_next+0xca>
     f46:	016a      	lsls	r2, r5, #5
     f48:	4b7d      	ldr	r3, [pc, #500]	; (1140 <_usb_d_dev_out_next+0x214>)
     f4a:	189b      	adds	r3, r3, r2
     f4c:	685a      	ldr	r2, [r3, #4]
     f4e:	0112      	lsls	r2, r2, #4
     f50:	0c92      	lsrs	r2, r2, #18
     f52:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     f54:	685f      	ldr	r7, [r3, #4]
     f56:	04bf      	lsls	r7, r7, #18
     f58:	0cbf      	lsrs	r7, r7, #18
     f5a:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     f5c:	8a06      	ldrh	r6, [r0, #16]
     f5e:	4b79      	ldr	r3, [pc, #484]	; (1144 <_usb_d_dev_out_next+0x218>)
     f60:	429e      	cmp	r6, r3
     f62:	d100      	bne.n	f66 <_usb_d_dev_out_next+0x3a>
     f64:	e0cd      	b.n	1102 <_usb_d_dev_out_next+0x1d6>
     f66:	3e01      	subs	r6, #1
     f68:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
     f6a:	465f      	mov	r7, fp
     f6c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f6e:	7ce3      	ldrb	r3, [r4, #19]
     f70:	2207      	movs	r2, #7
     f72:	401a      	ands	r2, r3
     f74:	4691      	mov	r9, r2
	if (isr) {
     f76:	4643      	mov	r3, r8
     f78:	2b00      	cmp	r3, #0
     f7a:	d005      	beq.n	f88 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f7c:	016b      	lsls	r3, r5, #5
     f7e:	4a72      	ldr	r2, [pc, #456]	; (1148 <_usb_d_dev_out_next+0x21c>)
     f80:	4694      	mov	ip, r2
     f82:	4463      	add	r3, ip
     f84:	2201      	movs	r2, #1
     f86:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
     f88:	7ce3      	ldrb	r3, [r4, #19]
     f8a:	069b      	lsls	r3, r3, #26
     f8c:	d50f      	bpl.n	fae <_usb_d_dev_out_next+0x82>
     f8e:	6863      	ldr	r3, [r4, #4]
     f90:	2b00      	cmp	r3, #0
     f92:	d039      	beq.n	1008 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
     f94:	68a0      	ldr	r0, [r4, #8]
     f96:	1a1b      	subs	r3, r3, r0
     f98:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
     f9a:	6822      	ldr	r2, [r4, #0]
     f9c:	4694      	mov	ip, r2
     f9e:	4460      	add	r0, ip
     fa0:	68e1      	ldr	r1, [r4, #12]
     fa2:	001a      	movs	r2, r3
     fa4:	42bb      	cmp	r3, r7
     fa6:	d900      	bls.n	faa <_usb_d_dev_out_next+0x7e>
     fa8:	003a      	movs	r2, r7
     faa:	4b68      	ldr	r3, [pc, #416]	; (114c <_usb_d_dev_out_next+0x220>)
     fac:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     fae:	6863      	ldr	r3, [r4, #4]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d029      	beq.n	1008 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
     fb4:	4642      	mov	r2, r8
     fb6:	2a00      	cmp	r2, #0
     fb8:	d042      	beq.n	1040 <_usb_d_dev_out_next+0x114>
     fba:	8a22      	ldrh	r2, [r4, #16]
     fbc:	42ba      	cmp	r2, r7
     fbe:	d93f      	bls.n	1040 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
     fc0:	7ce3      	ldrb	r3, [r4, #19]
     fc2:	2210      	movs	r2, #16
     fc4:	4393      	bics	r3, r2
     fc6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
     fc8:	68a3      	ldr	r3, [r4, #8]
     fca:	445b      	add	r3, fp
     fcc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
     fce:	464b      	mov	r3, r9
     fd0:	2b01      	cmp	r3, #1
     fd2:	d100      	bne.n	fd6 <_usb_d_dev_out_next+0xaa>
     fd4:	e087      	b.n	10e6 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fd6:	016b      	lsls	r3, r5, #5
     fd8:	4a5d      	ldr	r2, [pc, #372]	; (1150 <_usb_d_dev_out_next+0x224>)
     fda:	4694      	mov	ip, r2
     fdc:	4463      	add	r3, ip
     fde:	2225      	movs	r2, #37	; 0x25
     fe0:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
     fe2:	2d00      	cmp	r5, #0
     fe4:	d102      	bne.n	fec <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
     fe6:	4b56      	ldr	r3, [pc, #344]	; (1140 <_usb_d_dev_out_next+0x214>)
     fe8:	68e2      	ldr	r2, [r4, #12]
     fea:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     fec:	2100      	movs	r1, #0
     fee:	0020      	movs	r0, r4
     ff0:	4b58      	ldr	r3, [pc, #352]	; (1154 <_usb_d_dev_out_next+0x228>)
     ff2:	4798      	blx	r3
	return;
     ff4:	e059      	b.n	10aa <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     ff6:	8a06      	ldrh	r6, [r0, #16]
     ff8:	4b52      	ldr	r3, [pc, #328]	; (1144 <_usb_d_dev_out_next+0x218>)
     ffa:	429e      	cmp	r6, r3
     ffc:	d100      	bne.n	1000 <_usb_d_dev_out_next+0xd4>
     ffe:	e08e      	b.n	111e <_usb_d_dev_out_next+0x1f2>
    1000:	2300      	movs	r3, #0
    1002:	469b      	mov	fp, r3
    1004:	469a      	mov	sl, r3
    1006:	e7ae      	b.n	f66 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1008:	7ce3      	ldrb	r3, [r4, #19]
    100a:	06db      	lsls	r3, r3, #27
    100c:	d400      	bmi.n	1010 <_usb_d_dev_out_next+0xe4>
    100e:	e07f      	b.n	1110 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1010:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1012:	2210      	movs	r2, #16
    1014:	4393      	bics	r3, r2
    1016:	2220      	movs	r2, #32
    1018:	4313      	orrs	r3, r2
    101a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    101c:	4a48      	ldr	r2, [pc, #288]	; (1140 <_usb_d_dev_out_next+0x214>)
    101e:	016b      	lsls	r3, r5, #5
    1020:	68e1      	ldr	r1, [r4, #12]
    1022:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1024:	8a21      	ldrh	r1, [r4, #16]
    1026:	18d3      	adds	r3, r2, r3
    1028:	685a      	ldr	r2, [r3, #4]
    102a:	0489      	lsls	r1, r1, #18
    102c:	0909      	lsrs	r1, r1, #4
    102e:	484a      	ldr	r0, [pc, #296]	; (1158 <_usb_d_dev_out_next+0x22c>)
    1030:	4002      	ands	r2, r0
    1032:	430a      	orrs	r2, r1
    1034:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1036:	685a      	ldr	r2, [r3, #4]
    1038:	0b92      	lsrs	r2, r2, #14
    103a:	0392      	lsls	r2, r2, #14
    103c:	605a      	str	r2, [r3, #4]
    103e:	e022      	b.n	1086 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1040:	68a2      	ldr	r2, [r4, #8]
    1042:	4452      	add	r2, sl
    1044:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1046:	4293      	cmp	r3, r2
    1048:	d9c1      	bls.n	fce <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    104a:	1a9b      	subs	r3, r3, r2
    104c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    104e:	7ce1      	ldrb	r1, [r4, #19]
    1050:	0689      	lsls	r1, r1, #26
    1052:	d530      	bpl.n	10b6 <_usb_d_dev_out_next+0x18a>
    1054:	8a22      	ldrh	r2, [r4, #16]
    1056:	1c11      	adds	r1, r2, #0
    1058:	b292      	uxth	r2, r2
    105a:	429a      	cmp	r2, r3
    105c:	d900      	bls.n	1060 <_usb_d_dev_out_next+0x134>
    105e:	1c19      	adds	r1, r3, #0
    1060:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1062:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1064:	016a      	lsls	r2, r5, #5
    1066:	4936      	ldr	r1, [pc, #216]	; (1140 <_usb_d_dev_out_next+0x214>)
    1068:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    106a:	016a      	lsls	r2, r5, #5
    106c:	4934      	ldr	r1, [pc, #208]	; (1140 <_usb_d_dev_out_next+0x214>)
    106e:	1889      	adds	r1, r1, r2
    1070:	684a      	ldr	r2, [r1, #4]
    1072:	049b      	lsls	r3, r3, #18
    1074:	091b      	lsrs	r3, r3, #4
    1076:	4838      	ldr	r0, [pc, #224]	; (1158 <_usb_d_dev_out_next+0x22c>)
    1078:	4002      	ands	r2, r0
    107a:	4313      	orrs	r3, r2
    107c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    107e:	684b      	ldr	r3, [r1, #4]
    1080:	0b9b      	lsrs	r3, r3, #14
    1082:	039b      	lsls	r3, r3, #14
    1084:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1086:	4643      	mov	r3, r8
    1088:	2b00      	cmp	r3, #0
    108a:	d108      	bne.n	109e <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    108c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    108e:	464b      	mov	r3, r9
    1090:	2b01      	cmp	r3, #1
    1092:	d02f      	beq.n	10f4 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1094:	016b      	lsls	r3, r5, #5
    1096:	4931      	ldr	r1, [pc, #196]	; (115c <_usb_d_dev_out_next+0x230>)
    1098:	468c      	mov	ip, r1
    109a:	4463      	add	r3, ip
    109c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    109e:	016d      	lsls	r5, r5, #5
    10a0:	4b29      	ldr	r3, [pc, #164]	; (1148 <_usb_d_dev_out_next+0x21c>)
    10a2:	469c      	mov	ip, r3
    10a4:	4465      	add	r5, ip
    10a6:	2340      	movs	r3, #64	; 0x40
    10a8:	712b      	strb	r3, [r5, #4]
}
    10aa:	bc3c      	pop	{r2, r3, r4, r5}
    10ac:	4690      	mov	r8, r2
    10ae:	4699      	mov	r9, r3
    10b0:	46a2      	mov	sl, r4
    10b2:	46ab      	mov	fp, r5
    10b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    10b6:	8a21      	ldrh	r1, [r4, #16]
    10b8:	428b      	cmp	r3, r1
    10ba:	d90a      	bls.n	10d2 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    10bc:	2180      	movs	r1, #128	; 0x80
    10be:	0189      	lsls	r1, r1, #6
    10c0:	428b      	cmp	r3, r1
    10c2:	d80d      	bhi.n	10e0 <_usb_d_dev_out_next+0x1b4>
    10c4:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    10c6:	6821      	ldr	r1, [r4, #0]
    10c8:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    10ca:	0169      	lsls	r1, r5, #5
    10cc:	481c      	ldr	r0, [pc, #112]	; (1140 <_usb_d_dev_out_next+0x214>)
    10ce:	500a      	str	r2, [r1, r0]
    10d0:	e7cb      	b.n	106a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    10d2:	428b      	cmp	r3, r1
    10d4:	d2f7      	bcs.n	10c6 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    10d6:	7ce1      	ldrb	r1, [r4, #19]
    10d8:	2020      	movs	r0, #32
    10da:	4301      	orrs	r1, r0
    10dc:	74e1      	strb	r1, [r4, #19]
    10de:	e7f2      	b.n	10c6 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    10e0:	2380      	movs	r3, #128	; 0x80
    10e2:	019b      	lsls	r3, r3, #6
    10e4:	e7ef      	b.n	10c6 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10e6:	016b      	lsls	r3, r5, #5
    10e8:	4a19      	ldr	r2, [pc, #100]	; (1150 <_usb_d_dev_out_next+0x224>)
    10ea:	4694      	mov	ip, r2
    10ec:	4463      	add	r3, ip
    10ee:	222d      	movs	r2, #45	; 0x2d
    10f0:	701a      	strb	r2, [r3, #0]
    10f2:	e776      	b.n	fe2 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    10f4:	016a      	lsls	r2, r5, #5
    10f6:	4b12      	ldr	r3, [pc, #72]	; (1140 <_usb_d_dev_out_next+0x214>)
    10f8:	189b      	adds	r3, r3, r2
    10fa:	2200      	movs	r2, #0
    10fc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    10fe:	322d      	adds	r2, #45	; 0x2d
    1100:	e7c8      	b.n	1094 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1102:	05bf      	lsls	r7, r7, #22
    1104:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1106:	7cc3      	ldrb	r3, [r0, #19]
    1108:	2207      	movs	r2, #7
    110a:	401a      	ands	r2, r3
    110c:	4691      	mov	r9, r2
    110e:	e735      	b.n	f7c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1110:	4643      	mov	r3, r8
    1112:	2b00      	cmp	r3, #0
    1114:	d10c      	bne.n	1130 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1116:	68a3      	ldr	r3, [r4, #8]
    1118:	4453      	add	r3, sl
    111a:	60a3      	str	r3, [r4, #8]
    111c:	e757      	b.n	fce <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    111e:	7cc3      	ldrb	r3, [r0, #19]
    1120:	2207      	movs	r2, #7
    1122:	401a      	ands	r2, r3
    1124:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1126:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1128:	2300      	movs	r3, #0
    112a:	469b      	mov	fp, r3
    112c:	469a      	mov	sl, r3
    112e:	e72b      	b.n	f88 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1130:	8a23      	ldrh	r3, [r4, #16]
    1132:	42bb      	cmp	r3, r7
    1134:	d900      	bls.n	1138 <_usb_d_dev_out_next+0x20c>
    1136:	e743      	b.n	fc0 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1138:	68a3      	ldr	r3, [r4, #8]
    113a:	4453      	add	r3, sl
    113c:	60a3      	str	r3, [r4, #8]
    113e:	e746      	b.n	fce <_usb_d_dev_out_next+0xa2>
    1140:	20000224 	.word	0x20000224
    1144:	000003ff 	.word	0x000003ff
    1148:	41005100 	.word	0x41005100
    114c:	00002afd 	.word	0x00002afd
    1150:	41005108 	.word	0x41005108
    1154:	00000ba9 	.word	0x00000ba9
    1158:	f0003fff 	.word	0xf0003fff
    115c:	41005109 	.word	0x41005109

00001160 <_usb_d_dev_init>:
{
    1160:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1162:	4b31      	ldr	r3, [pc, #196]	; (1228 <_usb_d_dev_init+0xc8>)
    1164:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1166:	07db      	lsls	r3, r3, #31
    1168:	d41f      	bmi.n	11aa <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    116a:	492f      	ldr	r1, [pc, #188]	; (1228 <_usb_d_dev_init+0xc8>)
    116c:	2203      	movs	r2, #3
    116e:	788b      	ldrb	r3, [r1, #2]
    1170:	4213      	tst	r3, r2
    1172:	d1fc      	bne.n	116e <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1174:	4b2c      	ldr	r3, [pc, #176]	; (1228 <_usb_d_dev_init+0xc8>)
    1176:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1178:	079b      	lsls	r3, r3, #30
    117a:	d50e      	bpl.n	119a <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    117c:	4a2a      	ldr	r2, [pc, #168]	; (1228 <_usb_d_dev_init+0xc8>)
    117e:	7813      	ldrb	r3, [r2, #0]
    1180:	2102      	movs	r1, #2
    1182:	438b      	bics	r3, r1
    1184:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1186:	0011      	movs	r1, r2
    1188:	2203      	movs	r2, #3
    118a:	788b      	ldrb	r3, [r1, #2]
    118c:	4213      	tst	r3, r2
    118e:	d1fc      	bne.n	118a <_usb_d_dev_init+0x2a>
    1190:	4925      	ldr	r1, [pc, #148]	; (1228 <_usb_d_dev_init+0xc8>)
    1192:	2202      	movs	r2, #2
    1194:	788b      	ldrb	r3, [r1, #2]
    1196:	4213      	tst	r3, r2
    1198:	d1fc      	bne.n	1194 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    119a:	2201      	movs	r2, #1
    119c:	4b22      	ldr	r3, [pc, #136]	; (1228 <_usb_d_dev_init+0xc8>)
    119e:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    11a0:	0019      	movs	r1, r3
    11a2:	3202      	adds	r2, #2
    11a4:	788b      	ldrb	r3, [r1, #2]
    11a6:	4213      	tst	r3, r2
    11a8:	d1fc      	bne.n	11a4 <_usb_d_dev_init+0x44>
    11aa:	491f      	ldr	r1, [pc, #124]	; (1228 <_usb_d_dev_init+0xc8>)
    11ac:	2201      	movs	r2, #1
    11ae:	788b      	ldrb	r3, [r1, #2]
    11b0:	4213      	tst	r3, r2
    11b2:	d1fc      	bne.n	11ae <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    11b4:	4b1d      	ldr	r3, [pc, #116]	; (122c <_usb_d_dev_init+0xcc>)
    11b6:	4a1e      	ldr	r2, [pc, #120]	; (1230 <_usb_d_dev_init+0xd0>)
    11b8:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    11ba:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    11bc:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    11be:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    11c0:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    11c2:	4b1c      	ldr	r3, [pc, #112]	; (1234 <_usb_d_dev_init+0xd4>)
    11c4:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    11c6:	4b1c      	ldr	r3, [pc, #112]	; (1238 <_usb_d_dev_init+0xd8>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    11cc:	211f      	movs	r1, #31
    11ce:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    11d0:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    11d2:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    11d4:	019b      	lsls	r3, r3, #6
    11d6:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    11d8:	2a1f      	cmp	r2, #31
    11da:	d01f      	beq.n	121c <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    11dc:	291f      	cmp	r1, #31
    11de:	d01f      	beq.n	1220 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    11e0:	2b07      	cmp	r3, #7
    11e2:	d01f      	beq.n	1224 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    11e4:	0192      	lsls	r2, r2, #6
    11e6:	430a      	orrs	r2, r1
    11e8:	031b      	lsls	r3, r3, #12
    11ea:	4313      	orrs	r3, r2
    11ec:	4a0e      	ldr	r2, [pc, #56]	; (1228 <_usb_d_dev_init+0xc8>)
    11ee:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    11f0:	78d3      	ldrb	r3, [r2, #3]
    11f2:	2103      	movs	r1, #3
    11f4:	430b      	orrs	r3, r1
    11f6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    11f8:	78d3      	ldrb	r3, [r2, #3]
    11fa:	210c      	movs	r1, #12
    11fc:	430b      	orrs	r3, r1
    11fe:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1200:	2304      	movs	r3, #4
    1202:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1204:	0011      	movs	r1, r2
    1206:	2203      	movs	r2, #3
    1208:	788b      	ldrb	r3, [r1, #2]
    120a:	4213      	tst	r3, r2
    120c:	d1fc      	bne.n	1208 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    120e:	4b06      	ldr	r3, [pc, #24]	; (1228 <_usb_d_dev_init+0xc8>)
    1210:	4a06      	ldr	r2, [pc, #24]	; (122c <_usb_d_dev_init+0xcc>)
    1212:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1214:	2201      	movs	r2, #1
    1216:	811a      	strh	r2, [r3, #8]
}
    1218:	2000      	movs	r0, #0
    121a:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    121c:	3a1a      	subs	r2, #26
    121e:	e7dd      	b.n	11dc <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1220:	3902      	subs	r1, #2
    1222:	e7dd      	b.n	11e0 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1224:	3b02      	subs	r3, #2
    1226:	e7dd      	b.n	11e4 <_usb_d_dev_init+0x84>
    1228:	41005000 	.word	0x41005000
    122c:	20000224 	.word	0x20000224
    1230:	00000ae9 	.word	0x00000ae9
    1234:	00000d3d 	.word	0x00000d3d
    1238:	00806024 	.word	0x00806024

0000123c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    123c:	4b10      	ldr	r3, [pc, #64]	; (1280 <_usb_d_dev_enable+0x44>)
    123e:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1240:	079b      	lsls	r3, r3, #30
    1242:	d11a      	bne.n	127a <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1244:	490e      	ldr	r1, [pc, #56]	; (1280 <_usb_d_dev_enable+0x44>)
    1246:	2203      	movs	r2, #3
    1248:	788b      	ldrb	r3, [r1, #2]
    124a:	4213      	tst	r3, r2
    124c:	d1fc      	bne.n	1248 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    124e:	4b0c      	ldr	r3, [pc, #48]	; (1280 <_usb_d_dev_enable+0x44>)
    1250:	781b      	ldrb	r3, [r3, #0]
    1252:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1254:	079a      	lsls	r2, r3, #30
    1256:	d408      	bmi.n	126a <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1258:	2202      	movs	r2, #2
    125a:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    125c:	4a08      	ldr	r2, [pc, #32]	; (1280 <_usb_d_dev_enable+0x44>)
    125e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1260:	0011      	movs	r1, r2
    1262:	2203      	movs	r2, #3
    1264:	788b      	ldrb	r3, [r1, #2]
    1266:	4213      	tst	r3, r2
    1268:	d1fc      	bne.n	1264 <_usb_d_dev_enable+0x28>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    126a:	2280      	movs	r2, #128	; 0x80
    126c:	4b05      	ldr	r3, [pc, #20]	; (1284 <_usb_d_dev_enable+0x48>)
    126e:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1270:	4a05      	ldr	r2, [pc, #20]	; (1288 <_usb_d_dev_enable+0x4c>)
    1272:	4b03      	ldr	r3, [pc, #12]	; (1280 <_usb_d_dev_enable+0x44>)
    1274:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1276:	2000      	movs	r0, #0
}
    1278:	4770      	bx	lr
		return -USB_ERR_DENIED;
    127a:	2011      	movs	r0, #17
    127c:	4240      	negs	r0, r0
    127e:	e7fb      	b.n	1278 <_usb_d_dev_enable+0x3c>
    1280:	41005000 	.word	0x41005000
    1284:	e000e100 	.word	0xe000e100
    1288:	0000028d 	.word	0x0000028d

0000128c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    128c:	4a02      	ldr	r2, [pc, #8]	; (1298 <_usb_d_dev_attach+0xc>)
    128e:	8913      	ldrh	r3, [r2, #8]
    1290:	2101      	movs	r1, #1
    1292:	438b      	bics	r3, r1
    1294:	8113      	strh	r3, [r2, #8]
}
    1296:	4770      	bx	lr
    1298:	41005000 	.word	0x41005000

0000129c <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    129c:	2380      	movs	r3, #128	; 0x80
    129e:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    12a0:	4b01      	ldr	r3, [pc, #4]	; (12a8 <_usb_d_dev_set_address+0xc>)
    12a2:	7298      	strb	r0, [r3, #10]
}
    12a4:	4770      	bx	lr
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	41005000 	.word	0x41005000

000012ac <_usb_d_dev_ep_init>:
{
    12ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    12ae:	240f      	movs	r4, #15
    12b0:	4004      	ands	r4, r0
    12b2:	b243      	sxtb	r3, r0
    12b4:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    12b6:	2c00      	cmp	r4, #0
    12b8:	d054      	beq.n	1364 <_usb_d_dev_ep_init+0xb8>
    12ba:	0025      	movs	r5, r4
    12bc:	2b00      	cmp	r3, #0
    12be:	db07      	blt.n	12d0 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    12c0:	2303      	movs	r3, #3
    12c2:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    12c4:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    12c6:	2c02      	cmp	r4, #2
    12c8:	d950      	bls.n	136c <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    12ca:	2012      	movs	r0, #18
    12cc:	4240      	negs	r0, r0
    12ce:	e025      	b.n	131c <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    12d0:	1ca5      	adds	r5, r4, #2
    12d2:	e7f5      	b.n	12c0 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    12d4:	4663      	mov	r3, ip
    12d6:	2b00      	cmp	r3, #0
    12d8:	db21      	blt.n	131e <_usb_d_dev_ep_init+0x72>
    12da:	007b      	lsls	r3, r7, #1
    12dc:	19db      	adds	r3, r3, r7
    12de:	009b      	lsls	r3, r3, #2
    12e0:	4c3b      	ldr	r4, [pc, #236]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    12e2:	591b      	ldr	r3, [r3, r4]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d166      	bne.n	13b6 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    12e8:	007b      	lsls	r3, r7, #1
    12ea:	19df      	adds	r7, r3, r7
    12ec:	00bf      	lsls	r7, r7, #2
    12ee:	4b38      	ldr	r3, [pc, #224]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    12f0:	58ff      	ldr	r7, [r7, r3]
    12f2:	4b38      	ldr	r3, [pc, #224]	; (13d4 <_usb_d_dev_ep_init+0x128>)
    12f4:	00ae      	lsls	r6, r5, #2
    12f6:	1974      	adds	r4, r6, r5
    12f8:	00a4      	lsls	r4, r4, #2
    12fa:	191c      	adds	r4, r3, r4
    12fc:	3480      	adds	r4, #128	; 0x80
    12fe:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    1300:	3360      	adds	r3, #96	; 0x60
    1302:	1974      	adds	r4, r6, r5
    1304:	00a4      	lsls	r4, r4, #2
    1306:	191c      	adds	r4, r3, r4
    1308:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    130a:	3427      	adds	r4, #39	; 0x27
    130c:	3101      	adds	r1, #1
    130e:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1310:	1975      	adds	r5, r6, r5
    1312:	00ad      	lsls	r5, r5, #2
    1314:	195b      	adds	r3, r3, r5
    1316:	3326      	adds	r3, #38	; 0x26
    1318:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    131a:	2000      	movs	r0, #0
}
    131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    131e:	007b      	lsls	r3, r7, #1
    1320:	19db      	adds	r3, r3, r7
    1322:	009b      	lsls	r3, r3, #2
    1324:	4c2a      	ldr	r4, [pc, #168]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    1326:	18e3      	adds	r3, r4, r3
    1328:	685b      	ldr	r3, [r3, #4]
    132a:	2b00      	cmp	r3, #0
    132c:	d106      	bne.n	133c <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    132e:	007b      	lsls	r3, r7, #1
    1330:	19df      	adds	r7, r3, r7
    1332:	00bf      	lsls	r7, r7, #2
    1334:	4b26      	ldr	r3, [pc, #152]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    1336:	19df      	adds	r7, r3, r7
    1338:	687f      	ldr	r7, [r7, #4]
    133a:	e7da      	b.n	12f2 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    133c:	007b      	lsls	r3, r7, #1
    133e:	19db      	adds	r3, r3, r7
    1340:	009b      	lsls	r3, r3, #2
    1342:	4c23      	ldr	r4, [pc, #140]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    1344:	18e3      	adds	r3, r4, r3
    1346:	895b      	ldrh	r3, [r3, #10]
    1348:	4293      	cmp	r3, r2
    134a:	daf0      	bge.n	132e <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    134c:	2013      	movs	r0, #19
    134e:	4240      	negs	r0, r0
    1350:	e7e4      	b.n	131c <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    1352:	2014      	movs	r0, #20
    1354:	4240      	negs	r0, r0
    1356:	e7e1      	b.n	131c <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1358:	2014      	movs	r0, #20
    135a:	4240      	negs	r0, r0
    135c:	e7de      	b.n	131c <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    135e:	2013      	movs	r0, #19
    1360:	4240      	negs	r0, r0
    1362:	e7db      	b.n	131c <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1364:	2303      	movs	r3, #3
    1366:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1368:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    136a:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    136c:	00ab      	lsls	r3, r5, #2
    136e:	195b      	adds	r3, r3, r5
    1370:	009e      	lsls	r6, r3, #2
    1372:	4b18      	ldr	r3, [pc, #96]	; (13d4 <_usb_d_dev_ep_init+0x128>)
    1374:	199b      	adds	r3, r3, r6
    1376:	3386      	adds	r3, #134	; 0x86
    1378:	781b      	ldrb	r3, [r3, #0]
    137a:	2bff      	cmp	r3, #255	; 0xff
    137c:	d1e9      	bne.n	1352 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    137e:	2900      	cmp	r1, #0
    1380:	d1a8      	bne.n	12d4 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1382:	2c00      	cmp	r4, #0
    1384:	d004      	beq.n	1390 <_usb_d_dev_ep_init+0xe4>
    1386:	4663      	mov	r3, ip
    1388:	2b00      	cmp	r3, #0
    138a:	db01      	blt.n	1390 <_usb_d_dev_ep_init+0xe4>
    138c:	3402      	adds	r4, #2
    138e:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1390:	00a3      	lsls	r3, r4, #2
    1392:	191b      	adds	r3, r3, r4
    1394:	009b      	lsls	r3, r3, #2
    1396:	4c0f      	ldr	r4, [pc, #60]	; (13d4 <_usb_d_dev_ep_init+0x128>)
    1398:	18e4      	adds	r4, r4, r3
    139a:	3486      	adds	r4, #134	; 0x86
    139c:	7823      	ldrb	r3, [r4, #0]
    139e:	2bff      	cmp	r3, #255	; 0xff
    13a0:	d1da      	bne.n	1358 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    13a2:	007b      	lsls	r3, r7, #1
    13a4:	19db      	adds	r3, r3, r7
    13a6:	009b      	lsls	r3, r3, #2
    13a8:	4c09      	ldr	r4, [pc, #36]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    13aa:	591b      	ldr	r3, [r3, r4]
    13ac:	2b00      	cmp	r3, #0
    13ae:	d0d6      	beq.n	135e <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    13b0:	4663      	mov	r3, ip
    13b2:	2b00      	cmp	r3, #0
    13b4:	dbb3      	blt.n	131e <_usb_d_dev_ep_init+0x72>
    13b6:	007b      	lsls	r3, r7, #1
    13b8:	19db      	adds	r3, r3, r7
    13ba:	009b      	lsls	r3, r3, #2
    13bc:	4c04      	ldr	r4, [pc, #16]	; (13d0 <_usb_d_dev_ep_init+0x124>)
    13be:	18e3      	adds	r3, r4, r3
    13c0:	891b      	ldrh	r3, [r3, #8]
    13c2:	4293      	cmp	r3, r2
    13c4:	db00      	blt.n	13c8 <_usb_d_dev_ep_init+0x11c>
    13c6:	e78f      	b.n	12e8 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    13c8:	2013      	movs	r0, #19
    13ca:	4240      	negs	r0, r0
    13cc:	e7a6      	b.n	131c <_usb_d_dev_ep_init+0x70>
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	00002b40 	.word	0x00002b40
    13d4:	20000224 	.word	0x20000224

000013d8 <_usb_d_dev_ep_deinit>:
{
    13d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13da:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    13dc:	240f      	movs	r4, #15
    13de:	4004      	ands	r4, r0
    13e0:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    13e2:	2c00      	cmp	r4, #0
    13e4:	d010      	beq.n	1408 <_usb_d_dev_ep_deinit+0x30>
    13e6:	0020      	movs	r0, r4
    13e8:	2f00      	cmp	r7, #0
    13ea:	db02      	blt.n	13f2 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    13ec:	2c02      	cmp	r4, #2
    13ee:	d902      	bls.n	13f6 <_usb_d_dev_ep_deinit+0x1e>
}
    13f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    13f2:	1ca0      	adds	r0, r4, #2
    13f4:	e7fa      	b.n	13ec <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    13f6:	0006      	movs	r6, r0
    13f8:	3001      	adds	r0, #1
    13fa:	0083      	lsls	r3, r0, #2
    13fc:	1818      	adds	r0, r3, r0
    13fe:	0080      	lsls	r0, r0, #2
    1400:	4b25      	ldr	r3, [pc, #148]	; (1498 <_usb_d_dev_ep_deinit+0xc0>)
    1402:	3360      	adds	r3, #96	; 0x60
    1404:	1818      	adds	r0, r3, r0
    1406:	e002      	b.n	140e <_usb_d_dev_ep_deinit+0x36>
    1408:	4823      	ldr	r0, [pc, #140]	; (1498 <_usb_d_dev_ep_deinit+0xc0>)
    140a:	3074      	adds	r0, #116	; 0x74
    140c:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    140e:	00b3      	lsls	r3, r6, #2
    1410:	199b      	adds	r3, r3, r6
    1412:	009a      	lsls	r2, r3, #2
    1414:	4b20      	ldr	r3, [pc, #128]	; (1498 <_usb_d_dev_ep_deinit+0xc0>)
    1416:	189b      	adds	r3, r3, r2
    1418:	3386      	adds	r3, #134	; 0x86
    141a:	781b      	ldrb	r3, [r3, #0]
    141c:	2bff      	cmp	r3, #255	; 0xff
    141e:	d0e7      	beq.n	13f0 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1420:	0ff9      	lsrs	r1, r7, #31
    1422:	2203      	movs	r2, #3
    1424:	4b1d      	ldr	r3, [pc, #116]	; (149c <_usb_d_dev_ep_deinit+0xc4>)
    1426:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1428:	00b3      	lsls	r3, r6, #2
    142a:	199b      	adds	r3, r3, r6
    142c:	009a      	lsls	r2, r3, #2
    142e:	4b1a      	ldr	r3, [pc, #104]	; (1498 <_usb_d_dev_ep_deinit+0xc0>)
    1430:	189b      	adds	r3, r3, r2
    1432:	3380      	adds	r3, #128	; 0x80
    1434:	79da      	ldrb	r2, [r3, #7]
    1436:	2307      	movs	r3, #7
    1438:	4013      	ands	r3, r2
    143a:	2b01      	cmp	r3, #1
    143c:	d01b      	beq.n	1476 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    143e:	2f00      	cmp	r7, #0
    1440:	db1f      	blt.n	1482 <_usb_d_dev_ep_deinit+0xaa>
    1442:	016d      	lsls	r5, r5, #5
    1444:	4b16      	ldr	r3, [pc, #88]	; (14a0 <_usb_d_dev_ep_deinit+0xc8>)
    1446:	469c      	mov	ip, r3
    1448:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    144a:	2280      	movs	r2, #128	; 0x80
    144c:	0052      	lsls	r2, r2, #1
    144e:	5cab      	ldrb	r3, [r5, r2]
    1450:	2107      	movs	r1, #7
    1452:	438b      	bics	r3, r1
    1454:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    1456:	4b10      	ldr	r3, [pc, #64]	; (1498 <_usb_d_dev_ep_deinit+0xc0>)
    1458:	3360      	adds	r3, #96	; 0x60
    145a:	00b1      	lsls	r1, r6, #2
    145c:	198a      	adds	r2, r1, r6
    145e:	0092      	lsls	r2, r2, #2
    1460:	189a      	adds	r2, r3, r2
    1462:	3227      	adds	r2, #39	; 0x27
    1464:	2000      	movs	r0, #0
    1466:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    1468:	198e      	adds	r6, r1, r6
    146a:	00b6      	lsls	r6, r6, #2
    146c:	199b      	adds	r3, r3, r6
    146e:	3326      	adds	r3, #38	; 0x26
    1470:	22ff      	movs	r2, #255	; 0xff
    1472:	701a      	strb	r2, [r3, #0]
    1474:	e7bc      	b.n	13f0 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1476:	3508      	adds	r5, #8
    1478:	016d      	lsls	r5, r5, #5
    147a:	2200      	movs	r2, #0
    147c:	4b08      	ldr	r3, [pc, #32]	; (14a0 <_usb_d_dev_ep_deinit+0xc8>)
    147e:	54ea      	strb	r2, [r5, r3]
    1480:	e7e9      	b.n	1456 <_usb_d_dev_ep_deinit+0x7e>
    1482:	0164      	lsls	r4, r4, #5
    1484:	4b06      	ldr	r3, [pc, #24]	; (14a0 <_usb_d_dev_ep_deinit+0xc8>)
    1486:	469c      	mov	ip, r3
    1488:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    148a:	2280      	movs	r2, #128	; 0x80
    148c:	0052      	lsls	r2, r2, #1
    148e:	5ca3      	ldrb	r3, [r4, r2]
    1490:	2170      	movs	r1, #112	; 0x70
    1492:	438b      	bics	r3, r1
    1494:	54a3      	strb	r3, [r4, r2]
    1496:	e7de      	b.n	1456 <_usb_d_dev_ep_deinit+0x7e>
    1498:	20000224 	.word	0x20000224
    149c:	00000bd1 	.word	0x00000bd1
    14a0:	41005000 	.word	0x41005000

000014a4 <_usb_d_dev_ep_enable>:
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    14a6:	220f      	movs	r2, #15
    14a8:	4002      	ands	r2, r0
    14aa:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    14ac:	2a00      	cmp	r2, #0
    14ae:	d100      	bne.n	14b2 <_usb_d_dev_ep_enable+0xe>
    14b0:	e092      	b.n	15d8 <_usb_d_dev_ep_enable+0x134>
    14b2:	0013      	movs	r3, r2
    14b4:	2800      	cmp	r0, #0
    14b6:	db0b      	blt.n	14d0 <_usb_d_dev_ep_enable+0x2c>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    14b8:	0011      	movs	r1, r2
    14ba:	3208      	adds	r2, #8
    14bc:	0152      	lsls	r2, r2, #5
    14be:	4cae      	ldr	r4, [pc, #696]	; (1778 <_usb_d_dev_ep_enable+0x2d4>)
    14c0:	5d15      	ldrb	r5, [r2, r4]
    14c2:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    14c4:	2902      	cmp	r1, #2
    14c6:	d800      	bhi.n	14ca <_usb_d_dev_ep_enable+0x26>
    14c8:	e08d      	b.n	15e6 <_usb_d_dev_ep_enable+0x142>
		return -USB_ERR_PARAM;
    14ca:	2012      	movs	r0, #18
    14cc:	4240      	negs	r0, r0
    14ce:	e0e4      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    14d0:	1c93      	adds	r3, r2, #2
    14d2:	e7f1      	b.n	14b8 <_usb_d_dev_ep_enable+0x14>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    14d4:	3276      	adds	r2, #118	; 0x76
    14d6:	422a      	tst	r2, r5
    14d8:	d175      	bne.n	15c6 <_usb_d_dev_ep_enable+0x122>
    14da:	4aa7      	ldr	r2, [pc, #668]	; (1778 <_usb_d_dev_ep_enable+0x2d4>)
    14dc:	4694      	mov	ip, r2
    14de:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    14e0:	2011      	movs	r0, #17
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	0052      	lsls	r2, r2, #1
    14e6:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    14e8:	009a      	lsls	r2, r3, #2
    14ea:	18d2      	adds	r2, r2, r3
    14ec:	0095      	lsls	r5, r2, #2
    14ee:	4aa3      	ldr	r2, [pc, #652]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    14f0:	3260      	adds	r2, #96	; 0x60
    14f2:	1952      	adds	r2, r2, r5
    14f4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    14f6:	0395      	lsls	r5, r2, #14
    14f8:	48a1      	ldr	r0, [pc, #644]	; (1780 <_usb_d_dev_ep_enable+0x2dc>)
    14fa:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    14fc:	2080      	movs	r0, #128	; 0x80
    14fe:	0080      	lsls	r0, r0, #2
    1500:	4282      	cmp	r2, r0
    1502:	d900      	bls.n	1506 <_usb_d_dev_ep_enable+0x62>
    1504:	e0ca      	b.n	169c <_usb_d_dev_ep_enable+0x1f8>
    1506:	3801      	subs	r0, #1
    1508:	38ff      	subs	r0, #255	; 0xff
    150a:	4282      	cmp	r2, r0
    150c:	d900      	bls.n	1510 <_usb_d_dev_ep_enable+0x6c>
    150e:	e11b      	b.n	1748 <_usb_d_dev_ep_enable+0x2a4>
    1510:	2a80      	cmp	r2, #128	; 0x80
    1512:	d900      	bls.n	1516 <_usb_d_dev_ep_enable+0x72>
    1514:	e108      	b.n	1728 <_usb_d_dev_ep_enable+0x284>
    1516:	2a40      	cmp	r2, #64	; 0x40
    1518:	d900      	bls.n	151c <_usb_d_dev_ep_enable+0x78>
    151a:	e11d      	b.n	1758 <_usb_d_dev_ep_enable+0x2b4>
    151c:	2a20      	cmp	r2, #32
    151e:	d900      	bls.n	1522 <_usb_d_dev_ep_enable+0x7e>
    1520:	e10a      	b.n	1738 <_usb_d_dev_ep_enable+0x294>
    1522:	2a10      	cmp	r2, #16
    1524:	d900      	bls.n	1528 <_usb_d_dev_ep_enable+0x84>
    1526:	e11f      	b.n	1768 <_usb_d_dev_ep_enable+0x2c4>
    1528:	38f8      	subs	r0, #248	; 0xf8
    152a:	4290      	cmp	r0, r2
    152c:	4180      	sbcs	r0, r0
    152e:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1530:	0706      	lsls	r6, r0, #28
    1532:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1534:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1536:	0492      	lsls	r2, r2, #18
    1538:	0c92      	lsrs	r2, r2, #18
    153a:	e0b6      	b.n	16aa <_usb_d_dev_ep_enable+0x206>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    153c:	2270      	movs	r2, #112	; 0x70
    153e:	422a      	tst	r2, r5
    1540:	d144      	bne.n	15cc <_usb_d_dev_ep_enable+0x128>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1542:	488e      	ldr	r0, [pc, #568]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    1544:	009e      	lsls	r6, r3, #2
    1546:	18f2      	adds	r2, r6, r3
    1548:	0092      	lsls	r2, r2, #2
    154a:	1882      	adds	r2, r0, r2
    154c:	3280      	adds	r2, #128	; 0x80
    154e:	79d2      	ldrb	r2, [r2, #7]
    1550:	0752      	lsls	r2, r2, #29
    1552:	0e52      	lsrs	r2, r2, #25
    1554:	4315      	orrs	r5, r2
    1556:	4a88      	ldr	r2, [pc, #544]	; (1778 <_usb_d_dev_ep_enable+0x2d4>)
    1558:	4694      	mov	ip, r2
    155a:	4464      	add	r4, ip
    155c:	2280      	movs	r2, #128	; 0x80
    155e:	0052      	lsls	r2, r2, #1
    1560:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1562:	3060      	adds	r0, #96	; 0x60
    1564:	18f6      	adds	r6, r6, r3
    1566:	00b6      	lsls	r6, r6, #2
    1568:	1980      	adds	r0, r0, r6
    156a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    156c:	0485      	lsls	r5, r0, #18
    156e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1570:	3201      	adds	r2, #1
    1572:	32ff      	adds	r2, #255	; 0xff
    1574:	2307      	movs	r3, #7
    1576:	4290      	cmp	r0, r2
    1578:	d814      	bhi.n	15a4 <_usb_d_dev_ep_enable+0x100>
    157a:	3a01      	subs	r2, #1
    157c:	3aff      	subs	r2, #255	; 0xff
    157e:	3b01      	subs	r3, #1
    1580:	4290      	cmp	r0, r2
    1582:	d80f      	bhi.n	15a4 <_usb_d_dev_ep_enable+0x100>
    1584:	3b01      	subs	r3, #1
    1586:	2880      	cmp	r0, #128	; 0x80
    1588:	d80c      	bhi.n	15a4 <_usb_d_dev_ep_enable+0x100>
    158a:	3b01      	subs	r3, #1
    158c:	2840      	cmp	r0, #64	; 0x40
    158e:	d809      	bhi.n	15a4 <_usb_d_dev_ep_enable+0x100>
    1590:	3b01      	subs	r3, #1
    1592:	2820      	cmp	r0, #32
    1594:	d806      	bhi.n	15a4 <_usb_d_dev_ep_enable+0x100>
    1596:	3b01      	subs	r3, #1
    1598:	2810      	cmp	r0, #16
    159a:	d803      	bhi.n	15a4 <_usb_d_dev_ep_enable+0x100>
    159c:	3af8      	subs	r2, #248	; 0xf8
    159e:	4282      	cmp	r2, r0
    15a0:	4192      	sbcs	r2, r2
    15a2:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15a4:	071b      	lsls	r3, r3, #28
    15a6:	432b      	orrs	r3, r5
    15a8:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    15aa:	2280      	movs	r2, #128	; 0x80
    15ac:	2382      	movs	r3, #130	; 0x82
    15ae:	005b      	lsls	r3, r3, #1
    15b0:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    15b2:	0149      	lsls	r1, r1, #5
    15b4:	4b71      	ldr	r3, [pc, #452]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    15b6:	1859      	adds	r1, r3, r1
    15b8:	2300      	movs	r3, #0
    15ba:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    15bc:	2000      	movs	r0, #0
    15be:	e06c      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
		return -USB_ERR_PARAM;
    15c0:	2012      	movs	r0, #18
    15c2:	4240      	negs	r0, r0
    15c4:	e069      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
			return -USB_ERR_REDO;
    15c6:	2014      	movs	r0, #20
    15c8:	4240      	negs	r0, r0
    15ca:	e066      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
			return -USB_ERR_REDO;
    15cc:	2014      	movs	r0, #20
    15ce:	4240      	negs	r0, r0
    15d0:	e063      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
			return -USB_ERR_REDO;
    15d2:	2014      	movs	r0, #20
    15d4:	4240      	negs	r0, r0
    15d6:	e060      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    15d8:	2380      	movs	r3, #128	; 0x80
    15da:	005b      	lsls	r3, r3, #1
    15dc:	4a66      	ldr	r2, [pc, #408]	; (1778 <_usb_d_dev_ep_enable+0x2d4>)
    15de:	5cd5      	ldrb	r5, [r2, r3]
    15e0:	b2ed      	uxtb	r5, r5
    15e2:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    15e4:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    15e6:	009a      	lsls	r2, r3, #2
    15e8:	18d2      	adds	r2, r2, r3
    15ea:	0094      	lsls	r4, r2, #2
    15ec:	4a63      	ldr	r2, [pc, #396]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    15ee:	1912      	adds	r2, r2, r4
    15f0:	3286      	adds	r2, #134	; 0x86
    15f2:	7812      	ldrb	r2, [r2, #0]
    15f4:	2aff      	cmp	r2, #255	; 0xff
    15f6:	d0e3      	beq.n	15c0 <_usb_d_dev_ep_enable+0x11c>
    15f8:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    15fa:	4a60      	ldr	r2, [pc, #384]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    15fc:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    15fe:	009e      	lsls	r6, r3, #2
    1600:	18f6      	adds	r6, r6, r3
    1602:	00b6      	lsls	r6, r6, #2
    1604:	1992      	adds	r2, r2, r6
    1606:	3280      	adds	r2, #128	; 0x80
    1608:	79d6      	ldrb	r6, [r2, #7]
    160a:	2207      	movs	r2, #7
    160c:	4032      	ands	r2, r6
    160e:	2a01      	cmp	r2, #1
    1610:	d100      	bne.n	1614 <_usb_d_dev_ep_enable+0x170>
    1612:	e75f      	b.n	14d4 <_usb_d_dev_ep_enable+0x30>
	} else if (dir) {
    1614:	2800      	cmp	r0, #0
    1616:	db91      	blt.n	153c <_usb_d_dev_ep_enable+0x98>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1618:	076a      	lsls	r2, r5, #29
    161a:	d1da      	bne.n	15d2 <_usb_d_dev_ep_enable+0x12e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    161c:	4857      	ldr	r0, [pc, #348]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    161e:	009e      	lsls	r6, r3, #2
    1620:	18f2      	adds	r2, r6, r3
    1622:	0092      	lsls	r2, r2, #2
    1624:	1882      	adds	r2, r0, r2
    1626:	3280      	adds	r2, #128	; 0x80
    1628:	79d2      	ldrb	r2, [r2, #7]
    162a:	0752      	lsls	r2, r2, #29
    162c:	0f52      	lsrs	r2, r2, #29
    162e:	4315      	orrs	r5, r2
    1630:	4a51      	ldr	r2, [pc, #324]	; (1778 <_usb_d_dev_ep_enable+0x2d4>)
    1632:	4694      	mov	ip, r2
    1634:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1636:	2280      	movs	r2, #128	; 0x80
    1638:	0052      	lsls	r2, r2, #1
    163a:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    163c:	3060      	adds	r0, #96	; 0x60
    163e:	18f6      	adds	r6, r6, r3
    1640:	00b6      	lsls	r6, r6, #2
    1642:	1980      	adds	r0, r0, r6
    1644:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    1646:	03ab      	lsls	r3, r5, #14
    1648:	484d      	ldr	r0, [pc, #308]	; (1780 <_usb_d_dev_ep_enable+0x2dc>)
    164a:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    164c:	3201      	adds	r2, #1
    164e:	32ff      	adds	r2, #255	; 0xff
    1650:	2307      	movs	r3, #7
    1652:	4295      	cmp	r5, r2
    1654:	d814      	bhi.n	1680 <_usb_d_dev_ep_enable+0x1dc>
    1656:	3a01      	subs	r2, #1
    1658:	3aff      	subs	r2, #255	; 0xff
    165a:	3b01      	subs	r3, #1
    165c:	4295      	cmp	r5, r2
    165e:	d80f      	bhi.n	1680 <_usb_d_dev_ep_enable+0x1dc>
    1660:	3b01      	subs	r3, #1
    1662:	2d80      	cmp	r5, #128	; 0x80
    1664:	d80c      	bhi.n	1680 <_usb_d_dev_ep_enable+0x1dc>
    1666:	3b01      	subs	r3, #1
    1668:	2d40      	cmp	r5, #64	; 0x40
    166a:	d809      	bhi.n	1680 <_usb_d_dev_ep_enable+0x1dc>
    166c:	3b01      	subs	r3, #1
    166e:	2d20      	cmp	r5, #32
    1670:	d806      	bhi.n	1680 <_usb_d_dev_ep_enable+0x1dc>
    1672:	3b01      	subs	r3, #1
    1674:	2d10      	cmp	r5, #16
    1676:	d803      	bhi.n	1680 <_usb_d_dev_ep_enable+0x1dc>
    1678:	3af8      	subs	r2, #248	; 0xf8
    167a:	42aa      	cmp	r2, r5
    167c:	4192      	sbcs	r2, r2
    167e:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1680:	071b      	lsls	r3, r3, #28
    1682:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1684:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1686:	2240      	movs	r2, #64	; 0x40
    1688:	2306      	movs	r3, #6
    168a:	33ff      	adds	r3, #255	; 0xff
    168c:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    168e:	0149      	lsls	r1, r1, #5
    1690:	4b3a      	ldr	r3, [pc, #232]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    1692:	1859      	adds	r1, r3, r1
    1694:	2300      	movs	r3, #0
    1696:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    1698:	2000      	movs	r0, #0
}
    169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    169c:	20e0      	movs	r0, #224	; 0xe0
    169e:	05c0      	lsls	r0, r0, #23
    16a0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    16a2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16a4:	0492      	lsls	r2, r2, #18
    16a6:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16a8:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16aa:	0700      	lsls	r0, r0, #28
    16ac:	4302      	orrs	r2, r0
    16ae:	617a      	str	r2, [r7, #20]
    16b0:	2506      	movs	r5, #6
    16b2:	35ff      	adds	r5, #255	; 0xff
    16b4:	2640      	movs	r6, #64	; 0x40
    16b6:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    16b8:	2782      	movs	r7, #130	; 0x82
    16ba:	007f      	lsls	r7, r7, #1
    16bc:	2280      	movs	r2, #128	; 0x80
    16be:	55e2      	strb	r2, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    16c0:	482e      	ldr	r0, [pc, #184]	; (177c <_usb_d_dev_ep_enable+0x2d8>)
    16c2:	0149      	lsls	r1, r1, #5
    16c4:	1841      	adds	r1, r0, r1
    16c6:	2200      	movs	r2, #0
    16c8:	728a      	strb	r2, [r1, #10]
    16ca:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    16cc:	3260      	adds	r2, #96	; 0x60
    16ce:	4694      	mov	ip, r2
    16d0:	4484      	add	ip, r0
    16d2:	0099      	lsls	r1, r3, #2
    16d4:	18ca      	adds	r2, r1, r3
    16d6:	0092      	lsls	r2, r2, #2
    16d8:	4462      	add	r2, ip
    16da:	3226      	adds	r2, #38	; 0x26
    16dc:	7814      	ldrb	r4, [r2, #0]
    16de:	220f      	movs	r2, #15
    16e0:	4022      	ands	r2, r4
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    16e2:	18cc      	adds	r4, r1, r3
    16e4:	00a4      	lsls	r4, r4, #2
    16e6:	1904      	adds	r4, r0, r4
    16e8:	3480      	adds	r4, #128	; 0x80
    16ea:	6824      	ldr	r4, [r4, #0]
	bank->ADDR.reg          = addr;
    16ec:	0152      	lsls	r2, r2, #5
    16ee:	5014      	str	r4, [r2, r0]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    16f0:	18c9      	adds	r1, r1, r3
    16f2:	0089      	lsls	r1, r1, #2
    16f4:	4461      	add	r1, ip
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    16f6:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    16f8:	1880      	adds	r0, r0, r2
    16fa:	6843      	ldr	r3, [r0, #4]
    16fc:	0489      	lsls	r1, r1, #18
    16fe:	0909      	lsrs	r1, r1, #4
    1700:	4c20      	ldr	r4, [pc, #128]	; (1784 <_usb_d_dev_ep_enable+0x2e0>)
    1702:	4023      	ands	r3, r4
    1704:	430b      	orrs	r3, r1
    1706:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1708:	6843      	ldr	r3, [r0, #4]
    170a:	0b9b      	lsrs	r3, r3, #14
    170c:	039b      	lsls	r3, r3, #14
    170e:	6043      	str	r3, [r0, #4]
    1710:	4b19      	ldr	r3, [pc, #100]	; (1778 <_usb_d_dev_ep_enable+0x2d4>)
    1712:	18d3      	adds	r3, r2, r3
    1714:	21b0      	movs	r1, #176	; 0xb0
    1716:	55d9      	strb	r1, [r3, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1718:	555e      	strb	r6, [r3, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    171a:	4b1b      	ldr	r3, [pc, #108]	; (1788 <_usb_d_dev_ep_enable+0x2e4>)
    171c:	469c      	mov	ip, r3
    171e:	4462      	add	r2, ip
    1720:	2310      	movs	r3, #16
    1722:	7013      	strb	r3, [r2, #0]
	return USB_OK;
    1724:	2000      	movs	r0, #0
    1726:	e7b8      	b.n	169a <_usb_d_dev_ep_enable+0x1f6>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1728:	20a0      	movs	r0, #160	; 0xa0
    172a:	05c0      	lsls	r0, r0, #23
    172c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    172e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1730:	0492      	lsls	r2, r2, #18
    1732:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1734:	2005      	movs	r0, #5
    1736:	e7b8      	b.n	16aa <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1738:	20c0      	movs	r0, #192	; 0xc0
    173a:	0580      	lsls	r0, r0, #22
    173c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    173e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1740:	0492      	lsls	r2, r2, #18
    1742:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1744:	2003      	movs	r0, #3
    1746:	e7b0      	b.n	16aa <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1748:	20c0      	movs	r0, #192	; 0xc0
    174a:	05c0      	lsls	r0, r0, #23
    174c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    174e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1750:	0492      	lsls	r2, r2, #18
    1752:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1754:	2006      	movs	r0, #6
    1756:	e7a8      	b.n	16aa <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1758:	2080      	movs	r0, #128	; 0x80
    175a:	05c0      	lsls	r0, r0, #23
    175c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    175e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1760:	0492      	lsls	r2, r2, #18
    1762:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1764:	2004      	movs	r0, #4
    1766:	e7a0      	b.n	16aa <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1768:	2080      	movs	r0, #128	; 0x80
    176a:	0580      	lsls	r0, r0, #22
    176c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    176e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1770:	0492      	lsls	r2, r2, #18
    1772:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1774:	2002      	movs	r0, #2
    1776:	e798      	b.n	16aa <_usb_d_dev_ep_enable+0x206>
    1778:	41005000 	.word	0x41005000
    177c:	20000224 	.word	0x20000224
    1780:	0fffc000 	.word	0x0fffc000
    1784:	f0003fff 	.word	0xf0003fff
    1788:	41005109 	.word	0x41005109

0000178c <_usb_d_dev_ep_stall>:
{
    178c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    178e:	230f      	movs	r3, #15
    1790:	4003      	ands	r3, r0
    1792:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1794:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1796:	2b00      	cmp	r3, #0
    1798:	d009      	beq.n	17ae <_usb_d_dev_ep_stall+0x22>
    179a:	001a      	movs	r2, r3
    179c:	2800      	cmp	r0, #0
    179e:	db04      	blt.n	17aa <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    17a0:	2b02      	cmp	r3, #2
    17a2:	d905      	bls.n	17b0 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    17a4:	2012      	movs	r0, #18
    17a6:	4240      	negs	r0, r0
    17a8:	e019      	b.n	17de <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17aa:	1c9a      	adds	r2, r3, #2
    17ac:	e7f8      	b.n	17a0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    17ae:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    17b0:	2901      	cmp	r1, #1
    17b2:	d015      	beq.n	17e0 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    17b4:	2900      	cmp	r1, #0
    17b6:	d036      	beq.n	1826 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    17b8:	0093      	lsls	r3, r2, #2
    17ba:	189b      	adds	r3, r3, r2
    17bc:	009b      	lsls	r3, r3, #2
    17be:	4a47      	ldr	r2, [pc, #284]	; (18dc <_usb_d_dev_ep_stall+0x150>)
    17c0:	18d2      	adds	r2, r2, r3
    17c2:	3286      	adds	r2, #134	; 0x86
    17c4:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    17c6:	230f      	movs	r3, #15
    17c8:	4013      	ands	r3, r2
    17ca:	015b      	lsls	r3, r3, #5
    17cc:	4a44      	ldr	r2, [pc, #272]	; (18e0 <_usb_d_dev_ep_stall+0x154>)
    17ce:	4694      	mov	ip, r2
    17d0:	4463      	add	r3, ip
    17d2:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    17d4:	2310      	movs	r3, #16
    17d6:	40a3      	lsls	r3, r4
    17d8:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    17da:	1e43      	subs	r3, r0, #1
    17dc:	4198      	sbcs	r0, r3
}
    17de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    17e0:	2510      	movs	r5, #16
    17e2:	40a5      	lsls	r5, r4
    17e4:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    17e6:	493d      	ldr	r1, [pc, #244]	; (18dc <_usb_d_dev_ep_stall+0x150>)
    17e8:	0090      	lsls	r0, r2, #2
    17ea:	1883      	adds	r3, r0, r2
    17ec:	009b      	lsls	r3, r3, #2
    17ee:	18cb      	adds	r3, r1, r3
    17f0:	3386      	adds	r3, #134	; 0x86
    17f2:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    17f4:	230f      	movs	r3, #15
    17f6:	4033      	ands	r3, r6
    17f8:	015e      	lsls	r6, r3, #5
    17fa:	4f39      	ldr	r7, [pc, #228]	; (18e0 <_usb_d_dev_ep_stall+0x154>)
    17fc:	46bc      	mov	ip, r7
    17fe:	4466      	add	r6, ip
    1800:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1802:	2520      	movs	r5, #32
    1804:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1806:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1808:	015b      	lsls	r3, r3, #5
    180a:	4d36      	ldr	r5, [pc, #216]	; (18e4 <_usb_d_dev_ep_stall+0x158>)
    180c:	46ac      	mov	ip, r5
    180e:	4463      	add	r3, ip
    1810:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    1812:	1882      	adds	r2, r0, r2
    1814:	0092      	lsls	r2, r2, #2
    1816:	188a      	adds	r2, r1, r2
    1818:	3280      	adds	r2, #128	; 0x80
    181a:	79d3      	ldrb	r3, [r2, #7]
    181c:	2108      	movs	r1, #8
    181e:	430b      	orrs	r3, r1
    1820:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1822:	2000      	movs	r0, #0
    1824:	e7db      	b.n	17de <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1826:	0093      	lsls	r3, r2, #2
    1828:	189b      	adds	r3, r3, r2
    182a:	0099      	lsls	r1, r3, #2
    182c:	4b2b      	ldr	r3, [pc, #172]	; (18dc <_usb_d_dev_ep_stall+0x150>)
    182e:	185b      	adds	r3, r3, r1
    1830:	3386      	adds	r3, #134	; 0x86
    1832:	781b      	ldrb	r3, [r3, #0]
    1834:	210f      	movs	r1, #15
    1836:	400b      	ands	r3, r1
    1838:	015d      	lsls	r5, r3, #5
    183a:	492b      	ldr	r1, [pc, #172]	; (18e8 <_usb_d_dev_ep_stall+0x15c>)
    183c:	468c      	mov	ip, r1
    183e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1840:	2183      	movs	r1, #131	; 0x83
    1842:	0049      	lsls	r1, r1, #1
    1844:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1846:	39f6      	subs	r1, #246	; 0xf6
    1848:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    184a:	2000      	movs	r0, #0
	if (!is_stalled) {
    184c:	420e      	tst	r6, r1
    184e:	d0c6      	beq.n	17de <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1850:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1852:	3005      	adds	r0, #5
    1854:	30ff      	adds	r0, #255	; 0xff
    1856:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1858:	2120      	movs	r1, #32
    185a:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    185c:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    185e:	015b      	lsls	r3, r3, #5
    1860:	4e22      	ldr	r6, [pc, #136]	; (18ec <_usb_d_dev_ep_stall+0x160>)
    1862:	46b4      	mov	ip, r6
    1864:	4463      	add	r3, ip
    1866:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1868:	2308      	movs	r3, #8
    186a:	33ff      	adds	r3, #255	; 0xff
    186c:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    186e:	420b      	tst	r3, r1
    1870:	d009      	beq.n	1886 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1872:	2308      	movs	r3, #8
    1874:	33ff      	adds	r3, #255	; 0xff
    1876:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1878:	3b07      	subs	r3, #7
    187a:	3bff      	subs	r3, #255	; 0xff
    187c:	40a3      	lsls	r3, r4
    187e:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1880:	2182      	movs	r1, #130	; 0x82
    1882:	0049      	lsls	r1, r1, #1
    1884:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1886:	0093      	lsls	r3, r2, #2
    1888:	189b      	adds	r3, r3, r2
    188a:	0099      	lsls	r1, r3, #2
    188c:	4b13      	ldr	r3, [pc, #76]	; (18dc <_usb_d_dev_ep_stall+0x150>)
    188e:	185b      	adds	r3, r3, r1
    1890:	3380      	adds	r3, #128	; 0x80
    1892:	79d9      	ldrb	r1, [r3, #7]
    1894:	2307      	movs	r3, #7
    1896:	400b      	ands	r3, r1
    1898:	2b01      	cmp	r3, #1
    189a:	d00b      	beq.n	18b4 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    189c:	0093      	lsls	r3, r2, #2
    189e:	189a      	adds	r2, r3, r2
    18a0:	0092      	lsls	r2, r2, #2
    18a2:	4b0e      	ldr	r3, [pc, #56]	; (18dc <_usb_d_dev_ep_stall+0x150>)
    18a4:	189b      	adds	r3, r3, r2
    18a6:	3380      	adds	r3, #128	; 0x80
    18a8:	79da      	ldrb	r2, [r3, #7]
    18aa:	2108      	movs	r1, #8
    18ac:	438a      	bics	r2, r1
    18ae:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    18b0:	2000      	movs	r0, #0
    18b2:	e794      	b.n	17de <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    18b4:	3306      	adds	r3, #6
    18b6:	33ff      	adds	r3, #255	; 0xff
    18b8:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    18ba:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    18bc:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    18be:	4219      	tst	r1, r3
    18c0:	d000      	beq.n	18c4 <_usb_d_dev_ep_stall+0x138>
    18c2:	e78c      	b.n	17de <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    18c4:	0093      	lsls	r3, r2, #2
    18c6:	189a      	adds	r2, r3, r2
    18c8:	0092      	lsls	r2, r2, #2
    18ca:	4b04      	ldr	r3, [pc, #16]	; (18dc <_usb_d_dev_ep_stall+0x150>)
    18cc:	189b      	adds	r3, r3, r2
    18ce:	3380      	adds	r3, #128	; 0x80
    18d0:	79da      	ldrb	r2, [r3, #7]
    18d2:	2108      	movs	r1, #8
    18d4:	438a      	bics	r2, r1
    18d6:	71da      	strb	r2, [r3, #7]
    18d8:	e781      	b.n	17de <_usb_d_dev_ep_stall+0x52>
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	20000224 	.word	0x20000224
    18e0:	41005100 	.word	0x41005100
    18e4:	41005109 	.word	0x41005109
    18e8:	41005000 	.word	0x41005000
    18ec:	41005108 	.word	0x41005108

000018f0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    18f0:	b570      	push	{r4, r5, r6, lr}
    18f2:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    18f4:	230f      	movs	r3, #15
    18f6:	4018      	ands	r0, r3
    18f8:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    18fa:	4b16      	ldr	r3, [pc, #88]	; (1954 <_usb_d_dev_ep_read_req+0x64>)
    18fc:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    18fe:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1900:	685b      	ldr	r3, [r3, #4]
    1902:	049b      	lsls	r3, r3, #18
    1904:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1906:	2802      	cmp	r0, #2
    1908:	d81a      	bhi.n	1940 <_usb_d_dev_ep_read_req+0x50>
    190a:	2d00      	cmp	r5, #0
    190c:	d01b      	beq.n	1946 <_usb_d_dev_ep_read_req+0x56>
    190e:	4b12      	ldr	r3, [pc, #72]	; (1958 <_usb_d_dev_ep_read_req+0x68>)
    1910:	469c      	mov	ip, r3
    1912:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1914:	2380      	movs	r3, #128	; 0x80
    1916:	005b      	lsls	r3, r3, #1
    1918:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    191a:	2b11      	cmp	r3, #17
    191c:	d116      	bne.n	194c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    191e:	2308      	movs	r3, #8
    1920:	33ff      	adds	r3, #255	; 0xff
    1922:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1924:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1926:	06db      	lsls	r3, r3, #27
    1928:	d400      	bmi.n	192c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    192a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    192c:	2208      	movs	r2, #8
    192e:	0028      	movs	r0, r5
    1930:	4b0a      	ldr	r3, [pc, #40]	; (195c <_usb_d_dev_ep_read_req+0x6c>)
    1932:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1934:	2210      	movs	r2, #16
    1936:	2308      	movs	r3, #8
    1938:	33ff      	adds	r3, #255	; 0xff
    193a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    193c:	0030      	movs	r0, r6
    193e:	e7f4      	b.n	192a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    1940:	2012      	movs	r0, #18
    1942:	4240      	negs	r0, r0
    1944:	e7f1      	b.n	192a <_usb_d_dev_ep_read_req+0x3a>
    1946:	2012      	movs	r0, #18
    1948:	4240      	negs	r0, r0
    194a:	e7ee      	b.n	192a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    194c:	2013      	movs	r0, #19
    194e:	4240      	negs	r0, r0
    1950:	e7eb      	b.n	192a <_usb_d_dev_ep_read_req+0x3a>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	20000224 	.word	0x20000224
    1958:	41005000 	.word	0x41005000
    195c:	00002afd 	.word	0x00002afd

00001960 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1960:	b5f0      	push	{r4, r5, r6, r7, lr}
    1962:	46de      	mov	lr, fp
    1964:	4657      	mov	r7, sl
    1966:	464e      	mov	r6, r9
    1968:	4645      	mov	r5, r8
    196a:	b5e0      	push	{r5, r6, r7, lr}
    196c:	b085      	sub	sp, #20
    196e:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1970:	7a06      	ldrb	r6, [r0, #8]
    1972:	230f      	movs	r3, #15
    1974:	4033      	ands	r3, r6
    1976:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1978:	2b00      	cmp	r3, #0
    197a:	d100      	bne.n	197e <_usb_d_dev_ep_trans+0x1e>
    197c:	e0d3      	b.n	1b26 <_usb_d_dev_ep_trans+0x1c6>
    197e:	0018      	movs	r0, r3
    1980:	2e00      	cmp	r6, #0
    1982:	db39      	blt.n	19f8 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    1984:	0004      	movs	r4, r0
    1986:	4a73      	ldr	r2, [pc, #460]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1988:	3260      	adds	r2, #96	; 0x60
    198a:	1c41      	adds	r1, r0, #1
    198c:	008d      	lsls	r5, r1, #2
    198e:	186d      	adds	r5, r5, r1
    1990:	00ad      	lsls	r5, r5, #2
    1992:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1994:	0081      	lsls	r1, r0, #2
    1996:	1809      	adds	r1, r1, r0
    1998:	0089      	lsls	r1, r1, #2
    199a:	1852      	adds	r2, r2, r1
    199c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    199e:	4a6e      	ldr	r2, [pc, #440]	; (1b58 <_usb_d_dev_ep_trans+0x1f8>)
    19a0:	4291      	cmp	r1, r2
    19a2:	d02b      	beq.n	19fc <_usb_d_dev_ep_trans+0x9c>
    19a4:	1e4f      	subs	r7, r1, #1
    19a6:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    19a8:	4642      	mov	r2, r8
    19aa:	6852      	ldr	r2, [r2, #4]
    19ac:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    19ae:	2b02      	cmp	r3, #2
    19b0:	d900      	bls.n	19b4 <_usb_d_dev_ep_trans+0x54>
    19b2:	e0a4      	b.n	1afe <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    19b4:	4643      	mov	r3, r8
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	4868      	ldr	r0, [pc, #416]	; (1b5c <_usb_d_dev_ep_trans+0x1fc>)
    19ba:	4283      	cmp	r3, r0
    19bc:	d920      	bls.n	1a00 <_usb_d_dev_ep_trans+0xa0>
    19be:	1898      	adds	r0, r3, r2
    19c0:	9001      	str	r0, [sp, #4]
    19c2:	4867      	ldr	r0, [pc, #412]	; (1b60 <_usb_d_dev_ep_trans+0x200>)
    19c4:	4684      	mov	ip, r0
    19c6:	9801      	ldr	r0, [sp, #4]
    19c8:	4560      	cmp	r0, ip
    19ca:	d819      	bhi.n	1a00 <_usb_d_dev_ep_trans+0xa0>
    19cc:	079b      	lsls	r3, r3, #30
    19ce:	d117      	bne.n	1a00 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    19d0:	2e00      	cmp	r6, #0
    19d2:	db32      	blt.n	1a3a <_usb_d_dev_ep_trans+0xda>
    19d4:	4291      	cmp	r1, r2
    19d6:	d900      	bls.n	19da <_usb_d_dev_ep_trans+0x7a>
    19d8:	e0af      	b.n	1b3a <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    19da:	2f00      	cmp	r7, #0
    19dc:	d030      	beq.n	1a40 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    19de:	00a3      	lsls	r3, r4, #2
    19e0:	191b      	adds	r3, r3, r4
    19e2:	009a      	lsls	r2, r3, #2
    19e4:	4b5b      	ldr	r3, [pc, #364]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    19e6:	189b      	adds	r3, r3, r2
    19e8:	3380      	adds	r3, #128	; 0x80
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d100      	bne.n	19f2 <_usb_d_dev_ep_trans+0x92>
    19f0:	e08b      	b.n	1b0a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    19f2:	2300      	movs	r3, #0
    19f4:	4699      	mov	r9, r3
    19f6:	e00f      	b.n	1a18 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    19f8:	1c98      	adds	r0, r3, #2
    19fa:	e7c3      	b.n	1984 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    19fc:	000f      	movs	r7, r1
    19fe:	e7d3      	b.n	19a8 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    1a00:	00a3      	lsls	r3, r4, #2
    1a02:	191b      	adds	r3, r3, r4
    1a04:	009a      	lsls	r2, r3, #2
    1a06:	4b53      	ldr	r3, [pc, #332]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1a08:	189b      	adds	r3, r3, r2
    1a0a:	3380      	adds	r3, #128	; 0x80
    1a0c:	681b      	ldr	r3, [r3, #0]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d100      	bne.n	1a14 <_usb_d_dev_ep_trans+0xb4>
    1a12:	e077      	b.n	1b04 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    1a14:	2301      	movs	r3, #1
    1a16:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1a18:	00a3      	lsls	r3, r4, #2
    1a1a:	191b      	adds	r3, r3, r4
    1a1c:	009a      	lsls	r2, r3, #2
    1a1e:	4b4d      	ldr	r3, [pc, #308]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1a20:	189b      	adds	r3, r3, r2
    1a22:	3380      	adds	r3, #128	; 0x80
    1a24:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    1a26:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1a28:	071b      	lsls	r3, r3, #28
    1a2a:	d50c      	bpl.n	1a46 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1a2c:	b005      	add	sp, #20
    1a2e:	bc3c      	pop	{r2, r3, r4, r5}
    1a30:	4690      	mov	r8, r2
    1a32:	4699      	mov	r9, r3
    1a34:	46a2      	mov	sl, r4
    1a36:	46ab      	mov	fp, r5
    1a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    1a3a:	2300      	movs	r3, #0
    1a3c:	4699      	mov	r9, r3
    1a3e:	e7eb      	b.n	1a18 <_usb_d_dev_ep_trans+0xb8>
    1a40:	2300      	movs	r3, #0
    1a42:	4699      	mov	r9, r3
    1a44:	e7e8      	b.n	1a18 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    1a46:	a803      	add	r0, sp, #12
    1a48:	4b46      	ldr	r3, [pc, #280]	; (1b64 <_usb_d_dev_ep_trans+0x204>)
    1a4a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1a4c:	00a3      	lsls	r3, r4, #2
    1a4e:	191b      	adds	r3, r3, r4
    1a50:	009a      	lsls	r2, r3, #2
    1a52:	4b40      	ldr	r3, [pc, #256]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1a54:	189b      	adds	r3, r3, r2
    1a56:	3380      	adds	r3, #128	; 0x80
    1a58:	79db      	ldrb	r3, [r3, #7]
    1a5a:	065b      	lsls	r3, r3, #25
    1a5c:	d444      	bmi.n	1ae8 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    1a5e:	00a3      	lsls	r3, r4, #2
    1a60:	191b      	adds	r3, r3, r4
    1a62:	009b      	lsls	r3, r3, #2
    1a64:	4a3b      	ldr	r2, [pc, #236]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1a66:	4693      	mov	fp, r2
    1a68:	449b      	add	fp, r3
    1a6a:	2380      	movs	r3, #128	; 0x80
    1a6c:	445b      	add	r3, fp
    1a6e:	469a      	mov	sl, r3
    1a70:	79db      	ldrb	r3, [r3, #7]
    1a72:	2240      	movs	r2, #64	; 0x40
    1a74:	4313      	orrs	r3, r2
    1a76:	4652      	mov	r2, sl
    1a78:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1a7a:	a803      	add	r0, sp, #12
    1a7c:	4b3a      	ldr	r3, [pc, #232]	; (1b68 <_usb_d_dev_ep_trans+0x208>)
    1a7e:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1a80:	465b      	mov	r3, fp
    1a82:	4642      	mov	r2, r8
    1a84:	6812      	ldr	r2, [r2, #0]
    1a86:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1a88:	4642      	mov	r2, r8
    1a8a:	6852      	ldr	r2, [r2, #4]
    1a8c:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1a8e:	2300      	movs	r3, #0
    1a90:	465a      	mov	r2, fp
    1a92:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1a94:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1a96:	01d2      	lsls	r2, r2, #7
    1a98:	4653      	mov	r3, sl
    1a9a:	79d9      	ldrb	r1, [r3, #7]
    1a9c:	237f      	movs	r3, #127	; 0x7f
    1a9e:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1aa0:	4649      	mov	r1, r9
    1aa2:	0149      	lsls	r1, r1, #5
    1aa4:	4313      	orrs	r3, r2
    1aa6:	2220      	movs	r2, #32
    1aa8:	4393      	bics	r3, r2
    1aaa:	430b      	orrs	r3, r1
    1aac:	4652      	mov	r2, sl
    1aae:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1ab0:	4643      	mov	r3, r8
    1ab2:	7a5b      	ldrb	r3, [r3, #9]
    1ab4:	2200      	movs	r2, #0
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d002      	beq.n	1ac0 <_usb_d_dev_ep_trans+0x160>
    1aba:	427a      	negs	r2, r7
    1abc:	417a      	adcs	r2, r7
    1abe:	b2d2      	uxtb	r2, r2
    1ac0:	00a3      	lsls	r3, r4, #2
    1ac2:	191c      	adds	r4, r3, r4
    1ac4:	00a4      	lsls	r4, r4, #2
    1ac6:	4b23      	ldr	r3, [pc, #140]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1ac8:	191b      	adds	r3, r3, r4
    1aca:	3380      	adds	r3, #128	; 0x80
    1acc:	0112      	lsls	r2, r2, #4
    1ace:	79df      	ldrb	r7, [r3, #7]
    1ad0:	2110      	movs	r1, #16
    1ad2:	438f      	bics	r7, r1
    1ad4:	4317      	orrs	r7, r2
    1ad6:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1ad8:	2e00      	cmp	r6, #0
    1ada:	db0a      	blt.n	1af2 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1adc:	2100      	movs	r1, #0
    1ade:	0028      	movs	r0, r5
    1ae0:	4b22      	ldr	r3, [pc, #136]	; (1b6c <_usb_d_dev_ep_trans+0x20c>)
    1ae2:	4798      	blx	r3
	return ERR_NONE;
    1ae4:	2000      	movs	r0, #0
    1ae6:	e7a1      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1ae8:	a803      	add	r0, sp, #12
    1aea:	4b1f      	ldr	r3, [pc, #124]	; (1b68 <_usb_d_dev_ep_trans+0x208>)
    1aec:	4798      	blx	r3
		return USB_BUSY;
    1aee:	2001      	movs	r0, #1
    1af0:	e79c      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1af2:	2100      	movs	r1, #0
    1af4:	0028      	movs	r0, r5
    1af6:	4b1e      	ldr	r3, [pc, #120]	; (1b70 <_usb_d_dev_ep_trans+0x210>)
    1af8:	4798      	blx	r3
	return ERR_NONE;
    1afa:	2000      	movs	r0, #0
    1afc:	e796      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    1afe:	2012      	movs	r0, #18
    1b00:	4240      	negs	r0, r0
    1b02:	e793      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1b04:	2013      	movs	r0, #19
    1b06:	4240      	negs	r0, r0
    1b08:	e790      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    1b0a:	2012      	movs	r0, #18
    1b0c:	4240      	negs	r0, r0
    1b0e:	e78d      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1b10:	2013      	movs	r0, #19
    1b12:	4240      	negs	r0, r0
    1b14:	e78a      	b.n	1a2c <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    1b16:	4643      	mov	r3, r8
    1b18:	685a      	ldr	r2, [r3, #4]
    1b1a:	0597      	lsls	r7, r2, #22
    1b1c:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    1b1e:	4d0d      	ldr	r5, [pc, #52]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1b20:	3574      	adds	r5, #116	; 0x74
    1b22:	2400      	movs	r4, #0
    1b24:	e746      	b.n	19b4 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b26:	4a0b      	ldr	r2, [pc, #44]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1b28:	3260      	adds	r2, #96	; 0x60
    1b2a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1b2c:	4a0a      	ldr	r2, [pc, #40]	; (1b58 <_usb_d_dev_ep_trans+0x1f8>)
    1b2e:	4291      	cmp	r1, r2
    1b30:	d0f1      	beq.n	1b16 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    1b32:	4d08      	ldr	r5, [pc, #32]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1b34:	3574      	adds	r5, #116	; 0x74
    1b36:	2400      	movs	r4, #0
    1b38:	e734      	b.n	19a4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1b3a:	00a3      	lsls	r3, r4, #2
    1b3c:	191b      	adds	r3, r3, r4
    1b3e:	009a      	lsls	r2, r3, #2
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <_usb_d_dev_ep_trans+0x1f4>)
    1b42:	189b      	adds	r3, r3, r2
    1b44:	3380      	adds	r3, #128	; 0x80
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d0e1      	beq.n	1b10 <_usb_d_dev_ep_trans+0x1b0>
    1b4c:	2301      	movs	r3, #1
    1b4e:	4699      	mov	r9, r3
    1b50:	e762      	b.n	1a18 <_usb_d_dev_ep_trans+0xb8>
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	20000224 	.word	0x20000224
    1b58:	000003ff 	.word	0x000003ff
    1b5c:	1fffffff 	.word	0x1fffffff
    1b60:	20007fff 	.word	0x20007fff
    1b64:	000002f1 	.word	0x000002f1
    1b68:	000002ff 	.word	0x000002ff
    1b6c:	00000f2d 	.word	0x00000f2d
    1b70:	00000d85 	.word	0x00000d85

00001b74 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1b74:	1e0b      	subs	r3, r1, #0
    1b76:	d006      	beq.n	1b86 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    1b78:	2801      	cmp	r0, #1
    1b7a:	d006      	beq.n	1b8a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1b7c:	2800      	cmp	r0, #0
    1b7e:	d101      	bne.n	1b84 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1b80:	4a03      	ldr	r2, [pc, #12]	; (1b90 <_usb_d_dev_register_callback+0x1c>)
    1b82:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    1b84:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1b86:	4b03      	ldr	r3, [pc, #12]	; (1b94 <_usb_d_dev_register_callback+0x20>)
    1b88:	e7f6      	b.n	1b78 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1b8a:	4a01      	ldr	r2, [pc, #4]	; (1b90 <_usb_d_dev_register_callback+0x1c>)
    1b8c:	6653      	str	r3, [r2, #100]	; 0x64
    1b8e:	e7f9      	b.n	1b84 <_usb_d_dev_register_callback+0x10>
    1b90:	20000224 	.word	0x20000224
    1b94:	00000ae9 	.word	0x00000ae9

00001b98 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1b98:	1e0b      	subs	r3, r1, #0
    1b9a:	d008      	beq.n	1bae <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d008      	beq.n	1bb2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1ba0:	2801      	cmp	r0, #1
    1ba2:	d009      	beq.n	1bb8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1ba4:	2802      	cmp	r0, #2
    1ba6:	d106      	bne.n	1bb6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1ba8:	4a05      	ldr	r2, [pc, #20]	; (1bc0 <_usb_d_dev_register_ep_callback+0x28>)
    1baa:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1bac:	e003      	b.n	1bb6 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1bae:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <_usb_d_dev_register_ep_callback+0x2c>)
    1bb0:	e7f4      	b.n	1b9c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1bb2:	4a03      	ldr	r2, [pc, #12]	; (1bc0 <_usb_d_dev_register_ep_callback+0x28>)
    1bb4:	6693      	str	r3, [r2, #104]	; 0x68
}
    1bb6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1bb8:	4a01      	ldr	r2, [pc, #4]	; (1bc0 <_usb_d_dev_register_ep_callback+0x28>)
    1bba:	66d3      	str	r3, [r2, #108]	; 0x6c
    1bbc:	e7fb      	b.n	1bb6 <_usb_d_dev_register_ep_callback+0x1e>
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	20000224 	.word	0x20000224
    1bc4:	00000ae9 	.word	0x00000ae9

00001bc8 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bca:	46c6      	mov	lr, r8
    1bcc:	b500      	push	{lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1bce:	4b83      	ldr	r3, [pc, #524]	; (1ddc <USB_Handler+0x214>)
    1bd0:	8c1e      	ldrh	r6, [r3, #32]
    1bd2:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1bd4:	2e00      	cmp	r6, #0
    1bd6:	d005      	beq.n	1be4 <USB_Handler+0x1c>
    1bd8:	4c81      	ldr	r4, [pc, #516]	; (1de0 <USB_Handler+0x218>)
    1bda:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1bdc:	2500      	movs	r5, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1bde:	4b80      	ldr	r3, [pc, #512]	; (1de0 <USB_Handler+0x218>)
    1be0:	4698      	mov	r8, r3
    1be2:	e0bb      	b.n	1d5c <USB_Handler+0x194>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1be4:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1be6:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1be8:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1bea:	075a      	lsls	r2, r3, #29
    1bec:	d417      	bmi.n	1c1e <USB_Handler+0x56>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1bee:	059a      	lsls	r2, r3, #22
    1bf0:	d41e      	bmi.n	1c30 <USB_Handler+0x68>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1bf2:	061a      	lsls	r2, r3, #24
    1bf4:	d440      	bmi.n	1c78 <USB_Handler+0xb0>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1bf6:	2270      	movs	r2, #112	; 0x70
    1bf8:	421a      	tst	r2, r3
    1bfa:	d146      	bne.n	1c8a <USB_Handler+0xc2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1bfc:	071a      	lsls	r2, r3, #28
    1bfe:	d460      	bmi.n	1cc2 <USB_Handler+0xfa>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1c00:	07db      	lsls	r3, r3, #31
    1c02:	d5e9      	bpl.n	1bd8 <USB_Handler+0x10>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c04:	4b75      	ldr	r3, [pc, #468]	; (1ddc <USB_Handler+0x214>)
    1c06:	4a77      	ldr	r2, [pc, #476]	; (1de4 <USB_Handler+0x21c>)
    1c08:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c0a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c0c:	3a92      	subs	r2, #146	; 0x92
    1c0e:	3aff      	subs	r2, #255	; 0xff
    1c10:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1c12:	4b73      	ldr	r3, [pc, #460]	; (1de0 <USB_Handler+0x218>)
    1c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c16:	2100      	movs	r1, #0
    1c18:	2004      	movs	r0, #4
    1c1a:	4798      	blx	r3
    1c1c:	e005      	b.n	1c2a <USB_Handler+0x62>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c1e:	2204      	movs	r2, #4
    1c20:	4b6e      	ldr	r3, [pc, #440]	; (1ddc <USB_Handler+0x214>)
    1c22:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1c24:	4b6e      	ldr	r3, [pc, #440]	; (1de0 <USB_Handler+0x218>)
    1c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1c28:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1c2a:	bc04      	pop	{r2}
    1c2c:	4690      	mov	r8, r2
    1c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c30:	4b6a      	ldr	r3, [pc, #424]	; (1ddc <USB_Handler+0x214>)
    1c32:	4a6c      	ldr	r2, [pc, #432]	; (1de4 <USB_Handler+0x21c>)
    1c34:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c36:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c38:	3a92      	subs	r2, #146	; 0x92
    1c3a:	3aff      	subs	r2, #255	; 0xff
    1c3c:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1c3e:	4b68      	ldr	r3, [pc, #416]	; (1de0 <USB_Handler+0x218>)
    1c40:	891b      	ldrh	r3, [r3, #8]
    1c42:	071b      	lsls	r3, r3, #28
    1c44:	0f1b      	lsrs	r3, r3, #28
    1c46:	2b03      	cmp	r3, #3
    1c48:	d00c      	beq.n	1c64 <USB_Handler+0x9c>
    1c4a:	4b65      	ldr	r3, [pc, #404]	; (1de0 <USB_Handler+0x218>)
    1c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1c4e:	071b      	lsls	r3, r3, #28
    1c50:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1c52:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1c54:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1c56:	2b03      	cmp	r3, #3
    1c58:	d005      	beq.n	1c66 <USB_Handler+0x9e>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1c5a:	4b61      	ldr	r3, [pc, #388]	; (1de0 <USB_Handler+0x218>)
    1c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c5e:	2003      	movs	r0, #3
    1c60:	4798      	blx	r3
    1c62:	e7e2      	b.n	1c2a <USB_Handler+0x62>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1c64:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1c66:	0152      	lsls	r2, r2, #5
    1c68:	4b5d      	ldr	r3, [pc, #372]	; (1de0 <USB_Handler+0x218>)
    1c6a:	189b      	adds	r3, r3, r2
    1c6c:	8919      	ldrh	r1, [r3, #8]
    1c6e:	0449      	lsls	r1, r1, #17
    1c70:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1c72:	2200      	movs	r2, #0
    1c74:	811a      	strh	r2, [r3, #8]
    1c76:	e7f0      	b.n	1c5a <USB_Handler+0x92>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c78:	2280      	movs	r2, #128	; 0x80
    1c7a:	4b58      	ldr	r3, [pc, #352]	; (1ddc <USB_Handler+0x214>)
    1c7c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1c7e:	4b58      	ldr	r3, [pc, #352]	; (1de0 <USB_Handler+0x218>)
    1c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c82:	2100      	movs	r1, #0
    1c84:	2005      	movs	r0, #5
    1c86:	4798      	blx	r3
    1c88:	e7cf      	b.n	1c2a <USB_Handler+0x62>
    1c8a:	4b54      	ldr	r3, [pc, #336]	; (1ddc <USB_Handler+0x214>)
    1c8c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c8e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c90:	4a54      	ldr	r2, [pc, #336]	; (1de4 <USB_Handler+0x21c>)
    1c92:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1c94:	4b54      	ldr	r3, [pc, #336]	; (1de8 <USB_Handler+0x220>)
    1c96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1c98:	069b      	lsls	r3, r3, #26
    1c9a:	d40c      	bmi.n	1cb6 <USB_Handler+0xee>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1c9c:	4952      	ldr	r1, [pc, #328]	; (1de8 <USB_Handler+0x220>)
	tmp &= mask;
    1c9e:	3a32      	subs	r2, #50	; 0x32
    1ca0:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1ca2:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1ca4:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    1ca6:	2bd0      	cmp	r3, #208	; 0xd0
    1ca8:	d1fb      	bne.n	1ca2 <USB_Handler+0xda>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1caa:	4b4d      	ldr	r3, [pc, #308]	; (1de0 <USB_Handler+0x218>)
    1cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1cae:	2100      	movs	r1, #0
    1cb0:	2002      	movs	r0, #2
    1cb2:	4798      	blx	r3
    1cb4:	e7b9      	b.n	1c2a <USB_Handler+0x62>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1cb6:	494c      	ldr	r1, [pc, #304]	; (1de8 <USB_Handler+0x220>)
	tmp &= mask;
    1cb8:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1cba:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    1cbc:	421a      	tst	r2, r3
    1cbe:	d0fc      	beq.n	1cba <USB_Handler+0xf2>
    1cc0:	e7f3      	b.n	1caa <USB_Handler+0xe2>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1cc2:	4b46      	ldr	r3, [pc, #280]	; (1ddc <USB_Handler+0x214>)
    1cc4:	2100      	movs	r1, #0
    1cc6:	2280      	movs	r2, #128	; 0x80
    1cc8:	0052      	lsls	r2, r2, #1
    1cca:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1ccc:	3af8      	subs	r2, #248	; 0xf8
    1cce:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1cd0:	3268      	adds	r2, #104	; 0x68
    1cd2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1cd4:	4a43      	ldr	r2, [pc, #268]	; (1de4 <USB_Handler+0x21c>)
    1cd6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1cd8:	4b44      	ldr	r3, [pc, #272]	; (1dec <USB_Handler+0x224>)
    1cda:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1cdc:	4b40      	ldr	r3, [pc, #256]	; (1de0 <USB_Handler+0x218>)
    1cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1ce0:	2100      	movs	r1, #0
    1ce2:	2001      	movs	r0, #1
    1ce4:	4798      	blx	r3
    1ce6:	e7a0      	b.n	1c2a <USB_Handler+0x62>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1ce8:	06cb      	lsls	r3, r1, #27
    1cea:	d407      	bmi.n	1cfc <USB_Handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1cec:	064b      	lsls	r3, r1, #25
    1cee:	d408      	bmi.n	1d02 <USB_Handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1cf0:	068b      	lsls	r3, r1, #26
    1cf2:	d52e      	bpl.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 0);
    1cf4:	2100      	movs	r1, #0
    1cf6:	4b3e      	ldr	r3, [pc, #248]	; (1df0 <USB_Handler+0x228>)
    1cf8:	4798      	blx	r3
    1cfa:	e02a      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_setup(ept);
    1cfc:	4b3d      	ldr	r3, [pc, #244]	; (1df4 <USB_Handler+0x22c>)
    1cfe:	4798      	blx	r3
    1d00:	e027      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 1);
    1d02:	2101      	movs	r1, #1
    1d04:	4b3a      	ldr	r3, [pc, #232]	; (1df0 <USB_Handler+0x228>)
    1d06:	4798      	blx	r3
    1d08:	e023      	b.n	1d52 <USB_Handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1d0a:	064b      	lsls	r3, r1, #25
    1d0c:	d40e      	bmi.n	1d2c <USB_Handler+0x164>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1d0e:	070b      	lsls	r3, r1, #28
    1d10:	d410      	bmi.n	1d34 <USB_Handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1d12:	078b      	lsls	r3, r1, #30
    1d14:	d412      	bmi.n	1d3c <USB_Handler+0x174>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1d16:	2307      	movs	r3, #7
    1d18:	401a      	ands	r2, r3
    1d1a:	2a01      	cmp	r2, #1
    1d1c:	d119      	bne.n	1d52 <USB_Handler+0x18a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1d1e:	074b      	lsls	r3, r1, #29
    1d20:	d410      	bmi.n	1d44 <USB_Handler+0x17c>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d22:	06cb      	lsls	r3, r1, #27
    1d24:	d515      	bpl.n	1d52 <USB_Handler+0x18a>
			_usb_d_dev_handle_setup(ept);
    1d26:	4b33      	ldr	r3, [pc, #204]	; (1df4 <USB_Handler+0x22c>)
    1d28:	4798      	blx	r3
    1d2a:	e012      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 1);
    1d2c:	2101      	movs	r1, #1
    1d2e:	4b30      	ldr	r3, [pc, #192]	; (1df0 <USB_Handler+0x228>)
    1d30:	4798      	blx	r3
    1d32:	e00e      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_trfail(ept, 1);
    1d34:	2101      	movs	r1, #1
    1d36:	4b30      	ldr	r3, [pc, #192]	; (1df8 <USB_Handler+0x230>)
    1d38:	4798      	blx	r3
    1d3a:	e00a      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_in_next(ept, true);
    1d3c:	2101      	movs	r1, #1
    1d3e:	4b2f      	ldr	r3, [pc, #188]	; (1dfc <USB_Handler+0x234>)
    1d40:	4798      	blx	r3
    1d42:	e006      	b.n	1d52 <USB_Handler+0x18a>
			_usb_d_dev_handle_trfail(ept, 0);
    1d44:	2100      	movs	r1, #0
    1d46:	4b2c      	ldr	r3, [pc, #176]	; (1df8 <USB_Handler+0x230>)
    1d48:	4798      	blx	r3
    1d4a:	e002      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 0);
    1d4c:	2100      	movs	r1, #0
    1d4e:	4b28      	ldr	r3, [pc, #160]	; (1df0 <USB_Handler+0x228>)
    1d50:	4798      	blx	r3
    1d52:	3501      	adds	r5, #1
    1d54:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1d56:	2d1b      	cmp	r5, #27
    1d58:	d100      	bne.n	1d5c <USB_Handler+0x194>
    1d5a:	e766      	b.n	1c2a <USB_Handler+0x62>
    1d5c:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1d5e:	7ca1      	ldrb	r1, [r4, #18]
    1d60:	29ff      	cmp	r1, #255	; 0xff
    1d62:	d0f6      	beq.n	1d52 <USB_Handler+0x18a>
	if (!(epint & (1u << epn))) {
    1d64:	230f      	movs	r3, #15
    1d66:	400b      	ands	r3, r1
    1d68:	2101      	movs	r1, #1
    1d6a:	4099      	lsls	r1, r3
    1d6c:	420e      	tst	r6, r1
    1d6e:	d0f0      	beq.n	1d52 <USB_Handler+0x18a>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1d70:	0159      	lsls	r1, r3, #5
    1d72:	4f23      	ldr	r7, [pc, #140]	; (1e00 <USB_Handler+0x238>)
    1d74:	46bc      	mov	ip, r7
    1d76:	4461      	add	r1, ip
    1d78:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1d7a:	015b      	lsls	r3, r3, #5
    1d7c:	4f21      	ldr	r7, [pc, #132]	; (1e04 <USB_Handler+0x23c>)
    1d7e:	46bc      	mov	ip, r7
    1d80:	4463      	add	r3, ip
    1d82:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1d84:	4019      	ands	r1, r3
	if (flags) {
    1d86:	d0e4      	beq.n	1d52 <USB_Handler+0x18a>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1d88:	00ab      	lsls	r3, r5, #2
    1d8a:	195a      	adds	r2, r3, r5
    1d8c:	0092      	lsls	r2, r2, #2
    1d8e:	4442      	add	r2, r8
    1d90:	3270      	adds	r2, #112	; 0x70
    1d92:	7dd2      	ldrb	r2, [r2, #23]
    1d94:	2347      	movs	r3, #71	; 0x47
    1d96:	4013      	ands	r3, r2
    1d98:	2b01      	cmp	r3, #1
    1d9a:	d0a5      	beq.n	1ce8 <USB_Handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1d9c:	b253      	sxtb	r3, r2
    1d9e:	2b00      	cmp	r3, #0
    1da0:	dbb3      	blt.n	1d0a <USB_Handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1da2:	068b      	lsls	r3, r1, #26
    1da4:	d4d2      	bmi.n	1d4c <USB_Handler+0x184>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1da6:	074b      	lsls	r3, r1, #29
    1da8:	d40c      	bmi.n	1dc4 <USB_Handler+0x1fc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1daa:	07cb      	lsls	r3, r1, #31
    1dac:	d40e      	bmi.n	1dcc <USB_Handler+0x204>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1dae:	2307      	movs	r3, #7
    1db0:	401a      	ands	r2, r3
    1db2:	2a01      	cmp	r2, #1
    1db4:	d1cd      	bne.n	1d52 <USB_Handler+0x18a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1db6:	070b      	lsls	r3, r1, #28
    1db8:	d40c      	bmi.n	1dd4 <USB_Handler+0x20c>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1dba:	06cb      	lsls	r3, r1, #27
    1dbc:	d5c9      	bpl.n	1d52 <USB_Handler+0x18a>
			_usb_d_dev_handle_setup(ept);
    1dbe:	4b0d      	ldr	r3, [pc, #52]	; (1df4 <USB_Handler+0x22c>)
    1dc0:	4798      	blx	r3
    1dc2:	e7c6      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_handle_trfail(ept, 0);
    1dc4:	2100      	movs	r1, #0
    1dc6:	4b0c      	ldr	r3, [pc, #48]	; (1df8 <USB_Handler+0x230>)
    1dc8:	4798      	blx	r3
    1dca:	e7c2      	b.n	1d52 <USB_Handler+0x18a>
		_usb_d_dev_out_next(ept, true);
    1dcc:	2101      	movs	r1, #1
    1dce:	4b0e      	ldr	r3, [pc, #56]	; (1e08 <USB_Handler+0x240>)
    1dd0:	4798      	blx	r3
    1dd2:	e7be      	b.n	1d52 <USB_Handler+0x18a>
			_usb_d_dev_handle_trfail(ept, 1);
    1dd4:	2101      	movs	r1, #1
    1dd6:	4b08      	ldr	r3, [pc, #32]	; (1df8 <USB_Handler+0x230>)
    1dd8:	4798      	blx	r3
    1dda:	e7ba      	b.n	1d52 <USB_Handler+0x18a>
    1ddc:	41005000 	.word	0x41005000
    1de0:	20000224 	.word	0x20000224
    1de4:	00000201 	.word	0x00000201
    1de8:	40000800 	.word	0x40000800
    1dec:	00000d3d 	.word	0x00000d3d
    1df0:	00000b79 	.word	0x00000b79
    1df4:	00000aed 	.word	0x00000aed
    1df8:	00000c3d 	.word	0x00000c3d
    1dfc:	00000d85 	.word	0x00000d85
    1e00:	41005100 	.word	0x41005100
    1e04:	41005109 	.word	0x41005109
    1e08:	00000f2d 	.word	0x00000f2d

00001e0c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e0e:	b083      	sub	sp, #12
    1e10:	0006      	movs	r6, r0
    1e12:	000c      	movs	r4, r1
    1e14:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1e16:	780a      	ldrb	r2, [r1, #0]
    1e18:	0653      	lsls	r3, r2, #25
    1e1a:	0f9b      	lsrs	r3, r3, #30
    1e1c:	2b01      	cmp	r3, #1
    1e1e:	d000      	beq.n	1e22 <cdcdf_acm_req+0x16>
    1e20:	e06c      	b.n	1efc <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1e22:	7909      	ldrb	r1, [r1, #4]
    1e24:	7963      	ldrb	r3, [r4, #5]
    1e26:	021b      	lsls	r3, r3, #8
    1e28:	430b      	orrs	r3, r1
    1e2a:	493b      	ldr	r1, [pc, #236]	; (1f18 <cdcdf_acm_req+0x10c>)
    1e2c:	7809      	ldrb	r1, [r1, #0]
    1e2e:	4299      	cmp	r1, r3
    1e30:	d003      	beq.n	1e3a <cdcdf_acm_req+0x2e>
    1e32:	4939      	ldr	r1, [pc, #228]	; (1f18 <cdcdf_acm_req+0x10c>)
    1e34:	7849      	ldrb	r1, [r1, #1]
    1e36:	4299      	cmp	r1, r3
    1e38:	d163      	bne.n	1f02 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1e3a:	b252      	sxtb	r2, r2
    1e3c:	2a00      	cmp	r2, #0
    1e3e:	db0e      	blt.n	1e5e <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    1e40:	79a7      	ldrb	r7, [r4, #6]
    1e42:	79e3      	ldrb	r3, [r4, #7]
    1e44:	021b      	lsls	r3, r3, #8
    1e46:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1e48:	4b34      	ldr	r3, [pc, #208]	; (1f1c <cdcdf_acm_req+0x110>)
    1e4a:	4798      	blx	r3
	switch (req->bRequest) {
    1e4c:	7863      	ldrb	r3, [r4, #1]
    1e4e:	2b20      	cmp	r3, #32
    1e50:	d018      	beq.n	1e84 <cdcdf_acm_req+0x78>
    1e52:	2b22      	cmp	r3, #34	; 0x22
    1e54:	d03c      	beq.n	1ed0 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    1e56:	200d      	movs	r0, #13
    1e58:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1e5a:	b003      	add	sp, #12
    1e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    1e5e:	2d01      	cmp	r5, #1
    1e60:	d052      	beq.n	1f08 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    1e62:	7863      	ldrb	r3, [r4, #1]
    1e64:	2b21      	cmp	r3, #33	; 0x21
    1e66:	d151      	bne.n	1f0c <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    1e68:	79a2      	ldrb	r2, [r4, #6]
    1e6a:	79e3      	ldrb	r3, [r4, #7]
    1e6c:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1e6e:	4313      	orrs	r3, r2
    1e70:	2b07      	cmp	r3, #7
    1e72:	d14e      	bne.n	1f12 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    1e74:	2300      	movs	r3, #0
    1e76:	2207      	movs	r2, #7
    1e78:	4927      	ldr	r1, [pc, #156]	; (1f18 <cdcdf_acm_req+0x10c>)
    1e7a:	3108      	adds	r1, #8
    1e7c:	0030      	movs	r0, r6
    1e7e:	4c28      	ldr	r4, [pc, #160]	; (1f20 <cdcdf_acm_req+0x114>)
    1e80:	47a0      	blx	r4
    1e82:	e7ea      	b.n	1e5a <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1e84:	2f07      	cmp	r7, #7
    1e86:	d134      	bne.n	1ef2 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    1e88:	2d00      	cmp	r5, #0
    1e8a:	d01a      	beq.n	1ec2 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    1e8c:	2207      	movs	r2, #7
    1e8e:	0001      	movs	r1, r0
    1e90:	4668      	mov	r0, sp
    1e92:	4b24      	ldr	r3, [pc, #144]	; (1f24 <cdcdf_acm_req+0x118>)
    1e94:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1e96:	4b20      	ldr	r3, [pc, #128]	; (1f18 <cdcdf_acm_req+0x10c>)
    1e98:	691b      	ldr	r3, [r3, #16]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d005      	beq.n	1eaa <cdcdf_acm_req+0x9e>
    1e9e:	4668      	mov	r0, sp
    1ea0:	4798      	blx	r3
    1ea2:	0003      	movs	r3, r0
			return ERR_NONE;
    1ea4:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d0d7      	beq.n	1e5a <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    1eaa:	4a1b      	ldr	r2, [pc, #108]	; (1f18 <cdcdf_acm_req+0x10c>)
    1eac:	0013      	movs	r3, r2
    1eae:	9900      	ldr	r1, [sp, #0]
    1eb0:	6091      	str	r1, [r2, #8]
    1eb2:	466a      	mov	r2, sp
    1eb4:	8892      	ldrh	r2, [r2, #4]
    1eb6:	819a      	strh	r2, [r3, #12]
    1eb8:	466a      	mov	r2, sp
    1eba:	7992      	ldrb	r2, [r2, #6]
    1ebc:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    1ebe:	2000      	movs	r0, #0
    1ec0:	e7cb      	b.n	1e5a <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1ec2:	2300      	movs	r3, #0
    1ec4:	2207      	movs	r2, #7
    1ec6:	0001      	movs	r1, r0
    1ec8:	0030      	movs	r0, r6
    1eca:	4c15      	ldr	r4, [pc, #84]	; (1f20 <cdcdf_acm_req+0x114>)
    1ecc:	47a0      	blx	r4
    1ece:	e7c4      	b.n	1e5a <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    1ed0:	2300      	movs	r3, #0
    1ed2:	2200      	movs	r2, #0
    1ed4:	2100      	movs	r1, #0
    1ed6:	2000      	movs	r0, #0
    1ed8:	4d11      	ldr	r5, [pc, #68]	; (1f20 <cdcdf_acm_req+0x114>)
    1eda:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    1edc:	4b0e      	ldr	r3, [pc, #56]	; (1f18 <cdcdf_acm_req+0x10c>)
    1ede:	695b      	ldr	r3, [r3, #20]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d009      	beq.n	1ef8 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    1ee4:	78a2      	ldrb	r2, [r4, #2]
    1ee6:	78e0      	ldrb	r0, [r4, #3]
    1ee8:	0200      	lsls	r0, r0, #8
    1eea:	4310      	orrs	r0, r2
    1eec:	4798      	blx	r3
		return ERR_NONE;
    1eee:	2000      	movs	r0, #0
    1ef0:	e7b3      	b.n	1e5a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    1ef2:	2001      	movs	r0, #1
    1ef4:	4240      	negs	r0, r0
    1ef6:	e7b0      	b.n	1e5a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    1ef8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    1efa:	e7ae      	b.n	1e5a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    1efc:	200a      	movs	r0, #10
    1efe:	4240      	negs	r0, r0
    1f00:	e7ab      	b.n	1e5a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    1f02:	200a      	movs	r0, #10
    1f04:	4240      	negs	r0, r0
    1f06:	e7a8      	b.n	1e5a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    1f08:	2000      	movs	r0, #0
    1f0a:	e7a6      	b.n	1e5a <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    1f0c:	200d      	movs	r0, #13
    1f0e:	4240      	negs	r0, r0
    1f10:	e7a3      	b.n	1e5a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    1f12:	2001      	movs	r0, #1
    1f14:	4240      	negs	r0, r0
    1f16:	e7a0      	b.n	1e5a <cdcdf_acm_req+0x4e>
    1f18:	20000574 	.word	0x20000574
    1f1c:	00002891 	.word	0x00002891
    1f20:	00002341 	.word	0x00002341
    1f24:	00002afd 	.word	0x00002afd

00001f28 <cdcdf_acm_ctrl>:
{
    1f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2a:	46de      	mov	lr, fp
    1f2c:	4657      	mov	r7, sl
    1f2e:	464e      	mov	r6, r9
    1f30:	4645      	mov	r5, r8
    1f32:	b5e0      	push	{r5, r6, r7, lr}
    1f34:	b083      	sub	sp, #12
    1f36:	0016      	movs	r6, r2
	switch (ctrl) {
    1f38:	2901      	cmp	r1, #1
    1f3a:	d068      	beq.n	200e <STACK_SIZE+0xe>
    1f3c:	2900      	cmp	r1, #0
    1f3e:	d00b      	beq.n	1f58 <cdcdf_acm_ctrl+0x30>
    1f40:	2902      	cmp	r1, #2
    1f42:	d100      	bne.n	1f46 <cdcdf_acm_ctrl+0x1e>
    1f44:	e093      	b.n	206e <STACK_SIZE+0x6e>
		return ERR_INVALID_ARG;
    1f46:	200d      	movs	r0, #13
    1f48:	4240      	negs	r0, r0
}
    1f4a:	b003      	add	sp, #12
    1f4c:	bc3c      	pop	{r2, r3, r4, r5}
    1f4e:	4690      	mov	r8, r2
    1f50:	4699      	mov	r9, r3
    1f52:	46a2      	mov	sl, r4
    1f54:	46ab      	mov	fp, r5
    1f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    1f58:	6883      	ldr	r3, [r0, #8]
    1f5a:	4698      	mov	r8, r3
	ifc = desc->sod;
    1f5c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    1f5e:	2800      	cmp	r0, #0
    1f60:	d100      	bne.n	1f64 <cdcdf_acm_ctrl+0x3c>
    1f62:	e087      	b.n	2074 <STACK_SIZE+0x74>
    1f64:	9301      	str	r3, [sp, #4]
    1f66:	2301      	movs	r3, #1
    1f68:	4443      	add	r3, r8
    1f6a:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    1f6c:	4f47      	ldr	r7, [pc, #284]	; (208c <STACK_SIZE+0x8c>)
				usb_d_ep_enable(func_data->func_ep_out);
    1f6e:	4b48      	ldr	r3, [pc, #288]	; (2090 <STACK_SIZE+0x90>)
    1f70:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    1f72:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1f74:	7943      	ldrb	r3, [r0, #5]
    1f76:	2108      	movs	r1, #8
    1f78:	438b      	bics	r3, r1
    1f7a:	2b02      	cmp	r3, #2
    1f7c:	d002      	beq.n	1f84 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    1f7e:	200a      	movs	r0, #10
    1f80:	4240      	negs	r0, r0
    1f82:	e7e2      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
    1f84:	9901      	ldr	r1, [sp, #4]
    1f86:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    1f88:	780b      	ldrb	r3, [r1, #0]
    1f8a:	429a      	cmp	r2, r3
    1f8c:	d075      	beq.n	207a <STACK_SIZE+0x7a>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    1f8e:	2bff      	cmp	r3, #255	; 0xff
    1f90:	d176      	bne.n	2080 <STACK_SIZE+0x80>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    1f92:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    1f94:	2205      	movs	r2, #5
    1f96:	6871      	ldr	r1, [r6, #4]
    1f98:	4b3e      	ldr	r3, [pc, #248]	; (2094 <STACK_SIZE+0x94>)
    1f9a:	4798      	blx	r3
    1f9c:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    1f9e:	d11e      	bne.n	1fde <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    1fa0:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    1fa2:	7803      	ldrb	r3, [r0, #0]
    1fa4:	18c0      	adds	r0, r0, r3
    1fa6:	2204      	movs	r2, #4
    1fa8:	6871      	ldr	r1, [r6, #4]
    1faa:	4b3a      	ldr	r3, [pc, #232]	; (2094 <STACK_SIZE+0x94>)
    1fac:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    1fae:	9b01      	ldr	r3, [sp, #4]
    1fb0:	455b      	cmp	r3, fp
    1fb2:	d027      	beq.n	2004 <STACK_SIZE+0x4>
    1fb4:	9b01      	ldr	r3, [sp, #4]
    1fb6:	3301      	adds	r3, #1
    1fb8:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    1fba:	2800      	cmp	r0, #0
    1fbc:	d1d9      	bne.n	1f72 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    1fbe:	200a      	movs	r0, #10
    1fc0:	4240      	negs	r0, r0
    1fc2:	e7c2      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    1fc4:	4653      	mov	r3, sl
    1fc6:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    1fc8:	0028      	movs	r0, r5
    1fca:	4b31      	ldr	r3, [pc, #196]	; (2090 <STACK_SIZE+0x90>)
    1fcc:	4798      	blx	r3
			desc->sod = ep;
    1fce:	6034      	str	r4, [r6, #0]
    1fd0:	7820      	ldrb	r0, [r4, #0]
    1fd2:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    1fd4:	6871      	ldr	r1, [r6, #4]
    1fd6:	4b30      	ldr	r3, [pc, #192]	; (2098 <STACK_SIZE+0x98>)
    1fd8:	4798      	blx	r3
    1fda:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    1fdc:	d0e0      	beq.n	1fa0 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    1fde:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    1fe0:	7963      	ldrb	r3, [r4, #5]
    1fe2:	021b      	lsls	r3, r3, #8
    1fe4:	7922      	ldrb	r2, [r4, #4]
    1fe6:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    1fe8:	b292      	uxth	r2, r2
    1fea:	78e1      	ldrb	r1, [r4, #3]
    1fec:	0028      	movs	r0, r5
    1fee:	47b8      	blx	r7
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d148      	bne.n	2086 <STACK_SIZE+0x86>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    1ff4:	b26b      	sxtb	r3, r5
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	dbe4      	blt.n	1fc4 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    1ffa:	4643      	mov	r3, r8
    1ffc:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    1ffe:	0028      	movs	r0, r5
    2000:	47c8      	blx	r9
    2002:	e7e4      	b.n	1fce <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2004:	2201      	movs	r2, #1
    2006:	4b25      	ldr	r3, [pc, #148]	; (209c <STACK_SIZE+0x9c>)
    2008:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    200a:	2000      	movs	r0, #0
    200c:	e79d      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    200e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2010:	2a00      	cmp	r2, #0
    2012:	d008      	beq.n	2026 <STACK_SIZE+0x26>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2014:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2016:	795b      	ldrb	r3, [r3, #5]
    2018:	2208      	movs	r2, #8
    201a:	4393      	bics	r3, r2
    201c:	2b02      	cmp	r3, #2
    201e:	d002      	beq.n	2026 <STACK_SIZE+0x26>
			return ERR_NOT_FOUND;
    2020:	200a      	movs	r0, #10
    2022:	4240      	negs	r0, r0
    2024:	e791      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2026:	7823      	ldrb	r3, [r4, #0]
    2028:	2bff      	cmp	r3, #255	; 0xff
    202a:	d008      	beq.n	203e <STACK_SIZE+0x3e>
			func_data->func_iface[i] = 0xFF;
    202c:	23ff      	movs	r3, #255	; 0xff
    202e:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2030:	78a0      	ldrb	r0, [r4, #2]
    2032:	28ff      	cmp	r0, #255	; 0xff
    2034:	d003      	beq.n	203e <STACK_SIZE+0x3e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2036:	4b1a      	ldr	r3, [pc, #104]	; (20a0 <STACK_SIZE+0xa0>)
    2038:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    203a:	23ff      	movs	r3, #255	; 0xff
    203c:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    203e:	7863      	ldrb	r3, [r4, #1]
    2040:	2bff      	cmp	r3, #255	; 0xff
    2042:	d008      	beq.n	2056 <STACK_SIZE+0x56>
			func_data->func_iface[i] = 0xFF;
    2044:	23ff      	movs	r3, #255	; 0xff
    2046:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2048:	78e0      	ldrb	r0, [r4, #3]
    204a:	28ff      	cmp	r0, #255	; 0xff
    204c:	d003      	beq.n	2056 <STACK_SIZE+0x56>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    204e:	4b14      	ldr	r3, [pc, #80]	; (20a0 <STACK_SIZE+0xa0>)
    2050:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2052:	23ff      	movs	r3, #255	; 0xff
    2054:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2056:	7920      	ldrb	r0, [r4, #4]
    2058:	28ff      	cmp	r0, #255	; 0xff
    205a:	d003      	beq.n	2064 <STACK_SIZE+0x64>
		usb_d_ep_deinit(func_data->func_ep_out);
    205c:	4b10      	ldr	r3, [pc, #64]	; (20a0 <STACK_SIZE+0xa0>)
    205e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2060:	23ff      	movs	r3, #255	; 0xff
    2062:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2064:	2200      	movs	r2, #0
    2066:	4b0d      	ldr	r3, [pc, #52]	; (209c <STACK_SIZE+0x9c>)
    2068:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    206a:	2000      	movs	r0, #0
    206c:	e76d      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    206e:	201b      	movs	r0, #27
    2070:	4240      	negs	r0, r0
    2072:	e76a      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2074:	200a      	movs	r0, #10
    2076:	4240      	negs	r0, r0
    2078:	e767      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    207a:	2012      	movs	r0, #18
    207c:	4240      	negs	r0, r0
    207e:	e764      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2080:	201c      	movs	r0, #28
    2082:	4240      	negs	r0, r0
    2084:	e761      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2086:	2014      	movs	r0, #20
    2088:	4240      	negs	r0, r0
    208a:	e75e      	b.n	1f4a <cdcdf_acm_ctrl+0x22>
    208c:	00000621 	.word	0x00000621
    2090:	000006b5 	.word	0x000006b5
    2094:	000028ad 	.word	0x000028ad
    2098:	000028e3 	.word	0x000028e3
    209c:	20000574 	.word	0x20000574
    20a0:	00000689 	.word	0x00000689

000020a4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    20a4:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    20a6:	4b0a      	ldr	r3, [pc, #40]	; (20d0 <cdcdf_acm_init+0x2c>)
    20a8:	4798      	blx	r3
    20aa:	2801      	cmp	r0, #1
    20ac:	d80c      	bhi.n	20c8 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    20ae:	4809      	ldr	r0, [pc, #36]	; (20d4 <cdcdf_acm_init+0x30>)
    20b0:	4b09      	ldr	r3, [pc, #36]	; (20d8 <cdcdf_acm_init+0x34>)
    20b2:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    20b4:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    20b6:	3018      	adds	r0, #24
    20b8:	4b08      	ldr	r3, [pc, #32]	; (20dc <cdcdf_acm_init+0x38>)
    20ba:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    20bc:	4908      	ldr	r1, [pc, #32]	; (20e0 <cdcdf_acm_init+0x3c>)
    20be:	2001      	movs	r0, #1
    20c0:	4b08      	ldr	r3, [pc, #32]	; (20e4 <cdcdf_acm_init+0x40>)
    20c2:	4798      	blx	r3
	return ERR_NONE;
    20c4:	2000      	movs	r0, #0
}
    20c6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    20c8:	2011      	movs	r0, #17
    20ca:	4240      	negs	r0, r0
    20cc:	e7fb      	b.n	20c6 <cdcdf_acm_init+0x22>
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	0000289d 	.word	0x0000289d
    20d4:	20000574 	.word	0x20000574
    20d8:	00001f29 	.word	0x00001f29
    20dc:	00002835 	.word	0x00002835
    20e0:	20000000 	.word	0x20000000
    20e4:	0000279d 	.word	0x0000279d

000020e8 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    20e8:	b510      	push	{r4, lr}
    20ea:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    20ec:	4b07      	ldr	r3, [pc, #28]	; (210c <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    20ee:	795b      	ldrb	r3, [r3, #5]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d007      	beq.n	2104 <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    20f4:	4b05      	ldr	r3, [pc, #20]	; (210c <cdcdf_acm_read+0x24>)
    20f6:	7918      	ldrb	r0, [r3, #4]
    20f8:	2300      	movs	r3, #0
    20fa:	000a      	movs	r2, r1
    20fc:	0021      	movs	r1, r4
    20fe:	4c04      	ldr	r4, [pc, #16]	; (2110 <cdcdf_acm_read+0x28>)
    2100:	47a0      	blx	r4
}
    2102:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2104:	2011      	movs	r0, #17
    2106:	4240      	negs	r0, r0
    2108:	e7fb      	b.n	2102 <cdcdf_acm_read+0x1a>
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	20000574 	.word	0x20000574
    2110:	00002341 	.word	0x00002341

00002114 <cdcdf_acm_write>:
{
    2114:	b510      	push	{r4, lr}
    2116:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    2118:	4b07      	ldr	r3, [pc, #28]	; (2138 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    211a:	795b      	ldrb	r3, [r3, #5]
    211c:	2b00      	cmp	r3, #0
    211e:	d007      	beq.n	2130 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2120:	4b05      	ldr	r3, [pc, #20]	; (2138 <cdcdf_acm_write+0x24>)
    2122:	78d8      	ldrb	r0, [r3, #3]
    2124:	2301      	movs	r3, #1
    2126:	000a      	movs	r2, r1
    2128:	0021      	movs	r1, r4
    212a:	4c04      	ldr	r4, [pc, #16]	; (213c <cdcdf_acm_write+0x28>)
    212c:	47a0      	blx	r4
}
    212e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2130:	2011      	movs	r0, #17
    2132:	4240      	negs	r0, r0
    2134:	e7fb      	b.n	212e <cdcdf_acm_write+0x1a>
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	20000574 	.word	0x20000574
    213c:	00002341 	.word	0x00002341

00002140 <cdcdf_acm_register_callback>:
{
    2140:	b510      	push	{r4, lr}
	switch (cb_type) {
    2142:	2801      	cmp	r0, #1
    2144:	d010      	beq.n	2168 <cdcdf_acm_register_callback+0x28>
    2146:	2800      	cmp	r0, #0
    2148:	d006      	beq.n	2158 <cdcdf_acm_register_callback+0x18>
    214a:	2802      	cmp	r0, #2
    214c:	d014      	beq.n	2178 <cdcdf_acm_register_callback+0x38>
    214e:	2803      	cmp	r0, #3
    2150:	d016      	beq.n	2180 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    2152:	200d      	movs	r0, #13
    2154:	4240      	negs	r0, r0
    2156:	e006      	b.n	2166 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    2158:	4b0b      	ldr	r3, [pc, #44]	; (2188 <cdcdf_acm_register_callback+0x48>)
    215a:	7918      	ldrb	r0, [r3, #4]
    215c:	000a      	movs	r2, r1
    215e:	2102      	movs	r1, #2
    2160:	4b0a      	ldr	r3, [pc, #40]	; (218c <cdcdf_acm_register_callback+0x4c>)
    2162:	4798      	blx	r3
	return ERR_NONE;
    2164:	2000      	movs	r0, #0
}
    2166:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2168:	4b07      	ldr	r3, [pc, #28]	; (2188 <cdcdf_acm_register_callback+0x48>)
    216a:	78d8      	ldrb	r0, [r3, #3]
    216c:	000a      	movs	r2, r1
    216e:	2102      	movs	r1, #2
    2170:	4b06      	ldr	r3, [pc, #24]	; (218c <cdcdf_acm_register_callback+0x4c>)
    2172:	4798      	blx	r3
	return ERR_NONE;
    2174:	2000      	movs	r0, #0
		break;
    2176:	e7f6      	b.n	2166 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2178:	4b03      	ldr	r3, [pc, #12]	; (2188 <cdcdf_acm_register_callback+0x48>)
    217a:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    217c:	2000      	movs	r0, #0
		break;
    217e:	e7f2      	b.n	2166 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    2180:	4b01      	ldr	r3, [pc, #4]	; (2188 <cdcdf_acm_register_callback+0x48>)
    2182:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    2184:	2000      	movs	r0, #0
		break;
    2186:	e7ee      	b.n	2166 <cdcdf_acm_register_callback+0x26>
    2188:	20000574 	.word	0x20000574
    218c:	00000891 	.word	0x00000891

00002190 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    2190:	4b01      	ldr	r3, [pc, #4]	; (2198 <cdcdf_acm_is_enabled+0x8>)
    2192:	7958      	ldrb	r0, [r3, #5]
}
    2194:	4770      	bx	lr
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	20000574 	.word	0x20000574

0000219c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    219c:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    219e:	4b06      	ldr	r3, [pc, #24]	; (21b8 <usbdc_unconfig+0x1c>)
    21a0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    21a2:	2c00      	cmp	r4, #0
    21a4:	d007      	beq.n	21b6 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    21a6:	2200      	movs	r2, #0
    21a8:	2101      	movs	r1, #1
    21aa:	0020      	movs	r0, r4
    21ac:	6863      	ldr	r3, [r4, #4]
    21ae:	4798      	blx	r3
		func = func->next;
    21b0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    21b2:	2c00      	cmp	r4, #0
    21b4:	d1f7      	bne.n	21a6 <usbdc_unconfig+0xa>
	}
}
    21b6:	bd10      	pop	{r4, pc}
    21b8:	20000598 	.word	0x20000598

000021bc <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	0006      	movs	r6, r0
    21c0:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    21c2:	4b07      	ldr	r3, [pc, #28]	; (21e0 <usbdc_change_notify+0x24>)
    21c4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    21c6:	2c00      	cmp	r4, #0
    21c8:	d103      	bne.n	21d2 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    21ca:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    21cc:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    21ce:	2c00      	cmp	r4, #0
    21d0:	d0fb      	beq.n	21ca <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    21d2:	6863      	ldr	r3, [r4, #4]
    21d4:	2b00      	cmp	r3, #0
    21d6:	d0f9      	beq.n	21cc <usbdc_change_notify+0x10>
			cg->cb(change, value);
    21d8:	0029      	movs	r1, r5
    21da:	0030      	movs	r0, r6
    21dc:	4798      	blx	r3
    21de:	e7f5      	b.n	21cc <usbdc_change_notify+0x10>
    21e0:	20000598 	.word	0x20000598

000021e4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    21e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21e6:	0007      	movs	r7, r0
    21e8:	000e      	movs	r6, r1
    21ea:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    21ec:	4b0d      	ldr	r3, [pc, #52]	; (2224 <usbdc_request_handler+0x40>)
    21ee:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    21f0:	2c00      	cmp	r4, #0
    21f2:	d104      	bne.n	21fe <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    21f4:	2000      	movs	r0, #0
    21f6:	e011      	b.n	221c <usbdc_request_handler+0x38>
		h = h->next;
    21f8:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    21fa:	2c00      	cmp	r4, #0
    21fc:	d00d      	beq.n	221a <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    21fe:	6863      	ldr	r3, [r4, #4]
    2200:	2b00      	cmp	r3, #0
    2202:	d0f9      	beq.n	21f8 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2204:	002a      	movs	r2, r5
    2206:	0031      	movs	r1, r6
    2208:	0038      	movs	r0, r7
    220a:	4798      	blx	r3
			if (0 == rc) {
    220c:	2800      	cmp	r0, #0
    220e:	d006      	beq.n	221e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    2210:	300a      	adds	r0, #10
    2212:	d0f1      	beq.n	21f8 <usbdc_request_handler+0x14>
				return -1;
    2214:	2001      	movs	r0, #1
    2216:	4240      	negs	r0, r0
    2218:	e000      	b.n	221c <usbdc_request_handler+0x38>
	return false;
    221a:	2000      	movs	r0, #0
}
    221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    221e:	2001      	movs	r0, #1
    2220:	e7fc      	b.n	221c <usbdc_request_handler+0x38>
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	20000598 	.word	0x20000598

00002228 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2228:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    222a:	4b06      	ldr	r3, [pc, #24]	; (2244 <usbd_sof_cb+0x1c>)
    222c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    222e:	2c00      	cmp	r4, #0
    2230:	d103      	bne.n	223a <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    2232:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2234:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2236:	2c00      	cmp	r4, #0
    2238:	d0fb      	beq.n	2232 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    223a:	6863      	ldr	r3, [r4, #4]
    223c:	2b00      	cmp	r3, #0
    223e:	d0f9      	beq.n	2234 <usbd_sof_cb+0xc>
			sof->cb();
    2240:	4798      	blx	r3
    2242:	e7f7      	b.n	2234 <usbd_sof_cb+0xc>
    2244:	20000598 	.word	0x20000598

00002248 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2248:	b510      	push	{r4, lr}
    224a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    224c:	2900      	cmp	r1, #0
    224e:	d003      	beq.n	2258 <usbdc_cb_ctl_done+0x10>
    2250:	2901      	cmp	r1, #1
    2252:	d029      	beq.n	22a8 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2254:	2000      	movs	r0, #0
    2256:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2258:	7813      	ldrb	r3, [r2, #0]
    225a:	2b00      	cmp	r3, #0
    225c:	d1fa      	bne.n	2254 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    225e:	7853      	ldrb	r3, [r2, #1]
    2260:	2b05      	cmp	r3, #5
    2262:	d011      	beq.n	2288 <usbdc_cb_ctl_done+0x40>
    2264:	2b09      	cmp	r3, #9
    2266:	d1f5      	bne.n	2254 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2268:	7892      	ldrb	r2, [r2, #2]
    226a:	4b12      	ldr	r3, [pc, #72]	; (22b4 <usbdc_cb_ctl_done+0x6c>)
    226c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    226e:	78a3      	ldrb	r3, [r4, #2]
    2270:	78e1      	ldrb	r1, [r4, #3]
    2272:	0209      	lsls	r1, r1, #8
    2274:	4319      	orrs	r1, r3
    2276:	1e4b      	subs	r3, r1, #1
    2278:	4199      	sbcs	r1, r3
    227a:	3103      	adds	r1, #3
    227c:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <usbdc_cb_ctl_done+0x6c>)
    227e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2280:	2001      	movs	r0, #1
    2282:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <usbdc_cb_ctl_done+0x70>)
    2284:	4798      	blx	r3
    2286:	e7e5      	b.n	2254 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2288:	7890      	ldrb	r0, [r2, #2]
    228a:	4b0c      	ldr	r3, [pc, #48]	; (22bc <usbdc_cb_ctl_done+0x74>)
    228c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    228e:	78a3      	ldrb	r3, [r4, #2]
    2290:	78e1      	ldrb	r1, [r4, #3]
    2292:	0209      	lsls	r1, r1, #8
    2294:	4319      	orrs	r1, r3
    2296:	1e4b      	subs	r3, r1, #1
    2298:	4199      	sbcs	r1, r3
    229a:	3102      	adds	r1, #2
    229c:	4b05      	ldr	r3, [pc, #20]	; (22b4 <usbdc_cb_ctl_done+0x6c>)
    229e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    22a0:	2001      	movs	r0, #1
    22a2:	4b05      	ldr	r3, [pc, #20]	; (22b8 <usbdc_cb_ctl_done+0x70>)
    22a4:	4798      	blx	r3
    22a6:	e7d5      	b.n	2254 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    22a8:	2201      	movs	r2, #1
    22aa:	0021      	movs	r1, r4
    22ac:	2000      	movs	r0, #0
    22ae:	4b04      	ldr	r3, [pc, #16]	; (22c0 <usbdc_cb_ctl_done+0x78>)
    22b0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    22b2:	e7cf      	b.n	2254 <usbdc_cb_ctl_done+0xc>
    22b4:	20000598 	.word	0x20000598
    22b8:	000021bd 	.word	0x000021bd
    22bc:	00000615 	.word	0x00000615
    22c0:	000021e5 	.word	0x000021e5

000022c4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    22c4:	b510      	push	{r4, lr}
	usbdc_unconfig();
    22c6:	4b0d      	ldr	r3, [pc, #52]	; (22fc <usbdc_reset+0x38>)
    22c8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    22ca:	4c0d      	ldr	r4, [pc, #52]	; (2300 <usbdc_reset+0x3c>)
    22cc:	2302      	movs	r3, #2
    22ce:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    22d0:	2300      	movs	r3, #0
    22d2:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    22d4:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    22d6:	2000      	movs	r0, #0
    22d8:	4b0a      	ldr	r3, [pc, #40]	; (2304 <usbdc_reset+0x40>)
    22da:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    22dc:	7f20      	ldrb	r0, [r4, #28]
    22de:	4b0a      	ldr	r3, [pc, #40]	; (2308 <usbdc_reset+0x44>)
    22e0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    22e2:	4a0a      	ldr	r2, [pc, #40]	; (230c <usbdc_reset+0x48>)
    22e4:	2100      	movs	r1, #0
    22e6:	2000      	movs	r0, #0
    22e8:	4c09      	ldr	r4, [pc, #36]	; (2310 <usbdc_reset+0x4c>)
    22ea:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    22ec:	4a09      	ldr	r2, [pc, #36]	; (2314 <usbdc_reset+0x50>)
    22ee:	2102      	movs	r1, #2
    22f0:	2000      	movs	r0, #0
    22f2:	47a0      	blx	r4
	usb_d_ep_enable(0);
    22f4:	2000      	movs	r0, #0
    22f6:	4b08      	ldr	r3, [pc, #32]	; (2318 <usbdc_reset+0x54>)
    22f8:	4798      	blx	r3
}
    22fa:	bd10      	pop	{r4, pc}
    22fc:	0000219d 	.word	0x0000219d
    2300:	20000598 	.word	0x20000598
    2304:	00000689 	.word	0x00000689
    2308:	00000675 	.word	0x00000675
    230c:	0000235d 	.word	0x0000235d
    2310:	00000891 	.word	0x00000891
    2314:	00002249 	.word	0x00002249
    2318:	000006b5 	.word	0x000006b5

0000231c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    231c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    231e:	2800      	cmp	r0, #0
    2320:	d002      	beq.n	2328 <usbd_event_cb+0xc>
    2322:	2801      	cmp	r0, #1
    2324:	d004      	beq.n	2330 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2326:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2328:	2000      	movs	r0, #0
    232a:	4b03      	ldr	r3, [pc, #12]	; (2338 <usbd_event_cb+0x1c>)
    232c:	4798      	blx	r3
		break;
    232e:	e7fa      	b.n	2326 <usbd_event_cb+0xa>
		usbdc_reset();
    2330:	4b02      	ldr	r3, [pc, #8]	; (233c <usbd_event_cb+0x20>)
    2332:	4798      	blx	r3
}
    2334:	e7f7      	b.n	2326 <usbd_event_cb+0xa>
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	000021bd 	.word	0x000021bd
    233c:	000022c5 	.word	0x000022c5

00002340 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2340:	b510      	push	{r4, lr}
    2342:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2344:	ac01      	add	r4, sp, #4
    2346:	9101      	str	r1, [sp, #4]
    2348:	9202      	str	r2, [sp, #8]
    234a:	7220      	strb	r0, [r4, #8]
    234c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    234e:	0020      	movs	r0, r4
    2350:	4b01      	ldr	r3, [pc, #4]	; (2358 <usbdc_xfer+0x18>)
    2352:	4798      	blx	r3
}
    2354:	b004      	add	sp, #16
    2356:	bd10      	pop	{r4, pc}
    2358:	00000701 	.word	0x00000701

0000235c <usbdc_cb_ctl_req>:
{
    235c:	b5f0      	push	{r4, r5, r6, r7, lr}
    235e:	46c6      	mov	lr, r8
    2360:	b500      	push	{lr}
    2362:	b084      	sub	sp, #16
    2364:	0005      	movs	r5, r0
    2366:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2368:	2200      	movs	r2, #0
    236a:	4bb5      	ldr	r3, [pc, #724]	; (2640 <usbdc_cb_ctl_req+0x2e4>)
    236c:	4798      	blx	r3
    236e:	1c43      	adds	r3, r0, #1
    2370:	d00d      	beq.n	238e <usbdc_cb_ctl_req+0x32>
		return true;
    2372:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2374:	2801      	cmp	r0, #1
    2376:	d00b      	beq.n	2390 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2378:	7822      	ldrb	r2, [r4, #0]
    237a:	231f      	movs	r3, #31
    237c:	0011      	movs	r1, r2
    237e:	4399      	bics	r1, r3
    2380:	d00b      	beq.n	239a <usbdc_cb_ctl_req+0x3e>
    2382:	b2cb      	uxtb	r3, r1
    2384:	2b80      	cmp	r3, #128	; 0x80
    2386:	d100      	bne.n	238a <usbdc_cb_ctl_req+0x2e>
    2388:	e0f8      	b.n	257c <usbdc_cb_ctl_req+0x220>
		return false;
    238a:	2300      	movs	r3, #0
    238c:	e000      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    238e:	2300      	movs	r3, #0
}
    2390:	0018      	movs	r0, r3
    2392:	b004      	add	sp, #16
    2394:	bc04      	pop	{r2}
    2396:	4690      	mov	r8, r2
    2398:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    239a:	7863      	ldrb	r3, [r4, #1]
    239c:	2b0b      	cmp	r3, #11
    239e:	d900      	bls.n	23a2 <usbdc_cb_ctl_req+0x46>
    23a0:	e1e4      	b.n	276c <usbdc_cb_ctl_req+0x410>
    23a2:	009b      	lsls	r3, r3, #2
    23a4:	49a7      	ldr	r1, [pc, #668]	; (2644 <usbdc_cb_ctl_req+0x2e8>)
    23a6:	58cb      	ldr	r3, [r1, r3]
    23a8:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    23aa:	2301      	movs	r3, #1
    23ac:	2200      	movs	r2, #0
    23ae:	2100      	movs	r1, #0
    23b0:	0028      	movs	r0, r5
    23b2:	4ca5      	ldr	r4, [pc, #660]	; (2648 <usbdc_cb_ctl_req+0x2ec>)
    23b4:	47a0      	blx	r4
    23b6:	4243      	negs	r3, r0
    23b8:	4143      	adcs	r3, r0
    23ba:	b2db      	uxtb	r3, r3
    23bc:	e7e8      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    23be:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    23c0:	2a00      	cmp	r2, #0
    23c2:	d01a      	beq.n	23fa <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    23c4:	4ba1      	ldr	r3, [pc, #644]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    23c6:	681b      	ldr	r3, [r3, #0]
    23c8:	6859      	ldr	r1, [r3, #4]
    23ca:	6818      	ldr	r0, [r3, #0]
    23cc:	4ba0      	ldr	r3, [pc, #640]	; (2650 <usbdc_cb_ctl_req+0x2f4>)
    23ce:	4798      	blx	r3
	if (NULL == cfg_desc) {
    23d0:	2800      	cmp	r0, #0
    23d2:	d100      	bne.n	23d6 <usbdc_cb_ctl_req+0x7a>
    23d4:	e1d4      	b.n	2780 <usbdc_cb_ctl_req+0x424>
    23d6:	78c3      	ldrb	r3, [r0, #3]
    23d8:	021b      	lsls	r3, r3, #8
    23da:	7881      	ldrb	r1, [r0, #2]
    23dc:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    23de:	b289      	uxth	r1, r1
    23e0:	1841      	adds	r1, r0, r1
    23e2:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23e4:	2204      	movs	r2, #4
    23e6:	4b9b      	ldr	r3, [pc, #620]	; (2654 <usbdc_cb_ctl_req+0x2f8>)
    23e8:	4798      	blx	r3
    23ea:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    23ec:	2800      	cmp	r0, #0
    23ee:	d006      	beq.n	23fe <usbdc_cb_ctl_req+0xa2>
    23f0:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    23f2:	4f96      	ldr	r7, [pc, #600]	; (264c <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    23f4:	4b97      	ldr	r3, [pc, #604]	; (2654 <usbdc_cb_ctl_req+0x2f8>)
    23f6:	4698      	mov	r8, r3
    23f8:	e01a      	b.n	2430 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    23fa:	4b97      	ldr	r3, [pc, #604]	; (2658 <usbdc_cb_ctl_req+0x2fc>)
    23fc:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    23fe:	2301      	movs	r3, #1
    2400:	2200      	movs	r2, #0
    2402:	2100      	movs	r1, #0
    2404:	0028      	movs	r0, r5
    2406:	4c90      	ldr	r4, [pc, #576]	; (2648 <usbdc_cb_ctl_req+0x2ec>)
    2408:	47a0      	blx	r4
    240a:	4243      	negs	r3, r0
    240c:	4143      	adcs	r3, r0
    240e:	b2db      	uxtb	r3, r3
    2410:	e7be      	b.n	2390 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    2412:	0034      	movs	r4, r6
    2414:	e000      	b.n	2418 <usbdc_cb_ctl_req+0xbc>
    2416:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    2418:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    241a:	7803      	ldrb	r3, [r0, #0]
    241c:	18c0      	adds	r0, r0, r3
    241e:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2420:	9b03      	ldr	r3, [sp, #12]
    2422:	9301      	str	r3, [sp, #4]
    2424:	2204      	movs	r2, #4
    2426:	0019      	movs	r1, r3
    2428:	47c0      	blx	r8
    242a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    242c:	2800      	cmp	r0, #0
    242e:	d0e6      	beq.n	23fe <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2430:	7886      	ldrb	r6, [r0, #2]
    2432:	42a6      	cmp	r6, r4
    2434:	d0f0      	beq.n	2418 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2436:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    2438:	2c00      	cmp	r4, #0
    243a:	d0ea      	beq.n	2412 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    243c:	aa02      	add	r2, sp, #8
    243e:	2100      	movs	r1, #0
    2440:	0020      	movs	r0, r4
    2442:	6863      	ldr	r3, [r4, #4]
    2444:	4798      	blx	r3
    2446:	2800      	cmp	r0, #0
    2448:	d0e5      	beq.n	2416 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    244a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    244c:	2c00      	cmp	r4, #0
    244e:	d1f5      	bne.n	243c <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    2450:	0034      	movs	r4, r6
    2452:	e7e1      	b.n	2418 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2454:	231f      	movs	r3, #31
    2456:	401a      	ands	r2, r3
		return false;
    2458:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    245a:	2a02      	cmp	r2, #2
    245c:	d198      	bne.n	2390 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    245e:	79a3      	ldrb	r3, [r4, #6]
    2460:	79e2      	ldrb	r2, [r4, #7]
    2462:	0212      	lsls	r2, r2, #8
    2464:	431a      	orrs	r2, r3
			return false;
    2466:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2468:	2a00      	cmp	r2, #0
    246a:	d000      	beq.n	246e <usbdc_cb_ctl_req+0x112>
    246c:	e790      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    246e:	7920      	ldrb	r0, [r4, #4]
    2470:	2100      	movs	r1, #0
    2472:	4b7a      	ldr	r3, [pc, #488]	; (265c <usbdc_cb_ctl_req+0x300>)
    2474:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2476:	2301      	movs	r3, #1
    2478:	2200      	movs	r2, #0
    247a:	2100      	movs	r1, #0
    247c:	0028      	movs	r0, r5
    247e:	4c72      	ldr	r4, [pc, #456]	; (2648 <usbdc_cb_ctl_req+0x2ec>)
    2480:	47a0      	blx	r4
		return true;
    2482:	2301      	movs	r3, #1
    2484:	e784      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2486:	231f      	movs	r3, #31
    2488:	401a      	ands	r2, r3
		return false;
    248a:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    248c:	2a02      	cmp	r2, #2
    248e:	d000      	beq.n	2492 <usbdc_cb_ctl_req+0x136>
    2490:	e77e      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    2492:	79a3      	ldrb	r3, [r4, #6]
    2494:	79e2      	ldrb	r2, [r4, #7]
    2496:	0212      	lsls	r2, r2, #8
    2498:	431a      	orrs	r2, r3
			return false;
    249a:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    249c:	2a00      	cmp	r2, #0
    249e:	d000      	beq.n	24a2 <usbdc_cb_ctl_req+0x146>
    24a0:	e776      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    24a2:	7920      	ldrb	r0, [r4, #4]
    24a4:	2101      	movs	r1, #1
    24a6:	4b6d      	ldr	r3, [pc, #436]	; (265c <usbdc_cb_ctl_req+0x300>)
    24a8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    24aa:	2301      	movs	r3, #1
    24ac:	2200      	movs	r2, #0
    24ae:	2100      	movs	r1, #0
    24b0:	0028      	movs	r0, r5
    24b2:	4c65      	ldr	r4, [pc, #404]	; (2648 <usbdc_cb_ctl_req+0x2ec>)
    24b4:	47a0      	blx	r4
		return true;
    24b6:	2301      	movs	r3, #1
    24b8:	e76a      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    24ba:	78a3      	ldrb	r3, [r4, #2]
    24bc:	78e5      	ldrb	r5, [r4, #3]
    24be:	022d      	lsls	r5, r5, #8
    24c0:	431d      	orrs	r5, r3
    24c2:	7923      	ldrb	r3, [r4, #4]
    24c4:	7964      	ldrb	r4, [r4, #5]
    24c6:	0224      	lsls	r4, r4, #8
    24c8:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    24ca:	4a60      	ldr	r2, [pc, #384]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    24cc:	6813      	ldr	r3, [r2, #0]
    24ce:	7ed2      	ldrb	r2, [r2, #27]
    24d0:	6859      	ldr	r1, [r3, #4]
    24d2:	6818      	ldr	r0, [r3, #0]
    24d4:	4b5e      	ldr	r3, [pc, #376]	; (2650 <usbdc_cb_ctl_req+0x2f4>)
    24d6:	4798      	blx	r3
	if (NULL == ifc) {
    24d8:	2800      	cmp	r0, #0
    24da:	d047      	beq.n	256c <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    24dc:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    24de:	78c3      	ldrb	r3, [r0, #3]
    24e0:	021b      	lsls	r3, r3, #8
    24e2:	7881      	ldrb	r1, [r0, #2]
    24e4:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    24e6:	b289      	uxth	r1, r1
    24e8:	1841      	adds	r1, r0, r1
    24ea:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    24ec:	2204      	movs	r2, #4
    24ee:	4b59      	ldr	r3, [pc, #356]	; (2654 <usbdc_cb_ctl_req+0x2f8>)
    24f0:	4798      	blx	r3
    24f2:	2800      	cmp	r0, #0
    24f4:	d03c      	beq.n	2570 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    24f6:	4e57      	ldr	r6, [pc, #348]	; (2654 <usbdc_cb_ctl_req+0x2f8>)
    24f8:	e008      	b.n	250c <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    24fa:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    24fc:	7803      	ldrb	r3, [r0, #0]
    24fe:	18c0      	adds	r0, r0, r3
    2500:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2502:	2204      	movs	r2, #4
    2504:	9903      	ldr	r1, [sp, #12]
    2506:	47b0      	blx	r6
		if (NULL == ifc) {
    2508:	2800      	cmp	r0, #0
    250a:	d033      	beq.n	2574 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    250c:	7883      	ldrb	r3, [r0, #2]
    250e:	42a3      	cmp	r3, r4
    2510:	d1f3      	bne.n	24fa <usbdc_cb_ctl_req+0x19e>
    2512:	78c3      	ldrb	r3, [r0, #3]
    2514:	42ab      	cmp	r3, r5
    2516:	d1f0      	bne.n	24fa <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    2518:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    251a:	4b4c      	ldr	r3, [pc, #304]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    251c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    251e:	2e00      	cmp	r6, #0
    2520:	d02a      	beq.n	2578 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2522:	aa02      	add	r2, sp, #8
    2524:	2101      	movs	r1, #1
    2526:	0030      	movs	r0, r6
    2528:	6873      	ldr	r3, [r6, #4]
    252a:	4798      	blx	r3
    252c:	2800      	cmp	r0, #0
    252e:	d004      	beq.n	253a <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    2530:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    2532:	2e00      	cmp	r6, #0
    2534:	d1f5      	bne.n	2522 <usbdc_cb_ctl_req+0x1c6>
	return false;
    2536:	2300      	movs	r3, #0
    2538:	e72a      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    253a:	6873      	ldr	r3, [r6, #4]
    253c:	aa02      	add	r2, sp, #8
    253e:	2100      	movs	r1, #0
    2540:	0030      	movs	r0, r6
    2542:	4798      	blx	r3
			return false;
    2544:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2546:	2800      	cmp	r0, #0
    2548:	d000      	beq.n	254c <usbdc_cb_ctl_req+0x1f0>
    254a:	e721      	b.n	2390 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    254c:	2d00      	cmp	r5, #0
    254e:	d005      	beq.n	255c <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2550:	493e      	ldr	r1, [pc, #248]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    2552:	2201      	movs	r2, #1
    2554:	40a2      	lsls	r2, r4
    2556:	7f4b      	ldrb	r3, [r1, #29]
    2558:	4313      	orrs	r3, r2
    255a:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    255c:	2300      	movs	r3, #0
    255e:	2200      	movs	r2, #0
    2560:	2100      	movs	r1, #0
    2562:	2000      	movs	r0, #0
    2564:	4c38      	ldr	r4, [pc, #224]	; (2648 <usbdc_cb_ctl_req+0x2ec>)
    2566:	47a0      	blx	r4
			return true;
    2568:	2301      	movs	r3, #1
    256a:	e711      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    256c:	2300      	movs	r3, #0
    256e:	e70f      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    2570:	2300      	movs	r3, #0
    2572:	e70d      	b.n	2390 <usbdc_cb_ctl_req+0x34>
			return false;
    2574:	2300      	movs	r3, #0
    2576:	e70b      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	return false;
    2578:	2300      	movs	r3, #0
    257a:	e709      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    257c:	7863      	ldrb	r3, [r4, #1]
    257e:	2b06      	cmp	r3, #6
    2580:	d033      	beq.n	25ea <usbdc_cb_ctl_req+0x28e>
    2582:	b2d9      	uxtb	r1, r3
    2584:	2906      	cmp	r1, #6
    2586:	d922      	bls.n	25ce <usbdc_cb_ctl_req+0x272>
    2588:	2b08      	cmp	r3, #8
    258a:	d100      	bne.n	258e <usbdc_cb_ctl_req+0x232>
    258c:	e0af      	b.n	26ee <usbdc_cb_ctl_req+0x392>
    258e:	2b0a      	cmp	r3, #10
    2590:	d000      	beq.n	2594 <usbdc_cb_ctl_req+0x238>
    2592:	e0ed      	b.n	2770 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2594:	4b2d      	ldr	r3, [pc, #180]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    2596:	7f5a      	ldrb	r2, [r3, #29]
    2598:	7921      	ldrb	r1, [r4, #4]
    259a:	7963      	ldrb	r3, [r4, #5]
    259c:	021b      	lsls	r3, r3, #8
    259e:	430b      	orrs	r3, r1
    25a0:	411a      	asrs	r2, r3
    25a2:	07d3      	lsls	r3, r2, #31
    25a4:	d400      	bmi.n	25a8 <usbdc_cb_ctl_req+0x24c>
    25a6:	e0ca      	b.n	273e <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    25a8:	4b28      	ldr	r3, [pc, #160]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    25aa:	691d      	ldr	r5, [r3, #16]
	return false;
    25ac:	2300      	movs	r3, #0
	while (NULL != func) {
    25ae:	2d00      	cmp	r5, #0
    25b0:	d100      	bne.n	25b4 <usbdc_cb_ctl_req+0x258>
    25b2:	e6ed      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    25b4:	0022      	movs	r2, r4
    25b6:	2102      	movs	r1, #2
    25b8:	0028      	movs	r0, r5
    25ba:	686b      	ldr	r3, [r5, #4]
    25bc:	4798      	blx	r3
    25be:	2800      	cmp	r0, #0
    25c0:	db00      	blt.n	25c4 <usbdc_cb_ctl_req+0x268>
    25c2:	e0c8      	b.n	2756 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    25c4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    25c6:	2d00      	cmp	r5, #0
    25c8:	d1f4      	bne.n	25b4 <usbdc_cb_ctl_req+0x258>
	return false;
    25ca:	2300      	movs	r3, #0
    25cc:	e6e0      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    25ce:	2b00      	cmp	r3, #0
    25d0:	d000      	beq.n	25d4 <usbdc_cb_ctl_req+0x278>
    25d2:	e0cd      	b.n	2770 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    25d4:	231f      	movs	r3, #31
    25d6:	401a      	ands	r2, r3
    25d8:	b2d3      	uxtb	r3, r2
    25da:	2b01      	cmp	r3, #1
    25dc:	d800      	bhi.n	25e0 <usbdc_cb_ctl_req+0x284>
    25de:	e092      	b.n	2706 <usbdc_cb_ctl_req+0x3aa>
    25e0:	2a02      	cmp	r2, #2
    25e2:	d100      	bne.n	25e6 <usbdc_cb_ctl_req+0x28a>
    25e4:	e09f      	b.n	2726 <usbdc_cb_ctl_req+0x3ca>
		return false;
    25e6:	2300      	movs	r3, #0
    25e8:	e6d2      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    25ea:	78a3      	ldrb	r3, [r4, #2]
    25ec:	78e2      	ldrb	r2, [r4, #3]
    25ee:	0212      	lsls	r2, r2, #8
    25f0:	431a      	orrs	r2, r3
    25f2:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    25f4:	2b02      	cmp	r3, #2
    25f6:	d033      	beq.n	2660 <usbdc_cb_ctl_req+0x304>
    25f8:	2b03      	cmp	r3, #3
    25fa:	d056      	beq.n	26aa <usbdc_cb_ctl_req+0x34e>
    25fc:	2b01      	cmp	r3, #1
    25fe:	d001      	beq.n	2604 <usbdc_cb_ctl_req+0x2a8>
	return false;
    2600:	2300      	movs	r3, #0
    2602:	e6c5      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    2604:	79a2      	ldrb	r2, [r4, #6]
    2606:	79e3      	ldrb	r3, [r4, #7]
    2608:	021b      	lsls	r3, r3, #8
    260a:	4313      	orrs	r3, r2
    260c:	1c1a      	adds	r2, r3, #0
    260e:	2b12      	cmp	r3, #18
    2610:	d900      	bls.n	2614 <usbdc_cb_ctl_req+0x2b8>
    2612:	2212      	movs	r2, #18
    2614:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2616:	4b0d      	ldr	r3, [pc, #52]	; (264c <usbdc_cb_ctl_req+0x2f0>)
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	6859      	ldr	r1, [r3, #4]
    261c:	6818      	ldr	r0, [r3, #0]
    261e:	2201      	movs	r2, #1
    2620:	4b0c      	ldr	r3, [pc, #48]	; (2654 <usbdc_cb_ctl_req+0x2f8>)
    2622:	4798      	blx	r3
	if (!dev_desc) {
    2624:	2800      	cmp	r0, #0
    2626:	d100      	bne.n	262a <usbdc_cb_ctl_req+0x2ce>
    2628:	e0a4      	b.n	2774 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    262a:	2300      	movs	r3, #0
    262c:	0022      	movs	r2, r4
    262e:	0001      	movs	r1, r0
    2630:	0028      	movs	r0, r5
    2632:	4c05      	ldr	r4, [pc, #20]	; (2648 <usbdc_cb_ctl_req+0x2ec>)
    2634:	47a0      	blx	r4
    2636:	4243      	negs	r3, r0
    2638:	4143      	adcs	r3, r0
    263a:	b2db      	uxtb	r3, r3
    263c:	e6a8      	b.n	2390 <usbdc_cb_ctl_req+0x34>
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	000021e5 	.word	0x000021e5
    2644:	00002b64 	.word	0x00002b64
    2648:	00002341 	.word	0x00002341
    264c:	20000598 	.word	0x20000598
    2650:	00002929 	.word	0x00002929
    2654:	000028ad 	.word	0x000028ad
    2658:	0000219d 	.word	0x0000219d
    265c:	00000829 	.word	0x00000829
	uint16_t length   = req->wLength;
    2660:	79a3      	ldrb	r3, [r4, #6]
    2662:	79e6      	ldrb	r6, [r4, #7]
    2664:	0236      	lsls	r6, r6, #8
    2666:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2668:	4b46      	ldr	r3, [pc, #280]	; (2784 <usbdc_cb_ctl_req+0x428>)
    266a:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	3201      	adds	r2, #1
    2670:	b2d2      	uxtb	r2, r2
    2672:	6859      	ldr	r1, [r3, #4]
    2674:	6818      	ldr	r0, [r3, #0]
    2676:	4b44      	ldr	r3, [pc, #272]	; (2788 <usbdc_cb_ctl_req+0x42c>)
    2678:	4798      	blx	r3
    267a:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    267c:	d07c      	beq.n	2778 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    267e:	78c3      	ldrb	r3, [r0, #3]
    2680:	021b      	lsls	r3, r3, #8
    2682:	7884      	ldrb	r4, [r0, #2]
    2684:	18e4      	adds	r4, r4, r3
    2686:	b2a4      	uxth	r4, r4
		need_zlp = false;
    2688:	2300      	movs	r3, #0
	if (length <= total_len) {
    268a:	42a6      	cmp	r6, r4
    268c:	d905      	bls.n	269a <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    268e:	3f01      	subs	r7, #1
    2690:	403e      	ands	r6, r7
    2692:	4273      	negs	r3, r6
    2694:	4173      	adcs	r3, r6
    2696:	b2db      	uxtb	r3, r3
		length = total_len;
    2698:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    269a:	0032      	movs	r2, r6
    269c:	0028      	movs	r0, r5
    269e:	4c3b      	ldr	r4, [pc, #236]	; (278c <usbdc_cb_ctl_req+0x430>)
    26a0:	47a0      	blx	r4
    26a2:	4243      	negs	r3, r0
    26a4:	4143      	adcs	r3, r0
    26a6:	b2db      	uxtb	r3, r3
    26a8:	e672      	b.n	2390 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    26aa:	79a3      	ldrb	r3, [r4, #6]
    26ac:	79e1      	ldrb	r1, [r4, #7]
    26ae:	0209      	lsls	r1, r1, #8
    26b0:	4319      	orrs	r1, r3
    26b2:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    26b4:	4b33      	ldr	r3, [pc, #204]	; (2784 <usbdc_cb_ctl_req+0x428>)
    26b6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    26b8:	681b      	ldr	r3, [r3, #0]
    26ba:	b2d2      	uxtb	r2, r2
    26bc:	6859      	ldr	r1, [r3, #4]
    26be:	6818      	ldr	r0, [r3, #0]
    26c0:	4b33      	ldr	r3, [pc, #204]	; (2790 <usbdc_cb_ctl_req+0x434>)
    26c2:	4798      	blx	r3
    26c4:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    26c6:	d059      	beq.n	277c <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    26c8:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    26ca:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    26cc:	4294      	cmp	r4, r2
    26ce:	d906      	bls.n	26de <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    26d0:	1e73      	subs	r3, r6, #1
    26d2:	4023      	ands	r3, r4
    26d4:	0018      	movs	r0, r3
    26d6:	4243      	negs	r3, r0
    26d8:	4143      	adcs	r3, r0
    26da:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    26dc:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    26de:	0022      	movs	r2, r4
    26e0:	0028      	movs	r0, r5
    26e2:	4c2a      	ldr	r4, [pc, #168]	; (278c <usbdc_cb_ctl_req+0x430>)
    26e4:	47a0      	blx	r4
    26e6:	4243      	negs	r3, r0
    26e8:	4143      	adcs	r3, r0
    26ea:	b2db      	uxtb	r3, r3
    26ec:	e650      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    26ee:	4b25      	ldr	r3, [pc, #148]	; (2784 <usbdc_cb_ctl_req+0x428>)
    26f0:	7eda      	ldrb	r2, [r3, #27]
    26f2:	6959      	ldr	r1, [r3, #20]
    26f4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    26f6:	6959      	ldr	r1, [r3, #20]
    26f8:	2300      	movs	r3, #0
    26fa:	2201      	movs	r2, #1
    26fc:	0028      	movs	r0, r5
    26fe:	4c23      	ldr	r4, [pc, #140]	; (278c <usbdc_cb_ctl_req+0x430>)
    2700:	47a0      	blx	r4
		return true;
    2702:	2301      	movs	r3, #1
    2704:	e644      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		st = 0;
    2706:	2300      	movs	r3, #0
    2708:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    270a:	4c1e      	ldr	r4, [pc, #120]	; (2784 <usbdc_cb_ctl_req+0x428>)
    270c:	2202      	movs	r2, #2
    270e:	a902      	add	r1, sp, #8
    2710:	6960      	ldr	r0, [r4, #20]
    2712:	4b20      	ldr	r3, [pc, #128]	; (2794 <usbdc_cb_ctl_req+0x438>)
    2714:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2716:	6961      	ldr	r1, [r4, #20]
    2718:	2300      	movs	r3, #0
    271a:	2202      	movs	r2, #2
    271c:	0028      	movs	r0, r5
    271e:	4c1b      	ldr	r4, [pc, #108]	; (278c <usbdc_cb_ctl_req+0x430>)
    2720:	47a0      	blx	r4
	return true;
    2722:	2301      	movs	r3, #1
    2724:	e634      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2726:	7920      	ldrb	r0, [r4, #4]
    2728:	2102      	movs	r1, #2
    272a:	4b1b      	ldr	r3, [pc, #108]	; (2798 <usbdc_cb_ctl_req+0x43c>)
    272c:	4798      	blx	r3
		if (st < 0) {
    272e:	2800      	cmp	r0, #0
    2730:	db03      	blt.n	273a <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    2732:	2301      	movs	r3, #1
    2734:	4018      	ands	r0, r3
    2736:	9002      	str	r0, [sp, #8]
    2738:	e7e7      	b.n	270a <usbdc_cb_ctl_req+0x3ae>
			return false;
    273a:	2300      	movs	r3, #0
    273c:	e628      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    273e:	4b11      	ldr	r3, [pc, #68]	; (2784 <usbdc_cb_ctl_req+0x428>)
    2740:	2200      	movs	r2, #0
    2742:	6959      	ldr	r1, [r3, #20]
    2744:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2746:	6959      	ldr	r1, [r3, #20]
    2748:	2300      	movs	r3, #0
    274a:	3201      	adds	r2, #1
    274c:	2000      	movs	r0, #0
    274e:	4c0f      	ldr	r4, [pc, #60]	; (278c <usbdc_cb_ctl_req+0x430>)
    2750:	47a0      	blx	r4
		return true;
    2752:	2301      	movs	r3, #1
    2754:	e61c      	b.n	2390 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2756:	4b0b      	ldr	r3, [pc, #44]	; (2784 <usbdc_cb_ctl_req+0x428>)
    2758:	695a      	ldr	r2, [r3, #20]
    275a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    275c:	6959      	ldr	r1, [r3, #20]
    275e:	2300      	movs	r3, #0
    2760:	2201      	movs	r2, #1
    2762:	2000      	movs	r0, #0
    2764:	4c09      	ldr	r4, [pc, #36]	; (278c <usbdc_cb_ctl_req+0x430>)
    2766:	47a0      	blx	r4
			return true;
    2768:	2301      	movs	r3, #1
    276a:	e611      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    276c:	2300      	movs	r3, #0
    276e:	e60f      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    2770:	2300      	movs	r3, #0
    2772:	e60d      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    2774:	2300      	movs	r3, #0
    2776:	e60b      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    2778:	2300      	movs	r3, #0
    277a:	e609      	b.n	2390 <usbdc_cb_ctl_req+0x34>
		return false;
    277c:	2300      	movs	r3, #0
    277e:	e607      	b.n	2390 <usbdc_cb_ctl_req+0x34>
			return false;
    2780:	2300      	movs	r3, #0
    2782:	e605      	b.n	2390 <usbdc_cb_ctl_req+0x34>
    2784:	20000598 	.word	0x20000598
    2788:	00002929 	.word	0x00002929
    278c:	00002341 	.word	0x00002341
    2790:	00002991 	.word	0x00002991
    2794:	00002afd 	.word	0x00002afd
    2798:	00000829 	.word	0x00000829

0000279c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    279c:	b510      	push	{r4, lr}
	switch (type) {
    279e:	2801      	cmp	r0, #1
    27a0:	d009      	beq.n	27b6 <usbdc_register_handler+0x1a>
    27a2:	2800      	cmp	r0, #0
    27a4:	d002      	beq.n	27ac <usbdc_register_handler+0x10>
    27a6:	2802      	cmp	r0, #2
    27a8:	d00a      	beq.n	27c0 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    27aa:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    27ac:	4807      	ldr	r0, [pc, #28]	; (27cc <usbdc_register_handler+0x30>)
    27ae:	3004      	adds	r0, #4
    27b0:	4b07      	ldr	r3, [pc, #28]	; (27d0 <usbdc_register_handler+0x34>)
    27b2:	4798      	blx	r3
		break;
    27b4:	e7f9      	b.n	27aa <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    27b6:	4805      	ldr	r0, [pc, #20]	; (27cc <usbdc_register_handler+0x30>)
    27b8:	3008      	adds	r0, #8
    27ba:	4b05      	ldr	r3, [pc, #20]	; (27d0 <usbdc_register_handler+0x34>)
    27bc:	4798      	blx	r3
		break;
    27be:	e7f4      	b.n	27aa <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    27c0:	4802      	ldr	r0, [pc, #8]	; (27cc <usbdc_register_handler+0x30>)
    27c2:	300c      	adds	r0, #12
    27c4:	4b02      	ldr	r3, [pc, #8]	; (27d0 <usbdc_register_handler+0x34>)
    27c6:	4798      	blx	r3
}
    27c8:	e7ef      	b.n	27aa <usbdc_register_handler+0xe>
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	20000598 	.word	0x20000598
    27d0:	0000090d 	.word	0x0000090d

000027d4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    27d4:	b570      	push	{r4, r5, r6, lr}
    27d6:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    27d8:	1e43      	subs	r3, r0, #1
    27da:	4198      	sbcs	r0, r3
    27dc:	b2c0      	uxtb	r0, r0
    27de:	4a0c      	ldr	r2, [pc, #48]	; (2810 <usbdc_init+0x3c>)
    27e0:	490c      	ldr	r1, [pc, #48]	; (2814 <usbdc_init+0x40>)
    27e2:	4b0d      	ldr	r3, [pc, #52]	; (2818 <usbdc_init+0x44>)
    27e4:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    27e6:	4b0d      	ldr	r3, [pc, #52]	; (281c <usbdc_init+0x48>)
    27e8:	4798      	blx	r3
	if (rc < 0) {
    27ea:	2800      	cmp	r0, #0
    27ec:	db0e      	blt.n	280c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    27ee:	4d0c      	ldr	r5, [pc, #48]	; (2820 <usbdc_init+0x4c>)
    27f0:	2220      	movs	r2, #32
    27f2:	2100      	movs	r1, #0
    27f4:	0028      	movs	r0, r5
    27f6:	4b0b      	ldr	r3, [pc, #44]	; (2824 <usbdc_init+0x50>)
    27f8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    27fa:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    27fc:	490a      	ldr	r1, [pc, #40]	; (2828 <usbdc_init+0x54>)
    27fe:	2000      	movs	r0, #0
    2800:	4c0a      	ldr	r4, [pc, #40]	; (282c <usbdc_init+0x58>)
    2802:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2804:	490a      	ldr	r1, [pc, #40]	; (2830 <usbdc_init+0x5c>)
    2806:	2001      	movs	r0, #1
    2808:	47a0      	blx	r4

	return 0;
    280a:	2000      	movs	r0, #0
}
    280c:	bd70      	pop	{r4, r5, r6, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	00000355 	.word	0x00000355
    2814:	00002b94 	.word	0x00002b94
    2818:	000008e1 	.word	0x000008e1
    281c:	0000057d 	.word	0x0000057d
    2820:	20000598 	.word	0x20000598
    2824:	00002b0f 	.word	0x00002b0f
    2828:	00002229 	.word	0x00002229
    282c:	000005f1 	.word	0x000005f1
    2830:	0000231d 	.word	0x0000231d

00002834 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2834:	b510      	push	{r4, lr}
    2836:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2838:	4802      	ldr	r0, [pc, #8]	; (2844 <usbdc_register_function+0x10>)
    283a:	3010      	adds	r0, #16
    283c:	4b02      	ldr	r3, [pc, #8]	; (2848 <usbdc_register_function+0x14>)
    283e:	4798      	blx	r3
}
    2840:	bd10      	pop	{r4, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	20000598 	.word	0x20000598
    2848:	0000090d 	.word	0x0000090d

0000284c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    284c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    284e:	4b0b      	ldr	r3, [pc, #44]	; (287c <usbdc_start+0x30>)
    2850:	7e9b      	ldrb	r3, [r3, #26]
    2852:	2b00      	cmp	r3, #0
    2854:	d10c      	bne.n	2870 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    2856:	2800      	cmp	r0, #0
    2858:	d00d      	beq.n	2876 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    285a:	4b08      	ldr	r3, [pc, #32]	; (287c <usbdc_start+0x30>)
    285c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    285e:	6802      	ldr	r2, [r0, #0]
    2860:	79d2      	ldrb	r2, [r2, #7]
    2862:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2864:	2201      	movs	r2, #1
    2866:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2868:	4b05      	ldr	r3, [pc, #20]	; (2880 <usbdc_start+0x34>)
    286a:	4798      	blx	r3
	return ERR_NONE;
    286c:	2000      	movs	r0, #0
}
    286e:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2870:	2004      	movs	r0, #4
    2872:	4240      	negs	r0, r0
    2874:	e7fb      	b.n	286e <usbdc_start+0x22>
		return ERR_BAD_DATA;
    2876:	2009      	movs	r0, #9
    2878:	4240      	negs	r0, r0
    287a:	e7f8      	b.n	286e <usbdc_start+0x22>
    287c:	20000598 	.word	0x20000598
    2880:	000005fd 	.word	0x000005fd

00002884 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2884:	b510      	push	{r4, lr}
	usb_d_attach();
    2886:	4b01      	ldr	r3, [pc, #4]	; (288c <usbdc_attach+0x8>)
    2888:	4798      	blx	r3
}
    288a:	bd10      	pop	{r4, pc}
    288c:	00000609 	.word	0x00000609

00002890 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2890:	4b01      	ldr	r3, [pc, #4]	; (2898 <usbdc_get_ctrl_buffer+0x8>)
    2892:	6958      	ldr	r0, [r3, #20]
}
    2894:	4770      	bx	lr
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	20000598 	.word	0x20000598

0000289c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    289c:	4b02      	ldr	r3, [pc, #8]	; (28a8 <usbdc_get_state+0xc>)
    289e:	7e98      	ldrb	r0, [r3, #26]
    28a0:	06c3      	lsls	r3, r0, #27
    28a2:	d500      	bpl.n	28a6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    28a4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    28a6:	4770      	bx	lr
    28a8:	20000598 	.word	0x20000598

000028ac <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    28ac:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    28ae:	4288      	cmp	r0, r1
    28b0:	d211      	bcs.n	28d6 <usb_find_desc+0x2a>
	return desc[0];
    28b2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    28b4:	2b01      	cmp	r3, #1
    28b6:	d910      	bls.n	28da <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    28b8:	7844      	ldrb	r4, [r0, #1]
    28ba:	4294      	cmp	r4, r2
    28bc:	d00a      	beq.n	28d4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    28be:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    28c0:	4281      	cmp	r1, r0
    28c2:	d906      	bls.n	28d2 <usb_find_desc+0x26>
	return desc[0];
    28c4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    28c6:	2b01      	cmp	r3, #1
    28c8:	d909      	bls.n	28de <usb_find_desc+0x32>
	return desc[1];
    28ca:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    28cc:	4294      	cmp	r4, r2
    28ce:	d1f6      	bne.n	28be <usb_find_desc+0x12>
    28d0:	e000      	b.n	28d4 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    28d2:	2000      	movs	r0, #0
}
    28d4:	bd10      	pop	{r4, pc}
	return NULL;
    28d6:	2000      	movs	r0, #0
    28d8:	e7fc      	b.n	28d4 <usb_find_desc+0x28>
		_desc_len_check();
    28da:	2000      	movs	r0, #0
    28dc:	e7fa      	b.n	28d4 <usb_find_desc+0x28>
    28de:	2000      	movs	r0, #0
    28e0:	e7f8      	b.n	28d4 <usb_find_desc+0x28>

000028e2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    28e2:	4288      	cmp	r0, r1
    28e4:	d215      	bcs.n	2912 <usb_find_ep_desc+0x30>
	return desc[0];
    28e6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    28e8:	2b01      	cmp	r3, #1
    28ea:	d914      	bls.n	2916 <usb_find_ep_desc+0x34>
	return desc[1];
    28ec:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    28ee:	2a04      	cmp	r2, #4
    28f0:	d013      	beq.n	291a <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    28f2:	2a05      	cmp	r2, #5
    28f4:	d00c      	beq.n	2910 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    28f6:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    28f8:	4281      	cmp	r1, r0
    28fa:	d908      	bls.n	290e <usb_find_ep_desc+0x2c>
	return desc[0];
    28fc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    28fe:	2b01      	cmp	r3, #1
    2900:	d90d      	bls.n	291e <usb_find_ep_desc+0x3c>
	return desc[1];
    2902:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2904:	2a04      	cmp	r2, #4
    2906:	d00c      	beq.n	2922 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2908:	2a05      	cmp	r2, #5
    290a:	d1f4      	bne.n	28f6 <usb_find_ep_desc+0x14>
    290c:	e000      	b.n	2910 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    290e:	2000      	movs	r0, #0
}
    2910:	4770      	bx	lr
	return NULL;
    2912:	2000      	movs	r0, #0
    2914:	e7fc      	b.n	2910 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2916:	2000      	movs	r0, #0
    2918:	e7fa      	b.n	2910 <usb_find_ep_desc+0x2e>
	return NULL;
    291a:	2000      	movs	r0, #0
    291c:	e7f8      	b.n	2910 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    291e:	2000      	movs	r0, #0
    2920:	e7f6      	b.n	2910 <usb_find_ep_desc+0x2e>
	return NULL;
    2922:	2000      	movs	r0, #0
    2924:	e7f4      	b.n	2910 <usb_find_ep_desc+0x2e>
	...

00002928 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2928:	b570      	push	{r4, r5, r6, lr}
    292a:	000c      	movs	r4, r1
    292c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    292e:	2202      	movs	r2, #2
    2930:	4b16      	ldr	r3, [pc, #88]	; (298c <usb_find_cfg_desc+0x64>)
    2932:	4798      	blx	r3
	if (!desc) {
    2934:	2800      	cmp	r0, #0
    2936:	d01d      	beq.n	2974 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    2938:	4284      	cmp	r4, r0
    293a:	d91c      	bls.n	2976 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    293c:	7803      	ldrb	r3, [r0, #0]
    293e:	2b01      	cmp	r3, #1
    2940:	d91b      	bls.n	297a <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    2942:	7843      	ldrb	r3, [r0, #1]
    2944:	2b02      	cmp	r3, #2
    2946:	d11a      	bne.n	297e <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    2948:	7943      	ldrb	r3, [r0, #5]
    294a:	42ab      	cmp	r3, r5
    294c:	d012      	beq.n	2974 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    294e:	78c2      	ldrb	r2, [r0, #3]
    2950:	0212      	lsls	r2, r2, #8
    2952:	7883      	ldrb	r3, [r0, #2]
    2954:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2956:	b29b      	uxth	r3, r3
    2958:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    295a:	4284      	cmp	r4, r0
    295c:	d909      	bls.n	2972 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    295e:	7803      	ldrb	r3, [r0, #0]
    2960:	2b01      	cmp	r3, #1
    2962:	d90e      	bls.n	2982 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    2964:	7843      	ldrb	r3, [r0, #1]
    2966:	2b02      	cmp	r3, #2
    2968:	d10d      	bne.n	2986 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    296a:	7943      	ldrb	r3, [r0, #5]
    296c:	42ab      	cmp	r3, r5
    296e:	d1ee      	bne.n	294e <usb_find_cfg_desc+0x26>
    2970:	e000      	b.n	2974 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2972:	2000      	movs	r0, #0
}
    2974:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    2976:	2000      	movs	r0, #0
    2978:	e7fc      	b.n	2974 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    297a:	2000      	movs	r0, #0
    297c:	e7fa      	b.n	2974 <usb_find_cfg_desc+0x4c>
	return NULL;
    297e:	2000      	movs	r0, #0
    2980:	e7f8      	b.n	2974 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2982:	2000      	movs	r0, #0
    2984:	e7f6      	b.n	2974 <usb_find_cfg_desc+0x4c>
	return NULL;
    2986:	2000      	movs	r0, #0
    2988:	e7f4      	b.n	2974 <usb_find_cfg_desc+0x4c>
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	000028ad 	.word	0x000028ad

00002990 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2992:	000d      	movs	r5, r1
    2994:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2996:	4288      	cmp	r0, r1
    2998:	d212      	bcs.n	29c0 <usb_find_str_desc+0x30>
    299a:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    299c:	4e0a      	ldr	r6, [pc, #40]	; (29c8 <usb_find_str_desc+0x38>)
    299e:	2203      	movs	r2, #3
    29a0:	0029      	movs	r1, r5
    29a2:	47b0      	blx	r6
		if (desc) {
    29a4:	2800      	cmp	r0, #0
    29a6:	d00e      	beq.n	29c6 <usb_find_str_desc+0x36>
	return desc[0];
    29a8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    29aa:	2b01      	cmp	r3, #1
    29ac:	d90a      	bls.n	29c4 <usb_find_str_desc+0x34>
			if (i == str_index) {
    29ae:	42a7      	cmp	r7, r4
    29b0:	d009      	beq.n	29c6 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    29b2:	3401      	adds	r4, #1
    29b4:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    29b6:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    29b8:	4285      	cmp	r5, r0
    29ba:	d8f0      	bhi.n	299e <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    29bc:	2000      	movs	r0, #0
    29be:	e002      	b.n	29c6 <usb_find_str_desc+0x36>
    29c0:	2000      	movs	r0, #0
    29c2:	e000      	b.n	29c6 <usb_find_str_desc+0x36>
			_desc_len_check();
    29c4:	2000      	movs	r0, #0
}
    29c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29c8:	000028ad 	.word	0x000028ad

000029cc <main>:

#include "atmel_start.h"
#include "atmel_start_pins.h"

int main(void)
{
    29cc:	b510      	push	{r4, lr}
	atmel_start_init();
    29ce:	4b03      	ldr	r3, [pc, #12]	; (29dc <main+0x10>)
    29d0:	4798      	blx	r3
	cdcd_acm_example();
    29d2:	4b03      	ldr	r3, [pc, #12]	; (29e0 <main+0x14>)
    29d4:	4798      	blx	r3
}
    29d6:	2000      	movs	r0, #0
    29d8:	bd10      	pop	{r4, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	00000115 	.word	0x00000115
    29e0:	00002a89 	.word	0x00002a89

000029e4 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    29e4:	b510      	push	{r4, lr}
    29e6:	b082      	sub	sp, #8
    29e8:	1c03      	adds	r3, r0, #0
    29ea:	aa01      	add	r2, sp, #4
    29ec:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    29ee:	07db      	lsls	r3, r3, #31
    29f0:	d402      	bmi.n	29f8 <usb_device_cb_state_c+0x14>
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	}

	/* No error. */
	return false;
}
    29f2:	2000      	movs	r0, #0
    29f4:	b002      	add	sp, #8
    29f6:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    29f8:	4905      	ldr	r1, [pc, #20]	; (2a10 <usb_device_cb_state_c+0x2c>)
    29fa:	2000      	movs	r0, #0
    29fc:	4c05      	ldr	r4, [pc, #20]	; (2a14 <usb_device_cb_state_c+0x30>)
    29fe:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    2a00:	4905      	ldr	r1, [pc, #20]	; (2a18 <usb_device_cb_state_c+0x34>)
    2a02:	2001      	movs	r0, #1
    2a04:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2a06:	2140      	movs	r1, #64	; 0x40
    2a08:	4804      	ldr	r0, [pc, #16]	; (2a1c <usb_device_cb_state_c+0x38>)
    2a0a:	4b05      	ldr	r3, [pc, #20]	; (2a20 <usb_device_cb_state_c+0x3c>)
    2a0c:	4798      	blx	r3
    2a0e:	e7f0      	b.n	29f2 <usb_device_cb_state_c+0xe>
    2a10:	00002a3d 	.word	0x00002a3d
    2a14:	00002141 	.word	0x00002141
    2a18:	00002a25 	.word	0x00002a25
    2a1c:	200005b8 	.word	0x200005b8
    2a20:	000020e9 	.word	0x000020e9

00002a24 <usb_device_cb_bulk_in>:
{
    2a24:	b510      	push	{r4, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2a26:	2140      	movs	r1, #64	; 0x40
    2a28:	4802      	ldr	r0, [pc, #8]	; (2a34 <usb_device_cb_bulk_in+0x10>)
    2a2a:	4b03      	ldr	r3, [pc, #12]	; (2a38 <usb_device_cb_bulk_in+0x14>)
    2a2c:	4798      	blx	r3
}
    2a2e:	2000      	movs	r0, #0
    2a30:	bd10      	pop	{r4, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	200005b8 	.word	0x200005b8
    2a38:	000020e9 	.word	0x000020e9

00002a3c <usb_device_cb_bulk_out>:
{
    2a3c:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    2a3e:	0011      	movs	r1, r2
    2a40:	4802      	ldr	r0, [pc, #8]	; (2a4c <usb_device_cb_bulk_out+0x10>)
    2a42:	4b03      	ldr	r3, [pc, #12]	; (2a50 <usb_device_cb_bulk_out+0x14>)
    2a44:	4798      	blx	r3
}
    2a46:	2000      	movs	r0, #0
    2a48:	bd10      	pop	{r4, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	200005b8 	.word	0x200005b8
    2a50:	00002115 	.word	0x00002115

00002a54 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2a54:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2a56:	4806      	ldr	r0, [pc, #24]	; (2a70 <cdc_device_acm_init+0x1c>)
    2a58:	3040      	adds	r0, #64	; 0x40
    2a5a:	4b06      	ldr	r3, [pc, #24]	; (2a74 <cdc_device_acm_init+0x20>)
    2a5c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2a5e:	4b06      	ldr	r3, [pc, #24]	; (2a78 <cdc_device_acm_init+0x24>)
    2a60:	4798      	blx	r3

	usbdc_start(single_desc);
    2a62:	4806      	ldr	r0, [pc, #24]	; (2a7c <cdc_device_acm_init+0x28>)
    2a64:	4b06      	ldr	r3, [pc, #24]	; (2a80 <cdc_device_acm_init+0x2c>)
    2a66:	4798      	blx	r3
	usbdc_attach();
    2a68:	4b06      	ldr	r3, [pc, #24]	; (2a84 <cdc_device_acm_init+0x30>)
    2a6a:	4798      	blx	r3
}
    2a6c:	bd10      	pop	{r4, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	200005b8 	.word	0x200005b8
    2a74:	000027d5 	.word	0x000027d5
    2a78:	000020a5 	.word	0x000020a5
    2a7c:	20000008 	.word	0x20000008
    2a80:	0000284d 	.word	0x0000284d
    2a84:	00002885 	.word	0x00002885

00002a88 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
    2a88:	b510      	push	{r4, lr}
	while (!cdcdf_acm_is_enabled()) {
    2a8a:	4c04      	ldr	r4, [pc, #16]	; (2a9c <cdcd_acm_example+0x14>)
    2a8c:	47a0      	blx	r4
    2a8e:	2800      	cmp	r0, #0
    2a90:	d0fc      	beq.n	2a8c <cdcd_acm_example+0x4>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    2a92:	4903      	ldr	r1, [pc, #12]	; (2aa0 <cdcd_acm_example+0x18>)
    2a94:	2003      	movs	r0, #3
    2a96:	4b03      	ldr	r3, [pc, #12]	; (2aa4 <cdcd_acm_example+0x1c>)
    2a98:	4798      	blx	r3
    2a9a:	e7fe      	b.n	2a9a <cdcd_acm_example+0x12>
    2a9c:	00002191 	.word	0x00002191
    2aa0:	000029e5 	.word	0x000029e5
    2aa4:	00002141 	.word	0x00002141

00002aa8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2aa8:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2aaa:	4b01      	ldr	r3, [pc, #4]	; (2ab0 <usb_init+0x8>)
    2aac:	4798      	blx	r3
}
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	00002a55 	.word	0x00002a55

00002ab4 <__libc_init_array>:
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	2600      	movs	r6, #0
    2ab8:	4d0c      	ldr	r5, [pc, #48]	; (2aec <__libc_init_array+0x38>)
    2aba:	4c0d      	ldr	r4, [pc, #52]	; (2af0 <__libc_init_array+0x3c>)
    2abc:	1b64      	subs	r4, r4, r5
    2abe:	10a4      	asrs	r4, r4, #2
    2ac0:	42a6      	cmp	r6, r4
    2ac2:	d109      	bne.n	2ad8 <__libc_init_array+0x24>
    2ac4:	2600      	movs	r6, #0
    2ac6:	f000 f871 	bl	2bac <_init>
    2aca:	4d0a      	ldr	r5, [pc, #40]	; (2af4 <__libc_init_array+0x40>)
    2acc:	4c0a      	ldr	r4, [pc, #40]	; (2af8 <__libc_init_array+0x44>)
    2ace:	1b64      	subs	r4, r4, r5
    2ad0:	10a4      	asrs	r4, r4, #2
    2ad2:	42a6      	cmp	r6, r4
    2ad4:	d105      	bne.n	2ae2 <__libc_init_array+0x2e>
    2ad6:	bd70      	pop	{r4, r5, r6, pc}
    2ad8:	00b3      	lsls	r3, r6, #2
    2ada:	58eb      	ldr	r3, [r5, r3]
    2adc:	4798      	blx	r3
    2ade:	3601      	adds	r6, #1
    2ae0:	e7ee      	b.n	2ac0 <__libc_init_array+0xc>
    2ae2:	00b3      	lsls	r3, r6, #2
    2ae4:	58eb      	ldr	r3, [r5, r3]
    2ae6:	4798      	blx	r3
    2ae8:	3601      	adds	r6, #1
    2aea:	e7f2      	b.n	2ad2 <__libc_init_array+0x1e>
    2aec:	00002bb8 	.word	0x00002bb8
    2af0:	00002bb8 	.word	0x00002bb8
    2af4:	00002bb8 	.word	0x00002bb8
    2af8:	00002bbc 	.word	0x00002bbc

00002afc <memcpy>:
    2afc:	2300      	movs	r3, #0
    2afe:	b510      	push	{r4, lr}
    2b00:	429a      	cmp	r2, r3
    2b02:	d100      	bne.n	2b06 <memcpy+0xa>
    2b04:	bd10      	pop	{r4, pc}
    2b06:	5ccc      	ldrb	r4, [r1, r3]
    2b08:	54c4      	strb	r4, [r0, r3]
    2b0a:	3301      	adds	r3, #1
    2b0c:	e7f8      	b.n	2b00 <memcpy+0x4>

00002b0e <memset>:
    2b0e:	0003      	movs	r3, r0
    2b10:	1882      	adds	r2, r0, r2
    2b12:	4293      	cmp	r3, r2
    2b14:	d100      	bne.n	2b18 <memset+0xa>
    2b16:	4770      	bx	lr
    2b18:	7019      	strb	r1, [r3, #0]
    2b1a:	3301      	adds	r3, #1
    2b1c:	e7f9      	b.n	2b12 <memset+0x4>
    2b1e:	0000      	movs	r0, r0
    2b20:	682f2e2e 	.word	0x682f2e2e
    2b24:	752f6c61 	.word	0x752f6c61
    2b28:	736c6974 	.word	0x736c6974
    2b2c:	6372732f 	.word	0x6372732f
    2b30:	6974752f 	.word	0x6974752f
    2b34:	6c5f736c 	.word	0x6c5f736c
    2b38:	2e747369 	.word	0x2e747369
    2b3c:	0063      	.short	0x0063
    2b3e:	2000      	.short	0x2000

00002b40 <_usb_ep_cfgs>:
    2b40:	0534 2000 0000 0000 0040 0000 04f4 2000     4.. ....@...... 
    2b50:	0000 0000 0040 0000 04b4 2000 0000 0000     ....@...... ....
    2b60:	0040 0000 276c 0000 2454 0000 276c 0000     @...l'..T$..l'..
    2b70:	2486 0000 276c 0000 23aa 0000 276c 0000     .$..l'...#..l'..
    2b80:	276c 0000 276c 0000 23be 0000 276c 0000     l'..l'...#..l'..
    2b90:	24ba 0000 2e2e 752f 6273 642f 7665 6369     .$..../usb/devic
    2ba0:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00002bac <_init>:
    2bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bb2:	bc08      	pop	{r3}
    2bb4:	469e      	mov	lr, r3
    2bb6:	4770      	bx	lr

00002bb8 <__init_array_start>:
    2bb8:	000000dd 	.word	0x000000dd

00002bbc <_fini>:
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bc2:	bc08      	pop	{r3}
    2bc4:	469e      	mov	lr, r3
    2bc6:	4770      	bx	lr

00002bc8 <__fini_array_start>:
    2bc8:	000000b5 	.word	0x000000b5
