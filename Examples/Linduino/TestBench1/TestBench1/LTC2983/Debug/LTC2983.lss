
LTC2983.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00001df6  00001e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  008001c6  008001c6  00001f50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000598  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c7aa  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b5a  00000000  00000000  0000ed02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003854  00000000  00000000  0001185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011bc  00000000  00000000  000150b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003162  00000000  00000000  0001626c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b57  00000000  00000000  000193ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  0001ff25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__ctors_end>
       4:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
       8:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
       c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      10:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      14:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      18:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      1c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      20:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      24:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      28:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      2c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      30:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      34:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      38:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      3c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      40:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_16>
      44:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      48:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__vector_18>
      4c:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_19>
      50:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      54:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      58:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      5c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      60:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>
      64:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	43 4f       	sbci	r20, 0xF3	; 243
      6a:	4e 46       	sbci	r20, 0x6E	; 110
      6c:	49 47       	sbci	r20, 0x79	; 121
      6e:	55 52       	subi	r21, 0x25	; 37
      70:	41 54       	subi	r20, 0x41	; 65
      72:	49 4f       	sbci	r20, 0xF9	; 249
      74:	4e 20       	and	r4, r14
      76:	45 52       	subi	r20, 0x25	; 37
      78:	52 4f       	sbci	r21, 0xF2	; 242
      7a:	52 20       	and	r5, r2
      7c:	21 21       	and	r18, r1
      7e:	21 21       	and	r18, r1
      80:	21 21       	and	r18, r1
	...

00000083 <_ZZ16print_fault_datahE3__c_7>:
      83:	49 4e 56 41 4c 49 44 20 52 45 41 44 49 4e 47 20     INVALID READING 
      93:	21 21 21 21 21 21 00                                !!!!!!.

0000009a <_ZZ16print_fault_datahE3__c_6>:
      9a:	20 20 2d 20 41 44 43 5f 52 41 4e 47 45 5f 45 52       - ADC_RANGE_ER
      aa:	52 4f 52 00                                         ROR.

000000ae <_ZZ16print_fault_datahE3__c_5>:
      ae:	20 20 2d 20 53 45 4e 53 4f 52 5f 42 45 4c 4f 57       - SENSOR_BELOW
	...

000000bf <_ZZ16print_fault_datahE3__c_4>:
      bf:	20 20 2d 20 53 45 4e 53 4f 52 5f 41 42 4f 56 45       - SENSOR_ABOVE
	...

000000d0 <_ZZ16print_fault_datahE3__c_3>:
      d0:	20 20 2d 20 43 4a 5f 53 4f 46 54 5f 46 41 49 4c       - CJ_SOFT_FAIL
      e0:	55 52 45 00                                         URE.

000000e4 <_ZZ16print_fault_datahE3__c_2>:
      e4:	20 20 2d 20 43 4a 5f 48 41 52 44 5f 46 41 49 4c       - CJ_HARD_FAIL
      f4:	55 52 45 00                                         URE.

000000f8 <_ZZ16print_fault_datahE3__c_1>:
      f8:	20 20 2d 20 41 44 43 5f 48 41 52 44 5f 46 41 49       - ADC_HARD_FAI
     108:	4c 55 52 45 00                                      LURE.

0000010d <_ZZ16print_fault_datahE3__c_0>:
     10d:	20 20 2d 20 53 45 4e 53 4f 52 20 48 41 52 44 20       - SENSOR HARD 
     11d:	46 41 4c 55 52 45 00                                FALURE.

00000124 <_ZZ16print_fault_datahE3__c>:
     124:	20 20 46 41 55 4c 54 20 44 41 54 41 20 3d 20 00       FAULT DATA = .

00000134 <_ZZ34read_voltage_or_resistance_resultshhE3__c>:
     134:	20 20 56 6f 6c 74 61 67 65 20 6f 72 20 72 65 73       Voltage or res
     144:	69 73 74 61 6e 63 65 20 3d 20 00                    istance = .

0000014f <_ZZ23print_conversion_resultmhE3__c_0>:
     14f:	20 20 44 69 72 65 63 74 20 41 44 43 20 72 65 61       Direct ADC rea
     15f:	64 69 6e 67 20 69 6e 20 56 20 3d 20 00              ding in V = .

0000016c <_ZZ23print_conversion_resultmhE3__c>:
     16c:	20 20 54 65 6d 70 65 72 61 74 75 72 65 20 3d 20       Temperature = 
	...

0000017d <_ZZ10get_resulthhhE3__c>:
     17d:	0a 43 68 61 6e 6e 65 6c 20 00                       .Channel .

00000187 <_ZZ11print_titlevE3__c_6>:
     187:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     197:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1a7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1b7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1c7:	2a 2a 0a 00                                         **..

000001cb <_ZZ11print_titlevE3__c_5>:
     1cb:	20 53 65 74 20 74 68 65 20 62 61 75 64 20 72 61      Set the baud ra
     1db:	74 65 20 74 6f 20 31 31 35 32 30 30 20 61 6e 64     te to 115200 and
     1eb:	20 73 65 6c 65 63 74 20 74 68 65 20 6e 65 77 6c      select the newl
     1fb:	69 6e 65 20 74 65 72 6d 69 6e 61 74 6f 72 2e 20     ine terminator. 
     20b:	0a 00                                               ..

0000020d <_ZZ11print_titlevE3__c_4>:
     20d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     21d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     22d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     23d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     24d:	0a 00                                               ..

0000024f <_ZZ11print_titlevE3__c_3>:
     24f:	20 74 65 6d 70 65 72 61 74 75 72 65 20 6d 65 61      temperature mea
     25f:	73 75 72 65 6d 65 6e 74 20 73 79 73 74 65 6d 2e     surement system.
     26f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     27f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     28f:	0a 00                                               ..

00000291 <_ZZ11print_titlevE3__c_2>:
     291:	20 54 68 69 73 20 70 72 6f 67 72 61 6d 20 64 65      This program de
     2a1:	6d 6f 6e 73 74 72 61 74 65 73 20 68 6f 77 20 74     monstrates how t
     2b1:	6f 20 72 65 61 64 20 74 68 65 20 6d 75 6c 74 69     o read the multi
     2c1:	2d 73 65 6e 73 6f 72 20 20 20 20 20 20 20 20 20     -sensor         
     2d1:	0a 00                                               ..

000002d3 <_ZZ11print_titlevE3__c_1>:
     2d3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2e3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2f3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     303:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     313:	0a 00                                               ..

00000315 <_ZZ11print_titlevE3__c_0>:
     315:	20 4c 54 43 32 39 38 33 20 44 65 6d 6f 6e 73 74      LTC2983 Demonst
     325:	72 61 74 69 6f 6e 20 50 72 6f 67 72 61 6d 20 20     ration Program  
     335:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     345:	20 20 20 20 0a 00                                       ..

0000034b <_ZZ11print_titlevE3__c>:
     34b:	0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     .***************
     35b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     36b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     37b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     38b:	2a 2a 2a 0a 00                                      ***..

00000390 <digital_pin_to_timer_PGM>:
     390:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3a0:	00 00 00 00                                         ....

000003a4 <digital_pin_to_bit_mask_PGM>:
     3a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3b4:	04 08 10 20                                         ... 

000003b8 <digital_pin_to_port_PGM>:
     3b8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3c8:	03 03 03 03                                         ....

000003cc <port_to_input_PGM>:
     3cc:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003d6 <port_to_output_PGM>:
     3d6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003e0 <port_to_mode_PGM>:
     3e0:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003ea <__ctors_start>:
     3ea:	0e 06       	cpc	r0, r30

000003ec <__ctors_end>:
     3ec:	11 24       	eor	r1, r1
     3ee:	1f be       	out	0x3f, r1	; 63
     3f0:	cf ef       	ldi	r28, 0xFF	; 255
     3f2:	d8 e0       	ldi	r29, 0x08	; 8
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	cd bf       	out	0x3d, r28	; 61

000003f8 <__do_copy_data>:
     3f8:	11 e0       	ldi	r17, 0x01	; 1
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b1 e0       	ldi	r27, 0x01	; 1
     3fe:	e6 ef       	ldi	r30, 0xF6	; 246
     400:	fd e1       	ldi	r31, 0x1D	; 29
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	05 90       	lpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	a6 3c       	cpi	r26, 0xC6	; 198
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	a6 ec       	ldi	r26, 0xC6	; 198
     412:	b1 e0       	ldi	r27, 0x01	; 1
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	ac 3c       	cpi	r26, 0xCC	; 204
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>

0000041e <__do_global_ctors>:
     41e:	11 e0       	ldi	r17, 0x01	; 1
     420:	c6 ef       	ldi	r28, 0xF6	; 246
     422:	d1 e0       	ldi	r29, 0x01	; 1
     424:	04 c0       	rjmp	.+8      	; 0x42e <__do_global_ctors+0x10>
     426:	21 97       	sbiw	r28, 0x01	; 1
     428:	fe 01       	movw	r30, r28
     42a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__tablejump2__>
     42e:	c5 3f       	cpi	r28, 0xF5	; 245
     430:	d1 07       	cpc	r29, r17
     432:	c9 f7       	brne	.-14     	; 0x426 <__do_global_ctors+0x8>
     434:	0e 94 3c 06 	call	0xc78	; 0xc78 <main>
     438:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <_exit>

0000043c <__bad_interrupt>:
     43c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000440 <_Z18configure_channelsv>:

  // ----- Channel 2: Assign Sense Resistor -----
  channel_assignment_data = 
    SENSOR_TYPE__SENSE_RESISTOR |
    (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
  assign_channel(CHIP_SELECT, 2, channel_assignment_data);
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e4       	ldi	r19, 0x40	; 64
     444:	4c e9       	ldi	r20, 0x9C	; 156
     446:	58 ee       	ldi	r21, 0xE8	; 232
     448:	62 e0       	ldi	r22, 0x02	; 2
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z14assign_channelhhm>
    RTD_RSENSE_CHANNEL__2 |
    RTD_NUM_WIRES__2_WIRE |
    RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
    RTD_EXCITATION_CURRENT__50UA |
    RTD_STANDARD__AMERICAN;
  assign_channel(CHIP_SELECT, 4, channel_assignment_data);
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e1       	ldi	r19, 0x10	; 16
     454:	45 e8       	ldi	r20, 0x85	; 133
     456:	50 e6       	ldi	r21, 0x60	; 96
     458:	64 e0       	ldi	r22, 0x04	; 4
     45a:	8a e0       	ldi	r24, 0x0A	; 10
     45c:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z14assign_channelhhm>
  // ----- Channel 6: Assign Sense Resistor -----
  channel_assignment_data = 
    SENSOR_TYPE__SENSE_RESISTOR |
    (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
  assign_channel(CHIP_SELECT, 6, channel_assignment_data);
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e4       	ldi	r19, 0x40	; 64
     464:	4c e9       	ldi	r20, 0x9C	; 156
     466:	58 ee       	ldi	r21, 0xE8	; 232
     468:	66 e0       	ldi	r22, 0x06	; 6
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z14assign_channelhhm>
    RTD_RSENSE_CHANNEL__6 |
    RTD_NUM_WIRES__4_WIRE |
    RTD_EXCITATION_MODE__ROTATION_SHARING |
    RTD_EXCITATION_CURRENT__50UA |
    RTD_STANDARD__AMERICAN;
  assign_channel(CHIP_SELECT, 8, channel_assignment_data);
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e1       	ldi	r19, 0x10	; 16
     474:	49 ea       	ldi	r20, 0xA9	; 169
     476:	51 e6       	ldi	r21, 0x61	; 97
     478:	68 e0       	ldi	r22, 0x08	; 8
     47a:	8a e0       	ldi	r24, 0x0A	; 10
     47c:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z14assign_channelhhm>
  // ----- Channel 13: Assign Sense Resistor -----
  channel_assignment_data = 
    SENSOR_TYPE__SENSE_RESISTOR |
    (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
  assign_channel(CHIP_SELECT, 13, channel_assignment_data);
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e4       	ldi	r19, 0x40	; 64
     484:	4c e9       	ldi	r20, 0x9C	; 156
     486:	58 ee       	ldi	r21, 0xE8	; 232
     488:	6d e0       	ldi	r22, 0x0D	; 13
     48a:	8a e0       	ldi	r24, 0x0A	; 10
     48c:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z14assign_channelhhm>
    RTD_RSENSE_CHANNEL__13 |
    RTD_NUM_WIRES__2_WIRE |
    RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
    RTD_EXCITATION_CURRENT__50UA |
    RTD_STANDARD__AMERICAN;
  assign_channel(CHIP_SELECT, 15, channel_assignment_data);
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e1       	ldi	r19, 0x10	; 16
     494:	45 e4       	ldi	r20, 0x45	; 69
     496:	53 e6       	ldi	r21, 0x63	; 99
     498:	6f e0       	ldi	r22, 0x0F	; 15
     49a:	8a e0       	ldi	r24, 0x0A	; 10
     49c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_Z14assign_channelhhm>

000004a0 <_Z27configure_global_parametersv>:

void configure_global_parameters() 
{
  // -- Set global parameters
  transfer_byte(CHIP_SELECT, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
    REJECTION__50_60_HZ);
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	40 ef       	ldi	r20, 0xF0	; 240
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	62 e0       	ldi	r22, 0x02	; 2
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	0e 94 20 04 	call	0x840	; 0x840 <_Z13transfer_bytehhjh>
  // -- Set any extra delay between conversions (in this case, 0*100us)
  transfer_byte(CHIP_SELECT, WRITE_TO_RAM, 0xFF, 0);
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	4f ef       	ldi	r20, 0xFF	; 255
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	62 e0       	ldi	r22, 0x02	; 2
     4b6:	8a e0       	ldi	r24, 0x0A	; 10
     4b8:	0c 94 20 04 	jmp	0x840	; 0x840 <_Z13transfer_bytehhjh>

000004bc <setup>:
void configure_global_parameters();


// -------------- Configure the LTC2983 -------------------------------
void setup() 
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	27 97       	sbiw	r28, 0x07	; 7
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
  char demo_name[]="DC2209";     // Demo Board Name stored in QuikEval EEPROM
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	e0 e0       	ldi	r30, 0x00	; 0
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	de 01       	movw	r26, r28
     4d8:	11 96       	adiw	r26, 0x01	; 1
     4da:	01 90       	ld	r0, Z+
     4dc:	0d 92       	st	X+, r0
     4de:	8a 95       	dec	r24
     4e0:	e1 f7       	brne	.-8      	; 0x4da <setup+0x1e>
  quikeval_I2C_init();          // Configure the EEPROM I2C port for 100kHz
     4e2:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z17quikeval_I2C_initv>
  quikeval_SPI_init();          // Configure the spi port for 4MHz SCK
     4e6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_Z17quikeval_SPI_initv>
  quikeval_SPI_connect();       // Connect SPI to main data port
     4ea:	0e 94 ae 0a 	call	0x155c	; 0x155c <_Z20quikeval_SPI_connectv>
  pinMode(CHIP_SELECT, OUTPUT); // Configure chip select pin on Linduino
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     4f6:	26 e0       	ldi	r18, 0x06	; 6
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	52 ec       	ldi	r21, 0xC2	; 194
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	86 ec       	ldi	r24, 0xC6	; 198
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN14HardwareSerial5beginEmh>

  Serial.begin(115200);         // Initialize the serial port to the PC
  print_title();
     508:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z11print_titlev>
  discover_demo_board(demo_name);
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z19discover_demo_boardPc>

  configure_channels();			
     514:	0e 94 20 02 	call	0x440	; 0x440 <_Z18configure_channelsv>
  configure_global_parameters();
     518:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_Z27configure_global_parametersv>
}
     51c:	27 96       	adiw	r28, 0x07	; 7
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <loop>:

// -------------- Run the LTC2983 -------------------------------------

void loop()
{
  measure_channel(CHIP_SELECT, 4, TEMPERATURE);      // Ch 4: RTD PT-100
     52e:	42 e0       	ldi	r20, 0x02	; 2
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	8a e0       	ldi	r24, 0x0A	; 10
     534:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_Z15measure_channelhhh>
  measure_channel(CHIP_SELECT, 8, TEMPERATURE);      // Ch 8: RTD PT-100
     538:	42 e0       	ldi	r20, 0x02	; 2
     53a:	68 e0       	ldi	r22, 0x08	; 8
     53c:	8a e0       	ldi	r24, 0x0A	; 10
     53e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_Z15measure_channelhhh>
  measure_channel(CHIP_SELECT, 15, TEMPERATURE);     // Ch 15: RTD PT-100
     542:	42 e0       	ldi	r20, 0x02	; 2
     544:	6f e0       	ldi	r22, 0x0F	; 15
     546:	8a e0       	ldi	r24, 0x0A	; 10
     548:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_Z15measure_channelhhh>

0000054c <_ZN8SPIClass8transferEh>:
    SPI.transfer((uint8_t)(coeff >> 24));
    SPI.transfer((uint8_t)(coeff >> 16));
    SPI.transfer((uint8_t)(coeff >> 8));
    SPI.transfer((uint8_t)coeff);
  }
  output_high(chip_select);
     54c:	8e bd       	out	0x2e, r24	; 46
     54e:	00 00       	nop
     550:	0d b4       	in	r0, 0x2d	; 45
     552:	07 fe       	sbrs	r0, 7
     554:	fd cf       	rjmp	.-6      	; 0x550 <_ZN8SPIClass8transferEh+0x4>
     556:	8e b5       	in	r24, 0x2e	; 46
     558:	08 95       	ret

0000055a <_Z11print_titlev>:
     55a:	6b e4       	ldi	r22, 0x4B	; 75
     55c:	73 e0       	ldi	r23, 0x03	; 3
     55e:	86 ec       	ldi	r24, 0xC6	; 198
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     566:	65 e1       	ldi	r22, 0x15	; 21
     568:	73 e0       	ldi	r23, 0x03	; 3
     56a:	86 ec       	ldi	r24, 0xC6	; 198
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     572:	63 ed       	ldi	r22, 0xD3	; 211
     574:	72 e0       	ldi	r23, 0x02	; 2
     576:	86 ec       	ldi	r24, 0xC6	; 198
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     57e:	61 e9       	ldi	r22, 0x91	; 145
     580:	72 e0       	ldi	r23, 0x02	; 2
     582:	86 ec       	ldi	r24, 0xC6	; 198
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     58a:	6f e4       	ldi	r22, 0x4F	; 79
     58c:	72 e0       	ldi	r23, 0x02	; 2
     58e:	86 ec       	ldi	r24, 0xC6	; 198
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     596:	6d e0       	ldi	r22, 0x0D	; 13
     598:	72 e0       	ldi	r23, 0x02	; 2
     59a:	86 ec       	ldi	r24, 0xC6	; 198
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     5a2:	6b ec       	ldi	r22, 0xCB	; 203
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	86 ec       	ldi	r24, 0xC6	; 198
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     5ae:	67 e8       	ldi	r22, 0x87	; 135
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	86 ec       	ldi	r24, 0xC6	; 198
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>

000005ba <_Z23print_conversion_resultmh>:
  print_fault_data(fault_data);
}


void print_conversion_result(uint32_t raw_conversion_result, uint8_t channel_output)
{
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
  int32_t signed_data = raw_conversion_result;
     5c2:	6b 01       	movw	r12, r22
     5c4:	7c 01       	movw	r14, r24
  float scaled_result;

  // Convert the 24 LSB's into a signed 32-bit integer
  if(signed_data & 0x800000)
     5c6:	e7 fe       	sbrs	r14, 7
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <_Z23print_conversion_resultmh+0x14>
    signed_data = signed_data | 0xFF000000;
     5ca:	ff 24       	eor	r15, r15
     5cc:	fa 94       	dec	r15

  // Translate and print result
  if (channel_output == TEMPERATURE)
     5ce:	42 30       	cpi	r20, 0x02	; 2
     5d0:	79 f4       	brne	.+30     	; 0x5f0 <_Z23print_conversion_resultmh+0x36>
  {
    scaled_result = float(signed_data) / 1024;
    Serial.print(F("  Temperature = "));
     5d2:	6c e6       	ldi	r22, 0x6C	; 108
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	86 ec       	ldi	r24, 0xC6	; 198
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(scaled_result);
     5de:	c7 01       	movw	r24, r14
     5e0:	b6 01       	movw	r22, r12
     5e2:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatsisf>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e8       	ldi	r20, 0x80	; 128
     5ec:	5a e3       	ldi	r21, 0x3A	; 58
     5ee:	10 c0       	rjmp	.+32     	; 0x610 <_Z23print_conversion_resultmh+0x56>
  }
  else if (channel_output == VOLTAGE)
     5f0:	41 30       	cpi	r20, 0x01	; 1
     5f2:	e1 f4       	brne	.+56     	; 0x62c <_Z23print_conversion_resultmh+0x72>
  {
    scaled_result = float(signed_data) / 2097152;
    Serial.print(F("  Direct ADC reading in V = "));
     5f4:	6f e4       	ldi	r22, 0x4F	; 79
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	86 ec       	ldi	r24, 0xC6	; 198
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(scaled_result);
     600:	c7 01       	movw	r24, r14
     602:	b6 01       	movw	r22, r12
     604:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatsisf>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	55 e3       	ldi	r21, 0x35	; 53
     610:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__mulsf3>
     614:	ab 01       	movw	r20, r22
     616:	bc 01       	movw	r22, r24
     618:	22 e0       	ldi	r18, 0x02	; 2
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	86 ec       	ldi	r24, 0xC6	; 198
     61e:	91 e0       	ldi	r25, 0x01	; 1
  }
  
}
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
  }
  else if (channel_output == VOLTAGE)
  {
    scaled_result = float(signed_data) / 2097152;
    Serial.print(F("  Direct ADC reading in V = "));
    Serial.println(scaled_result);
     628:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_ZN5Print7printlnEdi>
  }
  
}
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <_Z16print_fault_datah>:
}


// Translate the fault byte into usable fault data and print it out
void print_fault_data(uint8_t fault_byte)
{
     636:	cf 93       	push	r28
     638:	c8 2f       	mov	r28, r24
  //
  Serial.print(F("  FAULT DATA = "));
     63a:	64 e2       	ldi	r22, 0x24	; 36
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	86 ec       	ldi	r24, 0xC6	; 198
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(fault_byte, BIN);
     646:	42 e0       	ldi	r20, 0x02	; 2
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	6c 2f       	mov	r22, r28
     64c:	86 ec       	ldi	r24, 0xC6	; 198
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_ZN5Print7printlnEhi>

  if (fault_byte & SENSOR_HARD_FAILURE)
     654:	c7 ff       	sbrs	r28, 7
     656:	06 c0       	rjmp	.+12     	; 0x664 <_Z16print_fault_datah+0x2e>
    Serial.println(F("  - SENSOR HARD FALURE"));
     658:	6d e0       	ldi	r22, 0x0D	; 13
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	86 ec       	ldi	r24, 0xC6	; 198
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (fault_byte & ADC_HARD_FAILURE)
     664:	c6 ff       	sbrs	r28, 6
     666:	06 c0       	rjmp	.+12     	; 0x674 <_Z16print_fault_datah+0x3e>
    Serial.println(F("  - ADC_HARD_FAILURE"));
     668:	68 ef       	ldi	r22, 0xF8	; 248
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	86 ec       	ldi	r24, 0xC6	; 198
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (fault_byte & CJ_HARD_FAILURE)
     674:	c5 ff       	sbrs	r28, 5
     676:	06 c0       	rjmp	.+12     	; 0x684 <_Z16print_fault_datah+0x4e>
    Serial.println(F("  - CJ_HARD_FAILURE"));
     678:	64 ee       	ldi	r22, 0xE4	; 228
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	86 ec       	ldi	r24, 0xC6	; 198
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (fault_byte & CJ_SOFT_FAILURE)
     684:	c4 ff       	sbrs	r28, 4
     686:	06 c0       	rjmp	.+12     	; 0x694 <_Z16print_fault_datah+0x5e>
    Serial.println(F("  - CJ_SOFT_FAILURE"));
     688:	60 ed       	ldi	r22, 0xD0	; 208
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	86 ec       	ldi	r24, 0xC6	; 198
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (fault_byte & SENSOR_ABOVE)
     694:	c3 ff       	sbrs	r28, 3
     696:	06 c0       	rjmp	.+12     	; 0x6a4 <_Z16print_fault_datah+0x6e>
    Serial.println(F("  - SENSOR_ABOVE"));
     698:	6f eb       	ldi	r22, 0xBF	; 191
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	86 ec       	ldi	r24, 0xC6	; 198
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (fault_byte & SENSOR_BELOW)
     6a4:	c2 ff       	sbrs	r28, 2
     6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <_Z16print_fault_datah+0x7e>
    Serial.println(F("  - SENSOR_BELOW"));
     6a8:	6e ea       	ldi	r22, 0xAE	; 174
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	86 ec       	ldi	r24, 0xC6	; 198
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (fault_byte & ADC_RANGE_ERROR)
     6b4:	c1 ff       	sbrs	r28, 1
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <_Z16print_fault_datah+0x8e>
    Serial.println(F("  - ADC_RANGE_ERROR"));
     6b8:	6a e9       	ldi	r22, 0x9A	; 154
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	86 ec       	ldi	r24, 0xC6	; 198
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!(fault_byte & VALID))
     6c4:	c0 fd       	sbrc	r28, 0
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <_Z16print_fault_datah+0x98>
    Serial.println(F("INVALID READING !!!!!!"));
     6c8:	63 e8       	ldi	r22, 0x83	; 131
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <_Z16print_fault_datah+0xa0>
  if (fault_byte == 0b11111111)
     6ce:	cf 3f       	cpi	r28, 0xFF	; 255
     6d0:	39 f4       	brne	.+14     	; 0x6e0 <_Z16print_fault_datah+0xaa>
    Serial.println(F("CONFIGURATION ERROR !!!!!!"));
     6d2:	68 e6       	ldi	r22, 0x68	; 104
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	86 ec       	ldi	r24, 0xC6	; 198
     6d8:	91 e0       	ldi	r25, 0x01	; 1
}
     6da:	cf 91       	pop	r28
  if (fault_byte & ADC_RANGE_ERROR)
    Serial.println(F("  - ADC_RANGE_ERROR"));
  if (!(fault_byte & VALID))
    Serial.println(F("INVALID READING !!!!!!"));
  if (fault_byte == 0b11111111)
    Serial.println(F("CONFIGURATION ERROR !!!!!!"));
     6dc:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <_Z19transfer_four_byteshhjm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t transfer_four_bytes(uint8_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	2e 97       	sbiw	r28, 0x0e	; 14
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
  uint32_t output_data;
  uint8_t tx[7], rx[7];

  tx[6] = ram_read_or_write;
     6fc:	6e 87       	std	Y+14, r22	; 0x0e
  tx[5] = highByte(start_address);
     6fe:	5d 87       	std	Y+13, r21	; 0x0d
  tx[4] = lowByte(start_address);
     700:	4c 87       	std	Y+12, r20	; 0x0c
  tx[3] = (uint8_t)(input_data >> 24);
     702:	3b 87       	std	Y+11, r19	; 0x0b
  tx[2] = (uint8_t)(input_data >> 16);
     704:	2a 87       	std	Y+10, r18	; 0x0a
  tx[1] = (uint8_t)(input_data >> 8);
     706:	19 87       	std	Y+9, r17	; 0x09
  tx[0] = (uint8_t) input_data;
     708:	08 87       	std	Y+8, r16	; 0x08

  spi_transfer_block(chip_select, tx, rx, 7);
     70a:	27 e0       	ldi	r18, 0x07	; 7
     70c:	ae 01       	movw	r20, r28
     70e:	4f 5f       	subi	r20, 0xFF	; 255
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	be 01       	movw	r22, r28
     714:	68 5f       	subi	r22, 0xF8	; 248
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	0e 94 80 0a 	call	0x1500	; 0x1500 <_Z18spi_transfer_blockhPhS_h>

  output_data = (uint32_t) rx[3] << 24 |
                (uint32_t) rx[2] << 16 |
                (uint32_t) rx[1] << 8  |
                (uint32_t) rx[0];
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	7a 81       	ldd	r23, Y+2	; 0x02
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04

  return output_data;
}
     724:	2e 96       	adiw	r28, 0x0e	; 14
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	08 95       	ret

0000073a <_Z14assign_channelhhm>:

// ***********************
// Program the part
// ***********************
void assign_channel(uint8_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	89 01       	movw	r16, r18
     740:	9a 01       	movw	r18, r20
  uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
  transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
     742:	94 e0       	ldi	r25, 0x04	; 4
     744:	69 9f       	mul	r22, r25
     746:	a0 01       	movw	r20, r0
     748:	11 24       	eor	r1, r1
     74a:	44 50       	subi	r20, 0x04	; 4
     74c:	5e 4f       	sbci	r21, 0xFE	; 254
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z19transfer_four_byteshhjm>
}
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_Z34read_voltage_or_resistance_resultshh>:
  
}


void read_voltage_or_resistance_results(uint8_t chip_select, uint8_t channel_number)
{
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
  int32_t raw_data;
  float voltage_or_resistance_result;
  uint16_t start_address = get_start_address(VOUT_CH_BASE, channel_number);

  raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	69 9f       	mul	r22, r25
     76a:	a0 01       	movw	r20, r0
     76c:	11 24       	eor	r1, r1
     76e:	44 5a       	subi	r20, 0xA4	; 164
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	00 e0       	ldi	r16, 0x00	; 0
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	98 01       	movw	r18, r16
     778:	63 e0       	ldi	r22, 0x03	; 3
     77a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z19transfer_four_byteshhjm>
     77e:	6b 01       	movw	r12, r22
     780:	7c 01       	movw	r14, r24
  voltage_or_resistance_result = (float)raw_data/1024;
  Serial.print(F("  Voltage or resistance = "));
     782:	64 e3       	ldi	r22, 0x34	; 52
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	86 ec       	ldi	r24, 0xC6	; 198
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(voltage_or_resistance_result);
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatsisf>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5a e3       	ldi	r21, 0x3A	; 58
     79e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__mulsf3>
     7a2:	ab 01       	movw	r20, r22
     7a4:	bc 01       	movw	r22, r24
     7a6:	22 e0       	ldi	r18, 0x02	; 2
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	86 ec       	ldi	r24, 0xC6	; 198
     7ac:	91 e0       	ldi	r25, 0x01	; 1
}
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
  uint16_t start_address = get_start_address(VOUT_CH_BASE, channel_number);

  raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
  voltage_or_resistance_result = (float)raw_data/1024;
  Serial.print(F("  Voltage or resistance = "));
  Serial.println(voltage_or_resistance_result);
     7ba:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_ZN5Print7printlnEdi>

000007be <_Z10get_resulthhh>:

// *********************************
// Get results
// *********************************
void get_result(uint8_t chip_select, uint8_t channel_number, uint8_t channel_output)
{
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	d8 2f       	mov	r29, r24
     7d2:	c6 2f       	mov	r28, r22
     7d4:	b4 2e       	mov	r11, r20
  uint32_t raw_data;
  uint8_t fault_data;
  uint16_t start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
  uint32_t raw_conversion_result;

  raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
     7d6:	84 e0       	ldi	r24, 0x04	; 4
     7d8:	68 9f       	mul	r22, r24
     7da:	a0 01       	movw	r20, r0
     7dc:	11 24       	eor	r1, r1
     7de:	44 5f       	subi	r20, 0xF4	; 244
     7e0:	5f 4f       	sbci	r21, 0xFF	; 255
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	98 01       	movw	r18, r16
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	8d 2f       	mov	r24, r29
     7ec:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z19transfer_four_byteshhjm>
     7f0:	6b 01       	movw	r12, r22
     7f2:	7c 01       	movw	r14, r24

  Serial.print(F("\nChannel "));
     7f4:	6d e7       	ldi	r22, 0x7D	; 125
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	86 ec       	ldi	r24, 0xC6	; 198
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(channel_number);
     800:	4a e0       	ldi	r20, 0x0A	; 10
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	6c 2f       	mov	r22, r28
     806:	86 ec       	ldi	r24, 0xC6	; 198
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_ZN5Print7printlnEhi>

  // 24 LSB's are conversion result
  raw_conversion_result = raw_data & 0xFFFFFF;
  print_conversion_result(raw_conversion_result, channel_output);
     80e:	c7 01       	movw	r24, r14
     810:	b6 01       	movw	r22, r12
     812:	99 27       	eor	r25, r25
     814:	4b 2d       	mov	r20, r11
     816:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_Z23print_conversion_resultmh>

  // If you're interested in the raw voltage or resistance, use the following
  if (channel_output != VOLTAGE)
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	b8 16       	cp	r11, r24
     81e:	21 f0       	breq	.+8      	; 0x828 <_Z10get_resulthhh+0x6a>
  {
    read_voltage_or_resistance_results(chip_select, channel_number);
     820:	6c 2f       	mov	r22, r28
     822:	8d 2f       	mov	r24, r29
     824:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z34read_voltage_or_resistance_resultshh>
  }

  // 8 MSB's show the fault data
  fault_data = raw_data >> 24;
  print_fault_data(fault_data);
     828:	8f 2d       	mov	r24, r15
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	bf 90       	pop	r11
    read_voltage_or_resistance_results(chip_select, channel_number);
  }

  // 8 MSB's show the fault data
  fault_data = raw_data >> 24;
  print_fault_data(fault_data);
     83c:	0c 94 1b 03 	jmp	0x636	; 0x636 <_Z16print_fault_datah>

00000840 <_Z13transfer_bytehhjh>:
  return output_data;
}


uint8_t transfer_byte(uint8_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	28 97       	sbiw	r28, 0x08	; 8
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
  uint8_t tx[4], rx[4];

  tx[3] = ram_read_or_write;
     854:	68 87       	std	Y+8, r22	; 0x08
  tx[2] = (uint8_t)(start_address >> 8);
     856:	5f 83       	std	Y+7, r21	; 0x07
  tx[1] = (uint8_t)start_address;
     858:	4e 83       	std	Y+6, r20	; 0x06
  tx[0] = input_data;
     85a:	2d 83       	std	Y+5, r18	; 0x05
  spi_transfer_block(chip_select, tx, rx, 4);
     85c:	24 e0       	ldi	r18, 0x04	; 4
     85e:	ae 01       	movw	r20, r28
     860:	4f 5f       	subi	r20, 0xFF	; 255
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 80 0a 	call	0x1500	; 0x1500 <_Z18spi_transfer_blockhPhS_h>
  return rx[0];
}
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	28 96       	adiw	r28, 0x08	; 8
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <_Z26wait_for_process_to_finishh>:
  wait_for_process_to_finish(chip_select);
}


void wait_for_process_to_finish(uint8_t chip_select)
{
     882:	cf 93       	push	r28
     884:	c8 2f       	mov	r28, r24
  uint8_t process_finished = 0;
  uint8_t data;
  while (process_finished == 0)
  {
    data = transfer_byte(chip_select, READ_FROM_RAM, COMMAND_STATUS_REGISTER, 0);
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	63 e0       	ldi	r22, 0x03	; 3
     88e:	8c 2f       	mov	r24, r28
     890:	0e 94 20 04 	call	0x840	; 0x840 <_Z13transfer_bytehhjh>

void wait_for_process_to_finish(uint8_t chip_select)
{
  uint8_t process_finished = 0;
  uint8_t data;
  while (process_finished == 0)
     894:	86 ff       	sbrs	r24, 6
     896:	f7 cf       	rjmp	.-18     	; 0x886 <_Z26wait_for_process_to_finishh+0x4>
  {
    data = transfer_byte(chip_select, READ_FROM_RAM, COMMAND_STATUS_REGISTER, 0);
    process_finished  = data & 0x40;
  }
}
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <_Z15convert_channelhh>:
    get_result(chip_select, channel_number, channel_output);
}


void convert_channel(uint8_t chip_select, uint8_t channel_number)
{
     89c:	cf 93       	push	r28
     89e:	c8 2f       	mov	r28, r24
  // Start conversion
  transfer_byte(chip_select, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
     8a0:	26 2f       	mov	r18, r22
     8a2:	20 68       	ori	r18, 0x80	; 128
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	0e 94 20 04 	call	0x840	; 0x840 <_Z13transfer_bytehhjh>

  wait_for_process_to_finish(chip_select);
     8ae:	8c 2f       	mov	r24, r28
}
     8b0:	cf 91       	pop	r28
void convert_channel(uint8_t chip_select, uint8_t channel_number)
{
  // Start conversion
  transfer_byte(chip_select, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);

  wait_for_process_to_finish(chip_select);
     8b2:	0c 94 41 04 	jmp	0x882	; 0x882 <_Z26wait_for_process_to_finishh>

000008b6 <_Z15measure_channelhhh>:

// *****************
// Measure channel
// *****************
void measure_channel(uint8_t chip_select, uint8_t channel_number, uint8_t channel_output)
{
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	c8 2f       	mov	r28, r24
     8be:	d6 2f       	mov	r29, r22
     8c0:	14 2f       	mov	r17, r20
    convert_channel(chip_select, channel_number);
     8c2:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z15convert_channelhh>
    get_result(chip_select, channel_number, channel_output);
     8c6:	41 2f       	mov	r20, r17
     8c8:	6d 2f       	mov	r22, r29
     8ca:	8c 2f       	mov	r24, r28
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
// Measure channel
// *****************
void measure_channel(uint8_t chip_select, uint8_t channel_number, uint8_t channel_output)
{
    convert_channel(chip_select, channel_number);
    get_result(chip_select, channel_number, channel_output);
     8d2:	0c 94 df 03 	jmp	0x7be	; 0x7be <_Z10get_resulthhh>

000008d6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8d6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8d8:	91 8d       	ldd	r25, Z+25	; 0x19
     8da:	22 8d       	ldd	r18, Z+26	; 0x1a
     8dc:	89 2f       	mov	r24, r25
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 5c       	subi	r24, 0xC0	; 192
     8e2:	9f 4f       	sbci	r25, 0xFF	; 255
     8e4:	82 1b       	sub	r24, r18
     8e6:	91 09       	sbc	r25, r1
}
     8e8:	8f 73       	andi	r24, 0x3F	; 63
     8ea:	99 27       	eor	r25, r25
     8ec:	08 95       	ret

000008ee <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8ee:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8f0:	91 8d       	ldd	r25, Z+25	; 0x19
     8f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     8f4:	98 17       	cp	r25, r24
     8f6:	31 f0       	breq	.+12     	; 0x904 <__stack+0x5>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     8fa:	e8 0f       	add	r30, r24
     8fc:	f1 1d       	adc	r31, r1
     8fe:	85 8d       	ldd	r24, Z+29	; 0x1d
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     908:	08 95       	ret

0000090a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     90a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     90c:	91 8d       	ldd	r25, Z+25	; 0x19
     90e:	82 8d       	ldd	r24, Z+26	; 0x1a
     910:	98 17       	cp	r25, r24
     912:	61 f0       	breq	.+24     	; 0x92c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     914:	82 8d       	ldd	r24, Z+26	; 0x1a
     916:	df 01       	movw	r26, r30
     918:	a8 0f       	add	r26, r24
     91a:	b1 1d       	adc	r27, r1
     91c:	5d 96       	adiw	r26, 0x1d	; 29
     91e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     920:	92 8d       	ldd	r25, Z+26	; 0x1a
     922:	9f 5f       	subi	r25, 0xFF	; 255
     924:	9f 73       	andi	r25, 0x3F	; 63
     926:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     930:	08 95       	ret

00000932 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     932:	fc 01       	movw	r30, r24
     934:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     936:	44 8d       	ldd	r20, Z+28	; 0x1c
     938:	25 2f       	mov	r18, r21
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	84 2f       	mov	r24, r20
     93e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     940:	82 1b       	sub	r24, r18
     942:	93 0b       	sbc	r25, r19
     944:	54 17       	cp	r21, r20
     946:	10 f0       	brcs	.+4      	; 0x94c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     948:	cf 96       	adiw	r24, 0x3f	; 63
     94a:	08 95       	ret
  return tail - head - 1;
     94c:	01 97       	sbiw	r24, 0x01	; 1
}
     94e:	08 95       	ret

00000950 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	96 e0       	ldi	r25, 0x06	; 6
     954:	89 2b       	or	r24, r25
     956:	49 f0       	breq	.+18     	; 0x96a <_Z14serialEventRunv+0x1a>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	89 2b       	or	r24, r25
     95e:	29 f0       	breq	.+10     	; 0x96a <_Z14serialEventRunv+0x1a>
     960:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z17Serial0_availablev>
     964:	81 11       	cpse	r24, r1
     966:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     96a:	08 95       	ret

0000096c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     96c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     96e:	84 8d       	ldd	r24, Z+28	; 0x1c
     970:	df 01       	movw	r26, r30
     972:	a8 0f       	add	r26, r24
     974:	b1 1d       	adc	r27, r1
     976:	a3 5a       	subi	r26, 0xA3	; 163
     978:	bf 4f       	sbci	r27, 0xFF	; 255
     97a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     97c:	84 8d       	ldd	r24, Z+28	; 0x1c
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	8f 73       	andi	r24, 0x3F	; 63
     984:	99 27       	eor	r25, r25
     986:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     988:	a6 89       	ldd	r26, Z+22	; 0x16
     98a:	b7 89       	ldd	r27, Z+23	; 0x17
     98c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     98e:	a0 89       	ldd	r26, Z+16	; 0x10
     990:	b1 89       	ldd	r27, Z+17	; 0x11
     992:	8c 91       	ld	r24, X
     994:	83 70       	andi	r24, 0x03	; 3
     996:	80 64       	ori	r24, 0x40	; 64
     998:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     99a:	93 8d       	ldd	r25, Z+27	; 0x1b
     99c:	84 8d       	ldd	r24, Z+28	; 0x1c
     99e:	98 13       	cpse	r25, r24
     9a0:	06 c0       	rjmp	.+12     	; 0x9ae <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9a2:	02 88       	ldd	r0, Z+18	; 0x12
     9a4:	f3 89       	ldd	r31, Z+19	; 0x13
     9a6:	e0 2d       	mov	r30, r0
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 7d       	andi	r24, 0xDF	; 223
     9ac:	80 83       	st	Z, r24
     9ae:	08 95       	ret

000009b0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ec 01       	movw	r28, r24
  _written = true;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9c6:	98 13       	cpse	r25, r24
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <_ZN14HardwareSerial5writeEh+0x24>
     9ca:	e8 89       	ldd	r30, Y+16	; 0x10
     9cc:	f9 89       	ldd	r31, Y+17	; 0x11
     9ce:	80 81       	ld	r24, Z
     9d0:	85 fd       	sbrc	r24, 5
     9d2:	26 c0       	rjmp	.+76     	; 0xa20 <_ZN14HardwareSerial5writeEh+0x70>
     9d4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     9d6:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	0f 5f       	subi	r16, 0xFF	; 255
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	0f 73       	andi	r16, 0x3F	; 63
     9e0:	11 27       	eor	r17, r17
     9e2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     9e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9e6:	e8 12       	cpse	r14, r24
     9e8:	0c c0       	rjmp	.+24     	; 0xa02 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	07 fc       	sbrc	r0, 7
     9ee:	fa cf       	rjmp	.-12     	; 0x9e4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     9f0:	e8 89       	ldd	r30, Y+16	; 0x10
     9f2:	f9 89       	ldd	r31, Y+17	; 0x11
     9f4:	80 81       	ld	r24, Z
     9f6:	85 ff       	sbrs	r24, 5
     9f8:	f5 cf       	rjmp	.-22     	; 0x9e4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     9fa:	ce 01       	movw	r24, r28
     9fc:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a00:	f1 cf       	rjmp	.-30     	; 0x9e4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a04:	fe 01       	movw	r30, r28
     a06:	e8 0f       	add	r30, r24
     a08:	f1 1d       	adc	r31, r1
     a0a:	e3 5a       	subi	r30, 0xA3	; 163
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a10:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a12:	f8 94       	cli
    _tx_buffer_head = i;
     a14:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a16:	ea 89       	ldd	r30, Y+18	; 0x12
     a18:	fb 89       	ldd	r31, Y+19	; 0x13
     a1a:	80 81       	ld	r24, Z
     a1c:	80 62       	ori	r24, 0x20	; 32
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a20:	9f b7       	in	r25, 0x3f	; 63
     a22:	f8 94       	cli
      *_udr = c;
     a24:	ee 89       	ldd	r30, Y+22	; 0x16
     a26:	ff 89       	ldd	r31, Y+23	; 0x17
     a28:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a2a:	e8 89       	ldd	r30, Y+16	; 0x10
     a2c:	f9 89       	ldd	r31, Y+17	; 0x11
     a2e:	80 81       	ld	r24, Z
     a30:	83 70       	andi	r24, 0x03	; 3
     a32:	80 64       	ori	r24, 0x40	; 64
     a34:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a36:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a50:	88 8d       	ldd	r24, Y+24	; 0x18
     a52:	88 23       	and	r24, r24
     a54:	c9 f0       	breq	.+50     	; 0xa88 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a56:	ea 89       	ldd	r30, Y+18	; 0x12
     a58:	fb 89       	ldd	r31, Y+19	; 0x13
     a5a:	80 81       	ld	r24, Z
     a5c:	85 fd       	sbrc	r24, 5
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <_ZN14HardwareSerial5flushEv+0x20>
     a60:	a8 89       	ldd	r26, Y+16	; 0x10
     a62:	b9 89       	ldd	r27, Y+17	; 0x11
     a64:	8c 91       	ld	r24, X
     a66:	86 fd       	sbrc	r24, 6
     a68:	0f c0       	rjmp	.+30     	; 0xa88 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	07 fc       	sbrc	r0, 7
     a6e:	f5 cf       	rjmp	.-22     	; 0xa5a <_ZN14HardwareSerial5flushEv+0x10>
     a70:	80 81       	ld	r24, Z
     a72:	85 ff       	sbrs	r24, 5
     a74:	f2 cf       	rjmp	.-28     	; 0xa5a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a76:	a8 89       	ldd	r26, Y+16	; 0x10
     a78:	b9 89       	ldd	r27, Y+17	; 0x11
     a7a:	8c 91       	ld	r24, X
     a7c:	85 ff       	sbrs	r24, 5
     a7e:	ed cf       	rjmp	.-38     	; 0xa5a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a86:	e7 cf       	rjmp	.-50     	; 0xa56 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	6a 01       	movw	r12, r20
     aa0:	7b 01       	movw	r14, r22
     aa2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     aa4:	e8 89       	ldd	r30, Y+16	; 0x10
     aa6:	f9 89       	ldd	r31, Y+17	; 0x11
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     aac:	41 15       	cp	r20, r1
     aae:	51 4e       	sbci	r21, 0xE1	; 225
     ab0:	61 05       	cpc	r22, r1
     ab2:	71 05       	cpc	r23, r1
     ab4:	b1 f0       	breq	.+44     	; 0xae2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	79 e0       	ldi	r23, 0x09	; 9
     aba:	8d e3       	ldi	r24, 0x3D	; 61
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a7 01       	movw	r20, r14
     ac0:	96 01       	movw	r18, r12
     ac2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
     ac6:	da 01       	movw	r26, r20
     ac8:	c9 01       	movw	r24, r18
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	a1 09       	sbc	r26, r1
     ace:	b1 09       	sbc	r27, r1
     ad0:	b6 95       	lsr	r27
     ad2:	a7 95       	ror	r26
     ad4:	97 95       	ror	r25
     ad6:	87 95       	ror	r24
     ad8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ada:	21 15       	cp	r18, r1
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	38 07       	cpc	r19, r24
     ae0:	a8 f0       	brcs	.+42     	; 0xb0c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     ae2:	e8 89       	ldd	r30, Y+16	; 0x10
     ae4:	f9 89       	ldd	r31, Y+17	; 0x11
     ae6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ae8:	60 e8       	ldi	r22, 0x80	; 128
     aea:	74 e8       	ldi	r23, 0x84	; 132
     aec:	8e e1       	ldi	r24, 0x1E	; 30
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a7 01       	movw	r20, r14
     af2:	96 01       	movw	r18, r12
     af4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
     af8:	da 01       	movw	r26, r20
     afa:	c9 01       	movw	r24, r18
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	a1 09       	sbc	r26, r1
     b00:	b1 09       	sbc	r27, r1
     b02:	b6 95       	lsr	r27
     b04:	a7 95       	ror	r26
     b06:	97 95       	ror	r25
     b08:	87 95       	ror	r24
     b0a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b0c:	ec 85       	ldd	r30, Y+12	; 0x0c
     b0e:	fd 85       	ldd	r31, Y+13	; 0x0d
     b10:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b12:	ee 85       	ldd	r30, Y+14	; 0x0e
     b14:	ff 85       	ldd	r31, Y+15	; 0x0f
     b16:	20 83       	st	Z, r18

  _written = false;
     b18:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b1a:	ec 89       	ldd	r30, Y+20	; 0x14
     b1c:	fd 89       	ldd	r31, Y+21	; 0x15
     b1e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b20:	ea 89       	ldd	r30, Y+18	; 0x12
     b22:	fb 89       	ldd	r31, Y+19	; 0x13
     b24:	80 81       	ld	r24, Z
     b26:	80 61       	ori	r24, 0x10	; 16
     b28:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b2a:	ea 89       	ldd	r30, Y+18	; 0x12
     b2c:	fb 89       	ldd	r31, Y+19	; 0x13
     b2e:	80 81       	ld	r24, Z
     b30:	88 60       	ori	r24, 0x08	; 8
     b32:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b34:	ea 89       	ldd	r30, Y+18	; 0x12
     b36:	fb 89       	ldd	r31, Y+19	; 0x13
     b38:	80 81       	ld	r24, Z
     b3a:	80 68       	ori	r24, 0x80	; 128
     b3c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b3e:	ea 89       	ldd	r30, Y+18	; 0x12
     b40:	fb 89       	ldd	r31, Y+19	; 0x13
     b42:	80 81       	ld	r24, Z
     b44:	8f 7d       	andi	r24, 0xDF	; 223
     b46:	80 83       	st	Z, r24
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	df 90       	pop	r13
     b54:	cf 90       	pop	r12
     b56:	08 95       	ret

00000b58 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	2f 93       	push	r18
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b6c:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <__data_end+0x10>
     b70:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <__data_end+0x11>
     b74:	80 81       	ld	r24, Z
     b76:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <__data_end+0x16>
     b7a:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <__data_end+0x17>
     b7e:	82 fd       	sbrc	r24, 2
     b80:	12 c0       	rjmp	.+36     	; 0xba6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b82:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b84:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <__data_end+0x19>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b8c:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <__data_end+0x1a>
     b90:	82 17       	cp	r24, r18
     b92:	51 f0       	breq	.+20     	; 0xba8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     b94:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <__data_end+0x19>
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ea 53       	subi	r30, 0x3A	; 58
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ba0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <__data_end+0x19>
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     ba6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     bde:	86 ec       	ldi	r24, 0xC6	; 198
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	7f 91       	pop	r23
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c08:	86 ec       	ldi	r24, 0xC6	; 198
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN14HardwareSerial9availableEv>
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	89 2b       	or	r24, r25
     c14:	09 f4       	brne	.+2      	; 0xc18 <_Z17Serial0_availablev+0x10>
     c16:	20 e0       	ldi	r18, 0x00	; 0
}
     c18:	82 2f       	mov	r24, r18
     c1a:	08 95       	ret

00000c1c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c1c:	e6 ec       	ldi	r30, 0xC6	; 198
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	13 82       	std	Z+3, r1	; 0x03
     c22:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c24:	88 ee       	ldi	r24, 0xE8	; 232
     c26:	93 e0       	ldi	r25, 0x03	; 3
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	84 83       	std	Z+4, r24	; 0x04
     c2e:	95 83       	std	Z+5, r25	; 0x05
     c30:	a6 83       	std	Z+6, r26	; 0x06
     c32:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c34:	8b e0       	ldi	r24, 0x0B	; 11
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	80 83       	st	Z, r24
     c3c:	85 ec       	ldi	r24, 0xC5	; 197
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	95 87       	std	Z+13, r25	; 0x0d
     c42:	84 87       	std	Z+12, r24	; 0x0c
     c44:	84 ec       	ldi	r24, 0xC4	; 196
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	97 87       	std	Z+15, r25	; 0x0f
     c4a:	86 87       	std	Z+14, r24	; 0x0e
     c4c:	80 ec       	ldi	r24, 0xC0	; 192
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	91 8b       	std	Z+17, r25	; 0x11
     c52:	80 8b       	std	Z+16, r24	; 0x10
     c54:	81 ec       	ldi	r24, 0xC1	; 193
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	93 8b       	std	Z+19, r25	; 0x13
     c5a:	82 8b       	std	Z+18, r24	; 0x12
     c5c:	82 ec       	ldi	r24, 0xC2	; 194
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	95 8b       	std	Z+21, r25	; 0x15
     c62:	84 8b       	std	Z+20, r24	; 0x14
     c64:	86 ec       	ldi	r24, 0xC6	; 198
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	97 8b       	std	Z+23, r25	; 0x17
     c6a:	86 8b       	std	Z+22, r24	; 0x16
     c6c:	11 8e       	std	Z+25, r1	; 0x19
     c6e:	12 8e       	std	Z+26, r1	; 0x1a
     c70:	13 8e       	std	Z+27, r1	; 0x1b
     c72:	14 8e       	std	Z+28, r1	; 0x1c
     c74:	08 95       	ret

00000c76 <initVariant>:
     c76:	08 95       	ret

00000c78 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c78:	0e 94 fe 08 	call	0x11fc	; 0x11fc <init>

	initVariant();
     c7c:	0e 94 3b 06 	call	0xc76	; 0xc76 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c80:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c84:	c8 ea       	ldi	r28, 0xA8	; 168
     c86:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     c88:	0e 94 97 02 	call	0x52e	; 0x52e <loop>
		if (serialEventRun) serialEventRun();
     c8c:	20 97       	sbiw	r28, 0x00	; 0
     c8e:	e1 f3       	breq	.-8      	; 0xc88 <main+0x10>
     c90:	0e 94 a8 04 	call	0x950	; 0x950 <_Z14serialEventRunv>
     c94:	f9 cf       	rjmp	.-14     	; 0xc88 <main+0x10>

00000c96 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	6c 01       	movw	r12, r24
     ca8:	7a 01       	movw	r14, r20
     caa:	8b 01       	movw	r16, r22
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	ce 15       	cp	r28, r14
     cb2:	df 05       	cpc	r29, r15
     cb4:	81 f0       	breq	.+32     	; 0xcd6 <_ZN5Print5writeEPKhj+0x40>
     cb6:	d8 01       	movw	r26, r16
     cb8:	6d 91       	ld	r22, X+
     cba:	8d 01       	movw	r16, r26
     cbc:	d6 01       	movw	r26, r12
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	01 90       	ld	r0, Z+
     cc4:	f0 81       	ld	r31, Z
     cc6:	e0 2d       	mov	r30, r0
     cc8:	c6 01       	movw	r24, r12
     cca:	09 95       	icall
     ccc:	89 2b       	or	r24, r25
     cce:	11 f0       	breq	.+4      	; 0xcd4 <_ZN5Print5writeEPKhj+0x3e>
     cd0:	21 96       	adiw	r28, 0x01	; 1
     cd2:	ee cf       	rjmp	.-36     	; 0xcb0 <_ZN5Print5writeEPKhj+0x1a>
     cd4:	7e 01       	movw	r14, r28
     cd6:	c7 01       	movw	r24, r14
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	08 95       	ret

00000cea <_ZN5Print5writeEPKc>:
     cea:	61 15       	cp	r22, r1
     cec:	71 05       	cpc	r23, r1
     cee:	79 f0       	breq	.+30     	; 0xd0e <_ZN5Print5writeEPKc+0x24>
     cf0:	fb 01       	movw	r30, r22
     cf2:	01 90       	ld	r0, Z+
     cf4:	00 20       	and	r0, r0
     cf6:	e9 f7       	brne	.-6      	; 0xcf2 <_ZN5Print5writeEPKc+0x8>
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	af 01       	movw	r20, r30
     cfc:	46 1b       	sub	r20, r22
     cfe:	57 0b       	sbc	r21, r23
     d00:	dc 01       	movw	r26, r24
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	02 80       	ldd	r0, Z+2	; 0x02
     d08:	f3 81       	ldd	r31, Z+3	; 0x03
     d0a:	e0 2d       	mov	r30, r0
     d0c:	09 94       	ijmp
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 95       	ret

00000d14 <_ZN5Print5printEPK19__FlashStringHelper>:
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	8c 01       	movw	r16, r24
     d22:	7b 01       	movw	r14, r22
     d24:	c0 e0       	ldi	r28, 0x00	; 0
     d26:	d0 e0       	ldi	r29, 0x00	; 0
     d28:	f7 01       	movw	r30, r14
     d2a:	ec 0f       	add	r30, r28
     d2c:	fd 1f       	adc	r31, r29
     d2e:	64 91       	lpm	r22, Z
     d30:	66 23       	and	r22, r22
     d32:	61 f0       	breq	.+24     	; 0xd4c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     d34:	d8 01       	movw	r26, r16
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	01 90       	ld	r0, Z+
     d3c:	f0 81       	ld	r31, Z
     d3e:	e0 2d       	mov	r30, r0
     d40:	c8 01       	movw	r24, r16
     d42:	09 95       	icall
     d44:	89 2b       	or	r24, r25
     d46:	11 f0       	breq	.+4      	; 0xd4c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     d48:	21 96       	adiw	r28, 0x01	; 1
     d4a:	ee cf       	rjmp	.-36     	; 0xd28 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     d4c:	ce 01       	movw	r24, r28
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	08 95       	ret

00000d5c <_ZN5Print5printEPKc>:
     d5c:	0c 94 75 06 	jmp	0xcea	; 0xcea <_ZN5Print5writeEPKc>

00000d60 <_ZN5Print5printEc>:
     d60:	dc 01       	movw	r26, r24
     d62:	ed 91       	ld	r30, X+
     d64:	fc 91       	ld	r31, X
     d66:	01 90       	ld	r0, Z+
     d68:	f0 81       	ld	r31, Z
     d6a:	e0 2d       	mov	r30, r0
     d6c:	09 94       	ijmp

00000d6e <_ZN5Print7printlnEv>:
     d6e:	69 e1       	ldi	r22, 0x19	; 25
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	0c 94 75 06 	jmp	0xcea	; 0xcea <_ZN5Print5writeEPKc>

00000d76 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
     d80:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN5Print5printEPK19__FlashStringHelper>
     d84:	8c 01       	movw	r16, r24
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN5Print7printlnEv>
     d8c:	80 0f       	add	r24, r16
     d8e:	91 1f       	adc	r25, r17
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <_ZN5Print7printlnEPKc>:
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
     da4:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN5Print5writeEPKc>
     da8:	8c 01       	movw	r16, r24
     daa:	ce 01       	movw	r24, r28
     dac:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN5Print7printlnEv>
     db0:	80 0f       	add	r24, r16
     db2:	91 1f       	adc	r25, r17
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <_ZN5Print7printlnEc>:
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
     dc8:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN5Print5printEc>
     dcc:	8c 01       	movw	r16, r24
     dce:	ce 01       	movw	r24, r28
     dd0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN5Print7printlnEv>
     dd4:	80 0f       	add	r24, r16
     dd6:	91 1f       	adc	r25, r17
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <_ZN5Print11printNumberEmh>:
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	a1 97       	sbiw	r28, 0x21	; 33
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	7c 01       	movw	r14, r24
     e08:	fa 01       	movw	r30, r20
     e0a:	cb 01       	movw	r24, r22
     e0c:	19 a2       	std	Y+33, r1	; 0x21
     e0e:	22 30       	cpi	r18, 0x02	; 2
     e10:	08 f4       	brcc	.+2      	; 0xe14 <_ZN5Print11printNumberEmh+0x32>
     e12:	2a e0       	ldi	r18, 0x0A	; 10
     e14:	8e 01       	movw	r16, r28
     e16:	0f 5d       	subi	r16, 0xDF	; 223
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	82 2e       	mov	r8, r18
     e1c:	91 2c       	mov	r9, r1
     e1e:	a1 2c       	mov	r10, r1
     e20:	b1 2c       	mov	r11, r1
     e22:	bf 01       	movw	r22, r30
     e24:	a5 01       	movw	r20, r10
     e26:	94 01       	movw	r18, r8
     e28:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
     e2c:	f9 01       	movw	r30, r18
     e2e:	ca 01       	movw	r24, r20
     e30:	01 50       	subi	r16, 0x01	; 1
     e32:	11 09       	sbc	r17, r1
     e34:	6a 30       	cpi	r22, 0x0A	; 10
     e36:	10 f4       	brcc	.+4      	; 0xe3c <_ZN5Print11printNumberEmh+0x5a>
     e38:	60 5d       	subi	r22, 0xD0	; 208
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <_ZN5Print11printNumberEmh+0x5c>
     e3c:	69 5c       	subi	r22, 0xC9	; 201
     e3e:	d8 01       	movw	r26, r16
     e40:	6c 93       	st	X, r22
     e42:	23 2b       	or	r18, r19
     e44:	24 2b       	or	r18, r20
     e46:	25 2b       	or	r18, r21
     e48:	61 f7       	brne	.-40     	; 0xe22 <_ZN5Print11printNumberEmh+0x40>
     e4a:	b8 01       	movw	r22, r16
     e4c:	c7 01       	movw	r24, r14
     e4e:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN5Print5writeEPKc>
     e52:	a1 96       	adiw	r28, 0x21	; 33
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	9f 90       	pop	r9
     e70:	8f 90       	pop	r8
     e72:	08 95       	ret

00000e74 <_ZN5Print5printEmi>:
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	41 f4       	brne	.+16     	; 0xe8a <_ZN5Print5printEmi+0x16>
     e7a:	dc 01       	movw	r26, r24
     e7c:	ed 91       	ld	r30, X+
     e7e:	fc 91       	ld	r31, X
     e80:	01 90       	ld	r0, Z+
     e82:	f0 81       	ld	r31, Z
     e84:	e0 2d       	mov	r30, r0
     e86:	64 2f       	mov	r22, r20
     e88:	09 94       	ijmp
     e8a:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_ZN5Print11printNumberEmh>

00000e8e <_ZN5Print5printEhi>:
     e8e:	9a 01       	movw	r18, r20
     e90:	46 2f       	mov	r20, r22
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_ZN5Print5printEmi>

00000e9c <_ZN5Print7printlnEhi>:
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
     ea6:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN5Print5printEhi>
     eaa:	8c 01       	movw	r16, r24
     eac:	ce 01       	movw	r24, r28
     eae:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN5Print7printlnEv>
     eb2:	80 0f       	add	r24, r16
     eb4:	91 1f       	adc	r25, r17
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <_ZN5Print5printEji>:
     ec0:	9a 01       	movw	r18, r20
     ec2:	ab 01       	movw	r20, r22
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_ZN5Print5printEmi>

00000ecc <_ZN5Print10printFloatEdh>:
     ecc:	7f 92       	push	r7
     ece:	8f 92       	push	r8
     ed0:	9f 92       	push	r9
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	8c 01       	movw	r16, r24
     ee8:	6a 01       	movw	r12, r20
     eea:	7b 01       	movw	r14, r22
     eec:	72 2e       	mov	r7, r18
     eee:	9a 01       	movw	r18, r20
     ef0:	ab 01       	movw	r20, r22
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__unordsf2>
     efa:	88 23       	and	r24, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <_ZN5Print10printFloatEdh+0x38>
     efe:	6c e1       	ldi	r22, 0x1C	; 28
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	27 c0       	rjmp	.+78     	; 0xf52 <_ZN5Print10printFloatEdh+0x86>
     f04:	46 01       	movw	r8, r12
     f06:	57 01       	movw	r10, r14
     f08:	e8 94       	clt
     f0a:	b7 f8       	bld	r11, 7
     f0c:	2f ef       	ldi	r18, 0xFF	; 255
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	5f e7       	ldi	r21, 0x7F	; 127
     f14:	c5 01       	movw	r24, r10
     f16:	b4 01       	movw	r22, r8
     f18:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__unordsf2>
     f1c:	81 11       	cpse	r24, r1
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <_ZN5Print10printFloatEdh+0x6e>
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	4f e7       	ldi	r20, 0x7F	; 127
     f26:	5f e7       	ldi	r21, 0x7F	; 127
     f28:	c5 01       	movw	r24, r10
     f2a:	b4 01       	movw	r22, r8
     f2c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
     f30:	18 16       	cp	r1, r24
     f32:	1c f4       	brge	.+6      	; 0xf3a <_ZN5Print10printFloatEdh+0x6e>
     f34:	60 e2       	ldi	r22, 0x20	; 32
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <_ZN5Print10printFloatEdh+0x86>
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	5f e4       	ldi	r21, 0x4F	; 79
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__gesf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	94 f4       	brge	.+36     	; 0xf72 <_ZN5Print10printFloatEdh+0xa6>
     f4e:	64 e2       	ldi	r22, 0x24	; 36
     f50:	71 e0       	ldi	r23, 0x01	; 1
     f52:	c8 01       	movw	r24, r16
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	bf 90       	pop	r11
     f66:	af 90       	pop	r10
     f68:	9f 90       	pop	r9
     f6a:	8f 90       	pop	r8
     f6c:	7f 90       	pop	r7
     f6e:	0c 94 75 06 	jmp	0xcea	; 0xcea <_ZN5Print5writeEPKc>
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	5f ec       	ldi	r21, 0xCF	; 207
     f7a:	c7 01       	movw	r24, r14
     f7c:	b6 01       	movw	r22, r12
     f7e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
     f82:	87 fd       	sbrc	r24, 7
     f84:	e4 cf       	rjmp	.-56     	; 0xf4e <_ZN5Print10printFloatEdh+0x82>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	c7 01       	movw	r24, r14
     f8e:	b6 01       	movw	r22, r12
     f90:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
     f94:	87 ff       	sbrs	r24, 7
     f96:	0a c0       	rjmp	.+20     	; 0xfac <_ZN5Print10printFloatEdh+0xe0>
     f98:	6d e2       	ldi	r22, 0x2D	; 45
     f9a:	c8 01       	movw	r24, r16
     f9c:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN5Print5printEc>
     fa0:	ec 01       	movw	r28, r24
     fa2:	f7 fa       	bst	r15, 7
     fa4:	f0 94       	com	r15
     fa6:	f7 f8       	bld	r15, 7
     fa8:	f0 94       	com	r15
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <_ZN5Print10printFloatEdh+0xe4>
     fac:	c0 e0       	ldi	r28, 0x00	; 0
     fae:	d0 e0       	ldi	r29, 0x00	; 0
     fb0:	b1 2c       	mov	r11, r1
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	9f e3       	ldi	r25, 0x3F	; 63
     fba:	7b 14       	cp	r7, r11
     fbc:	41 f0       	breq	.+16     	; 0xfce <_ZN5Print10printFloatEdh+0x102>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divsf3>
     fca:	b3 94       	inc	r11
     fcc:	f6 cf       	rjmp	.-20     	; 0xfba <_ZN5Print10printFloatEdh+0xee>
     fce:	a7 01       	movw	r20, r14
     fd0:	96 01       	movw	r18, r12
     fd2:	0e 94 8d 0c 	call	0x191a	; 0x191a <__addsf3>
     fd6:	6b 01       	movw	r12, r22
     fd8:	7c 01       	movw	r14, r24
     fda:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixunssfsi>
     fde:	4b 01       	movw	r8, r22
     fe0:	5c 01       	movw	r10, r24
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	ab 01       	movw	r20, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	c8 01       	movw	r24, r16
     fea:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN5Print11printNumberEmh>
     fee:	c8 0f       	add	r28, r24
     ff0:	d9 1f       	adc	r29, r25
     ff2:	77 20       	and	r7, r7
     ff4:	b9 f1       	breq	.+110    	; 0x1064 <_ZN5Print10printFloatEdh+0x198>
     ff6:	c5 01       	movw	r24, r10
     ff8:	b4 01       	movw	r22, r8
     ffa:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatunsisf>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__subsf3>
    100a:	6b 01       	movw	r12, r22
    100c:	7c 01       	movw	r14, r24
    100e:	6e e2       	ldi	r22, 0x2E	; 46
    1010:	c8 01       	movw	r24, r16
    1012:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN5Print5printEc>
    1016:	c8 0f       	add	r28, r24
    1018:	d9 1f       	adc	r29, r25
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e2       	ldi	r20, 0x20	; 32
    1020:	51 e4       	ldi	r21, 0x41	; 65
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__mulsf3>
    102a:	4b 01       	movw	r8, r22
    102c:	5c 01       	movw	r10, r24
    102e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixunssfsi>
    1032:	6b 01       	movw	r12, r22
    1034:	7c 01       	movw	r14, r24
    1036:	4a e0       	ldi	r20, 0x0A	; 10
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	c8 01       	movw	r24, r16
    103c:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN5Print5printEji>
    1040:	c8 0f       	add	r28, r24
    1042:	d9 1f       	adc	r29, r25
    1044:	b6 01       	movw	r22, r12
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatunsisf>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	c5 01       	movw	r24, r10
    1054:	b4 01       	movw	r22, r8
    1056:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__subsf3>
    105a:	6b 01       	movw	r12, r22
    105c:	7c 01       	movw	r14, r24
    105e:	7a 94       	dec	r7
    1060:	71 10       	cpse	r7, r1
    1062:	db cf       	rjmp	.-74     	; 0x101a <_ZN5Print10printFloatEdh+0x14e>
    1064:	ce 01       	movw	r24, r28
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	08 95       	ret

00001082 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    108c:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN5Print10printFloatEdh>
    1090:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1092:	ce 01       	movw	r24, r28
    1094:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN5Print7printlnEv>
  return n;
}
    1098:	80 0f       	add	r24, r16
    109a:	91 1f       	adc	r25, r17
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_millis>
    10c0:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_millis+0x1>
    10c4:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <timer0_millis+0x2>
    10c8:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <timer0_millis+0x3>
    10cc:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <timer0_fract>
    10d0:	23 e0       	ldi	r18, 0x03	; 3
    10d2:	23 0f       	add	r18, r19
    10d4:	2d 37       	cpi	r18, 0x7D	; 125
    10d6:	20 f4       	brcc	.+8      	; 0x10e0 <__vector_16+0x3a>
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	a1 1d       	adc	r26, r1
    10dc:	b1 1d       	adc	r27, r1
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <__vector_16+0x44>
    10e0:	26 e8       	ldi	r18, 0x86	; 134
    10e2:	23 0f       	add	r18, r19
    10e4:	02 96       	adiw	r24, 0x02	; 2
    10e6:	a1 1d       	adc	r26, r1
    10e8:	b1 1d       	adc	r27, r1
    10ea:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <timer0_fract>
    10ee:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <timer0_millis>
    10f2:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <timer0_millis+0x1>
    10f6:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <timer0_millis+0x2>
    10fa:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <timer0_millis+0x3>
    10fe:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer0_overflow_count>
    1102:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer0_overflow_count+0x1>
    1106:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <timer0_overflow_count+0x2>
    110a:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <timer0_overflow_count+0x3>
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	a1 1d       	adc	r26, r1
    1112:	b1 1d       	adc	r27, r1
    1114:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <timer0_overflow_count>
    1118:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <timer0_overflow_count+0x1>
    111c:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <timer0_overflow_count+0x2>
    1120:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <timer0_overflow_count+0x3>
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <micros>:
    113a:	3f b7       	in	r19, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer0_overflow_count>
    1142:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer0_overflow_count+0x1>
    1146:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <timer0_overflow_count+0x2>
    114a:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <timer0_overflow_count+0x3>
    114e:	26 b5       	in	r18, 0x26	; 38
    1150:	a8 9b       	sbis	0x15, 0	; 21
    1152:	05 c0       	rjmp	.+10     	; 0x115e <micros+0x24>
    1154:	2f 3f       	cpi	r18, 0xFF	; 255
    1156:	19 f0       	breq	.+6      	; 0x115e <micros+0x24>
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	a1 1d       	adc	r26, r1
    115c:	b1 1d       	adc	r27, r1
    115e:	3f bf       	out	0x3f, r19	; 63
    1160:	ba 2f       	mov	r27, r26
    1162:	a9 2f       	mov	r26, r25
    1164:	98 2f       	mov	r25, r24
    1166:	88 27       	eor	r24, r24
    1168:	82 0f       	add	r24, r18
    116a:	91 1d       	adc	r25, r1
    116c:	a1 1d       	adc	r26, r1
    116e:	b1 1d       	adc	r27, r1
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	42 e0       	ldi	r20, 0x02	; 2
    1176:	66 0f       	add	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	4a 95       	dec	r20
    1180:	d1 f7       	brne	.-12     	; 0x1176 <micros+0x3c>
    1182:	08 95       	ret

00001184 <delay>:
    1184:	8f 92       	push	r8
    1186:	9f 92       	push	r9
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	6b 01       	movw	r12, r22
    1196:	7c 01       	movw	r14, r24
    1198:	0e 94 9d 08 	call	0x113a	; 0x113a <micros>
    119c:	4b 01       	movw	r8, r22
    119e:	5c 01       	movw	r10, r24
    11a0:	c1 14       	cp	r12, r1
    11a2:	d1 04       	cpc	r13, r1
    11a4:	e1 04       	cpc	r14, r1
    11a6:	f1 04       	cpc	r15, r1
    11a8:	01 f1       	breq	.+64     	; 0x11ea <delay+0x66>
    11aa:	0e 94 8b 0c 	call	0x1916	; 0x1916 <yield>
    11ae:	0e 94 9d 08 	call	0x113a	; 0x113a <micros>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	88 19       	sub	r24, r8
    11b8:	99 09       	sbc	r25, r9
    11ba:	aa 09       	sbc	r26, r10
    11bc:	bb 09       	sbc	r27, r11
    11be:	88 3e       	cpi	r24, 0xE8	; 232
    11c0:	93 40       	sbci	r25, 0x03	; 3
    11c2:	a1 05       	cpc	r26, r1
    11c4:	b1 05       	cpc	r27, r1
    11c6:	60 f3       	brcs	.-40     	; 0x11a0 <delay+0x1c>
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	c2 1a       	sub	r12, r18
    11cc:	d1 08       	sbc	r13, r1
    11ce:	e1 08       	sbc	r14, r1
    11d0:	f1 08       	sbc	r15, r1
    11d2:	88 ee       	ldi	r24, 0xE8	; 232
    11d4:	88 0e       	add	r8, r24
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	98 1e       	adc	r9, r24
    11da:	a1 1c       	adc	r10, r1
    11dc:	b1 1c       	adc	r11, r1
    11de:	c1 14       	cp	r12, r1
    11e0:	d1 04       	cpc	r13, r1
    11e2:	e1 04       	cpc	r14, r1
    11e4:	f1 04       	cpc	r15, r1
    11e6:	19 f7       	brne	.-58     	; 0x11ae <delay+0x2a>
    11e8:	db cf       	rjmp	.-74     	; 0x11a0 <delay+0x1c>
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	08 95       	ret

000011fc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11fc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11fe:	84 b5       	in	r24, 0x24	; 36
    1200:	82 60       	ori	r24, 0x02	; 2
    1202:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1204:	84 b5       	in	r24, 0x24	; 36
    1206:	81 60       	ori	r24, 0x01	; 1
    1208:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    120a:	85 b5       	in	r24, 0x25	; 37
    120c:	82 60       	ori	r24, 0x02	; 2
    120e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1210:	85 b5       	in	r24, 0x25	; 37
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1216:	ee e6       	ldi	r30, 0x6E	; 110
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	81 60       	ori	r24, 0x01	; 1
    121e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1220:	e1 e8       	ldi	r30, 0x81	; 129
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1226:	80 81       	ld	r24, Z
    1228:	82 60       	ori	r24, 0x02	; 2
    122a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1232:	e0 e8       	ldi	r30, 0x80	; 128
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    123c:	e1 eb       	ldi	r30, 0xB1	; 177
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	84 60       	ori	r24, 0x04	; 4
    1244:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1246:	e0 eb       	ldi	r30, 0xB0	; 176
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1250:	ea e7       	ldi	r30, 0x7A	; 122
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	84 60       	ori	r24, 0x04	; 4
    1258:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    125a:	80 81       	ld	r24, Z
    125c:	82 60       	ori	r24, 0x02	; 2
    125e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1260:	80 81       	ld	r24, Z
    1262:	81 60       	ori	r24, 0x01	; 1
    1264:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1266:	80 81       	ld	r24, Z
    1268:	80 68       	ori	r24, 0x80	; 128
    126a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    126c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1270:	08 95       	ret

00001272 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	81 f0       	breq	.+32     	; 0x1296 <turnOffPWM+0x24>
    1276:	28 f4       	brcc	.+10     	; 0x1282 <turnOffPWM+0x10>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	99 f0       	breq	.+38     	; 0x12a2 <turnOffPWM+0x30>
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	a1 f0       	breq	.+40     	; 0x12a8 <turnOffPWM+0x36>
    1280:	08 95       	ret
    1282:	87 30       	cpi	r24, 0x07	; 7
    1284:	a9 f0       	breq	.+42     	; 0x12b0 <turnOffPWM+0x3e>
    1286:	88 30       	cpi	r24, 0x08	; 8
    1288:	b9 f0       	breq	.+46     	; 0x12b8 <turnOffPWM+0x46>
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	d1 f4       	brne	.+52     	; 0x12c2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    128e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	03 c0       	rjmp	.+6      	; 0x129c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1296:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    129a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    129c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    12a0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    12a2:	84 b5       	in	r24, 0x24	; 36
    12a4:	8f 77       	andi	r24, 0x7F	; 127
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    12a8:	84 b5       	in	r24, 0x24	; 36
    12aa:	8f 7d       	andi	r24, 0xDF	; 223
    12ac:	84 bd       	out	0x24, r24	; 36
    12ae:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12b4:	8f 77       	andi	r24, 0x7F	; 127
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    12b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12bc:	8f 7d       	andi	r24, 0xDF	; 223
    12be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12c2:	08 95       	ret

000012c4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	fc 01       	movw	r30, r24
    12cc:	ec 55       	subi	r30, 0x5C	; 92
    12ce:	fc 4f       	sbci	r31, 0xFC	; 252
    12d0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    12d2:	fc 01       	movw	r30, r24
    12d4:	e8 54       	subi	r30, 0x48	; 72
    12d6:	fc 4f       	sbci	r31, 0xFC	; 252
    12d8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    12da:	88 23       	and	r24, r24
    12dc:	61 f1       	breq	.+88     	; 0x1336 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	fc 01       	movw	r30, r24
    12e6:	e0 52       	subi	r30, 0x20	; 32
    12e8:	fc 4f       	sbci	r31, 0xFC	; 252
    12ea:	c5 91       	lpm	r28, Z+
    12ec:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    12ee:	fc 01       	movw	r30, r24
    12f0:	ea 52       	subi	r30, 0x2A	; 42
    12f2:	fc 4f       	sbci	r31, 0xFC	; 252
    12f4:	a5 91       	lpm	r26, Z+
    12f6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    12f8:	61 11       	cpse	r22, r1
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    12fc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12fe:	f8 94       	cli
		*reg &= ~bit;
    1300:	88 81       	ld	r24, Y
    1302:	20 95       	com	r18
    1304:	82 23       	and	r24, r18
    1306:	88 83       	st	Y, r24
		*out &= ~bit;
    1308:	ec 91       	ld	r30, X
    130a:	2e 23       	and	r18, r30
    130c:	0b c0       	rjmp	.+22     	; 0x1324 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    130e:	62 30       	cpi	r22, 0x02	; 2
    1310:	61 f4       	brne	.+24     	; 0x132a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1312:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1314:	f8 94       	cli
		*reg &= ~bit;
    1316:	88 81       	ld	r24, Y
    1318:	32 2f       	mov	r19, r18
    131a:	30 95       	com	r19
    131c:	83 23       	and	r24, r19
    131e:	88 83       	st	Y, r24
		*out |= bit;
    1320:	ec 91       	ld	r30, X
    1322:	2e 2b       	or	r18, r30
    1324:	2c 93       	st	X, r18
		SREG = oldSREG;
    1326:	9f bf       	out	0x3f, r25	; 63
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    132a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    132c:	f8 94       	cli
		*reg |= bit;
    132e:	e8 81       	ld	r30, Y
    1330:	2e 2b       	or	r18, r30
    1332:	28 83       	st	Y, r18
		SREG = oldSREG;
    1334:	8f bf       	out	0x3f, r24	; 63
	}
}
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	f9 01       	movw	r30, r18
    1348:	e0 57       	subi	r30, 0x70	; 112
    134a:	fc 4f       	sbci	r31, 0xFC	; 252
    134c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    134e:	f9 01       	movw	r30, r18
    1350:	ec 55       	subi	r30, 0x5C	; 92
    1352:	fc 4f       	sbci	r31, 0xFC	; 252
    1354:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1356:	f9 01       	movw	r30, r18
    1358:	e8 54       	subi	r30, 0x48	; 72
    135a:	fc 4f       	sbci	r31, 0xFC	; 252
    135c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    135e:	cc 23       	and	r28, r28
    1360:	c1 f0       	breq	.+48     	; 0x1392 <digitalWrite+0x56>
    1362:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1364:	81 11       	cpse	r24, r1
    1366:	0e 94 39 09 	call	0x1272	; 0x1272 <turnOffPWM>

	out = portOutputRegister(port);
    136a:	ec 2f       	mov	r30, r28
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	ea 52       	subi	r30, 0x2A	; 42
    1374:	fc 4f       	sbci	r31, 0xFC	; 252
    1376:	a5 91       	lpm	r26, Z+
    1378:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    137a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    137c:	f8 94       	cli

	if (val == LOW) {
    137e:	11 11       	cpse	r17, r1
    1380:	04 c0       	rjmp	.+8      	; 0x138a <digitalWrite+0x4e>
		*out &= ~bit;
    1382:	8c 91       	ld	r24, X
    1384:	d0 95       	com	r29
    1386:	d8 23       	and	r29, r24
    1388:	02 c0       	rjmp	.+4      	; 0x138e <digitalWrite+0x52>
	} else {
		*out |= bit;
    138a:	ec 91       	ld	r30, X
    138c:	de 2b       	or	r29, r30
    138e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1390:	9f bf       	out	0x3f, r25	; 63
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	08 95       	ret

0000139a <digitalRead>:

int digitalRead(uint8_t pin)
{
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	f9 01       	movw	r30, r18
    13a4:	e0 57       	subi	r30, 0x70	; 112
    13a6:	fc 4f       	sbci	r31, 0xFC	; 252
    13a8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13aa:	f9 01       	movw	r30, r18
    13ac:	ec 55       	subi	r30, 0x5C	; 92
    13ae:	fc 4f       	sbci	r31, 0xFC	; 252
    13b0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13b2:	f9 01       	movw	r30, r18
    13b4:	e8 54       	subi	r30, 0x48	; 72
    13b6:	fc 4f       	sbci	r31, 0xFC	; 252
    13b8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    13ba:	cc 23       	and	r28, r28
    13bc:	91 f0       	breq	.+36     	; 0x13e2 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13be:	81 11       	cpse	r24, r1
    13c0:	0e 94 39 09 	call	0x1272	; 0x1272 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    13c4:	ec 2f       	mov	r30, r28
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	e4 53       	subi	r30, 0x34	; 52
    13ce:	fc 4f       	sbci	r31, 0xFC	; 252
    13d0:	a5 91       	lpm	r26, Z+
    13d2:	b4 91       	lpm	r27, Z
    13d4:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    13d6:	ed 23       	and	r30, r29
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <digitalRead+0x4c>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <digitalRead+0x4c>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <_Z8i2c_reada.part.0>:

  if (ret!=0)
    return(1);
  else
    return(0);                      // Success!
}
    13ec:	84 ec       	ldi	r24, 0xC4	; 196
    13ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13f2:	80 e2       	ldi	r24, 0x20	; 32
    13f4:	9e e4       	ldi	r25, 0x4E	; 78
    13f6:	25 e0       	ldi	r18, 0x05	; 5
    13f8:	2a 95       	dec	r18
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <_Z8i2c_reada.part.0+0xc>
    13fc:	00 00       	nop
    13fe:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1402:	27 fd       	sbrc	r18, 7
    1404:	02 c0       	rjmp	.+4      	; 0x140a <_Z8i2c_reada.part.0+0x1e>
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	b1 f7       	brne	.-20     	; 0x13f6 <_Z8i2c_reada.part.0+0xa>
    140a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    140e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1412:	08 95       	ret

00001414 <_Z10i2c_enablev>:
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    141a:	82 e1       	ldi	r24, 0x12	; 18
    141c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1420:	08 95       	ret

00001422 <_Z17quikeval_I2C_initv>:
    1422:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <_Z10i2c_enablev>

00001426 <_Z9i2c_startv>:
    1426:	84 ea       	ldi	r24, 0xA4	; 164
    1428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    142c:	80 e2       	ldi	r24, 0x20	; 32
    142e:	9e e4       	ldi	r25, 0x4E	; 78
    1430:	25 e0       	ldi	r18, 0x05	; 5
    1432:	2a 95       	dec	r18
    1434:	f1 f7       	brne	.-4      	; 0x1432 <_Z9i2c_startv+0xc>
    1436:	00 00       	nop
    1438:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    143c:	27 fd       	sbrc	r18, 7
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <_Z9i2c_startv+0x1e>
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	b1 f7       	brne	.-20     	; 0x1430 <_Z9i2c_startv+0xa>
    1444:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1448:	98 7f       	andi	r25, 0xF8	; 248
    144a:	98 30       	cpi	r25, 0x08	; 8
    144c:	19 f0       	breq	.+6      	; 0x1454 <_Z9i2c_startv+0x2e>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 31       	cpi	r25, 0x10	; 16
    1452:	09 f4       	brne	.+2      	; 0x1456 <_Z9i2c_startv+0x30>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	08 95       	ret

00001458 <_Z18i2c_repeated_startv>:
    1458:	84 ea       	ldi	r24, 0xA4	; 164
    145a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	9e e4       	ldi	r25, 0x4E	; 78
    1462:	25 e0       	ldi	r18, 0x05	; 5
    1464:	2a 95       	dec	r18
    1466:	f1 f7       	brne	.-4      	; 0x1464 <_Z18i2c_repeated_startv+0xc>
    1468:	00 00       	nop
    146a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    146e:	27 fd       	sbrc	r18, 7
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <_Z18i2c_repeated_startv+0x1e>
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	b1 f7       	brne	.-20     	; 0x1462 <_Z18i2c_repeated_startv+0xa>
    1476:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    147a:	98 7f       	andi	r25, 0xF8	; 248
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 31       	cpi	r25, 0x10	; 16
    1480:	09 f4       	brne	.+2      	; 0x1484 <_Z18i2c_repeated_startv+0x2c>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	08 95       	ret

00001486 <_Z8i2c_stopv>:
    1486:	84 e9       	ldi	r24, 0x94	; 148
    1488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    148c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1490:	84 fd       	sbrc	r24, 4
    1492:	fc cf       	rjmp	.-8      	; 0x148c <_Z8i2c_stopv+0x6>
    1494:	08 95       	ret

00001496 <_Z9i2c_writeh>:
    1496:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    149a:	84 e8       	ldi	r24, 0x84	; 132
    149c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14a0:	80 e2       	ldi	r24, 0x20	; 32
    14a2:	9e e4       	ldi	r25, 0x4E	; 78
    14a4:	25 e0       	ldi	r18, 0x05	; 5
    14a6:	2a 95       	dec	r18
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <_Z9i2c_writeh+0x10>
    14aa:	00 00       	nop
    14ac:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14b0:	27 fd       	sbrc	r18, 7
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <_Z9i2c_writeh+0x22>
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	b1 f7       	brne	.-20     	; 0x14a4 <_Z9i2c_writeh+0xe>
    14b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    14bc:	98 7f       	andi	r25, 0xF8	; 248
    14be:	98 32       	cpi	r25, 0x28	; 40
    14c0:	29 f0       	breq	.+10     	; 0x14cc <_Z9i2c_writeh+0x36>
    14c2:	98 31       	cpi	r25, 0x18	; 24
    14c4:	19 f0       	breq	.+6      	; 0x14cc <_Z9i2c_writeh+0x36>
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 34       	cpi	r25, 0x40	; 64
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_Z9i2c_writeh+0x38>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	08 95       	ret

000014d0 <_Z8i2c_reada>:
{
  uint8_t result;
  uint8_t return_value = 1;
  uint16_t timeout;
  uint8_t data;
  if (ack == 0)
    14d0:	81 11       	cpse	r24, r1
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <_Z8i2c_reada+0x8>
    14d4:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <_Z8i2c_reada.part.0>
    result = TWSR & 0xF8;                                   //! 5) Update status
    if (result == STATUS_READ_ACK) return_value = 0;
  }
  else
  {
    TWCR=(1<<TWINT) | (1<<TWEN);                            //! 6) START transaction with NACK
    14d8:	84 e8       	ldi	r24, 0x84	; 132
    14da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14de:	80 e2       	ldi	r24, 0x20	; 32
    14e0:	9e e4       	ldi	r25, 0x4E	; 78
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14e2:	25 e0       	ldi	r18, 0x05	; 5
    14e4:	2a 95       	dec	r18
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <_Z8i2c_reada+0x14>
    14e8:	00 00       	nop
    for (timeout = 0; timeout < HW_I2C_TIMEOUT; timeout++)
    {
      _delay_us(1);
      if (TWCR & (1 << TWINT)) break;                       //! 7) Check the TWINT bit in TWCR
    14ea:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14ee:	27 fd       	sbrc	r18, 7
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <_Z8i2c_reada+0x26>
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    if (result == STATUS_READ_ACK) return_value = 0;
  }
  else
  {
    TWCR=(1<<TWINT) | (1<<TWEN);                            //! 6) START transaction with NACK
    for (timeout = 0; timeout < HW_I2C_TIMEOUT; timeout++)
    14f4:	b1 f7       	brne	.-20     	; 0x14e2 <_Z8i2c_reada+0x12>
    {
      _delay_us(1);
      if (TWCR & (1 << TWINT)) break;                       //! 7) Check the TWINT bit in TWCR
    }
    data = TWDR;                                            //! 8) Get data
    14f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    result = TWSR & 0xF8;                                   //! 9) Update status
    14fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    if (result == STATUS_READ_NACK) return_value = 0;
  }
  return(data);
}
    14fe:	08 95       	ret

00001500 <_Z18spi_transfer_blockhPhS_h>:
  output_high(cs_pin);                        //! 4) Pull CS high
}

// Reads and sends a byte array
void spi_transfer_block(uint8_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	d8 2f       	mov	r29, r24
    1512:	8b 01       	movw	r16, r22
    1514:	7a 01       	movw	r14, r20
    1516:	c2 2f       	mov	r28, r18
  int8_t i;

  output_low(cs_pin);                 //! 1) Pull CS low
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	0e 94 9e 09 	call	0x133c	; 0x133c <digitalWrite>

  for (i=(length-1);  i >= 0; i--)
    151e:	c1 50       	subi	r28, 0x01	; 1
    1520:	c7 fd       	sbrc	r28, 7
    1522:	10 c0       	rjmp	.+32     	; 0x1544 <_Z18spi_transfer_blockhPhS_h+0x44>
    rx[i] = SPI.transfer(tx[i]);    //! 2) Read and send byte array
    1524:	8c 2f       	mov	r24, r28
    1526:	0c 2e       	mov	r0, r28
    1528:	00 0c       	add	r0, r0
    152a:	99 0b       	sbc	r25, r25
    152c:	67 01       	movw	r12, r14
    152e:	c8 0e       	add	r12, r24
    1530:	d9 1e       	adc	r13, r25
    1532:	f8 01       	movw	r30, r16
    1534:	e8 0f       	add	r30, r24
    1536:	f9 1f       	adc	r31, r25
    1538:	80 81       	ld	r24, Z
    153a:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN8SPIClass8transferEh>
    153e:	f6 01       	movw	r30, r12
    1540:	80 83       	st	Z, r24
    1542:	ed cf       	rjmp	.-38     	; 0x151e <_Z18spi_transfer_blockhPhS_h+0x1e>

  output_high(cs_pin);                //! 3) Pull CS high
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	8d 2f       	mov	r24, r29
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
  output_low(cs_pin);                 //! 1) Pull CS low

  for (i=(length-1);  i >= 0; i--)
    rx[i] = SPI.transfer(tx[i]);    //! 2) Read and send byte array

  output_high(cs_pin);                //! 3) Pull CS high
    1558:	0c 94 9e 09 	jmp	0x133c	; 0x133c <digitalWrite>

0000155c <_Z20quikeval_SPI_connectv>:
}

// Connect SPI pins to QuikEval connector through the Linduino MUX. This will disconnect I2C.
void quikeval_SPI_connect()
{
  pinMode(QUIKEVAL_CS, OUTPUT);
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	8a e0       	ldi	r24, 0x0A	; 10
    1560:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>
  output_high(QUIKEVAL_CS); //! 1) Pull Chip Select High
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	8a e0       	ldi	r24, 0x0A	; 10
    1568:	0e 94 9e 09 	call	0x133c	; 0x133c <digitalWrite>

  //! 2) Enable Main SPI
  pinMode(QUIKEVAL_MUX_MODE_PIN, OUTPUT);
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	88 e0       	ldi	r24, 0x08	; 8
    1570:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, LOW);
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	88 e0       	ldi	r24, 0x08	; 8
    1578:	0c 94 9e 09 	jmp	0x133c	; 0x133c <digitalWrite>

0000157c <_Z10spi_enableh>:
// Setup the processor for hardware SPI communication.
// Must be called before using the other SPI routines.
// Alternatively, call quikeval_SPI_connect(), which automatically
// calls this function.
void spi_enable(uint8_t spi_clock_divider) // Configures SCK frequency. Use constant defined in header file.
{
    157c:	cf 93       	push	r28
    157e:	c8 2f       	mov	r28, r24
  //pinMode(SCK, OUTPUT);             //! 1) Setup SCK as output
  //pinMode(MOSI, OUTPUT);            //! 2) Setup MOSI as output
  //pinMode(QUIKEVAL_CS, OUTPUT);     //! 3) Setup CS as output
  SPI.begin();
    1580:	0e 94 55 0c 	call	0x18aa	; 0x18aa <_ZN8SPIClass5beginEv>
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
    1584:	8c b5       	in	r24, 0x2c	; 44
    1586:	8c 7f       	andi	r24, 0xFC	; 252
    1588:	9c 2f       	mov	r25, r28
    158a:	93 70       	andi	r25, 0x03	; 3
    158c:	89 2b       	or	r24, r25
    158e:	8c bd       	out	0x2c, r24	; 44
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
    1590:	9d b5       	in	r25, 0x2d	; 45
    1592:	c2 fb       	bst	r28, 2
    1594:	88 27       	eor	r24, r24
    1596:	80 f9       	bld	r24, 0
    1598:	c9 2f       	mov	r28, r25
    159a:	ce 7f       	andi	r28, 0xFE	; 254
    159c:	c8 2b       	or	r28, r24
    159e:	cd bd       	out	0x2d, r28	; 45
  SPI.setClockDivider(spi_clock_divider);
}
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <_Z17quikeval_SPI_initv>:
// Configure the SPI port for 4MHz SCK.
// This function or spi_enable() must be called
// before using the other SPI routines.
void quikeval_SPI_init(void)  // Initializes SPI
{
  spi_enable(SPI_CLOCK_DIV16);  //! 1) Configure the spi port for 4MHz SCK
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	0c 94 be 0a 	jmp	0x157c	; 0x157c <_Z10spi_enableh>

000015aa <_Z11eeprom_pollh>:
    *buffer='\0';                      // Place null terminator at end of buffer
    return(i+1);
  }
  else
    return(0);
}
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	18 2f       	mov	r17, r24
    15b2:	0e 94 13 0a 	call	0x1426	; 0x1426 <_Z9i2c_startv>
    15b6:	81 2f       	mov	r24, r17
    15b8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z9i2c_writeh>
    15bc:	88 23       	and	r24, r24
    15be:	a1 f0       	breq	.+40     	; 0x15e8 <_Z11eeprom_pollh+0x3e>
    15c0:	da e0       	ldi	r29, 0x0A	; 10
    15c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_Z18i2c_repeated_startv>
    15c6:	81 2f       	mov	r24, r17
    15c8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z9i2c_writeh>
    15cc:	c8 2f       	mov	r28, r24
    15ce:	88 23       	and	r24, r24
    15d0:	59 f0       	breq	.+22     	; 0x15e8 <_Z11eeprom_pollh+0x3e>
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 c2 08 	call	0x1184	; 0x1184 <delay>
    15de:	d1 50       	subi	r29, 0x01	; 1
    15e0:	81 f7       	brne	.-32     	; 0x15c2 <_Z11eeprom_pollh+0x18>
    15e2:	0e 94 43 0a 	call	0x1486	; 0x1486 <_Z8i2c_stopv>
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <_Z11eeprom_pollh+0x40>
    15e8:	c0 e0       	ldi	r28, 0x00	; 0
    15ea:	8c 2f       	mov	r24, r28
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	08 95       	ret

000015f4 <_Z34eeprom_read_buffer_with_terminatorhPcjch>:

// Read data bytes from the EEPROM starting at address until the terminator is read
// or the number bytes read equals count. A null terminator is placed at the end of the buffer.
// Returns the number of bytes read.
uint8_t eeprom_read_buffer_with_terminator(uint8_t i2c_address, char *buffer, uint16_t address, char terminator, uint8_t count)
{
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	c8 2f       	mov	r28, r24
    1606:	6b 01       	movw	r12, r22
    1608:	14 2f       	mov	r17, r20
    160a:	d2 2f       	mov	r29, r18
  uint8_t i = 0;
  uint8_t data;
  *buffer='\0';                            // Initialize buffer with null
    160c:	fb 01       	movw	r30, r22
    160e:	10 82       	st	Z, r1
  if (eeprom_poll(i2c_address) == 0)      // Check if the EEPROM is ready
    1610:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_Z11eeprom_pollh>
    1614:	81 11       	cpse	r24, r1
    1616:	29 c0       	rjmp	.+82     	; 0x166a <_Z34eeprom_read_buffer_with_terminatorhPcjch+0x76>
  {
    if (EEPROM_DATA_SIZE > 0x100)
      i2c_write(address>>8);            // Send upper byte of address if size > 256 bytes
    i2c_write(address);                 // Send lower byte of address
    1618:	81 2f       	mov	r24, r17
    161a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z9i2c_writeh>
    i2c_repeated_start();               // I2C repeated start
    161e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_Z18i2c_repeated_startv>
    i2c_write(i2c_address | I2C_READ_BIT);      // I2C address + read
    1622:	8c 2f       	mov	r24, r28
    1624:	81 60       	ori	r24, 0x01	; 1
    1626:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z9i2c_writeh>
    162a:	76 01       	movw	r14, r12
    for (i = 0; i < count-1; i++)           // Read count-1 bytes with ACK
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	01 50       	subi	r16, 0x01	; 1
    1630:	11 09       	sbc	r17, r1
    1632:	ce 2d       	mov	r28, r14
    1634:	cc 19       	sub	r28, r12
    1636:	8c 2f       	mov	r24, r28
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	80 17       	cp	r24, r16
    163c:	91 07       	cpc	r25, r17
    163e:	5c f4       	brge	.+22     	; 0x1656 <_Z34eeprom_read_buffer_with_terminatorhPcjch+0x62>
    {
      data = i2c_read(WITH_ACK);                 // Receive 1 EEPROM data byte with ACK
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_Z8i2c_reada>
      *buffer++=data;                   // Place data byte in buffer and increment pointer
    1646:	ff ef       	ldi	r31, 0xFF	; 255
    1648:	ef 1a       	sub	r14, r31
    164a:	ff 0a       	sbc	r15, r31
    164c:	f7 01       	movw	r30, r14
    164e:	31 97       	sbiw	r30, 0x01	; 1
    1650:	80 83       	st	Z, r24
      if (data == terminator) break;
    1652:	d8 13       	cpse	r29, r24
    1654:	ee cf       	rjmp	.-36     	; 0x1632 <_Z34eeprom_read_buffer_with_terminatorhPcjch+0x3e>
    }
    data = i2c_read(WITH_NACK);                   // Read one more byte from EEPROM with NACK
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_Z8i2c_reada>
    i2c_stop();                         // I2C stop
    165c:	0e 94 43 0a 	call	0x1486	; 0x1486 <_Z8i2c_stopv>
    *buffer = 0;                          // Place null terminator at end of buffer
    1660:	f7 01       	movw	r30, r14
    1662:	10 82       	st	Z, r1
    return(i+1);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8c 0f       	add	r24, r28
    1668:	01 c0       	rjmp	.+2      	; 0x166c <_Z34eeprom_read_buffer_with_terminatorhPcjch+0x78>
  }
  else
    return(0);
    166a:	80 e0       	ldi	r24, 0x00	; 0
}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	df 90       	pop	r13
    167a:	cf 90       	pop	r12
    167c:	08 95       	ret

0000167e <_Z23read_quikeval_id_stringPc>:
// Read the id string from the EEPROM, then parse the
// product name, demo board name, and demo board option
// from the id string into the global demo_board variable.
// Returns the number of characters read from the information string.
uint8_t read_quikeval_id_string(char *buffer)
{
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	28 97       	sbiw	r28, 0x08	; 8
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	7c 01       	movw	r14, r24
  uint8_t i, j;                // Iteration variables
  uint8_t comma_position[8] = {0};  // Contains the position of the commas in the buffer
    16a4:	ce 01       	movw	r24, r28
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	5c 01       	movw	r10, r24
    16aa:	88 e0       	ldi	r24, 0x08	; 8
    16ac:	f5 01       	movw	r30, r10
    16ae:	11 92       	st	Z+, r1
    16b0:	8a 95       	dec	r24
    16b2:	e9 f7       	brne	.-6      	; 0x16ae <_Z23read_quikeval_id_stringPc+0x30>
  uint8_t buffer_count;       // The number of characters read
  int8_t option;              // Temporary demo board option
  // read the id string from the demo board EEPROM
  // starting EEPROM address=0, terminator=0x0a, max buffer length=52 bytes
  // Enable I2C
  pinMode(QUIKEVAL_MUX_MODE_PIN, OUTPUT);   // Configure MUX to disconnect I2C pins on QuikEval connector. Remember EEPROM has its own I2C pins on the the connector.
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	88 e0       	ldi	r24, 0x08	; 8
    16b8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>
  int8_t QUIKEVAL_MUX_MODE_PIN_state;
  QUIKEVAL_MUX_MODE_PIN_state = digitalRead(QUIKEVAL_MUX_MODE_PIN);
    16bc:	88 e0       	ldi	r24, 0x08	; 8
    16be:	0e 94 cd 09 	call	0x139a	; 0x139a <digitalRead>
    16c2:	c8 2e       	mov	r12, r24
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, LOW);
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	88 e0       	ldi	r24, 0x08	; 8
    16c8:	0e 94 9e 09 	call	0x133c	; 0x133c <digitalWrite>
  buffer_count = eeprom_read_buffer_with_terminator(EEPROM_I2C_ADDRESS, buffer, 0, QUIKEVAL_ID_TERMINATOR, QUIKEVAL_ID_SIZE+2);
    16cc:	04 e3       	ldi	r16, 0x34	; 52
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	b7 01       	movw	r22, r14
    16d6:	80 ea       	ldi	r24, 0xA0	; 160
    16d8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_Z34eeprom_read_buffer_with_terminatorhPcjch>
    16dc:	18 2f       	mov	r17, r24
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, QUIKEVAL_MUX_MODE_PIN_state);  // Restore the QUIKEVAL_MUX_MODE_PIN (8) to its previous state.  (But, it will be left as output.)
    16de:	6c 2d       	mov	r22, r12
    16e0:	88 e0       	ldi	r24, 0x08	; 8
    16e2:	0e 94 9e 09 	call	0x133c	; 0x133c <digitalWrite>
  if (buffer_count == 0) return(0);   // quit if no data read
    16e6:	11 23       	and	r17, r17
    16e8:	09 f4       	brne	.+2      	; 0x16ec <_Z23read_quikeval_id_stringPc+0x6e>
    16ea:	69 c0       	rjmp	.+210    	; 0x17be <_Z23read_quikeval_id_stringPc+0x140>
    16ec:	4e 2d       	mov	r20, r14
    16ee:	f7 01       	movw	r30, r14
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
  // find comma positions
  for (i = 0; i < buffer_count; i++)
  {
    if (buffer[i] == ',') comma_position[comma_count++]=i;
    16f4:	21 91       	ld	r18, Z+
    16f6:	2c 32       	cpi	r18, 0x2C	; 44
    16f8:	29 f4       	brne	.+10     	; 0x1704 <_Z23read_quikeval_id_stringPc+0x86>
    16fa:	d5 01       	movw	r26, r10
    16fc:	a9 0f       	add	r26, r25
    16fe:	b1 1d       	adc	r27, r1
    1700:	8c 93       	st	X, r24
    1702:	9f 5f       	subi	r25, 0xFF	; 255
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, LOW);
  buffer_count = eeprom_read_buffer_with_terminator(EEPROM_I2C_ADDRESS, buffer, 0, QUIKEVAL_ID_TERMINATOR, QUIKEVAL_ID_SIZE+2);
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, QUIKEVAL_MUX_MODE_PIN_state);  // Restore the QUIKEVAL_MUX_MODE_PIN (8) to its previous state.  (But, it will be left as output.)
  if (buffer_count == 0) return(0);   // quit if no data read
  // find comma positions
  for (i = 0; i < buffer_count; i++)
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	18 13       	cpse	r17, r24
    1708:	f5 cf       	rjmp	.-22     	; 0x16f4 <_Z23read_quikeval_id_stringPc+0x76>
  {
    if (buffer[i] == ',') comma_position[comma_count++]=i;
  }

  if (comma_position[6] < comma_position[5])// comma_position[6]=strlen(buffer);  // some demo boards are missing the last comma
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	89 17       	cp	r24, r25
    1710:	60 f4       	brcc	.+24     	; 0x172a <_Z23read_quikeval_id_stringPc+0xac>
  {
    for (i = buffer_count - 2; i > comma_position[5]; i--)
    1712:	8e ef       	ldi	r24, 0xFE	; 254
    1714:	81 0f       	add	r24, r17
    1716:	98 17       	cp	r25, r24
    1718:	40 f4       	brcc	.+16     	; 0x172a <_Z23read_quikeval_id_stringPc+0xac>
    {
      if (buffer[i] != '-')
    171a:	f7 01       	movw	r30, r14
    171c:	e8 0f       	add	r30, r24
    171e:	f1 1d       	adc	r31, r1
    1720:	20 81       	ld	r18, Z
    1722:	2d 32       	cpi	r18, 0x2D	; 45
    1724:	39 f0       	breq	.+14     	; 0x1734 <_Z23read_quikeval_id_stringPc+0xb6>
      {
        comma_position[6] = i+1;
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	8f 83       	std	Y+7, r24	; 0x07
  }



  // get product name. All characters before the 1st comma.
  for (i = 0; i < comma_position[0]; i++)
    172a:	59 81       	ldd	r21, Y+1	; 0x01
    172c:	2c e6       	ldi	r18, 0x6C	; 108
    172e:	32 e0       	ldi	r19, 0x02	; 2
    1730:	d7 01       	movw	r26, r14
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <_Z23read_quikeval_id_stringPc+0xba>
    if (buffer[i] == ',') comma_position[comma_count++]=i;
  }

  if (comma_position[6] < comma_position[5])// comma_position[6]=strlen(buffer);  // some demo boards are missing the last comma
  {
    for (i = buffer_count - 2; i > comma_position[5]; i--)
    1734:	81 50       	subi	r24, 0x01	; 1
    1736:	ef cf       	rjmp	.-34     	; 0x1716 <_Z23read_quikeval_id_stringPc+0x98>
  }



  // get product name. All characters before the 1st comma.
  for (i = 0; i < comma_position[0]; i++)
    1738:	8a 2f       	mov	r24, r26
    173a:	84 1b       	sub	r24, r20
    173c:	85 17       	cp	r24, r21
    173e:	28 f4       	brcc	.+10     	; 0x174a <_Z23read_quikeval_id_stringPc+0xcc>
  {
    demo_board.product_name[i]=buffer[i];
    1740:	8d 91       	ld	r24, X+
    1742:	f9 01       	movw	r30, r18
    1744:	81 93       	st	Z+, r24
    1746:	9f 01       	movw	r18, r30
  }



  // get product name. All characters before the 1st comma.
  for (i = 0; i < comma_position[0]; i++)
    1748:	f7 cf       	rjmp	.-18     	; 0x1738 <_Z23read_quikeval_id_stringPc+0xba>
  {
    demo_board.product_name[i]=buffer[i];
  }
  demo_board.product_name[i]='\0';  // add terminator
    174a:	e5 2f       	mov	r30, r21
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	e4 59       	subi	r30, 0x94	; 148
    1750:	fd 4f       	sbci	r31, 0xFD	; 253
    1752:	10 82       	st	Z, r1
  // Get demo board name between the 5th and 6th comma
  j = 0;

  for (i = comma_position[5]+1; i < comma_position[6]; i++)
    1754:	9f 5f       	subi	r25, 0xFF	; 255
    1756:	4f 81       	ldd	r20, Y+7	; 0x07
    1758:	ab e7       	ldi	r26, 0x7B	; 123
    175a:	b2 e0       	ldi	r27, 0x02	; 2
  {
    demo_board.product_name[i]=buffer[i];
  }
  demo_board.product_name[i]='\0';  // add terminator
  // Get demo board name between the 5th and 6th comma
  j = 0;
    175c:	50 e0       	ldi	r21, 0x00	; 0

  for (i = comma_position[5]+1; i < comma_position[6]; i++)
    175e:	94 17       	cp	r25, r20
    1760:	48 f4       	brcc	.+18     	; 0x1774 <_Z23read_quikeval_id_stringPc+0xf6>
  {
    demo_board.name[j++]=buffer[i];
    1762:	5f 5f       	subi	r21, 0xFF	; 255
    1764:	97 01       	movw	r18, r14
    1766:	29 0f       	add	r18, r25
    1768:	31 1d       	adc	r19, r1
    176a:	f9 01       	movw	r30, r18
    176c:	80 81       	ld	r24, Z
    176e:	8d 93       	st	X+, r24
  }
  demo_board.product_name[i]='\0';  // add terminator
  // Get demo board name between the 5th and 6th comma
  j = 0;

  for (i = comma_position[5]+1; i < comma_position[6]; i++)
    1770:	9f 5f       	subi	r25, 0xFF	; 255
    1772:	f5 cf       	rjmp	.-22     	; 0x175e <_Z23read_quikeval_id_stringPc+0xe0>
  {
    demo_board.name[j++]=buffer[i];
  }
  demo_board.name[j]='\0';  // add terminator
    1774:	e5 2f       	mov	r30, r21
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	e4 59       	subi	r30, 0x94	; 148
    177a:	fd 4f       	sbci	r31, 0xFD	; 253
    177c:	17 86       	std	Z+15, r1	; 0x0f
  // get demo board option from the demo board name
  for (i = 0; i < strlen(demo_board.name); i++)
    177e:	eb e7       	ldi	r30, 0x7B	; 123
    1780:	f2 e0       	ldi	r31, 0x02	; 2
    1782:	01 90       	ld	r0, Z+
    1784:	00 20       	and	r0, r0
    1786:	e9 f7       	brne	.-6      	; 0x1782 <_Z23read_quikeval_id_stringPc+0x104>
    1788:	cf 01       	movw	r24, r30
    178a:	8c 57       	subi	r24, 0x7C	; 124
    178c:	92 40       	sbci	r25, 0x02	; 2
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	e2 2f       	mov	r30, r18
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	e8 17       	cp	r30, r24
    1796:	f9 07       	cpc	r31, r25
    1798:	40 f4       	brcc	.+16     	; 0x17aa <_Z23read_quikeval_id_stringPc+0x12c>
  {
    if (demo_board.name[i] == '-') option = demo_board.name[i+1];
    179a:	e4 59       	subi	r30, 0x94	; 148
    179c:	fd 4f       	sbci	r31, 0xFD	; 253
    179e:	37 85       	ldd	r19, Z+15	; 0x0f
    17a0:	3d 32       	cpi	r19, 0x2D	; 45
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <_Z23read_quikeval_id_stringPc+0x128>
    17a4:	d0 88       	ldd	r13, Z+16	; 0x10
  {
    demo_board.name[j++]=buffer[i];
  }
  demo_board.name[j]='\0';  // add terminator
  // get demo board option from the demo board name
  for (i = 0; i < strlen(demo_board.name); i++)
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	f3 cf       	rjmp	.-26     	; 0x1790 <_Z23read_quikeval_id_stringPc+0x112>
  {
    if (demo_board.name[i] == '-') option = demo_board.name[i+1];
  }
  if ((option >= 0x41) && (option <= 0x5A)) demo_board.option = option;
    17aa:	8f eb       	ldi	r24, 0xBF	; 191
    17ac:	8d 0d       	add	r24, r13
    17ae:	8a 31       	cpi	r24, 0x1A	; 26
    17b0:	10 f4       	brcc	.+4      	; 0x17b6 <_Z23read_quikeval_id_stringPc+0x138>
    17b2:	d0 92 8a 02 	sts	0x028A, r13	; 0x80028a <demo_board+0x1e>
  // final demo board name is 6 characters without the option
  demo_board.name[6]='\0';
    17b6:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <demo_board+0x15>
  return(buffer_count);
    17ba:	81 2f       	mov	r24, r17
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <_Z23read_quikeval_id_stringPc+0x142>
  int8_t QUIKEVAL_MUX_MODE_PIN_state;
  QUIKEVAL_MUX_MODE_PIN_state = digitalRead(QUIKEVAL_MUX_MODE_PIN);
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, LOW);
  buffer_count = eeprom_read_buffer_with_terminator(EEPROM_I2C_ADDRESS, buffer, 0, QUIKEVAL_ID_TERMINATOR, QUIKEVAL_ID_SIZE+2);
  digitalWrite(QUIKEVAL_MUX_MODE_PIN, QUIKEVAL_MUX_MODE_PIN_state);  // Restore the QUIKEVAL_MUX_MODE_PIN (8) to its previous state.  (But, it will be left as output.)
  if (buffer_count == 0) return(0);   // quit if no data read
    17be:	80 e0       	ldi	r24, 0x00	; 0
  }
  if ((option >= 0x41) && (option <= 0x5A)) demo_board.option = option;
  // final demo board name is 6 characters without the option
  demo_board.name[6]='\0';
  return(buffer_count);
}
    17c0:	28 96       	adiw	r28, 0x08	; 8
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	08 95       	ret

000017e2 <_Z19discover_demo_boardPc>:

// Read the ID string from the EEPROM and determine if the correct board is connected.
// Returns 1 if successful, 0 if not successful
int8_t discover_demo_board(char *demo_name)
{
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	8c 01       	movw	r16, r24
  int8_t connected;
  connected = 1;
  // read the ID from the serial EEPROM on the board
  // reuse the buffer declared in UserInterface
  if (read_quikeval_id_string(&ui_buffer[0]) == 0) connected = 0;
    17ec:	8c e8       	ldi	r24, 0x8C	; 140
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 3f 0b 	call	0x167e	; 0x167e <_Z23read_quikeval_id_stringPc>
    17f4:	d8 2f       	mov	r29, r24
// Read the ID string from the EEPROM and determine if the correct board is connected.
// Returns 1 if successful, 0 if not successful
int8_t discover_demo_board(char *demo_name)
{
  int8_t connected;
  connected = 1;
    17f6:	c1 e0       	ldi	r28, 0x01	; 1
    17f8:	81 11       	cpse	r24, r1
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <_Z19discover_demo_boardPc+0x1c>
    17fc:	c0 e0       	ldi	r28, 0x00	; 0
  // read the ID from the serial EEPROM on the board
  // reuse the buffer declared in UserInterface
  if (read_quikeval_id_string(&ui_buffer[0]) == 0) connected = 0;
  // make sure it is the correct demo board
  if (strcmp(demo_board.name, demo_name) != 0) connected = 0;
    17fe:	b8 01       	movw	r22, r16
    1800:	8b e7       	ldi	r24, 0x7B	; 123
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <strcmp>
    1808:	89 2b       	or	r24, r25
    180a:	59 f5       	brne	.+86     	; 0x1862 <_Z19discover_demo_boardPc+0x80>
  if (connected != 0)
    180c:	dd 23       	and	r29, r29
    180e:	49 f1       	breq	.+82     	; 0x1862 <_Z19discover_demo_boardPc+0x80>
  {
    Serial.print("Demo Board Name: ");
    1810:	68 e2       	ldi	r22, 0x28	; 40
    1812:	71 e0       	ldi	r23, 0x01	; 1
    1814:	86 ec       	ldi	r24, 0xC6	; 198
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
    Serial.println(demo_board.name);
    181c:	6b e7       	ldi	r22, 0x7B	; 123
    181e:	72 e0       	ldi	r23, 0x02	; 2
    1820:	86 ec       	ldi	r24, 0xC6	; 198
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN5Print7printlnEPKc>
    Serial.print("Product Name: ");
    1828:	6a e3       	ldi	r22, 0x3A	; 58
    182a:	71 e0       	ldi	r23, 0x01	; 1
    182c:	86 ec       	ldi	r24, 0xC6	; 198
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
    Serial.println(demo_board.product_name);
    1834:	6c e6       	ldi	r22, 0x6C	; 108
    1836:	72 e0       	ldi	r23, 0x02	; 2
    1838:	86 ec       	ldi	r24, 0xC6	; 198
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN5Print7printlnEPKc>
    if (demo_board.option)
    1840:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <demo_board+0x1e>
    1844:	88 23       	and	r24, r24
    1846:	59 f1       	breq	.+86     	; 0x189e <_Z19discover_demo_boardPc+0xbc>
    {
      Serial.print("Demo Board Option: ");
    1848:	69 e4       	ldi	r22, 0x49	; 73
    184a:	71 e0       	ldi	r23, 0x01	; 1
    184c:	86 ec       	ldi	r24, 0xC6	; 198
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
      Serial.println(demo_board.option);
    1854:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <demo_board+0x1e>
    1858:	86 ec       	ldi	r24, 0xC6	; 198
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 df 06 	call	0xdbe	; 0xdbe <_ZN5Print7printlnEc>
    1860:	1e c0       	rjmp	.+60     	; 0x189e <_Z19discover_demo_boardPc+0xbc>
    }
  }
  else
  {
    Serial.print("Demo board ");
    1862:	6d e5       	ldi	r22, 0x5D	; 93
    1864:	71 e0       	ldi	r23, 0x01	; 1
    1866:	86 ec       	ldi	r24, 0xC6	; 198
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
    Serial.print(demo_name);
    186e:	b8 01       	movw	r22, r16
    1870:	86 ec       	ldi	r24, 0xC6	; 198
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
    Serial.print(" not found, \nfound ");
    1878:	69 e6       	ldi	r22, 0x69	; 105
    187a:	71 e0       	ldi	r23, 0x01	; 1
    187c:	86 ec       	ldi	r24, 0xC6	; 198
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
    Serial.print(demo_board.name);
    1884:	6b e7       	ldi	r22, 0x7B	; 123
    1886:	72 e0       	ldi	r23, 0x02	; 2
    1888:	86 ec       	ldi	r24, 0xC6	; 198
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print5printEPKc>
    Serial.println(" instead. \nConnect the correct demo board, then press the reset button.");
    1890:	6d e7       	ldi	r22, 0x7D	; 125
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	86 ec       	ldi	r24, 0xC6	; 198
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN5Print7printlnEPKc>
    189c:	c0 e0       	ldi	r28, 0x00	; 0
  }
  return(connected);
}
    189e:	8c 2f       	mov	r24, r28
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    18aa:	cf 93       	push	r28
  uint8_t sreg = SREG;
    18ac:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    18ae:	f8 94       	cli
  if (!initialized) {
    18b0:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN8SPIClass11initializedE>
    18b4:	81 11       	cpse	r24, r1
    18b6:	27 c0       	rjmp	.+78     	; 0x1906 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    18b8:	e2 ec       	ldi	r30, 0xC2	; 194
    18ba:	f3 e0       	ldi	r31, 0x03	; 3
    18bc:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    18be:	ee ea       	ldi	r30, 0xAE	; 174
    18c0:	f3 e0       	ldi	r31, 0x03	; 3
    18c2:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    18c4:	e8 2f       	mov	r30, r24
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	e0 52       	subi	r30, 0x20	; 32
    18ce:	fc 4f       	sbci	r31, 0xFC	; 252
    18d0:	a5 91       	lpm	r26, Z+
    18d2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    18d4:	ec 91       	ld	r30, X
    18d6:	e9 23       	and	r30, r25
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	0e 94 9e 09 	call	0x133c	; 0x133c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	8a e0       	ldi	r24, 0x0A	; 10
    18e6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    18ea:	8c b5       	in	r24, 0x2c	; 44
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    18f0:	8c b5       	in	r24, 0x2c	; 44
    18f2:	80 64       	ori	r24, 0x40	; 64
    18f4:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	8d e0       	ldi	r24, 0x0D	; 13
    18fa:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>
    pinMode(MOSI, OUTPUT);
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	8b e0       	ldi	r24, 0x0B	; 11
    1902:	0e 94 62 09 	call	0x12c4	; 0x12c4 <pinMode>
  }
  initialized++; // reference count
    1906:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN8SPIClass11initializedE>
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1910:	cf bf       	out	0x3f, r28	; 63
}
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1916:	08 95       	ret

00001918 <__subsf3>:
    1918:	50 58       	subi	r21, 0x80	; 128

0000191a <__addsf3>:
    191a:	bb 27       	eor	r27, r27
    191c:	aa 27       	eor	r26, r26
    191e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__addsf3x>
    1922:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_round>
    1926:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__fp_pscA>
    192a:	38 f0       	brcs	.+14     	; 0x193a <__addsf3+0x20>
    192c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscB>
    1930:	20 f0       	brcs	.+8      	; 0x193a <__addsf3+0x20>
    1932:	39 f4       	brne	.+14     	; 0x1942 <__addsf3+0x28>
    1934:	9f 3f       	cpi	r25, 0xFF	; 255
    1936:	19 f4       	brne	.+6      	; 0x193e <__addsf3+0x24>
    1938:	26 f4       	brtc	.+8      	; 0x1942 <__addsf3+0x28>
    193a:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_nan>
    193e:	0e f4       	brtc	.+2      	; 0x1942 <__addsf3+0x28>
    1940:	e0 95       	com	r30
    1942:	e7 fb       	bst	r30, 7
    1944:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_inf>

00001948 <__addsf3x>:
    1948:	e9 2f       	mov	r30, r25
    194a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fp_split3>
    194e:	58 f3       	brcs	.-42     	; 0x1926 <__addsf3+0xc>
    1950:	ba 17       	cp	r27, r26
    1952:	62 07       	cpc	r22, r18
    1954:	73 07       	cpc	r23, r19
    1956:	84 07       	cpc	r24, r20
    1958:	95 07       	cpc	r25, r21
    195a:	20 f0       	brcs	.+8      	; 0x1964 <__addsf3x+0x1c>
    195c:	79 f4       	brne	.+30     	; 0x197c <__addsf3x+0x34>
    195e:	a6 f5       	brtc	.+104    	; 0x19c8 <__addsf3x+0x80>
    1960:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_zero>
    1964:	0e f4       	brtc	.+2      	; 0x1968 <__addsf3x+0x20>
    1966:	e0 95       	com	r30
    1968:	0b 2e       	mov	r0, r27
    196a:	ba 2f       	mov	r27, r26
    196c:	a0 2d       	mov	r26, r0
    196e:	0b 01       	movw	r0, r22
    1970:	b9 01       	movw	r22, r18
    1972:	90 01       	movw	r18, r0
    1974:	0c 01       	movw	r0, r24
    1976:	ca 01       	movw	r24, r20
    1978:	a0 01       	movw	r20, r0
    197a:	11 24       	eor	r1, r1
    197c:	ff 27       	eor	r31, r31
    197e:	59 1b       	sub	r21, r25
    1980:	99 f0       	breq	.+38     	; 0x19a8 <__addsf3x+0x60>
    1982:	59 3f       	cpi	r21, 0xF9	; 249
    1984:	50 f4       	brcc	.+20     	; 0x199a <__addsf3x+0x52>
    1986:	50 3e       	cpi	r21, 0xE0	; 224
    1988:	68 f1       	brcs	.+90     	; 0x19e4 <__addsf3x+0x9c>
    198a:	1a 16       	cp	r1, r26
    198c:	f0 40       	sbci	r31, 0x00	; 0
    198e:	a2 2f       	mov	r26, r18
    1990:	23 2f       	mov	r18, r19
    1992:	34 2f       	mov	r19, r20
    1994:	44 27       	eor	r20, r20
    1996:	58 5f       	subi	r21, 0xF8	; 248
    1998:	f3 cf       	rjmp	.-26     	; 0x1980 <__addsf3x+0x38>
    199a:	46 95       	lsr	r20
    199c:	37 95       	ror	r19
    199e:	27 95       	ror	r18
    19a0:	a7 95       	ror	r26
    19a2:	f0 40       	sbci	r31, 0x00	; 0
    19a4:	53 95       	inc	r21
    19a6:	c9 f7       	brne	.-14     	; 0x199a <__addsf3x+0x52>
    19a8:	7e f4       	brtc	.+30     	; 0x19c8 <__addsf3x+0x80>
    19aa:	1f 16       	cp	r1, r31
    19ac:	ba 0b       	sbc	r27, r26
    19ae:	62 0b       	sbc	r22, r18
    19b0:	73 0b       	sbc	r23, r19
    19b2:	84 0b       	sbc	r24, r20
    19b4:	ba f0       	brmi	.+46     	; 0x19e4 <__addsf3x+0x9c>
    19b6:	91 50       	subi	r25, 0x01	; 1
    19b8:	a1 f0       	breq	.+40     	; 0x19e2 <__addsf3x+0x9a>
    19ba:	ff 0f       	add	r31, r31
    19bc:	bb 1f       	adc	r27, r27
    19be:	66 1f       	adc	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	c2 f7       	brpl	.-16     	; 0x19b6 <__addsf3x+0x6e>
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <__addsf3x+0x9c>
    19c8:	ba 0f       	add	r27, r26
    19ca:	62 1f       	adc	r22, r18
    19cc:	73 1f       	adc	r23, r19
    19ce:	84 1f       	adc	r24, r20
    19d0:	48 f4       	brcc	.+18     	; 0x19e4 <__addsf3x+0x9c>
    19d2:	87 95       	ror	r24
    19d4:	77 95       	ror	r23
    19d6:	67 95       	ror	r22
    19d8:	b7 95       	ror	r27
    19da:	f7 95       	ror	r31
    19dc:	9e 3f       	cpi	r25, 0xFE	; 254
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <__addsf3x+0x9a>
    19e0:	b0 cf       	rjmp	.-160    	; 0x1942 <__addsf3+0x28>
    19e2:	93 95       	inc	r25
    19e4:	88 0f       	add	r24, r24
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <__addsf3x+0xa2>
    19e8:	99 27       	eor	r25, r25
    19ea:	ee 0f       	add	r30, r30
    19ec:	97 95       	ror	r25
    19ee:	87 95       	ror	r24
    19f0:	08 95       	ret

000019f2 <__cmpsf2>:
    19f2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_cmp>
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <__cmpsf2+0x8>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	08 95       	ret

000019fc <__divsf3>:
    19fc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divsf3x>
    1a00:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_round>
    1a04:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscB>
    1a08:	58 f0       	brcs	.+22     	; 0x1a20 <__divsf3+0x24>
    1a0a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__fp_pscA>
    1a0e:	40 f0       	brcs	.+16     	; 0x1a20 <__divsf3+0x24>
    1a10:	29 f4       	brne	.+10     	; 0x1a1c <__divsf3+0x20>
    1a12:	5f 3f       	cpi	r21, 0xFF	; 255
    1a14:	29 f0       	breq	.+10     	; 0x1a20 <__divsf3+0x24>
    1a16:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_inf>
    1a1a:	51 11       	cpse	r21, r1
    1a1c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_szero>
    1a20:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_nan>

00001a24 <__divsf3x>:
    1a24:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fp_split3>
    1a28:	68 f3       	brcs	.-38     	; 0x1a04 <__divsf3+0x8>

00001a2a <__divsf3_pse>:
    1a2a:	99 23       	and	r25, r25
    1a2c:	b1 f3       	breq	.-20     	; 0x1a1a <__divsf3+0x1e>
    1a2e:	55 23       	and	r21, r21
    1a30:	91 f3       	breq	.-28     	; 0x1a16 <__divsf3+0x1a>
    1a32:	95 1b       	sub	r25, r21
    1a34:	55 0b       	sbc	r21, r21
    1a36:	bb 27       	eor	r27, r27
    1a38:	aa 27       	eor	r26, r26
    1a3a:	62 17       	cp	r22, r18
    1a3c:	73 07       	cpc	r23, r19
    1a3e:	84 07       	cpc	r24, r20
    1a40:	38 f0       	brcs	.+14     	; 0x1a50 <__divsf3_pse+0x26>
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	44 1f       	adc	r20, r20
    1a4c:	aa 1f       	adc	r26, r26
    1a4e:	a9 f3       	breq	.-22     	; 0x1a3a <__divsf3_pse+0x10>
    1a50:	35 d0       	rcall	.+106    	; 0x1abc <__divsf3_pse+0x92>
    1a52:	0e 2e       	mov	r0, r30
    1a54:	3a f0       	brmi	.+14     	; 0x1a64 <__divsf3_pse+0x3a>
    1a56:	e0 e8       	ldi	r30, 0x80	; 128
    1a58:	32 d0       	rcall	.+100    	; 0x1abe <__divsf3_pse+0x94>
    1a5a:	91 50       	subi	r25, 0x01	; 1
    1a5c:	50 40       	sbci	r21, 0x00	; 0
    1a5e:	e6 95       	lsr	r30
    1a60:	00 1c       	adc	r0, r0
    1a62:	ca f7       	brpl	.-14     	; 0x1a56 <__divsf3_pse+0x2c>
    1a64:	2b d0       	rcall	.+86     	; 0x1abc <__divsf3_pse+0x92>
    1a66:	fe 2f       	mov	r31, r30
    1a68:	29 d0       	rcall	.+82     	; 0x1abc <__divsf3_pse+0x92>
    1a6a:	66 0f       	add	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	88 1f       	adc	r24, r24
    1a70:	bb 1f       	adc	r27, r27
    1a72:	26 17       	cp	r18, r22
    1a74:	37 07       	cpc	r19, r23
    1a76:	48 07       	cpc	r20, r24
    1a78:	ab 07       	cpc	r26, r27
    1a7a:	b0 e8       	ldi	r27, 0x80	; 128
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <__divsf3_pse+0x56>
    1a7e:	bb 0b       	sbc	r27, r27
    1a80:	80 2d       	mov	r24, r0
    1a82:	bf 01       	movw	r22, r30
    1a84:	ff 27       	eor	r31, r31
    1a86:	93 58       	subi	r25, 0x83	; 131
    1a88:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8a:	3a f0       	brmi	.+14     	; 0x1a9a <__divsf3_pse+0x70>
    1a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8e:	51 05       	cpc	r21, r1
    1a90:	78 f0       	brcs	.+30     	; 0x1ab0 <__divsf3_pse+0x86>
    1a92:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_inf>
    1a96:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_szero>
    1a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9c:	e4 f3       	brlt	.-8      	; 0x1a96 <__divsf3_pse+0x6c>
    1a9e:	98 3e       	cpi	r25, 0xE8	; 232
    1aa0:	d4 f3       	brlt	.-12     	; 0x1a96 <__divsf3_pse+0x6c>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b7 95       	ror	r27
    1aaa:	f7 95       	ror	r31
    1aac:	9f 5f       	subi	r25, 0xFF	; 255
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__divsf3_pse+0x78>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	96 95       	lsr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	97 f9       	bld	r25, 7
    1aba:	08 95       	ret
    1abc:	e1 e0       	ldi	r30, 0x01	; 1
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	62 17       	cp	r22, r18
    1ac8:	73 07       	cpc	r23, r19
    1aca:	84 07       	cpc	r24, r20
    1acc:	ba 07       	cpc	r27, r26
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__divsf3_pse+0xae>
    1ad0:	62 1b       	sub	r22, r18
    1ad2:	73 0b       	sbc	r23, r19
    1ad4:	84 0b       	sbc	r24, r20
    1ad6:	ba 0b       	sbc	r27, r26
    1ad8:	ee 1f       	adc	r30, r30
    1ada:	88 f7       	brcc	.-30     	; 0x1abe <__divsf3_pse+0x94>
    1adc:	e0 95       	com	r30
    1ade:	08 95       	ret

00001ae0 <__fixunssfsi>:
    1ae0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fp_splitA>
    1ae4:	88 f0       	brcs	.+34     	; 0x1b08 <__fixunssfsi+0x28>
    1ae6:	9f 57       	subi	r25, 0x7F	; 127
    1ae8:	98 f0       	brcs	.+38     	; 0x1b10 <__fixunssfsi+0x30>
    1aea:	b9 2f       	mov	r27, r25
    1aec:	99 27       	eor	r25, r25
    1aee:	b7 51       	subi	r27, 0x17	; 23
    1af0:	b0 f0       	brcs	.+44     	; 0x1b1e <__fixunssfsi+0x3e>
    1af2:	e1 f0       	breq	.+56     	; 0x1b2c <__fixunssfsi+0x4c>
    1af4:	66 0f       	add	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	1a f0       	brmi	.+6      	; 0x1b04 <__fixunssfsi+0x24>
    1afe:	ba 95       	dec	r27
    1b00:	c9 f7       	brne	.-14     	; 0x1af4 <__fixunssfsi+0x14>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <__fixunssfsi+0x4c>
    1b04:	b1 30       	cpi	r27, 0x01	; 1
    1b06:	91 f0       	breq	.+36     	; 0x1b2c <__fixunssfsi+0x4c>
    1b08:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_zero>
    1b0c:	b1 e0       	ldi	r27, 0x01	; 1
    1b0e:	08 95       	ret
    1b10:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_zero>
    1b14:	67 2f       	mov	r22, r23
    1b16:	78 2f       	mov	r23, r24
    1b18:	88 27       	eor	r24, r24
    1b1a:	b8 5f       	subi	r27, 0xF8	; 248
    1b1c:	39 f0       	breq	.+14     	; 0x1b2c <__fixunssfsi+0x4c>
    1b1e:	b9 3f       	cpi	r27, 0xF9	; 249
    1b20:	cc f3       	brlt	.-14     	; 0x1b14 <__fixunssfsi+0x34>
    1b22:	86 95       	lsr	r24
    1b24:	77 95       	ror	r23
    1b26:	67 95       	ror	r22
    1b28:	b3 95       	inc	r27
    1b2a:	d9 f7       	brne	.-10     	; 0x1b22 <__fixunssfsi+0x42>
    1b2c:	3e f4       	brtc	.+14     	; 0x1b3c <__fixunssfsi+0x5c>
    1b2e:	90 95       	com	r25
    1b30:	80 95       	com	r24
    1b32:	70 95       	com	r23
    1b34:	61 95       	neg	r22
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	08 95       	ret

00001b3e <__floatunsisf>:
    1b3e:	e8 94       	clt
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <__floatsisf+0x12>

00001b42 <__floatsisf>:
    1b42:	97 fb       	bst	r25, 7
    1b44:	3e f4       	brtc	.+14     	; 0x1b54 <__floatsisf+0x12>
    1b46:	90 95       	com	r25
    1b48:	80 95       	com	r24
    1b4a:	70 95       	com	r23
    1b4c:	61 95       	neg	r22
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	99 23       	and	r25, r25
    1b56:	a9 f0       	breq	.+42     	; 0x1b82 <__floatsisf+0x40>
    1b58:	f9 2f       	mov	r31, r25
    1b5a:	96 e9       	ldi	r25, 0x96	; 150
    1b5c:	bb 27       	eor	r27, r27
    1b5e:	93 95       	inc	r25
    1b60:	f6 95       	lsr	r31
    1b62:	87 95       	ror	r24
    1b64:	77 95       	ror	r23
    1b66:	67 95       	ror	r22
    1b68:	b7 95       	ror	r27
    1b6a:	f1 11       	cpse	r31, r1
    1b6c:	f8 cf       	rjmp	.-16     	; 0x1b5e <__floatsisf+0x1c>
    1b6e:	fa f4       	brpl	.+62     	; 0x1bae <__floatsisf+0x6c>
    1b70:	bb 0f       	add	r27, r27
    1b72:	11 f4       	brne	.+4      	; 0x1b78 <__floatsisf+0x36>
    1b74:	60 ff       	sbrs	r22, 0
    1b76:	1b c0       	rjmp	.+54     	; 0x1bae <__floatsisf+0x6c>
    1b78:	6f 5f       	subi	r22, 0xFF	; 255
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	16 c0       	rjmp	.+44     	; 0x1bae <__floatsisf+0x6c>
    1b82:	88 23       	and	r24, r24
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <__floatsisf+0x48>
    1b86:	96 e9       	ldi	r25, 0x96	; 150
    1b88:	11 c0       	rjmp	.+34     	; 0x1bac <__floatsisf+0x6a>
    1b8a:	77 23       	and	r23, r23
    1b8c:	21 f0       	breq	.+8      	; 0x1b96 <__floatsisf+0x54>
    1b8e:	9e e8       	ldi	r25, 0x8E	; 142
    1b90:	87 2f       	mov	r24, r23
    1b92:	76 2f       	mov	r23, r22
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <__floatsisf+0x5e>
    1b96:	66 23       	and	r22, r22
    1b98:	71 f0       	breq	.+28     	; 0x1bb6 <__floatsisf+0x74>
    1b9a:	96 e8       	ldi	r25, 0x86	; 134
    1b9c:	86 2f       	mov	r24, r22
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	2a f0       	brmi	.+10     	; 0x1bae <__floatsisf+0x6c>
    1ba4:	9a 95       	dec	r25
    1ba6:	66 0f       	add	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	88 1f       	adc	r24, r24
    1bac:	da f7       	brpl	.-10     	; 0x1ba4 <__floatsisf+0x62>
    1bae:	88 0f       	add	r24, r24
    1bb0:	96 95       	lsr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	97 f9       	bld	r25, 7
    1bb6:	08 95       	ret

00001bb8 <__fp_cmp>:
    1bb8:	99 0f       	add	r25, r25
    1bba:	00 08       	sbc	r0, r0
    1bbc:	55 0f       	add	r21, r21
    1bbe:	aa 0b       	sbc	r26, r26
    1bc0:	e0 e8       	ldi	r30, 0x80	; 128
    1bc2:	fe ef       	ldi	r31, 0xFE	; 254
    1bc4:	16 16       	cp	r1, r22
    1bc6:	17 06       	cpc	r1, r23
    1bc8:	e8 07       	cpc	r30, r24
    1bca:	f9 07       	cpc	r31, r25
    1bcc:	c0 f0       	brcs	.+48     	; 0x1bfe <__fp_cmp+0x46>
    1bce:	12 16       	cp	r1, r18
    1bd0:	13 06       	cpc	r1, r19
    1bd2:	e4 07       	cpc	r30, r20
    1bd4:	f5 07       	cpc	r31, r21
    1bd6:	98 f0       	brcs	.+38     	; 0x1bfe <__fp_cmp+0x46>
    1bd8:	62 1b       	sub	r22, r18
    1bda:	73 0b       	sbc	r23, r19
    1bdc:	84 0b       	sbc	r24, r20
    1bde:	95 0b       	sbc	r25, r21
    1be0:	39 f4       	brne	.+14     	; 0x1bf0 <__fp_cmp+0x38>
    1be2:	0a 26       	eor	r0, r26
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <__fp_cmp+0x46>
    1be6:	23 2b       	or	r18, r19
    1be8:	24 2b       	or	r18, r20
    1bea:	25 2b       	or	r18, r21
    1bec:	21 f4       	brne	.+8      	; 0x1bf6 <__fp_cmp+0x3e>
    1bee:	08 95       	ret
    1bf0:	0a 26       	eor	r0, r26
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <__fp_cmp+0x3e>
    1bf4:	a1 40       	sbci	r26, 0x01	; 1
    1bf6:	a6 95       	lsr	r26
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	81 1d       	adc	r24, r1
    1bfc:	81 1d       	adc	r24, r1
    1bfe:	08 95       	ret

00001c00 <__fp_inf>:
    1c00:	97 f9       	bld	r25, 7
    1c02:	9f 67       	ori	r25, 0x7F	; 127
    1c04:	80 e8       	ldi	r24, 0x80	; 128
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <__fp_nan>:
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
    1c0e:	80 ec       	ldi	r24, 0xC0	; 192
    1c10:	08 95       	ret

00001c12 <__fp_pscA>:
    1c12:	00 24       	eor	r0, r0
    1c14:	0a 94       	dec	r0
    1c16:	16 16       	cp	r1, r22
    1c18:	17 06       	cpc	r1, r23
    1c1a:	18 06       	cpc	r1, r24
    1c1c:	09 06       	cpc	r0, r25
    1c1e:	08 95       	ret

00001c20 <__fp_pscB>:
    1c20:	00 24       	eor	r0, r0
    1c22:	0a 94       	dec	r0
    1c24:	12 16       	cp	r1, r18
    1c26:	13 06       	cpc	r1, r19
    1c28:	14 06       	cpc	r1, r20
    1c2a:	05 06       	cpc	r0, r21
    1c2c:	08 95       	ret

00001c2e <__fp_round>:
    1c2e:	09 2e       	mov	r0, r25
    1c30:	03 94       	inc	r0
    1c32:	00 0c       	add	r0, r0
    1c34:	11 f4       	brne	.+4      	; 0x1c3a <__fp_round+0xc>
    1c36:	88 23       	and	r24, r24
    1c38:	52 f0       	brmi	.+20     	; 0x1c4e <__fp_round+0x20>
    1c3a:	bb 0f       	add	r27, r27
    1c3c:	40 f4       	brcc	.+16     	; 0x1c4e <__fp_round+0x20>
    1c3e:	bf 2b       	or	r27, r31
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <__fp_round+0x18>
    1c42:	60 ff       	sbrs	r22, 0
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__fp_round+0x20>
    1c46:	6f 5f       	subi	r22, 0xFF	; 255
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	08 95       	ret

00001c50 <__fp_split3>:
    1c50:	57 fd       	sbrc	r21, 7
    1c52:	90 58       	subi	r25, 0x80	; 128
    1c54:	44 0f       	add	r20, r20
    1c56:	55 1f       	adc	r21, r21
    1c58:	59 f0       	breq	.+22     	; 0x1c70 <__fp_splitA+0x10>
    1c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <__fp_splitA+0x1a>
    1c5e:	47 95       	ror	r20

00001c60 <__fp_splitA>:
    1c60:	88 0f       	add	r24, r24
    1c62:	97 fb       	bst	r25, 7
    1c64:	99 1f       	adc	r25, r25
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <__fp_splitA+0x20>
    1c68:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <__fp_splitA+0x2a>
    1c6c:	87 95       	ror	r24
    1c6e:	08 95       	ret
    1c70:	12 16       	cp	r1, r18
    1c72:	13 06       	cpc	r1, r19
    1c74:	14 06       	cpc	r1, r20
    1c76:	55 1f       	adc	r21, r21
    1c78:	f2 cf       	rjmp	.-28     	; 0x1c5e <__fp_split3+0xe>
    1c7a:	46 95       	lsr	r20
    1c7c:	f1 df       	rcall	.-30     	; 0x1c60 <__fp_splitA>
    1c7e:	08 c0       	rjmp	.+16     	; 0x1c90 <__fp_splitA+0x30>
    1c80:	16 16       	cp	r1, r22
    1c82:	17 06       	cpc	r1, r23
    1c84:	18 06       	cpc	r1, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	f1 cf       	rjmp	.-30     	; 0x1c6c <__fp_splitA+0xc>
    1c8a:	86 95       	lsr	r24
    1c8c:	71 05       	cpc	r23, r1
    1c8e:	61 05       	cpc	r22, r1
    1c90:	08 94       	sec
    1c92:	08 95       	ret

00001c94 <__fp_zero>:
    1c94:	e8 94       	clt

00001c96 <__fp_szero>:
    1c96:	bb 27       	eor	r27, r27
    1c98:	66 27       	eor	r22, r22
    1c9a:	77 27       	eor	r23, r23
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	97 f9       	bld	r25, 7
    1ca0:	08 95       	ret

00001ca2 <__gesf2>:
    1ca2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_cmp>
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <__gesf2+0x8>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	08 95       	ret

00001cac <__mulsf3>:
    1cac:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsf3x>
    1cb0:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_round>
    1cb4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__fp_pscA>
    1cb8:	38 f0       	brcs	.+14     	; 0x1cc8 <__mulsf3+0x1c>
    1cba:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscB>
    1cbe:	20 f0       	brcs	.+8      	; 0x1cc8 <__mulsf3+0x1c>
    1cc0:	95 23       	and	r25, r21
    1cc2:	11 f0       	breq	.+4      	; 0x1cc8 <__mulsf3+0x1c>
    1cc4:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_inf>
    1cc8:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_nan>
    1ccc:	11 24       	eor	r1, r1
    1cce:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_szero>

00001cd2 <__mulsf3x>:
    1cd2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fp_split3>
    1cd6:	70 f3       	brcs	.-36     	; 0x1cb4 <__mulsf3+0x8>

00001cd8 <__mulsf3_pse>:
    1cd8:	95 9f       	mul	r25, r21
    1cda:	c1 f3       	breq	.-16     	; 0x1ccc <__mulsf3+0x20>
    1cdc:	95 0f       	add	r25, r21
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	55 1f       	adc	r21, r21
    1ce2:	62 9f       	mul	r22, r18
    1ce4:	f0 01       	movw	r30, r0
    1ce6:	72 9f       	mul	r23, r18
    1ce8:	bb 27       	eor	r27, r27
    1cea:	f0 0d       	add	r31, r0
    1cec:	b1 1d       	adc	r27, r1
    1cee:	63 9f       	mul	r22, r19
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	f0 0d       	add	r31, r0
    1cf4:	b1 1d       	adc	r27, r1
    1cf6:	aa 1f       	adc	r26, r26
    1cf8:	64 9f       	mul	r22, r20
    1cfa:	66 27       	eor	r22, r22
    1cfc:	b0 0d       	add	r27, r0
    1cfe:	a1 1d       	adc	r26, r1
    1d00:	66 1f       	adc	r22, r22
    1d02:	82 9f       	mul	r24, r18
    1d04:	22 27       	eor	r18, r18
    1d06:	b0 0d       	add	r27, r0
    1d08:	a1 1d       	adc	r26, r1
    1d0a:	62 1f       	adc	r22, r18
    1d0c:	73 9f       	mul	r23, r19
    1d0e:	b0 0d       	add	r27, r0
    1d10:	a1 1d       	adc	r26, r1
    1d12:	62 1f       	adc	r22, r18
    1d14:	83 9f       	mul	r24, r19
    1d16:	a0 0d       	add	r26, r0
    1d18:	61 1d       	adc	r22, r1
    1d1a:	22 1f       	adc	r18, r18
    1d1c:	74 9f       	mul	r23, r20
    1d1e:	33 27       	eor	r19, r19
    1d20:	a0 0d       	add	r26, r0
    1d22:	61 1d       	adc	r22, r1
    1d24:	23 1f       	adc	r18, r19
    1d26:	84 9f       	mul	r24, r20
    1d28:	60 0d       	add	r22, r0
    1d2a:	21 1d       	adc	r18, r1
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	76 2f       	mov	r23, r22
    1d30:	6a 2f       	mov	r22, r26
    1d32:	11 24       	eor	r1, r1
    1d34:	9f 57       	subi	r25, 0x7F	; 127
    1d36:	50 40       	sbci	r21, 0x00	; 0
    1d38:	9a f0       	brmi	.+38     	; 0x1d60 <__mulsf3_pse+0x88>
    1d3a:	f1 f0       	breq	.+60     	; 0x1d78 <__mulsf3_pse+0xa0>
    1d3c:	88 23       	and	r24, r24
    1d3e:	4a f0       	brmi	.+18     	; 0x1d52 <__mulsf3_pse+0x7a>
    1d40:	ee 0f       	add	r30, r30
    1d42:	ff 1f       	adc	r31, r31
    1d44:	bb 1f       	adc	r27, r27
    1d46:	66 1f       	adc	r22, r22
    1d48:	77 1f       	adc	r23, r23
    1d4a:	88 1f       	adc	r24, r24
    1d4c:	91 50       	subi	r25, 0x01	; 1
    1d4e:	50 40       	sbci	r21, 0x00	; 0
    1d50:	a9 f7       	brne	.-22     	; 0x1d3c <__mulsf3_pse+0x64>
    1d52:	9e 3f       	cpi	r25, 0xFE	; 254
    1d54:	51 05       	cpc	r21, r1
    1d56:	80 f0       	brcs	.+32     	; 0x1d78 <__mulsf3_pse+0xa0>
    1d58:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_inf>
    1d5c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_szero>
    1d60:	5f 3f       	cpi	r21, 0xFF	; 255
    1d62:	e4 f3       	brlt	.-8      	; 0x1d5c <__mulsf3_pse+0x84>
    1d64:	98 3e       	cpi	r25, 0xE8	; 232
    1d66:	d4 f3       	brlt	.-12     	; 0x1d5c <__mulsf3_pse+0x84>
    1d68:	86 95       	lsr	r24
    1d6a:	77 95       	ror	r23
    1d6c:	67 95       	ror	r22
    1d6e:	b7 95       	ror	r27
    1d70:	f7 95       	ror	r31
    1d72:	e7 95       	ror	r30
    1d74:	9f 5f       	subi	r25, 0xFF	; 255
    1d76:	c1 f7       	brne	.-16     	; 0x1d68 <__mulsf3_pse+0x90>
    1d78:	fe 2b       	or	r31, r30
    1d7a:	88 0f       	add	r24, r24
    1d7c:	91 1d       	adc	r25, r1
    1d7e:	96 95       	lsr	r25
    1d80:	87 95       	ror	r24
    1d82:	97 f9       	bld	r25, 7
    1d84:	08 95       	ret

00001d86 <__unordsf2>:
    1d86:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_cmp>
    1d8a:	88 0b       	sbc	r24, r24
    1d8c:	99 0b       	sbc	r25, r25
    1d8e:	08 95       	ret

00001d90 <__udivmodsi4>:
    1d90:	a1 e2       	ldi	r26, 0x21	; 33
    1d92:	1a 2e       	mov	r1, r26
    1d94:	aa 1b       	sub	r26, r26
    1d96:	bb 1b       	sub	r27, r27
    1d98:	fd 01       	movw	r30, r26
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <__udivmodsi4_ep>

00001d9c <__udivmodsi4_loop>:
    1d9c:	aa 1f       	adc	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	ee 1f       	adc	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	a2 17       	cp	r26, r18
    1da6:	b3 07       	cpc	r27, r19
    1da8:	e4 07       	cpc	r30, r20
    1daa:	f5 07       	cpc	r31, r21
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <__udivmodsi4_ep>
    1dae:	a2 1b       	sub	r26, r18
    1db0:	b3 0b       	sbc	r27, r19
    1db2:	e4 0b       	sbc	r30, r20
    1db4:	f5 0b       	sbc	r31, r21

00001db6 <__udivmodsi4_ep>:
    1db6:	66 1f       	adc	r22, r22
    1db8:	77 1f       	adc	r23, r23
    1dba:	88 1f       	adc	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	1a 94       	dec	r1
    1dc0:	69 f7       	brne	.-38     	; 0x1d9c <__udivmodsi4_loop>
    1dc2:	60 95       	com	r22
    1dc4:	70 95       	com	r23
    1dc6:	80 95       	com	r24
    1dc8:	90 95       	com	r25
    1dca:	9b 01       	movw	r18, r22
    1dcc:	ac 01       	movw	r20, r24
    1dce:	bd 01       	movw	r22, r26
    1dd0:	cf 01       	movw	r24, r30
    1dd2:	08 95       	ret

00001dd4 <__tablejump2__>:
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	05 90       	lpm	r0, Z+
    1dda:	f4 91       	lpm	r31, Z
    1ddc:	e0 2d       	mov	r30, r0
    1dde:	09 94       	ijmp

00001de0 <strcmp>:
    1de0:	fb 01       	movw	r30, r22
    1de2:	dc 01       	movw	r26, r24
    1de4:	8d 91       	ld	r24, X+
    1de6:	01 90       	ld	r0, Z+
    1de8:	80 19       	sub	r24, r0
    1dea:	01 10       	cpse	r0, r1
    1dec:	d9 f3       	breq	.-10     	; 0x1de4 <strcmp+0x4>
    1dee:	99 0b       	sbc	r25, r25
    1df0:	08 95       	ret

00001df2 <_exit>:
    1df2:	f8 94       	cli

00001df4 <__stop_program>:
    1df4:	ff cf       	rjmp	.-2      	; 0x1df4 <__stop_program>
