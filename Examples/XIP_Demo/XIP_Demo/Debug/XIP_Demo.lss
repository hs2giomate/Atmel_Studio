
XIP_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000794c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000794c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          00000068  20000064  000079b0  00020064  2**2
                  ALLOC
  5 .stack        00010004  200000cc  00007a18  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002377d  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003c19  00000000  00000000  00043868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c16d  00000000  00000000  00047481  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ac0  00000000  00000000  000535ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  000540ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036701  00000000  00000000  00054ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017229  00000000  00000000  0008b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001198fc  00000000  00000000  000a27e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021cc  00000000  00000000  001bc0e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 00 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	e5 0b 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1f4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	0000794c 	.word	0x0000794c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000794c 	.word	0x0000794c
     2c4:	20000068 	.word	0x20000068
     2c8:	0000794c 	.word	0x0000794c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	spi_nor_flash_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	000005f1 	.word	0x000005f1
     2e4:	00001431 	.word	0x00001431
     2e8:	0000151d 	.word	0x0000151d

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000794c 	.word	0x0000794c
     36c:	20000064 	.word	0x20000064
     370:	200000cc 	.word	0x200000cc
     374:	20000064 	.word	0x20000064
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	000016bd 	.word	0x000016bd
     384:	00001585 	.word	0x00001585

00000388 <QSPI_INSTANCE_PORT_init>:
struct qspi_sync_descriptor QSPI_INSTANCE;

struct usart_sync_descriptor EDBG_COM;

void QSPI_INSTANCE_PORT_init(void)
{
     388:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38a:	4b5a      	ldr	r3, [pc, #360]	; (4f4 <QSPI_INSTANCE_PORT_init+0x16c>)
     38c:	f44f 6500 	mov.w	r5, #2048	; 0x800
     390:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	4a58      	ldr	r2, [pc, #352]	; (4f8 <QSPI_INSTANCE_PORT_init+0x170>)
     396:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     39a:	4858      	ldr	r0, [pc, #352]	; (4fc <QSPI_INSTANCE_PORT_init+0x174>)
     39c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a0:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3a8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ac:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3bc:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3c0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3c4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3cc:	f44f 7280 	mov.w	r2, #256	; 0x100
     3d0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d2:	494b      	ldr	r1, [pc, #300]	; (500 <QSPI_INSTANCE_PORT_init+0x178>)
     3d4:	6299      	str	r1, [r3, #40]	; 0x28
     3d6:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     3da:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3dc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3de:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     3e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ea:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3fa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3fe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     402:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     40a:	f44f 7200 	mov.w	r2, #512	; 0x200
     40e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     410:	f501 7180 	add.w	r1, r1, #256	; 0x100
     414:	6299      	str	r1, [r3, #40]	; 0x28
     416:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     418:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     41a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     41e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     422:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     426:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     436:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     43a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     43e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     446:	f44f 6180 	mov.w	r1, #1024	; 0x400
     44a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     44c:	4a2d      	ldr	r2, [pc, #180]	; (504 <QSPI_INSTANCE_PORT_init+0x17c>)
     44e:	629a      	str	r2, [r3, #40]	; 0x28
     450:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     452:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     454:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     458:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     45c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     460:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     468:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     470:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     474:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     478:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     47c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     480:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     482:	4a21      	ldr	r2, [pc, #132]	; (508 <QSPI_INSTANCE_PORT_init+0x180>)
     484:	629a      	str	r2, [r3, #40]	; 0x28
     486:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     488:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     48e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     492:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     496:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ae:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4b6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ba:	4a14      	ldr	r2, [pc, #80]	; (50c <QSPI_INSTANCE_PORT_init+0x184>)
     4bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4c0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c4:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     4c8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4cc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d0:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4dc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e0:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ec:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     4f0:	bc30      	pop	{r4, r5}
     4f2:	4770      	bx	lr
     4f4:	41008000 	.word	0x41008000
     4f8:	40020800 	.word	0x40020800
     4fc:	c0020000 	.word	0xc0020000
     500:	40000100 	.word	0x40000100
     504:	40000400 	.word	0x40000400
     508:	40000800 	.word	0x40000800
     50c:	40020400 	.word	0x40020400

00000510 <QSPI_INSTANCE_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     510:	4b06      	ldr	r3, [pc, #24]	; (52c <QSPI_INSTANCE_CLOCK_init+0x1c>)
     512:	691a      	ldr	r2, [r3, #16]
     514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     518:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     51a:	691a      	ldr	r2, [r3, #16]
     51c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     520:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     522:	69da      	ldr	r2, [r3, #28]
     524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     528:	61da      	str	r2, [r3, #28]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     530:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <QSPI_INSTANCE_init+0x14>)
     534:	4798      	blx	r3
	qspi_sync_init(&QSPI_INSTANCE, QSPI);
     536:	4904      	ldr	r1, [pc, #16]	; (548 <QSPI_INSTANCE_init+0x18>)
     538:	4804      	ldr	r0, [pc, #16]	; (54c <QSPI_INSTANCE_init+0x1c>)
     53a:	4b05      	ldr	r3, [pc, #20]	; (550 <QSPI_INSTANCE_init+0x20>)
     53c:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     53e:	4b05      	ldr	r3, [pc, #20]	; (554 <QSPI_INSTANCE_init+0x24>)
     540:	4798      	blx	r3
     542:	bd08      	pop	{r3, pc}
     544:	00000511 	.word	0x00000511
     548:	42003400 	.word	0x42003400
     54c:	200000b0 	.word	0x200000b0
     550:	00000735 	.word	0x00000735
     554:	00000389 	.word	0x00000389

00000558 <EDBG_COM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     558:	4b10      	ldr	r3, [pc, #64]	; (59c <EDBG_COM_PORT_init+0x44>)
     55a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     55e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     562:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     566:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     56a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     56e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     572:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     576:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     57a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     57e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     582:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     586:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     58a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     58e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     592:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     596:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     59a:	4770      	bx	lr
     59c:	41008000 	.word	0x41008000

000005a0 <EDBG_COM_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     5a0:	4b06      	ldr	r3, [pc, #24]	; (5bc <EDBG_COM_CLOCK_init+0x1c>)
     5a2:	2240      	movs	r2, #64	; 0x40
     5a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5a8:	2241      	movs	r2, #65	; 0x41
     5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5ae:	4a04      	ldr	r2, [pc, #16]	; (5c0 <EDBG_COM_CLOCK_init+0x20>)
     5b0:	6993      	ldr	r3, [r2, #24]
     5b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5b6:	6193      	str	r3, [r2, #24]
     5b8:	4770      	bx	lr
     5ba:	bf00      	nop
     5bc:	40001c00 	.word	0x40001c00
     5c0:	40000800 	.word	0x40000800

000005c4 <EDBG_COM_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void EDBG_COM_init(void)
{
     5c4:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
     5c6:	4b05      	ldr	r3, [pc, #20]	; (5dc <EDBG_COM_init+0x18>)
     5c8:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, SERCOM2, (void *)NULL);
     5ca:	2200      	movs	r2, #0
     5cc:	4904      	ldr	r1, [pc, #16]	; (5e0 <EDBG_COM_init+0x1c>)
     5ce:	4805      	ldr	r0, [pc, #20]	; (5e4 <EDBG_COM_init+0x20>)
     5d0:	4b05      	ldr	r3, [pc, #20]	; (5e8 <EDBG_COM_init+0x24>)
     5d2:	4798      	blx	r3
	EDBG_COM_PORT_init();
     5d4:	4b05      	ldr	r3, [pc, #20]	; (5ec <EDBG_COM_init+0x28>)
     5d6:	4798      	blx	r3
     5d8:	bd08      	pop	{r3, pc}
     5da:	bf00      	nop
     5dc:	000005a1 	.word	0x000005a1
     5e0:	41012000 	.word	0x41012000
     5e4:	200000a4 	.word	0x200000a4
     5e8:	000008b9 	.word	0x000008b9
     5ec:	00000559 	.word	0x00000559

000005f0 <system_init>:
}

void system_init(void)
{
     5f0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5f2:	4b1b      	ldr	r3, [pc, #108]	; (660 <system_init+0x70>)
     5f4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5f6:	4b1b      	ldr	r3, [pc, #108]	; (664 <system_init+0x74>)
     5f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     600:	4919      	ldr	r1, [pc, #100]	; (668 <system_init+0x78>)
     602:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     606:	f101 2180 	add.w	r1, r1, #2147516416	; 0x80008000
     60a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     612:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
     616:	f041 0104 	orr.w	r1, r1, #4
     61a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     61e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     622:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     626:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62a:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     62e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     632:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     636:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     63a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     63e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     642:	4a0a      	ldr	r2, [pc, #40]	; (66c <system_init+0x7c>)
     644:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     648:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     64c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     650:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	QSPI_INSTANCE_init();
     654:	4b06      	ldr	r3, [pc, #24]	; (670 <system_init+0x80>)
     656:	4798      	blx	r3

	EDBG_COM_init();
     658:	4b06      	ldr	r3, [pc, #24]	; (674 <system_init+0x84>)
     65a:	4798      	blx	r3
     65c:	bd08      	pop	{r3, pc}
     65e:	bf00      	nop
     660:	000009b1 	.word	0x000009b1
     664:	41008000 	.word	0x41008000
     668:	40020000 	.word	0x40020000
     66c:	c0000004 	.word	0xc0000004
     670:	00000531 	.word	0x00000531
     674:	000005c5 	.word	0x000005c5

00000678 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     678:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     67c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     67e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     680:	f3bf 8f5f 	dmb	sy
     684:	4770      	bx	lr

00000686 <atomic_leave_critical>:
     686:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     68a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     68c:	f383 8810 	msr	PRIMASK, r3
     690:	4770      	bx	lr
	...

00000694 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     694:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     696:	4b04      	ldr	r3, [pc, #16]	; (6a8 <delay_us+0x14>)
     698:	681c      	ldr	r4, [r3, #0]
     69a:	4b04      	ldr	r3, [pc, #16]	; (6ac <delay_us+0x18>)
     69c:	4798      	blx	r3
     69e:	4601      	mov	r1, r0
     6a0:	4620      	mov	r0, r4
     6a2:	4b03      	ldr	r3, [pc, #12]	; (6b0 <delay_us+0x1c>)
     6a4:	4798      	blx	r3
     6a6:	bd10      	pop	{r4, pc}
     6a8:	20000080 	.word	0x20000080
     6ac:	00000971 	.word	0x00000971
     6b0:	000009a9 	.word	0x000009a9

000006b4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6b4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <delay_ms+0x14>)
     6b8:	681c      	ldr	r4, [r3, #0]
     6ba:	4b04      	ldr	r3, [pc, #16]	; (6cc <delay_ms+0x18>)
     6bc:	4798      	blx	r3
     6be:	4601      	mov	r1, r0
     6c0:	4620      	mov	r0, r4
     6c2:	4b03      	ldr	r3, [pc, #12]	; (6d0 <delay_ms+0x1c>)
     6c4:	4798      	blx	r3
     6c6:	bd10      	pop	{r4, pc}
     6c8:	20000080 	.word	0x20000080
     6cc:	00000989 	.word	0x00000989
     6d0:	000009a9 	.word	0x000009a9

000006d4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6d4:	b570      	push	{r4, r5, r6, lr}
     6d6:	460d      	mov	r5, r1
     6d8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     6da:	4604      	mov	r4, r0
     6dc:	b160      	cbz	r0, 6f8 <io_write+0x24>
     6de:	1c08      	adds	r0, r1, #0
     6e0:	bf18      	it	ne
     6e2:	2001      	movne	r0, #1
     6e4:	2234      	movs	r2, #52	; 0x34
     6e6:	4905      	ldr	r1, [pc, #20]	; (6fc <io_write+0x28>)
     6e8:	4b05      	ldr	r3, [pc, #20]	; (700 <io_write+0x2c>)
     6ea:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     6ec:	6823      	ldr	r3, [r4, #0]
     6ee:	4632      	mov	r2, r6
     6f0:	4629      	mov	r1, r5
     6f2:	4620      	mov	r0, r4
     6f4:	4798      	blx	r3
}
     6f6:	bd70      	pop	{r4, r5, r6, pc}
     6f8:	2000      	movs	r0, #0
     6fa:	e7f3      	b.n	6e4 <io_write+0x10>
     6fc:	000027e8 	.word	0x000027e8
     700:	0000092d 	.word	0x0000092d

00000704 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     704:	b570      	push	{r4, r5, r6, lr}
     706:	460d      	mov	r5, r1
     708:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     70a:	4604      	mov	r4, r0
     70c:	b160      	cbz	r0, 728 <io_read+0x24>
     70e:	1c08      	adds	r0, r1, #0
     710:	bf18      	it	ne
     712:	2001      	movne	r0, #1
     714:	223d      	movs	r2, #61	; 0x3d
     716:	4905      	ldr	r1, [pc, #20]	; (72c <io_read+0x28>)
     718:	4b05      	ldr	r3, [pc, #20]	; (730 <io_read+0x2c>)
     71a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     71c:	6863      	ldr	r3, [r4, #4]
     71e:	4632      	mov	r2, r6
     720:	4629      	mov	r1, r5
     722:	4620      	mov	r0, r4
     724:	4798      	blx	r3
}
     726:	bd70      	pop	{r4, r5, r6, pc}
     728:	2000      	movs	r0, #0
     72a:	e7f3      	b.n	714 <io_read+0x10>
     72c:	000027e8 	.word	0x000027e8
     730:	0000092d 	.word	0x0000092d

00000734 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     734:	b538      	push	{r3, r4, r5, lr}
     736:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     738:	4605      	mov	r5, r0
     73a:	b158      	cbz	r0, 754 <qspi_sync_init+0x20>
     73c:	1c08      	adds	r0, r1, #0
     73e:	bf18      	it	ne
     740:	2001      	movne	r0, #1
     742:	2231      	movs	r2, #49	; 0x31
     744:	4904      	ldr	r1, [pc, #16]	; (758 <qspi_sync_init+0x24>)
     746:	4b05      	ldr	r3, [pc, #20]	; (75c <qspi_sync_init+0x28>)
     748:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     74a:	4621      	mov	r1, r4
     74c:	4628      	mov	r0, r5
     74e:	4b04      	ldr	r3, [pc, #16]	; (760 <qspi_sync_init+0x2c>)
     750:	4798      	blx	r3
}
     752:	bd38      	pop	{r3, r4, r5, pc}
     754:	2000      	movs	r0, #0
     756:	e7f4      	b.n	742 <qspi_sync_init+0xe>
     758:	000027fc 	.word	0x000027fc
     75c:	0000092d 	.word	0x0000092d
     760:	00000abd 	.word	0x00000abd

00000764 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
     764:	b510      	push	{r4, lr}
	ASSERT(qspi);
     766:	4604      	mov	r4, r0
     768:	223f      	movs	r2, #63	; 0x3f
     76a:	4905      	ldr	r1, [pc, #20]	; (780 <qspi_sync_enable+0x1c>)
     76c:	3000      	adds	r0, #0
     76e:	bf18      	it	ne
     770:	2001      	movne	r0, #1
     772:	4b04      	ldr	r3, [pc, #16]	; (784 <qspi_sync_enable+0x20>)
     774:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
     776:	4620      	mov	r0, r4
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <qspi_sync_enable+0x24>)
     77a:	4798      	blx	r3
}
     77c:	bd10      	pop	{r4, pc}
     77e:	bf00      	nop
     780:	000027fc 	.word	0x000027fc
     784:	0000092d 	.word	0x0000092d
     788:	00000af9 	.word	0x00000af9

0000078c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
     78c:	b510      	push	{r4, lr}
	ASSERT(qspi);
     78e:	4604      	mov	r4, r0
     790:	2246      	movs	r2, #70	; 0x46
     792:	4905      	ldr	r1, [pc, #20]	; (7a8 <qspi_sync_disable+0x1c>)
     794:	3000      	adds	r0, #0
     796:	bf18      	it	ne
     798:	2001      	movne	r0, #1
     79a:	4b04      	ldr	r3, [pc, #16]	; (7ac <qspi_sync_disable+0x20>)
     79c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
     79e:	4620      	mov	r0, r4
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <qspi_sync_disable+0x24>)
     7a2:	4798      	blx	r3
}
     7a4:	bd10      	pop	{r4, pc}
     7a6:	bf00      	nop
     7a8:	000027fc 	.word	0x000027fc
     7ac:	0000092d 	.word	0x0000092d
     7b0:	00000b03 	.word	0x00000b03

000007b4 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
     7b4:	b538      	push	{r3, r4, r5, lr}
     7b6:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
     7b8:	4605      	mov	r5, r0
     7ba:	b158      	cbz	r0, 7d4 <qspi_sync_serial_run_command+0x20>
     7bc:	1c08      	adds	r0, r1, #0
     7be:	bf18      	it	ne
     7c0:	2001      	movne	r0, #1
     7c2:	224d      	movs	r2, #77	; 0x4d
     7c4:	4904      	ldr	r1, [pc, #16]	; (7d8 <qspi_sync_serial_run_command+0x24>)
     7c6:	4b05      	ldr	r3, [pc, #20]	; (7dc <qspi_sync_serial_run_command+0x28>)
     7c8:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
     7ca:	4621      	mov	r1, r4
     7cc:	4628      	mov	r0, r5
     7ce:	4b04      	ldr	r3, [pc, #16]	; (7e0 <qspi_sync_serial_run_command+0x2c>)
     7d0:	4798      	blx	r3
}
     7d2:	bd38      	pop	{r3, r4, r5, pc}
     7d4:	2000      	movs	r0, #0
     7d6:	e7f4      	b.n	7c2 <qspi_sync_serial_run_command+0xe>
     7d8:	000027fc 	.word	0x000027fc
     7dc:	0000092d 	.word	0x0000092d
     7e0:	00000b0d 	.word	0x00000b0d

000007e4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7e8:	460f      	mov	r7, r1
     7ea:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7ec:	4604      	mov	r4, r0
     7ee:	b328      	cbz	r0, 83c <usart_sync_write+0x58>
     7f0:	b331      	cbz	r1, 840 <usart_sync_write+0x5c>
     7f2:	1c10      	adds	r0, r2, #0
     7f4:	bf18      	it	ne
     7f6:	2001      	movne	r0, #1
     7f8:	22f1      	movs	r2, #241	; 0xf1
     7fa:	4912      	ldr	r1, [pc, #72]	; (844 <usart_sync_write+0x60>)
     7fc:	4b12      	ldr	r3, [pc, #72]	; (848 <usart_sync_write+0x64>)
     7fe:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     800:	3408      	adds	r4, #8
     802:	4d12      	ldr	r5, [pc, #72]	; (84c <usart_sync_write+0x68>)
     804:	4620      	mov	r0, r4
     806:	47a8      	blx	r5
     808:	2800      	cmp	r0, #0
     80a:	d0fb      	beq.n	804 <usart_sync_write+0x20>
     80c:	3f01      	subs	r7, #1
     80e:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     810:	f8df 9040 	ldr.w	r9, [pc, #64]	; 854 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     814:	4d0d      	ldr	r5, [pc, #52]	; (84c <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     816:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     81a:	4620      	mov	r0, r4
     81c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     81e:	4620      	mov	r0, r4
     820:	47a8      	blx	r5
     822:	2800      	cmp	r0, #0
     824:	d0fb      	beq.n	81e <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     826:	3601      	adds	r6, #1
     828:	4546      	cmp	r6, r8
     82a:	d3f4      	bcc.n	816 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     82c:	4d08      	ldr	r5, [pc, #32]	; (850 <usart_sync_write+0x6c>)
     82e:	4620      	mov	r0, r4
     830:	47a8      	blx	r5
     832:	2800      	cmp	r0, #0
     834:	d0fb      	beq.n	82e <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     836:	4630      	mov	r0, r6
     838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     83c:	2000      	movs	r0, #0
     83e:	e7db      	b.n	7f8 <usart_sync_write+0x14>
     840:	2000      	movs	r0, #0
     842:	e7d9      	b.n	7f8 <usart_sync_write+0x14>
     844:	00002818 	.word	0x00002818
     848:	0000092d 	.word	0x0000092d
     84c:	00000d5b 	.word	0x00000d5b
     850:	00000d65 	.word	0x00000d65
     854:	00000d4d 	.word	0x00000d4d

00000858 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     85c:	460f      	mov	r7, r1
     85e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     860:	4604      	mov	r4, r0
     862:	b1e0      	cbz	r0, 89e <usart_sync_read+0x46>
     864:	b1e9      	cbz	r1, 8a2 <usart_sync_read+0x4a>
     866:	1c10      	adds	r0, r2, #0
     868:	bf18      	it	ne
     86a:	2001      	movne	r0, #1
     86c:	f44f 7286 	mov.w	r2, #268	; 0x10c
     870:	490d      	ldr	r1, [pc, #52]	; (8a8 <usart_sync_read+0x50>)
     872:	4b0e      	ldr	r3, [pc, #56]	; (8ac <usart_sync_read+0x54>)
     874:	4798      	blx	r3
     876:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     878:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     87a:	3408      	adds	r4, #8
     87c:	4d0c      	ldr	r5, [pc, #48]	; (8b0 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     87e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8b4 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     882:	4620      	mov	r0, r4
     884:	47a8      	blx	r5
     886:	2800      	cmp	r0, #0
     888:	d0fb      	beq.n	882 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     88a:	4620      	mov	r0, r4
     88c:	47c8      	blx	r9
     88e:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     892:	3601      	adds	r6, #1
     894:	4546      	cmp	r6, r8
     896:	d3f4      	bcc.n	882 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     898:	4630      	mov	r0, r6
     89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     89e:	2000      	movs	r0, #0
     8a0:	e7e4      	b.n	86c <usart_sync_read+0x14>
     8a2:	2000      	movs	r0, #0
     8a4:	e7e2      	b.n	86c <usart_sync_read+0x14>
     8a6:	bf00      	nop
     8a8:	00002818 	.word	0x00002818
     8ac:	0000092d 	.word	0x0000092d
     8b0:	00000d6f 	.word	0x00000d6f
     8b4:	00000d53 	.word	0x00000d53

000008b8 <usart_sync_init>:
{
     8b8:	b538      	push	{r3, r4, r5, lr}
     8ba:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     8bc:	4604      	mov	r4, r0
     8be:	b198      	cbz	r0, 8e8 <usart_sync_init+0x30>
     8c0:	1c08      	adds	r0, r1, #0
     8c2:	bf18      	it	ne
     8c4:	2001      	movne	r0, #1
     8c6:	2234      	movs	r2, #52	; 0x34
     8c8:	4908      	ldr	r1, [pc, #32]	; (8ec <usart_sync_init+0x34>)
     8ca:	4b09      	ldr	r3, [pc, #36]	; (8f0 <usart_sync_init+0x38>)
     8cc:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     8ce:	4629      	mov	r1, r5
     8d0:	f104 0008 	add.w	r0, r4, #8
     8d4:	4b07      	ldr	r3, [pc, #28]	; (8f4 <usart_sync_init+0x3c>)
     8d6:	4798      	blx	r3
	if (init_status) {
     8d8:	4603      	mov	r3, r0
     8da:	b918      	cbnz	r0, 8e4 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     8dc:	4a06      	ldr	r2, [pc, #24]	; (8f8 <usart_sync_init+0x40>)
     8de:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     8e0:	4a06      	ldr	r2, [pc, #24]	; (8fc <usart_sync_init+0x44>)
     8e2:	6022      	str	r2, [r4, #0]
}
     8e4:	4618      	mov	r0, r3
     8e6:	bd38      	pop	{r3, r4, r5, pc}
     8e8:	2000      	movs	r0, #0
     8ea:	e7ec      	b.n	8c6 <usart_sync_init+0xe>
     8ec:	00002818 	.word	0x00002818
     8f0:	0000092d 	.word	0x0000092d
     8f4:	00000d0d 	.word	0x00000d0d
     8f8:	00000859 	.word	0x00000859
     8fc:	000007e5 	.word	0x000007e5

00000900 <usart_sync_enable>:
{
     900:	b510      	push	{r4, lr}
	ASSERT(descr);
     902:	4604      	mov	r4, r0
     904:	2253      	movs	r2, #83	; 0x53
     906:	4906      	ldr	r1, [pc, #24]	; (920 <usart_sync_enable+0x20>)
     908:	3000      	adds	r0, #0
     90a:	bf18      	it	ne
     90c:	2001      	movne	r0, #1
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <usart_sync_enable+0x24>)
     910:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     912:	f104 0008 	add.w	r0, r4, #8
     916:	4b04      	ldr	r3, [pc, #16]	; (928 <usart_sync_enable+0x28>)
     918:	4798      	blx	r3
}
     91a:	2000      	movs	r0, #0
     91c:	bd10      	pop	{r4, pc}
     91e:	bf00      	nop
     920:	00002818 	.word	0x00002818
     924:	0000092d 	.word	0x0000092d
     928:	00000d39 	.word	0x00000d39

0000092c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     92c:	b900      	cbnz	r0, 930 <assert+0x4>
		__asm("BKPT #0");
     92e:	be00      	bkpt	0x0000
     930:	4770      	bx	lr
	...

00000934 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     934:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     936:	4a06      	ldr	r2, [pc, #24]	; (950 <_sbrk+0x1c>)
     938:	6812      	ldr	r2, [r2, #0]
     93a:	b122      	cbz	r2, 946 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     93c:	4a04      	ldr	r2, [pc, #16]	; (950 <_sbrk+0x1c>)
     93e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     940:	4403      	add	r3, r0
     942:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     944:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     946:	4903      	ldr	r1, [pc, #12]	; (954 <_sbrk+0x20>)
     948:	4a01      	ldr	r2, [pc, #4]	; (950 <_sbrk+0x1c>)
     94a:	6011      	str	r1, [r2, #0]
     94c:	e7f6      	b.n	93c <_sbrk+0x8>
     94e:	bf00      	nop
     950:	20000084 	.word	0x20000084
     954:	200100d0 	.word	0x200100d0

00000958 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     958:	f04f 30ff 	mov.w	r0, #4294967295
     95c:	4770      	bx	lr

0000095e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     95e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     962:	604b      	str	r3, [r1, #4]

	return 0;
}
     964:	2000      	movs	r0, #0
     966:	4770      	bx	lr

00000968 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     968:	2001      	movs	r0, #1
     96a:	4770      	bx	lr

0000096c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     96c:	2000      	movs	r0, #0
     96e:	4770      	bx	lr

00000970 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     970:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     974:	00c0      	lsls	r0, r0, #3
     976:	3002      	adds	r0, #2
     978:	4b02      	ldr	r3, [pc, #8]	; (984 <_get_cycles_for_us+0x14>)
     97a:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     97e:	0840      	lsrs	r0, r0, #1
     980:	4770      	bx	lr
     982:	bf00      	nop
     984:	aaaaaaab 	.word	0xaaaaaaab

00000988 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     988:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     98c:	00c3      	lsls	r3, r0, #3
     98e:	3302      	adds	r3, #2
     990:	4804      	ldr	r0, [pc, #16]	; (9a4 <_get_cycles_for_ms+0x1c>)
     992:	fba0 2303 	umull	r2, r3, r0, r3
     996:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     99c:	fb00 f003 	mul.w	r0, r0, r3
     9a0:	4770      	bx	lr
     9a2:	bf00      	nop
     9a4:	aaaaaaab 	.word	0xaaaaaaab

000009a8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     9a8:	3901      	subs	r1, #1
     9aa:	d8fd      	bhi.n	9a8 <_delay_cycles>
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop

000009b0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     9b0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     9b2:	4a0a      	ldr	r2, [pc, #40]	; (9dc <_init_chip+0x2c>)
     9b4:	8813      	ldrh	r3, [r2, #0]
     9b6:	b29b      	uxth	r3, r3
     9b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9bc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     9be:	4b08      	ldr	r3, [pc, #32]	; (9e0 <_init_chip+0x30>)
     9c0:	4798      	blx	r3
	_oscctrl_init_sources();
     9c2:	4b08      	ldr	r3, [pc, #32]	; (9e4 <_init_chip+0x34>)
     9c4:	4798      	blx	r3
	_mclk_init();
     9c6:	4b08      	ldr	r3, [pc, #32]	; (9e8 <_init_chip+0x38>)
     9c8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     9ca:	2002      	movs	r0, #2
     9cc:	4c07      	ldr	r4, [pc, #28]	; (9ec <_init_chip+0x3c>)
     9ce:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     9d0:	4b07      	ldr	r3, [pc, #28]	; (9f0 <_init_chip+0x40>)
     9d2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     9d4:	f640 70fd 	movw	r0, #4093	; 0xffd
     9d8:	47a0      	blx	r4
     9da:	bd10      	pop	{r4, pc}
     9dc:	41004000 	.word	0x41004000
     9e0:	00000a41 	.word	0x00000a41
     9e4:	00000a55 	.word	0x00000a55
     9e8:	00000a35 	.word	0x00000a35
     9ec:	000009f5 	.word	0x000009f5
     9f0:	00000a71 	.word	0x00000a71

000009f4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     9f4:	f010 0f01 	tst.w	r0, #1
     9f8:	d008      	beq.n	a0c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9fa:	4a0b      	ldr	r2, [pc, #44]	; (a28 <_gclk_init_generators_by_fref+0x34>)
     9fc:	4b0b      	ldr	r3, [pc, #44]	; (a2c <_gclk_init_generators_by_fref+0x38>)
     9fe:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a00:	4619      	mov	r1, r3
     a02:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a06:	684b      	ldr	r3, [r1, #4]
     a08:	4213      	tst	r3, r2
     a0a:	d1fc      	bne.n	a06 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     a0c:	f010 0f02 	tst.w	r0, #2
     a10:	d008      	beq.n	a24 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a12:	4a07      	ldr	r2, [pc, #28]	; (a30 <_gclk_init_generators_by_fref+0x3c>)
     a14:	4b05      	ldr	r3, [pc, #20]	; (a2c <_gclk_init_generators_by_fref+0x38>)
     a16:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a18:	4619      	mov	r1, r3
     a1a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a1e:	684b      	ldr	r3, [r1, #4]
     a20:	4213      	tst	r3, r2
     a22:	d1fc      	bne.n	a1e <_gclk_init_generators_by_fref+0x2a>
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	00010107 	.word	0x00010107
     a2c:	40001c00 	.word	0x40001c00
     a30:	00060101 	.word	0x00060101

00000a34 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     a34:	2201      	movs	r2, #1
     a36:	4b01      	ldr	r3, [pc, #4]	; (a3c <_mclk_init+0x8>)
     a38:	715a      	strb	r2, [r3, #5]
     a3a:	4770      	bx	lr
     a3c:	40000800 	.word	0x40000800

00000a40 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     a40:	4b03      	ldr	r3, [pc, #12]	; (a50 <_osc32kctrl_init_sources+0x10>)
     a42:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     a44:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     a48:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     a4a:	2200      	movs	r2, #0
     a4c:	741a      	strb	r2, [r3, #16]
     a4e:	4770      	bx	lr
     a50:	40001400 	.word	0x40001400

00000a54 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     a54:	4a04      	ldr	r2, [pc, #16]	; (a68 <_oscctrl_init_sources+0x14>)
     a56:	4b05      	ldr	r3, [pc, #20]	; (a6c <_oscctrl_init_sources+0x18>)
     a58:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     a5a:	461a      	mov	r2, r3
     a5c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     a5e:	f013 0f02 	tst.w	r3, #2
     a62:	d0fb      	beq.n	a5c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     a64:	4770      	bx	lr
     a66:	bf00      	nop
     a68:	03002606 	.word	0x03002606
     a6c:	40001000 	.word	0x40001000

00000a70 <_oscctrl_init_referenced_generators>:
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     a70:	2241      	movs	r2, #65	; 0x41
     a72:	4b10      	ldr	r3, [pc, #64]	; (ab4 <_oscctrl_init_referenced_generators+0x44>)
     a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     a78:	223b      	movs	r2, #59	; 0x3b
     a7a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
     a7e:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     a80:	461a      	mov	r2, r3
     a82:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     a84:	f013 0f06 	tst.w	r3, #6
     a88:	d1fb      	bne.n	a82 <_oscctrl_init_referenced_generators+0x12>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     a8a:	4b0b      	ldr	r3, [pc, #44]	; (ab8 <_oscctrl_init_referenced_generators+0x48>)
     a8c:	2200      	movs	r2, #0
     a8e:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     a90:	2202      	movs	r2, #2
     a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     a96:	461a      	mov	r2, r3
     a98:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     a9a:	f013 0f02 	tst.w	r3, #2
     a9e:	d1fb      	bne.n	a98 <_oscctrl_init_referenced_generators+0x28>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     aa0:	4b05      	ldr	r3, [pc, #20]	; (ab8 <_oscctrl_init_referenced_generators+0x48>)
     aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
     aa4:	f012 0f01 	tst.w	r2, #1
     aa8:	d103      	bne.n	ab2 <_oscctrl_init_referenced_generators+0x42>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     aac:	f012 0f02 	tst.w	r2, #2
     ab0:	d0f7      	beq.n	aa2 <_oscctrl_init_referenced_generators+0x32>
     ab2:	4770      	bx	lr
     ab4:	40001c00 	.word	0x40001c00
     ab8:	40001000 	.word	0x40001000

00000abc <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
     abc:	b538      	push	{r3, r4, r5, lr}
     abe:	460c      	mov	r4, r1
	ASSERT(dev && hw);
     ac0:	4605      	mov	r5, r0
     ac2:	b178      	cbz	r0, ae4 <_qspi_sync_init+0x28>
     ac4:	1c08      	adds	r0, r1, #0
     ac6:	bf18      	it	ne
     ac8:	2001      	movne	r0, #1
     aca:	2240      	movs	r2, #64	; 0x40
     acc:	4906      	ldr	r1, [pc, #24]	; (ae8 <_qspi_sync_init+0x2c>)
     ace:	4b07      	ldr	r3, [pc, #28]	; (aec <_qspi_sync_init+0x30>)
     ad0:	4798      	blx	r3
	dev->prvt = hw;
     ad2:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
     ad4:	2301      	movs	r3, #1
     ad6:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <_qspi_sync_init+0x34>)
     ada:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <_qspi_sync_init+0x38>)
     ade:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
     ae0:	2000      	movs	r0, #0
     ae2:	bd38      	pop	{r3, r4, r5, pc}
     ae4:	2000      	movs	r0, #0
     ae6:	e7f0      	b.n	aca <_qspi_sync_init+0xe>
     ae8:	00002834 	.word	0x00002834
     aec:	0000092d 	.word	0x0000092d
     af0:	06000011 	.word	0x06000011
     af4:	00240100 	.word	0x00240100

00000af8 <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
     af8:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
     afa:	2202      	movs	r2, #2
     afc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
     afe:	2000      	movs	r0, #0
     b00:	4770      	bx	lr

00000b02 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
     b02:	6803      	ldr	r3, [r0, #0]
     b04:	2000      	movs	r0, #0
     b06:	6018      	str	r0, [r3, #0]
	return ERR_NONE;
}
     b08:	4770      	bx	lr
	...

00000b0c <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	4605      	mov	r5, r0
     b10:	460c      	mov	r4, r1
	void *hw = dev->prvt;
     b12:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
     b14:	780a      	ldrb	r2, [r1, #0]
     b16:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
     b1a:	bf1c      	itt	ne
     b1c:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
     b1e:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
     b20:	780a      	ldrb	r2, [r1, #0]
     b22:	f012 0f10 	tst.w	r2, #16
     b26:	d005      	beq.n	b34 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
     b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
     b2a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
     b2e:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
     b30:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
     b32:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
     b34:	7822      	ldrb	r2, [r4, #0]
     b36:	f012 0f40 	tst.w	r2, #64	; 0x40
     b3a:	d006      	beq.n	b4a <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
     b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
     b3e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
     b42:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
     b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
     b48:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
     b4a:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
     b4c:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
     b4e:	7823      	ldrb	r3, [r4, #0]
     b50:	f013 0f80 	tst.w	r3, #128	; 0x80
     b54:	d10c      	bne.n	b70 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
     b56:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
     b58:	4a1f      	ldr	r2, [pc, #124]	; (bd8 <_qspi_sync_serial_run_command+0xcc>)
     b5a:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
     b5c:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
     b5e:	69d3      	ldr	r3, [r2, #28]
     b60:	f413 6f80 	tst.w	r3, #1024	; 0x400
     b64:	d0fb      	beq.n	b5e <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
     b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
     b6a:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
     b6c:	2000      	movs	r0, #0
     b6e:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
     b70:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
     b72:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
     b76:	bf1a      	itte	ne
     b78:	68a2      	ldrne	r2, [r4, #8]
     b7a:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
     b7e:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
     b82:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
     b84:	6923      	ldr	r3, [r4, #16]
     b86:	b1ab      	cbz	r3, bb4 <_qspi_sync_serial_run_command+0xa8>
     b88:	2001      	movs	r0, #1
     b8a:	2282      	movs	r2, #130	; 0x82
     b8c:	4913      	ldr	r1, [pc, #76]	; (bdc <_qspi_sync_serial_run_command+0xd0>)
     b8e:	4b14      	ldr	r3, [pc, #80]	; (be0 <_qspi_sync_serial_run_command+0xd4>)
     b90:	4798      	blx	r3
	if (cmd->tx_buf) {
     b92:	6923      	ldr	r3, [r4, #16]
     b94:	b19b      	cbz	r3, bbe <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
     b96:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
     b98:	b138      	cbz	r0, baa <_qspi_sync_serial_run_command+0x9e>
     b9a:	1e72      	subs	r2, r6, #1
     b9c:	4418      	add	r0, r3
		*dst++ = *src++;
     b9e:	f813 1b01 	ldrb.w	r1, [r3], #1
     ba2:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
     ba6:	4283      	cmp	r3, r0
     ba8:	d1f9      	bne.n	b9e <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
     baa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     bae:	f3bf 8f6f 	isb	sy
     bb2:	e7d0      	b.n	b56 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
     bb4:	6960      	ldr	r0, [r4, #20]
     bb6:	3000      	adds	r0, #0
     bb8:	bf18      	it	ne
     bba:	2001      	movne	r0, #1
     bbc:	e7e5      	b.n	b8a <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
     bbe:	6963      	ldr	r3, [r4, #20]
     bc0:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
     bc2:	2900      	cmp	r1, #0
     bc4:	d0f1      	beq.n	baa <_qspi_sync_serial_run_command+0x9e>
     bc6:	3b01      	subs	r3, #1
     bc8:	4431      	add	r1, r6
		*dst++ = *src++;
     bca:	f816 2b01 	ldrb.w	r2, [r6], #1
     bce:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
     bd2:	42b1      	cmp	r1, r6
     bd4:	d1f9      	bne.n	bca <_qspi_sync_serial_run_command+0xbe>
     bd6:	e7e8      	b.n	baa <_qspi_sync_serial_run_command+0x9e>
     bd8:	01000002 	.word	0x01000002
     bdc:	00002834 	.word	0x00002834
     be0:	0000092d 	.word	0x0000092d

00000be4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     be4:	b500      	push	{lr}
     be6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     be8:	4b0d      	ldr	r3, [pc, #52]	; (c20 <RAMECC_Handler+0x3c>)
     bea:	789b      	ldrb	r3, [r3, #2]
     bec:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     bee:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     bf0:	9b01      	ldr	r3, [sp, #4]
     bf2:	f013 0f02 	tst.w	r3, #2
     bf6:	d006      	beq.n	c06 <RAMECC_Handler+0x22>
     bf8:	4b0a      	ldr	r3, [pc, #40]	; (c24 <RAMECC_Handler+0x40>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	b11b      	cbz	r3, c06 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     bfe:	4a08      	ldr	r2, [pc, #32]	; (c20 <RAMECC_Handler+0x3c>)
     c00:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     c02:	4798      	blx	r3
     c04:	e009      	b.n	c1a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     c06:	9b01      	ldr	r3, [sp, #4]
     c08:	f013 0f01 	tst.w	r3, #1
     c0c:	d005      	beq.n	c1a <RAMECC_Handler+0x36>
     c0e:	4b05      	ldr	r3, [pc, #20]	; (c24 <RAMECC_Handler+0x40>)
     c10:	685b      	ldr	r3, [r3, #4]
     c12:	b113      	cbz	r3, c1a <RAMECC_Handler+0x36>
     c14:	4a02      	ldr	r2, [pc, #8]	; (c20 <RAMECC_Handler+0x3c>)
     c16:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     c18:	4798      	blx	r3
	} else {
		return;
	}
}
     c1a:	b003      	add	sp, #12
     c1c:	f85d fb04 	ldr.w	pc, [sp], #4
     c20:	41020000 	.word	0x41020000
     c24:	200000b4 	.word	0x200000b4

00000c28 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     c28:	b470      	push	{r4, r5, r6}
     c2a:	b089      	sub	sp, #36	; 0x24
     c2c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     c2e:	466c      	mov	r4, sp
     c30:	4d0d      	ldr	r5, [pc, #52]	; (c68 <_sercom_get_hardware_index+0x40>)
     c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     c36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c3e:	9b00      	ldr	r3, [sp, #0]
     c40:	42b3      	cmp	r3, r6
     c42:	d00d      	beq.n	c60 <_sercom_get_hardware_index+0x38>
     c44:	4631      	mov	r1, r6
     c46:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c48:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c4a:	f853 2b04 	ldr.w	r2, [r3], #4
     c4e:	428a      	cmp	r2, r1
     c50:	d007      	beq.n	c62 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c52:	3001      	adds	r0, #1
     c54:	2808      	cmp	r0, #8
     c56:	d1f8      	bne.n	c4a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     c58:	2000      	movs	r0, #0
}
     c5a:	b009      	add	sp, #36	; 0x24
     c5c:	bc70      	pop	{r4, r5, r6}
     c5e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c60:	2000      	movs	r0, #0
			return i;
     c62:	b2c0      	uxtb	r0, r0
     c64:	e7f9      	b.n	c5a <_sercom_get_hardware_index+0x32>
     c66:	bf00      	nop
     c68:	0000284c 	.word	0x0000284c

00000c6c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     c6c:	b510      	push	{r4, lr}
     c6e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     c70:	4b21      	ldr	r3, [pc, #132]	; (cf8 <_usart_init+0x8c>)
     c72:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     c74:	2802      	cmp	r0, #2
     c76:	d005      	beq.n	c84 <_usart_init+0x18>
	ASSERT(false);
     c78:	f240 2247 	movw	r2, #583	; 0x247
     c7c:	491f      	ldr	r1, [pc, #124]	; (cfc <_usart_init+0x90>)
     c7e:	2000      	movs	r0, #0
     c80:	4b1f      	ldr	r3, [pc, #124]	; (d00 <_usart_init+0x94>)
     c82:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     c84:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     c86:	f013 0f01 	tst.w	r3, #1
     c8a:	d119      	bne.n	cc0 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c8c:	69e3      	ldr	r3, [r4, #28]
     c8e:	f013 0f03 	tst.w	r3, #3
     c92:	d1fb      	bne.n	c8c <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c94:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     c96:	f013 0f02 	tst.w	r3, #2
     c9a:	d00b      	beq.n	cb4 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c9c:	6823      	ldr	r3, [r4, #0]
     c9e:	f023 0302 	bic.w	r3, r3, #2
     ca2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ca4:	69e3      	ldr	r3, [r4, #28]
     ca6:	f013 0f03 	tst.w	r3, #3
     caa:	d1fb      	bne.n	ca4 <_usart_init+0x38>
     cac:	69e3      	ldr	r3, [r4, #28]
     cae:	f013 0f02 	tst.w	r3, #2
     cb2:	d1fb      	bne.n	cac <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cb4:	2305      	movs	r3, #5
     cb6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cb8:	69e3      	ldr	r3, [r4, #28]
     cba:	f013 0f03 	tst.w	r3, #3
     cbe:	d1fb      	bne.n	cb8 <_usart_init+0x4c>
     cc0:	69e3      	ldr	r3, [r4, #28]
     cc2:	f013 0f01 	tst.w	r3, #1
     cc6:	d1fb      	bne.n	cc0 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cc8:	4b0e      	ldr	r3, [pc, #56]	; (d04 <_usart_init+0x98>)
     cca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ccc:	69e3      	ldr	r3, [r4, #28]
     cce:	f013 0f03 	tst.w	r3, #3
     cd2:	d1fb      	bne.n	ccc <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     cd4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     cd8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cda:	69e3      	ldr	r3, [r4, #28]
     cdc:	f013 0f1f 	tst.w	r3, #31
     ce0:	d1fb      	bne.n	cda <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     ce2:	4b09      	ldr	r3, [pc, #36]	; (d08 <_usart_init+0x9c>)
     ce4:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     ce6:	f64f 4311 	movw	r3, #64529	; 0xfc11
     cea:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     cec:	2000      	movs	r0, #0
     cee:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     cf0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     cf4:	bd10      	pop	{r4, pc}
     cf6:	bf00      	nop
     cf8:	00000c29 	.word	0x00000c29
     cfc:	00002884 	.word	0x00002884
     d00:	0000092d 	.word	0x0000092d
     d04:	40100004 	.word	0x40100004
     d08:	00700002 	.word	0x00700002

00000d0c <_usart_sync_init>:
{
     d0c:	b538      	push	{r3, r4, r5, lr}
     d0e:	460c      	mov	r4, r1
	ASSERT(device);
     d10:	4605      	mov	r5, r0
     d12:	22bb      	movs	r2, #187	; 0xbb
     d14:	4905      	ldr	r1, [pc, #20]	; (d2c <_usart_sync_init+0x20>)
     d16:	3000      	adds	r0, #0
     d18:	bf18      	it	ne
     d1a:	2001      	movne	r0, #1
     d1c:	4b04      	ldr	r3, [pc, #16]	; (d30 <_usart_sync_init+0x24>)
     d1e:	4798      	blx	r3
	device->hw = hw;
     d20:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     d22:	4620      	mov	r0, r4
     d24:	4b03      	ldr	r3, [pc, #12]	; (d34 <_usart_sync_init+0x28>)
     d26:	4798      	blx	r3
}
     d28:	bd38      	pop	{r3, r4, r5, pc}
     d2a:	bf00      	nop
     d2c:	00002884 	.word	0x00002884
     d30:	0000092d 	.word	0x0000092d
     d34:	00000c6d 	.word	0x00000c6d

00000d38 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     d38:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d3a:	6813      	ldr	r3, [r2, #0]
     d3c:	f043 0302 	orr.w	r3, r3, #2
     d40:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d42:	69d3      	ldr	r3, [r2, #28]
     d44:	f013 0f03 	tst.w	r3, #3
     d48:	d1fb      	bne.n	d42 <_usart_sync_enable+0xa>
}
     d4a:	4770      	bx	lr

00000d4c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     d4c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     d4e:	6299      	str	r1, [r3, #40]	; 0x28
     d50:	4770      	bx	lr

00000d52 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     d52:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     d54:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     d56:	b2c0      	uxtb	r0, r0
     d58:	4770      	bx	lr

00000d5a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     d5a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d5c:	7e18      	ldrb	r0, [r3, #24]
}
     d5e:	f000 0001 	and.w	r0, r0, #1
     d62:	4770      	bx	lr

00000d64 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     d64:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     d66:	7e18      	ldrb	r0, [r3, #24]
}
     d68:	f3c0 0040 	ubfx	r0, r0, #1, #1
     d6c:	4770      	bx	lr

00000d6e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     d6e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d70:	7e18      	ldrb	r0, [r3, #24]
}
     d72:	f3c0 0080 	ubfx	r0, r0, #2, #1
     d76:	4770      	bx	lr

00000d78 <n25q256a_read>:
	n25q256a_switch_mode(me, quad_mode);
	return me;
}

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
     d78:	b570      	push	{r4, r5, r6, lr}
     d7a:	b086      	sub	sp, #24
	struct n25q256a *            n25q  = (struct n25q256a *)me;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
     d7c:	6806      	ldr	r6, [r0, #0]

	struct _qspi_command cmd = {
     d7e:	2400      	movs	r4, #0
     d80:	9400      	str	r4, [sp, #0]
     d82:	9401      	str	r4, [sp, #4]
     d84:	9404      	str	r4, [sp, #16]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
     d86:	7b00      	ldrb	r0, [r0, #12]
     d88:	bb10      	cbnz	r0, dd0 <n25q256a_read+0x58>
	struct _qspi_command cmd = {
     d8a:	f89d 4000 	ldrb.w	r4, [sp]
     d8e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
     d92:	f044 04b0 	orr.w	r4, r4, #176	; 0xb0
     d96:	f88d 4000 	strb.w	r4, [sp]
     d9a:	f89d 0001 	ldrb.w	r0, [sp, #1]
     d9e:	2401      	movs	r4, #1
     da0:	f364 1005 	bfi	r0, r4, #4, #2
     da4:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
     da8:	2508      	movs	r5, #8
	struct _qspi_command cmd = {
     daa:	f89d 4002 	ldrb.w	r4, [sp, #2]
     dae:	f365 0404 	bfi	r4, r5, #0, #5
     db2:	f88d 4002 	strb.w	r4, [sp, #2]
     db6:	200b      	movs	r0, #11
     db8:	f88d 0004 	strb.w	r0, [sp, #4]
     dbc:	9202      	str	r2, [sp, #8]
     dbe:	9303      	str	r3, [sp, #12]
     dc0:	9105      	str	r1, [sp, #20]
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
     dc2:	4669      	mov	r1, sp
     dc4:	4630      	mov	r0, r6
     dc6:	4b0b      	ldr	r3, [pc, #44]	; (df4 <n25q256a_read+0x7c>)
     dc8:	4798      	blx	r3
	return ERR_NONE;
}
     dca:	2000      	movs	r0, #0
     dcc:	b006      	add	sp, #24
     dce:	bd70      	pop	{r4, r5, r6, pc}
	struct _qspi_command cmd = {
     dd0:	f89d 4000 	ldrb.w	r4, [sp]
     dd4:	2006      	movs	r0, #6
     dd6:	f360 0402 	bfi	r4, r0, #0, #3
     dda:	f064 044f 	orn	r4, r4, #79	; 0x4f
     dde:	f88d 4000 	strb.w	r4, [sp]
     de2:	f89d 0001 	ldrb.w	r0, [sp, #1]
     de6:	2401      	movs	r4, #1
     de8:	f364 1005 	bfi	r0, r4, #4, #2
     dec:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
     df0:	250a      	movs	r5, #10
     df2:	e7da      	b.n	daa <n25q256a_read+0x32>
     df4:	000007b5 	.word	0x000007b5

00000df8 <n25q256a_xip_confirm>:
{
     df8:	b530      	push	{r4, r5, lr}
     dfa:	b089      	sub	sp, #36	; 0x24
     dfc:	4604      	mov	r4, r0
     dfe:	460d      	mov	r5, r1
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
     e00:	6800      	ldr	r0, [r0, #0]
	struct _qspi_command         cmd
     e02:	2300      	movs	r3, #0
     e04:	9301      	str	r3, [sp, #4]
     e06:	9302      	str	r3, [sp, #8]
     e08:	9303      	str	r3, [sp, #12]
     e0a:	9305      	str	r3, [sp, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
     e0c:	7b23      	ldrb	r3, [r4, #12]
     e0e:	bb7b      	cbnz	r3, e70 <n25q256a_xip_confirm+0x78>
	struct _qspi_command         cmd
     e10:	f89d 3004 	ldrb.w	r3, [sp, #4]
     e14:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
     e18:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     e1c:	f88d 3004 	strb.w	r3, [sp, #4]
     e20:	f89d 3005 	ldrb.w	r3, [sp, #5]
     e24:	f043 0303 	orr.w	r3, r3, #3
     e28:	2201      	movs	r2, #1
     e2a:	f362 1305 	bfi	r3, r2, #4, #2
     e2e:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
     e32:	2200      	movs	r2, #0
	struct _qspi_command         cmd
     e34:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e38:	f362 0304 	bfi	r3, r2, #0, #5
     e3c:	f88d 3006 	strb.w	r3, [sp, #6]
     e40:	230b      	movs	r3, #11
     e42:	f88d 3008 	strb.w	r3, [sp, #8]
     e46:	f085 0301 	eor.w	r3, r5, #1
     e4a:	425b      	negs	r3, r3
     e4c:	f88d 3009 	strb.w	r3, [sp, #9]
     e50:	2301      	movs	r3, #1
     e52:	9304      	str	r3, [sp, #16]
     e54:	f10d 031f 	add.w	r3, sp, #31
     e58:	9306      	str	r3, [sp, #24]
	qspi_sync_serial_run_command(descr, &cmd);
     e5a:	a901      	add	r1, sp, #4
     e5c:	4b0e      	ldr	r3, [pc, #56]	; (e98 <n25q256a_xip_confirm+0xa0>)
     e5e:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
     e60:	2d00      	cmp	r5, #0
     e62:	bf14      	ite	ne
     e64:	2302      	movne	r3, #2
     e66:	2301      	moveq	r3, #1
     e68:	7363      	strb	r3, [r4, #13]
}
     e6a:	2000      	movs	r0, #0
     e6c:	b009      	add	sp, #36	; 0x24
     e6e:	bd30      	pop	{r4, r5, pc}
	struct _qspi_command         cmd
     e70:	f89d 3004 	ldrb.w	r3, [sp, #4]
     e74:	2206      	movs	r2, #6
     e76:	f362 0302 	bfi	r3, r2, #0, #3
     e7a:	f063 030f 	orn	r3, r3, #15
     e7e:	f88d 3004 	strb.w	r3, [sp, #4]
     e82:	f89d 3005 	ldrb.w	r3, [sp, #5]
     e86:	f043 0303 	orr.w	r3, r3, #3
     e8a:	2201      	movs	r2, #1
     e8c:	f362 1305 	bfi	r3, r2, #4, #2
     e90:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
     e94:	2208      	movs	r2, #8
     e96:	e7cd      	b.n	e34 <n25q256a_xip_confirm+0x3c>
     e98:	000007b5 	.word	0x000007b5

00000e9c <n25q256a_read_reg>:
{
     e9c:	b530      	push	{r4, r5, lr}
     e9e:	b089      	sub	sp, #36	; 0x24
     ea0:	4604      	mov	r4, r0
	uint32_t                     status = 0;
     ea2:	2300      	movs	r3, #0
     ea4:	9307      	str	r3, [sp, #28]
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
     ea6:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
     ea8:	9301      	str	r3, [sp, #4]
     eaa:	9302      	str	r3, [sp, #8]
     eac:	9303      	str	r3, [sp, #12]
     eae:	9305      	str	r3, [sp, #20]
     eb0:	f001 0107 	and.w	r1, r1, #7
     eb4:	f041 0190 	orr.w	r1, r1, #144	; 0x90
     eb8:	f88d 1004 	strb.w	r1, [sp, #4]
     ebc:	f88d 2008 	strb.w	r2, [sp, #8]
     ec0:	2301      	movs	r3, #1
     ec2:	9304      	str	r3, [sp, #16]
     ec4:	ab07      	add	r3, sp, #28
     ec6:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
     ec8:	7b43      	ldrb	r3, [r0, #13]
     eca:	b943      	cbnz	r3, ede <n25q256a_read_reg+0x42>
	qspi_sync_serial_run_command(descr, &cmd);
     ecc:	a901      	add	r1, sp, #4
     ece:	4628      	mov	r0, r5
     ed0:	4b07      	ldr	r3, [pc, #28]	; (ef0 <n25q256a_read_reg+0x54>)
     ed2:	4798      	blx	r3
	if (n25q->xip_mode) {
     ed4:	7b63      	ldrb	r3, [r4, #13]
     ed6:	b933      	cbnz	r3, ee6 <n25q256a_read_reg+0x4a>
}
     ed8:	9807      	ldr	r0, [sp, #28]
     eda:	b009      	add	sp, #36	; 0x24
     edc:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
     ede:	2100      	movs	r1, #0
     ee0:	4b04      	ldr	r3, [pc, #16]	; (ef4 <n25q256a_read_reg+0x58>)
     ee2:	4798      	blx	r3
     ee4:	e7f2      	b.n	ecc <n25q256a_read_reg+0x30>
		n25q256a_xip_confirm(me, true);
     ee6:	2101      	movs	r1, #1
     ee8:	4620      	mov	r0, r4
     eea:	4b02      	ldr	r3, [pc, #8]	; (ef4 <n25q256a_read_reg+0x58>)
     eec:	4798      	blx	r3
     eee:	e7f3      	b.n	ed8 <n25q256a_read_reg+0x3c>
     ef0:	000007b5 	.word	0x000007b5
     ef4:	00000df9 	.word	0x00000df9

00000ef8 <n25q256a_disable_xip>:
	}
	return ERR_NONE;
}

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
     ef8:	b570      	push	{r4, r5, r6, lr}
     efa:	4604      	mov	r4, r0
	struct n25q256a *            n25q  = (struct n25q256a *)me;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
     efc:	6806      	ldr	r6, [r0, #0]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     efe:	7b05      	ldrb	r5, [r0, #12]
     f00:	2d00      	cmp	r5, #0
     f02:	bf18      	it	ne
     f04:	2506      	movne	r5, #6
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
     f06:	2100      	movs	r1, #0
     f08:	4b0d      	ldr	r3, [pc, #52]	; (f40 <n25q256a_disable_xip+0x48>)
     f0a:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
     f0c:	2285      	movs	r2, #133	; 0x85
     f0e:	4629      	mov	r1, r5
     f10:	4620      	mov	r0, r4
     f12:	4b0c      	ldr	r3, [pc, #48]	; (f44 <n25q256a_disable_xip+0x4c>)
     f14:	4798      	blx	r3
	if (!(vcfg & (1u << 3))) {
     f16:	f010 0f08 	tst.w	r0, #8
     f1a:	d10e      	bne.n	f3a <n25q256a_disable_xip+0x42>
		if (n25q->pin_exit_xip) {
     f1c:	68a3      	ldr	r3, [r4, #8]
     f1e:	b163      	cbz	r3, f3a <n25q256a_disable_xip+0x42>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
     f20:	6835      	ldr	r5, [r6, #0]
			qspi_sync_disable(descr);
     f22:	4630      	mov	r0, r6
     f24:	4b08      	ldr	r3, [pc, #32]	; (f48 <n25q256a_disable_xip+0x50>)
     f26:	4798      	blx	r3
			n25q->pin_exit_xip();
     f28:	68a3      	ldr	r3, [r4, #8]
     f2a:	4798      	blx	r3

			qspi_sync_init(descr, hw);
     f2c:	4629      	mov	r1, r5
     f2e:	4630      	mov	r0, r6
     f30:	4b06      	ldr	r3, [pc, #24]	; (f4c <n25q256a_disable_xip+0x54>)
     f32:	4798      	blx	r3
			qspi_sync_enable(descr);
     f34:	4630      	mov	r0, r6
     f36:	4b06      	ldr	r3, [pc, #24]	; (f50 <n25q256a_disable_xip+0x58>)
     f38:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
     f3a:	2000      	movs	r0, #0
     f3c:	7360      	strb	r0, [r4, #13]
	return ERR_NONE;
}
     f3e:	bd70      	pop	{r4, r5, r6, pc}
     f40:	00000df9 	.word	0x00000df9
     f44:	00000e9d 	.word	0x00000e9d
     f48:	0000078d 	.word	0x0000078d
     f4c:	00000735 	.word	0x00000735
     f50:	00000765 	.word	0x00000765

00000f54 <n25q256a_write_reg>:
{
     f54:	b530      	push	{r4, r5, lr}
     f56:	b089      	sub	sp, #36	; 0x24
     f58:	4604      	mov	r4, r0
     f5a:	9301      	str	r3, [sp, #4]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
     f5c:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
     f5e:	2300      	movs	r3, #0
     f60:	9302      	str	r3, [sp, #8]
     f62:	9303      	str	r3, [sp, #12]
     f64:	9304      	str	r3, [sp, #16]
     f66:	9307      	str	r3, [sp, #28]
     f68:	f001 0107 	and.w	r1, r1, #7
     f6c:	f041 0190 	orr.w	r1, r1, #144	; 0x90
     f70:	f88d 1008 	strb.w	r1, [sp, #8]
     f74:	2102      	movs	r1, #2
     f76:	f361 1305 	bfi	r3, r1, #4, #2
     f7a:	f88d 3009 	strb.w	r3, [sp, #9]
     f7e:	f88d 200c 	strb.w	r2, [sp, #12]
     f82:	2301      	movs	r3, #1
     f84:	9305      	str	r3, [sp, #20]
     f86:	ab01      	add	r3, sp, #4
     f88:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
     f8a:	7b43      	ldrb	r3, [r0, #13]
     f8c:	b93b      	cbnz	r3, f9e <n25q256a_write_reg+0x4a>
	qspi_sync_serial_run_command(descr, &cmd);
     f8e:	a902      	add	r1, sp, #8
     f90:	4628      	mov	r0, r5
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <n25q256a_write_reg+0x5c>)
     f94:	4798      	blx	r3
	if (n25q->xip_mode) {
     f96:	7b63      	ldrb	r3, [r4, #13]
     f98:	b92b      	cbnz	r3, fa6 <n25q256a_write_reg+0x52>
}
     f9a:	b009      	add	sp, #36	; 0x24
     f9c:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
     f9e:	2100      	movs	r1, #0
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <n25q256a_write_reg+0x60>)
     fa2:	4798      	blx	r3
     fa4:	e7f3      	b.n	f8e <n25q256a_write_reg+0x3a>
		n25q256a_xip_confirm(me, true);
     fa6:	2101      	movs	r1, #1
     fa8:	4620      	mov	r0, r4
     faa:	4b02      	ldr	r3, [pc, #8]	; (fb4 <n25q256a_write_reg+0x60>)
     fac:	4798      	blx	r3
}
     fae:	e7f4      	b.n	f9a <n25q256a_write_reg+0x46>
     fb0:	000007b5 	.word	0x000007b5
     fb4:	00000df9 	.word	0x00000df9

00000fb8 <n25q256a_enable_xip>:
{
     fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     fba:	7b05      	ldrb	r5, [r0, #12]
     fbc:	2d00      	cmp	r5, #0
     fbe:	bf18      	it	ne
     fc0:	2506      	movne	r5, #6
	if (!n25q->xip_mode) {
     fc2:	7b43      	ldrb	r3, [r0, #13]
     fc4:	b10b      	cbz	r3, fca <n25q256a_enable_xip+0x12>
}
     fc6:	2000      	movs	r0, #0
     fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fca:	4604      	mov	r4, r0
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
     fcc:	2285      	movs	r2, #133	; 0x85
     fce:	4629      	mov	r1, r5
     fd0:	4b0d      	ldr	r3, [pc, #52]	; (1008 <n25q256a_enable_xip+0x50>)
     fd2:	4798      	blx	r3
		if (vcfg & (1u << 3)) {
     fd4:	f010 0f08 	tst.w	r0, #8
     fd8:	d105      	bne.n	fe6 <n25q256a_enable_xip+0x2e>
		n25q->xip_mode = 1;
     fda:	2101      	movs	r1, #1
     fdc:	7361      	strb	r1, [r4, #13]
		n25q256a_xip_confirm(me, true);
     fde:	4620      	mov	r0, r4
     fe0:	4b0a      	ldr	r3, [pc, #40]	; (100c <n25q256a_enable_xip+0x54>)
     fe2:	4798      	blx	r3
     fe4:	e7ef      	b.n	fc6 <n25q256a_enable_xip+0xe>
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
     fe6:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
     fea:	2281      	movs	r2, #129	; 0x81
     fec:	4629      	mov	r1, r5
     fee:	4620      	mov	r0, r4
     ff0:	4e07      	ldr	r6, [pc, #28]	; (1010 <n25q256a_enable_xip+0x58>)
     ff2:	47b0      	blx	r6
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
     ff4:	2770      	movs	r7, #112	; 0x70
     ff6:	4e04      	ldr	r6, [pc, #16]	; (1008 <n25q256a_enable_xip+0x50>)
     ff8:	463a      	mov	r2, r7
     ffa:	4629      	mov	r1, r5
     ffc:	4620      	mov	r0, r4
     ffe:	47b0      	blx	r6
    1000:	f010 0f80 	tst.w	r0, #128	; 0x80
    1004:	d0f8      	beq.n	ff8 <n25q256a_enable_xip+0x40>
    1006:	e7e8      	b.n	fda <n25q256a_enable_xip+0x22>
    1008:	00000e9d 	.word	0x00000e9d
    100c:	00000df9 	.word	0x00000df9
    1010:	00000f55 	.word	0x00000f55

00001014 <n25q256a_write_enable>:
{
    1014:	b530      	push	{r4, r5, lr}
    1016:	b08f      	sub	sp, #60	; 0x3c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1018:	6805      	ldr	r5, [r0, #0]
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    101a:	2a00      	cmp	r2, #0
    101c:	bf14      	ite	ne
    101e:	2206      	movne	r2, #6
    1020:	2204      	moveq	r2, #4
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    1022:	2300      	movs	r3, #0
    1024:	9307      	str	r3, [sp, #28]
    1026:	9308      	str	r3, [sp, #32]
    1028:	9309      	str	r3, [sp, #36]	; 0x24
    102a:	930a      	str	r3, [sp, #40]	; 0x28
    102c:	930b      	str	r3, [sp, #44]	; 0x2c
    102e:	930c      	str	r3, [sp, #48]	; 0x30
    1030:	f001 0107 	and.w	r1, r1, #7
    1034:	f041 0010 	orr.w	r0, r1, #16
    1038:	f88d 001c 	strb.w	r0, [sp, #28]
    103c:	f88d 2020 	strb.w	r2, [sp, #32]
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    1040:	9301      	str	r3, [sp, #4]
    1042:	9302      	str	r3, [sp, #8]
    1044:	9303      	str	r3, [sp, #12]
    1046:	9305      	str	r3, [sp, #20]
    1048:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    104c:	f88d 1004 	strb.w	r1, [sp, #4]
    1050:	2305      	movs	r3, #5
    1052:	f88d 3008 	strb.w	r3, [sp, #8]
    1056:	2301      	movs	r3, #1
    1058:	9304      	str	r3, [sp, #16]
    105a:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    105e:	9306      	str	r3, [sp, #24]
		qspi_sync_serial_run_command(descr, &cmd_en);
    1060:	4c06      	ldr	r4, [pc, #24]	; (107c <n25q256a_write_enable+0x68>)
    1062:	a907      	add	r1, sp, #28
    1064:	4628      	mov	r0, r5
    1066:	47a0      	blx	r4
		qspi_sync_serial_run_command(descr, &cmd_st);
    1068:	a901      	add	r1, sp, #4
    106a:	4628      	mov	r0, r5
    106c:	47a0      	blx	r4
	} while ((status & (1 << 1)) == 0);
    106e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    1072:	f013 0f02 	tst.w	r3, #2
    1076:	d0f4      	beq.n	1062 <n25q256a_write_enable+0x4e>
}
    1078:	b00f      	add	sp, #60	; 0x3c
    107a:	bd30      	pop	{r4, r5, pc}
    107c:	000007b5 	.word	0x000007b5

00001080 <n25q256a_write>:
{
    1080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1084:	b087      	sub	sp, #28
    1086:	4604      	mov	r4, r0
    1088:	4690      	mov	r8, r2
    108a:	461f      	mov	r7, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    108c:	f8d0 b000 	ldr.w	fp, [r0]
	struct _qspi_command         cmd   = {
    1090:	2300      	movs	r3, #0
    1092:	9300      	str	r3, [sp, #0]
    1094:	9301      	str	r3, [sp, #4]
    1096:	9305      	str	r3, [sp, #20]
    1098:	2330      	movs	r3, #48	; 0x30
    109a:	f88d 3001 	strb.w	r3, [sp, #1]
    109e:	2302      	movs	r3, #2
    10a0:	f88d 3004 	strb.w	r3, [sp, #4]
    10a4:	9202      	str	r2, [sp, #8]
    10a6:	9703      	str	r7, [sp, #12]
    10a8:	9104      	str	r1, [sp, #16]
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    10aa:	7b03      	ldrb	r3, [r0, #12]
    10ac:	2b00      	cmp	r3, #0
    10ae:	bf14      	ite	ne
    10b0:	2206      	movne	r2, #6
    10b2:	2200      	moveq	r2, #0
    10b4:	f06f 034f 	mvn.w	r3, #79	; 0x4f
    10b8:	f362 0302 	bfi	r3, r2, #0, #3
    10bc:	f88d 3000 	strb.w	r3, [sp]
	while (length) {
    10c0:	b357      	cbz	r7, 1118 <n25q256a_write+0x98>
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    10c2:	f8df a074 	ldr.w	sl, [pc, #116]	; 1138 <n25q256a_write+0xb8>
		qspi_sync_serial_run_command(descr, &cmd);
    10c6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 113c <n25q256a_write+0xbc>
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    10ca:	4e19      	ldr	r6, [pc, #100]	; (1130 <n25q256a_write+0xb0>)
		cmd.address = address;
    10cc:	f8cd 8008 	str.w	r8, [sp, #8]
		if (length <= N25Q_PAGE_SIZE) {
    10d0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
			cmd.buf_len = length;
    10d4:	bf92      	itee	ls
    10d6:	9703      	strls	r7, [sp, #12]
			cmd.buf_len = N25Q_PAGE_SIZE;
    10d8:	f44f 7380 	movhi.w	r3, #256	; 0x100
    10dc:	9303      	strhi	r3, [sp, #12]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    10de:	ad06      	add	r5, sp, #24
    10e0:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    10e4:	2201      	movs	r2, #1
    10e6:	f001 0107 	and.w	r1, r1, #7
    10ea:	4620      	mov	r0, r4
    10ec:	47d0      	blx	sl
		qspi_sync_serial_run_command(descr, &cmd);
    10ee:	4629      	mov	r1, r5
    10f0:	4658      	mov	r0, fp
    10f2:	47c8      	blx	r9
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    10f4:	2570      	movs	r5, #112	; 0x70
    10f6:	f89d 1000 	ldrb.w	r1, [sp]
    10fa:	462a      	mov	r2, r5
    10fc:	f001 0107 	and.w	r1, r1, #7
    1100:	4620      	mov	r0, r4
    1102:	47b0      	blx	r6
    1104:	f010 0f80 	tst.w	r0, #128	; 0x80
    1108:	d0f5      	beq.n	10f6 <n25q256a_write+0x76>
		cmd.tx_buf += cmd.buf_len;
    110a:	9b03      	ldr	r3, [sp, #12]
    110c:	9a04      	ldr	r2, [sp, #16]
    110e:	441a      	add	r2, r3
    1110:	9204      	str	r2, [sp, #16]
		address += cmd.buf_len;
    1112:	4498      	add	r8, r3
	while (length) {
    1114:	1aff      	subs	r7, r7, r3
    1116:	d1d9      	bne.n	10cc <n25q256a_write+0x4c>
	if (n25q->xip_mode) {
    1118:	7b63      	ldrb	r3, [r4, #13]
    111a:	b91b      	cbnz	r3, 1124 <n25q256a_write+0xa4>
}
    111c:	2000      	movs	r0, #0
    111e:	b007      	add	sp, #28
    1120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
    1124:	2101      	movs	r1, #1
    1126:	4620      	mov	r0, r4
    1128:	4b02      	ldr	r3, [pc, #8]	; (1134 <n25q256a_write+0xb4>)
    112a:	4798      	blx	r3
    112c:	e7f6      	b.n	111c <n25q256a_write+0x9c>
    112e:	bf00      	nop
    1130:	00000e9d 	.word	0x00000e9d
    1134:	00000df9 	.word	0x00000df9
    1138:	00001015 	.word	0x00001015
    113c:	000007b5 	.word	0x000007b5

00001140 <n25q256a_erase>:
{
    1140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1144:	b087      	sub	sp, #28
    1146:	4688      	mov	r8, r1
    1148:	4617      	mov	r7, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    114a:	f8d0 9000 	ldr.w	r9, [r0]
	struct _qspi_command         cmd   = {
    114e:	2300      	movs	r3, #0
    1150:	9300      	str	r3, [sp, #0]
    1152:	9301      	str	r3, [sp, #4]
    1154:	9302      	str	r3, [sp, #8]
    1156:	9303      	str	r3, [sp, #12]
    1158:	9304      	str	r3, [sp, #16]
    115a:	9305      	str	r3, [sp, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    115c:	7b03      	ldrb	r3, [r0, #12]
    115e:	2b00      	cmp	r3, #0
    1160:	bf14      	ite	ne
    1162:	2106      	movne	r1, #6
    1164:	2100      	moveq	r1, #0
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    1166:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    116a:	bf2c      	ite	cs
    116c:	2200      	movcs	r2, #0
    116e:	2201      	movcc	r2, #1
	struct _qspi_command         cmd   = {
    1170:	f041 0310 	orr.w	r3, r1, #16
    1174:	f362 1345 	bfi	r3, r2, #5, #1
    1178:	f88d 3000 	strb.w	r3, [sp]
    117c:	f04f 0300 	mov.w	r3, #0
    1180:	2202      	movs	r2, #2
    1182:	f362 1305 	bfi	r3, r2, #4, #2
    1186:	f88d 3001 	strb.w	r3, [sp, #1]
	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    118a:	ea47 0308 	orr.w	r3, r7, r8
    118e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1192:	2b00      	cmp	r3, #0
    1194:	d16f      	bne.n	1276 <n25q256a_erase+0x136>
    1196:	4604      	mov	r4, r0
	if (length >= N25Q_FLASH_SIZE) {
    1198:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
    119c:	d207      	bcs.n	11ae <n25q256a_erase+0x6e>
		while (temp_len > 0) {
    119e:	2f00      	cmp	r7, #0
    11a0:	d052      	beq.n	1248 <n25q256a_erase+0x108>
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    11a2:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1280 <n25q256a_erase+0x140>
				qspi_sync_serial_run_command(descr, &cmd);
    11a6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1284 <n25q256a_erase+0x144>
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    11aa:	4e34      	ldr	r6, [pc, #208]	; (127c <n25q256a_erase+0x13c>)
    11ac:	e02e      	b.n	120c <n25q256a_erase+0xcc>
		cmd.instruction = N25Q_BULK_ERASE;
    11ae:	23c7      	movs	r3, #199	; 0xc7
    11b0:	f88d 3004 	strb.w	r3, [sp, #4]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    11b4:	2201      	movs	r2, #1
    11b6:	4b32      	ldr	r3, [pc, #200]	; (1280 <n25q256a_erase+0x140>)
    11b8:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd);
    11ba:	4669      	mov	r1, sp
    11bc:	4648      	mov	r0, r9
    11be:	4b31      	ldr	r3, [pc, #196]	; (1284 <n25q256a_erase+0x144>)
    11c0:	4798      	blx	r3
	int32_t  rc        = ERR_NONE;
    11c2:	2700      	movs	r7, #0
    11c4:	e040      	b.n	1248 <n25q256a_erase+0x108>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    11c6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    11ca:	d33b      	bcc.n	1244 <n25q256a_erase+0x104>
				cmd.address     = temp_addr;
    11cc:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    11d0:	2320      	movs	r3, #32
    11d2:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    11d6:	ad06      	add	r5, sp, #24
    11d8:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    11dc:	2201      	movs	r2, #1
    11de:	f001 0107 	and.w	r1, r1, #7
    11e2:	4620      	mov	r0, r4
    11e4:	47d8      	blx	fp
				qspi_sync_serial_run_command(descr, &cmd);
    11e6:	4629      	mov	r1, r5
    11e8:	4648      	mov	r0, r9
    11ea:	47d0      	blx	sl
				temp_addr += N25Q_SECTOR_SIZE;
    11ec:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
				temp_len -= N25Q_SECTOR_SIZE;
    11f0:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    11f4:	2570      	movs	r5, #112	; 0x70
    11f6:	f89d 1000 	ldrb.w	r1, [sp]
    11fa:	462a      	mov	r2, r5
    11fc:	f001 0107 	and.w	r1, r1, #7
    1200:	4620      	mov	r0, r4
    1202:	47b0      	blx	r6
    1204:	f010 0f80 	tst.w	r0, #128	; 0x80
    1208:	d0f5      	beq.n	11f6 <n25q256a_erase+0xb6>
		while (temp_len > 0) {
    120a:	b1ef      	cbz	r7, 1248 <n25q256a_erase+0x108>
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    120c:	fa1f f388 	uxth.w	r3, r8
    1210:	2b00      	cmp	r3, #0
    1212:	d1d8      	bne.n	11c6 <n25q256a_erase+0x86>
    1214:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    1218:	d3d5      	bcc.n	11c6 <n25q256a_erase+0x86>
				cmd.address     = temp_addr;
    121a:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    121e:	23d8      	movs	r3, #216	; 0xd8
    1220:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    1224:	ad06      	add	r5, sp, #24
    1226:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    122a:	2201      	movs	r2, #1
    122c:	f001 0107 	and.w	r1, r1, #7
    1230:	4620      	mov	r0, r4
    1232:	47d8      	blx	fp
				qspi_sync_serial_run_command(descr, &cmd);
    1234:	4629      	mov	r1, r5
    1236:	4648      	mov	r0, r9
    1238:	47d0      	blx	sl
				temp_addr += N25Q_BLOCK_SIZE;
    123a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
				temp_len -= N25Q_BLOCK_SIZE;
    123e:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
    1242:	e7d7      	b.n	11f4 <n25q256a_erase+0xb4>
				rc = ERR_INVALID_ARG;
    1244:	f06f 070c 	mvn.w	r7, #12
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    1248:	2670      	movs	r6, #112	; 0x70
    124a:	4d0c      	ldr	r5, [pc, #48]	; (127c <n25q256a_erase+0x13c>)
    124c:	f89d 1000 	ldrb.w	r1, [sp]
    1250:	4632      	mov	r2, r6
    1252:	f001 0107 	and.w	r1, r1, #7
    1256:	4620      	mov	r0, r4
    1258:	47a8      	blx	r5
    125a:	f010 0f80 	tst.w	r0, #128	; 0x80
    125e:	d0f5      	beq.n	124c <n25q256a_erase+0x10c>
	if (n25q->xip_mode) {
    1260:	7b63      	ldrb	r3, [r4, #13]
    1262:	b91b      	cbnz	r3, 126c <n25q256a_erase+0x12c>
}
    1264:	4638      	mov	r0, r7
    1266:	b007      	add	sp, #28
    1268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
    126c:	2101      	movs	r1, #1
    126e:	4620      	mov	r0, r4
    1270:	4b05      	ldr	r3, [pc, #20]	; (1288 <n25q256a_erase+0x148>)
    1272:	4798      	blx	r3
    1274:	e7f6      	b.n	1264 <n25q256a_erase+0x124>
		return ERR_INVALID_ARG;
    1276:	f06f 070c 	mvn.w	r7, #12
    127a:	e7f3      	b.n	1264 <n25q256a_erase+0x124>
    127c:	00000e9d 	.word	0x00000e9d
    1280:	00001015 	.word	0x00001015
    1284:	000007b5 	.word	0x000007b5
    1288:	00000df9 	.word	0x00000df9

0000128c <n25q256a_switch_mode>:
{
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128e:	4604      	mov	r4, r0
    1290:	460e      	mov	r6, r1
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    1292:	7b05      	ldrb	r5, [r0, #12]
    1294:	2d00      	cmp	r5, #0
    1296:	bf18      	it	ne
    1298:	2506      	movne	r5, #6
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    129a:	2265      	movs	r2, #101	; 0x65
    129c:	4629      	mov	r1, r5
    129e:	4b18      	ldr	r3, [pc, #96]	; (1300 <n25q256a_switch_mode+0x74>)
    12a0:	4798      	blx	r3
	if (n25q->quad_mode == mode) {
    12a2:	7b23      	ldrb	r3, [r4, #12]
    12a4:	42b3      	cmp	r3, r6
    12a6:	d017      	beq.n	12d8 <n25q256a_switch_mode+0x4c>
    12a8:	4607      	mov	r7, r0
	if (mode) {
    12aa:	b1b6      	cbz	r6, 12da <n25q256a_switch_mode+0x4e>
		if (evcfg & 0x80) {
    12ac:	f010 0f80 	tst.w	r0, #128	; 0x80
    12b0:	d012      	beq.n	12d8 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
    12b2:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
    12b4:	2201      	movs	r2, #1
    12b6:	4629      	mov	r1, r5
    12b8:	4620      	mov	r0, r4
    12ba:	4b12      	ldr	r3, [pc, #72]	; (1304 <n25q256a_switch_mode+0x78>)
    12bc:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    12be:	f007 031f 	and.w	r3, r7, #31
    12c2:	2261      	movs	r2, #97	; 0x61
    12c4:	4629      	mov	r1, r5
    12c6:	4620      	mov	r0, r4
    12c8:	4d0f      	ldr	r5, [pc, #60]	; (1308 <n25q256a_switch_mode+0x7c>)
    12ca:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    12cc:	2106      	movs	r1, #6
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    12ce:	2265      	movs	r2, #101	; 0x65
    12d0:	4620      	mov	r0, r4
    12d2:	4b0b      	ldr	r3, [pc, #44]	; (1300 <n25q256a_switch_mode+0x74>)
    12d4:	4798      	blx	r3
		n25q->quad_mode = mode;
    12d6:	7326      	strb	r6, [r4, #12]
    12d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(evcfg & 0x80)) {
    12da:	f010 0f80 	tst.w	r0, #128	; 0x80
    12de:	d1fb      	bne.n	12d8 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
    12e0:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
    12e2:	2201      	movs	r2, #1
    12e4:	4629      	mov	r1, r5
    12e6:	4620      	mov	r0, r4
    12e8:	4b06      	ldr	r3, [pc, #24]	; (1304 <n25q256a_switch_mode+0x78>)
    12ea:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    12ec:	f047 03c0 	orr.w	r3, r7, #192	; 0xc0
    12f0:	2261      	movs	r2, #97	; 0x61
    12f2:	4629      	mov	r1, r5
    12f4:	4620      	mov	r0, r4
    12f6:	4d04      	ldr	r5, [pc, #16]	; (1308 <n25q256a_switch_mode+0x7c>)
    12f8:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    12fa:	4631      	mov	r1, r6
    12fc:	e7e7      	b.n	12ce <n25q256a_switch_mode+0x42>
    12fe:	bf00      	nop
    1300:	00000e9d 	.word	0x00000e9d
    1304:	00001015 	.word	0x00001015
    1308:	00000f55 	.word	0x00000f55

0000130c <n25q256a_construct>:
{
    130c:	b570      	push	{r4, r5, r6, lr}
    130e:	4604      	mov	r4, r0
    1310:	4616      	mov	r6, r2
    1312:	461d      	mov	r5, r3
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    1314:	4a06      	ldr	r2, [pc, #24]	; (1330 <n25q256a_construct+0x24>)
    1316:	4b07      	ldr	r3, [pc, #28]	; (1334 <n25q256a_construct+0x28>)
    1318:	4798      	blx	r3
	n25q->quad_mode    = 0;
    131a:	2300      	movs	r3, #0
    131c:	7323      	strb	r3, [r4, #12]
	n25q->xip_mode     = false;
    131e:	7363      	strb	r3, [r4, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    1320:	60a6      	str	r6, [r4, #8]
	n25q256a_switch_mode(me, quad_mode);
    1322:	4629      	mov	r1, r5
    1324:	4620      	mov	r0, r4
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <n25q256a_construct+0x2c>)
    1328:	4798      	blx	r3
}
    132a:	4620      	mov	r0, r4
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	bf00      	nop
    1330:	000028a0 	.word	0x000028a0
    1334:	0000133d 	.word	0x0000133d
    1338:	0000128d 	.word	0x0000128d

0000133c <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    133c:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    133e:	6042      	str	r2, [r0, #4]

	return me;
}
    1340:	4770      	bx	lr
	...

00001344 <QSPI_INSTANCE_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_INSTANCE_exit_xip(void)
{
    1344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1348:	4b33      	ldr	r3, [pc, #204]	; (1418 <QSPI_INSTANCE_exit_xip+0xd4>)
    134a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    134e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1352:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    135a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    135e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1366:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    136a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    136e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1372:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1376:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    137a:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    137e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1382:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    1386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    138a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    138e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1392:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1396:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    139a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    139e:	f44f 7480 	mov.w	r4, #256	; 0x100
    13a2:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13a4:	4a1d      	ldr	r2, [pc, #116]	; (141c <QSPI_INSTANCE_exit_xip+0xd8>)
    13a6:	629a      	str	r2, [r3, #40]	; 0x28
    13a8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    13ac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
    13b2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13b6:	491a      	ldr	r1, [pc, #104]	; (1420 <QSPI_INSTANCE_exit_xip+0xdc>)
    13b8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    13bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    13c4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13c8:	4d16      	ldr	r5, [pc, #88]	; (1424 <QSPI_INSTANCE_exit_xip+0xe0>)
    13ca:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
    13ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13d2:	619c      	str	r4, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    13d4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    13d8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94

	gpio_set_pin_level(PA08, true);
	gpio_set_pin_level(PB11, false);
	gpio_set_pin_level(PB10, false);

	delay_us(1);
    13dc:	2001      	movs	r0, #1
    13de:	4b12      	ldr	r3, [pc, #72]	; (1428 <QSPI_INSTANCE_exit_xip+0xe4>)
    13e0:	4798      	blx	r3
    13e2:	2407      	movs	r4, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13e4:	4e0c      	ldr	r6, [pc, #48]	; (1418 <QSPI_INSTANCE_exit_xip+0xd4>)
    13e6:	f44f 6780 	mov.w	r7, #1024	; 0x400
    13ea:	46b8      	mov	r8, r7
    13ec:	f8c6 8098 	str.w	r8, [r6, #152]	; 0x98

	for (int i = 0; i < 7; i++) {
		gpio_set_pin_level(PB10, true);
		delay_us(1);
    13f0:	2001      	movs	r0, #1
    13f2:	4d0d      	ldr	r5, [pc, #52]	; (1428 <QSPI_INSTANCE_exit_xip+0xe4>)
    13f4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    13f6:	f8c6 7094 	str.w	r7, [r6, #148]	; 0x94
		gpio_set_pin_level(PB10, false);
		delay_us(1);
    13fa:	2001      	movs	r0, #1
    13fc:	47a8      	blx	r5
	for (int i = 0; i < 7; i++) {
    13fe:	3c01      	subs	r4, #1
    1400:	d1f4      	bne.n	13ec <QSPI_INSTANCE_exit_xip+0xa8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1402:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1406:	4b04      	ldr	r3, [pc, #16]	; (1418 <QSPI_INSTANCE_exit_xip+0xd4>)
    1408:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	gpio_set_pin_level(PB11, true);
	delay_us(1);
    140c:	2001      	movs	r0, #1
    140e:	47a8      	blx	r5
	QSPI_INSTANCE_PORT_init();
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <QSPI_INSTANCE_exit_xip+0xe8>)
    1412:	4798      	blx	r3
    1414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1418:	41008000 	.word	0x41008000
    141c:	40000100 	.word	0x40000100
    1420:	40000800 	.word	0x40000800
    1424:	40000400 	.word	0x40000400
    1428:	00000695 	.word	0x00000695
    142c:	00000389 	.word	0x00000389

00001430 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    1430:	b510      	push	{r4, lr}

	qspi_sync_enable(&QSPI_INSTANCE);
    1432:	4c06      	ldr	r4, [pc, #24]	; (144c <spi_nor_flash_init+0x1c>)
    1434:	4620      	mov	r0, r4
    1436:	4b06      	ldr	r3, [pc, #24]	; (1450 <spi_nor_flash_init+0x20>)
    1438:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    143a:	2301      	movs	r3, #1
    143c:	4a05      	ldr	r2, [pc, #20]	; (1454 <spi_nor_flash_init+0x24>)
    143e:	4621      	mov	r1, r4
    1440:	4805      	ldr	r0, [pc, #20]	; (1458 <spi_nor_flash_init+0x28>)
    1442:	4c06      	ldr	r4, [pc, #24]	; (145c <spi_nor_flash_init+0x2c>)
    1444:	47a0      	blx	r4
    1446:	4b06      	ldr	r3, [pc, #24]	; (1460 <spi_nor_flash_init+0x30>)
    1448:	6018      	str	r0, [r3, #0]
    144a:	bd10      	pop	{r4, pc}
    144c:	200000b0 	.word	0x200000b0
    1450:	00000765 	.word	0x00000765
    1454:	00001345 	.word	0x00001345
    1458:	20000088 	.word	0x20000088
    145c:	0000130d 	.word	0x0000130d
    1460:	200000c4 	.word	0x200000c4

00001464 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1464:	b940      	cbnz	r0, 1478 <_read+0x14>
{
    1466:	b508      	push	{r3, lr}
    1468:	460b      	mov	r3, r1
    146a:	4611      	mov	r1, r2
    146c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    146e:	4b04      	ldr	r3, [pc, #16]	; (1480 <_read+0x1c>)
    1470:	4798      	blx	r3
    1472:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    1476:	bd08      	pop	{r3, pc}
		return -1;
    1478:	f04f 30ff 	mov.w	r0, #4294967295
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	000014d5 	.word	0x000014d5

00001484 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1484:	3801      	subs	r0, #1
    1486:	2802      	cmp	r0, #2
    1488:	d808      	bhi.n	149c <_write+0x18>
{
    148a:	b508      	push	{r3, lr}
    148c:	460b      	mov	r3, r1
    148e:	4611      	mov	r1, r2
    1490:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1492:	4b04      	ldr	r3, [pc, #16]	; (14a4 <_write+0x20>)
    1494:	4798      	blx	r3
    1496:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    149a:	bd08      	pop	{r3, pc}
		return -1;
    149c:	f04f 30ff 	mov.w	r0, #4294967295
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	000014f9 	.word	0x000014f9

000014a8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    14a8:	b570      	push	{r4, r5, r6, lr}
    14aa:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    14ac:	4d06      	ldr	r5, [pc, #24]	; (14c8 <stdio_io_init+0x20>)
    14ae:	682b      	ldr	r3, [r5, #0]
    14b0:	2100      	movs	r1, #0
    14b2:	6898      	ldr	r0, [r3, #8]
    14b4:	4c05      	ldr	r4, [pc, #20]	; (14cc <stdio_io_init+0x24>)
    14b6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    14b8:	682b      	ldr	r3, [r5, #0]
    14ba:	2100      	movs	r1, #0
    14bc:	6858      	ldr	r0, [r3, #4]
    14be:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    14c0:	4b03      	ldr	r3, [pc, #12]	; (14d0 <stdio_io_init+0x28>)
    14c2:	601e      	str	r6, [r3, #0]
    14c4:	bd70      	pop	{r4, r5, r6, pc}
    14c6:	bf00      	nop
    14c8:	20000000 	.word	0x20000000
    14cc:	0000180d 	.word	0x0000180d
    14d0:	20000098 	.word	0x20000098

000014d4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    14d4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    14d6:	4b06      	ldr	r3, [pc, #24]	; (14f0 <stdio_io_read+0x1c>)
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	b133      	cbz	r3, 14ea <stdio_io_read+0x16>
    14dc:	460a      	mov	r2, r1
    14de:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    14e0:	b292      	uxth	r2, r2
    14e2:	4618      	mov	r0, r3
    14e4:	4b03      	ldr	r3, [pc, #12]	; (14f4 <stdio_io_read+0x20>)
    14e6:	4798      	blx	r3
    14e8:	bd08      	pop	{r3, pc}
		return 0;
    14ea:	2000      	movs	r0, #0
}
    14ec:	bd08      	pop	{r3, pc}
    14ee:	bf00      	nop
    14f0:	20000098 	.word	0x20000098
    14f4:	00000705 	.word	0x00000705

000014f8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    14f8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    14fa:	4b06      	ldr	r3, [pc, #24]	; (1514 <stdio_io_write+0x1c>)
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	b133      	cbz	r3, 150e <stdio_io_write+0x16>
    1500:	460a      	mov	r2, r1
    1502:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1504:	b292      	uxth	r2, r2
    1506:	4618      	mov	r0, r3
    1508:	4b03      	ldr	r3, [pc, #12]	; (1518 <stdio_io_write+0x20>)
    150a:	4798      	blx	r3
    150c:	bd08      	pop	{r3, pc}
		return 0;
    150e:	2000      	movs	r0, #0
}
    1510:	bd08      	pop	{r3, pc}
    1512:	bf00      	nop
    1514:	20000098 	.word	0x20000098
    1518:	000006d5 	.word	0x000006d5

0000151c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    151c:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
    151e:	4c04      	ldr	r4, [pc, #16]	; (1530 <stdio_redirect_init+0x14>)
    1520:	4620      	mov	r0, r4
    1522:	4b04      	ldr	r3, [pc, #16]	; (1534 <stdio_redirect_init+0x18>)
    1524:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
    1526:	4620      	mov	r0, r4
    1528:	4b03      	ldr	r3, [pc, #12]	; (1538 <stdio_redirect_init+0x1c>)
    152a:	4798      	blx	r3
    152c:	bd10      	pop	{r4, pc}
    152e:	bf00      	nop
    1530:	200000a4 	.word	0x200000a4
    1534:	00000901 	.word	0x00000901
    1538:	000014a9 	.word	0x000014a9

0000153c <_validate_code>:

/**
 * Validate QSPI code, return true if identical, otherwise return false with hints printed.
 */
static bool _validate_code(void)
{
    153c:	b510      	push	{r4, lr}
	uint32_t  i;
	uint32_t *src = (uint32_t *)QSPI_LMADDR;
	uint32_t *dst = (uint32_t *)CONF_EXEC_ADDR;
	for (i = 0; i < (QSPI_LMSIZE >> 2); i++) {
		if (src[i] != dst[i]) {
    153e:	4b0e      	ldr	r3, [pc, #56]	; (1578 <_validate_code+0x3c>)
    1540:	681a      	ldr	r2, [r3, #0]
    1542:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	429a      	cmp	r2, r3
    154a:	d10f      	bne.n	156c <_validate_code+0x30>
    154c:	4c0a      	ldr	r4, [pc, #40]	; (1578 <_validate_code+0x3c>)
    154e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
	for (i = 0; i < (QSPI_LMSIZE >> 2); i++) {
    1552:	2101      	movs	r1, #1
		if (src[i] != dst[i]) {
    1554:	f854 2f04 	ldr.w	r2, [r4, #4]!
    1558:	f850 3f04 	ldr.w	r3, [r0, #4]!
    155c:	429a      	cmp	r2, r3
    155e:	d106      	bne.n	156e <_validate_code+0x32>
	for (i = 0; i < (QSPI_LMSIZE >> 2); i++) {
    1560:	3101      	adds	r1, #1
    1562:	f5b1 5f9d 	cmp.w	r1, #5024	; 0x13a0
    1566:	d1f5      	bne.n	1554 <_validate_code+0x18>
			printf("Code not identical @ 0x%x : 0x%x <> 0x%x\r\n", (unsigned)i, (unsigned)src[i], (unsigned)dst[i]);
			return false;
		}
	}
	return true;
    1568:	2001      	movs	r0, #1
}
    156a:	bd10      	pop	{r4, pc}
	for (i = 0; i < (QSPI_LMSIZE >> 2); i++) {
    156c:	2100      	movs	r1, #0
			printf("Code not identical @ 0x%x : 0x%x <> 0x%x\r\n", (unsigned)i, (unsigned)src[i], (unsigned)dst[i]);
    156e:	4803      	ldr	r0, [pc, #12]	; (157c <_validate_code+0x40>)
    1570:	4c03      	ldr	r4, [pc, #12]	; (1580 <_validate_code+0x44>)
    1572:	47a0      	blx	r4
			return false;
    1574:	2000      	movs	r0, #0
    1576:	bd10      	pop	{r4, pc}
    1578:	000028b4 	.word	0x000028b4
    157c:	0000773c 	.word	0x0000773c
    1580:	00001715 	.word	0x00001715

00001584 <main>:

/**
 * Application entry
 */
int main(void)
{
    1584:	b580      	push	{r7, lr}
    1586:	b084      	sub	sp, #16
	atmel_start_init();
    1588:	4b31      	ldr	r3, [pc, #196]	; (1650 <main+0xcc>)
    158a:	4798      	blx	r3

	printf("\r\n");
    158c:	4831      	ldr	r0, [pc, #196]	; (1654 <main+0xd0>)
    158e:	4c32      	ldr	r4, [pc, #200]	; (1658 <main+0xd4>)
    1590:	47a0      	blx	r4
	printf("==== QSPI Flash XIP Demo ====\r\n");
    1592:	4832      	ldr	r0, [pc, #200]	; (165c <main+0xd8>)
    1594:	47a0      	blx	r4
	printf("- CPU    : %dKHz\r\n", CONF_CPU_FREQUENCY / 1000);
    1596:	4932      	ldr	r1, [pc, #200]	; (1660 <main+0xdc>)
    1598:	4832      	ldr	r0, [pc, #200]	; (1664 <main+0xe0>)
    159a:	4d33      	ldr	r5, [pc, #204]	; (1668 <main+0xe4>)
    159c:	47a8      	blx	r5
	printf("- QSPI CK: %dKHz\r\n", CONF_QSPI_BAUD / 1000);
    159e:	f64e 2160 	movw	r1, #60000	; 0xea60
    15a2:	4832      	ldr	r0, [pc, #200]	; (166c <main+0xe8>)
    15a4:	47a8      	blx	r5
	printf("Load QSPI code: @ 0x%x -> 0x%x, %u bytes, erase %u\r\n",
    15a6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    15aa:	9300      	str	r3, [sp, #0]
    15ac:	f44f 439d 	mov.w	r3, #20096	; 0x4e80
    15b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    15b4:	492e      	ldr	r1, [pc, #184]	; (1670 <main+0xec>)
    15b6:	482f      	ldr	r0, [pc, #188]	; (1674 <main+0xf0>)
    15b8:	47a8      	blx	r5
	SPI_NOR_FLASH_0->interface->enxip(SPI_NOR_FLASH_0);
    15ba:	4b2f      	ldr	r3, [pc, #188]	; (1678 <main+0xf4>)
    15bc:	6818      	ldr	r0, [r3, #0]
    15be:	6843      	ldr	r3, [r0, #4]
    15c0:	68db      	ldr	r3, [r3, #12]
    15c2:	4798      	blx	r3
	printf("Check QSPI code:\r\n");
    15c4:	482d      	ldr	r0, [pc, #180]	; (167c <main+0xf8>)
    15c6:	47a0      	blx	r4
	if (!_validate_code()) {
    15c8:	4b2d      	ldr	r3, [pc, #180]	; (1680 <main+0xfc>)
    15ca:	4798      	blx	r3
    15cc:	2800      	cmp	r0, #0
    15ce:	d13a      	bne.n	1646 <main+0xc2>
		printf("QSPI Code loading ...");
    15d0:	482c      	ldr	r0, [pc, #176]	; (1684 <main+0x100>)
    15d2:	47a8      	blx	r5
		SPI_NOR_FLASH_0->interface->erase(SPI_NOR_FLASH_0, 0, QSPI_ERSIZE);
    15d4:	4c28      	ldr	r4, [pc, #160]	; (1678 <main+0xf4>)
    15d6:	6820      	ldr	r0, [r4, #0]
    15d8:	6843      	ldr	r3, [r0, #4]
    15da:	689b      	ldr	r3, [r3, #8]
    15dc:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
    15e0:	2100      	movs	r1, #0
    15e2:	4798      	blx	r3
		SPI_NOR_FLASH_0->interface->write(SPI_NOR_FLASH_0, (uint8_t *)src, 0, QSPI_LMSIZE);
    15e4:	6820      	ldr	r0, [r4, #0]
    15e6:	6843      	ldr	r3, [r0, #4]
    15e8:	685c      	ldr	r4, [r3, #4]
    15ea:	f44f 439d 	mov.w	r3, #20096	; 0x4e80
    15ee:	2200      	movs	r2, #0
    15f0:	491f      	ldr	r1, [pc, #124]	; (1670 <main+0xec>)
    15f2:	47a0      	blx	r4
		printf("OK\r\n");
    15f4:	4824      	ldr	r0, [pc, #144]	; (1688 <main+0x104>)
    15f6:	4b18      	ldr	r3, [pc, #96]	; (1658 <main+0xd4>)
    15f8:	4798      	blx	r3
		if (_validate_code()) {
    15fa:	4b21      	ldr	r3, [pc, #132]	; (1680 <main+0xfc>)
    15fc:	4798      	blx	r3
    15fe:	b110      	cbz	r0, 1606 <main+0x82>
			printf("Loaded code validation OK\r\n");
    1600:	4822      	ldr	r0, [pc, #136]	; (168c <main+0x108>)
    1602:	4b15      	ldr	r3, [pc, #84]	; (1658 <main+0xd4>)
    1604:	4798      	blx	r3
	printf("Done\r\n");
    1606:	4822      	ldr	r0, [pc, #136]	; (1690 <main+0x10c>)
    1608:	4c13      	ldr	r4, [pc, #76]	; (1658 <main+0xd4>)
    160a:	47a0      	blx	r4

	_load_qspi();

	printf("Run!\r\n");
    160c:	4821      	ldr	r0, [pc, #132]	; (1694 <main+0x110>)
    160e:	47a0      	blx	r4
	printf("LED blinks,\r\n");
    1610:	4821      	ldr	r0, [pc, #132]	; (1698 <main+0x114>)
    1612:	47a0      	blx	r4
	printf("Press SW0 to change blinking mode.\r\n");
    1614:	4821      	ldr	r0, [pc, #132]	; (169c <main+0x118>)
    1616:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1618:	4f21      	ldr	r7, [pc, #132]	; (16a0 <main+0x11c>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    161a:	4d22      	ldr	r5, [pc, #136]	; (16a4 <main+0x120>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    161c:	4e22      	ldr	r6, [pc, #136]	; (16a8 <main+0x124>)
	CRITICAL_SECTION_ENTER();
    161e:	a803      	add	r0, sp, #12
    1620:	47b8      	blx	r7
    1622:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1626:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    162a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    162e:	405c      	eors	r4, r3
    1630:	4014      	ands	r4, r2
    1632:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    1634:	a803      	add	r0, sp, #12
    1636:	47b0      	blx	r6

	while (1) {
		if (gpio_get_pin_level(SW0)) {
    1638:	2c00      	cmp	r4, #0
			blink_1(delay_ms);
    163a:	481c      	ldr	r0, [pc, #112]	; (16ac <main+0x128>)
    163c:	bfb4      	ite	lt
    163e:	4b1c      	ldrlt	r3, [pc, #112]	; (16b0 <main+0x12c>)
		} else {
			blink_2(delay_ms);
    1640:	4b1c      	ldrge	r3, [pc, #112]	; (16b4 <main+0x130>)
    1642:	4798      	blx	r3
    1644:	e7eb      	b.n	161e <main+0x9a>
		printf("QSPI Code OK, skip loading\r\n");
    1646:	481c      	ldr	r0, [pc, #112]	; (16b8 <main+0x134>)
    1648:	4b03      	ldr	r3, [pc, #12]	; (1658 <main+0xd4>)
    164a:	4798      	blx	r3
    164c:	e7db      	b.n	1606 <main+0x82>
    164e:	bf00      	nop
    1650:	000002d1 	.word	0x000002d1
    1654:	0000785c 	.word	0x0000785c
    1658:	000017fd 	.word	0x000017fd
    165c:	00007768 	.word	0x00007768
    1660:	0001d4c0 	.word	0x0001d4c0
    1664:	00007788 	.word	0x00007788
    1668:	00001715 	.word	0x00001715
    166c:	0000779c 	.word	0x0000779c
    1670:	000028b4 	.word	0x000028b4
    1674:	000077b0 	.word	0x000077b0
    1678:	200000c4 	.word	0x200000c4
    167c:	000077e8 	.word	0x000077e8
    1680:	0000153d 	.word	0x0000153d
    1684:	000077fc 	.word	0x000077fc
    1688:	00007814 	.word	0x00007814
    168c:	00007818 	.word	0x00007818
    1690:	00007850 	.word	0x00007850
    1694:	00007858 	.word	0x00007858
    1698:	00007860 	.word	0x00007860
    169c:	00007870 	.word	0x00007870
    16a0:	00000679 	.word	0x00000679
    16a4:	41008000 	.word	0x41008000
    16a8:	00000687 	.word	0x00000687
    16ac:	000006b5 	.word	0x000006b5
    16b0:	04000001 	.word	0x04000001
    16b4:	0400001d 	.word	0x0400001d
    16b8:	00007834 	.word	0x00007834

000016bc <__libc_init_array>:
    16bc:	b570      	push	{r4, r5, r6, lr}
    16be:	4e0d      	ldr	r6, [pc, #52]	; (16f4 <__libc_init_array+0x38>)
    16c0:	4c0d      	ldr	r4, [pc, #52]	; (16f8 <__libc_init_array+0x3c>)
    16c2:	1ba4      	subs	r4, r4, r6
    16c4:	10a4      	asrs	r4, r4, #2
    16c6:	2500      	movs	r5, #0
    16c8:	42a5      	cmp	r5, r4
    16ca:	d109      	bne.n	16e0 <__libc_init_array+0x24>
    16cc:	4e0b      	ldr	r6, [pc, #44]	; (16fc <__libc_init_array+0x40>)
    16ce:	4c0c      	ldr	r4, [pc, #48]	; (1700 <__libc_init_array+0x44>)
    16d0:	f006 f92c 	bl	792c <_init>
    16d4:	1ba4      	subs	r4, r4, r6
    16d6:	10a4      	asrs	r4, r4, #2
    16d8:	2500      	movs	r5, #0
    16da:	42a5      	cmp	r5, r4
    16dc:	d105      	bne.n	16ea <__libc_init_array+0x2e>
    16de:	bd70      	pop	{r4, r5, r6, pc}
    16e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    16e4:	4798      	blx	r3
    16e6:	3501      	adds	r5, #1
    16e8:	e7ee      	b.n	16c8 <__libc_init_array+0xc>
    16ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    16ee:	4798      	blx	r3
    16f0:	3501      	adds	r5, #1
    16f2:	e7f2      	b.n	16da <__libc_init_array+0x1e>
    16f4:	00007938 	.word	0x00007938
    16f8:	00007938 	.word	0x00007938
    16fc:	00007938 	.word	0x00007938
    1700:	0000793c 	.word	0x0000793c

00001704 <memset>:
    1704:	4402      	add	r2, r0
    1706:	4603      	mov	r3, r0
    1708:	4293      	cmp	r3, r2
    170a:	d100      	bne.n	170e <memset+0xa>
    170c:	4770      	bx	lr
    170e:	f803 1b01 	strb.w	r1, [r3], #1
    1712:	e7f9      	b.n	1708 <memset+0x4>

00001714 <iprintf>:
    1714:	b40f      	push	{r0, r1, r2, r3}
    1716:	4b0a      	ldr	r3, [pc, #40]	; (1740 <iprintf+0x2c>)
    1718:	b513      	push	{r0, r1, r4, lr}
    171a:	681c      	ldr	r4, [r3, #0]
    171c:	b124      	cbz	r4, 1728 <iprintf+0x14>
    171e:	69a3      	ldr	r3, [r4, #24]
    1720:	b913      	cbnz	r3, 1728 <iprintf+0x14>
    1722:	4620      	mov	r0, r4
    1724:	f000 fada 	bl	1cdc <__sinit>
    1728:	ab05      	add	r3, sp, #20
    172a:	9a04      	ldr	r2, [sp, #16]
    172c:	68a1      	ldr	r1, [r4, #8]
    172e:	9301      	str	r3, [sp, #4]
    1730:	4620      	mov	r0, r4
    1732:	f000 fc9d 	bl	2070 <_vfiprintf_r>
    1736:	b002      	add	sp, #8
    1738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    173c:	b004      	add	sp, #16
    173e:	4770      	bx	lr
    1740:	20000000 	.word	0x20000000

00001744 <_puts_r>:
    1744:	b570      	push	{r4, r5, r6, lr}
    1746:	460e      	mov	r6, r1
    1748:	4605      	mov	r5, r0
    174a:	b118      	cbz	r0, 1754 <_puts_r+0x10>
    174c:	6983      	ldr	r3, [r0, #24]
    174e:	b90b      	cbnz	r3, 1754 <_puts_r+0x10>
    1750:	f000 fac4 	bl	1cdc <__sinit>
    1754:	69ab      	ldr	r3, [r5, #24]
    1756:	68ac      	ldr	r4, [r5, #8]
    1758:	b913      	cbnz	r3, 1760 <_puts_r+0x1c>
    175a:	4628      	mov	r0, r5
    175c:	f000 fabe 	bl	1cdc <__sinit>
    1760:	4b23      	ldr	r3, [pc, #140]	; (17f0 <_puts_r+0xac>)
    1762:	429c      	cmp	r4, r3
    1764:	d117      	bne.n	1796 <_puts_r+0x52>
    1766:	686c      	ldr	r4, [r5, #4]
    1768:	89a3      	ldrh	r3, [r4, #12]
    176a:	071b      	lsls	r3, r3, #28
    176c:	d51d      	bpl.n	17aa <_puts_r+0x66>
    176e:	6923      	ldr	r3, [r4, #16]
    1770:	b1db      	cbz	r3, 17aa <_puts_r+0x66>
    1772:	3e01      	subs	r6, #1
    1774:	68a3      	ldr	r3, [r4, #8]
    1776:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    177a:	3b01      	subs	r3, #1
    177c:	60a3      	str	r3, [r4, #8]
    177e:	b9e9      	cbnz	r1, 17bc <_puts_r+0x78>
    1780:	2b00      	cmp	r3, #0
    1782:	da2e      	bge.n	17e2 <_puts_r+0x9e>
    1784:	4622      	mov	r2, r4
    1786:	210a      	movs	r1, #10
    1788:	4628      	mov	r0, r5
    178a:	f000 f8f5 	bl	1978 <__swbuf_r>
    178e:	3001      	adds	r0, #1
    1790:	d011      	beq.n	17b6 <_puts_r+0x72>
    1792:	200a      	movs	r0, #10
    1794:	bd70      	pop	{r4, r5, r6, pc}
    1796:	4b17      	ldr	r3, [pc, #92]	; (17f4 <_puts_r+0xb0>)
    1798:	429c      	cmp	r4, r3
    179a:	d101      	bne.n	17a0 <_puts_r+0x5c>
    179c:	68ac      	ldr	r4, [r5, #8]
    179e:	e7e3      	b.n	1768 <_puts_r+0x24>
    17a0:	4b15      	ldr	r3, [pc, #84]	; (17f8 <_puts_r+0xb4>)
    17a2:	429c      	cmp	r4, r3
    17a4:	bf08      	it	eq
    17a6:	68ec      	ldreq	r4, [r5, #12]
    17a8:	e7de      	b.n	1768 <_puts_r+0x24>
    17aa:	4621      	mov	r1, r4
    17ac:	4628      	mov	r0, r5
    17ae:	f000 f935 	bl	1a1c <__swsetup_r>
    17b2:	2800      	cmp	r0, #0
    17b4:	d0dd      	beq.n	1772 <_puts_r+0x2e>
    17b6:	f04f 30ff 	mov.w	r0, #4294967295
    17ba:	bd70      	pop	{r4, r5, r6, pc}
    17bc:	2b00      	cmp	r3, #0
    17be:	da04      	bge.n	17ca <_puts_r+0x86>
    17c0:	69a2      	ldr	r2, [r4, #24]
    17c2:	4293      	cmp	r3, r2
    17c4:	db06      	blt.n	17d4 <_puts_r+0x90>
    17c6:	290a      	cmp	r1, #10
    17c8:	d004      	beq.n	17d4 <_puts_r+0x90>
    17ca:	6823      	ldr	r3, [r4, #0]
    17cc:	1c5a      	adds	r2, r3, #1
    17ce:	6022      	str	r2, [r4, #0]
    17d0:	7019      	strb	r1, [r3, #0]
    17d2:	e7cf      	b.n	1774 <_puts_r+0x30>
    17d4:	4622      	mov	r2, r4
    17d6:	4628      	mov	r0, r5
    17d8:	f000 f8ce 	bl	1978 <__swbuf_r>
    17dc:	3001      	adds	r0, #1
    17de:	d1c9      	bne.n	1774 <_puts_r+0x30>
    17e0:	e7e9      	b.n	17b6 <_puts_r+0x72>
    17e2:	6823      	ldr	r3, [r4, #0]
    17e4:	200a      	movs	r0, #10
    17e6:	1c5a      	adds	r2, r3, #1
    17e8:	6022      	str	r2, [r4, #0]
    17ea:	7018      	strb	r0, [r3, #0]
    17ec:	bd70      	pop	{r4, r5, r6, pc}
    17ee:	bf00      	nop
    17f0:	000078b8 	.word	0x000078b8
    17f4:	000078d8 	.word	0x000078d8
    17f8:	00007898 	.word	0x00007898

000017fc <puts>:
    17fc:	4b02      	ldr	r3, [pc, #8]	; (1808 <puts+0xc>)
    17fe:	4601      	mov	r1, r0
    1800:	6818      	ldr	r0, [r3, #0]
    1802:	f7ff bf9f 	b.w	1744 <_puts_r>
    1806:	bf00      	nop
    1808:	20000000 	.word	0x20000000

0000180c <setbuf>:
    180c:	2900      	cmp	r1, #0
    180e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1812:	bf0c      	ite	eq
    1814:	2202      	moveq	r2, #2
    1816:	2200      	movne	r2, #0
    1818:	f000 b800 	b.w	181c <setvbuf>

0000181c <setvbuf>:
    181c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1820:	461d      	mov	r5, r3
    1822:	4b51      	ldr	r3, [pc, #324]	; (1968 <setvbuf+0x14c>)
    1824:	681e      	ldr	r6, [r3, #0]
    1826:	4604      	mov	r4, r0
    1828:	460f      	mov	r7, r1
    182a:	4690      	mov	r8, r2
    182c:	b126      	cbz	r6, 1838 <setvbuf+0x1c>
    182e:	69b3      	ldr	r3, [r6, #24]
    1830:	b913      	cbnz	r3, 1838 <setvbuf+0x1c>
    1832:	4630      	mov	r0, r6
    1834:	f000 fa52 	bl	1cdc <__sinit>
    1838:	4b4c      	ldr	r3, [pc, #304]	; (196c <setvbuf+0x150>)
    183a:	429c      	cmp	r4, r3
    183c:	d152      	bne.n	18e4 <setvbuf+0xc8>
    183e:	6874      	ldr	r4, [r6, #4]
    1840:	f1b8 0f02 	cmp.w	r8, #2
    1844:	d006      	beq.n	1854 <setvbuf+0x38>
    1846:	f1b8 0f01 	cmp.w	r8, #1
    184a:	f200 8089 	bhi.w	1960 <setvbuf+0x144>
    184e:	2d00      	cmp	r5, #0
    1850:	f2c0 8086 	blt.w	1960 <setvbuf+0x144>
    1854:	4621      	mov	r1, r4
    1856:	4630      	mov	r0, r6
    1858:	f000 f9d6 	bl	1c08 <_fflush_r>
    185c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    185e:	b141      	cbz	r1, 1872 <setvbuf+0x56>
    1860:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1864:	4299      	cmp	r1, r3
    1866:	d002      	beq.n	186e <setvbuf+0x52>
    1868:	4630      	mov	r0, r6
    186a:	f000 fb2d 	bl	1ec8 <_free_r>
    186e:	2300      	movs	r3, #0
    1870:	6363      	str	r3, [r4, #52]	; 0x34
    1872:	2300      	movs	r3, #0
    1874:	61a3      	str	r3, [r4, #24]
    1876:	6063      	str	r3, [r4, #4]
    1878:	89a3      	ldrh	r3, [r4, #12]
    187a:	061b      	lsls	r3, r3, #24
    187c:	d503      	bpl.n	1886 <setvbuf+0x6a>
    187e:	6921      	ldr	r1, [r4, #16]
    1880:	4630      	mov	r0, r6
    1882:	f000 fb21 	bl	1ec8 <_free_r>
    1886:	89a3      	ldrh	r3, [r4, #12]
    1888:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    188c:	f023 0303 	bic.w	r3, r3, #3
    1890:	f1b8 0f02 	cmp.w	r8, #2
    1894:	81a3      	strh	r3, [r4, #12]
    1896:	d05d      	beq.n	1954 <setvbuf+0x138>
    1898:	ab01      	add	r3, sp, #4
    189a:	466a      	mov	r2, sp
    189c:	4621      	mov	r1, r4
    189e:	4630      	mov	r0, r6
    18a0:	f000 faa6 	bl	1df0 <__swhatbuf_r>
    18a4:	89a3      	ldrh	r3, [r4, #12]
    18a6:	4318      	orrs	r0, r3
    18a8:	81a0      	strh	r0, [r4, #12]
    18aa:	bb2d      	cbnz	r5, 18f8 <setvbuf+0xdc>
    18ac:	9d00      	ldr	r5, [sp, #0]
    18ae:	4628      	mov	r0, r5
    18b0:	f000 fb02 	bl	1eb8 <malloc>
    18b4:	4607      	mov	r7, r0
    18b6:	2800      	cmp	r0, #0
    18b8:	d14e      	bne.n	1958 <setvbuf+0x13c>
    18ba:	f8dd 9000 	ldr.w	r9, [sp]
    18be:	45a9      	cmp	r9, r5
    18c0:	d13c      	bne.n	193c <setvbuf+0x120>
    18c2:	f04f 30ff 	mov.w	r0, #4294967295
    18c6:	89a3      	ldrh	r3, [r4, #12]
    18c8:	f043 0302 	orr.w	r3, r3, #2
    18cc:	81a3      	strh	r3, [r4, #12]
    18ce:	2300      	movs	r3, #0
    18d0:	60a3      	str	r3, [r4, #8]
    18d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
    18d6:	6023      	str	r3, [r4, #0]
    18d8:	6123      	str	r3, [r4, #16]
    18da:	2301      	movs	r3, #1
    18dc:	6163      	str	r3, [r4, #20]
    18de:	b003      	add	sp, #12
    18e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    18e4:	4b22      	ldr	r3, [pc, #136]	; (1970 <setvbuf+0x154>)
    18e6:	429c      	cmp	r4, r3
    18e8:	d101      	bne.n	18ee <setvbuf+0xd2>
    18ea:	68b4      	ldr	r4, [r6, #8]
    18ec:	e7a8      	b.n	1840 <setvbuf+0x24>
    18ee:	4b21      	ldr	r3, [pc, #132]	; (1974 <setvbuf+0x158>)
    18f0:	429c      	cmp	r4, r3
    18f2:	bf08      	it	eq
    18f4:	68f4      	ldreq	r4, [r6, #12]
    18f6:	e7a3      	b.n	1840 <setvbuf+0x24>
    18f8:	2f00      	cmp	r7, #0
    18fa:	d0d8      	beq.n	18ae <setvbuf+0x92>
    18fc:	69b3      	ldr	r3, [r6, #24]
    18fe:	b913      	cbnz	r3, 1906 <setvbuf+0xea>
    1900:	4630      	mov	r0, r6
    1902:	f000 f9eb 	bl	1cdc <__sinit>
    1906:	f1b8 0f01 	cmp.w	r8, #1
    190a:	bf08      	it	eq
    190c:	89a3      	ldrheq	r3, [r4, #12]
    190e:	6027      	str	r7, [r4, #0]
    1910:	bf04      	itt	eq
    1912:	f043 0301 	orreq.w	r3, r3, #1
    1916:	81a3      	strheq	r3, [r4, #12]
    1918:	89a3      	ldrh	r3, [r4, #12]
    191a:	6127      	str	r7, [r4, #16]
    191c:	f013 0008 	ands.w	r0, r3, #8
    1920:	6165      	str	r5, [r4, #20]
    1922:	d01b      	beq.n	195c <setvbuf+0x140>
    1924:	f013 0001 	ands.w	r0, r3, #1
    1928:	bf18      	it	ne
    192a:	426d      	negne	r5, r5
    192c:	f04f 0300 	mov.w	r3, #0
    1930:	bf1d      	ittte	ne
    1932:	60a3      	strne	r3, [r4, #8]
    1934:	61a5      	strne	r5, [r4, #24]
    1936:	4618      	movne	r0, r3
    1938:	60a5      	streq	r5, [r4, #8]
    193a:	e7d0      	b.n	18de <setvbuf+0xc2>
    193c:	4648      	mov	r0, r9
    193e:	f000 fabb 	bl	1eb8 <malloc>
    1942:	4607      	mov	r7, r0
    1944:	2800      	cmp	r0, #0
    1946:	d0bc      	beq.n	18c2 <setvbuf+0xa6>
    1948:	89a3      	ldrh	r3, [r4, #12]
    194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    194e:	81a3      	strh	r3, [r4, #12]
    1950:	464d      	mov	r5, r9
    1952:	e7d3      	b.n	18fc <setvbuf+0xe0>
    1954:	2000      	movs	r0, #0
    1956:	e7b6      	b.n	18c6 <setvbuf+0xaa>
    1958:	46a9      	mov	r9, r5
    195a:	e7f5      	b.n	1948 <setvbuf+0x12c>
    195c:	60a0      	str	r0, [r4, #8]
    195e:	e7be      	b.n	18de <setvbuf+0xc2>
    1960:	f04f 30ff 	mov.w	r0, #4294967295
    1964:	e7bb      	b.n	18de <setvbuf+0xc2>
    1966:	bf00      	nop
    1968:	20000000 	.word	0x20000000
    196c:	000078b8 	.word	0x000078b8
    1970:	000078d8 	.word	0x000078d8
    1974:	00007898 	.word	0x00007898

00001978 <__swbuf_r>:
    1978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    197a:	460e      	mov	r6, r1
    197c:	4614      	mov	r4, r2
    197e:	4605      	mov	r5, r0
    1980:	b118      	cbz	r0, 198a <__swbuf_r+0x12>
    1982:	6983      	ldr	r3, [r0, #24]
    1984:	b90b      	cbnz	r3, 198a <__swbuf_r+0x12>
    1986:	f000 f9a9 	bl	1cdc <__sinit>
    198a:	4b21      	ldr	r3, [pc, #132]	; (1a10 <__swbuf_r+0x98>)
    198c:	429c      	cmp	r4, r3
    198e:	d12a      	bne.n	19e6 <__swbuf_r+0x6e>
    1990:	686c      	ldr	r4, [r5, #4]
    1992:	69a3      	ldr	r3, [r4, #24]
    1994:	60a3      	str	r3, [r4, #8]
    1996:	89a3      	ldrh	r3, [r4, #12]
    1998:	071a      	lsls	r2, r3, #28
    199a:	d52e      	bpl.n	19fa <__swbuf_r+0x82>
    199c:	6923      	ldr	r3, [r4, #16]
    199e:	b363      	cbz	r3, 19fa <__swbuf_r+0x82>
    19a0:	6923      	ldr	r3, [r4, #16]
    19a2:	6820      	ldr	r0, [r4, #0]
    19a4:	1ac0      	subs	r0, r0, r3
    19a6:	6963      	ldr	r3, [r4, #20]
    19a8:	b2f6      	uxtb	r6, r6
    19aa:	4298      	cmp	r0, r3
    19ac:	4637      	mov	r7, r6
    19ae:	db04      	blt.n	19ba <__swbuf_r+0x42>
    19b0:	4621      	mov	r1, r4
    19b2:	4628      	mov	r0, r5
    19b4:	f000 f928 	bl	1c08 <_fflush_r>
    19b8:	bb28      	cbnz	r0, 1a06 <__swbuf_r+0x8e>
    19ba:	68a3      	ldr	r3, [r4, #8]
    19bc:	3b01      	subs	r3, #1
    19be:	60a3      	str	r3, [r4, #8]
    19c0:	6823      	ldr	r3, [r4, #0]
    19c2:	1c5a      	adds	r2, r3, #1
    19c4:	6022      	str	r2, [r4, #0]
    19c6:	701e      	strb	r6, [r3, #0]
    19c8:	6963      	ldr	r3, [r4, #20]
    19ca:	3001      	adds	r0, #1
    19cc:	4298      	cmp	r0, r3
    19ce:	d004      	beq.n	19da <__swbuf_r+0x62>
    19d0:	89a3      	ldrh	r3, [r4, #12]
    19d2:	07db      	lsls	r3, r3, #31
    19d4:	d519      	bpl.n	1a0a <__swbuf_r+0x92>
    19d6:	2e0a      	cmp	r6, #10
    19d8:	d117      	bne.n	1a0a <__swbuf_r+0x92>
    19da:	4621      	mov	r1, r4
    19dc:	4628      	mov	r0, r5
    19de:	f000 f913 	bl	1c08 <_fflush_r>
    19e2:	b190      	cbz	r0, 1a0a <__swbuf_r+0x92>
    19e4:	e00f      	b.n	1a06 <__swbuf_r+0x8e>
    19e6:	4b0b      	ldr	r3, [pc, #44]	; (1a14 <__swbuf_r+0x9c>)
    19e8:	429c      	cmp	r4, r3
    19ea:	d101      	bne.n	19f0 <__swbuf_r+0x78>
    19ec:	68ac      	ldr	r4, [r5, #8]
    19ee:	e7d0      	b.n	1992 <__swbuf_r+0x1a>
    19f0:	4b09      	ldr	r3, [pc, #36]	; (1a18 <__swbuf_r+0xa0>)
    19f2:	429c      	cmp	r4, r3
    19f4:	bf08      	it	eq
    19f6:	68ec      	ldreq	r4, [r5, #12]
    19f8:	e7cb      	b.n	1992 <__swbuf_r+0x1a>
    19fa:	4621      	mov	r1, r4
    19fc:	4628      	mov	r0, r5
    19fe:	f000 f80d 	bl	1a1c <__swsetup_r>
    1a02:	2800      	cmp	r0, #0
    1a04:	d0cc      	beq.n	19a0 <__swbuf_r+0x28>
    1a06:	f04f 37ff 	mov.w	r7, #4294967295
    1a0a:	4638      	mov	r0, r7
    1a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a0e:	bf00      	nop
    1a10:	000078b8 	.word	0x000078b8
    1a14:	000078d8 	.word	0x000078d8
    1a18:	00007898 	.word	0x00007898

00001a1c <__swsetup_r>:
    1a1c:	4b32      	ldr	r3, [pc, #200]	; (1ae8 <__swsetup_r+0xcc>)
    1a1e:	b570      	push	{r4, r5, r6, lr}
    1a20:	681d      	ldr	r5, [r3, #0]
    1a22:	4606      	mov	r6, r0
    1a24:	460c      	mov	r4, r1
    1a26:	b125      	cbz	r5, 1a32 <__swsetup_r+0x16>
    1a28:	69ab      	ldr	r3, [r5, #24]
    1a2a:	b913      	cbnz	r3, 1a32 <__swsetup_r+0x16>
    1a2c:	4628      	mov	r0, r5
    1a2e:	f000 f955 	bl	1cdc <__sinit>
    1a32:	4b2e      	ldr	r3, [pc, #184]	; (1aec <__swsetup_r+0xd0>)
    1a34:	429c      	cmp	r4, r3
    1a36:	d10f      	bne.n	1a58 <__swsetup_r+0x3c>
    1a38:	686c      	ldr	r4, [r5, #4]
    1a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a3e:	b29a      	uxth	r2, r3
    1a40:	0715      	lsls	r5, r2, #28
    1a42:	d42c      	bmi.n	1a9e <__swsetup_r+0x82>
    1a44:	06d0      	lsls	r0, r2, #27
    1a46:	d411      	bmi.n	1a6c <__swsetup_r+0x50>
    1a48:	2209      	movs	r2, #9
    1a4a:	6032      	str	r2, [r6, #0]
    1a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a50:	81a3      	strh	r3, [r4, #12]
    1a52:	f04f 30ff 	mov.w	r0, #4294967295
    1a56:	bd70      	pop	{r4, r5, r6, pc}
    1a58:	4b25      	ldr	r3, [pc, #148]	; (1af0 <__swsetup_r+0xd4>)
    1a5a:	429c      	cmp	r4, r3
    1a5c:	d101      	bne.n	1a62 <__swsetup_r+0x46>
    1a5e:	68ac      	ldr	r4, [r5, #8]
    1a60:	e7eb      	b.n	1a3a <__swsetup_r+0x1e>
    1a62:	4b24      	ldr	r3, [pc, #144]	; (1af4 <__swsetup_r+0xd8>)
    1a64:	429c      	cmp	r4, r3
    1a66:	bf08      	it	eq
    1a68:	68ec      	ldreq	r4, [r5, #12]
    1a6a:	e7e6      	b.n	1a3a <__swsetup_r+0x1e>
    1a6c:	0751      	lsls	r1, r2, #29
    1a6e:	d512      	bpl.n	1a96 <__swsetup_r+0x7a>
    1a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a72:	b141      	cbz	r1, 1a86 <__swsetup_r+0x6a>
    1a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1a78:	4299      	cmp	r1, r3
    1a7a:	d002      	beq.n	1a82 <__swsetup_r+0x66>
    1a7c:	4630      	mov	r0, r6
    1a7e:	f000 fa23 	bl	1ec8 <_free_r>
    1a82:	2300      	movs	r3, #0
    1a84:	6363      	str	r3, [r4, #52]	; 0x34
    1a86:	89a3      	ldrh	r3, [r4, #12]
    1a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1a8c:	81a3      	strh	r3, [r4, #12]
    1a8e:	2300      	movs	r3, #0
    1a90:	6063      	str	r3, [r4, #4]
    1a92:	6923      	ldr	r3, [r4, #16]
    1a94:	6023      	str	r3, [r4, #0]
    1a96:	89a3      	ldrh	r3, [r4, #12]
    1a98:	f043 0308 	orr.w	r3, r3, #8
    1a9c:	81a3      	strh	r3, [r4, #12]
    1a9e:	6923      	ldr	r3, [r4, #16]
    1aa0:	b94b      	cbnz	r3, 1ab6 <__swsetup_r+0x9a>
    1aa2:	89a3      	ldrh	r3, [r4, #12]
    1aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1aac:	d003      	beq.n	1ab6 <__swsetup_r+0x9a>
    1aae:	4621      	mov	r1, r4
    1ab0:	4630      	mov	r0, r6
    1ab2:	f000 f9c1 	bl	1e38 <__smakebuf_r>
    1ab6:	89a2      	ldrh	r2, [r4, #12]
    1ab8:	f012 0301 	ands.w	r3, r2, #1
    1abc:	d00c      	beq.n	1ad8 <__swsetup_r+0xbc>
    1abe:	2300      	movs	r3, #0
    1ac0:	60a3      	str	r3, [r4, #8]
    1ac2:	6963      	ldr	r3, [r4, #20]
    1ac4:	425b      	negs	r3, r3
    1ac6:	61a3      	str	r3, [r4, #24]
    1ac8:	6923      	ldr	r3, [r4, #16]
    1aca:	b953      	cbnz	r3, 1ae2 <__swsetup_r+0xc6>
    1acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1ad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1ad4:	d1ba      	bne.n	1a4c <__swsetup_r+0x30>
    1ad6:	bd70      	pop	{r4, r5, r6, pc}
    1ad8:	0792      	lsls	r2, r2, #30
    1ada:	bf58      	it	pl
    1adc:	6963      	ldrpl	r3, [r4, #20]
    1ade:	60a3      	str	r3, [r4, #8]
    1ae0:	e7f2      	b.n	1ac8 <__swsetup_r+0xac>
    1ae2:	2000      	movs	r0, #0
    1ae4:	e7f7      	b.n	1ad6 <__swsetup_r+0xba>
    1ae6:	bf00      	nop
    1ae8:	20000000 	.word	0x20000000
    1aec:	000078b8 	.word	0x000078b8
    1af0:	000078d8 	.word	0x000078d8
    1af4:	00007898 	.word	0x00007898

00001af8 <__sflush_r>:
    1af8:	898a      	ldrh	r2, [r1, #12]
    1afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1afe:	4605      	mov	r5, r0
    1b00:	0710      	lsls	r0, r2, #28
    1b02:	460c      	mov	r4, r1
    1b04:	d45a      	bmi.n	1bbc <__sflush_r+0xc4>
    1b06:	684b      	ldr	r3, [r1, #4]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dc05      	bgt.n	1b18 <__sflush_r+0x20>
    1b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1b0e:	2b00      	cmp	r3, #0
    1b10:	dc02      	bgt.n	1b18 <__sflush_r+0x20>
    1b12:	2000      	movs	r0, #0
    1b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1b1a:	2e00      	cmp	r6, #0
    1b1c:	d0f9      	beq.n	1b12 <__sflush_r+0x1a>
    1b1e:	2300      	movs	r3, #0
    1b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1b24:	682f      	ldr	r7, [r5, #0]
    1b26:	602b      	str	r3, [r5, #0]
    1b28:	d033      	beq.n	1b92 <__sflush_r+0x9a>
    1b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1b2c:	89a3      	ldrh	r3, [r4, #12]
    1b2e:	075a      	lsls	r2, r3, #29
    1b30:	d505      	bpl.n	1b3e <__sflush_r+0x46>
    1b32:	6863      	ldr	r3, [r4, #4]
    1b34:	1ac0      	subs	r0, r0, r3
    1b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1b38:	b10b      	cbz	r3, 1b3e <__sflush_r+0x46>
    1b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1b3c:	1ac0      	subs	r0, r0, r3
    1b3e:	2300      	movs	r3, #0
    1b40:	4602      	mov	r2, r0
    1b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1b44:	6a21      	ldr	r1, [r4, #32]
    1b46:	4628      	mov	r0, r5
    1b48:	47b0      	blx	r6
    1b4a:	1c43      	adds	r3, r0, #1
    1b4c:	89a3      	ldrh	r3, [r4, #12]
    1b4e:	d106      	bne.n	1b5e <__sflush_r+0x66>
    1b50:	6829      	ldr	r1, [r5, #0]
    1b52:	291d      	cmp	r1, #29
    1b54:	d84b      	bhi.n	1bee <__sflush_r+0xf6>
    1b56:	4a2b      	ldr	r2, [pc, #172]	; (1c04 <__sflush_r+0x10c>)
    1b58:	40ca      	lsrs	r2, r1
    1b5a:	07d6      	lsls	r6, r2, #31
    1b5c:	d547      	bpl.n	1bee <__sflush_r+0xf6>
    1b5e:	2200      	movs	r2, #0
    1b60:	6062      	str	r2, [r4, #4]
    1b62:	04d9      	lsls	r1, r3, #19
    1b64:	6922      	ldr	r2, [r4, #16]
    1b66:	6022      	str	r2, [r4, #0]
    1b68:	d504      	bpl.n	1b74 <__sflush_r+0x7c>
    1b6a:	1c42      	adds	r2, r0, #1
    1b6c:	d101      	bne.n	1b72 <__sflush_r+0x7a>
    1b6e:	682b      	ldr	r3, [r5, #0]
    1b70:	b903      	cbnz	r3, 1b74 <__sflush_r+0x7c>
    1b72:	6560      	str	r0, [r4, #84]	; 0x54
    1b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1b76:	602f      	str	r7, [r5, #0]
    1b78:	2900      	cmp	r1, #0
    1b7a:	d0ca      	beq.n	1b12 <__sflush_r+0x1a>
    1b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1b80:	4299      	cmp	r1, r3
    1b82:	d002      	beq.n	1b8a <__sflush_r+0x92>
    1b84:	4628      	mov	r0, r5
    1b86:	f000 f99f 	bl	1ec8 <_free_r>
    1b8a:	2000      	movs	r0, #0
    1b8c:	6360      	str	r0, [r4, #52]	; 0x34
    1b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b92:	6a21      	ldr	r1, [r4, #32]
    1b94:	2301      	movs	r3, #1
    1b96:	4628      	mov	r0, r5
    1b98:	47b0      	blx	r6
    1b9a:	1c41      	adds	r1, r0, #1
    1b9c:	d1c6      	bne.n	1b2c <__sflush_r+0x34>
    1b9e:	682b      	ldr	r3, [r5, #0]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d0c3      	beq.n	1b2c <__sflush_r+0x34>
    1ba4:	2b1d      	cmp	r3, #29
    1ba6:	d001      	beq.n	1bac <__sflush_r+0xb4>
    1ba8:	2b16      	cmp	r3, #22
    1baa:	d101      	bne.n	1bb0 <__sflush_r+0xb8>
    1bac:	602f      	str	r7, [r5, #0]
    1bae:	e7b0      	b.n	1b12 <__sflush_r+0x1a>
    1bb0:	89a3      	ldrh	r3, [r4, #12]
    1bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bb6:	81a3      	strh	r3, [r4, #12]
    1bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bbc:	690f      	ldr	r7, [r1, #16]
    1bbe:	2f00      	cmp	r7, #0
    1bc0:	d0a7      	beq.n	1b12 <__sflush_r+0x1a>
    1bc2:	0793      	lsls	r3, r2, #30
    1bc4:	680e      	ldr	r6, [r1, #0]
    1bc6:	bf08      	it	eq
    1bc8:	694b      	ldreq	r3, [r1, #20]
    1bca:	600f      	str	r7, [r1, #0]
    1bcc:	bf18      	it	ne
    1bce:	2300      	movne	r3, #0
    1bd0:	eba6 0807 	sub.w	r8, r6, r7
    1bd4:	608b      	str	r3, [r1, #8]
    1bd6:	f1b8 0f00 	cmp.w	r8, #0
    1bda:	dd9a      	ble.n	1b12 <__sflush_r+0x1a>
    1bdc:	4643      	mov	r3, r8
    1bde:	463a      	mov	r2, r7
    1be0:	6a21      	ldr	r1, [r4, #32]
    1be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1be4:	4628      	mov	r0, r5
    1be6:	47b0      	blx	r6
    1be8:	2800      	cmp	r0, #0
    1bea:	dc07      	bgt.n	1bfc <__sflush_r+0x104>
    1bec:	89a3      	ldrh	r3, [r4, #12]
    1bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bf2:	81a3      	strh	r3, [r4, #12]
    1bf4:	f04f 30ff 	mov.w	r0, #4294967295
    1bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bfc:	4407      	add	r7, r0
    1bfe:	eba8 0800 	sub.w	r8, r8, r0
    1c02:	e7e8      	b.n	1bd6 <__sflush_r+0xde>
    1c04:	20400001 	.word	0x20400001

00001c08 <_fflush_r>:
    1c08:	b538      	push	{r3, r4, r5, lr}
    1c0a:	690b      	ldr	r3, [r1, #16]
    1c0c:	4605      	mov	r5, r0
    1c0e:	460c      	mov	r4, r1
    1c10:	b1db      	cbz	r3, 1c4a <_fflush_r+0x42>
    1c12:	b118      	cbz	r0, 1c1c <_fflush_r+0x14>
    1c14:	6983      	ldr	r3, [r0, #24]
    1c16:	b90b      	cbnz	r3, 1c1c <_fflush_r+0x14>
    1c18:	f000 f860 	bl	1cdc <__sinit>
    1c1c:	4b0c      	ldr	r3, [pc, #48]	; (1c50 <_fflush_r+0x48>)
    1c1e:	429c      	cmp	r4, r3
    1c20:	d109      	bne.n	1c36 <_fflush_r+0x2e>
    1c22:	686c      	ldr	r4, [r5, #4]
    1c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c28:	b17b      	cbz	r3, 1c4a <_fflush_r+0x42>
    1c2a:	4621      	mov	r1, r4
    1c2c:	4628      	mov	r0, r5
    1c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c32:	f7ff bf61 	b.w	1af8 <__sflush_r>
    1c36:	4b07      	ldr	r3, [pc, #28]	; (1c54 <_fflush_r+0x4c>)
    1c38:	429c      	cmp	r4, r3
    1c3a:	d101      	bne.n	1c40 <_fflush_r+0x38>
    1c3c:	68ac      	ldr	r4, [r5, #8]
    1c3e:	e7f1      	b.n	1c24 <_fflush_r+0x1c>
    1c40:	4b05      	ldr	r3, [pc, #20]	; (1c58 <_fflush_r+0x50>)
    1c42:	429c      	cmp	r4, r3
    1c44:	bf08      	it	eq
    1c46:	68ec      	ldreq	r4, [r5, #12]
    1c48:	e7ec      	b.n	1c24 <_fflush_r+0x1c>
    1c4a:	2000      	movs	r0, #0
    1c4c:	bd38      	pop	{r3, r4, r5, pc}
    1c4e:	bf00      	nop
    1c50:	000078b8 	.word	0x000078b8
    1c54:	000078d8 	.word	0x000078d8
    1c58:	00007898 	.word	0x00007898

00001c5c <_cleanup_r>:
    1c5c:	4901      	ldr	r1, [pc, #4]	; (1c64 <_cleanup_r+0x8>)
    1c5e:	f000 b8a9 	b.w	1db4 <_fwalk_reent>
    1c62:	bf00      	nop
    1c64:	00001c09 	.word	0x00001c09

00001c68 <std.isra.0>:
    1c68:	2300      	movs	r3, #0
    1c6a:	b510      	push	{r4, lr}
    1c6c:	4604      	mov	r4, r0
    1c6e:	6003      	str	r3, [r0, #0]
    1c70:	6043      	str	r3, [r0, #4]
    1c72:	6083      	str	r3, [r0, #8]
    1c74:	8181      	strh	r1, [r0, #12]
    1c76:	6643      	str	r3, [r0, #100]	; 0x64
    1c78:	81c2      	strh	r2, [r0, #14]
    1c7a:	6103      	str	r3, [r0, #16]
    1c7c:	6143      	str	r3, [r0, #20]
    1c7e:	6183      	str	r3, [r0, #24]
    1c80:	4619      	mov	r1, r3
    1c82:	2208      	movs	r2, #8
    1c84:	305c      	adds	r0, #92	; 0x5c
    1c86:	f7ff fd3d 	bl	1704 <memset>
    1c8a:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <std.isra.0+0x38>)
    1c8c:	6263      	str	r3, [r4, #36]	; 0x24
    1c8e:	4b05      	ldr	r3, [pc, #20]	; (1ca4 <std.isra.0+0x3c>)
    1c90:	62a3      	str	r3, [r4, #40]	; 0x28
    1c92:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <std.isra.0+0x40>)
    1c94:	62e3      	str	r3, [r4, #44]	; 0x2c
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <std.isra.0+0x44>)
    1c98:	6224      	str	r4, [r4, #32]
    1c9a:	6323      	str	r3, [r4, #48]	; 0x30
    1c9c:	bd10      	pop	{r4, pc}
    1c9e:	bf00      	nop
    1ca0:	000025e9 	.word	0x000025e9
    1ca4:	0000260b 	.word	0x0000260b
    1ca8:	00002643 	.word	0x00002643
    1cac:	00002667 	.word	0x00002667

00001cb0 <__sfmoreglue>:
    1cb0:	b570      	push	{r4, r5, r6, lr}
    1cb2:	1e4a      	subs	r2, r1, #1
    1cb4:	2568      	movs	r5, #104	; 0x68
    1cb6:	4355      	muls	r5, r2
    1cb8:	460e      	mov	r6, r1
    1cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1cbe:	f000 f951 	bl	1f64 <_malloc_r>
    1cc2:	4604      	mov	r4, r0
    1cc4:	b140      	cbz	r0, 1cd8 <__sfmoreglue+0x28>
    1cc6:	2100      	movs	r1, #0
    1cc8:	e880 0042 	stmia.w	r0, {r1, r6}
    1ccc:	300c      	adds	r0, #12
    1cce:	60a0      	str	r0, [r4, #8]
    1cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1cd4:	f7ff fd16 	bl	1704 <memset>
    1cd8:	4620      	mov	r0, r4
    1cda:	bd70      	pop	{r4, r5, r6, pc}

00001cdc <__sinit>:
    1cdc:	6983      	ldr	r3, [r0, #24]
    1cde:	b510      	push	{r4, lr}
    1ce0:	4604      	mov	r4, r0
    1ce2:	bb33      	cbnz	r3, 1d32 <__sinit+0x56>
    1ce4:	6483      	str	r3, [r0, #72]	; 0x48
    1ce6:	64c3      	str	r3, [r0, #76]	; 0x4c
    1ce8:	6503      	str	r3, [r0, #80]	; 0x50
    1cea:	4b12      	ldr	r3, [pc, #72]	; (1d34 <__sinit+0x58>)
    1cec:	4a12      	ldr	r2, [pc, #72]	; (1d38 <__sinit+0x5c>)
    1cee:	681b      	ldr	r3, [r3, #0]
    1cf0:	6282      	str	r2, [r0, #40]	; 0x28
    1cf2:	4298      	cmp	r0, r3
    1cf4:	bf04      	itt	eq
    1cf6:	2301      	moveq	r3, #1
    1cf8:	6183      	streq	r3, [r0, #24]
    1cfa:	f000 f81f 	bl	1d3c <__sfp>
    1cfe:	6060      	str	r0, [r4, #4]
    1d00:	4620      	mov	r0, r4
    1d02:	f000 f81b 	bl	1d3c <__sfp>
    1d06:	60a0      	str	r0, [r4, #8]
    1d08:	4620      	mov	r0, r4
    1d0a:	f000 f817 	bl	1d3c <__sfp>
    1d0e:	2200      	movs	r2, #0
    1d10:	60e0      	str	r0, [r4, #12]
    1d12:	2104      	movs	r1, #4
    1d14:	6860      	ldr	r0, [r4, #4]
    1d16:	f7ff ffa7 	bl	1c68 <std.isra.0>
    1d1a:	2201      	movs	r2, #1
    1d1c:	2109      	movs	r1, #9
    1d1e:	68a0      	ldr	r0, [r4, #8]
    1d20:	f7ff ffa2 	bl	1c68 <std.isra.0>
    1d24:	2202      	movs	r2, #2
    1d26:	2112      	movs	r1, #18
    1d28:	68e0      	ldr	r0, [r4, #12]
    1d2a:	f7ff ff9d 	bl	1c68 <std.isra.0>
    1d2e:	2301      	movs	r3, #1
    1d30:	61a3      	str	r3, [r4, #24]
    1d32:	bd10      	pop	{r4, pc}
    1d34:	00007894 	.word	0x00007894
    1d38:	00001c5d 	.word	0x00001c5d

00001d3c <__sfp>:
    1d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d3e:	4b1c      	ldr	r3, [pc, #112]	; (1db0 <__sfp+0x74>)
    1d40:	681e      	ldr	r6, [r3, #0]
    1d42:	69b3      	ldr	r3, [r6, #24]
    1d44:	4607      	mov	r7, r0
    1d46:	b913      	cbnz	r3, 1d4e <__sfp+0x12>
    1d48:	4630      	mov	r0, r6
    1d4a:	f7ff ffc7 	bl	1cdc <__sinit>
    1d4e:	3648      	adds	r6, #72	; 0x48
    1d50:	68b4      	ldr	r4, [r6, #8]
    1d52:	6873      	ldr	r3, [r6, #4]
    1d54:	3b01      	subs	r3, #1
    1d56:	d503      	bpl.n	1d60 <__sfp+0x24>
    1d58:	6833      	ldr	r3, [r6, #0]
    1d5a:	b133      	cbz	r3, 1d6a <__sfp+0x2e>
    1d5c:	6836      	ldr	r6, [r6, #0]
    1d5e:	e7f7      	b.n	1d50 <__sfp+0x14>
    1d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1d64:	b16d      	cbz	r5, 1d82 <__sfp+0x46>
    1d66:	3468      	adds	r4, #104	; 0x68
    1d68:	e7f4      	b.n	1d54 <__sfp+0x18>
    1d6a:	2104      	movs	r1, #4
    1d6c:	4638      	mov	r0, r7
    1d6e:	f7ff ff9f 	bl	1cb0 <__sfmoreglue>
    1d72:	6030      	str	r0, [r6, #0]
    1d74:	2800      	cmp	r0, #0
    1d76:	d1f1      	bne.n	1d5c <__sfp+0x20>
    1d78:	230c      	movs	r3, #12
    1d7a:	603b      	str	r3, [r7, #0]
    1d7c:	4604      	mov	r4, r0
    1d7e:	4620      	mov	r0, r4
    1d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d86:	81e3      	strh	r3, [r4, #14]
    1d88:	2301      	movs	r3, #1
    1d8a:	81a3      	strh	r3, [r4, #12]
    1d8c:	6665      	str	r5, [r4, #100]	; 0x64
    1d8e:	6025      	str	r5, [r4, #0]
    1d90:	60a5      	str	r5, [r4, #8]
    1d92:	6065      	str	r5, [r4, #4]
    1d94:	6125      	str	r5, [r4, #16]
    1d96:	6165      	str	r5, [r4, #20]
    1d98:	61a5      	str	r5, [r4, #24]
    1d9a:	2208      	movs	r2, #8
    1d9c:	4629      	mov	r1, r5
    1d9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1da2:	f7ff fcaf 	bl	1704 <memset>
    1da6:	6365      	str	r5, [r4, #52]	; 0x34
    1da8:	63a5      	str	r5, [r4, #56]	; 0x38
    1daa:	64a5      	str	r5, [r4, #72]	; 0x48
    1dac:	64e5      	str	r5, [r4, #76]	; 0x4c
    1dae:	e7e6      	b.n	1d7e <__sfp+0x42>
    1db0:	00007894 	.word	0x00007894

00001db4 <_fwalk_reent>:
    1db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1db8:	4680      	mov	r8, r0
    1dba:	4689      	mov	r9, r1
    1dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1dc0:	2600      	movs	r6, #0
    1dc2:	b914      	cbnz	r4, 1dca <_fwalk_reent+0x16>
    1dc4:	4630      	mov	r0, r6
    1dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dca:	68a5      	ldr	r5, [r4, #8]
    1dcc:	6867      	ldr	r7, [r4, #4]
    1dce:	3f01      	subs	r7, #1
    1dd0:	d501      	bpl.n	1dd6 <_fwalk_reent+0x22>
    1dd2:	6824      	ldr	r4, [r4, #0]
    1dd4:	e7f5      	b.n	1dc2 <_fwalk_reent+0xe>
    1dd6:	89ab      	ldrh	r3, [r5, #12]
    1dd8:	2b01      	cmp	r3, #1
    1dda:	d907      	bls.n	1dec <_fwalk_reent+0x38>
    1ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1de0:	3301      	adds	r3, #1
    1de2:	d003      	beq.n	1dec <_fwalk_reent+0x38>
    1de4:	4629      	mov	r1, r5
    1de6:	4640      	mov	r0, r8
    1de8:	47c8      	blx	r9
    1dea:	4306      	orrs	r6, r0
    1dec:	3568      	adds	r5, #104	; 0x68
    1dee:	e7ee      	b.n	1dce <_fwalk_reent+0x1a>

00001df0 <__swhatbuf_r>:
    1df0:	b570      	push	{r4, r5, r6, lr}
    1df2:	460e      	mov	r6, r1
    1df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1df8:	2900      	cmp	r1, #0
    1dfa:	b090      	sub	sp, #64	; 0x40
    1dfc:	4614      	mov	r4, r2
    1dfe:	461d      	mov	r5, r3
    1e00:	da07      	bge.n	1e12 <__swhatbuf_r+0x22>
    1e02:	2300      	movs	r3, #0
    1e04:	602b      	str	r3, [r5, #0]
    1e06:	89b3      	ldrh	r3, [r6, #12]
    1e08:	061a      	lsls	r2, r3, #24
    1e0a:	d410      	bmi.n	1e2e <__swhatbuf_r+0x3e>
    1e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1e10:	e00e      	b.n	1e30 <__swhatbuf_r+0x40>
    1e12:	aa01      	add	r2, sp, #4
    1e14:	f000 fc4e 	bl	26b4 <_fstat_r>
    1e18:	2800      	cmp	r0, #0
    1e1a:	dbf2      	blt.n	1e02 <__swhatbuf_r+0x12>
    1e1c:	9a02      	ldr	r2, [sp, #8]
    1e1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1e22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1e26:	425a      	negs	r2, r3
    1e28:	415a      	adcs	r2, r3
    1e2a:	602a      	str	r2, [r5, #0]
    1e2c:	e7ee      	b.n	1e0c <__swhatbuf_r+0x1c>
    1e2e:	2340      	movs	r3, #64	; 0x40
    1e30:	2000      	movs	r0, #0
    1e32:	6023      	str	r3, [r4, #0]
    1e34:	b010      	add	sp, #64	; 0x40
    1e36:	bd70      	pop	{r4, r5, r6, pc}

00001e38 <__smakebuf_r>:
    1e38:	898b      	ldrh	r3, [r1, #12]
    1e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1e3c:	079d      	lsls	r5, r3, #30
    1e3e:	4606      	mov	r6, r0
    1e40:	460c      	mov	r4, r1
    1e42:	d507      	bpl.n	1e54 <__smakebuf_r+0x1c>
    1e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1e48:	6023      	str	r3, [r4, #0]
    1e4a:	6123      	str	r3, [r4, #16]
    1e4c:	2301      	movs	r3, #1
    1e4e:	6163      	str	r3, [r4, #20]
    1e50:	b002      	add	sp, #8
    1e52:	bd70      	pop	{r4, r5, r6, pc}
    1e54:	ab01      	add	r3, sp, #4
    1e56:	466a      	mov	r2, sp
    1e58:	f7ff ffca 	bl	1df0 <__swhatbuf_r>
    1e5c:	9900      	ldr	r1, [sp, #0]
    1e5e:	4605      	mov	r5, r0
    1e60:	4630      	mov	r0, r6
    1e62:	f000 f87f 	bl	1f64 <_malloc_r>
    1e66:	b948      	cbnz	r0, 1e7c <__smakebuf_r+0x44>
    1e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1e6c:	059a      	lsls	r2, r3, #22
    1e6e:	d4ef      	bmi.n	1e50 <__smakebuf_r+0x18>
    1e70:	f023 0303 	bic.w	r3, r3, #3
    1e74:	f043 0302 	orr.w	r3, r3, #2
    1e78:	81a3      	strh	r3, [r4, #12]
    1e7a:	e7e3      	b.n	1e44 <__smakebuf_r+0xc>
    1e7c:	4b0d      	ldr	r3, [pc, #52]	; (1eb4 <__smakebuf_r+0x7c>)
    1e7e:	62b3      	str	r3, [r6, #40]	; 0x28
    1e80:	89a3      	ldrh	r3, [r4, #12]
    1e82:	6020      	str	r0, [r4, #0]
    1e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1e88:	81a3      	strh	r3, [r4, #12]
    1e8a:	9b00      	ldr	r3, [sp, #0]
    1e8c:	6163      	str	r3, [r4, #20]
    1e8e:	9b01      	ldr	r3, [sp, #4]
    1e90:	6120      	str	r0, [r4, #16]
    1e92:	b15b      	cbz	r3, 1eac <__smakebuf_r+0x74>
    1e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1e98:	4630      	mov	r0, r6
    1e9a:	f000 fc1d 	bl	26d8 <_isatty_r>
    1e9e:	b128      	cbz	r0, 1eac <__smakebuf_r+0x74>
    1ea0:	89a3      	ldrh	r3, [r4, #12]
    1ea2:	f023 0303 	bic.w	r3, r3, #3
    1ea6:	f043 0301 	orr.w	r3, r3, #1
    1eaa:	81a3      	strh	r3, [r4, #12]
    1eac:	89a3      	ldrh	r3, [r4, #12]
    1eae:	431d      	orrs	r5, r3
    1eb0:	81a5      	strh	r5, [r4, #12]
    1eb2:	e7cd      	b.n	1e50 <__smakebuf_r+0x18>
    1eb4:	00001c5d 	.word	0x00001c5d

00001eb8 <malloc>:
    1eb8:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <malloc+0xc>)
    1eba:	4601      	mov	r1, r0
    1ebc:	6818      	ldr	r0, [r3, #0]
    1ebe:	f000 b851 	b.w	1f64 <_malloc_r>
    1ec2:	bf00      	nop
    1ec4:	20000000 	.word	0x20000000

00001ec8 <_free_r>:
    1ec8:	b538      	push	{r3, r4, r5, lr}
    1eca:	4605      	mov	r5, r0
    1ecc:	2900      	cmp	r1, #0
    1ece:	d045      	beq.n	1f5c <_free_r+0x94>
    1ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1ed4:	1f0c      	subs	r4, r1, #4
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	bfb8      	it	lt
    1eda:	18e4      	addlt	r4, r4, r3
    1edc:	f000 fc70 	bl	27c0 <__malloc_lock>
    1ee0:	4a1f      	ldr	r2, [pc, #124]	; (1f60 <_free_r+0x98>)
    1ee2:	6813      	ldr	r3, [r2, #0]
    1ee4:	4610      	mov	r0, r2
    1ee6:	b933      	cbnz	r3, 1ef6 <_free_r+0x2e>
    1ee8:	6063      	str	r3, [r4, #4]
    1eea:	6014      	str	r4, [r2, #0]
    1eec:	4628      	mov	r0, r5
    1eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1ef2:	f000 bc66 	b.w	27c2 <__malloc_unlock>
    1ef6:	42a3      	cmp	r3, r4
    1ef8:	d90c      	bls.n	1f14 <_free_r+0x4c>
    1efa:	6821      	ldr	r1, [r4, #0]
    1efc:	1862      	adds	r2, r4, r1
    1efe:	4293      	cmp	r3, r2
    1f00:	bf04      	itt	eq
    1f02:	681a      	ldreq	r2, [r3, #0]
    1f04:	685b      	ldreq	r3, [r3, #4]
    1f06:	6063      	str	r3, [r4, #4]
    1f08:	bf04      	itt	eq
    1f0a:	1852      	addeq	r2, r2, r1
    1f0c:	6022      	streq	r2, [r4, #0]
    1f0e:	6004      	str	r4, [r0, #0]
    1f10:	e7ec      	b.n	1eec <_free_r+0x24>
    1f12:	4613      	mov	r3, r2
    1f14:	685a      	ldr	r2, [r3, #4]
    1f16:	b10a      	cbz	r2, 1f1c <_free_r+0x54>
    1f18:	42a2      	cmp	r2, r4
    1f1a:	d9fa      	bls.n	1f12 <_free_r+0x4a>
    1f1c:	6819      	ldr	r1, [r3, #0]
    1f1e:	1858      	adds	r0, r3, r1
    1f20:	42a0      	cmp	r0, r4
    1f22:	d10b      	bne.n	1f3c <_free_r+0x74>
    1f24:	6820      	ldr	r0, [r4, #0]
    1f26:	4401      	add	r1, r0
    1f28:	1858      	adds	r0, r3, r1
    1f2a:	4282      	cmp	r2, r0
    1f2c:	6019      	str	r1, [r3, #0]
    1f2e:	d1dd      	bne.n	1eec <_free_r+0x24>
    1f30:	6810      	ldr	r0, [r2, #0]
    1f32:	6852      	ldr	r2, [r2, #4]
    1f34:	605a      	str	r2, [r3, #4]
    1f36:	4401      	add	r1, r0
    1f38:	6019      	str	r1, [r3, #0]
    1f3a:	e7d7      	b.n	1eec <_free_r+0x24>
    1f3c:	d902      	bls.n	1f44 <_free_r+0x7c>
    1f3e:	230c      	movs	r3, #12
    1f40:	602b      	str	r3, [r5, #0]
    1f42:	e7d3      	b.n	1eec <_free_r+0x24>
    1f44:	6820      	ldr	r0, [r4, #0]
    1f46:	1821      	adds	r1, r4, r0
    1f48:	428a      	cmp	r2, r1
    1f4a:	bf04      	itt	eq
    1f4c:	6811      	ldreq	r1, [r2, #0]
    1f4e:	6852      	ldreq	r2, [r2, #4]
    1f50:	6062      	str	r2, [r4, #4]
    1f52:	bf04      	itt	eq
    1f54:	1809      	addeq	r1, r1, r0
    1f56:	6021      	streq	r1, [r4, #0]
    1f58:	605c      	str	r4, [r3, #4]
    1f5a:	e7c7      	b.n	1eec <_free_r+0x24>
    1f5c:	bd38      	pop	{r3, r4, r5, pc}
    1f5e:	bf00      	nop
    1f60:	2000009c 	.word	0x2000009c

00001f64 <_malloc_r>:
    1f64:	b570      	push	{r4, r5, r6, lr}
    1f66:	1ccd      	adds	r5, r1, #3
    1f68:	f025 0503 	bic.w	r5, r5, #3
    1f6c:	3508      	adds	r5, #8
    1f6e:	2d0c      	cmp	r5, #12
    1f70:	bf38      	it	cc
    1f72:	250c      	movcc	r5, #12
    1f74:	2d00      	cmp	r5, #0
    1f76:	4606      	mov	r6, r0
    1f78:	db01      	blt.n	1f7e <_malloc_r+0x1a>
    1f7a:	42a9      	cmp	r1, r5
    1f7c:	d903      	bls.n	1f86 <_malloc_r+0x22>
    1f7e:	230c      	movs	r3, #12
    1f80:	6033      	str	r3, [r6, #0]
    1f82:	2000      	movs	r0, #0
    1f84:	bd70      	pop	{r4, r5, r6, pc}
    1f86:	f000 fc1b 	bl	27c0 <__malloc_lock>
    1f8a:	4a23      	ldr	r2, [pc, #140]	; (2018 <_malloc_r+0xb4>)
    1f8c:	6814      	ldr	r4, [r2, #0]
    1f8e:	4621      	mov	r1, r4
    1f90:	b991      	cbnz	r1, 1fb8 <_malloc_r+0x54>
    1f92:	4c22      	ldr	r4, [pc, #136]	; (201c <_malloc_r+0xb8>)
    1f94:	6823      	ldr	r3, [r4, #0]
    1f96:	b91b      	cbnz	r3, 1fa0 <_malloc_r+0x3c>
    1f98:	4630      	mov	r0, r6
    1f9a:	f000 fb15 	bl	25c8 <_sbrk_r>
    1f9e:	6020      	str	r0, [r4, #0]
    1fa0:	4629      	mov	r1, r5
    1fa2:	4630      	mov	r0, r6
    1fa4:	f000 fb10 	bl	25c8 <_sbrk_r>
    1fa8:	1c43      	adds	r3, r0, #1
    1faa:	d126      	bne.n	1ffa <_malloc_r+0x96>
    1fac:	230c      	movs	r3, #12
    1fae:	6033      	str	r3, [r6, #0]
    1fb0:	4630      	mov	r0, r6
    1fb2:	f000 fc06 	bl	27c2 <__malloc_unlock>
    1fb6:	e7e4      	b.n	1f82 <_malloc_r+0x1e>
    1fb8:	680b      	ldr	r3, [r1, #0]
    1fba:	1b5b      	subs	r3, r3, r5
    1fbc:	d41a      	bmi.n	1ff4 <_malloc_r+0x90>
    1fbe:	2b0b      	cmp	r3, #11
    1fc0:	d90f      	bls.n	1fe2 <_malloc_r+0x7e>
    1fc2:	600b      	str	r3, [r1, #0]
    1fc4:	50cd      	str	r5, [r1, r3]
    1fc6:	18cc      	adds	r4, r1, r3
    1fc8:	4630      	mov	r0, r6
    1fca:	f000 fbfa 	bl	27c2 <__malloc_unlock>
    1fce:	f104 000b 	add.w	r0, r4, #11
    1fd2:	1d23      	adds	r3, r4, #4
    1fd4:	f020 0007 	bic.w	r0, r0, #7
    1fd8:	1ac3      	subs	r3, r0, r3
    1fda:	d01b      	beq.n	2014 <_malloc_r+0xb0>
    1fdc:	425a      	negs	r2, r3
    1fde:	50e2      	str	r2, [r4, r3]
    1fe0:	bd70      	pop	{r4, r5, r6, pc}
    1fe2:	428c      	cmp	r4, r1
    1fe4:	bf0d      	iteet	eq
    1fe6:	6863      	ldreq	r3, [r4, #4]
    1fe8:	684b      	ldrne	r3, [r1, #4]
    1fea:	6063      	strne	r3, [r4, #4]
    1fec:	6013      	streq	r3, [r2, #0]
    1fee:	bf18      	it	ne
    1ff0:	460c      	movne	r4, r1
    1ff2:	e7e9      	b.n	1fc8 <_malloc_r+0x64>
    1ff4:	460c      	mov	r4, r1
    1ff6:	6849      	ldr	r1, [r1, #4]
    1ff8:	e7ca      	b.n	1f90 <_malloc_r+0x2c>
    1ffa:	1cc4      	adds	r4, r0, #3
    1ffc:	f024 0403 	bic.w	r4, r4, #3
    2000:	42a0      	cmp	r0, r4
    2002:	d005      	beq.n	2010 <_malloc_r+0xac>
    2004:	1a21      	subs	r1, r4, r0
    2006:	4630      	mov	r0, r6
    2008:	f000 fade 	bl	25c8 <_sbrk_r>
    200c:	3001      	adds	r0, #1
    200e:	d0cd      	beq.n	1fac <_malloc_r+0x48>
    2010:	6025      	str	r5, [r4, #0]
    2012:	e7d9      	b.n	1fc8 <_malloc_r+0x64>
    2014:	bd70      	pop	{r4, r5, r6, pc}
    2016:	bf00      	nop
    2018:	2000009c 	.word	0x2000009c
    201c:	200000a0 	.word	0x200000a0

00002020 <__sfputc_r>:
    2020:	6893      	ldr	r3, [r2, #8]
    2022:	3b01      	subs	r3, #1
    2024:	2b00      	cmp	r3, #0
    2026:	b410      	push	{r4}
    2028:	6093      	str	r3, [r2, #8]
    202a:	da08      	bge.n	203e <__sfputc_r+0x1e>
    202c:	6994      	ldr	r4, [r2, #24]
    202e:	42a3      	cmp	r3, r4
    2030:	db02      	blt.n	2038 <__sfputc_r+0x18>
    2032:	b2cb      	uxtb	r3, r1
    2034:	2b0a      	cmp	r3, #10
    2036:	d102      	bne.n	203e <__sfputc_r+0x1e>
    2038:	bc10      	pop	{r4}
    203a:	f7ff bc9d 	b.w	1978 <__swbuf_r>
    203e:	6813      	ldr	r3, [r2, #0]
    2040:	1c58      	adds	r0, r3, #1
    2042:	6010      	str	r0, [r2, #0]
    2044:	7019      	strb	r1, [r3, #0]
    2046:	b2c8      	uxtb	r0, r1
    2048:	bc10      	pop	{r4}
    204a:	4770      	bx	lr

0000204c <__sfputs_r>:
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	4606      	mov	r6, r0
    2050:	460f      	mov	r7, r1
    2052:	4614      	mov	r4, r2
    2054:	18d5      	adds	r5, r2, r3
    2056:	42ac      	cmp	r4, r5
    2058:	d101      	bne.n	205e <__sfputs_r+0x12>
    205a:	2000      	movs	r0, #0
    205c:	e007      	b.n	206e <__sfputs_r+0x22>
    205e:	463a      	mov	r2, r7
    2060:	f814 1b01 	ldrb.w	r1, [r4], #1
    2064:	4630      	mov	r0, r6
    2066:	f7ff ffdb 	bl	2020 <__sfputc_r>
    206a:	1c43      	adds	r3, r0, #1
    206c:	d1f3      	bne.n	2056 <__sfputs_r+0xa>
    206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002070 <_vfiprintf_r>:
    2070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2074:	b09d      	sub	sp, #116	; 0x74
    2076:	460c      	mov	r4, r1
    2078:	4617      	mov	r7, r2
    207a:	9303      	str	r3, [sp, #12]
    207c:	4606      	mov	r6, r0
    207e:	b118      	cbz	r0, 2088 <_vfiprintf_r+0x18>
    2080:	6983      	ldr	r3, [r0, #24]
    2082:	b90b      	cbnz	r3, 2088 <_vfiprintf_r+0x18>
    2084:	f7ff fe2a 	bl	1cdc <__sinit>
    2088:	4b7c      	ldr	r3, [pc, #496]	; (227c <_vfiprintf_r+0x20c>)
    208a:	429c      	cmp	r4, r3
    208c:	d157      	bne.n	213e <_vfiprintf_r+0xce>
    208e:	6874      	ldr	r4, [r6, #4]
    2090:	89a3      	ldrh	r3, [r4, #12]
    2092:	0718      	lsls	r0, r3, #28
    2094:	d55d      	bpl.n	2152 <_vfiprintf_r+0xe2>
    2096:	6923      	ldr	r3, [r4, #16]
    2098:	2b00      	cmp	r3, #0
    209a:	d05a      	beq.n	2152 <_vfiprintf_r+0xe2>
    209c:	2300      	movs	r3, #0
    209e:	9309      	str	r3, [sp, #36]	; 0x24
    20a0:	2320      	movs	r3, #32
    20a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    20a6:	2330      	movs	r3, #48	; 0x30
    20a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    20ac:	f04f 0b01 	mov.w	fp, #1
    20b0:	46b8      	mov	r8, r7
    20b2:	4645      	mov	r5, r8
    20b4:	f815 3b01 	ldrb.w	r3, [r5], #1
    20b8:	2b00      	cmp	r3, #0
    20ba:	d155      	bne.n	2168 <_vfiprintf_r+0xf8>
    20bc:	ebb8 0a07 	subs.w	sl, r8, r7
    20c0:	d00b      	beq.n	20da <_vfiprintf_r+0x6a>
    20c2:	4653      	mov	r3, sl
    20c4:	463a      	mov	r2, r7
    20c6:	4621      	mov	r1, r4
    20c8:	4630      	mov	r0, r6
    20ca:	f7ff ffbf 	bl	204c <__sfputs_r>
    20ce:	3001      	adds	r0, #1
    20d0:	f000 80c4 	beq.w	225c <_vfiprintf_r+0x1ec>
    20d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20d6:	4453      	add	r3, sl
    20d8:	9309      	str	r3, [sp, #36]	; 0x24
    20da:	f898 3000 	ldrb.w	r3, [r8]
    20de:	2b00      	cmp	r3, #0
    20e0:	f000 80bc 	beq.w	225c <_vfiprintf_r+0x1ec>
    20e4:	2300      	movs	r3, #0
    20e6:	f04f 32ff 	mov.w	r2, #4294967295
    20ea:	9304      	str	r3, [sp, #16]
    20ec:	9307      	str	r3, [sp, #28]
    20ee:	9205      	str	r2, [sp, #20]
    20f0:	9306      	str	r3, [sp, #24]
    20f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    20f6:	931a      	str	r3, [sp, #104]	; 0x68
    20f8:	2205      	movs	r2, #5
    20fa:	7829      	ldrb	r1, [r5, #0]
    20fc:	4860      	ldr	r0, [pc, #384]	; (2280 <_vfiprintf_r+0x210>)
    20fe:	f000 fb0f 	bl	2720 <memchr>
    2102:	f105 0801 	add.w	r8, r5, #1
    2106:	9b04      	ldr	r3, [sp, #16]
    2108:	2800      	cmp	r0, #0
    210a:	d131      	bne.n	2170 <_vfiprintf_r+0x100>
    210c:	06d9      	lsls	r1, r3, #27
    210e:	bf44      	itt	mi
    2110:	2220      	movmi	r2, #32
    2112:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2116:	071a      	lsls	r2, r3, #28
    2118:	bf44      	itt	mi
    211a:	222b      	movmi	r2, #43	; 0x2b
    211c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2120:	782a      	ldrb	r2, [r5, #0]
    2122:	2a2a      	cmp	r2, #42	; 0x2a
    2124:	d02c      	beq.n	2180 <_vfiprintf_r+0x110>
    2126:	9a07      	ldr	r2, [sp, #28]
    2128:	2100      	movs	r1, #0
    212a:	200a      	movs	r0, #10
    212c:	46a8      	mov	r8, r5
    212e:	3501      	adds	r5, #1
    2130:	f898 3000 	ldrb.w	r3, [r8]
    2134:	3b30      	subs	r3, #48	; 0x30
    2136:	2b09      	cmp	r3, #9
    2138:	d96d      	bls.n	2216 <_vfiprintf_r+0x1a6>
    213a:	b371      	cbz	r1, 219a <_vfiprintf_r+0x12a>
    213c:	e026      	b.n	218c <_vfiprintf_r+0x11c>
    213e:	4b51      	ldr	r3, [pc, #324]	; (2284 <_vfiprintf_r+0x214>)
    2140:	429c      	cmp	r4, r3
    2142:	d101      	bne.n	2148 <_vfiprintf_r+0xd8>
    2144:	68b4      	ldr	r4, [r6, #8]
    2146:	e7a3      	b.n	2090 <_vfiprintf_r+0x20>
    2148:	4b4f      	ldr	r3, [pc, #316]	; (2288 <_vfiprintf_r+0x218>)
    214a:	429c      	cmp	r4, r3
    214c:	bf08      	it	eq
    214e:	68f4      	ldreq	r4, [r6, #12]
    2150:	e79e      	b.n	2090 <_vfiprintf_r+0x20>
    2152:	4621      	mov	r1, r4
    2154:	4630      	mov	r0, r6
    2156:	f7ff fc61 	bl	1a1c <__swsetup_r>
    215a:	2800      	cmp	r0, #0
    215c:	d09e      	beq.n	209c <_vfiprintf_r+0x2c>
    215e:	f04f 30ff 	mov.w	r0, #4294967295
    2162:	b01d      	add	sp, #116	; 0x74
    2164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2168:	2b25      	cmp	r3, #37	; 0x25
    216a:	d0a7      	beq.n	20bc <_vfiprintf_r+0x4c>
    216c:	46a8      	mov	r8, r5
    216e:	e7a0      	b.n	20b2 <_vfiprintf_r+0x42>
    2170:	4a43      	ldr	r2, [pc, #268]	; (2280 <_vfiprintf_r+0x210>)
    2172:	1a80      	subs	r0, r0, r2
    2174:	fa0b f000 	lsl.w	r0, fp, r0
    2178:	4318      	orrs	r0, r3
    217a:	9004      	str	r0, [sp, #16]
    217c:	4645      	mov	r5, r8
    217e:	e7bb      	b.n	20f8 <_vfiprintf_r+0x88>
    2180:	9a03      	ldr	r2, [sp, #12]
    2182:	1d11      	adds	r1, r2, #4
    2184:	6812      	ldr	r2, [r2, #0]
    2186:	9103      	str	r1, [sp, #12]
    2188:	2a00      	cmp	r2, #0
    218a:	db01      	blt.n	2190 <_vfiprintf_r+0x120>
    218c:	9207      	str	r2, [sp, #28]
    218e:	e004      	b.n	219a <_vfiprintf_r+0x12a>
    2190:	4252      	negs	r2, r2
    2192:	f043 0302 	orr.w	r3, r3, #2
    2196:	9207      	str	r2, [sp, #28]
    2198:	9304      	str	r3, [sp, #16]
    219a:	f898 3000 	ldrb.w	r3, [r8]
    219e:	2b2e      	cmp	r3, #46	; 0x2e
    21a0:	d110      	bne.n	21c4 <_vfiprintf_r+0x154>
    21a2:	f898 3001 	ldrb.w	r3, [r8, #1]
    21a6:	2b2a      	cmp	r3, #42	; 0x2a
    21a8:	f108 0101 	add.w	r1, r8, #1
    21ac:	d137      	bne.n	221e <_vfiprintf_r+0x1ae>
    21ae:	9b03      	ldr	r3, [sp, #12]
    21b0:	1d1a      	adds	r2, r3, #4
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	9203      	str	r2, [sp, #12]
    21b6:	2b00      	cmp	r3, #0
    21b8:	bfb8      	it	lt
    21ba:	f04f 33ff 	movlt.w	r3, #4294967295
    21be:	f108 0802 	add.w	r8, r8, #2
    21c2:	9305      	str	r3, [sp, #20]
    21c4:	4d31      	ldr	r5, [pc, #196]	; (228c <_vfiprintf_r+0x21c>)
    21c6:	f898 1000 	ldrb.w	r1, [r8]
    21ca:	2203      	movs	r2, #3
    21cc:	4628      	mov	r0, r5
    21ce:	f000 faa7 	bl	2720 <memchr>
    21d2:	b140      	cbz	r0, 21e6 <_vfiprintf_r+0x176>
    21d4:	2340      	movs	r3, #64	; 0x40
    21d6:	1b40      	subs	r0, r0, r5
    21d8:	fa03 f000 	lsl.w	r0, r3, r0
    21dc:	9b04      	ldr	r3, [sp, #16]
    21de:	4303      	orrs	r3, r0
    21e0:	9304      	str	r3, [sp, #16]
    21e2:	f108 0801 	add.w	r8, r8, #1
    21e6:	f898 1000 	ldrb.w	r1, [r8]
    21ea:	4829      	ldr	r0, [pc, #164]	; (2290 <_vfiprintf_r+0x220>)
    21ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    21f0:	2206      	movs	r2, #6
    21f2:	f108 0701 	add.w	r7, r8, #1
    21f6:	f000 fa93 	bl	2720 <memchr>
    21fa:	2800      	cmp	r0, #0
    21fc:	d034      	beq.n	2268 <_vfiprintf_r+0x1f8>
    21fe:	4b25      	ldr	r3, [pc, #148]	; (2294 <_vfiprintf_r+0x224>)
    2200:	bb03      	cbnz	r3, 2244 <_vfiprintf_r+0x1d4>
    2202:	9b03      	ldr	r3, [sp, #12]
    2204:	3307      	adds	r3, #7
    2206:	f023 0307 	bic.w	r3, r3, #7
    220a:	3308      	adds	r3, #8
    220c:	9303      	str	r3, [sp, #12]
    220e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2210:	444b      	add	r3, r9
    2212:	9309      	str	r3, [sp, #36]	; 0x24
    2214:	e74c      	b.n	20b0 <_vfiprintf_r+0x40>
    2216:	fb00 3202 	mla	r2, r0, r2, r3
    221a:	2101      	movs	r1, #1
    221c:	e786      	b.n	212c <_vfiprintf_r+0xbc>
    221e:	2300      	movs	r3, #0
    2220:	9305      	str	r3, [sp, #20]
    2222:	4618      	mov	r0, r3
    2224:	250a      	movs	r5, #10
    2226:	4688      	mov	r8, r1
    2228:	3101      	adds	r1, #1
    222a:	f898 2000 	ldrb.w	r2, [r8]
    222e:	3a30      	subs	r2, #48	; 0x30
    2230:	2a09      	cmp	r2, #9
    2232:	d903      	bls.n	223c <_vfiprintf_r+0x1cc>
    2234:	2b00      	cmp	r3, #0
    2236:	d0c5      	beq.n	21c4 <_vfiprintf_r+0x154>
    2238:	9005      	str	r0, [sp, #20]
    223a:	e7c3      	b.n	21c4 <_vfiprintf_r+0x154>
    223c:	fb05 2000 	mla	r0, r5, r0, r2
    2240:	2301      	movs	r3, #1
    2242:	e7f0      	b.n	2226 <_vfiprintf_r+0x1b6>
    2244:	ab03      	add	r3, sp, #12
    2246:	9300      	str	r3, [sp, #0]
    2248:	4622      	mov	r2, r4
    224a:	4b13      	ldr	r3, [pc, #76]	; (2298 <_vfiprintf_r+0x228>)
    224c:	a904      	add	r1, sp, #16
    224e:	4630      	mov	r0, r6
    2250:	f3af 8000 	nop.w
    2254:	f1b0 3fff 	cmp.w	r0, #4294967295
    2258:	4681      	mov	r9, r0
    225a:	d1d8      	bne.n	220e <_vfiprintf_r+0x19e>
    225c:	89a3      	ldrh	r3, [r4, #12]
    225e:	065b      	lsls	r3, r3, #25
    2260:	f53f af7d 	bmi.w	215e <_vfiprintf_r+0xee>
    2264:	9809      	ldr	r0, [sp, #36]	; 0x24
    2266:	e77c      	b.n	2162 <_vfiprintf_r+0xf2>
    2268:	ab03      	add	r3, sp, #12
    226a:	9300      	str	r3, [sp, #0]
    226c:	4622      	mov	r2, r4
    226e:	4b0a      	ldr	r3, [pc, #40]	; (2298 <_vfiprintf_r+0x228>)
    2270:	a904      	add	r1, sp, #16
    2272:	4630      	mov	r0, r6
    2274:	f000 f888 	bl	2388 <_printf_i>
    2278:	e7ec      	b.n	2254 <_vfiprintf_r+0x1e4>
    227a:	bf00      	nop
    227c:	000078b8 	.word	0x000078b8
    2280:	000078f8 	.word	0x000078f8
    2284:	000078d8 	.word	0x000078d8
    2288:	00007898 	.word	0x00007898
    228c:	000078fe 	.word	0x000078fe
    2290:	00007902 	.word	0x00007902
    2294:	00000000 	.word	0x00000000
    2298:	0000204d 	.word	0x0000204d

0000229c <_printf_common>:
    229c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22a0:	4691      	mov	r9, r2
    22a2:	461f      	mov	r7, r3
    22a4:	688a      	ldr	r2, [r1, #8]
    22a6:	690b      	ldr	r3, [r1, #16]
    22a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    22ac:	4293      	cmp	r3, r2
    22ae:	bfb8      	it	lt
    22b0:	4613      	movlt	r3, r2
    22b2:	f8c9 3000 	str.w	r3, [r9]
    22b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    22ba:	4606      	mov	r6, r0
    22bc:	460c      	mov	r4, r1
    22be:	b112      	cbz	r2, 22c6 <_printf_common+0x2a>
    22c0:	3301      	adds	r3, #1
    22c2:	f8c9 3000 	str.w	r3, [r9]
    22c6:	6823      	ldr	r3, [r4, #0]
    22c8:	0699      	lsls	r1, r3, #26
    22ca:	bf42      	ittt	mi
    22cc:	f8d9 3000 	ldrmi.w	r3, [r9]
    22d0:	3302      	addmi	r3, #2
    22d2:	f8c9 3000 	strmi.w	r3, [r9]
    22d6:	6825      	ldr	r5, [r4, #0]
    22d8:	f015 0506 	ands.w	r5, r5, #6
    22dc:	d107      	bne.n	22ee <_printf_common+0x52>
    22de:	f104 0a19 	add.w	sl, r4, #25
    22e2:	68e3      	ldr	r3, [r4, #12]
    22e4:	f8d9 2000 	ldr.w	r2, [r9]
    22e8:	1a9b      	subs	r3, r3, r2
    22ea:	429d      	cmp	r5, r3
    22ec:	db29      	blt.n	2342 <_printf_common+0xa6>
    22ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    22f2:	6822      	ldr	r2, [r4, #0]
    22f4:	3300      	adds	r3, #0
    22f6:	bf18      	it	ne
    22f8:	2301      	movne	r3, #1
    22fa:	0692      	lsls	r2, r2, #26
    22fc:	d42e      	bmi.n	235c <_printf_common+0xc0>
    22fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2302:	4639      	mov	r1, r7
    2304:	4630      	mov	r0, r6
    2306:	47c0      	blx	r8
    2308:	3001      	adds	r0, #1
    230a:	d021      	beq.n	2350 <_printf_common+0xb4>
    230c:	6823      	ldr	r3, [r4, #0]
    230e:	68e5      	ldr	r5, [r4, #12]
    2310:	f8d9 2000 	ldr.w	r2, [r9]
    2314:	f003 0306 	and.w	r3, r3, #6
    2318:	2b04      	cmp	r3, #4
    231a:	bf08      	it	eq
    231c:	1aad      	subeq	r5, r5, r2
    231e:	68a3      	ldr	r3, [r4, #8]
    2320:	6922      	ldr	r2, [r4, #16]
    2322:	bf0c      	ite	eq
    2324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2328:	2500      	movne	r5, #0
    232a:	4293      	cmp	r3, r2
    232c:	bfc4      	itt	gt
    232e:	1a9b      	subgt	r3, r3, r2
    2330:	18ed      	addgt	r5, r5, r3
    2332:	f04f 0900 	mov.w	r9, #0
    2336:	341a      	adds	r4, #26
    2338:	454d      	cmp	r5, r9
    233a:	d11b      	bne.n	2374 <_printf_common+0xd8>
    233c:	2000      	movs	r0, #0
    233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2342:	2301      	movs	r3, #1
    2344:	4652      	mov	r2, sl
    2346:	4639      	mov	r1, r7
    2348:	4630      	mov	r0, r6
    234a:	47c0      	blx	r8
    234c:	3001      	adds	r0, #1
    234e:	d103      	bne.n	2358 <_printf_common+0xbc>
    2350:	f04f 30ff 	mov.w	r0, #4294967295
    2354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2358:	3501      	adds	r5, #1
    235a:	e7c2      	b.n	22e2 <_printf_common+0x46>
    235c:	18e1      	adds	r1, r4, r3
    235e:	1c5a      	adds	r2, r3, #1
    2360:	2030      	movs	r0, #48	; 0x30
    2362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2366:	4422      	add	r2, r4
    2368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    236c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2370:	3302      	adds	r3, #2
    2372:	e7c4      	b.n	22fe <_printf_common+0x62>
    2374:	2301      	movs	r3, #1
    2376:	4622      	mov	r2, r4
    2378:	4639      	mov	r1, r7
    237a:	4630      	mov	r0, r6
    237c:	47c0      	blx	r8
    237e:	3001      	adds	r0, #1
    2380:	d0e6      	beq.n	2350 <_printf_common+0xb4>
    2382:	f109 0901 	add.w	r9, r9, #1
    2386:	e7d7      	b.n	2338 <_printf_common+0x9c>

00002388 <_printf_i>:
    2388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    238c:	4617      	mov	r7, r2
    238e:	7e0a      	ldrb	r2, [r1, #24]
    2390:	b085      	sub	sp, #20
    2392:	2a6e      	cmp	r2, #110	; 0x6e
    2394:	4698      	mov	r8, r3
    2396:	4606      	mov	r6, r0
    2398:	460c      	mov	r4, r1
    239a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    239c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    23a0:	f000 80bc 	beq.w	251c <_printf_i+0x194>
    23a4:	d81a      	bhi.n	23dc <_printf_i+0x54>
    23a6:	2a63      	cmp	r2, #99	; 0x63
    23a8:	d02e      	beq.n	2408 <_printf_i+0x80>
    23aa:	d80a      	bhi.n	23c2 <_printf_i+0x3a>
    23ac:	2a00      	cmp	r2, #0
    23ae:	f000 80c8 	beq.w	2542 <_printf_i+0x1ba>
    23b2:	2a58      	cmp	r2, #88	; 0x58
    23b4:	f000 808a 	beq.w	24cc <_printf_i+0x144>
    23b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    23bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    23c0:	e02a      	b.n	2418 <_printf_i+0x90>
    23c2:	2a64      	cmp	r2, #100	; 0x64
    23c4:	d001      	beq.n	23ca <_printf_i+0x42>
    23c6:	2a69      	cmp	r2, #105	; 0x69
    23c8:	d1f6      	bne.n	23b8 <_printf_i+0x30>
    23ca:	6821      	ldr	r1, [r4, #0]
    23cc:	681a      	ldr	r2, [r3, #0]
    23ce:	f011 0f80 	tst.w	r1, #128	; 0x80
    23d2:	d023      	beq.n	241c <_printf_i+0x94>
    23d4:	1d11      	adds	r1, r2, #4
    23d6:	6019      	str	r1, [r3, #0]
    23d8:	6813      	ldr	r3, [r2, #0]
    23da:	e027      	b.n	242c <_printf_i+0xa4>
    23dc:	2a73      	cmp	r2, #115	; 0x73
    23de:	f000 80b4 	beq.w	254a <_printf_i+0x1c2>
    23e2:	d808      	bhi.n	23f6 <_printf_i+0x6e>
    23e4:	2a6f      	cmp	r2, #111	; 0x6f
    23e6:	d02a      	beq.n	243e <_printf_i+0xb6>
    23e8:	2a70      	cmp	r2, #112	; 0x70
    23ea:	d1e5      	bne.n	23b8 <_printf_i+0x30>
    23ec:	680a      	ldr	r2, [r1, #0]
    23ee:	f042 0220 	orr.w	r2, r2, #32
    23f2:	600a      	str	r2, [r1, #0]
    23f4:	e003      	b.n	23fe <_printf_i+0x76>
    23f6:	2a75      	cmp	r2, #117	; 0x75
    23f8:	d021      	beq.n	243e <_printf_i+0xb6>
    23fa:	2a78      	cmp	r2, #120	; 0x78
    23fc:	d1dc      	bne.n	23b8 <_printf_i+0x30>
    23fe:	2278      	movs	r2, #120	; 0x78
    2400:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    2404:	496e      	ldr	r1, [pc, #440]	; (25c0 <_printf_i+0x238>)
    2406:	e064      	b.n	24d2 <_printf_i+0x14a>
    2408:	681a      	ldr	r2, [r3, #0]
    240a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    240e:	1d11      	adds	r1, r2, #4
    2410:	6019      	str	r1, [r3, #0]
    2412:	6813      	ldr	r3, [r2, #0]
    2414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2418:	2301      	movs	r3, #1
    241a:	e0a3      	b.n	2564 <_printf_i+0x1dc>
    241c:	f011 0f40 	tst.w	r1, #64	; 0x40
    2420:	f102 0104 	add.w	r1, r2, #4
    2424:	6019      	str	r1, [r3, #0]
    2426:	d0d7      	beq.n	23d8 <_printf_i+0x50>
    2428:	f9b2 3000 	ldrsh.w	r3, [r2]
    242c:	2b00      	cmp	r3, #0
    242e:	da03      	bge.n	2438 <_printf_i+0xb0>
    2430:	222d      	movs	r2, #45	; 0x2d
    2432:	425b      	negs	r3, r3
    2434:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2438:	4962      	ldr	r1, [pc, #392]	; (25c4 <_printf_i+0x23c>)
    243a:	220a      	movs	r2, #10
    243c:	e017      	b.n	246e <_printf_i+0xe6>
    243e:	6820      	ldr	r0, [r4, #0]
    2440:	6819      	ldr	r1, [r3, #0]
    2442:	f010 0f80 	tst.w	r0, #128	; 0x80
    2446:	d003      	beq.n	2450 <_printf_i+0xc8>
    2448:	1d08      	adds	r0, r1, #4
    244a:	6018      	str	r0, [r3, #0]
    244c:	680b      	ldr	r3, [r1, #0]
    244e:	e006      	b.n	245e <_printf_i+0xd6>
    2450:	f010 0f40 	tst.w	r0, #64	; 0x40
    2454:	f101 0004 	add.w	r0, r1, #4
    2458:	6018      	str	r0, [r3, #0]
    245a:	d0f7      	beq.n	244c <_printf_i+0xc4>
    245c:	880b      	ldrh	r3, [r1, #0]
    245e:	4959      	ldr	r1, [pc, #356]	; (25c4 <_printf_i+0x23c>)
    2460:	2a6f      	cmp	r2, #111	; 0x6f
    2462:	bf14      	ite	ne
    2464:	220a      	movne	r2, #10
    2466:	2208      	moveq	r2, #8
    2468:	2000      	movs	r0, #0
    246a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    246e:	6865      	ldr	r5, [r4, #4]
    2470:	60a5      	str	r5, [r4, #8]
    2472:	2d00      	cmp	r5, #0
    2474:	f2c0 809c 	blt.w	25b0 <_printf_i+0x228>
    2478:	6820      	ldr	r0, [r4, #0]
    247a:	f020 0004 	bic.w	r0, r0, #4
    247e:	6020      	str	r0, [r4, #0]
    2480:	2b00      	cmp	r3, #0
    2482:	d13f      	bne.n	2504 <_printf_i+0x17c>
    2484:	2d00      	cmp	r5, #0
    2486:	f040 8095 	bne.w	25b4 <_printf_i+0x22c>
    248a:	4675      	mov	r5, lr
    248c:	2a08      	cmp	r2, #8
    248e:	d10b      	bne.n	24a8 <_printf_i+0x120>
    2490:	6823      	ldr	r3, [r4, #0]
    2492:	07da      	lsls	r2, r3, #31
    2494:	d508      	bpl.n	24a8 <_printf_i+0x120>
    2496:	6923      	ldr	r3, [r4, #16]
    2498:	6862      	ldr	r2, [r4, #4]
    249a:	429a      	cmp	r2, r3
    249c:	bfde      	ittt	le
    249e:	2330      	movle	r3, #48	; 0x30
    24a0:	f805 3c01 	strble.w	r3, [r5, #-1]
    24a4:	f105 35ff 	addle.w	r5, r5, #4294967295
    24a8:	ebae 0305 	sub.w	r3, lr, r5
    24ac:	6123      	str	r3, [r4, #16]
    24ae:	f8cd 8000 	str.w	r8, [sp]
    24b2:	463b      	mov	r3, r7
    24b4:	aa03      	add	r2, sp, #12
    24b6:	4621      	mov	r1, r4
    24b8:	4630      	mov	r0, r6
    24ba:	f7ff feef 	bl	229c <_printf_common>
    24be:	3001      	adds	r0, #1
    24c0:	d155      	bne.n	256e <_printf_i+0x1e6>
    24c2:	f04f 30ff 	mov.w	r0, #4294967295
    24c6:	b005      	add	sp, #20
    24c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    24cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    24d0:	493c      	ldr	r1, [pc, #240]	; (25c4 <_printf_i+0x23c>)
    24d2:	6822      	ldr	r2, [r4, #0]
    24d4:	6818      	ldr	r0, [r3, #0]
    24d6:	f012 0f80 	tst.w	r2, #128	; 0x80
    24da:	f100 0504 	add.w	r5, r0, #4
    24de:	601d      	str	r5, [r3, #0]
    24e0:	d001      	beq.n	24e6 <_printf_i+0x15e>
    24e2:	6803      	ldr	r3, [r0, #0]
    24e4:	e002      	b.n	24ec <_printf_i+0x164>
    24e6:	0655      	lsls	r5, r2, #25
    24e8:	d5fb      	bpl.n	24e2 <_printf_i+0x15a>
    24ea:	8803      	ldrh	r3, [r0, #0]
    24ec:	07d0      	lsls	r0, r2, #31
    24ee:	bf44      	itt	mi
    24f0:	f042 0220 	orrmi.w	r2, r2, #32
    24f4:	6022      	strmi	r2, [r4, #0]
    24f6:	b91b      	cbnz	r3, 2500 <_printf_i+0x178>
    24f8:	6822      	ldr	r2, [r4, #0]
    24fa:	f022 0220 	bic.w	r2, r2, #32
    24fe:	6022      	str	r2, [r4, #0]
    2500:	2210      	movs	r2, #16
    2502:	e7b1      	b.n	2468 <_printf_i+0xe0>
    2504:	4675      	mov	r5, lr
    2506:	fbb3 f0f2 	udiv	r0, r3, r2
    250a:	fb02 3310 	mls	r3, r2, r0, r3
    250e:	5ccb      	ldrb	r3, [r1, r3]
    2510:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2514:	4603      	mov	r3, r0
    2516:	2800      	cmp	r0, #0
    2518:	d1f5      	bne.n	2506 <_printf_i+0x17e>
    251a:	e7b7      	b.n	248c <_printf_i+0x104>
    251c:	6808      	ldr	r0, [r1, #0]
    251e:	681a      	ldr	r2, [r3, #0]
    2520:	6949      	ldr	r1, [r1, #20]
    2522:	f010 0f80 	tst.w	r0, #128	; 0x80
    2526:	d004      	beq.n	2532 <_printf_i+0x1aa>
    2528:	1d10      	adds	r0, r2, #4
    252a:	6018      	str	r0, [r3, #0]
    252c:	6813      	ldr	r3, [r2, #0]
    252e:	6019      	str	r1, [r3, #0]
    2530:	e007      	b.n	2542 <_printf_i+0x1ba>
    2532:	f010 0f40 	tst.w	r0, #64	; 0x40
    2536:	f102 0004 	add.w	r0, r2, #4
    253a:	6018      	str	r0, [r3, #0]
    253c:	6813      	ldr	r3, [r2, #0]
    253e:	d0f6      	beq.n	252e <_printf_i+0x1a6>
    2540:	8019      	strh	r1, [r3, #0]
    2542:	2300      	movs	r3, #0
    2544:	6123      	str	r3, [r4, #16]
    2546:	4675      	mov	r5, lr
    2548:	e7b1      	b.n	24ae <_printf_i+0x126>
    254a:	681a      	ldr	r2, [r3, #0]
    254c:	1d11      	adds	r1, r2, #4
    254e:	6019      	str	r1, [r3, #0]
    2550:	6815      	ldr	r5, [r2, #0]
    2552:	6862      	ldr	r2, [r4, #4]
    2554:	2100      	movs	r1, #0
    2556:	4628      	mov	r0, r5
    2558:	f000 f8e2 	bl	2720 <memchr>
    255c:	b108      	cbz	r0, 2562 <_printf_i+0x1da>
    255e:	1b40      	subs	r0, r0, r5
    2560:	6060      	str	r0, [r4, #4]
    2562:	6863      	ldr	r3, [r4, #4]
    2564:	6123      	str	r3, [r4, #16]
    2566:	2300      	movs	r3, #0
    2568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    256c:	e79f      	b.n	24ae <_printf_i+0x126>
    256e:	6923      	ldr	r3, [r4, #16]
    2570:	462a      	mov	r2, r5
    2572:	4639      	mov	r1, r7
    2574:	4630      	mov	r0, r6
    2576:	47c0      	blx	r8
    2578:	3001      	adds	r0, #1
    257a:	d0a2      	beq.n	24c2 <_printf_i+0x13a>
    257c:	6823      	ldr	r3, [r4, #0]
    257e:	079b      	lsls	r3, r3, #30
    2580:	d507      	bpl.n	2592 <_printf_i+0x20a>
    2582:	2500      	movs	r5, #0
    2584:	f104 0919 	add.w	r9, r4, #25
    2588:	68e3      	ldr	r3, [r4, #12]
    258a:	9a03      	ldr	r2, [sp, #12]
    258c:	1a9b      	subs	r3, r3, r2
    258e:	429d      	cmp	r5, r3
    2590:	db05      	blt.n	259e <_printf_i+0x216>
    2592:	68e0      	ldr	r0, [r4, #12]
    2594:	9b03      	ldr	r3, [sp, #12]
    2596:	4298      	cmp	r0, r3
    2598:	bfb8      	it	lt
    259a:	4618      	movlt	r0, r3
    259c:	e793      	b.n	24c6 <_printf_i+0x13e>
    259e:	2301      	movs	r3, #1
    25a0:	464a      	mov	r2, r9
    25a2:	4639      	mov	r1, r7
    25a4:	4630      	mov	r0, r6
    25a6:	47c0      	blx	r8
    25a8:	3001      	adds	r0, #1
    25aa:	d08a      	beq.n	24c2 <_printf_i+0x13a>
    25ac:	3501      	adds	r5, #1
    25ae:	e7eb      	b.n	2588 <_printf_i+0x200>
    25b0:	2b00      	cmp	r3, #0
    25b2:	d1a7      	bne.n	2504 <_printf_i+0x17c>
    25b4:	780b      	ldrb	r3, [r1, #0]
    25b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    25ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
    25be:	e765      	b.n	248c <_printf_i+0x104>
    25c0:	0000791a 	.word	0x0000791a
    25c4:	00007909 	.word	0x00007909

000025c8 <_sbrk_r>:
    25c8:	b538      	push	{r3, r4, r5, lr}
    25ca:	4c06      	ldr	r4, [pc, #24]	; (25e4 <_sbrk_r+0x1c>)
    25cc:	2300      	movs	r3, #0
    25ce:	4605      	mov	r5, r0
    25d0:	4608      	mov	r0, r1
    25d2:	6023      	str	r3, [r4, #0]
    25d4:	f7fe f9ae 	bl	934 <_sbrk>
    25d8:	1c43      	adds	r3, r0, #1
    25da:	d102      	bne.n	25e2 <_sbrk_r+0x1a>
    25dc:	6823      	ldr	r3, [r4, #0]
    25de:	b103      	cbz	r3, 25e2 <_sbrk_r+0x1a>
    25e0:	602b      	str	r3, [r5, #0]
    25e2:	bd38      	pop	{r3, r4, r5, pc}
    25e4:	200000c8 	.word	0x200000c8

000025e8 <__sread>:
    25e8:	b510      	push	{r4, lr}
    25ea:	460c      	mov	r4, r1
    25ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    25f0:	f000 f8e8 	bl	27c4 <_read_r>
    25f4:	2800      	cmp	r0, #0
    25f6:	bfab      	itete	ge
    25f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    25fa:	89a3      	ldrhlt	r3, [r4, #12]
    25fc:	181b      	addge	r3, r3, r0
    25fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2602:	bfac      	ite	ge
    2604:	6563      	strge	r3, [r4, #84]	; 0x54
    2606:	81a3      	strhlt	r3, [r4, #12]
    2608:	bd10      	pop	{r4, pc}

0000260a <__swrite>:
    260a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    260e:	461f      	mov	r7, r3
    2610:	898b      	ldrh	r3, [r1, #12]
    2612:	05db      	lsls	r3, r3, #23
    2614:	4605      	mov	r5, r0
    2616:	460c      	mov	r4, r1
    2618:	4616      	mov	r6, r2
    261a:	d505      	bpl.n	2628 <__swrite+0x1e>
    261c:	2302      	movs	r3, #2
    261e:	2200      	movs	r2, #0
    2620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2624:	f000 f868 	bl	26f8 <_lseek_r>
    2628:	89a3      	ldrh	r3, [r4, #12]
    262a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    262e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2632:	81a3      	strh	r3, [r4, #12]
    2634:	4632      	mov	r2, r6
    2636:	463b      	mov	r3, r7
    2638:	4628      	mov	r0, r5
    263a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    263e:	f000 b817 	b.w	2670 <_write_r>

00002642 <__sseek>:
    2642:	b510      	push	{r4, lr}
    2644:	460c      	mov	r4, r1
    2646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    264a:	f000 f855 	bl	26f8 <_lseek_r>
    264e:	1c43      	adds	r3, r0, #1
    2650:	89a3      	ldrh	r3, [r4, #12]
    2652:	bf15      	itete	ne
    2654:	6560      	strne	r0, [r4, #84]	; 0x54
    2656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    265a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    265e:	81a3      	strheq	r3, [r4, #12]
    2660:	bf18      	it	ne
    2662:	81a3      	strhne	r3, [r4, #12]
    2664:	bd10      	pop	{r4, pc}

00002666 <__sclose>:
    2666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    266a:	f000 b813 	b.w	2694 <_close_r>
	...

00002670 <_write_r>:
    2670:	b538      	push	{r3, r4, r5, lr}
    2672:	4c07      	ldr	r4, [pc, #28]	; (2690 <_write_r+0x20>)
    2674:	4605      	mov	r5, r0
    2676:	4608      	mov	r0, r1
    2678:	4611      	mov	r1, r2
    267a:	2200      	movs	r2, #0
    267c:	6022      	str	r2, [r4, #0]
    267e:	461a      	mov	r2, r3
    2680:	f7fe ff00 	bl	1484 <_write>
    2684:	1c43      	adds	r3, r0, #1
    2686:	d102      	bne.n	268e <_write_r+0x1e>
    2688:	6823      	ldr	r3, [r4, #0]
    268a:	b103      	cbz	r3, 268e <_write_r+0x1e>
    268c:	602b      	str	r3, [r5, #0]
    268e:	bd38      	pop	{r3, r4, r5, pc}
    2690:	200000c8 	.word	0x200000c8

00002694 <_close_r>:
    2694:	b538      	push	{r3, r4, r5, lr}
    2696:	4c06      	ldr	r4, [pc, #24]	; (26b0 <_close_r+0x1c>)
    2698:	2300      	movs	r3, #0
    269a:	4605      	mov	r5, r0
    269c:	4608      	mov	r0, r1
    269e:	6023      	str	r3, [r4, #0]
    26a0:	f7fe f95a 	bl	958 <_close>
    26a4:	1c43      	adds	r3, r0, #1
    26a6:	d102      	bne.n	26ae <_close_r+0x1a>
    26a8:	6823      	ldr	r3, [r4, #0]
    26aa:	b103      	cbz	r3, 26ae <_close_r+0x1a>
    26ac:	602b      	str	r3, [r5, #0]
    26ae:	bd38      	pop	{r3, r4, r5, pc}
    26b0:	200000c8 	.word	0x200000c8

000026b4 <_fstat_r>:
    26b4:	b538      	push	{r3, r4, r5, lr}
    26b6:	4c07      	ldr	r4, [pc, #28]	; (26d4 <_fstat_r+0x20>)
    26b8:	2300      	movs	r3, #0
    26ba:	4605      	mov	r5, r0
    26bc:	4608      	mov	r0, r1
    26be:	4611      	mov	r1, r2
    26c0:	6023      	str	r3, [r4, #0]
    26c2:	f7fe f94c 	bl	95e <_fstat>
    26c6:	1c43      	adds	r3, r0, #1
    26c8:	d102      	bne.n	26d0 <_fstat_r+0x1c>
    26ca:	6823      	ldr	r3, [r4, #0]
    26cc:	b103      	cbz	r3, 26d0 <_fstat_r+0x1c>
    26ce:	602b      	str	r3, [r5, #0]
    26d0:	bd38      	pop	{r3, r4, r5, pc}
    26d2:	bf00      	nop
    26d4:	200000c8 	.word	0x200000c8

000026d8 <_isatty_r>:
    26d8:	b538      	push	{r3, r4, r5, lr}
    26da:	4c06      	ldr	r4, [pc, #24]	; (26f4 <_isatty_r+0x1c>)
    26dc:	2300      	movs	r3, #0
    26de:	4605      	mov	r5, r0
    26e0:	4608      	mov	r0, r1
    26e2:	6023      	str	r3, [r4, #0]
    26e4:	f7fe f940 	bl	968 <_isatty>
    26e8:	1c43      	adds	r3, r0, #1
    26ea:	d102      	bne.n	26f2 <_isatty_r+0x1a>
    26ec:	6823      	ldr	r3, [r4, #0]
    26ee:	b103      	cbz	r3, 26f2 <_isatty_r+0x1a>
    26f0:	602b      	str	r3, [r5, #0]
    26f2:	bd38      	pop	{r3, r4, r5, pc}
    26f4:	200000c8 	.word	0x200000c8

000026f8 <_lseek_r>:
    26f8:	b538      	push	{r3, r4, r5, lr}
    26fa:	4c07      	ldr	r4, [pc, #28]	; (2718 <_lseek_r+0x20>)
    26fc:	4605      	mov	r5, r0
    26fe:	4608      	mov	r0, r1
    2700:	4611      	mov	r1, r2
    2702:	2200      	movs	r2, #0
    2704:	6022      	str	r2, [r4, #0]
    2706:	461a      	mov	r2, r3
    2708:	f7fe f930 	bl	96c <_lseek>
    270c:	1c43      	adds	r3, r0, #1
    270e:	d102      	bne.n	2716 <_lseek_r+0x1e>
    2710:	6823      	ldr	r3, [r4, #0]
    2712:	b103      	cbz	r3, 2716 <_lseek_r+0x1e>
    2714:	602b      	str	r3, [r5, #0]
    2716:	bd38      	pop	{r3, r4, r5, pc}
    2718:	200000c8 	.word	0x200000c8
    271c:	00000000 	.word	0x00000000

00002720 <memchr>:
    2720:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2724:	2a10      	cmp	r2, #16
    2726:	db2b      	blt.n	2780 <memchr+0x60>
    2728:	f010 0f07 	tst.w	r0, #7
    272c:	d008      	beq.n	2740 <memchr+0x20>
    272e:	f810 3b01 	ldrb.w	r3, [r0], #1
    2732:	3a01      	subs	r2, #1
    2734:	428b      	cmp	r3, r1
    2736:	d02d      	beq.n	2794 <memchr+0x74>
    2738:	f010 0f07 	tst.w	r0, #7
    273c:	b342      	cbz	r2, 2790 <memchr+0x70>
    273e:	d1f6      	bne.n	272e <memchr+0xe>
    2740:	b4f0      	push	{r4, r5, r6, r7}
    2742:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    2746:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    274a:	f022 0407 	bic.w	r4, r2, #7
    274e:	f07f 0700 	mvns.w	r7, #0
    2752:	2300      	movs	r3, #0
    2754:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    2758:	3c08      	subs	r4, #8
    275a:	ea85 0501 	eor.w	r5, r5, r1
    275e:	ea86 0601 	eor.w	r6, r6, r1
    2762:	fa85 f547 	uadd8	r5, r5, r7
    2766:	faa3 f587 	sel	r5, r3, r7
    276a:	fa86 f647 	uadd8	r6, r6, r7
    276e:	faa5 f687 	sel	r6, r5, r7
    2772:	b98e      	cbnz	r6, 2798 <memchr+0x78>
    2774:	d1ee      	bne.n	2754 <memchr+0x34>
    2776:	bcf0      	pop	{r4, r5, r6, r7}
    2778:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    277c:	f002 0207 	and.w	r2, r2, #7
    2780:	b132      	cbz	r2, 2790 <memchr+0x70>
    2782:	f810 3b01 	ldrb.w	r3, [r0], #1
    2786:	3a01      	subs	r2, #1
    2788:	ea83 0301 	eor.w	r3, r3, r1
    278c:	b113      	cbz	r3, 2794 <memchr+0x74>
    278e:	d1f8      	bne.n	2782 <memchr+0x62>
    2790:	2000      	movs	r0, #0
    2792:	4770      	bx	lr
    2794:	3801      	subs	r0, #1
    2796:	4770      	bx	lr
    2798:	2d00      	cmp	r5, #0
    279a:	bf06      	itte	eq
    279c:	4635      	moveq	r5, r6
    279e:	3803      	subeq	r0, #3
    27a0:	3807      	subne	r0, #7
    27a2:	f015 0f01 	tst.w	r5, #1
    27a6:	d107      	bne.n	27b8 <memchr+0x98>
    27a8:	3001      	adds	r0, #1
    27aa:	f415 7f80 	tst.w	r5, #256	; 0x100
    27ae:	bf02      	ittt	eq
    27b0:	3001      	addeq	r0, #1
    27b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    27b6:	3001      	addeq	r0, #1
    27b8:	bcf0      	pop	{r4, r5, r6, r7}
    27ba:	3801      	subs	r0, #1
    27bc:	4770      	bx	lr
    27be:	bf00      	nop

000027c0 <__malloc_lock>:
    27c0:	4770      	bx	lr

000027c2 <__malloc_unlock>:
    27c2:	4770      	bx	lr

000027c4 <_read_r>:
    27c4:	b538      	push	{r3, r4, r5, lr}
    27c6:	4c07      	ldr	r4, [pc, #28]	; (27e4 <_read_r+0x20>)
    27c8:	4605      	mov	r5, r0
    27ca:	4608      	mov	r0, r1
    27cc:	4611      	mov	r1, r2
    27ce:	2200      	movs	r2, #0
    27d0:	6022      	str	r2, [r4, #0]
    27d2:	461a      	mov	r2, r3
    27d4:	f7fe fe46 	bl	1464 <_read>
    27d8:	1c43      	adds	r3, r0, #1
    27da:	d102      	bne.n	27e2 <_read_r+0x1e>
    27dc:	6823      	ldr	r3, [r4, #0]
    27de:	b103      	cbz	r3, 27e2 <_read_r+0x1e>
    27e0:	602b      	str	r3, [r5, #0]
    27e2:	bd38      	pop	{r3, r4, r5, pc}
    27e4:	200000c8 	.word	0x200000c8
    27e8:	682f2e2e 	.word	0x682f2e2e
    27ec:	732f6c61 	.word	0x732f6c61
    27f0:	682f6372 	.word	0x682f6372
    27f4:	695f6c61 	.word	0x695f6c61
    27f8:	00632e6f 	.word	0x00632e6f
    27fc:	682f2e2e 	.word	0x682f2e2e
    2800:	732f6c61 	.word	0x732f6c61
    2804:	682f6372 	.word	0x682f6372
    2808:	715f6c61 	.word	0x715f6c61
    280c:	5f697073 	.word	0x5f697073
    2810:	636e7973 	.word	0x636e7973
    2814:	0000632e 	.word	0x0000632e
    2818:	682f2e2e 	.word	0x682f2e2e
    281c:	732f6c61 	.word	0x732f6c61
    2820:	682f6372 	.word	0x682f6372
    2824:	755f6c61 	.word	0x755f6c61
    2828:	74726173 	.word	0x74726173
    282c:	6e79735f 	.word	0x6e79735f
    2830:	00632e63 	.word	0x00632e63
    2834:	682f2e2e 	.word	0x682f2e2e
    2838:	712f6c70 	.word	0x712f6c70
    283c:	2f697073 	.word	0x2f697073
    2840:	5f6c7068 	.word	0x5f6c7068
    2844:	69707371 	.word	0x69707371
    2848:	0000632e 	.word	0x0000632e
    284c:	40003000 	.word	0x40003000
    2850:	40003400 	.word	0x40003400
    2854:	41012000 	.word	0x41012000
    2858:	41014000 	.word	0x41014000
    285c:	43000000 	.word	0x43000000
    2860:	43000400 	.word	0x43000400
    2864:	43000800 	.word	0x43000800
    2868:	43000c00 	.word	0x43000c00

0000286c <_i2cms>:
	...
    2884:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2894:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000028a0 <n25q256a_interface>:
    28a0:	00000d79 00001081 00001141 00000fb9     y.......A.......
    28b0:	00000ef9                                ....

000028b4 <funcs_qspi_bin>:
    28b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    28c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    28d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    28e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    28f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2904:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2914:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2924:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2934:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2944:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2954:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2964:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2974:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2984:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2994:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    29a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    29b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    29c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    29d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    29e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    29f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2a04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2a14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2a24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2a34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2a44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2a54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2a64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2a74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2a84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2a94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2aa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2ab4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2ac4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2ad4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2ae4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2af4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2b04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2b14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2b24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2b34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2b44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2b54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2b64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2b74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2b84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2b94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2ba4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2bb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2bc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2bd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2be4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2bf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2c04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2c14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2c24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2c34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2c44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2c54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2c64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2c74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2c84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2c94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2ca4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2cb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2cc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2cd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2ce4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2cf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2d04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2d14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2d24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2d34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2d44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2d54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2d64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2d74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2d84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2d94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2da4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2db4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2dc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2dd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2de4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2df4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2e04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2e14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2e24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2e34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2e44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2e54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2e64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2e74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2e84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2e94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2ea4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2eb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2ec4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2ed4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2ee4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2ef4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2f04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2f14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2f24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2f34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2f44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2f54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2f64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2f74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2f84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2f94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2fa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2fb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    2fc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    2fd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    2fe4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    2ff4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3004:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3014:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3024:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3034:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3044:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3054:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3064:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3074:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3084:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3094:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    30a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    30b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    30c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    30d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    30e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    30f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3104:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3114:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3124:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3134:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3144:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3154:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3164:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3174:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3184:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3194:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    31a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    31b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    31c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    31d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    31e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    31f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3204:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3214:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3224:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3234:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3244:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3254:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3264:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3274:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3284:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3294:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    32a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    32b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    32c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    32d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    32e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    32f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3304:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3314:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3324:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3334:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3344:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3354:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3364:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3374:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3384:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3394:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    33a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    33b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    33c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    33d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    33e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    33f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3404:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3414:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3424:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3434:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3444:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3454:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3464:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3474:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3484:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3494:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    34a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    34b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    34c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    34d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    34e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    34f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3504:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3514:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3524:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3534:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3544:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3554:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3564:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3574:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3584:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3594:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    35a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    35b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    35c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    35d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    35e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    35f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3604:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3614:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3624:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3634:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3644:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3654:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3664:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3674:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3684:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3694:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    36a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    36b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    36c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    36d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    36e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    36f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3704:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3714:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3724:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3734:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3744:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3754:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3764:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3774:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3784:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3794:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    37a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    37b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    37c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    37d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    37e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    37f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3804:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3814:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3824:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3834:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3844:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3854:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3864:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3874:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3884:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3894:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    38a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    38b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    38c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    38d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    38e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    38f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3904:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3914:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3924:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3934:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3944:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3954:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3964:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3974:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3984:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3994:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    39a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    39b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    39c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    39d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    39e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    39f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3a04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3a14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3a24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3a34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3a44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3a54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3a64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3a74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3a84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3a94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3aa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3ab4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3ac4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3ad4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3ae4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3af4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3b04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3b14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3b24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3b34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3b44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3b54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3b64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3b74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3b84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3b94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3ba4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3bb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3bc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3bd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3be4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3bf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3c04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3c14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3c24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3c34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3c44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3c54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3c64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3c74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3c84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3c94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3ca4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3cb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3cc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3cd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3ce4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3cf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3d04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3d14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3d24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3d34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3d44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3d54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3d64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3d74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3d84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3d94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3da4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3db4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3dc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3dd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3de4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3df4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3e04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3e14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3e24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3e34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3e44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3e54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3e64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3e74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3e84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3e94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3ea4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3eb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3ec4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3ed4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3ee4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3ef4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3f04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3f14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3f24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3f34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3f44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3f54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3f64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3f74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3f84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3f94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3fa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3fb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    3fc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    3fd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    3fe4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    3ff4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4004:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4014:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4024:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4034:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4044:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4054:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4064:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4074:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4084:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4094:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    40a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    40b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    40c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    40d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    40e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    40f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4104:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4114:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4124:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4134:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4144:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4154:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4164:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4174:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4184:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4194:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    41a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    41b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    41c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    41d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    41e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    41f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4204:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4214:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4224:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4234:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4244:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4254:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4264:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4274:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4284:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4294:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    42a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    42b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    42c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    42d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    42e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    42f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4304:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4314:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4324:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4334:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4344:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4354:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4364:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4374:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4384:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4394:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    43a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    43b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    43c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    43d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    43e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    43f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4404:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4414:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4424:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4434:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4444:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4454:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4464:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4474:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4484:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4494:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    44a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    44b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    44c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    44d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    44e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    44f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4504:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4514:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4524:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4534:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4544:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4554:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4564:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4574:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4584:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4594:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    45a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    45b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    45c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    45d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    45e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    45f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4604:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4614:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4624:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4634:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4644:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4654:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4664:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4674:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4684:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4694:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    46a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    46b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    46c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    46d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    46e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    46f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4704:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4714:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4724:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4734:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4744:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4754:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4764:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4774:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4784:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4794:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    47a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    47b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    47c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    47d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    47e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    47f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4804:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4814:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4824:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4834:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4844:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4854:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4864:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4874:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4884:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4894:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    48a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    48b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    48c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    48d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    48e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    48f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4904:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4914:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4924:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4934:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4944:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4954:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4964:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4974:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4984:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4994:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    49a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    49b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    49c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    49d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    49e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    49f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4a04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4a14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4a24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4a34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4a44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4a54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4a64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4a74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4a84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4a94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4aa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4ab4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4ac4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4ad4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4ae4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4af4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4b04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4b14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4b24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4b34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4b44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4b54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4b64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4b74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4b84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4b94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4ba4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4bb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4bc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4bd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4be4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4bf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4c04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4c14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4c24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4c34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4c44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4c54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4c64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4c74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4c84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4c94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4ca4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4cb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4cc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4cd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4ce4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4cf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4d04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4d14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4d24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4d34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4d44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4d54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4d64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4d74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4d84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4d94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4da4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4db4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4dc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4dd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4de4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4df4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4e04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4e14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4e24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4e34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4e44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4e54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4e64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4e74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4e84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4e94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4ea4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4eb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4ec4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4ed4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4ee4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4ef4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4f04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4f14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4f24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4f34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4f44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4f54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4f64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4f74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4f84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4f94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4fa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4fb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    4fc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    4fd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    4fe4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    4ff4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5004:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5014:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5024:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5034:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5044:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5054:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5064:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5074:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5084:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5094:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    50a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    50b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    50c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    50d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    50e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    50f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5104:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5114:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5124:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5134:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5144:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5154:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5164:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5174:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5184:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5194:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    51a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    51b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    51c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    51d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    51e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    51f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5204:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5214:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5224:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5234:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5244:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5254:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5264:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5274:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5284:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5294:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    52a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    52b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    52c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    52d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    52e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    52f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5304:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5314:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5324:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5334:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5344:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5354:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5364:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5374:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5384:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5394:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    53a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    53b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    53c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    53d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    53e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    53f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5404:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5414:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5424:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5434:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5444:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5454:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5464:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5474:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5484:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5494:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    54a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    54b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    54c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    54d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    54e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    54f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5504:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5514:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5524:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5534:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5544:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5554:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5564:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5574:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5584:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5594:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    55a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    55b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    55c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    55d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    55e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    55f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5604:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5614:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5624:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5634:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5644:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5654:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5664:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5674:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5684:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5694:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    56a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    56b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    56c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    56d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    56e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    56f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5704:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5714:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5724:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5734:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5744:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5754:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5764:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5774:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5784:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5794:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    57a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    57b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    57c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    57d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    57e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    57f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5804:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5814:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5824:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5834:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5844:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5854:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5864:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5874:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5884:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5894:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    58a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    58b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    58c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    58d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    58e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    58f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5904:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5914:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5924:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5934:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5944:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5954:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5964:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5974:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5984:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5994:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    59a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    59b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    59c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    59d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    59e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    59f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5a04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5a14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5a24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5a34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5a44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5a54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5a64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5a74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5a84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5a94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5aa4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5ab4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5ac4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5ad4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5ae4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5af4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5b04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5b14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5b24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5b34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5b44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5b54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5b64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5b74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5b84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5b94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5ba4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5bb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5bc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5bd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5be4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5bf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5c04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5c14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5c24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5c34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5c44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5c54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5c64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5c74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5c84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5c94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5ca4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5cb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5cc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5cd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5ce4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5cf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5d04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5d14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5d24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5d34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5d44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5d54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5d64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5d74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5d84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5d94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5da4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5db4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5dc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5dd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5de4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5df4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5e04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5e14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5e24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5e34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5e44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5e54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5e64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5e74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5e84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5e94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5ea4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5eb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5ec4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5ed4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5ee4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5ef4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5f04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5f14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5f24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5f34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5f44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5f54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5f64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5f74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5f84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5f94:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5fa4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5fb4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    5fc4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    5fd4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    5fe4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    5ff4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6004:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6014:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6024:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6034:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6044:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6054:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6064:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6074:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6084:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6094:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    60a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    60b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    60c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    60d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    60e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    60f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6104:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6114:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6124:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6134:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6144:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6154:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6164:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6174:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6184:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6194:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    61a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    61b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    61c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    61d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    61e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    61f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6204:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6214:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6224:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6234:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6244:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6254:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6264:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6274:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6284:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6294:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    62a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    62b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    62c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    62d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    62e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    62f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6304:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6314:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6324:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6334:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6344:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6354:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6364:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6374:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6384:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6394:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    63a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    63b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    63c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    63d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    63e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    63f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6404:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6414:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6424:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6434:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6444:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6454:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6464:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6474:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6484:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6494:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    64a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    64b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    64c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    64d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    64e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    64f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6504:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6514:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6524:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6534:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6544:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6554:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6564:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6574:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6584:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6594:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    65a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    65b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    65c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    65d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    65e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    65f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6604:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6614:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6624:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6634:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6644:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6654:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6664:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6674:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6684:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6694:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    66a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    66b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    66c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    66d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    66e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    66f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6704:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6714:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6724:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6734:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6744:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6754:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6764:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6774:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6784:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6794:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    67a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    67b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    67c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    67d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    67e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    67f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6804:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6814:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6824:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6834:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6844:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6854:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6864:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6874:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6884:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6894:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    68a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    68b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    68c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    68d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    68e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    68f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6904:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6914:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6924:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6934:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6944:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6954:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6964:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6974:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6984:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6994:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    69a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    69b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    69c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    69d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    69e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    69f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6a04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6a14:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6a24:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6a34:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6a44:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6a54:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6a64:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6a74:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6a84:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6a94:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6aa4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6ab4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6ac4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6ad4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6ae4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6af4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6b04:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6b14:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6b24:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6b34:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6b44:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6b54:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6b64:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6b74:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6b84:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6b94:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6ba4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6bb4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6bc4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6bd4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6be4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6bf4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6c04:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6c14:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6c24:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6c34:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6c44:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6c54:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6c64:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6c74:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6c84:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6c94:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6ca4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6cb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6cc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6cd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6ce4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6cf4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6d04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6d14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6d24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6d34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6d44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6d54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6d64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6d74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6d84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6d94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6da4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6db4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6dc4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6dd4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6de4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6df4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6e04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6e14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6e24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6e34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6e44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6e54:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6e64:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6e74:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6e84:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6e94:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6ea4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6eb4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6ec4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6ed4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6ee4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6ef4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6f04:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6f14:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6f24:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6f34:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6f44:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6f54:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6f64:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6f74:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6f84:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6f94:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6fa4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6fb4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    6fc4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    6fd4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    6fe4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    6ff4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7004:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7014:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7024:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7034:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7044:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7054:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7064:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7074:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7084:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7094:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    70a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    70b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    70c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    70d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    70e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    70f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7104:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7114:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7124:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7134:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7144:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7154:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7164:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7174:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7184:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7194:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    71a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    71b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    71c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    71d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    71e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    71f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7204:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7214:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7224:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7234:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7244:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7254:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7264:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7274:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7284:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7294:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    72a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    72b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    72c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    72d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    72e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    72f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7304:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7314:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7324:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7334:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7344:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7354:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7364:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7374:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7384:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7394:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    73a4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    73b4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    73c4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    73d4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    73e4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    73f4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7404:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7414:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7424:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7434:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7444:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7454:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7464:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7474:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7484:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7494:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    74a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    74b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    74c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    74d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    74e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    74f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7504:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7514:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7524:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7534:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7544:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7554:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7564:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7574:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7584:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7594:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    75a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    75b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    75c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    75d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    75e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    75f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7604:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7614:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7624:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7634:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7644:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7654:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7664:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    7674:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7684:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7694:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    76a4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    76b4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    76c4:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    76d4:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    76e4:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F
    76f4:	f44f4d06 f8c52680 f44f611c 47a07096     .MO..&...aO..p.G
    7704:	611cf8c5 47a020c8 bf00bd70 41008000     ...a. .Gp......A
    7714:	4603b508 2180f44f f8c24a03 f44f111c     ...FO..!.J....O.
    7724:	479870fa bf00bd08 41008000 4604b570     .p.G.......Ap..F

00007734 <blink_2>:
    7734:	0400001d                                ....

00007738 <blink_1>:
    7738:	04000001 65646f43 746f6e20 65646920     ....Code not ide
    7748:	6369746e 40206c61 25783020 203a2078     ntical @ 0x%x : 
    7758:	78257830 203e3c20 78257830 00000a0d     0x%x <> 0x%x....
    7768:	3d3d3d3d 50535120 6c462049 20687361     ==== QSPI Flash 
    7778:	20504958 6f6d6544 3d3d3d20 00000d3d     XIP Demo ====...
    7788:	5043202d 20202055 25203a20 7a484b64     - CPU    : %dKHz
    7798:	00000a0d 5351202d 43204950 25203a4b     ....- QSPI CK: %
    77a8:	7a484b64 00000a0d 64616f4c 50535120     dKHz....Load QSP
    77b8:	6f632049 203a6564 78302040 2d207825     I code: @ 0x%x -
    77c8:	7830203e 202c7825 62207525 73657479     > 0x%x, %u bytes
    77d8:	7265202c 20657361 0a0d7525 00000000     , erase %u......
    77e8:	63656843 5351206b 63204950 3a65646f     Check QSPI code:
    77f8:	0000000d 49505351 646f4320 6f6c2065     ....QSPI Code lo
    7808:	6e696461 2e2e2067 0000002e 000d4b4f     ading ......OK..
    7818:	64616f4c 63206465 2065646f 696c6176     Loaded code vali
    7828:	69746164 4f206e6f 00000d4b 49505351     dation OK...QSPI
    7838:	646f4320 4b4f2065 6b73202c 6c207069      Code OK, skip l
    7848:	6964616f 000d676e 656e6f44 0000000d     oading..Done....
    7858:	216e7552 0000000d 2044454c 6e696c62     Run!....LED blin
    7868:	0d2c736b 00000000 73657250 57532073     ks,.....Press SW
    7878:	6f742030 61686320 2065676e 6e696c62     0 to change blin
    7888:	676e696b 646f6d20 000d2e65              king mode...

00007894 <_global_impure_ptr>:
    7894:	20000004                                ... 

00007898 <__sf_fake_stderr>:
	...

000078b8 <__sf_fake_stdin>:
	...

000078d8 <__sf_fake_stdout>:
	...
    78f8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7908:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7918:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7928:	00006665                                ef..

0000792c <_init>:
    792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    792e:	bf00      	nop
    7930:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7932:	bc08      	pop	{r3}
    7934:	469e      	mov	lr, r3
    7936:	4770      	bx	lr

00007938 <__init_array_start>:
    7938:	00000289 	.word	0x00000289

0000793c <_fini>:
    793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    793e:	bf00      	nop
    7940:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7942:	bc08      	pop	{r3}
    7944:	469e      	mov	lr, r3
    7946:	4770      	bx	lr

00007948 <__fini_array_start>:
    7948:	00000265 	.word	0x00000265
