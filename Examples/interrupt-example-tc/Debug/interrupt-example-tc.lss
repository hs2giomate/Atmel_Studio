
interrupt-example-tc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000004c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  000008f8  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000474  00000938  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005d80  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004eb  00000000  00000000  00026235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009c  00000000  00000000  00026720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000080  00000000  00000000  000267bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0002683c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011908  00000000  00000000  0002688c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000014cb  00000000  00000000  00038194  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071875  00000000  00000000  0003965f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000278  00000000  00000000  000aaed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 dd 02 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	000004c4 	.word	0x000004c4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	000004c4 	.word	0x000004c4
 10c:	000004c4 	.word	0x000004c4
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	000004c4 	.word	0x000004c4
 1c8:	20000000 	.word	0x20000000
 1cc:	20000434 	.word	0x20000434
 1d0:	20000004 	.word	0x20000004
 1d4:	20000434 	.word	0x20000434
 1d8:	20000474 	.word	0x20000474
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	000002fd 	.word	0x000002fd
 1f8:	000002c9 	.word	0x000002c9

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
 1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
 200:	601a      	str	r2, [r3, #0]
	return;
}
 202:	4770      	bx	lr
 204:	000f4240 	.word	0x000f4240
 208:	20000000 	.word	0x20000000

0000020c <AppInit>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 20c:	b672      	cpsid	i
	
	/* Disable all IRQs until all application initialization completed */
	__disable_irq();
	
	/* Digital I/O Initialization */	
	PORT->Group[LED0_PORT].DIRSET.reg = LED0_PIN ;								// Assign the LED0 pin as OUTPUT
 20e:	4b26      	ldr	r3, [pc, #152]	; (2a8 <AppInit+0x9c>)
 210:	2280      	movs	r2, #128	; 0x80
 212:	05d2      	lsls	r2, r2, #23
 214:	2188      	movs	r1, #136	; 0x88
 216:	505a      	str	r2, [r3, r1]
	PORT->Group[LED0_PORT].OUTSET.reg = LED0_PIN ;								// Set the LED0 pin level, i.e. put to 3.3V -> this turns off the LED
 218:	3110      	adds	r1, #16
 21a:	505a      	str	r2, [r3, r1]

	/* TC3 Initialization (Generate Compare Interrupts every 100mS) */
	
	// Configure asynchronous clock source
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TCC2_TC3_Val;							// select TC3 peripheral channel
 21c:	4b23      	ldr	r3, [pc, #140]	; (2ac <AppInit+0xa0>)
 21e:	221b      	movs	r2, #27
 220:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_GEN_GCLK0;								// select source GCLK_GEN[0]
 222:	885a      	ldrh	r2, [r3, #2]
 224:	b292      	uxth	r2, r2
 226:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;												// enable generic clock
 228:	8859      	ldrh	r1, [r3, #2]
 22a:	2280      	movs	r2, #128	; 0x80
 22c:	01d2      	lsls	r2, r2, #7
 22e:	430a      	orrs	r2, r1
 230:	805a      	strh	r2, [r3, #2]
	
	// Configure synchronous bus clock
	PM->APBCSEL.bit.APBCDIV = 0;												// no prescaler
 232:	4b1f      	ldr	r3, [pc, #124]	; (2b0 <AppInit+0xa4>)
 234:	7ada      	ldrb	r2, [r3, #11]
 236:	2107      	movs	r1, #7
 238:	438a      	bics	r2, r1
 23a:	72da      	strb	r2, [r3, #11]
	PM->APBCMASK.bit.TC3_ = 1;													// enable TC3 interface
 23c:	6a19      	ldr	r1, [r3, #32]
 23e:	2280      	movs	r2, #128	; 0x80
 240:	0112      	lsls	r2, r2, #4
 242:	430a      	orrs	r2, r1
 244:	621a      	str	r2, [r3, #32]
	
	// Configure Count Mode (16-bit)
	TC3->COUNT16.CTRLA.bit.MODE = 0x0;
 246:	4b1b      	ldr	r3, [pc, #108]	; (2b4 <AppInit+0xa8>)
 248:	881a      	ldrh	r2, [r3, #0]
 24a:	210c      	movs	r1, #12
 24c:	438a      	bics	r2, r1
 24e:	801a      	strh	r2, [r3, #0]
	
	// Configure Prescaler for divide by 2 (500kHz clock to COUNT)
	TC3->COUNT16.CTRLA.bit.PRESCALER = 0x1;
 250:	881a      	ldrh	r2, [r3, #0]
 252:	4919      	ldr	r1, [pc, #100]	; (2b8 <AppInit+0xac>)
 254:	4011      	ands	r1, r2
 256:	2280      	movs	r2, #128	; 0x80
 258:	0052      	lsls	r2, r2, #1
 25a:	430a      	orrs	r2, r1
 25c:	801a      	strh	r2, [r3, #0]
	
	// Configure TC3 Compare Mode for compare channel 0
	TC3->COUNT16.CTRLA.bit.WAVEGEN = 0x1;										// "Match Frequency" operation
 25e:	881a      	ldrh	r2, [r3, #0]
 260:	2160      	movs	r1, #96	; 0x60
 262:	438a      	bics	r2, r1
 264:	2120      	movs	r1, #32
 266:	430a      	orrs	r2, r1
 268:	801a      	strh	r2, [r3, #0]
	
	// Initialize compare value for 100mS @ 500kHz
	TC3->COUNT16.CC[0].reg = 50000;						
 26a:	4a14      	ldr	r2, [pc, #80]	; (2bc <AppInit+0xb0>)
 26c:	831a      	strh	r2, [r3, #24]
	
	// Enable TC3 compare mode interrupt generation
	TC3->COUNT16.INTENSET.bit.MC0 = 0x1;										// Enable match interrupts on compare channel 0 	
 26e:	7b5a      	ldrb	r2, [r3, #13]
 270:	2110      	movs	r1, #16
 272:	430a      	orrs	r2, r1
 274:	735a      	strb	r2, [r3, #13]
	
	// Enable TC3
	TC3->COUNT16.CTRLA.bit.ENABLE = 1;
 276:	881a      	ldrh	r2, [r3, #0]
 278:	2102      	movs	r1, #2
 27a:	430a      	orrs	r2, r1
 27c:	801a      	strh	r2, [r3, #0]
	
	// Wait until TC3 is enabled
	while(TC3->COUNT16.STATUS.bit.SYNCBUSY == 1);
 27e:	001a      	movs	r2, r3
 280:	7bd3      	ldrb	r3, [r2, #15]
 282:	09db      	lsrs	r3, r3, #7
 284:	2b01      	cmp	r3, #1
 286:	d0fb      	beq.n	280 <AppInit+0x74>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 288:	4b0d      	ldr	r3, [pc, #52]	; (2c0 <AppInit+0xb4>)
 28a:	20c4      	movs	r0, #196	; 0xc4
 28c:	0080      	lsls	r0, r0, #2
 28e:	581a      	ldr	r2, [r3, r0]
 290:	490c      	ldr	r1, [pc, #48]	; (2c4 <AppInit+0xb8>)
 292:	4011      	ands	r1, r2
 294:	22c0      	movs	r2, #192	; 0xc0
 296:	0412      	lsls	r2, r2, #16
 298:	430a      	orrs	r2, r1
 29a:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 29c:	2280      	movs	r2, #128	; 0x80
 29e:	02d2      	lsls	r2, r2, #11
 2a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 2a2:	b662      	cpsie	i
	NVIC_EnableIRQ(TC3_IRQn);													// Enable the interrupt
	
	/* Enable all IRQs */
	__enable_irq();
	
}
 2a4:	4770      	bx	lr
 2a6:	46c0      	nop			; (mov r8, r8)
 2a8:	41004400 	.word	0x41004400
 2ac:	40000c00 	.word	0x40000c00
 2b0:	40000400 	.word	0x40000400
 2b4:	42002c00 	.word	0x42002c00
 2b8:	fffff8ff 	.word	0xfffff8ff
 2bc:	ffffc350 	.word	0xffffc350
 2c0:	e000e100 	.word	0xe000e100
 2c4:	ff00ffff 	.word	0xff00ffff

000002c8 <main>:
int main(void){	
 2c8:	b510      	push	{r4, lr}
    SystemInit();
 2ca:	4b02      	ldr	r3, [pc, #8]	; (2d4 <main+0xc>)
 2cc:	4798      	blx	r3
	AppInit();
 2ce:	4b02      	ldr	r3, [pc, #8]	; (2d8 <main+0x10>)
 2d0:	4798      	blx	r3
 2d2:	e7fe      	b.n	2d2 <main+0xa>
 2d4:	000001fd 	.word	0x000001fd
 2d8:	0000020d 	.word	0x0000020d

000002dc <TC3_Handler>:
 *
 ******************************************************************************/
void TC3_Handler(void){
	
	// Toggle LED0
	PORT->Group[LED0_PORT].OUTTGL.reg = LED0_PIN;
 2dc:	2180      	movs	r1, #128	; 0x80
 2de:	05c9      	lsls	r1, r1, #23
 2e0:	239c      	movs	r3, #156	; 0x9c
 2e2:	4a04      	ldr	r2, [pc, #16]	; (2f4 <TC3_Handler+0x18>)
 2e4:	50d1      	str	r1, [r2, r3]
	// Acknowledge the interrupt (clear MC0 interrupt flag to re-arm)
	TC3->COUNT16.INTFLAG.reg |= 0b00010000;
 2e6:	4a04      	ldr	r2, [pc, #16]	; (2f8 <TC3_Handler+0x1c>)
 2e8:	7b93      	ldrb	r3, [r2, #14]
 2ea:	2110      	movs	r1, #16
 2ec:	430b      	orrs	r3, r1
 2ee:	7393      	strb	r3, [r2, #14]
 2f0:	4770      	bx	lr
 2f2:	46c0      	nop			; (mov r8, r8)
 2f4:	41004400 	.word	0x41004400
 2f8:	42002c00 	.word	0x42002c00

000002fc <__libc_init_array>:
 2fc:	b570      	push	{r4, r5, r6, lr}
 2fe:	4e0d      	ldr	r6, [pc, #52]	; (334 <__libc_init_array+0x38>)
 300:	4d0d      	ldr	r5, [pc, #52]	; (338 <__libc_init_array+0x3c>)
 302:	2400      	movs	r4, #0
 304:	1bad      	subs	r5, r5, r6
 306:	10ad      	asrs	r5, r5, #2
 308:	d005      	beq.n	316 <__libc_init_array+0x1a>
 30a:	00a3      	lsls	r3, r4, #2
 30c:	58f3      	ldr	r3, [r6, r3]
 30e:	3401      	adds	r4, #1
 310:	4798      	blx	r3
 312:	42a5      	cmp	r5, r4
 314:	d1f9      	bne.n	30a <__libc_init_array+0xe>
 316:	f000 f8c3 	bl	4a0 <_init>
 31a:	4e08      	ldr	r6, [pc, #32]	; (33c <__libc_init_array+0x40>)
 31c:	4d08      	ldr	r5, [pc, #32]	; (340 <__libc_init_array+0x44>)
 31e:	2400      	movs	r4, #0
 320:	1bad      	subs	r5, r5, r6
 322:	10ad      	asrs	r5, r5, #2
 324:	d005      	beq.n	332 <__libc_init_array+0x36>
 326:	00a3      	lsls	r3, r4, #2
 328:	58f3      	ldr	r3, [r6, r3]
 32a:	3401      	adds	r4, #1
 32c:	4798      	blx	r3
 32e:	42a5      	cmp	r5, r4
 330:	d1f9      	bne.n	326 <__libc_init_array+0x2a>
 332:	bd70      	pop	{r4, r5, r6, pc}
 334:	000004ac 	.word	0x000004ac
 338:	000004ac 	.word	0x000004ac
 33c:	000004ac 	.word	0x000004ac
 340:	000004b4 	.word	0x000004b4

00000344 <register_fini>:
 344:	4b03      	ldr	r3, [pc, #12]	; (354 <register_fini+0x10>)
 346:	b510      	push	{r4, lr}
 348:	2b00      	cmp	r3, #0
 34a:	d002      	beq.n	352 <register_fini+0xe>
 34c:	4802      	ldr	r0, [pc, #8]	; (358 <register_fini+0x14>)
 34e:	f000 f805 	bl	35c <atexit>
 352:	bd10      	pop	{r4, pc}
 354:	00000000 	.word	0x00000000
 358:	0000036d 	.word	0x0000036d

0000035c <atexit>:
 35c:	b510      	push	{r4, lr}
 35e:	0001      	movs	r1, r0
 360:	2300      	movs	r3, #0
 362:	2200      	movs	r2, #0
 364:	2000      	movs	r0, #0
 366:	f000 f81f 	bl	3a8 <__register_exitproc>
 36a:	bd10      	pop	{r4, pc}

0000036c <__libc_fini_array>:
 36c:	b570      	push	{r4, r5, r6, lr}
 36e:	4b09      	ldr	r3, [pc, #36]	; (394 <__libc_fini_array+0x28>)
 370:	4c09      	ldr	r4, [pc, #36]	; (398 <__libc_fini_array+0x2c>)
 372:	1ae4      	subs	r4, r4, r3
 374:	10a4      	asrs	r4, r4, #2
 376:	d009      	beq.n	38c <__libc_fini_array+0x20>
 378:	4a08      	ldr	r2, [pc, #32]	; (39c <__libc_fini_array+0x30>)
 37a:	18a5      	adds	r5, r4, r2
 37c:	00ad      	lsls	r5, r5, #2
 37e:	18ed      	adds	r5, r5, r3
 380:	682b      	ldr	r3, [r5, #0]
 382:	3c01      	subs	r4, #1
 384:	4798      	blx	r3
 386:	3d04      	subs	r5, #4
 388:	2c00      	cmp	r4, #0
 38a:	d1f9      	bne.n	380 <__libc_fini_array+0x14>
 38c:	f000 f892 	bl	4b4 <_fini>
 390:	bd70      	pop	{r4, r5, r6, pc}
 392:	46c0      	nop			; (mov r8, r8)
 394:	000004c0 	.word	0x000004c0
 398:	000004c4 	.word	0x000004c4
 39c:	3fffffff 	.word	0x3fffffff

000003a0 <__retarget_lock_acquire_recursive>:
 3a0:	4770      	bx	lr
 3a2:	46c0      	nop			; (mov r8, r8)

000003a4 <__retarget_lock_release_recursive>:
 3a4:	4770      	bx	lr
 3a6:	46c0      	nop			; (mov r8, r8)

000003a8 <__register_exitproc>:
 3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 3aa:	464e      	mov	r6, r9
 3ac:	4645      	mov	r5, r8
 3ae:	46de      	mov	lr, fp
 3b0:	4657      	mov	r7, sl
 3b2:	b5e0      	push	{r5, r6, r7, lr}
 3b4:	4d36      	ldr	r5, [pc, #216]	; (490 <__register_exitproc+0xe8>)
 3b6:	b083      	sub	sp, #12
 3b8:	0006      	movs	r6, r0
 3ba:	6828      	ldr	r0, [r5, #0]
 3bc:	4698      	mov	r8, r3
 3be:	000f      	movs	r7, r1
 3c0:	4691      	mov	r9, r2
 3c2:	f7ff ffed 	bl	3a0 <__retarget_lock_acquire_recursive>
 3c6:	4b33      	ldr	r3, [pc, #204]	; (494 <__register_exitproc+0xec>)
 3c8:	681c      	ldr	r4, [r3, #0]
 3ca:	23a4      	movs	r3, #164	; 0xa4
 3cc:	005b      	lsls	r3, r3, #1
 3ce:	58e0      	ldr	r0, [r4, r3]
 3d0:	2800      	cmp	r0, #0
 3d2:	d052      	beq.n	47a <__register_exitproc+0xd2>
 3d4:	6843      	ldr	r3, [r0, #4]
 3d6:	2b1f      	cmp	r3, #31
 3d8:	dc13      	bgt.n	402 <__register_exitproc+0x5a>
 3da:	1c5a      	adds	r2, r3, #1
 3dc:	9201      	str	r2, [sp, #4]
 3de:	2e00      	cmp	r6, #0
 3e0:	d128      	bne.n	434 <__register_exitproc+0x8c>
 3e2:	9a01      	ldr	r2, [sp, #4]
 3e4:	3302      	adds	r3, #2
 3e6:	009b      	lsls	r3, r3, #2
 3e8:	6042      	str	r2, [r0, #4]
 3ea:	501f      	str	r7, [r3, r0]
 3ec:	6828      	ldr	r0, [r5, #0]
 3ee:	f7ff ffd9 	bl	3a4 <__retarget_lock_release_recursive>
 3f2:	2000      	movs	r0, #0
 3f4:	b003      	add	sp, #12
 3f6:	bc3c      	pop	{r2, r3, r4, r5}
 3f8:	4690      	mov	r8, r2
 3fa:	4699      	mov	r9, r3
 3fc:	46a2      	mov	sl, r4
 3fe:	46ab      	mov	fp, r5
 400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 402:	4b25      	ldr	r3, [pc, #148]	; (498 <__register_exitproc+0xf0>)
 404:	2b00      	cmp	r3, #0
 406:	d03d      	beq.n	484 <__register_exitproc+0xdc>
 408:	20c8      	movs	r0, #200	; 0xc8
 40a:	0040      	lsls	r0, r0, #1
 40c:	e000      	b.n	410 <__register_exitproc+0x68>
 40e:	bf00      	nop
 410:	2800      	cmp	r0, #0
 412:	d037      	beq.n	484 <__register_exitproc+0xdc>
 414:	22a4      	movs	r2, #164	; 0xa4
 416:	2300      	movs	r3, #0
 418:	0052      	lsls	r2, r2, #1
 41a:	58a1      	ldr	r1, [r4, r2]
 41c:	6043      	str	r3, [r0, #4]
 41e:	6001      	str	r1, [r0, #0]
 420:	50a0      	str	r0, [r4, r2]
 422:	3240      	adds	r2, #64	; 0x40
 424:	5083      	str	r3, [r0, r2]
 426:	3204      	adds	r2, #4
 428:	5083      	str	r3, [r0, r2]
 42a:	3301      	adds	r3, #1
 42c:	9301      	str	r3, [sp, #4]
 42e:	2300      	movs	r3, #0
 430:	2e00      	cmp	r6, #0
 432:	d0d6      	beq.n	3e2 <__register_exitproc+0x3a>
 434:	009a      	lsls	r2, r3, #2
 436:	4692      	mov	sl, r2
 438:	4482      	add	sl, r0
 43a:	464a      	mov	r2, r9
 43c:	2188      	movs	r1, #136	; 0x88
 43e:	4654      	mov	r4, sl
 440:	5062      	str	r2, [r4, r1]
 442:	22c4      	movs	r2, #196	; 0xc4
 444:	0052      	lsls	r2, r2, #1
 446:	4691      	mov	r9, r2
 448:	4481      	add	r9, r0
 44a:	464a      	mov	r2, r9
 44c:	3987      	subs	r1, #135	; 0x87
 44e:	4099      	lsls	r1, r3
 450:	6812      	ldr	r2, [r2, #0]
 452:	468b      	mov	fp, r1
 454:	430a      	orrs	r2, r1
 456:	4694      	mov	ip, r2
 458:	464a      	mov	r2, r9
 45a:	4661      	mov	r1, ip
 45c:	6011      	str	r1, [r2, #0]
 45e:	2284      	movs	r2, #132	; 0x84
 460:	4641      	mov	r1, r8
 462:	0052      	lsls	r2, r2, #1
 464:	50a1      	str	r1, [r4, r2]
 466:	2e02      	cmp	r6, #2
 468:	d1bb      	bne.n	3e2 <__register_exitproc+0x3a>
 46a:	0002      	movs	r2, r0
 46c:	465c      	mov	r4, fp
 46e:	328d      	adds	r2, #141	; 0x8d
 470:	32ff      	adds	r2, #255	; 0xff
 472:	6811      	ldr	r1, [r2, #0]
 474:	430c      	orrs	r4, r1
 476:	6014      	str	r4, [r2, #0]
 478:	e7b3      	b.n	3e2 <__register_exitproc+0x3a>
 47a:	0020      	movs	r0, r4
 47c:	304d      	adds	r0, #77	; 0x4d
 47e:	30ff      	adds	r0, #255	; 0xff
 480:	50e0      	str	r0, [r4, r3]
 482:	e7a7      	b.n	3d4 <__register_exitproc+0x2c>
 484:	6828      	ldr	r0, [r5, #0]
 486:	f7ff ff8d 	bl	3a4 <__retarget_lock_release_recursive>
 48a:	2001      	movs	r0, #1
 48c:	4240      	negs	r0, r0
 48e:	e7b1      	b.n	3f4 <__register_exitproc+0x4c>
 490:	20000430 	.word	0x20000430
 494:	0000049c 	.word	0x0000049c
 498:	00000000 	.word	0x00000000

0000049c <_global_impure_ptr>:
 49c:	20000008                                ... 

000004a0 <_init>:
 4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4a2:	46c0      	nop			; (mov r8, r8)
 4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4a6:	bc08      	pop	{r3}
 4a8:	469e      	mov	lr, r3
 4aa:	4770      	bx	lr

000004ac <__init_array_start>:
 4ac:	00000345 	.word	0x00000345

000004b0 <__frame_dummy_init_array_entry>:
 4b0:	000000dd                                ....

000004b4 <_fini>:
 4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4b6:	46c0      	nop			; (mov r8, r8)
 4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4ba:	bc08      	pop	{r3}
 4bc:	469e      	mov	lr, r3
 4be:	4770      	bx	lr

000004c0 <__fini_array_start>:
 4c0:	000000b5 	.word	0x000000b5
