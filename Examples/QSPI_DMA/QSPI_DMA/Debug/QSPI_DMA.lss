
QSPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d2c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          000009f8  20000070  00002da0  00020070  2**4
                  ALLOC
  5 .stack        00010000  20000a68  00003798  00020070  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   00027424  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003f87  00000000  00000000  0004750f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d250  00000000  00000000  0004b496  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b98  00000000  00000000  000586e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fb0  00000000  00000000  0005927e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037321  00000000  00000000  0005a22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017452  00000000  00000000  0009154f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001203af  00000000  00000000  000a89a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000023fc  00000000  00000000  001c8d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 0a 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     h.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	f1 11 00 00 fd 11 00 00 09 12 00 00 15 12 00 00     ................
      cc:	21 12 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     !...............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	ed 14 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000070 	.word	0x20000070
     280:	00000000 	.word	0x00000000
     284:	00002d2c 	.word	0x00002d2c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002d2c 	.word	0x00002d2c
     2c4:	20000074 	.word	0x20000074
     2c8:	00002d2c 	.word	0x00002d2c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000005e9 	.word	0x000005e9
     2e0:	00001969 	.word	0x00001969

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00002d2c 	.word	0x00002d2c
     364:	20000064 	.word	0x20000064
     368:	20000a68 	.word	0x20000a68
     36c:	20000070 	.word	0x20000070
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00001989 	.word	0x00001989
     37c:	000017b1 	.word	0x000017b1

00000380 <QSPI_INSTANCE_PORT_init>:
struct qspi_dma_descriptor QSPI_INSTANCE;

struct usart_sync_descriptor TARGET_IO;

void QSPI_INSTANCE_PORT_init(void)
{
     380:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     382:	4b5a      	ldr	r3, [pc, #360]	; (4ec <QSPI_INSTANCE_PORT_init+0x16c>)
     384:	f44f 6500 	mov.w	r5, #2048	; 0x800
     388:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     38c:	4a58      	ldr	r2, [pc, #352]	; (4f0 <QSPI_INSTANCE_PORT_init+0x170>)
     38e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     392:	4858      	ldr	r0, [pc, #352]	; (4f4 <QSPI_INSTANCE_PORT_init+0x174>)
     394:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     398:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     39c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3a0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a4:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b4:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3bc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c4:	f44f 7280 	mov.w	r2, #256	; 0x100
     3c8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ca:	494b      	ldr	r1, [pc, #300]	; (4f8 <QSPI_INSTANCE_PORT_init+0x178>)
     3cc:	6299      	str	r1, [r3, #40]	; 0x28
     3ce:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     3d2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     3da:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3fa:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     402:	f44f 7200 	mov.w	r2, #512	; 0x200
     406:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     408:	f501 7180 	add.w	r1, r1, #256	; 0x100
     40c:	6299      	str	r1, [r3, #40]	; 0x28
     40e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     410:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     412:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     416:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     41a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     41e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     422:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     426:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     42e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     432:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     436:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     43e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     442:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     444:	4a2d      	ldr	r2, [pc, #180]	; (4fc <QSPI_INSTANCE_PORT_init+0x17c>)
     446:	629a      	str	r2, [r3, #40]	; 0x28
     448:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     44a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     450:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     454:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     458:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     45c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     460:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     464:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     468:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     470:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     478:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	4a21      	ldr	r2, [pc, #132]	; (500 <QSPI_INSTANCE_PORT_init+0x180>)
     47c:	629a      	str	r2, [r3, #40]	; 0x28
     47e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     480:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     482:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     486:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     48e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     492:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     496:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     49e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4a6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	4a14      	ldr	r2, [pc, #80]	; (504 <QSPI_INSTANCE_PORT_init+0x184>)
     4b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4b8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4bc:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     4c0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c8:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     4cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
}
     4e8:	bc30      	pop	{r4, r5}
     4ea:	4770      	bx	lr
     4ec:	41008000 	.word	0x41008000
     4f0:	40020800 	.word	0x40020800
     4f4:	c0020000 	.word	0xc0020000
     4f8:	40000100 	.word	0x40000100
     4fc:	40000400 	.word	0x40000400
     500:	40000800 	.word	0x40000800
     504:	40020400 	.word	0x40020400

00000508 <QSPI_INSTANCE_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     508:	4b06      	ldr	r3, [pc, #24]	; (524 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     50a:	691a      	ldr	r2, [r3, #16]
     50c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     510:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     512:	691a      	ldr	r2, [r3, #16]
     514:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     518:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     51a:	69da      	ldr	r2, [r3, #28]
     51c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     520:	61da      	str	r2, [r3, #28]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     528:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     52a:	4b04      	ldr	r3, [pc, #16]	; (53c <QSPI_INSTANCE_init+0x14>)
     52c:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     52e:	4904      	ldr	r1, [pc, #16]	; (540 <QSPI_INSTANCE_init+0x18>)
     530:	4804      	ldr	r0, [pc, #16]	; (544 <QSPI_INSTANCE_init+0x1c>)
     532:	4b05      	ldr	r3, [pc, #20]	; (548 <QSPI_INSTANCE_init+0x20>)
     534:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <QSPI_INSTANCE_init+0x24>)
     538:	4798      	blx	r3
     53a:	bd08      	pop	{r3, pc}
     53c:	00000509 	.word	0x00000509
     540:	42003400 	.word	0x42003400
     544:	2000063c 	.word	0x2000063c
     548:	00000cad 	.word	0x00000cad
     54c:	00000381 	.word	0x00000381

00000550 <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	4b10      	ldr	r3, [pc, #64]	; (594 <TARGET_IO_PORT_init+0x44>)
     552:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     566:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     592:	4770      	bx	lr
     594:	41008000 	.word	0x41008000

00000598 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <TARGET_IO_CLOCK_init+0x1c>)
     59a:	2240      	movs	r2, #64	; 0x40
     59c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     5a0:	2243      	movs	r2, #67	; 0x43
     5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     5a6:	4a04      	ldr	r2, [pc, #16]	; (5b8 <TARGET_IO_CLOCK_init+0x20>)
     5a8:	6a13      	ldr	r3, [r2, #32]
     5aa:	f043 0302 	orr.w	r3, r3, #2
     5ae:	6213      	str	r3, [r2, #32]
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	40001c00 	.word	0x40001c00
     5b8:	40000800 	.word	0x40000800

000005bc <TARGET_IO_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void TARGET_IO_init(void)
{
     5bc:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <TARGET_IO_init+0x18>)
     5c0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM5, (void *)NULL);
     5c2:	2200      	movs	r2, #0
     5c4:	4904      	ldr	r1, [pc, #16]	; (5d8 <TARGET_IO_init+0x1c>)
     5c6:	4805      	ldr	r0, [pc, #20]	; (5dc <TARGET_IO_init+0x20>)
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <TARGET_IO_init+0x24>)
     5ca:	4798      	blx	r3
	TARGET_IO_PORT_init();
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <TARGET_IO_init+0x28>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
     5d2:	bf00      	nop
     5d4:	00000599 	.word	0x00000599
     5d8:	43000400 	.word	0x43000400
     5dc:	20000630 	.word	0x20000630
     5e0:	00000e61 	.word	0x00000e61
     5e4:	00000551 	.word	0x00000551

000005e8 <system_init>:
}

void system_init(void)
{
     5e8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5ea:	4b03      	ldr	r3, [pc, #12]	; (5f8 <system_init+0x10>)
     5ec:	4798      	blx	r3
	init_mcu();

	QSPI_INSTANCE_init();
     5ee:	4b03      	ldr	r3, [pc, #12]	; (5fc <system_init+0x14>)
     5f0:	4798      	blx	r3

	TARGET_IO_init();
     5f2:	4b03      	ldr	r3, [pc, #12]	; (600 <system_init+0x18>)
     5f4:	4798      	blx	r3
     5f6:	bd08      	pop	{r3, pc}
     5f8:	00000f39 	.word	0x00000f39
     5fc:	00000529 	.word	0x00000529
     600:	000005bd 	.word	0x000005bd

00000604 <n25q256a_read>:
	n25q256a_switch_mode(me, quad_mode);
	return me;
}

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
     604:	b570      	push	{r4, r5, r6, lr}
     606:	b086      	sub	sp, #24
	struct n25q256a *           n25q  = (struct n25q256a *)me;
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     608:	6806      	ldr	r6, [r0, #0]

	struct _qspi_command cmd = {
     60a:	2400      	movs	r4, #0
     60c:	9400      	str	r4, [sp, #0]
     60e:	9401      	str	r4, [sp, #4]
     610:	9404      	str	r4, [sp, #16]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
     612:	7b00      	ldrb	r0, [r0, #12]
     614:	bb10      	cbnz	r0, 65c <n25q256a_read+0x58>
	struct _qspi_command cmd = {
     616:	f89d 4000 	ldrb.w	r4, [sp]
     61a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
     61e:	f044 04b0 	orr.w	r4, r4, #176	; 0xb0
     622:	f88d 4000 	strb.w	r4, [sp]
     626:	f89d 0001 	ldrb.w	r0, [sp, #1]
     62a:	2401      	movs	r4, #1
     62c:	f364 1005 	bfi	r0, r4, #4, #2
     630:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
     634:	2508      	movs	r5, #8
	struct _qspi_command cmd = {
     636:	f89d 4002 	ldrb.w	r4, [sp, #2]
     63a:	f365 0404 	bfi	r4, r5, #0, #5
     63e:	f88d 4002 	strb.w	r4, [sp, #2]
     642:	200b      	movs	r0, #11
     644:	f88d 0004 	strb.w	r0, [sp, #4]
     648:	9202      	str	r2, [sp, #8]
     64a:	9303      	str	r3, [sp, #12]
     64c:	9105      	str	r1, [sp, #20]
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_dma_serial_run_command(descr, &cmd);
     64e:	4669      	mov	r1, sp
     650:	4630      	mov	r0, r6
     652:	4b0b      	ldr	r3, [pc, #44]	; (680 <n25q256a_read+0x7c>)
     654:	4798      	blx	r3
	return ERR_NONE;
}
     656:	2000      	movs	r0, #0
     658:	b006      	add	sp, #24
     65a:	bd70      	pop	{r4, r5, r6, pc}
	struct _qspi_command cmd = {
     65c:	f89d 4000 	ldrb.w	r4, [sp]
     660:	2006      	movs	r0, #6
     662:	f360 0402 	bfi	r4, r0, #0, #3
     666:	f064 044f 	orn	r4, r4, #79	; 0x4f
     66a:	f88d 4000 	strb.w	r4, [sp]
     66e:	f89d 0001 	ldrb.w	r0, [sp, #1]
     672:	2401      	movs	r4, #1
     674:	f364 1005 	bfi	r0, r4, #4, #2
     678:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
     67c:	250a      	movs	r5, #10
     67e:	e7da      	b.n	636 <n25q256a_read+0x32>
     680:	00000d2d 	.word	0x00000d2d

00000684 <wait_cs_is_low>:
{
     684:	b5f0      	push	{r4, r5, r6, r7, lr}
     686:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     688:	4f0a      	ldr	r7, [pc, #40]	; (6b4 <wait_cs_is_low+0x30>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     68a:	4d0b      	ldr	r5, [pc, #44]	; (6b8 <wait_cs_is_low+0x34>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
     68c:	4e0b      	ldr	r6, [pc, #44]	; (6bc <wait_cs_is_low+0x38>)
	CRITICAL_SECTION_ENTER();
     68e:	a801      	add	r0, sp, #4
     690:	47b8      	blx	r7
     692:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     696:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     69a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     69e:	405c      	eors	r4, r3
     6a0:	4014      	ands	r4, r2
     6a2:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     6a4:	a801      	add	r0, sp, #4
     6a6:	47b0      	blx	r6
	while (!gpio_get_pin_level(FLASH_CS))
     6a8:	f414 6f00 	tst.w	r4, #2048	; 0x800
     6ac:	d0ef      	beq.n	68e <wait_cs_is_low+0xa>
}
     6ae:	b003      	add	sp, #12
     6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6b2:	bf00      	nop
     6b4:	00000c13 	.word	0x00000c13
     6b8:	41008000 	.word	0x41008000
     6bc:	00000c21 	.word	0x00000c21

000006c0 <n25q256a_xip_confirm>:
{
     6c0:	b530      	push	{r4, r5, lr}
     6c2:	b089      	sub	sp, #36	; 0x24
     6c4:	4604      	mov	r4, r0
     6c6:	460d      	mov	r5, r1
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     6c8:	6800      	ldr	r0, [r0, #0]
	struct _qspi_command        cmd
     6ca:	2300      	movs	r3, #0
     6cc:	9301      	str	r3, [sp, #4]
     6ce:	9302      	str	r3, [sp, #8]
     6d0:	9303      	str	r3, [sp, #12]
     6d2:	9305      	str	r3, [sp, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
     6d4:	7b23      	ldrb	r3, [r4, #12]
     6d6:	bb7b      	cbnz	r3, 738 <n25q256a_xip_confirm+0x78>
	struct _qspi_command        cmd
     6d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
     6dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
     6e0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     6e4:	f88d 3004 	strb.w	r3, [sp, #4]
     6e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
     6ec:	f043 0303 	orr.w	r3, r3, #3
     6f0:	2201      	movs	r2, #1
     6f2:	f362 1305 	bfi	r3, r2, #4, #2
     6f6:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
     6fa:	2200      	movs	r2, #0
	struct _qspi_command        cmd
     6fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
     700:	f362 0304 	bfi	r3, r2, #0, #5
     704:	f88d 3006 	strb.w	r3, [sp, #6]
     708:	230b      	movs	r3, #11
     70a:	f88d 3008 	strb.w	r3, [sp, #8]
     70e:	f085 0301 	eor.w	r3, r5, #1
     712:	425b      	negs	r3, r3
     714:	f88d 3009 	strb.w	r3, [sp, #9]
     718:	2301      	movs	r3, #1
     71a:	9304      	str	r3, [sp, #16]
     71c:	f10d 031f 	add.w	r3, sp, #31
     720:	9306      	str	r3, [sp, #24]
	qspi_dma_serial_run_command(descr, &cmd);
     722:	a901      	add	r1, sp, #4
     724:	4b0e      	ldr	r3, [pc, #56]	; (760 <n25q256a_xip_confirm+0xa0>)
     726:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
     728:	2d00      	cmp	r5, #0
     72a:	bf14      	ite	ne
     72c:	2302      	movne	r3, #2
     72e:	2301      	moveq	r3, #1
     730:	7363      	strb	r3, [r4, #13]
}
     732:	2000      	movs	r0, #0
     734:	b009      	add	sp, #36	; 0x24
     736:	bd30      	pop	{r4, r5, pc}
	struct _qspi_command        cmd
     738:	f89d 3004 	ldrb.w	r3, [sp, #4]
     73c:	2206      	movs	r2, #6
     73e:	f362 0302 	bfi	r3, r2, #0, #3
     742:	f063 030f 	orn	r3, r3, #15
     746:	f88d 3004 	strb.w	r3, [sp, #4]
     74a:	f89d 3005 	ldrb.w	r3, [sp, #5]
     74e:	f043 0303 	orr.w	r3, r3, #3
     752:	2201      	movs	r2, #1
     754:	f362 1305 	bfi	r3, r2, #4, #2
     758:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
     75c:	2208      	movs	r2, #8
     75e:	e7cd      	b.n	6fc <n25q256a_xip_confirm+0x3c>
     760:	00000d2d 	.word	0x00000d2d

00000764 <n25q256a_read_reg>:
{
     764:	b530      	push	{r4, r5, lr}
     766:	b089      	sub	sp, #36	; 0x24
     768:	4604      	mov	r4, r0
	uint32_t                    status = 0;
     76a:	2300      	movs	r3, #0
     76c:	9307      	str	r3, [sp, #28]
	struct qspi_dma_descriptor *descr  = (struct qspi_dma_descriptor *)(me->io);
     76e:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command        cmd    = {.inst_frame.bits.width    = width,
     770:	9301      	str	r3, [sp, #4]
     772:	9302      	str	r3, [sp, #8]
     774:	9303      	str	r3, [sp, #12]
     776:	9305      	str	r3, [sp, #20]
     778:	f001 0107 	and.w	r1, r1, #7
     77c:	f041 0190 	orr.w	r1, r1, #144	; 0x90
     780:	f88d 1004 	strb.w	r1, [sp, #4]
     784:	f88d 2008 	strb.w	r2, [sp, #8]
     788:	2301      	movs	r3, #1
     78a:	9304      	str	r3, [sp, #16]
     78c:	ab07      	add	r3, sp, #28
     78e:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
     790:	7b43      	ldrb	r3, [r0, #13]
     792:	b943      	cbnz	r3, 7a6 <n25q256a_read_reg+0x42>
	qspi_dma_serial_run_command(descr, &cmd);
     794:	a901      	add	r1, sp, #4
     796:	4628      	mov	r0, r5
     798:	4b07      	ldr	r3, [pc, #28]	; (7b8 <n25q256a_read_reg+0x54>)
     79a:	4798      	blx	r3
	if (n25q->xip_mode) {
     79c:	7b63      	ldrb	r3, [r4, #13]
     79e:	b933      	cbnz	r3, 7ae <n25q256a_read_reg+0x4a>
}
     7a0:	9807      	ldr	r0, [sp, #28]
     7a2:	b009      	add	sp, #36	; 0x24
     7a4:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
     7a6:	2100      	movs	r1, #0
     7a8:	4b04      	ldr	r3, [pc, #16]	; (7bc <n25q256a_read_reg+0x58>)
     7aa:	4798      	blx	r3
     7ac:	e7f2      	b.n	794 <n25q256a_read_reg+0x30>
		n25q256a_xip_confirm(me, true);
     7ae:	2101      	movs	r1, #1
     7b0:	4620      	mov	r0, r4
     7b2:	4b02      	ldr	r3, [pc, #8]	; (7bc <n25q256a_read_reg+0x58>)
     7b4:	4798      	blx	r3
     7b6:	e7f3      	b.n	7a0 <n25q256a_read_reg+0x3c>
     7b8:	00000d2d 	.word	0x00000d2d
     7bc:	000006c1 	.word	0x000006c1

000007c0 <n25q256a_disable_xip>:
	}
	return ERR_NONE;
}

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4604      	mov	r4, r0
	struct n25q256a *           n25q  = (struct n25q256a *)me;
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     7c4:	6806      	ldr	r6, [r0, #0]
	uint8_t                     width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     7c6:	7b05      	ldrb	r5, [r0, #12]
     7c8:	2d00      	cmp	r5, #0
     7ca:	bf18      	it	ne
     7cc:	2506      	movne	r5, #6
	uint8_t                     vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
     7ce:	2100      	movs	r1, #0
     7d0:	4b0d      	ldr	r3, [pc, #52]	; (808 <n25q256a_disable_xip+0x48>)
     7d2:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
     7d4:	2285      	movs	r2, #133	; 0x85
     7d6:	4629      	mov	r1, r5
     7d8:	4620      	mov	r0, r4
     7da:	4b0c      	ldr	r3, [pc, #48]	; (80c <n25q256a_disable_xip+0x4c>)
     7dc:	4798      	blx	r3
	if (!(vcfg & (1u << 3))) {
     7de:	f010 0f08 	tst.w	r0, #8
     7e2:	d10e      	bne.n	802 <n25q256a_disable_xip+0x42>
		if (n25q->pin_exit_xip) {
     7e4:	68a3      	ldr	r3, [r4, #8]
     7e6:	b163      	cbz	r3, 802 <n25q256a_disable_xip+0x42>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
     7e8:	6835      	ldr	r5, [r6, #0]
			qspi_dma_disable(descr);
     7ea:	4630      	mov	r0, r6
     7ec:	4b08      	ldr	r3, [pc, #32]	; (810 <n25q256a_disable_xip+0x50>)
     7ee:	4798      	blx	r3
			n25q->pin_exit_xip();
     7f0:	68a3      	ldr	r3, [r4, #8]
     7f2:	4798      	blx	r3

			qspi_dma_init(descr, hw);
     7f4:	4629      	mov	r1, r5
     7f6:	4630      	mov	r0, r6
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <n25q256a_disable_xip+0x54>)
     7fa:	4798      	blx	r3
			qspi_dma_enable(descr);
     7fc:	4630      	mov	r0, r6
     7fe:	4b06      	ldr	r3, [pc, #24]	; (818 <n25q256a_disable_xip+0x58>)
     800:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
     802:	2000      	movs	r0, #0
     804:	7360      	strb	r0, [r4, #13]
	return ERR_NONE;
}
     806:	bd70      	pop	{r4, r5, r6, pc}
     808:	000006c1 	.word	0x000006c1
     80c:	00000765 	.word	0x00000765
     810:	00000d05 	.word	0x00000d05
     814:	00000cad 	.word	0x00000cad
     818:	00000cdd 	.word	0x00000cdd

0000081c <n25q256a_write_reg>:
{
     81c:	b530      	push	{r4, r5, lr}
     81e:	b089      	sub	sp, #36	; 0x24
     820:	4604      	mov	r4, r0
     822:	9301      	str	r3, [sp, #4]
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     824:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command        cmd   = {.inst_frame.bits.width    = width,
     826:	2300      	movs	r3, #0
     828:	9302      	str	r3, [sp, #8]
     82a:	9303      	str	r3, [sp, #12]
     82c:	9304      	str	r3, [sp, #16]
     82e:	9307      	str	r3, [sp, #28]
     830:	f001 0107 	and.w	r1, r1, #7
     834:	f041 0190 	orr.w	r1, r1, #144	; 0x90
     838:	f88d 1008 	strb.w	r1, [sp, #8]
     83c:	2102      	movs	r1, #2
     83e:	f361 1305 	bfi	r3, r1, #4, #2
     842:	f88d 3009 	strb.w	r3, [sp, #9]
     846:	f88d 200c 	strb.w	r2, [sp, #12]
     84a:	2301      	movs	r3, #1
     84c:	9305      	str	r3, [sp, #20]
     84e:	ab01      	add	r3, sp, #4
     850:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
     852:	7b43      	ldrb	r3, [r0, #13]
     854:	b93b      	cbnz	r3, 866 <n25q256a_write_reg+0x4a>
	qspi_dma_serial_run_command(descr, &cmd);
     856:	a902      	add	r1, sp, #8
     858:	4628      	mov	r0, r5
     85a:	4b07      	ldr	r3, [pc, #28]	; (878 <n25q256a_write_reg+0x5c>)
     85c:	4798      	blx	r3
	if (n25q->xip_mode) {
     85e:	7b63      	ldrb	r3, [r4, #13]
     860:	b92b      	cbnz	r3, 86e <n25q256a_write_reg+0x52>
}
     862:	b009      	add	sp, #36	; 0x24
     864:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
     866:	2100      	movs	r1, #0
     868:	4b04      	ldr	r3, [pc, #16]	; (87c <n25q256a_write_reg+0x60>)
     86a:	4798      	blx	r3
     86c:	e7f3      	b.n	856 <n25q256a_write_reg+0x3a>
		n25q256a_xip_confirm(me, true);
     86e:	2101      	movs	r1, #1
     870:	4620      	mov	r0, r4
     872:	4b02      	ldr	r3, [pc, #8]	; (87c <n25q256a_write_reg+0x60>)
     874:	4798      	blx	r3
}
     876:	e7f4      	b.n	862 <n25q256a_write_reg+0x46>
     878:	00000d2d 	.word	0x00000d2d
     87c:	000006c1 	.word	0x000006c1

00000880 <n25q256a_enable_xip>:
{
     880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     882:	7b05      	ldrb	r5, [r0, #12]
     884:	2d00      	cmp	r5, #0
     886:	bf18      	it	ne
     888:	2506      	movne	r5, #6
	if (!n25q->xip_mode) {
     88a:	7b43      	ldrb	r3, [r0, #13]
     88c:	b10b      	cbz	r3, 892 <n25q256a_enable_xip+0x12>
}
     88e:	2000      	movs	r0, #0
     890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     892:	4604      	mov	r4, r0
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
     894:	2285      	movs	r2, #133	; 0x85
     896:	4629      	mov	r1, r5
     898:	4b0d      	ldr	r3, [pc, #52]	; (8d0 <n25q256a_enable_xip+0x50>)
     89a:	4798      	blx	r3
		if (vcfg & (1u << 3)) {
     89c:	f010 0f08 	tst.w	r0, #8
     8a0:	d105      	bne.n	8ae <n25q256a_enable_xip+0x2e>
		n25q->xip_mode = 1;
     8a2:	2101      	movs	r1, #1
     8a4:	7361      	strb	r1, [r4, #13]
		n25q256a_xip_confirm(me, true);
     8a6:	4620      	mov	r0, r4
     8a8:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <n25q256a_enable_xip+0x54>)
     8aa:	4798      	blx	r3
     8ac:	e7ef      	b.n	88e <n25q256a_enable_xip+0xe>
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
     8ae:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
     8b2:	2281      	movs	r2, #129	; 0x81
     8b4:	4629      	mov	r1, r5
     8b6:	4620      	mov	r0, r4
     8b8:	4e07      	ldr	r6, [pc, #28]	; (8d8 <n25q256a_enable_xip+0x58>)
     8ba:	47b0      	blx	r6
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
     8bc:	2770      	movs	r7, #112	; 0x70
     8be:	4e04      	ldr	r6, [pc, #16]	; (8d0 <n25q256a_enable_xip+0x50>)
     8c0:	463a      	mov	r2, r7
     8c2:	4629      	mov	r1, r5
     8c4:	4620      	mov	r0, r4
     8c6:	47b0      	blx	r6
     8c8:	f010 0f80 	tst.w	r0, #128	; 0x80
     8cc:	d0f8      	beq.n	8c0 <n25q256a_enable_xip+0x40>
     8ce:	e7e8      	b.n	8a2 <n25q256a_enable_xip+0x22>
     8d0:	00000765 	.word	0x00000765
     8d4:	000006c1 	.word	0x000006c1
     8d8:	0000081d 	.word	0x0000081d

000008dc <n25q256a_write_enable>:
{
     8dc:	b530      	push	{r4, r5, lr}
     8de:	b08f      	sub	sp, #60	; 0x3c
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     8e0:	6805      	ldr	r5, [r0, #0]
	uint8_t                     inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
     8e2:	2a00      	cmp	r2, #0
     8e4:	bf14      	ite	ne
     8e6:	2206      	movne	r2, #6
     8e8:	2204      	moveq	r2, #4
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
     8ea:	2300      	movs	r3, #0
     8ec:	9307      	str	r3, [sp, #28]
     8ee:	9308      	str	r3, [sp, #32]
     8f0:	9309      	str	r3, [sp, #36]	; 0x24
     8f2:	930a      	str	r3, [sp, #40]	; 0x28
     8f4:	930b      	str	r3, [sp, #44]	; 0x2c
     8f6:	930c      	str	r3, [sp, #48]	; 0x30
     8f8:	f001 0107 	and.w	r1, r1, #7
     8fc:	f041 0010 	orr.w	r0, r1, #16
     900:	f88d 001c 	strb.w	r0, [sp, #28]
     904:	f88d 2020 	strb.w	r2, [sp, #32]
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
     908:	9301      	str	r3, [sp, #4]
     90a:	9302      	str	r3, [sp, #8]
     90c:	9303      	str	r3, [sp, #12]
     90e:	9305      	str	r3, [sp, #20]
     910:	f041 0190 	orr.w	r1, r1, #144	; 0x90
     914:	f88d 1004 	strb.w	r1, [sp, #4]
     918:	2305      	movs	r3, #5
     91a:	f88d 3008 	strb.w	r3, [sp, #8]
     91e:	2301      	movs	r3, #1
     920:	9304      	str	r3, [sp, #16]
     922:	f10d 0337 	add.w	r3, sp, #55	; 0x37
     926:	9306      	str	r3, [sp, #24]
		qspi_dma_serial_run_command(descr, &cmd_en);
     928:	4c06      	ldr	r4, [pc, #24]	; (944 <n25q256a_write_enable+0x68>)
     92a:	a907      	add	r1, sp, #28
     92c:	4628      	mov	r0, r5
     92e:	47a0      	blx	r4
		qspi_dma_serial_run_command(descr, &cmd_st);
     930:	a901      	add	r1, sp, #4
     932:	4628      	mov	r0, r5
     934:	47a0      	blx	r4
	} while ((status & (1 << 1)) == 0);
     936:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
     93a:	f013 0f02 	tst.w	r3, #2
     93e:	d0f4      	beq.n	92a <n25q256a_write_enable+0x4e>
}
     940:	b00f      	add	sp, #60	; 0x3c
     942:	bd30      	pop	{r4, r5, pc}
     944:	00000d2d 	.word	0x00000d2d

00000948 <n25q256a_write>:
{
     948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     94c:	b089      	sub	sp, #36	; 0x24
     94e:	4604      	mov	r4, r0
     950:	4690      	mov	r8, r2
     952:	461f      	mov	r7, r3
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     954:	6803      	ldr	r3, [r0, #0]
     956:	9301      	str	r3, [sp, #4]
	struct _qspi_command        cmd   = {
     958:	2300      	movs	r3, #0
     95a:	9302      	str	r3, [sp, #8]
     95c:	9303      	str	r3, [sp, #12]
     95e:	9307      	str	r3, [sp, #28]
     960:	2330      	movs	r3, #48	; 0x30
     962:	f88d 3009 	strb.w	r3, [sp, #9]
     966:	2302      	movs	r3, #2
     968:	f88d 300c 	strb.w	r3, [sp, #12]
     96c:	9204      	str	r2, [sp, #16]
     96e:	9705      	str	r7, [sp, #20]
     970:	9106      	str	r1, [sp, #24]
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     972:	7b03      	ldrb	r3, [r0, #12]
     974:	2b00      	cmp	r3, #0
     976:	bf14      	ite	ne
     978:	2206      	movne	r2, #6
     97a:	2200      	moveq	r2, #0
     97c:	f06f 034f 	mvn.w	r3, #79	; 0x4f
     980:	f362 0302 	bfi	r3, r2, #0, #3
     984:	f88d 3008 	strb.w	r3, [sp, #8]
	while (length) {
     988:	b36f      	cbz	r7, 9e6 <n25q256a_write+0x9e>
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
     98a:	f8df b078 	ldr.w	fp, [pc, #120]	; a04 <n25q256a_write+0xbc>
		qspi_dma_serial_run_command(descr, &cmd);
     98e:	f8df a078 	ldr.w	sl, [pc, #120]	; a08 <n25q256a_write+0xc0>
		wait_cs_is_low();
     992:	f8df 9078 	ldr.w	r9, [pc, #120]	; a0c <n25q256a_write+0xc4>
		cmd.address = address;
     996:	f8cd 8010 	str.w	r8, [sp, #16]
		if (length <= N25Q_PAGE_SIZE) {
     99a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
			cmd.buf_len = length;
     99e:	bf92      	itee	ls
     9a0:	9705      	strls	r7, [sp, #20]
			cmd.buf_len = N25Q_PAGE_SIZE;
     9a2:	f44f 7380 	movhi.w	r3, #256	; 0x100
     9a6:	9305      	strhi	r3, [sp, #20]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
     9a8:	ad08      	add	r5, sp, #32
     9aa:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
     9ae:	2201      	movs	r2, #1
     9b0:	f001 0107 	and.w	r1, r1, #7
     9b4:	4620      	mov	r0, r4
     9b6:	47d8      	blx	fp
		qspi_dma_serial_run_command(descr, &cmd);
     9b8:	4629      	mov	r1, r5
     9ba:	9801      	ldr	r0, [sp, #4]
     9bc:	47d0      	blx	sl
		wait_cs_is_low();
     9be:	47c8      	blx	r9
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
     9c0:	2670      	movs	r6, #112	; 0x70
     9c2:	4d0e      	ldr	r5, [pc, #56]	; (9fc <n25q256a_write+0xb4>)
     9c4:	f89d 1008 	ldrb.w	r1, [sp, #8]
     9c8:	4632      	mov	r2, r6
     9ca:	f001 0107 	and.w	r1, r1, #7
     9ce:	4620      	mov	r0, r4
     9d0:	47a8      	blx	r5
     9d2:	f010 0f80 	tst.w	r0, #128	; 0x80
     9d6:	d0f5      	beq.n	9c4 <n25q256a_write+0x7c>
		cmd.tx_buf += cmd.buf_len;
     9d8:	9b05      	ldr	r3, [sp, #20]
     9da:	9a06      	ldr	r2, [sp, #24]
     9dc:	441a      	add	r2, r3
     9de:	9206      	str	r2, [sp, #24]
		address += cmd.buf_len;
     9e0:	4498      	add	r8, r3
	while (length) {
     9e2:	1aff      	subs	r7, r7, r3
     9e4:	d1d7      	bne.n	996 <n25q256a_write+0x4e>
	if (n25q->xip_mode) {
     9e6:	7b63      	ldrb	r3, [r4, #13]
     9e8:	b91b      	cbnz	r3, 9f2 <n25q256a_write+0xaa>
}
     9ea:	2000      	movs	r0, #0
     9ec:	b009      	add	sp, #36	; 0x24
     9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
     9f2:	2101      	movs	r1, #1
     9f4:	4620      	mov	r0, r4
     9f6:	4b02      	ldr	r3, [pc, #8]	; (a00 <n25q256a_write+0xb8>)
     9f8:	4798      	blx	r3
     9fa:	e7f6      	b.n	9ea <n25q256a_write+0xa2>
     9fc:	00000765 	.word	0x00000765
     a00:	000006c1 	.word	0x000006c1
     a04:	000008dd 	.word	0x000008dd
     a08:	00000d2d 	.word	0x00000d2d
     a0c:	00000685 	.word	0x00000685

00000a10 <n25q256a_erase>:
{
     a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a14:	b087      	sub	sp, #28
     a16:	4688      	mov	r8, r1
     a18:	4617      	mov	r7, r2
	struct qspi_dma_descriptor *descr = (struct qspi_dma_descriptor *)(me->io);
     a1a:	f8d0 9000 	ldr.w	r9, [r0]
	struct _qspi_command        cmd   = {
     a1e:	2300      	movs	r3, #0
     a20:	9300      	str	r3, [sp, #0]
     a22:	9301      	str	r3, [sp, #4]
     a24:	9302      	str	r3, [sp, #8]
     a26:	9303      	str	r3, [sp, #12]
     a28:	9304      	str	r3, [sp, #16]
     a2a:	9305      	str	r3, [sp, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
     a2c:	7b03      	ldrb	r3, [r0, #12]
     a2e:	2b00      	cmp	r3, #0
     a30:	bf14      	ite	ne
     a32:	2106      	movne	r1, #6
     a34:	2100      	moveq	r1, #0
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
     a36:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
     a3a:	bf2c      	ite	cs
     a3c:	2200      	movcs	r2, #0
     a3e:	2201      	movcc	r2, #1
	struct _qspi_command        cmd   = {
     a40:	f041 0310 	orr.w	r3, r1, #16
     a44:	f362 1345 	bfi	r3, r2, #5, #1
     a48:	f88d 3000 	strb.w	r3, [sp]
     a4c:	f04f 0300 	mov.w	r3, #0
     a50:	2202      	movs	r2, #2
     a52:	f362 1305 	bfi	r3, r2, #4, #2
     a56:	f88d 3001 	strb.w	r3, [sp, #1]
	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
     a5a:	ea47 0308 	orr.w	r3, r7, r8
     a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     a62:	2b00      	cmp	r3, #0
     a64:	d16f      	bne.n	b46 <n25q256a_erase+0x136>
     a66:	4604      	mov	r4, r0
	if (length >= N25Q_FLASH_SIZE) {
     a68:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
     a6c:	d207      	bcs.n	a7e <n25q256a_erase+0x6e>
		while (temp_len > 0) {
     a6e:	2f00      	cmp	r7, #0
     a70:	d052      	beq.n	b18 <n25q256a_erase+0x108>
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
     a72:	f8df b0dc 	ldr.w	fp, [pc, #220]	; b50 <n25q256a_erase+0x140>
				qspi_dma_serial_run_command(descr, &cmd);
     a76:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b54 <n25q256a_erase+0x144>
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
     a7a:	4e34      	ldr	r6, [pc, #208]	; (b4c <n25q256a_erase+0x13c>)
     a7c:	e02e      	b.n	adc <n25q256a_erase+0xcc>
		cmd.instruction = N25Q_BULK_ERASE;
     a7e:	23c7      	movs	r3, #199	; 0xc7
     a80:	f88d 3004 	strb.w	r3, [sp, #4]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
     a84:	2201      	movs	r2, #1
     a86:	4b32      	ldr	r3, [pc, #200]	; (b50 <n25q256a_erase+0x140>)
     a88:	4798      	blx	r3
		qspi_dma_serial_run_command(descr, &cmd);
     a8a:	4669      	mov	r1, sp
     a8c:	4648      	mov	r0, r9
     a8e:	4b31      	ldr	r3, [pc, #196]	; (b54 <n25q256a_erase+0x144>)
     a90:	4798      	blx	r3
	int32_t  rc        = ERR_NONE;
     a92:	2700      	movs	r7, #0
     a94:	e040      	b.n	b18 <n25q256a_erase+0x108>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
     a96:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
     a9a:	d33b      	bcc.n	b14 <n25q256a_erase+0x104>
				cmd.address     = temp_addr;
     a9c:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
     aa0:	2320      	movs	r3, #32
     aa2:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
     aa6:	ad06      	add	r5, sp, #24
     aa8:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
     aac:	2201      	movs	r2, #1
     aae:	f001 0107 	and.w	r1, r1, #7
     ab2:	4620      	mov	r0, r4
     ab4:	47d8      	blx	fp
				qspi_dma_serial_run_command(descr, &cmd);
     ab6:	4629      	mov	r1, r5
     ab8:	4648      	mov	r0, r9
     aba:	47d0      	blx	sl
				temp_addr += N25Q_SECTOR_SIZE;
     abc:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
				temp_len -= N25Q_SECTOR_SIZE;
     ac0:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
     ac4:	2570      	movs	r5, #112	; 0x70
     ac6:	f89d 1000 	ldrb.w	r1, [sp]
     aca:	462a      	mov	r2, r5
     acc:	f001 0107 	and.w	r1, r1, #7
     ad0:	4620      	mov	r0, r4
     ad2:	47b0      	blx	r6
     ad4:	f010 0f80 	tst.w	r0, #128	; 0x80
     ad8:	d0f5      	beq.n	ac6 <n25q256a_erase+0xb6>
		while (temp_len > 0) {
     ada:	b1ef      	cbz	r7, b18 <n25q256a_erase+0x108>
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
     adc:	fa1f f388 	uxth.w	r3, r8
     ae0:	2b00      	cmp	r3, #0
     ae2:	d1d8      	bne.n	a96 <n25q256a_erase+0x86>
     ae4:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
     ae8:	d3d5      	bcc.n	a96 <n25q256a_erase+0x86>
				cmd.address     = temp_addr;
     aea:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
     aee:	23d8      	movs	r3, #216	; 0xd8
     af0:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
     af4:	ad06      	add	r5, sp, #24
     af6:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
     afa:	2201      	movs	r2, #1
     afc:	f001 0107 	and.w	r1, r1, #7
     b00:	4620      	mov	r0, r4
     b02:	47d8      	blx	fp
				qspi_dma_serial_run_command(descr, &cmd);
     b04:	4629      	mov	r1, r5
     b06:	4648      	mov	r0, r9
     b08:	47d0      	blx	sl
				temp_addr += N25Q_BLOCK_SIZE;
     b0a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
				temp_len -= N25Q_BLOCK_SIZE;
     b0e:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
     b12:	e7d7      	b.n	ac4 <n25q256a_erase+0xb4>
				rc = ERR_INVALID_ARG;
     b14:	f06f 070c 	mvn.w	r7, #12
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
     b18:	2670      	movs	r6, #112	; 0x70
     b1a:	4d0c      	ldr	r5, [pc, #48]	; (b4c <n25q256a_erase+0x13c>)
     b1c:	f89d 1000 	ldrb.w	r1, [sp]
     b20:	4632      	mov	r2, r6
     b22:	f001 0107 	and.w	r1, r1, #7
     b26:	4620      	mov	r0, r4
     b28:	47a8      	blx	r5
     b2a:	f010 0f80 	tst.w	r0, #128	; 0x80
     b2e:	d0f5      	beq.n	b1c <n25q256a_erase+0x10c>
	if (n25q->xip_mode) {
     b30:	7b63      	ldrb	r3, [r4, #13]
     b32:	b91b      	cbnz	r3, b3c <n25q256a_erase+0x12c>
}
     b34:	4638      	mov	r0, r7
     b36:	b007      	add	sp, #28
     b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
     b3c:	2101      	movs	r1, #1
     b3e:	4620      	mov	r0, r4
     b40:	4b05      	ldr	r3, [pc, #20]	; (b58 <n25q256a_erase+0x148>)
     b42:	4798      	blx	r3
     b44:	e7f6      	b.n	b34 <n25q256a_erase+0x124>
		return ERR_INVALID_ARG;
     b46:	f06f 070c 	mvn.w	r7, #12
     b4a:	e7f3      	b.n	b34 <n25q256a_erase+0x124>
     b4c:	00000765 	.word	0x00000765
     b50:	000008dd 	.word	0x000008dd
     b54:	00000d2d 	.word	0x00000d2d
     b58:	000006c1 	.word	0x000006c1

00000b5c <n25q256a_switch_mode>:
{
     b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b5e:	4604      	mov	r4, r0
     b60:	460e      	mov	r6, r1
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     b62:	7b05      	ldrb	r5, [r0, #12]
     b64:	2d00      	cmp	r5, #0
     b66:	bf18      	it	ne
     b68:	2506      	movne	r5, #6
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
     b6a:	2265      	movs	r2, #101	; 0x65
     b6c:	4629      	mov	r1, r5
     b6e:	4b18      	ldr	r3, [pc, #96]	; (bd0 <n25q256a_switch_mode+0x74>)
     b70:	4798      	blx	r3
	if (n25q->quad_mode == mode) {
     b72:	7b23      	ldrb	r3, [r4, #12]
     b74:	42b3      	cmp	r3, r6
     b76:	d017      	beq.n	ba8 <n25q256a_switch_mode+0x4c>
     b78:	4607      	mov	r7, r0
	if (mode) {
     b7a:	b1b6      	cbz	r6, baa <n25q256a_switch_mode+0x4e>
		if (evcfg & 0x80) {
     b7c:	f010 0f80 	tst.w	r0, #128	; 0x80
     b80:	d012      	beq.n	ba8 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
     b82:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
     b84:	2201      	movs	r2, #1
     b86:	4629      	mov	r1, r5
     b88:	4620      	mov	r0, r4
     b8a:	4b12      	ldr	r3, [pc, #72]	; (bd4 <n25q256a_switch_mode+0x78>)
     b8c:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
     b8e:	f007 031f 	and.w	r3, r7, #31
     b92:	2261      	movs	r2, #97	; 0x61
     b94:	4629      	mov	r1, r5
     b96:	4620      	mov	r0, r4
     b98:	4d0f      	ldr	r5, [pc, #60]	; (bd8 <n25q256a_switch_mode+0x7c>)
     b9a:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     b9c:	2106      	movs	r1, #6
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
     b9e:	2265      	movs	r2, #101	; 0x65
     ba0:	4620      	mov	r0, r4
     ba2:	4b0b      	ldr	r3, [pc, #44]	; (bd0 <n25q256a_switch_mode+0x74>)
     ba4:	4798      	blx	r3
		n25q->quad_mode = mode;
     ba6:	7326      	strb	r6, [r4, #12]
     ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(evcfg & 0x80)) {
     baa:	f010 0f80 	tst.w	r0, #128	; 0x80
     bae:	d1fb      	bne.n	ba8 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
     bb0:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
     bb2:	2201      	movs	r2, #1
     bb4:	4629      	mov	r1, r5
     bb6:	4620      	mov	r0, r4
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <n25q256a_switch_mode+0x78>)
     bba:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
     bbc:	f047 03c0 	orr.w	r3, r7, #192	; 0xc0
     bc0:	2261      	movs	r2, #97	; 0x61
     bc2:	4629      	mov	r1, r5
     bc4:	4620      	mov	r0, r4
     bc6:	4d04      	ldr	r5, [pc, #16]	; (bd8 <n25q256a_switch_mode+0x7c>)
     bc8:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
     bca:	4631      	mov	r1, r6
     bcc:	e7e7      	b.n	b9e <n25q256a_switch_mode+0x42>
     bce:	bf00      	nop
     bd0:	00000765 	.word	0x00000765
     bd4:	000008dd 	.word	0x000008dd
     bd8:	0000081d 	.word	0x0000081d

00000bdc <n25q256a_construct>:
{
     bdc:	b570      	push	{r4, r5, r6, lr}
     bde:	4604      	mov	r4, r0
     be0:	4616      	mov	r6, r2
     be2:	461d      	mov	r5, r3
	spi_nor_flash_construct(me, io, &n25q256a_interface);
     be4:	4a06      	ldr	r2, [pc, #24]	; (c00 <n25q256a_construct+0x24>)
     be6:	4b07      	ldr	r3, [pc, #28]	; (c04 <n25q256a_construct+0x28>)
     be8:	4798      	blx	r3
	n25q->quad_mode    = 0;
     bea:	2300      	movs	r3, #0
     bec:	7323      	strb	r3, [r4, #12]
	n25q->xip_mode     = false;
     bee:	7363      	strb	r3, [r4, #13]
	n25q->pin_exit_xip = pin_exit_xip;
     bf0:	60a6      	str	r6, [r4, #8]
	n25q256a_switch_mode(me, quad_mode);
     bf2:	4629      	mov	r1, r5
     bf4:	4620      	mov	r0, r4
     bf6:	4b04      	ldr	r3, [pc, #16]	; (c08 <n25q256a_construct+0x2c>)
     bf8:	4798      	blx	r3
}
     bfa:	4620      	mov	r0, r4
     bfc:	bd70      	pop	{r4, r5, r6, pc}
     bfe:	bf00      	nop
     c00:	000029e8 	.word	0x000029e8
     c04:	00000c0d 	.word	0x00000c0d
     c08:	00000b5d 	.word	0x00000b5d

00000c0c <spi_nor_flash_construct>:
#include "spi_nor_flash.h"

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
     c0c:	6001      	str	r1, [r0, #0]
	me->interface = interface;
     c0e:	6042      	str	r2, [r0, #4]

	return me;
}
     c10:	4770      	bx	lr

00000c12 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c12:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     c16:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     c1a:	f3bf 8f5f 	dmb	sy
     c1e:	4770      	bx	lr

00000c20 <atomic_leave_critical>:
     c20:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     c24:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     c26:	f383 8810 	msr	PRIMASK, r3
     c2a:	4770      	bx	lr

00000c2c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     c2c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     c2e:	4b04      	ldr	r3, [pc, #16]	; (c40 <delay_us+0x14>)
     c30:	681c      	ldr	r4, [r3, #0]
     c32:	4b04      	ldr	r3, [pc, #16]	; (c44 <delay_us+0x18>)
     c34:	4798      	blx	r3
     c36:	4601      	mov	r1, r0
     c38:	4620      	mov	r0, r4
     c3a:	4b03      	ldr	r3, [pc, #12]	; (c48 <delay_us+0x1c>)
     c3c:	4798      	blx	r3
     c3e:	bd10      	pop	{r4, pc}
     c40:	2000008c 	.word	0x2000008c
     c44:	00000f19 	.word	0x00000f19
     c48:	00000f31 	.word	0x00000f31

00000c4c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     c4c:	b570      	push	{r4, r5, r6, lr}
     c4e:	460d      	mov	r5, r1
     c50:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     c52:	4604      	mov	r4, r0
     c54:	b160      	cbz	r0, c70 <io_write+0x24>
     c56:	1c08      	adds	r0, r1, #0
     c58:	bf18      	it	ne
     c5a:	2001      	movne	r0, #1
     c5c:	2234      	movs	r2, #52	; 0x34
     c5e:	4905      	ldr	r1, [pc, #20]	; (c74 <io_write+0x28>)
     c60:	4b05      	ldr	r3, [pc, #20]	; (c78 <io_write+0x2c>)
     c62:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     c64:	6823      	ldr	r3, [r4, #0]
     c66:	4632      	mov	r2, r6
     c68:	4629      	mov	r1, r5
     c6a:	4620      	mov	r0, r4
     c6c:	4798      	blx	r3
}
     c6e:	bd70      	pop	{r4, r5, r6, pc}
     c70:	2000      	movs	r0, #0
     c72:	e7f3      	b.n	c5c <io_write+0x10>
     c74:	000029fc 	.word	0x000029fc
     c78:	00000ed5 	.word	0x00000ed5

00000c7c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     c7c:	b570      	push	{r4, r5, r6, lr}
     c7e:	460d      	mov	r5, r1
     c80:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     c82:	4604      	mov	r4, r0
     c84:	b160      	cbz	r0, ca0 <io_read+0x24>
     c86:	1c08      	adds	r0, r1, #0
     c88:	bf18      	it	ne
     c8a:	2001      	movne	r0, #1
     c8c:	223d      	movs	r2, #61	; 0x3d
     c8e:	4905      	ldr	r1, [pc, #20]	; (ca4 <io_read+0x28>)
     c90:	4b05      	ldr	r3, [pc, #20]	; (ca8 <io_read+0x2c>)
     c92:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     c94:	6863      	ldr	r3, [r4, #4]
     c96:	4632      	mov	r2, r6
     c98:	4629      	mov	r1, r5
     c9a:	4620      	mov	r0, r4
     c9c:	4798      	blx	r3
}
     c9e:	bd70      	pop	{r4, r5, r6, pc}
     ca0:	2000      	movs	r0, #0
     ca2:	e7f3      	b.n	c8c <io_read+0x10>
     ca4:	000029fc 	.word	0x000029fc
     ca8:	00000ed5 	.word	0x00000ed5

00000cac <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
     cac:	b538      	push	{r3, r4, r5, lr}
     cae:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     cb0:	4605      	mov	r5, r0
     cb2:	b158      	cbz	r0, ccc <qspi_dma_init+0x20>
     cb4:	1c08      	adds	r0, r1, #0
     cb6:	bf18      	it	ne
     cb8:	2001      	movne	r0, #1
     cba:	2231      	movs	r2, #49	; 0x31
     cbc:	4904      	ldr	r1, [pc, #16]	; (cd0 <qspi_dma_init+0x24>)
     cbe:	4b05      	ldr	r3, [pc, #20]	; (cd4 <qspi_dma_init+0x28>)
     cc0:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
     cc2:	4621      	mov	r1, r4
     cc4:	4628      	mov	r0, r5
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <qspi_dma_init+0x2c>)
     cc8:	4798      	blx	r3
}
     cca:	bd38      	pop	{r3, r4, r5, pc}
     ccc:	2000      	movs	r0, #0
     cce:	e7f4      	b.n	cba <qspi_dma_init+0xe>
     cd0:	00002a10 	.word	0x00002a10
     cd4:	00000ed5 	.word	0x00000ed5
     cd8:	00001331 	.word	0x00001331

00000cdc <qspi_dma_enable>:

	return _qspi_dma_deinit(&qspi->dev);
}

int32_t qspi_dma_enable(struct qspi_dma_descriptor *qspi)
{
     cdc:	b510      	push	{r4, lr}
	ASSERT(qspi);
     cde:	4604      	mov	r4, r0
     ce0:	223f      	movs	r2, #63	; 0x3f
     ce2:	4905      	ldr	r1, [pc, #20]	; (cf8 <qspi_dma_enable+0x1c>)
     ce4:	3000      	adds	r0, #0
     ce6:	bf18      	it	ne
     ce8:	2001      	movne	r0, #1
     cea:	4b04      	ldr	r3, [pc, #16]	; (cfc <qspi_dma_enable+0x20>)
     cec:	4798      	blx	r3

	return _qspi_dma_enable(&qspi->dev);
     cee:	4620      	mov	r0, r4
     cf0:	4b03      	ldr	r3, [pc, #12]	; (d00 <qspi_dma_enable+0x24>)
     cf2:	4798      	blx	r3
}
     cf4:	bd10      	pop	{r4, pc}
     cf6:	bf00      	nop
     cf8:	00002a10 	.word	0x00002a10
     cfc:	00000ed5 	.word	0x00000ed5
     d00:	000013a9 	.word	0x000013a9

00000d04 <qspi_dma_disable>:

int32_t qspi_dma_disable(struct qspi_dma_descriptor *qspi)
{
     d04:	b510      	push	{r4, lr}
	ASSERT(qspi);
     d06:	4604      	mov	r4, r0
     d08:	2246      	movs	r2, #70	; 0x46
     d0a:	4905      	ldr	r1, [pc, #20]	; (d20 <qspi_dma_disable+0x1c>)
     d0c:	3000      	adds	r0, #0
     d0e:	bf18      	it	ne
     d10:	2001      	movne	r0, #1
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <qspi_dma_disable+0x20>)
     d14:	4798      	blx	r3

	return _qspi_dma_disable(&qspi->dev);
     d16:	4620      	mov	r0, r4
     d18:	4b03      	ldr	r3, [pc, #12]	; (d28 <qspi_dma_disable+0x24>)
     d1a:	4798      	blx	r3
}
     d1c:	bd10      	pop	{r4, pc}
     d1e:	bf00      	nop
     d20:	00002a10 	.word	0x00002a10
     d24:	00000ed5 	.word	0x00000ed5
     d28:	000013b3 	.word	0x000013b3

00000d2c <qspi_dma_serial_run_command>:

int32_t qspi_dma_serial_run_command(struct qspi_dma_descriptor *qspi, const struct _qspi_command *cmd)
{
     d2c:	b538      	push	{r3, r4, r5, lr}
     d2e:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
     d30:	4605      	mov	r5, r0
     d32:	b158      	cbz	r0, d4c <qspi_dma_serial_run_command+0x20>
     d34:	1c08      	adds	r0, r1, #0
     d36:	bf18      	it	ne
     d38:	2001      	movne	r0, #1
     d3a:	224d      	movs	r2, #77	; 0x4d
     d3c:	4904      	ldr	r1, [pc, #16]	; (d50 <qspi_dma_serial_run_command+0x24>)
     d3e:	4b05      	ldr	r3, [pc, #20]	; (d54 <qspi_dma_serial_run_command+0x28>)
     d40:	4798      	blx	r3

	return _qspi_dma_serial_run_command(&qspi->dev, cmd);
     d42:	4621      	mov	r1, r4
     d44:	4628      	mov	r0, r5
     d46:	4b04      	ldr	r3, [pc, #16]	; (d58 <qspi_dma_serial_run_command+0x2c>)
     d48:	4798      	blx	r3
}
     d4a:	bd38      	pop	{r3, r4, r5, pc}
     d4c:	2000      	movs	r0, #0
     d4e:	e7f4      	b.n	d3a <qspi_dma_serial_run_command+0xe>
     d50:	00002a10 	.word	0x00002a10
     d54:	00000ed5 	.word	0x00000ed5
     d58:	000013bd 	.word	0x000013bd

00000d5c <qspi_dma_register_callback>:

void qspi_dma_register_callback(struct qspi_dma_descriptor *qspi, const enum _qspi_dma_cb_type type, _qspi_dma_cb_t cb)
{
     d5c:	b570      	push	{r4, r5, r6, lr}
     d5e:	460d      	mov	r5, r1
     d60:	4616      	mov	r6, r2
	ASSERT(qspi);
     d62:	4604      	mov	r4, r0
     d64:	2254      	movs	r2, #84	; 0x54
     d66:	4906      	ldr	r1, [pc, #24]	; (d80 <qspi_dma_register_callback+0x24>)
     d68:	3000      	adds	r0, #0
     d6a:	bf18      	it	ne
     d6c:	2001      	movne	r0, #1
     d6e:	4b05      	ldr	r3, [pc, #20]	; (d84 <qspi_dma_register_callback+0x28>)
     d70:	4798      	blx	r3

	_qspi_dma_register_callback(&qspi->dev, type, cb);
     d72:	4632      	mov	r2, r6
     d74:	4629      	mov	r1, r5
     d76:	4620      	mov	r0, r4
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <qspi_dma_register_callback+0x2c>)
     d7a:	4798      	blx	r3
     d7c:	bd70      	pop	{r4, r5, r6, pc}
     d7e:	bf00      	nop
     d80:	00002a10 	.word	0x00002a10
     d84:	00000ed5 	.word	0x00000ed5
     d88:	000014a5 	.word	0x000014a5

00000d8c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     d90:	460f      	mov	r7, r1
     d92:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     d94:	4604      	mov	r4, r0
     d96:	b328      	cbz	r0, de4 <usart_sync_write+0x58>
     d98:	b331      	cbz	r1, de8 <usart_sync_write+0x5c>
     d9a:	1c10      	adds	r0, r2, #0
     d9c:	bf18      	it	ne
     d9e:	2001      	movne	r0, #1
     da0:	22f1      	movs	r2, #241	; 0xf1
     da2:	4912      	ldr	r1, [pc, #72]	; (dec <usart_sync_write+0x60>)
     da4:	4b12      	ldr	r3, [pc, #72]	; (df0 <usart_sync_write+0x64>)
     da6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     da8:	3408      	adds	r4, #8
     daa:	4d12      	ldr	r5, [pc, #72]	; (df4 <usart_sync_write+0x68>)
     dac:	4620      	mov	r0, r4
     dae:	47a8      	blx	r5
     db0:	2800      	cmp	r0, #0
     db2:	d0fb      	beq.n	dac <usart_sync_write+0x20>
     db4:	3f01      	subs	r7, #1
     db6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     db8:	f8df 9040 	ldr.w	r9, [pc, #64]	; dfc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     dbc:	4d0d      	ldr	r5, [pc, #52]	; (df4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     dbe:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     dc2:	4620      	mov	r0, r4
     dc4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     dc6:	4620      	mov	r0, r4
     dc8:	47a8      	blx	r5
     dca:	2800      	cmp	r0, #0
     dcc:	d0fb      	beq.n	dc6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     dce:	3601      	adds	r6, #1
     dd0:	4546      	cmp	r6, r8
     dd2:	d3f4      	bcc.n	dbe <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     dd4:	4d08      	ldr	r5, [pc, #32]	; (df8 <usart_sync_write+0x6c>)
     dd6:	4620      	mov	r0, r4
     dd8:	47a8      	blx	r5
     dda:	2800      	cmp	r0, #0
     ddc:	d0fb      	beq.n	dd6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     dde:	4630      	mov	r0, r6
     de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     de4:	2000      	movs	r0, #0
     de6:	e7db      	b.n	da0 <usart_sync_write+0x14>
     de8:	2000      	movs	r0, #0
     dea:	e7d9      	b.n	da0 <usart_sync_write+0x14>
     dec:	00002a2c 	.word	0x00002a2c
     df0:	00000ed5 	.word	0x00000ed5
     df4:	00001663 	.word	0x00001663
     df8:	0000166d 	.word	0x0000166d
     dfc:	00001655 	.word	0x00001655

00000e00 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e04:	460f      	mov	r7, r1
     e06:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     e08:	4604      	mov	r4, r0
     e0a:	b1e0      	cbz	r0, e46 <usart_sync_read+0x46>
     e0c:	b1e9      	cbz	r1, e4a <usart_sync_read+0x4a>
     e0e:	1c10      	adds	r0, r2, #0
     e10:	bf18      	it	ne
     e12:	2001      	movne	r0, #1
     e14:	f44f 7286 	mov.w	r2, #268	; 0x10c
     e18:	490d      	ldr	r1, [pc, #52]	; (e50 <usart_sync_read+0x50>)
     e1a:	4b0e      	ldr	r3, [pc, #56]	; (e54 <usart_sync_read+0x54>)
     e1c:	4798      	blx	r3
     e1e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     e20:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     e22:	3408      	adds	r4, #8
     e24:	4d0c      	ldr	r5, [pc, #48]	; (e58 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     e26:	f8df 9034 	ldr.w	r9, [pc, #52]	; e5c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     e2a:	4620      	mov	r0, r4
     e2c:	47a8      	blx	r5
     e2e:	2800      	cmp	r0, #0
     e30:	d0fb      	beq.n	e2a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     e32:	4620      	mov	r0, r4
     e34:	47c8      	blx	r9
     e36:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     e3a:	3601      	adds	r6, #1
     e3c:	4546      	cmp	r6, r8
     e3e:	d3f4      	bcc.n	e2a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     e40:	4630      	mov	r0, r6
     e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     e46:	2000      	movs	r0, #0
     e48:	e7e4      	b.n	e14 <usart_sync_read+0x14>
     e4a:	2000      	movs	r0, #0
     e4c:	e7e2      	b.n	e14 <usart_sync_read+0x14>
     e4e:	bf00      	nop
     e50:	00002a2c 	.word	0x00002a2c
     e54:	00000ed5 	.word	0x00000ed5
     e58:	00001677 	.word	0x00001677
     e5c:	0000165b 	.word	0x0000165b

00000e60 <usart_sync_init>:
{
     e60:	b538      	push	{r3, r4, r5, lr}
     e62:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     e64:	4604      	mov	r4, r0
     e66:	b198      	cbz	r0, e90 <usart_sync_init+0x30>
     e68:	1c08      	adds	r0, r1, #0
     e6a:	bf18      	it	ne
     e6c:	2001      	movne	r0, #1
     e6e:	2234      	movs	r2, #52	; 0x34
     e70:	4908      	ldr	r1, [pc, #32]	; (e94 <usart_sync_init+0x34>)
     e72:	4b09      	ldr	r3, [pc, #36]	; (e98 <usart_sync_init+0x38>)
     e74:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     e76:	4629      	mov	r1, r5
     e78:	f104 0008 	add.w	r0, r4, #8
     e7c:	4b07      	ldr	r3, [pc, #28]	; (e9c <usart_sync_init+0x3c>)
     e7e:	4798      	blx	r3
	if (init_status) {
     e80:	4603      	mov	r3, r0
     e82:	b918      	cbnz	r0, e8c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     e84:	4a06      	ldr	r2, [pc, #24]	; (ea0 <usart_sync_init+0x40>)
     e86:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     e88:	4a06      	ldr	r2, [pc, #24]	; (ea4 <usart_sync_init+0x44>)
     e8a:	6022      	str	r2, [r4, #0]
}
     e8c:	4618      	mov	r0, r3
     e8e:	bd38      	pop	{r3, r4, r5, pc}
     e90:	2000      	movs	r0, #0
     e92:	e7ec      	b.n	e6e <usart_sync_init+0xe>
     e94:	00002a2c 	.word	0x00002a2c
     e98:	00000ed5 	.word	0x00000ed5
     e9c:	00001615 	.word	0x00001615
     ea0:	00000e01 	.word	0x00000e01
     ea4:	00000d8d 	.word	0x00000d8d

00000ea8 <usart_sync_enable>:
{
     ea8:	b510      	push	{r4, lr}
	ASSERT(descr);
     eaa:	4604      	mov	r4, r0
     eac:	2253      	movs	r2, #83	; 0x53
     eae:	4906      	ldr	r1, [pc, #24]	; (ec8 <usart_sync_enable+0x20>)
     eb0:	3000      	adds	r0, #0
     eb2:	bf18      	it	ne
     eb4:	2001      	movne	r0, #1
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <usart_sync_enable+0x24>)
     eb8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     eba:	f104 0008 	add.w	r0, r4, #8
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <usart_sync_enable+0x28>)
     ec0:	4798      	blx	r3
}
     ec2:	2000      	movs	r0, #0
     ec4:	bd10      	pop	{r4, pc}
     ec6:	bf00      	nop
     ec8:	00002a2c 	.word	0x00002a2c
     ecc:	00000ed5 	.word	0x00000ed5
     ed0:	00001641 	.word	0x00001641

00000ed4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ed4:	b900      	cbnz	r0, ed8 <assert+0x4>
		__asm("BKPT #0");
     ed6:	be00      	bkpt	0x0000
     ed8:	4770      	bx	lr
	...

00000edc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     edc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     ede:	4a06      	ldr	r2, [pc, #24]	; (ef8 <_sbrk+0x1c>)
     ee0:	6812      	ldr	r2, [r2, #0]
     ee2:	b122      	cbz	r2, eee <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     ee4:	4a04      	ldr	r2, [pc, #16]	; (ef8 <_sbrk+0x1c>)
     ee6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     ee8:	4403      	add	r3, r0
     eea:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     eec:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     eee:	4903      	ldr	r1, [pc, #12]	; (efc <_sbrk+0x20>)
     ef0:	4a01      	ldr	r2, [pc, #4]	; (ef8 <_sbrk+0x1c>)
     ef2:	6011      	str	r1, [r2, #0]
     ef4:	e7f6      	b.n	ee4 <_sbrk+0x8>
     ef6:	bf00      	nop
     ef8:	20000090 	.word	0x20000090
     efc:	20010a68 	.word	0x20010a68

00000f00 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     f00:	f04f 30ff 	mov.w	r0, #4294967295
     f04:	4770      	bx	lr

00000f06 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     f0a:	604b      	str	r3, [r1, #4]

	return 0;
}
     f0c:	2000      	movs	r0, #0
     f0e:	4770      	bx	lr

00000f10 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     f10:	2001      	movs	r0, #1
     f12:	4770      	bx	lr

00000f14 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     f14:	2000      	movs	r0, #0
     f16:	4770      	bx	lr

00000f18 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
	case 8:
		return (us * (freq / 100000) + 29) / 30;
     f18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     f1c:	00c0      	lsls	r0, r0, #3
     f1e:	301d      	adds	r0, #29
     f20:	4b02      	ldr	r3, [pc, #8]	; (f2c <_get_cycles_for_us+0x14>)
     f22:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     f26:	0900      	lsrs	r0, r0, #4
     f28:	4770      	bx	lr
     f2a:	bf00      	nop
     f2c:	88888889 	.word	0x88888889

00000f30 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     f30:	3901      	subs	r1, #1
     f32:	d8fd      	bhi.n	f30 <_delay_cycles>
     f34:	4770      	bx	lr
     f36:	bf00      	nop

00000f38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f38:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f3a:	4a0d      	ldr	r2, [pc, #52]	; (f70 <_init_chip+0x38>)
     f3c:	8813      	ldrh	r3, [r2, #0]
     f3e:	b29b      	uxth	r3, r3
     f40:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f42:	4b0c      	ldr	r3, [pc, #48]	; (f74 <_init_chip+0x3c>)
     f44:	4798      	blx	r3
	_oscctrl_init_sources();
     f46:	4b0c      	ldr	r3, [pc, #48]	; (f78 <_init_chip+0x40>)
     f48:	4798      	blx	r3
	_mclk_init();
     f4a:	4b0c      	ldr	r3, [pc, #48]	; (f7c <_init_chip+0x44>)
     f4c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     f4e:	2002      	movs	r0, #2
     f50:	4c0b      	ldr	r4, [pc, #44]	; (f80 <_init_chip+0x48>)
     f52:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     f54:	4b0b      	ldr	r3, [pc, #44]	; (f84 <_init_chip+0x4c>)
     f56:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f58:	f640 70fd 	movw	r0, #4093	; 0xffd
     f5c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     f5e:	4a0a      	ldr	r2, [pc, #40]	; (f88 <_init_chip+0x50>)
     f60:	6913      	ldr	r3, [r2, #16]
     f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     f66:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     f68:	4b08      	ldr	r3, [pc, #32]	; (f8c <_init_chip+0x54>)
     f6a:	4798      	blx	r3
     f6c:	bd10      	pop	{r4, pc}
     f6e:	bf00      	nop
     f70:	41004000 	.word	0x41004000
     f74:	00001279 	.word	0x00001279
     f78:	0000128d 	.word	0x0000128d
     f7c:	0000126d 	.word	0x0000126d
     f80:	0000122d 	.word	0x0000122d
     f84:	000012a9 	.word	0x000012a9
     f88:	40000800 	.word	0x40000800
     f8c:	00000ff5 	.word	0x00000ff5

00000f90 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     f90:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
     f92:	4a16      	ldr	r2, [pc, #88]	; (fec <_dmac_handler+0x5c>)
     f94:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     f96:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     f9a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
     f9e:	4814      	ldr	r0, [pc, #80]	; (ff0 <_dmac_handler+0x60>)
     fa0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	tmp = ((Dmac *)hw)->INTPEND.reg;
     fa4:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     fa6:	f412 7f80 	tst.w	r2, #256	; 0x100
     faa:	d105      	bne.n	fb8 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     fac:	4a0f      	ldr	r2, [pc, #60]	; (fec <_dmac_handler+0x5c>)
     fae:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     fb0:	f412 7f00 	tst.w	r2, #512	; 0x200
     fb4:	d10b      	bne.n	fce <_dmac_handler+0x3e>
     fb6:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     fb8:	011a      	lsls	r2, r3, #4
     fba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     fbe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fc2:	2101      	movs	r1, #1
     fc4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     fc8:	6843      	ldr	r3, [r0, #4]
     fca:	4798      	blx	r3
     fcc:	bd08      	pop	{r3, pc}
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
     fce:	011a      	lsls	r2, r3, #4
     fd0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     fd4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fd8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     fe0:	4a03      	ldr	r2, [pc, #12]	; (ff0 <_dmac_handler+0x60>)
     fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     fe6:	4798      	blx	r3
	}
}
     fe8:	e7e5      	b.n	fb6 <_dmac_handler+0x26>
     fea:	bf00      	nop
     fec:	4100a000 	.word	0x4100a000
     ff0:	20000094 	.word	0x20000094

00000ff4 <_dma_init>:
{
     ff4:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     ff6:	4a31      	ldr	r2, [pc, #196]	; (10bc <_dma_init+0xc8>)
     ff8:	8813      	ldrh	r3, [r2, #0]
     ffa:	f023 0302 	bic.w	r3, r3, #2
     ffe:	041b      	lsls	r3, r3, #16
    1000:	0c1b      	lsrs	r3, r3, #16
    1002:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1004:	8853      	ldrh	r3, [r2, #2]
    1006:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    100a:	041b      	lsls	r3, r3, #16
    100c:	0c1b      	lsrs	r3, r3, #16
    100e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1010:	8813      	ldrh	r3, [r2, #0]
    1012:	b29b      	uxth	r3, r3
    1014:	f043 0301 	orr.w	r3, r3, #1
    1018:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    101a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    101c:	f013 0f01 	tst.w	r3, #1
    1020:	d1fb      	bne.n	101a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1022:	4b26      	ldr	r3, [pc, #152]	; (10bc <_dma_init+0xc8>)
    1024:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1028:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    102a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    102c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1030:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1032:	2100      	movs	r1, #0
    1034:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1036:	4a22      	ldr	r2, [pc, #136]	; (10c0 <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1038:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    103a:	4a22      	ldr	r2, [pc, #136]	; (10c4 <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    103c:	639a      	str	r2, [r3, #56]	; 0x38
    103e:	4b22      	ldr	r3, [pc, #136]	; (10c8 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1040:	4c1f      	ldr	r4, [pc, #124]	; (10c0 <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1042:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1044:	681d      	ldr	r5, [r3, #0]
    1046:	0108      	lsls	r0, r1, #4
    1048:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    104c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1050:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1052:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1054:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1058:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    105a:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    105e:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1060:	1822      	adds	r2, r4, r0
    1062:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1064:	60d6      	str	r6, [r2, #12]
    1066:	3101      	adds	r1, #1
    1068:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    106a:	2920      	cmp	r1, #32
    106c:	d1ea      	bne.n	1044 <_dma_init+0x50>
    106e:	231f      	movs	r3, #31
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1070:	2001      	movs	r0, #1
    1072:	4916      	ldr	r1, [pc, #88]	; (10cc <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1074:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1076:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    107a:	d00b      	beq.n	1094 <_dma_init+0xa0>
    107c:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    107e:	2b24      	cmp	r3, #36	; 0x24
    1080:	d1f8      	bne.n	1074 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1082:	4a0e      	ldr	r2, [pc, #56]	; (10bc <_dma_init+0xc8>)
    1084:	8813      	ldrh	r3, [r2, #0]
    1086:	b29b      	uxth	r3, r3
    1088:	f043 0302 	orr.w	r3, r3, #2
    108c:	8013      	strh	r3, [r2, #0]
}
    108e:	2000      	movs	r0, #0
    1090:	bc70      	pop	{r4, r5, r6}
    1092:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1094:	095c      	lsrs	r4, r3, #5
    1096:	f002 021f 	and.w	r2, r2, #31
    109a:	fa00 f202 	lsl.w	r2, r0, r2
    109e:	f104 0520 	add.w	r5, r4, #32
    10a2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    10a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10aa:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10ae:	f104 0560 	add.w	r5, r4, #96	; 0x60
    10b2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10b6:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    10ba:	e7df      	b.n	107c <_dma_init+0x88>
    10bc:	4100a000 	.word	0x4100a000
    10c0:	20000650 	.word	0x20000650
    10c4:	20000850 	.word	0x20000850
    10c8:	00002a48 	.word	0x00002a48
    10cc:	e000e100 	.word	0xe000e100

000010d0 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    10d0:	b991      	cbnz	r1, 10f8 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    10d2:	b942      	cbnz	r2, 10e6 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    10d4:	0100      	lsls	r0, r0, #4
    10d6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    10da:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    10de:	2302      	movs	r3, #2
    10e0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    10e4:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    10e6:	0100      	lsls	r0, r0, #4
    10e8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    10ec:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    10f0:	2302      	movs	r3, #2
    10f2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    10f6:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    10f8:	2901      	cmp	r1, #1
    10fa:	d000      	beq.n	10fe <_dma_set_irq_state+0x2e>
    10fc:	4770      	bx	lr
	if (value == 0x0) {
    10fe:	b142      	cbz	r2, 1112 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    1100:	0100      	lsls	r0, r0, #4
    1102:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1106:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    110a:	2301      	movs	r3, #1
    110c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    1110:	e7f4      	b.n	10fc <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    1112:	0100      	lsls	r0, r0, #4
    1114:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1118:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    111c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    1120:	4770      	bx	lr
	...

00001124 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1124:	4b02      	ldr	r3, [pc, #8]	; (1130 <_dma_set_destination_address+0xc>)
    1126:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    112a:	6081      	str	r1, [r0, #8]
}
    112c:	2000      	movs	r0, #0
    112e:	4770      	bx	lr
    1130:	20000650 	.word	0x20000650

00001134 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1134:	4b02      	ldr	r3, [pc, #8]	; (1140 <_dma_set_source_address+0xc>)
    1136:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    113a:	6041      	str	r1, [r0, #4]
}
    113c:	2000      	movs	r0, #0
    113e:	4770      	bx	lr
    1140:	20000650 	.word	0x20000650

00001144 <_dma_set_data_amount>:
{
    1144:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    1146:	4c14      	ldr	r4, [pc, #80]	; (1198 <_dma_set_data_amount+0x54>)
    1148:	0102      	lsls	r2, r0, #4
    114a:	18a3      	adds	r3, r4, r2
    114c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    114e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1150:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1154:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    1156:	f412 6f00 	tst.w	r2, #2048	; 0x800
    115a:	d006      	beq.n	116a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    115c:	fa01 f403 	lsl.w	r4, r1, r3
    1160:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1162:	4a0d      	ldr	r2, [pc, #52]	; (1198 <_dma_set_data_amount+0x54>)
    1164:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1168:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    116a:	4c0b      	ldr	r4, [pc, #44]	; (1198 <_dma_set_data_amount+0x54>)
    116c:	0102      	lsls	r2, r0, #4
    116e:	18a5      	adds	r5, r4, r2
    1170:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1172:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    1174:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1178:	d005      	beq.n	1186 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    117a:	fa01 f303 	lsl.w	r3, r1, r3
    117e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1180:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1184:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1186:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1188:	4b03      	ldr	r3, [pc, #12]	; (1198 <_dma_set_data_amount+0x54>)
    118a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    118e:	8041      	strh	r1, [r0, #2]
}
    1190:	2000      	movs	r0, #0
    1192:	bc30      	pop	{r4, r5}
    1194:	4770      	bx	lr
    1196:	bf00      	nop
    1198:	20000650 	.word	0x20000650

0000119c <_dma_enable_transaction>:
{
    119c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    119e:	4c0d      	ldr	r4, [pc, #52]	; (11d4 <_dma_enable_transaction+0x38>)
    11a0:	0103      	lsls	r3, r0, #4
    11a2:	5ae2      	ldrh	r2, [r4, r3]
    11a4:	b292      	uxth	r2, r2
    11a6:	f042 0201 	orr.w	r2, r2, #1
    11aa:	52e2      	strh	r2, [r4, r3]
    11ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    11b0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    11b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    11b6:	f042 0202 	orr.w	r2, r2, #2
    11ba:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    11bc:	b131      	cbz	r1, 11cc <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    11be:	4a06      	ldr	r2, [pc, #24]	; (11d8 <_dma_enable_transaction+0x3c>)
    11c0:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    11c2:	2301      	movs	r3, #1
    11c4:	fa03 f000 	lsl.w	r0, r3, r0
    11c8:	4308      	orrs	r0, r1
    11ca:	6110      	str	r0, [r2, #16]
}
    11cc:	2000      	movs	r0, #0
    11ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    11d2:	4770      	bx	lr
    11d4:	20000650 	.word	0x20000650
    11d8:	4100a000 	.word	0x4100a000

000011dc <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    11dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    11e0:	4b02      	ldr	r3, [pc, #8]	; (11ec <_dma_get_channel_resource+0x10>)
    11e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    11e6:	6001      	str	r1, [r0, #0]
}
    11e8:	2000      	movs	r0, #0
    11ea:	4770      	bx	lr
    11ec:	20000094 	.word	0x20000094

000011f0 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    11f0:	b508      	push	{r3, lr}
	_dmac_handler();
    11f2:	4b01      	ldr	r3, [pc, #4]	; (11f8 <DMAC_0_Handler+0x8>)
    11f4:	4798      	blx	r3
    11f6:	bd08      	pop	{r3, pc}
    11f8:	00000f91 	.word	0x00000f91

000011fc <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    11fc:	b508      	push	{r3, lr}
	_dmac_handler();
    11fe:	4b01      	ldr	r3, [pc, #4]	; (1204 <DMAC_1_Handler+0x8>)
    1200:	4798      	blx	r3
    1202:	bd08      	pop	{r3, pc}
    1204:	00000f91 	.word	0x00000f91

00001208 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1208:	b508      	push	{r3, lr}
	_dmac_handler();
    120a:	4b01      	ldr	r3, [pc, #4]	; (1210 <DMAC_2_Handler+0x8>)
    120c:	4798      	blx	r3
    120e:	bd08      	pop	{r3, pc}
    1210:	00000f91 	.word	0x00000f91

00001214 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1214:	b508      	push	{r3, lr}
	_dmac_handler();
    1216:	4b01      	ldr	r3, [pc, #4]	; (121c <DMAC_3_Handler+0x8>)
    1218:	4798      	blx	r3
    121a:	bd08      	pop	{r3, pc}
    121c:	00000f91 	.word	0x00000f91

00001220 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1220:	b508      	push	{r3, lr}
	_dmac_handler();
    1222:	4b01      	ldr	r3, [pc, #4]	; (1228 <DMAC_4_Handler+0x8>)
    1224:	4798      	blx	r3
    1226:	bd08      	pop	{r3, pc}
    1228:	00000f91 	.word	0x00000f91

0000122c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    122c:	f010 0f01 	tst.w	r0, #1
    1230:	d008      	beq.n	1244 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1232:	4a0b      	ldr	r2, [pc, #44]	; (1260 <_gclk_init_generators_by_fref+0x34>)
    1234:	4b0b      	ldr	r3, [pc, #44]	; (1264 <_gclk_init_generators_by_fref+0x38>)
    1236:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1238:	4619      	mov	r1, r3
    123a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    123e:	684b      	ldr	r3, [r1, #4]
    1240:	4213      	tst	r3, r2
    1242:	d1fc      	bne.n	123e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1244:	f010 0f02 	tst.w	r0, #2
    1248:	d008      	beq.n	125c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    124a:	4a07      	ldr	r2, [pc, #28]	; (1268 <_gclk_init_generators_by_fref+0x3c>)
    124c:	4b05      	ldr	r3, [pc, #20]	; (1264 <_gclk_init_generators_by_fref+0x38>)
    124e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1250:	4619      	mov	r1, r3
    1252:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1256:	684b      	ldr	r3, [r1, #4]
    1258:	4213      	tst	r3, r2
    125a:	d1fc      	bne.n	1256 <_gclk_init_generators_by_fref+0x2a>
    125c:	4770      	bx	lr
    125e:	bf00      	nop
    1260:	00010101 	.word	0x00010101
    1264:	40001c00 	.word	0x40001c00
    1268:	00060101 	.word	0x00060101

0000126c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    126c:	2201      	movs	r2, #1
    126e:	4b01      	ldr	r3, [pc, #4]	; (1274 <_mclk_init+0x8>)
    1270:	715a      	strb	r2, [r3, #5]
    1272:	4770      	bx	lr
    1274:	40000800 	.word	0x40000800

00001278 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1278:	4b03      	ldr	r3, [pc, #12]	; (1288 <_osc32kctrl_init_sources+0x10>)
    127a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    127c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1280:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1282:	2201      	movs	r2, #1
    1284:	741a      	strb	r2, [r3, #16]
    1286:	4770      	bx	lr
    1288:	40001400 	.word	0x40001400

0000128c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    128c:	4a04      	ldr	r2, [pc, #16]	; (12a0 <_oscctrl_init_sources+0x14>)
    128e:	4b05      	ldr	r3, [pc, #20]	; (12a4 <_oscctrl_init_sources+0x18>)
    1290:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1292:	461a      	mov	r2, r3
    1294:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1296:	f013 0f02 	tst.w	r3, #2
    129a:	d0fb      	beq.n	1294 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    129c:	4770      	bx	lr
    129e:	bf00      	nop
    12a0:	03002606 	.word	0x03002606
    12a4:	40001000 	.word	0x40001000

000012a8 <_oscctrl_init_referenced_generators>:
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    12a8:	2241      	movs	r2, #65	; 0x41
    12aa:	4b10      	ldr	r3, [pc, #64]	; (12ec <_oscctrl_init_referenced_generators+0x44>)
    12ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    12b0:	223b      	movs	r2, #59	; 0x3b
    12b2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    12b6:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    12b8:	461a      	mov	r2, r3
    12ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    12bc:	f013 0f06 	tst.w	r3, #6
    12c0:	d1fb      	bne.n	12ba <_oscctrl_init_referenced_generators+0x12>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    12c2:	4b0b      	ldr	r3, [pc, #44]	; (12f0 <_oscctrl_init_referenced_generators+0x48>)
    12c4:	2200      	movs	r2, #0
    12c6:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    12c8:	2202      	movs	r2, #2
    12ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    12ce:	461a      	mov	r2, r3
    12d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    12d2:	f013 0f02 	tst.w	r3, #2
    12d6:	d1fb      	bne.n	12d0 <_oscctrl_init_referenced_generators+0x28>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    12d8:	4b05      	ldr	r3, [pc, #20]	; (12f0 <_oscctrl_init_referenced_generators+0x48>)
    12da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    12dc:	f012 0f01 	tst.w	r2, #1
    12e0:	d103      	bne.n	12ea <_oscctrl_init_referenced_generators+0x42>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    12e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    12e4:	f012 0f02 	tst.w	r2, #2
    12e8:	d0f7      	beq.n	12da <_oscctrl_init_referenced_generators+0x32>
    12ea:	4770      	bx	lr
    12ec:	40001c00 	.word	0x40001c00
    12f0:	40001000 	.word	0x40001000

000012f4 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    12f4:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    12f6:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    12f8:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    12fa:	4903      	ldr	r1, [pc, #12]	; (1308 <_qspi_dma_rx_complete+0x14>)
    12fc:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    12fe:	685b      	ldr	r3, [r3, #4]
    1300:	b103      	cbz	r3, 1304 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    1302:	4798      	blx	r3
    1304:	bd08      	pop	{r3, pc}
    1306:	bf00      	nop
    1308:	01000002 	.word	0x01000002

0000130c <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    130c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    130e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    1310:	681a      	ldr	r2, [r3, #0]
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <_qspi_dma_tx_complete+0x14>)
    1314:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    1316:	685b      	ldr	r3, [r3, #4]
    1318:	b103      	cbz	r3, 131c <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    131a:	4798      	blx	r3
    131c:	bd08      	pop	{r3, pc}
    131e:	bf00      	nop
    1320:	01000002 	.word	0x01000002

00001324 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    1324:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    1326:	6883      	ldr	r3, [r0, #8]
    1328:	689b      	ldr	r3, [r3, #8]
    132a:	b103      	cbz	r3, 132e <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    132c:	4798      	blx	r3
    132e:	bd08      	pop	{r3, pc}

00001330 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    1330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1332:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    1334:	4604      	mov	r4, r0
    1336:	2800      	cmp	r0, #0
    1338:	d026      	beq.n	1388 <_qspi_dma_init+0x58>
    133a:	1c08      	adds	r0, r1, #0
    133c:	bf18      	it	ne
    133e:	2001      	movne	r0, #1
    1340:	22cb      	movs	r2, #203	; 0xcb
    1342:	4912      	ldr	r1, [pc, #72]	; (138c <_qspi_dma_init+0x5c>)
    1344:	4b12      	ldr	r3, [pc, #72]	; (1390 <_qspi_dma_init+0x60>)
    1346:	4798      	blx	r3
	dev->prvt = hw;
    1348:	4626      	mov	r6, r4
    134a:	f846 5b0c 	str.w	r5, [r6], #12
    134e:	2101      	movs	r1, #1
    1350:	6029      	str	r1, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    1352:	2311      	movs	r3, #17
    1354:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    1356:	4b0f      	ldr	r3, [pc, #60]	; (1394 <_qspi_dma_init+0x64>)
    1358:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    135a:	4630      	mov	r0, r6
    135c:	4f0e      	ldr	r7, [pc, #56]	; (1398 <_qspi_dma_init+0x68>)
    135e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    1360:	68e3      	ldr	r3, [r4, #12]
    1362:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    1364:	68e3      	ldr	r3, [r4, #12]
    1366:	4a0d      	ldr	r2, [pc, #52]	; (139c <_qspi_dma_init+0x6c>)
    1368:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    136a:	68e3      	ldr	r3, [r4, #12]
    136c:	4d0c      	ldr	r5, [pc, #48]	; (13a0 <_qspi_dma_init+0x70>)
    136e:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    1370:	2100      	movs	r1, #0
    1372:	4630      	mov	r0, r6
    1374:	47b8      	blx	r7
	dev->resource->back                 = dev;
    1376:	68e3      	ldr	r3, [r4, #12]
    1378:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    137a:	68e3      	ldr	r3, [r4, #12]
    137c:	4a09      	ldr	r2, [pc, #36]	; (13a4 <_qspi_dma_init+0x74>)
    137e:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    1380:	68e3      	ldr	r3, [r4, #12]
    1382:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    1384:	2000      	movs	r0, #0
    1386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1388:	2000      	movs	r0, #0
    138a:	e7d9      	b.n	1340 <_qspi_dma_init+0x10>
    138c:	00002b48 	.word	0x00002b48
    1390:	00000ed5 	.word	0x00000ed5
    1394:	00030100 	.word	0x00030100
    1398:	000011dd 	.word	0x000011dd
    139c:	000012f5 	.word	0x000012f5
    13a0:	00001325 	.word	0x00001325
    13a4:	0000130d 	.word	0x0000130d

000013a8 <_qspi_dma_enable>:
	return ERR_NONE;
}

int32_t _qspi_dma_enable(struct _qspi_dma_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    13a8:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    13aa:	2202      	movs	r2, #2
    13ac:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    13ae:	2000      	movs	r0, #0
    13b0:	4770      	bx	lr

000013b2 <_qspi_dma_disable>:

int32_t _qspi_dma_disable(struct _qspi_dma_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    13b2:	6803      	ldr	r3, [r0, #0]
    13b4:	2000      	movs	r0, #0
    13b6:	6018      	str	r0, [r3, #0]
	return ERR_NONE;
}
    13b8:	4770      	bx	lr
	...

000013bc <_qspi_dma_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_dma_serial_run_command(struct _qspi_dma_dev *dev, const struct _qspi_command *cmd)
{
    13bc:	b538      	push	{r3, r4, r5, lr}
	void *hw = dev->prvt;
    13be:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    13c0:	780a      	ldrb	r2, [r1, #0]
    13c2:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    13c6:	bf1c      	itt	ne
    13c8:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    13ca:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    13cc:	780a      	ldrb	r2, [r1, #0]
    13ce:	f012 0f10 	tst.w	r2, #16
    13d2:	d005      	beq.n	13e0 <_qspi_dma_serial_run_command+0x24>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    13d4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    13d6:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    13da:	790a      	ldrb	r2, [r1, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    13dc:	4322      	orrs	r2, r4
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    13de:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    13e0:	780a      	ldrb	r2, [r1, #0]
    13e2:	f012 0f40 	tst.w	r2, #64	; 0x40
    13e6:	d006      	beq.n	13f6 <_qspi_dma_serial_run_command+0x3a>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    13e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    13ea:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    13ee:	794c      	ldrb	r4, [r1, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    13f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    13f4:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    13f6:	680a      	ldr	r2, [r1, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    13f8:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_dma_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    13fa:	780b      	ldrb	r3, [r1, #0]
    13fc:	f013 0f80 	tst.w	r3, #128	; 0x80
    1400:	d101      	bne.n	1406 <_qspi_dma_serial_run_command+0x4a>
		_qspi_dma_run_transfer(dev, cmd);
	}

	return ERR_NONE;
}
    1402:	2000      	movs	r0, #0
    1404:	bd38      	pop	{r3, r4, r5, pc}
	void *   hw       = dev->prvt;
    1406:	6802      	ldr	r2, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    1408:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    140c:	bf1a      	itte	ne
    140e:	688d      	ldrne	r5, [r1, #8]
    1410:	f105 6580 	addne.w	r5, r5, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    1414:	f04f 6580 	moveq.w	r5, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    1418:	6b93      	ldr	r3, [r2, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    141a:	690b      	ldr	r3, [r1, #16]
    141c:	b1e3      	cbz	r3, 1458 <_qspi_dma_serial_run_command+0x9c>
    141e:	2001      	movs	r0, #1
    1420:	460c      	mov	r4, r1
    1422:	f44f 728e 	mov.w	r2, #284	; 0x11c
    1426:	4919      	ldr	r1, [pc, #100]	; (148c <_qspi_dma_serial_run_command+0xd0>)
    1428:	4b19      	ldr	r3, [pc, #100]	; (1490 <_qspi_dma_serial_run_command+0xd4>)
    142a:	4798      	blx	r3
	if (cmd->tx_buf) {
    142c:	6921      	ldr	r1, [r4, #16]
    142e:	b1c1      	cbz	r1, 1462 <_qspi_dma_serial_run_command+0xa6>
		_dma_set_source_address(CONF_QSPI_DMA_TX_CHANNEL, cmd->tx_buf);
    1430:	2000      	movs	r0, #0
    1432:	4b18      	ldr	r3, [pc, #96]	; (1494 <_qspi_dma_serial_run_command+0xd8>)
    1434:	4798      	blx	r3
		_dma_set_destination_address(CONF_QSPI_DMA_TX_CHANNEL, (uint8_t *)qspi_mem);
    1436:	4629      	mov	r1, r5
    1438:	2000      	movs	r0, #0
    143a:	4b17      	ldr	r3, [pc, #92]	; (1498 <_qspi_dma_serial_run_command+0xdc>)
    143c:	4798      	blx	r3
		_dma_set_data_amount(CONF_QSPI_DMA_TX_CHANNEL, cmd->buf_len);
    143e:	68e1      	ldr	r1, [r4, #12]
    1440:	2000      	movs	r0, #0
    1442:	4b16      	ldr	r3, [pc, #88]	; (149c <_qspi_dma_serial_run_command+0xe0>)
    1444:	4798      	blx	r3
		_dma_enable_transaction(CONF_QSPI_DMA_TX_CHANNEL, false);
    1446:	2100      	movs	r1, #0
    1448:	4608      	mov	r0, r1
    144a:	4b15      	ldr	r3, [pc, #84]	; (14a0 <_qspi_dma_serial_run_command+0xe4>)
    144c:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    144e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1452:	f3bf 8f6f 	isb	sy
    1456:	e7d4      	b.n	1402 <_qspi_dma_serial_run_command+0x46>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1458:	6948      	ldr	r0, [r1, #20]
    145a:	3000      	adds	r0, #0
    145c:	bf18      	it	ne
    145e:	2001      	movne	r0, #1
    1460:	e7de      	b.n	1420 <_qspi_dma_serial_run_command+0x64>
		_dma_set_source_address(CONF_QSPI_DMA_RX_CHANNEL, (uint8_t *)qspi_mem);
    1462:	4629      	mov	r1, r5
    1464:	2001      	movs	r0, #1
    1466:	4b0b      	ldr	r3, [pc, #44]	; (1494 <_qspi_dma_serial_run_command+0xd8>)
    1468:	4798      	blx	r3
		_dma_set_destination_address(CONF_QSPI_DMA_RX_CHANNEL, cmd->rx_buf);
    146a:	6961      	ldr	r1, [r4, #20]
    146c:	2001      	movs	r0, #1
    146e:	4b0a      	ldr	r3, [pc, #40]	; (1498 <_qspi_dma_serial_run_command+0xdc>)
    1470:	4798      	blx	r3
		_dma_set_data_amount(CONF_QSPI_DMA_RX_CHANNEL, cmd->buf_len);
    1472:	68e1      	ldr	r1, [r4, #12]
    1474:	2001      	movs	r0, #1
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <_qspi_dma_serial_run_command+0xe0>)
    1478:	4798      	blx	r3
		_dma_enable_transaction(CONF_QSPI_DMA_RX_CHANNEL, false);
    147a:	2100      	movs	r1, #0
    147c:	2001      	movs	r0, #1
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <_qspi_dma_serial_run_command+0xe4>)
    1480:	4798      	blx	r3
		*(uint8_t *)(cmd->rx_buf) = qspi_mem[0];
    1482:	6963      	ldr	r3, [r4, #20]
    1484:	782a      	ldrb	r2, [r5, #0]
    1486:	701a      	strb	r2, [r3, #0]
    1488:	e7e1      	b.n	144e <_qspi_dma_serial_run_command+0x92>
    148a:	bf00      	nop
    148c:	00002b48 	.word	0x00002b48
    1490:	00000ed5 	.word	0x00000ed5
    1494:	00001135 	.word	0x00001135
    1498:	00001125 	.word	0x00001125
    149c:	00001145 	.word	0x00001145
    14a0:	0000119d 	.word	0x0000119d

000014a4 <_qspi_dma_register_callback>:

void _qspi_dma_register_callback(struct _qspi_dma_dev *dev, enum _qspi_dma_cb_type type, _qspi_dma_cb_t cb)
{
    14a4:	b538      	push	{r3, r4, r5, lr}
	switch (type) {
    14a6:	b111      	cbz	r1, 14ae <_qspi_dma_register_callback+0xa>
    14a8:	2901      	cmp	r1, #1
    14aa:	d00e      	beq.n	14ca <_qspi_dma_register_callback+0x26>
    14ac:	bd38      	pop	{r3, r4, r5, pc}
	case QSPI_DMA_CB_XFER_DONE:
		dev->cb.xfer_done = cb;
    14ae:	6042      	str	r2, [r0, #4]
		_dma_set_irq_state(CONF_QSPI_DMA_TX_CHANNEL, DMA_TRANSFER_COMPLETE_CB, cb != NULL);
    14b0:	1c14      	adds	r4, r2, #0
    14b2:	bf18      	it	ne
    14b4:	2401      	movne	r4, #1
    14b6:	4622      	mov	r2, r4
    14b8:	2100      	movs	r1, #0
    14ba:	4608      	mov	r0, r1
    14bc:	4d0a      	ldr	r5, [pc, #40]	; (14e8 <_qspi_dma_register_callback+0x44>)
    14be:	47a8      	blx	r5
		_dma_set_irq_state(CONF_QSPI_DMA_RX_CHANNEL, DMA_TRANSFER_COMPLETE_CB, cb != NULL);
    14c0:	4622      	mov	r2, r4
    14c2:	2100      	movs	r1, #0
    14c4:	2001      	movs	r0, #1
    14c6:	47a8      	blx	r5
		break;
    14c8:	bd38      	pop	{r3, r4, r5, pc}
	case QSPI_DMA_CB_ERROR:
		dev->cb.error = cb;
    14ca:	6082      	str	r2, [r0, #8]
		_dma_set_irq_state(CONF_QSPI_DMA_TX_CHANNEL, DMA_TRANSFER_ERROR_CB, cb != NULL);
    14cc:	1c14      	adds	r4, r2, #0
    14ce:	bf18      	it	ne
    14d0:	2401      	movne	r4, #1
    14d2:	4622      	mov	r2, r4
    14d4:	2101      	movs	r1, #1
    14d6:	2000      	movs	r0, #0
    14d8:	4d03      	ldr	r5, [pc, #12]	; (14e8 <_qspi_dma_register_callback+0x44>)
    14da:	47a8      	blx	r5
		_dma_set_irq_state(CONF_QSPI_DMA_RX_CHANNEL, DMA_TRANSFER_ERROR_CB, cb != NULL);
    14dc:	4622      	mov	r2, r4
    14de:	2101      	movs	r1, #1
    14e0:	4608      	mov	r0, r1
    14e2:	47a8      	blx	r5
    14e4:	bd38      	pop	{r3, r4, r5, pc}
    14e6:	bf00      	nop
    14e8:	000010d1 	.word	0x000010d1

000014ec <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    14ec:	b500      	push	{lr}
    14ee:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    14f0:	4b0d      	ldr	r3, [pc, #52]	; (1528 <RAMECC_Handler+0x3c>)
    14f2:	789b      	ldrb	r3, [r3, #2]
    14f4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    14f6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    14f8:	9b01      	ldr	r3, [sp, #4]
    14fa:	f013 0f02 	tst.w	r3, #2
    14fe:	d006      	beq.n	150e <RAMECC_Handler+0x22>
    1500:	4b0a      	ldr	r3, [pc, #40]	; (152c <RAMECC_Handler+0x40>)
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	b11b      	cbz	r3, 150e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1506:	4a08      	ldr	r2, [pc, #32]	; (1528 <RAMECC_Handler+0x3c>)
    1508:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    150a:	4798      	blx	r3
    150c:	e009      	b.n	1522 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	f013 0f01 	tst.w	r3, #1
    1514:	d005      	beq.n	1522 <RAMECC_Handler+0x36>
    1516:	4b05      	ldr	r3, [pc, #20]	; (152c <RAMECC_Handler+0x40>)
    1518:	685b      	ldr	r3, [r3, #4]
    151a:	b113      	cbz	r3, 1522 <RAMECC_Handler+0x36>
    151c:	4a02      	ldr	r2, [pc, #8]	; (1528 <RAMECC_Handler+0x3c>)
    151e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1520:	4798      	blx	r3
	} else {
		return;
	}
}
    1522:	b003      	add	sp, #12
    1524:	f85d fb04 	ldr.w	pc, [sp], #4
    1528:	41020000 	.word	0x41020000
    152c:	20000a50 	.word	0x20000a50

00001530 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1530:	b470      	push	{r4, r5, r6}
    1532:	b089      	sub	sp, #36	; 0x24
    1534:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1536:	466c      	mov	r4, sp
    1538:	4d0d      	ldr	r5, [pc, #52]	; (1570 <_sercom_get_hardware_index+0x40>)
    153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    153e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1546:	9b00      	ldr	r3, [sp, #0]
    1548:	42b3      	cmp	r3, r6
    154a:	d00d      	beq.n	1568 <_sercom_get_hardware_index+0x38>
    154c:	4631      	mov	r1, r6
    154e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1550:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1552:	f853 2b04 	ldr.w	r2, [r3], #4
    1556:	428a      	cmp	r2, r1
    1558:	d007      	beq.n	156a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    155a:	3001      	adds	r0, #1
    155c:	2808      	cmp	r0, #8
    155e:	d1f8      	bne.n	1552 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1560:	2000      	movs	r0, #0
}
    1562:	b009      	add	sp, #36	; 0x24
    1564:	bc70      	pop	{r4, r5, r6}
    1566:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1568:	2000      	movs	r0, #0
			return i;
    156a:	b2c0      	uxtb	r0, r0
    156c:	e7f9      	b.n	1562 <_sercom_get_hardware_index+0x32>
    156e:	bf00      	nop
    1570:	00002b60 	.word	0x00002b60

00001574 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1574:	b510      	push	{r4, lr}
    1576:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1578:	4b21      	ldr	r3, [pc, #132]	; (1600 <_usart_init+0x8c>)
    157a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    157c:	2805      	cmp	r0, #5
    157e:	d005      	beq.n	158c <_usart_init+0x18>
	ASSERT(false);
    1580:	f240 2247 	movw	r2, #583	; 0x247
    1584:	491f      	ldr	r1, [pc, #124]	; (1604 <_usart_init+0x90>)
    1586:	2000      	movs	r0, #0
    1588:	4b1f      	ldr	r3, [pc, #124]	; (1608 <_usart_init+0x94>)
    158a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    158c:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    158e:	f013 0f01 	tst.w	r3, #1
    1592:	d119      	bne.n	15c8 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1594:	69e3      	ldr	r3, [r4, #28]
    1596:	f013 0f03 	tst.w	r3, #3
    159a:	d1fb      	bne.n	1594 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    159c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    159e:	f013 0f02 	tst.w	r3, #2
    15a2:	d00b      	beq.n	15bc <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    15a4:	6823      	ldr	r3, [r4, #0]
    15a6:	f023 0302 	bic.w	r3, r3, #2
    15aa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15ac:	69e3      	ldr	r3, [r4, #28]
    15ae:	f013 0f03 	tst.w	r3, #3
    15b2:	d1fb      	bne.n	15ac <_usart_init+0x38>
    15b4:	69e3      	ldr	r3, [r4, #28]
    15b6:	f013 0f02 	tst.w	r3, #2
    15ba:	d1fb      	bne.n	15b4 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    15bc:	2305      	movs	r3, #5
    15be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15c0:	69e3      	ldr	r3, [r4, #28]
    15c2:	f013 0f03 	tst.w	r3, #3
    15c6:	d1fb      	bne.n	15c0 <_usart_init+0x4c>
    15c8:	69e3      	ldr	r3, [r4, #28]
    15ca:	f013 0f01 	tst.w	r3, #1
    15ce:	d1fb      	bne.n	15c8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    15d0:	4b0e      	ldr	r3, [pc, #56]	; (160c <_usart_init+0x98>)
    15d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15d4:	69e3      	ldr	r3, [r4, #28]
    15d6:	f013 0f03 	tst.w	r3, #3
    15da:	d1fb      	bne.n	15d4 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    15dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    15e0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15e2:	69e3      	ldr	r3, [r4, #28]
    15e4:	f013 0f1f 	tst.w	r3, #31
    15e8:	d1fb      	bne.n	15e2 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    15ea:	4b09      	ldr	r3, [pc, #36]	; (1610 <_usart_init+0x9c>)
    15ec:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    15ee:	f64d 03ad 	movw	r3, #55469	; 0xd8ad
    15f2:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    15f4:	2000      	movs	r0, #0
    15f6:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    15f8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    15fc:	bd10      	pop	{r4, pc}
    15fe:	bf00      	nop
    1600:	00001531 	.word	0x00001531
    1604:	00002b98 	.word	0x00002b98
    1608:	00000ed5 	.word	0x00000ed5
    160c:	40100004 	.word	0x40100004
    1610:	00700002 	.word	0x00700002

00001614 <_usart_sync_init>:
{
    1614:	b538      	push	{r3, r4, r5, lr}
    1616:	460c      	mov	r4, r1
	ASSERT(device);
    1618:	4605      	mov	r5, r0
    161a:	22bb      	movs	r2, #187	; 0xbb
    161c:	4905      	ldr	r1, [pc, #20]	; (1634 <_usart_sync_init+0x20>)
    161e:	3000      	adds	r0, #0
    1620:	bf18      	it	ne
    1622:	2001      	movne	r0, #1
    1624:	4b04      	ldr	r3, [pc, #16]	; (1638 <_usart_sync_init+0x24>)
    1626:	4798      	blx	r3
	device->hw = hw;
    1628:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    162a:	4620      	mov	r0, r4
    162c:	4b03      	ldr	r3, [pc, #12]	; (163c <_usart_sync_init+0x28>)
    162e:	4798      	blx	r3
}
    1630:	bd38      	pop	{r3, r4, r5, pc}
    1632:	bf00      	nop
    1634:	00002b98 	.word	0x00002b98
    1638:	00000ed5 	.word	0x00000ed5
    163c:	00001575 	.word	0x00001575

00001640 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1640:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	f043 0302 	orr.w	r3, r3, #2
    1648:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    164a:	69d3      	ldr	r3, [r2, #28]
    164c:	f013 0f03 	tst.w	r3, #3
    1650:	d1fb      	bne.n	164a <_usart_sync_enable+0xa>
}
    1652:	4770      	bx	lr

00001654 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1654:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    1656:	6299      	str	r1, [r3, #40]	; 0x28
    1658:	4770      	bx	lr

0000165a <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    165a:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    165c:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    165e:	b2c0      	uxtb	r0, r0
    1660:	4770      	bx	lr

00001662 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1662:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1664:	7e18      	ldrb	r0, [r3, #24]
}
    1666:	f000 0001 	and.w	r0, r0, #1
    166a:	4770      	bx	lr

0000166c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    166c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    166e:	7e18      	ldrb	r0, [r3, #24]
}
    1670:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1674:	4770      	bx	lr

00001676 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1676:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1678:	7e18      	ldrb	r0, [r3, #24]
}
    167a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    167e:	4770      	bx	lr

00001680 <qspi_xfer_complete_cb>:
	((Qspi *)hw)->CTRLA.reg = data;
    1680:	4a01      	ldr	r2, [pc, #4]	; (1688 <qspi_xfer_complete_cb+0x8>)
    1682:	4b02      	ldr	r3, [pc, #8]	; (168c <qspi_xfer_complete_cb+0xc>)
    1684:	601a      	str	r2, [r3, #0]
    1686:	4770      	bx	lr
    1688:	01000002 	.word	0x01000002
    168c:	42003400 	.word	0x42003400

00001690 <QSPI_INSTANCE_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_INSTANCE_exit_xip(void)
{
    1690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1694:	4b33      	ldr	r3, [pc, #204]	; (1764 <QSPI_INSTANCE_exit_xip+0xd4>)
    1696:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    169a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    169e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    16a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16a6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    16aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    16b2:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    16b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    16ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    16be:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16c2:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    16c6:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16ca:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    16ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    16d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    16d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    16da:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16de:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    16e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16e6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    16ea:	f44f 7480 	mov.w	r4, #256	; 0x100
    16ee:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    16f0:	4a1d      	ldr	r2, [pc, #116]	; (1768 <QSPI_INSTANCE_exit_xip+0xd8>)
    16f2:	629a      	str	r2, [r3, #40]	; 0x28
    16f4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    16f8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    16fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
    16fe:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1702:	491a      	ldr	r1, [pc, #104]	; (176c <QSPI_INSTANCE_exit_xip+0xdc>)
    1704:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1708:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    170c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1710:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1714:	4d16      	ldr	r5, [pc, #88]	; (1770 <QSPI_INSTANCE_exit_xip+0xe0>)
    1716:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
    171a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    171e:	619c      	str	r4, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1720:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    1724:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94

	gpio_set_pin_level(FLASH_IO0, true);
	gpio_set_pin_level(FLASH_CS, false);
	gpio_set_pin_level(FLASH_CLK, false);

	delay_us(1);
    1728:	2001      	movs	r0, #1
    172a:	4b12      	ldr	r3, [pc, #72]	; (1774 <QSPI_INSTANCE_exit_xip+0xe4>)
    172c:	4798      	blx	r3
    172e:	2407      	movs	r4, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1730:	4e0c      	ldr	r6, [pc, #48]	; (1764 <QSPI_INSTANCE_exit_xip+0xd4>)
    1732:	f44f 6780 	mov.w	r7, #1024	; 0x400
    1736:	46b8      	mov	r8, r7
    1738:	f8c6 8098 	str.w	r8, [r6, #152]	; 0x98

	for (int i = 0; i < 7; i++) {
		gpio_set_pin_level(FLASH_CLK, true);
		delay_us(1);
    173c:	2001      	movs	r0, #1
    173e:	4d0d      	ldr	r5, [pc, #52]	; (1774 <QSPI_INSTANCE_exit_xip+0xe4>)
    1740:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1742:	f8c6 7094 	str.w	r7, [r6, #148]	; 0x94
		gpio_set_pin_level(FLASH_CLK, false);
		delay_us(1);
    1746:	2001      	movs	r0, #1
    1748:	47a8      	blx	r5
	for (int i = 0; i < 7; i++) {
    174a:	3c01      	subs	r4, #1
    174c:	d1f4      	bne.n	1738 <QSPI_INSTANCE_exit_xip+0xa8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    174e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1752:	4b04      	ldr	r3, [pc, #16]	; (1764 <QSPI_INSTANCE_exit_xip+0xd4>)
    1754:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	gpio_set_pin_level(FLASH_CS, true);
	delay_us(1);
    1758:	2001      	movs	r0, #1
    175a:	47a8      	blx	r5
	QSPI_INSTANCE_PORT_init();
    175c:	4b06      	ldr	r3, [pc, #24]	; (1778 <QSPI_INSTANCE_exit_xip+0xe8>)
    175e:	4798      	blx	r3
    1760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1764:	41008000 	.word	0x41008000
    1768:	40000100 	.word	0x40000100
    176c:	40000800 	.word	0x40000800
    1770:	40000400 	.word	0x40000400
    1774:	00000c2d 	.word	0x00000c2d
    1778:	00000381 	.word	0x00000381

0000177c <spi_nor_flash_init>:

/**
 * \brief Initialize NOR Flash memory
 */
void spi_nor_flash_init(void)
{
    177c:	b510      	push	{r4, lr}

	qspi_dma_enable(&QSPI_INSTANCE);
    177e:	4c06      	ldr	r4, [pc, #24]	; (1798 <spi_nor_flash_init+0x1c>)
    1780:	4620      	mov	r0, r4
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <spi_nor_flash_init+0x20>)
    1784:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    1786:	2301      	movs	r3, #1
    1788:	4a05      	ldr	r2, [pc, #20]	; (17a0 <spi_nor_flash_init+0x24>)
    178a:	4621      	mov	r1, r4
    178c:	4805      	ldr	r0, [pc, #20]	; (17a4 <spi_nor_flash_init+0x28>)
    178e:	4c06      	ldr	r4, [pc, #24]	; (17a8 <spi_nor_flash_init+0x2c>)
    1790:	47a0      	blx	r4
    1792:	4b06      	ldr	r3, [pc, #24]	; (17ac <spi_nor_flash_init+0x30>)
    1794:	6018      	str	r0, [r3, #0]
    1796:	bd10      	pop	{r4, pc}
    1798:	2000063c 	.word	0x2000063c
    179c:	00000cdd 	.word	0x00000cdd
    17a0:	00001691 	.word	0x00001691
    17a4:	20000214 	.word	0x20000214
    17a8:	00000bdd 	.word	0x00000bdd
    17ac:	20000a60 	.word	0x20000a60

000017b0 <main>:
	/* Pull Up Chip select line*/
	hri_qspi_write_CTRLA_reg(QSPI, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int main(void)
{
    17b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool is_corrupted = false;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    17b4:	4b2d      	ldr	r3, [pc, #180]	; (186c <main+0xbc>)
    17b6:	4798      	blx	r3

	/* Register DMA complete Callback and initialize NOR flash */
	qspi_dma_register_callback(&QSPI_INSTANCE, QSPI_DMA_CB_XFER_DONE, qspi_xfer_complete_cb);
    17b8:	4a2d      	ldr	r2, [pc, #180]	; (1870 <main+0xc0>)
    17ba:	2100      	movs	r1, #0
    17bc:	482d      	ldr	r0, [pc, #180]	; (1874 <main+0xc4>)
    17be:	4b2e      	ldr	r3, [pc, #184]	; (1878 <main+0xc8>)
    17c0:	4798      	blx	r3
	spi_nor_flash_init();
    17c2:	4b2e      	ldr	r3, [pc, #184]	; (187c <main+0xcc>)
    17c4:	4798      	blx	r3

	printf("QSPI Program Started\n\r");
    17c6:	482e      	ldr	r0, [pc, #184]	; (1880 <main+0xd0>)
    17c8:	4b2e      	ldr	r3, [pc, #184]	; (1884 <main+0xd4>)
    17ca:	4798      	blx	r3
    17cc:	4c2e      	ldr	r4, [pc, #184]	; (1888 <main+0xd8>)
    17ce:	4622      	mov	r2, r4
	/* Initialize Tx buffer */
	for (int i = 0; i < BUFFER_SIZE; i++) {
    17d0:	2300      	movs	r3, #0
		tx_buffer[i] = (uint8_t)i;
    17d2:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (int i = 0; i < BUFFER_SIZE; i++) {
    17d6:	3301      	adds	r3, #1
    17d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    17dc:	d1f9      	bne.n	17d2 <main+0x22>
	}

	/* Erase flash memory */
	if (ERR_NONE == SPI_NOR_FLASH_0->interface->erase(SPI_NOR_FLASH_0, 0, QSPI_ERSIZE)) {
    17de:	4b2b      	ldr	r3, [pc, #172]	; (188c <main+0xdc>)
    17e0:	6818      	ldr	r0, [r3, #0]
    17e2:	6843      	ldr	r3, [r0, #4]
    17e4:	689b      	ldr	r3, [r3, #8]
    17e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    17ea:	2100      	movs	r1, #0
    17ec:	4798      	blx	r3
    17ee:	b1f0      	cbz	r0, 182e <main+0x7e>
		printf("Flash erase successful\n\r");
	}

	/* Write data to flash memory */
	if (ERR_NONE == SPI_NOR_FLASH_0->interface->write(SPI_NOR_FLASH_0, (uint8_t *)tx_buffer, 0, BUFFER_SIZE)) {
    17f0:	4b26      	ldr	r3, [pc, #152]	; (188c <main+0xdc>)
    17f2:	6818      	ldr	r0, [r3, #0]
    17f4:	6843      	ldr	r3, [r0, #4]
    17f6:	685d      	ldr	r5, [r3, #4]
    17f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    17fc:	2200      	movs	r2, #0
    17fe:	4924      	ldr	r1, [pc, #144]	; (1890 <main+0xe0>)
    1800:	47a8      	blx	r5
    1802:	b1c0      	cbz	r0, 1836 <main+0x86>
		printf("Flash write successful \n\r");
	}

	/* Read data from flash memory */
	if (ERR_NONE == SPI_NOR_FLASH_0->interface->read(SPI_NOR_FLASH_0, (uint8_t *)rx_buffer, 0, BUFFER_SIZE)) {
    1804:	4b21      	ldr	r3, [pc, #132]	; (188c <main+0xdc>)
    1806:	6818      	ldr	r0, [r3, #0]
    1808:	6843      	ldr	r3, [r0, #4]
    180a:	681d      	ldr	r5, [r3, #0]
    180c:	f44f 7300 	mov.w	r3, #512	; 0x200
    1810:	2200      	movs	r2, #0
    1812:	4920      	ldr	r1, [pc, #128]	; (1894 <main+0xe4>)
    1814:	47a8      	blx	r5
    1816:	b190      	cbz	r0, 183e <main+0x8e>
    1818:	4e1f      	ldr	r6, [pc, #124]	; (1898 <main+0xe8>)
    181a:	f206 250f 	addw	r5, r6, #527	; 0x20f
    181e:	462e      	mov	r6, r5
	for (int i = 0; i < BUFFER_SIZE; i++) {
    1820:	2100      	movs	r1, #0

	/* Data verification */
	for (int i = 0; i < BUFFER_SIZE; i++) {
		if (tx_buffer[i] != rx_buffer[i]) {
			is_corrupted = true;
			printf("Flash data verification failed.\n\r");
    1822:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18ac <main+0xfc>
    1826:	4f17      	ldr	r7, [pc, #92]	; (1884 <main+0xd4>)
			is_corrupted = true;
    1828:	f04f 0801 	mov.w	r8, #1
    182c:	e00d      	b.n	184a <main+0x9a>
		printf("Flash erase successful\n\r");
    182e:	481b      	ldr	r0, [pc, #108]	; (189c <main+0xec>)
    1830:	4b14      	ldr	r3, [pc, #80]	; (1884 <main+0xd4>)
    1832:	4798      	blx	r3
    1834:	e7dc      	b.n	17f0 <main+0x40>
		printf("Flash write successful \n\r");
    1836:	481a      	ldr	r0, [pc, #104]	; (18a0 <main+0xf0>)
    1838:	4b12      	ldr	r3, [pc, #72]	; (1884 <main+0xd4>)
    183a:	4798      	blx	r3
    183c:	e7e2      	b.n	1804 <main+0x54>
		printf("Flash read successful\n\r");
    183e:	4819      	ldr	r0, [pc, #100]	; (18a4 <main+0xf4>)
    1840:	4b10      	ldr	r3, [pc, #64]	; (1884 <main+0xd4>)
    1842:	4798      	blx	r3
    1844:	e7e8      	b.n	1818 <main+0x68>
	for (int i = 0; i < BUFFER_SIZE; i++) {
    1846:	42b4      	cmp	r4, r6
    1848:	d009      	beq.n	185e <main+0xae>
		if (tx_buffer[i] != rx_buffer[i]) {
    184a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    184e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    1852:	429a      	cmp	r2, r3
    1854:	d0f7      	beq.n	1846 <main+0x96>
			printf("Flash data verification failed.\n\r");
    1856:	4648      	mov	r0, r9
    1858:	47b8      	blx	r7
			is_corrupted = true;
    185a:	4641      	mov	r1, r8
    185c:	e7f3      	b.n	1846 <main+0x96>
		}
	}

	if (!is_corrupted) {
    185e:	b101      	cbz	r1, 1862 <main+0xb2>
    1860:	e7fe      	b.n	1860 <main+0xb0>
		printf("Write - Read is successful in QSPI Flash memory.\n\r");
    1862:	4811      	ldr	r0, [pc, #68]	; (18a8 <main+0xf8>)
    1864:	4b07      	ldr	r3, [pc, #28]	; (1884 <main+0xd4>)
    1866:	4798      	blx	r3
    1868:	e7fa      	b.n	1860 <main+0xb0>
    186a:	bf00      	nop
    186c:	000002d1 	.word	0x000002d1
    1870:	00001681 	.word	0x00001681
    1874:	2000063c 	.word	0x2000063c
    1878:	00000d5d 	.word	0x00000d5d
    187c:	0000177d 	.word	0x0000177d
    1880:	00002bb4 	.word	0x00002bb4
    1884:	000019e1 	.word	0x000019e1
    1888:	20000223 	.word	0x20000223
    188c:	20000a60 	.word	0x20000a60
    1890:	20000224 	.word	0x20000224
    1894:	20000424 	.word	0x20000424
    1898:	20000214 	.word	0x20000214
    189c:	00002bcc 	.word	0x00002bcc
    18a0:	00002be8 	.word	0x00002be8
    18a4:	00002c04 	.word	0x00002c04
    18a8:	00002c40 	.word	0x00002c40
    18ac:	00002c1c 	.word	0x00002c1c

000018b0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    18b0:	b940      	cbnz	r0, 18c4 <_read+0x14>
{
    18b2:	b508      	push	{r3, lr}
    18b4:	460b      	mov	r3, r1
    18b6:	4611      	mov	r1, r2
    18b8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    18ba:	4b04      	ldr	r3, [pc, #16]	; (18cc <_read+0x1c>)
    18bc:	4798      	blx	r3
    18be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    18c2:	bd08      	pop	{r3, pc}
		return -1;
    18c4:	f04f 30ff 	mov.w	r0, #4294967295
    18c8:	4770      	bx	lr
    18ca:	bf00      	nop
    18cc:	00001921 	.word	0x00001921

000018d0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    18d0:	3801      	subs	r0, #1
    18d2:	2802      	cmp	r0, #2
    18d4:	d808      	bhi.n	18e8 <_write+0x18>
{
    18d6:	b508      	push	{r3, lr}
    18d8:	460b      	mov	r3, r1
    18da:	4611      	mov	r1, r2
    18dc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    18de:	4b04      	ldr	r3, [pc, #16]	; (18f0 <_write+0x20>)
    18e0:	4798      	blx	r3
    18e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    18e6:	bd08      	pop	{r3, pc}
		return -1;
    18e8:	f04f 30ff 	mov.w	r0, #4294967295
    18ec:	4770      	bx	lr
    18ee:	bf00      	nop
    18f0:	00001945 	.word	0x00001945

000018f4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    18f4:	b570      	push	{r4, r5, r6, lr}
    18f6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    18f8:	4d06      	ldr	r5, [pc, #24]	; (1914 <stdio_io_init+0x20>)
    18fa:	682b      	ldr	r3, [r5, #0]
    18fc:	2100      	movs	r1, #0
    18fe:	6898      	ldr	r0, [r3, #8]
    1900:	4c05      	ldr	r4, [pc, #20]	; (1918 <stdio_io_init+0x24>)
    1902:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1904:	682b      	ldr	r3, [r5, #0]
    1906:	2100      	movs	r1, #0
    1908:	6858      	ldr	r0, [r3, #4]
    190a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    190c:	4b03      	ldr	r3, [pc, #12]	; (191c <stdio_io_init+0x28>)
    190e:	601e      	str	r6, [r3, #0]
    1910:	bd70      	pop	{r4, r5, r6, pc}
    1912:	bf00      	nop
    1914:	20000000 	.word	0x20000000
    1918:	00001a11 	.word	0x00001a11
    191c:	20000624 	.word	0x20000624

00001920 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1920:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1922:	4b06      	ldr	r3, [pc, #24]	; (193c <stdio_io_read+0x1c>)
    1924:	681b      	ldr	r3, [r3, #0]
    1926:	b133      	cbz	r3, 1936 <stdio_io_read+0x16>
    1928:	460a      	mov	r2, r1
    192a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    192c:	b292      	uxth	r2, r2
    192e:	4618      	mov	r0, r3
    1930:	4b03      	ldr	r3, [pc, #12]	; (1940 <stdio_io_read+0x20>)
    1932:	4798      	blx	r3
    1934:	bd08      	pop	{r3, pc}
		return 0;
    1936:	2000      	movs	r0, #0
}
    1938:	bd08      	pop	{r3, pc}
    193a:	bf00      	nop
    193c:	20000624 	.word	0x20000624
    1940:	00000c7d 	.word	0x00000c7d

00001944 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1944:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1946:	4b06      	ldr	r3, [pc, #24]	; (1960 <stdio_io_write+0x1c>)
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	b133      	cbz	r3, 195a <stdio_io_write+0x16>
    194c:	460a      	mov	r2, r1
    194e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1950:	b292      	uxth	r2, r2
    1952:	4618      	mov	r0, r3
    1954:	4b03      	ldr	r3, [pc, #12]	; (1964 <stdio_io_write+0x20>)
    1956:	4798      	blx	r3
    1958:	bd08      	pop	{r3, pc}
		return 0;
    195a:	2000      	movs	r0, #0
}
    195c:	bd08      	pop	{r3, pc}
    195e:	bf00      	nop
    1960:	20000624 	.word	0x20000624
    1964:	00000c4d 	.word	0x00000c4d

00001968 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1968:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    196a:	4c04      	ldr	r4, [pc, #16]	; (197c <stdio_redirect_init+0x14>)
    196c:	4620      	mov	r0, r4
    196e:	4b04      	ldr	r3, [pc, #16]	; (1980 <stdio_redirect_init+0x18>)
    1970:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1972:	4620      	mov	r0, r4
    1974:	4b03      	ldr	r3, [pc, #12]	; (1984 <stdio_redirect_init+0x1c>)
    1976:	4798      	blx	r3
    1978:	bd10      	pop	{r4, pc}
    197a:	bf00      	nop
    197c:	20000630 	.word	0x20000630
    1980:	00000ea9 	.word	0x00000ea9
    1984:	000018f5 	.word	0x000018f5

00001988 <__libc_init_array>:
    1988:	b570      	push	{r4, r5, r6, lr}
    198a:	4e0d      	ldr	r6, [pc, #52]	; (19c0 <__libc_init_array+0x38>)
    198c:	4c0d      	ldr	r4, [pc, #52]	; (19c4 <__libc_init_array+0x3c>)
    198e:	1ba4      	subs	r4, r4, r6
    1990:	10a4      	asrs	r4, r4, #2
    1992:	2500      	movs	r5, #0
    1994:	42a5      	cmp	r5, r4
    1996:	d109      	bne.n	19ac <__libc_init_array+0x24>
    1998:	4e0b      	ldr	r6, [pc, #44]	; (19c8 <__libc_init_array+0x40>)
    199a:	4c0c      	ldr	r4, [pc, #48]	; (19cc <__libc_init_array+0x44>)
    199c:	f001 f9b6 	bl	2d0c <_init>
    19a0:	1ba4      	subs	r4, r4, r6
    19a2:	10a4      	asrs	r4, r4, #2
    19a4:	2500      	movs	r5, #0
    19a6:	42a5      	cmp	r5, r4
    19a8:	d105      	bne.n	19b6 <__libc_init_array+0x2e>
    19aa:	bd70      	pop	{r4, r5, r6, pc}
    19ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    19b0:	4798      	blx	r3
    19b2:	3501      	adds	r5, #1
    19b4:	e7ee      	b.n	1994 <__libc_init_array+0xc>
    19b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    19ba:	4798      	blx	r3
    19bc:	3501      	adds	r5, #1
    19be:	e7f2      	b.n	19a6 <__libc_init_array+0x1e>
    19c0:	00002d18 	.word	0x00002d18
    19c4:	00002d18 	.word	0x00002d18
    19c8:	00002d18 	.word	0x00002d18
    19cc:	00002d1c 	.word	0x00002d1c

000019d0 <memset>:
    19d0:	4402      	add	r2, r0
    19d2:	4603      	mov	r3, r0
    19d4:	4293      	cmp	r3, r2
    19d6:	d100      	bne.n	19da <memset+0xa>
    19d8:	4770      	bx	lr
    19da:	f803 1b01 	strb.w	r1, [r3], #1
    19de:	e7f9      	b.n	19d4 <memset+0x4>

000019e0 <iprintf>:
    19e0:	b40f      	push	{r0, r1, r2, r3}
    19e2:	4b0a      	ldr	r3, [pc, #40]	; (1a0c <iprintf+0x2c>)
    19e4:	b513      	push	{r0, r1, r4, lr}
    19e6:	681c      	ldr	r4, [r3, #0]
    19e8:	b124      	cbz	r4, 19f4 <iprintf+0x14>
    19ea:	69a3      	ldr	r3, [r4, #24]
    19ec:	b913      	cbnz	r3, 19f4 <iprintf+0x14>
    19ee:	4620      	mov	r0, r4
    19f0:	f000 fa76 	bl	1ee0 <__sinit>
    19f4:	ab05      	add	r3, sp, #20
    19f6:	9a04      	ldr	r2, [sp, #16]
    19f8:	68a1      	ldr	r1, [r4, #8]
    19fa:	9301      	str	r3, [sp, #4]
    19fc:	4620      	mov	r0, r4
    19fe:	f000 fc39 	bl	2274 <_vfiprintf_r>
    1a02:	b002      	add	sp, #8
    1a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a08:	b004      	add	sp, #16
    1a0a:	4770      	bx	lr
    1a0c:	20000000 	.word	0x20000000

00001a10 <setbuf>:
    1a10:	2900      	cmp	r1, #0
    1a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1a16:	bf0c      	ite	eq
    1a18:	2202      	moveq	r2, #2
    1a1a:	2200      	movne	r2, #0
    1a1c:	f000 b800 	b.w	1a20 <setvbuf>

00001a20 <setvbuf>:
    1a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1a24:	461d      	mov	r5, r3
    1a26:	4b51      	ldr	r3, [pc, #324]	; (1b6c <setvbuf+0x14c>)
    1a28:	681e      	ldr	r6, [r3, #0]
    1a2a:	4604      	mov	r4, r0
    1a2c:	460f      	mov	r7, r1
    1a2e:	4690      	mov	r8, r2
    1a30:	b126      	cbz	r6, 1a3c <setvbuf+0x1c>
    1a32:	69b3      	ldr	r3, [r6, #24]
    1a34:	b913      	cbnz	r3, 1a3c <setvbuf+0x1c>
    1a36:	4630      	mov	r0, r6
    1a38:	f000 fa52 	bl	1ee0 <__sinit>
    1a3c:	4b4c      	ldr	r3, [pc, #304]	; (1b70 <setvbuf+0x150>)
    1a3e:	429c      	cmp	r4, r3
    1a40:	d152      	bne.n	1ae8 <setvbuf+0xc8>
    1a42:	6874      	ldr	r4, [r6, #4]
    1a44:	f1b8 0f02 	cmp.w	r8, #2
    1a48:	d006      	beq.n	1a58 <setvbuf+0x38>
    1a4a:	f1b8 0f01 	cmp.w	r8, #1
    1a4e:	f200 8089 	bhi.w	1b64 <setvbuf+0x144>
    1a52:	2d00      	cmp	r5, #0
    1a54:	f2c0 8086 	blt.w	1b64 <setvbuf+0x144>
    1a58:	4621      	mov	r1, r4
    1a5a:	4630      	mov	r0, r6
    1a5c:	f000 f9d6 	bl	1e0c <_fflush_r>
    1a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a62:	b141      	cbz	r1, 1a76 <setvbuf+0x56>
    1a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1a68:	4299      	cmp	r1, r3
    1a6a:	d002      	beq.n	1a72 <setvbuf+0x52>
    1a6c:	4630      	mov	r0, r6
    1a6e:	f000 fb2d 	bl	20cc <_free_r>
    1a72:	2300      	movs	r3, #0
    1a74:	6363      	str	r3, [r4, #52]	; 0x34
    1a76:	2300      	movs	r3, #0
    1a78:	61a3      	str	r3, [r4, #24]
    1a7a:	6063      	str	r3, [r4, #4]
    1a7c:	89a3      	ldrh	r3, [r4, #12]
    1a7e:	061b      	lsls	r3, r3, #24
    1a80:	d503      	bpl.n	1a8a <setvbuf+0x6a>
    1a82:	6921      	ldr	r1, [r4, #16]
    1a84:	4630      	mov	r0, r6
    1a86:	f000 fb21 	bl	20cc <_free_r>
    1a8a:	89a3      	ldrh	r3, [r4, #12]
    1a8c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1a90:	f023 0303 	bic.w	r3, r3, #3
    1a94:	f1b8 0f02 	cmp.w	r8, #2
    1a98:	81a3      	strh	r3, [r4, #12]
    1a9a:	d05d      	beq.n	1b58 <setvbuf+0x138>
    1a9c:	ab01      	add	r3, sp, #4
    1a9e:	466a      	mov	r2, sp
    1aa0:	4621      	mov	r1, r4
    1aa2:	4630      	mov	r0, r6
    1aa4:	f000 faa6 	bl	1ff4 <__swhatbuf_r>
    1aa8:	89a3      	ldrh	r3, [r4, #12]
    1aaa:	4318      	orrs	r0, r3
    1aac:	81a0      	strh	r0, [r4, #12]
    1aae:	bb2d      	cbnz	r5, 1afc <setvbuf+0xdc>
    1ab0:	9d00      	ldr	r5, [sp, #0]
    1ab2:	4628      	mov	r0, r5
    1ab4:	f000 fb02 	bl	20bc <malloc>
    1ab8:	4607      	mov	r7, r0
    1aba:	2800      	cmp	r0, #0
    1abc:	d14e      	bne.n	1b5c <setvbuf+0x13c>
    1abe:	f8dd 9000 	ldr.w	r9, [sp]
    1ac2:	45a9      	cmp	r9, r5
    1ac4:	d13c      	bne.n	1b40 <setvbuf+0x120>
    1ac6:	f04f 30ff 	mov.w	r0, #4294967295
    1aca:	89a3      	ldrh	r3, [r4, #12]
    1acc:	f043 0302 	orr.w	r3, r3, #2
    1ad0:	81a3      	strh	r3, [r4, #12]
    1ad2:	2300      	movs	r3, #0
    1ad4:	60a3      	str	r3, [r4, #8]
    1ad6:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1ada:	6023      	str	r3, [r4, #0]
    1adc:	6123      	str	r3, [r4, #16]
    1ade:	2301      	movs	r3, #1
    1ae0:	6163      	str	r3, [r4, #20]
    1ae2:	b003      	add	sp, #12
    1ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1ae8:	4b22      	ldr	r3, [pc, #136]	; (1b74 <setvbuf+0x154>)
    1aea:	429c      	cmp	r4, r3
    1aec:	d101      	bne.n	1af2 <setvbuf+0xd2>
    1aee:	68b4      	ldr	r4, [r6, #8]
    1af0:	e7a8      	b.n	1a44 <setvbuf+0x24>
    1af2:	4b21      	ldr	r3, [pc, #132]	; (1b78 <setvbuf+0x158>)
    1af4:	429c      	cmp	r4, r3
    1af6:	bf08      	it	eq
    1af8:	68f4      	ldreq	r4, [r6, #12]
    1afa:	e7a3      	b.n	1a44 <setvbuf+0x24>
    1afc:	2f00      	cmp	r7, #0
    1afe:	d0d8      	beq.n	1ab2 <setvbuf+0x92>
    1b00:	69b3      	ldr	r3, [r6, #24]
    1b02:	b913      	cbnz	r3, 1b0a <setvbuf+0xea>
    1b04:	4630      	mov	r0, r6
    1b06:	f000 f9eb 	bl	1ee0 <__sinit>
    1b0a:	f1b8 0f01 	cmp.w	r8, #1
    1b0e:	bf08      	it	eq
    1b10:	89a3      	ldrheq	r3, [r4, #12]
    1b12:	6027      	str	r7, [r4, #0]
    1b14:	bf04      	itt	eq
    1b16:	f043 0301 	orreq.w	r3, r3, #1
    1b1a:	81a3      	strheq	r3, [r4, #12]
    1b1c:	89a3      	ldrh	r3, [r4, #12]
    1b1e:	6127      	str	r7, [r4, #16]
    1b20:	f013 0008 	ands.w	r0, r3, #8
    1b24:	6165      	str	r5, [r4, #20]
    1b26:	d01b      	beq.n	1b60 <setvbuf+0x140>
    1b28:	f013 0001 	ands.w	r0, r3, #1
    1b2c:	bf18      	it	ne
    1b2e:	426d      	negne	r5, r5
    1b30:	f04f 0300 	mov.w	r3, #0
    1b34:	bf1d      	ittte	ne
    1b36:	60a3      	strne	r3, [r4, #8]
    1b38:	61a5      	strne	r5, [r4, #24]
    1b3a:	4618      	movne	r0, r3
    1b3c:	60a5      	streq	r5, [r4, #8]
    1b3e:	e7d0      	b.n	1ae2 <setvbuf+0xc2>
    1b40:	4648      	mov	r0, r9
    1b42:	f000 fabb 	bl	20bc <malloc>
    1b46:	4607      	mov	r7, r0
    1b48:	2800      	cmp	r0, #0
    1b4a:	d0bc      	beq.n	1ac6 <setvbuf+0xa6>
    1b4c:	89a3      	ldrh	r3, [r4, #12]
    1b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1b52:	81a3      	strh	r3, [r4, #12]
    1b54:	464d      	mov	r5, r9
    1b56:	e7d3      	b.n	1b00 <setvbuf+0xe0>
    1b58:	2000      	movs	r0, #0
    1b5a:	e7b6      	b.n	1aca <setvbuf+0xaa>
    1b5c:	46a9      	mov	r9, r5
    1b5e:	e7f5      	b.n	1b4c <setvbuf+0x12c>
    1b60:	60a0      	str	r0, [r4, #8]
    1b62:	e7be      	b.n	1ae2 <setvbuf+0xc2>
    1b64:	f04f 30ff 	mov.w	r0, #4294967295
    1b68:	e7bb      	b.n	1ae2 <setvbuf+0xc2>
    1b6a:	bf00      	nop
    1b6c:	20000000 	.word	0x20000000
    1b70:	00002c98 	.word	0x00002c98
    1b74:	00002cb8 	.word	0x00002cb8
    1b78:	00002c78 	.word	0x00002c78

00001b7c <__swbuf_r>:
    1b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b7e:	460e      	mov	r6, r1
    1b80:	4614      	mov	r4, r2
    1b82:	4605      	mov	r5, r0
    1b84:	b118      	cbz	r0, 1b8e <__swbuf_r+0x12>
    1b86:	6983      	ldr	r3, [r0, #24]
    1b88:	b90b      	cbnz	r3, 1b8e <__swbuf_r+0x12>
    1b8a:	f000 f9a9 	bl	1ee0 <__sinit>
    1b8e:	4b21      	ldr	r3, [pc, #132]	; (1c14 <__swbuf_r+0x98>)
    1b90:	429c      	cmp	r4, r3
    1b92:	d12a      	bne.n	1bea <__swbuf_r+0x6e>
    1b94:	686c      	ldr	r4, [r5, #4]
    1b96:	69a3      	ldr	r3, [r4, #24]
    1b98:	60a3      	str	r3, [r4, #8]
    1b9a:	89a3      	ldrh	r3, [r4, #12]
    1b9c:	071a      	lsls	r2, r3, #28
    1b9e:	d52e      	bpl.n	1bfe <__swbuf_r+0x82>
    1ba0:	6923      	ldr	r3, [r4, #16]
    1ba2:	b363      	cbz	r3, 1bfe <__swbuf_r+0x82>
    1ba4:	6923      	ldr	r3, [r4, #16]
    1ba6:	6820      	ldr	r0, [r4, #0]
    1ba8:	1ac0      	subs	r0, r0, r3
    1baa:	6963      	ldr	r3, [r4, #20]
    1bac:	b2f6      	uxtb	r6, r6
    1bae:	4298      	cmp	r0, r3
    1bb0:	4637      	mov	r7, r6
    1bb2:	db04      	blt.n	1bbe <__swbuf_r+0x42>
    1bb4:	4621      	mov	r1, r4
    1bb6:	4628      	mov	r0, r5
    1bb8:	f000 f928 	bl	1e0c <_fflush_r>
    1bbc:	bb28      	cbnz	r0, 1c0a <__swbuf_r+0x8e>
    1bbe:	68a3      	ldr	r3, [r4, #8]
    1bc0:	3b01      	subs	r3, #1
    1bc2:	60a3      	str	r3, [r4, #8]
    1bc4:	6823      	ldr	r3, [r4, #0]
    1bc6:	1c5a      	adds	r2, r3, #1
    1bc8:	6022      	str	r2, [r4, #0]
    1bca:	701e      	strb	r6, [r3, #0]
    1bcc:	6963      	ldr	r3, [r4, #20]
    1bce:	3001      	adds	r0, #1
    1bd0:	4298      	cmp	r0, r3
    1bd2:	d004      	beq.n	1bde <__swbuf_r+0x62>
    1bd4:	89a3      	ldrh	r3, [r4, #12]
    1bd6:	07db      	lsls	r3, r3, #31
    1bd8:	d519      	bpl.n	1c0e <__swbuf_r+0x92>
    1bda:	2e0a      	cmp	r6, #10
    1bdc:	d117      	bne.n	1c0e <__swbuf_r+0x92>
    1bde:	4621      	mov	r1, r4
    1be0:	4628      	mov	r0, r5
    1be2:	f000 f913 	bl	1e0c <_fflush_r>
    1be6:	b190      	cbz	r0, 1c0e <__swbuf_r+0x92>
    1be8:	e00f      	b.n	1c0a <__swbuf_r+0x8e>
    1bea:	4b0b      	ldr	r3, [pc, #44]	; (1c18 <__swbuf_r+0x9c>)
    1bec:	429c      	cmp	r4, r3
    1bee:	d101      	bne.n	1bf4 <__swbuf_r+0x78>
    1bf0:	68ac      	ldr	r4, [r5, #8]
    1bf2:	e7d0      	b.n	1b96 <__swbuf_r+0x1a>
    1bf4:	4b09      	ldr	r3, [pc, #36]	; (1c1c <__swbuf_r+0xa0>)
    1bf6:	429c      	cmp	r4, r3
    1bf8:	bf08      	it	eq
    1bfa:	68ec      	ldreq	r4, [r5, #12]
    1bfc:	e7cb      	b.n	1b96 <__swbuf_r+0x1a>
    1bfe:	4621      	mov	r1, r4
    1c00:	4628      	mov	r0, r5
    1c02:	f000 f80d 	bl	1c20 <__swsetup_r>
    1c06:	2800      	cmp	r0, #0
    1c08:	d0cc      	beq.n	1ba4 <__swbuf_r+0x28>
    1c0a:	f04f 37ff 	mov.w	r7, #4294967295
    1c0e:	4638      	mov	r0, r7
    1c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c12:	bf00      	nop
    1c14:	00002c98 	.word	0x00002c98
    1c18:	00002cb8 	.word	0x00002cb8
    1c1c:	00002c78 	.word	0x00002c78

00001c20 <__swsetup_r>:
    1c20:	4b32      	ldr	r3, [pc, #200]	; (1cec <__swsetup_r+0xcc>)
    1c22:	b570      	push	{r4, r5, r6, lr}
    1c24:	681d      	ldr	r5, [r3, #0]
    1c26:	4606      	mov	r6, r0
    1c28:	460c      	mov	r4, r1
    1c2a:	b125      	cbz	r5, 1c36 <__swsetup_r+0x16>
    1c2c:	69ab      	ldr	r3, [r5, #24]
    1c2e:	b913      	cbnz	r3, 1c36 <__swsetup_r+0x16>
    1c30:	4628      	mov	r0, r5
    1c32:	f000 f955 	bl	1ee0 <__sinit>
    1c36:	4b2e      	ldr	r3, [pc, #184]	; (1cf0 <__swsetup_r+0xd0>)
    1c38:	429c      	cmp	r4, r3
    1c3a:	d10f      	bne.n	1c5c <__swsetup_r+0x3c>
    1c3c:	686c      	ldr	r4, [r5, #4]
    1c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c42:	b29a      	uxth	r2, r3
    1c44:	0715      	lsls	r5, r2, #28
    1c46:	d42c      	bmi.n	1ca2 <__swsetup_r+0x82>
    1c48:	06d0      	lsls	r0, r2, #27
    1c4a:	d411      	bmi.n	1c70 <__swsetup_r+0x50>
    1c4c:	2209      	movs	r2, #9
    1c4e:	6032      	str	r2, [r6, #0]
    1c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c54:	81a3      	strh	r3, [r4, #12]
    1c56:	f04f 30ff 	mov.w	r0, #4294967295
    1c5a:	bd70      	pop	{r4, r5, r6, pc}
    1c5c:	4b25      	ldr	r3, [pc, #148]	; (1cf4 <__swsetup_r+0xd4>)
    1c5e:	429c      	cmp	r4, r3
    1c60:	d101      	bne.n	1c66 <__swsetup_r+0x46>
    1c62:	68ac      	ldr	r4, [r5, #8]
    1c64:	e7eb      	b.n	1c3e <__swsetup_r+0x1e>
    1c66:	4b24      	ldr	r3, [pc, #144]	; (1cf8 <__swsetup_r+0xd8>)
    1c68:	429c      	cmp	r4, r3
    1c6a:	bf08      	it	eq
    1c6c:	68ec      	ldreq	r4, [r5, #12]
    1c6e:	e7e6      	b.n	1c3e <__swsetup_r+0x1e>
    1c70:	0751      	lsls	r1, r2, #29
    1c72:	d512      	bpl.n	1c9a <__swsetup_r+0x7a>
    1c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c76:	b141      	cbz	r1, 1c8a <__swsetup_r+0x6a>
    1c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1c7c:	4299      	cmp	r1, r3
    1c7e:	d002      	beq.n	1c86 <__swsetup_r+0x66>
    1c80:	4630      	mov	r0, r6
    1c82:	f000 fa23 	bl	20cc <_free_r>
    1c86:	2300      	movs	r3, #0
    1c88:	6363      	str	r3, [r4, #52]	; 0x34
    1c8a:	89a3      	ldrh	r3, [r4, #12]
    1c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1c90:	81a3      	strh	r3, [r4, #12]
    1c92:	2300      	movs	r3, #0
    1c94:	6063      	str	r3, [r4, #4]
    1c96:	6923      	ldr	r3, [r4, #16]
    1c98:	6023      	str	r3, [r4, #0]
    1c9a:	89a3      	ldrh	r3, [r4, #12]
    1c9c:	f043 0308 	orr.w	r3, r3, #8
    1ca0:	81a3      	strh	r3, [r4, #12]
    1ca2:	6923      	ldr	r3, [r4, #16]
    1ca4:	b94b      	cbnz	r3, 1cba <__swsetup_r+0x9a>
    1ca6:	89a3      	ldrh	r3, [r4, #12]
    1ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1cb0:	d003      	beq.n	1cba <__swsetup_r+0x9a>
    1cb2:	4621      	mov	r1, r4
    1cb4:	4630      	mov	r0, r6
    1cb6:	f000 f9c1 	bl	203c <__smakebuf_r>
    1cba:	89a2      	ldrh	r2, [r4, #12]
    1cbc:	f012 0301 	ands.w	r3, r2, #1
    1cc0:	d00c      	beq.n	1cdc <__swsetup_r+0xbc>
    1cc2:	2300      	movs	r3, #0
    1cc4:	60a3      	str	r3, [r4, #8]
    1cc6:	6963      	ldr	r3, [r4, #20]
    1cc8:	425b      	negs	r3, r3
    1cca:	61a3      	str	r3, [r4, #24]
    1ccc:	6923      	ldr	r3, [r4, #16]
    1cce:	b953      	cbnz	r3, 1ce6 <__swsetup_r+0xc6>
    1cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1cd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1cd8:	d1ba      	bne.n	1c50 <__swsetup_r+0x30>
    1cda:	bd70      	pop	{r4, r5, r6, pc}
    1cdc:	0792      	lsls	r2, r2, #30
    1cde:	bf58      	it	pl
    1ce0:	6963      	ldrpl	r3, [r4, #20]
    1ce2:	60a3      	str	r3, [r4, #8]
    1ce4:	e7f2      	b.n	1ccc <__swsetup_r+0xac>
    1ce6:	2000      	movs	r0, #0
    1ce8:	e7f7      	b.n	1cda <__swsetup_r+0xba>
    1cea:	bf00      	nop
    1cec:	20000000 	.word	0x20000000
    1cf0:	00002c98 	.word	0x00002c98
    1cf4:	00002cb8 	.word	0x00002cb8
    1cf8:	00002c78 	.word	0x00002c78

00001cfc <__sflush_r>:
    1cfc:	898a      	ldrh	r2, [r1, #12]
    1cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d02:	4605      	mov	r5, r0
    1d04:	0710      	lsls	r0, r2, #28
    1d06:	460c      	mov	r4, r1
    1d08:	d45a      	bmi.n	1dc0 <__sflush_r+0xc4>
    1d0a:	684b      	ldr	r3, [r1, #4]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	dc05      	bgt.n	1d1c <__sflush_r+0x20>
    1d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1d12:	2b00      	cmp	r3, #0
    1d14:	dc02      	bgt.n	1d1c <__sflush_r+0x20>
    1d16:	2000      	movs	r0, #0
    1d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1d1e:	2e00      	cmp	r6, #0
    1d20:	d0f9      	beq.n	1d16 <__sflush_r+0x1a>
    1d22:	2300      	movs	r3, #0
    1d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1d28:	682f      	ldr	r7, [r5, #0]
    1d2a:	602b      	str	r3, [r5, #0]
    1d2c:	d033      	beq.n	1d96 <__sflush_r+0x9a>
    1d2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1d30:	89a3      	ldrh	r3, [r4, #12]
    1d32:	075a      	lsls	r2, r3, #29
    1d34:	d505      	bpl.n	1d42 <__sflush_r+0x46>
    1d36:	6863      	ldr	r3, [r4, #4]
    1d38:	1ac0      	subs	r0, r0, r3
    1d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1d3c:	b10b      	cbz	r3, 1d42 <__sflush_r+0x46>
    1d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d40:	1ac0      	subs	r0, r0, r3
    1d42:	2300      	movs	r3, #0
    1d44:	4602      	mov	r2, r0
    1d46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1d48:	6a21      	ldr	r1, [r4, #32]
    1d4a:	4628      	mov	r0, r5
    1d4c:	47b0      	blx	r6
    1d4e:	1c43      	adds	r3, r0, #1
    1d50:	89a3      	ldrh	r3, [r4, #12]
    1d52:	d106      	bne.n	1d62 <__sflush_r+0x66>
    1d54:	6829      	ldr	r1, [r5, #0]
    1d56:	291d      	cmp	r1, #29
    1d58:	d84b      	bhi.n	1df2 <__sflush_r+0xf6>
    1d5a:	4a2b      	ldr	r2, [pc, #172]	; (1e08 <__sflush_r+0x10c>)
    1d5c:	40ca      	lsrs	r2, r1
    1d5e:	07d6      	lsls	r6, r2, #31
    1d60:	d547      	bpl.n	1df2 <__sflush_r+0xf6>
    1d62:	2200      	movs	r2, #0
    1d64:	6062      	str	r2, [r4, #4]
    1d66:	04d9      	lsls	r1, r3, #19
    1d68:	6922      	ldr	r2, [r4, #16]
    1d6a:	6022      	str	r2, [r4, #0]
    1d6c:	d504      	bpl.n	1d78 <__sflush_r+0x7c>
    1d6e:	1c42      	adds	r2, r0, #1
    1d70:	d101      	bne.n	1d76 <__sflush_r+0x7a>
    1d72:	682b      	ldr	r3, [r5, #0]
    1d74:	b903      	cbnz	r3, 1d78 <__sflush_r+0x7c>
    1d76:	6560      	str	r0, [r4, #84]	; 0x54
    1d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1d7a:	602f      	str	r7, [r5, #0]
    1d7c:	2900      	cmp	r1, #0
    1d7e:	d0ca      	beq.n	1d16 <__sflush_r+0x1a>
    1d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1d84:	4299      	cmp	r1, r3
    1d86:	d002      	beq.n	1d8e <__sflush_r+0x92>
    1d88:	4628      	mov	r0, r5
    1d8a:	f000 f99f 	bl	20cc <_free_r>
    1d8e:	2000      	movs	r0, #0
    1d90:	6360      	str	r0, [r4, #52]	; 0x34
    1d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d96:	6a21      	ldr	r1, [r4, #32]
    1d98:	2301      	movs	r3, #1
    1d9a:	4628      	mov	r0, r5
    1d9c:	47b0      	blx	r6
    1d9e:	1c41      	adds	r1, r0, #1
    1da0:	d1c6      	bne.n	1d30 <__sflush_r+0x34>
    1da2:	682b      	ldr	r3, [r5, #0]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d0c3      	beq.n	1d30 <__sflush_r+0x34>
    1da8:	2b1d      	cmp	r3, #29
    1daa:	d001      	beq.n	1db0 <__sflush_r+0xb4>
    1dac:	2b16      	cmp	r3, #22
    1dae:	d101      	bne.n	1db4 <__sflush_r+0xb8>
    1db0:	602f      	str	r7, [r5, #0]
    1db2:	e7b0      	b.n	1d16 <__sflush_r+0x1a>
    1db4:	89a3      	ldrh	r3, [r4, #12]
    1db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1dba:	81a3      	strh	r3, [r4, #12]
    1dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dc0:	690f      	ldr	r7, [r1, #16]
    1dc2:	2f00      	cmp	r7, #0
    1dc4:	d0a7      	beq.n	1d16 <__sflush_r+0x1a>
    1dc6:	0793      	lsls	r3, r2, #30
    1dc8:	680e      	ldr	r6, [r1, #0]
    1dca:	bf08      	it	eq
    1dcc:	694b      	ldreq	r3, [r1, #20]
    1dce:	600f      	str	r7, [r1, #0]
    1dd0:	bf18      	it	ne
    1dd2:	2300      	movne	r3, #0
    1dd4:	eba6 0807 	sub.w	r8, r6, r7
    1dd8:	608b      	str	r3, [r1, #8]
    1dda:	f1b8 0f00 	cmp.w	r8, #0
    1dde:	dd9a      	ble.n	1d16 <__sflush_r+0x1a>
    1de0:	4643      	mov	r3, r8
    1de2:	463a      	mov	r2, r7
    1de4:	6a21      	ldr	r1, [r4, #32]
    1de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1de8:	4628      	mov	r0, r5
    1dea:	47b0      	blx	r6
    1dec:	2800      	cmp	r0, #0
    1dee:	dc07      	bgt.n	1e00 <__sflush_r+0x104>
    1df0:	89a3      	ldrh	r3, [r4, #12]
    1df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1df6:	81a3      	strh	r3, [r4, #12]
    1df8:	f04f 30ff 	mov.w	r0, #4294967295
    1dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e00:	4407      	add	r7, r0
    1e02:	eba8 0800 	sub.w	r8, r8, r0
    1e06:	e7e8      	b.n	1dda <__sflush_r+0xde>
    1e08:	20400001 	.word	0x20400001

00001e0c <_fflush_r>:
    1e0c:	b538      	push	{r3, r4, r5, lr}
    1e0e:	690b      	ldr	r3, [r1, #16]
    1e10:	4605      	mov	r5, r0
    1e12:	460c      	mov	r4, r1
    1e14:	b1db      	cbz	r3, 1e4e <_fflush_r+0x42>
    1e16:	b118      	cbz	r0, 1e20 <_fflush_r+0x14>
    1e18:	6983      	ldr	r3, [r0, #24]
    1e1a:	b90b      	cbnz	r3, 1e20 <_fflush_r+0x14>
    1e1c:	f000 f860 	bl	1ee0 <__sinit>
    1e20:	4b0c      	ldr	r3, [pc, #48]	; (1e54 <_fflush_r+0x48>)
    1e22:	429c      	cmp	r4, r3
    1e24:	d109      	bne.n	1e3a <_fflush_r+0x2e>
    1e26:	686c      	ldr	r4, [r5, #4]
    1e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1e2c:	b17b      	cbz	r3, 1e4e <_fflush_r+0x42>
    1e2e:	4621      	mov	r1, r4
    1e30:	4628      	mov	r0, r5
    1e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1e36:	f7ff bf61 	b.w	1cfc <__sflush_r>
    1e3a:	4b07      	ldr	r3, [pc, #28]	; (1e58 <_fflush_r+0x4c>)
    1e3c:	429c      	cmp	r4, r3
    1e3e:	d101      	bne.n	1e44 <_fflush_r+0x38>
    1e40:	68ac      	ldr	r4, [r5, #8]
    1e42:	e7f1      	b.n	1e28 <_fflush_r+0x1c>
    1e44:	4b05      	ldr	r3, [pc, #20]	; (1e5c <_fflush_r+0x50>)
    1e46:	429c      	cmp	r4, r3
    1e48:	bf08      	it	eq
    1e4a:	68ec      	ldreq	r4, [r5, #12]
    1e4c:	e7ec      	b.n	1e28 <_fflush_r+0x1c>
    1e4e:	2000      	movs	r0, #0
    1e50:	bd38      	pop	{r3, r4, r5, pc}
    1e52:	bf00      	nop
    1e54:	00002c98 	.word	0x00002c98
    1e58:	00002cb8 	.word	0x00002cb8
    1e5c:	00002c78 	.word	0x00002c78

00001e60 <_cleanup_r>:
    1e60:	4901      	ldr	r1, [pc, #4]	; (1e68 <_cleanup_r+0x8>)
    1e62:	f000 b8a9 	b.w	1fb8 <_fwalk_reent>
    1e66:	bf00      	nop
    1e68:	00001e0d 	.word	0x00001e0d

00001e6c <std.isra.0>:
    1e6c:	2300      	movs	r3, #0
    1e6e:	b510      	push	{r4, lr}
    1e70:	4604      	mov	r4, r0
    1e72:	6003      	str	r3, [r0, #0]
    1e74:	6043      	str	r3, [r0, #4]
    1e76:	6083      	str	r3, [r0, #8]
    1e78:	8181      	strh	r1, [r0, #12]
    1e7a:	6643      	str	r3, [r0, #100]	; 0x64
    1e7c:	81c2      	strh	r2, [r0, #14]
    1e7e:	6103      	str	r3, [r0, #16]
    1e80:	6143      	str	r3, [r0, #20]
    1e82:	6183      	str	r3, [r0, #24]
    1e84:	4619      	mov	r1, r3
    1e86:	2208      	movs	r2, #8
    1e88:	305c      	adds	r0, #92	; 0x5c
    1e8a:	f7ff fda1 	bl	19d0 <memset>
    1e8e:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <std.isra.0+0x38>)
    1e90:	6263      	str	r3, [r4, #36]	; 0x24
    1e92:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <std.isra.0+0x3c>)
    1e94:	62a3      	str	r3, [r4, #40]	; 0x28
    1e96:	4b05      	ldr	r3, [pc, #20]	; (1eac <std.isra.0+0x40>)
    1e98:	62e3      	str	r3, [r4, #44]	; 0x2c
    1e9a:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <std.isra.0+0x44>)
    1e9c:	6224      	str	r4, [r4, #32]
    1e9e:	6323      	str	r3, [r4, #48]	; 0x30
    1ea0:	bd10      	pop	{r4, pc}
    1ea2:	bf00      	nop
    1ea4:	000027ed 	.word	0x000027ed
    1ea8:	0000280f 	.word	0x0000280f
    1eac:	00002847 	.word	0x00002847
    1eb0:	0000286b 	.word	0x0000286b

00001eb4 <__sfmoreglue>:
    1eb4:	b570      	push	{r4, r5, r6, lr}
    1eb6:	1e4a      	subs	r2, r1, #1
    1eb8:	2568      	movs	r5, #104	; 0x68
    1eba:	4355      	muls	r5, r2
    1ebc:	460e      	mov	r6, r1
    1ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1ec2:	f000 f951 	bl	2168 <_malloc_r>
    1ec6:	4604      	mov	r4, r0
    1ec8:	b140      	cbz	r0, 1edc <__sfmoreglue+0x28>
    1eca:	2100      	movs	r1, #0
    1ecc:	e880 0042 	stmia.w	r0, {r1, r6}
    1ed0:	300c      	adds	r0, #12
    1ed2:	60a0      	str	r0, [r4, #8]
    1ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1ed8:	f7ff fd7a 	bl	19d0 <memset>
    1edc:	4620      	mov	r0, r4
    1ede:	bd70      	pop	{r4, r5, r6, pc}

00001ee0 <__sinit>:
    1ee0:	6983      	ldr	r3, [r0, #24]
    1ee2:	b510      	push	{r4, lr}
    1ee4:	4604      	mov	r4, r0
    1ee6:	bb33      	cbnz	r3, 1f36 <__sinit+0x56>
    1ee8:	6483      	str	r3, [r0, #72]	; 0x48
    1eea:	64c3      	str	r3, [r0, #76]	; 0x4c
    1eec:	6503      	str	r3, [r0, #80]	; 0x50
    1eee:	4b12      	ldr	r3, [pc, #72]	; (1f38 <__sinit+0x58>)
    1ef0:	4a12      	ldr	r2, [pc, #72]	; (1f3c <__sinit+0x5c>)
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	6282      	str	r2, [r0, #40]	; 0x28
    1ef6:	4298      	cmp	r0, r3
    1ef8:	bf04      	itt	eq
    1efa:	2301      	moveq	r3, #1
    1efc:	6183      	streq	r3, [r0, #24]
    1efe:	f000 f81f 	bl	1f40 <__sfp>
    1f02:	6060      	str	r0, [r4, #4]
    1f04:	4620      	mov	r0, r4
    1f06:	f000 f81b 	bl	1f40 <__sfp>
    1f0a:	60a0      	str	r0, [r4, #8]
    1f0c:	4620      	mov	r0, r4
    1f0e:	f000 f817 	bl	1f40 <__sfp>
    1f12:	2200      	movs	r2, #0
    1f14:	60e0      	str	r0, [r4, #12]
    1f16:	2104      	movs	r1, #4
    1f18:	6860      	ldr	r0, [r4, #4]
    1f1a:	f7ff ffa7 	bl	1e6c <std.isra.0>
    1f1e:	2201      	movs	r2, #1
    1f20:	2109      	movs	r1, #9
    1f22:	68a0      	ldr	r0, [r4, #8]
    1f24:	f7ff ffa2 	bl	1e6c <std.isra.0>
    1f28:	2202      	movs	r2, #2
    1f2a:	2112      	movs	r1, #18
    1f2c:	68e0      	ldr	r0, [r4, #12]
    1f2e:	f7ff ff9d 	bl	1e6c <std.isra.0>
    1f32:	2301      	movs	r3, #1
    1f34:	61a3      	str	r3, [r4, #24]
    1f36:	bd10      	pop	{r4, pc}
    1f38:	00002c74 	.word	0x00002c74
    1f3c:	00001e61 	.word	0x00001e61

00001f40 <__sfp>:
    1f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f42:	4b1c      	ldr	r3, [pc, #112]	; (1fb4 <__sfp+0x74>)
    1f44:	681e      	ldr	r6, [r3, #0]
    1f46:	69b3      	ldr	r3, [r6, #24]
    1f48:	4607      	mov	r7, r0
    1f4a:	b913      	cbnz	r3, 1f52 <__sfp+0x12>
    1f4c:	4630      	mov	r0, r6
    1f4e:	f7ff ffc7 	bl	1ee0 <__sinit>
    1f52:	3648      	adds	r6, #72	; 0x48
    1f54:	68b4      	ldr	r4, [r6, #8]
    1f56:	6873      	ldr	r3, [r6, #4]
    1f58:	3b01      	subs	r3, #1
    1f5a:	d503      	bpl.n	1f64 <__sfp+0x24>
    1f5c:	6833      	ldr	r3, [r6, #0]
    1f5e:	b133      	cbz	r3, 1f6e <__sfp+0x2e>
    1f60:	6836      	ldr	r6, [r6, #0]
    1f62:	e7f7      	b.n	1f54 <__sfp+0x14>
    1f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1f68:	b16d      	cbz	r5, 1f86 <__sfp+0x46>
    1f6a:	3468      	adds	r4, #104	; 0x68
    1f6c:	e7f4      	b.n	1f58 <__sfp+0x18>
    1f6e:	2104      	movs	r1, #4
    1f70:	4638      	mov	r0, r7
    1f72:	f7ff ff9f 	bl	1eb4 <__sfmoreglue>
    1f76:	6030      	str	r0, [r6, #0]
    1f78:	2800      	cmp	r0, #0
    1f7a:	d1f1      	bne.n	1f60 <__sfp+0x20>
    1f7c:	230c      	movs	r3, #12
    1f7e:	603b      	str	r3, [r7, #0]
    1f80:	4604      	mov	r4, r0
    1f82:	4620      	mov	r0, r4
    1f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f8a:	81e3      	strh	r3, [r4, #14]
    1f8c:	2301      	movs	r3, #1
    1f8e:	81a3      	strh	r3, [r4, #12]
    1f90:	6665      	str	r5, [r4, #100]	; 0x64
    1f92:	6025      	str	r5, [r4, #0]
    1f94:	60a5      	str	r5, [r4, #8]
    1f96:	6065      	str	r5, [r4, #4]
    1f98:	6125      	str	r5, [r4, #16]
    1f9a:	6165      	str	r5, [r4, #20]
    1f9c:	61a5      	str	r5, [r4, #24]
    1f9e:	2208      	movs	r2, #8
    1fa0:	4629      	mov	r1, r5
    1fa2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1fa6:	f7ff fd13 	bl	19d0 <memset>
    1faa:	6365      	str	r5, [r4, #52]	; 0x34
    1fac:	63a5      	str	r5, [r4, #56]	; 0x38
    1fae:	64a5      	str	r5, [r4, #72]	; 0x48
    1fb0:	64e5      	str	r5, [r4, #76]	; 0x4c
    1fb2:	e7e6      	b.n	1f82 <__sfp+0x42>
    1fb4:	00002c74 	.word	0x00002c74

00001fb8 <_fwalk_reent>:
    1fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1fbc:	4680      	mov	r8, r0
    1fbe:	4689      	mov	r9, r1
    1fc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1fc4:	2600      	movs	r6, #0
    1fc6:	b914      	cbnz	r4, 1fce <_fwalk_reent+0x16>
    1fc8:	4630      	mov	r0, r6
    1fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fce:	68a5      	ldr	r5, [r4, #8]
    1fd0:	6867      	ldr	r7, [r4, #4]
    1fd2:	3f01      	subs	r7, #1
    1fd4:	d501      	bpl.n	1fda <_fwalk_reent+0x22>
    1fd6:	6824      	ldr	r4, [r4, #0]
    1fd8:	e7f5      	b.n	1fc6 <_fwalk_reent+0xe>
    1fda:	89ab      	ldrh	r3, [r5, #12]
    1fdc:	2b01      	cmp	r3, #1
    1fde:	d907      	bls.n	1ff0 <_fwalk_reent+0x38>
    1fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1fe4:	3301      	adds	r3, #1
    1fe6:	d003      	beq.n	1ff0 <_fwalk_reent+0x38>
    1fe8:	4629      	mov	r1, r5
    1fea:	4640      	mov	r0, r8
    1fec:	47c8      	blx	r9
    1fee:	4306      	orrs	r6, r0
    1ff0:	3568      	adds	r5, #104	; 0x68
    1ff2:	e7ee      	b.n	1fd2 <_fwalk_reent+0x1a>

00001ff4 <__swhatbuf_r>:
    1ff4:	b570      	push	{r4, r5, r6, lr}
    1ff6:	460e      	mov	r6, r1
    1ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1ffc:	2900      	cmp	r1, #0
    1ffe:	b090      	sub	sp, #64	; 0x40
    2000:	4614      	mov	r4, r2
    2002:	461d      	mov	r5, r3
    2004:	da07      	bge.n	2016 <__swhatbuf_r+0x22>
    2006:	2300      	movs	r3, #0
    2008:	602b      	str	r3, [r5, #0]
    200a:	89b3      	ldrh	r3, [r6, #12]
    200c:	061a      	lsls	r2, r3, #24
    200e:	d410      	bmi.n	2032 <__swhatbuf_r+0x3e>
    2010:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2014:	e00e      	b.n	2034 <__swhatbuf_r+0x40>
    2016:	aa01      	add	r2, sp, #4
    2018:	f000 fc4e 	bl	28b8 <_fstat_r>
    201c:	2800      	cmp	r0, #0
    201e:	dbf2      	blt.n	2006 <__swhatbuf_r+0x12>
    2020:	9a02      	ldr	r2, [sp, #8]
    2022:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    2026:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    202a:	425a      	negs	r2, r3
    202c:	415a      	adcs	r2, r3
    202e:	602a      	str	r2, [r5, #0]
    2030:	e7ee      	b.n	2010 <__swhatbuf_r+0x1c>
    2032:	2340      	movs	r3, #64	; 0x40
    2034:	2000      	movs	r0, #0
    2036:	6023      	str	r3, [r4, #0]
    2038:	b010      	add	sp, #64	; 0x40
    203a:	bd70      	pop	{r4, r5, r6, pc}

0000203c <__smakebuf_r>:
    203c:	898b      	ldrh	r3, [r1, #12]
    203e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2040:	079d      	lsls	r5, r3, #30
    2042:	4606      	mov	r6, r0
    2044:	460c      	mov	r4, r1
    2046:	d507      	bpl.n	2058 <__smakebuf_r+0x1c>
    2048:	f104 0347 	add.w	r3, r4, #71	; 0x47
    204c:	6023      	str	r3, [r4, #0]
    204e:	6123      	str	r3, [r4, #16]
    2050:	2301      	movs	r3, #1
    2052:	6163      	str	r3, [r4, #20]
    2054:	b002      	add	sp, #8
    2056:	bd70      	pop	{r4, r5, r6, pc}
    2058:	ab01      	add	r3, sp, #4
    205a:	466a      	mov	r2, sp
    205c:	f7ff ffca 	bl	1ff4 <__swhatbuf_r>
    2060:	9900      	ldr	r1, [sp, #0]
    2062:	4605      	mov	r5, r0
    2064:	4630      	mov	r0, r6
    2066:	f000 f87f 	bl	2168 <_malloc_r>
    206a:	b948      	cbnz	r0, 2080 <__smakebuf_r+0x44>
    206c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2070:	059a      	lsls	r2, r3, #22
    2072:	d4ef      	bmi.n	2054 <__smakebuf_r+0x18>
    2074:	f023 0303 	bic.w	r3, r3, #3
    2078:	f043 0302 	orr.w	r3, r3, #2
    207c:	81a3      	strh	r3, [r4, #12]
    207e:	e7e3      	b.n	2048 <__smakebuf_r+0xc>
    2080:	4b0d      	ldr	r3, [pc, #52]	; (20b8 <__smakebuf_r+0x7c>)
    2082:	62b3      	str	r3, [r6, #40]	; 0x28
    2084:	89a3      	ldrh	r3, [r4, #12]
    2086:	6020      	str	r0, [r4, #0]
    2088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    208c:	81a3      	strh	r3, [r4, #12]
    208e:	9b00      	ldr	r3, [sp, #0]
    2090:	6163      	str	r3, [r4, #20]
    2092:	9b01      	ldr	r3, [sp, #4]
    2094:	6120      	str	r0, [r4, #16]
    2096:	b15b      	cbz	r3, 20b0 <__smakebuf_r+0x74>
    2098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    209c:	4630      	mov	r0, r6
    209e:	f000 fc1d 	bl	28dc <_isatty_r>
    20a2:	b128      	cbz	r0, 20b0 <__smakebuf_r+0x74>
    20a4:	89a3      	ldrh	r3, [r4, #12]
    20a6:	f023 0303 	bic.w	r3, r3, #3
    20aa:	f043 0301 	orr.w	r3, r3, #1
    20ae:	81a3      	strh	r3, [r4, #12]
    20b0:	89a3      	ldrh	r3, [r4, #12]
    20b2:	431d      	orrs	r5, r3
    20b4:	81a5      	strh	r5, [r4, #12]
    20b6:	e7cd      	b.n	2054 <__smakebuf_r+0x18>
    20b8:	00001e61 	.word	0x00001e61

000020bc <malloc>:
    20bc:	4b02      	ldr	r3, [pc, #8]	; (20c8 <malloc+0xc>)
    20be:	4601      	mov	r1, r0
    20c0:	6818      	ldr	r0, [r3, #0]
    20c2:	f000 b851 	b.w	2168 <_malloc_r>
    20c6:	bf00      	nop
    20c8:	20000000 	.word	0x20000000

000020cc <_free_r>:
    20cc:	b538      	push	{r3, r4, r5, lr}
    20ce:	4605      	mov	r5, r0
    20d0:	2900      	cmp	r1, #0
    20d2:	d045      	beq.n	2160 <_free_r+0x94>
    20d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    20d8:	1f0c      	subs	r4, r1, #4
    20da:	2b00      	cmp	r3, #0
    20dc:	bfb8      	it	lt
    20de:	18e4      	addlt	r4, r4, r3
    20e0:	f000 fc6e 	bl	29c0 <__malloc_lock>
    20e4:	4a1f      	ldr	r2, [pc, #124]	; (2164 <_free_r+0x98>)
    20e6:	6813      	ldr	r3, [r2, #0]
    20e8:	4610      	mov	r0, r2
    20ea:	b933      	cbnz	r3, 20fa <_free_r+0x2e>
    20ec:	6063      	str	r3, [r4, #4]
    20ee:	6014      	str	r4, [r2, #0]
    20f0:	4628      	mov	r0, r5
    20f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    20f6:	f000 bc64 	b.w	29c2 <__malloc_unlock>
    20fa:	42a3      	cmp	r3, r4
    20fc:	d90c      	bls.n	2118 <_free_r+0x4c>
    20fe:	6821      	ldr	r1, [r4, #0]
    2100:	1862      	adds	r2, r4, r1
    2102:	4293      	cmp	r3, r2
    2104:	bf04      	itt	eq
    2106:	681a      	ldreq	r2, [r3, #0]
    2108:	685b      	ldreq	r3, [r3, #4]
    210a:	6063      	str	r3, [r4, #4]
    210c:	bf04      	itt	eq
    210e:	1852      	addeq	r2, r2, r1
    2110:	6022      	streq	r2, [r4, #0]
    2112:	6004      	str	r4, [r0, #0]
    2114:	e7ec      	b.n	20f0 <_free_r+0x24>
    2116:	4613      	mov	r3, r2
    2118:	685a      	ldr	r2, [r3, #4]
    211a:	b10a      	cbz	r2, 2120 <_free_r+0x54>
    211c:	42a2      	cmp	r2, r4
    211e:	d9fa      	bls.n	2116 <_free_r+0x4a>
    2120:	6819      	ldr	r1, [r3, #0]
    2122:	1858      	adds	r0, r3, r1
    2124:	42a0      	cmp	r0, r4
    2126:	d10b      	bne.n	2140 <_free_r+0x74>
    2128:	6820      	ldr	r0, [r4, #0]
    212a:	4401      	add	r1, r0
    212c:	1858      	adds	r0, r3, r1
    212e:	4282      	cmp	r2, r0
    2130:	6019      	str	r1, [r3, #0]
    2132:	d1dd      	bne.n	20f0 <_free_r+0x24>
    2134:	6810      	ldr	r0, [r2, #0]
    2136:	6852      	ldr	r2, [r2, #4]
    2138:	605a      	str	r2, [r3, #4]
    213a:	4401      	add	r1, r0
    213c:	6019      	str	r1, [r3, #0]
    213e:	e7d7      	b.n	20f0 <_free_r+0x24>
    2140:	d902      	bls.n	2148 <_free_r+0x7c>
    2142:	230c      	movs	r3, #12
    2144:	602b      	str	r3, [r5, #0]
    2146:	e7d3      	b.n	20f0 <_free_r+0x24>
    2148:	6820      	ldr	r0, [r4, #0]
    214a:	1821      	adds	r1, r4, r0
    214c:	428a      	cmp	r2, r1
    214e:	bf04      	itt	eq
    2150:	6811      	ldreq	r1, [r2, #0]
    2152:	6852      	ldreq	r2, [r2, #4]
    2154:	6062      	str	r2, [r4, #4]
    2156:	bf04      	itt	eq
    2158:	1809      	addeq	r1, r1, r0
    215a:	6021      	streq	r1, [r4, #0]
    215c:	605c      	str	r4, [r3, #4]
    215e:	e7c7      	b.n	20f0 <_free_r+0x24>
    2160:	bd38      	pop	{r3, r4, r5, pc}
    2162:	bf00      	nop
    2164:	20000628 	.word	0x20000628

00002168 <_malloc_r>:
    2168:	b570      	push	{r4, r5, r6, lr}
    216a:	1ccd      	adds	r5, r1, #3
    216c:	f025 0503 	bic.w	r5, r5, #3
    2170:	3508      	adds	r5, #8
    2172:	2d0c      	cmp	r5, #12
    2174:	bf38      	it	cc
    2176:	250c      	movcc	r5, #12
    2178:	2d00      	cmp	r5, #0
    217a:	4606      	mov	r6, r0
    217c:	db01      	blt.n	2182 <_malloc_r+0x1a>
    217e:	42a9      	cmp	r1, r5
    2180:	d903      	bls.n	218a <_malloc_r+0x22>
    2182:	230c      	movs	r3, #12
    2184:	6033      	str	r3, [r6, #0]
    2186:	2000      	movs	r0, #0
    2188:	bd70      	pop	{r4, r5, r6, pc}
    218a:	f000 fc19 	bl	29c0 <__malloc_lock>
    218e:	4a23      	ldr	r2, [pc, #140]	; (221c <_malloc_r+0xb4>)
    2190:	6814      	ldr	r4, [r2, #0]
    2192:	4621      	mov	r1, r4
    2194:	b991      	cbnz	r1, 21bc <_malloc_r+0x54>
    2196:	4c22      	ldr	r4, [pc, #136]	; (2220 <_malloc_r+0xb8>)
    2198:	6823      	ldr	r3, [r4, #0]
    219a:	b91b      	cbnz	r3, 21a4 <_malloc_r+0x3c>
    219c:	4630      	mov	r0, r6
    219e:	f000 fb15 	bl	27cc <_sbrk_r>
    21a2:	6020      	str	r0, [r4, #0]
    21a4:	4629      	mov	r1, r5
    21a6:	4630      	mov	r0, r6
    21a8:	f000 fb10 	bl	27cc <_sbrk_r>
    21ac:	1c43      	adds	r3, r0, #1
    21ae:	d126      	bne.n	21fe <_malloc_r+0x96>
    21b0:	230c      	movs	r3, #12
    21b2:	6033      	str	r3, [r6, #0]
    21b4:	4630      	mov	r0, r6
    21b6:	f000 fc04 	bl	29c2 <__malloc_unlock>
    21ba:	e7e4      	b.n	2186 <_malloc_r+0x1e>
    21bc:	680b      	ldr	r3, [r1, #0]
    21be:	1b5b      	subs	r3, r3, r5
    21c0:	d41a      	bmi.n	21f8 <_malloc_r+0x90>
    21c2:	2b0b      	cmp	r3, #11
    21c4:	d90f      	bls.n	21e6 <_malloc_r+0x7e>
    21c6:	600b      	str	r3, [r1, #0]
    21c8:	50cd      	str	r5, [r1, r3]
    21ca:	18cc      	adds	r4, r1, r3
    21cc:	4630      	mov	r0, r6
    21ce:	f000 fbf8 	bl	29c2 <__malloc_unlock>
    21d2:	f104 000b 	add.w	r0, r4, #11
    21d6:	1d23      	adds	r3, r4, #4
    21d8:	f020 0007 	bic.w	r0, r0, #7
    21dc:	1ac3      	subs	r3, r0, r3
    21de:	d01b      	beq.n	2218 <_malloc_r+0xb0>
    21e0:	425a      	negs	r2, r3
    21e2:	50e2      	str	r2, [r4, r3]
    21e4:	bd70      	pop	{r4, r5, r6, pc}
    21e6:	428c      	cmp	r4, r1
    21e8:	bf0d      	iteet	eq
    21ea:	6863      	ldreq	r3, [r4, #4]
    21ec:	684b      	ldrne	r3, [r1, #4]
    21ee:	6063      	strne	r3, [r4, #4]
    21f0:	6013      	streq	r3, [r2, #0]
    21f2:	bf18      	it	ne
    21f4:	460c      	movne	r4, r1
    21f6:	e7e9      	b.n	21cc <_malloc_r+0x64>
    21f8:	460c      	mov	r4, r1
    21fa:	6849      	ldr	r1, [r1, #4]
    21fc:	e7ca      	b.n	2194 <_malloc_r+0x2c>
    21fe:	1cc4      	adds	r4, r0, #3
    2200:	f024 0403 	bic.w	r4, r4, #3
    2204:	42a0      	cmp	r0, r4
    2206:	d005      	beq.n	2214 <_malloc_r+0xac>
    2208:	1a21      	subs	r1, r4, r0
    220a:	4630      	mov	r0, r6
    220c:	f000 fade 	bl	27cc <_sbrk_r>
    2210:	3001      	adds	r0, #1
    2212:	d0cd      	beq.n	21b0 <_malloc_r+0x48>
    2214:	6025      	str	r5, [r4, #0]
    2216:	e7d9      	b.n	21cc <_malloc_r+0x64>
    2218:	bd70      	pop	{r4, r5, r6, pc}
    221a:	bf00      	nop
    221c:	20000628 	.word	0x20000628
    2220:	2000062c 	.word	0x2000062c

00002224 <__sfputc_r>:
    2224:	6893      	ldr	r3, [r2, #8]
    2226:	3b01      	subs	r3, #1
    2228:	2b00      	cmp	r3, #0
    222a:	b410      	push	{r4}
    222c:	6093      	str	r3, [r2, #8]
    222e:	da08      	bge.n	2242 <__sfputc_r+0x1e>
    2230:	6994      	ldr	r4, [r2, #24]
    2232:	42a3      	cmp	r3, r4
    2234:	db02      	blt.n	223c <__sfputc_r+0x18>
    2236:	b2cb      	uxtb	r3, r1
    2238:	2b0a      	cmp	r3, #10
    223a:	d102      	bne.n	2242 <__sfputc_r+0x1e>
    223c:	bc10      	pop	{r4}
    223e:	f7ff bc9d 	b.w	1b7c <__swbuf_r>
    2242:	6813      	ldr	r3, [r2, #0]
    2244:	1c58      	adds	r0, r3, #1
    2246:	6010      	str	r0, [r2, #0]
    2248:	7019      	strb	r1, [r3, #0]
    224a:	b2c8      	uxtb	r0, r1
    224c:	bc10      	pop	{r4}
    224e:	4770      	bx	lr

00002250 <__sfputs_r>:
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2252:	4606      	mov	r6, r0
    2254:	460f      	mov	r7, r1
    2256:	4614      	mov	r4, r2
    2258:	18d5      	adds	r5, r2, r3
    225a:	42ac      	cmp	r4, r5
    225c:	d101      	bne.n	2262 <__sfputs_r+0x12>
    225e:	2000      	movs	r0, #0
    2260:	e007      	b.n	2272 <__sfputs_r+0x22>
    2262:	463a      	mov	r2, r7
    2264:	f814 1b01 	ldrb.w	r1, [r4], #1
    2268:	4630      	mov	r0, r6
    226a:	f7ff ffdb 	bl	2224 <__sfputc_r>
    226e:	1c43      	adds	r3, r0, #1
    2270:	d1f3      	bne.n	225a <__sfputs_r+0xa>
    2272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002274 <_vfiprintf_r>:
    2274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2278:	b09d      	sub	sp, #116	; 0x74
    227a:	460c      	mov	r4, r1
    227c:	4617      	mov	r7, r2
    227e:	9303      	str	r3, [sp, #12]
    2280:	4606      	mov	r6, r0
    2282:	b118      	cbz	r0, 228c <_vfiprintf_r+0x18>
    2284:	6983      	ldr	r3, [r0, #24]
    2286:	b90b      	cbnz	r3, 228c <_vfiprintf_r+0x18>
    2288:	f7ff fe2a 	bl	1ee0 <__sinit>
    228c:	4b7c      	ldr	r3, [pc, #496]	; (2480 <_vfiprintf_r+0x20c>)
    228e:	429c      	cmp	r4, r3
    2290:	d157      	bne.n	2342 <_vfiprintf_r+0xce>
    2292:	6874      	ldr	r4, [r6, #4]
    2294:	89a3      	ldrh	r3, [r4, #12]
    2296:	0718      	lsls	r0, r3, #28
    2298:	d55d      	bpl.n	2356 <_vfiprintf_r+0xe2>
    229a:	6923      	ldr	r3, [r4, #16]
    229c:	2b00      	cmp	r3, #0
    229e:	d05a      	beq.n	2356 <_vfiprintf_r+0xe2>
    22a0:	2300      	movs	r3, #0
    22a2:	9309      	str	r3, [sp, #36]	; 0x24
    22a4:	2320      	movs	r3, #32
    22a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    22aa:	2330      	movs	r3, #48	; 0x30
    22ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    22b0:	f04f 0b01 	mov.w	fp, #1
    22b4:	46b8      	mov	r8, r7
    22b6:	4645      	mov	r5, r8
    22b8:	f815 3b01 	ldrb.w	r3, [r5], #1
    22bc:	2b00      	cmp	r3, #0
    22be:	d155      	bne.n	236c <_vfiprintf_r+0xf8>
    22c0:	ebb8 0a07 	subs.w	sl, r8, r7
    22c4:	d00b      	beq.n	22de <_vfiprintf_r+0x6a>
    22c6:	4653      	mov	r3, sl
    22c8:	463a      	mov	r2, r7
    22ca:	4621      	mov	r1, r4
    22cc:	4630      	mov	r0, r6
    22ce:	f7ff ffbf 	bl	2250 <__sfputs_r>
    22d2:	3001      	adds	r0, #1
    22d4:	f000 80c4 	beq.w	2460 <_vfiprintf_r+0x1ec>
    22d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22da:	4453      	add	r3, sl
    22dc:	9309      	str	r3, [sp, #36]	; 0x24
    22de:	f898 3000 	ldrb.w	r3, [r8]
    22e2:	2b00      	cmp	r3, #0
    22e4:	f000 80bc 	beq.w	2460 <_vfiprintf_r+0x1ec>
    22e8:	2300      	movs	r3, #0
    22ea:	f04f 32ff 	mov.w	r2, #4294967295
    22ee:	9304      	str	r3, [sp, #16]
    22f0:	9307      	str	r3, [sp, #28]
    22f2:	9205      	str	r2, [sp, #20]
    22f4:	9306      	str	r3, [sp, #24]
    22f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    22fa:	931a      	str	r3, [sp, #104]	; 0x68
    22fc:	2205      	movs	r2, #5
    22fe:	7829      	ldrb	r1, [r5, #0]
    2300:	4860      	ldr	r0, [pc, #384]	; (2484 <_vfiprintf_r+0x210>)
    2302:	f000 fb0d 	bl	2920 <memchr>
    2306:	f105 0801 	add.w	r8, r5, #1
    230a:	9b04      	ldr	r3, [sp, #16]
    230c:	2800      	cmp	r0, #0
    230e:	d131      	bne.n	2374 <_vfiprintf_r+0x100>
    2310:	06d9      	lsls	r1, r3, #27
    2312:	bf44      	itt	mi
    2314:	2220      	movmi	r2, #32
    2316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    231a:	071a      	lsls	r2, r3, #28
    231c:	bf44      	itt	mi
    231e:	222b      	movmi	r2, #43	; 0x2b
    2320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2324:	782a      	ldrb	r2, [r5, #0]
    2326:	2a2a      	cmp	r2, #42	; 0x2a
    2328:	d02c      	beq.n	2384 <_vfiprintf_r+0x110>
    232a:	9a07      	ldr	r2, [sp, #28]
    232c:	2100      	movs	r1, #0
    232e:	200a      	movs	r0, #10
    2330:	46a8      	mov	r8, r5
    2332:	3501      	adds	r5, #1
    2334:	f898 3000 	ldrb.w	r3, [r8]
    2338:	3b30      	subs	r3, #48	; 0x30
    233a:	2b09      	cmp	r3, #9
    233c:	d96d      	bls.n	241a <_vfiprintf_r+0x1a6>
    233e:	b371      	cbz	r1, 239e <_vfiprintf_r+0x12a>
    2340:	e026      	b.n	2390 <_vfiprintf_r+0x11c>
    2342:	4b51      	ldr	r3, [pc, #324]	; (2488 <_vfiprintf_r+0x214>)
    2344:	429c      	cmp	r4, r3
    2346:	d101      	bne.n	234c <_vfiprintf_r+0xd8>
    2348:	68b4      	ldr	r4, [r6, #8]
    234a:	e7a3      	b.n	2294 <_vfiprintf_r+0x20>
    234c:	4b4f      	ldr	r3, [pc, #316]	; (248c <_vfiprintf_r+0x218>)
    234e:	429c      	cmp	r4, r3
    2350:	bf08      	it	eq
    2352:	68f4      	ldreq	r4, [r6, #12]
    2354:	e79e      	b.n	2294 <_vfiprintf_r+0x20>
    2356:	4621      	mov	r1, r4
    2358:	4630      	mov	r0, r6
    235a:	f7ff fc61 	bl	1c20 <__swsetup_r>
    235e:	2800      	cmp	r0, #0
    2360:	d09e      	beq.n	22a0 <_vfiprintf_r+0x2c>
    2362:	f04f 30ff 	mov.w	r0, #4294967295
    2366:	b01d      	add	sp, #116	; 0x74
    2368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    236c:	2b25      	cmp	r3, #37	; 0x25
    236e:	d0a7      	beq.n	22c0 <_vfiprintf_r+0x4c>
    2370:	46a8      	mov	r8, r5
    2372:	e7a0      	b.n	22b6 <_vfiprintf_r+0x42>
    2374:	4a43      	ldr	r2, [pc, #268]	; (2484 <_vfiprintf_r+0x210>)
    2376:	1a80      	subs	r0, r0, r2
    2378:	fa0b f000 	lsl.w	r0, fp, r0
    237c:	4318      	orrs	r0, r3
    237e:	9004      	str	r0, [sp, #16]
    2380:	4645      	mov	r5, r8
    2382:	e7bb      	b.n	22fc <_vfiprintf_r+0x88>
    2384:	9a03      	ldr	r2, [sp, #12]
    2386:	1d11      	adds	r1, r2, #4
    2388:	6812      	ldr	r2, [r2, #0]
    238a:	9103      	str	r1, [sp, #12]
    238c:	2a00      	cmp	r2, #0
    238e:	db01      	blt.n	2394 <_vfiprintf_r+0x120>
    2390:	9207      	str	r2, [sp, #28]
    2392:	e004      	b.n	239e <_vfiprintf_r+0x12a>
    2394:	4252      	negs	r2, r2
    2396:	f043 0302 	orr.w	r3, r3, #2
    239a:	9207      	str	r2, [sp, #28]
    239c:	9304      	str	r3, [sp, #16]
    239e:	f898 3000 	ldrb.w	r3, [r8]
    23a2:	2b2e      	cmp	r3, #46	; 0x2e
    23a4:	d110      	bne.n	23c8 <_vfiprintf_r+0x154>
    23a6:	f898 3001 	ldrb.w	r3, [r8, #1]
    23aa:	2b2a      	cmp	r3, #42	; 0x2a
    23ac:	f108 0101 	add.w	r1, r8, #1
    23b0:	d137      	bne.n	2422 <_vfiprintf_r+0x1ae>
    23b2:	9b03      	ldr	r3, [sp, #12]
    23b4:	1d1a      	adds	r2, r3, #4
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	9203      	str	r2, [sp, #12]
    23ba:	2b00      	cmp	r3, #0
    23bc:	bfb8      	it	lt
    23be:	f04f 33ff 	movlt.w	r3, #4294967295
    23c2:	f108 0802 	add.w	r8, r8, #2
    23c6:	9305      	str	r3, [sp, #20]
    23c8:	4d31      	ldr	r5, [pc, #196]	; (2490 <_vfiprintf_r+0x21c>)
    23ca:	f898 1000 	ldrb.w	r1, [r8]
    23ce:	2203      	movs	r2, #3
    23d0:	4628      	mov	r0, r5
    23d2:	f000 faa5 	bl	2920 <memchr>
    23d6:	b140      	cbz	r0, 23ea <_vfiprintf_r+0x176>
    23d8:	2340      	movs	r3, #64	; 0x40
    23da:	1b40      	subs	r0, r0, r5
    23dc:	fa03 f000 	lsl.w	r0, r3, r0
    23e0:	9b04      	ldr	r3, [sp, #16]
    23e2:	4303      	orrs	r3, r0
    23e4:	9304      	str	r3, [sp, #16]
    23e6:	f108 0801 	add.w	r8, r8, #1
    23ea:	f898 1000 	ldrb.w	r1, [r8]
    23ee:	4829      	ldr	r0, [pc, #164]	; (2494 <_vfiprintf_r+0x220>)
    23f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    23f4:	2206      	movs	r2, #6
    23f6:	f108 0701 	add.w	r7, r8, #1
    23fa:	f000 fa91 	bl	2920 <memchr>
    23fe:	2800      	cmp	r0, #0
    2400:	d034      	beq.n	246c <_vfiprintf_r+0x1f8>
    2402:	4b25      	ldr	r3, [pc, #148]	; (2498 <_vfiprintf_r+0x224>)
    2404:	bb03      	cbnz	r3, 2448 <_vfiprintf_r+0x1d4>
    2406:	9b03      	ldr	r3, [sp, #12]
    2408:	3307      	adds	r3, #7
    240a:	f023 0307 	bic.w	r3, r3, #7
    240e:	3308      	adds	r3, #8
    2410:	9303      	str	r3, [sp, #12]
    2412:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2414:	444b      	add	r3, r9
    2416:	9309      	str	r3, [sp, #36]	; 0x24
    2418:	e74c      	b.n	22b4 <_vfiprintf_r+0x40>
    241a:	fb00 3202 	mla	r2, r0, r2, r3
    241e:	2101      	movs	r1, #1
    2420:	e786      	b.n	2330 <_vfiprintf_r+0xbc>
    2422:	2300      	movs	r3, #0
    2424:	9305      	str	r3, [sp, #20]
    2426:	4618      	mov	r0, r3
    2428:	250a      	movs	r5, #10
    242a:	4688      	mov	r8, r1
    242c:	3101      	adds	r1, #1
    242e:	f898 2000 	ldrb.w	r2, [r8]
    2432:	3a30      	subs	r2, #48	; 0x30
    2434:	2a09      	cmp	r2, #9
    2436:	d903      	bls.n	2440 <_vfiprintf_r+0x1cc>
    2438:	2b00      	cmp	r3, #0
    243a:	d0c5      	beq.n	23c8 <_vfiprintf_r+0x154>
    243c:	9005      	str	r0, [sp, #20]
    243e:	e7c3      	b.n	23c8 <_vfiprintf_r+0x154>
    2440:	fb05 2000 	mla	r0, r5, r0, r2
    2444:	2301      	movs	r3, #1
    2446:	e7f0      	b.n	242a <_vfiprintf_r+0x1b6>
    2448:	ab03      	add	r3, sp, #12
    244a:	9300      	str	r3, [sp, #0]
    244c:	4622      	mov	r2, r4
    244e:	4b13      	ldr	r3, [pc, #76]	; (249c <_vfiprintf_r+0x228>)
    2450:	a904      	add	r1, sp, #16
    2452:	4630      	mov	r0, r6
    2454:	f3af 8000 	nop.w
    2458:	f1b0 3fff 	cmp.w	r0, #4294967295
    245c:	4681      	mov	r9, r0
    245e:	d1d8      	bne.n	2412 <_vfiprintf_r+0x19e>
    2460:	89a3      	ldrh	r3, [r4, #12]
    2462:	065b      	lsls	r3, r3, #25
    2464:	f53f af7d 	bmi.w	2362 <_vfiprintf_r+0xee>
    2468:	9809      	ldr	r0, [sp, #36]	; 0x24
    246a:	e77c      	b.n	2366 <_vfiprintf_r+0xf2>
    246c:	ab03      	add	r3, sp, #12
    246e:	9300      	str	r3, [sp, #0]
    2470:	4622      	mov	r2, r4
    2472:	4b0a      	ldr	r3, [pc, #40]	; (249c <_vfiprintf_r+0x228>)
    2474:	a904      	add	r1, sp, #16
    2476:	4630      	mov	r0, r6
    2478:	f000 f888 	bl	258c <_printf_i>
    247c:	e7ec      	b.n	2458 <_vfiprintf_r+0x1e4>
    247e:	bf00      	nop
    2480:	00002c98 	.word	0x00002c98
    2484:	00002cd8 	.word	0x00002cd8
    2488:	00002cb8 	.word	0x00002cb8
    248c:	00002c78 	.word	0x00002c78
    2490:	00002cde 	.word	0x00002cde
    2494:	00002ce2 	.word	0x00002ce2
    2498:	00000000 	.word	0x00000000
    249c:	00002251 	.word	0x00002251

000024a0 <_printf_common>:
    24a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24a4:	4691      	mov	r9, r2
    24a6:	461f      	mov	r7, r3
    24a8:	688a      	ldr	r2, [r1, #8]
    24aa:	690b      	ldr	r3, [r1, #16]
    24ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
    24b0:	4293      	cmp	r3, r2
    24b2:	bfb8      	it	lt
    24b4:	4613      	movlt	r3, r2
    24b6:	f8c9 3000 	str.w	r3, [r9]
    24ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    24be:	4606      	mov	r6, r0
    24c0:	460c      	mov	r4, r1
    24c2:	b112      	cbz	r2, 24ca <_printf_common+0x2a>
    24c4:	3301      	adds	r3, #1
    24c6:	f8c9 3000 	str.w	r3, [r9]
    24ca:	6823      	ldr	r3, [r4, #0]
    24cc:	0699      	lsls	r1, r3, #26
    24ce:	bf42      	ittt	mi
    24d0:	f8d9 3000 	ldrmi.w	r3, [r9]
    24d4:	3302      	addmi	r3, #2
    24d6:	f8c9 3000 	strmi.w	r3, [r9]
    24da:	6825      	ldr	r5, [r4, #0]
    24dc:	f015 0506 	ands.w	r5, r5, #6
    24e0:	d107      	bne.n	24f2 <_printf_common+0x52>
    24e2:	f104 0a19 	add.w	sl, r4, #25
    24e6:	68e3      	ldr	r3, [r4, #12]
    24e8:	f8d9 2000 	ldr.w	r2, [r9]
    24ec:	1a9b      	subs	r3, r3, r2
    24ee:	429d      	cmp	r5, r3
    24f0:	db29      	blt.n	2546 <_printf_common+0xa6>
    24f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    24f6:	6822      	ldr	r2, [r4, #0]
    24f8:	3300      	adds	r3, #0
    24fa:	bf18      	it	ne
    24fc:	2301      	movne	r3, #1
    24fe:	0692      	lsls	r2, r2, #26
    2500:	d42e      	bmi.n	2560 <_printf_common+0xc0>
    2502:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2506:	4639      	mov	r1, r7
    2508:	4630      	mov	r0, r6
    250a:	47c0      	blx	r8
    250c:	3001      	adds	r0, #1
    250e:	d021      	beq.n	2554 <_printf_common+0xb4>
    2510:	6823      	ldr	r3, [r4, #0]
    2512:	68e5      	ldr	r5, [r4, #12]
    2514:	f8d9 2000 	ldr.w	r2, [r9]
    2518:	f003 0306 	and.w	r3, r3, #6
    251c:	2b04      	cmp	r3, #4
    251e:	bf08      	it	eq
    2520:	1aad      	subeq	r5, r5, r2
    2522:	68a3      	ldr	r3, [r4, #8]
    2524:	6922      	ldr	r2, [r4, #16]
    2526:	bf0c      	ite	eq
    2528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    252c:	2500      	movne	r5, #0
    252e:	4293      	cmp	r3, r2
    2530:	bfc4      	itt	gt
    2532:	1a9b      	subgt	r3, r3, r2
    2534:	18ed      	addgt	r5, r5, r3
    2536:	f04f 0900 	mov.w	r9, #0
    253a:	341a      	adds	r4, #26
    253c:	454d      	cmp	r5, r9
    253e:	d11b      	bne.n	2578 <_printf_common+0xd8>
    2540:	2000      	movs	r0, #0
    2542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2546:	2301      	movs	r3, #1
    2548:	4652      	mov	r2, sl
    254a:	4639      	mov	r1, r7
    254c:	4630      	mov	r0, r6
    254e:	47c0      	blx	r8
    2550:	3001      	adds	r0, #1
    2552:	d103      	bne.n	255c <_printf_common+0xbc>
    2554:	f04f 30ff 	mov.w	r0, #4294967295
    2558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    255c:	3501      	adds	r5, #1
    255e:	e7c2      	b.n	24e6 <_printf_common+0x46>
    2560:	18e1      	adds	r1, r4, r3
    2562:	1c5a      	adds	r2, r3, #1
    2564:	2030      	movs	r0, #48	; 0x30
    2566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    256a:	4422      	add	r2, r4
    256c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2574:	3302      	adds	r3, #2
    2576:	e7c4      	b.n	2502 <_printf_common+0x62>
    2578:	2301      	movs	r3, #1
    257a:	4622      	mov	r2, r4
    257c:	4639      	mov	r1, r7
    257e:	4630      	mov	r0, r6
    2580:	47c0      	blx	r8
    2582:	3001      	adds	r0, #1
    2584:	d0e6      	beq.n	2554 <_printf_common+0xb4>
    2586:	f109 0901 	add.w	r9, r9, #1
    258a:	e7d7      	b.n	253c <_printf_common+0x9c>

0000258c <_printf_i>:
    258c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2590:	4617      	mov	r7, r2
    2592:	7e0a      	ldrb	r2, [r1, #24]
    2594:	b085      	sub	sp, #20
    2596:	2a6e      	cmp	r2, #110	; 0x6e
    2598:	4698      	mov	r8, r3
    259a:	4606      	mov	r6, r0
    259c:	460c      	mov	r4, r1
    259e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    25a4:	f000 80bc 	beq.w	2720 <_printf_i+0x194>
    25a8:	d81a      	bhi.n	25e0 <_printf_i+0x54>
    25aa:	2a63      	cmp	r2, #99	; 0x63
    25ac:	d02e      	beq.n	260c <_printf_i+0x80>
    25ae:	d80a      	bhi.n	25c6 <_printf_i+0x3a>
    25b0:	2a00      	cmp	r2, #0
    25b2:	f000 80c8 	beq.w	2746 <_printf_i+0x1ba>
    25b6:	2a58      	cmp	r2, #88	; 0x58
    25b8:	f000 808a 	beq.w	26d0 <_printf_i+0x144>
    25bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    25c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    25c4:	e02a      	b.n	261c <_printf_i+0x90>
    25c6:	2a64      	cmp	r2, #100	; 0x64
    25c8:	d001      	beq.n	25ce <_printf_i+0x42>
    25ca:	2a69      	cmp	r2, #105	; 0x69
    25cc:	d1f6      	bne.n	25bc <_printf_i+0x30>
    25ce:	6821      	ldr	r1, [r4, #0]
    25d0:	681a      	ldr	r2, [r3, #0]
    25d2:	f011 0f80 	tst.w	r1, #128	; 0x80
    25d6:	d023      	beq.n	2620 <_printf_i+0x94>
    25d8:	1d11      	adds	r1, r2, #4
    25da:	6019      	str	r1, [r3, #0]
    25dc:	6813      	ldr	r3, [r2, #0]
    25de:	e027      	b.n	2630 <_printf_i+0xa4>
    25e0:	2a73      	cmp	r2, #115	; 0x73
    25e2:	f000 80b4 	beq.w	274e <_printf_i+0x1c2>
    25e6:	d808      	bhi.n	25fa <_printf_i+0x6e>
    25e8:	2a6f      	cmp	r2, #111	; 0x6f
    25ea:	d02a      	beq.n	2642 <_printf_i+0xb6>
    25ec:	2a70      	cmp	r2, #112	; 0x70
    25ee:	d1e5      	bne.n	25bc <_printf_i+0x30>
    25f0:	680a      	ldr	r2, [r1, #0]
    25f2:	f042 0220 	orr.w	r2, r2, #32
    25f6:	600a      	str	r2, [r1, #0]
    25f8:	e003      	b.n	2602 <_printf_i+0x76>
    25fa:	2a75      	cmp	r2, #117	; 0x75
    25fc:	d021      	beq.n	2642 <_printf_i+0xb6>
    25fe:	2a78      	cmp	r2, #120	; 0x78
    2600:	d1dc      	bne.n	25bc <_printf_i+0x30>
    2602:	2278      	movs	r2, #120	; 0x78
    2604:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    2608:	496e      	ldr	r1, [pc, #440]	; (27c4 <_printf_i+0x238>)
    260a:	e064      	b.n	26d6 <_printf_i+0x14a>
    260c:	681a      	ldr	r2, [r3, #0]
    260e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    2612:	1d11      	adds	r1, r2, #4
    2614:	6019      	str	r1, [r3, #0]
    2616:	6813      	ldr	r3, [r2, #0]
    2618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    261c:	2301      	movs	r3, #1
    261e:	e0a3      	b.n	2768 <_printf_i+0x1dc>
    2620:	f011 0f40 	tst.w	r1, #64	; 0x40
    2624:	f102 0104 	add.w	r1, r2, #4
    2628:	6019      	str	r1, [r3, #0]
    262a:	d0d7      	beq.n	25dc <_printf_i+0x50>
    262c:	f9b2 3000 	ldrsh.w	r3, [r2]
    2630:	2b00      	cmp	r3, #0
    2632:	da03      	bge.n	263c <_printf_i+0xb0>
    2634:	222d      	movs	r2, #45	; 0x2d
    2636:	425b      	negs	r3, r3
    2638:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    263c:	4962      	ldr	r1, [pc, #392]	; (27c8 <_printf_i+0x23c>)
    263e:	220a      	movs	r2, #10
    2640:	e017      	b.n	2672 <_printf_i+0xe6>
    2642:	6820      	ldr	r0, [r4, #0]
    2644:	6819      	ldr	r1, [r3, #0]
    2646:	f010 0f80 	tst.w	r0, #128	; 0x80
    264a:	d003      	beq.n	2654 <_printf_i+0xc8>
    264c:	1d08      	adds	r0, r1, #4
    264e:	6018      	str	r0, [r3, #0]
    2650:	680b      	ldr	r3, [r1, #0]
    2652:	e006      	b.n	2662 <_printf_i+0xd6>
    2654:	f010 0f40 	tst.w	r0, #64	; 0x40
    2658:	f101 0004 	add.w	r0, r1, #4
    265c:	6018      	str	r0, [r3, #0]
    265e:	d0f7      	beq.n	2650 <_printf_i+0xc4>
    2660:	880b      	ldrh	r3, [r1, #0]
    2662:	4959      	ldr	r1, [pc, #356]	; (27c8 <_printf_i+0x23c>)
    2664:	2a6f      	cmp	r2, #111	; 0x6f
    2666:	bf14      	ite	ne
    2668:	220a      	movne	r2, #10
    266a:	2208      	moveq	r2, #8
    266c:	2000      	movs	r0, #0
    266e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    2672:	6865      	ldr	r5, [r4, #4]
    2674:	60a5      	str	r5, [r4, #8]
    2676:	2d00      	cmp	r5, #0
    2678:	f2c0 809c 	blt.w	27b4 <_printf_i+0x228>
    267c:	6820      	ldr	r0, [r4, #0]
    267e:	f020 0004 	bic.w	r0, r0, #4
    2682:	6020      	str	r0, [r4, #0]
    2684:	2b00      	cmp	r3, #0
    2686:	d13f      	bne.n	2708 <_printf_i+0x17c>
    2688:	2d00      	cmp	r5, #0
    268a:	f040 8095 	bne.w	27b8 <_printf_i+0x22c>
    268e:	4675      	mov	r5, lr
    2690:	2a08      	cmp	r2, #8
    2692:	d10b      	bne.n	26ac <_printf_i+0x120>
    2694:	6823      	ldr	r3, [r4, #0]
    2696:	07da      	lsls	r2, r3, #31
    2698:	d508      	bpl.n	26ac <_printf_i+0x120>
    269a:	6923      	ldr	r3, [r4, #16]
    269c:	6862      	ldr	r2, [r4, #4]
    269e:	429a      	cmp	r2, r3
    26a0:	bfde      	ittt	le
    26a2:	2330      	movle	r3, #48	; 0x30
    26a4:	f805 3c01 	strble.w	r3, [r5, #-1]
    26a8:	f105 35ff 	addle.w	r5, r5, #4294967295
    26ac:	ebae 0305 	sub.w	r3, lr, r5
    26b0:	6123      	str	r3, [r4, #16]
    26b2:	f8cd 8000 	str.w	r8, [sp]
    26b6:	463b      	mov	r3, r7
    26b8:	aa03      	add	r2, sp, #12
    26ba:	4621      	mov	r1, r4
    26bc:	4630      	mov	r0, r6
    26be:	f7ff feef 	bl	24a0 <_printf_common>
    26c2:	3001      	adds	r0, #1
    26c4:	d155      	bne.n	2772 <_printf_i+0x1e6>
    26c6:	f04f 30ff 	mov.w	r0, #4294967295
    26ca:	b005      	add	sp, #20
    26cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    26d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    26d4:	493c      	ldr	r1, [pc, #240]	; (27c8 <_printf_i+0x23c>)
    26d6:	6822      	ldr	r2, [r4, #0]
    26d8:	6818      	ldr	r0, [r3, #0]
    26da:	f012 0f80 	tst.w	r2, #128	; 0x80
    26de:	f100 0504 	add.w	r5, r0, #4
    26e2:	601d      	str	r5, [r3, #0]
    26e4:	d001      	beq.n	26ea <_printf_i+0x15e>
    26e6:	6803      	ldr	r3, [r0, #0]
    26e8:	e002      	b.n	26f0 <_printf_i+0x164>
    26ea:	0655      	lsls	r5, r2, #25
    26ec:	d5fb      	bpl.n	26e6 <_printf_i+0x15a>
    26ee:	8803      	ldrh	r3, [r0, #0]
    26f0:	07d0      	lsls	r0, r2, #31
    26f2:	bf44      	itt	mi
    26f4:	f042 0220 	orrmi.w	r2, r2, #32
    26f8:	6022      	strmi	r2, [r4, #0]
    26fa:	b91b      	cbnz	r3, 2704 <_printf_i+0x178>
    26fc:	6822      	ldr	r2, [r4, #0]
    26fe:	f022 0220 	bic.w	r2, r2, #32
    2702:	6022      	str	r2, [r4, #0]
    2704:	2210      	movs	r2, #16
    2706:	e7b1      	b.n	266c <_printf_i+0xe0>
    2708:	4675      	mov	r5, lr
    270a:	fbb3 f0f2 	udiv	r0, r3, r2
    270e:	fb02 3310 	mls	r3, r2, r0, r3
    2712:	5ccb      	ldrb	r3, [r1, r3]
    2714:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2718:	4603      	mov	r3, r0
    271a:	2800      	cmp	r0, #0
    271c:	d1f5      	bne.n	270a <_printf_i+0x17e>
    271e:	e7b7      	b.n	2690 <_printf_i+0x104>
    2720:	6808      	ldr	r0, [r1, #0]
    2722:	681a      	ldr	r2, [r3, #0]
    2724:	6949      	ldr	r1, [r1, #20]
    2726:	f010 0f80 	tst.w	r0, #128	; 0x80
    272a:	d004      	beq.n	2736 <_printf_i+0x1aa>
    272c:	1d10      	adds	r0, r2, #4
    272e:	6018      	str	r0, [r3, #0]
    2730:	6813      	ldr	r3, [r2, #0]
    2732:	6019      	str	r1, [r3, #0]
    2734:	e007      	b.n	2746 <_printf_i+0x1ba>
    2736:	f010 0f40 	tst.w	r0, #64	; 0x40
    273a:	f102 0004 	add.w	r0, r2, #4
    273e:	6018      	str	r0, [r3, #0]
    2740:	6813      	ldr	r3, [r2, #0]
    2742:	d0f6      	beq.n	2732 <_printf_i+0x1a6>
    2744:	8019      	strh	r1, [r3, #0]
    2746:	2300      	movs	r3, #0
    2748:	6123      	str	r3, [r4, #16]
    274a:	4675      	mov	r5, lr
    274c:	e7b1      	b.n	26b2 <_printf_i+0x126>
    274e:	681a      	ldr	r2, [r3, #0]
    2750:	1d11      	adds	r1, r2, #4
    2752:	6019      	str	r1, [r3, #0]
    2754:	6815      	ldr	r5, [r2, #0]
    2756:	6862      	ldr	r2, [r4, #4]
    2758:	2100      	movs	r1, #0
    275a:	4628      	mov	r0, r5
    275c:	f000 f8e0 	bl	2920 <memchr>
    2760:	b108      	cbz	r0, 2766 <_printf_i+0x1da>
    2762:	1b40      	subs	r0, r0, r5
    2764:	6060      	str	r0, [r4, #4]
    2766:	6863      	ldr	r3, [r4, #4]
    2768:	6123      	str	r3, [r4, #16]
    276a:	2300      	movs	r3, #0
    276c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2770:	e79f      	b.n	26b2 <_printf_i+0x126>
    2772:	6923      	ldr	r3, [r4, #16]
    2774:	462a      	mov	r2, r5
    2776:	4639      	mov	r1, r7
    2778:	4630      	mov	r0, r6
    277a:	47c0      	blx	r8
    277c:	3001      	adds	r0, #1
    277e:	d0a2      	beq.n	26c6 <_printf_i+0x13a>
    2780:	6823      	ldr	r3, [r4, #0]
    2782:	079b      	lsls	r3, r3, #30
    2784:	d507      	bpl.n	2796 <_printf_i+0x20a>
    2786:	2500      	movs	r5, #0
    2788:	f104 0919 	add.w	r9, r4, #25
    278c:	68e3      	ldr	r3, [r4, #12]
    278e:	9a03      	ldr	r2, [sp, #12]
    2790:	1a9b      	subs	r3, r3, r2
    2792:	429d      	cmp	r5, r3
    2794:	db05      	blt.n	27a2 <_printf_i+0x216>
    2796:	68e0      	ldr	r0, [r4, #12]
    2798:	9b03      	ldr	r3, [sp, #12]
    279a:	4298      	cmp	r0, r3
    279c:	bfb8      	it	lt
    279e:	4618      	movlt	r0, r3
    27a0:	e793      	b.n	26ca <_printf_i+0x13e>
    27a2:	2301      	movs	r3, #1
    27a4:	464a      	mov	r2, r9
    27a6:	4639      	mov	r1, r7
    27a8:	4630      	mov	r0, r6
    27aa:	47c0      	blx	r8
    27ac:	3001      	adds	r0, #1
    27ae:	d08a      	beq.n	26c6 <_printf_i+0x13a>
    27b0:	3501      	adds	r5, #1
    27b2:	e7eb      	b.n	278c <_printf_i+0x200>
    27b4:	2b00      	cmp	r3, #0
    27b6:	d1a7      	bne.n	2708 <_printf_i+0x17c>
    27b8:	780b      	ldrb	r3, [r1, #0]
    27ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    27be:	f104 0542 	add.w	r5, r4, #66	; 0x42
    27c2:	e765      	b.n	2690 <_printf_i+0x104>
    27c4:	00002cfa 	.word	0x00002cfa
    27c8:	00002ce9 	.word	0x00002ce9

000027cc <_sbrk_r>:
    27cc:	b538      	push	{r3, r4, r5, lr}
    27ce:	4c06      	ldr	r4, [pc, #24]	; (27e8 <_sbrk_r+0x1c>)
    27d0:	2300      	movs	r3, #0
    27d2:	4605      	mov	r5, r0
    27d4:	4608      	mov	r0, r1
    27d6:	6023      	str	r3, [r4, #0]
    27d8:	f7fe fb80 	bl	edc <_sbrk>
    27dc:	1c43      	adds	r3, r0, #1
    27de:	d102      	bne.n	27e6 <_sbrk_r+0x1a>
    27e0:	6823      	ldr	r3, [r4, #0]
    27e2:	b103      	cbz	r3, 27e6 <_sbrk_r+0x1a>
    27e4:	602b      	str	r3, [r5, #0]
    27e6:	bd38      	pop	{r3, r4, r5, pc}
    27e8:	20000a64 	.word	0x20000a64

000027ec <__sread>:
    27ec:	b510      	push	{r4, lr}
    27ee:	460c      	mov	r4, r1
    27f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    27f4:	f000 f8e6 	bl	29c4 <_read_r>
    27f8:	2800      	cmp	r0, #0
    27fa:	bfab      	itete	ge
    27fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    27fe:	89a3      	ldrhlt	r3, [r4, #12]
    2800:	181b      	addge	r3, r3, r0
    2802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2806:	bfac      	ite	ge
    2808:	6563      	strge	r3, [r4, #84]	; 0x54
    280a:	81a3      	strhlt	r3, [r4, #12]
    280c:	bd10      	pop	{r4, pc}

0000280e <__swrite>:
    280e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2812:	461f      	mov	r7, r3
    2814:	898b      	ldrh	r3, [r1, #12]
    2816:	05db      	lsls	r3, r3, #23
    2818:	4605      	mov	r5, r0
    281a:	460c      	mov	r4, r1
    281c:	4616      	mov	r6, r2
    281e:	d505      	bpl.n	282c <__swrite+0x1e>
    2820:	2302      	movs	r3, #2
    2822:	2200      	movs	r2, #0
    2824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2828:	f000 f868 	bl	28fc <_lseek_r>
    282c:	89a3      	ldrh	r3, [r4, #12]
    282e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2836:	81a3      	strh	r3, [r4, #12]
    2838:	4632      	mov	r2, r6
    283a:	463b      	mov	r3, r7
    283c:	4628      	mov	r0, r5
    283e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2842:	f000 b817 	b.w	2874 <_write_r>

00002846 <__sseek>:
    2846:	b510      	push	{r4, lr}
    2848:	460c      	mov	r4, r1
    284a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    284e:	f000 f855 	bl	28fc <_lseek_r>
    2852:	1c43      	adds	r3, r0, #1
    2854:	89a3      	ldrh	r3, [r4, #12]
    2856:	bf15      	itete	ne
    2858:	6560      	strne	r0, [r4, #84]	; 0x54
    285a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    285e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2862:	81a3      	strheq	r3, [r4, #12]
    2864:	bf18      	it	ne
    2866:	81a3      	strhne	r3, [r4, #12]
    2868:	bd10      	pop	{r4, pc}

0000286a <__sclose>:
    286a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    286e:	f000 b813 	b.w	2898 <_close_r>
	...

00002874 <_write_r>:
    2874:	b538      	push	{r3, r4, r5, lr}
    2876:	4c07      	ldr	r4, [pc, #28]	; (2894 <_write_r+0x20>)
    2878:	4605      	mov	r5, r0
    287a:	4608      	mov	r0, r1
    287c:	4611      	mov	r1, r2
    287e:	2200      	movs	r2, #0
    2880:	6022      	str	r2, [r4, #0]
    2882:	461a      	mov	r2, r3
    2884:	f7ff f824 	bl	18d0 <_write>
    2888:	1c43      	adds	r3, r0, #1
    288a:	d102      	bne.n	2892 <_write_r+0x1e>
    288c:	6823      	ldr	r3, [r4, #0]
    288e:	b103      	cbz	r3, 2892 <_write_r+0x1e>
    2890:	602b      	str	r3, [r5, #0]
    2892:	bd38      	pop	{r3, r4, r5, pc}
    2894:	20000a64 	.word	0x20000a64

00002898 <_close_r>:
    2898:	b538      	push	{r3, r4, r5, lr}
    289a:	4c06      	ldr	r4, [pc, #24]	; (28b4 <_close_r+0x1c>)
    289c:	2300      	movs	r3, #0
    289e:	4605      	mov	r5, r0
    28a0:	4608      	mov	r0, r1
    28a2:	6023      	str	r3, [r4, #0]
    28a4:	f7fe fb2c 	bl	f00 <_close>
    28a8:	1c43      	adds	r3, r0, #1
    28aa:	d102      	bne.n	28b2 <_close_r+0x1a>
    28ac:	6823      	ldr	r3, [r4, #0]
    28ae:	b103      	cbz	r3, 28b2 <_close_r+0x1a>
    28b0:	602b      	str	r3, [r5, #0]
    28b2:	bd38      	pop	{r3, r4, r5, pc}
    28b4:	20000a64 	.word	0x20000a64

000028b8 <_fstat_r>:
    28b8:	b538      	push	{r3, r4, r5, lr}
    28ba:	4c07      	ldr	r4, [pc, #28]	; (28d8 <_fstat_r+0x20>)
    28bc:	2300      	movs	r3, #0
    28be:	4605      	mov	r5, r0
    28c0:	4608      	mov	r0, r1
    28c2:	4611      	mov	r1, r2
    28c4:	6023      	str	r3, [r4, #0]
    28c6:	f7fe fb1e 	bl	f06 <_fstat>
    28ca:	1c43      	adds	r3, r0, #1
    28cc:	d102      	bne.n	28d4 <_fstat_r+0x1c>
    28ce:	6823      	ldr	r3, [r4, #0]
    28d0:	b103      	cbz	r3, 28d4 <_fstat_r+0x1c>
    28d2:	602b      	str	r3, [r5, #0]
    28d4:	bd38      	pop	{r3, r4, r5, pc}
    28d6:	bf00      	nop
    28d8:	20000a64 	.word	0x20000a64

000028dc <_isatty_r>:
    28dc:	b538      	push	{r3, r4, r5, lr}
    28de:	4c06      	ldr	r4, [pc, #24]	; (28f8 <_isatty_r+0x1c>)
    28e0:	2300      	movs	r3, #0
    28e2:	4605      	mov	r5, r0
    28e4:	4608      	mov	r0, r1
    28e6:	6023      	str	r3, [r4, #0]
    28e8:	f7fe fb12 	bl	f10 <_isatty>
    28ec:	1c43      	adds	r3, r0, #1
    28ee:	d102      	bne.n	28f6 <_isatty_r+0x1a>
    28f0:	6823      	ldr	r3, [r4, #0]
    28f2:	b103      	cbz	r3, 28f6 <_isatty_r+0x1a>
    28f4:	602b      	str	r3, [r5, #0]
    28f6:	bd38      	pop	{r3, r4, r5, pc}
    28f8:	20000a64 	.word	0x20000a64

000028fc <_lseek_r>:
    28fc:	b538      	push	{r3, r4, r5, lr}
    28fe:	4c07      	ldr	r4, [pc, #28]	; (291c <_lseek_r+0x20>)
    2900:	4605      	mov	r5, r0
    2902:	4608      	mov	r0, r1
    2904:	4611      	mov	r1, r2
    2906:	2200      	movs	r2, #0
    2908:	6022      	str	r2, [r4, #0]
    290a:	461a      	mov	r2, r3
    290c:	f7fe fb02 	bl	f14 <_lseek>
    2910:	1c43      	adds	r3, r0, #1
    2912:	d102      	bne.n	291a <_lseek_r+0x1e>
    2914:	6823      	ldr	r3, [r4, #0]
    2916:	b103      	cbz	r3, 291a <_lseek_r+0x1e>
    2918:	602b      	str	r3, [r5, #0]
    291a:	bd38      	pop	{r3, r4, r5, pc}
    291c:	20000a64 	.word	0x20000a64

00002920 <memchr>:
    2920:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2924:	2a10      	cmp	r2, #16
    2926:	db2b      	blt.n	2980 <memchr+0x60>
    2928:	f010 0f07 	tst.w	r0, #7
    292c:	d008      	beq.n	2940 <memchr+0x20>
    292e:	f810 3b01 	ldrb.w	r3, [r0], #1
    2932:	3a01      	subs	r2, #1
    2934:	428b      	cmp	r3, r1
    2936:	d02d      	beq.n	2994 <memchr+0x74>
    2938:	f010 0f07 	tst.w	r0, #7
    293c:	b342      	cbz	r2, 2990 <memchr+0x70>
    293e:	d1f6      	bne.n	292e <memchr+0xe>
    2940:	b4f0      	push	{r4, r5, r6, r7}
    2942:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    2946:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    294a:	f022 0407 	bic.w	r4, r2, #7
    294e:	f07f 0700 	mvns.w	r7, #0
    2952:	2300      	movs	r3, #0
    2954:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    2958:	3c08      	subs	r4, #8
    295a:	ea85 0501 	eor.w	r5, r5, r1
    295e:	ea86 0601 	eor.w	r6, r6, r1
    2962:	fa85 f547 	uadd8	r5, r5, r7
    2966:	faa3 f587 	sel	r5, r3, r7
    296a:	fa86 f647 	uadd8	r6, r6, r7
    296e:	faa5 f687 	sel	r6, r5, r7
    2972:	b98e      	cbnz	r6, 2998 <memchr+0x78>
    2974:	d1ee      	bne.n	2954 <memchr+0x34>
    2976:	bcf0      	pop	{r4, r5, r6, r7}
    2978:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    297c:	f002 0207 	and.w	r2, r2, #7
    2980:	b132      	cbz	r2, 2990 <memchr+0x70>
    2982:	f810 3b01 	ldrb.w	r3, [r0], #1
    2986:	3a01      	subs	r2, #1
    2988:	ea83 0301 	eor.w	r3, r3, r1
    298c:	b113      	cbz	r3, 2994 <memchr+0x74>
    298e:	d1f8      	bne.n	2982 <memchr+0x62>
    2990:	2000      	movs	r0, #0
    2992:	4770      	bx	lr
    2994:	3801      	subs	r0, #1
    2996:	4770      	bx	lr
    2998:	2d00      	cmp	r5, #0
    299a:	bf06      	itte	eq
    299c:	4635      	moveq	r5, r6
    299e:	3803      	subeq	r0, #3
    29a0:	3807      	subne	r0, #7
    29a2:	f015 0f01 	tst.w	r5, #1
    29a6:	d107      	bne.n	29b8 <memchr+0x98>
    29a8:	3001      	adds	r0, #1
    29aa:	f415 7f80 	tst.w	r5, #256	; 0x100
    29ae:	bf02      	ittt	eq
    29b0:	3001      	addeq	r0, #1
    29b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    29b6:	3001      	addeq	r0, #1
    29b8:	bcf0      	pop	{r4, r5, r6, r7}
    29ba:	3801      	subs	r0, #1
    29bc:	4770      	bx	lr
    29be:	bf00      	nop

000029c0 <__malloc_lock>:
    29c0:	4770      	bx	lr

000029c2 <__malloc_unlock>:
    29c2:	4770      	bx	lr

000029c4 <_read_r>:
    29c4:	b538      	push	{r3, r4, r5, lr}
    29c6:	4c07      	ldr	r4, [pc, #28]	; (29e4 <_read_r+0x20>)
    29c8:	4605      	mov	r5, r0
    29ca:	4608      	mov	r0, r1
    29cc:	4611      	mov	r1, r2
    29ce:	2200      	movs	r2, #0
    29d0:	6022      	str	r2, [r4, #0]
    29d2:	461a      	mov	r2, r3
    29d4:	f7fe ff6c 	bl	18b0 <_read>
    29d8:	1c43      	adds	r3, r0, #1
    29da:	d102      	bne.n	29e2 <_read_r+0x1e>
    29dc:	6823      	ldr	r3, [r4, #0]
    29de:	b103      	cbz	r3, 29e2 <_read_r+0x1e>
    29e0:	602b      	str	r3, [r5, #0]
    29e2:	bd38      	pop	{r3, r4, r5, pc}
    29e4:	20000a64 	.word	0x20000a64

000029e8 <n25q256a_interface>:
    29e8:	00000605 00000949 00000a11 00000881     ....I...........
    29f8:	000007c1 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    2a08:	695f6c61 00632e6f 682f2e2e 732f6c61     al_io.c.../hal/s
    2a18:	682f6372 715f6c61 5f697073 2e616d64     rc/hal_qspi_dma.
    2a28:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    2a38:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.

00002a48 <_cfgs>:
    2a48:	00005400 1c000000 00005300 0c000000     .T.......S......
	...
    2b48:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    2b58:	69707371 0000632e 40003000 40003400     qspi.c...0.@.4.@
    2b68:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    2b78:	43000800 43000c00                       ...C...C

00002b80 <_i2cms>:
	...
    2b98:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2ba8:	65735f6c 6d6f6372 0000632e 49505351     l_sercom.c..QSPI
    2bb8:	6f725020 6d617267 61745320 64657472      Program Started
    2bc8:	00000d0a 73616c46 72652068 20657361     ....Flash erase 
    2bd8:	63637573 66737365 0d0a6c75 00000000     successful......
    2be8:	73616c46 72772068 20657469 63637573     Flash write succ
    2bf8:	66737365 0a206c75 0000000d 73616c46     essful .....Flas
    2c08:	65722068 73206461 65636375 75667373     h read successfu
    2c18:	000d0a6c 73616c46 61642068 76206174     l...Flash data v
    2c28:	66697265 74616369 206e6f69 6c696166     erification fail
    2c38:	0a2e6465 0000000d 74697257 202d2065     ed......Write - 
    2c48:	64616552 20736920 63637573 66737365     Read is successf
    2c58:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
    2c68:	6d656d20 2e79726f 00000d0a               memory.....

00002c74 <_global_impure_ptr>:
    2c74:	20000004                                ... 

00002c78 <__sf_fake_stderr>:
	...

00002c98 <__sf_fake_stdin>:
	...

00002cb8 <__sf_fake_stdout>:
	...
    2cd8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2ce8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2cf8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2d08:	00006665                                ef..

00002d0c <_init>:
    2d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d0e:	bf00      	nop
    2d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d12:	bc08      	pop	{r3}
    2d14:	469e      	mov	lr, r3
    2d16:	4770      	bx	lr

00002d18 <__init_array_start>:
    2d18:	00000289 	.word	0x00000289

00002d1c <_fini>:
    2d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d1e:	bf00      	nop
    2d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d22:	bc08      	pop	{r3}
    2d24:	469e      	mov	lr, r3
    2d26:	4770      	bx	lr

00002d28 <__fini_array_start>:
    2d28:	00000265 	.word	0x00000265
