
master_writer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003280  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d20  200000a0  00003320  000200a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   0005b1f2  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000681e  00000000  00000000  0007b313  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000082e4  00000000  00000000  00081b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000009e8  00000000  00000000  00089e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000015d8  00000000  00000000  0008a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001d3a9  00000000  00000000  0008bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e21a  00000000  00000000  000a917e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00081f02  00000000  00000000  000b7398  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001a34  00000000  00000000  0013929c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 81 01 00 00 69 01 00 00 69 01 00 00     ... ....i...i...
	...
      2c:	69 01 00 00 00 00 00 00 00 00 00 00 69 01 00 00     i...........i...
      3c:	d5 01 00 00 69 01 00 00 69 01 00 00 69 01 00 00     ....i...i...i...
      4c:	69 01 00 00 69 01 00 00 69 01 00 00 69 01 00 00     i...i...i...i...
      5c:	6d 01 00 00 69 01 00 00 45 1b 00 00 69 01 00 00     m...i...E...i...
      6c:	69 01 00 00 1d 1b 00 00 69 01 00 00 55 1b 00 00     i.......i...U...
      7c:	69 01 00 00 69 01 00 00 69 01 00 00 69 01 00 00     i...i...i...i...
      8c:	69 01 00 00 00 00 00 00 69 01 00 00 69 01 00 00     i.......i...i...
      9c:	69 01 00 00 69 01 00 00 69 01 00 00 69 01 00 00     i...i...i...i...
      ac:	69 01 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
      d8:	0000327c 	.word	0x0000327c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
     108:	0000327c 	.word	0x0000327c
     10c:	20000094 	.word	0x20000094
     110:	00000000 	.word	0x00000000

00000114 <setup>:
//End of Auto generated function prototypes by Atmel Studio



void setup()
{
     114:	b510      	push	{r4, lr}
  Wire.begin(); // join i2c bus (address optional for master)
     116:	4802      	ldr	r0, [pc, #8]	; (120 <setup+0xc>)
     118:	f001 fbd4 	bl	18c4 <_ZN7TwoWire5beginEv>
}
     11c:	bd10      	pop	{r4, pc}
     11e:	46c0      	nop			; (mov r8, r8)
     120:	200006ac 	.word	0x200006ac

00000124 <loop>:

byte x = 0;

void loop()
{
     124:	b570      	push	{r4, r5, r6, lr}
  Wire.beginTransmission(4); // transmit to device #4
     126:	4c0d      	ldr	r4, [pc, #52]	; (15c <loop+0x38>)
     128:	2104      	movs	r1, #4
     12a:	0020      	movs	r0, r4
     12c:	f001 fbea 	bl	1904 <_ZN7TwoWire17beginTransmissionEh>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     130:	2205      	movs	r2, #5
     132:	490b      	ldr	r1, [pc, #44]	; (160 <loop+0x3c>)
     134:	0020      	movs	r0, r4
     136:	f001 fb6b 	bl	1810 <_ZN7TwoWire5writeEPKhj>
  Wire.write("x is ");        // sends five bytes
  Wire.write(x);              // sends one byte  
     13a:	4d0a      	ldr	r5, [pc, #40]	; (164 <loop+0x40>)
     13c:	0020      	movs	r0, r4
     13e:	7829      	ldrb	r1, [r5, #0]
     140:	f001 fbf8 	bl	1934 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();    // stop transmitting
     144:	0020      	movs	r0, r4
     146:	f001 fc52 	bl	19ee <_ZN7TwoWire15endTransmissionEv>

  x++;
  delay(500);
     14a:	20fa      	movs	r0, #250	; 0xfa
  x++;
     14c:	782b      	ldrb	r3, [r5, #0]
  delay(500);
     14e:	0040      	lsls	r0, r0, #1
  x++;
     150:	3301      	adds	r3, #1
     152:	702b      	strb	r3, [r5, #0]
  delay(500);
     154:	f000 f87c 	bl	250 <delay>
}
     158:	bd70      	pop	{r4, r5, r6, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	200006ac 	.word	0x200006ac
     160:	00002d20 	.word	0x00002d20
     164:	200000bc 	.word	0x200000bc

00000168 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     168:	be03      	bkpt	0x0003
     16a:	e7fe      	b.n	16a <Dummy_Handler+0x2>

0000016c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <USB_Handler+0x10>)
{
     16e:	b510      	push	{r4, lr}
  if (usb_isr)
     170:	681b      	ldr	r3, [r3, #0]
     172:	2b00      	cmp	r3, #0
     174:	d000      	beq.n	178 <USB_Handler+0xc>
    usb_isr();
     176:	4798      	blx	r3
}
     178:	bd10      	pop	{r4, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	200000c0 	.word	0x200000c0

00000180 <Reset_Handler>:
{
     180:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     182:	490f      	ldr	r1, [pc, #60]	; (1c0 <Reset_Handler+0x40>)
     184:	4c0f      	ldr	r4, [pc, #60]	; (1c4 <Reset_Handler+0x44>)
     186:	42a1      	cmp	r1, r4
     188:	d104      	bne.n	194 <Reset_Handler+0x14>
  SystemInit();
     18a:	f000 f8f7 	bl	37c <SystemInit>
  main();
     18e:	f000 f887 	bl	2a0 <main>
     192:	e7fe      	b.n	192 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     194:	4d0c      	ldr	r5, [pc, #48]	; (1c8 <Reset_Handler+0x48>)
     196:	2300      	movs	r3, #0
     198:	428d      	cmp	r5, r1
     19a:	d0f6      	beq.n	18a <Reset_Handler+0xa>
     19c:	18ca      	adds	r2, r1, r3
     19e:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     1a0:	42a2      	cmp	r2, r4
     1a2:	d305      	bcc.n	1b0 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1a4:	4290      	cmp	r0, r2
     1a6:	d0f0      	beq.n	18a <Reset_Handler+0xa>
     1a8:	4b08      	ldr	r3, [pc, #32]	; (1cc <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1aa:	4909      	ldr	r1, [pc, #36]	; (1d0 <Reset_Handler+0x50>)
      *pDest = 0;
     1ac:	2200      	movs	r2, #0
     1ae:	e004      	b.n	1ba <Reset_Handler+0x3a>
      *pDest = *pSrc;
     1b0:	6800      	ldr	r0, [r0, #0]
     1b2:	3304      	adds	r3, #4
     1b4:	6010      	str	r0, [r2, #0]
     1b6:	e7f1      	b.n	19c <Reset_Handler+0x1c>
      *pDest = 0;
     1b8:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1ba:	428b      	cmp	r3, r1
     1bc:	d3fc      	bcc.n	1b8 <Reset_Handler+0x38>
     1be:	e7e4      	b.n	18a <Reset_Handler+0xa>
     1c0:	20000000 	.word	0x20000000
     1c4:	200000a0 	.word	0x200000a0
     1c8:	00003280 	.word	0x00003280
     1cc:	200000a0 	.word	0x200000a0
     1d0:	20000dc0 	.word	0x20000dc0

000001d4 <SysTick_Handler>:
{
     1d4:	b510      	push	{r4, lr}
  if (sysTickHook())
     1d6:	f000 f860 	bl	29a <sysTickHook>
     1da:	2800      	cmp	r0, #0
     1dc:	d101      	bne.n	1e2 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     1de:	f000 f851 	bl	284 <SysTick_DefaultHandler>
}
     1e2:	bd10      	pop	{r4, pc}

000001e4 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     1e4:	4b01      	ldr	r3, [pc, #4]	; (1ec <USB_SetHandler+0x8>)
     1e6:	6018      	str	r0, [r3, #0]
}
     1e8:	4770      	bx	lr
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	200000c0 	.word	0x200000c0

000001f0 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     1f2:	4813      	ldr	r0, [pc, #76]	; (240 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     1f4:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     1f6:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     1f8:	4912      	ldr	r1, [pc, #72]	; (244 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     1fa:	4c13      	ldr	r4, [pc, #76]	; (248 <micros+0x58>)
  ticks2  = SysTick->VAL;
     1fc:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     1fe:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     200:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     202:	0e9b      	lsrs	r3, r3, #26
     204:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     206:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     208:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     20a:	6862      	ldr	r2, [r4, #4]
     20c:	9f01      	ldr	r7, [sp, #4]
     20e:	0e92      	lsrs	r2, r2, #26
     210:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     212:	4667      	mov	r7, ip
     214:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     216:	4293      	cmp	r3, r2
     218:	d10e      	bne.n	238 <micros+0x48>
     21a:	42bd      	cmp	r5, r7
     21c:	d10c      	bne.n	238 <micros+0x48>
     21e:	4286      	cmp	r6, r0
     220:	d30a      	bcc.n	238 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     222:	195b      	adds	r3, r3, r5
     224:	25fa      	movs	r5, #250	; 0xfa
     226:	6848      	ldr	r0, [r1, #4]
     228:	00ad      	lsls	r5, r5, #2
     22a:	1b86      	subs	r6, r0, r6
     22c:	4807      	ldr	r0, [pc, #28]	; (24c <micros+0x5c>)
     22e:	436b      	muls	r3, r5
     230:	4370      	muls	r0, r6
     232:	0d00      	lsrs	r0, r0, #20
     234:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     238:	003d      	movs	r5, r7
     23a:	0013      	movs	r3, r2
     23c:	0006      	movs	r6, r0
     23e:	e7e3      	b.n	208 <micros+0x18>
     240:	200000c4 	.word	0x200000c4
     244:	e000e010 	.word	0xe000e010
     248:	e000ed00 	.word	0xe000ed00
     24c:	00005555 	.word	0x00005555

00000250 <delay>:

void delay( unsigned long ms )
{
     250:	b570      	push	{r4, r5, r6, lr}
     252:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     254:	d010      	beq.n	278 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     256:	f7ff ffcb 	bl	1f0 <micros>
     25a:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     25c:	f000 f81c 	bl	298 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     260:	f7ff ffc6 	bl	1f0 <micros>
     264:	4b05      	ldr	r3, [pc, #20]	; (27c <delay+0x2c>)
     266:	1b40      	subs	r0, r0, r5
     268:	4298      	cmp	r0, r3
     26a:	d9f7      	bls.n	25c <delay+0xc>
    {
      ms--;
      start += 1000;
     26c:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     26e:	3c01      	subs	r4, #1
      start += 1000;
     270:	009b      	lsls	r3, r3, #2
     272:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     274:	2c00      	cmp	r4, #0
     276:	d1f3      	bne.n	260 <delay+0x10>
    }
  }
}
     278:	bd70      	pop	{r4, r5, r6, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	000003e7 	.word	0x000003e7

00000280 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     280:	4770      	bx	lr
	...

00000284 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     284:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     286:	4a03      	ldr	r2, [pc, #12]	; (294 <SysTick_DefaultHandler+0x10>)
     288:	6813      	ldr	r3, [r2, #0]
     28a:	3301      	adds	r3, #1
     28c:	6013      	str	r3, [r2, #0]
  tickReset();
     28e:	f000 f839 	bl	304 <tickReset>
}
     292:	bd10      	pop	{r4, pc}
     294:	200000c4 	.word	0x200000c4

00000298 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     298:	4770      	bx	lr

0000029a <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr

0000029e <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     29e:	4770      	bx	lr

000002a0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     2a0:	b510      	push	{r4, lr}
  init();
     2a2:	f001 f933 	bl	150c <init>

  __libc_init_array();
     2a6:	f002 fc13 	bl	2ad0 <__libc_init_array>

  initVariant();
     2aa:	f7ff fff8 	bl	29e <_Z11initVariantv>

  delay(1);
     2ae:	2001      	movs	r0, #1
     2b0:	f7ff ffce 	bl	250 <delay>
#if defined(USBCON)
  USBDevice.init();
     2b4:	4c08      	ldr	r4, [pc, #32]	; (2d8 <main+0x38>)
     2b6:	0020      	movs	r0, r4
     2b8:	f000 fb80 	bl	9bc <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     2bc:	0020      	movs	r0, r4
     2be:	f000 fc31 	bl	b24 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     2c2:	f7ff ff27 	bl	114 <setup>

  for (;;)
  {
    loop();
     2c6:	f7ff ff2d 	bl	124 <loop>
    if (serialEventRun) serialEventRun();
     2ca:	4b04      	ldr	r3, [pc, #16]	; (2dc <main+0x3c>)
     2cc:	2b00      	cmp	r3, #0
     2ce:	d0fa      	beq.n	2c6 <main+0x26>
     2d0:	e000      	b.n	2d4 <main+0x34>
     2d2:	bf00      	nop
     2d4:	e7f7      	b.n	2c6 <main+0x26>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200000f0 	.word	0x200000f0
     2dc:	00000000 	.word	0x00000000

000002e0 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     2e0:	b510      	push	{r4, lr}
     2e2:	0004      	movs	r4, r0
	resetExternalChip();
     2e4:	f7ff ffcc 	bl	280 <resetExternalChip>
	ticks = _ticks;
     2e8:	4b01      	ldr	r3, [pc, #4]	; (2f0 <initiateReset+0x10>)
     2ea:	601c      	str	r4, [r3, #0]
}
     2ec:	bd10      	pop	{r4, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	20000000 	.word	0x20000000

000002f4 <cancelReset>:

void cancelReset() {
	ticks = -1;
     2f4:	2201      	movs	r2, #1
     2f6:	4b02      	ldr	r3, [pc, #8]	; (300 <cancelReset+0xc>)
     2f8:	4252      	negs	r2, r2
     2fa:	601a      	str	r2, [r3, #0]
}
     2fc:	4770      	bx	lr
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	20000000 	.word	0x20000000

00000304 <tickReset>:

void tickReset() {
	if (ticks == -1)
     304:	4a16      	ldr	r2, [pc, #88]	; (360 <tickReset+0x5c>)
void tickReset() {
     306:	b510      	push	{r4, lr}
	if (ticks == -1)
     308:	6813      	ldr	r3, [r2, #0]
     30a:	1c59      	adds	r1, r3, #1
     30c:	d027      	beq.n	35e <tickReset+0x5a>
		return;
	ticks--;
     30e:	3b01      	subs	r3, #1
     310:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     312:	2b00      	cmp	r3, #0
     314:	d123      	bne.n	35e <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     316:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     318:	4b12      	ldr	r3, [pc, #72]	; (364 <tickReset+0x60>)
     31a:	4a13      	ldr	r2, [pc, #76]	; (368 <tickReset+0x64>)
     31c:	3304      	adds	r3, #4
     31e:	4293      	cmp	r3, r2
     320:	d808      	bhi.n	334 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     322:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     326:	4a11      	ldr	r2, [pc, #68]	; (36c <tickReset+0x68>)
     328:	4b11      	ldr	r3, [pc, #68]	; (370 <tickReset+0x6c>)
     32a:	60da      	str	r2, [r3, #12]
     32c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     330:	46c0      	nop			; (mov r8, r8)
     332:	e7fd      	b.n	330 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <tickReset+0x70>)
	while (!nvmReady())
     336:	2101      	movs	r1, #1
     338:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     33a:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     33c:	420c      	tst	r4, r1
     33e:	d0fc      	beq.n	33a <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     340:	2120      	movs	r1, #32
     342:	8b14      	ldrh	r4, [r2, #24]
     344:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     346:	089b      	lsrs	r3, r3, #2
     348:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     34a:	4321      	orrs	r1, r4
     34c:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     34e:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <tickReset+0x74>)
     352:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     354:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     356:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     358:	421a      	tst	r2, r3
     35a:	d0fc      	beq.n	356 <tickReset+0x52>
     35c:	e7e1      	b.n	322 <tickReset+0x1e>
		banzai();
}
     35e:	bd10      	pop	{r4, pc}
     360:	20000000 	.word	0x20000000
     364:	00000000 	.word	0x00000000
     368:	00000203 	.word	0x00000203
     36c:	05fa0004 	.word	0x05fa0004
     370:	e000ed00 	.word	0xe000ed00
     374:	41004000 	.word	0x41004000
     378:	ffffa502 	.word	0xffffa502

0000037c <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     37c:	221e      	movs	r2, #30
{
     37e:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     380:	4846      	ldr	r0, [pc, #280]	; (49c <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     382:	4947      	ldr	r1, [pc, #284]	; (4a0 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     384:	6843      	ldr	r3, [r0, #4]
     386:	4393      	bics	r3, r2
     388:	3a1c      	subs	r2, #28
     38a:	4313      	orrs	r3, r2
     38c:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     38e:	2308      	movs	r3, #8
     390:	698c      	ldr	r4, [r1, #24]
     392:	4323      	orrs	r3, r4
     394:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     396:	4c43      	ldr	r4, [pc, #268]	; (4a4 <SystemInit+0x128>)
     398:	4b43      	ldr	r3, [pc, #268]	; (4a8 <SystemInit+0x12c>)
     39a:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     39c:	8a9c      	ldrh	r4, [r3, #20]
     39e:	4314      	orrs	r4, r2
     3a0:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     3a2:	68dc      	ldr	r4, [r3, #12]
     3a4:	4214      	tst	r4, r2
     3a6:	d0fc      	beq.n	3a2 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     3a8:	2401      	movs	r4, #1
     3aa:	4a40      	ldr	r2, [pc, #256]	; (4ac <SystemInit+0x130>)
     3ac:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     3ae:	7815      	ldrb	r5, [r2, #0]
     3b0:	4225      	tst	r5, r4
     3b2:	d003      	beq.n	3bc <SystemInit+0x40>
     3b4:	7855      	ldrb	r5, [r2, #1]
     3b6:	b26d      	sxtb	r5, r5
     3b8:	2d00      	cmp	r5, #0
     3ba:	dbf8      	blt.n	3ae <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     3bc:	2401      	movs	r4, #1
     3be:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3c0:	7854      	ldrb	r4, [r2, #1]
     3c2:	b264      	sxtb	r4, r4
     3c4:	2c00      	cmp	r4, #0
     3c6:	dbfb      	blt.n	3c0 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     3c8:	4c39      	ldr	r4, [pc, #228]	; (4b0 <SystemInit+0x134>)
     3ca:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3cc:	7854      	ldrb	r4, [r2, #1]
     3ce:	b264      	sxtb	r4, r4
     3d0:	2c00      	cmp	r4, #0
     3d2:	dbfb      	blt.n	3cc <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     3d4:	2482      	movs	r4, #130	; 0x82
     3d6:	01e4      	lsls	r4, r4, #7
     3d8:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3da:	7854      	ldrb	r4, [r2, #1]
     3dc:	b264      	sxtb	r4, r4
     3de:	2c00      	cmp	r4, #0
     3e0:	dbfb      	blt.n	3da <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     3e2:	2402      	movs	r4, #2
     3e4:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3e6:	340e      	adds	r4, #14
     3e8:	68dd      	ldr	r5, [r3, #12]
     3ea:	4225      	tst	r5, r4
     3ec:	d0fc      	beq.n	3e8 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     3ee:	4c31      	ldr	r4, [pc, #196]	; (4b4 <SystemInit+0x138>)
     3f0:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3f2:	2410      	movs	r4, #16
     3f4:	68dd      	ldr	r5, [r3, #12]
     3f6:	4225      	tst	r5, r4
     3f8:	d0fc      	beq.n	3f4 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     3fa:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     3fc:	4c2e      	ldr	r4, [pc, #184]	; (4b8 <SystemInit+0x13c>)
     3fe:	432c      	orrs	r4, r5
     400:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     402:	2410      	movs	r4, #16
     404:	68dd      	ldr	r5, [r3, #12]
     406:	4225      	tst	r5, r4
     408:	d0fc      	beq.n	404 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     40a:	2402      	movs	r4, #2
     40c:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     40e:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     410:	432c      	orrs	r4, r5
     412:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     414:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     416:	68dd      	ldr	r5, [r3, #12]
     418:	4235      	tst	r5, r6
     41a:	d0fc      	beq.n	416 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     41c:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     41e:	4225      	tst	r5, r4
     420:	d0f9      	beq.n	416 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     422:	2410      	movs	r4, #16
     424:	68dd      	ldr	r5, [r3, #12]
     426:	4225      	tst	r5, r4
     428:	d0fc      	beq.n	424 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     42a:	2400      	movs	r4, #0
     42c:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     42e:	7854      	ldrb	r4, [r2, #1]
     430:	b264      	sxtb	r4, r4
     432:	2c00      	cmp	r4, #0
     434:	dbfb      	blt.n	42e <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     436:	4c21      	ldr	r4, [pc, #132]	; (4bc <SystemInit+0x140>)
     438:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     43a:	7854      	ldrb	r4, [r2, #1]
     43c:	b264      	sxtb	r4, r4
     43e:	2c00      	cmp	r4, #0
     440:	dbfb      	blt.n	43a <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     442:	6a1c      	ldr	r4, [r3, #32]
     444:	4d1e      	ldr	r5, [pc, #120]	; (4c0 <SystemInit+0x144>)
     446:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     448:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     44a:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     44c:	6a1c      	ldr	r4, [r3, #32]
     44e:	43ac      	bics	r4, r5
     450:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     452:	2303      	movs	r3, #3
     454:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     456:	4b1b      	ldr	r3, [pc, #108]	; (4c4 <SystemInit+0x148>)
     458:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     45a:	7853      	ldrb	r3, [r2, #1]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	dbfb      	blt.n	45a <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     462:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     464:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     466:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     468:	4a17      	ldr	r2, [pc, #92]	; (4c8 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     46a:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     46c:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     46e:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     470:	4b16      	ldr	r3, [pc, #88]	; (4cc <SystemInit+0x150>)
     472:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     474:	4b16      	ldr	r3, [pc, #88]	; (4d0 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     476:	4a17      	ldr	r2, [pc, #92]	; (4d4 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     478:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     47a:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     47c:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     47e:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     480:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     482:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     484:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     486:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     488:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     48a:	4313      	orrs	r3, r2
     48c:	4a12      	ldr	r2, [pc, #72]	; (4d8 <SystemInit+0x15c>)
     48e:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     490:	2380      	movs	r3, #128	; 0x80
     492:	6842      	ldr	r2, [r0, #4]
     494:	4313      	orrs	r3, r2
     496:	6043      	str	r3, [r0, #4]
}
     498:	bd70      	pop	{r4, r5, r6, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	41004000 	.word	0x41004000
     4a0:	40000400 	.word	0x40000400
     4a4:	0000060c 	.word	0x0000060c
     4a8:	40000800 	.word	0x40000800
     4ac:	40000c00 	.word	0x40000c00
     4b0:	00010501 	.word	0x00010501
     4b4:	7dff05b9 	.word	0x7dff05b9
     4b8:	00000a04 	.word	0x00000a04
     4bc:	00030700 	.word	0x00030700
     4c0:	fffffcff 	.word	0xfffffcff
     4c4:	00010603 	.word	0x00010603
     4c8:	02dc6c00 	.word	0x02dc6c00
     4cc:	20000004 	.word	0x20000004
     4d0:	00806024 	.word	0x00806024
     4d4:	00806020 	.word	0x00806020
     4d8:	42004000 	.word	0x42004000

000004dc <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     4dc:	4770      	bx	lr

000004de <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     4de:	b510      	push	{r4, lr}
     4e0:	0004      	movs	r4, r0
	}
     4e2:	f001 fb8d 	bl	1c00 <_ZdlPv>
     4e6:	0020      	movs	r0, r4
     4e8:	bd10      	pop	{r4, pc}
	...

000004ec <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     4ee:	2982      	cmp	r1, #130	; 0x82
     4f0:	d119      	bne.n	526 <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     4f2:	b2c3      	uxtb	r3, r0
     4f4:	4d29      	ldr	r5, [pc, #164]	; (59c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     4f6:	015a      	lsls	r2, r3, #5
     4f8:	18aa      	adds	r2, r5, r2
     4fa:	6991      	ldr	r1, [r2, #24]
     4fc:	4c28      	ldr	r4, [pc, #160]	; (5a0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     4fe:	0180      	lsls	r0, r0, #6
     500:	400c      	ands	r4, r1
     502:	21c0      	movs	r1, #192	; 0xc0
     504:	0589      	lsls	r1, r1, #22
     506:	4321      	orrs	r1, r4
     508:	6191      	str	r1, [r2, #24]
     50a:	4926      	ldr	r1, [pc, #152]	; (5a4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     50c:	3308      	adds	r3, #8
     50e:	1808      	adds	r0, r1, r0
     510:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     512:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     514:	6828      	ldr	r0, [r5, #0]
     516:	015b      	lsls	r3, r3, #5
     518:	5c1a      	ldrb	r2, [r3, r0]
     51a:	438a      	bics	r2, r1
     51c:	0011      	movs	r1, r2
     51e:	2230      	movs	r2, #48	; 0x30
     520:	430a      	orrs	r2, r1
     522:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
     524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     526:	2900      	cmp	r1, #0
     528:	d1fc      	bne.n	524 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     52a:	26c0      	movs	r6, #192	; 0xc0
     52c:	b2c1      	uxtb	r1, r0
     52e:	4c1b      	ldr	r4, [pc, #108]	; (59c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     530:	014b      	lsls	r3, r1, #5
     532:	18e3      	adds	r3, r4, r3
     534:	689a      	ldr	r2, [r3, #8]
     536:	4d1a      	ldr	r5, [pc, #104]	; (5a0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
     538:	05b6      	lsls	r6, r6, #22
     53a:	402a      	ands	r2, r5
     53c:	4332      	orrs	r2, r6
     53e:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     540:	4a19      	ldr	r2, [pc, #100]	; (5a8 <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
     542:	0180      	lsls	r0, r0, #6
     544:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     546:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     548:	000a      	movs	r2, r1
     54a:	2707      	movs	r7, #7
     54c:	6824      	ldr	r4, [r4, #0]
     54e:	3208      	adds	r2, #8
     550:	0152      	lsls	r2, r2, #5
     552:	5d11      	ldrb	r1, [r2, r4]
     554:	43b9      	bics	r1, r7
     556:	000f      	movs	r7, r1
     558:	2101      	movs	r1, #1
     55a:	4339      	orrs	r1, r7
     55c:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     55e:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     560:	4910      	ldr	r1, [pc, #64]	; (5a4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
     562:	403d      	ands	r5, r7
     564:	1808      	adds	r0, r1, r0
     566:	432e      	orrs	r6, r5
     568:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     56a:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     56c:	2070      	movs	r0, #112	; 0x70
     56e:	5d11      	ldrb	r1, [r2, r4]
     570:	4381      	bics	r1, r0
     572:	0008      	movs	r0, r1
     574:	2110      	movs	r1, #16
     576:	4301      	orrs	r1, r0
     578:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     57a:	6899      	ldr	r1, [r3, #8]
     57c:	480b      	ldr	r0, [pc, #44]	; (5ac <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     57e:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     580:	4008      	ands	r0, r1
     582:	2180      	movs	r1, #128	; 0x80
     584:	0349      	lsls	r1, r1, #13
     586:	4301      	orrs	r1, r0
     588:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     58a:	6899      	ldr	r1, [r3, #8]
     58c:	0b89      	lsrs	r1, r1, #14
     58e:	0389      	lsls	r1, r1, #14
     590:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     592:	2340      	movs	r3, #64	; 0x40
     594:	7911      	ldrb	r1, [r2, #4]
     596:	430b      	orrs	r3, r1
     598:	7113      	strb	r3, [r2, #4]
     59a:	e7c3      	b.n	524 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
     59c:	200005a8 	.word	0x200005a8
     5a0:	8fffffff 	.word	0x8fffffff
     5a4:	2000011c 	.word	0x2000011c
     5a8:	200002dc 	.word	0x200002dc
     5ac:	f0003fff 	.word	0xf0003fff

000005b0 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     5b0:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     5b4:	6003      	str	r3, [r0, #0]
     5b6:	2301      	movs	r3, #1
     5b8:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     5ba:	b672      	cpsid	i
	}
     5bc:	4770      	bx	lr

000005be <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     5be:	6803      	ldr	r3, [r0, #0]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d102      	bne.n	5ca <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     5c4:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     5c6:	f3bf 8f6f 	isb	sy
	}
     5ca:	4770      	bx	lr

000005cc <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
     5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     5ce:	0006      	movs	r6, r0
     5d0:	36fc      	adds	r6, #252	; 0xfc
     5d2:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
     5d4:	0004      	movs	r4, r0
		if (current == 0) {
     5d6:	2b00      	cmp	r3, #0
     5d8:	d118      	bne.n	60c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
     5da:	27b2      	movs	r7, #178	; 0xb2
     5dc:	007f      	lsls	r7, r7, #1
     5de:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
     5e0:	4668      	mov	r0, sp
     5e2:	f7ff ffe5 	bl	5b0 <_ZN7__GuardC1Ev>
     5e6:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
     5e8:	b2ed      	uxtb	r5, r5
			synchronized {
     5ea:	3b01      	subs	r3, #1
     5ec:	d302      	bcc.n	5f4 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
     5ee:	5de5      	ldrb	r5, [r4, r7]
     5f0:	b2ed      	uxtb	r5, r5
     5f2:	e7fa      	b.n	5ea <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
     5f4:	4668      	mov	r0, sp
     5f6:	9301      	str	r3, [sp, #4]
     5f8:	f7ff ffe1 	bl	5be <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     5fc:	2d00      	cmp	r5, #0
     5fe:	d101      	bne.n	604 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
     600:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     602:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
     604:	6e70      	ldr	r0, [r6, #100]	; 0x64
     606:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
     608:	1ac0      	subs	r0, r0, r3
     60a:	e7fa      	b.n	602 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
     60c:	4668      	mov	r0, sp
     60e:	f7ff ffcf 	bl	5b0 <_ZN7__GuardC1Ev>
				ready = ready1;
     612:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
     614:	2500      	movs	r5, #0
     616:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     618:	0052      	lsls	r2, r2, #1
			synchronized {
     61a:	3b01      	subs	r3, #1
     61c:	d302      	bcc.n	624 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
     61e:	5ca5      	ldrb	r5, [r4, r2]
     620:	b2ed      	uxtb	r5, r5
			synchronized {
     622:	e7fa      	b.n	61a <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
     624:	4668      	mov	r0, sp
     626:	9301      	str	r3, [sp, #4]
     628:	f7ff ffc9 	bl	5be <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     62c:	2d00      	cmp	r5, #0
     62e:	d0e7      	beq.n	600 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
     630:	23d6      	movs	r3, #214	; 0xd6
     632:	005b      	lsls	r3, r3, #1
     634:	58e0      	ldr	r0, [r4, r3]
     636:	3b04      	subs	r3, #4
     638:	58e3      	ldr	r3, [r4, r3]
     63a:	e7e5      	b.n	608 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

0000063c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
     63c:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
     63e:	6844      	ldr	r4, [r0, #4]
     640:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     642:	6943      	ldr	r3, [r0, #20]
     644:	480b      	ldr	r0, [pc, #44]	; (674 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
     646:	b2db      	uxtb	r3, r3
     648:	015a      	lsls	r2, r3, #5
     64a:	18a2      	adds	r2, r4, r2
     64c:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     64e:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     650:	4008      	ands	r0, r1
     652:	2180      	movs	r1, #128	; 0x80
     654:	0349      	lsls	r1, r1, #13
     656:	4301      	orrs	r1, r0
     658:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     65a:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     65c:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     65e:	0b89      	lsrs	r1, r1, #14
     660:	0389      	lsls	r1, r1, #14
     662:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     664:	6822      	ldr	r2, [r4, #0]
     666:	18d3      	adds	r3, r2, r3
     668:	2240      	movs	r2, #64	; 0x40
     66a:	7919      	ldrb	r1, [r3, #4]
     66c:	430a      	orrs	r2, r1
     66e:	711a      	strb	r2, [r3, #4]
	}
     670:	bd10      	pop	{r4, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	f0003fff 	.word	0xf0003fff

00000678 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
     67a:	0005      	movs	r5, r0
     67c:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     67e:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
     680:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     682:	0019      	movs	r1, r3
	virtual void handleEndpoint()
     684:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     686:	3108      	adds	r1, #8
     688:	6810      	ldr	r0, [r2, #0]
     68a:	0149      	lsls	r1, r1, #5
     68c:	1841      	adds	r1, r0, r1
     68e:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     690:	07c9      	lsls	r1, r1, #31
     692:	d511      	bpl.n	6b8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     694:	015b      	lsls	r3, r3, #5
     696:	18d2      	adds	r2, r2, r3
     698:	6893      	ldr	r3, [r2, #8]
     69a:	049b      	lsls	r3, r3, #18
     69c:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
     69e:	d10c      	bne.n	6ba <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
     6a0:	0020      	movs	r0, r4
     6a2:	f7ff ffcb 	bl	63c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
     6a6:	6863      	ldr	r3, [r4, #4]
     6a8:	681a      	ldr	r2, [r3, #0]
     6aa:	696b      	ldr	r3, [r5, #20]
     6ac:	b2db      	uxtb	r3, r3
     6ae:	3308      	adds	r3, #8
     6b0:	015b      	lsls	r3, r3, #5
     6b2:	18d3      	adds	r3, r2, r3
     6b4:	227f      	movs	r2, #127	; 0x7f
     6b6:	71da      	strb	r2, [r3, #7]
	}
     6b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
     6ba:	69e9      	ldr	r1, [r5, #28]
     6bc:	2900      	cmp	r1, #0
     6be:	d123      	bne.n	708 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
     6c0:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     6c2:	0023      	movs	r3, r4
				incoming = 1;
     6c4:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     6c6:	3369      	adds	r3, #105	; 0x69
     6c8:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
     6ca:	61ee      	str	r6, [r5, #28]
				synchronized {
     6cc:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     6ce:	6053      	str	r3, [r2, #4]
					ready0 = true;
     6d0:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
     6d2:	f7ff ff6d 	bl	5b0 <_ZN7__GuardC1Ev>
					ready0 = true;
     6d6:	007f      	lsls	r7, r7, #1
					notify = ready1;
     6d8:	21b2      	movs	r1, #178	; 0xb2
     6da:	9b01      	ldr	r3, [sp, #4]
     6dc:	31ff      	adds	r1, #255	; 0xff
     6de:	3b01      	subs	r3, #1
				synchronized {
     6e0:	1c5a      	adds	r2, r3, #1
     6e2:	d038      	beq.n	756 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
     6e4:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
     6e6:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
     6e8:	0052      	lsls	r2, r2, #1
     6ea:	5ca2      	ldrb	r2, [r4, r2]
     6ec:	1e58      	subs	r0, r3, #1
     6ee:	b2d2      	uxtb	r2, r2
     6f0:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     6f2:	5c62      	ldrb	r2, [r4, r1]
     6f4:	4684      	mov	ip, r0
     6f6:	2a00      	cmp	r2, #0
     6f8:	d104      	bne.n	704 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
     6fa:	0020      	movs	r0, r4
     6fc:	9301      	str	r3, [sp, #4]
     6fe:	f7ff ff9d 	bl	63c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     702:	e7e9      	b.n	6d8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
     704:	4663      	mov	r3, ip
     706:	e7eb      	b.n	6e0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
     708:	21d6      	movs	r1, #214	; 0xd6
     70a:	0049      	lsls	r1, r1, #1
     70c:	5063      	str	r3, [r4, r1]
				incoming = 0;
     70e:	2300      	movs	r3, #0
     710:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
     712:	0023      	movs	r3, r4
     714:	331d      	adds	r3, #29
     716:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     718:	6053      	str	r3, [r2, #4]
				synchronized {
     71a:	4668      	mov	r0, sp
					ready1 = true;
     71c:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
     71e:	f7ff ff47 	bl	5b0 <_ZN7__GuardC1Ev>
					ready1 = true;
     722:	2701      	movs	r7, #1
     724:	0076      	lsls	r6, r6, #1
					notify = ready0;
     726:	21b2      	movs	r1, #178	; 0xb2
     728:	9b01      	ldr	r3, [sp, #4]
     72a:	31ff      	adds	r1, #255	; 0xff
     72c:	3b01      	subs	r3, #1
				synchronized {
     72e:	1c5a      	adds	r2, r3, #1
     730:	d011      	beq.n	756 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
     732:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
     734:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
     736:	0052      	lsls	r2, r2, #1
     738:	5ca2      	ldrb	r2, [r4, r2]
     73a:	1e58      	subs	r0, r3, #1
     73c:	b2d2      	uxtb	r2, r2
     73e:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     740:	5c62      	ldrb	r2, [r4, r1]
     742:	4684      	mov	ip, r0
     744:	2a00      	cmp	r2, #0
     746:	d104      	bne.n	752 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
     748:	0020      	movs	r0, r4
     74a:	9301      	str	r3, [sp, #4]
     74c:	f7ff ff76 	bl	63c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     750:	e7e9      	b.n	726 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
     752:	4663      	mov	r3, ip
     754:	e7eb      	b.n	72e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
     756:	4668      	mov	r0, sp
     758:	9301      	str	r3, [sp, #4]
     75a:	f7ff ff30 	bl	5be <_ZN7__GuardD1Ev>
     75e:	e7a2      	b.n	6a6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

00000760 <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
     760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     762:	0005      	movs	r5, r0
		synchronized {
     764:	4668      	mov	r0, sp
     766:	002c      	movs	r4, r5
     768:	f7ff ff22 	bl	5b0 <_ZN7__GuardC1Ev>
		uint32_t len = 0;
     76c:	2700      	movs	r7, #0

template <int N>
int RingBufferN<N>::availableForStore()
{
  if (_iHead >= _iTail)
    return N - 1 - _iHead + _iTail;
     76e:	22ff      	movs	r2, #255	; 0xff
     770:	9b01      	ldr	r3, [sp, #4]
     772:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
     774:	3b01      	subs	r3, #1
     776:	d30d      	bcc.n	794 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
     778:	68e0      	ldr	r0, [r4, #12]
     77a:	6921      	ldr	r1, [r4, #16]
     77c:	4288      	cmp	r0, r1
     77e:	db04      	blt.n	78a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
     780:	68e7      	ldr	r7, [r4, #12]
     782:	6920      	ldr	r0, [r4, #16]
     784:	1bd7      	subs	r7, r2, r7
     786:	183f      	adds	r7, r7, r0
     788:	e7f4      	b.n	774 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
  else
    return _iTail - _iHead - 1;
     78a:	6927      	ldr	r7, [r4, #16]
     78c:	68e1      	ldr	r1, [r4, #12]
     78e:	1a7f      	subs	r7, r7, r1
     790:	3f01      	subs	r7, #1
     792:	e7ef      	b.n	774 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
     794:	4668      	mov	r0, sp
     796:	9301      	str	r3, [sp, #4]
     798:	f7ff ff11 	bl	5be <_ZN7__GuardD1Ev>
		if (current == 0) {
     79c:	69a3      	ldr	r3, [r4, #24]
			synchronized {
     79e:	4668      	mov	r0, sp
		if (current == 0) {
     7a0:	2b00      	cmp	r3, #0
     7a2:	d141      	bne.n	828 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
     7a4:	f7ff ff04 	bl	5b0 <_ZN7__GuardC1Ev>
				if (!ready0) {
     7a8:	21b2      	movs	r1, #178	; 0xb2
     7aa:	9b01      	ldr	r3, [sp, #4]
     7ac:	0049      	lsls	r1, r1, #1
     7ae:	3b01      	subs	r3, #1
			synchronized {
     7b0:	1c5a      	adds	r2, r3, #1
     7b2:	d00c      	beq.n	7ce <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
     7b4:	5c6e      	ldrb	r6, [r5, r1]
     7b6:	1e5a      	subs	r2, r3, #1
     7b8:	b2f6      	uxtb	r6, r6
     7ba:	2e00      	cmp	r6, #0
     7bc:	d105      	bne.n	7ca <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
     7be:	4668      	mov	r0, sp
     7c0:	9301      	str	r3, [sp, #4]
     7c2:	f7ff fefc 	bl	5be <_ZN7__GuardD1Ev>
	}
     7c6:	0030      	movs	r0, r6
     7c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     7ca:	0013      	movs	r3, r2
     7cc:	e7f0      	b.n	7b0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
     7ce:	4668      	mov	r0, sp
     7d0:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
     7d2:	2600      	movs	r6, #0
			synchronized {
     7d4:	f7ff fef3 	bl	5be <_ZN7__GuardD1Ev>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     7d8:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
     7da:	42be      	cmp	r6, r7
     7dc:	d003      	beq.n	7e6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
     7de:	6e23      	ldr	r3, [r4, #96]	; 0x60
     7e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
     7e2:	428b      	cmp	r3, r1
     7e4:	d360      	bcc.n	8a8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
     7e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
     7e8:	6e22      	ldr	r2, [r4, #96]	; 0x60
     7ea:	429a      	cmp	r2, r3
     7ec:	d1eb      	bne.n	7c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
     7ee:	2300      	movs	r3, #0
     7f0:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
     7f2:	3301      	adds	r3, #1
     7f4:	61a3      	str	r3, [r4, #24]
				synchronized {
     7f6:	4668      	mov	r0, sp
					ready0 = false;
     7f8:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
     7fa:	f7ff fed9 	bl	5b0 <_ZN7__GuardC1Ev>
					ready0 = false;
     7fe:	0064      	lsls	r4, r4, #1
					if (notify) {
     800:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
     802:	2100      	movs	r1, #0
     804:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
     806:	32ff      	adds	r2, #255	; 0xff
     808:	3b01      	subs	r3, #1
				synchronized {
     80a:	1c58      	adds	r0, r3, #1
     80c:	d0d7      	beq.n	7be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
     80e:	5529      	strb	r1, [r5, r4]
					if (notify) {
     810:	5ca8      	ldrb	r0, [r5, r2]
     812:	1e5f      	subs	r7, r3, #1
     814:	2800      	cmp	r0, #0
     816:	d005      	beq.n	824 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
     818:	54a9      	strb	r1, [r5, r2]
						release();
     81a:	0028      	movs	r0, r5
     81c:	9301      	str	r3, [sp, #4]
     81e:	f7ff ff0d 	bl	63c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     822:	e7ed      	b.n	800 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
     824:	003b      	movs	r3, r7
     826:	e7f0      	b.n	80a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
     828:	f7ff fec2 	bl	5b0 <_ZN7__GuardC1Ev>
				if (!ready1) {
     82c:	21d8      	movs	r1, #216	; 0xd8
     82e:	9b01      	ldr	r3, [sp, #4]
     830:	0049      	lsls	r1, r1, #1
     832:	3b01      	subs	r3, #1
			synchronized {
     834:	1c5a      	adds	r2, r3, #1
     836:	d006      	beq.n	846 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
     838:	5c6e      	ldrb	r6, [r5, r1]
     83a:	1e5a      	subs	r2, r3, #1
     83c:	b2f6      	uxtb	r6, r6
     83e:	2e00      	cmp	r6, #0
     840:	d0bd      	beq.n	7be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
     842:	0013      	movs	r3, r2
     844:	e7f6      	b.n	834 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
     846:	4668      	mov	r0, sp
     848:	9301      	str	r3, [sp, #4]
     84a:	f7ff feb8 	bl	5be <_ZN7__GuardD1Ev>
     84e:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
     850:	2600      	movs	r6, #0
     852:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
     854:	42be      	cmp	r6, r7
     856:	d005      	beq.n	864 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
     858:	21d6      	movs	r1, #214	; 0xd6
     85a:	0049      	lsls	r1, r1, #1
     85c:	58ab      	ldr	r3, [r5, r2]
     85e:	5869      	ldr	r1, [r5, r1]
     860:	428b      	cmp	r3, r1
     862:	d332      	bcc.n	8ca <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
     864:	23d6      	movs	r3, #214	; 0xd6
     866:	005b      	lsls	r3, r3, #1
     868:	58eb      	ldr	r3, [r5, r3]
     86a:	58a9      	ldr	r1, [r5, r2]
     86c:	4299      	cmp	r1, r3
     86e:	d1aa      	bne.n	7c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
     870:	2300      	movs	r3, #0
				synchronized {
     872:	4668      	mov	r0, sp
				first1 = 0;
     874:	50ab      	str	r3, [r5, r2]
				current = 0;
     876:	61a3      	str	r3, [r4, #24]
					ready1 = false;
     878:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
     87a:	f7ff fe99 	bl	5b0 <_ZN7__GuardC1Ev>
					ready1 = false;
     87e:	0064      	lsls	r4, r4, #1
					if (notify) {
     880:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
     882:	2100      	movs	r1, #0
     884:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
     886:	32ff      	adds	r2, #255	; 0xff
     888:	3b01      	subs	r3, #1
				synchronized {
     88a:	1c58      	adds	r0, r3, #1
     88c:	d097      	beq.n	7be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
     88e:	5529      	strb	r1, [r5, r4]
					if (notify) {
     890:	5ca8      	ldrb	r0, [r5, r2]
     892:	1e5f      	subs	r7, r3, #1
     894:	2800      	cmp	r0, #0
     896:	d005      	beq.n	8a4 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
     898:	54a9      	strb	r1, [r5, r2]
						release();
     89a:	0028      	movs	r0, r5
     89c:	9301      	str	r3, [sp, #4]
     89e:	f7ff fecd 	bl	63c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     8a2:	e7ed      	b.n	880 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
     8a4:	003b      	movs	r3, r7
     8a6:	e7f0      	b.n	88a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
     8a8:	1c59      	adds	r1, r3, #1
     8aa:	18eb      	adds	r3, r5, r3
     8ac:	33ff      	adds	r3, #255	; 0xff
     8ae:	6621      	str	r1, [r4, #96]	; 0x60
     8b0:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
     8b2:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
     8b4:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
     8b6:	3301      	adds	r3, #1
     8b8:	4013      	ands	r3, r2
  if ( i != _iTail )
     8ba:	4283      	cmp	r3, r0
     8bc:	d003      	beq.n	8c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
     8be:	68e0      	ldr	r0, [r4, #12]
     8c0:	1828      	adds	r0, r5, r0
     8c2:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
     8c4:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
     8c6:	3601      	adds	r6, #1
     8c8:	e787      	b.n	7da <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
     8ca:	1c59      	adds	r1, r3, #1
     8cc:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
     8ce:	21ff      	movs	r1, #255	; 0xff
     8d0:	18eb      	adds	r3, r5, r3
     8d2:	3369      	adds	r3, #105	; 0x69
     8d4:	33ff      	adds	r3, #255	; 0xff
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
     8da:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
     8dc:	3301      	adds	r3, #1
     8de:	400b      	ands	r3, r1
  if ( i != _iTail )
     8e0:	6921      	ldr	r1, [r4, #16]
     8e2:	428b      	cmp	r3, r1
     8e4:	d004      	beq.n	8f0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
     8e6:	4660      	mov	r0, ip
     8e8:	68e1      	ldr	r1, [r4, #12]
     8ea:	1869      	adds	r1, r5, r1
     8ec:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
     8ee:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
     8f0:	3601      	adds	r6, #1
     8f2:	e7af      	b.n	854 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

000008f4 <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
     8f4:	b510      	push	{r4, lr}
     8f6:	0004      	movs	r4, r0
		_recv();
     8f8:	f7ff ff32 	bl	760 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
     8fc:	0023      	movs	r3, r4
     8fe:	33fc      	adds	r3, #252	; 0xfc
     900:	6919      	ldr	r1, [r3, #16]
     902:	68da      	ldr	r2, [r3, #12]
     904:	4291      	cmp	r1, r2
     906:	d003      	beq.n	910 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
     908:	691b      	ldr	r3, [r3, #16]
     90a:	18e4      	adds	r4, r4, r3
     90c:	7a20      	ldrb	r0, [r4, #8]
	}
     90e:	bd10      	pop	{r4, pc}
    return -1;
     910:	2001      	movs	r0, #1
     912:	4240      	negs	r0, r0
		return _rx_buffer.peek();
     914:	e7fb      	b.n	90e <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

00000916 <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
     916:	b510      	push	{r4, lr}
     918:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
     91a:	34fc      	adds	r4, #252	; 0xfc
		_recv();
     91c:	f7ff ff20 	bl	760 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
     920:	68e0      	ldr	r0, [r4, #12]
     922:	6923      	ldr	r3, [r4, #16]
     924:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
     926:	d501      	bpl.n	92c <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
     928:	3001      	adds	r0, #1
     92a:	30ff      	adds	r0, #255	; 0xff
	}
     92c:	bd10      	pop	{r4, pc}

0000092e <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
     92e:	b5f0      	push	{r4, r5, r6, r7, lr}
     930:	b085      	sub	sp, #20
     932:	9201      	str	r2, [sp, #4]
     934:	9100      	str	r1, [sp, #0]
     936:	0005      	movs	r5, r0
		_recv();
     938:	f7ff ff12 	bl	760 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
     93c:	a802      	add	r0, sp, #8
     93e:	f7ff fe37 	bl	5b0 <_ZN7__GuardC1Ev>
    return -1;
     942:	2001      	movs	r0, #1
		uint32_t i = 0;
     944:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
     946:	26ff      	movs	r6, #255	; 0xff
     948:	9a03      	ldr	r2, [sp, #12]
    return -1;
     94a:	4240      	negs	r0, r0
		synchronized {
     94c:	3a01      	subs	r2, #1
     94e:	d31d      	bcc.n	98c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
     950:	002b      	movs	r3, r5
     952:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
     954:	9901      	ldr	r1, [sp, #4]
     956:	428c      	cmp	r4, r1
     958:	d2f8      	bcs.n	94c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
     95a:	68d9      	ldr	r1, [r3, #12]
     95c:	691f      	ldr	r7, [r3, #16]
     95e:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
     960:	d501      	bpl.n	966 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
     962:	3101      	adds	r1, #1
     964:	31ff      	adds	r1, #255	; 0xff
     966:	2900      	cmp	r1, #0
     968:	d0f0      	beq.n	94c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
     96a:	6919      	ldr	r1, [r3, #16]
     96c:	68df      	ldr	r7, [r3, #12]
     96e:	468c      	mov	ip, r1
    return -1;
     970:	0001      	movs	r1, r0
  if(_iTail == _iHead)
     972:	45bc      	cmp	ip, r7
     974:	d006      	beq.n	984 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
     976:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
     978:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
     97a:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
     97c:	3701      	adds	r7, #1
     97e:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
     980:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
     982:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
     984:	9f00      	ldr	r7, [sp, #0]
     986:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
     988:	3401      	adds	r4, #1
     98a:	e7e3      	b.n	954 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
     98c:	a802      	add	r0, sp, #8
     98e:	9203      	str	r2, [sp, #12]
     990:	f7ff fe15 	bl	5be <_ZN7__GuardD1Ev>
	}
     994:	0020      	movs	r0, r4
     996:	b005      	add	sp, #20
     998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000099a <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     99a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     99c:	466b      	mov	r3, sp
     99e:	1ddc      	adds	r4, r3, #7
     9a0:	2300      	movs	r3, #0
{
     9a2:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
     9a4:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     9a6:	f001 ffd9 	bl	295c <_Z12PluggableUSBv>
     9aa:	0021      	movs	r1, r4
     9ac:	f001 ff56 	bl	285c <_ZN13PluggableUSB_12getInterfaceEPh>
     9b0:	682b      	ldr	r3, [r5, #0]
     9b2:	1818      	adds	r0, r3, r0
     9b4:	6028      	str	r0, [r5, #0]
	return interfaces;
     9b6:	7820      	ldrb	r0, [r4, #0]
}
     9b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000009bc <_ZN14USBDeviceClass4initEv>:
{
     9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
     9be:	2400      	movs	r4, #0
     9c0:	4b49      	ldr	r3, [pc, #292]	; (ae8 <_ZN14USBDeviceClass4initEv+0x12c>)
	pinMode(PIN_LED_TXL, OUTPUT);
     9c2:	2101      	movs	r1, #1
{
     9c4:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
     9c6:	201a      	movs	r0, #26
	txLEDPulse = 0;
     9c8:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     9ca:	f000 fe49 	bl	1660 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     9ce:	2101      	movs	r1, #1
     9d0:	201a      	movs	r0, #26
     9d2:	f000 fe91 	bl	16f8 <digitalWrite>
	rxLEDPulse = 0;
     9d6:	4b45      	ldr	r3, [pc, #276]	; (aec <_ZN14USBDeviceClass4initEv+0x130>)
	pinMode(PIN_LED_RXL, OUTPUT);
     9d8:	2101      	movs	r1, #1
     9da:	2019      	movs	r0, #25
	rxLEDPulse = 0;
     9dc:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     9de:	f000 fe3f 	bl	1660 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     9e2:	2101      	movs	r1, #1
     9e4:	2019      	movs	r0, #25
     9e6:	f000 fe87 	bl	16f8 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     9ea:	2320      	movs	r3, #32
     9ec:	4a40      	ldr	r2, [pc, #256]	; (af0 <_ZN14USBDeviceClass4initEv+0x134>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     9ee:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     9f0:	69d1      	ldr	r1, [r2, #28]
     9f2:	430b      	orrs	r3, r1
     9f4:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     9f6:	2201      	movs	r2, #1
     9f8:	493e      	ldr	r1, [pc, #248]	; (af4 <_ZN14USBDeviceClass4initEv+0x138>)
     9fa:	780b      	ldrb	r3, [r1, #0]
     9fc:	4313      	orrs	r3, r2
     9fe:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     a00:	4b3d      	ldr	r3, [pc, #244]	; (af8 <_ZN14USBDeviceClass4initEv+0x13c>)
     a02:	7819      	ldrb	r1, [r3, #0]
     a04:	4381      	bics	r1, r0
     a06:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     a08:	2106      	movs	r1, #6
     a0a:	781c      	ldrb	r4, [r3, #0]
     a0c:	4321      	orrs	r1, r4
     a0e:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     a10:	493a      	ldr	r1, [pc, #232]	; (afc <_ZN14USBDeviceClass4initEv+0x140>)
     a12:	780c      	ldrb	r4, [r1, #0]
     a14:	4322      	orrs	r2, r4
     a16:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     a18:	781a      	ldrb	r2, [r3, #0]
     a1a:	4002      	ands	r2, r0
     a1c:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     a1e:	2260      	movs	r2, #96	; 0x60
     a20:	7819      	ldrb	r1, [r3, #0]
     a22:	430a      	orrs	r2, r1
     a24:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
     a26:	4b36      	ldr	r3, [pc, #216]	; (b00 <_ZN14USBDeviceClass4initEv+0x144>)
     a28:	4a36      	ldr	r2, [pc, #216]	; (b04 <_ZN14USBDeviceClass4initEv+0x148>)
     a2a:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     a2c:	785f      	ldrb	r7, [r3, #1]
     a2e:	09ff      	lsrs	r7, r7, #7
     a30:	d1fc      	bne.n	a2c <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
     a32:	4835      	ldr	r0, [pc, #212]	; (b08 <_ZN14USBDeviceClass4initEv+0x14c>)
     a34:	f7ff fbd6 	bl	1e4 <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
     a38:	4e34      	ldr	r6, [pc, #208]	; (b0c <_ZN14USBDeviceClass4initEv+0x150>)
     a3a:	2301      	movs	r3, #1
     a3c:	0030      	movs	r0, r6
     a3e:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
     a40:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
     a42:	7822      	ldrb	r2, [r4, #0]
     a44:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     a46:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     a48:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
     a4a:	0052      	lsls	r2, r2, #1
     a4c:	f002 f881 	bl	2b52 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     a50:	78a3      	ldrb	r3, [r4, #2]
     a52:	07db      	lsls	r3, r3, #31
     a54:	d4fc      	bmi.n	a50 <_ZN14USBDeviceClass4initEv+0x94>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     a56:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
     a58:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     a5a:	4b2d      	ldr	r3, [pc, #180]	; (b10 <_ZN14USBDeviceClass4initEv+0x154>)
	usb.DESCADD.reg = (uint32_t)(&EP);
     a5c:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     a62:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     a64:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     a66:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     a68:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     a6a:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
     a6c:	4282      	cmp	r2, r0
     a6e:	d100      	bne.n	a72 <_ZN14USBDeviceClass4initEv+0xb6>
		pad_transn = 5;
     a70:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
     a72:	291f      	cmp	r1, #31
     a74:	d100      	bne.n	a78 <_ZN14USBDeviceClass4initEv+0xbc>
		pad_transp = 29;
     a76:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
     a78:	2b07      	cmp	r3, #7
     a7a:	d100      	bne.n	a7e <_ZN14USBDeviceClass4initEv+0xc2>
		pad_trim = 3;
     a7c:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
     a7e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
     a80:	4f24      	ldr	r7, [pc, #144]	; (b14 <_ZN14USBDeviceClass4initEv+0x158>)
     a82:	4002      	ands	r2, r0
     a84:	403e      	ands	r6, r7
     a86:	0192      	lsls	r2, r2, #6
     a88:	4332      	orrs	r2, r6
     a8a:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     a8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     a8e:	4001      	ands	r1, r0
     a90:	4382      	bics	r2, r0
     a92:	000e      	movs	r6, r1
     a94:	0011      	movs	r1, r2
     a96:	4331      	orrs	r1, r6
     a98:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     a9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     a9c:	0319      	lsls	r1, r3, #12
     a9e:	4b1e      	ldr	r3, [pc, #120]	; (b18 <_ZN14USBDeviceClass4initEv+0x15c>)
	SerialUSB.begin(0);
     aa0:	481e      	ldr	r0, [pc, #120]	; (b1c <_ZN14USBDeviceClass4initEv+0x160>)
     aa2:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     aa4:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
     aa6:	430b      	orrs	r3, r1
     aa8:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     aaa:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     aac:	21c1      	movs	r1, #193	; 0xc1
     aae:	4013      	ands	r3, r2
     ab0:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     ab2:	2304      	movs	r3, #4
     ab4:	7822      	ldrb	r2, [r4, #0]
     ab6:	0089      	lsls	r1, r1, #2
     ab8:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     aba:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     abc:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     abe:	8923      	ldrh	r3, [r4, #8]
     ac0:	4393      	bics	r3, r2
     ac2:	4a17      	ldr	r2, [pc, #92]	; (b20 <_ZN14USBDeviceClass4initEv+0x164>)
     ac4:	8123      	strh	r3, [r4, #8]
     ac6:	5853      	ldr	r3, [r2, r1]
     ac8:	021b      	lsls	r3, r3, #8
     aca:	0a1b      	lsrs	r3, r3, #8
     acc:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ace:	2380      	movs	r3, #128	; 0x80
     ad0:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     ad2:	7822      	ldrb	r2, [r4, #0]
     ad4:	3b7e      	subs	r3, #126	; 0x7e
     ad6:	4313      	orrs	r3, r2
     ad8:	7023      	strb	r3, [r4, #0]
	initialized = true;
     ada:	2301      	movs	r3, #1
	SerialUSB.begin(0);
     adc:	2100      	movs	r1, #0
	initialized = true;
     ade:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
     ae0:	f001 feb0 	bl	2844 <_ZN7Serial_5beginEm>
}
     ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	20000111 	.word	0x20000111
     aec:	20000110 	.word	0x20000110
     af0:	40000400 	.word	0x40000400
     af4:	41004458 	.word	0x41004458
     af8:	4100443c 	.word	0x4100443c
     afc:	41004459 	.word	0x41004459
     b00:	40000c00 	.word	0x40000c00
     b04:	00004006 	.word	0x00004006
     b08:	000014ed 	.word	0x000014ed
     b0c:	200005a8 	.word	0x200005a8
     b10:	00806024 	.word	0x00806024
     b14:	fffff83f 	.word	0xfffff83f
     b18:	ffff8fff 	.word	0xffff8fff
     b1c:	20000d70 	.word	0x20000d70
     b20:	e000e100 	.word	0xe000e100

00000b24 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
     b24:	7800      	ldrb	r0, [r0, #0]
     b26:	2800      	cmp	r0, #0
     b28:	d010      	beq.n	b4c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     b2a:	2101      	movs	r1, #1
     b2c:	4b08      	ldr	r3, [pc, #32]	; (b50 <_ZN14USBDeviceClass6attachEv+0x2c>)
     b2e:	681b      	ldr	r3, [r3, #0]
     b30:	891a      	ldrh	r2, [r3, #8]
     b32:	438a      	bics	r2, r1
     b34:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     b36:	2208      	movs	r2, #8
     b38:	8b19      	ldrh	r1, [r3, #24]
     b3a:	430a      	orrs	r2, r1
     b3c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     b3e:	2204      	movs	r2, #4
     b40:	8b19      	ldrh	r1, [r3, #24]
     b42:	430a      	orrs	r2, r1
     b44:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
     b46:	2200      	movs	r2, #0
     b48:	4b02      	ldr	r3, [pc, #8]	; (b54 <_ZN14USBDeviceClass6attachEv+0x30>)
     b4a:	601a      	str	r2, [r3, #0]
}
     b4c:	4770      	bx	lr
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	200005a8 	.word	0x200005a8
     b54:	200005a0 	.word	0x200005a0

00000b58 <_ZN14USBDeviceClass10setAddressEm>:
{
     b58:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     b5a:	4a0f      	ldr	r2, [pc, #60]	; (b98 <_ZN14USBDeviceClass10setAddressEm+0x40>)
     b5c:	6993      	ldr	r3, [r2, #24]
     b5e:	0b9b      	lsrs	r3, r3, #14
     b60:	039b      	lsls	r3, r3, #14
     b62:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     b64:	6813      	ldr	r3, [r2, #0]
     b66:	2202      	movs	r2, #2
     b68:	33ff      	adds	r3, #255	; 0xff
     b6a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     b6c:	7998      	ldrb	r0, [r3, #6]
     b6e:	3a82      	subs	r2, #130	; 0x82
     b70:	4302      	orrs	r2, r0
     b72:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     b74:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
     b76:	0792      	lsls	r2, r2, #30
     b78:	d5fc      	bpl.n	b74 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     b7a:	247f      	movs	r4, #127	; 0x7f
     b7c:	4a07      	ldr	r2, [pc, #28]	; (b9c <_ZN14USBDeviceClass10setAddressEm+0x44>)
     b7e:	4021      	ands	r1, r4
     b80:	7a93      	ldrb	r3, [r2, #10]
     b82:	0008      	movs	r0, r1
     b84:	43a3      	bics	r3, r4
     b86:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     b88:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     b8a:	4301      	orrs	r1, r0
     b8c:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     b8e:	7a91      	ldrb	r1, [r2, #10]
     b90:	425b      	negs	r3, r3
     b92:	430b      	orrs	r3, r1
     b94:	7293      	strb	r3, [r2, #10]
}
     b96:	bd10      	pop	{r4, pc}
     b98:	200005a8 	.word	0x200005a8
     b9c:	41005000 	.word	0x41005000

00000ba0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
     ba0:	b510      	push	{r4, lr}
     ba2:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
     ba4:	f001 feda 	bl	295c <_Z12PluggableUSBv>
     ba8:	0021      	movs	r1, r4
     baa:	f001 fe8e 	bl	28ca <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     bae:	2800      	cmp	r0, #0
     bb0:	d104      	bne.n	bbc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     bb2:	4a03      	ldr	r2, [pc, #12]	; (bc0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
     bb4:	6993      	ldr	r3, [r2, #24]
     bb6:	0b9b      	lsrs	r3, r3, #14
     bb8:	039b      	lsls	r3, r3, #14
     bba:	6193      	str	r3, [r2, #24]
}
     bbc:	bd10      	pop	{r4, pc}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	200005a8 	.word	0x200005a8

00000bc4 <_ZN14USBDeviceClass6initEPEmm>:
{
     bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bc6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     bc8:	2a83      	cmp	r2, #131	; 0x83
     bca:	d119      	bne.n	c00 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     bcc:	b2cb      	uxtb	r3, r1
     bce:	4c39      	ldr	r4, [pc, #228]	; (cb4 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
     bd0:	015a      	lsls	r2, r3, #5
     bd2:	18a2      	adds	r2, r4, r2
     bd4:	6991      	ldr	r1, [r2, #24]
     bd6:	4838      	ldr	r0, [pc, #224]	; (cb8 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     bd8:	01ad      	lsls	r5, r5, #6
     bda:	4008      	ands	r0, r1
     bdc:	21c0      	movs	r1, #192	; 0xc0
     bde:	0589      	lsls	r1, r1, #22
     be0:	4301      	orrs	r1, r0
     be2:	6191      	str	r1, [r2, #24]
     be4:	4935      	ldr	r1, [pc, #212]	; (cbc <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     be6:	6820      	ldr	r0, [r4, #0]
     be8:	194d      	adds	r5, r1, r5
     bea:	2170      	movs	r1, #112	; 0x70
     bec:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     bee:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     bf0:	015b      	lsls	r3, r3, #5
     bf2:	5c1a      	ldrb	r2, [r3, r0]
     bf4:	438a      	bics	r2, r1
     bf6:	0011      	movs	r1, r2
     bf8:	2240      	movs	r2, #64	; 0x40
     bfa:	430a      	orrs	r2, r1
     bfc:	541a      	strb	r2, [r3, r0]
}
     bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     c00:	2a02      	cmp	r2, #2
     c02:	d152      	bne.n	caa <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
     c04:	4a2e      	ldr	r2, [pc, #184]	; (cc0 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
     c06:	008b      	lsls	r3, r1, #2
     c08:	5898      	ldr	r0, [r3, r2]
     c0a:	2800      	cmp	r0, #0
     c0c:	d002      	beq.n	c14 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
     c0e:	6803      	ldr	r3, [r0, #0]
     c10:	695b      	ldr	r3, [r3, #20]
     c12:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
     c14:	20da      	movs	r0, #218	; 0xda
     c16:	0040      	lsls	r0, r0, #1
     c18:	f000 ffee 	bl	1bf8 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
     c1c:	2280      	movs	r2, #128	; 0x80
     c1e:	0004      	movs	r4, r0
		notify(false)
     c20:	4e24      	ldr	r6, [pc, #144]	; (cb4 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
     c22:	4b28      	ldr	r3, [pc, #160]	; (cc4 <_ZN14USBDeviceClass6initEPEmm+0x100>)
     c24:	6046      	str	r6, [r0, #4]
     c26:	6003      	str	r3, [r0, #0]
     c28:	0052      	lsls	r2, r2, #1
     c2a:	2100      	movs	r1, #0
     c2c:	3008      	adds	r0, #8
     c2e:	f001 ff90 	bl	2b52 <memset>
  _iHead = 0;
     c32:	0022      	movs	r2, r4
     c34:	2300      	movs	r3, #0
     c36:	32fc      	adds	r2, #252	; 0xfc
     c38:	60d3      	str	r3, [r2, #12]
     c3a:	6155      	str	r5, [r2, #20]
  _iTail = 0;
     c3c:	6113      	str	r3, [r2, #16]
     c3e:	6613      	str	r3, [r2, #96]	; 0x60
     c40:	6193      	str	r3, [r2, #24]
     c42:	61d3      	str	r3, [r2, #28]
     c44:	6653      	str	r3, [r2, #100]	; 0x64
     c46:	22b2      	movs	r2, #178	; 0xb2
     c48:	0052      	lsls	r2, r2, #1
     c4a:	54a3      	strb	r3, [r4, r2]
     c4c:	3244      	adds	r2, #68	; 0x44
     c4e:	50a3      	str	r3, [r4, r2]
     c50:	3204      	adds	r2, #4
     c52:	50a3      	str	r3, [r4, r2]
     c54:	3204      	adds	r2, #4
     c56:	54a3      	strb	r3, [r4, r2]
     c58:	22b2      	movs	r2, #178	; 0xb2
     c5a:	32ff      	adds	r2, #255	; 0xff
     c5c:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c5e:	b2ea      	uxtb	r2, r5
     c60:	0150      	lsls	r0, r2, #5
     c62:	1831      	adds	r1, r6, r0
     c64:	688b      	ldr	r3, [r1, #8]
     c66:	4f14      	ldr	r7, [pc, #80]	; (cb8 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c68:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c6a:	401f      	ands	r7, r3
     c6c:	23c0      	movs	r3, #192	; 0xc0
     c6e:	059b      	lsls	r3, r3, #22
     c70:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c72:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c74:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c76:	6833      	ldr	r3, [r6, #0]
     c78:	0152      	lsls	r2, r2, #5
     c7a:	5cd6      	ldrb	r6, [r2, r3]
     c7c:	00ad      	lsls	r5, r5, #2
     c7e:	43be      	bics	r6, r7
     c80:	46b4      	mov	ip, r6
     c82:	2603      	movs	r6, #3
     c84:	4667      	mov	r7, ip
     c86:	433e      	orrs	r6, r7
     c88:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
     c8a:	0022      	movs	r2, r4
     c8c:	321d      	adds	r2, #29
     c8e:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     c90:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     c92:	2201      	movs	r2, #1
     c94:	181b      	adds	r3, r3, r0
     c96:	33ff      	adds	r3, #255	; 0xff
     c98:	7a99      	ldrb	r1, [r3, #10]
		release();
     c9a:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     c9c:	430a      	orrs	r2, r1
     c9e:	729a      	strb	r2, [r3, #10]
		release();
     ca0:	f7ff fccc 	bl	63c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     ca4:	4b06      	ldr	r3, [pc, #24]	; (cc0 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
     ca6:	515c      	str	r4, [r3, r5]
     ca8:	e7a9      	b.n	bfe <_ZN14USBDeviceClass6initEPEmm+0x3a>
     caa:	0011      	movs	r1, r2
     cac:	0028      	movs	r0, r5
     cae:	f7ff fc1d 	bl	4ec <_ZN14USBDeviceClass6initEPEmm.part.7>
}
     cb2:	e7a4      	b.n	bfe <_ZN14USBDeviceClass6initEPEmm+0x3a>
     cb4:	200005a8 	.word	0x200005a8
     cb8:	8fffffff 	.word	0x8fffffff
     cbc:	2000011c 	.word	0x2000011c
     cc0:	200000f4 	.word	0x200000f4
     cc4:	00002d30 	.word	0x00002d30

00000cc8 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
     cc8:	b570      	push	{r4, r5, r6, lr}
     cca:	0005      	movs	r5, r0
     ccc:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
     cce:	4b06      	ldr	r3, [pc, #24]	; (ce8 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     cd0:	00a2      	lsls	r2, r4, #2
     cd2:	58d2      	ldr	r2, [r2, r3]
     cd4:	2a00      	cmp	r2, #0
     cd6:	d006      	beq.n	ce6 <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
     cd8:	0021      	movs	r1, r4
     cda:	0028      	movs	r0, r5
     cdc:	3401      	adds	r4, #1
     cde:	f7ff ff71 	bl	bc4 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
     ce2:	2c0a      	cmp	r4, #10
     ce4:	d1f3      	bne.n	cce <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
     ce6:	bd70      	pop	{r4, r5, r6, pc}
     ce8:	200000c8 	.word	0x200000c8

00000cec <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     cec:	4b0b      	ldr	r3, [pc, #44]	; (d1c <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     cee:	b2ca      	uxtb	r2, r1
     cf0:	480b      	ldr	r0, [pc, #44]	; (d20 <_ZN14USBDeviceClass5clearEm+0x34>)
     cf2:	0189      	lsls	r1, r1, #6
     cf4:	1859      	adds	r1, r3, r1
     cf6:	0153      	lsls	r3, r2, #5
     cf8:	18c3      	adds	r3, r0, r3
     cfa:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     cfc:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     cfe:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     d00:	0b89      	lsrs	r1, r1, #14
     d02:	0389      	lsls	r1, r1, #14
     d04:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     d06:	6803      	ldr	r3, [r0, #0]
     d08:	0152      	lsls	r2, r2, #5
     d0a:	189a      	adds	r2, r3, r2
     d0c:	2302      	movs	r3, #2
     d0e:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     d10:	7951      	ldrb	r1, [r2, #5]
     d12:	3b82      	subs	r3, #130	; 0x82
     d14:	430b      	orrs	r3, r1
     d16:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
     d18:	4770      	bx	lr
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	2000011c 	.word	0x2000011c
     d20:	200005a8 	.word	0x200005a8

00000d24 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     d24:	4b08      	ldr	r3, [pc, #32]	; (d48 <_ZN14USBDeviceClass9availableEm+0x24>)
     d26:	008a      	lsls	r2, r1, #2
     d28:	58d0      	ldr	r0, [r2, r3]
{
     d2a:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     d2c:	2800      	cmp	r0, #0
     d2e:	d003      	beq.n	d38 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     d30:	6803      	ldr	r3, [r0, #0]
     d32:	689b      	ldr	r3, [r3, #8]
     d34:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     d36:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     d38:	b2c9      	uxtb	r1, r1
     d3a:	4b04      	ldr	r3, [pc, #16]	; (d4c <_ZN14USBDeviceClass9availableEm+0x28>)
     d3c:	0149      	lsls	r1, r1, #5
     d3e:	1859      	adds	r1, r3, r1
     d40:	6888      	ldr	r0, [r1, #8]
     d42:	0480      	lsls	r0, r0, #18
     d44:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
     d46:	e7f6      	b.n	d36 <_ZN14USBDeviceClass9availableEm+0x12>
     d48:	200000f4 	.word	0x200000f4
     d4c:	200005a8 	.word	0x200005a8

00000d50 <_ZN14USBDeviceClass5flushEm>:
{
     d50:	b510      	push	{r4, lr}
     d52:	000c      	movs	r4, r1
	if (available(ep)) {
     d54:	f7ff ffe6 	bl	d24 <_ZN14USBDeviceClass9availableEm>
     d58:	2800      	cmp	r0, #0
     d5a:	d00c      	beq.n	d76 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     d5c:	4b06      	ldr	r3, [pc, #24]	; (d78 <_ZN14USBDeviceClass5flushEm+0x28>)
     d5e:	b2e4      	uxtb	r4, r4
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	3408      	adds	r4, #8
     d64:	0164      	lsls	r4, r4, #5
     d66:	191c      	adds	r4, r3, r4
     d68:	2380      	movs	r3, #128	; 0x80
     d6a:	7962      	ldrb	r2, [r4, #5]
     d6c:	425b      	negs	r3, r3
     d6e:	4313      	orrs	r3, r2
     d70:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     d72:	2302      	movs	r3, #2
     d74:	71e3      	strb	r3, [r4, #7]
}
     d76:	bd10      	pop	{r4, pc}
     d78:	200005a8 	.word	0x200005a8

00000d7c <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     d80:	4b30      	ldr	r3, [pc, #192]	; (e44 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
     d82:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     d84:	681b      	ldr	r3, [r3, #0]
{
     d86:	0007      	movs	r7, r0
     d88:	000d      	movs	r5, r1
     d8a:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
     d8c:	2b00      	cmp	r3, #0
     d8e:	d056      	beq.n	e3e <_ZN14USBDeviceClass4recvEmPvm+0xc2>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
     d90:	4e2d      	ldr	r6, [pc, #180]	; (e48 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     d92:	7831      	ldrb	r1, [r6, #0]
     d94:	b2c9      	uxtb	r1, r1
     d96:	2900      	cmp	r1, #0
     d98:	d102      	bne.n	da0 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     d9a:	2019      	movs	r0, #25
     d9c:	f000 fcac 	bl	16f8 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
     da0:	2364      	movs	r3, #100	; 0x64
     da2:	7033      	strb	r3, [r6, #0]
#endif

	if (epHandlers[ep]) {
     da4:	4b29      	ldr	r3, [pc, #164]	; (e4c <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     da6:	00aa      	lsls	r2, r5, #2
     da8:	58d0      	ldr	r0, [r2, r3]
     daa:	2800      	cmp	r0, #0
     dac:	d008      	beq.n	dc0 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
     dae:	6803      	ldr	r3, [r0, #0]
     db0:	0022      	movs	r2, r4
     db2:	685b      	ldr	r3, [r3, #4]
     db4:	9902      	ldr	r1, [sp, #8]
     db6:	4798      	blx	r3
     db8:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
     dba:	0020      	movs	r0, r4
     dbc:	b005      	add	sp, #20
     dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
     dc0:	0029      	movs	r1, r5
     dc2:	0038      	movs	r0, r7
     dc4:	f7ff ffae 	bl	d24 <_ZN14USBDeviceClass9availableEm>
     dc8:	4284      	cmp	r4, r0
     dca:	d904      	bls.n	dd6 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
     dcc:	0029      	movs	r1, r5
     dce:	0038      	movs	r0, r7
     dd0:	f7ff ffa8 	bl	d24 <_ZN14USBDeviceClass9availableEm>
     dd4:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     dd6:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     dd8:	b2eb      	uxtb	r3, r5
     dda:	4e1d      	ldr	r6, [pc, #116]	; (e50 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     ddc:	9303      	str	r3, [sp, #12]
     dde:	015b      	lsls	r3, r3, #5
     de0:	9301      	str	r3, [sp, #4]
     de2:	18f2      	adds	r2, r6, r3
     de4:	6893      	ldr	r3, [r2, #8]
     de6:	0b9b      	lsrs	r3, r3, #14
     de8:	039b      	lsls	r3, r3, #14
     dea:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     dec:	9a01      	ldr	r2, [sp, #4]
     dee:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     df0:	9802      	ldr	r0, [sp, #8]
     df2:	189b      	adds	r3, r3, r2
     df4:	33ff      	adds	r3, #255	; 0xff
     df6:	7a5a      	ldrb	r2, [r3, #9]
     df8:	430a      	orrs	r2, r1
     dfa:	4916      	ldr	r1, [pc, #88]	; (e54 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     dfc:	725a      	strb	r2, [r3, #9]
     dfe:	01ab      	lsls	r3, r5, #6
     e00:	18c9      	adds	r1, r1, r3
     e02:	0022      	movs	r2, r4
     e04:	f001 fe9c 	bl	2b40 <memcpy>
	if (len && !available(ep)) {
     e08:	2c00      	cmp	r4, #0
     e0a:	d0d6      	beq.n	dba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     e0c:	0029      	movs	r1, r5
     e0e:	0038      	movs	r0, r7
     e10:	f7ff ff88 	bl	d24 <_ZN14USBDeviceClass9availableEm>
     e14:	2800      	cmp	r0, #0
     e16:	d1d0      	bne.n	dba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e18:	2140      	movs	r1, #64	; 0x40
     e1a:	9b03      	ldr	r3, [sp, #12]
     e1c:	6832      	ldr	r2, [r6, #0]
     e1e:	3308      	adds	r3, #8
     e20:	015b      	lsls	r3, r3, #5
     e22:	18d3      	adds	r3, r2, r3
     e24:	7918      	ldrb	r0, [r3, #4]
     e26:	4301      	orrs	r1, r0
     e28:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     e2a:	2101      	movs	r1, #1
     e2c:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     e2e:	2101      	movs	r1, #1
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	18d3      	adds	r3, r2, r3
     e34:	33ff      	adds	r3, #255	; 0xff
     e36:	7a9a      	ldrb	r2, [r3, #10]
     e38:	430a      	orrs	r2, r1
     e3a:	729a      	strb	r2, [r3, #10]
     e3c:	e7bd      	b.n	dba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
     e3e:	2401      	movs	r4, #1
     e40:	4264      	negs	r4, r4
     e42:	e7ba      	b.n	dba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     e44:	200005a0 	.word	0x200005a0
     e48:	20000110 	.word	0x20000110
     e4c:	200000f4 	.word	0x200000f4
     e50:	200005a8 	.word	0x200005a8
     e54:	200002dc 	.word	0x200002dc

00000e58 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
     e58:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
     e5a:	466b      	mov	r3, sp
     e5c:	1ddc      	adds	r4, r3, #7
     e5e:	0022      	movs	r2, r4
     e60:	2301      	movs	r3, #1
     e62:	f7ff ff8b 	bl	d7c <_ZN14USBDeviceClass4recvEmPvm>
     e66:	2801      	cmp	r0, #1
     e68:	d101      	bne.n	e6e <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
     e6a:	7820      	ldrb	r0, [r4, #0]
	}
}
     e6c:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
     e6e:	2001      	movs	r0, #1
     e70:	4240      	negs	r0, r0
     e72:	e7fb      	b.n	e6c <_ZN14USBDeviceClass4recvEm+0x14>

00000e74 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     e74:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     e76:	4b13      	ldr	r3, [pc, #76]	; (ec4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     e78:	b2cc      	uxtb	r4, r1
     e7a:	4a13      	ldr	r2, [pc, #76]	; (ec8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
     e7c:	0160      	lsls	r0, r4, #5
     e7e:	0189      	lsls	r1, r1, #6
     e80:	1859      	adds	r1, r3, r1
     e82:	1813      	adds	r3, r2, r0
     e84:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e86:	6899      	ldr	r1, [r3, #8]
     e88:	4d10      	ldr	r5, [pc, #64]	; (ecc <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e8a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e8c:	400d      	ands	r5, r1
     e8e:	2180      	movs	r1, #128	; 0x80
     e90:	0349      	lsls	r1, r1, #13
     e92:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e94:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e96:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e98:	6899      	ldr	r1, [r3, #8]
     e9a:	0b89      	lsrs	r1, r1, #14
     e9c:	0389      	lsls	r1, r1, #14
     e9e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     ea0:	6811      	ldr	r1, [r2, #0]
     ea2:	0163      	lsls	r3, r4, #5
     ea4:	18cb      	adds	r3, r1, r3
     ea6:	791e      	ldrb	r6, [r3, #4]
     ea8:	4335      	orrs	r5, r6
     eaa:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     eac:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     eae:	066d      	lsls	r5, r5, #25
     eb0:	d5fc      	bpl.n	eac <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     eb2:	0164      	lsls	r4, r4, #5
     eb4:	1909      	adds	r1, r1, r4
     eb6:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     eb8:	07db      	lsls	r3, r3, #31
     eba:	d5fc      	bpl.n	eb6 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     ebc:	1812      	adds	r2, r2, r0
     ebe:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
     ec0:	b2c0      	uxtb	r0, r0
}
     ec2:	bd70      	pop	{r4, r5, r6, pc}
     ec4:	200002dc 	.word	0x200002dc
     ec8:	200005a8 	.word	0x200005a8
     ecc:	f0003fff 	.word	0xf0003fff

00000ed0 <_ZN14USBDeviceClass11recvControlEPvm>:
{
     ed0:	b570      	push	{r4, r5, r6, lr}
     ed2:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
     ed4:	2100      	movs	r1, #0
{
     ed6:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
     ed8:	f7ff ffcc 	bl	e74 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     edc:	42a0      	cmp	r0, r4
     ede:	d900      	bls.n	ee2 <_ZN14USBDeviceClass11recvControlEPvm+0x12>
     ee0:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
     ee2:	2300      	movs	r3, #0
		data[i] = buffer[i];
     ee4:	4903      	ldr	r1, [pc, #12]	; (ef4 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
     ee6:	42a3      	cmp	r3, r4
     ee8:	d003      	beq.n	ef2 <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
     eea:	5c5a      	ldrb	r2, [r3, r1]
     eec:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
     eee:	3301      	adds	r3, #1
     ef0:	e7f9      	b.n	ee6 <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
     ef2:	bd70      	pop	{r4, r5, r6, pc}
     ef4:	200002dc 	.word	0x200002dc

00000ef8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
     efa:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     efc:	4b3f      	ldr	r3, [pc, #252]	; (ffc <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
{
     efe:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     f00:	681b      	ldr	r3, [r3, #0]
{
     f02:	000f      	movs	r7, r1
     f04:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     f06:	2b00      	cmp	r3, #0
     f08:	d03f      	beq.n	f8a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	01db      	lsls	r3, r3, #7
     f0e:	429e      	cmp	r6, r3
     f10:	d83b      	bhi.n	f8a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     f12:	4c3b      	ldr	r4, [pc, #236]	; (1000 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
     f14:	7821      	ldrb	r1, [r4, #0]
     f16:	b2c9      	uxtb	r1, r1
     f18:	2900      	cmp	r1, #0
     f1a:	d102      	bne.n	f22 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     f1c:	201a      	movs	r0, #26
     f1e:	f000 fbeb 	bl	16f8 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
     f22:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
     f24:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     f26:	4a37      	ldr	r2, [pc, #220]	; (1004 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
     f28:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     f2a:	01bb      	lsls	r3, r7, #6
     f2c:	18d3      	adds	r3, r2, r3
     f2e:	9302      	str	r3, [sp, #8]
	while (len != 0)
     f30:	2e00      	cmp	r6, #0
     f32:	d02c      	beq.n	f8e <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
     f34:	4b34      	ldr	r3, [pc, #208]	; (1008 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
     f36:	681b      	ldr	r3, [r3, #0]
     f38:	9303      	str	r3, [sp, #12]
     f3a:	23ff      	movs	r3, #255	; 0xff
     f3c:	403b      	ands	r3, r7
     f3e:	001c      	movs	r4, r3
     f40:	9300      	str	r3, [sp, #0]
     f42:	3408      	adds	r4, #8
     f44:	9b03      	ldr	r3, [sp, #12]
     f46:	0164      	lsls	r4, r4, #5
     f48:	191c      	adds	r4, r3, r4
     f4a:	79a3      	ldrb	r3, [r4, #6]
     f4c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
     f4e:	d021      	beq.n	f94 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
     f50:	4b2e      	ldr	r3, [pc, #184]	; (100c <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
     f52:	492f      	ldr	r1, [pc, #188]	; (1010 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
     f54:	6818      	ldr	r0, [r3, #0]
     f56:	f001 fd2f 	bl	29b8 <__udivsi3>
     f5a:	4b2e      	ldr	r3, [pc, #184]	; (1014 <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
     f5c:	2117      	movs	r1, #23
     f5e:	4358      	muls	r0, r3
     f60:	f001 fd2a 	bl	29b8 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     f64:	4b2c      	ldr	r3, [pc, #176]	; (1018 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     f66:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
     f68:	0792      	lsls	r2, r2, #30
     f6a:	d413      	bmi.n	f94 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     f6c:	5dda      	ldrb	r2, [r3, r7]
     f6e:	2a00      	cmp	r2, #0
     f70:	d101      	bne.n	f76 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
     f72:	3801      	subs	r0, #1
     f74:	d2f7      	bcs.n	f66 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
     f76:	2201      	movs	r2, #1
     f78:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     f7a:	9b00      	ldr	r3, [sp, #0]
     f7c:	4a22      	ldr	r2, [pc, #136]	; (1008 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
     f7e:	015b      	lsls	r3, r3, #5
     f80:	18d3      	adds	r3, r2, r3
     f82:	699a      	ldr	r2, [r3, #24]
     f84:	0b92      	lsrs	r2, r2, #14
     f86:	0392      	lsls	r2, r2, #14
     f88:	619a      	str	r2, [r3, #24]
					return -1;
     f8a:	2501      	movs	r5, #1
     f8c:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
     f8e:	0028      	movs	r0, r5
     f90:	b005      	add	sp, #20
     f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
     f94:	2200      	movs	r2, #0
     f96:	4b20      	ldr	r3, [pc, #128]	; (1018 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
     f98:	0034      	movs	r4, r6
     f9a:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
     f9c:	2e3f      	cmp	r6, #63	; 0x3f
     f9e:	d909      	bls.n	fb4 <_ZN14USBDeviceClass4sendEmPKvm+0xbc>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
     fa0:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
     fa2:	2440      	movs	r4, #64	; 0x40
     fa4:	015a      	lsls	r2, r3, #5
     fa6:	4b18      	ldr	r3, [pc, #96]	; (1008 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
     fa8:	189b      	adds	r3, r3, r2
     faa:	2280      	movs	r2, #128	; 0x80
     fac:	6999      	ldr	r1, [r3, #24]
     fae:	0612      	lsls	r2, r2, #24
     fb0:	430a      	orrs	r2, r1
     fb2:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     fb4:	0022      	movs	r2, r4
     fb6:	9901      	ldr	r1, [sp, #4]
     fb8:	9802      	ldr	r0, [sp, #8]
     fba:	f001 fdc1 	bl	2b40 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     fbe:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     fc0:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     fc2:	015a      	lsls	r2, r3, #5
     fc4:	4b10      	ldr	r3, [pc, #64]	; (1008 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     fc6:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     fc8:	189b      	adds	r3, r3, r2
     fca:	9a02      	ldr	r2, [sp, #8]
		written += length;
     fcc:	192d      	adds	r5, r5, r4
     fce:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     fd0:	699a      	ldr	r2, [r3, #24]
		len -= length;
     fd2:	1b36      	subs	r6, r6, r4
     fd4:	0b92      	lsrs	r2, r2, #14
     fd6:	0392      	lsls	r2, r2, #14
     fd8:	430a      	orrs	r2, r1
     fda:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     fdc:	9b00      	ldr	r3, [sp, #0]
     fde:	9a03      	ldr	r2, [sp, #12]
     fe0:	3308      	adds	r3, #8
     fe2:	015b      	lsls	r3, r3, #5
     fe4:	18d3      	adds	r3, r2, r3
     fe6:	2202      	movs	r2, #2
     fe8:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     fea:	7959      	ldrb	r1, [r3, #5]
     fec:	3a82      	subs	r2, #130	; 0x82
     fee:	430a      	orrs	r2, r1
     ff0:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
     ff2:	9b01      	ldr	r3, [sp, #4]
     ff4:	191b      	adds	r3, r3, r4
     ff6:	9301      	str	r3, [sp, #4]
	while (len != 0)
     ff8:	e79a      	b.n	f30 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	200005a0 	.word	0x200005a0
    1000:	20000111 	.word	0x20000111
    1004:	2000011c 	.word	0x2000011c
    1008:	200005a8 	.word	0x200005a8
    100c:	20000004 	.word	0x20000004
    1010:	000f4240 	.word	0x000f4240
    1014:	00011170 	.word	0x00011170
    1018:	20000113 	.word	0x20000113

0000101c <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    101c:	b570      	push	{r4, r5, r6, lr}
    101e:	000d      	movs	r5, r1
    1020:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1022:	4e0d      	ldr	r6, [pc, #52]	; (1058 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1024:	01ab      	lsls	r3, r5, #6
    1026:	18f6      	adds	r6, r6, r3
{
    1028:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    102a:	0030      	movs	r0, r6
    102c:	0022      	movs	r2, r4
    102e:	f001 fd87 	bl	2b40 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1032:	b2ed      	uxtb	r5, r5
    1034:	4909      	ldr	r1, [pc, #36]	; (105c <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    1036:	016d      	lsls	r5, r5, #5
    1038:	194d      	adds	r5, r1, r5
    103a:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    103c:	69ab      	ldr	r3, [r5, #24]
    103e:	4a08      	ldr	r2, [pc, #32]	; (1060 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1040:	0020      	movs	r0, r4
    1042:	4013      	ands	r3, r2
    1044:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1046:	69ab      	ldr	r3, [r5, #24]
    1048:	04a2      	lsls	r2, r4, #18
    104a:	0b9b      	lsrs	r3, r3, #14
    104c:	0c92      	lsrs	r2, r2, #18
    104e:	039b      	lsls	r3, r3, #14
    1050:	4313      	orrs	r3, r2
    1052:	61ab      	str	r3, [r5, #24]
    1054:	bd70      	pop	{r4, r5, r6, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	2000011c 	.word	0x2000011c
    105c:	200005a8 	.word	0x200005a8
    1060:	f0003fff 	.word	0xf0003fff

00001064 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1066:	4b10      	ldr	r3, [pc, #64]	; (10a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1068:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    106a:	781b      	ldrb	r3, [r3, #0]
{
    106c:	000f      	movs	r7, r1
    106e:	0015      	movs	r5, r2
	if (_dry_run == true)
    1070:	2b00      	cmp	r3, #0
    1072:	d10c      	bne.n	108e <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1074:	4b0d      	ldr	r3, [pc, #52]	; (10ac <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    1076:	0016      	movs	r6, r2
    1078:	781c      	ldrb	r4, [r3, #0]
    107a:	2c00      	cmp	r4, #0
    107c:	d009      	beq.n	1092 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    107e:	4e0c      	ldr	r6, [pc, #48]	; (10b0 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1080:	480c      	ldr	r0, [pc, #48]	; (10b4 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1082:	8834      	ldrh	r4, [r6, #0]
    1084:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1086:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1088:	f001 fd5a 	bl	2b40 <memcpy>
		_pack_size += len;
    108c:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    108e:	0028      	movs	r0, r5
    1090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1092:	2e00      	cmp	r6, #0
    1094:	d0fb      	beq.n	108e <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1096:	193a      	adds	r2, r7, r4
    1098:	0033      	movs	r3, r6
    109a:	2100      	movs	r1, #0
    109c:	9801      	ldr	r0, [sp, #4]
    109e:	f7ff ffbd 	bl	101c <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    10a2:	1824      	adds	r4, r4, r0
		len -= sent;
    10a4:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    10a6:	e7f4      	b.n	1092 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    10a8:	2000049c 	.word	0x2000049c
    10ac:	2000059d 	.word	0x2000059d
    10b0:	2000059e 	.word	0x2000059e
    10b4:	2000049d 	.word	0x2000049d

000010b8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    10b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ba:	000e      	movs	r6, r1
    10bc:	0015      	movs	r5, r2
		return false;
    10be:	2700      	movs	r7, #0
	if (maxlen < 2)
    10c0:	2a01      	cmp	r2, #1
    10c2:	d927      	bls.n	1114 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    10c4:	0010      	movs	r0, r2
    10c6:	f001 fd27 	bl	2b18 <malloc>
    10ca:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    10cc:	0030      	movs	r0, r6
    10ce:	f001 fe03 	bl	2cd8 <strlen>
    10d2:	3001      	adds	r0, #1
    10d4:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    10d6:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    10d8:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    10da:	2202      	movs	r2, #2
		buffer[i] = 0;
    10dc:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    10de:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    10e0:	4295      	cmp	r5, r2
    10e2:	d90d      	bls.n	1100 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    10e4:	7831      	ldrb	r1, [r6, #0]
    10e6:	2900      	cmp	r1, #0
    10e8:	d00a      	beq.n	1100 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    10ea:	1c53      	adds	r3, r2, #1
    10ec:	b2db      	uxtb	r3, r3
    10ee:	3601      	adds	r6, #1
    10f0:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    10f2:	429d      	cmp	r5, r3
    10f4:	d003      	beq.n	10fe <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    10f6:	3202      	adds	r2, #2
		buffer[i] = 0;
    10f8:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    10fa:	b2d2      	uxtb	r2, r2
    10fc:	e7f0      	b.n	10e0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    10fe:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    1100:	0021      	movs	r1, r4
    1102:	4805      	ldr	r0, [pc, #20]	; (1118 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    1104:	f7ff ffae 	bl	1064 <_ZN14USBDeviceClass11sendControlEPKvm>
    1108:	1e47      	subs	r7, r0, #1
    110a:	41b8      	sbcs	r0, r7
    110c:	b2c7      	uxtb	r7, r0
	free(buffer);
    110e:	0020      	movs	r0, r4
    1110:	f001 fd0c 	bl	2b2c <free>
}
    1114:	0038      	movs	r0, r7
    1116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1118:	200000f0 	.word	0x200000f0

0000111c <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    111c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    111e:	2700      	movs	r7, #0
	_dry_run = true;
    1120:	2601      	movs	r6, #1
{
    1122:	b087      	sub	sp, #28
	_dry_run = true;
    1124:	4b1e      	ldr	r3, [pc, #120]	; (11a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1126:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1128:	a902      	add	r1, sp, #8
	_dry_run = true;
    112a:	701e      	strb	r6, [r3, #0]
{
    112c:	0005      	movs	r5, r0
	uint32_t total = 0;
    112e:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1130:	f7ff fc33 	bl	99a <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1134:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1136:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1138:	2209      	movs	r2, #9
    113a:	0039      	movs	r1, r7
    113c:	0020      	movs	r0, r4
    113e:	f001 fd08 	bl	2b52 <memset>
    1142:	2309      	movs	r3, #9
    1144:	7023      	strb	r3, [r4, #0]
    1146:	2302      	movs	r3, #2
    1148:	7063      	strb	r3, [r4, #1]
    114a:	339e      	adds	r3, #158	; 0x9e
    114c:	71e3      	strb	r3, [r4, #7]
    114e:	335a      	adds	r3, #90	; 0x5a
    1150:	7223      	strb	r3, [r4, #8]
    1152:	9b02      	ldr	r3, [sp, #8]
    1154:	7166      	strb	r6, [r4, #5]
    1156:	3309      	adds	r3, #9
    1158:	8063      	strh	r3, [r4, #2]
    115a:	466b      	mov	r3, sp
    115c:	791b      	ldrb	r3, [r3, #4]
    115e:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1160:	4b0f      	ldr	r3, [pc, #60]	; (11a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1162:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1164:	9b00      	ldr	r3, [sp, #0]
    1166:	2b09      	cmp	r3, #9
    1168:	d107      	bne.n	117a <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    116a:	001a      	movs	r2, r3
    116c:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    116e:	0028      	movs	r0, r5
    1170:	f7ff ff78 	bl	1064 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1174:	2001      	movs	r0, #1
    1176:	b007      	add	sp, #28
    1178:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    117a:	4b0a      	ldr	r3, [pc, #40]	; (11a4 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    117c:	2209      	movs	r2, #9
		_pack_message = true;
    117e:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1180:	4e09      	ldr	r6, [pc, #36]	; (11a8 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1182:	0021      	movs	r1, r4
    1184:	0028      	movs	r0, r5
	total = 0;
    1186:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1188:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    118a:	f7ff ff6b 	bl	1064 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    118e:	a902      	add	r1, sp, #8
    1190:	0028      	movs	r0, r5
    1192:	f7ff fc02 	bl	99a <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1196:	4b03      	ldr	r3, [pc, #12]	; (11a4 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1198:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    119a:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    119c:	4903      	ldr	r1, [pc, #12]	; (11ac <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    119e:	e7e6      	b.n	116e <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    11a0:	2000049c 	.word	0x2000049c
    11a4:	2000059d 	.word	0x2000059d
    11a8:	2000059e 	.word	0x2000059e
    11ac:	2000049d 	.word	0x2000049d

000011b0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    11b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    11b2:	78ce      	ldrb	r6, [r1, #3]
{
    11b4:	b092      	sub	sp, #72	; 0x48
    11b6:	0005      	movs	r5, r0
    11b8:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    11ba:	2e02      	cmp	r6, #2
    11bc:	d10b      	bne.n	11d6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    11be:	798b      	ldrb	r3, [r1, #6]
    11c0:	79c9      	ldrb	r1, [r1, #7]
    11c2:	482e      	ldr	r0, [pc, #184]	; (127c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    11c4:	0209      	lsls	r1, r1, #8
    11c6:	4319      	orrs	r1, r3
    11c8:	f7ff ffa8 	bl	111c <_ZN14USBDeviceClass17sendConfigurationEm>
    11cc:	1e41      	subs	r1, r0, #1
    11ce:	4188      	sbcs	r0, r1
    11d0:	b2c0      	uxtb	r0, r0
}
    11d2:	b012      	add	sp, #72	; 0x48
    11d4:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    11d6:	f001 fbc1 	bl	295c <_Z12PluggableUSBv>
    11da:	0021      	movs	r1, r4
    11dc:	f001 fb52 	bl	2884 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    11e0:	2800      	cmp	r0, #0
    11e2:	d003      	beq.n	11ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    11e4:	17c1      	asrs	r1, r0, #31
    11e6:	1a08      	subs	r0, r1, r0
    11e8:	0fc0      	lsrs	r0, r0, #31
    11ea:	e7f2      	b.n	11d2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    11ec:	2e01      	cmp	r6, #1
    11ee:	d10e      	bne.n	120e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    11f0:	79e2      	ldrb	r2, [r4, #7]
    11f2:	79a3      	ldrb	r3, [r4, #6]
    11f4:	0212      	lsls	r2, r2, #8
    11f6:	431a      	orrs	r2, r3
    11f8:	4921      	ldr	r1, [pc, #132]	; (1280 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    11fa:	2a11      	cmp	r2, #17
    11fc:	dc3c      	bgt.n	1278 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    11fe:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1200:	2a00      	cmp	r2, #0
    1202:	d039      	beq.n	1278 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    1204:	0028      	movs	r0, r5
    1206:	f7ff ff2d 	bl	1064 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    120a:	2001      	movs	r0, #1
    120c:	e7e1      	b.n	11d2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    120e:	2e03      	cmp	r6, #3
    1210:	d1df      	bne.n	11d2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    1212:	78a3      	ldrb	r3, [r4, #2]
    1214:	2b00      	cmp	r3, #0
    1216:	d028      	beq.n	126a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1218:	2b02      	cmp	r3, #2
    121a:	d108      	bne.n	122e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    121c:	79e2      	ldrb	r2, [r4, #7]
    121e:	79a3      	ldrb	r3, [r4, #6]
    1220:	0212      	lsls	r2, r2, #8
    1222:	4918      	ldr	r1, [pc, #96]	; (1284 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1224:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1226:	0028      	movs	r0, r5
    1228:	f7ff ff46 	bl	10b8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    122c:	e7d1      	b.n	11d2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    122e:	2b01      	cmp	r3, #1
    1230:	d105      	bne.n	123e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1232:	79e2      	ldrb	r2, [r4, #7]
    1234:	79a3      	ldrb	r3, [r4, #6]
    1236:	0212      	lsls	r2, r2, #8
    1238:	431a      	orrs	r2, r3
    123a:	4913      	ldr	r1, [pc, #76]	; (1288 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    123c:	e7f3      	b.n	1226 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    123e:	2b03      	cmp	r3, #3
    1240:	d1c7      	bne.n	11d2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    1242:	0001      	movs	r1, r0
    1244:	2241      	movs	r2, #65	; 0x41
    1246:	a801      	add	r0, sp, #4
    1248:	f001 fc83 	bl	2b52 <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    124c:	f001 fb86 	bl	295c <_Z12PluggableUSBv>
    1250:	a901      	add	r1, sp, #4
    1252:	f001 fb27 	bl	28a4 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    1256:	2800      	cmp	r0, #0
    1258:	d005      	beq.n	1266 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    125a:	79e2      	ldrb	r2, [r4, #7]
    125c:	79a3      	ldrb	r3, [r4, #6]
    125e:	0212      	lsls	r2, r2, #8
    1260:	431a      	orrs	r2, r3
    1262:	a901      	add	r1, sp, #4
    1264:	e7df      	b.n	1226 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    1266:	7803      	ldrb	r3, [r0, #0]
    1268:	deff      	udf	#255	; 0xff
    126a:	79e2      	ldrb	r2, [r4, #7]
    126c:	79a3      	ldrb	r3, [r4, #6]
    126e:	0212      	lsls	r2, r2, #8
    1270:	431a      	orrs	r2, r3
    1272:	4906      	ldr	r1, [pc, #24]	; (128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1274:	2a03      	cmp	r2, #3
    1276:	ddc2      	ble.n	11fe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    1278:	780a      	ldrb	r2, [r1, #0]
    127a:	e7c3      	b.n	1204 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    127c:	200000f0 	.word	0x200000f0
    1280:	00002d6a 	.word	0x00002d6a
    1284:	00002d4c 	.word	0x00002d4c
    1288:	00002d5e 	.word	0x00002d5e
    128c:	00002d5a 	.word	0x00002d5a

00001290 <_ZN14USBDeviceClass7sendZlpEm>:
    1290:	b2cb      	uxtb	r3, r1
    1292:	4904      	ldr	r1, [pc, #16]	; (12a4 <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    1294:	015b      	lsls	r3, r3, #5
    1296:	18c9      	adds	r1, r1, r3
    1298:	698b      	ldr	r3, [r1, #24]
    129a:	0b9b      	lsrs	r3, r3, #14
    129c:	039b      	lsls	r3, r3, #14
    129e:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    12a0:	4770      	bx	lr
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	200005a8 	.word	0x200005a8

000012a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    12a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    12aa:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    12ac:	7848      	ldrb	r0, [r1, #1]
{
    12ae:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    12b0:	280b      	cmp	r0, #11
    12b2:	d811      	bhi.n	12d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    12b4:	f001 fb76 	bl	29a4 <__gnu_thumb1_case_uqi>
    12b8:	2e101d06 	.word	0x2e101d06
    12bc:	64484310 	.word	0x64484310
    12c0:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    12c4:	7809      	ldrb	r1, [r1, #0]
    12c6:	aa01      	add	r2, sp, #4
    12c8:	2900      	cmp	r1, #0
    12ca:	d107      	bne.n	12dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    12cc:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    12ce:	7011      	strb	r1, [r2, #0]
    12d0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    12d2:	0028      	movs	r0, r5
    12d4:	f7ff fea2 	bl	101c <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    12d8:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    12da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    12dc:	2300      	movs	r3, #0
    12de:	7013      	strb	r3, [r2, #0]
    12e0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    12e2:	4b28      	ldr	r3, [pc, #160]	; (1384 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	2b01      	cmp	r3, #1
    12e8:	d100      	bne.n	12ec <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    12ea:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    12ec:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    12ee:	2100      	movs	r1, #0
    12f0:	e7ef      	b.n	12d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    12f2:	788a      	ldrb	r2, [r1, #2]
    12f4:	2300      	movs	r3, #0
    12f6:	2a01      	cmp	r2, #1
    12f8:	d104      	bne.n	1304 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    12fa:	aa01      	add	r2, sp, #4
    12fc:	7013      	strb	r3, [r2, #0]
    12fe:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1300:	4b21      	ldr	r3, [pc, #132]	; (1388 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    1302:	e7ef      	b.n	12e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1304:	4a1f      	ldr	r2, [pc, #124]	; (1384 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1306:	7013      	strb	r3, [r2, #0]
    1308:	4a20      	ldr	r2, [pc, #128]	; (138c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    130a:	6993      	ldr	r3, [r2, #24]
    130c:	0b9b      	lsrs	r3, r3, #14
    130e:	039b      	lsls	r3, r3, #14
    1310:	6193      	str	r3, [r2, #24]
    1312:	e7e1      	b.n	12d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1314:	788c      	ldrb	r4, [r1, #2]
    1316:	2c01      	cmp	r4, #1
    1318:	d106      	bne.n	1328 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    131a:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    131c:	4b1a      	ldr	r3, [pc, #104]	; (1388 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    131e:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1320:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1322:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1324:	0023      	movs	r3, r4
    1326:	e7d4      	b.n	12d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1328:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    132a:	2c00      	cmp	r4, #0
    132c:	d1d5      	bne.n	12da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    132e:	4b15      	ldr	r3, [pc, #84]	; (1384 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1330:	4a16      	ldr	r2, [pc, #88]	; (138c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1332:	7018      	strb	r0, [r3, #0]
    1334:	6993      	ldr	r3, [r2, #24]
    1336:	0b9b      	lsrs	r3, r3, #14
    1338:	039b      	lsls	r3, r3, #14
    133a:	6193      	str	r3, [r2, #24]
			return true;
    133c:	e7cd      	b.n	12da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    133e:	7889      	ldrb	r1, [r1, #2]
    1340:	0028      	movs	r0, r5
    1342:	f7ff fc09 	bl	b58 <_ZN14USBDeviceClass10setAddressEm>
    1346:	e7c7      	b.n	12d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1348:	0028      	movs	r0, r5
    134a:	f7ff ff31 	bl	11b0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    134e:	e7c4      	b.n	12da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1350:	2301      	movs	r3, #1
    1352:	4a0f      	ldr	r2, [pc, #60]	; (1390 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    1354:	e7cb      	b.n	12ee <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1356:	780b      	ldrb	r3, [r1, #0]
			return false;
    1358:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    135a:	06db      	lsls	r3, r3, #27
    135c:	d1bd      	bne.n	12da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    135e:	0028      	movs	r0, r5
    1360:	f7ff fcb2 	bl	cc8 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    1364:	78a2      	ldrb	r2, [r4, #2]
    1366:	4b0a      	ldr	r3, [pc, #40]	; (1390 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    1368:	480a      	ldr	r0, [pc, #40]	; (1394 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    136a:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    136c:	f001 fa52 	bl	2814 <_ZN7Serial_15enableInterruptEv>
    1370:	e7ca      	b.n	1308 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    1372:	2301      	movs	r3, #1
    1374:	4a08      	ldr	r2, [pc, #32]	; (1398 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1376:	e7ba      	b.n	12ee <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1378:	788a      	ldrb	r2, [r1, #2]
    137a:	4b07      	ldr	r3, [pc, #28]	; (1398 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    137c:	601a      	str	r2, [r3, #0]
    137e:	e7c3      	b.n	1308 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1380:	2000      	movs	r0, #0
    1382:	e7aa      	b.n	12da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1384:	20000112 	.word	0x20000112
    1388:	2000011a 	.word	0x2000011a
    138c:	200005a8 	.word	0x200005a8
    1390:	200005a0 	.word	0x200005a0
    1394:	20000d70 	.word	0x20000d70
    1398:	200005a4 	.word	0x200005a4

0000139c <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    139c:	4b4b      	ldr	r3, [pc, #300]	; (14cc <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    139e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    13a0:	781e      	ldrb	r6, [r3, #0]
{
    13a2:	0005      	movs	r5, r0
	if (_pack_message == true) {
    13a4:	2e00      	cmp	r6, #0
    13a6:	d000      	beq.n	13aa <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    13a8:	e080      	b.n	14ac <_ZN14USBDeviceClass10ISRHandlerEv+0x110>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    13aa:	4c49      	ldr	r4, [pc, #292]	; (14d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    13ac:	6823      	ldr	r3, [r4, #0]
    13ae:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    13b0:	0712      	lsls	r2, r2, #28
    13b2:	d50d      	bpl.n	13d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    13b4:	2208      	movs	r2, #8
    13b6:	0031      	movs	r1, r6
    13b8:	839a      	strh	r2, [r3, #28]
    13ba:	0030      	movs	r0, r6
    13bc:	f7ff f896 	bl	4ec <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    13c0:	2210      	movs	r2, #16
    13c2:	6823      	ldr	r3, [r4, #0]
    13c4:	33ff      	adds	r3, #255	; 0xff
    13c6:	7a99      	ldrb	r1, [r3, #10]
    13c8:	430a      	orrs	r2, r1
    13ca:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    13cc:	4b41      	ldr	r3, [pc, #260]	; (14d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    13ce:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    13d0:	6823      	ldr	r3, [r4, #0]
    13d2:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    13d4:	0752      	lsls	r2, r2, #29
    13d6:	d51f      	bpl.n	1418 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    13d8:	2204      	movs	r2, #4
    13da:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    13dc:	4a3e      	ldr	r2, [pc, #248]	; (14d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    13de:	7813      	ldrb	r3, [r2, #0]
    13e0:	2b00      	cmp	r3, #0
    13e2:	d00a      	beq.n	13fa <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    13e4:	7813      	ldrb	r3, [r2, #0]
    13e6:	3b01      	subs	r3, #1
    13e8:	b2db      	uxtb	r3, r3
    13ea:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    13ec:	7813      	ldrb	r3, [r2, #0]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d103      	bne.n	13fa <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    13f2:	2101      	movs	r1, #1
    13f4:	201a      	movs	r0, #26
    13f6:	f000 f97f 	bl	16f8 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    13fa:	4a38      	ldr	r2, [pc, #224]	; (14dc <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    13fc:	7813      	ldrb	r3, [r2, #0]
    13fe:	2b00      	cmp	r3, #0
    1400:	d00a      	beq.n	1418 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1402:	7813      	ldrb	r3, [r2, #0]
    1404:	3b01      	subs	r3, #1
    1406:	b2db      	uxtb	r3, r3
    1408:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    140a:	7813      	ldrb	r3, [r2, #0]
    140c:	2b00      	cmp	r3, #0
    140e:	d103      	bne.n	1418 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1410:	2101      	movs	r1, #1
    1412:	2019      	movs	r0, #25
    1414:	f000 f970 	bl	16f8 <digitalWrite>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1418:	6823      	ldr	r3, [r4, #0]
    141a:	33ff      	adds	r3, #255	; 0xff
    141c:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    141e:	0692      	lsls	r2, r2, #26
    1420:	d503      	bpl.n	142a <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1422:	2220      	movs	r2, #32
    1424:	7a59      	ldrb	r1, [r3, #9]
    1426:	430a      	orrs	r2, r1
    1428:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    142a:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    142c:	06d2      	lsls	r2, r2, #27
    142e:	d525      	bpl.n	147c <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1430:	4668      	mov	r0, sp
    1432:	4a2b      	ldr	r2, [pc, #172]	; (14e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1434:	4669      	mov	r1, sp
    1436:	cac0      	ldmia	r2!, {r6, r7}
    1438:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    143a:	68a2      	ldr	r2, [r4, #8]
    143c:	0b92      	lsrs	r2, r2, #14
    143e:	0392      	lsls	r2, r2, #14
    1440:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1442:	2240      	movs	r2, #64	; 0x40
    1444:	7958      	ldrb	r0, [r3, #5]
    1446:	4302      	orrs	r2, r0
    1448:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    144a:	2360      	movs	r3, #96	; 0x60
    144c:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    144e:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1450:	421a      	tst	r2, r3
    1452:	d12c      	bne.n	14ae <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
			ok = handleStandardSetup(setup);
    1454:	f7ff ff28 	bl	12a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1458:	2800      	cmp	r0, #0
    145a:	d02b      	beq.n	14b4 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    145c:	2280      	movs	r2, #128	; 0x80
    145e:	6823      	ldr	r3, [r4, #0]
    1460:	4252      	negs	r2, r2
    1462:	33ff      	adds	r3, #255	; 0xff
    1464:	7999      	ldrb	r1, [r3, #6]
    1466:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1468:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    146a:	6823      	ldr	r3, [r4, #0]
    146c:	33ff      	adds	r3, #255	; 0xff
    146e:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1470:	0652      	lsls	r2, r2, #25
    1472:	d503      	bpl.n	147c <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1474:	2240      	movs	r2, #64	; 0x40
    1476:	7a59      	ldrb	r1, [r3, #9]
    1478:	430a      	orrs	r2, r1
    147a:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    147c:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    147e:	2501      	movs	r5, #1
    1480:	6823      	ldr	r3, [r4, #0]
    1482:	33ff      	adds	r3, #255	; 0xff
    1484:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1486:	002f      	movs	r7, r5
    1488:	6823      	ldr	r3, [r4, #0]
    148a:	3708      	adds	r7, #8
    148c:	017f      	lsls	r7, r7, #5
    148e:	19db      	adds	r3, r3, r7
    1490:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1492:	2b00      	cmp	r3, #0
    1494:	d007      	beq.n	14a6 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			if (epHandlers[ep]) {
    1496:	4b13      	ldr	r3, [pc, #76]	; (14e4 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1498:	00aa      	lsls	r2, r5, #2
    149a:	58d0      	ldr	r0, [r2, r3]
    149c:	2800      	cmp	r0, #0
    149e:	d00c      	beq.n	14ba <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
				epHandlers[ep]->handleEndpoint();
    14a0:	6803      	ldr	r3, [r0, #0]
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    14a6:	3501      	adds	r5, #1
    14a8:	2d08      	cmp	r5, #8
    14aa:	d1ec      	bne.n	1486 <_ZN14USBDeviceClass10ISRHandlerEv+0xea>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    14ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    14ae:	f7ff fb77 	bl	ba0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    14b2:	e7d1      	b.n	1458 <_ZN14USBDeviceClass10ISRHandlerEv+0xbc>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    14b4:	2220      	movs	r2, #32
    14b6:	4b0c      	ldr	r3, [pc, #48]	; (14e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    14b8:	e7d6      	b.n	1468 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
				PluggableUSB().handleEndpoint(ep);
    14ba:	f001 fa4f 	bl	295c <_Z12PluggableUSBv>
    14be:	0029      	movs	r1, r5
    14c0:	f001 fa13 	bl	28ea <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    14c4:	6823      	ldr	r3, [r4, #0]
    14c6:	19df      	adds	r7, r3, r7
    14c8:	71fe      	strb	r6, [r7, #7]
    14ca:	e7ec      	b.n	14a6 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
    14cc:	2000059d 	.word	0x2000059d
    14d0:	200005a8 	.word	0x200005a8
    14d4:	200005a0 	.word	0x200005a0
    14d8:	20000111 	.word	0x20000111
    14dc:	20000110 	.word	0x20000110
    14e0:	200002dc 	.word	0x200002dc
    14e4:	200000f4 	.word	0x200000f4
    14e8:	410050ff 	.word	0x410050ff

000014ec <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    14ec:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    14ee:	4802      	ldr	r0, [pc, #8]	; (14f8 <UDD_Handler+0xc>)
    14f0:	f7ff ff54 	bl	139c <_ZN14USBDeviceClass10ISRHandlerEv>
}
    14f4:	bd10      	pop	{r4, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	200000f0 	.word	0x200000f0

000014fc <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    14fc:	4a01      	ldr	r2, [pc, #4]	; (1504 <_GLOBAL__sub_I_usbd+0x8>)
    14fe:	4b02      	ldr	r3, [pc, #8]	; (1508 <_GLOBAL__sub_I_usbd+0xc>)
    1500:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1502:	4770      	bx	lr
    1504:	41005000 	.word	0x41005000
    1508:	200005a8 	.word	0x200005a8

0000150c <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    150c:	21fa      	movs	r1, #250	; 0xfa
    150e:	4b31      	ldr	r3, [pc, #196]	; (15d4 <init+0xc8>)
{
    1510:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1512:	6818      	ldr	r0, [r3, #0]
    1514:	0089      	lsls	r1, r1, #2
    1516:	f001 fa4f 	bl	29b8 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    151a:	4b2f      	ldr	r3, [pc, #188]	; (15d8 <init+0xcc>)
    151c:	3801      	subs	r0, #1
    151e:	4298      	cmp	r0, r3
    1520:	d856      	bhi.n	15d0 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1522:	492e      	ldr	r1, [pc, #184]	; (15dc <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1524:	4a2e      	ldr	r2, [pc, #184]	; (15e0 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1526:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1528:	20c0      	movs	r0, #192	; 0xc0
    152a:	6a13      	ldr	r3, [r2, #32]
    152c:	0600      	lsls	r0, r0, #24
    152e:	021b      	lsls	r3, r3, #8
    1530:	0a1b      	lsrs	r3, r3, #8
    1532:	4303      	orrs	r3, r0
    1534:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1536:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1538:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    153a:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    153c:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    153e:	2180      	movs	r1, #128	; 0x80
    1540:	6a13      	ldr	r3, [r2, #32]
    1542:	0609      	lsls	r1, r1, #24
    1544:	021b      	lsls	r3, r3, #8
    1546:	0a1b      	lsrs	r3, r3, #8
    1548:	430b      	orrs	r3, r1
    154a:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    154c:	22fc      	movs	r2, #252	; 0xfc
    154e:	4b25      	ldr	r3, [pc, #148]	; (15e4 <init+0xd8>)
    1550:	6a19      	ldr	r1, [r3, #32]
    1552:	430a      	orrs	r2, r1
    1554:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1556:	22fc      	movs	r2, #252	; 0xfc
    1558:	6a19      	ldr	r1, [r3, #32]
    155a:	0192      	lsls	r2, r2, #6
    155c:	430a      	orrs	r2, r1
    155e:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1560:	22a0      	movs	r2, #160	; 0xa0
    1562:	6a19      	ldr	r1, [r3, #32]
    1564:	02d2      	lsls	r2, r2, #11
    1566:	430a      	orrs	r2, r1
    1568:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    156a:	0020      	movs	r0, r4
    156c:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    156e:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1570:	f000 f876 	bl	1660 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1574:	2c14      	cmp	r4, #20
    1576:	d1f8      	bne.n	156a <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1578:	4b1b      	ldr	r3, [pc, #108]	; (15e8 <init+0xdc>)
    157a:	001c      	movs	r4, r3
    157c:	785a      	ldrb	r2, [r3, #1]
    157e:	b252      	sxtb	r2, r2
    1580:	2a00      	cmp	r2, #0
    1582:	dbfb      	blt.n	157c <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1584:	4a19      	ldr	r2, [pc, #100]	; (15ec <init+0xe0>)
    1586:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1588:	4b19      	ldr	r3, [pc, #100]	; (15f0 <init+0xe4>)
    158a:	001a      	movs	r2, r3
    158c:	7e59      	ldrb	r1, [r3, #25]
    158e:	09c9      	lsrs	r1, r1, #7
    1590:	2901      	cmp	r1, #1
    1592:	d0fb      	beq.n	158c <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1594:	21e4      	movs	r1, #228	; 0xe4
    1596:	00c9      	lsls	r1, r1, #3
    1598:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    159a:	213f      	movs	r1, #63	; 0x3f
    159c:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    159e:	7e53      	ldrb	r3, [r2, #25]
    15a0:	09db      	lsrs	r3, r3, #7
    15a2:	2b01      	cmp	r3, #1
    15a4:	d0fb      	beq.n	159e <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    15a6:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    15a8:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    15aa:	015b      	lsls	r3, r3, #5
    15ac:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    15ae:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    15b0:	f000 f824 	bl	15fc <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    15b4:	7863      	ldrb	r3, [r4, #1]
    15b6:	b25b      	sxtb	r3, r3
    15b8:	2b00      	cmp	r3, #0
    15ba:	dbfb      	blt.n	15b4 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    15bc:	4b0d      	ldr	r3, [pc, #52]	; (15f4 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    15be:	4a0e      	ldr	r2, [pc, #56]	; (15f8 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    15c0:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    15c2:	79d3      	ldrb	r3, [r2, #7]
    15c4:	09db      	lsrs	r3, r3, #7
    15c6:	2b01      	cmp	r3, #1
    15c8:	d0fb      	beq.n	15c2 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    15ca:	2341      	movs	r3, #65	; 0x41
    15cc:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    15ce:	bd10      	pop	{r4, pc}
    15d0:	e7fe      	b.n	15d0 <init+0xc4>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	20000004 	.word	0x20000004
    15d8:	00ffffff 	.word	0x00ffffff
    15dc:	e000e010 	.word	0xe000e010
    15e0:	e000ed00 	.word	0xe000ed00
    15e4:	40000400 	.word	0x40000400
    15e8:	40000c00 	.word	0x40000c00
    15ec:	0000401e 	.word	0x0000401e
    15f0:	42004000 	.word	0x42004000
    15f4:	00004021 	.word	0x00004021
    15f8:	42004800 	.word	0x42004800

000015fc <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    15fc:	4a16      	ldr	r2, [pc, #88]	; (1658 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    15fe:	b500      	push	{lr}
    1600:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1602:	7e51      	ldrb	r1, [r2, #25]
    1604:	09c9      	lsrs	r1, r1, #7
    1606:	2901      	cmp	r1, #1
    1608:	d0fb      	beq.n	1602 <analogReference+0x6>
  syncADC();
  switch (mode)
    160a:	3801      	subs	r0, #1
    160c:	2804      	cmp	r0, #4
    160e:	d816      	bhi.n	163e <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1610:	6919      	ldr	r1, [r3, #16]
    1612:	4a12      	ldr	r2, [pc, #72]	; (165c <analogReference+0x60>)
    1614:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1616:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1618:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    161a:	785a      	ldrb	r2, [r3, #1]
    161c:	438a      	bics	r2, r1
  switch (mode)
    161e:	f001 f9c1 	bl	29a4 <__gnu_thumb1_case_uqi>
    1622:	0803      	.short	0x0803
    1624:	0b06      	.short	0x0b06
    1626:	03          	.byte	0x03
    1627:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1628:	0011      	movs	r1, r2
    162a:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    162c:	430a      	orrs	r2, r1
    162e:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1630:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1632:	0011      	movs	r1, r2
    1634:	2203      	movs	r2, #3
    1636:	e7f9      	b.n	162c <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1638:	0011      	movs	r1, r2
    163a:	2202      	movs	r2, #2
    163c:	e7f6      	b.n	162c <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    163e:	23f0      	movs	r3, #240	; 0xf0
    1640:	6911      	ldr	r1, [r2, #16]
    1642:	051b      	lsls	r3, r3, #20
    1644:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1646:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1648:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    164a:	7853      	ldrb	r3, [r2, #1]
    164c:	438b      	bics	r3, r1
    164e:	0019      	movs	r1, r3
    1650:	2302      	movs	r3, #2
    1652:	430b      	orrs	r3, r1
    1654:	7053      	strb	r3, [r2, #1]
}
    1656:	e7eb      	b.n	1630 <analogReference+0x34>
    1658:	42004000 	.word	0x42004000
    165c:	f0ffffff 	.word	0xf0ffffff

00001660 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1660:	2318      	movs	r3, #24
{
    1662:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1664:	001d      	movs	r5, r3
{
    1666:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1668:	4345      	muls	r5, r0
    166a:	2008      	movs	r0, #8
    166c:	4a20      	ldr	r2, [pc, #128]	; (16f0 <pinMode+0x90>)
    166e:	1955      	adds	r5, r2, r5
    1670:	5628      	ldrsb	r0, [r5, r0]
    1672:	3001      	adds	r0, #1
    1674:	d014      	beq.n	16a0 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1676:	2903      	cmp	r1, #3
    1678:	d812      	bhi.n	16a0 <pinMode+0x40>
    167a:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    167c:	4363      	muls	r3, r4
    167e:	56d1      	ldrsb	r1, [r2, r3]
    1680:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1682:	f001 f98f 	bl	29a4 <__gnu_thumb1_case_uqi>
    1686:	2802      	.short	0x2802
    1688:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    168a:	6858      	ldr	r0, [r3, #4]
    168c:	01cb      	lsls	r3, r1, #7
    168e:	2102      	movs	r1, #2
    1690:	4a18      	ldr	r2, [pc, #96]	; (16f4 <pinMode+0x94>)
    1692:	189b      	adds	r3, r3, r2
    1694:	181a      	adds	r2, r3, r0
    1696:	3240      	adds	r2, #64	; 0x40
    1698:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    169a:	2201      	movs	r2, #1
    169c:	4082      	lsls	r2, r0
    169e:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    16a0:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16a2:	6858      	ldr	r0, [r3, #4]
    16a4:	01cb      	lsls	r3, r1, #7
    16a6:	2106      	movs	r1, #6
    16a8:	4a12      	ldr	r2, [pc, #72]	; (16f4 <pinMode+0x94>)
    16aa:	189b      	adds	r3, r3, r2
    16ac:	181a      	adds	r2, r3, r0
    16ae:	3240      	adds	r2, #64	; 0x40
    16b0:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16b2:	2201      	movs	r2, #1
    16b4:	4082      	lsls	r2, r0
    16b6:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16b8:	619a      	str	r2, [r3, #24]
    break ;
    16ba:	e7f1      	b.n	16a0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16bc:	6858      	ldr	r0, [r3, #4]
    16be:	01cb      	lsls	r3, r1, #7
    16c0:	2106      	movs	r1, #6
    16c2:	4a0c      	ldr	r2, [pc, #48]	; (16f4 <pinMode+0x94>)
    16c4:	189b      	adds	r3, r3, r2
    16c6:	181a      	adds	r2, r3, r0
    16c8:	3240      	adds	r2, #64	; 0x40
    16ca:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16cc:	2201      	movs	r2, #1
    16ce:	4082      	lsls	r2, r0
    16d0:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16d2:	615a      	str	r2, [r3, #20]
    break ;
    16d4:	e7e4      	b.n	16a0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    16d6:	6858      	ldr	r0, [r3, #4]
    16d8:	01cb      	lsls	r3, r1, #7
    16da:	2102      	movs	r1, #2
    16dc:	4a05      	ldr	r2, [pc, #20]	; (16f4 <pinMode+0x94>)
    16de:	189b      	adds	r3, r3, r2
    16e0:	181a      	adds	r2, r3, r0
    16e2:	3240      	adds	r2, #64	; 0x40
    16e4:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16e6:	2201      	movs	r2, #1
    16e8:	4082      	lsls	r2, r0
    16ea:	609a      	str	r2, [r3, #8]
    break ;
    16ec:	e7d8      	b.n	16a0 <pinMode+0x40>
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00002da0 	.word	0x00002da0
    16f4:	41004400 	.word	0x41004400

000016f8 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    16f8:	2318      	movs	r3, #24
{
    16fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    16fc:	2408      	movs	r4, #8
    16fe:	4358      	muls	r0, r3
    1700:	4a11      	ldr	r2, [pc, #68]	; (1748 <digitalWrite+0x50>)
    1702:	1813      	adds	r3, r2, r0
    1704:	571c      	ldrsb	r4, [r3, r4]
    1706:	3401      	adds	r4, #1
    1708:	d01b      	beq.n	1742 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    170a:	2601      	movs	r6, #1
    170c:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    170e:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1710:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1712:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1714:	4a0d      	ldr	r2, [pc, #52]	; (174c <digitalWrite+0x54>)
    1716:	01db      	lsls	r3, r3, #7
    1718:	189a      	adds	r2, r3, r2
    171a:	6890      	ldr	r0, [r2, #8]
    171c:	4228      	tst	r0, r5
    171e:	d10b      	bne.n	1738 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1720:	000c      	movs	r4, r1
    1722:	1e60      	subs	r0, r4, #1
    1724:	4184      	sbcs	r4, r0
    1726:	19d2      	adds	r2, r2, r7
    1728:	3240      	adds	r2, #64	; 0x40
    172a:	7810      	ldrb	r0, [r2, #0]
    172c:	4034      	ands	r4, r6
    172e:	3603      	adds	r6, #3
    1730:	00a4      	lsls	r4, r4, #2
    1732:	43b0      	bics	r0, r6
    1734:	4320      	orrs	r0, r4
    1736:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1738:	4a04      	ldr	r2, [pc, #16]	; (174c <digitalWrite+0x54>)
    173a:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    173c:	2900      	cmp	r1, #0
    173e:	d101      	bne.n	1744 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    1740:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    1742:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    1744:	619d      	str	r5, [r3, #24]
    break ;
    1746:	e7fc      	b.n	1742 <digitalWrite+0x4a>
    1748:	00002da0 	.word	0x00002da0
    174c:	41004400 	.word	0x41004400

00001750 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1752:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1754:	2018      	movs	r0, #24
    1756:	4358      	muls	r0, r3
    1758:	4a2a      	ldr	r2, [pc, #168]	; (1804 <pinPeripheral+0xb4>)
    175a:	1810      	adds	r0, r2, r0
    175c:	7a00      	ldrb	r0, [r0, #8]
    175e:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1760:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1762:	3001      	adds	r0, #1
    1764:	d013      	beq.n	178e <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    1766:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1768:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    176a:	280c      	cmp	r0, #12
    176c:	d80f      	bhi.n	178e <pinPeripheral+0x3e>
    176e:	f001 f919 	bl	29a4 <__gnu_thumb1_case_uqi>
    1772:	1c45      	.short	0x1c45
    1774:	1c1c1c1c 	.word	0x1c1c1c1c
    1778:	071c1c1c 	.word	0x071c1c1c
    177c:	0707      	.short	0x0707
    177e:	07          	.byte	0x07
    177f:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1780:	2909      	cmp	r1, #9
    1782:	d106      	bne.n	1792 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    1784:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    1786:	0018      	movs	r0, r3
    1788:	f7ff ff6a 	bl	1660 <pinMode>
  return 0l ;
    178c:	2400      	movs	r4, #0
}
    178e:	0020      	movs	r0, r4
    1790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1792:	290a      	cmp	r1, #10
    1794:	d101      	bne.n	179a <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    1796:	3908      	subs	r1, #8
    1798:	e7f5      	b.n	1786 <pinPeripheral+0x36>
  return 0l ;
    179a:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    179c:	290b      	cmp	r1, #11
    179e:	d1f6      	bne.n	178e <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    17a0:	390a      	subs	r1, #10
    17a2:	0018      	movs	r0, r3
    17a4:	f7ff ff5c 	bl	1660 <pinMode>
    17a8:	e7f1      	b.n	178e <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17aa:	2018      	movs	r0, #24
    17ac:	4343      	muls	r3, r0
    17ae:	18d0      	adds	r0, r2, r3
    17b0:	6846      	ldr	r6, [r0, #4]
    17b2:	2501      	movs	r5, #1
    17b4:	0034      	movs	r4, r6
    17b6:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17b8:	4813      	ldr	r0, [pc, #76]	; (1808 <pinPeripheral+0xb8>)
    17ba:	01d2      	lsls	r2, r2, #7
    17bc:	1812      	adds	r2, r2, r0
    17be:	0873      	lsrs	r3, r6, #1
    17c0:	18d3      	adds	r3, r2, r3
    17c2:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17c4:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17c6:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17c8:	2c00      	cmp	r4, #0
    17ca:	d00b      	beq.n	17e4 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    17cc:	240f      	movs	r4, #15
    17ce:	0109      	lsls	r1, r1, #4
    17d0:	4020      	ands	r0, r4
    17d2:	4301      	orrs	r1, r0
    17d4:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    17d6:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    17d8:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    17da:	3240      	adds	r2, #64	; 0x40
    17dc:	7813      	ldrb	r3, [r2, #0]
    17de:	431d      	orrs	r5, r3
    17e0:	7015      	strb	r5, [r2, #0]
    17e2:	e7d3      	b.n	178c <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    17e4:	270f      	movs	r7, #15
    17e6:	43b8      	bics	r0, r7
    17e8:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    17ea:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    17ec:	b2c9      	uxtb	r1, r1
    17ee:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    17f0:	0013      	movs	r3, r2
    17f2:	3340      	adds	r3, #64	; 0x40
    17f4:	781a      	ldrb	r2, [r3, #0]
    17f6:	4315      	orrs	r5, r2
    17f8:	701d      	strb	r5, [r3, #0]
    17fa:	e7c8      	b.n	178e <pinPeripheral+0x3e>
      return -1l ;
    17fc:	2401      	movs	r4, #1
    17fe:	4264      	negs	r4, r4
    1800:	e7c5      	b.n	178e <pinPeripheral+0x3e>
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	00002da0 	.word	0x00002da0
    1808:	41004400 	.word	0x41004400

0000180c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    180c:	2000      	movs	r0, #0
    180e:	4770      	bx	lr

00001810 <_ZN7TwoWire5writeEPKhj>:

  return 1 ;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1812:	0005      	movs	r5, r0
    1814:	000e      	movs	r6, r1
    1816:	0017      	movs	r7, r2
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    1818:	2400      	movs	r4, #0
    181a:	42bc      	cmp	r4, r7
    181c:	d008      	beq.n	1830 <_ZN7TwoWire5writeEPKhj+0x20>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    181e:	682b      	ldr	r3, [r5, #0]
    1820:	5d31      	ldrb	r1, [r6, r4]
    1822:	681b      	ldr	r3, [r3, #0]
    1824:	0028      	movs	r0, r5
    1826:	4798      	blx	r3
    1828:	2800      	cmp	r0, #0
    182a:	d001      	beq.n	1830 <_ZN7TwoWire5writeEPKhj+0x20>
  for(size_t i = 0; i < quantity; ++i)
    182c:	3401      	adds	r4, #1
    182e:	e7f4      	b.n	181a <_ZN7TwoWire5writeEPKhj+0xa>
      return i;
  }

  //All data stored
  return quantity;
}
    1830:	0020      	movs	r0, r4
    1832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001834 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    1834:	4770      	bx	lr

00001836 <_ZN7TwoWire4peekEv>:
  if(_iTail == _iHead)
    1836:	0003      	movs	r3, r0
    1838:	33fc      	adds	r3, #252	; 0xfc
    183a:	6a19      	ldr	r1, [r3, #32]
    183c:	69da      	ldr	r2, [r3, #28]
    183e:	4291      	cmp	r1, r2
    1840:	d003      	beq.n	184a <_ZN7TwoWire4peekEv+0x14>
  return _aucBuffer[_iTail];
    1842:	6a1b      	ldr	r3, [r3, #32]
    1844:	18c0      	adds	r0, r0, r3
    1846:	7e00      	ldrb	r0, [r0, #24]
}
    1848:	4770      	bx	lr
    return -1;
    184a:	2001      	movs	r0, #1
    184c:	4240      	negs	r0, r0
  return rxBuffer.peek();
    184e:	e7fb      	b.n	1848 <_ZN7TwoWire4peekEv+0x12>

00001850 <_ZN7TwoWire9availableEv>:
  int delta = _iHead - _iTail;
    1850:	0003      	movs	r3, r0
    1852:	33fc      	adds	r3, #252	; 0xfc
    1854:	69d8      	ldr	r0, [r3, #28]
    1856:	6a1b      	ldr	r3, [r3, #32]
    1858:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    185a:	d501      	bpl.n	1860 <_ZN7TwoWire9availableEv+0x10>
    return N + delta;
    185c:	3001      	adds	r0, #1
    185e:	30ff      	adds	r0, #255	; 0xff
}
    1860:	4770      	bx	lr
	...

00001864 <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    1864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1866:	9301      	str	r3, [sp, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1868:	23fa      	movs	r3, #250	; 0xfa
    memset( _aucBuffer, 0, N ) ;
    186a:	2680      	movs	r6, #128	; 0x80
    Print() : write_error(0) {}
    186c:	2500      	movs	r5, #0
    186e:	0004      	movs	r4, r0
    1870:	009b      	lsls	r3, r3, #2
    1872:	6083      	str	r3, [r0, #8]
    1874:	4b12      	ldr	r3, [pc, #72]	; (18c0 <_ZN7TwoWireC1EP6SERCOMhh+0x5c>)
    1876:	0076      	lsls	r6, r6, #1
    1878:	3308      	adds	r3, #8
    187a:	000f      	movs	r7, r1
    187c:	6045      	str	r5, [r0, #4]
    187e:	0029      	movs	r1, r5
    1880:	9200      	str	r2, [sp, #0]
    1882:	6003      	str	r3, [r0, #0]
    1884:	0032      	movs	r2, r6
    1886:	3018      	adds	r0, #24
    1888:	f001 f963 	bl	2b52 <memset>
  _iHead = 0;
    188c:	0023      	movs	r3, r4
    memset( _aucBuffer, 0, N ) ;
    188e:	0020      	movs	r0, r4
  _iHead = 0;
    1890:	33fc      	adds	r3, #252	; 0xfc
    memset( _aucBuffer, 0, N ) ;
    1892:	3021      	adds	r0, #33	; 0x21
  _iHead = 0;
    1894:	61dd      	str	r5, [r3, #28]
    memset( _aucBuffer, 0, N ) ;
    1896:	0032      	movs	r2, r6
  _iTail = 0;
    1898:	621d      	str	r5, [r3, #32]
    memset( _aucBuffer, 0, N ) ;
    189a:	0029      	movs	r1, r5
    189c:	30ff      	adds	r0, #255	; 0xff
    189e:	f001 f958 	bl	2b52 <memset>
  _iHead = 0;
    18a2:	2387      	movs	r3, #135	; 0x87
    18a4:	009b      	lsls	r3, r3, #2
    18a6:	18e3      	adds	r3, r4, r3
    18a8:	605d      	str	r5, [r3, #4]
  _iTail = 0;
    18aa:	609d      	str	r5, [r3, #8]
  this->_uc_pinSDA=pinSDA;
    18ac:	466b      	mov	r3, sp
    18ae:	781b      	ldrb	r3, [r3, #0]
  this->sercom = s;
    18b0:	6127      	str	r7, [r4, #16]
  this->_uc_pinSDA=pinSDA;
    18b2:	7523      	strb	r3, [r4, #20]
  this->_uc_pinSCL=pinSCL;
    18b4:	466b      	mov	r3, sp
    18b6:	791b      	ldrb	r3, [r3, #4]
  transmissionBegun = false;
    18b8:	75a5      	strb	r5, [r4, #22]
}
    18ba:	0020      	movs	r0, r4
  this->_uc_pinSCL=pinSCL;
    18bc:	7563      	strb	r3, [r4, #21]
}
    18be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    18c0:	00002d7c 	.word	0x00002d7c

000018c4 <_ZN7TwoWire5beginEv>:
void TwoWire::begin(void) {
    18c4:	b570      	push	{r4, r5, r6, lr}
    18c6:	0006      	movs	r6, r0
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    18c8:	2518      	movs	r5, #24
  sercom->initMasterWIRE(TWI_CLOCK);
    18ca:	490c      	ldr	r1, [pc, #48]	; (18fc <_ZN7TwoWire5beginEv+0x38>)
    18cc:	6900      	ldr	r0, [r0, #16]
    18ce:	f000 fb85 	bl	1fdc <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    18d2:	6930      	ldr	r0, [r6, #16]
    18d4:	f000 fa27 	bl	1d26 <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    18d8:	002b      	movs	r3, r5
    18da:	2108      	movs	r1, #8
    18dc:	7d30      	ldrb	r0, [r6, #20]
    18de:	4c08      	ldr	r4, [pc, #32]	; (1900 <_ZN7TwoWire5beginEv+0x3c>)
    18e0:	4343      	muls	r3, r0
    18e2:	18e3      	adds	r3, r4, r3
    18e4:	5659      	ldrsb	r1, [r3, r1]
    18e6:	f7ff ff33 	bl	1750 <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    18ea:	2108      	movs	r1, #8
    18ec:	7d70      	ldrb	r0, [r6, #21]
    18ee:	4345      	muls	r5, r0
    18f0:	1964      	adds	r4, r4, r5
    18f2:	5661      	ldrsb	r1, [r4, r1]
    18f4:	f7ff ff2c 	bl	1750 <pinPeripheral>
}
    18f8:	bd70      	pop	{r4, r5, r6, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	000186a0 	.word	0x000186a0
    1900:	00002da0 	.word	0x00002da0

00001904 <_ZN7TwoWire17beginTransmissionEh>:
  txAddress = address;
    1904:	238a      	movs	r3, #138	; 0x8a
  _iHead = 0;
    1906:	2200      	movs	r2, #0
    1908:	009b      	lsls	r3, r3, #2
    190a:	54c1      	strb	r1, [r0, r3]
    190c:	3b0c      	subs	r3, #12
    190e:	18c3      	adds	r3, r0, r3
    1910:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    1912:	609a      	str	r2, [r3, #8]
  transmissionBegun = true;
    1914:	2301      	movs	r3, #1
    1916:	7583      	strb	r3, [r0, #22]
}
    1918:	4770      	bx	lr

0000191a <_ZN11RingBufferNILi256EE10store_charEh>:
  int i = nextIndex(_iHead);
    191a:	0002      	movs	r2, r0
    191c:	32fc      	adds	r2, #252	; 0xfc
    191e:	6853      	ldr	r3, [r2, #4]
void RingBufferN<N>::store_char( uint8_t c )
    1920:	b510      	push	{r4, lr}
  return (uint32_t)(index + 1) % N;
    1922:	3301      	adds	r3, #1
  if ( i != _iTail )
    1924:	6894      	ldr	r4, [r2, #8]
  return (uint32_t)(index + 1) % N;
    1926:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    1928:	429c      	cmp	r4, r3
    192a:	d002      	beq.n	1932 <_ZN11RingBufferNILi256EE10store_charEh+0x18>
    _aucBuffer[_iHead] = c ;
    192c:	6854      	ldr	r4, [r2, #4]
    192e:	5501      	strb	r1, [r0, r4]
    _iHead = i ;
    1930:	6053      	str	r3, [r2, #4]
}
    1932:	bd10      	pop	{r4, pc}

00001934 <_ZN7TwoWire5writeEh>:
    return 0 ;
    1934:	2200      	movs	r2, #0
{
    1936:	b510      	push	{r4, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
    1938:	7d83      	ldrb	r3, [r0, #22]
    193a:	4293      	cmp	r3, r2
    193c:	d00d      	beq.n	195a <_ZN7TwoWire5writeEh+0x26>
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    193e:	2387      	movs	r3, #135	; 0x87
    1940:	009b      	lsls	r3, r3, #2
    1942:	18c4      	adds	r4, r0, r3
    1944:	6863      	ldr	r3, [r4, #4]
    1946:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(index + 1) % N;
    1948:	3301      	adds	r3, #1
    194a:	b2db      	uxtb	r3, r3
    194c:	42a3      	cmp	r3, r4
    194e:	d004      	beq.n	195a <_ZN7TwoWire5writeEh+0x26>
  txBuffer.store_char( ucData ) ;
    1950:	3021      	adds	r0, #33	; 0x21
    1952:	30ff      	adds	r0, #255	; 0xff
    1954:	f7ff ffe1 	bl	191a <_ZN11RingBufferNILi256EE10store_charEh>
  return 1 ;
    1958:	2201      	movs	r2, #1
}
    195a:	0010      	movs	r0, r2
    195c:	bd10      	pop	{r4, pc}

0000195e <_ZN11RingBufferNILi256EE9read_charEv>:
  if(_iTail == _iHead)
    195e:	0003      	movs	r3, r0
    1960:	33fc      	adds	r3, #252	; 0xfc
    1962:	6899      	ldr	r1, [r3, #8]
    1964:	685a      	ldr	r2, [r3, #4]
    1966:	4291      	cmp	r1, r2
    1968:	d006      	beq.n	1978 <_ZN11RingBufferNILi256EE9read_charEv+0x1a>
  uint8_t value = _aucBuffer[_iTail];
    196a:	689a      	ldr	r2, [r3, #8]
    196c:	5c80      	ldrb	r0, [r0, r2]
  _iTail = nextIndex(_iTail);
    196e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    1970:	3201      	adds	r2, #1
    1972:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    1974:	609a      	str	r2, [r3, #8]
}
    1976:	4770      	bx	lr
    return -1;
    1978:	2001      	movs	r0, #1
    197a:	4240      	negs	r0, r0
    197c:	e7fb      	b.n	1976 <_ZN11RingBufferNILi256EE9read_charEv+0x18>

0000197e <_ZN7TwoWire15endTransmissionEb>:
  transmissionBegun = false ;
    197e:	2200      	movs	r2, #0
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    1980:	238a      	movs	r3, #138	; 0x8a
{
    1982:	b570      	push	{r4, r5, r6, lr}
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    1984:	009b      	lsls	r3, r3, #2
  transmissionBegun = false ;
    1986:	7582      	strb	r2, [r0, #22]
{
    1988:	0005      	movs	r5, r0
    198a:	000e      	movs	r6, r1
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    198c:	5cc1      	ldrb	r1, [r0, r3]
    198e:	6900      	ldr	r0, [r0, #16]
    1990:	f000 fa0a 	bl	1da8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    1994:	2800      	cmp	r0, #0
    1996:	d106      	bne.n	19a6 <_ZN7TwoWire15endTransmissionEb+0x28>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    1998:	2103      	movs	r1, #3
    199a:	6928      	ldr	r0, [r5, #16]
    199c:	f000 f9e8 	bl	1d70 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    19a0:	2402      	movs	r4, #2
}
    19a2:	0020      	movs	r0, r4
    19a4:	bd70      	pop	{r4, r5, r6, pc}
  int delta = _iHead - _iTail;
    19a6:	2387      	movs	r3, #135	; 0x87
  while( txBuffer.available() )
    19a8:	0028      	movs	r0, r5
    19aa:	009b      	lsls	r3, r3, #2
    19ac:	18ea      	adds	r2, r5, r3
    19ae:	6853      	ldr	r3, [r2, #4]
    19b0:	6894      	ldr	r4, [r2, #8]
    19b2:	3021      	adds	r0, #33	; 0x21
    19b4:	30ff      	adds	r0, #255	; 0xff
    19b6:	1b1c      	subs	r4, r3, r4
  if(delta < 0)
    19b8:	d501      	bpl.n	19be <_ZN7TwoWire15endTransmissionEb+0x40>
    return N + delta;
    19ba:	3401      	adds	r4, #1
    19bc:	34ff      	adds	r4, #255	; 0xff
    19be:	2c00      	cmp	r4, #0
    19c0:	d00e      	beq.n	19e0 <_ZN7TwoWire15endTransmissionEb+0x62>
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    19c2:	692c      	ldr	r4, [r5, #16]
    19c4:	f7ff ffcb 	bl	195e <_ZN11RingBufferNILi256EE9read_charEv>
    19c8:	b2c1      	uxtb	r1, r0
    19ca:	0020      	movs	r0, r4
    19cc:	f000 fa2e 	bl	1e2c <_ZN6SERCOM18sendDataMasterWIREEh>
    19d0:	2800      	cmp	r0, #0
    19d2:	d1e8      	bne.n	19a6 <_ZN7TwoWire15endTransmissionEb+0x28>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    19d4:	2103      	movs	r1, #3
    19d6:	6928      	ldr	r0, [r5, #16]
    19d8:	f000 f9ca 	bl	1d70 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    19dc:	2403      	movs	r4, #3
    19de:	e7e0      	b.n	19a2 <_ZN7TwoWire15endTransmissionEb+0x24>
  if (stopBit)
    19e0:	2e00      	cmp	r6, #0
    19e2:	d0de      	beq.n	19a2 <_ZN7TwoWire15endTransmissionEb+0x24>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    19e4:	2103      	movs	r1, #3
    19e6:	6928      	ldr	r0, [r5, #16]
    19e8:	f000 f9c2 	bl	1d70 <_ZN6SERCOM22prepareCommandBitsWireEh>
    19ec:	e7d9      	b.n	19a2 <_ZN7TwoWire15endTransmissionEb+0x24>

000019ee <_ZN7TwoWire15endTransmissionEv>:
{
    19ee:	b510      	push	{r4, lr}
  return endTransmission(true);
    19f0:	2101      	movs	r1, #1
    19f2:	f7ff ffc4 	bl	197e <_ZN7TwoWire15endTransmissionEb>
}
    19f6:	bd10      	pop	{r4, pc}

000019f8 <_ZN7TwoWire4readEv>:
{
    19f8:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    19fa:	3018      	adds	r0, #24
    19fc:	f7ff ffaf 	bl	195e <_ZN11RingBufferNILi256EE9read_charEv>
}
    1a00:	bd10      	pop	{r4, pc}

00001a02 <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    1a02:	b570      	push	{r4, r5, r6, lr}
    1a04:	0004      	movs	r4, r0
  if ( sercom->isSlaveWIRE() )
    1a06:	6900      	ldr	r0, [r0, #16]
    1a08:	f000 fa30 	bl	1e6c <_ZN6SERCOM11isSlaveWIREEv>
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d028      	beq.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>
  {
    if(sercom->isStopDetectedWIRE() || 
    1a10:	6920      	ldr	r0, [r4, #16]
    1a12:	f000 fa39 	bl	1e88 <_ZN6SERCOM18isStopDetectedWIREEv>
    1a16:	2800      	cmp	r0, #0
    1a18:	d10e      	bne.n	1a38 <_ZN7TwoWire9onServiceEv+0x36>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    1a1a:	6920      	ldr	r0, [r4, #16]
    1a1c:	f000 fa3e 	bl	1e9c <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
    1a20:	2800      	cmp	r0, #0
    1a22:	d055      	beq.n	1ad0 <_ZN7TwoWire9onServiceEv+0xce>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    1a24:	6920      	ldr	r0, [r4, #16]
    1a26:	f000 fa34 	bl	1e92 <_ZN6SERCOM21isRestartDetectedWIREEv>
    1a2a:	2800      	cmp	r0, #0
    1a2c:	d050      	beq.n	1ad0 <_ZN7TwoWire9onServiceEv+0xce>
    1a2e:	6920      	ldr	r0, [r4, #16]
    1a30:	f000 fa39 	bl	1ea6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    1a34:	2800      	cmp	r0, #0
    1a36:	d14b      	bne.n	1ad0 <_ZN7TwoWire9onServiceEv+0xce>
    {
      sercom->prepareAckBitWIRE();
    1a38:	6920      	ldr	r0, [r4, #16]
    1a3a:	f000 f98f 	bl	1d5c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    1a3e:	2103      	movs	r1, #3
    1a40:	6920      	ldr	r0, [r4, #16]
    1a42:	f000 f995 	bl	1d70 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    1a46:	238c      	movs	r3, #140	; 0x8c
    1a48:	009b      	lsls	r3, r3, #2
    1a4a:	58e5      	ldr	r5, [r4, r3]
    1a4c:	2d00      	cmp	r5, #0
    1a4e:	d004      	beq.n	1a5a <_ZN7TwoWire9onServiceEv+0x58>
      {
        onReceiveCallback(available());
    1a50:	6823      	ldr	r3, [r4, #0]
    1a52:	0020      	movs	r0, r4
    1a54:	691b      	ldr	r3, [r3, #16]
    1a56:	4798      	blx	r3
    1a58:	47a8      	blx	r5
  _iHead = 0;
    1a5a:	2300      	movs	r3, #0
    1a5c:	34fc      	adds	r4, #252	; 0xfc
    1a5e:	61e3      	str	r3, [r4, #28]
  _iTail = 0;
    1a60:	6223      	str	r3, [r4, #32]

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    1a62:	bd70      	pop	{r4, r5, r6, pc}
      sercom->prepareAckBitWIRE();
    1a64:	6920      	ldr	r0, [r4, #16]
    1a66:	f000 f979 	bl	1d5c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    1a6a:	6920      	ldr	r0, [r4, #16]
    1a6c:	2103      	movs	r1, #3
    1a6e:	f000 f97f 	bl	1d70 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    1a72:	6920      	ldr	r0, [r4, #16]
    1a74:	f000 fa17 	bl	1ea6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    1a78:	2800      	cmp	r0, #0
    1a7a:	d0f2      	beq.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>
  _iHead = 0;
    1a7c:	2387      	movs	r3, #135	; 0x87
    1a7e:	2200      	movs	r2, #0
    1a80:	009b      	lsls	r3, r3, #2
    1a82:	18e3      	adds	r3, r4, r3
    1a84:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    1a86:	609a      	str	r2, [r3, #8]
        transmissionBegun = true;
    1a88:	2301      	movs	r3, #1
    1a8a:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
    1a8c:	238b      	movs	r3, #139	; 0x8b
    1a8e:	009b      	lsls	r3, r3, #2
    1a90:	58e3      	ldr	r3, [r4, r3]
    1a92:	4293      	cmp	r3, r2
    1a94:	d0e5      	beq.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>
          onRequestCallback();
    1a96:	4798      	blx	r3
    1a98:	e7e3      	b.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>
  return (nextIndex(_iHead) == _iTail);
    1a9a:	0022      	movs	r2, r4
    1a9c:	32fc      	adds	r2, #252	; 0xfc
    1a9e:	69d3      	ldr	r3, [r2, #28]
    1aa0:	6a12      	ldr	r2, [r2, #32]
  return (uint32_t)(index + 1) % N;
    1aa2:	3301      	adds	r3, #1
    1aa4:	b2db      	uxtb	r3, r3
          sercom->prepareNackBitWIRE(); 
    1aa6:	6920      	ldr	r0, [r4, #16]
        if (rxBuffer.isFull()) {
    1aa8:	4293      	cmp	r3, r2
    1aaa:	d106      	bne.n	1aba <_ZN7TwoWire9onServiceEv+0xb8>
          sercom->prepareNackBitWIRE(); 
    1aac:	f000 f94e 	bl	1d4c <_ZN6SERCOM18prepareNackBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    1ab0:	2103      	movs	r1, #3
    1ab2:	6920      	ldr	r0, [r4, #16]
    1ab4:	f000 f95c 	bl	1d70 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    1ab8:	e7d3      	b.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>
          rxBuffer.store_char(sercom->readDataWIRE());
    1aba:	f000 f9f9 	bl	1eb0 <_ZN6SERCOM12readDataWIREEv>
    1abe:	0001      	movs	r1, r0
    1ac0:	0020      	movs	r0, r4
    1ac2:	3018      	adds	r0, #24
    1ac4:	f7ff ff29 	bl	191a <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    1ac8:	6920      	ldr	r0, [r4, #16]
    1aca:	f000 f947 	bl	1d5c <_ZN6SERCOM17prepareAckBitWIREEv>
    1ace:	e7ef      	b.n	1ab0 <_ZN7TwoWire9onServiceEv+0xae>
    else if(sercom->isAddressMatch())  //Address Match
    1ad0:	6920      	ldr	r0, [r4, #16]
    1ad2:	f000 f9e3 	bl	1e9c <_ZN6SERCOM14isAddressMatchEv>
    1ad6:	2800      	cmp	r0, #0
    1ad8:	d1c4      	bne.n	1a64 <_ZN7TwoWire9onServiceEv+0x62>
    else if(sercom->isDataReadyWIRE())
    1ada:	6920      	ldr	r0, [r4, #16]
    1adc:	f000 f9cf 	bl	1e7e <_ZN6SERCOM15isDataReadyWIREEv>
    1ae0:	2800      	cmp	r0, #0
    1ae2:	d0be      	beq.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>
      if (sercom->isMasterReadOperationWIRE())
    1ae4:	6920      	ldr	r0, [r4, #16]
    1ae6:	f000 f9de 	bl	1ea6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    1aea:	2800      	cmp	r0, #0
    1aec:	d0d5      	beq.n	1a9a <_ZN7TwoWire9onServiceEv+0x98>
  int delta = _iHead - _iTail;
    1aee:	2387      	movs	r3, #135	; 0x87
    1af0:	009b      	lsls	r3, r3, #2
    1af2:	18e2      	adds	r2, r4, r3
    1af4:	6853      	ldr	r3, [r2, #4]
    1af6:	6892      	ldr	r2, [r2, #8]
    1af8:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    1afa:	d501      	bpl.n	1b00 <_ZN7TwoWire9onServiceEv+0xfe>
    return N + delta;
    1afc:	3301      	adds	r3, #1
    1afe:	33ff      	adds	r3, #255	; 0xff
        uint8_t c = 0xff;
    1b00:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
    1b02:	2b00      	cmp	r3, #0
    1b04:	d005      	beq.n	1b12 <_ZN7TwoWire9onServiceEv+0x110>
    1b06:	0020      	movs	r0, r4
    1b08:	3021      	adds	r0, #33	; 0x21
    1b0a:	30ff      	adds	r0, #255	; 0xff
          c = txBuffer.read_char();
    1b0c:	f7ff ff27 	bl	195e <_ZN11RingBufferNILi256EE9read_charEv>
    1b10:	b2c1      	uxtb	r1, r0
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    1b12:	6920      	ldr	r0, [r4, #16]
    1b14:	f000 f99c 	bl	1e50 <_ZN6SERCOM17sendDataSlaveWIREEh>
    1b18:	75a0      	strb	r0, [r4, #22]
    1b1a:	e7a2      	b.n	1a62 <_ZN7TwoWire9onServiceEv+0x60>

00001b1c <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    1b1c:	b510      	push	{r4, lr}
    Wire.onService();
    1b1e:	4802      	ldr	r0, [pc, #8]	; (1b28 <SERCOM3_Handler+0xc>)
    1b20:	f7ff ff6f 	bl	1a02 <_ZN7TwoWire9onServiceEv>
  }
    1b24:	bd10      	pop	{r4, pc}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	200006ac 	.word	0x200006ac

00001b2c <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    1b2c:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    1b2e:	2315      	movs	r3, #21
    1b30:	2214      	movs	r2, #20
    1b32:	4902      	ldr	r1, [pc, #8]	; (1b3c <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
    1b34:	4802      	ldr	r0, [pc, #8]	; (1b40 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    1b36:	f7ff fe95 	bl	1864 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    1b3a:	bd10      	pop	{r4, pc}
    1b3c:	20000d64 	.word	0x20000d64
    1b40:	200006ac 	.word	0x200006ac

00001b44 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    1b44:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    1b46:	4802      	ldr	r0, [pc, #8]	; (1b50 <SERCOM0_Handler+0xc>)
    1b48:	f000 fbb3 	bl	22b2 <_ZN4Uart10IrqHandlerEv>
}
    1b4c:	bd10      	pop	{r4, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	20000b1c 	.word	0x20000b1c

00001b54 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    1b54:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    1b56:	4802      	ldr	r0, [pc, #8]	; (1b60 <SERCOM5_Handler+0xc>)
    1b58:	f000 fbab 	bl	22b2 <_ZN4Uart10IrqHandlerEv>
}
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	200008e0 	.word	0x200008e0

00001b64 <_GLOBAL__sub_I_g_APinDescription>:
    1b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1b66:	2401      	movs	r4, #1
    1b68:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    1b6a:	4f15      	ldr	r7, [pc, #84]	; (1bc0 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    1b6c:	4915      	ldr	r1, [pc, #84]	; (1bc4 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    1b6e:	0038      	movs	r0, r7
    1b70:	f000 f84a 	bl	1c08 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    1b74:	4914      	ldr	r1, [pc, #80]	; (1bc8 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    1b76:	4815      	ldr	r0, [pc, #84]	; (1bcc <_GLOBAL__sub_I_g_APinDescription+0x68>)
    1b78:	f000 f846 	bl	1c08 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    1b7c:	4914      	ldr	r1, [pc, #80]	; (1bd0 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    1b7e:	4815      	ldr	r0, [pc, #84]	; (1bd4 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    1b80:	f000 f842 	bl	1c08 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    1b84:	4914      	ldr	r1, [pc, #80]	; (1bd8 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    1b86:	4815      	ldr	r0, [pc, #84]	; (1bdc <_GLOBAL__sub_I_g_APinDescription+0x78>)
    1b88:	f000 f83e 	bl	1c08 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    1b8c:	4914      	ldr	r1, [pc, #80]	; (1be0 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    1b8e:	4815      	ldr	r0, [pc, #84]	; (1be4 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    1b90:	f000 f83a 	bl	1c08 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    1b94:	4d14      	ldr	r5, [pc, #80]	; (1be8 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    1b96:	4915      	ldr	r1, [pc, #84]	; (1bec <_GLOBAL__sub_I_g_APinDescription+0x88>)
    1b98:	0028      	movs	r0, r5
    1b9a:	f000 f835 	bl	1c08 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1b9e:	0039      	movs	r1, r7
    1ba0:	9600      	str	r6, [sp, #0]
    1ba2:	0023      	movs	r3, r4
    1ba4:	9401      	str	r4, [sp, #4]
    1ba6:	2200      	movs	r2, #0
    1ba8:	4811      	ldr	r0, [pc, #68]	; (1bf0 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    1baa:	f000 fb17 	bl	21dc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    1bae:	9600      	str	r6, [sp, #0]
    1bb0:	0029      	movs	r1, r5
    1bb2:	9401      	str	r4, [sp, #4]
    1bb4:	231e      	movs	r3, #30
    1bb6:	221f      	movs	r2, #31
    1bb8:	480e      	ldr	r0, [pc, #56]	; (1bf4 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    1bba:	f000 fb0f 	bl	21dc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    1bbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1bc0:	20000d58 	.word	0x20000d58
    1bc4:	42000800 	.word	0x42000800
    1bc8:	42000c00 	.word	0x42000c00
    1bcc:	20000d5c 	.word	0x20000d5c
    1bd0:	42001000 	.word	0x42001000
    1bd4:	20000d60 	.word	0x20000d60
    1bd8:	42001400 	.word	0x42001400
    1bdc:	20000d64 	.word	0x20000d64
    1be0:	42001800 	.word	0x42001800
    1be4:	20000d68 	.word	0x20000d68
    1be8:	20000d6c 	.word	0x20000d6c
    1bec:	42001c00 	.word	0x42001c00
    1bf0:	20000b1c 	.word	0x20000b1c
    1bf4:	200008e0 	.word	0x200008e0

00001bf8 <_Znwj>:
    1bf8:	b510      	push	{r4, lr}
    1bfa:	f000 ff8d 	bl	2b18 <malloc>
    1bfe:	bd10      	pop	{r4, pc}

00001c00 <_ZdlPv>:
    1c00:	b510      	push	{r4, lr}
    1c02:	f000 ff93 	bl	2b2c <free>
    1c06:	bd10      	pop	{r4, pc}

00001c08 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    1c08:	6001      	str	r1, [r0, #0]
}
    1c0a:	4770      	bx	lr

00001c0c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0e:	ac05      	add	r4, sp, #20
    1c10:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1c12:	6804      	ldr	r4, [r0, #0]
    1c14:	1e98      	subs	r0, r3, #2
    1c16:	1e47      	subs	r7, r0, #1
    1c18:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1c1a:	6826      	ldr	r6, [r4, #0]
    1c1c:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1c1e:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1c20:	4332      	orrs	r2, r6
    1c22:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1c24:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1c26:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1c28:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    1c2a:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    1c2c:	6862      	ldr	r2, [r4, #4]
    1c2e:	4329      	orrs	r1, r5
    1c30:	2000      	movs	r0, #0
    1c32:	2b02      	cmp	r3, #2
    1c34:	d000      	beq.n	1c38 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    1c36:	0358      	lsls	r0, r3, #13
    1c38:	4311      	orrs	r1, r2
    1c3a:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1c3c:	6061      	str	r1, [r4, #4]
}
    1c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c40 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    1c40:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1c42:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1c44:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1c46:	03a4      	lsls	r4, r4, #14
    1c48:	6818      	ldr	r0, [r3, #0]
    1c4a:	0512      	lsls	r2, r2, #20
    1c4c:	4022      	ands	r2, r4
    1c4e:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1c50:	20c0      	movs	r0, #192	; 0xc0
    1c52:	0409      	lsls	r1, r1, #16
    1c54:	0280      	lsls	r0, r0, #10
    1c56:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1c58:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1c5a:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    1c5c:	685a      	ldr	r2, [r3, #4]
    1c5e:	4310      	orrs	r0, r2
    1c60:	6058      	str	r0, [r3, #4]
}
    1c62:	bd10      	pop	{r4, pc}

00001c64 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    1c64:	2201      	movs	r2, #1
    1c66:	6803      	ldr	r3, [r0, #0]
    1c68:	6819      	ldr	r1, [r3, #0]
    1c6a:	430a      	orrs	r2, r1
    1c6c:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    1c6e:	681a      	ldr	r2, [r3, #0]
    1c70:	07d2      	lsls	r2, r2, #31
    1c72:	d4fc      	bmi.n	1c6e <_ZN6SERCOM9resetUARTEv+0xa>
    1c74:	69da      	ldr	r2, [r3, #28]
    1c76:	07d2      	lsls	r2, r2, #31
    1c78:	d4f9      	bmi.n	1c6e <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    1c7a:	4770      	bx	lr

00001c7c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    1c7c:	2202      	movs	r2, #2
    1c7e:	6803      	ldr	r3, [r0, #0]
    1c80:	6819      	ldr	r1, [r3, #0]
    1c82:	430a      	orrs	r2, r1
    1c84:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    1c86:	69da      	ldr	r2, [r3, #28]
    1c88:	0792      	lsls	r2, r2, #30
    1c8a:	d4fc      	bmi.n	1c86 <_ZN6SERCOM10enableUARTEv+0xa>
}
    1c8c:	4770      	bx	lr

00001c8e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    1c8e:	6803      	ldr	r3, [r0, #0]
    1c90:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    1c92:	07d2      	lsls	r2, r2, #31
    1c94:	d402      	bmi.n	1c9c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    1c96:	7e1a      	ldrb	r2, [r3, #24]
    1c98:	0792      	lsls	r2, r2, #30
    1c9a:	d5fc      	bpl.n	1c96 <_ZN6SERCOM9flushUARTEv+0x8>
}
    1c9c:	4770      	bx	lr

00001c9e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    1c9e:	2200      	movs	r2, #0
    1ca0:	6803      	ldr	r3, [r0, #0]
    1ca2:	835a      	strh	r2, [r3, #26]
}
    1ca4:	4770      	bx	lr

00001ca6 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    1ca6:	6803      	ldr	r3, [r0, #0]
    1ca8:	7e18      	ldrb	r0, [r3, #24]
    1caa:	0740      	lsls	r0, r0, #29
    1cac:	0fc0      	lsrs	r0, r0, #31
}
    1cae:	4770      	bx	lr

00001cb0 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    1cb0:	6803      	ldr	r3, [r0, #0]
    1cb2:	7e18      	ldrb	r0, [r3, #24]
    1cb4:	09c0      	lsrs	r0, r0, #7
}
    1cb6:	4770      	bx	lr

00001cb8 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    1cb8:	2380      	movs	r3, #128	; 0x80
    1cba:	6802      	ldr	r2, [r0, #0]
    1cbc:	425b      	negs	r3, r3
    1cbe:	7e11      	ldrb	r1, [r2, #24]
    1cc0:	430b      	orrs	r3, r1
    1cc2:	7613      	strb	r3, [r2, #24]
}
    1cc4:	4770      	bx	lr

00001cc6 <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    1cc6:	6803      	ldr	r3, [r0, #0]
    1cc8:	8b58      	ldrh	r0, [r3, #26]
    1cca:	0780      	lsls	r0, r0, #30
    1ccc:	0fc0      	lsrs	r0, r0, #31
}
    1cce:	4770      	bx	lr

00001cd0 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    1cd0:	2302      	movs	r3, #2
    1cd2:	6802      	ldr	r2, [r0, #0]
    1cd4:	8b51      	ldrh	r1, [r2, #26]
    1cd6:	430b      	orrs	r3, r1
    1cd8:	8353      	strh	r3, [r2, #26]
}
    1cda:	4770      	bx	lr

00001cdc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    1cdc:	6803      	ldr	r3, [r0, #0]
    1cde:	7e18      	ldrb	r0, [r3, #24]
    1ce0:	07c0      	lsls	r0, r0, #31
    1ce2:	0fc0      	lsrs	r0, r0, #31
}
    1ce4:	4770      	bx	lr

00001ce6 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    1ce6:	6803      	ldr	r3, [r0, #0]
    1ce8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1cea:	b2c0      	uxtb	r0, r0
}
    1cec:	4770      	bx	lr

00001cee <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    1cee:	6803      	ldr	r3, [r0, #0]
    1cf0:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    1cf2:	07d2      	lsls	r2, r2, #31
    1cf4:	d5fc      	bpl.n	1cf0 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    1cf6:	b289      	uxth	r1, r1
  return 1;
}
    1cf8:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    1cfa:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1cfc:	4770      	bx	lr

00001cfe <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1cfe:	2201      	movs	r2, #1
    1d00:	6803      	ldr	r3, [r0, #0]
    1d02:	759a      	strb	r2, [r3, #22]
}
    1d04:	4770      	bx	lr

00001d06 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    1d06:	2201      	movs	r2, #1
    1d08:	6803      	ldr	r3, [r0, #0]
    1d0a:	751a      	strb	r2, [r3, #20]
}
    1d0c:	4770      	bx	lr

00001d0e <_ZN6SERCOM9resetWIREEv>:
void SERCOM::resetWIRE()
{
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    1d0e:	2201      	movs	r2, #1
    1d10:	6803      	ldr	r3, [r0, #0]
    1d12:	6819      	ldr	r1, [r3, #0]
    1d14:	430a      	orrs	r2, r1
    1d16:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    1d18:	681a      	ldr	r2, [r3, #0]
    1d1a:	07d2      	lsls	r2, r2, #31
    1d1c:	d4fc      	bmi.n	1d18 <_ZN6SERCOM9resetWIREEv+0xa>
    1d1e:	69da      	ldr	r2, [r3, #28]
    1d20:	07d2      	lsls	r2, r2, #31
    1d22:	d4f9      	bmi.n	1d18 <_ZN6SERCOM9resetWIREEv+0xa>
}
    1d24:	4770      	bx	lr

00001d26 <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    1d26:	2202      	movs	r2, #2
    1d28:	6803      	ldr	r3, [r0, #0]
    1d2a:	6819      	ldr	r1, [r3, #0]
    1d2c:	430a      	orrs	r2, r1
    1d2e:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    1d30:	69da      	ldr	r2, [r3, #28]
    1d32:	0792      	lsls	r2, r2, #30
    1d34:	d4fc      	bmi.n	1d30 <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    1d36:	2130      	movs	r1, #48	; 0x30
    1d38:	8b5a      	ldrh	r2, [r3, #26]
    1d3a:	438a      	bics	r2, r1
    1d3c:	0011      	movs	r1, r2
    1d3e:	2210      	movs	r2, #16
    1d40:	430a      	orrs	r2, r1
    1d42:	835a      	strh	r2, [r3, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    1d44:	69da      	ldr	r2, [r3, #28]
    1d46:	0752      	lsls	r2, r2, #29
    1d48:	d4fc      	bmi.n	1d44 <_ZN6SERCOM10enableWIREEv+0x1e>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    1d4a:	4770      	bx	lr

00001d4c <_ZN6SERCOM18prepareNackBitWIREEv>:
  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
}

void SERCOM::prepareNackBitWIRE( void )
{
    1d4c:	2380      	movs	r3, #128	; 0x80
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1d4e:	6802      	ldr	r2, [r0, #0]
    1d50:	02db      	lsls	r3, r3, #11
    1d52:	6811      	ldr	r1, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    1d54:	6851      	ldr	r1, [r2, #4]
    1d56:	430b      	orrs	r3, r1
    1d58:	6053      	str	r3, [r2, #4]
}
    1d5a:	4770      	bx	lr

00001d5c <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1d5c:	6803      	ldr	r3, [r0, #0]
    1d5e:	4903      	ldr	r1, [pc, #12]	; (1d6c <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
    1d60:	681a      	ldr	r2, [r3, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    1d62:	685a      	ldr	r2, [r3, #4]
    1d64:	400a      	ands	r2, r1
    1d66:	605a      	str	r2, [r3, #4]
}
    1d68:	4770      	bx	lr
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	fffbffff 	.word	0xfffbffff

00001d70 <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1d70:	6803      	ldr	r3, [r0, #0]
{
    1d72:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1d74:	6818      	ldr	r0, [r3, #0]
    1d76:	2203      	movs	r2, #3
    1d78:	06c0      	lsls	r0, r0, #27
    1d7a:	0f40      	lsrs	r0, r0, #29
    1d7c:	4c09      	ldr	r4, [pc, #36]	; (1da4 <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    1d7e:	2805      	cmp	r0, #5
    1d80:	d109      	bne.n	1d96 <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    1d82:	6858      	ldr	r0, [r3, #4]
    1d84:	4011      	ands	r1, r2
    1d86:	0409      	lsls	r1, r1, #16
    1d88:	4020      	ands	r0, r4
    1d8a:	4301      	orrs	r1, r0
    1d8c:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    1d8e:	69da      	ldr	r2, [r3, #28]
    1d90:	0752      	lsls	r2, r2, #29
    1d92:	d4fc      	bmi.n	1d8e <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    1d94:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    1d96:	6858      	ldr	r0, [r3, #4]
    1d98:	4011      	ands	r1, r2
    1d9a:	0409      	lsls	r1, r1, #16
    1d9c:	4020      	ands	r0, r4
    1d9e:	4301      	orrs	r1, r0
    1da0:	6059      	str	r1, [r3, #4]
}
    1da2:	e7f7      	b.n	1d94 <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    1da4:	fffcffff 	.word	0xfffcffff

00001da8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:
{
    1da8:	b570      	push	{r4, r5, r6, lr}
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
}

bool SERCOM::isBusOwnerWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    1daa:	6803      	ldr	r3, [r0, #0]
{
    1dac:	0004      	movs	r4, r0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    1dae:	8b58      	ldrh	r0, [r3, #26]
    1db0:	0680      	lsls	r0, r0, #26
    1db2:	0f80      	lsrs	r0, r0, #30
  if(!isBusOwnerWIRE())
    1db4:	2802      	cmp	r0, #2
    1db6:	d00e      	beq.n	1dd6 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
}

bool SERCOM::isBusBusyWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    1db8:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    1dba:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    1dbc:	06ad      	lsls	r5, r5, #26
    1dbe:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    1dc0:	2d03      	cmp	r5, #3
    1dc2:	d032      	beq.n	1e2a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
    1dc4:	8b58      	ldrh	r0, [r3, #26]
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    1dc6:	0780      	lsls	r0, r0, #30
    1dc8:	d505      	bpl.n	1dd6 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    1dca:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    1dcc:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    1dce:	06ad      	lsls	r5, r5, #26
    1dd0:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    1dd2:	2d01      	cmp	r5, #1
    1dd4:	d129      	bne.n	1e2a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  sercom->I2CM.ADDR.bit.ADDR = address;
    1dd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
  address = (address << 0x1ul) | flag;
    1dd8:	0049      	lsls	r1, r1, #1
    1dda:	4311      	orrs	r1, r2
  sercom->I2CM.ADDR.bit.ADDR = address;
    1ddc:	0ac0      	lsrs	r0, r0, #11
  address = (address << 0x1ul) | flag;
    1dde:	b2c9      	uxtb	r1, r1
  sercom->I2CM.ADDR.bit.ADDR = address;
    1de0:	02c0      	lsls	r0, r0, #11
    1de2:	4308      	orrs	r0, r1
    1de4:	6258      	str	r0, [r3, #36]	; 0x24
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    1de6:	2a00      	cmp	r2, #0
    1de8:	d113      	bne.n	1e12 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
    while( !sercom->I2CM.INTFLAG.bit.MB )
    1dea:	7e1a      	ldrb	r2, [r3, #24]
    1dec:	07d2      	lsls	r2, r2, #31
    1dee:	d5fc      	bpl.n	1dea <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x42>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    1df0:	8b5b      	ldrh	r3, [r3, #26]
    1df2:	069b      	lsls	r3, r3, #26
    1df4:	0f9b      	lsrs	r3, r3, #30
    if(!isBusOwnerWIRE())
    1df6:	2b02      	cmp	r3, #2
    1df8:	d004      	beq.n	1e04 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
      startTransmissionWIRE(address >> 1, flag);
    1dfa:	0849      	lsrs	r1, r1, #1
    1dfc:	2200      	movs	r2, #0
    1dfe:	0020      	movs	r0, r4
    1e00:	f7ff ffd2 	bl	1da8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
  if(sercom->I2CM.STATUS.bit.RXNACK)
    1e04:	6823      	ldr	r3, [r4, #0]
    1e06:	8b58      	ldrh	r0, [r3, #26]
    1e08:	0740      	lsls	r0, r0, #29
    1e0a:	0fc3      	lsrs	r3, r0, #31
    1e0c:	2001      	movs	r0, #1
    1e0e:	4058      	eors	r0, r3
    1e10:	e00b      	b.n	1e2a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
    while( !sercom->I2CM.INTFLAG.bit.SB )
    1e12:	7e18      	ldrb	r0, [r3, #24]
    1e14:	0780      	lsls	r0, r0, #30
    1e16:	0fc0      	lsrs	r0, r0, #31
    1e18:	d1f4      	bne.n	1e04 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
        if (sercom->I2CM.INTFLAG.bit.MB) {
    1e1a:	7e1a      	ldrb	r2, [r3, #24]
    1e1c:	07d2      	lsls	r2, r2, #31
    1e1e:	d5f8      	bpl.n	1e12 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    1e20:	22c0      	movs	r2, #192	; 0xc0
    1e22:	6859      	ldr	r1, [r3, #4]
    1e24:	0292      	lsls	r2, r2, #10
    1e26:	430a      	orrs	r2, r1
    1e28:	605a      	str	r2, [r3, #4]
}
    1e2a:	bd70      	pop	{r4, r5, r6, pc}

00001e2c <_ZN6SERCOM18sendDataMasterWIREEh>:
  sercom->I2CM.DATA.bit.DATA = data;
    1e2c:	6803      	ldr	r3, [r0, #0]
    1e2e:	001a      	movs	r2, r3
    1e30:	3228      	adds	r2, #40	; 0x28
    1e32:	7011      	strb	r1, [r2, #0]
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    1e34:	7e18      	ldrb	r0, [r3, #24]
    1e36:	07c0      	lsls	r0, r0, #31
    1e38:	0fc0      	lsrs	r0, r0, #31
    1e3a:	d103      	bne.n	1e44 <_ZN6SERCOM18sendDataMasterWIREEh+0x18>
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    1e3c:	8b5a      	ldrh	r2, [r3, #26]
    1e3e:	07d2      	lsls	r2, r2, #31
    1e40:	d5f8      	bpl.n	1e34 <_ZN6SERCOM18sendDataMasterWIREEh+0x8>
}
    1e42:	4770      	bx	lr
  if(sercom->I2CM.STATUS.bit.RXNACK)
    1e44:	8b58      	ldrh	r0, [r3, #26]
    1e46:	0740      	lsls	r0, r0, #29
    1e48:	0fc3      	lsrs	r3, r0, #31
    1e4a:	2001      	movs	r0, #1
    1e4c:	4058      	eors	r0, r3
    1e4e:	e7f8      	b.n	1e42 <_ZN6SERCOM18sendDataMasterWIREEh+0x16>

00001e50 <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
    1e50:	6803      	ldr	r3, [r0, #0]
    return false;
    1e52:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
    1e54:	001a      	movs	r2, r3
    1e56:	3228      	adds	r2, #40	; 0x28
    1e58:	7011      	strb	r1, [r2, #0]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    1e5a:	7e1a      	ldrb	r2, [r3, #24]
    1e5c:	0752      	lsls	r2, r2, #29
    1e5e:	d504      	bpl.n	1e6a <_ZN6SERCOM17sendDataSlaveWIREEh+0x1a>
    1e60:	8b58      	ldrh	r0, [r3, #26]
    1e62:	2301      	movs	r3, #1
    1e64:	0740      	lsls	r0, r0, #29
    1e66:	0fc0      	lsrs	r0, r0, #31
    1e68:	4058      	eors	r0, r3
}
    1e6a:	4770      	bx	lr

00001e6c <_ZN6SERCOM11isSlaveWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    1e6c:	6803      	ldr	r3, [r0, #0]
    1e6e:	6818      	ldr	r0, [r3, #0]
    1e70:	06c0      	lsls	r0, r0, #27
    1e72:	0f40      	lsrs	r0, r0, #29
    1e74:	3804      	subs	r0, #4
    1e76:	4243      	negs	r3, r0
    1e78:	4158      	adcs	r0, r3
    1e7a:	b2c0      	uxtb	r0, r0
}
    1e7c:	4770      	bx	lr

00001e7e <_ZN6SERCOM15isDataReadyWIREEv>:
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
    1e7e:	6803      	ldr	r3, [r0, #0]
    1e80:	7e18      	ldrb	r0, [r3, #24]
    1e82:	0740      	lsls	r0, r0, #29
    1e84:	0fc0      	lsrs	r0, r0, #31
}
    1e86:	4770      	bx	lr

00001e88 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
    1e88:	6803      	ldr	r3, [r0, #0]
    1e8a:	7e18      	ldrb	r0, [r3, #24]
    1e8c:	07c0      	lsls	r0, r0, #31
    1e8e:	0fc0      	lsrs	r0, r0, #31
}
    1e90:	4770      	bx	lr

00001e92 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
    1e92:	6803      	ldr	r3, [r0, #0]
    1e94:	8b58      	ldrh	r0, [r3, #26]
    1e96:	06c0      	lsls	r0, r0, #27
    1e98:	0fc0      	lsrs	r0, r0, #31
}
    1e9a:	4770      	bx	lr

00001e9c <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    1e9c:	6803      	ldr	r3, [r0, #0]
    1e9e:	7e18      	ldrb	r0, [r3, #24]
    1ea0:	0780      	lsls	r0, r0, #30
    1ea2:	0fc0      	lsrs	r0, r0, #31
}
    1ea4:	4770      	bx	lr

00001ea6 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
    1ea6:	6803      	ldr	r3, [r0, #0]
    1ea8:	8b58      	ldrh	r0, [r3, #26]
    1eaa:	0700      	lsls	r0, r0, #28
    1eac:	0fc0      	lsrs	r0, r0, #31
}
    1eae:	4770      	bx	lr

00001eb0 <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1eb0:	6803      	ldr	r3, [r0, #0]
    1eb2:	681a      	ldr	r2, [r3, #0]
    1eb4:	06d2      	lsls	r2, r2, #27
    1eb6:	0f52      	lsrs	r2, r2, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
    1eb8:	2a05      	cmp	r2, #5
    1eba:	d105      	bne.n	1ec8 <_ZN6SERCOM12readDataWIREEv+0x18>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 && sercom->I2CM.INTFLAG.bit.MB == 0 )
    1ebc:	7e1a      	ldrb	r2, [r3, #24]
    1ebe:	0792      	lsls	r2, r2, #30
    1ec0:	d402      	bmi.n	1ec8 <_ZN6SERCOM12readDataWIREEv+0x18>
    1ec2:	7e1a      	ldrb	r2, [r3, #24]
    1ec4:	07d2      	lsls	r2, r2, #31
    1ec6:	d5f9      	bpl.n	1ebc <_ZN6SERCOM12readDataWIREEv+0xc>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    1ec8:	3328      	adds	r3, #40	; 0x28
    1eca:	7818      	ldrb	r0, [r3, #0]
    1ecc:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
  }
}
    1ece:	4770      	bx	lr

00001ed0 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    1ed0:	6803      	ldr	r3, [r0, #0]
    1ed2:	4a21      	ldr	r2, [pc, #132]	; (1f58 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    1ed4:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    1ed6:	4293      	cmp	r3, r2
    1ed8:	d011      	beq.n	1efe <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    1eda:	4a20      	ldr	r2, [pc, #128]	; (1f5c <_ZN6SERCOM13initClockNVICEv+0x8c>)
    1edc:	4293      	cmp	r3, r2
    1ede:	d02f      	beq.n	1f40 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    1ee0:	4a1f      	ldr	r2, [pc, #124]	; (1f60 <_ZN6SERCOM13initClockNVICEv+0x90>)
    1ee2:	4293      	cmp	r3, r2
    1ee4:	d02f      	beq.n	1f46 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    1ee6:	4a1f      	ldr	r2, [pc, #124]	; (1f64 <_ZN6SERCOM13initClockNVICEv+0x94>)
    1ee8:	4293      	cmp	r3, r2
    1eea:	d02f      	beq.n	1f4c <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    1eec:	4a1e      	ldr	r2, [pc, #120]	; (1f68 <_ZN6SERCOM13initClockNVICEv+0x98>)
    1eee:	4293      	cmp	r3, r2
    1ef0:	d02f      	beq.n	1f52 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    1ef2:	4a1e      	ldr	r2, [pc, #120]	; (1f6c <_ZN6SERCOM13initClockNVICEv+0x9c>)
    1ef4:	4293      	cmp	r3, r2
    1ef6:	d122      	bne.n	1f3e <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    1ef8:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    1efa:	2219      	movs	r2, #25
    1efc:	e001      	b.n	1f02 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    1efe:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    1f00:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f02:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f04:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f06:	4099      	lsls	r1, r3
    1f08:	4819      	ldr	r0, [pc, #100]	; (1f70 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f0a:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f0c:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f0e:	0899      	lsrs	r1, r3, #2
    1f10:	402b      	ands	r3, r5
    1f12:	40ab      	lsls	r3, r5
    1f14:	35fc      	adds	r5, #252	; 0xfc
    1f16:	409d      	lsls	r5, r3
    1f18:	0089      	lsls	r1, r1, #2
    1f1a:	1809      	adds	r1, r1, r0
    1f1c:	00a4      	lsls	r4, r4, #2
    1f1e:	5908      	ldr	r0, [r1, r4]
    1f20:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1f22:	25c0      	movs	r5, #192	; 0xc0
    1f24:	409d      	lsls	r5, r3
    1f26:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f28:	4303      	orrs	r3, r0
    1f2a:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    1f2c:	2380      	movs	r3, #128	; 0x80
    1f2e:	01db      	lsls	r3, r3, #7
    1f30:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    1f32:	4b10      	ldr	r3, [pc, #64]	; (1f74 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    1f34:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1f36:	785a      	ldrb	r2, [r3, #1]
    1f38:	b252      	sxtb	r2, r2
    1f3a:	2a00      	cmp	r2, #0
    1f3c:	dbfb      	blt.n	1f36 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    1f3e:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    1f40:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    1f42:	2215      	movs	r2, #21
    1f44:	e7dd      	b.n	1f02 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    1f46:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    1f48:	2216      	movs	r2, #22
    1f4a:	e7da      	b.n	1f02 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    1f4c:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    1f4e:	2217      	movs	r2, #23
    1f50:	e7d7      	b.n	1f02 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    1f52:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    1f54:	2218      	movs	r2, #24
    1f56:	e7d4      	b.n	1f02 <_ZN6SERCOM13initClockNVICEv+0x32>
    1f58:	42000800 	.word	0x42000800
    1f5c:	42000c00 	.word	0x42000c00
    1f60:	42001000 	.word	0x42001000
    1f64:	42001400 	.word	0x42001400
    1f68:	42001800 	.word	0x42001800
    1f6c:	42001c00 	.word	0x42001c00
    1f70:	e000e100 	.word	0xe000e100
    1f74:	40000c00 	.word	0x40000c00

00001f78 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f7a:	0004      	movs	r4, r0
    1f7c:	0016      	movs	r6, r2
    1f7e:	000f      	movs	r7, r1
    1f80:	001d      	movs	r5, r3
  initClockNVIC();
    1f82:	f7ff ffa5 	bl	1ed0 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    1f86:	0020      	movs	r0, r4
    1f88:	f7ff fe6c 	bl	1c64 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1f8c:	221c      	movs	r2, #28
    1f8e:	00bb      	lsls	r3, r7, #2
    1f90:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1f92:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1f94:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1f96:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1f98:	4313      	orrs	r3, r2
    1f9a:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    1f9c:	2384      	movs	r3, #132	; 0x84
    1f9e:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    1fa0:	2f01      	cmp	r7, #1
    1fa2:	d118      	bne.n	1fd6 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    1fa4:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    1fa6:	2e01      	cmp	r6, #1
    1fa8:	d000      	beq.n	1fac <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    1faa:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1fac:	4b0a      	ldr	r3, [pc, #40]	; (1fd8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    1fae:	4369      	muls	r1, r5
    1fb0:	6818      	ldr	r0, [r3, #0]
    1fb2:	00c0      	lsls	r0, r0, #3
    1fb4:	f000 fd00 	bl	29b8 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    1fb8:	2207      	movs	r2, #7
    1fba:	89a3      	ldrh	r3, [r4, #12]
    1fbc:	4002      	ands	r2, r0
    1fbe:	04db      	lsls	r3, r3, #19
    1fc0:	0352      	lsls	r2, r2, #13
    1fc2:	0cdb      	lsrs	r3, r3, #19
    1fc4:	4313      	orrs	r3, r2
    1fc6:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    1fc8:	0403      	lsls	r3, r0, #16
    1fca:	89a0      	ldrh	r0, [r4, #12]
    1fcc:	0cdb      	lsrs	r3, r3, #19
    1fce:	0b40      	lsrs	r0, r0, #13
    1fd0:	0340      	lsls	r0, r0, #13
    1fd2:	4318      	orrs	r0, r3
    1fd4:	81a0      	strh	r0, [r4, #12]
}
    1fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fd8:	20000004 	.word	0x20000004

00001fdc <_ZN6SERCOM14initMasterWIREEm>:
{
    1fdc:	b570      	push	{r4, r5, r6, lr}
    1fde:	0005      	movs	r5, r0
    1fe0:	000c      	movs	r4, r1
  initClockNVIC() ;
    1fe2:	f7ff ff75 	bl	1ed0 <_ZN6SERCOM13initClockNVICEv>
  resetWIRE() ;
    1fe6:	0028      	movs	r0, r5
    1fe8:	f7ff fe91 	bl	1d0e <_ZN6SERCOM9resetWIREEv>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    1fec:	2314      	movs	r3, #20
    1fee:	682d      	ldr	r5, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    1ff0:	0061      	lsls	r1, r4, #1
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    1ff2:	602b      	str	r3, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    1ff4:	4b0c      	ldr	r3, [pc, #48]	; (2028 <_ZN6SERCOM14initMasterWIREEm+0x4c>)
    1ff6:	681e      	ldr	r6, [r3, #0]
    1ff8:	0030      	movs	r0, r6
    1ffa:	f000 fcdd 	bl	29b8 <__udivsi3>
    1ffe:	490b      	ldr	r1, [pc, #44]	; (202c <_ZN6SERCOM14initMasterWIREEm+0x50>)
    2000:	0004      	movs	r4, r0
    2002:	0030      	movs	r0, r6
    2004:	f000 fcd8 	bl	29b8 <__udivsi3>
    2008:	237d      	movs	r3, #125	; 0x7d
    200a:	21fa      	movs	r1, #250	; 0xfa
    200c:	4358      	muls	r0, r3
    200e:	00c9      	lsls	r1, r1, #3
    2010:	f000 fcd2 	bl	29b8 <__udivsi3>
    2014:	23ff      	movs	r3, #255	; 0xff
    2016:	1a24      	subs	r4, r4, r0
    2018:	68e8      	ldr	r0, [r5, #12]
    201a:	3c05      	subs	r4, #5
    201c:	401c      	ands	r4, r3
    201e:	4398      	bics	r0, r3
    2020:	4304      	orrs	r4, r0
    2022:	60ec      	str	r4, [r5, #12]
}
    2024:	bd70      	pop	{r4, r5, r6, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	20000004 	.word	0x20000004
    202c:	000f4240 	.word	0x000f4240

00002030 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    2030:	2001      	movs	r0, #1
    2032:	4770      	bx	lr

00002034 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    2034:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    2036:	6803      	ldr	r3, [r0, #0]
    2038:	4a01      	ldr	r2, [pc, #4]	; (2040 <_ZN4Uart5beginEm+0xc>)
    203a:	6a1b      	ldr	r3, [r3, #32]
    203c:	4798      	blx	r3
}
    203e:	bd10      	pop	{r4, pc}
    2040:	00000413 	.word	0x00000413

00002044 <_ZN4Uart4peekEv>:
  if(_iTail == _iHead)
    2044:	0003      	movs	r3, r0
    2046:	33fc      	adds	r3, #252	; 0xfc
    2048:	69d9      	ldr	r1, [r3, #28]
    204a:	699a      	ldr	r2, [r3, #24]
    204c:	4291      	cmp	r1, r2
    204e:	d003      	beq.n	2058 <_ZN4Uart4peekEv+0x14>
  return _aucBuffer[_iTail];
    2050:	69db      	ldr	r3, [r3, #28]
    2052:	18c0      	adds	r0, r0, r3
    2054:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    2056:	4770      	bx	lr
    return -1;
    2058:	2001      	movs	r0, #1
    205a:	4240      	negs	r0, r0
  return rxBuffer.peek();
    205c:	e7fb      	b.n	2056 <_ZN4Uart4peekEv+0x12>

0000205e <_ZN4Uart3endEv>:
{
    205e:	b510      	push	{r4, lr}
    2060:	0004      	movs	r4, r0
  sercom->resetUART();
    2062:	6900      	ldr	r0, [r0, #16]
    2064:	f7ff fdfe 	bl	1c64 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    2068:	0022      	movs	r2, r4
    206a:	2300      	movs	r3, #0
    206c:	32fc      	adds	r2, #252	; 0xfc
    206e:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    2070:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    2072:	2286      	movs	r2, #134	; 0x86
    2074:	0092      	lsls	r2, r2, #2
    2076:	18a4      	adds	r4, r4, r2
    2078:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    207a:	60a3      	str	r3, [r4, #8]
}
    207c:	bd10      	pop	{r4, pc}

0000207e <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    207e:	20f0      	movs	r0, #240	; 0xf0
    2080:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    2082:	3930      	subs	r1, #48	; 0x30
    2084:	4248      	negs	r0, r1
    2086:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    2088:	4770      	bx	lr

0000208a <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    208a:	23f0      	movs	r3, #240	; 0xf0
    208c:	011b      	lsls	r3, r3, #4
    208e:	4019      	ands	r1, r3
    2090:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    2092:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    2094:	009b      	lsls	r3, r3, #2
    2096:	4299      	cmp	r1, r3
    2098:	d00a      	beq.n	20b0 <_ZN4Uart15extractCharSizeEt+0x26>
    209a:	3301      	adds	r3, #1
    209c:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    209e:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    20a0:	4299      	cmp	r1, r3
    20a2:	d005      	beq.n	20b0 <_ZN4Uart15extractCharSizeEt+0x26>
    20a4:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    20a6:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    20a8:	005b      	lsls	r3, r3, #1
    20aa:	4299      	cmp	r1, r3
    20ac:	d000      	beq.n	20b0 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    20ae:	2000      	movs	r0, #0

  }
}
    20b0:	4770      	bx	lr

000020b2 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    20b2:	200f      	movs	r0, #15
    20b4:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    20b6:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    20b8:	2901      	cmp	r1, #1
    20ba:	d003      	beq.n	20c4 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    20bc:	3902      	subs	r1, #2
    20be:	1e48      	subs	r0, r1, #1
    20c0:	4181      	sbcs	r1, r0
    20c2:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    20c4:	4770      	bx	lr
	...

000020c8 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    20c8:	2389      	movs	r3, #137	; 0x89
{
    20ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    20cc:	2618      	movs	r6, #24
{
    20ce:	b085      	sub	sp, #20
    20d0:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    20d2:	009b      	lsls	r3, r3, #2
{
    20d4:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    20d6:	5cc0      	ldrb	r0, [r0, r3]
    20d8:	0033      	movs	r3, r6
    20da:	2108      	movs	r1, #8
    20dc:	4343      	muls	r3, r0
    20de:	4d32      	ldr	r5, [pc, #200]	; (21a8 <_ZN4Uart5beginEmt+0xe0>)
{
    20e0:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    20e2:	18eb      	adds	r3, r5, r3
    20e4:	5659      	ldrsb	r1, [r3, r1]
    20e6:	f7ff fb33 	bl	1750 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    20ea:	4b30      	ldr	r3, [pc, #192]	; (21ac <_ZN4Uart5beginEmt+0xe4>)
    20ec:	2108      	movs	r1, #8
    20ee:	5ce0      	ldrb	r0, [r4, r3]
    20f0:	0033      	movs	r3, r6
    20f2:	4343      	muls	r3, r0
    20f4:	18eb      	adds	r3, r5, r3
    20f6:	5659      	ldrsb	r1, [r3, r1]
    20f8:	f7ff fb2a 	bl	1750 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    20fc:	4b2c      	ldr	r3, [pc, #176]	; (21b0 <_ZN4Uart5beginEmt+0xe8>)
    20fe:	5ce2      	ldrb	r2, [r4, r3]
    2100:	9303      	str	r3, [sp, #12]
    2102:	2a02      	cmp	r2, #2
    2104:	d109      	bne.n	211a <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    2106:	3311      	adds	r3, #17
    2108:	5ce0      	ldrb	r0, [r4, r3]
    210a:	28ff      	cmp	r0, #255	; 0xff
    210c:	d005      	beq.n	211a <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    210e:	2108      	movs	r1, #8
    2110:	4346      	muls	r6, r0
    2112:	19ae      	adds	r6, r5, r6
    2114:	5671      	ldrsb	r1, [r6, r1]
    2116:	f7ff fb1b 	bl	1750 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    211a:	268a      	movs	r6, #138	; 0x8a
    211c:	00b6      	lsls	r6, r6, #2
    211e:	5da0      	ldrb	r0, [r4, r6]
    2120:	28ff      	cmp	r0, #255	; 0xff
    2122:	d019      	beq.n	2158 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    2124:	2101      	movs	r1, #1
    2126:	f7ff fa9b 	bl	1660 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    212a:	2218      	movs	r2, #24
    212c:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    212e:	4921      	ldr	r1, [pc, #132]	; (21b4 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2130:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2132:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2134:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2136:	01db      	lsls	r3, r3, #7
    2138:	1858      	adds	r0, r3, r1
    213a:	218b      	movs	r1, #139	; 0x8b
    213c:	0089      	lsls	r1, r1, #2
    213e:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2140:	491d      	ldr	r1, [pc, #116]	; (21b8 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2142:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2144:	185b      	adds	r3, r3, r1
    2146:	218c      	movs	r1, #140	; 0x8c
    2148:	0089      	lsls	r1, r1, #2
    214a:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    214c:	6869      	ldr	r1, [r5, #4]
    214e:	408a      	lsls	r2, r1
    2150:	218d      	movs	r1, #141	; 0x8d
    2152:	0089      	lsls	r1, r1, #2
    2154:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    2156:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2158:	2201      	movs	r2, #1
    215a:	9b02      	ldr	r3, [sp, #8]
    215c:	0011      	movs	r1, r2
    215e:	6920      	ldr	r0, [r4, #16]
    2160:	f7ff ff0a 	bl	1f78 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    2164:	0039      	movs	r1, r7
    2166:	0020      	movs	r0, r4
    2168:	f7ff ff8f 	bl	208a <_ZN4Uart15extractCharSizeEt>
    216c:	0039      	movs	r1, r7
    216e:	0005      	movs	r5, r0
    2170:	0020      	movs	r0, r4
    2172:	f7ff ff9e 	bl	20b2 <_ZN4Uart13extractParityEt>
    2176:	0039      	movs	r1, r7
    2178:	0006      	movs	r6, r0
    217a:	0020      	movs	r0, r4
    217c:	f7ff ff7f 	bl	207e <_ZN4Uart16extractNbStopBitEt>
    2180:	0033      	movs	r3, r6
    2182:	9000      	str	r0, [sp, #0]
    2184:	0029      	movs	r1, r5
    2186:	6920      	ldr	r0, [r4, #16]
    2188:	2201      	movs	r2, #1
    218a:	f7ff fd3f 	bl	1c0c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    218e:	4b0b      	ldr	r3, [pc, #44]	; (21bc <_ZN4Uart5beginEmt+0xf4>)
    2190:	6920      	ldr	r0, [r4, #16]
    2192:	5ce2      	ldrb	r2, [r4, r3]
    2194:	9b03      	ldr	r3, [sp, #12]
    2196:	5ce1      	ldrb	r1, [r4, r3]
    2198:	f7ff fd52 	bl	1c40 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    219c:	6920      	ldr	r0, [r4, #16]
    219e:	f7ff fd6d 	bl	1c7c <_ZN6SERCOM10enableUARTEv>
}
    21a2:	b005      	add	sp, #20
    21a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00002da0 	.word	0x00002da0
    21ac:	00000225 	.word	0x00000225
    21b0:	00000227 	.word	0x00000227
    21b4:	41004418 	.word	0x41004418
    21b8:	41004414 	.word	0x41004414
    21bc:	00000226 	.word	0x00000226

000021c0 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    21c0:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    21c2:	b510      	push	{r4, lr}
    21c4:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    21c6:	0052      	lsls	r2, r2, #1
    21c8:	2100      	movs	r1, #0
    21ca:	f000 fcc2 	bl	2b52 <memset>
  _iHead = 0;
    21ce:	0023      	movs	r3, r4
    21d0:	2200      	movs	r2, #0
    21d2:	33fc      	adds	r3, #252	; 0xfc
    21d4:	605a      	str	r2, [r3, #4]
}
    21d6:	0020      	movs	r0, r4
  _iTail = 0;
    21d8:	609a      	str	r2, [r3, #8]
}
    21da:	bd10      	pop	{r4, pc}

000021dc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    21dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21de:	001d      	movs	r5, r3
    21e0:	ab08      	add	r3, sp, #32
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	0004      	movs	r4, r0
    21e6:	9300      	str	r3, [sp, #0]
    21e8:	ab09      	add	r3, sp, #36	; 0x24
    21ea:	781b      	ldrb	r3, [r3, #0]
    21ec:	0016      	movs	r6, r2
    21ee:	9301      	str	r3, [sp, #4]
    21f0:	2300      	movs	r3, #0
    21f2:	6043      	str	r3, [r0, #4]
    21f4:	23fa      	movs	r3, #250	; 0xfa
    21f6:	009b      	lsls	r3, r3, #2
    21f8:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    21fa:	4b11      	ldr	r3, [pc, #68]	; (2240 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    21fc:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    21fe:	3308      	adds	r3, #8
    2200:	6003      	str	r3, [r0, #0]
    2202:	3014      	adds	r0, #20
    2204:	f7ff ffdc 	bl	21c0 <_ZN11RingBufferNILi256EEC1Ev>
    2208:	0020      	movs	r0, r4
    220a:	301d      	adds	r0, #29
    220c:	30ff      	adds	r0, #255	; 0xff
    220e:	f7ff ffd7 	bl	21c0 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    2212:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    2214:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    2216:	009b      	lsls	r3, r3, #2
  sercom = _s;
    2218:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    221a:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    221c:	4b09      	ldr	r3, [pc, #36]	; (2244 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    221e:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    2220:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    2222:	4b09      	ldr	r3, [pc, #36]	; (2248 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    2224:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    2226:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    2228:	466a      	mov	r2, sp
    222a:	4b08      	ldr	r3, [pc, #32]	; (224c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    222c:	7912      	ldrb	r2, [r2, #4]
    222e:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    2230:	228a      	movs	r2, #138	; 0x8a
    2232:	3b29      	subs	r3, #41	; 0x29
    2234:	3bff      	subs	r3, #255	; 0xff
    2236:	0092      	lsls	r2, r2, #2
    2238:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    223a:	3210      	adds	r2, #16
    223c:	54a3      	strb	r3, [r4, r2]
}
    223e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2240:	000031f0 	.word	0x000031f0
    2244:	00000225 	.word	0x00000225
    2248:	00000226 	.word	0x00000226
    224c:	00000227 	.word	0x00000227

00002250 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    2250:	0003      	movs	r3, r0
    2252:	33fc      	adds	r3, #252	; 0xfc
    2254:	6858      	ldr	r0, [r3, #4]
    2256:	689b      	ldr	r3, [r3, #8]
    2258:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    225a:	d501      	bpl.n	2260 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    225c:	3001      	adds	r0, #1
    225e:	30ff      	adds	r0, #255	; 0xff
}
    2260:	4770      	bx	lr

00002262 <_ZN4Uart5flushEv>:
{
    2262:	b510      	push	{r4, lr}
    2264:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    2266:	0020      	movs	r0, r4
    2268:	301d      	adds	r0, #29
    226a:	30ff      	adds	r0, #255	; 0xff
    226c:	f7ff fff0 	bl	2250 <_ZN11RingBufferNILi256EE9availableEv>
    2270:	2800      	cmp	r0, #0
    2272:	d1f8      	bne.n	2266 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    2274:	6920      	ldr	r0, [r4, #16]
    2276:	f7ff fd0a 	bl	1c8e <_ZN6SERCOM9flushUARTEv>
}
    227a:	bd10      	pop	{r4, pc}

0000227c <_ZN4Uart9availableEv>:
{
    227c:	b510      	push	{r4, lr}
  return rxBuffer.available();
    227e:	3014      	adds	r0, #20
    2280:	f7ff ffe6 	bl	2250 <_ZN11RingBufferNILi256EE9availableEv>
}
    2284:	bd10      	pop	{r4, pc}

00002286 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    2286:	0003      	movs	r3, r0
    2288:	33fc      	adds	r3, #252	; 0xfc
    228a:	6859      	ldr	r1, [r3, #4]
    228c:	689a      	ldr	r2, [r3, #8]
    228e:	4291      	cmp	r1, r2
    2290:	db04      	blt.n	229c <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    2292:	685a      	ldr	r2, [r3, #4]
    2294:	6898      	ldr	r0, [r3, #8]
    2296:	1a80      	subs	r0, r0, r2
    2298:	30ff      	adds	r0, #255	; 0xff
}
    229a:	4770      	bx	lr
    return _iTail - _iHead - 1;
    229c:	6898      	ldr	r0, [r3, #8]
    229e:	685b      	ldr	r3, [r3, #4]
    22a0:	1ac0      	subs	r0, r0, r3
    22a2:	3801      	subs	r0, #1
    22a4:	e7f9      	b.n	229a <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

000022a6 <_ZN4Uart17availableForWriteEv>:
{
    22a6:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    22a8:	301d      	adds	r0, #29
    22aa:	30ff      	adds	r0, #255	; 0xff
    22ac:	f7ff ffeb 	bl	2286 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    22b0:	bd10      	pop	{r4, pc}

000022b2 <_ZN4Uart10IrqHandlerEv>:
{
    22b2:	b510      	push	{r4, lr}
    22b4:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    22b6:	6900      	ldr	r0, [r0, #16]
    22b8:	f7ff fd05 	bl	1cc6 <_ZN6SERCOM16isFrameErrorUARTEv>
    22bc:	2800      	cmp	r0, #0
    22be:	d005      	beq.n	22cc <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    22c0:	6920      	ldr	r0, [r4, #16]
    22c2:	f7ff fd10 	bl	1ce6 <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    22c6:	6920      	ldr	r0, [r4, #16]
    22c8:	f7ff fd02 	bl	1cd0 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    22cc:	6920      	ldr	r0, [r4, #16]
    22ce:	f7ff fcea 	bl	1ca6 <_ZN6SERCOM17availableDataUARTEv>
    22d2:	2800      	cmp	r0, #0
    22d4:	d020      	beq.n	2318 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    22d6:	6920      	ldr	r0, [r4, #16]
    22d8:	f7ff fd05 	bl	1ce6 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    22dc:	0022      	movs	r2, r4
    22de:	32fc      	adds	r2, #252	; 0xfc
    22e0:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    22e2:	69d1      	ldr	r1, [r2, #28]
  return (uint32_t)(index + 1) % N;
    22e4:	3301      	adds	r3, #1
    22e6:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    22e8:	428b      	cmp	r3, r1
    22ea:	d003      	beq.n	22f4 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    22ec:	6991      	ldr	r1, [r2, #24]
    22ee:	1861      	adds	r1, r4, r1
    22f0:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    22f2:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    22f4:	238a      	movs	r3, #138	; 0x8a
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	5ce3      	ldrb	r3, [r4, r3]
    22fa:	2bff      	cmp	r3, #255	; 0xff
    22fc:	d00c      	beq.n	2318 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    22fe:	0020      	movs	r0, r4
    2300:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    2302:	f7ff ffc0 	bl	2286 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    2306:	2809      	cmp	r0, #9
    2308:	dc06      	bgt.n	2318 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    230a:	238b      	movs	r3, #139	; 0x8b
    230c:	228d      	movs	r2, #141	; 0x8d
    230e:	009b      	lsls	r3, r3, #2
    2310:	0092      	lsls	r2, r2, #2
    2312:	58e3      	ldr	r3, [r4, r3]
    2314:	58a2      	ldr	r2, [r4, r2]
    2316:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    2318:	6920      	ldr	r0, [r4, #16]
    231a:	f7ff fcdf 	bl	1cdc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    231e:	2800      	cmp	r0, #0
    2320:	d01a      	beq.n	2358 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    2322:	0020      	movs	r0, r4
    2324:	301d      	adds	r0, #29
    2326:	30ff      	adds	r0, #255	; 0xff
    2328:	f7ff ff92 	bl	2250 <_ZN11RingBufferNILi256EE9availableEv>
    232c:	2800      	cmp	r0, #0
    232e:	d022      	beq.n	2376 <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    2330:	2386      	movs	r3, #134	; 0x86
    2332:	009b      	lsls	r3, r3, #2
    2334:	18e3      	adds	r3, r4, r3
    2336:	6899      	ldr	r1, [r3, #8]
    2338:	685a      	ldr	r2, [r3, #4]
    233a:	4291      	cmp	r1, r2
    233c:	d018      	beq.n	2370 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    233e:	218e      	movs	r1, #142	; 0x8e
    2340:	689a      	ldr	r2, [r3, #8]
    2342:	0049      	lsls	r1, r1, #1
    2344:	18a2      	adds	r2, r4, r2
    2346:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    2348:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    234a:	3201      	adds	r2, #1
    234c:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    234e:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    2350:	b2c9      	uxtb	r1, r1
    2352:	6920      	ldr	r0, [r4, #16]
    2354:	f7ff fccb 	bl	1cee <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    2358:	6920      	ldr	r0, [r4, #16]
    235a:	f7ff fca9 	bl	1cb0 <_ZN6SERCOM11isUARTErrorEv>
    235e:	2800      	cmp	r0, #0
    2360:	d005      	beq.n	236e <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    2362:	6920      	ldr	r0, [r4, #16]
    2364:	f7ff fca8 	bl	1cb8 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    2368:	6920      	ldr	r0, [r4, #16]
    236a:	f7ff fc98 	bl	1c9e <_ZN6SERCOM15clearStatusUARTEv>
}
    236e:	bd10      	pop	{r4, pc}
    return -1;
    2370:	2101      	movs	r1, #1
    2372:	4249      	negs	r1, r1
    2374:	e7ec      	b.n	2350 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    2376:	6920      	ldr	r0, [r4, #16]
    2378:	f7ff fcc5 	bl	1d06 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    237c:	e7ec      	b.n	2358 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00002380 <_ZN4Uart5writeEh>:
{
    2380:	b570      	push	{r4, r5, r6, lr}
    2382:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2384:	6900      	ldr	r0, [r0, #16]
{
    2386:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2388:	f7ff fca8 	bl	1cdc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    238c:	2800      	cmp	r0, #0
    238e:	d124      	bne.n	23da <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    2390:	26ff      	movs	r6, #255	; 0xff
  return (nextIndex(_iHead) == _iTail);
    2392:	2386      	movs	r3, #134	; 0x86
    2394:	009b      	lsls	r3, r3, #2
    2396:	18e3      	adds	r3, r4, r3
    2398:	685a      	ldr	r2, [r3, #4]
    239a:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    239c:	3201      	adds	r2, #1
    239e:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    23a0:	428a      	cmp	r2, r1
    23a2:	d12f      	bne.n	2404 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    23a4:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    23a8:	07db      	lsls	r3, r3, #31
    23aa:	d40d      	bmi.n	23c8 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    23ac:	4b1e      	ldr	r3, [pc, #120]	; (2428 <_ZN4Uart5writeEh+0xa8>)
    23ae:	685b      	ldr	r3, [r3, #4]
    23b0:	05db      	lsls	r3, r3, #23
    23b2:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    23b4:	d0ed      	beq.n	2392 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    23b6:	3b10      	subs	r3, #16
    23b8:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    23ba:	2b00      	cmp	r3, #0
    23bc:	db19      	blt.n	23f2 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    23be:	089b      	lsrs	r3, r3, #2
    23c0:	33c0      	adds	r3, #192	; 0xc0
    23c2:	4a1a      	ldr	r2, [pc, #104]	; (242c <_ZN4Uart5writeEh+0xac>)
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    23c8:	6920      	ldr	r0, [r4, #16]
    23ca:	f7ff fc87 	bl	1cdc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    23ce:	2800      	cmp	r0, #0
    23d0:	d0df      	beq.n	2392 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    23d2:	0020      	movs	r0, r4
    23d4:	f7ff ff6d 	bl	22b2 <_ZN4Uart10IrqHandlerEv>
    23d8:	e7db      	b.n	2392 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    23da:	0020      	movs	r0, r4
    23dc:	301d      	adds	r0, #29
    23de:	30ff      	adds	r0, #255	; 0xff
    23e0:	f7ff ff36 	bl	2250 <_ZN11RingBufferNILi256EE9availableEv>
    23e4:	2800      	cmp	r0, #0
    23e6:	d1d3      	bne.n	2390 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    23e8:	0029      	movs	r1, r5
    23ea:	6920      	ldr	r0, [r4, #16]
    23ec:	f7ff fc7f 	bl	1cee <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    23f0:	e017      	b.n	2422 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    23f2:	220f      	movs	r2, #15
    23f4:	4013      	ands	r3, r2
    23f6:	3b08      	subs	r3, #8
    23f8:	089b      	lsrs	r3, r3, #2
    23fa:	4a0d      	ldr	r2, [pc, #52]	; (2430 <_ZN4Uart5writeEh+0xb0>)
    23fc:	009b      	lsls	r3, r3, #2
    23fe:	189b      	adds	r3, r3, r2
    2400:	681b      	ldr	r3, [r3, #0]
    2402:	e7e1      	b.n	23c8 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    2404:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    2406:	3201      	adds	r2, #1
    2408:	4016      	ands	r6, r2
  if ( i != _iTail )
    240a:	689a      	ldr	r2, [r3, #8]
    240c:	4296      	cmp	r6, r2
    240e:	d005      	beq.n	241c <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    2410:	218e      	movs	r1, #142	; 0x8e
    2412:	685a      	ldr	r2, [r3, #4]
    2414:	0049      	lsls	r1, r1, #1
    2416:	18a2      	adds	r2, r4, r2
    2418:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    241a:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    241c:	6920      	ldr	r0, [r4, #16]
    241e:	f7ff fc6e 	bl	1cfe <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    2422:	2001      	movs	r0, #1
    2424:	bd70      	pop	{r4, r5, r6, pc}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	e000ed00 	.word	0xe000ed00
    242c:	e000e100 	.word	0xe000e100
    2430:	e000ed1c 	.word	0xe000ed1c

00002434 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    2434:	0003      	movs	r3, r0
    2436:	33fc      	adds	r3, #252	; 0xfc
    2438:	69d9      	ldr	r1, [r3, #28]
    243a:	699a      	ldr	r2, [r3, #24]
{
    243c:	b570      	push	{r4, r5, r6, lr}
    243e:	0004      	movs	r4, r0
    2440:	4291      	cmp	r1, r2
    2442:	d01a      	beq.n	247a <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    2444:	69da      	ldr	r2, [r3, #28]
    2446:	1882      	adds	r2, r0, r2
    2448:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    244a:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    244c:	3201      	adds	r2, #1
    244e:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    2450:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    2452:	238a      	movs	r3, #138	; 0x8a
    2454:	009b      	lsls	r3, r3, #2
    2456:	5ce3      	ldrb	r3, [r4, r3]
    2458:	2bff      	cmp	r3, #255	; 0xff
    245a:	d00c      	beq.n	2476 <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    245c:	0020      	movs	r0, r4
    245e:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    2460:	f7ff ff11 	bl	2286 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    2464:	280a      	cmp	r0, #10
    2466:	dd06      	ble.n	2476 <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    2468:	238c      	movs	r3, #140	; 0x8c
    246a:	228d      	movs	r2, #141	; 0x8d
    246c:	009b      	lsls	r3, r3, #2
    246e:	0092      	lsls	r2, r2, #2
    2470:	58e3      	ldr	r3, [r4, r3]
    2472:	58a2      	ldr	r2, [r4, r2]
    2474:	601a      	str	r2, [r3, #0]
}
    2476:	0028      	movs	r0, r5
    2478:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    247a:	2501      	movs	r5, #1
    247c:	426d      	negs	r5, r5
    247e:	e7e8      	b.n	2452 <_ZN4Uart4readEv+0x1e>

00002480 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
    2480:	2000      	movs	r0, #0
    2482:	4770      	bx	lr

00002484 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
    2484:	b408      	push	{r3}
    2486:	4b02      	ldr	r3, [pc, #8]	; (2490 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
    2488:	469c      	mov	ip, r3
    248a:	3810      	subs	r0, #16
    248c:	bc08      	pop	{r3}
    248e:	4760      	bx	ip
    2490:	00002481 	.word	0x00002481

00002494 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    2494:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    2496:	250f      	movs	r5, #15
    2498:	1dcb      	adds	r3, r1, #7
    249a:	3901      	subs	r1, #1
    249c:	0002      	movs	r2, r0
    249e:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    24a0:	0014      	movs	r4, r2
		val = (val >> 4);
    24a2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    24a4:	3430      	adds	r4, #48	; 0x30
    24a6:	2a09      	cmp	r2, #9
    24a8:	dd01      	ble.n	24ae <_ZL5utox8mPc+0x1a>
    24aa:	3237      	adds	r2, #55	; 0x37
    24ac:	0014      	movs	r4, r2
    24ae:	701c      	strb	r4, [r3, #0]
    24b0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    24b2:	428b      	cmp	r3, r1
    24b4:	d1f2      	bne.n	249c <_ZL5utox8mPc+0x8>
	}
}
    24b6:	bd30      	pop	{r4, r5, pc}

000024b8 <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
    24b8:	b510      	push	{r4, lr}
    24ba:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    24bc:	4b0b      	ldr	r3, [pc, #44]	; (24ec <_ZN7Serial_12getShortNameEPc+0x34>)
    24be:	6818      	ldr	r0, [r3, #0]
    24c0:	f7ff ffe8 	bl	2494 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    24c4:	0021      	movs	r1, r4
    24c6:	4b0a      	ldr	r3, [pc, #40]	; (24f0 <_ZN7Serial_12getShortNameEPc+0x38>)
    24c8:	3108      	adds	r1, #8
    24ca:	6818      	ldr	r0, [r3, #0]
    24cc:	f7ff ffe2 	bl	2494 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    24d0:	0021      	movs	r1, r4
    24d2:	4b08      	ldr	r3, [pc, #32]	; (24f4 <_ZN7Serial_12getShortNameEPc+0x3c>)
    24d4:	3110      	adds	r1, #16
    24d6:	6818      	ldr	r0, [r3, #0]
    24d8:	f7ff ffdc 	bl	2494 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    24dc:	0021      	movs	r1, r4
    24de:	4b06      	ldr	r3, [pc, #24]	; (24f8 <_ZN7Serial_12getShortNameEPc+0x40>)
    24e0:	3118      	adds	r1, #24
    24e2:	6818      	ldr	r0, [r3, #0]
    24e4:	f7ff ffd6 	bl	2494 <_ZL5utox8mPc>
	return 32;
}
    24e8:	2020      	movs	r0, #32
    24ea:	bd10      	pop	{r4, pc}
    24ec:	0080a00c 	.word	0x0080a00c
    24f0:	0080a040 	.word	0x0080a040
    24f4:	0080a044 	.word	0x0080a044
    24f8:	0080a048 	.word	0x0080a048

000024fc <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
    24fc:	b408      	push	{r3}
    24fe:	4b02      	ldr	r3, [pc, #8]	; (2508 <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
    2500:	469c      	mov	ip, r3
    2502:	3810      	subs	r0, #16
    2504:	bc08      	pop	{r3}
    2506:	4760      	bx	ip
    2508:	000024b9 	.word	0x000024b9

0000250c <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
    250c:	4770      	bx	lr
	...

00002510 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
    2510:	b408      	push	{r3}
    2512:	4b02      	ldr	r3, [pc, #8]	; (251c <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
    2514:	469c      	mov	ip, r3
    2516:	3810      	subs	r0, #16
    2518:	bc08      	pop	{r3}
    251a:	4760      	bx	ip
    251c:	0000250d 	.word	0x0000250d

00002520 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    2520:	203f      	movs	r0, #63	; 0x3f
    2522:	4770      	bx	lr

00002524 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    2524:	b513      	push	{r0, r1, r4, lr}
    2526:	466b      	mov	r3, sp
	return write(&c, 1);
    2528:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    252a:	71d9      	strb	r1, [r3, #7]
    252c:	3307      	adds	r3, #7
	return write(&c, 1);
    252e:	6854      	ldr	r4, [r2, #4]
    2530:	0019      	movs	r1, r3
    2532:	2201      	movs	r2, #1
    2534:	47a0      	blx	r4
}
    2536:	bd16      	pop	{r1, r2, r4, pc}

00002538 <_ZN7Serial_12getInterfaceEPh>:
{
    2538:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
    253a:	780b      	ldrb	r3, [r1, #0]
{
    253c:	b095      	sub	sp, #84	; 0x54
	};
    253e:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
    2540:	3302      	adds	r3, #2
{
    2542:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
    2544:	700b      	strb	r3, [r1, #0]
	};
    2546:	2242      	movs	r2, #66	; 0x42
    2548:	2100      	movs	r1, #0
    254a:	0020      	movs	r0, r4
    254c:	f000 fb01 	bl	2b52 <memset>
    2550:	2209      	movs	r2, #9
    2552:	2504      	movs	r5, #4
    2554:	7222      	strb	r2, [r4, #8]
    2556:	2204      	movs	r2, #4
    2558:	75a5      	strb	r5, [r4, #22]
    255a:	7262      	strb	r2, [r4, #9]
    255c:	2506      	movs	r5, #6
    255e:	2205      	movs	r2, #5
    2560:	2024      	movs	r0, #36	; 0x24
    2562:	ae02      	add	r6, sp, #8
    2564:	7665      	strb	r5, [r4, #25]
    2566:	7725      	strb	r5, [r4, #28]
    2568:	1995      	adds	r5, r2, r6
    256a:	74a0      	strb	r0, [r4, #18]
    256c:	75e0      	strb	r0, [r4, #23]
    256e:	76e0      	strb	r0, [r4, #27]
    2570:	77e8      	strb	r0, [r5, #31]
    2572:	0030      	movs	r0, r6
    2574:	2101      	movs	r1, #1
    2576:	3006      	adds	r0, #6
    2578:	77c1      	strb	r1, [r0, #31]
    257a:	0030      	movs	r0, r6
    257c:	3007      	adds	r0, #7
    257e:	77c1      	strb	r1, [r0, #31]
    2580:	a804      	add	r0, sp, #16
    2582:	77c1      	strb	r1, [r0, #31]
    2584:	2009      	movs	r0, #9
    2586:	7321      	strb	r1, [r4, #12]
    2588:	7561      	strb	r1, [r4, #21]
    258a:	1980      	adds	r0, r0, r6
    258c:	3106      	adds	r1, #6
    258e:	77c1      	strb	r1, [r0, #31]
    2590:	200a      	movs	r0, #10
    2592:	1980      	adds	r0, r0, r6
    2594:	77c2      	strb	r2, [r0, #31]
    2596:	2003      	movs	r0, #3
    2598:	4684      	mov	ip, r0
    259a:	4665      	mov	r5, ip
    259c:	a805      	add	r0, sp, #20
    259e:	77c5      	strb	r5, [r0, #31]
    25a0:	202e      	movs	r0, #46	; 0x2e
    25a2:	2710      	movs	r7, #16
    25a4:	1980      	adds	r0, r0, r6
    25a6:	7007      	strb	r7, [r0, #0]
    25a8:	202f      	movs	r0, #47	; 0x2f
    25aa:	2509      	movs	r5, #9
    25ac:	2308      	movs	r3, #8
    25ae:	1980      	adds	r0, r0, r6
    25b0:	7005      	strb	r5, [r0, #0]
    25b2:	2504      	movs	r5, #4
    25b4:	7023      	strb	r3, [r4, #0]
    25b6:	3303      	adds	r3, #3
    25b8:	7063      	strb	r3, [r4, #1]
    25ba:	a80e      	add	r0, sp, #56	; 0x38
    25bc:	3b09      	subs	r3, #9
    25be:	70e3      	strb	r3, [r4, #3]
    25c0:	7123      	strb	r3, [r4, #4]
    25c2:	7163      	strb	r3, [r4, #5]
    25c4:	7363      	strb	r3, [r4, #13]
    25c6:	73a3      	strb	r3, [r4, #14]
    25c8:	7462      	strb	r2, [r4, #17]
    25ca:	7623      	strb	r3, [r4, #24]
    25cc:	76a2      	strb	r2, [r4, #26]
    25ce:	77e2      	strb	r2, [r4, #31]
    25d0:	7527      	strb	r7, [r4, #20]
    25d2:	8527      	strh	r7, [r4, #40]	; 0x28
    25d4:	7005      	strb	r5, [r0, #0]
    25d6:	2033      	movs	r0, #51	; 0x33
    25d8:	0035      	movs	r5, r6
    25da:	1980      	adds	r0, r0, r6
    25dc:	260a      	movs	r6, #10
    25de:	7003      	strb	r3, [r0, #0]
    25e0:	a80f      	add	r0, sp, #60	; 0x3c
    25e2:	7006      	strb	r6, [r0, #0]
    25e4:	a810      	add	r0, sp, #64	; 0x40
    25e6:	7001      	strb	r1, [r0, #0]
    25e8:	2039      	movs	r0, #57	; 0x39
    25ea:	1940      	adds	r0, r0, r5
    25ec:	7002      	strb	r2, [r0, #0]
    25ee:	203b      	movs	r0, #59	; 0x3b
    25f0:	3635      	adds	r6, #53	; 0x35
    25f2:	1976      	adds	r6, r6, r5
    25f4:	7031      	strb	r1, [r6, #0]
    25f6:	a912      	add	r1, sp, #72	; 0x48
    25f8:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    25fa:	2180      	movs	r1, #128	; 0x80
	};
    25fc:	323d      	adds	r2, #61	; 0x3d
    25fe:	1940      	adds	r0, r0, r5
    2600:	1952      	adds	r2, r2, r5
    2602:	7003      	strb	r3, [r0, #0]
    2604:	7013      	strb	r3, [r2, #0]
    2606:	2040      	movs	r0, #64	; 0x40
    2608:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    260a:	4249      	negs	r1, r1
    260c:	000e      	movs	r6, r1
	};
    260e:	3341      	adds	r3, #65	; 0x41
    2610:	195b      	adds	r3, r3, r5
    2612:	7018      	strb	r0, [r3, #0]
    2614:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
    2616:	9b01      	ldr	r3, [sp, #4]
	};
    2618:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
    261a:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    261c:	9a01      	ldr	r2, [sp, #4]
	};
    261e:	70a3      	strb	r3, [r4, #2]
    2620:	72a3      	strb	r3, [r4, #10]
    2622:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
    2624:	3301      	adds	r3, #1
    2626:	b2db      	uxtb	r3, r3
	};
    2628:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    262a:	7d52      	ldrb	r2, [r2, #21]
	};
    262c:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    262e:	4316      	orrs	r6, r2
	};
    2630:	1940      	adds	r0, r0, r5
    2632:	77c6      	strb	r6, [r0, #31]
    2634:	2031      	movs	r0, #49	; 0x31
    2636:	1940      	adds	r0, r0, r5
    2638:	7003      	strb	r3, [r0, #0]
    263a:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
    263c:	1c50      	adds	r0, r2, #1
	};
    263e:	195b      	adds	r3, r3, r5
    2640:	7018      	strb	r0, [r3, #0]
    2642:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
    2644:	3202      	adds	r2, #2
    2646:	430a      	orrs	r2, r1
	};
    2648:	195b      	adds	r3, r3, r5
    264a:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
    264c:	0021      	movs	r1, r4
    264e:	2242      	movs	r2, #66	; 0x42
    2650:	4802      	ldr	r0, [pc, #8]	; (265c <_ZN7Serial_12getInterfaceEPh+0x124>)
    2652:	f7fe fd07 	bl	1064 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    2656:	b015      	add	sp, #84	; 0x54
    2658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	200000f0 	.word	0x200000f0

00002660 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
    2660:	b408      	push	{r3}
    2662:	4b02      	ldr	r3, [pc, #8]	; (266c <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
    2664:	469c      	mov	ip, r3
    2666:	3810      	subs	r0, #16
    2668:	bc08      	pop	{r3}
    266a:	4760      	bx	ip
    266c:	00002539 	.word	0x00002539

00002670 <_ZN7Serial_5setupER8USBSetup>:
{
    2670:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
    2672:	790a      	ldrb	r2, [r1, #4]
    2674:	7d03      	ldrb	r3, [r0, #20]
{
    2676:	000c      	movs	r4, r1
		return false;
    2678:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
    267a:	429a      	cmp	r2, r3
    267c:	d10b      	bne.n	2696 <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
    267e:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
    2680:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    2682:	2ba1      	cmp	r3, #161	; 0xa1
    2684:	d109      	bne.n	269a <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
    2686:	2e21      	cmp	r6, #33	; 0x21
    2688:	d105      	bne.n	2696 <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    268a:	2207      	movs	r2, #7
    268c:	491f      	ldr	r1, [pc, #124]	; (270c <_ZN7Serial_5setupER8USBSetup+0x9c>)
    268e:	4820      	ldr	r0, [pc, #128]	; (2710 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    2690:	f7fe fce8 	bl	1064 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    2694:	3501      	adds	r5, #1
}
    2696:	0028      	movs	r0, r5
    2698:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    269a:	2b21      	cmp	r3, #33	; 0x21
    269c:	d1fb      	bne.n	2696 <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
    269e:	2e20      	cmp	r6, #32
    26a0:	d119      	bne.n	26d6 <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    26a2:	2207      	movs	r2, #7
    26a4:	4919      	ldr	r1, [pc, #100]	; (270c <_ZN7Serial_5setupER8USBSetup+0x9c>)
    26a6:	481a      	ldr	r0, [pc, #104]	; (2710 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    26a8:	f7fe fc12 	bl	ed0 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
    26ac:	4b17      	ldr	r3, [pc, #92]	; (270c <_ZN7Serial_5setupER8USBSetup+0x9c>)
    26ae:	781a      	ldrb	r2, [r3, #0]
    26b0:	7859      	ldrb	r1, [r3, #1]
    26b2:	0209      	lsls	r1, r1, #8
    26b4:	4311      	orrs	r1, r2
    26b6:	789a      	ldrb	r2, [r3, #2]
    26b8:	0412      	lsls	r2, r2, #16
    26ba:	4311      	orrs	r1, r2
    26bc:	78da      	ldrb	r2, [r3, #3]
    26be:	0612      	lsls	r2, r2, #24
    26c0:	430a      	orrs	r2, r1
    26c2:	2196      	movs	r1, #150	; 0x96
    26c4:	00c9      	lsls	r1, r1, #3
    26c6:	428a      	cmp	r2, r1
    26c8:	d102      	bne.n	26d0 <_ZN7Serial_5setupER8USBSetup+0x60>
    26ca:	79db      	ldrb	r3, [r3, #7]
    26cc:	07db      	lsls	r3, r3, #31
    26ce:	d508      	bpl.n	26e2 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
    26d0:	f7fd fe10 	bl	2f4 <cancelReset>
    26d4:	e008      	b.n	26e8 <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    26d6:	2e22      	cmp	r6, #34	; 0x22
    26d8:	d10a      	bne.n	26f0 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
    26da:	788a      	ldrb	r2, [r1, #2]
    26dc:	4b0b      	ldr	r3, [pc, #44]	; (270c <_ZN7Serial_5setupER8USBSetup+0x9c>)
    26de:	71da      	strb	r2, [r3, #7]
    26e0:	e7e4      	b.n	26ac <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
    26e2:	20fa      	movs	r0, #250	; 0xfa
    26e4:	f7fd fdfc 	bl	2e0 <initiateReset>
			USBDevice.sendZlp(0);
    26e8:	2100      	movs	r1, #0
    26ea:	4809      	ldr	r0, [pc, #36]	; (2710 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    26ec:	f7fe fdd0 	bl	1290 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    26f0:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
    26f2:	2e23      	cmp	r6, #35	; 0x23
    26f4:	d1cf      	bne.n	2696 <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    26f6:	78e3      	ldrb	r3, [r4, #3]
    26f8:	78a2      	ldrb	r2, [r4, #2]
    26fa:	021b      	lsls	r3, r3, #8
    26fc:	4313      	orrs	r3, r2
    26fe:	4a05      	ldr	r2, [pc, #20]	; (2714 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
    2700:	2100      	movs	r1, #0
    2702:	4803      	ldr	r0, [pc, #12]	; (2710 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    2704:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
    2706:	f7fe fdc3 	bl	1290 <_ZN14USBDeviceClass7sendZlpEm>
    270a:	e7c4      	b.n	2696 <_ZN7Serial_5setupER8USBSetup+0x26>
    270c:	2000000c 	.word	0x2000000c
    2710:	200000f0 	.word	0x200000f0
    2714:	20000008 	.word	0x20000008

00002718 <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
    2718:	b408      	push	{r3}
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
    271c:	469c      	mov	ip, r3
    271e:	3810      	subs	r0, #16
    2720:	bc08      	pop	{r3}
    2722:	4760      	bx	ip
    2724:	00002671 	.word	0x00002671

00002728 <_ZN7Serial_9availableEv>:
{
    2728:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
    272a:	7d41      	ldrb	r1, [r0, #21]
    272c:	6a00      	ldr	r0, [r0, #32]
    272e:	3101      	adds	r1, #1
    2730:	f7fe faf8 	bl	d24 <_ZN14USBDeviceClass9availableEm>
    2734:	4b03      	ldr	r3, [pc, #12]	; (2744 <_ZN7Serial_9availableEv+0x1c>)
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	3301      	adds	r3, #1
    273a:	1e5a      	subs	r2, r3, #1
    273c:	4193      	sbcs	r3, r2
    273e:	1818      	adds	r0, r3, r0
}
    2740:	bd10      	pop	{r4, pc}
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	20000014 	.word	0x20000014

00002748 <_ZN7Serial_5flushEv>:
{
    2748:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    274a:	7d41      	ldrb	r1, [r0, #21]
    274c:	6a00      	ldr	r0, [r0, #32]
    274e:	3102      	adds	r1, #2
    2750:	f7fe fafe 	bl	d50 <_ZN14USBDeviceClass5flushEm>
}
    2754:	bd10      	pop	{r4, pc}

00002756 <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
    2756:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
    2758:	7d41      	ldrb	r1, [r0, #21]
    275a:	6a00      	ldr	r0, [r0, #32]
    275c:	3102      	adds	r1, #2
    275e:	f7fe fac5 	bl	cec <_ZN14USBDeviceClass5clearEm>
}
    2762:	bd10      	pop	{r4, pc}

00002764 <_ZN7Serial_5writeEPKhj>:
{
    2764:	b570      	push	{r4, r5, r6, lr}
    2766:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    2768:	7d41      	ldrb	r1, [r0, #21]
{
    276a:	0004      	movs	r4, r0
    276c:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    276e:	3102      	adds	r1, #2
    2770:	002a      	movs	r2, r5
    2772:	6a00      	ldr	r0, [r0, #32]
    2774:	f7fe fbc0 	bl	ef8 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    2778:	2800      	cmp	r0, #0
    277a:	d101      	bne.n	2780 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
    277c:	2301      	movs	r3, #1
    277e:	6063      	str	r3, [r4, #4]
}
    2780:	bd70      	pop	{r4, r5, r6, pc}
	...

00002784 <_ZN7Serial_4peekEv>:
{
    2784:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    2786:	4c05      	ldr	r4, [pc, #20]	; (279c <_ZN7Serial_4peekEv+0x18>)
    2788:	6823      	ldr	r3, [r4, #0]
    278a:	1c5a      	adds	r2, r3, #1
    278c:	d104      	bne.n	2798 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    278e:	6803      	ldr	r3, [r0, #0]
    2790:	695b      	ldr	r3, [r3, #20]
    2792:	4798      	blx	r3
    2794:	0003      	movs	r3, r0
    2796:	6020      	str	r0, [r4, #0]
}
    2798:	0018      	movs	r0, r3
    279a:	bd10      	pop	{r4, pc}
    279c:	20000014 	.word	0x20000014

000027a0 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    27a0:	4a07      	ldr	r2, [pc, #28]	; (27c0 <_ZN7Serial_4readEv+0x20>)
{
    27a2:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
    27a4:	6810      	ldr	r0, [r2, #0]
{
    27a6:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    27a8:	1c41      	adds	r1, r0, #1
    27aa:	d003      	beq.n	27b4 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    27ac:	2301      	movs	r3, #1
    27ae:	425b      	negs	r3, r3
    27b0:	6013      	str	r3, [r2, #0]
}
    27b2:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    27b4:	7d59      	ldrb	r1, [r3, #21]
    27b6:	6a18      	ldr	r0, [r3, #32]
    27b8:	3101      	adds	r1, #1
    27ba:	f7fe fb4d 	bl	e58 <_ZN14USBDeviceClass4recvEm>
    27be:	e7f8      	b.n	27b2 <_ZN7Serial_4readEv+0x12>
    27c0:	20000014 	.word	0x20000014

000027c4 <_ZN7Serial_C1ER14USBDeviceClass>:
    27c4:	23fa      	movs	r3, #250	; 0xfa
    27c6:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
    27c8:	b570      	push	{r4, r5, r6, lr}
    27ca:	0004      	movs	r4, r0
    27cc:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
    27ce:	2303      	movs	r3, #3
    27d0:	7583      	strb	r3, [r0, #22]
    27d2:	0023      	movs	r3, r4
    Print() : write_error(0) {}
    27d4:	2200      	movs	r2, #0
    27d6:	3328      	adds	r3, #40	; 0x28
    27d8:	6042      	str	r2, [r0, #4]
    27da:	61a3      	str	r3, [r4, #24]
    27dc:	4b0c      	ldr	r3, [pc, #48]	; (2810 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
    27de:	2002      	movs	r0, #2
    27e0:	001d      	movs	r5, r3
    27e2:	3344      	adds	r3, #68	; 0x44
    27e4:	6123      	str	r3, [r4, #16]
    27e6:	3508      	adds	r5, #8
    27e8:	1d63      	adds	r3, r4, #5
    27ea:	61e2      	str	r2, [r4, #28]
    27ec:	6025      	str	r5, [r4, #0]
    27ee:	6221      	str	r1, [r4, #32]
    27f0:	75e0      	strb	r0, [r4, #23]
    27f2:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
    27f4:	2383      	movs	r3, #131	; 0x83
    27f6:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
    27f8:	3b01      	subs	r3, #1
    27fa:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
    27fc:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
    27fe:	f000 f8ad 	bl	295c <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
    2802:	0021      	movs	r1, r4
    2804:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
    2806:	f000 f87d 	bl	2904 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
    280a:	0020      	movs	r0, r4
    280c:	bd70      	pop	{r4, r5, r6, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	00003224 	.word	0x00003224

00002814 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
    2814:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    2816:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2818:	4a09      	ldr	r2, [pc, #36]	; (2840 <_ZN7Serial_15enableInterruptEv+0x2c>)
    281a:	2002      	movs	r0, #2
    281c:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    281e:	3301      	adds	r3, #1
    2820:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2822:	b2db      	uxtb	r3, r3
    2824:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2826:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2828:	18d3      	adds	r3, r2, r3
    282a:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    282c:	31ff      	adds	r1, #255	; 0xff
    282e:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2830:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2832:	4320      	orrs	r0, r4
    2834:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2836:	7a99      	ldrb	r1, [r3, #10]
    2838:	430a      	orrs	r2, r1
    283a:	729a      	strb	r2, [r3, #10]
}
    283c:	bd10      	pop	{r4, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	200005a8 	.word	0x200005a8

00002844 <_ZN7Serial_5beginEm>:
}
    2844:	4770      	bx	lr
	...

00002848 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
    2848:	b510      	push	{r4, lr}
    284a:	4902      	ldr	r1, [pc, #8]	; (2854 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
    284c:	4802      	ldr	r0, [pc, #8]	; (2858 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
    284e:	f7ff ffb9 	bl	27c4 <_ZN7Serial_C1ER14USBDeviceClass>
    2852:	bd10      	pop	{r4, pc}
    2854:	200000f0 	.word	0x200000f0
    2858:	20000d70 	.word	0x20000d70

0000285c <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    285c:	b570      	push	{r4, r5, r6, lr}
    285e:	000e      	movs	r6, r1
	int sent = 0;
    2860:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2862:	6844      	ldr	r4, [r0, #4]
    2864:	2c00      	cmp	r4, #0
    2866:	d00b      	beq.n	2880 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    2868:	6823      	ldr	r3, [r4, #0]
    286a:	0031      	movs	r1, r6
    286c:	685b      	ldr	r3, [r3, #4]
    286e:	0020      	movs	r0, r4
    2870:	4798      	blx	r3
		if (res < 0)
    2872:	2800      	cmp	r0, #0
    2874:	db02      	blt.n	287c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    2876:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    2878:	68e4      	ldr	r4, [r4, #12]
    287a:	e7f3      	b.n	2864 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    287c:	2501      	movs	r5, #1
    287e:	426d      	negs	r5, r5
	}
	return sent;
}
    2880:	0028      	movs	r0, r5
    2882:	bd70      	pop	{r4, r5, r6, pc}

00002884 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    2884:	b570      	push	{r4, r5, r6, lr}
    2886:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2888:	6844      	ldr	r4, [r0, #4]
    288a:	2c00      	cmp	r4, #0
    288c:	d008      	beq.n	28a0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    288e:	6823      	ldr	r3, [r4, #0]
    2890:	0029      	movs	r1, r5
    2892:	689b      	ldr	r3, [r3, #8]
    2894:	0020      	movs	r0, r4
    2896:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    2898:	2800      	cmp	r0, #0
    289a:	d102      	bne.n	28a2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    289c:	68e4      	ldr	r4, [r4, #12]
    289e:	e7f4      	b.n	288a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    28a0:	0020      	movs	r0, r4
}
    28a2:	bd70      	pop	{r4, r5, r6, pc}

000028a4 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
    28a4:	b570      	push	{r4, r5, r6, lr}
    28a6:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
    28a8:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
    28aa:	6844      	ldr	r4, [r0, #4]
    28ac:	2c00      	cmp	r4, #0
    28ae:	d009      	beq.n	28c4 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
    28b0:	6823      	ldr	r3, [r4, #0]
    28b2:	0029      	movs	r1, r5
    28b4:	0020      	movs	r0, r4
    28b6:	691b      	ldr	r3, [r3, #16]
    28b8:	4798      	blx	r3
		iSerialNum += len;
		size += len;
    28ba:	1836      	adds	r6, r6, r0
		iSerialNum += len;
    28bc:	182d      	adds	r5, r5, r0
		size += len;
    28be:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
    28c0:	68e4      	ldr	r4, [r4, #12]
    28c2:	e7f3      	b.n	28ac <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
    28c4:	0030      	movs	r0, r6
	*iSerialNum = 0;
    28c6:	702c      	strb	r4, [r5, #0]
}
    28c8:	bd70      	pop	{r4, r5, r6, pc}

000028ca <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    28ca:	b570      	push	{r4, r5, r6, lr}
    28cc:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    28ce:	6844      	ldr	r4, [r0, #4]
    28d0:	2c00      	cmp	r4, #0
    28d2:	d008      	beq.n	28e6 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    28d4:	6823      	ldr	r3, [r4, #0]
    28d6:	0029      	movs	r1, r5
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	0020      	movs	r0, r4
    28dc:	4798      	blx	r3
    28de:	2800      	cmp	r0, #0
    28e0:	d102      	bne.n	28e8 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    28e2:	68e4      	ldr	r4, [r4, #12]
    28e4:	e7f4      	b.n	28d0 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    28e6:	0020      	movs	r0, r4
}
    28e8:	bd70      	pop	{r4, r5, r6, pc}

000028ea <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
    28ea:	b570      	push	{r4, r5, r6, lr}
    28ec:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    28ee:	6844      	ldr	r4, [r0, #4]
    28f0:	2c00      	cmp	r4, #0
    28f2:	d006      	beq.n	2902 <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
    28f4:	6823      	ldr	r3, [r4, #0]
    28f6:	0020      	movs	r0, r4
    28f8:	68db      	ldr	r3, [r3, #12]
    28fa:	0029      	movs	r1, r5
    28fc:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
    28fe:	68e4      	ldr	r4, [r4, #12]
    2900:	e7f6      	b.n	28f0 <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
    2902:	bd70      	pop	{r4, r5, r6, pc}

00002904 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
    2904:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    2906:	798c      	ldrb	r4, [r1, #6]
    2908:	7845      	ldrb	r5, [r0, #1]
{
    290a:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    290c:	192a      	adds	r2, r5, r4
		return false;
    290e:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    2910:	2a07      	cmp	r2, #7
    2912:	dc1f      	bgt.n	2954 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
    2914:	685a      	ldr	r2, [r3, #4]
    2916:	4282      	cmp	r2, r0
    2918:	d116      	bne.n	2948 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
    291a:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
    291c:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
    291e:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
    2920:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
    2922:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
    2924:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
    2926:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2928:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
    292a:	4d0b      	ldr	r5, [pc, #44]	; (2958 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    292c:	4294      	cmp	r4, r2
    292e:	dd10      	ble.n	2952 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
    2930:	688f      	ldr	r7, [r1, #8]
    2932:	7858      	ldrb	r0, [r3, #1]
    2934:	0096      	lsls	r6, r2, #2
    2936:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2938:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
    293a:	0086      	lsls	r6, r0, #2
		lastEp++;
    293c:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
    293e:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2940:	b2d2      	uxtb	r2, r2
		lastEp++;
    2942:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2944:	e7f2      	b.n	292c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
    2946:	0002      	movs	r2, r0
		while (current->next) {
    2948:	68d0      	ldr	r0, [r2, #12]
    294a:	2800      	cmp	r0, #0
    294c:	d1fb      	bne.n	2946 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
    294e:	60d1      	str	r1, [r2, #12]
    2950:	e7e4      	b.n	291c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
    2952:	2001      	movs	r0, #1
	// restart USB layer???
}
    2954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	200000c8 	.word	0x200000c8

0000295c <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    295c:	2201      	movs	r2, #1
    295e:	4905      	ldr	r1, [pc, #20]	; (2974 <_Z12PluggableUSBv+0x18>)
    2960:	4805      	ldr	r0, [pc, #20]	; (2978 <_Z12PluggableUSBv+0x1c>)
    2962:	680b      	ldr	r3, [r1, #0]
    2964:	4013      	ands	r3, r2
    2966:	d103      	bne.n	2970 <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
    2968:	7003      	strb	r3, [r0, #0]
    296a:	7042      	strb	r2, [r0, #1]
    296c:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    296e:	600a      	str	r2, [r1, #0]
}
    2970:	4770      	bx	lr
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	20000da4 	.word	0x20000da4
    2978:	20000da8 	.word	0x20000da8

0000297c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    297c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    297e:	0006      	movs	r6, r0
    2980:	000d      	movs	r5, r1
    2982:	000c      	movs	r4, r1
    2984:	188b      	adds	r3, r1, r2
    2986:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    2988:	9b01      	ldr	r3, [sp, #4]
    298a:	1b67      	subs	r7, r4, r5
    298c:	429c      	cmp	r4, r3
    298e:	d007      	beq.n	29a0 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    2990:	6833      	ldr	r3, [r6, #0]
    2992:	7821      	ldrb	r1, [r4, #0]
    2994:	681b      	ldr	r3, [r3, #0]
    2996:	0030      	movs	r0, r6
    2998:	4798      	blx	r3
    299a:	3401      	adds	r4, #1
    299c:	2800      	cmp	r0, #0
    299e:	d1f3      	bne.n	2988 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    29a0:	0038      	movs	r0, r7
    29a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000029a4 <__gnu_thumb1_case_uqi>:
    29a4:	b402      	push	{r1}
    29a6:	4671      	mov	r1, lr
    29a8:	0849      	lsrs	r1, r1, #1
    29aa:	0049      	lsls	r1, r1, #1
    29ac:	5c09      	ldrb	r1, [r1, r0]
    29ae:	0049      	lsls	r1, r1, #1
    29b0:	448e      	add	lr, r1
    29b2:	bc02      	pop	{r1}
    29b4:	4770      	bx	lr
    29b6:	46c0      	nop			; (mov r8, r8)

000029b8 <__udivsi3>:
    29b8:	2200      	movs	r2, #0
    29ba:	0843      	lsrs	r3, r0, #1
    29bc:	428b      	cmp	r3, r1
    29be:	d374      	bcc.n	2aaa <__udivsi3+0xf2>
    29c0:	0903      	lsrs	r3, r0, #4
    29c2:	428b      	cmp	r3, r1
    29c4:	d35f      	bcc.n	2a86 <__udivsi3+0xce>
    29c6:	0a03      	lsrs	r3, r0, #8
    29c8:	428b      	cmp	r3, r1
    29ca:	d344      	bcc.n	2a56 <__udivsi3+0x9e>
    29cc:	0b03      	lsrs	r3, r0, #12
    29ce:	428b      	cmp	r3, r1
    29d0:	d328      	bcc.n	2a24 <__udivsi3+0x6c>
    29d2:	0c03      	lsrs	r3, r0, #16
    29d4:	428b      	cmp	r3, r1
    29d6:	d30d      	bcc.n	29f4 <__udivsi3+0x3c>
    29d8:	22ff      	movs	r2, #255	; 0xff
    29da:	0209      	lsls	r1, r1, #8
    29dc:	ba12      	rev	r2, r2
    29de:	0c03      	lsrs	r3, r0, #16
    29e0:	428b      	cmp	r3, r1
    29e2:	d302      	bcc.n	29ea <__udivsi3+0x32>
    29e4:	1212      	asrs	r2, r2, #8
    29e6:	0209      	lsls	r1, r1, #8
    29e8:	d065      	beq.n	2ab6 <__udivsi3+0xfe>
    29ea:	0b03      	lsrs	r3, r0, #12
    29ec:	428b      	cmp	r3, r1
    29ee:	d319      	bcc.n	2a24 <__udivsi3+0x6c>
    29f0:	e000      	b.n	29f4 <__udivsi3+0x3c>
    29f2:	0a09      	lsrs	r1, r1, #8
    29f4:	0bc3      	lsrs	r3, r0, #15
    29f6:	428b      	cmp	r3, r1
    29f8:	d301      	bcc.n	29fe <__udivsi3+0x46>
    29fa:	03cb      	lsls	r3, r1, #15
    29fc:	1ac0      	subs	r0, r0, r3
    29fe:	4152      	adcs	r2, r2
    2a00:	0b83      	lsrs	r3, r0, #14
    2a02:	428b      	cmp	r3, r1
    2a04:	d301      	bcc.n	2a0a <__udivsi3+0x52>
    2a06:	038b      	lsls	r3, r1, #14
    2a08:	1ac0      	subs	r0, r0, r3
    2a0a:	4152      	adcs	r2, r2
    2a0c:	0b43      	lsrs	r3, r0, #13
    2a0e:	428b      	cmp	r3, r1
    2a10:	d301      	bcc.n	2a16 <__udivsi3+0x5e>
    2a12:	034b      	lsls	r3, r1, #13
    2a14:	1ac0      	subs	r0, r0, r3
    2a16:	4152      	adcs	r2, r2
    2a18:	0b03      	lsrs	r3, r0, #12
    2a1a:	428b      	cmp	r3, r1
    2a1c:	d301      	bcc.n	2a22 <__udivsi3+0x6a>
    2a1e:	030b      	lsls	r3, r1, #12
    2a20:	1ac0      	subs	r0, r0, r3
    2a22:	4152      	adcs	r2, r2
    2a24:	0ac3      	lsrs	r3, r0, #11
    2a26:	428b      	cmp	r3, r1
    2a28:	d301      	bcc.n	2a2e <__udivsi3+0x76>
    2a2a:	02cb      	lsls	r3, r1, #11
    2a2c:	1ac0      	subs	r0, r0, r3
    2a2e:	4152      	adcs	r2, r2
    2a30:	0a83      	lsrs	r3, r0, #10
    2a32:	428b      	cmp	r3, r1
    2a34:	d301      	bcc.n	2a3a <__udivsi3+0x82>
    2a36:	028b      	lsls	r3, r1, #10
    2a38:	1ac0      	subs	r0, r0, r3
    2a3a:	4152      	adcs	r2, r2
    2a3c:	0a43      	lsrs	r3, r0, #9
    2a3e:	428b      	cmp	r3, r1
    2a40:	d301      	bcc.n	2a46 <__udivsi3+0x8e>
    2a42:	024b      	lsls	r3, r1, #9
    2a44:	1ac0      	subs	r0, r0, r3
    2a46:	4152      	adcs	r2, r2
    2a48:	0a03      	lsrs	r3, r0, #8
    2a4a:	428b      	cmp	r3, r1
    2a4c:	d301      	bcc.n	2a52 <__udivsi3+0x9a>
    2a4e:	020b      	lsls	r3, r1, #8
    2a50:	1ac0      	subs	r0, r0, r3
    2a52:	4152      	adcs	r2, r2
    2a54:	d2cd      	bcs.n	29f2 <__udivsi3+0x3a>
    2a56:	09c3      	lsrs	r3, r0, #7
    2a58:	428b      	cmp	r3, r1
    2a5a:	d301      	bcc.n	2a60 <__udivsi3+0xa8>
    2a5c:	01cb      	lsls	r3, r1, #7
    2a5e:	1ac0      	subs	r0, r0, r3
    2a60:	4152      	adcs	r2, r2
    2a62:	0983      	lsrs	r3, r0, #6
    2a64:	428b      	cmp	r3, r1
    2a66:	d301      	bcc.n	2a6c <__udivsi3+0xb4>
    2a68:	018b      	lsls	r3, r1, #6
    2a6a:	1ac0      	subs	r0, r0, r3
    2a6c:	4152      	adcs	r2, r2
    2a6e:	0943      	lsrs	r3, r0, #5
    2a70:	428b      	cmp	r3, r1
    2a72:	d301      	bcc.n	2a78 <__udivsi3+0xc0>
    2a74:	014b      	lsls	r3, r1, #5
    2a76:	1ac0      	subs	r0, r0, r3
    2a78:	4152      	adcs	r2, r2
    2a7a:	0903      	lsrs	r3, r0, #4
    2a7c:	428b      	cmp	r3, r1
    2a7e:	d301      	bcc.n	2a84 <__udivsi3+0xcc>
    2a80:	010b      	lsls	r3, r1, #4
    2a82:	1ac0      	subs	r0, r0, r3
    2a84:	4152      	adcs	r2, r2
    2a86:	08c3      	lsrs	r3, r0, #3
    2a88:	428b      	cmp	r3, r1
    2a8a:	d301      	bcc.n	2a90 <__udivsi3+0xd8>
    2a8c:	00cb      	lsls	r3, r1, #3
    2a8e:	1ac0      	subs	r0, r0, r3
    2a90:	4152      	adcs	r2, r2
    2a92:	0883      	lsrs	r3, r0, #2
    2a94:	428b      	cmp	r3, r1
    2a96:	d301      	bcc.n	2a9c <__udivsi3+0xe4>
    2a98:	008b      	lsls	r3, r1, #2
    2a9a:	1ac0      	subs	r0, r0, r3
    2a9c:	4152      	adcs	r2, r2
    2a9e:	0843      	lsrs	r3, r0, #1
    2aa0:	428b      	cmp	r3, r1
    2aa2:	d301      	bcc.n	2aa8 <__udivsi3+0xf0>
    2aa4:	004b      	lsls	r3, r1, #1
    2aa6:	1ac0      	subs	r0, r0, r3
    2aa8:	4152      	adcs	r2, r2
    2aaa:	1a41      	subs	r1, r0, r1
    2aac:	d200      	bcs.n	2ab0 <__udivsi3+0xf8>
    2aae:	4601      	mov	r1, r0
    2ab0:	4152      	adcs	r2, r2
    2ab2:	4610      	mov	r0, r2
    2ab4:	4770      	bx	lr
    2ab6:	e7ff      	b.n	2ab8 <__udivsi3+0x100>
    2ab8:	b501      	push	{r0, lr}
    2aba:	2000      	movs	r0, #0
    2abc:	f000 f806 	bl	2acc <__aeabi_idiv0>
    2ac0:	bd02      	pop	{r1, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)

00002ac4 <__aeabi_uidivmod>:
    2ac4:	2900      	cmp	r1, #0
    2ac6:	d0f7      	beq.n	2ab8 <__udivsi3+0x100>
    2ac8:	e776      	b.n	29b8 <__udivsi3>
    2aca:	4770      	bx	lr

00002acc <__aeabi_idiv0>:
    2acc:	4770      	bx	lr
    2ace:	46c0      	nop			; (mov r8, r8)

00002ad0 <__libc_init_array>:
    2ad0:	b570      	push	{r4, r5, r6, lr}
    2ad2:	2600      	movs	r6, #0
    2ad4:	4d0c      	ldr	r5, [pc, #48]	; (2b08 <__libc_init_array+0x38>)
    2ad6:	4c0d      	ldr	r4, [pc, #52]	; (2b0c <__libc_init_array+0x3c>)
    2ad8:	1b64      	subs	r4, r4, r5
    2ada:	10a4      	asrs	r4, r4, #2
    2adc:	42a6      	cmp	r6, r4
    2ade:	d109      	bne.n	2af4 <__libc_init_array+0x24>
    2ae0:	2600      	movs	r6, #0
    2ae2:	f000 f911 	bl	2d08 <_init>
    2ae6:	4d0a      	ldr	r5, [pc, #40]	; (2b10 <__libc_init_array+0x40>)
    2ae8:	4c0a      	ldr	r4, [pc, #40]	; (2b14 <__libc_init_array+0x44>)
    2aea:	1b64      	subs	r4, r4, r5
    2aec:	10a4      	asrs	r4, r4, #2
    2aee:	42a6      	cmp	r6, r4
    2af0:	d105      	bne.n	2afe <__libc_init_array+0x2e>
    2af2:	bd70      	pop	{r4, r5, r6, pc}
    2af4:	00b3      	lsls	r3, r6, #2
    2af6:	58eb      	ldr	r3, [r5, r3]
    2af8:	4798      	blx	r3
    2afa:	3601      	adds	r6, #1
    2afc:	e7ee      	b.n	2adc <__libc_init_array+0xc>
    2afe:	00b3      	lsls	r3, r6, #2
    2b00:	58eb      	ldr	r3, [r5, r3]
    2b02:	4798      	blx	r3
    2b04:	3601      	adds	r6, #1
    2b06:	e7f2      	b.n	2aee <__libc_init_array+0x1e>
    2b08:	2000007c 	.word	0x2000007c
    2b0c:	2000007c 	.word	0x2000007c
    2b10:	2000007c 	.word	0x2000007c
    2b14:	20000090 	.word	0x20000090

00002b18 <malloc>:
    2b18:	b510      	push	{r4, lr}
    2b1a:	4b03      	ldr	r3, [pc, #12]	; (2b28 <malloc+0x10>)
    2b1c:	0001      	movs	r1, r0
    2b1e:	6818      	ldr	r0, [r3, #0]
    2b20:	f000 f86a 	bl	2bf8 <_malloc_r>
    2b24:	bd10      	pop	{r4, pc}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	20000018 	.word	0x20000018

00002b2c <free>:
    2b2c:	b510      	push	{r4, lr}
    2b2e:	4b03      	ldr	r3, [pc, #12]	; (2b3c <free+0x10>)
    2b30:	0001      	movs	r1, r0
    2b32:	6818      	ldr	r0, [r3, #0]
    2b34:	f000 f816 	bl	2b64 <_free_r>
    2b38:	bd10      	pop	{r4, pc}
    2b3a:	46c0      	nop			; (mov r8, r8)
    2b3c:	20000018 	.word	0x20000018

00002b40 <memcpy>:
    2b40:	2300      	movs	r3, #0
    2b42:	b510      	push	{r4, lr}
    2b44:	429a      	cmp	r2, r3
    2b46:	d100      	bne.n	2b4a <memcpy+0xa>
    2b48:	bd10      	pop	{r4, pc}
    2b4a:	5ccc      	ldrb	r4, [r1, r3]
    2b4c:	54c4      	strb	r4, [r0, r3]
    2b4e:	3301      	adds	r3, #1
    2b50:	e7f8      	b.n	2b44 <memcpy+0x4>

00002b52 <memset>:
    2b52:	0003      	movs	r3, r0
    2b54:	1882      	adds	r2, r0, r2
    2b56:	4293      	cmp	r3, r2
    2b58:	d100      	bne.n	2b5c <memset+0xa>
    2b5a:	4770      	bx	lr
    2b5c:	7019      	strb	r1, [r3, #0]
    2b5e:	3301      	adds	r3, #1
    2b60:	e7f9      	b.n	2b56 <memset+0x4>
	...

00002b64 <_free_r>:
    2b64:	b570      	push	{r4, r5, r6, lr}
    2b66:	0005      	movs	r5, r0
    2b68:	2900      	cmp	r1, #0
    2b6a:	d010      	beq.n	2b8e <_free_r+0x2a>
    2b6c:	1f0c      	subs	r4, r1, #4
    2b6e:	6823      	ldr	r3, [r4, #0]
    2b70:	2b00      	cmp	r3, #0
    2b72:	da00      	bge.n	2b76 <_free_r+0x12>
    2b74:	18e4      	adds	r4, r4, r3
    2b76:	0028      	movs	r0, r5
    2b78:	f000 f8b5 	bl	2ce6 <__malloc_lock>
    2b7c:	4a1d      	ldr	r2, [pc, #116]	; (2bf4 <_free_r+0x90>)
    2b7e:	6813      	ldr	r3, [r2, #0]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d105      	bne.n	2b90 <_free_r+0x2c>
    2b84:	6063      	str	r3, [r4, #4]
    2b86:	6014      	str	r4, [r2, #0]
    2b88:	0028      	movs	r0, r5
    2b8a:	f000 f8ad 	bl	2ce8 <__malloc_unlock>
    2b8e:	bd70      	pop	{r4, r5, r6, pc}
    2b90:	42a3      	cmp	r3, r4
    2b92:	d909      	bls.n	2ba8 <_free_r+0x44>
    2b94:	6821      	ldr	r1, [r4, #0]
    2b96:	1860      	adds	r0, r4, r1
    2b98:	4283      	cmp	r3, r0
    2b9a:	d1f3      	bne.n	2b84 <_free_r+0x20>
    2b9c:	6818      	ldr	r0, [r3, #0]
    2b9e:	685b      	ldr	r3, [r3, #4]
    2ba0:	1841      	adds	r1, r0, r1
    2ba2:	6021      	str	r1, [r4, #0]
    2ba4:	e7ee      	b.n	2b84 <_free_r+0x20>
    2ba6:	0013      	movs	r3, r2
    2ba8:	685a      	ldr	r2, [r3, #4]
    2baa:	2a00      	cmp	r2, #0
    2bac:	d001      	beq.n	2bb2 <_free_r+0x4e>
    2bae:	42a2      	cmp	r2, r4
    2bb0:	d9f9      	bls.n	2ba6 <_free_r+0x42>
    2bb2:	6819      	ldr	r1, [r3, #0]
    2bb4:	1858      	adds	r0, r3, r1
    2bb6:	42a0      	cmp	r0, r4
    2bb8:	d10b      	bne.n	2bd2 <_free_r+0x6e>
    2bba:	6820      	ldr	r0, [r4, #0]
    2bbc:	1809      	adds	r1, r1, r0
    2bbe:	1858      	adds	r0, r3, r1
    2bc0:	6019      	str	r1, [r3, #0]
    2bc2:	4282      	cmp	r2, r0
    2bc4:	d1e0      	bne.n	2b88 <_free_r+0x24>
    2bc6:	6810      	ldr	r0, [r2, #0]
    2bc8:	6852      	ldr	r2, [r2, #4]
    2bca:	1841      	adds	r1, r0, r1
    2bcc:	6019      	str	r1, [r3, #0]
    2bce:	605a      	str	r2, [r3, #4]
    2bd0:	e7da      	b.n	2b88 <_free_r+0x24>
    2bd2:	42a0      	cmp	r0, r4
    2bd4:	d902      	bls.n	2bdc <_free_r+0x78>
    2bd6:	230c      	movs	r3, #12
    2bd8:	602b      	str	r3, [r5, #0]
    2bda:	e7d5      	b.n	2b88 <_free_r+0x24>
    2bdc:	6821      	ldr	r1, [r4, #0]
    2bde:	1860      	adds	r0, r4, r1
    2be0:	4282      	cmp	r2, r0
    2be2:	d103      	bne.n	2bec <_free_r+0x88>
    2be4:	6810      	ldr	r0, [r2, #0]
    2be6:	6852      	ldr	r2, [r2, #4]
    2be8:	1841      	adds	r1, r0, r1
    2bea:	6021      	str	r1, [r4, #0]
    2bec:	6062      	str	r2, [r4, #4]
    2bee:	605c      	str	r4, [r3, #4]
    2bf0:	e7ca      	b.n	2b88 <_free_r+0x24>
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	20000db0 	.word	0x20000db0

00002bf8 <_malloc_r>:
    2bf8:	2303      	movs	r3, #3
    2bfa:	b570      	push	{r4, r5, r6, lr}
    2bfc:	1ccd      	adds	r5, r1, #3
    2bfe:	439d      	bics	r5, r3
    2c00:	3508      	adds	r5, #8
    2c02:	0006      	movs	r6, r0
    2c04:	2d0c      	cmp	r5, #12
    2c06:	d21e      	bcs.n	2c46 <_malloc_r+0x4e>
    2c08:	250c      	movs	r5, #12
    2c0a:	42a9      	cmp	r1, r5
    2c0c:	d81d      	bhi.n	2c4a <_malloc_r+0x52>
    2c0e:	0030      	movs	r0, r6
    2c10:	f000 f869 	bl	2ce6 <__malloc_lock>
    2c14:	4a25      	ldr	r2, [pc, #148]	; (2cac <_malloc_r+0xb4>)
    2c16:	6814      	ldr	r4, [r2, #0]
    2c18:	0021      	movs	r1, r4
    2c1a:	2900      	cmp	r1, #0
    2c1c:	d119      	bne.n	2c52 <_malloc_r+0x5a>
    2c1e:	4c24      	ldr	r4, [pc, #144]	; (2cb0 <_malloc_r+0xb8>)
    2c20:	6823      	ldr	r3, [r4, #0]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d103      	bne.n	2c2e <_malloc_r+0x36>
    2c26:	0030      	movs	r0, r6
    2c28:	f000 f844 	bl	2cb4 <_sbrk_r>
    2c2c:	6020      	str	r0, [r4, #0]
    2c2e:	0029      	movs	r1, r5
    2c30:	0030      	movs	r0, r6
    2c32:	f000 f83f 	bl	2cb4 <_sbrk_r>
    2c36:	1c43      	adds	r3, r0, #1
    2c38:	d12c      	bne.n	2c94 <_malloc_r+0x9c>
    2c3a:	230c      	movs	r3, #12
    2c3c:	0030      	movs	r0, r6
    2c3e:	6033      	str	r3, [r6, #0]
    2c40:	f000 f852 	bl	2ce8 <__malloc_unlock>
    2c44:	e003      	b.n	2c4e <_malloc_r+0x56>
    2c46:	2d00      	cmp	r5, #0
    2c48:	dadf      	bge.n	2c0a <_malloc_r+0x12>
    2c4a:	230c      	movs	r3, #12
    2c4c:	6033      	str	r3, [r6, #0]
    2c4e:	2000      	movs	r0, #0
    2c50:	bd70      	pop	{r4, r5, r6, pc}
    2c52:	680b      	ldr	r3, [r1, #0]
    2c54:	1b5b      	subs	r3, r3, r5
    2c56:	d41a      	bmi.n	2c8e <_malloc_r+0x96>
    2c58:	2b0b      	cmp	r3, #11
    2c5a:	d903      	bls.n	2c64 <_malloc_r+0x6c>
    2c5c:	600b      	str	r3, [r1, #0]
    2c5e:	18cc      	adds	r4, r1, r3
    2c60:	6025      	str	r5, [r4, #0]
    2c62:	e003      	b.n	2c6c <_malloc_r+0x74>
    2c64:	428c      	cmp	r4, r1
    2c66:	d10e      	bne.n	2c86 <_malloc_r+0x8e>
    2c68:	6863      	ldr	r3, [r4, #4]
    2c6a:	6013      	str	r3, [r2, #0]
    2c6c:	0030      	movs	r0, r6
    2c6e:	f000 f83b 	bl	2ce8 <__malloc_unlock>
    2c72:	0020      	movs	r0, r4
    2c74:	2207      	movs	r2, #7
    2c76:	300b      	adds	r0, #11
    2c78:	1d23      	adds	r3, r4, #4
    2c7a:	4390      	bics	r0, r2
    2c7c:	1ac3      	subs	r3, r0, r3
    2c7e:	d0e7      	beq.n	2c50 <_malloc_r+0x58>
    2c80:	425a      	negs	r2, r3
    2c82:	50e2      	str	r2, [r4, r3]
    2c84:	e7e4      	b.n	2c50 <_malloc_r+0x58>
    2c86:	684b      	ldr	r3, [r1, #4]
    2c88:	6063      	str	r3, [r4, #4]
    2c8a:	000c      	movs	r4, r1
    2c8c:	e7ee      	b.n	2c6c <_malloc_r+0x74>
    2c8e:	000c      	movs	r4, r1
    2c90:	6849      	ldr	r1, [r1, #4]
    2c92:	e7c2      	b.n	2c1a <_malloc_r+0x22>
    2c94:	2303      	movs	r3, #3
    2c96:	1cc4      	adds	r4, r0, #3
    2c98:	439c      	bics	r4, r3
    2c9a:	42a0      	cmp	r0, r4
    2c9c:	d0e0      	beq.n	2c60 <_malloc_r+0x68>
    2c9e:	1a21      	subs	r1, r4, r0
    2ca0:	0030      	movs	r0, r6
    2ca2:	f000 f807 	bl	2cb4 <_sbrk_r>
    2ca6:	1c43      	adds	r3, r0, #1
    2ca8:	d1da      	bne.n	2c60 <_malloc_r+0x68>
    2caa:	e7c6      	b.n	2c3a <_malloc_r+0x42>
    2cac:	20000db0 	.word	0x20000db0
    2cb0:	20000db4 	.word	0x20000db4

00002cb4 <_sbrk_r>:
    2cb4:	2300      	movs	r3, #0
    2cb6:	b570      	push	{r4, r5, r6, lr}
    2cb8:	4c06      	ldr	r4, [pc, #24]	; (2cd4 <_sbrk_r+0x20>)
    2cba:	0005      	movs	r5, r0
    2cbc:	0008      	movs	r0, r1
    2cbe:	6023      	str	r3, [r4, #0]
    2cc0:	f000 f814 	bl	2cec <_sbrk>
    2cc4:	1c43      	adds	r3, r0, #1
    2cc6:	d103      	bne.n	2cd0 <_sbrk_r+0x1c>
    2cc8:	6823      	ldr	r3, [r4, #0]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d000      	beq.n	2cd0 <_sbrk_r+0x1c>
    2cce:	602b      	str	r3, [r5, #0]
    2cd0:	bd70      	pop	{r4, r5, r6, pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	20000dbc 	.word	0x20000dbc

00002cd8 <strlen>:
    2cd8:	2300      	movs	r3, #0
    2cda:	5cc2      	ldrb	r2, [r0, r3]
    2cdc:	3301      	adds	r3, #1
    2cde:	2a00      	cmp	r2, #0
    2ce0:	d1fb      	bne.n	2cda <strlen+0x2>
    2ce2:	1e58      	subs	r0, r3, #1
    2ce4:	4770      	bx	lr

00002ce6 <__malloc_lock>:
    2ce6:	4770      	bx	lr

00002ce8 <__malloc_unlock>:
    2ce8:	4770      	bx	lr
	...

00002cec <_sbrk>:
    2cec:	4a04      	ldr	r2, [pc, #16]	; (2d00 <_sbrk+0x14>)
    2cee:	6813      	ldr	r3, [r2, #0]
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d003      	beq.n	2cfc <_sbrk+0x10>
    2cf4:	1818      	adds	r0, r3, r0
    2cf6:	6010      	str	r0, [r2, #0]
    2cf8:	0018      	movs	r0, r3
    2cfa:	4770      	bx	lr
    2cfc:	4b01      	ldr	r3, [pc, #4]	; (2d04 <_sbrk+0x18>)
    2cfe:	e7f9      	b.n	2cf4 <_sbrk+0x8>
    2d00:	20000db8 	.word	0x20000db8
    2d04:	20000dc0 	.word	0x20000dc0

00002d08 <_init>:
    2d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d0e:	bc08      	pop	{r3}
    2d10:	469e      	mov	lr, r3
    2d12:	4770      	bx	lr

00002d14 <_fini>:
    2d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d1a:	bc08      	pop	{r3}
    2d1c:	469e      	mov	lr, r3
    2d1e:	4770      	bx	lr
    2d20:	73692078 	.word	0x73692078
    2d24:	00000020 	.word	0x00000020

00002d28 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    2d30:	00000679 0000092f 00000917 000008f5     y.../...........
    2d40:	000004dd 000004df 000005cd              ............

00002d4c <_ZL14STRING_PRODUCT>:
    2d4c:	75647241 206f6e69 6f72655a 03040000              Arduino Zero..

00002d5a <_ZL15STRING_LANGUAGE>:
    2d5a:	04090304                                ....

00002d5e <_ZL19STRING_MANUFACTURER>:
    2d5e:	75647241 206f6e69 00434c4c              Arduino LLC.

00002d6a <_ZL21USB_DeviceDescriptorB>:
    2d6a:	02000112 400102ef 804d2341 02010100     .......@A#M.....
    2d7a:	00000103                                         ..

00002d7c <_ZTV7TwoWire>:
	...
    2d84:	00001935 00001811 0000180d 00001835     5...........5...
    2d94:	00001851 000019f9 00001837              Q.......7...

00002da0 <g_APinDescription>:
    2da0:	00000000 0000000b 00000002 00000004     ................
    2db0:	ffff00ff 000bffff 00000000 0000000a     ................
    2dc0:	00000002 00000004 ffff00ff 000affff     ................
    2dd0:	00000000 0000000e 00000008 00000004     ................
    2de0:	ffff00ff 000effff 00000000 00000009     ................
    2df0:	00000004 0000001c 000100ff 00090001     ................
    2e00:	00000000 00000008 00000004 0000001c     ................
    2e10:	000000ff 00100000 00000000 0000000f     ................
    2e20:	00000004 0000001c 030100ff 000f0301     ................
    2e30:	00000000 00000014 00000005 0000002c     ............,...
    2e40:	000200ff 00040002 00000000 00000015     ................
    2e50:	00000005 0000002c 000300ff 00050003     ....,...........
    2e60:	00000000 00000006 00000004 0000001c     ................
    2e70:	010000ff 00060100 00000000 00000007     ................
    2e80:	00000004 0000001c 010100ff 00070101     ................
    2e90:	00000000 00000012 00000004 0000001c     ................
    2ea0:	030000ff 00020300 00000000 00000010     ................
    2eb0:	00000004 0000001c 020000ff 00000200     ................
    2ec0:	00000000 00000013 00000005 0000002c     ............,...
    2ed0:	000300ff 00030003 00000000 00000011     ................
    2ee0:	00000004 0000001c 020100ff 00010201     ................
    2ef0:	00000000 00000002 00000001 00000002     ................
    2f00:	ffff0000 0002ffff 00000001 00000008     ................
    2f10:	00000001 00000018 04000002 00080400     ................
    2f20:	00000001 00000009 00000001 00000018     ................
    2f30:	04010003 00090401 00000000 00000004     ................
    2f40:	00000001 00000000 ffff0004 0004ffff     ................
    2f50:	00000000 00000005 00000001 00000000     ................
    2f60:	ffff0005 0005ffff 00000001 00000002     ................
    2f70:	00000001 00000000 ffff000a 0002ffff     ................
    2f80:	00000000 00000016 00000002 00000004     ................
    2f90:	ffff00ff 0006ffff 00000000 00000017     ................
    2fa0:	00000002 00000004 ffff00ff 0007ffff     ................
    2fb0:	00000000 0000000c 00000003 00000004     ................
    2fc0:	ffff00ff 000cffff 00000001 0000000a     ................
    2fd0:	00000003 00000004 ffff00ff 000affff     ................
    2fe0:	00000001 0000000b 00000003 00000004     ................
    2ff0:	ffff00ff 000bffff 00000001 00000003     ................
    3000:	0000000b 00000004 ffff00ff 00ffffff     ................
    3010:	00000000 0000001b 0000000b 00000004     ................
    3020:	ffff00ff 00ffffff 00000000 0000001c     ................
    3030:	00000006 00000000 ffff00ff 00ffffff     ................
    3040:	00000000 00000018 00000006 00000000     ................
    3050:	ffff00ff 00ffffff 00000000 00000019     ................
    3060:	00000006 00000000 ffff00ff 00ffffff     ................
    3070:	00000001 00000016 00000003 00000000     ................
    3080:	ffff00ff 00ffffff 00000001 00000017     ................
    3090:	00000003 00000000 ffff00ff 00ffffff     ................
    30a0:	00000000 00000016 00000002 00000000     ................
    30b0:	ffff00ff 00ffffff 00000000 00000017     ................
    30c0:	00000002 00000000 ffff00ff 00ffffff     ................
    30d0:	00000000 00000013 00000002 00000000     ................
    30e0:	ffff00ff 00ffffff 00000000 00000010     ................
    30f0:	00000002 00000000 ffff00ff 00ffffff     ................
    3100:	00000000 00000012 00000002 00000000     ................
    3110:	ffff00ff 00ffffff 00000000 00000011     ................
    3120:	00000002 00000000 ffff00ff 00ffffff     ................
    3130:	00000000 0000000d 00000004 0000000c     ................
    3140:	000100ff 000dffff 00000000 00000015     ................
    3150:	00000005 0000000c 000300ff 00ffffff     ................
    3160:	00000000 00000006 00000004 0000000c     ................
    3170:	010000ff 00ffffff 00000000 00000007     ................
    3180:	00000004 0000000c 010100ff 00ffffff     ................
    3190:	00000000 00000003 00000001 00000002     ................
    31a0:	ffff00ff 00ffffff 00000000 00000002     ................
    31b0:	00000001 00000002 ffff0014 0002ffff     ................
    31c0:	00000000 0000001e 00000004 00000006     ................
    31d0:	ffff00ff 000a0100 00000000 0000001f     ................
    31e0:	00000004 00000006 ffff00ff 000b0101     ................

000031f0 <_ZTV4Uart>:
	...
    31f8:	00002381 0000297d 000022a7 00002263     .#..})..."..c"..
    3208:	0000227d 00002435 00002045 00002035     }"..5$..E ..5 ..
    3218:	000020c9 0000205f 00002031              . .._ ..1 ..

00003224 <_ZTV7Serial_>:
	...
    322c:	00002525 00002765 00002521 00002749     %%..e'..!%..I'..
    323c:	00002729 000027a1 00002785 00002757     )'...'...'..W'..
    324c:	00002539 00002481 00002671 000024b9     9%...$..q&...$..
    325c:	0000250d fffffff0 00000000 00002719     .%...........'..
    326c:	00002661 00002485 00002511 000024fd     a&...$...%...$..

0000327c <__EH_FRAME_BEGIN__>:
    327c:	00000000                                ....
