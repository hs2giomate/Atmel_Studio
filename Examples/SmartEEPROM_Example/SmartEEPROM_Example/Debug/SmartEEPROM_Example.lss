
SmartEEPROM_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ea0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000023c  20000000  00002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002023c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002023c  2**0
                  CONTENTS
  4 .bss          000000b4  2000023c  000030dc  0002023c  2**2
                  ALLOC
  5 .stack        00010000  200002f0  00003190  0002023c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002026a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001c3b1  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a4c  00000000  00000000  0003c674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009339  00000000  00000000  0003f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000870  00000000  00000000  000483f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be0  00000000  00000000  00048c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032c5a  00000000  00000000  00049849  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010678  00000000  00000000  0007c4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00118437  00000000  00000000  0008cb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002184  00000000  00000000  001a4f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 02 01 20 e9 02 00 00 e5 02 00 00 7d 08 00 00     ... ........}...
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	e9 06 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000023c 	.word	0x2000023c
     280:	00000000 	.word	0x00000000
     284:	00002ea0 	.word	0x00002ea0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002ea0 	.word	0x00002ea0
     2c4:	20000240 	.word	0x20000240
     2c8:	00002ea0 	.word	0x00002ea0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000419 	.word	0x00000419
     2e0:	00000c01 	.word	0x00000c01

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00002ea0 	.word	0x00002ea0
     364:	2000023c 	.word	0x2000023c
     368:	200002f0 	.word	0x200002f0
     36c:	2000023c 	.word	0x2000023c
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00000f75 	.word	0x00000f75
     37c:	00000975 	.word	0x00000975

00000380 <TARGET_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <TARGET_IO_PORT_init+0x44>)
     382:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     392:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     396:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     39a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ae:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3be:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     3c2:	4770      	bx	lr
     3c4:	41008000 	.word	0x41008000

000003c8 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3c8:	4b06      	ldr	r3, [pc, #24]	; (3e4 <TARGET_IO_CLOCK_init+0x1c>)
     3ca:	2240      	movs	r2, #64	; 0x40
     3cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     3d0:	2243      	movs	r2, #67	; 0x43
     3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3d6:	4a04      	ldr	r2, [pc, #16]	; (3e8 <TARGET_IO_CLOCK_init+0x20>)
     3d8:	6993      	ldr	r3, [r2, #24]
     3da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     3de:	6193      	str	r3, [r2, #24]
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
     3e4:	40001c00 	.word	0x40001c00
     3e8:	40000800 	.word	0x40000800

000003ec <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     3ec:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <TARGET_IO_init+0x18>)
     3f0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM2, (void *)NULL);
     3f2:	2200      	movs	r2, #0
     3f4:	4904      	ldr	r1, [pc, #16]	; (408 <TARGET_IO_init+0x1c>)
     3f6:	4805      	ldr	r0, [pc, #20]	; (40c <TARGET_IO_init+0x20>)
     3f8:	4b05      	ldr	r3, [pc, #20]	; (410 <TARGET_IO_init+0x24>)
     3fa:	4798      	blx	r3
	TARGET_IO_PORT_init();
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <TARGET_IO_init+0x28>)
     3fe:	4798      	blx	r3
     400:	bd08      	pop	{r3, pc}
     402:	bf00      	nop
     404:	000003c9 	.word	0x000003c9
     408:	41012000 	.word	0x41012000
     40c:	200002cc 	.word	0x200002cc
     410:	00000591 	.word	0x00000591
     414:	00000381 	.word	0x00000381

00000418 <system_init>:
}

void system_init(void)
{
     418:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     41a:	4b0c      	ldr	r3, [pc, #48]	; (44c <system_init+0x34>)
     41c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     41e:	4b0c      	ldr	r3, [pc, #48]	; (450 <system_init+0x38>)
     420:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     424:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     430:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     434:	4a07      	ldr	r2, [pc, #28]	; (454 <system_init+0x3c>)
     436:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     43a:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     442:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	TARGET_IO_init();
     446:	4b04      	ldr	r3, [pc, #16]	; (458 <system_init+0x40>)
     448:	4798      	blx	r3
     44a:	bd08      	pop	{r3, pc}
     44c:	00000649 	.word	0x00000649
     450:	41008000 	.word	0x41008000
     454:	c0000004 	.word	0xc0000004
     458:	000003ed 	.word	0x000003ed

0000045c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     45c:	b570      	push	{r4, r5, r6, lr}
     45e:	460d      	mov	r5, r1
     460:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     462:	4604      	mov	r4, r0
     464:	b160      	cbz	r0, 480 <io_write+0x24>
     466:	1c08      	adds	r0, r1, #0
     468:	bf18      	it	ne
     46a:	2001      	movne	r0, #1
     46c:	2234      	movs	r2, #52	; 0x34
     46e:	4905      	ldr	r1, [pc, #20]	; (484 <io_write+0x28>)
     470:	4b05      	ldr	r3, [pc, #20]	; (488 <io_write+0x2c>)
     472:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     474:	6823      	ldr	r3, [r4, #0]
     476:	4632      	mov	r2, r6
     478:	4629      	mov	r1, r5
     47a:	4620      	mov	r0, r4
     47c:	4798      	blx	r3
}
     47e:	bd70      	pop	{r4, r5, r6, pc}
     480:	2000      	movs	r0, #0
     482:	e7f3      	b.n	46c <io_write+0x10>
     484:	00002980 	.word	0x00002980
     488:	00000605 	.word	0x00000605

0000048c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     48c:	b570      	push	{r4, r5, r6, lr}
     48e:	460d      	mov	r5, r1
     490:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     492:	4604      	mov	r4, r0
     494:	b160      	cbz	r0, 4b0 <io_read+0x24>
     496:	1c08      	adds	r0, r1, #0
     498:	bf18      	it	ne
     49a:	2001      	movne	r0, #1
     49c:	223d      	movs	r2, #61	; 0x3d
     49e:	4905      	ldr	r1, [pc, #20]	; (4b4 <io_read+0x28>)
     4a0:	4b05      	ldr	r3, [pc, #20]	; (4b8 <io_read+0x2c>)
     4a2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4a4:	6863      	ldr	r3, [r4, #4]
     4a6:	4632      	mov	r2, r6
     4a8:	4629      	mov	r1, r5
     4aa:	4620      	mov	r0, r4
     4ac:	4798      	blx	r3
}
     4ae:	bd70      	pop	{r4, r5, r6, pc}
     4b0:	2000      	movs	r0, #0
     4b2:	e7f3      	b.n	49c <io_read+0x10>
     4b4:	00002980 	.word	0x00002980
     4b8:	00000605 	.word	0x00000605

000004bc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     4c0:	460f      	mov	r7, r1
     4c2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4c4:	4604      	mov	r4, r0
     4c6:	b328      	cbz	r0, 514 <usart_sync_write+0x58>
     4c8:	b331      	cbz	r1, 518 <usart_sync_write+0x5c>
     4ca:	1c10      	adds	r0, r2, #0
     4cc:	bf18      	it	ne
     4ce:	2001      	movne	r0, #1
     4d0:	22f1      	movs	r2, #241	; 0xf1
     4d2:	4912      	ldr	r1, [pc, #72]	; (51c <usart_sync_write+0x60>)
     4d4:	4b12      	ldr	r3, [pc, #72]	; (520 <usart_sync_write+0x64>)
     4d6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     4d8:	3408      	adds	r4, #8
     4da:	4d12      	ldr	r5, [pc, #72]	; (524 <usart_sync_write+0x68>)
     4dc:	4620      	mov	r0, r4
     4de:	47a8      	blx	r5
     4e0:	2800      	cmp	r0, #0
     4e2:	d0fb      	beq.n	4dc <usart_sync_write+0x20>
     4e4:	3f01      	subs	r7, #1
     4e6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4e8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 52c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     4ec:	4d0d      	ldr	r5, [pc, #52]	; (524 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4ee:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     4f2:	4620      	mov	r0, r4
     4f4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     4f6:	4620      	mov	r0, r4
     4f8:	47a8      	blx	r5
     4fa:	2800      	cmp	r0, #0
     4fc:	d0fb      	beq.n	4f6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     4fe:	3601      	adds	r6, #1
     500:	4546      	cmp	r6, r8
     502:	d3f4      	bcc.n	4ee <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     504:	4d08      	ldr	r5, [pc, #32]	; (528 <usart_sync_write+0x6c>)
     506:	4620      	mov	r0, r4
     508:	47a8      	blx	r5
     50a:	2800      	cmp	r0, #0
     50c:	d0fb      	beq.n	506 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     50e:	4630      	mov	r0, r6
     510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     514:	2000      	movs	r0, #0
     516:	e7db      	b.n	4d0 <usart_sync_write+0x14>
     518:	2000      	movs	r0, #0
     51a:	e7d9      	b.n	4d0 <usart_sync_write+0x14>
     51c:	00002994 	.word	0x00002994
     520:	00000605 	.word	0x00000605
     524:	0000085f 	.word	0x0000085f
     528:	00000869 	.word	0x00000869
     52c:	00000851 	.word	0x00000851

00000530 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     534:	460f      	mov	r7, r1
     536:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     538:	4604      	mov	r4, r0
     53a:	b1e0      	cbz	r0, 576 <usart_sync_read+0x46>
     53c:	b1e9      	cbz	r1, 57a <usart_sync_read+0x4a>
     53e:	1c10      	adds	r0, r2, #0
     540:	bf18      	it	ne
     542:	2001      	movne	r0, #1
     544:	f44f 7286 	mov.w	r2, #268	; 0x10c
     548:	490d      	ldr	r1, [pc, #52]	; (580 <usart_sync_read+0x50>)
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <usart_sync_read+0x54>)
     54c:	4798      	blx	r3
     54e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     550:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     552:	3408      	adds	r4, #8
     554:	4d0c      	ldr	r5, [pc, #48]	; (588 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     556:	f8df 9034 	ldr.w	r9, [pc, #52]	; 58c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     55a:	4620      	mov	r0, r4
     55c:	47a8      	blx	r5
     55e:	2800      	cmp	r0, #0
     560:	d0fb      	beq.n	55a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     562:	4620      	mov	r0, r4
     564:	47c8      	blx	r9
     566:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     56a:	3601      	adds	r6, #1
     56c:	4546      	cmp	r6, r8
     56e:	d3f4      	bcc.n	55a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     570:	4630      	mov	r0, r6
     572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     576:	2000      	movs	r0, #0
     578:	e7e4      	b.n	544 <usart_sync_read+0x14>
     57a:	2000      	movs	r0, #0
     57c:	e7e2      	b.n	544 <usart_sync_read+0x14>
     57e:	bf00      	nop
     580:	00002994 	.word	0x00002994
     584:	00000605 	.word	0x00000605
     588:	00000873 	.word	0x00000873
     58c:	00000857 	.word	0x00000857

00000590 <usart_sync_init>:
{
     590:	b538      	push	{r3, r4, r5, lr}
     592:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     594:	4604      	mov	r4, r0
     596:	b198      	cbz	r0, 5c0 <usart_sync_init+0x30>
     598:	1c08      	adds	r0, r1, #0
     59a:	bf18      	it	ne
     59c:	2001      	movne	r0, #1
     59e:	2234      	movs	r2, #52	; 0x34
     5a0:	4908      	ldr	r1, [pc, #32]	; (5c4 <usart_sync_init+0x34>)
     5a2:	4b09      	ldr	r3, [pc, #36]	; (5c8 <usart_sync_init+0x38>)
     5a4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5a6:	4629      	mov	r1, r5
     5a8:	f104 0008 	add.w	r0, r4, #8
     5ac:	4b07      	ldr	r3, [pc, #28]	; (5cc <usart_sync_init+0x3c>)
     5ae:	4798      	blx	r3
	if (init_status) {
     5b0:	4603      	mov	r3, r0
     5b2:	b918      	cbnz	r0, 5bc <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     5b4:	4a06      	ldr	r2, [pc, #24]	; (5d0 <usart_sync_init+0x40>)
     5b6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     5b8:	4a06      	ldr	r2, [pc, #24]	; (5d4 <usart_sync_init+0x44>)
     5ba:	6022      	str	r2, [r4, #0]
}
     5bc:	4618      	mov	r0, r3
     5be:	bd38      	pop	{r3, r4, r5, pc}
     5c0:	2000      	movs	r0, #0
     5c2:	e7ec      	b.n	59e <usart_sync_init+0xe>
     5c4:	00002994 	.word	0x00002994
     5c8:	00000605 	.word	0x00000605
     5cc:	00000811 	.word	0x00000811
     5d0:	00000531 	.word	0x00000531
     5d4:	000004bd 	.word	0x000004bd

000005d8 <usart_sync_enable>:
{
     5d8:	b510      	push	{r4, lr}
	ASSERT(descr);
     5da:	4604      	mov	r4, r0
     5dc:	2253      	movs	r2, #83	; 0x53
     5de:	4906      	ldr	r1, [pc, #24]	; (5f8 <usart_sync_enable+0x20>)
     5e0:	3000      	adds	r0, #0
     5e2:	bf18      	it	ne
     5e4:	2001      	movne	r0, #1
     5e6:	4b05      	ldr	r3, [pc, #20]	; (5fc <usart_sync_enable+0x24>)
     5e8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     5ea:	f104 0008 	add.w	r0, r4, #8
     5ee:	4b04      	ldr	r3, [pc, #16]	; (600 <usart_sync_enable+0x28>)
     5f0:	4798      	blx	r3
}
     5f2:	2000      	movs	r0, #0
     5f4:	bd10      	pop	{r4, pc}
     5f6:	bf00      	nop
     5f8:	00002994 	.word	0x00002994
     5fc:	00000605 	.word	0x00000605
     600:	0000083d 	.word	0x0000083d

00000604 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     604:	b900      	cbnz	r0, 608 <assert+0x4>
		__asm("BKPT #0");
     606:	be00      	bkpt	0x0000
     608:	4770      	bx	lr
	...

0000060c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     60c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     60e:	4a06      	ldr	r2, [pc, #24]	; (628 <_sbrk+0x1c>)
     610:	6812      	ldr	r2, [r2, #0]
     612:	b122      	cbz	r2, 61e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     614:	4a04      	ldr	r2, [pc, #16]	; (628 <_sbrk+0x1c>)
     616:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     618:	4403      	add	r3, r0
     61a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     61c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     61e:	4903      	ldr	r1, [pc, #12]	; (62c <_sbrk+0x20>)
     620:	4a01      	ldr	r2, [pc, #4]	; (628 <_sbrk+0x1c>)
     622:	6011      	str	r1, [r2, #0]
     624:	e7f6      	b.n	614 <_sbrk+0x8>
     626:	bf00      	nop
     628:	20000258 	.word	0x20000258
     62c:	200102f0 	.word	0x200102f0

00000630 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     630:	f04f 30ff 	mov.w	r0, #4294967295
     634:	4770      	bx	lr

00000636 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     63a:	604b      	str	r3, [r1, #4]

	return 0;
}
     63c:	2000      	movs	r0, #0
     63e:	4770      	bx	lr

00000640 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     640:	2001      	movs	r0, #1
     642:	4770      	bx	lr

00000644 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     644:	2000      	movs	r0, #0
     646:	4770      	bx	lr

00000648 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     648:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     64a:	4a08      	ldr	r2, [pc, #32]	; (66c <_init_chip+0x24>)
     64c:	8813      	ldrh	r3, [r2, #0]
     64e:	b29b      	uxth	r3, r3
     650:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     652:	4b07      	ldr	r3, [pc, #28]	; (670 <_init_chip+0x28>)
     654:	4798      	blx	r3
	_oscctrl_init_sources();
     656:	4b07      	ldr	r3, [pc, #28]	; (674 <_init_chip+0x2c>)
     658:	4798      	blx	r3
	_mclk_init();
     65a:	4b07      	ldr	r3, [pc, #28]	; (678 <_init_chip+0x30>)
     65c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     65e:	4b07      	ldr	r3, [pc, #28]	; (67c <_init_chip+0x34>)
     660:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     662:	f640 70ff 	movw	r0, #4095	; 0xfff
     666:	4b06      	ldr	r3, [pc, #24]	; (680 <_init_chip+0x38>)
     668:	4798      	blx	r3
     66a:	bd08      	pop	{r3, pc}
     66c:	41004000 	.word	0x41004000
     670:	000006b5 	.word	0x000006b5
     674:	000006c9 	.word	0x000006c9
     678:	000006a9 	.word	0x000006a9
     67c:	000006e5 	.word	0x000006e5
     680:	00000685 	.word	0x00000685

00000684 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     684:	f010 0f01 	tst.w	r0, #1
     688:	d008      	beq.n	69c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     68a:	4a05      	ldr	r2, [pc, #20]	; (6a0 <_gclk_init_generators_by_fref+0x1c>)
     68c:	4b05      	ldr	r3, [pc, #20]	; (6a4 <_gclk_init_generators_by_fref+0x20>)
     68e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     690:	4619      	mov	r1, r3
     692:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     696:	684b      	ldr	r3, [r1, #4]
     698:	4213      	tst	r3, r2
     69a:	d1fc      	bne.n	696 <_gclk_init_generators_by_fref+0x12>
     69c:	4770      	bx	lr
     69e:	bf00      	nop
     6a0:	00010101 	.word	0x00010101
     6a4:	40001c00 	.word	0x40001c00

000006a8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     6a8:	2201      	movs	r2, #1
     6aa:	4b01      	ldr	r3, [pc, #4]	; (6b0 <_mclk_init+0x8>)
     6ac:	715a      	strb	r2, [r3, #5]
     6ae:	4770      	bx	lr
     6b0:	40000800 	.word	0x40000800

000006b4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <_osc32kctrl_init_sources+0x10>)
     6b6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     6b8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     6bc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     6be:	2201      	movs	r2, #1
     6c0:	741a      	strb	r2, [r3, #16]
     6c2:	4770      	bx	lr
     6c4:	40001400 	.word	0x40001400

000006c8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     6c8:	4a04      	ldr	r2, [pc, #16]	; (6dc <_oscctrl_init_sources+0x14>)
     6ca:	4b05      	ldr	r3, [pc, #20]	; (6e0 <_oscctrl_init_sources+0x18>)
     6cc:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     6ce:	461a      	mov	r2, r3
     6d0:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     6d2:	f013 0f02 	tst.w	r3, #2
     6d6:	d0fb      	beq.n	6d0 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     6d8:	4770      	bx	lr
     6da:	bf00      	nop
     6dc:	03002606 	.word	0x03002606
     6e0:	40001000 	.word	0x40001000

000006e4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     6e4:	4770      	bx	lr
	...

000006e8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     6e8:	b500      	push	{lr}
     6ea:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <RAMECC_Handler+0x3c>)
     6ee:	789b      	ldrb	r3, [r3, #2]
     6f0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     6f2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     6f4:	9b01      	ldr	r3, [sp, #4]
     6f6:	f013 0f02 	tst.w	r3, #2
     6fa:	d006      	beq.n	70a <RAMECC_Handler+0x22>
     6fc:	4b0a      	ldr	r3, [pc, #40]	; (728 <RAMECC_Handler+0x40>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	b11b      	cbz	r3, 70a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     702:	4a08      	ldr	r2, [pc, #32]	; (724 <RAMECC_Handler+0x3c>)
     704:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     706:	4798      	blx	r3
     708:	e009      	b.n	71e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     70a:	9b01      	ldr	r3, [sp, #4]
     70c:	f013 0f01 	tst.w	r3, #1
     710:	d005      	beq.n	71e <RAMECC_Handler+0x36>
     712:	4b05      	ldr	r3, [pc, #20]	; (728 <RAMECC_Handler+0x40>)
     714:	685b      	ldr	r3, [r3, #4]
     716:	b113      	cbz	r3, 71e <RAMECC_Handler+0x36>
     718:	4a02      	ldr	r2, [pc, #8]	; (724 <RAMECC_Handler+0x3c>)
     71a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     71c:	4798      	blx	r3
	} else {
		return;
	}
}
     71e:	b003      	add	sp, #12
     720:	f85d fb04 	ldr.w	pc, [sp], #4
     724:	41020000 	.word	0x41020000
     728:	200002d8 	.word	0x200002d8

0000072c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     72c:	b470      	push	{r4, r5, r6}
     72e:	b089      	sub	sp, #36	; 0x24
     730:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     732:	466c      	mov	r4, sp
     734:	4d0d      	ldr	r5, [pc, #52]	; (76c <_sercom_get_hardware_index+0x40>)
     736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     73a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     73e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     742:	9b00      	ldr	r3, [sp, #0]
     744:	42b3      	cmp	r3, r6
     746:	d00d      	beq.n	764 <_sercom_get_hardware_index+0x38>
     748:	4631      	mov	r1, r6
     74a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     74c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     74e:	f853 2b04 	ldr.w	r2, [r3], #4
     752:	428a      	cmp	r2, r1
     754:	d007      	beq.n	766 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     756:	3001      	adds	r0, #1
     758:	2808      	cmp	r0, #8
     75a:	d1f8      	bne.n	74e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     75c:	2000      	movs	r0, #0
}
     75e:	b009      	add	sp, #36	; 0x24
     760:	bc70      	pop	{r4, r5, r6}
     762:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     764:	2000      	movs	r0, #0
			return i;
     766:	b2c0      	uxtb	r0, r0
     768:	e7f9      	b.n	75e <_sercom_get_hardware_index+0x32>
     76a:	bf00      	nop
     76c:	000029b0 	.word	0x000029b0

00000770 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     770:	b510      	push	{r4, lr}
     772:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     774:	4b21      	ldr	r3, [pc, #132]	; (7fc <_usart_init+0x8c>)
     776:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     778:	2802      	cmp	r0, #2
     77a:	d005      	beq.n	788 <_usart_init+0x18>
	ASSERT(false);
     77c:	f240 2247 	movw	r2, #583	; 0x247
     780:	491f      	ldr	r1, [pc, #124]	; (800 <_usart_init+0x90>)
     782:	2000      	movs	r0, #0
     784:	4b1f      	ldr	r3, [pc, #124]	; (804 <_usart_init+0x94>)
     786:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     788:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     78a:	f013 0f01 	tst.w	r3, #1
     78e:	d119      	bne.n	7c4 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     790:	69e3      	ldr	r3, [r4, #28]
     792:	f013 0f03 	tst.w	r3, #3
     796:	d1fb      	bne.n	790 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     798:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     79a:	f013 0f02 	tst.w	r3, #2
     79e:	d00b      	beq.n	7b8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     7a0:	6823      	ldr	r3, [r4, #0]
     7a2:	f023 0302 	bic.w	r3, r3, #2
     7a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7a8:	69e3      	ldr	r3, [r4, #28]
     7aa:	f013 0f03 	tst.w	r3, #3
     7ae:	d1fb      	bne.n	7a8 <_usart_init+0x38>
     7b0:	69e3      	ldr	r3, [r4, #28]
     7b2:	f013 0f02 	tst.w	r3, #2
     7b6:	d1fb      	bne.n	7b0 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     7b8:	2305      	movs	r3, #5
     7ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7bc:	69e3      	ldr	r3, [r4, #28]
     7be:	f013 0f03 	tst.w	r3, #3
     7c2:	d1fb      	bne.n	7bc <_usart_init+0x4c>
     7c4:	69e3      	ldr	r3, [r4, #28]
     7c6:	f013 0f01 	tst.w	r3, #1
     7ca:	d1fb      	bne.n	7c4 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     7cc:	4b0e      	ldr	r3, [pc, #56]	; (808 <_usart_init+0x98>)
     7ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7d0:	69e3      	ldr	r3, [r4, #28]
     7d2:	f013 0f03 	tst.w	r3, #3
     7d6:	d1fb      	bne.n	7d0 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     7d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     7dc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7de:	69e3      	ldr	r3, [r4, #28]
     7e0:	f013 0f1f 	tst.w	r3, #31
     7e4:	d1fb      	bne.n	7de <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     7e6:	4b09      	ldr	r3, [pc, #36]	; (80c <_usart_init+0x9c>)
     7e8:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     7ea:	f64d 03ad 	movw	r3, #55469	; 0xd8ad
     7ee:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     7f0:	2000      	movs	r0, #0
     7f2:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     7f4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     7f8:	bd10      	pop	{r4, pc}
     7fa:	bf00      	nop
     7fc:	0000072d 	.word	0x0000072d
     800:	000029e8 	.word	0x000029e8
     804:	00000605 	.word	0x00000605
     808:	40100004 	.word	0x40100004
     80c:	00700002 	.word	0x00700002

00000810 <_usart_sync_init>:
{
     810:	b538      	push	{r3, r4, r5, lr}
     812:	460c      	mov	r4, r1
	ASSERT(device);
     814:	4605      	mov	r5, r0
     816:	22bb      	movs	r2, #187	; 0xbb
     818:	4905      	ldr	r1, [pc, #20]	; (830 <_usart_sync_init+0x20>)
     81a:	3000      	adds	r0, #0
     81c:	bf18      	it	ne
     81e:	2001      	movne	r0, #1
     820:	4b04      	ldr	r3, [pc, #16]	; (834 <_usart_sync_init+0x24>)
     822:	4798      	blx	r3
	device->hw = hw;
     824:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     826:	4620      	mov	r0, r4
     828:	4b03      	ldr	r3, [pc, #12]	; (838 <_usart_sync_init+0x28>)
     82a:	4798      	blx	r3
}
     82c:	bd38      	pop	{r3, r4, r5, pc}
     82e:	bf00      	nop
     830:	000029e8 	.word	0x000029e8
     834:	00000605 	.word	0x00000605
     838:	00000771 	.word	0x00000771

0000083c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     83c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     83e:	6813      	ldr	r3, [r2, #0]
     840:	f043 0302 	orr.w	r3, r3, #2
     844:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     846:	69d3      	ldr	r3, [r2, #28]
     848:	f013 0f03 	tst.w	r3, #3
     84c:	d1fb      	bne.n	846 <_usart_sync_enable+0xa>
}
     84e:	4770      	bx	lr

00000850 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     850:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     852:	6299      	str	r1, [r3, #40]	; 0x28
     854:	4770      	bx	lr

00000856 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     856:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     858:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     85a:	b2c0      	uxtb	r0, r0
     85c:	4770      	bx	lr

0000085e <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     85e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     860:	7e18      	ldrb	r0, [r3, #24]
}
     862:	f000 0001 	and.w	r0, r0, #1
     866:	4770      	bx	lr

00000868 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     868:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     86a:	7e18      	ldrb	r0, [r3, #24]
}
     86c:	f3c0 0040 	ubfx	r0, r0, #1, #1
     870:	4770      	bx	lr

00000872 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     872:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     874:	7e18      	ldrb	r0, [r3, #24]
}
     876:	f3c0 0080 	ubfx	r0, r0, #2, #1
     87a:	4770      	bx	lr

0000087c <HardFault_Handler>:
 *
 * Used in this example to identify when a location outside the reserved area
 * for SmartEEPROM is accessed.
 */
void HardFault_Handler(void)
{
     87c:	b508      	push	{r3, lr}
	printf("\r\n!!!!!!!! In HardFault_Handler !!!!!!!!\r\n");
     87e:	4802      	ldr	r0, [pc, #8]	; (888 <HardFault_Handler+0xc>)
     880:	4b02      	ldr	r3, [pc, #8]	; (88c <HardFault_Handler+0x10>)
     882:	4798      	blx	r3
     884:	e7fe      	b.n	884 <HardFault_Handler+0x8>
     886:	bf00      	nop
     888:	00002a04 	.word	0x00002a04
     88c:	0000120d 	.word	0x0000120d

00000890 <invert_seep_byte>:
 * \brief Invert a byte in SmartEEPROM
 *
 * To invert the data at the given index in SmartEEPROM
 */
void invert_seep_byte(uint8_t index)
{
     890:	b570      	push	{r4, r5, r6, lr}
     892:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     894:	4a0b      	ldr	r2, [pc, #44]	; (8c4 <invert_seep_byte+0x34>)
     896:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL))
     898:	f013 0f04 	tst.w	r3, #4
     89c:	d1fb      	bne.n	896 <invert_seep_byte+0x6>
		;

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
     89e:	4e0a      	ldr	r6, [pc, #40]	; (8c8 <invert_seep_byte+0x38>)
     8a0:	6833      	ldr	r3, [r6, #0]
     8a2:	5d1a      	ldrb	r2, [r3, r4]
     8a4:	4d09      	ldr	r5, [pc, #36]	; (8cc <invert_seep_byte+0x3c>)
     8a6:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
     8a8:	4621      	mov	r1, r4
     8aa:	4809      	ldr	r0, [pc, #36]	; (8d0 <invert_seep_byte+0x40>)
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <invert_seep_byte+0x44>)
     8ae:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
     8b0:	6832      	ldr	r2, [r6, #0]
     8b2:	782b      	ldrb	r3, [r5, #0]
     8b4:	fab3 f383 	clz	r3, r3
     8b8:	095b      	lsrs	r3, r3, #5
     8ba:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
     8bc:	4806      	ldr	r0, [pc, #24]	; (8d8 <invert_seep_byte+0x48>)
     8be:	4b07      	ldr	r3, [pc, #28]	; (8dc <invert_seep_byte+0x4c>)
     8c0:	4798      	blx	r3
     8c2:	bd70      	pop	{r4, r5, r6, pc}
     8c4:	41004000 	.word	0x41004000
     8c8:	20000000 	.word	0x20000000
     8cc:	200002e8 	.word	0x200002e8
     8d0:	00002a30 	.word	0x00002a30
     8d4:	00001125 	.word	0x00001125
     8d8:	00002a54 	.word	0x00002a54
     8dc:	0000120d 	.word	0x0000120d

000008e0 <verify_seep_signature>:
 * \brief Verify the custom data in SmartEEPROM
 *
 * Verify the custom data at initial 4 bytes of SmartEEPROM
 */
int8_t verify_seep_signature(void)
{
     8e0:	b508      	push	{r3, lr}
     8e2:	4a0b      	ldr	r2, [pc, #44]	; (910 <verify_seep_signature+0x30>)
     8e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL))
     8e6:	f013 0f04 	tst.w	r3, #4
     8ea:	d1fb      	bne.n	8e4 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
     8ec:	4b08      	ldr	r3, [pc, #32]	; (910 <verify_seep_signature+0x30>)
     8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		;

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
     8f0:	f413 6f70 	tst.w	r3, #3840	; 0xf00
     8f4:	d008      	beq.n	908 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1)
			;
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
     8f6:	4b07      	ldr	r3, [pc, #28]	; (914 <verify_seep_signature+0x34>)
     8f8:	685b      	ldr	r3, [r3, #4]
     8fa:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
     8fc:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
     900:	bf18      	it	ne
     902:	f04f 30ff 	movne.w	r0, #4294967295
     906:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
     908:	4803      	ldr	r0, [pc, #12]	; (918 <verify_seep_signature+0x38>)
     90a:	4b04      	ldr	r3, [pc, #16]	; (91c <verify_seep_signature+0x3c>)
     90c:	4798      	blx	r3
     90e:	e7fe      	b.n	90e <verify_seep_signature+0x2e>
     910:	41004000 	.word	0x41004000
     914:	20000000 	.word	0x20000000
     918:	00002a88 	.word	0x00002a88
     91c:	0000120d 	.word	0x0000120d

00000920 <print_hex_array>:
 * \brief Print a buffer as hex values
 *
 * Print a given array as a hex values
 */
void print_hex_array(void *mem, uint16_t len)
{
     920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
     924:	b1c9      	cbz	r1, 95a <print_hex_array+0x3a>
     926:	460e      	mov	r6, r1
     928:	1e45      	subs	r5, r0, #1
     92a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
     92c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 970 <print_hex_array+0x50>
     930:	4f0c      	ldr	r7, [pc, #48]	; (964 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
     932:	f8df 9038 	ldr.w	r9, [pc, #56]	; 96c <print_hex_array+0x4c>
     936:	e003      	b.n	940 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
     938:	3401      	adds	r4, #1
     93a:	b2a4      	uxth	r4, r4
     93c:	42a6      	cmp	r6, r4
     93e:	d00c      	beq.n	95a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
     940:	f815 1f01 	ldrb.w	r1, [r5, #1]!
     944:	4640      	mov	r0, r8
     946:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
     948:	f014 0f07 	tst.w	r4, #7
     94c:	d1f4      	bne.n	938 <print_hex_array+0x18>
     94e:	2c00      	cmp	r4, #0
     950:	d0f2      	beq.n	938 <print_hex_array+0x18>
			printf("\r\n");
     952:	4648      	mov	r0, r9
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <print_hex_array+0x48>)
     956:	4798      	blx	r3
     958:	e7ee      	b.n	938 <print_hex_array+0x18>
	}
	printf("\r\n");
     95a:	4804      	ldr	r0, [pc, #16]	; (96c <print_hex_array+0x4c>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <print_hex_array+0x48>)
     95e:	4798      	blx	r3
     960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     964:	00001125 	.word	0x00001125
     968:	0000120d 	.word	0x0000120d
     96c:	00002c74 	.word	0x00002c74
     970:	00002ac4 	.word	0x00002ac4

00000974 <main>:
}

int main(void)
{
     974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     978:	b084      	sub	sp, #16
	uint32_t user_selection = 0;
     97a:	2300      	movs	r3, #0
     97c:	9303      	str	r3, [sp, #12]
	uint32_t ee_data        = 0;
     97e:	9302      	str	r3, [sp, #8]
	uint32_t ee_addr        = 0;
     980:	9301      	str	r3, [sp, #4]
	uint8_t  i              = 0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     982:	4b55      	ldr	r3, [pc, #340]	; (ad8 <main+0x164>)
     984:	4798      	blx	r3
	printf("\r\n\r\n=============SmartEEPROM Example=============\r\n");
     986:	4855      	ldr	r0, [pc, #340]	; (adc <main+0x168>)
     988:	4b55      	ldr	r3, [pc, #340]	; (ae0 <main+0x16c>)
     98a:	4798      	blx	r3

	if (ERR_NONE == verify_seep_signature()) {
     98c:	4b55      	ldr	r3, [pc, #340]	; (ae4 <main+0x170>)
     98e:	4798      	blx	r3
     990:	bb00      	cbnz	r0, 9d4 <main+0x60>
		printf("\r\nSmartEEPROM contains valid data \r\n");
     992:	4855      	ldr	r0, [pc, #340]	; (ae8 <main+0x174>)
     994:	4b52      	ldr	r3, [pc, #328]	; (ae0 <main+0x16c>)
     996:	4798      	blx	r3
     998:	4b54      	ldr	r3, [pc, #336]	; (aec <main+0x178>)
     99a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
     99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL))
			;
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
     99e:	f3c2 4202 	ubfx	r2, r2, #16, #3
     9a2:	f3c1 2103 	ubfx	r1, r1, #8, #4
     9a6:	4852      	ldr	r0, [pc, #328]	; (af0 <main+0x17c>)
     9a8:	4b52      	ldr	r3, [pc, #328]	; (af4 <main+0x180>)
     9aa:	4798      	blx	r3
	Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
	       (int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
	       (int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
     9ac:	2020      	movs	r0, #32
     9ae:	4b52      	ldr	r3, [pc, #328]	; (af8 <main+0x184>)
     9b0:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
     9b2:	4b52      	ldr	r3, [pc, #328]	; (afc <main+0x188>)
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	f893 3020 	ldrb.w	r3, [r3, #32]
     9ba:	b1cb      	cbz	r3, 9f0 <main+0x7c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     9c0:	4b4f      	ldr	r3, [pc, #316]	; (b00 <main+0x18c>)
     9c2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	} else {
		gpio_set_pin_level(LED0, false);
	}

	while (1) {
		printf("%s", menu_txt);
     9c6:	4e4d      	ldr	r6, [pc, #308]	; (afc <main+0x188>)
     9c8:	f106 0708 	add.w	r7, r6, #8
     9cc:	4d4d      	ldr	r5, [pc, #308]	; (b04 <main+0x190>)
     9ce:	f105 0463 	add.w	r4, r5, #99	; 0x63
     9d2:	e018      	b.n	a06 <main+0x92>
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
     9d4:	484c      	ldr	r0, [pc, #304]	; (b08 <main+0x194>)
     9d6:	4b42      	ldr	r3, [pc, #264]	; (ae0 <main+0x16c>)
     9d8:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     9da:	4b44      	ldr	r3, [pc, #272]	; (aec <main+0x178>)
     9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL))
     9de:	f012 0f04 	tst.w	r2, #4
     9e2:	d1fb      	bne.n	9dc <main+0x68>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
     9e4:	4b45      	ldr	r3, [pc, #276]	; (afc <main+0x188>)
     9e6:	685b      	ldr	r3, [r3, #4]
     9e8:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
     9ec:	601a      	str	r2, [r3, #0]
     9ee:	e7d3      	b.n	998 <main+0x24>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     9f4:	4b42      	ldr	r3, [pc, #264]	; (b00 <main+0x18c>)
     9f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     9fa:	e7e4      	b.n	9c6 <main+0x52>
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
     9fc:	4b43      	ldr	r3, [pc, #268]	; (b0c <main+0x198>)
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	6858      	ldr	r0, [r3, #4]
     a02:	4b43      	ldr	r3, [pc, #268]	; (b10 <main+0x19c>)
     a04:	4798      	blx	r3
		printf("%s", menu_txt);
     a06:	4639      	mov	r1, r7
     a08:	4842      	ldr	r0, [pc, #264]	; (b14 <main+0x1a0>)
     a0a:	4b3a      	ldr	r3, [pc, #232]	; (af4 <main+0x180>)
     a0c:	4798      	blx	r3
		if (scanf("%d", &user_selection) == 0) {
     a0e:	a903      	add	r1, sp, #12
     a10:	4841      	ldr	r0, [pc, #260]	; (b18 <main+0x1a4>)
     a12:	4b42      	ldr	r3, [pc, #264]	; (b1c <main+0x1a8>)
     a14:	4798      	blx	r3
     a16:	2800      	cmp	r0, #0
     a18:	d0f0      	beq.n	9fc <main+0x88>
			continue;
		}
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
     a1a:	9903      	ldr	r1, [sp, #12]
     a1c:	4840      	ldr	r0, [pc, #256]	; (b20 <main+0x1ac>)
     a1e:	4b35      	ldr	r3, [pc, #212]	; (af4 <main+0x180>)
     a20:	4798      	blx	r3
		switch (user_selection) {
     a22:	9b03      	ldr	r3, [sp, #12]
     a24:	2b02      	cmp	r3, #2
     a26:	d015      	beq.n	a54 <main+0xe0>
     a28:	2b03      	cmp	r3, #3
     a2a:	d044      	beq.n	ab6 <main+0x142>
     a2c:	2b01      	cmp	r3, #1
     a2e:	d14f      	bne.n	ad0 <main+0x15c>
     a30:	6832      	ldr	r2, [r6, #0]
     a32:	3a01      	subs	r2, #1
     a34:	1e6b      	subs	r3, r5, #1
		case 1:
			/* Code to read from EEPROM */
			for (i = 0; i < TEST_BUFF_SIZE; i++) {
				ee_data_buffer[i] = SmartEEPROM8[i];
     a36:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a3a:	f803 1f01 	strb.w	r1, [r3, #1]!
			for (i = 0; i < TEST_BUFF_SIZE; i++) {
     a3e:	42a3      	cmp	r3, r4
     a40:	d1f9      	bne.n	a36 <main+0xc2>
			}
			printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     a42:	2164      	movs	r1, #100	; 0x64
     a44:	4837      	ldr	r0, [pc, #220]	; (b24 <main+0x1b0>)
     a46:	4b2b      	ldr	r3, [pc, #172]	; (af4 <main+0x180>)
     a48:	4798      	blx	r3
			print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     a4a:	2164      	movs	r1, #100	; 0x64
     a4c:	4628      	mov	r0, r5
     a4e:	4b36      	ldr	r3, [pc, #216]	; (b28 <main+0x1b4>)
     a50:	4798      	blx	r3
			break;
     a52:	e7d8      	b.n	a06 <main+0x92>

		case 2:
			/* Code to write EEPROM */
			printf("\r\nEnter address >> ");
     a54:	4835      	ldr	r0, [pc, #212]	; (b2c <main+0x1b8>)
     a56:	4b27      	ldr	r3, [pc, #156]	; (af4 <main+0x180>)
     a58:	4798      	blx	r3
			scanf("%d", &ee_addr);
     a5a:	a901      	add	r1, sp, #4
     a5c:	482e      	ldr	r0, [pc, #184]	; (b18 <main+0x1a4>)
     a5e:	4b2f      	ldr	r3, [pc, #188]	; (b1c <main+0x1a8>)
     a60:	4798      	blx	r3
			/* This code is tested with SBLK = 1 and PSZ = 03
			 * Thus the highest address is 4095 (See datasheet for the more details).
			 */
			if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
     a62:	9b01      	ldr	r3, [sp, #4]
     a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     a68:	d303      	bcc.n	a72 <main+0xfe>
				printf("\r\nERROR: Address invalid. Try again \r\n");
     a6a:	4831      	ldr	r0, [pc, #196]	; (b30 <main+0x1bc>)
     a6c:	4b1c      	ldr	r3, [pc, #112]	; (ae0 <main+0x16c>)
     a6e:	4798      	blx	r3
				break;
     a70:	e7c9      	b.n	a06 <main+0x92>
			}
			printf("\r\nEnter data >> ");
     a72:	4830      	ldr	r0, [pc, #192]	; (b34 <main+0x1c0>)
     a74:	f8df 807c 	ldr.w	r8, [pc, #124]	; af4 <main+0x180>
     a78:	47c0      	blx	r8
			scanf("%d", &ee_data);
     a7a:	a902      	add	r1, sp, #8
     a7c:	4826      	ldr	r0, [pc, #152]	; (b18 <main+0x1a4>)
     a7e:	4b27      	ldr	r3, [pc, #156]	; (b1c <main+0x1a8>)
     a80:	4798      	blx	r3
			SmartEEPROM8[ee_addr] = ee_data;
     a82:	6832      	ldr	r2, [r6, #0]
     a84:	9902      	ldr	r1, [sp, #8]
     a86:	9b01      	ldr	r3, [sp, #4]
     a88:	54d1      	strb	r1, [r2, r3]
			printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
     a8a:	9a01      	ldr	r2, [sp, #4]
     a8c:	9902      	ldr	r1, [sp, #8]
     a8e:	482a      	ldr	r0, [pc, #168]	; (b38 <main+0x1c4>)
     a90:	47c0      	blx	r8
     a92:	6832      	ldr	r2, [r6, #0]
     a94:	3a01      	subs	r2, #1
     a96:	1e6b      	subs	r3, r5, #1
			for (i = 0; i < TEST_BUFF_SIZE; i++) {
				ee_data_buffer[i] = SmartEEPROM8[i];
     a98:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a9c:	f803 1f01 	strb.w	r1, [r3, #1]!
			for (i = 0; i < TEST_BUFF_SIZE; i++) {
     aa0:	42a3      	cmp	r3, r4
     aa2:	d1f9      	bne.n	a98 <main+0x124>
			}
			printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     aa4:	2164      	movs	r1, #100	; 0x64
     aa6:	481f      	ldr	r0, [pc, #124]	; (b24 <main+0x1b0>)
     aa8:	4b12      	ldr	r3, [pc, #72]	; (af4 <main+0x180>)
     aaa:	4798      	blx	r3
			print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     aac:	2164      	movs	r1, #100	; 0x64
     aae:	4628      	mov	r0, r5
     ab0:	4b1d      	ldr	r3, [pc, #116]	; (b28 <main+0x1b4>)
     ab2:	4798      	blx	r3
			break;
     ab4:	e7a7      	b.n	a06 <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
     ab6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     aba:	4920      	ldr	r1, [pc, #128]	; (b3c <main+0x1c8>)
     abc:	68ca      	ldr	r2, [r1, #12]
     abe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     ac2:	4b1f      	ldr	r3, [pc, #124]	; (b40 <main+0x1cc>)
     ac4:	4313      	orrs	r3, r2
     ac6:	60cb      	str	r3, [r1, #12]
     ac8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     acc:	bf00      	nop
     ace:	e7fd      	b.n	acc <main+0x158>
		case 3:
			NVIC_SystemReset();
			break;

		default:
			printf("\r\nInvalid option \r\n");
     ad0:	481c      	ldr	r0, [pc, #112]	; (b44 <main+0x1d0>)
     ad2:	4b03      	ldr	r3, [pc, #12]	; (ae0 <main+0x16c>)
     ad4:	4798      	blx	r3
			break;
     ad6:	e796      	b.n	a06 <main+0x92>
     ad8:	000002d1 	.word	0x000002d1
     adc:	00002acc 	.word	0x00002acc
     ae0:	0000120d 	.word	0x0000120d
     ae4:	000008e1 	.word	0x000008e1
     ae8:	00002b00 	.word	0x00002b00
     aec:	41004000 	.word	0x41004000
     af0:	00002b60 	.word	0x00002b60
     af4:	00001125 	.word	0x00001125
     af8:	00000891 	.word	0x00000891
     afc:	20000000 	.word	0x20000000
     b00:	41008000 	.word	0x41008000
     b04:	2000025c 	.word	0x2000025c
     b08:	00002b24 	.word	0x00002b24
     b0c:	2000006c 	.word	0x2000006c
     b10:	00000d85 	.word	0x00000d85
     b14:	00002bf4 	.word	0x00002bf4
     b18:	00002c9c 	.word	0x00002c9c
     b1c:	0000123d 	.word	0x0000123d
     b20:	00002bf8 	.word	0x00002bf8
     b24:	00002c14 	.word	0x00002c14
     b28:	00000921 	.word	0x00000921
     b2c:	00002c3c 	.word	0x00002c3c
     b30:	00002c50 	.word	0x00002c50
     b34:	00002c78 	.word	0x00002c78
     b38:	00002c8c 	.word	0x00002c8c
     b3c:	e000ed00 	.word	0xe000ed00
     b40:	05fa0004 	.word	0x05fa0004
     b44:	00002ca0 	.word	0x00002ca0

00000b48 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
     b48:	b940      	cbnz	r0, b5c <_read+0x14>
{
     b4a:	b508      	push	{r3, lr}
     b4c:	460b      	mov	r3, r1
     b4e:	4611      	mov	r1, r2
     b50:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
     b52:	4b04      	ldr	r3, [pc, #16]	; (b64 <_read+0x1c>)
     b54:	4798      	blx	r3
     b56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
     b5a:	bd08      	pop	{r3, pc}
		return -1;
     b5c:	f04f 30ff 	mov.w	r0, #4294967295
     b60:	4770      	bx	lr
     b62:	bf00      	nop
     b64:	00000bb9 	.word	0x00000bb9

00000b68 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     b68:	3801      	subs	r0, #1
     b6a:	2802      	cmp	r0, #2
     b6c:	d808      	bhi.n	b80 <_write+0x18>
{
     b6e:	b508      	push	{r3, lr}
     b70:	460b      	mov	r3, r1
     b72:	4611      	mov	r1, r2
     b74:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
     b76:	4b04      	ldr	r3, [pc, #16]	; (b88 <_write+0x20>)
     b78:	4798      	blx	r3
     b7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
     b7e:	bd08      	pop	{r3, pc}
		return -1;
     b80:	f04f 30ff 	mov.w	r0, #4294967295
     b84:	4770      	bx	lr
     b86:	bf00      	nop
     b88:	00000bdd 	.word	0x00000bdd

00000b8c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
     b8c:	b570      	push	{r4, r5, r6, lr}
     b8e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
     b90:	4d06      	ldr	r5, [pc, #24]	; (bac <stdio_io_init+0x20>)
     b92:	682b      	ldr	r3, [r5, #0]
     b94:	2100      	movs	r1, #0
     b96:	6898      	ldr	r0, [r3, #8]
     b98:	4c05      	ldr	r4, [pc, #20]	; (bb0 <stdio_io_init+0x24>)
     b9a:	47a0      	blx	r4
	setbuf(stdin, NULL);
     b9c:	682b      	ldr	r3, [r5, #0]
     b9e:	2100      	movs	r1, #0
     ba0:	6858      	ldr	r0, [r3, #4]
     ba2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
     ba4:	4b03      	ldr	r3, [pc, #12]	; (bb4 <stdio_io_init+0x28>)
     ba6:	601e      	str	r6, [r3, #0]
     ba8:	bd70      	pop	{r4, r5, r6, pc}
     baa:	bf00      	nop
     bac:	2000006c 	.word	0x2000006c
     bb0:	0000126d 	.word	0x0000126d
     bb4:	200002c0 	.word	0x200002c0

00000bb8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
     bb8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
     bba:	4b06      	ldr	r3, [pc, #24]	; (bd4 <stdio_io_read+0x1c>)
     bbc:	681b      	ldr	r3, [r3, #0]
     bbe:	b133      	cbz	r3, bce <stdio_io_read+0x16>
     bc0:	460a      	mov	r2, r1
     bc2:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
     bc4:	b292      	uxth	r2, r2
     bc6:	4618      	mov	r0, r3
     bc8:	4b03      	ldr	r3, [pc, #12]	; (bd8 <stdio_io_read+0x20>)
     bca:	4798      	blx	r3
     bcc:	bd08      	pop	{r3, pc}
		return 0;
     bce:	2000      	movs	r0, #0
}
     bd0:	bd08      	pop	{r3, pc}
     bd2:	bf00      	nop
     bd4:	200002c0 	.word	0x200002c0
     bd8:	0000048d 	.word	0x0000048d

00000bdc <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
     bdc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
     bde:	4b06      	ldr	r3, [pc, #24]	; (bf8 <stdio_io_write+0x1c>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	b133      	cbz	r3, bf2 <stdio_io_write+0x16>
     be4:	460a      	mov	r2, r1
     be6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
     be8:	b292      	uxth	r2, r2
     bea:	4618      	mov	r0, r3
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <stdio_io_write+0x20>)
     bee:	4798      	blx	r3
     bf0:	bd08      	pop	{r3, pc}
		return 0;
     bf2:	2000      	movs	r0, #0
}
     bf4:	bd08      	pop	{r3, pc}
     bf6:	bf00      	nop
     bf8:	200002c0 	.word	0x200002c0
     bfc:	0000045d 	.word	0x0000045d

00000c00 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
     c00:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
     c02:	4c04      	ldr	r4, [pc, #16]	; (c14 <stdio_redirect_init+0x14>)
     c04:	4620      	mov	r0, r4
     c06:	4b04      	ldr	r3, [pc, #16]	; (c18 <stdio_redirect_init+0x18>)
     c08:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
     c0a:	4620      	mov	r0, r4
     c0c:	4b03      	ldr	r3, [pc, #12]	; (c1c <stdio_redirect_init+0x1c>)
     c0e:	4798      	blx	r3
     c10:	bd10      	pop	{r4, pc}
     c12:	bf00      	nop
     c14:	200002cc 	.word	0x200002cc
     c18:	000005d9 	.word	0x000005d9
     c1c:	00000b8d 	.word	0x00000b8d

00000c20 <__sflush_r>:
     c20:	898a      	ldrh	r2, [r1, #12]
     c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c26:	4605      	mov	r5, r0
     c28:	0710      	lsls	r0, r2, #28
     c2a:	460c      	mov	r4, r1
     c2c:	d45a      	bmi.n	ce4 <__sflush_r+0xc4>
     c2e:	684b      	ldr	r3, [r1, #4]
     c30:	2b00      	cmp	r3, #0
     c32:	dc05      	bgt.n	c40 <__sflush_r+0x20>
     c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     c36:	2b00      	cmp	r3, #0
     c38:	dc02      	bgt.n	c40 <__sflush_r+0x20>
     c3a:	2000      	movs	r0, #0
     c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
     c42:	2e00      	cmp	r6, #0
     c44:	d0f9      	beq.n	c3a <__sflush_r+0x1a>
     c46:	2300      	movs	r3, #0
     c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
     c4c:	682f      	ldr	r7, [r5, #0]
     c4e:	602b      	str	r3, [r5, #0]
     c50:	d033      	beq.n	cba <__sflush_r+0x9a>
     c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
     c54:	89a3      	ldrh	r3, [r4, #12]
     c56:	075a      	lsls	r2, r3, #29
     c58:	d505      	bpl.n	c66 <__sflush_r+0x46>
     c5a:	6863      	ldr	r3, [r4, #4]
     c5c:	1ac0      	subs	r0, r0, r3
     c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
     c60:	b10b      	cbz	r3, c66 <__sflush_r+0x46>
     c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
     c64:	1ac0      	subs	r0, r0, r3
     c66:	2300      	movs	r3, #0
     c68:	4602      	mov	r2, r0
     c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
     c6c:	6a21      	ldr	r1, [r4, #32]
     c6e:	4628      	mov	r0, r5
     c70:	47b0      	blx	r6
     c72:	1c43      	adds	r3, r0, #1
     c74:	89a3      	ldrh	r3, [r4, #12]
     c76:	d106      	bne.n	c86 <__sflush_r+0x66>
     c78:	6829      	ldr	r1, [r5, #0]
     c7a:	291d      	cmp	r1, #29
     c7c:	d84b      	bhi.n	d16 <__sflush_r+0xf6>
     c7e:	4a2b      	ldr	r2, [pc, #172]	; (d2c <__sflush_r+0x10c>)
     c80:	40ca      	lsrs	r2, r1
     c82:	07d6      	lsls	r6, r2, #31
     c84:	d547      	bpl.n	d16 <__sflush_r+0xf6>
     c86:	2200      	movs	r2, #0
     c88:	6062      	str	r2, [r4, #4]
     c8a:	04d9      	lsls	r1, r3, #19
     c8c:	6922      	ldr	r2, [r4, #16]
     c8e:	6022      	str	r2, [r4, #0]
     c90:	d504      	bpl.n	c9c <__sflush_r+0x7c>
     c92:	1c42      	adds	r2, r0, #1
     c94:	d101      	bne.n	c9a <__sflush_r+0x7a>
     c96:	682b      	ldr	r3, [r5, #0]
     c98:	b903      	cbnz	r3, c9c <__sflush_r+0x7c>
     c9a:	6560      	str	r0, [r4, #84]	; 0x54
     c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
     c9e:	602f      	str	r7, [r5, #0]
     ca0:	2900      	cmp	r1, #0
     ca2:	d0ca      	beq.n	c3a <__sflush_r+0x1a>
     ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
     ca8:	4299      	cmp	r1, r3
     caa:	d002      	beq.n	cb2 <__sflush_r+0x92>
     cac:	4628      	mov	r0, r5
     cae:	f000 f98d 	bl	fcc <_free_r>
     cb2:	2000      	movs	r0, #0
     cb4:	6360      	str	r0, [r4, #52]	; 0x34
     cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cba:	6a21      	ldr	r1, [r4, #32]
     cbc:	2301      	movs	r3, #1
     cbe:	4628      	mov	r0, r5
     cc0:	47b0      	blx	r6
     cc2:	1c41      	adds	r1, r0, #1
     cc4:	d1c6      	bne.n	c54 <__sflush_r+0x34>
     cc6:	682b      	ldr	r3, [r5, #0]
     cc8:	2b00      	cmp	r3, #0
     cca:	d0c3      	beq.n	c54 <__sflush_r+0x34>
     ccc:	2b1d      	cmp	r3, #29
     cce:	d001      	beq.n	cd4 <__sflush_r+0xb4>
     cd0:	2b16      	cmp	r3, #22
     cd2:	d101      	bne.n	cd8 <__sflush_r+0xb8>
     cd4:	602f      	str	r7, [r5, #0]
     cd6:	e7b0      	b.n	c3a <__sflush_r+0x1a>
     cd8:	89a3      	ldrh	r3, [r4, #12]
     cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     cde:	81a3      	strh	r3, [r4, #12]
     ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ce4:	690f      	ldr	r7, [r1, #16]
     ce6:	2f00      	cmp	r7, #0
     ce8:	d0a7      	beq.n	c3a <__sflush_r+0x1a>
     cea:	0793      	lsls	r3, r2, #30
     cec:	680e      	ldr	r6, [r1, #0]
     cee:	bf08      	it	eq
     cf0:	694b      	ldreq	r3, [r1, #20]
     cf2:	600f      	str	r7, [r1, #0]
     cf4:	bf18      	it	ne
     cf6:	2300      	movne	r3, #0
     cf8:	eba6 0807 	sub.w	r8, r6, r7
     cfc:	608b      	str	r3, [r1, #8]
     cfe:	f1b8 0f00 	cmp.w	r8, #0
     d02:	dd9a      	ble.n	c3a <__sflush_r+0x1a>
     d04:	4643      	mov	r3, r8
     d06:	463a      	mov	r2, r7
     d08:	6a21      	ldr	r1, [r4, #32]
     d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
     d0c:	4628      	mov	r0, r5
     d0e:	47b0      	blx	r6
     d10:	2800      	cmp	r0, #0
     d12:	dc07      	bgt.n	d24 <__sflush_r+0x104>
     d14:	89a3      	ldrh	r3, [r4, #12]
     d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     d1a:	81a3      	strh	r3, [r4, #12]
     d1c:	f04f 30ff 	mov.w	r0, #4294967295
     d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d24:	4407      	add	r7, r0
     d26:	eba8 0800 	sub.w	r8, r8, r0
     d2a:	e7e8      	b.n	cfe <__sflush_r+0xde>
     d2c:	20400001 	.word	0x20400001

00000d30 <_fflush_r>:
     d30:	b538      	push	{r3, r4, r5, lr}
     d32:	690b      	ldr	r3, [r1, #16]
     d34:	4605      	mov	r5, r0
     d36:	460c      	mov	r4, r1
     d38:	b1db      	cbz	r3, d72 <_fflush_r+0x42>
     d3a:	b118      	cbz	r0, d44 <_fflush_r+0x14>
     d3c:	6983      	ldr	r3, [r0, #24]
     d3e:	b90b      	cbnz	r3, d44 <_fflush_r+0x14>
     d40:	f000 f872 	bl	e28 <__sinit>
     d44:	4b0c      	ldr	r3, [pc, #48]	; (d78 <_fflush_r+0x48>)
     d46:	429c      	cmp	r4, r3
     d48:	d109      	bne.n	d5e <_fflush_r+0x2e>
     d4a:	686c      	ldr	r4, [r5, #4]
     d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     d50:	b17b      	cbz	r3, d72 <_fflush_r+0x42>
     d52:	4621      	mov	r1, r4
     d54:	4628      	mov	r0, r5
     d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     d5a:	f7ff bf61 	b.w	c20 <__sflush_r>
     d5e:	4b07      	ldr	r3, [pc, #28]	; (d7c <_fflush_r+0x4c>)
     d60:	429c      	cmp	r4, r3
     d62:	d101      	bne.n	d68 <_fflush_r+0x38>
     d64:	68ac      	ldr	r4, [r5, #8]
     d66:	e7f1      	b.n	d4c <_fflush_r+0x1c>
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <_fflush_r+0x50>)
     d6a:	429c      	cmp	r4, r3
     d6c:	bf08      	it	eq
     d6e:	68ec      	ldreq	r4, [r5, #12]
     d70:	e7ec      	b.n	d4c <_fflush_r+0x1c>
     d72:	2000      	movs	r0, #0
     d74:	bd38      	pop	{r3, r4, r5, pc}
     d76:	bf00      	nop
     d78:	00002cd4 	.word	0x00002cd4
     d7c:	00002cf4 	.word	0x00002cf4
     d80:	00002cb4 	.word	0x00002cb4

00000d84 <fflush>:
     d84:	4601      	mov	r1, r0
     d86:	b920      	cbnz	r0, d92 <fflush+0xe>
     d88:	4b04      	ldr	r3, [pc, #16]	; (d9c <fflush+0x18>)
     d8a:	4905      	ldr	r1, [pc, #20]	; (da0 <fflush+0x1c>)
     d8c:	6818      	ldr	r0, [r3, #0]
     d8e:	f000 b8d3 	b.w	f38 <_fwalk_reent>
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <fflush+0x20>)
     d94:	6818      	ldr	r0, [r3, #0]
     d96:	f7ff bfcb 	b.w	d30 <_fflush_r>
     d9a:	bf00      	nop
     d9c:	00002d14 	.word	0x00002d14
     da0:	00000d31 	.word	0x00000d31
     da4:	2000006c 	.word	0x2000006c

00000da8 <_cleanup_r>:
     da8:	4901      	ldr	r1, [pc, #4]	; (db0 <_cleanup_r+0x8>)
     daa:	f000 b8c5 	b.w	f38 <_fwalk_reent>
     dae:	bf00      	nop
     db0:	00000d31 	.word	0x00000d31

00000db4 <std.isra.0>:
     db4:	2300      	movs	r3, #0
     db6:	b510      	push	{r4, lr}
     db8:	4604      	mov	r4, r0
     dba:	6003      	str	r3, [r0, #0]
     dbc:	6043      	str	r3, [r0, #4]
     dbe:	6083      	str	r3, [r0, #8]
     dc0:	8181      	strh	r1, [r0, #12]
     dc2:	6643      	str	r3, [r0, #100]	; 0x64
     dc4:	81c2      	strh	r2, [r0, #14]
     dc6:	6103      	str	r3, [r0, #16]
     dc8:	6143      	str	r3, [r0, #20]
     dca:	6183      	str	r3, [r0, #24]
     dcc:	4619      	mov	r1, r3
     dce:	2208      	movs	r2, #8
     dd0:	305c      	adds	r0, #92	; 0x5c
     dd2:	f000 f8f3 	bl	fbc <memset>
     dd6:	4b05      	ldr	r3, [pc, #20]	; (dec <std.isra.0+0x38>)
     dd8:	6263      	str	r3, [r4, #36]	; 0x24
     dda:	4b05      	ldr	r3, [pc, #20]	; (df0 <std.isra.0+0x3c>)
     ddc:	62a3      	str	r3, [r4, #40]	; 0x28
     dde:	4b05      	ldr	r3, [pc, #20]	; (df4 <std.isra.0+0x40>)
     de0:	62e3      	str	r3, [r4, #44]	; 0x2c
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <std.isra.0+0x44>)
     de4:	6224      	str	r4, [r4, #32]
     de6:	6323      	str	r3, [r4, #48]	; 0x30
     de8:	bd10      	pop	{r4, pc}
     dea:	bf00      	nop
     dec:	000013d9 	.word	0x000013d9
     df0:	000013fb 	.word	0x000013fb
     df4:	00001433 	.word	0x00001433
     df8:	00001457 	.word	0x00001457

00000dfc <__sfmoreglue>:
     dfc:	b570      	push	{r4, r5, r6, lr}
     dfe:	1e4a      	subs	r2, r1, #1
     e00:	2568      	movs	r5, #104	; 0x68
     e02:	4355      	muls	r5, r2
     e04:	460e      	mov	r6, r1
     e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
     e0a:	f000 f92d 	bl	1068 <_malloc_r>
     e0e:	4604      	mov	r4, r0
     e10:	b140      	cbz	r0, e24 <__sfmoreglue+0x28>
     e12:	2100      	movs	r1, #0
     e14:	e880 0042 	stmia.w	r0, {r1, r6}
     e18:	300c      	adds	r0, #12
     e1a:	60a0      	str	r0, [r4, #8]
     e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
     e20:	f000 f8cc 	bl	fbc <memset>
     e24:	4620      	mov	r0, r4
     e26:	bd70      	pop	{r4, r5, r6, pc}

00000e28 <__sinit>:
     e28:	6983      	ldr	r3, [r0, #24]
     e2a:	b510      	push	{r4, lr}
     e2c:	4604      	mov	r4, r0
     e2e:	bb33      	cbnz	r3, e7e <__sinit+0x56>
     e30:	6483      	str	r3, [r0, #72]	; 0x48
     e32:	64c3      	str	r3, [r0, #76]	; 0x4c
     e34:	6503      	str	r3, [r0, #80]	; 0x50
     e36:	4b12      	ldr	r3, [pc, #72]	; (e80 <__sinit+0x58>)
     e38:	4a12      	ldr	r2, [pc, #72]	; (e84 <__sinit+0x5c>)
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	6282      	str	r2, [r0, #40]	; 0x28
     e3e:	4298      	cmp	r0, r3
     e40:	bf04      	itt	eq
     e42:	2301      	moveq	r3, #1
     e44:	6183      	streq	r3, [r0, #24]
     e46:	f000 f81f 	bl	e88 <__sfp>
     e4a:	6060      	str	r0, [r4, #4]
     e4c:	4620      	mov	r0, r4
     e4e:	f000 f81b 	bl	e88 <__sfp>
     e52:	60a0      	str	r0, [r4, #8]
     e54:	4620      	mov	r0, r4
     e56:	f000 f817 	bl	e88 <__sfp>
     e5a:	2200      	movs	r2, #0
     e5c:	60e0      	str	r0, [r4, #12]
     e5e:	2104      	movs	r1, #4
     e60:	6860      	ldr	r0, [r4, #4]
     e62:	f7ff ffa7 	bl	db4 <std.isra.0>
     e66:	2201      	movs	r2, #1
     e68:	2109      	movs	r1, #9
     e6a:	68a0      	ldr	r0, [r4, #8]
     e6c:	f7ff ffa2 	bl	db4 <std.isra.0>
     e70:	2202      	movs	r2, #2
     e72:	2112      	movs	r1, #18
     e74:	68e0      	ldr	r0, [r4, #12]
     e76:	f7ff ff9d 	bl	db4 <std.isra.0>
     e7a:	2301      	movs	r3, #1
     e7c:	61a3      	str	r3, [r4, #24]
     e7e:	bd10      	pop	{r4, pc}
     e80:	00002d14 	.word	0x00002d14
     e84:	00000da9 	.word	0x00000da9

00000e88 <__sfp>:
     e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e8a:	4b1c      	ldr	r3, [pc, #112]	; (efc <__sfp+0x74>)
     e8c:	681e      	ldr	r6, [r3, #0]
     e8e:	69b3      	ldr	r3, [r6, #24]
     e90:	4607      	mov	r7, r0
     e92:	b913      	cbnz	r3, e9a <__sfp+0x12>
     e94:	4630      	mov	r0, r6
     e96:	f7ff ffc7 	bl	e28 <__sinit>
     e9a:	3648      	adds	r6, #72	; 0x48
     e9c:	68b4      	ldr	r4, [r6, #8]
     e9e:	6873      	ldr	r3, [r6, #4]
     ea0:	3b01      	subs	r3, #1
     ea2:	d503      	bpl.n	eac <__sfp+0x24>
     ea4:	6833      	ldr	r3, [r6, #0]
     ea6:	b133      	cbz	r3, eb6 <__sfp+0x2e>
     ea8:	6836      	ldr	r6, [r6, #0]
     eaa:	e7f7      	b.n	e9c <__sfp+0x14>
     eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
     eb0:	b16d      	cbz	r5, ece <__sfp+0x46>
     eb2:	3468      	adds	r4, #104	; 0x68
     eb4:	e7f4      	b.n	ea0 <__sfp+0x18>
     eb6:	2104      	movs	r1, #4
     eb8:	4638      	mov	r0, r7
     eba:	f7ff ff9f 	bl	dfc <__sfmoreglue>
     ebe:	6030      	str	r0, [r6, #0]
     ec0:	2800      	cmp	r0, #0
     ec2:	d1f1      	bne.n	ea8 <__sfp+0x20>
     ec4:	230c      	movs	r3, #12
     ec6:	603b      	str	r3, [r7, #0]
     ec8:	4604      	mov	r4, r0
     eca:	4620      	mov	r0, r4
     ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
     ed2:	81e3      	strh	r3, [r4, #14]
     ed4:	2301      	movs	r3, #1
     ed6:	81a3      	strh	r3, [r4, #12]
     ed8:	6665      	str	r5, [r4, #100]	; 0x64
     eda:	6025      	str	r5, [r4, #0]
     edc:	60a5      	str	r5, [r4, #8]
     ede:	6065      	str	r5, [r4, #4]
     ee0:	6125      	str	r5, [r4, #16]
     ee2:	6165      	str	r5, [r4, #20]
     ee4:	61a5      	str	r5, [r4, #24]
     ee6:	2208      	movs	r2, #8
     ee8:	4629      	mov	r1, r5
     eea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
     eee:	f000 f865 	bl	fbc <memset>
     ef2:	6365      	str	r5, [r4, #52]	; 0x34
     ef4:	63a5      	str	r5, [r4, #56]	; 0x38
     ef6:	64a5      	str	r5, [r4, #72]	; 0x48
     ef8:	64e5      	str	r5, [r4, #76]	; 0x4c
     efa:	e7e6      	b.n	eca <__sfp+0x42>
     efc:	00002d14 	.word	0x00002d14

00000f00 <_fwalk>:
     f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f04:	4688      	mov	r8, r1
     f06:	f100 0448 	add.w	r4, r0, #72	; 0x48
     f0a:	2600      	movs	r6, #0
     f0c:	b914      	cbnz	r4, f14 <_fwalk+0x14>
     f0e:	4630      	mov	r0, r6
     f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f14:	68a5      	ldr	r5, [r4, #8]
     f16:	6867      	ldr	r7, [r4, #4]
     f18:	3f01      	subs	r7, #1
     f1a:	d501      	bpl.n	f20 <_fwalk+0x20>
     f1c:	6824      	ldr	r4, [r4, #0]
     f1e:	e7f5      	b.n	f0c <_fwalk+0xc>
     f20:	89ab      	ldrh	r3, [r5, #12]
     f22:	2b01      	cmp	r3, #1
     f24:	d906      	bls.n	f34 <_fwalk+0x34>
     f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
     f2a:	3301      	adds	r3, #1
     f2c:	d002      	beq.n	f34 <_fwalk+0x34>
     f2e:	4628      	mov	r0, r5
     f30:	47c0      	blx	r8
     f32:	4306      	orrs	r6, r0
     f34:	3568      	adds	r5, #104	; 0x68
     f36:	e7ef      	b.n	f18 <_fwalk+0x18>

00000f38 <_fwalk_reent>:
     f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f3c:	4680      	mov	r8, r0
     f3e:	4689      	mov	r9, r1
     f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
     f44:	2600      	movs	r6, #0
     f46:	b914      	cbnz	r4, f4e <_fwalk_reent+0x16>
     f48:	4630      	mov	r0, r6
     f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f4e:	68a5      	ldr	r5, [r4, #8]
     f50:	6867      	ldr	r7, [r4, #4]
     f52:	3f01      	subs	r7, #1
     f54:	d501      	bpl.n	f5a <_fwalk_reent+0x22>
     f56:	6824      	ldr	r4, [r4, #0]
     f58:	e7f5      	b.n	f46 <_fwalk_reent+0xe>
     f5a:	89ab      	ldrh	r3, [r5, #12]
     f5c:	2b01      	cmp	r3, #1
     f5e:	d907      	bls.n	f70 <_fwalk_reent+0x38>
     f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
     f64:	3301      	adds	r3, #1
     f66:	d003      	beq.n	f70 <_fwalk_reent+0x38>
     f68:	4629      	mov	r1, r5
     f6a:	4640      	mov	r0, r8
     f6c:	47c8      	blx	r9
     f6e:	4306      	orrs	r6, r0
     f70:	3568      	adds	r5, #104	; 0x68
     f72:	e7ee      	b.n	f52 <_fwalk_reent+0x1a>

00000f74 <__libc_init_array>:
     f74:	b570      	push	{r4, r5, r6, lr}
     f76:	4e0d      	ldr	r6, [pc, #52]	; (fac <__libc_init_array+0x38>)
     f78:	4c0d      	ldr	r4, [pc, #52]	; (fb0 <__libc_init_array+0x3c>)
     f7a:	1ba4      	subs	r4, r4, r6
     f7c:	10a4      	asrs	r4, r4, #2
     f7e:	2500      	movs	r5, #0
     f80:	42a5      	cmp	r5, r4
     f82:	d109      	bne.n	f98 <__libc_init_array+0x24>
     f84:	4e0b      	ldr	r6, [pc, #44]	; (fb4 <__libc_init_array+0x40>)
     f86:	4c0c      	ldr	r4, [pc, #48]	; (fb8 <__libc_init_array+0x44>)
     f88:	f001 ff7a 	bl	2e80 <_init>
     f8c:	1ba4      	subs	r4, r4, r6
     f8e:	10a4      	asrs	r4, r4, #2
     f90:	2500      	movs	r5, #0
     f92:	42a5      	cmp	r5, r4
     f94:	d105      	bne.n	fa2 <__libc_init_array+0x2e>
     f96:	bd70      	pop	{r4, r5, r6, pc}
     f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
     f9c:	4798      	blx	r3
     f9e:	3501      	adds	r5, #1
     fa0:	e7ee      	b.n	f80 <__libc_init_array+0xc>
     fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
     fa6:	4798      	blx	r3
     fa8:	3501      	adds	r5, #1
     faa:	e7f2      	b.n	f92 <__libc_init_array+0x1e>
     fac:	00002e8c 	.word	0x00002e8c
     fb0:	00002e8c 	.word	0x00002e8c
     fb4:	00002e8c 	.word	0x00002e8c
     fb8:	00002e90 	.word	0x00002e90

00000fbc <memset>:
     fbc:	4402      	add	r2, r0
     fbe:	4603      	mov	r3, r0
     fc0:	4293      	cmp	r3, r2
     fc2:	d100      	bne.n	fc6 <memset+0xa>
     fc4:	4770      	bx	lr
     fc6:	f803 1b01 	strb.w	r1, [r3], #1
     fca:	e7f9      	b.n	fc0 <memset+0x4>

00000fcc <_free_r>:
     fcc:	b538      	push	{r3, r4, r5, lr}
     fce:	4605      	mov	r5, r0
     fd0:	2900      	cmp	r1, #0
     fd2:	d045      	beq.n	1060 <_free_r+0x94>
     fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
     fd8:	1f0c      	subs	r4, r1, #4
     fda:	2b00      	cmp	r3, #0
     fdc:	bfb8      	it	lt
     fde:	18e4      	addlt	r4, r4, r3
     fe0:	f000 fb9e 	bl	1720 <__malloc_lock>
     fe4:	4a1f      	ldr	r2, [pc, #124]	; (1064 <_free_r+0x98>)
     fe6:	6813      	ldr	r3, [r2, #0]
     fe8:	4610      	mov	r0, r2
     fea:	b933      	cbnz	r3, ffa <_free_r+0x2e>
     fec:	6063      	str	r3, [r4, #4]
     fee:	6014      	str	r4, [r2, #0]
     ff0:	4628      	mov	r0, r5
     ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     ff6:	f000 bb94 	b.w	1722 <__malloc_unlock>
     ffa:	42a3      	cmp	r3, r4
     ffc:	d90c      	bls.n	1018 <_free_r+0x4c>
     ffe:	6821      	ldr	r1, [r4, #0]
    1000:	1862      	adds	r2, r4, r1
    1002:	4293      	cmp	r3, r2
    1004:	bf04      	itt	eq
    1006:	681a      	ldreq	r2, [r3, #0]
    1008:	685b      	ldreq	r3, [r3, #4]
    100a:	6063      	str	r3, [r4, #4]
    100c:	bf04      	itt	eq
    100e:	1852      	addeq	r2, r2, r1
    1010:	6022      	streq	r2, [r4, #0]
    1012:	6004      	str	r4, [r0, #0]
    1014:	e7ec      	b.n	ff0 <_free_r+0x24>
    1016:	4613      	mov	r3, r2
    1018:	685a      	ldr	r2, [r3, #4]
    101a:	b10a      	cbz	r2, 1020 <_free_r+0x54>
    101c:	42a2      	cmp	r2, r4
    101e:	d9fa      	bls.n	1016 <_free_r+0x4a>
    1020:	6819      	ldr	r1, [r3, #0]
    1022:	1858      	adds	r0, r3, r1
    1024:	42a0      	cmp	r0, r4
    1026:	d10b      	bne.n	1040 <_free_r+0x74>
    1028:	6820      	ldr	r0, [r4, #0]
    102a:	4401      	add	r1, r0
    102c:	1858      	adds	r0, r3, r1
    102e:	4282      	cmp	r2, r0
    1030:	6019      	str	r1, [r3, #0]
    1032:	d1dd      	bne.n	ff0 <_free_r+0x24>
    1034:	6810      	ldr	r0, [r2, #0]
    1036:	6852      	ldr	r2, [r2, #4]
    1038:	605a      	str	r2, [r3, #4]
    103a:	4401      	add	r1, r0
    103c:	6019      	str	r1, [r3, #0]
    103e:	e7d7      	b.n	ff0 <_free_r+0x24>
    1040:	d902      	bls.n	1048 <_free_r+0x7c>
    1042:	230c      	movs	r3, #12
    1044:	602b      	str	r3, [r5, #0]
    1046:	e7d3      	b.n	ff0 <_free_r+0x24>
    1048:	6820      	ldr	r0, [r4, #0]
    104a:	1821      	adds	r1, r4, r0
    104c:	428a      	cmp	r2, r1
    104e:	bf04      	itt	eq
    1050:	6811      	ldreq	r1, [r2, #0]
    1052:	6852      	ldreq	r2, [r2, #4]
    1054:	6062      	str	r2, [r4, #4]
    1056:	bf04      	itt	eq
    1058:	1809      	addeq	r1, r1, r0
    105a:	6021      	streq	r1, [r4, #0]
    105c:	605c      	str	r4, [r3, #4]
    105e:	e7c7      	b.n	ff0 <_free_r+0x24>
    1060:	bd38      	pop	{r3, r4, r5, pc}
    1062:	bf00      	nop
    1064:	200002c4 	.word	0x200002c4

00001068 <_malloc_r>:
    1068:	b570      	push	{r4, r5, r6, lr}
    106a:	1ccd      	adds	r5, r1, #3
    106c:	f025 0503 	bic.w	r5, r5, #3
    1070:	3508      	adds	r5, #8
    1072:	2d0c      	cmp	r5, #12
    1074:	bf38      	it	cc
    1076:	250c      	movcc	r5, #12
    1078:	2d00      	cmp	r5, #0
    107a:	4606      	mov	r6, r0
    107c:	db01      	blt.n	1082 <_malloc_r+0x1a>
    107e:	42a9      	cmp	r1, r5
    1080:	d903      	bls.n	108a <_malloc_r+0x22>
    1082:	230c      	movs	r3, #12
    1084:	6033      	str	r3, [r6, #0]
    1086:	2000      	movs	r0, #0
    1088:	bd70      	pop	{r4, r5, r6, pc}
    108a:	f000 fb49 	bl	1720 <__malloc_lock>
    108e:	4a23      	ldr	r2, [pc, #140]	; (111c <_malloc_r+0xb4>)
    1090:	6814      	ldr	r4, [r2, #0]
    1092:	4621      	mov	r1, r4
    1094:	b991      	cbnz	r1, 10bc <_malloc_r+0x54>
    1096:	4c22      	ldr	r4, [pc, #136]	; (1120 <_malloc_r+0xb8>)
    1098:	6823      	ldr	r3, [r4, #0]
    109a:	b91b      	cbnz	r3, 10a4 <_malloc_r+0x3c>
    109c:	4630      	mov	r0, r6
    109e:	f000 f8bd 	bl	121c <_sbrk_r>
    10a2:	6020      	str	r0, [r4, #0]
    10a4:	4629      	mov	r1, r5
    10a6:	4630      	mov	r0, r6
    10a8:	f000 f8b8 	bl	121c <_sbrk_r>
    10ac:	1c43      	adds	r3, r0, #1
    10ae:	d126      	bne.n	10fe <_malloc_r+0x96>
    10b0:	230c      	movs	r3, #12
    10b2:	6033      	str	r3, [r6, #0]
    10b4:	4630      	mov	r0, r6
    10b6:	f000 fb34 	bl	1722 <__malloc_unlock>
    10ba:	e7e4      	b.n	1086 <_malloc_r+0x1e>
    10bc:	680b      	ldr	r3, [r1, #0]
    10be:	1b5b      	subs	r3, r3, r5
    10c0:	d41a      	bmi.n	10f8 <_malloc_r+0x90>
    10c2:	2b0b      	cmp	r3, #11
    10c4:	d90f      	bls.n	10e6 <_malloc_r+0x7e>
    10c6:	600b      	str	r3, [r1, #0]
    10c8:	50cd      	str	r5, [r1, r3]
    10ca:	18cc      	adds	r4, r1, r3
    10cc:	4630      	mov	r0, r6
    10ce:	f000 fb28 	bl	1722 <__malloc_unlock>
    10d2:	f104 000b 	add.w	r0, r4, #11
    10d6:	1d23      	adds	r3, r4, #4
    10d8:	f020 0007 	bic.w	r0, r0, #7
    10dc:	1ac3      	subs	r3, r0, r3
    10de:	d01b      	beq.n	1118 <_malloc_r+0xb0>
    10e0:	425a      	negs	r2, r3
    10e2:	50e2      	str	r2, [r4, r3]
    10e4:	bd70      	pop	{r4, r5, r6, pc}
    10e6:	428c      	cmp	r4, r1
    10e8:	bf0d      	iteet	eq
    10ea:	6863      	ldreq	r3, [r4, #4]
    10ec:	684b      	ldrne	r3, [r1, #4]
    10ee:	6063      	strne	r3, [r4, #4]
    10f0:	6013      	streq	r3, [r2, #0]
    10f2:	bf18      	it	ne
    10f4:	460c      	movne	r4, r1
    10f6:	e7e9      	b.n	10cc <_malloc_r+0x64>
    10f8:	460c      	mov	r4, r1
    10fa:	6849      	ldr	r1, [r1, #4]
    10fc:	e7ca      	b.n	1094 <_malloc_r+0x2c>
    10fe:	1cc4      	adds	r4, r0, #3
    1100:	f024 0403 	bic.w	r4, r4, #3
    1104:	42a0      	cmp	r0, r4
    1106:	d005      	beq.n	1114 <_malloc_r+0xac>
    1108:	1a21      	subs	r1, r4, r0
    110a:	4630      	mov	r0, r6
    110c:	f000 f886 	bl	121c <_sbrk_r>
    1110:	3001      	adds	r0, #1
    1112:	d0cd      	beq.n	10b0 <_malloc_r+0x48>
    1114:	6025      	str	r5, [r4, #0]
    1116:	e7d9      	b.n	10cc <_malloc_r+0x64>
    1118:	bd70      	pop	{r4, r5, r6, pc}
    111a:	bf00      	nop
    111c:	200002c4 	.word	0x200002c4
    1120:	200002c8 	.word	0x200002c8

00001124 <iprintf>:
    1124:	b40f      	push	{r0, r1, r2, r3}
    1126:	4b0a      	ldr	r3, [pc, #40]	; (1150 <iprintf+0x2c>)
    1128:	b513      	push	{r0, r1, r4, lr}
    112a:	681c      	ldr	r4, [r3, #0]
    112c:	b124      	cbz	r4, 1138 <iprintf+0x14>
    112e:	69a3      	ldr	r3, [r4, #24]
    1130:	b913      	cbnz	r3, 1138 <iprintf+0x14>
    1132:	4620      	mov	r0, r4
    1134:	f7ff fe78 	bl	e28 <__sinit>
    1138:	ab05      	add	r3, sp, #20
    113a:	9a04      	ldr	r2, [sp, #16]
    113c:	68a1      	ldr	r1, [r4, #8]
    113e:	9301      	str	r3, [sp, #4]
    1140:	4620      	mov	r0, r4
    1142:	f000 fb17 	bl	1774 <_vfiprintf_r>
    1146:	b002      	add	sp, #8
    1148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    114c:	b004      	add	sp, #16
    114e:	4770      	bx	lr
    1150:	2000006c 	.word	0x2000006c

00001154 <_puts_r>:
    1154:	b570      	push	{r4, r5, r6, lr}
    1156:	460e      	mov	r6, r1
    1158:	4605      	mov	r5, r0
    115a:	b118      	cbz	r0, 1164 <_puts_r+0x10>
    115c:	6983      	ldr	r3, [r0, #24]
    115e:	b90b      	cbnz	r3, 1164 <_puts_r+0x10>
    1160:	f7ff fe62 	bl	e28 <__sinit>
    1164:	69ab      	ldr	r3, [r5, #24]
    1166:	68ac      	ldr	r4, [r5, #8]
    1168:	b913      	cbnz	r3, 1170 <_puts_r+0x1c>
    116a:	4628      	mov	r0, r5
    116c:	f7ff fe5c 	bl	e28 <__sinit>
    1170:	4b23      	ldr	r3, [pc, #140]	; (1200 <_puts_r+0xac>)
    1172:	429c      	cmp	r4, r3
    1174:	d117      	bne.n	11a6 <_puts_r+0x52>
    1176:	686c      	ldr	r4, [r5, #4]
    1178:	89a3      	ldrh	r3, [r4, #12]
    117a:	071b      	lsls	r3, r3, #28
    117c:	d51d      	bpl.n	11ba <_puts_r+0x66>
    117e:	6923      	ldr	r3, [r4, #16]
    1180:	b1db      	cbz	r3, 11ba <_puts_r+0x66>
    1182:	3e01      	subs	r6, #1
    1184:	68a3      	ldr	r3, [r4, #8]
    1186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    118a:	3b01      	subs	r3, #1
    118c:	60a3      	str	r3, [r4, #8]
    118e:	b9e9      	cbnz	r1, 11cc <_puts_r+0x78>
    1190:	2b00      	cmp	r3, #0
    1192:	da2e      	bge.n	11f2 <_puts_r+0x9e>
    1194:	4622      	mov	r2, r4
    1196:	210a      	movs	r1, #10
    1198:	4628      	mov	r0, r5
    119a:	f000 f961 	bl	1460 <__swbuf_r>
    119e:	3001      	adds	r0, #1
    11a0:	d011      	beq.n	11c6 <_puts_r+0x72>
    11a2:	200a      	movs	r0, #10
    11a4:	bd70      	pop	{r4, r5, r6, pc}
    11a6:	4b17      	ldr	r3, [pc, #92]	; (1204 <_puts_r+0xb0>)
    11a8:	429c      	cmp	r4, r3
    11aa:	d101      	bne.n	11b0 <_puts_r+0x5c>
    11ac:	68ac      	ldr	r4, [r5, #8]
    11ae:	e7e3      	b.n	1178 <_puts_r+0x24>
    11b0:	4b15      	ldr	r3, [pc, #84]	; (1208 <_puts_r+0xb4>)
    11b2:	429c      	cmp	r4, r3
    11b4:	bf08      	it	eq
    11b6:	68ec      	ldreq	r4, [r5, #12]
    11b8:	e7de      	b.n	1178 <_puts_r+0x24>
    11ba:	4621      	mov	r1, r4
    11bc:	4628      	mov	r0, r5
    11be:	f000 f9b3 	bl	1528 <__swsetup_r>
    11c2:	2800      	cmp	r0, #0
    11c4:	d0dd      	beq.n	1182 <_puts_r+0x2e>
    11c6:	f04f 30ff 	mov.w	r0, #4294967295
    11ca:	bd70      	pop	{r4, r5, r6, pc}
    11cc:	2b00      	cmp	r3, #0
    11ce:	da04      	bge.n	11da <_puts_r+0x86>
    11d0:	69a2      	ldr	r2, [r4, #24]
    11d2:	4293      	cmp	r3, r2
    11d4:	db06      	blt.n	11e4 <_puts_r+0x90>
    11d6:	290a      	cmp	r1, #10
    11d8:	d004      	beq.n	11e4 <_puts_r+0x90>
    11da:	6823      	ldr	r3, [r4, #0]
    11dc:	1c5a      	adds	r2, r3, #1
    11de:	6022      	str	r2, [r4, #0]
    11e0:	7019      	strb	r1, [r3, #0]
    11e2:	e7cf      	b.n	1184 <_puts_r+0x30>
    11e4:	4622      	mov	r2, r4
    11e6:	4628      	mov	r0, r5
    11e8:	f000 f93a 	bl	1460 <__swbuf_r>
    11ec:	3001      	adds	r0, #1
    11ee:	d1c9      	bne.n	1184 <_puts_r+0x30>
    11f0:	e7e9      	b.n	11c6 <_puts_r+0x72>
    11f2:	6823      	ldr	r3, [r4, #0]
    11f4:	200a      	movs	r0, #10
    11f6:	1c5a      	adds	r2, r3, #1
    11f8:	6022      	str	r2, [r4, #0]
    11fa:	7018      	strb	r0, [r3, #0]
    11fc:	bd70      	pop	{r4, r5, r6, pc}
    11fe:	bf00      	nop
    1200:	00002cd4 	.word	0x00002cd4
    1204:	00002cf4 	.word	0x00002cf4
    1208:	00002cb4 	.word	0x00002cb4

0000120c <puts>:
    120c:	4b02      	ldr	r3, [pc, #8]	; (1218 <puts+0xc>)
    120e:	4601      	mov	r1, r0
    1210:	6818      	ldr	r0, [r3, #0]
    1212:	f7ff bf9f 	b.w	1154 <_puts_r>
    1216:	bf00      	nop
    1218:	2000006c 	.word	0x2000006c

0000121c <_sbrk_r>:
    121c:	b538      	push	{r3, r4, r5, lr}
    121e:	4c06      	ldr	r4, [pc, #24]	; (1238 <_sbrk_r+0x1c>)
    1220:	2300      	movs	r3, #0
    1222:	4605      	mov	r5, r0
    1224:	4608      	mov	r0, r1
    1226:	6023      	str	r3, [r4, #0]
    1228:	f7ff f9f0 	bl	60c <_sbrk>
    122c:	1c43      	adds	r3, r0, #1
    122e:	d102      	bne.n	1236 <_sbrk_r+0x1a>
    1230:	6823      	ldr	r3, [r4, #0]
    1232:	b103      	cbz	r3, 1236 <_sbrk_r+0x1a>
    1234:	602b      	str	r3, [r5, #0]
    1236:	bd38      	pop	{r3, r4, r5, pc}
    1238:	200002ec 	.word	0x200002ec

0000123c <iscanf>:
    123c:	b40f      	push	{r0, r1, r2, r3}
    123e:	4b0a      	ldr	r3, [pc, #40]	; (1268 <iscanf+0x2c>)
    1240:	b513      	push	{r0, r1, r4, lr}
    1242:	681c      	ldr	r4, [r3, #0]
    1244:	b124      	cbz	r4, 1250 <iscanf+0x14>
    1246:	69a3      	ldr	r3, [r4, #24]
    1248:	b913      	cbnz	r3, 1250 <iscanf+0x14>
    124a:	4620      	mov	r0, r4
    124c:	f7ff fdec 	bl	e28 <__sinit>
    1250:	ab05      	add	r3, sp, #20
    1252:	9a04      	ldr	r2, [sp, #16]
    1254:	6861      	ldr	r1, [r4, #4]
    1256:	9301      	str	r3, [sp, #4]
    1258:	4620      	mov	r0, r4
    125a:	f000 fe8b 	bl	1f74 <_vfiscanf_r>
    125e:	b002      	add	sp, #8
    1260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1264:	b004      	add	sp, #16
    1266:	4770      	bx	lr
    1268:	2000006c 	.word	0x2000006c

0000126c <setbuf>:
    126c:	2900      	cmp	r1, #0
    126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1272:	bf0c      	ite	eq
    1274:	2202      	moveq	r2, #2
    1276:	2200      	movne	r2, #0
    1278:	f000 b800 	b.w	127c <setvbuf>

0000127c <setvbuf>:
    127c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1280:	461d      	mov	r5, r3
    1282:	4b51      	ldr	r3, [pc, #324]	; (13c8 <setvbuf+0x14c>)
    1284:	681e      	ldr	r6, [r3, #0]
    1286:	4604      	mov	r4, r0
    1288:	460f      	mov	r7, r1
    128a:	4690      	mov	r8, r2
    128c:	b126      	cbz	r6, 1298 <setvbuf+0x1c>
    128e:	69b3      	ldr	r3, [r6, #24]
    1290:	b913      	cbnz	r3, 1298 <setvbuf+0x1c>
    1292:	4630      	mov	r0, r6
    1294:	f7ff fdc8 	bl	e28 <__sinit>
    1298:	4b4c      	ldr	r3, [pc, #304]	; (13cc <setvbuf+0x150>)
    129a:	429c      	cmp	r4, r3
    129c:	d152      	bne.n	1344 <setvbuf+0xc8>
    129e:	6874      	ldr	r4, [r6, #4]
    12a0:	f1b8 0f02 	cmp.w	r8, #2
    12a4:	d006      	beq.n	12b4 <setvbuf+0x38>
    12a6:	f1b8 0f01 	cmp.w	r8, #1
    12aa:	f200 8089 	bhi.w	13c0 <setvbuf+0x144>
    12ae:	2d00      	cmp	r5, #0
    12b0:	f2c0 8086 	blt.w	13c0 <setvbuf+0x144>
    12b4:	4621      	mov	r1, r4
    12b6:	4630      	mov	r0, r6
    12b8:	f7ff fd3a 	bl	d30 <_fflush_r>
    12bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    12be:	b141      	cbz	r1, 12d2 <setvbuf+0x56>
    12c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    12c4:	4299      	cmp	r1, r3
    12c6:	d002      	beq.n	12ce <setvbuf+0x52>
    12c8:	4630      	mov	r0, r6
    12ca:	f7ff fe7f 	bl	fcc <_free_r>
    12ce:	2300      	movs	r3, #0
    12d0:	6363      	str	r3, [r4, #52]	; 0x34
    12d2:	2300      	movs	r3, #0
    12d4:	61a3      	str	r3, [r4, #24]
    12d6:	6063      	str	r3, [r4, #4]
    12d8:	89a3      	ldrh	r3, [r4, #12]
    12da:	061b      	lsls	r3, r3, #24
    12dc:	d503      	bpl.n	12e6 <setvbuf+0x6a>
    12de:	6921      	ldr	r1, [r4, #16]
    12e0:	4630      	mov	r0, r6
    12e2:	f7ff fe73 	bl	fcc <_free_r>
    12e6:	89a3      	ldrh	r3, [r4, #12]
    12e8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    12ec:	f023 0303 	bic.w	r3, r3, #3
    12f0:	f1b8 0f02 	cmp.w	r8, #2
    12f4:	81a3      	strh	r3, [r4, #12]
    12f6:	d05d      	beq.n	13b4 <setvbuf+0x138>
    12f8:	ab01      	add	r3, sp, #4
    12fa:	466a      	mov	r2, sp
    12fc:	4621      	mov	r1, r4
    12fe:	4630      	mov	r0, r6
    1300:	f000 f9a2 	bl	1648 <__swhatbuf_r>
    1304:	89a3      	ldrh	r3, [r4, #12]
    1306:	4318      	orrs	r0, r3
    1308:	81a0      	strh	r0, [r4, #12]
    130a:	bb2d      	cbnz	r5, 1358 <setvbuf+0xdc>
    130c:	9d00      	ldr	r5, [sp, #0]
    130e:	4628      	mov	r0, r5
    1310:	f000 f9fe 	bl	1710 <malloc>
    1314:	4607      	mov	r7, r0
    1316:	2800      	cmp	r0, #0
    1318:	d14e      	bne.n	13b8 <setvbuf+0x13c>
    131a:	f8dd 9000 	ldr.w	r9, [sp]
    131e:	45a9      	cmp	r9, r5
    1320:	d13c      	bne.n	139c <setvbuf+0x120>
    1322:	f04f 30ff 	mov.w	r0, #4294967295
    1326:	89a3      	ldrh	r3, [r4, #12]
    1328:	f043 0302 	orr.w	r3, r3, #2
    132c:	81a3      	strh	r3, [r4, #12]
    132e:	2300      	movs	r3, #0
    1330:	60a3      	str	r3, [r4, #8]
    1332:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1336:	6023      	str	r3, [r4, #0]
    1338:	6123      	str	r3, [r4, #16]
    133a:	2301      	movs	r3, #1
    133c:	6163      	str	r3, [r4, #20]
    133e:	b003      	add	sp, #12
    1340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1344:	4b22      	ldr	r3, [pc, #136]	; (13d0 <setvbuf+0x154>)
    1346:	429c      	cmp	r4, r3
    1348:	d101      	bne.n	134e <setvbuf+0xd2>
    134a:	68b4      	ldr	r4, [r6, #8]
    134c:	e7a8      	b.n	12a0 <setvbuf+0x24>
    134e:	4b21      	ldr	r3, [pc, #132]	; (13d4 <setvbuf+0x158>)
    1350:	429c      	cmp	r4, r3
    1352:	bf08      	it	eq
    1354:	68f4      	ldreq	r4, [r6, #12]
    1356:	e7a3      	b.n	12a0 <setvbuf+0x24>
    1358:	2f00      	cmp	r7, #0
    135a:	d0d8      	beq.n	130e <setvbuf+0x92>
    135c:	69b3      	ldr	r3, [r6, #24]
    135e:	b913      	cbnz	r3, 1366 <setvbuf+0xea>
    1360:	4630      	mov	r0, r6
    1362:	f7ff fd61 	bl	e28 <__sinit>
    1366:	f1b8 0f01 	cmp.w	r8, #1
    136a:	bf08      	it	eq
    136c:	89a3      	ldrheq	r3, [r4, #12]
    136e:	6027      	str	r7, [r4, #0]
    1370:	bf04      	itt	eq
    1372:	f043 0301 	orreq.w	r3, r3, #1
    1376:	81a3      	strheq	r3, [r4, #12]
    1378:	89a3      	ldrh	r3, [r4, #12]
    137a:	6127      	str	r7, [r4, #16]
    137c:	f013 0008 	ands.w	r0, r3, #8
    1380:	6165      	str	r5, [r4, #20]
    1382:	d01b      	beq.n	13bc <setvbuf+0x140>
    1384:	f013 0001 	ands.w	r0, r3, #1
    1388:	bf18      	it	ne
    138a:	426d      	negne	r5, r5
    138c:	f04f 0300 	mov.w	r3, #0
    1390:	bf1d      	ittte	ne
    1392:	60a3      	strne	r3, [r4, #8]
    1394:	61a5      	strne	r5, [r4, #24]
    1396:	4618      	movne	r0, r3
    1398:	60a5      	streq	r5, [r4, #8]
    139a:	e7d0      	b.n	133e <setvbuf+0xc2>
    139c:	4648      	mov	r0, r9
    139e:	f000 f9b7 	bl	1710 <malloc>
    13a2:	4607      	mov	r7, r0
    13a4:	2800      	cmp	r0, #0
    13a6:	d0bc      	beq.n	1322 <setvbuf+0xa6>
    13a8:	89a3      	ldrh	r3, [r4, #12]
    13aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    13ae:	81a3      	strh	r3, [r4, #12]
    13b0:	464d      	mov	r5, r9
    13b2:	e7d3      	b.n	135c <setvbuf+0xe0>
    13b4:	2000      	movs	r0, #0
    13b6:	e7b6      	b.n	1326 <setvbuf+0xaa>
    13b8:	46a9      	mov	r9, r5
    13ba:	e7f5      	b.n	13a8 <setvbuf+0x12c>
    13bc:	60a0      	str	r0, [r4, #8]
    13be:	e7be      	b.n	133e <setvbuf+0xc2>
    13c0:	f04f 30ff 	mov.w	r0, #4294967295
    13c4:	e7bb      	b.n	133e <setvbuf+0xc2>
    13c6:	bf00      	nop
    13c8:	2000006c 	.word	0x2000006c
    13cc:	00002cd4 	.word	0x00002cd4
    13d0:	00002cf4 	.word	0x00002cf4
    13d4:	00002cb4 	.word	0x00002cb4

000013d8 <__sread>:
    13d8:	b510      	push	{r4, lr}
    13da:	460c      	mov	r4, r1
    13dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    13e0:	f000 ff48 	bl	2274 <_read_r>
    13e4:	2800      	cmp	r0, #0
    13e6:	bfab      	itete	ge
    13e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    13ea:	89a3      	ldrhlt	r3, [r4, #12]
    13ec:	181b      	addge	r3, r3, r0
    13ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    13f2:	bfac      	ite	ge
    13f4:	6563      	strge	r3, [r4, #84]	; 0x54
    13f6:	81a3      	strhlt	r3, [r4, #12]
    13f8:	bd10      	pop	{r4, pc}

000013fa <__swrite>:
    13fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13fe:	461f      	mov	r7, r3
    1400:	898b      	ldrh	r3, [r1, #12]
    1402:	05db      	lsls	r3, r3, #23
    1404:	4605      	mov	r5, r0
    1406:	460c      	mov	r4, r1
    1408:	4616      	mov	r6, r2
    140a:	d505      	bpl.n	1418 <__swrite+0x1e>
    140c:	2302      	movs	r3, #2
    140e:	2200      	movs	r2, #0
    1410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1414:	f000 f906 	bl	1624 <_lseek_r>
    1418:	89a3      	ldrh	r3, [r4, #12]
    141a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    141e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1422:	81a3      	strh	r3, [r4, #12]
    1424:	4632      	mov	r2, r6
    1426:	463b      	mov	r3, r7
    1428:	4628      	mov	r0, r5
    142a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    142e:	f000 b869 	b.w	1504 <_write_r>

00001432 <__sseek>:
    1432:	b510      	push	{r4, lr}
    1434:	460c      	mov	r4, r1
    1436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    143a:	f000 f8f3 	bl	1624 <_lseek_r>
    143e:	1c43      	adds	r3, r0, #1
    1440:	89a3      	ldrh	r3, [r4, #12]
    1442:	bf15      	itete	ne
    1444:	6560      	strne	r0, [r4, #84]	; 0x54
    1446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    144a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    144e:	81a3      	strheq	r3, [r4, #12]
    1450:	bf18      	it	ne
    1452:	81a3      	strhne	r3, [r4, #12]
    1454:	bd10      	pop	{r4, pc}

00001456 <__sclose>:
    1456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    145a:	f000 b8d3 	b.w	1604 <_close_r>
	...

00001460 <__swbuf_r>:
    1460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1462:	460e      	mov	r6, r1
    1464:	4614      	mov	r4, r2
    1466:	4605      	mov	r5, r0
    1468:	b118      	cbz	r0, 1472 <__swbuf_r+0x12>
    146a:	6983      	ldr	r3, [r0, #24]
    146c:	b90b      	cbnz	r3, 1472 <__swbuf_r+0x12>
    146e:	f7ff fcdb 	bl	e28 <__sinit>
    1472:	4b21      	ldr	r3, [pc, #132]	; (14f8 <__swbuf_r+0x98>)
    1474:	429c      	cmp	r4, r3
    1476:	d12a      	bne.n	14ce <__swbuf_r+0x6e>
    1478:	686c      	ldr	r4, [r5, #4]
    147a:	69a3      	ldr	r3, [r4, #24]
    147c:	60a3      	str	r3, [r4, #8]
    147e:	89a3      	ldrh	r3, [r4, #12]
    1480:	071a      	lsls	r2, r3, #28
    1482:	d52e      	bpl.n	14e2 <__swbuf_r+0x82>
    1484:	6923      	ldr	r3, [r4, #16]
    1486:	b363      	cbz	r3, 14e2 <__swbuf_r+0x82>
    1488:	6923      	ldr	r3, [r4, #16]
    148a:	6820      	ldr	r0, [r4, #0]
    148c:	1ac0      	subs	r0, r0, r3
    148e:	6963      	ldr	r3, [r4, #20]
    1490:	b2f6      	uxtb	r6, r6
    1492:	4298      	cmp	r0, r3
    1494:	4637      	mov	r7, r6
    1496:	db04      	blt.n	14a2 <__swbuf_r+0x42>
    1498:	4621      	mov	r1, r4
    149a:	4628      	mov	r0, r5
    149c:	f7ff fc48 	bl	d30 <_fflush_r>
    14a0:	bb28      	cbnz	r0, 14ee <__swbuf_r+0x8e>
    14a2:	68a3      	ldr	r3, [r4, #8]
    14a4:	3b01      	subs	r3, #1
    14a6:	60a3      	str	r3, [r4, #8]
    14a8:	6823      	ldr	r3, [r4, #0]
    14aa:	1c5a      	adds	r2, r3, #1
    14ac:	6022      	str	r2, [r4, #0]
    14ae:	701e      	strb	r6, [r3, #0]
    14b0:	6963      	ldr	r3, [r4, #20]
    14b2:	3001      	adds	r0, #1
    14b4:	4298      	cmp	r0, r3
    14b6:	d004      	beq.n	14c2 <__swbuf_r+0x62>
    14b8:	89a3      	ldrh	r3, [r4, #12]
    14ba:	07db      	lsls	r3, r3, #31
    14bc:	d519      	bpl.n	14f2 <__swbuf_r+0x92>
    14be:	2e0a      	cmp	r6, #10
    14c0:	d117      	bne.n	14f2 <__swbuf_r+0x92>
    14c2:	4621      	mov	r1, r4
    14c4:	4628      	mov	r0, r5
    14c6:	f7ff fc33 	bl	d30 <_fflush_r>
    14ca:	b190      	cbz	r0, 14f2 <__swbuf_r+0x92>
    14cc:	e00f      	b.n	14ee <__swbuf_r+0x8e>
    14ce:	4b0b      	ldr	r3, [pc, #44]	; (14fc <__swbuf_r+0x9c>)
    14d0:	429c      	cmp	r4, r3
    14d2:	d101      	bne.n	14d8 <__swbuf_r+0x78>
    14d4:	68ac      	ldr	r4, [r5, #8]
    14d6:	e7d0      	b.n	147a <__swbuf_r+0x1a>
    14d8:	4b09      	ldr	r3, [pc, #36]	; (1500 <__swbuf_r+0xa0>)
    14da:	429c      	cmp	r4, r3
    14dc:	bf08      	it	eq
    14de:	68ec      	ldreq	r4, [r5, #12]
    14e0:	e7cb      	b.n	147a <__swbuf_r+0x1a>
    14e2:	4621      	mov	r1, r4
    14e4:	4628      	mov	r0, r5
    14e6:	f000 f81f 	bl	1528 <__swsetup_r>
    14ea:	2800      	cmp	r0, #0
    14ec:	d0cc      	beq.n	1488 <__swbuf_r+0x28>
    14ee:	f04f 37ff 	mov.w	r7, #4294967295
    14f2:	4638      	mov	r0, r7
    14f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14f6:	bf00      	nop
    14f8:	00002cd4 	.word	0x00002cd4
    14fc:	00002cf4 	.word	0x00002cf4
    1500:	00002cb4 	.word	0x00002cb4

00001504 <_write_r>:
    1504:	b538      	push	{r3, r4, r5, lr}
    1506:	4c07      	ldr	r4, [pc, #28]	; (1524 <_write_r+0x20>)
    1508:	4605      	mov	r5, r0
    150a:	4608      	mov	r0, r1
    150c:	4611      	mov	r1, r2
    150e:	2200      	movs	r2, #0
    1510:	6022      	str	r2, [r4, #0]
    1512:	461a      	mov	r2, r3
    1514:	f7ff fb28 	bl	b68 <_write>
    1518:	1c43      	adds	r3, r0, #1
    151a:	d102      	bne.n	1522 <_write_r+0x1e>
    151c:	6823      	ldr	r3, [r4, #0]
    151e:	b103      	cbz	r3, 1522 <_write_r+0x1e>
    1520:	602b      	str	r3, [r5, #0]
    1522:	bd38      	pop	{r3, r4, r5, pc}
    1524:	200002ec 	.word	0x200002ec

00001528 <__swsetup_r>:
    1528:	4b32      	ldr	r3, [pc, #200]	; (15f4 <__swsetup_r+0xcc>)
    152a:	b570      	push	{r4, r5, r6, lr}
    152c:	681d      	ldr	r5, [r3, #0]
    152e:	4606      	mov	r6, r0
    1530:	460c      	mov	r4, r1
    1532:	b125      	cbz	r5, 153e <__swsetup_r+0x16>
    1534:	69ab      	ldr	r3, [r5, #24]
    1536:	b913      	cbnz	r3, 153e <__swsetup_r+0x16>
    1538:	4628      	mov	r0, r5
    153a:	f7ff fc75 	bl	e28 <__sinit>
    153e:	4b2e      	ldr	r3, [pc, #184]	; (15f8 <__swsetup_r+0xd0>)
    1540:	429c      	cmp	r4, r3
    1542:	d10f      	bne.n	1564 <__swsetup_r+0x3c>
    1544:	686c      	ldr	r4, [r5, #4]
    1546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    154a:	b29a      	uxth	r2, r3
    154c:	0715      	lsls	r5, r2, #28
    154e:	d42c      	bmi.n	15aa <__swsetup_r+0x82>
    1550:	06d0      	lsls	r0, r2, #27
    1552:	d411      	bmi.n	1578 <__swsetup_r+0x50>
    1554:	2209      	movs	r2, #9
    1556:	6032      	str	r2, [r6, #0]
    1558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    155c:	81a3      	strh	r3, [r4, #12]
    155e:	f04f 30ff 	mov.w	r0, #4294967295
    1562:	bd70      	pop	{r4, r5, r6, pc}
    1564:	4b25      	ldr	r3, [pc, #148]	; (15fc <__swsetup_r+0xd4>)
    1566:	429c      	cmp	r4, r3
    1568:	d101      	bne.n	156e <__swsetup_r+0x46>
    156a:	68ac      	ldr	r4, [r5, #8]
    156c:	e7eb      	b.n	1546 <__swsetup_r+0x1e>
    156e:	4b24      	ldr	r3, [pc, #144]	; (1600 <__swsetup_r+0xd8>)
    1570:	429c      	cmp	r4, r3
    1572:	bf08      	it	eq
    1574:	68ec      	ldreq	r4, [r5, #12]
    1576:	e7e6      	b.n	1546 <__swsetup_r+0x1e>
    1578:	0751      	lsls	r1, r2, #29
    157a:	d512      	bpl.n	15a2 <__swsetup_r+0x7a>
    157c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    157e:	b141      	cbz	r1, 1592 <__swsetup_r+0x6a>
    1580:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1584:	4299      	cmp	r1, r3
    1586:	d002      	beq.n	158e <__swsetup_r+0x66>
    1588:	4630      	mov	r0, r6
    158a:	f7ff fd1f 	bl	fcc <_free_r>
    158e:	2300      	movs	r3, #0
    1590:	6363      	str	r3, [r4, #52]	; 0x34
    1592:	89a3      	ldrh	r3, [r4, #12]
    1594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1598:	81a3      	strh	r3, [r4, #12]
    159a:	2300      	movs	r3, #0
    159c:	6063      	str	r3, [r4, #4]
    159e:	6923      	ldr	r3, [r4, #16]
    15a0:	6023      	str	r3, [r4, #0]
    15a2:	89a3      	ldrh	r3, [r4, #12]
    15a4:	f043 0308 	orr.w	r3, r3, #8
    15a8:	81a3      	strh	r3, [r4, #12]
    15aa:	6923      	ldr	r3, [r4, #16]
    15ac:	b94b      	cbnz	r3, 15c2 <__swsetup_r+0x9a>
    15ae:	89a3      	ldrh	r3, [r4, #12]
    15b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    15b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    15b8:	d003      	beq.n	15c2 <__swsetup_r+0x9a>
    15ba:	4621      	mov	r1, r4
    15bc:	4630      	mov	r0, r6
    15be:	f000 f867 	bl	1690 <__smakebuf_r>
    15c2:	89a2      	ldrh	r2, [r4, #12]
    15c4:	f012 0301 	ands.w	r3, r2, #1
    15c8:	d00c      	beq.n	15e4 <__swsetup_r+0xbc>
    15ca:	2300      	movs	r3, #0
    15cc:	60a3      	str	r3, [r4, #8]
    15ce:	6963      	ldr	r3, [r4, #20]
    15d0:	425b      	negs	r3, r3
    15d2:	61a3      	str	r3, [r4, #24]
    15d4:	6923      	ldr	r3, [r4, #16]
    15d6:	b953      	cbnz	r3, 15ee <__swsetup_r+0xc6>
    15d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    15dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    15e0:	d1ba      	bne.n	1558 <__swsetup_r+0x30>
    15e2:	bd70      	pop	{r4, r5, r6, pc}
    15e4:	0792      	lsls	r2, r2, #30
    15e6:	bf58      	it	pl
    15e8:	6963      	ldrpl	r3, [r4, #20]
    15ea:	60a3      	str	r3, [r4, #8]
    15ec:	e7f2      	b.n	15d4 <__swsetup_r+0xac>
    15ee:	2000      	movs	r0, #0
    15f0:	e7f7      	b.n	15e2 <__swsetup_r+0xba>
    15f2:	bf00      	nop
    15f4:	2000006c 	.word	0x2000006c
    15f8:	00002cd4 	.word	0x00002cd4
    15fc:	00002cf4 	.word	0x00002cf4
    1600:	00002cb4 	.word	0x00002cb4

00001604 <_close_r>:
    1604:	b538      	push	{r3, r4, r5, lr}
    1606:	4c06      	ldr	r4, [pc, #24]	; (1620 <_close_r+0x1c>)
    1608:	2300      	movs	r3, #0
    160a:	4605      	mov	r5, r0
    160c:	4608      	mov	r0, r1
    160e:	6023      	str	r3, [r4, #0]
    1610:	f7ff f80e 	bl	630 <_close>
    1614:	1c43      	adds	r3, r0, #1
    1616:	d102      	bne.n	161e <_close_r+0x1a>
    1618:	6823      	ldr	r3, [r4, #0]
    161a:	b103      	cbz	r3, 161e <_close_r+0x1a>
    161c:	602b      	str	r3, [r5, #0]
    161e:	bd38      	pop	{r3, r4, r5, pc}
    1620:	200002ec 	.word	0x200002ec

00001624 <_lseek_r>:
    1624:	b538      	push	{r3, r4, r5, lr}
    1626:	4c07      	ldr	r4, [pc, #28]	; (1644 <_lseek_r+0x20>)
    1628:	4605      	mov	r5, r0
    162a:	4608      	mov	r0, r1
    162c:	4611      	mov	r1, r2
    162e:	2200      	movs	r2, #0
    1630:	6022      	str	r2, [r4, #0]
    1632:	461a      	mov	r2, r3
    1634:	f7ff f806 	bl	644 <_lseek>
    1638:	1c43      	adds	r3, r0, #1
    163a:	d102      	bne.n	1642 <_lseek_r+0x1e>
    163c:	6823      	ldr	r3, [r4, #0]
    163e:	b103      	cbz	r3, 1642 <_lseek_r+0x1e>
    1640:	602b      	str	r3, [r5, #0]
    1642:	bd38      	pop	{r3, r4, r5, pc}
    1644:	200002ec 	.word	0x200002ec

00001648 <__swhatbuf_r>:
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	460e      	mov	r6, r1
    164c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1650:	2900      	cmp	r1, #0
    1652:	b090      	sub	sp, #64	; 0x40
    1654:	4614      	mov	r4, r2
    1656:	461d      	mov	r5, r3
    1658:	da07      	bge.n	166a <__swhatbuf_r+0x22>
    165a:	2300      	movs	r3, #0
    165c:	602b      	str	r3, [r5, #0]
    165e:	89b3      	ldrh	r3, [r6, #12]
    1660:	061a      	lsls	r2, r3, #24
    1662:	d410      	bmi.n	1686 <__swhatbuf_r+0x3e>
    1664:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1668:	e00e      	b.n	1688 <__swhatbuf_r+0x40>
    166a:	aa01      	add	r2, sp, #4
    166c:	f001 f8a8 	bl	27c0 <_fstat_r>
    1670:	2800      	cmp	r0, #0
    1672:	dbf2      	blt.n	165a <__swhatbuf_r+0x12>
    1674:	9a02      	ldr	r2, [sp, #8]
    1676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    167a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    167e:	425a      	negs	r2, r3
    1680:	415a      	adcs	r2, r3
    1682:	602a      	str	r2, [r5, #0]
    1684:	e7ee      	b.n	1664 <__swhatbuf_r+0x1c>
    1686:	2340      	movs	r3, #64	; 0x40
    1688:	2000      	movs	r0, #0
    168a:	6023      	str	r3, [r4, #0]
    168c:	b010      	add	sp, #64	; 0x40
    168e:	bd70      	pop	{r4, r5, r6, pc}

00001690 <__smakebuf_r>:
    1690:	898b      	ldrh	r3, [r1, #12]
    1692:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1694:	079d      	lsls	r5, r3, #30
    1696:	4606      	mov	r6, r0
    1698:	460c      	mov	r4, r1
    169a:	d507      	bpl.n	16ac <__smakebuf_r+0x1c>
    169c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    16a0:	6023      	str	r3, [r4, #0]
    16a2:	6123      	str	r3, [r4, #16]
    16a4:	2301      	movs	r3, #1
    16a6:	6163      	str	r3, [r4, #20]
    16a8:	b002      	add	sp, #8
    16aa:	bd70      	pop	{r4, r5, r6, pc}
    16ac:	ab01      	add	r3, sp, #4
    16ae:	466a      	mov	r2, sp
    16b0:	f7ff ffca 	bl	1648 <__swhatbuf_r>
    16b4:	9900      	ldr	r1, [sp, #0]
    16b6:	4605      	mov	r5, r0
    16b8:	4630      	mov	r0, r6
    16ba:	f7ff fcd5 	bl	1068 <_malloc_r>
    16be:	b948      	cbnz	r0, 16d4 <__smakebuf_r+0x44>
    16c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    16c4:	059a      	lsls	r2, r3, #22
    16c6:	d4ef      	bmi.n	16a8 <__smakebuf_r+0x18>
    16c8:	f023 0303 	bic.w	r3, r3, #3
    16cc:	f043 0302 	orr.w	r3, r3, #2
    16d0:	81a3      	strh	r3, [r4, #12]
    16d2:	e7e3      	b.n	169c <__smakebuf_r+0xc>
    16d4:	4b0d      	ldr	r3, [pc, #52]	; (170c <__smakebuf_r+0x7c>)
    16d6:	62b3      	str	r3, [r6, #40]	; 0x28
    16d8:	89a3      	ldrh	r3, [r4, #12]
    16da:	6020      	str	r0, [r4, #0]
    16dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    16e0:	81a3      	strh	r3, [r4, #12]
    16e2:	9b00      	ldr	r3, [sp, #0]
    16e4:	6163      	str	r3, [r4, #20]
    16e6:	9b01      	ldr	r3, [sp, #4]
    16e8:	6120      	str	r0, [r4, #16]
    16ea:	b15b      	cbz	r3, 1704 <__smakebuf_r+0x74>
    16ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    16f0:	4630      	mov	r0, r6
    16f2:	f001 f877 	bl	27e4 <_isatty_r>
    16f6:	b128      	cbz	r0, 1704 <__smakebuf_r+0x74>
    16f8:	89a3      	ldrh	r3, [r4, #12]
    16fa:	f023 0303 	bic.w	r3, r3, #3
    16fe:	f043 0301 	orr.w	r3, r3, #1
    1702:	81a3      	strh	r3, [r4, #12]
    1704:	89a3      	ldrh	r3, [r4, #12]
    1706:	431d      	orrs	r5, r3
    1708:	81a5      	strh	r5, [r4, #12]
    170a:	e7cd      	b.n	16a8 <__smakebuf_r+0x18>
    170c:	00000da9 	.word	0x00000da9

00001710 <malloc>:
    1710:	4b02      	ldr	r3, [pc, #8]	; (171c <malloc+0xc>)
    1712:	4601      	mov	r1, r0
    1714:	6818      	ldr	r0, [r3, #0]
    1716:	f7ff bca7 	b.w	1068 <_malloc_r>
    171a:	bf00      	nop
    171c:	2000006c 	.word	0x2000006c

00001720 <__malloc_lock>:
    1720:	4770      	bx	lr

00001722 <__malloc_unlock>:
    1722:	4770      	bx	lr

00001724 <__sfputc_r>:
    1724:	6893      	ldr	r3, [r2, #8]
    1726:	3b01      	subs	r3, #1
    1728:	2b00      	cmp	r3, #0
    172a:	b410      	push	{r4}
    172c:	6093      	str	r3, [r2, #8]
    172e:	da08      	bge.n	1742 <__sfputc_r+0x1e>
    1730:	6994      	ldr	r4, [r2, #24]
    1732:	42a3      	cmp	r3, r4
    1734:	db02      	blt.n	173c <__sfputc_r+0x18>
    1736:	b2cb      	uxtb	r3, r1
    1738:	2b0a      	cmp	r3, #10
    173a:	d102      	bne.n	1742 <__sfputc_r+0x1e>
    173c:	bc10      	pop	{r4}
    173e:	f7ff be8f 	b.w	1460 <__swbuf_r>
    1742:	6813      	ldr	r3, [r2, #0]
    1744:	1c58      	adds	r0, r3, #1
    1746:	6010      	str	r0, [r2, #0]
    1748:	7019      	strb	r1, [r3, #0]
    174a:	b2c8      	uxtb	r0, r1
    174c:	bc10      	pop	{r4}
    174e:	4770      	bx	lr

00001750 <__sfputs_r>:
    1750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1752:	4606      	mov	r6, r0
    1754:	460f      	mov	r7, r1
    1756:	4614      	mov	r4, r2
    1758:	18d5      	adds	r5, r2, r3
    175a:	42ac      	cmp	r4, r5
    175c:	d101      	bne.n	1762 <__sfputs_r+0x12>
    175e:	2000      	movs	r0, #0
    1760:	e007      	b.n	1772 <__sfputs_r+0x22>
    1762:	463a      	mov	r2, r7
    1764:	f814 1b01 	ldrb.w	r1, [r4], #1
    1768:	4630      	mov	r0, r6
    176a:	f7ff ffdb 	bl	1724 <__sfputc_r>
    176e:	1c43      	adds	r3, r0, #1
    1770:	d1f3      	bne.n	175a <__sfputs_r+0xa>
    1772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001774 <_vfiprintf_r>:
    1774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1778:	b09d      	sub	sp, #116	; 0x74
    177a:	460c      	mov	r4, r1
    177c:	4617      	mov	r7, r2
    177e:	9303      	str	r3, [sp, #12]
    1780:	4606      	mov	r6, r0
    1782:	b118      	cbz	r0, 178c <_vfiprintf_r+0x18>
    1784:	6983      	ldr	r3, [r0, #24]
    1786:	b90b      	cbnz	r3, 178c <_vfiprintf_r+0x18>
    1788:	f7ff fb4e 	bl	e28 <__sinit>
    178c:	4b7c      	ldr	r3, [pc, #496]	; (1980 <_vfiprintf_r+0x20c>)
    178e:	429c      	cmp	r4, r3
    1790:	d157      	bne.n	1842 <_vfiprintf_r+0xce>
    1792:	6874      	ldr	r4, [r6, #4]
    1794:	89a3      	ldrh	r3, [r4, #12]
    1796:	0718      	lsls	r0, r3, #28
    1798:	d55d      	bpl.n	1856 <_vfiprintf_r+0xe2>
    179a:	6923      	ldr	r3, [r4, #16]
    179c:	2b00      	cmp	r3, #0
    179e:	d05a      	beq.n	1856 <_vfiprintf_r+0xe2>
    17a0:	2300      	movs	r3, #0
    17a2:	9309      	str	r3, [sp, #36]	; 0x24
    17a4:	2320      	movs	r3, #32
    17a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    17aa:	2330      	movs	r3, #48	; 0x30
    17ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    17b0:	f04f 0b01 	mov.w	fp, #1
    17b4:	46b8      	mov	r8, r7
    17b6:	4645      	mov	r5, r8
    17b8:	f815 3b01 	ldrb.w	r3, [r5], #1
    17bc:	2b00      	cmp	r3, #0
    17be:	d155      	bne.n	186c <_vfiprintf_r+0xf8>
    17c0:	ebb8 0a07 	subs.w	sl, r8, r7
    17c4:	d00b      	beq.n	17de <_vfiprintf_r+0x6a>
    17c6:	4653      	mov	r3, sl
    17c8:	463a      	mov	r2, r7
    17ca:	4621      	mov	r1, r4
    17cc:	4630      	mov	r0, r6
    17ce:	f7ff ffbf 	bl	1750 <__sfputs_r>
    17d2:	3001      	adds	r0, #1
    17d4:	f000 80c4 	beq.w	1960 <_vfiprintf_r+0x1ec>
    17d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17da:	4453      	add	r3, sl
    17dc:	9309      	str	r3, [sp, #36]	; 0x24
    17de:	f898 3000 	ldrb.w	r3, [r8]
    17e2:	2b00      	cmp	r3, #0
    17e4:	f000 80bc 	beq.w	1960 <_vfiprintf_r+0x1ec>
    17e8:	2300      	movs	r3, #0
    17ea:	f04f 32ff 	mov.w	r2, #4294967295
    17ee:	9304      	str	r3, [sp, #16]
    17f0:	9307      	str	r3, [sp, #28]
    17f2:	9205      	str	r2, [sp, #20]
    17f4:	9306      	str	r3, [sp, #24]
    17f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    17fa:	931a      	str	r3, [sp, #104]	; 0x68
    17fc:	2205      	movs	r2, #5
    17fe:	7829      	ldrb	r1, [r5, #0]
    1800:	4860      	ldr	r0, [pc, #384]	; (1984 <_vfiprintf_r+0x210>)
    1802:	f001 f825 	bl	2850 <memchr>
    1806:	f105 0801 	add.w	r8, r5, #1
    180a:	9b04      	ldr	r3, [sp, #16]
    180c:	2800      	cmp	r0, #0
    180e:	d131      	bne.n	1874 <_vfiprintf_r+0x100>
    1810:	06d9      	lsls	r1, r3, #27
    1812:	bf44      	itt	mi
    1814:	2220      	movmi	r2, #32
    1816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    181a:	071a      	lsls	r2, r3, #28
    181c:	bf44      	itt	mi
    181e:	222b      	movmi	r2, #43	; 0x2b
    1820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1824:	782a      	ldrb	r2, [r5, #0]
    1826:	2a2a      	cmp	r2, #42	; 0x2a
    1828:	d02c      	beq.n	1884 <_vfiprintf_r+0x110>
    182a:	9a07      	ldr	r2, [sp, #28]
    182c:	2100      	movs	r1, #0
    182e:	200a      	movs	r0, #10
    1830:	46a8      	mov	r8, r5
    1832:	3501      	adds	r5, #1
    1834:	f898 3000 	ldrb.w	r3, [r8]
    1838:	3b30      	subs	r3, #48	; 0x30
    183a:	2b09      	cmp	r3, #9
    183c:	d96d      	bls.n	191a <_vfiprintf_r+0x1a6>
    183e:	b371      	cbz	r1, 189e <_vfiprintf_r+0x12a>
    1840:	e026      	b.n	1890 <_vfiprintf_r+0x11c>
    1842:	4b51      	ldr	r3, [pc, #324]	; (1988 <_vfiprintf_r+0x214>)
    1844:	429c      	cmp	r4, r3
    1846:	d101      	bne.n	184c <_vfiprintf_r+0xd8>
    1848:	68b4      	ldr	r4, [r6, #8]
    184a:	e7a3      	b.n	1794 <_vfiprintf_r+0x20>
    184c:	4b4f      	ldr	r3, [pc, #316]	; (198c <_vfiprintf_r+0x218>)
    184e:	429c      	cmp	r4, r3
    1850:	bf08      	it	eq
    1852:	68f4      	ldreq	r4, [r6, #12]
    1854:	e79e      	b.n	1794 <_vfiprintf_r+0x20>
    1856:	4621      	mov	r1, r4
    1858:	4630      	mov	r0, r6
    185a:	f7ff fe65 	bl	1528 <__swsetup_r>
    185e:	2800      	cmp	r0, #0
    1860:	d09e      	beq.n	17a0 <_vfiprintf_r+0x2c>
    1862:	f04f 30ff 	mov.w	r0, #4294967295
    1866:	b01d      	add	sp, #116	; 0x74
    1868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    186c:	2b25      	cmp	r3, #37	; 0x25
    186e:	d0a7      	beq.n	17c0 <_vfiprintf_r+0x4c>
    1870:	46a8      	mov	r8, r5
    1872:	e7a0      	b.n	17b6 <_vfiprintf_r+0x42>
    1874:	4a43      	ldr	r2, [pc, #268]	; (1984 <_vfiprintf_r+0x210>)
    1876:	1a80      	subs	r0, r0, r2
    1878:	fa0b f000 	lsl.w	r0, fp, r0
    187c:	4318      	orrs	r0, r3
    187e:	9004      	str	r0, [sp, #16]
    1880:	4645      	mov	r5, r8
    1882:	e7bb      	b.n	17fc <_vfiprintf_r+0x88>
    1884:	9a03      	ldr	r2, [sp, #12]
    1886:	1d11      	adds	r1, r2, #4
    1888:	6812      	ldr	r2, [r2, #0]
    188a:	9103      	str	r1, [sp, #12]
    188c:	2a00      	cmp	r2, #0
    188e:	db01      	blt.n	1894 <_vfiprintf_r+0x120>
    1890:	9207      	str	r2, [sp, #28]
    1892:	e004      	b.n	189e <_vfiprintf_r+0x12a>
    1894:	4252      	negs	r2, r2
    1896:	f043 0302 	orr.w	r3, r3, #2
    189a:	9207      	str	r2, [sp, #28]
    189c:	9304      	str	r3, [sp, #16]
    189e:	f898 3000 	ldrb.w	r3, [r8]
    18a2:	2b2e      	cmp	r3, #46	; 0x2e
    18a4:	d110      	bne.n	18c8 <_vfiprintf_r+0x154>
    18a6:	f898 3001 	ldrb.w	r3, [r8, #1]
    18aa:	2b2a      	cmp	r3, #42	; 0x2a
    18ac:	f108 0101 	add.w	r1, r8, #1
    18b0:	d137      	bne.n	1922 <_vfiprintf_r+0x1ae>
    18b2:	9b03      	ldr	r3, [sp, #12]
    18b4:	1d1a      	adds	r2, r3, #4
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	9203      	str	r2, [sp, #12]
    18ba:	2b00      	cmp	r3, #0
    18bc:	bfb8      	it	lt
    18be:	f04f 33ff 	movlt.w	r3, #4294967295
    18c2:	f108 0802 	add.w	r8, r8, #2
    18c6:	9305      	str	r3, [sp, #20]
    18c8:	4d31      	ldr	r5, [pc, #196]	; (1990 <_vfiprintf_r+0x21c>)
    18ca:	f898 1000 	ldrb.w	r1, [r8]
    18ce:	2203      	movs	r2, #3
    18d0:	4628      	mov	r0, r5
    18d2:	f000 ffbd 	bl	2850 <memchr>
    18d6:	b140      	cbz	r0, 18ea <_vfiprintf_r+0x176>
    18d8:	2340      	movs	r3, #64	; 0x40
    18da:	1b40      	subs	r0, r0, r5
    18dc:	fa03 f000 	lsl.w	r0, r3, r0
    18e0:	9b04      	ldr	r3, [sp, #16]
    18e2:	4303      	orrs	r3, r0
    18e4:	9304      	str	r3, [sp, #16]
    18e6:	f108 0801 	add.w	r8, r8, #1
    18ea:	f898 1000 	ldrb.w	r1, [r8]
    18ee:	4829      	ldr	r0, [pc, #164]	; (1994 <_vfiprintf_r+0x220>)
    18f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    18f4:	2206      	movs	r2, #6
    18f6:	f108 0701 	add.w	r7, r8, #1
    18fa:	f000 ffa9 	bl	2850 <memchr>
    18fe:	2800      	cmp	r0, #0
    1900:	d034      	beq.n	196c <_vfiprintf_r+0x1f8>
    1902:	4b25      	ldr	r3, [pc, #148]	; (1998 <_vfiprintf_r+0x224>)
    1904:	bb03      	cbnz	r3, 1948 <_vfiprintf_r+0x1d4>
    1906:	9b03      	ldr	r3, [sp, #12]
    1908:	3307      	adds	r3, #7
    190a:	f023 0307 	bic.w	r3, r3, #7
    190e:	3308      	adds	r3, #8
    1910:	9303      	str	r3, [sp, #12]
    1912:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1914:	444b      	add	r3, r9
    1916:	9309      	str	r3, [sp, #36]	; 0x24
    1918:	e74c      	b.n	17b4 <_vfiprintf_r+0x40>
    191a:	fb00 3202 	mla	r2, r0, r2, r3
    191e:	2101      	movs	r1, #1
    1920:	e786      	b.n	1830 <_vfiprintf_r+0xbc>
    1922:	2300      	movs	r3, #0
    1924:	9305      	str	r3, [sp, #20]
    1926:	4618      	mov	r0, r3
    1928:	250a      	movs	r5, #10
    192a:	4688      	mov	r8, r1
    192c:	3101      	adds	r1, #1
    192e:	f898 2000 	ldrb.w	r2, [r8]
    1932:	3a30      	subs	r2, #48	; 0x30
    1934:	2a09      	cmp	r2, #9
    1936:	d903      	bls.n	1940 <_vfiprintf_r+0x1cc>
    1938:	2b00      	cmp	r3, #0
    193a:	d0c5      	beq.n	18c8 <_vfiprintf_r+0x154>
    193c:	9005      	str	r0, [sp, #20]
    193e:	e7c3      	b.n	18c8 <_vfiprintf_r+0x154>
    1940:	fb05 2000 	mla	r0, r5, r0, r2
    1944:	2301      	movs	r3, #1
    1946:	e7f0      	b.n	192a <_vfiprintf_r+0x1b6>
    1948:	ab03      	add	r3, sp, #12
    194a:	9300      	str	r3, [sp, #0]
    194c:	4622      	mov	r2, r4
    194e:	4b13      	ldr	r3, [pc, #76]	; (199c <_vfiprintf_r+0x228>)
    1950:	a904      	add	r1, sp, #16
    1952:	4630      	mov	r0, r6
    1954:	f3af 8000 	nop.w
    1958:	f1b0 3fff 	cmp.w	r0, #4294967295
    195c:	4681      	mov	r9, r0
    195e:	d1d8      	bne.n	1912 <_vfiprintf_r+0x19e>
    1960:	89a3      	ldrh	r3, [r4, #12]
    1962:	065b      	lsls	r3, r3, #25
    1964:	f53f af7d 	bmi.w	1862 <_vfiprintf_r+0xee>
    1968:	9809      	ldr	r0, [sp, #36]	; 0x24
    196a:	e77c      	b.n	1866 <_vfiprintf_r+0xf2>
    196c:	ab03      	add	r3, sp, #12
    196e:	9300      	str	r3, [sp, #0]
    1970:	4622      	mov	r2, r4
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <_vfiprintf_r+0x228>)
    1974:	a904      	add	r1, sp, #16
    1976:	4630      	mov	r0, r6
    1978:	f000 f888 	bl	1a8c <_printf_i>
    197c:	e7ec      	b.n	1958 <_vfiprintf_r+0x1e4>
    197e:	bf00      	nop
    1980:	00002cd4 	.word	0x00002cd4
    1984:	00002d18 	.word	0x00002d18
    1988:	00002cf4 	.word	0x00002cf4
    198c:	00002cb4 	.word	0x00002cb4
    1990:	00002d1e 	.word	0x00002d1e
    1994:	00002d22 	.word	0x00002d22
    1998:	00000000 	.word	0x00000000
    199c:	00001751 	.word	0x00001751

000019a0 <_printf_common>:
    19a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19a4:	4691      	mov	r9, r2
    19a6:	461f      	mov	r7, r3
    19a8:	688a      	ldr	r2, [r1, #8]
    19aa:	690b      	ldr	r3, [r1, #16]
    19ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
    19b0:	4293      	cmp	r3, r2
    19b2:	bfb8      	it	lt
    19b4:	4613      	movlt	r3, r2
    19b6:	f8c9 3000 	str.w	r3, [r9]
    19ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    19be:	4606      	mov	r6, r0
    19c0:	460c      	mov	r4, r1
    19c2:	b112      	cbz	r2, 19ca <_printf_common+0x2a>
    19c4:	3301      	adds	r3, #1
    19c6:	f8c9 3000 	str.w	r3, [r9]
    19ca:	6823      	ldr	r3, [r4, #0]
    19cc:	0699      	lsls	r1, r3, #26
    19ce:	bf42      	ittt	mi
    19d0:	f8d9 3000 	ldrmi.w	r3, [r9]
    19d4:	3302      	addmi	r3, #2
    19d6:	f8c9 3000 	strmi.w	r3, [r9]
    19da:	6825      	ldr	r5, [r4, #0]
    19dc:	f015 0506 	ands.w	r5, r5, #6
    19e0:	d107      	bne.n	19f2 <_printf_common+0x52>
    19e2:	f104 0a19 	add.w	sl, r4, #25
    19e6:	68e3      	ldr	r3, [r4, #12]
    19e8:	f8d9 2000 	ldr.w	r2, [r9]
    19ec:	1a9b      	subs	r3, r3, r2
    19ee:	429d      	cmp	r5, r3
    19f0:	db29      	blt.n	1a46 <_printf_common+0xa6>
    19f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    19f6:	6822      	ldr	r2, [r4, #0]
    19f8:	3300      	adds	r3, #0
    19fa:	bf18      	it	ne
    19fc:	2301      	movne	r3, #1
    19fe:	0692      	lsls	r2, r2, #26
    1a00:	d42e      	bmi.n	1a60 <_printf_common+0xc0>
    1a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1a06:	4639      	mov	r1, r7
    1a08:	4630      	mov	r0, r6
    1a0a:	47c0      	blx	r8
    1a0c:	3001      	adds	r0, #1
    1a0e:	d021      	beq.n	1a54 <_printf_common+0xb4>
    1a10:	6823      	ldr	r3, [r4, #0]
    1a12:	68e5      	ldr	r5, [r4, #12]
    1a14:	f8d9 2000 	ldr.w	r2, [r9]
    1a18:	f003 0306 	and.w	r3, r3, #6
    1a1c:	2b04      	cmp	r3, #4
    1a1e:	bf08      	it	eq
    1a20:	1aad      	subeq	r5, r5, r2
    1a22:	68a3      	ldr	r3, [r4, #8]
    1a24:	6922      	ldr	r2, [r4, #16]
    1a26:	bf0c      	ite	eq
    1a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    1a2c:	2500      	movne	r5, #0
    1a2e:	4293      	cmp	r3, r2
    1a30:	bfc4      	itt	gt
    1a32:	1a9b      	subgt	r3, r3, r2
    1a34:	18ed      	addgt	r5, r5, r3
    1a36:	f04f 0900 	mov.w	r9, #0
    1a3a:	341a      	adds	r4, #26
    1a3c:	454d      	cmp	r5, r9
    1a3e:	d11b      	bne.n	1a78 <_printf_common+0xd8>
    1a40:	2000      	movs	r0, #0
    1a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a46:	2301      	movs	r3, #1
    1a48:	4652      	mov	r2, sl
    1a4a:	4639      	mov	r1, r7
    1a4c:	4630      	mov	r0, r6
    1a4e:	47c0      	blx	r8
    1a50:	3001      	adds	r0, #1
    1a52:	d103      	bne.n	1a5c <_printf_common+0xbc>
    1a54:	f04f 30ff 	mov.w	r0, #4294967295
    1a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a5c:	3501      	adds	r5, #1
    1a5e:	e7c2      	b.n	19e6 <_printf_common+0x46>
    1a60:	18e1      	adds	r1, r4, r3
    1a62:	1c5a      	adds	r2, r3, #1
    1a64:	2030      	movs	r0, #48	; 0x30
    1a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    1a6a:	4422      	add	r2, r4
    1a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    1a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1a74:	3302      	adds	r3, #2
    1a76:	e7c4      	b.n	1a02 <_printf_common+0x62>
    1a78:	2301      	movs	r3, #1
    1a7a:	4622      	mov	r2, r4
    1a7c:	4639      	mov	r1, r7
    1a7e:	4630      	mov	r0, r6
    1a80:	47c0      	blx	r8
    1a82:	3001      	adds	r0, #1
    1a84:	d0e6      	beq.n	1a54 <_printf_common+0xb4>
    1a86:	f109 0901 	add.w	r9, r9, #1
    1a8a:	e7d7      	b.n	1a3c <_printf_common+0x9c>

00001a8c <_printf_i>:
    1a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a90:	4617      	mov	r7, r2
    1a92:	7e0a      	ldrb	r2, [r1, #24]
    1a94:	b085      	sub	sp, #20
    1a96:	2a6e      	cmp	r2, #110	; 0x6e
    1a98:	4698      	mov	r8, r3
    1a9a:	4606      	mov	r6, r0
    1a9c:	460c      	mov	r4, r1
    1a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1aa0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    1aa4:	f000 80bc 	beq.w	1c20 <_printf_i+0x194>
    1aa8:	d81a      	bhi.n	1ae0 <_printf_i+0x54>
    1aaa:	2a63      	cmp	r2, #99	; 0x63
    1aac:	d02e      	beq.n	1b0c <_printf_i+0x80>
    1aae:	d80a      	bhi.n	1ac6 <_printf_i+0x3a>
    1ab0:	2a00      	cmp	r2, #0
    1ab2:	f000 80c8 	beq.w	1c46 <_printf_i+0x1ba>
    1ab6:	2a58      	cmp	r2, #88	; 0x58
    1ab8:	f000 808a 	beq.w	1bd0 <_printf_i+0x144>
    1abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1ac0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    1ac4:	e02a      	b.n	1b1c <_printf_i+0x90>
    1ac6:	2a64      	cmp	r2, #100	; 0x64
    1ac8:	d001      	beq.n	1ace <_printf_i+0x42>
    1aca:	2a69      	cmp	r2, #105	; 0x69
    1acc:	d1f6      	bne.n	1abc <_printf_i+0x30>
    1ace:	6821      	ldr	r1, [r4, #0]
    1ad0:	681a      	ldr	r2, [r3, #0]
    1ad2:	f011 0f80 	tst.w	r1, #128	; 0x80
    1ad6:	d023      	beq.n	1b20 <_printf_i+0x94>
    1ad8:	1d11      	adds	r1, r2, #4
    1ada:	6019      	str	r1, [r3, #0]
    1adc:	6813      	ldr	r3, [r2, #0]
    1ade:	e027      	b.n	1b30 <_printf_i+0xa4>
    1ae0:	2a73      	cmp	r2, #115	; 0x73
    1ae2:	f000 80b4 	beq.w	1c4e <_printf_i+0x1c2>
    1ae6:	d808      	bhi.n	1afa <_printf_i+0x6e>
    1ae8:	2a6f      	cmp	r2, #111	; 0x6f
    1aea:	d02a      	beq.n	1b42 <_printf_i+0xb6>
    1aec:	2a70      	cmp	r2, #112	; 0x70
    1aee:	d1e5      	bne.n	1abc <_printf_i+0x30>
    1af0:	680a      	ldr	r2, [r1, #0]
    1af2:	f042 0220 	orr.w	r2, r2, #32
    1af6:	600a      	str	r2, [r1, #0]
    1af8:	e003      	b.n	1b02 <_printf_i+0x76>
    1afa:	2a75      	cmp	r2, #117	; 0x75
    1afc:	d021      	beq.n	1b42 <_printf_i+0xb6>
    1afe:	2a78      	cmp	r2, #120	; 0x78
    1b00:	d1dc      	bne.n	1abc <_printf_i+0x30>
    1b02:	2278      	movs	r2, #120	; 0x78
    1b04:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    1b08:	496e      	ldr	r1, [pc, #440]	; (1cc4 <_printf_i+0x238>)
    1b0a:	e064      	b.n	1bd6 <_printf_i+0x14a>
    1b0c:	681a      	ldr	r2, [r3, #0]
    1b0e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    1b12:	1d11      	adds	r1, r2, #4
    1b14:	6019      	str	r1, [r3, #0]
    1b16:	6813      	ldr	r3, [r2, #0]
    1b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1b1c:	2301      	movs	r3, #1
    1b1e:	e0a3      	b.n	1c68 <_printf_i+0x1dc>
    1b20:	f011 0f40 	tst.w	r1, #64	; 0x40
    1b24:	f102 0104 	add.w	r1, r2, #4
    1b28:	6019      	str	r1, [r3, #0]
    1b2a:	d0d7      	beq.n	1adc <_printf_i+0x50>
    1b2c:	f9b2 3000 	ldrsh.w	r3, [r2]
    1b30:	2b00      	cmp	r3, #0
    1b32:	da03      	bge.n	1b3c <_printf_i+0xb0>
    1b34:	222d      	movs	r2, #45	; 0x2d
    1b36:	425b      	negs	r3, r3
    1b38:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    1b3c:	4962      	ldr	r1, [pc, #392]	; (1cc8 <_printf_i+0x23c>)
    1b3e:	220a      	movs	r2, #10
    1b40:	e017      	b.n	1b72 <_printf_i+0xe6>
    1b42:	6820      	ldr	r0, [r4, #0]
    1b44:	6819      	ldr	r1, [r3, #0]
    1b46:	f010 0f80 	tst.w	r0, #128	; 0x80
    1b4a:	d003      	beq.n	1b54 <_printf_i+0xc8>
    1b4c:	1d08      	adds	r0, r1, #4
    1b4e:	6018      	str	r0, [r3, #0]
    1b50:	680b      	ldr	r3, [r1, #0]
    1b52:	e006      	b.n	1b62 <_printf_i+0xd6>
    1b54:	f010 0f40 	tst.w	r0, #64	; 0x40
    1b58:	f101 0004 	add.w	r0, r1, #4
    1b5c:	6018      	str	r0, [r3, #0]
    1b5e:	d0f7      	beq.n	1b50 <_printf_i+0xc4>
    1b60:	880b      	ldrh	r3, [r1, #0]
    1b62:	4959      	ldr	r1, [pc, #356]	; (1cc8 <_printf_i+0x23c>)
    1b64:	2a6f      	cmp	r2, #111	; 0x6f
    1b66:	bf14      	ite	ne
    1b68:	220a      	movne	r2, #10
    1b6a:	2208      	moveq	r2, #8
    1b6c:	2000      	movs	r0, #0
    1b6e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    1b72:	6865      	ldr	r5, [r4, #4]
    1b74:	60a5      	str	r5, [r4, #8]
    1b76:	2d00      	cmp	r5, #0
    1b78:	f2c0 809c 	blt.w	1cb4 <_printf_i+0x228>
    1b7c:	6820      	ldr	r0, [r4, #0]
    1b7e:	f020 0004 	bic.w	r0, r0, #4
    1b82:	6020      	str	r0, [r4, #0]
    1b84:	2b00      	cmp	r3, #0
    1b86:	d13f      	bne.n	1c08 <_printf_i+0x17c>
    1b88:	2d00      	cmp	r5, #0
    1b8a:	f040 8095 	bne.w	1cb8 <_printf_i+0x22c>
    1b8e:	4675      	mov	r5, lr
    1b90:	2a08      	cmp	r2, #8
    1b92:	d10b      	bne.n	1bac <_printf_i+0x120>
    1b94:	6823      	ldr	r3, [r4, #0]
    1b96:	07da      	lsls	r2, r3, #31
    1b98:	d508      	bpl.n	1bac <_printf_i+0x120>
    1b9a:	6923      	ldr	r3, [r4, #16]
    1b9c:	6862      	ldr	r2, [r4, #4]
    1b9e:	429a      	cmp	r2, r3
    1ba0:	bfde      	ittt	le
    1ba2:	2330      	movle	r3, #48	; 0x30
    1ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
    1ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
    1bac:	ebae 0305 	sub.w	r3, lr, r5
    1bb0:	6123      	str	r3, [r4, #16]
    1bb2:	f8cd 8000 	str.w	r8, [sp]
    1bb6:	463b      	mov	r3, r7
    1bb8:	aa03      	add	r2, sp, #12
    1bba:	4621      	mov	r1, r4
    1bbc:	4630      	mov	r0, r6
    1bbe:	f7ff feef 	bl	19a0 <_printf_common>
    1bc2:	3001      	adds	r0, #1
    1bc4:	d155      	bne.n	1c72 <_printf_i+0x1e6>
    1bc6:	f04f 30ff 	mov.w	r0, #4294967295
    1bca:	b005      	add	sp, #20
    1bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1bd0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    1bd4:	493c      	ldr	r1, [pc, #240]	; (1cc8 <_printf_i+0x23c>)
    1bd6:	6822      	ldr	r2, [r4, #0]
    1bd8:	6818      	ldr	r0, [r3, #0]
    1bda:	f012 0f80 	tst.w	r2, #128	; 0x80
    1bde:	f100 0504 	add.w	r5, r0, #4
    1be2:	601d      	str	r5, [r3, #0]
    1be4:	d001      	beq.n	1bea <_printf_i+0x15e>
    1be6:	6803      	ldr	r3, [r0, #0]
    1be8:	e002      	b.n	1bf0 <_printf_i+0x164>
    1bea:	0655      	lsls	r5, r2, #25
    1bec:	d5fb      	bpl.n	1be6 <_printf_i+0x15a>
    1bee:	8803      	ldrh	r3, [r0, #0]
    1bf0:	07d0      	lsls	r0, r2, #31
    1bf2:	bf44      	itt	mi
    1bf4:	f042 0220 	orrmi.w	r2, r2, #32
    1bf8:	6022      	strmi	r2, [r4, #0]
    1bfa:	b91b      	cbnz	r3, 1c04 <_printf_i+0x178>
    1bfc:	6822      	ldr	r2, [r4, #0]
    1bfe:	f022 0220 	bic.w	r2, r2, #32
    1c02:	6022      	str	r2, [r4, #0]
    1c04:	2210      	movs	r2, #16
    1c06:	e7b1      	b.n	1b6c <_printf_i+0xe0>
    1c08:	4675      	mov	r5, lr
    1c0a:	fbb3 f0f2 	udiv	r0, r3, r2
    1c0e:	fb02 3310 	mls	r3, r2, r0, r3
    1c12:	5ccb      	ldrb	r3, [r1, r3]
    1c14:	f805 3d01 	strb.w	r3, [r5, #-1]!
    1c18:	4603      	mov	r3, r0
    1c1a:	2800      	cmp	r0, #0
    1c1c:	d1f5      	bne.n	1c0a <_printf_i+0x17e>
    1c1e:	e7b7      	b.n	1b90 <_printf_i+0x104>
    1c20:	6808      	ldr	r0, [r1, #0]
    1c22:	681a      	ldr	r2, [r3, #0]
    1c24:	6949      	ldr	r1, [r1, #20]
    1c26:	f010 0f80 	tst.w	r0, #128	; 0x80
    1c2a:	d004      	beq.n	1c36 <_printf_i+0x1aa>
    1c2c:	1d10      	adds	r0, r2, #4
    1c2e:	6018      	str	r0, [r3, #0]
    1c30:	6813      	ldr	r3, [r2, #0]
    1c32:	6019      	str	r1, [r3, #0]
    1c34:	e007      	b.n	1c46 <_printf_i+0x1ba>
    1c36:	f010 0f40 	tst.w	r0, #64	; 0x40
    1c3a:	f102 0004 	add.w	r0, r2, #4
    1c3e:	6018      	str	r0, [r3, #0]
    1c40:	6813      	ldr	r3, [r2, #0]
    1c42:	d0f6      	beq.n	1c32 <_printf_i+0x1a6>
    1c44:	8019      	strh	r1, [r3, #0]
    1c46:	2300      	movs	r3, #0
    1c48:	6123      	str	r3, [r4, #16]
    1c4a:	4675      	mov	r5, lr
    1c4c:	e7b1      	b.n	1bb2 <_printf_i+0x126>
    1c4e:	681a      	ldr	r2, [r3, #0]
    1c50:	1d11      	adds	r1, r2, #4
    1c52:	6019      	str	r1, [r3, #0]
    1c54:	6815      	ldr	r5, [r2, #0]
    1c56:	6862      	ldr	r2, [r4, #4]
    1c58:	2100      	movs	r1, #0
    1c5a:	4628      	mov	r0, r5
    1c5c:	f000 fdf8 	bl	2850 <memchr>
    1c60:	b108      	cbz	r0, 1c66 <_printf_i+0x1da>
    1c62:	1b40      	subs	r0, r0, r5
    1c64:	6060      	str	r0, [r4, #4]
    1c66:	6863      	ldr	r3, [r4, #4]
    1c68:	6123      	str	r3, [r4, #16]
    1c6a:	2300      	movs	r3, #0
    1c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    1c70:	e79f      	b.n	1bb2 <_printf_i+0x126>
    1c72:	6923      	ldr	r3, [r4, #16]
    1c74:	462a      	mov	r2, r5
    1c76:	4639      	mov	r1, r7
    1c78:	4630      	mov	r0, r6
    1c7a:	47c0      	blx	r8
    1c7c:	3001      	adds	r0, #1
    1c7e:	d0a2      	beq.n	1bc6 <_printf_i+0x13a>
    1c80:	6823      	ldr	r3, [r4, #0]
    1c82:	079b      	lsls	r3, r3, #30
    1c84:	d507      	bpl.n	1c96 <_printf_i+0x20a>
    1c86:	2500      	movs	r5, #0
    1c88:	f104 0919 	add.w	r9, r4, #25
    1c8c:	68e3      	ldr	r3, [r4, #12]
    1c8e:	9a03      	ldr	r2, [sp, #12]
    1c90:	1a9b      	subs	r3, r3, r2
    1c92:	429d      	cmp	r5, r3
    1c94:	db05      	blt.n	1ca2 <_printf_i+0x216>
    1c96:	68e0      	ldr	r0, [r4, #12]
    1c98:	9b03      	ldr	r3, [sp, #12]
    1c9a:	4298      	cmp	r0, r3
    1c9c:	bfb8      	it	lt
    1c9e:	4618      	movlt	r0, r3
    1ca0:	e793      	b.n	1bca <_printf_i+0x13e>
    1ca2:	2301      	movs	r3, #1
    1ca4:	464a      	mov	r2, r9
    1ca6:	4639      	mov	r1, r7
    1ca8:	4630      	mov	r0, r6
    1caa:	47c0      	blx	r8
    1cac:	3001      	adds	r0, #1
    1cae:	d08a      	beq.n	1bc6 <_printf_i+0x13a>
    1cb0:	3501      	adds	r5, #1
    1cb2:	e7eb      	b.n	1c8c <_printf_i+0x200>
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d1a7      	bne.n	1c08 <_printf_i+0x17c>
    1cb8:	780b      	ldrb	r3, [r1, #0]
    1cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1cc2:	e765      	b.n	1b90 <_printf_i+0x104>
    1cc4:	00002d3a 	.word	0x00002d3a
    1cc8:	00002d29 	.word	0x00002d29

00001ccc <__svfiscanf_r>:
    1ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cd0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    1cd4:	f10d 080c 	add.w	r8, sp, #12
    1cd8:	9301      	str	r3, [sp, #4]
    1cda:	2300      	movs	r3, #0
    1cdc:	9346      	str	r3, [sp, #280]	; 0x118
    1cde:	9347      	str	r3, [sp, #284]	; 0x11c
    1ce0:	4ba0      	ldr	r3, [pc, #640]	; (1f64 <__svfiscanf_r+0x298>)
    1ce2:	93a2      	str	r3, [sp, #648]	; 0x288
    1ce4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 1f6c <__svfiscanf_r+0x2a0>
    1ce8:	4b9f      	ldr	r3, [pc, #636]	; (1f68 <__svfiscanf_r+0x29c>)
    1cea:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    1cee:	4606      	mov	r6, r0
    1cf0:	460c      	mov	r4, r1
    1cf2:	93a3      	str	r3, [sp, #652]	; 0x28c
    1cf4:	4692      	mov	sl, r2
    1cf6:	270a      	movs	r7, #10
    1cf8:	f89a 3000 	ldrb.w	r3, [sl]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	f000 812f 	beq.w	1f60 <__svfiscanf_r+0x294>
    1d02:	f000 fd83 	bl	280c <__locale_ctype_ptr>
    1d06:	f89a b000 	ldrb.w	fp, [sl]
    1d0a:	4458      	add	r0, fp
    1d0c:	7843      	ldrb	r3, [r0, #1]
    1d0e:	f013 0308 	ands.w	r3, r3, #8
    1d12:	d143      	bne.n	1d9c <__svfiscanf_r+0xd0>
    1d14:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    1d18:	f10a 0501 	add.w	r5, sl, #1
    1d1c:	f040 8099 	bne.w	1e52 <__svfiscanf_r+0x186>
    1d20:	9345      	str	r3, [sp, #276]	; 0x114
    1d22:	9343      	str	r3, [sp, #268]	; 0x10c
    1d24:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1d28:	2b2a      	cmp	r3, #42	; 0x2a
    1d2a:	d103      	bne.n	1d34 <__svfiscanf_r+0x68>
    1d2c:	2310      	movs	r3, #16
    1d2e:	9343      	str	r3, [sp, #268]	; 0x10c
    1d30:	f10a 0502 	add.w	r5, sl, #2
    1d34:	7829      	ldrb	r1, [r5, #0]
    1d36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    1d3a:	2a09      	cmp	r2, #9
    1d3c:	46aa      	mov	sl, r5
    1d3e:	f105 0501 	add.w	r5, r5, #1
    1d42:	d941      	bls.n	1dc8 <__svfiscanf_r+0xfc>
    1d44:	2203      	movs	r2, #3
    1d46:	4889      	ldr	r0, [pc, #548]	; (1f6c <__svfiscanf_r+0x2a0>)
    1d48:	f000 fd82 	bl	2850 <memchr>
    1d4c:	b138      	cbz	r0, 1d5e <__svfiscanf_r+0x92>
    1d4e:	eba0 0309 	sub.w	r3, r0, r9
    1d52:	2001      	movs	r0, #1
    1d54:	4098      	lsls	r0, r3
    1d56:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    1d58:	4318      	orrs	r0, r3
    1d5a:	9043      	str	r0, [sp, #268]	; 0x10c
    1d5c:	46aa      	mov	sl, r5
    1d5e:	f89a 3000 	ldrb.w	r3, [sl]
    1d62:	2b67      	cmp	r3, #103	; 0x67
    1d64:	f10a 0501 	add.w	r5, sl, #1
    1d68:	d84a      	bhi.n	1e00 <__svfiscanf_r+0x134>
    1d6a:	2b65      	cmp	r3, #101	; 0x65
    1d6c:	f080 80b7 	bcs.w	1ede <__svfiscanf_r+0x212>
    1d70:	2b47      	cmp	r3, #71	; 0x47
    1d72:	d82f      	bhi.n	1dd4 <__svfiscanf_r+0x108>
    1d74:	2b45      	cmp	r3, #69	; 0x45
    1d76:	f080 80b2 	bcs.w	1ede <__svfiscanf_r+0x212>
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	f000 8082 	beq.w	1e84 <__svfiscanf_r+0x1b8>
    1d80:	2b25      	cmp	r3, #37	; 0x25
    1d82:	d066      	beq.n	1e52 <__svfiscanf_r+0x186>
    1d84:	2303      	movs	r3, #3
    1d86:	9349      	str	r3, [sp, #292]	; 0x124
    1d88:	9744      	str	r7, [sp, #272]	; 0x110
    1d8a:	e045      	b.n	1e18 <__svfiscanf_r+0x14c>
    1d8c:	9947      	ldr	r1, [sp, #284]	; 0x11c
    1d8e:	3101      	adds	r1, #1
    1d90:	9147      	str	r1, [sp, #284]	; 0x11c
    1d92:	6861      	ldr	r1, [r4, #4]
    1d94:	3301      	adds	r3, #1
    1d96:	3901      	subs	r1, #1
    1d98:	6061      	str	r1, [r4, #4]
    1d9a:	6023      	str	r3, [r4, #0]
    1d9c:	6863      	ldr	r3, [r4, #4]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	dd0b      	ble.n	1dba <__svfiscanf_r+0xee>
    1da2:	f000 fd33 	bl	280c <__locale_ctype_ptr>
    1da6:	6823      	ldr	r3, [r4, #0]
    1da8:	7819      	ldrb	r1, [r3, #0]
    1daa:	4408      	add	r0, r1
    1dac:	7841      	ldrb	r1, [r0, #1]
    1dae:	070d      	lsls	r5, r1, #28
    1db0:	d4ec      	bmi.n	1d8c <__svfiscanf_r+0xc0>
    1db2:	f10a 0501 	add.w	r5, sl, #1
    1db6:	46aa      	mov	sl, r5
    1db8:	e79e      	b.n	1cf8 <__svfiscanf_r+0x2c>
    1dba:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    1dbc:	4621      	mov	r1, r4
    1dbe:	4630      	mov	r0, r6
    1dc0:	4798      	blx	r3
    1dc2:	2800      	cmp	r0, #0
    1dc4:	d0ed      	beq.n	1da2 <__svfiscanf_r+0xd6>
    1dc6:	e7f4      	b.n	1db2 <__svfiscanf_r+0xe6>
    1dc8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    1dca:	fb07 1303 	mla	r3, r7, r3, r1
    1dce:	3b30      	subs	r3, #48	; 0x30
    1dd0:	9345      	str	r3, [sp, #276]	; 0x114
    1dd2:	e7af      	b.n	1d34 <__svfiscanf_r+0x68>
    1dd4:	2b5b      	cmp	r3, #91	; 0x5b
    1dd6:	d061      	beq.n	1e9c <__svfiscanf_r+0x1d0>
    1dd8:	d80c      	bhi.n	1df4 <__svfiscanf_r+0x128>
    1dda:	2b58      	cmp	r3, #88	; 0x58
    1ddc:	d1d2      	bne.n	1d84 <__svfiscanf_r+0xb8>
    1dde:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    1de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    1de4:	9243      	str	r2, [sp, #268]	; 0x10c
    1de6:	2210      	movs	r2, #16
    1de8:	9244      	str	r2, [sp, #272]	; 0x110
    1dea:	2b6f      	cmp	r3, #111	; 0x6f
    1dec:	bfb4      	ite	lt
    1dee:	2303      	movlt	r3, #3
    1df0:	2304      	movge	r3, #4
    1df2:	e010      	b.n	1e16 <__svfiscanf_r+0x14a>
    1df4:	2b63      	cmp	r3, #99	; 0x63
    1df6:	d05c      	beq.n	1eb2 <__svfiscanf_r+0x1e6>
    1df8:	2b64      	cmp	r3, #100	; 0x64
    1dfa:	d1c3      	bne.n	1d84 <__svfiscanf_r+0xb8>
    1dfc:	9744      	str	r7, [sp, #272]	; 0x110
    1dfe:	e7f4      	b.n	1dea <__svfiscanf_r+0x11e>
    1e00:	2b70      	cmp	r3, #112	; 0x70
    1e02:	d042      	beq.n	1e8a <__svfiscanf_r+0x1be>
    1e04:	d81d      	bhi.n	1e42 <__svfiscanf_r+0x176>
    1e06:	2b6e      	cmp	r3, #110	; 0x6e
    1e08:	d059      	beq.n	1ebe <__svfiscanf_r+0x1f2>
    1e0a:	d843      	bhi.n	1e94 <__svfiscanf_r+0x1c8>
    1e0c:	2b69      	cmp	r3, #105	; 0x69
    1e0e:	d1b9      	bne.n	1d84 <__svfiscanf_r+0xb8>
    1e10:	2300      	movs	r3, #0
    1e12:	9344      	str	r3, [sp, #272]	; 0x110
    1e14:	2303      	movs	r3, #3
    1e16:	9349      	str	r3, [sp, #292]	; 0x124
    1e18:	6863      	ldr	r3, [r4, #4]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	dd61      	ble.n	1ee2 <__svfiscanf_r+0x216>
    1e1e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    1e20:	0659      	lsls	r1, r3, #25
    1e22:	d56f      	bpl.n	1f04 <__svfiscanf_r+0x238>
    1e24:	9b49      	ldr	r3, [sp, #292]	; 0x124
    1e26:	2b02      	cmp	r3, #2
    1e28:	dc7c      	bgt.n	1f24 <__svfiscanf_r+0x258>
    1e2a:	ab01      	add	r3, sp, #4
    1e2c:	4622      	mov	r2, r4
    1e2e:	a943      	add	r1, sp, #268	; 0x10c
    1e30:	4630      	mov	r0, r6
    1e32:	f000 f8c7 	bl	1fc4 <_scanf_chars>
    1e36:	2801      	cmp	r0, #1
    1e38:	f000 8092 	beq.w	1f60 <__svfiscanf_r+0x294>
    1e3c:	2802      	cmp	r0, #2
    1e3e:	d1ba      	bne.n	1db6 <__svfiscanf_r+0xea>
    1e40:	e01d      	b.n	1e7e <__svfiscanf_r+0x1b2>
    1e42:	2b75      	cmp	r3, #117	; 0x75
    1e44:	d0da      	beq.n	1dfc <__svfiscanf_r+0x130>
    1e46:	2b78      	cmp	r3, #120	; 0x78
    1e48:	d0c9      	beq.n	1dde <__svfiscanf_r+0x112>
    1e4a:	2b73      	cmp	r3, #115	; 0x73
    1e4c:	d19a      	bne.n	1d84 <__svfiscanf_r+0xb8>
    1e4e:	2302      	movs	r3, #2
    1e50:	e7e1      	b.n	1e16 <__svfiscanf_r+0x14a>
    1e52:	6863      	ldr	r3, [r4, #4]
    1e54:	2b00      	cmp	r3, #0
    1e56:	dd0c      	ble.n	1e72 <__svfiscanf_r+0x1a6>
    1e58:	6823      	ldr	r3, [r4, #0]
    1e5a:	781a      	ldrb	r2, [r3, #0]
    1e5c:	4593      	cmp	fp, r2
    1e5e:	d17f      	bne.n	1f60 <__svfiscanf_r+0x294>
    1e60:	3301      	adds	r3, #1
    1e62:	6862      	ldr	r2, [r4, #4]
    1e64:	6023      	str	r3, [r4, #0]
    1e66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    1e68:	3a01      	subs	r2, #1
    1e6a:	3301      	adds	r3, #1
    1e6c:	6062      	str	r2, [r4, #4]
    1e6e:	9347      	str	r3, [sp, #284]	; 0x11c
    1e70:	e7a1      	b.n	1db6 <__svfiscanf_r+0xea>
    1e72:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    1e74:	4621      	mov	r1, r4
    1e76:	4630      	mov	r0, r6
    1e78:	4798      	blx	r3
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d0ec      	beq.n	1e58 <__svfiscanf_r+0x18c>
    1e7e:	9846      	ldr	r0, [sp, #280]	; 0x118
    1e80:	2800      	cmp	r0, #0
    1e82:	d163      	bne.n	1f4c <__svfiscanf_r+0x280>
    1e84:	f04f 30ff 	mov.w	r0, #4294967295
    1e88:	e066      	b.n	1f58 <__svfiscanf_r+0x28c>
    1e8a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    1e8c:	f042 0220 	orr.w	r2, r2, #32
    1e90:	9243      	str	r2, [sp, #268]	; 0x10c
    1e92:	e7a4      	b.n	1dde <__svfiscanf_r+0x112>
    1e94:	2308      	movs	r3, #8
    1e96:	9344      	str	r3, [sp, #272]	; 0x110
    1e98:	2304      	movs	r3, #4
    1e9a:	e7bc      	b.n	1e16 <__svfiscanf_r+0x14a>
    1e9c:	4629      	mov	r1, r5
    1e9e:	4640      	mov	r0, r8
    1ea0:	f000 fa8e 	bl	23c0 <__sccl>
    1ea4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    1ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1eaa:	9343      	str	r3, [sp, #268]	; 0x10c
    1eac:	4605      	mov	r5, r0
    1eae:	2301      	movs	r3, #1
    1eb0:	e7b1      	b.n	1e16 <__svfiscanf_r+0x14a>
    1eb2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    1eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1eb8:	9343      	str	r3, [sp, #268]	; 0x10c
    1eba:	2300      	movs	r3, #0
    1ebc:	e7ab      	b.n	1e16 <__svfiscanf_r+0x14a>
    1ebe:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    1ec0:	06d0      	lsls	r0, r2, #27
    1ec2:	f53f af78 	bmi.w	1db6 <__svfiscanf_r+0xea>
    1ec6:	f012 0f01 	tst.w	r2, #1
    1eca:	9a01      	ldr	r2, [sp, #4]
    1ecc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    1ece:	f102 0104 	add.w	r1, r2, #4
    1ed2:	9101      	str	r1, [sp, #4]
    1ed4:	6812      	ldr	r2, [r2, #0]
    1ed6:	bf14      	ite	ne
    1ed8:	8013      	strhne	r3, [r2, #0]
    1eda:	6013      	streq	r3, [r2, #0]
    1edc:	e76b      	b.n	1db6 <__svfiscanf_r+0xea>
    1ede:	2305      	movs	r3, #5
    1ee0:	e799      	b.n	1e16 <__svfiscanf_r+0x14a>
    1ee2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    1ee4:	4621      	mov	r1, r4
    1ee6:	4630      	mov	r0, r6
    1ee8:	4798      	blx	r3
    1eea:	2800      	cmp	r0, #0
    1eec:	d097      	beq.n	1e1e <__svfiscanf_r+0x152>
    1eee:	e7c6      	b.n	1e7e <__svfiscanf_r+0x1b2>
    1ef0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    1ef2:	3201      	adds	r2, #1
    1ef4:	9247      	str	r2, [sp, #284]	; 0x11c
    1ef6:	6862      	ldr	r2, [r4, #4]
    1ef8:	3a01      	subs	r2, #1
    1efa:	2a00      	cmp	r2, #0
    1efc:	6062      	str	r2, [r4, #4]
    1efe:	dd0a      	ble.n	1f16 <__svfiscanf_r+0x24a>
    1f00:	3301      	adds	r3, #1
    1f02:	6023      	str	r3, [r4, #0]
    1f04:	f000 fc82 	bl	280c <__locale_ctype_ptr>
    1f08:	6823      	ldr	r3, [r4, #0]
    1f0a:	781a      	ldrb	r2, [r3, #0]
    1f0c:	4410      	add	r0, r2
    1f0e:	7842      	ldrb	r2, [r0, #1]
    1f10:	0712      	lsls	r2, r2, #28
    1f12:	d4ed      	bmi.n	1ef0 <__svfiscanf_r+0x224>
    1f14:	e786      	b.n	1e24 <__svfiscanf_r+0x158>
    1f16:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    1f18:	4621      	mov	r1, r4
    1f1a:	4630      	mov	r0, r6
    1f1c:	4798      	blx	r3
    1f1e:	2800      	cmp	r0, #0
    1f20:	d0f0      	beq.n	1f04 <__svfiscanf_r+0x238>
    1f22:	e7ac      	b.n	1e7e <__svfiscanf_r+0x1b2>
    1f24:	2b04      	cmp	r3, #4
    1f26:	dc06      	bgt.n	1f36 <__svfiscanf_r+0x26a>
    1f28:	ab01      	add	r3, sp, #4
    1f2a:	4622      	mov	r2, r4
    1f2c:	a943      	add	r1, sp, #268	; 0x10c
    1f2e:	4630      	mov	r0, r6
    1f30:	f000 f8ac 	bl	208c <_scanf_i>
    1f34:	e77f      	b.n	1e36 <__svfiscanf_r+0x16a>
    1f36:	4b0e      	ldr	r3, [pc, #56]	; (1f70 <__svfiscanf_r+0x2a4>)
    1f38:	2b00      	cmp	r3, #0
    1f3a:	f43f af3c 	beq.w	1db6 <__svfiscanf_r+0xea>
    1f3e:	ab01      	add	r3, sp, #4
    1f40:	4622      	mov	r2, r4
    1f42:	a943      	add	r1, sp, #268	; 0x10c
    1f44:	4630      	mov	r0, r6
    1f46:	f3af 8000 	nop.w
    1f4a:	e774      	b.n	1e36 <__svfiscanf_r+0x16a>
    1f4c:	89a3      	ldrh	r3, [r4, #12]
    1f4e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1f52:	bf18      	it	ne
    1f54:	f04f 30ff 	movne.w	r0, #4294967295
    1f58:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    1f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f60:	9846      	ldr	r0, [sp, #280]	; 0x118
    1f62:	e7f9      	b.n	1f58 <__svfiscanf_r+0x28c>
    1f64:	000026dd 	.word	0x000026dd
    1f68:	000022ad 	.word	0x000022ad
    1f6c:	00002d1e 	.word	0x00002d1e
    1f70:	00000000 	.word	0x00000000

00001f74 <_vfiscanf_r>:
    1f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f78:	460c      	mov	r4, r1
    1f7a:	4616      	mov	r6, r2
    1f7c:	461f      	mov	r7, r3
    1f7e:	4605      	mov	r5, r0
    1f80:	b118      	cbz	r0, 1f8a <_vfiscanf_r+0x16>
    1f82:	6983      	ldr	r3, [r0, #24]
    1f84:	b90b      	cbnz	r3, 1f8a <_vfiscanf_r+0x16>
    1f86:	f7fe ff4f 	bl	e28 <__sinit>
    1f8a:	4b0b      	ldr	r3, [pc, #44]	; (1fb8 <_vfiscanf_r+0x44>)
    1f8c:	429c      	cmp	r4, r3
    1f8e:	d108      	bne.n	1fa2 <_vfiscanf_r+0x2e>
    1f90:	686c      	ldr	r4, [r5, #4]
    1f92:	463b      	mov	r3, r7
    1f94:	4632      	mov	r2, r6
    1f96:	4621      	mov	r1, r4
    1f98:	4628      	mov	r0, r5
    1f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1f9e:	f7ff be95 	b.w	1ccc <__svfiscanf_r>
    1fa2:	4b06      	ldr	r3, [pc, #24]	; (1fbc <_vfiscanf_r+0x48>)
    1fa4:	429c      	cmp	r4, r3
    1fa6:	d101      	bne.n	1fac <_vfiscanf_r+0x38>
    1fa8:	68ac      	ldr	r4, [r5, #8]
    1faa:	e7f2      	b.n	1f92 <_vfiscanf_r+0x1e>
    1fac:	4b04      	ldr	r3, [pc, #16]	; (1fc0 <_vfiscanf_r+0x4c>)
    1fae:	429c      	cmp	r4, r3
    1fb0:	bf08      	it	eq
    1fb2:	68ec      	ldreq	r4, [r5, #12]
    1fb4:	e7ed      	b.n	1f92 <_vfiscanf_r+0x1e>
    1fb6:	bf00      	nop
    1fb8:	00002cd4 	.word	0x00002cd4
    1fbc:	00002cf4 	.word	0x00002cf4
    1fc0:	00002cb4 	.word	0x00002cb4

00001fc4 <_scanf_chars>:
    1fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc8:	4615      	mov	r5, r2
    1fca:	688a      	ldr	r2, [r1, #8]
    1fcc:	4680      	mov	r8, r0
    1fce:	460c      	mov	r4, r1
    1fd0:	b932      	cbnz	r2, 1fe0 <_scanf_chars+0x1c>
    1fd2:	698a      	ldr	r2, [r1, #24]
    1fd4:	2a00      	cmp	r2, #0
    1fd6:	bf0c      	ite	eq
    1fd8:	2201      	moveq	r2, #1
    1fda:	f04f 32ff 	movne.w	r2, #4294967295
    1fde:	608a      	str	r2, [r1, #8]
    1fe0:	6822      	ldr	r2, [r4, #0]
    1fe2:	06d1      	lsls	r1, r2, #27
    1fe4:	bf5f      	itttt	pl
    1fe6:	681a      	ldrpl	r2, [r3, #0]
    1fe8:	1d11      	addpl	r1, r2, #4
    1fea:	6019      	strpl	r1, [r3, #0]
    1fec:	6817      	ldrpl	r7, [r2, #0]
    1fee:	2600      	movs	r6, #0
    1ff0:	69a3      	ldr	r3, [r4, #24]
    1ff2:	b1db      	cbz	r3, 202c <_scanf_chars+0x68>
    1ff4:	2b01      	cmp	r3, #1
    1ff6:	d107      	bne.n	2008 <_scanf_chars+0x44>
    1ff8:	682b      	ldr	r3, [r5, #0]
    1ffa:	6962      	ldr	r2, [r4, #20]
    1ffc:	781b      	ldrb	r3, [r3, #0]
    1ffe:	5cd3      	ldrb	r3, [r2, r3]
    2000:	b9a3      	cbnz	r3, 202c <_scanf_chars+0x68>
    2002:	2e00      	cmp	r6, #0
    2004:	d132      	bne.n	206c <_scanf_chars+0xa8>
    2006:	e006      	b.n	2016 <_scanf_chars+0x52>
    2008:	2b02      	cmp	r3, #2
    200a:	d007      	beq.n	201c <_scanf_chars+0x58>
    200c:	2e00      	cmp	r6, #0
    200e:	d12d      	bne.n	206c <_scanf_chars+0xa8>
    2010:	69a3      	ldr	r3, [r4, #24]
    2012:	2b01      	cmp	r3, #1
    2014:	d12a      	bne.n	206c <_scanf_chars+0xa8>
    2016:	2001      	movs	r0, #1
    2018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    201c:	f000 fbf6 	bl	280c <__locale_ctype_ptr>
    2020:	682b      	ldr	r3, [r5, #0]
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	4418      	add	r0, r3
    2026:	7843      	ldrb	r3, [r0, #1]
    2028:	071b      	lsls	r3, r3, #28
    202a:	d4ef      	bmi.n	200c <_scanf_chars+0x48>
    202c:	6823      	ldr	r3, [r4, #0]
    202e:	06da      	lsls	r2, r3, #27
    2030:	bf5e      	ittt	pl
    2032:	682b      	ldrpl	r3, [r5, #0]
    2034:	781b      	ldrbpl	r3, [r3, #0]
    2036:	703b      	strbpl	r3, [r7, #0]
    2038:	682a      	ldr	r2, [r5, #0]
    203a:	686b      	ldr	r3, [r5, #4]
    203c:	f102 0201 	add.w	r2, r2, #1
    2040:	602a      	str	r2, [r5, #0]
    2042:	68a2      	ldr	r2, [r4, #8]
    2044:	f103 33ff 	add.w	r3, r3, #4294967295
    2048:	f102 32ff 	add.w	r2, r2, #4294967295
    204c:	606b      	str	r3, [r5, #4]
    204e:	f106 0601 	add.w	r6, r6, #1
    2052:	bf58      	it	pl
    2054:	3701      	addpl	r7, #1
    2056:	60a2      	str	r2, [r4, #8]
    2058:	b142      	cbz	r2, 206c <_scanf_chars+0xa8>
    205a:	2b00      	cmp	r3, #0
    205c:	dcc8      	bgt.n	1ff0 <_scanf_chars+0x2c>
    205e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2062:	4629      	mov	r1, r5
    2064:	4640      	mov	r0, r8
    2066:	4798      	blx	r3
    2068:	2800      	cmp	r0, #0
    206a:	d0c1      	beq.n	1ff0 <_scanf_chars+0x2c>
    206c:	6823      	ldr	r3, [r4, #0]
    206e:	f013 0310 	ands.w	r3, r3, #16
    2072:	d105      	bne.n	2080 <_scanf_chars+0xbc>
    2074:	68e2      	ldr	r2, [r4, #12]
    2076:	3201      	adds	r2, #1
    2078:	60e2      	str	r2, [r4, #12]
    207a:	69a2      	ldr	r2, [r4, #24]
    207c:	b102      	cbz	r2, 2080 <_scanf_chars+0xbc>
    207e:	703b      	strb	r3, [r7, #0]
    2080:	6923      	ldr	r3, [r4, #16]
    2082:	441e      	add	r6, r3
    2084:	6126      	str	r6, [r4, #16]
    2086:	2000      	movs	r0, #0
    2088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000208c <_scanf_i>:
    208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2090:	469a      	mov	sl, r3
    2092:	4b74      	ldr	r3, [pc, #464]	; (2264 <_scanf_i+0x1d8>)
    2094:	460c      	mov	r4, r1
    2096:	4683      	mov	fp, r0
    2098:	4616      	mov	r6, r2
    209a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    209e:	b087      	sub	sp, #28
    20a0:	ab03      	add	r3, sp, #12
    20a2:	68a7      	ldr	r7, [r4, #8]
    20a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    20a8:	4b6f      	ldr	r3, [pc, #444]	; (2268 <_scanf_i+0x1dc>)
    20aa:	69a1      	ldr	r1, [r4, #24]
    20ac:	4a6f      	ldr	r2, [pc, #444]	; (226c <_scanf_i+0x1e0>)
    20ae:	2903      	cmp	r1, #3
    20b0:	bf18      	it	ne
    20b2:	461a      	movne	r2, r3
    20b4:	1e7b      	subs	r3, r7, #1
    20b6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    20ba:	bf84      	itt	hi
    20bc:	f240 135d 	movwhi	r3, #349	; 0x15d
    20c0:	60a3      	strhi	r3, [r4, #8]
    20c2:	6823      	ldr	r3, [r4, #0]
    20c4:	9200      	str	r2, [sp, #0]
    20c6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    20ca:	bf88      	it	hi
    20cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    20d0:	f104 091c 	add.w	r9, r4, #28
    20d4:	6023      	str	r3, [r4, #0]
    20d6:	bf8c      	ite	hi
    20d8:	197f      	addhi	r7, r7, r5
    20da:	2700      	movls	r7, #0
    20dc:	464b      	mov	r3, r9
    20de:	f04f 0800 	mov.w	r8, #0
    20e2:	9301      	str	r3, [sp, #4]
    20e4:	6831      	ldr	r1, [r6, #0]
    20e6:	ab03      	add	r3, sp, #12
    20e8:	2202      	movs	r2, #2
    20ea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    20ee:	7809      	ldrb	r1, [r1, #0]
    20f0:	f000 fbae 	bl	2850 <memchr>
    20f4:	9b01      	ldr	r3, [sp, #4]
    20f6:	b328      	cbz	r0, 2144 <_scanf_i+0xb8>
    20f8:	f1b8 0f01 	cmp.w	r8, #1
    20fc:	d156      	bne.n	21ac <_scanf_i+0x120>
    20fe:	6862      	ldr	r2, [r4, #4]
    2100:	b92a      	cbnz	r2, 210e <_scanf_i+0x82>
    2102:	2208      	movs	r2, #8
    2104:	6062      	str	r2, [r4, #4]
    2106:	6822      	ldr	r2, [r4, #0]
    2108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    210c:	6022      	str	r2, [r4, #0]
    210e:	6822      	ldr	r2, [r4, #0]
    2110:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    2114:	6022      	str	r2, [r4, #0]
    2116:	68a2      	ldr	r2, [r4, #8]
    2118:	1e51      	subs	r1, r2, #1
    211a:	60a1      	str	r1, [r4, #8]
    211c:	b192      	cbz	r2, 2144 <_scanf_i+0xb8>
    211e:	6832      	ldr	r2, [r6, #0]
    2120:	1c51      	adds	r1, r2, #1
    2122:	6031      	str	r1, [r6, #0]
    2124:	7812      	ldrb	r2, [r2, #0]
    2126:	701a      	strb	r2, [r3, #0]
    2128:	1c5d      	adds	r5, r3, #1
    212a:	6873      	ldr	r3, [r6, #4]
    212c:	3b01      	subs	r3, #1
    212e:	2b00      	cmp	r3, #0
    2130:	6073      	str	r3, [r6, #4]
    2132:	dc06      	bgt.n	2142 <_scanf_i+0xb6>
    2134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2138:	4631      	mov	r1, r6
    213a:	4658      	mov	r0, fp
    213c:	4798      	blx	r3
    213e:	2800      	cmp	r0, #0
    2140:	d176      	bne.n	2230 <_scanf_i+0x1a4>
    2142:	462b      	mov	r3, r5
    2144:	f108 0801 	add.w	r8, r8, #1
    2148:	f1b8 0f03 	cmp.w	r8, #3
    214c:	d1c9      	bne.n	20e2 <_scanf_i+0x56>
    214e:	6862      	ldr	r2, [r4, #4]
    2150:	b90a      	cbnz	r2, 2156 <_scanf_i+0xca>
    2152:	220a      	movs	r2, #10
    2154:	6062      	str	r2, [r4, #4]
    2156:	6862      	ldr	r2, [r4, #4]
    2158:	4945      	ldr	r1, [pc, #276]	; (2270 <_scanf_i+0x1e4>)
    215a:	6960      	ldr	r0, [r4, #20]
    215c:	9301      	str	r3, [sp, #4]
    215e:	1a89      	subs	r1, r1, r2
    2160:	f000 f92e 	bl	23c0 <__sccl>
    2164:	9b01      	ldr	r3, [sp, #4]
    2166:	f04f 0800 	mov.w	r8, #0
    216a:	461d      	mov	r5, r3
    216c:	68a3      	ldr	r3, [r4, #8]
    216e:	2b00      	cmp	r3, #0
    2170:	d038      	beq.n	21e4 <_scanf_i+0x158>
    2172:	6831      	ldr	r1, [r6, #0]
    2174:	6960      	ldr	r0, [r4, #20]
    2176:	780a      	ldrb	r2, [r1, #0]
    2178:	5c80      	ldrb	r0, [r0, r2]
    217a:	2800      	cmp	r0, #0
    217c:	d032      	beq.n	21e4 <_scanf_i+0x158>
    217e:	2a30      	cmp	r2, #48	; 0x30
    2180:	6822      	ldr	r2, [r4, #0]
    2182:	d121      	bne.n	21c8 <_scanf_i+0x13c>
    2184:	0510      	lsls	r0, r2, #20
    2186:	d51f      	bpl.n	21c8 <_scanf_i+0x13c>
    2188:	f108 0801 	add.w	r8, r8, #1
    218c:	b117      	cbz	r7, 2194 <_scanf_i+0x108>
    218e:	3301      	adds	r3, #1
    2190:	3f01      	subs	r7, #1
    2192:	60a3      	str	r3, [r4, #8]
    2194:	6873      	ldr	r3, [r6, #4]
    2196:	3b01      	subs	r3, #1
    2198:	2b00      	cmp	r3, #0
    219a:	6073      	str	r3, [r6, #4]
    219c:	dd1b      	ble.n	21d6 <_scanf_i+0x14a>
    219e:	6833      	ldr	r3, [r6, #0]
    21a0:	3301      	adds	r3, #1
    21a2:	6033      	str	r3, [r6, #0]
    21a4:	68a3      	ldr	r3, [r4, #8]
    21a6:	3b01      	subs	r3, #1
    21a8:	60a3      	str	r3, [r4, #8]
    21aa:	e7df      	b.n	216c <_scanf_i+0xe0>
    21ac:	f1b8 0f02 	cmp.w	r8, #2
    21b0:	d1b1      	bne.n	2116 <_scanf_i+0x8a>
    21b2:	6822      	ldr	r2, [r4, #0]
    21b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    21b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    21bc:	d1c2      	bne.n	2144 <_scanf_i+0xb8>
    21be:	2110      	movs	r1, #16
    21c0:	6061      	str	r1, [r4, #4]
    21c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    21c6:	e7a5      	b.n	2114 <_scanf_i+0x88>
    21c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    21cc:	6022      	str	r2, [r4, #0]
    21ce:	780b      	ldrb	r3, [r1, #0]
    21d0:	702b      	strb	r3, [r5, #0]
    21d2:	3501      	adds	r5, #1
    21d4:	e7de      	b.n	2194 <_scanf_i+0x108>
    21d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    21da:	4631      	mov	r1, r6
    21dc:	4658      	mov	r0, fp
    21de:	4798      	blx	r3
    21e0:	2800      	cmp	r0, #0
    21e2:	d0df      	beq.n	21a4 <_scanf_i+0x118>
    21e4:	6823      	ldr	r3, [r4, #0]
    21e6:	05d9      	lsls	r1, r3, #23
    21e8:	d50c      	bpl.n	2204 <_scanf_i+0x178>
    21ea:	454d      	cmp	r5, r9
    21ec:	d908      	bls.n	2200 <_scanf_i+0x174>
    21ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    21f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    21f6:	4632      	mov	r2, r6
    21f8:	4658      	mov	r0, fp
    21fa:	4798      	blx	r3
    21fc:	1e6f      	subs	r7, r5, #1
    21fe:	463d      	mov	r5, r7
    2200:	454d      	cmp	r5, r9
    2202:	d02c      	beq.n	225e <_scanf_i+0x1d2>
    2204:	6822      	ldr	r2, [r4, #0]
    2206:	f012 0210 	ands.w	r2, r2, #16
    220a:	d11e      	bne.n	224a <_scanf_i+0x1be>
    220c:	702a      	strb	r2, [r5, #0]
    220e:	6863      	ldr	r3, [r4, #4]
    2210:	9e00      	ldr	r6, [sp, #0]
    2212:	4649      	mov	r1, r9
    2214:	4658      	mov	r0, fp
    2216:	47b0      	blx	r6
    2218:	6822      	ldr	r2, [r4, #0]
    221a:	f8da 3000 	ldr.w	r3, [sl]
    221e:	f012 0f20 	tst.w	r2, #32
    2222:	d008      	beq.n	2236 <_scanf_i+0x1aa>
    2224:	1d1a      	adds	r2, r3, #4
    2226:	f8ca 2000 	str.w	r2, [sl]
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	6018      	str	r0, [r3, #0]
    222e:	e009      	b.n	2244 <_scanf_i+0x1b8>
    2230:	f04f 0800 	mov.w	r8, #0
    2234:	e7d6      	b.n	21e4 <_scanf_i+0x158>
    2236:	07d2      	lsls	r2, r2, #31
    2238:	d5f4      	bpl.n	2224 <_scanf_i+0x198>
    223a:	1d1a      	adds	r2, r3, #4
    223c:	f8ca 2000 	str.w	r2, [sl]
    2240:	681b      	ldr	r3, [r3, #0]
    2242:	8018      	strh	r0, [r3, #0]
    2244:	68e3      	ldr	r3, [r4, #12]
    2246:	3301      	adds	r3, #1
    2248:	60e3      	str	r3, [r4, #12]
    224a:	eba5 0509 	sub.w	r5, r5, r9
    224e:	44a8      	add	r8, r5
    2250:	6925      	ldr	r5, [r4, #16]
    2252:	4445      	add	r5, r8
    2254:	6125      	str	r5, [r4, #16]
    2256:	2000      	movs	r0, #0
    2258:	b007      	add	sp, #28
    225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    225e:	2001      	movs	r0, #1
    2260:	e7fa      	b.n	2258 <_scanf_i+0x1cc>
    2262:	bf00      	nop
    2264:	00002d4c 	.word	0x00002d4c
    2268:	00002641 	.word	0x00002641
    226c:	00002521 	.word	0x00002521
    2270:	00002d68 	.word	0x00002d68

00002274 <_read_r>:
    2274:	b538      	push	{r3, r4, r5, lr}
    2276:	4c07      	ldr	r4, [pc, #28]	; (2294 <_read_r+0x20>)
    2278:	4605      	mov	r5, r0
    227a:	4608      	mov	r0, r1
    227c:	4611      	mov	r1, r2
    227e:	2200      	movs	r2, #0
    2280:	6022      	str	r2, [r4, #0]
    2282:	461a      	mov	r2, r3
    2284:	f7fe fc60 	bl	b48 <_read>
    2288:	1c43      	adds	r3, r0, #1
    228a:	d102      	bne.n	2292 <_read_r+0x1e>
    228c:	6823      	ldr	r3, [r4, #0]
    228e:	b103      	cbz	r3, 2292 <_read_r+0x1e>
    2290:	602b      	str	r3, [r5, #0]
    2292:	bd38      	pop	{r3, r4, r5, pc}
    2294:	200002ec 	.word	0x200002ec

00002298 <lflush>:
    2298:	8983      	ldrh	r3, [r0, #12]
    229a:	f003 0309 	and.w	r3, r3, #9
    229e:	2b09      	cmp	r3, #9
    22a0:	d101      	bne.n	22a6 <lflush+0xe>
    22a2:	f7fe bd6f 	b.w	d84 <fflush>
    22a6:	2000      	movs	r0, #0
    22a8:	4770      	bx	lr
	...

000022ac <__srefill_r>:
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ae:	460c      	mov	r4, r1
    22b0:	4605      	mov	r5, r0
    22b2:	b118      	cbz	r0, 22bc <__srefill_r+0x10>
    22b4:	6983      	ldr	r3, [r0, #24]
    22b6:	b90b      	cbnz	r3, 22bc <__srefill_r+0x10>
    22b8:	f7fe fdb6 	bl	e28 <__sinit>
    22bc:	4b3b      	ldr	r3, [pc, #236]	; (23ac <__srefill_r+0x100>)
    22be:	429c      	cmp	r4, r3
    22c0:	d10a      	bne.n	22d8 <__srefill_r+0x2c>
    22c2:	686c      	ldr	r4, [r5, #4]
    22c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    22c8:	2300      	movs	r3, #0
    22ca:	6063      	str	r3, [r4, #4]
    22cc:	b293      	uxth	r3, r2
    22ce:	069e      	lsls	r6, r3, #26
    22d0:	d50c      	bpl.n	22ec <__srefill_r+0x40>
    22d2:	f04f 30ff 	mov.w	r0, #4294967295
    22d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22d8:	4b35      	ldr	r3, [pc, #212]	; (23b0 <__srefill_r+0x104>)
    22da:	429c      	cmp	r4, r3
    22dc:	d101      	bne.n	22e2 <__srefill_r+0x36>
    22de:	68ac      	ldr	r4, [r5, #8]
    22e0:	e7f0      	b.n	22c4 <__srefill_r+0x18>
    22e2:	4b34      	ldr	r3, [pc, #208]	; (23b4 <__srefill_r+0x108>)
    22e4:	429c      	cmp	r4, r3
    22e6:	bf08      	it	eq
    22e8:	68ec      	ldreq	r4, [r5, #12]
    22ea:	e7eb      	b.n	22c4 <__srefill_r+0x18>
    22ec:	0758      	lsls	r0, r3, #29
    22ee:	d448      	bmi.n	2382 <__srefill_r+0xd6>
    22f0:	06d9      	lsls	r1, r3, #27
    22f2:	d405      	bmi.n	2300 <__srefill_r+0x54>
    22f4:	2309      	movs	r3, #9
    22f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    22fa:	602b      	str	r3, [r5, #0]
    22fc:	81a2      	strh	r2, [r4, #12]
    22fe:	e7e8      	b.n	22d2 <__srefill_r+0x26>
    2300:	071a      	lsls	r2, r3, #28
    2302:	d50b      	bpl.n	231c <__srefill_r+0x70>
    2304:	4621      	mov	r1, r4
    2306:	4628      	mov	r0, r5
    2308:	f7fe fd12 	bl	d30 <_fflush_r>
    230c:	2800      	cmp	r0, #0
    230e:	d1e0      	bne.n	22d2 <__srefill_r+0x26>
    2310:	89a3      	ldrh	r3, [r4, #12]
    2312:	60a0      	str	r0, [r4, #8]
    2314:	f023 0308 	bic.w	r3, r3, #8
    2318:	81a3      	strh	r3, [r4, #12]
    231a:	61a0      	str	r0, [r4, #24]
    231c:	89a3      	ldrh	r3, [r4, #12]
    231e:	f043 0304 	orr.w	r3, r3, #4
    2322:	81a3      	strh	r3, [r4, #12]
    2324:	6923      	ldr	r3, [r4, #16]
    2326:	b91b      	cbnz	r3, 2330 <__srefill_r+0x84>
    2328:	4621      	mov	r1, r4
    232a:	4628      	mov	r0, r5
    232c:	f7ff f9b0 	bl	1690 <__smakebuf_r>
    2330:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    2334:	b2be      	uxth	r6, r7
    2336:	07b3      	lsls	r3, r6, #30
    2338:	d00f      	beq.n	235a <__srefill_r+0xae>
    233a:	2301      	movs	r3, #1
    233c:	81a3      	strh	r3, [r4, #12]
    233e:	4b1e      	ldr	r3, [pc, #120]	; (23b8 <__srefill_r+0x10c>)
    2340:	491e      	ldr	r1, [pc, #120]	; (23bc <__srefill_r+0x110>)
    2342:	6818      	ldr	r0, [r3, #0]
    2344:	f006 0609 	and.w	r6, r6, #9
    2348:	f7fe fdda 	bl	f00 <_fwalk>
    234c:	2e09      	cmp	r6, #9
    234e:	81a7      	strh	r7, [r4, #12]
    2350:	d103      	bne.n	235a <__srefill_r+0xae>
    2352:	4621      	mov	r1, r4
    2354:	4628      	mov	r0, r5
    2356:	f7fe fc63 	bl	c20 <__sflush_r>
    235a:	6922      	ldr	r2, [r4, #16]
    235c:	6022      	str	r2, [r4, #0]
    235e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2360:	6963      	ldr	r3, [r4, #20]
    2362:	6a21      	ldr	r1, [r4, #32]
    2364:	4628      	mov	r0, r5
    2366:	47b0      	blx	r6
    2368:	2800      	cmp	r0, #0
    236a:	6060      	str	r0, [r4, #4]
    236c:	dc1c      	bgt.n	23a8 <__srefill_r+0xfc>
    236e:	89a3      	ldrh	r3, [r4, #12]
    2370:	bf17      	itett	ne
    2372:	2200      	movne	r2, #0
    2374:	f043 0320 	orreq.w	r3, r3, #32
    2378:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    237c:	6062      	strne	r2, [r4, #4]
    237e:	81a3      	strh	r3, [r4, #12]
    2380:	e7a7      	b.n	22d2 <__srefill_r+0x26>
    2382:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2384:	2900      	cmp	r1, #0
    2386:	d0cd      	beq.n	2324 <__srefill_r+0x78>
    2388:	f104 0344 	add.w	r3, r4, #68	; 0x44
    238c:	4299      	cmp	r1, r3
    238e:	d002      	beq.n	2396 <__srefill_r+0xea>
    2390:	4628      	mov	r0, r5
    2392:	f7fe fe1b 	bl	fcc <_free_r>
    2396:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2398:	6063      	str	r3, [r4, #4]
    239a:	2000      	movs	r0, #0
    239c:	6360      	str	r0, [r4, #52]	; 0x34
    239e:	2b00      	cmp	r3, #0
    23a0:	d0c0      	beq.n	2324 <__srefill_r+0x78>
    23a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    23a4:	6023      	str	r3, [r4, #0]
    23a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23a8:	2000      	movs	r0, #0
    23aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ac:	00002cd4 	.word	0x00002cd4
    23b0:	00002cf4 	.word	0x00002cf4
    23b4:	00002cb4 	.word	0x00002cb4
    23b8:	00002d14 	.word	0x00002d14
    23bc:	00002299 	.word	0x00002299

000023c0 <__sccl>:
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	780b      	ldrb	r3, [r1, #0]
    23c4:	2b5e      	cmp	r3, #94	; 0x5e
    23c6:	bf13      	iteet	ne
    23c8:	1c4a      	addne	r2, r1, #1
    23ca:	1c8a      	addeq	r2, r1, #2
    23cc:	784b      	ldrbeq	r3, [r1, #1]
    23ce:	2100      	movne	r1, #0
    23d0:	bf08      	it	eq
    23d2:	2101      	moveq	r1, #1
    23d4:	1e44      	subs	r4, r0, #1
    23d6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    23da:	f804 1f01 	strb.w	r1, [r4, #1]!
    23de:	42a5      	cmp	r5, r4
    23e0:	d1fb      	bne.n	23da <__sccl+0x1a>
    23e2:	b913      	cbnz	r3, 23ea <__sccl+0x2a>
    23e4:	3a01      	subs	r2, #1
    23e6:	4610      	mov	r0, r2
    23e8:	bd70      	pop	{r4, r5, r6, pc}
    23ea:	f081 0401 	eor.w	r4, r1, #1
    23ee:	54c4      	strb	r4, [r0, r3]
    23f0:	4611      	mov	r1, r2
    23f2:	780d      	ldrb	r5, [r1, #0]
    23f4:	2d2d      	cmp	r5, #45	; 0x2d
    23f6:	f101 0201 	add.w	r2, r1, #1
    23fa:	d006      	beq.n	240a <__sccl+0x4a>
    23fc:	2d5d      	cmp	r5, #93	; 0x5d
    23fe:	d0f2      	beq.n	23e6 <__sccl+0x26>
    2400:	b90d      	cbnz	r5, 2406 <__sccl+0x46>
    2402:	460a      	mov	r2, r1
    2404:	e7ef      	b.n	23e6 <__sccl+0x26>
    2406:	462b      	mov	r3, r5
    2408:	e7f1      	b.n	23ee <__sccl+0x2e>
    240a:	784e      	ldrb	r6, [r1, #1]
    240c:	2e5d      	cmp	r6, #93	; 0x5d
    240e:	d0fa      	beq.n	2406 <__sccl+0x46>
    2410:	42b3      	cmp	r3, r6
    2412:	dcf8      	bgt.n	2406 <__sccl+0x46>
    2414:	3102      	adds	r1, #2
    2416:	3301      	adds	r3, #1
    2418:	429e      	cmp	r6, r3
    241a:	54c4      	strb	r4, [r0, r3]
    241c:	dcfb      	bgt.n	2416 <__sccl+0x56>
    241e:	e7e8      	b.n	23f2 <__sccl+0x32>

00002420 <_strtol_l.isra.0>:
    2420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2424:	4680      	mov	r8, r0
    2426:	4689      	mov	r9, r1
    2428:	4692      	mov	sl, r2
    242a:	461f      	mov	r7, r3
    242c:	468b      	mov	fp, r1
    242e:	465d      	mov	r5, fp
    2430:	980a      	ldr	r0, [sp, #40]	; 0x28
    2432:	f815 4b01 	ldrb.w	r4, [r5], #1
    2436:	f000 f9e5 	bl	2804 <__locale_ctype_ptr_l>
    243a:	4420      	add	r0, r4
    243c:	7846      	ldrb	r6, [r0, #1]
    243e:	f016 0608 	ands.w	r6, r6, #8
    2442:	d10b      	bne.n	245c <_strtol_l.isra.0+0x3c>
    2444:	2c2d      	cmp	r4, #45	; 0x2d
    2446:	d10b      	bne.n	2460 <_strtol_l.isra.0+0x40>
    2448:	782c      	ldrb	r4, [r5, #0]
    244a:	2601      	movs	r6, #1
    244c:	f10b 0502 	add.w	r5, fp, #2
    2450:	b167      	cbz	r7, 246c <_strtol_l.isra.0+0x4c>
    2452:	2f10      	cmp	r7, #16
    2454:	d114      	bne.n	2480 <_strtol_l.isra.0+0x60>
    2456:	2c30      	cmp	r4, #48	; 0x30
    2458:	d00a      	beq.n	2470 <_strtol_l.isra.0+0x50>
    245a:	e011      	b.n	2480 <_strtol_l.isra.0+0x60>
    245c:	46ab      	mov	fp, r5
    245e:	e7e6      	b.n	242e <_strtol_l.isra.0+0xe>
    2460:	2c2b      	cmp	r4, #43	; 0x2b
    2462:	bf04      	itt	eq
    2464:	782c      	ldrbeq	r4, [r5, #0]
    2466:	f10b 0502 	addeq.w	r5, fp, #2
    246a:	e7f1      	b.n	2450 <_strtol_l.isra.0+0x30>
    246c:	2c30      	cmp	r4, #48	; 0x30
    246e:	d127      	bne.n	24c0 <_strtol_l.isra.0+0xa0>
    2470:	782b      	ldrb	r3, [r5, #0]
    2472:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    2476:	2b58      	cmp	r3, #88	; 0x58
    2478:	d14b      	bne.n	2512 <_strtol_l.isra.0+0xf2>
    247a:	786c      	ldrb	r4, [r5, #1]
    247c:	2710      	movs	r7, #16
    247e:	3502      	adds	r5, #2
    2480:	2e00      	cmp	r6, #0
    2482:	bf0c      	ite	eq
    2484:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    2488:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    248c:	2200      	movs	r2, #0
    248e:	fbb1 fef7 	udiv	lr, r1, r7
    2492:	4610      	mov	r0, r2
    2494:	fb07 1c1e 	mls	ip, r7, lr, r1
    2498:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    249c:	2b09      	cmp	r3, #9
    249e:	d811      	bhi.n	24c4 <_strtol_l.isra.0+0xa4>
    24a0:	461c      	mov	r4, r3
    24a2:	42a7      	cmp	r7, r4
    24a4:	dd1d      	ble.n	24e2 <_strtol_l.isra.0+0xc2>
    24a6:	1c53      	adds	r3, r2, #1
    24a8:	d007      	beq.n	24ba <_strtol_l.isra.0+0x9a>
    24aa:	4586      	cmp	lr, r0
    24ac:	d316      	bcc.n	24dc <_strtol_l.isra.0+0xbc>
    24ae:	d101      	bne.n	24b4 <_strtol_l.isra.0+0x94>
    24b0:	45a4      	cmp	ip, r4
    24b2:	db13      	blt.n	24dc <_strtol_l.isra.0+0xbc>
    24b4:	fb00 4007 	mla	r0, r0, r7, r4
    24b8:	2201      	movs	r2, #1
    24ba:	f815 4b01 	ldrb.w	r4, [r5], #1
    24be:	e7eb      	b.n	2498 <_strtol_l.isra.0+0x78>
    24c0:	270a      	movs	r7, #10
    24c2:	e7dd      	b.n	2480 <_strtol_l.isra.0+0x60>
    24c4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    24c8:	2b19      	cmp	r3, #25
    24ca:	d801      	bhi.n	24d0 <_strtol_l.isra.0+0xb0>
    24cc:	3c37      	subs	r4, #55	; 0x37
    24ce:	e7e8      	b.n	24a2 <_strtol_l.isra.0+0x82>
    24d0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    24d4:	2b19      	cmp	r3, #25
    24d6:	d804      	bhi.n	24e2 <_strtol_l.isra.0+0xc2>
    24d8:	3c57      	subs	r4, #87	; 0x57
    24da:	e7e2      	b.n	24a2 <_strtol_l.isra.0+0x82>
    24dc:	f04f 32ff 	mov.w	r2, #4294967295
    24e0:	e7eb      	b.n	24ba <_strtol_l.isra.0+0x9a>
    24e2:	1c53      	adds	r3, r2, #1
    24e4:	d108      	bne.n	24f8 <_strtol_l.isra.0+0xd8>
    24e6:	2322      	movs	r3, #34	; 0x22
    24e8:	f8c8 3000 	str.w	r3, [r8]
    24ec:	4608      	mov	r0, r1
    24ee:	f1ba 0f00 	cmp.w	sl, #0
    24f2:	d107      	bne.n	2504 <_strtol_l.isra.0+0xe4>
    24f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24f8:	b106      	cbz	r6, 24fc <_strtol_l.isra.0+0xdc>
    24fa:	4240      	negs	r0, r0
    24fc:	f1ba 0f00 	cmp.w	sl, #0
    2500:	d00c      	beq.n	251c <_strtol_l.isra.0+0xfc>
    2502:	b122      	cbz	r2, 250e <_strtol_l.isra.0+0xee>
    2504:	3d01      	subs	r5, #1
    2506:	f8ca 5000 	str.w	r5, [sl]
    250a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    250e:	464d      	mov	r5, r9
    2510:	e7f9      	b.n	2506 <_strtol_l.isra.0+0xe6>
    2512:	2430      	movs	r4, #48	; 0x30
    2514:	2f00      	cmp	r7, #0
    2516:	d1b3      	bne.n	2480 <_strtol_l.isra.0+0x60>
    2518:	2708      	movs	r7, #8
    251a:	e7b1      	b.n	2480 <_strtol_l.isra.0+0x60>
    251c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002520 <_strtol_r>:
    2520:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2522:	4c06      	ldr	r4, [pc, #24]	; (253c <_strtol_r+0x1c>)
    2524:	4d06      	ldr	r5, [pc, #24]	; (2540 <_strtol_r+0x20>)
    2526:	6824      	ldr	r4, [r4, #0]
    2528:	6a24      	ldr	r4, [r4, #32]
    252a:	2c00      	cmp	r4, #0
    252c:	bf08      	it	eq
    252e:	462c      	moveq	r4, r5
    2530:	9400      	str	r4, [sp, #0]
    2532:	f7ff ff75 	bl	2420 <_strtol_l.isra.0>
    2536:	b003      	add	sp, #12
    2538:	bd30      	pop	{r4, r5, pc}
    253a:	bf00      	nop
    253c:	2000006c 	.word	0x2000006c
    2540:	200000d0 	.word	0x200000d0

00002544 <_strtoul_l.isra.0>:
    2544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2548:	4680      	mov	r8, r0
    254a:	4689      	mov	r9, r1
    254c:	4692      	mov	sl, r2
    254e:	461e      	mov	r6, r3
    2550:	460f      	mov	r7, r1
    2552:	463d      	mov	r5, r7
    2554:	9808      	ldr	r0, [sp, #32]
    2556:	f815 4b01 	ldrb.w	r4, [r5], #1
    255a:	f000 f953 	bl	2804 <__locale_ctype_ptr_l>
    255e:	4420      	add	r0, r4
    2560:	7843      	ldrb	r3, [r0, #1]
    2562:	f013 0308 	ands.w	r3, r3, #8
    2566:	d10a      	bne.n	257e <_strtoul_l.isra.0+0x3a>
    2568:	2c2d      	cmp	r4, #45	; 0x2d
    256a:	d10a      	bne.n	2582 <_strtoul_l.isra.0+0x3e>
    256c:	782c      	ldrb	r4, [r5, #0]
    256e:	2301      	movs	r3, #1
    2570:	1cbd      	adds	r5, r7, #2
    2572:	b15e      	cbz	r6, 258c <_strtoul_l.isra.0+0x48>
    2574:	2e10      	cmp	r6, #16
    2576:	d113      	bne.n	25a0 <_strtoul_l.isra.0+0x5c>
    2578:	2c30      	cmp	r4, #48	; 0x30
    257a:	d009      	beq.n	2590 <_strtoul_l.isra.0+0x4c>
    257c:	e010      	b.n	25a0 <_strtoul_l.isra.0+0x5c>
    257e:	462f      	mov	r7, r5
    2580:	e7e7      	b.n	2552 <_strtoul_l.isra.0+0xe>
    2582:	2c2b      	cmp	r4, #43	; 0x2b
    2584:	bf04      	itt	eq
    2586:	782c      	ldrbeq	r4, [r5, #0]
    2588:	1cbd      	addeq	r5, r7, #2
    258a:	e7f2      	b.n	2572 <_strtoul_l.isra.0+0x2e>
    258c:	2c30      	cmp	r4, #48	; 0x30
    258e:	d125      	bne.n	25dc <_strtoul_l.isra.0+0x98>
    2590:	782a      	ldrb	r2, [r5, #0]
    2592:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    2596:	2a58      	cmp	r2, #88	; 0x58
    2598:	d14a      	bne.n	2630 <_strtoul_l.isra.0+0xec>
    259a:	786c      	ldrb	r4, [r5, #1]
    259c:	2610      	movs	r6, #16
    259e:	3502      	adds	r5, #2
    25a0:	f04f 31ff 	mov.w	r1, #4294967295
    25a4:	2700      	movs	r7, #0
    25a6:	fbb1 f1f6 	udiv	r1, r1, r6
    25aa:	fb06 fe01 	mul.w	lr, r6, r1
    25ae:	ea6f 0e0e 	mvn.w	lr, lr
    25b2:	4638      	mov	r0, r7
    25b4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    25b8:	2a09      	cmp	r2, #9
    25ba:	d811      	bhi.n	25e0 <_strtoul_l.isra.0+0x9c>
    25bc:	4614      	mov	r4, r2
    25be:	42a6      	cmp	r6, r4
    25c0:	dd1d      	ble.n	25fe <_strtoul_l.isra.0+0xba>
    25c2:	2f00      	cmp	r7, #0
    25c4:	db18      	blt.n	25f8 <_strtoul_l.isra.0+0xb4>
    25c6:	4281      	cmp	r1, r0
    25c8:	d316      	bcc.n	25f8 <_strtoul_l.isra.0+0xb4>
    25ca:	d101      	bne.n	25d0 <_strtoul_l.isra.0+0x8c>
    25cc:	45a6      	cmp	lr, r4
    25ce:	db13      	blt.n	25f8 <_strtoul_l.isra.0+0xb4>
    25d0:	fb00 4006 	mla	r0, r0, r6, r4
    25d4:	2701      	movs	r7, #1
    25d6:	f815 4b01 	ldrb.w	r4, [r5], #1
    25da:	e7eb      	b.n	25b4 <_strtoul_l.isra.0+0x70>
    25dc:	260a      	movs	r6, #10
    25de:	e7df      	b.n	25a0 <_strtoul_l.isra.0+0x5c>
    25e0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    25e4:	2a19      	cmp	r2, #25
    25e6:	d801      	bhi.n	25ec <_strtoul_l.isra.0+0xa8>
    25e8:	3c37      	subs	r4, #55	; 0x37
    25ea:	e7e8      	b.n	25be <_strtoul_l.isra.0+0x7a>
    25ec:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    25f0:	2a19      	cmp	r2, #25
    25f2:	d804      	bhi.n	25fe <_strtoul_l.isra.0+0xba>
    25f4:	3c57      	subs	r4, #87	; 0x57
    25f6:	e7e2      	b.n	25be <_strtoul_l.isra.0+0x7a>
    25f8:	f04f 37ff 	mov.w	r7, #4294967295
    25fc:	e7eb      	b.n	25d6 <_strtoul_l.isra.0+0x92>
    25fe:	2f00      	cmp	r7, #0
    2600:	da09      	bge.n	2616 <_strtoul_l.isra.0+0xd2>
    2602:	2322      	movs	r3, #34	; 0x22
    2604:	f8c8 3000 	str.w	r3, [r8]
    2608:	f04f 30ff 	mov.w	r0, #4294967295
    260c:	f1ba 0f00 	cmp.w	sl, #0
    2610:	d107      	bne.n	2622 <_strtoul_l.isra.0+0xde>
    2612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2616:	b103      	cbz	r3, 261a <_strtoul_l.isra.0+0xd6>
    2618:	4240      	negs	r0, r0
    261a:	f1ba 0f00 	cmp.w	sl, #0
    261e:	d00c      	beq.n	263a <_strtoul_l.isra.0+0xf6>
    2620:	b127      	cbz	r7, 262c <_strtoul_l.isra.0+0xe8>
    2622:	3d01      	subs	r5, #1
    2624:	f8ca 5000 	str.w	r5, [sl]
    2628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    262c:	464d      	mov	r5, r9
    262e:	e7f9      	b.n	2624 <_strtoul_l.isra.0+0xe0>
    2630:	2430      	movs	r4, #48	; 0x30
    2632:	2e00      	cmp	r6, #0
    2634:	d1b4      	bne.n	25a0 <_strtoul_l.isra.0+0x5c>
    2636:	2608      	movs	r6, #8
    2638:	e7b2      	b.n	25a0 <_strtoul_l.isra.0+0x5c>
    263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002640 <_strtoul_r>:
    2640:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2642:	4c06      	ldr	r4, [pc, #24]	; (265c <_strtoul_r+0x1c>)
    2644:	4d06      	ldr	r5, [pc, #24]	; (2660 <_strtoul_r+0x20>)
    2646:	6824      	ldr	r4, [r4, #0]
    2648:	6a24      	ldr	r4, [r4, #32]
    264a:	2c00      	cmp	r4, #0
    264c:	bf08      	it	eq
    264e:	462c      	moveq	r4, r5
    2650:	9400      	str	r4, [sp, #0]
    2652:	f7ff ff77 	bl	2544 <_strtoul_l.isra.0>
    2656:	b003      	add	sp, #12
    2658:	bd30      	pop	{r4, r5, pc}
    265a:	bf00      	nop
    265c:	2000006c 	.word	0x2000006c
    2660:	200000d0 	.word	0x200000d0

00002664 <__submore>:
    2664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2668:	460c      	mov	r4, r1
    266a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    266c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2670:	4299      	cmp	r1, r3
    2672:	d11e      	bne.n	26b2 <__submore+0x4e>
    2674:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2678:	f7fe fcf6 	bl	1068 <_malloc_r>
    267c:	b918      	cbnz	r0, 2686 <__submore+0x22>
    267e:	f04f 30ff 	mov.w	r0, #4294967295
    2682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2686:	f44f 6380 	mov.w	r3, #1024	; 0x400
    268a:	63a3      	str	r3, [r4, #56]	; 0x38
    268c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    2690:	6360      	str	r0, [r4, #52]	; 0x34
    2692:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    2696:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    269a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    269e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    26a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    26a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    26aa:	6020      	str	r0, [r4, #0]
    26ac:	2000      	movs	r0, #0
    26ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26b2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    26b4:	0077      	lsls	r7, r6, #1
    26b6:	463a      	mov	r2, r7
    26b8:	f000 f925 	bl	2906 <_realloc_r>
    26bc:	4605      	mov	r5, r0
    26be:	2800      	cmp	r0, #0
    26c0:	d0dd      	beq.n	267e <__submore+0x1a>
    26c2:	eb00 0806 	add.w	r8, r0, r6
    26c6:	4601      	mov	r1, r0
    26c8:	4632      	mov	r2, r6
    26ca:	4640      	mov	r0, r8
    26cc:	f000 f910 	bl	28f0 <memcpy>
    26d0:	f8c4 8000 	str.w	r8, [r4]
    26d4:	6365      	str	r5, [r4, #52]	; 0x34
    26d6:	63a7      	str	r7, [r4, #56]	; 0x38
    26d8:	e7e8      	b.n	26ac <__submore+0x48>
	...

000026dc <_ungetc_r>:
    26dc:	1c4b      	adds	r3, r1, #1
    26de:	b570      	push	{r4, r5, r6, lr}
    26e0:	4606      	mov	r6, r0
    26e2:	460d      	mov	r5, r1
    26e4:	4614      	mov	r4, r2
    26e6:	d103      	bne.n	26f0 <_ungetc_r+0x14>
    26e8:	f04f 35ff 	mov.w	r5, #4294967295
    26ec:	4628      	mov	r0, r5
    26ee:	bd70      	pop	{r4, r5, r6, pc}
    26f0:	b118      	cbz	r0, 26fa <_ungetc_r+0x1e>
    26f2:	6983      	ldr	r3, [r0, #24]
    26f4:	b90b      	cbnz	r3, 26fa <_ungetc_r+0x1e>
    26f6:	f7fe fb97 	bl	e28 <__sinit>
    26fa:	4b2e      	ldr	r3, [pc, #184]	; (27b4 <_ungetc_r+0xd8>)
    26fc:	429c      	cmp	r4, r3
    26fe:	d12c      	bne.n	275a <_ungetc_r+0x7e>
    2700:	6874      	ldr	r4, [r6, #4]
    2702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2706:	f023 0320 	bic.w	r3, r3, #32
    270a:	81a3      	strh	r3, [r4, #12]
    270c:	b29b      	uxth	r3, r3
    270e:	0759      	lsls	r1, r3, #29
    2710:	d413      	bmi.n	273a <_ungetc_r+0x5e>
    2712:	06da      	lsls	r2, r3, #27
    2714:	d5e8      	bpl.n	26e8 <_ungetc_r+0xc>
    2716:	071b      	lsls	r3, r3, #28
    2718:	d50b      	bpl.n	2732 <_ungetc_r+0x56>
    271a:	4621      	mov	r1, r4
    271c:	4630      	mov	r0, r6
    271e:	f7fe fb07 	bl	d30 <_fflush_r>
    2722:	2800      	cmp	r0, #0
    2724:	d1e0      	bne.n	26e8 <_ungetc_r+0xc>
    2726:	89a3      	ldrh	r3, [r4, #12]
    2728:	60a0      	str	r0, [r4, #8]
    272a:	f023 0308 	bic.w	r3, r3, #8
    272e:	81a3      	strh	r3, [r4, #12]
    2730:	61a0      	str	r0, [r4, #24]
    2732:	89a3      	ldrh	r3, [r4, #12]
    2734:	f043 0304 	orr.w	r3, r3, #4
    2738:	81a3      	strh	r3, [r4, #12]
    273a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    273c:	6862      	ldr	r2, [r4, #4]
    273e:	b2ed      	uxtb	r5, r5
    2740:	b1e3      	cbz	r3, 277c <_ungetc_r+0xa0>
    2742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2744:	429a      	cmp	r2, r3
    2746:	da12      	bge.n	276e <_ungetc_r+0x92>
    2748:	6823      	ldr	r3, [r4, #0]
    274a:	1e5a      	subs	r2, r3, #1
    274c:	6022      	str	r2, [r4, #0]
    274e:	f803 5c01 	strb.w	r5, [r3, #-1]
    2752:	6863      	ldr	r3, [r4, #4]
    2754:	3301      	adds	r3, #1
    2756:	6063      	str	r3, [r4, #4]
    2758:	e7c8      	b.n	26ec <_ungetc_r+0x10>
    275a:	4b17      	ldr	r3, [pc, #92]	; (27b8 <_ungetc_r+0xdc>)
    275c:	429c      	cmp	r4, r3
    275e:	d101      	bne.n	2764 <_ungetc_r+0x88>
    2760:	68b4      	ldr	r4, [r6, #8]
    2762:	e7ce      	b.n	2702 <_ungetc_r+0x26>
    2764:	4b15      	ldr	r3, [pc, #84]	; (27bc <_ungetc_r+0xe0>)
    2766:	429c      	cmp	r4, r3
    2768:	bf08      	it	eq
    276a:	68f4      	ldreq	r4, [r6, #12]
    276c:	e7c9      	b.n	2702 <_ungetc_r+0x26>
    276e:	4621      	mov	r1, r4
    2770:	4630      	mov	r0, r6
    2772:	f7ff ff77 	bl	2664 <__submore>
    2776:	2800      	cmp	r0, #0
    2778:	d0e6      	beq.n	2748 <_ungetc_r+0x6c>
    277a:	e7b5      	b.n	26e8 <_ungetc_r+0xc>
    277c:	6921      	ldr	r1, [r4, #16]
    277e:	6823      	ldr	r3, [r4, #0]
    2780:	b151      	cbz	r1, 2798 <_ungetc_r+0xbc>
    2782:	4299      	cmp	r1, r3
    2784:	d208      	bcs.n	2798 <_ungetc_r+0xbc>
    2786:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    278a:	428d      	cmp	r5, r1
    278c:	d104      	bne.n	2798 <_ungetc_r+0xbc>
    278e:	3b01      	subs	r3, #1
    2790:	3201      	adds	r2, #1
    2792:	6023      	str	r3, [r4, #0]
    2794:	6062      	str	r2, [r4, #4]
    2796:	e7a9      	b.n	26ec <_ungetc_r+0x10>
    2798:	63e3      	str	r3, [r4, #60]	; 0x3c
    279a:	f104 0344 	add.w	r3, r4, #68	; 0x44
    279e:	6363      	str	r3, [r4, #52]	; 0x34
    27a0:	2303      	movs	r3, #3
    27a2:	63a3      	str	r3, [r4, #56]	; 0x38
    27a4:	4623      	mov	r3, r4
    27a6:	6422      	str	r2, [r4, #64]	; 0x40
    27a8:	f803 5f46 	strb.w	r5, [r3, #70]!
    27ac:	6023      	str	r3, [r4, #0]
    27ae:	2301      	movs	r3, #1
    27b0:	e7d1      	b.n	2756 <_ungetc_r+0x7a>
    27b2:	bf00      	nop
    27b4:	00002cd4 	.word	0x00002cd4
    27b8:	00002cf4 	.word	0x00002cf4
    27bc:	00002cb4 	.word	0x00002cb4

000027c0 <_fstat_r>:
    27c0:	b538      	push	{r3, r4, r5, lr}
    27c2:	4c07      	ldr	r4, [pc, #28]	; (27e0 <_fstat_r+0x20>)
    27c4:	2300      	movs	r3, #0
    27c6:	4605      	mov	r5, r0
    27c8:	4608      	mov	r0, r1
    27ca:	4611      	mov	r1, r2
    27cc:	6023      	str	r3, [r4, #0]
    27ce:	f7fd ff32 	bl	636 <_fstat>
    27d2:	1c43      	adds	r3, r0, #1
    27d4:	d102      	bne.n	27dc <_fstat_r+0x1c>
    27d6:	6823      	ldr	r3, [r4, #0]
    27d8:	b103      	cbz	r3, 27dc <_fstat_r+0x1c>
    27da:	602b      	str	r3, [r5, #0]
    27dc:	bd38      	pop	{r3, r4, r5, pc}
    27de:	bf00      	nop
    27e0:	200002ec 	.word	0x200002ec

000027e4 <_isatty_r>:
    27e4:	b538      	push	{r3, r4, r5, lr}
    27e6:	4c06      	ldr	r4, [pc, #24]	; (2800 <_isatty_r+0x1c>)
    27e8:	2300      	movs	r3, #0
    27ea:	4605      	mov	r5, r0
    27ec:	4608      	mov	r0, r1
    27ee:	6023      	str	r3, [r4, #0]
    27f0:	f7fd ff26 	bl	640 <_isatty>
    27f4:	1c43      	adds	r3, r0, #1
    27f6:	d102      	bne.n	27fe <_isatty_r+0x1a>
    27f8:	6823      	ldr	r3, [r4, #0]
    27fa:	b103      	cbz	r3, 27fe <_isatty_r+0x1a>
    27fc:	602b      	str	r3, [r5, #0]
    27fe:	bd38      	pop	{r3, r4, r5, pc}
    2800:	200002ec 	.word	0x200002ec

00002804 <__locale_ctype_ptr_l>:
    2804:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    2808:	4770      	bx	lr
	...

0000280c <__locale_ctype_ptr>:
    280c:	4b04      	ldr	r3, [pc, #16]	; (2820 <__locale_ctype_ptr+0x14>)
    280e:	4a05      	ldr	r2, [pc, #20]	; (2824 <__locale_ctype_ptr+0x18>)
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	6a1b      	ldr	r3, [r3, #32]
    2814:	2b00      	cmp	r3, #0
    2816:	bf08      	it	eq
    2818:	4613      	moveq	r3, r2
    281a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    281e:	4770      	bx	lr
    2820:	2000006c 	.word	0x2000006c
    2824:	200000d0 	.word	0x200000d0

00002828 <__ascii_mbtowc>:
    2828:	b082      	sub	sp, #8
    282a:	b901      	cbnz	r1, 282e <__ascii_mbtowc+0x6>
    282c:	a901      	add	r1, sp, #4
    282e:	b142      	cbz	r2, 2842 <__ascii_mbtowc+0x1a>
    2830:	b14b      	cbz	r3, 2846 <__ascii_mbtowc+0x1e>
    2832:	7813      	ldrb	r3, [r2, #0]
    2834:	600b      	str	r3, [r1, #0]
    2836:	7812      	ldrb	r2, [r2, #0]
    2838:	1c10      	adds	r0, r2, #0
    283a:	bf18      	it	ne
    283c:	2001      	movne	r0, #1
    283e:	b002      	add	sp, #8
    2840:	4770      	bx	lr
    2842:	4610      	mov	r0, r2
    2844:	e7fb      	b.n	283e <__ascii_mbtowc+0x16>
    2846:	f06f 0001 	mvn.w	r0, #1
    284a:	e7f8      	b.n	283e <__ascii_mbtowc+0x16>
    284c:	0000      	movs	r0, r0
	...

00002850 <memchr>:
    2850:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2854:	2a10      	cmp	r2, #16
    2856:	db2b      	blt.n	28b0 <memchr+0x60>
    2858:	f010 0f07 	tst.w	r0, #7
    285c:	d008      	beq.n	2870 <memchr+0x20>
    285e:	f810 3b01 	ldrb.w	r3, [r0], #1
    2862:	3a01      	subs	r2, #1
    2864:	428b      	cmp	r3, r1
    2866:	d02d      	beq.n	28c4 <memchr+0x74>
    2868:	f010 0f07 	tst.w	r0, #7
    286c:	b342      	cbz	r2, 28c0 <memchr+0x70>
    286e:	d1f6      	bne.n	285e <memchr+0xe>
    2870:	b4f0      	push	{r4, r5, r6, r7}
    2872:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    2876:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    287a:	f022 0407 	bic.w	r4, r2, #7
    287e:	f07f 0700 	mvns.w	r7, #0
    2882:	2300      	movs	r3, #0
    2884:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    2888:	3c08      	subs	r4, #8
    288a:	ea85 0501 	eor.w	r5, r5, r1
    288e:	ea86 0601 	eor.w	r6, r6, r1
    2892:	fa85 f547 	uadd8	r5, r5, r7
    2896:	faa3 f587 	sel	r5, r3, r7
    289a:	fa86 f647 	uadd8	r6, r6, r7
    289e:	faa5 f687 	sel	r6, r5, r7
    28a2:	b98e      	cbnz	r6, 28c8 <memchr+0x78>
    28a4:	d1ee      	bne.n	2884 <memchr+0x34>
    28a6:	bcf0      	pop	{r4, r5, r6, r7}
    28a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    28ac:	f002 0207 	and.w	r2, r2, #7
    28b0:	b132      	cbz	r2, 28c0 <memchr+0x70>
    28b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    28b6:	3a01      	subs	r2, #1
    28b8:	ea83 0301 	eor.w	r3, r3, r1
    28bc:	b113      	cbz	r3, 28c4 <memchr+0x74>
    28be:	d1f8      	bne.n	28b2 <memchr+0x62>
    28c0:	2000      	movs	r0, #0
    28c2:	4770      	bx	lr
    28c4:	3801      	subs	r0, #1
    28c6:	4770      	bx	lr
    28c8:	2d00      	cmp	r5, #0
    28ca:	bf06      	itte	eq
    28cc:	4635      	moveq	r5, r6
    28ce:	3803      	subeq	r0, #3
    28d0:	3807      	subne	r0, #7
    28d2:	f015 0f01 	tst.w	r5, #1
    28d6:	d107      	bne.n	28e8 <memchr+0x98>
    28d8:	3001      	adds	r0, #1
    28da:	f415 7f80 	tst.w	r5, #256	; 0x100
    28de:	bf02      	ittt	eq
    28e0:	3001      	addeq	r0, #1
    28e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    28e6:	3001      	addeq	r0, #1
    28e8:	bcf0      	pop	{r4, r5, r6, r7}
    28ea:	3801      	subs	r0, #1
    28ec:	4770      	bx	lr
    28ee:	bf00      	nop

000028f0 <memcpy>:
    28f0:	b510      	push	{r4, lr}
    28f2:	1e43      	subs	r3, r0, #1
    28f4:	440a      	add	r2, r1
    28f6:	4291      	cmp	r1, r2
    28f8:	d100      	bne.n	28fc <memcpy+0xc>
    28fa:	bd10      	pop	{r4, pc}
    28fc:	f811 4b01 	ldrb.w	r4, [r1], #1
    2900:	f803 4f01 	strb.w	r4, [r3, #1]!
    2904:	e7f7      	b.n	28f6 <memcpy+0x6>

00002906 <_realloc_r>:
    2906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2908:	4607      	mov	r7, r0
    290a:	4614      	mov	r4, r2
    290c:	460e      	mov	r6, r1
    290e:	b921      	cbnz	r1, 291a <_realloc_r+0x14>
    2910:	4611      	mov	r1, r2
    2912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2916:	f7fe bba7 	b.w	1068 <_malloc_r>
    291a:	b922      	cbnz	r2, 2926 <_realloc_r+0x20>
    291c:	f7fe fb56 	bl	fcc <_free_r>
    2920:	4625      	mov	r5, r4
    2922:	4628      	mov	r0, r5
    2924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2926:	f000 f821 	bl	296c <_malloc_usable_size_r>
    292a:	4284      	cmp	r4, r0
    292c:	d90f      	bls.n	294e <_realloc_r+0x48>
    292e:	4621      	mov	r1, r4
    2930:	4638      	mov	r0, r7
    2932:	f7fe fb99 	bl	1068 <_malloc_r>
    2936:	4605      	mov	r5, r0
    2938:	2800      	cmp	r0, #0
    293a:	d0f2      	beq.n	2922 <_realloc_r+0x1c>
    293c:	4631      	mov	r1, r6
    293e:	4622      	mov	r2, r4
    2940:	f7ff ffd6 	bl	28f0 <memcpy>
    2944:	4631      	mov	r1, r6
    2946:	4638      	mov	r0, r7
    2948:	f7fe fb40 	bl	fcc <_free_r>
    294c:	e7e9      	b.n	2922 <_realloc_r+0x1c>
    294e:	4635      	mov	r5, r6
    2950:	e7e7      	b.n	2922 <_realloc_r+0x1c>

00002952 <__ascii_wctomb>:
    2952:	b149      	cbz	r1, 2968 <__ascii_wctomb+0x16>
    2954:	2aff      	cmp	r2, #255	; 0xff
    2956:	bf85      	ittet	hi
    2958:	238a      	movhi	r3, #138	; 0x8a
    295a:	6003      	strhi	r3, [r0, #0]
    295c:	700a      	strbls	r2, [r1, #0]
    295e:	f04f 30ff 	movhi.w	r0, #4294967295
    2962:	bf98      	it	ls
    2964:	2001      	movls	r0, #1
    2966:	4770      	bx	lr
    2968:	4608      	mov	r0, r1
    296a:	4770      	bx	lr

0000296c <_malloc_usable_size_r>:
    296c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    2970:	2800      	cmp	r0, #0
    2972:	f1a0 0004 	sub.w	r0, r0, #4
    2976:	bfbc      	itt	lt
    2978:	580b      	ldrlt	r3, [r1, r0]
    297a:	18c0      	addlt	r0, r0, r3
    297c:	4770      	bx	lr
    297e:	0000      	movs	r0, r0
    2980:	682f2e2e 	.word	0x682f2e2e
    2984:	732f6c61 	.word	0x732f6c61
    2988:	682f6372 	.word	0x682f6372
    298c:	695f6c61 	.word	0x695f6c61
    2990:	00632e6f 	.word	0x00632e6f
    2994:	682f2e2e 	.word	0x682f2e2e
    2998:	732f6c61 	.word	0x732f6c61
    299c:	682f6372 	.word	0x682f6372
    29a0:	755f6c61 	.word	0x755f6c61
    29a4:	74726173 	.word	0x74726173
    29a8:	6e79735f 	.word	0x6e79735f
    29ac:	00632e63 	.word	0x00632e63
    29b0:	40003000 	.word	0x40003000
    29b4:	40003400 	.word	0x40003400
    29b8:	41012000 	.word	0x41012000
    29bc:	41014000 	.word	0x41014000
    29c0:	43000000 	.word	0x43000000
    29c4:	43000400 	.word	0x43000400
    29c8:	43000800 	.word	0x43000800
    29cc:	43000c00 	.word	0x43000c00

000029d0 <_i2cms>:
	...
    29e8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    29f8:	65735f6c 6d6f6372 0000632e 21210a0d     l_sercom.c....!!
    2a08:	21212121 49202121 6148206e 61466472     !!!!!! In HardFa
    2a18:	5f746c75 646e6148 2072656c 21212121     ult_Handler !!!!
    2a28:	21212121 0000000d 61440a0d 61206174     !!!!......Data a
    2a38:	65742074 61207473 65726464 25207373     t test address %
    2a48:	73692064 25203d20 000a0d64 6e490a0d     d is = %d.....In
    2a58:	74726576 74206465 64206568 20617461     verted the data 
    2a68:	74207461 20747365 72646461 20737365     at test address 
    2a78:	20646e61 74697277 0d6e6574 00000000     and written.....
    2a88:	6c500a0d 65736165 6e6f6320 75676966     ..Please configu
    2a98:	53206572 204b4c42 65737566 206f7420     re SBLK fuse to 
    2aa8:	6f6c6c61 65746163 616d5320 45457472     allocate SmartEE
    2ab8:	4d4f5250 65726120 00000d61 64323025     PROM area...%02d
    2ac8:	00000020 0a0d0a0d 3d3d3d3d 3d3d3d3d      .......========
    2ad8:	3d3d3d3d 616d533d 45457472 4d4f5250     =====SmartEEPROM
    2ae8:	61784520 656c706d 3d3d3d3d 3d3d3d3d      Example========
    2af8:	3d3d3d3d 00000d3d 6d530a0d 45747261     =====.....SmartE
    2b08:	4f525045 6f63204d 6961746e 7620736e     EPROM contains v
    2b18:	64696c61 74616420 000d2061 74530a0d     alid data ....St
    2b28:	6e69726f 69732067 74616e67 20657275     oring signature 
    2b38:	53206f74 7472616d 52504545 61204d4f     to SmartEEPROM a
    2b48:	65726464 30207373 20303078 30206f74     ddress 0x00 to 0
    2b58:	0d333078 00000000 75460a0d 76206573     x03.......Fuse v
    2b68:	65756c61 6f662073 42532072 3d204b4c     alues for SBLK =
    2b78:	2c642520 5a535020 25203d20 53202e64      %d, PSZ = %d. S
    2b88:	74206565 74206568 656c6261 6d532720     ee the table 'Sm
    2b98:	45747261 4f525045 6956204d 61757472     artEEPROM Virtua
    2ba8:	5309206c 20657a69 42206e69 73657479     l .Size in Bytes
    2bb8:	6e692027 65687420 74614420 65687361     ' in the Datashe
    2bc8:	74207465 6163206f 6c75636c 20657461     et to calculate 
    2bd8:	61746f74 7661206c 616c6961 20656c62     total available 
    2be8:	65747962 0a0d2073 00000000 00007325     bytes ......%s..
    2bf8:	65530a0d 7463656c 6f206465 6f697470     ..Selected optio
    2c08:	7369206e 0d642520 0000000a 45450a0d     n is %d.......EE
    2c18:	4d4f5250 74614420 74612061 72696620     PROM Data at fir
    2c28:	25207473 6f6c2064 69746163 3a736e6f     st %d locations:
    2c38:	000a0d20 6e450a0d 20726574 72646461      .....Enter addr
    2c48:	20737365 00203e3e 52450a0d 3a524f52     ess >> ...ERROR:
    2c58:	64644120 73736572 766e6920 64696c61      Address invalid
    2c68:	7254202e 67612079 206e6961 0000000d     . Try again ....
    2c78:	6e450a0d 20726574 61746164 203e3e20     ..Enter data >> 
    2c88:	00000000 72570a0d 65747469 6425206e     ......Written %d
    2c98:	20746120 00006425 6e490a0d 696c6176      at %d....Invali
    2ca8:	706f2064 6e6f6974 00000d20              d option ...

00002cb4 <__sf_fake_stderr>:
	...

00002cd4 <__sf_fake_stdin>:
	...

00002cf4 <__sf_fake_stdout>:
	...

00002d14 <_global_impure_ptr>:
    2d14:	20000070 2b302d23 6c680020 6665004c     p.. #-0+ .hlL.ef
    2d24:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    2d34:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    2d44:	64636261 00006665 00002d6a 00002d6d     abcdef..j-..m-..
    2d54:	00002d70 61462d41 3938662d 33323130     p-..A-Fa-f890123
    2d64:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    2d74:	534f5000 2e005849 20200000                       .POSIX...

00002d7d <_ctype_>:
    2d7d:	20202000 20202020 28282020 20282828     .         ((((( 
    2d8d:	20202020 20202020 20202020 20202020                     
    2d9d:	10108820 10101010 10101010 10101010      ...............
    2dad:	04040410 04040404 10040404 10101010     ................
    2dbd:	41411010 41414141 01010101 01010101     ..AAAAAA........
    2dcd:	01010101 01010101 01010101 10101010     ................
    2ddd:	42421010 42424242 02020202 02020202     ..BBBBBB........
    2ded:	02020202 02020202 02020202 10101010     ................
    2dfd:	00000020 00000000 00000000 00000000      ...............
	...

00002e80 <_init>:
    2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e82:	bf00      	nop
    2e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e86:	bc08      	pop	{r3}
    2e88:	469e      	mov	lr, r3
    2e8a:	4770      	bx	lr

00002e8c <__init_array_start>:
    2e8c:	00000289 	.word	0x00000289

00002e90 <_fini>:
    2e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e92:	bf00      	nop
    2e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e96:	bc08      	pop	{r3}
    2e98:	469e      	mov	lr, r3
    2e9a:	4770      	bx	lr

00002e9c <__fini_array_start>:
    2e9c:	00000265 	.word	0x00000265
