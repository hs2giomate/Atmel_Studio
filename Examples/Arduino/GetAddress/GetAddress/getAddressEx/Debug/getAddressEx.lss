
getAddressEx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a80  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  20000000  00006a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c78  200000b0  00006b30  000200b0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  5 .debug_info   0007aea2  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00008788  00000000  00000000  0009afd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000f627  00000000  00000000  000a375b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000f40  00000000  00000000  000b2d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001fb8  00000000  00000000  000b3cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001f1b9  00000000  00000000  000b5c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000136ae  00000000  00000000  000d4e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00086b80  00000000  00000000  000e84e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003068  00000000  00000000  0016f064  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001b9  00000000  00000000  001720cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 a9 04 00 00 91 04 00 00 91 04 00 00     ... ............
	...
      2c:	91 04 00 00 00 00 00 00 00 00 00 00 91 04 00 00     ................
      3c:	fd 04 00 00 91 04 00 00 91 04 00 00 91 04 00 00     ................
      4c:	91 04 00 00 91 04 00 00 91 04 00 00 91 04 00 00     ................
      5c:	95 04 00 00 91 04 00 00 91 04 00 00 91 04 00 00     ................
      6c:	91 04 00 00 91 04 00 00 e9 31 00 00 d9 31 00 00     .........1...1..
      7c:	91 04 00 00 91 04 00 00 91 04 00 00 91 04 00 00     ................
      8c:	91 04 00 00 00 00 00 00 91 04 00 00 91 04 00 00     ................
      9c:	91 04 00 00 91 04 00 00 91 04 00 00 91 04 00 00     ................
      ac:	91 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000b0 	.word	0x200000b0
      d4:	00000000 	.word	0x00000000
      d8:	00006a7c 	.word	0x00006a7c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b4 	.word	0x200000b4
     108:	00006a7c 	.word	0x00006a7c
     10c:	200000ac 	.word	0x200000ac
     110:	00000000 	.word	0x00000000

00000114 <__tcf_0>:
#define BAUD_RATE 115200
#endif

#define arrayLen(x) sizeof(x)/sizeof(x[0])
uint32_t strAddr[3], floatAddr[2], byteAddr[4];
String testStr[] = {
     114:	b510      	push	{r4, lr}
     116:	4c06      	ldr	r4, [pc, #24]	; (130 <__tcf_0+0x1c>)
     118:	0020      	movs	r0, r4
     11a:	3018      	adds	r0, #24
     11c:	f002 f89e 	bl	225c <_ZN6StringD1Ev>
     120:	0020      	movs	r0, r4
     122:	300c      	adds	r0, #12
     124:	f002 f89a 	bl	225c <_ZN6StringD1Ev>
     128:	0020      	movs	r0, r4
     12a:	f002 f897 	bl	225c <_ZN6StringD1Ev>
     12e:	bd10      	pop	{r4, pc}
     130:	200001f4 	.word	0x200001f4

00000134 <loop>:
  //flash.eraseChip();      // Uncomment this if you would like to erase chip
}

void loop() {

}
     134:	4770      	bx	lr
	...

00000138 <_Z12getAddressesv>:

// Function to get adresses for various variables
void getAddresses() {
     138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     13a:	2500      	movs	r5, #0
  for (uint8_t i = 0; i < arrayLen(byteAddr); i++) {
    byteAddr[i] = flash.getAddress(sizeof(byte));
     13c:	2101      	movs	r1, #1
     13e:	482f      	ldr	r0, [pc, #188]	; (1fc <_Z12getAddressesv+0xc4>)
     140:	f002 f9c0 	bl	24c4 <_ZN8SPIFlash10getAddressEt>
    Serial.print("Byte Address ");
     144:	4c2e      	ldr	r4, [pc, #184]	; (200 <_Z12getAddressesv+0xc8>)
    byteAddr[i] = flash.getAddress(sizeof(byte));
     146:	4e2f      	ldr	r6, [pc, #188]	; (204 <_Z12getAddressesv+0xcc>)
     148:	00af      	lsls	r7, r5, #2
     14a:	51b8      	str	r0, [r7, r6]
    Serial.print("Byte Address ");
     14c:	492e      	ldr	r1, [pc, #184]	; (208 <_Z12getAddressesv+0xd0>)
     14e:	0020      	movs	r0, r4
     150:	f000 fa8d 	bl	66e <_ZN5Print5printEPKc>
    Serial.print(i);
     154:	b2e9      	uxtb	r1, r5
     156:	220a      	movs	r2, #10
     158:	0020      	movs	r0, r4
     15a:	f000 fada 	bl	712 <_ZN5Print5printEhi>
    Serial.print(" : 0x");
     15e:	492b      	ldr	r1, [pc, #172]	; (20c <_Z12getAddressesv+0xd4>)
     160:	0020      	movs	r0, r4
     162:	f000 fa84 	bl	66e <_ZN5Print5printEPKc>
     166:	3501      	adds	r5, #1
    Serial.println(byteAddr[i], HEX);
     168:	2210      	movs	r2, #16
     16a:	59b9      	ldr	r1, [r7, r6]
     16c:	0020      	movs	r0, r4
     16e:	f000 fad4 	bl	71a <_ZN5Print7printlnEmi>
  for (uint8_t i = 0; i < arrayLen(byteAddr); i++) {
     172:	2d04      	cmp	r5, #4
     174:	d1e2      	bne.n	13c <_Z12getAddressesv+0x4>
     176:	2500      	movs	r5, #0
  }

  for (uint8_t i = 0; i < arrayLen(floatAddr); i++) {
    floatAddr[i] = flash.getAddress(sizeof(float));
     178:	2104      	movs	r1, #4
     17a:	4820      	ldr	r0, [pc, #128]	; (1fc <_Z12getAddressesv+0xc4>)
     17c:	f002 f9a2 	bl	24c4 <_ZN8SPIFlash10getAddressEt>
     180:	4e23      	ldr	r6, [pc, #140]	; (210 <_Z12getAddressesv+0xd8>)
     182:	00af      	lsls	r7, r5, #2
     184:	51b8      	str	r0, [r7, r6]
    Serial.print("Float Address ");
     186:	4923      	ldr	r1, [pc, #140]	; (214 <_Z12getAddressesv+0xdc>)
     188:	0020      	movs	r0, r4
     18a:	f000 fa70 	bl	66e <_ZN5Print5printEPKc>
    Serial.print(i);
     18e:	b2e9      	uxtb	r1, r5
     190:	220a      	movs	r2, #10
     192:	0020      	movs	r0, r4
     194:	f000 fabd 	bl	712 <_ZN5Print5printEhi>
    Serial.print(" : 0x");
     198:	491c      	ldr	r1, [pc, #112]	; (20c <_Z12getAddressesv+0xd4>)
     19a:	0020      	movs	r0, r4
     19c:	f000 fa67 	bl	66e <_ZN5Print5printEPKc>
     1a0:	3501      	adds	r5, #1
    Serial.println(floatAddr[i], HEX);
     1a2:	2210      	movs	r2, #16
     1a4:	59b9      	ldr	r1, [r7, r6]
     1a6:	0020      	movs	r0, r4
     1a8:	f000 fab7 	bl	71a <_ZN5Print7printlnEmi>
  for (uint8_t i = 0; i < arrayLen(floatAddr); i++) {
     1ac:	2d02      	cmp	r5, #2
     1ae:	d1e3      	bne.n	178 <_Z12getAddressesv+0x40>
     1b0:	2500      	movs	r5, #0
  }

  for (uint8_t i = 0; i < arrayLen(strAddr); i++) {
    strAddr[i] = flash.getAddress(flash.sizeofStr(testStr[i]));
     1b2:	230c      	movs	r3, #12
     1b4:	436b      	muls	r3, r5
     1b6:	4918      	ldr	r1, [pc, #96]	; (218 <_Z12getAddressesv+0xe0>)
     1b8:	4810      	ldr	r0, [pc, #64]	; (1fc <_Z12getAddressesv+0xc4>)
     1ba:	18c9      	adds	r1, r1, r3
     1bc:	f002 f9a6 	bl	250c <_ZN8SPIFlash9sizeofStrER6String>
     1c0:	0001      	movs	r1, r0
     1c2:	480e      	ldr	r0, [pc, #56]	; (1fc <_Z12getAddressesv+0xc4>)
     1c4:	f002 f97e 	bl	24c4 <_ZN8SPIFlash10getAddressEt>
     1c8:	4f14      	ldr	r7, [pc, #80]	; (21c <_Z12getAddressesv+0xe4>)
     1ca:	00ae      	lsls	r6, r5, #2
     1cc:	51f0      	str	r0, [r6, r7]
    Serial.print("String Address ");
     1ce:	4914      	ldr	r1, [pc, #80]	; (220 <_Z12getAddressesv+0xe8>)
     1d0:	0020      	movs	r0, r4
     1d2:	f000 fa4c 	bl	66e <_ZN5Print5printEPKc>
    Serial.print(i);
     1d6:	b2e9      	uxtb	r1, r5
     1d8:	220a      	movs	r2, #10
     1da:	0020      	movs	r0, r4
     1dc:	f000 fa99 	bl	712 <_ZN5Print5printEhi>
    Serial.print(" : 0x");
     1e0:	490a      	ldr	r1, [pc, #40]	; (20c <_Z12getAddressesv+0xd4>)
     1e2:	0020      	movs	r0, r4
     1e4:	f000 fa43 	bl	66e <_ZN5Print5printEPKc>
     1e8:	3501      	adds	r5, #1
    Serial.println(strAddr[i], HEX);
     1ea:	2210      	movs	r2, #16
     1ec:	59f1      	ldr	r1, [r6, r7]
     1ee:	0020      	movs	r0, r4
     1f0:	f000 fa93 	bl	71a <_ZN5Print7printlnEmi>
  for (uint8_t i = 0; i < arrayLen(strAddr); i++) {
     1f4:	2d03      	cmp	r5, #3
     1f6:	d1dc      	bne.n	1b2 <_Z12getAddressesv+0x7a>
  }
}
     1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	200000dc 	.word	0x200000dc
     200:	20000220 	.word	0x20000220
     204:	200000cc 	.word	0x200000cc
     208:	00005e72 	.word	0x00005e72
     20c:	00005e80 	.word	0x00005e80
     210:	200001e0 	.word	0x200001e0
     214:	00005e86 	.word	0x00005e86
     218:	200001f4 	.word	0x200001f4
     21c:	200001e8 	.word	0x200001e8
     220:	00005e95 	.word	0x00005e95

00000224 <_Z6dataIOv>:

// Function to write data
void dataIO() {
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b087      	sub	sp, #28
  uint8_t _byte;
  float _float;
  String _string;
     228:	495a      	ldr	r1, [pc, #360]	; (394 <_Z6dataIOv+0x170>)
     22a:	a803      	add	r0, sp, #12
     22c:	f002 f860 	bl	22f0 <_ZN6StringC1EPKc>
     230:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < arrayLen(byteAddr); i++) {
    if (flash.writeByte(byteAddr[i], testByte[i])) {
     232:	4e59      	ldr	r6, [pc, #356]	; (398 <_Z6dataIOv+0x174>)
     234:	4f59      	ldr	r7, [pc, #356]	; (39c <_Z6dataIOv+0x178>)
     236:	00a5      	lsls	r5, r4, #2
     238:	5da2      	ldrb	r2, [r4, r6]
     23a:	2301      	movs	r3, #1
     23c:	59e9      	ldr	r1, [r5, r7]
     23e:	4858      	ldr	r0, [pc, #352]	; (3a0 <_Z6dataIOv+0x17c>)
     240:	f002 fa16 	bl	2670 <_ZN8SPIFlash9writeByteEmhb>
     244:	2800      	cmp	r0, #0
     246:	d00e      	beq.n	266 <_Z6dataIOv+0x42>
      Serial.print(testByte[i]);
     248:	5da1      	ldrb	r1, [r4, r6]
     24a:	4e56      	ldr	r6, [pc, #344]	; (3a4 <_Z6dataIOv+0x180>)
     24c:	220a      	movs	r2, #10
     24e:	0030      	movs	r0, r6
     250:	f000 fa5f 	bl	712 <_ZN5Print5printEhi>
      Serial.print(" written to 0x");
     254:	4954      	ldr	r1, [pc, #336]	; (3a8 <_Z6dataIOv+0x184>)
     256:	0030      	movs	r0, r6
     258:	f000 fa09 	bl	66e <_ZN5Print5printEPKc>
      Serial.println(byteAddr[i], HEX);
     25c:	2210      	movs	r2, #16
     25e:	59e9      	ldr	r1, [r5, r7]
     260:	0030      	movs	r0, r6
     262:	f000 fa5a 	bl	71a <_ZN5Print7printlnEmi>
    }
    _byte = flash.readByte(byteAddr[i]);
     266:	4f4d      	ldr	r7, [pc, #308]	; (39c <_Z6dataIOv+0x178>)
     268:	2200      	movs	r2, #0
     26a:	59e9      	ldr	r1, [r5, r7]
     26c:	484c      	ldr	r0, [pc, #304]	; (3a0 <_Z6dataIOv+0x17c>)
     26e:	f002 f951 	bl	2514 <_ZN8SPIFlash8readByteEmb>
    Serial.print(_byte);
     272:	4e4c      	ldr	r6, [pc, #304]	; (3a4 <_Z6dataIOv+0x180>)
    _byte = flash.readByte(byteAddr[i]);
     274:	0001      	movs	r1, r0
    Serial.print(_byte);
     276:	220a      	movs	r2, #10
     278:	0030      	movs	r0, r6
     27a:	f000 fa4a 	bl	712 <_ZN5Print5printEhi>
    Serial.print(" read from 0x");
     27e:	494b      	ldr	r1, [pc, #300]	; (3ac <_Z6dataIOv+0x188>)
     280:	0030      	movs	r0, r6
     282:	f000 f9f4 	bl	66e <_ZN5Print5printEPKc>
     286:	3401      	adds	r4, #1
    Serial.println(byteAddr[i], HEX);
     288:	2210      	movs	r2, #16
     28a:	59e9      	ldr	r1, [r5, r7]
     28c:	0030      	movs	r0, r6
     28e:	f000 fa44 	bl	71a <_ZN5Print7printlnEmi>
  for (uint8_t i = 0; i < arrayLen(byteAddr); i++) {
     292:	2c04      	cmp	r4, #4
     294:	d1cd      	bne.n	232 <_Z6dataIOv+0xe>
     296:	2400      	movs	r4, #0
  }

  for (uint8_t i = 0; i < arrayLen(floatAddr); i++) {
    if (flash.writeFloat(floatAddr[i], testFloat[i])) {
      Serial.print(testFloat[i]);
     298:	2602      	movs	r6, #2
    if (flash.writeFloat(floatAddr[i], testFloat[i])) {
     29a:	4d45      	ldr	r5, [pc, #276]	; (3b0 <_Z6dataIOv+0x18c>)
     29c:	4f45      	ldr	r7, [pc, #276]	; (3b4 <_Z6dataIOv+0x190>)
     29e:	2301      	movs	r3, #1
     2a0:	5962      	ldr	r2, [r4, r5]
     2a2:	59e1      	ldr	r1, [r4, r7]
     2a4:	483e      	ldr	r0, [pc, #248]	; (3a0 <_Z6dataIOv+0x17c>)
     2a6:	f002 fa2d 	bl	2704 <_ZN8SPIFlash10writeFloatEmfb>
     2aa:	2800      	cmp	r0, #0
     2ac:	d012      	beq.n	2d4 <_Z6dataIOv+0xb0>
      Serial.print(testFloat[i]);
     2ae:	5960      	ldr	r0, [r4, r5]
     2b0:	f005 fbd0 	bl	5a54 <__aeabi_f2d>
     2b4:	4d3b      	ldr	r5, [pc, #236]	; (3a4 <_Z6dataIOv+0x180>)
     2b6:	0002      	movs	r2, r0
     2b8:	000b      	movs	r3, r1
     2ba:	9600      	str	r6, [sp, #0]
     2bc:	0028      	movs	r0, r5
     2be:	f000 faf1 	bl	8a4 <_ZN5Print5printEdi>
      Serial.print(" written to 0x");
     2c2:	4939      	ldr	r1, [pc, #228]	; (3a8 <_Z6dataIOv+0x184>)
     2c4:	0028      	movs	r0, r5
     2c6:	f000 f9d2 	bl	66e <_ZN5Print5printEPKc>
      Serial.println(floatAddr[i], HEX);
     2ca:	2210      	movs	r2, #16
     2cc:	59e1      	ldr	r1, [r4, r7]
     2ce:	0028      	movs	r0, r5
     2d0:	f000 fa23 	bl	71a <_ZN5Print7printlnEmi>
    }
    _float = flash.readFloat(floatAddr[i]);
     2d4:	4f37      	ldr	r7, [pc, #220]	; (3b4 <_Z6dataIOv+0x190>)
     2d6:	2200      	movs	r2, #0
     2d8:	59e1      	ldr	r1, [r4, r7]
     2da:	4831      	ldr	r0, [pc, #196]	; (3a0 <_Z6dataIOv+0x17c>)
     2dc:	f002 f93d 	bl	255a <_ZN8SPIFlash9readFloatEmb>
    Serial.print(_float);
     2e0:	f005 fbb8 	bl	5a54 <__aeabi_f2d>
     2e4:	4d2f      	ldr	r5, [pc, #188]	; (3a4 <_Z6dataIOv+0x180>)
     2e6:	0002      	movs	r2, r0
     2e8:	000b      	movs	r3, r1
     2ea:	9600      	str	r6, [sp, #0]
     2ec:	0028      	movs	r0, r5
     2ee:	f000 fad9 	bl	8a4 <_ZN5Print5printEdi>
    Serial.print(" read from 0x");
     2f2:	492e      	ldr	r1, [pc, #184]	; (3ac <_Z6dataIOv+0x188>)
     2f4:	0028      	movs	r0, r5
     2f6:	f000 f9ba 	bl	66e <_ZN5Print5printEPKc>
    Serial.println(floatAddr[i], HEX);
     2fa:	59e1      	ldr	r1, [r4, r7]
     2fc:	2210      	movs	r2, #16
     2fe:	0028      	movs	r0, r5
     300:	3404      	adds	r4, #4
     302:	f000 fa0a 	bl	71a <_ZN5Print7printlnEmi>
  for (uint8_t i = 0; i < arrayLen(floatAddr); i++) {
     306:	2c08      	cmp	r4, #8
     308:	d1c7      	bne.n	29a <_Z6dataIOv+0x76>
     30a:	2400      	movs	r4, #0
     30c:	2303      	movs	r3, #3
     30e:	4363      	muls	r3, r4
     310:	4e29      	ldr	r6, [pc, #164]	; (3b8 <_Z6dataIOv+0x194>)
  }

  for (uint8_t i = 0; i < arrayLen(strAddr); i++) {
    if (flash.writeStr(strAddr[i], testStr[i])) {
     312:	4f2a      	ldr	r7, [pc, #168]	; (3bc <_Z6dataIOv+0x198>)
     314:	18f6      	adds	r6, r6, r3
     316:	0032      	movs	r2, r6
     318:	2301      	movs	r3, #1
     31a:	59e1      	ldr	r1, [r4, r7]
     31c:	4820      	ldr	r0, [pc, #128]	; (3a0 <_Z6dataIOv+0x17c>)
     31e:	f002 fa4d 	bl	27bc <_ZN8SPIFlash8writeStrEmR6Stringb>
     322:	2800      	cmp	r0, #0
     324:	d011      	beq.n	34a <_Z6dataIOv+0x126>
      Serial.print("'");
     326:	4d1f      	ldr	r5, [pc, #124]	; (3a4 <_Z6dataIOv+0x180>)
     328:	4925      	ldr	r1, [pc, #148]	; (3c0 <_Z6dataIOv+0x19c>)
     32a:	0028      	movs	r0, r5
     32c:	f000 f99f 	bl	66e <_ZN5Print5printEPKc>
      Serial.print(testStr[i]);
     330:	0031      	movs	r1, r6
     332:	0028      	movs	r0, r5
     334:	f000 f994 	bl	660 <_ZN5Print5printERK6String>
      Serial.print("' written to 0x");
     338:	4922      	ldr	r1, [pc, #136]	; (3c4 <_Z6dataIOv+0x1a0>)
     33a:	0028      	movs	r0, r5
     33c:	f000 f997 	bl	66e <_ZN5Print5printEPKc>
      Serial.println(strAddr[i], HEX);
     340:	2210      	movs	r2, #16
     342:	59e1      	ldr	r1, [r4, r7]
     344:	0028      	movs	r0, r5
     346:	f000 f9e8 	bl	71a <_ZN5Print7printlnEmi>
    }
    flash.readStr(strAddr[i], _string);
     34a:	4d1c      	ldr	r5, [pc, #112]	; (3bc <_Z6dataIOv+0x198>)
     34c:	2300      	movs	r3, #0
     34e:	aa03      	add	r2, sp, #12
     350:	5961      	ldr	r1, [r4, r5]
     352:	4813      	ldr	r0, [pc, #76]	; (3a0 <_Z6dataIOv+0x17c>)
     354:	f002 f928 	bl	25a8 <_ZN8SPIFlash7readStrEmR6Stringb>
    Serial.print("'");
     358:	4e12      	ldr	r6, [pc, #72]	; (3a4 <_Z6dataIOv+0x180>)
     35a:	4919      	ldr	r1, [pc, #100]	; (3c0 <_Z6dataIOv+0x19c>)
     35c:	0030      	movs	r0, r6
     35e:	f000 f986 	bl	66e <_ZN5Print5printEPKc>
    Serial.print(_string);
     362:	a903      	add	r1, sp, #12
     364:	0030      	movs	r0, r6
     366:	f000 f97b 	bl	660 <_ZN5Print5printERK6String>
    Serial.print("' read from 0x");
     36a:	4917      	ldr	r1, [pc, #92]	; (3c8 <_Z6dataIOv+0x1a4>)
     36c:	0030      	movs	r0, r6
     36e:	f000 f97e 	bl	66e <_ZN5Print5printEPKc>
    Serial.println(strAddr[i], HEX);
     372:	5961      	ldr	r1, [r4, r5]
     374:	2210      	movs	r2, #16
     376:	0030      	movs	r0, r6
     378:	f000 f9cf 	bl	71a <_ZN5Print7printlnEmi>
     37c:	3404      	adds	r4, #4
    _string = "";
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <_Z6dataIOv+0x170>)
     380:	a803      	add	r0, sp, #12
     382:	f001 fff0 	bl	2366 <_ZN6StringaSEPKc>
  for (uint8_t i = 0; i < arrayLen(strAddr); i++) {
     386:	2c0c      	cmp	r4, #12
     388:	d1c0      	bne.n	30c <_Z6dataIOv+0xe8>
  String _string;
     38a:	a803      	add	r0, sp, #12
     38c:	f001 ff66 	bl	225c <_ZN6StringD1Ev>
  }
}
     390:	b007      	add	sp, #28
     392:	bdf0      	pop	{r4, r5, r6, r7, pc}
     394:	00005eee 	.word	0x00005eee
     398:	20000004 	.word	0x20000004
     39c:	200000cc 	.word	0x200000cc
     3a0:	200000dc 	.word	0x200000dc
     3a4:	20000220 	.word	0x20000220
     3a8:	00005ea8 	.word	0x00005ea8
     3ac:	00005eb8 	.word	0x00005eb8
     3b0:	20000008 	.word	0x20000008
     3b4:	200001e0 	.word	0x200001e0
     3b8:	200001f4 	.word	0x200001f4
     3bc:	200001e8 	.word	0x200001e8
     3c0:	00005ea5 	.word	0x00005ea5
     3c4:	00005ea7 	.word	0x00005ea7
     3c8:	00005eb7 	.word	0x00005eb7

000003cc <setup>:
  Serial.begin(BAUD_RATE);
     3cc:	21e1      	movs	r1, #225	; 0xe1
void setup() {
     3ce:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(BAUD_RATE);
     3d0:	4c15      	ldr	r4, [pc, #84]	; (428 <setup+0x5c>)
     3d2:	0249      	lsls	r1, r1, #9
     3d4:	0020      	movs	r0, r4
     3d6:	f000 fd4f 	bl	e78 <_ZN7Serial_5beginEm>
  while (!Serial) ; // Wait for Serial monitor to open
     3da:	0020      	movs	r0, r4
     3dc:	f000 fd4e 	bl	e7c <_ZN7Serial_cvbEv>
     3e0:	2800      	cmp	r0, #0
     3e2:	d0fa      	beq.n	3da <setup+0xe>
  delay(50); //Time to terminal get connected
     3e4:	2032      	movs	r0, #50	; 0x32
     3e6:	f000 f8cd 	bl	584 <delay>
  Serial.print(F("Initialising Flash memory"));
     3ea:	4910      	ldr	r1, [pc, #64]	; (42c <setup+0x60>)
     3ec:	0020      	movs	r0, r4
     3ee:	f000 f933 	bl	658 <_ZN5Print5printEPK19__FlashStringHelper>
     3f2:	250a      	movs	r5, #10
    Serial.print(F("."));
     3f4:	490e      	ldr	r1, [pc, #56]	; (430 <setup+0x64>)
     3f6:	0020      	movs	r0, r4
     3f8:	3d01      	subs	r5, #1
     3fa:	f000 f92d 	bl	658 <_ZN5Print5printEPK19__FlashStringHelper>
  for (int i = 0; i < 10; ++i)
     3fe:	2d00      	cmp	r5, #0
     400:	d1f8      	bne.n	3f4 <setup+0x28>
  Serial.println();
     402:	0020      	movs	r0, r4
     404:	f000 f93c 	bl	680 <_ZN5Print7printlnEv>
  flash.begin();
     408:	0029      	movs	r1, r5
     40a:	480a      	ldr	r0, [pc, #40]	; (434 <setup+0x68>)
     40c:	f002 f828 	bl	2460 <_ZN8SPIFlash5beginEm>
  Serial.println();
     410:	0020      	movs	r0, r4
     412:	f000 f935 	bl	680 <_ZN5Print7printlnEv>
  Serial.println();
     416:	0020      	movs	r0, r4
     418:	f000 f932 	bl	680 <_ZN5Print7printlnEv>
  getAddresses();
     41c:	f7ff fe8c 	bl	138 <_Z12getAddressesv>
  dataIO();
     420:	f7ff ff00 	bl	224 <_Z6dataIOv>
}
     424:	bd70      	pop	{r4, r5, r6, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	20000220 	.word	0x20000220
     42c:	00005ec6 	.word	0x00005ec6
     430:	00006500 	.word	0x00006500
     434:	200000dc 	.word	0x200000dc

00000438 <_GLOBAL__sub_I_strAddr>:
}
     438:	b510      	push	{r4, lr}
};
     43a:	4c0d      	ldr	r4, [pc, #52]	; (470 <_GLOBAL__sub_I_strAddr+0x38>)
     43c:	490d      	ldr	r1, [pc, #52]	; (474 <_GLOBAL__sub_I_strAddr+0x3c>)
     43e:	0020      	movs	r0, r4
     440:	f001 ff56 	bl	22f0 <_ZN6StringC1EPKc>
     444:	0020      	movs	r0, r4
     446:	490c      	ldr	r1, [pc, #48]	; (478 <_GLOBAL__sub_I_strAddr+0x40>)
     448:	300c      	adds	r0, #12
     44a:	f001 ff51 	bl	22f0 <_ZN6StringC1EPKc>
     44e:	0020      	movs	r0, r4
     450:	490a      	ldr	r1, [pc, #40]	; (47c <_GLOBAL__sub_I_strAddr+0x44>)
     452:	3018      	adds	r0, #24
     454:	f001 ff4c 	bl	22f0 <_ZN6StringC1EPKc>
String testStr[] = {
     458:	4a09      	ldr	r2, [pc, #36]	; (480 <_GLOBAL__sub_I_strAddr+0x48>)
     45a:	490a      	ldr	r1, [pc, #40]	; (484 <_GLOBAL__sub_I_strAddr+0x4c>)
     45c:	2000      	movs	r0, #0
     45e:	f003 fbb7 	bl	3bd0 <__aeabi_atexit>
SPIFlash flash;
     462:	4a09      	ldr	r2, [pc, #36]	; (488 <_GLOBAL__sub_I_strAddr+0x50>)
     464:	210a      	movs	r1, #10
     466:	4809      	ldr	r0, [pc, #36]	; (48c <_GLOBAL__sub_I_strAddr+0x54>)
     468:	f001 ffa8 	bl	23bc <_ZN8SPIFlashC1EhP8SPIClass>
}
     46c:	bd10      	pop	{r4, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	200001f4 	.word	0x200001f4
     474:	00005e48 	.word	0x00005e48
     478:	00005e56 	.word	0x00005e56
     47c:	00005e64 	.word	0x00005e64
     480:	20000000 	.word	0x20000000
     484:	00000115 	.word	0x00000115
     488:	20000844 	.word	0x20000844
     48c:	200000dc 	.word	0x200000dc

00000490 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     490:	be03      	bkpt	0x0003
     492:	e7fe      	b.n	492 <Dummy_Handler+0x2>

00000494 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     494:	4b03      	ldr	r3, [pc, #12]	; (4a4 <USB_Handler+0x10>)
{
     496:	b510      	push	{r4, lr}
  if (usb_isr)
     498:	681b      	ldr	r3, [r3, #0]
     49a:	2b00      	cmp	r3, #0
     49c:	d000      	beq.n	4a0 <USB_Handler+0xc>
    usb_isr();
     49e:	4798      	blx	r3
}
     4a0:	bd10      	pop	{r4, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	20000218 	.word	0x20000218

000004a8 <Reset_Handler>:
{
     4a8:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     4aa:	490f      	ldr	r1, [pc, #60]	; (4e8 <Reset_Handler+0x40>)
     4ac:	4c0f      	ldr	r4, [pc, #60]	; (4ec <Reset_Handler+0x44>)
     4ae:	42a1      	cmp	r1, r4
     4b0:	d104      	bne.n	4bc <Reset_Handler+0x14>
  SystemInit();
     4b2:	f000 fa4f 	bl	954 <SystemInit>
  main();
     4b6:	f000 f88d 	bl	5d4 <main>
     4ba:	e7fe      	b.n	4ba <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     4bc:	4d0c      	ldr	r5, [pc, #48]	; (4f0 <Reset_Handler+0x48>)
     4be:	2300      	movs	r3, #0
     4c0:	428d      	cmp	r5, r1
     4c2:	d0f6      	beq.n	4b2 <Reset_Handler+0xa>
     4c4:	18ca      	adds	r2, r1, r3
     4c6:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     4c8:	42a2      	cmp	r2, r4
     4ca:	d305      	bcc.n	4d8 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     4cc:	4290      	cmp	r0, r2
     4ce:	d0f0      	beq.n	4b2 <Reset_Handler+0xa>
     4d0:	4b08      	ldr	r3, [pc, #32]	; (4f4 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     4d2:	4909      	ldr	r1, [pc, #36]	; (4f8 <Reset_Handler+0x50>)
      *pDest = 0;
     4d4:	2200      	movs	r2, #0
     4d6:	e004      	b.n	4e2 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     4d8:	6800      	ldr	r0, [r0, #0]
     4da:	3304      	adds	r3, #4
     4dc:	6010      	str	r0, [r2, #0]
     4de:	e7f1      	b.n	4c4 <Reset_Handler+0x1c>
      *pDest = 0;
     4e0:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     4e2:	428b      	cmp	r3, r1
     4e4:	d3fc      	bcc.n	4e0 <Reset_Handler+0x38>
     4e6:	e7e4      	b.n	4b2 <Reset_Handler+0xa>
     4e8:	20000000 	.word	0x20000000
     4ec:	200000b0 	.word	0x200000b0
     4f0:	00006a80 	.word	0x00006a80
     4f4:	200000b0 	.word	0x200000b0
     4f8:	20000d28 	.word	0x20000d28

000004fc <SysTick_Handler>:
{
     4fc:	b510      	push	{r4, lr}
  if (sysTickHook())
     4fe:	f000 f866 	bl	5ce <sysTickHook>
     502:	2800      	cmp	r0, #0
     504:	d101      	bne.n	50a <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     506:	f000 f857 	bl	5b8 <SysTick_DefaultHandler>
}
     50a:	bd10      	pop	{r4, pc}

0000050c <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     50c:	4b01      	ldr	r3, [pc, #4]	; (514 <USB_SetHandler+0x8>)
     50e:	6018      	str	r0, [r3, #0]
}
     510:	4770      	bx	lr
     512:	46c0      	nop			; (mov r8, r8)
     514:	20000218 	.word	0x20000218

00000518 <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     518:	4b01      	ldr	r3, [pc, #4]	; (520 <millis+0x8>)
     51a:	6818      	ldr	r0, [r3, #0]
}
     51c:	4770      	bx	lr
     51e:	46c0      	nop			; (mov r8, r8)
     520:	2000021c 	.word	0x2000021c

00000524 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     526:	4813      	ldr	r0, [pc, #76]	; (574 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     528:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     52a:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     52c:	4912      	ldr	r1, [pc, #72]	; (578 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     52e:	4c13      	ldr	r4, [pc, #76]	; (57c <micros+0x58>)
  ticks2  = SysTick->VAL;
     530:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     532:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     534:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     536:	0e9b      	lsrs	r3, r3, #26
     538:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     53a:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     53c:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     53e:	6862      	ldr	r2, [r4, #4]
     540:	9f01      	ldr	r7, [sp, #4]
     542:	0e92      	lsrs	r2, r2, #26
     544:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     546:	4667      	mov	r7, ip
     548:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     54a:	4293      	cmp	r3, r2
     54c:	d10e      	bne.n	56c <micros+0x48>
     54e:	42bd      	cmp	r5, r7
     550:	d10c      	bne.n	56c <micros+0x48>
     552:	4286      	cmp	r6, r0
     554:	d30a      	bcc.n	56c <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     556:	195b      	adds	r3, r3, r5
     558:	25fa      	movs	r5, #250	; 0xfa
     55a:	6848      	ldr	r0, [r1, #4]
     55c:	00ad      	lsls	r5, r5, #2
     55e:	1b86      	subs	r6, r0, r6
     560:	4807      	ldr	r0, [pc, #28]	; (580 <micros+0x5c>)
     562:	436b      	muls	r3, r5
     564:	4370      	muls	r0, r6
     566:	0d00      	lsrs	r0, r0, #20
     568:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     56a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     56c:	003d      	movs	r5, r7
     56e:	0013      	movs	r3, r2
     570:	0006      	movs	r6, r0
     572:	e7e3      	b.n	53c <micros+0x18>
     574:	2000021c 	.word	0x2000021c
     578:	e000e010 	.word	0xe000e010
     57c:	e000ed00 	.word	0xe000ed00
     580:	00005555 	.word	0x00005555

00000584 <delay>:

void delay( unsigned long ms )
{
     584:	b570      	push	{r4, r5, r6, lr}
     586:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     588:	d010      	beq.n	5ac <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     58a:	f7ff ffcb 	bl	524 <micros>
     58e:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     590:	f000 f81c 	bl	5cc <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     594:	f7ff ffc6 	bl	524 <micros>
     598:	4b05      	ldr	r3, [pc, #20]	; (5b0 <delay+0x2c>)
     59a:	1b40      	subs	r0, r0, r5
     59c:	4298      	cmp	r0, r3
     59e:	d9f7      	bls.n	590 <delay+0xc>
    {
      ms--;
      start += 1000;
     5a0:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     5a2:	3c01      	subs	r4, #1
      start += 1000;
     5a4:	009b      	lsls	r3, r3, #2
     5a6:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     5a8:	2c00      	cmp	r4, #0
     5aa:	d1f3      	bne.n	594 <delay+0x10>
    }
  }
}
     5ac:	bd70      	pop	{r4, r5, r6, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	000003e7 	.word	0x000003e7

000005b4 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     5b4:	4770      	bx	lr
	...

000005b8 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     5b8:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     5ba:	4a03      	ldr	r2, [pc, #12]	; (5c8 <SysTick_DefaultHandler+0x10>)
     5bc:	6813      	ldr	r3, [r2, #0]
     5be:	3301      	adds	r3, #1
     5c0:	6013      	str	r3, [r2, #0]
  tickReset();
     5c2:	f000 f98b 	bl	8dc <tickReset>
}
     5c6:	bd10      	pop	{r4, pc}
     5c8:	2000021c 	.word	0x2000021c

000005cc <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     5cc:	4770      	bx	lr

000005ce <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     5ce:	2000      	movs	r0, #0
     5d0:	4770      	bx	lr
	...

000005d4 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     5d4:	b510      	push	{r4, lr}
  init();
     5d6:	f001 fcc1 	bl	1f5c <init>

  __libc_init_array();
     5da:	f005 fab9 	bl	5b50 <__libc_init_array>

  initVariant();
     5de:	f002 fde9 	bl	31b4 <_Z11initVariantv>

  delay(1);
     5e2:	2001      	movs	r0, #1
     5e4:	f7ff ffce 	bl	584 <delay>
#if defined(USBCON)
  USBDevice.init();
     5e8:	4c08      	ldr	r4, [pc, #32]	; (60c <main+0x38>)
     5ea:	0020      	movs	r0, r4
     5ec:	f000 ff64 	bl	14b8 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     5f0:	0020      	movs	r0, r4
     5f2:	f000 fffb 	bl	15ec <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     5f6:	f7ff fee9 	bl	3cc <setup>

  for (;;)
  {
    loop();
     5fa:	f7ff fd9b 	bl	134 <loop>
    if (serialEventRun) serialEventRun();
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <main+0x3c>)
     600:	2b00      	cmp	r3, #0
     602:	d0fa      	beq.n	5fa <main+0x26>
     604:	e000      	b.n	608 <main+0x34>
     606:	bf00      	nop
     608:	e7f7      	b.n	5fa <main+0x26>
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	20000288 	.word	0x20000288
     610:	00000000 	.word	0x00000000

00000614 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     616:	0006      	movs	r6, r0
     618:	000d      	movs	r5, r1
     61a:	000c      	movs	r4, r1
     61c:	188b      	adds	r3, r1, r2
     61e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     620:	9b01      	ldr	r3, [sp, #4]
     622:	1b67      	subs	r7, r4, r5
     624:	429c      	cmp	r4, r3
     626:	d007      	beq.n	638 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     628:	6833      	ldr	r3, [r6, #0]
     62a:	7821      	ldrb	r1, [r4, #0]
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	0030      	movs	r0, r6
     630:	4798      	blx	r3
     632:	3401      	adds	r4, #1
     634:	2800      	cmp	r0, #0
     636:	d1f3      	bne.n	620 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     638:	0038      	movs	r0, r7
     63a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000063c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	0005      	movs	r5, r0
     640:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     642:	1e08      	subs	r0, r1, #0
     644:	d007      	beq.n	656 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     646:	f005 fb99 	bl	5d7c <strlen>
     64a:	682b      	ldr	r3, [r5, #0]
     64c:	0002      	movs	r2, r0
     64e:	685b      	ldr	r3, [r3, #4]
     650:	0021      	movs	r1, r4
     652:	0028      	movs	r0, r5
     654:	4798      	blx	r3
    }
     656:	bd70      	pop	{r4, r5, r6, pc}

00000658 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
     658:	b510      	push	{r4, lr}
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     65a:	f7ff ffef 	bl	63c <_ZN5Print5writeEPKc>
}
     65e:	bd10      	pop	{r4, pc}

00000660 <_ZN5Print5printERK6String>:
{
     660:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     662:	6803      	ldr	r3, [r0, #0]
     664:	688a      	ldr	r2, [r1, #8]
     666:	685b      	ldr	r3, [r3, #4]
     668:	6809      	ldr	r1, [r1, #0]
     66a:	4798      	blx	r3
}
     66c:	bd10      	pop	{r4, pc}

0000066e <_ZN5Print5printEPKc>:
{
     66e:	b510      	push	{r4, lr}
  return write(str);
     670:	f7ff ffe4 	bl	63c <_ZN5Print5writeEPKc>
}
     674:	bd10      	pop	{r4, pc}

00000676 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     676:	b510      	push	{r4, lr}
  return write(c);
     678:	6803      	ldr	r3, [r0, #0]
     67a:	681b      	ldr	r3, [r3, #0]
     67c:	4798      	blx	r3
}
     67e:	bd10      	pop	{r4, pc}

00000680 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     680:	b510      	push	{r4, lr}
  return write("\r\n");
     682:	4902      	ldr	r1, [pc, #8]	; (68c <_ZN5Print7printlnEv+0xc>)
     684:	f7ff ffda 	bl	63c <_ZN5Print5writeEPKc>
}
     688:	bd10      	pop	{r4, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00005eec 	.word	0x00005eec

00000690 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0004      	movs	r4, r0
  return write(str);
     694:	f7ff ffd2 	bl	63c <_ZN5Print5writeEPKc>
     698:	0005      	movs	r5, r0
  n += println();
     69a:	0020      	movs	r0, r4
     69c:	f7ff fff0 	bl	680 <_ZN5Print7printlnEv>
     6a0:	1940      	adds	r0, r0, r5
}
     6a2:	bd70      	pop	{r4, r5, r6, pc}

000006a4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6a6:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6a8:	2200      	movs	r2, #0
{
     6aa:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
     6ac:	ab02      	add	r3, sp, #8
     6ae:	3305      	adds	r3, #5
{
     6b0:	9001      	str	r0, [sp, #4]
     6b2:	000d      	movs	r5, r1
  *str = '\0';
     6b4:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6b6:	2e01      	cmp	r6, #1
     6b8:	dc00      	bgt.n	6bc <_ZN5Print11printNumberEmh+0x18>
     6ba:	260a      	movs	r6, #10
     6bc:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
     6be:	0028      	movs	r0, r5
     6c0:	0031      	movs	r1, r6
     6c2:	f003 fb1d 	bl	3d00 <__aeabi_uidivmod>
     6c6:	000f      	movs	r7, r1
     6c8:	b2cb      	uxtb	r3, r1
    n /= base;
     6ca:	0028      	movs	r0, r5
     6cc:	0031      	movs	r1, r6
    char c = n % base;
     6ce:	9300      	str	r3, [sp, #0]
    n /= base;
     6d0:	f003 fa90 	bl	3bf4 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6d4:	b2fb      	uxtb	r3, r7
     6d6:	3337      	adds	r3, #55	; 0x37
    n /= base;
     6d8:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6da:	3c01      	subs	r4, #1
     6dc:	b2db      	uxtb	r3, r3
     6de:	2f09      	cmp	r7, #9
     6e0:	d802      	bhi.n	6e8 <_ZN5Print11printNumberEmh+0x44>
     6e2:	9b00      	ldr	r3, [sp, #0]
     6e4:	3330      	adds	r3, #48	; 0x30
     6e6:	b2db      	uxtb	r3, r3
     6e8:	7023      	strb	r3, [r4, #0]
  } while(n);
     6ea:	2d00      	cmp	r5, #0
     6ec:	d1e7      	bne.n	6be <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
     6ee:	0021      	movs	r1, r4
     6f0:	9801      	ldr	r0, [sp, #4]
     6f2:	f7ff ffa3 	bl	63c <_ZN5Print5writeEPKc>
}
     6f6:	b00d      	add	sp, #52	; 0x34
     6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006fa <_ZN5Print5printEmi>:
{
     6fa:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     6fc:	2a00      	cmp	r2, #0
     6fe:	d104      	bne.n	70a <_ZN5Print5printEmi+0x10>
     700:	6803      	ldr	r3, [r0, #0]
     702:	b2c9      	uxtb	r1, r1
     704:	681b      	ldr	r3, [r3, #0]
     706:	4798      	blx	r3
}
     708:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
     70a:	b2d2      	uxtb	r2, r2
     70c:	f7ff ffca 	bl	6a4 <_ZN5Print11printNumberEmh>
     710:	e7fa      	b.n	708 <_ZN5Print5printEmi+0xe>

00000712 <_ZN5Print5printEhi>:
{
     712:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
     714:	f7ff fff1 	bl	6fa <_ZN5Print5printEmi>
}
     718:	bd10      	pop	{r4, pc}

0000071a <_ZN5Print7printlnEmi>:
{
     71a:	b570      	push	{r4, r5, r6, lr}
     71c:	0005      	movs	r5, r0
  size_t n = print(num, base);
     71e:	f7ff ffec 	bl	6fa <_ZN5Print5printEmi>
     722:	0004      	movs	r4, r0
  n += println();
     724:	0028      	movs	r0, r5
     726:	f7ff ffab 	bl	680 <_ZN5Print7printlnEv>
     72a:	1820      	adds	r0, r4, r0
}
     72c:	bd70      	pop	{r4, r5, r6, pc}
	...

00000730 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     730:	b5f0      	push	{r4, r5, r6, r7, lr}
     732:	001e      	movs	r6, r3
     734:	b085      	sub	sp, #20
     736:	ab0a      	add	r3, sp, #40	; 0x28
     738:	781b      	ldrb	r3, [r3, #0]
     73a:	0005      	movs	r5, r0
     73c:	9301      	str	r3, [sp, #4]
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
     73e:	0010      	movs	r0, r2
     740:	0033      	movs	r3, r6
     742:	0031      	movs	r1, r6
     744:	0017      	movs	r7, r2
     746:	f005 f8f9 	bl	593c <__aeabi_dcmpun>
     74a:	2800      	cmp	r0, #0
     74c:	d07b      	beq.n	846 <_ZN5Print10printFloatEdh+0x116>
  return write(str);
     74e:	494d      	ldr	r1, [pc, #308]	; (884 <_ZN5Print10printFloatEdh+0x154>)
     750:	e090      	b.n	874 <_ZN5Print10printFloatEdh+0x144>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     752:	22e0      	movs	r2, #224	; 0xe0
     754:	4b4c      	ldr	r3, [pc, #304]	; (888 <_ZN5Print10printFloatEdh+0x158>)
     756:	0612      	lsls	r2, r2, #24
     758:	0038      	movs	r0, r7
     75a:	0031      	movs	r1, r6
     75c:	f003 fb00 	bl	3d60 <__aeabi_dcmpgt>
     760:	2800      	cmp	r0, #0
     762:	d001      	beq.n	768 <_ZN5Print10printFloatEdh+0x38>
  return write(str);
     764:	4949      	ldr	r1, [pc, #292]	; (88c <_ZN5Print10printFloatEdh+0x15c>)
     766:	e085      	b.n	874 <_ZN5Print10printFloatEdh+0x144>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     768:	22e0      	movs	r2, #224	; 0xe0
     76a:	4b49      	ldr	r3, [pc, #292]	; (890 <_ZN5Print10printFloatEdh+0x160>)
     76c:	0612      	lsls	r2, r2, #24
     76e:	0038      	movs	r0, r7
     770:	0031      	movs	r1, r6
     772:	f003 fae1 	bl	3d38 <__aeabi_dcmplt>
     776:	2800      	cmp	r0, #0
     778:	d1f4      	bne.n	764 <_ZN5Print10printFloatEdh+0x34>

  // Handle negative numbers
  if (number < 0.0)
     77a:	2200      	movs	r2, #0
     77c:	2300      	movs	r3, #0
     77e:	0038      	movs	r0, r7
     780:	0031      	movs	r1, r6
     782:	f003 fad9 	bl	3d38 <__aeabi_dcmplt>
     786:	2800      	cmp	r0, #0
     788:	d014      	beq.n	7b4 <_ZN5Print10printFloatEdh+0x84>
  {
     n += print('-');
     78a:	212d      	movs	r1, #45	; 0x2d
     78c:	0028      	movs	r0, r5
     78e:	f7ff ff72 	bl	676 <_ZN5Print5printEc>
     number = -number;
     792:	2380      	movs	r3, #128	; 0x80
     794:	061b      	lsls	r3, r3, #24
     n += print('-');
     796:	9002      	str	r0, [sp, #8]
     number = -number;
     798:	18f6      	adds	r6, r6, r3
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     79a:	2400      	movs	r4, #0
  double rounding = 0.5;
     79c:	2000      	movs	r0, #0
     79e:	493d      	ldr	r1, [pc, #244]	; (894 <_ZN5Print10printFloatEdh+0x164>)
  for (uint8_t i=0; i<digits; ++i)
     7a0:	9b01      	ldr	r3, [sp, #4]
     7a2:	429c      	cmp	r4, r3
     7a4:	da08      	bge.n	7b8 <_ZN5Print10printFloatEdh+0x88>
    rounding /= 10.0;
     7a6:	2200      	movs	r2, #0
     7a8:	4b3b      	ldr	r3, [pc, #236]	; (898 <_ZN5Print10printFloatEdh+0x168>)
  for (uint8_t i=0; i<digits; ++i)
     7aa:	3401      	adds	r4, #1
    rounding /= 10.0;
     7ac:	f003 fefc 	bl	45a8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
     7b0:	b2e4      	uxtb	r4, r4
     7b2:	e7f5      	b.n	7a0 <_ZN5Print10printFloatEdh+0x70>
  size_t n = 0;
     7b4:	9002      	str	r0, [sp, #8]
     7b6:	e7f0      	b.n	79a <_ZN5Print10printFloatEdh+0x6a>

  number += rounding;
     7b8:	0033      	movs	r3, r6
     7ba:	003a      	movs	r2, r7
     7bc:	f003 fbe4 	bl	3f88 <__aeabi_dadd>
     7c0:	000f      	movs	r7, r1
     7c2:	0006      	movs	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     7c4:	f003 fb1a 	bl	3dfc <__aeabi_d2uiz>
  else return printNumber(n, base);
     7c8:	220a      	movs	r2, #10
  unsigned long int_part = (unsigned long)number;
     7ca:	9003      	str	r0, [sp, #12]
  else return printNumber(n, base);
     7cc:	0001      	movs	r1, r0
     7ce:	0028      	movs	r0, r5
     7d0:	f7ff ff68 	bl	6a4 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
     7d4:	9b02      	ldr	r3, [sp, #8]
     7d6:	18c4      	adds	r4, r0, r3

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     7d8:	9b01      	ldr	r3, [sp, #4]
     7da:	2b00      	cmp	r3, #0
     7dc:	d04e      	beq.n	87c <_ZN5Print10printFloatEdh+0x14c>
  double remainder = number - (double)int_part;
     7de:	9803      	ldr	r0, [sp, #12]
     7e0:	f005 f900 	bl	59e4 <__aeabi_ui2d>
     7e4:	0002      	movs	r2, r0
     7e6:	000b      	movs	r3, r1
     7e8:	0030      	movs	r0, r6
     7ea:	0039      	movs	r1, r7
     7ec:	f004 fd90 	bl	5310 <__aeabi_dsub>
     7f0:	0006      	movs	r6, r0
     7f2:	000f      	movs	r7, r1
    n += print('.');
     7f4:	0028      	movs	r0, r5
     7f6:	212e      	movs	r1, #46	; 0x2e
     7f8:	f7ff ff3d 	bl	676 <_ZN5Print5printEc>
     7fc:	1824      	adds	r4, r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     7fe:	9b01      	ldr	r3, [sp, #4]
     800:	2b00      	cmp	r3, #0
     802:	d03b      	beq.n	87c <_ZN5Print10printFloatEdh+0x14c>
  {
    remainder *= 10.0;
     804:	4b24      	ldr	r3, [pc, #144]	; (898 <_ZN5Print10printFloatEdh+0x168>)
     806:	2200      	movs	r2, #0
     808:	0030      	movs	r0, r6
     80a:	0039      	movs	r1, r7
     80c:	f004 fb00 	bl	4e10 <__aeabi_dmul>
     810:	000f      	movs	r7, r1
     812:	0006      	movs	r6, r0
    unsigned int toPrint = (unsigned int)(remainder);
     814:	f003 faf2 	bl	3dfc <__aeabi_d2uiz>
  else return printNumber(n, base);
     818:	220a      	movs	r2, #10
     81a:	0001      	movs	r1, r0
    unsigned int toPrint = (unsigned int)(remainder);
     81c:	9002      	str	r0, [sp, #8]
  else return printNumber(n, base);
     81e:	0028      	movs	r0, r5
     820:	f7ff ff40 	bl	6a4 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
     824:	1824      	adds	r4, r4, r0
    remainder -= toPrint;
     826:	9802      	ldr	r0, [sp, #8]
     828:	f005 f8dc 	bl	59e4 <__aeabi_ui2d>
     82c:	000b      	movs	r3, r1
     82e:	0002      	movs	r2, r0
     830:	0039      	movs	r1, r7
     832:	0030      	movs	r0, r6
     834:	f004 fd6c 	bl	5310 <__aeabi_dsub>
     838:	9b01      	ldr	r3, [sp, #4]
     83a:	0006      	movs	r6, r0
     83c:	3b01      	subs	r3, #1
     83e:	b2db      	uxtb	r3, r3
     840:	000f      	movs	r7, r1
     842:	9301      	str	r3, [sp, #4]
     844:	e7db      	b.n	7fe <_ZN5Print10printFloatEdh+0xce>
  if (isinf(number)) return print("inf");
     846:	2201      	movs	r2, #1
  { return __builtin_isinf(__x); }
     848:	0074      	lsls	r4, r6, #1
     84a:	0864      	lsrs	r4, r4, #1
     84c:	4252      	negs	r2, r2
     84e:	4b13      	ldr	r3, [pc, #76]	; (89c <_ZN5Print10printFloatEdh+0x16c>)
     850:	0038      	movs	r0, r7
     852:	0021      	movs	r1, r4
     854:	f005 f872 	bl	593c <__aeabi_dcmpun>
     858:	2800      	cmp	r0, #0
     85a:	d000      	beq.n	85e <_ZN5Print10printFloatEdh+0x12e>
     85c:	e779      	b.n	752 <_ZN5Print10printFloatEdh+0x22>
     85e:	2201      	movs	r2, #1
     860:	4b0e      	ldr	r3, [pc, #56]	; (89c <_ZN5Print10printFloatEdh+0x16c>)
     862:	4252      	negs	r2, r2
     864:	0038      	movs	r0, r7
     866:	0021      	movs	r1, r4
     868:	f003 fa70 	bl	3d4c <__aeabi_dcmple>
     86c:	2800      	cmp	r0, #0
     86e:	d000      	beq.n	872 <_ZN5Print10printFloatEdh+0x142>
     870:	e76f      	b.n	752 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
     872:	490b      	ldr	r1, [pc, #44]	; (8a0 <_ZN5Print10printFloatEdh+0x170>)
     874:	0028      	movs	r0, r5
     876:	f7ff fee1 	bl	63c <_ZN5Print5writeEPKc>
     87a:	0004      	movs	r4, r0
  }

  return n;
}
     87c:	0020      	movs	r0, r4
     87e:	b005      	add	sp, #20
     880:	bdf0      	pop	{r4, r5, r6, r7, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	00005ee8 	.word	0x00005ee8
     888:	41efffff 	.word	0x41efffff
     88c:	00005ee4 	.word	0x00005ee4
     890:	c1efffff 	.word	0xc1efffff
     894:	3fe00000 	.word	0x3fe00000
     898:	40240000 	.word	0x40240000
     89c:	7fefffff 	.word	0x7fefffff
     8a0:	00005ee0 	.word	0x00005ee0

000008a4 <_ZN5Print5printEdi>:
{
     8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
     8a6:	001d      	movs	r5, r3
  return printFloat(n, digits);
     8a8:	466b      	mov	r3, sp
     8aa:	7e1b      	ldrb	r3, [r3, #24]
     8ac:	9300      	str	r3, [sp, #0]
     8ae:	002b      	movs	r3, r5
     8b0:	f7ff ff3e 	bl	730 <_ZN5Print10printFloatEdh>
}
     8b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000008b8 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     8b8:	b510      	push	{r4, lr}
     8ba:	0004      	movs	r4, r0
	resetExternalChip();
     8bc:	f7ff fe7a 	bl	5b4 <resetExternalChip>
	ticks = _ticks;
     8c0:	4b01      	ldr	r3, [pc, #4]	; (8c8 <initiateReset+0x10>)
     8c2:	601c      	str	r4, [r3, #0]
}
     8c4:	bd10      	pop	{r4, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	20000010 	.word	0x20000010

000008cc <cancelReset>:

void cancelReset() {
	ticks = -1;
     8cc:	2201      	movs	r2, #1
     8ce:	4b02      	ldr	r3, [pc, #8]	; (8d8 <cancelReset+0xc>)
     8d0:	4252      	negs	r2, r2
     8d2:	601a      	str	r2, [r3, #0]
}
     8d4:	4770      	bx	lr
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	20000010 	.word	0x20000010

000008dc <tickReset>:

void tickReset() {
	if (ticks == -1)
     8dc:	4a16      	ldr	r2, [pc, #88]	; (938 <tickReset+0x5c>)
void tickReset() {
     8de:	b510      	push	{r4, lr}
	if (ticks == -1)
     8e0:	6813      	ldr	r3, [r2, #0]
     8e2:	1c59      	adds	r1, r3, #1
     8e4:	d027      	beq.n	936 <tickReset+0x5a>
		return;
	ticks--;
     8e6:	3b01      	subs	r3, #1
     8e8:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     8ea:	2b00      	cmp	r3, #0
     8ec:	d123      	bne.n	936 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     8ee:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     8f0:	4b12      	ldr	r3, [pc, #72]	; (93c <tickReset+0x60>)
     8f2:	4a13      	ldr	r2, [pc, #76]	; (940 <tickReset+0x64>)
     8f4:	3304      	adds	r3, #4
     8f6:	4293      	cmp	r3, r2
     8f8:	d808      	bhi.n	90c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     8fa:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     8fe:	4a11      	ldr	r2, [pc, #68]	; (944 <tickReset+0x68>)
     900:	4b11      	ldr	r3, [pc, #68]	; (948 <tickReset+0x6c>)
     902:	60da      	str	r2, [r3, #12]
     904:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     908:	46c0      	nop			; (mov r8, r8)
     90a:	e7fd      	b.n	908 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     90c:	4a0f      	ldr	r2, [pc, #60]	; (94c <tickReset+0x70>)
	while (!nvmReady())
     90e:	2101      	movs	r1, #1
     910:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     912:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     914:	420c      	tst	r4, r1
     916:	d0fc      	beq.n	912 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     918:	2120      	movs	r1, #32
     91a:	8b14      	ldrh	r4, [r2, #24]
     91c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     91e:	089b      	lsrs	r3, r3, #2
     920:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     922:	4321      	orrs	r1, r4
     924:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     926:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     928:	4b09      	ldr	r3, [pc, #36]	; (950 <tickReset+0x74>)
     92a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     92c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     92e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     930:	421a      	tst	r2, r3
     932:	d0fc      	beq.n	92e <tickReset+0x52>
     934:	e7e1      	b.n	8fa <tickReset+0x1e>
		banzai();
}
     936:	bd10      	pop	{r4, pc}
     938:	20000010 	.word	0x20000010
     93c:	00000000 	.word	0x00000000
     940:	00000203 	.word	0x00000203
     944:	05fa0004 	.word	0x05fa0004
     948:	e000ed00 	.word	0xe000ed00
     94c:	41004000 	.word	0x41004000
     950:	ffffa502 	.word	0xffffa502

00000954 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     954:	221e      	movs	r2, #30
{
     956:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     958:	4846      	ldr	r0, [pc, #280]	; (a74 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     95a:	4947      	ldr	r1, [pc, #284]	; (a78 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     95c:	6843      	ldr	r3, [r0, #4]
     95e:	4393      	bics	r3, r2
     960:	3a1c      	subs	r2, #28
     962:	4313      	orrs	r3, r2
     964:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     966:	2308      	movs	r3, #8
     968:	698c      	ldr	r4, [r1, #24]
     96a:	4323      	orrs	r3, r4
     96c:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     96e:	4c43      	ldr	r4, [pc, #268]	; (a7c <SystemInit+0x128>)
     970:	4b43      	ldr	r3, [pc, #268]	; (a80 <SystemInit+0x12c>)
     972:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     974:	8a9c      	ldrh	r4, [r3, #20]
     976:	4314      	orrs	r4, r2
     978:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     97a:	68dc      	ldr	r4, [r3, #12]
     97c:	4214      	tst	r4, r2
     97e:	d0fc      	beq.n	97a <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     980:	2401      	movs	r4, #1
     982:	4a40      	ldr	r2, [pc, #256]	; (a84 <SystemInit+0x130>)
     984:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     986:	7815      	ldrb	r5, [r2, #0]
     988:	4225      	tst	r5, r4
     98a:	d003      	beq.n	994 <SystemInit+0x40>
     98c:	7855      	ldrb	r5, [r2, #1]
     98e:	b26d      	sxtb	r5, r5
     990:	2d00      	cmp	r5, #0
     992:	dbf8      	blt.n	986 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     994:	2401      	movs	r4, #1
     996:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     998:	7854      	ldrb	r4, [r2, #1]
     99a:	b264      	sxtb	r4, r4
     99c:	2c00      	cmp	r4, #0
     99e:	dbfb      	blt.n	998 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     9a0:	4c39      	ldr	r4, [pc, #228]	; (a88 <SystemInit+0x134>)
     9a2:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     9a4:	7854      	ldrb	r4, [r2, #1]
     9a6:	b264      	sxtb	r4, r4
     9a8:	2c00      	cmp	r4, #0
     9aa:	dbfb      	blt.n	9a4 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     9ac:	2482      	movs	r4, #130	; 0x82
     9ae:	01e4      	lsls	r4, r4, #7
     9b0:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     9b2:	7854      	ldrb	r4, [r2, #1]
     9b4:	b264      	sxtb	r4, r4
     9b6:	2c00      	cmp	r4, #0
     9b8:	dbfb      	blt.n	9b2 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     9ba:	2402      	movs	r4, #2
     9bc:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     9be:	340e      	adds	r4, #14
     9c0:	68dd      	ldr	r5, [r3, #12]
     9c2:	4225      	tst	r5, r4
     9c4:	d0fc      	beq.n	9c0 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     9c6:	4c31      	ldr	r4, [pc, #196]	; (a8c <SystemInit+0x138>)
     9c8:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     9ca:	2410      	movs	r4, #16
     9cc:	68dd      	ldr	r5, [r3, #12]
     9ce:	4225      	tst	r5, r4
     9d0:	d0fc      	beq.n	9cc <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     9d2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     9d4:	4c2e      	ldr	r4, [pc, #184]	; (a90 <SystemInit+0x13c>)
     9d6:	432c      	orrs	r4, r5
     9d8:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     9da:	2410      	movs	r4, #16
     9dc:	68dd      	ldr	r5, [r3, #12]
     9de:	4225      	tst	r5, r4
     9e0:	d0fc      	beq.n	9dc <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     9e2:	2402      	movs	r4, #2
     9e4:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     9e6:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     9e8:	432c      	orrs	r4, r5
     9ea:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     9ec:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     9ee:	68dd      	ldr	r5, [r3, #12]
     9f0:	4235      	tst	r5, r6
     9f2:	d0fc      	beq.n	9ee <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     9f4:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     9f6:	4225      	tst	r5, r4
     9f8:	d0f9      	beq.n	9ee <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     9fa:	2410      	movs	r4, #16
     9fc:	68dd      	ldr	r5, [r3, #12]
     9fe:	4225      	tst	r5, r4
     a00:	d0fc      	beq.n	9fc <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     a02:	2400      	movs	r4, #0
     a04:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     a06:	7854      	ldrb	r4, [r2, #1]
     a08:	b264      	sxtb	r4, r4
     a0a:	2c00      	cmp	r4, #0
     a0c:	dbfb      	blt.n	a06 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     a0e:	4c21      	ldr	r4, [pc, #132]	; (a94 <SystemInit+0x140>)
     a10:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     a12:	7854      	ldrb	r4, [r2, #1]
     a14:	b264      	sxtb	r4, r4
     a16:	2c00      	cmp	r4, #0
     a18:	dbfb      	blt.n	a12 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     a1a:	6a1c      	ldr	r4, [r3, #32]
     a1c:	4d1e      	ldr	r5, [pc, #120]	; (a98 <SystemInit+0x144>)
     a1e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     a20:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     a22:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     a24:	6a1c      	ldr	r4, [r3, #32]
     a26:	43ac      	bics	r4, r5
     a28:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     a2a:	2303      	movs	r3, #3
     a2c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     a2e:	4b1b      	ldr	r3, [pc, #108]	; (a9c <SystemInit+0x148>)
     a30:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     a32:	7853      	ldrb	r3, [r2, #1]
     a34:	b25b      	sxtb	r3, r3
     a36:	2b00      	cmp	r3, #0
     a38:	dbfb      	blt.n	a32 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     a3a:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     a3c:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     a3e:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     a40:	4a17      	ldr	r2, [pc, #92]	; (aa0 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     a42:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     a44:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     a46:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     a48:	4b16      	ldr	r3, [pc, #88]	; (aa4 <SystemInit+0x150>)
     a4a:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     a4c:	4b16      	ldr	r3, [pc, #88]	; (aa8 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     a4e:	4a17      	ldr	r2, [pc, #92]	; (aac <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     a50:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     a52:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     a54:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     a56:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     a58:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     a5a:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     a5c:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     a5e:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     a60:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     a62:	4313      	orrs	r3, r2
     a64:	4a12      	ldr	r2, [pc, #72]	; (ab0 <SystemInit+0x15c>)
     a66:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     a68:	2380      	movs	r3, #128	; 0x80
     a6a:	6842      	ldr	r2, [r0, #4]
     a6c:	4313      	orrs	r3, r2
     a6e:	6043      	str	r3, [r0, #4]
}
     a70:	bd70      	pop	{r4, r5, r6, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	41004000 	.word	0x41004000
     a78:	40000400 	.word	0x40000400
     a7c:	0000060c 	.word	0x0000060c
     a80:	40000800 	.word	0x40000800
     a84:	40000c00 	.word	0x40000c00
     a88:	00010501 	.word	0x00010501
     a8c:	7dff05b9 	.word	0x7dff05b9
     a90:	00000a04 	.word	0x00000a04
     a94:	00030700 	.word	0x00030700
     a98:	fffffcff 	.word	0xfffffcff
     a9c:	00010603 	.word	0x00010603
     aa0:	02dc6c00 	.word	0x02dc6c00
     aa4:	20000024 	.word	0x20000024
     aa8:	00806024 	.word	0x00806024
     aac:	00806020 	.word	0x00806020
     ab0:	42004000 	.word	0x42004000

00000ab4 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
     ab4:	2000      	movs	r0, #0
     ab6:	4770      	bx	lr

00000ab8 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
     ab8:	b408      	push	{r3}
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
     abc:	469c      	mov	ip, r3
     abe:	3810      	subs	r0, #16
     ac0:	bc08      	pop	{r3}
     ac2:	4760      	bx	ip
     ac4:	00000ab5 	.word	0x00000ab5

00000ac8 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
     ac8:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     aca:	250f      	movs	r5, #15
     acc:	1dcb      	adds	r3, r1, #7
     ace:	3901      	subs	r1, #1
     ad0:	0002      	movs	r2, r0
     ad2:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     ad4:	0014      	movs	r4, r2
		val = (val >> 4);
     ad6:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     ad8:	3430      	adds	r4, #48	; 0x30
     ada:	2a09      	cmp	r2, #9
     adc:	dd01      	ble.n	ae2 <_ZL5utox8mPc+0x1a>
     ade:	3237      	adds	r2, #55	; 0x37
     ae0:	0014      	movs	r4, r2
     ae2:	701c      	strb	r4, [r3, #0]
     ae4:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     ae6:	428b      	cmp	r3, r1
     ae8:	d1f2      	bne.n	ad0 <_ZL5utox8mPc+0x8>
	}
}
     aea:	bd30      	pop	{r4, r5, pc}

00000aec <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
     aec:	b510      	push	{r4, lr}
     aee:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
     af0:	4b0b      	ldr	r3, [pc, #44]	; (b20 <_ZN7Serial_12getShortNameEPc+0x34>)
     af2:	6818      	ldr	r0, [r3, #0]
     af4:	f7ff ffe8 	bl	ac8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
     af8:	0021      	movs	r1, r4
     afa:	4b0a      	ldr	r3, [pc, #40]	; (b24 <_ZN7Serial_12getShortNameEPc+0x38>)
     afc:	3108      	adds	r1, #8
     afe:	6818      	ldr	r0, [r3, #0]
     b00:	f7ff ffe2 	bl	ac8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
     b04:	0021      	movs	r1, r4
     b06:	4b08      	ldr	r3, [pc, #32]	; (b28 <_ZN7Serial_12getShortNameEPc+0x3c>)
     b08:	3110      	adds	r1, #16
     b0a:	6818      	ldr	r0, [r3, #0]
     b0c:	f7ff ffdc 	bl	ac8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
     b10:	0021      	movs	r1, r4
     b12:	4b06      	ldr	r3, [pc, #24]	; (b2c <_ZN7Serial_12getShortNameEPc+0x40>)
     b14:	3118      	adds	r1, #24
     b16:	6818      	ldr	r0, [r3, #0]
     b18:	f7ff ffd6 	bl	ac8 <_ZL5utox8mPc>
	return 32;
}
     b1c:	2020      	movs	r0, #32
     b1e:	bd10      	pop	{r4, pc}
     b20:	0080a00c 	.word	0x0080a00c
     b24:	0080a040 	.word	0x0080a040
     b28:	0080a044 	.word	0x0080a044
     b2c:	0080a048 	.word	0x0080a048

00000b30 <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
     b30:	b408      	push	{r3}
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
     b34:	469c      	mov	ip, r3
     b36:	3810      	subs	r0, #16
     b38:	bc08      	pop	{r3}
     b3a:	4760      	bx	ip
     b3c:	00000aed 	.word	0x00000aed

00000b40 <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
     b40:	4770      	bx	lr
	...

00000b44 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
     b44:	b408      	push	{r3}
     b46:	4b02      	ldr	r3, [pc, #8]	; (b50 <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
     b48:	469c      	mov	ip, r3
     b4a:	3810      	subs	r0, #16
     b4c:	bc08      	pop	{r3}
     b4e:	4760      	bx	ip
     b50:	00000b41 	.word	0x00000b41

00000b54 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     b54:	203f      	movs	r0, #63	; 0x3f
     b56:	4770      	bx	lr

00000b58 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     b58:	b513      	push	{r0, r1, r4, lr}
     b5a:	466b      	mov	r3, sp
	return write(&c, 1);
     b5c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     b5e:	71d9      	strb	r1, [r3, #7]
     b60:	3307      	adds	r3, #7
	return write(&c, 1);
     b62:	6854      	ldr	r4, [r2, #4]
     b64:	0019      	movs	r1, r3
     b66:	2201      	movs	r2, #1
     b68:	47a0      	blx	r4
}
     b6a:	bd16      	pop	{r1, r2, r4, pc}

00000b6c <_ZN7Serial_12getInterfaceEPh>:
{
     b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
     b6e:	780b      	ldrb	r3, [r1, #0]
{
     b70:	b095      	sub	sp, #84	; 0x54
	};
     b72:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
     b74:	3302      	adds	r3, #2
{
     b76:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
     b78:	700b      	strb	r3, [r1, #0]
	};
     b7a:	2242      	movs	r2, #66	; 0x42
     b7c:	2100      	movs	r1, #0
     b7e:	0020      	movs	r0, r4
     b80:	f005 f827 	bl	5bd2 <memset>
     b84:	2209      	movs	r2, #9
     b86:	2504      	movs	r5, #4
     b88:	7222      	strb	r2, [r4, #8]
     b8a:	2204      	movs	r2, #4
     b8c:	75a5      	strb	r5, [r4, #22]
     b8e:	7262      	strb	r2, [r4, #9]
     b90:	2506      	movs	r5, #6
     b92:	2205      	movs	r2, #5
     b94:	2024      	movs	r0, #36	; 0x24
     b96:	ae02      	add	r6, sp, #8
     b98:	7665      	strb	r5, [r4, #25]
     b9a:	7725      	strb	r5, [r4, #28]
     b9c:	1995      	adds	r5, r2, r6
     b9e:	74a0      	strb	r0, [r4, #18]
     ba0:	75e0      	strb	r0, [r4, #23]
     ba2:	76e0      	strb	r0, [r4, #27]
     ba4:	77e8      	strb	r0, [r5, #31]
     ba6:	0030      	movs	r0, r6
     ba8:	2101      	movs	r1, #1
     baa:	3006      	adds	r0, #6
     bac:	77c1      	strb	r1, [r0, #31]
     bae:	0030      	movs	r0, r6
     bb0:	3007      	adds	r0, #7
     bb2:	77c1      	strb	r1, [r0, #31]
     bb4:	a804      	add	r0, sp, #16
     bb6:	77c1      	strb	r1, [r0, #31]
     bb8:	2009      	movs	r0, #9
     bba:	7321      	strb	r1, [r4, #12]
     bbc:	7561      	strb	r1, [r4, #21]
     bbe:	1980      	adds	r0, r0, r6
     bc0:	3106      	adds	r1, #6
     bc2:	77c1      	strb	r1, [r0, #31]
     bc4:	200a      	movs	r0, #10
     bc6:	1980      	adds	r0, r0, r6
     bc8:	77c2      	strb	r2, [r0, #31]
     bca:	2003      	movs	r0, #3
     bcc:	4684      	mov	ip, r0
     bce:	4665      	mov	r5, ip
     bd0:	a805      	add	r0, sp, #20
     bd2:	77c5      	strb	r5, [r0, #31]
     bd4:	202e      	movs	r0, #46	; 0x2e
     bd6:	2710      	movs	r7, #16
     bd8:	1980      	adds	r0, r0, r6
     bda:	7007      	strb	r7, [r0, #0]
     bdc:	202f      	movs	r0, #47	; 0x2f
     bde:	2509      	movs	r5, #9
     be0:	2308      	movs	r3, #8
     be2:	1980      	adds	r0, r0, r6
     be4:	7005      	strb	r5, [r0, #0]
     be6:	2504      	movs	r5, #4
     be8:	7023      	strb	r3, [r4, #0]
     bea:	3303      	adds	r3, #3
     bec:	7063      	strb	r3, [r4, #1]
     bee:	a80e      	add	r0, sp, #56	; 0x38
     bf0:	3b09      	subs	r3, #9
     bf2:	70e3      	strb	r3, [r4, #3]
     bf4:	7123      	strb	r3, [r4, #4]
     bf6:	7163      	strb	r3, [r4, #5]
     bf8:	7363      	strb	r3, [r4, #13]
     bfa:	73a3      	strb	r3, [r4, #14]
     bfc:	7462      	strb	r2, [r4, #17]
     bfe:	7623      	strb	r3, [r4, #24]
     c00:	76a2      	strb	r2, [r4, #26]
     c02:	77e2      	strb	r2, [r4, #31]
     c04:	7527      	strb	r7, [r4, #20]
     c06:	8527      	strh	r7, [r4, #40]	; 0x28
     c08:	7005      	strb	r5, [r0, #0]
     c0a:	2033      	movs	r0, #51	; 0x33
     c0c:	0035      	movs	r5, r6
     c0e:	1980      	adds	r0, r0, r6
     c10:	260a      	movs	r6, #10
     c12:	7003      	strb	r3, [r0, #0]
     c14:	a80f      	add	r0, sp, #60	; 0x3c
     c16:	7006      	strb	r6, [r0, #0]
     c18:	a810      	add	r0, sp, #64	; 0x40
     c1a:	7001      	strb	r1, [r0, #0]
     c1c:	2039      	movs	r0, #57	; 0x39
     c1e:	1940      	adds	r0, r0, r5
     c20:	7002      	strb	r2, [r0, #0]
     c22:	203b      	movs	r0, #59	; 0x3b
     c24:	3635      	adds	r6, #53	; 0x35
     c26:	1976      	adds	r6, r6, r5
     c28:	7031      	strb	r1, [r6, #0]
     c2a:	a912      	add	r1, sp, #72	; 0x48
     c2c:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     c2e:	2180      	movs	r1, #128	; 0x80
	};
     c30:	323d      	adds	r2, #61	; 0x3d
     c32:	1940      	adds	r0, r0, r5
     c34:	1952      	adds	r2, r2, r5
     c36:	7003      	strb	r3, [r0, #0]
     c38:	7013      	strb	r3, [r2, #0]
     c3a:	2040      	movs	r0, #64	; 0x40
     c3c:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     c3e:	4249      	negs	r1, r1
     c40:	000e      	movs	r6, r1
	};
     c42:	3341      	adds	r3, #65	; 0x41
     c44:	195b      	adds	r3, r3, r5
     c46:	7018      	strb	r0, [r3, #0]
     c48:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     c4a:	9b01      	ldr	r3, [sp, #4]
	};
     c4c:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     c4e:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     c50:	9a01      	ldr	r2, [sp, #4]
	};
     c52:	70a3      	strb	r3, [r4, #2]
     c54:	72a3      	strb	r3, [r4, #10]
     c56:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
     c58:	3301      	adds	r3, #1
     c5a:	b2db      	uxtb	r3, r3
	};
     c5c:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     c5e:	7d52      	ldrb	r2, [r2, #21]
	};
     c60:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     c62:	4316      	orrs	r6, r2
	};
     c64:	1940      	adds	r0, r0, r5
     c66:	77c6      	strb	r6, [r0, #31]
     c68:	2031      	movs	r0, #49	; 0x31
     c6a:	1940      	adds	r0, r0, r5
     c6c:	7003      	strb	r3, [r0, #0]
     c6e:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
     c70:	1c50      	adds	r0, r2, #1
	};
     c72:	195b      	adds	r3, r3, r5
     c74:	7018      	strb	r0, [r3, #0]
     c76:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
     c78:	3202      	adds	r2, #2
     c7a:	430a      	orrs	r2, r1
	};
     c7c:	195b      	adds	r3, r3, r5
     c7e:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
     c80:	0021      	movs	r1, r4
     c82:	2242      	movs	r2, #66	; 0x42
     c84:	4802      	ldr	r0, [pc, #8]	; (c90 <_ZN7Serial_12getInterfaceEPh+0x124>)
     c86:	f000 ff39 	bl	1afc <_ZN14USBDeviceClass11sendControlEPKvm>
}
     c8a:	b015      	add	sp, #84	; 0x54
     c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	20000288 	.word	0x20000288

00000c94 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
     c94:	b408      	push	{r3}
     c96:	4b02      	ldr	r3, [pc, #8]	; (ca0 <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
     c98:	469c      	mov	ip, r3
     c9a:	3810      	subs	r0, #16
     c9c:	bc08      	pop	{r3}
     c9e:	4760      	bx	ip
     ca0:	00000b6d 	.word	0x00000b6d

00000ca4 <_ZN7Serial_5setupER8USBSetup>:
{
     ca4:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
     ca6:	790a      	ldrb	r2, [r1, #4]
     ca8:	7d03      	ldrb	r3, [r0, #20]
{
     caa:	000c      	movs	r4, r1
		return false;
     cac:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
     cae:	429a      	cmp	r2, r3
     cb0:	d10b      	bne.n	cca <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
     cb2:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
     cb4:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     cb6:	2ba1      	cmp	r3, #161	; 0xa1
     cb8:	d109      	bne.n	cce <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
     cba:	2e21      	cmp	r6, #33	; 0x21
     cbc:	d105      	bne.n	cca <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     cbe:	2207      	movs	r2, #7
     cc0:	491f      	ldr	r1, [pc, #124]	; (d40 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     cc2:	4820      	ldr	r0, [pc, #128]	; (d44 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     cc4:	f000 ff1a 	bl	1afc <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     cc8:	3501      	adds	r5, #1
}
     cca:	0028      	movs	r0, r5
     ccc:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     cce:	2b21      	cmp	r3, #33	; 0x21
     cd0:	d1fb      	bne.n	cca <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
     cd2:	2e20      	cmp	r6, #32
     cd4:	d119      	bne.n	d0a <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     cd6:	2207      	movs	r2, #7
     cd8:	4919      	ldr	r1, [pc, #100]	; (d40 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     cda:	481a      	ldr	r0, [pc, #104]	; (d44 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     cdc:	f000 fe50 	bl	1980 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
     ce0:	4b17      	ldr	r3, [pc, #92]	; (d40 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     ce2:	781a      	ldrb	r2, [r3, #0]
     ce4:	7859      	ldrb	r1, [r3, #1]
     ce6:	0209      	lsls	r1, r1, #8
     ce8:	4311      	orrs	r1, r2
     cea:	789a      	ldrb	r2, [r3, #2]
     cec:	0412      	lsls	r2, r2, #16
     cee:	4311      	orrs	r1, r2
     cf0:	78da      	ldrb	r2, [r3, #3]
     cf2:	0612      	lsls	r2, r2, #24
     cf4:	430a      	orrs	r2, r1
     cf6:	2196      	movs	r1, #150	; 0x96
     cf8:	00c9      	lsls	r1, r1, #3
     cfa:	428a      	cmp	r2, r1
     cfc:	d102      	bne.n	d04 <_ZN7Serial_5setupER8USBSetup+0x60>
     cfe:	79db      	ldrb	r3, [r3, #7]
     d00:	07db      	lsls	r3, r3, #31
     d02:	d508      	bpl.n	d16 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
     d04:	f7ff fde2 	bl	8cc <cancelReset>
     d08:	e008      	b.n	d1c <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     d0a:	2e22      	cmp	r6, #34	; 0x22
     d0c:	d10a      	bne.n	d24 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
     d0e:	788a      	ldrb	r2, [r1, #2]
     d10:	4b0b      	ldr	r3, [pc, #44]	; (d40 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     d12:	71da      	strb	r2, [r3, #7]
     d14:	e7e4      	b.n	ce0 <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
     d16:	20fa      	movs	r0, #250	; 0xfa
     d18:	f7ff fdce 	bl	8b8 <initiateReset>
			USBDevice.sendZlp(0);
     d1c:	2100      	movs	r1, #0
     d1e:	4809      	ldr	r0, [pc, #36]	; (d44 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     d20:	f001 f802 	bl	1d28 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
     d24:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
     d26:	2e23      	cmp	r6, #35	; 0x23
     d28:	d1cf      	bne.n	cca <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     d2a:	78e3      	ldrb	r3, [r4, #3]
     d2c:	78a2      	ldrb	r2, [r4, #2]
     d2e:	021b      	lsls	r3, r3, #8
     d30:	4313      	orrs	r3, r2
     d32:	4a05      	ldr	r2, [pc, #20]	; (d48 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
     d34:	2100      	movs	r1, #0
     d36:	4803      	ldr	r0, [pc, #12]	; (d44 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     d38:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
     d3a:	f000 fff5 	bl	1d28 <_ZN14USBDeviceClass7sendZlpEm>
     d3e:	e7c4      	b.n	cca <_ZN7Serial_5setupER8USBSetup+0x26>
     d40:	20000018 	.word	0x20000018
     d44:	20000288 	.word	0x20000288
     d48:	20000014 	.word	0x20000014

00000d4c <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
     d4c:	b408      	push	{r3}
     d4e:	4b02      	ldr	r3, [pc, #8]	; (d58 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
     d50:	469c      	mov	ip, r3
     d52:	3810      	subs	r0, #16
     d54:	bc08      	pop	{r3}
     d56:	4760      	bx	ip
     d58:	00000ca5 	.word	0x00000ca5

00000d5c <_ZN7Serial_9availableEv>:
{
     d5c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
     d5e:	7d41      	ldrb	r1, [r0, #21]
     d60:	6a00      	ldr	r0, [r0, #32]
     d62:	3101      	adds	r1, #1
     d64:	f000 fd42 	bl	17ec <_ZN14USBDeviceClass9availableEm>
     d68:	4b03      	ldr	r3, [pc, #12]	; (d78 <_ZN7Serial_9availableEv+0x1c>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	3301      	adds	r3, #1
     d6e:	1e5a      	subs	r2, r3, #1
     d70:	4193      	sbcs	r3, r2
     d72:	1818      	adds	r0, r3, r0
}
     d74:	bd10      	pop	{r4, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	20000020 	.word	0x20000020

00000d7c <_ZN7Serial_5flushEv>:
{
     d7c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     d7e:	7d41      	ldrb	r1, [r0, #21]
     d80:	6a00      	ldr	r0, [r0, #32]
     d82:	3102      	adds	r1, #2
     d84:	f000 fd48 	bl	1818 <_ZN14USBDeviceClass5flushEm>
}
     d88:	bd10      	pop	{r4, pc}

00000d8a <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
     d8a:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
     d8c:	7d41      	ldrb	r1, [r0, #21]
     d8e:	6a00      	ldr	r0, [r0, #32]
     d90:	3102      	adds	r1, #2
     d92:	f000 fd0f 	bl	17b4 <_ZN14USBDeviceClass5clearEm>
}
     d96:	bd10      	pop	{r4, pc}

00000d98 <_ZN7Serial_5writeEPKhj>:
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     d9c:	7d41      	ldrb	r1, [r0, #21]
{
     d9e:	0004      	movs	r4, r0
     da0:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     da2:	3102      	adds	r1, #2
     da4:	002a      	movs	r2, r5
     da6:	6a00      	ldr	r0, [r0, #32]
     da8:	f000 fdfe 	bl	19a8 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     dac:	2800      	cmp	r0, #0
     dae:	d101      	bne.n	db4 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
     db0:	2301      	movs	r3, #1
     db2:	6063      	str	r3, [r4, #4]
}
     db4:	bd70      	pop	{r4, r5, r6, pc}
	...

00000db8 <_ZN7Serial_4peekEv>:
{
     db8:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     dba:	4c05      	ldr	r4, [pc, #20]	; (dd0 <_ZN7Serial_4peekEv+0x18>)
     dbc:	6823      	ldr	r3, [r4, #0]
     dbe:	1c5a      	adds	r2, r3, #1
     dc0:	d104      	bne.n	dcc <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     dc2:	6803      	ldr	r3, [r0, #0]
     dc4:	695b      	ldr	r3, [r3, #20]
     dc6:	4798      	blx	r3
     dc8:	0003      	movs	r3, r0
     dca:	6020      	str	r0, [r4, #0]
}
     dcc:	0018      	movs	r0, r3
     dce:	bd10      	pop	{r4, pc}
     dd0:	20000020 	.word	0x20000020

00000dd4 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     dd4:	4a07      	ldr	r2, [pc, #28]	; (df4 <_ZN7Serial_4readEv+0x20>)
{
     dd6:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
     dd8:	6810      	ldr	r0, [r2, #0]
{
     dda:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     ddc:	1c41      	adds	r1, r0, #1
     dde:	d003      	beq.n	de8 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     de0:	2301      	movs	r3, #1
     de2:	425b      	negs	r3, r3
     de4:	6013      	str	r3, [r2, #0]
}
     de6:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     de8:	7d59      	ldrb	r1, [r3, #21]
     dea:	6a18      	ldr	r0, [r3, #32]
     dec:	3101      	adds	r1, #1
     dee:	f000 fd8b 	bl	1908 <_ZN14USBDeviceClass4recvEm>
     df2:	e7f8      	b.n	de6 <_ZN7Serial_4readEv+0x12>
     df4:	20000020 	.word	0x20000020

00000df8 <_ZN7Serial_C1ER14USBDeviceClass>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     df8:	23fa      	movs	r3, #250	; 0xfa
     dfa:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     dfc:	b570      	push	{r4, r5, r6, lr}
     dfe:	0004      	movs	r4, r0
     e00:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
     e02:	2303      	movs	r3, #3
     e04:	7583      	strb	r3, [r0, #22]
     e06:	0023      	movs	r3, r4
    Print() : write_error(0) {}
     e08:	2200      	movs	r2, #0
     e0a:	3328      	adds	r3, #40	; 0x28
     e0c:	6042      	str	r2, [r0, #4]
     e0e:	61a3      	str	r3, [r4, #24]
     e10:	4b0c      	ldr	r3, [pc, #48]	; (e44 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
     e12:	2002      	movs	r0, #2
     e14:	001d      	movs	r5, r3
     e16:	3344      	adds	r3, #68	; 0x44
     e18:	6123      	str	r3, [r4, #16]
     e1a:	3508      	adds	r5, #8
     e1c:	1d63      	adds	r3, r4, #5
     e1e:	61e2      	str	r2, [r4, #28]
     e20:	6025      	str	r5, [r4, #0]
     e22:	6221      	str	r1, [r4, #32]
     e24:	75e0      	strb	r0, [r4, #23]
     e26:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
     e28:	2383      	movs	r3, #131	; 0x83
     e2a:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
     e2c:	3b01      	subs	r3, #1
     e2e:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
     e30:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
     e32:	f000 f8c1 	bl	fb8 <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     e36:	0021      	movs	r1, r4
     e38:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
     e3a:	f000 f891 	bl	f60 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
     e3e:	0020      	movs	r0, r4
     e40:	bd70      	pop	{r4, r5, r6, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00005ef0 	.word	0x00005ef0

00000e48 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
     e48:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
     e4a:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL0 = 1; }
	inline void epBank1EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     e4c:	4a09      	ldr	r2, [pc, #36]	; (e74 <_ZN7Serial_15enableInterruptEv+0x2c>)
     e4e:	2002      	movs	r0, #2
     e50:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
     e52:	3301      	adds	r3, #1
     e54:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     e56:	b2db      	uxtb	r3, r3
     e58:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     e5a:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     e5c:	18d3      	adds	r3, r2, r3
     e5e:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     e60:	31ff      	adds	r1, #255	; 0xff
     e62:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     e64:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     e66:	4320      	orrs	r0, r4
     e68:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     e6a:	7a99      	ldrb	r1, [r3, #10]
     e6c:	430a      	orrs	r2, r1
     e6e:	729a      	strb	r2, [r3, #10]
}
     e70:	bd10      	pop	{r4, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	20000740 	.word	0x20000740

00000e78 <_ZN7Serial_5beginEm>:
}
     e78:	4770      	bx	lr
	...

00000e7c <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
     e7c:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
     e7e:	f7ff fb4b 	bl	518 <millis>
     e82:	23f4      	movs	r3, #244	; 0xf4
     e84:	33ff      	adds	r3, #255	; 0xff
		return false;
     e86:	2400      	movs	r4, #0
	if (millis() < 500)
     e88:	4298      	cmp	r0, r3
     e8a:	d907      	bls.n	e9c <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
     e8c:	4b04      	ldr	r3, [pc, #16]	; (ea0 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
     e8e:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
     e90:	79dc      	ldrb	r4, [r3, #7]
     e92:	1e63      	subs	r3, r4, #1
     e94:	419c      	sbcs	r4, r3
     e96:	b2e4      	uxtb	r4, r4
	delay(10);
     e98:	f7ff fb74 	bl	584 <delay>
	return result;
}
     e9c:	0020      	movs	r0, r4
     e9e:	bd10      	pop	{r4, pc}
     ea0:	20000018 	.word	0x20000018

00000ea4 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
     ea4:	b510      	push	{r4, lr}
     ea6:	4902      	ldr	r1, [pc, #8]	; (eb0 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
     ea8:	4802      	ldr	r0, [pc, #8]	; (eb4 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
     eaa:	f7ff ffa5 	bl	df8 <_ZN7Serial_C1ER14USBDeviceClass>
     eae:	bd10      	pop	{r4, pc}
     eb0:	20000288 	.word	0x20000288
     eb4:	20000220 	.word	0x20000220

00000eb8 <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
     eb8:	b570      	push	{r4, r5, r6, lr}
     eba:	000e      	movs	r6, r1
	int sent = 0;
     ebc:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     ebe:	6844      	ldr	r4, [r0, #4]
     ec0:	2c00      	cmp	r4, #0
     ec2:	d00b      	beq.n	edc <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
     ec4:	6823      	ldr	r3, [r4, #0]
     ec6:	0031      	movs	r1, r6
     ec8:	685b      	ldr	r3, [r3, #4]
     eca:	0020      	movs	r0, r4
     ecc:	4798      	blx	r3
		if (res < 0)
     ece:	2800      	cmp	r0, #0
     ed0:	db02      	blt.n	ed8 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
     ed2:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
     ed4:	68e4      	ldr	r4, [r4, #12]
     ed6:	e7f3      	b.n	ec0 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
     ed8:	2501      	movs	r5, #1
     eda:	426d      	negs	r5, r5
	}
	return sent;
}
     edc:	0028      	movs	r0, r5
     ede:	bd70      	pop	{r4, r5, r6, pc}

00000ee0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     ee4:	6844      	ldr	r4, [r0, #4]
     ee6:	2c00      	cmp	r4, #0
     ee8:	d008      	beq.n	efc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
     eea:	6823      	ldr	r3, [r4, #0]
     eec:	0029      	movs	r1, r5
     eee:	689b      	ldr	r3, [r3, #8]
     ef0:	0020      	movs	r0, r4
     ef2:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
     ef4:	2800      	cmp	r0, #0
     ef6:	d102      	bne.n	efe <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     ef8:	68e4      	ldr	r4, [r4, #12]
     efa:	e7f4      	b.n	ee6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
     efc:	0020      	movs	r0, r4
}
     efe:	bd70      	pop	{r4, r5, r6, pc}

00000f00 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
     f00:	b570      	push	{r4, r5, r6, lr}
     f02:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
     f04:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
     f06:	6844      	ldr	r4, [r0, #4]
     f08:	2c00      	cmp	r4, #0
     f0a:	d009      	beq.n	f20 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
     f0c:	6823      	ldr	r3, [r4, #0]
     f0e:	0029      	movs	r1, r5
     f10:	0020      	movs	r0, r4
     f12:	691b      	ldr	r3, [r3, #16]
     f14:	4798      	blx	r3
		iSerialNum += len;
		size += len;
     f16:	1836      	adds	r6, r6, r0
		iSerialNum += len;
     f18:	182d      	adds	r5, r5, r0
		size += len;
     f1a:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
     f1c:	68e4      	ldr	r4, [r4, #12]
     f1e:	e7f3      	b.n	f08 <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
     f20:	0030      	movs	r0, r6
	*iSerialNum = 0;
     f22:	702c      	strb	r4, [r5, #0]
}
     f24:	bd70      	pop	{r4, r5, r6, pc}

00000f26 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
     f26:	b570      	push	{r4, r5, r6, lr}
     f28:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     f2a:	6844      	ldr	r4, [r0, #4]
     f2c:	2c00      	cmp	r4, #0
     f2e:	d008      	beq.n	f42 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
     f30:	6823      	ldr	r3, [r4, #0]
     f32:	0029      	movs	r1, r5
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	0020      	movs	r0, r4
     f38:	4798      	blx	r3
     f3a:	2800      	cmp	r0, #0
     f3c:	d102      	bne.n	f44 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     f3e:	68e4      	ldr	r4, [r4, #12]
     f40:	e7f4      	b.n	f2c <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
     f42:	0020      	movs	r0, r4
}
     f44:	bd70      	pop	{r4, r5, r6, pc}

00000f46 <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
     f46:	b570      	push	{r4, r5, r6, lr}
     f48:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     f4a:	6844      	ldr	r4, [r0, #4]
     f4c:	2c00      	cmp	r4, #0
     f4e:	d006      	beq.n	f5e <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
     f50:	6823      	ldr	r3, [r4, #0]
     f52:	0020      	movs	r0, r4
     f54:	68db      	ldr	r3, [r3, #12]
     f56:	0029      	movs	r1, r5
     f58:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
     f5a:	68e4      	ldr	r4, [r4, #12]
     f5c:	e7f6      	b.n	f4c <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
     f5e:	bd70      	pop	{r4, r5, r6, pc}

00000f60 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
     f60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     f62:	798c      	ldrb	r4, [r1, #6]
     f64:	7845      	ldrb	r5, [r0, #1]
{
     f66:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     f68:	192a      	adds	r2, r5, r4
		return false;
     f6a:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     f6c:	2a07      	cmp	r2, #7
     f6e:	dc1f      	bgt.n	fb0 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
     f70:	685a      	ldr	r2, [r3, #4]
     f72:	4282      	cmp	r2, r0
     f74:	d116      	bne.n	fa4 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
     f76:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
     f78:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
     f7a:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
     f7c:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
     f7e:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
     f80:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
     f82:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     f84:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
     f86:	4d0b      	ldr	r5, [pc, #44]	; (fb4 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     f88:	4294      	cmp	r4, r2
     f8a:	dd10      	ble.n	fae <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
     f8c:	688f      	ldr	r7, [r1, #8]
     f8e:	7858      	ldrb	r0, [r3, #1]
     f90:	0096      	lsls	r6, r2, #2
     f92:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     f94:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
     f96:	0086      	lsls	r6, r0, #2
		lastEp++;
     f98:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
     f9a:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     f9c:	b2d2      	uxtb	r2, r2
		lastEp++;
     f9e:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     fa0:	e7f2      	b.n	f88 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
     fa2:	0002      	movs	r2, r0
		while (current->next) {
     fa4:	68d0      	ldr	r0, [r2, #12]
     fa6:	2800      	cmp	r0, #0
     fa8:	d1fb      	bne.n	fa2 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
     faa:	60d1      	str	r1, [r2, #12]
     fac:	e7e4      	b.n	f78 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
     fae:	2001      	movs	r0, #1
	// restart USB layer???
}
     fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	20000260 	.word	0x20000260

00000fb8 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
     fb8:	2201      	movs	r2, #1
     fba:	4905      	ldr	r1, [pc, #20]	; (fd0 <_Z12PluggableUSBv+0x18>)
     fbc:	4805      	ldr	r0, [pc, #20]	; (fd4 <_Z12PluggableUSBv+0x1c>)
     fbe:	680b      	ldr	r3, [r1, #0]
     fc0:	4013      	ands	r3, r2
     fc2:	d103      	bne.n	fcc <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
     fc4:	7003      	strb	r3, [r0, #0]
     fc6:	7042      	strb	r2, [r0, #1]
     fc8:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
     fca:	600a      	str	r2, [r1, #0]
}
     fcc:	4770      	bx	lr
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	20000254 	.word	0x20000254
     fd4:	20000258 	.word	0x20000258

00000fd8 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     fd8:	4770      	bx	lr

00000fda <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     fda:	b510      	push	{r4, lr}
     fdc:	0004      	movs	r4, r0
	}
     fde:	f002 f95f 	bl	32a0 <_ZdlPv>
     fe2:	0020      	movs	r0, r4
     fe4:	bd10      	pop	{r4, pc}
	...

00000fe8 <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     fea:	2982      	cmp	r1, #130	; 0x82
     fec:	d119      	bne.n	1022 <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     fee:	b2c3      	uxtb	r3, r0
     ff0:	4d29      	ldr	r5, [pc, #164]	; (1098 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     ff2:	015a      	lsls	r2, r3, #5
     ff4:	18aa      	adds	r2, r5, r2
     ff6:	6991      	ldr	r1, [r2, #24]
     ff8:	4c28      	ldr	r4, [pc, #160]	; (109c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     ffa:	0180      	lsls	r0, r0, #6
     ffc:	400c      	ands	r4, r1
     ffe:	21c0      	movs	r1, #192	; 0xc0
    1000:	0589      	lsls	r1, r1, #22
    1002:	4321      	orrs	r1, r4
    1004:	6191      	str	r1, [r2, #24]
    1006:	4926      	ldr	r1, [pc, #152]	; (10a0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1008:	3308      	adds	r3, #8
    100a:	1808      	adds	r0, r1, r0
    100c:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    100e:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1010:	6828      	ldr	r0, [r5, #0]
    1012:	015b      	lsls	r3, r3, #5
    1014:	5c1a      	ldrb	r2, [r3, r0]
    1016:	438a      	bics	r2, r1
    1018:	0011      	movs	r1, r2
    101a:	2230      	movs	r2, #48	; 0x30
    101c:	430a      	orrs	r2, r1
    101e:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    1022:	2900      	cmp	r1, #0
    1024:	d1fc      	bne.n	1020 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1026:	26c0      	movs	r6, #192	; 0xc0
    1028:	b2c1      	uxtb	r1, r0
    102a:	4c1b      	ldr	r4, [pc, #108]	; (1098 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
    102c:	014b      	lsls	r3, r1, #5
    102e:	18e3      	adds	r3, r4, r3
    1030:	689a      	ldr	r2, [r3, #8]
    1032:	4d1a      	ldr	r5, [pc, #104]	; (109c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
    1034:	05b6      	lsls	r6, r6, #22
    1036:	402a      	ands	r2, r5
    1038:	4332      	orrs	r2, r6
    103a:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    103c:	4a19      	ldr	r2, [pc, #100]	; (10a4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
    103e:	0180      	lsls	r0, r0, #6
    1040:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1042:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1044:	000a      	movs	r2, r1
    1046:	2707      	movs	r7, #7
    1048:	6824      	ldr	r4, [r4, #0]
    104a:	3208      	adds	r2, #8
    104c:	0152      	lsls	r2, r2, #5
    104e:	5d11      	ldrb	r1, [r2, r4]
    1050:	43b9      	bics	r1, r7
    1052:	000f      	movs	r7, r1
    1054:	2101      	movs	r1, #1
    1056:	4339      	orrs	r1, r7
    1058:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    105a:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    105c:	4910      	ldr	r1, [pc, #64]	; (10a0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
    105e:	403d      	ands	r5, r7
    1060:	1808      	adds	r0, r1, r0
    1062:	432e      	orrs	r6, r5
    1064:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1066:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1068:	2070      	movs	r0, #112	; 0x70
    106a:	5d11      	ldrb	r1, [r2, r4]
    106c:	4381      	bics	r1, r0
    106e:	0008      	movs	r0, r1
    1070:	2110      	movs	r1, #16
    1072:	4301      	orrs	r1, r0
    1074:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1076:	6899      	ldr	r1, [r3, #8]
    1078:	480b      	ldr	r0, [pc, #44]	; (10a8 <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    107a:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    107c:	4008      	ands	r0, r1
    107e:	2180      	movs	r1, #128	; 0x80
    1080:	0349      	lsls	r1, r1, #13
    1082:	4301      	orrs	r1, r0
    1084:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1086:	6899      	ldr	r1, [r3, #8]
    1088:	0b89      	lsrs	r1, r1, #14
    108a:	0389      	lsls	r1, r1, #14
    108c:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    108e:	2340      	movs	r3, #64	; 0x40
    1090:	7911      	ldrb	r1, [r2, #4]
    1092:	430b      	orrs	r3, r1
    1094:	7113      	strb	r3, [r2, #4]
    1096:	e7c3      	b.n	1020 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
    1098:	20000740 	.word	0x20000740
    109c:	8fffffff 	.word	0x8fffffff
    10a0:	200002b4 	.word	0x200002b4
    10a4:	20000474 	.word	0x20000474
    10a8:	f0003fff 	.word	0xf0003fff

000010ac <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10ac:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    10b0:	6003      	str	r3, [r0, #0]
    10b2:	2301      	movs	r3, #1
    10b4:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    10b6:	b672      	cpsid	i
	}
    10b8:	4770      	bx	lr

000010ba <_ZN7__GuardD1Ev>:
		if (primask == 0) {
    10ba:	6803      	ldr	r3, [r0, #0]
    10bc:	2b00      	cmp	r3, #0
    10be:	d102      	bne.n	10c6 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    10c0:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    10c2:	f3bf 8f6f 	isb	sy
	}
    10c6:	4770      	bx	lr

000010c8 <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
    10c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    10ca:	0006      	movs	r6, r0
    10cc:	36fc      	adds	r6, #252	; 0xfc
    10ce:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
    10d0:	0004      	movs	r4, r0
		if (current == 0) {
    10d2:	2b00      	cmp	r3, #0
    10d4:	d118      	bne.n	1108 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
    10d6:	27b2      	movs	r7, #178	; 0xb2
    10d8:	007f      	lsls	r7, r7, #1
    10da:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
    10dc:	4668      	mov	r0, sp
    10de:	f7ff ffe5 	bl	10ac <_ZN7__GuardC1Ev>
    10e2:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
    10e4:	b2ed      	uxtb	r5, r5
			synchronized {
    10e6:	3b01      	subs	r3, #1
    10e8:	d302      	bcc.n	10f0 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
    10ea:	5de5      	ldrb	r5, [r4, r7]
    10ec:	b2ed      	uxtb	r5, r5
    10ee:	e7fa      	b.n	10e6 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
    10f0:	4668      	mov	r0, sp
    10f2:	9301      	str	r3, [sp, #4]
    10f4:	f7ff ffe1 	bl	10ba <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    10f8:	2d00      	cmp	r5, #0
    10fa:	d101      	bne.n	1100 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
    10fc:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    10fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
    1100:	6e70      	ldr	r0, [r6, #100]	; 0x64
    1102:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
    1104:	1ac0      	subs	r0, r0, r3
    1106:	e7fa      	b.n	10fe <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
    1108:	4668      	mov	r0, sp
    110a:	f7ff ffcf 	bl	10ac <_ZN7__GuardC1Ev>
				ready = ready1;
    110e:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
    1110:	2500      	movs	r5, #0
    1112:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    1114:	0052      	lsls	r2, r2, #1
			synchronized {
    1116:	3b01      	subs	r3, #1
    1118:	d302      	bcc.n	1120 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
    111a:	5ca5      	ldrb	r5, [r4, r2]
    111c:	b2ed      	uxtb	r5, r5
			synchronized {
    111e:	e7fa      	b.n	1116 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
    1120:	4668      	mov	r0, sp
    1122:	9301      	str	r3, [sp, #4]
    1124:	f7ff ffc9 	bl	10ba <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    1128:	2d00      	cmp	r5, #0
    112a:	d0e7      	beq.n	10fc <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
    112c:	23d6      	movs	r3, #214	; 0xd6
    112e:	005b      	lsls	r3, r3, #1
    1130:	58e0      	ldr	r0, [r4, r3]
    1132:	3b04      	subs	r3, #4
    1134:	58e3      	ldr	r3, [r4, r3]
    1136:	e7e5      	b.n	1104 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

00001138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
    1138:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
    113a:	6844      	ldr	r4, [r0, #4]
    113c:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    113e:	6943      	ldr	r3, [r0, #20]
    1140:	480b      	ldr	r0, [pc, #44]	; (1170 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
    1142:	b2db      	uxtb	r3, r3
    1144:	015a      	lsls	r2, r3, #5
    1146:	18a2      	adds	r2, r4, r2
    1148:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    114a:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    114c:	4008      	ands	r0, r1
    114e:	2180      	movs	r1, #128	; 0x80
    1150:	0349      	lsls	r1, r1, #13
    1152:	4301      	orrs	r1, r0
    1154:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1156:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1158:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    115a:	0b89      	lsrs	r1, r1, #14
    115c:	0389      	lsls	r1, r1, #14
    115e:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1160:	6822      	ldr	r2, [r4, #0]
    1162:	18d3      	adds	r3, r2, r3
    1164:	2240      	movs	r2, #64	; 0x40
    1166:	7919      	ldrb	r1, [r3, #4]
    1168:	430a      	orrs	r2, r1
    116a:	711a      	strb	r2, [r3, #4]
	}
    116c:	bd10      	pop	{r4, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	f0003fff 	.word	0xf0003fff

00001174 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    1174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
    1176:	0005      	movs	r5, r0
    1178:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    117a:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
    117c:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    117e:	0019      	movs	r1, r3
	virtual void handleEndpoint()
    1180:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1182:	3108      	adds	r1, #8
    1184:	6810      	ldr	r0, [r2, #0]
    1186:	0149      	lsls	r1, r1, #5
    1188:	1841      	adds	r1, r0, r1
    118a:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    118c:	07c9      	lsls	r1, r1, #31
    118e:	d511      	bpl.n	11b4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1190:	015b      	lsls	r3, r3, #5
    1192:	18d2      	adds	r2, r2, r3
    1194:	6893      	ldr	r3, [r2, #8]
    1196:	049b      	lsls	r3, r3, #18
    1198:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
    119a:	d10c      	bne.n	11b6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
    119c:	0020      	movs	r0, r4
    119e:	f7ff ffcb 	bl	1138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    11a2:	6863      	ldr	r3, [r4, #4]
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	696b      	ldr	r3, [r5, #20]
    11a8:	b2db      	uxtb	r3, r3
    11aa:	3308      	adds	r3, #8
    11ac:	015b      	lsls	r3, r3, #5
    11ae:	18d3      	adds	r3, r2, r3
    11b0:	227f      	movs	r2, #127	; 0x7f
    11b2:	71da      	strb	r2, [r3, #7]
	}
    11b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
    11b6:	69e9      	ldr	r1, [r5, #28]
    11b8:	2900      	cmp	r1, #0
    11ba:	d123      	bne.n	1204 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
    11bc:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    11be:	0023      	movs	r3, r4
				incoming = 1;
    11c0:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    11c2:	3369      	adds	r3, #105	; 0x69
    11c4:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
    11c6:	61ee      	str	r6, [r5, #28]
				synchronized {
    11c8:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    11ca:	6053      	str	r3, [r2, #4]
					ready0 = true;
    11cc:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
    11ce:	f7ff ff6d 	bl	10ac <_ZN7__GuardC1Ev>
					ready0 = true;
    11d2:	007f      	lsls	r7, r7, #1
					notify = ready1;
    11d4:	21b2      	movs	r1, #178	; 0xb2
    11d6:	9b01      	ldr	r3, [sp, #4]
    11d8:	31ff      	adds	r1, #255	; 0xff
    11da:	3b01      	subs	r3, #1
				synchronized {
    11dc:	1c5a      	adds	r2, r3, #1
    11de:	d038      	beq.n	1252 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
    11e0:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
    11e2:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
    11e4:	0052      	lsls	r2, r2, #1
    11e6:	5ca2      	ldrb	r2, [r4, r2]
    11e8:	1e58      	subs	r0, r3, #1
    11ea:	b2d2      	uxtb	r2, r2
    11ec:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    11ee:	5c62      	ldrb	r2, [r4, r1]
    11f0:	4684      	mov	ip, r0
    11f2:	2a00      	cmp	r2, #0
    11f4:	d104      	bne.n	1200 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
    11f6:	0020      	movs	r0, r4
    11f8:	9301      	str	r3, [sp, #4]
    11fa:	f7ff ff9d 	bl	1138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    11fe:	e7e9      	b.n	11d4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
    1200:	4663      	mov	r3, ip
    1202:	e7eb      	b.n	11dc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
    1204:	21d6      	movs	r1, #214	; 0xd6
    1206:	0049      	lsls	r1, r1, #1
    1208:	5063      	str	r3, [r4, r1]
				incoming = 0;
    120a:	2300      	movs	r3, #0
    120c:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    120e:	0023      	movs	r3, r4
    1210:	331d      	adds	r3, #29
    1212:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1214:	6053      	str	r3, [r2, #4]
				synchronized {
    1216:	4668      	mov	r0, sp
					ready1 = true;
    1218:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
    121a:	f7ff ff47 	bl	10ac <_ZN7__GuardC1Ev>
					ready1 = true;
    121e:	2701      	movs	r7, #1
    1220:	0076      	lsls	r6, r6, #1
					notify = ready0;
    1222:	21b2      	movs	r1, #178	; 0xb2
    1224:	9b01      	ldr	r3, [sp, #4]
    1226:	31ff      	adds	r1, #255	; 0xff
    1228:	3b01      	subs	r3, #1
				synchronized {
    122a:	1c5a      	adds	r2, r3, #1
    122c:	d011      	beq.n	1252 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
    122e:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
    1230:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
    1232:	0052      	lsls	r2, r2, #1
    1234:	5ca2      	ldrb	r2, [r4, r2]
    1236:	1e58      	subs	r0, r3, #1
    1238:	b2d2      	uxtb	r2, r2
    123a:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    123c:	5c62      	ldrb	r2, [r4, r1]
    123e:	4684      	mov	ip, r0
    1240:	2a00      	cmp	r2, #0
    1242:	d104      	bne.n	124e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
    1244:	0020      	movs	r0, r4
    1246:	9301      	str	r3, [sp, #4]
    1248:	f7ff ff76 	bl	1138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    124c:	e7e9      	b.n	1222 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
    124e:	4663      	mov	r3, ip
    1250:	e7eb      	b.n	122a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
    1252:	4668      	mov	r0, sp
    1254:	9301      	str	r3, [sp, #4]
    1256:	f7ff ff30 	bl	10ba <_ZN7__GuardD1Ev>
    125a:	e7a2      	b.n	11a2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

0000125c <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
    125c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    125e:	0005      	movs	r5, r0
		synchronized {
    1260:	4668      	mov	r0, sp
    1262:	002c      	movs	r4, r5
    1264:	f7ff ff22 	bl	10ac <_ZN7__GuardC1Ev>
		uint32_t len = 0;
    1268:	2700      	movs	r7, #0

template <int N>
int RingBufferN<N>::availableForStore()
{
  if (_iHead >= _iTail)
    return N - 1 - _iHead + _iTail;
    126a:	22ff      	movs	r2, #255	; 0xff
    126c:	9b01      	ldr	r3, [sp, #4]
    126e:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
    1270:	3b01      	subs	r3, #1
    1272:	d30d      	bcc.n	1290 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
    1274:	68e0      	ldr	r0, [r4, #12]
    1276:	6921      	ldr	r1, [r4, #16]
    1278:	4288      	cmp	r0, r1
    127a:	db04      	blt.n	1286 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
    127c:	68e7      	ldr	r7, [r4, #12]
    127e:	6920      	ldr	r0, [r4, #16]
    1280:	1bd7      	subs	r7, r2, r7
    1282:	183f      	adds	r7, r7, r0
    1284:	e7f4      	b.n	1270 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
  else
    return _iTail - _iHead - 1;
    1286:	6927      	ldr	r7, [r4, #16]
    1288:	68e1      	ldr	r1, [r4, #12]
    128a:	1a7f      	subs	r7, r7, r1
    128c:	3f01      	subs	r7, #1
    128e:	e7ef      	b.n	1270 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    1290:	4668      	mov	r0, sp
    1292:	9301      	str	r3, [sp, #4]
    1294:	f7ff ff11 	bl	10ba <_ZN7__GuardD1Ev>
		if (current == 0) {
    1298:	69a3      	ldr	r3, [r4, #24]
			synchronized {
    129a:	4668      	mov	r0, sp
		if (current == 0) {
    129c:	2b00      	cmp	r3, #0
    129e:	d141      	bne.n	1324 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
    12a0:	f7ff ff04 	bl	10ac <_ZN7__GuardC1Ev>
				if (!ready0) {
    12a4:	21b2      	movs	r1, #178	; 0xb2
    12a6:	9b01      	ldr	r3, [sp, #4]
    12a8:	0049      	lsls	r1, r1, #1
    12aa:	3b01      	subs	r3, #1
			synchronized {
    12ac:	1c5a      	adds	r2, r3, #1
    12ae:	d00c      	beq.n	12ca <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
    12b0:	5c6e      	ldrb	r6, [r5, r1]
    12b2:	1e5a      	subs	r2, r3, #1
    12b4:	b2f6      	uxtb	r6, r6
    12b6:	2e00      	cmp	r6, #0
    12b8:	d105      	bne.n	12c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
    12ba:	4668      	mov	r0, sp
    12bc:	9301      	str	r3, [sp, #4]
    12be:	f7ff fefc 	bl	10ba <_ZN7__GuardD1Ev>
	}
    12c2:	0030      	movs	r0, r6
    12c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    12c6:	0013      	movs	r3, r2
    12c8:	e7f0      	b.n	12ac <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
    12ca:	4668      	mov	r0, sp
    12cc:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
    12ce:	2600      	movs	r6, #0
			synchronized {
    12d0:	f7ff fef3 	bl	10ba <_ZN7__GuardD1Ev>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    12d4:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
    12d6:	42be      	cmp	r6, r7
    12d8:	d003      	beq.n	12e2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
    12da:	6e23      	ldr	r3, [r4, #96]	; 0x60
    12dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
    12de:	428b      	cmp	r3, r1
    12e0:	d360      	bcc.n	13a4 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
    12e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    12e4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    12e6:	429a      	cmp	r2, r3
    12e8:	d1eb      	bne.n	12c2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
    12ea:	2300      	movs	r3, #0
    12ec:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
    12ee:	3301      	adds	r3, #1
    12f0:	61a3      	str	r3, [r4, #24]
				synchronized {
    12f2:	4668      	mov	r0, sp
					ready0 = false;
    12f4:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
    12f6:	f7ff fed9 	bl	10ac <_ZN7__GuardC1Ev>
					ready0 = false;
    12fa:	0064      	lsls	r4, r4, #1
					if (notify) {
    12fc:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
    12fe:	2100      	movs	r1, #0
    1300:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    1302:	32ff      	adds	r2, #255	; 0xff
    1304:	3b01      	subs	r3, #1
				synchronized {
    1306:	1c58      	adds	r0, r3, #1
    1308:	d0d7      	beq.n	12ba <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
    130a:	5529      	strb	r1, [r5, r4]
					if (notify) {
    130c:	5ca8      	ldrb	r0, [r5, r2]
    130e:	1e5f      	subs	r7, r3, #1
    1310:	2800      	cmp	r0, #0
    1312:	d005      	beq.n	1320 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
    1314:	54a9      	strb	r1, [r5, r2]
						release();
    1316:	0028      	movs	r0, r5
    1318:	9301      	str	r3, [sp, #4]
    131a:	f7ff ff0d 	bl	1138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    131e:	e7ed      	b.n	12fc <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
    1320:	003b      	movs	r3, r7
    1322:	e7f0      	b.n	1306 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
    1324:	f7ff fec2 	bl	10ac <_ZN7__GuardC1Ev>
				if (!ready1) {
    1328:	21d8      	movs	r1, #216	; 0xd8
    132a:	9b01      	ldr	r3, [sp, #4]
    132c:	0049      	lsls	r1, r1, #1
    132e:	3b01      	subs	r3, #1
			synchronized {
    1330:	1c5a      	adds	r2, r3, #1
    1332:	d006      	beq.n	1342 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
    1334:	5c6e      	ldrb	r6, [r5, r1]
    1336:	1e5a      	subs	r2, r3, #1
    1338:	b2f6      	uxtb	r6, r6
    133a:	2e00      	cmp	r6, #0
    133c:	d0bd      	beq.n	12ba <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
    133e:	0013      	movs	r3, r2
    1340:	e7f6      	b.n	1330 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
    1342:	4668      	mov	r0, sp
    1344:	9301      	str	r3, [sp, #4]
    1346:	f7ff feb8 	bl	10ba <_ZN7__GuardD1Ev>
    134a:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
    134c:	2600      	movs	r6, #0
    134e:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
    1350:	42be      	cmp	r6, r7
    1352:	d005      	beq.n	1360 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
    1354:	21d6      	movs	r1, #214	; 0xd6
    1356:	0049      	lsls	r1, r1, #1
    1358:	58ab      	ldr	r3, [r5, r2]
    135a:	5869      	ldr	r1, [r5, r1]
    135c:	428b      	cmp	r3, r1
    135e:	d332      	bcc.n	13c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
    1360:	23d6      	movs	r3, #214	; 0xd6
    1362:	005b      	lsls	r3, r3, #1
    1364:	58eb      	ldr	r3, [r5, r3]
    1366:	58a9      	ldr	r1, [r5, r2]
    1368:	4299      	cmp	r1, r3
    136a:	d1aa      	bne.n	12c2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
    136c:	2300      	movs	r3, #0
				synchronized {
    136e:	4668      	mov	r0, sp
				first1 = 0;
    1370:	50ab      	str	r3, [r5, r2]
				current = 0;
    1372:	61a3      	str	r3, [r4, #24]
					ready1 = false;
    1374:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
    1376:	f7ff fe99 	bl	10ac <_ZN7__GuardC1Ev>
					ready1 = false;
    137a:	0064      	lsls	r4, r4, #1
					if (notify) {
    137c:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
    137e:	2100      	movs	r1, #0
    1380:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    1382:	32ff      	adds	r2, #255	; 0xff
    1384:	3b01      	subs	r3, #1
				synchronized {
    1386:	1c58      	adds	r0, r3, #1
    1388:	d097      	beq.n	12ba <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
    138a:	5529      	strb	r1, [r5, r4]
					if (notify) {
    138c:	5ca8      	ldrb	r0, [r5, r2]
    138e:	1e5f      	subs	r7, r3, #1
    1390:	2800      	cmp	r0, #0
    1392:	d005      	beq.n	13a0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
    1394:	54a9      	strb	r1, [r5, r2]
						release();
    1396:	0028      	movs	r0, r5
    1398:	9301      	str	r3, [sp, #4]
    139a:	f7ff fecd 	bl	1138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    139e:	e7ed      	b.n	137c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
    13a0:	003b      	movs	r3, r7
    13a2:	e7f0      	b.n	1386 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
    13a4:	1c59      	adds	r1, r3, #1
    13a6:	18eb      	adds	r3, r5, r3
    13a8:	33ff      	adds	r3, #255	; 0xff
    13aa:	6621      	str	r1, [r4, #96]	; 0x60
    13ac:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
    13ae:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
    13b0:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
    13b2:	3301      	adds	r3, #1
    13b4:	4013      	ands	r3, r2
  if ( i != _iTail )
    13b6:	4283      	cmp	r3, r0
    13b8:	d003      	beq.n	13c2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
    13ba:	68e0      	ldr	r0, [r4, #12]
    13bc:	1828      	adds	r0, r5, r0
    13be:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
    13c0:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
    13c2:	3601      	adds	r6, #1
    13c4:	e787      	b.n	12d6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
    13c6:	1c59      	adds	r1, r3, #1
    13c8:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
    13ca:	21ff      	movs	r1, #255	; 0xff
    13cc:	18eb      	adds	r3, r5, r3
    13ce:	3369      	adds	r3, #105	; 0x69
    13d0:	33ff      	adds	r3, #255	; 0xff
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
    13d6:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
    13d8:	3301      	adds	r3, #1
    13da:	400b      	ands	r3, r1
  if ( i != _iTail )
    13dc:	6921      	ldr	r1, [r4, #16]
    13de:	428b      	cmp	r3, r1
    13e0:	d004      	beq.n	13ec <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
    13e2:	4660      	mov	r0, ip
    13e4:	68e1      	ldr	r1, [r4, #12]
    13e6:	1869      	adds	r1, r5, r1
    13e8:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
    13ea:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
    13ec:	3601      	adds	r6, #1
    13ee:	e7af      	b.n	1350 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

000013f0 <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
    13f0:	b510      	push	{r4, lr}
    13f2:	0004      	movs	r4, r0
		_recv();
    13f4:	f7ff ff32 	bl	125c <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
    13f8:	0023      	movs	r3, r4
    13fa:	33fc      	adds	r3, #252	; 0xfc
    13fc:	6919      	ldr	r1, [r3, #16]
    13fe:	68da      	ldr	r2, [r3, #12]
    1400:	4291      	cmp	r1, r2
    1402:	d003      	beq.n	140c <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
    1404:	691b      	ldr	r3, [r3, #16]
    1406:	18e4      	adds	r4, r4, r3
    1408:	7a20      	ldrb	r0, [r4, #8]
	}
    140a:	bd10      	pop	{r4, pc}
    return -1;
    140c:	2001      	movs	r0, #1
    140e:	4240      	negs	r0, r0
		return _rx_buffer.peek();
    1410:	e7fb      	b.n	140a <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

00001412 <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
    1412:	b510      	push	{r4, lr}
    1414:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
    1416:	34fc      	adds	r4, #252	; 0xfc
		_recv();
    1418:	f7ff ff20 	bl	125c <_ZN26DoubleBufferedEPOutHandler5_recvEv>
    141c:	68e0      	ldr	r0, [r4, #12]
    141e:	6923      	ldr	r3, [r4, #16]
    1420:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    1422:	d501      	bpl.n	1428 <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
    1424:	3001      	adds	r0, #1
    1426:	30ff      	adds	r0, #255	; 0xff
	}
    1428:	bd10      	pop	{r4, pc}

0000142a <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
    142a:	b5f0      	push	{r4, r5, r6, r7, lr}
    142c:	b085      	sub	sp, #20
    142e:	9201      	str	r2, [sp, #4]
    1430:	9100      	str	r1, [sp, #0]
    1432:	0005      	movs	r5, r0
		_recv();
    1434:	f7ff ff12 	bl	125c <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
    1438:	a802      	add	r0, sp, #8
    143a:	f7ff fe37 	bl	10ac <_ZN7__GuardC1Ev>
    return -1;
    143e:	2001      	movs	r0, #1
		uint32_t i = 0;
    1440:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
    1442:	26ff      	movs	r6, #255	; 0xff
    1444:	9a03      	ldr	r2, [sp, #12]
    return -1;
    1446:	4240      	negs	r0, r0
		synchronized {
    1448:	3a01      	subs	r2, #1
    144a:	d31d      	bcc.n	1488 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
    144c:	002b      	movs	r3, r5
    144e:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
    1450:	9901      	ldr	r1, [sp, #4]
    1452:	428c      	cmp	r4, r1
    1454:	d2f8      	bcs.n	1448 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
    1456:	68d9      	ldr	r1, [r3, #12]
    1458:	691f      	ldr	r7, [r3, #16]
    145a:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
    145c:	d501      	bpl.n	1462 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
    145e:	3101      	adds	r1, #1
    1460:	31ff      	adds	r1, #255	; 0xff
    1462:	2900      	cmp	r1, #0
    1464:	d0f0      	beq.n	1448 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
    1466:	6919      	ldr	r1, [r3, #16]
    1468:	68df      	ldr	r7, [r3, #12]
    146a:	468c      	mov	ip, r1
    return -1;
    146c:	0001      	movs	r1, r0
  if(_iTail == _iHead)
    146e:	45bc      	cmp	ip, r7
    1470:	d006      	beq.n	1480 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
    1472:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
    1474:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
    1476:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
    1478:	3701      	adds	r7, #1
    147a:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
    147c:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
    147e:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
    1480:	9f00      	ldr	r7, [sp, #0]
    1482:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
    1484:	3401      	adds	r4, #1
    1486:	e7e3      	b.n	1450 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
    1488:	a802      	add	r0, sp, #8
    148a:	9203      	str	r2, [sp, #12]
    148c:	f7ff fe15 	bl	10ba <_ZN7__GuardD1Ev>
	}
    1490:	0020      	movs	r0, r4
    1492:	b005      	add	sp, #20
    1494:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001496 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    1496:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    1498:	466b      	mov	r3, sp
    149a:	1ddc      	adds	r4, r3, #7
    149c:	2300      	movs	r3, #0
{
    149e:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
    14a0:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    14a2:	f7ff fd89 	bl	fb8 <_Z12PluggableUSBv>
    14a6:	0021      	movs	r1, r4
    14a8:	f7ff fd06 	bl	eb8 <_ZN13PluggableUSB_12getInterfaceEPh>
    14ac:	682b      	ldr	r3, [r5, #0]
    14ae:	1818      	adds	r0, r3, r0
    14b0:	6028      	str	r0, [r5, #0]
	return interfaces;
    14b2:	7820      	ldrb	r0, [r4, #0]
}
    14b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000014b8 <_ZN14USBDeviceClass4initEv>:
{
    14b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    14ba:	2320      	movs	r3, #32
    14bc:	4a3e      	ldr	r2, [pc, #248]	; (15b8 <_ZN14USBDeviceClass4initEv+0x100>)
{
    14be:	0005      	movs	r5, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    14c0:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    14c2:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    14c4:	430b      	orrs	r3, r1
    14c6:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    14c8:	2201      	movs	r2, #1
    14ca:	493c      	ldr	r1, [pc, #240]	; (15bc <_ZN14USBDeviceClass4initEv+0x104>)
    14cc:	780b      	ldrb	r3, [r1, #0]
    14ce:	4313      	orrs	r3, r2
    14d0:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    14d2:	4b3b      	ldr	r3, [pc, #236]	; (15c0 <_ZN14USBDeviceClass4initEv+0x108>)
    14d4:	7819      	ldrb	r1, [r3, #0]
    14d6:	4381      	bics	r1, r0
    14d8:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    14da:	2106      	movs	r1, #6
    14dc:	781c      	ldrb	r4, [r3, #0]
    14de:	4321      	orrs	r1, r4
    14e0:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    14e2:	4938      	ldr	r1, [pc, #224]	; (15c4 <_ZN14USBDeviceClass4initEv+0x10c>)
    14e4:	780c      	ldrb	r4, [r1, #0]
    14e6:	4322      	orrs	r2, r4
    14e8:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    14ea:	781a      	ldrb	r2, [r3, #0]
    14ec:	4002      	ands	r2, r0
    14ee:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    14f0:	2260      	movs	r2, #96	; 0x60
    14f2:	7819      	ldrb	r1, [r3, #0]
    14f4:	430a      	orrs	r2, r1
    14f6:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    14f8:	4b33      	ldr	r3, [pc, #204]	; (15c8 <_ZN14USBDeviceClass4initEv+0x110>)
    14fa:	4a34      	ldr	r2, [pc, #208]	; (15cc <_ZN14USBDeviceClass4initEv+0x114>)
    14fc:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    14fe:	785f      	ldrb	r7, [r3, #1]
    1500:	09ff      	lsrs	r7, r7, #7
    1502:	d1fc      	bne.n	14fe <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    1504:	4832      	ldr	r0, [pc, #200]	; (15d0 <_ZN14USBDeviceClass4initEv+0x118>)
    1506:	f7ff f801 	bl	50c <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    150a:	4e32      	ldr	r6, [pc, #200]	; (15d4 <_ZN14USBDeviceClass4initEv+0x11c>)
    150c:	2301      	movs	r3, #1
    150e:	0030      	movs	r0, r6
    1510:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    1512:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    1514:	7822      	ldrb	r2, [r4, #0]
    1516:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    1518:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    151a:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    151c:	0052      	lsls	r2, r2, #1
    151e:	f004 fb58 	bl	5bd2 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    1522:	78a3      	ldrb	r3, [r4, #2]
    1524:	07db      	lsls	r3, r3, #31
    1526:	d4fc      	bmi.n	1522 <_ZN14USBDeviceClass4initEv+0x6a>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1528:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    152a:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    152c:	4b2a      	ldr	r3, [pc, #168]	; (15d8 <_ZN14USBDeviceClass4initEv+0x120>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    152e:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    1534:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    1536:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1538:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    153a:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    153c:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    153e:	4282      	cmp	r2, r0
    1540:	d100      	bne.n	1544 <_ZN14USBDeviceClass4initEv+0x8c>
		pad_transn = 5;
    1542:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    1544:	291f      	cmp	r1, #31
    1546:	d100      	bne.n	154a <_ZN14USBDeviceClass4initEv+0x92>
		pad_transp = 29;
    1548:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    154a:	2b07      	cmp	r3, #7
    154c:	d100      	bne.n	1550 <_ZN14USBDeviceClass4initEv+0x98>
		pad_trim = 3;
    154e:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    1550:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    1552:	4f22      	ldr	r7, [pc, #136]	; (15dc <_ZN14USBDeviceClass4initEv+0x124>)
    1554:	4002      	ands	r2, r0
    1556:	403e      	ands	r6, r7
    1558:	0192      	lsls	r2, r2, #6
    155a:	4332      	orrs	r2, r6
    155c:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    155e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1560:	4001      	ands	r1, r0
    1562:	4382      	bics	r2, r0
    1564:	000e      	movs	r6, r1
    1566:	0011      	movs	r1, r2
    1568:	4331      	orrs	r1, r6
    156a:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    156c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    156e:	0319      	lsls	r1, r3, #12
    1570:	4b1b      	ldr	r3, [pc, #108]	; (15e0 <_ZN14USBDeviceClass4initEv+0x128>)
	SerialUSB.begin(0);
    1572:	481c      	ldr	r0, [pc, #112]	; (15e4 <_ZN14USBDeviceClass4initEv+0x12c>)
    1574:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1576:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    1578:	430b      	orrs	r3, r1
    157a:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    157c:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    157e:	21c1      	movs	r1, #193	; 0xc1
    1580:	4013      	ands	r3, r2
    1582:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1584:	2304      	movs	r3, #4
    1586:	7822      	ldrb	r2, [r4, #0]
    1588:	0089      	lsls	r1, r1, #2
    158a:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    158c:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    158e:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1590:	8923      	ldrh	r3, [r4, #8]
    1592:	4393      	bics	r3, r2
    1594:	4a14      	ldr	r2, [pc, #80]	; (15e8 <_ZN14USBDeviceClass4initEv+0x130>)
    1596:	8123      	strh	r3, [r4, #8]
    1598:	5853      	ldr	r3, [r2, r1]
    159a:	021b      	lsls	r3, r3, #8
    159c:	0a1b      	lsrs	r3, r3, #8
    159e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15a0:	2380      	movs	r3, #128	; 0x80
    15a2:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    15a4:	7822      	ldrb	r2, [r4, #0]
    15a6:	3b7e      	subs	r3, #126	; 0x7e
    15a8:	4313      	orrs	r3, r2
    15aa:	7023      	strb	r3, [r4, #0]
	initialized = true;
    15ac:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    15ae:	2100      	movs	r1, #0
	initialized = true;
    15b0:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    15b2:	f7ff fc61 	bl	e78 <_ZN7Serial_5beginEm>
}
    15b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15b8:	40000400 	.word	0x40000400
    15bc:	41004458 	.word	0x41004458
    15c0:	4100443c 	.word	0x4100443c
    15c4:	41004459 	.word	0x41004459
    15c8:	40000c00 	.word	0x40000c00
    15cc:	00004006 	.word	0x00004006
    15d0:	00001f3d 	.word	0x00001f3d
    15d4:	20000740 	.word	0x20000740
    15d8:	00806024 	.word	0x00806024
    15dc:	fffff83f 	.word	0xfffff83f
    15e0:	ffff8fff 	.word	0xffff8fff
    15e4:	20000220 	.word	0x20000220
    15e8:	e000e100 	.word	0xe000e100

000015ec <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    15ec:	7800      	ldrb	r0, [r0, #0]
    15ee:	2800      	cmp	r0, #0
    15f0:	d010      	beq.n	1614 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    15f2:	2101      	movs	r1, #1
    15f4:	4b08      	ldr	r3, [pc, #32]	; (1618 <_ZN14USBDeviceClass6attachEv+0x2c>)
    15f6:	681b      	ldr	r3, [r3, #0]
    15f8:	891a      	ldrh	r2, [r3, #8]
    15fa:	438a      	bics	r2, r1
    15fc:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    15fe:	2208      	movs	r2, #8
    1600:	8b19      	ldrh	r1, [r3, #24]
    1602:	430a      	orrs	r2, r1
    1604:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    1606:	2204      	movs	r2, #4
    1608:	8b19      	ldrh	r1, [r3, #24]
    160a:	430a      	orrs	r2, r1
    160c:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    160e:	2200      	movs	r2, #0
    1610:	4b02      	ldr	r3, [pc, #8]	; (161c <_ZN14USBDeviceClass6attachEv+0x30>)
    1612:	601a      	str	r2, [r3, #0]
}
    1614:	4770      	bx	lr
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	20000740 	.word	0x20000740
    161c:	20000738 	.word	0x20000738

00001620 <_ZN14USBDeviceClass10setAddressEm>:
{
    1620:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1622:	4a0f      	ldr	r2, [pc, #60]	; (1660 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    1624:	6993      	ldr	r3, [r2, #24]
    1626:	0b9b      	lsrs	r3, r3, #14
    1628:	039b      	lsls	r3, r3, #14
    162a:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    162c:	6813      	ldr	r3, [r2, #0]
    162e:	2202      	movs	r2, #2
    1630:	33ff      	adds	r3, #255	; 0xff
    1632:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1634:	7998      	ldrb	r0, [r3, #6]
    1636:	3a82      	subs	r2, #130	; 0x82
    1638:	4302      	orrs	r2, r0
    163a:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    163c:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    163e:	0792      	lsls	r2, r2, #30
    1640:	d5fc      	bpl.n	163c <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    1642:	247f      	movs	r4, #127	; 0x7f
    1644:	4a07      	ldr	r2, [pc, #28]	; (1664 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    1646:	4021      	ands	r1, r4
    1648:	7a93      	ldrb	r3, [r2, #10]
    164a:	0008      	movs	r0, r1
    164c:	43a3      	bics	r3, r4
    164e:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1650:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    1652:	4301      	orrs	r1, r0
    1654:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1656:	7a91      	ldrb	r1, [r2, #10]
    1658:	425b      	negs	r3, r3
    165a:	430b      	orrs	r3, r1
    165c:	7293      	strb	r3, [r2, #10]
}
    165e:	bd10      	pop	{r4, pc}
    1660:	20000740 	.word	0x20000740
    1664:	41005000 	.word	0x41005000

00001668 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    1668:	b510      	push	{r4, lr}
    166a:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    166c:	f7ff fca4 	bl	fb8 <_Z12PluggableUSBv>
    1670:	0021      	movs	r1, r4
    1672:	f7ff fc58 	bl	f26 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    1676:	2800      	cmp	r0, #0
    1678:	d104      	bne.n	1684 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    167a:	4a03      	ldr	r2, [pc, #12]	; (1688 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    167c:	6993      	ldr	r3, [r2, #24]
    167e:	0b9b      	lsrs	r3, r3, #14
    1680:	039b      	lsls	r3, r3, #14
    1682:	6193      	str	r3, [r2, #24]
}
    1684:	bd10      	pop	{r4, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	20000740 	.word	0x20000740

0000168c <_ZN14USBDeviceClass6initEPEmm>:
{
    168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    168e:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    1690:	2a83      	cmp	r2, #131	; 0x83
    1692:	d119      	bne.n	16c8 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1694:	b2cb      	uxtb	r3, r1
    1696:	4c39      	ldr	r4, [pc, #228]	; (177c <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    1698:	015a      	lsls	r2, r3, #5
    169a:	18a2      	adds	r2, r4, r2
    169c:	6991      	ldr	r1, [r2, #24]
    169e:	4838      	ldr	r0, [pc, #224]	; (1780 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    16a0:	01ad      	lsls	r5, r5, #6
    16a2:	4008      	ands	r0, r1
    16a4:	21c0      	movs	r1, #192	; 0xc0
    16a6:	0589      	lsls	r1, r1, #22
    16a8:	4301      	orrs	r1, r0
    16aa:	6191      	str	r1, [r2, #24]
    16ac:	4935      	ldr	r1, [pc, #212]	; (1784 <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    16ae:	6820      	ldr	r0, [r4, #0]
    16b0:	194d      	adds	r5, r1, r5
    16b2:	2170      	movs	r1, #112	; 0x70
    16b4:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    16b6:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    16b8:	015b      	lsls	r3, r3, #5
    16ba:	5c1a      	ldrb	r2, [r3, r0]
    16bc:	438a      	bics	r2, r1
    16be:	0011      	movs	r1, r2
    16c0:	2240      	movs	r2, #64	; 0x40
    16c2:	430a      	orrs	r2, r1
    16c4:	541a      	strb	r2, [r3, r0]
}
    16c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    16c8:	2a02      	cmp	r2, #2
    16ca:	d152      	bne.n	1772 <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    16cc:	4a2e      	ldr	r2, [pc, #184]	; (1788 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    16ce:	008b      	lsls	r3, r1, #2
    16d0:	5898      	ldr	r0, [r3, r2]
    16d2:	2800      	cmp	r0, #0
    16d4:	d002      	beq.n	16dc <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    16d6:	6803      	ldr	r3, [r0, #0]
    16d8:	695b      	ldr	r3, [r3, #20]
    16da:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    16dc:	20da      	movs	r0, #218	; 0xda
    16de:	0040      	lsls	r0, r0, #1
    16e0:	f001 fdda 	bl	3298 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    16e4:	2280      	movs	r2, #128	; 0x80
    16e6:	0004      	movs	r4, r0
		notify(false)
    16e8:	4e24      	ldr	r6, [pc, #144]	; (177c <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    16ea:	4b28      	ldr	r3, [pc, #160]	; (178c <_ZN14USBDeviceClass6initEPEmm+0x100>)
    16ec:	6046      	str	r6, [r0, #4]
    16ee:	6003      	str	r3, [r0, #0]
    16f0:	0052      	lsls	r2, r2, #1
    16f2:	2100      	movs	r1, #0
    16f4:	3008      	adds	r0, #8
    16f6:	f004 fa6c 	bl	5bd2 <memset>
  _iHead = 0;
    16fa:	0022      	movs	r2, r4
    16fc:	2300      	movs	r3, #0
    16fe:	32fc      	adds	r2, #252	; 0xfc
    1700:	60d3      	str	r3, [r2, #12]
    1702:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    1704:	6113      	str	r3, [r2, #16]
    1706:	6613      	str	r3, [r2, #96]	; 0x60
    1708:	6193      	str	r3, [r2, #24]
    170a:	61d3      	str	r3, [r2, #28]
    170c:	6653      	str	r3, [r2, #100]	; 0x64
    170e:	22b2      	movs	r2, #178	; 0xb2
    1710:	0052      	lsls	r2, r2, #1
    1712:	54a3      	strb	r3, [r4, r2]
    1714:	3244      	adds	r2, #68	; 0x44
    1716:	50a3      	str	r3, [r4, r2]
    1718:	3204      	adds	r2, #4
    171a:	50a3      	str	r3, [r4, r2]
    171c:	3204      	adds	r2, #4
    171e:	54a3      	strb	r3, [r4, r2]
    1720:	22b2      	movs	r2, #178	; 0xb2
    1722:	32ff      	adds	r2, #255	; 0xff
    1724:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1726:	b2ea      	uxtb	r2, r5
    1728:	0150      	lsls	r0, r2, #5
    172a:	1831      	adds	r1, r6, r0
    172c:	688b      	ldr	r3, [r1, #8]
    172e:	4f14      	ldr	r7, [pc, #80]	; (1780 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1730:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1732:	401f      	ands	r7, r3
    1734:	23c0      	movs	r3, #192	; 0xc0
    1736:	059b      	lsls	r3, r3, #22
    1738:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    173a:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    173c:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    173e:	6833      	ldr	r3, [r6, #0]
    1740:	0152      	lsls	r2, r2, #5
    1742:	5cd6      	ldrb	r6, [r2, r3]
    1744:	00ad      	lsls	r5, r5, #2
    1746:	43be      	bics	r6, r7
    1748:	46b4      	mov	ip, r6
    174a:	2603      	movs	r6, #3
    174c:	4667      	mov	r7, ip
    174e:	433e      	orrs	r6, r7
    1750:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    1752:	0022      	movs	r2, r4
    1754:	321d      	adds	r2, #29
    1756:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1758:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    175a:	2201      	movs	r2, #1
    175c:	181b      	adds	r3, r3, r0
    175e:	33ff      	adds	r3, #255	; 0xff
    1760:	7a99      	ldrb	r1, [r3, #10]
		release();
    1762:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1764:	430a      	orrs	r2, r1
    1766:	729a      	strb	r2, [r3, #10]
		release();
    1768:	f7ff fce6 	bl	1138 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    176c:	4b06      	ldr	r3, [pc, #24]	; (1788 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    176e:	515c      	str	r4, [r3, r5]
    1770:	e7a9      	b.n	16c6 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    1772:	0011      	movs	r1, r2
    1774:	0028      	movs	r0, r5
    1776:	f7ff fc37 	bl	fe8 <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    177a:	e7a4      	b.n	16c6 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    177c:	20000740 	.word	0x20000740
    1780:	8fffffff 	.word	0x8fffffff
    1784:	200002b4 	.word	0x200002b4
    1788:	2000028c 	.word	0x2000028c
    178c:	00005f50 	.word	0x00005f50

00001790 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    1790:	b570      	push	{r4, r5, r6, lr}
    1792:	0005      	movs	r5, r0
    1794:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    1796:	4b06      	ldr	r3, [pc, #24]	; (17b0 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    1798:	00a2      	lsls	r2, r4, #2
    179a:	58d2      	ldr	r2, [r2, r3]
    179c:	2a00      	cmp	r2, #0
    179e:	d006      	beq.n	17ae <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    17a0:	0021      	movs	r1, r4
    17a2:	0028      	movs	r0, r5
    17a4:	3401      	adds	r4, #1
    17a6:	f7ff ff71 	bl	168c <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    17aa:	2c0a      	cmp	r4, #10
    17ac:	d1f3      	bne.n	1796 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    17ae:	bd70      	pop	{r4, r5, r6, pc}
    17b0:	20000260 	.word	0x20000260

000017b4 <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    17b4:	4b0b      	ldr	r3, [pc, #44]	; (17e4 <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    17b6:	b2ca      	uxtb	r2, r1
    17b8:	480b      	ldr	r0, [pc, #44]	; (17e8 <_ZN14USBDeviceClass5clearEm+0x34>)
    17ba:	0189      	lsls	r1, r1, #6
    17bc:	1859      	adds	r1, r3, r1
    17be:	0153      	lsls	r3, r2, #5
    17c0:	18c3      	adds	r3, r0, r3
    17c2:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17c4:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    17c6:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17c8:	0b89      	lsrs	r1, r1, #14
    17ca:	0389      	lsls	r1, r1, #14
    17cc:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    17ce:	6803      	ldr	r3, [r0, #0]
    17d0:	0152      	lsls	r2, r2, #5
    17d2:	189a      	adds	r2, r3, r2
    17d4:	2302      	movs	r3, #2
    17d6:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    17d8:	7951      	ldrb	r1, [r2, #5]
    17da:	3b82      	subs	r3, #130	; 0x82
    17dc:	430b      	orrs	r3, r1
    17de:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    17e0:	4770      	bx	lr
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	200002b4 	.word	0x200002b4
    17e8:	20000740 	.word	0x20000740

000017ec <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    17ec:	4b08      	ldr	r3, [pc, #32]	; (1810 <_ZN14USBDeviceClass9availableEm+0x24>)
    17ee:	008a      	lsls	r2, r1, #2
    17f0:	58d0      	ldr	r0, [r2, r3]
{
    17f2:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    17f4:	2800      	cmp	r0, #0
    17f6:	d003      	beq.n	1800 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    17f8:	6803      	ldr	r3, [r0, #0]
    17fa:	689b      	ldr	r3, [r3, #8]
    17fc:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    17fe:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1800:	b2c9      	uxtb	r1, r1
    1802:	4b04      	ldr	r3, [pc, #16]	; (1814 <_ZN14USBDeviceClass9availableEm+0x28>)
    1804:	0149      	lsls	r1, r1, #5
    1806:	1859      	adds	r1, r3, r1
    1808:	6888      	ldr	r0, [r1, #8]
    180a:	0480      	lsls	r0, r0, #18
    180c:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    180e:	e7f6      	b.n	17fe <_ZN14USBDeviceClass9availableEm+0x12>
    1810:	2000028c 	.word	0x2000028c
    1814:	20000740 	.word	0x20000740

00001818 <_ZN14USBDeviceClass5flushEm>:
{
    1818:	b510      	push	{r4, lr}
    181a:	000c      	movs	r4, r1
	if (available(ep)) {
    181c:	f7ff ffe6 	bl	17ec <_ZN14USBDeviceClass9availableEm>
    1820:	2800      	cmp	r0, #0
    1822:	d00c      	beq.n	183e <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1824:	4b06      	ldr	r3, [pc, #24]	; (1840 <_ZN14USBDeviceClass5flushEm+0x28>)
    1826:	b2e4      	uxtb	r4, r4
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	3408      	adds	r4, #8
    182c:	0164      	lsls	r4, r4, #5
    182e:	191c      	adds	r4, r3, r4
    1830:	2380      	movs	r3, #128	; 0x80
    1832:	7962      	ldrb	r2, [r4, #5]
    1834:	425b      	negs	r3, r3
    1836:	4313      	orrs	r3, r2
    1838:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    183a:	2302      	movs	r3, #2
    183c:	71e3      	strb	r3, [r4, #7]
}
    183e:	bd10      	pop	{r4, pc}
    1840:	20000740 	.word	0x20000740

00001844 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    1844:	b5f0      	push	{r4, r5, r6, r7, lr}
    1846:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    1848:	4b2b      	ldr	r3, [pc, #172]	; (18f8 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
{
    184a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    184c:	681b      	ldr	r3, [r3, #0]
{
    184e:	0007      	movs	r7, r0
    1850:	000d      	movs	r5, r1
    1852:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    1854:	2b00      	cmp	r3, #0
    1856:	d04b      	beq.n	18f0 <_ZN14USBDeviceClass4recvEmPvm+0xac>
		digitalWrite(PIN_LED_RXL, LOW);

	rxLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	if (epHandlers[ep]) {
    1858:	4b28      	ldr	r3, [pc, #160]	; (18fc <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    185a:	008a      	lsls	r2, r1, #2
    185c:	58d0      	ldr	r0, [r2, r3]
    185e:	2800      	cmp	r0, #0
    1860:	d008      	beq.n	1874 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    1862:	6803      	ldr	r3, [r0, #0]
    1864:	0022      	movs	r2, r4
    1866:	685b      	ldr	r3, [r3, #4]
    1868:	9902      	ldr	r1, [sp, #8]
    186a:	4798      	blx	r3
    186c:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    186e:	0020      	movs	r0, r4
    1870:	b005      	add	sp, #20
    1872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    1874:	0038      	movs	r0, r7
    1876:	f7ff ffb9 	bl	17ec <_ZN14USBDeviceClass9availableEm>
    187a:	4284      	cmp	r4, r0
    187c:	d904      	bls.n	1888 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    187e:	0029      	movs	r1, r5
    1880:	0038      	movs	r0, r7
    1882:	f7ff ffb3 	bl	17ec <_ZN14USBDeviceClass9availableEm>
    1886:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    1888:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    188a:	b2eb      	uxtb	r3, r5
    188c:	4e1c      	ldr	r6, [pc, #112]	; (1900 <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    188e:	9303      	str	r3, [sp, #12]
    1890:	015b      	lsls	r3, r3, #5
    1892:	9301      	str	r3, [sp, #4]
    1894:	18f2      	adds	r2, r6, r3
    1896:	6893      	ldr	r3, [r2, #8]
    1898:	0b9b      	lsrs	r3, r3, #14
    189a:	039b      	lsls	r3, r3, #14
    189c:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    189e:	9a01      	ldr	r2, [sp, #4]
    18a0:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    18a2:	9802      	ldr	r0, [sp, #8]
    18a4:	189b      	adds	r3, r3, r2
    18a6:	33ff      	adds	r3, #255	; 0xff
    18a8:	7a5a      	ldrb	r2, [r3, #9]
    18aa:	430a      	orrs	r2, r1
    18ac:	4915      	ldr	r1, [pc, #84]	; (1904 <_ZN14USBDeviceClass4recvEmPvm+0xc0>)
    18ae:	725a      	strb	r2, [r3, #9]
    18b0:	01ab      	lsls	r3, r5, #6
    18b2:	18c9      	adds	r1, r1, r3
    18b4:	0022      	movs	r2, r4
    18b6:	f004 f983 	bl	5bc0 <memcpy>
	if (len && !available(ep)) {
    18ba:	2c00      	cmp	r4, #0
    18bc:	d0d7      	beq.n	186e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    18be:	0029      	movs	r1, r5
    18c0:	0038      	movs	r0, r7
    18c2:	f7ff ff93 	bl	17ec <_ZN14USBDeviceClass9availableEm>
    18c6:	2800      	cmp	r0, #0
    18c8:	d1d1      	bne.n	186e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    18ca:	2140      	movs	r1, #64	; 0x40
    18cc:	9b03      	ldr	r3, [sp, #12]
    18ce:	6832      	ldr	r2, [r6, #0]
    18d0:	3308      	adds	r3, #8
    18d2:	015b      	lsls	r3, r3, #5
    18d4:	18d3      	adds	r3, r2, r3
    18d6:	7918      	ldrb	r0, [r3, #4]
    18d8:	4301      	orrs	r1, r0
    18da:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    18dc:	2101      	movs	r1, #1
    18de:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    18e0:	2101      	movs	r1, #1
    18e2:	9b01      	ldr	r3, [sp, #4]
    18e4:	18d3      	adds	r3, r2, r3
    18e6:	33ff      	adds	r3, #255	; 0xff
    18e8:	7a9a      	ldrb	r2, [r3, #10]
    18ea:	430a      	orrs	r2, r1
    18ec:	729a      	strb	r2, [r3, #10]
    18ee:	e7be      	b.n	186e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    18f0:	2401      	movs	r4, #1
    18f2:	4264      	negs	r4, r4
    18f4:	e7bb      	b.n	186e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	20000738 	.word	0x20000738
    18fc:	2000028c 	.word	0x2000028c
    1900:	20000740 	.word	0x20000740
    1904:	20000474 	.word	0x20000474

00001908 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    1908:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    190a:	466b      	mov	r3, sp
    190c:	1ddc      	adds	r4, r3, #7
    190e:	0022      	movs	r2, r4
    1910:	2301      	movs	r3, #1
    1912:	f7ff ff97 	bl	1844 <_ZN14USBDeviceClass4recvEmPvm>
    1916:	2801      	cmp	r0, #1
    1918:	d101      	bne.n	191e <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    191a:	7820      	ldrb	r0, [r4, #0]
	}
}
    191c:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    191e:	2001      	movs	r0, #1
    1920:	4240      	negs	r0, r0
    1922:	e7fb      	b.n	191c <_ZN14USBDeviceClass4recvEm+0x14>

00001924 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    1924:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    1926:	4b13      	ldr	r3, [pc, #76]	; (1974 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1928:	b2cc      	uxtb	r4, r1
    192a:	4a13      	ldr	r2, [pc, #76]	; (1978 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    192c:	0160      	lsls	r0, r4, #5
    192e:	0189      	lsls	r1, r1, #6
    1930:	1859      	adds	r1, r3, r1
    1932:	1813      	adds	r3, r2, r0
    1934:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1936:	6899      	ldr	r1, [r3, #8]
    1938:	4d10      	ldr	r5, [pc, #64]	; (197c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    193a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    193c:	400d      	ands	r5, r1
    193e:	2180      	movs	r1, #128	; 0x80
    1940:	0349      	lsls	r1, r1, #13
    1942:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1944:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1946:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1948:	6899      	ldr	r1, [r3, #8]
    194a:	0b89      	lsrs	r1, r1, #14
    194c:	0389      	lsls	r1, r1, #14
    194e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1950:	6811      	ldr	r1, [r2, #0]
    1952:	0163      	lsls	r3, r4, #5
    1954:	18cb      	adds	r3, r1, r3
    1956:	791e      	ldrb	r6, [r3, #4]
    1958:	4335      	orrs	r5, r6
    195a:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    195c:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    195e:	066d      	lsls	r5, r5, #25
    1960:	d5fc      	bpl.n	195c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1962:	0164      	lsls	r4, r4, #5
    1964:	1909      	adds	r1, r1, r4
    1966:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    1968:	07db      	lsls	r3, r3, #31
    196a:	d5fc      	bpl.n	1966 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    196c:	1812      	adds	r2, r2, r0
    196e:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    1970:	b2c0      	uxtb	r0, r0
}
    1972:	bd70      	pop	{r4, r5, r6, pc}
    1974:	20000474 	.word	0x20000474
    1978:	20000740 	.word	0x20000740
    197c:	f0003fff 	.word	0xf0003fff

00001980 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    1980:	b570      	push	{r4, r5, r6, lr}
    1982:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    1984:	2100      	movs	r1, #0
{
    1986:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    1988:	f7ff ffcc 	bl	1924 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    198c:	42a0      	cmp	r0, r4
    198e:	d900      	bls.n	1992 <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    1990:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    1992:	2300      	movs	r3, #0
		data[i] = buffer[i];
    1994:	4903      	ldr	r1, [pc, #12]	; (19a4 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    1996:	42a3      	cmp	r3, r4
    1998:	d003      	beq.n	19a2 <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    199a:	5c5a      	ldrb	r2, [r3, r1]
    199c:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    199e:	3301      	adds	r3, #1
    19a0:	e7f9      	b.n	1996 <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    19a2:	bd70      	pop	{r4, r5, r6, pc}
    19a4:	20000474 	.word	0x20000474

000019a8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    19a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19aa:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    19ac:	4b3a      	ldr	r3, [pc, #232]	; (1a98 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    19ae:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    19b0:	681b      	ldr	r3, [r3, #0]
{
    19b2:	000f      	movs	r7, r1
    19b4:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    19b6:	2b00      	cmp	r3, #0
    19b8:	d035      	beq.n	1a26 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    19ba:	2380      	movs	r3, #128	; 0x80
    19bc:	01db      	lsls	r3, r3, #7
    19be:	429e      	cmp	r6, r3
    19c0:	d831      	bhi.n	1a26 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    19c2:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    19c4:	4a35      	ldr	r2, [pc, #212]	; (1a9c <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    19c6:	018b      	lsls	r3, r1, #6
    19c8:	18d3      	adds	r3, r2, r3
    19ca:	9302      	str	r3, [sp, #8]
	while (len != 0)
    19cc:	2e00      	cmp	r6, #0
    19ce:	d02c      	beq.n	1a2a <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    19d0:	4b33      	ldr	r3, [pc, #204]	; (1aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	9303      	str	r3, [sp, #12]
    19d6:	23ff      	movs	r3, #255	; 0xff
    19d8:	403b      	ands	r3, r7
    19da:	001c      	movs	r4, r3
    19dc:	9300      	str	r3, [sp, #0]
    19de:	3408      	adds	r4, #8
    19e0:	9b03      	ldr	r3, [sp, #12]
    19e2:	0164      	lsls	r4, r4, #5
    19e4:	191c      	adds	r4, r3, r4
    19e6:	79a3      	ldrb	r3, [r4, #6]
    19e8:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    19ea:	d021      	beq.n	1a30 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    19ec:	4b2d      	ldr	r3, [pc, #180]	; (1aa4 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    19ee:	492e      	ldr	r1, [pc, #184]	; (1aa8 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    19f0:	6818      	ldr	r0, [r3, #0]
    19f2:	f002 f8ff 	bl	3bf4 <__udivsi3>
    19f6:	4b2d      	ldr	r3, [pc, #180]	; (1aac <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    19f8:	2117      	movs	r1, #23
    19fa:	4358      	muls	r0, r3
    19fc:	f002 f8fa 	bl	3bf4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1a00:	4b2b      	ldr	r3, [pc, #172]	; (1ab0 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1a02:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    1a04:	0792      	lsls	r2, r2, #30
    1a06:	d413      	bmi.n	1a30 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1a08:	5dda      	ldrb	r2, [r3, r7]
    1a0a:	2a00      	cmp	r2, #0
    1a0c:	d101      	bne.n	1a12 <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    1a0e:	3801      	subs	r0, #1
    1a10:	d2f7      	bcs.n	1a02 <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    1a12:	2201      	movs	r2, #1
    1a14:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1a16:	9b00      	ldr	r3, [sp, #0]
    1a18:	4a21      	ldr	r2, [pc, #132]	; (1aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
    1a1a:	015b      	lsls	r3, r3, #5
    1a1c:	18d3      	adds	r3, r2, r3
    1a1e:	699a      	ldr	r2, [r3, #24]
    1a20:	0b92      	lsrs	r2, r2, #14
    1a22:	0392      	lsls	r2, r2, #14
    1a24:	619a      	str	r2, [r3, #24]
					return -1;
    1a26:	2501      	movs	r5, #1
    1a28:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    1a2a:	0028      	movs	r0, r5
    1a2c:	b005      	add	sp, #20
    1a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1a30:	2200      	movs	r2, #0
    1a32:	4b1f      	ldr	r3, [pc, #124]	; (1ab0 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1a34:	0034      	movs	r4, r6
    1a36:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    1a38:	2e3f      	cmp	r6, #63	; 0x3f
    1a3a:	d909      	bls.n	1a50 <_ZN14USBDeviceClass4sendEmPKvm+0xa8>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    1a3c:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    1a3e:	2440      	movs	r4, #64	; 0x40
    1a40:	015a      	lsls	r2, r3, #5
    1a42:	4b17      	ldr	r3, [pc, #92]	; (1aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
    1a44:	189b      	adds	r3, r3, r2
    1a46:	2280      	movs	r2, #128	; 0x80
    1a48:	6999      	ldr	r1, [r3, #24]
    1a4a:	0612      	lsls	r2, r2, #24
    1a4c:	430a      	orrs	r2, r1
    1a4e:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1a50:	0022      	movs	r2, r4
    1a52:	9901      	ldr	r1, [sp, #4]
    1a54:	9802      	ldr	r0, [sp, #8]
    1a56:	f004 f8b3 	bl	5bc0 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1a5a:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1a5c:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1a5e:	015a      	lsls	r2, r3, #5
    1a60:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1a62:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1a64:	189b      	adds	r3, r3, r2
    1a66:	9a02      	ldr	r2, [sp, #8]
		written += length;
    1a68:	192d      	adds	r5, r5, r4
    1a6a:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1a6c:	699a      	ldr	r2, [r3, #24]
		len -= length;
    1a6e:	1b36      	subs	r6, r6, r4
    1a70:	0b92      	lsrs	r2, r2, #14
    1a72:	0392      	lsls	r2, r2, #14
    1a74:	430a      	orrs	r2, r1
    1a76:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1a78:	9b00      	ldr	r3, [sp, #0]
    1a7a:	9a03      	ldr	r2, [sp, #12]
    1a7c:	3308      	adds	r3, #8
    1a7e:	015b      	lsls	r3, r3, #5
    1a80:	18d3      	adds	r3, r2, r3
    1a82:	2202      	movs	r2, #2
    1a84:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1a86:	7959      	ldrb	r1, [r3, #5]
    1a88:	3a82      	subs	r2, #130	; 0x82
    1a8a:	430a      	orrs	r2, r1
    1a8c:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    1a8e:	9b01      	ldr	r3, [sp, #4]
    1a90:	191b      	adds	r3, r3, r4
    1a92:	9301      	str	r3, [sp, #4]
	while (len != 0)
    1a94:	e79a      	b.n	19cc <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	20000738 	.word	0x20000738
    1a9c:	200002b4 	.word	0x200002b4
    1aa0:	20000740 	.word	0x20000740
    1aa4:	20000024 	.word	0x20000024
    1aa8:	000f4240 	.word	0x000f4240
    1aac:	00011170 	.word	0x00011170
    1ab0:	200002a9 	.word	0x200002a9

00001ab4 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	000d      	movs	r5, r1
    1ab8:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1aba:	4e0d      	ldr	r6, [pc, #52]	; (1af0 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1abc:	01ab      	lsls	r3, r5, #6
    1abe:	18f6      	adds	r6, r6, r3
{
    1ac0:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1ac2:	0030      	movs	r0, r6
    1ac4:	0022      	movs	r2, r4
    1ac6:	f004 f87b 	bl	5bc0 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1aca:	b2ed      	uxtb	r5, r5
    1acc:	4909      	ldr	r1, [pc, #36]	; (1af4 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    1ace:	016d      	lsls	r5, r5, #5
    1ad0:	194d      	adds	r5, r1, r5
    1ad2:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1ad4:	69ab      	ldr	r3, [r5, #24]
    1ad6:	4a08      	ldr	r2, [pc, #32]	; (1af8 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1ad8:	0020      	movs	r0, r4
    1ada:	4013      	ands	r3, r2
    1adc:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1ade:	69ab      	ldr	r3, [r5, #24]
    1ae0:	04a2      	lsls	r2, r4, #18
    1ae2:	0b9b      	lsrs	r3, r3, #14
    1ae4:	0c92      	lsrs	r2, r2, #18
    1ae6:	039b      	lsls	r3, r3, #14
    1ae8:	4313      	orrs	r3, r2
    1aea:	61ab      	str	r3, [r5, #24]
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	200002b4 	.word	0x200002b4
    1af4:	20000740 	.word	0x20000740
    1af8:	f0003fff 	.word	0xf0003fff

00001afc <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1afe:	4b10      	ldr	r3, [pc, #64]	; (1b40 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1b00:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    1b02:	781b      	ldrb	r3, [r3, #0]
{
    1b04:	000f      	movs	r7, r1
    1b06:	0015      	movs	r5, r2
	if (_dry_run == true)
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d10c      	bne.n	1b26 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1b0c:	4b0d      	ldr	r3, [pc, #52]	; (1b44 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    1b0e:	0016      	movs	r6, r2
    1b10:	781c      	ldrb	r4, [r3, #0]
    1b12:	2c00      	cmp	r4, #0
    1b14:	d009      	beq.n	1b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1b16:	4e0c      	ldr	r6, [pc, #48]	; (1b48 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1b18:	480c      	ldr	r0, [pc, #48]	; (1b4c <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1b1a:	8834      	ldrh	r4, [r6, #0]
    1b1c:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1b1e:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1b20:	f004 f84e 	bl	5bc0 <memcpy>
		_pack_size += len;
    1b24:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    1b26:	0028      	movs	r0, r5
    1b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1b2a:	2e00      	cmp	r6, #0
    1b2c:	d0fb      	beq.n	1b26 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1b2e:	193a      	adds	r2, r7, r4
    1b30:	0033      	movs	r3, r6
    1b32:	2100      	movs	r1, #0
    1b34:	9801      	ldr	r0, [sp, #4]
    1b36:	f7ff ffbd 	bl	1ab4 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    1b3a:	1824      	adds	r4, r4, r0
		len -= sent;
    1b3c:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1b3e:	e7f4      	b.n	1b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1b40:	20000634 	.word	0x20000634
    1b44:	20000735 	.word	0x20000735
    1b48:	20000736 	.word	0x20000736
    1b4c:	20000635 	.word	0x20000635

00001b50 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    1b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b52:	000e      	movs	r6, r1
    1b54:	0015      	movs	r5, r2
		return false;
    1b56:	2700      	movs	r7, #0
	if (maxlen < 2)
    1b58:	2a01      	cmp	r2, #1
    1b5a:	d927      	bls.n	1bac <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    1b5c:	0010      	movs	r0, r2
    1b5e:	f004 f81b 	bl	5b98 <malloc>
    1b62:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1b64:	0030      	movs	r0, r6
    1b66:	f004 f909 	bl	5d7c <strlen>
    1b6a:	3001      	adds	r0, #1
    1b6c:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    1b6e:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1b70:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    1b72:	2202      	movs	r2, #2
		buffer[i] = 0;
    1b74:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    1b76:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    1b78:	4295      	cmp	r5, r2
    1b7a:	d90d      	bls.n	1b98 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    1b7c:	7831      	ldrb	r1, [r6, #0]
    1b7e:	2900      	cmp	r1, #0
    1b80:	d00a      	beq.n	1b98 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    1b82:	1c53      	adds	r3, r2, #1
    1b84:	b2db      	uxtb	r3, r3
    1b86:	3601      	adds	r6, #1
    1b88:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    1b8a:	429d      	cmp	r5, r3
    1b8c:	d003      	beq.n	1b96 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    1b8e:	3202      	adds	r2, #2
		buffer[i] = 0;
    1b90:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    1b92:	b2d2      	uxtb	r2, r2
    1b94:	e7f0      	b.n	1b78 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    1b96:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    1b98:	0021      	movs	r1, r4
    1b9a:	4805      	ldr	r0, [pc, #20]	; (1bb0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    1b9c:	f7ff ffae 	bl	1afc <_ZN14USBDeviceClass11sendControlEPKvm>
    1ba0:	1e47      	subs	r7, r0, #1
    1ba2:	41b8      	sbcs	r0, r7
    1ba4:	b2c7      	uxtb	r7, r0
	free(buffer);
    1ba6:	0020      	movs	r0, r4
    1ba8:	f004 f800 	bl	5bac <free>
}
    1bac:	0038      	movs	r0, r7
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	20000288 	.word	0x20000288

00001bb4 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1bb6:	2700      	movs	r7, #0
	_dry_run = true;
    1bb8:	2601      	movs	r6, #1
{
    1bba:	b087      	sub	sp, #28
	_dry_run = true;
    1bbc:	4b1e      	ldr	r3, [pc, #120]	; (1c38 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1bbe:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1bc0:	a902      	add	r1, sp, #8
	_dry_run = true;
    1bc2:	701e      	strb	r6, [r3, #0]
{
    1bc4:	0005      	movs	r5, r0
	uint32_t total = 0;
    1bc6:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1bc8:	f7ff fc65 	bl	1496 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1bcc:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1bce:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1bd0:	2209      	movs	r2, #9
    1bd2:	0039      	movs	r1, r7
    1bd4:	0020      	movs	r0, r4
    1bd6:	f003 fffc 	bl	5bd2 <memset>
    1bda:	2309      	movs	r3, #9
    1bdc:	7023      	strb	r3, [r4, #0]
    1bde:	2302      	movs	r3, #2
    1be0:	7063      	strb	r3, [r4, #1]
    1be2:	339e      	adds	r3, #158	; 0x9e
    1be4:	71e3      	strb	r3, [r4, #7]
    1be6:	335a      	adds	r3, #90	; 0x5a
    1be8:	7223      	strb	r3, [r4, #8]
    1bea:	9b02      	ldr	r3, [sp, #8]
    1bec:	7166      	strb	r6, [r4, #5]
    1bee:	3309      	adds	r3, #9
    1bf0:	8063      	strh	r3, [r4, #2]
    1bf2:	466b      	mov	r3, sp
    1bf4:	791b      	ldrb	r3, [r3, #4]
    1bf6:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1bf8:	4b0f      	ldr	r3, [pc, #60]	; (1c38 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1bfa:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1bfc:	9b00      	ldr	r3, [sp, #0]
    1bfe:	2b09      	cmp	r3, #9
    1c00:	d107      	bne.n	1c12 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1c02:	001a      	movs	r2, r3
    1c04:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1c06:	0028      	movs	r0, r5
    1c08:	f7ff ff78 	bl	1afc <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1c0c:	2001      	movs	r0, #1
    1c0e:	b007      	add	sp, #28
    1c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1c12:	4b0a      	ldr	r3, [pc, #40]	; (1c3c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1c14:	2209      	movs	r2, #9
		_pack_message = true;
    1c16:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1c18:	4e09      	ldr	r6, [pc, #36]	; (1c40 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1c1a:	0021      	movs	r1, r4
    1c1c:	0028      	movs	r0, r5
	total = 0;
    1c1e:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1c20:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1c22:	f7ff ff6b 	bl	1afc <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1c26:	a902      	add	r1, sp, #8
    1c28:	0028      	movs	r0, r5
    1c2a:	f7ff fc34 	bl	1496 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1c2e:	4b03      	ldr	r3, [pc, #12]	; (1c3c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1c30:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1c32:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1c34:	4903      	ldr	r1, [pc, #12]	; (1c44 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1c36:	e7e6      	b.n	1c06 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1c38:	20000634 	.word	0x20000634
    1c3c:	20000735 	.word	0x20000735
    1c40:	20000736 	.word	0x20000736
    1c44:	20000635 	.word	0x20000635

00001c48 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1c48:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1c4a:	78ce      	ldrb	r6, [r1, #3]
{
    1c4c:	b092      	sub	sp, #72	; 0x48
    1c4e:	0005      	movs	r5, r0
    1c50:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1c52:	2e02      	cmp	r6, #2
    1c54:	d10b      	bne.n	1c6e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    1c56:	798b      	ldrb	r3, [r1, #6]
    1c58:	79c9      	ldrb	r1, [r1, #7]
    1c5a:	482e      	ldr	r0, [pc, #184]	; (1d14 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    1c5c:	0209      	lsls	r1, r1, #8
    1c5e:	4319      	orrs	r1, r3
    1c60:	f7ff ffa8 	bl	1bb4 <_ZN14USBDeviceClass17sendConfigurationEm>
    1c64:	1e41      	subs	r1, r0, #1
    1c66:	4188      	sbcs	r0, r1
    1c68:	b2c0      	uxtb	r0, r0
}
    1c6a:	b012      	add	sp, #72	; 0x48
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1c6e:	f7ff f9a3 	bl	fb8 <_Z12PluggableUSBv>
    1c72:	0021      	movs	r1, r4
    1c74:	f7ff f934 	bl	ee0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1c78:	2800      	cmp	r0, #0
    1c7a:	d003      	beq.n	1c84 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    1c7c:	17c1      	asrs	r1, r0, #31
    1c7e:	1a08      	subs	r0, r1, r0
    1c80:	0fc0      	lsrs	r0, r0, #31
    1c82:	e7f2      	b.n	1c6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1c84:	2e01      	cmp	r6, #1
    1c86:	d10e      	bne.n	1ca6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    1c88:	79e2      	ldrb	r2, [r4, #7]
    1c8a:	79a3      	ldrb	r3, [r4, #6]
    1c8c:	0212      	lsls	r2, r2, #8
    1c8e:	431a      	orrs	r2, r3
    1c90:	4921      	ldr	r1, [pc, #132]	; (1d18 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    1c92:	2a11      	cmp	r2, #17
    1c94:	dc3c      	bgt.n	1d10 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    1c96:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1c98:	2a00      	cmp	r2, #0
    1c9a:	d039      	beq.n	1d10 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    1c9c:	0028      	movs	r0, r5
    1c9e:	f7ff ff2d 	bl	1afc <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1ca2:	2001      	movs	r0, #1
    1ca4:	e7e1      	b.n	1c6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1ca6:	2e03      	cmp	r6, #3
    1ca8:	d1df      	bne.n	1c6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    1caa:	78a3      	ldrb	r3, [r4, #2]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d028      	beq.n	1d02 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1cb0:	2b02      	cmp	r3, #2
    1cb2:	d108      	bne.n	1cc6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1cb4:	79e2      	ldrb	r2, [r4, #7]
    1cb6:	79a3      	ldrb	r3, [r4, #6]
    1cb8:	0212      	lsls	r2, r2, #8
    1cba:	4918      	ldr	r1, [pc, #96]	; (1d1c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1cbc:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1cbe:	0028      	movs	r0, r5
    1cc0:	f7ff ff46 	bl	1b50 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    1cc4:	e7d1      	b.n	1c6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    1cc6:	2b01      	cmp	r3, #1
    1cc8:	d105      	bne.n	1cd6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1cca:	79e2      	ldrb	r2, [r4, #7]
    1ccc:	79a3      	ldrb	r3, [r4, #6]
    1cce:	0212      	lsls	r2, r2, #8
    1cd0:	431a      	orrs	r2, r3
    1cd2:	4913      	ldr	r1, [pc, #76]	; (1d20 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1cd4:	e7f3      	b.n	1cbe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    1cd6:	2b03      	cmp	r3, #3
    1cd8:	d1c7      	bne.n	1c6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    1cda:	0001      	movs	r1, r0
    1cdc:	2241      	movs	r2, #65	; 0x41
    1cde:	a801      	add	r0, sp, #4
    1ce0:	f003 ff77 	bl	5bd2 <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    1ce4:	f7ff f968 	bl	fb8 <_Z12PluggableUSBv>
    1ce8:	a901      	add	r1, sp, #4
    1cea:	f7ff f909 	bl	f00 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    1cee:	2800      	cmp	r0, #0
    1cf0:	d005      	beq.n	1cfe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1cf2:	79e2      	ldrb	r2, [r4, #7]
    1cf4:	79a3      	ldrb	r3, [r4, #6]
    1cf6:	0212      	lsls	r2, r2, #8
    1cf8:	431a      	orrs	r2, r3
    1cfa:	a901      	add	r1, sp, #4
    1cfc:	e7df      	b.n	1cbe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    1cfe:	7803      	ldrb	r3, [r0, #0]
    1d00:	deff      	udf	#255	; 0xff
    1d02:	79e2      	ldrb	r2, [r4, #7]
    1d04:	79a3      	ldrb	r3, [r4, #6]
    1d06:	0212      	lsls	r2, r2, #8
    1d08:	431a      	orrs	r2, r3
    1d0a:	4906      	ldr	r1, [pc, #24]	; (1d24 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1d0c:	2a03      	cmp	r2, #3
    1d0e:	ddc2      	ble.n	1c96 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    1d10:	780a      	ldrb	r2, [r1, #0]
    1d12:	e7c3      	b.n	1c9c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    1d14:	20000288 	.word	0x20000288
    1d18:	00005f92 	.word	0x00005f92
    1d1c:	00005f6c 	.word	0x00005f6c
    1d20:	00005f86 	.word	0x00005f86
    1d24:	00005f82 	.word	0x00005f82

00001d28 <_ZN14USBDeviceClass7sendZlpEm>:
    1d28:	b2cb      	uxtb	r3, r1
    1d2a:	4904      	ldr	r1, [pc, #16]	; (1d3c <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    1d2c:	015b      	lsls	r3, r3, #5
    1d2e:	18c9      	adds	r1, r1, r3
    1d30:	698b      	ldr	r3, [r1, #24]
    1d32:	0b9b      	lsrs	r3, r3, #14
    1d34:	039b      	lsls	r3, r3, #14
    1d36:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    1d38:	4770      	bx	lr
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	20000740 	.word	0x20000740

00001d40 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1d42:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    1d44:	7848      	ldrb	r0, [r1, #1]
{
    1d46:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    1d48:	280b      	cmp	r0, #11
    1d4a:	d811      	bhi.n	1d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1d4c:	f001 ff48 	bl	3be0 <__gnu_thumb1_case_uqi>
    1d50:	2e101d06 	.word	0x2e101d06
    1d54:	64484310 	.word	0x64484310
    1d58:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1d5c:	7809      	ldrb	r1, [r1, #0]
    1d5e:	aa01      	add	r2, sp, #4
    1d60:	2900      	cmp	r1, #0
    1d62:	d107      	bne.n	1d74 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1d64:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1d66:	7011      	strb	r1, [r2, #0]
    1d68:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1d6a:	0028      	movs	r0, r5
    1d6c:	f7ff fea2 	bl	1ab4 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1d70:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    1d72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    1d74:	2300      	movs	r3, #0
    1d76:	7013      	strb	r3, [r2, #0]
    1d78:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1d7a:	4b28      	ldr	r3, [pc, #160]	; (1e1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	2b01      	cmp	r3, #1
    1d80:	d100      	bne.n	1d84 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1d82:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1d84:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1d86:	2100      	movs	r1, #0
    1d88:	e7ef      	b.n	1d6a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1d8a:	788a      	ldrb	r2, [r1, #2]
    1d8c:	2300      	movs	r3, #0
    1d8e:	2a01      	cmp	r2, #1
    1d90:	d104      	bne.n	1d9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1d92:	aa01      	add	r2, sp, #4
    1d94:	7013      	strb	r3, [r2, #0]
    1d96:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1d98:	4b21      	ldr	r3, [pc, #132]	; (1e20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    1d9a:	e7ef      	b.n	1d7c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1d9c:	4a1f      	ldr	r2, [pc, #124]	; (1e1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1d9e:	7013      	strb	r3, [r2, #0]
    1da0:	4a20      	ldr	r2, [pc, #128]	; (1e24 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1da2:	6993      	ldr	r3, [r2, #24]
    1da4:	0b9b      	lsrs	r3, r3, #14
    1da6:	039b      	lsls	r3, r3, #14
    1da8:	6193      	str	r3, [r2, #24]
    1daa:	e7e1      	b.n	1d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1dac:	788c      	ldrb	r4, [r1, #2]
    1dae:	2c01      	cmp	r4, #1
    1db0:	d106      	bne.n	1dc0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1db2:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1db4:	4b1a      	ldr	r3, [pc, #104]	; (1e20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    1db6:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1db8:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1dba:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1dbc:	0023      	movs	r3, r4
    1dbe:	e7d4      	b.n	1d6a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1dc0:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    1dc2:	2c00      	cmp	r4, #0
    1dc4:	d1d5      	bne.n	1d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    1dc6:	4b15      	ldr	r3, [pc, #84]	; (1e1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1dc8:	4a16      	ldr	r2, [pc, #88]	; (1e24 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1dca:	7018      	strb	r0, [r3, #0]
    1dcc:	6993      	ldr	r3, [r2, #24]
    1dce:	0b9b      	lsrs	r3, r3, #14
    1dd0:	039b      	lsls	r3, r3, #14
    1dd2:	6193      	str	r3, [r2, #24]
			return true;
    1dd4:	e7cd      	b.n	1d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1dd6:	7889      	ldrb	r1, [r1, #2]
    1dd8:	0028      	movs	r0, r5
    1dda:	f7ff fc21 	bl	1620 <_ZN14USBDeviceClass10setAddressEm>
    1dde:	e7c7      	b.n	1d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1de0:	0028      	movs	r0, r5
    1de2:	f7ff ff31 	bl	1c48 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1de6:	e7c4      	b.n	1d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1de8:	2301      	movs	r3, #1
    1dea:	4a0f      	ldr	r2, [pc, #60]	; (1e28 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    1dec:	e7cb      	b.n	1d86 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1dee:	780b      	ldrb	r3, [r1, #0]
			return false;
    1df0:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1df2:	06db      	lsls	r3, r3, #27
    1df4:	d1bd      	bne.n	1d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1df6:	0028      	movs	r0, r5
    1df8:	f7ff fcca 	bl	1790 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    1dfc:	78a2      	ldrb	r2, [r4, #2]
    1dfe:	4b0a      	ldr	r3, [pc, #40]	; (1e28 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    1e00:	480a      	ldr	r0, [pc, #40]	; (1e2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    1e02:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    1e04:	f7ff f820 	bl	e48 <_ZN7Serial_15enableInterruptEv>
    1e08:	e7ca      	b.n	1da0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    1e0a:	2301      	movs	r3, #1
    1e0c:	4a08      	ldr	r2, [pc, #32]	; (1e30 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1e0e:	e7ba      	b.n	1d86 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1e10:	788a      	ldrb	r2, [r1, #2]
    1e12:	4b07      	ldr	r3, [pc, #28]	; (1e30 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1e14:	601a      	str	r2, [r3, #0]
    1e16:	e7c3      	b.n	1da0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1e18:	2000      	movs	r0, #0
    1e1a:	e7aa      	b.n	1d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1e1c:	200002a8 	.word	0x200002a8
    1e20:	200002b0 	.word	0x200002b0
    1e24:	20000740 	.word	0x20000740
    1e28:	20000738 	.word	0x20000738
    1e2c:	20000220 	.word	0x20000220
    1e30:	2000073c 	.word	0x2000073c

00001e34 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    1e34:	4b3b      	ldr	r3, [pc, #236]	; (1f24 <_ZN14USBDeviceClass10ISRHandlerEv+0xf0>)
{
    1e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1e38:	781e      	ldrb	r6, [r3, #0]
{
    1e3a:	0005      	movs	r5, r0
	if (_pack_message == true) {
    1e3c:	2e00      	cmp	r6, #0
    1e3e:	d161      	bne.n	1f04 <_ZN14USBDeviceClass10ISRHandlerEv+0xd0>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1e40:	4c39      	ldr	r4, [pc, #228]	; (1f28 <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
    1e42:	6823      	ldr	r3, [r4, #0]
    1e44:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1e46:	0712      	lsls	r2, r2, #28
    1e48:	d50d      	bpl.n	1e66 <_ZN14USBDeviceClass10ISRHandlerEv+0x32>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1e4a:	2208      	movs	r2, #8
    1e4c:	0031      	movs	r1, r6
    1e4e:	839a      	strh	r2, [r3, #28]
    1e50:	0030      	movs	r0, r6
    1e52:	f7ff f8c9 	bl	fe8 <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1e56:	2210      	movs	r2, #16
    1e58:	6823      	ldr	r3, [r4, #0]
    1e5a:	33ff      	adds	r3, #255	; 0xff
    1e5c:	7a99      	ldrb	r1, [r3, #10]
    1e5e:	430a      	orrs	r2, r1
    1e60:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1e62:	4b32      	ldr	r3, [pc, #200]	; (1f2c <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    1e64:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1e66:	6823      	ldr	r3, [r4, #0]
    1e68:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1e6a:	0752      	lsls	r2, r2, #29
    1e6c:	d501      	bpl.n	1e72 <_ZN14USBDeviceClass10ISRHandlerEv+0x3e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1e6e:	2204      	movs	r2, #4
    1e70:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1e72:	33ff      	adds	r3, #255	; 0xff
    1e74:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    1e76:	0692      	lsls	r2, r2, #26
    1e78:	d503      	bpl.n	1e82 <_ZN14USBDeviceClass10ISRHandlerEv+0x4e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1e7a:	2220      	movs	r2, #32
    1e7c:	7a59      	ldrb	r1, [r3, #9]
    1e7e:	430a      	orrs	r2, r1
    1e80:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1e82:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1e84:	06d2      	lsls	r2, r2, #27
    1e86:	d525      	bpl.n	1ed4 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1e88:	4668      	mov	r0, sp
    1e8a:	4a29      	ldr	r2, [pc, #164]	; (1f30 <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    1e8c:	4669      	mov	r1, sp
    1e8e:	cac0      	ldmia	r2!, {r6, r7}
    1e90:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1e92:	68a2      	ldr	r2, [r4, #8]
    1e94:	0b92      	lsrs	r2, r2, #14
    1e96:	0392      	lsls	r2, r2, #14
    1e98:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1e9a:	2240      	movs	r2, #64	; 0x40
    1e9c:	7958      	ldrb	r0, [r3, #5]
    1e9e:	4302      	orrs	r2, r0
    1ea0:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1ea2:	2360      	movs	r3, #96	; 0x60
    1ea4:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    1ea6:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1ea8:	421a      	tst	r2, r3
    1eaa:	d12c      	bne.n	1f06 <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
			ok = handleStandardSetup(setup);
    1eac:	f7ff ff48 	bl	1d40 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1eb0:	2800      	cmp	r0, #0
    1eb2:	d02b      	beq.n	1f0c <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1eb4:	2280      	movs	r2, #128	; 0x80
    1eb6:	6823      	ldr	r3, [r4, #0]
    1eb8:	4252      	negs	r2, r2
    1eba:	33ff      	adds	r3, #255	; 0xff
    1ebc:	7999      	ldrb	r1, [r3, #6]
    1ebe:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1ec0:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1ec2:	6823      	ldr	r3, [r4, #0]
    1ec4:	33ff      	adds	r3, #255	; 0xff
    1ec6:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1ec8:	0652      	lsls	r2, r2, #25
    1eca:	d503      	bpl.n	1ed4 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1ecc:	2240      	movs	r2, #64	; 0x40
    1ece:	7a59      	ldrb	r1, [r3, #9]
    1ed0:	430a      	orrs	r2, r1
    1ed2:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1ed4:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1ed6:	2501      	movs	r5, #1
    1ed8:	6823      	ldr	r3, [r4, #0]
    1eda:	33ff      	adds	r3, #255	; 0xff
    1edc:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1ede:	002f      	movs	r7, r5
    1ee0:	6823      	ldr	r3, [r4, #0]
    1ee2:	3708      	adds	r7, #8
    1ee4:	017f      	lsls	r7, r7, #5
    1ee6:	19db      	adds	r3, r3, r7
    1ee8:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1eea:	2b00      	cmp	r3, #0
    1eec:	d007      	beq.n	1efe <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
			if (epHandlers[ep]) {
    1eee:	4b11      	ldr	r3, [pc, #68]	; (1f34 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
    1ef0:	00aa      	lsls	r2, r5, #2
    1ef2:	58d0      	ldr	r0, [r2, r3]
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d00c      	beq.n	1f12 <_ZN14USBDeviceClass10ISRHandlerEv+0xde>
				epHandlers[ep]->handleEndpoint();
    1ef8:	6803      	ldr	r3, [r0, #0]
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1efe:	3501      	adds	r5, #1
    1f00:	2d08      	cmp	r5, #8
    1f02:	d1ec      	bne.n	1ede <_ZN14USBDeviceClass10ISRHandlerEv+0xaa>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    1f04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    1f06:	f7ff fbaf 	bl	1668 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1f0a:	e7d1      	b.n	1eb0 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1f0c:	2220      	movs	r2, #32
    1f0e:	4b0a      	ldr	r3, [pc, #40]	; (1f38 <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    1f10:	e7d6      	b.n	1ec0 <_ZN14USBDeviceClass10ISRHandlerEv+0x8c>
				PluggableUSB().handleEndpoint(ep);
    1f12:	f7ff f851 	bl	fb8 <_Z12PluggableUSBv>
    1f16:	0029      	movs	r1, r5
    1f18:	f7ff f815 	bl	f46 <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1f1c:	6823      	ldr	r3, [r4, #0]
    1f1e:	19df      	adds	r7, r3, r7
    1f20:	71fe      	strb	r6, [r7, #7]
    1f22:	e7ec      	b.n	1efe <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
    1f24:	20000735 	.word	0x20000735
    1f28:	20000740 	.word	0x20000740
    1f2c:	20000738 	.word	0x20000738
    1f30:	20000474 	.word	0x20000474
    1f34:	2000028c 	.word	0x2000028c
    1f38:	410050ff 	.word	0x410050ff

00001f3c <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1f3c:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1f3e:	4802      	ldr	r0, [pc, #8]	; (1f48 <UDD_Handler+0xc>)
    1f40:	f7ff ff78 	bl	1e34 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1f44:	bd10      	pop	{r4, pc}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	20000288 	.word	0x20000288

00001f4c <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1f4c:	4a01      	ldr	r2, [pc, #4]	; (1f54 <_GLOBAL__sub_I_usbd+0x8>)
    1f4e:	4b02      	ldr	r3, [pc, #8]	; (1f58 <_GLOBAL__sub_I_usbd+0xc>)
    1f50:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1f52:	4770      	bx	lr
    1f54:	41005000 	.word	0x41005000
    1f58:	20000740 	.word	0x20000740

00001f5c <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1f5c:	21fa      	movs	r1, #250	; 0xfa
    1f5e:	4b31      	ldr	r3, [pc, #196]	; (2024 <init+0xc8>)
{
    1f60:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1f62:	6818      	ldr	r0, [r3, #0]
    1f64:	0089      	lsls	r1, r1, #2
    1f66:	f001 fe45 	bl	3bf4 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1f6a:	4b2f      	ldr	r3, [pc, #188]	; (2028 <init+0xcc>)
    1f6c:	3801      	subs	r0, #1
    1f6e:	4298      	cmp	r0, r3
    1f70:	d856      	bhi.n	2020 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1f72:	492e      	ldr	r1, [pc, #184]	; (202c <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f74:	4a2e      	ldr	r2, [pc, #184]	; (2030 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1f76:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f78:	20c0      	movs	r0, #192	; 0xc0
    1f7a:	6a13      	ldr	r3, [r2, #32]
    1f7c:	0600      	lsls	r0, r0, #24
    1f7e:	021b      	lsls	r3, r3, #8
    1f80:	0a1b      	lsrs	r3, r3, #8
    1f82:	4303      	orrs	r3, r0
    1f84:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1f86:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1f88:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1f8a:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1f8c:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f8e:	2180      	movs	r1, #128	; 0x80
    1f90:	6a13      	ldr	r3, [r2, #32]
    1f92:	0609      	lsls	r1, r1, #24
    1f94:	021b      	lsls	r3, r3, #8
    1f96:	0a1b      	lsrs	r3, r3, #8
    1f98:	430b      	orrs	r3, r1
    1f9a:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1f9c:	22fc      	movs	r2, #252	; 0xfc
    1f9e:	4b25      	ldr	r3, [pc, #148]	; (2034 <init+0xd8>)
    1fa0:	6a19      	ldr	r1, [r3, #32]
    1fa2:	430a      	orrs	r2, r1
    1fa4:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1fa6:	22fc      	movs	r2, #252	; 0xfc
    1fa8:	6a19      	ldr	r1, [r3, #32]
    1faa:	0192      	lsls	r2, r2, #6
    1fac:	430a      	orrs	r2, r1
    1fae:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1fb0:	22a0      	movs	r2, #160	; 0xa0
    1fb2:	6a19      	ldr	r1, [r3, #32]
    1fb4:	02d2      	lsls	r2, r2, #11
    1fb6:	430a      	orrs	r2, r1
    1fb8:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1fba:	0020      	movs	r0, r4
    1fbc:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1fbe:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1fc0:	f000 f876 	bl	20b0 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1fc4:	2c0f      	cmp	r4, #15
    1fc6:	d1f8      	bne.n	1fba <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1fc8:	4b1b      	ldr	r3, [pc, #108]	; (2038 <init+0xdc>)
    1fca:	001c      	movs	r4, r3
    1fcc:	785a      	ldrb	r2, [r3, #1]
    1fce:	b252      	sxtb	r2, r2
    1fd0:	2a00      	cmp	r2, #0
    1fd2:	dbfb      	blt.n	1fcc <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1fd4:	4a19      	ldr	r2, [pc, #100]	; (203c <init+0xe0>)
    1fd6:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1fd8:	4b19      	ldr	r3, [pc, #100]	; (2040 <init+0xe4>)
    1fda:	001a      	movs	r2, r3
    1fdc:	7e59      	ldrb	r1, [r3, #25]
    1fde:	09c9      	lsrs	r1, r1, #7
    1fe0:	2901      	cmp	r1, #1
    1fe2:	d0fb      	beq.n	1fdc <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1fe4:	21e4      	movs	r1, #228	; 0xe4
    1fe6:	00c9      	lsls	r1, r1, #3
    1fe8:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1fea:	213f      	movs	r1, #63	; 0x3f
    1fec:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1fee:	7e53      	ldrb	r3, [r2, #25]
    1ff0:	09db      	lsrs	r3, r3, #7
    1ff2:	2b01      	cmp	r3, #1
    1ff4:	d0fb      	beq.n	1fee <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1ff6:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1ff8:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1ffa:	015b      	lsls	r3, r3, #5
    1ffc:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1ffe:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    2000:	f000 f824 	bl	204c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    2004:	7863      	ldrb	r3, [r4, #1]
    2006:	b25b      	sxtb	r3, r3
    2008:	2b00      	cmp	r3, #0
    200a:	dbfb      	blt.n	2004 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    200c:	4b0d      	ldr	r3, [pc, #52]	; (2044 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    200e:	4a0e      	ldr	r2, [pc, #56]	; (2048 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    2010:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    2012:	79d3      	ldrb	r3, [r2, #7]
    2014:	09db      	lsrs	r3, r3, #7
    2016:	2b01      	cmp	r3, #1
    2018:	d0fb      	beq.n	2012 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    201a:	2341      	movs	r3, #65	; 0x41
    201c:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    201e:	bd10      	pop	{r4, pc}
    2020:	e7fe      	b.n	2020 <init+0xc4>
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	20000024 	.word	0x20000024
    2028:	00ffffff 	.word	0x00ffffff
    202c:	e000e010 	.word	0xe000e010
    2030:	e000ed00 	.word	0xe000ed00
    2034:	40000400 	.word	0x40000400
    2038:	40000c00 	.word	0x40000c00
    203c:	0000401e 	.word	0x0000401e
    2040:	42004000 	.word	0x42004000
    2044:	00004021 	.word	0x00004021
    2048:	42004800 	.word	0x42004800

0000204c <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    204c:	4a16      	ldr	r2, [pc, #88]	; (20a8 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    204e:	b500      	push	{lr}
    2050:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    2052:	7e51      	ldrb	r1, [r2, #25]
    2054:	09c9      	lsrs	r1, r1, #7
    2056:	2901      	cmp	r1, #1
    2058:	d0fb      	beq.n	2052 <analogReference+0x6>
  syncADC();
  switch (mode)
    205a:	3801      	subs	r0, #1
    205c:	2804      	cmp	r0, #4
    205e:	d816      	bhi.n	208e <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    2060:	6919      	ldr	r1, [r3, #16]
    2062:	4a12      	ldr	r2, [pc, #72]	; (20ac <analogReference+0x60>)
    2064:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    2066:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    2068:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    206a:	785a      	ldrb	r2, [r3, #1]
    206c:	438a      	bics	r2, r1
  switch (mode)
    206e:	f001 fdb7 	bl	3be0 <__gnu_thumb1_case_uqi>
    2072:	0803      	.short	0x0803
    2074:	0b06      	.short	0x0b06
    2076:	03          	.byte	0x03
    2077:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    2078:	0011      	movs	r1, r2
    207a:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    207c:	430a      	orrs	r2, r1
    207e:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    2080:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    2082:	0011      	movs	r1, r2
    2084:	2203      	movs	r2, #3
    2086:	e7f9      	b.n	207c <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    2088:	0011      	movs	r1, r2
    208a:	2202      	movs	r2, #2
    208c:	e7f6      	b.n	207c <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    208e:	23f0      	movs	r3, #240	; 0xf0
    2090:	6911      	ldr	r1, [r2, #16]
    2092:	051b      	lsls	r3, r3, #20
    2094:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    2096:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    2098:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    209a:	7853      	ldrb	r3, [r2, #1]
    209c:	438b      	bics	r3, r1
    209e:	0019      	movs	r1, r3
    20a0:	2302      	movs	r3, #2
    20a2:	430b      	orrs	r3, r1
    20a4:	7053      	strb	r3, [r2, #1]
}
    20a6:	e7eb      	b.n	2080 <analogReference+0x34>
    20a8:	42004000 	.word	0x42004000
    20ac:	f0ffffff 	.word	0xf0ffffff

000020b0 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20b0:	2318      	movs	r3, #24
{
    20b2:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20b4:	001d      	movs	r5, r3
{
    20b6:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20b8:	4345      	muls	r5, r0
    20ba:	2008      	movs	r0, #8
    20bc:	4a20      	ldr	r2, [pc, #128]	; (2140 <pinMode+0x90>)
    20be:	1955      	adds	r5, r2, r5
    20c0:	5628      	ldrsb	r0, [r5, r0]
    20c2:	3001      	adds	r0, #1
    20c4:	d014      	beq.n	20f0 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    20c6:	2903      	cmp	r1, #3
    20c8:	d812      	bhi.n	20f0 <pinMode+0x40>
    20ca:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    20cc:	4363      	muls	r3, r4
    20ce:	56d1      	ldrsb	r1, [r2, r3]
    20d0:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    20d2:	f001 fd85 	bl	3be0 <__gnu_thumb1_case_uqi>
    20d6:	2802      	.short	0x2802
    20d8:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    20da:	6858      	ldr	r0, [r3, #4]
    20dc:	01cb      	lsls	r3, r1, #7
    20de:	2102      	movs	r1, #2
    20e0:	4a18      	ldr	r2, [pc, #96]	; (2144 <pinMode+0x94>)
    20e2:	189b      	adds	r3, r3, r2
    20e4:	181a      	adds	r2, r3, r0
    20e6:	3240      	adds	r2, #64	; 0x40
    20e8:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    20ea:	2201      	movs	r2, #1
    20ec:	4082      	lsls	r2, r0
    20ee:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    20f0:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    20f2:	6858      	ldr	r0, [r3, #4]
    20f4:	01cb      	lsls	r3, r1, #7
    20f6:	2106      	movs	r1, #6
    20f8:	4a12      	ldr	r2, [pc, #72]	; (2144 <pinMode+0x94>)
    20fa:	189b      	adds	r3, r3, r2
    20fc:	181a      	adds	r2, r3, r0
    20fe:	3240      	adds	r2, #64	; 0x40
    2100:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2102:	2201      	movs	r2, #1
    2104:	4082      	lsls	r2, r0
    2106:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2108:	619a      	str	r2, [r3, #24]
    break ;
    210a:	e7f1      	b.n	20f0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    210c:	6858      	ldr	r0, [r3, #4]
    210e:	01cb      	lsls	r3, r1, #7
    2110:	2106      	movs	r1, #6
    2112:	4a0c      	ldr	r2, [pc, #48]	; (2144 <pinMode+0x94>)
    2114:	189b      	adds	r3, r3, r2
    2116:	181a      	adds	r2, r3, r0
    2118:	3240      	adds	r2, #64	; 0x40
    211a:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    211c:	2201      	movs	r2, #1
    211e:	4082      	lsls	r2, r0
    2120:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2122:	615a      	str	r2, [r3, #20]
    break ;
    2124:	e7e4      	b.n	20f0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    2126:	6858      	ldr	r0, [r3, #4]
    2128:	01cb      	lsls	r3, r1, #7
    212a:	2102      	movs	r1, #2
    212c:	4a05      	ldr	r2, [pc, #20]	; (2144 <pinMode+0x94>)
    212e:	189b      	adds	r3, r3, r2
    2130:	181a      	adds	r2, r3, r0
    2132:	3240      	adds	r2, #64	; 0x40
    2134:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2136:	2201      	movs	r2, #1
    2138:	4082      	lsls	r2, r0
    213a:	609a      	str	r2, [r3, #8]
    break ;
    213c:	e7d8      	b.n	20f0 <pinMode+0x40>
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	0000600c 	.word	0x0000600c
    2144:	41004400 	.word	0x41004400

00002148 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2148:	2318      	movs	r3, #24
{
    214a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    214c:	2408      	movs	r4, #8
    214e:	4358      	muls	r0, r3
    2150:	4a11      	ldr	r2, [pc, #68]	; (2198 <digitalWrite+0x50>)
    2152:	1813      	adds	r3, r2, r0
    2154:	571c      	ldrsb	r4, [r3, r4]
    2156:	3401      	adds	r4, #1
    2158:	d01b      	beq.n	2192 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    215a:	2601      	movs	r6, #1
    215c:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    215e:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    2160:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    2162:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    2164:	4a0d      	ldr	r2, [pc, #52]	; (219c <digitalWrite+0x54>)
    2166:	01db      	lsls	r3, r3, #7
    2168:	189a      	adds	r2, r3, r2
    216a:	6890      	ldr	r0, [r2, #8]
    216c:	4228      	tst	r0, r5
    216e:	d10b      	bne.n	2188 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    2170:	000c      	movs	r4, r1
    2172:	1e60      	subs	r0, r4, #1
    2174:	4184      	sbcs	r4, r0
    2176:	19d2      	adds	r2, r2, r7
    2178:	3240      	adds	r2, #64	; 0x40
    217a:	7810      	ldrb	r0, [r2, #0]
    217c:	4034      	ands	r4, r6
    217e:	3603      	adds	r6, #3
    2180:	00a4      	lsls	r4, r4, #2
    2182:	43b0      	bics	r0, r6
    2184:	4320      	orrs	r0, r4
    2186:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    2188:	4a04      	ldr	r2, [pc, #16]	; (219c <digitalWrite+0x54>)
    218a:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    218c:	2900      	cmp	r1, #0
    218e:	d101      	bne.n	2194 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    2190:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    2194:	619d      	str	r5, [r3, #24]
    break ;
    2196:	e7fc      	b.n	2192 <digitalWrite+0x4a>
    2198:	0000600c 	.word	0x0000600c
    219c:	41004400 	.word	0x41004400

000021a0 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    21a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21a2:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    21a4:	2018      	movs	r0, #24
    21a6:	4358      	muls	r0, r3
    21a8:	4a2a      	ldr	r2, [pc, #168]	; (2254 <pinPeripheral+0xb4>)
    21aa:	1810      	adds	r0, r2, r0
    21ac:	7a00      	ldrb	r0, [r0, #8]
    21ae:	b240      	sxtb	r0, r0
  {
    return -1 ;
    21b0:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    21b2:	3001      	adds	r0, #1
    21b4:	d013      	beq.n	21de <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    21b6:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    21b8:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    21ba:	280c      	cmp	r0, #12
    21bc:	d80f      	bhi.n	21de <pinPeripheral+0x3e>
    21be:	f001 fd0f 	bl	3be0 <__gnu_thumb1_case_uqi>
    21c2:	1c45      	.short	0x1c45
    21c4:	1c1c1c1c 	.word	0x1c1c1c1c
    21c8:	071c1c1c 	.word	0x071c1c1c
    21cc:	0707      	.short	0x0707
    21ce:	07          	.byte	0x07
    21cf:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    21d0:	2909      	cmp	r1, #9
    21d2:	d106      	bne.n	21e2 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    21d4:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    21d6:	0018      	movs	r0, r3
    21d8:	f7ff ff6a 	bl	20b0 <pinMode>
  return 0l ;
    21dc:	2400      	movs	r4, #0
}
    21de:	0020      	movs	r0, r4
    21e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    21e2:	290a      	cmp	r1, #10
    21e4:	d101      	bne.n	21ea <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    21e6:	3908      	subs	r1, #8
    21e8:	e7f5      	b.n	21d6 <pinPeripheral+0x36>
  return 0l ;
    21ea:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    21ec:	290b      	cmp	r1, #11
    21ee:	d1f6      	bne.n	21de <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    21f0:	390a      	subs	r1, #10
    21f2:	0018      	movs	r0, r3
    21f4:	f7ff ff5c 	bl	20b0 <pinMode>
    21f8:	e7f1      	b.n	21de <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    21fa:	2018      	movs	r0, #24
    21fc:	4343      	muls	r3, r0
    21fe:	18d0      	adds	r0, r2, r3
    2200:	6846      	ldr	r6, [r0, #4]
    2202:	2501      	movs	r5, #1
    2204:	0034      	movs	r4, r6
    2206:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2208:	4813      	ldr	r0, [pc, #76]	; (2258 <pinPeripheral+0xb8>)
    220a:	01d2      	lsls	r2, r2, #7
    220c:	1812      	adds	r2, r2, r0
    220e:	0873      	lsrs	r3, r6, #1
    2210:	18d3      	adds	r3, r2, r3
    2212:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2214:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2216:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2218:	2c00      	cmp	r4, #0
    221a:	d00b      	beq.n	2234 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    221c:	240f      	movs	r4, #15
    221e:	0109      	lsls	r1, r1, #4
    2220:	4020      	ands	r0, r4
    2222:	4301      	orrs	r1, r0
    2224:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2226:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2228:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    222a:	3240      	adds	r2, #64	; 0x40
    222c:	7813      	ldrb	r3, [r2, #0]
    222e:	431d      	orrs	r5, r3
    2230:	7015      	strb	r5, [r2, #0]
    2232:	e7d3      	b.n	21dc <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2234:	270f      	movs	r7, #15
    2236:	43b8      	bics	r0, r7
    2238:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    223a:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    223c:	b2c9      	uxtb	r1, r1
    223e:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    2240:	0013      	movs	r3, r2
    2242:	3340      	adds	r3, #64	; 0x40
    2244:	781a      	ldrb	r2, [r3, #0]
    2246:	4315      	orrs	r5, r2
    2248:	701d      	strb	r5, [r3, #0]
    224a:	e7c8      	b.n	21de <pinPeripheral+0x3e>
      return -1l ;
    224c:	2401      	movs	r4, #1
    224e:	4264      	negs	r4, r4
    2250:	e7c5      	b.n	21de <pinPeripheral+0x3e>
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	0000600c 	.word	0x0000600c
    2258:	41004400 	.word	0x41004400

0000225c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    225c:	b510      	push	{r4, lr}
    225e:	0004      	movs	r4, r0
{
	if (buffer) free(buffer);
    2260:	6800      	ldr	r0, [r0, #0]
    2262:	2800      	cmp	r0, #0
    2264:	d001      	beq.n	226a <_ZN6StringD1Ev+0xe>
    2266:	f003 fca1 	bl	5bac <free>
}
    226a:	0020      	movs	r0, r4
    226c:	bd10      	pop	{r4, pc}

0000226e <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    226e:	b510      	push	{r4, lr}
    2270:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    2272:	6800      	ldr	r0, [r0, #0]
    2274:	2800      	cmp	r0, #0
    2276:	d001      	beq.n	227c <_ZN6String10invalidateEv+0xe>
    2278:	f003 fc98 	bl	5bac <free>
	buffer = NULL;
    227c:	2300      	movs	r3, #0
    227e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    2280:	60a3      	str	r3, [r4, #8]
    2282:	6063      	str	r3, [r4, #4]
}
    2284:	bd10      	pop	{r4, pc}

00002286 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2286:	b570      	push	{r4, r5, r6, lr}
    2288:	0004      	movs	r4, r0
    228a:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    228c:	6800      	ldr	r0, [r0, #0]
    228e:	3101      	adds	r1, #1
    2290:	f003 fd50 	bl	5d34 <realloc>
    2294:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    2296:	d001      	beq.n	229c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    2298:	2001      	movs	r0, #1
		capacity = maxStrLen;
    229a:	c428      	stmia	r4!, {r3, r5}
	}
	return 0;
}
    229c:	bd70      	pop	{r4, r5, r6, pc}

0000229e <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    229e:	6803      	ldr	r3, [r0, #0]
{
    22a0:	b510      	push	{r4, lr}
    22a2:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    22a4:	2b00      	cmp	r3, #0
    22a6:	d004      	beq.n	22b2 <_ZN6String7reserveEj+0x14>
    22a8:	6843      	ldr	r3, [r0, #4]
    22aa:	428b      	cmp	r3, r1
    22ac:	d301      	bcc.n	22b2 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    22ae:	2001      	movs	r0, #1
}
    22b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    22b2:	0020      	movs	r0, r4
    22b4:	f7ff ffe7 	bl	2286 <_ZN6String12changeBufferEj>
    22b8:	2800      	cmp	r0, #0
    22ba:	d0f9      	beq.n	22b0 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    22bc:	68a3      	ldr	r3, [r4, #8]
    22be:	2b00      	cmp	r3, #0
    22c0:	d1f5      	bne.n	22ae <_ZN6String7reserveEj+0x10>
    22c2:	6822      	ldr	r2, [r4, #0]
    22c4:	7013      	strb	r3, [r2, #0]
    22c6:	e7f2      	b.n	22ae <_ZN6String7reserveEj+0x10>

000022c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    22c8:	b570      	push	{r4, r5, r6, lr}
    22ca:	000e      	movs	r6, r1
	if (!reserve(length)) {
    22cc:	0011      	movs	r1, r2
{
    22ce:	0004      	movs	r4, r0
    22d0:	0015      	movs	r5, r2
	if (!reserve(length)) {
    22d2:	f7ff ffe4 	bl	229e <_ZN6String7reserveEj>
    22d6:	2800      	cmp	r0, #0
    22d8:	d104      	bne.n	22e4 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    22da:	0020      	movs	r0, r4
    22dc:	f7ff ffc7 	bl	226e <_ZN6String10invalidateEv>
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    22e0:	0020      	movs	r0, r4
    22e2:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    22e4:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    22e6:	0031      	movs	r1, r6
    22e8:	6820      	ldr	r0, [r4, #0]
    22ea:	f003 fd3f 	bl	5d6c <strcpy>
	return *this;
    22ee:	e7f7      	b.n	22e0 <_ZN6String4copyEPKcj+0x18>

000022f0 <_ZN6StringC1EPKc>:
	buffer = NULL;
    22f0:	2300      	movs	r3, #0
String::String(const char *cstr)
    22f2:	b570      	push	{r4, r5, r6, lr}
    22f4:	0004      	movs	r4, r0
    22f6:	000d      	movs	r5, r1
	buffer = NULL;
    22f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
    22fa:	6043      	str	r3, [r0, #4]
	len = 0;
    22fc:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    22fe:	4299      	cmp	r1, r3
    2300:	d007      	beq.n	2312 <_ZN6StringC1EPKc+0x22>
    2302:	0008      	movs	r0, r1
    2304:	f003 fd3a 	bl	5d7c <strlen>
    2308:	0029      	movs	r1, r5
    230a:	0002      	movs	r2, r0
    230c:	0020      	movs	r0, r4
    230e:	f7ff ffdb 	bl	22c8 <_ZN6String4copyEPKcj>
}
    2312:	0020      	movs	r0, r4
    2314:	bd70      	pop	{r4, r5, r6, pc}

00002316 <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    2316:	b570      	push	{r4, r5, r6, lr}
    2318:	0005      	movs	r5, r0
	if (buffer) {
    231a:	6800      	ldr	r0, [r0, #0]
{
    231c:	000c      	movs	r4, r1
	if (buffer) {
    231e:	2800      	cmp	r0, #0
    2320:	d004      	beq.n	232c <_ZN6String4moveERS_+0x16>
    2322:	6809      	ldr	r1, [r1, #0]
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    2324:	2900      	cmp	r1, #0
    2326:	d10b      	bne.n	2340 <_ZN6String4moveERS_+0x2a>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    2328:	f003 fc40 	bl	5bac <free>
		}
	}
	buffer = rhs.buffer;
    232c:	6823      	ldr	r3, [r4, #0]
    232e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    2330:	6863      	ldr	r3, [r4, #4]
    2332:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    2334:	68a3      	ldr	r3, [r4, #8]
    2336:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    2338:	2300      	movs	r3, #0
    233a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    233c:	6063      	str	r3, [r4, #4]
    233e:	e008      	b.n	2352 <_ZN6String4moveERS_+0x3c>
		if (rhs && capacity >= rhs.len) {
    2340:	686b      	ldr	r3, [r5, #4]
    2342:	68a2      	ldr	r2, [r4, #8]
    2344:	4293      	cmp	r3, r2
    2346:	d3ef      	bcc.n	2328 <_ZN6String4moveERS_+0x12>
			strcpy(buffer, rhs.buffer);
    2348:	f003 fd10 	bl	5d6c <strcpy>
			len = rhs.len;
    234c:	68a3      	ldr	r3, [r4, #8]
    234e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
    2350:	2300      	movs	r3, #0
	rhs.len = 0;
    2352:	60a3      	str	r3, [r4, #8]
}
    2354:	bd70      	pop	{r4, r5, r6, pc}

00002356 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    2356:	b510      	push	{r4, lr}
    2358:	0004      	movs	r4, r0
	if (this != &rval) move(rval);
    235a:	4288      	cmp	r0, r1
    235c:	d001      	beq.n	2362 <_ZN6StringaSEOS_+0xc>
    235e:	f7ff ffda 	bl	2316 <_ZN6String4moveERS_>
	return *this;
}
    2362:	0020      	movs	r0, r4
    2364:	bd10      	pop	{r4, pc}

00002366 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    2366:	b570      	push	{r4, r5, r6, lr}
    2368:	0004      	movs	r4, r0
    236a:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    236c:	d009      	beq.n	2382 <_ZN6StringaSEPKc+0x1c>
    236e:	0008      	movs	r0, r1
    2370:	f003 fd04 	bl	5d7c <strlen>
    2374:	0029      	movs	r1, r5
    2376:	0002      	movs	r2, r0
    2378:	0020      	movs	r0, r4
    237a:	f7ff ffa5 	bl	22c8 <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    237e:	0020      	movs	r0, r4
    2380:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    2382:	f7ff ff74 	bl	226e <_ZN6String10invalidateEv>
    2386:	e7fa      	b.n	237e <_ZN6StringaSEPKc+0x18>

00002388 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    2388:	b570      	push	{r4, r5, r6, lr}
    238a:	000d      	movs	r5, r1
	if (!bufsize || !buf) return;
    238c:	2a00      	cmp	r2, #0
    238e:	d006      	beq.n	239e <_ZNK6String8getBytesEPhjj+0x16>
    2390:	2900      	cmp	r1, #0
    2392:	d004      	beq.n	239e <_ZNK6String8getBytesEPhjj+0x16>
	if (index >= len) {
    2394:	6884      	ldr	r4, [r0, #8]
    2396:	429c      	cmp	r4, r3
    2398:	d802      	bhi.n	23a0 <_ZNK6String8getBytesEPhjj+0x18>
		buf[0] = 0;
    239a:	2300      	movs	r3, #0
    239c:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    239e:	bd70      	pop	{r4, r5, r6, pc}
	unsigned int n = bufsize - 1;
    23a0:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
    23a2:	1ae4      	subs	r4, r4, r3
    23a4:	4294      	cmp	r4, r2
    23a6:	d900      	bls.n	23aa <_ZNK6String8getBytesEPhjj+0x22>
    23a8:	0014      	movs	r4, r2
	strncpy((char *)buf, buffer + index, n);
    23aa:	6801      	ldr	r1, [r0, #0]
    23ac:	0022      	movs	r2, r4
    23ae:	18c9      	adds	r1, r1, r3
    23b0:	0028      	movs	r0, r5
    23b2:	f003 fcea 	bl	5d8a <strncpy>
	buf[n] = 0;
    23b6:	2300      	movs	r3, #0
    23b8:	552b      	strb	r3, [r5, r4]
    23ba:	e7f0      	b.n	239e <_ZNK6String8getBytesEPhjj+0x16>

000023bc <_ZN8SPIFlashC1EhP8SPIClass>:
  cs_mask = digitalPinToBitMask(csPin);
  pinMode(csPin, OUTPUT);
  CHIP_DESELECT
}
#elif defined (ARDUINO_ARCH_SAMD) || defined (ARCH_STM32) || defined(ARDUINO_ARCH_ESP32)
SPIFlash::SPIFlash(uint8_t cs, SPIClass *spiinterface) {
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    23be:	4b25      	ldr	r3, [pc, #148]	; (2454 <_ZN8SPIFlashC1EhP8SPIClass+0x98>)
    23c0:	0016      	movs	r6, r2
  // Object declaration for the GPIO HAL type for csPin - @boseji <salearj@hotmail.com> 02.03.17
  gpio_t      csPin;
  #endif

  // Variables specific to using non-standard SPI (currently only tested with ESP32)
  struct _SPIPins {
    23c2:	22ff      	movs	r2, #255	; 0xff
    23c4:	6003      	str	r3, [r0, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    23c6:	2300      	movs	r3, #0
    23c8:	000d      	movs	r5, r1
    23ca:	2152      	movs	r1, #82	; 0x52
    23cc:	7442      	strb	r2, [r0, #17]
    23ce:	7482      	strb	r2, [r0, #18]
    23d0:	74c2      	strb	r2, [r0, #19]
    23d2:	7502      	strb	r2, [r0, #20]
    23d4:	1c42      	adds	r2, r0, #1
    23d6:	7143      	strb	r3, [r0, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    23d8:	7103      	strb	r3, [r0, #4]
    23da:	7203      	strb	r3, [r0, #8]
    23dc:	7743      	strb	r3, [r0, #29]
    23de:	7783      	strb	r3, [r0, #30]
    23e0:	77c3      	strb	r3, [r0, #31]
    23e2:	77d3      	strb	r3, [r2, #31]
    23e4:	322a      	adds	r2, #42	; 0x2a
    23e6:	7011      	strb	r1, [r2, #0]
    23e8:	3105      	adds	r1, #5
    23ea:	7051      	strb	r1, [r2, #1]
    23ec:	2200      	movs	r2, #0
    23ee:	0004      	movs	r4, r0
    23f0:	4f19      	ldr	r7, [pc, #100]	; (2458 <_ZN8SPIFlashC1EhP8SPIClass+0x9c>)
    23f2:	6783      	str	r3, [r0, #120]	; 0x78
    23f4:	67c3      	str	r3, [r0, #124]	; 0x7c
    23f6:	6302      	str	r2, [r0, #48]	; 0x30
    23f8:	0039      	movs	r1, r7
    23fa:	2212      	movs	r2, #18
    23fc:	309c      	adds	r0, #156	; 0x9c
    23fe:	f003 fbdf 	bl	5bc0 <memcpy>
    2402:	0020      	movs	r0, r4
    2404:	0039      	movs	r1, r7
    2406:	2248      	movs	r2, #72	; 0x48
    2408:	3114      	adds	r1, #20
    240a:	30b0      	adds	r0, #176	; 0xb0
    240c:	f003 fbd8 	bl	5bc0 <memcpy>
    2410:	0020      	movs	r0, r4
    2412:	0039      	movs	r1, r7
    2414:	2209      	movs	r2, #9
    2416:	315c      	adds	r1, #92	; 0x5c
    2418:	30f8      	adds	r0, #248	; 0xf8
    241a:	f003 fbd1 	bl	5bc0 <memcpy>
    241e:	0039      	movs	r1, r7
    2420:	1ca0      	adds	r0, r4, #2
    2422:	3165      	adds	r1, #101	; 0x65
    2424:	30ff      	adds	r0, #255	; 0xff
    2426:	2203      	movs	r2, #3
    2428:	f003 fbca 	bl	5bc0 <memcpy>
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
  if (_spi == &SPI) {
    242c:	4b0b      	ldr	r3, [pc, #44]	; (245c <_ZN8SPIFlashC1EhP8SPIClass+0xa0>)
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
    242e:	60e6      	str	r6, [r4, #12]
  if (_spi == &SPI) {
    2430:	429e      	cmp	r6, r3
    2432:	d10c      	bne.n	244e <_ZN8SPIFlashC1EhP8SPIClass+0x92>
    _SPIInUse = STDSPI;
    2434:	230a      	movs	r3, #10
  }
  else {
    _SPIInUse = ALTSPI;
  }
  csPin = cs;
  pinMode(csPin, OUTPUT);
    2436:	0028      	movs	r0, r5
    _SPIInUse = ALTSPI;
    2438:	7563      	strb	r3, [r4, #21]
  csPin = cs;
    243a:	7425      	strb	r5, [r4, #16]
  pinMode(csPin, OUTPUT);
    243c:	2101      	movs	r1, #1
    243e:	f7ff fe37 	bl	20b0 <pinMode>
  CHIP_DESELECT
    2442:	7c20      	ldrb	r0, [r4, #16]
    2444:	2101      	movs	r1, #1
    2446:	f7ff fe7f 	bl	2148 <digitalWrite>
}
    244a:	0020      	movs	r0, r4
    244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _SPIInUse = ALTSPI;
    244e:	230b      	movs	r3, #11
    2450:	e7f1      	b.n	2436 <_ZN8SPIFlashC1EhP8SPIClass+0x7a>
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	003d0900 	.word	0x003d0900
    2458:	00005fa4 	.word	0x00005fa4
    245c:	20000844 	.word	0x20000844

00002460 <_ZN8SPIFlash5beginEm>:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//     Public functions used for read, write and erase operations     //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//Identifies chip and establishes parameters
bool SPIFlash::begin(uint32_t flashChipSize) {
    2460:	b570      	push	{r4, r5, r6, lr}
#endif
#ifdef HIGHSPEED
  Serial.println(F("Highspeed mode initiated."));
  Serial.println();
#endif
  if (_SPIInUse == ALTSPI) {
    2462:	7d43      	ldrb	r3, [r0, #21]
bool SPIFlash::begin(uint32_t flashChipSize) {
    2464:	0004      	movs	r4, r0
    2466:	000d      	movs	r5, r1
  if (_SPIInUse == ALTSPI) {
    2468:	2b0b      	cmp	r3, #11
    246a:	d002      	beq.n	2472 <_ZN8SPIFlash5beginEm+0x12>
    #if defined (ARDUINO_ARCH_ESP32)
    SPI.begin(_nonStdSPI.sck, _nonStdSPI.miso, _nonStdSPI.mosi, _nonStdSPI.ss);
    #endif
  }
  else {
    BEGIN_SPI
    246c:	68c0      	ldr	r0, [r0, #12]
    246e:	f000 fe01 	bl	3074 <_ZN8SPIClass5beginEv>
  }

#ifdef SPI_HAS_TRANSACTION
  //Define the settings to be used by the SPI bus
  if (!_SPISettingsSet) {
    2472:	7a23      	ldrb	r3, [r4, #8]
    2474:	2b00      	cmp	r3, #0
    2476:	d107      	bne.n	2488 <_ZN8SPIFlash5beginEm+0x28>
    _settings = SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    2478:	221b      	movs	r2, #27
    247a:	7062      	strb	r2, [r4, #1]
    247c:	3a64      	subs	r2, #100	; 0x64
    247e:	7023      	strb	r3, [r4, #0]
    2480:	70a2      	strb	r2, [r4, #2]
    2482:	70e3      	strb	r3, [r4, #3]
    2484:	7123      	strb	r3, [r4, #4]
    2486:	7163      	strb	r3, [r4, #5]
#else
  if (!_clockdiv) {
    _clockdiv = SPI_CLOCK_DIV2;
  }
#endif
  bool retVal = _chipID(flashChipSize);
    2488:	0029      	movs	r1, r5
    248a:	0020      	movs	r0, r4
    248c:	f000 fd1a 	bl	2ec4 <_ZN8SPIFlash7_chipIDEm>
    2490:	0005      	movs	r5, r0
  _endSPI();
    2492:	0020      	movs	r0, r4
    2494:	f000 fbd6 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
  chipPoweredDown = false;
    2498:	2300      	movs	r3, #0
  _disableGlobalBlockProtect();
    249a:	0020      	movs	r0, r4
  chipPoweredDown = false;
    249c:	77a3      	strb	r3, [r4, #30]
  _disableGlobalBlockProtect();
    249e:	f000 fccb 	bl	2e38 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
  return retVal;
}
    24a2:	0028      	movs	r0, r5
    24a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000024a8 <_ZN8SPIFlash5errorEb>:
void SPIFlash::setClock(uint8_t clockdiv) {
  _clockdiv = clockdiv;
}
#endif

uint8_t SPIFlash::error(bool _verbosity) {
    24a8:	b510      	push	{r4, lr}
    24aa:	4c05      	ldr	r4, [pc, #20]	; (24c0 <_ZN8SPIFlash5errorEb+0x18>)
  if (!_verbosity) {
    24ac:	2900      	cmp	r1, #0
    24ae:	d101      	bne.n	24b4 <_ZN8SPIFlash5errorEb+0xc>
    return diagnostics.errorcode;
  }
  else {
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    return diagnostics.errorcode;
    24b0:	7820      	ldrb	r0, [r4, #0]
  }
}
    24b2:	bd10      	pop	{r4, pc}
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    24b4:	7821      	ldrb	r1, [r4, #0]
    24b6:	2201      	movs	r2, #1
    24b8:	f000 fda4 	bl	3004 <_ZN8SPIFlash13_troubleshootEhb>
    24bc:	e7f8      	b.n	24b0 <_ZN8SPIFlash5errorEb+0x8>
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	20000d14 	.word	0x20000d14

000024c4 <_ZN8SPIFlash10getAddressEt>:
}

//Gets the next available address for use.
// Takes the size of the data as an argument and returns a 32-bit address
// This function can be called anytime - even if there is preexisting data on the flash chip. It will simply find the next empty address block for the data.
uint32_t SPIFlash::getAddress(uint16_t size) {
    24c4:	b570      	push	{r4, r5, r6, lr}
  if (!_addressCheck(currentAddress, size)){
    24c6:	000a      	movs	r2, r1
uint32_t SPIFlash::getAddress(uint16_t size) {
    24c8:	000d      	movs	r5, r1
  if (!_addressCheck(currentAddress, size)){
    24ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
uint32_t SPIFlash::getAddress(uint16_t size) {
    24cc:	0004      	movs	r4, r0
  if (!_addressCheck(currentAddress, size)){
    24ce:	f000 faa3 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    #ifdef DISABLEOVERFLOW
      _troubleshoot(OUTOFBOUNDS);
      return false;					// At end of memory - (!pageOverflow)
    #else
      currentAddress = 0x00;// At end of memory - (pageOverflow)
      _loopedOver = true;
    24d2:	2601      	movs	r6, #1
  if (!_addressCheck(currentAddress, size)){
    24d4:	2800      	cmp	r0, #0
    24d6:	d101      	bne.n	24dc <_ZN8SPIFlash10getAddressEt+0x18>
    return false;
    24d8:	2000      	movs	r0, #0
    }
  }
		uint32_t _addr = currentAddress;
		currentAddress+=size;
		return _addr;
}
    24da:	bd70      	pop	{r4, r5, r6, pc}
   while (!_notPrevWritten(currentAddress, size)) {
    24dc:	002a      	movs	r2, r5
    24de:	6f61      	ldr	r1, [r4, #116]	; 0x74
    24e0:	0020      	movs	r0, r4
    24e2:	f000 fb15 	bl	2b10 <_ZN8SPIFlash15_notPrevWrittenEmm>
    24e6:	1e03      	subs	r3, r0, #0
    24e8:	6f60      	ldr	r0, [r4, #116]	; 0x74
    24ea:	d10c      	bne.n	2506 <_ZN8SPIFlash10getAddressEt+0x42>
    if (_currentAddress >= _chip.capacity) {
    24ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     currentAddress+=size;
    24ee:	1828      	adds	r0, r5, r0
    24f0:	6760      	str	r0, [r4, #116]	; 0x74
    _currentAddress = currentAddress;
    24f2:	67a0      	str	r0, [r4, #120]	; 0x78
    if (_currentAddress >= _chip.capacity) {
    24f4:	4298      	cmp	r0, r3
    24f6:	d3f1      	bcc.n	24dc <_ZN8SPIFlash10getAddressEt+0x18>
      if (_loopedOver) {
    24f8:	1c63      	adds	r3, r4, #1
    24fa:	7fda      	ldrb	r2, [r3, #31]
    24fc:	2a00      	cmp	r2, #0
    24fe:	d1eb      	bne.n	24d8 <_ZN8SPIFlash10getAddressEt+0x14>
      currentAddress = 0x00;// At end of memory - (pageOverflow)
    2500:	6762      	str	r2, [r4, #116]	; 0x74
      _loopedOver = true;
    2502:	77de      	strb	r6, [r3, #31]
    2504:	e7ea      	b.n	24dc <_ZN8SPIFlash10getAddressEt+0x18>
		currentAddress+=size;
    2506:	182d      	adds	r5, r5, r0
    2508:	6765      	str	r5, [r4, #116]	; 0x74
		return _addr;
    250a:	e7e6      	b.n	24da <_ZN8SPIFlash10getAddressEt+0x16>

0000250c <_ZN8SPIFlash9sizeofStrER6String>:

//Function for returning the size of the string (only to be used for the getAddress() function)
uint16_t SPIFlash::sizeofStr(String &inputStr) {
  uint16_t size;
  size = (sizeof(char)*(inputStr.length()+1));
    250c:	6888      	ldr	r0, [r1, #8]
  size+=sizeof(inputStr.length()+1);
    250e:	3005      	adds	r0, #5

	return size;
    2510:	b280      	uxth	r0, r0
}
    2512:	4770      	bx	lr

00002514 <_ZN8SPIFlash8readByteEmb>:

// Reads a byte of data from a specific location in a page.
//  Takes two arguments -
//    1. _addr --> Any address from 0 to capacity
//    2. fastRead --> defaults to false - executes _beginFastRead() if set to true
uint8_t SPIFlash::readByte(uint32_t _addr, bool fastRead) {
    2514:	b570      	push	{r4, r5, r6, lr}
//  4. fastRead --> defaults to false - executes _beginFastRead() if set to true
template <class T> bool SPIFlash::_read(uint32_t _addr, T& value, uint32_t _sz, bool fastRead, uint8_t _dataType) {
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if (!_prep(READDATA, _addr, _sz)) {
    2516:	2301      	movs	r3, #1
    2518:	0016      	movs	r6, r2
    251a:	000a      	movs	r2, r1
    251c:	2103      	movs	r1, #3
    251e:	0004      	movs	r4, r0
  uint8_t data = 0;
    2520:	2500      	movs	r5, #0
    2522:	f000 fbf3 	bl	2d0c <_ZN8SPIFlash5_prepEhmm>
    2526:	42a8      	cmp	r0, r5
    2528:	d015      	beq.n	2556 <_ZN8SPIFlash8readByteEmb+0x42>
      for (uint16_t i = 0; i < _sz; i++) {
        *p++ = _inChar[i];
      }
    }
    else {
      CHIP_SELECT
    252a:	0029      	movs	r1, r5
    252c:	7c20      	ldrb	r0, [r4, #16]
    252e:	f7ff fe0b 	bl	2148 <digitalWrite>
      if (fastRead) {
        _beginSPI(FASTREAD);
    2532:	210b      	movs	r1, #11
      if (fastRead) {
    2534:	42ae      	cmp	r6, r5
    2536:	d100      	bne.n	253a <_ZN8SPIFlash8readByteEmb+0x26>
      }
      else {
        _beginSPI(READDATA);
    2538:	2103      	movs	r1, #3
    253a:	0020      	movs	r0, r4
    253c:	f000 fab8 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
      }
      for (uint16_t i = 0; i < _sz; i++) {
        *p++ =_nextByte(READ);
    2540:	0023      	movs	r3, r4
    2542:	332b      	adds	r3, #43	; 0x2b
    2544:	7819      	ldrb	r1, [r3, #0]
    2546:	2200      	movs	r2, #0
    2548:	0020      	movs	r0, r4
    254a:	f000 fb05 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    254e:	0005      	movs	r5, r0
      }
      _endSPI();
    2550:	0020      	movs	r0, r4
    2552:	f000 fb77 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
  _read(_addr, data, sizeof(data), fastRead);
  return data;
}
    2556:	0028      	movs	r0, r5
    2558:	bd70      	pop	{r4, r5, r6, pc}

0000255a <_ZN8SPIFlash9readFloatEmb>:

// Reads a float of data from a specific location in a page.
//  Takes two arguments -
//    1. _addr --> Any address from 0 to capacity
//    2. fastRead --> defaults to false - executes _beginFastRead() if set to true
float SPIFlash::readFloat(uint32_t _addr, bool fastRead) {
    255a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!_prep(READDATA, _addr, _sz)) {
    255c:	2304      	movs	r3, #4
    255e:	0015      	movs	r5, r2
    2560:	000a      	movs	r2, r1
    2562:	2103      	movs	r1, #3
    2564:	0004      	movs	r4, r0
    2566:	f000 fbd1 	bl	2d0c <_ZN8SPIFlash5_prepEhmm>
    256a:	2800      	cmp	r0, #0
    256c:	d01a      	beq.n	25a4 <_ZN8SPIFlash9readFloatEmb+0x4a>
      CHIP_SELECT
    256e:	2100      	movs	r1, #0
    2570:	7c20      	ldrb	r0, [r4, #16]
    2572:	f7ff fde9 	bl	2148 <digitalWrite>
        _beginSPI(FASTREAD);
    2576:	210b      	movs	r1, #11
      if (fastRead) {
    2578:	2d00      	cmp	r5, #0
    257a:	d100      	bne.n	257e <_ZN8SPIFlash9readFloatEmb+0x24>
        _beginSPI(READDATA);
    257c:	2103      	movs	r1, #3
    257e:	0020      	movs	r0, r4
    2580:	f000 fa96 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
    2584:	2500      	movs	r5, #0
        *p++ =_nextByte(READ);
    2586:	0023      	movs	r3, r4
    2588:	332b      	adds	r3, #43	; 0x2b
    258a:	7819      	ldrb	r1, [r3, #0]
    258c:	2200      	movs	r2, #0
    258e:	0020      	movs	r0, r4
    2590:	f000 fae2 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    2594:	ab01      	add	r3, sp, #4
    2596:	54e8      	strb	r0, [r5, r3]
    2598:	3501      	adds	r5, #1
      for (uint16_t i = 0; i < _sz; i++) {
    259a:	2d04      	cmp	r5, #4
    259c:	d1f3      	bne.n	2586 <_ZN8SPIFlash9readFloatEmb+0x2c>
      _endSPI();
    259e:	0020      	movs	r0, r4
    25a0:	f000 fb50 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
  float data;
  _read(_addr, data, sizeof(data), fastRead);
  return data;
}
    25a4:	9801      	ldr	r0, [sp, #4]
    25a6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000025a8 <_ZN8SPIFlash7readStrEmR6Stringb>:
// Reads a string from a specific location on a page.
//  Takes three arguments
//    1. _addr --> Any address from 0 to capacity
//    2. outputString --> String variable to write the output to
//    3. fastRead --> defaults to false - executes _beginFastRead() if set to true
bool SPIFlash::readStr(uint32_t _addr, String &data, bool fastRead) {
    25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25aa:	b089      	sub	sp, #36	; 0x24
    25ac:	af00      	add	r7, sp, #0
    25ae:	60b9      	str	r1, [r7, #8]
    25b0:	603a      	str	r2, [r7, #0]
    25b2:	607b      	str	r3, [r7, #4]
    _spifuncruntime = micros();
  #endif

  uint32_t _sz = 0;

  if (!_prep(READDATA, _addr, _sz)) {
    25b4:	000a      	movs	r2, r1
    25b6:	2300      	movs	r3, #0
    25b8:	2103      	movs	r1, #3
bool SPIFlash::readStr(uint32_t _addr, String &data, bool fastRead) {
    25ba:	0004      	movs	r4, r0
  if (!_prep(READDATA, _addr, _sz)) {
    25bc:	f000 fba6 	bl	2d0c <_ZN8SPIFlash5_prepEhmm>
    25c0:	2800      	cmp	r0, #0
    25c2:	d104      	bne.n	25ce <_ZN8SPIFlash7readStrEmR6Stringb+0x26>
    return false;
    25c4:	2600      	movs	r6, #0

  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    25c6:	0030      	movs	r0, r6
    25c8:	46bd      	mov	sp, r7
    25ca:	b009      	add	sp, #36	; 0x24
    25cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (fastRead) {
    25ce:	687b      	ldr	r3, [r7, #4]
      _beginSPI(FASTREAD);
    25d0:	210b      	movs	r1, #11
    if (fastRead) {
    25d2:	2b00      	cmp	r3, #0
    25d4:	d100      	bne.n	25d8 <_ZN8SPIFlash7readStrEmR6Stringb+0x30>
      _beginSPI(READDATA);
    25d6:	2103      	movs	r1, #3
bool SPIFlash::readStr(uint32_t _addr, String &data, bool fastRead) {
    25d8:	2600      	movs	r6, #0
      _beginSPI(READDATA);
    25da:	0020      	movs	r0, r4
    25dc:	f000 fa68 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
bool SPIFlash::readStr(uint32_t _addr, String &data, bool fastRead) {
    25e0:	0035      	movs	r5, r6
      _sz |= (_nextByte(READ) << (8*i));
    25e2:	0023      	movs	r3, r4
    25e4:	332b      	adds	r3, #43	; 0x2b
    25e6:	7819      	ldrb	r1, [r3, #0]
    25e8:	2200      	movs	r2, #0
    25ea:	0020      	movs	r0, r4
    25ec:	f000 fab4 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    25f0:	40b0      	lsls	r0, r6
    25f2:	3608      	adds	r6, #8
    25f4:	4305      	orrs	r5, r0
    for (uint16_t i = 0; i < sizeof(_sz); i++) {
    25f6:	2e20      	cmp	r6, #32
    25f8:	d1f3      	bne.n	25e2 <_ZN8SPIFlash7readStrEmR6Stringb+0x3a>
    _endSPI();
    25fa:	0020      	movs	r0, r4
    25fc:	f000 fb22 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
  char _inChar[_sz];
    2600:	466a      	mov	r2, sp
    2602:	1deb      	adds	r3, r5, #7
    2604:	08db      	lsrs	r3, r3, #3
    2606:	00db      	lsls	r3, r3, #3
  if (!_addressCheck((_addr + sizeof(_sz)), _sz) || !_notBusy()) {
    2608:	68b9      	ldr	r1, [r7, #8]
  char _inChar[_sz];
    260a:	1ad3      	subs	r3, r2, r3
    260c:	469d      	mov	sp, r3
  if (!_addressCheck((_addr + sizeof(_sz)), _sz) || !_notBusy()) {
    260e:	3104      	adds	r1, #4
    2610:	002a      	movs	r2, r5
    2612:	0020      	movs	r0, r4
  char _inChar[_sz];
    2614:	60fb      	str	r3, [r7, #12]
  if (!_addressCheck((_addr + sizeof(_sz)), _sz) || !_notBusy()) {
    2616:	f000 f9ff 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    261a:	2800      	cmp	r0, #0
    261c:	d0d2      	beq.n	25c4 <_ZN8SPIFlash7readStrEmR6Stringb+0x1c>
    261e:	4913      	ldr	r1, [pc, #76]	; (266c <_ZN8SPIFlash7readStrEmR6Stringb+0xc4>)
    2620:	0020      	movs	r0, r4
    2622:	f000 fb2f 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2626:	1e06      	subs	r6, r0, #0
    2628:	d0cc      	beq.n	25c4 <_ZN8SPIFlash7readStrEmR6Stringb+0x1c>
  if(fastRead) {
    262a:	687b      	ldr	r3, [r7, #4]
    _beginSPI(FASTREAD);
    262c:	210b      	movs	r1, #11
  if(fastRead) {
    262e:	2b00      	cmp	r3, #0
    2630:	d100      	bne.n	2634 <_ZN8SPIFlash7readStrEmR6Stringb+0x8c>
    _beginSPI(READDATA);
    2632:	2103      	movs	r1, #3
    2634:	0020      	movs	r0, r4
    2636:	f000 fa3b 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
  _nextBuf(READDATA, (uint8_t*) &(*_inChar), _sz);
    263a:	68fa      	ldr	r2, [r7, #12]
    263c:	002b      	movs	r3, r5
    263e:	2103      	movs	r1, #3
    2640:	0020      	movs	r0, r4
    2642:	f000 fa8f 	bl	2b64 <_ZN8SPIFlash8_nextBufEhPhm>
  _endSPI();
    2646:	0020      	movs	r0, r4
    2648:	f000 fafc 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
  data = String(_inChar);
    264c:	2314      	movs	r3, #20
    264e:	68f9      	ldr	r1, [r7, #12]
    2650:	18f8      	adds	r0, r7, r3
    2652:	f7ff fe4d 	bl	22f0 <_ZN6StringC1EPKc>
    2656:	2314      	movs	r3, #20
    2658:	6838      	ldr	r0, [r7, #0]
    265a:	18f9      	adds	r1, r7, r3
    265c:	f7ff fe7b 	bl	2356 <_ZN6StringaSEOS_>
    2660:	2314      	movs	r3, #20
    2662:	18f8      	adds	r0, r7, r3
    2664:	f7ff fdfa 	bl	225c <_ZN6StringD1Ev>
	return true;
    2668:	e7ad      	b.n	25c6 <_ZN8SPIFlash7readStrEmR6Stringb+0x1e>
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	3b9aca00 	.word	0x3b9aca00

00002670 <_ZN8SPIFlash9writeByteEmhb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One byte to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeByte(uint32_t _addr, uint8_t data, bool errorCheck) {
    2670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2672:	000f      	movs	r7, r1
    2674:	9301      	str	r3, [sp, #4]
    2676:	0016      	movs	r6, r2
  //return _write(_addr, data, sizeof(data), errorCheck, _BYTE_);
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if(!_prep(PAGEPROG, _addr, sizeof(data))) {
    2678:	2301      	movs	r3, #1
    267a:	000a      	movs	r2, r1
    267c:	2102      	movs	r1, #2
bool SPIFlash::writeByte(uint32_t _addr, uint8_t data, bool errorCheck) {
    267e:	0004      	movs	r4, r0
  if(!_prep(PAGEPROG, _addr, sizeof(data))) {
    2680:	f000 fb44 	bl	2d0c <_ZN8SPIFlash5_prepEhmm>
    2684:	1e05      	subs	r5, r0, #0
    2686:	d101      	bne.n	268c <_ZN8SPIFlash9writeByteEmhb+0x1c>
    if (data != _nextByte(READ)) {
      _endSPI();
      #ifdef RUNDIAGNOSTIC
        _spifuncruntime = micros() - _spifuncruntime;
      #endif
      return false;
    2688:	2500      	movs	r5, #0
    268a:	e015      	b.n	26b8 <_ZN8SPIFlash9writeByteEmhb+0x48>
  _beginSPI(PAGEPROG);
    268c:	2102      	movs	r1, #2
    268e:	0020      	movs	r0, r4
    2690:	f000 fa0e 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
  _nextByte(WRITE, data);
    2694:	0023      	movs	r3, r4
    2696:	332c      	adds	r3, #44	; 0x2c
    2698:	9300      	str	r3, [sp, #0]
    269a:	7819      	ldrb	r1, [r3, #0]
    269c:	0032      	movs	r2, r6
    269e:	0020      	movs	r0, r4
    26a0:	f000 fa5a 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
  CHIP_DESELECT
    26a4:	7c20      	ldrb	r0, [r4, #16]
    26a6:	2101      	movs	r1, #1
    26a8:	f7ff fd4e 	bl	2148 <digitalWrite>
  if (!errorCheck) {
    26ac:	9b01      	ldr	r3, [sp, #4]
    26ae:	2b00      	cmp	r3, #0
    26b0:	d104      	bne.n	26bc <_ZN8SPIFlash9writeByteEmhb+0x4c>
    _endSPI();
    26b2:	0020      	movs	r0, r4
    26b4:	f000 fac6 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
      #endif
      return true;
    }
  }
  return true;
}
    26b8:	0028      	movs	r0, r5
    26ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (!_notBusy()) {
    26bc:	4910      	ldr	r1, [pc, #64]	; (2700 <_ZN8SPIFlash9writeByteEmhb+0x90>)
    26be:	0020      	movs	r0, r4
    26c0:	f000 fae0 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    26c4:	2800      	cmp	r0, #0
    26c6:	d0df      	beq.n	2688 <_ZN8SPIFlash9writeByteEmhb+0x18>
    CHIP_SELECT
    26c8:	7c20      	ldrb	r0, [r4, #16]
    26ca:	2100      	movs	r1, #0
    _currentAddress = _addr;
    26cc:	67a7      	str	r7, [r4, #120]	; 0x78
    CHIP_SELECT
    26ce:	f7ff fd3b 	bl	2148 <digitalWrite>
    _nextByte(WRITE, READDATA);
    26d2:	9b00      	ldr	r3, [sp, #0]
    26d4:	2203      	movs	r2, #3
    26d6:	7819      	ldrb	r1, [r3, #0]
    26d8:	0020      	movs	r0, r4
    26da:	f000 fa3d 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    26de:	0020      	movs	r0, r4
    26e0:	f000 f9be 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
    if (data != _nextByte(READ)) {
    26e4:	0023      	movs	r3, r4
    26e6:	332b      	adds	r3, #43	; 0x2b
    26e8:	7819      	ldrb	r1, [r3, #0]
    26ea:	2200      	movs	r2, #0
    26ec:	0020      	movs	r0, r4
    26ee:	f000 fa33 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    26f2:	4286      	cmp	r6, r0
    26f4:	d0dd      	beq.n	26b2 <_ZN8SPIFlash9writeByteEmhb+0x42>
      _endSPI();
    26f6:	0020      	movs	r0, r4
    26f8:	f000 faa4 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
    26fc:	e7c4      	b.n	2688 <_ZN8SPIFlash9writeByteEmhb+0x18>
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	3b9aca00 	.word	0x3b9aca00

00002704 <_ZN8SPIFlash10writeFloatEmfb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One float to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeFloat(uint32_t _addr, float data, bool errorCheck) {
    2704:	b5f0      	push	{r4, r5, r6, r7, lr}
    2706:	b087      	sub	sp, #28
    2708:	9201      	str	r2, [sp, #4]
    270a:	9303      	str	r3, [sp, #12]
  //return _write(_addr, data, sizeof(data), errorCheck, _FLOAT_);
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if(!_prep(PAGEPROG, _addr, sizeof(data))) {
    270c:	000a      	movs	r2, r1
bool SPIFlash::writeFloat(uint32_t _addr, float data, bool errorCheck) {
    270e:	000f      	movs	r7, r1
  if(!_prep(PAGEPROG, _addr, sizeof(data))) {
    2710:	2304      	movs	r3, #4
    2712:	2102      	movs	r1, #2
bool SPIFlash::writeFloat(uint32_t _addr, float data, bool errorCheck) {
    2714:	0004      	movs	r4, r0
  if(!_prep(PAGEPROG, _addr, sizeof(data))) {
    2716:	f000 faf9 	bl	2d0c <_ZN8SPIFlash5_prepEhmm>
    271a:	1e05      	subs	r5, r0, #0
    271c:	d01c      	beq.n	2758 <_ZN8SPIFlash10writeFloatEmfb+0x54>

  union {
    float Float;
    uint8_t byte[sizeof(float)];
  } dataOut;
  dataOut.Float = data;
    271e:	9b01      	ldr	r3, [sp, #4]

  _beginSPI(PAGEPROG);
    2720:	2102      	movs	r1, #2
    2722:	0020      	movs	r0, r4
  dataOut.Float = data;
    2724:	9304      	str	r3, [sp, #16]
  _beginSPI(PAGEPROG);
    2726:	2600      	movs	r6, #0
    2728:	f000 f9c2 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
  for (uint8_t i = 0; i < sizeof(data); i++) {
    _nextByte(WRITE, dataOut.byte[i]);
    272c:	ab04      	add	r3, sp, #16
    272e:	5cf2      	ldrb	r2, [r6, r3]
    2730:	0023      	movs	r3, r4
    2732:	332c      	adds	r3, #44	; 0x2c
    2734:	9302      	str	r3, [sp, #8]
    2736:	7819      	ldrb	r1, [r3, #0]
    2738:	0020      	movs	r0, r4
    273a:	3601      	adds	r6, #1
    273c:	f000 fa0c 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
  for (uint8_t i = 0; i < sizeof(data); i++) {
    2740:	2e04      	cmp	r6, #4
    2742:	d1f3      	bne.n	272c <_ZN8SPIFlash10writeFloatEmfb+0x28>
  }
  CHIP_DESELECT
    2744:	7c20      	ldrb	r0, [r4, #16]
    2746:	2101      	movs	r1, #1
    2748:	f7ff fcfe 	bl	2148 <digitalWrite>

  if (!errorCheck) {
    274c:	9b03      	ldr	r3, [sp, #12]
    274e:	2b00      	cmp	r3, #0
    2750:	d105      	bne.n	275e <_ZN8SPIFlash10writeFloatEmfb+0x5a>
    _endSPI();
    2752:	0020      	movs	r0, r4
    2754:	f000 fa76 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros() - _spifuncruntime;
    #endif
  }
  return true;
}
    2758:	0028      	movs	r0, r5
    275a:	b007      	add	sp, #28
    275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!_notBusy()) {
    275e:	4916      	ldr	r1, [pc, #88]	; (27b8 <_ZN8SPIFlash10writeFloatEmfb+0xb4>)
    2760:	0020      	movs	r0, r4
    2762:	f000 fa8f 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2766:	1e05      	subs	r5, r0, #0
    2768:	d023      	beq.n	27b2 <_ZN8SPIFlash10writeFloatEmfb+0xae>
    CHIP_SELECT
    276a:	7c20      	ldrb	r0, [r4, #16]
    276c:	2100      	movs	r1, #0
    _currentAddress = _addr;
    276e:	67a7      	str	r7, [r4, #120]	; 0x78
    CHIP_SELECT
    2770:	f7ff fcea 	bl	2148 <digitalWrite>
    _nextByte(WRITE, READDATA);
    2774:	9b02      	ldr	r3, [sp, #8]
    2776:	2203      	movs	r2, #3
    2778:	7819      	ldrb	r1, [r3, #0]
    277a:	0020      	movs	r0, r4
    277c:	f000 f9ec 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    2780:	0020      	movs	r0, r4
    2782:	f000 f96d 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
    2786:	2600      	movs	r6, #0
      dataIn.byte[i] = _nextByte(READ);
    2788:	0023      	movs	r3, r4
    278a:	332b      	adds	r3, #43	; 0x2b
    278c:	7819      	ldrb	r1, [r3, #0]
    278e:	2200      	movs	r2, #0
    2790:	0020      	movs	r0, r4
    2792:	f000 f9e1 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    2796:	ab05      	add	r3, sp, #20
    2798:	54f0      	strb	r0, [r6, r3]
    279a:	3601      	adds	r6, #1
    for (uint8_t i = 0; i < sizeof(data); i++) {
    279c:	2e04      	cmp	r6, #4
    279e:	d1f3      	bne.n	2788 <_ZN8SPIFlash10writeFloatEmfb+0x84>
    _endSPI();
    27a0:	0020      	movs	r0, r4
    27a2:	f000 fa4f 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
    if (dataIn.Float != data) {
    27a6:	9905      	ldr	r1, [sp, #20]
    27a8:	9801      	ldr	r0, [sp, #4]
    27aa:	f001 faf9 	bl	3da0 <__aeabi_fcmpeq>
    27ae:	2800      	cmp	r0, #0
    27b0:	d1d2      	bne.n	2758 <_ZN8SPIFlash10writeFloatEmfb+0x54>
      return false;
    27b2:	2500      	movs	r5, #0
    27b4:	e7d0      	b.n	2758 <_ZN8SPIFlash10writeFloatEmfb+0x54>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	3b9aca00 	.word	0x3b9aca00

000027bc <_ZN8SPIFlash8writeStrEmR6Stringb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One String to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    27bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27be:	b089      	sub	sp, #36	; 0x24
    27c0:	6896      	ldr	r6, [r2, #8]
    27c2:	0004      	movs	r4, r0
    27c4:	0010      	movs	r0, r2
  _spifuncruntime = micros();
  #endif

  uint32_t _sz = (sizeof(char)*(data.length()+1));

  char _outCharArray[_sz];
    27c6:	466a      	mov	r2, sp
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    27c8:	af00      	add	r7, sp, #0
    27ca:	607b      	str	r3, [r7, #4]
  uint32_t _sz = (sizeof(char)*(data.length()+1));
    27cc:	1c73      	adds	r3, r6, #1
    27ce:	61fb      	str	r3, [r7, #28]
  char _outCharArray[_sz];
    27d0:	3307      	adds	r3, #7
    27d2:	08db      	lsrs	r3, r3, #3
    27d4:	00db      	lsls	r3, r3, #3
    27d6:	1ad3      	subs	r3, r2, r3
    27d8:	469d      	mov	sp, r3
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    27da:	6179      	str	r1, [r7, #20]
  char _outCharArray[_sz];
    27dc:	60fb      	str	r3, [r7, #12]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    27de:	1c72      	adds	r2, r6, #1
    27e0:	2300      	movs	r3, #0
    27e2:	4669      	mov	r1, sp
    27e4:	f7ff fdd0 	bl	2388 <_ZNK6String8getBytesEPhjj>
  data.toCharArray(_outCharArray, _sz);

  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    27e8:	0020      	movs	r0, r4
    27ea:	f000 fa3d 	bl	2c68 <_ZN8SPIFlash18_isChipPoweredDownEv>
    27ee:	1e05      	subs	r5, r0, #0
    27f0:	d002      	beq.n	27f8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x3c>
    return false;
    27f2:	2300      	movs	r3, #0
    27f4:	61bb      	str	r3, [r7, #24]
    27f6:	e074      	b.n	28e2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    27f8:	2204      	movs	r2, #4
    27fa:	6979      	ldr	r1, [r7, #20]
    27fc:	0020      	movs	r0, r4
    27fe:	f000 f90b 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    2802:	2800      	cmp	r0, #0
    2804:	d0f5      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    2806:	1d72      	adds	r2, r6, #5
    2808:	6979      	ldr	r1, [r7, #20]
    280a:	0020      	movs	r0, r4
    280c:	f000 f980 	bl	2b10 <_ZN8SPIFlash15_notPrevWrittenEmm>
    2810:	2800      	cmp	r0, #0
    2812:	d0ee      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    2814:	497c      	ldr	r1, [pc, #496]	; (2a08 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    2816:	0020      	movs	r0, r4
    2818:	f000 fa34 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    281c:	2800      	cmp	r0, #0
    281e:	d0e8      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    2820:	2101      	movs	r1, #1
    2822:	0020      	movs	r0, r4
    2824:	f000 fa54 	bl	2cd0 <_ZN8SPIFlash12_writeEnableEb>
    2828:	2800      	cmp	r0, #0
    282a:	d0e2      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
  }

  _beginSPI(PAGEPROG);
    282c:	2102      	movs	r1, #2
    282e:	0020      	movs	r0, r4
    2830:	f000 f93e 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    _nextByte(WRITE, _sz >> (8*i));
    2834:	69fa      	ldr	r2, [r7, #28]
    2836:	0026      	movs	r6, r4
    2838:	40ea      	lsrs	r2, r5
    283a:	362c      	adds	r6, #44	; 0x2c
    283c:	b2d2      	uxtb	r2, r2
    283e:	7831      	ldrb	r1, [r6, #0]
    2840:	0020      	movs	r0, r4
    2842:	3508      	adds	r5, #8
    2844:	f000 f988 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    2848:	2d20      	cmp	r5, #32
    284a:	d1f3      	bne.n	2834 <_ZN8SPIFlash8writeStrEmR6Stringb+0x78>
  }
  CHIP_DESELECT
    284c:	2101      	movs	r1, #1
    284e:	7c20      	ldrb	r0, [r4, #16]
    2850:	f7ff fc7a 	bl	2148 <digitalWrite>
  _endSPI();
    2854:	0020      	movs	r0, r4
    2856:	f000 f9f5 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>

  if(!_addressCheck(_addr+sizeof(_sz), _sz) || !_notBusy() || !_writeEnable()) {
    285a:	697b      	ldr	r3, [r7, #20]
    285c:	69fa      	ldr	r2, [r7, #28]
    285e:	3304      	adds	r3, #4
    2860:	0019      	movs	r1, r3
    2862:	0020      	movs	r0, r4
    2864:	60bb      	str	r3, [r7, #8]
    2866:	f000 f8d7 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    286a:	2800      	cmp	r0, #0
    286c:	d0c1      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    286e:	4966      	ldr	r1, [pc, #408]	; (2a08 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    2870:	0020      	movs	r0, r4
    2872:	f000 fa07 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2876:	2800      	cmp	r0, #0
    2878:	d0bb      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    287a:	2101      	movs	r1, #1
    287c:	0020      	movs	r0, r4
    287e:	f000 fa27 	bl	2cd0 <_ZN8SPIFlash12_writeEnableEb>
    2882:	61b8      	str	r0, [r7, #24]
    2884:	2800      	cmp	r0, #0
    2886:	d0b4      	beq.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    return false;
  }
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    2888:	2580      	movs	r5, #128	; 0x80
    288a:	7d3b      	ldrb	r3, [r7, #20]
    288c:	006d      	lsls	r5, r5, #1
    288e:	1aed      	subs	r5, r5, r3

  if (_sz <= maxBytes) {
    2890:	69fb      	ldr	r3, [r7, #28]
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    2892:	b2ad      	uxth	r5, r5
  if (_sz <= maxBytes) {
    2894:	42ab      	cmp	r3, r5
    2896:	d828      	bhi.n	28ea <_ZN8SPIFlash8writeStrEmR6Stringb+0x12e>
    CHIP_SELECT
    2898:	7c20      	ldrb	r0, [r4, #16]
    289a:	2100      	movs	r1, #0
    289c:	f7ff fc54 	bl	2148 <digitalWrite>
    _nextByte(WRITE, PAGEPROG);
    28a0:	7831      	ldrb	r1, [r6, #0]
    28a2:	2202      	movs	r2, #2
    28a4:	0020      	movs	r0, r4
    28a6:	f000 f957 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    28aa:	0020      	movs	r0, r4
    28ac:	f000 f8d8 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
    //_nextBuf(PAGEPROG, &_outCharArray[0], _sz);
    for (uint16_t i = 0; i < _sz; ++i) {
    28b0:	2500      	movs	r5, #0
    28b2:	69fb      	ldr	r3, [r7, #28]
    28b4:	42ab      	cmp	r3, r5
    28b6:	d90a      	bls.n	28ce <_ZN8SPIFlash8writeStrEmR6Stringb+0x112>
      _nextByte(WRITE, _outCharArray[i]);
    28b8:	68fb      	ldr	r3, [r7, #12]
    28ba:	0020      	movs	r0, r4
    28bc:	5d5a      	ldrb	r2, [r3, r5]
    28be:	0023      	movs	r3, r4
    28c0:	332c      	adds	r3, #44	; 0x2c
    28c2:	7819      	ldrb	r1, [r3, #0]
    for (uint16_t i = 0; i < _sz; ++i) {
    28c4:	3501      	adds	r5, #1
      _nextByte(WRITE, _outCharArray[i]);
    28c6:	f000 f947 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    for (uint16_t i = 0; i < _sz; ++i) {
    28ca:	b2ad      	uxth	r5, r5
    28cc:	e7f1      	b.n	28b2 <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    }
    CHIP_DESELECT
    28ce:	7c20      	ldrb	r0, [r4, #16]
    28d0:	2101      	movs	r1, #1
    28d2:	f7ff fc39 	bl	2148 <digitalWrite>
      }

    } while (length > 0);
  }

  if (!errorCheck) {
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2b00      	cmp	r3, #0
    28da:	d14f      	bne.n	297c <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c0>
    _endSPI();
    28dc:	0020      	movs	r0, r4
    28de:	f000 f9b1 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros() - _spifuncruntime;
    #endif
  }
  return true;
}
    28e2:	46bd      	mov	sp, r7
    28e4:	69b8      	ldr	r0, [r7, #24]
    28e6:	b009      	add	sp, #36	; 0x24
    28e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t length = _sz;
    28ea:	8bbb      	ldrh	r3, [r7, #28]
    28ec:	617b      	str	r3, [r7, #20]
    uint16_t data_offset = 0;
    28ee:	2300      	movs	r3, #0
    28f0:	613b      	str	r3, [r7, #16]
      writeBufSz = (length<=maxBytes) ? length : maxBytes;
    28f2:	697b      	ldr	r3, [r7, #20]
    28f4:	42ab      	cmp	r3, r5
    28f6:	dc00      	bgt.n	28fa <_ZN8SPIFlash8writeStrEmR6Stringb+0x13e>
    28f8:	001d      	movs	r5, r3
      CHIP_SELECT
    28fa:	7c20      	ldrb	r0, [r4, #16]
    28fc:	2100      	movs	r1, #0
    28fe:	f7ff fc23 	bl	2148 <digitalWrite>
      _nextByte(WRITE, PAGEPROG);
    2902:	0023      	movs	r3, r4
    2904:	332c      	adds	r3, #44	; 0x2c
    2906:	7819      	ldrb	r1, [r3, #0]
    2908:	2202      	movs	r2, #2
    290a:	0020      	movs	r0, r4
    290c:	f000 f924 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
      _transferAddress();
    2910:	0020      	movs	r0, r4
    2912:	f000 f8a5 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    2916:	2600      	movs	r6, #0
    2918:	42ae      	cmp	r6, r5
    291a:	da0c      	bge.n	2936 <_ZN8SPIFlash8writeStrEmR6Stringb+0x17a>
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    291c:	693a      	ldr	r2, [r7, #16]
    291e:	68fb      	ldr	r3, [r7, #12]
    2920:	0020      	movs	r0, r4
    2922:	189b      	adds	r3, r3, r2
    2924:	5d9a      	ldrb	r2, [r3, r6]
    2926:	0023      	movs	r3, r4
    2928:	332c      	adds	r3, #44	; 0x2c
    292a:	7819      	ldrb	r1, [r3, #0]
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    292c:	3601      	adds	r6, #1
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    292e:	f000 f913 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    2932:	b2b6      	uxth	r6, r6
    2934:	e7f0      	b.n	2918 <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
      CHIP_DESELECT
    2936:	7c20      	ldrb	r0, [r4, #16]
    2938:	2101      	movs	r1, #1
    293a:	f7ff fc05 	bl	2148 <digitalWrite>
      _currentAddress += writeBufSz;
    293e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if(!_notBusy() || !_writeEnable()){
    2940:	4931      	ldr	r1, [pc, #196]	; (2a08 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
      _currentAddress += writeBufSz;
    2942:	195b      	adds	r3, r3, r5
    2944:	67a3      	str	r3, [r4, #120]	; 0x78
      data_offset += writeBufSz;
    2946:	693b      	ldr	r3, [r7, #16]
      if(!_notBusy() || !_writeEnable()){
    2948:	0020      	movs	r0, r4
      data_offset += writeBufSz;
    294a:	195b      	adds	r3, r3, r5
    294c:	b29b      	uxth	r3, r3
    294e:	613b      	str	r3, [r7, #16]
      length -= writeBufSz;
    2950:	697b      	ldr	r3, [r7, #20]
    2952:	1b5d      	subs	r5, r3, r5
    2954:	b2ab      	uxth	r3, r5
    2956:	617b      	str	r3, [r7, #20]
      if(!_notBusy() || !_writeEnable()){
    2958:	f000 f994 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    295c:	2800      	cmp	r0, #0
    295e:	d100      	bne.n	2962 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1a6>
    2960:	e747      	b.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    2962:	2101      	movs	r1, #1
    2964:	0020      	movs	r0, r4
    2966:	f000 f9b3 	bl	2cd0 <_ZN8SPIFlash12_writeEnableEb>
    296a:	2800      	cmp	r0, #0
    296c:	d100      	bne.n	2970 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b4>
    296e:	e740      	b.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    2970:	2580      	movs	r5, #128	; 0x80
    } while (length > 0);
    2972:	697b      	ldr	r3, [r7, #20]
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    2974:	006d      	lsls	r5, r5, #1
    } while (length > 0);
    2976:	2b00      	cmp	r3, #0
    2978:	d1bb      	bne.n	28f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x136>
    297a:	e7ac      	b.n	28d6 <_ZN8SPIFlash8writeStrEmR6Stringb+0x11a>
    }
    297c:	466b      	mov	r3, sp
    if (!_notBusy()) {
    297e:	4922      	ldr	r1, [pc, #136]	; (2a08 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    2980:	0020      	movs	r0, r4
    }
    2982:	617b      	str	r3, [r7, #20]
    if (!_notBusy()) {
    2984:	f000 f97e 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2988:	61b8      	str	r0, [r7, #24]
    298a:	2800      	cmp	r0, #0
    298c:	d038      	beq.n	2a00 <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    char _inCharArray[_sz];
    298e:	466a      	mov	r2, sp
    _currentAddress = (_addr + sizeof(_sz));
    2990:	68bb      	ldr	r3, [r7, #8]
    CHIP_SELECT
    2992:	7c20      	ldrb	r0, [r4, #16]
    _currentAddress = (_addr + sizeof(_sz));
    2994:	67a3      	str	r3, [r4, #120]	; 0x78
    char _inCharArray[_sz];
    2996:	69fb      	ldr	r3, [r7, #28]
    CHIP_SELECT
    2998:	2100      	movs	r1, #0
    char _inCharArray[_sz];
    299a:	3307      	adds	r3, #7
    299c:	08db      	lsrs	r3, r3, #3
    299e:	00db      	lsls	r3, r3, #3
    29a0:	1ad3      	subs	r3, r2, r3
    29a2:	469d      	mov	sp, r3
    CHIP_SELECT
    29a4:	f7ff fbd0 	bl	2148 <digitalWrite>
    _nextByte(WRITE, READDATA);
    29a8:	0023      	movs	r3, r4
    29aa:	332c      	adds	r3, #44	; 0x2c
    29ac:	7819      	ldrb	r1, [r3, #0]
    29ae:	2203      	movs	r2, #3
    29b0:	0020      	movs	r0, r4
    29b2:	f000 f8d1 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    29b6:	0020      	movs	r0, r4
    char _inCharArray[_sz];
    29b8:	466e      	mov	r6, sp
    _transferAddress();
    29ba:	f000 f851 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
    for (uint8_t i = 0; i < _sz; i++) {
    29be:	2500      	movs	r5, #0
    29c0:	69fb      	ldr	r3, [r7, #28]
    29c2:	42ab      	cmp	r3, r5
    29c4:	d90a      	bls.n	29dc <_ZN8SPIFlash8writeStrEmR6Stringb+0x220>
      _inCharArray[i] = _nextByte(READ);
    29c6:	0023      	movs	r3, r4
    29c8:	332b      	adds	r3, #43	; 0x2b
    29ca:	7819      	ldrb	r1, [r3, #0]
    29cc:	2200      	movs	r2, #0
    29ce:	0020      	movs	r0, r4
    29d0:	f000 f8c2 	bl	2b58 <_ZN8SPIFlash9_nextByteEch>
    29d4:	5570      	strb	r0, [r6, r5]
    for (uint8_t i = 0; i < _sz; i++) {
    29d6:	3501      	adds	r5, #1
    29d8:	b2ed      	uxtb	r5, r5
    29da:	e7f1      	b.n	29c0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x204>
    _endSPI();
    29dc:	0020      	movs	r0, r4
    29de:	f000 f931 	bl	2c44 <_ZN8SPIFlash7_endSPIEv>
    for (uint8_t i = 0; i < _sz; i++) {
    29e2:	2300      	movs	r3, #0
    29e4:	69fa      	ldr	r2, [r7, #28]
    29e6:	429a      	cmp	r2, r3
    29e8:	d907      	bls.n	29fa <_ZN8SPIFlash8writeStrEmR6Stringb+0x23e>
      if (_inCharArray[i] != _outCharArray[i]) {
    29ea:	68fa      	ldr	r2, [r7, #12]
    29ec:	5cf1      	ldrb	r1, [r6, r3]
    29ee:	5cd2      	ldrb	r2, [r2, r3]
    29f0:	4291      	cmp	r1, r2
    29f2:	d105      	bne.n	2a00 <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    for (uint8_t i = 0; i < _sz; i++) {
    29f4:	3301      	adds	r3, #1
    29f6:	b2db      	uxtb	r3, r3
    29f8:	e7f4      	b.n	29e4 <_ZN8SPIFlash8writeStrEmR6Stringb+0x228>
    29fa:	697b      	ldr	r3, [r7, #20]
    29fc:	469d      	mov	sp, r3
  return true;
    29fe:	e770      	b.n	28e2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
    2a00:	697b      	ldr	r3, [r7, #20]
    2a02:	469d      	mov	sp, r3
    2a04:	e6f5      	b.n	27f2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	3b9aca00 	.word	0x3b9aca00

00002a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>:
   return true;
 }
 //SPI data lines are left open until _endSPI() is called

 //Reads/Writes next byte. Call 'n' times to read/write 'n' number of bytes. Should be called after _beginSPI()
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    2a0c:	b510      	push	{r4, lr}
     } rxData, txData;
     txData.val = data;
     spi_transfer(txData.dataBuf, rxData.dataBuf, 1);
     return rxData.val;
   #else
     return xfer(data);
    2a0e:	68c0      	ldr	r0, [r0, #12]
    2a10:	f000 fb88 	bl	3124 <_ZN8SPIClass8transferEh>
   #endif
 #else
   return xfer(data);
 #endif
 }
    2a14:	bd10      	pop	{r4, pc}
	...

00002a18 <_ZN8SPIFlash13_addressCheckEmm>:
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    2a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a1a:	000f      	movs	r7, r1
   uint8_t _errorcode = error();
    2a1c:	2100      	movs	r1, #0
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    2a1e:	0005      	movs	r5, r0
    2a20:	0016      	movs	r6, r2
   uint8_t _errorcode = error();
    2a22:	f7ff fd41 	bl	24a8 <_ZN8SPIFlash5errorEb>
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    2a26:	23f7      	movs	r3, #247	; 0xf7
    2a28:	4003      	ands	r3, r0
     return false;
    2a2a:	2000      	movs	r0, #0
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    2a2c:	2b03      	cmp	r3, #3
    2a2e:	d008      	beq.n	2a42 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
 	if (!_chip.capacity) {
    2a30:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    2a32:	4284      	cmp	r4, r0
    2a34:	d106      	bne.n	2a44 <_ZN8SPIFlash13_addressCheckEmm+0x2c>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    2a36:	4809      	ldr	r0, [pc, #36]	; (2a5c <_ZN8SPIFlash13_addressCheckEmm+0x44>)
    2a38:	0022      	movs	r2, r4
    2a3a:	2101      	movs	r1, #1
    2a3c:	f001 f822 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2a40:	0020      	movs	r0, r4
 }
    2a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if (_submittedAddress + size >= _chip.capacity) {
    2a44:	19be      	adds	r6, r7, r6
    2a46:	42b4      	cmp	r4, r6
    2a48:	d804      	bhi.n	2a54 <_ZN8SPIFlash13_addressCheckEmm+0x3c>
     _addressOverflow = ((_submittedAddress + size) - _chip.capacity);
    2a4a:	1b36      	subs	r6, r6, r4
    2a4c:	67ee      	str	r6, [r5, #124]	; 0x7c
     _currentAddress = _addr;
    2a4e:	67af      	str	r7, [r5, #120]	; 0x78
     return true;				// Not at end of memory if (address < _chip.capacity)
    2a50:	2001      	movs	r0, #1
    2a52:	e7f6      	b.n	2a42 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
     _addressOverflow = false;
    2a54:	2300      	movs	r3, #0
    2a56:	67eb      	str	r3, [r5, #124]	; 0x7c
    2a58:	e7f9      	b.n	2a4e <_ZN8SPIFlash13_addressCheckEmm+0x36>
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	20000d14 	.word	0x20000d14

00002a60 <_ZN8SPIFlash16_transferAddressEv>:
 bool SPIFlash::_transferAddress(void) {
    2a60:	b510      	push	{r4, lr}
   if (address4ByteEnabled) {
    2a62:	7fc3      	ldrb	r3, [r0, #31]
 bool SPIFlash::_transferAddress(void) {
    2a64:	0004      	movs	r4, r0
   if (address4ByteEnabled) {
    2a66:	2b00      	cmp	r3, #0
    2a68:	d004      	beq.n	2a74 <_ZN8SPIFlash16_transferAddressEv+0x14>
     _nextByte(WRITE, Highest(_currentAddress));
    2a6a:	0003      	movs	r3, r0
    2a6c:	337b      	adds	r3, #123	; 0x7b
    2a6e:	7819      	ldrb	r1, [r3, #0]
    2a70:	f7ff ffcc 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Higher(_currentAddress));
    2a74:	0023      	movs	r3, r4
    2a76:	337a      	adds	r3, #122	; 0x7a
    2a78:	7819      	ldrb	r1, [r3, #0]
    2a7a:	0020      	movs	r0, r4
    2a7c:	f7ff ffc6 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Hi(_currentAddress));
    2a80:	0023      	movs	r3, r4
    2a82:	3379      	adds	r3, #121	; 0x79
    2a84:	7819      	ldrb	r1, [r3, #0]
    2a86:	0020      	movs	r0, r4
    2a88:	f7ff ffc0 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Lo(_currentAddress));
    2a8c:	0023      	movs	r3, r4
    2a8e:	3378      	adds	r3, #120	; 0x78
    2a90:	7819      	ldrb	r1, [r3, #0]
    2a92:	0020      	movs	r0, r4
    2a94:	f7ff ffba 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
 }
    2a98:	2001      	movs	r0, #1
    2a9a:	bd10      	pop	{r4, pc}

00002a9c <_ZN8SPIFlash12_startSPIBusEv>:
 bool SPIFlash::_startSPIBus(void) {
    2a9c:	b510      	push	{r4, lr}
       _spi->beginTransaction(_settings);
    2a9e:	6801      	ldr	r1, [r0, #0]
 bool SPIFlash::_startSPIBus(void) {
    2aa0:	0004      	movs	r4, r0
       _spi->beginTransaction(_settings);
    2aa2:	6842      	ldr	r2, [r0, #4]
    2aa4:	68c0      	ldr	r0, [r0, #12]
    2aa6:	f000 fb0d 	bl	30c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
   SPIBusState = true;
    2aaa:	2001      	movs	r0, #1
    2aac:	7760      	strb	r0, [r4, #29]
 }
    2aae:	bd10      	pop	{r4, pc}

00002ab0 <_ZN8SPIFlash9_beginSPIEh>:
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    2ab0:	b570      	push	{r4, r5, r6, lr}
   if (!SPIBusState) {
    2ab2:	7f43      	ldrb	r3, [r0, #29]
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    2ab4:	0004      	movs	r4, r0
    2ab6:	000d      	movs	r5, r1
   if (!SPIBusState) {
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d101      	bne.n	2ac0 <_ZN8SPIFlash9_beginSPIEh+0x10>
     _startSPIBus();
    2abc:	f7ff ffee 	bl	2a9c <_ZN8SPIFlash12_startSPIBusEv>
   CHIP_SELECT
    2ac0:	7c20      	ldrb	r0, [r4, #16]
    2ac2:	2100      	movs	r1, #0
    2ac4:	f7ff fb40 	bl	2148 <digitalWrite>
   switch (opcode) {
    2ac8:	2d0b      	cmp	r5, #11
    2aca:	d015      	beq.n	2af8 <_ZN8SPIFlash9_beginSPIEh+0x48>
    2acc:	d805      	bhi.n	2ada <_ZN8SPIFlash9_beginSPIEh+0x2a>
    2ace:	2d02      	cmp	r5, #2
    2ad0:	d009      	beq.n	2ae6 <_ZN8SPIFlash9_beginSPIEh+0x36>
    2ad2:	2d03      	cmp	r5, #3
    2ad4:	d007      	beq.n	2ae6 <_ZN8SPIFlash9_beginSPIEh+0x36>
     _nextByte(WRITE, opcode);
    2ad6:	0029      	movs	r1, r5
    2ad8:	e016      	b.n	2b08 <_ZN8SPIFlash9_beginSPIEh+0x58>
   switch (opcode) {
    2ada:	2d52      	cmp	r5, #82	; 0x52
    2adc:	d003      	beq.n	2ae6 <_ZN8SPIFlash9_beginSPIEh+0x36>
    2ade:	2dd8      	cmp	r5, #216	; 0xd8
    2ae0:	d001      	beq.n	2ae6 <_ZN8SPIFlash9_beginSPIEh+0x36>
    2ae2:	2d20      	cmp	r5, #32
    2ae4:	d1f7      	bne.n	2ad6 <_ZN8SPIFlash9_beginSPIEh+0x26>
     _nextByte(WRITE, opcode);
    2ae6:	0029      	movs	r1, r5
    2ae8:	0020      	movs	r0, r4
    2aea:	f7ff ff8f 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    2aee:	0020      	movs	r0, r4
    2af0:	f7ff ffb6 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
 }
    2af4:	2001      	movs	r0, #1
    2af6:	bd70      	pop	{r4, r5, r6, pc}
     _nextByte(WRITE, opcode);
    2af8:	0029      	movs	r1, r5
    2afa:	0020      	movs	r0, r4
    2afc:	f7ff ff86 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    2b00:	0020      	movs	r0, r4
    2b02:	f7ff ffad 	bl	2a60 <_ZN8SPIFlash16_transferAddressEv>
     _nextByte(WRITE, DUMMYBYTE);
    2b06:	21ee      	movs	r1, #238	; 0xee
     _nextByte(WRITE, opcode);
    2b08:	0020      	movs	r0, r4
    2b0a:	f7ff ff7f 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     break;
    2b0e:	e7f1      	b.n	2af4 <_ZN8SPIFlash9_beginSPIEh+0x44>

00002b10 <_ZN8SPIFlash15_notPrevWrittenEmm>:
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    2b10:	b570      	push	{r4, r5, r6, lr}
   _beginSPI(READDATA);
    2b12:	2103      	movs	r1, #3
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    2b14:	0004      	movs	r4, r0
    2b16:	0016      	movs	r6, r2
   for (uint32_t i = 0; i < size; i++) {
    2b18:	2500      	movs	r5, #0
   _beginSPI(READDATA);
    2b1a:	f7ff ffc9 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
   for (uint32_t i = 0; i < size; i++) {
    2b1e:	42b5      	cmp	r5, r6
    2b20:	d012      	beq.n	2b48 <_ZN8SPIFlash15_notPrevWrittenEmm+0x38>
     return xfer(data);
    2b22:	2100      	movs	r1, #0
    2b24:	68e0      	ldr	r0, [r4, #12]
    2b26:	f000 fafd 	bl	3124 <_ZN8SPIClass8transferEh>
     if (_nextByte(READ) != 0xFF) {
    2b2a:	28ff      	cmp	r0, #255	; 0xff
    2b2c:	d00a      	beq.n	2b44 <_ZN8SPIFlash15_notPrevWrittenEmm+0x34>
       CHIP_DESELECT;
    2b2e:	7c20      	ldrb	r0, [r4, #16]
    2b30:	2101      	movs	r1, #1
    2b32:	f7ff fb09 	bl	2148 <digitalWrite>
   diagnostics.troubleshoot(_code, printoverride);
    2b36:	4807      	ldr	r0, [pc, #28]	; (2b54 <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>)
    2b38:	2200      	movs	r2, #0
    2b3a:	2107      	movs	r1, #7
    2b3c:	f000 ffa2 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2b40:	2000      	movs	r0, #0
 }
    2b42:	bd70      	pop	{r4, r5, r6, pc}
   for (uint32_t i = 0; i < size; i++) {
    2b44:	3501      	adds	r5, #1
    2b46:	e7ea      	b.n	2b1e <_ZN8SPIFlash15_notPrevWrittenEmm+0xe>
   CHIP_DESELECT
    2b48:	7c20      	ldrb	r0, [r4, #16]
    2b4a:	2101      	movs	r1, #1
    2b4c:	f7ff fafc 	bl	2148 <digitalWrite>
   return true;
    2b50:	2001      	movs	r0, #1
    2b52:	e7f6      	b.n	2b42 <_ZN8SPIFlash15_notPrevWrittenEmm+0x32>
    2b54:	20000d14 	.word	0x20000d14

00002b58 <_ZN8SPIFlash9_nextByteEch>:
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    2b58:	b510      	push	{r4, lr}
     return xfer(data);
    2b5a:	0011      	movs	r1, r2
    2b5c:	68c0      	ldr	r0, [r0, #12]
    2b5e:	f000 fae1 	bl	3124 <_ZN8SPIClass8transferEh>
 }
    2b62:	bd10      	pop	{r4, pc}

00002b64 <_ZN8SPIFlash8_nextBufEhPhm>:
 void SPIFlash::_nextBuf(uint8_t opcode, uint8_t *data_buffer, uint32_t size) {
    2b64:	b510      	push	{r4, lr}
    2b66:	000c      	movs	r4, r1
    2b68:	0011      	movs	r1, r2
    2b6a:	001a      	movs	r2, r3
   switch (opcode) {
    2b6c:	2c02      	cmp	r4, #2
    2b6e:	d001      	beq.n	2b74 <_ZN8SPIFlash8_nextBufEhPhm+0x10>
    2b70:	2c03      	cmp	r4, #3
    2b72:	d102      	bne.n	2b7a <_ZN8SPIFlash8_nextBufEhPhm+0x16>
         _spi->transfer(&data_buffer[0], size);
    2b74:	68c0      	ldr	r0, [r0, #12]
    2b76:	f000 fada 	bl	312e <_ZN8SPIClass8transferEPvj>
 }
    2b7a:	bd10      	pop	{r4, pc}

00002b7c <_ZN8SPIFlash10_readStat1Ev>:
 uint8_t SPIFlash::_readStat1(void) {
    2b7c:	b570      	push	{r4, r5, r6, lr}
    2b7e:	0004      	movs	r4, r0
   _beginSPI(READSTAT1);
    2b80:	2105      	movs	r1, #5
    2b82:	f7ff ff95 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    2b86:	2100      	movs	r1, #0
    2b88:	68e0      	ldr	r0, [r4, #12]
    2b8a:	f000 facb 	bl	3124 <_ZN8SPIClass8transferEh>
   stat1 = _nextByte(READ);
    2b8e:	1d25      	adds	r5, r4, #4
    2b90:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    2b92:	7c20      	ldrb	r0, [r4, #16]
    2b94:	2101      	movs	r1, #1
    2b96:	f7ff fad7 	bl	2148 <digitalWrite>
   return stat1;
    2b9a:	7fe8      	ldrb	r0, [r5, #31]
 }
    2b9c:	bd70      	pop	{r4, r5, r6, pc}

00002b9e <_ZN8SPIFlash10_readStat3Ev>:
 uint8_t SPIFlash::_readStat3(void) {
    2b9e:	b570      	push	{r4, r5, r6, lr}
    2ba0:	0004      	movs	r4, r0
   _beginSPI(READSTAT3);
    2ba2:	2115      	movs	r1, #21
    2ba4:	f7ff ff84 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    2ba8:	2100      	movs	r1, #0
    2baa:	68e0      	ldr	r0, [r4, #12]
    2bac:	f000 faba 	bl	3124 <_ZN8SPIClass8transferEh>
   stat3 = _nextByte(READ);
    2bb0:	1da5      	adds	r5, r4, #6
    2bb2:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    2bb4:	7c20      	ldrb	r0, [r4, #16]
    2bb6:	2101      	movs	r1, #1
    2bb8:	f7ff fac6 	bl	2148 <digitalWrite>
   return stat3;
    2bbc:	7fe8      	ldrb	r0, [r5, #31]
 }
    2bbe:	bd70      	pop	{r4, r5, r6, pc}

00002bc0 <_ZN8SPIFlash22_enable4ByteAddressingEv>:
 bool SPIFlash::_enable4ByteAddressing(void) {
    2bc0:	b570      	push	{r4, r5, r6, lr}
    2bc2:	0006      	movs	r6, r0
     return true;
    2bc4:	2401      	movs	r4, #1
   if (_readStat3() & ADS) {
    2bc6:	f7ff ffea 	bl	2b9e <_ZN8SPIFlash10_readStat3Ev>
    2bca:	4220      	tst	r0, r4
    2bcc:	d10e      	bne.n	2bec <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
   _beginSPI(ADDR4BYTE_EN);
    2bce:	21b7      	movs	r1, #183	; 0xb7
    2bd0:	0030      	movs	r0, r6
    2bd2:	f7ff ff6d 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    2bd6:	7c30      	ldrb	r0, [r6, #16]
    2bd8:	0021      	movs	r1, r4
    2bda:	f7ff fab5 	bl	2148 <digitalWrite>
   if (_readStat3() & ADS) {
    2bde:	0030      	movs	r0, r6
    2be0:	f7ff ffdd 	bl	2b9e <_ZN8SPIFlash10_readStat3Ev>
    2be4:	4020      	ands	r0, r4
    2be6:	1e05      	subs	r5, r0, #0
    2be8:	d002      	beq.n	2bf0 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x30>
     address4ByteEnabled = true;
    2bea:	77f4      	strb	r4, [r6, #31]
 }
    2bec:	0020      	movs	r0, r4
    2bee:	bd70      	pop	{r4, r5, r6, pc}
   diagnostics.troubleshoot(_code, printoverride);
    2bf0:	0002      	movs	r2, r0
    2bf2:	210d      	movs	r1, #13
    2bf4:	4802      	ldr	r0, [pc, #8]	; (2c00 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x40>)
    2bf6:	f000 ff45 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2bfa:	002c      	movs	r4, r5
    2bfc:	e7f6      	b.n	2bec <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	20000d14 	.word	0x20000d14

00002c04 <_ZN8SPIFlash23_disable4ByteAddressingEv>:
 bool SPIFlash::_disable4ByteAddressing(void) {
    2c04:	b570      	push	{r4, r5, r6, lr}
    2c06:	0005      	movs	r5, r0
     return true;
    2c08:	2401      	movs	r4, #1
   if (!(_readStat3() & ADS)) {      // If 4 byte addressing is disabled (default state)
    2c0a:	f7ff ffc8 	bl	2b9e <_ZN8SPIFlash10_readStat3Ev>
    2c0e:	4220      	tst	r0, r4
    2c10:	d012      	beq.n	2c38 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
   _beginSPI(ADDR4BYTE_DIS);
    2c12:	21e9      	movs	r1, #233	; 0xe9
    2c14:	0028      	movs	r0, r5
    2c16:	f7ff ff4b 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    2c1a:	7c28      	ldrb	r0, [r5, #16]
    2c1c:	0021      	movs	r1, r4
    2c1e:	f7ff fa93 	bl	2148 <digitalWrite>
   if (_readStat3() & ADS) {
    2c22:	0028      	movs	r0, r5
    2c24:	f7ff ffbb 	bl	2b9e <_ZN8SPIFlash10_readStat3Ev>
    2c28:	4020      	ands	r0, r4
    2c2a:	d007      	beq.n	2c3c <_ZN8SPIFlash23_disable4ByteAddressingEv+0x38>
   diagnostics.troubleshoot(_code, printoverride);
    2c2c:	2200      	movs	r2, #0
    2c2e:	210e      	movs	r1, #14
    2c30:	4803      	ldr	r0, [pc, #12]	; (2c40 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x3c>)
    2c32:	f000 ff27 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2c36:	2400      	movs	r4, #0
 }
    2c38:	0020      	movs	r0, r4
    2c3a:	bd70      	pop	{r4, r5, r6, pc}
   address4ByteEnabled = false;
    2c3c:	77e8      	strb	r0, [r5, #31]
   return true;
    2c3e:	e7fb      	b.n	2c38 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
    2c40:	20000d14 	.word	0x20000d14

00002c44 <_ZN8SPIFlash7_endSPIEv>:
 void SPIFlash::_endSPI(void) {
    2c44:	b510      	push	{r4, lr}
    2c46:	0004      	movs	r4, r0
   CHIP_DESELECT
    2c48:	2101      	movs	r1, #1
    2c4a:	7c00      	ldrb	r0, [r0, #16]
    2c4c:	f7ff fa7c 	bl	2148 <digitalWrite>
   if (address4ByteEnabled) {          // If the previous operation enabled 4-byte addressing, disable it
    2c50:	7fe3      	ldrb	r3, [r4, #31]
    2c52:	2b00      	cmp	r3, #0
    2c54:	d002      	beq.n	2c5c <_ZN8SPIFlash7_endSPIEv+0x18>
     _disable4ByteAddressing();
    2c56:	0020      	movs	r0, r4
    2c58:	f7ff ffd4 	bl	2c04 <_ZN8SPIFlash23_disable4ByteAddressingEv>
     _spi->endTransaction();
    2c5c:	68e0      	ldr	r0, [r4, #12]
    2c5e:	f000 fa4d 	bl	30fc <_ZN8SPIClass14endTransactionEv>
   SPIBusState = false;
    2c62:	2300      	movs	r3, #0
    2c64:	7763      	strb	r3, [r4, #29]
 }
    2c66:	bd10      	pop	{r4, pc}

00002c68 <_ZN8SPIFlash18_isChipPoweredDownEv>:
 bool SPIFlash::_isChipPoweredDown(void) {
    2c68:	b510      	push	{r4, lr}
   if (chipPoweredDown) {
    2c6a:	7f84      	ldrb	r4, [r0, #30]
    2c6c:	2c00      	cmp	r4, #0
    2c6e:	d004      	beq.n	2c7a <_ZN8SPIFlash18_isChipPoweredDownEv+0x12>
   diagnostics.troubleshoot(_code, printoverride);
    2c70:	2200      	movs	r2, #0
    2c72:	210f      	movs	r1, #15
    2c74:	4802      	ldr	r0, [pc, #8]	; (2c80 <_ZN8SPIFlash18_isChipPoweredDownEv+0x18>)
    2c76:	f000 ff05 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
 }
    2c7a:	0020      	movs	r0, r4
    2c7c:	bd10      	pop	{r4, pc}
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	20000d14 	.word	0x20000d14

00002c84 <_ZN8SPIFlash8_notBusyEm>:
 bool SPIFlash::_notBusy(uint32_t timeout) {
    2c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c86:	0006      	movs	r6, r0
    2c88:	000c      	movs	r4, r1
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    2c8a:	2320      	movs	r3, #32
    2c8c:	3b01      	subs	r3, #1
    2c8e:	d1fd      	bne.n	2c8c <_ZN8SPIFlash8_notBusyEm+0x8>
   uint32_t _time = micros();
    2c90:	f7fd fc48 	bl	524 <micros>
     if (!(stat1 & BUSY))
    2c94:	2701      	movs	r7, #1
   uint32_t _time = micros();
    2c96:	0005      	movs	r5, r0
     _readStat1();
    2c98:	0030      	movs	r0, r6
    2c9a:	f7ff ff6f 	bl	2b7c <_ZN8SPIFlash10_readStat1Ev>
     if (!(stat1 & BUSY))
    2c9e:	1d33      	adds	r3, r6, #4
    2ca0:	7fdb      	ldrb	r3, [r3, #31]
    2ca2:	423b      	tst	r3, r7
    2ca4:	d101      	bne.n	2caa <_ZN8SPIFlash8_notBusyEm+0x26>
       return true;
    2ca6:	2001      	movs	r0, #1
 }
    2ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   } while ((micros() - _time) < timeout);
    2caa:	f7fd fc3b 	bl	524 <micros>
    2cae:	1b40      	subs	r0, r0, r5
   do {
    2cb0:	42a0      	cmp	r0, r4
    2cb2:	d3f1      	bcc.n	2c98 <_ZN8SPIFlash8_notBusyEm+0x14>
   if (timeout <= (micros() - _time)) {
    2cb4:	f7fd fc36 	bl	524 <micros>
    2cb8:	1b40      	subs	r0, r0, r5
    2cba:	4284      	cmp	r4, r0
    2cbc:	d8f3      	bhi.n	2ca6 <_ZN8SPIFlash8_notBusyEm+0x22>
   diagnostics.troubleshoot(_code, printoverride);
    2cbe:	4803      	ldr	r0, [pc, #12]	; (2ccc <_ZN8SPIFlash8_notBusyEm+0x48>)
    2cc0:	2200      	movs	r2, #0
    2cc2:	2104      	movs	r1, #4
    2cc4:	f000 fede 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2cc8:	2000      	movs	r0, #0
    2cca:	e7ed      	b.n	2ca8 <_ZN8SPIFlash8_notBusyEm+0x24>
    2ccc:	20000d14 	.word	0x20000d14

00002cd0 <_ZN8SPIFlash12_writeEnableEb>:
 bool SPIFlash::_writeEnable(bool _troubleshootEnable) {
    2cd0:	b570      	push	{r4, r5, r6, lr}
    2cd2:	0004      	movs	r4, r0
    2cd4:	000d      	movs	r5, r1
   _beginSPI(WRITEENABLE);
    2cd6:	2106      	movs	r1, #6
    2cd8:	f7ff feea 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    2cdc:	7c20      	ldrb	r0, [r4, #16]
    2cde:	2101      	movs	r1, #1
    2ce0:	f7ff fa32 	bl	2148 <digitalWrite>
   if (!(_readStat1() & WRTEN)) {
    2ce4:	0020      	movs	r0, r4
    2ce6:	f7ff ff49 	bl	2b7c <_ZN8SPIFlash10_readStat1Ev>
    2cea:	2402      	movs	r4, #2
    2cec:	4004      	ands	r4, r0
    2cee:	d109      	bne.n	2d04 <_ZN8SPIFlash12_writeEnableEb+0x34>
     if (_troubleshootEnable) {
    2cf0:	2d00      	cmp	r5, #0
    2cf2:	d005      	beq.n	2d00 <_ZN8SPIFlash12_writeEnableEb+0x30>
   diagnostics.troubleshoot(_code, printoverride);
    2cf4:	0022      	movs	r2, r4
    2cf6:	2106      	movs	r1, #6
    2cf8:	4803      	ldr	r0, [pc, #12]	; (2d08 <_ZN8SPIFlash12_writeEnableEb+0x38>)
    2cfa:	f000 fec3 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2cfe:	0025      	movs	r5, r4
 }
    2d00:	0028      	movs	r0, r5
    2d02:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    2d04:	2501      	movs	r5, #1
    2d06:	e7fb      	b.n	2d00 <_ZN8SPIFlash12_writeEnableEb+0x30>
    2d08:	20000d14 	.word	0x20000d14

00002d0c <_ZN8SPIFlash5_prepEhmm>:
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    2d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d0e:	001e      	movs	r6, r3
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    2d10:	0003      	movs	r3, r0
    2d12:	3337      	adds	r3, #55	; 0x37
    2d14:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    2d16:	0004      	movs	r4, r0
    2d18:	000f      	movs	r7, r1
    2d1a:	0015      	movs	r5, r2
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    2d1c:	2bef      	cmp	r3, #239	; 0xef
    2d1e:	d014      	beq.n	2d4a <_ZN8SPIFlash5_prepEhmm+0x3e>
   switch (opcode) {
    2d20:	2f02      	cmp	r7, #2
    2d22:	d01b      	beq.n	2d5c <_ZN8SPIFlash5_prepEhmm+0x50>
    2d24:	2fef      	cmp	r7, #239	; 0xef
    2d26:	d037      	beq.n	2d98 <_ZN8SPIFlash5_prepEhmm+0x8c>
       if (_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy()) {
    2d28:	0020      	movs	r0, r4
    2d2a:	f7ff ff9d 	bl	2c68 <_ZN8SPIFlash18_isChipPoweredDownEv>
    2d2e:	2800      	cmp	r0, #0
    2d30:	d112      	bne.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2d32:	0032      	movs	r2, r6
    2d34:	0029      	movs	r1, r5
    2d36:	0020      	movs	r0, r4
    2d38:	f7ff fe6e 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d00b      	beq.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2d40:	491b      	ldr	r1, [pc, #108]	; (2db0 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    2d42:	0020      	movs	r0, r4
    2d44:	f7ff ff9e 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2d48:	e007      	b.n	2d5a <_ZN8SPIFlash5_prepEhmm+0x4e>
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    2d4a:	4b1a      	ldr	r3, [pc, #104]	; (2db4 <_ZN8SPIFlash5_prepEhmm+0xa8>)
    2d4c:	429a      	cmp	r2, r3
    2d4e:	d9e7      	bls.n	2d20 <_ZN8SPIFlash5_prepEhmm+0x14>
     if (!_enable4ByteAddressing()) {    // If unable to enable 4-byte addressing
    2d50:	f7ff ff36 	bl	2bc0 <_ZN8SPIFlash22_enable4ByteAddressingEv>
    2d54:	2800      	cmp	r0, #0
    2d56:	d1e3      	bne.n	2d20 <_ZN8SPIFlash5_prepEhmm+0x14>
       return false;
    2d58:	2000      	movs	r0, #0
 }
    2d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notPrevWritten(_addr, size) || !_notBusy() || !_writeEnable()) {
    2d5c:	0020      	movs	r0, r4
    2d5e:	f7ff ff83 	bl	2c68 <_ZN8SPIFlash18_isChipPoweredDownEv>
    2d62:	2800      	cmp	r0, #0
    2d64:	d1f8      	bne.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2d66:	0032      	movs	r2, r6
    2d68:	0029      	movs	r1, r5
    2d6a:	0020      	movs	r0, r4
    2d6c:	f7ff fe54 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    2d70:	2800      	cmp	r0, #0
    2d72:	d0f1      	beq.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2d74:	0032      	movs	r2, r6
    2d76:	0029      	movs	r1, r5
    2d78:	0020      	movs	r0, r4
    2d7a:	f7ff fec9 	bl	2b10 <_ZN8SPIFlash15_notPrevWrittenEmm>
     if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy() || !_writeEnable()) {
    2d7e:	2800      	cmp	r0, #0
    2d80:	d0ea      	beq.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2d82:	490b      	ldr	r1, [pc, #44]	; (2db0 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    2d84:	0020      	movs	r0, r4
    2d86:	f7ff ff7d 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2d8a:	2800      	cmp	r0, #0
    2d8c:	d0e4      	beq.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2d8e:	2101      	movs	r1, #1
    2d90:	0020      	movs	r0, r4
    2d92:	f7ff ff9d 	bl	2cd0 <_ZN8SPIFlash12_writeEnableEb>
    2d96:	e7e0      	b.n	2d5a <_ZN8SPIFlash5_prepEhmm+0x4e>
    2d98:	0020      	movs	r0, r4
    2d9a:	f7ff ff65 	bl	2c68 <_ZN8SPIFlash18_isChipPoweredDownEv>
    2d9e:	2800      	cmp	r0, #0
    2da0:	d1da      	bne.n	2d58 <_ZN8SPIFlash5_prepEhmm+0x4c>
    2da2:	0032      	movs	r2, r6
    2da4:	0029      	movs	r1, r5
    2da6:	0020      	movs	r0, r4
    2da8:	f7ff fe36 	bl	2a18 <_ZN8SPIFlash13_addressCheckEmm>
    2dac:	e7e7      	b.n	2d7e <_ZN8SPIFlash5_prepEhmm+0x72>
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	3b9aca00 	.word	0x3b9aca00
    2db4:	00ffffff 	.word	0x00ffffff

00002db8 <_ZN8SPIFlash13_writeDisableEv>:
 bool SPIFlash::_writeDisable(void) {
    2db8:	b510      	push	{r4, lr}
    2dba:	0004      	movs	r4, r0
 	_beginSPI(WRITEDISABLE);
    2dbc:	2104      	movs	r1, #4
    2dbe:	f7ff fe77 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    2dc2:	7c20      	ldrb	r0, [r4, #16]
    2dc4:	2101      	movs	r1, #1
    2dc6:	f7ff f9bf 	bl	2148 <digitalWrite>
 }
    2dca:	2001      	movs	r0, #1
    2dcc:	bd10      	pop	{r4, pc}
	...

00002dd0 <_ZN8SPIFlash11_getJedecIdEv>:
 bool SPIFlash::_getJedecId(void) {
    2dd0:	b570      	push	{r4, r5, r6, lr}
   if(!_notBusy()) {
    2dd2:	4917      	ldr	r1, [pc, #92]	; (2e30 <_ZN8SPIFlash11_getJedecIdEv+0x60>)
 bool SPIFlash::_getJedecId(void) {
    2dd4:	0004      	movs	r4, r0
   if(!_notBusy()) {
    2dd6:	f7ff ff55 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2dda:	1e05      	subs	r5, r0, #0
    2ddc:	d025      	beq.n	2e2a <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   _beginSPI(JEDECID);
    2dde:	219f      	movs	r1, #159	; 0x9f
    2de0:	0020      	movs	r0, r4
    2de2:	f7ff fe65 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    2de6:	0026      	movs	r6, r4
     return xfer(data);
    2de8:	2100      	movs	r1, #0
    2dea:	68e0      	ldr	r0, [r4, #12]
    2dec:	f000 f99a 	bl	3124 <_ZN8SPIClass8transferEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    2df0:	3637      	adds	r6, #55	; 0x37
    2df2:	7030      	strb	r0, [r6, #0]
     return xfer(data);
    2df4:	2100      	movs	r1, #0
    2df6:	68e0      	ldr	r0, [r4, #12]
    2df8:	f000 f994 	bl	3124 <_ZN8SPIClass8transferEh>
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    2dfc:	0023      	movs	r3, r4
    2dfe:	3338      	adds	r3, #56	; 0x38
    2e00:	7018      	strb	r0, [r3, #0]
     return xfer(data);
    2e02:	2100      	movs	r1, #0
    2e04:	68e0      	ldr	r0, [r4, #12]
    2e06:	f000 f98d 	bl	3124 <_ZN8SPIClass8transferEh>
 	_chip.capacityID = _nextByte(READ);		// capacity
    2e0a:	0023      	movs	r3, r4
    2e0c:	3339      	adds	r3, #57	; 0x39
    2e0e:	7018      	strb	r0, [r3, #0]
   CHIP_DESELECT
    2e10:	7c20      	ldrb	r0, [r4, #16]
    2e12:	2101      	movs	r1, #1
    2e14:	f7ff f998 	bl	2148 <digitalWrite>
   if (!_chip.manufacturerID) {
    2e18:	7834      	ldrb	r4, [r6, #0]
    2e1a:	2c00      	cmp	r4, #0
    2e1c:	d105      	bne.n	2e2a <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   diagnostics.troubleshoot(_code, printoverride);
    2e1e:	0022      	movs	r2, r4
    2e20:	210b      	movs	r1, #11
    2e22:	4804      	ldr	r0, [pc, #16]	; (2e34 <_ZN8SPIFlash11_getJedecIdEv+0x64>)
    2e24:	f000 fe2e 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2e28:	0025      	movs	r5, r4
 }
    2e2a:	0028      	movs	r0, r5
    2e2c:	bd70      	pop	{r4, r5, r6, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	3b9aca00 	.word	0x3b9aca00
    2e34:	20000d14 	.word	0x20000d14

00002e38 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:
   if (_chip.memoryTypeID == SST25) {
    2e38:	0003      	movs	r3, r0
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    2e3a:	b570      	push	{r4, r5, r6, lr}
   if (_chip.memoryTypeID == SST25) {
    2e3c:	3338      	adds	r3, #56	; 0x38
    2e3e:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    2e40:	0004      	movs	r4, r0
   if (_chip.memoryTypeID == SST25) {
    2e42:	2b25      	cmp	r3, #37	; 0x25
    2e44:	d11c      	bne.n	2e80 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x48>
     _readStat1();
    2e46:	f7ff fe99 	bl	2b7c <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    2e4a:	1d23      	adds	r3, r4, #4
    2e4c:	7fdd      	ldrb	r5, [r3, #31]
    2e4e:	233c      	movs	r3, #60	; 0x3c
     _beginSPI(WRITESTATEN);
    2e50:	2150      	movs	r1, #80	; 0x50
    2e52:	0020      	movs	r0, r4
     uint8_t _tempStat1 = stat1 & 0xC3;
    2e54:	439d      	bics	r5, r3
     _beginSPI(WRITESTATEN);
    2e56:	f7ff fe2b 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    2e5a:	7c20      	ldrb	r0, [r4, #16]
    2e5c:	2101      	movs	r1, #1
    2e5e:	f7ff f973 	bl	2148 <digitalWrite>
     _beginSPI(WRITESTAT1);
    2e62:	2101      	movs	r1, #1
    2e64:	0020      	movs	r0, r4
    2e66:	f7ff fe23 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
     _nextByte(WRITE, _tempStat1);
    2e6a:	0029      	movs	r1, r5
    2e6c:	0020      	movs	r0, r4
    2e6e:	f7ff fdcd 	bl	2a0c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     CHIP_DESELECT
    2e72:	7c20      	ldrb	r0, [r4, #16]
    2e74:	2101      	movs	r1, #1
    2e76:	f7ff f967 	bl	2148 <digitalWrite>
   return true;
    2e7a:	2501      	movs	r5, #1
 }
    2e7c:	0028      	movs	r0, r5
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    2e80:	2501      	movs	r5, #1
   else if (_chip.memoryTypeID == SST26) {
    2e82:	2b26      	cmp	r3, #38	; 0x26
    2e84:	d1fa      	bne.n	2e7c <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     if(!_notBusy()) {
    2e86:	490e      	ldr	r1, [pc, #56]	; (2ec0 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x88>)
    2e88:	f7ff fefc 	bl	2c84 <_ZN8SPIFlash8_notBusyEm>
    2e8c:	1e05      	subs	r5, r0, #0
    2e8e:	d0f5      	beq.n	2e7c <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     _writeEnable();
    2e90:	2101      	movs	r1, #1
    2e92:	0020      	movs	r0, r4
    2e94:	f7ff ff1c 	bl	2cd0 <_ZN8SPIFlash12_writeEnableEb>
    2e98:	23a0      	movs	r3, #160	; 0xa0
    2e9a:	3b01      	subs	r3, #1
    2e9c:	d1fd      	bne.n	2e9a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x62>
     _beginSPI(ULBPR);
    2e9e:	2198      	movs	r1, #152	; 0x98
    2ea0:	0020      	movs	r0, r4
    2ea2:	f7ff fe05 	bl	2ab0 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    2ea6:	7c20      	ldrb	r0, [r4, #16]
    2ea8:	2101      	movs	r1, #1
    2eaa:	f7ff f94d 	bl	2148 <digitalWrite>
    2eae:	23c8      	movs	r3, #200	; 0xc8
    2eb0:	009b      	lsls	r3, r3, #2
    2eb2:	3b01      	subs	r3, #1
    2eb4:	d1fd      	bne.n	2eb2 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x7a>
     _writeDisable();
    2eb6:	0020      	movs	r0, r4
    2eb8:	f7ff ff7e 	bl	2db8 <_ZN8SPIFlash13_writeDisableEv>
    2ebc:	e7de      	b.n	2e7c <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	3b9aca00 	.word	0x3b9aca00

00002ec4 <_ZN8SPIFlash7_chipIDEm>:
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    2ec4:	0002      	movs	r2, r0
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    2ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    2ec8:	2301      	movs	r3, #1
    2eca:	3264      	adds	r2, #100	; 0x64
    2ecc:	7013      	strb	r3, [r2, #0]
    2ece:	3a10      	subs	r2, #16
    2ed0:	7013      	strb	r3, [r2, #0]
    2ed2:	3a08      	subs	r2, #8
    2ed4:	7013      	strb	r3, [r2, #0]
    2ed6:	3a08      	subs	r2, #8
    2ed8:	7013      	strb	r3, [r2, #0]
   kb4Erase.opcode = SECTORERASE;
    2eda:	0003      	movs	r3, r0
    2edc:	2220      	movs	r2, #32
    2ede:	3345      	adds	r3, #69	; 0x45
    2ee0:	701a      	strb	r2, [r3, #0]
   kb32Erase.opcode = BLOCK32ERASE;
    2ee2:	3232      	adds	r2, #50	; 0x32
    2ee4:	721a      	strb	r2, [r3, #8]
   kb64Erase.opcode = BLOCK64ERASE;
    2ee6:	3286      	adds	r2, #134	; 0x86
    2ee8:	741a      	strb	r2, [r3, #16]
   kb4Erase.time = BUSY_TIMEOUT;
    2eea:	4b41      	ldr	r3, [pc, #260]	; (2ff0 <_ZN8SPIFlash7_chipIDEm+0x12c>)
   kb256Erase.supported = false;
    2eec:	2200      	movs	r2, #0
   kb4Erase.time = BUSY_TIMEOUT;
    2eee:	6483      	str	r3, [r0, #72]	; 0x48
   kb32Erase.time = kb4Erase.time * 8;
    2ef0:	4b40      	ldr	r3, [pc, #256]	; (2ff4 <_ZN8SPIFlash7_chipIDEm+0x130>)
   chipErase.opcode = CHIPERASE;
    2ef2:	0005      	movs	r5, r0
   kb32Erase.time = kb4Erase.time * 8;
    2ef4:	6503      	str	r3, [r0, #80]	; 0x50
   kb64Erase.time = kb32Erase.time * 4;
    2ef6:	4b40      	ldr	r3, [pc, #256]	; (2ff8 <_ZN8SPIFlash7_chipIDEm+0x134>)
   chipErase.opcode = CHIPERASE;
    2ef8:	3565      	adds	r5, #101	; 0x65
   kb64Erase.time = kb32Erase.time * 4;
    2efa:	6583      	str	r3, [r0, #88]	; 0x58
   kb256Erase.supported = false;
    2efc:	0003      	movs	r3, r0
    2efe:	335c      	adds	r3, #92	; 0x5c
    2f00:	701a      	strb	r2, [r3, #0]
   chipErase.opcode = CHIPERASE;
    2f02:	2360      	movs	r3, #96	; 0x60
    2f04:	702b      	strb	r3, [r5, #0]
   chipErase.time = kb64Erase.time * 100L;
    2f06:	4b3d      	ldr	r3, [pc, #244]	; (2ffc <_ZN8SPIFlash7_chipIDEm+0x138>)
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    2f08:	0004      	movs	r4, r0
   chipErase.time = kb64Erase.time * 100L;
    2f0a:	6683      	str	r3, [r0, #104]	; 0x68
   _pageSize = SPI_PAGESIZE;
    2f0c:	0003      	movs	r3, r0
    2f0e:	3201      	adds	r2, #1
    2f10:	3372      	adds	r3, #114	; 0x72
    2f12:	32ff      	adds	r2, #255	; 0xff
    2f14:	801a      	strh	r2, [r3, #0]
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    2f16:	000e      	movs	r6, r1
   _getJedecId();
    2f18:	f7ff ff5a 	bl	2dd0 <_ZN8SPIFlash11_getJedecIdEv>
     if (_chip.manufacturerID == _supportedManID[i]) {
    2f1c:	0023      	movs	r3, r4
    2f1e:	1ca2      	adds	r2, r4, #2
    2f20:	3337      	adds	r3, #55	; 0x37
    2f22:	7819      	ldrb	r1, [r3, #0]
    2f24:	32ff      	adds	r2, #255	; 0xff
    2f26:	33c1      	adds	r3, #193	; 0xc1
    2f28:	7818      	ldrb	r0, [r3, #0]
    2f2a:	4288      	cmp	r0, r1
    2f2c:	d127      	bne.n	2f7e <_ZN8SPIFlash7_chipIDEm+0xba>
       _chip.supportedMan = true;
    2f2e:	0023      	movs	r3, r4
    2f30:	2201      	movs	r2, #1
    2f32:	3335      	adds	r3, #53	; 0x35
    2f34:	701a      	strb	r2, [r3, #0]
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    2f36:	0023      	movs	r3, r4
    2f38:	0022      	movs	r2, r4
    2f3a:	3338      	adds	r3, #56	; 0x38
    2f3c:	32ff      	adds	r2, #255	; 0xff
    2f3e:	781b      	ldrb	r3, [r3, #0]
    2f40:	7890      	ldrb	r0, [r2, #2]
    2f42:	4298      	cmp	r0, r3
    2f44:	d005      	beq.n	2f52 <_ZN8SPIFlash7_chipIDEm+0x8e>
    2f46:	78d0      	ldrb	r0, [r2, #3]
    2f48:	4298      	cmp	r0, r3
    2f4a:	d002      	beq.n	2f52 <_ZN8SPIFlash7_chipIDEm+0x8e>
    2f4c:	7912      	ldrb	r2, [r2, #4]
    2f4e:	429a      	cmp	r2, r3
    2f50:	d101      	bne.n	2f56 <_ZN8SPIFlash7_chipIDEm+0x92>
       chipErase.opcode = ALT_CHIPERASE;
    2f52:	23c7      	movs	r3, #199	; 0xc7
    2f54:	702b      	strb	r3, [r5, #0]
   if (_chip.supportedMan) {
    2f56:	0023      	movs	r3, r4
    2f58:	3335      	adds	r3, #53	; 0x35
    2f5a:	781d      	ldrb	r5, [r3, #0]
    2f5c:	2d00      	cmp	r5, #0
    2f5e:	d032      	beq.n	2fc6 <_ZN8SPIFlash7_chipIDEm+0x102>
    2f60:	0027      	movs	r7, r4
    2f62:	3739      	adds	r7, #57	; 0x39
     if(_chip.manufacturerID == MACRONIX_MANID)
    2f64:	29c2      	cmp	r1, #194	; 0xc2
    2f66:	d111      	bne.n	2f8c <_ZN8SPIFlash7_chipIDEm+0xc8>
       switch(_chip.capacityID)
    2f68:	783b      	ldrb	r3, [r7, #0]
    2f6a:	2b13      	cmp	r3, #19
    2f6c:	d00b      	beq.n	2f86 <_ZN8SPIFlash7_chipIDEm+0xc2>
    2f6e:	2b14      	cmp	r3, #20
    2f70:	d01b      	beq.n	2faa <_ZN8SPIFlash7_chipIDEm+0xe6>
   diagnostics.troubleshoot(_code, printoverride);
    2f72:	2200      	movs	r2, #0
    2f74:	2102      	movs	r1, #2
    2f76:	4822      	ldr	r0, [pc, #136]	; (3000 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    2f78:	f000 fd84 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
    2f7c:	e006      	b.n	2f8c <_ZN8SPIFlash7_chipIDEm+0xc8>
    2f7e:	3301      	adds	r3, #1
   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    2f80:	4293      	cmp	r3, r2
    2f82:	d1d1      	bne.n	2f28 <_ZN8SPIFlash7_chipIDEm+0x64>
    2f84:	e7d7      	b.n	2f36 <_ZN8SPIFlash7_chipIDEm+0x72>
         _chip.capacity = MB(4);
    2f86:	2380      	movs	r3, #128	; 0x80
    2f88:	03db      	lsls	r3, r3, #15
         _chip.capacity = MB(8);
    2f8a:	63e3      	str	r3, [r4, #60]	; 0x3c
       if (_chip.capacityID == _capID[j]) {
    2f8c:	2300      	movs	r3, #0
    2f8e:	783a      	ldrb	r2, [r7, #0]
    2f90:	0019      	movs	r1, r3
    2f92:	319c      	adds	r1, #156	; 0x9c
    2f94:	5c61      	ldrb	r1, [r4, r1]
    2f96:	4291      	cmp	r1, r2
    2f98:	d10a      	bne.n	2fb0 <_ZN8SPIFlash7_chipIDEm+0xec>
         _chip.capacity = (_memSize[j]);
    2f9a:	332c      	adds	r3, #44	; 0x2c
    2f9c:	009b      	lsls	r3, r3, #2
    2f9e:	591b      	ldr	r3, [r3, r4]
         _chip.supported = true;
    2fa0:	3434      	adds	r4, #52	; 0x34
         _chip.capacity = (_memSize[j]);
    2fa2:	60a3      	str	r3, [r4, #8]
         _chip.supported = true;
    2fa4:	2301      	movs	r3, #1
       _chip.supported = false;
    2fa6:	7023      	strb	r3, [r4, #0]
       return true;
    2fa8:	e012      	b.n	2fd0 <_ZN8SPIFlash7_chipIDEm+0x10c>
         _chip.capacity = MB(8);
    2faa:	2380      	movs	r3, #128	; 0x80
    2fac:	041b      	lsls	r3, r3, #16
    2fae:	e7ec      	b.n	2f8a <_ZN8SPIFlash7_chipIDEm+0xc6>
    2fb0:	3301      	adds	r3, #1
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    2fb2:	2b12      	cmp	r3, #18
    2fb4:	d1ec      	bne.n	2f90 <_ZN8SPIFlash7_chipIDEm+0xcc>
   if (!_chip.capacity) {
    2fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d108      	bne.n	2fce <_ZN8SPIFlash7_chipIDEm+0x10a>
     if (flashChipSize) {
    2fbc:	2e00      	cmp	r6, #0
    2fbe:	d00f      	beq.n	2fe0 <_ZN8SPIFlash7_chipIDEm+0x11c>
       _chip.capacity = flashChipSize;
    2fc0:	63e6      	str	r6, [r4, #60]	; 0x3c
       _chip.supported = false;
    2fc2:	3434      	adds	r4, #52	; 0x34
    2fc4:	e7ef      	b.n	2fa6 <_ZN8SPIFlash7_chipIDEm+0xe2>
     if (_chip.sfdpAvailable) {
    2fc6:	3436      	adds	r4, #54	; 0x36
    2fc8:	7825      	ldrb	r5, [r4, #0]
    2fca:	2d00      	cmp	r5, #0
    2fcc:	d002      	beq.n	2fd4 <_ZN8SPIFlash7_chipIDEm+0x110>
       return true;
    2fce:	2501      	movs	r5, #1
 }
    2fd0:	0028      	movs	r0, r5
    2fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   diagnostics.troubleshoot(_code, printoverride);
    2fd4:	002a      	movs	r2, r5
    2fd6:	2102      	movs	r1, #2
    2fd8:	4809      	ldr	r0, [pc, #36]	; (3000 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    2fda:	f000 fd53 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    2fde:	e7f7      	b.n	2fd0 <_ZN8SPIFlash7_chipIDEm+0x10c>
   diagnostics.troubleshoot(_code, printoverride);
    2fe0:	0032      	movs	r2, r6
    2fe2:	2103      	movs	r1, #3
    2fe4:	4806      	ldr	r0, [pc, #24]	; (3000 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    2fe6:	f000 fd4d 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    2fea:	0035      	movs	r5, r6
    2fec:	e7f0      	b.n	2fd0 <_ZN8SPIFlash7_chipIDEm+0x10c>
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	3b9aca00 	.word	0x3b9aca00
    2ff4:	dcd65000 	.word	0xdcd65000
    2ff8:	73594000 	.word	0x73594000
    2ffc:	0edd0000 	.word	0x0edd0000
    3000:	20000d14 	.word	0x20000d14

00003004 <_ZN8SPIFlash13_troubleshootEhb>:
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
    3004:	b510      	push	{r4, lr}
   diagnostics.troubleshoot(_code, printoverride);
    3006:	4802      	ldr	r0, [pc, #8]	; (3010 <_ZN8SPIFlash13_troubleshootEhb+0xc>)
    3008:	f000 fd3c 	bl	3a84 <_ZN11Diagnostics12troubleshootEhb>
 }
    300c:	bd10      	pop	{r4, pc}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	20000d14 	.word	0x20000d14

00003014 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    3014:	7d03      	ldrb	r3, [r0, #20]
    3016:	2b00      	cmp	r3, #0
    3018:	d104      	bne.n	3024 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    301a:	7543      	strb	r3, [r0, #21]
  interruptSave = 0;
    301c:	7583      	strb	r3, [r0, #22]
  interruptMask = 0;
    301e:	6183      	str	r3, [r0, #24]
  initialized = true;
    3020:	3301      	adds	r3, #1
    3022:	7503      	strb	r3, [r0, #20]
}
    3024:	4770      	bx	lr

00003026 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    3026:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if ((this->clockFreq == rhs.clockFreq) &&
    3028:	68c3      	ldr	r3, [r0, #12]
    302a:	ad02      	add	r5, sp, #8
    302c:	0004      	movs	r4, r0
    302e:	000e      	movs	r6, r1
    3030:	9102      	str	r1, [sp, #8]
    3032:	606a      	str	r2, [r5, #4]
    3034:	428b      	cmp	r3, r1
    3036:	d103      	bne.n	3040 <_ZN8SPIClass6configE11SPISettings+0x1a>
        (this->bitOrder == rhs.bitOrder) &&
    3038:	8a02      	ldrh	r2, [r0, #16]
    303a:	88ab      	ldrh	r3, [r5, #4]
    303c:	429a      	cmp	r2, r3
    303e:	d018      	beq.n	3072 <_ZN8SPIClass6configE11SPISettings+0x4c>
  if (this->settings != settings) {
    this->settings = settings;
    3040:	0020      	movs	r0, r4
    3042:	2206      	movs	r2, #6
    3044:	0029      	movs	r1, r5
    3046:	300c      	adds	r0, #12
    3048:	f002 fdba 	bl	5bc0 <memcpy>
    _p_sercom->disableSPI();
    304c:	6820      	ldr	r0, [r4, #0]
    304e:	f000 f9da 	bl	3406 <_ZN6SERCOM10disableSPIEv>

    _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    3052:	796b      	ldrb	r3, [r5, #5]
    3054:	7a22      	ldrb	r2, [r4, #8]
    3056:	79e1      	ldrb	r1, [r4, #7]
    3058:	9300      	str	r3, [sp, #0]
    305a:	6820      	ldr	r0, [r4, #0]
    305c:	2300      	movs	r3, #0
    305e:	f000 fa6d 	bl	353c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
    _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    3062:	6820      	ldr	r0, [r4, #0]
    3064:	7929      	ldrb	r1, [r5, #4]
    3066:	0032      	movs	r2, r6
    3068:	f000 f9a2 	bl	33b0 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

    _p_sercom->enableSPI();
    306c:	6820      	ldr	r0, [r4, #0]
    306e:	f000 f9c1 	bl	33f4 <_ZN6SERCOM9enableSPIEv>
  }
}
    3072:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00003074 <_ZN8SPIClass5beginEv>:
{
    3074:	b570      	push	{r4, r5, r6, lr}
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    3076:	2618      	movs	r6, #24
{
    3078:	0004      	movs	r4, r0
  init();
    307a:	f7ff ffcb 	bl	3014 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    307e:	0033      	movs	r3, r6
    3080:	2108      	movs	r1, #8
    3082:	7920      	ldrb	r0, [r4, #4]
    3084:	4d0d      	ldr	r5, [pc, #52]	; (30bc <_ZN8SPIClass5beginEv+0x48>)
    3086:	4343      	muls	r3, r0
    3088:	18eb      	adds	r3, r5, r3
    308a:	5659      	ldrsb	r1, [r3, r1]
    308c:	f7ff f888 	bl	21a0 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    3090:	0033      	movs	r3, r6
    3092:	2108      	movs	r1, #8
    3094:	79a0      	ldrb	r0, [r4, #6]
    3096:	4343      	muls	r3, r0
    3098:	18eb      	adds	r3, r5, r3
    309a:	5659      	ldrsb	r1, [r3, r1]
    309c:	f7ff f880 	bl	21a0 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    30a0:	2108      	movs	r1, #8
    30a2:	7960      	ldrb	r0, [r4, #5]
    30a4:	4346      	muls	r6, r0
    30a6:	19ad      	adds	r5, r5, r6
    30a8:	5669      	ldrsb	r1, [r5, r1]
    30aa:	f7ff f879 	bl	21a0 <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    30ae:	4b04      	ldr	r3, [pc, #16]	; (30c0 <_ZN8SPIClass5beginEv+0x4c>)
    30b0:	0020      	movs	r0, r4
    30b2:	cb06      	ldmia	r3!, {r1, r2}
    30b4:	f7ff ffb7 	bl	3026 <_ZN8SPIClass6configE11SPISettings>
}
    30b8:	bd70      	pop	{r4, r5, r6, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	0000600c 	.word	0x0000600c
    30c0:	2000087c 	.word	0x2000087c

000030c4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    30c4:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    30c6:	7d43      	ldrb	r3, [r0, #21]
{
    30c8:	9100      	str	r1, [sp, #0]
    30ca:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    30cc:	2b00      	cmp	r3, #0
    30ce:	d007      	beq.n	30e0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    30d0:	079a      	lsls	r2, r3, #30
    30d2:	d50a      	bpl.n	30ea <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    30d4:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    30d8:	4253      	negs	r3, r2
    30da:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    30dc:	7583      	strb	r3, [r0, #22]
  __ASM volatile ("cpsid i" : : : "memory");
    30de:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    30e0:	9900      	ldr	r1, [sp, #0]
    30e2:	9a01      	ldr	r2, [sp, #4]
    30e4:	f7ff ff9f 	bl	3026 <_ZN8SPIClass6configE11SPISettings>
}
    30e8:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    30ea:	07db      	lsls	r3, r3, #31
    30ec:	d5f8      	bpl.n	30e0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    30ee:	8b03      	ldrh	r3, [r0, #24]
    30f0:	4a01      	ldr	r2, [pc, #4]	; (30f8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    30f2:	6093      	str	r3, [r2, #8]
    30f4:	e7f4      	b.n	30e0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	40001800 	.word	0x40001800

000030fc <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    30fc:	7d43      	ldrb	r3, [r0, #21]
    30fe:	2b00      	cmp	r3, #0
    3100:	d005      	beq.n	310e <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    3102:	079a      	lsls	r2, r3, #30
    3104:	d504      	bpl.n	3110 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    3106:	7d83      	ldrb	r3, [r0, #22]
    3108:	2b00      	cmp	r3, #0
    310a:	d000      	beq.n	310e <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    310c:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    310e:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    3110:	07db      	lsls	r3, r3, #31
    3112:	d5fc      	bpl.n	310e <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    3114:	6983      	ldr	r3, [r0, #24]
    3116:	4a02      	ldr	r2, [pc, #8]	; (3120 <_ZN8SPIClass14endTransactionEv+0x24>)
    3118:	b29b      	uxth	r3, r3
    311a:	60d3      	str	r3, [r2, #12]
}
    311c:	e7f7      	b.n	310e <_ZN8SPIClass14endTransactionEv+0x12>
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	40001800 	.word	0x40001800

00003124 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    3124:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    3126:	6800      	ldr	r0, [r0, #0]
    3128:	f000 f976 	bl	3418 <_ZN6SERCOM15transferDataSPIEh>
}
    312c:	bd10      	pop	{r4, pc}

0000312e <_ZN8SPIClass8transferEPvj>:

  return t.val;
}

void SPIClass::transfer(void *buf, size_t count)
{
    312e:	b570      	push	{r4, r5, r6, lr}
    3130:	0006      	movs	r6, r0
  uint8_t *buffer = reinterpret_cast<uint8_t *>(buf);
    3132:	000c      	movs	r4, r1
    3134:	188d      	adds	r5, r1, r2
  for (size_t i=0; i<count; i++) {
    3136:	42ac      	cmp	r4, r5
    3138:	d006      	beq.n	3148 <_ZN8SPIClass8transferEPvj+0x1a>
    *buffer = transfer(*buffer);
    313a:	7821      	ldrb	r1, [r4, #0]
    313c:	0030      	movs	r0, r6
    313e:	f7ff fff1 	bl	3124 <_ZN8SPIClass8transferEh>
    3142:	7020      	strb	r0, [r4, #0]
    buffer++;
    3144:	3401      	adds	r4, #1
  for (size_t i=0; i<count; i++) {
    3146:	e7f6      	b.n	3136 <_ZN8SPIClass8transferEPvj+0x8>
  }
}
    3148:	bd70      	pop	{r4, r5, r6, pc}
	...

0000314c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    314c:	4a13      	ldr	r2, [pc, #76]	; (319c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x50>)
    314e:	4b14      	ldr	r3, [pc, #80]	; (31a0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x54>)
  _p_sercom = p_sercom;
    3150:	4914      	ldr	r1, [pc, #80]	; (31a4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x58>)
    3152:	6013      	str	r3, [r2, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    3154:	2300      	movs	r3, #0
    3156:	7153      	strb	r3, [r2, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    3158:	7113      	strb	r3, [r2, #4]
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    315a:	4a13      	ldr	r2, [pc, #76]	; (31a8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x5c>)
    315c:	6011      	str	r1, [r2, #0]
  _uc_pinMiso = uc_pinMISO;
    315e:	210a      	movs	r1, #10
    3160:	7111      	strb	r1, [r2, #4]
  _uc_pinSCK = uc_pinSCK;
    3162:	3901      	subs	r1, #1
    3164:	7191      	strb	r1, [r2, #6]
  _uc_pinMosi = uc_pinMOSI;
    3166:	3901      	subs	r1, #1
    3168:	7151      	strb	r1, [r2, #5]
  _padRx=PadRx;
    316a:	3905      	subs	r1, #5
    316c:	60d3      	str	r3, [r2, #12]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    316e:	7453      	strb	r3, [r2, #17]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    3170:	7413      	strb	r3, [r2, #16]
  initialized = false;
    3172:	7513      	strb	r3, [r2, #20]
  _padTx=PadTx;
    3174:	71d3      	strb	r3, [r2, #7]
  _padRx=PadRx;
    3176:	7211      	strb	r1, [r2, #8]
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    3178:	4a0c      	ldr	r2, [pc, #48]	; (31ac <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x60>)
    317a:	60d3      	str	r3, [r2, #12]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    317c:	7453      	strb	r3, [r2, #17]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    317e:	7413      	strb	r3, [r2, #16]
  initialized = false;
    3180:	7513      	strb	r3, [r2, #20]
  _p_sercom = p_sercom;
    3182:	4b0b      	ldr	r3, [pc, #44]	; (31b0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x64>)
  _padTx=PadTx;
    3184:	71d1      	strb	r1, [r2, #7]
  _p_sercom = p_sercom;
    3186:	6013      	str	r3, [r2, #0]
  _uc_pinMiso = uc_pinMISO;
    3188:	231b      	movs	r3, #27
    318a:	7113      	strb	r3, [r2, #4]
  _uc_pinSCK = uc_pinSCK;
    318c:	3302      	adds	r3, #2
    318e:	7193      	strb	r3, [r2, #6]
  _uc_pinMosi = uc_pinMOSI;
    3190:	3b03      	subs	r3, #3
    3192:	7153      	strb	r3, [r2, #5]
  _padRx=PadRx;
    3194:	3b19      	subs	r3, #25
    3196:	7213      	strb	r3, [r2, #8]
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
#endif
#if SPI_INTERFACES_COUNT > 1
  SPIClass SPI1(&PERIPH_SPI1, PIN_SPI1_MISO, PIN_SPI1_SCK, PIN_SPI1_MOSI, PAD_SPI1_TX, PAD_SPI1_RX);
    3198:	4770      	bx	lr
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	2000087c 	.word	0x2000087c
    31a0:	003d0900 	.word	0x003d0900
    31a4:	20000d00 	.word	0x20000d00
    31a8:	20000844 	.word	0x20000844
    31ac:	20000860 	.word	0x20000860
    31b0:	20000d0c 	.word	0x20000d0c

000031b4 <_Z11initVariantv>:
  PERIPH_WIRE.disableWIRE();
}

#endif

void initVariant() {
    31b4:	b510      	push	{r4, lr}
  }
  disable_battery_fet(!batteryPresent);
#endif

  // NINA - SPI boot
  pinMode(NINA_GPIO0, OUTPUT);
    31b6:	2101      	movs	r1, #1
    31b8:	201e      	movs	r0, #30
    31ba:	f7fe ff79 	bl	20b0 <pinMode>
  digitalWrite(NINA_GPIO0, HIGH);
    31be:	2101      	movs	r1, #1
    31c0:	201e      	movs	r0, #30
    31c2:	f7fe ffc1 	bl	2148 <digitalWrite>

  // disable NINA
  pinMode(NINA_RESETN, OUTPUT);
    31c6:	2101      	movs	r1, #1
    31c8:	201f      	movs	r0, #31
    31ca:	f7fe ff71 	bl	20b0 <pinMode>
  digitalWrite(NINA_RESETN, HIGH);
    31ce:	2101      	movs	r1, #1
    31d0:	201f      	movs	r0, #31
    31d2:	f7fe ffb9 	bl	2148 <digitalWrite>
}
    31d6:	bd10      	pop	{r4, pc}

000031d8 <SERCOM5_Handler>:

// Serial1
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);

void SERCOM5_Handler()
{
    31d8:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    31da:	4802      	ldr	r0, [pc, #8]	; (31e4 <SERCOM5_Handler+0xc>)
    31dc:	f000 fb57 	bl	388e <_ZN4Uart10IrqHandlerEv>
}
    31e0:	bd10      	pop	{r4, pc}
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	20000884 	.word	0x20000884

000031e8 <SERCOM4_Handler>:

// Serial2
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);

void SERCOM4_Handler()
{
    31e8:	b510      	push	{r4, lr}
  Serial2.IrqHandler();
    31ea:	4802      	ldr	r0, [pc, #8]	; (31f4 <SERCOM4_Handler+0xc>)
    31ec:	f000 fb4f 	bl	388e <_ZN4Uart10IrqHandlerEv>
}
    31f0:	bd10      	pop	{r4, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	20000ac0 	.word	0x20000ac0

000031f8 <_GLOBAL__sub_I_g_APinDescription>:
    31f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
SERCOM sercom0(SERCOM0);
    31fa:	4919      	ldr	r1, [pc, #100]	; (3260 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    31fc:	4819      	ldr	r0, [pc, #100]	; (3264 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    31fe:	f000 f853 	bl	32a8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1(SERCOM1);
    3202:	4919      	ldr	r1, [pc, #100]	; (3268 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    3204:	4819      	ldr	r0, [pc, #100]	; (326c <_GLOBAL__sub_I_g_APinDescription+0x74>)
    3206:	f000 f84f 	bl	32a8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2(SERCOM2);
    320a:	4919      	ldr	r1, [pc, #100]	; (3270 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    320c:	4819      	ldr	r0, [pc, #100]	; (3274 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    320e:	f000 f84b 	bl	32a8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3(SERCOM3);
    3212:	4919      	ldr	r1, [pc, #100]	; (3278 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    3214:	4819      	ldr	r0, [pc, #100]	; (327c <_GLOBAL__sub_I_g_APinDescription+0x84>)
    3216:	f000 f847 	bl	32a8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4(SERCOM4);
    321a:	4c19      	ldr	r4, [pc, #100]	; (3280 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    321c:	4919      	ldr	r1, [pc, #100]	; (3284 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    321e:	0020      	movs	r0, r4
    3220:	f000 f842 	bl	32a8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5(SERCOM5);
    3224:	4e18      	ldr	r6, [pc, #96]	; (3288 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    3226:	4919      	ldr	r1, [pc, #100]	; (328c <_GLOBAL__sub_I_g_APinDescription+0x94>)
    3228:	0030      	movs	r0, r6
    322a:	f000 f83d 	bl	32a8 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);
    322e:	2501      	movs	r5, #1
    3230:	2303      	movs	r3, #3
    3232:	0031      	movs	r1, r6
    3234:	9501      	str	r5, [sp, #4]
    3236:	9300      	str	r3, [sp, #0]
    3238:	220d      	movs	r2, #13
    323a:	330b      	adds	r3, #11
    323c:	4814      	ldr	r0, [pc, #80]	; (3290 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    323e:	f000 fabb 	bl	37b8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);
    3242:	231d      	movs	r3, #29
    3244:	9303      	str	r3, [sp, #12]
    3246:	3b01      	subs	r3, #1
    3248:	9302      	str	r3, [sp, #8]
    324a:	3b1a      	subs	r3, #26
    324c:	9301      	str	r3, [sp, #4]
    324e:	9500      	str	r5, [sp, #0]
    3250:	3318      	adds	r3, #24
    3252:	221b      	movs	r2, #27
    3254:	0021      	movs	r1, r4
    3256:	480f      	ldr	r0, [pc, #60]	; (3294 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    3258:	f000 fa6a 	bl	3730 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
}
    325c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	42000800 	.word	0x42000800
    3264:	20000cfc 	.word	0x20000cfc
    3268:	42000c00 	.word	0x42000c00
    326c:	20000d00 	.word	0x20000d00
    3270:	42001000 	.word	0x42001000
    3274:	20000d04 	.word	0x20000d04
    3278:	42001400 	.word	0x42001400
    327c:	20000d08 	.word	0x20000d08
    3280:	20000d0c 	.word	0x20000d0c
    3284:	42001800 	.word	0x42001800
    3288:	20000d10 	.word	0x20000d10
    328c:	42001c00 	.word	0x42001c00
    3290:	20000884 	.word	0x20000884
    3294:	20000ac0 	.word	0x20000ac0

00003298 <_Znwj>:
    3298:	b510      	push	{r4, lr}
    329a:	f002 fc7d 	bl	5b98 <malloc>
    329e:	bd10      	pop	{r4, pc}

000032a0 <_ZdlPv>:
    32a0:	b510      	push	{r4, lr}
    32a2:	f002 fc83 	bl	5bac <free>
    32a6:	bd10      	pop	{r4, pc}

000032a8 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    32a8:	6001      	str	r1, [r0, #0]
}
    32aa:	4770      	bx	lr

000032ac <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    32ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ae:	ac05      	add	r4, sp, #20
    32b0:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    32b2:	6804      	ldr	r4, [r0, #0]
    32b4:	1e98      	subs	r0, r3, #2
    32b6:	1e47      	subs	r7, r0, #1
    32b8:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    32ba:	6826      	ldr	r6, [r4, #0]
    32bc:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    32be:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    32c0:	4332      	orrs	r2, r6
    32c2:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    32c4:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    32c6:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    32c8:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    32ca:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    32cc:	6862      	ldr	r2, [r4, #4]
    32ce:	4329      	orrs	r1, r5
    32d0:	2000      	movs	r0, #0
    32d2:	2b02      	cmp	r3, #2
    32d4:	d000      	beq.n	32d8 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    32d6:	0358      	lsls	r0, r3, #13
    32d8:	4311      	orrs	r1, r2
    32da:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    32dc:	6061      	str	r1, [r4, #4]
}
    32de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032e0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    32e0:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    32e2:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    32e4:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    32e6:	03a4      	lsls	r4, r4, #14
    32e8:	6818      	ldr	r0, [r3, #0]
    32ea:	0512      	lsls	r2, r2, #20
    32ec:	4022      	ands	r2, r4
    32ee:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    32f0:	20c0      	movs	r0, #192	; 0xc0
    32f2:	0409      	lsls	r1, r1, #16
    32f4:	0280      	lsls	r0, r0, #10
    32f6:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    32f8:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    32fa:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    32fc:	685a      	ldr	r2, [r3, #4]
    32fe:	4310      	orrs	r0, r2
    3300:	6058      	str	r0, [r3, #4]
}
    3302:	bd10      	pop	{r4, pc}

00003304 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    3304:	2201      	movs	r2, #1
    3306:	6803      	ldr	r3, [r0, #0]
    3308:	6819      	ldr	r1, [r3, #0]
    330a:	430a      	orrs	r2, r1
    330c:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    330e:	681a      	ldr	r2, [r3, #0]
    3310:	07d2      	lsls	r2, r2, #31
    3312:	d4fc      	bmi.n	330e <_ZN6SERCOM9resetUARTEv+0xa>
    3314:	69da      	ldr	r2, [r3, #28]
    3316:	07d2      	lsls	r2, r2, #31
    3318:	d4f9      	bmi.n	330e <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    331a:	4770      	bx	lr

0000331c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    331c:	2202      	movs	r2, #2
    331e:	6803      	ldr	r3, [r0, #0]
    3320:	6819      	ldr	r1, [r3, #0]
    3322:	430a      	orrs	r2, r1
    3324:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    3326:	69da      	ldr	r2, [r3, #28]
    3328:	0792      	lsls	r2, r2, #30
    332a:	d4fc      	bmi.n	3326 <_ZN6SERCOM10enableUARTEv+0xa>
}
    332c:	4770      	bx	lr

0000332e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    332e:	6803      	ldr	r3, [r0, #0]
    3330:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    3332:	07d2      	lsls	r2, r2, #31
    3334:	d402      	bmi.n	333c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    3336:	7e1a      	ldrb	r2, [r3, #24]
    3338:	0792      	lsls	r2, r2, #30
    333a:	d5fc      	bpl.n	3336 <_ZN6SERCOM9flushUARTEv+0x8>
}
    333c:	4770      	bx	lr

0000333e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    333e:	2200      	movs	r2, #0
    3340:	6803      	ldr	r3, [r0, #0]
    3342:	835a      	strh	r2, [r3, #26]
}
    3344:	4770      	bx	lr

00003346 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    3346:	6803      	ldr	r3, [r0, #0]
    3348:	7e18      	ldrb	r0, [r3, #24]
    334a:	0740      	lsls	r0, r0, #29
    334c:	0fc0      	lsrs	r0, r0, #31
}
    334e:	4770      	bx	lr

00003350 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    3350:	6803      	ldr	r3, [r0, #0]
    3352:	7e18      	ldrb	r0, [r3, #24]
    3354:	09c0      	lsrs	r0, r0, #7
}
    3356:	4770      	bx	lr

00003358 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    3358:	2380      	movs	r3, #128	; 0x80
    335a:	6802      	ldr	r2, [r0, #0]
    335c:	425b      	negs	r3, r3
    335e:	7e11      	ldrb	r1, [r2, #24]
    3360:	430b      	orrs	r3, r1
    3362:	7613      	strb	r3, [r2, #24]
}
    3364:	4770      	bx	lr

00003366 <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    3366:	6803      	ldr	r3, [r0, #0]
    3368:	8b58      	ldrh	r0, [r3, #26]
    336a:	0780      	lsls	r0, r0, #30
    336c:	0fc0      	lsrs	r0, r0, #31
}
    336e:	4770      	bx	lr

00003370 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    3370:	2302      	movs	r3, #2
    3372:	6802      	ldr	r2, [r0, #0]
    3374:	8b51      	ldrh	r1, [r2, #26]
    3376:	430b      	orrs	r3, r1
    3378:	8353      	strh	r3, [r2, #26]
}
    337a:	4770      	bx	lr

0000337c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    337c:	6803      	ldr	r3, [r0, #0]
    337e:	7e18      	ldrb	r0, [r3, #24]
    3380:	07c0      	lsls	r0, r0, #31
    3382:	0fc0      	lsrs	r0, r0, #31
}
    3384:	4770      	bx	lr

00003386 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    3386:	6803      	ldr	r3, [r0, #0]
    3388:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    338a:	b2c0      	uxtb	r0, r0
}
    338c:	4770      	bx	lr

0000338e <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    338e:	6803      	ldr	r3, [r0, #0]
    3390:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    3392:	07d2      	lsls	r2, r2, #31
    3394:	d5fc      	bpl.n	3390 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    3396:	b289      	uxth	r1, r1
  return 1;
}
    3398:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    339a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    339c:	4770      	bx	lr

0000339e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    339e:	2201      	movs	r2, #1
    33a0:	6803      	ldr	r3, [r0, #0]
    33a2:	759a      	strb	r2, [r3, #22]
}
    33a4:	4770      	bx	lr

000033a6 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    33a6:	2201      	movs	r2, #1
    33a8:	6803      	ldr	r3, [r0, #0]
    33aa:	751a      	strb	r2, [r3, #20]
}
    33ac:	4770      	bx	lr
	...

000033b0 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    33b0:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    33b2:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    33b4:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    33b6:	084b      	lsrs	r3, r1, #1
    33b8:	402b      	ands	r3, r5
    cpha = 0;
    33ba:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    33bc:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    33be:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    33c0:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    33c2:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    33c4:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    33c6:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    33c8:	0051      	lsls	r1, r2, #1
    33ca:	4803      	ldr	r0, [pc, #12]	; (33d8 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>)
    33cc:	f000 fc12 	bl	3bf4 <__udivsi3>
    33d0:	3801      	subs	r0, #1
    33d2:	b2c0      	uxtb	r0, r0
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    33d4:	7320      	strb	r0, [r4, #12]
}
    33d6:	bd70      	pop	{r4, r5, r6, pc}
    33d8:	02dc6c00 	.word	0x02dc6c00

000033dc <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    33dc:	2201      	movs	r2, #1
    33de:	6803      	ldr	r3, [r0, #0]
    33e0:	6819      	ldr	r1, [r3, #0]
    33e2:	430a      	orrs	r2, r1
    33e4:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    33e6:	681a      	ldr	r2, [r3, #0]
    33e8:	07d2      	lsls	r2, r2, #31
    33ea:	d4fc      	bmi.n	33e6 <_ZN6SERCOM8resetSPIEv+0xa>
    33ec:	69da      	ldr	r2, [r3, #28]
    33ee:	07d2      	lsls	r2, r2, #31
    33f0:	d4f9      	bmi.n	33e6 <_ZN6SERCOM8resetSPIEv+0xa>
}
    33f2:	4770      	bx	lr

000033f4 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    33f4:	2202      	movs	r2, #2
    33f6:	6803      	ldr	r3, [r0, #0]
    33f8:	6819      	ldr	r1, [r3, #0]
    33fa:	430a      	orrs	r2, r1
    33fc:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    33fe:	69da      	ldr	r2, [r3, #28]
    3400:	0792      	lsls	r2, r2, #30
    3402:	d4fc      	bmi.n	33fe <_ZN6SERCOM9enableSPIEv+0xa>
}
    3404:	4770      	bx	lr

00003406 <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    3406:	6803      	ldr	r3, [r0, #0]
    3408:	69da      	ldr	r2, [r3, #28]
    340a:	0792      	lsls	r2, r2, #30
    340c:	d4fc      	bmi.n	3408 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    340e:	2102      	movs	r1, #2
    3410:	681a      	ldr	r2, [r3, #0]
    3412:	438a      	bics	r2, r1
    3414:	601a      	str	r2, [r3, #0]
}
    3416:	4770      	bx	lr

00003418 <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    3418:	6802      	ldr	r2, [r0, #0]
    341a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    341c:	0a5b      	lsrs	r3, r3, #9
    341e:	025b      	lsls	r3, r3, #9
    3420:	4319      	orrs	r1, r3
    3422:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    3424:	7e13      	ldrb	r3, [r2, #24]
    3426:	075b      	lsls	r3, r3, #29
    3428:	d5fc      	bpl.n	3424 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    342a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    342c:	b2c0      	uxtb	r0, r0
}
    342e:	4770      	bx	lr

00003430 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    3430:	6803      	ldr	r3, [r0, #0]
    3432:	4a21      	ldr	r2, [pc, #132]	; (34b8 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    3434:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    3436:	4293      	cmp	r3, r2
    3438:	d011      	beq.n	345e <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    343a:	4a20      	ldr	r2, [pc, #128]	; (34bc <_ZN6SERCOM13initClockNVICEv+0x8c>)
    343c:	4293      	cmp	r3, r2
    343e:	d02f      	beq.n	34a0 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    3440:	4a1f      	ldr	r2, [pc, #124]	; (34c0 <_ZN6SERCOM13initClockNVICEv+0x90>)
    3442:	4293      	cmp	r3, r2
    3444:	d02f      	beq.n	34a6 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    3446:	4a1f      	ldr	r2, [pc, #124]	; (34c4 <_ZN6SERCOM13initClockNVICEv+0x94>)
    3448:	4293      	cmp	r3, r2
    344a:	d02f      	beq.n	34ac <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    344c:	4a1e      	ldr	r2, [pc, #120]	; (34c8 <_ZN6SERCOM13initClockNVICEv+0x98>)
    344e:	4293      	cmp	r3, r2
    3450:	d02f      	beq.n	34b2 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    3452:	4a1e      	ldr	r2, [pc, #120]	; (34cc <_ZN6SERCOM13initClockNVICEv+0x9c>)
    3454:	4293      	cmp	r3, r2
    3456:	d122      	bne.n	349e <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    3458:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    345a:	2219      	movs	r2, #25
    345c:	e001      	b.n	3462 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    345e:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    3460:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3462:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3464:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3466:	4099      	lsls	r1, r3
    3468:	4819      	ldr	r0, [pc, #100]	; (34d0 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    346a:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    346c:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    346e:	0899      	lsrs	r1, r3, #2
    3470:	402b      	ands	r3, r5
    3472:	40ab      	lsls	r3, r5
    3474:	35fc      	adds	r5, #252	; 0xfc
    3476:	409d      	lsls	r5, r3
    3478:	0089      	lsls	r1, r1, #2
    347a:	1809      	adds	r1, r1, r0
    347c:	00a4      	lsls	r4, r4, #2
    347e:	5908      	ldr	r0, [r1, r4]
    3480:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    3482:	25c0      	movs	r5, #192	; 0xc0
    3484:	409d      	lsls	r5, r3
    3486:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3488:	4303      	orrs	r3, r0
    348a:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    348c:	2380      	movs	r3, #128	; 0x80
    348e:	01db      	lsls	r3, r3, #7
    3490:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    3492:	4b10      	ldr	r3, [pc, #64]	; (34d4 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    3494:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3496:	785a      	ldrb	r2, [r3, #1]
    3498:	b252      	sxtb	r2, r2
    349a:	2a00      	cmp	r2, #0
    349c:	dbfb      	blt.n	3496 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    349e:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    34a0:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    34a2:	2215      	movs	r2, #21
    34a4:	e7dd      	b.n	3462 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    34a6:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    34a8:	2216      	movs	r2, #22
    34aa:	e7da      	b.n	3462 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    34ac:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    34ae:	2217      	movs	r2, #23
    34b0:	e7d7      	b.n	3462 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    34b2:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    34b4:	2218      	movs	r2, #24
    34b6:	e7d4      	b.n	3462 <_ZN6SERCOM13initClockNVICEv+0x32>
    34b8:	42000800 	.word	0x42000800
    34bc:	42000c00 	.word	0x42000c00
    34c0:	42001000 	.word	0x42001000
    34c4:	42001400 	.word	0x42001400
    34c8:	42001800 	.word	0x42001800
    34cc:	42001c00 	.word	0x42001c00
    34d0:	e000e100 	.word	0xe000e100
    34d4:	40000c00 	.word	0x40000c00

000034d8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    34d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34da:	0004      	movs	r4, r0
    34dc:	0016      	movs	r6, r2
    34de:	000f      	movs	r7, r1
    34e0:	001d      	movs	r5, r3
  initClockNVIC();
    34e2:	f7ff ffa5 	bl	3430 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    34e6:	0020      	movs	r0, r4
    34e8:	f7ff ff0c 	bl	3304 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    34ec:	221c      	movs	r2, #28
    34ee:	00bb      	lsls	r3, r7, #2
    34f0:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    34f2:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    34f4:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    34f6:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    34f8:	4313      	orrs	r3, r2
    34fa:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    34fc:	2384      	movs	r3, #132	; 0x84
    34fe:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    3500:	2f01      	cmp	r7, #1
    3502:	d118      	bne.n	3536 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    3504:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    3506:	2e01      	cmp	r6, #1
    3508:	d000      	beq.n	350c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    350a:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    350c:	4b0a      	ldr	r3, [pc, #40]	; (3538 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    350e:	4369      	muls	r1, r5
    3510:	6818      	ldr	r0, [r3, #0]
    3512:	00c0      	lsls	r0, r0, #3
    3514:	f000 fb6e 	bl	3bf4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    3518:	2207      	movs	r2, #7
    351a:	89a3      	ldrh	r3, [r4, #12]
    351c:	4002      	ands	r2, r0
    351e:	04db      	lsls	r3, r3, #19
    3520:	0352      	lsls	r2, r2, #13
    3522:	0cdb      	lsrs	r3, r3, #19
    3524:	4313      	orrs	r3, r2
    3526:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    3528:	0403      	lsls	r3, r0, #16
    352a:	89a0      	ldrh	r0, [r4, #12]
    352c:	0cdb      	lsrs	r3, r3, #19
    352e:	0b40      	lsrs	r0, r0, #13
    3530:	0340      	lsls	r0, r0, #13
    3532:	4318      	orrs	r0, r3
    3534:	81a0      	strh	r0, [r4, #12]
}
    3536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3538:	20000024 	.word	0x20000024

0000353c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    353c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    353e:	0007      	movs	r7, r0
    3540:	9301      	str	r3, [sp, #4]
    3542:	ab08      	add	r3, sp, #32
    3544:	781e      	ldrb	r6, [r3, #0]
    3546:	000d      	movs	r5, r1
    3548:	0014      	movs	r4, r2
  resetSPI();
    354a:	f7ff ff47 	bl	33dc <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    354e:	0038      	movs	r0, r7
    3550:	f7ff ff6e 	bl	3430 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    3554:	22c0      	movs	r2, #192	; 0xc0
    3556:	0524      	lsls	r4, r4, #20
    3558:	0392      	lsls	r2, r2, #14
    355a:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    355c:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    355e:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    3560:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    3562:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    3564:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    3566:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    3568:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    356a:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    356c:	0011      	movs	r1, r2
    356e:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    3570:	02b6      	lsls	r6, r6, #10
    3572:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    3574:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    3576:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    3578:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    357a:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    357c:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    357e:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    3580:	605a      	str	r2, [r3, #4]
}
    3582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00003584 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    3584:	2001      	movs	r0, #1
    3586:	4770      	bx	lr

00003588 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    3588:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    358a:	6803      	ldr	r3, [r0, #0]
    358c:	4a01      	ldr	r2, [pc, #4]	; (3594 <_ZN4Uart5beginEm+0xc>)
    358e:	6a1b      	ldr	r3, [r3, #32]
    3590:	4798      	blx	r3
}
    3592:	bd10      	pop	{r4, pc}
    3594:	00000413 	.word	0x00000413

00003598 <_ZN4Uart4peekEv>:
  if(_iTail == _iHead)
    3598:	0003      	movs	r3, r0
    359a:	33fc      	adds	r3, #252	; 0xfc
    359c:	69d9      	ldr	r1, [r3, #28]
    359e:	699a      	ldr	r2, [r3, #24]
    35a0:	4291      	cmp	r1, r2
    35a2:	d003      	beq.n	35ac <_ZN4Uart4peekEv+0x14>
  return _aucBuffer[_iTail];
    35a4:	69db      	ldr	r3, [r3, #28]
    35a6:	18c0      	adds	r0, r0, r3
    35a8:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    35aa:	4770      	bx	lr
    return -1;
    35ac:	2001      	movs	r0, #1
    35ae:	4240      	negs	r0, r0
  return rxBuffer.peek();
    35b0:	e7fb      	b.n	35aa <_ZN4Uart4peekEv+0x12>

000035b2 <_ZN4Uart3endEv>:
{
    35b2:	b510      	push	{r4, lr}
    35b4:	0004      	movs	r4, r0
  sercom->resetUART();
    35b6:	6900      	ldr	r0, [r0, #16]
    35b8:	f7ff fea4 	bl	3304 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    35bc:	0022      	movs	r2, r4
    35be:	2300      	movs	r3, #0
    35c0:	32fc      	adds	r2, #252	; 0xfc
    35c2:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    35c4:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    35c6:	2286      	movs	r2, #134	; 0x86
    35c8:	0092      	lsls	r2, r2, #2
    35ca:	18a4      	adds	r4, r4, r2
    35cc:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    35ce:	60a3      	str	r3, [r4, #8]
}
    35d0:	bd10      	pop	{r4, pc}

000035d2 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    35d2:	20f0      	movs	r0, #240	; 0xf0
    35d4:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    35d6:	3930      	subs	r1, #48	; 0x30
    35d8:	4248      	negs	r0, r1
    35da:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    35dc:	4770      	bx	lr

000035de <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    35de:	23f0      	movs	r3, #240	; 0xf0
    35e0:	011b      	lsls	r3, r3, #4
    35e2:	4019      	ands	r1, r3
    35e4:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    35e6:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    35e8:	009b      	lsls	r3, r3, #2
    35ea:	4299      	cmp	r1, r3
    35ec:	d00a      	beq.n	3604 <_ZN4Uart15extractCharSizeEt+0x26>
    35ee:	3301      	adds	r3, #1
    35f0:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    35f2:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    35f4:	4299      	cmp	r1, r3
    35f6:	d005      	beq.n	3604 <_ZN4Uart15extractCharSizeEt+0x26>
    35f8:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    35fa:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    35fc:	005b      	lsls	r3, r3, #1
    35fe:	4299      	cmp	r1, r3
    3600:	d000      	beq.n	3604 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    3602:	2000      	movs	r0, #0

  }
}
    3604:	4770      	bx	lr

00003606 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    3606:	200f      	movs	r0, #15
    3608:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    360a:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    360c:	2901      	cmp	r1, #1
    360e:	d003      	beq.n	3618 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    3610:	3902      	subs	r1, #2
    3612:	1e48      	subs	r0, r1, #1
    3614:	4181      	sbcs	r1, r0
    3616:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    3618:	4770      	bx	lr
	...

0000361c <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    361c:	2389      	movs	r3, #137	; 0x89
{
    361e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3620:	2618      	movs	r6, #24
{
    3622:	b085      	sub	sp, #20
    3624:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3626:	009b      	lsls	r3, r3, #2
{
    3628:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    362a:	5cc0      	ldrb	r0, [r0, r3]
    362c:	0033      	movs	r3, r6
    362e:	2108      	movs	r1, #8
    3630:	4343      	muls	r3, r0
    3632:	4d32      	ldr	r5, [pc, #200]	; (36fc <_ZN4Uart5beginEmt+0xe0>)
{
    3634:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3636:	18eb      	adds	r3, r5, r3
    3638:	5659      	ldrsb	r1, [r3, r1]
    363a:	f7fe fdb1 	bl	21a0 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    363e:	4b30      	ldr	r3, [pc, #192]	; (3700 <_ZN4Uart5beginEmt+0xe4>)
    3640:	2108      	movs	r1, #8
    3642:	5ce0      	ldrb	r0, [r4, r3]
    3644:	0033      	movs	r3, r6
    3646:	4343      	muls	r3, r0
    3648:	18eb      	adds	r3, r5, r3
    364a:	5659      	ldrsb	r1, [r3, r1]
    364c:	f7fe fda8 	bl	21a0 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    3650:	4b2c      	ldr	r3, [pc, #176]	; (3704 <_ZN4Uart5beginEmt+0xe8>)
    3652:	5ce2      	ldrb	r2, [r4, r3]
    3654:	9303      	str	r3, [sp, #12]
    3656:	2a02      	cmp	r2, #2
    3658:	d109      	bne.n	366e <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    365a:	3311      	adds	r3, #17
    365c:	5ce0      	ldrb	r0, [r4, r3]
    365e:	28ff      	cmp	r0, #255	; 0xff
    3660:	d005      	beq.n	366e <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    3662:	2108      	movs	r1, #8
    3664:	4346      	muls	r6, r0
    3666:	19ae      	adds	r6, r5, r6
    3668:	5671      	ldrsb	r1, [r6, r1]
    366a:	f7fe fd99 	bl	21a0 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    366e:	268a      	movs	r6, #138	; 0x8a
    3670:	00b6      	lsls	r6, r6, #2
    3672:	5da0      	ldrb	r0, [r4, r6]
    3674:	28ff      	cmp	r0, #255	; 0xff
    3676:	d019      	beq.n	36ac <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    3678:	2101      	movs	r1, #1
    367a:	f7fe fd19 	bl	20b0 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    367e:	2218      	movs	r2, #24
    3680:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3682:	4921      	ldr	r1, [pc, #132]	; (3708 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    3684:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3686:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3688:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    368a:	01db      	lsls	r3, r3, #7
    368c:	1858      	adds	r0, r3, r1
    368e:	218b      	movs	r1, #139	; 0x8b
    3690:	0089      	lsls	r1, r1, #2
    3692:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    3694:	491d      	ldr	r1, [pc, #116]	; (370c <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3696:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    3698:	185b      	adds	r3, r3, r1
    369a:	218c      	movs	r1, #140	; 0x8c
    369c:	0089      	lsls	r1, r1, #2
    369e:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    36a0:	6869      	ldr	r1, [r5, #4]
    36a2:	408a      	lsls	r2, r1
    36a4:	218d      	movs	r1, #141	; 0x8d
    36a6:	0089      	lsls	r1, r1, #2
    36a8:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    36aa:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    36ac:	2201      	movs	r2, #1
    36ae:	9b02      	ldr	r3, [sp, #8]
    36b0:	0011      	movs	r1, r2
    36b2:	6920      	ldr	r0, [r4, #16]
    36b4:	f7ff ff10 	bl	34d8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    36b8:	0039      	movs	r1, r7
    36ba:	0020      	movs	r0, r4
    36bc:	f7ff ff8f 	bl	35de <_ZN4Uart15extractCharSizeEt>
    36c0:	0039      	movs	r1, r7
    36c2:	0005      	movs	r5, r0
    36c4:	0020      	movs	r0, r4
    36c6:	f7ff ff9e 	bl	3606 <_ZN4Uart13extractParityEt>
    36ca:	0039      	movs	r1, r7
    36cc:	0006      	movs	r6, r0
    36ce:	0020      	movs	r0, r4
    36d0:	f7ff ff7f 	bl	35d2 <_ZN4Uart16extractNbStopBitEt>
    36d4:	0033      	movs	r3, r6
    36d6:	9000      	str	r0, [sp, #0]
    36d8:	0029      	movs	r1, r5
    36da:	6920      	ldr	r0, [r4, #16]
    36dc:	2201      	movs	r2, #1
    36de:	f7ff fde5 	bl	32ac <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    36e2:	4b0b      	ldr	r3, [pc, #44]	; (3710 <_ZN4Uart5beginEmt+0xf4>)
    36e4:	6920      	ldr	r0, [r4, #16]
    36e6:	5ce2      	ldrb	r2, [r4, r3]
    36e8:	9b03      	ldr	r3, [sp, #12]
    36ea:	5ce1      	ldrb	r1, [r4, r3]
    36ec:	f7ff fdf8 	bl	32e0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    36f0:	6920      	ldr	r0, [r4, #16]
    36f2:	f7ff fe13 	bl	331c <_ZN6SERCOM10enableUARTEv>
}
    36f6:	b005      	add	sp, #20
    36f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	0000600c 	.word	0x0000600c
    3700:	00000225 	.word	0x00000225
    3704:	00000227 	.word	0x00000227
    3708:	41004418 	.word	0x41004418
    370c:	41004414 	.word	0x41004414
    3710:	00000226 	.word	0x00000226

00003714 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    3714:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    3716:	b510      	push	{r4, lr}
    3718:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    371a:	0052      	lsls	r2, r2, #1
    371c:	2100      	movs	r1, #0
    371e:	f002 fa58 	bl	5bd2 <memset>
  _iHead = 0;
    3722:	0023      	movs	r3, r4
    3724:	2200      	movs	r2, #0
    3726:	33fc      	adds	r3, #252	; 0xfc
    3728:	605a      	str	r2, [r3, #4]
}
    372a:	0020      	movs	r0, r4
  _iTail = 0;
    372c:	609a      	str	r2, [r3, #8]
}
    372e:	bd10      	pop	{r4, pc}

00003730 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	b085      	sub	sp, #20
    3734:	001d      	movs	r5, r3
    3736:	ab0a      	add	r3, sp, #40	; 0x28
    3738:	781b      	ldrb	r3, [r3, #0]
    373a:	0004      	movs	r4, r0
    373c:	9300      	str	r3, [sp, #0]
    373e:	ab0b      	add	r3, sp, #44	; 0x2c
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	0016      	movs	r6, r2
    3744:	9301      	str	r3, [sp, #4]
    3746:	ab0c      	add	r3, sp, #48	; 0x30
    3748:	781b      	ldrb	r3, [r3, #0]
    374a:	000f      	movs	r7, r1
    374c:	9302      	str	r3, [sp, #8]
    374e:	ab0d      	add	r3, sp, #52	; 0x34
    3750:	781b      	ldrb	r3, [r3, #0]
    3752:	9303      	str	r3, [sp, #12]
    3754:	2300      	movs	r3, #0
    3756:	6043      	str	r3, [r0, #4]
    3758:	23fa      	movs	r3, #250	; 0xfa
    375a:	009b      	lsls	r3, r3, #2
    375c:	6083      	str	r3, [r0, #8]
    375e:	4b12      	ldr	r3, [pc, #72]	; (37a8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x78>)
    3760:	3308      	adds	r3, #8
    3762:	6003      	str	r3, [r0, #0]
    3764:	3014      	adds	r0, #20
    3766:	f7ff ffd5 	bl	3714 <_ZN11RingBufferNILi256EEC1Ev>
    376a:	0020      	movs	r0, r4
    376c:	301d      	adds	r0, #29
    376e:	30ff      	adds	r0, #255	; 0xff
    3770:	f7ff ffd0 	bl	3714 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    3774:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    3776:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    3778:	009b      	lsls	r3, r3, #2
  sercom = _s;
    377a:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    377c:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    377e:	4b0b      	ldr	r3, [pc, #44]	; (37ac <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x7c>)
  uc_padRX = _padRX ;
    3780:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    3782:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    3784:	4b0a      	ldr	r3, [pc, #40]	; (37b0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x80>)
}
    3786:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    3788:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    378a:	466a      	mov	r2, sp
    378c:	4b09      	ldr	r3, [pc, #36]	; (37b4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x84>)
    378e:	7912      	ldrb	r2, [r2, #4]
    3790:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    3792:	466a      	mov	r2, sp
    3794:	7a12      	ldrb	r2, [r2, #8]
    3796:	3301      	adds	r3, #1
    3798:	54e2      	strb	r2, [r4, r3]
  uc_pinCTS = _pinCTS;
    379a:	466a      	mov	r2, sp
    379c:	7b12      	ldrb	r2, [r2, #12]
    379e:	3310      	adds	r3, #16
    37a0:	54e2      	strb	r2, [r4, r3]
}
    37a2:	b005      	add	sp, #20
    37a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	0000636c 	.word	0x0000636c
    37ac:	00000225 	.word	0x00000225
    37b0:	00000226 	.word	0x00000226
    37b4:	00000227 	.word	0x00000227

000037b8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    37b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    37ba:	001d      	movs	r5, r3
    37bc:	ab08      	add	r3, sp, #32
    37be:	781b      	ldrb	r3, [r3, #0]
    37c0:	0004      	movs	r4, r0
    37c2:	9300      	str	r3, [sp, #0]
    37c4:	ab09      	add	r3, sp, #36	; 0x24
    37c6:	781b      	ldrb	r3, [r3, #0]
    37c8:	0016      	movs	r6, r2
    37ca:	9301      	str	r3, [sp, #4]
    37cc:	2300      	movs	r3, #0
    37ce:	6043      	str	r3, [r0, #4]
    37d0:	23fa      	movs	r3, #250	; 0xfa
    37d2:	009b      	lsls	r3, r3, #2
    37d4:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    37d6:	4b11      	ldr	r3, [pc, #68]	; (381c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    37d8:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    37da:	3308      	adds	r3, #8
    37dc:	6003      	str	r3, [r0, #0]
    37de:	3014      	adds	r0, #20
    37e0:	f7ff ff98 	bl	3714 <_ZN11RingBufferNILi256EEC1Ev>
    37e4:	0020      	movs	r0, r4
    37e6:	301d      	adds	r0, #29
    37e8:	30ff      	adds	r0, #255	; 0xff
    37ea:	f7ff ff93 	bl	3714 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    37ee:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    37f0:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    37f2:	009b      	lsls	r3, r3, #2
  sercom = _s;
    37f4:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    37f6:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    37f8:	4b09      	ldr	r3, [pc, #36]	; (3820 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    37fa:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    37fc:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    37fe:	4b09      	ldr	r3, [pc, #36]	; (3824 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    3800:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    3802:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    3804:	466a      	mov	r2, sp
    3806:	4b08      	ldr	r3, [pc, #32]	; (3828 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    3808:	7912      	ldrb	r2, [r2, #4]
    380a:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    380c:	228a      	movs	r2, #138	; 0x8a
    380e:	3b29      	subs	r3, #41	; 0x29
    3810:	3bff      	subs	r3, #255	; 0xff
    3812:	0092      	lsls	r2, r2, #2
    3814:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    3816:	3210      	adds	r2, #16
    3818:	54a3      	strb	r3, [r4, r2]
}
    381a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    381c:	0000636c 	.word	0x0000636c
    3820:	00000225 	.word	0x00000225
    3824:	00000226 	.word	0x00000226
    3828:	00000227 	.word	0x00000227

0000382c <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    382c:	0003      	movs	r3, r0
    382e:	33fc      	adds	r3, #252	; 0xfc
    3830:	6858      	ldr	r0, [r3, #4]
    3832:	689b      	ldr	r3, [r3, #8]
    3834:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    3836:	d501      	bpl.n	383c <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    3838:	3001      	adds	r0, #1
    383a:	30ff      	adds	r0, #255	; 0xff
}
    383c:	4770      	bx	lr

0000383e <_ZN4Uart5flushEv>:
{
    383e:	b510      	push	{r4, lr}
    3840:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    3842:	0020      	movs	r0, r4
    3844:	301d      	adds	r0, #29
    3846:	30ff      	adds	r0, #255	; 0xff
    3848:	f7ff fff0 	bl	382c <_ZN11RingBufferNILi256EE9availableEv>
    384c:	2800      	cmp	r0, #0
    384e:	d1f8      	bne.n	3842 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    3850:	6920      	ldr	r0, [r4, #16]
    3852:	f7ff fd6c 	bl	332e <_ZN6SERCOM9flushUARTEv>
}
    3856:	bd10      	pop	{r4, pc}

00003858 <_ZN4Uart9availableEv>:
{
    3858:	b510      	push	{r4, lr}
  return rxBuffer.available();
    385a:	3014      	adds	r0, #20
    385c:	f7ff ffe6 	bl	382c <_ZN11RingBufferNILi256EE9availableEv>
}
    3860:	bd10      	pop	{r4, pc}

00003862 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    3862:	0003      	movs	r3, r0
    3864:	33fc      	adds	r3, #252	; 0xfc
    3866:	6859      	ldr	r1, [r3, #4]
    3868:	689a      	ldr	r2, [r3, #8]
    386a:	4291      	cmp	r1, r2
    386c:	db04      	blt.n	3878 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    386e:	685a      	ldr	r2, [r3, #4]
    3870:	6898      	ldr	r0, [r3, #8]
    3872:	1a80      	subs	r0, r0, r2
    3874:	30ff      	adds	r0, #255	; 0xff
}
    3876:	4770      	bx	lr
    return _iTail - _iHead - 1;
    3878:	6898      	ldr	r0, [r3, #8]
    387a:	685b      	ldr	r3, [r3, #4]
    387c:	1ac0      	subs	r0, r0, r3
    387e:	3801      	subs	r0, #1
    3880:	e7f9      	b.n	3876 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00003882 <_ZN4Uart17availableForWriteEv>:
{
    3882:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    3884:	301d      	adds	r0, #29
    3886:	30ff      	adds	r0, #255	; 0xff
    3888:	f7ff ffeb 	bl	3862 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    388c:	bd10      	pop	{r4, pc}

0000388e <_ZN4Uart10IrqHandlerEv>:
{
    388e:	b510      	push	{r4, lr}
    3890:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    3892:	6900      	ldr	r0, [r0, #16]
    3894:	f7ff fd67 	bl	3366 <_ZN6SERCOM16isFrameErrorUARTEv>
    3898:	2800      	cmp	r0, #0
    389a:	d005      	beq.n	38a8 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    389c:	6920      	ldr	r0, [r4, #16]
    389e:	f7ff fd72 	bl	3386 <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    38a2:	6920      	ldr	r0, [r4, #16]
    38a4:	f7ff fd64 	bl	3370 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    38a8:	6920      	ldr	r0, [r4, #16]
    38aa:	f7ff fd4c 	bl	3346 <_ZN6SERCOM17availableDataUARTEv>
    38ae:	2800      	cmp	r0, #0
    38b0:	d020      	beq.n	38f4 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    38b2:	6920      	ldr	r0, [r4, #16]
    38b4:	f7ff fd67 	bl	3386 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    38b8:	0022      	movs	r2, r4
    38ba:	32fc      	adds	r2, #252	; 0xfc
    38bc:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    38be:	69d1      	ldr	r1, [r2, #28]
  return (uint32_t)(index + 1) % N;
    38c0:	3301      	adds	r3, #1
    38c2:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    38c4:	428b      	cmp	r3, r1
    38c6:	d003      	beq.n	38d0 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    38c8:	6991      	ldr	r1, [r2, #24]
    38ca:	1861      	adds	r1, r4, r1
    38cc:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    38ce:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    38d0:	238a      	movs	r3, #138	; 0x8a
    38d2:	009b      	lsls	r3, r3, #2
    38d4:	5ce3      	ldrb	r3, [r4, r3]
    38d6:	2bff      	cmp	r3, #255	; 0xff
    38d8:	d00c      	beq.n	38f4 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    38da:	0020      	movs	r0, r4
    38dc:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    38de:	f7ff ffc0 	bl	3862 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    38e2:	2809      	cmp	r0, #9
    38e4:	dc06      	bgt.n	38f4 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    38e6:	238b      	movs	r3, #139	; 0x8b
    38e8:	228d      	movs	r2, #141	; 0x8d
    38ea:	009b      	lsls	r3, r3, #2
    38ec:	0092      	lsls	r2, r2, #2
    38ee:	58e3      	ldr	r3, [r4, r3]
    38f0:	58a2      	ldr	r2, [r4, r2]
    38f2:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    38f4:	6920      	ldr	r0, [r4, #16]
    38f6:	f7ff fd41 	bl	337c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    38fa:	2800      	cmp	r0, #0
    38fc:	d01a      	beq.n	3934 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    38fe:	0020      	movs	r0, r4
    3900:	301d      	adds	r0, #29
    3902:	30ff      	adds	r0, #255	; 0xff
    3904:	f7ff ff92 	bl	382c <_ZN11RingBufferNILi256EE9availableEv>
    3908:	2800      	cmp	r0, #0
    390a:	d022      	beq.n	3952 <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    390c:	2386      	movs	r3, #134	; 0x86
    390e:	009b      	lsls	r3, r3, #2
    3910:	18e3      	adds	r3, r4, r3
    3912:	6899      	ldr	r1, [r3, #8]
    3914:	685a      	ldr	r2, [r3, #4]
    3916:	4291      	cmp	r1, r2
    3918:	d018      	beq.n	394c <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    391a:	218e      	movs	r1, #142	; 0x8e
    391c:	689a      	ldr	r2, [r3, #8]
    391e:	0049      	lsls	r1, r1, #1
    3920:	18a2      	adds	r2, r4, r2
    3922:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    3924:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    3926:	3201      	adds	r2, #1
    3928:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    392a:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    392c:	b2c9      	uxtb	r1, r1
    392e:	6920      	ldr	r0, [r4, #16]
    3930:	f7ff fd2d 	bl	338e <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    3934:	6920      	ldr	r0, [r4, #16]
    3936:	f7ff fd0b 	bl	3350 <_ZN6SERCOM11isUARTErrorEv>
    393a:	2800      	cmp	r0, #0
    393c:	d005      	beq.n	394a <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    393e:	6920      	ldr	r0, [r4, #16]
    3940:	f7ff fd0a 	bl	3358 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    3944:	6920      	ldr	r0, [r4, #16]
    3946:	f7ff fcfa 	bl	333e <_ZN6SERCOM15clearStatusUARTEv>
}
    394a:	bd10      	pop	{r4, pc}
    return -1;
    394c:	2101      	movs	r1, #1
    394e:	4249      	negs	r1, r1
    3950:	e7ec      	b.n	392c <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    3952:	6920      	ldr	r0, [r4, #16]
    3954:	f7ff fd27 	bl	33a6 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    3958:	e7ec      	b.n	3934 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

0000395c <_ZN4Uart5writeEh>:
{
    395c:	b570      	push	{r4, r5, r6, lr}
    395e:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3960:	6900      	ldr	r0, [r0, #16]
{
    3962:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3964:	f7ff fd0a 	bl	337c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3968:	2800      	cmp	r0, #0
    396a:	d124      	bne.n	39b6 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    396c:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    396e:	2386      	movs	r3, #134	; 0x86
    3970:	009b      	lsls	r3, r3, #2
    3972:	18e3      	adds	r3, r4, r3
    3974:	685a      	ldr	r2, [r3, #4]
    3976:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    3978:	3201      	adds	r2, #1
    397a:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    397c:	428a      	cmp	r2, r1
    397e:	d12f      	bne.n	39e0 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3980:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    3984:	07db      	lsls	r3, r3, #31
    3986:	d40d      	bmi.n	39a4 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    3988:	4b1e      	ldr	r3, [pc, #120]	; (3a04 <_ZN4Uart5writeEh+0xa8>)
    398a:	685b      	ldr	r3, [r3, #4]
    398c:	05db      	lsls	r3, r3, #23
    398e:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    3990:	d0ed      	beq.n	396e <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    3992:	3b10      	subs	r3, #16
    3994:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    3996:	2b00      	cmp	r3, #0
    3998:	db19      	blt.n	39ce <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    399a:	089b      	lsrs	r3, r3, #2
    399c:	33c0      	adds	r3, #192	; 0xc0
    399e:	4a1a      	ldr	r2, [pc, #104]	; (3a08 <_ZN4Uart5writeEh+0xac>)
    39a0:	009b      	lsls	r3, r3, #2
    39a2:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    39a4:	6920      	ldr	r0, [r4, #16]
    39a6:	f7ff fce9 	bl	337c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    39aa:	2800      	cmp	r0, #0
    39ac:	d0df      	beq.n	396e <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    39ae:	0020      	movs	r0, r4
    39b0:	f7ff ff6d 	bl	388e <_ZN4Uart10IrqHandlerEv>
    39b4:	e7db      	b.n	396e <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    39b6:	0020      	movs	r0, r4
    39b8:	301d      	adds	r0, #29
    39ba:	30ff      	adds	r0, #255	; 0xff
    39bc:	f7ff ff36 	bl	382c <_ZN11RingBufferNILi256EE9availableEv>
    39c0:	2800      	cmp	r0, #0
    39c2:	d1d3      	bne.n	396c <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    39c4:	0029      	movs	r1, r5
    39c6:	6920      	ldr	r0, [r4, #16]
    39c8:	f7ff fce1 	bl	338e <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    39cc:	e017      	b.n	39fe <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    39ce:	220f      	movs	r2, #15
    39d0:	4013      	ands	r3, r2
    39d2:	3b08      	subs	r3, #8
    39d4:	089b      	lsrs	r3, r3, #2
    39d6:	4a0d      	ldr	r2, [pc, #52]	; (3a0c <_ZN4Uart5writeEh+0xb0>)
    39d8:	009b      	lsls	r3, r3, #2
    39da:	189b      	adds	r3, r3, r2
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	e7e1      	b.n	39a4 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    39e0:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    39e2:	3201      	adds	r2, #1
    39e4:	4016      	ands	r6, r2
  if ( i != _iTail )
    39e6:	689a      	ldr	r2, [r3, #8]
    39e8:	4296      	cmp	r6, r2
    39ea:	d005      	beq.n	39f8 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    39ec:	218e      	movs	r1, #142	; 0x8e
    39ee:	685a      	ldr	r2, [r3, #4]
    39f0:	0049      	lsls	r1, r1, #1
    39f2:	18a2      	adds	r2, r4, r2
    39f4:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    39f6:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    39f8:	6920      	ldr	r0, [r4, #16]
    39fa:	f7ff fcd0 	bl	339e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    39fe:	2001      	movs	r0, #1
    3a00:	bd70      	pop	{r4, r5, r6, pc}
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	e000ed00 	.word	0xe000ed00
    3a08:	e000e100 	.word	0xe000e100
    3a0c:	e000ed1c 	.word	0xe000ed1c

00003a10 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    3a10:	0003      	movs	r3, r0
    3a12:	33fc      	adds	r3, #252	; 0xfc
    3a14:	69d9      	ldr	r1, [r3, #28]
    3a16:	699a      	ldr	r2, [r3, #24]
{
    3a18:	b570      	push	{r4, r5, r6, lr}
    3a1a:	0004      	movs	r4, r0
    3a1c:	4291      	cmp	r1, r2
    3a1e:	d01a      	beq.n	3a56 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    3a20:	69da      	ldr	r2, [r3, #28]
    3a22:	1882      	adds	r2, r0, r2
    3a24:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    3a26:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    3a28:	3201      	adds	r2, #1
    3a2a:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    3a2c:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    3a2e:	238a      	movs	r3, #138	; 0x8a
    3a30:	009b      	lsls	r3, r3, #2
    3a32:	5ce3      	ldrb	r3, [r4, r3]
    3a34:	2bff      	cmp	r3, #255	; 0xff
    3a36:	d00c      	beq.n	3a52 <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    3a38:	0020      	movs	r0, r4
    3a3a:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    3a3c:	f7ff ff11 	bl	3862 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    3a40:	280a      	cmp	r0, #10
    3a42:	dd06      	ble.n	3a52 <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    3a44:	238c      	movs	r3, #140	; 0x8c
    3a46:	228d      	movs	r2, #141	; 0x8d
    3a48:	009b      	lsls	r3, r3, #2
    3a4a:	0092      	lsls	r2, r2, #2
    3a4c:	58e3      	ldr	r3, [r4, r3]
    3a4e:	58a2      	ldr	r2, [r4, r2]
    3a50:	601a      	str	r2, [r3, #0]
}
    3a52:	0028      	movs	r0, r5
    3a54:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    3a56:	2501      	movs	r5, #1
    3a58:	426d      	negs	r5, r5
    3a5a:	e7e8      	b.n	3a2e <_ZN4Uart4readEv+0x1e>

00003a5c <_ZN11DiagnosticsD1Ev>:
 class Diagnostics {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
  ~Diagnostics(void){};
    3a5c:	4770      	bx	lr
	...

00003a60 <_ZN11Diagnostics17_printSupportLinkEv>:
    Serial.print(F("0"));
  }
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
    3a60:	b510      	push	{r4, lr}
  Serial.print(F("If this does not help resolve/clarify this issue, "));
    3a62:	4c05      	ldr	r4, [pc, #20]	; (3a78 <_ZN11Diagnostics17_printSupportLinkEv+0x18>)
    3a64:	4905      	ldr	r1, [pc, #20]	; (3a7c <_ZN11Diagnostics17_printSupportLinkEv+0x1c>)
    3a66:	0020      	movs	r0, r4
    3a68:	f7fc fdf6 	bl	658 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    3a6c:	4904      	ldr	r1, [pc, #16]	; (3a80 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
    3a6e:	0020      	movs	r0, r4
    3a70:	f7fc fe0e 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    3a74:	bd10      	pop	{r4, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	20000220 	.word	0x20000220
    3a7c:	000068dd 	.word	0x000068dd
    3a80:	00006910 	.word	0x00006910

00003a84 <_ZN11Diagnostics12troubleshootEhb>:
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
    3a84:	b570      	push	{r4, r5, r6, lr}
    3a86:	0006      	movs	r6, r0
    3a88:	000d      	movs	r5, r1
  bool _printoverride;
  errorcode = _code;
    3a8a:	7031      	strb	r1, [r6, #0]
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    3a8c:	2a00      	cmp	r2, #0
    3a8e:	d014      	beq.n	3aba <_ZN11Diagnostics12troubleshootEhb+0x36>
    3a90:	4c2e      	ldr	r4, [pc, #184]	; (3b4c <_ZN11Diagnostics12troubleshootEhb+0xc8>)
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
    3a92:	2914      	cmp	r1, #20
    3a94:	d84c      	bhi.n	3b30 <_ZN11Diagnostics12troubleshootEhb+0xac>
    3a96:	0008      	movs	r0, r1
    3a98:	f000 f8a2 	bl	3be0 <__gnu_thumb1_case_uqi>
    3a9c:	1c1a180b 	.word	0x1c1a180b
    3aa0:	2c26241e 	.word	0x2c26241e
    3aa4:	10383632 	.word	0x10383632
    3aa8:	3e3c3a34 	.word	0x3e3c3a34
    3aac:	46444240 	.word	0x46444240
    3ab0:	48          	.byte	0x48
    3ab1:	00          	.byte	0x00
      case SUCCESS:
      Serial.println(F("Function executed successfully"));
    3ab2:	4927      	ldr	r1, [pc, #156]	; (3b50 <_ZN11Diagnostics12troubleshootEhb+0xcc>)
      case NORESPONSE:
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
      break;

      case CALLBEGIN:
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    3ab4:	0020      	movs	r0, r4
    3ab6:	f7fc fdeb 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
      _printSupportLink();
    }
  #endif
  }
}
    3aba:	bd70      	pop	{r4, r5, r6, pc}
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
    3abc:	4925      	ldr	r1, [pc, #148]	; (3b54 <_ZN11Diagnostics12troubleshootEhb+0xd0>)
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    3abe:	0020      	movs	r0, r4
    3ac0:	f7fc fde6 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
      _printSupportLink();
    3ac4:	0030      	movs	r0, r6
    3ac6:	f7ff ffcb 	bl	3a60 <_ZN11Diagnostics17_printSupportLinkEv>
}
    3aca:	e7f6      	b.n	3aba <_ZN11Diagnostics12troubleshootEhb+0x36>
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    3acc:	4922      	ldr	r1, [pc, #136]	; (3b58 <_ZN11Diagnostics12troubleshootEhb+0xd4>)
    3ace:	e7f1      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    3ad0:	4922      	ldr	r1, [pc, #136]	; (3b5c <_ZN11Diagnostics12troubleshootEhb+0xd8>)
    3ad2:	e7f4      	b.n	3abe <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
    3ad4:	4922      	ldr	r1, [pc, #136]	; (3b60 <_ZN11Diagnostics12troubleshootEhb+0xdc>)
    3ad6:	e7ed      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Chip is busy."));
    3ad8:	4922      	ldr	r1, [pc, #136]	; (3b64 <_ZN11Diagnostics12troubleshootEhb+0xe0>)
    3ada:	0020      	movs	r0, r4
    3adc:	f7fc fdd8 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Make sure all pins have been connected properly"));
    3ae0:	4921      	ldr	r1, [pc, #132]	; (3b68 <_ZN11Diagnostics12troubleshootEhb+0xe4>)
    3ae2:	e7e7      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Page overflow has been disabled and the address called exceeds the memory"));
    3ae4:	4921      	ldr	r1, [pc, #132]	; (3b6c <_ZN11Diagnostics12troubleshootEhb+0xe8>)
    3ae6:	e7e5      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to Enable Writing to chip."));
    3ae8:	4921      	ldr	r1, [pc, #132]	; (3b70 <_ZN11Diagnostics12troubleshootEhb+0xec>)
    3aea:	0020      	movs	r0, r4
    3aec:	f7fc fdd0 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
    3af0:	4920      	ldr	r1, [pc, #128]	; (3b74 <_ZN11Diagnostics12troubleshootEhb+0xf0>)
    3af2:	e7e4      	b.n	3abe <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("This sector already contains data."));
    3af4:	4920      	ldr	r1, [pc, #128]	; (3b78 <_ZN11Diagnostics12troubleshootEhb+0xf4>)
    3af6:	0020      	movs	r0, r4
    3af8:	f7fc fdca 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the sectors being written to are erased."));
    3afc:	491f      	ldr	r1, [pc, #124]	; (3b7c <_ZN11Diagnostics12troubleshootEhb+0xf8>)
    3afe:	e7d9      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
    3b00:	491f      	ldr	r1, [pc, #124]	; (3b80 <_ZN11Diagnostics12troubleshootEhb+0xfc>)
    3b02:	e7d7      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("This function is not supported by the flash memory hardware."));
    3b04:	491f      	ldr	r1, [pc, #124]	; (3b84 <_ZN11Diagnostics12troubleshootEhb+0x100>)
    3b06:	e7d5      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to suspend/resume operation."));
    3b08:	491f      	ldr	r1, [pc, #124]	; (3b88 <_ZN11Diagnostics12troubleshootEhb+0x104>)
    3b0a:	e7d3      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Write Function has failed errorcheck."));
    3b0c:	491f      	ldr	r1, [pc, #124]	; (3b8c <_ZN11Diagnostics12troubleshootEhb+0x108>)
    3b0e:	e7d6      	b.n	3abe <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to enable 4-byte addressing."));
    3b10:	491f      	ldr	r1, [pc, #124]	; (3b90 <_ZN11Diagnostics12troubleshootEhb+0x10c>)
    3b12:	e7cf      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to disable 4-byte addressing."));
    3b14:	491f      	ldr	r1, [pc, #124]	; (3b94 <_ZN11Diagnostics12troubleshootEhb+0x110>)
    3b16:	e7cd      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The chip is currently powered down."));
    3b18:	491f      	ldr	r1, [pc, #124]	; (3b98 <_ZN11Diagnostics12troubleshootEhb+0x114>)
    3b1a:	e7cb      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The Flash chip does not support SFDP."));
    3b1c:	491f      	ldr	r1, [pc, #124]	; (3b9c <_ZN11Diagnostics12troubleshootEhb+0x118>)
    3b1e:	e7c9      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
    3b20:	491f      	ldr	r1, [pc, #124]	; (3ba0 <_ZN11Diagnostics12troubleshootEhb+0x11c>)
    3b22:	e7c7      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
    3b24:	491f      	ldr	r1, [pc, #124]	; (3ba4 <_ZN11Diagnostics12troubleshootEhb+0x120>)
    3b26:	e7c5      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
    3b28:	491f      	ldr	r1, [pc, #124]	; (3ba8 <_ZN11Diagnostics12troubleshootEhb+0x124>)
    3b2a:	e7c3      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("No Chip Select pin defined in the custom SPI Array."));
    3b2c:	491f      	ldr	r1, [pc, #124]	; (3bac <_ZN11Diagnostics12troubleshootEhb+0x128>)
    3b2e:	e7c1      	b.n	3ab4 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unknown error"));
    3b30:	491f      	ldr	r1, [pc, #124]	; (3bb0 <_ZN11Diagnostics12troubleshootEhb+0x12c>)
    3b32:	0020      	movs	r0, r4
    3b34:	f7fc fdac 	bl	690 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
    3b38:	002b      	movs	r3, r5
    3b3a:	3b0a      	subs	r3, #10
    3b3c:	2b01      	cmp	r3, #1
    3b3e:	d9c1      	bls.n	3ac4 <_ZN11Diagnostics12troubleshootEhb+0x40>
    3b40:	2304      	movs	r3, #4
    3b42:	439d      	bics	r5, r3
    3b44:	2d02      	cmp	r5, #2
    3b46:	d0bd      	beq.n	3ac4 <_ZN11Diagnostics12troubleshootEhb+0x40>
    3b48:	e7b7      	b.n	3aba <_ZN11Diagnostics12troubleshootEhb+0x36>
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	20000220 	.word	0x20000220
    3b50:	000063a0 	.word	0x000063a0
    3b54:	000063bf 	.word	0x000063bf
    3b58:	000063f0 	.word	0x000063f0
    3b5c:	0000642f 	.word	0x0000642f
    3b60:	0000646d 	.word	0x0000646d
    3b64:	00006502 	.word	0x00006502
    3b68:	00006510 	.word	0x00006510
    3b6c:	00006540 	.word	0x00006540
    3b70:	0000658a 	.word	0x0000658a
    3b74:	000065ac 	.word	0x000065ac
    3b78:	000065ef 	.word	0x000065ef
    3b7c:	00006612 	.word	0x00006612
    3b80:	0000664c 	.word	0x0000664c
    3b84:	0000669b 	.word	0x0000669b
    3b88:	000066d8 	.word	0x000066d8
    3b8c:	000066fc 	.word	0x000066fc
    3b90:	00006722 	.word	0x00006722
    3b94:	00006746 	.word	0x00006746
    3b98:	0000676b 	.word	0x0000676b
    3b9c:	0000678f 	.word	0x0000678f
    3ba0:	000067b5 	.word	0x000067b5
    3ba4:	000067ff 	.word	0x000067ff
    3ba8:	0000684c 	.word	0x0000684c
    3bac:	0000689b 	.word	0x0000689b
    3bb0:	000068cf 	.word	0x000068cf

00003bb4 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
    3bb4:	b510      	push	{r4, lr}
    3bb6:	4a03      	ldr	r2, [pc, #12]	; (3bc4 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x10>)
    3bb8:	4903      	ldr	r1, [pc, #12]	; (3bc8 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x14>)
    3bba:	4804      	ldr	r0, [pc, #16]	; (3bcc <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x18>)
    3bbc:	f000 f808 	bl	3bd0 <__aeabi_atexit>
    3bc0:	bd10      	pop	{r4, pc}
    3bc2:	46c0      	nop			; (mov r8, r8)
    3bc4:	20000000 	.word	0x20000000
    3bc8:	00003a5d 	.word	0x00003a5d
    3bcc:	20000d14 	.word	0x20000d14

00003bd0 <__aeabi_atexit>:
    3bd0:	000b      	movs	r3, r1
    3bd2:	b510      	push	{r4, lr}
    3bd4:	0001      	movs	r1, r0
    3bd6:	0018      	movs	r0, r3
    3bd8:	f001 ffac 	bl	5b34 <__cxa_atexit>
    3bdc:	bd10      	pop	{r4, pc}
	...

00003be0 <__gnu_thumb1_case_uqi>:
    3be0:	b402      	push	{r1}
    3be2:	4671      	mov	r1, lr
    3be4:	0849      	lsrs	r1, r1, #1
    3be6:	0049      	lsls	r1, r1, #1
    3be8:	5c09      	ldrb	r1, [r1, r0]
    3bea:	0049      	lsls	r1, r1, #1
    3bec:	448e      	add	lr, r1
    3bee:	bc02      	pop	{r1}
    3bf0:	4770      	bx	lr
    3bf2:	46c0      	nop			; (mov r8, r8)

00003bf4 <__udivsi3>:
    3bf4:	2200      	movs	r2, #0
    3bf6:	0843      	lsrs	r3, r0, #1
    3bf8:	428b      	cmp	r3, r1
    3bfa:	d374      	bcc.n	3ce6 <__udivsi3+0xf2>
    3bfc:	0903      	lsrs	r3, r0, #4
    3bfe:	428b      	cmp	r3, r1
    3c00:	d35f      	bcc.n	3cc2 <__udivsi3+0xce>
    3c02:	0a03      	lsrs	r3, r0, #8
    3c04:	428b      	cmp	r3, r1
    3c06:	d344      	bcc.n	3c92 <__udivsi3+0x9e>
    3c08:	0b03      	lsrs	r3, r0, #12
    3c0a:	428b      	cmp	r3, r1
    3c0c:	d328      	bcc.n	3c60 <__udivsi3+0x6c>
    3c0e:	0c03      	lsrs	r3, r0, #16
    3c10:	428b      	cmp	r3, r1
    3c12:	d30d      	bcc.n	3c30 <__udivsi3+0x3c>
    3c14:	22ff      	movs	r2, #255	; 0xff
    3c16:	0209      	lsls	r1, r1, #8
    3c18:	ba12      	rev	r2, r2
    3c1a:	0c03      	lsrs	r3, r0, #16
    3c1c:	428b      	cmp	r3, r1
    3c1e:	d302      	bcc.n	3c26 <__udivsi3+0x32>
    3c20:	1212      	asrs	r2, r2, #8
    3c22:	0209      	lsls	r1, r1, #8
    3c24:	d065      	beq.n	3cf2 <__udivsi3+0xfe>
    3c26:	0b03      	lsrs	r3, r0, #12
    3c28:	428b      	cmp	r3, r1
    3c2a:	d319      	bcc.n	3c60 <__udivsi3+0x6c>
    3c2c:	e000      	b.n	3c30 <__udivsi3+0x3c>
    3c2e:	0a09      	lsrs	r1, r1, #8
    3c30:	0bc3      	lsrs	r3, r0, #15
    3c32:	428b      	cmp	r3, r1
    3c34:	d301      	bcc.n	3c3a <__udivsi3+0x46>
    3c36:	03cb      	lsls	r3, r1, #15
    3c38:	1ac0      	subs	r0, r0, r3
    3c3a:	4152      	adcs	r2, r2
    3c3c:	0b83      	lsrs	r3, r0, #14
    3c3e:	428b      	cmp	r3, r1
    3c40:	d301      	bcc.n	3c46 <__udivsi3+0x52>
    3c42:	038b      	lsls	r3, r1, #14
    3c44:	1ac0      	subs	r0, r0, r3
    3c46:	4152      	adcs	r2, r2
    3c48:	0b43      	lsrs	r3, r0, #13
    3c4a:	428b      	cmp	r3, r1
    3c4c:	d301      	bcc.n	3c52 <__udivsi3+0x5e>
    3c4e:	034b      	lsls	r3, r1, #13
    3c50:	1ac0      	subs	r0, r0, r3
    3c52:	4152      	adcs	r2, r2
    3c54:	0b03      	lsrs	r3, r0, #12
    3c56:	428b      	cmp	r3, r1
    3c58:	d301      	bcc.n	3c5e <__udivsi3+0x6a>
    3c5a:	030b      	lsls	r3, r1, #12
    3c5c:	1ac0      	subs	r0, r0, r3
    3c5e:	4152      	adcs	r2, r2
    3c60:	0ac3      	lsrs	r3, r0, #11
    3c62:	428b      	cmp	r3, r1
    3c64:	d301      	bcc.n	3c6a <__udivsi3+0x76>
    3c66:	02cb      	lsls	r3, r1, #11
    3c68:	1ac0      	subs	r0, r0, r3
    3c6a:	4152      	adcs	r2, r2
    3c6c:	0a83      	lsrs	r3, r0, #10
    3c6e:	428b      	cmp	r3, r1
    3c70:	d301      	bcc.n	3c76 <__udivsi3+0x82>
    3c72:	028b      	lsls	r3, r1, #10
    3c74:	1ac0      	subs	r0, r0, r3
    3c76:	4152      	adcs	r2, r2
    3c78:	0a43      	lsrs	r3, r0, #9
    3c7a:	428b      	cmp	r3, r1
    3c7c:	d301      	bcc.n	3c82 <__udivsi3+0x8e>
    3c7e:	024b      	lsls	r3, r1, #9
    3c80:	1ac0      	subs	r0, r0, r3
    3c82:	4152      	adcs	r2, r2
    3c84:	0a03      	lsrs	r3, r0, #8
    3c86:	428b      	cmp	r3, r1
    3c88:	d301      	bcc.n	3c8e <__udivsi3+0x9a>
    3c8a:	020b      	lsls	r3, r1, #8
    3c8c:	1ac0      	subs	r0, r0, r3
    3c8e:	4152      	adcs	r2, r2
    3c90:	d2cd      	bcs.n	3c2e <__udivsi3+0x3a>
    3c92:	09c3      	lsrs	r3, r0, #7
    3c94:	428b      	cmp	r3, r1
    3c96:	d301      	bcc.n	3c9c <__udivsi3+0xa8>
    3c98:	01cb      	lsls	r3, r1, #7
    3c9a:	1ac0      	subs	r0, r0, r3
    3c9c:	4152      	adcs	r2, r2
    3c9e:	0983      	lsrs	r3, r0, #6
    3ca0:	428b      	cmp	r3, r1
    3ca2:	d301      	bcc.n	3ca8 <__udivsi3+0xb4>
    3ca4:	018b      	lsls	r3, r1, #6
    3ca6:	1ac0      	subs	r0, r0, r3
    3ca8:	4152      	adcs	r2, r2
    3caa:	0943      	lsrs	r3, r0, #5
    3cac:	428b      	cmp	r3, r1
    3cae:	d301      	bcc.n	3cb4 <__udivsi3+0xc0>
    3cb0:	014b      	lsls	r3, r1, #5
    3cb2:	1ac0      	subs	r0, r0, r3
    3cb4:	4152      	adcs	r2, r2
    3cb6:	0903      	lsrs	r3, r0, #4
    3cb8:	428b      	cmp	r3, r1
    3cba:	d301      	bcc.n	3cc0 <__udivsi3+0xcc>
    3cbc:	010b      	lsls	r3, r1, #4
    3cbe:	1ac0      	subs	r0, r0, r3
    3cc0:	4152      	adcs	r2, r2
    3cc2:	08c3      	lsrs	r3, r0, #3
    3cc4:	428b      	cmp	r3, r1
    3cc6:	d301      	bcc.n	3ccc <__udivsi3+0xd8>
    3cc8:	00cb      	lsls	r3, r1, #3
    3cca:	1ac0      	subs	r0, r0, r3
    3ccc:	4152      	adcs	r2, r2
    3cce:	0883      	lsrs	r3, r0, #2
    3cd0:	428b      	cmp	r3, r1
    3cd2:	d301      	bcc.n	3cd8 <__udivsi3+0xe4>
    3cd4:	008b      	lsls	r3, r1, #2
    3cd6:	1ac0      	subs	r0, r0, r3
    3cd8:	4152      	adcs	r2, r2
    3cda:	0843      	lsrs	r3, r0, #1
    3cdc:	428b      	cmp	r3, r1
    3cde:	d301      	bcc.n	3ce4 <__udivsi3+0xf0>
    3ce0:	004b      	lsls	r3, r1, #1
    3ce2:	1ac0      	subs	r0, r0, r3
    3ce4:	4152      	adcs	r2, r2
    3ce6:	1a41      	subs	r1, r0, r1
    3ce8:	d200      	bcs.n	3cec <__udivsi3+0xf8>
    3cea:	4601      	mov	r1, r0
    3cec:	4152      	adcs	r2, r2
    3cee:	4610      	mov	r0, r2
    3cf0:	4770      	bx	lr
    3cf2:	e7ff      	b.n	3cf4 <__udivsi3+0x100>
    3cf4:	b501      	push	{r0, lr}
    3cf6:	2000      	movs	r0, #0
    3cf8:	f000 f806 	bl	3d08 <__aeabi_idiv0>
    3cfc:	bd02      	pop	{r1, pc}
    3cfe:	46c0      	nop			; (mov r8, r8)

00003d00 <__aeabi_uidivmod>:
    3d00:	2900      	cmp	r1, #0
    3d02:	d0f7      	beq.n	3cf4 <__udivsi3+0x100>
    3d04:	e776      	b.n	3bf4 <__udivsi3>
    3d06:	4770      	bx	lr

00003d08 <__aeabi_idiv0>:
    3d08:	4770      	bx	lr
    3d0a:	46c0      	nop			; (mov r8, r8)

00003d0c <__aeabi_cdrcmple>:
    3d0c:	4684      	mov	ip, r0
    3d0e:	1c10      	adds	r0, r2, #0
    3d10:	4662      	mov	r2, ip
    3d12:	468c      	mov	ip, r1
    3d14:	1c19      	adds	r1, r3, #0
    3d16:	4663      	mov	r3, ip
    3d18:	e000      	b.n	3d1c <__aeabi_cdcmpeq>
    3d1a:	46c0      	nop			; (mov r8, r8)

00003d1c <__aeabi_cdcmpeq>:
    3d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3d1e:	f001 f815 	bl	4d4c <__ledf2>
    3d22:	2800      	cmp	r0, #0
    3d24:	d401      	bmi.n	3d2a <__aeabi_cdcmpeq+0xe>
    3d26:	2100      	movs	r1, #0
    3d28:	42c8      	cmn	r0, r1
    3d2a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003d2c <__aeabi_dcmpeq>:
    3d2c:	b510      	push	{r4, lr}
    3d2e:	f000 ff6f 	bl	4c10 <__eqdf2>
    3d32:	4240      	negs	r0, r0
    3d34:	3001      	adds	r0, #1
    3d36:	bd10      	pop	{r4, pc}

00003d38 <__aeabi_dcmplt>:
    3d38:	b510      	push	{r4, lr}
    3d3a:	f001 f807 	bl	4d4c <__ledf2>
    3d3e:	2800      	cmp	r0, #0
    3d40:	db01      	blt.n	3d46 <__aeabi_dcmplt+0xe>
    3d42:	2000      	movs	r0, #0
    3d44:	bd10      	pop	{r4, pc}
    3d46:	2001      	movs	r0, #1
    3d48:	bd10      	pop	{r4, pc}
    3d4a:	46c0      	nop			; (mov r8, r8)

00003d4c <__aeabi_dcmple>:
    3d4c:	b510      	push	{r4, lr}
    3d4e:	f000 fffd 	bl	4d4c <__ledf2>
    3d52:	2800      	cmp	r0, #0
    3d54:	dd01      	ble.n	3d5a <__aeabi_dcmple+0xe>
    3d56:	2000      	movs	r0, #0
    3d58:	bd10      	pop	{r4, pc}
    3d5a:	2001      	movs	r0, #1
    3d5c:	bd10      	pop	{r4, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)

00003d60 <__aeabi_dcmpgt>:
    3d60:	b510      	push	{r4, lr}
    3d62:	f000 ff8f 	bl	4c84 <__gedf2>
    3d66:	2800      	cmp	r0, #0
    3d68:	dc01      	bgt.n	3d6e <__aeabi_dcmpgt+0xe>
    3d6a:	2000      	movs	r0, #0
    3d6c:	bd10      	pop	{r4, pc}
    3d6e:	2001      	movs	r0, #1
    3d70:	bd10      	pop	{r4, pc}
    3d72:	46c0      	nop			; (mov r8, r8)

00003d74 <__aeabi_dcmpge>:
    3d74:	b510      	push	{r4, lr}
    3d76:	f000 ff85 	bl	4c84 <__gedf2>
    3d7a:	2800      	cmp	r0, #0
    3d7c:	da01      	bge.n	3d82 <__aeabi_dcmpge+0xe>
    3d7e:	2000      	movs	r0, #0
    3d80:	bd10      	pop	{r4, pc}
    3d82:	2001      	movs	r0, #1
    3d84:	bd10      	pop	{r4, pc}
    3d86:	46c0      	nop			; (mov r8, r8)

00003d88 <__aeabi_cfrcmple>:
    3d88:	4684      	mov	ip, r0
    3d8a:	1c08      	adds	r0, r1, #0
    3d8c:	4661      	mov	r1, ip
    3d8e:	e7ff      	b.n	3d90 <__aeabi_cfcmpeq>

00003d90 <__aeabi_cfcmpeq>:
    3d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3d92:	f000 f8b7 	bl	3f04 <__lesf2>
    3d96:	2800      	cmp	r0, #0
    3d98:	d401      	bmi.n	3d9e <__aeabi_cfcmpeq+0xe>
    3d9a:	2100      	movs	r1, #0
    3d9c:	42c8      	cmn	r0, r1
    3d9e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003da0 <__aeabi_fcmpeq>:
    3da0:	b510      	push	{r4, lr}
    3da2:	f000 f849 	bl	3e38 <__eqsf2>
    3da6:	4240      	negs	r0, r0
    3da8:	3001      	adds	r0, #1
    3daa:	bd10      	pop	{r4, pc}

00003dac <__aeabi_fcmplt>:
    3dac:	b510      	push	{r4, lr}
    3dae:	f000 f8a9 	bl	3f04 <__lesf2>
    3db2:	2800      	cmp	r0, #0
    3db4:	db01      	blt.n	3dba <__aeabi_fcmplt+0xe>
    3db6:	2000      	movs	r0, #0
    3db8:	bd10      	pop	{r4, pc}
    3dba:	2001      	movs	r0, #1
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	46c0      	nop			; (mov r8, r8)

00003dc0 <__aeabi_fcmple>:
    3dc0:	b510      	push	{r4, lr}
    3dc2:	f000 f89f 	bl	3f04 <__lesf2>
    3dc6:	2800      	cmp	r0, #0
    3dc8:	dd01      	ble.n	3dce <__aeabi_fcmple+0xe>
    3dca:	2000      	movs	r0, #0
    3dcc:	bd10      	pop	{r4, pc}
    3dce:	2001      	movs	r0, #1
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	46c0      	nop			; (mov r8, r8)

00003dd4 <__aeabi_fcmpgt>:
    3dd4:	b510      	push	{r4, lr}
    3dd6:	f000 f855 	bl	3e84 <__gesf2>
    3dda:	2800      	cmp	r0, #0
    3ddc:	dc01      	bgt.n	3de2 <__aeabi_fcmpgt+0xe>
    3dde:	2000      	movs	r0, #0
    3de0:	bd10      	pop	{r4, pc}
    3de2:	2001      	movs	r0, #1
    3de4:	bd10      	pop	{r4, pc}
    3de6:	46c0      	nop			; (mov r8, r8)

00003de8 <__aeabi_fcmpge>:
    3de8:	b510      	push	{r4, lr}
    3dea:	f000 f84b 	bl	3e84 <__gesf2>
    3dee:	2800      	cmp	r0, #0
    3df0:	da01      	bge.n	3df6 <__aeabi_fcmpge+0xe>
    3df2:	2000      	movs	r0, #0
    3df4:	bd10      	pop	{r4, pc}
    3df6:	2001      	movs	r0, #1
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)

00003dfc <__aeabi_d2uiz>:
    3dfc:	b570      	push	{r4, r5, r6, lr}
    3dfe:	2200      	movs	r2, #0
    3e00:	4b0c      	ldr	r3, [pc, #48]	; (3e34 <__aeabi_d2uiz+0x38>)
    3e02:	0004      	movs	r4, r0
    3e04:	000d      	movs	r5, r1
    3e06:	f7ff ffb5 	bl	3d74 <__aeabi_dcmpge>
    3e0a:	2800      	cmp	r0, #0
    3e0c:	d104      	bne.n	3e18 <__aeabi_d2uiz+0x1c>
    3e0e:	0020      	movs	r0, r4
    3e10:	0029      	movs	r1, r5
    3e12:	f001 fdb3 	bl	597c <__aeabi_d2iz>
    3e16:	bd70      	pop	{r4, r5, r6, pc}
    3e18:	4b06      	ldr	r3, [pc, #24]	; (3e34 <__aeabi_d2uiz+0x38>)
    3e1a:	2200      	movs	r2, #0
    3e1c:	0020      	movs	r0, r4
    3e1e:	0029      	movs	r1, r5
    3e20:	f001 fa76 	bl	5310 <__aeabi_dsub>
    3e24:	f001 fdaa 	bl	597c <__aeabi_d2iz>
    3e28:	2380      	movs	r3, #128	; 0x80
    3e2a:	061b      	lsls	r3, r3, #24
    3e2c:	469c      	mov	ip, r3
    3e2e:	4460      	add	r0, ip
    3e30:	e7f1      	b.n	3e16 <__aeabi_d2uiz+0x1a>
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	41e00000 	.word	0x41e00000

00003e38 <__eqsf2>:
    3e38:	b570      	push	{r4, r5, r6, lr}
    3e3a:	0042      	lsls	r2, r0, #1
    3e3c:	0245      	lsls	r5, r0, #9
    3e3e:	024e      	lsls	r6, r1, #9
    3e40:	004c      	lsls	r4, r1, #1
    3e42:	0fc3      	lsrs	r3, r0, #31
    3e44:	0a6d      	lsrs	r5, r5, #9
    3e46:	0e12      	lsrs	r2, r2, #24
    3e48:	0a76      	lsrs	r6, r6, #9
    3e4a:	0e24      	lsrs	r4, r4, #24
    3e4c:	0fc9      	lsrs	r1, r1, #31
    3e4e:	2001      	movs	r0, #1
    3e50:	2aff      	cmp	r2, #255	; 0xff
    3e52:	d006      	beq.n	3e62 <__eqsf2+0x2a>
    3e54:	2cff      	cmp	r4, #255	; 0xff
    3e56:	d003      	beq.n	3e60 <__eqsf2+0x28>
    3e58:	42a2      	cmp	r2, r4
    3e5a:	d101      	bne.n	3e60 <__eqsf2+0x28>
    3e5c:	42b5      	cmp	r5, r6
    3e5e:	d006      	beq.n	3e6e <__eqsf2+0x36>
    3e60:	bd70      	pop	{r4, r5, r6, pc}
    3e62:	2d00      	cmp	r5, #0
    3e64:	d1fc      	bne.n	3e60 <__eqsf2+0x28>
    3e66:	2cff      	cmp	r4, #255	; 0xff
    3e68:	d1fa      	bne.n	3e60 <__eqsf2+0x28>
    3e6a:	2e00      	cmp	r6, #0
    3e6c:	d1f8      	bne.n	3e60 <__eqsf2+0x28>
    3e6e:	428b      	cmp	r3, r1
    3e70:	d006      	beq.n	3e80 <__eqsf2+0x48>
    3e72:	2001      	movs	r0, #1
    3e74:	2a00      	cmp	r2, #0
    3e76:	d1f3      	bne.n	3e60 <__eqsf2+0x28>
    3e78:	0028      	movs	r0, r5
    3e7a:	1e45      	subs	r5, r0, #1
    3e7c:	41a8      	sbcs	r0, r5
    3e7e:	e7ef      	b.n	3e60 <__eqsf2+0x28>
    3e80:	2000      	movs	r0, #0
    3e82:	e7ed      	b.n	3e60 <__eqsf2+0x28>

00003e84 <__gesf2>:
    3e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e86:	0042      	lsls	r2, r0, #1
    3e88:	0245      	lsls	r5, r0, #9
    3e8a:	024c      	lsls	r4, r1, #9
    3e8c:	0fc3      	lsrs	r3, r0, #31
    3e8e:	0048      	lsls	r0, r1, #1
    3e90:	0a6d      	lsrs	r5, r5, #9
    3e92:	0e12      	lsrs	r2, r2, #24
    3e94:	0a64      	lsrs	r4, r4, #9
    3e96:	0e00      	lsrs	r0, r0, #24
    3e98:	0fc9      	lsrs	r1, r1, #31
    3e9a:	2aff      	cmp	r2, #255	; 0xff
    3e9c:	d01e      	beq.n	3edc <__gesf2+0x58>
    3e9e:	28ff      	cmp	r0, #255	; 0xff
    3ea0:	d021      	beq.n	3ee6 <__gesf2+0x62>
    3ea2:	2a00      	cmp	r2, #0
    3ea4:	d10a      	bne.n	3ebc <__gesf2+0x38>
    3ea6:	426e      	negs	r6, r5
    3ea8:	416e      	adcs	r6, r5
    3eaa:	b2f6      	uxtb	r6, r6
    3eac:	2800      	cmp	r0, #0
    3eae:	d10f      	bne.n	3ed0 <__gesf2+0x4c>
    3eb0:	2c00      	cmp	r4, #0
    3eb2:	d10d      	bne.n	3ed0 <__gesf2+0x4c>
    3eb4:	2000      	movs	r0, #0
    3eb6:	2d00      	cmp	r5, #0
    3eb8:	d009      	beq.n	3ece <__gesf2+0x4a>
    3eba:	e005      	b.n	3ec8 <__gesf2+0x44>
    3ebc:	2800      	cmp	r0, #0
    3ebe:	d101      	bne.n	3ec4 <__gesf2+0x40>
    3ec0:	2c00      	cmp	r4, #0
    3ec2:	d001      	beq.n	3ec8 <__gesf2+0x44>
    3ec4:	428b      	cmp	r3, r1
    3ec6:	d011      	beq.n	3eec <__gesf2+0x68>
    3ec8:	2101      	movs	r1, #1
    3eca:	4258      	negs	r0, r3
    3ecc:	4308      	orrs	r0, r1
    3ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ed0:	2e00      	cmp	r6, #0
    3ed2:	d0f7      	beq.n	3ec4 <__gesf2+0x40>
    3ed4:	2001      	movs	r0, #1
    3ed6:	3901      	subs	r1, #1
    3ed8:	4308      	orrs	r0, r1
    3eda:	e7f8      	b.n	3ece <__gesf2+0x4a>
    3edc:	2d00      	cmp	r5, #0
    3ede:	d0de      	beq.n	3e9e <__gesf2+0x1a>
    3ee0:	2002      	movs	r0, #2
    3ee2:	4240      	negs	r0, r0
    3ee4:	e7f3      	b.n	3ece <__gesf2+0x4a>
    3ee6:	2c00      	cmp	r4, #0
    3ee8:	d0db      	beq.n	3ea2 <__gesf2+0x1e>
    3eea:	e7f9      	b.n	3ee0 <__gesf2+0x5c>
    3eec:	4282      	cmp	r2, r0
    3eee:	dceb      	bgt.n	3ec8 <__gesf2+0x44>
    3ef0:	db04      	blt.n	3efc <__gesf2+0x78>
    3ef2:	42a5      	cmp	r5, r4
    3ef4:	d8e8      	bhi.n	3ec8 <__gesf2+0x44>
    3ef6:	2000      	movs	r0, #0
    3ef8:	42a5      	cmp	r5, r4
    3efa:	d2e8      	bcs.n	3ece <__gesf2+0x4a>
    3efc:	2101      	movs	r1, #1
    3efe:	1e58      	subs	r0, r3, #1
    3f00:	4308      	orrs	r0, r1
    3f02:	e7e4      	b.n	3ece <__gesf2+0x4a>

00003f04 <__lesf2>:
    3f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f06:	0042      	lsls	r2, r0, #1
    3f08:	024d      	lsls	r5, r1, #9
    3f0a:	004c      	lsls	r4, r1, #1
    3f0c:	0246      	lsls	r6, r0, #9
    3f0e:	0a76      	lsrs	r6, r6, #9
    3f10:	0e12      	lsrs	r2, r2, #24
    3f12:	0fc3      	lsrs	r3, r0, #31
    3f14:	0a6d      	lsrs	r5, r5, #9
    3f16:	0e24      	lsrs	r4, r4, #24
    3f18:	0fc9      	lsrs	r1, r1, #31
    3f1a:	2aff      	cmp	r2, #255	; 0xff
    3f1c:	d016      	beq.n	3f4c <__lesf2+0x48>
    3f1e:	2cff      	cmp	r4, #255	; 0xff
    3f20:	d018      	beq.n	3f54 <__lesf2+0x50>
    3f22:	2a00      	cmp	r2, #0
    3f24:	d10a      	bne.n	3f3c <__lesf2+0x38>
    3f26:	4270      	negs	r0, r6
    3f28:	4170      	adcs	r0, r6
    3f2a:	b2c0      	uxtb	r0, r0
    3f2c:	2c00      	cmp	r4, #0
    3f2e:	d015      	beq.n	3f5c <__lesf2+0x58>
    3f30:	2800      	cmp	r0, #0
    3f32:	d005      	beq.n	3f40 <__lesf2+0x3c>
    3f34:	2001      	movs	r0, #1
    3f36:	3901      	subs	r1, #1
    3f38:	4308      	orrs	r0, r1
    3f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f3c:	2c00      	cmp	r4, #0
    3f3e:	d013      	beq.n	3f68 <__lesf2+0x64>
    3f40:	4299      	cmp	r1, r3
    3f42:	d014      	beq.n	3f6e <__lesf2+0x6a>
    3f44:	2001      	movs	r0, #1
    3f46:	425b      	negs	r3, r3
    3f48:	4318      	orrs	r0, r3
    3f4a:	e7f6      	b.n	3f3a <__lesf2+0x36>
    3f4c:	2002      	movs	r0, #2
    3f4e:	2e00      	cmp	r6, #0
    3f50:	d1f3      	bne.n	3f3a <__lesf2+0x36>
    3f52:	e7e4      	b.n	3f1e <__lesf2+0x1a>
    3f54:	2002      	movs	r0, #2
    3f56:	2d00      	cmp	r5, #0
    3f58:	d1ef      	bne.n	3f3a <__lesf2+0x36>
    3f5a:	e7e2      	b.n	3f22 <__lesf2+0x1e>
    3f5c:	2d00      	cmp	r5, #0
    3f5e:	d1e7      	bne.n	3f30 <__lesf2+0x2c>
    3f60:	2000      	movs	r0, #0
    3f62:	2e00      	cmp	r6, #0
    3f64:	d0e9      	beq.n	3f3a <__lesf2+0x36>
    3f66:	e7ed      	b.n	3f44 <__lesf2+0x40>
    3f68:	2d00      	cmp	r5, #0
    3f6a:	d1e9      	bne.n	3f40 <__lesf2+0x3c>
    3f6c:	e7ea      	b.n	3f44 <__lesf2+0x40>
    3f6e:	42a2      	cmp	r2, r4
    3f70:	dc06      	bgt.n	3f80 <__lesf2+0x7c>
    3f72:	dbdf      	blt.n	3f34 <__lesf2+0x30>
    3f74:	42ae      	cmp	r6, r5
    3f76:	d803      	bhi.n	3f80 <__lesf2+0x7c>
    3f78:	2000      	movs	r0, #0
    3f7a:	42ae      	cmp	r6, r5
    3f7c:	d3da      	bcc.n	3f34 <__lesf2+0x30>
    3f7e:	e7dc      	b.n	3f3a <__lesf2+0x36>
    3f80:	2001      	movs	r0, #1
    3f82:	4249      	negs	r1, r1
    3f84:	4308      	orrs	r0, r1
    3f86:	e7d8      	b.n	3f3a <__lesf2+0x36>

00003f88 <__aeabi_dadd>:
    3f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f8a:	4645      	mov	r5, r8
    3f8c:	46de      	mov	lr, fp
    3f8e:	4657      	mov	r7, sl
    3f90:	464e      	mov	r6, r9
    3f92:	030c      	lsls	r4, r1, #12
    3f94:	b5e0      	push	{r5, r6, r7, lr}
    3f96:	004e      	lsls	r6, r1, #1
    3f98:	0fc9      	lsrs	r1, r1, #31
    3f9a:	4688      	mov	r8, r1
    3f9c:	000d      	movs	r5, r1
    3f9e:	0a61      	lsrs	r1, r4, #9
    3fa0:	0f44      	lsrs	r4, r0, #29
    3fa2:	430c      	orrs	r4, r1
    3fa4:	00c7      	lsls	r7, r0, #3
    3fa6:	0319      	lsls	r1, r3, #12
    3fa8:	0058      	lsls	r0, r3, #1
    3faa:	0fdb      	lsrs	r3, r3, #31
    3fac:	469b      	mov	fp, r3
    3fae:	0a4b      	lsrs	r3, r1, #9
    3fb0:	0f51      	lsrs	r1, r2, #29
    3fb2:	430b      	orrs	r3, r1
    3fb4:	0d76      	lsrs	r6, r6, #21
    3fb6:	0d40      	lsrs	r0, r0, #21
    3fb8:	0019      	movs	r1, r3
    3fba:	00d2      	lsls	r2, r2, #3
    3fbc:	45d8      	cmp	r8, fp
    3fbe:	d100      	bne.n	3fc2 <__aeabi_dadd+0x3a>
    3fc0:	e0ae      	b.n	4120 <__aeabi_dadd+0x198>
    3fc2:	1a35      	subs	r5, r6, r0
    3fc4:	2d00      	cmp	r5, #0
    3fc6:	dc00      	bgt.n	3fca <__aeabi_dadd+0x42>
    3fc8:	e0f6      	b.n	41b8 <__aeabi_dadd+0x230>
    3fca:	2800      	cmp	r0, #0
    3fcc:	d10f      	bne.n	3fee <__aeabi_dadd+0x66>
    3fce:	4313      	orrs	r3, r2
    3fd0:	d100      	bne.n	3fd4 <__aeabi_dadd+0x4c>
    3fd2:	e0db      	b.n	418c <__aeabi_dadd+0x204>
    3fd4:	1e6b      	subs	r3, r5, #1
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d000      	beq.n	3fdc <__aeabi_dadd+0x54>
    3fda:	e137      	b.n	424c <__aeabi_dadd+0x2c4>
    3fdc:	1aba      	subs	r2, r7, r2
    3fde:	4297      	cmp	r7, r2
    3fe0:	41bf      	sbcs	r7, r7
    3fe2:	1a64      	subs	r4, r4, r1
    3fe4:	427f      	negs	r7, r7
    3fe6:	1be4      	subs	r4, r4, r7
    3fe8:	2601      	movs	r6, #1
    3fea:	0017      	movs	r7, r2
    3fec:	e024      	b.n	4038 <__aeabi_dadd+0xb0>
    3fee:	4bc6      	ldr	r3, [pc, #792]	; (4308 <__aeabi_dadd+0x380>)
    3ff0:	429e      	cmp	r6, r3
    3ff2:	d04d      	beq.n	4090 <__aeabi_dadd+0x108>
    3ff4:	2380      	movs	r3, #128	; 0x80
    3ff6:	041b      	lsls	r3, r3, #16
    3ff8:	4319      	orrs	r1, r3
    3ffa:	2d38      	cmp	r5, #56	; 0x38
    3ffc:	dd00      	ble.n	4000 <__aeabi_dadd+0x78>
    3ffe:	e107      	b.n	4210 <__aeabi_dadd+0x288>
    4000:	2d1f      	cmp	r5, #31
    4002:	dd00      	ble.n	4006 <__aeabi_dadd+0x7e>
    4004:	e138      	b.n	4278 <__aeabi_dadd+0x2f0>
    4006:	2020      	movs	r0, #32
    4008:	1b43      	subs	r3, r0, r5
    400a:	469a      	mov	sl, r3
    400c:	000b      	movs	r3, r1
    400e:	4650      	mov	r0, sl
    4010:	4083      	lsls	r3, r0
    4012:	4699      	mov	r9, r3
    4014:	0013      	movs	r3, r2
    4016:	4648      	mov	r0, r9
    4018:	40eb      	lsrs	r3, r5
    401a:	4318      	orrs	r0, r3
    401c:	0003      	movs	r3, r0
    401e:	4650      	mov	r0, sl
    4020:	4082      	lsls	r2, r0
    4022:	1e50      	subs	r0, r2, #1
    4024:	4182      	sbcs	r2, r0
    4026:	40e9      	lsrs	r1, r5
    4028:	431a      	orrs	r2, r3
    402a:	1aba      	subs	r2, r7, r2
    402c:	1a61      	subs	r1, r4, r1
    402e:	4297      	cmp	r7, r2
    4030:	41a4      	sbcs	r4, r4
    4032:	0017      	movs	r7, r2
    4034:	4264      	negs	r4, r4
    4036:	1b0c      	subs	r4, r1, r4
    4038:	0223      	lsls	r3, r4, #8
    403a:	d562      	bpl.n	4102 <__aeabi_dadd+0x17a>
    403c:	0264      	lsls	r4, r4, #9
    403e:	0a65      	lsrs	r5, r4, #9
    4040:	2d00      	cmp	r5, #0
    4042:	d100      	bne.n	4046 <__aeabi_dadd+0xbe>
    4044:	e0df      	b.n	4206 <__aeabi_dadd+0x27e>
    4046:	0028      	movs	r0, r5
    4048:	f001 fd56 	bl	5af8 <__clzsi2>
    404c:	0003      	movs	r3, r0
    404e:	3b08      	subs	r3, #8
    4050:	2b1f      	cmp	r3, #31
    4052:	dd00      	ble.n	4056 <__aeabi_dadd+0xce>
    4054:	e0d2      	b.n	41fc <__aeabi_dadd+0x274>
    4056:	2220      	movs	r2, #32
    4058:	003c      	movs	r4, r7
    405a:	1ad2      	subs	r2, r2, r3
    405c:	409d      	lsls	r5, r3
    405e:	40d4      	lsrs	r4, r2
    4060:	409f      	lsls	r7, r3
    4062:	4325      	orrs	r5, r4
    4064:	429e      	cmp	r6, r3
    4066:	dd00      	ble.n	406a <__aeabi_dadd+0xe2>
    4068:	e0c4      	b.n	41f4 <__aeabi_dadd+0x26c>
    406a:	1b9e      	subs	r6, r3, r6
    406c:	1c73      	adds	r3, r6, #1
    406e:	2b1f      	cmp	r3, #31
    4070:	dd00      	ble.n	4074 <__aeabi_dadd+0xec>
    4072:	e0f1      	b.n	4258 <__aeabi_dadd+0x2d0>
    4074:	2220      	movs	r2, #32
    4076:	0038      	movs	r0, r7
    4078:	0029      	movs	r1, r5
    407a:	1ad2      	subs	r2, r2, r3
    407c:	40d8      	lsrs	r0, r3
    407e:	4091      	lsls	r1, r2
    4080:	4097      	lsls	r7, r2
    4082:	002c      	movs	r4, r5
    4084:	4301      	orrs	r1, r0
    4086:	1e78      	subs	r0, r7, #1
    4088:	4187      	sbcs	r7, r0
    408a:	40dc      	lsrs	r4, r3
    408c:	2600      	movs	r6, #0
    408e:	430f      	orrs	r7, r1
    4090:	077b      	lsls	r3, r7, #29
    4092:	d009      	beq.n	40a8 <__aeabi_dadd+0x120>
    4094:	230f      	movs	r3, #15
    4096:	403b      	ands	r3, r7
    4098:	2b04      	cmp	r3, #4
    409a:	d005      	beq.n	40a8 <__aeabi_dadd+0x120>
    409c:	1d3b      	adds	r3, r7, #4
    409e:	42bb      	cmp	r3, r7
    40a0:	41bf      	sbcs	r7, r7
    40a2:	427f      	negs	r7, r7
    40a4:	19e4      	adds	r4, r4, r7
    40a6:	001f      	movs	r7, r3
    40a8:	0223      	lsls	r3, r4, #8
    40aa:	d52c      	bpl.n	4106 <__aeabi_dadd+0x17e>
    40ac:	4b96      	ldr	r3, [pc, #600]	; (4308 <__aeabi_dadd+0x380>)
    40ae:	3601      	adds	r6, #1
    40b0:	429e      	cmp	r6, r3
    40b2:	d100      	bne.n	40b6 <__aeabi_dadd+0x12e>
    40b4:	e09a      	b.n	41ec <__aeabi_dadd+0x264>
    40b6:	4645      	mov	r5, r8
    40b8:	4b94      	ldr	r3, [pc, #592]	; (430c <__aeabi_dadd+0x384>)
    40ba:	08ff      	lsrs	r7, r7, #3
    40bc:	401c      	ands	r4, r3
    40be:	0760      	lsls	r0, r4, #29
    40c0:	0576      	lsls	r6, r6, #21
    40c2:	0264      	lsls	r4, r4, #9
    40c4:	4307      	orrs	r7, r0
    40c6:	0b24      	lsrs	r4, r4, #12
    40c8:	0d76      	lsrs	r6, r6, #21
    40ca:	2100      	movs	r1, #0
    40cc:	0324      	lsls	r4, r4, #12
    40ce:	0b23      	lsrs	r3, r4, #12
    40d0:	0d0c      	lsrs	r4, r1, #20
    40d2:	4a8f      	ldr	r2, [pc, #572]	; (4310 <__aeabi_dadd+0x388>)
    40d4:	0524      	lsls	r4, r4, #20
    40d6:	431c      	orrs	r4, r3
    40d8:	4014      	ands	r4, r2
    40da:	0533      	lsls	r3, r6, #20
    40dc:	4323      	orrs	r3, r4
    40de:	005b      	lsls	r3, r3, #1
    40e0:	07ed      	lsls	r5, r5, #31
    40e2:	085b      	lsrs	r3, r3, #1
    40e4:	432b      	orrs	r3, r5
    40e6:	0038      	movs	r0, r7
    40e8:	0019      	movs	r1, r3
    40ea:	bc3c      	pop	{r2, r3, r4, r5}
    40ec:	4690      	mov	r8, r2
    40ee:	4699      	mov	r9, r3
    40f0:	46a2      	mov	sl, r4
    40f2:	46ab      	mov	fp, r5
    40f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40f6:	4664      	mov	r4, ip
    40f8:	4304      	orrs	r4, r0
    40fa:	d100      	bne.n	40fe <__aeabi_dadd+0x176>
    40fc:	e211      	b.n	4522 <__aeabi_dadd+0x59a>
    40fe:	0004      	movs	r4, r0
    4100:	4667      	mov	r7, ip
    4102:	077b      	lsls	r3, r7, #29
    4104:	d1c6      	bne.n	4094 <__aeabi_dadd+0x10c>
    4106:	4645      	mov	r5, r8
    4108:	0760      	lsls	r0, r4, #29
    410a:	08ff      	lsrs	r7, r7, #3
    410c:	4307      	orrs	r7, r0
    410e:	08e4      	lsrs	r4, r4, #3
    4110:	4b7d      	ldr	r3, [pc, #500]	; (4308 <__aeabi_dadd+0x380>)
    4112:	429e      	cmp	r6, r3
    4114:	d030      	beq.n	4178 <__aeabi_dadd+0x1f0>
    4116:	0324      	lsls	r4, r4, #12
    4118:	0576      	lsls	r6, r6, #21
    411a:	0b24      	lsrs	r4, r4, #12
    411c:	0d76      	lsrs	r6, r6, #21
    411e:	e7d4      	b.n	40ca <__aeabi_dadd+0x142>
    4120:	1a33      	subs	r3, r6, r0
    4122:	469a      	mov	sl, r3
    4124:	2b00      	cmp	r3, #0
    4126:	dd78      	ble.n	421a <__aeabi_dadd+0x292>
    4128:	2800      	cmp	r0, #0
    412a:	d031      	beq.n	4190 <__aeabi_dadd+0x208>
    412c:	4876      	ldr	r0, [pc, #472]	; (4308 <__aeabi_dadd+0x380>)
    412e:	4286      	cmp	r6, r0
    4130:	d0ae      	beq.n	4090 <__aeabi_dadd+0x108>
    4132:	2080      	movs	r0, #128	; 0x80
    4134:	0400      	lsls	r0, r0, #16
    4136:	4301      	orrs	r1, r0
    4138:	4653      	mov	r3, sl
    413a:	2b38      	cmp	r3, #56	; 0x38
    413c:	dc00      	bgt.n	4140 <__aeabi_dadd+0x1b8>
    413e:	e0e9      	b.n	4314 <__aeabi_dadd+0x38c>
    4140:	430a      	orrs	r2, r1
    4142:	1e51      	subs	r1, r2, #1
    4144:	418a      	sbcs	r2, r1
    4146:	2100      	movs	r1, #0
    4148:	19d2      	adds	r2, r2, r7
    414a:	42ba      	cmp	r2, r7
    414c:	41bf      	sbcs	r7, r7
    414e:	1909      	adds	r1, r1, r4
    4150:	427c      	negs	r4, r7
    4152:	0017      	movs	r7, r2
    4154:	190c      	adds	r4, r1, r4
    4156:	0223      	lsls	r3, r4, #8
    4158:	d5d3      	bpl.n	4102 <__aeabi_dadd+0x17a>
    415a:	4b6b      	ldr	r3, [pc, #428]	; (4308 <__aeabi_dadd+0x380>)
    415c:	3601      	adds	r6, #1
    415e:	429e      	cmp	r6, r3
    4160:	d100      	bne.n	4164 <__aeabi_dadd+0x1dc>
    4162:	e13a      	b.n	43da <__aeabi_dadd+0x452>
    4164:	2001      	movs	r0, #1
    4166:	4b69      	ldr	r3, [pc, #420]	; (430c <__aeabi_dadd+0x384>)
    4168:	401c      	ands	r4, r3
    416a:	087b      	lsrs	r3, r7, #1
    416c:	4007      	ands	r7, r0
    416e:	431f      	orrs	r7, r3
    4170:	07e0      	lsls	r0, r4, #31
    4172:	4307      	orrs	r7, r0
    4174:	0864      	lsrs	r4, r4, #1
    4176:	e78b      	b.n	4090 <__aeabi_dadd+0x108>
    4178:	0023      	movs	r3, r4
    417a:	433b      	orrs	r3, r7
    417c:	d100      	bne.n	4180 <__aeabi_dadd+0x1f8>
    417e:	e1cb      	b.n	4518 <__aeabi_dadd+0x590>
    4180:	2280      	movs	r2, #128	; 0x80
    4182:	0312      	lsls	r2, r2, #12
    4184:	4314      	orrs	r4, r2
    4186:	0324      	lsls	r4, r4, #12
    4188:	0b24      	lsrs	r4, r4, #12
    418a:	e79e      	b.n	40ca <__aeabi_dadd+0x142>
    418c:	002e      	movs	r6, r5
    418e:	e77f      	b.n	4090 <__aeabi_dadd+0x108>
    4190:	0008      	movs	r0, r1
    4192:	4310      	orrs	r0, r2
    4194:	d100      	bne.n	4198 <__aeabi_dadd+0x210>
    4196:	e0b4      	b.n	4302 <__aeabi_dadd+0x37a>
    4198:	1e58      	subs	r0, r3, #1
    419a:	2800      	cmp	r0, #0
    419c:	d000      	beq.n	41a0 <__aeabi_dadd+0x218>
    419e:	e0de      	b.n	435e <__aeabi_dadd+0x3d6>
    41a0:	18ba      	adds	r2, r7, r2
    41a2:	42ba      	cmp	r2, r7
    41a4:	419b      	sbcs	r3, r3
    41a6:	1864      	adds	r4, r4, r1
    41a8:	425b      	negs	r3, r3
    41aa:	18e4      	adds	r4, r4, r3
    41ac:	0017      	movs	r7, r2
    41ae:	2601      	movs	r6, #1
    41b0:	0223      	lsls	r3, r4, #8
    41b2:	d5a6      	bpl.n	4102 <__aeabi_dadd+0x17a>
    41b4:	2602      	movs	r6, #2
    41b6:	e7d5      	b.n	4164 <__aeabi_dadd+0x1dc>
    41b8:	2d00      	cmp	r5, #0
    41ba:	d16e      	bne.n	429a <__aeabi_dadd+0x312>
    41bc:	1c70      	adds	r0, r6, #1
    41be:	0540      	lsls	r0, r0, #21
    41c0:	0d40      	lsrs	r0, r0, #21
    41c2:	2801      	cmp	r0, #1
    41c4:	dc00      	bgt.n	41c8 <__aeabi_dadd+0x240>
    41c6:	e0f9      	b.n	43bc <__aeabi_dadd+0x434>
    41c8:	1ab8      	subs	r0, r7, r2
    41ca:	4684      	mov	ip, r0
    41cc:	4287      	cmp	r7, r0
    41ce:	4180      	sbcs	r0, r0
    41d0:	1ae5      	subs	r5, r4, r3
    41d2:	4240      	negs	r0, r0
    41d4:	1a2d      	subs	r5, r5, r0
    41d6:	0228      	lsls	r0, r5, #8
    41d8:	d400      	bmi.n	41dc <__aeabi_dadd+0x254>
    41da:	e089      	b.n	42f0 <__aeabi_dadd+0x368>
    41dc:	1bd7      	subs	r7, r2, r7
    41de:	42ba      	cmp	r2, r7
    41e0:	4192      	sbcs	r2, r2
    41e2:	1b1c      	subs	r4, r3, r4
    41e4:	4252      	negs	r2, r2
    41e6:	1aa5      	subs	r5, r4, r2
    41e8:	46d8      	mov	r8, fp
    41ea:	e729      	b.n	4040 <__aeabi_dadd+0xb8>
    41ec:	4645      	mov	r5, r8
    41ee:	2400      	movs	r4, #0
    41f0:	2700      	movs	r7, #0
    41f2:	e76a      	b.n	40ca <__aeabi_dadd+0x142>
    41f4:	4c45      	ldr	r4, [pc, #276]	; (430c <__aeabi_dadd+0x384>)
    41f6:	1af6      	subs	r6, r6, r3
    41f8:	402c      	ands	r4, r5
    41fa:	e749      	b.n	4090 <__aeabi_dadd+0x108>
    41fc:	003d      	movs	r5, r7
    41fe:	3828      	subs	r0, #40	; 0x28
    4200:	4085      	lsls	r5, r0
    4202:	2700      	movs	r7, #0
    4204:	e72e      	b.n	4064 <__aeabi_dadd+0xdc>
    4206:	0038      	movs	r0, r7
    4208:	f001 fc76 	bl	5af8 <__clzsi2>
    420c:	3020      	adds	r0, #32
    420e:	e71d      	b.n	404c <__aeabi_dadd+0xc4>
    4210:	430a      	orrs	r2, r1
    4212:	1e51      	subs	r1, r2, #1
    4214:	418a      	sbcs	r2, r1
    4216:	2100      	movs	r1, #0
    4218:	e707      	b.n	402a <__aeabi_dadd+0xa2>
    421a:	2b00      	cmp	r3, #0
    421c:	d000      	beq.n	4220 <__aeabi_dadd+0x298>
    421e:	e0f3      	b.n	4408 <__aeabi_dadd+0x480>
    4220:	1c70      	adds	r0, r6, #1
    4222:	0543      	lsls	r3, r0, #21
    4224:	0d5b      	lsrs	r3, r3, #21
    4226:	2b01      	cmp	r3, #1
    4228:	dc00      	bgt.n	422c <__aeabi_dadd+0x2a4>
    422a:	e0ad      	b.n	4388 <__aeabi_dadd+0x400>
    422c:	4b36      	ldr	r3, [pc, #216]	; (4308 <__aeabi_dadd+0x380>)
    422e:	4298      	cmp	r0, r3
    4230:	d100      	bne.n	4234 <__aeabi_dadd+0x2ac>
    4232:	e0d1      	b.n	43d8 <__aeabi_dadd+0x450>
    4234:	18ba      	adds	r2, r7, r2
    4236:	42ba      	cmp	r2, r7
    4238:	41bf      	sbcs	r7, r7
    423a:	1864      	adds	r4, r4, r1
    423c:	427f      	negs	r7, r7
    423e:	19e4      	adds	r4, r4, r7
    4240:	07e7      	lsls	r7, r4, #31
    4242:	0852      	lsrs	r2, r2, #1
    4244:	4317      	orrs	r7, r2
    4246:	0864      	lsrs	r4, r4, #1
    4248:	0006      	movs	r6, r0
    424a:	e721      	b.n	4090 <__aeabi_dadd+0x108>
    424c:	482e      	ldr	r0, [pc, #184]	; (4308 <__aeabi_dadd+0x380>)
    424e:	4285      	cmp	r5, r0
    4250:	d100      	bne.n	4254 <__aeabi_dadd+0x2cc>
    4252:	e093      	b.n	437c <__aeabi_dadd+0x3f4>
    4254:	001d      	movs	r5, r3
    4256:	e6d0      	b.n	3ffa <__aeabi_dadd+0x72>
    4258:	0029      	movs	r1, r5
    425a:	3e1f      	subs	r6, #31
    425c:	40f1      	lsrs	r1, r6
    425e:	2b20      	cmp	r3, #32
    4260:	d100      	bne.n	4264 <__aeabi_dadd+0x2dc>
    4262:	e08d      	b.n	4380 <__aeabi_dadd+0x3f8>
    4264:	2240      	movs	r2, #64	; 0x40
    4266:	1ad3      	subs	r3, r2, r3
    4268:	409d      	lsls	r5, r3
    426a:	432f      	orrs	r7, r5
    426c:	1e7d      	subs	r5, r7, #1
    426e:	41af      	sbcs	r7, r5
    4270:	2400      	movs	r4, #0
    4272:	430f      	orrs	r7, r1
    4274:	2600      	movs	r6, #0
    4276:	e744      	b.n	4102 <__aeabi_dadd+0x17a>
    4278:	002b      	movs	r3, r5
    427a:	0008      	movs	r0, r1
    427c:	3b20      	subs	r3, #32
    427e:	40d8      	lsrs	r0, r3
    4280:	0003      	movs	r3, r0
    4282:	2d20      	cmp	r5, #32
    4284:	d100      	bne.n	4288 <__aeabi_dadd+0x300>
    4286:	e07d      	b.n	4384 <__aeabi_dadd+0x3fc>
    4288:	2040      	movs	r0, #64	; 0x40
    428a:	1b45      	subs	r5, r0, r5
    428c:	40a9      	lsls	r1, r5
    428e:	430a      	orrs	r2, r1
    4290:	1e51      	subs	r1, r2, #1
    4292:	418a      	sbcs	r2, r1
    4294:	2100      	movs	r1, #0
    4296:	431a      	orrs	r2, r3
    4298:	e6c7      	b.n	402a <__aeabi_dadd+0xa2>
    429a:	2e00      	cmp	r6, #0
    429c:	d050      	beq.n	4340 <__aeabi_dadd+0x3b8>
    429e:	4e1a      	ldr	r6, [pc, #104]	; (4308 <__aeabi_dadd+0x380>)
    42a0:	42b0      	cmp	r0, r6
    42a2:	d057      	beq.n	4354 <__aeabi_dadd+0x3cc>
    42a4:	2680      	movs	r6, #128	; 0x80
    42a6:	426b      	negs	r3, r5
    42a8:	4699      	mov	r9, r3
    42aa:	0436      	lsls	r6, r6, #16
    42ac:	4334      	orrs	r4, r6
    42ae:	464b      	mov	r3, r9
    42b0:	2b38      	cmp	r3, #56	; 0x38
    42b2:	dd00      	ble.n	42b6 <__aeabi_dadd+0x32e>
    42b4:	e0d6      	b.n	4464 <__aeabi_dadd+0x4dc>
    42b6:	2b1f      	cmp	r3, #31
    42b8:	dd00      	ble.n	42bc <__aeabi_dadd+0x334>
    42ba:	e135      	b.n	4528 <__aeabi_dadd+0x5a0>
    42bc:	2620      	movs	r6, #32
    42be:	1af5      	subs	r5, r6, r3
    42c0:	0026      	movs	r6, r4
    42c2:	40ae      	lsls	r6, r5
    42c4:	46b2      	mov	sl, r6
    42c6:	003e      	movs	r6, r7
    42c8:	40de      	lsrs	r6, r3
    42ca:	46ac      	mov	ip, r5
    42cc:	0035      	movs	r5, r6
    42ce:	4656      	mov	r6, sl
    42d0:	432e      	orrs	r6, r5
    42d2:	4665      	mov	r5, ip
    42d4:	40af      	lsls	r7, r5
    42d6:	1e7d      	subs	r5, r7, #1
    42d8:	41af      	sbcs	r7, r5
    42da:	40dc      	lsrs	r4, r3
    42dc:	4337      	orrs	r7, r6
    42de:	1bd7      	subs	r7, r2, r7
    42e0:	42ba      	cmp	r2, r7
    42e2:	4192      	sbcs	r2, r2
    42e4:	1b0c      	subs	r4, r1, r4
    42e6:	4252      	negs	r2, r2
    42e8:	1aa4      	subs	r4, r4, r2
    42ea:	0006      	movs	r6, r0
    42ec:	46d8      	mov	r8, fp
    42ee:	e6a3      	b.n	4038 <__aeabi_dadd+0xb0>
    42f0:	4664      	mov	r4, ip
    42f2:	4667      	mov	r7, ip
    42f4:	432c      	orrs	r4, r5
    42f6:	d000      	beq.n	42fa <__aeabi_dadd+0x372>
    42f8:	e6a2      	b.n	4040 <__aeabi_dadd+0xb8>
    42fa:	2500      	movs	r5, #0
    42fc:	2600      	movs	r6, #0
    42fe:	2700      	movs	r7, #0
    4300:	e706      	b.n	4110 <__aeabi_dadd+0x188>
    4302:	001e      	movs	r6, r3
    4304:	e6c4      	b.n	4090 <__aeabi_dadd+0x108>
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	000007ff 	.word	0x000007ff
    430c:	ff7fffff 	.word	0xff7fffff
    4310:	800fffff 	.word	0x800fffff
    4314:	2b1f      	cmp	r3, #31
    4316:	dc63      	bgt.n	43e0 <__aeabi_dadd+0x458>
    4318:	2020      	movs	r0, #32
    431a:	1ac3      	subs	r3, r0, r3
    431c:	0008      	movs	r0, r1
    431e:	4098      	lsls	r0, r3
    4320:	469c      	mov	ip, r3
    4322:	4683      	mov	fp, r0
    4324:	4653      	mov	r3, sl
    4326:	0010      	movs	r0, r2
    4328:	40d8      	lsrs	r0, r3
    432a:	0003      	movs	r3, r0
    432c:	4658      	mov	r0, fp
    432e:	4318      	orrs	r0, r3
    4330:	4663      	mov	r3, ip
    4332:	409a      	lsls	r2, r3
    4334:	1e53      	subs	r3, r2, #1
    4336:	419a      	sbcs	r2, r3
    4338:	4653      	mov	r3, sl
    433a:	4302      	orrs	r2, r0
    433c:	40d9      	lsrs	r1, r3
    433e:	e703      	b.n	4148 <__aeabi_dadd+0x1c0>
    4340:	0026      	movs	r6, r4
    4342:	433e      	orrs	r6, r7
    4344:	d006      	beq.n	4354 <__aeabi_dadd+0x3cc>
    4346:	43eb      	mvns	r3, r5
    4348:	4699      	mov	r9, r3
    434a:	2b00      	cmp	r3, #0
    434c:	d0c7      	beq.n	42de <__aeabi_dadd+0x356>
    434e:	4e94      	ldr	r6, [pc, #592]	; (45a0 <__aeabi_dadd+0x618>)
    4350:	42b0      	cmp	r0, r6
    4352:	d1ac      	bne.n	42ae <__aeabi_dadd+0x326>
    4354:	000c      	movs	r4, r1
    4356:	0017      	movs	r7, r2
    4358:	0006      	movs	r6, r0
    435a:	46d8      	mov	r8, fp
    435c:	e698      	b.n	4090 <__aeabi_dadd+0x108>
    435e:	4b90      	ldr	r3, [pc, #576]	; (45a0 <__aeabi_dadd+0x618>)
    4360:	459a      	cmp	sl, r3
    4362:	d00b      	beq.n	437c <__aeabi_dadd+0x3f4>
    4364:	4682      	mov	sl, r0
    4366:	e6e7      	b.n	4138 <__aeabi_dadd+0x1b0>
    4368:	2800      	cmp	r0, #0
    436a:	d000      	beq.n	436e <__aeabi_dadd+0x3e6>
    436c:	e09e      	b.n	44ac <__aeabi_dadd+0x524>
    436e:	0018      	movs	r0, r3
    4370:	4310      	orrs	r0, r2
    4372:	d100      	bne.n	4376 <__aeabi_dadd+0x3ee>
    4374:	e0e9      	b.n	454a <__aeabi_dadd+0x5c2>
    4376:	001c      	movs	r4, r3
    4378:	0017      	movs	r7, r2
    437a:	46d8      	mov	r8, fp
    437c:	4e88      	ldr	r6, [pc, #544]	; (45a0 <__aeabi_dadd+0x618>)
    437e:	e687      	b.n	4090 <__aeabi_dadd+0x108>
    4380:	2500      	movs	r5, #0
    4382:	e772      	b.n	426a <__aeabi_dadd+0x2e2>
    4384:	2100      	movs	r1, #0
    4386:	e782      	b.n	428e <__aeabi_dadd+0x306>
    4388:	0023      	movs	r3, r4
    438a:	433b      	orrs	r3, r7
    438c:	2e00      	cmp	r6, #0
    438e:	d000      	beq.n	4392 <__aeabi_dadd+0x40a>
    4390:	e0ab      	b.n	44ea <__aeabi_dadd+0x562>
    4392:	2b00      	cmp	r3, #0
    4394:	d100      	bne.n	4398 <__aeabi_dadd+0x410>
    4396:	e0e7      	b.n	4568 <__aeabi_dadd+0x5e0>
    4398:	000b      	movs	r3, r1
    439a:	4313      	orrs	r3, r2
    439c:	d100      	bne.n	43a0 <__aeabi_dadd+0x418>
    439e:	e677      	b.n	4090 <__aeabi_dadd+0x108>
    43a0:	18ba      	adds	r2, r7, r2
    43a2:	42ba      	cmp	r2, r7
    43a4:	41bf      	sbcs	r7, r7
    43a6:	1864      	adds	r4, r4, r1
    43a8:	427f      	negs	r7, r7
    43aa:	19e4      	adds	r4, r4, r7
    43ac:	0223      	lsls	r3, r4, #8
    43ae:	d400      	bmi.n	43b2 <__aeabi_dadd+0x42a>
    43b0:	e0f2      	b.n	4598 <__aeabi_dadd+0x610>
    43b2:	4b7c      	ldr	r3, [pc, #496]	; (45a4 <__aeabi_dadd+0x61c>)
    43b4:	0017      	movs	r7, r2
    43b6:	401c      	ands	r4, r3
    43b8:	0006      	movs	r6, r0
    43ba:	e669      	b.n	4090 <__aeabi_dadd+0x108>
    43bc:	0020      	movs	r0, r4
    43be:	4338      	orrs	r0, r7
    43c0:	2e00      	cmp	r6, #0
    43c2:	d1d1      	bne.n	4368 <__aeabi_dadd+0x3e0>
    43c4:	2800      	cmp	r0, #0
    43c6:	d15b      	bne.n	4480 <__aeabi_dadd+0x4f8>
    43c8:	001c      	movs	r4, r3
    43ca:	4314      	orrs	r4, r2
    43cc:	d100      	bne.n	43d0 <__aeabi_dadd+0x448>
    43ce:	e0a8      	b.n	4522 <__aeabi_dadd+0x59a>
    43d0:	001c      	movs	r4, r3
    43d2:	0017      	movs	r7, r2
    43d4:	46d8      	mov	r8, fp
    43d6:	e65b      	b.n	4090 <__aeabi_dadd+0x108>
    43d8:	0006      	movs	r6, r0
    43da:	2400      	movs	r4, #0
    43dc:	2700      	movs	r7, #0
    43de:	e697      	b.n	4110 <__aeabi_dadd+0x188>
    43e0:	4650      	mov	r0, sl
    43e2:	000b      	movs	r3, r1
    43e4:	3820      	subs	r0, #32
    43e6:	40c3      	lsrs	r3, r0
    43e8:	4699      	mov	r9, r3
    43ea:	4653      	mov	r3, sl
    43ec:	2b20      	cmp	r3, #32
    43ee:	d100      	bne.n	43f2 <__aeabi_dadd+0x46a>
    43f0:	e095      	b.n	451e <__aeabi_dadd+0x596>
    43f2:	2340      	movs	r3, #64	; 0x40
    43f4:	4650      	mov	r0, sl
    43f6:	1a1b      	subs	r3, r3, r0
    43f8:	4099      	lsls	r1, r3
    43fa:	430a      	orrs	r2, r1
    43fc:	1e51      	subs	r1, r2, #1
    43fe:	418a      	sbcs	r2, r1
    4400:	464b      	mov	r3, r9
    4402:	2100      	movs	r1, #0
    4404:	431a      	orrs	r2, r3
    4406:	e69f      	b.n	4148 <__aeabi_dadd+0x1c0>
    4408:	2e00      	cmp	r6, #0
    440a:	d130      	bne.n	446e <__aeabi_dadd+0x4e6>
    440c:	0026      	movs	r6, r4
    440e:	433e      	orrs	r6, r7
    4410:	d067      	beq.n	44e2 <__aeabi_dadd+0x55a>
    4412:	43db      	mvns	r3, r3
    4414:	469a      	mov	sl, r3
    4416:	2b00      	cmp	r3, #0
    4418:	d01c      	beq.n	4454 <__aeabi_dadd+0x4cc>
    441a:	4e61      	ldr	r6, [pc, #388]	; (45a0 <__aeabi_dadd+0x618>)
    441c:	42b0      	cmp	r0, r6
    441e:	d060      	beq.n	44e2 <__aeabi_dadd+0x55a>
    4420:	4653      	mov	r3, sl
    4422:	2b38      	cmp	r3, #56	; 0x38
    4424:	dd00      	ble.n	4428 <__aeabi_dadd+0x4a0>
    4426:	e096      	b.n	4556 <__aeabi_dadd+0x5ce>
    4428:	2b1f      	cmp	r3, #31
    442a:	dd00      	ble.n	442e <__aeabi_dadd+0x4a6>
    442c:	e09f      	b.n	456e <__aeabi_dadd+0x5e6>
    442e:	2620      	movs	r6, #32
    4430:	1af3      	subs	r3, r6, r3
    4432:	0026      	movs	r6, r4
    4434:	409e      	lsls	r6, r3
    4436:	469c      	mov	ip, r3
    4438:	46b3      	mov	fp, r6
    443a:	4653      	mov	r3, sl
    443c:	003e      	movs	r6, r7
    443e:	40de      	lsrs	r6, r3
    4440:	0033      	movs	r3, r6
    4442:	465e      	mov	r6, fp
    4444:	431e      	orrs	r6, r3
    4446:	4663      	mov	r3, ip
    4448:	409f      	lsls	r7, r3
    444a:	1e7b      	subs	r3, r7, #1
    444c:	419f      	sbcs	r7, r3
    444e:	4653      	mov	r3, sl
    4450:	40dc      	lsrs	r4, r3
    4452:	4337      	orrs	r7, r6
    4454:	18bf      	adds	r7, r7, r2
    4456:	4297      	cmp	r7, r2
    4458:	4192      	sbcs	r2, r2
    445a:	1864      	adds	r4, r4, r1
    445c:	4252      	negs	r2, r2
    445e:	18a4      	adds	r4, r4, r2
    4460:	0006      	movs	r6, r0
    4462:	e678      	b.n	4156 <__aeabi_dadd+0x1ce>
    4464:	4327      	orrs	r7, r4
    4466:	1e7c      	subs	r4, r7, #1
    4468:	41a7      	sbcs	r7, r4
    446a:	2400      	movs	r4, #0
    446c:	e737      	b.n	42de <__aeabi_dadd+0x356>
    446e:	4e4c      	ldr	r6, [pc, #304]	; (45a0 <__aeabi_dadd+0x618>)
    4470:	42b0      	cmp	r0, r6
    4472:	d036      	beq.n	44e2 <__aeabi_dadd+0x55a>
    4474:	2680      	movs	r6, #128	; 0x80
    4476:	425b      	negs	r3, r3
    4478:	0436      	lsls	r6, r6, #16
    447a:	469a      	mov	sl, r3
    447c:	4334      	orrs	r4, r6
    447e:	e7cf      	b.n	4420 <__aeabi_dadd+0x498>
    4480:	0018      	movs	r0, r3
    4482:	4310      	orrs	r0, r2
    4484:	d100      	bne.n	4488 <__aeabi_dadd+0x500>
    4486:	e603      	b.n	4090 <__aeabi_dadd+0x108>
    4488:	1ab8      	subs	r0, r7, r2
    448a:	4684      	mov	ip, r0
    448c:	4567      	cmp	r7, ip
    448e:	41ad      	sbcs	r5, r5
    4490:	1ae0      	subs	r0, r4, r3
    4492:	426d      	negs	r5, r5
    4494:	1b40      	subs	r0, r0, r5
    4496:	0205      	lsls	r5, r0, #8
    4498:	d400      	bmi.n	449c <__aeabi_dadd+0x514>
    449a:	e62c      	b.n	40f6 <__aeabi_dadd+0x16e>
    449c:	1bd7      	subs	r7, r2, r7
    449e:	42ba      	cmp	r2, r7
    44a0:	4192      	sbcs	r2, r2
    44a2:	1b1c      	subs	r4, r3, r4
    44a4:	4252      	negs	r2, r2
    44a6:	1aa4      	subs	r4, r4, r2
    44a8:	46d8      	mov	r8, fp
    44aa:	e5f1      	b.n	4090 <__aeabi_dadd+0x108>
    44ac:	0018      	movs	r0, r3
    44ae:	4310      	orrs	r0, r2
    44b0:	d100      	bne.n	44b4 <__aeabi_dadd+0x52c>
    44b2:	e763      	b.n	437c <__aeabi_dadd+0x3f4>
    44b4:	08f8      	lsrs	r0, r7, #3
    44b6:	0767      	lsls	r7, r4, #29
    44b8:	4307      	orrs	r7, r0
    44ba:	2080      	movs	r0, #128	; 0x80
    44bc:	08e4      	lsrs	r4, r4, #3
    44be:	0300      	lsls	r0, r0, #12
    44c0:	4204      	tst	r4, r0
    44c2:	d008      	beq.n	44d6 <__aeabi_dadd+0x54e>
    44c4:	08dd      	lsrs	r5, r3, #3
    44c6:	4205      	tst	r5, r0
    44c8:	d105      	bne.n	44d6 <__aeabi_dadd+0x54e>
    44ca:	08d2      	lsrs	r2, r2, #3
    44cc:	0759      	lsls	r1, r3, #29
    44ce:	4311      	orrs	r1, r2
    44d0:	000f      	movs	r7, r1
    44d2:	002c      	movs	r4, r5
    44d4:	46d8      	mov	r8, fp
    44d6:	0f7b      	lsrs	r3, r7, #29
    44d8:	00e4      	lsls	r4, r4, #3
    44da:	431c      	orrs	r4, r3
    44dc:	00ff      	lsls	r7, r7, #3
    44de:	4e30      	ldr	r6, [pc, #192]	; (45a0 <__aeabi_dadd+0x618>)
    44e0:	e5d6      	b.n	4090 <__aeabi_dadd+0x108>
    44e2:	000c      	movs	r4, r1
    44e4:	0017      	movs	r7, r2
    44e6:	0006      	movs	r6, r0
    44e8:	e5d2      	b.n	4090 <__aeabi_dadd+0x108>
    44ea:	2b00      	cmp	r3, #0
    44ec:	d038      	beq.n	4560 <__aeabi_dadd+0x5d8>
    44ee:	000b      	movs	r3, r1
    44f0:	4313      	orrs	r3, r2
    44f2:	d100      	bne.n	44f6 <__aeabi_dadd+0x56e>
    44f4:	e742      	b.n	437c <__aeabi_dadd+0x3f4>
    44f6:	08f8      	lsrs	r0, r7, #3
    44f8:	0767      	lsls	r7, r4, #29
    44fa:	4307      	orrs	r7, r0
    44fc:	2080      	movs	r0, #128	; 0x80
    44fe:	08e4      	lsrs	r4, r4, #3
    4500:	0300      	lsls	r0, r0, #12
    4502:	4204      	tst	r4, r0
    4504:	d0e7      	beq.n	44d6 <__aeabi_dadd+0x54e>
    4506:	08cb      	lsrs	r3, r1, #3
    4508:	4203      	tst	r3, r0
    450a:	d1e4      	bne.n	44d6 <__aeabi_dadd+0x54e>
    450c:	08d2      	lsrs	r2, r2, #3
    450e:	0749      	lsls	r1, r1, #29
    4510:	4311      	orrs	r1, r2
    4512:	000f      	movs	r7, r1
    4514:	001c      	movs	r4, r3
    4516:	e7de      	b.n	44d6 <__aeabi_dadd+0x54e>
    4518:	2700      	movs	r7, #0
    451a:	2400      	movs	r4, #0
    451c:	e5d5      	b.n	40ca <__aeabi_dadd+0x142>
    451e:	2100      	movs	r1, #0
    4520:	e76b      	b.n	43fa <__aeabi_dadd+0x472>
    4522:	2500      	movs	r5, #0
    4524:	2700      	movs	r7, #0
    4526:	e5f3      	b.n	4110 <__aeabi_dadd+0x188>
    4528:	464e      	mov	r6, r9
    452a:	0025      	movs	r5, r4
    452c:	3e20      	subs	r6, #32
    452e:	40f5      	lsrs	r5, r6
    4530:	464b      	mov	r3, r9
    4532:	002e      	movs	r6, r5
    4534:	2b20      	cmp	r3, #32
    4536:	d02d      	beq.n	4594 <__aeabi_dadd+0x60c>
    4538:	2540      	movs	r5, #64	; 0x40
    453a:	1aed      	subs	r5, r5, r3
    453c:	40ac      	lsls	r4, r5
    453e:	4327      	orrs	r7, r4
    4540:	1e7c      	subs	r4, r7, #1
    4542:	41a7      	sbcs	r7, r4
    4544:	2400      	movs	r4, #0
    4546:	4337      	orrs	r7, r6
    4548:	e6c9      	b.n	42de <__aeabi_dadd+0x356>
    454a:	2480      	movs	r4, #128	; 0x80
    454c:	2500      	movs	r5, #0
    454e:	0324      	lsls	r4, r4, #12
    4550:	4e13      	ldr	r6, [pc, #76]	; (45a0 <__aeabi_dadd+0x618>)
    4552:	2700      	movs	r7, #0
    4554:	e5dc      	b.n	4110 <__aeabi_dadd+0x188>
    4556:	4327      	orrs	r7, r4
    4558:	1e7c      	subs	r4, r7, #1
    455a:	41a7      	sbcs	r7, r4
    455c:	2400      	movs	r4, #0
    455e:	e779      	b.n	4454 <__aeabi_dadd+0x4cc>
    4560:	000c      	movs	r4, r1
    4562:	0017      	movs	r7, r2
    4564:	4e0e      	ldr	r6, [pc, #56]	; (45a0 <__aeabi_dadd+0x618>)
    4566:	e593      	b.n	4090 <__aeabi_dadd+0x108>
    4568:	000c      	movs	r4, r1
    456a:	0017      	movs	r7, r2
    456c:	e590      	b.n	4090 <__aeabi_dadd+0x108>
    456e:	4656      	mov	r6, sl
    4570:	0023      	movs	r3, r4
    4572:	3e20      	subs	r6, #32
    4574:	40f3      	lsrs	r3, r6
    4576:	4699      	mov	r9, r3
    4578:	4653      	mov	r3, sl
    457a:	2b20      	cmp	r3, #32
    457c:	d00e      	beq.n	459c <__aeabi_dadd+0x614>
    457e:	2340      	movs	r3, #64	; 0x40
    4580:	4656      	mov	r6, sl
    4582:	1b9b      	subs	r3, r3, r6
    4584:	409c      	lsls	r4, r3
    4586:	4327      	orrs	r7, r4
    4588:	1e7c      	subs	r4, r7, #1
    458a:	41a7      	sbcs	r7, r4
    458c:	464b      	mov	r3, r9
    458e:	2400      	movs	r4, #0
    4590:	431f      	orrs	r7, r3
    4592:	e75f      	b.n	4454 <__aeabi_dadd+0x4cc>
    4594:	2400      	movs	r4, #0
    4596:	e7d2      	b.n	453e <__aeabi_dadd+0x5b6>
    4598:	0017      	movs	r7, r2
    459a:	e5b2      	b.n	4102 <__aeabi_dadd+0x17a>
    459c:	2400      	movs	r4, #0
    459e:	e7f2      	b.n	4586 <__aeabi_dadd+0x5fe>
    45a0:	000007ff 	.word	0x000007ff
    45a4:	ff7fffff 	.word	0xff7fffff

000045a8 <__aeabi_ddiv>:
    45a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45aa:	4657      	mov	r7, sl
    45ac:	4645      	mov	r5, r8
    45ae:	46de      	mov	lr, fp
    45b0:	464e      	mov	r6, r9
    45b2:	b5e0      	push	{r5, r6, r7, lr}
    45b4:	004c      	lsls	r4, r1, #1
    45b6:	030e      	lsls	r6, r1, #12
    45b8:	b087      	sub	sp, #28
    45ba:	4683      	mov	fp, r0
    45bc:	4692      	mov	sl, r2
    45be:	001d      	movs	r5, r3
    45c0:	4680      	mov	r8, r0
    45c2:	0b36      	lsrs	r6, r6, #12
    45c4:	0d64      	lsrs	r4, r4, #21
    45c6:	0fcf      	lsrs	r7, r1, #31
    45c8:	2c00      	cmp	r4, #0
    45ca:	d04f      	beq.n	466c <__aeabi_ddiv+0xc4>
    45cc:	4b6f      	ldr	r3, [pc, #444]	; (478c <__aeabi_ddiv+0x1e4>)
    45ce:	429c      	cmp	r4, r3
    45d0:	d035      	beq.n	463e <__aeabi_ddiv+0x96>
    45d2:	2380      	movs	r3, #128	; 0x80
    45d4:	0f42      	lsrs	r2, r0, #29
    45d6:	041b      	lsls	r3, r3, #16
    45d8:	00f6      	lsls	r6, r6, #3
    45da:	4313      	orrs	r3, r2
    45dc:	4333      	orrs	r3, r6
    45de:	4699      	mov	r9, r3
    45e0:	00c3      	lsls	r3, r0, #3
    45e2:	4698      	mov	r8, r3
    45e4:	4b6a      	ldr	r3, [pc, #424]	; (4790 <__aeabi_ddiv+0x1e8>)
    45e6:	2600      	movs	r6, #0
    45e8:	469c      	mov	ip, r3
    45ea:	2300      	movs	r3, #0
    45ec:	4464      	add	r4, ip
    45ee:	9303      	str	r3, [sp, #12]
    45f0:	032b      	lsls	r3, r5, #12
    45f2:	0b1b      	lsrs	r3, r3, #12
    45f4:	469b      	mov	fp, r3
    45f6:	006b      	lsls	r3, r5, #1
    45f8:	0fed      	lsrs	r5, r5, #31
    45fa:	4650      	mov	r0, sl
    45fc:	0d5b      	lsrs	r3, r3, #21
    45fe:	9501      	str	r5, [sp, #4]
    4600:	d05e      	beq.n	46c0 <__aeabi_ddiv+0x118>
    4602:	4a62      	ldr	r2, [pc, #392]	; (478c <__aeabi_ddiv+0x1e4>)
    4604:	4293      	cmp	r3, r2
    4606:	d053      	beq.n	46b0 <__aeabi_ddiv+0x108>
    4608:	465a      	mov	r2, fp
    460a:	00d1      	lsls	r1, r2, #3
    460c:	2280      	movs	r2, #128	; 0x80
    460e:	0f40      	lsrs	r0, r0, #29
    4610:	0412      	lsls	r2, r2, #16
    4612:	4302      	orrs	r2, r0
    4614:	430a      	orrs	r2, r1
    4616:	4693      	mov	fp, r2
    4618:	4652      	mov	r2, sl
    461a:	00d1      	lsls	r1, r2, #3
    461c:	4a5c      	ldr	r2, [pc, #368]	; (4790 <__aeabi_ddiv+0x1e8>)
    461e:	4694      	mov	ip, r2
    4620:	2200      	movs	r2, #0
    4622:	4463      	add	r3, ip
    4624:	0038      	movs	r0, r7
    4626:	4068      	eors	r0, r5
    4628:	4684      	mov	ip, r0
    462a:	9002      	str	r0, [sp, #8]
    462c:	1ae4      	subs	r4, r4, r3
    462e:	4316      	orrs	r6, r2
    4630:	2e0f      	cmp	r6, #15
    4632:	d900      	bls.n	4636 <__aeabi_ddiv+0x8e>
    4634:	e0b4      	b.n	47a0 <__aeabi_ddiv+0x1f8>
    4636:	4b57      	ldr	r3, [pc, #348]	; (4794 <__aeabi_ddiv+0x1ec>)
    4638:	00b6      	lsls	r6, r6, #2
    463a:	599b      	ldr	r3, [r3, r6]
    463c:	469f      	mov	pc, r3
    463e:	0003      	movs	r3, r0
    4640:	4333      	orrs	r3, r6
    4642:	4699      	mov	r9, r3
    4644:	d16c      	bne.n	4720 <__aeabi_ddiv+0x178>
    4646:	2300      	movs	r3, #0
    4648:	4698      	mov	r8, r3
    464a:	3302      	adds	r3, #2
    464c:	2608      	movs	r6, #8
    464e:	9303      	str	r3, [sp, #12]
    4650:	e7ce      	b.n	45f0 <__aeabi_ddiv+0x48>
    4652:	46cb      	mov	fp, r9
    4654:	4641      	mov	r1, r8
    4656:	9a03      	ldr	r2, [sp, #12]
    4658:	9701      	str	r7, [sp, #4]
    465a:	2a02      	cmp	r2, #2
    465c:	d165      	bne.n	472a <__aeabi_ddiv+0x182>
    465e:	9b01      	ldr	r3, [sp, #4]
    4660:	4c4a      	ldr	r4, [pc, #296]	; (478c <__aeabi_ddiv+0x1e4>)
    4662:	469c      	mov	ip, r3
    4664:	2300      	movs	r3, #0
    4666:	2200      	movs	r2, #0
    4668:	4698      	mov	r8, r3
    466a:	e06b      	b.n	4744 <__aeabi_ddiv+0x19c>
    466c:	0003      	movs	r3, r0
    466e:	4333      	orrs	r3, r6
    4670:	4699      	mov	r9, r3
    4672:	d04e      	beq.n	4712 <__aeabi_ddiv+0x16a>
    4674:	2e00      	cmp	r6, #0
    4676:	d100      	bne.n	467a <__aeabi_ddiv+0xd2>
    4678:	e1bc      	b.n	49f4 <__aeabi_ddiv+0x44c>
    467a:	0030      	movs	r0, r6
    467c:	f001 fa3c 	bl	5af8 <__clzsi2>
    4680:	0003      	movs	r3, r0
    4682:	3b0b      	subs	r3, #11
    4684:	2b1c      	cmp	r3, #28
    4686:	dd00      	ble.n	468a <__aeabi_ddiv+0xe2>
    4688:	e1ac      	b.n	49e4 <__aeabi_ddiv+0x43c>
    468a:	221d      	movs	r2, #29
    468c:	1ad3      	subs	r3, r2, r3
    468e:	465a      	mov	r2, fp
    4690:	0001      	movs	r1, r0
    4692:	40da      	lsrs	r2, r3
    4694:	3908      	subs	r1, #8
    4696:	408e      	lsls	r6, r1
    4698:	0013      	movs	r3, r2
    469a:	4333      	orrs	r3, r6
    469c:	4699      	mov	r9, r3
    469e:	465b      	mov	r3, fp
    46a0:	408b      	lsls	r3, r1
    46a2:	4698      	mov	r8, r3
    46a4:	2300      	movs	r3, #0
    46a6:	4c3c      	ldr	r4, [pc, #240]	; (4798 <__aeabi_ddiv+0x1f0>)
    46a8:	2600      	movs	r6, #0
    46aa:	1a24      	subs	r4, r4, r0
    46ac:	9303      	str	r3, [sp, #12]
    46ae:	e79f      	b.n	45f0 <__aeabi_ddiv+0x48>
    46b0:	4651      	mov	r1, sl
    46b2:	465a      	mov	r2, fp
    46b4:	4311      	orrs	r1, r2
    46b6:	d129      	bne.n	470c <__aeabi_ddiv+0x164>
    46b8:	2200      	movs	r2, #0
    46ba:	4693      	mov	fp, r2
    46bc:	3202      	adds	r2, #2
    46be:	e7b1      	b.n	4624 <__aeabi_ddiv+0x7c>
    46c0:	4659      	mov	r1, fp
    46c2:	4301      	orrs	r1, r0
    46c4:	d01e      	beq.n	4704 <__aeabi_ddiv+0x15c>
    46c6:	465b      	mov	r3, fp
    46c8:	2b00      	cmp	r3, #0
    46ca:	d100      	bne.n	46ce <__aeabi_ddiv+0x126>
    46cc:	e19e      	b.n	4a0c <__aeabi_ddiv+0x464>
    46ce:	4658      	mov	r0, fp
    46d0:	f001 fa12 	bl	5af8 <__clzsi2>
    46d4:	0003      	movs	r3, r0
    46d6:	3b0b      	subs	r3, #11
    46d8:	2b1c      	cmp	r3, #28
    46da:	dd00      	ble.n	46de <__aeabi_ddiv+0x136>
    46dc:	e18f      	b.n	49fe <__aeabi_ddiv+0x456>
    46de:	0002      	movs	r2, r0
    46e0:	4659      	mov	r1, fp
    46e2:	3a08      	subs	r2, #8
    46e4:	4091      	lsls	r1, r2
    46e6:	468b      	mov	fp, r1
    46e8:	211d      	movs	r1, #29
    46ea:	1acb      	subs	r3, r1, r3
    46ec:	4651      	mov	r1, sl
    46ee:	40d9      	lsrs	r1, r3
    46f0:	000b      	movs	r3, r1
    46f2:	4659      	mov	r1, fp
    46f4:	430b      	orrs	r3, r1
    46f6:	4651      	mov	r1, sl
    46f8:	469b      	mov	fp, r3
    46fa:	4091      	lsls	r1, r2
    46fc:	4b26      	ldr	r3, [pc, #152]	; (4798 <__aeabi_ddiv+0x1f0>)
    46fe:	2200      	movs	r2, #0
    4700:	1a1b      	subs	r3, r3, r0
    4702:	e78f      	b.n	4624 <__aeabi_ddiv+0x7c>
    4704:	2300      	movs	r3, #0
    4706:	2201      	movs	r2, #1
    4708:	469b      	mov	fp, r3
    470a:	e78b      	b.n	4624 <__aeabi_ddiv+0x7c>
    470c:	4651      	mov	r1, sl
    470e:	2203      	movs	r2, #3
    4710:	e788      	b.n	4624 <__aeabi_ddiv+0x7c>
    4712:	2300      	movs	r3, #0
    4714:	4698      	mov	r8, r3
    4716:	3301      	adds	r3, #1
    4718:	2604      	movs	r6, #4
    471a:	2400      	movs	r4, #0
    471c:	9303      	str	r3, [sp, #12]
    471e:	e767      	b.n	45f0 <__aeabi_ddiv+0x48>
    4720:	2303      	movs	r3, #3
    4722:	46b1      	mov	r9, r6
    4724:	9303      	str	r3, [sp, #12]
    4726:	260c      	movs	r6, #12
    4728:	e762      	b.n	45f0 <__aeabi_ddiv+0x48>
    472a:	2a03      	cmp	r2, #3
    472c:	d100      	bne.n	4730 <__aeabi_ddiv+0x188>
    472e:	e25c      	b.n	4bea <__aeabi_ddiv+0x642>
    4730:	9b01      	ldr	r3, [sp, #4]
    4732:	2a01      	cmp	r2, #1
    4734:	d000      	beq.n	4738 <__aeabi_ddiv+0x190>
    4736:	e1e4      	b.n	4b02 <__aeabi_ddiv+0x55a>
    4738:	4013      	ands	r3, r2
    473a:	469c      	mov	ip, r3
    473c:	2300      	movs	r3, #0
    473e:	2400      	movs	r4, #0
    4740:	2200      	movs	r2, #0
    4742:	4698      	mov	r8, r3
    4744:	2100      	movs	r1, #0
    4746:	0312      	lsls	r2, r2, #12
    4748:	0b13      	lsrs	r3, r2, #12
    474a:	0d0a      	lsrs	r2, r1, #20
    474c:	0512      	lsls	r2, r2, #20
    474e:	431a      	orrs	r2, r3
    4750:	0523      	lsls	r3, r4, #20
    4752:	4c12      	ldr	r4, [pc, #72]	; (479c <__aeabi_ddiv+0x1f4>)
    4754:	4640      	mov	r0, r8
    4756:	4022      	ands	r2, r4
    4758:	4313      	orrs	r3, r2
    475a:	4662      	mov	r2, ip
    475c:	005b      	lsls	r3, r3, #1
    475e:	07d2      	lsls	r2, r2, #31
    4760:	085b      	lsrs	r3, r3, #1
    4762:	4313      	orrs	r3, r2
    4764:	0019      	movs	r1, r3
    4766:	b007      	add	sp, #28
    4768:	bc3c      	pop	{r2, r3, r4, r5}
    476a:	4690      	mov	r8, r2
    476c:	4699      	mov	r9, r3
    476e:	46a2      	mov	sl, r4
    4770:	46ab      	mov	fp, r5
    4772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4774:	2300      	movs	r3, #0
    4776:	2280      	movs	r2, #128	; 0x80
    4778:	469c      	mov	ip, r3
    477a:	0312      	lsls	r2, r2, #12
    477c:	4698      	mov	r8, r3
    477e:	4c03      	ldr	r4, [pc, #12]	; (478c <__aeabi_ddiv+0x1e4>)
    4780:	e7e0      	b.n	4744 <__aeabi_ddiv+0x19c>
    4782:	2300      	movs	r3, #0
    4784:	4c01      	ldr	r4, [pc, #4]	; (478c <__aeabi_ddiv+0x1e4>)
    4786:	2200      	movs	r2, #0
    4788:	4698      	mov	r8, r3
    478a:	e7db      	b.n	4744 <__aeabi_ddiv+0x19c>
    478c:	000007ff 	.word	0x000007ff
    4790:	fffffc01 	.word	0xfffffc01
    4794:	0000699c 	.word	0x0000699c
    4798:	fffffc0d 	.word	0xfffffc0d
    479c:	800fffff 	.word	0x800fffff
    47a0:	45d9      	cmp	r9, fp
    47a2:	d900      	bls.n	47a6 <__aeabi_ddiv+0x1fe>
    47a4:	e139      	b.n	4a1a <__aeabi_ddiv+0x472>
    47a6:	d100      	bne.n	47aa <__aeabi_ddiv+0x202>
    47a8:	e134      	b.n	4a14 <__aeabi_ddiv+0x46c>
    47aa:	2300      	movs	r3, #0
    47ac:	4646      	mov	r6, r8
    47ae:	464d      	mov	r5, r9
    47b0:	469a      	mov	sl, r3
    47b2:	3c01      	subs	r4, #1
    47b4:	465b      	mov	r3, fp
    47b6:	0e0a      	lsrs	r2, r1, #24
    47b8:	021b      	lsls	r3, r3, #8
    47ba:	431a      	orrs	r2, r3
    47bc:	020b      	lsls	r3, r1, #8
    47be:	0c17      	lsrs	r7, r2, #16
    47c0:	9303      	str	r3, [sp, #12]
    47c2:	0413      	lsls	r3, r2, #16
    47c4:	0c1b      	lsrs	r3, r3, #16
    47c6:	0039      	movs	r1, r7
    47c8:	0028      	movs	r0, r5
    47ca:	4690      	mov	r8, r2
    47cc:	9301      	str	r3, [sp, #4]
    47ce:	f7ff fa11 	bl	3bf4 <__udivsi3>
    47d2:	0002      	movs	r2, r0
    47d4:	9b01      	ldr	r3, [sp, #4]
    47d6:	4683      	mov	fp, r0
    47d8:	435a      	muls	r2, r3
    47da:	0028      	movs	r0, r5
    47dc:	0039      	movs	r1, r7
    47de:	4691      	mov	r9, r2
    47e0:	f7ff fa8e 	bl	3d00 <__aeabi_uidivmod>
    47e4:	0c35      	lsrs	r5, r6, #16
    47e6:	0409      	lsls	r1, r1, #16
    47e8:	430d      	orrs	r5, r1
    47ea:	45a9      	cmp	r9, r5
    47ec:	d90d      	bls.n	480a <__aeabi_ddiv+0x262>
    47ee:	465b      	mov	r3, fp
    47f0:	4445      	add	r5, r8
    47f2:	3b01      	subs	r3, #1
    47f4:	45a8      	cmp	r8, r5
    47f6:	d900      	bls.n	47fa <__aeabi_ddiv+0x252>
    47f8:	e13a      	b.n	4a70 <__aeabi_ddiv+0x4c8>
    47fa:	45a9      	cmp	r9, r5
    47fc:	d800      	bhi.n	4800 <__aeabi_ddiv+0x258>
    47fe:	e137      	b.n	4a70 <__aeabi_ddiv+0x4c8>
    4800:	2302      	movs	r3, #2
    4802:	425b      	negs	r3, r3
    4804:	469c      	mov	ip, r3
    4806:	4445      	add	r5, r8
    4808:	44e3      	add	fp, ip
    480a:	464b      	mov	r3, r9
    480c:	1aeb      	subs	r3, r5, r3
    480e:	0039      	movs	r1, r7
    4810:	0018      	movs	r0, r3
    4812:	9304      	str	r3, [sp, #16]
    4814:	f7ff f9ee 	bl	3bf4 <__udivsi3>
    4818:	9b01      	ldr	r3, [sp, #4]
    481a:	0005      	movs	r5, r0
    481c:	4343      	muls	r3, r0
    481e:	0039      	movs	r1, r7
    4820:	9804      	ldr	r0, [sp, #16]
    4822:	4699      	mov	r9, r3
    4824:	f7ff fa6c 	bl	3d00 <__aeabi_uidivmod>
    4828:	0433      	lsls	r3, r6, #16
    482a:	0409      	lsls	r1, r1, #16
    482c:	0c1b      	lsrs	r3, r3, #16
    482e:	430b      	orrs	r3, r1
    4830:	4599      	cmp	r9, r3
    4832:	d909      	bls.n	4848 <__aeabi_ddiv+0x2a0>
    4834:	4443      	add	r3, r8
    4836:	1e6a      	subs	r2, r5, #1
    4838:	4598      	cmp	r8, r3
    483a:	d900      	bls.n	483e <__aeabi_ddiv+0x296>
    483c:	e11a      	b.n	4a74 <__aeabi_ddiv+0x4cc>
    483e:	4599      	cmp	r9, r3
    4840:	d800      	bhi.n	4844 <__aeabi_ddiv+0x29c>
    4842:	e117      	b.n	4a74 <__aeabi_ddiv+0x4cc>
    4844:	3d02      	subs	r5, #2
    4846:	4443      	add	r3, r8
    4848:	464a      	mov	r2, r9
    484a:	1a9b      	subs	r3, r3, r2
    484c:	465a      	mov	r2, fp
    484e:	0412      	lsls	r2, r2, #16
    4850:	432a      	orrs	r2, r5
    4852:	9903      	ldr	r1, [sp, #12]
    4854:	4693      	mov	fp, r2
    4856:	0c10      	lsrs	r0, r2, #16
    4858:	0c0a      	lsrs	r2, r1, #16
    485a:	4691      	mov	r9, r2
    485c:	0409      	lsls	r1, r1, #16
    485e:	465a      	mov	r2, fp
    4860:	0c09      	lsrs	r1, r1, #16
    4862:	464e      	mov	r6, r9
    4864:	000d      	movs	r5, r1
    4866:	0412      	lsls	r2, r2, #16
    4868:	0c12      	lsrs	r2, r2, #16
    486a:	4345      	muls	r5, r0
    486c:	9105      	str	r1, [sp, #20]
    486e:	4351      	muls	r1, r2
    4870:	4372      	muls	r2, r6
    4872:	4370      	muls	r0, r6
    4874:	1952      	adds	r2, r2, r5
    4876:	0c0e      	lsrs	r6, r1, #16
    4878:	18b2      	adds	r2, r6, r2
    487a:	4295      	cmp	r5, r2
    487c:	d903      	bls.n	4886 <__aeabi_ddiv+0x2de>
    487e:	2580      	movs	r5, #128	; 0x80
    4880:	026d      	lsls	r5, r5, #9
    4882:	46ac      	mov	ip, r5
    4884:	4460      	add	r0, ip
    4886:	0c15      	lsrs	r5, r2, #16
    4888:	0409      	lsls	r1, r1, #16
    488a:	0412      	lsls	r2, r2, #16
    488c:	0c09      	lsrs	r1, r1, #16
    488e:	1828      	adds	r0, r5, r0
    4890:	1852      	adds	r2, r2, r1
    4892:	4283      	cmp	r3, r0
    4894:	d200      	bcs.n	4898 <__aeabi_ddiv+0x2f0>
    4896:	e0ce      	b.n	4a36 <__aeabi_ddiv+0x48e>
    4898:	d100      	bne.n	489c <__aeabi_ddiv+0x2f4>
    489a:	e0c8      	b.n	4a2e <__aeabi_ddiv+0x486>
    489c:	1a1d      	subs	r5, r3, r0
    489e:	4653      	mov	r3, sl
    48a0:	1a9e      	subs	r6, r3, r2
    48a2:	45b2      	cmp	sl, r6
    48a4:	4192      	sbcs	r2, r2
    48a6:	4252      	negs	r2, r2
    48a8:	1aab      	subs	r3, r5, r2
    48aa:	469a      	mov	sl, r3
    48ac:	4598      	cmp	r8, r3
    48ae:	d100      	bne.n	48b2 <__aeabi_ddiv+0x30a>
    48b0:	e117      	b.n	4ae2 <__aeabi_ddiv+0x53a>
    48b2:	0039      	movs	r1, r7
    48b4:	0018      	movs	r0, r3
    48b6:	f7ff f99d 	bl	3bf4 <__udivsi3>
    48ba:	9b01      	ldr	r3, [sp, #4]
    48bc:	0005      	movs	r5, r0
    48be:	4343      	muls	r3, r0
    48c0:	0039      	movs	r1, r7
    48c2:	4650      	mov	r0, sl
    48c4:	9304      	str	r3, [sp, #16]
    48c6:	f7ff fa1b 	bl	3d00 <__aeabi_uidivmod>
    48ca:	9804      	ldr	r0, [sp, #16]
    48cc:	040b      	lsls	r3, r1, #16
    48ce:	0c31      	lsrs	r1, r6, #16
    48d0:	4319      	orrs	r1, r3
    48d2:	4288      	cmp	r0, r1
    48d4:	d909      	bls.n	48ea <__aeabi_ddiv+0x342>
    48d6:	4441      	add	r1, r8
    48d8:	1e6b      	subs	r3, r5, #1
    48da:	4588      	cmp	r8, r1
    48dc:	d900      	bls.n	48e0 <__aeabi_ddiv+0x338>
    48de:	e107      	b.n	4af0 <__aeabi_ddiv+0x548>
    48e0:	4288      	cmp	r0, r1
    48e2:	d800      	bhi.n	48e6 <__aeabi_ddiv+0x33e>
    48e4:	e104      	b.n	4af0 <__aeabi_ddiv+0x548>
    48e6:	3d02      	subs	r5, #2
    48e8:	4441      	add	r1, r8
    48ea:	9b04      	ldr	r3, [sp, #16]
    48ec:	1acb      	subs	r3, r1, r3
    48ee:	0018      	movs	r0, r3
    48f0:	0039      	movs	r1, r7
    48f2:	9304      	str	r3, [sp, #16]
    48f4:	f7ff f97e 	bl	3bf4 <__udivsi3>
    48f8:	9b01      	ldr	r3, [sp, #4]
    48fa:	4682      	mov	sl, r0
    48fc:	4343      	muls	r3, r0
    48fe:	0039      	movs	r1, r7
    4900:	9804      	ldr	r0, [sp, #16]
    4902:	9301      	str	r3, [sp, #4]
    4904:	f7ff f9fc 	bl	3d00 <__aeabi_uidivmod>
    4908:	9801      	ldr	r0, [sp, #4]
    490a:	040b      	lsls	r3, r1, #16
    490c:	0431      	lsls	r1, r6, #16
    490e:	0c09      	lsrs	r1, r1, #16
    4910:	4319      	orrs	r1, r3
    4912:	4288      	cmp	r0, r1
    4914:	d90d      	bls.n	4932 <__aeabi_ddiv+0x38a>
    4916:	4653      	mov	r3, sl
    4918:	4441      	add	r1, r8
    491a:	3b01      	subs	r3, #1
    491c:	4588      	cmp	r8, r1
    491e:	d900      	bls.n	4922 <__aeabi_ddiv+0x37a>
    4920:	e0e8      	b.n	4af4 <__aeabi_ddiv+0x54c>
    4922:	4288      	cmp	r0, r1
    4924:	d800      	bhi.n	4928 <__aeabi_ddiv+0x380>
    4926:	e0e5      	b.n	4af4 <__aeabi_ddiv+0x54c>
    4928:	2302      	movs	r3, #2
    492a:	425b      	negs	r3, r3
    492c:	469c      	mov	ip, r3
    492e:	4441      	add	r1, r8
    4930:	44e2      	add	sl, ip
    4932:	9b01      	ldr	r3, [sp, #4]
    4934:	042d      	lsls	r5, r5, #16
    4936:	1ace      	subs	r6, r1, r3
    4938:	4651      	mov	r1, sl
    493a:	4329      	orrs	r1, r5
    493c:	9d05      	ldr	r5, [sp, #20]
    493e:	464f      	mov	r7, r9
    4940:	002a      	movs	r2, r5
    4942:	040b      	lsls	r3, r1, #16
    4944:	0c08      	lsrs	r0, r1, #16
    4946:	0c1b      	lsrs	r3, r3, #16
    4948:	435a      	muls	r2, r3
    494a:	4345      	muls	r5, r0
    494c:	437b      	muls	r3, r7
    494e:	4378      	muls	r0, r7
    4950:	195b      	adds	r3, r3, r5
    4952:	0c17      	lsrs	r7, r2, #16
    4954:	18fb      	adds	r3, r7, r3
    4956:	429d      	cmp	r5, r3
    4958:	d903      	bls.n	4962 <__aeabi_ddiv+0x3ba>
    495a:	2580      	movs	r5, #128	; 0x80
    495c:	026d      	lsls	r5, r5, #9
    495e:	46ac      	mov	ip, r5
    4960:	4460      	add	r0, ip
    4962:	0c1d      	lsrs	r5, r3, #16
    4964:	0412      	lsls	r2, r2, #16
    4966:	041b      	lsls	r3, r3, #16
    4968:	0c12      	lsrs	r2, r2, #16
    496a:	1828      	adds	r0, r5, r0
    496c:	189b      	adds	r3, r3, r2
    496e:	4286      	cmp	r6, r0
    4970:	d200      	bcs.n	4974 <__aeabi_ddiv+0x3cc>
    4972:	e093      	b.n	4a9c <__aeabi_ddiv+0x4f4>
    4974:	d100      	bne.n	4978 <__aeabi_ddiv+0x3d0>
    4976:	e08e      	b.n	4a96 <__aeabi_ddiv+0x4ee>
    4978:	2301      	movs	r3, #1
    497a:	4319      	orrs	r1, r3
    497c:	4ba0      	ldr	r3, [pc, #640]	; (4c00 <__aeabi_ddiv+0x658>)
    497e:	18e3      	adds	r3, r4, r3
    4980:	2b00      	cmp	r3, #0
    4982:	dc00      	bgt.n	4986 <__aeabi_ddiv+0x3de>
    4984:	e099      	b.n	4aba <__aeabi_ddiv+0x512>
    4986:	074a      	lsls	r2, r1, #29
    4988:	d000      	beq.n	498c <__aeabi_ddiv+0x3e4>
    498a:	e09e      	b.n	4aca <__aeabi_ddiv+0x522>
    498c:	465a      	mov	r2, fp
    498e:	01d2      	lsls	r2, r2, #7
    4990:	d506      	bpl.n	49a0 <__aeabi_ddiv+0x3f8>
    4992:	465a      	mov	r2, fp
    4994:	4b9b      	ldr	r3, [pc, #620]	; (4c04 <__aeabi_ddiv+0x65c>)
    4996:	401a      	ands	r2, r3
    4998:	2380      	movs	r3, #128	; 0x80
    499a:	4693      	mov	fp, r2
    499c:	00db      	lsls	r3, r3, #3
    499e:	18e3      	adds	r3, r4, r3
    49a0:	4a99      	ldr	r2, [pc, #612]	; (4c08 <__aeabi_ddiv+0x660>)
    49a2:	4293      	cmp	r3, r2
    49a4:	dd68      	ble.n	4a78 <__aeabi_ddiv+0x4d0>
    49a6:	2301      	movs	r3, #1
    49a8:	9a02      	ldr	r2, [sp, #8]
    49aa:	4c98      	ldr	r4, [pc, #608]	; (4c0c <__aeabi_ddiv+0x664>)
    49ac:	401a      	ands	r2, r3
    49ae:	2300      	movs	r3, #0
    49b0:	4694      	mov	ip, r2
    49b2:	4698      	mov	r8, r3
    49b4:	2200      	movs	r2, #0
    49b6:	e6c5      	b.n	4744 <__aeabi_ddiv+0x19c>
    49b8:	2280      	movs	r2, #128	; 0x80
    49ba:	464b      	mov	r3, r9
    49bc:	0312      	lsls	r2, r2, #12
    49be:	4213      	tst	r3, r2
    49c0:	d00a      	beq.n	49d8 <__aeabi_ddiv+0x430>
    49c2:	465b      	mov	r3, fp
    49c4:	4213      	tst	r3, r2
    49c6:	d106      	bne.n	49d6 <__aeabi_ddiv+0x42e>
    49c8:	431a      	orrs	r2, r3
    49ca:	0312      	lsls	r2, r2, #12
    49cc:	0b12      	lsrs	r2, r2, #12
    49ce:	46ac      	mov	ip, r5
    49d0:	4688      	mov	r8, r1
    49d2:	4c8e      	ldr	r4, [pc, #568]	; (4c0c <__aeabi_ddiv+0x664>)
    49d4:	e6b6      	b.n	4744 <__aeabi_ddiv+0x19c>
    49d6:	464b      	mov	r3, r9
    49d8:	431a      	orrs	r2, r3
    49da:	0312      	lsls	r2, r2, #12
    49dc:	0b12      	lsrs	r2, r2, #12
    49de:	46bc      	mov	ip, r7
    49e0:	4c8a      	ldr	r4, [pc, #552]	; (4c0c <__aeabi_ddiv+0x664>)
    49e2:	e6af      	b.n	4744 <__aeabi_ddiv+0x19c>
    49e4:	0003      	movs	r3, r0
    49e6:	465a      	mov	r2, fp
    49e8:	3b28      	subs	r3, #40	; 0x28
    49ea:	409a      	lsls	r2, r3
    49ec:	2300      	movs	r3, #0
    49ee:	4691      	mov	r9, r2
    49f0:	4698      	mov	r8, r3
    49f2:	e657      	b.n	46a4 <__aeabi_ddiv+0xfc>
    49f4:	4658      	mov	r0, fp
    49f6:	f001 f87f 	bl	5af8 <__clzsi2>
    49fa:	3020      	adds	r0, #32
    49fc:	e640      	b.n	4680 <__aeabi_ddiv+0xd8>
    49fe:	0003      	movs	r3, r0
    4a00:	4652      	mov	r2, sl
    4a02:	3b28      	subs	r3, #40	; 0x28
    4a04:	409a      	lsls	r2, r3
    4a06:	2100      	movs	r1, #0
    4a08:	4693      	mov	fp, r2
    4a0a:	e677      	b.n	46fc <__aeabi_ddiv+0x154>
    4a0c:	f001 f874 	bl	5af8 <__clzsi2>
    4a10:	3020      	adds	r0, #32
    4a12:	e65f      	b.n	46d4 <__aeabi_ddiv+0x12c>
    4a14:	4588      	cmp	r8, r1
    4a16:	d200      	bcs.n	4a1a <__aeabi_ddiv+0x472>
    4a18:	e6c7      	b.n	47aa <__aeabi_ddiv+0x202>
    4a1a:	464b      	mov	r3, r9
    4a1c:	07de      	lsls	r6, r3, #31
    4a1e:	085d      	lsrs	r5, r3, #1
    4a20:	4643      	mov	r3, r8
    4a22:	085b      	lsrs	r3, r3, #1
    4a24:	431e      	orrs	r6, r3
    4a26:	4643      	mov	r3, r8
    4a28:	07db      	lsls	r3, r3, #31
    4a2a:	469a      	mov	sl, r3
    4a2c:	e6c2      	b.n	47b4 <__aeabi_ddiv+0x20c>
    4a2e:	2500      	movs	r5, #0
    4a30:	4592      	cmp	sl, r2
    4a32:	d300      	bcc.n	4a36 <__aeabi_ddiv+0x48e>
    4a34:	e733      	b.n	489e <__aeabi_ddiv+0x2f6>
    4a36:	9e03      	ldr	r6, [sp, #12]
    4a38:	4659      	mov	r1, fp
    4a3a:	46b4      	mov	ip, r6
    4a3c:	44e2      	add	sl, ip
    4a3e:	45b2      	cmp	sl, r6
    4a40:	41ad      	sbcs	r5, r5
    4a42:	426d      	negs	r5, r5
    4a44:	4445      	add	r5, r8
    4a46:	18eb      	adds	r3, r5, r3
    4a48:	3901      	subs	r1, #1
    4a4a:	4598      	cmp	r8, r3
    4a4c:	d207      	bcs.n	4a5e <__aeabi_ddiv+0x4b6>
    4a4e:	4298      	cmp	r0, r3
    4a50:	d900      	bls.n	4a54 <__aeabi_ddiv+0x4ac>
    4a52:	e07f      	b.n	4b54 <__aeabi_ddiv+0x5ac>
    4a54:	d100      	bne.n	4a58 <__aeabi_ddiv+0x4b0>
    4a56:	e0bc      	b.n	4bd2 <__aeabi_ddiv+0x62a>
    4a58:	1a1d      	subs	r5, r3, r0
    4a5a:	468b      	mov	fp, r1
    4a5c:	e71f      	b.n	489e <__aeabi_ddiv+0x2f6>
    4a5e:	4598      	cmp	r8, r3
    4a60:	d1fa      	bne.n	4a58 <__aeabi_ddiv+0x4b0>
    4a62:	9d03      	ldr	r5, [sp, #12]
    4a64:	4555      	cmp	r5, sl
    4a66:	d9f2      	bls.n	4a4e <__aeabi_ddiv+0x4a6>
    4a68:	4643      	mov	r3, r8
    4a6a:	468b      	mov	fp, r1
    4a6c:	1a1d      	subs	r5, r3, r0
    4a6e:	e716      	b.n	489e <__aeabi_ddiv+0x2f6>
    4a70:	469b      	mov	fp, r3
    4a72:	e6ca      	b.n	480a <__aeabi_ddiv+0x262>
    4a74:	0015      	movs	r5, r2
    4a76:	e6e7      	b.n	4848 <__aeabi_ddiv+0x2a0>
    4a78:	465a      	mov	r2, fp
    4a7a:	08c9      	lsrs	r1, r1, #3
    4a7c:	0752      	lsls	r2, r2, #29
    4a7e:	430a      	orrs	r2, r1
    4a80:	055b      	lsls	r3, r3, #21
    4a82:	4690      	mov	r8, r2
    4a84:	0d5c      	lsrs	r4, r3, #21
    4a86:	465a      	mov	r2, fp
    4a88:	2301      	movs	r3, #1
    4a8a:	9902      	ldr	r1, [sp, #8]
    4a8c:	0252      	lsls	r2, r2, #9
    4a8e:	4019      	ands	r1, r3
    4a90:	0b12      	lsrs	r2, r2, #12
    4a92:	468c      	mov	ip, r1
    4a94:	e656      	b.n	4744 <__aeabi_ddiv+0x19c>
    4a96:	2b00      	cmp	r3, #0
    4a98:	d100      	bne.n	4a9c <__aeabi_ddiv+0x4f4>
    4a9a:	e76f      	b.n	497c <__aeabi_ddiv+0x3d4>
    4a9c:	4446      	add	r6, r8
    4a9e:	1e4a      	subs	r2, r1, #1
    4aa0:	45b0      	cmp	r8, r6
    4aa2:	d929      	bls.n	4af8 <__aeabi_ddiv+0x550>
    4aa4:	0011      	movs	r1, r2
    4aa6:	4286      	cmp	r6, r0
    4aa8:	d000      	beq.n	4aac <__aeabi_ddiv+0x504>
    4aaa:	e765      	b.n	4978 <__aeabi_ddiv+0x3d0>
    4aac:	9a03      	ldr	r2, [sp, #12]
    4aae:	4293      	cmp	r3, r2
    4ab0:	d000      	beq.n	4ab4 <__aeabi_ddiv+0x50c>
    4ab2:	e761      	b.n	4978 <__aeabi_ddiv+0x3d0>
    4ab4:	e762      	b.n	497c <__aeabi_ddiv+0x3d4>
    4ab6:	2101      	movs	r1, #1
    4ab8:	4249      	negs	r1, r1
    4aba:	2001      	movs	r0, #1
    4abc:	1ac2      	subs	r2, r0, r3
    4abe:	2a38      	cmp	r2, #56	; 0x38
    4ac0:	dd21      	ble.n	4b06 <__aeabi_ddiv+0x55e>
    4ac2:	9b02      	ldr	r3, [sp, #8]
    4ac4:	4003      	ands	r3, r0
    4ac6:	469c      	mov	ip, r3
    4ac8:	e638      	b.n	473c <__aeabi_ddiv+0x194>
    4aca:	220f      	movs	r2, #15
    4acc:	400a      	ands	r2, r1
    4ace:	2a04      	cmp	r2, #4
    4ad0:	d100      	bne.n	4ad4 <__aeabi_ddiv+0x52c>
    4ad2:	e75b      	b.n	498c <__aeabi_ddiv+0x3e4>
    4ad4:	000a      	movs	r2, r1
    4ad6:	1d11      	adds	r1, r2, #4
    4ad8:	4291      	cmp	r1, r2
    4ada:	4192      	sbcs	r2, r2
    4adc:	4252      	negs	r2, r2
    4ade:	4493      	add	fp, r2
    4ae0:	e754      	b.n	498c <__aeabi_ddiv+0x3e4>
    4ae2:	4b47      	ldr	r3, [pc, #284]	; (4c00 <__aeabi_ddiv+0x658>)
    4ae4:	18e3      	adds	r3, r4, r3
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	dde5      	ble.n	4ab6 <__aeabi_ddiv+0x50e>
    4aea:	2201      	movs	r2, #1
    4aec:	4252      	negs	r2, r2
    4aee:	e7f2      	b.n	4ad6 <__aeabi_ddiv+0x52e>
    4af0:	001d      	movs	r5, r3
    4af2:	e6fa      	b.n	48ea <__aeabi_ddiv+0x342>
    4af4:	469a      	mov	sl, r3
    4af6:	e71c      	b.n	4932 <__aeabi_ddiv+0x38a>
    4af8:	42b0      	cmp	r0, r6
    4afa:	d839      	bhi.n	4b70 <__aeabi_ddiv+0x5c8>
    4afc:	d06e      	beq.n	4bdc <__aeabi_ddiv+0x634>
    4afe:	0011      	movs	r1, r2
    4b00:	e73a      	b.n	4978 <__aeabi_ddiv+0x3d0>
    4b02:	9302      	str	r3, [sp, #8]
    4b04:	e73a      	b.n	497c <__aeabi_ddiv+0x3d4>
    4b06:	2a1f      	cmp	r2, #31
    4b08:	dc3c      	bgt.n	4b84 <__aeabi_ddiv+0x5dc>
    4b0a:	2320      	movs	r3, #32
    4b0c:	1a9b      	subs	r3, r3, r2
    4b0e:	000c      	movs	r4, r1
    4b10:	4658      	mov	r0, fp
    4b12:	4099      	lsls	r1, r3
    4b14:	4098      	lsls	r0, r3
    4b16:	1e4b      	subs	r3, r1, #1
    4b18:	4199      	sbcs	r1, r3
    4b1a:	465b      	mov	r3, fp
    4b1c:	40d4      	lsrs	r4, r2
    4b1e:	40d3      	lsrs	r3, r2
    4b20:	4320      	orrs	r0, r4
    4b22:	4308      	orrs	r0, r1
    4b24:	001a      	movs	r2, r3
    4b26:	0743      	lsls	r3, r0, #29
    4b28:	d009      	beq.n	4b3e <__aeabi_ddiv+0x596>
    4b2a:	230f      	movs	r3, #15
    4b2c:	4003      	ands	r3, r0
    4b2e:	2b04      	cmp	r3, #4
    4b30:	d005      	beq.n	4b3e <__aeabi_ddiv+0x596>
    4b32:	0001      	movs	r1, r0
    4b34:	1d08      	adds	r0, r1, #4
    4b36:	4288      	cmp	r0, r1
    4b38:	419b      	sbcs	r3, r3
    4b3a:	425b      	negs	r3, r3
    4b3c:	18d2      	adds	r2, r2, r3
    4b3e:	0213      	lsls	r3, r2, #8
    4b40:	d53a      	bpl.n	4bb8 <__aeabi_ddiv+0x610>
    4b42:	2301      	movs	r3, #1
    4b44:	9a02      	ldr	r2, [sp, #8]
    4b46:	2401      	movs	r4, #1
    4b48:	401a      	ands	r2, r3
    4b4a:	2300      	movs	r3, #0
    4b4c:	4694      	mov	ip, r2
    4b4e:	4698      	mov	r8, r3
    4b50:	2200      	movs	r2, #0
    4b52:	e5f7      	b.n	4744 <__aeabi_ddiv+0x19c>
    4b54:	2102      	movs	r1, #2
    4b56:	4249      	negs	r1, r1
    4b58:	468c      	mov	ip, r1
    4b5a:	9d03      	ldr	r5, [sp, #12]
    4b5c:	44e3      	add	fp, ip
    4b5e:	46ac      	mov	ip, r5
    4b60:	44e2      	add	sl, ip
    4b62:	45aa      	cmp	sl, r5
    4b64:	41ad      	sbcs	r5, r5
    4b66:	426d      	negs	r5, r5
    4b68:	4445      	add	r5, r8
    4b6a:	18ed      	adds	r5, r5, r3
    4b6c:	1a2d      	subs	r5, r5, r0
    4b6e:	e696      	b.n	489e <__aeabi_ddiv+0x2f6>
    4b70:	1e8a      	subs	r2, r1, #2
    4b72:	9903      	ldr	r1, [sp, #12]
    4b74:	004d      	lsls	r5, r1, #1
    4b76:	428d      	cmp	r5, r1
    4b78:	4189      	sbcs	r1, r1
    4b7a:	4249      	negs	r1, r1
    4b7c:	4441      	add	r1, r8
    4b7e:	1876      	adds	r6, r6, r1
    4b80:	9503      	str	r5, [sp, #12]
    4b82:	e78f      	b.n	4aa4 <__aeabi_ddiv+0x4fc>
    4b84:	201f      	movs	r0, #31
    4b86:	4240      	negs	r0, r0
    4b88:	1ac3      	subs	r3, r0, r3
    4b8a:	4658      	mov	r0, fp
    4b8c:	40d8      	lsrs	r0, r3
    4b8e:	0003      	movs	r3, r0
    4b90:	2a20      	cmp	r2, #32
    4b92:	d028      	beq.n	4be6 <__aeabi_ddiv+0x63e>
    4b94:	2040      	movs	r0, #64	; 0x40
    4b96:	465d      	mov	r5, fp
    4b98:	1a82      	subs	r2, r0, r2
    4b9a:	4095      	lsls	r5, r2
    4b9c:	4329      	orrs	r1, r5
    4b9e:	1e4a      	subs	r2, r1, #1
    4ba0:	4191      	sbcs	r1, r2
    4ba2:	4319      	orrs	r1, r3
    4ba4:	2307      	movs	r3, #7
    4ba6:	2200      	movs	r2, #0
    4ba8:	400b      	ands	r3, r1
    4baa:	d009      	beq.n	4bc0 <__aeabi_ddiv+0x618>
    4bac:	230f      	movs	r3, #15
    4bae:	2200      	movs	r2, #0
    4bb0:	400b      	ands	r3, r1
    4bb2:	0008      	movs	r0, r1
    4bb4:	2b04      	cmp	r3, #4
    4bb6:	d1bd      	bne.n	4b34 <__aeabi_ddiv+0x58c>
    4bb8:	0001      	movs	r1, r0
    4bba:	0753      	lsls	r3, r2, #29
    4bbc:	0252      	lsls	r2, r2, #9
    4bbe:	0b12      	lsrs	r2, r2, #12
    4bc0:	08c9      	lsrs	r1, r1, #3
    4bc2:	4319      	orrs	r1, r3
    4bc4:	2301      	movs	r3, #1
    4bc6:	4688      	mov	r8, r1
    4bc8:	9902      	ldr	r1, [sp, #8]
    4bca:	2400      	movs	r4, #0
    4bcc:	4019      	ands	r1, r3
    4bce:	468c      	mov	ip, r1
    4bd0:	e5b8      	b.n	4744 <__aeabi_ddiv+0x19c>
    4bd2:	4552      	cmp	r2, sl
    4bd4:	d8be      	bhi.n	4b54 <__aeabi_ddiv+0x5ac>
    4bd6:	468b      	mov	fp, r1
    4bd8:	2500      	movs	r5, #0
    4bda:	e660      	b.n	489e <__aeabi_ddiv+0x2f6>
    4bdc:	9d03      	ldr	r5, [sp, #12]
    4bde:	429d      	cmp	r5, r3
    4be0:	d3c6      	bcc.n	4b70 <__aeabi_ddiv+0x5c8>
    4be2:	0011      	movs	r1, r2
    4be4:	e762      	b.n	4aac <__aeabi_ddiv+0x504>
    4be6:	2500      	movs	r5, #0
    4be8:	e7d8      	b.n	4b9c <__aeabi_ddiv+0x5f4>
    4bea:	2280      	movs	r2, #128	; 0x80
    4bec:	465b      	mov	r3, fp
    4bee:	0312      	lsls	r2, r2, #12
    4bf0:	431a      	orrs	r2, r3
    4bf2:	9b01      	ldr	r3, [sp, #4]
    4bf4:	0312      	lsls	r2, r2, #12
    4bf6:	0b12      	lsrs	r2, r2, #12
    4bf8:	469c      	mov	ip, r3
    4bfa:	4688      	mov	r8, r1
    4bfc:	4c03      	ldr	r4, [pc, #12]	; (4c0c <__aeabi_ddiv+0x664>)
    4bfe:	e5a1      	b.n	4744 <__aeabi_ddiv+0x19c>
    4c00:	000003ff 	.word	0x000003ff
    4c04:	feffffff 	.word	0xfeffffff
    4c08:	000007fe 	.word	0x000007fe
    4c0c:	000007ff 	.word	0x000007ff

00004c10 <__eqdf2>:
    4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c12:	464f      	mov	r7, r9
    4c14:	4646      	mov	r6, r8
    4c16:	46d6      	mov	lr, sl
    4c18:	005c      	lsls	r4, r3, #1
    4c1a:	b5c0      	push	{r6, r7, lr}
    4c1c:	031f      	lsls	r7, r3, #12
    4c1e:	0fdb      	lsrs	r3, r3, #31
    4c20:	469a      	mov	sl, r3
    4c22:	4b17      	ldr	r3, [pc, #92]	; (4c80 <__eqdf2+0x70>)
    4c24:	030e      	lsls	r6, r1, #12
    4c26:	004d      	lsls	r5, r1, #1
    4c28:	4684      	mov	ip, r0
    4c2a:	4680      	mov	r8, r0
    4c2c:	0b36      	lsrs	r6, r6, #12
    4c2e:	0d6d      	lsrs	r5, r5, #21
    4c30:	0fc9      	lsrs	r1, r1, #31
    4c32:	4691      	mov	r9, r2
    4c34:	0b3f      	lsrs	r7, r7, #12
    4c36:	0d64      	lsrs	r4, r4, #21
    4c38:	2001      	movs	r0, #1
    4c3a:	429d      	cmp	r5, r3
    4c3c:	d008      	beq.n	4c50 <__eqdf2+0x40>
    4c3e:	429c      	cmp	r4, r3
    4c40:	d001      	beq.n	4c46 <__eqdf2+0x36>
    4c42:	42a5      	cmp	r5, r4
    4c44:	d00b      	beq.n	4c5e <__eqdf2+0x4e>
    4c46:	bc1c      	pop	{r2, r3, r4}
    4c48:	4690      	mov	r8, r2
    4c4a:	4699      	mov	r9, r3
    4c4c:	46a2      	mov	sl, r4
    4c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c50:	4663      	mov	r3, ip
    4c52:	4333      	orrs	r3, r6
    4c54:	d1f7      	bne.n	4c46 <__eqdf2+0x36>
    4c56:	42ac      	cmp	r4, r5
    4c58:	d1f5      	bne.n	4c46 <__eqdf2+0x36>
    4c5a:	433a      	orrs	r2, r7
    4c5c:	d1f3      	bne.n	4c46 <__eqdf2+0x36>
    4c5e:	2001      	movs	r0, #1
    4c60:	42be      	cmp	r6, r7
    4c62:	d1f0      	bne.n	4c46 <__eqdf2+0x36>
    4c64:	45c8      	cmp	r8, r9
    4c66:	d1ee      	bne.n	4c46 <__eqdf2+0x36>
    4c68:	4551      	cmp	r1, sl
    4c6a:	d007      	beq.n	4c7c <__eqdf2+0x6c>
    4c6c:	2d00      	cmp	r5, #0
    4c6e:	d1ea      	bne.n	4c46 <__eqdf2+0x36>
    4c70:	4663      	mov	r3, ip
    4c72:	431e      	orrs	r6, r3
    4c74:	0030      	movs	r0, r6
    4c76:	1e46      	subs	r6, r0, #1
    4c78:	41b0      	sbcs	r0, r6
    4c7a:	e7e4      	b.n	4c46 <__eqdf2+0x36>
    4c7c:	2000      	movs	r0, #0
    4c7e:	e7e2      	b.n	4c46 <__eqdf2+0x36>
    4c80:	000007ff 	.word	0x000007ff

00004c84 <__gedf2>:
    4c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c86:	4645      	mov	r5, r8
    4c88:	46de      	mov	lr, fp
    4c8a:	4657      	mov	r7, sl
    4c8c:	464e      	mov	r6, r9
    4c8e:	b5e0      	push	{r5, r6, r7, lr}
    4c90:	031f      	lsls	r7, r3, #12
    4c92:	0b3d      	lsrs	r5, r7, #12
    4c94:	4f2c      	ldr	r7, [pc, #176]	; (4d48 <__gedf2+0xc4>)
    4c96:	030e      	lsls	r6, r1, #12
    4c98:	004c      	lsls	r4, r1, #1
    4c9a:	46ab      	mov	fp, r5
    4c9c:	005d      	lsls	r5, r3, #1
    4c9e:	4684      	mov	ip, r0
    4ca0:	0b36      	lsrs	r6, r6, #12
    4ca2:	0d64      	lsrs	r4, r4, #21
    4ca4:	0fc9      	lsrs	r1, r1, #31
    4ca6:	4690      	mov	r8, r2
    4ca8:	0d6d      	lsrs	r5, r5, #21
    4caa:	0fdb      	lsrs	r3, r3, #31
    4cac:	42bc      	cmp	r4, r7
    4cae:	d02a      	beq.n	4d06 <__gedf2+0x82>
    4cb0:	4f25      	ldr	r7, [pc, #148]	; (4d48 <__gedf2+0xc4>)
    4cb2:	42bd      	cmp	r5, r7
    4cb4:	d02d      	beq.n	4d12 <__gedf2+0x8e>
    4cb6:	2c00      	cmp	r4, #0
    4cb8:	d10f      	bne.n	4cda <__gedf2+0x56>
    4cba:	4330      	orrs	r0, r6
    4cbc:	0007      	movs	r7, r0
    4cbe:	4681      	mov	r9, r0
    4cc0:	4278      	negs	r0, r7
    4cc2:	4178      	adcs	r0, r7
    4cc4:	b2c0      	uxtb	r0, r0
    4cc6:	2d00      	cmp	r5, #0
    4cc8:	d117      	bne.n	4cfa <__gedf2+0x76>
    4cca:	465f      	mov	r7, fp
    4ccc:	433a      	orrs	r2, r7
    4cce:	d114      	bne.n	4cfa <__gedf2+0x76>
    4cd0:	464b      	mov	r3, r9
    4cd2:	2000      	movs	r0, #0
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d00a      	beq.n	4cee <__gedf2+0x6a>
    4cd8:	e006      	b.n	4ce8 <__gedf2+0x64>
    4cda:	2d00      	cmp	r5, #0
    4cdc:	d102      	bne.n	4ce4 <__gedf2+0x60>
    4cde:	4658      	mov	r0, fp
    4ce0:	4302      	orrs	r2, r0
    4ce2:	d001      	beq.n	4ce8 <__gedf2+0x64>
    4ce4:	4299      	cmp	r1, r3
    4ce6:	d018      	beq.n	4d1a <__gedf2+0x96>
    4ce8:	4248      	negs	r0, r1
    4cea:	2101      	movs	r1, #1
    4cec:	4308      	orrs	r0, r1
    4cee:	bc3c      	pop	{r2, r3, r4, r5}
    4cf0:	4690      	mov	r8, r2
    4cf2:	4699      	mov	r9, r3
    4cf4:	46a2      	mov	sl, r4
    4cf6:	46ab      	mov	fp, r5
    4cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cfa:	2800      	cmp	r0, #0
    4cfc:	d0f2      	beq.n	4ce4 <__gedf2+0x60>
    4cfe:	2001      	movs	r0, #1
    4d00:	3b01      	subs	r3, #1
    4d02:	4318      	orrs	r0, r3
    4d04:	e7f3      	b.n	4cee <__gedf2+0x6a>
    4d06:	0037      	movs	r7, r6
    4d08:	4307      	orrs	r7, r0
    4d0a:	d0d1      	beq.n	4cb0 <__gedf2+0x2c>
    4d0c:	2002      	movs	r0, #2
    4d0e:	4240      	negs	r0, r0
    4d10:	e7ed      	b.n	4cee <__gedf2+0x6a>
    4d12:	465f      	mov	r7, fp
    4d14:	4317      	orrs	r7, r2
    4d16:	d0ce      	beq.n	4cb6 <__gedf2+0x32>
    4d18:	e7f8      	b.n	4d0c <__gedf2+0x88>
    4d1a:	42ac      	cmp	r4, r5
    4d1c:	dce4      	bgt.n	4ce8 <__gedf2+0x64>
    4d1e:	da03      	bge.n	4d28 <__gedf2+0xa4>
    4d20:	1e48      	subs	r0, r1, #1
    4d22:	2101      	movs	r1, #1
    4d24:	4308      	orrs	r0, r1
    4d26:	e7e2      	b.n	4cee <__gedf2+0x6a>
    4d28:	455e      	cmp	r6, fp
    4d2a:	d8dd      	bhi.n	4ce8 <__gedf2+0x64>
    4d2c:	d006      	beq.n	4d3c <__gedf2+0xb8>
    4d2e:	2000      	movs	r0, #0
    4d30:	455e      	cmp	r6, fp
    4d32:	d2dc      	bcs.n	4cee <__gedf2+0x6a>
    4d34:	2301      	movs	r3, #1
    4d36:	1e48      	subs	r0, r1, #1
    4d38:	4318      	orrs	r0, r3
    4d3a:	e7d8      	b.n	4cee <__gedf2+0x6a>
    4d3c:	45c4      	cmp	ip, r8
    4d3e:	d8d3      	bhi.n	4ce8 <__gedf2+0x64>
    4d40:	2000      	movs	r0, #0
    4d42:	45c4      	cmp	ip, r8
    4d44:	d3f6      	bcc.n	4d34 <__gedf2+0xb0>
    4d46:	e7d2      	b.n	4cee <__gedf2+0x6a>
    4d48:	000007ff 	.word	0x000007ff

00004d4c <__ledf2>:
    4d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d4e:	464e      	mov	r6, r9
    4d50:	4645      	mov	r5, r8
    4d52:	46de      	mov	lr, fp
    4d54:	4657      	mov	r7, sl
    4d56:	005c      	lsls	r4, r3, #1
    4d58:	b5e0      	push	{r5, r6, r7, lr}
    4d5a:	031f      	lsls	r7, r3, #12
    4d5c:	0fdb      	lsrs	r3, r3, #31
    4d5e:	4699      	mov	r9, r3
    4d60:	4b2a      	ldr	r3, [pc, #168]	; (4e0c <__ledf2+0xc0>)
    4d62:	030e      	lsls	r6, r1, #12
    4d64:	004d      	lsls	r5, r1, #1
    4d66:	0fc9      	lsrs	r1, r1, #31
    4d68:	4684      	mov	ip, r0
    4d6a:	0b36      	lsrs	r6, r6, #12
    4d6c:	0d6d      	lsrs	r5, r5, #21
    4d6e:	468b      	mov	fp, r1
    4d70:	4690      	mov	r8, r2
    4d72:	0b3f      	lsrs	r7, r7, #12
    4d74:	0d64      	lsrs	r4, r4, #21
    4d76:	429d      	cmp	r5, r3
    4d78:	d020      	beq.n	4dbc <__ledf2+0x70>
    4d7a:	4b24      	ldr	r3, [pc, #144]	; (4e0c <__ledf2+0xc0>)
    4d7c:	429c      	cmp	r4, r3
    4d7e:	d022      	beq.n	4dc6 <__ledf2+0x7a>
    4d80:	2d00      	cmp	r5, #0
    4d82:	d112      	bne.n	4daa <__ledf2+0x5e>
    4d84:	4330      	orrs	r0, r6
    4d86:	4243      	negs	r3, r0
    4d88:	4143      	adcs	r3, r0
    4d8a:	b2db      	uxtb	r3, r3
    4d8c:	2c00      	cmp	r4, #0
    4d8e:	d01f      	beq.n	4dd0 <__ledf2+0x84>
    4d90:	2b00      	cmp	r3, #0
    4d92:	d00c      	beq.n	4dae <__ledf2+0x62>
    4d94:	464b      	mov	r3, r9
    4d96:	2001      	movs	r0, #1
    4d98:	3b01      	subs	r3, #1
    4d9a:	4303      	orrs	r3, r0
    4d9c:	0018      	movs	r0, r3
    4d9e:	bc3c      	pop	{r2, r3, r4, r5}
    4da0:	4690      	mov	r8, r2
    4da2:	4699      	mov	r9, r3
    4da4:	46a2      	mov	sl, r4
    4da6:	46ab      	mov	fp, r5
    4da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4daa:	2c00      	cmp	r4, #0
    4dac:	d016      	beq.n	4ddc <__ledf2+0x90>
    4dae:	45cb      	cmp	fp, r9
    4db0:	d017      	beq.n	4de2 <__ledf2+0x96>
    4db2:	465b      	mov	r3, fp
    4db4:	4259      	negs	r1, r3
    4db6:	2301      	movs	r3, #1
    4db8:	430b      	orrs	r3, r1
    4dba:	e7ef      	b.n	4d9c <__ledf2+0x50>
    4dbc:	0031      	movs	r1, r6
    4dbe:	2302      	movs	r3, #2
    4dc0:	4301      	orrs	r1, r0
    4dc2:	d1eb      	bne.n	4d9c <__ledf2+0x50>
    4dc4:	e7d9      	b.n	4d7a <__ledf2+0x2e>
    4dc6:	0039      	movs	r1, r7
    4dc8:	2302      	movs	r3, #2
    4dca:	4311      	orrs	r1, r2
    4dcc:	d1e6      	bne.n	4d9c <__ledf2+0x50>
    4dce:	e7d7      	b.n	4d80 <__ledf2+0x34>
    4dd0:	433a      	orrs	r2, r7
    4dd2:	d1dd      	bne.n	4d90 <__ledf2+0x44>
    4dd4:	2300      	movs	r3, #0
    4dd6:	2800      	cmp	r0, #0
    4dd8:	d0e0      	beq.n	4d9c <__ledf2+0x50>
    4dda:	e7ea      	b.n	4db2 <__ledf2+0x66>
    4ddc:	433a      	orrs	r2, r7
    4dde:	d1e6      	bne.n	4dae <__ledf2+0x62>
    4de0:	e7e7      	b.n	4db2 <__ledf2+0x66>
    4de2:	42a5      	cmp	r5, r4
    4de4:	dce5      	bgt.n	4db2 <__ledf2+0x66>
    4de6:	db05      	blt.n	4df4 <__ledf2+0xa8>
    4de8:	42be      	cmp	r6, r7
    4dea:	d8e2      	bhi.n	4db2 <__ledf2+0x66>
    4dec:	d007      	beq.n	4dfe <__ledf2+0xb2>
    4dee:	2300      	movs	r3, #0
    4df0:	42be      	cmp	r6, r7
    4df2:	d2d3      	bcs.n	4d9c <__ledf2+0x50>
    4df4:	4659      	mov	r1, fp
    4df6:	2301      	movs	r3, #1
    4df8:	3901      	subs	r1, #1
    4dfa:	430b      	orrs	r3, r1
    4dfc:	e7ce      	b.n	4d9c <__ledf2+0x50>
    4dfe:	45c4      	cmp	ip, r8
    4e00:	d8d7      	bhi.n	4db2 <__ledf2+0x66>
    4e02:	2300      	movs	r3, #0
    4e04:	45c4      	cmp	ip, r8
    4e06:	d3f5      	bcc.n	4df4 <__ledf2+0xa8>
    4e08:	e7c8      	b.n	4d9c <__ledf2+0x50>
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	000007ff 	.word	0x000007ff

00004e10 <__aeabi_dmul>:
    4e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e12:	4657      	mov	r7, sl
    4e14:	4645      	mov	r5, r8
    4e16:	46de      	mov	lr, fp
    4e18:	464e      	mov	r6, r9
    4e1a:	b5e0      	push	{r5, r6, r7, lr}
    4e1c:	030c      	lsls	r4, r1, #12
    4e1e:	4698      	mov	r8, r3
    4e20:	004e      	lsls	r6, r1, #1
    4e22:	0b23      	lsrs	r3, r4, #12
    4e24:	b087      	sub	sp, #28
    4e26:	0007      	movs	r7, r0
    4e28:	4692      	mov	sl, r2
    4e2a:	469b      	mov	fp, r3
    4e2c:	0d76      	lsrs	r6, r6, #21
    4e2e:	0fcd      	lsrs	r5, r1, #31
    4e30:	2e00      	cmp	r6, #0
    4e32:	d06b      	beq.n	4f0c <__aeabi_dmul+0xfc>
    4e34:	4b6d      	ldr	r3, [pc, #436]	; (4fec <__aeabi_dmul+0x1dc>)
    4e36:	429e      	cmp	r6, r3
    4e38:	d035      	beq.n	4ea6 <__aeabi_dmul+0x96>
    4e3a:	2480      	movs	r4, #128	; 0x80
    4e3c:	465b      	mov	r3, fp
    4e3e:	0f42      	lsrs	r2, r0, #29
    4e40:	0424      	lsls	r4, r4, #16
    4e42:	00db      	lsls	r3, r3, #3
    4e44:	4314      	orrs	r4, r2
    4e46:	431c      	orrs	r4, r3
    4e48:	00c3      	lsls	r3, r0, #3
    4e4a:	4699      	mov	r9, r3
    4e4c:	4b68      	ldr	r3, [pc, #416]	; (4ff0 <__aeabi_dmul+0x1e0>)
    4e4e:	46a3      	mov	fp, r4
    4e50:	469c      	mov	ip, r3
    4e52:	2300      	movs	r3, #0
    4e54:	2700      	movs	r7, #0
    4e56:	4466      	add	r6, ip
    4e58:	9302      	str	r3, [sp, #8]
    4e5a:	4643      	mov	r3, r8
    4e5c:	031c      	lsls	r4, r3, #12
    4e5e:	005a      	lsls	r2, r3, #1
    4e60:	0fdb      	lsrs	r3, r3, #31
    4e62:	4650      	mov	r0, sl
    4e64:	0b24      	lsrs	r4, r4, #12
    4e66:	0d52      	lsrs	r2, r2, #21
    4e68:	4698      	mov	r8, r3
    4e6a:	d100      	bne.n	4e6e <__aeabi_dmul+0x5e>
    4e6c:	e076      	b.n	4f5c <__aeabi_dmul+0x14c>
    4e6e:	4b5f      	ldr	r3, [pc, #380]	; (4fec <__aeabi_dmul+0x1dc>)
    4e70:	429a      	cmp	r2, r3
    4e72:	d06d      	beq.n	4f50 <__aeabi_dmul+0x140>
    4e74:	2380      	movs	r3, #128	; 0x80
    4e76:	0f41      	lsrs	r1, r0, #29
    4e78:	041b      	lsls	r3, r3, #16
    4e7a:	430b      	orrs	r3, r1
    4e7c:	495c      	ldr	r1, [pc, #368]	; (4ff0 <__aeabi_dmul+0x1e0>)
    4e7e:	00e4      	lsls	r4, r4, #3
    4e80:	468c      	mov	ip, r1
    4e82:	431c      	orrs	r4, r3
    4e84:	00c3      	lsls	r3, r0, #3
    4e86:	2000      	movs	r0, #0
    4e88:	4462      	add	r2, ip
    4e8a:	4641      	mov	r1, r8
    4e8c:	18b6      	adds	r6, r6, r2
    4e8e:	4069      	eors	r1, r5
    4e90:	1c72      	adds	r2, r6, #1
    4e92:	9101      	str	r1, [sp, #4]
    4e94:	4694      	mov	ip, r2
    4e96:	4307      	orrs	r7, r0
    4e98:	2f0f      	cmp	r7, #15
    4e9a:	d900      	bls.n	4e9e <__aeabi_dmul+0x8e>
    4e9c:	e0b0      	b.n	5000 <__aeabi_dmul+0x1f0>
    4e9e:	4a55      	ldr	r2, [pc, #340]	; (4ff4 <__aeabi_dmul+0x1e4>)
    4ea0:	00bf      	lsls	r7, r7, #2
    4ea2:	59d2      	ldr	r2, [r2, r7]
    4ea4:	4697      	mov	pc, r2
    4ea6:	465b      	mov	r3, fp
    4ea8:	4303      	orrs	r3, r0
    4eaa:	4699      	mov	r9, r3
    4eac:	d000      	beq.n	4eb0 <__aeabi_dmul+0xa0>
    4eae:	e087      	b.n	4fc0 <__aeabi_dmul+0x1b0>
    4eb0:	2300      	movs	r3, #0
    4eb2:	469b      	mov	fp, r3
    4eb4:	3302      	adds	r3, #2
    4eb6:	2708      	movs	r7, #8
    4eb8:	9302      	str	r3, [sp, #8]
    4eba:	e7ce      	b.n	4e5a <__aeabi_dmul+0x4a>
    4ebc:	4642      	mov	r2, r8
    4ebe:	9201      	str	r2, [sp, #4]
    4ec0:	2802      	cmp	r0, #2
    4ec2:	d067      	beq.n	4f94 <__aeabi_dmul+0x184>
    4ec4:	2803      	cmp	r0, #3
    4ec6:	d100      	bne.n	4eca <__aeabi_dmul+0xba>
    4ec8:	e20e      	b.n	52e8 <__aeabi_dmul+0x4d8>
    4eca:	2801      	cmp	r0, #1
    4ecc:	d000      	beq.n	4ed0 <__aeabi_dmul+0xc0>
    4ece:	e162      	b.n	5196 <__aeabi_dmul+0x386>
    4ed0:	2300      	movs	r3, #0
    4ed2:	2400      	movs	r4, #0
    4ed4:	2200      	movs	r2, #0
    4ed6:	4699      	mov	r9, r3
    4ed8:	9901      	ldr	r1, [sp, #4]
    4eda:	4001      	ands	r1, r0
    4edc:	b2cd      	uxtb	r5, r1
    4ede:	2100      	movs	r1, #0
    4ee0:	0312      	lsls	r2, r2, #12
    4ee2:	0d0b      	lsrs	r3, r1, #20
    4ee4:	0b12      	lsrs	r2, r2, #12
    4ee6:	051b      	lsls	r3, r3, #20
    4ee8:	4313      	orrs	r3, r2
    4eea:	4a43      	ldr	r2, [pc, #268]	; (4ff8 <__aeabi_dmul+0x1e8>)
    4eec:	0524      	lsls	r4, r4, #20
    4eee:	4013      	ands	r3, r2
    4ef0:	431c      	orrs	r4, r3
    4ef2:	0064      	lsls	r4, r4, #1
    4ef4:	07ed      	lsls	r5, r5, #31
    4ef6:	0864      	lsrs	r4, r4, #1
    4ef8:	432c      	orrs	r4, r5
    4efa:	4648      	mov	r0, r9
    4efc:	0021      	movs	r1, r4
    4efe:	b007      	add	sp, #28
    4f00:	bc3c      	pop	{r2, r3, r4, r5}
    4f02:	4690      	mov	r8, r2
    4f04:	4699      	mov	r9, r3
    4f06:	46a2      	mov	sl, r4
    4f08:	46ab      	mov	fp, r5
    4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f0c:	4303      	orrs	r3, r0
    4f0e:	4699      	mov	r9, r3
    4f10:	d04f      	beq.n	4fb2 <__aeabi_dmul+0x1a2>
    4f12:	465b      	mov	r3, fp
    4f14:	2b00      	cmp	r3, #0
    4f16:	d100      	bne.n	4f1a <__aeabi_dmul+0x10a>
    4f18:	e189      	b.n	522e <__aeabi_dmul+0x41e>
    4f1a:	4658      	mov	r0, fp
    4f1c:	f000 fdec 	bl	5af8 <__clzsi2>
    4f20:	0003      	movs	r3, r0
    4f22:	3b0b      	subs	r3, #11
    4f24:	2b1c      	cmp	r3, #28
    4f26:	dd00      	ble.n	4f2a <__aeabi_dmul+0x11a>
    4f28:	e17a      	b.n	5220 <__aeabi_dmul+0x410>
    4f2a:	221d      	movs	r2, #29
    4f2c:	1ad3      	subs	r3, r2, r3
    4f2e:	003a      	movs	r2, r7
    4f30:	0001      	movs	r1, r0
    4f32:	465c      	mov	r4, fp
    4f34:	40da      	lsrs	r2, r3
    4f36:	3908      	subs	r1, #8
    4f38:	408c      	lsls	r4, r1
    4f3a:	0013      	movs	r3, r2
    4f3c:	408f      	lsls	r7, r1
    4f3e:	4323      	orrs	r3, r4
    4f40:	469b      	mov	fp, r3
    4f42:	46b9      	mov	r9, r7
    4f44:	2300      	movs	r3, #0
    4f46:	4e2d      	ldr	r6, [pc, #180]	; (4ffc <__aeabi_dmul+0x1ec>)
    4f48:	2700      	movs	r7, #0
    4f4a:	1a36      	subs	r6, r6, r0
    4f4c:	9302      	str	r3, [sp, #8]
    4f4e:	e784      	b.n	4e5a <__aeabi_dmul+0x4a>
    4f50:	4653      	mov	r3, sl
    4f52:	4323      	orrs	r3, r4
    4f54:	d12a      	bne.n	4fac <__aeabi_dmul+0x19c>
    4f56:	2400      	movs	r4, #0
    4f58:	2002      	movs	r0, #2
    4f5a:	e796      	b.n	4e8a <__aeabi_dmul+0x7a>
    4f5c:	4653      	mov	r3, sl
    4f5e:	4323      	orrs	r3, r4
    4f60:	d020      	beq.n	4fa4 <__aeabi_dmul+0x194>
    4f62:	2c00      	cmp	r4, #0
    4f64:	d100      	bne.n	4f68 <__aeabi_dmul+0x158>
    4f66:	e157      	b.n	5218 <__aeabi_dmul+0x408>
    4f68:	0020      	movs	r0, r4
    4f6a:	f000 fdc5 	bl	5af8 <__clzsi2>
    4f6e:	0003      	movs	r3, r0
    4f70:	3b0b      	subs	r3, #11
    4f72:	2b1c      	cmp	r3, #28
    4f74:	dd00      	ble.n	4f78 <__aeabi_dmul+0x168>
    4f76:	e149      	b.n	520c <__aeabi_dmul+0x3fc>
    4f78:	211d      	movs	r1, #29
    4f7a:	1acb      	subs	r3, r1, r3
    4f7c:	4651      	mov	r1, sl
    4f7e:	0002      	movs	r2, r0
    4f80:	40d9      	lsrs	r1, r3
    4f82:	4653      	mov	r3, sl
    4f84:	3a08      	subs	r2, #8
    4f86:	4094      	lsls	r4, r2
    4f88:	4093      	lsls	r3, r2
    4f8a:	430c      	orrs	r4, r1
    4f8c:	4a1b      	ldr	r2, [pc, #108]	; (4ffc <__aeabi_dmul+0x1ec>)
    4f8e:	1a12      	subs	r2, r2, r0
    4f90:	2000      	movs	r0, #0
    4f92:	e77a      	b.n	4e8a <__aeabi_dmul+0x7a>
    4f94:	2501      	movs	r5, #1
    4f96:	9b01      	ldr	r3, [sp, #4]
    4f98:	4c14      	ldr	r4, [pc, #80]	; (4fec <__aeabi_dmul+0x1dc>)
    4f9a:	401d      	ands	r5, r3
    4f9c:	2300      	movs	r3, #0
    4f9e:	2200      	movs	r2, #0
    4fa0:	4699      	mov	r9, r3
    4fa2:	e79c      	b.n	4ede <__aeabi_dmul+0xce>
    4fa4:	2400      	movs	r4, #0
    4fa6:	2200      	movs	r2, #0
    4fa8:	2001      	movs	r0, #1
    4faa:	e76e      	b.n	4e8a <__aeabi_dmul+0x7a>
    4fac:	4653      	mov	r3, sl
    4fae:	2003      	movs	r0, #3
    4fb0:	e76b      	b.n	4e8a <__aeabi_dmul+0x7a>
    4fb2:	2300      	movs	r3, #0
    4fb4:	469b      	mov	fp, r3
    4fb6:	3301      	adds	r3, #1
    4fb8:	2704      	movs	r7, #4
    4fba:	2600      	movs	r6, #0
    4fbc:	9302      	str	r3, [sp, #8]
    4fbe:	e74c      	b.n	4e5a <__aeabi_dmul+0x4a>
    4fc0:	2303      	movs	r3, #3
    4fc2:	4681      	mov	r9, r0
    4fc4:	270c      	movs	r7, #12
    4fc6:	9302      	str	r3, [sp, #8]
    4fc8:	e747      	b.n	4e5a <__aeabi_dmul+0x4a>
    4fca:	2280      	movs	r2, #128	; 0x80
    4fcc:	2300      	movs	r3, #0
    4fce:	2500      	movs	r5, #0
    4fd0:	0312      	lsls	r2, r2, #12
    4fd2:	4699      	mov	r9, r3
    4fd4:	4c05      	ldr	r4, [pc, #20]	; (4fec <__aeabi_dmul+0x1dc>)
    4fd6:	e782      	b.n	4ede <__aeabi_dmul+0xce>
    4fd8:	465c      	mov	r4, fp
    4fda:	464b      	mov	r3, r9
    4fdc:	9802      	ldr	r0, [sp, #8]
    4fde:	e76f      	b.n	4ec0 <__aeabi_dmul+0xb0>
    4fe0:	465c      	mov	r4, fp
    4fe2:	464b      	mov	r3, r9
    4fe4:	9501      	str	r5, [sp, #4]
    4fe6:	9802      	ldr	r0, [sp, #8]
    4fe8:	e76a      	b.n	4ec0 <__aeabi_dmul+0xb0>
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	000007ff 	.word	0x000007ff
    4ff0:	fffffc01 	.word	0xfffffc01
    4ff4:	000069dc 	.word	0x000069dc
    4ff8:	800fffff 	.word	0x800fffff
    4ffc:	fffffc0d 	.word	0xfffffc0d
    5000:	464a      	mov	r2, r9
    5002:	4649      	mov	r1, r9
    5004:	0c17      	lsrs	r7, r2, #16
    5006:	0c1a      	lsrs	r2, r3, #16
    5008:	041b      	lsls	r3, r3, #16
    500a:	0c1b      	lsrs	r3, r3, #16
    500c:	0408      	lsls	r0, r1, #16
    500e:	0019      	movs	r1, r3
    5010:	0c00      	lsrs	r0, r0, #16
    5012:	4341      	muls	r1, r0
    5014:	0015      	movs	r5, r2
    5016:	4688      	mov	r8, r1
    5018:	0019      	movs	r1, r3
    501a:	437d      	muls	r5, r7
    501c:	4379      	muls	r1, r7
    501e:	9503      	str	r5, [sp, #12]
    5020:	4689      	mov	r9, r1
    5022:	0029      	movs	r1, r5
    5024:	0015      	movs	r5, r2
    5026:	4345      	muls	r5, r0
    5028:	444d      	add	r5, r9
    502a:	9502      	str	r5, [sp, #8]
    502c:	4645      	mov	r5, r8
    502e:	0c2d      	lsrs	r5, r5, #16
    5030:	46aa      	mov	sl, r5
    5032:	9d02      	ldr	r5, [sp, #8]
    5034:	4455      	add	r5, sl
    5036:	45a9      	cmp	r9, r5
    5038:	d906      	bls.n	5048 <__aeabi_dmul+0x238>
    503a:	468a      	mov	sl, r1
    503c:	2180      	movs	r1, #128	; 0x80
    503e:	0249      	lsls	r1, r1, #9
    5040:	4689      	mov	r9, r1
    5042:	44ca      	add	sl, r9
    5044:	4651      	mov	r1, sl
    5046:	9103      	str	r1, [sp, #12]
    5048:	0c29      	lsrs	r1, r5, #16
    504a:	9104      	str	r1, [sp, #16]
    504c:	4641      	mov	r1, r8
    504e:	0409      	lsls	r1, r1, #16
    5050:	042d      	lsls	r5, r5, #16
    5052:	0c09      	lsrs	r1, r1, #16
    5054:	4688      	mov	r8, r1
    5056:	0029      	movs	r1, r5
    5058:	0c25      	lsrs	r5, r4, #16
    505a:	0424      	lsls	r4, r4, #16
    505c:	4441      	add	r1, r8
    505e:	0c24      	lsrs	r4, r4, #16
    5060:	9105      	str	r1, [sp, #20]
    5062:	0021      	movs	r1, r4
    5064:	4341      	muls	r1, r0
    5066:	4688      	mov	r8, r1
    5068:	0021      	movs	r1, r4
    506a:	4379      	muls	r1, r7
    506c:	468a      	mov	sl, r1
    506e:	4368      	muls	r0, r5
    5070:	4641      	mov	r1, r8
    5072:	4450      	add	r0, sl
    5074:	4681      	mov	r9, r0
    5076:	0c08      	lsrs	r0, r1, #16
    5078:	4448      	add	r0, r9
    507a:	436f      	muls	r7, r5
    507c:	4582      	cmp	sl, r0
    507e:	d903      	bls.n	5088 <__aeabi_dmul+0x278>
    5080:	2180      	movs	r1, #128	; 0x80
    5082:	0249      	lsls	r1, r1, #9
    5084:	4689      	mov	r9, r1
    5086:	444f      	add	r7, r9
    5088:	0c01      	lsrs	r1, r0, #16
    508a:	4689      	mov	r9, r1
    508c:	0039      	movs	r1, r7
    508e:	4449      	add	r1, r9
    5090:	9102      	str	r1, [sp, #8]
    5092:	4641      	mov	r1, r8
    5094:	040f      	lsls	r7, r1, #16
    5096:	9904      	ldr	r1, [sp, #16]
    5098:	0c3f      	lsrs	r7, r7, #16
    509a:	4688      	mov	r8, r1
    509c:	0400      	lsls	r0, r0, #16
    509e:	19c0      	adds	r0, r0, r7
    50a0:	4480      	add	r8, r0
    50a2:	4641      	mov	r1, r8
    50a4:	9104      	str	r1, [sp, #16]
    50a6:	4659      	mov	r1, fp
    50a8:	0c0f      	lsrs	r7, r1, #16
    50aa:	0409      	lsls	r1, r1, #16
    50ac:	0c09      	lsrs	r1, r1, #16
    50ae:	4688      	mov	r8, r1
    50b0:	4359      	muls	r1, r3
    50b2:	468a      	mov	sl, r1
    50b4:	0039      	movs	r1, r7
    50b6:	4351      	muls	r1, r2
    50b8:	4689      	mov	r9, r1
    50ba:	4641      	mov	r1, r8
    50bc:	434a      	muls	r2, r1
    50be:	4651      	mov	r1, sl
    50c0:	0c09      	lsrs	r1, r1, #16
    50c2:	468b      	mov	fp, r1
    50c4:	437b      	muls	r3, r7
    50c6:	18d2      	adds	r2, r2, r3
    50c8:	445a      	add	r2, fp
    50ca:	4293      	cmp	r3, r2
    50cc:	d903      	bls.n	50d6 <__aeabi_dmul+0x2c6>
    50ce:	2380      	movs	r3, #128	; 0x80
    50d0:	025b      	lsls	r3, r3, #9
    50d2:	469b      	mov	fp, r3
    50d4:	44d9      	add	r9, fp
    50d6:	4651      	mov	r1, sl
    50d8:	0409      	lsls	r1, r1, #16
    50da:	0c09      	lsrs	r1, r1, #16
    50dc:	468a      	mov	sl, r1
    50de:	4641      	mov	r1, r8
    50e0:	4361      	muls	r1, r4
    50e2:	437c      	muls	r4, r7
    50e4:	0c13      	lsrs	r3, r2, #16
    50e6:	0412      	lsls	r2, r2, #16
    50e8:	444b      	add	r3, r9
    50ea:	4452      	add	r2, sl
    50ec:	46a1      	mov	r9, r4
    50ee:	468a      	mov	sl, r1
    50f0:	003c      	movs	r4, r7
    50f2:	4641      	mov	r1, r8
    50f4:	436c      	muls	r4, r5
    50f6:	434d      	muls	r5, r1
    50f8:	4651      	mov	r1, sl
    50fa:	444d      	add	r5, r9
    50fc:	0c0f      	lsrs	r7, r1, #16
    50fe:	197d      	adds	r5, r7, r5
    5100:	45a9      	cmp	r9, r5
    5102:	d903      	bls.n	510c <__aeabi_dmul+0x2fc>
    5104:	2180      	movs	r1, #128	; 0x80
    5106:	0249      	lsls	r1, r1, #9
    5108:	4688      	mov	r8, r1
    510a:	4444      	add	r4, r8
    510c:	9f04      	ldr	r7, [sp, #16]
    510e:	9903      	ldr	r1, [sp, #12]
    5110:	46b8      	mov	r8, r7
    5112:	4441      	add	r1, r8
    5114:	468b      	mov	fp, r1
    5116:	4583      	cmp	fp, r0
    5118:	4180      	sbcs	r0, r0
    511a:	4241      	negs	r1, r0
    511c:	4688      	mov	r8, r1
    511e:	4651      	mov	r1, sl
    5120:	0408      	lsls	r0, r1, #16
    5122:	042f      	lsls	r7, r5, #16
    5124:	0c00      	lsrs	r0, r0, #16
    5126:	183f      	adds	r7, r7, r0
    5128:	4658      	mov	r0, fp
    512a:	9902      	ldr	r1, [sp, #8]
    512c:	1810      	adds	r0, r2, r0
    512e:	4689      	mov	r9, r1
    5130:	4290      	cmp	r0, r2
    5132:	4192      	sbcs	r2, r2
    5134:	444f      	add	r7, r9
    5136:	46ba      	mov	sl, r7
    5138:	4252      	negs	r2, r2
    513a:	4699      	mov	r9, r3
    513c:	4693      	mov	fp, r2
    513e:	44c2      	add	sl, r8
    5140:	44d1      	add	r9, sl
    5142:	44cb      	add	fp, r9
    5144:	428f      	cmp	r7, r1
    5146:	41bf      	sbcs	r7, r7
    5148:	45c2      	cmp	sl, r8
    514a:	4189      	sbcs	r1, r1
    514c:	4599      	cmp	r9, r3
    514e:	419b      	sbcs	r3, r3
    5150:	4593      	cmp	fp, r2
    5152:	4192      	sbcs	r2, r2
    5154:	427f      	negs	r7, r7
    5156:	4249      	negs	r1, r1
    5158:	0c2d      	lsrs	r5, r5, #16
    515a:	4252      	negs	r2, r2
    515c:	430f      	orrs	r7, r1
    515e:	425b      	negs	r3, r3
    5160:	4313      	orrs	r3, r2
    5162:	197f      	adds	r7, r7, r5
    5164:	18ff      	adds	r7, r7, r3
    5166:	465b      	mov	r3, fp
    5168:	193c      	adds	r4, r7, r4
    516a:	0ddb      	lsrs	r3, r3, #23
    516c:	9a05      	ldr	r2, [sp, #20]
    516e:	0264      	lsls	r4, r4, #9
    5170:	431c      	orrs	r4, r3
    5172:	0243      	lsls	r3, r0, #9
    5174:	4313      	orrs	r3, r2
    5176:	1e5d      	subs	r5, r3, #1
    5178:	41ab      	sbcs	r3, r5
    517a:	465a      	mov	r2, fp
    517c:	0dc0      	lsrs	r0, r0, #23
    517e:	4303      	orrs	r3, r0
    5180:	0252      	lsls	r2, r2, #9
    5182:	4313      	orrs	r3, r2
    5184:	01e2      	lsls	r2, r4, #7
    5186:	d556      	bpl.n	5236 <__aeabi_dmul+0x426>
    5188:	2001      	movs	r0, #1
    518a:	085a      	lsrs	r2, r3, #1
    518c:	4003      	ands	r3, r0
    518e:	4313      	orrs	r3, r2
    5190:	07e2      	lsls	r2, r4, #31
    5192:	4313      	orrs	r3, r2
    5194:	0864      	lsrs	r4, r4, #1
    5196:	485a      	ldr	r0, [pc, #360]	; (5300 <__aeabi_dmul+0x4f0>)
    5198:	4460      	add	r0, ip
    519a:	2800      	cmp	r0, #0
    519c:	dd4d      	ble.n	523a <__aeabi_dmul+0x42a>
    519e:	075a      	lsls	r2, r3, #29
    51a0:	d009      	beq.n	51b6 <__aeabi_dmul+0x3a6>
    51a2:	220f      	movs	r2, #15
    51a4:	401a      	ands	r2, r3
    51a6:	2a04      	cmp	r2, #4
    51a8:	d005      	beq.n	51b6 <__aeabi_dmul+0x3a6>
    51aa:	1d1a      	adds	r2, r3, #4
    51ac:	429a      	cmp	r2, r3
    51ae:	419b      	sbcs	r3, r3
    51b0:	425b      	negs	r3, r3
    51b2:	18e4      	adds	r4, r4, r3
    51b4:	0013      	movs	r3, r2
    51b6:	01e2      	lsls	r2, r4, #7
    51b8:	d504      	bpl.n	51c4 <__aeabi_dmul+0x3b4>
    51ba:	2080      	movs	r0, #128	; 0x80
    51bc:	4a51      	ldr	r2, [pc, #324]	; (5304 <__aeabi_dmul+0x4f4>)
    51be:	00c0      	lsls	r0, r0, #3
    51c0:	4014      	ands	r4, r2
    51c2:	4460      	add	r0, ip
    51c4:	4a50      	ldr	r2, [pc, #320]	; (5308 <__aeabi_dmul+0x4f8>)
    51c6:	4290      	cmp	r0, r2
    51c8:	dd00      	ble.n	51cc <__aeabi_dmul+0x3bc>
    51ca:	e6e3      	b.n	4f94 <__aeabi_dmul+0x184>
    51cc:	2501      	movs	r5, #1
    51ce:	08db      	lsrs	r3, r3, #3
    51d0:	0762      	lsls	r2, r4, #29
    51d2:	431a      	orrs	r2, r3
    51d4:	0264      	lsls	r4, r4, #9
    51d6:	9b01      	ldr	r3, [sp, #4]
    51d8:	4691      	mov	r9, r2
    51da:	0b22      	lsrs	r2, r4, #12
    51dc:	0544      	lsls	r4, r0, #21
    51de:	0d64      	lsrs	r4, r4, #21
    51e0:	401d      	ands	r5, r3
    51e2:	e67c      	b.n	4ede <__aeabi_dmul+0xce>
    51e4:	2280      	movs	r2, #128	; 0x80
    51e6:	4659      	mov	r1, fp
    51e8:	0312      	lsls	r2, r2, #12
    51ea:	4211      	tst	r1, r2
    51ec:	d008      	beq.n	5200 <__aeabi_dmul+0x3f0>
    51ee:	4214      	tst	r4, r2
    51f0:	d106      	bne.n	5200 <__aeabi_dmul+0x3f0>
    51f2:	4322      	orrs	r2, r4
    51f4:	0312      	lsls	r2, r2, #12
    51f6:	0b12      	lsrs	r2, r2, #12
    51f8:	4645      	mov	r5, r8
    51fa:	4699      	mov	r9, r3
    51fc:	4c43      	ldr	r4, [pc, #268]	; (530c <__aeabi_dmul+0x4fc>)
    51fe:	e66e      	b.n	4ede <__aeabi_dmul+0xce>
    5200:	465b      	mov	r3, fp
    5202:	431a      	orrs	r2, r3
    5204:	0312      	lsls	r2, r2, #12
    5206:	0b12      	lsrs	r2, r2, #12
    5208:	4c40      	ldr	r4, [pc, #256]	; (530c <__aeabi_dmul+0x4fc>)
    520a:	e668      	b.n	4ede <__aeabi_dmul+0xce>
    520c:	0003      	movs	r3, r0
    520e:	4654      	mov	r4, sl
    5210:	3b28      	subs	r3, #40	; 0x28
    5212:	409c      	lsls	r4, r3
    5214:	2300      	movs	r3, #0
    5216:	e6b9      	b.n	4f8c <__aeabi_dmul+0x17c>
    5218:	f000 fc6e 	bl	5af8 <__clzsi2>
    521c:	3020      	adds	r0, #32
    521e:	e6a6      	b.n	4f6e <__aeabi_dmul+0x15e>
    5220:	0003      	movs	r3, r0
    5222:	3b28      	subs	r3, #40	; 0x28
    5224:	409f      	lsls	r7, r3
    5226:	2300      	movs	r3, #0
    5228:	46bb      	mov	fp, r7
    522a:	4699      	mov	r9, r3
    522c:	e68a      	b.n	4f44 <__aeabi_dmul+0x134>
    522e:	f000 fc63 	bl	5af8 <__clzsi2>
    5232:	3020      	adds	r0, #32
    5234:	e674      	b.n	4f20 <__aeabi_dmul+0x110>
    5236:	46b4      	mov	ip, r6
    5238:	e7ad      	b.n	5196 <__aeabi_dmul+0x386>
    523a:	2501      	movs	r5, #1
    523c:	1a2a      	subs	r2, r5, r0
    523e:	2a38      	cmp	r2, #56	; 0x38
    5240:	dd06      	ble.n	5250 <__aeabi_dmul+0x440>
    5242:	9b01      	ldr	r3, [sp, #4]
    5244:	2400      	movs	r4, #0
    5246:	401d      	ands	r5, r3
    5248:	2300      	movs	r3, #0
    524a:	2200      	movs	r2, #0
    524c:	4699      	mov	r9, r3
    524e:	e646      	b.n	4ede <__aeabi_dmul+0xce>
    5250:	2a1f      	cmp	r2, #31
    5252:	dc21      	bgt.n	5298 <__aeabi_dmul+0x488>
    5254:	2520      	movs	r5, #32
    5256:	0020      	movs	r0, r4
    5258:	1aad      	subs	r5, r5, r2
    525a:	001e      	movs	r6, r3
    525c:	40ab      	lsls	r3, r5
    525e:	40a8      	lsls	r0, r5
    5260:	40d6      	lsrs	r6, r2
    5262:	1e5d      	subs	r5, r3, #1
    5264:	41ab      	sbcs	r3, r5
    5266:	4330      	orrs	r0, r6
    5268:	4318      	orrs	r0, r3
    526a:	40d4      	lsrs	r4, r2
    526c:	0743      	lsls	r3, r0, #29
    526e:	d009      	beq.n	5284 <__aeabi_dmul+0x474>
    5270:	230f      	movs	r3, #15
    5272:	4003      	ands	r3, r0
    5274:	2b04      	cmp	r3, #4
    5276:	d005      	beq.n	5284 <__aeabi_dmul+0x474>
    5278:	0003      	movs	r3, r0
    527a:	1d18      	adds	r0, r3, #4
    527c:	4298      	cmp	r0, r3
    527e:	419b      	sbcs	r3, r3
    5280:	425b      	negs	r3, r3
    5282:	18e4      	adds	r4, r4, r3
    5284:	0223      	lsls	r3, r4, #8
    5286:	d521      	bpl.n	52cc <__aeabi_dmul+0x4bc>
    5288:	2501      	movs	r5, #1
    528a:	9b01      	ldr	r3, [sp, #4]
    528c:	2401      	movs	r4, #1
    528e:	401d      	ands	r5, r3
    5290:	2300      	movs	r3, #0
    5292:	2200      	movs	r2, #0
    5294:	4699      	mov	r9, r3
    5296:	e622      	b.n	4ede <__aeabi_dmul+0xce>
    5298:	251f      	movs	r5, #31
    529a:	0021      	movs	r1, r4
    529c:	426d      	negs	r5, r5
    529e:	1a28      	subs	r0, r5, r0
    52a0:	40c1      	lsrs	r1, r0
    52a2:	0008      	movs	r0, r1
    52a4:	2a20      	cmp	r2, #32
    52a6:	d01d      	beq.n	52e4 <__aeabi_dmul+0x4d4>
    52a8:	355f      	adds	r5, #95	; 0x5f
    52aa:	1aaa      	subs	r2, r5, r2
    52ac:	4094      	lsls	r4, r2
    52ae:	4323      	orrs	r3, r4
    52b0:	1e5c      	subs	r4, r3, #1
    52b2:	41a3      	sbcs	r3, r4
    52b4:	2507      	movs	r5, #7
    52b6:	4303      	orrs	r3, r0
    52b8:	401d      	ands	r5, r3
    52ba:	2200      	movs	r2, #0
    52bc:	2d00      	cmp	r5, #0
    52be:	d009      	beq.n	52d4 <__aeabi_dmul+0x4c4>
    52c0:	220f      	movs	r2, #15
    52c2:	2400      	movs	r4, #0
    52c4:	401a      	ands	r2, r3
    52c6:	0018      	movs	r0, r3
    52c8:	2a04      	cmp	r2, #4
    52ca:	d1d6      	bne.n	527a <__aeabi_dmul+0x46a>
    52cc:	0003      	movs	r3, r0
    52ce:	0765      	lsls	r5, r4, #29
    52d0:	0264      	lsls	r4, r4, #9
    52d2:	0b22      	lsrs	r2, r4, #12
    52d4:	08db      	lsrs	r3, r3, #3
    52d6:	432b      	orrs	r3, r5
    52d8:	2501      	movs	r5, #1
    52da:	4699      	mov	r9, r3
    52dc:	9b01      	ldr	r3, [sp, #4]
    52de:	2400      	movs	r4, #0
    52e0:	401d      	ands	r5, r3
    52e2:	e5fc      	b.n	4ede <__aeabi_dmul+0xce>
    52e4:	2400      	movs	r4, #0
    52e6:	e7e2      	b.n	52ae <__aeabi_dmul+0x49e>
    52e8:	2280      	movs	r2, #128	; 0x80
    52ea:	2501      	movs	r5, #1
    52ec:	0312      	lsls	r2, r2, #12
    52ee:	4322      	orrs	r2, r4
    52f0:	9901      	ldr	r1, [sp, #4]
    52f2:	0312      	lsls	r2, r2, #12
    52f4:	0b12      	lsrs	r2, r2, #12
    52f6:	400d      	ands	r5, r1
    52f8:	4699      	mov	r9, r3
    52fa:	4c04      	ldr	r4, [pc, #16]	; (530c <__aeabi_dmul+0x4fc>)
    52fc:	e5ef      	b.n	4ede <__aeabi_dmul+0xce>
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	000003ff 	.word	0x000003ff
    5304:	feffffff 	.word	0xfeffffff
    5308:	000007fe 	.word	0x000007fe
    530c:	000007ff 	.word	0x000007ff

00005310 <__aeabi_dsub>:
    5310:	b5f0      	push	{r4, r5, r6, r7, lr}
    5312:	4646      	mov	r6, r8
    5314:	46d6      	mov	lr, sl
    5316:	464f      	mov	r7, r9
    5318:	030c      	lsls	r4, r1, #12
    531a:	b5c0      	push	{r6, r7, lr}
    531c:	0fcd      	lsrs	r5, r1, #31
    531e:	004e      	lsls	r6, r1, #1
    5320:	0a61      	lsrs	r1, r4, #9
    5322:	0f44      	lsrs	r4, r0, #29
    5324:	430c      	orrs	r4, r1
    5326:	00c1      	lsls	r1, r0, #3
    5328:	0058      	lsls	r0, r3, #1
    532a:	0d40      	lsrs	r0, r0, #21
    532c:	4684      	mov	ip, r0
    532e:	468a      	mov	sl, r1
    5330:	000f      	movs	r7, r1
    5332:	0319      	lsls	r1, r3, #12
    5334:	0f50      	lsrs	r0, r2, #29
    5336:	0a49      	lsrs	r1, r1, #9
    5338:	4301      	orrs	r1, r0
    533a:	48c6      	ldr	r0, [pc, #792]	; (5654 <__aeabi_dsub+0x344>)
    533c:	0d76      	lsrs	r6, r6, #21
    533e:	46a8      	mov	r8, r5
    5340:	0fdb      	lsrs	r3, r3, #31
    5342:	00d2      	lsls	r2, r2, #3
    5344:	4584      	cmp	ip, r0
    5346:	d100      	bne.n	534a <__aeabi_dsub+0x3a>
    5348:	e0d8      	b.n	54fc <__aeabi_dsub+0x1ec>
    534a:	2001      	movs	r0, #1
    534c:	4043      	eors	r3, r0
    534e:	42ab      	cmp	r3, r5
    5350:	d100      	bne.n	5354 <__aeabi_dsub+0x44>
    5352:	e0a6      	b.n	54a2 <__aeabi_dsub+0x192>
    5354:	4660      	mov	r0, ip
    5356:	1a35      	subs	r5, r6, r0
    5358:	2d00      	cmp	r5, #0
    535a:	dc00      	bgt.n	535e <__aeabi_dsub+0x4e>
    535c:	e105      	b.n	556a <__aeabi_dsub+0x25a>
    535e:	2800      	cmp	r0, #0
    5360:	d110      	bne.n	5384 <__aeabi_dsub+0x74>
    5362:	000b      	movs	r3, r1
    5364:	4313      	orrs	r3, r2
    5366:	d100      	bne.n	536a <__aeabi_dsub+0x5a>
    5368:	e0d7      	b.n	551a <__aeabi_dsub+0x20a>
    536a:	1e6b      	subs	r3, r5, #1
    536c:	2b00      	cmp	r3, #0
    536e:	d000      	beq.n	5372 <__aeabi_dsub+0x62>
    5370:	e14b      	b.n	560a <__aeabi_dsub+0x2fa>
    5372:	4653      	mov	r3, sl
    5374:	1a9f      	subs	r7, r3, r2
    5376:	45ba      	cmp	sl, r7
    5378:	4180      	sbcs	r0, r0
    537a:	1a64      	subs	r4, r4, r1
    537c:	4240      	negs	r0, r0
    537e:	1a24      	subs	r4, r4, r0
    5380:	2601      	movs	r6, #1
    5382:	e01e      	b.n	53c2 <__aeabi_dsub+0xb2>
    5384:	4bb3      	ldr	r3, [pc, #716]	; (5654 <__aeabi_dsub+0x344>)
    5386:	429e      	cmp	r6, r3
    5388:	d048      	beq.n	541c <__aeabi_dsub+0x10c>
    538a:	2380      	movs	r3, #128	; 0x80
    538c:	041b      	lsls	r3, r3, #16
    538e:	4319      	orrs	r1, r3
    5390:	2d38      	cmp	r5, #56	; 0x38
    5392:	dd00      	ble.n	5396 <__aeabi_dsub+0x86>
    5394:	e119      	b.n	55ca <__aeabi_dsub+0x2ba>
    5396:	2d1f      	cmp	r5, #31
    5398:	dd00      	ble.n	539c <__aeabi_dsub+0x8c>
    539a:	e14c      	b.n	5636 <__aeabi_dsub+0x326>
    539c:	2320      	movs	r3, #32
    539e:	000f      	movs	r7, r1
    53a0:	1b5b      	subs	r3, r3, r5
    53a2:	0010      	movs	r0, r2
    53a4:	409a      	lsls	r2, r3
    53a6:	409f      	lsls	r7, r3
    53a8:	40e8      	lsrs	r0, r5
    53aa:	1e53      	subs	r3, r2, #1
    53ac:	419a      	sbcs	r2, r3
    53ae:	40e9      	lsrs	r1, r5
    53b0:	4307      	orrs	r7, r0
    53b2:	4317      	orrs	r7, r2
    53b4:	4653      	mov	r3, sl
    53b6:	1bdf      	subs	r7, r3, r7
    53b8:	1a61      	subs	r1, r4, r1
    53ba:	45ba      	cmp	sl, r7
    53bc:	41a4      	sbcs	r4, r4
    53be:	4264      	negs	r4, r4
    53c0:	1b0c      	subs	r4, r1, r4
    53c2:	0223      	lsls	r3, r4, #8
    53c4:	d400      	bmi.n	53c8 <__aeabi_dsub+0xb8>
    53c6:	e0c5      	b.n	5554 <__aeabi_dsub+0x244>
    53c8:	0264      	lsls	r4, r4, #9
    53ca:	0a65      	lsrs	r5, r4, #9
    53cc:	2d00      	cmp	r5, #0
    53ce:	d100      	bne.n	53d2 <__aeabi_dsub+0xc2>
    53d0:	e0f6      	b.n	55c0 <__aeabi_dsub+0x2b0>
    53d2:	0028      	movs	r0, r5
    53d4:	f000 fb90 	bl	5af8 <__clzsi2>
    53d8:	0003      	movs	r3, r0
    53da:	3b08      	subs	r3, #8
    53dc:	2b1f      	cmp	r3, #31
    53de:	dd00      	ble.n	53e2 <__aeabi_dsub+0xd2>
    53e0:	e0e9      	b.n	55b6 <__aeabi_dsub+0x2a6>
    53e2:	2220      	movs	r2, #32
    53e4:	003c      	movs	r4, r7
    53e6:	1ad2      	subs	r2, r2, r3
    53e8:	409d      	lsls	r5, r3
    53ea:	40d4      	lsrs	r4, r2
    53ec:	409f      	lsls	r7, r3
    53ee:	4325      	orrs	r5, r4
    53f0:	429e      	cmp	r6, r3
    53f2:	dd00      	ble.n	53f6 <__aeabi_dsub+0xe6>
    53f4:	e0db      	b.n	55ae <__aeabi_dsub+0x29e>
    53f6:	1b9e      	subs	r6, r3, r6
    53f8:	1c73      	adds	r3, r6, #1
    53fa:	2b1f      	cmp	r3, #31
    53fc:	dd00      	ble.n	5400 <__aeabi_dsub+0xf0>
    53fe:	e10a      	b.n	5616 <__aeabi_dsub+0x306>
    5400:	2220      	movs	r2, #32
    5402:	0038      	movs	r0, r7
    5404:	1ad2      	subs	r2, r2, r3
    5406:	0029      	movs	r1, r5
    5408:	4097      	lsls	r7, r2
    540a:	002c      	movs	r4, r5
    540c:	4091      	lsls	r1, r2
    540e:	40d8      	lsrs	r0, r3
    5410:	1e7a      	subs	r2, r7, #1
    5412:	4197      	sbcs	r7, r2
    5414:	40dc      	lsrs	r4, r3
    5416:	2600      	movs	r6, #0
    5418:	4301      	orrs	r1, r0
    541a:	430f      	orrs	r7, r1
    541c:	077b      	lsls	r3, r7, #29
    541e:	d009      	beq.n	5434 <__aeabi_dsub+0x124>
    5420:	230f      	movs	r3, #15
    5422:	403b      	ands	r3, r7
    5424:	2b04      	cmp	r3, #4
    5426:	d005      	beq.n	5434 <__aeabi_dsub+0x124>
    5428:	1d3b      	adds	r3, r7, #4
    542a:	42bb      	cmp	r3, r7
    542c:	41bf      	sbcs	r7, r7
    542e:	427f      	negs	r7, r7
    5430:	19e4      	adds	r4, r4, r7
    5432:	001f      	movs	r7, r3
    5434:	0223      	lsls	r3, r4, #8
    5436:	d525      	bpl.n	5484 <__aeabi_dsub+0x174>
    5438:	4b86      	ldr	r3, [pc, #536]	; (5654 <__aeabi_dsub+0x344>)
    543a:	3601      	adds	r6, #1
    543c:	429e      	cmp	r6, r3
    543e:	d100      	bne.n	5442 <__aeabi_dsub+0x132>
    5440:	e0af      	b.n	55a2 <__aeabi_dsub+0x292>
    5442:	4b85      	ldr	r3, [pc, #532]	; (5658 <__aeabi_dsub+0x348>)
    5444:	2501      	movs	r5, #1
    5446:	401c      	ands	r4, r3
    5448:	4643      	mov	r3, r8
    544a:	0762      	lsls	r2, r4, #29
    544c:	08ff      	lsrs	r7, r7, #3
    544e:	0264      	lsls	r4, r4, #9
    5450:	0576      	lsls	r6, r6, #21
    5452:	4317      	orrs	r7, r2
    5454:	0b24      	lsrs	r4, r4, #12
    5456:	0d76      	lsrs	r6, r6, #21
    5458:	401d      	ands	r5, r3
    545a:	2100      	movs	r1, #0
    545c:	0324      	lsls	r4, r4, #12
    545e:	0b23      	lsrs	r3, r4, #12
    5460:	0d0c      	lsrs	r4, r1, #20
    5462:	4a7e      	ldr	r2, [pc, #504]	; (565c <__aeabi_dsub+0x34c>)
    5464:	0524      	lsls	r4, r4, #20
    5466:	431c      	orrs	r4, r3
    5468:	4014      	ands	r4, r2
    546a:	0533      	lsls	r3, r6, #20
    546c:	4323      	orrs	r3, r4
    546e:	005b      	lsls	r3, r3, #1
    5470:	07ed      	lsls	r5, r5, #31
    5472:	085b      	lsrs	r3, r3, #1
    5474:	432b      	orrs	r3, r5
    5476:	0038      	movs	r0, r7
    5478:	0019      	movs	r1, r3
    547a:	bc1c      	pop	{r2, r3, r4}
    547c:	4690      	mov	r8, r2
    547e:	4699      	mov	r9, r3
    5480:	46a2      	mov	sl, r4
    5482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5484:	2501      	movs	r5, #1
    5486:	4643      	mov	r3, r8
    5488:	0762      	lsls	r2, r4, #29
    548a:	08ff      	lsrs	r7, r7, #3
    548c:	4317      	orrs	r7, r2
    548e:	08e4      	lsrs	r4, r4, #3
    5490:	401d      	ands	r5, r3
    5492:	4b70      	ldr	r3, [pc, #448]	; (5654 <__aeabi_dsub+0x344>)
    5494:	429e      	cmp	r6, r3
    5496:	d036      	beq.n	5506 <__aeabi_dsub+0x1f6>
    5498:	0324      	lsls	r4, r4, #12
    549a:	0576      	lsls	r6, r6, #21
    549c:	0b24      	lsrs	r4, r4, #12
    549e:	0d76      	lsrs	r6, r6, #21
    54a0:	e7db      	b.n	545a <__aeabi_dsub+0x14a>
    54a2:	4663      	mov	r3, ip
    54a4:	1af3      	subs	r3, r6, r3
    54a6:	2b00      	cmp	r3, #0
    54a8:	dc00      	bgt.n	54ac <__aeabi_dsub+0x19c>
    54aa:	e094      	b.n	55d6 <__aeabi_dsub+0x2c6>
    54ac:	4660      	mov	r0, ip
    54ae:	2800      	cmp	r0, #0
    54b0:	d035      	beq.n	551e <__aeabi_dsub+0x20e>
    54b2:	4868      	ldr	r0, [pc, #416]	; (5654 <__aeabi_dsub+0x344>)
    54b4:	4286      	cmp	r6, r0
    54b6:	d0b1      	beq.n	541c <__aeabi_dsub+0x10c>
    54b8:	2780      	movs	r7, #128	; 0x80
    54ba:	043f      	lsls	r7, r7, #16
    54bc:	4339      	orrs	r1, r7
    54be:	2b38      	cmp	r3, #56	; 0x38
    54c0:	dc00      	bgt.n	54c4 <__aeabi_dsub+0x1b4>
    54c2:	e0fd      	b.n	56c0 <__aeabi_dsub+0x3b0>
    54c4:	430a      	orrs	r2, r1
    54c6:	0017      	movs	r7, r2
    54c8:	2100      	movs	r1, #0
    54ca:	1e7a      	subs	r2, r7, #1
    54cc:	4197      	sbcs	r7, r2
    54ce:	4457      	add	r7, sl
    54d0:	4557      	cmp	r7, sl
    54d2:	4180      	sbcs	r0, r0
    54d4:	1909      	adds	r1, r1, r4
    54d6:	4244      	negs	r4, r0
    54d8:	190c      	adds	r4, r1, r4
    54da:	0223      	lsls	r3, r4, #8
    54dc:	d53a      	bpl.n	5554 <__aeabi_dsub+0x244>
    54de:	4b5d      	ldr	r3, [pc, #372]	; (5654 <__aeabi_dsub+0x344>)
    54e0:	3601      	adds	r6, #1
    54e2:	429e      	cmp	r6, r3
    54e4:	d100      	bne.n	54e8 <__aeabi_dsub+0x1d8>
    54e6:	e14b      	b.n	5780 <__aeabi_dsub+0x470>
    54e8:	2201      	movs	r2, #1
    54ea:	4b5b      	ldr	r3, [pc, #364]	; (5658 <__aeabi_dsub+0x348>)
    54ec:	401c      	ands	r4, r3
    54ee:	087b      	lsrs	r3, r7, #1
    54f0:	4017      	ands	r7, r2
    54f2:	431f      	orrs	r7, r3
    54f4:	07e2      	lsls	r2, r4, #31
    54f6:	4317      	orrs	r7, r2
    54f8:	0864      	lsrs	r4, r4, #1
    54fa:	e78f      	b.n	541c <__aeabi_dsub+0x10c>
    54fc:	0008      	movs	r0, r1
    54fe:	4310      	orrs	r0, r2
    5500:	d000      	beq.n	5504 <__aeabi_dsub+0x1f4>
    5502:	e724      	b.n	534e <__aeabi_dsub+0x3e>
    5504:	e721      	b.n	534a <__aeabi_dsub+0x3a>
    5506:	0023      	movs	r3, r4
    5508:	433b      	orrs	r3, r7
    550a:	d100      	bne.n	550e <__aeabi_dsub+0x1fe>
    550c:	e1b9      	b.n	5882 <__aeabi_dsub+0x572>
    550e:	2280      	movs	r2, #128	; 0x80
    5510:	0312      	lsls	r2, r2, #12
    5512:	4314      	orrs	r4, r2
    5514:	0324      	lsls	r4, r4, #12
    5516:	0b24      	lsrs	r4, r4, #12
    5518:	e79f      	b.n	545a <__aeabi_dsub+0x14a>
    551a:	002e      	movs	r6, r5
    551c:	e77e      	b.n	541c <__aeabi_dsub+0x10c>
    551e:	0008      	movs	r0, r1
    5520:	4310      	orrs	r0, r2
    5522:	d100      	bne.n	5526 <__aeabi_dsub+0x216>
    5524:	e0ca      	b.n	56bc <__aeabi_dsub+0x3ac>
    5526:	1e58      	subs	r0, r3, #1
    5528:	4684      	mov	ip, r0
    552a:	2800      	cmp	r0, #0
    552c:	d000      	beq.n	5530 <__aeabi_dsub+0x220>
    552e:	e0e7      	b.n	5700 <__aeabi_dsub+0x3f0>
    5530:	4452      	add	r2, sl
    5532:	4552      	cmp	r2, sl
    5534:	4180      	sbcs	r0, r0
    5536:	1864      	adds	r4, r4, r1
    5538:	4240      	negs	r0, r0
    553a:	1824      	adds	r4, r4, r0
    553c:	0017      	movs	r7, r2
    553e:	2601      	movs	r6, #1
    5540:	0223      	lsls	r3, r4, #8
    5542:	d507      	bpl.n	5554 <__aeabi_dsub+0x244>
    5544:	2602      	movs	r6, #2
    5546:	e7cf      	b.n	54e8 <__aeabi_dsub+0x1d8>
    5548:	4664      	mov	r4, ip
    554a:	432c      	orrs	r4, r5
    554c:	d100      	bne.n	5550 <__aeabi_dsub+0x240>
    554e:	e1b3      	b.n	58b8 <__aeabi_dsub+0x5a8>
    5550:	002c      	movs	r4, r5
    5552:	4667      	mov	r7, ip
    5554:	077b      	lsls	r3, r7, #29
    5556:	d000      	beq.n	555a <__aeabi_dsub+0x24a>
    5558:	e762      	b.n	5420 <__aeabi_dsub+0x110>
    555a:	0763      	lsls	r3, r4, #29
    555c:	08ff      	lsrs	r7, r7, #3
    555e:	431f      	orrs	r7, r3
    5560:	2501      	movs	r5, #1
    5562:	4643      	mov	r3, r8
    5564:	08e4      	lsrs	r4, r4, #3
    5566:	401d      	ands	r5, r3
    5568:	e793      	b.n	5492 <__aeabi_dsub+0x182>
    556a:	2d00      	cmp	r5, #0
    556c:	d178      	bne.n	5660 <__aeabi_dsub+0x350>
    556e:	1c75      	adds	r5, r6, #1
    5570:	056d      	lsls	r5, r5, #21
    5572:	0d6d      	lsrs	r5, r5, #21
    5574:	2d01      	cmp	r5, #1
    5576:	dc00      	bgt.n	557a <__aeabi_dsub+0x26a>
    5578:	e0f2      	b.n	5760 <__aeabi_dsub+0x450>
    557a:	4650      	mov	r0, sl
    557c:	1a80      	subs	r0, r0, r2
    557e:	4582      	cmp	sl, r0
    5580:	41bf      	sbcs	r7, r7
    5582:	1a65      	subs	r5, r4, r1
    5584:	427f      	negs	r7, r7
    5586:	1bed      	subs	r5, r5, r7
    5588:	4684      	mov	ip, r0
    558a:	0228      	lsls	r0, r5, #8
    558c:	d400      	bmi.n	5590 <__aeabi_dsub+0x280>
    558e:	e08c      	b.n	56aa <__aeabi_dsub+0x39a>
    5590:	4650      	mov	r0, sl
    5592:	1a17      	subs	r7, r2, r0
    5594:	42ba      	cmp	r2, r7
    5596:	4192      	sbcs	r2, r2
    5598:	1b0c      	subs	r4, r1, r4
    559a:	4255      	negs	r5, r2
    559c:	1b65      	subs	r5, r4, r5
    559e:	4698      	mov	r8, r3
    55a0:	e714      	b.n	53cc <__aeabi_dsub+0xbc>
    55a2:	2501      	movs	r5, #1
    55a4:	4643      	mov	r3, r8
    55a6:	2400      	movs	r4, #0
    55a8:	401d      	ands	r5, r3
    55aa:	2700      	movs	r7, #0
    55ac:	e755      	b.n	545a <__aeabi_dsub+0x14a>
    55ae:	4c2a      	ldr	r4, [pc, #168]	; (5658 <__aeabi_dsub+0x348>)
    55b0:	1af6      	subs	r6, r6, r3
    55b2:	402c      	ands	r4, r5
    55b4:	e732      	b.n	541c <__aeabi_dsub+0x10c>
    55b6:	003d      	movs	r5, r7
    55b8:	3828      	subs	r0, #40	; 0x28
    55ba:	4085      	lsls	r5, r0
    55bc:	2700      	movs	r7, #0
    55be:	e717      	b.n	53f0 <__aeabi_dsub+0xe0>
    55c0:	0038      	movs	r0, r7
    55c2:	f000 fa99 	bl	5af8 <__clzsi2>
    55c6:	3020      	adds	r0, #32
    55c8:	e706      	b.n	53d8 <__aeabi_dsub+0xc8>
    55ca:	430a      	orrs	r2, r1
    55cc:	0017      	movs	r7, r2
    55ce:	2100      	movs	r1, #0
    55d0:	1e7a      	subs	r2, r7, #1
    55d2:	4197      	sbcs	r7, r2
    55d4:	e6ee      	b.n	53b4 <__aeabi_dsub+0xa4>
    55d6:	2b00      	cmp	r3, #0
    55d8:	d000      	beq.n	55dc <__aeabi_dsub+0x2cc>
    55da:	e0e5      	b.n	57a8 <__aeabi_dsub+0x498>
    55dc:	1c73      	adds	r3, r6, #1
    55de:	469c      	mov	ip, r3
    55e0:	055b      	lsls	r3, r3, #21
    55e2:	0d5b      	lsrs	r3, r3, #21
    55e4:	2b01      	cmp	r3, #1
    55e6:	dc00      	bgt.n	55ea <__aeabi_dsub+0x2da>
    55e8:	e09f      	b.n	572a <__aeabi_dsub+0x41a>
    55ea:	4b1a      	ldr	r3, [pc, #104]	; (5654 <__aeabi_dsub+0x344>)
    55ec:	459c      	cmp	ip, r3
    55ee:	d100      	bne.n	55f2 <__aeabi_dsub+0x2e2>
    55f0:	e0c5      	b.n	577e <__aeabi_dsub+0x46e>
    55f2:	4452      	add	r2, sl
    55f4:	4552      	cmp	r2, sl
    55f6:	4180      	sbcs	r0, r0
    55f8:	1864      	adds	r4, r4, r1
    55fa:	4240      	negs	r0, r0
    55fc:	1824      	adds	r4, r4, r0
    55fe:	07e7      	lsls	r7, r4, #31
    5600:	0852      	lsrs	r2, r2, #1
    5602:	4317      	orrs	r7, r2
    5604:	0864      	lsrs	r4, r4, #1
    5606:	4666      	mov	r6, ip
    5608:	e708      	b.n	541c <__aeabi_dsub+0x10c>
    560a:	4812      	ldr	r0, [pc, #72]	; (5654 <__aeabi_dsub+0x344>)
    560c:	4285      	cmp	r5, r0
    560e:	d100      	bne.n	5612 <__aeabi_dsub+0x302>
    5610:	e085      	b.n	571e <__aeabi_dsub+0x40e>
    5612:	001d      	movs	r5, r3
    5614:	e6bc      	b.n	5390 <__aeabi_dsub+0x80>
    5616:	0029      	movs	r1, r5
    5618:	3e1f      	subs	r6, #31
    561a:	40f1      	lsrs	r1, r6
    561c:	2b20      	cmp	r3, #32
    561e:	d100      	bne.n	5622 <__aeabi_dsub+0x312>
    5620:	e07f      	b.n	5722 <__aeabi_dsub+0x412>
    5622:	2240      	movs	r2, #64	; 0x40
    5624:	1ad3      	subs	r3, r2, r3
    5626:	409d      	lsls	r5, r3
    5628:	432f      	orrs	r7, r5
    562a:	1e7d      	subs	r5, r7, #1
    562c:	41af      	sbcs	r7, r5
    562e:	2400      	movs	r4, #0
    5630:	430f      	orrs	r7, r1
    5632:	2600      	movs	r6, #0
    5634:	e78e      	b.n	5554 <__aeabi_dsub+0x244>
    5636:	002b      	movs	r3, r5
    5638:	000f      	movs	r7, r1
    563a:	3b20      	subs	r3, #32
    563c:	40df      	lsrs	r7, r3
    563e:	2d20      	cmp	r5, #32
    5640:	d071      	beq.n	5726 <__aeabi_dsub+0x416>
    5642:	2340      	movs	r3, #64	; 0x40
    5644:	1b5d      	subs	r5, r3, r5
    5646:	40a9      	lsls	r1, r5
    5648:	430a      	orrs	r2, r1
    564a:	1e51      	subs	r1, r2, #1
    564c:	418a      	sbcs	r2, r1
    564e:	2100      	movs	r1, #0
    5650:	4317      	orrs	r7, r2
    5652:	e6af      	b.n	53b4 <__aeabi_dsub+0xa4>
    5654:	000007ff 	.word	0x000007ff
    5658:	ff7fffff 	.word	0xff7fffff
    565c:	800fffff 	.word	0x800fffff
    5660:	2e00      	cmp	r6, #0
    5662:	d03e      	beq.n	56e2 <__aeabi_dsub+0x3d2>
    5664:	4eb3      	ldr	r6, [pc, #716]	; (5934 <__aeabi_dsub+0x624>)
    5666:	45b4      	cmp	ip, r6
    5668:	d045      	beq.n	56f6 <__aeabi_dsub+0x3e6>
    566a:	2680      	movs	r6, #128	; 0x80
    566c:	0436      	lsls	r6, r6, #16
    566e:	426d      	negs	r5, r5
    5670:	4334      	orrs	r4, r6
    5672:	2d38      	cmp	r5, #56	; 0x38
    5674:	dd00      	ble.n	5678 <__aeabi_dsub+0x368>
    5676:	e0a8      	b.n	57ca <__aeabi_dsub+0x4ba>
    5678:	2d1f      	cmp	r5, #31
    567a:	dd00      	ble.n	567e <__aeabi_dsub+0x36e>
    567c:	e11f      	b.n	58be <__aeabi_dsub+0x5ae>
    567e:	2620      	movs	r6, #32
    5680:	0027      	movs	r7, r4
    5682:	4650      	mov	r0, sl
    5684:	1b76      	subs	r6, r6, r5
    5686:	40b7      	lsls	r7, r6
    5688:	40e8      	lsrs	r0, r5
    568a:	4307      	orrs	r7, r0
    568c:	4650      	mov	r0, sl
    568e:	40b0      	lsls	r0, r6
    5690:	1e46      	subs	r6, r0, #1
    5692:	41b0      	sbcs	r0, r6
    5694:	40ec      	lsrs	r4, r5
    5696:	4338      	orrs	r0, r7
    5698:	1a17      	subs	r7, r2, r0
    569a:	42ba      	cmp	r2, r7
    569c:	4192      	sbcs	r2, r2
    569e:	1b0c      	subs	r4, r1, r4
    56a0:	4252      	negs	r2, r2
    56a2:	1aa4      	subs	r4, r4, r2
    56a4:	4666      	mov	r6, ip
    56a6:	4698      	mov	r8, r3
    56a8:	e68b      	b.n	53c2 <__aeabi_dsub+0xb2>
    56aa:	4664      	mov	r4, ip
    56ac:	4667      	mov	r7, ip
    56ae:	432c      	orrs	r4, r5
    56b0:	d000      	beq.n	56b4 <__aeabi_dsub+0x3a4>
    56b2:	e68b      	b.n	53cc <__aeabi_dsub+0xbc>
    56b4:	2500      	movs	r5, #0
    56b6:	2600      	movs	r6, #0
    56b8:	2700      	movs	r7, #0
    56ba:	e6ea      	b.n	5492 <__aeabi_dsub+0x182>
    56bc:	001e      	movs	r6, r3
    56be:	e6ad      	b.n	541c <__aeabi_dsub+0x10c>
    56c0:	2b1f      	cmp	r3, #31
    56c2:	dc60      	bgt.n	5786 <__aeabi_dsub+0x476>
    56c4:	2720      	movs	r7, #32
    56c6:	1af8      	subs	r0, r7, r3
    56c8:	000f      	movs	r7, r1
    56ca:	4684      	mov	ip, r0
    56cc:	4087      	lsls	r7, r0
    56ce:	0010      	movs	r0, r2
    56d0:	40d8      	lsrs	r0, r3
    56d2:	4307      	orrs	r7, r0
    56d4:	4660      	mov	r0, ip
    56d6:	4082      	lsls	r2, r0
    56d8:	1e50      	subs	r0, r2, #1
    56da:	4182      	sbcs	r2, r0
    56dc:	40d9      	lsrs	r1, r3
    56de:	4317      	orrs	r7, r2
    56e0:	e6f5      	b.n	54ce <__aeabi_dsub+0x1be>
    56e2:	0026      	movs	r6, r4
    56e4:	4650      	mov	r0, sl
    56e6:	4306      	orrs	r6, r0
    56e8:	d005      	beq.n	56f6 <__aeabi_dsub+0x3e6>
    56ea:	43ed      	mvns	r5, r5
    56ec:	2d00      	cmp	r5, #0
    56ee:	d0d3      	beq.n	5698 <__aeabi_dsub+0x388>
    56f0:	4e90      	ldr	r6, [pc, #576]	; (5934 <__aeabi_dsub+0x624>)
    56f2:	45b4      	cmp	ip, r6
    56f4:	d1bd      	bne.n	5672 <__aeabi_dsub+0x362>
    56f6:	000c      	movs	r4, r1
    56f8:	0017      	movs	r7, r2
    56fa:	4666      	mov	r6, ip
    56fc:	4698      	mov	r8, r3
    56fe:	e68d      	b.n	541c <__aeabi_dsub+0x10c>
    5700:	488c      	ldr	r0, [pc, #560]	; (5934 <__aeabi_dsub+0x624>)
    5702:	4283      	cmp	r3, r0
    5704:	d00b      	beq.n	571e <__aeabi_dsub+0x40e>
    5706:	4663      	mov	r3, ip
    5708:	e6d9      	b.n	54be <__aeabi_dsub+0x1ae>
    570a:	2d00      	cmp	r5, #0
    570c:	d000      	beq.n	5710 <__aeabi_dsub+0x400>
    570e:	e096      	b.n	583e <__aeabi_dsub+0x52e>
    5710:	0008      	movs	r0, r1
    5712:	4310      	orrs	r0, r2
    5714:	d100      	bne.n	5718 <__aeabi_dsub+0x408>
    5716:	e0e2      	b.n	58de <__aeabi_dsub+0x5ce>
    5718:	000c      	movs	r4, r1
    571a:	0017      	movs	r7, r2
    571c:	4698      	mov	r8, r3
    571e:	4e85      	ldr	r6, [pc, #532]	; (5934 <__aeabi_dsub+0x624>)
    5720:	e67c      	b.n	541c <__aeabi_dsub+0x10c>
    5722:	2500      	movs	r5, #0
    5724:	e780      	b.n	5628 <__aeabi_dsub+0x318>
    5726:	2100      	movs	r1, #0
    5728:	e78e      	b.n	5648 <__aeabi_dsub+0x338>
    572a:	0023      	movs	r3, r4
    572c:	4650      	mov	r0, sl
    572e:	4303      	orrs	r3, r0
    5730:	2e00      	cmp	r6, #0
    5732:	d000      	beq.n	5736 <__aeabi_dsub+0x426>
    5734:	e0a8      	b.n	5888 <__aeabi_dsub+0x578>
    5736:	2b00      	cmp	r3, #0
    5738:	d100      	bne.n	573c <__aeabi_dsub+0x42c>
    573a:	e0de      	b.n	58fa <__aeabi_dsub+0x5ea>
    573c:	000b      	movs	r3, r1
    573e:	4313      	orrs	r3, r2
    5740:	d100      	bne.n	5744 <__aeabi_dsub+0x434>
    5742:	e66b      	b.n	541c <__aeabi_dsub+0x10c>
    5744:	4452      	add	r2, sl
    5746:	4552      	cmp	r2, sl
    5748:	4180      	sbcs	r0, r0
    574a:	1864      	adds	r4, r4, r1
    574c:	4240      	negs	r0, r0
    574e:	1824      	adds	r4, r4, r0
    5750:	0017      	movs	r7, r2
    5752:	0223      	lsls	r3, r4, #8
    5754:	d400      	bmi.n	5758 <__aeabi_dsub+0x448>
    5756:	e6fd      	b.n	5554 <__aeabi_dsub+0x244>
    5758:	4b77      	ldr	r3, [pc, #476]	; (5938 <__aeabi_dsub+0x628>)
    575a:	4666      	mov	r6, ip
    575c:	401c      	ands	r4, r3
    575e:	e65d      	b.n	541c <__aeabi_dsub+0x10c>
    5760:	0025      	movs	r5, r4
    5762:	4650      	mov	r0, sl
    5764:	4305      	orrs	r5, r0
    5766:	2e00      	cmp	r6, #0
    5768:	d1cf      	bne.n	570a <__aeabi_dsub+0x3fa>
    576a:	2d00      	cmp	r5, #0
    576c:	d14f      	bne.n	580e <__aeabi_dsub+0x4fe>
    576e:	000c      	movs	r4, r1
    5770:	4314      	orrs	r4, r2
    5772:	d100      	bne.n	5776 <__aeabi_dsub+0x466>
    5774:	e0a0      	b.n	58b8 <__aeabi_dsub+0x5a8>
    5776:	000c      	movs	r4, r1
    5778:	0017      	movs	r7, r2
    577a:	4698      	mov	r8, r3
    577c:	e64e      	b.n	541c <__aeabi_dsub+0x10c>
    577e:	4666      	mov	r6, ip
    5780:	2400      	movs	r4, #0
    5782:	2700      	movs	r7, #0
    5784:	e685      	b.n	5492 <__aeabi_dsub+0x182>
    5786:	001f      	movs	r7, r3
    5788:	0008      	movs	r0, r1
    578a:	3f20      	subs	r7, #32
    578c:	40f8      	lsrs	r0, r7
    578e:	0007      	movs	r7, r0
    5790:	2b20      	cmp	r3, #32
    5792:	d100      	bne.n	5796 <__aeabi_dsub+0x486>
    5794:	e08e      	b.n	58b4 <__aeabi_dsub+0x5a4>
    5796:	2040      	movs	r0, #64	; 0x40
    5798:	1ac3      	subs	r3, r0, r3
    579a:	4099      	lsls	r1, r3
    579c:	430a      	orrs	r2, r1
    579e:	1e51      	subs	r1, r2, #1
    57a0:	418a      	sbcs	r2, r1
    57a2:	2100      	movs	r1, #0
    57a4:	4317      	orrs	r7, r2
    57a6:	e692      	b.n	54ce <__aeabi_dsub+0x1be>
    57a8:	2e00      	cmp	r6, #0
    57aa:	d114      	bne.n	57d6 <__aeabi_dsub+0x4c6>
    57ac:	0026      	movs	r6, r4
    57ae:	4650      	mov	r0, sl
    57b0:	4306      	orrs	r6, r0
    57b2:	d062      	beq.n	587a <__aeabi_dsub+0x56a>
    57b4:	43db      	mvns	r3, r3
    57b6:	2b00      	cmp	r3, #0
    57b8:	d15c      	bne.n	5874 <__aeabi_dsub+0x564>
    57ba:	1887      	adds	r7, r0, r2
    57bc:	4297      	cmp	r7, r2
    57be:	4192      	sbcs	r2, r2
    57c0:	1864      	adds	r4, r4, r1
    57c2:	4252      	negs	r2, r2
    57c4:	18a4      	adds	r4, r4, r2
    57c6:	4666      	mov	r6, ip
    57c8:	e687      	b.n	54da <__aeabi_dsub+0x1ca>
    57ca:	4650      	mov	r0, sl
    57cc:	4320      	orrs	r0, r4
    57ce:	1e44      	subs	r4, r0, #1
    57d0:	41a0      	sbcs	r0, r4
    57d2:	2400      	movs	r4, #0
    57d4:	e760      	b.n	5698 <__aeabi_dsub+0x388>
    57d6:	4e57      	ldr	r6, [pc, #348]	; (5934 <__aeabi_dsub+0x624>)
    57d8:	45b4      	cmp	ip, r6
    57da:	d04e      	beq.n	587a <__aeabi_dsub+0x56a>
    57dc:	2680      	movs	r6, #128	; 0x80
    57de:	0436      	lsls	r6, r6, #16
    57e0:	425b      	negs	r3, r3
    57e2:	4334      	orrs	r4, r6
    57e4:	2b38      	cmp	r3, #56	; 0x38
    57e6:	dd00      	ble.n	57ea <__aeabi_dsub+0x4da>
    57e8:	e07f      	b.n	58ea <__aeabi_dsub+0x5da>
    57ea:	2b1f      	cmp	r3, #31
    57ec:	dd00      	ble.n	57f0 <__aeabi_dsub+0x4e0>
    57ee:	e08b      	b.n	5908 <__aeabi_dsub+0x5f8>
    57f0:	2620      	movs	r6, #32
    57f2:	0027      	movs	r7, r4
    57f4:	4650      	mov	r0, sl
    57f6:	1af6      	subs	r6, r6, r3
    57f8:	40b7      	lsls	r7, r6
    57fa:	40d8      	lsrs	r0, r3
    57fc:	4307      	orrs	r7, r0
    57fe:	4650      	mov	r0, sl
    5800:	40b0      	lsls	r0, r6
    5802:	1e46      	subs	r6, r0, #1
    5804:	41b0      	sbcs	r0, r6
    5806:	4307      	orrs	r7, r0
    5808:	40dc      	lsrs	r4, r3
    580a:	18bf      	adds	r7, r7, r2
    580c:	e7d6      	b.n	57bc <__aeabi_dsub+0x4ac>
    580e:	000d      	movs	r5, r1
    5810:	4315      	orrs	r5, r2
    5812:	d100      	bne.n	5816 <__aeabi_dsub+0x506>
    5814:	e602      	b.n	541c <__aeabi_dsub+0x10c>
    5816:	4650      	mov	r0, sl
    5818:	1a80      	subs	r0, r0, r2
    581a:	4582      	cmp	sl, r0
    581c:	41bf      	sbcs	r7, r7
    581e:	1a65      	subs	r5, r4, r1
    5820:	427f      	negs	r7, r7
    5822:	1bed      	subs	r5, r5, r7
    5824:	4684      	mov	ip, r0
    5826:	0228      	lsls	r0, r5, #8
    5828:	d400      	bmi.n	582c <__aeabi_dsub+0x51c>
    582a:	e68d      	b.n	5548 <__aeabi_dsub+0x238>
    582c:	4650      	mov	r0, sl
    582e:	1a17      	subs	r7, r2, r0
    5830:	42ba      	cmp	r2, r7
    5832:	4192      	sbcs	r2, r2
    5834:	1b0c      	subs	r4, r1, r4
    5836:	4252      	negs	r2, r2
    5838:	1aa4      	subs	r4, r4, r2
    583a:	4698      	mov	r8, r3
    583c:	e5ee      	b.n	541c <__aeabi_dsub+0x10c>
    583e:	000d      	movs	r5, r1
    5840:	4315      	orrs	r5, r2
    5842:	d100      	bne.n	5846 <__aeabi_dsub+0x536>
    5844:	e76b      	b.n	571e <__aeabi_dsub+0x40e>
    5846:	4650      	mov	r0, sl
    5848:	0767      	lsls	r7, r4, #29
    584a:	08c0      	lsrs	r0, r0, #3
    584c:	4307      	orrs	r7, r0
    584e:	2080      	movs	r0, #128	; 0x80
    5850:	08e4      	lsrs	r4, r4, #3
    5852:	0300      	lsls	r0, r0, #12
    5854:	4204      	tst	r4, r0
    5856:	d007      	beq.n	5868 <__aeabi_dsub+0x558>
    5858:	08cd      	lsrs	r5, r1, #3
    585a:	4205      	tst	r5, r0
    585c:	d104      	bne.n	5868 <__aeabi_dsub+0x558>
    585e:	002c      	movs	r4, r5
    5860:	4698      	mov	r8, r3
    5862:	08d7      	lsrs	r7, r2, #3
    5864:	0749      	lsls	r1, r1, #29
    5866:	430f      	orrs	r7, r1
    5868:	0f7b      	lsrs	r3, r7, #29
    586a:	00e4      	lsls	r4, r4, #3
    586c:	431c      	orrs	r4, r3
    586e:	00ff      	lsls	r7, r7, #3
    5870:	4e30      	ldr	r6, [pc, #192]	; (5934 <__aeabi_dsub+0x624>)
    5872:	e5d3      	b.n	541c <__aeabi_dsub+0x10c>
    5874:	4e2f      	ldr	r6, [pc, #188]	; (5934 <__aeabi_dsub+0x624>)
    5876:	45b4      	cmp	ip, r6
    5878:	d1b4      	bne.n	57e4 <__aeabi_dsub+0x4d4>
    587a:	000c      	movs	r4, r1
    587c:	0017      	movs	r7, r2
    587e:	4666      	mov	r6, ip
    5880:	e5cc      	b.n	541c <__aeabi_dsub+0x10c>
    5882:	2700      	movs	r7, #0
    5884:	2400      	movs	r4, #0
    5886:	e5e8      	b.n	545a <__aeabi_dsub+0x14a>
    5888:	2b00      	cmp	r3, #0
    588a:	d039      	beq.n	5900 <__aeabi_dsub+0x5f0>
    588c:	000b      	movs	r3, r1
    588e:	4313      	orrs	r3, r2
    5890:	d100      	bne.n	5894 <__aeabi_dsub+0x584>
    5892:	e744      	b.n	571e <__aeabi_dsub+0x40e>
    5894:	08c0      	lsrs	r0, r0, #3
    5896:	0767      	lsls	r7, r4, #29
    5898:	4307      	orrs	r7, r0
    589a:	2080      	movs	r0, #128	; 0x80
    589c:	08e4      	lsrs	r4, r4, #3
    589e:	0300      	lsls	r0, r0, #12
    58a0:	4204      	tst	r4, r0
    58a2:	d0e1      	beq.n	5868 <__aeabi_dsub+0x558>
    58a4:	08cb      	lsrs	r3, r1, #3
    58a6:	4203      	tst	r3, r0
    58a8:	d1de      	bne.n	5868 <__aeabi_dsub+0x558>
    58aa:	08d7      	lsrs	r7, r2, #3
    58ac:	0749      	lsls	r1, r1, #29
    58ae:	430f      	orrs	r7, r1
    58b0:	001c      	movs	r4, r3
    58b2:	e7d9      	b.n	5868 <__aeabi_dsub+0x558>
    58b4:	2100      	movs	r1, #0
    58b6:	e771      	b.n	579c <__aeabi_dsub+0x48c>
    58b8:	2500      	movs	r5, #0
    58ba:	2700      	movs	r7, #0
    58bc:	e5e9      	b.n	5492 <__aeabi_dsub+0x182>
    58be:	002e      	movs	r6, r5
    58c0:	0027      	movs	r7, r4
    58c2:	3e20      	subs	r6, #32
    58c4:	40f7      	lsrs	r7, r6
    58c6:	2d20      	cmp	r5, #32
    58c8:	d02f      	beq.n	592a <__aeabi_dsub+0x61a>
    58ca:	2640      	movs	r6, #64	; 0x40
    58cc:	1b75      	subs	r5, r6, r5
    58ce:	40ac      	lsls	r4, r5
    58d0:	4650      	mov	r0, sl
    58d2:	4320      	orrs	r0, r4
    58d4:	1e44      	subs	r4, r0, #1
    58d6:	41a0      	sbcs	r0, r4
    58d8:	2400      	movs	r4, #0
    58da:	4338      	orrs	r0, r7
    58dc:	e6dc      	b.n	5698 <__aeabi_dsub+0x388>
    58de:	2480      	movs	r4, #128	; 0x80
    58e0:	2500      	movs	r5, #0
    58e2:	0324      	lsls	r4, r4, #12
    58e4:	4e13      	ldr	r6, [pc, #76]	; (5934 <__aeabi_dsub+0x624>)
    58e6:	2700      	movs	r7, #0
    58e8:	e5d3      	b.n	5492 <__aeabi_dsub+0x182>
    58ea:	4650      	mov	r0, sl
    58ec:	4320      	orrs	r0, r4
    58ee:	0007      	movs	r7, r0
    58f0:	1e78      	subs	r0, r7, #1
    58f2:	4187      	sbcs	r7, r0
    58f4:	2400      	movs	r4, #0
    58f6:	18bf      	adds	r7, r7, r2
    58f8:	e760      	b.n	57bc <__aeabi_dsub+0x4ac>
    58fa:	000c      	movs	r4, r1
    58fc:	0017      	movs	r7, r2
    58fe:	e58d      	b.n	541c <__aeabi_dsub+0x10c>
    5900:	000c      	movs	r4, r1
    5902:	0017      	movs	r7, r2
    5904:	4e0b      	ldr	r6, [pc, #44]	; (5934 <__aeabi_dsub+0x624>)
    5906:	e589      	b.n	541c <__aeabi_dsub+0x10c>
    5908:	001e      	movs	r6, r3
    590a:	0027      	movs	r7, r4
    590c:	3e20      	subs	r6, #32
    590e:	40f7      	lsrs	r7, r6
    5910:	2b20      	cmp	r3, #32
    5912:	d00c      	beq.n	592e <__aeabi_dsub+0x61e>
    5914:	2640      	movs	r6, #64	; 0x40
    5916:	1af3      	subs	r3, r6, r3
    5918:	409c      	lsls	r4, r3
    591a:	4650      	mov	r0, sl
    591c:	4320      	orrs	r0, r4
    591e:	1e44      	subs	r4, r0, #1
    5920:	41a0      	sbcs	r0, r4
    5922:	4307      	orrs	r7, r0
    5924:	2400      	movs	r4, #0
    5926:	18bf      	adds	r7, r7, r2
    5928:	e748      	b.n	57bc <__aeabi_dsub+0x4ac>
    592a:	2400      	movs	r4, #0
    592c:	e7d0      	b.n	58d0 <__aeabi_dsub+0x5c0>
    592e:	2400      	movs	r4, #0
    5930:	e7f3      	b.n	591a <__aeabi_dsub+0x60a>
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	000007ff 	.word	0x000007ff
    5938:	ff7fffff 	.word	0xff7fffff

0000593c <__aeabi_dcmpun>:
    593c:	b570      	push	{r4, r5, r6, lr}
    593e:	4e0e      	ldr	r6, [pc, #56]	; (5978 <__aeabi_dcmpun+0x3c>)
    5940:	030d      	lsls	r5, r1, #12
    5942:	031c      	lsls	r4, r3, #12
    5944:	0049      	lsls	r1, r1, #1
    5946:	005b      	lsls	r3, r3, #1
    5948:	0b2d      	lsrs	r5, r5, #12
    594a:	0d49      	lsrs	r1, r1, #21
    594c:	0b24      	lsrs	r4, r4, #12
    594e:	0d5b      	lsrs	r3, r3, #21
    5950:	42b1      	cmp	r1, r6
    5952:	d004      	beq.n	595e <__aeabi_dcmpun+0x22>
    5954:	4908      	ldr	r1, [pc, #32]	; (5978 <__aeabi_dcmpun+0x3c>)
    5956:	2000      	movs	r0, #0
    5958:	428b      	cmp	r3, r1
    595a:	d008      	beq.n	596e <__aeabi_dcmpun+0x32>
    595c:	bd70      	pop	{r4, r5, r6, pc}
    595e:	4305      	orrs	r5, r0
    5960:	2001      	movs	r0, #1
    5962:	2d00      	cmp	r5, #0
    5964:	d1fa      	bne.n	595c <__aeabi_dcmpun+0x20>
    5966:	4904      	ldr	r1, [pc, #16]	; (5978 <__aeabi_dcmpun+0x3c>)
    5968:	2000      	movs	r0, #0
    596a:	428b      	cmp	r3, r1
    596c:	d1f6      	bne.n	595c <__aeabi_dcmpun+0x20>
    596e:	4314      	orrs	r4, r2
    5970:	0020      	movs	r0, r4
    5972:	1e44      	subs	r4, r0, #1
    5974:	41a0      	sbcs	r0, r4
    5976:	e7f1      	b.n	595c <__aeabi_dcmpun+0x20>
    5978:	000007ff 	.word	0x000007ff

0000597c <__aeabi_d2iz>:
    597c:	b530      	push	{r4, r5, lr}
    597e:	4d13      	ldr	r5, [pc, #76]	; (59cc <__aeabi_d2iz+0x50>)
    5980:	030a      	lsls	r2, r1, #12
    5982:	004b      	lsls	r3, r1, #1
    5984:	0b12      	lsrs	r2, r2, #12
    5986:	0d5b      	lsrs	r3, r3, #21
    5988:	0fc9      	lsrs	r1, r1, #31
    598a:	2400      	movs	r4, #0
    598c:	42ab      	cmp	r3, r5
    598e:	dd10      	ble.n	59b2 <__aeabi_d2iz+0x36>
    5990:	4c0f      	ldr	r4, [pc, #60]	; (59d0 <__aeabi_d2iz+0x54>)
    5992:	42a3      	cmp	r3, r4
    5994:	dc0f      	bgt.n	59b6 <__aeabi_d2iz+0x3a>
    5996:	2480      	movs	r4, #128	; 0x80
    5998:	4d0e      	ldr	r5, [pc, #56]	; (59d4 <__aeabi_d2iz+0x58>)
    599a:	0364      	lsls	r4, r4, #13
    599c:	4322      	orrs	r2, r4
    599e:	1aed      	subs	r5, r5, r3
    59a0:	2d1f      	cmp	r5, #31
    59a2:	dd0b      	ble.n	59bc <__aeabi_d2iz+0x40>
    59a4:	480c      	ldr	r0, [pc, #48]	; (59d8 <__aeabi_d2iz+0x5c>)
    59a6:	1ac3      	subs	r3, r0, r3
    59a8:	40da      	lsrs	r2, r3
    59aa:	4254      	negs	r4, r2
    59ac:	2900      	cmp	r1, #0
    59ae:	d100      	bne.n	59b2 <__aeabi_d2iz+0x36>
    59b0:	0014      	movs	r4, r2
    59b2:	0020      	movs	r0, r4
    59b4:	bd30      	pop	{r4, r5, pc}
    59b6:	4b09      	ldr	r3, [pc, #36]	; (59dc <__aeabi_d2iz+0x60>)
    59b8:	18cc      	adds	r4, r1, r3
    59ba:	e7fa      	b.n	59b2 <__aeabi_d2iz+0x36>
    59bc:	4c08      	ldr	r4, [pc, #32]	; (59e0 <__aeabi_d2iz+0x64>)
    59be:	40e8      	lsrs	r0, r5
    59c0:	46a4      	mov	ip, r4
    59c2:	4463      	add	r3, ip
    59c4:	409a      	lsls	r2, r3
    59c6:	4302      	orrs	r2, r0
    59c8:	e7ef      	b.n	59aa <__aeabi_d2iz+0x2e>
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	000003fe 	.word	0x000003fe
    59d0:	0000041d 	.word	0x0000041d
    59d4:	00000433 	.word	0x00000433
    59d8:	00000413 	.word	0x00000413
    59dc:	7fffffff 	.word	0x7fffffff
    59e0:	fffffbed 	.word	0xfffffbed

000059e4 <__aeabi_ui2d>:
    59e4:	b510      	push	{r4, lr}
    59e6:	1e04      	subs	r4, r0, #0
    59e8:	d028      	beq.n	5a3c <__aeabi_ui2d+0x58>
    59ea:	f000 f885 	bl	5af8 <__clzsi2>
    59ee:	4b15      	ldr	r3, [pc, #84]	; (5a44 <__aeabi_ui2d+0x60>)
    59f0:	4a15      	ldr	r2, [pc, #84]	; (5a48 <__aeabi_ui2d+0x64>)
    59f2:	1a1b      	subs	r3, r3, r0
    59f4:	1ad2      	subs	r2, r2, r3
    59f6:	2a1f      	cmp	r2, #31
    59f8:	dd15      	ble.n	5a26 <__aeabi_ui2d+0x42>
    59fa:	4a14      	ldr	r2, [pc, #80]	; (5a4c <__aeabi_ui2d+0x68>)
    59fc:	1ad2      	subs	r2, r2, r3
    59fe:	4094      	lsls	r4, r2
    5a00:	2200      	movs	r2, #0
    5a02:	0324      	lsls	r4, r4, #12
    5a04:	055b      	lsls	r3, r3, #21
    5a06:	0b24      	lsrs	r4, r4, #12
    5a08:	0d5b      	lsrs	r3, r3, #21
    5a0a:	2100      	movs	r1, #0
    5a0c:	0010      	movs	r0, r2
    5a0e:	0324      	lsls	r4, r4, #12
    5a10:	0d0a      	lsrs	r2, r1, #20
    5a12:	0b24      	lsrs	r4, r4, #12
    5a14:	0512      	lsls	r2, r2, #20
    5a16:	4322      	orrs	r2, r4
    5a18:	4c0d      	ldr	r4, [pc, #52]	; (5a50 <__aeabi_ui2d+0x6c>)
    5a1a:	051b      	lsls	r3, r3, #20
    5a1c:	4022      	ands	r2, r4
    5a1e:	4313      	orrs	r3, r2
    5a20:	005b      	lsls	r3, r3, #1
    5a22:	0859      	lsrs	r1, r3, #1
    5a24:	bd10      	pop	{r4, pc}
    5a26:	0021      	movs	r1, r4
    5a28:	4091      	lsls	r1, r2
    5a2a:	000a      	movs	r2, r1
    5a2c:	210b      	movs	r1, #11
    5a2e:	1a08      	subs	r0, r1, r0
    5a30:	40c4      	lsrs	r4, r0
    5a32:	055b      	lsls	r3, r3, #21
    5a34:	0324      	lsls	r4, r4, #12
    5a36:	0b24      	lsrs	r4, r4, #12
    5a38:	0d5b      	lsrs	r3, r3, #21
    5a3a:	e7e6      	b.n	5a0a <__aeabi_ui2d+0x26>
    5a3c:	2300      	movs	r3, #0
    5a3e:	2400      	movs	r4, #0
    5a40:	2200      	movs	r2, #0
    5a42:	e7e2      	b.n	5a0a <__aeabi_ui2d+0x26>
    5a44:	0000041e 	.word	0x0000041e
    5a48:	00000433 	.word	0x00000433
    5a4c:	00000413 	.word	0x00000413
    5a50:	800fffff 	.word	0x800fffff

00005a54 <__aeabi_f2d>:
    5a54:	0041      	lsls	r1, r0, #1
    5a56:	0e09      	lsrs	r1, r1, #24
    5a58:	1c4b      	adds	r3, r1, #1
    5a5a:	b570      	push	{r4, r5, r6, lr}
    5a5c:	b2db      	uxtb	r3, r3
    5a5e:	0246      	lsls	r6, r0, #9
    5a60:	0a75      	lsrs	r5, r6, #9
    5a62:	0fc4      	lsrs	r4, r0, #31
    5a64:	2b01      	cmp	r3, #1
    5a66:	dd14      	ble.n	5a92 <__aeabi_f2d+0x3e>
    5a68:	23e0      	movs	r3, #224	; 0xe0
    5a6a:	009b      	lsls	r3, r3, #2
    5a6c:	076d      	lsls	r5, r5, #29
    5a6e:	0b36      	lsrs	r6, r6, #12
    5a70:	18cb      	adds	r3, r1, r3
    5a72:	2100      	movs	r1, #0
    5a74:	0d0a      	lsrs	r2, r1, #20
    5a76:	0028      	movs	r0, r5
    5a78:	0512      	lsls	r2, r2, #20
    5a7a:	4d1c      	ldr	r5, [pc, #112]	; (5aec <__aeabi_f2d+0x98>)
    5a7c:	4332      	orrs	r2, r6
    5a7e:	055b      	lsls	r3, r3, #21
    5a80:	402a      	ands	r2, r5
    5a82:	085b      	lsrs	r3, r3, #1
    5a84:	4313      	orrs	r3, r2
    5a86:	005b      	lsls	r3, r3, #1
    5a88:	07e4      	lsls	r4, r4, #31
    5a8a:	085b      	lsrs	r3, r3, #1
    5a8c:	4323      	orrs	r3, r4
    5a8e:	0019      	movs	r1, r3
    5a90:	bd70      	pop	{r4, r5, r6, pc}
    5a92:	2900      	cmp	r1, #0
    5a94:	d114      	bne.n	5ac0 <__aeabi_f2d+0x6c>
    5a96:	2d00      	cmp	r5, #0
    5a98:	d01e      	beq.n	5ad8 <__aeabi_f2d+0x84>
    5a9a:	0028      	movs	r0, r5
    5a9c:	f000 f82c 	bl	5af8 <__clzsi2>
    5aa0:	280a      	cmp	r0, #10
    5aa2:	dc1c      	bgt.n	5ade <__aeabi_f2d+0x8a>
    5aa4:	230b      	movs	r3, #11
    5aa6:	002a      	movs	r2, r5
    5aa8:	1a1b      	subs	r3, r3, r0
    5aaa:	40da      	lsrs	r2, r3
    5aac:	0003      	movs	r3, r0
    5aae:	3315      	adds	r3, #21
    5ab0:	409d      	lsls	r5, r3
    5ab2:	4b0f      	ldr	r3, [pc, #60]	; (5af0 <__aeabi_f2d+0x9c>)
    5ab4:	0312      	lsls	r2, r2, #12
    5ab6:	1a1b      	subs	r3, r3, r0
    5ab8:	055b      	lsls	r3, r3, #21
    5aba:	0b16      	lsrs	r6, r2, #12
    5abc:	0d5b      	lsrs	r3, r3, #21
    5abe:	e7d8      	b.n	5a72 <__aeabi_f2d+0x1e>
    5ac0:	2d00      	cmp	r5, #0
    5ac2:	d006      	beq.n	5ad2 <__aeabi_f2d+0x7e>
    5ac4:	0b32      	lsrs	r2, r6, #12
    5ac6:	2680      	movs	r6, #128	; 0x80
    5ac8:	0336      	lsls	r6, r6, #12
    5aca:	076d      	lsls	r5, r5, #29
    5acc:	4316      	orrs	r6, r2
    5ace:	4b09      	ldr	r3, [pc, #36]	; (5af4 <__aeabi_f2d+0xa0>)
    5ad0:	e7cf      	b.n	5a72 <__aeabi_f2d+0x1e>
    5ad2:	4b08      	ldr	r3, [pc, #32]	; (5af4 <__aeabi_f2d+0xa0>)
    5ad4:	2600      	movs	r6, #0
    5ad6:	e7cc      	b.n	5a72 <__aeabi_f2d+0x1e>
    5ad8:	2300      	movs	r3, #0
    5ada:	2600      	movs	r6, #0
    5adc:	e7c9      	b.n	5a72 <__aeabi_f2d+0x1e>
    5ade:	0003      	movs	r3, r0
    5ae0:	002a      	movs	r2, r5
    5ae2:	3b0b      	subs	r3, #11
    5ae4:	409a      	lsls	r2, r3
    5ae6:	2500      	movs	r5, #0
    5ae8:	e7e3      	b.n	5ab2 <__aeabi_f2d+0x5e>
    5aea:	46c0      	nop			; (mov r8, r8)
    5aec:	800fffff 	.word	0x800fffff
    5af0:	00000389 	.word	0x00000389
    5af4:	000007ff 	.word	0x000007ff

00005af8 <__clzsi2>:
    5af8:	211c      	movs	r1, #28
    5afa:	2301      	movs	r3, #1
    5afc:	041b      	lsls	r3, r3, #16
    5afe:	4298      	cmp	r0, r3
    5b00:	d301      	bcc.n	5b06 <__clzsi2+0xe>
    5b02:	0c00      	lsrs	r0, r0, #16
    5b04:	3910      	subs	r1, #16
    5b06:	0a1b      	lsrs	r3, r3, #8
    5b08:	4298      	cmp	r0, r3
    5b0a:	d301      	bcc.n	5b10 <__clzsi2+0x18>
    5b0c:	0a00      	lsrs	r0, r0, #8
    5b0e:	3908      	subs	r1, #8
    5b10:	091b      	lsrs	r3, r3, #4
    5b12:	4298      	cmp	r0, r3
    5b14:	d301      	bcc.n	5b1a <__clzsi2+0x22>
    5b16:	0900      	lsrs	r0, r0, #4
    5b18:	3904      	subs	r1, #4
    5b1a:	a202      	add	r2, pc, #8	; (adr r2, 5b24 <__clzsi2+0x2c>)
    5b1c:	5c10      	ldrb	r0, [r2, r0]
    5b1e:	1840      	adds	r0, r0, r1
    5b20:	4770      	bx	lr
    5b22:	46c0      	nop			; (mov r8, r8)
    5b24:	02020304 	.word	0x02020304
    5b28:	01010101 	.word	0x01010101
	...

00005b34 <__cxa_atexit>:
    5b34:	b570      	push	{r4, r5, r6, lr}
    5b36:	4c05      	ldr	r4, [pc, #20]	; (5b4c <__cxa_atexit+0x18>)
    5b38:	0005      	movs	r5, r0
    5b3a:	0013      	movs	r3, r2
    5b3c:	1e20      	subs	r0, r4, #0
    5b3e:	d004      	beq.n	5b4a <__cxa_atexit+0x16>
    5b40:	000a      	movs	r2, r1
    5b42:	2002      	movs	r0, #2
    5b44:	0029      	movs	r1, r5
    5b46:	e000      	b.n	5b4a <__cxa_atexit+0x16>
    5b48:	bf00      	nop
    5b4a:	bd70      	pop	{r4, r5, r6, pc}
    5b4c:	00000000 	.word	0x00000000

00005b50 <__libc_init_array>:
    5b50:	b570      	push	{r4, r5, r6, lr}
    5b52:	2600      	movs	r6, #0
    5b54:	4d0c      	ldr	r5, [pc, #48]	; (5b88 <__libc_init_array+0x38>)
    5b56:	4c0d      	ldr	r4, [pc, #52]	; (5b8c <__libc_init_array+0x3c>)
    5b58:	1b64      	subs	r4, r4, r5
    5b5a:	10a4      	asrs	r4, r4, #2
    5b5c:	42a6      	cmp	r6, r4
    5b5e:	d109      	bne.n	5b74 <__libc_init_array+0x24>
    5b60:	2600      	movs	r6, #0
    5b62:	f000 f965 	bl	5e30 <_init>
    5b66:	4d0a      	ldr	r5, [pc, #40]	; (5b90 <__libc_init_array+0x40>)
    5b68:	4c0a      	ldr	r4, [pc, #40]	; (5b94 <__libc_init_array+0x44>)
    5b6a:	1b64      	subs	r4, r4, r5
    5b6c:	10a4      	asrs	r4, r4, #2
    5b6e:	42a6      	cmp	r6, r4
    5b70:	d105      	bne.n	5b7e <__libc_init_array+0x2e>
    5b72:	bd70      	pop	{r4, r5, r6, pc}
    5b74:	00b3      	lsls	r3, r6, #2
    5b76:	58eb      	ldr	r3, [r5, r3]
    5b78:	4798      	blx	r3
    5b7a:	3601      	adds	r6, #1
    5b7c:	e7ee      	b.n	5b5c <__libc_init_array+0xc>
    5b7e:	00b3      	lsls	r3, r6, #2
    5b80:	58eb      	ldr	r3, [r5, r3]
    5b82:	4798      	blx	r3
    5b84:	3601      	adds	r6, #1
    5b86:	e7f2      	b.n	5b6e <__libc_init_array+0x1e>
    5b88:	2000008c 	.word	0x2000008c
    5b8c:	2000008c 	.word	0x2000008c
    5b90:	2000008c 	.word	0x2000008c
    5b94:	200000a8 	.word	0x200000a8

00005b98 <malloc>:
    5b98:	b510      	push	{r4, lr}
    5b9a:	4b03      	ldr	r3, [pc, #12]	; (5ba8 <malloc+0x10>)
    5b9c:	0001      	movs	r1, r0
    5b9e:	6818      	ldr	r0, [r3, #0]
    5ba0:	f000 f86a 	bl	5c78 <_malloc_r>
    5ba4:	bd10      	pop	{r4, pc}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	20000028 	.word	0x20000028

00005bac <free>:
    5bac:	b510      	push	{r4, lr}
    5bae:	4b03      	ldr	r3, [pc, #12]	; (5bbc <free+0x10>)
    5bb0:	0001      	movs	r1, r0
    5bb2:	6818      	ldr	r0, [r3, #0]
    5bb4:	f000 f816 	bl	5be4 <_free_r>
    5bb8:	bd10      	pop	{r4, pc}
    5bba:	46c0      	nop			; (mov r8, r8)
    5bbc:	20000028 	.word	0x20000028

00005bc0 <memcpy>:
    5bc0:	2300      	movs	r3, #0
    5bc2:	b510      	push	{r4, lr}
    5bc4:	429a      	cmp	r2, r3
    5bc6:	d100      	bne.n	5bca <memcpy+0xa>
    5bc8:	bd10      	pop	{r4, pc}
    5bca:	5ccc      	ldrb	r4, [r1, r3]
    5bcc:	54c4      	strb	r4, [r0, r3]
    5bce:	3301      	adds	r3, #1
    5bd0:	e7f8      	b.n	5bc4 <memcpy+0x4>

00005bd2 <memset>:
    5bd2:	0003      	movs	r3, r0
    5bd4:	1882      	adds	r2, r0, r2
    5bd6:	4293      	cmp	r3, r2
    5bd8:	d100      	bne.n	5bdc <memset+0xa>
    5bda:	4770      	bx	lr
    5bdc:	7019      	strb	r1, [r3, #0]
    5bde:	3301      	adds	r3, #1
    5be0:	e7f9      	b.n	5bd6 <memset+0x4>
	...

00005be4 <_free_r>:
    5be4:	b570      	push	{r4, r5, r6, lr}
    5be6:	0005      	movs	r5, r0
    5be8:	2900      	cmp	r1, #0
    5bea:	d010      	beq.n	5c0e <_free_r+0x2a>
    5bec:	1f0c      	subs	r4, r1, #4
    5bee:	6823      	ldr	r3, [r4, #0]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	da00      	bge.n	5bf6 <_free_r+0x12>
    5bf4:	18e4      	adds	r4, r4, r3
    5bf6:	0028      	movs	r0, r5
    5bf8:	f000 f8dc 	bl	5db4 <__malloc_lock>
    5bfc:	4a1d      	ldr	r2, [pc, #116]	; (5c74 <_free_r+0x90>)
    5bfe:	6813      	ldr	r3, [r2, #0]
    5c00:	2b00      	cmp	r3, #0
    5c02:	d105      	bne.n	5c10 <_free_r+0x2c>
    5c04:	6063      	str	r3, [r4, #4]
    5c06:	6014      	str	r4, [r2, #0]
    5c08:	0028      	movs	r0, r5
    5c0a:	f000 f8d4 	bl	5db6 <__malloc_unlock>
    5c0e:	bd70      	pop	{r4, r5, r6, pc}
    5c10:	42a3      	cmp	r3, r4
    5c12:	d909      	bls.n	5c28 <_free_r+0x44>
    5c14:	6821      	ldr	r1, [r4, #0]
    5c16:	1860      	adds	r0, r4, r1
    5c18:	4283      	cmp	r3, r0
    5c1a:	d1f3      	bne.n	5c04 <_free_r+0x20>
    5c1c:	6818      	ldr	r0, [r3, #0]
    5c1e:	685b      	ldr	r3, [r3, #4]
    5c20:	1841      	adds	r1, r0, r1
    5c22:	6021      	str	r1, [r4, #0]
    5c24:	e7ee      	b.n	5c04 <_free_r+0x20>
    5c26:	0013      	movs	r3, r2
    5c28:	685a      	ldr	r2, [r3, #4]
    5c2a:	2a00      	cmp	r2, #0
    5c2c:	d001      	beq.n	5c32 <_free_r+0x4e>
    5c2e:	42a2      	cmp	r2, r4
    5c30:	d9f9      	bls.n	5c26 <_free_r+0x42>
    5c32:	6819      	ldr	r1, [r3, #0]
    5c34:	1858      	adds	r0, r3, r1
    5c36:	42a0      	cmp	r0, r4
    5c38:	d10b      	bne.n	5c52 <_free_r+0x6e>
    5c3a:	6820      	ldr	r0, [r4, #0]
    5c3c:	1809      	adds	r1, r1, r0
    5c3e:	1858      	adds	r0, r3, r1
    5c40:	6019      	str	r1, [r3, #0]
    5c42:	4282      	cmp	r2, r0
    5c44:	d1e0      	bne.n	5c08 <_free_r+0x24>
    5c46:	6810      	ldr	r0, [r2, #0]
    5c48:	6852      	ldr	r2, [r2, #4]
    5c4a:	1841      	adds	r1, r0, r1
    5c4c:	6019      	str	r1, [r3, #0]
    5c4e:	605a      	str	r2, [r3, #4]
    5c50:	e7da      	b.n	5c08 <_free_r+0x24>
    5c52:	42a0      	cmp	r0, r4
    5c54:	d902      	bls.n	5c5c <_free_r+0x78>
    5c56:	230c      	movs	r3, #12
    5c58:	602b      	str	r3, [r5, #0]
    5c5a:	e7d5      	b.n	5c08 <_free_r+0x24>
    5c5c:	6821      	ldr	r1, [r4, #0]
    5c5e:	1860      	adds	r0, r4, r1
    5c60:	4282      	cmp	r2, r0
    5c62:	d103      	bne.n	5c6c <_free_r+0x88>
    5c64:	6810      	ldr	r0, [r2, #0]
    5c66:	6852      	ldr	r2, [r2, #4]
    5c68:	1841      	adds	r1, r0, r1
    5c6a:	6021      	str	r1, [r4, #0]
    5c6c:	6062      	str	r2, [r4, #4]
    5c6e:	605c      	str	r4, [r3, #4]
    5c70:	e7ca      	b.n	5c08 <_free_r+0x24>
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	20000d18 	.word	0x20000d18

00005c78 <_malloc_r>:
    5c78:	2303      	movs	r3, #3
    5c7a:	b570      	push	{r4, r5, r6, lr}
    5c7c:	1ccd      	adds	r5, r1, #3
    5c7e:	439d      	bics	r5, r3
    5c80:	3508      	adds	r5, #8
    5c82:	0006      	movs	r6, r0
    5c84:	2d0c      	cmp	r5, #12
    5c86:	d21e      	bcs.n	5cc6 <_malloc_r+0x4e>
    5c88:	250c      	movs	r5, #12
    5c8a:	42a9      	cmp	r1, r5
    5c8c:	d81d      	bhi.n	5cca <_malloc_r+0x52>
    5c8e:	0030      	movs	r0, r6
    5c90:	f000 f890 	bl	5db4 <__malloc_lock>
    5c94:	4a25      	ldr	r2, [pc, #148]	; (5d2c <_malloc_r+0xb4>)
    5c96:	6814      	ldr	r4, [r2, #0]
    5c98:	0021      	movs	r1, r4
    5c9a:	2900      	cmp	r1, #0
    5c9c:	d119      	bne.n	5cd2 <_malloc_r+0x5a>
    5c9e:	4c24      	ldr	r4, [pc, #144]	; (5d30 <_malloc_r+0xb8>)
    5ca0:	6823      	ldr	r3, [r4, #0]
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d103      	bne.n	5cae <_malloc_r+0x36>
    5ca6:	0030      	movs	r0, r6
    5ca8:	f000 f84e 	bl	5d48 <_sbrk_r>
    5cac:	6020      	str	r0, [r4, #0]
    5cae:	0029      	movs	r1, r5
    5cb0:	0030      	movs	r0, r6
    5cb2:	f000 f849 	bl	5d48 <_sbrk_r>
    5cb6:	1c43      	adds	r3, r0, #1
    5cb8:	d12c      	bne.n	5d14 <_malloc_r+0x9c>
    5cba:	230c      	movs	r3, #12
    5cbc:	0030      	movs	r0, r6
    5cbe:	6033      	str	r3, [r6, #0]
    5cc0:	f000 f879 	bl	5db6 <__malloc_unlock>
    5cc4:	e003      	b.n	5cce <_malloc_r+0x56>
    5cc6:	2d00      	cmp	r5, #0
    5cc8:	dadf      	bge.n	5c8a <_malloc_r+0x12>
    5cca:	230c      	movs	r3, #12
    5ccc:	6033      	str	r3, [r6, #0]
    5cce:	2000      	movs	r0, #0
    5cd0:	bd70      	pop	{r4, r5, r6, pc}
    5cd2:	680b      	ldr	r3, [r1, #0]
    5cd4:	1b5b      	subs	r3, r3, r5
    5cd6:	d41a      	bmi.n	5d0e <_malloc_r+0x96>
    5cd8:	2b0b      	cmp	r3, #11
    5cda:	d903      	bls.n	5ce4 <_malloc_r+0x6c>
    5cdc:	600b      	str	r3, [r1, #0]
    5cde:	18cc      	adds	r4, r1, r3
    5ce0:	6025      	str	r5, [r4, #0]
    5ce2:	e003      	b.n	5cec <_malloc_r+0x74>
    5ce4:	428c      	cmp	r4, r1
    5ce6:	d10e      	bne.n	5d06 <_malloc_r+0x8e>
    5ce8:	6863      	ldr	r3, [r4, #4]
    5cea:	6013      	str	r3, [r2, #0]
    5cec:	0030      	movs	r0, r6
    5cee:	f000 f862 	bl	5db6 <__malloc_unlock>
    5cf2:	0020      	movs	r0, r4
    5cf4:	2207      	movs	r2, #7
    5cf6:	300b      	adds	r0, #11
    5cf8:	1d23      	adds	r3, r4, #4
    5cfa:	4390      	bics	r0, r2
    5cfc:	1ac3      	subs	r3, r0, r3
    5cfe:	d0e7      	beq.n	5cd0 <_malloc_r+0x58>
    5d00:	425a      	negs	r2, r3
    5d02:	50e2      	str	r2, [r4, r3]
    5d04:	e7e4      	b.n	5cd0 <_malloc_r+0x58>
    5d06:	684b      	ldr	r3, [r1, #4]
    5d08:	6063      	str	r3, [r4, #4]
    5d0a:	000c      	movs	r4, r1
    5d0c:	e7ee      	b.n	5cec <_malloc_r+0x74>
    5d0e:	000c      	movs	r4, r1
    5d10:	6849      	ldr	r1, [r1, #4]
    5d12:	e7c2      	b.n	5c9a <_malloc_r+0x22>
    5d14:	2303      	movs	r3, #3
    5d16:	1cc4      	adds	r4, r0, #3
    5d18:	439c      	bics	r4, r3
    5d1a:	42a0      	cmp	r0, r4
    5d1c:	d0e0      	beq.n	5ce0 <_malloc_r+0x68>
    5d1e:	1a21      	subs	r1, r4, r0
    5d20:	0030      	movs	r0, r6
    5d22:	f000 f811 	bl	5d48 <_sbrk_r>
    5d26:	1c43      	adds	r3, r0, #1
    5d28:	d1da      	bne.n	5ce0 <_malloc_r+0x68>
    5d2a:	e7c6      	b.n	5cba <_malloc_r+0x42>
    5d2c:	20000d18 	.word	0x20000d18
    5d30:	20000d1c 	.word	0x20000d1c

00005d34 <realloc>:
    5d34:	b510      	push	{r4, lr}
    5d36:	4b03      	ldr	r3, [pc, #12]	; (5d44 <realloc+0x10>)
    5d38:	000a      	movs	r2, r1
    5d3a:	0001      	movs	r1, r0
    5d3c:	6818      	ldr	r0, [r3, #0]
    5d3e:	f000 f83b 	bl	5db8 <_realloc_r>
    5d42:	bd10      	pop	{r4, pc}
    5d44:	20000028 	.word	0x20000028

00005d48 <_sbrk_r>:
    5d48:	2300      	movs	r3, #0
    5d4a:	b570      	push	{r4, r5, r6, lr}
    5d4c:	4c06      	ldr	r4, [pc, #24]	; (5d68 <_sbrk_r+0x20>)
    5d4e:	0005      	movs	r5, r0
    5d50:	0008      	movs	r0, r1
    5d52:	6023      	str	r3, [r4, #0]
    5d54:	f000 f85e 	bl	5e14 <_sbrk>
    5d58:	1c43      	adds	r3, r0, #1
    5d5a:	d103      	bne.n	5d64 <_sbrk_r+0x1c>
    5d5c:	6823      	ldr	r3, [r4, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d000      	beq.n	5d64 <_sbrk_r+0x1c>
    5d62:	602b      	str	r3, [r5, #0]
    5d64:	bd70      	pop	{r4, r5, r6, pc}
    5d66:	46c0      	nop			; (mov r8, r8)
    5d68:	20000d24 	.word	0x20000d24

00005d6c <strcpy>:
    5d6c:	1c03      	adds	r3, r0, #0
    5d6e:	780a      	ldrb	r2, [r1, #0]
    5d70:	3101      	adds	r1, #1
    5d72:	701a      	strb	r2, [r3, #0]
    5d74:	3301      	adds	r3, #1
    5d76:	2a00      	cmp	r2, #0
    5d78:	d1f9      	bne.n	5d6e <strcpy+0x2>
    5d7a:	4770      	bx	lr

00005d7c <strlen>:
    5d7c:	2300      	movs	r3, #0
    5d7e:	5cc2      	ldrb	r2, [r0, r3]
    5d80:	3301      	adds	r3, #1
    5d82:	2a00      	cmp	r2, #0
    5d84:	d1fb      	bne.n	5d7e <strlen+0x2>
    5d86:	1e58      	subs	r0, r3, #1
    5d88:	4770      	bx	lr

00005d8a <strncpy>:
    5d8a:	b570      	push	{r4, r5, r6, lr}
    5d8c:	0004      	movs	r4, r0
    5d8e:	2a00      	cmp	r2, #0
    5d90:	d100      	bne.n	5d94 <strncpy+0xa>
    5d92:	bd70      	pop	{r4, r5, r6, pc}
    5d94:	780d      	ldrb	r5, [r1, #0]
    5d96:	1e56      	subs	r6, r2, #1
    5d98:	1c63      	adds	r3, r4, #1
    5d9a:	7025      	strb	r5, [r4, #0]
    5d9c:	3101      	adds	r1, #1
    5d9e:	2d00      	cmp	r5, #0
    5da0:	d105      	bne.n	5dae <strncpy+0x24>
    5da2:	18a4      	adds	r4, r4, r2
    5da4:	429c      	cmp	r4, r3
    5da6:	d0f4      	beq.n	5d92 <strncpy+0x8>
    5da8:	701d      	strb	r5, [r3, #0]
    5daa:	3301      	adds	r3, #1
    5dac:	e7fa      	b.n	5da4 <strncpy+0x1a>
    5dae:	001c      	movs	r4, r3
    5db0:	0032      	movs	r2, r6
    5db2:	e7ec      	b.n	5d8e <strncpy+0x4>

00005db4 <__malloc_lock>:
    5db4:	4770      	bx	lr

00005db6 <__malloc_unlock>:
    5db6:	4770      	bx	lr

00005db8 <_realloc_r>:
    5db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dba:	0007      	movs	r7, r0
    5dbc:	000d      	movs	r5, r1
    5dbe:	0016      	movs	r6, r2
    5dc0:	2900      	cmp	r1, #0
    5dc2:	d105      	bne.n	5dd0 <_realloc_r+0x18>
    5dc4:	0011      	movs	r1, r2
    5dc6:	f7ff ff57 	bl	5c78 <_malloc_r>
    5dca:	0004      	movs	r4, r0
    5dcc:	0020      	movs	r0, r4
    5dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dd0:	2a00      	cmp	r2, #0
    5dd2:	d103      	bne.n	5ddc <_realloc_r+0x24>
    5dd4:	f7ff ff06 	bl	5be4 <_free_r>
    5dd8:	0034      	movs	r4, r6
    5dda:	e7f7      	b.n	5dcc <_realloc_r+0x14>
    5ddc:	f000 f812 	bl	5e04 <_malloc_usable_size_r>
    5de0:	002c      	movs	r4, r5
    5de2:	4286      	cmp	r6, r0
    5de4:	d9f2      	bls.n	5dcc <_realloc_r+0x14>
    5de6:	0031      	movs	r1, r6
    5de8:	0038      	movs	r0, r7
    5dea:	f7ff ff45 	bl	5c78 <_malloc_r>
    5dee:	1e04      	subs	r4, r0, #0
    5df0:	d0ec      	beq.n	5dcc <_realloc_r+0x14>
    5df2:	0029      	movs	r1, r5
    5df4:	0032      	movs	r2, r6
    5df6:	f7ff fee3 	bl	5bc0 <memcpy>
    5dfa:	0029      	movs	r1, r5
    5dfc:	0038      	movs	r0, r7
    5dfe:	f7ff fef1 	bl	5be4 <_free_r>
    5e02:	e7e3      	b.n	5dcc <_realloc_r+0x14>

00005e04 <_malloc_usable_size_r>:
    5e04:	1f0b      	subs	r3, r1, #4
    5e06:	681b      	ldr	r3, [r3, #0]
    5e08:	1f18      	subs	r0, r3, #4
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	da01      	bge.n	5e12 <_malloc_usable_size_r+0xe>
    5e0e:	580b      	ldr	r3, [r1, r0]
    5e10:	18c0      	adds	r0, r0, r3
    5e12:	4770      	bx	lr

00005e14 <_sbrk>:
    5e14:	4a04      	ldr	r2, [pc, #16]	; (5e28 <_sbrk+0x14>)
    5e16:	6813      	ldr	r3, [r2, #0]
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d003      	beq.n	5e24 <_sbrk+0x10>
    5e1c:	1818      	adds	r0, r3, r0
    5e1e:	6010      	str	r0, [r2, #0]
    5e20:	0018      	movs	r0, r3
    5e22:	4770      	bx	lr
    5e24:	4b01      	ldr	r3, [pc, #4]	; (5e2c <_sbrk+0x18>)
    5e26:	e7f9      	b.n	5e1c <_sbrk+0x8>
    5e28:	20000d20 	.word	0x20000d20
    5e2c:	20000d28 	.word	0x20000d28

00005e30 <_init>:
    5e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5e36:	bc08      	pop	{r3}
    5e38:	469e      	mov	lr, r3
    5e3a:	4770      	bx	lr

00005e3c <_fini>:
    5e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e3e:	46c0      	nop			; (mov r8, r8)
    5e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5e42:	bc08      	pop	{r3}
    5e44:	469e      	mov	lr, r3
    5e46:	4770      	bx	lr
    5e48:	74736554 	.word	0x74736554
    5e4c:	72745320 	.word	0x72745320
    5e50:	20676e69 	.word	0x20676e69
    5e54:	65540030 	.word	0x65540030
    5e58:	53207473 	.word	0x53207473
    5e5c:	6e697274 	.word	0x6e697274
    5e60:	00312067 	.word	0x00312067
    5e64:	74736554 	.word	0x74736554
    5e68:	72745320 	.word	0x72745320
    5e6c:	20676e69 	.word	0x20676e69
    5e70:	0032      	.short	0x0032
    5e72:	7942      	.short	0x7942
    5e74:	41206574 	.word	0x41206574
    5e78:	65726464 	.word	0x65726464
    5e7c:	00207373 	.word	0x00207373
    5e80:	30203a20 	.word	0x30203a20
    5e84:	6c460078 	.word	0x6c460078
    5e88:	2074616f 	.word	0x2074616f
    5e8c:	72646441 	.word	0x72646441
    5e90:	20737365 	.word	0x20737365
    5e94:	72745300 	.word	0x72745300
    5e98:	20676e69 	.word	0x20676e69
    5e9c:	72646441 	.word	0x72646441
    5ea0:	20737365 	.word	0x20737365
    5ea4:	00          	.byte	0x00
    5ea5:	27          	.byte	0x27
    5ea6:	2700      	.short	0x2700
    5ea8:	69727720 	.word	0x69727720
    5eac:	6e657474 	.word	0x6e657474
    5eb0:	206f7420 	.word	0x206f7420
    5eb4:	27007830 	.word	0x27007830
    5eb8:	61657220 	.word	0x61657220
    5ebc:	72662064 	.word	0x72662064
    5ec0:	30206d6f 	.word	0x30206d6f
    5ec4:	0078      	.short	0x0078
    5ec6:	6e49      	.short	0x6e49
    5ec8:	61697469 	.word	0x61697469
    5ecc:	6973696c 	.word	0x6973696c
    5ed0:	4620676e 	.word	0x4620676e
    5ed4:	6873616c 	.word	0x6873616c
    5ed8:	6d656d20 	.word	0x6d656d20
    5edc:	0079726f 	.word	0x0079726f
    5ee0:	00666e69 	.word	0x00666e69
    5ee4:	0066766f 	.word	0x0066766f
    5ee8:	006e616e 	.word	0x006e616e
    5eec:	00000a0d 	.word	0x00000a0d

00005ef0 <_ZTV7Serial_>:
	...
    5ef8:	00000b59 00000d99 00000b55 00000d7d     Y.......U...}...
    5f08:	00000d5d 00000dd5 00000db9 00000d8b     ]...............
    5f18:	00000b6d 00000ab5 00000ca5 00000aed     m...............
    5f28:	00000b41 fffffff0 00000000 00000d4d     A...........M...
    5f38:	00000c95 00000ab9 00000b45 00000b31     ........E...1...

00005f48 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    5f50:	00001175 0000142b 00001413 000013f1     u...+...........
    5f60:	00000fd9 00000fdb 000010c9              ............

00005f6c <_ZL14STRING_PRODUCT>:
    5f6c:	75647241 206f6e69 20524b4d 69466957     Arduino MKR WiFi
    5f7c:	31303120 03040030                                 1010.

00005f82 <_ZL15STRING_LANGUAGE>:
    5f82:	04090304                                ....

00005f86 <_ZL19STRING_MANUFACTURER>:
    5f86:	75647241 206f6e69 00434c4c              Arduino LLC.

00005f92 <_ZL21USB_DeviceDescriptorB>:
    5f92:	02000112 400102ef 80542341 02010100     .......@A#T.....
    5fa2:	11100103 15141312 19181716 4b434241     ............ABCK
    5fb2:	37130100 00000000 00000001 00000002     ...7............
    5fc2:	00000004 00000008 00000010 00000020     ............ ...
    5fd2:	00000040 00000080 00000100 00000200     @...............
    5fe2:	00000020 00000040 00000080 00000080      ...@...........
    5ff2:	00000004 00000008 00000040 bfef0008     ........@.......
    6002:	62201f01 30c237c8 00002620                       .. b.7.0 &

0000600c <g_APinDescription>:
    600c:	00000000 00000016 00000008 0000001c     ................
    601c:	040000ff 00060400 00000000 00000017     ................
    602c:	00000008 0000001c 040100ff 00070401     ................
    603c:	00000000 0000000a 00000008 0000001c     ................
    604c:	01000012 00ff0100 00000000 0000000b     ................
    605c:	00000008 0000001c 01010013 00ff0101     ................
    606c:	00000001 0000000a 00000008 0000001c     ................
    607c:	050000ff 000a0500 00000001 0000000b     ................
    608c:	00000008 0000001c 050100ff 000b0501     ................
    609c:	00000000 00000014 00000008 0000002c     ............,...
    60ac:	000200ff 00040002 00000000 00000015     ................
    60bc:	00000008 0000002c 000300ff 00050003     ....,...........
    60cc:	00000000 00000010 00000002 0000001c     ................
    60dc:	020000ff 00000200 00000000 00000011     ................
    60ec:	00000002 00000004 ffff00ff 0001ffff     ................
    60fc:	00000000 00000013 00000002 0000001c     ................
    610c:	030100ff 00ff0301 00000000 00000008     ................
    611c:	00000003 00000004 ffff0010 0010ffff     ................
    612c:	00000000 00000009 00000003 00000004     ................
    613c:	ffff0011 00ffffff 00000001 00000017     ................
    614c:	00000003 00000004 ffff00ff 00ffffff     ................
    615c:	00000001 00000016 00000003 00000004     ................
    616c:	ffff00ff 00ffffff 00000000 00000002     ................
    617c:	00000001 00000006 ffff0000 00ffffff     ................
    618c:	00000001 00000002 00000001 00000004     ................
    619c:	ffff000a 0002ffff 00000001 00000003     ................
    61ac:	00000001 00000004 ffff000b 0003ffff     ................
    61bc:	00000000 00000004 00000001 0000001c     ................
    61cc:	00000004 00ff0000 00000000 00000005     ................
    61dc:	00000001 0000001c 00010005 00ff0001     ................
    61ec:	00000000 00000006 00000001 00000004     ................
    61fc:	ffff0006 00ffffff 00000000 00000007     ................
    620c:	00000001 00000004 ffff0007 00ffffff     ................
    621c:	00000000 00000018 00000006 00000000     ................
    622c:	ffff00ff 00ffffff 00000000 00000019     ................
    623c:	00000006 00000000 ffff00ff 00ffffff     ................
    624c:	00000000 00000012 00000008 00000004     ................
    625c:	ffff00ff 00ffffff 00000000 00000003     ................
    626c:	00000008 00000004 ffff00ff 00ffffff     ................
    627c:	00000000 0000000c 00000003 00000000     ................
    628c:	ffff00ff 00ffffff 00000000 0000000d     ................
    629c:	00000003 00000000 ffff00ff 00ffffff     ................
    62ac:	00000000 0000000e 00000008 00000000     ................
    62bc:	ffff00ff 00ffffff 00000000 0000000f     ................
    62cc:	00000003 00000000 ffff00ff 00ffffff     ................
    62dc:	00000000 0000001b 00000008 00000000     ................
    62ec:	ffff00ff 000fffff 00000001 00000008     ................
    62fc:	00000008 00000006 ffff0002 00ffffff     ................
    630c:	00000001 00000009 00000001 00000018     ................
    631c:	04010003 00090401 00000000 00000000     ................
    632c:	00000008 00000000 ffff00ff 00ffffff     ................
    633c:	00000000 00000001 00000008 00000000     ................
    634c:	ffff00ff 00ffffff 00000000 0000001c     ................
    635c:	00000008 00000004 ffff00ff 00ffffff     ................

0000636c <_ZTV4Uart>:
	...
    6374:	0000395d 00000615 00003883 0000383f     ]9.......8..?8..
    6384:	00003859 00003a11 00003599 00003589     Y8...:...5...5..
    6394:	0000361d 000035b3 00003585 636e7546     .6...5...5..Func
    63a4:	6e6f6974 65786520 65747563 75732064     tion executed su
    63b4:	73656363 6c756673 4300796c 6b636568     ccessfully.Check
    63c4:	756f7920 69772072 676e6972 6c46202e      your wiring. Fl
    63d4:	20687361 70696863 20736920 2d6e6f6e     ash chip is non-
    63e4:	70736572 69736e6f 002e6576 6e6f632a     responsive..*con
    63f4:	75727473 726f7463 5f666f5f 696f6863     structor_of_choi
    6404:	2e2a6563 69676562 2029286e 20736177     ce*.begin() was 
    6414:	20746f6e 6c6c6163 69206465 6f76206e     not called in vo
    6424:	73206469 70757465 55002928 6c62616e     id setup().Unabl
    6434:	6f742065 65646920 6669746e 68632079     e to identify ch
    6444:	202e7069 20657241 20756f79 65727573     ip. Are you sure
    6454:	69687420 68632073 69207069 75732073      this chip is su
    6464:	726f7070 3f646574 616e5500 20656c62     pported?.Unable 
    6474:	69206f74 746e6564 20796669 61706163     to identify capa
    6484:	79746963 7349202e 69687420 68632073     city. Is this ch
    6494:	6f207069 63696666 6c6c6169 75732079     ip officially su
    64a4:	726f7070 3f646574 20664920 2c746f6e     pported? If not,
    64b4:	656c7020 20657361 69666564 6120656e      please define a
    64c4:	41436020 49434150 20605954 736e6f63      `CAPACITY` cons
    64d4:	746e6174 646e6120 636e6920 6564756c     tant and include
    64e4:	20746920 66206e69 6873616c 6765622e      it in flash.beg
    64f4:	43286e69 43415041 29595449 6843002e     in(CAPACITY)..Ch
    6504:	69207069 75622073 002e7973 656b614d     ip is busy..Make
    6514:	72757320 6c612065 6970206c 6820736e      sure all pins h
    6524:	20657661 6e656562 6e6f6320 7463656e     ave been connect
    6534:	70206465 65706f72 00796c72 65676150     ed properly.Page
    6544:	65766f20 6f6c6672 61682077 65622073      overflow has be
    6554:	64206e65 62617369 2064656c 20646e61     en disabled and 
    6564:	20656874 72646461 20737365 6c6c6163     the address call
    6574:	65206465 65656378 74207364 6d206568     ed exceeds the m
    6584:	726f6d65 6e550079 656c6261 206f7420     emory.Unable to 
    6594:	62616e45 5720656c 69746972 7420676e     Enable Writing t
    65a4:	6863206f 002e7069 61656c50 6d206573     o chip..Please m
    65b4:	20656b61 65727573 65687420 4c4f4820     ake sure the HOL
    65c4:	20262044 54495257 4f525045 54434554     D & WRITEPROTECT
    65d4:	6e697020 72612073 75702065 64656c6c      pins are pulled
    65e4:	20707520 56206f74 54004343 20736968      up to VCC.This 
    65f4:	74636573 6120726f 6165726c 63207964     sector already c
    6604:	61746e6f 20736e69 61746164 6c50002e     ontains data..Pl
    6614:	65736165 6b616d20 75732065 74206572     ease make sure t
    6624:	73206568 6f746365 62207372 676e6965     he sectors being
    6634:	69727720 6e657474 206f7420 20657261      written to are 
    6644:	73617265 002e6465 20756f59 20657261     erased..You are 
    6654:	6e6e7572 20676e69 20776f6c 53206e6f     running low on S
    6664:	2e4d4152 656c5020 20657361 6974706f     RAM. Please opti
    6674:	6573696d 756f7920 72702072 6172676f     mise your progra
    6684:	6f66206d 65622072 72657474 4d415220     m for better RAM
    6694:	61737520 54006567 20736968 636e7566      usage.This func
    66a4:	6e6f6974 20736920 20746f6e 70707573     tion is not supp
    66b4:	6574726f 79622064 65687420 616c6620     orted by the fla
    66c4:	6d206873 726f6d65 61682079 61776472     sh memory hardwa
    66d4:	002e6572 62616e55 7420656c 7573206f     re..Unable to su
    66e4:	6e657073 65722f64 656d7573 65706f20     spend/resume ope
    66f4:	69746172 002e6e6f 74697257 75462065     ration..Write Fu
    6704:	6974636e 68206e6f 66207361 656c6961     nction has faile
    6714:	72652064 63726f72 6b636568 6e55002e     d errorcheck..Un
    6724:	656c6261 206f7420 62616e65 3420656c     able to enable 4
    6734:	7479622d 64612065 73657264 676e6973     -byte addressing
    6744:	6e55002e 656c6261 206f7420 61736964     ..Unable to disa
    6754:	20656c62 79622d34 61206574 65726464     ble 4-byte addre
    6764:	6e697373 54002e67 63206568 20706968     ssing..The chip 
    6774:	63207369 65727275 796c746e 776f7020     is currently pow
    6784:	64657265 776f6420 54002e6e 46206568     ered down..The F
    6794:	6873616c 69686320 6f642070 6e207365     lash chip does n
    67a4:	7320746f 6f707075 53207472 2e504446     ot support SFDP.
    67b4:	616e5500 20656c62 72206f74 20646165     .Unable to read 
    67c4:	73617245 61502065 656d6172 73726574     Erase Parameters
    67d4:	6f726620 6863206d 202e7069 65766552      from chip. Reve
    67e4:	6e697472 6f742067 62696c20 79726172     rting to library
    67f4:	66656420 746c7561 55002e73 6c62616e      defaults..Unabl
    6804:	6f742065 61657220 72652064 20657361     e to read erase 
    6814:	656d6974 72662073 66206d6f 6873616c     times from flash
    6824:	6d656d20 2e79726f 76655220 69747265      memory. Reverti
    6834:	7420676e 696c206f 72617262 65642079     ng to library de
    6844:	6c756166 002e7374 62616e55 7420656c     faults..Unable t
    6854:	6572206f 70206461 72676f72 74206d61     o read program t
    6864:	73656d69 6f726620 6c66206d 20687361     imes from flash 
    6874:	6f6d656d 202e7972 65766552 6e697472     memory. Revertin
    6884:	6f742067 62696c20 79726172 66656420     g to library def
    6894:	746c7561 4e002e73 6843206f 53207069     aults..No Chip S
    68a4:	63656c65 69702074 6564206e 656e6966     elect pin define
    68b4:	6e692064 65687420 73756320 206d6f74     d in the custom 
    68c4:	20495053 61727241 55002e79 6f6e6b6e     SPI Array..Unkno
    68d4:	65206e77 726f7272 20664900 73696874     wn error.If this
    68e4:	656f6420 6f6e2073 65682074 7220706c      does not help r
    68f4:	6c6f7365 632f6576 6972616c 74207966     esolve/clarify t
    6904:	20736968 75737369 00202c65 61656c70     his issue, .plea
    6914:	72206573 65736961 206e6120 75737369     se raise an issu
    6924:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
    6934:	68746967 632e6275 4d2f6d6f 6f7a7261     github.com/Marzo
    6944:	532f6867 654d4950 79726f6d 7373692f     gh/SPIMemory/iss
    6954:	20736575 68746977 65687420 74656420     ues with the det
    6964:	736c6961 20666f20 74616877 756f7920     ails of what you
    6974:	65772072 64206572 676e696f 65687720     r were doing whe
    6984:	6874206e 65207369 726f7272 63636f20     n this error occ
    6994:	65727275 00000064 000047a0 00004782     urred....G...G..
    69a4:	0000473c 0000465a 0000473c 00004774     <G..ZF..<G..tG..
    69b4:	0000473c 0000465a 00004782 00004782     <G..ZF...G...G..
    69c4:	00004774 0000465a 00004652 00004652     tG..ZF..RF..RF..
    69d4:	00004652 000049b8 00005000 00004ec0     RF...I...P...N..
    69e4:	00004ec0 00004ebc 00004fd8 00004fd8     .N...N...O...O..
    69f4:	00004fca 00004ebc 00004fd8 00004fca     .O...N...O...O..
    6a04:	00004fd8 00004ebc 00004fe0 00004fe0     .O...N...O...O..
    6a14:	00004fe0 000051e4                       .O...Q..

00006a1c <__sf_fake_stderr>:
	...

00006a3c <__sf_fake_stdin>:
	...

00006a5c <__sf_fake_stdout>:
	...

00006a7c <__EH_FRAME_BEGIN__>:
    6a7c:	00000000                                ....
