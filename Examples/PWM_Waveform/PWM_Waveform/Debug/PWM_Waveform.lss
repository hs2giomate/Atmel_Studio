
PWM_Waveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034b0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d8  20000000  000034b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000201d8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000201d8  2**0
                  CONTENTS
  4 .bss          00000060  200001d8  00003688  000201d8  2**2
                  ALLOC
  5 .stack        00010000  20000238  000036e8  000201d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002592e  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003513  00000000  00000000  00045b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000acf7  00000000  00000000  000490a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a70  00000000  00000000  00053d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f20  00000000  00000000  00054807  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034bbd  00000000  00000000  00055727  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013e21  00000000  00000000  0008a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a920  00000000  00000000  0009e105  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002430  00000000  00000000  001b8a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 02 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     8.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	6d 09 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     m...............
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	ad 0a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 6d 14 00 00 e5 02 00 00 e5 02 00 00     ....m...........
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200001d8 	.word	0x200001d8
     280:	00000000 	.word	0x00000000
     284:	000034b0 	.word	0x000034b0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000034b0 	.word	0x000034b0
     2c4:	200001dc 	.word	0x200001dc
     2c8:	000034b0 	.word	0x000034b0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	0000058d 	.word	0x0000058d
     2e0:	00001541 	.word	0x00001541

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	000034b0 	.word	0x000034b0
     364:	200001d8 	.word	0x200001d8
     368:	20000238 	.word	0x20000238
     36c:	200001d8 	.word	0x200001d8
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	000018b5 	.word	0x000018b5
     37c:	00001225 	.word	0x00001225

00000380 <EXTERNAL_IRQ_0_init>:
#include <hal_init.h>

struct usart_sync_descriptor EDBG_UART;

void EXTERNAL_IRQ_0_init(void)
{
     380:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     382:	2240      	movs	r2, #64	; 0x40
     384:	4b15      	ldr	r3, [pc, #84]	; (3dc <EXTERNAL_IRQ_0_init+0x5c>)
     386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     38a:	4a15      	ldr	r2, [pc, #84]	; (3e0 <EXTERNAL_IRQ_0_init+0x60>)
     38c:	6953      	ldr	r3, [r2, #20]
     38e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     392:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     394:	4b13      	ldr	r3, [pc, #76]	; (3e4 <EXTERNAL_IRQ_0_init+0x64>)
     396:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     39e:	4a12      	ldr	r2, [pc, #72]	; (3e8 <EXTERNAL_IRQ_0_init+0x68>)
     3a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3a4:	f102 2280 	add.w	r2, r2, #2147516416	; 0x80008000
     3a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3ac:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
     3b0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3b4:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b8:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     3bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3c0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3c4:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c8:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3cc:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3d0:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SW0, PINMUX_PB31A_EIC_EXTINT15);

	ext_irq_init();
     3d4:	4b05      	ldr	r3, [pc, #20]	; (3ec <EXTERNAL_IRQ_0_init+0x6c>)
     3d6:	4798      	blx	r3
     3d8:	bd08      	pop	{r3, pc}
     3da:	bf00      	nop
     3dc:	40001c00 	.word	0x40001c00
     3e0:	40000800 	.word	0x40000800
     3e4:	41008000 	.word	0x41008000
     3e8:	40020000 	.word	0x40020000
     3ec:	000005f9 	.word	0x000005f9

000003f0 <EDBG_UART_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f0:	4b10      	ldr	r3, [pc, #64]	; (434 <EDBG_UART_PORT_init+0x44>)
     3f2:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fe:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     402:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     406:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     40a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     40e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     412:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     416:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     41a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     422:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     426:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     42a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     42e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     432:	4770      	bx	lr
     434:	41008000 	.word	0x41008000

00000438 <EDBG_UART_CLOCK_init>:
     438:	4b06      	ldr	r3, [pc, #24]	; (454 <EDBG_UART_CLOCK_init+0x1c>)
     43a:	2240      	movs	r2, #64	; 0x40
     43c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     440:	2243      	movs	r2, #67	; 0x43
     442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     446:	4a04      	ldr	r2, [pc, #16]	; (458 <EDBG_UART_CLOCK_init+0x20>)
     448:	6993      	ldr	r3, [r2, #24]
     44a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     44e:	6193      	str	r3, [r2, #24]
     450:	4770      	bx	lr
     452:	bf00      	nop
     454:	40001c00 	.word	0x40001c00
     458:	40000800 	.word	0x40000800

0000045c <EDBG_UART_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void EDBG_UART_init(void)
{
     45c:	b508      	push	{r3, lr}
	EDBG_UART_CLOCK_init();
     45e:	4b05      	ldr	r3, [pc, #20]	; (474 <EDBG_UART_init+0x18>)
     460:	4798      	blx	r3
	usart_sync_init(&EDBG_UART, SERCOM2, (void *)NULL);
     462:	2200      	movs	r2, #0
     464:	4904      	ldr	r1, [pc, #16]	; (478 <EDBG_UART_init+0x1c>)
     466:	4805      	ldr	r0, [pc, #20]	; (47c <EDBG_UART_init+0x20>)
     468:	4b05      	ldr	r3, [pc, #20]	; (480 <EDBG_UART_init+0x24>)
     46a:	4798      	blx	r3
	EDBG_UART_PORT_init();
     46c:	4b05      	ldr	r3, [pc, #20]	; (484 <EDBG_UART_init+0x28>)
     46e:	4798      	blx	r3
     470:	bd08      	pop	{r3, pc}
     472:	bf00      	nop
     474:	00000439 	.word	0x00000439
     478:	41012000 	.word	0x41012000
     47c:	20000214 	.word	0x20000214
     480:	00000791 	.word	0x00000791
     484:	000003f1 	.word	0x000003f1

00000488 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     488:	4b38      	ldr	r3, [pc, #224]	; (56c <PWM_0_PORT_init+0xe4>)
     48a:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
	tmp &= ~PORT_PINCFG_PMUXEN;
     48e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     496:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     49a:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     49e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4a2:	f042 0205 	orr.w	r2, r2, #5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a6:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4aa:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ba:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4be:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4c2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c6:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ca:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d6:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4da:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e2:	f042 0205 	orr.w	r2, r2, #5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e6:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ea:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4fa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     502:	f042 0260 	orr.w	r2, r2, #96	; 0x60
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     506:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     50a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     50e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     512:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     51e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     522:	f042 0206 	orr.w	r2, r2, #6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     52e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     53e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     542:	f042 0260 	orr.w	r2, r2, #96	; 0x60
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     54e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     552:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     556:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     55e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     562:	f042 0206 	orr.w	r2, r2, #6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     56a:	4770      	bx	lr
     56c:	41008000 	.word	0x41008000

00000570 <PWM_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     570:	4a04      	ldr	r2, [pc, #16]	; (584 <PWM_0_CLOCK_init+0x14>)
     572:	6993      	ldr	r3, [r2, #24]
     574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     578:	6193      	str	r3, [r2, #24]
     57a:	2240      	movs	r2, #64	; 0x40
     57c:	4b02      	ldr	r3, [pc, #8]	; (588 <PWM_0_CLOCK_init+0x18>)
     57e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     582:	4770      	bx	lr
     584:	40000800 	.word	0x40000800
     588:	40001c00 	.word	0x40001c00

0000058c <system_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     58c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     58e:	4b06      	ldr	r3, [pc, #24]	; (5a8 <system_init+0x1c>)
     590:	4798      	blx	r3
	init_mcu();

	EXTERNAL_IRQ_0_init();
     592:	4b06      	ldr	r3, [pc, #24]	; (5ac <system_init+0x20>)
     594:	4798      	blx	r3

	EDBG_UART_init();
     596:	4b06      	ldr	r3, [pc, #24]	; (5b0 <system_init+0x24>)
     598:	4798      	blx	r3

	PWM_0_CLOCK_init();
     59a:	4b06      	ldr	r3, [pc, #24]	; (5b4 <system_init+0x28>)
     59c:	4798      	blx	r3

	PWM_0_PORT_init();
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <system_init+0x2c>)
     5a0:	4798      	blx	r3

	PWM_0_init();
     5a2:	4b06      	ldr	r3, [pc, #24]	; (5bc <system_init+0x30>)
     5a4:	4798      	blx	r3
     5a6:	bd08      	pop	{r3, pc}
     5a8:	00000849 	.word	0x00000849
     5ac:	00000381 	.word	0x00000381
     5b0:	0000045d 	.word	0x0000045d
     5b4:	00000571 	.word	0x00000571
     5b8:	00000489 	.word	0x00000489
     5bc:	00000c41 	.word	0x00000c41

000005c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     5c2:	4b0c      	ldr	r3, [pc, #48]	; (5f4 <process_ext_irq+0x34>)
     5c4:	685c      	ldr	r4, [r3, #4]
     5c6:	42a0      	cmp	r0, r4
     5c8:	d00e      	beq.n	5e8 <process_ext_irq+0x28>
     5ca:	2301      	movs	r3, #1
     5cc:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     5ce:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     5d0:	25ff      	movs	r5, #255	; 0xff
     5d2:	e003      	b.n	5dc <process_ext_irq+0x1c>
     5d4:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     5d6:	185a      	adds	r2, r3, r1
     5d8:	0852      	lsrs	r2, r2, #1
     5da:	d104      	bne.n	5e6 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     5dc:	42a0      	cmp	r0, r4
     5de:	d9f9      	bls.n	5d4 <process_ext_irq+0x14>
	while (upper >= lower) {
     5e0:	b13b      	cbz	r3, 5f2 <process_ext_irq+0x32>
			lower = middle + 1;
     5e2:	4631      	mov	r1, r6
     5e4:	e7f7      	b.n	5d6 <process_ext_irq+0x16>
     5e6:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
     5e8:	4b02      	ldr	r3, [pc, #8]	; (5f4 <process_ext_irq+0x34>)
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	b10b      	cbz	r3, 5f2 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     5ee:	4798      	blx	r3
     5f0:	bd70      	pop	{r4, r5, r6, pc}
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	200001f4 	.word	0x200001f4

000005f8 <ext_irq_init>:
{
     5f8:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     5fa:	4b05      	ldr	r3, [pc, #20]	; (610 <ext_irq_init+0x18>)
     5fc:	f04f 32ff 	mov.w	r2, #4294967295
     600:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     602:	2200      	movs	r2, #0
     604:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     606:	4803      	ldr	r0, [pc, #12]	; (614 <ext_irq_init+0x1c>)
     608:	4b03      	ldr	r3, [pc, #12]	; (618 <ext_irq_init+0x20>)
     60a:	4798      	blx	r3
}
     60c:	bd08      	pop	{r3, pc}
     60e:	bf00      	nop
     610:	200001f4 	.word	0x200001f4
     614:	000005c1 	.word	0x000005c1
     618:	00000885 	.word	0x00000885

0000061c <ext_irq_register>:
{
     61c:	b508      	push	{r3, lr}
		if (ext_irqs[i].pin == pin) {
     61e:	4b0d      	ldr	r3, [pc, #52]	; (654 <ext_irq_register+0x38>)
     620:	685b      	ldr	r3, [r3, #4]
     622:	4298      	cmp	r0, r3
     624:	d006      	beq.n	634 <ext_irq_register+0x18>
	if (NULL == cb) {
     626:	b191      	cbz	r1, 64e <ext_irq_register+0x32>
			if (NULL == ext_irqs[i].cb) {
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <ext_irq_register+0x38>)
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	b143      	cbz	r3, 640 <ext_irq_register+0x24>
		return ERR_INVALID_ARG;
     62e:	f06f 000c 	mvn.w	r0, #12
}
     632:	bd08      	pop	{r3, pc}
			ext_irqs[i].cb = cb;
     634:	4b07      	ldr	r3, [pc, #28]	; (654 <ext_irq_register+0x38>)
     636:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     638:	b929      	cbnz	r1, 646 <ext_irq_register+0x2a>
		return _ext_irq_enable(pin, false);
     63a:	4b07      	ldr	r3, [pc, #28]	; (658 <ext_irq_register+0x3c>)
     63c:	4798      	blx	r3
     63e:	bd08      	pop	{r3, pc}
				ext_irqs[i].cb  = cb;
     640:	4b04      	ldr	r3, [pc, #16]	; (654 <ext_irq_register+0x38>)
     642:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     644:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     646:	2101      	movs	r1, #1
     648:	4b03      	ldr	r3, [pc, #12]	; (658 <ext_irq_register+0x3c>)
     64a:	4798      	blx	r3
     64c:	bd08      	pop	{r3, pc}
			return ERR_INVALID_ARG;
     64e:	f06f 000c 	mvn.w	r0, #12
     652:	bd08      	pop	{r3, pc}
     654:	200001f4 	.word	0x200001f4
     658:	00000941 	.word	0x00000941

0000065c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     65c:	b570      	push	{r4, r5, r6, lr}
     65e:	460d      	mov	r5, r1
     660:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     662:	4604      	mov	r4, r0
     664:	b160      	cbz	r0, 680 <io_write+0x24>
     666:	1c08      	adds	r0, r1, #0
     668:	bf18      	it	ne
     66a:	2001      	movne	r0, #1
     66c:	2234      	movs	r2, #52	; 0x34
     66e:	4905      	ldr	r1, [pc, #20]	; (684 <io_write+0x28>)
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <io_write+0x2c>)
     672:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     674:	6823      	ldr	r3, [r4, #0]
     676:	4632      	mov	r2, r6
     678:	4629      	mov	r1, r5
     67a:	4620      	mov	r0, r4
     67c:	4798      	blx	r3
}
     67e:	bd70      	pop	{r4, r5, r6, pc}
     680:	2000      	movs	r0, #0
     682:	e7f3      	b.n	66c <io_write+0x10>
     684:	00002cf0 	.word	0x00002cf0
     688:	00000805 	.word	0x00000805

0000068c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     68c:	b570      	push	{r4, r5, r6, lr}
     68e:	460d      	mov	r5, r1
     690:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     692:	4604      	mov	r4, r0
     694:	b160      	cbz	r0, 6b0 <io_read+0x24>
     696:	1c08      	adds	r0, r1, #0
     698:	bf18      	it	ne
     69a:	2001      	movne	r0, #1
     69c:	223d      	movs	r2, #61	; 0x3d
     69e:	4905      	ldr	r1, [pc, #20]	; (6b4 <io_read+0x28>)
     6a0:	4b05      	ldr	r3, [pc, #20]	; (6b8 <io_read+0x2c>)
     6a2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     6a4:	6863      	ldr	r3, [r4, #4]
     6a6:	4632      	mov	r2, r6
     6a8:	4629      	mov	r1, r5
     6aa:	4620      	mov	r0, r4
     6ac:	4798      	blx	r3
}
     6ae:	bd70      	pop	{r4, r5, r6, pc}
     6b0:	2000      	movs	r0, #0
     6b2:	e7f3      	b.n	69c <io_read+0x10>
     6b4:	00002cf0 	.word	0x00002cf0
     6b8:	00000805 	.word	0x00000805

000006bc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     6c0:	460f      	mov	r7, r1
     6c2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     6c4:	4604      	mov	r4, r0
     6c6:	b328      	cbz	r0, 714 <usart_sync_write+0x58>
     6c8:	b331      	cbz	r1, 718 <usart_sync_write+0x5c>
     6ca:	1c10      	adds	r0, r2, #0
     6cc:	bf18      	it	ne
     6ce:	2001      	movne	r0, #1
     6d0:	22f1      	movs	r2, #241	; 0xf1
     6d2:	4912      	ldr	r1, [pc, #72]	; (71c <usart_sync_write+0x60>)
     6d4:	4b12      	ldr	r3, [pc, #72]	; (720 <usart_sync_write+0x64>)
     6d6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     6d8:	3408      	adds	r4, #8
     6da:	4d12      	ldr	r5, [pc, #72]	; (724 <usart_sync_write+0x68>)
     6dc:	4620      	mov	r0, r4
     6de:	47a8      	blx	r5
     6e0:	2800      	cmp	r0, #0
     6e2:	d0fb      	beq.n	6dc <usart_sync_write+0x20>
     6e4:	3f01      	subs	r7, #1
     6e6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6e8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 72c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6ec:	4d0d      	ldr	r5, [pc, #52]	; (724 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6ee:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     6f2:	4620      	mov	r0, r4
     6f4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6f6:	4620      	mov	r0, r4
     6f8:	47a8      	blx	r5
     6fa:	2800      	cmp	r0, #0
     6fc:	d0fb      	beq.n	6f6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     6fe:	3601      	adds	r6, #1
     700:	4546      	cmp	r6, r8
     702:	d3f4      	bcc.n	6ee <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     704:	4d08      	ldr	r5, [pc, #32]	; (728 <usart_sync_write+0x6c>)
     706:	4620      	mov	r0, r4
     708:	47a8      	blx	r5
     70a:	2800      	cmp	r0, #0
     70c:	d0fb      	beq.n	706 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     70e:	4630      	mov	r0, r6
     710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     714:	2000      	movs	r0, #0
     716:	e7db      	b.n	6d0 <usart_sync_write+0x14>
     718:	2000      	movs	r0, #0
     71a:	e7d9      	b.n	6d0 <usart_sync_write+0x14>
     71c:	00002d04 	.word	0x00002d04
     720:	00000805 	.word	0x00000805
     724:	00000c23 	.word	0x00000c23
     728:	00000c2d 	.word	0x00000c2d
     72c:	00000c15 	.word	0x00000c15

00000730 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     734:	460f      	mov	r7, r1
     736:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     738:	4604      	mov	r4, r0
     73a:	b1e0      	cbz	r0, 776 <usart_sync_read+0x46>
     73c:	b1e9      	cbz	r1, 77a <usart_sync_read+0x4a>
     73e:	1c10      	adds	r0, r2, #0
     740:	bf18      	it	ne
     742:	2001      	movne	r0, #1
     744:	f44f 7286 	mov.w	r2, #268	; 0x10c
     748:	490d      	ldr	r1, [pc, #52]	; (780 <usart_sync_read+0x50>)
     74a:	4b0e      	ldr	r3, [pc, #56]	; (784 <usart_sync_read+0x54>)
     74c:	4798      	blx	r3
     74e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     750:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     752:	3408      	adds	r4, #8
     754:	4d0c      	ldr	r5, [pc, #48]	; (788 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     756:	f8df 9034 	ldr.w	r9, [pc, #52]	; 78c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     75a:	4620      	mov	r0, r4
     75c:	47a8      	blx	r5
     75e:	2800      	cmp	r0, #0
     760:	d0fb      	beq.n	75a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     762:	4620      	mov	r0, r4
     764:	47c8      	blx	r9
     766:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     76a:	3601      	adds	r6, #1
     76c:	4546      	cmp	r6, r8
     76e:	d3f4      	bcc.n	75a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     770:	4630      	mov	r0, r6
     772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     776:	2000      	movs	r0, #0
     778:	e7e4      	b.n	744 <usart_sync_read+0x14>
     77a:	2000      	movs	r0, #0
     77c:	e7e2      	b.n	744 <usart_sync_read+0x14>
     77e:	bf00      	nop
     780:	00002d04 	.word	0x00002d04
     784:	00000805 	.word	0x00000805
     788:	00000c37 	.word	0x00000c37
     78c:	00000c1b 	.word	0x00000c1b

00000790 <usart_sync_init>:
{
     790:	b538      	push	{r3, r4, r5, lr}
     792:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     794:	4604      	mov	r4, r0
     796:	b198      	cbz	r0, 7c0 <usart_sync_init+0x30>
     798:	1c08      	adds	r0, r1, #0
     79a:	bf18      	it	ne
     79c:	2001      	movne	r0, #1
     79e:	2234      	movs	r2, #52	; 0x34
     7a0:	4908      	ldr	r1, [pc, #32]	; (7c4 <usart_sync_init+0x34>)
     7a2:	4b09      	ldr	r3, [pc, #36]	; (7c8 <usart_sync_init+0x38>)
     7a4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     7a6:	4629      	mov	r1, r5
     7a8:	f104 0008 	add.w	r0, r4, #8
     7ac:	4b07      	ldr	r3, [pc, #28]	; (7cc <usart_sync_init+0x3c>)
     7ae:	4798      	blx	r3
	if (init_status) {
     7b0:	4603      	mov	r3, r0
     7b2:	b918      	cbnz	r0, 7bc <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     7b4:	4a06      	ldr	r2, [pc, #24]	; (7d0 <usart_sync_init+0x40>)
     7b6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     7b8:	4a06      	ldr	r2, [pc, #24]	; (7d4 <usart_sync_init+0x44>)
     7ba:	6022      	str	r2, [r4, #0]
}
     7bc:	4618      	mov	r0, r3
     7be:	bd38      	pop	{r3, r4, r5, pc}
     7c0:	2000      	movs	r0, #0
     7c2:	e7ec      	b.n	79e <usart_sync_init+0xe>
     7c4:	00002d04 	.word	0x00002d04
     7c8:	00000805 	.word	0x00000805
     7cc:	00000bd5 	.word	0x00000bd5
     7d0:	00000731 	.word	0x00000731
     7d4:	000006bd 	.word	0x000006bd

000007d8 <usart_sync_enable>:
{
     7d8:	b510      	push	{r4, lr}
	ASSERT(descr);
     7da:	4604      	mov	r4, r0
     7dc:	2253      	movs	r2, #83	; 0x53
     7de:	4906      	ldr	r1, [pc, #24]	; (7f8 <usart_sync_enable+0x20>)
     7e0:	3000      	adds	r0, #0
     7e2:	bf18      	it	ne
     7e4:	2001      	movne	r0, #1
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <usart_sync_enable+0x24>)
     7e8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     7ea:	f104 0008 	add.w	r0, r4, #8
     7ee:	4b04      	ldr	r3, [pc, #16]	; (800 <usart_sync_enable+0x28>)
     7f0:	4798      	blx	r3
}
     7f2:	2000      	movs	r0, #0
     7f4:	bd10      	pop	{r4, pc}
     7f6:	bf00      	nop
     7f8:	00002d04 	.word	0x00002d04
     7fc:	00000805 	.word	0x00000805
     800:	00000c01 	.word	0x00000c01

00000804 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     804:	b900      	cbnz	r0, 808 <assert+0x4>
		__asm("BKPT #0");
     806:	be00      	bkpt	0x0000
     808:	4770      	bx	lr
	...

0000080c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     80c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     80e:	4a06      	ldr	r2, [pc, #24]	; (828 <_sbrk+0x1c>)
     810:	6812      	ldr	r2, [r2, #0]
     812:	b122      	cbz	r2, 81e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     814:	4a04      	ldr	r2, [pc, #16]	; (828 <_sbrk+0x1c>)
     816:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     818:	4403      	add	r3, r0
     81a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     81c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     81e:	4903      	ldr	r1, [pc, #12]	; (82c <_sbrk+0x20>)
     820:	4a01      	ldr	r2, [pc, #4]	; (828 <_sbrk+0x1c>)
     822:	6011      	str	r1, [r2, #0]
     824:	e7f6      	b.n	814 <_sbrk+0x8>
     826:	bf00      	nop
     828:	200001fc 	.word	0x200001fc
     82c:	20010238 	.word	0x20010238

00000830 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     830:	f04f 30ff 	mov.w	r0, #4294967295
     834:	4770      	bx	lr

00000836 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     83a:	604b      	str	r3, [r1, #4]

	return 0;
}
     83c:	2000      	movs	r0, #0
     83e:	4770      	bx	lr

00000840 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     840:	2001      	movs	r0, #1
     842:	4770      	bx	lr

00000844 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     844:	2000      	movs	r0, #0
     846:	4770      	bx	lr

00000848 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     848:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     84a:	4a08      	ldr	r2, [pc, #32]	; (86c <_init_chip+0x24>)
     84c:	8813      	ldrh	r3, [r2, #0]
     84e:	b29b      	uxth	r3, r3
     850:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     852:	4b07      	ldr	r3, [pc, #28]	; (870 <_init_chip+0x28>)
     854:	4798      	blx	r3
	_oscctrl_init_sources();
     856:	4b07      	ldr	r3, [pc, #28]	; (874 <_init_chip+0x2c>)
     858:	4798      	blx	r3
	_mclk_init();
     85a:	4b07      	ldr	r3, [pc, #28]	; (878 <_init_chip+0x30>)
     85c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     85e:	4b07      	ldr	r3, [pc, #28]	; (87c <_init_chip+0x34>)
     860:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     862:	f640 70ff 	movw	r0, #4095	; 0xfff
     866:	4b06      	ldr	r3, [pc, #24]	; (880 <_init_chip+0x38>)
     868:	4798      	blx	r3
     86a:	bd08      	pop	{r3, pc}
     86c:	41004000 	.word	0x41004000
     870:	00000a79 	.word	0x00000a79
     874:	00000a8d 	.word	0x00000a8d
     878:	00000a6d 	.word	0x00000a6d
     87c:	00000aa9 	.word	0x00000aa9
     880:	00000a49 	.word	0x00000a49

00000884 <_ext_irq_init>:
	};
}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     884:	4b2b      	ldr	r3, [pc, #172]	; (934 <_ext_irq_init+0xb0>)
     886:	685b      	ldr	r3, [r3, #4]
/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     888:	f013 0f01 	tst.w	r3, #1
     88c:	d11f      	bne.n	8ce <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     88e:	4a29      	ldr	r2, [pc, #164]	; (934 <_ext_irq_init+0xb0>)
     890:	6853      	ldr	r3, [r2, #4]
     892:	f013 0f03 	tst.w	r3, #3
     896:	d1fb      	bne.n	890 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     898:	4b26      	ldr	r3, [pc, #152]	; (934 <_ext_irq_init+0xb0>)
     89a:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     89c:	f013 0f02 	tst.w	r3, #2
     8a0:	d00d      	beq.n	8be <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     8a2:	4a24      	ldr	r2, [pc, #144]	; (934 <_ext_irq_init+0xb0>)
     8a4:	7813      	ldrb	r3, [r2, #0]
     8a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     8aa:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     8ac:	6853      	ldr	r3, [r2, #4]
     8ae:	f013 0f03 	tst.w	r3, #3
     8b2:	d1fb      	bne.n	8ac <_ext_irq_init+0x28>
     8b4:	4a1f      	ldr	r2, [pc, #124]	; (934 <_ext_irq_init+0xb0>)
     8b6:	6853      	ldr	r3, [r2, #4]
     8b8:	f013 0f02 	tst.w	r3, #2
     8bc:	d1fb      	bne.n	8b6 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     8be:	2201      	movs	r2, #1
     8c0:	4b1c      	ldr	r3, [pc, #112]	; (934 <_ext_irq_init+0xb0>)
     8c2:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     8c4:	461a      	mov	r2, r3
     8c6:	6853      	ldr	r3, [r2, #4]
     8c8:	f013 0f03 	tst.w	r3, #3
     8cc:	d1fb      	bne.n	8c6 <_ext_irq_init+0x42>
     8ce:	4a19      	ldr	r2, [pc, #100]	; (934 <_ext_irq_init+0xb0>)
     8d0:	6853      	ldr	r3, [r2, #4]
     8d2:	f013 0f01 	tst.w	r3, #1
     8d6:	d1fb      	bne.n	8d0 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
     8d8:	4a16      	ldr	r2, [pc, #88]	; (934 <_ext_irq_init+0xb0>)
     8da:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     8dc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
     8e0:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     8e2:	6853      	ldr	r3, [r2, #4]
     8e4:	f013 0f03 	tst.w	r3, #3
     8e8:	d1fb      	bne.n	8e2 <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     8ea:	4b12      	ldr	r3, [pc, #72]	; (934 <_ext_irq_init+0xb0>)
     8ec:	2200      	movs	r2, #0
     8ee:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     8f0:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     8f2:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     8f4:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     8f6:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     8f8:	61da      	str	r2, [r3, #28]
     8fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     8fe:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     900:	781a      	ldrb	r2, [r3, #0]
     902:	f042 0202 	orr.w	r2, r2, #2
     906:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     908:	461a      	mov	r2, r3
     90a:	6853      	ldr	r3, [r2, #4]
     90c:	f013 0f03 	tst.w	r3, #3
     910:	d1fb      	bne.n	90a <_ext_irq_init+0x86>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     912:	4b09      	ldr	r3, [pc, #36]	; (938 <_ext_irq_init+0xb4>)
     914:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     91c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     920:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     924:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     928:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_15_IRQn);
	NVIC_ClearPendingIRQ(EIC_15_IRQn);
	NVIC_EnableIRQ(EIC_15_IRQn);

	callback = cb;
     92a:	4b04      	ldr	r3, [pc, #16]	; (93c <_ext_irq_init+0xb8>)
     92c:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     92e:	2000      	movs	r0, #0
     930:	4770      	bx	lr
     932:	bf00      	nop
     934:	40002800 	.word	0x40002800
     938:	e000e100 	.word	0xe000e100
     93c:	20000200 	.word	0x20000200

00000940 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     940:	283f      	cmp	r0, #63	; 0x3f
     942:	d002      	beq.n	94a <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
     944:	f04f 30ff 	mov.w	r0, #4294967295
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     948:	4770      	bx	lr
	if (enable) {
     94a:	b931      	cbnz	r1, 95a <_ext_irq_enable+0x1a>
	((Eic *)hw)->INTENCLR.reg = mask;
     94c:	4b06      	ldr	r3, [pc, #24]	; (968 <_ext_irq_enable+0x28>)
     94e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     952:	60da      	str	r2, [r3, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
     954:	615a      	str	r2, [r3, #20]
	return ERR_NONE;
     956:	2000      	movs	r0, #0
     958:	4770      	bx	lr
	((Eic *)hw)->INTENSET.reg = mask;
     95a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     95e:	4b02      	ldr	r3, [pc, #8]	; (968 <_ext_irq_enable+0x28>)
     960:	611a      	str	r2, [r3, #16]
     962:	2000      	movs	r0, #0
     964:	4770      	bx	lr
     966:	bf00      	nop
     968:	40002800 	.word	0x40002800

0000096c <EIC_15_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_15_Handler(void)
{
     96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     970:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     972:	4b30      	ldr	r3, [pc, #192]	; (a34 <EIC_15_Handler+0xc8>)
     974:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     976:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
     978:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     97a:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
     97c:	4b2e      	ldr	r3, [pc, #184]	; (a38 <EIC_15_Handler+0xcc>)
     97e:	6818      	ldr	r0, [r3, #0]
     980:	22e8      	movs	r2, #232	; 0xe8
     982:	492e      	ldr	r1, [pc, #184]	; (a3c <EIC_15_Handler+0xd0>)
     984:	3000      	adds	r0, #0
     986:	bf18      	it	ne
     988:	2001      	movne	r0, #1
     98a:	4b2d      	ldr	r3, [pc, #180]	; (a40 <EIC_15_Handler+0xd4>)
     98c:	4798      	blx	r3
	while (flags) {
     98e:	9b01      	ldr	r3, [sp, #4]
     990:	2b00      	cmp	r3, #0
     992:	d04b      	beq.n	a2c <EIC_15_Handler+0xc0>
     994:	f04f 36ff 	mov.w	r6, #4294967295
				callback(pin);
     998:	4f27      	ldr	r7, [pc, #156]	; (a38 <EIC_15_Handler+0xcc>)
				if (_map[middle].extint == pos) {
     99a:	4d2a      	ldr	r5, [pc, #168]	; (a44 <EIC_15_Handler+0xd8>)
	return ((Eic *)hw)->INTFLAG.reg;
     99c:	f8df 8094 	ldr.w	r8, [pc, #148]	; a34 <EIC_15_Handler+0xc8>
     9a0:	e039      	b.n	a16 <EIC_15_Handler+0xaa>
			if (INVALID_PIN_NUMBER != pin) {
     9a2:	f1b6 3fff 	cmp.w	r6, #4294967295
     9a6:	d004      	beq.n	9b2 <EIC_15_Handler+0x46>
     9a8:	e000      	b.n	9ac <EIC_15_Handler+0x40>
				if (_map[middle].extint == pos) {
     9aa:	263f      	movs	r6, #63	; 0x3f
				callback(pin);
     9ac:	4630      	mov	r0, r6
     9ae:	683b      	ldr	r3, [r7, #0]
     9b0:	4798      	blx	r3
			flags &= ~(1ul << pos);
     9b2:	9b01      	ldr	r3, [sp, #4]
     9b4:	2201      	movs	r2, #1
     9b6:	fa02 f404 	lsl.w	r4, r2, r4
     9ba:	ea23 0404 	bic.w	r4, r3, r4
     9be:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
     9c0:	9a01      	ldr	r2, [sp, #4]
     9c2:	fa92 f3a2 	rbit	r3, r2
     9c6:	fab3 f383 	clz	r3, r3
     9ca:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     9cc:	bf08      	it	eq
     9ce:	f04f 33ff 	moveq.w	r3, #4294967295
     9d2:	d018      	beq.n	a06 <EIC_15_Handler+0x9a>
				if (_map[middle].extint == pos) {
     9d4:	461c      	mov	r4, r3
     9d6:	2b0f      	cmp	r3, #15
     9d8:	d0e7      	beq.n	9aa <EIC_15_Handler+0x3e>
     9da:	220f      	movs	r2, #15
     9dc:	2300      	movs	r3, #0
     9de:	4618      	mov	r0, r3
     9e0:	2101      	movs	r1, #1
				if (_map[middle].extint < pos) {
     9e2:	4294      	cmp	r4, r2
					lower = middle + 1;
     9e4:	bfc7      	ittee	gt
     9e6:	3301      	addgt	r3, #1
     9e8:	b2d8      	uxtbgt	r0, r3
					upper = middle - 1;
     9ea:	f103 33ff 	addle.w	r3, r3, #4294967295
     9ee:	b2d9      	uxtble	r1, r3
			while (upper >= lower) {
     9f0:	4288      	cmp	r0, r1
     9f2:	d8d6      	bhi.n	9a2 <EIC_15_Handler+0x36>
				middle = (upper + lower) >> 1;
     9f4:	180b      	adds	r3, r1, r0
     9f6:	f3c3 0347 	ubfx	r3, r3, #1, #8
				if (_map[middle].extint == pos) {
     9fa:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
     9fe:	42a2      	cmp	r2, r4
     a00:	d1ef      	bne.n	9e2 <EIC_15_Handler+0x76>
     a02:	263f      	movs	r6, #63	; 0x3f
     a04:	e7d2      	b.n	9ac <EIC_15_Handler+0x40>
     a06:	f8d8 3014 	ldr.w	r3, [r8, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
     a0a:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     a0c:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     a0e:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
     a12:	9b01      	ldr	r3, [sp, #4]
     a14:	b153      	cbz	r3, a2c <EIC_15_Handler+0xc0>
		pos = ffs(flags) - 1;
     a16:	9a01      	ldr	r2, [sp, #4]
     a18:	fa92 f3a2 	rbit	r3, r2
     a1c:	fab3 f383 	clz	r3, r3
     a20:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     a22:	bf08      	it	eq
     a24:	f04f 33ff 	moveq.w	r3, #4294967295
     a28:	d1d4      	bne.n	9d4 <EIC_15_Handler+0x68>
     a2a:	e7ec      	b.n	a06 <EIC_15_Handler+0x9a>
	_ext_irq_handler();
}
     a2c:	b002      	add	sp, #8
     a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a32:	bf00      	nop
     a34:	40002800 	.word	0x40002800
     a38:	20000200 	.word	0x20000200
     a3c:	00002d28 	.word	0x00002d28
     a40:	00000805 	.word	0x00000805
     a44:	00002d20 	.word	0x00002d20

00000a48 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     a48:	f010 0f01 	tst.w	r0, #1
     a4c:	d008      	beq.n	a60 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a4e:	4a05      	ldr	r2, [pc, #20]	; (a64 <_gclk_init_generators_by_fref+0x1c>)
     a50:	4b05      	ldr	r3, [pc, #20]	; (a68 <_gclk_init_generators_by_fref+0x20>)
     a52:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a54:	4619      	mov	r1, r3
     a56:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a5a:	684b      	ldr	r3, [r1, #4]
     a5c:	4213      	tst	r3, r2
     a5e:	d1fc      	bne.n	a5a <_gclk_init_generators_by_fref+0x12>
     a60:	4770      	bx	lr
     a62:	bf00      	nop
     a64:	00010101 	.word	0x00010101
     a68:	40001c00 	.word	0x40001c00

00000a6c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     a6c:	2201      	movs	r2, #1
     a6e:	4b01      	ldr	r3, [pc, #4]	; (a74 <_mclk_init+0x8>)
     a70:	715a      	strb	r2, [r3, #5]
     a72:	4770      	bx	lr
     a74:	40000800 	.word	0x40000800

00000a78 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     a78:	4b03      	ldr	r3, [pc, #12]	; (a88 <_osc32kctrl_init_sources+0x10>)
     a7a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     a7c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     a80:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     a82:	2201      	movs	r2, #1
     a84:	741a      	strb	r2, [r3, #16]
     a86:	4770      	bx	lr
     a88:	40001400 	.word	0x40001400

00000a8c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     a8c:	4a04      	ldr	r2, [pc, #16]	; (aa0 <_oscctrl_init_sources+0x14>)
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <_oscctrl_init_sources+0x18>)
     a90:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     a92:	461a      	mov	r2, r3
     a94:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     a96:	f013 0f02 	tst.w	r3, #2
     a9a:	d0fb      	beq.n	a94 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     a9c:	4770      	bx	lr
     a9e:	bf00      	nop
     aa0:	03002606 	.word	0x03002606
     aa4:	40001000 	.word	0x40001000

00000aa8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     aa8:	4770      	bx	lr
	...

00000aac <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     aac:	b500      	push	{lr}
     aae:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     ab0:	4b0d      	ldr	r3, [pc, #52]	; (ae8 <RAMECC_Handler+0x3c>)
     ab2:	789b      	ldrb	r3, [r3, #2]
     ab4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     ab6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     ab8:	9b01      	ldr	r3, [sp, #4]
     aba:	f013 0f02 	tst.w	r3, #2
     abe:	d006      	beq.n	ace <RAMECC_Handler+0x22>
     ac0:	4b0a      	ldr	r3, [pc, #40]	; (aec <RAMECC_Handler+0x40>)
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	b11b      	cbz	r3, ace <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     ac6:	4a08      	ldr	r2, [pc, #32]	; (ae8 <RAMECC_Handler+0x3c>)
     ac8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     aca:	4798      	blx	r3
     acc:	e009      	b.n	ae2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     ace:	9b01      	ldr	r3, [sp, #4]
     ad0:	f013 0f01 	tst.w	r3, #1
     ad4:	d005      	beq.n	ae2 <RAMECC_Handler+0x36>
     ad6:	4b05      	ldr	r3, [pc, #20]	; (aec <RAMECC_Handler+0x40>)
     ad8:	685b      	ldr	r3, [r3, #4]
     ada:	b113      	cbz	r3, ae2 <RAMECC_Handler+0x36>
     adc:	4a02      	ldr	r2, [pc, #8]	; (ae8 <RAMECC_Handler+0x3c>)
     ade:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     ae0:	4798      	blx	r3
	} else {
		return;
	}
}
     ae2:	b003      	add	sp, #12
     ae4:	f85d fb04 	ldr.w	pc, [sp], #4
     ae8:	41020000 	.word	0x41020000
     aec:	20000220 	.word	0x20000220

00000af0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     af0:	b470      	push	{r4, r5, r6}
     af2:	b089      	sub	sp, #36	; 0x24
     af4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     af6:	466c      	mov	r4, sp
     af8:	4d0d      	ldr	r5, [pc, #52]	; (b30 <_sercom_get_hardware_index+0x40>)
     afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     afe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     b06:	9b00      	ldr	r3, [sp, #0]
     b08:	42b3      	cmp	r3, r6
     b0a:	d00d      	beq.n	b28 <_sercom_get_hardware_index+0x38>
     b0c:	4631      	mov	r1, r6
     b0e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b10:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     b12:	f853 2b04 	ldr.w	r2, [r3], #4
     b16:	428a      	cmp	r2, r1
     b18:	d007      	beq.n	b2a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b1a:	3001      	adds	r0, #1
     b1c:	2808      	cmp	r0, #8
     b1e:	d1f8      	bne.n	b12 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     b20:	2000      	movs	r0, #0
}
     b22:	b009      	add	sp, #36	; 0x24
     b24:	bc70      	pop	{r4, r5, r6}
     b26:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b28:	2000      	movs	r0, #0
			return i;
     b2a:	b2c0      	uxtb	r0, r0
     b2c:	e7f9      	b.n	b22 <_sercom_get_hardware_index+0x32>
     b2e:	bf00      	nop
     b30:	00002d40 	.word	0x00002d40

00000b34 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     b34:	b510      	push	{r4, lr}
     b36:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b38:	4b21      	ldr	r3, [pc, #132]	; (bc0 <_usart_init+0x8c>)
     b3a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     b3c:	2802      	cmp	r0, #2
     b3e:	d005      	beq.n	b4c <_usart_init+0x18>
	ASSERT(false);
     b40:	f240 2247 	movw	r2, #583	; 0x247
     b44:	491f      	ldr	r1, [pc, #124]	; (bc4 <_usart_init+0x90>)
     b46:	2000      	movs	r0, #0
     b48:	4b1f      	ldr	r3, [pc, #124]	; (bc8 <_usart_init+0x94>)
     b4a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     b4c:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     b4e:	f013 0f01 	tst.w	r3, #1
     b52:	d119      	bne.n	b88 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b54:	69e3      	ldr	r3, [r4, #28]
     b56:	f013 0f03 	tst.w	r3, #3
     b5a:	d1fb      	bne.n	b54 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b5c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     b5e:	f013 0f02 	tst.w	r3, #2
     b62:	d00b      	beq.n	b7c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     b64:	6823      	ldr	r3, [r4, #0]
     b66:	f023 0302 	bic.w	r3, r3, #2
     b6a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b6c:	69e3      	ldr	r3, [r4, #28]
     b6e:	f013 0f03 	tst.w	r3, #3
     b72:	d1fb      	bne.n	b6c <_usart_init+0x38>
     b74:	69e3      	ldr	r3, [r4, #28]
     b76:	f013 0f02 	tst.w	r3, #2
     b7a:	d1fb      	bne.n	b74 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b7c:	2305      	movs	r3, #5
     b7e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b80:	69e3      	ldr	r3, [r4, #28]
     b82:	f013 0f03 	tst.w	r3, #3
     b86:	d1fb      	bne.n	b80 <_usart_init+0x4c>
     b88:	69e3      	ldr	r3, [r4, #28]
     b8a:	f013 0f01 	tst.w	r3, #1
     b8e:	d1fb      	bne.n	b88 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b90:	4b0e      	ldr	r3, [pc, #56]	; (bcc <_usart_init+0x98>)
     b92:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b94:	69e3      	ldr	r3, [r4, #28]
     b96:	f013 0f03 	tst.w	r3, #3
     b9a:	d1fb      	bne.n	b94 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     b9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     ba0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ba2:	69e3      	ldr	r3, [r4, #28]
     ba4:	f013 0f1f 	tst.w	r3, #31
     ba8:	d1fb      	bne.n	ba2 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <_usart_init+0x9c>)
     bac:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     bae:	f64d 03ad 	movw	r3, #55469	; 0xd8ad
     bb2:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     bb4:	2000      	movs	r0, #0
     bb6:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     bb8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     bbc:	bd10      	pop	{r4, pc}
     bbe:	bf00      	nop
     bc0:	00000af1 	.word	0x00000af1
     bc4:	00002d78 	.word	0x00002d78
     bc8:	00000805 	.word	0x00000805
     bcc:	40100004 	.word	0x40100004
     bd0:	00700002 	.word	0x00700002

00000bd4 <_usart_sync_init>:
{
     bd4:	b538      	push	{r3, r4, r5, lr}
     bd6:	460c      	mov	r4, r1
	ASSERT(device);
     bd8:	4605      	mov	r5, r0
     bda:	22bb      	movs	r2, #187	; 0xbb
     bdc:	4905      	ldr	r1, [pc, #20]	; (bf4 <_usart_sync_init+0x20>)
     bde:	3000      	adds	r0, #0
     be0:	bf18      	it	ne
     be2:	2001      	movne	r0, #1
     be4:	4b04      	ldr	r3, [pc, #16]	; (bf8 <_usart_sync_init+0x24>)
     be6:	4798      	blx	r3
	device->hw = hw;
     be8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     bea:	4620      	mov	r0, r4
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <_usart_sync_init+0x28>)
     bee:	4798      	blx	r3
}
     bf0:	bd38      	pop	{r3, r4, r5, pc}
     bf2:	bf00      	nop
     bf4:	00002d78 	.word	0x00002d78
     bf8:	00000805 	.word	0x00000805
     bfc:	00000b35 	.word	0x00000b35

00000c00 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     c00:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c02:	6813      	ldr	r3, [r2, #0]
     c04:	f043 0302 	orr.w	r3, r3, #2
     c08:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c0a:	69d3      	ldr	r3, [r2, #28]
     c0c:	f013 0f03 	tst.w	r3, #3
     c10:	d1fb      	bne.n	c0a <_usart_sync_enable+0xa>
}
     c12:	4770      	bx	lr

00000c14 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     c14:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     c16:	6299      	str	r1, [r3, #40]	; 0x28
     c18:	4770      	bx	lr

00000c1a <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     c1a:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     c1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     c1e:	b2c0      	uxtb	r0, r0
     c20:	4770      	bx	lr

00000c22 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     c22:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c24:	7e18      	ldrb	r0, [r3, #24]
}
     c26:	f000 0001 	and.w	r0, r0, #1
     c2a:	4770      	bx	lr

00000c2c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     c2c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     c2e:	7e18      	ldrb	r0, [r3, #24]
}
     c30:	f3c0 0040 	ubfx	r0, r0, #1, #1
     c34:	4770      	bx	lr

00000c36 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c36:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     c38:	7e18      	ldrb	r0, [r3, #24]
}
     c3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
     c3e:	4770      	bx	lr

00000c40 <PWM_0_init>:
	};
}

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
     c40:	4b27      	ldr	r3, [pc, #156]	; (ce0 <PWM_0_init+0xa0>)
     c42:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
     c44:	f013 0f01 	tst.w	r3, #1
     c48:	d11f      	bne.n	c8a <PWM_0_init+0x4a>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     c4a:	4a25      	ldr	r2, [pc, #148]	; (ce0 <PWM_0_init+0xa0>)
     c4c:	6893      	ldr	r3, [r2, #8]
     c4e:	f013 0f03 	tst.w	r3, #3
     c52:	d1fb      	bne.n	c4c <PWM_0_init+0xc>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
     c54:	4b22      	ldr	r3, [pc, #136]	; (ce0 <PWM_0_init+0xa0>)
     c56:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
     c58:	f013 0f02 	tst.w	r3, #2
     c5c:	d00d      	beq.n	c7a <PWM_0_init+0x3a>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
     c5e:	4a20      	ldr	r2, [pc, #128]	; (ce0 <PWM_0_init+0xa0>)
     c60:	6813      	ldr	r3, [r2, #0]
     c62:	f023 0302 	bic.w	r3, r3, #2
     c66:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     c68:	6893      	ldr	r3, [r2, #8]
     c6a:	f013 0f03 	tst.w	r3, #3
     c6e:	d1fb      	bne.n	c68 <PWM_0_init+0x28>
     c70:	4a1b      	ldr	r2, [pc, #108]	; (ce0 <PWM_0_init+0xa0>)
     c72:	6893      	ldr	r3, [r2, #8]
     c74:	f013 0f02 	tst.w	r3, #2
     c78:	d1fb      	bne.n	c72 <PWM_0_init+0x32>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
     c7a:	2201      	movs	r2, #1
     c7c:	4b18      	ldr	r3, [pc, #96]	; (ce0 <PWM_0_init+0xa0>)
     c7e:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     c80:	461a      	mov	r2, r3
     c82:	6893      	ldr	r3, [r2, #8]
     c84:	f013 0f03 	tst.w	r3, #3
     c88:	d1fb      	bne.n	c82 <PWM_0_init+0x42>
     c8a:	4a15      	ldr	r2, [pc, #84]	; (ce0 <PWM_0_init+0xa0>)
     c8c:	6893      	ldr	r3, [r2, #8]
     c8e:	f013 0f01 	tst.w	r3, #1
     c92:	d1fb      	bne.n	c8c <PWM_0_init+0x4c>
	((Tcc *)hw)->CTRLA.reg = data;
     c94:	f44f 7280 	mov.w	r2, #256	; 0x100
     c98:	4b11      	ldr	r3, [pc, #68]	; (ce0 <PWM_0_init+0xa0>)
     c9a:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     c9c:	461a      	mov	r2, r3
     c9e:	6893      	ldr	r3, [r2, #8]
     ca0:	f013 0f03 	tst.w	r3, #3
     ca4:	d1fb      	bne.n	c9e <PWM_0_init+0x5e>
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
     ca6:	2202      	movs	r2, #2
     ca8:	4b0d      	ldr	r3, [pc, #52]	; (ce0 <PWM_0_init+0xa0>)
     caa:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     cac:	461a      	mov	r2, r3
     cae:	6893      	ldr	r3, [r2, #8]
     cb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
     cb4:	2b00      	cmp	r3, #0
     cb6:	d1fa      	bne.n	cae <PWM_0_init+0x6e>
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
     cb8:	f241 7270 	movw	r2, #6000	; 0x1770
     cbc:	4b08      	ldr	r3, [pc, #32]	; (ce0 <PWM_0_init+0xa0>)
     cbe:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     cc0:	461a      	mov	r2, r3
     cc2:	6893      	ldr	r3, [r2, #8]
     cc4:	f013 0f80 	tst.w	r3, #128	; 0x80
     cc8:	d1fb      	bne.n	cc2 <PWM_0_init+0x82>
	tmp = ((Tcc *)hw)->CTRLA.reg;
     cca:	4a05      	ldr	r2, [pc, #20]	; (ce0 <PWM_0_init+0xa0>)
     ccc:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
     cce:	f043 0302 	orr.w	r3, r3, #2
	((Tcc *)hw)->CTRLA.reg = tmp;
     cd2:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
     cd4:	6893      	ldr	r3, [r2, #8]
     cd6:	f013 0f03 	tst.w	r3, #3
     cda:	d1fb      	bne.n	cd4 <PWM_0_init+0x94>
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
     cdc:	2000      	movs	r0, #0
     cde:	4770      	bx	lr
     ce0:	41016000 	.word	0x41016000

00000ce4 <swap_waveform_on_SW0_press>:

/************************************************************************/
/*             Swap PWM Waveform using Swap feature of TCC              */
/************************************************************************/
static void swap_waveform_on_SW0_press(void)
{
     ce4:	b508      	push	{r3, lr}
	if (swap_flag) {
     ce6:	4b09      	ldr	r3, [pc, #36]	; (d0c <swap_waveform_on_SW0_press+0x28>)
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b93b      	cbnz	r3, cfc <swap_waveform_on_SW0_press+0x18>
		tcc_disable_channel_swap(TCC0, 0);
		swap_flag = false;
	} else {
		tcc_enable_channel_swap(TCC0, 0);
     cec:	2100      	movs	r1, #0
     cee:	4808      	ldr	r0, [pc, #32]	; (d10 <swap_waveform_on_SW0_press+0x2c>)
     cf0:	4b08      	ldr	r3, [pc, #32]	; (d14 <swap_waveform_on_SW0_press+0x30>)
     cf2:	4798      	blx	r3
		swap_flag = true;
     cf4:	2201      	movs	r2, #1
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <swap_waveform_on_SW0_press+0x28>)
     cf8:	701a      	strb	r2, [r3, #0]
     cfa:	bd08      	pop	{r3, pc}
		tcc_disable_channel_swap(TCC0, 0);
     cfc:	2100      	movs	r1, #0
     cfe:	4804      	ldr	r0, [pc, #16]	; (d10 <swap_waveform_on_SW0_press+0x2c>)
     d00:	4b05      	ldr	r3, [pc, #20]	; (d18 <swap_waveform_on_SW0_press+0x34>)
     d02:	4798      	blx	r3
		swap_flag = false;
     d04:	2200      	movs	r2, #0
     d06:	4b01      	ldr	r3, [pc, #4]	; (d0c <swap_waveform_on_SW0_press+0x28>)
     d08:	701a      	strb	r2, [r3, #0]
     d0a:	bd08      	pop	{r3, pc}
     d0c:	20000204 	.word	0x20000204
     d10:	41016000 	.word	0x41016000
     d14:	000012f9 	.word	0x000012f9
     d18:	0000131d 	.word	0x0000131d

00000d1c <invert_waveform_on_SW0_press>:

/************************************************************************/
/*          Invert PWM Waveform using Inversion feature of TCC          */
/************************************************************************/
static void invert_waveform_on_SW0_press(void)
{
     d1c:	b508      	push	{r3, lr}
	tcc_disable(TCC0);
     d1e:	480c      	ldr	r0, [pc, #48]	; (d50 <invert_waveform_on_SW0_press+0x34>)
     d20:	4b0c      	ldr	r3, [pc, #48]	; (d54 <invert_waveform_on_SW0_press+0x38>)
     d22:	4798      	blx	r3
	if (inv_flag) {
     d24:	4b0c      	ldr	r3, [pc, #48]	; (d58 <invert_waveform_on_SW0_press+0x3c>)
     d26:	785b      	ldrb	r3, [r3, #1]
     d28:	b953      	cbnz	r3, d40 <invert_waveform_on_SW0_press+0x24>
		tcc_disable_channel_inversion(TCC0, COMPARE_CHANNEL_0);
		inv_flag = false;
	} else {
		tcc_enable_channel_inversion(TCC0, COMPARE_CHANNEL_0);
     d2a:	2100      	movs	r1, #0
     d2c:	4808      	ldr	r0, [pc, #32]	; (d50 <invert_waveform_on_SW0_press+0x34>)
     d2e:	4b0b      	ldr	r3, [pc, #44]	; (d5c <invert_waveform_on_SW0_press+0x40>)
     d30:	4798      	blx	r3
		inv_flag = true;
     d32:	2201      	movs	r2, #1
     d34:	4b08      	ldr	r3, [pc, #32]	; (d58 <invert_waveform_on_SW0_press+0x3c>)
     d36:	705a      	strb	r2, [r3, #1]
	}
	tcc_enable(TCC0);
     d38:	4805      	ldr	r0, [pc, #20]	; (d50 <invert_waveform_on_SW0_press+0x34>)
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <invert_waveform_on_SW0_press+0x44>)
     d3c:	4798      	blx	r3
     d3e:	bd08      	pop	{r3, pc}
		tcc_disable_channel_inversion(TCC0, COMPARE_CHANNEL_0);
     d40:	2100      	movs	r1, #0
     d42:	4803      	ldr	r0, [pc, #12]	; (d50 <invert_waveform_on_SW0_press+0x34>)
     d44:	4b07      	ldr	r3, [pc, #28]	; (d64 <invert_waveform_on_SW0_press+0x48>)
     d46:	4798      	blx	r3
		inv_flag = false;
     d48:	2200      	movs	r2, #0
     d4a:	4b03      	ldr	r3, [pc, #12]	; (d58 <invert_waveform_on_SW0_press+0x3c>)
     d4c:	705a      	strb	r2, [r3, #1]
     d4e:	e7f3      	b.n	d38 <invert_waveform_on_SW0_press+0x1c>
     d50:	41016000 	.word	0x41016000
     d54:	0000129f 	.word	0x0000129f
     d58:	20000204 	.word	0x20000204
     d5c:	00001401 	.word	0x00001401
     d60:	00001285 	.word	0x00001285
     d64:	00001415 	.word	0x00001415

00000d68 <pattern_generation>:
/************************************************************************/
/*   PWM Waveform Pattern Generation using Pattern Generation of TCC    */
/*            Bipolar Stepper Motor Output Waveform Pattern             */
/************************************************************************/
void pattern_generation(void)
{
     d68:	b508      	push	{r3, lr}
	if (iIndex == PATTERN_SIZE) {
     d6a:	4b09      	ldr	r3, [pc, #36]	; (d90 <pattern_generation+0x28>)
     d6c:	789b      	ldrb	r3, [r3, #2]
     d6e:	2b04      	cmp	r3, #4
     d70:	d00a      	beq.n	d88 <pattern_generation+0x20>
		iIndex = 0;
	}
	tcc_set_pattern_buffer(TCC0, TCC_PATTERN_PAGE_VAL, sm_pattern[iIndex++]);
     d72:	4a07      	ldr	r2, [pc, #28]	; (d90 <pattern_generation+0x28>)
     d74:	7893      	ldrb	r3, [r2, #2]
     d76:	1c59      	adds	r1, r3, #1
     d78:	7091      	strb	r1, [r2, #2]
     d7a:	4a06      	ldr	r2, [pc, #24]	; (d94 <pattern_generation+0x2c>)
     d7c:	5cd2      	ldrb	r2, [r2, r3]
     d7e:	210f      	movs	r1, #15
     d80:	4805      	ldr	r0, [pc, #20]	; (d98 <pattern_generation+0x30>)
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <pattern_generation+0x34>)
     d84:	4798      	blx	r3
     d86:	bd08      	pop	{r3, pc}
		iIndex = 0;
     d88:	2200      	movs	r2, #0
     d8a:	4b01      	ldr	r3, [pc, #4]	; (d90 <pattern_generation+0x28>)
     d8c:	709a      	strb	r2, [r3, #2]
     d8e:	e7f0      	b.n	d72 <pattern_generation+0xa>
     d90:	20000204 	.word	0x20000204
     d94:	20000000 	.word	0x20000000
     d98:	41016000 	.word	0x41016000
     d9c:	00001445 	.word	0x00001445

00000da0 <pwm_1khz_example>:
{
     da0:	b510      	push	{r4, lr}
	printf("1KHz PWM Waveform output available on WO[0] PIN\r\n");
     da2:	4808      	ldr	r0, [pc, #32]	; (dc4 <pwm_1khz_example+0x24>)
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <pwm_1khz_example+0x28>)
     da6:	4798      	blx	r3
	tcc_disable(TCC0);
     da8:	4c08      	ldr	r4, [pc, #32]	; (dcc <pwm_1khz_example+0x2c>)
     daa:	4620      	mov	r0, r4
     dac:	4b08      	ldr	r3, [pc, #32]	; (dd0 <pwm_1khz_example+0x30>)
     dae:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_500us, COMPARE_CHANNEL_0);
     db0:	2200      	movs	r2, #0
     db2:	f640 31b8 	movw	r1, #3000	; 0xbb8
     db6:	4620      	mov	r0, r4
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <pwm_1khz_example+0x34>)
     dba:	4798      	blx	r3
	tcc_enable(TCC0);
     dbc:	4620      	mov	r0, r4
     dbe:	4b06      	ldr	r3, [pc, #24]	; (dd8 <pwm_1khz_example+0x38>)
     dc0:	4798      	blx	r3
     dc2:	bd10      	pop	{r4, pc}
     dc4:	00002d94 	.word	0x00002d94
     dc8:	00001b1d 	.word	0x00001b1d
     dcc:	41016000 	.word	0x41016000
     dd0:	0000129f 	.word	0x0000129f
     dd4:	0000138b 	.word	0x0000138b
     dd8:	00001285 	.word	0x00001285

00000ddc <circular_buffer_example>:
{
     ddc:	b510      	push	{r4, lr}
	printf("Circular Buffer PWM Waveform output available on WO[0] PIN\r\n");
     dde:	4810      	ldr	r0, [pc, #64]	; (e20 <circular_buffer_example+0x44>)
     de0:	4b10      	ldr	r3, [pc, #64]	; (e24 <circular_buffer_example+0x48>)
     de2:	4798      	blx	r3
	tcc_disable(TCC0);
     de4:	4c10      	ldr	r4, [pc, #64]	; (e28 <circular_buffer_example+0x4c>)
     de6:	4620      	mov	r0, r4
     de8:	4b10      	ldr	r3, [pc, #64]	; (e2c <circular_buffer_example+0x50>)
     dea:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
     dec:	f241 7170 	movw	r1, #6000	; 0x1770
     df0:	4620      	mov	r0, r4
     df2:	4b0f      	ldr	r3, [pc, #60]	; (e30 <circular_buffer_example+0x54>)
     df4:	4798      	blx	r3
	tcc_enable_circular_buffer_compare(TCC0, COMPARE_CHANNEL_0);
     df6:	2100      	movs	r1, #0
     df8:	4620      	mov	r0, r4
     dfa:	4b0e      	ldr	r3, [pc, #56]	; (e34 <circular_buffer_example+0x58>)
     dfc:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_500us, COMPARE_CHANNEL_0);
     dfe:	2200      	movs	r2, #0
     e00:	f640 31b8 	movw	r1, #3000	; 0xbb8
     e04:	4620      	mov	r0, r4
     e06:	4b0c      	ldr	r3, [pc, #48]	; (e38 <circular_buffer_example+0x5c>)
     e08:	4798      	blx	r3
	tcc_set_compare_buffer_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_0);
     e0a:	2200      	movs	r2, #0
     e0c:	f240 51dc 	movw	r1, #1500	; 0x5dc
     e10:	4620      	mov	r0, r4
     e12:	4b0a      	ldr	r3, [pc, #40]	; (e3c <circular_buffer_example+0x60>)
     e14:	4798      	blx	r3
	tcc_enable(TCC0);
     e16:	4620      	mov	r0, r4
     e18:	4b09      	ldr	r3, [pc, #36]	; (e40 <circular_buffer_example+0x64>)
     e1a:	4798      	blx	r3
     e1c:	bd10      	pop	{r4, pc}
     e1e:	bf00      	nop
     e20:	00002dc8 	.word	0x00002dc8
     e24:	00001b1d 	.word	0x00001b1d
     e28:	41016000 	.word	0x41016000
     e2c:	0000129f 	.word	0x0000129f
     e30:	000013b9 	.word	0x000013b9
     e34:	000012b9 	.word	0x000012b9
     e38:	0000138b 	.word	0x0000138b
     e3c:	000013b1 	.word	0x000013b1
     e40:	00001285 	.word	0x00001285

00000e44 <dead_time_insertion_example>:
{
     e44:	b530      	push	{r4, r5, lr}
     e46:	b083      	sub	sp, #12
	printf("Dead Time inserted PWM Waveform output available on WO[0], WO[1], WO[2], WO[4], WO[5] and WO[6] PINs\r\n");
     e48:	4813      	ldr	r0, [pc, #76]	; (e98 <dead_time_insertion_example+0x54>)
     e4a:	4b14      	ldr	r3, [pc, #80]	; (e9c <dead_time_insertion_example+0x58>)
     e4c:	4798      	blx	r3
	tcc_disable(TCC0);
     e4e:	4c14      	ldr	r4, [pc, #80]	; (ea0 <dead_time_insertion_example+0x5c>)
     e50:	4620      	mov	r0, r4
     e52:	4b14      	ldr	r3, [pc, #80]	; (ea4 <dead_time_insertion_example+0x60>)
     e54:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
     e56:	f241 7170 	movw	r1, #6000	; 0x1770
     e5a:	4620      	mov	r0, r4
     e5c:	4b12      	ldr	r3, [pc, #72]	; (ea8 <dead_time_insertion_example+0x64>)
     e5e:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_0);
     e60:	2200      	movs	r2, #0
     e62:	f240 51dc 	movw	r1, #1500	; 0x5dc
     e66:	4620      	mov	r0, r4
     e68:	4d10      	ldr	r5, [pc, #64]	; (eac <dead_time_insertion_example+0x68>)
     e6a:	47a8      	blx	r5
	tcc_set_compare_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_1);
     e6c:	2201      	movs	r2, #1
     e6e:	f240 51dc 	movw	r1, #1500	; 0x5dc
     e72:	4620      	mov	r0, r4
     e74:	47a8      	blx	r5
	tcc_set_compare_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_2);
     e76:	2202      	movs	r2, #2
     e78:	f240 51dc 	movw	r1, #1500	; 0x5dc
     e7c:	4620      	mov	r0, r4
     e7e:	47a8      	blx	r5
	tcc_set_dead_time(TCC0, DEAD_TIME_CHANNEL_012, OTMX_SETTING_0, DEAD_TIME_10us, DEAD_TIME_10us);
     e80:	2378      	movs	r3, #120	; 0x78
     e82:	9300      	str	r3, [sp, #0]
     e84:	2200      	movs	r2, #0
     e86:	2107      	movs	r1, #7
     e88:	4620      	mov	r0, r4
     e8a:	4d09      	ldr	r5, [pc, #36]	; (eb0 <dead_time_insertion_example+0x6c>)
     e8c:	47a8      	blx	r5
	tcc_enable(TCC0);
     e8e:	4620      	mov	r0, r4
     e90:	4b08      	ldr	r3, [pc, #32]	; (eb4 <dead_time_insertion_example+0x70>)
     e92:	4798      	blx	r3
}
     e94:	b003      	add	sp, #12
     e96:	bd30      	pop	{r4, r5, pc}
     e98:	00002e04 	.word	0x00002e04
     e9c:	00001b1d 	.word	0x00001b1d
     ea0:	41016000 	.word	0x41016000
     ea4:	0000129f 	.word	0x0000129f
     ea8:	000013b9 	.word	0x000013b9
     eac:	0000138b 	.word	0x0000138b
     eb0:	000013d1 	.word	0x000013d1
     eb4:	00001285 	.word	0x00001285

00000eb8 <tcc_swap_feature_example>:
{
     eb8:	b530      	push	{r4, r5, lr}
     eba:	b083      	sub	sp, #12
	printf("PWM Waveform output available on WO[0] and WO[4] PIN\r\n");
     ebc:	4811      	ldr	r0, [pc, #68]	; (f04 <tcc_swap_feature_example+0x4c>)
     ebe:	4c12      	ldr	r4, [pc, #72]	; (f08 <tcc_swap_feature_example+0x50>)
     ec0:	47a0      	blx	r4
	printf("Press SW0 Button on XPlained PRO Board for swapping PWM Waveform between WO[0] and WO[4] PINs\r\n");
     ec2:	4812      	ldr	r0, [pc, #72]	; (f0c <tcc_swap_feature_example+0x54>)
     ec4:	47a0      	blx	r4
	tcc_disable(TCC0);
     ec6:	4c12      	ldr	r4, [pc, #72]	; (f10 <tcc_swap_feature_example+0x58>)
     ec8:	4620      	mov	r0, r4
     eca:	4b12      	ldr	r3, [pc, #72]	; (f14 <tcc_swap_feature_example+0x5c>)
     ecc:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
     ece:	f241 7170 	movw	r1, #6000	; 0x1770
     ed2:	4620      	mov	r0, r4
     ed4:	4b10      	ldr	r3, [pc, #64]	; (f18 <tcc_swap_feature_example+0x60>)
     ed6:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_0);
     ed8:	2200      	movs	r2, #0
     eda:	f240 51dc 	movw	r1, #1500	; 0x5dc
     ede:	4620      	mov	r0, r4
     ee0:	4b0e      	ldr	r3, [pc, #56]	; (f1c <tcc_swap_feature_example+0x64>)
     ee2:	4798      	blx	r3
	tcc_set_dead_time(TCC0, DEAD_TIME_CHANNEL(COMPARE_CHANNEL_0), OTMX_SETTING_0, DEAD_TIME_10us, DEAD_TIME_10us);
     ee4:	2378      	movs	r3, #120	; 0x78
     ee6:	9300      	str	r3, [sp, #0]
     ee8:	2200      	movs	r2, #0
     eea:	2101      	movs	r1, #1
     eec:	4620      	mov	r0, r4
     eee:	4d0c      	ldr	r5, [pc, #48]	; (f20 <tcc_swap_feature_example+0x68>)
     ef0:	47a8      	blx	r5
	tcc_enable(TCC0);
     ef2:	4620      	mov	r0, r4
     ef4:	4b0b      	ldr	r3, [pc, #44]	; (f24 <tcc_swap_feature_example+0x6c>)
     ef6:	4798      	blx	r3
	ext_irq_register(SW0, swap_waveform_on_SW0_press);
     ef8:	490b      	ldr	r1, [pc, #44]	; (f28 <tcc_swap_feature_example+0x70>)
     efa:	203f      	movs	r0, #63	; 0x3f
     efc:	4b0b      	ldr	r3, [pc, #44]	; (f2c <tcc_swap_feature_example+0x74>)
     efe:	4798      	blx	r3
}
     f00:	b003      	add	sp, #12
     f02:	bd30      	pop	{r4, r5, pc}
     f04:	00002e6c 	.word	0x00002e6c
     f08:	00001b1d 	.word	0x00001b1d
     f0c:	00002ea4 	.word	0x00002ea4
     f10:	41016000 	.word	0x41016000
     f14:	0000129f 	.word	0x0000129f
     f18:	000013b9 	.word	0x000013b9
     f1c:	0000138b 	.word	0x0000138b
     f20:	000013d1 	.word	0x000013d1
     f24:	00001285 	.word	0x00001285
     f28:	00000ce5 	.word	0x00000ce5
     f2c:	0000061d 	.word	0x0000061d

00000f30 <tcc_invert_feature_example>:
{
     f30:	b510      	push	{r4, lr}
	printf("PWM Waveform output available on WO[0] PIN\r\n");
     f32:	480e      	ldr	r0, [pc, #56]	; (f6c <tcc_invert_feature_example+0x3c>)
     f34:	4c0e      	ldr	r4, [pc, #56]	; (f70 <tcc_invert_feature_example+0x40>)
     f36:	47a0      	blx	r4
	printf("Press SW0 Button on XPlained PRO Board for inverting PWM Waveform \r\n");
     f38:	480e      	ldr	r0, [pc, #56]	; (f74 <tcc_invert_feature_example+0x44>)
     f3a:	47a0      	blx	r4
	tcc_disable(TCC0);
     f3c:	4c0e      	ldr	r4, [pc, #56]	; (f78 <tcc_invert_feature_example+0x48>)
     f3e:	4620      	mov	r0, r4
     f40:	4b0e      	ldr	r3, [pc, #56]	; (f7c <tcc_invert_feature_example+0x4c>)
     f42:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
     f44:	f241 7170 	movw	r1, #6000	; 0x1770
     f48:	4620      	mov	r0, r4
     f4a:	4b0d      	ldr	r3, [pc, #52]	; (f80 <tcc_invert_feature_example+0x50>)
     f4c:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_0);
     f4e:	2200      	movs	r2, #0
     f50:	f240 51dc 	movw	r1, #1500	; 0x5dc
     f54:	4620      	mov	r0, r4
     f56:	4b0b      	ldr	r3, [pc, #44]	; (f84 <tcc_invert_feature_example+0x54>)
     f58:	4798      	blx	r3
	tcc_enable(TCC0);
     f5a:	4620      	mov	r0, r4
     f5c:	4b0a      	ldr	r3, [pc, #40]	; (f88 <tcc_invert_feature_example+0x58>)
     f5e:	4798      	blx	r3
	ext_irq_register(SW0, invert_waveform_on_SW0_press);
     f60:	490a      	ldr	r1, [pc, #40]	; (f8c <tcc_invert_feature_example+0x5c>)
     f62:	203f      	movs	r0, #63	; 0x3f
     f64:	4b0a      	ldr	r3, [pc, #40]	; (f90 <tcc_invert_feature_example+0x60>)
     f66:	4798      	blx	r3
     f68:	bd10      	pop	{r4, pc}
     f6a:	bf00      	nop
     f6c:	00002dd8 	.word	0x00002dd8
     f70:	00001b1d 	.word	0x00001b1d
     f74:	00002f04 	.word	0x00002f04
     f78:	41016000 	.word	0x41016000
     f7c:	0000129f 	.word	0x0000129f
     f80:	000013b9 	.word	0x000013b9
     f84:	0000138b 	.word	0x0000138b
     f88:	00001285 	.word	0x00001285
     f8c:	00000d1d 	.word	0x00000d1d
     f90:	0000061d 	.word	0x0000061d

00000f94 <tcc_pattern_generation_example>:
}

void tcc_pattern_generation_example()
{
     f94:	b510      	push	{r4, lr}
	printf("TCC Pattern Generation PWM Waveform output available on WO[0], WO[1], WO[2] and WO[3] PINs\r\n");
     f96:	4817      	ldr	r0, [pc, #92]	; (ff4 <tcc_pattern_generation_example+0x60>)
     f98:	4b17      	ldr	r3, [pc, #92]	; (ff8 <tcc_pattern_generation_example+0x64>)
     f9a:	4798      	blx	r3
	tcc_disable(TCC0);
     f9c:	4c17      	ldr	r4, [pc, #92]	; (ffc <tcc_pattern_generation_example+0x68>)
     f9e:	4620      	mov	r0, r4
     fa0:	4b17      	ldr	r3, [pc, #92]	; (1000 <tcc_pattern_generation_example+0x6c>)
     fa2:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
     fa4:	f241 7170 	movw	r1, #6000	; 0x1770
     fa8:	4620      	mov	r0, r4
     faa:	4b16      	ldr	r3, [pc, #88]	; (1004 <tcc_pattern_generation_example+0x70>)
     fac:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_500us, COMPARE_CHANNEL_0);
     fae:	2200      	movs	r2, #0
     fb0:	f640 31b8 	movw	r1, #3000	; 0xbb8
     fb4:	4620      	mov	r0, r4
     fb6:	4b14      	ldr	r3, [pc, #80]	; (1008 <tcc_pattern_generation_example+0x74>)
     fb8:	4798      	blx	r3
	tcc_set_otmx_mode(TCC0, OTMX_SETTING_2);
     fba:	2100      	movs	r1, #0
     fbc:	4620      	mov	r0, r4
     fbe:	4b13      	ldr	r3, [pc, #76]	; (100c <tcc_pattern_generation_example+0x78>)
     fc0:	4798      	blx	r3
	tcc_set_pattern(TCC0, TCC_PATTERN_PAGE_VAL, sm_pattern[iIndex++]);
     fc2:	4a13      	ldr	r2, [pc, #76]	; (1010 <tcc_pattern_generation_example+0x7c>)
     fc4:	7893      	ldrb	r3, [r2, #2]
     fc6:	1c59      	adds	r1, r3, #1
     fc8:	7091      	strb	r1, [r2, #2]
     fca:	4a12      	ldr	r2, [pc, #72]	; (1014 <tcc_pattern_generation_example+0x80>)
     fcc:	5cd2      	ldrb	r2, [r2, r3]
     fce:	210f      	movs	r1, #15
     fd0:	4620      	mov	r0, r4
     fd2:	4b11      	ldr	r3, [pc, #68]	; (1018 <tcc_pattern_generation_example+0x84>)
     fd4:	4798      	blx	r3
	tcc_enable_interrupt(TCC0, TCC_INTENSET_MC0, pattern_generation);
     fd6:	4a11      	ldr	r2, [pc, #68]	; (101c <tcc_pattern_generation_example+0x88>)
     fd8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     fdc:	4620      	mov	r0, r4
     fde:	4b10      	ldr	r3, [pc, #64]	; (1020 <tcc_pattern_generation_example+0x8c>)
     fe0:	4798      	blx	r3
     fe2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     fe6:	4b0f      	ldr	r3, [pc, #60]	; (1024 <tcc_pattern_generation_example+0x90>)
     fe8:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ((IRQn_Type)TCC0_1_IRQn);
	tcc_enable(TCC0);
     fea:	4620      	mov	r0, r4
     fec:	4b0e      	ldr	r3, [pc, #56]	; (1028 <tcc_pattern_generation_example+0x94>)
     fee:	4798      	blx	r3
     ff0:	bd10      	pop	{r4, pc}
     ff2:	bf00      	nop
     ff4:	00002f48 	.word	0x00002f48
     ff8:	00001b1d 	.word	0x00001b1d
     ffc:	41016000 	.word	0x41016000
    1000:	0000129f 	.word	0x0000129f
    1004:	000013b9 	.word	0x000013b9
    1008:	0000138b 	.word	0x0000138b
    100c:	000013f5 	.word	0x000013f5
    1010:	20000204 	.word	0x20000204
    1014:	20000000 	.word	0x20000000
    1018:	0000142b 	.word	0x0000142b
    101c:	00000d69 	.word	0x00000d69
    1020:	00001459 	.word	0x00001459
    1024:	e000e100 	.word	0xe000e100
    1028:	00001285 	.word	0x00001285

0000102c <tcc_ramp2_feature_example>:

/************************************************************************/
/*               PWM Waveform using RAMP2 feature of TCC                */
/************************************************************************/
void tcc_ramp2_feature_example()
{
    102c:	b538      	push	{r3, r4, r5, lr}
	printf("TCC RAMP2 feature PWM Waveform Output available on WO[0] and WO[1] PINs\r\n");
    102e:	4813      	ldr	r0, [pc, #76]	; (107c <tcc_ramp2_feature_example+0x50>)
    1030:	4b13      	ldr	r3, [pc, #76]	; (1080 <tcc_ramp2_feature_example+0x54>)
    1032:	4798      	blx	r3
	tcc_disable(TCC0);
    1034:	4c13      	ldr	r4, [pc, #76]	; (1084 <tcc_ramp2_feature_example+0x58>)
    1036:	4620      	mov	r0, r4
    1038:	4b13      	ldr	r3, [pc, #76]	; (1088 <tcc_ramp2_feature_example+0x5c>)
    103a:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
    103c:	f241 7170 	movw	r1, #6000	; 0x1770
    1040:	4620      	mov	r0, r4
    1042:	4b12      	ldr	r3, [pc, #72]	; (108c <tcc_ramp2_feature_example+0x60>)
    1044:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_500us, COMPARE_CHANNEL_0);
    1046:	2200      	movs	r2, #0
    1048:	f640 31b8 	movw	r1, #3000	; 0xbb8
    104c:	4620      	mov	r0, r4
    104e:	4d10      	ldr	r5, [pc, #64]	; (1090 <tcc_ramp2_feature_example+0x64>)
    1050:	47a8      	blx	r5
	tcc_set_compare_value(TCC0, VALUE_FOR_1ms, COMPARE_CHANNEL_1);
    1052:	2201      	movs	r2, #1
    1054:	f241 7170 	movw	r1, #6000	; 0x1770
    1058:	4620      	mov	r0, r4
    105a:	47a8      	blx	r5
	tcc_set_ramp_operation(TCC0, TCC_WAVE_RAMP_RAMP2_Val);
    105c:	2102      	movs	r1, #2
    105e:	4620      	mov	r0, r4
    1060:	4b0c      	ldr	r3, [pc, #48]	; (1094 <tcc_ramp2_feature_example+0x68>)
    1062:	4798      	blx	r3
	tcc_enable_circular_buffer_period(TCC0);
    1064:	4620      	mov	r0, r4
    1066:	4b0c      	ldr	r3, [pc, #48]	; (1098 <tcc_ramp2_feature_example+0x6c>)
    1068:	4798      	blx	r3
	tcc_set_period_buffer_value(TCC0, VALUE_FOR_2ms);
    106a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    106e:	4620      	mov	r0, r4
    1070:	4b0a      	ldr	r3, [pc, #40]	; (109c <tcc_ramp2_feature_example+0x70>)
    1072:	4798      	blx	r3
	tcc_enable(TCC0);
    1074:	4620      	mov	r0, r4
    1076:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <tcc_ramp2_feature_example+0x74>)
    1078:	4798      	blx	r3
    107a:	bd38      	pop	{r3, r4, r5, pc}
    107c:	00002fa4 	.word	0x00002fa4
    1080:	00001b1d 	.word	0x00001b1d
    1084:	41016000 	.word	0x41016000
    1088:	0000129f 	.word	0x0000129f
    108c:	000013b9 	.word	0x000013b9
    1090:	0000138b 	.word	0x0000138b
    1094:	00001345 	.word	0x00001345
    1098:	000012dd 	.word	0x000012dd
    109c:	000013cd 	.word	0x000013cd
    10a0:	00001285 	.word	0x00001285

000010a4 <tcc_ramp2a_feature_example>:

/************************************************************************/
/*              PWM Waveform using RAMP2A feature of TCC                */
/************************************************************************/
void tcc_ramp2a_feature_example()
{
    10a4:	b510      	push	{r4, lr}
	printf("TCC RAMP2A feature PWM Waveform Output available on WO[0] and WO[1] PINs\r\n");
    10a6:	4816      	ldr	r0, [pc, #88]	; (1100 <tcc_ramp2a_feature_example+0x5c>)
    10a8:	4b16      	ldr	r3, [pc, #88]	; (1104 <tcc_ramp2a_feature_example+0x60>)
    10aa:	4798      	blx	r3
	tcc_disable(TCC0);
    10ac:	4c16      	ldr	r4, [pc, #88]	; (1108 <tcc_ramp2a_feature_example+0x64>)
    10ae:	4620      	mov	r0, r4
    10b0:	4b16      	ldr	r3, [pc, #88]	; (110c <tcc_ramp2a_feature_example+0x68>)
    10b2:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
    10b4:	f241 7170 	movw	r1, #6000	; 0x1770
    10b8:	4620      	mov	r0, r4
    10ba:	4b15      	ldr	r3, [pc, #84]	; (1110 <tcc_ramp2a_feature_example+0x6c>)
    10bc:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_500us, COMPARE_CHANNEL_0);
    10be:	2200      	movs	r2, #0
    10c0:	f640 31b8 	movw	r1, #3000	; 0xbb8
    10c4:	4620      	mov	r0, r4
    10c6:	4b13      	ldr	r3, [pc, #76]	; (1114 <tcc_ramp2a_feature_example+0x70>)
    10c8:	4798      	blx	r3
	tcc_set_ramp_operation(TCC0, TCC_WAVE_RAMP_RAMP2A_Val);
    10ca:	2101      	movs	r1, #1
    10cc:	4620      	mov	r0, r4
    10ce:	4b12      	ldr	r3, [pc, #72]	; (1118 <tcc_ramp2a_feature_example+0x74>)
    10d0:	4798      	blx	r3
	tcc_enable_circular_buffer_compare(TCC0, COMPARE_CHANNEL_0);
    10d2:	2100      	movs	r1, #0
    10d4:	4620      	mov	r0, r4
    10d6:	4b11      	ldr	r3, [pc, #68]	; (111c <tcc_ramp2a_feature_example+0x78>)
    10d8:	4798      	blx	r3
	tcc_enable_circular_buffer_period(TCC0);
    10da:	4620      	mov	r0, r4
    10dc:	4b10      	ldr	r3, [pc, #64]	; (1120 <tcc_ramp2a_feature_example+0x7c>)
    10de:	4798      	blx	r3
	tcc_set_compare_buffer_value(TCC0, VALUE_FOR_1ms, COMPARE_CHANNEL_0);
    10e0:	2200      	movs	r2, #0
    10e2:	f241 7170 	movw	r1, #6000	; 0x1770
    10e6:	4620      	mov	r0, r4
    10e8:	4b0e      	ldr	r3, [pc, #56]	; (1124 <tcc_ramp2a_feature_example+0x80>)
    10ea:	4798      	blx	r3
	tcc_set_period_buffer_value(TCC0, VALUE_FOR_2ms);
    10ec:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    10f0:	4620      	mov	r0, r4
    10f2:	4b0d      	ldr	r3, [pc, #52]	; (1128 <tcc_ramp2a_feature_example+0x84>)
    10f4:	4798      	blx	r3
	tcc_enable(TCC0);
    10f6:	4620      	mov	r0, r4
    10f8:	4b0c      	ldr	r3, [pc, #48]	; (112c <tcc_ramp2a_feature_example+0x88>)
    10fa:	4798      	blx	r3
    10fc:	bd10      	pop	{r4, pc}
    10fe:	bf00      	nop
    1100:	00002ff0 	.word	0x00002ff0
    1104:	00001b1d 	.word	0x00001b1d
    1108:	41016000 	.word	0x41016000
    110c:	0000129f 	.word	0x0000129f
    1110:	000013b9 	.word	0x000013b9
    1114:	0000138b 	.word	0x0000138b
    1118:	00001345 	.word	0x00001345
    111c:	000012b9 	.word	0x000012b9
    1120:	000012dd 	.word	0x000012dd
    1124:	000013b1 	.word	0x000013b1
    1128:	000013cd 	.word	0x000013cd
    112c:	00001285 	.word	0x00001285

00001130 <tcc_pwm_dual_slope_mode_example>:

/************************************************************************/
/*      PWM Waveform using Dual Slope PWM Operation feature of TCC      */
/************************************************************************/
void tcc_pwm_dual_slope_mode_example()
{
    1130:	b538      	push	{r3, r4, r5, lr}
	printf("TCC Dual Slope Center Aligned PWM Waveform Output available on WO[0], WO[1] and WO[2] PINs\r\n");
    1132:	4812      	ldr	r0, [pc, #72]	; (117c <tcc_pwm_dual_slope_mode_example+0x4c>)
    1134:	4b12      	ldr	r3, [pc, #72]	; (1180 <tcc_pwm_dual_slope_mode_example+0x50>)
    1136:	4798      	blx	r3
	tcc_disable(TCC0);
    1138:	4c12      	ldr	r4, [pc, #72]	; (1184 <tcc_pwm_dual_slope_mode_example+0x54>)
    113a:	4620      	mov	r0, r4
    113c:	4b12      	ldr	r3, [pc, #72]	; (1188 <tcc_pwm_dual_slope_mode_example+0x58>)
    113e:	4798      	blx	r3
	tcc_set_period_value(TCC0, VALUE_FOR_1ms);
    1140:	f241 7170 	movw	r1, #6000	; 0x1770
    1144:	4620      	mov	r0, r4
    1146:	4b11      	ldr	r3, [pc, #68]	; (118c <tcc_pwm_dual_slope_mode_example+0x5c>)
    1148:	4798      	blx	r3
	tcc_set_compare_value(TCC0, VALUE_FOR_250us, COMPARE_CHANNEL_0);
    114a:	2200      	movs	r2, #0
    114c:	f240 51dc 	movw	r1, #1500	; 0x5dc
    1150:	4620      	mov	r0, r4
    1152:	4d0f      	ldr	r5, [pc, #60]	; (1190 <tcc_pwm_dual_slope_mode_example+0x60>)
    1154:	47a8      	blx	r5
	tcc_set_compare_value(TCC0, VALUE_FOR_500us, COMPARE_CHANNEL_1);
    1156:	2201      	movs	r2, #1
    1158:	f640 31b8 	movw	r1, #3000	; 0xbb8
    115c:	4620      	mov	r0, r4
    115e:	47a8      	blx	r5
	tcc_set_compare_value(TCC0, VALUE_FOR_750us, COMPARE_CHANNEL_2);
    1160:	2202      	movs	r2, #2
    1162:	f241 1194 	movw	r1, #4500	; 0x1194
    1166:	4620      	mov	r0, r4
    1168:	47a8      	blx	r5
	tcc_set_wavegen_mode(TCC0, TCC_WAVE_WAVEGEN_DSTOP_Val);
    116a:	2107      	movs	r1, #7
    116c:	4620      	mov	r0, r4
    116e:	4b09      	ldr	r3, [pc, #36]	; (1194 <tcc_pwm_dual_slope_mode_example+0x64>)
    1170:	4798      	blx	r3
	tcc_enable(TCC0);
    1172:	4620      	mov	r0, r4
    1174:	4b08      	ldr	r3, [pc, #32]	; (1198 <tcc_pwm_dual_slope_mode_example+0x68>)
    1176:	4798      	blx	r3
    1178:	bd38      	pop	{r3, r4, r5, pc}
    117a:	bf00      	nop
    117c:	0000303c 	.word	0x0000303c
    1180:	00001b1d 	.word	0x00001b1d
    1184:	41016000 	.word	0x41016000
    1188:	0000129f 	.word	0x0000129f
    118c:	000013b9 	.word	0x000013b9
    1190:	0000138b 	.word	0x0000138b
    1194:	00001369 	.word	0x00001369
    1198:	00001285 	.word	0x00001285

0000119c <tcc_examples>:

/************************************************************************/
/*      PWM Waveform using Dual Slope PWM Operation feature of TCC      */
/************************************************************************/
void tcc_examples()
{
    119c:	b508      	push	{r3, lr}
	TCC_DEFAULT_CONFIGURATION;
    119e:	4b16      	ldr	r3, [pc, #88]	; (11f8 <tcc_examples+0x5c>)
    11a0:	4798      	blx	r3
	switch (example_selection) {
    11a2:	4b16      	ldr	r3, [pc, #88]	; (11fc <tcc_examples+0x60>)
    11a4:	685b      	ldr	r3, [r3, #4]
    11a6:	3b01      	subs	r3, #1
    11a8:	2b08      	cmp	r3, #8
    11aa:	d821      	bhi.n	11f0 <tcc_examples+0x54>
    11ac:	e8df f003 	tbb	[pc, r3]
    11b0:	0e0b0805 	.word	0x0e0b0805
    11b4:	1a171411 	.word	0x1a171411
    11b8:	1d          	.byte	0x1d
    11b9:	00          	.byte	0x00
	case 1:
		pwm_1khz_example();
    11ba:	4b11      	ldr	r3, [pc, #68]	; (1200 <tcc_examples+0x64>)
    11bc:	4798      	blx	r3
		break;
    11be:	bd08      	pop	{r3, pc}
	case 2:
		circular_buffer_example();
    11c0:	4b10      	ldr	r3, [pc, #64]	; (1204 <tcc_examples+0x68>)
    11c2:	4798      	blx	r3
		break;
    11c4:	bd08      	pop	{r3, pc}
	case 3:
		dead_time_insertion_example();
    11c6:	4b10      	ldr	r3, [pc, #64]	; (1208 <tcc_examples+0x6c>)
    11c8:	4798      	blx	r3
		break;
    11ca:	bd08      	pop	{r3, pc}
	case 4:
		tcc_swap_feature_example();
    11cc:	4b0f      	ldr	r3, [pc, #60]	; (120c <tcc_examples+0x70>)
    11ce:	4798      	blx	r3
		break;
    11d0:	bd08      	pop	{r3, pc}
	case 5:
		tcc_invert_feature_example();
    11d2:	4b0f      	ldr	r3, [pc, #60]	; (1210 <tcc_examples+0x74>)
    11d4:	4798      	blx	r3
		break;
    11d6:	bd08      	pop	{r3, pc}
	case 6:
		tcc_pattern_generation_example();
    11d8:	4b0e      	ldr	r3, [pc, #56]	; (1214 <tcc_examples+0x78>)
    11da:	4798      	blx	r3
		break;
    11dc:	bd08      	pop	{r3, pc}
	case 7:
		tcc_ramp2_feature_example();
    11de:	4b0e      	ldr	r3, [pc, #56]	; (1218 <tcc_examples+0x7c>)
    11e0:	4798      	blx	r3
		break;
    11e2:	bd08      	pop	{r3, pc}
	case 8:
		tcc_ramp2a_feature_example();
    11e4:	4b0d      	ldr	r3, [pc, #52]	; (121c <tcc_examples+0x80>)
    11e6:	4798      	blx	r3
		break;
    11e8:	bd08      	pop	{r3, pc}
	case 9:
		tcc_pwm_dual_slope_mode_example();
    11ea:	4b0d      	ldr	r3, [pc, #52]	; (1220 <tcc_examples+0x84>)
    11ec:	4798      	blx	r3
		break;
    11ee:	bd08      	pop	{r3, pc}
	default:
		pwm_1khz_example();
    11f0:	4b03      	ldr	r3, [pc, #12]	; (1200 <tcc_examples+0x64>)
    11f2:	4798      	blx	r3
    11f4:	bd08      	pop	{r3, pc}
    11f6:	bf00      	nop
    11f8:	00000c41 	.word	0x00000c41
    11fc:	20000000 	.word	0x20000000
    1200:	00000da1 	.word	0x00000da1
    1204:	00000ddd 	.word	0x00000ddd
    1208:	00000e45 	.word	0x00000e45
    120c:	00000eb9 	.word	0x00000eb9
    1210:	00000f31 	.word	0x00000f31
    1214:	00000f95 	.word	0x00000f95
    1218:	0000102d 	.word	0x0000102d
    121c:	000010a5 	.word	0x000010a5
    1220:	00001131 	.word	0x00001131

00001224 <main>:
		break;
	}
}
int main(void)
{
    1224:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1226:	4b0d      	ldr	r3, [pc, #52]	; (125c <main+0x38>)
    1228:	4798      	blx	r3
	printf(TCC_EXAMPLES);
    122a:	480d      	ldr	r0, [pc, #52]	; (1260 <main+0x3c>)
    122c:	4b0d      	ldr	r3, [pc, #52]	; (1264 <main+0x40>)
    122e:	4798      	blx	r3
	tcc_examples();
    1230:	4b0d      	ldr	r3, [pc, #52]	; (1268 <main+0x44>)
    1232:	4798      	blx	r3

	while (1) {
		printf("\r\n******************** Please Enter Choice ********************\r\n\n");
    1234:	4e0d      	ldr	r6, [pc, #52]	; (126c <main+0x48>)
    1236:	4d0b      	ldr	r5, [pc, #44]	; (1264 <main+0x40>)
		if (scanf("%d", &example_selection) == 0) {
    1238:	4c0d      	ldr	r4, [pc, #52]	; (1270 <main+0x4c>)
    123a:	e001      	b.n	1240 <main+0x1c>
			// If its not a number, flush stdin
			fflush(stdin);
			continue;
		}
		tcc_examples();
    123c:	4b0a      	ldr	r3, [pc, #40]	; (1268 <main+0x44>)
    123e:	4798      	blx	r3
		printf("\r\n******************** Please Enter Choice ********************\r\n\n");
    1240:	4630      	mov	r0, r6
    1242:	47a8      	blx	r5
		if (scanf("%d", &example_selection) == 0) {
    1244:	4621      	mov	r1, r4
    1246:	480b      	ldr	r0, [pc, #44]	; (1274 <main+0x50>)
    1248:	4b0b      	ldr	r3, [pc, #44]	; (1278 <main+0x54>)
    124a:	4798      	blx	r3
    124c:	2800      	cmp	r0, #0
    124e:	d1f5      	bne.n	123c <main+0x18>
			fflush(stdin);
    1250:	4b0a      	ldr	r3, [pc, #40]	; (127c <main+0x58>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	6858      	ldr	r0, [r3, #4]
    1256:	4b0a      	ldr	r3, [pc, #40]	; (1280 <main+0x5c>)
    1258:	4798      	blx	r3
			continue;
    125a:	e7f1      	b.n	1240 <main+0x1c>
    125c:	000002d1 	.word	0x000002d1
    1260:	00003098 	.word	0x00003098
    1264:	00001b1d 	.word	0x00001b1d
    1268:	0000119d 	.word	0x0000119d
    126c:	000032ac 	.word	0x000032ac
    1270:	20000004 	.word	0x20000004
    1274:	000032f0 	.word	0x000032f0
    1278:	00001b4d 	.word	0x00001b4d
    127c:	20000008 	.word	0x20000008
    1280:	000016c5 	.word	0x000016c5

00001284 <tcc_enable>:
    1284:	6883      	ldr	r3, [r0, #8]
    1286:	f013 0f02 	tst.w	r3, #2
    128a:	d1fb      	bne.n	1284 <tcc_enable>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    128c:	6803      	ldr	r3, [r0, #0]
    128e:	f043 0302 	orr.w	r3, r3, #2
    1292:	6003      	str	r3, [r0, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1294:	6883      	ldr	r3, [r0, #8]
    1296:	f013 0f03 	tst.w	r3, #3
    129a:	d1fb      	bne.n	1294 <tcc_enable+0x10>

void tcc_enable(void *const hw)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
	hri_tcc_set_CTRLA_ENABLE_bit(hw);
}
    129c:	4770      	bx	lr

0000129e <tcc_disable>:
    129e:	6883      	ldr	r3, [r0, #8]
    12a0:	f013 0f02 	tst.w	r3, #2
    12a4:	d1fb      	bne.n	129e <tcc_disable>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    12a6:	6803      	ldr	r3, [r0, #0]
    12a8:	f023 0302 	bic.w	r3, r3, #2
    12ac:	6003      	str	r3, [r0, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    12ae:	6883      	ldr	r3, [r0, #8]
    12b0:	f013 0f03 	tst.w	r3, #3
    12b4:	d1fb      	bne.n	12ae <tcc_disable+0x10>

void tcc_disable(void *const hw)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
	hri_tcc_clear_CTRLA_ENABLE_bit(hw);
}
    12b6:	4770      	bx	lr

000012b8 <tcc_enable_circular_buffer_compare>:
	((Tcc *)hw)->WAVE.reg |= mask;
    12b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c

void tcc_enable_circular_buffer_compare(void *const hw, uint8_t channel_index)
{
	hri_tcc_set_WAVE_reg(hw, TCC_WAVE_CICCEN(1 << channel_index));
    12ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    12be:	408b      	lsls	r3, r1
    12c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    12c4:	4313      	orrs	r3, r2
    12c6:	63c3      	str	r3, [r0, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    12c8:	6883      	ldr	r3, [r0, #8]
    12ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
    12ce:	2b00      	cmp	r3, #0
    12d0:	d1fa      	bne.n	12c8 <tcc_enable_circular_buffer_compare+0x10>
    12d2:	6883      	ldr	r3, [r0, #8]
    12d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    12d8:	d1fb      	bne.n	12d2 <tcc_enable_circular_buffer_compare+0x1a>
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}
    12da:	4770      	bx	lr

000012dc <tcc_enable_circular_buffer_period>:
	((Tcc *)hw)->WAVE.reg |= mask;
    12dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    12de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    12e2:	63c3      	str	r3, [r0, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    12e4:	6883      	ldr	r3, [r0, #8]
    12e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    12ea:	2b00      	cmp	r3, #0
    12ec:	d1fa      	bne.n	12e4 <tcc_enable_circular_buffer_period+0x8>
    12ee:	6883      	ldr	r3, [r0, #8]
    12f0:	f013 0f40 	tst.w	r3, #64	; 0x40
    12f4:	d1fb      	bne.n	12ee <tcc_enable_circular_buffer_period+0x12>

void tcc_enable_circular_buffer_period(void *const hw)
{
	hri_tcc_set_WAVE_reg(hw, TCC_WAVE_CIPEREN);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}
    12f6:	4770      	bx	lr

000012f8 <tcc_enable_channel_swap>:
	((Tcc *)hw)->WAVE.reg |= mask;
    12f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_enable_channel_swap(void *const hw, uint8_t channel_index)
{
	hri_tcc_set_WAVE_reg(hw, TCC_WAVE_SWAP(1 << channel_index));
    12fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    12fe:	408b      	lsls	r3, r1
    1300:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    1304:	4313      	orrs	r3, r2
    1306:	63c3      	str	r3, [r0, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1308:	6883      	ldr	r3, [r0, #8]
    130a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    130e:	2b00      	cmp	r3, #0
    1310:	d1fa      	bne.n	1308 <tcc_enable_channel_swap+0x10>
    1312:	6883      	ldr	r3, [r0, #8]
    1314:	f013 0f40 	tst.w	r3, #64	; 0x40
    1318:	d1fb      	bne.n	1312 <tcc_enable_channel_swap+0x1a>
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}
    131a:	4770      	bx	lr

0000131c <tcc_disable_channel_swap>:
	((Tcc *)hw)->WAVE.reg &= ~mask;
    131c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c

void tcc_disable_channel_swap(void *const hw, uint8_t channel_index)
{
	hri_tcc_clear_WAVE_reg(hw, TCC_WAVE_SWAP(1 << channel_index));
    131e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1322:	fa03 f101 	lsl.w	r1, r3, r1
    1326:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
    132a:	ea22 0101 	bic.w	r1, r2, r1
    132e:	63c1      	str	r1, [r0, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1330:	6883      	ldr	r3, [r0, #8]
    1332:	f3c3 030d 	ubfx	r3, r3, #0, #14
    1336:	2b00      	cmp	r3, #0
    1338:	d1fa      	bne.n	1330 <tcc_disable_channel_swap+0x14>
    133a:	6883      	ldr	r3, [r0, #8]
    133c:	f013 0f40 	tst.w	r3, #64	; 0x40
    1340:	d1fb      	bne.n	133a <tcc_disable_channel_swap+0x1e>
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}
    1342:	4770      	bx	lr

00001344 <tcc_set_ramp_operation>:
	tmp = ((Tcc *)hw)->WAVE.reg;
    1344:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	tmp &= ~TCC_WAVE_RAMP_Msk;
    1346:	f023 0330 	bic.w	r3, r3, #48	; 0x30
	tmp |= TCC_WAVE_RAMP(data);
    134a:	0109      	lsls	r1, r1, #4
    134c:	f001 0130 	and.w	r1, r1, #48	; 0x30
    1350:	4319      	orrs	r1, r3
	((Tcc *)hw)->WAVE.reg = tmp;
    1352:	63c1      	str	r1, [r0, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1354:	6883      	ldr	r3, [r0, #8]
    1356:	f3c3 030d 	ubfx	r3, r3, #0, #14
    135a:	2b00      	cmp	r3, #0
    135c:	d1fa      	bne.n	1354 <tcc_set_ramp_operation+0x10>
    135e:	6883      	ldr	r3, [r0, #8]
    1360:	f013 0f40 	tst.w	r3, #64	; 0x40
    1364:	d1fb      	bne.n	135e <tcc_set_ramp_operation+0x1a>

void tcc_set_ramp_operation(void *const hw, uint8_t ramp_value)
{
	hri_tcc_write_WAVE_RAMP_bf(hw, ramp_value);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}
    1366:	4770      	bx	lr

00001368 <tcc_set_wavegen_mode>:
	tmp = ((Tcc *)hw)->WAVE.reg;
    1368:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	tmp &= ~TCC_WAVE_WAVEGEN_Msk;
    136a:	f023 0307 	bic.w	r3, r3, #7
	tmp |= TCC_WAVE_WAVEGEN(data);
    136e:	f001 0107 	and.w	r1, r1, #7
    1372:	4319      	orrs	r1, r3
	((Tcc *)hw)->WAVE.reg = tmp;
    1374:	63c1      	str	r1, [r0, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1376:	6883      	ldr	r3, [r0, #8]
    1378:	f3c3 030d 	ubfx	r3, r3, #0, #14
    137c:	2b00      	cmp	r3, #0
    137e:	d1fa      	bne.n	1376 <tcc_set_wavegen_mode+0xe>
    1380:	6883      	ldr	r3, [r0, #8]
    1382:	f013 0f40 	tst.w	r3, #64	; 0x40
    1386:	d1fb      	bne.n	1380 <tcc_set_wavegen_mode+0x18>

void tcc_set_wavegen_mode(void *const hw, uint8_t wavegen)
{
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}
    1388:	4770      	bx	lr

0000138a <tcc_set_compare_value>:
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    138a:	f102 0310 	add.w	r3, r2, #16
    138e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    1392:	6059      	str	r1, [r3, #4]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1394:	6883      	ldr	r3, [r0, #8]
    1396:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    139a:	d1fb      	bne.n	1394 <tcc_set_compare_value+0xa>

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
	hri_tcc_write_CC_reg(hw, channel_index, value);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    139c:	f44f 7380 	mov.w	r3, #256	; 0x100
    13a0:	fa03 f202 	lsl.w	r2, r3, r2
    13a4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    13a8:	6883      	ldr	r3, [r0, #8]
    13aa:	421a      	tst	r2, r3
    13ac:	d1fc      	bne.n	13a8 <tcc_set_compare_value+0x1e>
}
    13ae:	4770      	bx	lr

000013b0 <tcc_set_compare_buffer_value>:
}

static inline void hri_tcc_write_CCBUF_reg(const void *const hw, uint8_t index, hri_tcc_ccbuf_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCBUF[index].reg = data;
    13b0:	321c      	adds	r2, #28
    13b2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    13b6:	4770      	bx	lr

000013b8 <tcc_set_period_value>:
	((Tcc *)hw)->PER.reg = data;
    13b8:	6401      	str	r1, [r0, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    13ba:	6883      	ldr	r3, [r0, #8]
    13bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    13c0:	d1fb      	bne.n	13ba <tcc_set_period_value+0x2>
    13c2:	6883      	ldr	r3, [r0, #8]
    13c4:	f013 0f80 	tst.w	r3, #128	; 0x80
    13c8:	d1fb      	bne.n	13c2 <tcc_set_period_value+0xa>

void tcc_set_period_value(void *const hw, uint32_t value)
{
	hri_tcc_write_PER_reg(hw, value);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
}
    13ca:	4770      	bx	lr

000013cc <tcc_set_period_buffer_value>:
	((Tcc *)hw)->PERBUF.reg = data;
    13cc:	66c1      	str	r1, [r0, #108]	; 0x6c
    13ce:	4770      	bx	lr

000013d0 <tcc_set_dead_time>:
{
	hri_tcc_clear_WEXCTRL_reg(hw, TCC_WEXCTRL_DTIEN(1 << channel_index));
}

void tcc_set_dead_time(void *const hw, uint8_t channels, uint8_t OTMX, uint8_t DTH_value, uint8_t DTL_value)
{
    13d0:	b430      	push	{r4, r5}
	((Tcc *)hw)->WEXCTRL.reg |= mask;
    13d2:	6944      	ldr	r4, [r0, #20]
	hri_tcc_set_WEXCTRL_reg(hw,
	                        TCC_WEXCTRL_OTMX(OTMX) | TCC_WEXCTRL_DTIEN(channels) | TCC_WEXCTRL_DTHS(DTH_value)
    13d4:	061b      	lsls	r3, r3, #24
    13d6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    13da:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    13de:	4323      	orrs	r3, r4
    13e0:	f002 0203 	and.w	r2, r2, #3
    13e4:	4313      	orrs	r3, r2
    13e6:	0209      	lsls	r1, r1, #8
    13e8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
    13ec:	430b      	orrs	r3, r1
    13ee:	6143      	str	r3, [r0, #20]
	                            | TCC_WEXCTRL_DTLS(DTL_value));
}
    13f0:	bc30      	pop	{r4, r5}
    13f2:	4770      	bx	lr

000013f4 <tcc_set_otmx_mode>:
    13f4:	6943      	ldr	r3, [r0, #20]

void tcc_set_otmx_mode(void *const hw, uint8_t OTMX)
{
	hri_tcc_set_WEXCTRL_reg(hw, TCC_WEXCTRL_OTMX(OTMX));
    13f6:	f001 0103 	and.w	r1, r1, #3
    13fa:	4319      	orrs	r1, r3
    13fc:	6141      	str	r1, [r0, #20]
    13fe:	4770      	bx	lr

00001400 <tcc_enable_channel_inversion>:
	((Tcc *)hw)->DRVCTRL.reg |= mask;
    1400:	6982      	ldr	r2, [r0, #24]
}

void tcc_enable_channel_inversion(void *const hw, uint8_t channel_index)
{
	hri_tcc_set_DRVCTRL_reg(hw, TCC_DRVCTRL_INVEN(1 << channel_index));
    1402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1406:	fa03 f101 	lsl.w	r1, r3, r1
    140a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    140e:	4311      	orrs	r1, r2
    1410:	6181      	str	r1, [r0, #24]
    1412:	4770      	bx	lr

00001414 <tcc_disable_channel_inversion>:
	((Tcc *)hw)->DRVCTRL.reg &= ~mask;
    1414:	6982      	ldr	r2, [r0, #24]
}

void tcc_disable_channel_inversion(void *const hw, uint8_t channel_index)
{
	hri_tcc_clear_DRVCTRL_reg(hw, TCC_DRVCTRL_INVEN(1 << channel_index));
    1416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    141a:	fa03 f101 	lsl.w	r1, r3, r1
    141e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    1422:	ea22 0101 	bic.w	r1, r2, r1
    1426:	6181      	str	r1, [r0, #24]
    1428:	4770      	bx	lr

0000142a <tcc_set_pattern>:
}

void tcc_set_pattern(void *const hw, uint8_t pattern_channels, uint8_t pattern)
{
	hri_tcc_write_PATT_reg(hw, TCC_PATT_PGE(pattern_channels) | TCC_PATT_PGV(pattern));
    142a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
	((Tcc *)hw)->PATT.reg = data;
    142e:	8702      	strh	r2, [r0, #56]	; 0x38
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1430:	6883      	ldr	r3, [r0, #8]
    1432:	f3c3 030d 	ubfx	r3, r3, #0, #14
    1436:	2b00      	cmp	r3, #0
    1438:	d1fa      	bne.n	1430 <tcc_set_pattern+0x6>
    143a:	6883      	ldr	r3, [r0, #8]
    143c:	f013 0f20 	tst.w	r3, #32
    1440:	d1fb      	bne.n	143a <tcc_set_pattern+0x10>
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PATT);
}
    1442:	4770      	bx	lr

00001444 <tcc_set_pattern_buffer>:

void tcc_set_pattern_buffer(void *const hw, uint8_t pattern_channels, uint8_t pattern)
{
	hri_tcc_write_PATTBUF_reg(hw, TCC_PATTBUF_PGEB(pattern_channels) | TCC_PATTBUF_PGVB(pattern));
    1444:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
	((Tcc *)hw)->PATTBUF.reg = data;
    1448:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    144c:	6883      	ldr	r3, [r0, #8]
    144e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1452:	d1fb      	bne.n	144c <tcc_set_pattern_buffer+0x8>
	hri_tcc_wait_for_sync(hw, 1 << 16);
}
    1454:	4770      	bx	lr
	...

00001458 <tcc_enable_interrupt>:
	((Tcc *)hw)->INTENSET.reg = mask;
    1458:	6281      	str	r1, [r0, #40]	; 0x28

void tcc_enable_interrupt(void *const hw, uint32_t tcc_interrupt, void *const cb)
{
	hri_tcc_set_INTEN_reg(hw, tcc_interrupt);
	switch (tcc_interrupt) {
    145a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
	case TCC_INTENSET_MC0:
		tcc_cb.pwm_mc0_cb = cb;
    145e:	bf04      	itt	eq
    1460:	4b01      	ldreq	r3, [pc, #4]	; (1468 <tcc_enable_interrupt+0x10>)
    1462:	601a      	streq	r2, [r3, #0]
    1464:	4770      	bx	lr
    1466:	bf00      	nop
    1468:	20000230 	.word	0x20000230

0000146c <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    146c:	b508      	push	{r3, lr}
	((Tcc *)hw)->INTFLAG.reg = mask;
    146e:	4804      	ldr	r0, [pc, #16]	; (1480 <TCC0_1_Handler+0x14>)
    1470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1474:	62c3      	str	r3, [r0, #44]	; 0x2c
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
	tcc_cb.pwm_mc0_cb(TCC0);
    1476:	4b03      	ldr	r3, [pc, #12]	; (1484 <TCC0_1_Handler+0x18>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	4798      	blx	r3
    147c:	bd08      	pop	{r3, pc}
    147e:	bf00      	nop
    1480:	41016000 	.word	0x41016000
    1484:	20000230 	.word	0x20000230

00001488 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1488:	b940      	cbnz	r0, 149c <_read+0x14>
{
    148a:	b508      	push	{r3, lr}
    148c:	460b      	mov	r3, r1
    148e:	4611      	mov	r1, r2
    1490:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1492:	4b04      	ldr	r3, [pc, #16]	; (14a4 <_read+0x1c>)
    1494:	4798      	blx	r3
    1496:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    149a:	bd08      	pop	{r3, pc}
		return -1;
    149c:	f04f 30ff 	mov.w	r0, #4294967295
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	000014f9 	.word	0x000014f9

000014a8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    14a8:	3801      	subs	r0, #1
    14aa:	2802      	cmp	r0, #2
    14ac:	d808      	bhi.n	14c0 <_write+0x18>
{
    14ae:	b508      	push	{r3, lr}
    14b0:	460b      	mov	r3, r1
    14b2:	4611      	mov	r1, r2
    14b4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    14b6:	4b04      	ldr	r3, [pc, #16]	; (14c8 <_write+0x20>)
    14b8:	4798      	blx	r3
    14ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    14be:	bd08      	pop	{r3, pc}
		return -1;
    14c0:	f04f 30ff 	mov.w	r0, #4294967295
    14c4:	4770      	bx	lr
    14c6:	bf00      	nop
    14c8:	0000151d 	.word	0x0000151d

000014cc <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    14cc:	b570      	push	{r4, r5, r6, lr}
    14ce:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    14d0:	4d06      	ldr	r5, [pc, #24]	; (14ec <stdio_io_init+0x20>)
    14d2:	682b      	ldr	r3, [r5, #0]
    14d4:	2100      	movs	r1, #0
    14d6:	6898      	ldr	r0, [r3, #8]
    14d8:	4c05      	ldr	r4, [pc, #20]	; (14f0 <stdio_io_init+0x24>)
    14da:	47a0      	blx	r4
	setbuf(stdin, NULL);
    14dc:	682b      	ldr	r3, [r5, #0]
    14de:	2100      	movs	r1, #0
    14e0:	6858      	ldr	r0, [r3, #4]
    14e2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    14e4:	4b03      	ldr	r3, [pc, #12]	; (14f4 <stdio_io_init+0x28>)
    14e6:	601e      	str	r6, [r3, #0]
    14e8:	bd70      	pop	{r4, r5, r6, pc}
    14ea:	bf00      	nop
    14ec:	20000008 	.word	0x20000008
    14f0:	00001b7d 	.word	0x00001b7d
    14f4:	20000208 	.word	0x20000208

000014f8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    14f8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    14fa:	4b06      	ldr	r3, [pc, #24]	; (1514 <stdio_io_read+0x1c>)
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	b133      	cbz	r3, 150e <stdio_io_read+0x16>
    1500:	460a      	mov	r2, r1
    1502:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1504:	b292      	uxth	r2, r2
    1506:	4618      	mov	r0, r3
    1508:	4b03      	ldr	r3, [pc, #12]	; (1518 <stdio_io_read+0x20>)
    150a:	4798      	blx	r3
    150c:	bd08      	pop	{r3, pc}
		return 0;
    150e:	2000      	movs	r0, #0
}
    1510:	bd08      	pop	{r3, pc}
    1512:	bf00      	nop
    1514:	20000208 	.word	0x20000208
    1518:	0000068d 	.word	0x0000068d

0000151c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    151c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    151e:	4b06      	ldr	r3, [pc, #24]	; (1538 <stdio_io_write+0x1c>)
    1520:	681b      	ldr	r3, [r3, #0]
    1522:	b133      	cbz	r3, 1532 <stdio_io_write+0x16>
    1524:	460a      	mov	r2, r1
    1526:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1528:	b292      	uxth	r2, r2
    152a:	4618      	mov	r0, r3
    152c:	4b03      	ldr	r3, [pc, #12]	; (153c <stdio_io_write+0x20>)
    152e:	4798      	blx	r3
    1530:	bd08      	pop	{r3, pc}
		return 0;
    1532:	2000      	movs	r0, #0
}
    1534:	bd08      	pop	{r3, pc}
    1536:	bf00      	nop
    1538:	20000208 	.word	0x20000208
    153c:	0000065d 	.word	0x0000065d

00001540 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1540:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_UART);
    1542:	4c04      	ldr	r4, [pc, #16]	; (1554 <stdio_redirect_init+0x14>)
    1544:	4620      	mov	r0, r4
    1546:	4b04      	ldr	r3, [pc, #16]	; (1558 <stdio_redirect_init+0x18>)
    1548:	4798      	blx	r3
	stdio_io_init(&EDBG_UART.io);
    154a:	4620      	mov	r0, r4
    154c:	4b03      	ldr	r3, [pc, #12]	; (155c <stdio_redirect_init+0x1c>)
    154e:	4798      	blx	r3
    1550:	bd10      	pop	{r4, pc}
    1552:	bf00      	nop
    1554:	20000214 	.word	0x20000214
    1558:	000007d9 	.word	0x000007d9
    155c:	000014cd 	.word	0x000014cd

00001560 <__sflush_r>:
    1560:	898a      	ldrh	r2, [r1, #12]
    1562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1566:	4605      	mov	r5, r0
    1568:	0710      	lsls	r0, r2, #28
    156a:	460c      	mov	r4, r1
    156c:	d45a      	bmi.n	1624 <__sflush_r+0xc4>
    156e:	684b      	ldr	r3, [r1, #4]
    1570:	2b00      	cmp	r3, #0
    1572:	dc05      	bgt.n	1580 <__sflush_r+0x20>
    1574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1576:	2b00      	cmp	r3, #0
    1578:	dc02      	bgt.n	1580 <__sflush_r+0x20>
    157a:	2000      	movs	r0, #0
    157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1582:	2e00      	cmp	r6, #0
    1584:	d0f9      	beq.n	157a <__sflush_r+0x1a>
    1586:	2300      	movs	r3, #0
    1588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    158c:	682f      	ldr	r7, [r5, #0]
    158e:	602b      	str	r3, [r5, #0]
    1590:	d033      	beq.n	15fa <__sflush_r+0x9a>
    1592:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1594:	89a3      	ldrh	r3, [r4, #12]
    1596:	075a      	lsls	r2, r3, #29
    1598:	d505      	bpl.n	15a6 <__sflush_r+0x46>
    159a:	6863      	ldr	r3, [r4, #4]
    159c:	1ac0      	subs	r0, r0, r3
    159e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    15a0:	b10b      	cbz	r3, 15a6 <__sflush_r+0x46>
    15a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    15a4:	1ac0      	subs	r0, r0, r3
    15a6:	2300      	movs	r3, #0
    15a8:	4602      	mov	r2, r0
    15aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    15ac:	6a21      	ldr	r1, [r4, #32]
    15ae:	4628      	mov	r0, r5
    15b0:	47b0      	blx	r6
    15b2:	1c43      	adds	r3, r0, #1
    15b4:	89a3      	ldrh	r3, [r4, #12]
    15b6:	d106      	bne.n	15c6 <__sflush_r+0x66>
    15b8:	6829      	ldr	r1, [r5, #0]
    15ba:	291d      	cmp	r1, #29
    15bc:	d84b      	bhi.n	1656 <__sflush_r+0xf6>
    15be:	4a2b      	ldr	r2, [pc, #172]	; (166c <__sflush_r+0x10c>)
    15c0:	40ca      	lsrs	r2, r1
    15c2:	07d6      	lsls	r6, r2, #31
    15c4:	d547      	bpl.n	1656 <__sflush_r+0xf6>
    15c6:	2200      	movs	r2, #0
    15c8:	6062      	str	r2, [r4, #4]
    15ca:	04d9      	lsls	r1, r3, #19
    15cc:	6922      	ldr	r2, [r4, #16]
    15ce:	6022      	str	r2, [r4, #0]
    15d0:	d504      	bpl.n	15dc <__sflush_r+0x7c>
    15d2:	1c42      	adds	r2, r0, #1
    15d4:	d101      	bne.n	15da <__sflush_r+0x7a>
    15d6:	682b      	ldr	r3, [r5, #0]
    15d8:	b903      	cbnz	r3, 15dc <__sflush_r+0x7c>
    15da:	6560      	str	r0, [r4, #84]	; 0x54
    15dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    15de:	602f      	str	r7, [r5, #0]
    15e0:	2900      	cmp	r1, #0
    15e2:	d0ca      	beq.n	157a <__sflush_r+0x1a>
    15e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    15e8:	4299      	cmp	r1, r3
    15ea:	d002      	beq.n	15f2 <__sflush_r+0x92>
    15ec:	4628      	mov	r0, r5
    15ee:	f000 f98d 	bl	190c <_free_r>
    15f2:	2000      	movs	r0, #0
    15f4:	6360      	str	r0, [r4, #52]	; 0x34
    15f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15fa:	6a21      	ldr	r1, [r4, #32]
    15fc:	2301      	movs	r3, #1
    15fe:	4628      	mov	r0, r5
    1600:	47b0      	blx	r6
    1602:	1c41      	adds	r1, r0, #1
    1604:	d1c6      	bne.n	1594 <__sflush_r+0x34>
    1606:	682b      	ldr	r3, [r5, #0]
    1608:	2b00      	cmp	r3, #0
    160a:	d0c3      	beq.n	1594 <__sflush_r+0x34>
    160c:	2b1d      	cmp	r3, #29
    160e:	d001      	beq.n	1614 <__sflush_r+0xb4>
    1610:	2b16      	cmp	r3, #22
    1612:	d101      	bne.n	1618 <__sflush_r+0xb8>
    1614:	602f      	str	r7, [r5, #0]
    1616:	e7b0      	b.n	157a <__sflush_r+0x1a>
    1618:	89a3      	ldrh	r3, [r4, #12]
    161a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    161e:	81a3      	strh	r3, [r4, #12]
    1620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1624:	690f      	ldr	r7, [r1, #16]
    1626:	2f00      	cmp	r7, #0
    1628:	d0a7      	beq.n	157a <__sflush_r+0x1a>
    162a:	0793      	lsls	r3, r2, #30
    162c:	680e      	ldr	r6, [r1, #0]
    162e:	bf08      	it	eq
    1630:	694b      	ldreq	r3, [r1, #20]
    1632:	600f      	str	r7, [r1, #0]
    1634:	bf18      	it	ne
    1636:	2300      	movne	r3, #0
    1638:	eba6 0807 	sub.w	r8, r6, r7
    163c:	608b      	str	r3, [r1, #8]
    163e:	f1b8 0f00 	cmp.w	r8, #0
    1642:	dd9a      	ble.n	157a <__sflush_r+0x1a>
    1644:	4643      	mov	r3, r8
    1646:	463a      	mov	r2, r7
    1648:	6a21      	ldr	r1, [r4, #32]
    164a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    164c:	4628      	mov	r0, r5
    164e:	47b0      	blx	r6
    1650:	2800      	cmp	r0, #0
    1652:	dc07      	bgt.n	1664 <__sflush_r+0x104>
    1654:	89a3      	ldrh	r3, [r4, #12]
    1656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    165a:	81a3      	strh	r3, [r4, #12]
    165c:	f04f 30ff 	mov.w	r0, #4294967295
    1660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1664:	4407      	add	r7, r0
    1666:	eba8 0800 	sub.w	r8, r8, r0
    166a:	e7e8      	b.n	163e <__sflush_r+0xde>
    166c:	20400001 	.word	0x20400001

00001670 <_fflush_r>:
    1670:	b538      	push	{r3, r4, r5, lr}
    1672:	690b      	ldr	r3, [r1, #16]
    1674:	4605      	mov	r5, r0
    1676:	460c      	mov	r4, r1
    1678:	b1db      	cbz	r3, 16b2 <_fflush_r+0x42>
    167a:	b118      	cbz	r0, 1684 <_fflush_r+0x14>
    167c:	6983      	ldr	r3, [r0, #24]
    167e:	b90b      	cbnz	r3, 1684 <_fflush_r+0x14>
    1680:	f000 f872 	bl	1768 <__sinit>
    1684:	4b0c      	ldr	r3, [pc, #48]	; (16b8 <_fflush_r+0x48>)
    1686:	429c      	cmp	r4, r3
    1688:	d109      	bne.n	169e <_fflush_r+0x2e>
    168a:	686c      	ldr	r4, [r5, #4]
    168c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1690:	b17b      	cbz	r3, 16b2 <_fflush_r+0x42>
    1692:	4621      	mov	r1, r4
    1694:	4628      	mov	r0, r5
    1696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    169a:	f7ff bf61 	b.w	1560 <__sflush_r>
    169e:	4b07      	ldr	r3, [pc, #28]	; (16bc <_fflush_r+0x4c>)
    16a0:	429c      	cmp	r4, r3
    16a2:	d101      	bne.n	16a8 <_fflush_r+0x38>
    16a4:	68ac      	ldr	r4, [r5, #8]
    16a6:	e7f1      	b.n	168c <_fflush_r+0x1c>
    16a8:	4b05      	ldr	r3, [pc, #20]	; (16c0 <_fflush_r+0x50>)
    16aa:	429c      	cmp	r4, r3
    16ac:	bf08      	it	eq
    16ae:	68ec      	ldreq	r4, [r5, #12]
    16b0:	e7ec      	b.n	168c <_fflush_r+0x1c>
    16b2:	2000      	movs	r0, #0
    16b4:	bd38      	pop	{r3, r4, r5, pc}
    16b6:	bf00      	nop
    16b8:	00003314 	.word	0x00003314
    16bc:	00003334 	.word	0x00003334
    16c0:	000032f4 	.word	0x000032f4

000016c4 <fflush>:
    16c4:	4601      	mov	r1, r0
    16c6:	b920      	cbnz	r0, 16d2 <fflush+0xe>
    16c8:	4b04      	ldr	r3, [pc, #16]	; (16dc <fflush+0x18>)
    16ca:	4905      	ldr	r1, [pc, #20]	; (16e0 <fflush+0x1c>)
    16cc:	6818      	ldr	r0, [r3, #0]
    16ce:	f000 b8d3 	b.w	1878 <_fwalk_reent>
    16d2:	4b04      	ldr	r3, [pc, #16]	; (16e4 <fflush+0x20>)
    16d4:	6818      	ldr	r0, [r3, #0]
    16d6:	f7ff bfcb 	b.w	1670 <_fflush_r>
    16da:	bf00      	nop
    16dc:	00003354 	.word	0x00003354
    16e0:	00001671 	.word	0x00001671
    16e4:	20000008 	.word	0x20000008

000016e8 <_cleanup_r>:
    16e8:	4901      	ldr	r1, [pc, #4]	; (16f0 <_cleanup_r+0x8>)
    16ea:	f000 b8c5 	b.w	1878 <_fwalk_reent>
    16ee:	bf00      	nop
    16f0:	00001671 	.word	0x00001671

000016f4 <std.isra.0>:
    16f4:	2300      	movs	r3, #0
    16f6:	b510      	push	{r4, lr}
    16f8:	4604      	mov	r4, r0
    16fa:	6003      	str	r3, [r0, #0]
    16fc:	6043      	str	r3, [r0, #4]
    16fe:	6083      	str	r3, [r0, #8]
    1700:	8181      	strh	r1, [r0, #12]
    1702:	6643      	str	r3, [r0, #100]	; 0x64
    1704:	81c2      	strh	r2, [r0, #14]
    1706:	6103      	str	r3, [r0, #16]
    1708:	6143      	str	r3, [r0, #20]
    170a:	6183      	str	r3, [r0, #24]
    170c:	4619      	mov	r1, r3
    170e:	2208      	movs	r2, #8
    1710:	305c      	adds	r0, #92	; 0x5c
    1712:	f000 f8f3 	bl	18fc <memset>
    1716:	4b05      	ldr	r3, [pc, #20]	; (172c <std.isra.0+0x38>)
    1718:	6263      	str	r3, [r4, #36]	; 0x24
    171a:	4b05      	ldr	r3, [pc, #20]	; (1730 <std.isra.0+0x3c>)
    171c:	62a3      	str	r3, [r4, #40]	; 0x28
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <std.isra.0+0x40>)
    1720:	62e3      	str	r3, [r4, #44]	; 0x2c
    1722:	4b05      	ldr	r3, [pc, #20]	; (1738 <std.isra.0+0x44>)
    1724:	6224      	str	r4, [r4, #32]
    1726:	6323      	str	r3, [r4, #48]	; 0x30
    1728:	bd10      	pop	{r4, pc}
    172a:	bf00      	nop
    172c:	00001ce9 	.word	0x00001ce9
    1730:	00001d0b 	.word	0x00001d0b
    1734:	00001d43 	.word	0x00001d43
    1738:	00001d67 	.word	0x00001d67

0000173c <__sfmoreglue>:
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	1e4a      	subs	r2, r1, #1
    1740:	2568      	movs	r5, #104	; 0x68
    1742:	4355      	muls	r5, r2
    1744:	460e      	mov	r6, r1
    1746:	f105 0174 	add.w	r1, r5, #116	; 0x74
    174a:	f000 f92d 	bl	19a8 <_malloc_r>
    174e:	4604      	mov	r4, r0
    1750:	b140      	cbz	r0, 1764 <__sfmoreglue+0x28>
    1752:	2100      	movs	r1, #0
    1754:	e880 0042 	stmia.w	r0, {r1, r6}
    1758:	300c      	adds	r0, #12
    175a:	60a0      	str	r0, [r4, #8]
    175c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1760:	f000 f8cc 	bl	18fc <memset>
    1764:	4620      	mov	r0, r4
    1766:	bd70      	pop	{r4, r5, r6, pc}

00001768 <__sinit>:
    1768:	6983      	ldr	r3, [r0, #24]
    176a:	b510      	push	{r4, lr}
    176c:	4604      	mov	r4, r0
    176e:	bb33      	cbnz	r3, 17be <__sinit+0x56>
    1770:	6483      	str	r3, [r0, #72]	; 0x48
    1772:	64c3      	str	r3, [r0, #76]	; 0x4c
    1774:	6503      	str	r3, [r0, #80]	; 0x50
    1776:	4b12      	ldr	r3, [pc, #72]	; (17c0 <__sinit+0x58>)
    1778:	4a12      	ldr	r2, [pc, #72]	; (17c4 <__sinit+0x5c>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	6282      	str	r2, [r0, #40]	; 0x28
    177e:	4298      	cmp	r0, r3
    1780:	bf04      	itt	eq
    1782:	2301      	moveq	r3, #1
    1784:	6183      	streq	r3, [r0, #24]
    1786:	f000 f81f 	bl	17c8 <__sfp>
    178a:	6060      	str	r0, [r4, #4]
    178c:	4620      	mov	r0, r4
    178e:	f000 f81b 	bl	17c8 <__sfp>
    1792:	60a0      	str	r0, [r4, #8]
    1794:	4620      	mov	r0, r4
    1796:	f000 f817 	bl	17c8 <__sfp>
    179a:	2200      	movs	r2, #0
    179c:	60e0      	str	r0, [r4, #12]
    179e:	2104      	movs	r1, #4
    17a0:	6860      	ldr	r0, [r4, #4]
    17a2:	f7ff ffa7 	bl	16f4 <std.isra.0>
    17a6:	2201      	movs	r2, #1
    17a8:	2109      	movs	r1, #9
    17aa:	68a0      	ldr	r0, [r4, #8]
    17ac:	f7ff ffa2 	bl	16f4 <std.isra.0>
    17b0:	2202      	movs	r2, #2
    17b2:	2112      	movs	r1, #18
    17b4:	68e0      	ldr	r0, [r4, #12]
    17b6:	f7ff ff9d 	bl	16f4 <std.isra.0>
    17ba:	2301      	movs	r3, #1
    17bc:	61a3      	str	r3, [r4, #24]
    17be:	bd10      	pop	{r4, pc}
    17c0:	00003354 	.word	0x00003354
    17c4:	000016e9 	.word	0x000016e9

000017c8 <__sfp>:
    17c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ca:	4b1c      	ldr	r3, [pc, #112]	; (183c <__sfp+0x74>)
    17cc:	681e      	ldr	r6, [r3, #0]
    17ce:	69b3      	ldr	r3, [r6, #24]
    17d0:	4607      	mov	r7, r0
    17d2:	b913      	cbnz	r3, 17da <__sfp+0x12>
    17d4:	4630      	mov	r0, r6
    17d6:	f7ff ffc7 	bl	1768 <__sinit>
    17da:	3648      	adds	r6, #72	; 0x48
    17dc:	68b4      	ldr	r4, [r6, #8]
    17de:	6873      	ldr	r3, [r6, #4]
    17e0:	3b01      	subs	r3, #1
    17e2:	d503      	bpl.n	17ec <__sfp+0x24>
    17e4:	6833      	ldr	r3, [r6, #0]
    17e6:	b133      	cbz	r3, 17f6 <__sfp+0x2e>
    17e8:	6836      	ldr	r6, [r6, #0]
    17ea:	e7f7      	b.n	17dc <__sfp+0x14>
    17ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    17f0:	b16d      	cbz	r5, 180e <__sfp+0x46>
    17f2:	3468      	adds	r4, #104	; 0x68
    17f4:	e7f4      	b.n	17e0 <__sfp+0x18>
    17f6:	2104      	movs	r1, #4
    17f8:	4638      	mov	r0, r7
    17fa:	f7ff ff9f 	bl	173c <__sfmoreglue>
    17fe:	6030      	str	r0, [r6, #0]
    1800:	2800      	cmp	r0, #0
    1802:	d1f1      	bne.n	17e8 <__sfp+0x20>
    1804:	230c      	movs	r3, #12
    1806:	603b      	str	r3, [r7, #0]
    1808:	4604      	mov	r4, r0
    180a:	4620      	mov	r0, r4
    180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    180e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1812:	81e3      	strh	r3, [r4, #14]
    1814:	2301      	movs	r3, #1
    1816:	81a3      	strh	r3, [r4, #12]
    1818:	6665      	str	r5, [r4, #100]	; 0x64
    181a:	6025      	str	r5, [r4, #0]
    181c:	60a5      	str	r5, [r4, #8]
    181e:	6065      	str	r5, [r4, #4]
    1820:	6125      	str	r5, [r4, #16]
    1822:	6165      	str	r5, [r4, #20]
    1824:	61a5      	str	r5, [r4, #24]
    1826:	2208      	movs	r2, #8
    1828:	4629      	mov	r1, r5
    182a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    182e:	f000 f865 	bl	18fc <memset>
    1832:	6365      	str	r5, [r4, #52]	; 0x34
    1834:	63a5      	str	r5, [r4, #56]	; 0x38
    1836:	64a5      	str	r5, [r4, #72]	; 0x48
    1838:	64e5      	str	r5, [r4, #76]	; 0x4c
    183a:	e7e6      	b.n	180a <__sfp+0x42>
    183c:	00003354 	.word	0x00003354

00001840 <_fwalk>:
    1840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1844:	4688      	mov	r8, r1
    1846:	f100 0448 	add.w	r4, r0, #72	; 0x48
    184a:	2600      	movs	r6, #0
    184c:	b914      	cbnz	r4, 1854 <_fwalk+0x14>
    184e:	4630      	mov	r0, r6
    1850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1854:	68a5      	ldr	r5, [r4, #8]
    1856:	6867      	ldr	r7, [r4, #4]
    1858:	3f01      	subs	r7, #1
    185a:	d501      	bpl.n	1860 <_fwalk+0x20>
    185c:	6824      	ldr	r4, [r4, #0]
    185e:	e7f5      	b.n	184c <_fwalk+0xc>
    1860:	89ab      	ldrh	r3, [r5, #12]
    1862:	2b01      	cmp	r3, #1
    1864:	d906      	bls.n	1874 <_fwalk+0x34>
    1866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    186a:	3301      	adds	r3, #1
    186c:	d002      	beq.n	1874 <_fwalk+0x34>
    186e:	4628      	mov	r0, r5
    1870:	47c0      	blx	r8
    1872:	4306      	orrs	r6, r0
    1874:	3568      	adds	r5, #104	; 0x68
    1876:	e7ef      	b.n	1858 <_fwalk+0x18>

00001878 <_fwalk_reent>:
    1878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    187c:	4680      	mov	r8, r0
    187e:	4689      	mov	r9, r1
    1880:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1884:	2600      	movs	r6, #0
    1886:	b914      	cbnz	r4, 188e <_fwalk_reent+0x16>
    1888:	4630      	mov	r0, r6
    188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    188e:	68a5      	ldr	r5, [r4, #8]
    1890:	6867      	ldr	r7, [r4, #4]
    1892:	3f01      	subs	r7, #1
    1894:	d501      	bpl.n	189a <_fwalk_reent+0x22>
    1896:	6824      	ldr	r4, [r4, #0]
    1898:	e7f5      	b.n	1886 <_fwalk_reent+0xe>
    189a:	89ab      	ldrh	r3, [r5, #12]
    189c:	2b01      	cmp	r3, #1
    189e:	d907      	bls.n	18b0 <_fwalk_reent+0x38>
    18a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    18a4:	3301      	adds	r3, #1
    18a6:	d003      	beq.n	18b0 <_fwalk_reent+0x38>
    18a8:	4629      	mov	r1, r5
    18aa:	4640      	mov	r0, r8
    18ac:	47c8      	blx	r9
    18ae:	4306      	orrs	r6, r0
    18b0:	3568      	adds	r5, #104	; 0x68
    18b2:	e7ee      	b.n	1892 <_fwalk_reent+0x1a>

000018b4 <__libc_init_array>:
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	4e0d      	ldr	r6, [pc, #52]	; (18ec <__libc_init_array+0x38>)
    18b8:	4c0d      	ldr	r4, [pc, #52]	; (18f0 <__libc_init_array+0x3c>)
    18ba:	1ba4      	subs	r4, r4, r6
    18bc:	10a4      	asrs	r4, r4, #2
    18be:	2500      	movs	r5, #0
    18c0:	42a5      	cmp	r5, r4
    18c2:	d109      	bne.n	18d8 <__libc_init_array+0x24>
    18c4:	4e0b      	ldr	r6, [pc, #44]	; (18f4 <__libc_init_array+0x40>)
    18c6:	4c0c      	ldr	r4, [pc, #48]	; (18f8 <__libc_init_array+0x44>)
    18c8:	f001 fde2 	bl	3490 <_init>
    18cc:	1ba4      	subs	r4, r4, r6
    18ce:	10a4      	asrs	r4, r4, #2
    18d0:	2500      	movs	r5, #0
    18d2:	42a5      	cmp	r5, r4
    18d4:	d105      	bne.n	18e2 <__libc_init_array+0x2e>
    18d6:	bd70      	pop	{r4, r5, r6, pc}
    18d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    18dc:	4798      	blx	r3
    18de:	3501      	adds	r5, #1
    18e0:	e7ee      	b.n	18c0 <__libc_init_array+0xc>
    18e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    18e6:	4798      	blx	r3
    18e8:	3501      	adds	r5, #1
    18ea:	e7f2      	b.n	18d2 <__libc_init_array+0x1e>
    18ec:	0000349c 	.word	0x0000349c
    18f0:	0000349c 	.word	0x0000349c
    18f4:	0000349c 	.word	0x0000349c
    18f8:	000034a0 	.word	0x000034a0

000018fc <memset>:
    18fc:	4402      	add	r2, r0
    18fe:	4603      	mov	r3, r0
    1900:	4293      	cmp	r3, r2
    1902:	d100      	bne.n	1906 <memset+0xa>
    1904:	4770      	bx	lr
    1906:	f803 1b01 	strb.w	r1, [r3], #1
    190a:	e7f9      	b.n	1900 <memset+0x4>

0000190c <_free_r>:
    190c:	b538      	push	{r3, r4, r5, lr}
    190e:	4605      	mov	r5, r0
    1910:	2900      	cmp	r1, #0
    1912:	d045      	beq.n	19a0 <_free_r+0x94>
    1914:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1918:	1f0c      	subs	r4, r1, #4
    191a:	2b00      	cmp	r3, #0
    191c:	bfb8      	it	lt
    191e:	18e4      	addlt	r4, r4, r3
    1920:	f000 fb86 	bl	2030 <__malloc_lock>
    1924:	4a1f      	ldr	r2, [pc, #124]	; (19a4 <_free_r+0x98>)
    1926:	6813      	ldr	r3, [r2, #0]
    1928:	4610      	mov	r0, r2
    192a:	b933      	cbnz	r3, 193a <_free_r+0x2e>
    192c:	6063      	str	r3, [r4, #4]
    192e:	6014      	str	r4, [r2, #0]
    1930:	4628      	mov	r0, r5
    1932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1936:	f000 bb7c 	b.w	2032 <__malloc_unlock>
    193a:	42a3      	cmp	r3, r4
    193c:	d90c      	bls.n	1958 <_free_r+0x4c>
    193e:	6821      	ldr	r1, [r4, #0]
    1940:	1862      	adds	r2, r4, r1
    1942:	4293      	cmp	r3, r2
    1944:	bf04      	itt	eq
    1946:	681a      	ldreq	r2, [r3, #0]
    1948:	685b      	ldreq	r3, [r3, #4]
    194a:	6063      	str	r3, [r4, #4]
    194c:	bf04      	itt	eq
    194e:	1852      	addeq	r2, r2, r1
    1950:	6022      	streq	r2, [r4, #0]
    1952:	6004      	str	r4, [r0, #0]
    1954:	e7ec      	b.n	1930 <_free_r+0x24>
    1956:	4613      	mov	r3, r2
    1958:	685a      	ldr	r2, [r3, #4]
    195a:	b10a      	cbz	r2, 1960 <_free_r+0x54>
    195c:	42a2      	cmp	r2, r4
    195e:	d9fa      	bls.n	1956 <_free_r+0x4a>
    1960:	6819      	ldr	r1, [r3, #0]
    1962:	1858      	adds	r0, r3, r1
    1964:	42a0      	cmp	r0, r4
    1966:	d10b      	bne.n	1980 <_free_r+0x74>
    1968:	6820      	ldr	r0, [r4, #0]
    196a:	4401      	add	r1, r0
    196c:	1858      	adds	r0, r3, r1
    196e:	4282      	cmp	r2, r0
    1970:	6019      	str	r1, [r3, #0]
    1972:	d1dd      	bne.n	1930 <_free_r+0x24>
    1974:	6810      	ldr	r0, [r2, #0]
    1976:	6852      	ldr	r2, [r2, #4]
    1978:	605a      	str	r2, [r3, #4]
    197a:	4401      	add	r1, r0
    197c:	6019      	str	r1, [r3, #0]
    197e:	e7d7      	b.n	1930 <_free_r+0x24>
    1980:	d902      	bls.n	1988 <_free_r+0x7c>
    1982:	230c      	movs	r3, #12
    1984:	602b      	str	r3, [r5, #0]
    1986:	e7d3      	b.n	1930 <_free_r+0x24>
    1988:	6820      	ldr	r0, [r4, #0]
    198a:	1821      	adds	r1, r4, r0
    198c:	428a      	cmp	r2, r1
    198e:	bf04      	itt	eq
    1990:	6811      	ldreq	r1, [r2, #0]
    1992:	6852      	ldreq	r2, [r2, #4]
    1994:	6062      	str	r2, [r4, #4]
    1996:	bf04      	itt	eq
    1998:	1809      	addeq	r1, r1, r0
    199a:	6021      	streq	r1, [r4, #0]
    199c:	605c      	str	r4, [r3, #4]
    199e:	e7c7      	b.n	1930 <_free_r+0x24>
    19a0:	bd38      	pop	{r3, r4, r5, pc}
    19a2:	bf00      	nop
    19a4:	2000020c 	.word	0x2000020c

000019a8 <_malloc_r>:
    19a8:	b570      	push	{r4, r5, r6, lr}
    19aa:	1ccd      	adds	r5, r1, #3
    19ac:	f025 0503 	bic.w	r5, r5, #3
    19b0:	3508      	adds	r5, #8
    19b2:	2d0c      	cmp	r5, #12
    19b4:	bf38      	it	cc
    19b6:	250c      	movcc	r5, #12
    19b8:	2d00      	cmp	r5, #0
    19ba:	4606      	mov	r6, r0
    19bc:	db01      	blt.n	19c2 <_malloc_r+0x1a>
    19be:	42a9      	cmp	r1, r5
    19c0:	d903      	bls.n	19ca <_malloc_r+0x22>
    19c2:	230c      	movs	r3, #12
    19c4:	6033      	str	r3, [r6, #0]
    19c6:	2000      	movs	r0, #0
    19c8:	bd70      	pop	{r4, r5, r6, pc}
    19ca:	f000 fb31 	bl	2030 <__malloc_lock>
    19ce:	4a23      	ldr	r2, [pc, #140]	; (1a5c <_malloc_r+0xb4>)
    19d0:	6814      	ldr	r4, [r2, #0]
    19d2:	4621      	mov	r1, r4
    19d4:	b991      	cbnz	r1, 19fc <_malloc_r+0x54>
    19d6:	4c22      	ldr	r4, [pc, #136]	; (1a60 <_malloc_r+0xb8>)
    19d8:	6823      	ldr	r3, [r4, #0]
    19da:	b91b      	cbnz	r3, 19e4 <_malloc_r+0x3c>
    19dc:	4630      	mov	r0, r6
    19de:	f000 f8a5 	bl	1b2c <_sbrk_r>
    19e2:	6020      	str	r0, [r4, #0]
    19e4:	4629      	mov	r1, r5
    19e6:	4630      	mov	r0, r6
    19e8:	f000 f8a0 	bl	1b2c <_sbrk_r>
    19ec:	1c43      	adds	r3, r0, #1
    19ee:	d126      	bne.n	1a3e <_malloc_r+0x96>
    19f0:	230c      	movs	r3, #12
    19f2:	6033      	str	r3, [r6, #0]
    19f4:	4630      	mov	r0, r6
    19f6:	f000 fb1c 	bl	2032 <__malloc_unlock>
    19fa:	e7e4      	b.n	19c6 <_malloc_r+0x1e>
    19fc:	680b      	ldr	r3, [r1, #0]
    19fe:	1b5b      	subs	r3, r3, r5
    1a00:	d41a      	bmi.n	1a38 <_malloc_r+0x90>
    1a02:	2b0b      	cmp	r3, #11
    1a04:	d90f      	bls.n	1a26 <_malloc_r+0x7e>
    1a06:	600b      	str	r3, [r1, #0]
    1a08:	50cd      	str	r5, [r1, r3]
    1a0a:	18cc      	adds	r4, r1, r3
    1a0c:	4630      	mov	r0, r6
    1a0e:	f000 fb10 	bl	2032 <__malloc_unlock>
    1a12:	f104 000b 	add.w	r0, r4, #11
    1a16:	1d23      	adds	r3, r4, #4
    1a18:	f020 0007 	bic.w	r0, r0, #7
    1a1c:	1ac3      	subs	r3, r0, r3
    1a1e:	d01b      	beq.n	1a58 <_malloc_r+0xb0>
    1a20:	425a      	negs	r2, r3
    1a22:	50e2      	str	r2, [r4, r3]
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	428c      	cmp	r4, r1
    1a28:	bf0d      	iteet	eq
    1a2a:	6863      	ldreq	r3, [r4, #4]
    1a2c:	684b      	ldrne	r3, [r1, #4]
    1a2e:	6063      	strne	r3, [r4, #4]
    1a30:	6013      	streq	r3, [r2, #0]
    1a32:	bf18      	it	ne
    1a34:	460c      	movne	r4, r1
    1a36:	e7e9      	b.n	1a0c <_malloc_r+0x64>
    1a38:	460c      	mov	r4, r1
    1a3a:	6849      	ldr	r1, [r1, #4]
    1a3c:	e7ca      	b.n	19d4 <_malloc_r+0x2c>
    1a3e:	1cc4      	adds	r4, r0, #3
    1a40:	f024 0403 	bic.w	r4, r4, #3
    1a44:	42a0      	cmp	r0, r4
    1a46:	d005      	beq.n	1a54 <_malloc_r+0xac>
    1a48:	1a21      	subs	r1, r4, r0
    1a4a:	4630      	mov	r0, r6
    1a4c:	f000 f86e 	bl	1b2c <_sbrk_r>
    1a50:	3001      	adds	r0, #1
    1a52:	d0cd      	beq.n	19f0 <_malloc_r+0x48>
    1a54:	6025      	str	r5, [r4, #0]
    1a56:	e7d9      	b.n	1a0c <_malloc_r+0x64>
    1a58:	bd70      	pop	{r4, r5, r6, pc}
    1a5a:	bf00      	nop
    1a5c:	2000020c 	.word	0x2000020c
    1a60:	20000210 	.word	0x20000210

00001a64 <_puts_r>:
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	460e      	mov	r6, r1
    1a68:	4605      	mov	r5, r0
    1a6a:	b118      	cbz	r0, 1a74 <_puts_r+0x10>
    1a6c:	6983      	ldr	r3, [r0, #24]
    1a6e:	b90b      	cbnz	r3, 1a74 <_puts_r+0x10>
    1a70:	f7ff fe7a 	bl	1768 <__sinit>
    1a74:	69ab      	ldr	r3, [r5, #24]
    1a76:	68ac      	ldr	r4, [r5, #8]
    1a78:	b913      	cbnz	r3, 1a80 <_puts_r+0x1c>
    1a7a:	4628      	mov	r0, r5
    1a7c:	f7ff fe74 	bl	1768 <__sinit>
    1a80:	4b23      	ldr	r3, [pc, #140]	; (1b10 <_puts_r+0xac>)
    1a82:	429c      	cmp	r4, r3
    1a84:	d117      	bne.n	1ab6 <_puts_r+0x52>
    1a86:	686c      	ldr	r4, [r5, #4]
    1a88:	89a3      	ldrh	r3, [r4, #12]
    1a8a:	071b      	lsls	r3, r3, #28
    1a8c:	d51d      	bpl.n	1aca <_puts_r+0x66>
    1a8e:	6923      	ldr	r3, [r4, #16]
    1a90:	b1db      	cbz	r3, 1aca <_puts_r+0x66>
    1a92:	3e01      	subs	r6, #1
    1a94:	68a3      	ldr	r3, [r4, #8]
    1a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1a9a:	3b01      	subs	r3, #1
    1a9c:	60a3      	str	r3, [r4, #8]
    1a9e:	b9e9      	cbnz	r1, 1adc <_puts_r+0x78>
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	da2e      	bge.n	1b02 <_puts_r+0x9e>
    1aa4:	4622      	mov	r2, r4
    1aa6:	210a      	movs	r1, #10
    1aa8:	4628      	mov	r0, r5
    1aaa:	f000 f961 	bl	1d70 <__swbuf_r>
    1aae:	3001      	adds	r0, #1
    1ab0:	d011      	beq.n	1ad6 <_puts_r+0x72>
    1ab2:	200a      	movs	r0, #10
    1ab4:	bd70      	pop	{r4, r5, r6, pc}
    1ab6:	4b17      	ldr	r3, [pc, #92]	; (1b14 <_puts_r+0xb0>)
    1ab8:	429c      	cmp	r4, r3
    1aba:	d101      	bne.n	1ac0 <_puts_r+0x5c>
    1abc:	68ac      	ldr	r4, [r5, #8]
    1abe:	e7e3      	b.n	1a88 <_puts_r+0x24>
    1ac0:	4b15      	ldr	r3, [pc, #84]	; (1b18 <_puts_r+0xb4>)
    1ac2:	429c      	cmp	r4, r3
    1ac4:	bf08      	it	eq
    1ac6:	68ec      	ldreq	r4, [r5, #12]
    1ac8:	e7de      	b.n	1a88 <_puts_r+0x24>
    1aca:	4621      	mov	r1, r4
    1acc:	4628      	mov	r0, r5
    1ace:	f000 f9b3 	bl	1e38 <__swsetup_r>
    1ad2:	2800      	cmp	r0, #0
    1ad4:	d0dd      	beq.n	1a92 <_puts_r+0x2e>
    1ad6:	f04f 30ff 	mov.w	r0, #4294967295
    1ada:	bd70      	pop	{r4, r5, r6, pc}
    1adc:	2b00      	cmp	r3, #0
    1ade:	da04      	bge.n	1aea <_puts_r+0x86>
    1ae0:	69a2      	ldr	r2, [r4, #24]
    1ae2:	4293      	cmp	r3, r2
    1ae4:	db06      	blt.n	1af4 <_puts_r+0x90>
    1ae6:	290a      	cmp	r1, #10
    1ae8:	d004      	beq.n	1af4 <_puts_r+0x90>
    1aea:	6823      	ldr	r3, [r4, #0]
    1aec:	1c5a      	adds	r2, r3, #1
    1aee:	6022      	str	r2, [r4, #0]
    1af0:	7019      	strb	r1, [r3, #0]
    1af2:	e7cf      	b.n	1a94 <_puts_r+0x30>
    1af4:	4622      	mov	r2, r4
    1af6:	4628      	mov	r0, r5
    1af8:	f000 f93a 	bl	1d70 <__swbuf_r>
    1afc:	3001      	adds	r0, #1
    1afe:	d1c9      	bne.n	1a94 <_puts_r+0x30>
    1b00:	e7e9      	b.n	1ad6 <_puts_r+0x72>
    1b02:	6823      	ldr	r3, [r4, #0]
    1b04:	200a      	movs	r0, #10
    1b06:	1c5a      	adds	r2, r3, #1
    1b08:	6022      	str	r2, [r4, #0]
    1b0a:	7018      	strb	r0, [r3, #0]
    1b0c:	bd70      	pop	{r4, r5, r6, pc}
    1b0e:	bf00      	nop
    1b10:	00003314 	.word	0x00003314
    1b14:	00003334 	.word	0x00003334
    1b18:	000032f4 	.word	0x000032f4

00001b1c <puts>:
    1b1c:	4b02      	ldr	r3, [pc, #8]	; (1b28 <puts+0xc>)
    1b1e:	4601      	mov	r1, r0
    1b20:	6818      	ldr	r0, [r3, #0]
    1b22:	f7ff bf9f 	b.w	1a64 <_puts_r>
    1b26:	bf00      	nop
    1b28:	20000008 	.word	0x20000008

00001b2c <_sbrk_r>:
    1b2c:	b538      	push	{r3, r4, r5, lr}
    1b2e:	4c06      	ldr	r4, [pc, #24]	; (1b48 <_sbrk_r+0x1c>)
    1b30:	2300      	movs	r3, #0
    1b32:	4605      	mov	r5, r0
    1b34:	4608      	mov	r0, r1
    1b36:	6023      	str	r3, [r4, #0]
    1b38:	f7fe fe68 	bl	80c <_sbrk>
    1b3c:	1c43      	adds	r3, r0, #1
    1b3e:	d102      	bne.n	1b46 <_sbrk_r+0x1a>
    1b40:	6823      	ldr	r3, [r4, #0]
    1b42:	b103      	cbz	r3, 1b46 <_sbrk_r+0x1a>
    1b44:	602b      	str	r3, [r5, #0]
    1b46:	bd38      	pop	{r3, r4, r5, pc}
    1b48:	20000234 	.word	0x20000234

00001b4c <iscanf>:
    1b4c:	b40f      	push	{r0, r1, r2, r3}
    1b4e:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <iscanf+0x2c>)
    1b50:	b513      	push	{r0, r1, r4, lr}
    1b52:	681c      	ldr	r4, [r3, #0]
    1b54:	b124      	cbz	r4, 1b60 <iscanf+0x14>
    1b56:	69a3      	ldr	r3, [r4, #24]
    1b58:	b913      	cbnz	r3, 1b60 <iscanf+0x14>
    1b5a:	4620      	mov	r0, r4
    1b5c:	f7ff fe04 	bl	1768 <__sinit>
    1b60:	ab05      	add	r3, sp, #20
    1b62:	9a04      	ldr	r2, [sp, #16]
    1b64:	6861      	ldr	r1, [r4, #4]
    1b66:	9301      	str	r3, [sp, #4]
    1b68:	4620      	mov	r0, r4
    1b6a:	f000 fbb7 	bl	22dc <_vfiscanf_r>
    1b6e:	b002      	add	sp, #8
    1b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b74:	b004      	add	sp, #16
    1b76:	4770      	bx	lr
    1b78:	20000008 	.word	0x20000008

00001b7c <setbuf>:
    1b7c:	2900      	cmp	r1, #0
    1b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1b82:	bf0c      	ite	eq
    1b84:	2202      	moveq	r2, #2
    1b86:	2200      	movne	r2, #0
    1b88:	f000 b800 	b.w	1b8c <setvbuf>

00001b8c <setvbuf>:
    1b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1b90:	461d      	mov	r5, r3
    1b92:	4b51      	ldr	r3, [pc, #324]	; (1cd8 <setvbuf+0x14c>)
    1b94:	681e      	ldr	r6, [r3, #0]
    1b96:	4604      	mov	r4, r0
    1b98:	460f      	mov	r7, r1
    1b9a:	4690      	mov	r8, r2
    1b9c:	b126      	cbz	r6, 1ba8 <setvbuf+0x1c>
    1b9e:	69b3      	ldr	r3, [r6, #24]
    1ba0:	b913      	cbnz	r3, 1ba8 <setvbuf+0x1c>
    1ba2:	4630      	mov	r0, r6
    1ba4:	f7ff fde0 	bl	1768 <__sinit>
    1ba8:	4b4c      	ldr	r3, [pc, #304]	; (1cdc <setvbuf+0x150>)
    1baa:	429c      	cmp	r4, r3
    1bac:	d152      	bne.n	1c54 <setvbuf+0xc8>
    1bae:	6874      	ldr	r4, [r6, #4]
    1bb0:	f1b8 0f02 	cmp.w	r8, #2
    1bb4:	d006      	beq.n	1bc4 <setvbuf+0x38>
    1bb6:	f1b8 0f01 	cmp.w	r8, #1
    1bba:	f200 8089 	bhi.w	1cd0 <setvbuf+0x144>
    1bbe:	2d00      	cmp	r5, #0
    1bc0:	f2c0 8086 	blt.w	1cd0 <setvbuf+0x144>
    1bc4:	4621      	mov	r1, r4
    1bc6:	4630      	mov	r0, r6
    1bc8:	f7ff fd52 	bl	1670 <_fflush_r>
    1bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1bce:	b141      	cbz	r1, 1be2 <setvbuf+0x56>
    1bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1bd4:	4299      	cmp	r1, r3
    1bd6:	d002      	beq.n	1bde <setvbuf+0x52>
    1bd8:	4630      	mov	r0, r6
    1bda:	f7ff fe97 	bl	190c <_free_r>
    1bde:	2300      	movs	r3, #0
    1be0:	6363      	str	r3, [r4, #52]	; 0x34
    1be2:	2300      	movs	r3, #0
    1be4:	61a3      	str	r3, [r4, #24]
    1be6:	6063      	str	r3, [r4, #4]
    1be8:	89a3      	ldrh	r3, [r4, #12]
    1bea:	061b      	lsls	r3, r3, #24
    1bec:	d503      	bpl.n	1bf6 <setvbuf+0x6a>
    1bee:	6921      	ldr	r1, [r4, #16]
    1bf0:	4630      	mov	r0, r6
    1bf2:	f7ff fe8b 	bl	190c <_free_r>
    1bf6:	89a3      	ldrh	r3, [r4, #12]
    1bf8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1bfc:	f023 0303 	bic.w	r3, r3, #3
    1c00:	f1b8 0f02 	cmp.w	r8, #2
    1c04:	81a3      	strh	r3, [r4, #12]
    1c06:	d05d      	beq.n	1cc4 <setvbuf+0x138>
    1c08:	ab01      	add	r3, sp, #4
    1c0a:	466a      	mov	r2, sp
    1c0c:	4621      	mov	r1, r4
    1c0e:	4630      	mov	r0, r6
    1c10:	f000 f9a2 	bl	1f58 <__swhatbuf_r>
    1c14:	89a3      	ldrh	r3, [r4, #12]
    1c16:	4318      	orrs	r0, r3
    1c18:	81a0      	strh	r0, [r4, #12]
    1c1a:	bb2d      	cbnz	r5, 1c68 <setvbuf+0xdc>
    1c1c:	9d00      	ldr	r5, [sp, #0]
    1c1e:	4628      	mov	r0, r5
    1c20:	f000 f9fe 	bl	2020 <malloc>
    1c24:	4607      	mov	r7, r0
    1c26:	2800      	cmp	r0, #0
    1c28:	d14e      	bne.n	1cc8 <setvbuf+0x13c>
    1c2a:	f8dd 9000 	ldr.w	r9, [sp]
    1c2e:	45a9      	cmp	r9, r5
    1c30:	d13c      	bne.n	1cac <setvbuf+0x120>
    1c32:	f04f 30ff 	mov.w	r0, #4294967295
    1c36:	89a3      	ldrh	r3, [r4, #12]
    1c38:	f043 0302 	orr.w	r3, r3, #2
    1c3c:	81a3      	strh	r3, [r4, #12]
    1c3e:	2300      	movs	r3, #0
    1c40:	60a3      	str	r3, [r4, #8]
    1c42:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1c46:	6023      	str	r3, [r4, #0]
    1c48:	6123      	str	r3, [r4, #16]
    1c4a:	2301      	movs	r3, #1
    1c4c:	6163      	str	r3, [r4, #20]
    1c4e:	b003      	add	sp, #12
    1c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c54:	4b22      	ldr	r3, [pc, #136]	; (1ce0 <setvbuf+0x154>)
    1c56:	429c      	cmp	r4, r3
    1c58:	d101      	bne.n	1c5e <setvbuf+0xd2>
    1c5a:	68b4      	ldr	r4, [r6, #8]
    1c5c:	e7a8      	b.n	1bb0 <setvbuf+0x24>
    1c5e:	4b21      	ldr	r3, [pc, #132]	; (1ce4 <setvbuf+0x158>)
    1c60:	429c      	cmp	r4, r3
    1c62:	bf08      	it	eq
    1c64:	68f4      	ldreq	r4, [r6, #12]
    1c66:	e7a3      	b.n	1bb0 <setvbuf+0x24>
    1c68:	2f00      	cmp	r7, #0
    1c6a:	d0d8      	beq.n	1c1e <setvbuf+0x92>
    1c6c:	69b3      	ldr	r3, [r6, #24]
    1c6e:	b913      	cbnz	r3, 1c76 <setvbuf+0xea>
    1c70:	4630      	mov	r0, r6
    1c72:	f7ff fd79 	bl	1768 <__sinit>
    1c76:	f1b8 0f01 	cmp.w	r8, #1
    1c7a:	bf08      	it	eq
    1c7c:	89a3      	ldrheq	r3, [r4, #12]
    1c7e:	6027      	str	r7, [r4, #0]
    1c80:	bf04      	itt	eq
    1c82:	f043 0301 	orreq.w	r3, r3, #1
    1c86:	81a3      	strheq	r3, [r4, #12]
    1c88:	89a3      	ldrh	r3, [r4, #12]
    1c8a:	6127      	str	r7, [r4, #16]
    1c8c:	f013 0008 	ands.w	r0, r3, #8
    1c90:	6165      	str	r5, [r4, #20]
    1c92:	d01b      	beq.n	1ccc <setvbuf+0x140>
    1c94:	f013 0001 	ands.w	r0, r3, #1
    1c98:	bf18      	it	ne
    1c9a:	426d      	negne	r5, r5
    1c9c:	f04f 0300 	mov.w	r3, #0
    1ca0:	bf1d      	ittte	ne
    1ca2:	60a3      	strne	r3, [r4, #8]
    1ca4:	61a5      	strne	r5, [r4, #24]
    1ca6:	4618      	movne	r0, r3
    1ca8:	60a5      	streq	r5, [r4, #8]
    1caa:	e7d0      	b.n	1c4e <setvbuf+0xc2>
    1cac:	4648      	mov	r0, r9
    1cae:	f000 f9b7 	bl	2020 <malloc>
    1cb2:	4607      	mov	r7, r0
    1cb4:	2800      	cmp	r0, #0
    1cb6:	d0bc      	beq.n	1c32 <setvbuf+0xa6>
    1cb8:	89a3      	ldrh	r3, [r4, #12]
    1cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1cbe:	81a3      	strh	r3, [r4, #12]
    1cc0:	464d      	mov	r5, r9
    1cc2:	e7d3      	b.n	1c6c <setvbuf+0xe0>
    1cc4:	2000      	movs	r0, #0
    1cc6:	e7b6      	b.n	1c36 <setvbuf+0xaa>
    1cc8:	46a9      	mov	r9, r5
    1cca:	e7f5      	b.n	1cb8 <setvbuf+0x12c>
    1ccc:	60a0      	str	r0, [r4, #8]
    1cce:	e7be      	b.n	1c4e <setvbuf+0xc2>
    1cd0:	f04f 30ff 	mov.w	r0, #4294967295
    1cd4:	e7bb      	b.n	1c4e <setvbuf+0xc2>
    1cd6:	bf00      	nop
    1cd8:	20000008 	.word	0x20000008
    1cdc:	00003314 	.word	0x00003314
    1ce0:	00003334 	.word	0x00003334
    1ce4:	000032f4 	.word	0x000032f4

00001ce8 <__sread>:
    1ce8:	b510      	push	{r4, lr}
    1cea:	460c      	mov	r4, r1
    1cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1cf0:	f000 fc74 	bl	25dc <_read_r>
    1cf4:	2800      	cmp	r0, #0
    1cf6:	bfab      	itete	ge
    1cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    1cfa:	89a3      	ldrhlt	r3, [r4, #12]
    1cfc:	181b      	addge	r3, r3, r0
    1cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    1d02:	bfac      	ite	ge
    1d04:	6563      	strge	r3, [r4, #84]	; 0x54
    1d06:	81a3      	strhlt	r3, [r4, #12]
    1d08:	bd10      	pop	{r4, pc}

00001d0a <__swrite>:
    1d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d0e:	461f      	mov	r7, r3
    1d10:	898b      	ldrh	r3, [r1, #12]
    1d12:	05db      	lsls	r3, r3, #23
    1d14:	4605      	mov	r5, r0
    1d16:	460c      	mov	r4, r1
    1d18:	4616      	mov	r6, r2
    1d1a:	d505      	bpl.n	1d28 <__swrite+0x1e>
    1d1c:	2302      	movs	r3, #2
    1d1e:	2200      	movs	r2, #0
    1d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d24:	f000 f906 	bl	1f34 <_lseek_r>
    1d28:	89a3      	ldrh	r3, [r4, #12]
    1d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1d32:	81a3      	strh	r3, [r4, #12]
    1d34:	4632      	mov	r2, r6
    1d36:	463b      	mov	r3, r7
    1d38:	4628      	mov	r0, r5
    1d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1d3e:	f000 b869 	b.w	1e14 <_write_r>

00001d42 <__sseek>:
    1d42:	b510      	push	{r4, lr}
    1d44:	460c      	mov	r4, r1
    1d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d4a:	f000 f8f3 	bl	1f34 <_lseek_r>
    1d4e:	1c43      	adds	r3, r0, #1
    1d50:	89a3      	ldrh	r3, [r4, #12]
    1d52:	bf15      	itete	ne
    1d54:	6560      	strne	r0, [r4, #84]	; 0x54
    1d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    1d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    1d5e:	81a3      	strheq	r3, [r4, #12]
    1d60:	bf18      	it	ne
    1d62:	81a3      	strhne	r3, [r4, #12]
    1d64:	bd10      	pop	{r4, pc}

00001d66 <__sclose>:
    1d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d6a:	f000 b8d3 	b.w	1f14 <_close_r>
	...

00001d70 <__swbuf_r>:
    1d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d72:	460e      	mov	r6, r1
    1d74:	4614      	mov	r4, r2
    1d76:	4605      	mov	r5, r0
    1d78:	b118      	cbz	r0, 1d82 <__swbuf_r+0x12>
    1d7a:	6983      	ldr	r3, [r0, #24]
    1d7c:	b90b      	cbnz	r3, 1d82 <__swbuf_r+0x12>
    1d7e:	f7ff fcf3 	bl	1768 <__sinit>
    1d82:	4b21      	ldr	r3, [pc, #132]	; (1e08 <__swbuf_r+0x98>)
    1d84:	429c      	cmp	r4, r3
    1d86:	d12a      	bne.n	1dde <__swbuf_r+0x6e>
    1d88:	686c      	ldr	r4, [r5, #4]
    1d8a:	69a3      	ldr	r3, [r4, #24]
    1d8c:	60a3      	str	r3, [r4, #8]
    1d8e:	89a3      	ldrh	r3, [r4, #12]
    1d90:	071a      	lsls	r2, r3, #28
    1d92:	d52e      	bpl.n	1df2 <__swbuf_r+0x82>
    1d94:	6923      	ldr	r3, [r4, #16]
    1d96:	b363      	cbz	r3, 1df2 <__swbuf_r+0x82>
    1d98:	6923      	ldr	r3, [r4, #16]
    1d9a:	6820      	ldr	r0, [r4, #0]
    1d9c:	1ac0      	subs	r0, r0, r3
    1d9e:	6963      	ldr	r3, [r4, #20]
    1da0:	b2f6      	uxtb	r6, r6
    1da2:	4298      	cmp	r0, r3
    1da4:	4637      	mov	r7, r6
    1da6:	db04      	blt.n	1db2 <__swbuf_r+0x42>
    1da8:	4621      	mov	r1, r4
    1daa:	4628      	mov	r0, r5
    1dac:	f7ff fc60 	bl	1670 <_fflush_r>
    1db0:	bb28      	cbnz	r0, 1dfe <__swbuf_r+0x8e>
    1db2:	68a3      	ldr	r3, [r4, #8]
    1db4:	3b01      	subs	r3, #1
    1db6:	60a3      	str	r3, [r4, #8]
    1db8:	6823      	ldr	r3, [r4, #0]
    1dba:	1c5a      	adds	r2, r3, #1
    1dbc:	6022      	str	r2, [r4, #0]
    1dbe:	701e      	strb	r6, [r3, #0]
    1dc0:	6963      	ldr	r3, [r4, #20]
    1dc2:	3001      	adds	r0, #1
    1dc4:	4298      	cmp	r0, r3
    1dc6:	d004      	beq.n	1dd2 <__swbuf_r+0x62>
    1dc8:	89a3      	ldrh	r3, [r4, #12]
    1dca:	07db      	lsls	r3, r3, #31
    1dcc:	d519      	bpl.n	1e02 <__swbuf_r+0x92>
    1dce:	2e0a      	cmp	r6, #10
    1dd0:	d117      	bne.n	1e02 <__swbuf_r+0x92>
    1dd2:	4621      	mov	r1, r4
    1dd4:	4628      	mov	r0, r5
    1dd6:	f7ff fc4b 	bl	1670 <_fflush_r>
    1dda:	b190      	cbz	r0, 1e02 <__swbuf_r+0x92>
    1ddc:	e00f      	b.n	1dfe <__swbuf_r+0x8e>
    1dde:	4b0b      	ldr	r3, [pc, #44]	; (1e0c <__swbuf_r+0x9c>)
    1de0:	429c      	cmp	r4, r3
    1de2:	d101      	bne.n	1de8 <__swbuf_r+0x78>
    1de4:	68ac      	ldr	r4, [r5, #8]
    1de6:	e7d0      	b.n	1d8a <__swbuf_r+0x1a>
    1de8:	4b09      	ldr	r3, [pc, #36]	; (1e10 <__swbuf_r+0xa0>)
    1dea:	429c      	cmp	r4, r3
    1dec:	bf08      	it	eq
    1dee:	68ec      	ldreq	r4, [r5, #12]
    1df0:	e7cb      	b.n	1d8a <__swbuf_r+0x1a>
    1df2:	4621      	mov	r1, r4
    1df4:	4628      	mov	r0, r5
    1df6:	f000 f81f 	bl	1e38 <__swsetup_r>
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d0cc      	beq.n	1d98 <__swbuf_r+0x28>
    1dfe:	f04f 37ff 	mov.w	r7, #4294967295
    1e02:	4638      	mov	r0, r7
    1e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e06:	bf00      	nop
    1e08:	00003314 	.word	0x00003314
    1e0c:	00003334 	.word	0x00003334
    1e10:	000032f4 	.word	0x000032f4

00001e14 <_write_r>:
    1e14:	b538      	push	{r3, r4, r5, lr}
    1e16:	4c07      	ldr	r4, [pc, #28]	; (1e34 <_write_r+0x20>)
    1e18:	4605      	mov	r5, r0
    1e1a:	4608      	mov	r0, r1
    1e1c:	4611      	mov	r1, r2
    1e1e:	2200      	movs	r2, #0
    1e20:	6022      	str	r2, [r4, #0]
    1e22:	461a      	mov	r2, r3
    1e24:	f7ff fb40 	bl	14a8 <_write>
    1e28:	1c43      	adds	r3, r0, #1
    1e2a:	d102      	bne.n	1e32 <_write_r+0x1e>
    1e2c:	6823      	ldr	r3, [r4, #0]
    1e2e:	b103      	cbz	r3, 1e32 <_write_r+0x1e>
    1e30:	602b      	str	r3, [r5, #0]
    1e32:	bd38      	pop	{r3, r4, r5, pc}
    1e34:	20000234 	.word	0x20000234

00001e38 <__swsetup_r>:
    1e38:	4b32      	ldr	r3, [pc, #200]	; (1f04 <__swsetup_r+0xcc>)
    1e3a:	b570      	push	{r4, r5, r6, lr}
    1e3c:	681d      	ldr	r5, [r3, #0]
    1e3e:	4606      	mov	r6, r0
    1e40:	460c      	mov	r4, r1
    1e42:	b125      	cbz	r5, 1e4e <__swsetup_r+0x16>
    1e44:	69ab      	ldr	r3, [r5, #24]
    1e46:	b913      	cbnz	r3, 1e4e <__swsetup_r+0x16>
    1e48:	4628      	mov	r0, r5
    1e4a:	f7ff fc8d 	bl	1768 <__sinit>
    1e4e:	4b2e      	ldr	r3, [pc, #184]	; (1f08 <__swsetup_r+0xd0>)
    1e50:	429c      	cmp	r4, r3
    1e52:	d10f      	bne.n	1e74 <__swsetup_r+0x3c>
    1e54:	686c      	ldr	r4, [r5, #4]
    1e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1e5a:	b29a      	uxth	r2, r3
    1e5c:	0715      	lsls	r5, r2, #28
    1e5e:	d42c      	bmi.n	1eba <__swsetup_r+0x82>
    1e60:	06d0      	lsls	r0, r2, #27
    1e62:	d411      	bmi.n	1e88 <__swsetup_r+0x50>
    1e64:	2209      	movs	r2, #9
    1e66:	6032      	str	r2, [r6, #0]
    1e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e6c:	81a3      	strh	r3, [r4, #12]
    1e6e:	f04f 30ff 	mov.w	r0, #4294967295
    1e72:	bd70      	pop	{r4, r5, r6, pc}
    1e74:	4b25      	ldr	r3, [pc, #148]	; (1f0c <__swsetup_r+0xd4>)
    1e76:	429c      	cmp	r4, r3
    1e78:	d101      	bne.n	1e7e <__swsetup_r+0x46>
    1e7a:	68ac      	ldr	r4, [r5, #8]
    1e7c:	e7eb      	b.n	1e56 <__swsetup_r+0x1e>
    1e7e:	4b24      	ldr	r3, [pc, #144]	; (1f10 <__swsetup_r+0xd8>)
    1e80:	429c      	cmp	r4, r3
    1e82:	bf08      	it	eq
    1e84:	68ec      	ldreq	r4, [r5, #12]
    1e86:	e7e6      	b.n	1e56 <__swsetup_r+0x1e>
    1e88:	0751      	lsls	r1, r2, #29
    1e8a:	d512      	bpl.n	1eb2 <__swsetup_r+0x7a>
    1e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e8e:	b141      	cbz	r1, 1ea2 <__swsetup_r+0x6a>
    1e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1e94:	4299      	cmp	r1, r3
    1e96:	d002      	beq.n	1e9e <__swsetup_r+0x66>
    1e98:	4630      	mov	r0, r6
    1e9a:	f7ff fd37 	bl	190c <_free_r>
    1e9e:	2300      	movs	r3, #0
    1ea0:	6363      	str	r3, [r4, #52]	; 0x34
    1ea2:	89a3      	ldrh	r3, [r4, #12]
    1ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1ea8:	81a3      	strh	r3, [r4, #12]
    1eaa:	2300      	movs	r3, #0
    1eac:	6063      	str	r3, [r4, #4]
    1eae:	6923      	ldr	r3, [r4, #16]
    1eb0:	6023      	str	r3, [r4, #0]
    1eb2:	89a3      	ldrh	r3, [r4, #12]
    1eb4:	f043 0308 	orr.w	r3, r3, #8
    1eb8:	81a3      	strh	r3, [r4, #12]
    1eba:	6923      	ldr	r3, [r4, #16]
    1ebc:	b94b      	cbnz	r3, 1ed2 <__swsetup_r+0x9a>
    1ebe:	89a3      	ldrh	r3, [r4, #12]
    1ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1ec8:	d003      	beq.n	1ed2 <__swsetup_r+0x9a>
    1eca:	4621      	mov	r1, r4
    1ecc:	4630      	mov	r0, r6
    1ece:	f000 f867 	bl	1fa0 <__smakebuf_r>
    1ed2:	89a2      	ldrh	r2, [r4, #12]
    1ed4:	f012 0301 	ands.w	r3, r2, #1
    1ed8:	d00c      	beq.n	1ef4 <__swsetup_r+0xbc>
    1eda:	2300      	movs	r3, #0
    1edc:	60a3      	str	r3, [r4, #8]
    1ede:	6963      	ldr	r3, [r4, #20]
    1ee0:	425b      	negs	r3, r3
    1ee2:	61a3      	str	r3, [r4, #24]
    1ee4:	6923      	ldr	r3, [r4, #16]
    1ee6:	b953      	cbnz	r3, 1efe <__swsetup_r+0xc6>
    1ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1eec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1ef0:	d1ba      	bne.n	1e68 <__swsetup_r+0x30>
    1ef2:	bd70      	pop	{r4, r5, r6, pc}
    1ef4:	0792      	lsls	r2, r2, #30
    1ef6:	bf58      	it	pl
    1ef8:	6963      	ldrpl	r3, [r4, #20]
    1efa:	60a3      	str	r3, [r4, #8]
    1efc:	e7f2      	b.n	1ee4 <__swsetup_r+0xac>
    1efe:	2000      	movs	r0, #0
    1f00:	e7f7      	b.n	1ef2 <__swsetup_r+0xba>
    1f02:	bf00      	nop
    1f04:	20000008 	.word	0x20000008
    1f08:	00003314 	.word	0x00003314
    1f0c:	00003334 	.word	0x00003334
    1f10:	000032f4 	.word	0x000032f4

00001f14 <_close_r>:
    1f14:	b538      	push	{r3, r4, r5, lr}
    1f16:	4c06      	ldr	r4, [pc, #24]	; (1f30 <_close_r+0x1c>)
    1f18:	2300      	movs	r3, #0
    1f1a:	4605      	mov	r5, r0
    1f1c:	4608      	mov	r0, r1
    1f1e:	6023      	str	r3, [r4, #0]
    1f20:	f7fe fc86 	bl	830 <_close>
    1f24:	1c43      	adds	r3, r0, #1
    1f26:	d102      	bne.n	1f2e <_close_r+0x1a>
    1f28:	6823      	ldr	r3, [r4, #0]
    1f2a:	b103      	cbz	r3, 1f2e <_close_r+0x1a>
    1f2c:	602b      	str	r3, [r5, #0]
    1f2e:	bd38      	pop	{r3, r4, r5, pc}
    1f30:	20000234 	.word	0x20000234

00001f34 <_lseek_r>:
    1f34:	b538      	push	{r3, r4, r5, lr}
    1f36:	4c07      	ldr	r4, [pc, #28]	; (1f54 <_lseek_r+0x20>)
    1f38:	4605      	mov	r5, r0
    1f3a:	4608      	mov	r0, r1
    1f3c:	4611      	mov	r1, r2
    1f3e:	2200      	movs	r2, #0
    1f40:	6022      	str	r2, [r4, #0]
    1f42:	461a      	mov	r2, r3
    1f44:	f7fe fc7e 	bl	844 <_lseek>
    1f48:	1c43      	adds	r3, r0, #1
    1f4a:	d102      	bne.n	1f52 <_lseek_r+0x1e>
    1f4c:	6823      	ldr	r3, [r4, #0]
    1f4e:	b103      	cbz	r3, 1f52 <_lseek_r+0x1e>
    1f50:	602b      	str	r3, [r5, #0]
    1f52:	bd38      	pop	{r3, r4, r5, pc}
    1f54:	20000234 	.word	0x20000234

00001f58 <__swhatbuf_r>:
    1f58:	b570      	push	{r4, r5, r6, lr}
    1f5a:	460e      	mov	r6, r1
    1f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1f60:	2900      	cmp	r1, #0
    1f62:	b090      	sub	sp, #64	; 0x40
    1f64:	4614      	mov	r4, r2
    1f66:	461d      	mov	r5, r3
    1f68:	da07      	bge.n	1f7a <__swhatbuf_r+0x22>
    1f6a:	2300      	movs	r3, #0
    1f6c:	602b      	str	r3, [r5, #0]
    1f6e:	89b3      	ldrh	r3, [r6, #12]
    1f70:	061a      	lsls	r2, r3, #24
    1f72:	d410      	bmi.n	1f96 <__swhatbuf_r+0x3e>
    1f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f78:	e00e      	b.n	1f98 <__swhatbuf_r+0x40>
    1f7a:	aa01      	add	r2, sp, #4
    1f7c:	f000 fdd4 	bl	2b28 <_fstat_r>
    1f80:	2800      	cmp	r0, #0
    1f82:	dbf2      	blt.n	1f6a <__swhatbuf_r+0x12>
    1f84:	9a02      	ldr	r2, [sp, #8]
    1f86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1f8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1f8e:	425a      	negs	r2, r3
    1f90:	415a      	adcs	r2, r3
    1f92:	602a      	str	r2, [r5, #0]
    1f94:	e7ee      	b.n	1f74 <__swhatbuf_r+0x1c>
    1f96:	2340      	movs	r3, #64	; 0x40
    1f98:	2000      	movs	r0, #0
    1f9a:	6023      	str	r3, [r4, #0]
    1f9c:	b010      	add	sp, #64	; 0x40
    1f9e:	bd70      	pop	{r4, r5, r6, pc}

00001fa0 <__smakebuf_r>:
    1fa0:	898b      	ldrh	r3, [r1, #12]
    1fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1fa4:	079d      	lsls	r5, r3, #30
    1fa6:	4606      	mov	r6, r0
    1fa8:	460c      	mov	r4, r1
    1faa:	d507      	bpl.n	1fbc <__smakebuf_r+0x1c>
    1fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1fb0:	6023      	str	r3, [r4, #0]
    1fb2:	6123      	str	r3, [r4, #16]
    1fb4:	2301      	movs	r3, #1
    1fb6:	6163      	str	r3, [r4, #20]
    1fb8:	b002      	add	sp, #8
    1fba:	bd70      	pop	{r4, r5, r6, pc}
    1fbc:	ab01      	add	r3, sp, #4
    1fbe:	466a      	mov	r2, sp
    1fc0:	f7ff ffca 	bl	1f58 <__swhatbuf_r>
    1fc4:	9900      	ldr	r1, [sp, #0]
    1fc6:	4605      	mov	r5, r0
    1fc8:	4630      	mov	r0, r6
    1fca:	f7ff fced 	bl	19a8 <_malloc_r>
    1fce:	b948      	cbnz	r0, 1fe4 <__smakebuf_r+0x44>
    1fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1fd4:	059a      	lsls	r2, r3, #22
    1fd6:	d4ef      	bmi.n	1fb8 <__smakebuf_r+0x18>
    1fd8:	f023 0303 	bic.w	r3, r3, #3
    1fdc:	f043 0302 	orr.w	r3, r3, #2
    1fe0:	81a3      	strh	r3, [r4, #12]
    1fe2:	e7e3      	b.n	1fac <__smakebuf_r+0xc>
    1fe4:	4b0d      	ldr	r3, [pc, #52]	; (201c <__smakebuf_r+0x7c>)
    1fe6:	62b3      	str	r3, [r6, #40]	; 0x28
    1fe8:	89a3      	ldrh	r3, [r4, #12]
    1fea:	6020      	str	r0, [r4, #0]
    1fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ff0:	81a3      	strh	r3, [r4, #12]
    1ff2:	9b00      	ldr	r3, [sp, #0]
    1ff4:	6163      	str	r3, [r4, #20]
    1ff6:	9b01      	ldr	r3, [sp, #4]
    1ff8:	6120      	str	r0, [r4, #16]
    1ffa:	b15b      	cbz	r3, 2014 <__smakebuf_r+0x74>
    1ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2000:	4630      	mov	r0, r6
    2002:	f000 fda3 	bl	2b4c <_isatty_r>
    2006:	b128      	cbz	r0, 2014 <__smakebuf_r+0x74>
    2008:	89a3      	ldrh	r3, [r4, #12]
    200a:	f023 0303 	bic.w	r3, r3, #3
    200e:	f043 0301 	orr.w	r3, r3, #1
    2012:	81a3      	strh	r3, [r4, #12]
    2014:	89a3      	ldrh	r3, [r4, #12]
    2016:	431d      	orrs	r5, r3
    2018:	81a5      	strh	r5, [r4, #12]
    201a:	e7cd      	b.n	1fb8 <__smakebuf_r+0x18>
    201c:	000016e9 	.word	0x000016e9

00002020 <malloc>:
    2020:	4b02      	ldr	r3, [pc, #8]	; (202c <malloc+0xc>)
    2022:	4601      	mov	r1, r0
    2024:	6818      	ldr	r0, [r3, #0]
    2026:	f7ff bcbf 	b.w	19a8 <_malloc_r>
    202a:	bf00      	nop
    202c:	20000008 	.word	0x20000008

00002030 <__malloc_lock>:
    2030:	4770      	bx	lr

00002032 <__malloc_unlock>:
    2032:	4770      	bx	lr

00002034 <__svfiscanf_r>:
    2034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2038:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    203c:	f10d 080c 	add.w	r8, sp, #12
    2040:	9301      	str	r3, [sp, #4]
    2042:	2300      	movs	r3, #0
    2044:	9346      	str	r3, [sp, #280]	; 0x118
    2046:	9347      	str	r3, [sp, #284]	; 0x11c
    2048:	4ba0      	ldr	r3, [pc, #640]	; (22cc <__svfiscanf_r+0x298>)
    204a:	93a2      	str	r3, [sp, #648]	; 0x288
    204c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 22d4 <__svfiscanf_r+0x2a0>
    2050:	4b9f      	ldr	r3, [pc, #636]	; (22d0 <__svfiscanf_r+0x29c>)
    2052:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    2056:	4606      	mov	r6, r0
    2058:	460c      	mov	r4, r1
    205a:	93a3      	str	r3, [sp, #652]	; 0x28c
    205c:	4692      	mov	sl, r2
    205e:	270a      	movs	r7, #10
    2060:	f89a 3000 	ldrb.w	r3, [sl]
    2064:	2b00      	cmp	r3, #0
    2066:	f000 812f 	beq.w	22c8 <__svfiscanf_r+0x294>
    206a:	f000 fd83 	bl	2b74 <__locale_ctype_ptr>
    206e:	f89a b000 	ldrb.w	fp, [sl]
    2072:	4458      	add	r0, fp
    2074:	7843      	ldrb	r3, [r0, #1]
    2076:	f013 0308 	ands.w	r3, r3, #8
    207a:	d143      	bne.n	2104 <__svfiscanf_r+0xd0>
    207c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    2080:	f10a 0501 	add.w	r5, sl, #1
    2084:	f040 8099 	bne.w	21ba <__svfiscanf_r+0x186>
    2088:	9345      	str	r3, [sp, #276]	; 0x114
    208a:	9343      	str	r3, [sp, #268]	; 0x10c
    208c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    2090:	2b2a      	cmp	r3, #42	; 0x2a
    2092:	d103      	bne.n	209c <__svfiscanf_r+0x68>
    2094:	2310      	movs	r3, #16
    2096:	9343      	str	r3, [sp, #268]	; 0x10c
    2098:	f10a 0502 	add.w	r5, sl, #2
    209c:	7829      	ldrb	r1, [r5, #0]
    209e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    20a2:	2a09      	cmp	r2, #9
    20a4:	46aa      	mov	sl, r5
    20a6:	f105 0501 	add.w	r5, r5, #1
    20aa:	d941      	bls.n	2130 <__svfiscanf_r+0xfc>
    20ac:	2203      	movs	r2, #3
    20ae:	4889      	ldr	r0, [pc, #548]	; (22d4 <__svfiscanf_r+0x2a0>)
    20b0:	f000 fd86 	bl	2bc0 <memchr>
    20b4:	b138      	cbz	r0, 20c6 <__svfiscanf_r+0x92>
    20b6:	eba0 0309 	sub.w	r3, r0, r9
    20ba:	2001      	movs	r0, #1
    20bc:	4098      	lsls	r0, r3
    20be:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    20c0:	4318      	orrs	r0, r3
    20c2:	9043      	str	r0, [sp, #268]	; 0x10c
    20c4:	46aa      	mov	sl, r5
    20c6:	f89a 3000 	ldrb.w	r3, [sl]
    20ca:	2b67      	cmp	r3, #103	; 0x67
    20cc:	f10a 0501 	add.w	r5, sl, #1
    20d0:	d84a      	bhi.n	2168 <__svfiscanf_r+0x134>
    20d2:	2b65      	cmp	r3, #101	; 0x65
    20d4:	f080 80b7 	bcs.w	2246 <__svfiscanf_r+0x212>
    20d8:	2b47      	cmp	r3, #71	; 0x47
    20da:	d82f      	bhi.n	213c <__svfiscanf_r+0x108>
    20dc:	2b45      	cmp	r3, #69	; 0x45
    20de:	f080 80b2 	bcs.w	2246 <__svfiscanf_r+0x212>
    20e2:	2b00      	cmp	r3, #0
    20e4:	f000 8082 	beq.w	21ec <__svfiscanf_r+0x1b8>
    20e8:	2b25      	cmp	r3, #37	; 0x25
    20ea:	d066      	beq.n	21ba <__svfiscanf_r+0x186>
    20ec:	2303      	movs	r3, #3
    20ee:	9349      	str	r3, [sp, #292]	; 0x124
    20f0:	9744      	str	r7, [sp, #272]	; 0x110
    20f2:	e045      	b.n	2180 <__svfiscanf_r+0x14c>
    20f4:	9947      	ldr	r1, [sp, #284]	; 0x11c
    20f6:	3101      	adds	r1, #1
    20f8:	9147      	str	r1, [sp, #284]	; 0x11c
    20fa:	6861      	ldr	r1, [r4, #4]
    20fc:	3301      	adds	r3, #1
    20fe:	3901      	subs	r1, #1
    2100:	6061      	str	r1, [r4, #4]
    2102:	6023      	str	r3, [r4, #0]
    2104:	6863      	ldr	r3, [r4, #4]
    2106:	2b00      	cmp	r3, #0
    2108:	dd0b      	ble.n	2122 <__svfiscanf_r+0xee>
    210a:	f000 fd33 	bl	2b74 <__locale_ctype_ptr>
    210e:	6823      	ldr	r3, [r4, #0]
    2110:	7819      	ldrb	r1, [r3, #0]
    2112:	4408      	add	r0, r1
    2114:	7841      	ldrb	r1, [r0, #1]
    2116:	070d      	lsls	r5, r1, #28
    2118:	d4ec      	bmi.n	20f4 <__svfiscanf_r+0xc0>
    211a:	f10a 0501 	add.w	r5, sl, #1
    211e:	46aa      	mov	sl, r5
    2120:	e79e      	b.n	2060 <__svfiscanf_r+0x2c>
    2122:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    2124:	4621      	mov	r1, r4
    2126:	4630      	mov	r0, r6
    2128:	4798      	blx	r3
    212a:	2800      	cmp	r0, #0
    212c:	d0ed      	beq.n	210a <__svfiscanf_r+0xd6>
    212e:	e7f4      	b.n	211a <__svfiscanf_r+0xe6>
    2130:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2132:	fb07 1303 	mla	r3, r7, r3, r1
    2136:	3b30      	subs	r3, #48	; 0x30
    2138:	9345      	str	r3, [sp, #276]	; 0x114
    213a:	e7af      	b.n	209c <__svfiscanf_r+0x68>
    213c:	2b5b      	cmp	r3, #91	; 0x5b
    213e:	d061      	beq.n	2204 <__svfiscanf_r+0x1d0>
    2140:	d80c      	bhi.n	215c <__svfiscanf_r+0x128>
    2142:	2b58      	cmp	r3, #88	; 0x58
    2144:	d1d2      	bne.n	20ec <__svfiscanf_r+0xb8>
    2146:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    214c:	9243      	str	r2, [sp, #268]	; 0x10c
    214e:	2210      	movs	r2, #16
    2150:	9244      	str	r2, [sp, #272]	; 0x110
    2152:	2b6f      	cmp	r3, #111	; 0x6f
    2154:	bfb4      	ite	lt
    2156:	2303      	movlt	r3, #3
    2158:	2304      	movge	r3, #4
    215a:	e010      	b.n	217e <__svfiscanf_r+0x14a>
    215c:	2b63      	cmp	r3, #99	; 0x63
    215e:	d05c      	beq.n	221a <__svfiscanf_r+0x1e6>
    2160:	2b64      	cmp	r3, #100	; 0x64
    2162:	d1c3      	bne.n	20ec <__svfiscanf_r+0xb8>
    2164:	9744      	str	r7, [sp, #272]	; 0x110
    2166:	e7f4      	b.n	2152 <__svfiscanf_r+0x11e>
    2168:	2b70      	cmp	r3, #112	; 0x70
    216a:	d042      	beq.n	21f2 <__svfiscanf_r+0x1be>
    216c:	d81d      	bhi.n	21aa <__svfiscanf_r+0x176>
    216e:	2b6e      	cmp	r3, #110	; 0x6e
    2170:	d059      	beq.n	2226 <__svfiscanf_r+0x1f2>
    2172:	d843      	bhi.n	21fc <__svfiscanf_r+0x1c8>
    2174:	2b69      	cmp	r3, #105	; 0x69
    2176:	d1b9      	bne.n	20ec <__svfiscanf_r+0xb8>
    2178:	2300      	movs	r3, #0
    217a:	9344      	str	r3, [sp, #272]	; 0x110
    217c:	2303      	movs	r3, #3
    217e:	9349      	str	r3, [sp, #292]	; 0x124
    2180:	6863      	ldr	r3, [r4, #4]
    2182:	2b00      	cmp	r3, #0
    2184:	dd61      	ble.n	224a <__svfiscanf_r+0x216>
    2186:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    2188:	0659      	lsls	r1, r3, #25
    218a:	d56f      	bpl.n	226c <__svfiscanf_r+0x238>
    218c:	9b49      	ldr	r3, [sp, #292]	; 0x124
    218e:	2b02      	cmp	r3, #2
    2190:	dc7c      	bgt.n	228c <__svfiscanf_r+0x258>
    2192:	ab01      	add	r3, sp, #4
    2194:	4622      	mov	r2, r4
    2196:	a943      	add	r1, sp, #268	; 0x10c
    2198:	4630      	mov	r0, r6
    219a:	f000 f8c7 	bl	232c <_scanf_chars>
    219e:	2801      	cmp	r0, #1
    21a0:	f000 8092 	beq.w	22c8 <__svfiscanf_r+0x294>
    21a4:	2802      	cmp	r0, #2
    21a6:	d1ba      	bne.n	211e <__svfiscanf_r+0xea>
    21a8:	e01d      	b.n	21e6 <__svfiscanf_r+0x1b2>
    21aa:	2b75      	cmp	r3, #117	; 0x75
    21ac:	d0da      	beq.n	2164 <__svfiscanf_r+0x130>
    21ae:	2b78      	cmp	r3, #120	; 0x78
    21b0:	d0c9      	beq.n	2146 <__svfiscanf_r+0x112>
    21b2:	2b73      	cmp	r3, #115	; 0x73
    21b4:	d19a      	bne.n	20ec <__svfiscanf_r+0xb8>
    21b6:	2302      	movs	r3, #2
    21b8:	e7e1      	b.n	217e <__svfiscanf_r+0x14a>
    21ba:	6863      	ldr	r3, [r4, #4]
    21bc:	2b00      	cmp	r3, #0
    21be:	dd0c      	ble.n	21da <__svfiscanf_r+0x1a6>
    21c0:	6823      	ldr	r3, [r4, #0]
    21c2:	781a      	ldrb	r2, [r3, #0]
    21c4:	4593      	cmp	fp, r2
    21c6:	d17f      	bne.n	22c8 <__svfiscanf_r+0x294>
    21c8:	3301      	adds	r3, #1
    21ca:	6862      	ldr	r2, [r4, #4]
    21cc:	6023      	str	r3, [r4, #0]
    21ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    21d0:	3a01      	subs	r2, #1
    21d2:	3301      	adds	r3, #1
    21d4:	6062      	str	r2, [r4, #4]
    21d6:	9347      	str	r3, [sp, #284]	; 0x11c
    21d8:	e7a1      	b.n	211e <__svfiscanf_r+0xea>
    21da:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    21dc:	4621      	mov	r1, r4
    21de:	4630      	mov	r0, r6
    21e0:	4798      	blx	r3
    21e2:	2800      	cmp	r0, #0
    21e4:	d0ec      	beq.n	21c0 <__svfiscanf_r+0x18c>
    21e6:	9846      	ldr	r0, [sp, #280]	; 0x118
    21e8:	2800      	cmp	r0, #0
    21ea:	d163      	bne.n	22b4 <__svfiscanf_r+0x280>
    21ec:	f04f 30ff 	mov.w	r0, #4294967295
    21f0:	e066      	b.n	22c0 <__svfiscanf_r+0x28c>
    21f2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    21f4:	f042 0220 	orr.w	r2, r2, #32
    21f8:	9243      	str	r2, [sp, #268]	; 0x10c
    21fa:	e7a4      	b.n	2146 <__svfiscanf_r+0x112>
    21fc:	2308      	movs	r3, #8
    21fe:	9344      	str	r3, [sp, #272]	; 0x110
    2200:	2304      	movs	r3, #4
    2202:	e7bc      	b.n	217e <__svfiscanf_r+0x14a>
    2204:	4629      	mov	r1, r5
    2206:	4640      	mov	r0, r8
    2208:	f000 fa8e 	bl	2728 <__sccl>
    220c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    220e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2212:	9343      	str	r3, [sp, #268]	; 0x10c
    2214:	4605      	mov	r5, r0
    2216:	2301      	movs	r3, #1
    2218:	e7b1      	b.n	217e <__svfiscanf_r+0x14a>
    221a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2220:	9343      	str	r3, [sp, #268]	; 0x10c
    2222:	2300      	movs	r3, #0
    2224:	e7ab      	b.n	217e <__svfiscanf_r+0x14a>
    2226:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2228:	06d0      	lsls	r0, r2, #27
    222a:	f53f af78 	bmi.w	211e <__svfiscanf_r+0xea>
    222e:	f012 0f01 	tst.w	r2, #1
    2232:	9a01      	ldr	r2, [sp, #4]
    2234:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2236:	f102 0104 	add.w	r1, r2, #4
    223a:	9101      	str	r1, [sp, #4]
    223c:	6812      	ldr	r2, [r2, #0]
    223e:	bf14      	ite	ne
    2240:	8013      	strhne	r3, [r2, #0]
    2242:	6013      	streq	r3, [r2, #0]
    2244:	e76b      	b.n	211e <__svfiscanf_r+0xea>
    2246:	2305      	movs	r3, #5
    2248:	e799      	b.n	217e <__svfiscanf_r+0x14a>
    224a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    224c:	4621      	mov	r1, r4
    224e:	4630      	mov	r0, r6
    2250:	4798      	blx	r3
    2252:	2800      	cmp	r0, #0
    2254:	d097      	beq.n	2186 <__svfiscanf_r+0x152>
    2256:	e7c6      	b.n	21e6 <__svfiscanf_r+0x1b2>
    2258:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    225a:	3201      	adds	r2, #1
    225c:	9247      	str	r2, [sp, #284]	; 0x11c
    225e:	6862      	ldr	r2, [r4, #4]
    2260:	3a01      	subs	r2, #1
    2262:	2a00      	cmp	r2, #0
    2264:	6062      	str	r2, [r4, #4]
    2266:	dd0a      	ble.n	227e <__svfiscanf_r+0x24a>
    2268:	3301      	adds	r3, #1
    226a:	6023      	str	r3, [r4, #0]
    226c:	f000 fc82 	bl	2b74 <__locale_ctype_ptr>
    2270:	6823      	ldr	r3, [r4, #0]
    2272:	781a      	ldrb	r2, [r3, #0]
    2274:	4410      	add	r0, r2
    2276:	7842      	ldrb	r2, [r0, #1]
    2278:	0712      	lsls	r2, r2, #28
    227a:	d4ed      	bmi.n	2258 <__svfiscanf_r+0x224>
    227c:	e786      	b.n	218c <__svfiscanf_r+0x158>
    227e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    2280:	4621      	mov	r1, r4
    2282:	4630      	mov	r0, r6
    2284:	4798      	blx	r3
    2286:	2800      	cmp	r0, #0
    2288:	d0f0      	beq.n	226c <__svfiscanf_r+0x238>
    228a:	e7ac      	b.n	21e6 <__svfiscanf_r+0x1b2>
    228c:	2b04      	cmp	r3, #4
    228e:	dc06      	bgt.n	229e <__svfiscanf_r+0x26a>
    2290:	ab01      	add	r3, sp, #4
    2292:	4622      	mov	r2, r4
    2294:	a943      	add	r1, sp, #268	; 0x10c
    2296:	4630      	mov	r0, r6
    2298:	f000 f8ac 	bl	23f4 <_scanf_i>
    229c:	e77f      	b.n	219e <__svfiscanf_r+0x16a>
    229e:	4b0e      	ldr	r3, [pc, #56]	; (22d8 <__svfiscanf_r+0x2a4>)
    22a0:	2b00      	cmp	r3, #0
    22a2:	f43f af3c 	beq.w	211e <__svfiscanf_r+0xea>
    22a6:	ab01      	add	r3, sp, #4
    22a8:	4622      	mov	r2, r4
    22aa:	a943      	add	r1, sp, #268	; 0x10c
    22ac:	4630      	mov	r0, r6
    22ae:	f3af 8000 	nop.w
    22b2:	e774      	b.n	219e <__svfiscanf_r+0x16a>
    22b4:	89a3      	ldrh	r3, [r4, #12]
    22b6:	f013 0f40 	tst.w	r3, #64	; 0x40
    22ba:	bf18      	it	ne
    22bc:	f04f 30ff 	movne.w	r0, #4294967295
    22c0:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    22c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22c8:	9846      	ldr	r0, [sp, #280]	; 0x118
    22ca:	e7f9      	b.n	22c0 <__svfiscanf_r+0x28c>
    22cc:	00002a45 	.word	0x00002a45
    22d0:	00002615 	.word	0x00002615
    22d4:	00003358 	.word	0x00003358
    22d8:	00000000 	.word	0x00000000

000022dc <_vfiscanf_r>:
    22dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22e0:	460c      	mov	r4, r1
    22e2:	4616      	mov	r6, r2
    22e4:	461f      	mov	r7, r3
    22e6:	4605      	mov	r5, r0
    22e8:	b118      	cbz	r0, 22f2 <_vfiscanf_r+0x16>
    22ea:	6983      	ldr	r3, [r0, #24]
    22ec:	b90b      	cbnz	r3, 22f2 <_vfiscanf_r+0x16>
    22ee:	f7ff fa3b 	bl	1768 <__sinit>
    22f2:	4b0b      	ldr	r3, [pc, #44]	; (2320 <_vfiscanf_r+0x44>)
    22f4:	429c      	cmp	r4, r3
    22f6:	d108      	bne.n	230a <_vfiscanf_r+0x2e>
    22f8:	686c      	ldr	r4, [r5, #4]
    22fa:	463b      	mov	r3, r7
    22fc:	4632      	mov	r2, r6
    22fe:	4621      	mov	r1, r4
    2300:	4628      	mov	r0, r5
    2302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2306:	f7ff be95 	b.w	2034 <__svfiscanf_r>
    230a:	4b06      	ldr	r3, [pc, #24]	; (2324 <_vfiscanf_r+0x48>)
    230c:	429c      	cmp	r4, r3
    230e:	d101      	bne.n	2314 <_vfiscanf_r+0x38>
    2310:	68ac      	ldr	r4, [r5, #8]
    2312:	e7f2      	b.n	22fa <_vfiscanf_r+0x1e>
    2314:	4b04      	ldr	r3, [pc, #16]	; (2328 <_vfiscanf_r+0x4c>)
    2316:	429c      	cmp	r4, r3
    2318:	bf08      	it	eq
    231a:	68ec      	ldreq	r4, [r5, #12]
    231c:	e7ed      	b.n	22fa <_vfiscanf_r+0x1e>
    231e:	bf00      	nop
    2320:	00003314 	.word	0x00003314
    2324:	00003334 	.word	0x00003334
    2328:	000032f4 	.word	0x000032f4

0000232c <_scanf_chars>:
    232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2330:	4615      	mov	r5, r2
    2332:	688a      	ldr	r2, [r1, #8]
    2334:	4680      	mov	r8, r0
    2336:	460c      	mov	r4, r1
    2338:	b932      	cbnz	r2, 2348 <_scanf_chars+0x1c>
    233a:	698a      	ldr	r2, [r1, #24]
    233c:	2a00      	cmp	r2, #0
    233e:	bf0c      	ite	eq
    2340:	2201      	moveq	r2, #1
    2342:	f04f 32ff 	movne.w	r2, #4294967295
    2346:	608a      	str	r2, [r1, #8]
    2348:	6822      	ldr	r2, [r4, #0]
    234a:	06d1      	lsls	r1, r2, #27
    234c:	bf5f      	itttt	pl
    234e:	681a      	ldrpl	r2, [r3, #0]
    2350:	1d11      	addpl	r1, r2, #4
    2352:	6019      	strpl	r1, [r3, #0]
    2354:	6817      	ldrpl	r7, [r2, #0]
    2356:	2600      	movs	r6, #0
    2358:	69a3      	ldr	r3, [r4, #24]
    235a:	b1db      	cbz	r3, 2394 <_scanf_chars+0x68>
    235c:	2b01      	cmp	r3, #1
    235e:	d107      	bne.n	2370 <_scanf_chars+0x44>
    2360:	682b      	ldr	r3, [r5, #0]
    2362:	6962      	ldr	r2, [r4, #20]
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	5cd3      	ldrb	r3, [r2, r3]
    2368:	b9a3      	cbnz	r3, 2394 <_scanf_chars+0x68>
    236a:	2e00      	cmp	r6, #0
    236c:	d132      	bne.n	23d4 <_scanf_chars+0xa8>
    236e:	e006      	b.n	237e <_scanf_chars+0x52>
    2370:	2b02      	cmp	r3, #2
    2372:	d007      	beq.n	2384 <_scanf_chars+0x58>
    2374:	2e00      	cmp	r6, #0
    2376:	d12d      	bne.n	23d4 <_scanf_chars+0xa8>
    2378:	69a3      	ldr	r3, [r4, #24]
    237a:	2b01      	cmp	r3, #1
    237c:	d12a      	bne.n	23d4 <_scanf_chars+0xa8>
    237e:	2001      	movs	r0, #1
    2380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2384:	f000 fbf6 	bl	2b74 <__locale_ctype_ptr>
    2388:	682b      	ldr	r3, [r5, #0]
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	4418      	add	r0, r3
    238e:	7843      	ldrb	r3, [r0, #1]
    2390:	071b      	lsls	r3, r3, #28
    2392:	d4ef      	bmi.n	2374 <_scanf_chars+0x48>
    2394:	6823      	ldr	r3, [r4, #0]
    2396:	06da      	lsls	r2, r3, #27
    2398:	bf5e      	ittt	pl
    239a:	682b      	ldrpl	r3, [r5, #0]
    239c:	781b      	ldrbpl	r3, [r3, #0]
    239e:	703b      	strbpl	r3, [r7, #0]
    23a0:	682a      	ldr	r2, [r5, #0]
    23a2:	686b      	ldr	r3, [r5, #4]
    23a4:	f102 0201 	add.w	r2, r2, #1
    23a8:	602a      	str	r2, [r5, #0]
    23aa:	68a2      	ldr	r2, [r4, #8]
    23ac:	f103 33ff 	add.w	r3, r3, #4294967295
    23b0:	f102 32ff 	add.w	r2, r2, #4294967295
    23b4:	606b      	str	r3, [r5, #4]
    23b6:	f106 0601 	add.w	r6, r6, #1
    23ba:	bf58      	it	pl
    23bc:	3701      	addpl	r7, #1
    23be:	60a2      	str	r2, [r4, #8]
    23c0:	b142      	cbz	r2, 23d4 <_scanf_chars+0xa8>
    23c2:	2b00      	cmp	r3, #0
    23c4:	dcc8      	bgt.n	2358 <_scanf_chars+0x2c>
    23c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    23ca:	4629      	mov	r1, r5
    23cc:	4640      	mov	r0, r8
    23ce:	4798      	blx	r3
    23d0:	2800      	cmp	r0, #0
    23d2:	d0c1      	beq.n	2358 <_scanf_chars+0x2c>
    23d4:	6823      	ldr	r3, [r4, #0]
    23d6:	f013 0310 	ands.w	r3, r3, #16
    23da:	d105      	bne.n	23e8 <_scanf_chars+0xbc>
    23dc:	68e2      	ldr	r2, [r4, #12]
    23de:	3201      	adds	r2, #1
    23e0:	60e2      	str	r2, [r4, #12]
    23e2:	69a2      	ldr	r2, [r4, #24]
    23e4:	b102      	cbz	r2, 23e8 <_scanf_chars+0xbc>
    23e6:	703b      	strb	r3, [r7, #0]
    23e8:	6923      	ldr	r3, [r4, #16]
    23ea:	441e      	add	r6, r3
    23ec:	6126      	str	r6, [r4, #16]
    23ee:	2000      	movs	r0, #0
    23f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000023f4 <_scanf_i>:
    23f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f8:	469a      	mov	sl, r3
    23fa:	4b74      	ldr	r3, [pc, #464]	; (25cc <_scanf_i+0x1d8>)
    23fc:	460c      	mov	r4, r1
    23fe:	4683      	mov	fp, r0
    2400:	4616      	mov	r6, r2
    2402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2406:	b087      	sub	sp, #28
    2408:	ab03      	add	r3, sp, #12
    240a:	68a7      	ldr	r7, [r4, #8]
    240c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    2410:	4b6f      	ldr	r3, [pc, #444]	; (25d0 <_scanf_i+0x1dc>)
    2412:	69a1      	ldr	r1, [r4, #24]
    2414:	4a6f      	ldr	r2, [pc, #444]	; (25d4 <_scanf_i+0x1e0>)
    2416:	2903      	cmp	r1, #3
    2418:	bf18      	it	ne
    241a:	461a      	movne	r2, r3
    241c:	1e7b      	subs	r3, r7, #1
    241e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    2422:	bf84      	itt	hi
    2424:	f240 135d 	movwhi	r3, #349	; 0x15d
    2428:	60a3      	strhi	r3, [r4, #8]
    242a:	6823      	ldr	r3, [r4, #0]
    242c:	9200      	str	r2, [sp, #0]
    242e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    2432:	bf88      	it	hi
    2434:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    2438:	f104 091c 	add.w	r9, r4, #28
    243c:	6023      	str	r3, [r4, #0]
    243e:	bf8c      	ite	hi
    2440:	197f      	addhi	r7, r7, r5
    2442:	2700      	movls	r7, #0
    2444:	464b      	mov	r3, r9
    2446:	f04f 0800 	mov.w	r8, #0
    244a:	9301      	str	r3, [sp, #4]
    244c:	6831      	ldr	r1, [r6, #0]
    244e:	ab03      	add	r3, sp, #12
    2450:	2202      	movs	r2, #2
    2452:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    2456:	7809      	ldrb	r1, [r1, #0]
    2458:	f000 fbb2 	bl	2bc0 <memchr>
    245c:	9b01      	ldr	r3, [sp, #4]
    245e:	b328      	cbz	r0, 24ac <_scanf_i+0xb8>
    2460:	f1b8 0f01 	cmp.w	r8, #1
    2464:	d156      	bne.n	2514 <_scanf_i+0x120>
    2466:	6862      	ldr	r2, [r4, #4]
    2468:	b92a      	cbnz	r2, 2476 <_scanf_i+0x82>
    246a:	2208      	movs	r2, #8
    246c:	6062      	str	r2, [r4, #4]
    246e:	6822      	ldr	r2, [r4, #0]
    2470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    2474:	6022      	str	r2, [r4, #0]
    2476:	6822      	ldr	r2, [r4, #0]
    2478:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    247c:	6022      	str	r2, [r4, #0]
    247e:	68a2      	ldr	r2, [r4, #8]
    2480:	1e51      	subs	r1, r2, #1
    2482:	60a1      	str	r1, [r4, #8]
    2484:	b192      	cbz	r2, 24ac <_scanf_i+0xb8>
    2486:	6832      	ldr	r2, [r6, #0]
    2488:	1c51      	adds	r1, r2, #1
    248a:	6031      	str	r1, [r6, #0]
    248c:	7812      	ldrb	r2, [r2, #0]
    248e:	701a      	strb	r2, [r3, #0]
    2490:	1c5d      	adds	r5, r3, #1
    2492:	6873      	ldr	r3, [r6, #4]
    2494:	3b01      	subs	r3, #1
    2496:	2b00      	cmp	r3, #0
    2498:	6073      	str	r3, [r6, #4]
    249a:	dc06      	bgt.n	24aa <_scanf_i+0xb6>
    249c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    24a0:	4631      	mov	r1, r6
    24a2:	4658      	mov	r0, fp
    24a4:	4798      	blx	r3
    24a6:	2800      	cmp	r0, #0
    24a8:	d176      	bne.n	2598 <_scanf_i+0x1a4>
    24aa:	462b      	mov	r3, r5
    24ac:	f108 0801 	add.w	r8, r8, #1
    24b0:	f1b8 0f03 	cmp.w	r8, #3
    24b4:	d1c9      	bne.n	244a <_scanf_i+0x56>
    24b6:	6862      	ldr	r2, [r4, #4]
    24b8:	b90a      	cbnz	r2, 24be <_scanf_i+0xca>
    24ba:	220a      	movs	r2, #10
    24bc:	6062      	str	r2, [r4, #4]
    24be:	6862      	ldr	r2, [r4, #4]
    24c0:	4945      	ldr	r1, [pc, #276]	; (25d8 <_scanf_i+0x1e4>)
    24c2:	6960      	ldr	r0, [r4, #20]
    24c4:	9301      	str	r3, [sp, #4]
    24c6:	1a89      	subs	r1, r1, r2
    24c8:	f000 f92e 	bl	2728 <__sccl>
    24cc:	9b01      	ldr	r3, [sp, #4]
    24ce:	f04f 0800 	mov.w	r8, #0
    24d2:	461d      	mov	r5, r3
    24d4:	68a3      	ldr	r3, [r4, #8]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d038      	beq.n	254c <_scanf_i+0x158>
    24da:	6831      	ldr	r1, [r6, #0]
    24dc:	6960      	ldr	r0, [r4, #20]
    24de:	780a      	ldrb	r2, [r1, #0]
    24e0:	5c80      	ldrb	r0, [r0, r2]
    24e2:	2800      	cmp	r0, #0
    24e4:	d032      	beq.n	254c <_scanf_i+0x158>
    24e6:	2a30      	cmp	r2, #48	; 0x30
    24e8:	6822      	ldr	r2, [r4, #0]
    24ea:	d121      	bne.n	2530 <_scanf_i+0x13c>
    24ec:	0510      	lsls	r0, r2, #20
    24ee:	d51f      	bpl.n	2530 <_scanf_i+0x13c>
    24f0:	f108 0801 	add.w	r8, r8, #1
    24f4:	b117      	cbz	r7, 24fc <_scanf_i+0x108>
    24f6:	3301      	adds	r3, #1
    24f8:	3f01      	subs	r7, #1
    24fa:	60a3      	str	r3, [r4, #8]
    24fc:	6873      	ldr	r3, [r6, #4]
    24fe:	3b01      	subs	r3, #1
    2500:	2b00      	cmp	r3, #0
    2502:	6073      	str	r3, [r6, #4]
    2504:	dd1b      	ble.n	253e <_scanf_i+0x14a>
    2506:	6833      	ldr	r3, [r6, #0]
    2508:	3301      	adds	r3, #1
    250a:	6033      	str	r3, [r6, #0]
    250c:	68a3      	ldr	r3, [r4, #8]
    250e:	3b01      	subs	r3, #1
    2510:	60a3      	str	r3, [r4, #8]
    2512:	e7df      	b.n	24d4 <_scanf_i+0xe0>
    2514:	f1b8 0f02 	cmp.w	r8, #2
    2518:	d1b1      	bne.n	247e <_scanf_i+0x8a>
    251a:	6822      	ldr	r2, [r4, #0]
    251c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    2520:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2524:	d1c2      	bne.n	24ac <_scanf_i+0xb8>
    2526:	2110      	movs	r1, #16
    2528:	6061      	str	r1, [r4, #4]
    252a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    252e:	e7a5      	b.n	247c <_scanf_i+0x88>
    2530:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    2534:	6022      	str	r2, [r4, #0]
    2536:	780b      	ldrb	r3, [r1, #0]
    2538:	702b      	strb	r3, [r5, #0]
    253a:	3501      	adds	r5, #1
    253c:	e7de      	b.n	24fc <_scanf_i+0x108>
    253e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2542:	4631      	mov	r1, r6
    2544:	4658      	mov	r0, fp
    2546:	4798      	blx	r3
    2548:	2800      	cmp	r0, #0
    254a:	d0df      	beq.n	250c <_scanf_i+0x118>
    254c:	6823      	ldr	r3, [r4, #0]
    254e:	05d9      	lsls	r1, r3, #23
    2550:	d50c      	bpl.n	256c <_scanf_i+0x178>
    2552:	454d      	cmp	r5, r9
    2554:	d908      	bls.n	2568 <_scanf_i+0x174>
    2556:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    255a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    255e:	4632      	mov	r2, r6
    2560:	4658      	mov	r0, fp
    2562:	4798      	blx	r3
    2564:	1e6f      	subs	r7, r5, #1
    2566:	463d      	mov	r5, r7
    2568:	454d      	cmp	r5, r9
    256a:	d02c      	beq.n	25c6 <_scanf_i+0x1d2>
    256c:	6822      	ldr	r2, [r4, #0]
    256e:	f012 0210 	ands.w	r2, r2, #16
    2572:	d11e      	bne.n	25b2 <_scanf_i+0x1be>
    2574:	702a      	strb	r2, [r5, #0]
    2576:	6863      	ldr	r3, [r4, #4]
    2578:	9e00      	ldr	r6, [sp, #0]
    257a:	4649      	mov	r1, r9
    257c:	4658      	mov	r0, fp
    257e:	47b0      	blx	r6
    2580:	6822      	ldr	r2, [r4, #0]
    2582:	f8da 3000 	ldr.w	r3, [sl]
    2586:	f012 0f20 	tst.w	r2, #32
    258a:	d008      	beq.n	259e <_scanf_i+0x1aa>
    258c:	1d1a      	adds	r2, r3, #4
    258e:	f8ca 2000 	str.w	r2, [sl]
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	6018      	str	r0, [r3, #0]
    2596:	e009      	b.n	25ac <_scanf_i+0x1b8>
    2598:	f04f 0800 	mov.w	r8, #0
    259c:	e7d6      	b.n	254c <_scanf_i+0x158>
    259e:	07d2      	lsls	r2, r2, #31
    25a0:	d5f4      	bpl.n	258c <_scanf_i+0x198>
    25a2:	1d1a      	adds	r2, r3, #4
    25a4:	f8ca 2000 	str.w	r2, [sl]
    25a8:	681b      	ldr	r3, [r3, #0]
    25aa:	8018      	strh	r0, [r3, #0]
    25ac:	68e3      	ldr	r3, [r4, #12]
    25ae:	3301      	adds	r3, #1
    25b0:	60e3      	str	r3, [r4, #12]
    25b2:	eba5 0509 	sub.w	r5, r5, r9
    25b6:	44a8      	add	r8, r5
    25b8:	6925      	ldr	r5, [r4, #16]
    25ba:	4445      	add	r5, r8
    25bc:	6125      	str	r5, [r4, #16]
    25be:	2000      	movs	r0, #0
    25c0:	b007      	add	sp, #28
    25c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25c6:	2001      	movs	r0, #1
    25c8:	e7fa      	b.n	25c0 <_scanf_i+0x1cc>
    25ca:	bf00      	nop
    25cc:	0000335c 	.word	0x0000335c
    25d0:	000029a9 	.word	0x000029a9
    25d4:	00002889 	.word	0x00002889
    25d8:	00003378 	.word	0x00003378

000025dc <_read_r>:
    25dc:	b538      	push	{r3, r4, r5, lr}
    25de:	4c07      	ldr	r4, [pc, #28]	; (25fc <_read_r+0x20>)
    25e0:	4605      	mov	r5, r0
    25e2:	4608      	mov	r0, r1
    25e4:	4611      	mov	r1, r2
    25e6:	2200      	movs	r2, #0
    25e8:	6022      	str	r2, [r4, #0]
    25ea:	461a      	mov	r2, r3
    25ec:	f7fe ff4c 	bl	1488 <_read>
    25f0:	1c43      	adds	r3, r0, #1
    25f2:	d102      	bne.n	25fa <_read_r+0x1e>
    25f4:	6823      	ldr	r3, [r4, #0]
    25f6:	b103      	cbz	r3, 25fa <_read_r+0x1e>
    25f8:	602b      	str	r3, [r5, #0]
    25fa:	bd38      	pop	{r3, r4, r5, pc}
    25fc:	20000234 	.word	0x20000234

00002600 <lflush>:
    2600:	8983      	ldrh	r3, [r0, #12]
    2602:	f003 0309 	and.w	r3, r3, #9
    2606:	2b09      	cmp	r3, #9
    2608:	d101      	bne.n	260e <lflush+0xe>
    260a:	f7ff b85b 	b.w	16c4 <fflush>
    260e:	2000      	movs	r0, #0
    2610:	4770      	bx	lr
	...

00002614 <__srefill_r>:
    2614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2616:	460c      	mov	r4, r1
    2618:	4605      	mov	r5, r0
    261a:	b118      	cbz	r0, 2624 <__srefill_r+0x10>
    261c:	6983      	ldr	r3, [r0, #24]
    261e:	b90b      	cbnz	r3, 2624 <__srefill_r+0x10>
    2620:	f7ff f8a2 	bl	1768 <__sinit>
    2624:	4b3b      	ldr	r3, [pc, #236]	; (2714 <__srefill_r+0x100>)
    2626:	429c      	cmp	r4, r3
    2628:	d10a      	bne.n	2640 <__srefill_r+0x2c>
    262a:	686c      	ldr	r4, [r5, #4]
    262c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2630:	2300      	movs	r3, #0
    2632:	6063      	str	r3, [r4, #4]
    2634:	b293      	uxth	r3, r2
    2636:	069e      	lsls	r6, r3, #26
    2638:	d50c      	bpl.n	2654 <__srefill_r+0x40>
    263a:	f04f 30ff 	mov.w	r0, #4294967295
    263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2640:	4b35      	ldr	r3, [pc, #212]	; (2718 <__srefill_r+0x104>)
    2642:	429c      	cmp	r4, r3
    2644:	d101      	bne.n	264a <__srefill_r+0x36>
    2646:	68ac      	ldr	r4, [r5, #8]
    2648:	e7f0      	b.n	262c <__srefill_r+0x18>
    264a:	4b34      	ldr	r3, [pc, #208]	; (271c <__srefill_r+0x108>)
    264c:	429c      	cmp	r4, r3
    264e:	bf08      	it	eq
    2650:	68ec      	ldreq	r4, [r5, #12]
    2652:	e7eb      	b.n	262c <__srefill_r+0x18>
    2654:	0758      	lsls	r0, r3, #29
    2656:	d448      	bmi.n	26ea <__srefill_r+0xd6>
    2658:	06d9      	lsls	r1, r3, #27
    265a:	d405      	bmi.n	2668 <__srefill_r+0x54>
    265c:	2309      	movs	r3, #9
    265e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2662:	602b      	str	r3, [r5, #0]
    2664:	81a2      	strh	r2, [r4, #12]
    2666:	e7e8      	b.n	263a <__srefill_r+0x26>
    2668:	071a      	lsls	r2, r3, #28
    266a:	d50b      	bpl.n	2684 <__srefill_r+0x70>
    266c:	4621      	mov	r1, r4
    266e:	4628      	mov	r0, r5
    2670:	f7fe fffe 	bl	1670 <_fflush_r>
    2674:	2800      	cmp	r0, #0
    2676:	d1e0      	bne.n	263a <__srefill_r+0x26>
    2678:	89a3      	ldrh	r3, [r4, #12]
    267a:	60a0      	str	r0, [r4, #8]
    267c:	f023 0308 	bic.w	r3, r3, #8
    2680:	81a3      	strh	r3, [r4, #12]
    2682:	61a0      	str	r0, [r4, #24]
    2684:	89a3      	ldrh	r3, [r4, #12]
    2686:	f043 0304 	orr.w	r3, r3, #4
    268a:	81a3      	strh	r3, [r4, #12]
    268c:	6923      	ldr	r3, [r4, #16]
    268e:	b91b      	cbnz	r3, 2698 <__srefill_r+0x84>
    2690:	4621      	mov	r1, r4
    2692:	4628      	mov	r0, r5
    2694:	f7ff fc84 	bl	1fa0 <__smakebuf_r>
    2698:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    269c:	b2be      	uxth	r6, r7
    269e:	07b3      	lsls	r3, r6, #30
    26a0:	d00f      	beq.n	26c2 <__srefill_r+0xae>
    26a2:	2301      	movs	r3, #1
    26a4:	81a3      	strh	r3, [r4, #12]
    26a6:	4b1e      	ldr	r3, [pc, #120]	; (2720 <__srefill_r+0x10c>)
    26a8:	491e      	ldr	r1, [pc, #120]	; (2724 <__srefill_r+0x110>)
    26aa:	6818      	ldr	r0, [r3, #0]
    26ac:	f006 0609 	and.w	r6, r6, #9
    26b0:	f7ff f8c6 	bl	1840 <_fwalk>
    26b4:	2e09      	cmp	r6, #9
    26b6:	81a7      	strh	r7, [r4, #12]
    26b8:	d103      	bne.n	26c2 <__srefill_r+0xae>
    26ba:	4621      	mov	r1, r4
    26bc:	4628      	mov	r0, r5
    26be:	f7fe ff4f 	bl	1560 <__sflush_r>
    26c2:	6922      	ldr	r2, [r4, #16]
    26c4:	6022      	str	r2, [r4, #0]
    26c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    26c8:	6963      	ldr	r3, [r4, #20]
    26ca:	6a21      	ldr	r1, [r4, #32]
    26cc:	4628      	mov	r0, r5
    26ce:	47b0      	blx	r6
    26d0:	2800      	cmp	r0, #0
    26d2:	6060      	str	r0, [r4, #4]
    26d4:	dc1c      	bgt.n	2710 <__srefill_r+0xfc>
    26d6:	89a3      	ldrh	r3, [r4, #12]
    26d8:	bf17      	itett	ne
    26da:	2200      	movne	r2, #0
    26dc:	f043 0320 	orreq.w	r3, r3, #32
    26e0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    26e4:	6062      	strne	r2, [r4, #4]
    26e6:	81a3      	strh	r3, [r4, #12]
    26e8:	e7a7      	b.n	263a <__srefill_r+0x26>
    26ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    26ec:	2900      	cmp	r1, #0
    26ee:	d0cd      	beq.n	268c <__srefill_r+0x78>
    26f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    26f4:	4299      	cmp	r1, r3
    26f6:	d002      	beq.n	26fe <__srefill_r+0xea>
    26f8:	4628      	mov	r0, r5
    26fa:	f7ff f907 	bl	190c <_free_r>
    26fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2700:	6063      	str	r3, [r4, #4]
    2702:	2000      	movs	r0, #0
    2704:	6360      	str	r0, [r4, #52]	; 0x34
    2706:	2b00      	cmp	r3, #0
    2708:	d0c0      	beq.n	268c <__srefill_r+0x78>
    270a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    270c:	6023      	str	r3, [r4, #0]
    270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2710:	2000      	movs	r0, #0
    2712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2714:	00003314 	.word	0x00003314
    2718:	00003334 	.word	0x00003334
    271c:	000032f4 	.word	0x000032f4
    2720:	00003354 	.word	0x00003354
    2724:	00002601 	.word	0x00002601

00002728 <__sccl>:
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	780b      	ldrb	r3, [r1, #0]
    272c:	2b5e      	cmp	r3, #94	; 0x5e
    272e:	bf13      	iteet	ne
    2730:	1c4a      	addne	r2, r1, #1
    2732:	1c8a      	addeq	r2, r1, #2
    2734:	784b      	ldrbeq	r3, [r1, #1]
    2736:	2100      	movne	r1, #0
    2738:	bf08      	it	eq
    273a:	2101      	moveq	r1, #1
    273c:	1e44      	subs	r4, r0, #1
    273e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    2742:	f804 1f01 	strb.w	r1, [r4, #1]!
    2746:	42a5      	cmp	r5, r4
    2748:	d1fb      	bne.n	2742 <__sccl+0x1a>
    274a:	b913      	cbnz	r3, 2752 <__sccl+0x2a>
    274c:	3a01      	subs	r2, #1
    274e:	4610      	mov	r0, r2
    2750:	bd70      	pop	{r4, r5, r6, pc}
    2752:	f081 0401 	eor.w	r4, r1, #1
    2756:	54c4      	strb	r4, [r0, r3]
    2758:	4611      	mov	r1, r2
    275a:	780d      	ldrb	r5, [r1, #0]
    275c:	2d2d      	cmp	r5, #45	; 0x2d
    275e:	f101 0201 	add.w	r2, r1, #1
    2762:	d006      	beq.n	2772 <__sccl+0x4a>
    2764:	2d5d      	cmp	r5, #93	; 0x5d
    2766:	d0f2      	beq.n	274e <__sccl+0x26>
    2768:	b90d      	cbnz	r5, 276e <__sccl+0x46>
    276a:	460a      	mov	r2, r1
    276c:	e7ef      	b.n	274e <__sccl+0x26>
    276e:	462b      	mov	r3, r5
    2770:	e7f1      	b.n	2756 <__sccl+0x2e>
    2772:	784e      	ldrb	r6, [r1, #1]
    2774:	2e5d      	cmp	r6, #93	; 0x5d
    2776:	d0fa      	beq.n	276e <__sccl+0x46>
    2778:	42b3      	cmp	r3, r6
    277a:	dcf8      	bgt.n	276e <__sccl+0x46>
    277c:	3102      	adds	r1, #2
    277e:	3301      	adds	r3, #1
    2780:	429e      	cmp	r6, r3
    2782:	54c4      	strb	r4, [r0, r3]
    2784:	dcfb      	bgt.n	277e <__sccl+0x56>
    2786:	e7e8      	b.n	275a <__sccl+0x32>

00002788 <_strtol_l.isra.0>:
    2788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    278c:	4680      	mov	r8, r0
    278e:	4689      	mov	r9, r1
    2790:	4692      	mov	sl, r2
    2792:	461f      	mov	r7, r3
    2794:	468b      	mov	fp, r1
    2796:	465d      	mov	r5, fp
    2798:	980a      	ldr	r0, [sp, #40]	; 0x28
    279a:	f815 4b01 	ldrb.w	r4, [r5], #1
    279e:	f000 f9e5 	bl	2b6c <__locale_ctype_ptr_l>
    27a2:	4420      	add	r0, r4
    27a4:	7846      	ldrb	r6, [r0, #1]
    27a6:	f016 0608 	ands.w	r6, r6, #8
    27aa:	d10b      	bne.n	27c4 <_strtol_l.isra.0+0x3c>
    27ac:	2c2d      	cmp	r4, #45	; 0x2d
    27ae:	d10b      	bne.n	27c8 <_strtol_l.isra.0+0x40>
    27b0:	782c      	ldrb	r4, [r5, #0]
    27b2:	2601      	movs	r6, #1
    27b4:	f10b 0502 	add.w	r5, fp, #2
    27b8:	b167      	cbz	r7, 27d4 <_strtol_l.isra.0+0x4c>
    27ba:	2f10      	cmp	r7, #16
    27bc:	d114      	bne.n	27e8 <_strtol_l.isra.0+0x60>
    27be:	2c30      	cmp	r4, #48	; 0x30
    27c0:	d00a      	beq.n	27d8 <_strtol_l.isra.0+0x50>
    27c2:	e011      	b.n	27e8 <_strtol_l.isra.0+0x60>
    27c4:	46ab      	mov	fp, r5
    27c6:	e7e6      	b.n	2796 <_strtol_l.isra.0+0xe>
    27c8:	2c2b      	cmp	r4, #43	; 0x2b
    27ca:	bf04      	itt	eq
    27cc:	782c      	ldrbeq	r4, [r5, #0]
    27ce:	f10b 0502 	addeq.w	r5, fp, #2
    27d2:	e7f1      	b.n	27b8 <_strtol_l.isra.0+0x30>
    27d4:	2c30      	cmp	r4, #48	; 0x30
    27d6:	d127      	bne.n	2828 <_strtol_l.isra.0+0xa0>
    27d8:	782b      	ldrb	r3, [r5, #0]
    27da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    27de:	2b58      	cmp	r3, #88	; 0x58
    27e0:	d14b      	bne.n	287a <_strtol_l.isra.0+0xf2>
    27e2:	786c      	ldrb	r4, [r5, #1]
    27e4:	2710      	movs	r7, #16
    27e6:	3502      	adds	r5, #2
    27e8:	2e00      	cmp	r6, #0
    27ea:	bf0c      	ite	eq
    27ec:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    27f0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    27f4:	2200      	movs	r2, #0
    27f6:	fbb1 fef7 	udiv	lr, r1, r7
    27fa:	4610      	mov	r0, r2
    27fc:	fb07 1c1e 	mls	ip, r7, lr, r1
    2800:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2804:	2b09      	cmp	r3, #9
    2806:	d811      	bhi.n	282c <_strtol_l.isra.0+0xa4>
    2808:	461c      	mov	r4, r3
    280a:	42a7      	cmp	r7, r4
    280c:	dd1d      	ble.n	284a <_strtol_l.isra.0+0xc2>
    280e:	1c53      	adds	r3, r2, #1
    2810:	d007      	beq.n	2822 <_strtol_l.isra.0+0x9a>
    2812:	4586      	cmp	lr, r0
    2814:	d316      	bcc.n	2844 <_strtol_l.isra.0+0xbc>
    2816:	d101      	bne.n	281c <_strtol_l.isra.0+0x94>
    2818:	45a4      	cmp	ip, r4
    281a:	db13      	blt.n	2844 <_strtol_l.isra.0+0xbc>
    281c:	fb00 4007 	mla	r0, r0, r7, r4
    2820:	2201      	movs	r2, #1
    2822:	f815 4b01 	ldrb.w	r4, [r5], #1
    2826:	e7eb      	b.n	2800 <_strtol_l.isra.0+0x78>
    2828:	270a      	movs	r7, #10
    282a:	e7dd      	b.n	27e8 <_strtol_l.isra.0+0x60>
    282c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    2830:	2b19      	cmp	r3, #25
    2832:	d801      	bhi.n	2838 <_strtol_l.isra.0+0xb0>
    2834:	3c37      	subs	r4, #55	; 0x37
    2836:	e7e8      	b.n	280a <_strtol_l.isra.0+0x82>
    2838:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    283c:	2b19      	cmp	r3, #25
    283e:	d804      	bhi.n	284a <_strtol_l.isra.0+0xc2>
    2840:	3c57      	subs	r4, #87	; 0x57
    2842:	e7e2      	b.n	280a <_strtol_l.isra.0+0x82>
    2844:	f04f 32ff 	mov.w	r2, #4294967295
    2848:	e7eb      	b.n	2822 <_strtol_l.isra.0+0x9a>
    284a:	1c53      	adds	r3, r2, #1
    284c:	d108      	bne.n	2860 <_strtol_l.isra.0+0xd8>
    284e:	2322      	movs	r3, #34	; 0x22
    2850:	f8c8 3000 	str.w	r3, [r8]
    2854:	4608      	mov	r0, r1
    2856:	f1ba 0f00 	cmp.w	sl, #0
    285a:	d107      	bne.n	286c <_strtol_l.isra.0+0xe4>
    285c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2860:	b106      	cbz	r6, 2864 <_strtol_l.isra.0+0xdc>
    2862:	4240      	negs	r0, r0
    2864:	f1ba 0f00 	cmp.w	sl, #0
    2868:	d00c      	beq.n	2884 <_strtol_l.isra.0+0xfc>
    286a:	b122      	cbz	r2, 2876 <_strtol_l.isra.0+0xee>
    286c:	3d01      	subs	r5, #1
    286e:	f8ca 5000 	str.w	r5, [sl]
    2872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2876:	464d      	mov	r5, r9
    2878:	e7f9      	b.n	286e <_strtol_l.isra.0+0xe6>
    287a:	2430      	movs	r4, #48	; 0x30
    287c:	2f00      	cmp	r7, #0
    287e:	d1b3      	bne.n	27e8 <_strtol_l.isra.0+0x60>
    2880:	2708      	movs	r7, #8
    2882:	e7b1      	b.n	27e8 <_strtol_l.isra.0+0x60>
    2884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002888 <_strtol_r>:
    2888:	b537      	push	{r0, r1, r2, r4, r5, lr}
    288a:	4c06      	ldr	r4, [pc, #24]	; (28a4 <_strtol_r+0x1c>)
    288c:	4d06      	ldr	r5, [pc, #24]	; (28a8 <_strtol_r+0x20>)
    288e:	6824      	ldr	r4, [r4, #0]
    2890:	6a24      	ldr	r4, [r4, #32]
    2892:	2c00      	cmp	r4, #0
    2894:	bf08      	it	eq
    2896:	462c      	moveq	r4, r5
    2898:	9400      	str	r4, [sp, #0]
    289a:	f7ff ff75 	bl	2788 <_strtol_l.isra.0>
    289e:	b003      	add	sp, #12
    28a0:	bd30      	pop	{r4, r5, pc}
    28a2:	bf00      	nop
    28a4:	20000008 	.word	0x20000008
    28a8:	2000006c 	.word	0x2000006c

000028ac <_strtoul_l.isra.0>:
    28ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28b0:	4680      	mov	r8, r0
    28b2:	4689      	mov	r9, r1
    28b4:	4692      	mov	sl, r2
    28b6:	461e      	mov	r6, r3
    28b8:	460f      	mov	r7, r1
    28ba:	463d      	mov	r5, r7
    28bc:	9808      	ldr	r0, [sp, #32]
    28be:	f815 4b01 	ldrb.w	r4, [r5], #1
    28c2:	f000 f953 	bl	2b6c <__locale_ctype_ptr_l>
    28c6:	4420      	add	r0, r4
    28c8:	7843      	ldrb	r3, [r0, #1]
    28ca:	f013 0308 	ands.w	r3, r3, #8
    28ce:	d10a      	bne.n	28e6 <_strtoul_l.isra.0+0x3a>
    28d0:	2c2d      	cmp	r4, #45	; 0x2d
    28d2:	d10a      	bne.n	28ea <_strtoul_l.isra.0+0x3e>
    28d4:	782c      	ldrb	r4, [r5, #0]
    28d6:	2301      	movs	r3, #1
    28d8:	1cbd      	adds	r5, r7, #2
    28da:	b15e      	cbz	r6, 28f4 <_strtoul_l.isra.0+0x48>
    28dc:	2e10      	cmp	r6, #16
    28de:	d113      	bne.n	2908 <_strtoul_l.isra.0+0x5c>
    28e0:	2c30      	cmp	r4, #48	; 0x30
    28e2:	d009      	beq.n	28f8 <_strtoul_l.isra.0+0x4c>
    28e4:	e010      	b.n	2908 <_strtoul_l.isra.0+0x5c>
    28e6:	462f      	mov	r7, r5
    28e8:	e7e7      	b.n	28ba <_strtoul_l.isra.0+0xe>
    28ea:	2c2b      	cmp	r4, #43	; 0x2b
    28ec:	bf04      	itt	eq
    28ee:	782c      	ldrbeq	r4, [r5, #0]
    28f0:	1cbd      	addeq	r5, r7, #2
    28f2:	e7f2      	b.n	28da <_strtoul_l.isra.0+0x2e>
    28f4:	2c30      	cmp	r4, #48	; 0x30
    28f6:	d125      	bne.n	2944 <_strtoul_l.isra.0+0x98>
    28f8:	782a      	ldrb	r2, [r5, #0]
    28fa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    28fe:	2a58      	cmp	r2, #88	; 0x58
    2900:	d14a      	bne.n	2998 <_strtoul_l.isra.0+0xec>
    2902:	786c      	ldrb	r4, [r5, #1]
    2904:	2610      	movs	r6, #16
    2906:	3502      	adds	r5, #2
    2908:	f04f 31ff 	mov.w	r1, #4294967295
    290c:	2700      	movs	r7, #0
    290e:	fbb1 f1f6 	udiv	r1, r1, r6
    2912:	fb06 fe01 	mul.w	lr, r6, r1
    2916:	ea6f 0e0e 	mvn.w	lr, lr
    291a:	4638      	mov	r0, r7
    291c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    2920:	2a09      	cmp	r2, #9
    2922:	d811      	bhi.n	2948 <_strtoul_l.isra.0+0x9c>
    2924:	4614      	mov	r4, r2
    2926:	42a6      	cmp	r6, r4
    2928:	dd1d      	ble.n	2966 <_strtoul_l.isra.0+0xba>
    292a:	2f00      	cmp	r7, #0
    292c:	db18      	blt.n	2960 <_strtoul_l.isra.0+0xb4>
    292e:	4281      	cmp	r1, r0
    2930:	d316      	bcc.n	2960 <_strtoul_l.isra.0+0xb4>
    2932:	d101      	bne.n	2938 <_strtoul_l.isra.0+0x8c>
    2934:	45a6      	cmp	lr, r4
    2936:	db13      	blt.n	2960 <_strtoul_l.isra.0+0xb4>
    2938:	fb00 4006 	mla	r0, r0, r6, r4
    293c:	2701      	movs	r7, #1
    293e:	f815 4b01 	ldrb.w	r4, [r5], #1
    2942:	e7eb      	b.n	291c <_strtoul_l.isra.0+0x70>
    2944:	260a      	movs	r6, #10
    2946:	e7df      	b.n	2908 <_strtoul_l.isra.0+0x5c>
    2948:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    294c:	2a19      	cmp	r2, #25
    294e:	d801      	bhi.n	2954 <_strtoul_l.isra.0+0xa8>
    2950:	3c37      	subs	r4, #55	; 0x37
    2952:	e7e8      	b.n	2926 <_strtoul_l.isra.0+0x7a>
    2954:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    2958:	2a19      	cmp	r2, #25
    295a:	d804      	bhi.n	2966 <_strtoul_l.isra.0+0xba>
    295c:	3c57      	subs	r4, #87	; 0x57
    295e:	e7e2      	b.n	2926 <_strtoul_l.isra.0+0x7a>
    2960:	f04f 37ff 	mov.w	r7, #4294967295
    2964:	e7eb      	b.n	293e <_strtoul_l.isra.0+0x92>
    2966:	2f00      	cmp	r7, #0
    2968:	da09      	bge.n	297e <_strtoul_l.isra.0+0xd2>
    296a:	2322      	movs	r3, #34	; 0x22
    296c:	f8c8 3000 	str.w	r3, [r8]
    2970:	f04f 30ff 	mov.w	r0, #4294967295
    2974:	f1ba 0f00 	cmp.w	sl, #0
    2978:	d107      	bne.n	298a <_strtoul_l.isra.0+0xde>
    297a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    297e:	b103      	cbz	r3, 2982 <_strtoul_l.isra.0+0xd6>
    2980:	4240      	negs	r0, r0
    2982:	f1ba 0f00 	cmp.w	sl, #0
    2986:	d00c      	beq.n	29a2 <_strtoul_l.isra.0+0xf6>
    2988:	b127      	cbz	r7, 2994 <_strtoul_l.isra.0+0xe8>
    298a:	3d01      	subs	r5, #1
    298c:	f8ca 5000 	str.w	r5, [sl]
    2990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2994:	464d      	mov	r5, r9
    2996:	e7f9      	b.n	298c <_strtoul_l.isra.0+0xe0>
    2998:	2430      	movs	r4, #48	; 0x30
    299a:	2e00      	cmp	r6, #0
    299c:	d1b4      	bne.n	2908 <_strtoul_l.isra.0+0x5c>
    299e:	2608      	movs	r6, #8
    29a0:	e7b2      	b.n	2908 <_strtoul_l.isra.0+0x5c>
    29a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000029a8 <_strtoul_r>:
    29a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    29aa:	4c06      	ldr	r4, [pc, #24]	; (29c4 <_strtoul_r+0x1c>)
    29ac:	4d06      	ldr	r5, [pc, #24]	; (29c8 <_strtoul_r+0x20>)
    29ae:	6824      	ldr	r4, [r4, #0]
    29b0:	6a24      	ldr	r4, [r4, #32]
    29b2:	2c00      	cmp	r4, #0
    29b4:	bf08      	it	eq
    29b6:	462c      	moveq	r4, r5
    29b8:	9400      	str	r4, [sp, #0]
    29ba:	f7ff ff77 	bl	28ac <_strtoul_l.isra.0>
    29be:	b003      	add	sp, #12
    29c0:	bd30      	pop	{r4, r5, pc}
    29c2:	bf00      	nop
    29c4:	20000008 	.word	0x20000008
    29c8:	2000006c 	.word	0x2000006c

000029cc <__submore>:
    29cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29d0:	460c      	mov	r4, r1
    29d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
    29d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    29d8:	4299      	cmp	r1, r3
    29da:	d11e      	bne.n	2a1a <__submore+0x4e>
    29dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    29e0:	f7fe ffe2 	bl	19a8 <_malloc_r>
    29e4:	b918      	cbnz	r0, 29ee <__submore+0x22>
    29e6:	f04f 30ff 	mov.w	r0, #4294967295
    29ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
    29f2:	63a3      	str	r3, [r4, #56]	; 0x38
    29f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    29f8:	6360      	str	r0, [r4, #52]	; 0x34
    29fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    29fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    2a02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    2a06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2a0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    2a0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    2a12:	6020      	str	r0, [r4, #0]
    2a14:	2000      	movs	r0, #0
    2a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    2a1c:	0077      	lsls	r7, r6, #1
    2a1e:	463a      	mov	r2, r7
    2a20:	f000 f929 	bl	2c76 <_realloc_r>
    2a24:	4605      	mov	r5, r0
    2a26:	2800      	cmp	r0, #0
    2a28:	d0dd      	beq.n	29e6 <__submore+0x1a>
    2a2a:	eb00 0806 	add.w	r8, r0, r6
    2a2e:	4601      	mov	r1, r0
    2a30:	4632      	mov	r2, r6
    2a32:	4640      	mov	r0, r8
    2a34:	f000 f914 	bl	2c60 <memcpy>
    2a38:	f8c4 8000 	str.w	r8, [r4]
    2a3c:	6365      	str	r5, [r4, #52]	; 0x34
    2a3e:	63a7      	str	r7, [r4, #56]	; 0x38
    2a40:	e7e8      	b.n	2a14 <__submore+0x48>
	...

00002a44 <_ungetc_r>:
    2a44:	1c4b      	adds	r3, r1, #1
    2a46:	b570      	push	{r4, r5, r6, lr}
    2a48:	4606      	mov	r6, r0
    2a4a:	460d      	mov	r5, r1
    2a4c:	4614      	mov	r4, r2
    2a4e:	d103      	bne.n	2a58 <_ungetc_r+0x14>
    2a50:	f04f 35ff 	mov.w	r5, #4294967295
    2a54:	4628      	mov	r0, r5
    2a56:	bd70      	pop	{r4, r5, r6, pc}
    2a58:	b118      	cbz	r0, 2a62 <_ungetc_r+0x1e>
    2a5a:	6983      	ldr	r3, [r0, #24]
    2a5c:	b90b      	cbnz	r3, 2a62 <_ungetc_r+0x1e>
    2a5e:	f7fe fe83 	bl	1768 <__sinit>
    2a62:	4b2e      	ldr	r3, [pc, #184]	; (2b1c <_ungetc_r+0xd8>)
    2a64:	429c      	cmp	r4, r3
    2a66:	d12c      	bne.n	2ac2 <_ungetc_r+0x7e>
    2a68:	6874      	ldr	r4, [r6, #4]
    2a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2a6e:	f023 0320 	bic.w	r3, r3, #32
    2a72:	81a3      	strh	r3, [r4, #12]
    2a74:	b29b      	uxth	r3, r3
    2a76:	0759      	lsls	r1, r3, #29
    2a78:	d413      	bmi.n	2aa2 <_ungetc_r+0x5e>
    2a7a:	06da      	lsls	r2, r3, #27
    2a7c:	d5e8      	bpl.n	2a50 <_ungetc_r+0xc>
    2a7e:	071b      	lsls	r3, r3, #28
    2a80:	d50b      	bpl.n	2a9a <_ungetc_r+0x56>
    2a82:	4621      	mov	r1, r4
    2a84:	4630      	mov	r0, r6
    2a86:	f7fe fdf3 	bl	1670 <_fflush_r>
    2a8a:	2800      	cmp	r0, #0
    2a8c:	d1e0      	bne.n	2a50 <_ungetc_r+0xc>
    2a8e:	89a3      	ldrh	r3, [r4, #12]
    2a90:	60a0      	str	r0, [r4, #8]
    2a92:	f023 0308 	bic.w	r3, r3, #8
    2a96:	81a3      	strh	r3, [r4, #12]
    2a98:	61a0      	str	r0, [r4, #24]
    2a9a:	89a3      	ldrh	r3, [r4, #12]
    2a9c:	f043 0304 	orr.w	r3, r3, #4
    2aa0:	81a3      	strh	r3, [r4, #12]
    2aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2aa4:	6862      	ldr	r2, [r4, #4]
    2aa6:	b2ed      	uxtb	r5, r5
    2aa8:	b1e3      	cbz	r3, 2ae4 <_ungetc_r+0xa0>
    2aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2aac:	429a      	cmp	r2, r3
    2aae:	da12      	bge.n	2ad6 <_ungetc_r+0x92>
    2ab0:	6823      	ldr	r3, [r4, #0]
    2ab2:	1e5a      	subs	r2, r3, #1
    2ab4:	6022      	str	r2, [r4, #0]
    2ab6:	f803 5c01 	strb.w	r5, [r3, #-1]
    2aba:	6863      	ldr	r3, [r4, #4]
    2abc:	3301      	adds	r3, #1
    2abe:	6063      	str	r3, [r4, #4]
    2ac0:	e7c8      	b.n	2a54 <_ungetc_r+0x10>
    2ac2:	4b17      	ldr	r3, [pc, #92]	; (2b20 <_ungetc_r+0xdc>)
    2ac4:	429c      	cmp	r4, r3
    2ac6:	d101      	bne.n	2acc <_ungetc_r+0x88>
    2ac8:	68b4      	ldr	r4, [r6, #8]
    2aca:	e7ce      	b.n	2a6a <_ungetc_r+0x26>
    2acc:	4b15      	ldr	r3, [pc, #84]	; (2b24 <_ungetc_r+0xe0>)
    2ace:	429c      	cmp	r4, r3
    2ad0:	bf08      	it	eq
    2ad2:	68f4      	ldreq	r4, [r6, #12]
    2ad4:	e7c9      	b.n	2a6a <_ungetc_r+0x26>
    2ad6:	4621      	mov	r1, r4
    2ad8:	4630      	mov	r0, r6
    2ada:	f7ff ff77 	bl	29cc <__submore>
    2ade:	2800      	cmp	r0, #0
    2ae0:	d0e6      	beq.n	2ab0 <_ungetc_r+0x6c>
    2ae2:	e7b5      	b.n	2a50 <_ungetc_r+0xc>
    2ae4:	6921      	ldr	r1, [r4, #16]
    2ae6:	6823      	ldr	r3, [r4, #0]
    2ae8:	b151      	cbz	r1, 2b00 <_ungetc_r+0xbc>
    2aea:	4299      	cmp	r1, r3
    2aec:	d208      	bcs.n	2b00 <_ungetc_r+0xbc>
    2aee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    2af2:	428d      	cmp	r5, r1
    2af4:	d104      	bne.n	2b00 <_ungetc_r+0xbc>
    2af6:	3b01      	subs	r3, #1
    2af8:	3201      	adds	r2, #1
    2afa:	6023      	str	r3, [r4, #0]
    2afc:	6062      	str	r2, [r4, #4]
    2afe:	e7a9      	b.n	2a54 <_ungetc_r+0x10>
    2b00:	63e3      	str	r3, [r4, #60]	; 0x3c
    2b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2b06:	6363      	str	r3, [r4, #52]	; 0x34
    2b08:	2303      	movs	r3, #3
    2b0a:	63a3      	str	r3, [r4, #56]	; 0x38
    2b0c:	4623      	mov	r3, r4
    2b0e:	6422      	str	r2, [r4, #64]	; 0x40
    2b10:	f803 5f46 	strb.w	r5, [r3, #70]!
    2b14:	6023      	str	r3, [r4, #0]
    2b16:	2301      	movs	r3, #1
    2b18:	e7d1      	b.n	2abe <_ungetc_r+0x7a>
    2b1a:	bf00      	nop
    2b1c:	00003314 	.word	0x00003314
    2b20:	00003334 	.word	0x00003334
    2b24:	000032f4 	.word	0x000032f4

00002b28 <_fstat_r>:
    2b28:	b538      	push	{r3, r4, r5, lr}
    2b2a:	4c07      	ldr	r4, [pc, #28]	; (2b48 <_fstat_r+0x20>)
    2b2c:	2300      	movs	r3, #0
    2b2e:	4605      	mov	r5, r0
    2b30:	4608      	mov	r0, r1
    2b32:	4611      	mov	r1, r2
    2b34:	6023      	str	r3, [r4, #0]
    2b36:	f7fd fe7e 	bl	836 <_fstat>
    2b3a:	1c43      	adds	r3, r0, #1
    2b3c:	d102      	bne.n	2b44 <_fstat_r+0x1c>
    2b3e:	6823      	ldr	r3, [r4, #0]
    2b40:	b103      	cbz	r3, 2b44 <_fstat_r+0x1c>
    2b42:	602b      	str	r3, [r5, #0]
    2b44:	bd38      	pop	{r3, r4, r5, pc}
    2b46:	bf00      	nop
    2b48:	20000234 	.word	0x20000234

00002b4c <_isatty_r>:
    2b4c:	b538      	push	{r3, r4, r5, lr}
    2b4e:	4c06      	ldr	r4, [pc, #24]	; (2b68 <_isatty_r+0x1c>)
    2b50:	2300      	movs	r3, #0
    2b52:	4605      	mov	r5, r0
    2b54:	4608      	mov	r0, r1
    2b56:	6023      	str	r3, [r4, #0]
    2b58:	f7fd fe72 	bl	840 <_isatty>
    2b5c:	1c43      	adds	r3, r0, #1
    2b5e:	d102      	bne.n	2b66 <_isatty_r+0x1a>
    2b60:	6823      	ldr	r3, [r4, #0]
    2b62:	b103      	cbz	r3, 2b66 <_isatty_r+0x1a>
    2b64:	602b      	str	r3, [r5, #0]
    2b66:	bd38      	pop	{r3, r4, r5, pc}
    2b68:	20000234 	.word	0x20000234

00002b6c <__locale_ctype_ptr_l>:
    2b6c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    2b70:	4770      	bx	lr
	...

00002b74 <__locale_ctype_ptr>:
    2b74:	4b04      	ldr	r3, [pc, #16]	; (2b88 <__locale_ctype_ptr+0x14>)
    2b76:	4a05      	ldr	r2, [pc, #20]	; (2b8c <__locale_ctype_ptr+0x18>)
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	6a1b      	ldr	r3, [r3, #32]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	bf08      	it	eq
    2b80:	4613      	moveq	r3, r2
    2b82:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2b86:	4770      	bx	lr
    2b88:	20000008 	.word	0x20000008
    2b8c:	2000006c 	.word	0x2000006c

00002b90 <__ascii_mbtowc>:
    2b90:	b082      	sub	sp, #8
    2b92:	b901      	cbnz	r1, 2b96 <__ascii_mbtowc+0x6>
    2b94:	a901      	add	r1, sp, #4
    2b96:	b142      	cbz	r2, 2baa <__ascii_mbtowc+0x1a>
    2b98:	b14b      	cbz	r3, 2bae <__ascii_mbtowc+0x1e>
    2b9a:	7813      	ldrb	r3, [r2, #0]
    2b9c:	600b      	str	r3, [r1, #0]
    2b9e:	7812      	ldrb	r2, [r2, #0]
    2ba0:	1c10      	adds	r0, r2, #0
    2ba2:	bf18      	it	ne
    2ba4:	2001      	movne	r0, #1
    2ba6:	b002      	add	sp, #8
    2ba8:	4770      	bx	lr
    2baa:	4610      	mov	r0, r2
    2bac:	e7fb      	b.n	2ba6 <__ascii_mbtowc+0x16>
    2bae:	f06f 0001 	mvn.w	r0, #1
    2bb2:	e7f8      	b.n	2ba6 <__ascii_mbtowc+0x16>
	...

00002bc0 <memchr>:
    2bc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2bc4:	2a10      	cmp	r2, #16
    2bc6:	db2b      	blt.n	2c20 <memchr+0x60>
    2bc8:	f010 0f07 	tst.w	r0, #7
    2bcc:	d008      	beq.n	2be0 <memchr+0x20>
    2bce:	f810 3b01 	ldrb.w	r3, [r0], #1
    2bd2:	3a01      	subs	r2, #1
    2bd4:	428b      	cmp	r3, r1
    2bd6:	d02d      	beq.n	2c34 <memchr+0x74>
    2bd8:	f010 0f07 	tst.w	r0, #7
    2bdc:	b342      	cbz	r2, 2c30 <memchr+0x70>
    2bde:	d1f6      	bne.n	2bce <memchr+0xe>
    2be0:	b4f0      	push	{r4, r5, r6, r7}
    2be2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    2be6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    2bea:	f022 0407 	bic.w	r4, r2, #7
    2bee:	f07f 0700 	mvns.w	r7, #0
    2bf2:	2300      	movs	r3, #0
    2bf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    2bf8:	3c08      	subs	r4, #8
    2bfa:	ea85 0501 	eor.w	r5, r5, r1
    2bfe:	ea86 0601 	eor.w	r6, r6, r1
    2c02:	fa85 f547 	uadd8	r5, r5, r7
    2c06:	faa3 f587 	sel	r5, r3, r7
    2c0a:	fa86 f647 	uadd8	r6, r6, r7
    2c0e:	faa5 f687 	sel	r6, r5, r7
    2c12:	b98e      	cbnz	r6, 2c38 <memchr+0x78>
    2c14:	d1ee      	bne.n	2bf4 <memchr+0x34>
    2c16:	bcf0      	pop	{r4, r5, r6, r7}
    2c18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2c1c:	f002 0207 	and.w	r2, r2, #7
    2c20:	b132      	cbz	r2, 2c30 <memchr+0x70>
    2c22:	f810 3b01 	ldrb.w	r3, [r0], #1
    2c26:	3a01      	subs	r2, #1
    2c28:	ea83 0301 	eor.w	r3, r3, r1
    2c2c:	b113      	cbz	r3, 2c34 <memchr+0x74>
    2c2e:	d1f8      	bne.n	2c22 <memchr+0x62>
    2c30:	2000      	movs	r0, #0
    2c32:	4770      	bx	lr
    2c34:	3801      	subs	r0, #1
    2c36:	4770      	bx	lr
    2c38:	2d00      	cmp	r5, #0
    2c3a:	bf06      	itte	eq
    2c3c:	4635      	moveq	r5, r6
    2c3e:	3803      	subeq	r0, #3
    2c40:	3807      	subne	r0, #7
    2c42:	f015 0f01 	tst.w	r5, #1
    2c46:	d107      	bne.n	2c58 <memchr+0x98>
    2c48:	3001      	adds	r0, #1
    2c4a:	f415 7f80 	tst.w	r5, #256	; 0x100
    2c4e:	bf02      	ittt	eq
    2c50:	3001      	addeq	r0, #1
    2c52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    2c56:	3001      	addeq	r0, #1
    2c58:	bcf0      	pop	{r4, r5, r6, r7}
    2c5a:	3801      	subs	r0, #1
    2c5c:	4770      	bx	lr
    2c5e:	bf00      	nop

00002c60 <memcpy>:
    2c60:	b510      	push	{r4, lr}
    2c62:	1e43      	subs	r3, r0, #1
    2c64:	440a      	add	r2, r1
    2c66:	4291      	cmp	r1, r2
    2c68:	d100      	bne.n	2c6c <memcpy+0xc>
    2c6a:	bd10      	pop	{r4, pc}
    2c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
    2c70:	f803 4f01 	strb.w	r4, [r3, #1]!
    2c74:	e7f7      	b.n	2c66 <memcpy+0x6>

00002c76 <_realloc_r>:
    2c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c78:	4607      	mov	r7, r0
    2c7a:	4614      	mov	r4, r2
    2c7c:	460e      	mov	r6, r1
    2c7e:	b921      	cbnz	r1, 2c8a <_realloc_r+0x14>
    2c80:	4611      	mov	r1, r2
    2c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2c86:	f7fe be8f 	b.w	19a8 <_malloc_r>
    2c8a:	b922      	cbnz	r2, 2c96 <_realloc_r+0x20>
    2c8c:	f7fe fe3e 	bl	190c <_free_r>
    2c90:	4625      	mov	r5, r4
    2c92:	4628      	mov	r0, r5
    2c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c96:	f000 f821 	bl	2cdc <_malloc_usable_size_r>
    2c9a:	4284      	cmp	r4, r0
    2c9c:	d90f      	bls.n	2cbe <_realloc_r+0x48>
    2c9e:	4621      	mov	r1, r4
    2ca0:	4638      	mov	r0, r7
    2ca2:	f7fe fe81 	bl	19a8 <_malloc_r>
    2ca6:	4605      	mov	r5, r0
    2ca8:	2800      	cmp	r0, #0
    2caa:	d0f2      	beq.n	2c92 <_realloc_r+0x1c>
    2cac:	4631      	mov	r1, r6
    2cae:	4622      	mov	r2, r4
    2cb0:	f7ff ffd6 	bl	2c60 <memcpy>
    2cb4:	4631      	mov	r1, r6
    2cb6:	4638      	mov	r0, r7
    2cb8:	f7fe fe28 	bl	190c <_free_r>
    2cbc:	e7e9      	b.n	2c92 <_realloc_r+0x1c>
    2cbe:	4635      	mov	r5, r6
    2cc0:	e7e7      	b.n	2c92 <_realloc_r+0x1c>

00002cc2 <__ascii_wctomb>:
    2cc2:	b149      	cbz	r1, 2cd8 <__ascii_wctomb+0x16>
    2cc4:	2aff      	cmp	r2, #255	; 0xff
    2cc6:	bf85      	ittet	hi
    2cc8:	238a      	movhi	r3, #138	; 0x8a
    2cca:	6003      	strhi	r3, [r0, #0]
    2ccc:	700a      	strbls	r2, [r1, #0]
    2cce:	f04f 30ff 	movhi.w	r0, #4294967295
    2cd2:	bf98      	it	ls
    2cd4:	2001      	movls	r0, #1
    2cd6:	4770      	bx	lr
    2cd8:	4608      	mov	r0, r1
    2cda:	4770      	bx	lr

00002cdc <_malloc_usable_size_r>:
    2cdc:	f851 0c04 	ldr.w	r0, [r1, #-4]
    2ce0:	2800      	cmp	r0, #0
    2ce2:	f1a0 0004 	sub.w	r0, r0, #4
    2ce6:	bfbc      	itt	lt
    2ce8:	580b      	ldrlt	r3, [r1, r0]
    2cea:	18c0      	addlt	r0, r0, r3
    2cec:	4770      	bx	lr
    2cee:	0000      	movs	r0, r0
    2cf0:	682f2e2e 	.word	0x682f2e2e
    2cf4:	732f6c61 	.word	0x732f6c61
    2cf8:	682f6372 	.word	0x682f6372
    2cfc:	695f6c61 	.word	0x695f6c61
    2d00:	00632e6f 	.word	0x00632e6f
    2d04:	682f2e2e 	.word	0x682f2e2e
    2d08:	732f6c61 	.word	0x732f6c61
    2d0c:	682f6372 	.word	0x682f6372
    2d10:	755f6c61 	.word	0x755f6c61
    2d14:	74726173 	.word	0x74726173
    2d18:	6e79735f 	.word	0x6e79735f
    2d1c:	00632e63 	.word	0x00632e63

00002d20 <_map>:
    2d20:	0000000f 0000003f 682f2e2e 652f6c70     ....?...../hpl/e
    2d30:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    2d40:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    2d50:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00002d60 <_i2cms>:
	...
    2d78:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2d88:	65735f6c 6d6f6372 0000632e 7a484b31     l_sercom.c..1KHz
    2d98:	4d575020 76615720 726f6665 756f206d      PWM Waveform ou
    2da8:	74757074 61766120 62616c69 6f20656c     tput available o
    2db8:	4f57206e 205d305b 0d4e4950 00000000     n WO[0] PIN.....
    2dc8:	63726943 72616c75 66754220 20726566     Circular Buffer 
    2dd8:	204d5750 65766157 6d726f66 74756f20     PWM Waveform out
    2de8:	20747570 69617661 6c62616c 6e6f2065     put available on
    2df8:	5b4f5720 50205d30 000d4e49 64616544      WO[0] PIN..Dead
    2e08:	6d695420 6e692065 74726573 50206465      Time inserted P
    2e18:	57204d57 66657661 206d726f 7074756f     WM Waveform outp
    2e28:	61207475 6c696176 656c6261 206e6f20     ut available on 
    2e38:	305b4f57 57202c5d 5d315b4f 4f57202c     WO[0], WO[1], WO
    2e48:	2c5d325b 5b4f5720 202c5d34 355b4f57     [2], WO[4], WO[5
    2e58:	6e61205d 4f572064 205d365b 734e4950     ] and WO[6] PINs
    2e68:	0000000d 204d5750 65766157 6d726f66     ....PWM Waveform
    2e78:	74756f20 20747570 69617661 6c62616c      output availabl
    2e88:	6e6f2065 5b4f5720 61205d30 5720646e     e on WO[0] and W
    2e98:	5d345b4f 4e495020 0000000d 73657250     O[4] PIN....Pres
    2ea8:	57532073 75422030 6e6f7474 206e6f20     s SW0 Button on 
    2eb8:	616c5058 64656e69 4f525020 616f4220     XPlained PRO Boa
    2ec8:	66206472 7320726f 70706177 20676e69     rd for swapping 
    2ed8:	204d5750 65766157 6d726f66 74656220     PWM Waveform bet
    2ee8:	6e656577 5b4f5720 61205d30 5720646e     ween WO[0] and W
    2ef8:	5d345b4f 4e495020 00000d73 73657250     O[4] PINs...Pres
    2f08:	57532073 75422030 6e6f7474 206e6f20     s SW0 Button on 
    2f18:	616c5058 64656e69 4f525020 616f4220     XPlained PRO Boa
    2f28:	66206472 6920726f 7265766e 676e6974     rd for inverting
    2f38:	4d575020 76615720 726f6665 000d206d      PWM Waveform ..
    2f48:	20434354 74746150 206e7265 656e6547     TCC Pattern Gene
    2f58:	69746172 50206e6f 57204d57 66657661     ration PWM Wavef
    2f68:	206d726f 7074756f 61207475 6c696176     orm output avail
    2f78:	656c6261 206e6f20 305b4f57 57202c5d     able on WO[0], W
    2f88:	5d315b4f 4f57202c 205d325b 20646e61     O[1], WO[2] and 
    2f98:	335b4f57 4950205d 000d734e 20434354     WO[3] PINs..TCC 
    2fa8:	504d4152 65662032 72757461 57502065     RAMP2 feature PW
    2fb8:	6157204d 6f666576 4f206d72 75707475     M Waveform Outpu
    2fc8:	76612074 616c6961 20656c62 57206e6f     t available on W
    2fd8:	5d305b4f 646e6120 5b4f5720 50205d31     O[0] and WO[1] P
    2fe8:	0d734e49 00000000 20434354 504d4152     INs.....TCC RAMP
    2ff8:	66204132 75746165 50206572 57204d57     2A feature PWM W
    3008:	66657661 206d726f 7074754f 61207475     aveform Output a
    3018:	6c696176 656c6261 206e6f20 305b4f57     vailable on WO[0
    3028:	6e61205d 4f572064 205d315b 734e4950     ] and WO[1] PINs
    3038:	0000000d 20434354 6c617544 6f6c5320     ....TCC Dual Slo
    3048:	43206570 65746e65 6c412072 656e6769     pe Center Aligne
    3058:	57502064 6157204d 6f666576 4f206d72     d PWM Waveform O
    3068:	75707475 76612074 616c6961 20656c62     utput available 
    3078:	57206e6f 5d305b4f 4f57202c 205d315b     on WO[0], WO[1] 
    3088:	20646e61 325b4f57 4950205d 000d734e     and WO[2] PINs..
    3098:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
    30a8:	2a2a2a2a 2a2a2a2a 4354202a 57502043     ********* TCC PW
    30b8:	7845204d 6c706d61 2a207365 2a2a2a2a     M Examples *****
    30c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a0a0d2a     *************...
    30d8:	31202e31 207a484b 204d5750 65766157     1. 1KHz PWM Wave
    30e8:	6d726f66 69737520 5420676e 73204343     form using TCC s
    30f8:	6c676e69 6c732065 2065706f 204d5750     ingle slope PWM 
    3108:	65646f6d 320a0d20 5750202e 6157204d     mode ..2. PWM Wa
    3118:	6f666576 75206d72 676e6973 43435420     veform using TCC
    3128:	72694320 616c7563 75622072 72656666      Circular buffer
    3138:	61656620 65727574 330a0d20 5750202e      feature ..3. PW
    3148:	6157204d 6f666576 75206d72 676e6973     M Waveform using
    3158:	43435420 61656420 69742064 6920656d      TCC dead time i
    3168:	7265736e 6e6f6974 61656620 65727574     nsertion feature
    3178:	340a0d20 7753202e 50207061 57204d57      ..4. Swap PWM W
    3188:	66657661 736d726f 69737520 5420676e     aveforms using T
    3198:	73204343 20706177 74616566 20657275     CC swap feature 
    31a8:	2e350a0d 766e4920 20747265 204d5750     ..5. Invert PWM 
    31b8:	65766157 6d726f66 73752073 20676e69     Waveforms using 
    31c8:	20434354 7074756f 49207475 7265766e     TCC output Inver
    31d8:	65662074 72757461 0a0d2065 42202e36     t feature ..6. B
    31e8:	6c6f7069 53207261 70706574 4d207265     ipolar Stepper M
    31f8:	726f746f 74756f20 20747570 65766157     otor output Wave
    3208:	6d726f66 74617020 6e726574 6e656720     form pattern gen
    3218:	74617265 206e6f69 2e370a0d 4d575020     eration ..7. PWM
    3228:	76615720 726f6665 7375206d 20676e69      Waveform using 
    3238:	20434354 504d4152 65662032 72757461     TCC RAMP2 featur
    3248:	0a0d2065 50202e38 57204d57 66657661     e ..8. PWM Wavef
    3258:	206d726f 6e697375 43542067 41522043     orm using TCC RA
    3268:	4132504d 61656620 65727574 390a0d20     MP2A feature ..9
    3278:	5750202e 6157204d 6f666576 75206d72     . PWM Waveform u
    3288:	676e6973 69737520 4420676e 206c6175     sing using Dual 
    3298:	706f6c73 57502065 6f6d204d 0d206564     slope PWM mode .
    32a8:	0000000a 2a2a0a0d 2a2a2a2a 2a2a2a2a     ......**********
    32b8:	2a2a2a2a 2a2a2a2a 50202a2a 7361656c     ********** Pleas
    32c8:	6e452065 20726574 696f6843 2a206563     e Enter Choice *
    32d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
    32e8:	0d2a2a2a 0000000a 00006425              ***.....%d..

000032f4 <__sf_fake_stderr>:
	...

00003314 <__sf_fake_stdin>:
	...

00003334 <__sf_fake_stdout>:
	...

00003354 <_global_impure_ptr>:
    3354:	2000000c 004c6c68 0000337a 0000337d     ... hlL.z3..}3..
    3364:	00003380 61462d41 3938662d 33323130     .3..A-Fa-f890123
    3374:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    3384:	534f5000 2e005849 20200000                       .POSIX...

0000338d <_ctype_>:
    338d:	20202000 20202020 28282020 20282828     .         ((((( 
    339d:	20202020 20202020 20202020 20202020                     
    33ad:	10108820 10101010 10101010 10101010      ...............
    33bd:	04040410 04040404 10040404 10101010     ................
    33cd:	41411010 41414141 01010101 01010101     ..AAAAAA........
    33dd:	01010101 01010101 01010101 10101010     ................
    33ed:	42421010 42424242 02020202 02020202     ..BBBBBB........
    33fd:	02020202 02020202 02020202 10101010     ................
    340d:	00000020 00000000 00000000 00000000      ...............
	...

00003490 <_init>:
    3490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3492:	bf00      	nop
    3494:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3496:	bc08      	pop	{r3}
    3498:	469e      	mov	lr, r3
    349a:	4770      	bx	lr

0000349c <__init_array_start>:
    349c:	00000289 	.word	0x00000289

000034a0 <_fini>:
    34a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34a2:	bf00      	nop
    34a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34a6:	bc08      	pop	{r3}
    34a8:	469e      	mov	lr, r3
    34aa:	4770      	bx	lr

000034ac <__fini_array_start>:
    34ac:	00000265 	.word	0x00000265
