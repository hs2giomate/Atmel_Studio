
USBSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cd4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00004cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ae8  200000a0  00004d74  000200a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   00053fd4  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005f31  00000000  00000000  000740f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000077b3  00000000  00000000  0007a026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000910  00000000  00000000  000817d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001388  00000000  00000000  000820e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001fa58  00000000  00000000  00083471  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d21a  00000000  00000000  000a2ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00084dc8  00000000  00000000  000b00e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001a68  00000000  00000000  00134eac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 c5 01 00 00 ad 01 00 00 ad 01 00 00     ... ............
	...
      2c:	ad 01 00 00 00 00 00 00 00 00 00 00 ad 01 00 00     ................
      3c:	19 02 00 00 ad 01 00 00 ad 01 00 00 ad 01 00 00     ................
      4c:	ad 01 00 00 ad 01 00 00 ad 01 00 00 ad 01 00 00     ................
      5c:	b1 01 00 00 ad 01 00 00 01 20 00 00 ad 01 00 00     ......... ......
      6c:	ad 01 00 00 ad 01 00 00 ad 01 00 00 11 20 00 00     ............. ..
      7c:	ad 01 00 00 ad 01 00 00 ad 01 00 00 ad 01 00 00     ................
      8c:	ad 01 00 00 00 00 00 00 ad 01 00 00 ad 01 00 00     ................
      9c:	ad 01 00 00 ad 01 00 00 ad 01 00 00 ad 01 00 00     ................
      ac:	ad 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
      d8:	00004cd0 	.word	0x00004cd0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
     108:	00004cd0 	.word	0x00004cd0
     10c:	20000094 	.word	0x20000094
     110:	00000000 	.word	0x00000000

00000114 <setup>:

  This example code is in the public domain.
*/
float floatvalue=1.23456;

void setup() {
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
  // initialize both serial ports:
 
  SerialUSB.begin(9600);
     118:	2396      	movs	r3, #150	; 0x96
     11a:	019a      	lsls	r2, r3, #6
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <setup+0x18>)
     11e:	0011      	movs	r1, r2
     120:	0018      	movs	r0, r3
     122:	f000 fd39 	bl	b98 <_ZN7Serial_5beginEm>
  
  
}
     126:	46c0      	nop			; (mov r8, r8)
     128:	46bd      	mov	sp, r7
     12a:	bd80      	pop	{r7, pc}
     12c:	200000c4 	.word	0x200000c4

00000130 <loop>:

void loop() {
     130:	b5b0      	push	{r4, r5, r7, lr}
     132:	b084      	sub	sp, #16
     134:	af02      	add	r7, sp, #8
  // read from port 1, send to port 0:


  if (SerialUSB.available()) {
     136:	4b1a      	ldr	r3, [pc, #104]	; (1a0 <loop+0x70>)
     138:	0018      	movs	r0, r3
     13a:	f000 fc9f 	bl	a7c <_ZN7Serial_9availableEv>
     13e:	0003      	movs	r3, r0
     140:	1e5a      	subs	r2, r3, #1
     142:	4193      	sbcs	r3, r2
     144:	b2db      	uxtb	r3, r3
     146:	2b00      	cmp	r3, #0
     148:	d023      	beq.n	192 <loop+0x62>
    int inByte = SerialUSB.read();
     14a:	4b15      	ldr	r3, [pc, #84]	; (1a0 <loop+0x70>)
     14c:	0018      	movs	r0, r3
     14e:	f000 fcd1 	bl	af4 <_ZN7Serial_4readEv>
     152:	0003      	movs	r3, r0
     154:	607b      	str	r3, [r7, #4]
    if (inByte>33)
     156:	687b      	ldr	r3, [r7, #4]
     158:	2b21      	cmp	r3, #33	; 0x21
     15a:	dd1a      	ble.n	192 <loop+0x62>
    {
		  SerialUSB.println(inByte);
     15c:	6879      	ldr	r1, [r7, #4]
     15e:	4b10      	ldr	r3, [pc, #64]	; (1a0 <loop+0x70>)
     160:	220a      	movs	r2, #10
     162:	0018      	movs	r0, r3
     164:	f000 f963 	bl	42e <_ZN5Print7printlnEii>
		  SerialUSB.println("it works");
     168:	4a0e      	ldr	r2, [pc, #56]	; (1a4 <loop+0x74>)
     16a:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <loop+0x70>)
     16c:	0011      	movs	r1, r2
     16e:	0018      	movs	r0, r3
     170:	f000 f908 	bl	384 <_ZN5Print7printlnEPKc>
		  SerialUSB.println(floatvalue);
     174:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <loop+0x78>)
     176:	681b      	ldr	r3, [r3, #0]
     178:	1c18      	adds	r0, r3, #0
     17a:	f004 f92d 	bl	43d8 <__aeabi_f2d>
     17e:	0004      	movs	r4, r0
     180:	000d      	movs	r5, r1
     182:	4907      	ldr	r1, [pc, #28]	; (1a0 <loop+0x70>)
     184:	2302      	movs	r3, #2
     186:	9300      	str	r3, [sp, #0]
     188:	0022      	movs	r2, r4
     18a:	002b      	movs	r3, r5
     18c:	0008      	movs	r0, r1
     18e:	f000 fa13 	bl	5b8 <_ZN5Print7printlnEdi>
    }
  
	
  }
  delay(100);
     192:	2064      	movs	r0, #100	; 0x64
     194:	f000 f87e 	bl	294 <delay>
}
     198:	46c0      	nop			; (mov r8, r8)
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bdb0      	pop	{r4, r5, r7, pc}
     1a0:	200000c4 	.word	0x200000c4
     1a4:	00004708 	.word	0x00004708
     1a8:	20000000 	.word	0x20000000

000001ac <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     1ac:	be03      	bkpt	0x0003
     1ae:	e7fe      	b.n	1ae <Dummy_Handler+0x2>

000001b0 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     1b0:	4b03      	ldr	r3, [pc, #12]	; (1c0 <USB_Handler+0x10>)
{
     1b2:	b510      	push	{r4, lr}
  if (usb_isr)
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d000      	beq.n	1bc <USB_Handler+0xc>
    usb_isr();
     1ba:	4798      	blx	r3
}
     1bc:	bd10      	pop	{r4, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	200000bc 	.word	0x200000bc

000001c4 <Reset_Handler>:
{
     1c4:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1c6:	490f      	ldr	r1, [pc, #60]	; (204 <Reset_Handler+0x40>)
     1c8:	4c0f      	ldr	r4, [pc, #60]	; (208 <Reset_Handler+0x44>)
     1ca:	42a1      	cmp	r1, r4
     1cc:	d104      	bne.n	1d8 <Reset_Handler+0x14>
  SystemInit();
     1ce:	f000 fa51 	bl	674 <SystemInit>
  main();
     1d2:	f000 f887 	bl	2e4 <main>
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1d8:	4d0c      	ldr	r5, [pc, #48]	; (20c <Reset_Handler+0x48>)
     1da:	2300      	movs	r3, #0
     1dc:	428d      	cmp	r5, r1
     1de:	d0f6      	beq.n	1ce <Reset_Handler+0xa>
     1e0:	18ca      	adds	r2, r1, r3
     1e2:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     1e4:	42a2      	cmp	r2, r4
     1e6:	d305      	bcc.n	1f4 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1e8:	4290      	cmp	r0, r2
     1ea:	d0f0      	beq.n	1ce <Reset_Handler+0xa>
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1ee:	4909      	ldr	r1, [pc, #36]	; (214 <Reset_Handler+0x50>)
      *pDest = 0;
     1f0:	2200      	movs	r2, #0
     1f2:	e004      	b.n	1fe <Reset_Handler+0x3a>
      *pDest = *pSrc;
     1f4:	6800      	ldr	r0, [r0, #0]
     1f6:	3304      	adds	r3, #4
     1f8:	6010      	str	r0, [r2, #0]
     1fa:	e7f1      	b.n	1e0 <Reset_Handler+0x1c>
      *pDest = 0;
     1fc:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1fe:	428b      	cmp	r3, r1
     200:	d3fc      	bcc.n	1fc <Reset_Handler+0x38>
     202:	e7e4      	b.n	1ce <Reset_Handler+0xa>
     204:	20000000 	.word	0x20000000
     208:	200000a0 	.word	0x200000a0
     20c:	00004cd4 	.word	0x00004cd4
     210:	200000a0 	.word	0x200000a0
     214:	20000b88 	.word	0x20000b88

00000218 <SysTick_Handler>:
{
     218:	b510      	push	{r4, lr}
  if (sysTickHook())
     21a:	f000 f860 	bl	2de <sysTickHook>
     21e:	2800      	cmp	r0, #0
     220:	d101      	bne.n	226 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     222:	f000 f851 	bl	2c8 <SysTick_DefaultHandler>
}
     226:	bd10      	pop	{r4, pc}

00000228 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     228:	4b01      	ldr	r3, [pc, #4]	; (230 <USB_SetHandler+0x8>)
     22a:	6018      	str	r0, [r3, #0]
}
     22c:	4770      	bx	lr
     22e:	46c0      	nop			; (mov r8, r8)
     230:	200000bc 	.word	0x200000bc

00000234 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     236:	4813      	ldr	r0, [pc, #76]	; (284 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     238:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     23a:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     23c:	4912      	ldr	r1, [pc, #72]	; (288 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     23e:	4c13      	ldr	r4, [pc, #76]	; (28c <micros+0x58>)
  ticks2  = SysTick->VAL;
     240:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     242:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     244:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     246:	0e9b      	lsrs	r3, r3, #26
     248:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     24a:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     24c:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     24e:	6862      	ldr	r2, [r4, #4]
     250:	9f01      	ldr	r7, [sp, #4]
     252:	0e92      	lsrs	r2, r2, #26
     254:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     256:	4667      	mov	r7, ip
     258:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     25a:	4293      	cmp	r3, r2
     25c:	d10e      	bne.n	27c <micros+0x48>
     25e:	42bd      	cmp	r5, r7
     260:	d10c      	bne.n	27c <micros+0x48>
     262:	4286      	cmp	r6, r0
     264:	d30a      	bcc.n	27c <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     266:	195b      	adds	r3, r3, r5
     268:	25fa      	movs	r5, #250	; 0xfa
     26a:	6848      	ldr	r0, [r1, #4]
     26c:	00ad      	lsls	r5, r5, #2
     26e:	1b86      	subs	r6, r0, r6
     270:	4807      	ldr	r0, [pc, #28]	; (290 <micros+0x5c>)
     272:	436b      	muls	r3, r5
     274:	4370      	muls	r0, r6
     276:	0d00      	lsrs	r0, r0, #20
     278:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     27a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     27c:	003d      	movs	r5, r7
     27e:	0013      	movs	r3, r2
     280:	0006      	movs	r6, r0
     282:	e7e3      	b.n	24c <micros+0x18>
     284:	200000c0 	.word	0x200000c0
     288:	e000e010 	.word	0xe000e010
     28c:	e000ed00 	.word	0xe000ed00
     290:	00005555 	.word	0x00005555

00000294 <delay>:

void delay( unsigned long ms )
{
     294:	b570      	push	{r4, r5, r6, lr}
     296:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     298:	d010      	beq.n	2bc <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     29a:	f7ff ffcb 	bl	234 <micros>
     29e:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     2a0:	f000 f81c 	bl	2dc <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     2a4:	f7ff ffc6 	bl	234 <micros>
     2a8:	4b05      	ldr	r3, [pc, #20]	; (2c0 <delay+0x2c>)
     2aa:	1b40      	subs	r0, r0, r5
     2ac:	4298      	cmp	r0, r3
     2ae:	d9f7      	bls.n	2a0 <delay+0xc>
    {
      ms--;
      start += 1000;
     2b0:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     2b2:	3c01      	subs	r4, #1
      start += 1000;
     2b4:	009b      	lsls	r3, r3, #2
     2b6:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     2b8:	2c00      	cmp	r4, #0
     2ba:	d1f3      	bne.n	2a4 <delay+0x10>
    }
  }
}
     2bc:	bd70      	pop	{r4, r5, r6, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	000003e7 	.word	0x000003e7

000002c4 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     2c4:	4770      	bx	lr
	...

000002c8 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     2c8:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     2ca:	4a03      	ldr	r2, [pc, #12]	; (2d8 <SysTick_DefaultHandler+0x10>)
     2cc:	6813      	ldr	r3, [r2, #0]
     2ce:	3301      	adds	r3, #1
     2d0:	6013      	str	r3, [r2, #0]
  tickReset();
     2d2:	f000 f993 	bl	5fc <tickReset>
}
     2d6:	bd10      	pop	{r4, pc}
     2d8:	200000c0 	.word	0x200000c0

000002dc <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     2dc:	4770      	bx	lr

000002de <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     2de:	2000      	movs	r0, #0
     2e0:	4770      	bx	lr

000002e2 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     2e2:	4770      	bx	lr

000002e4 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     2e4:	b510      	push	{r4, lr}
  init();
     2e6:	f001 fd0b 	bl	1d00 <init>

  __libc_init_array();
     2ea:	f004 f8e5 	bl	44b8 <__libc_init_array>

  initVariant();
     2ee:	f7ff fff8 	bl	2e2 <_Z11initVariantv>

  delay(1);
     2f2:	2001      	movs	r0, #1
     2f4:	f7ff ffce 	bl	294 <delay>
#if defined(USBCON)
  USBDevice.init();
     2f8:	4c08      	ldr	r4, [pc, #32]	; (31c <main+0x38>)
     2fa:	0020      	movs	r0, r4
     2fc:	f000 ff58 	bl	11b0 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     300:	0020      	movs	r0, r4
     302:	f001 f809 	bl	1318 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     306:	f7ff ff05 	bl	114 <setup>

  for (;;)
  {
    loop();
     30a:	f7ff ff11 	bl	130 <loop>
    if (serialEventRun) serialEventRun();
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <main+0x3c>)
     310:	2b00      	cmp	r3, #0
     312:	d0fa      	beq.n	30a <main+0x26>
     314:	e000      	b.n	318 <main+0x34>
     316:	bf00      	nop
     318:	e7f7      	b.n	30a <main+0x26>
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	2000012c 	.word	0x2000012c
     320:	00000000 	.word	0x00000000

00000324 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     326:	0006      	movs	r6, r0
     328:	000d      	movs	r5, r1
     32a:	000c      	movs	r4, r1
     32c:	188b      	adds	r3, r1, r2
     32e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     330:	9b01      	ldr	r3, [sp, #4]
     332:	1b67      	subs	r7, r4, r5
     334:	429c      	cmp	r4, r3
     336:	d007      	beq.n	348 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     338:	6833      	ldr	r3, [r6, #0]
     33a:	7821      	ldrb	r1, [r4, #0]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	0030      	movs	r0, r6
     340:	4798      	blx	r3
     342:	3401      	adds	r4, #1
     344:	2800      	cmp	r0, #0
     346:	d1f3      	bne.n	330 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     348:	0038      	movs	r0, r7
     34a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000034c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     34c:	b570      	push	{r4, r5, r6, lr}
     34e:	0005      	movs	r5, r0
     350:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     352:	1e08      	subs	r0, r1, #0
     354:	d007      	beq.n	366 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     356:	f004 f9b3 	bl	46c0 <strlen>
     35a:	682b      	ldr	r3, [r5, #0]
     35c:	0002      	movs	r2, r0
     35e:	685b      	ldr	r3, [r3, #4]
     360:	0021      	movs	r1, r4
     362:	0028      	movs	r0, r5
     364:	4798      	blx	r3
    }
     366:	bd70      	pop	{r4, r5, r6, pc}

00000368 <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
     368:	b510      	push	{r4, lr}
  return write(c);
     36a:	6803      	ldr	r3, [r0, #0]
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	4798      	blx	r3
}
     370:	bd10      	pop	{r4, pc}
	...

00000374 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     374:	b510      	push	{r4, lr}
  return write("\r\n");
     376:	4902      	ldr	r1, [pc, #8]	; (380 <_ZN5Print7printlnEv+0xc>)
     378:	f7ff ffe8 	bl	34c <_ZN5Print5writeEPKc>
}
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	0000471d 	.word	0x0000471d

00000384 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     384:	b570      	push	{r4, r5, r6, lr}
     386:	0004      	movs	r4, r0
  return write(str);
     388:	f7ff ffe0 	bl	34c <_ZN5Print5writeEPKc>
     38c:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
     38e:	0020      	movs	r0, r4
     390:	f7ff fff0 	bl	374 <_ZN5Print7printlnEv>
     394:	1940      	adds	r0, r0, r5
  return n;
}
     396:	bd70      	pop	{r4, r5, r6, pc}

00000398 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     398:	b5f0      	push	{r4, r5, r6, r7, lr}
     39a:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     39c:	2200      	movs	r2, #0
{
     39e:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
     3a0:	ab02      	add	r3, sp, #8
     3a2:	3305      	adds	r3, #5
{
     3a4:	9001      	str	r0, [sp, #4]
     3a6:	000d      	movs	r5, r1
  *str = '\0';
     3a8:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     3aa:	2e01      	cmp	r6, #1
     3ac:	dc00      	bgt.n	3b0 <_ZN5Print11printNumberEmh+0x18>
     3ae:	260a      	movs	r6, #10
     3b0:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
     3b2:	0028      	movs	r0, r5
     3b4:	0031      	movs	r1, r6
     3b6:	f002 fa47 	bl	2848 <__aeabi_uidivmod>
     3ba:	000f      	movs	r7, r1
     3bc:	b2cb      	uxtb	r3, r1
    n /= base;
     3be:	0028      	movs	r0, r5
     3c0:	0031      	movs	r1, r6
    char c = n % base;
     3c2:	9300      	str	r3, [sp, #0]
    n /= base;
     3c4:	f002 f9ba 	bl	273c <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     3c8:	b2fb      	uxtb	r3, r7
     3ca:	3337      	adds	r3, #55	; 0x37
    n /= base;
     3cc:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     3ce:	3c01      	subs	r4, #1
     3d0:	b2db      	uxtb	r3, r3
     3d2:	2f09      	cmp	r7, #9
     3d4:	d802      	bhi.n	3dc <_ZN5Print11printNumberEmh+0x44>
     3d6:	9b00      	ldr	r3, [sp, #0]
     3d8:	3330      	adds	r3, #48	; 0x30
     3da:	b2db      	uxtb	r3, r3
     3dc:	7023      	strb	r3, [r4, #0]
  } while(n);
     3de:	2d00      	cmp	r5, #0
     3e0:	d1e7      	bne.n	3b2 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
     3e2:	0021      	movs	r1, r4
     3e4:	9801      	ldr	r0, [sp, #4]
     3e6:	f7ff ffb1 	bl	34c <_ZN5Print5writeEPKc>
}
     3ea:	b00d      	add	sp, #52	; 0x34
     3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003ee <_ZN5Print5printEli>:
{
     3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f0:	0006      	movs	r6, r0
     3f2:	000c      	movs	r4, r1
     3f4:	1e15      	subs	r5, r2, #0
  if (base == 0) {
     3f6:	d104      	bne.n	402 <_ZN5Print5printEli+0x14>
    return write(n);
     3f8:	6803      	ldr	r3, [r0, #0]
     3fa:	b2c9      	uxtb	r1, r1
     3fc:	681b      	ldr	r3, [r3, #0]
     3fe:	4798      	blx	r3
}
     400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber(n, base);
     402:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
     404:	2d0a      	cmp	r5, #10
     406:	d10d      	bne.n	424 <_ZN5Print5printEli+0x36>
    return printNumber(n, 10);
     408:	002a      	movs	r2, r5
    if (n < 0) {
     40a:	2900      	cmp	r1, #0
     40c:	da0a      	bge.n	424 <_ZN5Print5printEli+0x36>
      int t = print('-');
     40e:	212d      	movs	r1, #45	; 0x2d
     410:	f7ff ffaa 	bl	368 <_ZN5Print5printEc>
      n = -n;
     414:	4261      	negs	r1, r4
      int t = print('-');
     416:	0007      	movs	r7, r0
      return printNumber(n, 10) + t;
     418:	002a      	movs	r2, r5
     41a:	0030      	movs	r0, r6
     41c:	f7ff ffbc 	bl	398 <_ZN5Print11printNumberEmh>
     420:	1838      	adds	r0, r7, r0
     422:	e7ed      	b.n	400 <_ZN5Print5printEli+0x12>
    return printNumber(n, base);
     424:	0021      	movs	r1, r4
     426:	0030      	movs	r0, r6
     428:	f7ff ffb6 	bl	398 <_ZN5Print11printNumberEmh>
     42c:	e7e8      	b.n	400 <_ZN5Print5printEli+0x12>

0000042e <_ZN5Print7printlnEii>:
{
     42e:	b570      	push	{r4, r5, r6, lr}
     430:	0004      	movs	r4, r0
  return print((long) n, base);
     432:	f7ff ffdc 	bl	3ee <_ZN5Print5printEli>
     436:	0005      	movs	r5, r0
  n += println();
     438:	0020      	movs	r0, r4
     43a:	f7ff ff9b 	bl	374 <_ZN5Print7printlnEv>
     43e:	1940      	adds	r0, r0, r5
}
     440:	bd70      	pop	{r4, r5, r6, pc}
	...

00000444 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     444:	b5f0      	push	{r4, r5, r6, r7, lr}
     446:	001e      	movs	r6, r3
     448:	b085      	sub	sp, #20
     44a:	ab0a      	add	r3, sp, #40	; 0x28
     44c:	781b      	ldrb	r3, [r3, #0]
     44e:	0005      	movs	r5, r0
     450:	9301      	str	r3, [sp, #4]
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
     452:	0010      	movs	r0, r2
     454:	0033      	movs	r3, r6
     456:	0031      	movs	r1, r6
     458:	0017      	movs	r7, r2
     45a:	f003 ff31 	bl	42c0 <__aeabi_dcmpun>
     45e:	2800      	cmp	r0, #0
     460:	d07b      	beq.n	55a <_ZN5Print10printFloatEdh+0x116>
  return write(str);
     462:	494d      	ldr	r1, [pc, #308]	; (598 <_ZN5Print10printFloatEdh+0x154>)
     464:	e090      	b.n	588 <_ZN5Print10printFloatEdh+0x144>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     466:	22e0      	movs	r2, #224	; 0xe0
     468:	4b4c      	ldr	r3, [pc, #304]	; (59c <_ZN5Print10printFloatEdh+0x158>)
     46a:	0612      	lsls	r2, r2, #24
     46c:	0038      	movs	r0, r7
     46e:	0031      	movs	r1, r6
     470:	f002 fa1a 	bl	28a8 <__aeabi_dcmpgt>
     474:	2800      	cmp	r0, #0
     476:	d001      	beq.n	47c <_ZN5Print10printFloatEdh+0x38>
  return write(str);
     478:	4949      	ldr	r1, [pc, #292]	; (5a0 <_ZN5Print10printFloatEdh+0x15c>)
     47a:	e085      	b.n	588 <_ZN5Print10printFloatEdh+0x144>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     47c:	22e0      	movs	r2, #224	; 0xe0
     47e:	4b49      	ldr	r3, [pc, #292]	; (5a4 <_ZN5Print10printFloatEdh+0x160>)
     480:	0612      	lsls	r2, r2, #24
     482:	0038      	movs	r0, r7
     484:	0031      	movs	r1, r6
     486:	f002 f9fb 	bl	2880 <__aeabi_dcmplt>
     48a:	2800      	cmp	r0, #0
     48c:	d1f4      	bne.n	478 <_ZN5Print10printFloatEdh+0x34>

  // Handle negative numbers
  if (number < 0.0)
     48e:	2200      	movs	r2, #0
     490:	2300      	movs	r3, #0
     492:	0038      	movs	r0, r7
     494:	0031      	movs	r1, r6
     496:	f002 f9f3 	bl	2880 <__aeabi_dcmplt>
     49a:	2800      	cmp	r0, #0
     49c:	d014      	beq.n	4c8 <_ZN5Print10printFloatEdh+0x84>
  {
     n += print('-');
     49e:	212d      	movs	r1, #45	; 0x2d
     4a0:	0028      	movs	r0, r5
     4a2:	f7ff ff61 	bl	368 <_ZN5Print5printEc>
     number = -number;
     4a6:	2380      	movs	r3, #128	; 0x80
     4a8:	061b      	lsls	r3, r3, #24
     n += print('-');
     4aa:	9002      	str	r0, [sp, #8]
     number = -number;
     4ac:	18f6      	adds	r6, r6, r3
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     4ae:	2400      	movs	r4, #0
  double rounding = 0.5;
     4b0:	2000      	movs	r0, #0
     4b2:	493d      	ldr	r1, [pc, #244]	; (5a8 <_ZN5Print10printFloatEdh+0x164>)
  for (uint8_t i=0; i<digits; ++i)
     4b4:	9b01      	ldr	r3, [sp, #4]
     4b6:	429c      	cmp	r4, r3
     4b8:	da08      	bge.n	4cc <_ZN5Print10printFloatEdh+0x88>
    rounding /= 10.0;
     4ba:	2200      	movs	r2, #0
     4bc:	4b3b      	ldr	r3, [pc, #236]	; (5ac <_ZN5Print10printFloatEdh+0x168>)
  for (uint8_t i=0; i<digits; ++i)
     4be:	3401      	adds	r4, #1
    rounding /= 10.0;
     4c0:	f002 fd34 	bl	2f2c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
     4c4:	b2e4      	uxtb	r4, r4
     4c6:	e7f5      	b.n	4b4 <_ZN5Print10printFloatEdh+0x70>
  size_t n = 0;
     4c8:	9002      	str	r0, [sp, #8]
     4ca:	e7f0      	b.n	4ae <_ZN5Print10printFloatEdh+0x6a>

  number += rounding;
     4cc:	0033      	movs	r3, r6
     4ce:	003a      	movs	r2, r7
     4d0:	f002 fa1c 	bl	290c <__aeabi_dadd>
     4d4:	000f      	movs	r7, r1
     4d6:	0006      	movs	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     4d8:	f002 f9fa 	bl	28d0 <__aeabi_d2uiz>
  else return printNumber(n, base);
     4dc:	220a      	movs	r2, #10
  unsigned long int_part = (unsigned long)number;
     4de:	9003      	str	r0, [sp, #12]
  else return printNumber(n, base);
     4e0:	0001      	movs	r1, r0
     4e2:	0028      	movs	r0, r5
     4e4:	f7ff ff58 	bl	398 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
     4e8:	9b02      	ldr	r3, [sp, #8]
     4ea:	18c4      	adds	r4, r0, r3

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     4ec:	9b01      	ldr	r3, [sp, #4]
     4ee:	2b00      	cmp	r3, #0
     4f0:	d04e      	beq.n	590 <_ZN5Print10printFloatEdh+0x14c>
  double remainder = number - (double)int_part;
     4f2:	9803      	ldr	r0, [sp, #12]
     4f4:	f003 ff38 	bl	4368 <__aeabi_ui2d>
     4f8:	0002      	movs	r2, r0
     4fa:	000b      	movs	r3, r1
     4fc:	0030      	movs	r0, r6
     4fe:	0039      	movs	r1, r7
     500:	f003 fbc8 	bl	3c94 <__aeabi_dsub>
     504:	0006      	movs	r6, r0
     506:	000f      	movs	r7, r1
    n += print('.');
     508:	0028      	movs	r0, r5
     50a:	212e      	movs	r1, #46	; 0x2e
     50c:	f7ff ff2c 	bl	368 <_ZN5Print5printEc>
     510:	1824      	adds	r4, r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     512:	9b01      	ldr	r3, [sp, #4]
     514:	2b00      	cmp	r3, #0
     516:	d03b      	beq.n	590 <_ZN5Print10printFloatEdh+0x14c>
  {
    remainder *= 10.0;
     518:	4b24      	ldr	r3, [pc, #144]	; (5ac <_ZN5Print10printFloatEdh+0x168>)
     51a:	2200      	movs	r2, #0
     51c:	0030      	movs	r0, r6
     51e:	0039      	movs	r1, r7
     520:	f003 f938 	bl	3794 <__aeabi_dmul>
     524:	000f      	movs	r7, r1
     526:	0006      	movs	r6, r0
    unsigned int toPrint = (unsigned int)(remainder);
     528:	f002 f9d2 	bl	28d0 <__aeabi_d2uiz>
  else return printNumber(n, base);
     52c:	220a      	movs	r2, #10
     52e:	0001      	movs	r1, r0
    unsigned int toPrint = (unsigned int)(remainder);
     530:	9002      	str	r0, [sp, #8]
  else return printNumber(n, base);
     532:	0028      	movs	r0, r5
     534:	f7ff ff30 	bl	398 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
     538:	1824      	adds	r4, r4, r0
    remainder -= toPrint;
     53a:	9802      	ldr	r0, [sp, #8]
     53c:	f003 ff14 	bl	4368 <__aeabi_ui2d>
     540:	000b      	movs	r3, r1
     542:	0002      	movs	r2, r0
     544:	0039      	movs	r1, r7
     546:	0030      	movs	r0, r6
     548:	f003 fba4 	bl	3c94 <__aeabi_dsub>
     54c:	9b01      	ldr	r3, [sp, #4]
     54e:	0006      	movs	r6, r0
     550:	3b01      	subs	r3, #1
     552:	b2db      	uxtb	r3, r3
     554:	000f      	movs	r7, r1
     556:	9301      	str	r3, [sp, #4]
     558:	e7db      	b.n	512 <_ZN5Print10printFloatEdh+0xce>
  if (isinf(number)) return print("inf");
     55a:	2201      	movs	r2, #1
  { return __builtin_isinf(__x); }
     55c:	0074      	lsls	r4, r6, #1
     55e:	0864      	lsrs	r4, r4, #1
     560:	4252      	negs	r2, r2
     562:	4b13      	ldr	r3, [pc, #76]	; (5b0 <_ZN5Print10printFloatEdh+0x16c>)
     564:	0038      	movs	r0, r7
     566:	0021      	movs	r1, r4
     568:	f003 feaa 	bl	42c0 <__aeabi_dcmpun>
     56c:	2800      	cmp	r0, #0
     56e:	d000      	beq.n	572 <_ZN5Print10printFloatEdh+0x12e>
     570:	e779      	b.n	466 <_ZN5Print10printFloatEdh+0x22>
     572:	2201      	movs	r2, #1
     574:	4b0e      	ldr	r3, [pc, #56]	; (5b0 <_ZN5Print10printFloatEdh+0x16c>)
     576:	4252      	negs	r2, r2
     578:	0038      	movs	r0, r7
     57a:	0021      	movs	r1, r4
     57c:	f002 f98a 	bl	2894 <__aeabi_dcmple>
     580:	2800      	cmp	r0, #0
     582:	d000      	beq.n	586 <_ZN5Print10printFloatEdh+0x142>
     584:	e76f      	b.n	466 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
     586:	490b      	ldr	r1, [pc, #44]	; (5b4 <_ZN5Print10printFloatEdh+0x170>)
     588:	0028      	movs	r0, r5
     58a:	f7ff fedf 	bl	34c <_ZN5Print5writeEPKc>
     58e:	0004      	movs	r4, r0
  }

  return n;
}
     590:	0020      	movs	r0, r4
     592:	b005      	add	sp, #20
     594:	bdf0      	pop	{r4, r5, r6, r7, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	00004719 	.word	0x00004719
     59c:	41efffff 	.word	0x41efffff
     5a0:	00004715 	.word	0x00004715
     5a4:	c1efffff 	.word	0xc1efffff
     5a8:	3fe00000 	.word	0x3fe00000
     5ac:	40240000 	.word	0x40240000
     5b0:	7fefffff 	.word	0x7fefffff
     5b4:	00004711 	.word	0x00004711

000005b8 <_ZN5Print7printlnEdi>:
{
     5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
     5ba:	0019      	movs	r1, r3
  return printFloat(n, digits);
     5bc:	466b      	mov	r3, sp
{
     5be:	0004      	movs	r4, r0
  return printFloat(n, digits);
     5c0:	7e1b      	ldrb	r3, [r3, #24]
     5c2:	0020      	movs	r0, r4
     5c4:	9300      	str	r3, [sp, #0]
     5c6:	000b      	movs	r3, r1
     5c8:	f7ff ff3c 	bl	444 <_ZN5Print10printFloatEdh>
     5cc:	0005      	movs	r5, r0
  n += println();
     5ce:	0020      	movs	r0, r4
     5d0:	f7ff fed0 	bl	374 <_ZN5Print7printlnEv>
     5d4:	1940      	adds	r0, r0, r5
}
     5d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000005d8 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     5d8:	b510      	push	{r4, lr}
     5da:	0004      	movs	r4, r0
	resetExternalChip();
     5dc:	f7ff fe72 	bl	2c4 <resetExternalChip>
	ticks = _ticks;
     5e0:	4b01      	ldr	r3, [pc, #4]	; (5e8 <initiateReset+0x10>)
     5e2:	601c      	str	r4, [r3, #0]
}
     5e4:	bd10      	pop	{r4, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	20000004 	.word	0x20000004

000005ec <cancelReset>:

void cancelReset() {
	ticks = -1;
     5ec:	2201      	movs	r2, #1
     5ee:	4b02      	ldr	r3, [pc, #8]	; (5f8 <cancelReset+0xc>)
     5f0:	4252      	negs	r2, r2
     5f2:	601a      	str	r2, [r3, #0]
}
     5f4:	4770      	bx	lr
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	20000004 	.word	0x20000004

000005fc <tickReset>:

void tickReset() {
	if (ticks == -1)
     5fc:	4a16      	ldr	r2, [pc, #88]	; (658 <tickReset+0x5c>)
void tickReset() {
     5fe:	b510      	push	{r4, lr}
	if (ticks == -1)
     600:	6813      	ldr	r3, [r2, #0]
     602:	1c59      	adds	r1, r3, #1
     604:	d027      	beq.n	656 <tickReset+0x5a>
		return;
	ticks--;
     606:	3b01      	subs	r3, #1
     608:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     60a:	2b00      	cmp	r3, #0
     60c:	d123      	bne.n	656 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     60e:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     610:	4b12      	ldr	r3, [pc, #72]	; (65c <tickReset+0x60>)
     612:	4a13      	ldr	r2, [pc, #76]	; (660 <tickReset+0x64>)
     614:	3304      	adds	r3, #4
     616:	4293      	cmp	r3, r2
     618:	d808      	bhi.n	62c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     61a:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     61e:	4a11      	ldr	r2, [pc, #68]	; (664 <tickReset+0x68>)
     620:	4b11      	ldr	r3, [pc, #68]	; (668 <tickReset+0x6c>)
     622:	60da      	str	r2, [r3, #12]
     624:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     628:	46c0      	nop			; (mov r8, r8)
     62a:	e7fd      	b.n	628 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     62c:	4a0f      	ldr	r2, [pc, #60]	; (66c <tickReset+0x70>)
	while (!nvmReady())
     62e:	2101      	movs	r1, #1
     630:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     632:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     634:	420c      	tst	r4, r1
     636:	d0fc      	beq.n	632 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     638:	2120      	movs	r1, #32
     63a:	8b14      	ldrh	r4, [r2, #24]
     63c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     63e:	089b      	lsrs	r3, r3, #2
     640:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     642:	4321      	orrs	r1, r4
     644:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     646:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     648:	4b09      	ldr	r3, [pc, #36]	; (670 <tickReset+0x74>)
     64a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     64c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     64e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     650:	421a      	tst	r2, r3
     652:	d0fc      	beq.n	64e <tickReset+0x52>
     654:	e7e1      	b.n	61a <tickReset+0x1e>
		banzai();
}
     656:	bd10      	pop	{r4, pc}
     658:	20000004 	.word	0x20000004
     65c:	00000000 	.word	0x00000000
     660:	00000203 	.word	0x00000203
     664:	05fa0004 	.word	0x05fa0004
     668:	e000ed00 	.word	0xe000ed00
     66c:	41004000 	.word	0x41004000
     670:	ffffa502 	.word	0xffffa502

00000674 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     674:	221e      	movs	r2, #30
{
     676:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     678:	4846      	ldr	r0, [pc, #280]	; (794 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     67a:	4947      	ldr	r1, [pc, #284]	; (798 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     67c:	6843      	ldr	r3, [r0, #4]
     67e:	4393      	bics	r3, r2
     680:	3a1c      	subs	r2, #28
     682:	4313      	orrs	r3, r2
     684:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     686:	2308      	movs	r3, #8
     688:	698c      	ldr	r4, [r1, #24]
     68a:	4323      	orrs	r3, r4
     68c:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     68e:	4c43      	ldr	r4, [pc, #268]	; (79c <SystemInit+0x128>)
     690:	4b43      	ldr	r3, [pc, #268]	; (7a0 <SystemInit+0x12c>)
     692:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     694:	8a9c      	ldrh	r4, [r3, #20]
     696:	4314      	orrs	r4, r2
     698:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     69a:	68dc      	ldr	r4, [r3, #12]
     69c:	4214      	tst	r4, r2
     69e:	d0fc      	beq.n	69a <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     6a0:	2401      	movs	r4, #1
     6a2:	4a40      	ldr	r2, [pc, #256]	; (7a4 <SystemInit+0x130>)
     6a4:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     6a6:	7815      	ldrb	r5, [r2, #0]
     6a8:	4225      	tst	r5, r4
     6aa:	d003      	beq.n	6b4 <SystemInit+0x40>
     6ac:	7855      	ldrb	r5, [r2, #1]
     6ae:	b26d      	sxtb	r5, r5
     6b0:	2d00      	cmp	r5, #0
     6b2:	dbf8      	blt.n	6a6 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     6b4:	2401      	movs	r4, #1
     6b6:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6b8:	7854      	ldrb	r4, [r2, #1]
     6ba:	b264      	sxtb	r4, r4
     6bc:	2c00      	cmp	r4, #0
     6be:	dbfb      	blt.n	6b8 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     6c0:	4c39      	ldr	r4, [pc, #228]	; (7a8 <SystemInit+0x134>)
     6c2:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6c4:	7854      	ldrb	r4, [r2, #1]
     6c6:	b264      	sxtb	r4, r4
     6c8:	2c00      	cmp	r4, #0
     6ca:	dbfb      	blt.n	6c4 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     6cc:	2482      	movs	r4, #130	; 0x82
     6ce:	01e4      	lsls	r4, r4, #7
     6d0:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6d2:	7854      	ldrb	r4, [r2, #1]
     6d4:	b264      	sxtb	r4, r4
     6d6:	2c00      	cmp	r4, #0
     6d8:	dbfb      	blt.n	6d2 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     6da:	2402      	movs	r4, #2
     6dc:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6de:	340e      	adds	r4, #14
     6e0:	68dd      	ldr	r5, [r3, #12]
     6e2:	4225      	tst	r5, r4
     6e4:	d0fc      	beq.n	6e0 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     6e6:	4c31      	ldr	r4, [pc, #196]	; (7ac <SystemInit+0x138>)
     6e8:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6ea:	2410      	movs	r4, #16
     6ec:	68dd      	ldr	r5, [r3, #12]
     6ee:	4225      	tst	r5, r4
     6f0:	d0fc      	beq.n	6ec <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     6f2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     6f4:	4c2e      	ldr	r4, [pc, #184]	; (7b0 <SystemInit+0x13c>)
     6f6:	432c      	orrs	r4, r5
     6f8:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6fa:	2410      	movs	r4, #16
     6fc:	68dd      	ldr	r5, [r3, #12]
     6fe:	4225      	tst	r5, r4
     700:	d0fc      	beq.n	6fc <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     702:	2402      	movs	r4, #2
     704:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     706:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     708:	432c      	orrs	r4, r5
     70a:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     70c:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     70e:	68dd      	ldr	r5, [r3, #12]
     710:	4235      	tst	r5, r6
     712:	d0fc      	beq.n	70e <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     714:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     716:	4225      	tst	r5, r4
     718:	d0f9      	beq.n	70e <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     71a:	2410      	movs	r4, #16
     71c:	68dd      	ldr	r5, [r3, #12]
     71e:	4225      	tst	r5, r4
     720:	d0fc      	beq.n	71c <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     722:	2400      	movs	r4, #0
     724:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     726:	7854      	ldrb	r4, [r2, #1]
     728:	b264      	sxtb	r4, r4
     72a:	2c00      	cmp	r4, #0
     72c:	dbfb      	blt.n	726 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     72e:	4c21      	ldr	r4, [pc, #132]	; (7b4 <SystemInit+0x140>)
     730:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     732:	7854      	ldrb	r4, [r2, #1]
     734:	b264      	sxtb	r4, r4
     736:	2c00      	cmp	r4, #0
     738:	dbfb      	blt.n	732 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     73a:	6a1c      	ldr	r4, [r3, #32]
     73c:	4d1e      	ldr	r5, [pc, #120]	; (7b8 <SystemInit+0x144>)
     73e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     740:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     742:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     744:	6a1c      	ldr	r4, [r3, #32]
     746:	43ac      	bics	r4, r5
     748:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     74a:	2303      	movs	r3, #3
     74c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     74e:	4b1b      	ldr	r3, [pc, #108]	; (7bc <SystemInit+0x148>)
     750:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     752:	7853      	ldrb	r3, [r2, #1]
     754:	b25b      	sxtb	r3, r3
     756:	2b00      	cmp	r3, #0
     758:	dbfb      	blt.n	752 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     75a:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     75c:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     75e:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     760:	4a17      	ldr	r2, [pc, #92]	; (7c0 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     762:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     764:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     766:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     768:	4b16      	ldr	r3, [pc, #88]	; (7c4 <SystemInit+0x150>)
     76a:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     76c:	4b16      	ldr	r3, [pc, #88]	; (7c8 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     76e:	4a17      	ldr	r2, [pc, #92]	; (7cc <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     770:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     772:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     774:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     776:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     778:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     77a:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     77c:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     77e:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     780:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     782:	4313      	orrs	r3, r2
     784:	4a12      	ldr	r2, [pc, #72]	; (7d0 <SystemInit+0x15c>)
     786:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     788:	2380      	movs	r3, #128	; 0x80
     78a:	6842      	ldr	r2, [r0, #4]
     78c:	4313      	orrs	r3, r2
     78e:	6043      	str	r3, [r0, #4]
}
     790:	bd70      	pop	{r4, r5, r6, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	41004000 	.word	0x41004000
     798:	40000400 	.word	0x40000400
     79c:	0000060c 	.word	0x0000060c
     7a0:	40000800 	.word	0x40000800
     7a4:	40000c00 	.word	0x40000c00
     7a8:	00010501 	.word	0x00010501
     7ac:	7dff05b9 	.word	0x7dff05b9
     7b0:	00000a04 	.word	0x00000a04
     7b4:	00030700 	.word	0x00030700
     7b8:	fffffcff 	.word	0xfffffcff
     7bc:	00010603 	.word	0x00010603
     7c0:	02dc6c00 	.word	0x02dc6c00
     7c4:	20000018 	.word	0x20000018
     7c8:	00806024 	.word	0x00806024
     7cc:	00806020 	.word	0x00806020
     7d0:	42004000 	.word	0x42004000

000007d4 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
     7d4:	2000      	movs	r0, #0
     7d6:	4770      	bx	lr

000007d8 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
     7d8:	b408      	push	{r3}
     7da:	4b02      	ldr	r3, [pc, #8]	; (7e4 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
     7dc:	469c      	mov	ip, r3
     7de:	3810      	subs	r0, #16
     7e0:	bc08      	pop	{r3}
     7e2:	4760      	bx	ip
     7e4:	000007d5 	.word	0x000007d5

000007e8 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
     7e8:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     7ea:	250f      	movs	r5, #15
     7ec:	1dcb      	adds	r3, r1, #7
     7ee:	3901      	subs	r1, #1
     7f0:	0002      	movs	r2, r0
     7f2:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     7f4:	0014      	movs	r4, r2
		val = (val >> 4);
     7f6:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     7f8:	3430      	adds	r4, #48	; 0x30
     7fa:	2a09      	cmp	r2, #9
     7fc:	dd01      	ble.n	802 <_ZL5utox8mPc+0x1a>
     7fe:	3237      	adds	r2, #55	; 0x37
     800:	0014      	movs	r4, r2
     802:	701c      	strb	r4, [r3, #0]
     804:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     806:	428b      	cmp	r3, r1
     808:	d1f2      	bne.n	7f0 <_ZL5utox8mPc+0x8>
	}
}
     80a:	bd30      	pop	{r4, r5, pc}

0000080c <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
     80c:	b510      	push	{r4, lr}
     80e:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
     810:	4b0b      	ldr	r3, [pc, #44]	; (840 <_ZN7Serial_12getShortNameEPc+0x34>)
     812:	6818      	ldr	r0, [r3, #0]
     814:	f7ff ffe8 	bl	7e8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
     818:	0021      	movs	r1, r4
     81a:	4b0a      	ldr	r3, [pc, #40]	; (844 <_ZN7Serial_12getShortNameEPc+0x38>)
     81c:	3108      	adds	r1, #8
     81e:	6818      	ldr	r0, [r3, #0]
     820:	f7ff ffe2 	bl	7e8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
     824:	0021      	movs	r1, r4
     826:	4b08      	ldr	r3, [pc, #32]	; (848 <_ZN7Serial_12getShortNameEPc+0x3c>)
     828:	3110      	adds	r1, #16
     82a:	6818      	ldr	r0, [r3, #0]
     82c:	f7ff ffdc 	bl	7e8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
     830:	0021      	movs	r1, r4
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <_ZN7Serial_12getShortNameEPc+0x40>)
     834:	3118      	adds	r1, #24
     836:	6818      	ldr	r0, [r3, #0]
     838:	f7ff ffd6 	bl	7e8 <_ZL5utox8mPc>
	return 32;
}
     83c:	2020      	movs	r0, #32
     83e:	bd10      	pop	{r4, pc}
     840:	0080a00c 	.word	0x0080a00c
     844:	0080a040 	.word	0x0080a040
     848:	0080a044 	.word	0x0080a044
     84c:	0080a048 	.word	0x0080a048

00000850 <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
     850:	b408      	push	{r3}
     852:	4b02      	ldr	r3, [pc, #8]	; (85c <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
     854:	469c      	mov	ip, r3
     856:	3810      	subs	r0, #16
     858:	bc08      	pop	{r3}
     85a:	4760      	bx	ip
     85c:	0000080d 	.word	0x0000080d

00000860 <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
     860:	4770      	bx	lr
	...

00000864 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
     864:	b408      	push	{r3}
     866:	4b02      	ldr	r3, [pc, #8]	; (870 <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
     868:	469c      	mov	ip, r3
     86a:	3810      	subs	r0, #16
     86c:	bc08      	pop	{r3}
     86e:	4760      	bx	ip
     870:	00000861 	.word	0x00000861

00000874 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     874:	203f      	movs	r0, #63	; 0x3f
     876:	4770      	bx	lr

00000878 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     878:	b513      	push	{r0, r1, r4, lr}
     87a:	466b      	mov	r3, sp
	return write(&c, 1);
     87c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     87e:	71d9      	strb	r1, [r3, #7]
     880:	3307      	adds	r3, #7
	return write(&c, 1);
     882:	6854      	ldr	r4, [r2, #4]
     884:	0019      	movs	r1, r3
     886:	2201      	movs	r2, #1
     888:	47a0      	blx	r4
}
     88a:	bd16      	pop	{r1, r2, r4, pc}

0000088c <_ZN7Serial_12getInterfaceEPh>:
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
     88e:	780b      	ldrb	r3, [r1, #0]
{
     890:	b095      	sub	sp, #84	; 0x54
	};
     892:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
     894:	3302      	adds	r3, #2
{
     896:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
     898:	700b      	strb	r3, [r1, #0]
	};
     89a:	2242      	movs	r2, #66	; 0x42
     89c:	2100      	movs	r1, #0
     89e:	0020      	movs	r0, r4
     8a0:	f003 fe4b 	bl	453a <memset>
     8a4:	2209      	movs	r2, #9
     8a6:	2504      	movs	r5, #4
     8a8:	7222      	strb	r2, [r4, #8]
     8aa:	2204      	movs	r2, #4
     8ac:	75a5      	strb	r5, [r4, #22]
     8ae:	7262      	strb	r2, [r4, #9]
     8b0:	2506      	movs	r5, #6
     8b2:	2205      	movs	r2, #5
     8b4:	2024      	movs	r0, #36	; 0x24
     8b6:	ae02      	add	r6, sp, #8
     8b8:	7665      	strb	r5, [r4, #25]
     8ba:	7725      	strb	r5, [r4, #28]
     8bc:	1995      	adds	r5, r2, r6
     8be:	74a0      	strb	r0, [r4, #18]
     8c0:	75e0      	strb	r0, [r4, #23]
     8c2:	76e0      	strb	r0, [r4, #27]
     8c4:	77e8      	strb	r0, [r5, #31]
     8c6:	0030      	movs	r0, r6
     8c8:	2101      	movs	r1, #1
     8ca:	3006      	adds	r0, #6
     8cc:	77c1      	strb	r1, [r0, #31]
     8ce:	0030      	movs	r0, r6
     8d0:	3007      	adds	r0, #7
     8d2:	77c1      	strb	r1, [r0, #31]
     8d4:	a804      	add	r0, sp, #16
     8d6:	77c1      	strb	r1, [r0, #31]
     8d8:	2009      	movs	r0, #9
     8da:	7321      	strb	r1, [r4, #12]
     8dc:	7561      	strb	r1, [r4, #21]
     8de:	1980      	adds	r0, r0, r6
     8e0:	3106      	adds	r1, #6
     8e2:	77c1      	strb	r1, [r0, #31]
     8e4:	200a      	movs	r0, #10
     8e6:	1980      	adds	r0, r0, r6
     8e8:	77c2      	strb	r2, [r0, #31]
     8ea:	2003      	movs	r0, #3
     8ec:	4684      	mov	ip, r0
     8ee:	4665      	mov	r5, ip
     8f0:	a805      	add	r0, sp, #20
     8f2:	77c5      	strb	r5, [r0, #31]
     8f4:	202e      	movs	r0, #46	; 0x2e
     8f6:	2710      	movs	r7, #16
     8f8:	1980      	adds	r0, r0, r6
     8fa:	7007      	strb	r7, [r0, #0]
     8fc:	202f      	movs	r0, #47	; 0x2f
     8fe:	2509      	movs	r5, #9
     900:	2308      	movs	r3, #8
     902:	1980      	adds	r0, r0, r6
     904:	7005      	strb	r5, [r0, #0]
     906:	2504      	movs	r5, #4
     908:	7023      	strb	r3, [r4, #0]
     90a:	3303      	adds	r3, #3
     90c:	7063      	strb	r3, [r4, #1]
     90e:	a80e      	add	r0, sp, #56	; 0x38
     910:	3b09      	subs	r3, #9
     912:	70e3      	strb	r3, [r4, #3]
     914:	7123      	strb	r3, [r4, #4]
     916:	7163      	strb	r3, [r4, #5]
     918:	7363      	strb	r3, [r4, #13]
     91a:	73a3      	strb	r3, [r4, #14]
     91c:	7462      	strb	r2, [r4, #17]
     91e:	7623      	strb	r3, [r4, #24]
     920:	76a2      	strb	r2, [r4, #26]
     922:	77e2      	strb	r2, [r4, #31]
     924:	7527      	strb	r7, [r4, #20]
     926:	8527      	strh	r7, [r4, #40]	; 0x28
     928:	7005      	strb	r5, [r0, #0]
     92a:	2033      	movs	r0, #51	; 0x33
     92c:	0035      	movs	r5, r6
     92e:	1980      	adds	r0, r0, r6
     930:	260a      	movs	r6, #10
     932:	7003      	strb	r3, [r0, #0]
     934:	a80f      	add	r0, sp, #60	; 0x3c
     936:	7006      	strb	r6, [r0, #0]
     938:	a810      	add	r0, sp, #64	; 0x40
     93a:	7001      	strb	r1, [r0, #0]
     93c:	2039      	movs	r0, #57	; 0x39
     93e:	1940      	adds	r0, r0, r5
     940:	7002      	strb	r2, [r0, #0]
     942:	203b      	movs	r0, #59	; 0x3b
     944:	3635      	adds	r6, #53	; 0x35
     946:	1976      	adds	r6, r6, r5
     948:	7031      	strb	r1, [r6, #0]
     94a:	a912      	add	r1, sp, #72	; 0x48
     94c:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     94e:	2180      	movs	r1, #128	; 0x80
	};
     950:	323d      	adds	r2, #61	; 0x3d
     952:	1940      	adds	r0, r0, r5
     954:	1952      	adds	r2, r2, r5
     956:	7003      	strb	r3, [r0, #0]
     958:	7013      	strb	r3, [r2, #0]
     95a:	2040      	movs	r0, #64	; 0x40
     95c:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     95e:	4249      	negs	r1, r1
     960:	000e      	movs	r6, r1
	};
     962:	3341      	adds	r3, #65	; 0x41
     964:	195b      	adds	r3, r3, r5
     966:	7018      	strb	r0, [r3, #0]
     968:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     96a:	9b01      	ldr	r3, [sp, #4]
	};
     96c:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     96e:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     970:	9a01      	ldr	r2, [sp, #4]
	};
     972:	70a3      	strb	r3, [r4, #2]
     974:	72a3      	strb	r3, [r4, #10]
     976:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
     978:	3301      	adds	r3, #1
     97a:	b2db      	uxtb	r3, r3
	};
     97c:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     97e:	7d52      	ldrb	r2, [r2, #21]
	};
     980:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     982:	4316      	orrs	r6, r2
	};
     984:	1940      	adds	r0, r0, r5
     986:	77c6      	strb	r6, [r0, #31]
     988:	2031      	movs	r0, #49	; 0x31
     98a:	1940      	adds	r0, r0, r5
     98c:	7003      	strb	r3, [r0, #0]
     98e:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
     990:	1c50      	adds	r0, r2, #1
	};
     992:	195b      	adds	r3, r3, r5
     994:	7018      	strb	r0, [r3, #0]
     996:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
     998:	3202      	adds	r2, #2
     99a:	430a      	orrs	r2, r1
	};
     99c:	195b      	adds	r3, r3, r5
     99e:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
     9a0:	0021      	movs	r1, r4
     9a2:	2242      	movs	r2, #66	; 0x42
     9a4:	4802      	ldr	r0, [pc, #8]	; (9b0 <_ZN7Serial_12getInterfaceEPh+0x124>)
     9a6:	f000 ff57 	bl	1858 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     9aa:	b015      	add	sp, #84	; 0x54
     9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	2000012c 	.word	0x2000012c

000009b4 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
     9b4:	b408      	push	{r3}
     9b6:	4b02      	ldr	r3, [pc, #8]	; (9c0 <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
     9b8:	469c      	mov	ip, r3
     9ba:	3810      	subs	r0, #16
     9bc:	bc08      	pop	{r3}
     9be:	4760      	bx	ip
     9c0:	0000088d 	.word	0x0000088d

000009c4 <_ZN7Serial_5setupER8USBSetup>:
{
     9c4:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
     9c6:	790a      	ldrb	r2, [r1, #4]
     9c8:	7d03      	ldrb	r3, [r0, #20]
{
     9ca:	000c      	movs	r4, r1
		return false;
     9cc:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
     9ce:	429a      	cmp	r2, r3
     9d0:	d10b      	bne.n	9ea <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
     9d2:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
     9d4:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     9d6:	2ba1      	cmp	r3, #161	; 0xa1
     9d8:	d109      	bne.n	9ee <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
     9da:	2e21      	cmp	r6, #33	; 0x21
     9dc:	d105      	bne.n	9ea <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     9de:	2207      	movs	r2, #7
     9e0:	491f      	ldr	r1, [pc, #124]	; (a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     9e2:	4820      	ldr	r0, [pc, #128]	; (a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     9e4:	f000 ff38 	bl	1858 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     9e8:	3501      	adds	r5, #1
}
     9ea:	0028      	movs	r0, r5
     9ec:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     9ee:	2b21      	cmp	r3, #33	; 0x21
     9f0:	d1fb      	bne.n	9ea <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
     9f2:	2e20      	cmp	r6, #32
     9f4:	d119      	bne.n	a2a <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     9f6:	2207      	movs	r2, #7
     9f8:	4919      	ldr	r1, [pc, #100]	; (a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     9fa:	481a      	ldr	r0, [pc, #104]	; (a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     9fc:	f000 fe62 	bl	16c4 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
     a00:	4b17      	ldr	r3, [pc, #92]	; (a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     a02:	781a      	ldrb	r2, [r3, #0]
     a04:	7859      	ldrb	r1, [r3, #1]
     a06:	0209      	lsls	r1, r1, #8
     a08:	4311      	orrs	r1, r2
     a0a:	789a      	ldrb	r2, [r3, #2]
     a0c:	0412      	lsls	r2, r2, #16
     a0e:	4311      	orrs	r1, r2
     a10:	78da      	ldrb	r2, [r3, #3]
     a12:	0612      	lsls	r2, r2, #24
     a14:	430a      	orrs	r2, r1
     a16:	2196      	movs	r1, #150	; 0x96
     a18:	00c9      	lsls	r1, r1, #3
     a1a:	428a      	cmp	r2, r1
     a1c:	d102      	bne.n	a24 <_ZN7Serial_5setupER8USBSetup+0x60>
     a1e:	79db      	ldrb	r3, [r3, #7]
     a20:	07db      	lsls	r3, r3, #31
     a22:	d508      	bpl.n	a36 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
     a24:	f7ff fde2 	bl	5ec <cancelReset>
     a28:	e008      	b.n	a3c <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     a2a:	2e22      	cmp	r6, #34	; 0x22
     a2c:	d10a      	bne.n	a44 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
     a2e:	788a      	ldrb	r2, [r1, #2]
     a30:	4b0b      	ldr	r3, [pc, #44]	; (a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     a32:	71da      	strb	r2, [r3, #7]
     a34:	e7e4      	b.n	a00 <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
     a36:	20fa      	movs	r0, #250	; 0xfa
     a38:	f7ff fdce 	bl	5d8 <initiateReset>
			USBDevice.sendZlp(0);
     a3c:	2100      	movs	r1, #0
     a3e:	4809      	ldr	r0, [pc, #36]	; (a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     a40:	f001 f820 	bl	1a84 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
     a44:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
     a46:	2e23      	cmp	r6, #35	; 0x23
     a48:	d1cf      	bne.n	9ea <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     a4a:	78e3      	ldrb	r3, [r4, #3]
     a4c:	78a2      	ldrb	r2, [r4, #2]
     a4e:	021b      	lsls	r3, r3, #8
     a50:	4313      	orrs	r3, r2
     a52:	4a05      	ldr	r2, [pc, #20]	; (a68 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
     a54:	2100      	movs	r1, #0
     a56:	4803      	ldr	r0, [pc, #12]	; (a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     a58:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
     a5a:	f001 f813 	bl	1a84 <_ZN14USBDeviceClass7sendZlpEm>
     a5e:	e7c4      	b.n	9ea <_ZN7Serial_5setupER8USBSetup+0x26>
     a60:	2000000c 	.word	0x2000000c
     a64:	2000012c 	.word	0x2000012c
     a68:	20000008 	.word	0x20000008

00000a6c <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
     a6c:	b408      	push	{r3}
     a6e:	4b02      	ldr	r3, [pc, #8]	; (a78 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
     a70:	469c      	mov	ip, r3
     a72:	3810      	subs	r0, #16
     a74:	bc08      	pop	{r3}
     a76:	4760      	bx	ip
     a78:	000009c5 	.word	0x000009c5

00000a7c <_ZN7Serial_9availableEv>:
{
     a7c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
     a7e:	7d41      	ldrb	r1, [r0, #21]
     a80:	6a00      	ldr	r0, [r0, #32]
     a82:	3101      	adds	r1, #1
     a84:	f000 fd48 	bl	1518 <_ZN14USBDeviceClass9availableEm>
     a88:	4b03      	ldr	r3, [pc, #12]	; (a98 <_ZN7Serial_9availableEv+0x1c>)
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	3301      	adds	r3, #1
     a8e:	1e5a      	subs	r2, r3, #1
     a90:	4193      	sbcs	r3, r2
     a92:	1818      	adds	r0, r3, r0
}
     a94:	bd10      	pop	{r4, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	20000014 	.word	0x20000014

00000a9c <_ZN7Serial_5flushEv>:
{
     a9c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     a9e:	7d41      	ldrb	r1, [r0, #21]
     aa0:	6a00      	ldr	r0, [r0, #32]
     aa2:	3102      	adds	r1, #2
     aa4:	f000 fd4e 	bl	1544 <_ZN14USBDeviceClass5flushEm>
}
     aa8:	bd10      	pop	{r4, pc}

00000aaa <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
     aaa:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
     aac:	7d41      	ldrb	r1, [r0, #21]
     aae:	6a00      	ldr	r0, [r0, #32]
     ab0:	3102      	adds	r1, #2
     ab2:	f000 fd15 	bl	14e0 <_ZN14USBDeviceClass5clearEm>
}
     ab6:	bd10      	pop	{r4, pc}

00000ab8 <_ZN7Serial_5writeEPKhj>:
{
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     abc:	7d41      	ldrb	r1, [r0, #21]
{
     abe:	0004      	movs	r4, r0
     ac0:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     ac2:	3102      	adds	r1, #2
     ac4:	002a      	movs	r2, r5
     ac6:	6a00      	ldr	r0, [r0, #32]
     ac8:	f000 fe10 	bl	16ec <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     acc:	2800      	cmp	r0, #0
     ace:	d101      	bne.n	ad4 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
     ad0:	2301      	movs	r3, #1
     ad2:	6063      	str	r3, [r4, #4]
}
     ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

00000ad8 <_ZN7Serial_4peekEv>:
{
     ad8:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     ada:	4c05      	ldr	r4, [pc, #20]	; (af0 <_ZN7Serial_4peekEv+0x18>)
     adc:	6823      	ldr	r3, [r4, #0]
     ade:	1c5a      	adds	r2, r3, #1
     ae0:	d104      	bne.n	aec <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     ae2:	6803      	ldr	r3, [r0, #0]
     ae4:	695b      	ldr	r3, [r3, #20]
     ae6:	4798      	blx	r3
     ae8:	0003      	movs	r3, r0
     aea:	6020      	str	r0, [r4, #0]
}
     aec:	0018      	movs	r0, r3
     aee:	bd10      	pop	{r4, pc}
     af0:	20000014 	.word	0x20000014

00000af4 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     af4:	4a07      	ldr	r2, [pc, #28]	; (b14 <_ZN7Serial_4readEv+0x20>)
{
     af6:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
     af8:	6810      	ldr	r0, [r2, #0]
{
     afa:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     afc:	1c41      	adds	r1, r0, #1
     afe:	d003      	beq.n	b08 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     b00:	2301      	movs	r3, #1
     b02:	425b      	negs	r3, r3
     b04:	6013      	str	r3, [r2, #0]
}
     b06:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     b08:	7d59      	ldrb	r1, [r3, #21]
     b0a:	6a18      	ldr	r0, [r3, #32]
     b0c:	3101      	adds	r1, #1
     b0e:	f000 fd9d 	bl	164c <_ZN14USBDeviceClass4recvEm>
     b12:	e7f8      	b.n	b06 <_ZN7Serial_4readEv+0x12>
     b14:	20000014 	.word	0x20000014

00000b18 <_ZN7Serial_C1ER14USBDeviceClass>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b18:	23fa      	movs	r3, #250	; 0xfa
     b1a:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     b1c:	b570      	push	{r4, r5, r6, lr}
     b1e:	0004      	movs	r4, r0
     b20:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
     b22:	2303      	movs	r3, #3
     b24:	7583      	strb	r3, [r0, #22]
     b26:	0023      	movs	r3, r4
    Print() : write_error(0) {}
     b28:	2200      	movs	r2, #0
     b2a:	3328      	adds	r3, #40	; 0x28
     b2c:	6042      	str	r2, [r0, #4]
     b2e:	61a3      	str	r3, [r4, #24]
     b30:	4b0c      	ldr	r3, [pc, #48]	; (b64 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
     b32:	2002      	movs	r0, #2
     b34:	001d      	movs	r5, r3
     b36:	3344      	adds	r3, #68	; 0x44
     b38:	6123      	str	r3, [r4, #16]
     b3a:	3508      	adds	r5, #8
     b3c:	1d63      	adds	r3, r4, #5
     b3e:	61e2      	str	r2, [r4, #28]
     b40:	6025      	str	r5, [r4, #0]
     b42:	6221      	str	r1, [r4, #32]
     b44:	75e0      	strb	r0, [r4, #23]
     b46:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
     b48:	2383      	movs	r3, #131	; 0x83
     b4a:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
     b4c:	3b01      	subs	r3, #1
     b4e:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
     b50:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
     b52:	f000 f8ad 	bl	cb0 <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     b56:	0021      	movs	r1, r4
     b58:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
     b5a:	f000 f87d 	bl	c58 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
     b5e:	0020      	movs	r0, r4
     b60:	bd70      	pop	{r4, r5, r6, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00004720 	.word	0x00004720

00000b68 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
     b68:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
     b6a:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL0 = 1; }
	inline void epBank1EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     b6c:	4a09      	ldr	r2, [pc, #36]	; (b94 <_ZN7Serial_15enableInterruptEv+0x2c>)
     b6e:	2002      	movs	r0, #2
     b70:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
     b72:	3301      	adds	r3, #1
     b74:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     b76:	b2db      	uxtb	r3, r3
     b78:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     b7a:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     b7c:	18d3      	adds	r3, r2, r3
     b7e:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     b80:	31ff      	adds	r1, #255	; 0xff
     b82:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     b84:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     b86:	4320      	orrs	r0, r4
     b88:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     b8a:	7a99      	ldrb	r1, [r3, #10]
     b8c:	430a      	orrs	r2, r1
     b8e:	729a      	strb	r2, [r3, #10]
}
     b90:	bd10      	pop	{r4, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	200005e4 	.word	0x200005e4

00000b98 <_ZN7Serial_5beginEm>:
}
     b98:	4770      	bx	lr
	...

00000b9c <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
     b9c:	b510      	push	{r4, lr}
     b9e:	4902      	ldr	r1, [pc, #8]	; (ba8 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
     ba0:	4802      	ldr	r0, [pc, #8]	; (bac <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
     ba2:	f7ff ffb9 	bl	b18 <_ZN7Serial_C1ER14USBDeviceClass>
     ba6:	bd10      	pop	{r4, pc}
     ba8:	2000012c 	.word	0x2000012c
     bac:	200000c4 	.word	0x200000c4

00000bb0 <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	000e      	movs	r6, r1
	int sent = 0;
     bb4:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     bb6:	6844      	ldr	r4, [r0, #4]
     bb8:	2c00      	cmp	r4, #0
     bba:	d00b      	beq.n	bd4 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
     bbc:	6823      	ldr	r3, [r4, #0]
     bbe:	0031      	movs	r1, r6
     bc0:	685b      	ldr	r3, [r3, #4]
     bc2:	0020      	movs	r0, r4
     bc4:	4798      	blx	r3
		if (res < 0)
     bc6:	2800      	cmp	r0, #0
     bc8:	db02      	blt.n	bd0 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
     bca:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
     bcc:	68e4      	ldr	r4, [r4, #12]
     bce:	e7f3      	b.n	bb8 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
     bd0:	2501      	movs	r5, #1
     bd2:	426d      	negs	r5, r5
	}
	return sent;
}
     bd4:	0028      	movs	r0, r5
     bd6:	bd70      	pop	{r4, r5, r6, pc}

00000bd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     bdc:	6844      	ldr	r4, [r0, #4]
     bde:	2c00      	cmp	r4, #0
     be0:	d008      	beq.n	bf4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
     be2:	6823      	ldr	r3, [r4, #0]
     be4:	0029      	movs	r1, r5
     be6:	689b      	ldr	r3, [r3, #8]
     be8:	0020      	movs	r0, r4
     bea:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
     bec:	2800      	cmp	r0, #0
     bee:	d102      	bne.n	bf6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     bf0:	68e4      	ldr	r4, [r4, #12]
     bf2:	e7f4      	b.n	bde <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
     bf4:	0020      	movs	r0, r4
}
     bf6:	bd70      	pop	{r4, r5, r6, pc}

00000bf8 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
     bf8:	b570      	push	{r4, r5, r6, lr}
     bfa:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
     bfc:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
     bfe:	6844      	ldr	r4, [r0, #4]
     c00:	2c00      	cmp	r4, #0
     c02:	d009      	beq.n	c18 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
     c04:	6823      	ldr	r3, [r4, #0]
     c06:	0029      	movs	r1, r5
     c08:	0020      	movs	r0, r4
     c0a:	691b      	ldr	r3, [r3, #16]
     c0c:	4798      	blx	r3
		iSerialNum += len;
		size += len;
     c0e:	1836      	adds	r6, r6, r0
		iSerialNum += len;
     c10:	182d      	adds	r5, r5, r0
		size += len;
     c12:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
     c14:	68e4      	ldr	r4, [r4, #12]
     c16:	e7f3      	b.n	c00 <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
     c18:	0030      	movs	r0, r6
	*iSerialNum = 0;
     c1a:	702c      	strb	r4, [r5, #0]
}
     c1c:	bd70      	pop	{r4, r5, r6, pc}

00000c1e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
     c1e:	b570      	push	{r4, r5, r6, lr}
     c20:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     c22:	6844      	ldr	r4, [r0, #4]
     c24:	2c00      	cmp	r4, #0
     c26:	d008      	beq.n	c3a <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
     c28:	6823      	ldr	r3, [r4, #0]
     c2a:	0029      	movs	r1, r5
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	0020      	movs	r0, r4
     c30:	4798      	blx	r3
     c32:	2800      	cmp	r0, #0
     c34:	d102      	bne.n	c3c <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     c36:	68e4      	ldr	r4, [r4, #12]
     c38:	e7f4      	b.n	c24 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
     c3a:	0020      	movs	r0, r4
}
     c3c:	bd70      	pop	{r4, r5, r6, pc}

00000c3e <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
     c3e:	b570      	push	{r4, r5, r6, lr}
     c40:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     c42:	6844      	ldr	r4, [r0, #4]
     c44:	2c00      	cmp	r4, #0
     c46:	d006      	beq.n	c56 <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
     c48:	6823      	ldr	r3, [r4, #0]
     c4a:	0020      	movs	r0, r4
     c4c:	68db      	ldr	r3, [r3, #12]
     c4e:	0029      	movs	r1, r5
     c50:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
     c52:	68e4      	ldr	r4, [r4, #12]
     c54:	e7f6      	b.n	c44 <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
     c56:	bd70      	pop	{r4, r5, r6, pc}

00000c58 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
     c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     c5a:	798c      	ldrb	r4, [r1, #6]
     c5c:	7845      	ldrb	r5, [r0, #1]
{
     c5e:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     c60:	192a      	adds	r2, r5, r4
		return false;
     c62:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     c64:	2a07      	cmp	r2, #7
     c66:	dc1f      	bgt.n	ca8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
     c68:	685a      	ldr	r2, [r3, #4]
     c6a:	4282      	cmp	r2, r0
     c6c:	d116      	bne.n	c9c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
     c6e:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
     c70:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
     c72:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
     c74:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
     c76:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
     c78:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
     c7a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     c7c:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
     c7e:	4d0b      	ldr	r5, [pc, #44]	; (cac <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     c80:	4294      	cmp	r4, r2
     c82:	dd10      	ble.n	ca6 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
     c84:	688f      	ldr	r7, [r1, #8]
     c86:	7858      	ldrb	r0, [r3, #1]
     c88:	0096      	lsls	r6, r2, #2
     c8a:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     c8c:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
     c8e:	0086      	lsls	r6, r0, #2
		lastEp++;
     c90:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
     c92:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     c94:	b2d2      	uxtb	r2, r2
		lastEp++;
     c96:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     c98:	e7f2      	b.n	c80 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
     c9a:	0002      	movs	r2, r0
		while (current->next) {
     c9c:	68d0      	ldr	r0, [r2, #12]
     c9e:	2800      	cmp	r0, #0
     ca0:	d1fb      	bne.n	c9a <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
     ca2:	60d1      	str	r1, [r2, #12]
     ca4:	e7e4      	b.n	c70 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
     ca6:	2001      	movs	r0, #1
	// restart USB layer???
}
     ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	20000104 	.word	0x20000104

00000cb0 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
     cb0:	2201      	movs	r2, #1
     cb2:	4905      	ldr	r1, [pc, #20]	; (cc8 <_Z12PluggableUSBv+0x18>)
     cb4:	4805      	ldr	r0, [pc, #20]	; (ccc <_Z12PluggableUSBv+0x1c>)
     cb6:	680b      	ldr	r3, [r1, #0]
     cb8:	4013      	ands	r3, r2
     cba:	d103      	bne.n	cc4 <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
     cbc:	7003      	strb	r3, [r0, #0]
     cbe:	7042      	strb	r2, [r0, #1]
     cc0:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
     cc2:	600a      	str	r2, [r1, #0]
}
     cc4:	4770      	bx	lr
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	200000f8 	.word	0x200000f8
     ccc:	200000fc 	.word	0x200000fc

00000cd0 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     cd0:	4770      	bx	lr

00000cd2 <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     cd2:	b510      	push	{r4, lr}
     cd4:	0004      	movs	r4, r0
	}
     cd6:	f001 f9f1 	bl	20bc <_ZdlPv>
     cda:	0020      	movs	r0, r4
     cdc:	bd10      	pop	{r4, pc}
	...

00000ce0 <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     ce2:	2982      	cmp	r1, #130	; 0x82
     ce4:	d119      	bne.n	d1a <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ce6:	b2c3      	uxtb	r3, r0
     ce8:	4d29      	ldr	r5, [pc, #164]	; (d90 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     cea:	015a      	lsls	r2, r3, #5
     cec:	18aa      	adds	r2, r5, r2
     cee:	6991      	ldr	r1, [r2, #24]
     cf0:	4c28      	ldr	r4, [pc, #160]	; (d94 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     cf2:	0180      	lsls	r0, r0, #6
     cf4:	400c      	ands	r4, r1
     cf6:	21c0      	movs	r1, #192	; 0xc0
     cf8:	0589      	lsls	r1, r1, #22
     cfa:	4321      	orrs	r1, r4
     cfc:	6191      	str	r1, [r2, #24]
     cfe:	4926      	ldr	r1, [pc, #152]	; (d98 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d00:	3308      	adds	r3, #8
     d02:	1808      	adds	r0, r1, r0
     d04:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d06:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d08:	6828      	ldr	r0, [r5, #0]
     d0a:	015b      	lsls	r3, r3, #5
     d0c:	5c1a      	ldrb	r2, [r3, r0]
     d0e:	438a      	bics	r2, r1
     d10:	0011      	movs	r1, r2
     d12:	2230      	movs	r2, #48	; 0x30
     d14:	430a      	orrs	r2, r1
     d16:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
     d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     d1a:	2900      	cmp	r1, #0
     d1c:	d1fc      	bne.n	d18 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d1e:	26c0      	movs	r6, #192	; 0xc0
     d20:	b2c1      	uxtb	r1, r0
     d22:	4c1b      	ldr	r4, [pc, #108]	; (d90 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     d24:	014b      	lsls	r3, r1, #5
     d26:	18e3      	adds	r3, r4, r3
     d28:	689a      	ldr	r2, [r3, #8]
     d2a:	4d1a      	ldr	r5, [pc, #104]	; (d94 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
     d2c:	05b6      	lsls	r6, r6, #22
     d2e:	402a      	ands	r2, r5
     d30:	4332      	orrs	r2, r6
     d32:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     d34:	4a19      	ldr	r2, [pc, #100]	; (d9c <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
     d36:	0180      	lsls	r0, r0, #6
     d38:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d3a:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     d3c:	000a      	movs	r2, r1
     d3e:	2707      	movs	r7, #7
     d40:	6824      	ldr	r4, [r4, #0]
     d42:	3208      	adds	r2, #8
     d44:	0152      	lsls	r2, r2, #5
     d46:	5d11      	ldrb	r1, [r2, r4]
     d48:	43b9      	bics	r1, r7
     d4a:	000f      	movs	r7, r1
     d4c:	2101      	movs	r1, #1
     d4e:	4339      	orrs	r1, r7
     d50:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d52:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     d54:	4910      	ldr	r1, [pc, #64]	; (d98 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
     d56:	403d      	ands	r5, r7
     d58:	1808      	adds	r0, r1, r0
     d5a:	432e      	orrs	r6, r5
     d5c:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d5e:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d60:	2070      	movs	r0, #112	; 0x70
     d62:	5d11      	ldrb	r1, [r2, r4]
     d64:	4381      	bics	r1, r0
     d66:	0008      	movs	r0, r1
     d68:	2110      	movs	r1, #16
     d6a:	4301      	orrs	r1, r0
     d6c:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d6e:	6899      	ldr	r1, [r3, #8]
     d70:	480b      	ldr	r0, [pc, #44]	; (da0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d72:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d74:	4008      	ands	r0, r1
     d76:	2180      	movs	r1, #128	; 0x80
     d78:	0349      	lsls	r1, r1, #13
     d7a:	4301      	orrs	r1, r0
     d7c:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     d7e:	6899      	ldr	r1, [r3, #8]
     d80:	0b89      	lsrs	r1, r1, #14
     d82:	0389      	lsls	r1, r1, #14
     d84:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d86:	2340      	movs	r3, #64	; 0x40
     d88:	7911      	ldrb	r1, [r2, #4]
     d8a:	430b      	orrs	r3, r1
     d8c:	7113      	strb	r3, [r2, #4]
     d8e:	e7c3      	b.n	d18 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
     d90:	200005e4 	.word	0x200005e4
     d94:	8fffffff 	.word	0x8fffffff
     d98:	20000158 	.word	0x20000158
     d9c:	20000318 	.word	0x20000318
     da0:	f0003fff 	.word	0xf0003fff

00000da4 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     da4:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     da8:	6003      	str	r3, [r0, #0]
     daa:	2301      	movs	r3, #1
     dac:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     dae:	b672      	cpsid	i
	}
     db0:	4770      	bx	lr

00000db2 <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     db2:	6803      	ldr	r3, [r0, #0]
     db4:	2b00      	cmp	r3, #0
     db6:	d102      	bne.n	dbe <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     db8:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     dba:	f3bf 8f6f 	isb	sy
	}
     dbe:	4770      	bx	lr

00000dc0 <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
     dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     dc2:	0006      	movs	r6, r0
     dc4:	36fc      	adds	r6, #252	; 0xfc
     dc6:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
     dc8:	0004      	movs	r4, r0
		if (current == 0) {
     dca:	2b00      	cmp	r3, #0
     dcc:	d118      	bne.n	e00 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
     dce:	27b2      	movs	r7, #178	; 0xb2
     dd0:	007f      	lsls	r7, r7, #1
     dd2:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
     dd4:	4668      	mov	r0, sp
     dd6:	f7ff ffe5 	bl	da4 <_ZN7__GuardC1Ev>
     dda:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
     ddc:	b2ed      	uxtb	r5, r5
			synchronized {
     dde:	3b01      	subs	r3, #1
     de0:	d302      	bcc.n	de8 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
     de2:	5de5      	ldrb	r5, [r4, r7]
     de4:	b2ed      	uxtb	r5, r5
     de6:	e7fa      	b.n	dde <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
     de8:	4668      	mov	r0, sp
     dea:	9301      	str	r3, [sp, #4]
     dec:	f7ff ffe1 	bl	db2 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     df0:	2d00      	cmp	r5, #0
     df2:	d101      	bne.n	df8 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
     df4:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
     df8:	6e70      	ldr	r0, [r6, #100]	; 0x64
     dfa:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
     dfc:	1ac0      	subs	r0, r0, r3
     dfe:	e7fa      	b.n	df6 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
     e00:	4668      	mov	r0, sp
     e02:	f7ff ffcf 	bl	da4 <_ZN7__GuardC1Ev>
				ready = ready1;
     e06:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
     e08:	2500      	movs	r5, #0
     e0a:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     e0c:	0052      	lsls	r2, r2, #1
			synchronized {
     e0e:	3b01      	subs	r3, #1
     e10:	d302      	bcc.n	e18 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
     e12:	5ca5      	ldrb	r5, [r4, r2]
     e14:	b2ed      	uxtb	r5, r5
			synchronized {
     e16:	e7fa      	b.n	e0e <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
     e18:	4668      	mov	r0, sp
     e1a:	9301      	str	r3, [sp, #4]
     e1c:	f7ff ffc9 	bl	db2 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     e20:	2d00      	cmp	r5, #0
     e22:	d0e7      	beq.n	df4 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
     e24:	23d6      	movs	r3, #214	; 0xd6
     e26:	005b      	lsls	r3, r3, #1
     e28:	58e0      	ldr	r0, [r4, r3]
     e2a:	3b04      	subs	r3, #4
     e2c:	58e3      	ldr	r3, [r4, r3]
     e2e:	e7e5      	b.n	dfc <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

00000e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
     e30:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
     e32:	6844      	ldr	r4, [r0, #4]
     e34:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e36:	6943      	ldr	r3, [r0, #20]
     e38:	480b      	ldr	r0, [pc, #44]	; (e68 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
     e3a:	b2db      	uxtb	r3, r3
     e3c:	015a      	lsls	r2, r3, #5
     e3e:	18a2      	adds	r2, r4, r2
     e40:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e42:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e44:	4008      	ands	r0, r1
     e46:	2180      	movs	r1, #128	; 0x80
     e48:	0349      	lsls	r1, r1, #13
     e4a:	4301      	orrs	r1, r0
     e4c:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e4e:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e50:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e52:	0b89      	lsrs	r1, r1, #14
     e54:	0389      	lsls	r1, r1, #14
     e56:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e58:	6822      	ldr	r2, [r4, #0]
     e5a:	18d3      	adds	r3, r2, r3
     e5c:	2240      	movs	r2, #64	; 0x40
     e5e:	7919      	ldrb	r1, [r3, #4]
     e60:	430a      	orrs	r2, r1
     e62:	711a      	strb	r2, [r3, #4]
	}
     e64:	bd10      	pop	{r4, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	f0003fff 	.word	0xf0003fff

00000e6c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
     e6e:	0005      	movs	r5, r0
     e70:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     e72:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
     e74:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     e76:	0019      	movs	r1, r3
	virtual void handleEndpoint()
     e78:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     e7a:	3108      	adds	r1, #8
     e7c:	6810      	ldr	r0, [r2, #0]
     e7e:	0149      	lsls	r1, r1, #5
     e80:	1841      	adds	r1, r0, r1
     e82:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     e84:	07c9      	lsls	r1, r1, #31
     e86:	d511      	bpl.n	eac <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e88:	015b      	lsls	r3, r3, #5
     e8a:	18d2      	adds	r2, r2, r3
     e8c:	6893      	ldr	r3, [r2, #8]
     e8e:	049b      	lsls	r3, r3, #18
     e90:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
     e92:	d10c      	bne.n	eae <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
     e94:	0020      	movs	r0, r4
     e96:	f7ff ffcb 	bl	e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
     e9a:	6863      	ldr	r3, [r4, #4]
     e9c:	681a      	ldr	r2, [r3, #0]
     e9e:	696b      	ldr	r3, [r5, #20]
     ea0:	b2db      	uxtb	r3, r3
     ea2:	3308      	adds	r3, #8
     ea4:	015b      	lsls	r3, r3, #5
     ea6:	18d3      	adds	r3, r2, r3
     ea8:	227f      	movs	r2, #127	; 0x7f
     eaa:	71da      	strb	r2, [r3, #7]
	}
     eac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
     eae:	69e9      	ldr	r1, [r5, #28]
     eb0:	2900      	cmp	r1, #0
     eb2:	d123      	bne.n	efc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
     eb4:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     eb6:	0023      	movs	r3, r4
				incoming = 1;
     eb8:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     eba:	3369      	adds	r3, #105	; 0x69
     ebc:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
     ebe:	61ee      	str	r6, [r5, #28]
				synchronized {
     ec0:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     ec2:	6053      	str	r3, [r2, #4]
					ready0 = true;
     ec4:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
     ec6:	f7ff ff6d 	bl	da4 <_ZN7__GuardC1Ev>
					ready0 = true;
     eca:	007f      	lsls	r7, r7, #1
					notify = ready1;
     ecc:	21b2      	movs	r1, #178	; 0xb2
     ece:	9b01      	ldr	r3, [sp, #4]
     ed0:	31ff      	adds	r1, #255	; 0xff
     ed2:	3b01      	subs	r3, #1
				synchronized {
     ed4:	1c5a      	adds	r2, r3, #1
     ed6:	d038      	beq.n	f4a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
     ed8:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
     eda:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
     edc:	0052      	lsls	r2, r2, #1
     ede:	5ca2      	ldrb	r2, [r4, r2]
     ee0:	1e58      	subs	r0, r3, #1
     ee2:	b2d2      	uxtb	r2, r2
     ee4:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     ee6:	5c62      	ldrb	r2, [r4, r1]
     ee8:	4684      	mov	ip, r0
     eea:	2a00      	cmp	r2, #0
     eec:	d104      	bne.n	ef8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
     eee:	0020      	movs	r0, r4
     ef0:	9301      	str	r3, [sp, #4]
     ef2:	f7ff ff9d 	bl	e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     ef6:	e7e9      	b.n	ecc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
     ef8:	4663      	mov	r3, ip
     efa:	e7eb      	b.n	ed4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
     efc:	21d6      	movs	r1, #214	; 0xd6
     efe:	0049      	lsls	r1, r1, #1
     f00:	5063      	str	r3, [r4, r1]
				incoming = 0;
     f02:	2300      	movs	r3, #0
     f04:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
     f06:	0023      	movs	r3, r4
     f08:	331d      	adds	r3, #29
     f0a:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f0c:	6053      	str	r3, [r2, #4]
				synchronized {
     f0e:	4668      	mov	r0, sp
					ready1 = true;
     f10:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
     f12:	f7ff ff47 	bl	da4 <_ZN7__GuardC1Ev>
					ready1 = true;
     f16:	2701      	movs	r7, #1
     f18:	0076      	lsls	r6, r6, #1
					notify = ready0;
     f1a:	21b2      	movs	r1, #178	; 0xb2
     f1c:	9b01      	ldr	r3, [sp, #4]
     f1e:	31ff      	adds	r1, #255	; 0xff
     f20:	3b01      	subs	r3, #1
				synchronized {
     f22:	1c5a      	adds	r2, r3, #1
     f24:	d011      	beq.n	f4a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
     f26:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
     f28:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
     f2a:	0052      	lsls	r2, r2, #1
     f2c:	5ca2      	ldrb	r2, [r4, r2]
     f2e:	1e58      	subs	r0, r3, #1
     f30:	b2d2      	uxtb	r2, r2
     f32:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     f34:	5c62      	ldrb	r2, [r4, r1]
     f36:	4684      	mov	ip, r0
     f38:	2a00      	cmp	r2, #0
     f3a:	d104      	bne.n	f46 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
     f3c:	0020      	movs	r0, r4
     f3e:	9301      	str	r3, [sp, #4]
     f40:	f7ff ff76 	bl	e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     f44:	e7e9      	b.n	f1a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
     f46:	4663      	mov	r3, ip
     f48:	e7eb      	b.n	f22 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
     f4a:	4668      	mov	r0, sp
     f4c:	9301      	str	r3, [sp, #4]
     f4e:	f7ff ff30 	bl	db2 <_ZN7__GuardD1Ev>
     f52:	e7a2      	b.n	e9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

00000f54 <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
     f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     f56:	0005      	movs	r5, r0
		synchronized {
     f58:	4668      	mov	r0, sp
     f5a:	002c      	movs	r4, r5
     f5c:	f7ff ff22 	bl	da4 <_ZN7__GuardC1Ev>
		uint32_t len = 0;
     f60:	2700      	movs	r7, #0

template <int N>
int RingBufferN<N>::availableForStore()
{
  if (_iHead >= _iTail)
    return N - 1 - _iHead + _iTail;
     f62:	22ff      	movs	r2, #255	; 0xff
     f64:	9b01      	ldr	r3, [sp, #4]
     f66:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
     f68:	3b01      	subs	r3, #1
     f6a:	d30d      	bcc.n	f88 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
     f6c:	68e0      	ldr	r0, [r4, #12]
     f6e:	6921      	ldr	r1, [r4, #16]
     f70:	4288      	cmp	r0, r1
     f72:	db04      	blt.n	f7e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
     f74:	68e7      	ldr	r7, [r4, #12]
     f76:	6920      	ldr	r0, [r4, #16]
     f78:	1bd7      	subs	r7, r2, r7
     f7a:	183f      	adds	r7, r7, r0
     f7c:	e7f4      	b.n	f68 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
  else
    return _iTail - _iHead - 1;
     f7e:	6927      	ldr	r7, [r4, #16]
     f80:	68e1      	ldr	r1, [r4, #12]
     f82:	1a7f      	subs	r7, r7, r1
     f84:	3f01      	subs	r7, #1
     f86:	e7ef      	b.n	f68 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
     f88:	4668      	mov	r0, sp
     f8a:	9301      	str	r3, [sp, #4]
     f8c:	f7ff ff11 	bl	db2 <_ZN7__GuardD1Ev>
		if (current == 0) {
     f90:	69a3      	ldr	r3, [r4, #24]
			synchronized {
     f92:	4668      	mov	r0, sp
		if (current == 0) {
     f94:	2b00      	cmp	r3, #0
     f96:	d141      	bne.n	101c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
     f98:	f7ff ff04 	bl	da4 <_ZN7__GuardC1Ev>
				if (!ready0) {
     f9c:	21b2      	movs	r1, #178	; 0xb2
     f9e:	9b01      	ldr	r3, [sp, #4]
     fa0:	0049      	lsls	r1, r1, #1
     fa2:	3b01      	subs	r3, #1
			synchronized {
     fa4:	1c5a      	adds	r2, r3, #1
     fa6:	d00c      	beq.n	fc2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
     fa8:	5c6e      	ldrb	r6, [r5, r1]
     faa:	1e5a      	subs	r2, r3, #1
     fac:	b2f6      	uxtb	r6, r6
     fae:	2e00      	cmp	r6, #0
     fb0:	d105      	bne.n	fbe <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
     fb2:	4668      	mov	r0, sp
     fb4:	9301      	str	r3, [sp, #4]
     fb6:	f7ff fefc 	bl	db2 <_ZN7__GuardD1Ev>
	}
     fba:	0030      	movs	r0, r6
     fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     fbe:	0013      	movs	r3, r2
     fc0:	e7f0      	b.n	fa4 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
     fc2:	4668      	mov	r0, sp
     fc4:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
     fc6:	2600      	movs	r6, #0
			synchronized {
     fc8:	f7ff fef3 	bl	db2 <_ZN7__GuardD1Ev>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     fcc:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
     fce:	42be      	cmp	r6, r7
     fd0:	d003      	beq.n	fda <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
     fd2:	6e23      	ldr	r3, [r4, #96]	; 0x60
     fd4:	6e61      	ldr	r1, [r4, #100]	; 0x64
     fd6:	428b      	cmp	r3, r1
     fd8:	d360      	bcc.n	109c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
     fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
     fdc:	6e22      	ldr	r2, [r4, #96]	; 0x60
     fde:	429a      	cmp	r2, r3
     fe0:	d1eb      	bne.n	fba <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
     fe2:	2300      	movs	r3, #0
     fe4:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
     fe6:	3301      	adds	r3, #1
     fe8:	61a3      	str	r3, [r4, #24]
				synchronized {
     fea:	4668      	mov	r0, sp
					ready0 = false;
     fec:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
     fee:	f7ff fed9 	bl	da4 <_ZN7__GuardC1Ev>
					ready0 = false;
     ff2:	0064      	lsls	r4, r4, #1
					if (notify) {
     ff4:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
     ff6:	2100      	movs	r1, #0
     ff8:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
     ffa:	32ff      	adds	r2, #255	; 0xff
     ffc:	3b01      	subs	r3, #1
				synchronized {
     ffe:	1c58      	adds	r0, r3, #1
    1000:	d0d7      	beq.n	fb2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
    1002:	5529      	strb	r1, [r5, r4]
					if (notify) {
    1004:	5ca8      	ldrb	r0, [r5, r2]
    1006:	1e5f      	subs	r7, r3, #1
    1008:	2800      	cmp	r0, #0
    100a:	d005      	beq.n	1018 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
    100c:	54a9      	strb	r1, [r5, r2]
						release();
    100e:	0028      	movs	r0, r5
    1010:	9301      	str	r3, [sp, #4]
    1012:	f7ff ff0d 	bl	e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1016:	e7ed      	b.n	ff4 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
    1018:	003b      	movs	r3, r7
    101a:	e7f0      	b.n	ffe <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
    101c:	f7ff fec2 	bl	da4 <_ZN7__GuardC1Ev>
				if (!ready1) {
    1020:	21d8      	movs	r1, #216	; 0xd8
    1022:	9b01      	ldr	r3, [sp, #4]
    1024:	0049      	lsls	r1, r1, #1
    1026:	3b01      	subs	r3, #1
			synchronized {
    1028:	1c5a      	adds	r2, r3, #1
    102a:	d006      	beq.n	103a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
    102c:	5c6e      	ldrb	r6, [r5, r1]
    102e:	1e5a      	subs	r2, r3, #1
    1030:	b2f6      	uxtb	r6, r6
    1032:	2e00      	cmp	r6, #0
    1034:	d0bd      	beq.n	fb2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
    1036:	0013      	movs	r3, r2
    1038:	e7f6      	b.n	1028 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
    103a:	4668      	mov	r0, sp
    103c:	9301      	str	r3, [sp, #4]
    103e:	f7ff feb8 	bl	db2 <_ZN7__GuardD1Ev>
    1042:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
    1044:	2600      	movs	r6, #0
    1046:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
    1048:	42be      	cmp	r6, r7
    104a:	d005      	beq.n	1058 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
    104c:	21d6      	movs	r1, #214	; 0xd6
    104e:	0049      	lsls	r1, r1, #1
    1050:	58ab      	ldr	r3, [r5, r2]
    1052:	5869      	ldr	r1, [r5, r1]
    1054:	428b      	cmp	r3, r1
    1056:	d332      	bcc.n	10be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
    1058:	23d6      	movs	r3, #214	; 0xd6
    105a:	005b      	lsls	r3, r3, #1
    105c:	58eb      	ldr	r3, [r5, r3]
    105e:	58a9      	ldr	r1, [r5, r2]
    1060:	4299      	cmp	r1, r3
    1062:	d1aa      	bne.n	fba <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
    1064:	2300      	movs	r3, #0
				synchronized {
    1066:	4668      	mov	r0, sp
				first1 = 0;
    1068:	50ab      	str	r3, [r5, r2]
				current = 0;
    106a:	61a3      	str	r3, [r4, #24]
					ready1 = false;
    106c:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
    106e:	f7ff fe99 	bl	da4 <_ZN7__GuardC1Ev>
					ready1 = false;
    1072:	0064      	lsls	r4, r4, #1
					if (notify) {
    1074:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
    1076:	2100      	movs	r1, #0
    1078:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    107a:	32ff      	adds	r2, #255	; 0xff
    107c:	3b01      	subs	r3, #1
				synchronized {
    107e:	1c58      	adds	r0, r3, #1
    1080:	d097      	beq.n	fb2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
    1082:	5529      	strb	r1, [r5, r4]
					if (notify) {
    1084:	5ca8      	ldrb	r0, [r5, r2]
    1086:	1e5f      	subs	r7, r3, #1
    1088:	2800      	cmp	r0, #0
    108a:	d005      	beq.n	1098 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
    108c:	54a9      	strb	r1, [r5, r2]
						release();
    108e:	0028      	movs	r0, r5
    1090:	9301      	str	r3, [sp, #4]
    1092:	f7ff fecd 	bl	e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1096:	e7ed      	b.n	1074 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
    1098:	003b      	movs	r3, r7
    109a:	e7f0      	b.n	107e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
    109c:	1c59      	adds	r1, r3, #1
    109e:	18eb      	adds	r3, r5, r3
    10a0:	33ff      	adds	r3, #255	; 0xff
    10a2:	6621      	str	r1, [r4, #96]	; 0x60
    10a4:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
    10a6:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
    10a8:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
    10aa:	3301      	adds	r3, #1
    10ac:	4013      	ands	r3, r2
  if ( i != _iTail )
    10ae:	4283      	cmp	r3, r0
    10b0:	d003      	beq.n	10ba <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
    10b2:	68e0      	ldr	r0, [r4, #12]
    10b4:	1828      	adds	r0, r5, r0
    10b6:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
    10b8:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
    10ba:	3601      	adds	r6, #1
    10bc:	e787      	b.n	fce <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
    10be:	1c59      	adds	r1, r3, #1
    10c0:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
    10c2:	21ff      	movs	r1, #255	; 0xff
    10c4:	18eb      	adds	r3, r5, r3
    10c6:	3369      	adds	r3, #105	; 0x69
    10c8:	33ff      	adds	r3, #255	; 0xff
    10ca:	781b      	ldrb	r3, [r3, #0]
    10cc:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
    10ce:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
    10d0:	3301      	adds	r3, #1
    10d2:	400b      	ands	r3, r1
  if ( i != _iTail )
    10d4:	6921      	ldr	r1, [r4, #16]
    10d6:	428b      	cmp	r3, r1
    10d8:	d004      	beq.n	10e4 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
    10da:	4660      	mov	r0, ip
    10dc:	68e1      	ldr	r1, [r4, #12]
    10de:	1869      	adds	r1, r5, r1
    10e0:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
    10e2:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
    10e4:	3601      	adds	r6, #1
    10e6:	e7af      	b.n	1048 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

000010e8 <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
    10e8:	b510      	push	{r4, lr}
    10ea:	0004      	movs	r4, r0
		_recv();
    10ec:	f7ff ff32 	bl	f54 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
    10f0:	0023      	movs	r3, r4
    10f2:	33fc      	adds	r3, #252	; 0xfc
    10f4:	6919      	ldr	r1, [r3, #16]
    10f6:	68da      	ldr	r2, [r3, #12]
    10f8:	4291      	cmp	r1, r2
    10fa:	d003      	beq.n	1104 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
    10fc:	691b      	ldr	r3, [r3, #16]
    10fe:	18e4      	adds	r4, r4, r3
    1100:	7a20      	ldrb	r0, [r4, #8]
	}
    1102:	bd10      	pop	{r4, pc}
    return -1;
    1104:	2001      	movs	r0, #1
    1106:	4240      	negs	r0, r0
		return _rx_buffer.peek();
    1108:	e7fb      	b.n	1102 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

0000110a <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
    110a:	b510      	push	{r4, lr}
    110c:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
    110e:	34fc      	adds	r4, #252	; 0xfc
		_recv();
    1110:	f7ff ff20 	bl	f54 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
    1114:	68e0      	ldr	r0, [r4, #12]
    1116:	6923      	ldr	r3, [r4, #16]
    1118:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    111a:	d501      	bpl.n	1120 <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
    111c:	3001      	adds	r0, #1
    111e:	30ff      	adds	r0, #255	; 0xff
	}
    1120:	bd10      	pop	{r4, pc}

00001122 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
    1122:	b5f0      	push	{r4, r5, r6, r7, lr}
    1124:	b085      	sub	sp, #20
    1126:	9201      	str	r2, [sp, #4]
    1128:	9100      	str	r1, [sp, #0]
    112a:	0005      	movs	r5, r0
		_recv();
    112c:	f7ff ff12 	bl	f54 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
    1130:	a802      	add	r0, sp, #8
    1132:	f7ff fe37 	bl	da4 <_ZN7__GuardC1Ev>
    return -1;
    1136:	2001      	movs	r0, #1
		uint32_t i = 0;
    1138:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
    113a:	26ff      	movs	r6, #255	; 0xff
    113c:	9a03      	ldr	r2, [sp, #12]
    return -1;
    113e:	4240      	negs	r0, r0
		synchronized {
    1140:	3a01      	subs	r2, #1
    1142:	d31d      	bcc.n	1180 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
    1144:	002b      	movs	r3, r5
    1146:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
    1148:	9901      	ldr	r1, [sp, #4]
    114a:	428c      	cmp	r4, r1
    114c:	d2f8      	bcs.n	1140 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
    114e:	68d9      	ldr	r1, [r3, #12]
    1150:	691f      	ldr	r7, [r3, #16]
    1152:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
    1154:	d501      	bpl.n	115a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
    1156:	3101      	adds	r1, #1
    1158:	31ff      	adds	r1, #255	; 0xff
    115a:	2900      	cmp	r1, #0
    115c:	d0f0      	beq.n	1140 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
    115e:	6919      	ldr	r1, [r3, #16]
    1160:	68df      	ldr	r7, [r3, #12]
    1162:	468c      	mov	ip, r1
    return -1;
    1164:	0001      	movs	r1, r0
  if(_iTail == _iHead)
    1166:	45bc      	cmp	ip, r7
    1168:	d006      	beq.n	1178 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
    116a:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
    116c:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
    116e:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
    1170:	3701      	adds	r7, #1
    1172:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
    1174:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
    1176:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
    1178:	9f00      	ldr	r7, [sp, #0]
    117a:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
    117c:	3401      	adds	r4, #1
    117e:	e7e3      	b.n	1148 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
    1180:	a802      	add	r0, sp, #8
    1182:	9203      	str	r2, [sp, #12]
    1184:	f7ff fe15 	bl	db2 <_ZN7__GuardD1Ev>
	}
    1188:	0020      	movs	r0, r4
    118a:	b005      	add	sp, #20
    118c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000118e <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    118e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    1190:	466b      	mov	r3, sp
    1192:	1ddc      	adds	r4, r3, #7
    1194:	2300      	movs	r3, #0
{
    1196:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
    1198:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    119a:	f7ff fd89 	bl	cb0 <_Z12PluggableUSBv>
    119e:	0021      	movs	r1, r4
    11a0:	f7ff fd06 	bl	bb0 <_ZN13PluggableUSB_12getInterfaceEPh>
    11a4:	682b      	ldr	r3, [r5, #0]
    11a6:	1818      	adds	r0, r3, r0
    11a8:	6028      	str	r0, [r5, #0]
	return interfaces;
    11aa:	7820      	ldrb	r0, [r4, #0]
}
    11ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000011b0 <_ZN14USBDeviceClass4initEv>:
{
    11b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
    11b2:	2400      	movs	r4, #0
    11b4:	4b49      	ldr	r3, [pc, #292]	; (12dc <_ZN14USBDeviceClass4initEv+0x12c>)
	pinMode(PIN_LED_TXL, OUTPUT);
    11b6:	2101      	movs	r1, #1
{
    11b8:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    11ba:	201a      	movs	r0, #26
	txLEDPulse = 0;
    11bc:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    11be:	f000 fe49 	bl	1e54 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    11c2:	2101      	movs	r1, #1
    11c4:	201a      	movs	r0, #26
    11c6:	f000 fe91 	bl	1eec <digitalWrite>
	rxLEDPulse = 0;
    11ca:	4b45      	ldr	r3, [pc, #276]	; (12e0 <_ZN14USBDeviceClass4initEv+0x130>)
	pinMode(PIN_LED_RXL, OUTPUT);
    11cc:	2101      	movs	r1, #1
    11ce:	2019      	movs	r0, #25
	rxLEDPulse = 0;
    11d0:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    11d2:	f000 fe3f 	bl	1e54 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    11d6:	2101      	movs	r1, #1
    11d8:	2019      	movs	r0, #25
    11da:	f000 fe87 	bl	1eec <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    11de:	2320      	movs	r3, #32
    11e0:	4a40      	ldr	r2, [pc, #256]	; (12e4 <_ZN14USBDeviceClass4initEv+0x134>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    11e2:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    11e4:	69d1      	ldr	r1, [r2, #28]
    11e6:	430b      	orrs	r3, r1
    11e8:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    11ea:	2201      	movs	r2, #1
    11ec:	493e      	ldr	r1, [pc, #248]	; (12e8 <_ZN14USBDeviceClass4initEv+0x138>)
    11ee:	780b      	ldrb	r3, [r1, #0]
    11f0:	4313      	orrs	r3, r2
    11f2:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    11f4:	4b3d      	ldr	r3, [pc, #244]	; (12ec <_ZN14USBDeviceClass4initEv+0x13c>)
    11f6:	7819      	ldrb	r1, [r3, #0]
    11f8:	4381      	bics	r1, r0
    11fa:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    11fc:	2106      	movs	r1, #6
    11fe:	781c      	ldrb	r4, [r3, #0]
    1200:	4321      	orrs	r1, r4
    1202:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    1204:	493a      	ldr	r1, [pc, #232]	; (12f0 <_ZN14USBDeviceClass4initEv+0x140>)
    1206:	780c      	ldrb	r4, [r1, #0]
    1208:	4322      	orrs	r2, r4
    120a:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    120c:	781a      	ldrb	r2, [r3, #0]
    120e:	4002      	ands	r2, r0
    1210:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    1212:	2260      	movs	r2, #96	; 0x60
    1214:	7819      	ldrb	r1, [r3, #0]
    1216:	430a      	orrs	r2, r1
    1218:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    121a:	4b36      	ldr	r3, [pc, #216]	; (12f4 <_ZN14USBDeviceClass4initEv+0x144>)
    121c:	4a36      	ldr	r2, [pc, #216]	; (12f8 <_ZN14USBDeviceClass4initEv+0x148>)
    121e:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    1220:	785f      	ldrb	r7, [r3, #1]
    1222:	09ff      	lsrs	r7, r7, #7
    1224:	d1fc      	bne.n	1220 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    1226:	4835      	ldr	r0, [pc, #212]	; (12fc <_ZN14USBDeviceClass4initEv+0x14c>)
    1228:	f7fe fffe 	bl	228 <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    122c:	4e34      	ldr	r6, [pc, #208]	; (1300 <_ZN14USBDeviceClass4initEv+0x150>)
    122e:	2301      	movs	r3, #1
    1230:	0030      	movs	r0, r6
    1232:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    1234:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    1236:	7822      	ldrb	r2, [r4, #0]
    1238:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    123a:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    123c:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    123e:	0052      	lsls	r2, r2, #1
    1240:	f003 f97b 	bl	453a <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    1244:	78a3      	ldrb	r3, [r4, #2]
    1246:	07db      	lsls	r3, r3, #31
    1248:	d4fc      	bmi.n	1244 <_ZN14USBDeviceClass4initEv+0x94>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    124a:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    124c:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    124e:	4b2d      	ldr	r3, [pc, #180]	; (1304 <_ZN14USBDeviceClass4initEv+0x154>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    1250:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    1256:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    1258:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    125a:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    125c:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    125e:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    1260:	4282      	cmp	r2, r0
    1262:	d100      	bne.n	1266 <_ZN14USBDeviceClass4initEv+0xb6>
		pad_transn = 5;
    1264:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    1266:	291f      	cmp	r1, #31
    1268:	d100      	bne.n	126c <_ZN14USBDeviceClass4initEv+0xbc>
		pad_transp = 29;
    126a:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    126c:	2b07      	cmp	r3, #7
    126e:	d100      	bne.n	1272 <_ZN14USBDeviceClass4initEv+0xc2>
		pad_trim = 3;
    1270:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    1272:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    1274:	4f24      	ldr	r7, [pc, #144]	; (1308 <_ZN14USBDeviceClass4initEv+0x158>)
    1276:	4002      	ands	r2, r0
    1278:	403e      	ands	r6, r7
    127a:	0192      	lsls	r2, r2, #6
    127c:	4332      	orrs	r2, r6
    127e:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    1280:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1282:	4001      	ands	r1, r0
    1284:	4382      	bics	r2, r0
    1286:	000e      	movs	r6, r1
    1288:	0011      	movs	r1, r2
    128a:	4331      	orrs	r1, r6
    128c:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    128e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1290:	0319      	lsls	r1, r3, #12
    1292:	4b1e      	ldr	r3, [pc, #120]	; (130c <_ZN14USBDeviceClass4initEv+0x15c>)
	SerialUSB.begin(0);
    1294:	481e      	ldr	r0, [pc, #120]	; (1310 <_ZN14USBDeviceClass4initEv+0x160>)
    1296:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1298:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    129a:	430b      	orrs	r3, r1
    129c:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    129e:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    12a0:	21c1      	movs	r1, #193	; 0xc1
    12a2:	4013      	ands	r3, r2
    12a4:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    12a6:	2304      	movs	r3, #4
    12a8:	7822      	ldrb	r2, [r4, #0]
    12aa:	0089      	lsls	r1, r1, #2
    12ac:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    12ae:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    12b0:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    12b2:	8923      	ldrh	r3, [r4, #8]
    12b4:	4393      	bics	r3, r2
    12b6:	4a17      	ldr	r2, [pc, #92]	; (1314 <_ZN14USBDeviceClass4initEv+0x164>)
    12b8:	8123      	strh	r3, [r4, #8]
    12ba:	5853      	ldr	r3, [r2, r1]
    12bc:	021b      	lsls	r3, r3, #8
    12be:	0a1b      	lsrs	r3, r3, #8
    12c0:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12c2:	2380      	movs	r3, #128	; 0x80
    12c4:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    12c6:	7822      	ldrb	r2, [r4, #0]
    12c8:	3b7e      	subs	r3, #126	; 0x7e
    12ca:	4313      	orrs	r3, r2
    12cc:	7023      	strb	r3, [r4, #0]
	initialized = true;
    12ce:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    12d0:	2100      	movs	r1, #0
	initialized = true;
    12d2:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    12d4:	f7ff fc60 	bl	b98 <_ZN7Serial_5beginEm>
}
    12d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	2000014d 	.word	0x2000014d
    12e0:	2000014c 	.word	0x2000014c
    12e4:	40000400 	.word	0x40000400
    12e8:	41004458 	.word	0x41004458
    12ec:	4100443c 	.word	0x4100443c
    12f0:	41004459 	.word	0x41004459
    12f4:	40000c00 	.word	0x40000c00
    12f8:	00004006 	.word	0x00004006
    12fc:	00001ce1 	.word	0x00001ce1
    1300:	200005e4 	.word	0x200005e4
    1304:	00806024 	.word	0x00806024
    1308:	fffff83f 	.word	0xfffff83f
    130c:	ffff8fff 	.word	0xffff8fff
    1310:	200000c4 	.word	0x200000c4
    1314:	e000e100 	.word	0xe000e100

00001318 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    1318:	7800      	ldrb	r0, [r0, #0]
    131a:	2800      	cmp	r0, #0
    131c:	d010      	beq.n	1340 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    131e:	2101      	movs	r1, #1
    1320:	4b08      	ldr	r3, [pc, #32]	; (1344 <_ZN14USBDeviceClass6attachEv+0x2c>)
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	891a      	ldrh	r2, [r3, #8]
    1326:	438a      	bics	r2, r1
    1328:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    132a:	2208      	movs	r2, #8
    132c:	8b19      	ldrh	r1, [r3, #24]
    132e:	430a      	orrs	r2, r1
    1330:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    1332:	2204      	movs	r2, #4
    1334:	8b19      	ldrh	r1, [r3, #24]
    1336:	430a      	orrs	r2, r1
    1338:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    133a:	2200      	movs	r2, #0
    133c:	4b02      	ldr	r3, [pc, #8]	; (1348 <_ZN14USBDeviceClass6attachEv+0x30>)
    133e:	601a      	str	r2, [r3, #0]
}
    1340:	4770      	bx	lr
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	200005e4 	.word	0x200005e4
    1348:	200005dc 	.word	0x200005dc

0000134c <_ZN14USBDeviceClass10setAddressEm>:
{
    134c:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    134e:	4a0f      	ldr	r2, [pc, #60]	; (138c <_ZN14USBDeviceClass10setAddressEm+0x40>)
    1350:	6993      	ldr	r3, [r2, #24]
    1352:	0b9b      	lsrs	r3, r3, #14
    1354:	039b      	lsls	r3, r3, #14
    1356:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1358:	6813      	ldr	r3, [r2, #0]
    135a:	2202      	movs	r2, #2
    135c:	33ff      	adds	r3, #255	; 0xff
    135e:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1360:	7998      	ldrb	r0, [r3, #6]
    1362:	3a82      	subs	r2, #130	; 0x82
    1364:	4302      	orrs	r2, r0
    1366:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1368:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    136a:	0792      	lsls	r2, r2, #30
    136c:	d5fc      	bpl.n	1368 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    136e:	247f      	movs	r4, #127	; 0x7f
    1370:	4a07      	ldr	r2, [pc, #28]	; (1390 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    1372:	4021      	ands	r1, r4
    1374:	7a93      	ldrb	r3, [r2, #10]
    1376:	0008      	movs	r0, r1
    1378:	43a3      	bics	r3, r4
    137a:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    137c:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    137e:	4301      	orrs	r1, r0
    1380:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1382:	7a91      	ldrb	r1, [r2, #10]
    1384:	425b      	negs	r3, r3
    1386:	430b      	orrs	r3, r1
    1388:	7293      	strb	r3, [r2, #10]
}
    138a:	bd10      	pop	{r4, pc}
    138c:	200005e4 	.word	0x200005e4
    1390:	41005000 	.word	0x41005000

00001394 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    1394:	b510      	push	{r4, lr}
    1396:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    1398:	f7ff fc8a 	bl	cb0 <_Z12PluggableUSBv>
    139c:	0021      	movs	r1, r4
    139e:	f7ff fc3e 	bl	c1e <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    13a2:	2800      	cmp	r0, #0
    13a4:	d104      	bne.n	13b0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    13a6:	4a03      	ldr	r2, [pc, #12]	; (13b4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    13a8:	6993      	ldr	r3, [r2, #24]
    13aa:	0b9b      	lsrs	r3, r3, #14
    13ac:	039b      	lsls	r3, r3, #14
    13ae:	6193      	str	r3, [r2, #24]
}
    13b0:	bd10      	pop	{r4, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	200005e4 	.word	0x200005e4

000013b8 <_ZN14USBDeviceClass6initEPEmm>:
{
    13b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ba:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    13bc:	2a83      	cmp	r2, #131	; 0x83
    13be:	d119      	bne.n	13f4 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    13c0:	b2cb      	uxtb	r3, r1
    13c2:	4c39      	ldr	r4, [pc, #228]	; (14a8 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    13c4:	015a      	lsls	r2, r3, #5
    13c6:	18a2      	adds	r2, r4, r2
    13c8:	6991      	ldr	r1, [r2, #24]
    13ca:	4838      	ldr	r0, [pc, #224]	; (14ac <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    13cc:	01ad      	lsls	r5, r5, #6
    13ce:	4008      	ands	r0, r1
    13d0:	21c0      	movs	r1, #192	; 0xc0
    13d2:	0589      	lsls	r1, r1, #22
    13d4:	4301      	orrs	r1, r0
    13d6:	6191      	str	r1, [r2, #24]
    13d8:	4935      	ldr	r1, [pc, #212]	; (14b0 <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    13da:	6820      	ldr	r0, [r4, #0]
    13dc:	194d      	adds	r5, r1, r5
    13de:	2170      	movs	r1, #112	; 0x70
    13e0:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    13e2:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    13e4:	015b      	lsls	r3, r3, #5
    13e6:	5c1a      	ldrb	r2, [r3, r0]
    13e8:	438a      	bics	r2, r1
    13ea:	0011      	movs	r1, r2
    13ec:	2240      	movs	r2, #64	; 0x40
    13ee:	430a      	orrs	r2, r1
    13f0:	541a      	strb	r2, [r3, r0]
}
    13f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    13f4:	2a02      	cmp	r2, #2
    13f6:	d152      	bne.n	149e <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    13f8:	4a2e      	ldr	r2, [pc, #184]	; (14b4 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    13fa:	008b      	lsls	r3, r1, #2
    13fc:	5898      	ldr	r0, [r3, r2]
    13fe:	2800      	cmp	r0, #0
    1400:	d002      	beq.n	1408 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    1402:	6803      	ldr	r3, [r0, #0]
    1404:	695b      	ldr	r3, [r3, #20]
    1406:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    1408:	20da      	movs	r0, #218	; 0xda
    140a:	0040      	lsls	r0, r0, #1
    140c:	f000 fe52 	bl	20b4 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    1410:	2280      	movs	r2, #128	; 0x80
    1412:	0004      	movs	r4, r0
		notify(false)
    1414:	4e24      	ldr	r6, [pc, #144]	; (14a8 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    1416:	4b28      	ldr	r3, [pc, #160]	; (14b8 <_ZN14USBDeviceClass6initEPEmm+0x100>)
    1418:	6046      	str	r6, [r0, #4]
    141a:	6003      	str	r3, [r0, #0]
    141c:	0052      	lsls	r2, r2, #1
    141e:	2100      	movs	r1, #0
    1420:	3008      	adds	r0, #8
    1422:	f003 f88a 	bl	453a <memset>
  _iHead = 0;
    1426:	0022      	movs	r2, r4
    1428:	2300      	movs	r3, #0
    142a:	32fc      	adds	r2, #252	; 0xfc
    142c:	60d3      	str	r3, [r2, #12]
    142e:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    1430:	6113      	str	r3, [r2, #16]
    1432:	6613      	str	r3, [r2, #96]	; 0x60
    1434:	6193      	str	r3, [r2, #24]
    1436:	61d3      	str	r3, [r2, #28]
    1438:	6653      	str	r3, [r2, #100]	; 0x64
    143a:	22b2      	movs	r2, #178	; 0xb2
    143c:	0052      	lsls	r2, r2, #1
    143e:	54a3      	strb	r3, [r4, r2]
    1440:	3244      	adds	r2, #68	; 0x44
    1442:	50a3      	str	r3, [r4, r2]
    1444:	3204      	adds	r2, #4
    1446:	50a3      	str	r3, [r4, r2]
    1448:	3204      	adds	r2, #4
    144a:	54a3      	strb	r3, [r4, r2]
    144c:	22b2      	movs	r2, #178	; 0xb2
    144e:	32ff      	adds	r2, #255	; 0xff
    1450:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1452:	b2ea      	uxtb	r2, r5
    1454:	0150      	lsls	r0, r2, #5
    1456:	1831      	adds	r1, r6, r0
    1458:	688b      	ldr	r3, [r1, #8]
    145a:	4f14      	ldr	r7, [pc, #80]	; (14ac <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    145c:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    145e:	401f      	ands	r7, r3
    1460:	23c0      	movs	r3, #192	; 0xc0
    1462:	059b      	lsls	r3, r3, #22
    1464:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1466:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1468:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    146a:	6833      	ldr	r3, [r6, #0]
    146c:	0152      	lsls	r2, r2, #5
    146e:	5cd6      	ldrb	r6, [r2, r3]
    1470:	00ad      	lsls	r5, r5, #2
    1472:	43be      	bics	r6, r7
    1474:	46b4      	mov	ip, r6
    1476:	2603      	movs	r6, #3
    1478:	4667      	mov	r7, ip
    147a:	433e      	orrs	r6, r7
    147c:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    147e:	0022      	movs	r2, r4
    1480:	321d      	adds	r2, #29
    1482:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1484:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1486:	2201      	movs	r2, #1
    1488:	181b      	adds	r3, r3, r0
    148a:	33ff      	adds	r3, #255	; 0xff
    148c:	7a99      	ldrb	r1, [r3, #10]
		release();
    148e:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1490:	430a      	orrs	r2, r1
    1492:	729a      	strb	r2, [r3, #10]
		release();
    1494:	f7ff fccc 	bl	e30 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1498:	4b06      	ldr	r3, [pc, #24]	; (14b4 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    149a:	515c      	str	r4, [r3, r5]
    149c:	e7a9      	b.n	13f2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    149e:	0011      	movs	r1, r2
    14a0:	0028      	movs	r0, r5
    14a2:	f7ff fc1d 	bl	ce0 <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    14a6:	e7a4      	b.n	13f2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    14a8:	200005e4 	.word	0x200005e4
    14ac:	8fffffff 	.word	0x8fffffff
    14b0:	20000158 	.word	0x20000158
    14b4:	20000130 	.word	0x20000130
    14b8:	00004780 	.word	0x00004780

000014bc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    14bc:	b570      	push	{r4, r5, r6, lr}
    14be:	0005      	movs	r5, r0
    14c0:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    14c2:	4b06      	ldr	r3, [pc, #24]	; (14dc <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    14c4:	00a2      	lsls	r2, r4, #2
    14c6:	58d2      	ldr	r2, [r2, r3]
    14c8:	2a00      	cmp	r2, #0
    14ca:	d006      	beq.n	14da <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    14cc:	0021      	movs	r1, r4
    14ce:	0028      	movs	r0, r5
    14d0:	3401      	adds	r4, #1
    14d2:	f7ff ff71 	bl	13b8 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    14d6:	2c0a      	cmp	r4, #10
    14d8:	d1f3      	bne.n	14c2 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    14da:	bd70      	pop	{r4, r5, r6, pc}
    14dc:	20000104 	.word	0x20000104

000014e0 <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    14e0:	4b0b      	ldr	r3, [pc, #44]	; (1510 <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    14e2:	b2ca      	uxtb	r2, r1
    14e4:	480b      	ldr	r0, [pc, #44]	; (1514 <_ZN14USBDeviceClass5clearEm+0x34>)
    14e6:	0189      	lsls	r1, r1, #6
    14e8:	1859      	adds	r1, r3, r1
    14ea:	0153      	lsls	r3, r2, #5
    14ec:	18c3      	adds	r3, r0, r3
    14ee:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    14f0:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    14f2:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    14f4:	0b89      	lsrs	r1, r1, #14
    14f6:	0389      	lsls	r1, r1, #14
    14f8:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    14fa:	6803      	ldr	r3, [r0, #0]
    14fc:	0152      	lsls	r2, r2, #5
    14fe:	189a      	adds	r2, r3, r2
    1500:	2302      	movs	r3, #2
    1502:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1504:	7951      	ldrb	r1, [r2, #5]
    1506:	3b82      	subs	r3, #130	; 0x82
    1508:	430b      	orrs	r3, r1
    150a:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    150c:	4770      	bx	lr
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	20000158 	.word	0x20000158
    1514:	200005e4 	.word	0x200005e4

00001518 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    1518:	4b08      	ldr	r3, [pc, #32]	; (153c <_ZN14USBDeviceClass9availableEm+0x24>)
    151a:	008a      	lsls	r2, r1, #2
    151c:	58d0      	ldr	r0, [r2, r3]
{
    151e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    1520:	2800      	cmp	r0, #0
    1522:	d003      	beq.n	152c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    1524:	6803      	ldr	r3, [r0, #0]
    1526:	689b      	ldr	r3, [r3, #8]
    1528:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    152a:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    152c:	b2c9      	uxtb	r1, r1
    152e:	4b04      	ldr	r3, [pc, #16]	; (1540 <_ZN14USBDeviceClass9availableEm+0x28>)
    1530:	0149      	lsls	r1, r1, #5
    1532:	1859      	adds	r1, r3, r1
    1534:	6888      	ldr	r0, [r1, #8]
    1536:	0480      	lsls	r0, r0, #18
    1538:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    153a:	e7f6      	b.n	152a <_ZN14USBDeviceClass9availableEm+0x12>
    153c:	20000130 	.word	0x20000130
    1540:	200005e4 	.word	0x200005e4

00001544 <_ZN14USBDeviceClass5flushEm>:
{
    1544:	b510      	push	{r4, lr}
    1546:	000c      	movs	r4, r1
	if (available(ep)) {
    1548:	f7ff ffe6 	bl	1518 <_ZN14USBDeviceClass9availableEm>
    154c:	2800      	cmp	r0, #0
    154e:	d00c      	beq.n	156a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1550:	4b06      	ldr	r3, [pc, #24]	; (156c <_ZN14USBDeviceClass5flushEm+0x28>)
    1552:	b2e4      	uxtb	r4, r4
    1554:	681b      	ldr	r3, [r3, #0]
    1556:	3408      	adds	r4, #8
    1558:	0164      	lsls	r4, r4, #5
    155a:	191c      	adds	r4, r3, r4
    155c:	2380      	movs	r3, #128	; 0x80
    155e:	7962      	ldrb	r2, [r4, #5]
    1560:	425b      	negs	r3, r3
    1562:	4313      	orrs	r3, r2
    1564:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1566:	2302      	movs	r3, #2
    1568:	71e3      	strb	r3, [r4, #7]
}
    156a:	bd10      	pop	{r4, pc}
    156c:	200005e4 	.word	0x200005e4

00001570 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    1570:	b5f0      	push	{r4, r5, r6, r7, lr}
    1572:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    1574:	4b30      	ldr	r3, [pc, #192]	; (1638 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    1576:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1578:	681b      	ldr	r3, [r3, #0]
{
    157a:	0007      	movs	r7, r0
    157c:	000d      	movs	r5, r1
    157e:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    1580:	2b00      	cmp	r3, #0
    1582:	d056      	beq.n	1632 <_ZN14USBDeviceClass4recvEmPvm+0xc2>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    1584:	4e2d      	ldr	r6, [pc, #180]	; (163c <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    1586:	7831      	ldrb	r1, [r6, #0]
    1588:	b2c9      	uxtb	r1, r1
    158a:	2900      	cmp	r1, #0
    158c:	d102      	bne.n	1594 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    158e:	2019      	movs	r0, #25
    1590:	f000 fcac 	bl	1eec <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    1594:	2364      	movs	r3, #100	; 0x64
    1596:	7033      	strb	r3, [r6, #0]
#endif

	if (epHandlers[ep]) {
    1598:	4b29      	ldr	r3, [pc, #164]	; (1640 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    159a:	00aa      	lsls	r2, r5, #2
    159c:	58d0      	ldr	r0, [r2, r3]
    159e:	2800      	cmp	r0, #0
    15a0:	d008      	beq.n	15b4 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    15a2:	6803      	ldr	r3, [r0, #0]
    15a4:	0022      	movs	r2, r4
    15a6:	685b      	ldr	r3, [r3, #4]
    15a8:	9902      	ldr	r1, [sp, #8]
    15aa:	4798      	blx	r3
    15ac:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    15ae:	0020      	movs	r0, r4
    15b0:	b005      	add	sp, #20
    15b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    15b4:	0029      	movs	r1, r5
    15b6:	0038      	movs	r0, r7
    15b8:	f7ff ffae 	bl	1518 <_ZN14USBDeviceClass9availableEm>
    15bc:	4284      	cmp	r4, r0
    15be:	d904      	bls.n	15ca <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    15c0:	0029      	movs	r1, r5
    15c2:	0038      	movs	r0, r7
    15c4:	f7ff ffa8 	bl	1518 <_ZN14USBDeviceClass9availableEm>
    15c8:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    15ca:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    15cc:	b2eb      	uxtb	r3, r5
    15ce:	4e1d      	ldr	r6, [pc, #116]	; (1644 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    15d0:	9303      	str	r3, [sp, #12]
    15d2:	015b      	lsls	r3, r3, #5
    15d4:	9301      	str	r3, [sp, #4]
    15d6:	18f2      	adds	r2, r6, r3
    15d8:	6893      	ldr	r3, [r2, #8]
    15da:	0b9b      	lsrs	r3, r3, #14
    15dc:	039b      	lsls	r3, r3, #14
    15de:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    15e0:	9a01      	ldr	r2, [sp, #4]
    15e2:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    15e4:	9802      	ldr	r0, [sp, #8]
    15e6:	189b      	adds	r3, r3, r2
    15e8:	33ff      	adds	r3, #255	; 0xff
    15ea:	7a5a      	ldrb	r2, [r3, #9]
    15ec:	430a      	orrs	r2, r1
    15ee:	4916      	ldr	r1, [pc, #88]	; (1648 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    15f0:	725a      	strb	r2, [r3, #9]
    15f2:	01ab      	lsls	r3, r5, #6
    15f4:	18c9      	adds	r1, r1, r3
    15f6:	0022      	movs	r2, r4
    15f8:	f002 ff96 	bl	4528 <memcpy>
	if (len && !available(ep)) {
    15fc:	2c00      	cmp	r4, #0
    15fe:	d0d6      	beq.n	15ae <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1600:	0029      	movs	r1, r5
    1602:	0038      	movs	r0, r7
    1604:	f7ff ff88 	bl	1518 <_ZN14USBDeviceClass9availableEm>
    1608:	2800      	cmp	r0, #0
    160a:	d1d0      	bne.n	15ae <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    160c:	2140      	movs	r1, #64	; 0x40
    160e:	9b03      	ldr	r3, [sp, #12]
    1610:	6832      	ldr	r2, [r6, #0]
    1612:	3308      	adds	r3, #8
    1614:	015b      	lsls	r3, r3, #5
    1616:	18d3      	adds	r3, r2, r3
    1618:	7918      	ldrb	r0, [r3, #4]
    161a:	4301      	orrs	r1, r0
    161c:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    161e:	2101      	movs	r1, #1
    1620:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1622:	2101      	movs	r1, #1
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	18d3      	adds	r3, r2, r3
    1628:	33ff      	adds	r3, #255	; 0xff
    162a:	7a9a      	ldrb	r2, [r3, #10]
    162c:	430a      	orrs	r2, r1
    162e:	729a      	strb	r2, [r3, #10]
    1630:	e7bd      	b.n	15ae <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    1632:	2401      	movs	r4, #1
    1634:	4264      	negs	r4, r4
    1636:	e7ba      	b.n	15ae <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1638:	200005dc 	.word	0x200005dc
    163c:	2000014c 	.word	0x2000014c
    1640:	20000130 	.word	0x20000130
    1644:	200005e4 	.word	0x200005e4
    1648:	20000318 	.word	0x20000318

0000164c <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    164c:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    164e:	466b      	mov	r3, sp
    1650:	1ddc      	adds	r4, r3, #7
    1652:	0022      	movs	r2, r4
    1654:	2301      	movs	r3, #1
    1656:	f7ff ff8b 	bl	1570 <_ZN14USBDeviceClass4recvEmPvm>
    165a:	2801      	cmp	r0, #1
    165c:	d101      	bne.n	1662 <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    165e:	7820      	ldrb	r0, [r4, #0]
	}
}
    1660:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    1662:	2001      	movs	r0, #1
    1664:	4240      	negs	r0, r0
    1666:	e7fb      	b.n	1660 <_ZN14USBDeviceClass4recvEm+0x14>

00001668 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    1668:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    166a:	4b13      	ldr	r3, [pc, #76]	; (16b8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    166c:	b2cc      	uxtb	r4, r1
    166e:	4a13      	ldr	r2, [pc, #76]	; (16bc <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    1670:	0160      	lsls	r0, r4, #5
    1672:	0189      	lsls	r1, r1, #6
    1674:	1859      	adds	r1, r3, r1
    1676:	1813      	adds	r3, r2, r0
    1678:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    167a:	6899      	ldr	r1, [r3, #8]
    167c:	4d10      	ldr	r5, [pc, #64]	; (16c0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    167e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1680:	400d      	ands	r5, r1
    1682:	2180      	movs	r1, #128	; 0x80
    1684:	0349      	lsls	r1, r1, #13
    1686:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1688:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    168a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    168c:	6899      	ldr	r1, [r3, #8]
    168e:	0b89      	lsrs	r1, r1, #14
    1690:	0389      	lsls	r1, r1, #14
    1692:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1694:	6811      	ldr	r1, [r2, #0]
    1696:	0163      	lsls	r3, r4, #5
    1698:	18cb      	adds	r3, r1, r3
    169a:	791e      	ldrb	r6, [r3, #4]
    169c:	4335      	orrs	r5, r6
    169e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    16a0:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    16a2:	066d      	lsls	r5, r5, #25
    16a4:	d5fc      	bpl.n	16a0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    16a6:	0164      	lsls	r4, r4, #5
    16a8:	1909      	adds	r1, r1, r4
    16aa:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    16ac:	07db      	lsls	r3, r3, #31
    16ae:	d5fc      	bpl.n	16aa <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    16b0:	1812      	adds	r2, r2, r0
    16b2:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    16b4:	b2c0      	uxtb	r0, r0
}
    16b6:	bd70      	pop	{r4, r5, r6, pc}
    16b8:	20000318 	.word	0x20000318
    16bc:	200005e4 	.word	0x200005e4
    16c0:	f0003fff 	.word	0xf0003fff

000016c4 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    16c4:	b570      	push	{r4, r5, r6, lr}
    16c6:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    16c8:	2100      	movs	r1, #0
{
    16ca:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    16cc:	f7ff ffcc 	bl	1668 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    16d0:	42a0      	cmp	r0, r4
    16d2:	d900      	bls.n	16d6 <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    16d4:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    16d6:	2300      	movs	r3, #0
		data[i] = buffer[i];
    16d8:	4903      	ldr	r1, [pc, #12]	; (16e8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    16da:	42a3      	cmp	r3, r4
    16dc:	d003      	beq.n	16e6 <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    16de:	5c5a      	ldrb	r2, [r3, r1]
    16e0:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    16e2:	3301      	adds	r3, #1
    16e4:	e7f9      	b.n	16da <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	20000318 	.word	0x20000318

000016ec <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    16ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ee:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    16f0:	4b3f      	ldr	r3, [pc, #252]	; (17f0 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
{
    16f2:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    16f4:	681b      	ldr	r3, [r3, #0]
{
    16f6:	000f      	movs	r7, r1
    16f8:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    16fa:	2b00      	cmp	r3, #0
    16fc:	d03f      	beq.n	177e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    16fe:	2380      	movs	r3, #128	; 0x80
    1700:	01db      	lsls	r3, r3, #7
    1702:	429e      	cmp	r6, r3
    1704:	d83b      	bhi.n	177e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    1706:	4c3b      	ldr	r4, [pc, #236]	; (17f4 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1708:	7821      	ldrb	r1, [r4, #0]
    170a:	b2c9      	uxtb	r1, r1
    170c:	2900      	cmp	r1, #0
    170e:	d102      	bne.n	1716 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    1710:	201a      	movs	r0, #26
    1712:	f000 fbeb 	bl	1eec <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    1716:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    1718:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    171a:	4a37      	ldr	r2, [pc, #220]	; (17f8 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    171c:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    171e:	01bb      	lsls	r3, r7, #6
    1720:	18d3      	adds	r3, r2, r3
    1722:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1724:	2e00      	cmp	r6, #0
    1726:	d02c      	beq.n	1782 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    1728:	4b34      	ldr	r3, [pc, #208]	; (17fc <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	9303      	str	r3, [sp, #12]
    172e:	23ff      	movs	r3, #255	; 0xff
    1730:	403b      	ands	r3, r7
    1732:	001c      	movs	r4, r3
    1734:	9300      	str	r3, [sp, #0]
    1736:	3408      	adds	r4, #8
    1738:	9b03      	ldr	r3, [sp, #12]
    173a:	0164      	lsls	r4, r4, #5
    173c:	191c      	adds	r4, r3, r4
    173e:	79a3      	ldrb	r3, [r4, #6]
    1740:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    1742:	d021      	beq.n	1788 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1744:	4b2e      	ldr	r3, [pc, #184]	; (1800 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    1746:	492f      	ldr	r1, [pc, #188]	; (1804 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    1748:	6818      	ldr	r0, [r3, #0]
    174a:	f000 fff7 	bl	273c <__udivsi3>
    174e:	4b2e      	ldr	r3, [pc, #184]	; (1808 <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
    1750:	2117      	movs	r1, #23
    1752:	4358      	muls	r0, r3
    1754:	f000 fff2 	bl	273c <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1758:	4b2c      	ldr	r3, [pc, #176]	; (180c <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    175a:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    175c:	0792      	lsls	r2, r2, #30
    175e:	d413      	bmi.n	1788 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1760:	5dda      	ldrb	r2, [r3, r7]
    1762:	2a00      	cmp	r2, #0
    1764:	d101      	bne.n	176a <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    1766:	3801      	subs	r0, #1
    1768:	d2f7      	bcs.n	175a <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    176a:	2201      	movs	r2, #1
    176c:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    176e:	9b00      	ldr	r3, [sp, #0]
    1770:	4a22      	ldr	r2, [pc, #136]	; (17fc <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    1772:	015b      	lsls	r3, r3, #5
    1774:	18d3      	adds	r3, r2, r3
    1776:	699a      	ldr	r2, [r3, #24]
    1778:	0b92      	lsrs	r2, r2, #14
    177a:	0392      	lsls	r2, r2, #14
    177c:	619a      	str	r2, [r3, #24]
					return -1;
    177e:	2501      	movs	r5, #1
    1780:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    1782:	0028      	movs	r0, r5
    1784:	b005      	add	sp, #20
    1786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1788:	2200      	movs	r2, #0
    178a:	4b20      	ldr	r3, [pc, #128]	; (180c <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
    178c:	0034      	movs	r4, r6
    178e:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    1790:	2e3f      	cmp	r6, #63	; 0x3f
    1792:	d909      	bls.n	17a8 <_ZN14USBDeviceClass4sendEmPKvm+0xbc>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    1794:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    1796:	2440      	movs	r4, #64	; 0x40
    1798:	015a      	lsls	r2, r3, #5
    179a:	4b18      	ldr	r3, [pc, #96]	; (17fc <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    179c:	189b      	adds	r3, r3, r2
    179e:	2280      	movs	r2, #128	; 0x80
    17a0:	6999      	ldr	r1, [r3, #24]
    17a2:	0612      	lsls	r2, r2, #24
    17a4:	430a      	orrs	r2, r1
    17a6:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    17a8:	0022      	movs	r2, r4
    17aa:	9901      	ldr	r1, [sp, #4]
    17ac:	9802      	ldr	r0, [sp, #8]
    17ae:	f002 febb 	bl	4528 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    17b2:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17b4:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    17b6:	015a      	lsls	r2, r3, #5
    17b8:	4b10      	ldr	r3, [pc, #64]	; (17fc <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17ba:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    17bc:	189b      	adds	r3, r3, r2
    17be:	9a02      	ldr	r2, [sp, #8]
		written += length;
    17c0:	192d      	adds	r5, r5, r4
    17c2:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17c4:	699a      	ldr	r2, [r3, #24]
		len -= length;
    17c6:	1b36      	subs	r6, r6, r4
    17c8:	0b92      	lsrs	r2, r2, #14
    17ca:	0392      	lsls	r2, r2, #14
    17cc:	430a      	orrs	r2, r1
    17ce:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    17d0:	9b00      	ldr	r3, [sp, #0]
    17d2:	9a03      	ldr	r2, [sp, #12]
    17d4:	3308      	adds	r3, #8
    17d6:	015b      	lsls	r3, r3, #5
    17d8:	18d3      	adds	r3, r2, r3
    17da:	2202      	movs	r2, #2
    17dc:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    17de:	7959      	ldrb	r1, [r3, #5]
    17e0:	3a82      	subs	r2, #130	; 0x82
    17e2:	430a      	orrs	r2, r1
    17e4:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    17e6:	9b01      	ldr	r3, [sp, #4]
    17e8:	191b      	adds	r3, r3, r4
    17ea:	9301      	str	r3, [sp, #4]
	while (len != 0)
    17ec:	e79a      	b.n	1724 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	200005dc 	.word	0x200005dc
    17f4:	2000014d 	.word	0x2000014d
    17f8:	20000158 	.word	0x20000158
    17fc:	200005e4 	.word	0x200005e4
    1800:	20000018 	.word	0x20000018
    1804:	000f4240 	.word	0x000f4240
    1808:	00011170 	.word	0x00011170
    180c:	2000014f 	.word	0x2000014f

00001810 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1810:	b570      	push	{r4, r5, r6, lr}
    1812:	000d      	movs	r5, r1
    1814:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1816:	4e0d      	ldr	r6, [pc, #52]	; (184c <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1818:	01ab      	lsls	r3, r5, #6
    181a:	18f6      	adds	r6, r6, r3
{
    181c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    181e:	0030      	movs	r0, r6
    1820:	0022      	movs	r2, r4
    1822:	f002 fe81 	bl	4528 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1826:	b2ed      	uxtb	r5, r5
    1828:	4909      	ldr	r1, [pc, #36]	; (1850 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    182a:	016d      	lsls	r5, r5, #5
    182c:	194d      	adds	r5, r1, r5
    182e:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1830:	69ab      	ldr	r3, [r5, #24]
    1832:	4a08      	ldr	r2, [pc, #32]	; (1854 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1834:	0020      	movs	r0, r4
    1836:	4013      	ands	r3, r2
    1838:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    183a:	69ab      	ldr	r3, [r5, #24]
    183c:	04a2      	lsls	r2, r4, #18
    183e:	0b9b      	lsrs	r3, r3, #14
    1840:	0c92      	lsrs	r2, r2, #18
    1842:	039b      	lsls	r3, r3, #14
    1844:	4313      	orrs	r3, r2
    1846:	61ab      	str	r3, [r5, #24]
    1848:	bd70      	pop	{r4, r5, r6, pc}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	20000158 	.word	0x20000158
    1850:	200005e4 	.word	0x200005e4
    1854:	f0003fff 	.word	0xf0003fff

00001858 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    185a:	4b10      	ldr	r3, [pc, #64]	; (189c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    185c:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    185e:	781b      	ldrb	r3, [r3, #0]
{
    1860:	000f      	movs	r7, r1
    1862:	0015      	movs	r5, r2
	if (_dry_run == true)
    1864:	2b00      	cmp	r3, #0
    1866:	d10c      	bne.n	1882 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1868:	4b0d      	ldr	r3, [pc, #52]	; (18a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    186a:	0016      	movs	r6, r2
    186c:	781c      	ldrb	r4, [r3, #0]
    186e:	2c00      	cmp	r4, #0
    1870:	d009      	beq.n	1886 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1872:	4e0c      	ldr	r6, [pc, #48]	; (18a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1874:	480c      	ldr	r0, [pc, #48]	; (18a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1876:	8834      	ldrh	r4, [r6, #0]
    1878:	1900      	adds	r0, r0, r4
		_pack_size += len;
    187a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    187c:	f002 fe54 	bl	4528 <memcpy>
		_pack_size += len;
    1880:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    1882:	0028      	movs	r0, r5
    1884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1886:	2e00      	cmp	r6, #0
    1888:	d0fb      	beq.n	1882 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    188a:	193a      	adds	r2, r7, r4
    188c:	0033      	movs	r3, r6
    188e:	2100      	movs	r1, #0
    1890:	9801      	ldr	r0, [sp, #4]
    1892:	f7ff ffbd 	bl	1810 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    1896:	1824      	adds	r4, r4, r0
		len -= sent;
    1898:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    189a:	e7f4      	b.n	1886 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    189c:	200004d8 	.word	0x200004d8
    18a0:	200005d9 	.word	0x200005d9
    18a4:	200005da 	.word	0x200005da
    18a8:	200004d9 	.word	0x200004d9

000018ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    18ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ae:	000e      	movs	r6, r1
    18b0:	0015      	movs	r5, r2
		return false;
    18b2:	2700      	movs	r7, #0
	if (maxlen < 2)
    18b4:	2a01      	cmp	r2, #1
    18b6:	d927      	bls.n	1908 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    18b8:	0010      	movs	r0, r2
    18ba:	f002 fe21 	bl	4500 <malloc>
    18be:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    18c0:	0030      	movs	r0, r6
    18c2:	f002 fefd 	bl	46c0 <strlen>
    18c6:	3001      	adds	r0, #1
    18c8:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    18ca:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    18cc:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    18ce:	2202      	movs	r2, #2
		buffer[i] = 0;
    18d0:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    18d2:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    18d4:	4295      	cmp	r5, r2
    18d6:	d90d      	bls.n	18f4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    18d8:	7831      	ldrb	r1, [r6, #0]
    18da:	2900      	cmp	r1, #0
    18dc:	d00a      	beq.n	18f4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    18de:	1c53      	adds	r3, r2, #1
    18e0:	b2db      	uxtb	r3, r3
    18e2:	3601      	adds	r6, #1
    18e4:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    18e6:	429d      	cmp	r5, r3
    18e8:	d003      	beq.n	18f2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    18ea:	3202      	adds	r2, #2
		buffer[i] = 0;
    18ec:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    18ee:	b2d2      	uxtb	r2, r2
    18f0:	e7f0      	b.n	18d4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    18f2:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    18f4:	0021      	movs	r1, r4
    18f6:	4805      	ldr	r0, [pc, #20]	; (190c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    18f8:	f7ff ffae 	bl	1858 <_ZN14USBDeviceClass11sendControlEPKvm>
    18fc:	1e47      	subs	r7, r0, #1
    18fe:	41b8      	sbcs	r0, r7
    1900:	b2c7      	uxtb	r7, r0
	free(buffer);
    1902:	0020      	movs	r0, r4
    1904:	f002 fe06 	bl	4514 <free>
}
    1908:	0038      	movs	r0, r7
    190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    190c:	2000012c 	.word	0x2000012c

00001910 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1910:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1912:	2700      	movs	r7, #0
	_dry_run = true;
    1914:	2601      	movs	r6, #1
{
    1916:	b087      	sub	sp, #28
	_dry_run = true;
    1918:	4b1e      	ldr	r3, [pc, #120]	; (1994 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    191a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    191c:	a902      	add	r1, sp, #8
	_dry_run = true;
    191e:	701e      	strb	r6, [r3, #0]
{
    1920:	0005      	movs	r5, r0
	uint32_t total = 0;
    1922:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1924:	f7ff fc33 	bl	118e <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1928:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    192a:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    192c:	2209      	movs	r2, #9
    192e:	0039      	movs	r1, r7
    1930:	0020      	movs	r0, r4
    1932:	f002 fe02 	bl	453a <memset>
    1936:	2309      	movs	r3, #9
    1938:	7023      	strb	r3, [r4, #0]
    193a:	2302      	movs	r3, #2
    193c:	7063      	strb	r3, [r4, #1]
    193e:	339e      	adds	r3, #158	; 0x9e
    1940:	71e3      	strb	r3, [r4, #7]
    1942:	335a      	adds	r3, #90	; 0x5a
    1944:	7223      	strb	r3, [r4, #8]
    1946:	9b02      	ldr	r3, [sp, #8]
    1948:	7166      	strb	r6, [r4, #5]
    194a:	3309      	adds	r3, #9
    194c:	8063      	strh	r3, [r4, #2]
    194e:	466b      	mov	r3, sp
    1950:	791b      	ldrb	r3, [r3, #4]
    1952:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1954:	4b0f      	ldr	r3, [pc, #60]	; (1994 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1956:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1958:	9b00      	ldr	r3, [sp, #0]
    195a:	2b09      	cmp	r3, #9
    195c:	d107      	bne.n	196e <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    195e:	001a      	movs	r2, r3
    1960:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1962:	0028      	movs	r0, r5
    1964:	f7ff ff78 	bl	1858 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1968:	2001      	movs	r0, #1
    196a:	b007      	add	sp, #28
    196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    196e:	4b0a      	ldr	r3, [pc, #40]	; (1998 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1970:	2209      	movs	r2, #9
		_pack_message = true;
    1972:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1974:	4e09      	ldr	r6, [pc, #36]	; (199c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1976:	0021      	movs	r1, r4
    1978:	0028      	movs	r0, r5
	total = 0;
    197a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    197c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    197e:	f7ff ff6b 	bl	1858 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1982:	a902      	add	r1, sp, #8
    1984:	0028      	movs	r0, r5
    1986:	f7ff fc02 	bl	118e <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    198a:	4b03      	ldr	r3, [pc, #12]	; (1998 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    198c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    198e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1990:	4903      	ldr	r1, [pc, #12]	; (19a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1992:	e7e6      	b.n	1962 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1994:	200004d8 	.word	0x200004d8
    1998:	200005d9 	.word	0x200005d9
    199c:	200005da 	.word	0x200005da
    19a0:	200004d9 	.word	0x200004d9

000019a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    19a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    19a6:	78ce      	ldrb	r6, [r1, #3]
{
    19a8:	b092      	sub	sp, #72	; 0x48
    19aa:	0005      	movs	r5, r0
    19ac:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    19ae:	2e02      	cmp	r6, #2
    19b0:	d10b      	bne.n	19ca <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    19b2:	798b      	ldrb	r3, [r1, #6]
    19b4:	79c9      	ldrb	r1, [r1, #7]
    19b6:	482e      	ldr	r0, [pc, #184]	; (1a70 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    19b8:	0209      	lsls	r1, r1, #8
    19ba:	4319      	orrs	r1, r3
    19bc:	f7ff ffa8 	bl	1910 <_ZN14USBDeviceClass17sendConfigurationEm>
    19c0:	1e41      	subs	r1, r0, #1
    19c2:	4188      	sbcs	r0, r1
    19c4:	b2c0      	uxtb	r0, r0
}
    19c6:	b012      	add	sp, #72	; 0x48
    19c8:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    19ca:	f7ff f971 	bl	cb0 <_Z12PluggableUSBv>
    19ce:	0021      	movs	r1, r4
    19d0:	f7ff f902 	bl	bd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    19d4:	2800      	cmp	r0, #0
    19d6:	d003      	beq.n	19e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    19d8:	17c1      	asrs	r1, r0, #31
    19da:	1a08      	subs	r0, r1, r0
    19dc:	0fc0      	lsrs	r0, r0, #31
    19de:	e7f2      	b.n	19c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    19e0:	2e01      	cmp	r6, #1
    19e2:	d10e      	bne.n	1a02 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    19e4:	79e2      	ldrb	r2, [r4, #7]
    19e6:	79a3      	ldrb	r3, [r4, #6]
    19e8:	0212      	lsls	r2, r2, #8
    19ea:	431a      	orrs	r2, r3
    19ec:	4921      	ldr	r1, [pc, #132]	; (1a74 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    19ee:	2a11      	cmp	r2, #17
    19f0:	dc3c      	bgt.n	1a6c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    19f2:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    19f4:	2a00      	cmp	r2, #0
    19f6:	d039      	beq.n	1a6c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    19f8:	0028      	movs	r0, r5
    19fa:	f7ff ff2d 	bl	1858 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    19fe:	2001      	movs	r0, #1
    1a00:	e7e1      	b.n	19c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1a02:	2e03      	cmp	r6, #3
    1a04:	d1df      	bne.n	19c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    1a06:	78a3      	ldrb	r3, [r4, #2]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d028      	beq.n	1a5e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1a0c:	2b02      	cmp	r3, #2
    1a0e:	d108      	bne.n	1a22 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1a10:	79e2      	ldrb	r2, [r4, #7]
    1a12:	79a3      	ldrb	r3, [r4, #6]
    1a14:	0212      	lsls	r2, r2, #8
    1a16:	4918      	ldr	r1, [pc, #96]	; (1a78 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1a18:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1a1a:	0028      	movs	r0, r5
    1a1c:	f7ff ff46 	bl	18ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    1a20:	e7d1      	b.n	19c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    1a22:	2b01      	cmp	r3, #1
    1a24:	d105      	bne.n	1a32 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1a26:	79e2      	ldrb	r2, [r4, #7]
    1a28:	79a3      	ldrb	r3, [r4, #6]
    1a2a:	0212      	lsls	r2, r2, #8
    1a2c:	431a      	orrs	r2, r3
    1a2e:	4913      	ldr	r1, [pc, #76]	; (1a7c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1a30:	e7f3      	b.n	1a1a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    1a32:	2b03      	cmp	r3, #3
    1a34:	d1c7      	bne.n	19c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    1a36:	0001      	movs	r1, r0
    1a38:	2241      	movs	r2, #65	; 0x41
    1a3a:	a801      	add	r0, sp, #4
    1a3c:	f002 fd7d 	bl	453a <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    1a40:	f7ff f936 	bl	cb0 <_Z12PluggableUSBv>
    1a44:	a901      	add	r1, sp, #4
    1a46:	f7ff f8d7 	bl	bf8 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d005      	beq.n	1a5a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1a4e:	79e2      	ldrb	r2, [r4, #7]
    1a50:	79a3      	ldrb	r3, [r4, #6]
    1a52:	0212      	lsls	r2, r2, #8
    1a54:	431a      	orrs	r2, r3
    1a56:	a901      	add	r1, sp, #4
    1a58:	e7df      	b.n	1a1a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    1a5a:	7803      	ldrb	r3, [r0, #0]
    1a5c:	deff      	udf	#255	; 0xff
    1a5e:	79e2      	ldrb	r2, [r4, #7]
    1a60:	79a3      	ldrb	r3, [r4, #6]
    1a62:	0212      	lsls	r2, r2, #8
    1a64:	431a      	orrs	r2, r3
    1a66:	4906      	ldr	r1, [pc, #24]	; (1a80 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1a68:	2a03      	cmp	r2, #3
    1a6a:	ddc2      	ble.n	19f2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    1a6c:	780a      	ldrb	r2, [r1, #0]
    1a6e:	e7c3      	b.n	19f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    1a70:	2000012c 	.word	0x2000012c
    1a74:	000047ba 	.word	0x000047ba
    1a78:	0000479c 	.word	0x0000479c
    1a7c:	000047ae 	.word	0x000047ae
    1a80:	000047aa 	.word	0x000047aa

00001a84 <_ZN14USBDeviceClass7sendZlpEm>:
    1a84:	b2cb      	uxtb	r3, r1
    1a86:	4904      	ldr	r1, [pc, #16]	; (1a98 <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    1a88:	015b      	lsls	r3, r3, #5
    1a8a:	18c9      	adds	r1, r1, r3
    1a8c:	698b      	ldr	r3, [r1, #24]
    1a8e:	0b9b      	lsrs	r3, r3, #14
    1a90:	039b      	lsls	r3, r3, #14
    1a92:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    1a94:	4770      	bx	lr
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	200005e4 	.word	0x200005e4

00001a9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1a9e:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    1aa0:	7848      	ldrb	r0, [r1, #1]
{
    1aa2:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    1aa4:	280b      	cmp	r0, #11
    1aa6:	d811      	bhi.n	1acc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1aa8:	f000 fe3e 	bl	2728 <__gnu_thumb1_case_uqi>
    1aac:	2e101d06 	.word	0x2e101d06
    1ab0:	64484310 	.word	0x64484310
    1ab4:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1ab8:	7809      	ldrb	r1, [r1, #0]
    1aba:	aa01      	add	r2, sp, #4
    1abc:	2900      	cmp	r1, #0
    1abe:	d107      	bne.n	1ad0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1ac0:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1ac2:	7011      	strb	r1, [r2, #0]
    1ac4:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1ac6:	0028      	movs	r0, r5
    1ac8:	f7ff fea2 	bl	1810 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1acc:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    1ace:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    1ad0:	2300      	movs	r3, #0
    1ad2:	7013      	strb	r3, [r2, #0]
    1ad4:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1ad6:	4b28      	ldr	r3, [pc, #160]	; (1b78 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    1ad8:	781b      	ldrb	r3, [r3, #0]
    1ada:	2b01      	cmp	r3, #1
    1adc:	d100      	bne.n	1ae0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1ade:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1ae0:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1ae2:	2100      	movs	r1, #0
    1ae4:	e7ef      	b.n	1ac6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1ae6:	788a      	ldrb	r2, [r1, #2]
    1ae8:	2300      	movs	r3, #0
    1aea:	2a01      	cmp	r2, #1
    1aec:	d104      	bne.n	1af8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1aee:	aa01      	add	r2, sp, #4
    1af0:	7013      	strb	r3, [r2, #0]
    1af2:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1af4:	4b21      	ldr	r3, [pc, #132]	; (1b7c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    1af6:	e7ef      	b.n	1ad8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1af8:	4a1f      	ldr	r2, [pc, #124]	; (1b78 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1afa:	7013      	strb	r3, [r2, #0]
    1afc:	4a20      	ldr	r2, [pc, #128]	; (1b80 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1afe:	6993      	ldr	r3, [r2, #24]
    1b00:	0b9b      	lsrs	r3, r3, #14
    1b02:	039b      	lsls	r3, r3, #14
    1b04:	6193      	str	r3, [r2, #24]
    1b06:	e7e1      	b.n	1acc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1b08:	788c      	ldrb	r4, [r1, #2]
    1b0a:	2c01      	cmp	r4, #1
    1b0c:	d106      	bne.n	1b1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1b0e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1b10:	4b1a      	ldr	r3, [pc, #104]	; (1b7c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    1b12:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1b14:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1b16:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1b18:	0023      	movs	r3, r4
    1b1a:	e7d4      	b.n	1ac6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1b1c:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    1b1e:	2c00      	cmp	r4, #0
    1b20:	d1d5      	bne.n	1ace <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    1b22:	4b15      	ldr	r3, [pc, #84]	; (1b78 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1b24:	4a16      	ldr	r2, [pc, #88]	; (1b80 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1b26:	7018      	strb	r0, [r3, #0]
    1b28:	6993      	ldr	r3, [r2, #24]
    1b2a:	0b9b      	lsrs	r3, r3, #14
    1b2c:	039b      	lsls	r3, r3, #14
    1b2e:	6193      	str	r3, [r2, #24]
			return true;
    1b30:	e7cd      	b.n	1ace <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1b32:	7889      	ldrb	r1, [r1, #2]
    1b34:	0028      	movs	r0, r5
    1b36:	f7ff fc09 	bl	134c <_ZN14USBDeviceClass10setAddressEm>
    1b3a:	e7c7      	b.n	1acc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1b3c:	0028      	movs	r0, r5
    1b3e:	f7ff ff31 	bl	19a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1b42:	e7c4      	b.n	1ace <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1b44:	2301      	movs	r3, #1
    1b46:	4a0f      	ldr	r2, [pc, #60]	; (1b84 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    1b48:	e7cb      	b.n	1ae2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1b4a:	780b      	ldrb	r3, [r1, #0]
			return false;
    1b4c:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1b4e:	06db      	lsls	r3, r3, #27
    1b50:	d1bd      	bne.n	1ace <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1b52:	0028      	movs	r0, r5
    1b54:	f7ff fcb2 	bl	14bc <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    1b58:	78a2      	ldrb	r2, [r4, #2]
    1b5a:	4b0a      	ldr	r3, [pc, #40]	; (1b84 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    1b5c:	480a      	ldr	r0, [pc, #40]	; (1b88 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    1b5e:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    1b60:	f7ff f802 	bl	b68 <_ZN7Serial_15enableInterruptEv>
    1b64:	e7ca      	b.n	1afc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    1b66:	2301      	movs	r3, #1
    1b68:	4a08      	ldr	r2, [pc, #32]	; (1b8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1b6a:	e7ba      	b.n	1ae2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1b6c:	788a      	ldrb	r2, [r1, #2]
    1b6e:	4b07      	ldr	r3, [pc, #28]	; (1b8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1b70:	601a      	str	r2, [r3, #0]
    1b72:	e7c3      	b.n	1afc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1b74:	2000      	movs	r0, #0
    1b76:	e7aa      	b.n	1ace <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1b78:	2000014e 	.word	0x2000014e
    1b7c:	20000156 	.word	0x20000156
    1b80:	200005e4 	.word	0x200005e4
    1b84:	200005dc 	.word	0x200005dc
    1b88:	200000c4 	.word	0x200000c4
    1b8c:	200005e0 	.word	0x200005e0

00001b90 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    1b90:	4b4b      	ldr	r3, [pc, #300]	; (1cc0 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1b94:	781e      	ldrb	r6, [r3, #0]
{
    1b96:	0005      	movs	r5, r0
	if (_pack_message == true) {
    1b98:	2e00      	cmp	r6, #0
    1b9a:	d000      	beq.n	1b9e <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    1b9c:	e080      	b.n	1ca0 <_ZN14USBDeviceClass10ISRHandlerEv+0x110>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1b9e:	4c49      	ldr	r4, [pc, #292]	; (1cc4 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1ba0:	6823      	ldr	r3, [r4, #0]
    1ba2:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1ba4:	0712      	lsls	r2, r2, #28
    1ba6:	d50d      	bpl.n	1bc4 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1ba8:	2208      	movs	r2, #8
    1baa:	0031      	movs	r1, r6
    1bac:	839a      	strh	r2, [r3, #28]
    1bae:	0030      	movs	r0, r6
    1bb0:	f7ff f896 	bl	ce0 <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1bb4:	2210      	movs	r2, #16
    1bb6:	6823      	ldr	r3, [r4, #0]
    1bb8:	33ff      	adds	r3, #255	; 0xff
    1bba:	7a99      	ldrb	r1, [r3, #10]
    1bbc:	430a      	orrs	r2, r1
    1bbe:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1bc0:	4b41      	ldr	r3, [pc, #260]	; (1cc8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1bc2:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1bc4:	6823      	ldr	r3, [r4, #0]
    1bc6:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1bc8:	0752      	lsls	r2, r2, #29
    1bca:	d51f      	bpl.n	1c0c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1bcc:	2204      	movs	r2, #4
    1bce:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1bd0:	4a3e      	ldr	r2, [pc, #248]	; (1ccc <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1bd2:	7813      	ldrb	r3, [r2, #0]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d00a      	beq.n	1bee <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    1bd8:	7813      	ldrb	r3, [r2, #0]
    1bda:	3b01      	subs	r3, #1
    1bdc:	b2db      	uxtb	r3, r3
    1bde:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1be0:	7813      	ldrb	r3, [r2, #0]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d103      	bne.n	1bee <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1be6:	2101      	movs	r1, #1
    1be8:	201a      	movs	r0, #26
    1bea:	f000 f97f 	bl	1eec <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1bee:	4a38      	ldr	r2, [pc, #224]	; (1cd0 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1bf0:	7813      	ldrb	r3, [r2, #0]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d00a      	beq.n	1c0c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1bf6:	7813      	ldrb	r3, [r2, #0]
    1bf8:	3b01      	subs	r3, #1
    1bfa:	b2db      	uxtb	r3, r3
    1bfc:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1bfe:	7813      	ldrb	r3, [r2, #0]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d103      	bne.n	1c0c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1c04:	2101      	movs	r1, #1
    1c06:	2019      	movs	r0, #25
    1c08:	f000 f970 	bl	1eec <digitalWrite>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1c0c:	6823      	ldr	r3, [r4, #0]
    1c0e:	33ff      	adds	r3, #255	; 0xff
    1c10:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    1c12:	0692      	lsls	r2, r2, #26
    1c14:	d503      	bpl.n	1c1e <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1c16:	2220      	movs	r2, #32
    1c18:	7a59      	ldrb	r1, [r3, #9]
    1c1a:	430a      	orrs	r2, r1
    1c1c:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1c1e:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1c20:	06d2      	lsls	r2, r2, #27
    1c22:	d525      	bpl.n	1c70 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1c24:	4668      	mov	r0, sp
    1c26:	4a2b      	ldr	r2, [pc, #172]	; (1cd4 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1c28:	4669      	mov	r1, sp
    1c2a:	cac0      	ldmia	r2!, {r6, r7}
    1c2c:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1c2e:	68a2      	ldr	r2, [r4, #8]
    1c30:	0b92      	lsrs	r2, r2, #14
    1c32:	0392      	lsls	r2, r2, #14
    1c34:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1c36:	2240      	movs	r2, #64	; 0x40
    1c38:	7958      	ldrb	r0, [r3, #5]
    1c3a:	4302      	orrs	r2, r0
    1c3c:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1c3e:	2360      	movs	r3, #96	; 0x60
    1c40:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    1c42:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1c44:	421a      	tst	r2, r3
    1c46:	d12c      	bne.n	1ca2 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
			ok = handleStandardSetup(setup);
    1c48:	f7ff ff28 	bl	1a9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d02b      	beq.n	1ca8 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1c50:	2280      	movs	r2, #128	; 0x80
    1c52:	6823      	ldr	r3, [r4, #0]
    1c54:	4252      	negs	r2, r2
    1c56:	33ff      	adds	r3, #255	; 0xff
    1c58:	7999      	ldrb	r1, [r3, #6]
    1c5a:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1c5c:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1c5e:	6823      	ldr	r3, [r4, #0]
    1c60:	33ff      	adds	r3, #255	; 0xff
    1c62:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1c64:	0652      	lsls	r2, r2, #25
    1c66:	d503      	bpl.n	1c70 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1c68:	2240      	movs	r2, #64	; 0x40
    1c6a:	7a59      	ldrb	r1, [r3, #9]
    1c6c:	430a      	orrs	r2, r1
    1c6e:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1c70:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1c72:	2501      	movs	r5, #1
    1c74:	6823      	ldr	r3, [r4, #0]
    1c76:	33ff      	adds	r3, #255	; 0xff
    1c78:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1c7a:	002f      	movs	r7, r5
    1c7c:	6823      	ldr	r3, [r4, #0]
    1c7e:	3708      	adds	r7, #8
    1c80:	017f      	lsls	r7, r7, #5
    1c82:	19db      	adds	r3, r3, r7
    1c84:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1c86:	2b00      	cmp	r3, #0
    1c88:	d007      	beq.n	1c9a <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			if (epHandlers[ep]) {
    1c8a:	4b13      	ldr	r3, [pc, #76]	; (1cd8 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1c8c:	00aa      	lsls	r2, r5, #2
    1c8e:	58d0      	ldr	r0, [r2, r3]
    1c90:	2800      	cmp	r0, #0
    1c92:	d00c      	beq.n	1cae <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
				epHandlers[ep]->handleEndpoint();
    1c94:	6803      	ldr	r3, [r0, #0]
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1c9a:	3501      	adds	r5, #1
    1c9c:	2d08      	cmp	r5, #8
    1c9e:	d1ec      	bne.n	1c7a <_ZN14USBDeviceClass10ISRHandlerEv+0xea>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    1ca0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    1ca2:	f7ff fb77 	bl	1394 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1ca6:	e7d1      	b.n	1c4c <_ZN14USBDeviceClass10ISRHandlerEv+0xbc>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1ca8:	2220      	movs	r2, #32
    1caa:	4b0c      	ldr	r3, [pc, #48]	; (1cdc <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1cac:	e7d6      	b.n	1c5c <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
				PluggableUSB().handleEndpoint(ep);
    1cae:	f7fe ffff 	bl	cb0 <_Z12PluggableUSBv>
    1cb2:	0029      	movs	r1, r5
    1cb4:	f7fe ffc3 	bl	c3e <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1cb8:	6823      	ldr	r3, [r4, #0]
    1cba:	19df      	adds	r7, r3, r7
    1cbc:	71fe      	strb	r6, [r7, #7]
    1cbe:	e7ec      	b.n	1c9a <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
    1cc0:	200005d9 	.word	0x200005d9
    1cc4:	200005e4 	.word	0x200005e4
    1cc8:	200005dc 	.word	0x200005dc
    1ccc:	2000014d 	.word	0x2000014d
    1cd0:	2000014c 	.word	0x2000014c
    1cd4:	20000318 	.word	0x20000318
    1cd8:	20000130 	.word	0x20000130
    1cdc:	410050ff 	.word	0x410050ff

00001ce0 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1ce0:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1ce2:	4802      	ldr	r0, [pc, #8]	; (1cec <UDD_Handler+0xc>)
    1ce4:	f7ff ff54 	bl	1b90 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1ce8:	bd10      	pop	{r4, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	2000012c 	.word	0x2000012c

00001cf0 <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1cf0:	4a01      	ldr	r2, [pc, #4]	; (1cf8 <_GLOBAL__sub_I_usbd+0x8>)
    1cf2:	4b02      	ldr	r3, [pc, #8]	; (1cfc <_GLOBAL__sub_I_usbd+0xc>)
    1cf4:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1cf6:	4770      	bx	lr
    1cf8:	41005000 	.word	0x41005000
    1cfc:	200005e4 	.word	0x200005e4

00001d00 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1d00:	21fa      	movs	r1, #250	; 0xfa
    1d02:	4b31      	ldr	r3, [pc, #196]	; (1dc8 <init+0xc8>)
{
    1d04:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1d06:	6818      	ldr	r0, [r3, #0]
    1d08:	0089      	lsls	r1, r1, #2
    1d0a:	f000 fd17 	bl	273c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1d0e:	4b2f      	ldr	r3, [pc, #188]	; (1dcc <init+0xcc>)
    1d10:	3801      	subs	r0, #1
    1d12:	4298      	cmp	r0, r3
    1d14:	d856      	bhi.n	1dc4 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1d16:	492e      	ldr	r1, [pc, #184]	; (1dd0 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1d18:	4a2e      	ldr	r2, [pc, #184]	; (1dd4 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1d1a:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1d1c:	20c0      	movs	r0, #192	; 0xc0
    1d1e:	6a13      	ldr	r3, [r2, #32]
    1d20:	0600      	lsls	r0, r0, #24
    1d22:	021b      	lsls	r3, r3, #8
    1d24:	0a1b      	lsrs	r3, r3, #8
    1d26:	4303      	orrs	r3, r0
    1d28:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1d2a:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1d2c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1d2e:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1d30:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1d32:	2180      	movs	r1, #128	; 0x80
    1d34:	6a13      	ldr	r3, [r2, #32]
    1d36:	0609      	lsls	r1, r1, #24
    1d38:	021b      	lsls	r3, r3, #8
    1d3a:	0a1b      	lsrs	r3, r3, #8
    1d3c:	430b      	orrs	r3, r1
    1d3e:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1d40:	22fc      	movs	r2, #252	; 0xfc
    1d42:	4b25      	ldr	r3, [pc, #148]	; (1dd8 <init+0xd8>)
    1d44:	6a19      	ldr	r1, [r3, #32]
    1d46:	430a      	orrs	r2, r1
    1d48:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1d4a:	22fc      	movs	r2, #252	; 0xfc
    1d4c:	6a19      	ldr	r1, [r3, #32]
    1d4e:	0192      	lsls	r2, r2, #6
    1d50:	430a      	orrs	r2, r1
    1d52:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1d54:	22a0      	movs	r2, #160	; 0xa0
    1d56:	6a19      	ldr	r1, [r3, #32]
    1d58:	02d2      	lsls	r2, r2, #11
    1d5a:	430a      	orrs	r2, r1
    1d5c:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1d5e:	0020      	movs	r0, r4
    1d60:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1d62:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1d64:	f000 f876 	bl	1e54 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1d68:	2c14      	cmp	r4, #20
    1d6a:	d1f8      	bne.n	1d5e <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1d6c:	4b1b      	ldr	r3, [pc, #108]	; (1ddc <init+0xdc>)
    1d6e:	001c      	movs	r4, r3
    1d70:	785a      	ldrb	r2, [r3, #1]
    1d72:	b252      	sxtb	r2, r2
    1d74:	2a00      	cmp	r2, #0
    1d76:	dbfb      	blt.n	1d70 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1d78:	4a19      	ldr	r2, [pc, #100]	; (1de0 <init+0xe0>)
    1d7a:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1d7c:	4b19      	ldr	r3, [pc, #100]	; (1de4 <init+0xe4>)
    1d7e:	001a      	movs	r2, r3
    1d80:	7e59      	ldrb	r1, [r3, #25]
    1d82:	09c9      	lsrs	r1, r1, #7
    1d84:	2901      	cmp	r1, #1
    1d86:	d0fb      	beq.n	1d80 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1d88:	21e4      	movs	r1, #228	; 0xe4
    1d8a:	00c9      	lsls	r1, r1, #3
    1d8c:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1d8e:	213f      	movs	r1, #63	; 0x3f
    1d90:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1d92:	7e53      	ldrb	r3, [r2, #25]
    1d94:	09db      	lsrs	r3, r3, #7
    1d96:	2b01      	cmp	r3, #1
    1d98:	d0fb      	beq.n	1d92 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1d9a:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1d9c:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1d9e:	015b      	lsls	r3, r3, #5
    1da0:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1da2:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1da4:	f000 f824 	bl	1df0 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1da8:	7863      	ldrb	r3, [r4, #1]
    1daa:	b25b      	sxtb	r3, r3
    1dac:	2b00      	cmp	r3, #0
    1dae:	dbfb      	blt.n	1da8 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1db0:	4b0d      	ldr	r3, [pc, #52]	; (1de8 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1db2:	4a0e      	ldr	r2, [pc, #56]	; (1dec <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1db4:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1db6:	79d3      	ldrb	r3, [r2, #7]
    1db8:	09db      	lsrs	r3, r3, #7
    1dba:	2b01      	cmp	r3, #1
    1dbc:	d0fb      	beq.n	1db6 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1dbe:	2341      	movs	r3, #65	; 0x41
    1dc0:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1dc2:	bd10      	pop	{r4, pc}
    1dc4:	e7fe      	b.n	1dc4 <init+0xc4>
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	20000018 	.word	0x20000018
    1dcc:	00ffffff 	.word	0x00ffffff
    1dd0:	e000e010 	.word	0xe000e010
    1dd4:	e000ed00 	.word	0xe000ed00
    1dd8:	40000400 	.word	0x40000400
    1ddc:	40000c00 	.word	0x40000c00
    1de0:	0000401e 	.word	0x0000401e
    1de4:	42004000 	.word	0x42004000
    1de8:	00004021 	.word	0x00004021
    1dec:	42004800 	.word	0x42004800

00001df0 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1df0:	4a16      	ldr	r2, [pc, #88]	; (1e4c <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1df2:	b500      	push	{lr}
    1df4:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1df6:	7e51      	ldrb	r1, [r2, #25]
    1df8:	09c9      	lsrs	r1, r1, #7
    1dfa:	2901      	cmp	r1, #1
    1dfc:	d0fb      	beq.n	1df6 <analogReference+0x6>
  syncADC();
  switch (mode)
    1dfe:	3801      	subs	r0, #1
    1e00:	2804      	cmp	r0, #4
    1e02:	d816      	bhi.n	1e32 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1e04:	6919      	ldr	r1, [r3, #16]
    1e06:	4a12      	ldr	r2, [pc, #72]	; (1e50 <analogReference+0x60>)
    1e08:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e0a:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1e0c:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e0e:	785a      	ldrb	r2, [r3, #1]
    1e10:	438a      	bics	r2, r1
  switch (mode)
    1e12:	f000 fc89 	bl	2728 <__gnu_thumb1_case_uqi>
    1e16:	0803      	.short	0x0803
    1e18:	0b06      	.short	0x0b06
    1e1a:	03          	.byte	0x03
    1e1b:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1e1c:	0011      	movs	r1, r2
    1e1e:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e20:	430a      	orrs	r2, r1
    1e22:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1e24:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1e26:	0011      	movs	r1, r2
    1e28:	2203      	movs	r2, #3
    1e2a:	e7f9      	b.n	1e20 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e2c:	0011      	movs	r1, r2
    1e2e:	2202      	movs	r2, #2
    1e30:	e7f6      	b.n	1e20 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1e32:	23f0      	movs	r3, #240	; 0xf0
    1e34:	6911      	ldr	r1, [r2, #16]
    1e36:	051b      	lsls	r3, r3, #20
    1e38:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e3a:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1e3c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e3e:	7853      	ldrb	r3, [r2, #1]
    1e40:	438b      	bics	r3, r1
    1e42:	0019      	movs	r1, r3
    1e44:	2302      	movs	r3, #2
    1e46:	430b      	orrs	r3, r1
    1e48:	7053      	strb	r3, [r2, #1]
}
    1e4a:	e7eb      	b.n	1e24 <analogReference+0x34>
    1e4c:	42004000 	.word	0x42004000
    1e50:	f0ffffff 	.word	0xf0ffffff

00001e54 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1e54:	2318      	movs	r3, #24
{
    1e56:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1e58:	001d      	movs	r5, r3
{
    1e5a:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1e5c:	4345      	muls	r5, r0
    1e5e:	2008      	movs	r0, #8
    1e60:	4a20      	ldr	r2, [pc, #128]	; (1ee4 <pinMode+0x90>)
    1e62:	1955      	adds	r5, r2, r5
    1e64:	5628      	ldrsb	r0, [r5, r0]
    1e66:	3001      	adds	r0, #1
    1e68:	d014      	beq.n	1e94 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1e6a:	2903      	cmp	r1, #3
    1e6c:	d812      	bhi.n	1e94 <pinMode+0x40>
    1e6e:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1e70:	4363      	muls	r3, r4
    1e72:	56d1      	ldrsb	r1, [r2, r3]
    1e74:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1e76:	f000 fc57 	bl	2728 <__gnu_thumb1_case_uqi>
    1e7a:	2802      	.short	0x2802
    1e7c:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1e7e:	6858      	ldr	r0, [r3, #4]
    1e80:	01cb      	lsls	r3, r1, #7
    1e82:	2102      	movs	r1, #2
    1e84:	4a18      	ldr	r2, [pc, #96]	; (1ee8 <pinMode+0x94>)
    1e86:	189b      	adds	r3, r3, r2
    1e88:	181a      	adds	r2, r3, r0
    1e8a:	3240      	adds	r2, #64	; 0x40
    1e8c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1e8e:	2201      	movs	r2, #1
    1e90:	4082      	lsls	r2, r0
    1e92:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1e94:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1e96:	6858      	ldr	r0, [r3, #4]
    1e98:	01cb      	lsls	r3, r1, #7
    1e9a:	2106      	movs	r1, #6
    1e9c:	4a12      	ldr	r2, [pc, #72]	; (1ee8 <pinMode+0x94>)
    1e9e:	189b      	adds	r3, r3, r2
    1ea0:	181a      	adds	r2, r3, r0
    1ea2:	3240      	adds	r2, #64	; 0x40
    1ea4:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1ea6:	2201      	movs	r2, #1
    1ea8:	4082      	lsls	r2, r0
    1eaa:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1eac:	619a      	str	r2, [r3, #24]
    break ;
    1eae:	e7f1      	b.n	1e94 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1eb0:	6858      	ldr	r0, [r3, #4]
    1eb2:	01cb      	lsls	r3, r1, #7
    1eb4:	2106      	movs	r1, #6
    1eb6:	4a0c      	ldr	r2, [pc, #48]	; (1ee8 <pinMode+0x94>)
    1eb8:	189b      	adds	r3, r3, r2
    1eba:	181a      	adds	r2, r3, r0
    1ebc:	3240      	adds	r2, #64	; 0x40
    1ebe:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1ec0:	2201      	movs	r2, #1
    1ec2:	4082      	lsls	r2, r0
    1ec4:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1ec6:	615a      	str	r2, [r3, #20]
    break ;
    1ec8:	e7e4      	b.n	1e94 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1eca:	6858      	ldr	r0, [r3, #4]
    1ecc:	01cb      	lsls	r3, r1, #7
    1ece:	2102      	movs	r1, #2
    1ed0:	4a05      	ldr	r2, [pc, #20]	; (1ee8 <pinMode+0x94>)
    1ed2:	189b      	adds	r3, r3, r2
    1ed4:	181a      	adds	r2, r3, r0
    1ed6:	3240      	adds	r2, #64	; 0x40
    1ed8:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1eda:	2201      	movs	r2, #1
    1edc:	4082      	lsls	r2, r0
    1ede:	609a      	str	r2, [r3, #8]
    break ;
    1ee0:	e7d8      	b.n	1e94 <pinMode+0x40>
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	000047cc 	.word	0x000047cc
    1ee8:	41004400 	.word	0x41004400

00001eec <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1eec:	2318      	movs	r3, #24
{
    1eee:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ef0:	2408      	movs	r4, #8
    1ef2:	4358      	muls	r0, r3
    1ef4:	4a11      	ldr	r2, [pc, #68]	; (1f3c <digitalWrite+0x50>)
    1ef6:	1813      	adds	r3, r2, r0
    1ef8:	571c      	ldrsb	r4, [r3, r4]
    1efa:	3401      	adds	r4, #1
    1efc:	d01b      	beq.n	1f36 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1efe:	2601      	movs	r6, #1
    1f00:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1f02:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1f04:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1f06:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1f08:	4a0d      	ldr	r2, [pc, #52]	; (1f40 <digitalWrite+0x54>)
    1f0a:	01db      	lsls	r3, r3, #7
    1f0c:	189a      	adds	r2, r3, r2
    1f0e:	6890      	ldr	r0, [r2, #8]
    1f10:	4228      	tst	r0, r5
    1f12:	d10b      	bne.n	1f2c <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1f14:	000c      	movs	r4, r1
    1f16:	1e60      	subs	r0, r4, #1
    1f18:	4184      	sbcs	r4, r0
    1f1a:	19d2      	adds	r2, r2, r7
    1f1c:	3240      	adds	r2, #64	; 0x40
    1f1e:	7810      	ldrb	r0, [r2, #0]
    1f20:	4034      	ands	r4, r6
    1f22:	3603      	adds	r6, #3
    1f24:	00a4      	lsls	r4, r4, #2
    1f26:	43b0      	bics	r0, r6
    1f28:	4320      	orrs	r0, r4
    1f2a:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1f2c:	4a04      	ldr	r2, [pc, #16]	; (1f40 <digitalWrite+0x54>)
    1f2e:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    1f30:	2900      	cmp	r1, #0
    1f32:	d101      	bne.n	1f38 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    1f34:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    1f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    1f38:	619d      	str	r5, [r3, #24]
    break ;
    1f3a:	e7fc      	b.n	1f36 <digitalWrite+0x4a>
    1f3c:	000047cc 	.word	0x000047cc
    1f40:	41004400 	.word	0x41004400

00001f44 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f46:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f48:	2018      	movs	r0, #24
    1f4a:	4358      	muls	r0, r3
    1f4c:	4a2a      	ldr	r2, [pc, #168]	; (1ff8 <pinPeripheral+0xb4>)
    1f4e:	1810      	adds	r0, r2, r0
    1f50:	7a00      	ldrb	r0, [r0, #8]
    1f52:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1f54:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f56:	3001      	adds	r0, #1
    1f58:	d013      	beq.n	1f82 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    1f5a:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1f5c:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    1f5e:	280c      	cmp	r0, #12
    1f60:	d80f      	bhi.n	1f82 <pinPeripheral+0x3e>
    1f62:	f000 fbe1 	bl	2728 <__gnu_thumb1_case_uqi>
    1f66:	1c45      	.short	0x1c45
    1f68:	1c1c1c1c 	.word	0x1c1c1c1c
    1f6c:	071c1c1c 	.word	0x071c1c1c
    1f70:	0707      	.short	0x0707
    1f72:	07          	.byte	0x07
    1f73:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1f74:	2909      	cmp	r1, #9
    1f76:	d106      	bne.n	1f86 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    1f78:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    1f7a:	0018      	movs	r0, r3
    1f7c:	f7ff ff6a 	bl	1e54 <pinMode>
  return 0l ;
    1f80:	2400      	movs	r4, #0
}
    1f82:	0020      	movs	r0, r4
    1f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1f86:	290a      	cmp	r1, #10
    1f88:	d101      	bne.n	1f8e <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    1f8a:	3908      	subs	r1, #8
    1f8c:	e7f5      	b.n	1f7a <pinPeripheral+0x36>
  return 0l ;
    1f8e:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    1f90:	290b      	cmp	r1, #11
    1f92:	d1f6      	bne.n	1f82 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    1f94:	390a      	subs	r1, #10
    1f96:	0018      	movs	r0, r3
    1f98:	f7ff ff5c 	bl	1e54 <pinMode>
    1f9c:	e7f1      	b.n	1f82 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1f9e:	2018      	movs	r0, #24
    1fa0:	4343      	muls	r3, r0
    1fa2:	18d0      	adds	r0, r2, r3
    1fa4:	6846      	ldr	r6, [r0, #4]
    1fa6:	2501      	movs	r5, #1
    1fa8:	0034      	movs	r4, r6
    1faa:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    1fac:	4813      	ldr	r0, [pc, #76]	; (1ffc <pinPeripheral+0xb8>)
    1fae:	01d2      	lsls	r2, r2, #7
    1fb0:	1812      	adds	r2, r2, r0
    1fb2:	0873      	lsrs	r3, r6, #1
    1fb4:	18d3      	adds	r3, r2, r3
    1fb6:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1fb8:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    1fba:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1fbc:	2c00      	cmp	r4, #0
    1fbe:	d00b      	beq.n	1fd8 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1fc0:	240f      	movs	r4, #15
    1fc2:	0109      	lsls	r1, r1, #4
    1fc4:	4020      	ands	r0, r4
    1fc6:	4301      	orrs	r1, r0
    1fc8:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1fca:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1fcc:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1fce:	3240      	adds	r2, #64	; 0x40
    1fd0:	7813      	ldrb	r3, [r2, #0]
    1fd2:	431d      	orrs	r5, r3
    1fd4:	7015      	strb	r5, [r2, #0]
    1fd6:	e7d3      	b.n	1f80 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1fd8:	270f      	movs	r7, #15
    1fda:	43b8      	bics	r0, r7
    1fdc:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1fde:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1fe0:	b2c9      	uxtb	r1, r1
    1fe2:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1fe4:	0013      	movs	r3, r2
    1fe6:	3340      	adds	r3, #64	; 0x40
    1fe8:	781a      	ldrb	r2, [r3, #0]
    1fea:	4315      	orrs	r5, r2
    1fec:	701d      	strb	r5, [r3, #0]
    1fee:	e7c8      	b.n	1f82 <pinPeripheral+0x3e>
      return -1l ;
    1ff0:	2401      	movs	r4, #1
    1ff2:	4264      	negs	r4, r4
    1ff4:	e7c5      	b.n	1f82 <pinPeripheral+0x3e>
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	000047cc 	.word	0x000047cc
    1ffc:	41004400 	.word	0x41004400

00002000 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    2000:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    2002:	4802      	ldr	r0, [pc, #8]	; (200c <SERCOM0_Handler+0xc>)
    2004:	f000 faa9 	bl	255a <_ZN4Uart10IrqHandlerEv>
}
    2008:	bd10      	pop	{r4, pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	20000924 	.word	0x20000924

00002010 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    2010:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    2012:	4802      	ldr	r0, [pc, #8]	; (201c <SERCOM5_Handler+0xc>)
    2014:	f000 faa1 	bl	255a <_ZN4Uart10IrqHandlerEv>
}
    2018:	bd10      	pop	{r4, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	200006e8 	.word	0x200006e8

00002020 <_GLOBAL__sub_I_g_APinDescription>:
    2020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    2022:	2401      	movs	r4, #1
    2024:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    2026:	4f15      	ldr	r7, [pc, #84]	; (207c <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    2028:	4915      	ldr	r1, [pc, #84]	; (2080 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    202a:	0038      	movs	r0, r7
    202c:	f000 f84a 	bl	20c4 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    2030:	4914      	ldr	r1, [pc, #80]	; (2084 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    2032:	4815      	ldr	r0, [pc, #84]	; (2088 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    2034:	f000 f846 	bl	20c4 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    2038:	4914      	ldr	r1, [pc, #80]	; (208c <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    203a:	4815      	ldr	r0, [pc, #84]	; (2090 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    203c:	f000 f842 	bl	20c4 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    2040:	4914      	ldr	r1, [pc, #80]	; (2094 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    2042:	4815      	ldr	r0, [pc, #84]	; (2098 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    2044:	f000 f83e 	bl	20c4 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    2048:	4914      	ldr	r1, [pc, #80]	; (209c <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    204a:	4815      	ldr	r0, [pc, #84]	; (20a0 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    204c:	f000 f83a 	bl	20c4 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    2050:	4d14      	ldr	r5, [pc, #80]	; (20a4 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    2052:	4915      	ldr	r1, [pc, #84]	; (20a8 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    2054:	0028      	movs	r0, r5
    2056:	f000 f835 	bl	20c4 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    205a:	0039      	movs	r1, r7
    205c:	9600      	str	r6, [sp, #0]
    205e:	0023      	movs	r3, r4
    2060:	9401      	str	r4, [sp, #4]
    2062:	2200      	movs	r2, #0
    2064:	4811      	ldr	r0, [pc, #68]	; (20ac <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    2066:	f000 fa0d 	bl	2484 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    206a:	9600      	str	r6, [sp, #0]
    206c:	0029      	movs	r1, r5
    206e:	9401      	str	r4, [sp, #4]
    2070:	231e      	movs	r3, #30
    2072:	221f      	movs	r2, #31
    2074:	480e      	ldr	r0, [pc, #56]	; (20b0 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    2076:	f000 fa05 	bl	2484 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    207a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    207c:	20000b60 	.word	0x20000b60
    2080:	42000800 	.word	0x42000800
    2084:	42000c00 	.word	0x42000c00
    2088:	20000b64 	.word	0x20000b64
    208c:	42001000 	.word	0x42001000
    2090:	20000b68 	.word	0x20000b68
    2094:	42001400 	.word	0x42001400
    2098:	20000b6c 	.word	0x20000b6c
    209c:	42001800 	.word	0x42001800
    20a0:	20000b70 	.word	0x20000b70
    20a4:	20000b74 	.word	0x20000b74
    20a8:	42001c00 	.word	0x42001c00
    20ac:	20000924 	.word	0x20000924
    20b0:	200006e8 	.word	0x200006e8

000020b4 <_Znwj>:
    20b4:	b510      	push	{r4, lr}
    20b6:	f002 fa23 	bl	4500 <malloc>
    20ba:	bd10      	pop	{r4, pc}

000020bc <_ZdlPv>:
    20bc:	b510      	push	{r4, lr}
    20be:	f002 fa29 	bl	4514 <free>
    20c2:	bd10      	pop	{r4, pc}

000020c4 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    20c4:	6001      	str	r1, [r0, #0]
}
    20c6:	4770      	bx	lr

000020c8 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    20c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ca:	ac05      	add	r4, sp, #20
    20cc:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    20ce:	6804      	ldr	r4, [r0, #0]
    20d0:	1e98      	subs	r0, r3, #2
    20d2:	1e47      	subs	r7, r0, #1
    20d4:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    20d6:	6826      	ldr	r6, [r4, #0]
    20d8:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    20da:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    20dc:	4332      	orrs	r2, r6
    20de:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    20e0:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    20e2:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    20e4:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    20e6:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    20e8:	6862      	ldr	r2, [r4, #4]
    20ea:	4329      	orrs	r1, r5
    20ec:	2000      	movs	r0, #0
    20ee:	2b02      	cmp	r3, #2
    20f0:	d000      	beq.n	20f4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    20f2:	0358      	lsls	r0, r3, #13
    20f4:	4311      	orrs	r1, r2
    20f6:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    20f8:	6061      	str	r1, [r4, #4]
}
    20fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000020fc <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    20fc:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    20fe:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2100:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2102:	03a4      	lsls	r4, r4, #14
    2104:	6818      	ldr	r0, [r3, #0]
    2106:	0512      	lsls	r2, r2, #20
    2108:	4022      	ands	r2, r4
    210a:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    210c:	20c0      	movs	r0, #192	; 0xc0
    210e:	0409      	lsls	r1, r1, #16
    2110:	0280      	lsls	r0, r0, #10
    2112:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2114:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2116:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    2118:	685a      	ldr	r2, [r3, #4]
    211a:	4310      	orrs	r0, r2
    211c:	6058      	str	r0, [r3, #4]
}
    211e:	bd10      	pop	{r4, pc}

00002120 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    2120:	2201      	movs	r2, #1
    2122:	6803      	ldr	r3, [r0, #0]
    2124:	6819      	ldr	r1, [r3, #0]
    2126:	430a      	orrs	r2, r1
    2128:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    212a:	681a      	ldr	r2, [r3, #0]
    212c:	07d2      	lsls	r2, r2, #31
    212e:	d4fc      	bmi.n	212a <_ZN6SERCOM9resetUARTEv+0xa>
    2130:	69da      	ldr	r2, [r3, #28]
    2132:	07d2      	lsls	r2, r2, #31
    2134:	d4f9      	bmi.n	212a <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    2136:	4770      	bx	lr

00002138 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    2138:	2202      	movs	r2, #2
    213a:	6803      	ldr	r3, [r0, #0]
    213c:	6819      	ldr	r1, [r3, #0]
    213e:	430a      	orrs	r2, r1
    2140:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    2142:	69da      	ldr	r2, [r3, #28]
    2144:	0792      	lsls	r2, r2, #30
    2146:	d4fc      	bmi.n	2142 <_ZN6SERCOM10enableUARTEv+0xa>
}
    2148:	4770      	bx	lr

0000214a <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    214a:	6803      	ldr	r3, [r0, #0]
    214c:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    214e:	07d2      	lsls	r2, r2, #31
    2150:	d402      	bmi.n	2158 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    2152:	7e1a      	ldrb	r2, [r3, #24]
    2154:	0792      	lsls	r2, r2, #30
    2156:	d5fc      	bpl.n	2152 <_ZN6SERCOM9flushUARTEv+0x8>
}
    2158:	4770      	bx	lr

0000215a <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    215a:	2200      	movs	r2, #0
    215c:	6803      	ldr	r3, [r0, #0]
    215e:	835a      	strh	r2, [r3, #26]
}
    2160:	4770      	bx	lr

00002162 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    2162:	6803      	ldr	r3, [r0, #0]
    2164:	7e18      	ldrb	r0, [r3, #24]
    2166:	0740      	lsls	r0, r0, #29
    2168:	0fc0      	lsrs	r0, r0, #31
}
    216a:	4770      	bx	lr

0000216c <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    216c:	6803      	ldr	r3, [r0, #0]
    216e:	7e18      	ldrb	r0, [r3, #24]
    2170:	09c0      	lsrs	r0, r0, #7
}
    2172:	4770      	bx	lr

00002174 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    2174:	2380      	movs	r3, #128	; 0x80
    2176:	6802      	ldr	r2, [r0, #0]
    2178:	425b      	negs	r3, r3
    217a:	7e11      	ldrb	r1, [r2, #24]
    217c:	430b      	orrs	r3, r1
    217e:	7613      	strb	r3, [r2, #24]
}
    2180:	4770      	bx	lr

00002182 <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    2182:	6803      	ldr	r3, [r0, #0]
    2184:	8b58      	ldrh	r0, [r3, #26]
    2186:	0780      	lsls	r0, r0, #30
    2188:	0fc0      	lsrs	r0, r0, #31
}
    218a:	4770      	bx	lr

0000218c <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    218c:	2302      	movs	r3, #2
    218e:	6802      	ldr	r2, [r0, #0]
    2190:	8b51      	ldrh	r1, [r2, #26]
    2192:	430b      	orrs	r3, r1
    2194:	8353      	strh	r3, [r2, #26]
}
    2196:	4770      	bx	lr

00002198 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    2198:	6803      	ldr	r3, [r0, #0]
    219a:	7e18      	ldrb	r0, [r3, #24]
    219c:	07c0      	lsls	r0, r0, #31
    219e:	0fc0      	lsrs	r0, r0, #31
}
    21a0:	4770      	bx	lr

000021a2 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    21a2:	6803      	ldr	r3, [r0, #0]
    21a4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    21a6:	b2c0      	uxtb	r0, r0
}
    21a8:	4770      	bx	lr

000021aa <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    21aa:	6803      	ldr	r3, [r0, #0]
    21ac:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    21ae:	07d2      	lsls	r2, r2, #31
    21b0:	d5fc      	bpl.n	21ac <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    21b2:	b289      	uxth	r1, r1
  return 1;
}
    21b4:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    21b6:	8519      	strh	r1, [r3, #40]	; 0x28
}
    21b8:	4770      	bx	lr

000021ba <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    21ba:	2201      	movs	r2, #1
    21bc:	6803      	ldr	r3, [r0, #0]
    21be:	759a      	strb	r2, [r3, #22]
}
    21c0:	4770      	bx	lr

000021c2 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    21c2:	2201      	movs	r2, #1
    21c4:	6803      	ldr	r3, [r0, #0]
    21c6:	751a      	strb	r2, [r3, #20]
}
    21c8:	4770      	bx	lr
	...

000021cc <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    21cc:	6803      	ldr	r3, [r0, #0]
    21ce:	4a21      	ldr	r2, [pc, #132]	; (2254 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    21d0:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    21d2:	4293      	cmp	r3, r2
    21d4:	d011      	beq.n	21fa <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    21d6:	4a20      	ldr	r2, [pc, #128]	; (2258 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    21d8:	4293      	cmp	r3, r2
    21da:	d02f      	beq.n	223c <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    21dc:	4a1f      	ldr	r2, [pc, #124]	; (225c <_ZN6SERCOM13initClockNVICEv+0x90>)
    21de:	4293      	cmp	r3, r2
    21e0:	d02f      	beq.n	2242 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    21e2:	4a1f      	ldr	r2, [pc, #124]	; (2260 <_ZN6SERCOM13initClockNVICEv+0x94>)
    21e4:	4293      	cmp	r3, r2
    21e6:	d02f      	beq.n	2248 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    21e8:	4a1e      	ldr	r2, [pc, #120]	; (2264 <_ZN6SERCOM13initClockNVICEv+0x98>)
    21ea:	4293      	cmp	r3, r2
    21ec:	d02f      	beq.n	224e <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    21ee:	4a1e      	ldr	r2, [pc, #120]	; (2268 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    21f0:	4293      	cmp	r3, r2
    21f2:	d122      	bne.n	223a <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    21f4:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    21f6:	2219      	movs	r2, #25
    21f8:	e001      	b.n	21fe <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    21fa:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    21fc:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21fe:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2200:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2202:	4099      	lsls	r1, r3
    2204:	4819      	ldr	r0, [pc, #100]	; (226c <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2206:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2208:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    220a:	0899      	lsrs	r1, r3, #2
    220c:	402b      	ands	r3, r5
    220e:	40ab      	lsls	r3, r5
    2210:	35fc      	adds	r5, #252	; 0xfc
    2212:	409d      	lsls	r5, r3
    2214:	0089      	lsls	r1, r1, #2
    2216:	1809      	adds	r1, r1, r0
    2218:	00a4      	lsls	r4, r4, #2
    221a:	5908      	ldr	r0, [r1, r4]
    221c:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    221e:	25c0      	movs	r5, #192	; 0xc0
    2220:	409d      	lsls	r5, r3
    2222:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2224:	4303      	orrs	r3, r0
    2226:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    2228:	2380      	movs	r3, #128	; 0x80
    222a:	01db      	lsls	r3, r3, #7
    222c:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    222e:	4b10      	ldr	r3, [pc, #64]	; (2270 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    2230:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2232:	785a      	ldrb	r2, [r3, #1]
    2234:	b252      	sxtb	r2, r2
    2236:	2a00      	cmp	r2, #0
    2238:	dbfb      	blt.n	2232 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    223a:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    223c:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    223e:	2215      	movs	r2, #21
    2240:	e7dd      	b.n	21fe <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    2242:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    2244:	2216      	movs	r2, #22
    2246:	e7da      	b.n	21fe <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    2248:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    224a:	2217      	movs	r2, #23
    224c:	e7d7      	b.n	21fe <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    224e:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    2250:	2218      	movs	r2, #24
    2252:	e7d4      	b.n	21fe <_ZN6SERCOM13initClockNVICEv+0x32>
    2254:	42000800 	.word	0x42000800
    2258:	42000c00 	.word	0x42000c00
    225c:	42001000 	.word	0x42001000
    2260:	42001400 	.word	0x42001400
    2264:	42001800 	.word	0x42001800
    2268:	42001c00 	.word	0x42001c00
    226c:	e000e100 	.word	0xe000e100
    2270:	40000c00 	.word	0x40000c00

00002274 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    2274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2276:	0004      	movs	r4, r0
    2278:	0016      	movs	r6, r2
    227a:	000f      	movs	r7, r1
    227c:	001d      	movs	r5, r3
  initClockNVIC();
    227e:	f7ff ffa5 	bl	21cc <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    2282:	0020      	movs	r0, r4
    2284:	f7ff ff4c 	bl	2120 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2288:	221c      	movs	r2, #28
    228a:	00bb      	lsls	r3, r7, #2
    228c:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    228e:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2290:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2292:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2294:	4313      	orrs	r3, r2
    2296:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    2298:	2384      	movs	r3, #132	; 0x84
    229a:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    229c:	2f01      	cmp	r7, #1
    229e:	d118      	bne.n	22d2 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    22a0:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    22a2:	2e01      	cmp	r6, #1
    22a4:	d000      	beq.n	22a8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    22a6:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    22a8:	4b0a      	ldr	r3, [pc, #40]	; (22d4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    22aa:	4369      	muls	r1, r5
    22ac:	6818      	ldr	r0, [r3, #0]
    22ae:	00c0      	lsls	r0, r0, #3
    22b0:	f000 fa44 	bl	273c <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    22b4:	2207      	movs	r2, #7
    22b6:	89a3      	ldrh	r3, [r4, #12]
    22b8:	4002      	ands	r2, r0
    22ba:	04db      	lsls	r3, r3, #19
    22bc:	0352      	lsls	r2, r2, #13
    22be:	0cdb      	lsrs	r3, r3, #19
    22c0:	4313      	orrs	r3, r2
    22c2:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    22c4:	0403      	lsls	r3, r0, #16
    22c6:	89a0      	ldrh	r0, [r4, #12]
    22c8:	0cdb      	lsrs	r3, r3, #19
    22ca:	0b40      	lsrs	r0, r0, #13
    22cc:	0340      	lsls	r0, r0, #13
    22ce:	4318      	orrs	r0, r3
    22d0:	81a0      	strh	r0, [r4, #12]
}
    22d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22d4:	20000018 	.word	0x20000018

000022d8 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    22d8:	2001      	movs	r0, #1
    22da:	4770      	bx	lr

000022dc <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    22dc:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    22de:	6803      	ldr	r3, [r0, #0]
    22e0:	4a01      	ldr	r2, [pc, #4]	; (22e8 <_ZN4Uart5beginEm+0xc>)
    22e2:	6a1b      	ldr	r3, [r3, #32]
    22e4:	4798      	blx	r3
}
    22e6:	bd10      	pop	{r4, pc}
    22e8:	00000413 	.word	0x00000413

000022ec <_ZN4Uart4peekEv>:
  if(_iTail == _iHead)
    22ec:	0003      	movs	r3, r0
    22ee:	33fc      	adds	r3, #252	; 0xfc
    22f0:	69d9      	ldr	r1, [r3, #28]
    22f2:	699a      	ldr	r2, [r3, #24]
    22f4:	4291      	cmp	r1, r2
    22f6:	d003      	beq.n	2300 <_ZN4Uart4peekEv+0x14>
  return _aucBuffer[_iTail];
    22f8:	69db      	ldr	r3, [r3, #28]
    22fa:	18c0      	adds	r0, r0, r3
    22fc:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    22fe:	4770      	bx	lr
    return -1;
    2300:	2001      	movs	r0, #1
    2302:	4240      	negs	r0, r0
  return rxBuffer.peek();
    2304:	e7fb      	b.n	22fe <_ZN4Uart4peekEv+0x12>

00002306 <_ZN4Uart3endEv>:
{
    2306:	b510      	push	{r4, lr}
    2308:	0004      	movs	r4, r0
  sercom->resetUART();
    230a:	6900      	ldr	r0, [r0, #16]
    230c:	f7ff ff08 	bl	2120 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    2310:	0022      	movs	r2, r4
    2312:	2300      	movs	r3, #0
    2314:	32fc      	adds	r2, #252	; 0xfc
    2316:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    2318:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    231a:	2286      	movs	r2, #134	; 0x86
    231c:	0092      	lsls	r2, r2, #2
    231e:	18a4      	adds	r4, r4, r2
    2320:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    2322:	60a3      	str	r3, [r4, #8]
}
    2324:	bd10      	pop	{r4, pc}

00002326 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    2326:	20f0      	movs	r0, #240	; 0xf0
    2328:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    232a:	3930      	subs	r1, #48	; 0x30
    232c:	4248      	negs	r0, r1
    232e:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    2330:	4770      	bx	lr

00002332 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    2332:	23f0      	movs	r3, #240	; 0xf0
    2334:	011b      	lsls	r3, r3, #4
    2336:	4019      	ands	r1, r3
    2338:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    233a:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    233c:	009b      	lsls	r3, r3, #2
    233e:	4299      	cmp	r1, r3
    2340:	d00a      	beq.n	2358 <_ZN4Uart15extractCharSizeEt+0x26>
    2342:	3301      	adds	r3, #1
    2344:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    2346:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    2348:	4299      	cmp	r1, r3
    234a:	d005      	beq.n	2358 <_ZN4Uart15extractCharSizeEt+0x26>
    234c:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    234e:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    2350:	005b      	lsls	r3, r3, #1
    2352:	4299      	cmp	r1, r3
    2354:	d000      	beq.n	2358 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    2356:	2000      	movs	r0, #0

  }
}
    2358:	4770      	bx	lr

0000235a <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    235a:	200f      	movs	r0, #15
    235c:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    235e:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    2360:	2901      	cmp	r1, #1
    2362:	d003      	beq.n	236c <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    2364:	3902      	subs	r1, #2
    2366:	1e48      	subs	r0, r1, #1
    2368:	4181      	sbcs	r1, r0
    236a:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    236c:	4770      	bx	lr
	...

00002370 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2370:	2389      	movs	r3, #137	; 0x89
{
    2372:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2374:	2618      	movs	r6, #24
{
    2376:	b085      	sub	sp, #20
    2378:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    237a:	009b      	lsls	r3, r3, #2
{
    237c:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    237e:	5cc0      	ldrb	r0, [r0, r3]
    2380:	0033      	movs	r3, r6
    2382:	2108      	movs	r1, #8
    2384:	4343      	muls	r3, r0
    2386:	4d32      	ldr	r5, [pc, #200]	; (2450 <_ZN4Uart5beginEmt+0xe0>)
{
    2388:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    238a:	18eb      	adds	r3, r5, r3
    238c:	5659      	ldrsb	r1, [r3, r1]
    238e:	f7ff fdd9 	bl	1f44 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    2392:	4b30      	ldr	r3, [pc, #192]	; (2454 <_ZN4Uart5beginEmt+0xe4>)
    2394:	2108      	movs	r1, #8
    2396:	5ce0      	ldrb	r0, [r4, r3]
    2398:	0033      	movs	r3, r6
    239a:	4343      	muls	r3, r0
    239c:	18eb      	adds	r3, r5, r3
    239e:	5659      	ldrsb	r1, [r3, r1]
    23a0:	f7ff fdd0 	bl	1f44 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    23a4:	4b2c      	ldr	r3, [pc, #176]	; (2458 <_ZN4Uart5beginEmt+0xe8>)
    23a6:	5ce2      	ldrb	r2, [r4, r3]
    23a8:	9303      	str	r3, [sp, #12]
    23aa:	2a02      	cmp	r2, #2
    23ac:	d109      	bne.n	23c2 <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    23ae:	3311      	adds	r3, #17
    23b0:	5ce0      	ldrb	r0, [r4, r3]
    23b2:	28ff      	cmp	r0, #255	; 0xff
    23b4:	d005      	beq.n	23c2 <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    23b6:	2108      	movs	r1, #8
    23b8:	4346      	muls	r6, r0
    23ba:	19ae      	adds	r6, r5, r6
    23bc:	5671      	ldrsb	r1, [r6, r1]
    23be:	f7ff fdc1 	bl	1f44 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    23c2:	268a      	movs	r6, #138	; 0x8a
    23c4:	00b6      	lsls	r6, r6, #2
    23c6:	5da0      	ldrb	r0, [r4, r6]
    23c8:	28ff      	cmp	r0, #255	; 0xff
    23ca:	d019      	beq.n	2400 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    23cc:	2101      	movs	r1, #1
    23ce:	f7ff fd41 	bl	1e54 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    23d2:	2218      	movs	r2, #24
    23d4:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    23d6:	4921      	ldr	r1, [pc, #132]	; (245c <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    23d8:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    23da:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    23dc:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    23de:	01db      	lsls	r3, r3, #7
    23e0:	1858      	adds	r0, r3, r1
    23e2:	218b      	movs	r1, #139	; 0x8b
    23e4:	0089      	lsls	r1, r1, #2
    23e6:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    23e8:	491d      	ldr	r1, [pc, #116]	; (2460 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    23ea:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    23ec:	185b      	adds	r3, r3, r1
    23ee:	218c      	movs	r1, #140	; 0x8c
    23f0:	0089      	lsls	r1, r1, #2
    23f2:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    23f4:	6869      	ldr	r1, [r5, #4]
    23f6:	408a      	lsls	r2, r1
    23f8:	218d      	movs	r1, #141	; 0x8d
    23fa:	0089      	lsls	r1, r1, #2
    23fc:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    23fe:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2400:	2201      	movs	r2, #1
    2402:	9b02      	ldr	r3, [sp, #8]
    2404:	0011      	movs	r1, r2
    2406:	6920      	ldr	r0, [r4, #16]
    2408:	f7ff ff34 	bl	2274 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    240c:	0039      	movs	r1, r7
    240e:	0020      	movs	r0, r4
    2410:	f7ff ff8f 	bl	2332 <_ZN4Uart15extractCharSizeEt>
    2414:	0039      	movs	r1, r7
    2416:	0005      	movs	r5, r0
    2418:	0020      	movs	r0, r4
    241a:	f7ff ff9e 	bl	235a <_ZN4Uart13extractParityEt>
    241e:	0039      	movs	r1, r7
    2420:	0006      	movs	r6, r0
    2422:	0020      	movs	r0, r4
    2424:	f7ff ff7f 	bl	2326 <_ZN4Uart16extractNbStopBitEt>
    2428:	0033      	movs	r3, r6
    242a:	9000      	str	r0, [sp, #0]
    242c:	0029      	movs	r1, r5
    242e:	6920      	ldr	r0, [r4, #16]
    2430:	2201      	movs	r2, #1
    2432:	f7ff fe49 	bl	20c8 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    2436:	4b0b      	ldr	r3, [pc, #44]	; (2464 <_ZN4Uart5beginEmt+0xf4>)
    2438:	6920      	ldr	r0, [r4, #16]
    243a:	5ce2      	ldrb	r2, [r4, r3]
    243c:	9b03      	ldr	r3, [sp, #12]
    243e:	5ce1      	ldrb	r1, [r4, r3]
    2440:	f7ff fe5c 	bl	20fc <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    2444:	6920      	ldr	r0, [r4, #16]
    2446:	f7ff fe77 	bl	2138 <_ZN6SERCOM10enableUARTEv>
}
    244a:	b005      	add	sp, #20
    244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	000047cc 	.word	0x000047cc
    2454:	00000225 	.word	0x00000225
    2458:	00000227 	.word	0x00000227
    245c:	41004418 	.word	0x41004418
    2460:	41004414 	.word	0x41004414
    2464:	00000226 	.word	0x00000226

00002468 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    2468:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    246a:	b510      	push	{r4, lr}
    246c:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    246e:	0052      	lsls	r2, r2, #1
    2470:	2100      	movs	r1, #0
    2472:	f002 f862 	bl	453a <memset>
  _iHead = 0;
    2476:	0023      	movs	r3, r4
    2478:	2200      	movs	r2, #0
    247a:	33fc      	adds	r3, #252	; 0xfc
    247c:	605a      	str	r2, [r3, #4]
}
    247e:	0020      	movs	r0, r4
  _iTail = 0;
    2480:	609a      	str	r2, [r3, #8]
}
    2482:	bd10      	pop	{r4, pc}

00002484 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    2484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2486:	001d      	movs	r5, r3
    2488:	ab08      	add	r3, sp, #32
    248a:	781b      	ldrb	r3, [r3, #0]
    248c:	0004      	movs	r4, r0
    248e:	9300      	str	r3, [sp, #0]
    2490:	ab09      	add	r3, sp, #36	; 0x24
    2492:	781b      	ldrb	r3, [r3, #0]
    2494:	0016      	movs	r6, r2
    2496:	9301      	str	r3, [sp, #4]
    2498:	2300      	movs	r3, #0
    249a:	6043      	str	r3, [r0, #4]
    249c:	23fa      	movs	r3, #250	; 0xfa
    249e:	009b      	lsls	r3, r3, #2
    24a0:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    24a2:	4b11      	ldr	r3, [pc, #68]	; (24e8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    24a4:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    24a6:	3308      	adds	r3, #8
    24a8:	6003      	str	r3, [r0, #0]
    24aa:	3014      	adds	r0, #20
    24ac:	f7ff ffdc 	bl	2468 <_ZN11RingBufferNILi256EEC1Ev>
    24b0:	0020      	movs	r0, r4
    24b2:	301d      	adds	r0, #29
    24b4:	30ff      	adds	r0, #255	; 0xff
    24b6:	f7ff ffd7 	bl	2468 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    24ba:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    24bc:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    24be:	009b      	lsls	r3, r3, #2
  sercom = _s;
    24c0:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    24c2:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    24c4:	4b09      	ldr	r3, [pc, #36]	; (24ec <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    24c6:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    24c8:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    24ca:	4b09      	ldr	r3, [pc, #36]	; (24f0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    24cc:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    24ce:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    24d0:	466a      	mov	r2, sp
    24d2:	4b08      	ldr	r3, [pc, #32]	; (24f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    24d4:	7912      	ldrb	r2, [r2, #4]
    24d6:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    24d8:	228a      	movs	r2, #138	; 0x8a
    24da:	3b29      	subs	r3, #41	; 0x29
    24dc:	3bff      	subs	r3, #255	; 0xff
    24de:	0092      	lsls	r2, r2, #2
    24e0:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    24e2:	3210      	adds	r2, #16
    24e4:	54a3      	strb	r3, [r4, r2]
}
    24e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    24e8:	00004c1c 	.word	0x00004c1c
    24ec:	00000225 	.word	0x00000225
    24f0:	00000226 	.word	0x00000226
    24f4:	00000227 	.word	0x00000227

000024f8 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    24f8:	0003      	movs	r3, r0
    24fa:	33fc      	adds	r3, #252	; 0xfc
    24fc:	6858      	ldr	r0, [r3, #4]
    24fe:	689b      	ldr	r3, [r3, #8]
    2500:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    2502:	d501      	bpl.n	2508 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    2504:	3001      	adds	r0, #1
    2506:	30ff      	adds	r0, #255	; 0xff
}
    2508:	4770      	bx	lr

0000250a <_ZN4Uart5flushEv>:
{
    250a:	b510      	push	{r4, lr}
    250c:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    250e:	0020      	movs	r0, r4
    2510:	301d      	adds	r0, #29
    2512:	30ff      	adds	r0, #255	; 0xff
    2514:	f7ff fff0 	bl	24f8 <_ZN11RingBufferNILi256EE9availableEv>
    2518:	2800      	cmp	r0, #0
    251a:	d1f8      	bne.n	250e <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    251c:	6920      	ldr	r0, [r4, #16]
    251e:	f7ff fe14 	bl	214a <_ZN6SERCOM9flushUARTEv>
}
    2522:	bd10      	pop	{r4, pc}

00002524 <_ZN4Uart9availableEv>:
{
    2524:	b510      	push	{r4, lr}
  return rxBuffer.available();
    2526:	3014      	adds	r0, #20
    2528:	f7ff ffe6 	bl	24f8 <_ZN11RingBufferNILi256EE9availableEv>
}
    252c:	bd10      	pop	{r4, pc}

0000252e <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    252e:	0003      	movs	r3, r0
    2530:	33fc      	adds	r3, #252	; 0xfc
    2532:	6859      	ldr	r1, [r3, #4]
    2534:	689a      	ldr	r2, [r3, #8]
    2536:	4291      	cmp	r1, r2
    2538:	db04      	blt.n	2544 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    253a:	685a      	ldr	r2, [r3, #4]
    253c:	6898      	ldr	r0, [r3, #8]
    253e:	1a80      	subs	r0, r0, r2
    2540:	30ff      	adds	r0, #255	; 0xff
}
    2542:	4770      	bx	lr
    return _iTail - _iHead - 1;
    2544:	6898      	ldr	r0, [r3, #8]
    2546:	685b      	ldr	r3, [r3, #4]
    2548:	1ac0      	subs	r0, r0, r3
    254a:	3801      	subs	r0, #1
    254c:	e7f9      	b.n	2542 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

0000254e <_ZN4Uart17availableForWriteEv>:
{
    254e:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    2550:	301d      	adds	r0, #29
    2552:	30ff      	adds	r0, #255	; 0xff
    2554:	f7ff ffeb 	bl	252e <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    2558:	bd10      	pop	{r4, pc}

0000255a <_ZN4Uart10IrqHandlerEv>:
{
    255a:	b510      	push	{r4, lr}
    255c:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    255e:	6900      	ldr	r0, [r0, #16]
    2560:	f7ff fe0f 	bl	2182 <_ZN6SERCOM16isFrameErrorUARTEv>
    2564:	2800      	cmp	r0, #0
    2566:	d005      	beq.n	2574 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    2568:	6920      	ldr	r0, [r4, #16]
    256a:	f7ff fe1a 	bl	21a2 <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    256e:	6920      	ldr	r0, [r4, #16]
    2570:	f7ff fe0c 	bl	218c <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    2574:	6920      	ldr	r0, [r4, #16]
    2576:	f7ff fdf4 	bl	2162 <_ZN6SERCOM17availableDataUARTEv>
    257a:	2800      	cmp	r0, #0
    257c:	d020      	beq.n	25c0 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    257e:	6920      	ldr	r0, [r4, #16]
    2580:	f7ff fe0f 	bl	21a2 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    2584:	0022      	movs	r2, r4
    2586:	32fc      	adds	r2, #252	; 0xfc
    2588:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    258a:	69d1      	ldr	r1, [r2, #28]
  return (uint32_t)(index + 1) % N;
    258c:	3301      	adds	r3, #1
    258e:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    2590:	428b      	cmp	r3, r1
    2592:	d003      	beq.n	259c <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    2594:	6991      	ldr	r1, [r2, #24]
    2596:	1861      	adds	r1, r4, r1
    2598:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    259a:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    259c:	238a      	movs	r3, #138	; 0x8a
    259e:	009b      	lsls	r3, r3, #2
    25a0:	5ce3      	ldrb	r3, [r4, r3]
    25a2:	2bff      	cmp	r3, #255	; 0xff
    25a4:	d00c      	beq.n	25c0 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    25a6:	0020      	movs	r0, r4
    25a8:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    25aa:	f7ff ffc0 	bl	252e <_ZN11RingBufferNILi256EE17availableForStoreEv>
    25ae:	2809      	cmp	r0, #9
    25b0:	dc06      	bgt.n	25c0 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    25b2:	238b      	movs	r3, #139	; 0x8b
    25b4:	228d      	movs	r2, #141	; 0x8d
    25b6:	009b      	lsls	r3, r3, #2
    25b8:	0092      	lsls	r2, r2, #2
    25ba:	58e3      	ldr	r3, [r4, r3]
    25bc:	58a2      	ldr	r2, [r4, r2]
    25be:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    25c0:	6920      	ldr	r0, [r4, #16]
    25c2:	f7ff fde9 	bl	2198 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    25c6:	2800      	cmp	r0, #0
    25c8:	d01a      	beq.n	2600 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    25ca:	0020      	movs	r0, r4
    25cc:	301d      	adds	r0, #29
    25ce:	30ff      	adds	r0, #255	; 0xff
    25d0:	f7ff ff92 	bl	24f8 <_ZN11RingBufferNILi256EE9availableEv>
    25d4:	2800      	cmp	r0, #0
    25d6:	d022      	beq.n	261e <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    25d8:	2386      	movs	r3, #134	; 0x86
    25da:	009b      	lsls	r3, r3, #2
    25dc:	18e3      	adds	r3, r4, r3
    25de:	6899      	ldr	r1, [r3, #8]
    25e0:	685a      	ldr	r2, [r3, #4]
    25e2:	4291      	cmp	r1, r2
    25e4:	d018      	beq.n	2618 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    25e6:	218e      	movs	r1, #142	; 0x8e
    25e8:	689a      	ldr	r2, [r3, #8]
    25ea:	0049      	lsls	r1, r1, #1
    25ec:	18a2      	adds	r2, r4, r2
    25ee:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    25f0:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    25f2:	3201      	adds	r2, #1
    25f4:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    25f6:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    25f8:	b2c9      	uxtb	r1, r1
    25fa:	6920      	ldr	r0, [r4, #16]
    25fc:	f7ff fdd5 	bl	21aa <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    2600:	6920      	ldr	r0, [r4, #16]
    2602:	f7ff fdb3 	bl	216c <_ZN6SERCOM11isUARTErrorEv>
    2606:	2800      	cmp	r0, #0
    2608:	d005      	beq.n	2616 <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    260a:	6920      	ldr	r0, [r4, #16]
    260c:	f7ff fdb2 	bl	2174 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    2610:	6920      	ldr	r0, [r4, #16]
    2612:	f7ff fda2 	bl	215a <_ZN6SERCOM15clearStatusUARTEv>
}
    2616:	bd10      	pop	{r4, pc}
    return -1;
    2618:	2101      	movs	r1, #1
    261a:	4249      	negs	r1, r1
    261c:	e7ec      	b.n	25f8 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    261e:	6920      	ldr	r0, [r4, #16]
    2620:	f7ff fdcf 	bl	21c2 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    2624:	e7ec      	b.n	2600 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00002628 <_ZN4Uart5writeEh>:
{
    2628:	b570      	push	{r4, r5, r6, lr}
    262a:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    262c:	6900      	ldr	r0, [r0, #16]
{
    262e:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2630:	f7ff fdb2 	bl	2198 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2634:	2800      	cmp	r0, #0
    2636:	d124      	bne.n	2682 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    2638:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    263a:	2386      	movs	r3, #134	; 0x86
    263c:	009b      	lsls	r3, r3, #2
    263e:	18e3      	adds	r3, r4, r3
    2640:	685a      	ldr	r2, [r3, #4]
    2642:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    2644:	3201      	adds	r2, #1
    2646:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    2648:	428a      	cmp	r2, r1
    264a:	d12f      	bne.n	26ac <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    264c:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    2650:	07db      	lsls	r3, r3, #31
    2652:	d40d      	bmi.n	2670 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    2654:	4b1e      	ldr	r3, [pc, #120]	; (26d0 <_ZN4Uart5writeEh+0xa8>)
    2656:	685b      	ldr	r3, [r3, #4]
    2658:	05db      	lsls	r3, r3, #23
    265a:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    265c:	d0ed      	beq.n	263a <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    265e:	3b10      	subs	r3, #16
    2660:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    2662:	2b00      	cmp	r3, #0
    2664:	db19      	blt.n	269a <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    2666:	089b      	lsrs	r3, r3, #2
    2668:	33c0      	adds	r3, #192	; 0xc0
    266a:	4a1a      	ldr	r2, [pc, #104]	; (26d4 <_ZN4Uart5writeEh+0xac>)
    266c:	009b      	lsls	r3, r3, #2
    266e:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    2670:	6920      	ldr	r0, [r4, #16]
    2672:	f7ff fd91 	bl	2198 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2676:	2800      	cmp	r0, #0
    2678:	d0df      	beq.n	263a <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    267a:	0020      	movs	r0, r4
    267c:	f7ff ff6d 	bl	255a <_ZN4Uart10IrqHandlerEv>
    2680:	e7db      	b.n	263a <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2682:	0020      	movs	r0, r4
    2684:	301d      	adds	r0, #29
    2686:	30ff      	adds	r0, #255	; 0xff
    2688:	f7ff ff36 	bl	24f8 <_ZN11RingBufferNILi256EE9availableEv>
    268c:	2800      	cmp	r0, #0
    268e:	d1d3      	bne.n	2638 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    2690:	0029      	movs	r1, r5
    2692:	6920      	ldr	r0, [r4, #16]
    2694:	f7ff fd89 	bl	21aa <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    2698:	e017      	b.n	26ca <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    269a:	220f      	movs	r2, #15
    269c:	4013      	ands	r3, r2
    269e:	3b08      	subs	r3, #8
    26a0:	089b      	lsrs	r3, r3, #2
    26a2:	4a0d      	ldr	r2, [pc, #52]	; (26d8 <_ZN4Uart5writeEh+0xb0>)
    26a4:	009b      	lsls	r3, r3, #2
    26a6:	189b      	adds	r3, r3, r2
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	e7e1      	b.n	2670 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    26ac:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    26ae:	3201      	adds	r2, #1
    26b0:	4016      	ands	r6, r2
  if ( i != _iTail )
    26b2:	689a      	ldr	r2, [r3, #8]
    26b4:	4296      	cmp	r6, r2
    26b6:	d005      	beq.n	26c4 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    26b8:	218e      	movs	r1, #142	; 0x8e
    26ba:	685a      	ldr	r2, [r3, #4]
    26bc:	0049      	lsls	r1, r1, #1
    26be:	18a2      	adds	r2, r4, r2
    26c0:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    26c2:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    26c4:	6920      	ldr	r0, [r4, #16]
    26c6:	f7ff fd78 	bl	21ba <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    26ca:	2001      	movs	r0, #1
    26cc:	bd70      	pop	{r4, r5, r6, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	e000ed00 	.word	0xe000ed00
    26d4:	e000e100 	.word	0xe000e100
    26d8:	e000ed1c 	.word	0xe000ed1c

000026dc <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    26dc:	0003      	movs	r3, r0
    26de:	33fc      	adds	r3, #252	; 0xfc
    26e0:	69d9      	ldr	r1, [r3, #28]
    26e2:	699a      	ldr	r2, [r3, #24]
{
    26e4:	b570      	push	{r4, r5, r6, lr}
    26e6:	0004      	movs	r4, r0
    26e8:	4291      	cmp	r1, r2
    26ea:	d01a      	beq.n	2722 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    26ec:	69da      	ldr	r2, [r3, #28]
    26ee:	1882      	adds	r2, r0, r2
    26f0:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    26f2:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    26f4:	3201      	adds	r2, #1
    26f6:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    26f8:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    26fa:	238a      	movs	r3, #138	; 0x8a
    26fc:	009b      	lsls	r3, r3, #2
    26fe:	5ce3      	ldrb	r3, [r4, r3]
    2700:	2bff      	cmp	r3, #255	; 0xff
    2702:	d00c      	beq.n	271e <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    2704:	0020      	movs	r0, r4
    2706:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    2708:	f7ff ff11 	bl	252e <_ZN11RingBufferNILi256EE17availableForStoreEv>
    270c:	280a      	cmp	r0, #10
    270e:	dd06      	ble.n	271e <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    2710:	238c      	movs	r3, #140	; 0x8c
    2712:	228d      	movs	r2, #141	; 0x8d
    2714:	009b      	lsls	r3, r3, #2
    2716:	0092      	lsls	r2, r2, #2
    2718:	58e3      	ldr	r3, [r4, r3]
    271a:	58a2      	ldr	r2, [r4, r2]
    271c:	601a      	str	r2, [r3, #0]
}
    271e:	0028      	movs	r0, r5
    2720:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    2722:	2501      	movs	r5, #1
    2724:	426d      	negs	r5, r5
    2726:	e7e8      	b.n	26fa <_ZN4Uart4readEv+0x1e>

00002728 <__gnu_thumb1_case_uqi>:
    2728:	b402      	push	{r1}
    272a:	4671      	mov	r1, lr
    272c:	0849      	lsrs	r1, r1, #1
    272e:	0049      	lsls	r1, r1, #1
    2730:	5c09      	ldrb	r1, [r1, r0]
    2732:	0049      	lsls	r1, r1, #1
    2734:	448e      	add	lr, r1
    2736:	bc02      	pop	{r1}
    2738:	4770      	bx	lr
    273a:	46c0      	nop			; (mov r8, r8)

0000273c <__udivsi3>:
    273c:	2200      	movs	r2, #0
    273e:	0843      	lsrs	r3, r0, #1
    2740:	428b      	cmp	r3, r1
    2742:	d374      	bcc.n	282e <__udivsi3+0xf2>
    2744:	0903      	lsrs	r3, r0, #4
    2746:	428b      	cmp	r3, r1
    2748:	d35f      	bcc.n	280a <__udivsi3+0xce>
    274a:	0a03      	lsrs	r3, r0, #8
    274c:	428b      	cmp	r3, r1
    274e:	d344      	bcc.n	27da <__udivsi3+0x9e>
    2750:	0b03      	lsrs	r3, r0, #12
    2752:	428b      	cmp	r3, r1
    2754:	d328      	bcc.n	27a8 <__udivsi3+0x6c>
    2756:	0c03      	lsrs	r3, r0, #16
    2758:	428b      	cmp	r3, r1
    275a:	d30d      	bcc.n	2778 <__udivsi3+0x3c>
    275c:	22ff      	movs	r2, #255	; 0xff
    275e:	0209      	lsls	r1, r1, #8
    2760:	ba12      	rev	r2, r2
    2762:	0c03      	lsrs	r3, r0, #16
    2764:	428b      	cmp	r3, r1
    2766:	d302      	bcc.n	276e <__udivsi3+0x32>
    2768:	1212      	asrs	r2, r2, #8
    276a:	0209      	lsls	r1, r1, #8
    276c:	d065      	beq.n	283a <__udivsi3+0xfe>
    276e:	0b03      	lsrs	r3, r0, #12
    2770:	428b      	cmp	r3, r1
    2772:	d319      	bcc.n	27a8 <__udivsi3+0x6c>
    2774:	e000      	b.n	2778 <__udivsi3+0x3c>
    2776:	0a09      	lsrs	r1, r1, #8
    2778:	0bc3      	lsrs	r3, r0, #15
    277a:	428b      	cmp	r3, r1
    277c:	d301      	bcc.n	2782 <__udivsi3+0x46>
    277e:	03cb      	lsls	r3, r1, #15
    2780:	1ac0      	subs	r0, r0, r3
    2782:	4152      	adcs	r2, r2
    2784:	0b83      	lsrs	r3, r0, #14
    2786:	428b      	cmp	r3, r1
    2788:	d301      	bcc.n	278e <__udivsi3+0x52>
    278a:	038b      	lsls	r3, r1, #14
    278c:	1ac0      	subs	r0, r0, r3
    278e:	4152      	adcs	r2, r2
    2790:	0b43      	lsrs	r3, r0, #13
    2792:	428b      	cmp	r3, r1
    2794:	d301      	bcc.n	279a <__udivsi3+0x5e>
    2796:	034b      	lsls	r3, r1, #13
    2798:	1ac0      	subs	r0, r0, r3
    279a:	4152      	adcs	r2, r2
    279c:	0b03      	lsrs	r3, r0, #12
    279e:	428b      	cmp	r3, r1
    27a0:	d301      	bcc.n	27a6 <__udivsi3+0x6a>
    27a2:	030b      	lsls	r3, r1, #12
    27a4:	1ac0      	subs	r0, r0, r3
    27a6:	4152      	adcs	r2, r2
    27a8:	0ac3      	lsrs	r3, r0, #11
    27aa:	428b      	cmp	r3, r1
    27ac:	d301      	bcc.n	27b2 <__udivsi3+0x76>
    27ae:	02cb      	lsls	r3, r1, #11
    27b0:	1ac0      	subs	r0, r0, r3
    27b2:	4152      	adcs	r2, r2
    27b4:	0a83      	lsrs	r3, r0, #10
    27b6:	428b      	cmp	r3, r1
    27b8:	d301      	bcc.n	27be <__udivsi3+0x82>
    27ba:	028b      	lsls	r3, r1, #10
    27bc:	1ac0      	subs	r0, r0, r3
    27be:	4152      	adcs	r2, r2
    27c0:	0a43      	lsrs	r3, r0, #9
    27c2:	428b      	cmp	r3, r1
    27c4:	d301      	bcc.n	27ca <__udivsi3+0x8e>
    27c6:	024b      	lsls	r3, r1, #9
    27c8:	1ac0      	subs	r0, r0, r3
    27ca:	4152      	adcs	r2, r2
    27cc:	0a03      	lsrs	r3, r0, #8
    27ce:	428b      	cmp	r3, r1
    27d0:	d301      	bcc.n	27d6 <__udivsi3+0x9a>
    27d2:	020b      	lsls	r3, r1, #8
    27d4:	1ac0      	subs	r0, r0, r3
    27d6:	4152      	adcs	r2, r2
    27d8:	d2cd      	bcs.n	2776 <__udivsi3+0x3a>
    27da:	09c3      	lsrs	r3, r0, #7
    27dc:	428b      	cmp	r3, r1
    27de:	d301      	bcc.n	27e4 <__udivsi3+0xa8>
    27e0:	01cb      	lsls	r3, r1, #7
    27e2:	1ac0      	subs	r0, r0, r3
    27e4:	4152      	adcs	r2, r2
    27e6:	0983      	lsrs	r3, r0, #6
    27e8:	428b      	cmp	r3, r1
    27ea:	d301      	bcc.n	27f0 <__udivsi3+0xb4>
    27ec:	018b      	lsls	r3, r1, #6
    27ee:	1ac0      	subs	r0, r0, r3
    27f0:	4152      	adcs	r2, r2
    27f2:	0943      	lsrs	r3, r0, #5
    27f4:	428b      	cmp	r3, r1
    27f6:	d301      	bcc.n	27fc <__udivsi3+0xc0>
    27f8:	014b      	lsls	r3, r1, #5
    27fa:	1ac0      	subs	r0, r0, r3
    27fc:	4152      	adcs	r2, r2
    27fe:	0903      	lsrs	r3, r0, #4
    2800:	428b      	cmp	r3, r1
    2802:	d301      	bcc.n	2808 <__udivsi3+0xcc>
    2804:	010b      	lsls	r3, r1, #4
    2806:	1ac0      	subs	r0, r0, r3
    2808:	4152      	adcs	r2, r2
    280a:	08c3      	lsrs	r3, r0, #3
    280c:	428b      	cmp	r3, r1
    280e:	d301      	bcc.n	2814 <__udivsi3+0xd8>
    2810:	00cb      	lsls	r3, r1, #3
    2812:	1ac0      	subs	r0, r0, r3
    2814:	4152      	adcs	r2, r2
    2816:	0883      	lsrs	r3, r0, #2
    2818:	428b      	cmp	r3, r1
    281a:	d301      	bcc.n	2820 <__udivsi3+0xe4>
    281c:	008b      	lsls	r3, r1, #2
    281e:	1ac0      	subs	r0, r0, r3
    2820:	4152      	adcs	r2, r2
    2822:	0843      	lsrs	r3, r0, #1
    2824:	428b      	cmp	r3, r1
    2826:	d301      	bcc.n	282c <__udivsi3+0xf0>
    2828:	004b      	lsls	r3, r1, #1
    282a:	1ac0      	subs	r0, r0, r3
    282c:	4152      	adcs	r2, r2
    282e:	1a41      	subs	r1, r0, r1
    2830:	d200      	bcs.n	2834 <__udivsi3+0xf8>
    2832:	4601      	mov	r1, r0
    2834:	4152      	adcs	r2, r2
    2836:	4610      	mov	r0, r2
    2838:	4770      	bx	lr
    283a:	e7ff      	b.n	283c <__udivsi3+0x100>
    283c:	b501      	push	{r0, lr}
    283e:	2000      	movs	r0, #0
    2840:	f000 f806 	bl	2850 <__aeabi_idiv0>
    2844:	bd02      	pop	{r1, pc}
    2846:	46c0      	nop			; (mov r8, r8)

00002848 <__aeabi_uidivmod>:
    2848:	2900      	cmp	r1, #0
    284a:	d0f7      	beq.n	283c <__udivsi3+0x100>
    284c:	e776      	b.n	273c <__udivsi3>
    284e:	4770      	bx	lr

00002850 <__aeabi_idiv0>:
    2850:	4770      	bx	lr
    2852:	46c0      	nop			; (mov r8, r8)

00002854 <__aeabi_cdrcmple>:
    2854:	4684      	mov	ip, r0
    2856:	1c10      	adds	r0, r2, #0
    2858:	4662      	mov	r2, ip
    285a:	468c      	mov	ip, r1
    285c:	1c19      	adds	r1, r3, #0
    285e:	4663      	mov	r3, ip
    2860:	e000      	b.n	2864 <__aeabi_cdcmpeq>
    2862:	46c0      	nop			; (mov r8, r8)

00002864 <__aeabi_cdcmpeq>:
    2864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2866:	f000 ff33 	bl	36d0 <__ledf2>
    286a:	2800      	cmp	r0, #0
    286c:	d401      	bmi.n	2872 <__aeabi_cdcmpeq+0xe>
    286e:	2100      	movs	r1, #0
    2870:	42c8      	cmn	r0, r1
    2872:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002874 <__aeabi_dcmpeq>:
    2874:	b510      	push	{r4, lr}
    2876:	f000 fe8d 	bl	3594 <__eqdf2>
    287a:	4240      	negs	r0, r0
    287c:	3001      	adds	r0, #1
    287e:	bd10      	pop	{r4, pc}

00002880 <__aeabi_dcmplt>:
    2880:	b510      	push	{r4, lr}
    2882:	f000 ff25 	bl	36d0 <__ledf2>
    2886:	2800      	cmp	r0, #0
    2888:	db01      	blt.n	288e <__aeabi_dcmplt+0xe>
    288a:	2000      	movs	r0, #0
    288c:	bd10      	pop	{r4, pc}
    288e:	2001      	movs	r0, #1
    2890:	bd10      	pop	{r4, pc}
    2892:	46c0      	nop			; (mov r8, r8)

00002894 <__aeabi_dcmple>:
    2894:	b510      	push	{r4, lr}
    2896:	f000 ff1b 	bl	36d0 <__ledf2>
    289a:	2800      	cmp	r0, #0
    289c:	dd01      	ble.n	28a2 <__aeabi_dcmple+0xe>
    289e:	2000      	movs	r0, #0
    28a0:	bd10      	pop	{r4, pc}
    28a2:	2001      	movs	r0, #1
    28a4:	bd10      	pop	{r4, pc}
    28a6:	46c0      	nop			; (mov r8, r8)

000028a8 <__aeabi_dcmpgt>:
    28a8:	b510      	push	{r4, lr}
    28aa:	f000 fead 	bl	3608 <__gedf2>
    28ae:	2800      	cmp	r0, #0
    28b0:	dc01      	bgt.n	28b6 <__aeabi_dcmpgt+0xe>
    28b2:	2000      	movs	r0, #0
    28b4:	bd10      	pop	{r4, pc}
    28b6:	2001      	movs	r0, #1
    28b8:	bd10      	pop	{r4, pc}
    28ba:	46c0      	nop			; (mov r8, r8)

000028bc <__aeabi_dcmpge>:
    28bc:	b510      	push	{r4, lr}
    28be:	f000 fea3 	bl	3608 <__gedf2>
    28c2:	2800      	cmp	r0, #0
    28c4:	da01      	bge.n	28ca <__aeabi_dcmpge+0xe>
    28c6:	2000      	movs	r0, #0
    28c8:	bd10      	pop	{r4, pc}
    28ca:	2001      	movs	r0, #1
    28cc:	bd10      	pop	{r4, pc}
    28ce:	46c0      	nop			; (mov r8, r8)

000028d0 <__aeabi_d2uiz>:
    28d0:	b570      	push	{r4, r5, r6, lr}
    28d2:	2200      	movs	r2, #0
    28d4:	4b0c      	ldr	r3, [pc, #48]	; (2908 <__aeabi_d2uiz+0x38>)
    28d6:	0004      	movs	r4, r0
    28d8:	000d      	movs	r5, r1
    28da:	f7ff ffef 	bl	28bc <__aeabi_dcmpge>
    28de:	2800      	cmp	r0, #0
    28e0:	d104      	bne.n	28ec <__aeabi_d2uiz+0x1c>
    28e2:	0020      	movs	r0, r4
    28e4:	0029      	movs	r1, r5
    28e6:	f001 fd0b 	bl	4300 <__aeabi_d2iz>
    28ea:	bd70      	pop	{r4, r5, r6, pc}
    28ec:	4b06      	ldr	r3, [pc, #24]	; (2908 <__aeabi_d2uiz+0x38>)
    28ee:	2200      	movs	r2, #0
    28f0:	0020      	movs	r0, r4
    28f2:	0029      	movs	r1, r5
    28f4:	f001 f9ce 	bl	3c94 <__aeabi_dsub>
    28f8:	f001 fd02 	bl	4300 <__aeabi_d2iz>
    28fc:	2380      	movs	r3, #128	; 0x80
    28fe:	061b      	lsls	r3, r3, #24
    2900:	469c      	mov	ip, r3
    2902:	4460      	add	r0, ip
    2904:	e7f1      	b.n	28ea <__aeabi_d2uiz+0x1a>
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	41e00000 	.word	0x41e00000

0000290c <__aeabi_dadd>:
    290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    290e:	4645      	mov	r5, r8
    2910:	46de      	mov	lr, fp
    2912:	4657      	mov	r7, sl
    2914:	464e      	mov	r6, r9
    2916:	030c      	lsls	r4, r1, #12
    2918:	b5e0      	push	{r5, r6, r7, lr}
    291a:	004e      	lsls	r6, r1, #1
    291c:	0fc9      	lsrs	r1, r1, #31
    291e:	4688      	mov	r8, r1
    2920:	000d      	movs	r5, r1
    2922:	0a61      	lsrs	r1, r4, #9
    2924:	0f44      	lsrs	r4, r0, #29
    2926:	430c      	orrs	r4, r1
    2928:	00c7      	lsls	r7, r0, #3
    292a:	0319      	lsls	r1, r3, #12
    292c:	0058      	lsls	r0, r3, #1
    292e:	0fdb      	lsrs	r3, r3, #31
    2930:	469b      	mov	fp, r3
    2932:	0a4b      	lsrs	r3, r1, #9
    2934:	0f51      	lsrs	r1, r2, #29
    2936:	430b      	orrs	r3, r1
    2938:	0d76      	lsrs	r6, r6, #21
    293a:	0d40      	lsrs	r0, r0, #21
    293c:	0019      	movs	r1, r3
    293e:	00d2      	lsls	r2, r2, #3
    2940:	45d8      	cmp	r8, fp
    2942:	d100      	bne.n	2946 <__aeabi_dadd+0x3a>
    2944:	e0ae      	b.n	2aa4 <__aeabi_dadd+0x198>
    2946:	1a35      	subs	r5, r6, r0
    2948:	2d00      	cmp	r5, #0
    294a:	dc00      	bgt.n	294e <__aeabi_dadd+0x42>
    294c:	e0f6      	b.n	2b3c <__aeabi_dadd+0x230>
    294e:	2800      	cmp	r0, #0
    2950:	d10f      	bne.n	2972 <__aeabi_dadd+0x66>
    2952:	4313      	orrs	r3, r2
    2954:	d100      	bne.n	2958 <__aeabi_dadd+0x4c>
    2956:	e0db      	b.n	2b10 <__aeabi_dadd+0x204>
    2958:	1e6b      	subs	r3, r5, #1
    295a:	2b00      	cmp	r3, #0
    295c:	d000      	beq.n	2960 <__aeabi_dadd+0x54>
    295e:	e137      	b.n	2bd0 <__aeabi_dadd+0x2c4>
    2960:	1aba      	subs	r2, r7, r2
    2962:	4297      	cmp	r7, r2
    2964:	41bf      	sbcs	r7, r7
    2966:	1a64      	subs	r4, r4, r1
    2968:	427f      	negs	r7, r7
    296a:	1be4      	subs	r4, r4, r7
    296c:	2601      	movs	r6, #1
    296e:	0017      	movs	r7, r2
    2970:	e024      	b.n	29bc <__aeabi_dadd+0xb0>
    2972:	4bc6      	ldr	r3, [pc, #792]	; (2c8c <__aeabi_dadd+0x380>)
    2974:	429e      	cmp	r6, r3
    2976:	d04d      	beq.n	2a14 <__aeabi_dadd+0x108>
    2978:	2380      	movs	r3, #128	; 0x80
    297a:	041b      	lsls	r3, r3, #16
    297c:	4319      	orrs	r1, r3
    297e:	2d38      	cmp	r5, #56	; 0x38
    2980:	dd00      	ble.n	2984 <__aeabi_dadd+0x78>
    2982:	e107      	b.n	2b94 <__aeabi_dadd+0x288>
    2984:	2d1f      	cmp	r5, #31
    2986:	dd00      	ble.n	298a <__aeabi_dadd+0x7e>
    2988:	e138      	b.n	2bfc <__aeabi_dadd+0x2f0>
    298a:	2020      	movs	r0, #32
    298c:	1b43      	subs	r3, r0, r5
    298e:	469a      	mov	sl, r3
    2990:	000b      	movs	r3, r1
    2992:	4650      	mov	r0, sl
    2994:	4083      	lsls	r3, r0
    2996:	4699      	mov	r9, r3
    2998:	0013      	movs	r3, r2
    299a:	4648      	mov	r0, r9
    299c:	40eb      	lsrs	r3, r5
    299e:	4318      	orrs	r0, r3
    29a0:	0003      	movs	r3, r0
    29a2:	4650      	mov	r0, sl
    29a4:	4082      	lsls	r2, r0
    29a6:	1e50      	subs	r0, r2, #1
    29a8:	4182      	sbcs	r2, r0
    29aa:	40e9      	lsrs	r1, r5
    29ac:	431a      	orrs	r2, r3
    29ae:	1aba      	subs	r2, r7, r2
    29b0:	1a61      	subs	r1, r4, r1
    29b2:	4297      	cmp	r7, r2
    29b4:	41a4      	sbcs	r4, r4
    29b6:	0017      	movs	r7, r2
    29b8:	4264      	negs	r4, r4
    29ba:	1b0c      	subs	r4, r1, r4
    29bc:	0223      	lsls	r3, r4, #8
    29be:	d562      	bpl.n	2a86 <__aeabi_dadd+0x17a>
    29c0:	0264      	lsls	r4, r4, #9
    29c2:	0a65      	lsrs	r5, r4, #9
    29c4:	2d00      	cmp	r5, #0
    29c6:	d100      	bne.n	29ca <__aeabi_dadd+0xbe>
    29c8:	e0df      	b.n	2b8a <__aeabi_dadd+0x27e>
    29ca:	0028      	movs	r0, r5
    29cc:	f001 fd56 	bl	447c <__clzsi2>
    29d0:	0003      	movs	r3, r0
    29d2:	3b08      	subs	r3, #8
    29d4:	2b1f      	cmp	r3, #31
    29d6:	dd00      	ble.n	29da <__aeabi_dadd+0xce>
    29d8:	e0d2      	b.n	2b80 <__aeabi_dadd+0x274>
    29da:	2220      	movs	r2, #32
    29dc:	003c      	movs	r4, r7
    29de:	1ad2      	subs	r2, r2, r3
    29e0:	409d      	lsls	r5, r3
    29e2:	40d4      	lsrs	r4, r2
    29e4:	409f      	lsls	r7, r3
    29e6:	4325      	orrs	r5, r4
    29e8:	429e      	cmp	r6, r3
    29ea:	dd00      	ble.n	29ee <__aeabi_dadd+0xe2>
    29ec:	e0c4      	b.n	2b78 <__aeabi_dadd+0x26c>
    29ee:	1b9e      	subs	r6, r3, r6
    29f0:	1c73      	adds	r3, r6, #1
    29f2:	2b1f      	cmp	r3, #31
    29f4:	dd00      	ble.n	29f8 <__aeabi_dadd+0xec>
    29f6:	e0f1      	b.n	2bdc <__aeabi_dadd+0x2d0>
    29f8:	2220      	movs	r2, #32
    29fa:	0038      	movs	r0, r7
    29fc:	0029      	movs	r1, r5
    29fe:	1ad2      	subs	r2, r2, r3
    2a00:	40d8      	lsrs	r0, r3
    2a02:	4091      	lsls	r1, r2
    2a04:	4097      	lsls	r7, r2
    2a06:	002c      	movs	r4, r5
    2a08:	4301      	orrs	r1, r0
    2a0a:	1e78      	subs	r0, r7, #1
    2a0c:	4187      	sbcs	r7, r0
    2a0e:	40dc      	lsrs	r4, r3
    2a10:	2600      	movs	r6, #0
    2a12:	430f      	orrs	r7, r1
    2a14:	077b      	lsls	r3, r7, #29
    2a16:	d009      	beq.n	2a2c <__aeabi_dadd+0x120>
    2a18:	230f      	movs	r3, #15
    2a1a:	403b      	ands	r3, r7
    2a1c:	2b04      	cmp	r3, #4
    2a1e:	d005      	beq.n	2a2c <__aeabi_dadd+0x120>
    2a20:	1d3b      	adds	r3, r7, #4
    2a22:	42bb      	cmp	r3, r7
    2a24:	41bf      	sbcs	r7, r7
    2a26:	427f      	negs	r7, r7
    2a28:	19e4      	adds	r4, r4, r7
    2a2a:	001f      	movs	r7, r3
    2a2c:	0223      	lsls	r3, r4, #8
    2a2e:	d52c      	bpl.n	2a8a <__aeabi_dadd+0x17e>
    2a30:	4b96      	ldr	r3, [pc, #600]	; (2c8c <__aeabi_dadd+0x380>)
    2a32:	3601      	adds	r6, #1
    2a34:	429e      	cmp	r6, r3
    2a36:	d100      	bne.n	2a3a <__aeabi_dadd+0x12e>
    2a38:	e09a      	b.n	2b70 <__aeabi_dadd+0x264>
    2a3a:	4645      	mov	r5, r8
    2a3c:	4b94      	ldr	r3, [pc, #592]	; (2c90 <__aeabi_dadd+0x384>)
    2a3e:	08ff      	lsrs	r7, r7, #3
    2a40:	401c      	ands	r4, r3
    2a42:	0760      	lsls	r0, r4, #29
    2a44:	0576      	lsls	r6, r6, #21
    2a46:	0264      	lsls	r4, r4, #9
    2a48:	4307      	orrs	r7, r0
    2a4a:	0b24      	lsrs	r4, r4, #12
    2a4c:	0d76      	lsrs	r6, r6, #21
    2a4e:	2100      	movs	r1, #0
    2a50:	0324      	lsls	r4, r4, #12
    2a52:	0b23      	lsrs	r3, r4, #12
    2a54:	0d0c      	lsrs	r4, r1, #20
    2a56:	4a8f      	ldr	r2, [pc, #572]	; (2c94 <__aeabi_dadd+0x388>)
    2a58:	0524      	lsls	r4, r4, #20
    2a5a:	431c      	orrs	r4, r3
    2a5c:	4014      	ands	r4, r2
    2a5e:	0533      	lsls	r3, r6, #20
    2a60:	4323      	orrs	r3, r4
    2a62:	005b      	lsls	r3, r3, #1
    2a64:	07ed      	lsls	r5, r5, #31
    2a66:	085b      	lsrs	r3, r3, #1
    2a68:	432b      	orrs	r3, r5
    2a6a:	0038      	movs	r0, r7
    2a6c:	0019      	movs	r1, r3
    2a6e:	bc3c      	pop	{r2, r3, r4, r5}
    2a70:	4690      	mov	r8, r2
    2a72:	4699      	mov	r9, r3
    2a74:	46a2      	mov	sl, r4
    2a76:	46ab      	mov	fp, r5
    2a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a7a:	4664      	mov	r4, ip
    2a7c:	4304      	orrs	r4, r0
    2a7e:	d100      	bne.n	2a82 <__aeabi_dadd+0x176>
    2a80:	e211      	b.n	2ea6 <__aeabi_dadd+0x59a>
    2a82:	0004      	movs	r4, r0
    2a84:	4667      	mov	r7, ip
    2a86:	077b      	lsls	r3, r7, #29
    2a88:	d1c6      	bne.n	2a18 <__aeabi_dadd+0x10c>
    2a8a:	4645      	mov	r5, r8
    2a8c:	0760      	lsls	r0, r4, #29
    2a8e:	08ff      	lsrs	r7, r7, #3
    2a90:	4307      	orrs	r7, r0
    2a92:	08e4      	lsrs	r4, r4, #3
    2a94:	4b7d      	ldr	r3, [pc, #500]	; (2c8c <__aeabi_dadd+0x380>)
    2a96:	429e      	cmp	r6, r3
    2a98:	d030      	beq.n	2afc <__aeabi_dadd+0x1f0>
    2a9a:	0324      	lsls	r4, r4, #12
    2a9c:	0576      	lsls	r6, r6, #21
    2a9e:	0b24      	lsrs	r4, r4, #12
    2aa0:	0d76      	lsrs	r6, r6, #21
    2aa2:	e7d4      	b.n	2a4e <__aeabi_dadd+0x142>
    2aa4:	1a33      	subs	r3, r6, r0
    2aa6:	469a      	mov	sl, r3
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	dd78      	ble.n	2b9e <__aeabi_dadd+0x292>
    2aac:	2800      	cmp	r0, #0
    2aae:	d031      	beq.n	2b14 <__aeabi_dadd+0x208>
    2ab0:	4876      	ldr	r0, [pc, #472]	; (2c8c <__aeabi_dadd+0x380>)
    2ab2:	4286      	cmp	r6, r0
    2ab4:	d0ae      	beq.n	2a14 <__aeabi_dadd+0x108>
    2ab6:	2080      	movs	r0, #128	; 0x80
    2ab8:	0400      	lsls	r0, r0, #16
    2aba:	4301      	orrs	r1, r0
    2abc:	4653      	mov	r3, sl
    2abe:	2b38      	cmp	r3, #56	; 0x38
    2ac0:	dc00      	bgt.n	2ac4 <__aeabi_dadd+0x1b8>
    2ac2:	e0e9      	b.n	2c98 <__aeabi_dadd+0x38c>
    2ac4:	430a      	orrs	r2, r1
    2ac6:	1e51      	subs	r1, r2, #1
    2ac8:	418a      	sbcs	r2, r1
    2aca:	2100      	movs	r1, #0
    2acc:	19d2      	adds	r2, r2, r7
    2ace:	42ba      	cmp	r2, r7
    2ad0:	41bf      	sbcs	r7, r7
    2ad2:	1909      	adds	r1, r1, r4
    2ad4:	427c      	negs	r4, r7
    2ad6:	0017      	movs	r7, r2
    2ad8:	190c      	adds	r4, r1, r4
    2ada:	0223      	lsls	r3, r4, #8
    2adc:	d5d3      	bpl.n	2a86 <__aeabi_dadd+0x17a>
    2ade:	4b6b      	ldr	r3, [pc, #428]	; (2c8c <__aeabi_dadd+0x380>)
    2ae0:	3601      	adds	r6, #1
    2ae2:	429e      	cmp	r6, r3
    2ae4:	d100      	bne.n	2ae8 <__aeabi_dadd+0x1dc>
    2ae6:	e13a      	b.n	2d5e <__aeabi_dadd+0x452>
    2ae8:	2001      	movs	r0, #1
    2aea:	4b69      	ldr	r3, [pc, #420]	; (2c90 <__aeabi_dadd+0x384>)
    2aec:	401c      	ands	r4, r3
    2aee:	087b      	lsrs	r3, r7, #1
    2af0:	4007      	ands	r7, r0
    2af2:	431f      	orrs	r7, r3
    2af4:	07e0      	lsls	r0, r4, #31
    2af6:	4307      	orrs	r7, r0
    2af8:	0864      	lsrs	r4, r4, #1
    2afa:	e78b      	b.n	2a14 <__aeabi_dadd+0x108>
    2afc:	0023      	movs	r3, r4
    2afe:	433b      	orrs	r3, r7
    2b00:	d100      	bne.n	2b04 <__aeabi_dadd+0x1f8>
    2b02:	e1cb      	b.n	2e9c <__aeabi_dadd+0x590>
    2b04:	2280      	movs	r2, #128	; 0x80
    2b06:	0312      	lsls	r2, r2, #12
    2b08:	4314      	orrs	r4, r2
    2b0a:	0324      	lsls	r4, r4, #12
    2b0c:	0b24      	lsrs	r4, r4, #12
    2b0e:	e79e      	b.n	2a4e <__aeabi_dadd+0x142>
    2b10:	002e      	movs	r6, r5
    2b12:	e77f      	b.n	2a14 <__aeabi_dadd+0x108>
    2b14:	0008      	movs	r0, r1
    2b16:	4310      	orrs	r0, r2
    2b18:	d100      	bne.n	2b1c <__aeabi_dadd+0x210>
    2b1a:	e0b4      	b.n	2c86 <__aeabi_dadd+0x37a>
    2b1c:	1e58      	subs	r0, r3, #1
    2b1e:	2800      	cmp	r0, #0
    2b20:	d000      	beq.n	2b24 <__aeabi_dadd+0x218>
    2b22:	e0de      	b.n	2ce2 <__aeabi_dadd+0x3d6>
    2b24:	18ba      	adds	r2, r7, r2
    2b26:	42ba      	cmp	r2, r7
    2b28:	419b      	sbcs	r3, r3
    2b2a:	1864      	adds	r4, r4, r1
    2b2c:	425b      	negs	r3, r3
    2b2e:	18e4      	adds	r4, r4, r3
    2b30:	0017      	movs	r7, r2
    2b32:	2601      	movs	r6, #1
    2b34:	0223      	lsls	r3, r4, #8
    2b36:	d5a6      	bpl.n	2a86 <__aeabi_dadd+0x17a>
    2b38:	2602      	movs	r6, #2
    2b3a:	e7d5      	b.n	2ae8 <__aeabi_dadd+0x1dc>
    2b3c:	2d00      	cmp	r5, #0
    2b3e:	d16e      	bne.n	2c1e <__aeabi_dadd+0x312>
    2b40:	1c70      	adds	r0, r6, #1
    2b42:	0540      	lsls	r0, r0, #21
    2b44:	0d40      	lsrs	r0, r0, #21
    2b46:	2801      	cmp	r0, #1
    2b48:	dc00      	bgt.n	2b4c <__aeabi_dadd+0x240>
    2b4a:	e0f9      	b.n	2d40 <__aeabi_dadd+0x434>
    2b4c:	1ab8      	subs	r0, r7, r2
    2b4e:	4684      	mov	ip, r0
    2b50:	4287      	cmp	r7, r0
    2b52:	4180      	sbcs	r0, r0
    2b54:	1ae5      	subs	r5, r4, r3
    2b56:	4240      	negs	r0, r0
    2b58:	1a2d      	subs	r5, r5, r0
    2b5a:	0228      	lsls	r0, r5, #8
    2b5c:	d400      	bmi.n	2b60 <__aeabi_dadd+0x254>
    2b5e:	e089      	b.n	2c74 <__aeabi_dadd+0x368>
    2b60:	1bd7      	subs	r7, r2, r7
    2b62:	42ba      	cmp	r2, r7
    2b64:	4192      	sbcs	r2, r2
    2b66:	1b1c      	subs	r4, r3, r4
    2b68:	4252      	negs	r2, r2
    2b6a:	1aa5      	subs	r5, r4, r2
    2b6c:	46d8      	mov	r8, fp
    2b6e:	e729      	b.n	29c4 <__aeabi_dadd+0xb8>
    2b70:	4645      	mov	r5, r8
    2b72:	2400      	movs	r4, #0
    2b74:	2700      	movs	r7, #0
    2b76:	e76a      	b.n	2a4e <__aeabi_dadd+0x142>
    2b78:	4c45      	ldr	r4, [pc, #276]	; (2c90 <__aeabi_dadd+0x384>)
    2b7a:	1af6      	subs	r6, r6, r3
    2b7c:	402c      	ands	r4, r5
    2b7e:	e749      	b.n	2a14 <__aeabi_dadd+0x108>
    2b80:	003d      	movs	r5, r7
    2b82:	3828      	subs	r0, #40	; 0x28
    2b84:	4085      	lsls	r5, r0
    2b86:	2700      	movs	r7, #0
    2b88:	e72e      	b.n	29e8 <__aeabi_dadd+0xdc>
    2b8a:	0038      	movs	r0, r7
    2b8c:	f001 fc76 	bl	447c <__clzsi2>
    2b90:	3020      	adds	r0, #32
    2b92:	e71d      	b.n	29d0 <__aeabi_dadd+0xc4>
    2b94:	430a      	orrs	r2, r1
    2b96:	1e51      	subs	r1, r2, #1
    2b98:	418a      	sbcs	r2, r1
    2b9a:	2100      	movs	r1, #0
    2b9c:	e707      	b.n	29ae <__aeabi_dadd+0xa2>
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d000      	beq.n	2ba4 <__aeabi_dadd+0x298>
    2ba2:	e0f3      	b.n	2d8c <__aeabi_dadd+0x480>
    2ba4:	1c70      	adds	r0, r6, #1
    2ba6:	0543      	lsls	r3, r0, #21
    2ba8:	0d5b      	lsrs	r3, r3, #21
    2baa:	2b01      	cmp	r3, #1
    2bac:	dc00      	bgt.n	2bb0 <__aeabi_dadd+0x2a4>
    2bae:	e0ad      	b.n	2d0c <__aeabi_dadd+0x400>
    2bb0:	4b36      	ldr	r3, [pc, #216]	; (2c8c <__aeabi_dadd+0x380>)
    2bb2:	4298      	cmp	r0, r3
    2bb4:	d100      	bne.n	2bb8 <__aeabi_dadd+0x2ac>
    2bb6:	e0d1      	b.n	2d5c <__aeabi_dadd+0x450>
    2bb8:	18ba      	adds	r2, r7, r2
    2bba:	42ba      	cmp	r2, r7
    2bbc:	41bf      	sbcs	r7, r7
    2bbe:	1864      	adds	r4, r4, r1
    2bc0:	427f      	negs	r7, r7
    2bc2:	19e4      	adds	r4, r4, r7
    2bc4:	07e7      	lsls	r7, r4, #31
    2bc6:	0852      	lsrs	r2, r2, #1
    2bc8:	4317      	orrs	r7, r2
    2bca:	0864      	lsrs	r4, r4, #1
    2bcc:	0006      	movs	r6, r0
    2bce:	e721      	b.n	2a14 <__aeabi_dadd+0x108>
    2bd0:	482e      	ldr	r0, [pc, #184]	; (2c8c <__aeabi_dadd+0x380>)
    2bd2:	4285      	cmp	r5, r0
    2bd4:	d100      	bne.n	2bd8 <__aeabi_dadd+0x2cc>
    2bd6:	e093      	b.n	2d00 <__aeabi_dadd+0x3f4>
    2bd8:	001d      	movs	r5, r3
    2bda:	e6d0      	b.n	297e <__aeabi_dadd+0x72>
    2bdc:	0029      	movs	r1, r5
    2bde:	3e1f      	subs	r6, #31
    2be0:	40f1      	lsrs	r1, r6
    2be2:	2b20      	cmp	r3, #32
    2be4:	d100      	bne.n	2be8 <__aeabi_dadd+0x2dc>
    2be6:	e08d      	b.n	2d04 <__aeabi_dadd+0x3f8>
    2be8:	2240      	movs	r2, #64	; 0x40
    2bea:	1ad3      	subs	r3, r2, r3
    2bec:	409d      	lsls	r5, r3
    2bee:	432f      	orrs	r7, r5
    2bf0:	1e7d      	subs	r5, r7, #1
    2bf2:	41af      	sbcs	r7, r5
    2bf4:	2400      	movs	r4, #0
    2bf6:	430f      	orrs	r7, r1
    2bf8:	2600      	movs	r6, #0
    2bfa:	e744      	b.n	2a86 <__aeabi_dadd+0x17a>
    2bfc:	002b      	movs	r3, r5
    2bfe:	0008      	movs	r0, r1
    2c00:	3b20      	subs	r3, #32
    2c02:	40d8      	lsrs	r0, r3
    2c04:	0003      	movs	r3, r0
    2c06:	2d20      	cmp	r5, #32
    2c08:	d100      	bne.n	2c0c <__aeabi_dadd+0x300>
    2c0a:	e07d      	b.n	2d08 <__aeabi_dadd+0x3fc>
    2c0c:	2040      	movs	r0, #64	; 0x40
    2c0e:	1b45      	subs	r5, r0, r5
    2c10:	40a9      	lsls	r1, r5
    2c12:	430a      	orrs	r2, r1
    2c14:	1e51      	subs	r1, r2, #1
    2c16:	418a      	sbcs	r2, r1
    2c18:	2100      	movs	r1, #0
    2c1a:	431a      	orrs	r2, r3
    2c1c:	e6c7      	b.n	29ae <__aeabi_dadd+0xa2>
    2c1e:	2e00      	cmp	r6, #0
    2c20:	d050      	beq.n	2cc4 <__aeabi_dadd+0x3b8>
    2c22:	4e1a      	ldr	r6, [pc, #104]	; (2c8c <__aeabi_dadd+0x380>)
    2c24:	42b0      	cmp	r0, r6
    2c26:	d057      	beq.n	2cd8 <__aeabi_dadd+0x3cc>
    2c28:	2680      	movs	r6, #128	; 0x80
    2c2a:	426b      	negs	r3, r5
    2c2c:	4699      	mov	r9, r3
    2c2e:	0436      	lsls	r6, r6, #16
    2c30:	4334      	orrs	r4, r6
    2c32:	464b      	mov	r3, r9
    2c34:	2b38      	cmp	r3, #56	; 0x38
    2c36:	dd00      	ble.n	2c3a <__aeabi_dadd+0x32e>
    2c38:	e0d6      	b.n	2de8 <__aeabi_dadd+0x4dc>
    2c3a:	2b1f      	cmp	r3, #31
    2c3c:	dd00      	ble.n	2c40 <__aeabi_dadd+0x334>
    2c3e:	e135      	b.n	2eac <__aeabi_dadd+0x5a0>
    2c40:	2620      	movs	r6, #32
    2c42:	1af5      	subs	r5, r6, r3
    2c44:	0026      	movs	r6, r4
    2c46:	40ae      	lsls	r6, r5
    2c48:	46b2      	mov	sl, r6
    2c4a:	003e      	movs	r6, r7
    2c4c:	40de      	lsrs	r6, r3
    2c4e:	46ac      	mov	ip, r5
    2c50:	0035      	movs	r5, r6
    2c52:	4656      	mov	r6, sl
    2c54:	432e      	orrs	r6, r5
    2c56:	4665      	mov	r5, ip
    2c58:	40af      	lsls	r7, r5
    2c5a:	1e7d      	subs	r5, r7, #1
    2c5c:	41af      	sbcs	r7, r5
    2c5e:	40dc      	lsrs	r4, r3
    2c60:	4337      	orrs	r7, r6
    2c62:	1bd7      	subs	r7, r2, r7
    2c64:	42ba      	cmp	r2, r7
    2c66:	4192      	sbcs	r2, r2
    2c68:	1b0c      	subs	r4, r1, r4
    2c6a:	4252      	negs	r2, r2
    2c6c:	1aa4      	subs	r4, r4, r2
    2c6e:	0006      	movs	r6, r0
    2c70:	46d8      	mov	r8, fp
    2c72:	e6a3      	b.n	29bc <__aeabi_dadd+0xb0>
    2c74:	4664      	mov	r4, ip
    2c76:	4667      	mov	r7, ip
    2c78:	432c      	orrs	r4, r5
    2c7a:	d000      	beq.n	2c7e <__aeabi_dadd+0x372>
    2c7c:	e6a2      	b.n	29c4 <__aeabi_dadd+0xb8>
    2c7e:	2500      	movs	r5, #0
    2c80:	2600      	movs	r6, #0
    2c82:	2700      	movs	r7, #0
    2c84:	e706      	b.n	2a94 <__aeabi_dadd+0x188>
    2c86:	001e      	movs	r6, r3
    2c88:	e6c4      	b.n	2a14 <__aeabi_dadd+0x108>
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	000007ff 	.word	0x000007ff
    2c90:	ff7fffff 	.word	0xff7fffff
    2c94:	800fffff 	.word	0x800fffff
    2c98:	2b1f      	cmp	r3, #31
    2c9a:	dc63      	bgt.n	2d64 <__aeabi_dadd+0x458>
    2c9c:	2020      	movs	r0, #32
    2c9e:	1ac3      	subs	r3, r0, r3
    2ca0:	0008      	movs	r0, r1
    2ca2:	4098      	lsls	r0, r3
    2ca4:	469c      	mov	ip, r3
    2ca6:	4683      	mov	fp, r0
    2ca8:	4653      	mov	r3, sl
    2caa:	0010      	movs	r0, r2
    2cac:	40d8      	lsrs	r0, r3
    2cae:	0003      	movs	r3, r0
    2cb0:	4658      	mov	r0, fp
    2cb2:	4318      	orrs	r0, r3
    2cb4:	4663      	mov	r3, ip
    2cb6:	409a      	lsls	r2, r3
    2cb8:	1e53      	subs	r3, r2, #1
    2cba:	419a      	sbcs	r2, r3
    2cbc:	4653      	mov	r3, sl
    2cbe:	4302      	orrs	r2, r0
    2cc0:	40d9      	lsrs	r1, r3
    2cc2:	e703      	b.n	2acc <__aeabi_dadd+0x1c0>
    2cc4:	0026      	movs	r6, r4
    2cc6:	433e      	orrs	r6, r7
    2cc8:	d006      	beq.n	2cd8 <__aeabi_dadd+0x3cc>
    2cca:	43eb      	mvns	r3, r5
    2ccc:	4699      	mov	r9, r3
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d0c7      	beq.n	2c62 <__aeabi_dadd+0x356>
    2cd2:	4e94      	ldr	r6, [pc, #592]	; (2f24 <__aeabi_dadd+0x618>)
    2cd4:	42b0      	cmp	r0, r6
    2cd6:	d1ac      	bne.n	2c32 <__aeabi_dadd+0x326>
    2cd8:	000c      	movs	r4, r1
    2cda:	0017      	movs	r7, r2
    2cdc:	0006      	movs	r6, r0
    2cde:	46d8      	mov	r8, fp
    2ce0:	e698      	b.n	2a14 <__aeabi_dadd+0x108>
    2ce2:	4b90      	ldr	r3, [pc, #576]	; (2f24 <__aeabi_dadd+0x618>)
    2ce4:	459a      	cmp	sl, r3
    2ce6:	d00b      	beq.n	2d00 <__aeabi_dadd+0x3f4>
    2ce8:	4682      	mov	sl, r0
    2cea:	e6e7      	b.n	2abc <__aeabi_dadd+0x1b0>
    2cec:	2800      	cmp	r0, #0
    2cee:	d000      	beq.n	2cf2 <__aeabi_dadd+0x3e6>
    2cf0:	e09e      	b.n	2e30 <__aeabi_dadd+0x524>
    2cf2:	0018      	movs	r0, r3
    2cf4:	4310      	orrs	r0, r2
    2cf6:	d100      	bne.n	2cfa <__aeabi_dadd+0x3ee>
    2cf8:	e0e9      	b.n	2ece <__aeabi_dadd+0x5c2>
    2cfa:	001c      	movs	r4, r3
    2cfc:	0017      	movs	r7, r2
    2cfe:	46d8      	mov	r8, fp
    2d00:	4e88      	ldr	r6, [pc, #544]	; (2f24 <__aeabi_dadd+0x618>)
    2d02:	e687      	b.n	2a14 <__aeabi_dadd+0x108>
    2d04:	2500      	movs	r5, #0
    2d06:	e772      	b.n	2bee <__aeabi_dadd+0x2e2>
    2d08:	2100      	movs	r1, #0
    2d0a:	e782      	b.n	2c12 <__aeabi_dadd+0x306>
    2d0c:	0023      	movs	r3, r4
    2d0e:	433b      	orrs	r3, r7
    2d10:	2e00      	cmp	r6, #0
    2d12:	d000      	beq.n	2d16 <__aeabi_dadd+0x40a>
    2d14:	e0ab      	b.n	2e6e <__aeabi_dadd+0x562>
    2d16:	2b00      	cmp	r3, #0
    2d18:	d100      	bne.n	2d1c <__aeabi_dadd+0x410>
    2d1a:	e0e7      	b.n	2eec <__aeabi_dadd+0x5e0>
    2d1c:	000b      	movs	r3, r1
    2d1e:	4313      	orrs	r3, r2
    2d20:	d100      	bne.n	2d24 <__aeabi_dadd+0x418>
    2d22:	e677      	b.n	2a14 <__aeabi_dadd+0x108>
    2d24:	18ba      	adds	r2, r7, r2
    2d26:	42ba      	cmp	r2, r7
    2d28:	41bf      	sbcs	r7, r7
    2d2a:	1864      	adds	r4, r4, r1
    2d2c:	427f      	negs	r7, r7
    2d2e:	19e4      	adds	r4, r4, r7
    2d30:	0223      	lsls	r3, r4, #8
    2d32:	d400      	bmi.n	2d36 <__aeabi_dadd+0x42a>
    2d34:	e0f2      	b.n	2f1c <__aeabi_dadd+0x610>
    2d36:	4b7c      	ldr	r3, [pc, #496]	; (2f28 <__aeabi_dadd+0x61c>)
    2d38:	0017      	movs	r7, r2
    2d3a:	401c      	ands	r4, r3
    2d3c:	0006      	movs	r6, r0
    2d3e:	e669      	b.n	2a14 <__aeabi_dadd+0x108>
    2d40:	0020      	movs	r0, r4
    2d42:	4338      	orrs	r0, r7
    2d44:	2e00      	cmp	r6, #0
    2d46:	d1d1      	bne.n	2cec <__aeabi_dadd+0x3e0>
    2d48:	2800      	cmp	r0, #0
    2d4a:	d15b      	bne.n	2e04 <__aeabi_dadd+0x4f8>
    2d4c:	001c      	movs	r4, r3
    2d4e:	4314      	orrs	r4, r2
    2d50:	d100      	bne.n	2d54 <__aeabi_dadd+0x448>
    2d52:	e0a8      	b.n	2ea6 <__aeabi_dadd+0x59a>
    2d54:	001c      	movs	r4, r3
    2d56:	0017      	movs	r7, r2
    2d58:	46d8      	mov	r8, fp
    2d5a:	e65b      	b.n	2a14 <__aeabi_dadd+0x108>
    2d5c:	0006      	movs	r6, r0
    2d5e:	2400      	movs	r4, #0
    2d60:	2700      	movs	r7, #0
    2d62:	e697      	b.n	2a94 <__aeabi_dadd+0x188>
    2d64:	4650      	mov	r0, sl
    2d66:	000b      	movs	r3, r1
    2d68:	3820      	subs	r0, #32
    2d6a:	40c3      	lsrs	r3, r0
    2d6c:	4699      	mov	r9, r3
    2d6e:	4653      	mov	r3, sl
    2d70:	2b20      	cmp	r3, #32
    2d72:	d100      	bne.n	2d76 <__aeabi_dadd+0x46a>
    2d74:	e095      	b.n	2ea2 <__aeabi_dadd+0x596>
    2d76:	2340      	movs	r3, #64	; 0x40
    2d78:	4650      	mov	r0, sl
    2d7a:	1a1b      	subs	r3, r3, r0
    2d7c:	4099      	lsls	r1, r3
    2d7e:	430a      	orrs	r2, r1
    2d80:	1e51      	subs	r1, r2, #1
    2d82:	418a      	sbcs	r2, r1
    2d84:	464b      	mov	r3, r9
    2d86:	2100      	movs	r1, #0
    2d88:	431a      	orrs	r2, r3
    2d8a:	e69f      	b.n	2acc <__aeabi_dadd+0x1c0>
    2d8c:	2e00      	cmp	r6, #0
    2d8e:	d130      	bne.n	2df2 <__aeabi_dadd+0x4e6>
    2d90:	0026      	movs	r6, r4
    2d92:	433e      	orrs	r6, r7
    2d94:	d067      	beq.n	2e66 <__aeabi_dadd+0x55a>
    2d96:	43db      	mvns	r3, r3
    2d98:	469a      	mov	sl, r3
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d01c      	beq.n	2dd8 <__aeabi_dadd+0x4cc>
    2d9e:	4e61      	ldr	r6, [pc, #388]	; (2f24 <__aeabi_dadd+0x618>)
    2da0:	42b0      	cmp	r0, r6
    2da2:	d060      	beq.n	2e66 <__aeabi_dadd+0x55a>
    2da4:	4653      	mov	r3, sl
    2da6:	2b38      	cmp	r3, #56	; 0x38
    2da8:	dd00      	ble.n	2dac <__aeabi_dadd+0x4a0>
    2daa:	e096      	b.n	2eda <__aeabi_dadd+0x5ce>
    2dac:	2b1f      	cmp	r3, #31
    2dae:	dd00      	ble.n	2db2 <__aeabi_dadd+0x4a6>
    2db0:	e09f      	b.n	2ef2 <__aeabi_dadd+0x5e6>
    2db2:	2620      	movs	r6, #32
    2db4:	1af3      	subs	r3, r6, r3
    2db6:	0026      	movs	r6, r4
    2db8:	409e      	lsls	r6, r3
    2dba:	469c      	mov	ip, r3
    2dbc:	46b3      	mov	fp, r6
    2dbe:	4653      	mov	r3, sl
    2dc0:	003e      	movs	r6, r7
    2dc2:	40de      	lsrs	r6, r3
    2dc4:	0033      	movs	r3, r6
    2dc6:	465e      	mov	r6, fp
    2dc8:	431e      	orrs	r6, r3
    2dca:	4663      	mov	r3, ip
    2dcc:	409f      	lsls	r7, r3
    2dce:	1e7b      	subs	r3, r7, #1
    2dd0:	419f      	sbcs	r7, r3
    2dd2:	4653      	mov	r3, sl
    2dd4:	40dc      	lsrs	r4, r3
    2dd6:	4337      	orrs	r7, r6
    2dd8:	18bf      	adds	r7, r7, r2
    2dda:	4297      	cmp	r7, r2
    2ddc:	4192      	sbcs	r2, r2
    2dde:	1864      	adds	r4, r4, r1
    2de0:	4252      	negs	r2, r2
    2de2:	18a4      	adds	r4, r4, r2
    2de4:	0006      	movs	r6, r0
    2de6:	e678      	b.n	2ada <__aeabi_dadd+0x1ce>
    2de8:	4327      	orrs	r7, r4
    2dea:	1e7c      	subs	r4, r7, #1
    2dec:	41a7      	sbcs	r7, r4
    2dee:	2400      	movs	r4, #0
    2df0:	e737      	b.n	2c62 <__aeabi_dadd+0x356>
    2df2:	4e4c      	ldr	r6, [pc, #304]	; (2f24 <__aeabi_dadd+0x618>)
    2df4:	42b0      	cmp	r0, r6
    2df6:	d036      	beq.n	2e66 <__aeabi_dadd+0x55a>
    2df8:	2680      	movs	r6, #128	; 0x80
    2dfa:	425b      	negs	r3, r3
    2dfc:	0436      	lsls	r6, r6, #16
    2dfe:	469a      	mov	sl, r3
    2e00:	4334      	orrs	r4, r6
    2e02:	e7cf      	b.n	2da4 <__aeabi_dadd+0x498>
    2e04:	0018      	movs	r0, r3
    2e06:	4310      	orrs	r0, r2
    2e08:	d100      	bne.n	2e0c <__aeabi_dadd+0x500>
    2e0a:	e603      	b.n	2a14 <__aeabi_dadd+0x108>
    2e0c:	1ab8      	subs	r0, r7, r2
    2e0e:	4684      	mov	ip, r0
    2e10:	4567      	cmp	r7, ip
    2e12:	41ad      	sbcs	r5, r5
    2e14:	1ae0      	subs	r0, r4, r3
    2e16:	426d      	negs	r5, r5
    2e18:	1b40      	subs	r0, r0, r5
    2e1a:	0205      	lsls	r5, r0, #8
    2e1c:	d400      	bmi.n	2e20 <__aeabi_dadd+0x514>
    2e1e:	e62c      	b.n	2a7a <__aeabi_dadd+0x16e>
    2e20:	1bd7      	subs	r7, r2, r7
    2e22:	42ba      	cmp	r2, r7
    2e24:	4192      	sbcs	r2, r2
    2e26:	1b1c      	subs	r4, r3, r4
    2e28:	4252      	negs	r2, r2
    2e2a:	1aa4      	subs	r4, r4, r2
    2e2c:	46d8      	mov	r8, fp
    2e2e:	e5f1      	b.n	2a14 <__aeabi_dadd+0x108>
    2e30:	0018      	movs	r0, r3
    2e32:	4310      	orrs	r0, r2
    2e34:	d100      	bne.n	2e38 <__aeabi_dadd+0x52c>
    2e36:	e763      	b.n	2d00 <__aeabi_dadd+0x3f4>
    2e38:	08f8      	lsrs	r0, r7, #3
    2e3a:	0767      	lsls	r7, r4, #29
    2e3c:	4307      	orrs	r7, r0
    2e3e:	2080      	movs	r0, #128	; 0x80
    2e40:	08e4      	lsrs	r4, r4, #3
    2e42:	0300      	lsls	r0, r0, #12
    2e44:	4204      	tst	r4, r0
    2e46:	d008      	beq.n	2e5a <__aeabi_dadd+0x54e>
    2e48:	08dd      	lsrs	r5, r3, #3
    2e4a:	4205      	tst	r5, r0
    2e4c:	d105      	bne.n	2e5a <__aeabi_dadd+0x54e>
    2e4e:	08d2      	lsrs	r2, r2, #3
    2e50:	0759      	lsls	r1, r3, #29
    2e52:	4311      	orrs	r1, r2
    2e54:	000f      	movs	r7, r1
    2e56:	002c      	movs	r4, r5
    2e58:	46d8      	mov	r8, fp
    2e5a:	0f7b      	lsrs	r3, r7, #29
    2e5c:	00e4      	lsls	r4, r4, #3
    2e5e:	431c      	orrs	r4, r3
    2e60:	00ff      	lsls	r7, r7, #3
    2e62:	4e30      	ldr	r6, [pc, #192]	; (2f24 <__aeabi_dadd+0x618>)
    2e64:	e5d6      	b.n	2a14 <__aeabi_dadd+0x108>
    2e66:	000c      	movs	r4, r1
    2e68:	0017      	movs	r7, r2
    2e6a:	0006      	movs	r6, r0
    2e6c:	e5d2      	b.n	2a14 <__aeabi_dadd+0x108>
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d038      	beq.n	2ee4 <__aeabi_dadd+0x5d8>
    2e72:	000b      	movs	r3, r1
    2e74:	4313      	orrs	r3, r2
    2e76:	d100      	bne.n	2e7a <__aeabi_dadd+0x56e>
    2e78:	e742      	b.n	2d00 <__aeabi_dadd+0x3f4>
    2e7a:	08f8      	lsrs	r0, r7, #3
    2e7c:	0767      	lsls	r7, r4, #29
    2e7e:	4307      	orrs	r7, r0
    2e80:	2080      	movs	r0, #128	; 0x80
    2e82:	08e4      	lsrs	r4, r4, #3
    2e84:	0300      	lsls	r0, r0, #12
    2e86:	4204      	tst	r4, r0
    2e88:	d0e7      	beq.n	2e5a <__aeabi_dadd+0x54e>
    2e8a:	08cb      	lsrs	r3, r1, #3
    2e8c:	4203      	tst	r3, r0
    2e8e:	d1e4      	bne.n	2e5a <__aeabi_dadd+0x54e>
    2e90:	08d2      	lsrs	r2, r2, #3
    2e92:	0749      	lsls	r1, r1, #29
    2e94:	4311      	orrs	r1, r2
    2e96:	000f      	movs	r7, r1
    2e98:	001c      	movs	r4, r3
    2e9a:	e7de      	b.n	2e5a <__aeabi_dadd+0x54e>
    2e9c:	2700      	movs	r7, #0
    2e9e:	2400      	movs	r4, #0
    2ea0:	e5d5      	b.n	2a4e <__aeabi_dadd+0x142>
    2ea2:	2100      	movs	r1, #0
    2ea4:	e76b      	b.n	2d7e <__aeabi_dadd+0x472>
    2ea6:	2500      	movs	r5, #0
    2ea8:	2700      	movs	r7, #0
    2eaa:	e5f3      	b.n	2a94 <__aeabi_dadd+0x188>
    2eac:	464e      	mov	r6, r9
    2eae:	0025      	movs	r5, r4
    2eb0:	3e20      	subs	r6, #32
    2eb2:	40f5      	lsrs	r5, r6
    2eb4:	464b      	mov	r3, r9
    2eb6:	002e      	movs	r6, r5
    2eb8:	2b20      	cmp	r3, #32
    2eba:	d02d      	beq.n	2f18 <__aeabi_dadd+0x60c>
    2ebc:	2540      	movs	r5, #64	; 0x40
    2ebe:	1aed      	subs	r5, r5, r3
    2ec0:	40ac      	lsls	r4, r5
    2ec2:	4327      	orrs	r7, r4
    2ec4:	1e7c      	subs	r4, r7, #1
    2ec6:	41a7      	sbcs	r7, r4
    2ec8:	2400      	movs	r4, #0
    2eca:	4337      	orrs	r7, r6
    2ecc:	e6c9      	b.n	2c62 <__aeabi_dadd+0x356>
    2ece:	2480      	movs	r4, #128	; 0x80
    2ed0:	2500      	movs	r5, #0
    2ed2:	0324      	lsls	r4, r4, #12
    2ed4:	4e13      	ldr	r6, [pc, #76]	; (2f24 <__aeabi_dadd+0x618>)
    2ed6:	2700      	movs	r7, #0
    2ed8:	e5dc      	b.n	2a94 <__aeabi_dadd+0x188>
    2eda:	4327      	orrs	r7, r4
    2edc:	1e7c      	subs	r4, r7, #1
    2ede:	41a7      	sbcs	r7, r4
    2ee0:	2400      	movs	r4, #0
    2ee2:	e779      	b.n	2dd8 <__aeabi_dadd+0x4cc>
    2ee4:	000c      	movs	r4, r1
    2ee6:	0017      	movs	r7, r2
    2ee8:	4e0e      	ldr	r6, [pc, #56]	; (2f24 <__aeabi_dadd+0x618>)
    2eea:	e593      	b.n	2a14 <__aeabi_dadd+0x108>
    2eec:	000c      	movs	r4, r1
    2eee:	0017      	movs	r7, r2
    2ef0:	e590      	b.n	2a14 <__aeabi_dadd+0x108>
    2ef2:	4656      	mov	r6, sl
    2ef4:	0023      	movs	r3, r4
    2ef6:	3e20      	subs	r6, #32
    2ef8:	40f3      	lsrs	r3, r6
    2efa:	4699      	mov	r9, r3
    2efc:	4653      	mov	r3, sl
    2efe:	2b20      	cmp	r3, #32
    2f00:	d00e      	beq.n	2f20 <__aeabi_dadd+0x614>
    2f02:	2340      	movs	r3, #64	; 0x40
    2f04:	4656      	mov	r6, sl
    2f06:	1b9b      	subs	r3, r3, r6
    2f08:	409c      	lsls	r4, r3
    2f0a:	4327      	orrs	r7, r4
    2f0c:	1e7c      	subs	r4, r7, #1
    2f0e:	41a7      	sbcs	r7, r4
    2f10:	464b      	mov	r3, r9
    2f12:	2400      	movs	r4, #0
    2f14:	431f      	orrs	r7, r3
    2f16:	e75f      	b.n	2dd8 <__aeabi_dadd+0x4cc>
    2f18:	2400      	movs	r4, #0
    2f1a:	e7d2      	b.n	2ec2 <__aeabi_dadd+0x5b6>
    2f1c:	0017      	movs	r7, r2
    2f1e:	e5b2      	b.n	2a86 <__aeabi_dadd+0x17a>
    2f20:	2400      	movs	r4, #0
    2f22:	e7f2      	b.n	2f0a <__aeabi_dadd+0x5fe>
    2f24:	000007ff 	.word	0x000007ff
    2f28:	ff7fffff 	.word	0xff7fffff

00002f2c <__aeabi_ddiv>:
    2f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f2e:	4657      	mov	r7, sl
    2f30:	4645      	mov	r5, r8
    2f32:	46de      	mov	lr, fp
    2f34:	464e      	mov	r6, r9
    2f36:	b5e0      	push	{r5, r6, r7, lr}
    2f38:	004c      	lsls	r4, r1, #1
    2f3a:	030e      	lsls	r6, r1, #12
    2f3c:	b087      	sub	sp, #28
    2f3e:	4683      	mov	fp, r0
    2f40:	4692      	mov	sl, r2
    2f42:	001d      	movs	r5, r3
    2f44:	4680      	mov	r8, r0
    2f46:	0b36      	lsrs	r6, r6, #12
    2f48:	0d64      	lsrs	r4, r4, #21
    2f4a:	0fcf      	lsrs	r7, r1, #31
    2f4c:	2c00      	cmp	r4, #0
    2f4e:	d04f      	beq.n	2ff0 <__aeabi_ddiv+0xc4>
    2f50:	4b6f      	ldr	r3, [pc, #444]	; (3110 <__aeabi_ddiv+0x1e4>)
    2f52:	429c      	cmp	r4, r3
    2f54:	d035      	beq.n	2fc2 <__aeabi_ddiv+0x96>
    2f56:	2380      	movs	r3, #128	; 0x80
    2f58:	0f42      	lsrs	r2, r0, #29
    2f5a:	041b      	lsls	r3, r3, #16
    2f5c:	00f6      	lsls	r6, r6, #3
    2f5e:	4313      	orrs	r3, r2
    2f60:	4333      	orrs	r3, r6
    2f62:	4699      	mov	r9, r3
    2f64:	00c3      	lsls	r3, r0, #3
    2f66:	4698      	mov	r8, r3
    2f68:	4b6a      	ldr	r3, [pc, #424]	; (3114 <__aeabi_ddiv+0x1e8>)
    2f6a:	2600      	movs	r6, #0
    2f6c:	469c      	mov	ip, r3
    2f6e:	2300      	movs	r3, #0
    2f70:	4464      	add	r4, ip
    2f72:	9303      	str	r3, [sp, #12]
    2f74:	032b      	lsls	r3, r5, #12
    2f76:	0b1b      	lsrs	r3, r3, #12
    2f78:	469b      	mov	fp, r3
    2f7a:	006b      	lsls	r3, r5, #1
    2f7c:	0fed      	lsrs	r5, r5, #31
    2f7e:	4650      	mov	r0, sl
    2f80:	0d5b      	lsrs	r3, r3, #21
    2f82:	9501      	str	r5, [sp, #4]
    2f84:	d05e      	beq.n	3044 <__aeabi_ddiv+0x118>
    2f86:	4a62      	ldr	r2, [pc, #392]	; (3110 <__aeabi_ddiv+0x1e4>)
    2f88:	4293      	cmp	r3, r2
    2f8a:	d053      	beq.n	3034 <__aeabi_ddiv+0x108>
    2f8c:	465a      	mov	r2, fp
    2f8e:	00d1      	lsls	r1, r2, #3
    2f90:	2280      	movs	r2, #128	; 0x80
    2f92:	0f40      	lsrs	r0, r0, #29
    2f94:	0412      	lsls	r2, r2, #16
    2f96:	4302      	orrs	r2, r0
    2f98:	430a      	orrs	r2, r1
    2f9a:	4693      	mov	fp, r2
    2f9c:	4652      	mov	r2, sl
    2f9e:	00d1      	lsls	r1, r2, #3
    2fa0:	4a5c      	ldr	r2, [pc, #368]	; (3114 <__aeabi_ddiv+0x1e8>)
    2fa2:	4694      	mov	ip, r2
    2fa4:	2200      	movs	r2, #0
    2fa6:	4463      	add	r3, ip
    2fa8:	0038      	movs	r0, r7
    2faa:	4068      	eors	r0, r5
    2fac:	4684      	mov	ip, r0
    2fae:	9002      	str	r0, [sp, #8]
    2fb0:	1ae4      	subs	r4, r4, r3
    2fb2:	4316      	orrs	r6, r2
    2fb4:	2e0f      	cmp	r6, #15
    2fb6:	d900      	bls.n	2fba <__aeabi_ddiv+0x8e>
    2fb8:	e0b4      	b.n	3124 <__aeabi_ddiv+0x1f8>
    2fba:	4b57      	ldr	r3, [pc, #348]	; (3118 <__aeabi_ddiv+0x1ec>)
    2fbc:	00b6      	lsls	r6, r6, #2
    2fbe:	599b      	ldr	r3, [r3, r6]
    2fc0:	469f      	mov	pc, r3
    2fc2:	0003      	movs	r3, r0
    2fc4:	4333      	orrs	r3, r6
    2fc6:	4699      	mov	r9, r3
    2fc8:	d16c      	bne.n	30a4 <__aeabi_ddiv+0x178>
    2fca:	2300      	movs	r3, #0
    2fcc:	4698      	mov	r8, r3
    2fce:	3302      	adds	r3, #2
    2fd0:	2608      	movs	r6, #8
    2fd2:	9303      	str	r3, [sp, #12]
    2fd4:	e7ce      	b.n	2f74 <__aeabi_ddiv+0x48>
    2fd6:	46cb      	mov	fp, r9
    2fd8:	4641      	mov	r1, r8
    2fda:	9a03      	ldr	r2, [sp, #12]
    2fdc:	9701      	str	r7, [sp, #4]
    2fde:	2a02      	cmp	r2, #2
    2fe0:	d165      	bne.n	30ae <__aeabi_ddiv+0x182>
    2fe2:	9b01      	ldr	r3, [sp, #4]
    2fe4:	4c4a      	ldr	r4, [pc, #296]	; (3110 <__aeabi_ddiv+0x1e4>)
    2fe6:	469c      	mov	ip, r3
    2fe8:	2300      	movs	r3, #0
    2fea:	2200      	movs	r2, #0
    2fec:	4698      	mov	r8, r3
    2fee:	e06b      	b.n	30c8 <__aeabi_ddiv+0x19c>
    2ff0:	0003      	movs	r3, r0
    2ff2:	4333      	orrs	r3, r6
    2ff4:	4699      	mov	r9, r3
    2ff6:	d04e      	beq.n	3096 <__aeabi_ddiv+0x16a>
    2ff8:	2e00      	cmp	r6, #0
    2ffa:	d100      	bne.n	2ffe <__aeabi_ddiv+0xd2>
    2ffc:	e1bc      	b.n	3378 <__aeabi_ddiv+0x44c>
    2ffe:	0030      	movs	r0, r6
    3000:	f001 fa3c 	bl	447c <__clzsi2>
    3004:	0003      	movs	r3, r0
    3006:	3b0b      	subs	r3, #11
    3008:	2b1c      	cmp	r3, #28
    300a:	dd00      	ble.n	300e <__aeabi_ddiv+0xe2>
    300c:	e1ac      	b.n	3368 <__aeabi_ddiv+0x43c>
    300e:	221d      	movs	r2, #29
    3010:	1ad3      	subs	r3, r2, r3
    3012:	465a      	mov	r2, fp
    3014:	0001      	movs	r1, r0
    3016:	40da      	lsrs	r2, r3
    3018:	3908      	subs	r1, #8
    301a:	408e      	lsls	r6, r1
    301c:	0013      	movs	r3, r2
    301e:	4333      	orrs	r3, r6
    3020:	4699      	mov	r9, r3
    3022:	465b      	mov	r3, fp
    3024:	408b      	lsls	r3, r1
    3026:	4698      	mov	r8, r3
    3028:	2300      	movs	r3, #0
    302a:	4c3c      	ldr	r4, [pc, #240]	; (311c <__aeabi_ddiv+0x1f0>)
    302c:	2600      	movs	r6, #0
    302e:	1a24      	subs	r4, r4, r0
    3030:	9303      	str	r3, [sp, #12]
    3032:	e79f      	b.n	2f74 <__aeabi_ddiv+0x48>
    3034:	4651      	mov	r1, sl
    3036:	465a      	mov	r2, fp
    3038:	4311      	orrs	r1, r2
    303a:	d129      	bne.n	3090 <__aeabi_ddiv+0x164>
    303c:	2200      	movs	r2, #0
    303e:	4693      	mov	fp, r2
    3040:	3202      	adds	r2, #2
    3042:	e7b1      	b.n	2fa8 <__aeabi_ddiv+0x7c>
    3044:	4659      	mov	r1, fp
    3046:	4301      	orrs	r1, r0
    3048:	d01e      	beq.n	3088 <__aeabi_ddiv+0x15c>
    304a:	465b      	mov	r3, fp
    304c:	2b00      	cmp	r3, #0
    304e:	d100      	bne.n	3052 <__aeabi_ddiv+0x126>
    3050:	e19e      	b.n	3390 <__aeabi_ddiv+0x464>
    3052:	4658      	mov	r0, fp
    3054:	f001 fa12 	bl	447c <__clzsi2>
    3058:	0003      	movs	r3, r0
    305a:	3b0b      	subs	r3, #11
    305c:	2b1c      	cmp	r3, #28
    305e:	dd00      	ble.n	3062 <__aeabi_ddiv+0x136>
    3060:	e18f      	b.n	3382 <__aeabi_ddiv+0x456>
    3062:	0002      	movs	r2, r0
    3064:	4659      	mov	r1, fp
    3066:	3a08      	subs	r2, #8
    3068:	4091      	lsls	r1, r2
    306a:	468b      	mov	fp, r1
    306c:	211d      	movs	r1, #29
    306e:	1acb      	subs	r3, r1, r3
    3070:	4651      	mov	r1, sl
    3072:	40d9      	lsrs	r1, r3
    3074:	000b      	movs	r3, r1
    3076:	4659      	mov	r1, fp
    3078:	430b      	orrs	r3, r1
    307a:	4651      	mov	r1, sl
    307c:	469b      	mov	fp, r3
    307e:	4091      	lsls	r1, r2
    3080:	4b26      	ldr	r3, [pc, #152]	; (311c <__aeabi_ddiv+0x1f0>)
    3082:	2200      	movs	r2, #0
    3084:	1a1b      	subs	r3, r3, r0
    3086:	e78f      	b.n	2fa8 <__aeabi_ddiv+0x7c>
    3088:	2300      	movs	r3, #0
    308a:	2201      	movs	r2, #1
    308c:	469b      	mov	fp, r3
    308e:	e78b      	b.n	2fa8 <__aeabi_ddiv+0x7c>
    3090:	4651      	mov	r1, sl
    3092:	2203      	movs	r2, #3
    3094:	e788      	b.n	2fa8 <__aeabi_ddiv+0x7c>
    3096:	2300      	movs	r3, #0
    3098:	4698      	mov	r8, r3
    309a:	3301      	adds	r3, #1
    309c:	2604      	movs	r6, #4
    309e:	2400      	movs	r4, #0
    30a0:	9303      	str	r3, [sp, #12]
    30a2:	e767      	b.n	2f74 <__aeabi_ddiv+0x48>
    30a4:	2303      	movs	r3, #3
    30a6:	46b1      	mov	r9, r6
    30a8:	9303      	str	r3, [sp, #12]
    30aa:	260c      	movs	r6, #12
    30ac:	e762      	b.n	2f74 <__aeabi_ddiv+0x48>
    30ae:	2a03      	cmp	r2, #3
    30b0:	d100      	bne.n	30b4 <__aeabi_ddiv+0x188>
    30b2:	e25c      	b.n	356e <__aeabi_ddiv+0x642>
    30b4:	9b01      	ldr	r3, [sp, #4]
    30b6:	2a01      	cmp	r2, #1
    30b8:	d000      	beq.n	30bc <__aeabi_ddiv+0x190>
    30ba:	e1e4      	b.n	3486 <__aeabi_ddiv+0x55a>
    30bc:	4013      	ands	r3, r2
    30be:	469c      	mov	ip, r3
    30c0:	2300      	movs	r3, #0
    30c2:	2400      	movs	r4, #0
    30c4:	2200      	movs	r2, #0
    30c6:	4698      	mov	r8, r3
    30c8:	2100      	movs	r1, #0
    30ca:	0312      	lsls	r2, r2, #12
    30cc:	0b13      	lsrs	r3, r2, #12
    30ce:	0d0a      	lsrs	r2, r1, #20
    30d0:	0512      	lsls	r2, r2, #20
    30d2:	431a      	orrs	r2, r3
    30d4:	0523      	lsls	r3, r4, #20
    30d6:	4c12      	ldr	r4, [pc, #72]	; (3120 <__aeabi_ddiv+0x1f4>)
    30d8:	4640      	mov	r0, r8
    30da:	4022      	ands	r2, r4
    30dc:	4313      	orrs	r3, r2
    30de:	4662      	mov	r2, ip
    30e0:	005b      	lsls	r3, r3, #1
    30e2:	07d2      	lsls	r2, r2, #31
    30e4:	085b      	lsrs	r3, r3, #1
    30e6:	4313      	orrs	r3, r2
    30e8:	0019      	movs	r1, r3
    30ea:	b007      	add	sp, #28
    30ec:	bc3c      	pop	{r2, r3, r4, r5}
    30ee:	4690      	mov	r8, r2
    30f0:	4699      	mov	r9, r3
    30f2:	46a2      	mov	sl, r4
    30f4:	46ab      	mov	fp, r5
    30f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f8:	2300      	movs	r3, #0
    30fa:	2280      	movs	r2, #128	; 0x80
    30fc:	469c      	mov	ip, r3
    30fe:	0312      	lsls	r2, r2, #12
    3100:	4698      	mov	r8, r3
    3102:	4c03      	ldr	r4, [pc, #12]	; (3110 <__aeabi_ddiv+0x1e4>)
    3104:	e7e0      	b.n	30c8 <__aeabi_ddiv+0x19c>
    3106:	2300      	movs	r3, #0
    3108:	4c01      	ldr	r4, [pc, #4]	; (3110 <__aeabi_ddiv+0x1e4>)
    310a:	2200      	movs	r2, #0
    310c:	4698      	mov	r8, r3
    310e:	e7db      	b.n	30c8 <__aeabi_ddiv+0x19c>
    3110:	000007ff 	.word	0x000007ff
    3114:	fffffc01 	.word	0xfffffc01
    3118:	00004c50 	.word	0x00004c50
    311c:	fffffc0d 	.word	0xfffffc0d
    3120:	800fffff 	.word	0x800fffff
    3124:	45d9      	cmp	r9, fp
    3126:	d900      	bls.n	312a <__aeabi_ddiv+0x1fe>
    3128:	e139      	b.n	339e <__aeabi_ddiv+0x472>
    312a:	d100      	bne.n	312e <__aeabi_ddiv+0x202>
    312c:	e134      	b.n	3398 <__aeabi_ddiv+0x46c>
    312e:	2300      	movs	r3, #0
    3130:	4646      	mov	r6, r8
    3132:	464d      	mov	r5, r9
    3134:	469a      	mov	sl, r3
    3136:	3c01      	subs	r4, #1
    3138:	465b      	mov	r3, fp
    313a:	0e0a      	lsrs	r2, r1, #24
    313c:	021b      	lsls	r3, r3, #8
    313e:	431a      	orrs	r2, r3
    3140:	020b      	lsls	r3, r1, #8
    3142:	0c17      	lsrs	r7, r2, #16
    3144:	9303      	str	r3, [sp, #12]
    3146:	0413      	lsls	r3, r2, #16
    3148:	0c1b      	lsrs	r3, r3, #16
    314a:	0039      	movs	r1, r7
    314c:	0028      	movs	r0, r5
    314e:	4690      	mov	r8, r2
    3150:	9301      	str	r3, [sp, #4]
    3152:	f7ff faf3 	bl	273c <__udivsi3>
    3156:	0002      	movs	r2, r0
    3158:	9b01      	ldr	r3, [sp, #4]
    315a:	4683      	mov	fp, r0
    315c:	435a      	muls	r2, r3
    315e:	0028      	movs	r0, r5
    3160:	0039      	movs	r1, r7
    3162:	4691      	mov	r9, r2
    3164:	f7ff fb70 	bl	2848 <__aeabi_uidivmod>
    3168:	0c35      	lsrs	r5, r6, #16
    316a:	0409      	lsls	r1, r1, #16
    316c:	430d      	orrs	r5, r1
    316e:	45a9      	cmp	r9, r5
    3170:	d90d      	bls.n	318e <__aeabi_ddiv+0x262>
    3172:	465b      	mov	r3, fp
    3174:	4445      	add	r5, r8
    3176:	3b01      	subs	r3, #1
    3178:	45a8      	cmp	r8, r5
    317a:	d900      	bls.n	317e <__aeabi_ddiv+0x252>
    317c:	e13a      	b.n	33f4 <__aeabi_ddiv+0x4c8>
    317e:	45a9      	cmp	r9, r5
    3180:	d800      	bhi.n	3184 <__aeabi_ddiv+0x258>
    3182:	e137      	b.n	33f4 <__aeabi_ddiv+0x4c8>
    3184:	2302      	movs	r3, #2
    3186:	425b      	negs	r3, r3
    3188:	469c      	mov	ip, r3
    318a:	4445      	add	r5, r8
    318c:	44e3      	add	fp, ip
    318e:	464b      	mov	r3, r9
    3190:	1aeb      	subs	r3, r5, r3
    3192:	0039      	movs	r1, r7
    3194:	0018      	movs	r0, r3
    3196:	9304      	str	r3, [sp, #16]
    3198:	f7ff fad0 	bl	273c <__udivsi3>
    319c:	9b01      	ldr	r3, [sp, #4]
    319e:	0005      	movs	r5, r0
    31a0:	4343      	muls	r3, r0
    31a2:	0039      	movs	r1, r7
    31a4:	9804      	ldr	r0, [sp, #16]
    31a6:	4699      	mov	r9, r3
    31a8:	f7ff fb4e 	bl	2848 <__aeabi_uidivmod>
    31ac:	0433      	lsls	r3, r6, #16
    31ae:	0409      	lsls	r1, r1, #16
    31b0:	0c1b      	lsrs	r3, r3, #16
    31b2:	430b      	orrs	r3, r1
    31b4:	4599      	cmp	r9, r3
    31b6:	d909      	bls.n	31cc <__aeabi_ddiv+0x2a0>
    31b8:	4443      	add	r3, r8
    31ba:	1e6a      	subs	r2, r5, #1
    31bc:	4598      	cmp	r8, r3
    31be:	d900      	bls.n	31c2 <__aeabi_ddiv+0x296>
    31c0:	e11a      	b.n	33f8 <__aeabi_ddiv+0x4cc>
    31c2:	4599      	cmp	r9, r3
    31c4:	d800      	bhi.n	31c8 <__aeabi_ddiv+0x29c>
    31c6:	e117      	b.n	33f8 <__aeabi_ddiv+0x4cc>
    31c8:	3d02      	subs	r5, #2
    31ca:	4443      	add	r3, r8
    31cc:	464a      	mov	r2, r9
    31ce:	1a9b      	subs	r3, r3, r2
    31d0:	465a      	mov	r2, fp
    31d2:	0412      	lsls	r2, r2, #16
    31d4:	432a      	orrs	r2, r5
    31d6:	9903      	ldr	r1, [sp, #12]
    31d8:	4693      	mov	fp, r2
    31da:	0c10      	lsrs	r0, r2, #16
    31dc:	0c0a      	lsrs	r2, r1, #16
    31de:	4691      	mov	r9, r2
    31e0:	0409      	lsls	r1, r1, #16
    31e2:	465a      	mov	r2, fp
    31e4:	0c09      	lsrs	r1, r1, #16
    31e6:	464e      	mov	r6, r9
    31e8:	000d      	movs	r5, r1
    31ea:	0412      	lsls	r2, r2, #16
    31ec:	0c12      	lsrs	r2, r2, #16
    31ee:	4345      	muls	r5, r0
    31f0:	9105      	str	r1, [sp, #20]
    31f2:	4351      	muls	r1, r2
    31f4:	4372      	muls	r2, r6
    31f6:	4370      	muls	r0, r6
    31f8:	1952      	adds	r2, r2, r5
    31fa:	0c0e      	lsrs	r6, r1, #16
    31fc:	18b2      	adds	r2, r6, r2
    31fe:	4295      	cmp	r5, r2
    3200:	d903      	bls.n	320a <__aeabi_ddiv+0x2de>
    3202:	2580      	movs	r5, #128	; 0x80
    3204:	026d      	lsls	r5, r5, #9
    3206:	46ac      	mov	ip, r5
    3208:	4460      	add	r0, ip
    320a:	0c15      	lsrs	r5, r2, #16
    320c:	0409      	lsls	r1, r1, #16
    320e:	0412      	lsls	r2, r2, #16
    3210:	0c09      	lsrs	r1, r1, #16
    3212:	1828      	adds	r0, r5, r0
    3214:	1852      	adds	r2, r2, r1
    3216:	4283      	cmp	r3, r0
    3218:	d200      	bcs.n	321c <__aeabi_ddiv+0x2f0>
    321a:	e0ce      	b.n	33ba <__aeabi_ddiv+0x48e>
    321c:	d100      	bne.n	3220 <__aeabi_ddiv+0x2f4>
    321e:	e0c8      	b.n	33b2 <__aeabi_ddiv+0x486>
    3220:	1a1d      	subs	r5, r3, r0
    3222:	4653      	mov	r3, sl
    3224:	1a9e      	subs	r6, r3, r2
    3226:	45b2      	cmp	sl, r6
    3228:	4192      	sbcs	r2, r2
    322a:	4252      	negs	r2, r2
    322c:	1aab      	subs	r3, r5, r2
    322e:	469a      	mov	sl, r3
    3230:	4598      	cmp	r8, r3
    3232:	d100      	bne.n	3236 <__aeabi_ddiv+0x30a>
    3234:	e117      	b.n	3466 <__aeabi_ddiv+0x53a>
    3236:	0039      	movs	r1, r7
    3238:	0018      	movs	r0, r3
    323a:	f7ff fa7f 	bl	273c <__udivsi3>
    323e:	9b01      	ldr	r3, [sp, #4]
    3240:	0005      	movs	r5, r0
    3242:	4343      	muls	r3, r0
    3244:	0039      	movs	r1, r7
    3246:	4650      	mov	r0, sl
    3248:	9304      	str	r3, [sp, #16]
    324a:	f7ff fafd 	bl	2848 <__aeabi_uidivmod>
    324e:	9804      	ldr	r0, [sp, #16]
    3250:	040b      	lsls	r3, r1, #16
    3252:	0c31      	lsrs	r1, r6, #16
    3254:	4319      	orrs	r1, r3
    3256:	4288      	cmp	r0, r1
    3258:	d909      	bls.n	326e <__aeabi_ddiv+0x342>
    325a:	4441      	add	r1, r8
    325c:	1e6b      	subs	r3, r5, #1
    325e:	4588      	cmp	r8, r1
    3260:	d900      	bls.n	3264 <__aeabi_ddiv+0x338>
    3262:	e107      	b.n	3474 <__aeabi_ddiv+0x548>
    3264:	4288      	cmp	r0, r1
    3266:	d800      	bhi.n	326a <__aeabi_ddiv+0x33e>
    3268:	e104      	b.n	3474 <__aeabi_ddiv+0x548>
    326a:	3d02      	subs	r5, #2
    326c:	4441      	add	r1, r8
    326e:	9b04      	ldr	r3, [sp, #16]
    3270:	1acb      	subs	r3, r1, r3
    3272:	0018      	movs	r0, r3
    3274:	0039      	movs	r1, r7
    3276:	9304      	str	r3, [sp, #16]
    3278:	f7ff fa60 	bl	273c <__udivsi3>
    327c:	9b01      	ldr	r3, [sp, #4]
    327e:	4682      	mov	sl, r0
    3280:	4343      	muls	r3, r0
    3282:	0039      	movs	r1, r7
    3284:	9804      	ldr	r0, [sp, #16]
    3286:	9301      	str	r3, [sp, #4]
    3288:	f7ff fade 	bl	2848 <__aeabi_uidivmod>
    328c:	9801      	ldr	r0, [sp, #4]
    328e:	040b      	lsls	r3, r1, #16
    3290:	0431      	lsls	r1, r6, #16
    3292:	0c09      	lsrs	r1, r1, #16
    3294:	4319      	orrs	r1, r3
    3296:	4288      	cmp	r0, r1
    3298:	d90d      	bls.n	32b6 <__aeabi_ddiv+0x38a>
    329a:	4653      	mov	r3, sl
    329c:	4441      	add	r1, r8
    329e:	3b01      	subs	r3, #1
    32a0:	4588      	cmp	r8, r1
    32a2:	d900      	bls.n	32a6 <__aeabi_ddiv+0x37a>
    32a4:	e0e8      	b.n	3478 <__aeabi_ddiv+0x54c>
    32a6:	4288      	cmp	r0, r1
    32a8:	d800      	bhi.n	32ac <__aeabi_ddiv+0x380>
    32aa:	e0e5      	b.n	3478 <__aeabi_ddiv+0x54c>
    32ac:	2302      	movs	r3, #2
    32ae:	425b      	negs	r3, r3
    32b0:	469c      	mov	ip, r3
    32b2:	4441      	add	r1, r8
    32b4:	44e2      	add	sl, ip
    32b6:	9b01      	ldr	r3, [sp, #4]
    32b8:	042d      	lsls	r5, r5, #16
    32ba:	1ace      	subs	r6, r1, r3
    32bc:	4651      	mov	r1, sl
    32be:	4329      	orrs	r1, r5
    32c0:	9d05      	ldr	r5, [sp, #20]
    32c2:	464f      	mov	r7, r9
    32c4:	002a      	movs	r2, r5
    32c6:	040b      	lsls	r3, r1, #16
    32c8:	0c08      	lsrs	r0, r1, #16
    32ca:	0c1b      	lsrs	r3, r3, #16
    32cc:	435a      	muls	r2, r3
    32ce:	4345      	muls	r5, r0
    32d0:	437b      	muls	r3, r7
    32d2:	4378      	muls	r0, r7
    32d4:	195b      	adds	r3, r3, r5
    32d6:	0c17      	lsrs	r7, r2, #16
    32d8:	18fb      	adds	r3, r7, r3
    32da:	429d      	cmp	r5, r3
    32dc:	d903      	bls.n	32e6 <__aeabi_ddiv+0x3ba>
    32de:	2580      	movs	r5, #128	; 0x80
    32e0:	026d      	lsls	r5, r5, #9
    32e2:	46ac      	mov	ip, r5
    32e4:	4460      	add	r0, ip
    32e6:	0c1d      	lsrs	r5, r3, #16
    32e8:	0412      	lsls	r2, r2, #16
    32ea:	041b      	lsls	r3, r3, #16
    32ec:	0c12      	lsrs	r2, r2, #16
    32ee:	1828      	adds	r0, r5, r0
    32f0:	189b      	adds	r3, r3, r2
    32f2:	4286      	cmp	r6, r0
    32f4:	d200      	bcs.n	32f8 <__aeabi_ddiv+0x3cc>
    32f6:	e093      	b.n	3420 <__aeabi_ddiv+0x4f4>
    32f8:	d100      	bne.n	32fc <__aeabi_ddiv+0x3d0>
    32fa:	e08e      	b.n	341a <__aeabi_ddiv+0x4ee>
    32fc:	2301      	movs	r3, #1
    32fe:	4319      	orrs	r1, r3
    3300:	4ba0      	ldr	r3, [pc, #640]	; (3584 <__aeabi_ddiv+0x658>)
    3302:	18e3      	adds	r3, r4, r3
    3304:	2b00      	cmp	r3, #0
    3306:	dc00      	bgt.n	330a <__aeabi_ddiv+0x3de>
    3308:	e099      	b.n	343e <__aeabi_ddiv+0x512>
    330a:	074a      	lsls	r2, r1, #29
    330c:	d000      	beq.n	3310 <__aeabi_ddiv+0x3e4>
    330e:	e09e      	b.n	344e <__aeabi_ddiv+0x522>
    3310:	465a      	mov	r2, fp
    3312:	01d2      	lsls	r2, r2, #7
    3314:	d506      	bpl.n	3324 <__aeabi_ddiv+0x3f8>
    3316:	465a      	mov	r2, fp
    3318:	4b9b      	ldr	r3, [pc, #620]	; (3588 <__aeabi_ddiv+0x65c>)
    331a:	401a      	ands	r2, r3
    331c:	2380      	movs	r3, #128	; 0x80
    331e:	4693      	mov	fp, r2
    3320:	00db      	lsls	r3, r3, #3
    3322:	18e3      	adds	r3, r4, r3
    3324:	4a99      	ldr	r2, [pc, #612]	; (358c <__aeabi_ddiv+0x660>)
    3326:	4293      	cmp	r3, r2
    3328:	dd68      	ble.n	33fc <__aeabi_ddiv+0x4d0>
    332a:	2301      	movs	r3, #1
    332c:	9a02      	ldr	r2, [sp, #8]
    332e:	4c98      	ldr	r4, [pc, #608]	; (3590 <__aeabi_ddiv+0x664>)
    3330:	401a      	ands	r2, r3
    3332:	2300      	movs	r3, #0
    3334:	4694      	mov	ip, r2
    3336:	4698      	mov	r8, r3
    3338:	2200      	movs	r2, #0
    333a:	e6c5      	b.n	30c8 <__aeabi_ddiv+0x19c>
    333c:	2280      	movs	r2, #128	; 0x80
    333e:	464b      	mov	r3, r9
    3340:	0312      	lsls	r2, r2, #12
    3342:	4213      	tst	r3, r2
    3344:	d00a      	beq.n	335c <__aeabi_ddiv+0x430>
    3346:	465b      	mov	r3, fp
    3348:	4213      	tst	r3, r2
    334a:	d106      	bne.n	335a <__aeabi_ddiv+0x42e>
    334c:	431a      	orrs	r2, r3
    334e:	0312      	lsls	r2, r2, #12
    3350:	0b12      	lsrs	r2, r2, #12
    3352:	46ac      	mov	ip, r5
    3354:	4688      	mov	r8, r1
    3356:	4c8e      	ldr	r4, [pc, #568]	; (3590 <__aeabi_ddiv+0x664>)
    3358:	e6b6      	b.n	30c8 <__aeabi_ddiv+0x19c>
    335a:	464b      	mov	r3, r9
    335c:	431a      	orrs	r2, r3
    335e:	0312      	lsls	r2, r2, #12
    3360:	0b12      	lsrs	r2, r2, #12
    3362:	46bc      	mov	ip, r7
    3364:	4c8a      	ldr	r4, [pc, #552]	; (3590 <__aeabi_ddiv+0x664>)
    3366:	e6af      	b.n	30c8 <__aeabi_ddiv+0x19c>
    3368:	0003      	movs	r3, r0
    336a:	465a      	mov	r2, fp
    336c:	3b28      	subs	r3, #40	; 0x28
    336e:	409a      	lsls	r2, r3
    3370:	2300      	movs	r3, #0
    3372:	4691      	mov	r9, r2
    3374:	4698      	mov	r8, r3
    3376:	e657      	b.n	3028 <__aeabi_ddiv+0xfc>
    3378:	4658      	mov	r0, fp
    337a:	f001 f87f 	bl	447c <__clzsi2>
    337e:	3020      	adds	r0, #32
    3380:	e640      	b.n	3004 <__aeabi_ddiv+0xd8>
    3382:	0003      	movs	r3, r0
    3384:	4652      	mov	r2, sl
    3386:	3b28      	subs	r3, #40	; 0x28
    3388:	409a      	lsls	r2, r3
    338a:	2100      	movs	r1, #0
    338c:	4693      	mov	fp, r2
    338e:	e677      	b.n	3080 <__aeabi_ddiv+0x154>
    3390:	f001 f874 	bl	447c <__clzsi2>
    3394:	3020      	adds	r0, #32
    3396:	e65f      	b.n	3058 <__aeabi_ddiv+0x12c>
    3398:	4588      	cmp	r8, r1
    339a:	d200      	bcs.n	339e <__aeabi_ddiv+0x472>
    339c:	e6c7      	b.n	312e <__aeabi_ddiv+0x202>
    339e:	464b      	mov	r3, r9
    33a0:	07de      	lsls	r6, r3, #31
    33a2:	085d      	lsrs	r5, r3, #1
    33a4:	4643      	mov	r3, r8
    33a6:	085b      	lsrs	r3, r3, #1
    33a8:	431e      	orrs	r6, r3
    33aa:	4643      	mov	r3, r8
    33ac:	07db      	lsls	r3, r3, #31
    33ae:	469a      	mov	sl, r3
    33b0:	e6c2      	b.n	3138 <__aeabi_ddiv+0x20c>
    33b2:	2500      	movs	r5, #0
    33b4:	4592      	cmp	sl, r2
    33b6:	d300      	bcc.n	33ba <__aeabi_ddiv+0x48e>
    33b8:	e733      	b.n	3222 <__aeabi_ddiv+0x2f6>
    33ba:	9e03      	ldr	r6, [sp, #12]
    33bc:	4659      	mov	r1, fp
    33be:	46b4      	mov	ip, r6
    33c0:	44e2      	add	sl, ip
    33c2:	45b2      	cmp	sl, r6
    33c4:	41ad      	sbcs	r5, r5
    33c6:	426d      	negs	r5, r5
    33c8:	4445      	add	r5, r8
    33ca:	18eb      	adds	r3, r5, r3
    33cc:	3901      	subs	r1, #1
    33ce:	4598      	cmp	r8, r3
    33d0:	d207      	bcs.n	33e2 <__aeabi_ddiv+0x4b6>
    33d2:	4298      	cmp	r0, r3
    33d4:	d900      	bls.n	33d8 <__aeabi_ddiv+0x4ac>
    33d6:	e07f      	b.n	34d8 <__aeabi_ddiv+0x5ac>
    33d8:	d100      	bne.n	33dc <__aeabi_ddiv+0x4b0>
    33da:	e0bc      	b.n	3556 <__aeabi_ddiv+0x62a>
    33dc:	1a1d      	subs	r5, r3, r0
    33de:	468b      	mov	fp, r1
    33e0:	e71f      	b.n	3222 <__aeabi_ddiv+0x2f6>
    33e2:	4598      	cmp	r8, r3
    33e4:	d1fa      	bne.n	33dc <__aeabi_ddiv+0x4b0>
    33e6:	9d03      	ldr	r5, [sp, #12]
    33e8:	4555      	cmp	r5, sl
    33ea:	d9f2      	bls.n	33d2 <__aeabi_ddiv+0x4a6>
    33ec:	4643      	mov	r3, r8
    33ee:	468b      	mov	fp, r1
    33f0:	1a1d      	subs	r5, r3, r0
    33f2:	e716      	b.n	3222 <__aeabi_ddiv+0x2f6>
    33f4:	469b      	mov	fp, r3
    33f6:	e6ca      	b.n	318e <__aeabi_ddiv+0x262>
    33f8:	0015      	movs	r5, r2
    33fa:	e6e7      	b.n	31cc <__aeabi_ddiv+0x2a0>
    33fc:	465a      	mov	r2, fp
    33fe:	08c9      	lsrs	r1, r1, #3
    3400:	0752      	lsls	r2, r2, #29
    3402:	430a      	orrs	r2, r1
    3404:	055b      	lsls	r3, r3, #21
    3406:	4690      	mov	r8, r2
    3408:	0d5c      	lsrs	r4, r3, #21
    340a:	465a      	mov	r2, fp
    340c:	2301      	movs	r3, #1
    340e:	9902      	ldr	r1, [sp, #8]
    3410:	0252      	lsls	r2, r2, #9
    3412:	4019      	ands	r1, r3
    3414:	0b12      	lsrs	r2, r2, #12
    3416:	468c      	mov	ip, r1
    3418:	e656      	b.n	30c8 <__aeabi_ddiv+0x19c>
    341a:	2b00      	cmp	r3, #0
    341c:	d100      	bne.n	3420 <__aeabi_ddiv+0x4f4>
    341e:	e76f      	b.n	3300 <__aeabi_ddiv+0x3d4>
    3420:	4446      	add	r6, r8
    3422:	1e4a      	subs	r2, r1, #1
    3424:	45b0      	cmp	r8, r6
    3426:	d929      	bls.n	347c <__aeabi_ddiv+0x550>
    3428:	0011      	movs	r1, r2
    342a:	4286      	cmp	r6, r0
    342c:	d000      	beq.n	3430 <__aeabi_ddiv+0x504>
    342e:	e765      	b.n	32fc <__aeabi_ddiv+0x3d0>
    3430:	9a03      	ldr	r2, [sp, #12]
    3432:	4293      	cmp	r3, r2
    3434:	d000      	beq.n	3438 <__aeabi_ddiv+0x50c>
    3436:	e761      	b.n	32fc <__aeabi_ddiv+0x3d0>
    3438:	e762      	b.n	3300 <__aeabi_ddiv+0x3d4>
    343a:	2101      	movs	r1, #1
    343c:	4249      	negs	r1, r1
    343e:	2001      	movs	r0, #1
    3440:	1ac2      	subs	r2, r0, r3
    3442:	2a38      	cmp	r2, #56	; 0x38
    3444:	dd21      	ble.n	348a <__aeabi_ddiv+0x55e>
    3446:	9b02      	ldr	r3, [sp, #8]
    3448:	4003      	ands	r3, r0
    344a:	469c      	mov	ip, r3
    344c:	e638      	b.n	30c0 <__aeabi_ddiv+0x194>
    344e:	220f      	movs	r2, #15
    3450:	400a      	ands	r2, r1
    3452:	2a04      	cmp	r2, #4
    3454:	d100      	bne.n	3458 <__aeabi_ddiv+0x52c>
    3456:	e75b      	b.n	3310 <__aeabi_ddiv+0x3e4>
    3458:	000a      	movs	r2, r1
    345a:	1d11      	adds	r1, r2, #4
    345c:	4291      	cmp	r1, r2
    345e:	4192      	sbcs	r2, r2
    3460:	4252      	negs	r2, r2
    3462:	4493      	add	fp, r2
    3464:	e754      	b.n	3310 <__aeabi_ddiv+0x3e4>
    3466:	4b47      	ldr	r3, [pc, #284]	; (3584 <__aeabi_ddiv+0x658>)
    3468:	18e3      	adds	r3, r4, r3
    346a:	2b00      	cmp	r3, #0
    346c:	dde5      	ble.n	343a <__aeabi_ddiv+0x50e>
    346e:	2201      	movs	r2, #1
    3470:	4252      	negs	r2, r2
    3472:	e7f2      	b.n	345a <__aeabi_ddiv+0x52e>
    3474:	001d      	movs	r5, r3
    3476:	e6fa      	b.n	326e <__aeabi_ddiv+0x342>
    3478:	469a      	mov	sl, r3
    347a:	e71c      	b.n	32b6 <__aeabi_ddiv+0x38a>
    347c:	42b0      	cmp	r0, r6
    347e:	d839      	bhi.n	34f4 <__aeabi_ddiv+0x5c8>
    3480:	d06e      	beq.n	3560 <__aeabi_ddiv+0x634>
    3482:	0011      	movs	r1, r2
    3484:	e73a      	b.n	32fc <__aeabi_ddiv+0x3d0>
    3486:	9302      	str	r3, [sp, #8]
    3488:	e73a      	b.n	3300 <__aeabi_ddiv+0x3d4>
    348a:	2a1f      	cmp	r2, #31
    348c:	dc3c      	bgt.n	3508 <__aeabi_ddiv+0x5dc>
    348e:	2320      	movs	r3, #32
    3490:	1a9b      	subs	r3, r3, r2
    3492:	000c      	movs	r4, r1
    3494:	4658      	mov	r0, fp
    3496:	4099      	lsls	r1, r3
    3498:	4098      	lsls	r0, r3
    349a:	1e4b      	subs	r3, r1, #1
    349c:	4199      	sbcs	r1, r3
    349e:	465b      	mov	r3, fp
    34a0:	40d4      	lsrs	r4, r2
    34a2:	40d3      	lsrs	r3, r2
    34a4:	4320      	orrs	r0, r4
    34a6:	4308      	orrs	r0, r1
    34a8:	001a      	movs	r2, r3
    34aa:	0743      	lsls	r3, r0, #29
    34ac:	d009      	beq.n	34c2 <__aeabi_ddiv+0x596>
    34ae:	230f      	movs	r3, #15
    34b0:	4003      	ands	r3, r0
    34b2:	2b04      	cmp	r3, #4
    34b4:	d005      	beq.n	34c2 <__aeabi_ddiv+0x596>
    34b6:	0001      	movs	r1, r0
    34b8:	1d08      	adds	r0, r1, #4
    34ba:	4288      	cmp	r0, r1
    34bc:	419b      	sbcs	r3, r3
    34be:	425b      	negs	r3, r3
    34c0:	18d2      	adds	r2, r2, r3
    34c2:	0213      	lsls	r3, r2, #8
    34c4:	d53a      	bpl.n	353c <__aeabi_ddiv+0x610>
    34c6:	2301      	movs	r3, #1
    34c8:	9a02      	ldr	r2, [sp, #8]
    34ca:	2401      	movs	r4, #1
    34cc:	401a      	ands	r2, r3
    34ce:	2300      	movs	r3, #0
    34d0:	4694      	mov	ip, r2
    34d2:	4698      	mov	r8, r3
    34d4:	2200      	movs	r2, #0
    34d6:	e5f7      	b.n	30c8 <__aeabi_ddiv+0x19c>
    34d8:	2102      	movs	r1, #2
    34da:	4249      	negs	r1, r1
    34dc:	468c      	mov	ip, r1
    34de:	9d03      	ldr	r5, [sp, #12]
    34e0:	44e3      	add	fp, ip
    34e2:	46ac      	mov	ip, r5
    34e4:	44e2      	add	sl, ip
    34e6:	45aa      	cmp	sl, r5
    34e8:	41ad      	sbcs	r5, r5
    34ea:	426d      	negs	r5, r5
    34ec:	4445      	add	r5, r8
    34ee:	18ed      	adds	r5, r5, r3
    34f0:	1a2d      	subs	r5, r5, r0
    34f2:	e696      	b.n	3222 <__aeabi_ddiv+0x2f6>
    34f4:	1e8a      	subs	r2, r1, #2
    34f6:	9903      	ldr	r1, [sp, #12]
    34f8:	004d      	lsls	r5, r1, #1
    34fa:	428d      	cmp	r5, r1
    34fc:	4189      	sbcs	r1, r1
    34fe:	4249      	negs	r1, r1
    3500:	4441      	add	r1, r8
    3502:	1876      	adds	r6, r6, r1
    3504:	9503      	str	r5, [sp, #12]
    3506:	e78f      	b.n	3428 <__aeabi_ddiv+0x4fc>
    3508:	201f      	movs	r0, #31
    350a:	4240      	negs	r0, r0
    350c:	1ac3      	subs	r3, r0, r3
    350e:	4658      	mov	r0, fp
    3510:	40d8      	lsrs	r0, r3
    3512:	0003      	movs	r3, r0
    3514:	2a20      	cmp	r2, #32
    3516:	d028      	beq.n	356a <__aeabi_ddiv+0x63e>
    3518:	2040      	movs	r0, #64	; 0x40
    351a:	465d      	mov	r5, fp
    351c:	1a82      	subs	r2, r0, r2
    351e:	4095      	lsls	r5, r2
    3520:	4329      	orrs	r1, r5
    3522:	1e4a      	subs	r2, r1, #1
    3524:	4191      	sbcs	r1, r2
    3526:	4319      	orrs	r1, r3
    3528:	2307      	movs	r3, #7
    352a:	2200      	movs	r2, #0
    352c:	400b      	ands	r3, r1
    352e:	d009      	beq.n	3544 <__aeabi_ddiv+0x618>
    3530:	230f      	movs	r3, #15
    3532:	2200      	movs	r2, #0
    3534:	400b      	ands	r3, r1
    3536:	0008      	movs	r0, r1
    3538:	2b04      	cmp	r3, #4
    353a:	d1bd      	bne.n	34b8 <__aeabi_ddiv+0x58c>
    353c:	0001      	movs	r1, r0
    353e:	0753      	lsls	r3, r2, #29
    3540:	0252      	lsls	r2, r2, #9
    3542:	0b12      	lsrs	r2, r2, #12
    3544:	08c9      	lsrs	r1, r1, #3
    3546:	4319      	orrs	r1, r3
    3548:	2301      	movs	r3, #1
    354a:	4688      	mov	r8, r1
    354c:	9902      	ldr	r1, [sp, #8]
    354e:	2400      	movs	r4, #0
    3550:	4019      	ands	r1, r3
    3552:	468c      	mov	ip, r1
    3554:	e5b8      	b.n	30c8 <__aeabi_ddiv+0x19c>
    3556:	4552      	cmp	r2, sl
    3558:	d8be      	bhi.n	34d8 <__aeabi_ddiv+0x5ac>
    355a:	468b      	mov	fp, r1
    355c:	2500      	movs	r5, #0
    355e:	e660      	b.n	3222 <__aeabi_ddiv+0x2f6>
    3560:	9d03      	ldr	r5, [sp, #12]
    3562:	429d      	cmp	r5, r3
    3564:	d3c6      	bcc.n	34f4 <__aeabi_ddiv+0x5c8>
    3566:	0011      	movs	r1, r2
    3568:	e762      	b.n	3430 <__aeabi_ddiv+0x504>
    356a:	2500      	movs	r5, #0
    356c:	e7d8      	b.n	3520 <__aeabi_ddiv+0x5f4>
    356e:	2280      	movs	r2, #128	; 0x80
    3570:	465b      	mov	r3, fp
    3572:	0312      	lsls	r2, r2, #12
    3574:	431a      	orrs	r2, r3
    3576:	9b01      	ldr	r3, [sp, #4]
    3578:	0312      	lsls	r2, r2, #12
    357a:	0b12      	lsrs	r2, r2, #12
    357c:	469c      	mov	ip, r3
    357e:	4688      	mov	r8, r1
    3580:	4c03      	ldr	r4, [pc, #12]	; (3590 <__aeabi_ddiv+0x664>)
    3582:	e5a1      	b.n	30c8 <__aeabi_ddiv+0x19c>
    3584:	000003ff 	.word	0x000003ff
    3588:	feffffff 	.word	0xfeffffff
    358c:	000007fe 	.word	0x000007fe
    3590:	000007ff 	.word	0x000007ff

00003594 <__eqdf2>:
    3594:	b5f0      	push	{r4, r5, r6, r7, lr}
    3596:	464f      	mov	r7, r9
    3598:	4646      	mov	r6, r8
    359a:	46d6      	mov	lr, sl
    359c:	005c      	lsls	r4, r3, #1
    359e:	b5c0      	push	{r6, r7, lr}
    35a0:	031f      	lsls	r7, r3, #12
    35a2:	0fdb      	lsrs	r3, r3, #31
    35a4:	469a      	mov	sl, r3
    35a6:	4b17      	ldr	r3, [pc, #92]	; (3604 <__eqdf2+0x70>)
    35a8:	030e      	lsls	r6, r1, #12
    35aa:	004d      	lsls	r5, r1, #1
    35ac:	4684      	mov	ip, r0
    35ae:	4680      	mov	r8, r0
    35b0:	0b36      	lsrs	r6, r6, #12
    35b2:	0d6d      	lsrs	r5, r5, #21
    35b4:	0fc9      	lsrs	r1, r1, #31
    35b6:	4691      	mov	r9, r2
    35b8:	0b3f      	lsrs	r7, r7, #12
    35ba:	0d64      	lsrs	r4, r4, #21
    35bc:	2001      	movs	r0, #1
    35be:	429d      	cmp	r5, r3
    35c0:	d008      	beq.n	35d4 <__eqdf2+0x40>
    35c2:	429c      	cmp	r4, r3
    35c4:	d001      	beq.n	35ca <__eqdf2+0x36>
    35c6:	42a5      	cmp	r5, r4
    35c8:	d00b      	beq.n	35e2 <__eqdf2+0x4e>
    35ca:	bc1c      	pop	{r2, r3, r4}
    35cc:	4690      	mov	r8, r2
    35ce:	4699      	mov	r9, r3
    35d0:	46a2      	mov	sl, r4
    35d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35d4:	4663      	mov	r3, ip
    35d6:	4333      	orrs	r3, r6
    35d8:	d1f7      	bne.n	35ca <__eqdf2+0x36>
    35da:	42ac      	cmp	r4, r5
    35dc:	d1f5      	bne.n	35ca <__eqdf2+0x36>
    35de:	433a      	orrs	r2, r7
    35e0:	d1f3      	bne.n	35ca <__eqdf2+0x36>
    35e2:	2001      	movs	r0, #1
    35e4:	42be      	cmp	r6, r7
    35e6:	d1f0      	bne.n	35ca <__eqdf2+0x36>
    35e8:	45c8      	cmp	r8, r9
    35ea:	d1ee      	bne.n	35ca <__eqdf2+0x36>
    35ec:	4551      	cmp	r1, sl
    35ee:	d007      	beq.n	3600 <__eqdf2+0x6c>
    35f0:	2d00      	cmp	r5, #0
    35f2:	d1ea      	bne.n	35ca <__eqdf2+0x36>
    35f4:	4663      	mov	r3, ip
    35f6:	431e      	orrs	r6, r3
    35f8:	0030      	movs	r0, r6
    35fa:	1e46      	subs	r6, r0, #1
    35fc:	41b0      	sbcs	r0, r6
    35fe:	e7e4      	b.n	35ca <__eqdf2+0x36>
    3600:	2000      	movs	r0, #0
    3602:	e7e2      	b.n	35ca <__eqdf2+0x36>
    3604:	000007ff 	.word	0x000007ff

00003608 <__gedf2>:
    3608:	b5f0      	push	{r4, r5, r6, r7, lr}
    360a:	4645      	mov	r5, r8
    360c:	46de      	mov	lr, fp
    360e:	4657      	mov	r7, sl
    3610:	464e      	mov	r6, r9
    3612:	b5e0      	push	{r5, r6, r7, lr}
    3614:	031f      	lsls	r7, r3, #12
    3616:	0b3d      	lsrs	r5, r7, #12
    3618:	4f2c      	ldr	r7, [pc, #176]	; (36cc <__gedf2+0xc4>)
    361a:	030e      	lsls	r6, r1, #12
    361c:	004c      	lsls	r4, r1, #1
    361e:	46ab      	mov	fp, r5
    3620:	005d      	lsls	r5, r3, #1
    3622:	4684      	mov	ip, r0
    3624:	0b36      	lsrs	r6, r6, #12
    3626:	0d64      	lsrs	r4, r4, #21
    3628:	0fc9      	lsrs	r1, r1, #31
    362a:	4690      	mov	r8, r2
    362c:	0d6d      	lsrs	r5, r5, #21
    362e:	0fdb      	lsrs	r3, r3, #31
    3630:	42bc      	cmp	r4, r7
    3632:	d02a      	beq.n	368a <__gedf2+0x82>
    3634:	4f25      	ldr	r7, [pc, #148]	; (36cc <__gedf2+0xc4>)
    3636:	42bd      	cmp	r5, r7
    3638:	d02d      	beq.n	3696 <__gedf2+0x8e>
    363a:	2c00      	cmp	r4, #0
    363c:	d10f      	bne.n	365e <__gedf2+0x56>
    363e:	4330      	orrs	r0, r6
    3640:	0007      	movs	r7, r0
    3642:	4681      	mov	r9, r0
    3644:	4278      	negs	r0, r7
    3646:	4178      	adcs	r0, r7
    3648:	b2c0      	uxtb	r0, r0
    364a:	2d00      	cmp	r5, #0
    364c:	d117      	bne.n	367e <__gedf2+0x76>
    364e:	465f      	mov	r7, fp
    3650:	433a      	orrs	r2, r7
    3652:	d114      	bne.n	367e <__gedf2+0x76>
    3654:	464b      	mov	r3, r9
    3656:	2000      	movs	r0, #0
    3658:	2b00      	cmp	r3, #0
    365a:	d00a      	beq.n	3672 <__gedf2+0x6a>
    365c:	e006      	b.n	366c <__gedf2+0x64>
    365e:	2d00      	cmp	r5, #0
    3660:	d102      	bne.n	3668 <__gedf2+0x60>
    3662:	4658      	mov	r0, fp
    3664:	4302      	orrs	r2, r0
    3666:	d001      	beq.n	366c <__gedf2+0x64>
    3668:	4299      	cmp	r1, r3
    366a:	d018      	beq.n	369e <__gedf2+0x96>
    366c:	4248      	negs	r0, r1
    366e:	2101      	movs	r1, #1
    3670:	4308      	orrs	r0, r1
    3672:	bc3c      	pop	{r2, r3, r4, r5}
    3674:	4690      	mov	r8, r2
    3676:	4699      	mov	r9, r3
    3678:	46a2      	mov	sl, r4
    367a:	46ab      	mov	fp, r5
    367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    367e:	2800      	cmp	r0, #0
    3680:	d0f2      	beq.n	3668 <__gedf2+0x60>
    3682:	2001      	movs	r0, #1
    3684:	3b01      	subs	r3, #1
    3686:	4318      	orrs	r0, r3
    3688:	e7f3      	b.n	3672 <__gedf2+0x6a>
    368a:	0037      	movs	r7, r6
    368c:	4307      	orrs	r7, r0
    368e:	d0d1      	beq.n	3634 <__gedf2+0x2c>
    3690:	2002      	movs	r0, #2
    3692:	4240      	negs	r0, r0
    3694:	e7ed      	b.n	3672 <__gedf2+0x6a>
    3696:	465f      	mov	r7, fp
    3698:	4317      	orrs	r7, r2
    369a:	d0ce      	beq.n	363a <__gedf2+0x32>
    369c:	e7f8      	b.n	3690 <__gedf2+0x88>
    369e:	42ac      	cmp	r4, r5
    36a0:	dce4      	bgt.n	366c <__gedf2+0x64>
    36a2:	da03      	bge.n	36ac <__gedf2+0xa4>
    36a4:	1e48      	subs	r0, r1, #1
    36a6:	2101      	movs	r1, #1
    36a8:	4308      	orrs	r0, r1
    36aa:	e7e2      	b.n	3672 <__gedf2+0x6a>
    36ac:	455e      	cmp	r6, fp
    36ae:	d8dd      	bhi.n	366c <__gedf2+0x64>
    36b0:	d006      	beq.n	36c0 <__gedf2+0xb8>
    36b2:	2000      	movs	r0, #0
    36b4:	455e      	cmp	r6, fp
    36b6:	d2dc      	bcs.n	3672 <__gedf2+0x6a>
    36b8:	2301      	movs	r3, #1
    36ba:	1e48      	subs	r0, r1, #1
    36bc:	4318      	orrs	r0, r3
    36be:	e7d8      	b.n	3672 <__gedf2+0x6a>
    36c0:	45c4      	cmp	ip, r8
    36c2:	d8d3      	bhi.n	366c <__gedf2+0x64>
    36c4:	2000      	movs	r0, #0
    36c6:	45c4      	cmp	ip, r8
    36c8:	d3f6      	bcc.n	36b8 <__gedf2+0xb0>
    36ca:	e7d2      	b.n	3672 <__gedf2+0x6a>
    36cc:	000007ff 	.word	0x000007ff

000036d0 <__ledf2>:
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	464e      	mov	r6, r9
    36d4:	4645      	mov	r5, r8
    36d6:	46de      	mov	lr, fp
    36d8:	4657      	mov	r7, sl
    36da:	005c      	lsls	r4, r3, #1
    36dc:	b5e0      	push	{r5, r6, r7, lr}
    36de:	031f      	lsls	r7, r3, #12
    36e0:	0fdb      	lsrs	r3, r3, #31
    36e2:	4699      	mov	r9, r3
    36e4:	4b2a      	ldr	r3, [pc, #168]	; (3790 <__ledf2+0xc0>)
    36e6:	030e      	lsls	r6, r1, #12
    36e8:	004d      	lsls	r5, r1, #1
    36ea:	0fc9      	lsrs	r1, r1, #31
    36ec:	4684      	mov	ip, r0
    36ee:	0b36      	lsrs	r6, r6, #12
    36f0:	0d6d      	lsrs	r5, r5, #21
    36f2:	468b      	mov	fp, r1
    36f4:	4690      	mov	r8, r2
    36f6:	0b3f      	lsrs	r7, r7, #12
    36f8:	0d64      	lsrs	r4, r4, #21
    36fa:	429d      	cmp	r5, r3
    36fc:	d020      	beq.n	3740 <__ledf2+0x70>
    36fe:	4b24      	ldr	r3, [pc, #144]	; (3790 <__ledf2+0xc0>)
    3700:	429c      	cmp	r4, r3
    3702:	d022      	beq.n	374a <__ledf2+0x7a>
    3704:	2d00      	cmp	r5, #0
    3706:	d112      	bne.n	372e <__ledf2+0x5e>
    3708:	4330      	orrs	r0, r6
    370a:	4243      	negs	r3, r0
    370c:	4143      	adcs	r3, r0
    370e:	b2db      	uxtb	r3, r3
    3710:	2c00      	cmp	r4, #0
    3712:	d01f      	beq.n	3754 <__ledf2+0x84>
    3714:	2b00      	cmp	r3, #0
    3716:	d00c      	beq.n	3732 <__ledf2+0x62>
    3718:	464b      	mov	r3, r9
    371a:	2001      	movs	r0, #1
    371c:	3b01      	subs	r3, #1
    371e:	4303      	orrs	r3, r0
    3720:	0018      	movs	r0, r3
    3722:	bc3c      	pop	{r2, r3, r4, r5}
    3724:	4690      	mov	r8, r2
    3726:	4699      	mov	r9, r3
    3728:	46a2      	mov	sl, r4
    372a:	46ab      	mov	fp, r5
    372c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    372e:	2c00      	cmp	r4, #0
    3730:	d016      	beq.n	3760 <__ledf2+0x90>
    3732:	45cb      	cmp	fp, r9
    3734:	d017      	beq.n	3766 <__ledf2+0x96>
    3736:	465b      	mov	r3, fp
    3738:	4259      	negs	r1, r3
    373a:	2301      	movs	r3, #1
    373c:	430b      	orrs	r3, r1
    373e:	e7ef      	b.n	3720 <__ledf2+0x50>
    3740:	0031      	movs	r1, r6
    3742:	2302      	movs	r3, #2
    3744:	4301      	orrs	r1, r0
    3746:	d1eb      	bne.n	3720 <__ledf2+0x50>
    3748:	e7d9      	b.n	36fe <__ledf2+0x2e>
    374a:	0039      	movs	r1, r7
    374c:	2302      	movs	r3, #2
    374e:	4311      	orrs	r1, r2
    3750:	d1e6      	bne.n	3720 <__ledf2+0x50>
    3752:	e7d7      	b.n	3704 <__ledf2+0x34>
    3754:	433a      	orrs	r2, r7
    3756:	d1dd      	bne.n	3714 <__ledf2+0x44>
    3758:	2300      	movs	r3, #0
    375a:	2800      	cmp	r0, #0
    375c:	d0e0      	beq.n	3720 <__ledf2+0x50>
    375e:	e7ea      	b.n	3736 <__ledf2+0x66>
    3760:	433a      	orrs	r2, r7
    3762:	d1e6      	bne.n	3732 <__ledf2+0x62>
    3764:	e7e7      	b.n	3736 <__ledf2+0x66>
    3766:	42a5      	cmp	r5, r4
    3768:	dce5      	bgt.n	3736 <__ledf2+0x66>
    376a:	db05      	blt.n	3778 <__ledf2+0xa8>
    376c:	42be      	cmp	r6, r7
    376e:	d8e2      	bhi.n	3736 <__ledf2+0x66>
    3770:	d007      	beq.n	3782 <__ledf2+0xb2>
    3772:	2300      	movs	r3, #0
    3774:	42be      	cmp	r6, r7
    3776:	d2d3      	bcs.n	3720 <__ledf2+0x50>
    3778:	4659      	mov	r1, fp
    377a:	2301      	movs	r3, #1
    377c:	3901      	subs	r1, #1
    377e:	430b      	orrs	r3, r1
    3780:	e7ce      	b.n	3720 <__ledf2+0x50>
    3782:	45c4      	cmp	ip, r8
    3784:	d8d7      	bhi.n	3736 <__ledf2+0x66>
    3786:	2300      	movs	r3, #0
    3788:	45c4      	cmp	ip, r8
    378a:	d3f5      	bcc.n	3778 <__ledf2+0xa8>
    378c:	e7c8      	b.n	3720 <__ledf2+0x50>
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	000007ff 	.word	0x000007ff

00003794 <__aeabi_dmul>:
    3794:	b5f0      	push	{r4, r5, r6, r7, lr}
    3796:	4657      	mov	r7, sl
    3798:	4645      	mov	r5, r8
    379a:	46de      	mov	lr, fp
    379c:	464e      	mov	r6, r9
    379e:	b5e0      	push	{r5, r6, r7, lr}
    37a0:	030c      	lsls	r4, r1, #12
    37a2:	4698      	mov	r8, r3
    37a4:	004e      	lsls	r6, r1, #1
    37a6:	0b23      	lsrs	r3, r4, #12
    37a8:	b087      	sub	sp, #28
    37aa:	0007      	movs	r7, r0
    37ac:	4692      	mov	sl, r2
    37ae:	469b      	mov	fp, r3
    37b0:	0d76      	lsrs	r6, r6, #21
    37b2:	0fcd      	lsrs	r5, r1, #31
    37b4:	2e00      	cmp	r6, #0
    37b6:	d06b      	beq.n	3890 <__aeabi_dmul+0xfc>
    37b8:	4b6d      	ldr	r3, [pc, #436]	; (3970 <__aeabi_dmul+0x1dc>)
    37ba:	429e      	cmp	r6, r3
    37bc:	d035      	beq.n	382a <__aeabi_dmul+0x96>
    37be:	2480      	movs	r4, #128	; 0x80
    37c0:	465b      	mov	r3, fp
    37c2:	0f42      	lsrs	r2, r0, #29
    37c4:	0424      	lsls	r4, r4, #16
    37c6:	00db      	lsls	r3, r3, #3
    37c8:	4314      	orrs	r4, r2
    37ca:	431c      	orrs	r4, r3
    37cc:	00c3      	lsls	r3, r0, #3
    37ce:	4699      	mov	r9, r3
    37d0:	4b68      	ldr	r3, [pc, #416]	; (3974 <__aeabi_dmul+0x1e0>)
    37d2:	46a3      	mov	fp, r4
    37d4:	469c      	mov	ip, r3
    37d6:	2300      	movs	r3, #0
    37d8:	2700      	movs	r7, #0
    37da:	4466      	add	r6, ip
    37dc:	9302      	str	r3, [sp, #8]
    37de:	4643      	mov	r3, r8
    37e0:	031c      	lsls	r4, r3, #12
    37e2:	005a      	lsls	r2, r3, #1
    37e4:	0fdb      	lsrs	r3, r3, #31
    37e6:	4650      	mov	r0, sl
    37e8:	0b24      	lsrs	r4, r4, #12
    37ea:	0d52      	lsrs	r2, r2, #21
    37ec:	4698      	mov	r8, r3
    37ee:	d100      	bne.n	37f2 <__aeabi_dmul+0x5e>
    37f0:	e076      	b.n	38e0 <__aeabi_dmul+0x14c>
    37f2:	4b5f      	ldr	r3, [pc, #380]	; (3970 <__aeabi_dmul+0x1dc>)
    37f4:	429a      	cmp	r2, r3
    37f6:	d06d      	beq.n	38d4 <__aeabi_dmul+0x140>
    37f8:	2380      	movs	r3, #128	; 0x80
    37fa:	0f41      	lsrs	r1, r0, #29
    37fc:	041b      	lsls	r3, r3, #16
    37fe:	430b      	orrs	r3, r1
    3800:	495c      	ldr	r1, [pc, #368]	; (3974 <__aeabi_dmul+0x1e0>)
    3802:	00e4      	lsls	r4, r4, #3
    3804:	468c      	mov	ip, r1
    3806:	431c      	orrs	r4, r3
    3808:	00c3      	lsls	r3, r0, #3
    380a:	2000      	movs	r0, #0
    380c:	4462      	add	r2, ip
    380e:	4641      	mov	r1, r8
    3810:	18b6      	adds	r6, r6, r2
    3812:	4069      	eors	r1, r5
    3814:	1c72      	adds	r2, r6, #1
    3816:	9101      	str	r1, [sp, #4]
    3818:	4694      	mov	ip, r2
    381a:	4307      	orrs	r7, r0
    381c:	2f0f      	cmp	r7, #15
    381e:	d900      	bls.n	3822 <__aeabi_dmul+0x8e>
    3820:	e0b0      	b.n	3984 <__aeabi_dmul+0x1f0>
    3822:	4a55      	ldr	r2, [pc, #340]	; (3978 <__aeabi_dmul+0x1e4>)
    3824:	00bf      	lsls	r7, r7, #2
    3826:	59d2      	ldr	r2, [r2, r7]
    3828:	4697      	mov	pc, r2
    382a:	465b      	mov	r3, fp
    382c:	4303      	orrs	r3, r0
    382e:	4699      	mov	r9, r3
    3830:	d000      	beq.n	3834 <__aeabi_dmul+0xa0>
    3832:	e087      	b.n	3944 <__aeabi_dmul+0x1b0>
    3834:	2300      	movs	r3, #0
    3836:	469b      	mov	fp, r3
    3838:	3302      	adds	r3, #2
    383a:	2708      	movs	r7, #8
    383c:	9302      	str	r3, [sp, #8]
    383e:	e7ce      	b.n	37de <__aeabi_dmul+0x4a>
    3840:	4642      	mov	r2, r8
    3842:	9201      	str	r2, [sp, #4]
    3844:	2802      	cmp	r0, #2
    3846:	d067      	beq.n	3918 <__aeabi_dmul+0x184>
    3848:	2803      	cmp	r0, #3
    384a:	d100      	bne.n	384e <__aeabi_dmul+0xba>
    384c:	e20e      	b.n	3c6c <__aeabi_dmul+0x4d8>
    384e:	2801      	cmp	r0, #1
    3850:	d000      	beq.n	3854 <__aeabi_dmul+0xc0>
    3852:	e162      	b.n	3b1a <__aeabi_dmul+0x386>
    3854:	2300      	movs	r3, #0
    3856:	2400      	movs	r4, #0
    3858:	2200      	movs	r2, #0
    385a:	4699      	mov	r9, r3
    385c:	9901      	ldr	r1, [sp, #4]
    385e:	4001      	ands	r1, r0
    3860:	b2cd      	uxtb	r5, r1
    3862:	2100      	movs	r1, #0
    3864:	0312      	lsls	r2, r2, #12
    3866:	0d0b      	lsrs	r3, r1, #20
    3868:	0b12      	lsrs	r2, r2, #12
    386a:	051b      	lsls	r3, r3, #20
    386c:	4313      	orrs	r3, r2
    386e:	4a43      	ldr	r2, [pc, #268]	; (397c <__aeabi_dmul+0x1e8>)
    3870:	0524      	lsls	r4, r4, #20
    3872:	4013      	ands	r3, r2
    3874:	431c      	orrs	r4, r3
    3876:	0064      	lsls	r4, r4, #1
    3878:	07ed      	lsls	r5, r5, #31
    387a:	0864      	lsrs	r4, r4, #1
    387c:	432c      	orrs	r4, r5
    387e:	4648      	mov	r0, r9
    3880:	0021      	movs	r1, r4
    3882:	b007      	add	sp, #28
    3884:	bc3c      	pop	{r2, r3, r4, r5}
    3886:	4690      	mov	r8, r2
    3888:	4699      	mov	r9, r3
    388a:	46a2      	mov	sl, r4
    388c:	46ab      	mov	fp, r5
    388e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3890:	4303      	orrs	r3, r0
    3892:	4699      	mov	r9, r3
    3894:	d04f      	beq.n	3936 <__aeabi_dmul+0x1a2>
    3896:	465b      	mov	r3, fp
    3898:	2b00      	cmp	r3, #0
    389a:	d100      	bne.n	389e <__aeabi_dmul+0x10a>
    389c:	e189      	b.n	3bb2 <__aeabi_dmul+0x41e>
    389e:	4658      	mov	r0, fp
    38a0:	f000 fdec 	bl	447c <__clzsi2>
    38a4:	0003      	movs	r3, r0
    38a6:	3b0b      	subs	r3, #11
    38a8:	2b1c      	cmp	r3, #28
    38aa:	dd00      	ble.n	38ae <__aeabi_dmul+0x11a>
    38ac:	e17a      	b.n	3ba4 <__aeabi_dmul+0x410>
    38ae:	221d      	movs	r2, #29
    38b0:	1ad3      	subs	r3, r2, r3
    38b2:	003a      	movs	r2, r7
    38b4:	0001      	movs	r1, r0
    38b6:	465c      	mov	r4, fp
    38b8:	40da      	lsrs	r2, r3
    38ba:	3908      	subs	r1, #8
    38bc:	408c      	lsls	r4, r1
    38be:	0013      	movs	r3, r2
    38c0:	408f      	lsls	r7, r1
    38c2:	4323      	orrs	r3, r4
    38c4:	469b      	mov	fp, r3
    38c6:	46b9      	mov	r9, r7
    38c8:	2300      	movs	r3, #0
    38ca:	4e2d      	ldr	r6, [pc, #180]	; (3980 <__aeabi_dmul+0x1ec>)
    38cc:	2700      	movs	r7, #0
    38ce:	1a36      	subs	r6, r6, r0
    38d0:	9302      	str	r3, [sp, #8]
    38d2:	e784      	b.n	37de <__aeabi_dmul+0x4a>
    38d4:	4653      	mov	r3, sl
    38d6:	4323      	orrs	r3, r4
    38d8:	d12a      	bne.n	3930 <__aeabi_dmul+0x19c>
    38da:	2400      	movs	r4, #0
    38dc:	2002      	movs	r0, #2
    38de:	e796      	b.n	380e <__aeabi_dmul+0x7a>
    38e0:	4653      	mov	r3, sl
    38e2:	4323      	orrs	r3, r4
    38e4:	d020      	beq.n	3928 <__aeabi_dmul+0x194>
    38e6:	2c00      	cmp	r4, #0
    38e8:	d100      	bne.n	38ec <__aeabi_dmul+0x158>
    38ea:	e157      	b.n	3b9c <__aeabi_dmul+0x408>
    38ec:	0020      	movs	r0, r4
    38ee:	f000 fdc5 	bl	447c <__clzsi2>
    38f2:	0003      	movs	r3, r0
    38f4:	3b0b      	subs	r3, #11
    38f6:	2b1c      	cmp	r3, #28
    38f8:	dd00      	ble.n	38fc <__aeabi_dmul+0x168>
    38fa:	e149      	b.n	3b90 <__aeabi_dmul+0x3fc>
    38fc:	211d      	movs	r1, #29
    38fe:	1acb      	subs	r3, r1, r3
    3900:	4651      	mov	r1, sl
    3902:	0002      	movs	r2, r0
    3904:	40d9      	lsrs	r1, r3
    3906:	4653      	mov	r3, sl
    3908:	3a08      	subs	r2, #8
    390a:	4094      	lsls	r4, r2
    390c:	4093      	lsls	r3, r2
    390e:	430c      	orrs	r4, r1
    3910:	4a1b      	ldr	r2, [pc, #108]	; (3980 <__aeabi_dmul+0x1ec>)
    3912:	1a12      	subs	r2, r2, r0
    3914:	2000      	movs	r0, #0
    3916:	e77a      	b.n	380e <__aeabi_dmul+0x7a>
    3918:	2501      	movs	r5, #1
    391a:	9b01      	ldr	r3, [sp, #4]
    391c:	4c14      	ldr	r4, [pc, #80]	; (3970 <__aeabi_dmul+0x1dc>)
    391e:	401d      	ands	r5, r3
    3920:	2300      	movs	r3, #0
    3922:	2200      	movs	r2, #0
    3924:	4699      	mov	r9, r3
    3926:	e79c      	b.n	3862 <__aeabi_dmul+0xce>
    3928:	2400      	movs	r4, #0
    392a:	2200      	movs	r2, #0
    392c:	2001      	movs	r0, #1
    392e:	e76e      	b.n	380e <__aeabi_dmul+0x7a>
    3930:	4653      	mov	r3, sl
    3932:	2003      	movs	r0, #3
    3934:	e76b      	b.n	380e <__aeabi_dmul+0x7a>
    3936:	2300      	movs	r3, #0
    3938:	469b      	mov	fp, r3
    393a:	3301      	adds	r3, #1
    393c:	2704      	movs	r7, #4
    393e:	2600      	movs	r6, #0
    3940:	9302      	str	r3, [sp, #8]
    3942:	e74c      	b.n	37de <__aeabi_dmul+0x4a>
    3944:	2303      	movs	r3, #3
    3946:	4681      	mov	r9, r0
    3948:	270c      	movs	r7, #12
    394a:	9302      	str	r3, [sp, #8]
    394c:	e747      	b.n	37de <__aeabi_dmul+0x4a>
    394e:	2280      	movs	r2, #128	; 0x80
    3950:	2300      	movs	r3, #0
    3952:	2500      	movs	r5, #0
    3954:	0312      	lsls	r2, r2, #12
    3956:	4699      	mov	r9, r3
    3958:	4c05      	ldr	r4, [pc, #20]	; (3970 <__aeabi_dmul+0x1dc>)
    395a:	e782      	b.n	3862 <__aeabi_dmul+0xce>
    395c:	465c      	mov	r4, fp
    395e:	464b      	mov	r3, r9
    3960:	9802      	ldr	r0, [sp, #8]
    3962:	e76f      	b.n	3844 <__aeabi_dmul+0xb0>
    3964:	465c      	mov	r4, fp
    3966:	464b      	mov	r3, r9
    3968:	9501      	str	r5, [sp, #4]
    396a:	9802      	ldr	r0, [sp, #8]
    396c:	e76a      	b.n	3844 <__aeabi_dmul+0xb0>
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	000007ff 	.word	0x000007ff
    3974:	fffffc01 	.word	0xfffffc01
    3978:	00004c90 	.word	0x00004c90
    397c:	800fffff 	.word	0x800fffff
    3980:	fffffc0d 	.word	0xfffffc0d
    3984:	464a      	mov	r2, r9
    3986:	4649      	mov	r1, r9
    3988:	0c17      	lsrs	r7, r2, #16
    398a:	0c1a      	lsrs	r2, r3, #16
    398c:	041b      	lsls	r3, r3, #16
    398e:	0c1b      	lsrs	r3, r3, #16
    3990:	0408      	lsls	r0, r1, #16
    3992:	0019      	movs	r1, r3
    3994:	0c00      	lsrs	r0, r0, #16
    3996:	4341      	muls	r1, r0
    3998:	0015      	movs	r5, r2
    399a:	4688      	mov	r8, r1
    399c:	0019      	movs	r1, r3
    399e:	437d      	muls	r5, r7
    39a0:	4379      	muls	r1, r7
    39a2:	9503      	str	r5, [sp, #12]
    39a4:	4689      	mov	r9, r1
    39a6:	0029      	movs	r1, r5
    39a8:	0015      	movs	r5, r2
    39aa:	4345      	muls	r5, r0
    39ac:	444d      	add	r5, r9
    39ae:	9502      	str	r5, [sp, #8]
    39b0:	4645      	mov	r5, r8
    39b2:	0c2d      	lsrs	r5, r5, #16
    39b4:	46aa      	mov	sl, r5
    39b6:	9d02      	ldr	r5, [sp, #8]
    39b8:	4455      	add	r5, sl
    39ba:	45a9      	cmp	r9, r5
    39bc:	d906      	bls.n	39cc <__aeabi_dmul+0x238>
    39be:	468a      	mov	sl, r1
    39c0:	2180      	movs	r1, #128	; 0x80
    39c2:	0249      	lsls	r1, r1, #9
    39c4:	4689      	mov	r9, r1
    39c6:	44ca      	add	sl, r9
    39c8:	4651      	mov	r1, sl
    39ca:	9103      	str	r1, [sp, #12]
    39cc:	0c29      	lsrs	r1, r5, #16
    39ce:	9104      	str	r1, [sp, #16]
    39d0:	4641      	mov	r1, r8
    39d2:	0409      	lsls	r1, r1, #16
    39d4:	042d      	lsls	r5, r5, #16
    39d6:	0c09      	lsrs	r1, r1, #16
    39d8:	4688      	mov	r8, r1
    39da:	0029      	movs	r1, r5
    39dc:	0c25      	lsrs	r5, r4, #16
    39de:	0424      	lsls	r4, r4, #16
    39e0:	4441      	add	r1, r8
    39e2:	0c24      	lsrs	r4, r4, #16
    39e4:	9105      	str	r1, [sp, #20]
    39e6:	0021      	movs	r1, r4
    39e8:	4341      	muls	r1, r0
    39ea:	4688      	mov	r8, r1
    39ec:	0021      	movs	r1, r4
    39ee:	4379      	muls	r1, r7
    39f0:	468a      	mov	sl, r1
    39f2:	4368      	muls	r0, r5
    39f4:	4641      	mov	r1, r8
    39f6:	4450      	add	r0, sl
    39f8:	4681      	mov	r9, r0
    39fa:	0c08      	lsrs	r0, r1, #16
    39fc:	4448      	add	r0, r9
    39fe:	436f      	muls	r7, r5
    3a00:	4582      	cmp	sl, r0
    3a02:	d903      	bls.n	3a0c <__aeabi_dmul+0x278>
    3a04:	2180      	movs	r1, #128	; 0x80
    3a06:	0249      	lsls	r1, r1, #9
    3a08:	4689      	mov	r9, r1
    3a0a:	444f      	add	r7, r9
    3a0c:	0c01      	lsrs	r1, r0, #16
    3a0e:	4689      	mov	r9, r1
    3a10:	0039      	movs	r1, r7
    3a12:	4449      	add	r1, r9
    3a14:	9102      	str	r1, [sp, #8]
    3a16:	4641      	mov	r1, r8
    3a18:	040f      	lsls	r7, r1, #16
    3a1a:	9904      	ldr	r1, [sp, #16]
    3a1c:	0c3f      	lsrs	r7, r7, #16
    3a1e:	4688      	mov	r8, r1
    3a20:	0400      	lsls	r0, r0, #16
    3a22:	19c0      	adds	r0, r0, r7
    3a24:	4480      	add	r8, r0
    3a26:	4641      	mov	r1, r8
    3a28:	9104      	str	r1, [sp, #16]
    3a2a:	4659      	mov	r1, fp
    3a2c:	0c0f      	lsrs	r7, r1, #16
    3a2e:	0409      	lsls	r1, r1, #16
    3a30:	0c09      	lsrs	r1, r1, #16
    3a32:	4688      	mov	r8, r1
    3a34:	4359      	muls	r1, r3
    3a36:	468a      	mov	sl, r1
    3a38:	0039      	movs	r1, r7
    3a3a:	4351      	muls	r1, r2
    3a3c:	4689      	mov	r9, r1
    3a3e:	4641      	mov	r1, r8
    3a40:	434a      	muls	r2, r1
    3a42:	4651      	mov	r1, sl
    3a44:	0c09      	lsrs	r1, r1, #16
    3a46:	468b      	mov	fp, r1
    3a48:	437b      	muls	r3, r7
    3a4a:	18d2      	adds	r2, r2, r3
    3a4c:	445a      	add	r2, fp
    3a4e:	4293      	cmp	r3, r2
    3a50:	d903      	bls.n	3a5a <__aeabi_dmul+0x2c6>
    3a52:	2380      	movs	r3, #128	; 0x80
    3a54:	025b      	lsls	r3, r3, #9
    3a56:	469b      	mov	fp, r3
    3a58:	44d9      	add	r9, fp
    3a5a:	4651      	mov	r1, sl
    3a5c:	0409      	lsls	r1, r1, #16
    3a5e:	0c09      	lsrs	r1, r1, #16
    3a60:	468a      	mov	sl, r1
    3a62:	4641      	mov	r1, r8
    3a64:	4361      	muls	r1, r4
    3a66:	437c      	muls	r4, r7
    3a68:	0c13      	lsrs	r3, r2, #16
    3a6a:	0412      	lsls	r2, r2, #16
    3a6c:	444b      	add	r3, r9
    3a6e:	4452      	add	r2, sl
    3a70:	46a1      	mov	r9, r4
    3a72:	468a      	mov	sl, r1
    3a74:	003c      	movs	r4, r7
    3a76:	4641      	mov	r1, r8
    3a78:	436c      	muls	r4, r5
    3a7a:	434d      	muls	r5, r1
    3a7c:	4651      	mov	r1, sl
    3a7e:	444d      	add	r5, r9
    3a80:	0c0f      	lsrs	r7, r1, #16
    3a82:	197d      	adds	r5, r7, r5
    3a84:	45a9      	cmp	r9, r5
    3a86:	d903      	bls.n	3a90 <__aeabi_dmul+0x2fc>
    3a88:	2180      	movs	r1, #128	; 0x80
    3a8a:	0249      	lsls	r1, r1, #9
    3a8c:	4688      	mov	r8, r1
    3a8e:	4444      	add	r4, r8
    3a90:	9f04      	ldr	r7, [sp, #16]
    3a92:	9903      	ldr	r1, [sp, #12]
    3a94:	46b8      	mov	r8, r7
    3a96:	4441      	add	r1, r8
    3a98:	468b      	mov	fp, r1
    3a9a:	4583      	cmp	fp, r0
    3a9c:	4180      	sbcs	r0, r0
    3a9e:	4241      	negs	r1, r0
    3aa0:	4688      	mov	r8, r1
    3aa2:	4651      	mov	r1, sl
    3aa4:	0408      	lsls	r0, r1, #16
    3aa6:	042f      	lsls	r7, r5, #16
    3aa8:	0c00      	lsrs	r0, r0, #16
    3aaa:	183f      	adds	r7, r7, r0
    3aac:	4658      	mov	r0, fp
    3aae:	9902      	ldr	r1, [sp, #8]
    3ab0:	1810      	adds	r0, r2, r0
    3ab2:	4689      	mov	r9, r1
    3ab4:	4290      	cmp	r0, r2
    3ab6:	4192      	sbcs	r2, r2
    3ab8:	444f      	add	r7, r9
    3aba:	46ba      	mov	sl, r7
    3abc:	4252      	negs	r2, r2
    3abe:	4699      	mov	r9, r3
    3ac0:	4693      	mov	fp, r2
    3ac2:	44c2      	add	sl, r8
    3ac4:	44d1      	add	r9, sl
    3ac6:	44cb      	add	fp, r9
    3ac8:	428f      	cmp	r7, r1
    3aca:	41bf      	sbcs	r7, r7
    3acc:	45c2      	cmp	sl, r8
    3ace:	4189      	sbcs	r1, r1
    3ad0:	4599      	cmp	r9, r3
    3ad2:	419b      	sbcs	r3, r3
    3ad4:	4593      	cmp	fp, r2
    3ad6:	4192      	sbcs	r2, r2
    3ad8:	427f      	negs	r7, r7
    3ada:	4249      	negs	r1, r1
    3adc:	0c2d      	lsrs	r5, r5, #16
    3ade:	4252      	negs	r2, r2
    3ae0:	430f      	orrs	r7, r1
    3ae2:	425b      	negs	r3, r3
    3ae4:	4313      	orrs	r3, r2
    3ae6:	197f      	adds	r7, r7, r5
    3ae8:	18ff      	adds	r7, r7, r3
    3aea:	465b      	mov	r3, fp
    3aec:	193c      	adds	r4, r7, r4
    3aee:	0ddb      	lsrs	r3, r3, #23
    3af0:	9a05      	ldr	r2, [sp, #20]
    3af2:	0264      	lsls	r4, r4, #9
    3af4:	431c      	orrs	r4, r3
    3af6:	0243      	lsls	r3, r0, #9
    3af8:	4313      	orrs	r3, r2
    3afa:	1e5d      	subs	r5, r3, #1
    3afc:	41ab      	sbcs	r3, r5
    3afe:	465a      	mov	r2, fp
    3b00:	0dc0      	lsrs	r0, r0, #23
    3b02:	4303      	orrs	r3, r0
    3b04:	0252      	lsls	r2, r2, #9
    3b06:	4313      	orrs	r3, r2
    3b08:	01e2      	lsls	r2, r4, #7
    3b0a:	d556      	bpl.n	3bba <__aeabi_dmul+0x426>
    3b0c:	2001      	movs	r0, #1
    3b0e:	085a      	lsrs	r2, r3, #1
    3b10:	4003      	ands	r3, r0
    3b12:	4313      	orrs	r3, r2
    3b14:	07e2      	lsls	r2, r4, #31
    3b16:	4313      	orrs	r3, r2
    3b18:	0864      	lsrs	r4, r4, #1
    3b1a:	485a      	ldr	r0, [pc, #360]	; (3c84 <__aeabi_dmul+0x4f0>)
    3b1c:	4460      	add	r0, ip
    3b1e:	2800      	cmp	r0, #0
    3b20:	dd4d      	ble.n	3bbe <__aeabi_dmul+0x42a>
    3b22:	075a      	lsls	r2, r3, #29
    3b24:	d009      	beq.n	3b3a <__aeabi_dmul+0x3a6>
    3b26:	220f      	movs	r2, #15
    3b28:	401a      	ands	r2, r3
    3b2a:	2a04      	cmp	r2, #4
    3b2c:	d005      	beq.n	3b3a <__aeabi_dmul+0x3a6>
    3b2e:	1d1a      	adds	r2, r3, #4
    3b30:	429a      	cmp	r2, r3
    3b32:	419b      	sbcs	r3, r3
    3b34:	425b      	negs	r3, r3
    3b36:	18e4      	adds	r4, r4, r3
    3b38:	0013      	movs	r3, r2
    3b3a:	01e2      	lsls	r2, r4, #7
    3b3c:	d504      	bpl.n	3b48 <__aeabi_dmul+0x3b4>
    3b3e:	2080      	movs	r0, #128	; 0x80
    3b40:	4a51      	ldr	r2, [pc, #324]	; (3c88 <__aeabi_dmul+0x4f4>)
    3b42:	00c0      	lsls	r0, r0, #3
    3b44:	4014      	ands	r4, r2
    3b46:	4460      	add	r0, ip
    3b48:	4a50      	ldr	r2, [pc, #320]	; (3c8c <__aeabi_dmul+0x4f8>)
    3b4a:	4290      	cmp	r0, r2
    3b4c:	dd00      	ble.n	3b50 <__aeabi_dmul+0x3bc>
    3b4e:	e6e3      	b.n	3918 <__aeabi_dmul+0x184>
    3b50:	2501      	movs	r5, #1
    3b52:	08db      	lsrs	r3, r3, #3
    3b54:	0762      	lsls	r2, r4, #29
    3b56:	431a      	orrs	r2, r3
    3b58:	0264      	lsls	r4, r4, #9
    3b5a:	9b01      	ldr	r3, [sp, #4]
    3b5c:	4691      	mov	r9, r2
    3b5e:	0b22      	lsrs	r2, r4, #12
    3b60:	0544      	lsls	r4, r0, #21
    3b62:	0d64      	lsrs	r4, r4, #21
    3b64:	401d      	ands	r5, r3
    3b66:	e67c      	b.n	3862 <__aeabi_dmul+0xce>
    3b68:	2280      	movs	r2, #128	; 0x80
    3b6a:	4659      	mov	r1, fp
    3b6c:	0312      	lsls	r2, r2, #12
    3b6e:	4211      	tst	r1, r2
    3b70:	d008      	beq.n	3b84 <__aeabi_dmul+0x3f0>
    3b72:	4214      	tst	r4, r2
    3b74:	d106      	bne.n	3b84 <__aeabi_dmul+0x3f0>
    3b76:	4322      	orrs	r2, r4
    3b78:	0312      	lsls	r2, r2, #12
    3b7a:	0b12      	lsrs	r2, r2, #12
    3b7c:	4645      	mov	r5, r8
    3b7e:	4699      	mov	r9, r3
    3b80:	4c43      	ldr	r4, [pc, #268]	; (3c90 <__aeabi_dmul+0x4fc>)
    3b82:	e66e      	b.n	3862 <__aeabi_dmul+0xce>
    3b84:	465b      	mov	r3, fp
    3b86:	431a      	orrs	r2, r3
    3b88:	0312      	lsls	r2, r2, #12
    3b8a:	0b12      	lsrs	r2, r2, #12
    3b8c:	4c40      	ldr	r4, [pc, #256]	; (3c90 <__aeabi_dmul+0x4fc>)
    3b8e:	e668      	b.n	3862 <__aeabi_dmul+0xce>
    3b90:	0003      	movs	r3, r0
    3b92:	4654      	mov	r4, sl
    3b94:	3b28      	subs	r3, #40	; 0x28
    3b96:	409c      	lsls	r4, r3
    3b98:	2300      	movs	r3, #0
    3b9a:	e6b9      	b.n	3910 <__aeabi_dmul+0x17c>
    3b9c:	f000 fc6e 	bl	447c <__clzsi2>
    3ba0:	3020      	adds	r0, #32
    3ba2:	e6a6      	b.n	38f2 <__aeabi_dmul+0x15e>
    3ba4:	0003      	movs	r3, r0
    3ba6:	3b28      	subs	r3, #40	; 0x28
    3ba8:	409f      	lsls	r7, r3
    3baa:	2300      	movs	r3, #0
    3bac:	46bb      	mov	fp, r7
    3bae:	4699      	mov	r9, r3
    3bb0:	e68a      	b.n	38c8 <__aeabi_dmul+0x134>
    3bb2:	f000 fc63 	bl	447c <__clzsi2>
    3bb6:	3020      	adds	r0, #32
    3bb8:	e674      	b.n	38a4 <__aeabi_dmul+0x110>
    3bba:	46b4      	mov	ip, r6
    3bbc:	e7ad      	b.n	3b1a <__aeabi_dmul+0x386>
    3bbe:	2501      	movs	r5, #1
    3bc0:	1a2a      	subs	r2, r5, r0
    3bc2:	2a38      	cmp	r2, #56	; 0x38
    3bc4:	dd06      	ble.n	3bd4 <__aeabi_dmul+0x440>
    3bc6:	9b01      	ldr	r3, [sp, #4]
    3bc8:	2400      	movs	r4, #0
    3bca:	401d      	ands	r5, r3
    3bcc:	2300      	movs	r3, #0
    3bce:	2200      	movs	r2, #0
    3bd0:	4699      	mov	r9, r3
    3bd2:	e646      	b.n	3862 <__aeabi_dmul+0xce>
    3bd4:	2a1f      	cmp	r2, #31
    3bd6:	dc21      	bgt.n	3c1c <__aeabi_dmul+0x488>
    3bd8:	2520      	movs	r5, #32
    3bda:	0020      	movs	r0, r4
    3bdc:	1aad      	subs	r5, r5, r2
    3bde:	001e      	movs	r6, r3
    3be0:	40ab      	lsls	r3, r5
    3be2:	40a8      	lsls	r0, r5
    3be4:	40d6      	lsrs	r6, r2
    3be6:	1e5d      	subs	r5, r3, #1
    3be8:	41ab      	sbcs	r3, r5
    3bea:	4330      	orrs	r0, r6
    3bec:	4318      	orrs	r0, r3
    3bee:	40d4      	lsrs	r4, r2
    3bf0:	0743      	lsls	r3, r0, #29
    3bf2:	d009      	beq.n	3c08 <__aeabi_dmul+0x474>
    3bf4:	230f      	movs	r3, #15
    3bf6:	4003      	ands	r3, r0
    3bf8:	2b04      	cmp	r3, #4
    3bfa:	d005      	beq.n	3c08 <__aeabi_dmul+0x474>
    3bfc:	0003      	movs	r3, r0
    3bfe:	1d18      	adds	r0, r3, #4
    3c00:	4298      	cmp	r0, r3
    3c02:	419b      	sbcs	r3, r3
    3c04:	425b      	negs	r3, r3
    3c06:	18e4      	adds	r4, r4, r3
    3c08:	0223      	lsls	r3, r4, #8
    3c0a:	d521      	bpl.n	3c50 <__aeabi_dmul+0x4bc>
    3c0c:	2501      	movs	r5, #1
    3c0e:	9b01      	ldr	r3, [sp, #4]
    3c10:	2401      	movs	r4, #1
    3c12:	401d      	ands	r5, r3
    3c14:	2300      	movs	r3, #0
    3c16:	2200      	movs	r2, #0
    3c18:	4699      	mov	r9, r3
    3c1a:	e622      	b.n	3862 <__aeabi_dmul+0xce>
    3c1c:	251f      	movs	r5, #31
    3c1e:	0021      	movs	r1, r4
    3c20:	426d      	negs	r5, r5
    3c22:	1a28      	subs	r0, r5, r0
    3c24:	40c1      	lsrs	r1, r0
    3c26:	0008      	movs	r0, r1
    3c28:	2a20      	cmp	r2, #32
    3c2a:	d01d      	beq.n	3c68 <__aeabi_dmul+0x4d4>
    3c2c:	355f      	adds	r5, #95	; 0x5f
    3c2e:	1aaa      	subs	r2, r5, r2
    3c30:	4094      	lsls	r4, r2
    3c32:	4323      	orrs	r3, r4
    3c34:	1e5c      	subs	r4, r3, #1
    3c36:	41a3      	sbcs	r3, r4
    3c38:	2507      	movs	r5, #7
    3c3a:	4303      	orrs	r3, r0
    3c3c:	401d      	ands	r5, r3
    3c3e:	2200      	movs	r2, #0
    3c40:	2d00      	cmp	r5, #0
    3c42:	d009      	beq.n	3c58 <__aeabi_dmul+0x4c4>
    3c44:	220f      	movs	r2, #15
    3c46:	2400      	movs	r4, #0
    3c48:	401a      	ands	r2, r3
    3c4a:	0018      	movs	r0, r3
    3c4c:	2a04      	cmp	r2, #4
    3c4e:	d1d6      	bne.n	3bfe <__aeabi_dmul+0x46a>
    3c50:	0003      	movs	r3, r0
    3c52:	0765      	lsls	r5, r4, #29
    3c54:	0264      	lsls	r4, r4, #9
    3c56:	0b22      	lsrs	r2, r4, #12
    3c58:	08db      	lsrs	r3, r3, #3
    3c5a:	432b      	orrs	r3, r5
    3c5c:	2501      	movs	r5, #1
    3c5e:	4699      	mov	r9, r3
    3c60:	9b01      	ldr	r3, [sp, #4]
    3c62:	2400      	movs	r4, #0
    3c64:	401d      	ands	r5, r3
    3c66:	e5fc      	b.n	3862 <__aeabi_dmul+0xce>
    3c68:	2400      	movs	r4, #0
    3c6a:	e7e2      	b.n	3c32 <__aeabi_dmul+0x49e>
    3c6c:	2280      	movs	r2, #128	; 0x80
    3c6e:	2501      	movs	r5, #1
    3c70:	0312      	lsls	r2, r2, #12
    3c72:	4322      	orrs	r2, r4
    3c74:	9901      	ldr	r1, [sp, #4]
    3c76:	0312      	lsls	r2, r2, #12
    3c78:	0b12      	lsrs	r2, r2, #12
    3c7a:	400d      	ands	r5, r1
    3c7c:	4699      	mov	r9, r3
    3c7e:	4c04      	ldr	r4, [pc, #16]	; (3c90 <__aeabi_dmul+0x4fc>)
    3c80:	e5ef      	b.n	3862 <__aeabi_dmul+0xce>
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	000003ff 	.word	0x000003ff
    3c88:	feffffff 	.word	0xfeffffff
    3c8c:	000007fe 	.word	0x000007fe
    3c90:	000007ff 	.word	0x000007ff

00003c94 <__aeabi_dsub>:
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	4646      	mov	r6, r8
    3c98:	46d6      	mov	lr, sl
    3c9a:	464f      	mov	r7, r9
    3c9c:	030c      	lsls	r4, r1, #12
    3c9e:	b5c0      	push	{r6, r7, lr}
    3ca0:	0fcd      	lsrs	r5, r1, #31
    3ca2:	004e      	lsls	r6, r1, #1
    3ca4:	0a61      	lsrs	r1, r4, #9
    3ca6:	0f44      	lsrs	r4, r0, #29
    3ca8:	430c      	orrs	r4, r1
    3caa:	00c1      	lsls	r1, r0, #3
    3cac:	0058      	lsls	r0, r3, #1
    3cae:	0d40      	lsrs	r0, r0, #21
    3cb0:	4684      	mov	ip, r0
    3cb2:	468a      	mov	sl, r1
    3cb4:	000f      	movs	r7, r1
    3cb6:	0319      	lsls	r1, r3, #12
    3cb8:	0f50      	lsrs	r0, r2, #29
    3cba:	0a49      	lsrs	r1, r1, #9
    3cbc:	4301      	orrs	r1, r0
    3cbe:	48c6      	ldr	r0, [pc, #792]	; (3fd8 <__aeabi_dsub+0x344>)
    3cc0:	0d76      	lsrs	r6, r6, #21
    3cc2:	46a8      	mov	r8, r5
    3cc4:	0fdb      	lsrs	r3, r3, #31
    3cc6:	00d2      	lsls	r2, r2, #3
    3cc8:	4584      	cmp	ip, r0
    3cca:	d100      	bne.n	3cce <__aeabi_dsub+0x3a>
    3ccc:	e0d8      	b.n	3e80 <__aeabi_dsub+0x1ec>
    3cce:	2001      	movs	r0, #1
    3cd0:	4043      	eors	r3, r0
    3cd2:	42ab      	cmp	r3, r5
    3cd4:	d100      	bne.n	3cd8 <__aeabi_dsub+0x44>
    3cd6:	e0a6      	b.n	3e26 <__aeabi_dsub+0x192>
    3cd8:	4660      	mov	r0, ip
    3cda:	1a35      	subs	r5, r6, r0
    3cdc:	2d00      	cmp	r5, #0
    3cde:	dc00      	bgt.n	3ce2 <__aeabi_dsub+0x4e>
    3ce0:	e105      	b.n	3eee <__aeabi_dsub+0x25a>
    3ce2:	2800      	cmp	r0, #0
    3ce4:	d110      	bne.n	3d08 <__aeabi_dsub+0x74>
    3ce6:	000b      	movs	r3, r1
    3ce8:	4313      	orrs	r3, r2
    3cea:	d100      	bne.n	3cee <__aeabi_dsub+0x5a>
    3cec:	e0d7      	b.n	3e9e <__aeabi_dsub+0x20a>
    3cee:	1e6b      	subs	r3, r5, #1
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d000      	beq.n	3cf6 <__aeabi_dsub+0x62>
    3cf4:	e14b      	b.n	3f8e <__aeabi_dsub+0x2fa>
    3cf6:	4653      	mov	r3, sl
    3cf8:	1a9f      	subs	r7, r3, r2
    3cfa:	45ba      	cmp	sl, r7
    3cfc:	4180      	sbcs	r0, r0
    3cfe:	1a64      	subs	r4, r4, r1
    3d00:	4240      	negs	r0, r0
    3d02:	1a24      	subs	r4, r4, r0
    3d04:	2601      	movs	r6, #1
    3d06:	e01e      	b.n	3d46 <__aeabi_dsub+0xb2>
    3d08:	4bb3      	ldr	r3, [pc, #716]	; (3fd8 <__aeabi_dsub+0x344>)
    3d0a:	429e      	cmp	r6, r3
    3d0c:	d048      	beq.n	3da0 <__aeabi_dsub+0x10c>
    3d0e:	2380      	movs	r3, #128	; 0x80
    3d10:	041b      	lsls	r3, r3, #16
    3d12:	4319      	orrs	r1, r3
    3d14:	2d38      	cmp	r5, #56	; 0x38
    3d16:	dd00      	ble.n	3d1a <__aeabi_dsub+0x86>
    3d18:	e119      	b.n	3f4e <__aeabi_dsub+0x2ba>
    3d1a:	2d1f      	cmp	r5, #31
    3d1c:	dd00      	ble.n	3d20 <__aeabi_dsub+0x8c>
    3d1e:	e14c      	b.n	3fba <__aeabi_dsub+0x326>
    3d20:	2320      	movs	r3, #32
    3d22:	000f      	movs	r7, r1
    3d24:	1b5b      	subs	r3, r3, r5
    3d26:	0010      	movs	r0, r2
    3d28:	409a      	lsls	r2, r3
    3d2a:	409f      	lsls	r7, r3
    3d2c:	40e8      	lsrs	r0, r5
    3d2e:	1e53      	subs	r3, r2, #1
    3d30:	419a      	sbcs	r2, r3
    3d32:	40e9      	lsrs	r1, r5
    3d34:	4307      	orrs	r7, r0
    3d36:	4317      	orrs	r7, r2
    3d38:	4653      	mov	r3, sl
    3d3a:	1bdf      	subs	r7, r3, r7
    3d3c:	1a61      	subs	r1, r4, r1
    3d3e:	45ba      	cmp	sl, r7
    3d40:	41a4      	sbcs	r4, r4
    3d42:	4264      	negs	r4, r4
    3d44:	1b0c      	subs	r4, r1, r4
    3d46:	0223      	lsls	r3, r4, #8
    3d48:	d400      	bmi.n	3d4c <__aeabi_dsub+0xb8>
    3d4a:	e0c5      	b.n	3ed8 <__aeabi_dsub+0x244>
    3d4c:	0264      	lsls	r4, r4, #9
    3d4e:	0a65      	lsrs	r5, r4, #9
    3d50:	2d00      	cmp	r5, #0
    3d52:	d100      	bne.n	3d56 <__aeabi_dsub+0xc2>
    3d54:	e0f6      	b.n	3f44 <__aeabi_dsub+0x2b0>
    3d56:	0028      	movs	r0, r5
    3d58:	f000 fb90 	bl	447c <__clzsi2>
    3d5c:	0003      	movs	r3, r0
    3d5e:	3b08      	subs	r3, #8
    3d60:	2b1f      	cmp	r3, #31
    3d62:	dd00      	ble.n	3d66 <__aeabi_dsub+0xd2>
    3d64:	e0e9      	b.n	3f3a <__aeabi_dsub+0x2a6>
    3d66:	2220      	movs	r2, #32
    3d68:	003c      	movs	r4, r7
    3d6a:	1ad2      	subs	r2, r2, r3
    3d6c:	409d      	lsls	r5, r3
    3d6e:	40d4      	lsrs	r4, r2
    3d70:	409f      	lsls	r7, r3
    3d72:	4325      	orrs	r5, r4
    3d74:	429e      	cmp	r6, r3
    3d76:	dd00      	ble.n	3d7a <__aeabi_dsub+0xe6>
    3d78:	e0db      	b.n	3f32 <__aeabi_dsub+0x29e>
    3d7a:	1b9e      	subs	r6, r3, r6
    3d7c:	1c73      	adds	r3, r6, #1
    3d7e:	2b1f      	cmp	r3, #31
    3d80:	dd00      	ble.n	3d84 <__aeabi_dsub+0xf0>
    3d82:	e10a      	b.n	3f9a <__aeabi_dsub+0x306>
    3d84:	2220      	movs	r2, #32
    3d86:	0038      	movs	r0, r7
    3d88:	1ad2      	subs	r2, r2, r3
    3d8a:	0029      	movs	r1, r5
    3d8c:	4097      	lsls	r7, r2
    3d8e:	002c      	movs	r4, r5
    3d90:	4091      	lsls	r1, r2
    3d92:	40d8      	lsrs	r0, r3
    3d94:	1e7a      	subs	r2, r7, #1
    3d96:	4197      	sbcs	r7, r2
    3d98:	40dc      	lsrs	r4, r3
    3d9a:	2600      	movs	r6, #0
    3d9c:	4301      	orrs	r1, r0
    3d9e:	430f      	orrs	r7, r1
    3da0:	077b      	lsls	r3, r7, #29
    3da2:	d009      	beq.n	3db8 <__aeabi_dsub+0x124>
    3da4:	230f      	movs	r3, #15
    3da6:	403b      	ands	r3, r7
    3da8:	2b04      	cmp	r3, #4
    3daa:	d005      	beq.n	3db8 <__aeabi_dsub+0x124>
    3dac:	1d3b      	adds	r3, r7, #4
    3dae:	42bb      	cmp	r3, r7
    3db0:	41bf      	sbcs	r7, r7
    3db2:	427f      	negs	r7, r7
    3db4:	19e4      	adds	r4, r4, r7
    3db6:	001f      	movs	r7, r3
    3db8:	0223      	lsls	r3, r4, #8
    3dba:	d525      	bpl.n	3e08 <__aeabi_dsub+0x174>
    3dbc:	4b86      	ldr	r3, [pc, #536]	; (3fd8 <__aeabi_dsub+0x344>)
    3dbe:	3601      	adds	r6, #1
    3dc0:	429e      	cmp	r6, r3
    3dc2:	d100      	bne.n	3dc6 <__aeabi_dsub+0x132>
    3dc4:	e0af      	b.n	3f26 <__aeabi_dsub+0x292>
    3dc6:	4b85      	ldr	r3, [pc, #532]	; (3fdc <__aeabi_dsub+0x348>)
    3dc8:	2501      	movs	r5, #1
    3dca:	401c      	ands	r4, r3
    3dcc:	4643      	mov	r3, r8
    3dce:	0762      	lsls	r2, r4, #29
    3dd0:	08ff      	lsrs	r7, r7, #3
    3dd2:	0264      	lsls	r4, r4, #9
    3dd4:	0576      	lsls	r6, r6, #21
    3dd6:	4317      	orrs	r7, r2
    3dd8:	0b24      	lsrs	r4, r4, #12
    3dda:	0d76      	lsrs	r6, r6, #21
    3ddc:	401d      	ands	r5, r3
    3dde:	2100      	movs	r1, #0
    3de0:	0324      	lsls	r4, r4, #12
    3de2:	0b23      	lsrs	r3, r4, #12
    3de4:	0d0c      	lsrs	r4, r1, #20
    3de6:	4a7e      	ldr	r2, [pc, #504]	; (3fe0 <__aeabi_dsub+0x34c>)
    3de8:	0524      	lsls	r4, r4, #20
    3dea:	431c      	orrs	r4, r3
    3dec:	4014      	ands	r4, r2
    3dee:	0533      	lsls	r3, r6, #20
    3df0:	4323      	orrs	r3, r4
    3df2:	005b      	lsls	r3, r3, #1
    3df4:	07ed      	lsls	r5, r5, #31
    3df6:	085b      	lsrs	r3, r3, #1
    3df8:	432b      	orrs	r3, r5
    3dfa:	0038      	movs	r0, r7
    3dfc:	0019      	movs	r1, r3
    3dfe:	bc1c      	pop	{r2, r3, r4}
    3e00:	4690      	mov	r8, r2
    3e02:	4699      	mov	r9, r3
    3e04:	46a2      	mov	sl, r4
    3e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e08:	2501      	movs	r5, #1
    3e0a:	4643      	mov	r3, r8
    3e0c:	0762      	lsls	r2, r4, #29
    3e0e:	08ff      	lsrs	r7, r7, #3
    3e10:	4317      	orrs	r7, r2
    3e12:	08e4      	lsrs	r4, r4, #3
    3e14:	401d      	ands	r5, r3
    3e16:	4b70      	ldr	r3, [pc, #448]	; (3fd8 <__aeabi_dsub+0x344>)
    3e18:	429e      	cmp	r6, r3
    3e1a:	d036      	beq.n	3e8a <__aeabi_dsub+0x1f6>
    3e1c:	0324      	lsls	r4, r4, #12
    3e1e:	0576      	lsls	r6, r6, #21
    3e20:	0b24      	lsrs	r4, r4, #12
    3e22:	0d76      	lsrs	r6, r6, #21
    3e24:	e7db      	b.n	3dde <__aeabi_dsub+0x14a>
    3e26:	4663      	mov	r3, ip
    3e28:	1af3      	subs	r3, r6, r3
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	dc00      	bgt.n	3e30 <__aeabi_dsub+0x19c>
    3e2e:	e094      	b.n	3f5a <__aeabi_dsub+0x2c6>
    3e30:	4660      	mov	r0, ip
    3e32:	2800      	cmp	r0, #0
    3e34:	d035      	beq.n	3ea2 <__aeabi_dsub+0x20e>
    3e36:	4868      	ldr	r0, [pc, #416]	; (3fd8 <__aeabi_dsub+0x344>)
    3e38:	4286      	cmp	r6, r0
    3e3a:	d0b1      	beq.n	3da0 <__aeabi_dsub+0x10c>
    3e3c:	2780      	movs	r7, #128	; 0x80
    3e3e:	043f      	lsls	r7, r7, #16
    3e40:	4339      	orrs	r1, r7
    3e42:	2b38      	cmp	r3, #56	; 0x38
    3e44:	dc00      	bgt.n	3e48 <__aeabi_dsub+0x1b4>
    3e46:	e0fd      	b.n	4044 <__aeabi_dsub+0x3b0>
    3e48:	430a      	orrs	r2, r1
    3e4a:	0017      	movs	r7, r2
    3e4c:	2100      	movs	r1, #0
    3e4e:	1e7a      	subs	r2, r7, #1
    3e50:	4197      	sbcs	r7, r2
    3e52:	4457      	add	r7, sl
    3e54:	4557      	cmp	r7, sl
    3e56:	4180      	sbcs	r0, r0
    3e58:	1909      	adds	r1, r1, r4
    3e5a:	4244      	negs	r4, r0
    3e5c:	190c      	adds	r4, r1, r4
    3e5e:	0223      	lsls	r3, r4, #8
    3e60:	d53a      	bpl.n	3ed8 <__aeabi_dsub+0x244>
    3e62:	4b5d      	ldr	r3, [pc, #372]	; (3fd8 <__aeabi_dsub+0x344>)
    3e64:	3601      	adds	r6, #1
    3e66:	429e      	cmp	r6, r3
    3e68:	d100      	bne.n	3e6c <__aeabi_dsub+0x1d8>
    3e6a:	e14b      	b.n	4104 <__aeabi_dsub+0x470>
    3e6c:	2201      	movs	r2, #1
    3e6e:	4b5b      	ldr	r3, [pc, #364]	; (3fdc <__aeabi_dsub+0x348>)
    3e70:	401c      	ands	r4, r3
    3e72:	087b      	lsrs	r3, r7, #1
    3e74:	4017      	ands	r7, r2
    3e76:	431f      	orrs	r7, r3
    3e78:	07e2      	lsls	r2, r4, #31
    3e7a:	4317      	orrs	r7, r2
    3e7c:	0864      	lsrs	r4, r4, #1
    3e7e:	e78f      	b.n	3da0 <__aeabi_dsub+0x10c>
    3e80:	0008      	movs	r0, r1
    3e82:	4310      	orrs	r0, r2
    3e84:	d000      	beq.n	3e88 <__aeabi_dsub+0x1f4>
    3e86:	e724      	b.n	3cd2 <__aeabi_dsub+0x3e>
    3e88:	e721      	b.n	3cce <__aeabi_dsub+0x3a>
    3e8a:	0023      	movs	r3, r4
    3e8c:	433b      	orrs	r3, r7
    3e8e:	d100      	bne.n	3e92 <__aeabi_dsub+0x1fe>
    3e90:	e1b9      	b.n	4206 <__aeabi_dsub+0x572>
    3e92:	2280      	movs	r2, #128	; 0x80
    3e94:	0312      	lsls	r2, r2, #12
    3e96:	4314      	orrs	r4, r2
    3e98:	0324      	lsls	r4, r4, #12
    3e9a:	0b24      	lsrs	r4, r4, #12
    3e9c:	e79f      	b.n	3dde <__aeabi_dsub+0x14a>
    3e9e:	002e      	movs	r6, r5
    3ea0:	e77e      	b.n	3da0 <__aeabi_dsub+0x10c>
    3ea2:	0008      	movs	r0, r1
    3ea4:	4310      	orrs	r0, r2
    3ea6:	d100      	bne.n	3eaa <__aeabi_dsub+0x216>
    3ea8:	e0ca      	b.n	4040 <__aeabi_dsub+0x3ac>
    3eaa:	1e58      	subs	r0, r3, #1
    3eac:	4684      	mov	ip, r0
    3eae:	2800      	cmp	r0, #0
    3eb0:	d000      	beq.n	3eb4 <__aeabi_dsub+0x220>
    3eb2:	e0e7      	b.n	4084 <__aeabi_dsub+0x3f0>
    3eb4:	4452      	add	r2, sl
    3eb6:	4552      	cmp	r2, sl
    3eb8:	4180      	sbcs	r0, r0
    3eba:	1864      	adds	r4, r4, r1
    3ebc:	4240      	negs	r0, r0
    3ebe:	1824      	adds	r4, r4, r0
    3ec0:	0017      	movs	r7, r2
    3ec2:	2601      	movs	r6, #1
    3ec4:	0223      	lsls	r3, r4, #8
    3ec6:	d507      	bpl.n	3ed8 <__aeabi_dsub+0x244>
    3ec8:	2602      	movs	r6, #2
    3eca:	e7cf      	b.n	3e6c <__aeabi_dsub+0x1d8>
    3ecc:	4664      	mov	r4, ip
    3ece:	432c      	orrs	r4, r5
    3ed0:	d100      	bne.n	3ed4 <__aeabi_dsub+0x240>
    3ed2:	e1b3      	b.n	423c <__aeabi_dsub+0x5a8>
    3ed4:	002c      	movs	r4, r5
    3ed6:	4667      	mov	r7, ip
    3ed8:	077b      	lsls	r3, r7, #29
    3eda:	d000      	beq.n	3ede <__aeabi_dsub+0x24a>
    3edc:	e762      	b.n	3da4 <__aeabi_dsub+0x110>
    3ede:	0763      	lsls	r3, r4, #29
    3ee0:	08ff      	lsrs	r7, r7, #3
    3ee2:	431f      	orrs	r7, r3
    3ee4:	2501      	movs	r5, #1
    3ee6:	4643      	mov	r3, r8
    3ee8:	08e4      	lsrs	r4, r4, #3
    3eea:	401d      	ands	r5, r3
    3eec:	e793      	b.n	3e16 <__aeabi_dsub+0x182>
    3eee:	2d00      	cmp	r5, #0
    3ef0:	d178      	bne.n	3fe4 <__aeabi_dsub+0x350>
    3ef2:	1c75      	adds	r5, r6, #1
    3ef4:	056d      	lsls	r5, r5, #21
    3ef6:	0d6d      	lsrs	r5, r5, #21
    3ef8:	2d01      	cmp	r5, #1
    3efa:	dc00      	bgt.n	3efe <__aeabi_dsub+0x26a>
    3efc:	e0f2      	b.n	40e4 <__aeabi_dsub+0x450>
    3efe:	4650      	mov	r0, sl
    3f00:	1a80      	subs	r0, r0, r2
    3f02:	4582      	cmp	sl, r0
    3f04:	41bf      	sbcs	r7, r7
    3f06:	1a65      	subs	r5, r4, r1
    3f08:	427f      	negs	r7, r7
    3f0a:	1bed      	subs	r5, r5, r7
    3f0c:	4684      	mov	ip, r0
    3f0e:	0228      	lsls	r0, r5, #8
    3f10:	d400      	bmi.n	3f14 <__aeabi_dsub+0x280>
    3f12:	e08c      	b.n	402e <__aeabi_dsub+0x39a>
    3f14:	4650      	mov	r0, sl
    3f16:	1a17      	subs	r7, r2, r0
    3f18:	42ba      	cmp	r2, r7
    3f1a:	4192      	sbcs	r2, r2
    3f1c:	1b0c      	subs	r4, r1, r4
    3f1e:	4255      	negs	r5, r2
    3f20:	1b65      	subs	r5, r4, r5
    3f22:	4698      	mov	r8, r3
    3f24:	e714      	b.n	3d50 <__aeabi_dsub+0xbc>
    3f26:	2501      	movs	r5, #1
    3f28:	4643      	mov	r3, r8
    3f2a:	2400      	movs	r4, #0
    3f2c:	401d      	ands	r5, r3
    3f2e:	2700      	movs	r7, #0
    3f30:	e755      	b.n	3dde <__aeabi_dsub+0x14a>
    3f32:	4c2a      	ldr	r4, [pc, #168]	; (3fdc <__aeabi_dsub+0x348>)
    3f34:	1af6      	subs	r6, r6, r3
    3f36:	402c      	ands	r4, r5
    3f38:	e732      	b.n	3da0 <__aeabi_dsub+0x10c>
    3f3a:	003d      	movs	r5, r7
    3f3c:	3828      	subs	r0, #40	; 0x28
    3f3e:	4085      	lsls	r5, r0
    3f40:	2700      	movs	r7, #0
    3f42:	e717      	b.n	3d74 <__aeabi_dsub+0xe0>
    3f44:	0038      	movs	r0, r7
    3f46:	f000 fa99 	bl	447c <__clzsi2>
    3f4a:	3020      	adds	r0, #32
    3f4c:	e706      	b.n	3d5c <__aeabi_dsub+0xc8>
    3f4e:	430a      	orrs	r2, r1
    3f50:	0017      	movs	r7, r2
    3f52:	2100      	movs	r1, #0
    3f54:	1e7a      	subs	r2, r7, #1
    3f56:	4197      	sbcs	r7, r2
    3f58:	e6ee      	b.n	3d38 <__aeabi_dsub+0xa4>
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	d000      	beq.n	3f60 <__aeabi_dsub+0x2cc>
    3f5e:	e0e5      	b.n	412c <__aeabi_dsub+0x498>
    3f60:	1c73      	adds	r3, r6, #1
    3f62:	469c      	mov	ip, r3
    3f64:	055b      	lsls	r3, r3, #21
    3f66:	0d5b      	lsrs	r3, r3, #21
    3f68:	2b01      	cmp	r3, #1
    3f6a:	dc00      	bgt.n	3f6e <__aeabi_dsub+0x2da>
    3f6c:	e09f      	b.n	40ae <__aeabi_dsub+0x41a>
    3f6e:	4b1a      	ldr	r3, [pc, #104]	; (3fd8 <__aeabi_dsub+0x344>)
    3f70:	459c      	cmp	ip, r3
    3f72:	d100      	bne.n	3f76 <__aeabi_dsub+0x2e2>
    3f74:	e0c5      	b.n	4102 <__aeabi_dsub+0x46e>
    3f76:	4452      	add	r2, sl
    3f78:	4552      	cmp	r2, sl
    3f7a:	4180      	sbcs	r0, r0
    3f7c:	1864      	adds	r4, r4, r1
    3f7e:	4240      	negs	r0, r0
    3f80:	1824      	adds	r4, r4, r0
    3f82:	07e7      	lsls	r7, r4, #31
    3f84:	0852      	lsrs	r2, r2, #1
    3f86:	4317      	orrs	r7, r2
    3f88:	0864      	lsrs	r4, r4, #1
    3f8a:	4666      	mov	r6, ip
    3f8c:	e708      	b.n	3da0 <__aeabi_dsub+0x10c>
    3f8e:	4812      	ldr	r0, [pc, #72]	; (3fd8 <__aeabi_dsub+0x344>)
    3f90:	4285      	cmp	r5, r0
    3f92:	d100      	bne.n	3f96 <__aeabi_dsub+0x302>
    3f94:	e085      	b.n	40a2 <__aeabi_dsub+0x40e>
    3f96:	001d      	movs	r5, r3
    3f98:	e6bc      	b.n	3d14 <__aeabi_dsub+0x80>
    3f9a:	0029      	movs	r1, r5
    3f9c:	3e1f      	subs	r6, #31
    3f9e:	40f1      	lsrs	r1, r6
    3fa0:	2b20      	cmp	r3, #32
    3fa2:	d100      	bne.n	3fa6 <__aeabi_dsub+0x312>
    3fa4:	e07f      	b.n	40a6 <__aeabi_dsub+0x412>
    3fa6:	2240      	movs	r2, #64	; 0x40
    3fa8:	1ad3      	subs	r3, r2, r3
    3faa:	409d      	lsls	r5, r3
    3fac:	432f      	orrs	r7, r5
    3fae:	1e7d      	subs	r5, r7, #1
    3fb0:	41af      	sbcs	r7, r5
    3fb2:	2400      	movs	r4, #0
    3fb4:	430f      	orrs	r7, r1
    3fb6:	2600      	movs	r6, #0
    3fb8:	e78e      	b.n	3ed8 <__aeabi_dsub+0x244>
    3fba:	002b      	movs	r3, r5
    3fbc:	000f      	movs	r7, r1
    3fbe:	3b20      	subs	r3, #32
    3fc0:	40df      	lsrs	r7, r3
    3fc2:	2d20      	cmp	r5, #32
    3fc4:	d071      	beq.n	40aa <__aeabi_dsub+0x416>
    3fc6:	2340      	movs	r3, #64	; 0x40
    3fc8:	1b5d      	subs	r5, r3, r5
    3fca:	40a9      	lsls	r1, r5
    3fcc:	430a      	orrs	r2, r1
    3fce:	1e51      	subs	r1, r2, #1
    3fd0:	418a      	sbcs	r2, r1
    3fd2:	2100      	movs	r1, #0
    3fd4:	4317      	orrs	r7, r2
    3fd6:	e6af      	b.n	3d38 <__aeabi_dsub+0xa4>
    3fd8:	000007ff 	.word	0x000007ff
    3fdc:	ff7fffff 	.word	0xff7fffff
    3fe0:	800fffff 	.word	0x800fffff
    3fe4:	2e00      	cmp	r6, #0
    3fe6:	d03e      	beq.n	4066 <__aeabi_dsub+0x3d2>
    3fe8:	4eb3      	ldr	r6, [pc, #716]	; (42b8 <__aeabi_dsub+0x624>)
    3fea:	45b4      	cmp	ip, r6
    3fec:	d045      	beq.n	407a <__aeabi_dsub+0x3e6>
    3fee:	2680      	movs	r6, #128	; 0x80
    3ff0:	0436      	lsls	r6, r6, #16
    3ff2:	426d      	negs	r5, r5
    3ff4:	4334      	orrs	r4, r6
    3ff6:	2d38      	cmp	r5, #56	; 0x38
    3ff8:	dd00      	ble.n	3ffc <__aeabi_dsub+0x368>
    3ffa:	e0a8      	b.n	414e <__aeabi_dsub+0x4ba>
    3ffc:	2d1f      	cmp	r5, #31
    3ffe:	dd00      	ble.n	4002 <__aeabi_dsub+0x36e>
    4000:	e11f      	b.n	4242 <__aeabi_dsub+0x5ae>
    4002:	2620      	movs	r6, #32
    4004:	0027      	movs	r7, r4
    4006:	4650      	mov	r0, sl
    4008:	1b76      	subs	r6, r6, r5
    400a:	40b7      	lsls	r7, r6
    400c:	40e8      	lsrs	r0, r5
    400e:	4307      	orrs	r7, r0
    4010:	4650      	mov	r0, sl
    4012:	40b0      	lsls	r0, r6
    4014:	1e46      	subs	r6, r0, #1
    4016:	41b0      	sbcs	r0, r6
    4018:	40ec      	lsrs	r4, r5
    401a:	4338      	orrs	r0, r7
    401c:	1a17      	subs	r7, r2, r0
    401e:	42ba      	cmp	r2, r7
    4020:	4192      	sbcs	r2, r2
    4022:	1b0c      	subs	r4, r1, r4
    4024:	4252      	negs	r2, r2
    4026:	1aa4      	subs	r4, r4, r2
    4028:	4666      	mov	r6, ip
    402a:	4698      	mov	r8, r3
    402c:	e68b      	b.n	3d46 <__aeabi_dsub+0xb2>
    402e:	4664      	mov	r4, ip
    4030:	4667      	mov	r7, ip
    4032:	432c      	orrs	r4, r5
    4034:	d000      	beq.n	4038 <__aeabi_dsub+0x3a4>
    4036:	e68b      	b.n	3d50 <__aeabi_dsub+0xbc>
    4038:	2500      	movs	r5, #0
    403a:	2600      	movs	r6, #0
    403c:	2700      	movs	r7, #0
    403e:	e6ea      	b.n	3e16 <__aeabi_dsub+0x182>
    4040:	001e      	movs	r6, r3
    4042:	e6ad      	b.n	3da0 <__aeabi_dsub+0x10c>
    4044:	2b1f      	cmp	r3, #31
    4046:	dc60      	bgt.n	410a <__aeabi_dsub+0x476>
    4048:	2720      	movs	r7, #32
    404a:	1af8      	subs	r0, r7, r3
    404c:	000f      	movs	r7, r1
    404e:	4684      	mov	ip, r0
    4050:	4087      	lsls	r7, r0
    4052:	0010      	movs	r0, r2
    4054:	40d8      	lsrs	r0, r3
    4056:	4307      	orrs	r7, r0
    4058:	4660      	mov	r0, ip
    405a:	4082      	lsls	r2, r0
    405c:	1e50      	subs	r0, r2, #1
    405e:	4182      	sbcs	r2, r0
    4060:	40d9      	lsrs	r1, r3
    4062:	4317      	orrs	r7, r2
    4064:	e6f5      	b.n	3e52 <__aeabi_dsub+0x1be>
    4066:	0026      	movs	r6, r4
    4068:	4650      	mov	r0, sl
    406a:	4306      	orrs	r6, r0
    406c:	d005      	beq.n	407a <__aeabi_dsub+0x3e6>
    406e:	43ed      	mvns	r5, r5
    4070:	2d00      	cmp	r5, #0
    4072:	d0d3      	beq.n	401c <__aeabi_dsub+0x388>
    4074:	4e90      	ldr	r6, [pc, #576]	; (42b8 <__aeabi_dsub+0x624>)
    4076:	45b4      	cmp	ip, r6
    4078:	d1bd      	bne.n	3ff6 <__aeabi_dsub+0x362>
    407a:	000c      	movs	r4, r1
    407c:	0017      	movs	r7, r2
    407e:	4666      	mov	r6, ip
    4080:	4698      	mov	r8, r3
    4082:	e68d      	b.n	3da0 <__aeabi_dsub+0x10c>
    4084:	488c      	ldr	r0, [pc, #560]	; (42b8 <__aeabi_dsub+0x624>)
    4086:	4283      	cmp	r3, r0
    4088:	d00b      	beq.n	40a2 <__aeabi_dsub+0x40e>
    408a:	4663      	mov	r3, ip
    408c:	e6d9      	b.n	3e42 <__aeabi_dsub+0x1ae>
    408e:	2d00      	cmp	r5, #0
    4090:	d000      	beq.n	4094 <__aeabi_dsub+0x400>
    4092:	e096      	b.n	41c2 <__aeabi_dsub+0x52e>
    4094:	0008      	movs	r0, r1
    4096:	4310      	orrs	r0, r2
    4098:	d100      	bne.n	409c <__aeabi_dsub+0x408>
    409a:	e0e2      	b.n	4262 <__aeabi_dsub+0x5ce>
    409c:	000c      	movs	r4, r1
    409e:	0017      	movs	r7, r2
    40a0:	4698      	mov	r8, r3
    40a2:	4e85      	ldr	r6, [pc, #532]	; (42b8 <__aeabi_dsub+0x624>)
    40a4:	e67c      	b.n	3da0 <__aeabi_dsub+0x10c>
    40a6:	2500      	movs	r5, #0
    40a8:	e780      	b.n	3fac <__aeabi_dsub+0x318>
    40aa:	2100      	movs	r1, #0
    40ac:	e78e      	b.n	3fcc <__aeabi_dsub+0x338>
    40ae:	0023      	movs	r3, r4
    40b0:	4650      	mov	r0, sl
    40b2:	4303      	orrs	r3, r0
    40b4:	2e00      	cmp	r6, #0
    40b6:	d000      	beq.n	40ba <__aeabi_dsub+0x426>
    40b8:	e0a8      	b.n	420c <__aeabi_dsub+0x578>
    40ba:	2b00      	cmp	r3, #0
    40bc:	d100      	bne.n	40c0 <__aeabi_dsub+0x42c>
    40be:	e0de      	b.n	427e <__aeabi_dsub+0x5ea>
    40c0:	000b      	movs	r3, r1
    40c2:	4313      	orrs	r3, r2
    40c4:	d100      	bne.n	40c8 <__aeabi_dsub+0x434>
    40c6:	e66b      	b.n	3da0 <__aeabi_dsub+0x10c>
    40c8:	4452      	add	r2, sl
    40ca:	4552      	cmp	r2, sl
    40cc:	4180      	sbcs	r0, r0
    40ce:	1864      	adds	r4, r4, r1
    40d0:	4240      	negs	r0, r0
    40d2:	1824      	adds	r4, r4, r0
    40d4:	0017      	movs	r7, r2
    40d6:	0223      	lsls	r3, r4, #8
    40d8:	d400      	bmi.n	40dc <__aeabi_dsub+0x448>
    40da:	e6fd      	b.n	3ed8 <__aeabi_dsub+0x244>
    40dc:	4b77      	ldr	r3, [pc, #476]	; (42bc <__aeabi_dsub+0x628>)
    40de:	4666      	mov	r6, ip
    40e0:	401c      	ands	r4, r3
    40e2:	e65d      	b.n	3da0 <__aeabi_dsub+0x10c>
    40e4:	0025      	movs	r5, r4
    40e6:	4650      	mov	r0, sl
    40e8:	4305      	orrs	r5, r0
    40ea:	2e00      	cmp	r6, #0
    40ec:	d1cf      	bne.n	408e <__aeabi_dsub+0x3fa>
    40ee:	2d00      	cmp	r5, #0
    40f0:	d14f      	bne.n	4192 <__aeabi_dsub+0x4fe>
    40f2:	000c      	movs	r4, r1
    40f4:	4314      	orrs	r4, r2
    40f6:	d100      	bne.n	40fa <__aeabi_dsub+0x466>
    40f8:	e0a0      	b.n	423c <__aeabi_dsub+0x5a8>
    40fa:	000c      	movs	r4, r1
    40fc:	0017      	movs	r7, r2
    40fe:	4698      	mov	r8, r3
    4100:	e64e      	b.n	3da0 <__aeabi_dsub+0x10c>
    4102:	4666      	mov	r6, ip
    4104:	2400      	movs	r4, #0
    4106:	2700      	movs	r7, #0
    4108:	e685      	b.n	3e16 <__aeabi_dsub+0x182>
    410a:	001f      	movs	r7, r3
    410c:	0008      	movs	r0, r1
    410e:	3f20      	subs	r7, #32
    4110:	40f8      	lsrs	r0, r7
    4112:	0007      	movs	r7, r0
    4114:	2b20      	cmp	r3, #32
    4116:	d100      	bne.n	411a <__aeabi_dsub+0x486>
    4118:	e08e      	b.n	4238 <__aeabi_dsub+0x5a4>
    411a:	2040      	movs	r0, #64	; 0x40
    411c:	1ac3      	subs	r3, r0, r3
    411e:	4099      	lsls	r1, r3
    4120:	430a      	orrs	r2, r1
    4122:	1e51      	subs	r1, r2, #1
    4124:	418a      	sbcs	r2, r1
    4126:	2100      	movs	r1, #0
    4128:	4317      	orrs	r7, r2
    412a:	e692      	b.n	3e52 <__aeabi_dsub+0x1be>
    412c:	2e00      	cmp	r6, #0
    412e:	d114      	bne.n	415a <__aeabi_dsub+0x4c6>
    4130:	0026      	movs	r6, r4
    4132:	4650      	mov	r0, sl
    4134:	4306      	orrs	r6, r0
    4136:	d062      	beq.n	41fe <__aeabi_dsub+0x56a>
    4138:	43db      	mvns	r3, r3
    413a:	2b00      	cmp	r3, #0
    413c:	d15c      	bne.n	41f8 <__aeabi_dsub+0x564>
    413e:	1887      	adds	r7, r0, r2
    4140:	4297      	cmp	r7, r2
    4142:	4192      	sbcs	r2, r2
    4144:	1864      	adds	r4, r4, r1
    4146:	4252      	negs	r2, r2
    4148:	18a4      	adds	r4, r4, r2
    414a:	4666      	mov	r6, ip
    414c:	e687      	b.n	3e5e <__aeabi_dsub+0x1ca>
    414e:	4650      	mov	r0, sl
    4150:	4320      	orrs	r0, r4
    4152:	1e44      	subs	r4, r0, #1
    4154:	41a0      	sbcs	r0, r4
    4156:	2400      	movs	r4, #0
    4158:	e760      	b.n	401c <__aeabi_dsub+0x388>
    415a:	4e57      	ldr	r6, [pc, #348]	; (42b8 <__aeabi_dsub+0x624>)
    415c:	45b4      	cmp	ip, r6
    415e:	d04e      	beq.n	41fe <__aeabi_dsub+0x56a>
    4160:	2680      	movs	r6, #128	; 0x80
    4162:	0436      	lsls	r6, r6, #16
    4164:	425b      	negs	r3, r3
    4166:	4334      	orrs	r4, r6
    4168:	2b38      	cmp	r3, #56	; 0x38
    416a:	dd00      	ble.n	416e <__aeabi_dsub+0x4da>
    416c:	e07f      	b.n	426e <__aeabi_dsub+0x5da>
    416e:	2b1f      	cmp	r3, #31
    4170:	dd00      	ble.n	4174 <__aeabi_dsub+0x4e0>
    4172:	e08b      	b.n	428c <__aeabi_dsub+0x5f8>
    4174:	2620      	movs	r6, #32
    4176:	0027      	movs	r7, r4
    4178:	4650      	mov	r0, sl
    417a:	1af6      	subs	r6, r6, r3
    417c:	40b7      	lsls	r7, r6
    417e:	40d8      	lsrs	r0, r3
    4180:	4307      	orrs	r7, r0
    4182:	4650      	mov	r0, sl
    4184:	40b0      	lsls	r0, r6
    4186:	1e46      	subs	r6, r0, #1
    4188:	41b0      	sbcs	r0, r6
    418a:	4307      	orrs	r7, r0
    418c:	40dc      	lsrs	r4, r3
    418e:	18bf      	adds	r7, r7, r2
    4190:	e7d6      	b.n	4140 <__aeabi_dsub+0x4ac>
    4192:	000d      	movs	r5, r1
    4194:	4315      	orrs	r5, r2
    4196:	d100      	bne.n	419a <__aeabi_dsub+0x506>
    4198:	e602      	b.n	3da0 <__aeabi_dsub+0x10c>
    419a:	4650      	mov	r0, sl
    419c:	1a80      	subs	r0, r0, r2
    419e:	4582      	cmp	sl, r0
    41a0:	41bf      	sbcs	r7, r7
    41a2:	1a65      	subs	r5, r4, r1
    41a4:	427f      	negs	r7, r7
    41a6:	1bed      	subs	r5, r5, r7
    41a8:	4684      	mov	ip, r0
    41aa:	0228      	lsls	r0, r5, #8
    41ac:	d400      	bmi.n	41b0 <__aeabi_dsub+0x51c>
    41ae:	e68d      	b.n	3ecc <__aeabi_dsub+0x238>
    41b0:	4650      	mov	r0, sl
    41b2:	1a17      	subs	r7, r2, r0
    41b4:	42ba      	cmp	r2, r7
    41b6:	4192      	sbcs	r2, r2
    41b8:	1b0c      	subs	r4, r1, r4
    41ba:	4252      	negs	r2, r2
    41bc:	1aa4      	subs	r4, r4, r2
    41be:	4698      	mov	r8, r3
    41c0:	e5ee      	b.n	3da0 <__aeabi_dsub+0x10c>
    41c2:	000d      	movs	r5, r1
    41c4:	4315      	orrs	r5, r2
    41c6:	d100      	bne.n	41ca <__aeabi_dsub+0x536>
    41c8:	e76b      	b.n	40a2 <__aeabi_dsub+0x40e>
    41ca:	4650      	mov	r0, sl
    41cc:	0767      	lsls	r7, r4, #29
    41ce:	08c0      	lsrs	r0, r0, #3
    41d0:	4307      	orrs	r7, r0
    41d2:	2080      	movs	r0, #128	; 0x80
    41d4:	08e4      	lsrs	r4, r4, #3
    41d6:	0300      	lsls	r0, r0, #12
    41d8:	4204      	tst	r4, r0
    41da:	d007      	beq.n	41ec <__aeabi_dsub+0x558>
    41dc:	08cd      	lsrs	r5, r1, #3
    41de:	4205      	tst	r5, r0
    41e0:	d104      	bne.n	41ec <__aeabi_dsub+0x558>
    41e2:	002c      	movs	r4, r5
    41e4:	4698      	mov	r8, r3
    41e6:	08d7      	lsrs	r7, r2, #3
    41e8:	0749      	lsls	r1, r1, #29
    41ea:	430f      	orrs	r7, r1
    41ec:	0f7b      	lsrs	r3, r7, #29
    41ee:	00e4      	lsls	r4, r4, #3
    41f0:	431c      	orrs	r4, r3
    41f2:	00ff      	lsls	r7, r7, #3
    41f4:	4e30      	ldr	r6, [pc, #192]	; (42b8 <__aeabi_dsub+0x624>)
    41f6:	e5d3      	b.n	3da0 <__aeabi_dsub+0x10c>
    41f8:	4e2f      	ldr	r6, [pc, #188]	; (42b8 <__aeabi_dsub+0x624>)
    41fa:	45b4      	cmp	ip, r6
    41fc:	d1b4      	bne.n	4168 <__aeabi_dsub+0x4d4>
    41fe:	000c      	movs	r4, r1
    4200:	0017      	movs	r7, r2
    4202:	4666      	mov	r6, ip
    4204:	e5cc      	b.n	3da0 <__aeabi_dsub+0x10c>
    4206:	2700      	movs	r7, #0
    4208:	2400      	movs	r4, #0
    420a:	e5e8      	b.n	3dde <__aeabi_dsub+0x14a>
    420c:	2b00      	cmp	r3, #0
    420e:	d039      	beq.n	4284 <__aeabi_dsub+0x5f0>
    4210:	000b      	movs	r3, r1
    4212:	4313      	orrs	r3, r2
    4214:	d100      	bne.n	4218 <__aeabi_dsub+0x584>
    4216:	e744      	b.n	40a2 <__aeabi_dsub+0x40e>
    4218:	08c0      	lsrs	r0, r0, #3
    421a:	0767      	lsls	r7, r4, #29
    421c:	4307      	orrs	r7, r0
    421e:	2080      	movs	r0, #128	; 0x80
    4220:	08e4      	lsrs	r4, r4, #3
    4222:	0300      	lsls	r0, r0, #12
    4224:	4204      	tst	r4, r0
    4226:	d0e1      	beq.n	41ec <__aeabi_dsub+0x558>
    4228:	08cb      	lsrs	r3, r1, #3
    422a:	4203      	tst	r3, r0
    422c:	d1de      	bne.n	41ec <__aeabi_dsub+0x558>
    422e:	08d7      	lsrs	r7, r2, #3
    4230:	0749      	lsls	r1, r1, #29
    4232:	430f      	orrs	r7, r1
    4234:	001c      	movs	r4, r3
    4236:	e7d9      	b.n	41ec <__aeabi_dsub+0x558>
    4238:	2100      	movs	r1, #0
    423a:	e771      	b.n	4120 <__aeabi_dsub+0x48c>
    423c:	2500      	movs	r5, #0
    423e:	2700      	movs	r7, #0
    4240:	e5e9      	b.n	3e16 <__aeabi_dsub+0x182>
    4242:	002e      	movs	r6, r5
    4244:	0027      	movs	r7, r4
    4246:	3e20      	subs	r6, #32
    4248:	40f7      	lsrs	r7, r6
    424a:	2d20      	cmp	r5, #32
    424c:	d02f      	beq.n	42ae <__aeabi_dsub+0x61a>
    424e:	2640      	movs	r6, #64	; 0x40
    4250:	1b75      	subs	r5, r6, r5
    4252:	40ac      	lsls	r4, r5
    4254:	4650      	mov	r0, sl
    4256:	4320      	orrs	r0, r4
    4258:	1e44      	subs	r4, r0, #1
    425a:	41a0      	sbcs	r0, r4
    425c:	2400      	movs	r4, #0
    425e:	4338      	orrs	r0, r7
    4260:	e6dc      	b.n	401c <__aeabi_dsub+0x388>
    4262:	2480      	movs	r4, #128	; 0x80
    4264:	2500      	movs	r5, #0
    4266:	0324      	lsls	r4, r4, #12
    4268:	4e13      	ldr	r6, [pc, #76]	; (42b8 <__aeabi_dsub+0x624>)
    426a:	2700      	movs	r7, #0
    426c:	e5d3      	b.n	3e16 <__aeabi_dsub+0x182>
    426e:	4650      	mov	r0, sl
    4270:	4320      	orrs	r0, r4
    4272:	0007      	movs	r7, r0
    4274:	1e78      	subs	r0, r7, #1
    4276:	4187      	sbcs	r7, r0
    4278:	2400      	movs	r4, #0
    427a:	18bf      	adds	r7, r7, r2
    427c:	e760      	b.n	4140 <__aeabi_dsub+0x4ac>
    427e:	000c      	movs	r4, r1
    4280:	0017      	movs	r7, r2
    4282:	e58d      	b.n	3da0 <__aeabi_dsub+0x10c>
    4284:	000c      	movs	r4, r1
    4286:	0017      	movs	r7, r2
    4288:	4e0b      	ldr	r6, [pc, #44]	; (42b8 <__aeabi_dsub+0x624>)
    428a:	e589      	b.n	3da0 <__aeabi_dsub+0x10c>
    428c:	001e      	movs	r6, r3
    428e:	0027      	movs	r7, r4
    4290:	3e20      	subs	r6, #32
    4292:	40f7      	lsrs	r7, r6
    4294:	2b20      	cmp	r3, #32
    4296:	d00c      	beq.n	42b2 <__aeabi_dsub+0x61e>
    4298:	2640      	movs	r6, #64	; 0x40
    429a:	1af3      	subs	r3, r6, r3
    429c:	409c      	lsls	r4, r3
    429e:	4650      	mov	r0, sl
    42a0:	4320      	orrs	r0, r4
    42a2:	1e44      	subs	r4, r0, #1
    42a4:	41a0      	sbcs	r0, r4
    42a6:	4307      	orrs	r7, r0
    42a8:	2400      	movs	r4, #0
    42aa:	18bf      	adds	r7, r7, r2
    42ac:	e748      	b.n	4140 <__aeabi_dsub+0x4ac>
    42ae:	2400      	movs	r4, #0
    42b0:	e7d0      	b.n	4254 <__aeabi_dsub+0x5c0>
    42b2:	2400      	movs	r4, #0
    42b4:	e7f3      	b.n	429e <__aeabi_dsub+0x60a>
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	000007ff 	.word	0x000007ff
    42bc:	ff7fffff 	.word	0xff7fffff

000042c0 <__aeabi_dcmpun>:
    42c0:	b570      	push	{r4, r5, r6, lr}
    42c2:	4e0e      	ldr	r6, [pc, #56]	; (42fc <__aeabi_dcmpun+0x3c>)
    42c4:	030d      	lsls	r5, r1, #12
    42c6:	031c      	lsls	r4, r3, #12
    42c8:	0049      	lsls	r1, r1, #1
    42ca:	005b      	lsls	r3, r3, #1
    42cc:	0b2d      	lsrs	r5, r5, #12
    42ce:	0d49      	lsrs	r1, r1, #21
    42d0:	0b24      	lsrs	r4, r4, #12
    42d2:	0d5b      	lsrs	r3, r3, #21
    42d4:	42b1      	cmp	r1, r6
    42d6:	d004      	beq.n	42e2 <__aeabi_dcmpun+0x22>
    42d8:	4908      	ldr	r1, [pc, #32]	; (42fc <__aeabi_dcmpun+0x3c>)
    42da:	2000      	movs	r0, #0
    42dc:	428b      	cmp	r3, r1
    42de:	d008      	beq.n	42f2 <__aeabi_dcmpun+0x32>
    42e0:	bd70      	pop	{r4, r5, r6, pc}
    42e2:	4305      	orrs	r5, r0
    42e4:	2001      	movs	r0, #1
    42e6:	2d00      	cmp	r5, #0
    42e8:	d1fa      	bne.n	42e0 <__aeabi_dcmpun+0x20>
    42ea:	4904      	ldr	r1, [pc, #16]	; (42fc <__aeabi_dcmpun+0x3c>)
    42ec:	2000      	movs	r0, #0
    42ee:	428b      	cmp	r3, r1
    42f0:	d1f6      	bne.n	42e0 <__aeabi_dcmpun+0x20>
    42f2:	4314      	orrs	r4, r2
    42f4:	0020      	movs	r0, r4
    42f6:	1e44      	subs	r4, r0, #1
    42f8:	41a0      	sbcs	r0, r4
    42fa:	e7f1      	b.n	42e0 <__aeabi_dcmpun+0x20>
    42fc:	000007ff 	.word	0x000007ff

00004300 <__aeabi_d2iz>:
    4300:	b530      	push	{r4, r5, lr}
    4302:	4d13      	ldr	r5, [pc, #76]	; (4350 <__aeabi_d2iz+0x50>)
    4304:	030a      	lsls	r2, r1, #12
    4306:	004b      	lsls	r3, r1, #1
    4308:	0b12      	lsrs	r2, r2, #12
    430a:	0d5b      	lsrs	r3, r3, #21
    430c:	0fc9      	lsrs	r1, r1, #31
    430e:	2400      	movs	r4, #0
    4310:	42ab      	cmp	r3, r5
    4312:	dd10      	ble.n	4336 <__aeabi_d2iz+0x36>
    4314:	4c0f      	ldr	r4, [pc, #60]	; (4354 <__aeabi_d2iz+0x54>)
    4316:	42a3      	cmp	r3, r4
    4318:	dc0f      	bgt.n	433a <__aeabi_d2iz+0x3a>
    431a:	2480      	movs	r4, #128	; 0x80
    431c:	4d0e      	ldr	r5, [pc, #56]	; (4358 <__aeabi_d2iz+0x58>)
    431e:	0364      	lsls	r4, r4, #13
    4320:	4322      	orrs	r2, r4
    4322:	1aed      	subs	r5, r5, r3
    4324:	2d1f      	cmp	r5, #31
    4326:	dd0b      	ble.n	4340 <__aeabi_d2iz+0x40>
    4328:	480c      	ldr	r0, [pc, #48]	; (435c <__aeabi_d2iz+0x5c>)
    432a:	1ac3      	subs	r3, r0, r3
    432c:	40da      	lsrs	r2, r3
    432e:	4254      	negs	r4, r2
    4330:	2900      	cmp	r1, #0
    4332:	d100      	bne.n	4336 <__aeabi_d2iz+0x36>
    4334:	0014      	movs	r4, r2
    4336:	0020      	movs	r0, r4
    4338:	bd30      	pop	{r4, r5, pc}
    433a:	4b09      	ldr	r3, [pc, #36]	; (4360 <__aeabi_d2iz+0x60>)
    433c:	18cc      	adds	r4, r1, r3
    433e:	e7fa      	b.n	4336 <__aeabi_d2iz+0x36>
    4340:	4c08      	ldr	r4, [pc, #32]	; (4364 <__aeabi_d2iz+0x64>)
    4342:	40e8      	lsrs	r0, r5
    4344:	46a4      	mov	ip, r4
    4346:	4463      	add	r3, ip
    4348:	409a      	lsls	r2, r3
    434a:	4302      	orrs	r2, r0
    434c:	e7ef      	b.n	432e <__aeabi_d2iz+0x2e>
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	000003fe 	.word	0x000003fe
    4354:	0000041d 	.word	0x0000041d
    4358:	00000433 	.word	0x00000433
    435c:	00000413 	.word	0x00000413
    4360:	7fffffff 	.word	0x7fffffff
    4364:	fffffbed 	.word	0xfffffbed

00004368 <__aeabi_ui2d>:
    4368:	b510      	push	{r4, lr}
    436a:	1e04      	subs	r4, r0, #0
    436c:	d028      	beq.n	43c0 <__aeabi_ui2d+0x58>
    436e:	f000 f885 	bl	447c <__clzsi2>
    4372:	4b15      	ldr	r3, [pc, #84]	; (43c8 <__aeabi_ui2d+0x60>)
    4374:	4a15      	ldr	r2, [pc, #84]	; (43cc <__aeabi_ui2d+0x64>)
    4376:	1a1b      	subs	r3, r3, r0
    4378:	1ad2      	subs	r2, r2, r3
    437a:	2a1f      	cmp	r2, #31
    437c:	dd15      	ble.n	43aa <__aeabi_ui2d+0x42>
    437e:	4a14      	ldr	r2, [pc, #80]	; (43d0 <__aeabi_ui2d+0x68>)
    4380:	1ad2      	subs	r2, r2, r3
    4382:	4094      	lsls	r4, r2
    4384:	2200      	movs	r2, #0
    4386:	0324      	lsls	r4, r4, #12
    4388:	055b      	lsls	r3, r3, #21
    438a:	0b24      	lsrs	r4, r4, #12
    438c:	0d5b      	lsrs	r3, r3, #21
    438e:	2100      	movs	r1, #0
    4390:	0010      	movs	r0, r2
    4392:	0324      	lsls	r4, r4, #12
    4394:	0d0a      	lsrs	r2, r1, #20
    4396:	0b24      	lsrs	r4, r4, #12
    4398:	0512      	lsls	r2, r2, #20
    439a:	4322      	orrs	r2, r4
    439c:	4c0d      	ldr	r4, [pc, #52]	; (43d4 <__aeabi_ui2d+0x6c>)
    439e:	051b      	lsls	r3, r3, #20
    43a0:	4022      	ands	r2, r4
    43a2:	4313      	orrs	r3, r2
    43a4:	005b      	lsls	r3, r3, #1
    43a6:	0859      	lsrs	r1, r3, #1
    43a8:	bd10      	pop	{r4, pc}
    43aa:	0021      	movs	r1, r4
    43ac:	4091      	lsls	r1, r2
    43ae:	000a      	movs	r2, r1
    43b0:	210b      	movs	r1, #11
    43b2:	1a08      	subs	r0, r1, r0
    43b4:	40c4      	lsrs	r4, r0
    43b6:	055b      	lsls	r3, r3, #21
    43b8:	0324      	lsls	r4, r4, #12
    43ba:	0b24      	lsrs	r4, r4, #12
    43bc:	0d5b      	lsrs	r3, r3, #21
    43be:	e7e6      	b.n	438e <__aeabi_ui2d+0x26>
    43c0:	2300      	movs	r3, #0
    43c2:	2400      	movs	r4, #0
    43c4:	2200      	movs	r2, #0
    43c6:	e7e2      	b.n	438e <__aeabi_ui2d+0x26>
    43c8:	0000041e 	.word	0x0000041e
    43cc:	00000433 	.word	0x00000433
    43d0:	00000413 	.word	0x00000413
    43d4:	800fffff 	.word	0x800fffff

000043d8 <__aeabi_f2d>:
    43d8:	0041      	lsls	r1, r0, #1
    43da:	0e09      	lsrs	r1, r1, #24
    43dc:	1c4b      	adds	r3, r1, #1
    43de:	b570      	push	{r4, r5, r6, lr}
    43e0:	b2db      	uxtb	r3, r3
    43e2:	0246      	lsls	r6, r0, #9
    43e4:	0a75      	lsrs	r5, r6, #9
    43e6:	0fc4      	lsrs	r4, r0, #31
    43e8:	2b01      	cmp	r3, #1
    43ea:	dd14      	ble.n	4416 <__aeabi_f2d+0x3e>
    43ec:	23e0      	movs	r3, #224	; 0xe0
    43ee:	009b      	lsls	r3, r3, #2
    43f0:	076d      	lsls	r5, r5, #29
    43f2:	0b36      	lsrs	r6, r6, #12
    43f4:	18cb      	adds	r3, r1, r3
    43f6:	2100      	movs	r1, #0
    43f8:	0d0a      	lsrs	r2, r1, #20
    43fa:	0028      	movs	r0, r5
    43fc:	0512      	lsls	r2, r2, #20
    43fe:	4d1c      	ldr	r5, [pc, #112]	; (4470 <__aeabi_f2d+0x98>)
    4400:	4332      	orrs	r2, r6
    4402:	055b      	lsls	r3, r3, #21
    4404:	402a      	ands	r2, r5
    4406:	085b      	lsrs	r3, r3, #1
    4408:	4313      	orrs	r3, r2
    440a:	005b      	lsls	r3, r3, #1
    440c:	07e4      	lsls	r4, r4, #31
    440e:	085b      	lsrs	r3, r3, #1
    4410:	4323      	orrs	r3, r4
    4412:	0019      	movs	r1, r3
    4414:	bd70      	pop	{r4, r5, r6, pc}
    4416:	2900      	cmp	r1, #0
    4418:	d114      	bne.n	4444 <__aeabi_f2d+0x6c>
    441a:	2d00      	cmp	r5, #0
    441c:	d01e      	beq.n	445c <__aeabi_f2d+0x84>
    441e:	0028      	movs	r0, r5
    4420:	f000 f82c 	bl	447c <__clzsi2>
    4424:	280a      	cmp	r0, #10
    4426:	dc1c      	bgt.n	4462 <__aeabi_f2d+0x8a>
    4428:	230b      	movs	r3, #11
    442a:	002a      	movs	r2, r5
    442c:	1a1b      	subs	r3, r3, r0
    442e:	40da      	lsrs	r2, r3
    4430:	0003      	movs	r3, r0
    4432:	3315      	adds	r3, #21
    4434:	409d      	lsls	r5, r3
    4436:	4b0f      	ldr	r3, [pc, #60]	; (4474 <__aeabi_f2d+0x9c>)
    4438:	0312      	lsls	r2, r2, #12
    443a:	1a1b      	subs	r3, r3, r0
    443c:	055b      	lsls	r3, r3, #21
    443e:	0b16      	lsrs	r6, r2, #12
    4440:	0d5b      	lsrs	r3, r3, #21
    4442:	e7d8      	b.n	43f6 <__aeabi_f2d+0x1e>
    4444:	2d00      	cmp	r5, #0
    4446:	d006      	beq.n	4456 <__aeabi_f2d+0x7e>
    4448:	0b32      	lsrs	r2, r6, #12
    444a:	2680      	movs	r6, #128	; 0x80
    444c:	0336      	lsls	r6, r6, #12
    444e:	076d      	lsls	r5, r5, #29
    4450:	4316      	orrs	r6, r2
    4452:	4b09      	ldr	r3, [pc, #36]	; (4478 <__aeabi_f2d+0xa0>)
    4454:	e7cf      	b.n	43f6 <__aeabi_f2d+0x1e>
    4456:	4b08      	ldr	r3, [pc, #32]	; (4478 <__aeabi_f2d+0xa0>)
    4458:	2600      	movs	r6, #0
    445a:	e7cc      	b.n	43f6 <__aeabi_f2d+0x1e>
    445c:	2300      	movs	r3, #0
    445e:	2600      	movs	r6, #0
    4460:	e7c9      	b.n	43f6 <__aeabi_f2d+0x1e>
    4462:	0003      	movs	r3, r0
    4464:	002a      	movs	r2, r5
    4466:	3b0b      	subs	r3, #11
    4468:	409a      	lsls	r2, r3
    446a:	2500      	movs	r5, #0
    446c:	e7e3      	b.n	4436 <__aeabi_f2d+0x5e>
    446e:	46c0      	nop			; (mov r8, r8)
    4470:	800fffff 	.word	0x800fffff
    4474:	00000389 	.word	0x00000389
    4478:	000007ff 	.word	0x000007ff

0000447c <__clzsi2>:
    447c:	211c      	movs	r1, #28
    447e:	2301      	movs	r3, #1
    4480:	041b      	lsls	r3, r3, #16
    4482:	4298      	cmp	r0, r3
    4484:	d301      	bcc.n	448a <__clzsi2+0xe>
    4486:	0c00      	lsrs	r0, r0, #16
    4488:	3910      	subs	r1, #16
    448a:	0a1b      	lsrs	r3, r3, #8
    448c:	4298      	cmp	r0, r3
    448e:	d301      	bcc.n	4494 <__clzsi2+0x18>
    4490:	0a00      	lsrs	r0, r0, #8
    4492:	3908      	subs	r1, #8
    4494:	091b      	lsrs	r3, r3, #4
    4496:	4298      	cmp	r0, r3
    4498:	d301      	bcc.n	449e <__clzsi2+0x22>
    449a:	0900      	lsrs	r0, r0, #4
    449c:	3904      	subs	r1, #4
    449e:	a202      	add	r2, pc, #8	; (adr r2, 44a8 <__clzsi2+0x2c>)
    44a0:	5c10      	ldrb	r0, [r2, r0]
    44a2:	1840      	adds	r0, r0, r1
    44a4:	4770      	bx	lr
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	02020304 	.word	0x02020304
    44ac:	01010101 	.word	0x01010101
	...

000044b8 <__libc_init_array>:
    44b8:	b570      	push	{r4, r5, r6, lr}
    44ba:	2600      	movs	r6, #0
    44bc:	4d0c      	ldr	r5, [pc, #48]	; (44f0 <__libc_init_array+0x38>)
    44be:	4c0d      	ldr	r4, [pc, #52]	; (44f4 <__libc_init_array+0x3c>)
    44c0:	1b64      	subs	r4, r4, r5
    44c2:	10a4      	asrs	r4, r4, #2
    44c4:	42a6      	cmp	r6, r4
    44c6:	d109      	bne.n	44dc <__libc_init_array+0x24>
    44c8:	2600      	movs	r6, #0
    44ca:	f000 f911 	bl	46f0 <_init>
    44ce:	4d0a      	ldr	r5, [pc, #40]	; (44f8 <__libc_init_array+0x40>)
    44d0:	4c0a      	ldr	r4, [pc, #40]	; (44fc <__libc_init_array+0x44>)
    44d2:	1b64      	subs	r4, r4, r5
    44d4:	10a4      	asrs	r4, r4, #2
    44d6:	42a6      	cmp	r6, r4
    44d8:	d105      	bne.n	44e6 <__libc_init_array+0x2e>
    44da:	bd70      	pop	{r4, r5, r6, pc}
    44dc:	00b3      	lsls	r3, r6, #2
    44de:	58eb      	ldr	r3, [r5, r3]
    44e0:	4798      	blx	r3
    44e2:	3601      	adds	r6, #1
    44e4:	e7ee      	b.n	44c4 <__libc_init_array+0xc>
    44e6:	00b3      	lsls	r3, r6, #2
    44e8:	58eb      	ldr	r3, [r5, r3]
    44ea:	4798      	blx	r3
    44ec:	3601      	adds	r6, #1
    44ee:	e7f2      	b.n	44d6 <__libc_init_array+0x1e>
    44f0:	20000080 	.word	0x20000080
    44f4:	20000080 	.word	0x20000080
    44f8:	20000080 	.word	0x20000080
    44fc:	20000090 	.word	0x20000090

00004500 <malloc>:
    4500:	b510      	push	{r4, lr}
    4502:	4b03      	ldr	r3, [pc, #12]	; (4510 <malloc+0x10>)
    4504:	0001      	movs	r1, r0
    4506:	6818      	ldr	r0, [r3, #0]
    4508:	f000 f86a 	bl	45e0 <_malloc_r>
    450c:	bd10      	pop	{r4, pc}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	2000001c 	.word	0x2000001c

00004514 <free>:
    4514:	b510      	push	{r4, lr}
    4516:	4b03      	ldr	r3, [pc, #12]	; (4524 <free+0x10>)
    4518:	0001      	movs	r1, r0
    451a:	6818      	ldr	r0, [r3, #0]
    451c:	f000 f816 	bl	454c <_free_r>
    4520:	bd10      	pop	{r4, pc}
    4522:	46c0      	nop			; (mov r8, r8)
    4524:	2000001c 	.word	0x2000001c

00004528 <memcpy>:
    4528:	2300      	movs	r3, #0
    452a:	b510      	push	{r4, lr}
    452c:	429a      	cmp	r2, r3
    452e:	d100      	bne.n	4532 <memcpy+0xa>
    4530:	bd10      	pop	{r4, pc}
    4532:	5ccc      	ldrb	r4, [r1, r3]
    4534:	54c4      	strb	r4, [r0, r3]
    4536:	3301      	adds	r3, #1
    4538:	e7f8      	b.n	452c <memcpy+0x4>

0000453a <memset>:
    453a:	0003      	movs	r3, r0
    453c:	1882      	adds	r2, r0, r2
    453e:	4293      	cmp	r3, r2
    4540:	d100      	bne.n	4544 <memset+0xa>
    4542:	4770      	bx	lr
    4544:	7019      	strb	r1, [r3, #0]
    4546:	3301      	adds	r3, #1
    4548:	e7f9      	b.n	453e <memset+0x4>
	...

0000454c <_free_r>:
    454c:	b570      	push	{r4, r5, r6, lr}
    454e:	0005      	movs	r5, r0
    4550:	2900      	cmp	r1, #0
    4552:	d010      	beq.n	4576 <_free_r+0x2a>
    4554:	1f0c      	subs	r4, r1, #4
    4556:	6823      	ldr	r3, [r4, #0]
    4558:	2b00      	cmp	r3, #0
    455a:	da00      	bge.n	455e <_free_r+0x12>
    455c:	18e4      	adds	r4, r4, r3
    455e:	0028      	movs	r0, r5
    4560:	f000 f8b5 	bl	46ce <__malloc_lock>
    4564:	4a1d      	ldr	r2, [pc, #116]	; (45dc <_free_r+0x90>)
    4566:	6813      	ldr	r3, [r2, #0]
    4568:	2b00      	cmp	r3, #0
    456a:	d105      	bne.n	4578 <_free_r+0x2c>
    456c:	6063      	str	r3, [r4, #4]
    456e:	6014      	str	r4, [r2, #0]
    4570:	0028      	movs	r0, r5
    4572:	f000 f8ad 	bl	46d0 <__malloc_unlock>
    4576:	bd70      	pop	{r4, r5, r6, pc}
    4578:	42a3      	cmp	r3, r4
    457a:	d909      	bls.n	4590 <_free_r+0x44>
    457c:	6821      	ldr	r1, [r4, #0]
    457e:	1860      	adds	r0, r4, r1
    4580:	4283      	cmp	r3, r0
    4582:	d1f3      	bne.n	456c <_free_r+0x20>
    4584:	6818      	ldr	r0, [r3, #0]
    4586:	685b      	ldr	r3, [r3, #4]
    4588:	1841      	adds	r1, r0, r1
    458a:	6021      	str	r1, [r4, #0]
    458c:	e7ee      	b.n	456c <_free_r+0x20>
    458e:	0013      	movs	r3, r2
    4590:	685a      	ldr	r2, [r3, #4]
    4592:	2a00      	cmp	r2, #0
    4594:	d001      	beq.n	459a <_free_r+0x4e>
    4596:	42a2      	cmp	r2, r4
    4598:	d9f9      	bls.n	458e <_free_r+0x42>
    459a:	6819      	ldr	r1, [r3, #0]
    459c:	1858      	adds	r0, r3, r1
    459e:	42a0      	cmp	r0, r4
    45a0:	d10b      	bne.n	45ba <_free_r+0x6e>
    45a2:	6820      	ldr	r0, [r4, #0]
    45a4:	1809      	adds	r1, r1, r0
    45a6:	1858      	adds	r0, r3, r1
    45a8:	6019      	str	r1, [r3, #0]
    45aa:	4282      	cmp	r2, r0
    45ac:	d1e0      	bne.n	4570 <_free_r+0x24>
    45ae:	6810      	ldr	r0, [r2, #0]
    45b0:	6852      	ldr	r2, [r2, #4]
    45b2:	1841      	adds	r1, r0, r1
    45b4:	6019      	str	r1, [r3, #0]
    45b6:	605a      	str	r2, [r3, #4]
    45b8:	e7da      	b.n	4570 <_free_r+0x24>
    45ba:	42a0      	cmp	r0, r4
    45bc:	d902      	bls.n	45c4 <_free_r+0x78>
    45be:	230c      	movs	r3, #12
    45c0:	602b      	str	r3, [r5, #0]
    45c2:	e7d5      	b.n	4570 <_free_r+0x24>
    45c4:	6821      	ldr	r1, [r4, #0]
    45c6:	1860      	adds	r0, r4, r1
    45c8:	4282      	cmp	r2, r0
    45ca:	d103      	bne.n	45d4 <_free_r+0x88>
    45cc:	6810      	ldr	r0, [r2, #0]
    45ce:	6852      	ldr	r2, [r2, #4]
    45d0:	1841      	adds	r1, r0, r1
    45d2:	6021      	str	r1, [r4, #0]
    45d4:	6062      	str	r2, [r4, #4]
    45d6:	605c      	str	r4, [r3, #4]
    45d8:	e7ca      	b.n	4570 <_free_r+0x24>
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	20000b78 	.word	0x20000b78

000045e0 <_malloc_r>:
    45e0:	2303      	movs	r3, #3
    45e2:	b570      	push	{r4, r5, r6, lr}
    45e4:	1ccd      	adds	r5, r1, #3
    45e6:	439d      	bics	r5, r3
    45e8:	3508      	adds	r5, #8
    45ea:	0006      	movs	r6, r0
    45ec:	2d0c      	cmp	r5, #12
    45ee:	d21e      	bcs.n	462e <_malloc_r+0x4e>
    45f0:	250c      	movs	r5, #12
    45f2:	42a9      	cmp	r1, r5
    45f4:	d81d      	bhi.n	4632 <_malloc_r+0x52>
    45f6:	0030      	movs	r0, r6
    45f8:	f000 f869 	bl	46ce <__malloc_lock>
    45fc:	4a25      	ldr	r2, [pc, #148]	; (4694 <_malloc_r+0xb4>)
    45fe:	6814      	ldr	r4, [r2, #0]
    4600:	0021      	movs	r1, r4
    4602:	2900      	cmp	r1, #0
    4604:	d119      	bne.n	463a <_malloc_r+0x5a>
    4606:	4c24      	ldr	r4, [pc, #144]	; (4698 <_malloc_r+0xb8>)
    4608:	6823      	ldr	r3, [r4, #0]
    460a:	2b00      	cmp	r3, #0
    460c:	d103      	bne.n	4616 <_malloc_r+0x36>
    460e:	0030      	movs	r0, r6
    4610:	f000 f844 	bl	469c <_sbrk_r>
    4614:	6020      	str	r0, [r4, #0]
    4616:	0029      	movs	r1, r5
    4618:	0030      	movs	r0, r6
    461a:	f000 f83f 	bl	469c <_sbrk_r>
    461e:	1c43      	adds	r3, r0, #1
    4620:	d12c      	bne.n	467c <_malloc_r+0x9c>
    4622:	230c      	movs	r3, #12
    4624:	0030      	movs	r0, r6
    4626:	6033      	str	r3, [r6, #0]
    4628:	f000 f852 	bl	46d0 <__malloc_unlock>
    462c:	e003      	b.n	4636 <_malloc_r+0x56>
    462e:	2d00      	cmp	r5, #0
    4630:	dadf      	bge.n	45f2 <_malloc_r+0x12>
    4632:	230c      	movs	r3, #12
    4634:	6033      	str	r3, [r6, #0]
    4636:	2000      	movs	r0, #0
    4638:	bd70      	pop	{r4, r5, r6, pc}
    463a:	680b      	ldr	r3, [r1, #0]
    463c:	1b5b      	subs	r3, r3, r5
    463e:	d41a      	bmi.n	4676 <_malloc_r+0x96>
    4640:	2b0b      	cmp	r3, #11
    4642:	d903      	bls.n	464c <_malloc_r+0x6c>
    4644:	600b      	str	r3, [r1, #0]
    4646:	18cc      	adds	r4, r1, r3
    4648:	6025      	str	r5, [r4, #0]
    464a:	e003      	b.n	4654 <_malloc_r+0x74>
    464c:	428c      	cmp	r4, r1
    464e:	d10e      	bne.n	466e <_malloc_r+0x8e>
    4650:	6863      	ldr	r3, [r4, #4]
    4652:	6013      	str	r3, [r2, #0]
    4654:	0030      	movs	r0, r6
    4656:	f000 f83b 	bl	46d0 <__malloc_unlock>
    465a:	0020      	movs	r0, r4
    465c:	2207      	movs	r2, #7
    465e:	300b      	adds	r0, #11
    4660:	1d23      	adds	r3, r4, #4
    4662:	4390      	bics	r0, r2
    4664:	1ac3      	subs	r3, r0, r3
    4666:	d0e7      	beq.n	4638 <_malloc_r+0x58>
    4668:	425a      	negs	r2, r3
    466a:	50e2      	str	r2, [r4, r3]
    466c:	e7e4      	b.n	4638 <_malloc_r+0x58>
    466e:	684b      	ldr	r3, [r1, #4]
    4670:	6063      	str	r3, [r4, #4]
    4672:	000c      	movs	r4, r1
    4674:	e7ee      	b.n	4654 <_malloc_r+0x74>
    4676:	000c      	movs	r4, r1
    4678:	6849      	ldr	r1, [r1, #4]
    467a:	e7c2      	b.n	4602 <_malloc_r+0x22>
    467c:	2303      	movs	r3, #3
    467e:	1cc4      	adds	r4, r0, #3
    4680:	439c      	bics	r4, r3
    4682:	42a0      	cmp	r0, r4
    4684:	d0e0      	beq.n	4648 <_malloc_r+0x68>
    4686:	1a21      	subs	r1, r4, r0
    4688:	0030      	movs	r0, r6
    468a:	f000 f807 	bl	469c <_sbrk_r>
    468e:	1c43      	adds	r3, r0, #1
    4690:	d1da      	bne.n	4648 <_malloc_r+0x68>
    4692:	e7c6      	b.n	4622 <_malloc_r+0x42>
    4694:	20000b78 	.word	0x20000b78
    4698:	20000b7c 	.word	0x20000b7c

0000469c <_sbrk_r>:
    469c:	2300      	movs	r3, #0
    469e:	b570      	push	{r4, r5, r6, lr}
    46a0:	4c06      	ldr	r4, [pc, #24]	; (46bc <_sbrk_r+0x20>)
    46a2:	0005      	movs	r5, r0
    46a4:	0008      	movs	r0, r1
    46a6:	6023      	str	r3, [r4, #0]
    46a8:	f000 f814 	bl	46d4 <_sbrk>
    46ac:	1c43      	adds	r3, r0, #1
    46ae:	d103      	bne.n	46b8 <_sbrk_r+0x1c>
    46b0:	6823      	ldr	r3, [r4, #0]
    46b2:	2b00      	cmp	r3, #0
    46b4:	d000      	beq.n	46b8 <_sbrk_r+0x1c>
    46b6:	602b      	str	r3, [r5, #0]
    46b8:	bd70      	pop	{r4, r5, r6, pc}
    46ba:	46c0      	nop			; (mov r8, r8)
    46bc:	20000b84 	.word	0x20000b84

000046c0 <strlen>:
    46c0:	2300      	movs	r3, #0
    46c2:	5cc2      	ldrb	r2, [r0, r3]
    46c4:	3301      	adds	r3, #1
    46c6:	2a00      	cmp	r2, #0
    46c8:	d1fb      	bne.n	46c2 <strlen+0x2>
    46ca:	1e58      	subs	r0, r3, #1
    46cc:	4770      	bx	lr

000046ce <__malloc_lock>:
    46ce:	4770      	bx	lr

000046d0 <__malloc_unlock>:
    46d0:	4770      	bx	lr
	...

000046d4 <_sbrk>:
    46d4:	4a04      	ldr	r2, [pc, #16]	; (46e8 <_sbrk+0x14>)
    46d6:	6813      	ldr	r3, [r2, #0]
    46d8:	2b00      	cmp	r3, #0
    46da:	d003      	beq.n	46e4 <_sbrk+0x10>
    46dc:	1818      	adds	r0, r3, r0
    46de:	6010      	str	r0, [r2, #0]
    46e0:	0018      	movs	r0, r3
    46e2:	4770      	bx	lr
    46e4:	4b01      	ldr	r3, [pc, #4]	; (46ec <_sbrk+0x18>)
    46e6:	e7f9      	b.n	46dc <_sbrk+0x8>
    46e8:	20000b80 	.word	0x20000b80
    46ec:	20000b88 	.word	0x20000b88

000046f0 <_init>:
    46f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46f6:	bc08      	pop	{r3}
    46f8:	469e      	mov	lr, r3
    46fa:	4770      	bx	lr

000046fc <_fini>:
    46fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4702:	bc08      	pop	{r3}
    4704:	469e      	mov	lr, r3
    4706:	4770      	bx	lr
    4708:	77207469 	.word	0x77207469
    470c:	736b726f 	.word	0x736b726f
    4710:	00          	.byte	0x00
    4711:	69          	.byte	0x69
    4712:	666e      	.short	0x666e
    4714:	66766f00 	.word	0x66766f00
    4718:	6e616e00 	.word	0x6e616e00
    471c:	00          	.byte	0x00
    471d:	0d          	.byte	0x0d
    471e:	000a      	.short	0x000a

00004720 <_ZTV7Serial_>:
	...
    4728:	0879 0000 0ab9 0000 0875 0000 0a9d 0000     y.......u.......
    4738:	0a7d 0000 0af5 0000 0ad9 0000 0aab 0000     }...............
    4748:	088d 0000 07d5 0000 09c5 0000 080d 0000     ................
    4758:	0861 0000 fff0 ffff 0000 0000 0a6d 0000     a...........m...
    4768:	09b5 0000 07d9 0000 0865 0000 0851 0000     ........e...Q...

00004778 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    4780:	0e6d 0000 1123 0000 110b 0000 10e9 0000     m...#...........
    4790:	0cd1 0000 0cd3 0000 0dc1 0000               ............

0000479c <_ZL14STRING_PRODUCT>:
    479c:	7241 7564 6e69 206f 655a 6f72 0000          Arduino Zero..

000047aa <_ZL15STRING_LANGUAGE>:
    47aa:	0304 0409                                   ....

000047ae <_ZL19STRING_MANUFACTURER>:
    47ae:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

000047ba <_ZL21USB_DeviceDescriptorB>:
    47ba:	0112 0200 02ef 4001 2341 804d 0100 0201     .......@A#M.....
    47ca:	0103                                        ..

000047cc <g_APinDescription>:
    47cc:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    47dc:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    47ec:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    47fc:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    480c:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    481c:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    482c:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    483c:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    484c:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    485c:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    486c:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    487c:	0005 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    488c:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    489c:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    48ac:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    48bc:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    48cc:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    48dc:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    48ec:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    48fc:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    490c:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    491c:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    492c:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    493c:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    494c:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    495c:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    496c:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    497c:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    498c:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    499c:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    49ac:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    49bc:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    49cc:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    49dc:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    49ec:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    49fc:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    4a0c:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    4a1c:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    4a2c:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    4a3c:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    4a4c:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    4a5c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    4a6c:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    4a7c:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    4a8c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    4a9c:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    4aac:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    4abc:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    4acc:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    4adc:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    4aec:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    4afc:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    4b0c:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    4b1c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    4b2c:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    4b3c:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    4b4c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    4b5c:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    4b6c:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    4b7c:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    4b8c:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    4b9c:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    4bac:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    4bbc:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    4bcc:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    4bdc:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    4bec:	0000 0000 001e 0000 0004 0000 0006 0000     ................
    4bfc:	00ff ffff 0100 000a 0000 0000 001f 0000     ................
    4c0c:	0004 0000 0006 0000 00ff ffff 0101 000b     ................

00004c1c <_ZTV4Uart>:
	...
    4c24:	2629 0000 0325 0000 254f 0000 250b 0000     )&..%...O%...%..
    4c34:	2525 0000 26dd 0000 22ed 0000 22dd 0000     %%...&..."..."..
    4c44:	2371 0000 2307 0000 22d9 0000 3124 0000     q#...#..."..$1..
    4c54:	3106 0000 30c0 0000 2fde 0000 30c0 0000     .1...0.../...0..
    4c64:	30f8 0000 30c0 0000 2fde 0000 3106 0000     .0...0.../...1..
    4c74:	3106 0000 30f8 0000 2fde 0000 2fd6 0000     .1...0.../.../..
    4c84:	2fd6 0000 2fd6 0000 333c 0000 3984 0000     ./.../..<3...9..
    4c94:	3844 0000 3844 0000 3840 0000 395c 0000     D8..D8..@8..\9..
    4ca4:	395c 0000 394e 0000 3840 0000 395c 0000     \9..N9..@8..\9..
    4cb4:	394e 0000 395c 0000 3840 0000 3964 0000     N9..\9..@8..d9..
    4cc4:	3964 0000 3964 0000 3b68 0000               d9..d9..h;..

00004cd0 <__EH_FRAME_BEGIN__>:
    4cd0:	0000 0000                                   ....
