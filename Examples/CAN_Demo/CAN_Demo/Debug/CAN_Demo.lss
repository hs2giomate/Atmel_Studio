
CAN_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d54  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001f8  20000000  00003d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000201f8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000201f8  2**0
                  CONTENTS
  4 .bss          000002a4  200001f8  00003f4c  000201f8  2**2
                  ALLOC
  5 .stack        00010004  2000049c  000041f0  000201f8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029a84  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000031a9  00000000  00000000  00049d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b389  00000000  00000000  0004ceac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000998  00000000  00000000  00058235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  00058bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033ee2  00000000  00000000  000598b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012890  00000000  00000000  0008d797  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011b382  00000000  00000000  000a0027  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000249c  00000000  00000000  001bb3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 04 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	8d 10 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 89 0d 00 00 05 0e 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200001f8 	.word	0x200001f8
     280:	00000000 	.word	0x00000000
     284:	00003d54 	.word	0x00003d54

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003d54 	.word	0x00003d54
     2c4:	200001fc 	.word	0x200001fc
     2c8:	00003d54 	.word	0x00003d54
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000519 	.word	0x00000519
     2e0:	000017a5 	.word	0x000017a5

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00003d54 	.word	0x00003d54
     364:	200001f8 	.word	0x200001f8
     368:	2000049c 	.word	0x2000049c
     36c:	200001f8 	.word	0x200001f8
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	000017c5 	.word	0x000017c5
     37c:	000012d1 	.word	0x000012d1

00000380 <TARGET_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <TARGET_IO_PORT_init+0x44>)
     382:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     392:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     396:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     39a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ae:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b2:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3be:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     3c2:	4770      	bx	lr
     3c4:	41008000 	.word	0x41008000

000003c8 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3c8:	4b06      	ldr	r3, [pc, #24]	; (3e4 <TARGET_IO_CLOCK_init+0x1c>)
     3ca:	2240      	movs	r2, #64	; 0x40
     3cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     3d0:	2243      	movs	r2, #67	; 0x43
     3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     3d6:	4a04      	ldr	r2, [pc, #16]	; (3e8 <TARGET_IO_CLOCK_init+0x20>)
     3d8:	6a13      	ldr	r3, [r2, #32]
     3da:	f043 0301 	orr.w	r3, r3, #1
     3de:	6213      	str	r3, [r2, #32]
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
     3e4:	40001c00 	.word	0x40001c00
     3e8:	40000800 	.word	0x40000800

000003ec <TARGET_IO_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void TARGET_IO_init(void)
{
     3ec:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <TARGET_IO_init+0x18>)
     3f0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     3f2:	2200      	movs	r2, #0
     3f4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     3f8:	4803      	ldr	r0, [pc, #12]	; (408 <TARGET_IO_init+0x1c>)
     3fa:	4b04      	ldr	r3, [pc, #16]	; (40c <TARGET_IO_init+0x20>)
     3fc:	4798      	blx	r3
	TARGET_IO_PORT_init();
     3fe:	4b04      	ldr	r3, [pc, #16]	; (410 <TARGET_IO_init+0x24>)
     400:	4798      	blx	r3
     402:	bd08      	pop	{r3, pc}
     404:	000003c9 	.word	0x000003c9
     408:	200002a4 	.word	0x200002a4
     40c:	0000081d 	.word	0x0000081d
     410:	00000381 	.word	0x00000381

00000414 <CAN_MAX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     414:	4b10      	ldr	r3, [pc, #64]	; (458 <CAN_MAX_PORT_init+0x44>)
     416:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     41a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     41e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     422:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     426:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     42a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     42e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     432:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     436:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     43a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     43e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     442:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     446:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     44a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     44e:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     452:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     456:	4770      	bx	lr
     458:	41008000 	.word	0x41008000

0000045c <CAN_MAX_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_MAX_init(void)
{
     45c:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     45e:	4a08      	ldr	r2, [pc, #32]	; (480 <CAN_MAX_init+0x24>)
     460:	6913      	ldr	r3, [r2, #16]
     462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     466:	6113      	str	r3, [r2, #16]
     468:	2241      	movs	r2, #65	; 0x41
     46a:	4b06      	ldr	r3, [pc, #24]	; (484 <CAN_MAX_init+0x28>)
     46c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_MAX, CAN0);
     470:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
     474:	4804      	ldr	r0, [pc, #16]	; (488 <CAN_MAX_init+0x2c>)
     476:	4b05      	ldr	r3, [pc, #20]	; (48c <CAN_MAX_init+0x30>)
     478:	4798      	blx	r3
	CAN_MAX_PORT_init();
     47a:	4b05      	ldr	r3, [pc, #20]	; (490 <CAN_MAX_init+0x34>)
     47c:	4798      	blx	r3
     47e:	bd08      	pop	{r3, pc}
     480:	40000800 	.word	0x40000800
     484:	40001c00 	.word	0x40001c00
     488:	200002b0 	.word	0x200002b0
     48c:	0000058d 	.word	0x0000058d
     490:	00000415 	.word	0x00000415

00000494 <CAN_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     494:	4b10      	ldr	r3, [pc, #64]	; (4d8 <CAN_0_PORT_init+0x44>)
     496:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a6:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ae:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b2:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c6:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4ce:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d2:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     4d6:	4770      	bx	lr
     4d8:	41008000 	.word	0x41008000

000004dc <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     4dc:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     4de:	4a08      	ldr	r2, [pc, #32]	; (500 <CAN_0_init+0x24>)
     4e0:	6913      	ldr	r3, [r2, #16]
     4e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     4e6:	6113      	str	r3, [r2, #16]
     4e8:	2241      	movs	r2, #65	; 0x41
     4ea:	4b06      	ldr	r3, [pc, #24]	; (504 <CAN_0_init+0x28>)
     4ec:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN1);
     4f0:	4905      	ldr	r1, [pc, #20]	; (508 <CAN_0_init+0x2c>)
     4f2:	4806      	ldr	r0, [pc, #24]	; (50c <CAN_0_init+0x30>)
     4f4:	4b06      	ldr	r3, [pc, #24]	; (510 <CAN_0_init+0x34>)
     4f6:	4798      	blx	r3
	CAN_0_PORT_init();
     4f8:	4b06      	ldr	r3, [pc, #24]	; (514 <CAN_0_init+0x38>)
     4fa:	4798      	blx	r3
     4fc:	bd08      	pop	{r3, pc}
     4fe:	bf00      	nop
     500:	40000800 	.word	0x40000800
     504:	40001c00 	.word	0x40001c00
     508:	42000400 	.word	0x42000400
     50c:	2000027c 	.word	0x2000027c
     510:	0000058d 	.word	0x0000058d
     514:	00000495 	.word	0x00000495

00000518 <system_init>:
}

void system_init(void)
{
     518:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     51a:	4b0f      	ldr	r3, [pc, #60]	; (558 <system_init+0x40>)
     51c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     51e:	4b0f      	ldr	r3, [pc, #60]	; (55c <system_init+0x44>)
     520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     524:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     528:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     530:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     534:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     538:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     544:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);

	TARGET_IO_init();
     548:	4b05      	ldr	r3, [pc, #20]	; (560 <system_init+0x48>)
     54a:	4798      	blx	r3
	CAN_MAX_init();
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <system_init+0x4c>)
     54e:	4798      	blx	r3
	CAN_0_init();
     550:	4b05      	ldr	r3, [pc, #20]	; (568 <system_init+0x50>)
     552:	4798      	blx	r3
     554:	bd08      	pop	{r3, pc}
     556:	bf00      	nop
     558:	00000e81 	.word	0x00000e81
     55c:	41008000 	.word	0x41008000
     560:	000003ed 	.word	0x000003ed
     564:	0000045d 	.word	0x0000045d
     568:	000004dd 	.word	0x000004dd

0000056c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     56c:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     56e:	69c3      	ldr	r3, [r0, #28]
     570:	b103      	cbz	r3, 574 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
     572:	4798      	blx	r3
     574:	bd08      	pop	{r3, pc}

00000576 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     576:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     578:	6a03      	ldr	r3, [r0, #32]
     57a:	b103      	cbz	r3, 57e <can_rx_done+0x8>
		descr->cb.rx_done(descr);
     57c:	4798      	blx	r3
     57e:	bd08      	pop	{r3, pc}

00000580 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     580:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     582:	6a43      	ldr	r3, [r0, #36]	; 0x24
     584:	b103      	cbz	r3, 588 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
     586:	4798      	blx	r3
     588:	bd08      	pop	{r3, pc}
	...

0000058c <can_async_init>:
{
     58c:	b538      	push	{r3, r4, r5, lr}
     58e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     590:	4604      	mov	r4, r0
     592:	b1a0      	cbz	r0, 5be <can_async_init+0x32>
     594:	1c08      	adds	r0, r1, #0
     596:	bf18      	it	ne
     598:	2001      	movne	r0, #1
     59a:	2241      	movs	r2, #65	; 0x41
     59c:	4909      	ldr	r1, [pc, #36]	; (5c4 <can_async_init+0x38>)
     59e:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <can_async_init+0x3c>)
     5a0:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     5a2:	4629      	mov	r1, r5
     5a4:	4620      	mov	r0, r4
     5a6:	4b09      	ldr	r3, [pc, #36]	; (5cc <can_async_init+0x40>)
     5a8:	4798      	blx	r3
	if (rc) {
     5aa:	4603      	mov	r3, r0
     5ac:	b928      	cbnz	r0, 5ba <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
     5ae:	4a08      	ldr	r2, [pc, #32]	; (5d0 <can_async_init+0x44>)
     5b0:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     5b2:	4a08      	ldr	r2, [pc, #32]	; (5d4 <can_async_init+0x48>)
     5b4:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     5b6:	4a08      	ldr	r2, [pc, #32]	; (5d8 <can_async_init+0x4c>)
     5b8:	60e2      	str	r2, [r4, #12]
}
     5ba:	4618      	mov	r0, r3
     5bc:	bd38      	pop	{r3, r4, r5, pc}
     5be:	2000      	movs	r0, #0
     5c0:	e7eb      	b.n	59a <can_async_init+0xe>
     5c2:	bf00      	nop
     5c4:	00003520 	.word	0x00003520
     5c8:	00000891 	.word	0x00000891
     5cc:	000008d5 	.word	0x000008d5
     5d0:	0000056d 	.word	0x0000056d
     5d4:	00000577 	.word	0x00000577
     5d8:	00000581 	.word	0x00000581

000005dc <can_async_enable>:
{
     5dc:	b510      	push	{r4, lr}
	ASSERT(descr);
     5de:	4604      	mov	r4, r0
     5e0:	225c      	movs	r2, #92	; 0x5c
     5e2:	4905      	ldr	r1, [pc, #20]	; (5f8 <can_async_enable+0x1c>)
     5e4:	3000      	adds	r0, #0
     5e6:	bf18      	it	ne
     5e8:	2001      	movne	r0, #1
     5ea:	4b04      	ldr	r3, [pc, #16]	; (5fc <can_async_enable+0x20>)
     5ec:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
     5ee:	4620      	mov	r0, r4
     5f0:	4b03      	ldr	r3, [pc, #12]	; (600 <can_async_enable+0x24>)
     5f2:	4798      	blx	r3
}
     5f4:	bd10      	pop	{r4, pc}
     5f6:	bf00      	nop
     5f8:	00003520 	.word	0x00003520
     5fc:	00000891 	.word	0x00000891
     600:	00000ab1 	.word	0x00000ab1

00000604 <can_async_read>:
{
     604:	b538      	push	{r3, r4, r5, lr}
     606:	460c      	mov	r4, r1
	ASSERT(descr && msg);
     608:	4605      	mov	r5, r0
     60a:	b158      	cbz	r0, 624 <can_async_read+0x20>
     60c:	1c08      	adds	r0, r1, #0
     60e:	bf18      	it	ne
     610:	2001      	movne	r0, #1
     612:	226e      	movs	r2, #110	; 0x6e
     614:	4904      	ldr	r1, [pc, #16]	; (628 <can_async_read+0x24>)
     616:	4b05      	ldr	r3, [pc, #20]	; (62c <can_async_read+0x28>)
     618:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
     61a:	4621      	mov	r1, r4
     61c:	4628      	mov	r0, r5
     61e:	4b04      	ldr	r3, [pc, #16]	; (630 <can_async_read+0x2c>)
     620:	4798      	blx	r3
}
     622:	bd38      	pop	{r3, r4, r5, pc}
     624:	2000      	movs	r0, #0
     626:	e7f4      	b.n	612 <can_async_read+0xe>
     628:	00003520 	.word	0x00003520
     62c:	00000891 	.word	0x00000891
     630:	00000ac1 	.word	0x00000ac1

00000634 <can_async_write>:
{
     634:	b538      	push	{r3, r4, r5, lr}
     636:	460c      	mov	r4, r1
	ASSERT(descr && msg);
     638:	4605      	mov	r5, r0
     63a:	b158      	cbz	r0, 654 <can_async_write+0x20>
     63c:	1c08      	adds	r0, r1, #0
     63e:	bf18      	it	ne
     640:	2001      	movne	r0, #1
     642:	2277      	movs	r2, #119	; 0x77
     644:	4904      	ldr	r1, [pc, #16]	; (658 <can_async_write+0x24>)
     646:	4b05      	ldr	r3, [pc, #20]	; (65c <can_async_write+0x28>)
     648:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
     64a:	4621      	mov	r1, r4
     64c:	4628      	mov	r0, r5
     64e:	4b04      	ldr	r3, [pc, #16]	; (660 <can_async_write+0x2c>)
     650:	4798      	blx	r3
}
     652:	bd38      	pop	{r3, r4, r5, pc}
     654:	2000      	movs	r0, #0
     656:	e7f4      	b.n	642 <can_async_write+0xe>
     658:	00003520 	.word	0x00003520
     65c:	00000891 	.word	0x00000891
     660:	00000b91 	.word	0x00000b91

00000664 <can_async_register_callback>:
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	460c      	mov	r4, r1
     668:	4616      	mov	r6, r2
	ASSERT(descr);
     66a:	4605      	mov	r5, r0
     66c:	2281      	movs	r2, #129	; 0x81
     66e:	490e      	ldr	r1, [pc, #56]	; (6a8 <can_async_register_callback+0x44>)
     670:	3000      	adds	r0, #0
     672:	bf18      	it	ne
     674:	2001      	movne	r0, #1
     676:	4b0d      	ldr	r3, [pc, #52]	; (6ac <can_async_register_callback+0x48>)
     678:	4798      	blx	r3
	switch (type) {
     67a:	2c01      	cmp	r4, #1
     67c:	d00f      	beq.n	69e <can_async_register_callback+0x3a>
     67e:	b124      	cbz	r4, 68a <can_async_register_callback+0x26>
     680:	2c02      	cmp	r4, #2
     682:	d00e      	beq.n	6a2 <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
     684:	f06f 000c 	mvn.w	r0, #12
}
     688:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     68a:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
     68c:	1c32      	adds	r2, r6, #0
     68e:	bf18      	it	ne
     690:	2201      	movne	r2, #1
     692:	4621      	mov	r1, r4
     694:	4628      	mov	r0, r5
     696:	4b06      	ldr	r3, [pc, #24]	; (6b0 <can_async_register_callback+0x4c>)
     698:	4798      	blx	r3
	return ERR_NONE;
     69a:	2000      	movs	r0, #0
     69c:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     69e:	61ee      	str	r6, [r5, #28]
		break;
     6a0:	e7f4      	b.n	68c <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
     6a2:	626e      	str	r6, [r5, #36]	; 0x24
		break;
     6a4:	e7f2      	b.n	68c <can_async_register_callback+0x28>
     6a6:	bf00      	nop
     6a8:	00003520 	.word	0x00003520
     6ac:	00000891 	.word	0x00000891
     6b0:	00000cc5 	.word	0x00000cc5

000006b4 <can_async_set_filter>:
{
     6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6b6:	460d      	mov	r5, r1
     6b8:	4616      	mov	r6, r2
     6ba:	461f      	mov	r7, r3
	ASSERT(descr);
     6bc:	4604      	mov	r4, r0
     6be:	22b8      	movs	r2, #184	; 0xb8
     6c0:	4906      	ldr	r1, [pc, #24]	; (6dc <can_async_set_filter+0x28>)
     6c2:	3000      	adds	r0, #0
     6c4:	bf18      	it	ne
     6c6:	2001      	movne	r0, #1
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <can_async_set_filter+0x2c>)
     6ca:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
     6cc:	463b      	mov	r3, r7
     6ce:	4632      	mov	r2, r6
     6d0:	4629      	mov	r1, r5
     6d2:	4620      	mov	r0, r4
     6d4:	4c03      	ldr	r4, [pc, #12]	; (6e4 <can_async_set_filter+0x30>)
     6d6:	47a0      	blx	r4
}
     6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6da:	bf00      	nop
     6dc:	00003520 	.word	0x00003520
     6e0:	00000891 	.word	0x00000891
     6e4:	00000d09 	.word	0x00000d09

000006e8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6e8:	b570      	push	{r4, r5, r6, lr}
     6ea:	460d      	mov	r5, r1
     6ec:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     6ee:	4604      	mov	r4, r0
     6f0:	b160      	cbz	r0, 70c <io_write+0x24>
     6f2:	1c08      	adds	r0, r1, #0
     6f4:	bf18      	it	ne
     6f6:	2001      	movne	r0, #1
     6f8:	2234      	movs	r2, #52	; 0x34
     6fa:	4905      	ldr	r1, [pc, #20]	; (710 <io_write+0x28>)
     6fc:	4b05      	ldr	r3, [pc, #20]	; (714 <io_write+0x2c>)
     6fe:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     700:	6823      	ldr	r3, [r4, #0]
     702:	4632      	mov	r2, r6
     704:	4629      	mov	r1, r5
     706:	4620      	mov	r0, r4
     708:	4798      	blx	r3
}
     70a:	bd70      	pop	{r4, r5, r6, pc}
     70c:	2000      	movs	r0, #0
     70e:	e7f3      	b.n	6f8 <io_write+0x10>
     710:	0000353c 	.word	0x0000353c
     714:	00000891 	.word	0x00000891

00000718 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     718:	b570      	push	{r4, r5, r6, lr}
     71a:	460d      	mov	r5, r1
     71c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     71e:	4604      	mov	r4, r0
     720:	b160      	cbz	r0, 73c <io_read+0x24>
     722:	1c08      	adds	r0, r1, #0
     724:	bf18      	it	ne
     726:	2001      	movne	r0, #1
     728:	223d      	movs	r2, #61	; 0x3d
     72a:	4905      	ldr	r1, [pc, #20]	; (740 <io_read+0x28>)
     72c:	4b05      	ldr	r3, [pc, #20]	; (744 <io_read+0x2c>)
     72e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     730:	6863      	ldr	r3, [r4, #4]
     732:	4632      	mov	r2, r6
     734:	4629      	mov	r1, r5
     736:	4620      	mov	r0, r4
     738:	4798      	blx	r3
}
     73a:	bd70      	pop	{r4, r5, r6, pc}
     73c:	2000      	movs	r0, #0
     73e:	e7f3      	b.n	728 <io_read+0x10>
     740:	0000353c 	.word	0x0000353c
     744:	00000891 	.word	0x00000891

00000748 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     74c:	460f      	mov	r7, r1
     74e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     750:	4604      	mov	r4, r0
     752:	b328      	cbz	r0, 7a0 <usart_sync_write+0x58>
     754:	b331      	cbz	r1, 7a4 <usart_sync_write+0x5c>
     756:	1c10      	adds	r0, r2, #0
     758:	bf18      	it	ne
     75a:	2001      	movne	r0, #1
     75c:	22f1      	movs	r2, #241	; 0xf1
     75e:	4912      	ldr	r1, [pc, #72]	; (7a8 <usart_sync_write+0x60>)
     760:	4b12      	ldr	r3, [pc, #72]	; (7ac <usart_sync_write+0x64>)
     762:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     764:	3408      	adds	r4, #8
     766:	4d12      	ldr	r5, [pc, #72]	; (7b0 <usart_sync_write+0x68>)
     768:	4620      	mov	r0, r4
     76a:	47a8      	blx	r5
     76c:	2800      	cmp	r0, #0
     76e:	d0fb      	beq.n	768 <usart_sync_write+0x20>
     770:	3f01      	subs	r7, #1
     772:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     774:	f8df 9040 	ldr.w	r9, [pc, #64]	; 7b8 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     778:	4d0d      	ldr	r5, [pc, #52]	; (7b0 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     77a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     77e:	4620      	mov	r0, r4
     780:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     782:	4620      	mov	r0, r4
     784:	47a8      	blx	r5
     786:	2800      	cmp	r0, #0
     788:	d0fb      	beq.n	782 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     78a:	3601      	adds	r6, #1
     78c:	4546      	cmp	r6, r8
     78e:	d3f4      	bcc.n	77a <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     790:	4d08      	ldr	r5, [pc, #32]	; (7b4 <usart_sync_write+0x6c>)
     792:	4620      	mov	r0, r4
     794:	47a8      	blx	r5
     796:	2800      	cmp	r0, #0
     798:	d0fb      	beq.n	792 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     79a:	4630      	mov	r0, r6
     79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     7a0:	2000      	movs	r0, #0
     7a2:	e7db      	b.n	75c <usart_sync_write+0x14>
     7a4:	2000      	movs	r0, #0
     7a6:	e7d9      	b.n	75c <usart_sync_write+0x14>
     7a8:	00003550 	.word	0x00003550
     7ac:	00000891 	.word	0x00000891
     7b0:	00001203 	.word	0x00001203
     7b4:	0000120d 	.word	0x0000120d
     7b8:	000011f5 	.word	0x000011f5

000007bc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7c0:	460f      	mov	r7, r1
     7c2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7c4:	4604      	mov	r4, r0
     7c6:	b1e0      	cbz	r0, 802 <usart_sync_read+0x46>
     7c8:	b1e9      	cbz	r1, 806 <usart_sync_read+0x4a>
     7ca:	1c10      	adds	r0, r2, #0
     7cc:	bf18      	it	ne
     7ce:	2001      	movne	r0, #1
     7d0:	f44f 7286 	mov.w	r2, #268	; 0x10c
     7d4:	490d      	ldr	r1, [pc, #52]	; (80c <usart_sync_read+0x50>)
     7d6:	4b0e      	ldr	r3, [pc, #56]	; (810 <usart_sync_read+0x54>)
     7d8:	4798      	blx	r3
     7da:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     7dc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     7de:	3408      	adds	r4, #8
     7e0:	4d0c      	ldr	r5, [pc, #48]	; (814 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7e2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 818 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     7e6:	4620      	mov	r0, r4
     7e8:	47a8      	blx	r5
     7ea:	2800      	cmp	r0, #0
     7ec:	d0fb      	beq.n	7e6 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7ee:	4620      	mov	r0, r4
     7f0:	47c8      	blx	r9
     7f2:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     7f6:	3601      	adds	r6, #1
     7f8:	4546      	cmp	r6, r8
     7fa:	d3f4      	bcc.n	7e6 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     7fc:	4630      	mov	r0, r6
     7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     802:	2000      	movs	r0, #0
     804:	e7e4      	b.n	7d0 <usart_sync_read+0x14>
     806:	2000      	movs	r0, #0
     808:	e7e2      	b.n	7d0 <usart_sync_read+0x14>
     80a:	bf00      	nop
     80c:	00003550 	.word	0x00003550
     810:	00000891 	.word	0x00000891
     814:	00001217 	.word	0x00001217
     818:	000011fb 	.word	0x000011fb

0000081c <usart_sync_init>:
{
     81c:	b538      	push	{r3, r4, r5, lr}
     81e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     820:	4604      	mov	r4, r0
     822:	b198      	cbz	r0, 84c <usart_sync_init+0x30>
     824:	1c08      	adds	r0, r1, #0
     826:	bf18      	it	ne
     828:	2001      	movne	r0, #1
     82a:	2234      	movs	r2, #52	; 0x34
     82c:	4908      	ldr	r1, [pc, #32]	; (850 <usart_sync_init+0x34>)
     82e:	4b09      	ldr	r3, [pc, #36]	; (854 <usart_sync_init+0x38>)
     830:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     832:	4629      	mov	r1, r5
     834:	f104 0008 	add.w	r0, r4, #8
     838:	4b07      	ldr	r3, [pc, #28]	; (858 <usart_sync_init+0x3c>)
     83a:	4798      	blx	r3
	if (init_status) {
     83c:	4603      	mov	r3, r0
     83e:	b918      	cbnz	r0, 848 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     840:	4a06      	ldr	r2, [pc, #24]	; (85c <usart_sync_init+0x40>)
     842:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     844:	4a06      	ldr	r2, [pc, #24]	; (860 <usart_sync_init+0x44>)
     846:	6022      	str	r2, [r4, #0]
}
     848:	4618      	mov	r0, r3
     84a:	bd38      	pop	{r3, r4, r5, pc}
     84c:	2000      	movs	r0, #0
     84e:	e7ec      	b.n	82a <usart_sync_init+0xe>
     850:	00003550 	.word	0x00003550
     854:	00000891 	.word	0x00000891
     858:	000011b5 	.word	0x000011b5
     85c:	000007bd 	.word	0x000007bd
     860:	00000749 	.word	0x00000749

00000864 <usart_sync_enable>:
{
     864:	b510      	push	{r4, lr}
	ASSERT(descr);
     866:	4604      	mov	r4, r0
     868:	2253      	movs	r2, #83	; 0x53
     86a:	4906      	ldr	r1, [pc, #24]	; (884 <usart_sync_enable+0x20>)
     86c:	3000      	adds	r0, #0
     86e:	bf18      	it	ne
     870:	2001      	movne	r0, #1
     872:	4b05      	ldr	r3, [pc, #20]	; (888 <usart_sync_enable+0x24>)
     874:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     876:	f104 0008 	add.w	r0, r4, #8
     87a:	4b04      	ldr	r3, [pc, #16]	; (88c <usart_sync_enable+0x28>)
     87c:	4798      	blx	r3
}
     87e:	2000      	movs	r0, #0
     880:	bd10      	pop	{r4, pc}
     882:	bf00      	nop
     884:	00003550 	.word	0x00003550
     888:	00000891 	.word	0x00000891
     88c:	000011e1 	.word	0x000011e1

00000890 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     890:	b900      	cbnz	r0, 894 <assert+0x4>
		__asm("BKPT #0");
     892:	be00      	bkpt	0x0000
     894:	4770      	bx	lr
	...

00000898 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     898:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     89a:	4a06      	ldr	r2, [pc, #24]	; (8b4 <_sbrk+0x1c>)
     89c:	6812      	ldr	r2, [r2, #0]
     89e:	b122      	cbz	r2, 8aa <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8a0:	4a04      	ldr	r2, [pc, #16]	; (8b4 <_sbrk+0x1c>)
     8a2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     8a4:	4403      	add	r3, r0
     8a6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     8a8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     8aa:	4903      	ldr	r1, [pc, #12]	; (8b8 <_sbrk+0x20>)
     8ac:	4a01      	ldr	r2, [pc, #4]	; (8b4 <_sbrk+0x1c>)
     8ae:	6011      	str	r1, [r2, #0]
     8b0:	e7f6      	b.n	8a0 <_sbrk+0x8>
     8b2:	bf00      	nop
     8b4:	20000214 	.word	0x20000214
     8b8:	200104a0 	.word	0x200104a0

000008bc <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     8bc:	f04f 30ff 	mov.w	r0, #4294967295
     8c0:	4770      	bx	lr

000008c2 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     8c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     8c6:	604b      	str	r3, [r1, #4]

	return 0;
}
     8c8:	2000      	movs	r0, #0
     8ca:	4770      	bx	lr

000008cc <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     8cc:	2001      	movs	r0, #1
     8ce:	4770      	bx	lr

000008d0 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     8d0:	2000      	movs	r0, #0
     8d2:	4770      	bx	lr

000008d4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     8d4:	b430      	push	{r4, r5}
	dev->hw = hw;
     8d6:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     8d8:	698b      	ldr	r3, [r1, #24]
     8da:	f043 0301 	orr.w	r3, r3, #1
     8de:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     8e0:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     8e2:	6993      	ldr	r3, [r2, #24]
     8e4:	f013 0f01 	tst.w	r3, #1
     8e8:	d0fb      	beq.n	8e2 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     8ea:	6993      	ldr	r3, [r2, #24]
     8ec:	f043 0302 	orr.w	r3, r3, #2
     8f0:	6193      	str	r3, [r2, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
     8f2:	f1b1 4f84 	cmp.w	r1, #1107296256	; 0x42000000
     8f6:	d014      	beq.n	922 <_can_async_init+0x4e>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
     8f8:	4b62      	ldr	r3, [pc, #392]	; (a84 <_can_async_init+0x1b0>)
     8fa:	4299      	cmp	r1, r3
     8fc:	d067      	beq.n	9ce <_can_async_init+0xfa>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     8fe:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     900:	6993      	ldr	r3, [r2, #24]
     902:	f023 0302 	bic.w	r3, r3, #2
     906:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     908:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     90a:	6993      	ldr	r3, [r2, #24]
     90c:	f023 0301 	bic.w	r3, r3, #1
     910:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     912:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     914:	6993      	ldr	r3, [r2, #24]
     916:	f013 0f01 	tst.w	r3, #1
     91a:	d1fb      	bne.n	914 <_can_async_init+0x40>
	};

	return ERR_NONE;
}
     91c:	2000      	movs	r0, #0
     91e:	bc30      	pop	{r4, r5}
     920:	4770      	bx	lr
		_can0_dev    = dev;
     922:	4b59      	ldr	r3, [pc, #356]	; (a88 <_can_async_init+0x1b4>)
     924:	461a      	mov	r2, r3
     926:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can0_context;
     92a:	4958      	ldr	r1, [pc, #352]	; (a8c <_can_async_init+0x1b8>)
     92c:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
     92e:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     930:	69a1      	ldr	r1, [r4, #24]
     932:	f441 7140 	orr.w	r1, r1, #768	; 0x300
     936:	61a1      	str	r1, [r4, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
     938:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     93a:	2400      	movs	r4, #0
     93c:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
     93e:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     940:	4d53      	ldr	r5, [pc, #332]	; (a90 <_can_async_init+0x1bc>)
     942:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
     944:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     946:	f640 5543 	movw	r5, #3395	; 0xd43
     94a:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
     94c:	6805      	ldr	r5, [r0, #0]
     94e:	4951      	ldr	r1, [pc, #324]	; (a94 <_can_async_init+0x1c0>)
     950:	b289      	uxth	r1, r1
     952:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     956:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN0_RXESC_REG);
     95a:	6805      	ldr	r5, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     95c:	2107      	movs	r1, #7
     95e:	f8c5 10bc 	str.w	r1, [r5, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN0_TXESC_REG);
     962:	6805      	ldr	r5, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     964:	f8c5 10c8 	str.w	r1, [r5, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
     968:	6805      	ldr	r5, [r0, #0]
     96a:	494b      	ldr	r1, [pc, #300]	; (a98 <_can_async_init+0x1c4>)
     96c:	b289      	uxth	r1, r1
     96e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
     972:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
     976:	6801      	ldr	r1, [r0, #0]
     978:	b292      	uxth	r2, r2
     97a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     97e:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN0_GFC_REG);
     982:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
     984:	2128      	movs	r1, #40	; 0x28
     986:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
     98a:	6801      	ldr	r1, [r0, #0]
     98c:	f103 0214 	add.w	r2, r3, #20
     990:	b292      	uxth	r2, r2
     992:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
     996:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
     99a:	6802      	ldr	r2, [r0, #0]
     99c:	331c      	adds	r3, #28
     99e:	b29b      	uxth	r3, r3
     9a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
     9a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN0_XIDAM_REG);
     9a8:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
     9aa:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9ae:	4b3b      	ldr	r3, [pc, #236]	; (a9c <_can_async_init+0x1c8>)
     9b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
     9b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     9bc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9c0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9c4:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     9c6:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     9c8:	2201      	movs	r2, #1
     9ca:	65da      	str	r2, [r3, #92]	; 0x5c
     9cc:	e797      	b.n	8fe <_can_async_init+0x2a>
		_can1_dev    = dev;
     9ce:	4b2e      	ldr	r3, [pc, #184]	; (a88 <_can_async_init+0x1b4>)
     9d0:	62d8      	str	r0, [r3, #44]	; 0x2c
		dev->context = (void *)&_can1_context;
     9d2:	4a33      	ldr	r2, [pc, #204]	; (aa0 <_can_async_init+0x1cc>)
     9d4:	6182      	str	r2, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
     9d6:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->CCCR.reg |= mask;
     9d8:	698a      	ldr	r2, [r1, #24]
     9da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
     9de:	618a      	str	r2, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
     9e0:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     9e2:	2102      	movs	r1, #2
     9e4:	6091      	str	r1, [r2, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
     9e6:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->NBTP.reg = data;
     9e8:	492e      	ldr	r1, [pc, #184]	; (aa4 <_can_async_init+0x1d0>)
     9ea:	61d1      	str	r1, [r2, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
     9ec:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     9ee:	f640 4113 	movw	r1, #3091	; 0xc13
     9f2:	60d1      	str	r1, [r2, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
     9f4:	6801      	ldr	r1, [r0, #0]
     9f6:	4a2c      	ldr	r2, [pc, #176]	; (aa8 <_can_async_init+0x1d4>)
     9f8:	b292      	uxth	r2, r2
     9fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     9fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
	((Can *)hw)->RXF0C.reg = data;
     a02:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
     a06:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->RXESC.reg = data;
     a08:	2207      	movs	r2, #7
     a0a:	f8c1 20bc 	str.w	r2, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
     a0e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->TXESC.reg = data;
     a10:	f8c1 20c8 	str.w	r2, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
     a14:	6801      	ldr	r1, [r0, #0]
     a16:	4a25      	ldr	r2, [pc, #148]	; (aac <_can_async_init+0x1d8>)
     a18:	b292      	uxth	r2, r2
     a1a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
	((Can *)hw)->TXBC.reg = data;
     a1e:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
     a22:	6801      	ldr	r1, [r0, #0]
     a24:	f103 0230 	add.w	r2, r3, #48	; 0x30
     a28:	b292      	uxth	r2, r2
     a2a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->TXEFC.reg = data;
     a2e:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
     a32:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
     a34:	2128      	movs	r1, #40	; 0x28
     a36:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
     a3a:	6801      	ldr	r1, [r0, #0]
     a3c:	f103 0240 	add.w	r2, r3, #64	; 0x40
     a40:	b292      	uxth	r2, r2
     a42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
     a46:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
     a4a:	6802      	ldr	r2, [r0, #0]
     a4c:	3348      	adds	r3, #72	; 0x48
     a4e:	b29b      	uxth	r3, r3
     a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
     a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
     a58:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
     a5a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
     a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a62:	4b0e      	ldr	r3, [pc, #56]	; (a9c <_can_async_init+0x1c8>)
     a64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
     a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a70:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a74:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a78:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     a7a:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     a7c:	2201      	movs	r2, #1
     a7e:	65da      	str	r2, [r3, #92]	; 0x5c
     a80:	e73d      	b.n	8fe <_can_async_init+0x2a>
     a82:	bf00      	nop
     a84:	42000400 	.word	0x42000400
     a88:	20000218 	.word	0x20000218
     a8c:	20000000 	.word	0x20000000
     a90:	1c003a13 	.word	0x1c003a13
     a94:	200002d8 	.word	0x200002d8
     a98:	200003f8 	.word	0x200003f8
     a9c:	e000e100 	.word	0xe000e100
     aa0:	20000014 	.word	0x20000014
     aa4:	06000c01 	.word	0x06000c01
     aa8:	200003b0 	.word	0x200003b0
     aac:	20000368 	.word	0x20000368

00000ab0 <_can_async_enable>:
/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     ab0:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     ab2:	6993      	ldr	r3, [r2, #24]
     ab4:	f023 0301 	bic.w	r3, r3, #1
     ab8:	6193      	str	r3, [r2, #24]
	return ERR_NONE;
}
     aba:	2000      	movs	r0, #0
     abc:	4770      	bx	lr
	...

00000ac0 <_can_async_read>:
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
	struct _can_rx_fifo_entry *f = NULL;
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
     ac0:	6802      	ldr	r2, [r0, #0]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
     ac2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
     ac6:	f013 0f7f 	tst.w	r3, #127	; 0x7f
     aca:	d04e      	beq.n	b6a <_can_async_read+0xaa>
{
     acc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ace:	b085      	sub	sp, #20
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
     ad0:	f8d2 40a4 	ldr.w	r4, [r2, #164]	; 0xa4
     ad4:	f3c4 2405 	ubfx	r4, r4, #8, #6
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
     ad8:	f1b2 4f84 	cmp.w	r2, #1107296256	; 0x42000000
     adc:	d008      	beq.n	af0 <_can_async_read+0x30>
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
     ade:	4b27      	ldr	r3, [pc, #156]	; (b7c <_can_async_read+0xbc>)
     ae0:	429a      	cmp	r2, r3
     ae2:	d148      	bne.n	b76 <_can_async_read+0xb6>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
     ae4:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
     ae8:	4b25      	ldr	r3, [pc, #148]	; (b80 <_can_async_read+0xc0>)
     aea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
     aee:	e004      	b.n	afa <_can_async_read+0x3a>
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
     af0:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
     af4:	4b23      	ldr	r3, [pc, #140]	; (b84 <_can_async_read+0xc4>)
     af6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
	}
#endif

	if (f == NULL) {
     afa:	2e00      	cmp	r6, #0
     afc:	d038      	beq.n	b70 <_can_async_read+0xb0>
		return ERR_NO_RESOURCE;
	}

	if (f->R0.bit.XTD == 1) {
     afe:	6833      	ldr	r3, [r6, #0]
     b00:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
     b04:	d12a      	bne.n	b5c <_can_async_read+0x9c>
		msg->fmt = CAN_FMT_EXTID;
		msg->id  = f->R0.bit.ID;
	} else {
		msg->fmt = CAN_FMT_STDID;
     b06:	2300      	movs	r3, #0
     b08:	734b      	strb	r3, [r1, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
     b0a:	6833      	ldr	r3, [r6, #0]
     b0c:	f3c3 438a 	ubfx	r3, r3, #18, #11
     b10:	600b      	str	r3, [r1, #0]
	}

	if (f->R0.bit.RTR == 1) {
     b12:	6833      	ldr	r3, [r6, #0]
     b14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
		msg->type = CAN_TYPE_REMOTE;
     b18:	bf1c      	itt	ne
     b1a:	2301      	movne	r3, #1
     b1c:	710b      	strbne	r3, [r1, #4]
     b1e:	460d      	mov	r5, r1
     b20:	4607      	mov	r7, r0
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
     b22:	4b19      	ldr	r3, [pc, #100]	; (b88 <_can_async_read+0xc8>)
     b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     b26:	f10d 0e10 	add.w	lr, sp, #16
     b2a:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
     b2e:	6873      	ldr	r3, [r6, #4]
     b30:	f3c3 4303 	ubfx	r3, r3, #16, #4
     b34:	4473      	add	r3, lr
     b36:	f813 2c10 	ldrb.w	r2, [r3, #-16]
     b3a:	732a      	strb	r2, [r5, #12]

	memcpy(msg->data, f->data, msg->len);
     b3c:	f106 0108 	add.w	r1, r6, #8
     b40:	68a8      	ldr	r0, [r5, #8]
     b42:	4b12      	ldr	r3, [pc, #72]	; (b8c <_can_async_read+0xcc>)
     b44:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
     b46:	683a      	ldr	r2, [r7, #0]
	tmp = ((Can *)hw)->RXF0A.reg;
     b48:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~CAN_RXF0A_F0AI_Msk;
     b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= CAN_RXF0A_F0AI(data);
     b50:	4323      	orrs	r3, r4
	((Can *)hw)->RXF0A.reg = tmp;
     b52:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	return ERR_NONE;
     b56:	2000      	movs	r0, #0
}
     b58:	b005      	add	sp, #20
     b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->fmt = CAN_FMT_EXTID;
     b5c:	2301      	movs	r3, #1
     b5e:	734b      	strb	r3, [r1, #13]
		msg->id  = f->R0.bit.ID;
     b60:	6833      	ldr	r3, [r6, #0]
     b62:	f3c3 031c 	ubfx	r3, r3, #0, #29
     b66:	600b      	str	r3, [r1, #0]
     b68:	e7d3      	b.n	b12 <_can_async_read+0x52>
		return ERR_NOT_FOUND;
     b6a:	f06f 0009 	mvn.w	r0, #9
     b6e:	4770      	bx	lr
		return ERR_NO_RESOURCE;
     b70:	f06f 001b 	mvn.w	r0, #27
     b74:	e7f0      	b.n	b58 <_can_async_read+0x98>
     b76:	f06f 001b 	mvn.w	r0, #27
     b7a:	e7ed      	b.n	b58 <_can_async_read+0x98>
     b7c:	42000400 	.word	0x42000400
     b80:	200003b0 	.word	0x200003b0
     b84:	200002d8 	.word	0x200002d8
     b88:	0000356c 	.word	0x0000356c
     b8c:	0000180d 	.word	0x0000180d

00000b90 <_can_async_write>:
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
	struct _can_tx_fifo_entry *f = NULL;
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
     b90:	6802      	ldr	r2, [r0, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
     b92:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
     b96:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
     b9a:	f040 8082 	bne.w	ca2 <_can_async_write+0x112>
{
     b9e:	b510      	push	{r4, lr}
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
     ba0:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
     ba4:	f3c3 4304 	ubfx	r3, r3, #16, #5
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
     ba8:	f1b2 4f84 	cmp.w	r2, #1107296256	; 0x42000000
     bac:	d008      	beq.n	bc0 <_can_async_write+0x30>
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
     bae:	4c41      	ldr	r4, [pc, #260]	; (cb4 <_can_async_write+0x124>)
     bb0:	42a2      	cmp	r2, r4
     bb2:	d17c      	bne.n	cae <_can_async_write+0x11e>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
     bb4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     bb8:	4a3f      	ldr	r2, [pc, #252]	; (cb8 <_can_async_write+0x128>)
     bba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     bbe:	e004      	b.n	bca <_can_async_write+0x3a>
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
     bc0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     bc4:	4a3d      	ldr	r2, [pc, #244]	; (cbc <_can_async_write+0x12c>)
     bc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	}
#endif
	if (f == NULL) {
     bca:	2b00      	cmp	r3, #0
     bcc:	d06c      	beq.n	ca8 <_can_async_write+0x118>
		return ERR_NO_RESOURCE;
	}

	if (msg->fmt == CAN_FMT_EXTID) {
     bce:	7b4a      	ldrb	r2, [r1, #13]
     bd0:	2a01      	cmp	r2, #1
		f->T0.val     = msg->id;
     bd2:	680a      	ldr	r2, [r1, #0]
     bd4:	bf03      	ittte	eq
     bd6:	601a      	streq	r2, [r3, #0]
		f->T0.bit.XTD = 1;
     bd8:	681a      	ldreq	r2, [r3, #0]
     bda:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
     bde:	0492      	lslne	r2, r2, #18
     be0:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
     be2:	7b0a      	ldrb	r2, [r1, #12]
     be4:	2a08      	cmp	r2, #8
     be6:	d825      	bhi.n	c34 <_can_async_write+0xa4>
		f->T1.bit.DLC = msg->len;
     be8:	685c      	ldr	r4, [r3, #4]
     bea:	f362 4413 	bfi	r4, r2, #16, #4
     bee:	605c      	str	r4, [r3, #4]
     bf0:	4604      	mov	r4, r0
		f->T1.bit.DLC = 0xE;
	} else if (msg->len <= 64) {
		f->T1.bit.DLC = 0xF;
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
     bf2:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     bf4:	6992      	ldr	r2, [r2, #24]
	return (bool)tmp;
     bf6:	f3c2 2200 	ubfx	r2, r2, #8, #1
     bfa:	6858      	ldr	r0, [r3, #4]
     bfc:	f362 5055 	bfi	r0, r2, #21, #1
     c00:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
     c02:	6822      	ldr	r2, [r4, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     c04:	6992      	ldr	r2, [r2, #24]
	return (bool)tmp;
     c06:	f3c2 2240 	ubfx	r2, r2, #9, #1
     c0a:	6858      	ldr	r0, [r3, #4]
     c0c:	f362 5014 	bfi	r0, r2, #20, #1
     c10:	6058      	str	r0, [r3, #4]

	memcpy(f->data, msg->data, msg->len);
     c12:	7b0a      	ldrb	r2, [r1, #12]
     c14:	6889      	ldr	r1, [r1, #8]
     c16:	f103 0008 	add.w	r0, r3, #8
     c1a:	4b29      	ldr	r3, [pc, #164]	; (cc0 <_can_async_write+0x130>)
     c1c:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
     c1e:	6821      	ldr	r1, [r4, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
     c20:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
     c24:	f3c2 4204 	ubfx	r2, r2, #16, #5
     c28:	2301      	movs	r3, #1
     c2a:	4093      	lsls	r3, r2
	((Can *)hw)->TXBAR.reg = data;
     c2c:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
     c30:	2000      	movs	r0, #0
     c32:	bd10      	pop	{r4, pc}
	} else if (msg->len <= 12) {
     c34:	2a0c      	cmp	r2, #12
     c36:	d805      	bhi.n	c44 <_can_async_write+0xb4>
		f->T1.bit.DLC = 0x9;
     c38:	685a      	ldr	r2, [r3, #4]
     c3a:	2409      	movs	r4, #9
     c3c:	f364 4213 	bfi	r2, r4, #16, #4
     c40:	605a      	str	r2, [r3, #4]
     c42:	e7d5      	b.n	bf0 <_can_async_write+0x60>
	} else if (msg->len <= 16) {
     c44:	2a10      	cmp	r2, #16
     c46:	d805      	bhi.n	c54 <_can_async_write+0xc4>
		f->T1.bit.DLC = 0xA;
     c48:	685a      	ldr	r2, [r3, #4]
     c4a:	240a      	movs	r4, #10
     c4c:	f364 4213 	bfi	r2, r4, #16, #4
     c50:	605a      	str	r2, [r3, #4]
     c52:	e7cd      	b.n	bf0 <_can_async_write+0x60>
	} else if (msg->len <= 20) {
     c54:	2a14      	cmp	r2, #20
     c56:	d805      	bhi.n	c64 <_can_async_write+0xd4>
		f->T1.bit.DLC = 0xB;
     c58:	685a      	ldr	r2, [r3, #4]
     c5a:	240b      	movs	r4, #11
     c5c:	f364 4213 	bfi	r2, r4, #16, #4
     c60:	605a      	str	r2, [r3, #4]
     c62:	e7c5      	b.n	bf0 <_can_async_write+0x60>
	} else if (msg->len <= 24) {
     c64:	2a18      	cmp	r2, #24
     c66:	d805      	bhi.n	c74 <_can_async_write+0xe4>
		f->T1.bit.DLC = 0xC;
     c68:	685a      	ldr	r2, [r3, #4]
     c6a:	240c      	movs	r4, #12
     c6c:	f364 4213 	bfi	r2, r4, #16, #4
     c70:	605a      	str	r2, [r3, #4]
     c72:	e7bd      	b.n	bf0 <_can_async_write+0x60>
	} else if (msg->len <= 32) {
     c74:	2a20      	cmp	r2, #32
     c76:	d805      	bhi.n	c84 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xD;
     c78:	685a      	ldr	r2, [r3, #4]
     c7a:	240d      	movs	r4, #13
     c7c:	f364 4213 	bfi	r2, r4, #16, #4
     c80:	605a      	str	r2, [r3, #4]
     c82:	e7b5      	b.n	bf0 <_can_async_write+0x60>
	} else if (msg->len <= 48) {
     c84:	2a30      	cmp	r2, #48	; 0x30
     c86:	d805      	bhi.n	c94 <_can_async_write+0x104>
		f->T1.bit.DLC = 0xE;
     c88:	685a      	ldr	r2, [r3, #4]
     c8a:	240e      	movs	r4, #14
     c8c:	f364 4213 	bfi	r2, r4, #16, #4
     c90:	605a      	str	r2, [r3, #4]
     c92:	e7ad      	b.n	bf0 <_can_async_write+0x60>
	} else if (msg->len <= 64) {
     c94:	2a40      	cmp	r2, #64	; 0x40
     c96:	d8ab      	bhi.n	bf0 <_can_async_write+0x60>
		f->T1.bit.DLC = 0xF;
     c98:	685a      	ldr	r2, [r3, #4]
     c9a:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
     c9e:	605a      	str	r2, [r3, #4]
     ca0:	e7a6      	b.n	bf0 <_can_async_write+0x60>
		return ERR_NO_RESOURCE;
     ca2:	f06f 001b 	mvn.w	r0, #27
     ca6:	4770      	bx	lr
		return ERR_NO_RESOURCE;
     ca8:	f06f 001b 	mvn.w	r0, #27
     cac:	bd10      	pop	{r4, pc}
     cae:	f06f 001b 	mvn.w	r0, #27
}
     cb2:	bd10      	pop	{r4, pc}
     cb4:	42000400 	.word	0x42000400
     cb8:	20000368 	.word	0x20000368
     cbc:	200003f8 	.word	0x200003f8
     cc0:	0000180d 	.word	0x0000180d

00000cc4 <_can_async_set_irq_state>:
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
     cc4:	b121      	cbz	r1, cd0 <_can_async_set_irq_state+0xc>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
     cc6:	2901      	cmp	r1, #1
     cc8:	d009      	beq.n	cde <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
     cca:	2902      	cmp	r1, #2
     ccc:	d014      	beq.n	cf8 <_can_async_set_irq_state+0x34>
     cce:	4770      	bx	lr
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
     cd0:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     cd2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
     cd4:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << CAN_IE_RF0NE_Pos;
     cd8:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
     cda:	654a      	str	r2, [r1, #84]	; 0x54
     cdc:	4770      	bx	lr
		hri_can_write_IE_TCE_bit(dev->hw, state);
     cde:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     ce0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
     ce2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << CAN_IE_TCE_Pos;
     ce6:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Can *)hw)->IE.reg = tmp;
     cea:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
     cec:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
     cee:	f04f 32ff 	mov.w	r2, #4294967295
     cf2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     cf6:	4770      	bx	lr
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
     cf8:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     cfa:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
     cfc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     d00:	059b      	lsls	r3, r3, #22
     d02:	0d9b      	lsrs	r3, r3, #22
	((Can *)hw)->IE.reg = data;
     d04:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
     d06:	e7e2      	b.n	cce <_can_async_set_irq_state+0xa>

00000d08 <_can_async_set_filter>:
                              struct can_filter *filter)
{
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
     d08:	6980      	ldr	r0, [r0, #24]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];

	if (fmt == CAN_FMT_STDID) {
     d0a:	b9f2      	cbnz	r2, d4a <_can_async_set_filter+0x42>
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
     d0c:	68c2      	ldr	r2, [r0, #12]
		if (filter == NULL) {
     d0e:	b1cb      	cbz	r3, d44 <_can_async_set_filter+0x3c>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
     d10:	6858      	ldr	r0, [r3, #4]
     d12:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
     d16:	6818      	ldr	r0, [r3, #0]
     d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
     d1c:	f360 431a 	bfi	r3, r0, #16, #11
     d20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
     d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
     d28:	2002      	movs	r0, #2
     d2a:	f360 739f 	bfi	r3, r0, #30, #2
     d2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
     d32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
     d36:	2001      	movs	r0, #1
     d38:	f360 63dd 	bfi	r3, r0, #27, #3
     d3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
     d40:	2000      	movs	r0, #0
     d42:	4770      	bx	lr
			sf->S0.val = 0;
     d44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			return ERR_NONE;
     d48:	e7fa      	b.n	d40 <_can_async_set_filter+0x38>
{
     d4a:	b430      	push	{r4, r5}
	} else if (fmt == CAN_FMT_EXTID) {
     d4c:	2a01      	cmp	r2, #1
     d4e:	d002      	beq.n	d56 <_can_async_set_filter+0x4e>
}
     d50:	2000      	movs	r0, #0
     d52:	bc30      	pop	{r4, r5}
     d54:	4770      	bx	lr
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
     d56:	6902      	ldr	r2, [r0, #16]
     d58:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
		if (filter == NULL) {
     d5c:	b18b      	cbz	r3, d82 <_can_async_set_filter+0x7a>
		ef->F0.val      = filter->id;
     d5e:	681c      	ldr	r4, [r3, #0]
     d60:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
     d64:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
     d68:	2501      	movs	r5, #1
     d6a:	f365 745f 	bfi	r4, r5, #29, #3
     d6e:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
		ef->F1.val      = filter->mask;
     d72:	685b      	ldr	r3, [r3, #4]
     d74:	6043      	str	r3, [r0, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
     d76:	6843      	ldr	r3, [r0, #4]
     d78:	2202      	movs	r2, #2
     d7a:	f362 739f 	bfi	r3, r2, #30, #2
     d7e:	6043      	str	r3, [r0, #4]
     d80:	e7e6      	b.n	d50 <_can_async_set_filter+0x48>
			ef->F0.val = 0;
     d82:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
			return ERR_NONE;
     d86:	e7e3      	b.n	d50 <_can_async_set_filter+0x48>

00000d88 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
     d88:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can0_dev;
     d8a:	4b1d      	ldr	r3, [pc, #116]	; (e00 <CAN0_Handler+0x78>)
     d8c:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     d8e:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     d90:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     d92:	f014 0f01 	tst.w	r4, #1
     d96:	d11c      	bne.n	dd2 <CAN0_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     d98:	f414 7f00 	tst.w	r4, #512	; 0x200
     d9c:	d11d      	bne.n	dda <CAN0_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     d9e:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
     da2:	d11e      	bne.n	de2 <CAN0_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     da4:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
     da8:	d120      	bne.n	dec <CAN0_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     daa:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
     dae:	d00a      	beq.n	dc6 <CAN0_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     db0:	68ea      	ldr	r2, [r5, #12]
     db2:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     db6:	f3c3 1340 	ubfx	r3, r3, #5, #1
     dba:	2b00      	cmp	r3, #0
     dbc:	bf14      	ite	ne
     dbe:	2102      	movne	r1, #2
     dc0:	2101      	moveq	r1, #1
     dc2:	4628      	mov	r0, r5
     dc4:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
     dc6:	f014 0f08 	tst.w	r4, #8
     dca:	d114      	bne.n	df6 <CAN0_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     dcc:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     dce:	651c      	str	r4, [r3, #80]	; 0x50
     dd0:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
     dd2:	68ab      	ldr	r3, [r5, #8]
     dd4:	4628      	mov	r0, r5
     dd6:	4798      	blx	r3
     dd8:	e7de      	b.n	d98 <CAN0_Handler+0x10>
		dev->cb.tx_done(dev);
     dda:	686b      	ldr	r3, [r5, #4]
     ddc:	4628      	mov	r0, r5
     dde:	4798      	blx	r3
     de0:	e7dd      	b.n	d9e <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     de2:	68eb      	ldr	r3, [r5, #12]
     de4:	2103      	movs	r1, #3
     de6:	4628      	mov	r0, r5
     de8:	4798      	blx	r3
     dea:	e7db      	b.n	da4 <CAN0_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     dec:	68eb      	ldr	r3, [r5, #12]
     dee:	2100      	movs	r1, #0
     df0:	4628      	mov	r0, r5
     df2:	4798      	blx	r3
     df4:	e7d9      	b.n	daa <CAN0_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     df6:	68eb      	ldr	r3, [r5, #12]
     df8:	2104      	movs	r1, #4
     dfa:	4628      	mov	r0, r5
     dfc:	4798      	blx	r3
     dfe:	e7e5      	b.n	dcc <CAN0_Handler+0x44>
     e00:	20000218 	.word	0x20000218

00000e04 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
     e04:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
     e06:	4b1d      	ldr	r3, [pc, #116]	; (e7c <CAN1_Handler+0x78>)
     e08:	6add      	ldr	r5, [r3, #44]	; 0x2c
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     e0a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     e0c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     e0e:	f014 0f01 	tst.w	r4, #1
     e12:	d11c      	bne.n	e4e <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     e14:	f414 7f00 	tst.w	r4, #512	; 0x200
     e18:	d11d      	bne.n	e56 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     e1a:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
     e1e:	d11e      	bne.n	e5e <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     e20:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
     e24:	d120      	bne.n	e68 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     e26:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
     e2a:	d00a      	beq.n	e42 <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     e2c:	68ea      	ldr	r2, [r5, #12]
     e2e:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     e32:	f3c3 1340 	ubfx	r3, r3, #5, #1
     e36:	2b00      	cmp	r3, #0
     e38:	bf14      	ite	ne
     e3a:	2102      	movne	r1, #2
     e3c:	2101      	moveq	r1, #1
     e3e:	4628      	mov	r0, r5
     e40:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
     e42:	f014 0f08 	tst.w	r4, #8
     e46:	d114      	bne.n	e72 <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     e48:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     e4a:	651c      	str	r4, [r3, #80]	; 0x50
     e4c:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
     e4e:	68ab      	ldr	r3, [r5, #8]
     e50:	4628      	mov	r0, r5
     e52:	4798      	blx	r3
     e54:	e7de      	b.n	e14 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
     e56:	686b      	ldr	r3, [r5, #4]
     e58:	4628      	mov	r0, r5
     e5a:	4798      	blx	r3
     e5c:	e7dd      	b.n	e1a <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     e5e:	68eb      	ldr	r3, [r5, #12]
     e60:	2103      	movs	r1, #3
     e62:	4628      	mov	r0, r5
     e64:	4798      	blx	r3
     e66:	e7db      	b.n	e20 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     e68:	68eb      	ldr	r3, [r5, #12]
     e6a:	2100      	movs	r1, #0
     e6c:	4628      	mov	r0, r5
     e6e:	4798      	blx	r3
     e70:	e7d9      	b.n	e26 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     e72:	68eb      	ldr	r3, [r5, #12]
     e74:	2104      	movs	r1, #4
     e76:	4628      	mov	r0, r5
     e78:	4798      	blx	r3
     e7a:	e7e5      	b.n	e48 <CAN1_Handler+0x44>
     e7c:	20000218 	.word	0x20000218

00000e80 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e80:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     e82:	4a09      	ldr	r2, [pc, #36]	; (ea8 <_init_chip+0x28>)
     e84:	8813      	ldrh	r3, [r2, #0]
     e86:	b29b      	uxth	r3, r3
     e88:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
     e8c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e8e:	4b07      	ldr	r3, [pc, #28]	; (eac <_init_chip+0x2c>)
     e90:	4798      	blx	r3
	_oscctrl_init_sources();
     e92:	4b07      	ldr	r3, [pc, #28]	; (eb0 <_init_chip+0x30>)
     e94:	4798      	blx	r3
	_mclk_init();
     e96:	4b07      	ldr	r3, [pc, #28]	; (eb4 <_init_chip+0x34>)
     e98:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e9a:	4b07      	ldr	r3, [pc, #28]	; (eb8 <_init_chip+0x38>)
     e9c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e9e:	f640 70ff 	movw	r0, #4095	; 0xfff
     ea2:	4b06      	ldr	r3, [pc, #24]	; (ebc <_init_chip+0x3c>)
     ea4:	4798      	blx	r3
     ea6:	bd08      	pop	{r3, pc}
     ea8:	41004000 	.word	0x41004000
     eac:	00000f45 	.word	0x00000f45
     eb0:	00000f65 	.word	0x00000f65
     eb4:	00000f39 	.word	0x00000f39
     eb8:	00000f69 	.word	0x00000f69
     ebc:	00000ec1 	.word	0x00000ec1

00000ec0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ec0:	f010 0f01 	tst.w	r0, #1
     ec4:	d008      	beq.n	ed8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ec6:	4a17      	ldr	r2, [pc, #92]	; (f24 <_gclk_init_generators_by_fref+0x64>)
     ec8:	4b17      	ldr	r3, [pc, #92]	; (f28 <_gclk_init_generators_by_fref+0x68>)
     eca:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ecc:	4619      	mov	r1, r3
     ece:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     ed2:	684b      	ldr	r3, [r1, #4]
     ed4:	4213      	tst	r3, r2
     ed6:	d1fc      	bne.n	ed2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     ed8:	f010 0f02 	tst.w	r0, #2
     edc:	d008      	beq.n	ef0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ede:	4a13      	ldr	r2, [pc, #76]	; (f2c <_gclk_init_generators_by_fref+0x6c>)
     ee0:	4b11      	ldr	r3, [pc, #68]	; (f28 <_gclk_init_generators_by_fref+0x68>)
     ee2:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ee4:	4619      	mov	r1, r3
     ee6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     eea:	684b      	ldr	r3, [r1, #4]
     eec:	4213      	tst	r3, r2
     eee:	d1fc      	bne.n	eea <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     ef0:	f010 0f04 	tst.w	r0, #4
     ef4:	d008      	beq.n	f08 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ef6:	4a0e      	ldr	r2, [pc, #56]	; (f30 <_gclk_init_generators_by_fref+0x70>)
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <_gclk_init_generators_by_fref+0x68>)
     efa:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     efc:	4619      	mov	r1, r3
     efe:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f02:	684b      	ldr	r3, [r1, #4]
     f04:	4213      	tst	r3, r2
     f06:	d1fc      	bne.n	f02 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     f08:	f010 0f08 	tst.w	r0, #8
     f0c:	d008      	beq.n	f20 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     f0e:	4a09      	ldr	r2, [pc, #36]	; (f34 <_gclk_init_generators_by_fref+0x74>)
     f10:	4b05      	ldr	r3, [pc, #20]	; (f28 <_gclk_init_generators_by_fref+0x68>)
     f12:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f14:	4619      	mov	r1, r3
     f16:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f1a:	684b      	ldr	r3, [r1, #4]
     f1c:	4213      	tst	r3, r2
     f1e:	d1fc      	bne.n	f1a <_gclk_init_generators_by_fref+0x5a>
     f20:	4770      	bx	lr
     f22:	bf00      	nop
     f24:	00010107 	.word	0x00010107
     f28:	40001c00 	.word	0x40001c00
     f2c:	00060906 	.word	0x00060906
     f30:	00030107 	.word	0x00030107
     f34:	00010905 	.word	0x00010905

00000f38 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     f38:	2201      	movs	r2, #1
     f3a:	4b01      	ldr	r3, [pc, #4]	; (f40 <_mclk_init+0x8>)
     f3c:	715a      	strb	r2, [r3, #5]
     f3e:	4770      	bx	lr
     f40:	40000800 	.word	0x40000800

00000f44 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     f44:	4b06      	ldr	r3, [pc, #24]	; (f60 <_osc32kctrl_init_sources+0x1c>)
     f46:	f242 028e 	movw	r2, #8334	; 0x208e
     f4a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     f4c:	2200      	movs	r2, #0
     f4e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     f50:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f52:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f54:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f58:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f5a:	2201      	movs	r2, #1
     f5c:	741a      	strb	r2, [r3, #16]
     f5e:	4770      	bx	lr
     f60:	40001400 	.word	0x40001400

00000f64 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     f64:	4770      	bx	lr
	...

00000f68 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     f68:	4a44      	ldr	r2, [pc, #272]	; (107c <_oscctrl_init_referenced_generators+0x114>)
     f6a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     f6c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     f70:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     f74:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f76:	4611      	mov	r1, r2
     f78:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f7c:	684b      	ldr	r3, [r1, #4]
     f7e:	4213      	tst	r3, r2
     f80:	d1fc      	bne.n	f7c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     f82:	4a3e      	ldr	r2, [pc, #248]	; (107c <_oscctrl_init_referenced_generators+0x114>)
     f84:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     f86:	f013 0f04 	tst.w	r3, #4
     f8a:	d1fb      	bne.n	f84 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     f8c:	4b3c      	ldr	r3, [pc, #240]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
     f8e:	2200      	movs	r2, #0
     f90:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     f92:	4a3c      	ldr	r2, [pc, #240]	; (1084 <_oscctrl_init_referenced_generators+0x11c>)
     f94:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f96:	461a      	mov	r2, r3
     f98:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     f9c:	f013 0f10 	tst.w	r3, #16
     fa0:	d1fa      	bne.n	f98 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     fa2:	2200      	movs	r2, #0
     fa4:	4b36      	ldr	r3, [pc, #216]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
     fa6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     faa:	461a      	mov	r2, r3
     fac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     fb0:	f013 0f04 	tst.w	r3, #4
     fb4:	d1fa      	bne.n	fac <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     fb6:	2202      	movs	r2, #2
     fb8:	4b31      	ldr	r3, [pc, #196]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
     fba:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     fbc:	461a      	mov	r2, r3
     fbe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     fc2:	f013 0f02 	tst.w	r3, #2
     fc6:	d1fa      	bne.n	fbe <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     fc8:	4b2d      	ldr	r3, [pc, #180]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
     fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     fcc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     fce:	461a      	mov	r2, r3
     fd0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     fd4:	f013 0f08 	tst.w	r3, #8
     fd8:	d1fa      	bne.n	fd0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     fda:	2219      	movs	r2, #25
     fdc:	4b28      	ldr	r3, [pc, #160]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
     fde:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     fe2:	461a      	mov	r2, r3
     fe4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     fe8:	f013 0f04 	tst.w	r3, #4
     fec:	d1fa      	bne.n	fe4 <_oscctrl_init_referenced_generators+0x7c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     fee:	4a26      	ldr	r2, [pc, #152]	; (1088 <_oscctrl_init_referenced_generators+0x120>)
     ff0:	4b23      	ldr	r3, [pc, #140]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
     ff2:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     ff4:	461a      	mov	r2, r3
     ff6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     ff8:	f013 0f06 	tst.w	r3, #6
     ffc:	d1fb      	bne.n	ff6 <_oscctrl_init_referenced_generators+0x8e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     ffe:	4b20      	ldr	r3, [pc, #128]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
    1000:	f44f 6202 	mov.w	r2, #2080	; 0x820
    1004:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1006:	2202      	movs	r2, #2
    1008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    100c:	461a      	mov	r2, r3
    100e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1010:	f013 0f02 	tst.w	r3, #2
    1014:	d1fb      	bne.n	100e <_oscctrl_init_referenced_generators+0xa6>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1016:	4b1a      	ldr	r3, [pc, #104]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
    1018:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    101c:	f013 0f01 	tst.w	r3, #1
    1020:	d026      	beq.n	1070 <_oscctrl_init_referenced_generators+0x108>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1022:	4a17      	ldr	r2, [pc, #92]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
    1024:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1026:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    102a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    102e:	d1f9      	bne.n	1024 <_oscctrl_init_referenced_generators+0xbc>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1030:	4b13      	ldr	r3, [pc, #76]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
    1032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1034:	f012 0f01 	tst.w	r2, #1
    1038:	d103      	bne.n	1042 <_oscctrl_init_referenced_generators+0xda>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    103a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    103c:	f012 0f02 	tst.w	r2, #2
    1040:	d0f7      	beq.n	1032 <_oscctrl_init_referenced_generators+0xca>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1042:	4a0e      	ldr	r2, [pc, #56]	; (107c <_oscctrl_init_referenced_generators+0x114>)
    1044:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1046:	2b00      	cmp	r3, #0
    1048:	d1fc      	bne.n	1044 <_oscctrl_init_referenced_generators+0xdc>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    104a:	4a0c      	ldr	r2, [pc, #48]	; (107c <_oscctrl_init_referenced_generators+0x114>)
    104c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    104e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1052:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1056:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1058:	4611      	mov	r1, r2
    105a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    105e:	684b      	ldr	r3, [r1, #4]
    1060:	4213      	tst	r3, r2
    1062:	d1fc      	bne.n	105e <_oscctrl_init_referenced_generators+0xf6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1064:	4a05      	ldr	r2, [pc, #20]	; (107c <_oscctrl_init_referenced_generators+0x114>)
    1066:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1068:	f013 0f04 	tst.w	r3, #4
    106c:	d1fb      	bne.n	1066 <_oscctrl_init_referenced_generators+0xfe>
		;
#endif
	(void)hw;
}
    106e:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1070:	4a03      	ldr	r2, [pc, #12]	; (1080 <_oscctrl_init_referenced_generators+0x118>)
    1072:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1074:	f413 7f80 	tst.w	r3, #256	; 0x100
    1078:	d0fb      	beq.n	1072 <_oscctrl_init_referenced_generators+0x10a>
    107a:	e7d9      	b.n	1030 <_oscctrl_init_referenced_generators+0xc8>
    107c:	40001c00 	.word	0x40001c00
    1080:	40001000 	.word	0x40001000
    1084:	0401bb80 	.word	0x0401bb80
    1088:	00020e4d 	.word	0x00020e4d

0000108c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    108c:	b500      	push	{lr}
    108e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1090:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <RAMECC_Handler+0x3c>)
    1092:	789b      	ldrb	r3, [r3, #2]
    1094:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1096:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1098:	9b01      	ldr	r3, [sp, #4]
    109a:	f013 0f02 	tst.w	r3, #2
    109e:	d006      	beq.n	10ae <RAMECC_Handler+0x22>
    10a0:	4b0a      	ldr	r3, [pc, #40]	; (10cc <RAMECC_Handler+0x40>)
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	b11b      	cbz	r3, 10ae <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    10a6:	4a08      	ldr	r2, [pc, #32]	; (10c8 <RAMECC_Handler+0x3c>)
    10a8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10aa:	4798      	blx	r3
    10ac:	e009      	b.n	10c2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    10ae:	9b01      	ldr	r3, [sp, #4]
    10b0:	f013 0f01 	tst.w	r3, #1
    10b4:	d005      	beq.n	10c2 <RAMECC_Handler+0x36>
    10b6:	4b05      	ldr	r3, [pc, #20]	; (10cc <RAMECC_Handler+0x40>)
    10b8:	685b      	ldr	r3, [r3, #4]
    10ba:	b113      	cbz	r3, 10c2 <RAMECC_Handler+0x36>
    10bc:	4a02      	ldr	r2, [pc, #8]	; (10c8 <RAMECC_Handler+0x3c>)
    10be:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10c0:	4798      	blx	r3
	} else {
		return;
	}
}
    10c2:	b003      	add	sp, #12
    10c4:	f85d fb04 	ldr.w	pc, [sp], #4
    10c8:	41020000 	.word	0x41020000
    10cc:	20000488 	.word	0x20000488

000010d0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10d0:	b470      	push	{r4, r5, r6}
    10d2:	b089      	sub	sp, #36	; 0x24
    10d4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10d6:	466c      	mov	r4, sp
    10d8:	4d0d      	ldr	r5, [pc, #52]	; (1110 <_sercom_get_hardware_index+0x40>)
    10da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    10e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10e6:	9b00      	ldr	r3, [sp, #0]
    10e8:	42b3      	cmp	r3, r6
    10ea:	d00d      	beq.n	1108 <_sercom_get_hardware_index+0x38>
    10ec:	4631      	mov	r1, r6
    10ee:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10f2:	f853 2b04 	ldr.w	r2, [r3], #4
    10f6:	428a      	cmp	r2, r1
    10f8:	d007      	beq.n	110a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10fa:	3001      	adds	r0, #1
    10fc:	2808      	cmp	r0, #8
    10fe:	d1f8      	bne.n	10f2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1100:	2000      	movs	r0, #0
}
    1102:	b009      	add	sp, #36	; 0x24
    1104:	bc70      	pop	{r4, r5, r6}
    1106:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1108:	2000      	movs	r0, #0
			return i;
    110a:	b2c0      	uxtb	r0, r0
    110c:	e7f9      	b.n	1102 <_sercom_get_hardware_index+0x32>
    110e:	bf00      	nop
    1110:	0000357c 	.word	0x0000357c

00001114 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1114:	b510      	push	{r4, lr}
    1116:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1118:	4b21      	ldr	r3, [pc, #132]	; (11a0 <_usart_init+0x8c>)
    111a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    111c:	2804      	cmp	r0, #4
    111e:	d005      	beq.n	112c <_usart_init+0x18>
	ASSERT(false);
    1120:	f240 2247 	movw	r2, #583	; 0x247
    1124:	491f      	ldr	r1, [pc, #124]	; (11a4 <_usart_init+0x90>)
    1126:	2000      	movs	r0, #0
    1128:	4b1f      	ldr	r3, [pc, #124]	; (11a8 <_usart_init+0x94>)
    112a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    112c:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    112e:	f013 0f01 	tst.w	r3, #1
    1132:	d119      	bne.n	1168 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1134:	69e3      	ldr	r3, [r4, #28]
    1136:	f013 0f03 	tst.w	r3, #3
    113a:	d1fb      	bne.n	1134 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    113c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    113e:	f013 0f02 	tst.w	r3, #2
    1142:	d00b      	beq.n	115c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1144:	6823      	ldr	r3, [r4, #0]
    1146:	f023 0302 	bic.w	r3, r3, #2
    114a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    114c:	69e3      	ldr	r3, [r4, #28]
    114e:	f013 0f03 	tst.w	r3, #3
    1152:	d1fb      	bne.n	114c <_usart_init+0x38>
    1154:	69e3      	ldr	r3, [r4, #28]
    1156:	f013 0f02 	tst.w	r3, #2
    115a:	d1fb      	bne.n	1154 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    115c:	2305      	movs	r3, #5
    115e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1160:	69e3      	ldr	r3, [r4, #28]
    1162:	f013 0f03 	tst.w	r3, #3
    1166:	d1fb      	bne.n	1160 <_usart_init+0x4c>
    1168:	69e3      	ldr	r3, [r4, #28]
    116a:	f013 0f01 	tst.w	r3, #1
    116e:	d1fb      	bne.n	1168 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1170:	4b0e      	ldr	r3, [pc, #56]	; (11ac <_usart_init+0x98>)
    1172:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1174:	69e3      	ldr	r3, [r4, #28]
    1176:	f013 0f03 	tst.w	r3, #3
    117a:	d1fb      	bne.n	1174 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    117c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1180:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1182:	69e3      	ldr	r3, [r4, #28]
    1184:	f013 0f1f 	tst.w	r3, #31
    1188:	d1fb      	bne.n	1182 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    118a:	4b09      	ldr	r3, [pc, #36]	; (11b0 <_usart_init+0x9c>)
    118c:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    118e:	f64f 4311 	movw	r3, #64529	; 0xfc11
    1192:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1194:	2000      	movs	r0, #0
    1196:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1198:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    119c:	bd10      	pop	{r4, pc}
    119e:	bf00      	nop
    11a0:	000010d1 	.word	0x000010d1
    11a4:	000035b4 	.word	0x000035b4
    11a8:	00000891 	.word	0x00000891
    11ac:	40100004 	.word	0x40100004
    11b0:	00700002 	.word	0x00700002

000011b4 <_usart_sync_init>:
{
    11b4:	b538      	push	{r3, r4, r5, lr}
    11b6:	460c      	mov	r4, r1
	ASSERT(device);
    11b8:	4605      	mov	r5, r0
    11ba:	22bb      	movs	r2, #187	; 0xbb
    11bc:	4905      	ldr	r1, [pc, #20]	; (11d4 <_usart_sync_init+0x20>)
    11be:	3000      	adds	r0, #0
    11c0:	bf18      	it	ne
    11c2:	2001      	movne	r0, #1
    11c4:	4b04      	ldr	r3, [pc, #16]	; (11d8 <_usart_sync_init+0x24>)
    11c6:	4798      	blx	r3
	device->hw = hw;
    11c8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    11ca:	4620      	mov	r0, r4
    11cc:	4b03      	ldr	r3, [pc, #12]	; (11dc <_usart_sync_init+0x28>)
    11ce:	4798      	blx	r3
}
    11d0:	bd38      	pop	{r3, r4, r5, pc}
    11d2:	bf00      	nop
    11d4:	000035b4 	.word	0x000035b4
    11d8:	00000891 	.word	0x00000891
    11dc:	00001115 	.word	0x00001115

000011e0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    11e0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11e2:	6813      	ldr	r3, [r2, #0]
    11e4:	f043 0302 	orr.w	r3, r3, #2
    11e8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11ea:	69d3      	ldr	r3, [r2, #28]
    11ec:	f013 0f03 	tst.w	r3, #3
    11f0:	d1fb      	bne.n	11ea <_usart_sync_enable+0xa>
}
    11f2:	4770      	bx	lr

000011f4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    11f4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    11f6:	6299      	str	r1, [r3, #40]	; 0x28
    11f8:	4770      	bx	lr

000011fa <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    11fa:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    11fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    11fe:	b2c0      	uxtb	r0, r0
    1200:	4770      	bx	lr

00001202 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1202:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1204:	7e18      	ldrb	r0, [r3, #24]
}
    1206:	f000 0001 	and.w	r0, r0, #1
    120a:	4770      	bx	lr

0000120c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    120c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    120e:	7e18      	ldrb	r0, [r3, #24]
}
    1210:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1214:	4770      	bx	lr

00001216 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1216:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1218:	7e18      	ldrb	r0, [r3, #24]
}
    121a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    121e:	4770      	bx	lr

00001220 <CAN_std_tx_callback>:
	(void)descr;
	printf("  CAN Transmission done \r\n");
}

static void CAN_std_tx_callback(struct can_async_descriptor *const descr)
{
    1220:	b508      	push	{r3, lr}
	(void)descr;

	/* Enable the FDOE and BRSE in register configuration*/
	hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
    1222:	4b0d      	ldr	r3, [pc, #52]	; (1258 <CAN_std_tx_callback+0x38>)
    1224:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1226:	6993      	ldr	r3, [r2, #24]
    1228:	f043 0301 	orr.w	r3, r3, #1
    122c:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
    122e:	6993      	ldr	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
    1230:	f013 0f01 	tst.w	r3, #1
    1234:	d0fb      	beq.n	122e <CAN_std_tx_callback+0xe>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1236:	6993      	ldr	r3, [r2, #24]
    1238:	f043 0302 	orr.w	r3, r3, #2
    123c:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
    123e:	6993      	ldr	r3, [r2, #24]
    1240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1244:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
    1246:	6993      	ldr	r3, [r2, #24]
    1248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    124c:	6193      	str	r3, [r2, #24]
	hri_can_set_CCCR_CCE_bit(CAN_0.dev.hw);

	hri_can_set_CCCR_FDOE_bit(CAN_0.dev.hw);
	hri_can_set_CCCR_BRSE_bit(CAN_0.dev.hw);

	printf("  CAN Transmission done \r\n");
    124e:	4803      	ldr	r0, [pc, #12]	; (125c <CAN_std_tx_callback+0x3c>)
    1250:	4b03      	ldr	r3, [pc, #12]	; (1260 <CAN_std_tx_callback+0x40>)
    1252:	4798      	blx	r3
    1254:	bd08      	pop	{r3, pc}
    1256:	bf00      	nop
    1258:	2000027c 	.word	0x2000027c
    125c:	000035d0 	.word	0x000035d0
    1260:	0000191d 	.word	0x0000191d

00001264 <CAN_0_tx_callback>:
{
    1264:	b508      	push	{r3, lr}
	printf("  CAN Transmission done \r\n");
    1266:	4802      	ldr	r0, [pc, #8]	; (1270 <CAN_0_tx_callback+0xc>)
    1268:	4b02      	ldr	r3, [pc, #8]	; (1274 <CAN_0_tx_callback+0x10>)
    126a:	4798      	blx	r3
    126c:	bd08      	pop	{r3, pc}
    126e:	bf00      	nop
    1270:	000035d0 	.word	0x000035d0
    1274:	0000191d 	.word	0x0000191d

00001278 <CAN_0_rx_callback>:
}


static void CAN_0_rx_callback(struct can_async_descriptor *const descr)
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	b094      	sub	sp, #80	; 0x50
	struct can_message msg;
	uint8_t            data[64];
	msg.data = data;
    127c:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
	can_async_read(descr, &msg);
    1280:	a910      	add	r1, sp, #64	; 0x40
    1282:	4b0d      	ldr	r3, [pc, #52]	; (12b8 <CAN_0_rx_callback+0x40>)
    1284:	4798      	blx	r3

	printf("\n\r CAN Message received . The received data is: \r\n");
    1286:	480d      	ldr	r0, [pc, #52]	; (12bc <CAN_0_rx_callback+0x44>)
    1288:	4b0d      	ldr	r3, [pc, #52]	; (12c0 <CAN_0_rx_callback+0x48>)
    128a:	4798      	blx	r3
	for (uint8_t i = 0; i < msg.len; i++) {
    128c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1290:	b163      	cbz	r3, 12ac <CAN_0_rx_callback+0x34>
    1292:	2400      	movs	r4, #0
		printf("  %d", msg.data[i]);
    1294:	4e0b      	ldr	r6, [pc, #44]	; (12c4 <CAN_0_rx_callback+0x4c>)
    1296:	4d0c      	ldr	r5, [pc, #48]	; (12c8 <CAN_0_rx_callback+0x50>)
    1298:	9b12      	ldr	r3, [sp, #72]	; 0x48
    129a:	5d19      	ldrb	r1, [r3, r4]
    129c:	4630      	mov	r0, r6
    129e:	47a8      	blx	r5
	for (uint8_t i = 0; i < msg.len; i++) {
    12a0:	3401      	adds	r4, #1
    12a2:	b2e4      	uxtb	r4, r4
    12a4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    12a8:	42a3      	cmp	r3, r4
    12aa:	d8f5      	bhi.n	1298 <CAN_0_rx_callback+0x20>
	}
	printf("\r\n\r\n");
    12ac:	4807      	ldr	r0, [pc, #28]	; (12cc <CAN_0_rx_callback+0x54>)
    12ae:	4b04      	ldr	r3, [pc, #16]	; (12c0 <CAN_0_rx_callback+0x48>)
    12b0:	4798      	blx	r3
	return;
}
    12b2:	b014      	add	sp, #80	; 0x50
    12b4:	bd70      	pop	{r4, r5, r6, pc}
    12b6:	bf00      	nop
    12b8:	00000605 	.word	0x00000605
    12bc:	000035ec 	.word	0x000035ec
    12c0:	0000191d 	.word	0x0000191d
    12c4:	00003620 	.word	0x00003620
    12c8:	00001835 	.word	0x00001835
    12cc:	000038dc 	.word	0x000038dc

000012d0 <main>:

int main(void)
{
    12d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12d2:	b0ab      	sub	sp, #172	; 0xac
	uint8_t tx_message_0[64];
	uint8_t tx_message_1[64];
	uint8_t tx_message_2[8];

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    12d4:	4bb4      	ldr	r3, [pc, #720]	; (15a8 <main+0x2d8>)
    12d6:	4798      	blx	r3
	printf("Menu :\r\n"
    12d8:	48b4      	ldr	r0, [pc, #720]	; (15ac <main+0x2dc>)
    12da:	4bb5      	ldr	r3, [pc, #724]	; (15b0 <main+0x2e0>)
    12dc:	4798      	blx	r3
    12de:	a913      	add	r1, sp, #76	; 0x4c
    12e0:	a823      	add	r0, sp, #140	; 0x8c
    12e2:	460b      	mov	r3, r1
	display_menu();

	/* Initialize the data to be used later */
	for (uint8_t i = 0; i < 64; i++) {
		tx_message_0[i] = i;
    12e4:	1a5a      	subs	r2, r3, r1
    12e6:	f803 2b01 	strb.w	r2, [r3], #1
	for (uint8_t i = 0; i < 64; i++) {
    12ea:	4283      	cmp	r3, r0
    12ec:	d1fa      	bne.n	12e4 <main+0x14>
    12ee:	f10d 020b 	add.w	r2, sp, #11
    12f2:	2380      	movs	r3, #128	; 0x80
	}

	for (uint8_t j = 128; j < 192; j++) {
		tx_message_1[j - 128] = j;
    12f4:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint8_t j = 128; j < 192; j++) {
    12f8:	3301      	adds	r3, #1
    12fa:	b2db      	uxtb	r3, r3
    12fc:	2bc0      	cmp	r3, #192	; 0xc0
    12fe:	d1f9      	bne.n	12f4 <main+0x24>
    1300:	a901      	add	r1, sp, #4
    1302:	a803      	add	r0, sp, #12
    1304:	460b      	mov	r3, r1
	}

	for (uint8_t k = 0; k < 8; k++) {
		tx_message_2[k] = k;
    1306:	1a5a      	subs	r2, r3, r1
    1308:	f803 2b01 	strb.w	r2, [r3], #1
	for (uint8_t k = 0; k < 8; k++) {
    130c:	4298      	cmp	r0, r3
    130e:	d1fa      	bne.n	1306 <main+0x36>
	}

	while (1) {
		scanf("%c", (char *)&key);
    1310:	4da8      	ldr	r5, [pc, #672]	; (15b4 <main+0x2e4>)
    1312:	4ca9      	ldr	r4, [pc, #676]	; (15b8 <main+0x2e8>)
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
			can_async_enable(&CAN_0);
			can_async_write(&CAN_0, &msg);
			break;
		case 'f':
			printf("  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
    1314:	4ea9      	ldr	r6, [pc, #676]	; (15bc <main+0x2ec>)
    1316:	e002      	b.n	131e <main+0x4e>
	printf("Menu :\r\n"
    1318:	48a4      	ldr	r0, [pc, #656]	; (15ac <main+0x2dc>)
    131a:	4ba5      	ldr	r3, [pc, #660]	; (15b0 <main+0x2e0>)
    131c:	4798      	blx	r3
		scanf("%c", (char *)&key);
    131e:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
    1322:	4628      	mov	r0, r5
    1324:	47a0      	blx	r4
		switch (key) {
    1326:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
    132a:	3b30      	subs	r3, #48	; 0x30
    132c:	2b38      	cmp	r3, #56	; 0x38
    132e:	d8f6      	bhi.n	131e <main+0x4e>
    1330:	a201      	add	r2, pc, #4	; (adr r2, 1338 <main+0x68>)
    1332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1336:	bf00      	nop
    1338:	0000141d 	.word	0x0000141d
    133c:	00001445 	.word	0x00001445
    1340:	0000146d 	.word	0x0000146d
    1344:	000014a9 	.word	0x000014a9
    1348:	000014e5 	.word	0x000014e5
    134c:	0000150b 	.word	0x0000150b
    1350:	00001533 	.word	0x00001533
    1354:	0000156d 	.word	0x0000156d
    1358:	0000131f 	.word	0x0000131f
    135c:	0000131f 	.word	0x0000131f
    1360:	0000131f 	.word	0x0000131f
    1364:	0000131f 	.word	0x0000131f
    1368:	0000131f 	.word	0x0000131f
    136c:	0000131f 	.word	0x0000131f
    1370:	0000131f 	.word	0x0000131f
    1374:	0000131f 	.word	0x0000131f
    1378:	0000131f 	.word	0x0000131f
    137c:	0000131f 	.word	0x0000131f
    1380:	0000131f 	.word	0x0000131f
    1384:	0000131f 	.word	0x0000131f
    1388:	0000131f 	.word	0x0000131f
    138c:	0000131f 	.word	0x0000131f
    1390:	0000131f 	.word	0x0000131f
    1394:	0000131f 	.word	0x0000131f
    1398:	0000131f 	.word	0x0000131f
    139c:	0000131f 	.word	0x0000131f
    13a0:	0000131f 	.word	0x0000131f
    13a4:	0000131f 	.word	0x0000131f
    13a8:	0000131f 	.word	0x0000131f
    13ac:	0000131f 	.word	0x0000131f
    13b0:	0000131f 	.word	0x0000131f
    13b4:	0000131f 	.word	0x0000131f
    13b8:	0000131f 	.word	0x0000131f
    13bc:	0000131f 	.word	0x0000131f
    13c0:	0000131f 	.word	0x0000131f
    13c4:	0000131f 	.word	0x0000131f
    13c8:	0000131f 	.word	0x0000131f
    13cc:	0000131f 	.word	0x0000131f
    13d0:	0000131f 	.word	0x0000131f
    13d4:	0000131f 	.word	0x0000131f
    13d8:	0000131f 	.word	0x0000131f
    13dc:	0000131f 	.word	0x0000131f
    13e0:	0000131f 	.word	0x0000131f
    13e4:	0000131f 	.word	0x0000131f
    13e8:	0000131f 	.word	0x0000131f
    13ec:	0000131f 	.word	0x0000131f
    13f0:	0000131f 	.word	0x0000131f
    13f4:	0000131f 	.word	0x0000131f
    13f8:	0000131f 	.word	0x0000131f
    13fc:	00001605 	.word	0x00001605
    1400:	0000131f 	.word	0x0000131f
    1404:	0000131f 	.word	0x0000131f
    1408:	0000131f 	.word	0x0000131f
    140c:	0000131f 	.word	0x0000131f
    1410:	0000166d 	.word	0x0000166d
    1414:	0000131f 	.word	0x0000131f
    1418:	00001319 	.word	0x00001319
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
    141c:	4868      	ldr	r0, [pc, #416]	; (15c0 <main+0x2f0>)
    141e:	4b64      	ldr	r3, [pc, #400]	; (15b0 <main+0x2e0>)
    1420:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    1422:	4f68      	ldr	r7, [pc, #416]	; (15c4 <main+0x2f4>)
    1424:	4a68      	ldr	r2, [pc, #416]	; (15c8 <main+0x2f8>)
    1426:	2100      	movs	r1, #0
    1428:	4638      	mov	r0, r7
    142a:	4b68      	ldr	r3, [pc, #416]	; (15cc <main+0x2fc>)
    142c:	4798      	blx	r3
			filter.id   = 0x45A;
    142e:	f240 435a 	movw	r3, #1114	; 0x45a
    1432:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    1434:	2100      	movs	r1, #0
    1436:	9124      	str	r1, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 0, CAN_FMT_STDID, &filter);
    1438:	ab23      	add	r3, sp, #140	; 0x8c
    143a:	460a      	mov	r2, r1
    143c:	4638      	mov	r0, r7
    143e:	4f64      	ldr	r7, [pc, #400]	; (15d0 <main+0x300>)
    1440:	47b8      	blx	r7
			break;
    1442:	e76c      	b.n	131e <main+0x4e>
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
    1444:	4863      	ldr	r0, [pc, #396]	; (15d4 <main+0x304>)
    1446:	4b5a      	ldr	r3, [pc, #360]	; (15b0 <main+0x2e0>)
    1448:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    144a:	4f5e      	ldr	r7, [pc, #376]	; (15c4 <main+0x2f4>)
    144c:	4a5e      	ldr	r2, [pc, #376]	; (15c8 <main+0x2f8>)
    144e:	2100      	movs	r1, #0
    1450:	4638      	mov	r0, r7
    1452:	4b5e      	ldr	r3, [pc, #376]	; (15cc <main+0x2fc>)
    1454:	4798      	blx	r3
			filter.id   = 0x469;
    1456:	f240 4369 	movw	r3, #1129	; 0x469
    145a:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    145c:	2200      	movs	r2, #0
    145e:	9224      	str	r2, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 1, CAN_FMT_STDID, &filter);
    1460:	ab23      	add	r3, sp, #140	; 0x8c
    1462:	2101      	movs	r1, #1
    1464:	4638      	mov	r0, r7
    1466:	4f5a      	ldr	r7, [pc, #360]	; (15d0 <main+0x300>)
    1468:	47b8      	blx	r7
			break;
    146a:	e758      	b.n	131e <main+0x4e>
			printf("  2: Send standard message with ID: 0x45A and 64 byte data 0 to 63. \r\n");
    146c:	485a      	ldr	r0, [pc, #360]	; (15d8 <main+0x308>)
    146e:	4b50      	ldr	r3, [pc, #320]	; (15b0 <main+0x2e0>)
    1470:	4798      	blx	r3
			msg.id   = 0x45A;
    1472:	f240 435a 	movw	r3, #1114	; 0x45a
    1476:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1478:	2300      	movs	r3, #0
    147a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_0;
    147e:	aa13      	add	r2, sp, #76	; 0x4c
    1480:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    1482:	2208      	movs	r2, #8
    1484:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    1488:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    148c:	4f4d      	ldr	r7, [pc, #308]	; (15c4 <main+0x2f4>)
    148e:	4a53      	ldr	r2, [pc, #332]	; (15dc <main+0x30c>)
    1490:	2101      	movs	r1, #1
    1492:	4638      	mov	r0, r7
    1494:	4b4d      	ldr	r3, [pc, #308]	; (15cc <main+0x2fc>)
    1496:	4798      	blx	r3
			can_async_enable(&CAN_0);
    1498:	4638      	mov	r0, r7
    149a:	4b51      	ldr	r3, [pc, #324]	; (15e0 <main+0x310>)
    149c:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    149e:	a925      	add	r1, sp, #148	; 0x94
    14a0:	4638      	mov	r0, r7
    14a2:	4b50      	ldr	r3, [pc, #320]	; (15e4 <main+0x314>)
    14a4:	4798      	blx	r3
			break;
    14a6:	e73a      	b.n	131e <main+0x4e>
			printf("  3: Send standard message with ID: 0x469 and 64 byte data 128 to 191. \r\n");
    14a8:	484f      	ldr	r0, [pc, #316]	; (15e8 <main+0x318>)
    14aa:	4b41      	ldr	r3, [pc, #260]	; (15b0 <main+0x2e0>)
    14ac:	4798      	blx	r3
			msg.id   = 0x469;
    14ae:	f240 4369 	movw	r3, #1129	; 0x469
    14b2:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    14b4:	2300      	movs	r3, #0
    14b6:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
    14ba:	aa03      	add	r2, sp, #12
    14bc:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    14be:	2208      	movs	r2, #8
    14c0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    14c4:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    14c8:	4f3e      	ldr	r7, [pc, #248]	; (15c4 <main+0x2f4>)
    14ca:	4a44      	ldr	r2, [pc, #272]	; (15dc <main+0x30c>)
    14cc:	2101      	movs	r1, #1
    14ce:	4638      	mov	r0, r7
    14d0:	4b3e      	ldr	r3, [pc, #248]	; (15cc <main+0x2fc>)
    14d2:	4798      	blx	r3
			can_async_enable(&CAN_0);
    14d4:	4638      	mov	r0, r7
    14d6:	4b42      	ldr	r3, [pc, #264]	; (15e0 <main+0x310>)
    14d8:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    14da:	a925      	add	r1, sp, #148	; 0x94
    14dc:	4638      	mov	r0, r7
    14de:	4b41      	ldr	r3, [pc, #260]	; (15e4 <main+0x314>)
    14e0:	4798      	blx	r3
			break;
    14e2:	e71c      	b.n	131e <main+0x4e>
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
    14e4:	4841      	ldr	r0, [pc, #260]	; (15ec <main+0x31c>)
    14e6:	4b32      	ldr	r3, [pc, #200]	; (15b0 <main+0x2e0>)
    14e8:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    14ea:	4f36      	ldr	r7, [pc, #216]	; (15c4 <main+0x2f4>)
    14ec:	4a36      	ldr	r2, [pc, #216]	; (15c8 <main+0x2f8>)
    14ee:	2100      	movs	r1, #0
    14f0:	4638      	mov	r0, r7
    14f2:	4b36      	ldr	r3, [pc, #216]	; (15cc <main+0x2fc>)
    14f4:	4798      	blx	r3
			filter.id   = 0x100000A5;
    14f6:	4b3e      	ldr	r3, [pc, #248]	; (15f0 <main+0x320>)
    14f8:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    14fa:	2100      	movs	r1, #0
    14fc:	9124      	str	r1, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 0, CAN_FMT_EXTID, &filter);
    14fe:	ab23      	add	r3, sp, #140	; 0x8c
    1500:	2201      	movs	r2, #1
    1502:	4638      	mov	r0, r7
    1504:	4f32      	ldr	r7, [pc, #200]	; (15d0 <main+0x300>)
    1506:	47b8      	blx	r7
			break;
    1508:	e709      	b.n	131e <main+0x4e>
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
    150a:	483a      	ldr	r0, [pc, #232]	; (15f4 <main+0x324>)
    150c:	4b28      	ldr	r3, [pc, #160]	; (15b0 <main+0x2e0>)
    150e:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    1510:	4f2c      	ldr	r7, [pc, #176]	; (15c4 <main+0x2f4>)
    1512:	4a2d      	ldr	r2, [pc, #180]	; (15c8 <main+0x2f8>)
    1514:	2100      	movs	r1, #0
    1516:	4638      	mov	r0, r7
    1518:	4b2c      	ldr	r3, [pc, #176]	; (15cc <main+0x2fc>)
    151a:	4798      	blx	r3
			filter.id   = 0x10000096;
    151c:	4b36      	ldr	r3, [pc, #216]	; (15f8 <main+0x328>)
    151e:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    1520:	2300      	movs	r3, #0
    1522:	9324      	str	r3, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 1, CAN_FMT_EXTID, &filter);
    1524:	ab23      	add	r3, sp, #140	; 0x8c
    1526:	2201      	movs	r2, #1
    1528:	4611      	mov	r1, r2
    152a:	4638      	mov	r0, r7
    152c:	4f28      	ldr	r7, [pc, #160]	; (15d0 <main+0x300>)
    152e:	47b8      	blx	r7
			break;
    1530:	e6f5      	b.n	131e <main+0x4e>
			printf("  6: Send extended message with ID: 0x100000A5 and 64 byte data 0 to 63. \r\n");
    1532:	4832      	ldr	r0, [pc, #200]	; (15fc <main+0x32c>)
    1534:	4b1e      	ldr	r3, [pc, #120]	; (15b0 <main+0x2e0>)
    1536:	4798      	blx	r3
			msg.id   = 0x100000A5;
    1538:	4b2d      	ldr	r3, [pc, #180]	; (15f0 <main+0x320>)
    153a:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    153c:	2300      	movs	r3, #0
    153e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_0;
    1542:	ab13      	add	r3, sp, #76	; 0x4c
    1544:	9327      	str	r3, [sp, #156]	; 0x9c
			msg.len  = 8;
    1546:	2308      	movs	r3, #8
    1548:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_EXTID;
    154c:	2101      	movs	r1, #1
    154e:	f88d 10a1 	strb.w	r1, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    1552:	4f1c      	ldr	r7, [pc, #112]	; (15c4 <main+0x2f4>)
    1554:	4a21      	ldr	r2, [pc, #132]	; (15dc <main+0x30c>)
    1556:	4638      	mov	r0, r7
    1558:	4b1c      	ldr	r3, [pc, #112]	; (15cc <main+0x2fc>)
    155a:	4798      	blx	r3
			can_async_enable(&CAN_0);
    155c:	4638      	mov	r0, r7
    155e:	4b20      	ldr	r3, [pc, #128]	; (15e0 <main+0x310>)
    1560:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    1562:	a925      	add	r1, sp, #148	; 0x94
    1564:	4638      	mov	r0, r7
    1566:	4b1f      	ldr	r3, [pc, #124]	; (15e4 <main+0x314>)
    1568:	4798      	blx	r3
			break;
    156a:	e6d8      	b.n	131e <main+0x4e>
			printf("  7: Send extended message with ID: 0x10000096 and 64 byte data 128 to 191. \r\n");
    156c:	4824      	ldr	r0, [pc, #144]	; (1600 <main+0x330>)
    156e:	4b10      	ldr	r3, [pc, #64]	; (15b0 <main+0x2e0>)
    1570:	4798      	blx	r3
			msg.id   = 0x10000096;
    1572:	4b21      	ldr	r3, [pc, #132]	; (15f8 <main+0x328>)
    1574:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1576:	2300      	movs	r3, #0
    1578:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
    157c:	ab03      	add	r3, sp, #12
    157e:	9327      	str	r3, [sp, #156]	; 0x9c
			msg.len  = 8;
    1580:	2308      	movs	r3, #8
    1582:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_EXTID;
    1586:	2101      	movs	r1, #1
    1588:	f88d 10a1 	strb.w	r1, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    158c:	4f0d      	ldr	r7, [pc, #52]	; (15c4 <main+0x2f4>)
    158e:	4a13      	ldr	r2, [pc, #76]	; (15dc <main+0x30c>)
    1590:	4638      	mov	r0, r7
    1592:	4b0e      	ldr	r3, [pc, #56]	; (15cc <main+0x2fc>)
    1594:	4798      	blx	r3
			can_async_enable(&CAN_0);
    1596:	4638      	mov	r0, r7
    1598:	4b11      	ldr	r3, [pc, #68]	; (15e0 <main+0x310>)
    159a:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    159c:	a925      	add	r1, sp, #148	; 0x94
    159e:	4638      	mov	r0, r7
    15a0:	4b10      	ldr	r3, [pc, #64]	; (15e4 <main+0x314>)
    15a2:	4798      	blx	r3
			break;
    15a4:	e6bb      	b.n	131e <main+0x4e>
    15a6:	bf00      	nop
    15a8:	000002d1 	.word	0x000002d1
    15ac:	00003628 	.word	0x00003628
    15b0:	0000191d 	.word	0x0000191d
    15b4:	000038e0 	.word	0x000038e0
    15b8:	0000192d 	.word	0x0000192d
    15bc:	00003b1c 	.word	0x00003b1c
    15c0:	000038e4 	.word	0x000038e4
    15c4:	2000027c 	.word	0x2000027c
    15c8:	00001279 	.word	0x00001279
    15cc:	00000665 	.word	0x00000665
    15d0:	000006b5 	.word	0x000006b5
    15d4:	00003924 	.word	0x00003924
    15d8:	00003964 	.word	0x00003964
    15dc:	00001265 	.word	0x00001265
    15e0:	000005dd 	.word	0x000005dd
    15e4:	00000635 	.word	0x00000635
    15e8:	000039ac 	.word	0x000039ac
    15ec:	000039f8 	.word	0x000039f8
    15f0:	100000a5 	.word	0x100000a5
    15f4:	00003a3c 	.word	0x00003a3c
    15f8:	10000096 	.word	0x10000096
    15fc:	00003a80 	.word	0x00003a80
    1600:	00003acc 	.word	0x00003acc
			printf("  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
    1604:	4630      	mov	r0, r6
    1606:	4b33      	ldr	r3, [pc, #204]	; (16d4 <main+0x404>)
    1608:	4798      	blx	r3
			msg.id   = 0x469;
    160a:	f240 4369 	movw	r3, #1129	; 0x469
    160e:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1610:	2300      	movs	r3, #0
    1612:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_2;
    1616:	aa01      	add	r2, sp, #4
    1618:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    161a:	2208      	movs	r2, #8
    161c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    1620:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
    1624:	4b2c      	ldr	r3, [pc, #176]	; (16d8 <main+0x408>)
    1626:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1628:	6993      	ldr	r3, [r2, #24]
    162a:	f043 0301 	orr.w	r3, r3, #1
    162e:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
    1630:	6993      	ldr	r3, [r2, #24]
			while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
    1632:	f013 0f01 	tst.w	r3, #1
    1636:	d0fb      	beq.n	1630 <main+0x360>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1638:	6993      	ldr	r3, [r2, #24]
    163a:	f043 0302 	orr.w	r3, r3, #2
    163e:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
    1640:	6993      	ldr	r3, [r2, #24]
    1642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1646:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
    1648:	6993      	ldr	r3, [r2, #24]
    164a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    164e:	6193      	str	r3, [r2, #24]
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
    1650:	4f21      	ldr	r7, [pc, #132]	; (16d8 <main+0x408>)
    1652:	4a22      	ldr	r2, [pc, #136]	; (16dc <main+0x40c>)
    1654:	2101      	movs	r1, #1
    1656:	4638      	mov	r0, r7
    1658:	4b21      	ldr	r3, [pc, #132]	; (16e0 <main+0x410>)
    165a:	4798      	blx	r3
			can_async_enable(&CAN_0);
    165c:	4638      	mov	r0, r7
    165e:	4b21      	ldr	r3, [pc, #132]	; (16e4 <main+0x414>)
    1660:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    1662:	a925      	add	r1, sp, #148	; 0x94
    1664:	4638      	mov	r0, r7
    1666:	4b20      	ldr	r3, [pc, #128]	; (16e8 <main+0x418>)
    1668:	4798      	blx	r3
			break;
    166a:	e658      	b.n	131e <main+0x4e>
			printf("  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
    166c:	4630      	mov	r0, r6
    166e:	4b19      	ldr	r3, [pc, #100]	; (16d4 <main+0x404>)
    1670:	4798      	blx	r3
			msg.id   = 0x45A;
    1672:	f240 435a 	movw	r3, #1114	; 0x45a
    1676:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1678:	2300      	movs	r3, #0
    167a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_2;
    167e:	aa01      	add	r2, sp, #4
    1680:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    1682:	2208      	movs	r2, #8
    1684:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    1688:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1

			/* Disable the FDOE and BRSE from register configuration
			 * and enable them again in callback */
			hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
    168c:	4b12      	ldr	r3, [pc, #72]	; (16d8 <main+0x408>)
    168e:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1690:	6993      	ldr	r3, [r2, #24]
    1692:	f043 0301 	orr.w	r3, r3, #1
    1696:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
    1698:	6993      	ldr	r3, [r2, #24]
			while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
    169a:	f013 0f01 	tst.w	r3, #1
    169e:	d0fb      	beq.n	1698 <main+0x3c8>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    16a0:	6993      	ldr	r3, [r2, #24]
    16a2:	f043 0302 	orr.w	r3, r3, #2
    16a6:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
    16a8:	6993      	ldr	r3, [r2, #24]
    16aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    16ae:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
    16b0:	6993      	ldr	r3, [r2, #24]
    16b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    16b6:	6193      	str	r3, [r2, #24]
			hri_can_set_CCCR_CCE_bit(CAN_0.dev.hw);

			hri_can_clear_CCCR_FDOE_bit(CAN_0.dev.hw);
			hri_can_clear_CCCR_BRSE_bit(CAN_0.dev.hw);

			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
    16b8:	4f07      	ldr	r7, [pc, #28]	; (16d8 <main+0x408>)
    16ba:	4a08      	ldr	r2, [pc, #32]	; (16dc <main+0x40c>)
    16bc:	2101      	movs	r1, #1
    16be:	4638      	mov	r0, r7
    16c0:	4b07      	ldr	r3, [pc, #28]	; (16e0 <main+0x410>)
    16c2:	4798      	blx	r3
			can_async_enable(&CAN_0);
    16c4:	4638      	mov	r0, r7
    16c6:	4b07      	ldr	r3, [pc, #28]	; (16e4 <main+0x414>)
    16c8:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    16ca:	a925      	add	r1, sp, #148	; 0x94
    16cc:	4638      	mov	r0, r7
    16ce:	4b06      	ldr	r3, [pc, #24]	; (16e8 <main+0x418>)
    16d0:	4798      	blx	r3
			break;
    16d2:	e624      	b.n	131e <main+0x4e>
    16d4:	0000191d 	.word	0x0000191d
    16d8:	2000027c 	.word	0x2000027c
    16dc:	00001221 	.word	0x00001221
    16e0:	00000665 	.word	0x00000665
    16e4:	000005dd 	.word	0x000005dd
    16e8:	00000635 	.word	0x00000635

000016ec <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    16ec:	b940      	cbnz	r0, 1700 <_read+0x14>
{
    16ee:	b508      	push	{r3, lr}
    16f0:	460b      	mov	r3, r1
    16f2:	4611      	mov	r1, r2
    16f4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    16f6:	4b04      	ldr	r3, [pc, #16]	; (1708 <_read+0x1c>)
    16f8:	4798      	blx	r3
    16fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    16fe:	bd08      	pop	{r3, pc}
		return -1;
    1700:	f04f 30ff 	mov.w	r0, #4294967295
    1704:	4770      	bx	lr
    1706:	bf00      	nop
    1708:	0000175d 	.word	0x0000175d

0000170c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    170c:	3801      	subs	r0, #1
    170e:	2802      	cmp	r0, #2
    1710:	d808      	bhi.n	1724 <_write+0x18>
{
    1712:	b508      	push	{r3, lr}
    1714:	460b      	mov	r3, r1
    1716:	4611      	mov	r1, r2
    1718:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <_write+0x20>)
    171c:	4798      	blx	r3
    171e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    1722:	bd08      	pop	{r3, pc}
		return -1;
    1724:	f04f 30ff 	mov.w	r0, #4294967295
    1728:	4770      	bx	lr
    172a:	bf00      	nop
    172c:	00001781 	.word	0x00001781

00001730 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1734:	4d06      	ldr	r5, [pc, #24]	; (1750 <stdio_io_init+0x20>)
    1736:	682b      	ldr	r3, [r5, #0]
    1738:	2100      	movs	r1, #0
    173a:	6898      	ldr	r0, [r3, #8]
    173c:	4c05      	ldr	r4, [pc, #20]	; (1754 <stdio_io_init+0x24>)
    173e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1740:	682b      	ldr	r3, [r5, #0]
    1742:	2100      	movs	r1, #0
    1744:	6858      	ldr	r0, [r3, #4]
    1746:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1748:	4b03      	ldr	r3, [pc, #12]	; (1758 <stdio_io_init+0x28>)
    174a:	601e      	str	r6, [r3, #0]
    174c:	bd70      	pop	{r4, r5, r6, pc}
    174e:	bf00      	nop
    1750:	20000028 	.word	0x20000028
    1754:	0000195d 	.word	0x0000195d
    1758:	20000270 	.word	0x20000270

0000175c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    175c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    175e:	4b06      	ldr	r3, [pc, #24]	; (1778 <stdio_io_read+0x1c>)
    1760:	681b      	ldr	r3, [r3, #0]
    1762:	b133      	cbz	r3, 1772 <stdio_io_read+0x16>
    1764:	460a      	mov	r2, r1
    1766:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1768:	b292      	uxth	r2, r2
    176a:	4618      	mov	r0, r3
    176c:	4b03      	ldr	r3, [pc, #12]	; (177c <stdio_io_read+0x20>)
    176e:	4798      	blx	r3
    1770:	bd08      	pop	{r3, pc}
		return 0;
    1772:	2000      	movs	r0, #0
}
    1774:	bd08      	pop	{r3, pc}
    1776:	bf00      	nop
    1778:	20000270 	.word	0x20000270
    177c:	00000719 	.word	0x00000719

00001780 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1780:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <stdio_io_write+0x1c>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	b133      	cbz	r3, 1796 <stdio_io_write+0x16>
    1788:	460a      	mov	r2, r1
    178a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    178c:	b292      	uxth	r2, r2
    178e:	4618      	mov	r0, r3
    1790:	4b03      	ldr	r3, [pc, #12]	; (17a0 <stdio_io_write+0x20>)
    1792:	4798      	blx	r3
    1794:	bd08      	pop	{r3, pc}
		return 0;
    1796:	2000      	movs	r0, #0
}
    1798:	bd08      	pop	{r3, pc}
    179a:	bf00      	nop
    179c:	20000270 	.word	0x20000270
    17a0:	000006e9 	.word	0x000006e9

000017a4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    17a4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    17a6:	4c04      	ldr	r4, [pc, #16]	; (17b8 <stdio_redirect_init+0x14>)
    17a8:	4620      	mov	r0, r4
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <stdio_redirect_init+0x18>)
    17ac:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    17ae:	4620      	mov	r0, r4
    17b0:	4b03      	ldr	r3, [pc, #12]	; (17c0 <stdio_redirect_init+0x1c>)
    17b2:	4798      	blx	r3
    17b4:	bd10      	pop	{r4, pc}
    17b6:	bf00      	nop
    17b8:	200002a4 	.word	0x200002a4
    17bc:	00000865 	.word	0x00000865
    17c0:	00001731 	.word	0x00001731

000017c4 <__libc_init_array>:
    17c4:	b570      	push	{r4, r5, r6, lr}
    17c6:	4e0d      	ldr	r6, [pc, #52]	; (17fc <__libc_init_array+0x38>)
    17c8:	4c0d      	ldr	r4, [pc, #52]	; (1800 <__libc_init_array+0x3c>)
    17ca:	1ba4      	subs	r4, r4, r6
    17cc:	10a4      	asrs	r4, r4, #2
    17ce:	2500      	movs	r5, #0
    17d0:	42a5      	cmp	r5, r4
    17d2:	d109      	bne.n	17e8 <__libc_init_array+0x24>
    17d4:	4e0b      	ldr	r6, [pc, #44]	; (1804 <__libc_init_array+0x40>)
    17d6:	4c0c      	ldr	r4, [pc, #48]	; (1808 <__libc_init_array+0x44>)
    17d8:	f002 faac 	bl	3d34 <_init>
    17dc:	1ba4      	subs	r4, r4, r6
    17de:	10a4      	asrs	r4, r4, #2
    17e0:	2500      	movs	r5, #0
    17e2:	42a5      	cmp	r5, r4
    17e4:	d105      	bne.n	17f2 <__libc_init_array+0x2e>
    17e6:	bd70      	pop	{r4, r5, r6, pc}
    17e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    17ec:	4798      	blx	r3
    17ee:	3501      	adds	r5, #1
    17f0:	e7ee      	b.n	17d0 <__libc_init_array+0xc>
    17f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    17f6:	4798      	blx	r3
    17f8:	3501      	adds	r5, #1
    17fa:	e7f2      	b.n	17e2 <__libc_init_array+0x1e>
    17fc:	00003d40 	.word	0x00003d40
    1800:	00003d40 	.word	0x00003d40
    1804:	00003d40 	.word	0x00003d40
    1808:	00003d44 	.word	0x00003d44

0000180c <memcpy>:
    180c:	b510      	push	{r4, lr}
    180e:	1e43      	subs	r3, r0, #1
    1810:	440a      	add	r2, r1
    1812:	4291      	cmp	r1, r2
    1814:	d100      	bne.n	1818 <memcpy+0xc>
    1816:	bd10      	pop	{r4, pc}
    1818:	f811 4b01 	ldrb.w	r4, [r1], #1
    181c:	f803 4f01 	strb.w	r4, [r3, #1]!
    1820:	e7f7      	b.n	1812 <memcpy+0x6>

00001822 <memset>:
    1822:	4402      	add	r2, r0
    1824:	4603      	mov	r3, r0
    1826:	4293      	cmp	r3, r2
    1828:	d100      	bne.n	182c <memset+0xa>
    182a:	4770      	bx	lr
    182c:	f803 1b01 	strb.w	r1, [r3], #1
    1830:	e7f9      	b.n	1826 <memset+0x4>
	...

00001834 <iprintf>:
    1834:	b40f      	push	{r0, r1, r2, r3}
    1836:	4b0a      	ldr	r3, [pc, #40]	; (1860 <iprintf+0x2c>)
    1838:	b513      	push	{r0, r1, r4, lr}
    183a:	681c      	ldr	r4, [r3, #0]
    183c:	b124      	cbz	r4, 1848 <iprintf+0x14>
    183e:	69a3      	ldr	r3, [r4, #24]
    1840:	b913      	cbnz	r3, 1848 <iprintf+0x14>
    1842:	4620      	mov	r0, r4
    1844:	f000 fb04 	bl	1e50 <__sinit>
    1848:	ab05      	add	r3, sp, #20
    184a:	9a04      	ldr	r2, [sp, #16]
    184c:	68a1      	ldr	r1, [r4, #8]
    184e:	9301      	str	r3, [sp, #4]
    1850:	4620      	mov	r0, r4
    1852:	f000 fce3 	bl	221c <_vfiprintf_r>
    1856:	b002      	add	sp, #8
    1858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    185c:	b004      	add	sp, #16
    185e:	4770      	bx	lr
    1860:	20000028 	.word	0x20000028

00001864 <_puts_r>:
    1864:	b570      	push	{r4, r5, r6, lr}
    1866:	460e      	mov	r6, r1
    1868:	4605      	mov	r5, r0
    186a:	b118      	cbz	r0, 1874 <_puts_r+0x10>
    186c:	6983      	ldr	r3, [r0, #24]
    186e:	b90b      	cbnz	r3, 1874 <_puts_r+0x10>
    1870:	f000 faee 	bl	1e50 <__sinit>
    1874:	69ab      	ldr	r3, [r5, #24]
    1876:	68ac      	ldr	r4, [r5, #8]
    1878:	b913      	cbnz	r3, 1880 <_puts_r+0x1c>
    187a:	4628      	mov	r0, r5
    187c:	f000 fae8 	bl	1e50 <__sinit>
    1880:	4b23      	ldr	r3, [pc, #140]	; (1910 <_puts_r+0xac>)
    1882:	429c      	cmp	r4, r3
    1884:	d117      	bne.n	18b6 <_puts_r+0x52>
    1886:	686c      	ldr	r4, [r5, #4]
    1888:	89a3      	ldrh	r3, [r4, #12]
    188a:	071b      	lsls	r3, r3, #28
    188c:	d51d      	bpl.n	18ca <_puts_r+0x66>
    188e:	6923      	ldr	r3, [r4, #16]
    1890:	b1db      	cbz	r3, 18ca <_puts_r+0x66>
    1892:	3e01      	subs	r6, #1
    1894:	68a3      	ldr	r3, [r4, #8]
    1896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    189a:	3b01      	subs	r3, #1
    189c:	60a3      	str	r3, [r4, #8]
    189e:	b9e9      	cbnz	r1, 18dc <_puts_r+0x78>
    18a0:	2b00      	cmp	r3, #0
    18a2:	da2e      	bge.n	1902 <_puts_r+0x9e>
    18a4:	4622      	mov	r2, r4
    18a6:	210a      	movs	r1, #10
    18a8:	4628      	mov	r0, r5
    18aa:	f000 f90d 	bl	1ac8 <__swbuf_r>
    18ae:	3001      	adds	r0, #1
    18b0:	d011      	beq.n	18d6 <_puts_r+0x72>
    18b2:	200a      	movs	r0, #10
    18b4:	bd70      	pop	{r4, r5, r6, pc}
    18b6:	4b17      	ldr	r3, [pc, #92]	; (1914 <_puts_r+0xb0>)
    18b8:	429c      	cmp	r4, r3
    18ba:	d101      	bne.n	18c0 <_puts_r+0x5c>
    18bc:	68ac      	ldr	r4, [r5, #8]
    18be:	e7e3      	b.n	1888 <_puts_r+0x24>
    18c0:	4b15      	ldr	r3, [pc, #84]	; (1918 <_puts_r+0xb4>)
    18c2:	429c      	cmp	r4, r3
    18c4:	bf08      	it	eq
    18c6:	68ec      	ldreq	r4, [r5, #12]
    18c8:	e7de      	b.n	1888 <_puts_r+0x24>
    18ca:	4621      	mov	r1, r4
    18cc:	4628      	mov	r0, r5
    18ce:	f000 f94d 	bl	1b6c <__swsetup_r>
    18d2:	2800      	cmp	r0, #0
    18d4:	d0dd      	beq.n	1892 <_puts_r+0x2e>
    18d6:	f04f 30ff 	mov.w	r0, #4294967295
    18da:	bd70      	pop	{r4, r5, r6, pc}
    18dc:	2b00      	cmp	r3, #0
    18de:	da04      	bge.n	18ea <_puts_r+0x86>
    18e0:	69a2      	ldr	r2, [r4, #24]
    18e2:	4293      	cmp	r3, r2
    18e4:	db06      	blt.n	18f4 <_puts_r+0x90>
    18e6:	290a      	cmp	r1, #10
    18e8:	d004      	beq.n	18f4 <_puts_r+0x90>
    18ea:	6823      	ldr	r3, [r4, #0]
    18ec:	1c5a      	adds	r2, r3, #1
    18ee:	6022      	str	r2, [r4, #0]
    18f0:	7019      	strb	r1, [r3, #0]
    18f2:	e7cf      	b.n	1894 <_puts_r+0x30>
    18f4:	4622      	mov	r2, r4
    18f6:	4628      	mov	r0, r5
    18f8:	f000 f8e6 	bl	1ac8 <__swbuf_r>
    18fc:	3001      	adds	r0, #1
    18fe:	d1c9      	bne.n	1894 <_puts_r+0x30>
    1900:	e7e9      	b.n	18d6 <_puts_r+0x72>
    1902:	6823      	ldr	r3, [r4, #0]
    1904:	200a      	movs	r0, #10
    1906:	1c5a      	adds	r2, r3, #1
    1908:	6022      	str	r2, [r4, #0]
    190a:	7018      	strb	r0, [r3, #0]
    190c:	bd70      	pop	{r4, r5, r6, pc}
    190e:	bf00      	nop
    1910:	00003b8c 	.word	0x00003b8c
    1914:	00003bac 	.word	0x00003bac
    1918:	00003b6c 	.word	0x00003b6c

0000191c <puts>:
    191c:	4b02      	ldr	r3, [pc, #8]	; (1928 <puts+0xc>)
    191e:	4601      	mov	r1, r0
    1920:	6818      	ldr	r0, [r3, #0]
    1922:	f7ff bf9f 	b.w	1864 <_puts_r>
    1926:	bf00      	nop
    1928:	20000028 	.word	0x20000028

0000192c <iscanf>:
    192c:	b40f      	push	{r0, r1, r2, r3}
    192e:	4b0a      	ldr	r3, [pc, #40]	; (1958 <iscanf+0x2c>)
    1930:	b513      	push	{r0, r1, r4, lr}
    1932:	681c      	ldr	r4, [r3, #0]
    1934:	b124      	cbz	r4, 1940 <iscanf+0x14>
    1936:	69a3      	ldr	r3, [r4, #24]
    1938:	b913      	cbnz	r3, 1940 <iscanf+0x14>
    193a:	4620      	mov	r0, r4
    193c:	f000 fa88 	bl	1e50 <__sinit>
    1940:	ab05      	add	r3, sp, #20
    1942:	9a04      	ldr	r2, [sp, #16]
    1944:	6861      	ldr	r1, [r4, #4]
    1946:	9301      	str	r3, [sp, #4]
    1948:	4620      	mov	r0, r4
    194a:	f001 f867 	bl	2a1c <_vfiscanf_r>
    194e:	b002      	add	sp, #8
    1950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1954:	b004      	add	sp, #16
    1956:	4770      	bx	lr
    1958:	20000028 	.word	0x20000028

0000195c <setbuf>:
    195c:	2900      	cmp	r1, #0
    195e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1962:	bf0c      	ite	eq
    1964:	2202      	moveq	r2, #2
    1966:	2200      	movne	r2, #0
    1968:	f000 b800 	b.w	196c <setvbuf>

0000196c <setvbuf>:
    196c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1970:	461d      	mov	r5, r3
    1972:	4b51      	ldr	r3, [pc, #324]	; (1ab8 <setvbuf+0x14c>)
    1974:	681e      	ldr	r6, [r3, #0]
    1976:	4604      	mov	r4, r0
    1978:	460f      	mov	r7, r1
    197a:	4690      	mov	r8, r2
    197c:	b126      	cbz	r6, 1988 <setvbuf+0x1c>
    197e:	69b3      	ldr	r3, [r6, #24]
    1980:	b913      	cbnz	r3, 1988 <setvbuf+0x1c>
    1982:	4630      	mov	r0, r6
    1984:	f000 fa64 	bl	1e50 <__sinit>
    1988:	4b4c      	ldr	r3, [pc, #304]	; (1abc <setvbuf+0x150>)
    198a:	429c      	cmp	r4, r3
    198c:	d152      	bne.n	1a34 <setvbuf+0xc8>
    198e:	6874      	ldr	r4, [r6, #4]
    1990:	f1b8 0f02 	cmp.w	r8, #2
    1994:	d006      	beq.n	19a4 <setvbuf+0x38>
    1996:	f1b8 0f01 	cmp.w	r8, #1
    199a:	f200 8089 	bhi.w	1ab0 <setvbuf+0x144>
    199e:	2d00      	cmp	r5, #0
    19a0:	f2c0 8086 	blt.w	1ab0 <setvbuf+0x144>
    19a4:	4621      	mov	r1, r4
    19a6:	4630      	mov	r0, r6
    19a8:	f000 f9d6 	bl	1d58 <_fflush_r>
    19ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
    19ae:	b141      	cbz	r1, 19c2 <setvbuf+0x56>
    19b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    19b4:	4299      	cmp	r1, r3
    19b6:	d002      	beq.n	19be <setvbuf+0x52>
    19b8:	4630      	mov	r0, r6
    19ba:	f000 fb5b 	bl	2074 <_free_r>
    19be:	2300      	movs	r3, #0
    19c0:	6363      	str	r3, [r4, #52]	; 0x34
    19c2:	2300      	movs	r3, #0
    19c4:	61a3      	str	r3, [r4, #24]
    19c6:	6063      	str	r3, [r4, #4]
    19c8:	89a3      	ldrh	r3, [r4, #12]
    19ca:	061b      	lsls	r3, r3, #24
    19cc:	d503      	bpl.n	19d6 <setvbuf+0x6a>
    19ce:	6921      	ldr	r1, [r4, #16]
    19d0:	4630      	mov	r0, r6
    19d2:	f000 fb4f 	bl	2074 <_free_r>
    19d6:	89a3      	ldrh	r3, [r4, #12]
    19d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    19dc:	f023 0303 	bic.w	r3, r3, #3
    19e0:	f1b8 0f02 	cmp.w	r8, #2
    19e4:	81a3      	strh	r3, [r4, #12]
    19e6:	d05d      	beq.n	1aa4 <setvbuf+0x138>
    19e8:	ab01      	add	r3, sp, #4
    19ea:	466a      	mov	r2, sp
    19ec:	4621      	mov	r1, r4
    19ee:	4630      	mov	r0, r6
    19f0:	f000 fad4 	bl	1f9c <__swhatbuf_r>
    19f4:	89a3      	ldrh	r3, [r4, #12]
    19f6:	4318      	orrs	r0, r3
    19f8:	81a0      	strh	r0, [r4, #12]
    19fa:	bb2d      	cbnz	r5, 1a48 <setvbuf+0xdc>
    19fc:	9d00      	ldr	r5, [sp, #0]
    19fe:	4628      	mov	r0, r5
    1a00:	f000 fb30 	bl	2064 <malloc>
    1a04:	4607      	mov	r7, r0
    1a06:	2800      	cmp	r0, #0
    1a08:	d14e      	bne.n	1aa8 <setvbuf+0x13c>
    1a0a:	f8dd 9000 	ldr.w	r9, [sp]
    1a0e:	45a9      	cmp	r9, r5
    1a10:	d13c      	bne.n	1a8c <setvbuf+0x120>
    1a12:	f04f 30ff 	mov.w	r0, #4294967295
    1a16:	89a3      	ldrh	r3, [r4, #12]
    1a18:	f043 0302 	orr.w	r3, r3, #2
    1a1c:	81a3      	strh	r3, [r4, #12]
    1a1e:	2300      	movs	r3, #0
    1a20:	60a3      	str	r3, [r4, #8]
    1a22:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1a26:	6023      	str	r3, [r4, #0]
    1a28:	6123      	str	r3, [r4, #16]
    1a2a:	2301      	movs	r3, #1
    1a2c:	6163      	str	r3, [r4, #20]
    1a2e:	b003      	add	sp, #12
    1a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1a34:	4b22      	ldr	r3, [pc, #136]	; (1ac0 <setvbuf+0x154>)
    1a36:	429c      	cmp	r4, r3
    1a38:	d101      	bne.n	1a3e <setvbuf+0xd2>
    1a3a:	68b4      	ldr	r4, [r6, #8]
    1a3c:	e7a8      	b.n	1990 <setvbuf+0x24>
    1a3e:	4b21      	ldr	r3, [pc, #132]	; (1ac4 <setvbuf+0x158>)
    1a40:	429c      	cmp	r4, r3
    1a42:	bf08      	it	eq
    1a44:	68f4      	ldreq	r4, [r6, #12]
    1a46:	e7a3      	b.n	1990 <setvbuf+0x24>
    1a48:	2f00      	cmp	r7, #0
    1a4a:	d0d8      	beq.n	19fe <setvbuf+0x92>
    1a4c:	69b3      	ldr	r3, [r6, #24]
    1a4e:	b913      	cbnz	r3, 1a56 <setvbuf+0xea>
    1a50:	4630      	mov	r0, r6
    1a52:	f000 f9fd 	bl	1e50 <__sinit>
    1a56:	f1b8 0f01 	cmp.w	r8, #1
    1a5a:	bf08      	it	eq
    1a5c:	89a3      	ldrheq	r3, [r4, #12]
    1a5e:	6027      	str	r7, [r4, #0]
    1a60:	bf04      	itt	eq
    1a62:	f043 0301 	orreq.w	r3, r3, #1
    1a66:	81a3      	strheq	r3, [r4, #12]
    1a68:	89a3      	ldrh	r3, [r4, #12]
    1a6a:	6127      	str	r7, [r4, #16]
    1a6c:	f013 0008 	ands.w	r0, r3, #8
    1a70:	6165      	str	r5, [r4, #20]
    1a72:	d01b      	beq.n	1aac <setvbuf+0x140>
    1a74:	f013 0001 	ands.w	r0, r3, #1
    1a78:	bf18      	it	ne
    1a7a:	426d      	negne	r5, r5
    1a7c:	f04f 0300 	mov.w	r3, #0
    1a80:	bf1d      	ittte	ne
    1a82:	60a3      	strne	r3, [r4, #8]
    1a84:	61a5      	strne	r5, [r4, #24]
    1a86:	4618      	movne	r0, r3
    1a88:	60a5      	streq	r5, [r4, #8]
    1a8a:	e7d0      	b.n	1a2e <setvbuf+0xc2>
    1a8c:	4648      	mov	r0, r9
    1a8e:	f000 fae9 	bl	2064 <malloc>
    1a92:	4607      	mov	r7, r0
    1a94:	2800      	cmp	r0, #0
    1a96:	d0bc      	beq.n	1a12 <setvbuf+0xa6>
    1a98:	89a3      	ldrh	r3, [r4, #12]
    1a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a9e:	81a3      	strh	r3, [r4, #12]
    1aa0:	464d      	mov	r5, r9
    1aa2:	e7d3      	b.n	1a4c <setvbuf+0xe0>
    1aa4:	2000      	movs	r0, #0
    1aa6:	e7b6      	b.n	1a16 <setvbuf+0xaa>
    1aa8:	46a9      	mov	r9, r5
    1aaa:	e7f5      	b.n	1a98 <setvbuf+0x12c>
    1aac:	60a0      	str	r0, [r4, #8]
    1aae:	e7be      	b.n	1a2e <setvbuf+0xc2>
    1ab0:	f04f 30ff 	mov.w	r0, #4294967295
    1ab4:	e7bb      	b.n	1a2e <setvbuf+0xc2>
    1ab6:	bf00      	nop
    1ab8:	20000028 	.word	0x20000028
    1abc:	00003b8c 	.word	0x00003b8c
    1ac0:	00003bac 	.word	0x00003bac
    1ac4:	00003b6c 	.word	0x00003b6c

00001ac8 <__swbuf_r>:
    1ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aca:	460e      	mov	r6, r1
    1acc:	4614      	mov	r4, r2
    1ace:	4605      	mov	r5, r0
    1ad0:	b118      	cbz	r0, 1ada <__swbuf_r+0x12>
    1ad2:	6983      	ldr	r3, [r0, #24]
    1ad4:	b90b      	cbnz	r3, 1ada <__swbuf_r+0x12>
    1ad6:	f000 f9bb 	bl	1e50 <__sinit>
    1ada:	4b21      	ldr	r3, [pc, #132]	; (1b60 <__swbuf_r+0x98>)
    1adc:	429c      	cmp	r4, r3
    1ade:	d12a      	bne.n	1b36 <__swbuf_r+0x6e>
    1ae0:	686c      	ldr	r4, [r5, #4]
    1ae2:	69a3      	ldr	r3, [r4, #24]
    1ae4:	60a3      	str	r3, [r4, #8]
    1ae6:	89a3      	ldrh	r3, [r4, #12]
    1ae8:	071a      	lsls	r2, r3, #28
    1aea:	d52e      	bpl.n	1b4a <__swbuf_r+0x82>
    1aec:	6923      	ldr	r3, [r4, #16]
    1aee:	b363      	cbz	r3, 1b4a <__swbuf_r+0x82>
    1af0:	6923      	ldr	r3, [r4, #16]
    1af2:	6820      	ldr	r0, [r4, #0]
    1af4:	1ac0      	subs	r0, r0, r3
    1af6:	6963      	ldr	r3, [r4, #20]
    1af8:	b2f6      	uxtb	r6, r6
    1afa:	4298      	cmp	r0, r3
    1afc:	4637      	mov	r7, r6
    1afe:	db04      	blt.n	1b0a <__swbuf_r+0x42>
    1b00:	4621      	mov	r1, r4
    1b02:	4628      	mov	r0, r5
    1b04:	f000 f928 	bl	1d58 <_fflush_r>
    1b08:	bb28      	cbnz	r0, 1b56 <__swbuf_r+0x8e>
    1b0a:	68a3      	ldr	r3, [r4, #8]
    1b0c:	3b01      	subs	r3, #1
    1b0e:	60a3      	str	r3, [r4, #8]
    1b10:	6823      	ldr	r3, [r4, #0]
    1b12:	1c5a      	adds	r2, r3, #1
    1b14:	6022      	str	r2, [r4, #0]
    1b16:	701e      	strb	r6, [r3, #0]
    1b18:	6963      	ldr	r3, [r4, #20]
    1b1a:	3001      	adds	r0, #1
    1b1c:	4298      	cmp	r0, r3
    1b1e:	d004      	beq.n	1b2a <__swbuf_r+0x62>
    1b20:	89a3      	ldrh	r3, [r4, #12]
    1b22:	07db      	lsls	r3, r3, #31
    1b24:	d519      	bpl.n	1b5a <__swbuf_r+0x92>
    1b26:	2e0a      	cmp	r6, #10
    1b28:	d117      	bne.n	1b5a <__swbuf_r+0x92>
    1b2a:	4621      	mov	r1, r4
    1b2c:	4628      	mov	r0, r5
    1b2e:	f000 f913 	bl	1d58 <_fflush_r>
    1b32:	b190      	cbz	r0, 1b5a <__swbuf_r+0x92>
    1b34:	e00f      	b.n	1b56 <__swbuf_r+0x8e>
    1b36:	4b0b      	ldr	r3, [pc, #44]	; (1b64 <__swbuf_r+0x9c>)
    1b38:	429c      	cmp	r4, r3
    1b3a:	d101      	bne.n	1b40 <__swbuf_r+0x78>
    1b3c:	68ac      	ldr	r4, [r5, #8]
    1b3e:	e7d0      	b.n	1ae2 <__swbuf_r+0x1a>
    1b40:	4b09      	ldr	r3, [pc, #36]	; (1b68 <__swbuf_r+0xa0>)
    1b42:	429c      	cmp	r4, r3
    1b44:	bf08      	it	eq
    1b46:	68ec      	ldreq	r4, [r5, #12]
    1b48:	e7cb      	b.n	1ae2 <__swbuf_r+0x1a>
    1b4a:	4621      	mov	r1, r4
    1b4c:	4628      	mov	r0, r5
    1b4e:	f000 f80d 	bl	1b6c <__swsetup_r>
    1b52:	2800      	cmp	r0, #0
    1b54:	d0cc      	beq.n	1af0 <__swbuf_r+0x28>
    1b56:	f04f 37ff 	mov.w	r7, #4294967295
    1b5a:	4638      	mov	r0, r7
    1b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b5e:	bf00      	nop
    1b60:	00003b8c 	.word	0x00003b8c
    1b64:	00003bac 	.word	0x00003bac
    1b68:	00003b6c 	.word	0x00003b6c

00001b6c <__swsetup_r>:
    1b6c:	4b32      	ldr	r3, [pc, #200]	; (1c38 <__swsetup_r+0xcc>)
    1b6e:	b570      	push	{r4, r5, r6, lr}
    1b70:	681d      	ldr	r5, [r3, #0]
    1b72:	4606      	mov	r6, r0
    1b74:	460c      	mov	r4, r1
    1b76:	b125      	cbz	r5, 1b82 <__swsetup_r+0x16>
    1b78:	69ab      	ldr	r3, [r5, #24]
    1b7a:	b913      	cbnz	r3, 1b82 <__swsetup_r+0x16>
    1b7c:	4628      	mov	r0, r5
    1b7e:	f000 f967 	bl	1e50 <__sinit>
    1b82:	4b2e      	ldr	r3, [pc, #184]	; (1c3c <__swsetup_r+0xd0>)
    1b84:	429c      	cmp	r4, r3
    1b86:	d10f      	bne.n	1ba8 <__swsetup_r+0x3c>
    1b88:	686c      	ldr	r4, [r5, #4]
    1b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1b8e:	b29a      	uxth	r2, r3
    1b90:	0715      	lsls	r5, r2, #28
    1b92:	d42c      	bmi.n	1bee <__swsetup_r+0x82>
    1b94:	06d0      	lsls	r0, r2, #27
    1b96:	d411      	bmi.n	1bbc <__swsetup_r+0x50>
    1b98:	2209      	movs	r2, #9
    1b9a:	6032      	str	r2, [r6, #0]
    1b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ba0:	81a3      	strh	r3, [r4, #12]
    1ba2:	f04f 30ff 	mov.w	r0, #4294967295
    1ba6:	bd70      	pop	{r4, r5, r6, pc}
    1ba8:	4b25      	ldr	r3, [pc, #148]	; (1c40 <__swsetup_r+0xd4>)
    1baa:	429c      	cmp	r4, r3
    1bac:	d101      	bne.n	1bb2 <__swsetup_r+0x46>
    1bae:	68ac      	ldr	r4, [r5, #8]
    1bb0:	e7eb      	b.n	1b8a <__swsetup_r+0x1e>
    1bb2:	4b24      	ldr	r3, [pc, #144]	; (1c44 <__swsetup_r+0xd8>)
    1bb4:	429c      	cmp	r4, r3
    1bb6:	bf08      	it	eq
    1bb8:	68ec      	ldreq	r4, [r5, #12]
    1bba:	e7e6      	b.n	1b8a <__swsetup_r+0x1e>
    1bbc:	0751      	lsls	r1, r2, #29
    1bbe:	d512      	bpl.n	1be6 <__swsetup_r+0x7a>
    1bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1bc2:	b141      	cbz	r1, 1bd6 <__swsetup_r+0x6a>
    1bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1bc8:	4299      	cmp	r1, r3
    1bca:	d002      	beq.n	1bd2 <__swsetup_r+0x66>
    1bcc:	4630      	mov	r0, r6
    1bce:	f000 fa51 	bl	2074 <_free_r>
    1bd2:	2300      	movs	r3, #0
    1bd4:	6363      	str	r3, [r4, #52]	; 0x34
    1bd6:	89a3      	ldrh	r3, [r4, #12]
    1bd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1bdc:	81a3      	strh	r3, [r4, #12]
    1bde:	2300      	movs	r3, #0
    1be0:	6063      	str	r3, [r4, #4]
    1be2:	6923      	ldr	r3, [r4, #16]
    1be4:	6023      	str	r3, [r4, #0]
    1be6:	89a3      	ldrh	r3, [r4, #12]
    1be8:	f043 0308 	orr.w	r3, r3, #8
    1bec:	81a3      	strh	r3, [r4, #12]
    1bee:	6923      	ldr	r3, [r4, #16]
    1bf0:	b94b      	cbnz	r3, 1c06 <__swsetup_r+0x9a>
    1bf2:	89a3      	ldrh	r3, [r4, #12]
    1bf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1bfc:	d003      	beq.n	1c06 <__swsetup_r+0x9a>
    1bfe:	4621      	mov	r1, r4
    1c00:	4630      	mov	r0, r6
    1c02:	f000 f9ef 	bl	1fe4 <__smakebuf_r>
    1c06:	89a2      	ldrh	r2, [r4, #12]
    1c08:	f012 0301 	ands.w	r3, r2, #1
    1c0c:	d00c      	beq.n	1c28 <__swsetup_r+0xbc>
    1c0e:	2300      	movs	r3, #0
    1c10:	60a3      	str	r3, [r4, #8]
    1c12:	6963      	ldr	r3, [r4, #20]
    1c14:	425b      	negs	r3, r3
    1c16:	61a3      	str	r3, [r4, #24]
    1c18:	6923      	ldr	r3, [r4, #16]
    1c1a:	b953      	cbnz	r3, 1c32 <__swsetup_r+0xc6>
    1c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1c24:	d1ba      	bne.n	1b9c <__swsetup_r+0x30>
    1c26:	bd70      	pop	{r4, r5, r6, pc}
    1c28:	0792      	lsls	r2, r2, #30
    1c2a:	bf58      	it	pl
    1c2c:	6963      	ldrpl	r3, [r4, #20]
    1c2e:	60a3      	str	r3, [r4, #8]
    1c30:	e7f2      	b.n	1c18 <__swsetup_r+0xac>
    1c32:	2000      	movs	r0, #0
    1c34:	e7f7      	b.n	1c26 <__swsetup_r+0xba>
    1c36:	bf00      	nop
    1c38:	20000028 	.word	0x20000028
    1c3c:	00003b8c 	.word	0x00003b8c
    1c40:	00003bac 	.word	0x00003bac
    1c44:	00003b6c 	.word	0x00003b6c

00001c48 <__sflush_r>:
    1c48:	898a      	ldrh	r2, [r1, #12]
    1c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c4e:	4605      	mov	r5, r0
    1c50:	0710      	lsls	r0, r2, #28
    1c52:	460c      	mov	r4, r1
    1c54:	d45a      	bmi.n	1d0c <__sflush_r+0xc4>
    1c56:	684b      	ldr	r3, [r1, #4]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	dc05      	bgt.n	1c68 <__sflush_r+0x20>
    1c5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1c5e:	2b00      	cmp	r3, #0
    1c60:	dc02      	bgt.n	1c68 <__sflush_r+0x20>
    1c62:	2000      	movs	r0, #0
    1c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1c6a:	2e00      	cmp	r6, #0
    1c6c:	d0f9      	beq.n	1c62 <__sflush_r+0x1a>
    1c6e:	2300      	movs	r3, #0
    1c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1c74:	682f      	ldr	r7, [r5, #0]
    1c76:	602b      	str	r3, [r5, #0]
    1c78:	d033      	beq.n	1ce2 <__sflush_r+0x9a>
    1c7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1c7c:	89a3      	ldrh	r3, [r4, #12]
    1c7e:	075a      	lsls	r2, r3, #29
    1c80:	d505      	bpl.n	1c8e <__sflush_r+0x46>
    1c82:	6863      	ldr	r3, [r4, #4]
    1c84:	1ac0      	subs	r0, r0, r3
    1c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1c88:	b10b      	cbz	r3, 1c8e <__sflush_r+0x46>
    1c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1c8c:	1ac0      	subs	r0, r0, r3
    1c8e:	2300      	movs	r3, #0
    1c90:	4602      	mov	r2, r0
    1c92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1c94:	6a21      	ldr	r1, [r4, #32]
    1c96:	4628      	mov	r0, r5
    1c98:	47b0      	blx	r6
    1c9a:	1c43      	adds	r3, r0, #1
    1c9c:	89a3      	ldrh	r3, [r4, #12]
    1c9e:	d106      	bne.n	1cae <__sflush_r+0x66>
    1ca0:	6829      	ldr	r1, [r5, #0]
    1ca2:	291d      	cmp	r1, #29
    1ca4:	d84b      	bhi.n	1d3e <__sflush_r+0xf6>
    1ca6:	4a2b      	ldr	r2, [pc, #172]	; (1d54 <__sflush_r+0x10c>)
    1ca8:	40ca      	lsrs	r2, r1
    1caa:	07d6      	lsls	r6, r2, #31
    1cac:	d547      	bpl.n	1d3e <__sflush_r+0xf6>
    1cae:	2200      	movs	r2, #0
    1cb0:	6062      	str	r2, [r4, #4]
    1cb2:	04d9      	lsls	r1, r3, #19
    1cb4:	6922      	ldr	r2, [r4, #16]
    1cb6:	6022      	str	r2, [r4, #0]
    1cb8:	d504      	bpl.n	1cc4 <__sflush_r+0x7c>
    1cba:	1c42      	adds	r2, r0, #1
    1cbc:	d101      	bne.n	1cc2 <__sflush_r+0x7a>
    1cbe:	682b      	ldr	r3, [r5, #0]
    1cc0:	b903      	cbnz	r3, 1cc4 <__sflush_r+0x7c>
    1cc2:	6560      	str	r0, [r4, #84]	; 0x54
    1cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cc6:	602f      	str	r7, [r5, #0]
    1cc8:	2900      	cmp	r1, #0
    1cca:	d0ca      	beq.n	1c62 <__sflush_r+0x1a>
    1ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1cd0:	4299      	cmp	r1, r3
    1cd2:	d002      	beq.n	1cda <__sflush_r+0x92>
    1cd4:	4628      	mov	r0, r5
    1cd6:	f000 f9cd 	bl	2074 <_free_r>
    1cda:	2000      	movs	r0, #0
    1cdc:	6360      	str	r0, [r4, #52]	; 0x34
    1cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ce2:	6a21      	ldr	r1, [r4, #32]
    1ce4:	2301      	movs	r3, #1
    1ce6:	4628      	mov	r0, r5
    1ce8:	47b0      	blx	r6
    1cea:	1c41      	adds	r1, r0, #1
    1cec:	d1c6      	bne.n	1c7c <__sflush_r+0x34>
    1cee:	682b      	ldr	r3, [r5, #0]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d0c3      	beq.n	1c7c <__sflush_r+0x34>
    1cf4:	2b1d      	cmp	r3, #29
    1cf6:	d001      	beq.n	1cfc <__sflush_r+0xb4>
    1cf8:	2b16      	cmp	r3, #22
    1cfa:	d101      	bne.n	1d00 <__sflush_r+0xb8>
    1cfc:	602f      	str	r7, [r5, #0]
    1cfe:	e7b0      	b.n	1c62 <__sflush_r+0x1a>
    1d00:	89a3      	ldrh	r3, [r4, #12]
    1d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d06:	81a3      	strh	r3, [r4, #12]
    1d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d0c:	690f      	ldr	r7, [r1, #16]
    1d0e:	2f00      	cmp	r7, #0
    1d10:	d0a7      	beq.n	1c62 <__sflush_r+0x1a>
    1d12:	0793      	lsls	r3, r2, #30
    1d14:	680e      	ldr	r6, [r1, #0]
    1d16:	bf08      	it	eq
    1d18:	694b      	ldreq	r3, [r1, #20]
    1d1a:	600f      	str	r7, [r1, #0]
    1d1c:	bf18      	it	ne
    1d1e:	2300      	movne	r3, #0
    1d20:	eba6 0807 	sub.w	r8, r6, r7
    1d24:	608b      	str	r3, [r1, #8]
    1d26:	f1b8 0f00 	cmp.w	r8, #0
    1d2a:	dd9a      	ble.n	1c62 <__sflush_r+0x1a>
    1d2c:	4643      	mov	r3, r8
    1d2e:	463a      	mov	r2, r7
    1d30:	6a21      	ldr	r1, [r4, #32]
    1d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1d34:	4628      	mov	r0, r5
    1d36:	47b0      	blx	r6
    1d38:	2800      	cmp	r0, #0
    1d3a:	dc07      	bgt.n	1d4c <__sflush_r+0x104>
    1d3c:	89a3      	ldrh	r3, [r4, #12]
    1d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d42:	81a3      	strh	r3, [r4, #12]
    1d44:	f04f 30ff 	mov.w	r0, #4294967295
    1d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d4c:	4407      	add	r7, r0
    1d4e:	eba8 0800 	sub.w	r8, r8, r0
    1d52:	e7e8      	b.n	1d26 <__sflush_r+0xde>
    1d54:	20400001 	.word	0x20400001

00001d58 <_fflush_r>:
    1d58:	b538      	push	{r3, r4, r5, lr}
    1d5a:	690b      	ldr	r3, [r1, #16]
    1d5c:	4605      	mov	r5, r0
    1d5e:	460c      	mov	r4, r1
    1d60:	b1db      	cbz	r3, 1d9a <_fflush_r+0x42>
    1d62:	b118      	cbz	r0, 1d6c <_fflush_r+0x14>
    1d64:	6983      	ldr	r3, [r0, #24]
    1d66:	b90b      	cbnz	r3, 1d6c <_fflush_r+0x14>
    1d68:	f000 f872 	bl	1e50 <__sinit>
    1d6c:	4b0c      	ldr	r3, [pc, #48]	; (1da0 <_fflush_r+0x48>)
    1d6e:	429c      	cmp	r4, r3
    1d70:	d109      	bne.n	1d86 <_fflush_r+0x2e>
    1d72:	686c      	ldr	r4, [r5, #4]
    1d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1d78:	b17b      	cbz	r3, 1d9a <_fflush_r+0x42>
    1d7a:	4621      	mov	r1, r4
    1d7c:	4628      	mov	r0, r5
    1d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1d82:	f7ff bf61 	b.w	1c48 <__sflush_r>
    1d86:	4b07      	ldr	r3, [pc, #28]	; (1da4 <_fflush_r+0x4c>)
    1d88:	429c      	cmp	r4, r3
    1d8a:	d101      	bne.n	1d90 <_fflush_r+0x38>
    1d8c:	68ac      	ldr	r4, [r5, #8]
    1d8e:	e7f1      	b.n	1d74 <_fflush_r+0x1c>
    1d90:	4b05      	ldr	r3, [pc, #20]	; (1da8 <_fflush_r+0x50>)
    1d92:	429c      	cmp	r4, r3
    1d94:	bf08      	it	eq
    1d96:	68ec      	ldreq	r4, [r5, #12]
    1d98:	e7ec      	b.n	1d74 <_fflush_r+0x1c>
    1d9a:	2000      	movs	r0, #0
    1d9c:	bd38      	pop	{r3, r4, r5, pc}
    1d9e:	bf00      	nop
    1da0:	00003b8c 	.word	0x00003b8c
    1da4:	00003bac 	.word	0x00003bac
    1da8:	00003b6c 	.word	0x00003b6c

00001dac <fflush>:
    1dac:	4601      	mov	r1, r0
    1dae:	b920      	cbnz	r0, 1dba <fflush+0xe>
    1db0:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <fflush+0x18>)
    1db2:	4905      	ldr	r1, [pc, #20]	; (1dc8 <fflush+0x1c>)
    1db4:	6818      	ldr	r0, [r3, #0]
    1db6:	f000 b8d3 	b.w	1f60 <_fwalk_reent>
    1dba:	4b04      	ldr	r3, [pc, #16]	; (1dcc <fflush+0x20>)
    1dbc:	6818      	ldr	r0, [r3, #0]
    1dbe:	f7ff bfcb 	b.w	1d58 <_fflush_r>
    1dc2:	bf00      	nop
    1dc4:	00003b68 	.word	0x00003b68
    1dc8:	00001d59 	.word	0x00001d59
    1dcc:	20000028 	.word	0x20000028

00001dd0 <_cleanup_r>:
    1dd0:	4901      	ldr	r1, [pc, #4]	; (1dd8 <_cleanup_r+0x8>)
    1dd2:	f000 b8c5 	b.w	1f60 <_fwalk_reent>
    1dd6:	bf00      	nop
    1dd8:	00001d59 	.word	0x00001d59

00001ddc <std.isra.0>:
    1ddc:	2300      	movs	r3, #0
    1dde:	b510      	push	{r4, lr}
    1de0:	4604      	mov	r4, r0
    1de2:	6003      	str	r3, [r0, #0]
    1de4:	6043      	str	r3, [r0, #4]
    1de6:	6083      	str	r3, [r0, #8]
    1de8:	8181      	strh	r1, [r0, #12]
    1dea:	6643      	str	r3, [r0, #100]	; 0x64
    1dec:	81c2      	strh	r2, [r0, #14]
    1dee:	6103      	str	r3, [r0, #16]
    1df0:	6143      	str	r3, [r0, #20]
    1df2:	6183      	str	r3, [r0, #24]
    1df4:	4619      	mov	r1, r3
    1df6:	2208      	movs	r2, #8
    1df8:	305c      	adds	r0, #92	; 0x5c
    1dfa:	f7ff fd12 	bl	1822 <memset>
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <std.isra.0+0x38>)
    1e00:	6263      	str	r3, [r4, #36]	; 0x24
    1e02:	4b05      	ldr	r3, [pc, #20]	; (1e18 <std.isra.0+0x3c>)
    1e04:	62a3      	str	r3, [r4, #40]	; 0x28
    1e06:	4b05      	ldr	r3, [pc, #20]	; (1e1c <std.isra.0+0x40>)
    1e08:	62e3      	str	r3, [r4, #44]	; 0x2c
    1e0a:	4b05      	ldr	r3, [pc, #20]	; (1e20 <std.isra.0+0x44>)
    1e0c:	6224      	str	r4, [r4, #32]
    1e0e:	6323      	str	r3, [r4, #48]	; 0x30
    1e10:	bd10      	pop	{r4, pc}
    1e12:	bf00      	nop
    1e14:	00002ec5 	.word	0x00002ec5
    1e18:	00002ee7 	.word	0x00002ee7
    1e1c:	00002f1f 	.word	0x00002f1f
    1e20:	00002f43 	.word	0x00002f43

00001e24 <__sfmoreglue>:
    1e24:	b570      	push	{r4, r5, r6, lr}
    1e26:	1e4a      	subs	r2, r1, #1
    1e28:	2568      	movs	r5, #104	; 0x68
    1e2a:	4355      	muls	r5, r2
    1e2c:	460e      	mov	r6, r1
    1e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1e32:	f000 f96d 	bl	2110 <_malloc_r>
    1e36:	4604      	mov	r4, r0
    1e38:	b140      	cbz	r0, 1e4c <__sfmoreglue+0x28>
    1e3a:	2100      	movs	r1, #0
    1e3c:	e880 0042 	stmia.w	r0, {r1, r6}
    1e40:	300c      	adds	r0, #12
    1e42:	60a0      	str	r0, [r4, #8]
    1e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1e48:	f7ff fceb 	bl	1822 <memset>
    1e4c:	4620      	mov	r0, r4
    1e4e:	bd70      	pop	{r4, r5, r6, pc}

00001e50 <__sinit>:
    1e50:	6983      	ldr	r3, [r0, #24]
    1e52:	b510      	push	{r4, lr}
    1e54:	4604      	mov	r4, r0
    1e56:	bb33      	cbnz	r3, 1ea6 <__sinit+0x56>
    1e58:	6483      	str	r3, [r0, #72]	; 0x48
    1e5a:	64c3      	str	r3, [r0, #76]	; 0x4c
    1e5c:	6503      	str	r3, [r0, #80]	; 0x50
    1e5e:	4b12      	ldr	r3, [pc, #72]	; (1ea8 <__sinit+0x58>)
    1e60:	4a12      	ldr	r2, [pc, #72]	; (1eac <__sinit+0x5c>)
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	6282      	str	r2, [r0, #40]	; 0x28
    1e66:	4298      	cmp	r0, r3
    1e68:	bf04      	itt	eq
    1e6a:	2301      	moveq	r3, #1
    1e6c:	6183      	streq	r3, [r0, #24]
    1e6e:	f000 f81f 	bl	1eb0 <__sfp>
    1e72:	6060      	str	r0, [r4, #4]
    1e74:	4620      	mov	r0, r4
    1e76:	f000 f81b 	bl	1eb0 <__sfp>
    1e7a:	60a0      	str	r0, [r4, #8]
    1e7c:	4620      	mov	r0, r4
    1e7e:	f000 f817 	bl	1eb0 <__sfp>
    1e82:	2200      	movs	r2, #0
    1e84:	60e0      	str	r0, [r4, #12]
    1e86:	2104      	movs	r1, #4
    1e88:	6860      	ldr	r0, [r4, #4]
    1e8a:	f7ff ffa7 	bl	1ddc <std.isra.0>
    1e8e:	2201      	movs	r2, #1
    1e90:	2109      	movs	r1, #9
    1e92:	68a0      	ldr	r0, [r4, #8]
    1e94:	f7ff ffa2 	bl	1ddc <std.isra.0>
    1e98:	2202      	movs	r2, #2
    1e9a:	2112      	movs	r1, #18
    1e9c:	68e0      	ldr	r0, [r4, #12]
    1e9e:	f7ff ff9d 	bl	1ddc <std.isra.0>
    1ea2:	2301      	movs	r3, #1
    1ea4:	61a3      	str	r3, [r4, #24]
    1ea6:	bd10      	pop	{r4, pc}
    1ea8:	00003b68 	.word	0x00003b68
    1eac:	00001dd1 	.word	0x00001dd1

00001eb0 <__sfp>:
    1eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eb2:	4b1c      	ldr	r3, [pc, #112]	; (1f24 <__sfp+0x74>)
    1eb4:	681e      	ldr	r6, [r3, #0]
    1eb6:	69b3      	ldr	r3, [r6, #24]
    1eb8:	4607      	mov	r7, r0
    1eba:	b913      	cbnz	r3, 1ec2 <__sfp+0x12>
    1ebc:	4630      	mov	r0, r6
    1ebe:	f7ff ffc7 	bl	1e50 <__sinit>
    1ec2:	3648      	adds	r6, #72	; 0x48
    1ec4:	68b4      	ldr	r4, [r6, #8]
    1ec6:	6873      	ldr	r3, [r6, #4]
    1ec8:	3b01      	subs	r3, #1
    1eca:	d503      	bpl.n	1ed4 <__sfp+0x24>
    1ecc:	6833      	ldr	r3, [r6, #0]
    1ece:	b133      	cbz	r3, 1ede <__sfp+0x2e>
    1ed0:	6836      	ldr	r6, [r6, #0]
    1ed2:	e7f7      	b.n	1ec4 <__sfp+0x14>
    1ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1ed8:	b16d      	cbz	r5, 1ef6 <__sfp+0x46>
    1eda:	3468      	adds	r4, #104	; 0x68
    1edc:	e7f4      	b.n	1ec8 <__sfp+0x18>
    1ede:	2104      	movs	r1, #4
    1ee0:	4638      	mov	r0, r7
    1ee2:	f7ff ff9f 	bl	1e24 <__sfmoreglue>
    1ee6:	6030      	str	r0, [r6, #0]
    1ee8:	2800      	cmp	r0, #0
    1eea:	d1f1      	bne.n	1ed0 <__sfp+0x20>
    1eec:	230c      	movs	r3, #12
    1eee:	603b      	str	r3, [r7, #0]
    1ef0:	4604      	mov	r4, r0
    1ef2:	4620      	mov	r0, r4
    1ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1efa:	81e3      	strh	r3, [r4, #14]
    1efc:	2301      	movs	r3, #1
    1efe:	81a3      	strh	r3, [r4, #12]
    1f00:	6665      	str	r5, [r4, #100]	; 0x64
    1f02:	6025      	str	r5, [r4, #0]
    1f04:	60a5      	str	r5, [r4, #8]
    1f06:	6065      	str	r5, [r4, #4]
    1f08:	6125      	str	r5, [r4, #16]
    1f0a:	6165      	str	r5, [r4, #20]
    1f0c:	61a5      	str	r5, [r4, #24]
    1f0e:	2208      	movs	r2, #8
    1f10:	4629      	mov	r1, r5
    1f12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1f16:	f7ff fc84 	bl	1822 <memset>
    1f1a:	6365      	str	r5, [r4, #52]	; 0x34
    1f1c:	63a5      	str	r5, [r4, #56]	; 0x38
    1f1e:	64a5      	str	r5, [r4, #72]	; 0x48
    1f20:	64e5      	str	r5, [r4, #76]	; 0x4c
    1f22:	e7e6      	b.n	1ef2 <__sfp+0x42>
    1f24:	00003b68 	.word	0x00003b68

00001f28 <_fwalk>:
    1f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f2c:	4688      	mov	r8, r1
    1f2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1f32:	2600      	movs	r6, #0
    1f34:	b914      	cbnz	r4, 1f3c <_fwalk+0x14>
    1f36:	4630      	mov	r0, r6
    1f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f3c:	68a5      	ldr	r5, [r4, #8]
    1f3e:	6867      	ldr	r7, [r4, #4]
    1f40:	3f01      	subs	r7, #1
    1f42:	d501      	bpl.n	1f48 <_fwalk+0x20>
    1f44:	6824      	ldr	r4, [r4, #0]
    1f46:	e7f5      	b.n	1f34 <_fwalk+0xc>
    1f48:	89ab      	ldrh	r3, [r5, #12]
    1f4a:	2b01      	cmp	r3, #1
    1f4c:	d906      	bls.n	1f5c <_fwalk+0x34>
    1f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1f52:	3301      	adds	r3, #1
    1f54:	d002      	beq.n	1f5c <_fwalk+0x34>
    1f56:	4628      	mov	r0, r5
    1f58:	47c0      	blx	r8
    1f5a:	4306      	orrs	r6, r0
    1f5c:	3568      	adds	r5, #104	; 0x68
    1f5e:	e7ef      	b.n	1f40 <_fwalk+0x18>

00001f60 <_fwalk_reent>:
    1f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f64:	4680      	mov	r8, r0
    1f66:	4689      	mov	r9, r1
    1f68:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1f6c:	2600      	movs	r6, #0
    1f6e:	b914      	cbnz	r4, 1f76 <_fwalk_reent+0x16>
    1f70:	4630      	mov	r0, r6
    1f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1f76:	68a5      	ldr	r5, [r4, #8]
    1f78:	6867      	ldr	r7, [r4, #4]
    1f7a:	3f01      	subs	r7, #1
    1f7c:	d501      	bpl.n	1f82 <_fwalk_reent+0x22>
    1f7e:	6824      	ldr	r4, [r4, #0]
    1f80:	e7f5      	b.n	1f6e <_fwalk_reent+0xe>
    1f82:	89ab      	ldrh	r3, [r5, #12]
    1f84:	2b01      	cmp	r3, #1
    1f86:	d907      	bls.n	1f98 <_fwalk_reent+0x38>
    1f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1f8c:	3301      	adds	r3, #1
    1f8e:	d003      	beq.n	1f98 <_fwalk_reent+0x38>
    1f90:	4629      	mov	r1, r5
    1f92:	4640      	mov	r0, r8
    1f94:	47c8      	blx	r9
    1f96:	4306      	orrs	r6, r0
    1f98:	3568      	adds	r5, #104	; 0x68
    1f9a:	e7ee      	b.n	1f7a <_fwalk_reent+0x1a>

00001f9c <__swhatbuf_r>:
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	460e      	mov	r6, r1
    1fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1fa4:	2900      	cmp	r1, #0
    1fa6:	b090      	sub	sp, #64	; 0x40
    1fa8:	4614      	mov	r4, r2
    1faa:	461d      	mov	r5, r3
    1fac:	da07      	bge.n	1fbe <__swhatbuf_r+0x22>
    1fae:	2300      	movs	r3, #0
    1fb0:	602b      	str	r3, [r5, #0]
    1fb2:	89b3      	ldrh	r3, [r6, #12]
    1fb4:	061a      	lsls	r2, r3, #24
    1fb6:	d410      	bmi.n	1fda <__swhatbuf_r+0x3e>
    1fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fbc:	e00e      	b.n	1fdc <__swhatbuf_r+0x40>
    1fbe:	aa01      	add	r2, sp, #4
    1fc0:	f001 f9b6 	bl	3330 <_fstat_r>
    1fc4:	2800      	cmp	r0, #0
    1fc6:	dbf2      	blt.n	1fae <__swhatbuf_r+0x12>
    1fc8:	9a02      	ldr	r2, [sp, #8]
    1fca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1fce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1fd2:	425a      	negs	r2, r3
    1fd4:	415a      	adcs	r2, r3
    1fd6:	602a      	str	r2, [r5, #0]
    1fd8:	e7ee      	b.n	1fb8 <__swhatbuf_r+0x1c>
    1fda:	2340      	movs	r3, #64	; 0x40
    1fdc:	2000      	movs	r0, #0
    1fde:	6023      	str	r3, [r4, #0]
    1fe0:	b010      	add	sp, #64	; 0x40
    1fe2:	bd70      	pop	{r4, r5, r6, pc}

00001fe4 <__smakebuf_r>:
    1fe4:	898b      	ldrh	r3, [r1, #12]
    1fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1fe8:	079d      	lsls	r5, r3, #30
    1fea:	4606      	mov	r6, r0
    1fec:	460c      	mov	r4, r1
    1fee:	d507      	bpl.n	2000 <__smakebuf_r+0x1c>
    1ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1ff4:	6023      	str	r3, [r4, #0]
    1ff6:	6123      	str	r3, [r4, #16]
    1ff8:	2301      	movs	r3, #1
    1ffa:	6163      	str	r3, [r4, #20]
    1ffc:	b002      	add	sp, #8
    1ffe:	bd70      	pop	{r4, r5, r6, pc}
    2000:	ab01      	add	r3, sp, #4
    2002:	466a      	mov	r2, sp
    2004:	f7ff ffca 	bl	1f9c <__swhatbuf_r>
    2008:	9900      	ldr	r1, [sp, #0]
    200a:	4605      	mov	r5, r0
    200c:	4630      	mov	r0, r6
    200e:	f000 f87f 	bl	2110 <_malloc_r>
    2012:	b948      	cbnz	r0, 2028 <__smakebuf_r+0x44>
    2014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2018:	059a      	lsls	r2, r3, #22
    201a:	d4ef      	bmi.n	1ffc <__smakebuf_r+0x18>
    201c:	f023 0303 	bic.w	r3, r3, #3
    2020:	f043 0302 	orr.w	r3, r3, #2
    2024:	81a3      	strh	r3, [r4, #12]
    2026:	e7e3      	b.n	1ff0 <__smakebuf_r+0xc>
    2028:	4b0d      	ldr	r3, [pc, #52]	; (2060 <__smakebuf_r+0x7c>)
    202a:	62b3      	str	r3, [r6, #40]	; 0x28
    202c:	89a3      	ldrh	r3, [r4, #12]
    202e:	6020      	str	r0, [r4, #0]
    2030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2034:	81a3      	strh	r3, [r4, #12]
    2036:	9b00      	ldr	r3, [sp, #0]
    2038:	6163      	str	r3, [r4, #20]
    203a:	9b01      	ldr	r3, [sp, #4]
    203c:	6120      	str	r0, [r4, #16]
    203e:	b15b      	cbz	r3, 2058 <__smakebuf_r+0x74>
    2040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2044:	4630      	mov	r0, r6
    2046:	f001 f985 	bl	3354 <_isatty_r>
    204a:	b128      	cbz	r0, 2058 <__smakebuf_r+0x74>
    204c:	89a3      	ldrh	r3, [r4, #12]
    204e:	f023 0303 	bic.w	r3, r3, #3
    2052:	f043 0301 	orr.w	r3, r3, #1
    2056:	81a3      	strh	r3, [r4, #12]
    2058:	89a3      	ldrh	r3, [r4, #12]
    205a:	431d      	orrs	r5, r3
    205c:	81a5      	strh	r5, [r4, #12]
    205e:	e7cd      	b.n	1ffc <__smakebuf_r+0x18>
    2060:	00001dd1 	.word	0x00001dd1

00002064 <malloc>:
    2064:	4b02      	ldr	r3, [pc, #8]	; (2070 <malloc+0xc>)
    2066:	4601      	mov	r1, r0
    2068:	6818      	ldr	r0, [r3, #0]
    206a:	f000 b851 	b.w	2110 <_malloc_r>
    206e:	bf00      	nop
    2070:	20000028 	.word	0x20000028

00002074 <_free_r>:
    2074:	b538      	push	{r3, r4, r5, lr}
    2076:	4605      	mov	r5, r0
    2078:	2900      	cmp	r1, #0
    207a:	d045      	beq.n	2108 <_free_r+0x94>
    207c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2080:	1f0c      	subs	r4, r1, #4
    2082:	2b00      	cmp	r3, #0
    2084:	bfb8      	it	lt
    2086:	18e4      	addlt	r4, r4, r3
    2088:	f001 f9fa 	bl	3480 <__malloc_lock>
    208c:	4a1f      	ldr	r2, [pc, #124]	; (210c <_free_r+0x98>)
    208e:	6813      	ldr	r3, [r2, #0]
    2090:	4610      	mov	r0, r2
    2092:	b933      	cbnz	r3, 20a2 <_free_r+0x2e>
    2094:	6063      	str	r3, [r4, #4]
    2096:	6014      	str	r4, [r2, #0]
    2098:	4628      	mov	r0, r5
    209a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    209e:	f001 b9f0 	b.w	3482 <__malloc_unlock>
    20a2:	42a3      	cmp	r3, r4
    20a4:	d90c      	bls.n	20c0 <_free_r+0x4c>
    20a6:	6821      	ldr	r1, [r4, #0]
    20a8:	1862      	adds	r2, r4, r1
    20aa:	4293      	cmp	r3, r2
    20ac:	bf04      	itt	eq
    20ae:	681a      	ldreq	r2, [r3, #0]
    20b0:	685b      	ldreq	r3, [r3, #4]
    20b2:	6063      	str	r3, [r4, #4]
    20b4:	bf04      	itt	eq
    20b6:	1852      	addeq	r2, r2, r1
    20b8:	6022      	streq	r2, [r4, #0]
    20ba:	6004      	str	r4, [r0, #0]
    20bc:	e7ec      	b.n	2098 <_free_r+0x24>
    20be:	4613      	mov	r3, r2
    20c0:	685a      	ldr	r2, [r3, #4]
    20c2:	b10a      	cbz	r2, 20c8 <_free_r+0x54>
    20c4:	42a2      	cmp	r2, r4
    20c6:	d9fa      	bls.n	20be <_free_r+0x4a>
    20c8:	6819      	ldr	r1, [r3, #0]
    20ca:	1858      	adds	r0, r3, r1
    20cc:	42a0      	cmp	r0, r4
    20ce:	d10b      	bne.n	20e8 <_free_r+0x74>
    20d0:	6820      	ldr	r0, [r4, #0]
    20d2:	4401      	add	r1, r0
    20d4:	1858      	adds	r0, r3, r1
    20d6:	4282      	cmp	r2, r0
    20d8:	6019      	str	r1, [r3, #0]
    20da:	d1dd      	bne.n	2098 <_free_r+0x24>
    20dc:	6810      	ldr	r0, [r2, #0]
    20de:	6852      	ldr	r2, [r2, #4]
    20e0:	605a      	str	r2, [r3, #4]
    20e2:	4401      	add	r1, r0
    20e4:	6019      	str	r1, [r3, #0]
    20e6:	e7d7      	b.n	2098 <_free_r+0x24>
    20e8:	d902      	bls.n	20f0 <_free_r+0x7c>
    20ea:	230c      	movs	r3, #12
    20ec:	602b      	str	r3, [r5, #0]
    20ee:	e7d3      	b.n	2098 <_free_r+0x24>
    20f0:	6820      	ldr	r0, [r4, #0]
    20f2:	1821      	adds	r1, r4, r0
    20f4:	428a      	cmp	r2, r1
    20f6:	bf04      	itt	eq
    20f8:	6811      	ldreq	r1, [r2, #0]
    20fa:	6852      	ldreq	r2, [r2, #4]
    20fc:	6062      	str	r2, [r4, #4]
    20fe:	bf04      	itt	eq
    2100:	1809      	addeq	r1, r1, r0
    2102:	6021      	streq	r1, [r4, #0]
    2104:	605c      	str	r4, [r3, #4]
    2106:	e7c7      	b.n	2098 <_free_r+0x24>
    2108:	bd38      	pop	{r3, r4, r5, pc}
    210a:	bf00      	nop
    210c:	20000274 	.word	0x20000274

00002110 <_malloc_r>:
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	1ccd      	adds	r5, r1, #3
    2114:	f025 0503 	bic.w	r5, r5, #3
    2118:	3508      	adds	r5, #8
    211a:	2d0c      	cmp	r5, #12
    211c:	bf38      	it	cc
    211e:	250c      	movcc	r5, #12
    2120:	2d00      	cmp	r5, #0
    2122:	4606      	mov	r6, r0
    2124:	db01      	blt.n	212a <_malloc_r+0x1a>
    2126:	42a9      	cmp	r1, r5
    2128:	d903      	bls.n	2132 <_malloc_r+0x22>
    212a:	230c      	movs	r3, #12
    212c:	6033      	str	r3, [r6, #0]
    212e:	2000      	movs	r0, #0
    2130:	bd70      	pop	{r4, r5, r6, pc}
    2132:	f001 f9a5 	bl	3480 <__malloc_lock>
    2136:	4a23      	ldr	r2, [pc, #140]	; (21c4 <_malloc_r+0xb4>)
    2138:	6814      	ldr	r4, [r2, #0]
    213a:	4621      	mov	r1, r4
    213c:	b991      	cbnz	r1, 2164 <_malloc_r+0x54>
    213e:	4c22      	ldr	r4, [pc, #136]	; (21c8 <_malloc_r+0xb8>)
    2140:	6823      	ldr	r3, [r4, #0]
    2142:	b91b      	cbnz	r3, 214c <_malloc_r+0x3c>
    2144:	4630      	mov	r0, r6
    2146:	f000 fe7d 	bl	2e44 <_sbrk_r>
    214a:	6020      	str	r0, [r4, #0]
    214c:	4629      	mov	r1, r5
    214e:	4630      	mov	r0, r6
    2150:	f000 fe78 	bl	2e44 <_sbrk_r>
    2154:	1c43      	adds	r3, r0, #1
    2156:	d126      	bne.n	21a6 <_malloc_r+0x96>
    2158:	230c      	movs	r3, #12
    215a:	6033      	str	r3, [r6, #0]
    215c:	4630      	mov	r0, r6
    215e:	f001 f990 	bl	3482 <__malloc_unlock>
    2162:	e7e4      	b.n	212e <_malloc_r+0x1e>
    2164:	680b      	ldr	r3, [r1, #0]
    2166:	1b5b      	subs	r3, r3, r5
    2168:	d41a      	bmi.n	21a0 <_malloc_r+0x90>
    216a:	2b0b      	cmp	r3, #11
    216c:	d90f      	bls.n	218e <_malloc_r+0x7e>
    216e:	600b      	str	r3, [r1, #0]
    2170:	50cd      	str	r5, [r1, r3]
    2172:	18cc      	adds	r4, r1, r3
    2174:	4630      	mov	r0, r6
    2176:	f001 f984 	bl	3482 <__malloc_unlock>
    217a:	f104 000b 	add.w	r0, r4, #11
    217e:	1d23      	adds	r3, r4, #4
    2180:	f020 0007 	bic.w	r0, r0, #7
    2184:	1ac3      	subs	r3, r0, r3
    2186:	d01b      	beq.n	21c0 <_malloc_r+0xb0>
    2188:	425a      	negs	r2, r3
    218a:	50e2      	str	r2, [r4, r3]
    218c:	bd70      	pop	{r4, r5, r6, pc}
    218e:	428c      	cmp	r4, r1
    2190:	bf0d      	iteet	eq
    2192:	6863      	ldreq	r3, [r4, #4]
    2194:	684b      	ldrne	r3, [r1, #4]
    2196:	6063      	strne	r3, [r4, #4]
    2198:	6013      	streq	r3, [r2, #0]
    219a:	bf18      	it	ne
    219c:	460c      	movne	r4, r1
    219e:	e7e9      	b.n	2174 <_malloc_r+0x64>
    21a0:	460c      	mov	r4, r1
    21a2:	6849      	ldr	r1, [r1, #4]
    21a4:	e7ca      	b.n	213c <_malloc_r+0x2c>
    21a6:	1cc4      	adds	r4, r0, #3
    21a8:	f024 0403 	bic.w	r4, r4, #3
    21ac:	42a0      	cmp	r0, r4
    21ae:	d005      	beq.n	21bc <_malloc_r+0xac>
    21b0:	1a21      	subs	r1, r4, r0
    21b2:	4630      	mov	r0, r6
    21b4:	f000 fe46 	bl	2e44 <_sbrk_r>
    21b8:	3001      	adds	r0, #1
    21ba:	d0cd      	beq.n	2158 <_malloc_r+0x48>
    21bc:	6025      	str	r5, [r4, #0]
    21be:	e7d9      	b.n	2174 <_malloc_r+0x64>
    21c0:	bd70      	pop	{r4, r5, r6, pc}
    21c2:	bf00      	nop
    21c4:	20000274 	.word	0x20000274
    21c8:	20000278 	.word	0x20000278

000021cc <__sfputc_r>:
    21cc:	6893      	ldr	r3, [r2, #8]
    21ce:	3b01      	subs	r3, #1
    21d0:	2b00      	cmp	r3, #0
    21d2:	b410      	push	{r4}
    21d4:	6093      	str	r3, [r2, #8]
    21d6:	da08      	bge.n	21ea <__sfputc_r+0x1e>
    21d8:	6994      	ldr	r4, [r2, #24]
    21da:	42a3      	cmp	r3, r4
    21dc:	db02      	blt.n	21e4 <__sfputc_r+0x18>
    21de:	b2cb      	uxtb	r3, r1
    21e0:	2b0a      	cmp	r3, #10
    21e2:	d102      	bne.n	21ea <__sfputc_r+0x1e>
    21e4:	bc10      	pop	{r4}
    21e6:	f7ff bc6f 	b.w	1ac8 <__swbuf_r>
    21ea:	6813      	ldr	r3, [r2, #0]
    21ec:	1c58      	adds	r0, r3, #1
    21ee:	6010      	str	r0, [r2, #0]
    21f0:	7019      	strb	r1, [r3, #0]
    21f2:	b2c8      	uxtb	r0, r1
    21f4:	bc10      	pop	{r4}
    21f6:	4770      	bx	lr

000021f8 <__sfputs_r>:
    21f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21fa:	4606      	mov	r6, r0
    21fc:	460f      	mov	r7, r1
    21fe:	4614      	mov	r4, r2
    2200:	18d5      	adds	r5, r2, r3
    2202:	42ac      	cmp	r4, r5
    2204:	d101      	bne.n	220a <__sfputs_r+0x12>
    2206:	2000      	movs	r0, #0
    2208:	e007      	b.n	221a <__sfputs_r+0x22>
    220a:	463a      	mov	r2, r7
    220c:	f814 1b01 	ldrb.w	r1, [r4], #1
    2210:	4630      	mov	r0, r6
    2212:	f7ff ffdb 	bl	21cc <__sfputc_r>
    2216:	1c43      	adds	r3, r0, #1
    2218:	d1f3      	bne.n	2202 <__sfputs_r+0xa>
    221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000221c <_vfiprintf_r>:
    221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2220:	b09d      	sub	sp, #116	; 0x74
    2222:	460c      	mov	r4, r1
    2224:	4617      	mov	r7, r2
    2226:	9303      	str	r3, [sp, #12]
    2228:	4606      	mov	r6, r0
    222a:	b118      	cbz	r0, 2234 <_vfiprintf_r+0x18>
    222c:	6983      	ldr	r3, [r0, #24]
    222e:	b90b      	cbnz	r3, 2234 <_vfiprintf_r+0x18>
    2230:	f7ff fe0e 	bl	1e50 <__sinit>
    2234:	4b7c      	ldr	r3, [pc, #496]	; (2428 <_vfiprintf_r+0x20c>)
    2236:	429c      	cmp	r4, r3
    2238:	d157      	bne.n	22ea <_vfiprintf_r+0xce>
    223a:	6874      	ldr	r4, [r6, #4]
    223c:	89a3      	ldrh	r3, [r4, #12]
    223e:	0718      	lsls	r0, r3, #28
    2240:	d55d      	bpl.n	22fe <_vfiprintf_r+0xe2>
    2242:	6923      	ldr	r3, [r4, #16]
    2244:	2b00      	cmp	r3, #0
    2246:	d05a      	beq.n	22fe <_vfiprintf_r+0xe2>
    2248:	2300      	movs	r3, #0
    224a:	9309      	str	r3, [sp, #36]	; 0x24
    224c:	2320      	movs	r3, #32
    224e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2252:	2330      	movs	r3, #48	; 0x30
    2254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2258:	f04f 0b01 	mov.w	fp, #1
    225c:	46b8      	mov	r8, r7
    225e:	4645      	mov	r5, r8
    2260:	f815 3b01 	ldrb.w	r3, [r5], #1
    2264:	2b00      	cmp	r3, #0
    2266:	d155      	bne.n	2314 <_vfiprintf_r+0xf8>
    2268:	ebb8 0a07 	subs.w	sl, r8, r7
    226c:	d00b      	beq.n	2286 <_vfiprintf_r+0x6a>
    226e:	4653      	mov	r3, sl
    2270:	463a      	mov	r2, r7
    2272:	4621      	mov	r1, r4
    2274:	4630      	mov	r0, r6
    2276:	f7ff ffbf 	bl	21f8 <__sfputs_r>
    227a:	3001      	adds	r0, #1
    227c:	f000 80c4 	beq.w	2408 <_vfiprintf_r+0x1ec>
    2280:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2282:	4453      	add	r3, sl
    2284:	9309      	str	r3, [sp, #36]	; 0x24
    2286:	f898 3000 	ldrb.w	r3, [r8]
    228a:	2b00      	cmp	r3, #0
    228c:	f000 80bc 	beq.w	2408 <_vfiprintf_r+0x1ec>
    2290:	2300      	movs	r3, #0
    2292:	f04f 32ff 	mov.w	r2, #4294967295
    2296:	9304      	str	r3, [sp, #16]
    2298:	9307      	str	r3, [sp, #28]
    229a:	9205      	str	r2, [sp, #20]
    229c:	9306      	str	r3, [sp, #24]
    229e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    22a2:	931a      	str	r3, [sp, #104]	; 0x68
    22a4:	2205      	movs	r2, #5
    22a6:	7829      	ldrb	r1, [r5, #0]
    22a8:	4860      	ldr	r0, [pc, #384]	; (242c <_vfiprintf_r+0x210>)
    22aa:	f001 f899 	bl	33e0 <memchr>
    22ae:	f105 0801 	add.w	r8, r5, #1
    22b2:	9b04      	ldr	r3, [sp, #16]
    22b4:	2800      	cmp	r0, #0
    22b6:	d131      	bne.n	231c <_vfiprintf_r+0x100>
    22b8:	06d9      	lsls	r1, r3, #27
    22ba:	bf44      	itt	mi
    22bc:	2220      	movmi	r2, #32
    22be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    22c2:	071a      	lsls	r2, r3, #28
    22c4:	bf44      	itt	mi
    22c6:	222b      	movmi	r2, #43	; 0x2b
    22c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    22cc:	782a      	ldrb	r2, [r5, #0]
    22ce:	2a2a      	cmp	r2, #42	; 0x2a
    22d0:	d02c      	beq.n	232c <_vfiprintf_r+0x110>
    22d2:	9a07      	ldr	r2, [sp, #28]
    22d4:	2100      	movs	r1, #0
    22d6:	200a      	movs	r0, #10
    22d8:	46a8      	mov	r8, r5
    22da:	3501      	adds	r5, #1
    22dc:	f898 3000 	ldrb.w	r3, [r8]
    22e0:	3b30      	subs	r3, #48	; 0x30
    22e2:	2b09      	cmp	r3, #9
    22e4:	d96d      	bls.n	23c2 <_vfiprintf_r+0x1a6>
    22e6:	b371      	cbz	r1, 2346 <_vfiprintf_r+0x12a>
    22e8:	e026      	b.n	2338 <_vfiprintf_r+0x11c>
    22ea:	4b51      	ldr	r3, [pc, #324]	; (2430 <_vfiprintf_r+0x214>)
    22ec:	429c      	cmp	r4, r3
    22ee:	d101      	bne.n	22f4 <_vfiprintf_r+0xd8>
    22f0:	68b4      	ldr	r4, [r6, #8]
    22f2:	e7a3      	b.n	223c <_vfiprintf_r+0x20>
    22f4:	4b4f      	ldr	r3, [pc, #316]	; (2434 <_vfiprintf_r+0x218>)
    22f6:	429c      	cmp	r4, r3
    22f8:	bf08      	it	eq
    22fa:	68f4      	ldreq	r4, [r6, #12]
    22fc:	e79e      	b.n	223c <_vfiprintf_r+0x20>
    22fe:	4621      	mov	r1, r4
    2300:	4630      	mov	r0, r6
    2302:	f7ff fc33 	bl	1b6c <__swsetup_r>
    2306:	2800      	cmp	r0, #0
    2308:	d09e      	beq.n	2248 <_vfiprintf_r+0x2c>
    230a:	f04f 30ff 	mov.w	r0, #4294967295
    230e:	b01d      	add	sp, #116	; 0x74
    2310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2314:	2b25      	cmp	r3, #37	; 0x25
    2316:	d0a7      	beq.n	2268 <_vfiprintf_r+0x4c>
    2318:	46a8      	mov	r8, r5
    231a:	e7a0      	b.n	225e <_vfiprintf_r+0x42>
    231c:	4a43      	ldr	r2, [pc, #268]	; (242c <_vfiprintf_r+0x210>)
    231e:	1a80      	subs	r0, r0, r2
    2320:	fa0b f000 	lsl.w	r0, fp, r0
    2324:	4318      	orrs	r0, r3
    2326:	9004      	str	r0, [sp, #16]
    2328:	4645      	mov	r5, r8
    232a:	e7bb      	b.n	22a4 <_vfiprintf_r+0x88>
    232c:	9a03      	ldr	r2, [sp, #12]
    232e:	1d11      	adds	r1, r2, #4
    2330:	6812      	ldr	r2, [r2, #0]
    2332:	9103      	str	r1, [sp, #12]
    2334:	2a00      	cmp	r2, #0
    2336:	db01      	blt.n	233c <_vfiprintf_r+0x120>
    2338:	9207      	str	r2, [sp, #28]
    233a:	e004      	b.n	2346 <_vfiprintf_r+0x12a>
    233c:	4252      	negs	r2, r2
    233e:	f043 0302 	orr.w	r3, r3, #2
    2342:	9207      	str	r2, [sp, #28]
    2344:	9304      	str	r3, [sp, #16]
    2346:	f898 3000 	ldrb.w	r3, [r8]
    234a:	2b2e      	cmp	r3, #46	; 0x2e
    234c:	d110      	bne.n	2370 <_vfiprintf_r+0x154>
    234e:	f898 3001 	ldrb.w	r3, [r8, #1]
    2352:	2b2a      	cmp	r3, #42	; 0x2a
    2354:	f108 0101 	add.w	r1, r8, #1
    2358:	d137      	bne.n	23ca <_vfiprintf_r+0x1ae>
    235a:	9b03      	ldr	r3, [sp, #12]
    235c:	1d1a      	adds	r2, r3, #4
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	9203      	str	r2, [sp, #12]
    2362:	2b00      	cmp	r3, #0
    2364:	bfb8      	it	lt
    2366:	f04f 33ff 	movlt.w	r3, #4294967295
    236a:	f108 0802 	add.w	r8, r8, #2
    236e:	9305      	str	r3, [sp, #20]
    2370:	4d31      	ldr	r5, [pc, #196]	; (2438 <_vfiprintf_r+0x21c>)
    2372:	f898 1000 	ldrb.w	r1, [r8]
    2376:	2203      	movs	r2, #3
    2378:	4628      	mov	r0, r5
    237a:	f001 f831 	bl	33e0 <memchr>
    237e:	b140      	cbz	r0, 2392 <_vfiprintf_r+0x176>
    2380:	2340      	movs	r3, #64	; 0x40
    2382:	1b40      	subs	r0, r0, r5
    2384:	fa03 f000 	lsl.w	r0, r3, r0
    2388:	9b04      	ldr	r3, [sp, #16]
    238a:	4303      	orrs	r3, r0
    238c:	9304      	str	r3, [sp, #16]
    238e:	f108 0801 	add.w	r8, r8, #1
    2392:	f898 1000 	ldrb.w	r1, [r8]
    2396:	4829      	ldr	r0, [pc, #164]	; (243c <_vfiprintf_r+0x220>)
    2398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    239c:	2206      	movs	r2, #6
    239e:	f108 0701 	add.w	r7, r8, #1
    23a2:	f001 f81d 	bl	33e0 <memchr>
    23a6:	2800      	cmp	r0, #0
    23a8:	d034      	beq.n	2414 <_vfiprintf_r+0x1f8>
    23aa:	4b25      	ldr	r3, [pc, #148]	; (2440 <_vfiprintf_r+0x224>)
    23ac:	bb03      	cbnz	r3, 23f0 <_vfiprintf_r+0x1d4>
    23ae:	9b03      	ldr	r3, [sp, #12]
    23b0:	3307      	adds	r3, #7
    23b2:	f023 0307 	bic.w	r3, r3, #7
    23b6:	3308      	adds	r3, #8
    23b8:	9303      	str	r3, [sp, #12]
    23ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23bc:	444b      	add	r3, r9
    23be:	9309      	str	r3, [sp, #36]	; 0x24
    23c0:	e74c      	b.n	225c <_vfiprintf_r+0x40>
    23c2:	fb00 3202 	mla	r2, r0, r2, r3
    23c6:	2101      	movs	r1, #1
    23c8:	e786      	b.n	22d8 <_vfiprintf_r+0xbc>
    23ca:	2300      	movs	r3, #0
    23cc:	9305      	str	r3, [sp, #20]
    23ce:	4618      	mov	r0, r3
    23d0:	250a      	movs	r5, #10
    23d2:	4688      	mov	r8, r1
    23d4:	3101      	adds	r1, #1
    23d6:	f898 2000 	ldrb.w	r2, [r8]
    23da:	3a30      	subs	r2, #48	; 0x30
    23dc:	2a09      	cmp	r2, #9
    23de:	d903      	bls.n	23e8 <_vfiprintf_r+0x1cc>
    23e0:	2b00      	cmp	r3, #0
    23e2:	d0c5      	beq.n	2370 <_vfiprintf_r+0x154>
    23e4:	9005      	str	r0, [sp, #20]
    23e6:	e7c3      	b.n	2370 <_vfiprintf_r+0x154>
    23e8:	fb05 2000 	mla	r0, r5, r0, r2
    23ec:	2301      	movs	r3, #1
    23ee:	e7f0      	b.n	23d2 <_vfiprintf_r+0x1b6>
    23f0:	ab03      	add	r3, sp, #12
    23f2:	9300      	str	r3, [sp, #0]
    23f4:	4622      	mov	r2, r4
    23f6:	4b13      	ldr	r3, [pc, #76]	; (2444 <_vfiprintf_r+0x228>)
    23f8:	a904      	add	r1, sp, #16
    23fa:	4630      	mov	r0, r6
    23fc:	f3af 8000 	nop.w
    2400:	f1b0 3fff 	cmp.w	r0, #4294967295
    2404:	4681      	mov	r9, r0
    2406:	d1d8      	bne.n	23ba <_vfiprintf_r+0x19e>
    2408:	89a3      	ldrh	r3, [r4, #12]
    240a:	065b      	lsls	r3, r3, #25
    240c:	f53f af7d 	bmi.w	230a <_vfiprintf_r+0xee>
    2410:	9809      	ldr	r0, [sp, #36]	; 0x24
    2412:	e77c      	b.n	230e <_vfiprintf_r+0xf2>
    2414:	ab03      	add	r3, sp, #12
    2416:	9300      	str	r3, [sp, #0]
    2418:	4622      	mov	r2, r4
    241a:	4b0a      	ldr	r3, [pc, #40]	; (2444 <_vfiprintf_r+0x228>)
    241c:	a904      	add	r1, sp, #16
    241e:	4630      	mov	r0, r6
    2420:	f000 f888 	bl	2534 <_printf_i>
    2424:	e7ec      	b.n	2400 <_vfiprintf_r+0x1e4>
    2426:	bf00      	nop
    2428:	00003b8c 	.word	0x00003b8c
    242c:	00003bcc 	.word	0x00003bcc
    2430:	00003bac 	.word	0x00003bac
    2434:	00003b6c 	.word	0x00003b6c
    2438:	00003bd2 	.word	0x00003bd2
    243c:	00003bd6 	.word	0x00003bd6
    2440:	00000000 	.word	0x00000000
    2444:	000021f9 	.word	0x000021f9

00002448 <_printf_common>:
    2448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    244c:	4691      	mov	r9, r2
    244e:	461f      	mov	r7, r3
    2450:	688a      	ldr	r2, [r1, #8]
    2452:	690b      	ldr	r3, [r1, #16]
    2454:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2458:	4293      	cmp	r3, r2
    245a:	bfb8      	it	lt
    245c:	4613      	movlt	r3, r2
    245e:	f8c9 3000 	str.w	r3, [r9]
    2462:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2466:	4606      	mov	r6, r0
    2468:	460c      	mov	r4, r1
    246a:	b112      	cbz	r2, 2472 <_printf_common+0x2a>
    246c:	3301      	adds	r3, #1
    246e:	f8c9 3000 	str.w	r3, [r9]
    2472:	6823      	ldr	r3, [r4, #0]
    2474:	0699      	lsls	r1, r3, #26
    2476:	bf42      	ittt	mi
    2478:	f8d9 3000 	ldrmi.w	r3, [r9]
    247c:	3302      	addmi	r3, #2
    247e:	f8c9 3000 	strmi.w	r3, [r9]
    2482:	6825      	ldr	r5, [r4, #0]
    2484:	f015 0506 	ands.w	r5, r5, #6
    2488:	d107      	bne.n	249a <_printf_common+0x52>
    248a:	f104 0a19 	add.w	sl, r4, #25
    248e:	68e3      	ldr	r3, [r4, #12]
    2490:	f8d9 2000 	ldr.w	r2, [r9]
    2494:	1a9b      	subs	r3, r3, r2
    2496:	429d      	cmp	r5, r3
    2498:	db29      	blt.n	24ee <_printf_common+0xa6>
    249a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    249e:	6822      	ldr	r2, [r4, #0]
    24a0:	3300      	adds	r3, #0
    24a2:	bf18      	it	ne
    24a4:	2301      	movne	r3, #1
    24a6:	0692      	lsls	r2, r2, #26
    24a8:	d42e      	bmi.n	2508 <_printf_common+0xc0>
    24aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
    24ae:	4639      	mov	r1, r7
    24b0:	4630      	mov	r0, r6
    24b2:	47c0      	blx	r8
    24b4:	3001      	adds	r0, #1
    24b6:	d021      	beq.n	24fc <_printf_common+0xb4>
    24b8:	6823      	ldr	r3, [r4, #0]
    24ba:	68e5      	ldr	r5, [r4, #12]
    24bc:	f8d9 2000 	ldr.w	r2, [r9]
    24c0:	f003 0306 	and.w	r3, r3, #6
    24c4:	2b04      	cmp	r3, #4
    24c6:	bf08      	it	eq
    24c8:	1aad      	subeq	r5, r5, r2
    24ca:	68a3      	ldr	r3, [r4, #8]
    24cc:	6922      	ldr	r2, [r4, #16]
    24ce:	bf0c      	ite	eq
    24d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    24d4:	2500      	movne	r5, #0
    24d6:	4293      	cmp	r3, r2
    24d8:	bfc4      	itt	gt
    24da:	1a9b      	subgt	r3, r3, r2
    24dc:	18ed      	addgt	r5, r5, r3
    24de:	f04f 0900 	mov.w	r9, #0
    24e2:	341a      	adds	r4, #26
    24e4:	454d      	cmp	r5, r9
    24e6:	d11b      	bne.n	2520 <_printf_common+0xd8>
    24e8:	2000      	movs	r0, #0
    24ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    24ee:	2301      	movs	r3, #1
    24f0:	4652      	mov	r2, sl
    24f2:	4639      	mov	r1, r7
    24f4:	4630      	mov	r0, r6
    24f6:	47c0      	blx	r8
    24f8:	3001      	adds	r0, #1
    24fa:	d103      	bne.n	2504 <_printf_common+0xbc>
    24fc:	f04f 30ff 	mov.w	r0, #4294967295
    2500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2504:	3501      	adds	r5, #1
    2506:	e7c2      	b.n	248e <_printf_common+0x46>
    2508:	18e1      	adds	r1, r4, r3
    250a:	1c5a      	adds	r2, r3, #1
    250c:	2030      	movs	r0, #48	; 0x30
    250e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2512:	4422      	add	r2, r4
    2514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    251c:	3302      	adds	r3, #2
    251e:	e7c4      	b.n	24aa <_printf_common+0x62>
    2520:	2301      	movs	r3, #1
    2522:	4622      	mov	r2, r4
    2524:	4639      	mov	r1, r7
    2526:	4630      	mov	r0, r6
    2528:	47c0      	blx	r8
    252a:	3001      	adds	r0, #1
    252c:	d0e6      	beq.n	24fc <_printf_common+0xb4>
    252e:	f109 0901 	add.w	r9, r9, #1
    2532:	e7d7      	b.n	24e4 <_printf_common+0x9c>

00002534 <_printf_i>:
    2534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2538:	4617      	mov	r7, r2
    253a:	7e0a      	ldrb	r2, [r1, #24]
    253c:	b085      	sub	sp, #20
    253e:	2a6e      	cmp	r2, #110	; 0x6e
    2540:	4698      	mov	r8, r3
    2542:	4606      	mov	r6, r0
    2544:	460c      	mov	r4, r1
    2546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2548:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    254c:	f000 80bc 	beq.w	26c8 <_printf_i+0x194>
    2550:	d81a      	bhi.n	2588 <_printf_i+0x54>
    2552:	2a63      	cmp	r2, #99	; 0x63
    2554:	d02e      	beq.n	25b4 <_printf_i+0x80>
    2556:	d80a      	bhi.n	256e <_printf_i+0x3a>
    2558:	2a00      	cmp	r2, #0
    255a:	f000 80c8 	beq.w	26ee <_printf_i+0x1ba>
    255e:	2a58      	cmp	r2, #88	; 0x58
    2560:	f000 808a 	beq.w	2678 <_printf_i+0x144>
    2564:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2568:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    256c:	e02a      	b.n	25c4 <_printf_i+0x90>
    256e:	2a64      	cmp	r2, #100	; 0x64
    2570:	d001      	beq.n	2576 <_printf_i+0x42>
    2572:	2a69      	cmp	r2, #105	; 0x69
    2574:	d1f6      	bne.n	2564 <_printf_i+0x30>
    2576:	6821      	ldr	r1, [r4, #0]
    2578:	681a      	ldr	r2, [r3, #0]
    257a:	f011 0f80 	tst.w	r1, #128	; 0x80
    257e:	d023      	beq.n	25c8 <_printf_i+0x94>
    2580:	1d11      	adds	r1, r2, #4
    2582:	6019      	str	r1, [r3, #0]
    2584:	6813      	ldr	r3, [r2, #0]
    2586:	e027      	b.n	25d8 <_printf_i+0xa4>
    2588:	2a73      	cmp	r2, #115	; 0x73
    258a:	f000 80b4 	beq.w	26f6 <_printf_i+0x1c2>
    258e:	d808      	bhi.n	25a2 <_printf_i+0x6e>
    2590:	2a6f      	cmp	r2, #111	; 0x6f
    2592:	d02a      	beq.n	25ea <_printf_i+0xb6>
    2594:	2a70      	cmp	r2, #112	; 0x70
    2596:	d1e5      	bne.n	2564 <_printf_i+0x30>
    2598:	680a      	ldr	r2, [r1, #0]
    259a:	f042 0220 	orr.w	r2, r2, #32
    259e:	600a      	str	r2, [r1, #0]
    25a0:	e003      	b.n	25aa <_printf_i+0x76>
    25a2:	2a75      	cmp	r2, #117	; 0x75
    25a4:	d021      	beq.n	25ea <_printf_i+0xb6>
    25a6:	2a78      	cmp	r2, #120	; 0x78
    25a8:	d1dc      	bne.n	2564 <_printf_i+0x30>
    25aa:	2278      	movs	r2, #120	; 0x78
    25ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    25b0:	496e      	ldr	r1, [pc, #440]	; (276c <_printf_i+0x238>)
    25b2:	e064      	b.n	267e <_printf_i+0x14a>
    25b4:	681a      	ldr	r2, [r3, #0]
    25b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    25ba:	1d11      	adds	r1, r2, #4
    25bc:	6019      	str	r1, [r3, #0]
    25be:	6813      	ldr	r3, [r2, #0]
    25c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    25c4:	2301      	movs	r3, #1
    25c6:	e0a3      	b.n	2710 <_printf_i+0x1dc>
    25c8:	f011 0f40 	tst.w	r1, #64	; 0x40
    25cc:	f102 0104 	add.w	r1, r2, #4
    25d0:	6019      	str	r1, [r3, #0]
    25d2:	d0d7      	beq.n	2584 <_printf_i+0x50>
    25d4:	f9b2 3000 	ldrsh.w	r3, [r2]
    25d8:	2b00      	cmp	r3, #0
    25da:	da03      	bge.n	25e4 <_printf_i+0xb0>
    25dc:	222d      	movs	r2, #45	; 0x2d
    25de:	425b      	negs	r3, r3
    25e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    25e4:	4962      	ldr	r1, [pc, #392]	; (2770 <_printf_i+0x23c>)
    25e6:	220a      	movs	r2, #10
    25e8:	e017      	b.n	261a <_printf_i+0xe6>
    25ea:	6820      	ldr	r0, [r4, #0]
    25ec:	6819      	ldr	r1, [r3, #0]
    25ee:	f010 0f80 	tst.w	r0, #128	; 0x80
    25f2:	d003      	beq.n	25fc <_printf_i+0xc8>
    25f4:	1d08      	adds	r0, r1, #4
    25f6:	6018      	str	r0, [r3, #0]
    25f8:	680b      	ldr	r3, [r1, #0]
    25fa:	e006      	b.n	260a <_printf_i+0xd6>
    25fc:	f010 0f40 	tst.w	r0, #64	; 0x40
    2600:	f101 0004 	add.w	r0, r1, #4
    2604:	6018      	str	r0, [r3, #0]
    2606:	d0f7      	beq.n	25f8 <_printf_i+0xc4>
    2608:	880b      	ldrh	r3, [r1, #0]
    260a:	4959      	ldr	r1, [pc, #356]	; (2770 <_printf_i+0x23c>)
    260c:	2a6f      	cmp	r2, #111	; 0x6f
    260e:	bf14      	ite	ne
    2610:	220a      	movne	r2, #10
    2612:	2208      	moveq	r2, #8
    2614:	2000      	movs	r0, #0
    2616:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    261a:	6865      	ldr	r5, [r4, #4]
    261c:	60a5      	str	r5, [r4, #8]
    261e:	2d00      	cmp	r5, #0
    2620:	f2c0 809c 	blt.w	275c <_printf_i+0x228>
    2624:	6820      	ldr	r0, [r4, #0]
    2626:	f020 0004 	bic.w	r0, r0, #4
    262a:	6020      	str	r0, [r4, #0]
    262c:	2b00      	cmp	r3, #0
    262e:	d13f      	bne.n	26b0 <_printf_i+0x17c>
    2630:	2d00      	cmp	r5, #0
    2632:	f040 8095 	bne.w	2760 <_printf_i+0x22c>
    2636:	4675      	mov	r5, lr
    2638:	2a08      	cmp	r2, #8
    263a:	d10b      	bne.n	2654 <_printf_i+0x120>
    263c:	6823      	ldr	r3, [r4, #0]
    263e:	07da      	lsls	r2, r3, #31
    2640:	d508      	bpl.n	2654 <_printf_i+0x120>
    2642:	6923      	ldr	r3, [r4, #16]
    2644:	6862      	ldr	r2, [r4, #4]
    2646:	429a      	cmp	r2, r3
    2648:	bfde      	ittt	le
    264a:	2330      	movle	r3, #48	; 0x30
    264c:	f805 3c01 	strble.w	r3, [r5, #-1]
    2650:	f105 35ff 	addle.w	r5, r5, #4294967295
    2654:	ebae 0305 	sub.w	r3, lr, r5
    2658:	6123      	str	r3, [r4, #16]
    265a:	f8cd 8000 	str.w	r8, [sp]
    265e:	463b      	mov	r3, r7
    2660:	aa03      	add	r2, sp, #12
    2662:	4621      	mov	r1, r4
    2664:	4630      	mov	r0, r6
    2666:	f7ff feef 	bl	2448 <_printf_common>
    266a:	3001      	adds	r0, #1
    266c:	d155      	bne.n	271a <_printf_i+0x1e6>
    266e:	f04f 30ff 	mov.w	r0, #4294967295
    2672:	b005      	add	sp, #20
    2674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2678:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    267c:	493c      	ldr	r1, [pc, #240]	; (2770 <_printf_i+0x23c>)
    267e:	6822      	ldr	r2, [r4, #0]
    2680:	6818      	ldr	r0, [r3, #0]
    2682:	f012 0f80 	tst.w	r2, #128	; 0x80
    2686:	f100 0504 	add.w	r5, r0, #4
    268a:	601d      	str	r5, [r3, #0]
    268c:	d001      	beq.n	2692 <_printf_i+0x15e>
    268e:	6803      	ldr	r3, [r0, #0]
    2690:	e002      	b.n	2698 <_printf_i+0x164>
    2692:	0655      	lsls	r5, r2, #25
    2694:	d5fb      	bpl.n	268e <_printf_i+0x15a>
    2696:	8803      	ldrh	r3, [r0, #0]
    2698:	07d0      	lsls	r0, r2, #31
    269a:	bf44      	itt	mi
    269c:	f042 0220 	orrmi.w	r2, r2, #32
    26a0:	6022      	strmi	r2, [r4, #0]
    26a2:	b91b      	cbnz	r3, 26ac <_printf_i+0x178>
    26a4:	6822      	ldr	r2, [r4, #0]
    26a6:	f022 0220 	bic.w	r2, r2, #32
    26aa:	6022      	str	r2, [r4, #0]
    26ac:	2210      	movs	r2, #16
    26ae:	e7b1      	b.n	2614 <_printf_i+0xe0>
    26b0:	4675      	mov	r5, lr
    26b2:	fbb3 f0f2 	udiv	r0, r3, r2
    26b6:	fb02 3310 	mls	r3, r2, r0, r3
    26ba:	5ccb      	ldrb	r3, [r1, r3]
    26bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    26c0:	4603      	mov	r3, r0
    26c2:	2800      	cmp	r0, #0
    26c4:	d1f5      	bne.n	26b2 <_printf_i+0x17e>
    26c6:	e7b7      	b.n	2638 <_printf_i+0x104>
    26c8:	6808      	ldr	r0, [r1, #0]
    26ca:	681a      	ldr	r2, [r3, #0]
    26cc:	6949      	ldr	r1, [r1, #20]
    26ce:	f010 0f80 	tst.w	r0, #128	; 0x80
    26d2:	d004      	beq.n	26de <_printf_i+0x1aa>
    26d4:	1d10      	adds	r0, r2, #4
    26d6:	6018      	str	r0, [r3, #0]
    26d8:	6813      	ldr	r3, [r2, #0]
    26da:	6019      	str	r1, [r3, #0]
    26dc:	e007      	b.n	26ee <_printf_i+0x1ba>
    26de:	f010 0f40 	tst.w	r0, #64	; 0x40
    26e2:	f102 0004 	add.w	r0, r2, #4
    26e6:	6018      	str	r0, [r3, #0]
    26e8:	6813      	ldr	r3, [r2, #0]
    26ea:	d0f6      	beq.n	26da <_printf_i+0x1a6>
    26ec:	8019      	strh	r1, [r3, #0]
    26ee:	2300      	movs	r3, #0
    26f0:	6123      	str	r3, [r4, #16]
    26f2:	4675      	mov	r5, lr
    26f4:	e7b1      	b.n	265a <_printf_i+0x126>
    26f6:	681a      	ldr	r2, [r3, #0]
    26f8:	1d11      	adds	r1, r2, #4
    26fa:	6019      	str	r1, [r3, #0]
    26fc:	6815      	ldr	r5, [r2, #0]
    26fe:	6862      	ldr	r2, [r4, #4]
    2700:	2100      	movs	r1, #0
    2702:	4628      	mov	r0, r5
    2704:	f000 fe6c 	bl	33e0 <memchr>
    2708:	b108      	cbz	r0, 270e <_printf_i+0x1da>
    270a:	1b40      	subs	r0, r0, r5
    270c:	6060      	str	r0, [r4, #4]
    270e:	6863      	ldr	r3, [r4, #4]
    2710:	6123      	str	r3, [r4, #16]
    2712:	2300      	movs	r3, #0
    2714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2718:	e79f      	b.n	265a <_printf_i+0x126>
    271a:	6923      	ldr	r3, [r4, #16]
    271c:	462a      	mov	r2, r5
    271e:	4639      	mov	r1, r7
    2720:	4630      	mov	r0, r6
    2722:	47c0      	blx	r8
    2724:	3001      	adds	r0, #1
    2726:	d0a2      	beq.n	266e <_printf_i+0x13a>
    2728:	6823      	ldr	r3, [r4, #0]
    272a:	079b      	lsls	r3, r3, #30
    272c:	d507      	bpl.n	273e <_printf_i+0x20a>
    272e:	2500      	movs	r5, #0
    2730:	f104 0919 	add.w	r9, r4, #25
    2734:	68e3      	ldr	r3, [r4, #12]
    2736:	9a03      	ldr	r2, [sp, #12]
    2738:	1a9b      	subs	r3, r3, r2
    273a:	429d      	cmp	r5, r3
    273c:	db05      	blt.n	274a <_printf_i+0x216>
    273e:	68e0      	ldr	r0, [r4, #12]
    2740:	9b03      	ldr	r3, [sp, #12]
    2742:	4298      	cmp	r0, r3
    2744:	bfb8      	it	lt
    2746:	4618      	movlt	r0, r3
    2748:	e793      	b.n	2672 <_printf_i+0x13e>
    274a:	2301      	movs	r3, #1
    274c:	464a      	mov	r2, r9
    274e:	4639      	mov	r1, r7
    2750:	4630      	mov	r0, r6
    2752:	47c0      	blx	r8
    2754:	3001      	adds	r0, #1
    2756:	d08a      	beq.n	266e <_printf_i+0x13a>
    2758:	3501      	adds	r5, #1
    275a:	e7eb      	b.n	2734 <_printf_i+0x200>
    275c:	2b00      	cmp	r3, #0
    275e:	d1a7      	bne.n	26b0 <_printf_i+0x17c>
    2760:	780b      	ldrb	r3, [r1, #0]
    2762:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2766:	f104 0542 	add.w	r5, r4, #66	; 0x42
    276a:	e765      	b.n	2638 <_printf_i+0x104>
    276c:	00003bee 	.word	0x00003bee
    2770:	00003bdd 	.word	0x00003bdd

00002774 <__svfiscanf_r>:
    2774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2778:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    277c:	f10d 080c 	add.w	r8, sp, #12
    2780:	9301      	str	r3, [sp, #4]
    2782:	2300      	movs	r3, #0
    2784:	9346      	str	r3, [sp, #280]	; 0x118
    2786:	9347      	str	r3, [sp, #284]	; 0x11c
    2788:	4ba0      	ldr	r3, [pc, #640]	; (2a0c <__svfiscanf_r+0x298>)
    278a:	93a2      	str	r3, [sp, #648]	; 0x288
    278c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2a14 <__svfiscanf_r+0x2a0>
    2790:	4b9f      	ldr	r3, [pc, #636]	; (2a10 <__svfiscanf_r+0x29c>)
    2792:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    2796:	4606      	mov	r6, r0
    2798:	460c      	mov	r4, r1
    279a:	93a3      	str	r3, [sp, #652]	; 0x28c
    279c:	4692      	mov	sl, r2
    279e:	270a      	movs	r7, #10
    27a0:	f89a 3000 	ldrb.w	r3, [sl]
    27a4:	2b00      	cmp	r3, #0
    27a6:	f000 812f 	beq.w	2a08 <__svfiscanf_r+0x294>
    27aa:	f000 fde7 	bl	337c <__locale_ctype_ptr>
    27ae:	f89a b000 	ldrb.w	fp, [sl]
    27b2:	4458      	add	r0, fp
    27b4:	7843      	ldrb	r3, [r0, #1]
    27b6:	f013 0308 	ands.w	r3, r3, #8
    27ba:	d143      	bne.n	2844 <__svfiscanf_r+0xd0>
    27bc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    27c0:	f10a 0501 	add.w	r5, sl, #1
    27c4:	f040 8099 	bne.w	28fa <__svfiscanf_r+0x186>
    27c8:	9345      	str	r3, [sp, #276]	; 0x114
    27ca:	9343      	str	r3, [sp, #268]	; 0x10c
    27cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    27d0:	2b2a      	cmp	r3, #42	; 0x2a
    27d2:	d103      	bne.n	27dc <__svfiscanf_r+0x68>
    27d4:	2310      	movs	r3, #16
    27d6:	9343      	str	r3, [sp, #268]	; 0x10c
    27d8:	f10a 0502 	add.w	r5, sl, #2
    27dc:	7829      	ldrb	r1, [r5, #0]
    27de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    27e2:	2a09      	cmp	r2, #9
    27e4:	46aa      	mov	sl, r5
    27e6:	f105 0501 	add.w	r5, r5, #1
    27ea:	d941      	bls.n	2870 <__svfiscanf_r+0xfc>
    27ec:	2203      	movs	r2, #3
    27ee:	4889      	ldr	r0, [pc, #548]	; (2a14 <__svfiscanf_r+0x2a0>)
    27f0:	f000 fdf6 	bl	33e0 <memchr>
    27f4:	b138      	cbz	r0, 2806 <__svfiscanf_r+0x92>
    27f6:	eba0 0309 	sub.w	r3, r0, r9
    27fa:	2001      	movs	r0, #1
    27fc:	4098      	lsls	r0, r3
    27fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    2800:	4318      	orrs	r0, r3
    2802:	9043      	str	r0, [sp, #268]	; 0x10c
    2804:	46aa      	mov	sl, r5
    2806:	f89a 3000 	ldrb.w	r3, [sl]
    280a:	2b67      	cmp	r3, #103	; 0x67
    280c:	f10a 0501 	add.w	r5, sl, #1
    2810:	d84a      	bhi.n	28a8 <__svfiscanf_r+0x134>
    2812:	2b65      	cmp	r3, #101	; 0x65
    2814:	f080 80b7 	bcs.w	2986 <__svfiscanf_r+0x212>
    2818:	2b47      	cmp	r3, #71	; 0x47
    281a:	d82f      	bhi.n	287c <__svfiscanf_r+0x108>
    281c:	2b45      	cmp	r3, #69	; 0x45
    281e:	f080 80b2 	bcs.w	2986 <__svfiscanf_r+0x212>
    2822:	2b00      	cmp	r3, #0
    2824:	f000 8082 	beq.w	292c <__svfiscanf_r+0x1b8>
    2828:	2b25      	cmp	r3, #37	; 0x25
    282a:	d066      	beq.n	28fa <__svfiscanf_r+0x186>
    282c:	2303      	movs	r3, #3
    282e:	9349      	str	r3, [sp, #292]	; 0x124
    2830:	9744      	str	r7, [sp, #272]	; 0x110
    2832:	e045      	b.n	28c0 <__svfiscanf_r+0x14c>
    2834:	9947      	ldr	r1, [sp, #284]	; 0x11c
    2836:	3101      	adds	r1, #1
    2838:	9147      	str	r1, [sp, #284]	; 0x11c
    283a:	6861      	ldr	r1, [r4, #4]
    283c:	3301      	adds	r3, #1
    283e:	3901      	subs	r1, #1
    2840:	6061      	str	r1, [r4, #4]
    2842:	6023      	str	r3, [r4, #0]
    2844:	6863      	ldr	r3, [r4, #4]
    2846:	2b00      	cmp	r3, #0
    2848:	dd0b      	ble.n	2862 <__svfiscanf_r+0xee>
    284a:	f000 fd97 	bl	337c <__locale_ctype_ptr>
    284e:	6823      	ldr	r3, [r4, #0]
    2850:	7819      	ldrb	r1, [r3, #0]
    2852:	4408      	add	r0, r1
    2854:	7841      	ldrb	r1, [r0, #1]
    2856:	070d      	lsls	r5, r1, #28
    2858:	d4ec      	bmi.n	2834 <__svfiscanf_r+0xc0>
    285a:	f10a 0501 	add.w	r5, sl, #1
    285e:	46aa      	mov	sl, r5
    2860:	e79e      	b.n	27a0 <__svfiscanf_r+0x2c>
    2862:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    2864:	4621      	mov	r1, r4
    2866:	4630      	mov	r0, r6
    2868:	4798      	blx	r3
    286a:	2800      	cmp	r0, #0
    286c:	d0ed      	beq.n	284a <__svfiscanf_r+0xd6>
    286e:	e7f4      	b.n	285a <__svfiscanf_r+0xe6>
    2870:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2872:	fb07 1303 	mla	r3, r7, r3, r1
    2876:	3b30      	subs	r3, #48	; 0x30
    2878:	9345      	str	r3, [sp, #276]	; 0x114
    287a:	e7af      	b.n	27dc <__svfiscanf_r+0x68>
    287c:	2b5b      	cmp	r3, #91	; 0x5b
    287e:	d061      	beq.n	2944 <__svfiscanf_r+0x1d0>
    2880:	d80c      	bhi.n	289c <__svfiscanf_r+0x128>
    2882:	2b58      	cmp	r3, #88	; 0x58
    2884:	d1d2      	bne.n	282c <__svfiscanf_r+0xb8>
    2886:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    288c:	9243      	str	r2, [sp, #268]	; 0x10c
    288e:	2210      	movs	r2, #16
    2890:	9244      	str	r2, [sp, #272]	; 0x110
    2892:	2b6f      	cmp	r3, #111	; 0x6f
    2894:	bfb4      	ite	lt
    2896:	2303      	movlt	r3, #3
    2898:	2304      	movge	r3, #4
    289a:	e010      	b.n	28be <__svfiscanf_r+0x14a>
    289c:	2b63      	cmp	r3, #99	; 0x63
    289e:	d05c      	beq.n	295a <__svfiscanf_r+0x1e6>
    28a0:	2b64      	cmp	r3, #100	; 0x64
    28a2:	d1c3      	bne.n	282c <__svfiscanf_r+0xb8>
    28a4:	9744      	str	r7, [sp, #272]	; 0x110
    28a6:	e7f4      	b.n	2892 <__svfiscanf_r+0x11e>
    28a8:	2b70      	cmp	r3, #112	; 0x70
    28aa:	d042      	beq.n	2932 <__svfiscanf_r+0x1be>
    28ac:	d81d      	bhi.n	28ea <__svfiscanf_r+0x176>
    28ae:	2b6e      	cmp	r3, #110	; 0x6e
    28b0:	d059      	beq.n	2966 <__svfiscanf_r+0x1f2>
    28b2:	d843      	bhi.n	293c <__svfiscanf_r+0x1c8>
    28b4:	2b69      	cmp	r3, #105	; 0x69
    28b6:	d1b9      	bne.n	282c <__svfiscanf_r+0xb8>
    28b8:	2300      	movs	r3, #0
    28ba:	9344      	str	r3, [sp, #272]	; 0x110
    28bc:	2303      	movs	r3, #3
    28be:	9349      	str	r3, [sp, #292]	; 0x124
    28c0:	6863      	ldr	r3, [r4, #4]
    28c2:	2b00      	cmp	r3, #0
    28c4:	dd61      	ble.n	298a <__svfiscanf_r+0x216>
    28c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    28c8:	0659      	lsls	r1, r3, #25
    28ca:	d56f      	bpl.n	29ac <__svfiscanf_r+0x238>
    28cc:	9b49      	ldr	r3, [sp, #292]	; 0x124
    28ce:	2b02      	cmp	r3, #2
    28d0:	dc7c      	bgt.n	29cc <__svfiscanf_r+0x258>
    28d2:	ab01      	add	r3, sp, #4
    28d4:	4622      	mov	r2, r4
    28d6:	a943      	add	r1, sp, #268	; 0x10c
    28d8:	4630      	mov	r0, r6
    28da:	f000 f8c7 	bl	2a6c <_scanf_chars>
    28de:	2801      	cmp	r0, #1
    28e0:	f000 8092 	beq.w	2a08 <__svfiscanf_r+0x294>
    28e4:	2802      	cmp	r0, #2
    28e6:	d1ba      	bne.n	285e <__svfiscanf_r+0xea>
    28e8:	e01d      	b.n	2926 <__svfiscanf_r+0x1b2>
    28ea:	2b75      	cmp	r3, #117	; 0x75
    28ec:	d0da      	beq.n	28a4 <__svfiscanf_r+0x130>
    28ee:	2b78      	cmp	r3, #120	; 0x78
    28f0:	d0c9      	beq.n	2886 <__svfiscanf_r+0x112>
    28f2:	2b73      	cmp	r3, #115	; 0x73
    28f4:	d19a      	bne.n	282c <__svfiscanf_r+0xb8>
    28f6:	2302      	movs	r3, #2
    28f8:	e7e1      	b.n	28be <__svfiscanf_r+0x14a>
    28fa:	6863      	ldr	r3, [r4, #4]
    28fc:	2b00      	cmp	r3, #0
    28fe:	dd0c      	ble.n	291a <__svfiscanf_r+0x1a6>
    2900:	6823      	ldr	r3, [r4, #0]
    2902:	781a      	ldrb	r2, [r3, #0]
    2904:	4593      	cmp	fp, r2
    2906:	d17f      	bne.n	2a08 <__svfiscanf_r+0x294>
    2908:	3301      	adds	r3, #1
    290a:	6862      	ldr	r2, [r4, #4]
    290c:	6023      	str	r3, [r4, #0]
    290e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2910:	3a01      	subs	r2, #1
    2912:	3301      	adds	r3, #1
    2914:	6062      	str	r2, [r4, #4]
    2916:	9347      	str	r3, [sp, #284]	; 0x11c
    2918:	e7a1      	b.n	285e <__svfiscanf_r+0xea>
    291a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    291c:	4621      	mov	r1, r4
    291e:	4630      	mov	r0, r6
    2920:	4798      	blx	r3
    2922:	2800      	cmp	r0, #0
    2924:	d0ec      	beq.n	2900 <__svfiscanf_r+0x18c>
    2926:	9846      	ldr	r0, [sp, #280]	; 0x118
    2928:	2800      	cmp	r0, #0
    292a:	d163      	bne.n	29f4 <__svfiscanf_r+0x280>
    292c:	f04f 30ff 	mov.w	r0, #4294967295
    2930:	e066      	b.n	2a00 <__svfiscanf_r+0x28c>
    2932:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2934:	f042 0220 	orr.w	r2, r2, #32
    2938:	9243      	str	r2, [sp, #268]	; 0x10c
    293a:	e7a4      	b.n	2886 <__svfiscanf_r+0x112>
    293c:	2308      	movs	r3, #8
    293e:	9344      	str	r3, [sp, #272]	; 0x110
    2940:	2304      	movs	r3, #4
    2942:	e7bc      	b.n	28be <__svfiscanf_r+0x14a>
    2944:	4629      	mov	r1, r5
    2946:	4640      	mov	r0, r8
    2948:	f000 fa8c 	bl	2e64 <__sccl>
    294c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    294e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2952:	9343      	str	r3, [sp, #268]	; 0x10c
    2954:	4605      	mov	r5, r0
    2956:	2301      	movs	r3, #1
    2958:	e7b1      	b.n	28be <__svfiscanf_r+0x14a>
    295a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2960:	9343      	str	r3, [sp, #268]	; 0x10c
    2962:	2300      	movs	r3, #0
    2964:	e7ab      	b.n	28be <__svfiscanf_r+0x14a>
    2966:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2968:	06d0      	lsls	r0, r2, #27
    296a:	f53f af78 	bmi.w	285e <__svfiscanf_r+0xea>
    296e:	f012 0f01 	tst.w	r2, #1
    2972:	9a01      	ldr	r2, [sp, #4]
    2974:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2976:	f102 0104 	add.w	r1, r2, #4
    297a:	9101      	str	r1, [sp, #4]
    297c:	6812      	ldr	r2, [r2, #0]
    297e:	bf14      	ite	ne
    2980:	8013      	strhne	r3, [r2, #0]
    2982:	6013      	streq	r3, [r2, #0]
    2984:	e76b      	b.n	285e <__svfiscanf_r+0xea>
    2986:	2305      	movs	r3, #5
    2988:	e799      	b.n	28be <__svfiscanf_r+0x14a>
    298a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    298c:	4621      	mov	r1, r4
    298e:	4630      	mov	r0, r6
    2990:	4798      	blx	r3
    2992:	2800      	cmp	r0, #0
    2994:	d097      	beq.n	28c6 <__svfiscanf_r+0x152>
    2996:	e7c6      	b.n	2926 <__svfiscanf_r+0x1b2>
    2998:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    299a:	3201      	adds	r2, #1
    299c:	9247      	str	r2, [sp, #284]	; 0x11c
    299e:	6862      	ldr	r2, [r4, #4]
    29a0:	3a01      	subs	r2, #1
    29a2:	2a00      	cmp	r2, #0
    29a4:	6062      	str	r2, [r4, #4]
    29a6:	dd0a      	ble.n	29be <__svfiscanf_r+0x24a>
    29a8:	3301      	adds	r3, #1
    29aa:	6023      	str	r3, [r4, #0]
    29ac:	f000 fce6 	bl	337c <__locale_ctype_ptr>
    29b0:	6823      	ldr	r3, [r4, #0]
    29b2:	781a      	ldrb	r2, [r3, #0]
    29b4:	4410      	add	r0, r2
    29b6:	7842      	ldrb	r2, [r0, #1]
    29b8:	0712      	lsls	r2, r2, #28
    29ba:	d4ed      	bmi.n	2998 <__svfiscanf_r+0x224>
    29bc:	e786      	b.n	28cc <__svfiscanf_r+0x158>
    29be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    29c0:	4621      	mov	r1, r4
    29c2:	4630      	mov	r0, r6
    29c4:	4798      	blx	r3
    29c6:	2800      	cmp	r0, #0
    29c8:	d0f0      	beq.n	29ac <__svfiscanf_r+0x238>
    29ca:	e7ac      	b.n	2926 <__svfiscanf_r+0x1b2>
    29cc:	2b04      	cmp	r3, #4
    29ce:	dc06      	bgt.n	29de <__svfiscanf_r+0x26a>
    29d0:	ab01      	add	r3, sp, #4
    29d2:	4622      	mov	r2, r4
    29d4:	a943      	add	r1, sp, #268	; 0x10c
    29d6:	4630      	mov	r0, r6
    29d8:	f000 f8ac 	bl	2b34 <_scanf_i>
    29dc:	e77f      	b.n	28de <__svfiscanf_r+0x16a>
    29de:	4b0e      	ldr	r3, [pc, #56]	; (2a18 <__svfiscanf_r+0x2a4>)
    29e0:	2b00      	cmp	r3, #0
    29e2:	f43f af3c 	beq.w	285e <__svfiscanf_r+0xea>
    29e6:	ab01      	add	r3, sp, #4
    29e8:	4622      	mov	r2, r4
    29ea:	a943      	add	r1, sp, #268	; 0x10c
    29ec:	4630      	mov	r0, r6
    29ee:	f3af 8000 	nop.w
    29f2:	e774      	b.n	28de <__svfiscanf_r+0x16a>
    29f4:	89a3      	ldrh	r3, [r4, #12]
    29f6:	f013 0f40 	tst.w	r3, #64	; 0x40
    29fa:	bf18      	it	ne
    29fc:	f04f 30ff 	movne.w	r0, #4294967295
    2a00:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    2a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a08:	9846      	ldr	r0, [sp, #280]	; 0x118
    2a0a:	e7f9      	b.n	2a00 <__svfiscanf_r+0x28c>
    2a0c:	00003209 	.word	0x00003209
    2a10:	00002d31 	.word	0x00002d31
    2a14:	00003bd2 	.word	0x00003bd2
    2a18:	00000000 	.word	0x00000000

00002a1c <_vfiscanf_r>:
    2a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a20:	460c      	mov	r4, r1
    2a22:	4616      	mov	r6, r2
    2a24:	461f      	mov	r7, r3
    2a26:	4605      	mov	r5, r0
    2a28:	b118      	cbz	r0, 2a32 <_vfiscanf_r+0x16>
    2a2a:	6983      	ldr	r3, [r0, #24]
    2a2c:	b90b      	cbnz	r3, 2a32 <_vfiscanf_r+0x16>
    2a2e:	f7ff fa0f 	bl	1e50 <__sinit>
    2a32:	4b0b      	ldr	r3, [pc, #44]	; (2a60 <_vfiscanf_r+0x44>)
    2a34:	429c      	cmp	r4, r3
    2a36:	d108      	bne.n	2a4a <_vfiscanf_r+0x2e>
    2a38:	686c      	ldr	r4, [r5, #4]
    2a3a:	463b      	mov	r3, r7
    2a3c:	4632      	mov	r2, r6
    2a3e:	4621      	mov	r1, r4
    2a40:	4628      	mov	r0, r5
    2a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a46:	f7ff be95 	b.w	2774 <__svfiscanf_r>
    2a4a:	4b06      	ldr	r3, [pc, #24]	; (2a64 <_vfiscanf_r+0x48>)
    2a4c:	429c      	cmp	r4, r3
    2a4e:	d101      	bne.n	2a54 <_vfiscanf_r+0x38>
    2a50:	68ac      	ldr	r4, [r5, #8]
    2a52:	e7f2      	b.n	2a3a <_vfiscanf_r+0x1e>
    2a54:	4b04      	ldr	r3, [pc, #16]	; (2a68 <_vfiscanf_r+0x4c>)
    2a56:	429c      	cmp	r4, r3
    2a58:	bf08      	it	eq
    2a5a:	68ec      	ldreq	r4, [r5, #12]
    2a5c:	e7ed      	b.n	2a3a <_vfiscanf_r+0x1e>
    2a5e:	bf00      	nop
    2a60:	00003b8c 	.word	0x00003b8c
    2a64:	00003bac 	.word	0x00003bac
    2a68:	00003b6c 	.word	0x00003b6c

00002a6c <_scanf_chars>:
    2a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a70:	4615      	mov	r5, r2
    2a72:	688a      	ldr	r2, [r1, #8]
    2a74:	4680      	mov	r8, r0
    2a76:	460c      	mov	r4, r1
    2a78:	b932      	cbnz	r2, 2a88 <_scanf_chars+0x1c>
    2a7a:	698a      	ldr	r2, [r1, #24]
    2a7c:	2a00      	cmp	r2, #0
    2a7e:	bf0c      	ite	eq
    2a80:	2201      	moveq	r2, #1
    2a82:	f04f 32ff 	movne.w	r2, #4294967295
    2a86:	608a      	str	r2, [r1, #8]
    2a88:	6822      	ldr	r2, [r4, #0]
    2a8a:	06d1      	lsls	r1, r2, #27
    2a8c:	bf5f      	itttt	pl
    2a8e:	681a      	ldrpl	r2, [r3, #0]
    2a90:	1d11      	addpl	r1, r2, #4
    2a92:	6019      	strpl	r1, [r3, #0]
    2a94:	6817      	ldrpl	r7, [r2, #0]
    2a96:	2600      	movs	r6, #0
    2a98:	69a3      	ldr	r3, [r4, #24]
    2a9a:	b1db      	cbz	r3, 2ad4 <_scanf_chars+0x68>
    2a9c:	2b01      	cmp	r3, #1
    2a9e:	d107      	bne.n	2ab0 <_scanf_chars+0x44>
    2aa0:	682b      	ldr	r3, [r5, #0]
    2aa2:	6962      	ldr	r2, [r4, #20]
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	5cd3      	ldrb	r3, [r2, r3]
    2aa8:	b9a3      	cbnz	r3, 2ad4 <_scanf_chars+0x68>
    2aaa:	2e00      	cmp	r6, #0
    2aac:	d132      	bne.n	2b14 <_scanf_chars+0xa8>
    2aae:	e006      	b.n	2abe <_scanf_chars+0x52>
    2ab0:	2b02      	cmp	r3, #2
    2ab2:	d007      	beq.n	2ac4 <_scanf_chars+0x58>
    2ab4:	2e00      	cmp	r6, #0
    2ab6:	d12d      	bne.n	2b14 <_scanf_chars+0xa8>
    2ab8:	69a3      	ldr	r3, [r4, #24]
    2aba:	2b01      	cmp	r3, #1
    2abc:	d12a      	bne.n	2b14 <_scanf_chars+0xa8>
    2abe:	2001      	movs	r0, #1
    2ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ac4:	f000 fc5a 	bl	337c <__locale_ctype_ptr>
    2ac8:	682b      	ldr	r3, [r5, #0]
    2aca:	781b      	ldrb	r3, [r3, #0]
    2acc:	4418      	add	r0, r3
    2ace:	7843      	ldrb	r3, [r0, #1]
    2ad0:	071b      	lsls	r3, r3, #28
    2ad2:	d4ef      	bmi.n	2ab4 <_scanf_chars+0x48>
    2ad4:	6823      	ldr	r3, [r4, #0]
    2ad6:	06da      	lsls	r2, r3, #27
    2ad8:	bf5e      	ittt	pl
    2ada:	682b      	ldrpl	r3, [r5, #0]
    2adc:	781b      	ldrbpl	r3, [r3, #0]
    2ade:	703b      	strbpl	r3, [r7, #0]
    2ae0:	682a      	ldr	r2, [r5, #0]
    2ae2:	686b      	ldr	r3, [r5, #4]
    2ae4:	f102 0201 	add.w	r2, r2, #1
    2ae8:	602a      	str	r2, [r5, #0]
    2aea:	68a2      	ldr	r2, [r4, #8]
    2aec:	f103 33ff 	add.w	r3, r3, #4294967295
    2af0:	f102 32ff 	add.w	r2, r2, #4294967295
    2af4:	606b      	str	r3, [r5, #4]
    2af6:	f106 0601 	add.w	r6, r6, #1
    2afa:	bf58      	it	pl
    2afc:	3701      	addpl	r7, #1
    2afe:	60a2      	str	r2, [r4, #8]
    2b00:	b142      	cbz	r2, 2b14 <_scanf_chars+0xa8>
    2b02:	2b00      	cmp	r3, #0
    2b04:	dcc8      	bgt.n	2a98 <_scanf_chars+0x2c>
    2b06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2b0a:	4629      	mov	r1, r5
    2b0c:	4640      	mov	r0, r8
    2b0e:	4798      	blx	r3
    2b10:	2800      	cmp	r0, #0
    2b12:	d0c1      	beq.n	2a98 <_scanf_chars+0x2c>
    2b14:	6823      	ldr	r3, [r4, #0]
    2b16:	f013 0310 	ands.w	r3, r3, #16
    2b1a:	d105      	bne.n	2b28 <_scanf_chars+0xbc>
    2b1c:	68e2      	ldr	r2, [r4, #12]
    2b1e:	3201      	adds	r2, #1
    2b20:	60e2      	str	r2, [r4, #12]
    2b22:	69a2      	ldr	r2, [r4, #24]
    2b24:	b102      	cbz	r2, 2b28 <_scanf_chars+0xbc>
    2b26:	703b      	strb	r3, [r7, #0]
    2b28:	6923      	ldr	r3, [r4, #16]
    2b2a:	441e      	add	r6, r3
    2b2c:	6126      	str	r6, [r4, #16]
    2b2e:	2000      	movs	r0, #0
    2b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002b34 <_scanf_i>:
    2b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b38:	469a      	mov	sl, r3
    2b3a:	4b74      	ldr	r3, [pc, #464]	; (2d0c <_scanf_i+0x1d8>)
    2b3c:	460c      	mov	r4, r1
    2b3e:	4683      	mov	fp, r0
    2b40:	4616      	mov	r6, r2
    2b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2b46:	b087      	sub	sp, #28
    2b48:	ab03      	add	r3, sp, #12
    2b4a:	68a7      	ldr	r7, [r4, #8]
    2b4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    2b50:	4b6f      	ldr	r3, [pc, #444]	; (2d10 <_scanf_i+0x1dc>)
    2b52:	69a1      	ldr	r1, [r4, #24]
    2b54:	4a6f      	ldr	r2, [pc, #444]	; (2d14 <_scanf_i+0x1e0>)
    2b56:	2903      	cmp	r1, #3
    2b58:	bf18      	it	ne
    2b5a:	461a      	movne	r2, r3
    2b5c:	1e7b      	subs	r3, r7, #1
    2b5e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    2b62:	bf84      	itt	hi
    2b64:	f240 135d 	movwhi	r3, #349	; 0x15d
    2b68:	60a3      	strhi	r3, [r4, #8]
    2b6a:	6823      	ldr	r3, [r4, #0]
    2b6c:	9200      	str	r2, [sp, #0]
    2b6e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    2b72:	bf88      	it	hi
    2b74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    2b78:	f104 091c 	add.w	r9, r4, #28
    2b7c:	6023      	str	r3, [r4, #0]
    2b7e:	bf8c      	ite	hi
    2b80:	197f      	addhi	r7, r7, r5
    2b82:	2700      	movls	r7, #0
    2b84:	464b      	mov	r3, r9
    2b86:	f04f 0800 	mov.w	r8, #0
    2b8a:	9301      	str	r3, [sp, #4]
    2b8c:	6831      	ldr	r1, [r6, #0]
    2b8e:	ab03      	add	r3, sp, #12
    2b90:	2202      	movs	r2, #2
    2b92:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    2b96:	7809      	ldrb	r1, [r1, #0]
    2b98:	f000 fc22 	bl	33e0 <memchr>
    2b9c:	9b01      	ldr	r3, [sp, #4]
    2b9e:	b328      	cbz	r0, 2bec <_scanf_i+0xb8>
    2ba0:	f1b8 0f01 	cmp.w	r8, #1
    2ba4:	d156      	bne.n	2c54 <_scanf_i+0x120>
    2ba6:	6862      	ldr	r2, [r4, #4]
    2ba8:	b92a      	cbnz	r2, 2bb6 <_scanf_i+0x82>
    2baa:	2208      	movs	r2, #8
    2bac:	6062      	str	r2, [r4, #4]
    2bae:	6822      	ldr	r2, [r4, #0]
    2bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    2bb4:	6022      	str	r2, [r4, #0]
    2bb6:	6822      	ldr	r2, [r4, #0]
    2bb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    2bbc:	6022      	str	r2, [r4, #0]
    2bbe:	68a2      	ldr	r2, [r4, #8]
    2bc0:	1e51      	subs	r1, r2, #1
    2bc2:	60a1      	str	r1, [r4, #8]
    2bc4:	b192      	cbz	r2, 2bec <_scanf_i+0xb8>
    2bc6:	6832      	ldr	r2, [r6, #0]
    2bc8:	1c51      	adds	r1, r2, #1
    2bca:	6031      	str	r1, [r6, #0]
    2bcc:	7812      	ldrb	r2, [r2, #0]
    2bce:	701a      	strb	r2, [r3, #0]
    2bd0:	1c5d      	adds	r5, r3, #1
    2bd2:	6873      	ldr	r3, [r6, #4]
    2bd4:	3b01      	subs	r3, #1
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	6073      	str	r3, [r6, #4]
    2bda:	dc06      	bgt.n	2bea <_scanf_i+0xb6>
    2bdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2be0:	4631      	mov	r1, r6
    2be2:	4658      	mov	r0, fp
    2be4:	4798      	blx	r3
    2be6:	2800      	cmp	r0, #0
    2be8:	d176      	bne.n	2cd8 <_scanf_i+0x1a4>
    2bea:	462b      	mov	r3, r5
    2bec:	f108 0801 	add.w	r8, r8, #1
    2bf0:	f1b8 0f03 	cmp.w	r8, #3
    2bf4:	d1c9      	bne.n	2b8a <_scanf_i+0x56>
    2bf6:	6862      	ldr	r2, [r4, #4]
    2bf8:	b90a      	cbnz	r2, 2bfe <_scanf_i+0xca>
    2bfa:	220a      	movs	r2, #10
    2bfc:	6062      	str	r2, [r4, #4]
    2bfe:	6862      	ldr	r2, [r4, #4]
    2c00:	4945      	ldr	r1, [pc, #276]	; (2d18 <_scanf_i+0x1e4>)
    2c02:	6960      	ldr	r0, [r4, #20]
    2c04:	9301      	str	r3, [sp, #4]
    2c06:	1a89      	subs	r1, r1, r2
    2c08:	f000 f92c 	bl	2e64 <__sccl>
    2c0c:	9b01      	ldr	r3, [sp, #4]
    2c0e:	f04f 0800 	mov.w	r8, #0
    2c12:	461d      	mov	r5, r3
    2c14:	68a3      	ldr	r3, [r4, #8]
    2c16:	2b00      	cmp	r3, #0
    2c18:	d038      	beq.n	2c8c <_scanf_i+0x158>
    2c1a:	6831      	ldr	r1, [r6, #0]
    2c1c:	6960      	ldr	r0, [r4, #20]
    2c1e:	780a      	ldrb	r2, [r1, #0]
    2c20:	5c80      	ldrb	r0, [r0, r2]
    2c22:	2800      	cmp	r0, #0
    2c24:	d032      	beq.n	2c8c <_scanf_i+0x158>
    2c26:	2a30      	cmp	r2, #48	; 0x30
    2c28:	6822      	ldr	r2, [r4, #0]
    2c2a:	d121      	bne.n	2c70 <_scanf_i+0x13c>
    2c2c:	0510      	lsls	r0, r2, #20
    2c2e:	d51f      	bpl.n	2c70 <_scanf_i+0x13c>
    2c30:	f108 0801 	add.w	r8, r8, #1
    2c34:	b117      	cbz	r7, 2c3c <_scanf_i+0x108>
    2c36:	3301      	adds	r3, #1
    2c38:	3f01      	subs	r7, #1
    2c3a:	60a3      	str	r3, [r4, #8]
    2c3c:	6873      	ldr	r3, [r6, #4]
    2c3e:	3b01      	subs	r3, #1
    2c40:	2b00      	cmp	r3, #0
    2c42:	6073      	str	r3, [r6, #4]
    2c44:	dd1b      	ble.n	2c7e <_scanf_i+0x14a>
    2c46:	6833      	ldr	r3, [r6, #0]
    2c48:	3301      	adds	r3, #1
    2c4a:	6033      	str	r3, [r6, #0]
    2c4c:	68a3      	ldr	r3, [r4, #8]
    2c4e:	3b01      	subs	r3, #1
    2c50:	60a3      	str	r3, [r4, #8]
    2c52:	e7df      	b.n	2c14 <_scanf_i+0xe0>
    2c54:	f1b8 0f02 	cmp.w	r8, #2
    2c58:	d1b1      	bne.n	2bbe <_scanf_i+0x8a>
    2c5a:	6822      	ldr	r2, [r4, #0]
    2c5c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    2c60:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2c64:	d1c2      	bne.n	2bec <_scanf_i+0xb8>
    2c66:	2110      	movs	r1, #16
    2c68:	6061      	str	r1, [r4, #4]
    2c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    2c6e:	e7a5      	b.n	2bbc <_scanf_i+0x88>
    2c70:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    2c74:	6022      	str	r2, [r4, #0]
    2c76:	780b      	ldrb	r3, [r1, #0]
    2c78:	702b      	strb	r3, [r5, #0]
    2c7a:	3501      	adds	r5, #1
    2c7c:	e7de      	b.n	2c3c <_scanf_i+0x108>
    2c7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2c82:	4631      	mov	r1, r6
    2c84:	4658      	mov	r0, fp
    2c86:	4798      	blx	r3
    2c88:	2800      	cmp	r0, #0
    2c8a:	d0df      	beq.n	2c4c <_scanf_i+0x118>
    2c8c:	6823      	ldr	r3, [r4, #0]
    2c8e:	05d9      	lsls	r1, r3, #23
    2c90:	d50c      	bpl.n	2cac <_scanf_i+0x178>
    2c92:	454d      	cmp	r5, r9
    2c94:	d908      	bls.n	2ca8 <_scanf_i+0x174>
    2c96:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    2c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    2c9e:	4632      	mov	r2, r6
    2ca0:	4658      	mov	r0, fp
    2ca2:	4798      	blx	r3
    2ca4:	1e6f      	subs	r7, r5, #1
    2ca6:	463d      	mov	r5, r7
    2ca8:	454d      	cmp	r5, r9
    2caa:	d02c      	beq.n	2d06 <_scanf_i+0x1d2>
    2cac:	6822      	ldr	r2, [r4, #0]
    2cae:	f012 0210 	ands.w	r2, r2, #16
    2cb2:	d11e      	bne.n	2cf2 <_scanf_i+0x1be>
    2cb4:	702a      	strb	r2, [r5, #0]
    2cb6:	6863      	ldr	r3, [r4, #4]
    2cb8:	9e00      	ldr	r6, [sp, #0]
    2cba:	4649      	mov	r1, r9
    2cbc:	4658      	mov	r0, fp
    2cbe:	47b0      	blx	r6
    2cc0:	6822      	ldr	r2, [r4, #0]
    2cc2:	f8da 3000 	ldr.w	r3, [sl]
    2cc6:	f012 0f20 	tst.w	r2, #32
    2cca:	d008      	beq.n	2cde <_scanf_i+0x1aa>
    2ccc:	1d1a      	adds	r2, r3, #4
    2cce:	f8ca 2000 	str.w	r2, [sl]
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	6018      	str	r0, [r3, #0]
    2cd6:	e009      	b.n	2cec <_scanf_i+0x1b8>
    2cd8:	f04f 0800 	mov.w	r8, #0
    2cdc:	e7d6      	b.n	2c8c <_scanf_i+0x158>
    2cde:	07d2      	lsls	r2, r2, #31
    2ce0:	d5f4      	bpl.n	2ccc <_scanf_i+0x198>
    2ce2:	1d1a      	adds	r2, r3, #4
    2ce4:	f8ca 2000 	str.w	r2, [sl]
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	8018      	strh	r0, [r3, #0]
    2cec:	68e3      	ldr	r3, [r4, #12]
    2cee:	3301      	adds	r3, #1
    2cf0:	60e3      	str	r3, [r4, #12]
    2cf2:	eba5 0509 	sub.w	r5, r5, r9
    2cf6:	44a8      	add	r8, r5
    2cf8:	6925      	ldr	r5, [r4, #16]
    2cfa:	4445      	add	r5, r8
    2cfc:	6125      	str	r5, [r4, #16]
    2cfe:	2000      	movs	r0, #0
    2d00:	b007      	add	sp, #28
    2d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d06:	2001      	movs	r0, #1
    2d08:	e7fa      	b.n	2d00 <_scanf_i+0x1cc>
    2d0a:	bf00      	nop
    2d0c:	00003c00 	.word	0x00003c00
    2d10:	0000316d 	.word	0x0000316d
    2d14:	0000304d 	.word	0x0000304d
    2d18:	00003c1c 	.word	0x00003c1c

00002d1c <lflush>:
    2d1c:	8983      	ldrh	r3, [r0, #12]
    2d1e:	f003 0309 	and.w	r3, r3, #9
    2d22:	2b09      	cmp	r3, #9
    2d24:	d101      	bne.n	2d2a <lflush+0xe>
    2d26:	f7ff b841 	b.w	1dac <fflush>
    2d2a:	2000      	movs	r0, #0
    2d2c:	4770      	bx	lr
	...

00002d30 <__srefill_r>:
    2d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d32:	460c      	mov	r4, r1
    2d34:	4605      	mov	r5, r0
    2d36:	b118      	cbz	r0, 2d40 <__srefill_r+0x10>
    2d38:	6983      	ldr	r3, [r0, #24]
    2d3a:	b90b      	cbnz	r3, 2d40 <__srefill_r+0x10>
    2d3c:	f7ff f888 	bl	1e50 <__sinit>
    2d40:	4b3b      	ldr	r3, [pc, #236]	; (2e30 <__srefill_r+0x100>)
    2d42:	429c      	cmp	r4, r3
    2d44:	d10a      	bne.n	2d5c <__srefill_r+0x2c>
    2d46:	686c      	ldr	r4, [r5, #4]
    2d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2d4c:	2300      	movs	r3, #0
    2d4e:	6063      	str	r3, [r4, #4]
    2d50:	b293      	uxth	r3, r2
    2d52:	069e      	lsls	r6, r3, #26
    2d54:	d50c      	bpl.n	2d70 <__srefill_r+0x40>
    2d56:	f04f 30ff 	mov.w	r0, #4294967295
    2d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d5c:	4b35      	ldr	r3, [pc, #212]	; (2e34 <__srefill_r+0x104>)
    2d5e:	429c      	cmp	r4, r3
    2d60:	d101      	bne.n	2d66 <__srefill_r+0x36>
    2d62:	68ac      	ldr	r4, [r5, #8]
    2d64:	e7f0      	b.n	2d48 <__srefill_r+0x18>
    2d66:	4b34      	ldr	r3, [pc, #208]	; (2e38 <__srefill_r+0x108>)
    2d68:	429c      	cmp	r4, r3
    2d6a:	bf08      	it	eq
    2d6c:	68ec      	ldreq	r4, [r5, #12]
    2d6e:	e7eb      	b.n	2d48 <__srefill_r+0x18>
    2d70:	0758      	lsls	r0, r3, #29
    2d72:	d448      	bmi.n	2e06 <__srefill_r+0xd6>
    2d74:	06d9      	lsls	r1, r3, #27
    2d76:	d405      	bmi.n	2d84 <__srefill_r+0x54>
    2d78:	2309      	movs	r3, #9
    2d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2d7e:	602b      	str	r3, [r5, #0]
    2d80:	81a2      	strh	r2, [r4, #12]
    2d82:	e7e8      	b.n	2d56 <__srefill_r+0x26>
    2d84:	071a      	lsls	r2, r3, #28
    2d86:	d50b      	bpl.n	2da0 <__srefill_r+0x70>
    2d88:	4621      	mov	r1, r4
    2d8a:	4628      	mov	r0, r5
    2d8c:	f7fe ffe4 	bl	1d58 <_fflush_r>
    2d90:	2800      	cmp	r0, #0
    2d92:	d1e0      	bne.n	2d56 <__srefill_r+0x26>
    2d94:	89a3      	ldrh	r3, [r4, #12]
    2d96:	60a0      	str	r0, [r4, #8]
    2d98:	f023 0308 	bic.w	r3, r3, #8
    2d9c:	81a3      	strh	r3, [r4, #12]
    2d9e:	61a0      	str	r0, [r4, #24]
    2da0:	89a3      	ldrh	r3, [r4, #12]
    2da2:	f043 0304 	orr.w	r3, r3, #4
    2da6:	81a3      	strh	r3, [r4, #12]
    2da8:	6923      	ldr	r3, [r4, #16]
    2daa:	b91b      	cbnz	r3, 2db4 <__srefill_r+0x84>
    2dac:	4621      	mov	r1, r4
    2dae:	4628      	mov	r0, r5
    2db0:	f7ff f918 	bl	1fe4 <__smakebuf_r>
    2db4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    2db8:	b2be      	uxth	r6, r7
    2dba:	07b3      	lsls	r3, r6, #30
    2dbc:	d00f      	beq.n	2dde <__srefill_r+0xae>
    2dbe:	2301      	movs	r3, #1
    2dc0:	81a3      	strh	r3, [r4, #12]
    2dc2:	4b1e      	ldr	r3, [pc, #120]	; (2e3c <__srefill_r+0x10c>)
    2dc4:	491e      	ldr	r1, [pc, #120]	; (2e40 <__srefill_r+0x110>)
    2dc6:	6818      	ldr	r0, [r3, #0]
    2dc8:	f006 0609 	and.w	r6, r6, #9
    2dcc:	f7ff f8ac 	bl	1f28 <_fwalk>
    2dd0:	2e09      	cmp	r6, #9
    2dd2:	81a7      	strh	r7, [r4, #12]
    2dd4:	d103      	bne.n	2dde <__srefill_r+0xae>
    2dd6:	4621      	mov	r1, r4
    2dd8:	4628      	mov	r0, r5
    2dda:	f7fe ff35 	bl	1c48 <__sflush_r>
    2dde:	6922      	ldr	r2, [r4, #16]
    2de0:	6022      	str	r2, [r4, #0]
    2de2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2de4:	6963      	ldr	r3, [r4, #20]
    2de6:	6a21      	ldr	r1, [r4, #32]
    2de8:	4628      	mov	r0, r5
    2dea:	47b0      	blx	r6
    2dec:	2800      	cmp	r0, #0
    2dee:	6060      	str	r0, [r4, #4]
    2df0:	dc1c      	bgt.n	2e2c <__srefill_r+0xfc>
    2df2:	89a3      	ldrh	r3, [r4, #12]
    2df4:	bf17      	itett	ne
    2df6:	2200      	movne	r2, #0
    2df8:	f043 0320 	orreq.w	r3, r3, #32
    2dfc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    2e00:	6062      	strne	r2, [r4, #4]
    2e02:	81a3      	strh	r3, [r4, #12]
    2e04:	e7a7      	b.n	2d56 <__srefill_r+0x26>
    2e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2e08:	2900      	cmp	r1, #0
    2e0a:	d0cd      	beq.n	2da8 <__srefill_r+0x78>
    2e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2e10:	4299      	cmp	r1, r3
    2e12:	d002      	beq.n	2e1a <__srefill_r+0xea>
    2e14:	4628      	mov	r0, r5
    2e16:	f7ff f92d 	bl	2074 <_free_r>
    2e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2e1c:	6063      	str	r3, [r4, #4]
    2e1e:	2000      	movs	r0, #0
    2e20:	6360      	str	r0, [r4, #52]	; 0x34
    2e22:	2b00      	cmp	r3, #0
    2e24:	d0c0      	beq.n	2da8 <__srefill_r+0x78>
    2e26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2e28:	6023      	str	r3, [r4, #0]
    2e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e2c:	2000      	movs	r0, #0
    2e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e30:	00003b8c 	.word	0x00003b8c
    2e34:	00003bac 	.word	0x00003bac
    2e38:	00003b6c 	.word	0x00003b6c
    2e3c:	00003b68 	.word	0x00003b68
    2e40:	00002d1d 	.word	0x00002d1d

00002e44 <_sbrk_r>:
    2e44:	b538      	push	{r3, r4, r5, lr}
    2e46:	4c06      	ldr	r4, [pc, #24]	; (2e60 <_sbrk_r+0x1c>)
    2e48:	2300      	movs	r3, #0
    2e4a:	4605      	mov	r5, r0
    2e4c:	4608      	mov	r0, r1
    2e4e:	6023      	str	r3, [r4, #0]
    2e50:	f7fd fd22 	bl	898 <_sbrk>
    2e54:	1c43      	adds	r3, r0, #1
    2e56:	d102      	bne.n	2e5e <_sbrk_r+0x1a>
    2e58:	6823      	ldr	r3, [r4, #0]
    2e5a:	b103      	cbz	r3, 2e5e <_sbrk_r+0x1a>
    2e5c:	602b      	str	r3, [r5, #0]
    2e5e:	bd38      	pop	{r3, r4, r5, pc}
    2e60:	20000498 	.word	0x20000498

00002e64 <__sccl>:
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	780b      	ldrb	r3, [r1, #0]
    2e68:	2b5e      	cmp	r3, #94	; 0x5e
    2e6a:	bf13      	iteet	ne
    2e6c:	1c4a      	addne	r2, r1, #1
    2e6e:	1c8a      	addeq	r2, r1, #2
    2e70:	784b      	ldrbeq	r3, [r1, #1]
    2e72:	2100      	movne	r1, #0
    2e74:	bf08      	it	eq
    2e76:	2101      	moveq	r1, #1
    2e78:	1e44      	subs	r4, r0, #1
    2e7a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    2e7e:	f804 1f01 	strb.w	r1, [r4, #1]!
    2e82:	42a5      	cmp	r5, r4
    2e84:	d1fb      	bne.n	2e7e <__sccl+0x1a>
    2e86:	b913      	cbnz	r3, 2e8e <__sccl+0x2a>
    2e88:	3a01      	subs	r2, #1
    2e8a:	4610      	mov	r0, r2
    2e8c:	bd70      	pop	{r4, r5, r6, pc}
    2e8e:	f081 0401 	eor.w	r4, r1, #1
    2e92:	54c4      	strb	r4, [r0, r3]
    2e94:	4611      	mov	r1, r2
    2e96:	780d      	ldrb	r5, [r1, #0]
    2e98:	2d2d      	cmp	r5, #45	; 0x2d
    2e9a:	f101 0201 	add.w	r2, r1, #1
    2e9e:	d006      	beq.n	2eae <__sccl+0x4a>
    2ea0:	2d5d      	cmp	r5, #93	; 0x5d
    2ea2:	d0f2      	beq.n	2e8a <__sccl+0x26>
    2ea4:	b90d      	cbnz	r5, 2eaa <__sccl+0x46>
    2ea6:	460a      	mov	r2, r1
    2ea8:	e7ef      	b.n	2e8a <__sccl+0x26>
    2eaa:	462b      	mov	r3, r5
    2eac:	e7f1      	b.n	2e92 <__sccl+0x2e>
    2eae:	784e      	ldrb	r6, [r1, #1]
    2eb0:	2e5d      	cmp	r6, #93	; 0x5d
    2eb2:	d0fa      	beq.n	2eaa <__sccl+0x46>
    2eb4:	42b3      	cmp	r3, r6
    2eb6:	dcf8      	bgt.n	2eaa <__sccl+0x46>
    2eb8:	3102      	adds	r1, #2
    2eba:	3301      	adds	r3, #1
    2ebc:	429e      	cmp	r6, r3
    2ebe:	54c4      	strb	r4, [r0, r3]
    2ec0:	dcfb      	bgt.n	2eba <__sccl+0x56>
    2ec2:	e7e8      	b.n	2e96 <__sccl+0x32>

00002ec4 <__sread>:
    2ec4:	b510      	push	{r4, lr}
    2ec6:	460c      	mov	r4, r1
    2ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2ecc:	f000 fb00 	bl	34d0 <_read_r>
    2ed0:	2800      	cmp	r0, #0
    2ed2:	bfab      	itete	ge
    2ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    2ed6:	89a3      	ldrhlt	r3, [r4, #12]
    2ed8:	181b      	addge	r3, r3, r0
    2eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2ede:	bfac      	ite	ge
    2ee0:	6563      	strge	r3, [r4, #84]	; 0x54
    2ee2:	81a3      	strhlt	r3, [r4, #12]
    2ee4:	bd10      	pop	{r4, pc}

00002ee6 <__swrite>:
    2ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2eea:	461f      	mov	r7, r3
    2eec:	898b      	ldrh	r3, [r1, #12]
    2eee:	05db      	lsls	r3, r3, #23
    2ef0:	4605      	mov	r5, r0
    2ef2:	460c      	mov	r4, r1
    2ef4:	4616      	mov	r6, r2
    2ef6:	d505      	bpl.n	2f04 <__swrite+0x1e>
    2ef8:	2302      	movs	r3, #2
    2efa:	2200      	movs	r2, #0
    2efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2f00:	f000 fa4a 	bl	3398 <_lseek_r>
    2f04:	89a3      	ldrh	r3, [r4, #12]
    2f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2f0e:	81a3      	strh	r3, [r4, #12]
    2f10:	4632      	mov	r2, r6
    2f12:	463b      	mov	r3, r7
    2f14:	4628      	mov	r0, r5
    2f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f1a:	f000 b9e7 	b.w	32ec <_write_r>

00002f1e <__sseek>:
    2f1e:	b510      	push	{r4, lr}
    2f20:	460c      	mov	r4, r1
    2f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2f26:	f000 fa37 	bl	3398 <_lseek_r>
    2f2a:	1c43      	adds	r3, r0, #1
    2f2c:	89a3      	ldrh	r3, [r4, #12]
    2f2e:	bf15      	itete	ne
    2f30:	6560      	strne	r0, [r4, #84]	; 0x54
    2f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2f3a:	81a3      	strheq	r3, [r4, #12]
    2f3c:	bf18      	it	ne
    2f3e:	81a3      	strhne	r3, [r4, #12]
    2f40:	bd10      	pop	{r4, pc}

00002f42 <__sclose>:
    2f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2f46:	f000 b9e3 	b.w	3310 <_close_r>

00002f4a <_strtol_l.isra.0>:
    2f4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f4e:	4680      	mov	r8, r0
    2f50:	4689      	mov	r9, r1
    2f52:	4692      	mov	sl, r2
    2f54:	461f      	mov	r7, r3
    2f56:	468b      	mov	fp, r1
    2f58:	465d      	mov	r5, fp
    2f5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
    2f60:	f000 fa08 	bl	3374 <__locale_ctype_ptr_l>
    2f64:	4420      	add	r0, r4
    2f66:	7846      	ldrb	r6, [r0, #1]
    2f68:	f016 0608 	ands.w	r6, r6, #8
    2f6c:	d10b      	bne.n	2f86 <_strtol_l.isra.0+0x3c>
    2f6e:	2c2d      	cmp	r4, #45	; 0x2d
    2f70:	d10b      	bne.n	2f8a <_strtol_l.isra.0+0x40>
    2f72:	782c      	ldrb	r4, [r5, #0]
    2f74:	2601      	movs	r6, #1
    2f76:	f10b 0502 	add.w	r5, fp, #2
    2f7a:	b167      	cbz	r7, 2f96 <_strtol_l.isra.0+0x4c>
    2f7c:	2f10      	cmp	r7, #16
    2f7e:	d114      	bne.n	2faa <_strtol_l.isra.0+0x60>
    2f80:	2c30      	cmp	r4, #48	; 0x30
    2f82:	d00a      	beq.n	2f9a <_strtol_l.isra.0+0x50>
    2f84:	e011      	b.n	2faa <_strtol_l.isra.0+0x60>
    2f86:	46ab      	mov	fp, r5
    2f88:	e7e6      	b.n	2f58 <_strtol_l.isra.0+0xe>
    2f8a:	2c2b      	cmp	r4, #43	; 0x2b
    2f8c:	bf04      	itt	eq
    2f8e:	782c      	ldrbeq	r4, [r5, #0]
    2f90:	f10b 0502 	addeq.w	r5, fp, #2
    2f94:	e7f1      	b.n	2f7a <_strtol_l.isra.0+0x30>
    2f96:	2c30      	cmp	r4, #48	; 0x30
    2f98:	d127      	bne.n	2fea <_strtol_l.isra.0+0xa0>
    2f9a:	782b      	ldrb	r3, [r5, #0]
    2f9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    2fa0:	2b58      	cmp	r3, #88	; 0x58
    2fa2:	d14b      	bne.n	303c <_strtol_l.isra.0+0xf2>
    2fa4:	786c      	ldrb	r4, [r5, #1]
    2fa6:	2710      	movs	r7, #16
    2fa8:	3502      	adds	r5, #2
    2faa:	2e00      	cmp	r6, #0
    2fac:	bf0c      	ite	eq
    2fae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    2fb2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    2fb6:	2200      	movs	r2, #0
    2fb8:	fbb1 fef7 	udiv	lr, r1, r7
    2fbc:	4610      	mov	r0, r2
    2fbe:	fb07 1c1e 	mls	ip, r7, lr, r1
    2fc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2fc6:	2b09      	cmp	r3, #9
    2fc8:	d811      	bhi.n	2fee <_strtol_l.isra.0+0xa4>
    2fca:	461c      	mov	r4, r3
    2fcc:	42a7      	cmp	r7, r4
    2fce:	dd1d      	ble.n	300c <_strtol_l.isra.0+0xc2>
    2fd0:	1c53      	adds	r3, r2, #1
    2fd2:	d007      	beq.n	2fe4 <_strtol_l.isra.0+0x9a>
    2fd4:	4586      	cmp	lr, r0
    2fd6:	d316      	bcc.n	3006 <_strtol_l.isra.0+0xbc>
    2fd8:	d101      	bne.n	2fde <_strtol_l.isra.0+0x94>
    2fda:	45a4      	cmp	ip, r4
    2fdc:	db13      	blt.n	3006 <_strtol_l.isra.0+0xbc>
    2fde:	fb00 4007 	mla	r0, r0, r7, r4
    2fe2:	2201      	movs	r2, #1
    2fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
    2fe8:	e7eb      	b.n	2fc2 <_strtol_l.isra.0+0x78>
    2fea:	270a      	movs	r7, #10
    2fec:	e7dd      	b.n	2faa <_strtol_l.isra.0+0x60>
    2fee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    2ff2:	2b19      	cmp	r3, #25
    2ff4:	d801      	bhi.n	2ffa <_strtol_l.isra.0+0xb0>
    2ff6:	3c37      	subs	r4, #55	; 0x37
    2ff8:	e7e8      	b.n	2fcc <_strtol_l.isra.0+0x82>
    2ffa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    2ffe:	2b19      	cmp	r3, #25
    3000:	d804      	bhi.n	300c <_strtol_l.isra.0+0xc2>
    3002:	3c57      	subs	r4, #87	; 0x57
    3004:	e7e2      	b.n	2fcc <_strtol_l.isra.0+0x82>
    3006:	f04f 32ff 	mov.w	r2, #4294967295
    300a:	e7eb      	b.n	2fe4 <_strtol_l.isra.0+0x9a>
    300c:	1c53      	adds	r3, r2, #1
    300e:	d108      	bne.n	3022 <_strtol_l.isra.0+0xd8>
    3010:	2322      	movs	r3, #34	; 0x22
    3012:	f8c8 3000 	str.w	r3, [r8]
    3016:	4608      	mov	r0, r1
    3018:	f1ba 0f00 	cmp.w	sl, #0
    301c:	d107      	bne.n	302e <_strtol_l.isra.0+0xe4>
    301e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3022:	b106      	cbz	r6, 3026 <_strtol_l.isra.0+0xdc>
    3024:	4240      	negs	r0, r0
    3026:	f1ba 0f00 	cmp.w	sl, #0
    302a:	d00c      	beq.n	3046 <_strtol_l.isra.0+0xfc>
    302c:	b122      	cbz	r2, 3038 <_strtol_l.isra.0+0xee>
    302e:	3d01      	subs	r5, #1
    3030:	f8ca 5000 	str.w	r5, [sl]
    3034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3038:	464d      	mov	r5, r9
    303a:	e7f9      	b.n	3030 <_strtol_l.isra.0+0xe6>
    303c:	2430      	movs	r4, #48	; 0x30
    303e:	2f00      	cmp	r7, #0
    3040:	d1b3      	bne.n	2faa <_strtol_l.isra.0+0x60>
    3042:	2708      	movs	r7, #8
    3044:	e7b1      	b.n	2faa <_strtol_l.isra.0+0x60>
    3046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000304c <_strtol_r>:
    304c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    304e:	4c06      	ldr	r4, [pc, #24]	; (3068 <_strtol_r+0x1c>)
    3050:	4d06      	ldr	r5, [pc, #24]	; (306c <_strtol_r+0x20>)
    3052:	6824      	ldr	r4, [r4, #0]
    3054:	6a24      	ldr	r4, [r4, #32]
    3056:	2c00      	cmp	r4, #0
    3058:	bf08      	it	eq
    305a:	462c      	moveq	r4, r5
    305c:	9400      	str	r4, [sp, #0]
    305e:	f7ff ff74 	bl	2f4a <_strtol_l.isra.0>
    3062:	b003      	add	sp, #12
    3064:	bd30      	pop	{r4, r5, pc}
    3066:	bf00      	nop
    3068:	20000028 	.word	0x20000028
    306c:	2000008c 	.word	0x2000008c

00003070 <_strtoul_l.isra.0>:
    3070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3074:	4680      	mov	r8, r0
    3076:	4689      	mov	r9, r1
    3078:	4692      	mov	sl, r2
    307a:	461e      	mov	r6, r3
    307c:	460f      	mov	r7, r1
    307e:	463d      	mov	r5, r7
    3080:	9808      	ldr	r0, [sp, #32]
    3082:	f815 4b01 	ldrb.w	r4, [r5], #1
    3086:	f000 f975 	bl	3374 <__locale_ctype_ptr_l>
    308a:	4420      	add	r0, r4
    308c:	7843      	ldrb	r3, [r0, #1]
    308e:	f013 0308 	ands.w	r3, r3, #8
    3092:	d10a      	bne.n	30aa <_strtoul_l.isra.0+0x3a>
    3094:	2c2d      	cmp	r4, #45	; 0x2d
    3096:	d10a      	bne.n	30ae <_strtoul_l.isra.0+0x3e>
    3098:	782c      	ldrb	r4, [r5, #0]
    309a:	2301      	movs	r3, #1
    309c:	1cbd      	adds	r5, r7, #2
    309e:	b15e      	cbz	r6, 30b8 <_strtoul_l.isra.0+0x48>
    30a0:	2e10      	cmp	r6, #16
    30a2:	d113      	bne.n	30cc <_strtoul_l.isra.0+0x5c>
    30a4:	2c30      	cmp	r4, #48	; 0x30
    30a6:	d009      	beq.n	30bc <_strtoul_l.isra.0+0x4c>
    30a8:	e010      	b.n	30cc <_strtoul_l.isra.0+0x5c>
    30aa:	462f      	mov	r7, r5
    30ac:	e7e7      	b.n	307e <_strtoul_l.isra.0+0xe>
    30ae:	2c2b      	cmp	r4, #43	; 0x2b
    30b0:	bf04      	itt	eq
    30b2:	782c      	ldrbeq	r4, [r5, #0]
    30b4:	1cbd      	addeq	r5, r7, #2
    30b6:	e7f2      	b.n	309e <_strtoul_l.isra.0+0x2e>
    30b8:	2c30      	cmp	r4, #48	; 0x30
    30ba:	d125      	bne.n	3108 <_strtoul_l.isra.0+0x98>
    30bc:	782a      	ldrb	r2, [r5, #0]
    30be:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    30c2:	2a58      	cmp	r2, #88	; 0x58
    30c4:	d14a      	bne.n	315c <_strtoul_l.isra.0+0xec>
    30c6:	786c      	ldrb	r4, [r5, #1]
    30c8:	2610      	movs	r6, #16
    30ca:	3502      	adds	r5, #2
    30cc:	f04f 31ff 	mov.w	r1, #4294967295
    30d0:	2700      	movs	r7, #0
    30d2:	fbb1 f1f6 	udiv	r1, r1, r6
    30d6:	fb06 fe01 	mul.w	lr, r6, r1
    30da:	ea6f 0e0e 	mvn.w	lr, lr
    30de:	4638      	mov	r0, r7
    30e0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    30e4:	2a09      	cmp	r2, #9
    30e6:	d811      	bhi.n	310c <_strtoul_l.isra.0+0x9c>
    30e8:	4614      	mov	r4, r2
    30ea:	42a6      	cmp	r6, r4
    30ec:	dd1d      	ble.n	312a <_strtoul_l.isra.0+0xba>
    30ee:	2f00      	cmp	r7, #0
    30f0:	db18      	blt.n	3124 <_strtoul_l.isra.0+0xb4>
    30f2:	4281      	cmp	r1, r0
    30f4:	d316      	bcc.n	3124 <_strtoul_l.isra.0+0xb4>
    30f6:	d101      	bne.n	30fc <_strtoul_l.isra.0+0x8c>
    30f8:	45a6      	cmp	lr, r4
    30fa:	db13      	blt.n	3124 <_strtoul_l.isra.0+0xb4>
    30fc:	fb00 4006 	mla	r0, r0, r6, r4
    3100:	2701      	movs	r7, #1
    3102:	f815 4b01 	ldrb.w	r4, [r5], #1
    3106:	e7eb      	b.n	30e0 <_strtoul_l.isra.0+0x70>
    3108:	260a      	movs	r6, #10
    310a:	e7df      	b.n	30cc <_strtoul_l.isra.0+0x5c>
    310c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    3110:	2a19      	cmp	r2, #25
    3112:	d801      	bhi.n	3118 <_strtoul_l.isra.0+0xa8>
    3114:	3c37      	subs	r4, #55	; 0x37
    3116:	e7e8      	b.n	30ea <_strtoul_l.isra.0+0x7a>
    3118:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    311c:	2a19      	cmp	r2, #25
    311e:	d804      	bhi.n	312a <_strtoul_l.isra.0+0xba>
    3120:	3c57      	subs	r4, #87	; 0x57
    3122:	e7e2      	b.n	30ea <_strtoul_l.isra.0+0x7a>
    3124:	f04f 37ff 	mov.w	r7, #4294967295
    3128:	e7eb      	b.n	3102 <_strtoul_l.isra.0+0x92>
    312a:	2f00      	cmp	r7, #0
    312c:	da09      	bge.n	3142 <_strtoul_l.isra.0+0xd2>
    312e:	2322      	movs	r3, #34	; 0x22
    3130:	f8c8 3000 	str.w	r3, [r8]
    3134:	f04f 30ff 	mov.w	r0, #4294967295
    3138:	f1ba 0f00 	cmp.w	sl, #0
    313c:	d107      	bne.n	314e <_strtoul_l.isra.0+0xde>
    313e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3142:	b103      	cbz	r3, 3146 <_strtoul_l.isra.0+0xd6>
    3144:	4240      	negs	r0, r0
    3146:	f1ba 0f00 	cmp.w	sl, #0
    314a:	d00c      	beq.n	3166 <_strtoul_l.isra.0+0xf6>
    314c:	b127      	cbz	r7, 3158 <_strtoul_l.isra.0+0xe8>
    314e:	3d01      	subs	r5, #1
    3150:	f8ca 5000 	str.w	r5, [sl]
    3154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3158:	464d      	mov	r5, r9
    315a:	e7f9      	b.n	3150 <_strtoul_l.isra.0+0xe0>
    315c:	2430      	movs	r4, #48	; 0x30
    315e:	2e00      	cmp	r6, #0
    3160:	d1b4      	bne.n	30cc <_strtoul_l.isra.0+0x5c>
    3162:	2608      	movs	r6, #8
    3164:	e7b2      	b.n	30cc <_strtoul_l.isra.0+0x5c>
    3166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000316c <_strtoul_r>:
    316c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    316e:	4c06      	ldr	r4, [pc, #24]	; (3188 <_strtoul_r+0x1c>)
    3170:	4d06      	ldr	r5, [pc, #24]	; (318c <_strtoul_r+0x20>)
    3172:	6824      	ldr	r4, [r4, #0]
    3174:	6a24      	ldr	r4, [r4, #32]
    3176:	2c00      	cmp	r4, #0
    3178:	bf08      	it	eq
    317a:	462c      	moveq	r4, r5
    317c:	9400      	str	r4, [sp, #0]
    317e:	f7ff ff77 	bl	3070 <_strtoul_l.isra.0>
    3182:	b003      	add	sp, #12
    3184:	bd30      	pop	{r4, r5, pc}
    3186:	bf00      	nop
    3188:	20000028 	.word	0x20000028
    318c:	2000008c 	.word	0x2000008c

00003190 <__submore>:
    3190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3194:	460c      	mov	r4, r1
    3196:	6b49      	ldr	r1, [r1, #52]	; 0x34
    3198:	f104 0344 	add.w	r3, r4, #68	; 0x44
    319c:	4299      	cmp	r1, r3
    319e:	d11e      	bne.n	31de <__submore+0x4e>
    31a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    31a4:	f7fe ffb4 	bl	2110 <_malloc_r>
    31a8:	b918      	cbnz	r0, 31b2 <__submore+0x22>
    31aa:	f04f 30ff 	mov.w	r0, #4294967295
    31ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    31b6:	63a3      	str	r3, [r4, #56]	; 0x38
    31b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    31bc:	6360      	str	r0, [r4, #52]	; 0x34
    31be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    31c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    31c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    31ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    31ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    31d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    31d6:	6020      	str	r0, [r4, #0]
    31d8:	2000      	movs	r0, #0
    31da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    31e0:	0077      	lsls	r7, r6, #1
    31e2:	463a      	mov	r2, r7
    31e4:	f000 f94e 	bl	3484 <_realloc_r>
    31e8:	4605      	mov	r5, r0
    31ea:	2800      	cmp	r0, #0
    31ec:	d0dd      	beq.n	31aa <__submore+0x1a>
    31ee:	eb00 0806 	add.w	r8, r0, r6
    31f2:	4601      	mov	r1, r0
    31f4:	4632      	mov	r2, r6
    31f6:	4640      	mov	r0, r8
    31f8:	f7fe fb08 	bl	180c <memcpy>
    31fc:	f8c4 8000 	str.w	r8, [r4]
    3200:	6365      	str	r5, [r4, #52]	; 0x34
    3202:	63a7      	str	r7, [r4, #56]	; 0x38
    3204:	e7e8      	b.n	31d8 <__submore+0x48>
	...

00003208 <_ungetc_r>:
    3208:	1c4b      	adds	r3, r1, #1
    320a:	b570      	push	{r4, r5, r6, lr}
    320c:	4606      	mov	r6, r0
    320e:	460d      	mov	r5, r1
    3210:	4614      	mov	r4, r2
    3212:	d103      	bne.n	321c <_ungetc_r+0x14>
    3214:	f04f 35ff 	mov.w	r5, #4294967295
    3218:	4628      	mov	r0, r5
    321a:	bd70      	pop	{r4, r5, r6, pc}
    321c:	b118      	cbz	r0, 3226 <_ungetc_r+0x1e>
    321e:	6983      	ldr	r3, [r0, #24]
    3220:	b90b      	cbnz	r3, 3226 <_ungetc_r+0x1e>
    3222:	f7fe fe15 	bl	1e50 <__sinit>
    3226:	4b2e      	ldr	r3, [pc, #184]	; (32e0 <_ungetc_r+0xd8>)
    3228:	429c      	cmp	r4, r3
    322a:	d12c      	bne.n	3286 <_ungetc_r+0x7e>
    322c:	6874      	ldr	r4, [r6, #4]
    322e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3232:	f023 0320 	bic.w	r3, r3, #32
    3236:	81a3      	strh	r3, [r4, #12]
    3238:	b29b      	uxth	r3, r3
    323a:	0759      	lsls	r1, r3, #29
    323c:	d413      	bmi.n	3266 <_ungetc_r+0x5e>
    323e:	06da      	lsls	r2, r3, #27
    3240:	d5e8      	bpl.n	3214 <_ungetc_r+0xc>
    3242:	071b      	lsls	r3, r3, #28
    3244:	d50b      	bpl.n	325e <_ungetc_r+0x56>
    3246:	4621      	mov	r1, r4
    3248:	4630      	mov	r0, r6
    324a:	f7fe fd85 	bl	1d58 <_fflush_r>
    324e:	2800      	cmp	r0, #0
    3250:	d1e0      	bne.n	3214 <_ungetc_r+0xc>
    3252:	89a3      	ldrh	r3, [r4, #12]
    3254:	60a0      	str	r0, [r4, #8]
    3256:	f023 0308 	bic.w	r3, r3, #8
    325a:	81a3      	strh	r3, [r4, #12]
    325c:	61a0      	str	r0, [r4, #24]
    325e:	89a3      	ldrh	r3, [r4, #12]
    3260:	f043 0304 	orr.w	r3, r3, #4
    3264:	81a3      	strh	r3, [r4, #12]
    3266:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3268:	6862      	ldr	r2, [r4, #4]
    326a:	b2ed      	uxtb	r5, r5
    326c:	b1e3      	cbz	r3, 32a8 <_ungetc_r+0xa0>
    326e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3270:	429a      	cmp	r2, r3
    3272:	da12      	bge.n	329a <_ungetc_r+0x92>
    3274:	6823      	ldr	r3, [r4, #0]
    3276:	1e5a      	subs	r2, r3, #1
    3278:	6022      	str	r2, [r4, #0]
    327a:	f803 5c01 	strb.w	r5, [r3, #-1]
    327e:	6863      	ldr	r3, [r4, #4]
    3280:	3301      	adds	r3, #1
    3282:	6063      	str	r3, [r4, #4]
    3284:	e7c8      	b.n	3218 <_ungetc_r+0x10>
    3286:	4b17      	ldr	r3, [pc, #92]	; (32e4 <_ungetc_r+0xdc>)
    3288:	429c      	cmp	r4, r3
    328a:	d101      	bne.n	3290 <_ungetc_r+0x88>
    328c:	68b4      	ldr	r4, [r6, #8]
    328e:	e7ce      	b.n	322e <_ungetc_r+0x26>
    3290:	4b15      	ldr	r3, [pc, #84]	; (32e8 <_ungetc_r+0xe0>)
    3292:	429c      	cmp	r4, r3
    3294:	bf08      	it	eq
    3296:	68f4      	ldreq	r4, [r6, #12]
    3298:	e7c9      	b.n	322e <_ungetc_r+0x26>
    329a:	4621      	mov	r1, r4
    329c:	4630      	mov	r0, r6
    329e:	f7ff ff77 	bl	3190 <__submore>
    32a2:	2800      	cmp	r0, #0
    32a4:	d0e6      	beq.n	3274 <_ungetc_r+0x6c>
    32a6:	e7b5      	b.n	3214 <_ungetc_r+0xc>
    32a8:	6921      	ldr	r1, [r4, #16]
    32aa:	6823      	ldr	r3, [r4, #0]
    32ac:	b151      	cbz	r1, 32c4 <_ungetc_r+0xbc>
    32ae:	4299      	cmp	r1, r3
    32b0:	d208      	bcs.n	32c4 <_ungetc_r+0xbc>
    32b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    32b6:	428d      	cmp	r5, r1
    32b8:	d104      	bne.n	32c4 <_ungetc_r+0xbc>
    32ba:	3b01      	subs	r3, #1
    32bc:	3201      	adds	r2, #1
    32be:	6023      	str	r3, [r4, #0]
    32c0:	6062      	str	r2, [r4, #4]
    32c2:	e7a9      	b.n	3218 <_ungetc_r+0x10>
    32c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    32c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
    32ca:	6363      	str	r3, [r4, #52]	; 0x34
    32cc:	2303      	movs	r3, #3
    32ce:	63a3      	str	r3, [r4, #56]	; 0x38
    32d0:	4623      	mov	r3, r4
    32d2:	6422      	str	r2, [r4, #64]	; 0x40
    32d4:	f803 5f46 	strb.w	r5, [r3, #70]!
    32d8:	6023      	str	r3, [r4, #0]
    32da:	2301      	movs	r3, #1
    32dc:	e7d1      	b.n	3282 <_ungetc_r+0x7a>
    32de:	bf00      	nop
    32e0:	00003b8c 	.word	0x00003b8c
    32e4:	00003bac 	.word	0x00003bac
    32e8:	00003b6c 	.word	0x00003b6c

000032ec <_write_r>:
    32ec:	b538      	push	{r3, r4, r5, lr}
    32ee:	4c07      	ldr	r4, [pc, #28]	; (330c <_write_r+0x20>)
    32f0:	4605      	mov	r5, r0
    32f2:	4608      	mov	r0, r1
    32f4:	4611      	mov	r1, r2
    32f6:	2200      	movs	r2, #0
    32f8:	6022      	str	r2, [r4, #0]
    32fa:	461a      	mov	r2, r3
    32fc:	f7fe fa06 	bl	170c <_write>
    3300:	1c43      	adds	r3, r0, #1
    3302:	d102      	bne.n	330a <_write_r+0x1e>
    3304:	6823      	ldr	r3, [r4, #0]
    3306:	b103      	cbz	r3, 330a <_write_r+0x1e>
    3308:	602b      	str	r3, [r5, #0]
    330a:	bd38      	pop	{r3, r4, r5, pc}
    330c:	20000498 	.word	0x20000498

00003310 <_close_r>:
    3310:	b538      	push	{r3, r4, r5, lr}
    3312:	4c06      	ldr	r4, [pc, #24]	; (332c <_close_r+0x1c>)
    3314:	2300      	movs	r3, #0
    3316:	4605      	mov	r5, r0
    3318:	4608      	mov	r0, r1
    331a:	6023      	str	r3, [r4, #0]
    331c:	f7fd face 	bl	8bc <_close>
    3320:	1c43      	adds	r3, r0, #1
    3322:	d102      	bne.n	332a <_close_r+0x1a>
    3324:	6823      	ldr	r3, [r4, #0]
    3326:	b103      	cbz	r3, 332a <_close_r+0x1a>
    3328:	602b      	str	r3, [r5, #0]
    332a:	bd38      	pop	{r3, r4, r5, pc}
    332c:	20000498 	.word	0x20000498

00003330 <_fstat_r>:
    3330:	b538      	push	{r3, r4, r5, lr}
    3332:	4c07      	ldr	r4, [pc, #28]	; (3350 <_fstat_r+0x20>)
    3334:	2300      	movs	r3, #0
    3336:	4605      	mov	r5, r0
    3338:	4608      	mov	r0, r1
    333a:	4611      	mov	r1, r2
    333c:	6023      	str	r3, [r4, #0]
    333e:	f7fd fac0 	bl	8c2 <_fstat>
    3342:	1c43      	adds	r3, r0, #1
    3344:	d102      	bne.n	334c <_fstat_r+0x1c>
    3346:	6823      	ldr	r3, [r4, #0]
    3348:	b103      	cbz	r3, 334c <_fstat_r+0x1c>
    334a:	602b      	str	r3, [r5, #0]
    334c:	bd38      	pop	{r3, r4, r5, pc}
    334e:	bf00      	nop
    3350:	20000498 	.word	0x20000498

00003354 <_isatty_r>:
    3354:	b538      	push	{r3, r4, r5, lr}
    3356:	4c06      	ldr	r4, [pc, #24]	; (3370 <_isatty_r+0x1c>)
    3358:	2300      	movs	r3, #0
    335a:	4605      	mov	r5, r0
    335c:	4608      	mov	r0, r1
    335e:	6023      	str	r3, [r4, #0]
    3360:	f7fd fab4 	bl	8cc <_isatty>
    3364:	1c43      	adds	r3, r0, #1
    3366:	d102      	bne.n	336e <_isatty_r+0x1a>
    3368:	6823      	ldr	r3, [r4, #0]
    336a:	b103      	cbz	r3, 336e <_isatty_r+0x1a>
    336c:	602b      	str	r3, [r5, #0]
    336e:	bd38      	pop	{r3, r4, r5, pc}
    3370:	20000498 	.word	0x20000498

00003374 <__locale_ctype_ptr_l>:
    3374:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    3378:	4770      	bx	lr
	...

0000337c <__locale_ctype_ptr>:
    337c:	4b04      	ldr	r3, [pc, #16]	; (3390 <__locale_ctype_ptr+0x14>)
    337e:	4a05      	ldr	r2, [pc, #20]	; (3394 <__locale_ctype_ptr+0x18>)
    3380:	681b      	ldr	r3, [r3, #0]
    3382:	6a1b      	ldr	r3, [r3, #32]
    3384:	2b00      	cmp	r3, #0
    3386:	bf08      	it	eq
    3388:	4613      	moveq	r3, r2
    338a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    338e:	4770      	bx	lr
    3390:	20000028 	.word	0x20000028
    3394:	2000008c 	.word	0x2000008c

00003398 <_lseek_r>:
    3398:	b538      	push	{r3, r4, r5, lr}
    339a:	4c07      	ldr	r4, [pc, #28]	; (33b8 <_lseek_r+0x20>)
    339c:	4605      	mov	r5, r0
    339e:	4608      	mov	r0, r1
    33a0:	4611      	mov	r1, r2
    33a2:	2200      	movs	r2, #0
    33a4:	6022      	str	r2, [r4, #0]
    33a6:	461a      	mov	r2, r3
    33a8:	f7fd fa92 	bl	8d0 <_lseek>
    33ac:	1c43      	adds	r3, r0, #1
    33ae:	d102      	bne.n	33b6 <_lseek_r+0x1e>
    33b0:	6823      	ldr	r3, [r4, #0]
    33b2:	b103      	cbz	r3, 33b6 <_lseek_r+0x1e>
    33b4:	602b      	str	r3, [r5, #0]
    33b6:	bd38      	pop	{r3, r4, r5, pc}
    33b8:	20000498 	.word	0x20000498

000033bc <__ascii_mbtowc>:
    33bc:	b082      	sub	sp, #8
    33be:	b901      	cbnz	r1, 33c2 <__ascii_mbtowc+0x6>
    33c0:	a901      	add	r1, sp, #4
    33c2:	b142      	cbz	r2, 33d6 <__ascii_mbtowc+0x1a>
    33c4:	b14b      	cbz	r3, 33da <__ascii_mbtowc+0x1e>
    33c6:	7813      	ldrb	r3, [r2, #0]
    33c8:	600b      	str	r3, [r1, #0]
    33ca:	7812      	ldrb	r2, [r2, #0]
    33cc:	1c10      	adds	r0, r2, #0
    33ce:	bf18      	it	ne
    33d0:	2001      	movne	r0, #1
    33d2:	b002      	add	sp, #8
    33d4:	4770      	bx	lr
    33d6:	4610      	mov	r0, r2
    33d8:	e7fb      	b.n	33d2 <__ascii_mbtowc+0x16>
    33da:	f06f 0001 	mvn.w	r0, #1
    33de:	e7f8      	b.n	33d2 <__ascii_mbtowc+0x16>

000033e0 <memchr>:
    33e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    33e4:	2a10      	cmp	r2, #16
    33e6:	db2b      	blt.n	3440 <memchr+0x60>
    33e8:	f010 0f07 	tst.w	r0, #7
    33ec:	d008      	beq.n	3400 <memchr+0x20>
    33ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    33f2:	3a01      	subs	r2, #1
    33f4:	428b      	cmp	r3, r1
    33f6:	d02d      	beq.n	3454 <memchr+0x74>
    33f8:	f010 0f07 	tst.w	r0, #7
    33fc:	b342      	cbz	r2, 3450 <memchr+0x70>
    33fe:	d1f6      	bne.n	33ee <memchr+0xe>
    3400:	b4f0      	push	{r4, r5, r6, r7}
    3402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    340a:	f022 0407 	bic.w	r4, r2, #7
    340e:	f07f 0700 	mvns.w	r7, #0
    3412:	2300      	movs	r3, #0
    3414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3418:	3c08      	subs	r4, #8
    341a:	ea85 0501 	eor.w	r5, r5, r1
    341e:	ea86 0601 	eor.w	r6, r6, r1
    3422:	fa85 f547 	uadd8	r5, r5, r7
    3426:	faa3 f587 	sel	r5, r3, r7
    342a:	fa86 f647 	uadd8	r6, r6, r7
    342e:	faa5 f687 	sel	r6, r5, r7
    3432:	b98e      	cbnz	r6, 3458 <memchr+0x78>
    3434:	d1ee      	bne.n	3414 <memchr+0x34>
    3436:	bcf0      	pop	{r4, r5, r6, r7}
    3438:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    343c:	f002 0207 	and.w	r2, r2, #7
    3440:	b132      	cbz	r2, 3450 <memchr+0x70>
    3442:	f810 3b01 	ldrb.w	r3, [r0], #1
    3446:	3a01      	subs	r2, #1
    3448:	ea83 0301 	eor.w	r3, r3, r1
    344c:	b113      	cbz	r3, 3454 <memchr+0x74>
    344e:	d1f8      	bne.n	3442 <memchr+0x62>
    3450:	2000      	movs	r0, #0
    3452:	4770      	bx	lr
    3454:	3801      	subs	r0, #1
    3456:	4770      	bx	lr
    3458:	2d00      	cmp	r5, #0
    345a:	bf06      	itte	eq
    345c:	4635      	moveq	r5, r6
    345e:	3803      	subeq	r0, #3
    3460:	3807      	subne	r0, #7
    3462:	f015 0f01 	tst.w	r5, #1
    3466:	d107      	bne.n	3478 <memchr+0x98>
    3468:	3001      	adds	r0, #1
    346a:	f415 7f80 	tst.w	r5, #256	; 0x100
    346e:	bf02      	ittt	eq
    3470:	3001      	addeq	r0, #1
    3472:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3476:	3001      	addeq	r0, #1
    3478:	bcf0      	pop	{r4, r5, r6, r7}
    347a:	3801      	subs	r0, #1
    347c:	4770      	bx	lr
    347e:	bf00      	nop

00003480 <__malloc_lock>:
    3480:	4770      	bx	lr

00003482 <__malloc_unlock>:
    3482:	4770      	bx	lr

00003484 <_realloc_r>:
    3484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3486:	4607      	mov	r7, r0
    3488:	4614      	mov	r4, r2
    348a:	460e      	mov	r6, r1
    348c:	b921      	cbnz	r1, 3498 <_realloc_r+0x14>
    348e:	4611      	mov	r1, r2
    3490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3494:	f7fe be3c 	b.w	2110 <_malloc_r>
    3498:	b922      	cbnz	r2, 34a4 <_realloc_r+0x20>
    349a:	f7fe fdeb 	bl	2074 <_free_r>
    349e:	4625      	mov	r5, r4
    34a0:	4628      	mov	r0, r5
    34a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34a4:	f000 f833 	bl	350e <_malloc_usable_size_r>
    34a8:	4284      	cmp	r4, r0
    34aa:	d90f      	bls.n	34cc <_realloc_r+0x48>
    34ac:	4621      	mov	r1, r4
    34ae:	4638      	mov	r0, r7
    34b0:	f7fe fe2e 	bl	2110 <_malloc_r>
    34b4:	4605      	mov	r5, r0
    34b6:	2800      	cmp	r0, #0
    34b8:	d0f2      	beq.n	34a0 <_realloc_r+0x1c>
    34ba:	4631      	mov	r1, r6
    34bc:	4622      	mov	r2, r4
    34be:	f7fe f9a5 	bl	180c <memcpy>
    34c2:	4631      	mov	r1, r6
    34c4:	4638      	mov	r0, r7
    34c6:	f7fe fdd5 	bl	2074 <_free_r>
    34ca:	e7e9      	b.n	34a0 <_realloc_r+0x1c>
    34cc:	4635      	mov	r5, r6
    34ce:	e7e7      	b.n	34a0 <_realloc_r+0x1c>

000034d0 <_read_r>:
    34d0:	b538      	push	{r3, r4, r5, lr}
    34d2:	4c07      	ldr	r4, [pc, #28]	; (34f0 <_read_r+0x20>)
    34d4:	4605      	mov	r5, r0
    34d6:	4608      	mov	r0, r1
    34d8:	4611      	mov	r1, r2
    34da:	2200      	movs	r2, #0
    34dc:	6022      	str	r2, [r4, #0]
    34de:	461a      	mov	r2, r3
    34e0:	f7fe f904 	bl	16ec <_read>
    34e4:	1c43      	adds	r3, r0, #1
    34e6:	d102      	bne.n	34ee <_read_r+0x1e>
    34e8:	6823      	ldr	r3, [r4, #0]
    34ea:	b103      	cbz	r3, 34ee <_read_r+0x1e>
    34ec:	602b      	str	r3, [r5, #0]
    34ee:	bd38      	pop	{r3, r4, r5, pc}
    34f0:	20000498 	.word	0x20000498

000034f4 <__ascii_wctomb>:
    34f4:	b149      	cbz	r1, 350a <__ascii_wctomb+0x16>
    34f6:	2aff      	cmp	r2, #255	; 0xff
    34f8:	bf85      	ittet	hi
    34fa:	238a      	movhi	r3, #138	; 0x8a
    34fc:	6003      	strhi	r3, [r0, #0]
    34fe:	700a      	strbls	r2, [r1, #0]
    3500:	f04f 30ff 	movhi.w	r0, #4294967295
    3504:	bf98      	it	ls
    3506:	2001      	movls	r0, #1
    3508:	4770      	bx	lr
    350a:	4608      	mov	r0, r1
    350c:	4770      	bx	lr

0000350e <_malloc_usable_size_r>:
    350e:	f851 0c04 	ldr.w	r0, [r1, #-4]
    3512:	2800      	cmp	r0, #0
    3514:	f1a0 0004 	sub.w	r0, r0, #4
    3518:	bfbc      	itt	lt
    351a:	580b      	ldrlt	r3, [r1, r0]
    351c:	18c0      	addlt	r0, r0, r3
    351e:	4770      	bx	lr
    3520:	682f2e2e 	.word	0x682f2e2e
    3524:	732f6c61 	.word	0x732f6c61
    3528:	682f6372 	.word	0x682f6372
    352c:	635f6c61 	.word	0x635f6c61
    3530:	615f6e61 	.word	0x615f6e61
    3534:	636e7973 	.word	0x636e7973
    3538:	0000632e 	.word	0x0000632e
    353c:	682f2e2e 	.word	0x682f2e2e
    3540:	732f6c61 	.word	0x732f6c61
    3544:	682f6372 	.word	0x682f6372
    3548:	695f6c61 	.word	0x695f6c61
    354c:	00632e6f 	.word	0x00632e6f
    3550:	682f2e2e 	.word	0x682f2e2e
    3554:	732f6c61 	.word	0x732f6c61
    3558:	682f6372 	.word	0x682f6372
    355c:	755f6c61 	.word	0x755f6c61
    3560:	74726173 	.word	0x74726173
    3564:	6e79735f 	.word	0x6e79735f
    3568:	00632e63 	.word	0x00632e63
    356c:	03020100 	.word	0x03020100
    3570:	07060504 	.word	0x07060504
    3574:	14100c08 	.word	0x14100c08
    3578:	40302018 	.word	0x40302018
    357c:	40003000 	.word	0x40003000
    3580:	40003400 	.word	0x40003400
    3584:	41012000 	.word	0x41012000
    3588:	41014000 	.word	0x41014000
    358c:	43000000 	.word	0x43000000
    3590:	43000400 	.word	0x43000400
    3594:	43000800 	.word	0x43000800
    3598:	43000c00 	.word	0x43000c00

0000359c <_i2cms>:
	...
    35b4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    35c4:	65735f6c 6d6f6372 0000632e 41432020     l_sercom.c..  CA
    35d4:	7254204e 6d736e61 69737369 64206e6f     N Transmission d
    35e4:	20656e6f 0000000d 43200d0a 4d204e41     one ...... CAN M
    35f4:	61737365 72206567 69656365 20646576     essage received 
    3604:	6854202e 65722065 76696563 64206465     . The received d
    3614:	20617461 203a7369 0000000d 64252020     ata is: ....  %d
    3624:	00000000 756e654d 0a0d3a20 2d2d2020     ....Menu :..  --
    3634:	6c655320 20746365 20656874 69746361      Select the acti
    3644:	0d3a6e6f 3020200a 6553203a 74732074     on:..  0: Set st
    3654:	61646e61 66206472 65746c69 44492072     andard filter ID
    3664:	203a3020 35347830 73202c41 65726f74      0: 0x45A, store
    3674:	746e6920 7852206f 66756220 2e726566      into Rx buffer.
    3684:	200a0d20 203a3120 20746553 6e617473      ..  1: Set stan
    3694:	64726164 6c696620 20726574 31204449     dard filter ID 1
    36a4:	7830203a 2c393634 6f747320 69206572     : 0x469, store i
    36b4:	206f746e 46207852 204f4649 0d202e30     nto Rx FIFO 0. .
    36c4:	3220200a 6553203a 4620646e 74732044     .  2: Send FD st
    36d4:	61646e61 6d206472 61737365 77206567     andard message w
    36e4:	20687469 203a4449 35347830 6e612041     ith ID: 0x45A an
    36f4:	34362064 74796220 61642065 30206174     d 64 byte data 0
    3704:	206f7420 202e3336 20200a0d 53203a33      to 63. ..  3: S
    3714:	20646e65 73204446 646e6174 20647261     end FD standard 
    3724:	7373656d 20656761 68746977 3a444920     message with ID:
    3734:	34783020 61203936 3620646e 79622034      0x469 and 64 by
    3744:	64206574 20617461 20383231 31206f74     te data 128 to 1
    3754:	202e3139 20200a0d 53203a34 65207465     91. ..  4: Set e
    3764:	6e657478 20646564 746c6966 49207265     xtended filter I
    3774:	3a302044 31783020 30303030 2c354130     D 0: 0x100000A5,
    3784:	6f747320 69206572 206f746e 62207852      store into Rx b
    3794:	65666675 0d202e72 3520200a 6553203a     uffer. ..  5: Se
    37a4:	78652074 646e6574 66206465 65746c69     t extended filte
    37b4:	44492072 203a3120 30317830 30303030     r ID 1: 0x100000
    37c4:	202c3639 726f7473 6e692065 52206f74     96, store into R
    37d4:	49462078 31204f46 0a0d202e 3a362020     x FIFO 1. ..  6:
    37e4:	6e655320 44462064 74786520 65646e65      Send FD extende
    37f4:	656d2064 67617373 69772065 49206874     d message with I
    3804:	30203a44 30303178 41303030 6e612035     D: 0x100000A5 an
    3814:	34362064 74796220 61642065 30206174     d 64 byte data 0
    3824:	206f7420 202e3336 20200a0d 53203a37      to 63. ..  7: S
    3834:	20646e65 65204446 6e657478 20646564     end FD extended 
    3844:	7373656d 20656761 68746977 3a444920     message with ID:
    3854:	31783020 30303030 20363930 20646e61      0x10000096 and 
    3864:	62203436 20657479 61746164 38323120     64 byte data 128
    3874:	206f7420 2e313931 200a0d20 203a6120      to 191. ..  a: 
    3884:	646e6553 726f6e20 206c616d 6e617473     Send normal stan
    3894:	64726164 73656d20 65676173 74697720     dard message wit
    38a4:	44492068 7830203a 20393634 20646e61     h ID: 0x469 and 
    38b4:	79622038 64206574 20617461 6f742030     8 byte data 0 to
    38c4:	202e3720 20200a0d 44203a68 6c707369      7. ..  h: Displ
    38d4:	6d207961 20756e65 000d0a0d 00006325     ay menu ....%c..
    38e4:	3a302020 74655320 61747320 7261646e       0: Set standar
    38f4:	69662064 7265746c 20444920 30203a30     d filter ID 0: 0
    3904:	41353478 7473202c 2065726f 6f746e69     x45A, store into
    3914:	20785220 66667562 202e7265 0000000d      Rx buffer. ....
    3924:	3a312020 74655320 61747320 7261646e       1: Set standar
    3934:	69662064 7265746c 20444920 30203a31     d filter ID 1: 0
    3944:	39363478 7473202c 2065726f 6f746e69     x469, store into
    3954:	20785220 4f464946 202e3020 0000000d      Rx FIFO 0. ....
    3964:	3a322020 6e655320 74732064 61646e61       2: Send standa
    3974:	6d206472 61737365 77206567 20687469     rd message with 
    3984:	203a4449 35347830 6e612041 34362064     ID: 0x45A and 64
    3994:	74796220 61642065 30206174 206f7420      byte data 0 to 
    39a4:	202e3336 0000000d 3a332020 6e655320     63. ....  3: Sen
    39b4:	74732064 61646e61 6d206472 61737365     d standard messa
    39c4:	77206567 20687469 203a4449 36347830     ge with ID: 0x46
    39d4:	6e612039 34362064 74796220 61642065     9 and 64 byte da
    39e4:	31206174 74203832 3931206f 0d202e31     ta 128 to 191. .
    39f4:	00000000 3a342020 74655320 74786520     ....  4: Set ext
    3a04:	65646e65 69662064 7265746c 20444920     ended filter ID 
    3a14:	30203a30 30303178 41303030 73202c35     0: 0x100000A5, s
    3a24:	65726f74 746e6920 7852206f 66756220     tore into Rx buf
    3a34:	2e726566 00000d20 3a352020 74655320     fer. ...  5: Set
    3a44:	74786520 65646e65 69662064 7265746c      extended filter
    3a54:	20444920 30203a31 30303178 39303030      ID 1: 0x1000009
    3a64:	73202c36 65726f74 746e6920 7852206f     6, store into Rx
    3a74:	46494620 2e31204f 00000d20 3a362020      FIFO 1. ...  6:
    3a84:	6e655320 78652064 646e6574 6d206465      Send extended m
    3a94:	61737365 77206567 20687469 203a4449     essage with ID: 
    3aa4:	30317830 30303030 61203541 3620646e     0x100000A5 and 6
    3ab4:	79622034 64206574 20617461 6f742030     4 byte data 0 to
    3ac4:	2e333620 00000d20 3a372020 6e655320      63. ...  7: Sen
    3ad4:	78652064 646e6574 6d206465 61737365     d extended messa
    3ae4:	77206567 20687469 203a4449 30317830     ge with ID: 0x10
    3af4:	30303030 61203639 3620646e 79622034     000096 and 64 by
    3b04:	64206574 20617461 20383231 31206f74     te data 128 to 1
    3b14:	202e3139 0000000d 3a612020 6e655320     91. ....  a: Sen
    3b24:	6f6e2064 6c616d72 61747320 7261646e     d normal standar
    3b34:	656d2064 67617373 69772065 49206874     d message with I
    3b44:	30203a44 39363478 646e6120 62203820     D: 0x469 and 8 b
    3b54:	20657479 61746164 74203020 2e37206f     yte data 0 to 7.
    3b64:	00000d20                                 ...

00003b68 <_global_impure_ptr>:
    3b68:	2000002c                                ,.. 

00003b6c <__sf_fake_stderr>:
	...

00003b8c <__sf_fake_stdin>:
	...

00003bac <__sf_fake_stdout>:
	...
    3bcc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3bdc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3bec:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3bfc:	00006665 00003c1e 00003c21 00003c24     ef...<..!<..$<..
    3c0c:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    3c1c:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    3c2c:	2e005849 20200000                                IX...

00003c31 <_ctype_>:
    3c31:	20202000 20202020 28282020 20282828     .         ((((( 
    3c41:	20202020 20202020 20202020 20202020                     
    3c51:	10108820 10101010 10101010 10101010      ...............
    3c61:	04040410 04040404 10040404 10101010     ................
    3c71:	41411010 41414141 01010101 01010101     ..AAAAAA........
    3c81:	01010101 01010101 01010101 10101010     ................
    3c91:	42421010 42424242 02020202 02020202     ..BBBBBB........
    3ca1:	02020202 02020202 02020202 10101010     ................
    3cb1:	00000020 00000000 00000000 00000000      ...............
	...

00003d34 <_init>:
    3d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d36:	bf00      	nop
    3d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d3a:	bc08      	pop	{r3}
    3d3c:	469e      	mov	lr, r3
    3d3e:	4770      	bx	lr

00003d40 <__init_array_start>:
    3d40:	00000289 	.word	0x00000289

00003d44 <_fini>:
    3d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d46:	bf00      	nop
    3d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d4a:	bc08      	pop	{r3}
    3d4c:	469e      	mov	lr, r3
    3d4e:	4770      	bx	lr

00003d50 <__fini_array_start>:
    3d50:	00000265 	.word	0x00000265
