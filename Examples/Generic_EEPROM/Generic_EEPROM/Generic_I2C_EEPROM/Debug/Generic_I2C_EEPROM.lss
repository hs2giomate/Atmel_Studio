
Generic_I2C_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003608  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00003608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d24  200000a0  000036a8  000200a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   0005ff9e  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006de1  00000000  00000000  000800bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00008564  00000000  00000000  00086ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000a30  00000000  00000000  0008f404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001610  00000000  00000000  0008fe34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001dad3  00000000  00000000  00091444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ef9e  00000000  00000000  000aef17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00082077  00000000  00000000  000bdeb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001ad4  00000000  00000000  0013ff2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 39 02 00 00 21 02 00 00 21 02 00 00     ... 9...!...!...
	...
      2c:	21 02 00 00 00 00 00 00 00 00 00 00 21 02 00 00     !...........!...
      3c:	8d 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     ....!...!...!...
      4c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      5c:	25 02 00 00 21 02 00 00 d5 22 00 00 21 02 00 00     %...!...."..!...
      6c:	21 02 00 00 ad 22 00 00 21 02 00 00 e5 22 00 00     !...."..!...."..
      7c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      8c:	21 02 00 00 00 00 00 00 21 02 00 00 21 02 00 00     !.......!...!...
      9c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      ac:	21 02 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
      d8:	00003604 	.word	0x00003604

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
     108:	00003604 	.word	0x00003604
     10c:	20000098 	.word	0x20000098
     110:	00000000 	.word	0x00000000

00000114 <loop>:
  }
}

void loop(void) {

}
     114:	4770      	bx	lr
	...

00000118 <_GLOBAL__sub_I_i2ceeprom>:
     118:	b510      	push	{r4, lr}
Adafruit_EEPROM_I2C i2ceeprom;
     11a:	4802      	ldr	r0, [pc, #8]	; (124 <_GLOBAL__sub_I_i2ceeprom+0xc>)
     11c:	f001 fea0 	bl	1e60 <_ZN19Adafruit_EEPROM_I2CC1Ev>
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	200000bc 	.word	0x200000bc

00000128 <setup>:
void setup(void) {
     128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Serial.begin(115200);
     12a:	21e1      	movs	r1, #225	; 0xe1
     12c:	4c31      	ldr	r4, [pc, #196]	; (1f4 <setup+0xcc>)
     12e:	0249      	lsls	r1, r1, #9
     130:	0020      	movs	r0, r4
     132:	f000 fad1 	bl	6d8 <_ZN4Uart5beginEm>
  if (i2ceeprom.begin(0x50)) {  // you can stick the new i2c addr in here, e.g. begin(0x51);
     136:	4e30      	ldr	r6, [pc, #192]	; (1f8 <setup+0xd0>)
     138:	4a30      	ldr	r2, [pc, #192]	; (1fc <setup+0xd4>)
     13a:	2150      	movs	r1, #80	; 0x50
     13c:	0030      	movs	r0, r6
     13e:	f001 fe90 	bl	1e62 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>
     142:	2800      	cmp	r0, #0
     144:	d04c      	beq.n	1e0 <setup+0xb8>
    Serial.println("Found I2C EEPROM");
     146:	492e      	ldr	r1, [pc, #184]	; (200 <setup+0xd8>)
     148:	0020      	movs	r0, r4
     14a:	f000 f95b 	bl	404 <_ZN5Print7printlnEPKc>
  uint8_t test = i2ceeprom.read8(0x0);
     14e:	2100      	movs	r1, #0
     150:	0030      	movs	r0, r6
     152:	f001 febe 	bl	1ed2 <_ZN19Adafruit_EEPROM_I2C5read8Et>
     156:	0005      	movs	r5, r0
  Serial.print("Restarted "); Serial.print(test); Serial.println(" times");
     158:	492a      	ldr	r1, [pc, #168]	; (204 <setup+0xdc>)
     15a:	0020      	movs	r0, r4
     15c:	f000 f940 	bl	3e0 <_ZN5Print5printEPKc>
     160:	220a      	movs	r2, #10
     162:	0029      	movs	r1, r5
     164:	0020      	movs	r0, r4
     166:	f000 f9b2 	bl	4ce <_ZN5Print5printEhi>
  i2ceeprom.write8(0x0, test+1);
     16a:	3501      	adds	r5, #1
  Serial.print("Restarted "); Serial.print(test); Serial.println(" times");
     16c:	4926      	ldr	r1, [pc, #152]	; (208 <setup+0xe0>)
     16e:	0020      	movs	r0, r4
     170:	f000 f948 	bl	404 <_ZN5Print7printlnEPKc>
  i2ceeprom.write8(0x0, test+1);
     174:	b2ea      	uxtb	r2, r5
     176:	2100      	movs	r1, #0
     178:	0030      	movs	r0, r6
     17a:	f001 fe84 	bl	1e86 <_ZN19Adafruit_EEPROM_I2C6write8Eth>
     17e:	2500      	movs	r5, #0
  for (uint16_t addr = 0; addr < 256; addr++) {
     180:	2380      	movs	r3, #128	; 0x80
     182:	b2af      	uxth	r7, r5
     184:	005b      	lsls	r3, r3, #1
     186:	429d      	cmp	r5, r3
     188:	d032      	beq.n	1f0 <setup+0xc8>
    val = i2ceeprom.read8(addr);
     18a:	0039      	movs	r1, r7
     18c:	0030      	movs	r0, r6
     18e:	f001 fea0 	bl	1ed2 <_ZN19Adafruit_EEPROM_I2C5read8Et>
    if ((addr % 32) == 0) {
     192:	231f      	movs	r3, #31
    val = i2ceeprom.read8(addr);
     194:	9001      	str	r0, [sp, #4]
    if ((addr % 32) == 0) {
     196:	421f      	tst	r7, r3
     198:	d10c      	bne.n	1b4 <setup+0x8c>
      Serial.print("\n 0x"); Serial.print(addr, HEX); Serial.print(": ");
     19a:	491c      	ldr	r1, [pc, #112]	; (20c <setup+0xe4>)
     19c:	0020      	movs	r0, r4
     19e:	f000 f91f 	bl	3e0 <_ZN5Print5printEPKc>
     1a2:	0029      	movs	r1, r5
     1a4:	2210      	movs	r2, #16
     1a6:	0020      	movs	r0, r4
     1a8:	f000 f981 	bl	4ae <_ZN5Print5printEii>
     1ac:	4918      	ldr	r1, [pc, #96]	; (210 <setup+0xe8>)
     1ae:	0020      	movs	r0, r4
     1b0:	f000 f916 	bl	3e0 <_ZN5Print5printEPKc>
    Serial.print("0x"); 
     1b4:	4917      	ldr	r1, [pc, #92]	; (214 <setup+0xec>)
     1b6:	0020      	movs	r0, r4
     1b8:	f000 f912 	bl	3e0 <_ZN5Print5printEPKc>
    if (val < 0x10) 
     1bc:	9b01      	ldr	r3, [sp, #4]
     1be:	2b0f      	cmp	r3, #15
     1c0:	dc03      	bgt.n	1ca <setup+0xa2>
      Serial.print('0');
     1c2:	2130      	movs	r1, #48	; 0x30
     1c4:	0020      	movs	r0, r4
     1c6:	f000 f90f 	bl	3e8 <_ZN5Print5printEc>
    Serial.print(val, HEX); Serial.print(" ");
     1ca:	2210      	movs	r2, #16
     1cc:	9901      	ldr	r1, [sp, #4]
     1ce:	0020      	movs	r0, r4
     1d0:	f000 f97d 	bl	4ce <_ZN5Print5printEhi>
     1d4:	4910      	ldr	r1, [pc, #64]	; (218 <setup+0xf0>)
     1d6:	0020      	movs	r0, r4
     1d8:	f000 f902 	bl	3e0 <_ZN5Print5printEPKc>
     1dc:	3501      	adds	r5, #1
  for (uint16_t addr = 0; addr < 256; addr++) {
     1de:	e7cf      	b.n	180 <setup+0x58>
    Serial.println("I2C EEPROM not identified ... check your connections?\r\n");
     1e0:	490e      	ldr	r1, [pc, #56]	; (21c <setup+0xf4>)
     1e2:	0020      	movs	r0, r4
     1e4:	f000 f90e 	bl	404 <_ZN5Print7printlnEPKc>
    while (1) delay(10);
     1e8:	200a      	movs	r0, #10
     1ea:	f000 f88d 	bl	308 <delay>
     1ee:	e7fb      	b.n	1e8 <setup+0xc0>
}
     1f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	200008e4 	.word	0x200008e4
     1f8:	200000bc 	.word	0x200000bc
     1fc:	200006b0 	.word	0x200006b0
     200:	0000304c 	.word	0x0000304c
     204:	0000305d 	.word	0x0000305d
     208:	00003068 	.word	0x00003068
     20c:	000030a7 	.word	0x000030a7
     210:	000030ac 	.word	0x000030ac
     214:	000030a9 	.word	0x000030a9
     218:	000030ad 	.word	0x000030ad
     21c:	0000306f 	.word	0x0000306f

00000220 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     220:	be03      	bkpt	0x0003
     222:	e7fe      	b.n	222 <Dummy_Handler+0x2>

00000224 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     224:	4b03      	ldr	r3, [pc, #12]	; (234 <USB_Handler+0x10>)
{
     226:	b510      	push	{r4, lr}
  if (usb_isr)
     228:	681b      	ldr	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d000      	beq.n	230 <USB_Handler+0xc>
    usb_isr();
     22e:	4798      	blx	r3
}
     230:	bd10      	pop	{r4, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	200000c4 	.word	0x200000c4

00000238 <Reset_Handler>:
{
     238:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     23a:	490f      	ldr	r1, [pc, #60]	; (278 <Reset_Handler+0x40>)
     23c:	4c0f      	ldr	r4, [pc, #60]	; (27c <Reset_Handler+0x44>)
     23e:	42a1      	cmp	r1, r4
     240:	d104      	bne.n	24c <Reset_Handler+0x14>
  SystemInit();
     242:	f000 f997 	bl	574 <SystemInit>
  main();
     246:	f000 f887 	bl	358 <main>
     24a:	e7fe      	b.n	24a <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     24c:	4d0c      	ldr	r5, [pc, #48]	; (280 <Reset_Handler+0x48>)
     24e:	2300      	movs	r3, #0
     250:	428d      	cmp	r5, r1
     252:	d0f6      	beq.n	242 <Reset_Handler+0xa>
     254:	18ca      	adds	r2, r1, r3
     256:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     258:	42a2      	cmp	r2, r4
     25a:	d305      	bcc.n	268 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     25c:	4290      	cmp	r0, r2
     25e:	d0f0      	beq.n	242 <Reset_Handler+0xa>
     260:	4b08      	ldr	r3, [pc, #32]	; (284 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     262:	4909      	ldr	r1, [pc, #36]	; (288 <Reset_Handler+0x50>)
      *pDest = 0;
     264:	2200      	movs	r2, #0
     266:	e004      	b.n	272 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     268:	6800      	ldr	r0, [r0, #0]
     26a:	3304      	adds	r3, #4
     26c:	6010      	str	r0, [r2, #0]
     26e:	e7f1      	b.n	254 <Reset_Handler+0x1c>
      *pDest = 0;
     270:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     272:	428b      	cmp	r3, r1
     274:	d3fc      	bcc.n	270 <Reset_Handler+0x38>
     276:	e7e4      	b.n	242 <Reset_Handler+0xa>
     278:	20000000 	.word	0x20000000
     27c:	200000a0 	.word	0x200000a0
     280:	00003608 	.word	0x00003608
     284:	200000a0 	.word	0x200000a0
     288:	20000dc4 	.word	0x20000dc4

0000028c <SysTick_Handler>:
{
     28c:	b510      	push	{r4, lr}
  if (sysTickHook())
     28e:	f000 f860 	bl	352 <sysTickHook>
     292:	2800      	cmp	r0, #0
     294:	d101      	bne.n	29a <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     296:	f000 f851 	bl	33c <SysTick_DefaultHandler>
}
     29a:	bd10      	pop	{r4, pc}

0000029c <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <USB_SetHandler+0x8>)
     29e:	6018      	str	r0, [r3, #0]
}
     2a0:	4770      	bx	lr
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	200000c4 	.word	0x200000c4

000002a8 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     2aa:	4813      	ldr	r0, [pc, #76]	; (2f8 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2ac:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     2ae:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     2b0:	4912      	ldr	r1, [pc, #72]	; (2fc <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2b2:	4c13      	ldr	r4, [pc, #76]	; (300 <micros+0x58>)
  ticks2  = SysTick->VAL;
     2b4:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2b6:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     2b8:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2ba:	0e9b      	lsrs	r3, r3, #26
     2bc:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2be:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     2c0:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2c2:	6862      	ldr	r2, [r4, #4]
     2c4:	9f01      	ldr	r7, [sp, #4]
     2c6:	0e92      	lsrs	r2, r2, #26
     2c8:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     2ca:	4667      	mov	r7, ip
     2cc:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     2ce:	4293      	cmp	r3, r2
     2d0:	d10e      	bne.n	2f0 <micros+0x48>
     2d2:	42bd      	cmp	r5, r7
     2d4:	d10c      	bne.n	2f0 <micros+0x48>
     2d6:	4286      	cmp	r6, r0
     2d8:	d30a      	bcc.n	2f0 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     2da:	195b      	adds	r3, r3, r5
     2dc:	25fa      	movs	r5, #250	; 0xfa
     2de:	6848      	ldr	r0, [r1, #4]
     2e0:	00ad      	lsls	r5, r5, #2
     2e2:	1b86      	subs	r6, r0, r6
     2e4:	4807      	ldr	r0, [pc, #28]	; (304 <micros+0x5c>)
     2e6:	436b      	muls	r3, r5
     2e8:	4370      	muls	r0, r6
     2ea:	0d00      	lsrs	r0, r0, #20
     2ec:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     2ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     2f0:	003d      	movs	r5, r7
     2f2:	0013      	movs	r3, r2
     2f4:	0006      	movs	r6, r0
     2f6:	e7e3      	b.n	2c0 <micros+0x18>
     2f8:	200000c8 	.word	0x200000c8
     2fc:	e000e010 	.word	0xe000e010
     300:	e000ed00 	.word	0xe000ed00
     304:	00005555 	.word	0x00005555

00000308 <delay>:

void delay( unsigned long ms )
{
     308:	b570      	push	{r4, r5, r6, lr}
     30a:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     30c:	d010      	beq.n	330 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     30e:	f7ff ffcb 	bl	2a8 <micros>
     312:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     314:	f000 f81c 	bl	350 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     318:	f7ff ffc6 	bl	2a8 <micros>
     31c:	4b05      	ldr	r3, [pc, #20]	; (334 <delay+0x2c>)
     31e:	1b40      	subs	r0, r0, r5
     320:	4298      	cmp	r0, r3
     322:	d9f7      	bls.n	314 <delay+0xc>
    {
      ms--;
      start += 1000;
     324:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     326:	3c01      	subs	r4, #1
      start += 1000;
     328:	009b      	lsls	r3, r3, #2
     32a:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     32c:	2c00      	cmp	r4, #0
     32e:	d1f3      	bne.n	318 <delay+0x10>
    }
  }
}
     330:	bd70      	pop	{r4, r5, r6, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	000003e7 	.word	0x000003e7

00000338 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     338:	4770      	bx	lr
	...

0000033c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     33c:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     33e:	4a03      	ldr	r2, [pc, #12]	; (34c <SysTick_DefaultHandler+0x10>)
     340:	6813      	ldr	r3, [r2, #0]
     342:	3301      	adds	r3, #1
     344:	6013      	str	r3, [r2, #0]
  tickReset();
     346:	f000 f8d9 	bl	4fc <tickReset>
}
     34a:	bd10      	pop	{r4, pc}
     34c:	200000c8 	.word	0x200000c8

00000350 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     350:	4770      	bx	lr

00000352 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     352:	2000      	movs	r0, #0
     354:	4770      	bx	lr

00000356 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     356:	4770      	bx	lr

00000358 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     358:	b510      	push	{r4, lr}
  init();
     35a:	f001 fbfb 	bl	1b54 <init>

  __libc_init_array();
     35e:	f002 fd4d 	bl	2dfc <__libc_init_array>

  initVariant();
     362:	f7ff fff8 	bl	356 <_Z11initVariantv>

  delay(1);
     366:	2001      	movs	r0, #1
     368:	f7ff ffce 	bl	308 <delay>
#if defined(USBCON)
  USBDevice.init();
     36c:	4c08      	ldr	r4, [pc, #32]	; (390 <main+0x38>)
     36e:	0020      	movs	r0, r4
     370:	f000 fe48 	bl	1004 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     374:	0020      	movs	r0, r4
     376:	f000 fef9 	bl	116c <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     37a:	f7ff fed5 	bl	128 <setup>

  for (;;)
  {
    loop();
     37e:	f7ff fec9 	bl	114 <loop>
    if (serialEventRun) serialEventRun();
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <main+0x3c>)
     384:	2b00      	cmp	r3, #0
     386:	d0fa      	beq.n	37e <main+0x26>
     388:	e000      	b.n	38c <main+0x34>
     38a:	bf00      	nop
     38c:	e7f7      	b.n	37e <main+0x26>
     38e:	46c0      	nop			; (mov r8, r8)
     390:	200000f4 	.word	0x200000f4
     394:	00000000 	.word	0x00000000

00000398 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     398:	2000      	movs	r0, #0
     39a:	4770      	bx	lr

0000039c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     39c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     39e:	0006      	movs	r6, r0
     3a0:	000d      	movs	r5, r1
     3a2:	000c      	movs	r4, r1
     3a4:	188b      	adds	r3, r1, r2
     3a6:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     3a8:	9b01      	ldr	r3, [sp, #4]
     3aa:	1b67      	subs	r7, r4, r5
     3ac:	429c      	cmp	r4, r3
     3ae:	d007      	beq.n	3c0 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     3b0:	6833      	ldr	r3, [r6, #0]
     3b2:	7821      	ldrb	r1, [r4, #0]
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	0030      	movs	r0, r6
     3b8:	4798      	blx	r3
     3ba:	3401      	adds	r4, #1
     3bc:	2800      	cmp	r0, #0
     3be:	d1f3      	bne.n	3a8 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     3c0:	0038      	movs	r0, r7
     3c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000003c4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
     3c4:	b570      	push	{r4, r5, r6, lr}
     3c6:	0005      	movs	r5, r0
     3c8:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     3ca:	1e08      	subs	r0, r1, #0
     3cc:	d007      	beq.n	3de <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     3ce:	f002 fe19 	bl	3004 <strlen>
     3d2:	682b      	ldr	r3, [r5, #0]
     3d4:	0002      	movs	r2, r0
     3d6:	685b      	ldr	r3, [r3, #4]
     3d8:	0021      	movs	r1, r4
     3da:	0028      	movs	r0, r5
     3dc:	4798      	blx	r3
    }
     3de:	bd70      	pop	{r4, r5, r6, pc}

000003e0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     3e0:	b510      	push	{r4, lr}
  return write(str);
     3e2:	f7ff ffef 	bl	3c4 <_ZN5Print5writeEPKc>
}
     3e6:	bd10      	pop	{r4, pc}

000003e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     3e8:	b510      	push	{r4, lr}
  return write(c);
     3ea:	6803      	ldr	r3, [r0, #0]
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	4798      	blx	r3
}
     3f0:	bd10      	pop	{r4, pc}
	...

000003f4 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     3f4:	b510      	push	{r4, lr}
  return write("\r\n");
     3f6:	4902      	ldr	r1, [pc, #8]	; (400 <_ZN5Print7printlnEv+0xc>)
     3f8:	f7ff ffe4 	bl	3c4 <_ZN5Print5writeEPKc>
}
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	000030a4 	.word	0x000030a4

00000404 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     404:	b570      	push	{r4, r5, r6, lr}
     406:	0004      	movs	r4, r0
  return write(str);
     408:	f7ff ffdc 	bl	3c4 <_ZN5Print5writeEPKc>
     40c:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
     40e:	0020      	movs	r0, r4
     410:	f7ff fff0 	bl	3f4 <_ZN5Print7printlnEv>
     414:	1940      	adds	r0, r0, r5
  return n;
}
     416:	bd70      	pop	{r4, r5, r6, pc}

00000418 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     41c:	2200      	movs	r2, #0
{
     41e:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
     420:	ab02      	add	r3, sp, #8
     422:	3305      	adds	r3, #5
{
     424:	9001      	str	r0, [sp, #4]
     426:	000d      	movs	r5, r1
  *str = '\0';
     428:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     42a:	2e01      	cmp	r6, #1
     42c:	dc00      	bgt.n	430 <_ZN5Print11printNumberEmh+0x18>
     42e:	260a      	movs	r6, #10
     430:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
     432:	0028      	movs	r0, r5
     434:	0031      	movs	r1, r6
     436:	f002 fcdb 	bl	2df0 <__aeabi_uidivmod>
     43a:	000f      	movs	r7, r1
     43c:	b2cb      	uxtb	r3, r1
    n /= base;
     43e:	0028      	movs	r0, r5
     440:	0031      	movs	r1, r6
    char c = n % base;
     442:	9300      	str	r3, [sp, #0]
    n /= base;
     444:	f002 fc4e 	bl	2ce4 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     448:	b2fb      	uxtb	r3, r7
     44a:	3337      	adds	r3, #55	; 0x37
    n /= base;
     44c:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     44e:	3c01      	subs	r4, #1
     450:	b2db      	uxtb	r3, r3
     452:	2f09      	cmp	r7, #9
     454:	d802      	bhi.n	45c <_ZN5Print11printNumberEmh+0x44>
     456:	9b00      	ldr	r3, [sp, #0]
     458:	3330      	adds	r3, #48	; 0x30
     45a:	b2db      	uxtb	r3, r3
     45c:	7023      	strb	r3, [r4, #0]
  } while(n);
     45e:	2d00      	cmp	r5, #0
     460:	d1e7      	bne.n	432 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
     462:	0021      	movs	r1, r4
     464:	9801      	ldr	r0, [sp, #4]
     466:	f7ff ffad 	bl	3c4 <_ZN5Print5writeEPKc>
}
     46a:	b00d      	add	sp, #52	; 0x34
     46c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000046e <_ZN5Print5printEli>:
{
     46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     470:	0006      	movs	r6, r0
     472:	000c      	movs	r4, r1
     474:	1e15      	subs	r5, r2, #0
  if (base == 0) {
     476:	d104      	bne.n	482 <_ZN5Print5printEli+0x14>
    return write(n);
     478:	6803      	ldr	r3, [r0, #0]
     47a:	b2c9      	uxtb	r1, r1
     47c:	681b      	ldr	r3, [r3, #0]
     47e:	4798      	blx	r3
}
     480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber(n, base);
     482:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
     484:	2d0a      	cmp	r5, #10
     486:	d10d      	bne.n	4a4 <_ZN5Print5printEli+0x36>
    return printNumber(n, 10);
     488:	002a      	movs	r2, r5
    if (n < 0) {
     48a:	2900      	cmp	r1, #0
     48c:	da0a      	bge.n	4a4 <_ZN5Print5printEli+0x36>
      int t = print('-');
     48e:	212d      	movs	r1, #45	; 0x2d
     490:	f7ff ffaa 	bl	3e8 <_ZN5Print5printEc>
      n = -n;
     494:	4261      	negs	r1, r4
      int t = print('-');
     496:	0007      	movs	r7, r0
      return printNumber(n, 10) + t;
     498:	002a      	movs	r2, r5
     49a:	0030      	movs	r0, r6
     49c:	f7ff ffbc 	bl	418 <_ZN5Print11printNumberEmh>
     4a0:	1838      	adds	r0, r7, r0
     4a2:	e7ed      	b.n	480 <_ZN5Print5printEli+0x12>
    return printNumber(n, base);
     4a4:	0021      	movs	r1, r4
     4a6:	0030      	movs	r0, r6
     4a8:	f7ff ffb6 	bl	418 <_ZN5Print11printNumberEmh>
     4ac:	e7e8      	b.n	480 <_ZN5Print5printEli+0x12>

000004ae <_ZN5Print5printEii>:
{
     4ae:	b510      	push	{r4, lr}
  return print((long) n, base);
     4b0:	f7ff ffdd 	bl	46e <_ZN5Print5printEli>
}
     4b4:	bd10      	pop	{r4, pc}

000004b6 <_ZN5Print5printEmi>:
{
     4b6:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     4b8:	2a00      	cmp	r2, #0
     4ba:	d104      	bne.n	4c6 <_ZN5Print5printEmi+0x10>
     4bc:	6803      	ldr	r3, [r0, #0]
     4be:	b2c9      	uxtb	r1, r1
     4c0:	681b      	ldr	r3, [r3, #0]
     4c2:	4798      	blx	r3
}
     4c4:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
     4c6:	b2d2      	uxtb	r2, r2
     4c8:	f7ff ffa6 	bl	418 <_ZN5Print11printNumberEmh>
     4cc:	e7fa      	b.n	4c4 <_ZN5Print5printEmi+0xe>

000004ce <_ZN5Print5printEhi>:
{
     4ce:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
     4d0:	f7ff fff1 	bl	4b6 <_ZN5Print5printEmi>
}
     4d4:	bd10      	pop	{r4, pc}
	...

000004d8 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     4d8:	b510      	push	{r4, lr}
     4da:	0004      	movs	r4, r0
	resetExternalChip();
     4dc:	f7ff ff2c 	bl	338 <resetExternalChip>
	ticks = _ticks;
     4e0:	4b01      	ldr	r3, [pc, #4]	; (4e8 <initiateReset+0x10>)
     4e2:	601c      	str	r4, [r3, #0]
}
     4e4:	bd10      	pop	{r4, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	20000000 	.word	0x20000000

000004ec <cancelReset>:

void cancelReset() {
	ticks = -1;
     4ec:	2201      	movs	r2, #1
     4ee:	4b02      	ldr	r3, [pc, #8]	; (4f8 <cancelReset+0xc>)
     4f0:	4252      	negs	r2, r2
     4f2:	601a      	str	r2, [r3, #0]
}
     4f4:	4770      	bx	lr
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	20000000 	.word	0x20000000

000004fc <tickReset>:

void tickReset() {
	if (ticks == -1)
     4fc:	4a16      	ldr	r2, [pc, #88]	; (558 <tickReset+0x5c>)
void tickReset() {
     4fe:	b510      	push	{r4, lr}
	if (ticks == -1)
     500:	6813      	ldr	r3, [r2, #0]
     502:	1c59      	adds	r1, r3, #1
     504:	d027      	beq.n	556 <tickReset+0x5a>
		return;
	ticks--;
     506:	3b01      	subs	r3, #1
     508:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     50a:	2b00      	cmp	r3, #0
     50c:	d123      	bne.n	556 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     50e:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     510:	4b12      	ldr	r3, [pc, #72]	; (55c <tickReset+0x60>)
     512:	4a13      	ldr	r2, [pc, #76]	; (560 <tickReset+0x64>)
     514:	3304      	adds	r3, #4
     516:	4293      	cmp	r3, r2
     518:	d808      	bhi.n	52c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     51a:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     51e:	4a11      	ldr	r2, [pc, #68]	; (564 <tickReset+0x68>)
     520:	4b11      	ldr	r3, [pc, #68]	; (568 <tickReset+0x6c>)
     522:	60da      	str	r2, [r3, #12]
     524:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     528:	46c0      	nop			; (mov r8, r8)
     52a:	e7fd      	b.n	528 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     52c:	4a0f      	ldr	r2, [pc, #60]	; (56c <tickReset+0x70>)
	while (!nvmReady())
     52e:	2101      	movs	r1, #1
     530:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     532:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     534:	420c      	tst	r4, r1
     536:	d0fc      	beq.n	532 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     538:	2120      	movs	r1, #32
     53a:	8b14      	ldrh	r4, [r2, #24]
     53c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     53e:	089b      	lsrs	r3, r3, #2
     540:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     542:	4321      	orrs	r1, r4
     544:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     546:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     548:	4b09      	ldr	r3, [pc, #36]	; (570 <tickReset+0x74>)
     54a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     54c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     54e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     550:	421a      	tst	r2, r3
     552:	d0fc      	beq.n	54e <tickReset+0x52>
     554:	e7e1      	b.n	51a <tickReset+0x1e>
		banzai();
}
     556:	bd10      	pop	{r4, pc}
     558:	20000000 	.word	0x20000000
     55c:	00000000 	.word	0x00000000
     560:	00000203 	.word	0x00000203
     564:	05fa0004 	.word	0x05fa0004
     568:	e000ed00 	.word	0xe000ed00
     56c:	41004000 	.word	0x41004000
     570:	ffffa502 	.word	0xffffa502

00000574 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     574:	221e      	movs	r2, #30
{
     576:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     578:	4846      	ldr	r0, [pc, #280]	; (694 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     57a:	4947      	ldr	r1, [pc, #284]	; (698 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     57c:	6843      	ldr	r3, [r0, #4]
     57e:	4393      	bics	r3, r2
     580:	3a1c      	subs	r2, #28
     582:	4313      	orrs	r3, r2
     584:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     586:	2308      	movs	r3, #8
     588:	698c      	ldr	r4, [r1, #24]
     58a:	4323      	orrs	r3, r4
     58c:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     58e:	4c43      	ldr	r4, [pc, #268]	; (69c <SystemInit+0x128>)
     590:	4b43      	ldr	r3, [pc, #268]	; (6a0 <SystemInit+0x12c>)
     592:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     594:	8a9c      	ldrh	r4, [r3, #20]
     596:	4314      	orrs	r4, r2
     598:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     59a:	68dc      	ldr	r4, [r3, #12]
     59c:	4214      	tst	r4, r2
     59e:	d0fc      	beq.n	59a <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     5a0:	2401      	movs	r4, #1
     5a2:	4a40      	ldr	r2, [pc, #256]	; (6a4 <SystemInit+0x130>)
     5a4:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     5a6:	7815      	ldrb	r5, [r2, #0]
     5a8:	4225      	tst	r5, r4
     5aa:	d003      	beq.n	5b4 <SystemInit+0x40>
     5ac:	7855      	ldrb	r5, [r2, #1]
     5ae:	b26d      	sxtb	r5, r5
     5b0:	2d00      	cmp	r5, #0
     5b2:	dbf8      	blt.n	5a6 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     5b4:	2401      	movs	r4, #1
     5b6:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     5b8:	7854      	ldrb	r4, [r2, #1]
     5ba:	b264      	sxtb	r4, r4
     5bc:	2c00      	cmp	r4, #0
     5be:	dbfb      	blt.n	5b8 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     5c0:	4c39      	ldr	r4, [pc, #228]	; (6a8 <SystemInit+0x134>)
     5c2:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     5c4:	7854      	ldrb	r4, [r2, #1]
     5c6:	b264      	sxtb	r4, r4
     5c8:	2c00      	cmp	r4, #0
     5ca:	dbfb      	blt.n	5c4 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     5cc:	2482      	movs	r4, #130	; 0x82
     5ce:	01e4      	lsls	r4, r4, #7
     5d0:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     5d2:	7854      	ldrb	r4, [r2, #1]
     5d4:	b264      	sxtb	r4, r4
     5d6:	2c00      	cmp	r4, #0
     5d8:	dbfb      	blt.n	5d2 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     5da:	2402      	movs	r4, #2
     5dc:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     5de:	340e      	adds	r4, #14
     5e0:	68dd      	ldr	r5, [r3, #12]
     5e2:	4225      	tst	r5, r4
     5e4:	d0fc      	beq.n	5e0 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     5e6:	4c31      	ldr	r4, [pc, #196]	; (6ac <SystemInit+0x138>)
     5e8:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     5ea:	2410      	movs	r4, #16
     5ec:	68dd      	ldr	r5, [r3, #12]
     5ee:	4225      	tst	r5, r4
     5f0:	d0fc      	beq.n	5ec <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     5f2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     5f4:	4c2e      	ldr	r4, [pc, #184]	; (6b0 <SystemInit+0x13c>)
     5f6:	432c      	orrs	r4, r5
     5f8:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     5fa:	2410      	movs	r4, #16
     5fc:	68dd      	ldr	r5, [r3, #12]
     5fe:	4225      	tst	r5, r4
     600:	d0fc      	beq.n	5fc <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     602:	2402      	movs	r4, #2
     604:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     606:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     608:	432c      	orrs	r4, r5
     60a:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     60c:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     60e:	68dd      	ldr	r5, [r3, #12]
     610:	4235      	tst	r5, r6
     612:	d0fc      	beq.n	60e <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     614:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     616:	4225      	tst	r5, r4
     618:	d0f9      	beq.n	60e <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     61a:	2410      	movs	r4, #16
     61c:	68dd      	ldr	r5, [r3, #12]
     61e:	4225      	tst	r5, r4
     620:	d0fc      	beq.n	61c <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     622:	2400      	movs	r4, #0
     624:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     626:	7854      	ldrb	r4, [r2, #1]
     628:	b264      	sxtb	r4, r4
     62a:	2c00      	cmp	r4, #0
     62c:	dbfb      	blt.n	626 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     62e:	4c21      	ldr	r4, [pc, #132]	; (6b4 <SystemInit+0x140>)
     630:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     632:	7854      	ldrb	r4, [r2, #1]
     634:	b264      	sxtb	r4, r4
     636:	2c00      	cmp	r4, #0
     638:	dbfb      	blt.n	632 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     63a:	6a1c      	ldr	r4, [r3, #32]
     63c:	4d1e      	ldr	r5, [pc, #120]	; (6b8 <SystemInit+0x144>)
     63e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     640:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     642:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     644:	6a1c      	ldr	r4, [r3, #32]
     646:	43ac      	bics	r4, r5
     648:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     64a:	2303      	movs	r3, #3
     64c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     64e:	4b1b      	ldr	r3, [pc, #108]	; (6bc <SystemInit+0x148>)
     650:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     652:	7853      	ldrb	r3, [r2, #1]
     654:	b25b      	sxtb	r3, r3
     656:	2b00      	cmp	r3, #0
     658:	dbfb      	blt.n	652 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     65a:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     65c:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     65e:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     660:	4a17      	ldr	r2, [pc, #92]	; (6c0 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     662:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     664:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     666:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     668:	4b16      	ldr	r3, [pc, #88]	; (6c4 <SystemInit+0x150>)
     66a:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     66c:	4b16      	ldr	r3, [pc, #88]	; (6c8 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     66e:	4a17      	ldr	r2, [pc, #92]	; (6cc <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     670:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     672:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     674:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     676:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     678:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     67a:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     67c:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     67e:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     680:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     682:	4313      	orrs	r3, r2
     684:	4a12      	ldr	r2, [pc, #72]	; (6d0 <SystemInit+0x15c>)
     686:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     688:	2380      	movs	r3, #128	; 0x80
     68a:	6842      	ldr	r2, [r0, #4]
     68c:	4313      	orrs	r3, r2
     68e:	6043      	str	r3, [r0, #4]
}
     690:	bd70      	pop	{r4, r5, r6, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	41004000 	.word	0x41004000
     698:	40000400 	.word	0x40000400
     69c:	0000060c 	.word	0x0000060c
     6a0:	40000800 	.word	0x40000800
     6a4:	40000c00 	.word	0x40000c00
     6a8:	00010501 	.word	0x00010501
     6ac:	7dff05b9 	.word	0x7dff05b9
     6b0:	00000a04 	.word	0x00000a04
     6b4:	00030700 	.word	0x00030700
     6b8:	fffffcff 	.word	0xfffffcff
     6bc:	00010603 	.word	0x00010603
     6c0:	02dc6c00 	.word	0x02dc6c00
     6c4:	20000004 	.word	0x20000004
     6c8:	00806024 	.word	0x00806024
     6cc:	00806020 	.word	0x00806020
     6d0:	42004000 	.word	0x42004000

000006d4 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
     6d4:	2001      	movs	r0, #1
     6d6:	4770      	bx	lr

000006d8 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
     6d8:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
     6da:	6803      	ldr	r3, [r0, #0]
     6dc:	4a01      	ldr	r2, [pc, #4]	; (6e4 <_ZN4Uart5beginEm+0xc>)
     6de:	6a1b      	ldr	r3, [r3, #32]
     6e0:	4798      	blx	r3
}
     6e2:	bd10      	pop	{r4, pc}
     6e4:	00000413 	.word	0x00000413

000006e8 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
     6e8:	0003      	movs	r3, r0
     6ea:	33fc      	adds	r3, #252	; 0xfc
     6ec:	69d9      	ldr	r1, [r3, #28]
     6ee:	699a      	ldr	r2, [r3, #24]
     6f0:	4291      	cmp	r1, r2
     6f2:	d003      	beq.n	6fc <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
     6f4:	69db      	ldr	r3, [r3, #28]
     6f6:	18c0      	adds	r0, r0, r3
     6f8:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
     6fa:	4770      	bx	lr
    return -1;
     6fc:	2001      	movs	r0, #1
     6fe:	4240      	negs	r0, r0
  return rxBuffer.peek();
     700:	e7fb      	b.n	6fa <_ZN4Uart4peekEv+0x12>

00000702 <_ZN4Uart3endEv>:
{
     702:	b510      	push	{r4, lr}
     704:	0004      	movs	r4, r0
  sercom->resetUART();
     706:	6900      	ldr	r0, [r0, #16]
     708:	f001 fe74 	bl	23f4 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
     70c:	0022      	movs	r2, r4
     70e:	2300      	movs	r3, #0
     710:	32fc      	adds	r2, #252	; 0xfc
     712:	6193      	str	r3, [r2, #24]
  _iTail = 0;
     714:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
     716:	2286      	movs	r2, #134	; 0x86
     718:	0092      	lsls	r2, r2, #2
     71a:	18a4      	adds	r4, r4, r2
     71c:	6063      	str	r3, [r4, #4]
  _iTail = 0;
     71e:	60a3      	str	r3, [r4, #8]
}
     720:	bd10      	pop	{r4, pc}

00000722 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
     722:	20f0      	movs	r0, #240	; 0xf0
     724:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
     726:	3930      	subs	r1, #48	; 0x30
     728:	4248      	negs	r0, r1
     72a:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
     72c:	4770      	bx	lr

0000072e <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
     72e:	23f0      	movs	r3, #240	; 0xf0
     730:	011b      	lsls	r3, r3, #4
     732:	4019      	ands	r1, r3
     734:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
     736:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
     738:	009b      	lsls	r3, r3, #2
     73a:	4299      	cmp	r1, r3
     73c:	d00a      	beq.n	754 <_ZN4Uart15extractCharSizeEt+0x26>
     73e:	3301      	adds	r3, #1
     740:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
     742:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
     744:	4299      	cmp	r1, r3
     746:	d005      	beq.n	754 <_ZN4Uart15extractCharSizeEt+0x26>
     748:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
     74a:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
     74c:	005b      	lsls	r3, r3, #1
     74e:	4299      	cmp	r1, r3
     750:	d000      	beq.n	754 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
     752:	2000      	movs	r0, #0

  }
}
     754:	4770      	bx	lr

00000756 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
     756:	200f      	movs	r0, #15
     758:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
     75a:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
     75c:	2901      	cmp	r1, #1
     75e:	d003      	beq.n	768 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
     760:	3902      	subs	r1, #2
     762:	1e48      	subs	r0, r1, #1
     764:	4181      	sbcs	r1, r0
     766:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
     768:	4770      	bx	lr
	...

0000076c <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     76c:	2389      	movs	r3, #137	; 0x89
{
     76e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     770:	2618      	movs	r6, #24
{
     772:	b085      	sub	sp, #20
     774:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     776:	009b      	lsls	r3, r3, #2
{
     778:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     77a:	5cc0      	ldrb	r0, [r0, r3]
     77c:	0033      	movs	r3, r6
     77e:	2108      	movs	r1, #8
     780:	4343      	muls	r3, r0
     782:	4d32      	ldr	r5, [pc, #200]	; (84c <_ZN4Uart5beginEmt+0xe0>)
{
     784:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     786:	18eb      	adds	r3, r5, r3
     788:	5659      	ldrsb	r1, [r3, r1]
     78a:	f001 fb05 	bl	1d98 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
     78e:	4b30      	ldr	r3, [pc, #192]	; (850 <_ZN4Uart5beginEmt+0xe4>)
     790:	2108      	movs	r1, #8
     792:	5ce0      	ldrb	r0, [r4, r3]
     794:	0033      	movs	r3, r6
     796:	4343      	muls	r3, r0
     798:	18eb      	adds	r3, r5, r3
     79a:	5659      	ldrsb	r1, [r3, r1]
     79c:	f001 fafc 	bl	1d98 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
     7a0:	4b2c      	ldr	r3, [pc, #176]	; (854 <_ZN4Uart5beginEmt+0xe8>)
     7a2:	5ce2      	ldrb	r2, [r4, r3]
     7a4:	9303      	str	r3, [sp, #12]
     7a6:	2a02      	cmp	r2, #2
     7a8:	d109      	bne.n	7be <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
     7aa:	3311      	adds	r3, #17
     7ac:	5ce0      	ldrb	r0, [r4, r3]
     7ae:	28ff      	cmp	r0, #255	; 0xff
     7b0:	d005      	beq.n	7be <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
     7b2:	2108      	movs	r1, #8
     7b4:	4346      	muls	r6, r0
     7b6:	19ae      	adds	r6, r5, r6
     7b8:	5671      	ldrsb	r1, [r6, r1]
     7ba:	f001 faed 	bl	1d98 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
     7be:	268a      	movs	r6, #138	; 0x8a
     7c0:	00b6      	lsls	r6, r6, #2
     7c2:	5da0      	ldrb	r0, [r4, r6]
     7c4:	28ff      	cmp	r0, #255	; 0xff
     7c6:	d019      	beq.n	7fc <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
     7c8:	2101      	movs	r1, #1
     7ca:	f001 fa6d 	bl	1ca8 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     7ce:	2218      	movs	r2, #24
     7d0:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     7d2:	4921      	ldr	r1, [pc, #132]	; (858 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     7d4:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     7d6:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     7d8:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     7da:	01db      	lsls	r3, r3, #7
     7dc:	1858      	adds	r0, r3, r1
     7de:	218b      	movs	r1, #139	; 0x8b
     7e0:	0089      	lsls	r1, r1, #2
     7e2:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     7e4:	491d      	ldr	r1, [pc, #116]	; (85c <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     7e6:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     7e8:	185b      	adds	r3, r3, r1
     7ea:	218c      	movs	r1, #140	; 0x8c
     7ec:	0089      	lsls	r1, r1, #2
     7ee:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     7f0:	6869      	ldr	r1, [r5, #4]
     7f2:	408a      	lsls	r2, r1
     7f4:	218d      	movs	r1, #141	; 0x8d
     7f6:	0089      	lsls	r1, r1, #2
     7f8:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
     7fa:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
     7fc:	2201      	movs	r2, #1
     7fe:	9b02      	ldr	r3, [sp, #8]
     800:	0011      	movs	r1, r2
     802:	6920      	ldr	r0, [r4, #16]
     804:	f001 ff8a 	bl	271c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
     808:	0039      	movs	r1, r7
     80a:	0020      	movs	r0, r4
     80c:	f7ff ff8f 	bl	72e <_ZN4Uart15extractCharSizeEt>
     810:	0039      	movs	r1, r7
     812:	0005      	movs	r5, r0
     814:	0020      	movs	r0, r4
     816:	f7ff ff9e 	bl	756 <_ZN4Uart13extractParityEt>
     81a:	0039      	movs	r1, r7
     81c:	0006      	movs	r6, r0
     81e:	0020      	movs	r0, r4
     820:	f7ff ff7f 	bl	722 <_ZN4Uart16extractNbStopBitEt>
     824:	0033      	movs	r3, r6
     826:	9000      	str	r0, [sp, #0]
     828:	0029      	movs	r1, r5
     82a:	6920      	ldr	r0, [r4, #16]
     82c:	2201      	movs	r2, #1
     82e:	f001 fdb5 	bl	239c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
     832:	4b0b      	ldr	r3, [pc, #44]	; (860 <_ZN4Uart5beginEmt+0xf4>)
     834:	6920      	ldr	r0, [r4, #16]
     836:	5ce2      	ldrb	r2, [r4, r3]
     838:	9b03      	ldr	r3, [sp, #12]
     83a:	5ce1      	ldrb	r1, [r4, r3]
     83c:	f001 fdc8 	bl	23d0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
     840:	6920      	ldr	r0, [r4, #16]
     842:	f001 fde3 	bl	240c <_ZN6SERCOM10enableUARTEv>
}
     846:	b005      	add	sp, #20
     848:	bdf0      	pop	{r4, r5, r6, r7, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	0000315c 	.word	0x0000315c
     850:	00000225 	.word	0x00000225
     854:	00000227 	.word	0x00000227
     858:	41004418 	.word	0x41004418
     85c:	41004414 	.word	0x41004414
     860:	00000226 	.word	0x00000226

00000864 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
     864:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
     866:	b510      	push	{r4, lr}
     868:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
     86a:	0052      	lsls	r2, r2, #1
     86c:	2100      	movs	r1, #0
     86e:	f002 fb06 	bl	2e7e <memset>
  _iHead = 0;
     872:	0023      	movs	r3, r4
     874:	2200      	movs	r2, #0
     876:	33fc      	adds	r3, #252	; 0xfc
     878:	605a      	str	r2, [r3, #4]
}
     87a:	0020      	movs	r0, r4
  _iTail = 0;
     87c:	609a      	str	r2, [r3, #8]
}
     87e:	bd10      	pop	{r4, pc}

00000880 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     882:	001d      	movs	r5, r3
     884:	ab08      	add	r3, sp, #32
     886:	781b      	ldrb	r3, [r3, #0]
     888:	0004      	movs	r4, r0
     88a:	9300      	str	r3, [sp, #0]
     88c:	ab09      	add	r3, sp, #36	; 0x24
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	0016      	movs	r6, r2
     892:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
     894:	2300      	movs	r3, #0
     896:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     898:	23fa      	movs	r3, #250	; 0xfa
     89a:	009b      	lsls	r3, r3, #2
     89c:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     89e:	4b11      	ldr	r3, [pc, #68]	; (8e4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     8a0:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     8a2:	3308      	adds	r3, #8
     8a4:	6003      	str	r3, [r0, #0]
     8a6:	3014      	adds	r0, #20
     8a8:	f7ff ffdc 	bl	864 <_ZN11RingBufferNILi256EEC1Ev>
     8ac:	0020      	movs	r0, r4
     8ae:	301d      	adds	r0, #29
     8b0:	30ff      	adds	r0, #255	; 0xff
     8b2:	f7ff ffd7 	bl	864 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
     8b6:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
     8b8:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
     8ba:	009b      	lsls	r3, r3, #2
  sercom = _s;
     8bc:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
     8be:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
     8c0:	4b09      	ldr	r3, [pc, #36]	; (8e8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
     8c2:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
     8c4:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
     8c6:	4b09      	ldr	r3, [pc, #36]	; (8ec <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
     8c8:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
     8ca:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
     8cc:	466a      	mov	r2, sp
     8ce:	4b08      	ldr	r3, [pc, #32]	; (8f0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
     8d0:	7912      	ldrb	r2, [r2, #4]
     8d2:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
     8d4:	228a      	movs	r2, #138	; 0x8a
     8d6:	3b29      	subs	r3, #41	; 0x29
     8d8:	3bff      	subs	r3, #255	; 0xff
     8da:	0092      	lsls	r2, r2, #2
     8dc:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
     8de:	3210      	adds	r2, #16
     8e0:	54a3      	strb	r3, [r4, r2]
}
     8e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     8e4:	000030b0 	.word	0x000030b0
     8e8:	00000225 	.word	0x00000225
     8ec:	00000226 	.word	0x00000226
     8f0:	00000227 	.word	0x00000227

000008f4 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
     8f4:	0003      	movs	r3, r0
     8f6:	33fc      	adds	r3, #252	; 0xfc
     8f8:	6858      	ldr	r0, [r3, #4]
     8fa:	689b      	ldr	r3, [r3, #8]
     8fc:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
     8fe:	d501      	bpl.n	904 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
     900:	3001      	adds	r0, #1
     902:	30ff      	adds	r0, #255	; 0xff
}
     904:	4770      	bx	lr

00000906 <_ZN4Uart5flushEv>:
{
     906:	b510      	push	{r4, lr}
     908:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
     90a:	0020      	movs	r0, r4
     90c:	301d      	adds	r0, #29
     90e:	30ff      	adds	r0, #255	; 0xff
     910:	f7ff fff0 	bl	8f4 <_ZN11RingBufferNILi256EE9availableEv>
     914:	2800      	cmp	r0, #0
     916:	d1f8      	bne.n	90a <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
     918:	6920      	ldr	r0, [r4, #16]
     91a:	f001 fd80 	bl	241e <_ZN6SERCOM9flushUARTEv>
}
     91e:	bd10      	pop	{r4, pc}

00000920 <_ZN4Uart9availableEv>:
{
     920:	b510      	push	{r4, lr}
  return rxBuffer.available();
     922:	3014      	adds	r0, #20
     924:	f7ff ffe6 	bl	8f4 <_ZN11RingBufferNILi256EE9availableEv>
}
     928:	bd10      	pop	{r4, pc}

0000092a <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
     92a:	0003      	movs	r3, r0
     92c:	33fc      	adds	r3, #252	; 0xfc
     92e:	6859      	ldr	r1, [r3, #4]
     930:	689a      	ldr	r2, [r3, #8]
     932:	4291      	cmp	r1, r2
     934:	db04      	blt.n	940 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
     936:	685a      	ldr	r2, [r3, #4]
     938:	6898      	ldr	r0, [r3, #8]
     93a:	1a80      	subs	r0, r0, r2
     93c:	30ff      	adds	r0, #255	; 0xff
}
     93e:	4770      	bx	lr
    return _iTail - _iHead - 1;
     940:	6898      	ldr	r0, [r3, #8]
     942:	685b      	ldr	r3, [r3, #4]
     944:	1ac0      	subs	r0, r0, r3
     946:	3801      	subs	r0, #1
     948:	e7f9      	b.n	93e <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

0000094a <_ZN4Uart17availableForWriteEv>:
{
     94a:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
     94c:	301d      	adds	r0, #29
     94e:	30ff      	adds	r0, #255	; 0xff
     950:	f7ff ffeb 	bl	92a <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
     954:	bd10      	pop	{r4, pc}

00000956 <_ZN4Uart10IrqHandlerEv>:
{
     956:	b510      	push	{r4, lr}
     958:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
     95a:	6900      	ldr	r0, [r0, #16]
     95c:	f001 fd7b 	bl	2456 <_ZN6SERCOM16isFrameErrorUARTEv>
     960:	2800      	cmp	r0, #0
     962:	d005      	beq.n	970 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
     964:	6920      	ldr	r0, [r4, #16]
     966:	f001 fd86 	bl	2476 <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
     96a:	6920      	ldr	r0, [r4, #16]
     96c:	f001 fd78 	bl	2460 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
     970:	6920      	ldr	r0, [r4, #16]
     972:	f001 fd60 	bl	2436 <_ZN6SERCOM17availableDataUARTEv>
     976:	2800      	cmp	r0, #0
     978:	d020      	beq.n	9bc <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
     97a:	6920      	ldr	r0, [r4, #16]
     97c:	f001 fd7b 	bl	2476 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
     980:	0022      	movs	r2, r4
     982:	32fc      	adds	r2, #252	; 0xfc
     984:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
     986:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     988:	3301      	adds	r3, #1
     98a:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
     98c:	428b      	cmp	r3, r1
     98e:	d003      	beq.n	998 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
     990:	6991      	ldr	r1, [r2, #24]
     992:	1861      	adds	r1, r4, r1
     994:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
     996:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
     998:	238a      	movs	r3, #138	; 0x8a
     99a:	009b      	lsls	r3, r3, #2
     99c:	5ce3      	ldrb	r3, [r4, r3]
     99e:	2bff      	cmp	r3, #255	; 0xff
     9a0:	d00c      	beq.n	9bc <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
     9a2:	0020      	movs	r0, r4
     9a4:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
     9a6:	f7ff ffc0 	bl	92a <_ZN11RingBufferNILi256EE17availableForStoreEv>
     9aa:	2809      	cmp	r0, #9
     9ac:	dc06      	bgt.n	9bc <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
     9ae:	238b      	movs	r3, #139	; 0x8b
     9b0:	228d      	movs	r2, #141	; 0x8d
     9b2:	009b      	lsls	r3, r3, #2
     9b4:	0092      	lsls	r2, r2, #2
     9b6:	58e3      	ldr	r3, [r4, r3]
     9b8:	58a2      	ldr	r2, [r4, r2]
     9ba:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
     9bc:	6920      	ldr	r0, [r4, #16]
     9be:	f001 fd55 	bl	246c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     9c2:	2800      	cmp	r0, #0
     9c4:	d01a      	beq.n	9fc <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
     9c6:	0020      	movs	r0, r4
     9c8:	301d      	adds	r0, #29
     9ca:	30ff      	adds	r0, #255	; 0xff
     9cc:	f7ff ff92 	bl	8f4 <_ZN11RingBufferNILi256EE9availableEv>
     9d0:	2800      	cmp	r0, #0
     9d2:	d022      	beq.n	a1a <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
     9d4:	2386      	movs	r3, #134	; 0x86
     9d6:	009b      	lsls	r3, r3, #2
     9d8:	18e3      	adds	r3, r4, r3
     9da:	6899      	ldr	r1, [r3, #8]
     9dc:	685a      	ldr	r2, [r3, #4]
     9de:	4291      	cmp	r1, r2
     9e0:	d018      	beq.n	a14 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
     9e2:	218e      	movs	r1, #142	; 0x8e
     9e4:	689a      	ldr	r2, [r3, #8]
     9e6:	0049      	lsls	r1, r1, #1
     9e8:	18a2      	adds	r2, r4, r2
     9ea:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
     9ec:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
     9ee:	3201      	adds	r2, #1
     9f0:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     9f2:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
     9f4:	b2c9      	uxtb	r1, r1
     9f6:	6920      	ldr	r0, [r4, #16]
     9f8:	f001 fd41 	bl	247e <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
     9fc:	6920      	ldr	r0, [r4, #16]
     9fe:	f001 fd1f 	bl	2440 <_ZN6SERCOM11isUARTErrorEv>
     a02:	2800      	cmp	r0, #0
     a04:	d005      	beq.n	a12 <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
     a06:	6920      	ldr	r0, [r4, #16]
     a08:	f001 fd1e 	bl	2448 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
     a0c:	6920      	ldr	r0, [r4, #16]
     a0e:	f001 fd0e 	bl	242e <_ZN6SERCOM15clearStatusUARTEv>
}
     a12:	bd10      	pop	{r4, pc}
    return -1;
     a14:	2101      	movs	r1, #1
     a16:	4249      	negs	r1, r1
     a18:	e7ec      	b.n	9f4 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
     a1a:	6920      	ldr	r0, [r4, #16]
     a1c:	f001 fd3b 	bl	2496 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
     a20:	e7ec      	b.n	9fc <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00000a24 <_ZN4Uart5writeEh>:
{
     a24:	b570      	push	{r4, r5, r6, lr}
     a26:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     a28:	6900      	ldr	r0, [r0, #16]
{
     a2a:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     a2c:	f001 fd1e 	bl	246c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     a30:	2800      	cmp	r0, #0
     a32:	d124      	bne.n	a7e <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
     a34:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
     a36:	2386      	movs	r3, #134	; 0x86
     a38:	009b      	lsls	r3, r3, #2
     a3a:	18e3      	adds	r3, r4, r3
     a3c:	685a      	ldr	r2, [r3, #4]
     a3e:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
     a40:	3201      	adds	r2, #1
     a42:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
     a44:	428a      	cmp	r2, r1
     a46:	d12f      	bne.n	aa8 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a48:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
     a4c:	07db      	lsls	r3, r3, #31
     a4e:	d40d      	bmi.n	a6c <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
     a50:	4b1e      	ldr	r3, [pc, #120]	; (acc <_ZN4Uart5writeEh+0xa8>)
     a52:	685b      	ldr	r3, [r3, #4]
     a54:	05db      	lsls	r3, r3, #23
     a56:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
     a58:	d0ed      	beq.n	a36 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
     a5a:	3b10      	subs	r3, #16
     a5c:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
     a5e:	2b00      	cmp	r3, #0
     a60:	db19      	blt.n	a96 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     a62:	089b      	lsrs	r3, r3, #2
     a64:	33c0      	adds	r3, #192	; 0xc0
     a66:	4a1a      	ldr	r2, [pc, #104]	; (ad0 <_ZN4Uart5writeEh+0xac>)
     a68:	009b      	lsls	r3, r3, #2
     a6a:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
     a6c:	6920      	ldr	r0, [r4, #16]
     a6e:	f001 fcfd 	bl	246c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     a72:	2800      	cmp	r0, #0
     a74:	d0df      	beq.n	a36 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
     a76:	0020      	movs	r0, r4
     a78:	f7ff ff6d 	bl	956 <_ZN4Uart10IrqHandlerEv>
     a7c:	e7db      	b.n	a36 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     a7e:	0020      	movs	r0, r4
     a80:	301d      	adds	r0, #29
     a82:	30ff      	adds	r0, #255	; 0xff
     a84:	f7ff ff36 	bl	8f4 <_ZN11RingBufferNILi256EE9availableEv>
     a88:	2800      	cmp	r0, #0
     a8a:	d1d3      	bne.n	a34 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
     a8c:	0029      	movs	r1, r5
     a8e:	6920      	ldr	r0, [r4, #16]
     a90:	f001 fcf5 	bl	247e <_ZN6SERCOM13writeDataUARTEh>
  return 1;
     a94:	e017      	b.n	ac6 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     a96:	220f      	movs	r2, #15
     a98:	4013      	ands	r3, r2
     a9a:	3b08      	subs	r3, #8
     a9c:	089b      	lsrs	r3, r3, #2
     a9e:	4a0d      	ldr	r2, [pc, #52]	; (ad4 <_ZN4Uart5writeEh+0xb0>)
     aa0:	009b      	lsls	r3, r3, #2
     aa2:	189b      	adds	r3, r3, r2
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	e7e1      	b.n	a6c <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
     aa8:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
     aaa:	3201      	adds	r2, #1
     aac:	4016      	ands	r6, r2
  if ( i != _iTail )
     aae:	689a      	ldr	r2, [r3, #8]
     ab0:	4296      	cmp	r6, r2
     ab2:	d005      	beq.n	ac0 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
     ab4:	218e      	movs	r1, #142	; 0x8e
     ab6:	685a      	ldr	r2, [r3, #4]
     ab8:	0049      	lsls	r1, r1, #1
     aba:	18a2      	adds	r2, r4, r2
     abc:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
     abe:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
     ac0:	6920      	ldr	r0, [r4, #16]
     ac2:	f001 fce4 	bl	248e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
     ac6:	2001      	movs	r0, #1
     ac8:	bd70      	pop	{r4, r5, r6, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	e000ed00 	.word	0xe000ed00
     ad0:	e000e100 	.word	0xe000e100
     ad4:	e000ed1c 	.word	0xe000ed1c

00000ad8 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
     ad8:	0003      	movs	r3, r0
     ada:	33fc      	adds	r3, #252	; 0xfc
     adc:	69d9      	ldr	r1, [r3, #28]
     ade:	699a      	ldr	r2, [r3, #24]
{
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	0004      	movs	r4, r0
     ae4:	4291      	cmp	r1, r2
     ae6:	d01a      	beq.n	b1e <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
     ae8:	69da      	ldr	r2, [r3, #28]
     aea:	1882      	adds	r2, r0, r2
     aec:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
     aee:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
     af0:	3201      	adds	r2, #1
     af2:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     af4:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
     af6:	238a      	movs	r3, #138	; 0x8a
     af8:	009b      	lsls	r3, r3, #2
     afa:	5ce3      	ldrb	r3, [r4, r3]
     afc:	2bff      	cmp	r3, #255	; 0xff
     afe:	d00c      	beq.n	b1a <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
     b00:	0020      	movs	r0, r4
     b02:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
     b04:	f7ff ff11 	bl	92a <_ZN11RingBufferNILi256EE17availableForStoreEv>
     b08:	280a      	cmp	r0, #10
     b0a:	dd06      	ble.n	b1a <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
     b0c:	238c      	movs	r3, #140	; 0x8c
     b0e:	228d      	movs	r2, #141	; 0x8d
     b10:	009b      	lsls	r3, r3, #2
     b12:	0092      	lsls	r2, r2, #2
     b14:	58e3      	ldr	r3, [r4, r3]
     b16:	58a2      	ldr	r2, [r4, r2]
     b18:	601a      	str	r2, [r3, #0]
}
     b1a:	0028      	movs	r0, r5
     b1c:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
     b1e:	2501      	movs	r5, #1
     b20:	426d      	negs	r5, r5
     b22:	e7e8      	b.n	af6 <_ZN4Uart4readEv+0x1e>

00000b24 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     b24:	4770      	bx	lr

00000b26 <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     b26:	b510      	push	{r4, lr}
     b28:	0004      	movs	r4, r0
	}
     b2a:	f001 fc31 	bl	2390 <_ZdlPv>
     b2e:	0020      	movs	r0, r4
     b30:	bd10      	pop	{r4, pc}
	...

00000b34 <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     b34:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     b36:	2982      	cmp	r1, #130	; 0x82
     b38:	d119      	bne.n	b6e <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     b3a:	b2c3      	uxtb	r3, r0
     b3c:	4d29      	ldr	r5, [pc, #164]	; (be4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     b3e:	015a      	lsls	r2, r3, #5
     b40:	18aa      	adds	r2, r5, r2
     b42:	6991      	ldr	r1, [r2, #24]
     b44:	4c28      	ldr	r4, [pc, #160]	; (be8 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     b46:	0180      	lsls	r0, r0, #6
     b48:	400c      	ands	r4, r1
     b4a:	21c0      	movs	r1, #192	; 0xc0
     b4c:	0589      	lsls	r1, r1, #22
     b4e:	4321      	orrs	r1, r4
     b50:	6191      	str	r1, [r2, #24]
     b52:	4926      	ldr	r1, [pc, #152]	; (bec <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     b54:	3308      	adds	r3, #8
     b56:	1808      	adds	r0, r1, r0
     b58:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     b5a:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     b5c:	6828      	ldr	r0, [r5, #0]
     b5e:	015b      	lsls	r3, r3, #5
     b60:	5c1a      	ldrb	r2, [r3, r0]
     b62:	438a      	bics	r2, r1
     b64:	0011      	movs	r1, r2
     b66:	2230      	movs	r2, #48	; 0x30
     b68:	430a      	orrs	r2, r1
     b6a:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
     b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     b6e:	2900      	cmp	r1, #0
     b70:	d1fc      	bne.n	b6c <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     b72:	26c0      	movs	r6, #192	; 0xc0
     b74:	b2c1      	uxtb	r1, r0
     b76:	4c1b      	ldr	r4, [pc, #108]	; (be4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     b78:	014b      	lsls	r3, r1, #5
     b7a:	18e3      	adds	r3, r4, r3
     b7c:	689a      	ldr	r2, [r3, #8]
     b7e:	4d1a      	ldr	r5, [pc, #104]	; (be8 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
     b80:	05b6      	lsls	r6, r6, #22
     b82:	402a      	ands	r2, r5
     b84:	4332      	orrs	r2, r6
     b86:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     b88:	4a19      	ldr	r2, [pc, #100]	; (bf0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
     b8a:	0180      	lsls	r0, r0, #6
     b8c:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     b8e:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     b90:	000a      	movs	r2, r1
     b92:	2707      	movs	r7, #7
     b94:	6824      	ldr	r4, [r4, #0]
     b96:	3208      	adds	r2, #8
     b98:	0152      	lsls	r2, r2, #5
     b9a:	5d11      	ldrb	r1, [r2, r4]
     b9c:	43b9      	bics	r1, r7
     b9e:	000f      	movs	r7, r1
     ba0:	2101      	movs	r1, #1
     ba2:	4339      	orrs	r1, r7
     ba4:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ba6:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     ba8:	4910      	ldr	r1, [pc, #64]	; (bec <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
     baa:	403d      	ands	r5, r7
     bac:	1808      	adds	r0, r1, r0
     bae:	432e      	orrs	r6, r5
     bb0:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     bb2:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     bb4:	2070      	movs	r0, #112	; 0x70
     bb6:	5d11      	ldrb	r1, [r2, r4]
     bb8:	4381      	bics	r1, r0
     bba:	0008      	movs	r0, r1
     bbc:	2110      	movs	r1, #16
     bbe:	4301      	orrs	r1, r0
     bc0:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     bc2:	6899      	ldr	r1, [r3, #8]
     bc4:	480b      	ldr	r0, [pc, #44]	; (bf4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     bc6:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     bc8:	4008      	ands	r0, r1
     bca:	2180      	movs	r1, #128	; 0x80
     bcc:	0349      	lsls	r1, r1, #13
     bce:	4301      	orrs	r1, r0
     bd0:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     bd2:	6899      	ldr	r1, [r3, #8]
     bd4:	0b89      	lsrs	r1, r1, #14
     bd6:	0389      	lsls	r1, r1, #14
     bd8:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     bda:	2340      	movs	r3, #64	; 0x40
     bdc:	7911      	ldrb	r1, [r2, #4]
     bde:	430b      	orrs	r3, r1
     be0:	7113      	strb	r3, [r2, #4]
     be2:	e7c3      	b.n	b6c <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
     be4:	200005ac 	.word	0x200005ac
     be8:	8fffffff 	.word	0x8fffffff
     bec:	20000120 	.word	0x20000120
     bf0:	200002e0 	.word	0x200002e0
     bf4:	f0003fff 	.word	0xf0003fff

00000bf8 <_ZN7__GuardC1Ev>:
     bf8:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     bfc:	6003      	str	r3, [r0, #0]
     bfe:	2301      	movs	r3, #1
     c00:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     c02:	b672      	cpsid	i
	}
     c04:	4770      	bx	lr

00000c06 <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     c06:	6803      	ldr	r3, [r0, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d102      	bne.n	c12 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     c0c:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     c0e:	f3bf 8f6f 	isb	sy
	}
     c12:	4770      	bx	lr

00000c14 <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
     c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     c16:	0006      	movs	r6, r0
     c18:	36fc      	adds	r6, #252	; 0xfc
     c1a:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
     c1c:	0004      	movs	r4, r0
		if (current == 0) {
     c1e:	2b00      	cmp	r3, #0
     c20:	d118      	bne.n	c54 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
     c22:	27b2      	movs	r7, #178	; 0xb2
     c24:	007f      	lsls	r7, r7, #1
     c26:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
     c28:	4668      	mov	r0, sp
     c2a:	f7ff ffe5 	bl	bf8 <_ZN7__GuardC1Ev>
     c2e:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
     c30:	b2ed      	uxtb	r5, r5
			synchronized {
     c32:	3b01      	subs	r3, #1
     c34:	d302      	bcc.n	c3c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
     c36:	5de5      	ldrb	r5, [r4, r7]
     c38:	b2ed      	uxtb	r5, r5
     c3a:	e7fa      	b.n	c32 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
     c3c:	4668      	mov	r0, sp
     c3e:	9301      	str	r3, [sp, #4]
     c40:	f7ff ffe1 	bl	c06 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     c44:	2d00      	cmp	r5, #0
     c46:	d101      	bne.n	c4c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
     c48:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     c4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
     c4c:	6e70      	ldr	r0, [r6, #100]	; 0x64
     c4e:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
     c50:	1ac0      	subs	r0, r0, r3
     c52:	e7fa      	b.n	c4a <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
     c54:	4668      	mov	r0, sp
     c56:	f7ff ffcf 	bl	bf8 <_ZN7__GuardC1Ev>
				ready = ready1;
     c5a:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
     c5c:	2500      	movs	r5, #0
     c5e:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     c60:	0052      	lsls	r2, r2, #1
			synchronized {
     c62:	3b01      	subs	r3, #1
     c64:	d302      	bcc.n	c6c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
     c66:	5ca5      	ldrb	r5, [r4, r2]
     c68:	b2ed      	uxtb	r5, r5
			synchronized {
     c6a:	e7fa      	b.n	c62 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
     c6c:	4668      	mov	r0, sp
     c6e:	9301      	str	r3, [sp, #4]
     c70:	f7ff ffc9 	bl	c06 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     c74:	2d00      	cmp	r5, #0
     c76:	d0e7      	beq.n	c48 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
     c78:	23d6      	movs	r3, #214	; 0xd6
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	58e0      	ldr	r0, [r4, r3]
     c7e:	3b04      	subs	r3, #4
     c80:	58e3      	ldr	r3, [r4, r3]
     c82:	e7e5      	b.n	c50 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

00000c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
     c84:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
     c86:	6844      	ldr	r4, [r0, #4]
     c88:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c8a:	6943      	ldr	r3, [r0, #20]
     c8c:	480b      	ldr	r0, [pc, #44]	; (cbc <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
     c8e:	b2db      	uxtb	r3, r3
     c90:	015a      	lsls	r2, r3, #5
     c92:	18a2      	adds	r2, r4, r2
     c94:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c96:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c98:	4008      	ands	r0, r1
     c9a:	2180      	movs	r1, #128	; 0x80
     c9c:	0349      	lsls	r1, r1, #13
     c9e:	4301      	orrs	r1, r0
     ca0:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     ca2:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     ca4:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     ca6:	0b89      	lsrs	r1, r1, #14
     ca8:	0389      	lsls	r1, r1, #14
     caa:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     cac:	6822      	ldr	r2, [r4, #0]
     cae:	18d3      	adds	r3, r2, r3
     cb0:	2240      	movs	r2, #64	; 0x40
     cb2:	7919      	ldrb	r1, [r3, #4]
     cb4:	430a      	orrs	r2, r1
     cb6:	711a      	strb	r2, [r3, #4]
	}
     cb8:	bd10      	pop	{r4, pc}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	f0003fff 	.word	0xf0003fff

00000cc0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
     cc2:	0005      	movs	r5, r0
     cc4:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     cc6:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
     cc8:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     cca:	0019      	movs	r1, r3
	virtual void handleEndpoint()
     ccc:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     cce:	3108      	adds	r1, #8
     cd0:	6810      	ldr	r0, [r2, #0]
     cd2:	0149      	lsls	r1, r1, #5
     cd4:	1841      	adds	r1, r0, r1
     cd6:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     cd8:	07c9      	lsls	r1, r1, #31
     cda:	d511      	bpl.n	d00 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     cdc:	015b      	lsls	r3, r3, #5
     cde:	18d2      	adds	r2, r2, r3
     ce0:	6893      	ldr	r3, [r2, #8]
     ce2:	049b      	lsls	r3, r3, #18
     ce4:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
     ce6:	d10c      	bne.n	d02 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
     ce8:	0020      	movs	r0, r4
     cea:	f7ff ffcb 	bl	c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
     cee:	6863      	ldr	r3, [r4, #4]
     cf0:	681a      	ldr	r2, [r3, #0]
     cf2:	696b      	ldr	r3, [r5, #20]
     cf4:	b2db      	uxtb	r3, r3
     cf6:	3308      	adds	r3, #8
     cf8:	015b      	lsls	r3, r3, #5
     cfa:	18d3      	adds	r3, r2, r3
     cfc:	227f      	movs	r2, #127	; 0x7f
     cfe:	71da      	strb	r2, [r3, #7]
	}
     d00:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
     d02:	69e9      	ldr	r1, [r5, #28]
     d04:	2900      	cmp	r1, #0
     d06:	d123      	bne.n	d50 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
     d08:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     d0a:	0023      	movs	r3, r4
				incoming = 1;
     d0c:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     d0e:	3369      	adds	r3, #105	; 0x69
     d10:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
     d12:	61ee      	str	r6, [r5, #28]
				synchronized {
     d14:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d16:	6053      	str	r3, [r2, #4]
					ready0 = true;
     d18:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
     d1a:	f7ff ff6d 	bl	bf8 <_ZN7__GuardC1Ev>
					ready0 = true;
     d1e:	007f      	lsls	r7, r7, #1
					notify = ready1;
     d20:	21b2      	movs	r1, #178	; 0xb2
     d22:	9b01      	ldr	r3, [sp, #4]
     d24:	31ff      	adds	r1, #255	; 0xff
     d26:	3b01      	subs	r3, #1
				synchronized {
     d28:	1c5a      	adds	r2, r3, #1
     d2a:	d038      	beq.n	d9e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
     d2c:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
     d2e:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
     d30:	0052      	lsls	r2, r2, #1
     d32:	5ca2      	ldrb	r2, [r4, r2]
     d34:	1e58      	subs	r0, r3, #1
     d36:	b2d2      	uxtb	r2, r2
     d38:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     d3a:	5c62      	ldrb	r2, [r4, r1]
     d3c:	4684      	mov	ip, r0
     d3e:	2a00      	cmp	r2, #0
     d40:	d104      	bne.n	d4c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
     d42:	0020      	movs	r0, r4
     d44:	9301      	str	r3, [sp, #4]
     d46:	f7ff ff9d 	bl	c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     d4a:	e7e9      	b.n	d20 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
     d4c:	4663      	mov	r3, ip
     d4e:	e7eb      	b.n	d28 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
     d50:	21d6      	movs	r1, #214	; 0xd6
     d52:	0049      	lsls	r1, r1, #1
     d54:	5063      	str	r3, [r4, r1]
				incoming = 0;
     d56:	2300      	movs	r3, #0
     d58:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
     d5a:	0023      	movs	r3, r4
     d5c:	331d      	adds	r3, #29
     d5e:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d60:	6053      	str	r3, [r2, #4]
				synchronized {
     d62:	4668      	mov	r0, sp
					ready1 = true;
     d64:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
     d66:	f7ff ff47 	bl	bf8 <_ZN7__GuardC1Ev>
					ready1 = true;
     d6a:	2701      	movs	r7, #1
     d6c:	0076      	lsls	r6, r6, #1
					notify = ready0;
     d6e:	21b2      	movs	r1, #178	; 0xb2
     d70:	9b01      	ldr	r3, [sp, #4]
     d72:	31ff      	adds	r1, #255	; 0xff
     d74:	3b01      	subs	r3, #1
				synchronized {
     d76:	1c5a      	adds	r2, r3, #1
     d78:	d011      	beq.n	d9e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
     d7a:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
     d7c:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
     d7e:	0052      	lsls	r2, r2, #1
     d80:	5ca2      	ldrb	r2, [r4, r2]
     d82:	1e58      	subs	r0, r3, #1
     d84:	b2d2      	uxtb	r2, r2
     d86:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     d88:	5c62      	ldrb	r2, [r4, r1]
     d8a:	4684      	mov	ip, r0
     d8c:	2a00      	cmp	r2, #0
     d8e:	d104      	bne.n	d9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
     d90:	0020      	movs	r0, r4
     d92:	9301      	str	r3, [sp, #4]
     d94:	f7ff ff76 	bl	c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     d98:	e7e9      	b.n	d6e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
     d9a:	4663      	mov	r3, ip
     d9c:	e7eb      	b.n	d76 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
     d9e:	4668      	mov	r0, sp
     da0:	9301      	str	r3, [sp, #4]
     da2:	f7ff ff30 	bl	c06 <_ZN7__GuardD1Ev>
     da6:	e7a2      	b.n	cee <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

00000da8 <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
     da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     daa:	0005      	movs	r5, r0
		synchronized {
     dac:	4668      	mov	r0, sp
     dae:	002c      	movs	r4, r5
     db0:	f7ff ff22 	bl	bf8 <_ZN7__GuardC1Ev>
		uint32_t len = 0;
     db4:	2700      	movs	r7, #0
    return N - 1 - _iHead + _iTail;
     db6:	22ff      	movs	r2, #255	; 0xff
     db8:	9b01      	ldr	r3, [sp, #4]
     dba:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
     dbc:	3b01      	subs	r3, #1
     dbe:	d30d      	bcc.n	ddc <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
     dc0:	68e0      	ldr	r0, [r4, #12]
     dc2:	6921      	ldr	r1, [r4, #16]
     dc4:	4288      	cmp	r0, r1
     dc6:	db04      	blt.n	dd2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
     dc8:	68e7      	ldr	r7, [r4, #12]
     dca:	6920      	ldr	r0, [r4, #16]
     dcc:	1bd7      	subs	r7, r2, r7
     dce:	183f      	adds	r7, r7, r0
     dd0:	e7f4      	b.n	dbc <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    return _iTail - _iHead - 1;
     dd2:	6927      	ldr	r7, [r4, #16]
     dd4:	68e1      	ldr	r1, [r4, #12]
     dd6:	1a7f      	subs	r7, r7, r1
     dd8:	3f01      	subs	r7, #1
     dda:	e7ef      	b.n	dbc <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
     ddc:	4668      	mov	r0, sp
     dde:	9301      	str	r3, [sp, #4]
     de0:	f7ff ff11 	bl	c06 <_ZN7__GuardD1Ev>
		if (current == 0) {
     de4:	69a3      	ldr	r3, [r4, #24]
			synchronized {
     de6:	4668      	mov	r0, sp
		if (current == 0) {
     de8:	2b00      	cmp	r3, #0
     dea:	d141      	bne.n	e70 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
     dec:	f7ff ff04 	bl	bf8 <_ZN7__GuardC1Ev>
				if (!ready0) {
     df0:	21b2      	movs	r1, #178	; 0xb2
     df2:	9b01      	ldr	r3, [sp, #4]
     df4:	0049      	lsls	r1, r1, #1
     df6:	3b01      	subs	r3, #1
			synchronized {
     df8:	1c5a      	adds	r2, r3, #1
     dfa:	d00c      	beq.n	e16 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
     dfc:	5c6e      	ldrb	r6, [r5, r1]
     dfe:	1e5a      	subs	r2, r3, #1
     e00:	b2f6      	uxtb	r6, r6
     e02:	2e00      	cmp	r6, #0
     e04:	d105      	bne.n	e12 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
     e06:	4668      	mov	r0, sp
     e08:	9301      	str	r3, [sp, #4]
     e0a:	f7ff fefc 	bl	c06 <_ZN7__GuardD1Ev>
	}
     e0e:	0030      	movs	r0, r6
     e10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     e12:	0013      	movs	r3, r2
     e14:	e7f0      	b.n	df8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
     e16:	4668      	mov	r0, sp
     e18:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
     e1a:	2600      	movs	r6, #0
			synchronized {
     e1c:	f7ff fef3 	bl	c06 <_ZN7__GuardD1Ev>
  return (uint32_t)(index + 1) % N;
     e20:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
     e22:	42be      	cmp	r6, r7
     e24:	d003      	beq.n	e2e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
     e26:	6e23      	ldr	r3, [r4, #96]	; 0x60
     e28:	6e61      	ldr	r1, [r4, #100]	; 0x64
     e2a:	428b      	cmp	r3, r1
     e2c:	d360      	bcc.n	ef0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
     e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
     e30:	6e22      	ldr	r2, [r4, #96]	; 0x60
     e32:	429a      	cmp	r2, r3
     e34:	d1eb      	bne.n	e0e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
     e36:	2300      	movs	r3, #0
     e38:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
     e3a:	3301      	adds	r3, #1
     e3c:	61a3      	str	r3, [r4, #24]
				synchronized {
     e3e:	4668      	mov	r0, sp
					ready0 = false;
     e40:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
     e42:	f7ff fed9 	bl	bf8 <_ZN7__GuardC1Ev>
					ready0 = false;
     e46:	0064      	lsls	r4, r4, #1
					if (notify) {
     e48:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
     e4a:	2100      	movs	r1, #0
     e4c:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
     e4e:	32ff      	adds	r2, #255	; 0xff
     e50:	3b01      	subs	r3, #1
				synchronized {
     e52:	1c58      	adds	r0, r3, #1
     e54:	d0d7      	beq.n	e06 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
     e56:	5529      	strb	r1, [r5, r4]
					if (notify) {
     e58:	5ca8      	ldrb	r0, [r5, r2]
     e5a:	1e5f      	subs	r7, r3, #1
     e5c:	2800      	cmp	r0, #0
     e5e:	d005      	beq.n	e6c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
     e60:	54a9      	strb	r1, [r5, r2]
						release();
     e62:	0028      	movs	r0, r5
     e64:	9301      	str	r3, [sp, #4]
     e66:	f7ff ff0d 	bl	c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     e6a:	e7ed      	b.n	e48 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
     e6c:	003b      	movs	r3, r7
     e6e:	e7f0      	b.n	e52 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
     e70:	f7ff fec2 	bl	bf8 <_ZN7__GuardC1Ev>
				if (!ready1) {
     e74:	21d8      	movs	r1, #216	; 0xd8
     e76:	9b01      	ldr	r3, [sp, #4]
     e78:	0049      	lsls	r1, r1, #1
     e7a:	3b01      	subs	r3, #1
			synchronized {
     e7c:	1c5a      	adds	r2, r3, #1
     e7e:	d006      	beq.n	e8e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
     e80:	5c6e      	ldrb	r6, [r5, r1]
     e82:	1e5a      	subs	r2, r3, #1
     e84:	b2f6      	uxtb	r6, r6
     e86:	2e00      	cmp	r6, #0
     e88:	d0bd      	beq.n	e06 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
     e8a:	0013      	movs	r3, r2
     e8c:	e7f6      	b.n	e7c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
     e8e:	4668      	mov	r0, sp
     e90:	9301      	str	r3, [sp, #4]
     e92:	f7ff feb8 	bl	c06 <_ZN7__GuardD1Ev>
     e96:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
     e98:	2600      	movs	r6, #0
     e9a:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
     e9c:	42be      	cmp	r6, r7
     e9e:	d005      	beq.n	eac <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
     ea0:	21d6      	movs	r1, #214	; 0xd6
     ea2:	0049      	lsls	r1, r1, #1
     ea4:	58ab      	ldr	r3, [r5, r2]
     ea6:	5869      	ldr	r1, [r5, r1]
     ea8:	428b      	cmp	r3, r1
     eaa:	d332      	bcc.n	f12 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
     eac:	23d6      	movs	r3, #214	; 0xd6
     eae:	005b      	lsls	r3, r3, #1
     eb0:	58eb      	ldr	r3, [r5, r3]
     eb2:	58a9      	ldr	r1, [r5, r2]
     eb4:	4299      	cmp	r1, r3
     eb6:	d1aa      	bne.n	e0e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
     eb8:	2300      	movs	r3, #0
				synchronized {
     eba:	4668      	mov	r0, sp
				first1 = 0;
     ebc:	50ab      	str	r3, [r5, r2]
				current = 0;
     ebe:	61a3      	str	r3, [r4, #24]
					ready1 = false;
     ec0:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
     ec2:	f7ff fe99 	bl	bf8 <_ZN7__GuardC1Ev>
					ready1 = false;
     ec6:	0064      	lsls	r4, r4, #1
					if (notify) {
     ec8:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
     eca:	2100      	movs	r1, #0
     ecc:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
     ece:	32ff      	adds	r2, #255	; 0xff
     ed0:	3b01      	subs	r3, #1
				synchronized {
     ed2:	1c58      	adds	r0, r3, #1
     ed4:	d097      	beq.n	e06 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
     ed6:	5529      	strb	r1, [r5, r4]
					if (notify) {
     ed8:	5ca8      	ldrb	r0, [r5, r2]
     eda:	1e5f      	subs	r7, r3, #1
     edc:	2800      	cmp	r0, #0
     ede:	d005      	beq.n	eec <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
     ee0:	54a9      	strb	r1, [r5, r2]
						release();
     ee2:	0028      	movs	r0, r5
     ee4:	9301      	str	r3, [sp, #4]
     ee6:	f7ff fecd 	bl	c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     eea:	e7ed      	b.n	ec8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
     eec:	003b      	movs	r3, r7
     eee:	e7f0      	b.n	ed2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
     ef0:	1c59      	adds	r1, r3, #1
     ef2:	18eb      	adds	r3, r5, r3
     ef4:	33ff      	adds	r3, #255	; 0xff
     ef6:	6621      	str	r1, [r4, #96]	; 0x60
     ef8:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
     efa:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
     efc:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
     efe:	3301      	adds	r3, #1
     f00:	4013      	ands	r3, r2
  if ( i != _iTail )
     f02:	4283      	cmp	r3, r0
     f04:	d003      	beq.n	f0e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
     f06:	68e0      	ldr	r0, [r4, #12]
     f08:	1828      	adds	r0, r5, r0
     f0a:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
     f0c:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
     f0e:	3601      	adds	r6, #1
     f10:	e787      	b.n	e22 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
     f12:	1c59      	adds	r1, r3, #1
     f14:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
     f16:	21ff      	movs	r1, #255	; 0xff
     f18:	18eb      	adds	r3, r5, r3
     f1a:	3369      	adds	r3, #105	; 0x69
     f1c:	33ff      	adds	r3, #255	; 0xff
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
     f22:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
     f24:	3301      	adds	r3, #1
     f26:	400b      	ands	r3, r1
  if ( i != _iTail )
     f28:	6921      	ldr	r1, [r4, #16]
     f2a:	428b      	cmp	r3, r1
     f2c:	d004      	beq.n	f38 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
     f2e:	4660      	mov	r0, ip
     f30:	68e1      	ldr	r1, [r4, #12]
     f32:	1869      	adds	r1, r5, r1
     f34:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
     f36:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
     f38:	3601      	adds	r6, #1
     f3a:	e7af      	b.n	e9c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

00000f3c <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
     f3c:	b510      	push	{r4, lr}
     f3e:	0004      	movs	r4, r0
		_recv();
     f40:	f7ff ff32 	bl	da8 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
     f44:	0023      	movs	r3, r4
     f46:	33fc      	adds	r3, #252	; 0xfc
     f48:	6919      	ldr	r1, [r3, #16]
     f4a:	68da      	ldr	r2, [r3, #12]
     f4c:	4291      	cmp	r1, r2
     f4e:	d003      	beq.n	f58 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
     f50:	691b      	ldr	r3, [r3, #16]
     f52:	18e4      	adds	r4, r4, r3
     f54:	7a20      	ldrb	r0, [r4, #8]
	}
     f56:	bd10      	pop	{r4, pc}
    return -1;
     f58:	2001      	movs	r0, #1
     f5a:	4240      	negs	r0, r0
		return _rx_buffer.peek();
     f5c:	e7fb      	b.n	f56 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

00000f5e <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
     f5e:	b510      	push	{r4, lr}
     f60:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
     f62:	34fc      	adds	r4, #252	; 0xfc
		_recv();
     f64:	f7ff ff20 	bl	da8 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
     f68:	68e0      	ldr	r0, [r4, #12]
     f6a:	6923      	ldr	r3, [r4, #16]
     f6c:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
     f6e:	d501      	bpl.n	f74 <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
     f70:	3001      	adds	r0, #1
     f72:	30ff      	adds	r0, #255	; 0xff
	}
     f74:	bd10      	pop	{r4, pc}

00000f76 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
     f76:	b5f0      	push	{r4, r5, r6, r7, lr}
     f78:	b085      	sub	sp, #20
     f7a:	9201      	str	r2, [sp, #4]
     f7c:	9100      	str	r1, [sp, #0]
     f7e:	0005      	movs	r5, r0
		_recv();
     f80:	f7ff ff12 	bl	da8 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
     f84:	a802      	add	r0, sp, #8
     f86:	f7ff fe37 	bl	bf8 <_ZN7__GuardC1Ev>
    return -1;
     f8a:	2001      	movs	r0, #1
		uint32_t i = 0;
     f8c:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
     f8e:	26ff      	movs	r6, #255	; 0xff
     f90:	9a03      	ldr	r2, [sp, #12]
    return -1;
     f92:	4240      	negs	r0, r0
		synchronized {
     f94:	3a01      	subs	r2, #1
     f96:	d31d      	bcc.n	fd4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
     f98:	002b      	movs	r3, r5
     f9a:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
     f9c:	9901      	ldr	r1, [sp, #4]
     f9e:	428c      	cmp	r4, r1
     fa0:	d2f8      	bcs.n	f94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
     fa2:	68d9      	ldr	r1, [r3, #12]
     fa4:	691f      	ldr	r7, [r3, #16]
     fa6:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
     fa8:	d501      	bpl.n	fae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
     faa:	3101      	adds	r1, #1
     fac:	31ff      	adds	r1, #255	; 0xff
     fae:	2900      	cmp	r1, #0
     fb0:	d0f0      	beq.n	f94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
     fb2:	6919      	ldr	r1, [r3, #16]
     fb4:	68df      	ldr	r7, [r3, #12]
     fb6:	468c      	mov	ip, r1
    return -1;
     fb8:	0001      	movs	r1, r0
  if(_iTail == _iHead)
     fba:	45bc      	cmp	ip, r7
     fbc:	d006      	beq.n	fcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
     fbe:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
     fc0:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
     fc2:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
     fc4:	3701      	adds	r7, #1
     fc6:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
     fc8:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
     fca:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
     fcc:	9f00      	ldr	r7, [sp, #0]
     fce:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
     fd0:	3401      	adds	r4, #1
     fd2:	e7e3      	b.n	f9c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
     fd4:	a802      	add	r0, sp, #8
     fd6:	9203      	str	r2, [sp, #12]
     fd8:	f7ff fe15 	bl	c06 <_ZN7__GuardD1Ev>
	}
     fdc:	0020      	movs	r0, r4
     fde:	b005      	add	sp, #20
     fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000fe2 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     fe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     fe4:	466b      	mov	r3, sp
     fe6:	1ddc      	adds	r4, r3, #7
     fe8:	2300      	movs	r3, #0
{
     fea:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
     fec:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     fee:	f001 fe5f 	bl	2cb0 <_Z12PluggableUSBv>
     ff2:	0021      	movs	r1, r4
     ff4:	f001 fddc 	bl	2bb0 <_ZN13PluggableUSB_12getInterfaceEPh>
     ff8:	682b      	ldr	r3, [r5, #0]
     ffa:	1818      	adds	r0, r3, r0
     ffc:	6028      	str	r0, [r5, #0]
	return interfaces;
     ffe:	7820      	ldrb	r0, [r4, #0]
}
    1000:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00001004 <_ZN14USBDeviceClass4initEv>:
{
    1004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
    1006:	2400      	movs	r4, #0
    1008:	4b49      	ldr	r3, [pc, #292]	; (1130 <_ZN14USBDeviceClass4initEv+0x12c>)
	pinMode(PIN_LED_TXL, OUTPUT);
    100a:	2101      	movs	r1, #1
{
    100c:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    100e:	201a      	movs	r0, #26
	txLEDPulse = 0;
    1010:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    1012:	f000 fe49 	bl	1ca8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    1016:	2101      	movs	r1, #1
    1018:	201a      	movs	r0, #26
    101a:	f000 fe91 	bl	1d40 <digitalWrite>
	rxLEDPulse = 0;
    101e:	4b45      	ldr	r3, [pc, #276]	; (1134 <_ZN14USBDeviceClass4initEv+0x130>)
	pinMode(PIN_LED_RXL, OUTPUT);
    1020:	2101      	movs	r1, #1
    1022:	2019      	movs	r0, #25
	rxLEDPulse = 0;
    1024:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    1026:	f000 fe3f 	bl	1ca8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    102a:	2101      	movs	r1, #1
    102c:	2019      	movs	r0, #25
    102e:	f000 fe87 	bl	1d40 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    1032:	2320      	movs	r3, #32
    1034:	4a40      	ldr	r2, [pc, #256]	; (1138 <_ZN14USBDeviceClass4initEv+0x134>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1036:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    1038:	69d1      	ldr	r1, [r2, #28]
    103a:	430b      	orrs	r3, r1
    103c:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    103e:	2201      	movs	r2, #1
    1040:	493e      	ldr	r1, [pc, #248]	; (113c <_ZN14USBDeviceClass4initEv+0x138>)
    1042:	780b      	ldrb	r3, [r1, #0]
    1044:	4313      	orrs	r3, r2
    1046:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1048:	4b3d      	ldr	r3, [pc, #244]	; (1140 <_ZN14USBDeviceClass4initEv+0x13c>)
    104a:	7819      	ldrb	r1, [r3, #0]
    104c:	4381      	bics	r1, r0
    104e:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    1050:	2106      	movs	r1, #6
    1052:	781c      	ldrb	r4, [r3, #0]
    1054:	4321      	orrs	r1, r4
    1056:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    1058:	493a      	ldr	r1, [pc, #232]	; (1144 <_ZN14USBDeviceClass4initEv+0x140>)
    105a:	780c      	ldrb	r4, [r1, #0]
    105c:	4322      	orrs	r2, r4
    105e:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    1060:	781a      	ldrb	r2, [r3, #0]
    1062:	4002      	ands	r2, r0
    1064:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    1066:	2260      	movs	r2, #96	; 0x60
    1068:	7819      	ldrb	r1, [r3, #0]
    106a:	430a      	orrs	r2, r1
    106c:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    106e:	4b36      	ldr	r3, [pc, #216]	; (1148 <_ZN14USBDeviceClass4initEv+0x144>)
    1070:	4a36      	ldr	r2, [pc, #216]	; (114c <_ZN14USBDeviceClass4initEv+0x148>)
    1072:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    1074:	785f      	ldrb	r7, [r3, #1]
    1076:	09ff      	lsrs	r7, r7, #7
    1078:	d1fc      	bne.n	1074 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    107a:	4835      	ldr	r0, [pc, #212]	; (1150 <_ZN14USBDeviceClass4initEv+0x14c>)
    107c:	f7ff f90e 	bl	29c <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    1080:	4e34      	ldr	r6, [pc, #208]	; (1154 <_ZN14USBDeviceClass4initEv+0x150>)
    1082:	2301      	movs	r3, #1
    1084:	0030      	movs	r0, r6
    1086:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    1088:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    108a:	7822      	ldrb	r2, [r4, #0]
    108c:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    108e:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    1090:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    1092:	0052      	lsls	r2, r2, #1
    1094:	f001 fef3 	bl	2e7e <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    1098:	78a3      	ldrb	r3, [r4, #2]
    109a:	07db      	lsls	r3, r3, #31
    109c:	d4fc      	bmi.n	1098 <_ZN14USBDeviceClass4initEv+0x94>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    109e:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    10a0:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    10a2:	4b2d      	ldr	r3, [pc, #180]	; (1158 <_ZN14USBDeviceClass4initEv+0x154>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    10a4:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    10aa:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    10ac:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    10ae:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    10b0:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    10b2:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    10b4:	4282      	cmp	r2, r0
    10b6:	d100      	bne.n	10ba <_ZN14USBDeviceClass4initEv+0xb6>
		pad_transn = 5;
    10b8:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    10ba:	291f      	cmp	r1, #31
    10bc:	d100      	bne.n	10c0 <_ZN14USBDeviceClass4initEv+0xbc>
		pad_transp = 29;
    10be:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    10c0:	2b07      	cmp	r3, #7
    10c2:	d100      	bne.n	10c6 <_ZN14USBDeviceClass4initEv+0xc2>
		pad_trim = 3;
    10c4:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    10c6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    10c8:	4f24      	ldr	r7, [pc, #144]	; (115c <_ZN14USBDeviceClass4initEv+0x158>)
    10ca:	4002      	ands	r2, r0
    10cc:	403e      	ands	r6, r7
    10ce:	0192      	lsls	r2, r2, #6
    10d0:	4332      	orrs	r2, r6
    10d2:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    10d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    10d6:	4001      	ands	r1, r0
    10d8:	4382      	bics	r2, r0
    10da:	000e      	movs	r6, r1
    10dc:	0011      	movs	r1, r2
    10de:	4331      	orrs	r1, r6
    10e0:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    10e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    10e4:	0319      	lsls	r1, r3, #12
    10e6:	4b1e      	ldr	r3, [pc, #120]	; (1160 <_ZN14USBDeviceClass4initEv+0x15c>)
	SerialUSB.begin(0);
    10e8:	481e      	ldr	r0, [pc, #120]	; (1164 <_ZN14USBDeviceClass4initEv+0x160>)
    10ea:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    10ec:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    10ee:	430b      	orrs	r3, r1
    10f0:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    10f2:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    10f4:	21c1      	movs	r1, #193	; 0xc1
    10f6:	4013      	ands	r3, r2
    10f8:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    10fa:	2304      	movs	r3, #4
    10fc:	7822      	ldrb	r2, [r4, #0]
    10fe:	0089      	lsls	r1, r1, #2
    1100:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1102:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1104:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1106:	8923      	ldrh	r3, [r4, #8]
    1108:	4393      	bics	r3, r2
    110a:	4a17      	ldr	r2, [pc, #92]	; (1168 <_ZN14USBDeviceClass4initEv+0x164>)
    110c:	8123      	strh	r3, [r4, #8]
    110e:	5853      	ldr	r3, [r2, r1]
    1110:	021b      	lsls	r3, r3, #8
    1112:	0a1b      	lsrs	r3, r3, #8
    1114:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1116:	2380      	movs	r3, #128	; 0x80
    1118:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    111a:	7822      	ldrb	r2, [r4, #0]
    111c:	3b7e      	subs	r3, #126	; 0x7e
    111e:	4313      	orrs	r3, r2
    1120:	7023      	strb	r3, [r4, #0]
	initialized = true;
    1122:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    1124:	2100      	movs	r1, #0
	initialized = true;
    1126:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    1128:	f001 fd36 	bl	2b98 <_ZN7Serial_5beginEm>
}
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	20000115 	.word	0x20000115
    1134:	20000114 	.word	0x20000114
    1138:	40000400 	.word	0x40000400
    113c:	41004458 	.word	0x41004458
    1140:	4100443c 	.word	0x4100443c
    1144:	41004459 	.word	0x41004459
    1148:	40000c00 	.word	0x40000c00
    114c:	00004006 	.word	0x00004006
    1150:	00001b35 	.word	0x00001b35
    1154:	200005ac 	.word	0x200005ac
    1158:	00806024 	.word	0x00806024
    115c:	fffff83f 	.word	0xfffff83f
    1160:	ffff8fff 	.word	0xffff8fff
    1164:	20000d74 	.word	0x20000d74
    1168:	e000e100 	.word	0xe000e100

0000116c <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    116c:	7800      	ldrb	r0, [r0, #0]
    116e:	2800      	cmp	r0, #0
    1170:	d010      	beq.n	1194 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    1172:	2101      	movs	r1, #1
    1174:	4b08      	ldr	r3, [pc, #32]	; (1198 <_ZN14USBDeviceClass6attachEv+0x2c>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	891a      	ldrh	r2, [r3, #8]
    117a:	438a      	bics	r2, r1
    117c:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    117e:	2208      	movs	r2, #8
    1180:	8b19      	ldrh	r1, [r3, #24]
    1182:	430a      	orrs	r2, r1
    1184:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    1186:	2204      	movs	r2, #4
    1188:	8b19      	ldrh	r1, [r3, #24]
    118a:	430a      	orrs	r2, r1
    118c:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    118e:	2200      	movs	r2, #0
    1190:	4b02      	ldr	r3, [pc, #8]	; (119c <_ZN14USBDeviceClass6attachEv+0x30>)
    1192:	601a      	str	r2, [r3, #0]
}
    1194:	4770      	bx	lr
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	200005ac 	.word	0x200005ac
    119c:	200005a4 	.word	0x200005a4

000011a0 <_ZN14USBDeviceClass10setAddressEm>:
{
    11a0:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    11a2:	4a0f      	ldr	r2, [pc, #60]	; (11e0 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    11a4:	6993      	ldr	r3, [r2, #24]
    11a6:	0b9b      	lsrs	r3, r3, #14
    11a8:	039b      	lsls	r3, r3, #14
    11aa:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    11ac:	6813      	ldr	r3, [r2, #0]
    11ae:	2202      	movs	r2, #2
    11b0:	33ff      	adds	r3, #255	; 0xff
    11b2:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    11b4:	7998      	ldrb	r0, [r3, #6]
    11b6:	3a82      	subs	r2, #130	; 0x82
    11b8:	4302      	orrs	r2, r0
    11ba:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    11bc:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    11be:	0792      	lsls	r2, r2, #30
    11c0:	d5fc      	bpl.n	11bc <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    11c2:	247f      	movs	r4, #127	; 0x7f
    11c4:	4a07      	ldr	r2, [pc, #28]	; (11e4 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    11c6:	4021      	ands	r1, r4
    11c8:	7a93      	ldrb	r3, [r2, #10]
    11ca:	0008      	movs	r0, r1
    11cc:	43a3      	bics	r3, r4
    11ce:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    11d0:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    11d2:	4301      	orrs	r1, r0
    11d4:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    11d6:	7a91      	ldrb	r1, [r2, #10]
    11d8:	425b      	negs	r3, r3
    11da:	430b      	orrs	r3, r1
    11dc:	7293      	strb	r3, [r2, #10]
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	200005ac 	.word	0x200005ac
    11e4:	41005000 	.word	0x41005000

000011e8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    11e8:	b510      	push	{r4, lr}
    11ea:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    11ec:	f001 fd60 	bl	2cb0 <_Z12PluggableUSBv>
    11f0:	0021      	movs	r1, r4
    11f2:	f001 fd14 	bl	2c1e <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    11f6:	2800      	cmp	r0, #0
    11f8:	d104      	bne.n	1204 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    11fa:	4a03      	ldr	r2, [pc, #12]	; (1208 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    11fc:	6993      	ldr	r3, [r2, #24]
    11fe:	0b9b      	lsrs	r3, r3, #14
    1200:	039b      	lsls	r3, r3, #14
    1202:	6193      	str	r3, [r2, #24]
}
    1204:	bd10      	pop	{r4, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	200005ac 	.word	0x200005ac

0000120c <_ZN14USBDeviceClass6initEPEmm>:
{
    120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    120e:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    1210:	2a83      	cmp	r2, #131	; 0x83
    1212:	d119      	bne.n	1248 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1214:	b2cb      	uxtb	r3, r1
    1216:	4c39      	ldr	r4, [pc, #228]	; (12fc <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    1218:	015a      	lsls	r2, r3, #5
    121a:	18a2      	adds	r2, r4, r2
    121c:	6991      	ldr	r1, [r2, #24]
    121e:	4838      	ldr	r0, [pc, #224]	; (1300 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1220:	01ad      	lsls	r5, r5, #6
    1222:	4008      	ands	r0, r1
    1224:	21c0      	movs	r1, #192	; 0xc0
    1226:	0589      	lsls	r1, r1, #22
    1228:	4301      	orrs	r1, r0
    122a:	6191      	str	r1, [r2, #24]
    122c:	4935      	ldr	r1, [pc, #212]	; (1304 <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    122e:	6820      	ldr	r0, [r4, #0]
    1230:	194d      	adds	r5, r1, r5
    1232:	2170      	movs	r1, #112	; 0x70
    1234:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1236:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1238:	015b      	lsls	r3, r3, #5
    123a:	5c1a      	ldrb	r2, [r3, r0]
    123c:	438a      	bics	r2, r1
    123e:	0011      	movs	r1, r2
    1240:	2240      	movs	r2, #64	; 0x40
    1242:	430a      	orrs	r2, r1
    1244:	541a      	strb	r2, [r3, r0]
}
    1246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    1248:	2a02      	cmp	r2, #2
    124a:	d152      	bne.n	12f2 <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    124c:	4a2e      	ldr	r2, [pc, #184]	; (1308 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    124e:	008b      	lsls	r3, r1, #2
    1250:	5898      	ldr	r0, [r3, r2]
    1252:	2800      	cmp	r0, #0
    1254:	d002      	beq.n	125c <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    1256:	6803      	ldr	r3, [r0, #0]
    1258:	695b      	ldr	r3, [r3, #20]
    125a:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    125c:	20da      	movs	r0, #218	; 0xda
    125e:	0040      	lsls	r0, r0, #1
    1260:	f001 f892 	bl	2388 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    1264:	2280      	movs	r2, #128	; 0x80
    1266:	0004      	movs	r4, r0
		notify(false)
    1268:	4e24      	ldr	r6, [pc, #144]	; (12fc <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    126a:	4b28      	ldr	r3, [pc, #160]	; (130c <_ZN14USBDeviceClass6initEPEmm+0x100>)
    126c:	6046      	str	r6, [r0, #4]
    126e:	6003      	str	r3, [r0, #0]
    1270:	0052      	lsls	r2, r2, #1
    1272:	2100      	movs	r1, #0
    1274:	3008      	adds	r0, #8
    1276:	f001 fe02 	bl	2e7e <memset>
  _iHead = 0;
    127a:	0022      	movs	r2, r4
    127c:	2300      	movs	r3, #0
    127e:	32fc      	adds	r2, #252	; 0xfc
    1280:	60d3      	str	r3, [r2, #12]
    1282:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    1284:	6113      	str	r3, [r2, #16]
    1286:	6613      	str	r3, [r2, #96]	; 0x60
    1288:	6193      	str	r3, [r2, #24]
    128a:	61d3      	str	r3, [r2, #28]
    128c:	6653      	str	r3, [r2, #100]	; 0x64
    128e:	22b2      	movs	r2, #178	; 0xb2
    1290:	0052      	lsls	r2, r2, #1
    1292:	54a3      	strb	r3, [r4, r2]
    1294:	3244      	adds	r2, #68	; 0x44
    1296:	50a3      	str	r3, [r4, r2]
    1298:	3204      	adds	r2, #4
    129a:	50a3      	str	r3, [r4, r2]
    129c:	3204      	adds	r2, #4
    129e:	54a3      	strb	r3, [r4, r2]
    12a0:	22b2      	movs	r2, #178	; 0xb2
    12a2:	32ff      	adds	r2, #255	; 0xff
    12a4:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    12a6:	b2ea      	uxtb	r2, r5
    12a8:	0150      	lsls	r0, r2, #5
    12aa:	1831      	adds	r1, r6, r0
    12ac:	688b      	ldr	r3, [r1, #8]
    12ae:	4f14      	ldr	r7, [pc, #80]	; (1300 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    12b0:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    12b2:	401f      	ands	r7, r3
    12b4:	23c0      	movs	r3, #192	; 0xc0
    12b6:	059b      	lsls	r3, r3, #22
    12b8:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    12ba:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    12bc:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    12be:	6833      	ldr	r3, [r6, #0]
    12c0:	0152      	lsls	r2, r2, #5
    12c2:	5cd6      	ldrb	r6, [r2, r3]
    12c4:	00ad      	lsls	r5, r5, #2
    12c6:	43be      	bics	r6, r7
    12c8:	46b4      	mov	ip, r6
    12ca:	2603      	movs	r6, #3
    12cc:	4667      	mov	r7, ip
    12ce:	433e      	orrs	r6, r7
    12d0:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    12d2:	0022      	movs	r2, r4
    12d4:	321d      	adds	r2, #29
    12d6:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    12d8:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    12da:	2201      	movs	r2, #1
    12dc:	181b      	adds	r3, r3, r0
    12de:	33ff      	adds	r3, #255	; 0xff
    12e0:	7a99      	ldrb	r1, [r3, #10]
		release();
    12e2:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    12e4:	430a      	orrs	r2, r1
    12e6:	729a      	strb	r2, [r3, #10]
		release();
    12e8:	f7ff fccc 	bl	c84 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    12ec:	4b06      	ldr	r3, [pc, #24]	; (1308 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    12ee:	515c      	str	r4, [r3, r5]
    12f0:	e7a9      	b.n	1246 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    12f2:	0011      	movs	r1, r2
    12f4:	0028      	movs	r0, r5
    12f6:	f7ff fc1d 	bl	b34 <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    12fa:	e7a4      	b.n	1246 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    12fc:	200005ac 	.word	0x200005ac
    1300:	8fffffff 	.word	0x8fffffff
    1304:	20000120 	.word	0x20000120
    1308:	200000f8 	.word	0x200000f8
    130c:	000030ec 	.word	0x000030ec

00001310 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    1310:	b570      	push	{r4, r5, r6, lr}
    1312:	0005      	movs	r5, r0
    1314:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    1316:	4b06      	ldr	r3, [pc, #24]	; (1330 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    1318:	00a2      	lsls	r2, r4, #2
    131a:	58d2      	ldr	r2, [r2, r3]
    131c:	2a00      	cmp	r2, #0
    131e:	d006      	beq.n	132e <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    1320:	0021      	movs	r1, r4
    1322:	0028      	movs	r0, r5
    1324:	3401      	adds	r4, #1
    1326:	f7ff ff71 	bl	120c <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    132a:	2c0a      	cmp	r4, #10
    132c:	d1f3      	bne.n	1316 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    132e:	bd70      	pop	{r4, r5, r6, pc}
    1330:	200000cc 	.word	0x200000cc

00001334 <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1334:	4b0b      	ldr	r3, [pc, #44]	; (1364 <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1336:	b2ca      	uxtb	r2, r1
    1338:	480b      	ldr	r0, [pc, #44]	; (1368 <_ZN14USBDeviceClass5clearEm+0x34>)
    133a:	0189      	lsls	r1, r1, #6
    133c:	1859      	adds	r1, r3, r1
    133e:	0153      	lsls	r3, r2, #5
    1340:	18c3      	adds	r3, r0, r3
    1342:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1344:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1346:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1348:	0b89      	lsrs	r1, r1, #14
    134a:	0389      	lsls	r1, r1, #14
    134c:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    134e:	6803      	ldr	r3, [r0, #0]
    1350:	0152      	lsls	r2, r2, #5
    1352:	189a      	adds	r2, r3, r2
    1354:	2302      	movs	r3, #2
    1356:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1358:	7951      	ldrb	r1, [r2, #5]
    135a:	3b82      	subs	r3, #130	; 0x82
    135c:	430b      	orrs	r3, r1
    135e:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    1360:	4770      	bx	lr
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	20000120 	.word	0x20000120
    1368:	200005ac 	.word	0x200005ac

0000136c <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    136c:	4b08      	ldr	r3, [pc, #32]	; (1390 <_ZN14USBDeviceClass9availableEm+0x24>)
    136e:	008a      	lsls	r2, r1, #2
    1370:	58d0      	ldr	r0, [r2, r3]
{
    1372:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    1374:	2800      	cmp	r0, #0
    1376:	d003      	beq.n	1380 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    1378:	6803      	ldr	r3, [r0, #0]
    137a:	689b      	ldr	r3, [r3, #8]
    137c:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    137e:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1380:	b2c9      	uxtb	r1, r1
    1382:	4b04      	ldr	r3, [pc, #16]	; (1394 <_ZN14USBDeviceClass9availableEm+0x28>)
    1384:	0149      	lsls	r1, r1, #5
    1386:	1859      	adds	r1, r3, r1
    1388:	6888      	ldr	r0, [r1, #8]
    138a:	0480      	lsls	r0, r0, #18
    138c:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    138e:	e7f6      	b.n	137e <_ZN14USBDeviceClass9availableEm+0x12>
    1390:	200000f8 	.word	0x200000f8
    1394:	200005ac 	.word	0x200005ac

00001398 <_ZN14USBDeviceClass5flushEm>:
{
    1398:	b510      	push	{r4, lr}
    139a:	000c      	movs	r4, r1
	if (available(ep)) {
    139c:	f7ff ffe6 	bl	136c <_ZN14USBDeviceClass9availableEm>
    13a0:	2800      	cmp	r0, #0
    13a2:	d00c      	beq.n	13be <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    13a4:	4b06      	ldr	r3, [pc, #24]	; (13c0 <_ZN14USBDeviceClass5flushEm+0x28>)
    13a6:	b2e4      	uxtb	r4, r4
    13a8:	681b      	ldr	r3, [r3, #0]
    13aa:	3408      	adds	r4, #8
    13ac:	0164      	lsls	r4, r4, #5
    13ae:	191c      	adds	r4, r3, r4
    13b0:	2380      	movs	r3, #128	; 0x80
    13b2:	7962      	ldrb	r2, [r4, #5]
    13b4:	425b      	negs	r3, r3
    13b6:	4313      	orrs	r3, r2
    13b8:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    13ba:	2302      	movs	r3, #2
    13bc:	71e3      	strb	r3, [r4, #7]
}
    13be:	bd10      	pop	{r4, pc}
    13c0:	200005ac 	.word	0x200005ac

000013c4 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    13c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13c6:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    13c8:	4b30      	ldr	r3, [pc, #192]	; (148c <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    13ca:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    13cc:	681b      	ldr	r3, [r3, #0]
{
    13ce:	0007      	movs	r7, r0
    13d0:	000d      	movs	r5, r1
    13d2:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    13d4:	2b00      	cmp	r3, #0
    13d6:	d056      	beq.n	1486 <_ZN14USBDeviceClass4recvEmPvm+0xc2>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    13d8:	4e2d      	ldr	r6, [pc, #180]	; (1490 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    13da:	7831      	ldrb	r1, [r6, #0]
    13dc:	b2c9      	uxtb	r1, r1
    13de:	2900      	cmp	r1, #0
    13e0:	d102      	bne.n	13e8 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    13e2:	2019      	movs	r0, #25
    13e4:	f000 fcac 	bl	1d40 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    13e8:	2364      	movs	r3, #100	; 0x64
    13ea:	7033      	strb	r3, [r6, #0]
#endif

	if (epHandlers[ep]) {
    13ec:	4b29      	ldr	r3, [pc, #164]	; (1494 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    13ee:	00aa      	lsls	r2, r5, #2
    13f0:	58d0      	ldr	r0, [r2, r3]
    13f2:	2800      	cmp	r0, #0
    13f4:	d008      	beq.n	1408 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    13f6:	6803      	ldr	r3, [r0, #0]
    13f8:	0022      	movs	r2, r4
    13fa:	685b      	ldr	r3, [r3, #4]
    13fc:	9902      	ldr	r1, [sp, #8]
    13fe:	4798      	blx	r3
    1400:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    1402:	0020      	movs	r0, r4
    1404:	b005      	add	sp, #20
    1406:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    1408:	0029      	movs	r1, r5
    140a:	0038      	movs	r0, r7
    140c:	f7ff ffae 	bl	136c <_ZN14USBDeviceClass9availableEm>
    1410:	4284      	cmp	r4, r0
    1412:	d904      	bls.n	141e <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    1414:	0029      	movs	r1, r5
    1416:	0038      	movs	r0, r7
    1418:	f7ff ffa8 	bl	136c <_ZN14USBDeviceClass9availableEm>
    141c:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    141e:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1420:	b2eb      	uxtb	r3, r5
    1422:	4e1d      	ldr	r6, [pc, #116]	; (1498 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    1424:	9303      	str	r3, [sp, #12]
    1426:	015b      	lsls	r3, r3, #5
    1428:	9301      	str	r3, [sp, #4]
    142a:	18f2      	adds	r2, r6, r3
    142c:	6893      	ldr	r3, [r2, #8]
    142e:	0b9b      	lsrs	r3, r3, #14
    1430:	039b      	lsls	r3, r3, #14
    1432:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    1434:	9a01      	ldr	r2, [sp, #4]
    1436:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    1438:	9802      	ldr	r0, [sp, #8]
    143a:	189b      	adds	r3, r3, r2
    143c:	33ff      	adds	r3, #255	; 0xff
    143e:	7a5a      	ldrb	r2, [r3, #9]
    1440:	430a      	orrs	r2, r1
    1442:	4916      	ldr	r1, [pc, #88]	; (149c <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    1444:	725a      	strb	r2, [r3, #9]
    1446:	01ab      	lsls	r3, r5, #6
    1448:	18c9      	adds	r1, r1, r3
    144a:	0022      	movs	r2, r4
    144c:	f001 fd0e 	bl	2e6c <memcpy>
	if (len && !available(ep)) {
    1450:	2c00      	cmp	r4, #0
    1452:	d0d6      	beq.n	1402 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1454:	0029      	movs	r1, r5
    1456:	0038      	movs	r0, r7
    1458:	f7ff ff88 	bl	136c <_ZN14USBDeviceClass9availableEm>
    145c:	2800      	cmp	r0, #0
    145e:	d1d0      	bne.n	1402 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1460:	2140      	movs	r1, #64	; 0x40
    1462:	9b03      	ldr	r3, [sp, #12]
    1464:	6832      	ldr	r2, [r6, #0]
    1466:	3308      	adds	r3, #8
    1468:	015b      	lsls	r3, r3, #5
    146a:	18d3      	adds	r3, r2, r3
    146c:	7918      	ldrb	r0, [r3, #4]
    146e:	4301      	orrs	r1, r0
    1470:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    1472:	2101      	movs	r1, #1
    1474:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1476:	2101      	movs	r1, #1
    1478:	9b01      	ldr	r3, [sp, #4]
    147a:	18d3      	adds	r3, r2, r3
    147c:	33ff      	adds	r3, #255	; 0xff
    147e:	7a9a      	ldrb	r2, [r3, #10]
    1480:	430a      	orrs	r2, r1
    1482:	729a      	strb	r2, [r3, #10]
    1484:	e7bd      	b.n	1402 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    1486:	2401      	movs	r4, #1
    1488:	4264      	negs	r4, r4
    148a:	e7ba      	b.n	1402 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    148c:	200005a4 	.word	0x200005a4
    1490:	20000114 	.word	0x20000114
    1494:	200000f8 	.word	0x200000f8
    1498:	200005ac 	.word	0x200005ac
    149c:	200002e0 	.word	0x200002e0

000014a0 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    14a0:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    14a2:	466b      	mov	r3, sp
    14a4:	1ddc      	adds	r4, r3, #7
    14a6:	0022      	movs	r2, r4
    14a8:	2301      	movs	r3, #1
    14aa:	f7ff ff8b 	bl	13c4 <_ZN14USBDeviceClass4recvEmPvm>
    14ae:	2801      	cmp	r0, #1
    14b0:	d101      	bne.n	14b6 <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    14b2:	7820      	ldrb	r0, [r4, #0]
	}
}
    14b4:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    14b6:	2001      	movs	r0, #1
    14b8:	4240      	negs	r0, r0
    14ba:	e7fb      	b.n	14b4 <_ZN14USBDeviceClass4recvEm+0x14>

000014bc <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    14bc:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    14be:	4b13      	ldr	r3, [pc, #76]	; (150c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    14c0:	b2cc      	uxtb	r4, r1
    14c2:	4a13      	ldr	r2, [pc, #76]	; (1510 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    14c4:	0160      	lsls	r0, r4, #5
    14c6:	0189      	lsls	r1, r1, #6
    14c8:	1859      	adds	r1, r3, r1
    14ca:	1813      	adds	r3, r2, r0
    14cc:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    14ce:	6899      	ldr	r1, [r3, #8]
    14d0:	4d10      	ldr	r5, [pc, #64]	; (1514 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14d2:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    14d4:	400d      	ands	r5, r1
    14d6:	2180      	movs	r1, #128	; 0x80
    14d8:	0349      	lsls	r1, r1, #13
    14da:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14dc:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    14de:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    14e0:	6899      	ldr	r1, [r3, #8]
    14e2:	0b89      	lsrs	r1, r1, #14
    14e4:	0389      	lsls	r1, r1, #14
    14e6:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14e8:	6811      	ldr	r1, [r2, #0]
    14ea:	0163      	lsls	r3, r4, #5
    14ec:	18cb      	adds	r3, r1, r3
    14ee:	791e      	ldrb	r6, [r3, #4]
    14f0:	4335      	orrs	r5, r6
    14f2:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    14f4:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    14f6:	066d      	lsls	r5, r5, #25
    14f8:	d5fc      	bpl.n	14f4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    14fa:	0164      	lsls	r4, r4, #5
    14fc:	1909      	adds	r1, r1, r4
    14fe:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    1500:	07db      	lsls	r3, r3, #31
    1502:	d5fc      	bpl.n	14fe <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1504:	1812      	adds	r2, r2, r0
    1506:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    1508:	b2c0      	uxtb	r0, r0
}
    150a:	bd70      	pop	{r4, r5, r6, pc}
    150c:	200002e0 	.word	0x200002e0
    1510:	200005ac 	.word	0x200005ac
    1514:	f0003fff 	.word	0xf0003fff

00001518 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    151c:	2100      	movs	r1, #0
{
    151e:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    1520:	f7ff ffcc 	bl	14bc <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    1524:	42a0      	cmp	r0, r4
    1526:	d900      	bls.n	152a <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    1528:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    152a:	2300      	movs	r3, #0
		data[i] = buffer[i];
    152c:	4903      	ldr	r1, [pc, #12]	; (153c <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    152e:	42a3      	cmp	r3, r4
    1530:	d003      	beq.n	153a <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    1532:	5c5a      	ldrb	r2, [r3, r1]
    1534:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    1536:	3301      	adds	r3, #1
    1538:	e7f9      	b.n	152e <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    153a:	bd70      	pop	{r4, r5, r6, pc}
    153c:	200002e0 	.word	0x200002e0

00001540 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    1540:	b5f0      	push	{r4, r5, r6, r7, lr}
    1542:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    1544:	4b3f      	ldr	r3, [pc, #252]	; (1644 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
{
    1546:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1548:	681b      	ldr	r3, [r3, #0]
{
    154a:	000f      	movs	r7, r1
    154c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    154e:	2b00      	cmp	r3, #0
    1550:	d03f      	beq.n	15d2 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    1552:	2380      	movs	r3, #128	; 0x80
    1554:	01db      	lsls	r3, r3, #7
    1556:	429e      	cmp	r6, r3
    1558:	d83b      	bhi.n	15d2 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    155a:	4c3b      	ldr	r4, [pc, #236]	; (1648 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    155c:	7821      	ldrb	r1, [r4, #0]
    155e:	b2c9      	uxtb	r1, r1
    1560:	2900      	cmp	r1, #0
    1562:	d102      	bne.n	156a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    1564:	201a      	movs	r0, #26
    1566:	f000 fbeb 	bl	1d40 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    156a:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    156c:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    156e:	4a37      	ldr	r2, [pc, #220]	; (164c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    1570:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1572:	01bb      	lsls	r3, r7, #6
    1574:	18d3      	adds	r3, r2, r3
    1576:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1578:	2e00      	cmp	r6, #0
    157a:	d02c      	beq.n	15d6 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    157c:	4b34      	ldr	r3, [pc, #208]	; (1650 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	9303      	str	r3, [sp, #12]
    1582:	23ff      	movs	r3, #255	; 0xff
    1584:	403b      	ands	r3, r7
    1586:	001c      	movs	r4, r3
    1588:	9300      	str	r3, [sp, #0]
    158a:	3408      	adds	r4, #8
    158c:	9b03      	ldr	r3, [sp, #12]
    158e:	0164      	lsls	r4, r4, #5
    1590:	191c      	adds	r4, r3, r4
    1592:	79a3      	ldrb	r3, [r4, #6]
    1594:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    1596:	d021      	beq.n	15dc <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1598:	4b2e      	ldr	r3, [pc, #184]	; (1654 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    159a:	492f      	ldr	r1, [pc, #188]	; (1658 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    159c:	6818      	ldr	r0, [r3, #0]
    159e:	f001 fba1 	bl	2ce4 <__udivsi3>
    15a2:	4b2e      	ldr	r3, [pc, #184]	; (165c <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
    15a4:	2117      	movs	r1, #23
    15a6:	4358      	muls	r0, r3
    15a8:	f001 fb9c 	bl	2ce4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    15ac:	4b2c      	ldr	r3, [pc, #176]	; (1660 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    15ae:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    15b0:	0792      	lsls	r2, r2, #30
    15b2:	d413      	bmi.n	15dc <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    15b4:	5dda      	ldrb	r2, [r3, r7]
    15b6:	2a00      	cmp	r2, #0
    15b8:	d101      	bne.n	15be <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    15ba:	3801      	subs	r0, #1
    15bc:	d2f7      	bcs.n	15ae <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    15be:	2201      	movs	r2, #1
    15c0:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    15c2:	9b00      	ldr	r3, [sp, #0]
    15c4:	4a22      	ldr	r2, [pc, #136]	; (1650 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    15c6:	015b      	lsls	r3, r3, #5
    15c8:	18d3      	adds	r3, r2, r3
    15ca:	699a      	ldr	r2, [r3, #24]
    15cc:	0b92      	lsrs	r2, r2, #14
    15ce:	0392      	lsls	r2, r2, #14
    15d0:	619a      	str	r2, [r3, #24]
					return -1;
    15d2:	2501      	movs	r5, #1
    15d4:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    15d6:	0028      	movs	r0, r5
    15d8:	b005      	add	sp, #20
    15da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    15dc:	2200      	movs	r2, #0
    15de:	4b20      	ldr	r3, [pc, #128]	; (1660 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
    15e0:	0034      	movs	r4, r6
    15e2:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    15e4:	2e3f      	cmp	r6, #63	; 0x3f
    15e6:	d909      	bls.n	15fc <_ZN14USBDeviceClass4sendEmPKvm+0xbc>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    15e8:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    15ea:	2440      	movs	r4, #64	; 0x40
    15ec:	015a      	lsls	r2, r3, #5
    15ee:	4b18      	ldr	r3, [pc, #96]	; (1650 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    15f0:	189b      	adds	r3, r3, r2
    15f2:	2280      	movs	r2, #128	; 0x80
    15f4:	6999      	ldr	r1, [r3, #24]
    15f6:	0612      	lsls	r2, r2, #24
    15f8:	430a      	orrs	r2, r1
    15fa:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    15fc:	0022      	movs	r2, r4
    15fe:	9901      	ldr	r1, [sp, #4]
    1600:	9802      	ldr	r0, [sp, #8]
    1602:	f001 fc33 	bl	2e6c <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1606:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1608:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    160a:	015a      	lsls	r2, r3, #5
    160c:	4b10      	ldr	r3, [pc, #64]	; (1650 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    160e:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1610:	189b      	adds	r3, r3, r2
    1612:	9a02      	ldr	r2, [sp, #8]
		written += length;
    1614:	192d      	adds	r5, r5, r4
    1616:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1618:	699a      	ldr	r2, [r3, #24]
		len -= length;
    161a:	1b36      	subs	r6, r6, r4
    161c:	0b92      	lsrs	r2, r2, #14
    161e:	0392      	lsls	r2, r2, #14
    1620:	430a      	orrs	r2, r1
    1622:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1624:	9b00      	ldr	r3, [sp, #0]
    1626:	9a03      	ldr	r2, [sp, #12]
    1628:	3308      	adds	r3, #8
    162a:	015b      	lsls	r3, r3, #5
    162c:	18d3      	adds	r3, r2, r3
    162e:	2202      	movs	r2, #2
    1630:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1632:	7959      	ldrb	r1, [r3, #5]
    1634:	3a82      	subs	r2, #130	; 0x82
    1636:	430a      	orrs	r2, r1
    1638:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    163a:	9b01      	ldr	r3, [sp, #4]
    163c:	191b      	adds	r3, r3, r4
    163e:	9301      	str	r3, [sp, #4]
	while (len != 0)
    1640:	e79a      	b.n	1578 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	200005a4 	.word	0x200005a4
    1648:	20000115 	.word	0x20000115
    164c:	20000120 	.word	0x20000120
    1650:	200005ac 	.word	0x200005ac
    1654:	20000004 	.word	0x20000004
    1658:	000f4240 	.word	0x000f4240
    165c:	00011170 	.word	0x00011170
    1660:	20000117 	.word	0x20000117

00001664 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1664:	b570      	push	{r4, r5, r6, lr}
    1666:	000d      	movs	r5, r1
    1668:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    166a:	4e0d      	ldr	r6, [pc, #52]	; (16a0 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    166c:	01ab      	lsls	r3, r5, #6
    166e:	18f6      	adds	r6, r6, r3
{
    1670:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1672:	0030      	movs	r0, r6
    1674:	0022      	movs	r2, r4
    1676:	f001 fbf9 	bl	2e6c <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    167a:	b2ed      	uxtb	r5, r5
    167c:	4909      	ldr	r1, [pc, #36]	; (16a4 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    167e:	016d      	lsls	r5, r5, #5
    1680:	194d      	adds	r5, r1, r5
    1682:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1684:	69ab      	ldr	r3, [r5, #24]
    1686:	4a08      	ldr	r2, [pc, #32]	; (16a8 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1688:	0020      	movs	r0, r4
    168a:	4013      	ands	r3, r2
    168c:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    168e:	69ab      	ldr	r3, [r5, #24]
    1690:	04a2      	lsls	r2, r4, #18
    1692:	0b9b      	lsrs	r3, r3, #14
    1694:	0c92      	lsrs	r2, r2, #18
    1696:	039b      	lsls	r3, r3, #14
    1698:	4313      	orrs	r3, r2
    169a:	61ab      	str	r3, [r5, #24]
    169c:	bd70      	pop	{r4, r5, r6, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	20000120 	.word	0x20000120
    16a4:	200005ac 	.word	0x200005ac
    16a8:	f0003fff 	.word	0xf0003fff

000016ac <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    16ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    16ae:	4b10      	ldr	r3, [pc, #64]	; (16f0 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    16b0:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    16b2:	781b      	ldrb	r3, [r3, #0]
{
    16b4:	000f      	movs	r7, r1
    16b6:	0015      	movs	r5, r2
	if (_dry_run == true)
    16b8:	2b00      	cmp	r3, #0
    16ba:	d10c      	bne.n	16d6 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    16be:	0016      	movs	r6, r2
    16c0:	781c      	ldrb	r4, [r3, #0]
    16c2:	2c00      	cmp	r4, #0
    16c4:	d009      	beq.n	16da <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    16c6:	4e0c      	ldr	r6, [pc, #48]	; (16f8 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    16c8:	480c      	ldr	r0, [pc, #48]	; (16fc <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    16ca:	8834      	ldrh	r4, [r6, #0]
    16cc:	1900      	adds	r0, r0, r4
		_pack_size += len;
    16ce:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    16d0:	f001 fbcc 	bl	2e6c <memcpy>
		_pack_size += len;
    16d4:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    16d6:	0028      	movs	r0, r5
    16d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    16da:	2e00      	cmp	r6, #0
    16dc:	d0fb      	beq.n	16d6 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    16de:	193a      	adds	r2, r7, r4
    16e0:	0033      	movs	r3, r6
    16e2:	2100      	movs	r1, #0
    16e4:	9801      	ldr	r0, [sp, #4]
    16e6:	f7ff ffbd 	bl	1664 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    16ea:	1824      	adds	r4, r4, r0
		len -= sent;
    16ec:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    16ee:	e7f4      	b.n	16da <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    16f0:	200004a0 	.word	0x200004a0
    16f4:	200005a1 	.word	0x200005a1
    16f8:	200005a2 	.word	0x200005a2
    16fc:	200004a1 	.word	0x200004a1

00001700 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    1700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1702:	000e      	movs	r6, r1
    1704:	0015      	movs	r5, r2
		return false;
    1706:	2700      	movs	r7, #0
	if (maxlen < 2)
    1708:	2a01      	cmp	r2, #1
    170a:	d927      	bls.n	175c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    170c:	0010      	movs	r0, r2
    170e:	f001 fb99 	bl	2e44 <malloc>
    1712:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1714:	0030      	movs	r0, r6
    1716:	f001 fc75 	bl	3004 <strlen>
    171a:	3001      	adds	r0, #1
    171c:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    171e:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1720:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    1722:	2202      	movs	r2, #2
		buffer[i] = 0;
    1724:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    1726:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    1728:	4295      	cmp	r5, r2
    172a:	d90d      	bls.n	1748 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    172c:	7831      	ldrb	r1, [r6, #0]
    172e:	2900      	cmp	r1, #0
    1730:	d00a      	beq.n	1748 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    1732:	1c53      	adds	r3, r2, #1
    1734:	b2db      	uxtb	r3, r3
    1736:	3601      	adds	r6, #1
    1738:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    173a:	429d      	cmp	r5, r3
    173c:	d003      	beq.n	1746 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    173e:	3202      	adds	r2, #2
		buffer[i] = 0;
    1740:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    1742:	b2d2      	uxtb	r2, r2
    1744:	e7f0      	b.n	1728 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    1746:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    1748:	0021      	movs	r1, r4
    174a:	4805      	ldr	r0, [pc, #20]	; (1760 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    174c:	f7ff ffae 	bl	16ac <_ZN14USBDeviceClass11sendControlEPKvm>
    1750:	1e47      	subs	r7, r0, #1
    1752:	41b8      	sbcs	r0, r7
    1754:	b2c7      	uxtb	r7, r0
	free(buffer);
    1756:	0020      	movs	r0, r4
    1758:	f001 fb7e 	bl	2e58 <free>
}
    175c:	0038      	movs	r0, r7
    175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1760:	200000f4 	.word	0x200000f4

00001764 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1764:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1766:	2700      	movs	r7, #0
	_dry_run = true;
    1768:	2601      	movs	r6, #1
{
    176a:	b087      	sub	sp, #28
	_dry_run = true;
    176c:	4b1e      	ldr	r3, [pc, #120]	; (17e8 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    176e:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1770:	a902      	add	r1, sp, #8
	_dry_run = true;
    1772:	701e      	strb	r6, [r3, #0]
{
    1774:	0005      	movs	r5, r0
	uint32_t total = 0;
    1776:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1778:	f7ff fc33 	bl	fe2 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    177c:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    177e:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1780:	2209      	movs	r2, #9
    1782:	0039      	movs	r1, r7
    1784:	0020      	movs	r0, r4
    1786:	f001 fb7a 	bl	2e7e <memset>
    178a:	2309      	movs	r3, #9
    178c:	7023      	strb	r3, [r4, #0]
    178e:	2302      	movs	r3, #2
    1790:	7063      	strb	r3, [r4, #1]
    1792:	339e      	adds	r3, #158	; 0x9e
    1794:	71e3      	strb	r3, [r4, #7]
    1796:	335a      	adds	r3, #90	; 0x5a
    1798:	7223      	strb	r3, [r4, #8]
    179a:	9b02      	ldr	r3, [sp, #8]
    179c:	7166      	strb	r6, [r4, #5]
    179e:	3309      	adds	r3, #9
    17a0:	8063      	strh	r3, [r4, #2]
    17a2:	466b      	mov	r3, sp
    17a4:	791b      	ldrb	r3, [r3, #4]
    17a6:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    17a8:	4b0f      	ldr	r3, [pc, #60]	; (17e8 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    17aa:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    17ac:	9b00      	ldr	r3, [sp, #0]
    17ae:	2b09      	cmp	r3, #9
    17b0:	d107      	bne.n	17c2 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    17b2:	001a      	movs	r2, r3
    17b4:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    17b6:	0028      	movs	r0, r5
    17b8:	f7ff ff78 	bl	16ac <_ZN14USBDeviceClass11sendControlEPKvm>
}
    17bc:	2001      	movs	r0, #1
    17be:	b007      	add	sp, #28
    17c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    17c2:	4b0a      	ldr	r3, [pc, #40]	; (17ec <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    17c4:	2209      	movs	r2, #9
		_pack_message = true;
    17c6:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    17c8:	4e09      	ldr	r6, [pc, #36]	; (17f0 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    17ca:	0021      	movs	r1, r4
    17cc:	0028      	movs	r0, r5
	total = 0;
    17ce:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    17d0:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    17d2:	f7ff ff6b 	bl	16ac <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    17d6:	a902      	add	r1, sp, #8
    17d8:	0028      	movs	r0, r5
    17da:	f7ff fc02 	bl	fe2 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    17de:	4b03      	ldr	r3, [pc, #12]	; (17ec <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    17e0:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    17e2:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    17e4:	4903      	ldr	r1, [pc, #12]	; (17f4 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    17e6:	e7e6      	b.n	17b6 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    17e8:	200004a0 	.word	0x200004a0
    17ec:	200005a1 	.word	0x200005a1
    17f0:	200005a2 	.word	0x200005a2
    17f4:	200004a1 	.word	0x200004a1

000017f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    17f8:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    17fa:	78ce      	ldrb	r6, [r1, #3]
{
    17fc:	b092      	sub	sp, #72	; 0x48
    17fe:	0005      	movs	r5, r0
    1800:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1802:	2e02      	cmp	r6, #2
    1804:	d10b      	bne.n	181e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    1806:	798b      	ldrb	r3, [r1, #6]
    1808:	79c9      	ldrb	r1, [r1, #7]
    180a:	482e      	ldr	r0, [pc, #184]	; (18c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    180c:	0209      	lsls	r1, r1, #8
    180e:	4319      	orrs	r1, r3
    1810:	f7ff ffa8 	bl	1764 <_ZN14USBDeviceClass17sendConfigurationEm>
    1814:	1e41      	subs	r1, r0, #1
    1816:	4188      	sbcs	r0, r1
    1818:	b2c0      	uxtb	r0, r0
}
    181a:	b012      	add	sp, #72	; 0x48
    181c:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    181e:	f001 fa47 	bl	2cb0 <_Z12PluggableUSBv>
    1822:	0021      	movs	r1, r4
    1824:	f001 f9d8 	bl	2bd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1828:	2800      	cmp	r0, #0
    182a:	d003      	beq.n	1834 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    182c:	17c1      	asrs	r1, r0, #31
    182e:	1a08      	subs	r0, r1, r0
    1830:	0fc0      	lsrs	r0, r0, #31
    1832:	e7f2      	b.n	181a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1834:	2e01      	cmp	r6, #1
    1836:	d10e      	bne.n	1856 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    1838:	79e2      	ldrb	r2, [r4, #7]
    183a:	79a3      	ldrb	r3, [r4, #6]
    183c:	0212      	lsls	r2, r2, #8
    183e:	431a      	orrs	r2, r3
    1840:	4921      	ldr	r1, [pc, #132]	; (18c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    1842:	2a11      	cmp	r2, #17
    1844:	dc3c      	bgt.n	18c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    1846:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1848:	2a00      	cmp	r2, #0
    184a:	d039      	beq.n	18c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    184c:	0028      	movs	r0, r5
    184e:	f7ff ff2d 	bl	16ac <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1852:	2001      	movs	r0, #1
    1854:	e7e1      	b.n	181a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1856:	2e03      	cmp	r6, #3
    1858:	d1df      	bne.n	181a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    185a:	78a3      	ldrb	r3, [r4, #2]
    185c:	2b00      	cmp	r3, #0
    185e:	d028      	beq.n	18b2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1860:	2b02      	cmp	r3, #2
    1862:	d108      	bne.n	1876 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1864:	79e2      	ldrb	r2, [r4, #7]
    1866:	79a3      	ldrb	r3, [r4, #6]
    1868:	0212      	lsls	r2, r2, #8
    186a:	4918      	ldr	r1, [pc, #96]	; (18cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    186c:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    186e:	0028      	movs	r0, r5
    1870:	f7ff ff46 	bl	1700 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    1874:	e7d1      	b.n	181a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    1876:	2b01      	cmp	r3, #1
    1878:	d105      	bne.n	1886 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    187a:	79e2      	ldrb	r2, [r4, #7]
    187c:	79a3      	ldrb	r3, [r4, #6]
    187e:	0212      	lsls	r2, r2, #8
    1880:	431a      	orrs	r2, r3
    1882:	4913      	ldr	r1, [pc, #76]	; (18d0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1884:	e7f3      	b.n	186e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    1886:	2b03      	cmp	r3, #3
    1888:	d1c7      	bne.n	181a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    188a:	0001      	movs	r1, r0
    188c:	2241      	movs	r2, #65	; 0x41
    188e:	a801      	add	r0, sp, #4
    1890:	f001 faf5 	bl	2e7e <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    1894:	f001 fa0c 	bl	2cb0 <_Z12PluggableUSBv>
    1898:	a901      	add	r1, sp, #4
    189a:	f001 f9ad 	bl	2bf8 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    189e:	2800      	cmp	r0, #0
    18a0:	d005      	beq.n	18ae <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    18a2:	79e2      	ldrb	r2, [r4, #7]
    18a4:	79a3      	ldrb	r3, [r4, #6]
    18a6:	0212      	lsls	r2, r2, #8
    18a8:	431a      	orrs	r2, r3
    18aa:	a901      	add	r1, sp, #4
    18ac:	e7df      	b.n	186e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    18ae:	7803      	ldrb	r3, [r0, #0]
    18b0:	deff      	udf	#255	; 0xff
    18b2:	79e2      	ldrb	r2, [r4, #7]
    18b4:	79a3      	ldrb	r3, [r4, #6]
    18b6:	0212      	lsls	r2, r2, #8
    18b8:	431a      	orrs	r2, r3
    18ba:	4906      	ldr	r1, [pc, #24]	; (18d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    18bc:	2a03      	cmp	r2, #3
    18be:	ddc2      	ble.n	1846 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    18c0:	780a      	ldrb	r2, [r1, #0]
    18c2:	e7c3      	b.n	184c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    18c4:	200000f4 	.word	0x200000f4
    18c8:	00003126 	.word	0x00003126
    18cc:	00003108 	.word	0x00003108
    18d0:	0000311a 	.word	0x0000311a
    18d4:	00003116 	.word	0x00003116

000018d8 <_ZN14USBDeviceClass7sendZlpEm>:
    18d8:	b2cb      	uxtb	r3, r1
    18da:	4904      	ldr	r1, [pc, #16]	; (18ec <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    18dc:	015b      	lsls	r3, r3, #5
    18de:	18c9      	adds	r1, r1, r3
    18e0:	698b      	ldr	r3, [r1, #24]
    18e2:	0b9b      	lsrs	r3, r3, #14
    18e4:	039b      	lsls	r3, r3, #14
    18e6:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    18e8:	4770      	bx	lr
    18ea:	46c0      	nop			; (mov r8, r8)
    18ec:	200005ac 	.word	0x200005ac

000018f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    18f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    18f2:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    18f4:	7848      	ldrb	r0, [r1, #1]
{
    18f6:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    18f8:	280b      	cmp	r0, #11
    18fa:	d811      	bhi.n	1920 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    18fc:	f001 f9e8 	bl	2cd0 <__gnu_thumb1_case_uqi>
    1900:	2e101d06 	.word	0x2e101d06
    1904:	64484310 	.word	0x64484310
    1908:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    190c:	7809      	ldrb	r1, [r1, #0]
    190e:	aa01      	add	r2, sp, #4
    1910:	2900      	cmp	r1, #0
    1912:	d107      	bne.n	1924 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1914:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1916:	7011      	strb	r1, [r2, #0]
    1918:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    191a:	0028      	movs	r0, r5
    191c:	f7ff fea2 	bl	1664 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1920:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    1922:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    1924:	2300      	movs	r3, #0
    1926:	7013      	strb	r3, [r2, #0]
    1928:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    192a:	4b28      	ldr	r3, [pc, #160]	; (19cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    192c:	781b      	ldrb	r3, [r3, #0]
    192e:	2b01      	cmp	r3, #1
    1930:	d100      	bne.n	1934 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1932:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1934:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1936:	2100      	movs	r1, #0
    1938:	e7ef      	b.n	191a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    193a:	788a      	ldrb	r2, [r1, #2]
    193c:	2300      	movs	r3, #0
    193e:	2a01      	cmp	r2, #1
    1940:	d104      	bne.n	194c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1942:	aa01      	add	r2, sp, #4
    1944:	7013      	strb	r3, [r2, #0]
    1946:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1948:	4b21      	ldr	r3, [pc, #132]	; (19d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    194a:	e7ef      	b.n	192c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    194c:	4a1f      	ldr	r2, [pc, #124]	; (19cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    194e:	7013      	strb	r3, [r2, #0]
    1950:	4a20      	ldr	r2, [pc, #128]	; (19d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1952:	6993      	ldr	r3, [r2, #24]
    1954:	0b9b      	lsrs	r3, r3, #14
    1956:	039b      	lsls	r3, r3, #14
    1958:	6193      	str	r3, [r2, #24]
    195a:	e7e1      	b.n	1920 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    195c:	788c      	ldrb	r4, [r1, #2]
    195e:	2c01      	cmp	r4, #1
    1960:	d106      	bne.n	1970 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1962:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1964:	4b1a      	ldr	r3, [pc, #104]	; (19d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    1966:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1968:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    196a:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    196c:	0023      	movs	r3, r4
    196e:	e7d4      	b.n	191a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1970:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    1972:	2c00      	cmp	r4, #0
    1974:	d1d5      	bne.n	1922 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    1976:	4b15      	ldr	r3, [pc, #84]	; (19cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1978:	4a16      	ldr	r2, [pc, #88]	; (19d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    197a:	7018      	strb	r0, [r3, #0]
    197c:	6993      	ldr	r3, [r2, #24]
    197e:	0b9b      	lsrs	r3, r3, #14
    1980:	039b      	lsls	r3, r3, #14
    1982:	6193      	str	r3, [r2, #24]
			return true;
    1984:	e7cd      	b.n	1922 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1986:	7889      	ldrb	r1, [r1, #2]
    1988:	0028      	movs	r0, r5
    198a:	f7ff fc09 	bl	11a0 <_ZN14USBDeviceClass10setAddressEm>
    198e:	e7c7      	b.n	1920 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1990:	0028      	movs	r0, r5
    1992:	f7ff ff31 	bl	17f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1996:	e7c4      	b.n	1922 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1998:	2301      	movs	r3, #1
    199a:	4a0f      	ldr	r2, [pc, #60]	; (19d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    199c:	e7cb      	b.n	1936 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    199e:	780b      	ldrb	r3, [r1, #0]
			return false;
    19a0:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    19a2:	06db      	lsls	r3, r3, #27
    19a4:	d1bd      	bne.n	1922 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    19a6:	0028      	movs	r0, r5
    19a8:	f7ff fcb2 	bl	1310 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    19ac:	78a2      	ldrb	r2, [r4, #2]
    19ae:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    19b0:	480a      	ldr	r0, [pc, #40]	; (19dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    19b2:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    19b4:	f001 f8d8 	bl	2b68 <_ZN7Serial_15enableInterruptEv>
    19b8:	e7ca      	b.n	1950 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    19ba:	2301      	movs	r3, #1
    19bc:	4a08      	ldr	r2, [pc, #32]	; (19e0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    19be:	e7ba      	b.n	1936 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    19c0:	788a      	ldrb	r2, [r1, #2]
    19c2:	4b07      	ldr	r3, [pc, #28]	; (19e0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    19c4:	601a      	str	r2, [r3, #0]
    19c6:	e7c3      	b.n	1950 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    19c8:	2000      	movs	r0, #0
    19ca:	e7aa      	b.n	1922 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    19cc:	20000116 	.word	0x20000116
    19d0:	2000011e 	.word	0x2000011e
    19d4:	200005ac 	.word	0x200005ac
    19d8:	200005a4 	.word	0x200005a4
    19dc:	20000d74 	.word	0x20000d74
    19e0:	200005a8 	.word	0x200005a8

000019e4 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    19e4:	4b4b      	ldr	r3, [pc, #300]	; (1b14 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    19e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    19e8:	781e      	ldrb	r6, [r3, #0]
{
    19ea:	0005      	movs	r5, r0
	if (_pack_message == true) {
    19ec:	2e00      	cmp	r6, #0
    19ee:	d000      	beq.n	19f2 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    19f0:	e080      	b.n	1af4 <_ZN14USBDeviceClass10ISRHandlerEv+0x110>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    19f2:	4c49      	ldr	r4, [pc, #292]	; (1b18 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    19f4:	6823      	ldr	r3, [r4, #0]
    19f6:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    19f8:	0712      	lsls	r2, r2, #28
    19fa:	d50d      	bpl.n	1a18 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    19fc:	2208      	movs	r2, #8
    19fe:	0031      	movs	r1, r6
    1a00:	839a      	strh	r2, [r3, #28]
    1a02:	0030      	movs	r0, r6
    1a04:	f7ff f896 	bl	b34 <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1a08:	2210      	movs	r2, #16
    1a0a:	6823      	ldr	r3, [r4, #0]
    1a0c:	33ff      	adds	r3, #255	; 0xff
    1a0e:	7a99      	ldrb	r1, [r3, #10]
    1a10:	430a      	orrs	r2, r1
    1a12:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1a14:	4b41      	ldr	r3, [pc, #260]	; (1b1c <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1a16:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1a18:	6823      	ldr	r3, [r4, #0]
    1a1a:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1a1c:	0752      	lsls	r2, r2, #29
    1a1e:	d51f      	bpl.n	1a60 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1a20:	2204      	movs	r2, #4
    1a22:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1a24:	4a3e      	ldr	r2, [pc, #248]	; (1b20 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1a26:	7813      	ldrb	r3, [r2, #0]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d00a      	beq.n	1a42 <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    1a2c:	7813      	ldrb	r3, [r2, #0]
    1a2e:	3b01      	subs	r3, #1
    1a30:	b2db      	uxtb	r3, r3
    1a32:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1a34:	7813      	ldrb	r3, [r2, #0]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d103      	bne.n	1a42 <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1a3a:	2101      	movs	r1, #1
    1a3c:	201a      	movs	r0, #26
    1a3e:	f000 f97f 	bl	1d40 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1a42:	4a38      	ldr	r2, [pc, #224]	; (1b24 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1a44:	7813      	ldrb	r3, [r2, #0]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d00a      	beq.n	1a60 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1a4a:	7813      	ldrb	r3, [r2, #0]
    1a4c:	3b01      	subs	r3, #1
    1a4e:	b2db      	uxtb	r3, r3
    1a50:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1a52:	7813      	ldrb	r3, [r2, #0]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d103      	bne.n	1a60 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1a58:	2101      	movs	r1, #1
    1a5a:	2019      	movs	r0, #25
    1a5c:	f000 f970 	bl	1d40 <digitalWrite>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1a60:	6823      	ldr	r3, [r4, #0]
    1a62:	33ff      	adds	r3, #255	; 0xff
    1a64:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    1a66:	0692      	lsls	r2, r2, #26
    1a68:	d503      	bpl.n	1a72 <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1a6a:	2220      	movs	r2, #32
    1a6c:	7a59      	ldrb	r1, [r3, #9]
    1a6e:	430a      	orrs	r2, r1
    1a70:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1a72:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1a74:	06d2      	lsls	r2, r2, #27
    1a76:	d525      	bpl.n	1ac4 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1a78:	4668      	mov	r0, sp
    1a7a:	4a2b      	ldr	r2, [pc, #172]	; (1b28 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1a7c:	4669      	mov	r1, sp
    1a7e:	cac0      	ldmia	r2!, {r6, r7}
    1a80:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1a82:	68a2      	ldr	r2, [r4, #8]
    1a84:	0b92      	lsrs	r2, r2, #14
    1a86:	0392      	lsls	r2, r2, #14
    1a88:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1a8a:	2240      	movs	r2, #64	; 0x40
    1a8c:	7958      	ldrb	r0, [r3, #5]
    1a8e:	4302      	orrs	r2, r0
    1a90:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1a92:	2360      	movs	r3, #96	; 0x60
    1a94:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    1a96:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1a98:	421a      	tst	r2, r3
    1a9a:	d12c      	bne.n	1af6 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
			ok = handleStandardSetup(setup);
    1a9c:	f7ff ff28 	bl	18f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1aa0:	2800      	cmp	r0, #0
    1aa2:	d02b      	beq.n	1afc <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1aa4:	2280      	movs	r2, #128	; 0x80
    1aa6:	6823      	ldr	r3, [r4, #0]
    1aa8:	4252      	negs	r2, r2
    1aaa:	33ff      	adds	r3, #255	; 0xff
    1aac:	7999      	ldrb	r1, [r3, #6]
    1aae:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1ab0:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1ab2:	6823      	ldr	r3, [r4, #0]
    1ab4:	33ff      	adds	r3, #255	; 0xff
    1ab6:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1ab8:	0652      	lsls	r2, r2, #25
    1aba:	d503      	bpl.n	1ac4 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1abc:	2240      	movs	r2, #64	; 0x40
    1abe:	7a59      	ldrb	r1, [r3, #9]
    1ac0:	430a      	orrs	r2, r1
    1ac2:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1ac4:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1ac6:	2501      	movs	r5, #1
    1ac8:	6823      	ldr	r3, [r4, #0]
    1aca:	33ff      	adds	r3, #255	; 0xff
    1acc:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1ace:	002f      	movs	r7, r5
    1ad0:	6823      	ldr	r3, [r4, #0]
    1ad2:	3708      	adds	r7, #8
    1ad4:	017f      	lsls	r7, r7, #5
    1ad6:	19db      	adds	r3, r3, r7
    1ad8:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1ada:	2b00      	cmp	r3, #0
    1adc:	d007      	beq.n	1aee <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			if (epHandlers[ep]) {
    1ade:	4b13      	ldr	r3, [pc, #76]	; (1b2c <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1ae0:	00aa      	lsls	r2, r5, #2
    1ae2:	58d0      	ldr	r0, [r2, r3]
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d00c      	beq.n	1b02 <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
				epHandlers[ep]->handleEndpoint();
    1ae8:	6803      	ldr	r3, [r0, #0]
    1aea:	681b      	ldr	r3, [r3, #0]
    1aec:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1aee:	3501      	adds	r5, #1
    1af0:	2d08      	cmp	r5, #8
    1af2:	d1ec      	bne.n	1ace <_ZN14USBDeviceClass10ISRHandlerEv+0xea>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    1af4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    1af6:	f7ff fb77 	bl	11e8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1afa:	e7d1      	b.n	1aa0 <_ZN14USBDeviceClass10ISRHandlerEv+0xbc>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1afc:	2220      	movs	r2, #32
    1afe:	4b0c      	ldr	r3, [pc, #48]	; (1b30 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1b00:	e7d6      	b.n	1ab0 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
				PluggableUSB().handleEndpoint(ep);
    1b02:	f001 f8d5 	bl	2cb0 <_Z12PluggableUSBv>
    1b06:	0029      	movs	r1, r5
    1b08:	f001 f899 	bl	2c3e <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1b0c:	6823      	ldr	r3, [r4, #0]
    1b0e:	19df      	adds	r7, r3, r7
    1b10:	71fe      	strb	r6, [r7, #7]
    1b12:	e7ec      	b.n	1aee <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
    1b14:	200005a1 	.word	0x200005a1
    1b18:	200005ac 	.word	0x200005ac
    1b1c:	200005a4 	.word	0x200005a4
    1b20:	20000115 	.word	0x20000115
    1b24:	20000114 	.word	0x20000114
    1b28:	200002e0 	.word	0x200002e0
    1b2c:	200000f8 	.word	0x200000f8
    1b30:	410050ff 	.word	0x410050ff

00001b34 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1b34:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1b36:	4802      	ldr	r0, [pc, #8]	; (1b40 <UDD_Handler+0xc>)
    1b38:	f7ff ff54 	bl	19e4 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1b3c:	bd10      	pop	{r4, pc}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	200000f4 	.word	0x200000f4

00001b44 <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1b44:	4a01      	ldr	r2, [pc, #4]	; (1b4c <_GLOBAL__sub_I_usbd+0x8>)
    1b46:	4b02      	ldr	r3, [pc, #8]	; (1b50 <_GLOBAL__sub_I_usbd+0xc>)
    1b48:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1b4a:	4770      	bx	lr
    1b4c:	41005000 	.word	0x41005000
    1b50:	200005ac 	.word	0x200005ac

00001b54 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1b54:	21fa      	movs	r1, #250	; 0xfa
    1b56:	4b31      	ldr	r3, [pc, #196]	; (1c1c <init+0xc8>)
{
    1b58:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1b5a:	6818      	ldr	r0, [r3, #0]
    1b5c:	0089      	lsls	r1, r1, #2
    1b5e:	f001 f8c1 	bl	2ce4 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1b62:	4b2f      	ldr	r3, [pc, #188]	; (1c20 <init+0xcc>)
    1b64:	3801      	subs	r0, #1
    1b66:	4298      	cmp	r0, r3
    1b68:	d856      	bhi.n	1c18 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1b6a:	492e      	ldr	r1, [pc, #184]	; (1c24 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b6c:	4a2e      	ldr	r2, [pc, #184]	; (1c28 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1b6e:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b70:	20c0      	movs	r0, #192	; 0xc0
    1b72:	6a13      	ldr	r3, [r2, #32]
    1b74:	0600      	lsls	r0, r0, #24
    1b76:	021b      	lsls	r3, r3, #8
    1b78:	0a1b      	lsrs	r3, r3, #8
    1b7a:	4303      	orrs	r3, r0
    1b7c:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1b7e:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1b80:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1b82:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1b84:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b86:	2180      	movs	r1, #128	; 0x80
    1b88:	6a13      	ldr	r3, [r2, #32]
    1b8a:	0609      	lsls	r1, r1, #24
    1b8c:	021b      	lsls	r3, r3, #8
    1b8e:	0a1b      	lsrs	r3, r3, #8
    1b90:	430b      	orrs	r3, r1
    1b92:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1b94:	22fc      	movs	r2, #252	; 0xfc
    1b96:	4b25      	ldr	r3, [pc, #148]	; (1c2c <init+0xd8>)
    1b98:	6a19      	ldr	r1, [r3, #32]
    1b9a:	430a      	orrs	r2, r1
    1b9c:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1b9e:	22fc      	movs	r2, #252	; 0xfc
    1ba0:	6a19      	ldr	r1, [r3, #32]
    1ba2:	0192      	lsls	r2, r2, #6
    1ba4:	430a      	orrs	r2, r1
    1ba6:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1ba8:	22a0      	movs	r2, #160	; 0xa0
    1baa:	6a19      	ldr	r1, [r3, #32]
    1bac:	02d2      	lsls	r2, r2, #11
    1bae:	430a      	orrs	r2, r1
    1bb0:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1bb2:	0020      	movs	r0, r4
    1bb4:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1bb6:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1bb8:	f000 f876 	bl	1ca8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1bbc:	2c14      	cmp	r4, #20
    1bbe:	d1f8      	bne.n	1bb2 <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1bc0:	4b1b      	ldr	r3, [pc, #108]	; (1c30 <init+0xdc>)
    1bc2:	001c      	movs	r4, r3
    1bc4:	785a      	ldrb	r2, [r3, #1]
    1bc6:	b252      	sxtb	r2, r2
    1bc8:	2a00      	cmp	r2, #0
    1bca:	dbfb      	blt.n	1bc4 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1bcc:	4a19      	ldr	r2, [pc, #100]	; (1c34 <init+0xe0>)
    1bce:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1bd0:	4b19      	ldr	r3, [pc, #100]	; (1c38 <init+0xe4>)
    1bd2:	001a      	movs	r2, r3
    1bd4:	7e59      	ldrb	r1, [r3, #25]
    1bd6:	09c9      	lsrs	r1, r1, #7
    1bd8:	2901      	cmp	r1, #1
    1bda:	d0fb      	beq.n	1bd4 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1bdc:	21e4      	movs	r1, #228	; 0xe4
    1bde:	00c9      	lsls	r1, r1, #3
    1be0:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1be2:	213f      	movs	r1, #63	; 0x3f
    1be4:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1be6:	7e53      	ldrb	r3, [r2, #25]
    1be8:	09db      	lsrs	r3, r3, #7
    1bea:	2b01      	cmp	r3, #1
    1bec:	d0fb      	beq.n	1be6 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1bee:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1bf0:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1bf2:	015b      	lsls	r3, r3, #5
    1bf4:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1bf6:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1bf8:	f000 f824 	bl	1c44 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1bfc:	7863      	ldrb	r3, [r4, #1]
    1bfe:	b25b      	sxtb	r3, r3
    1c00:	2b00      	cmp	r3, #0
    1c02:	dbfb      	blt.n	1bfc <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1c04:	4b0d      	ldr	r3, [pc, #52]	; (1c3c <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1c06:	4a0e      	ldr	r2, [pc, #56]	; (1c40 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1c08:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1c0a:	79d3      	ldrb	r3, [r2, #7]
    1c0c:	09db      	lsrs	r3, r3, #7
    1c0e:	2b01      	cmp	r3, #1
    1c10:	d0fb      	beq.n	1c0a <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1c12:	2341      	movs	r3, #65	; 0x41
    1c14:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1c16:	bd10      	pop	{r4, pc}
    1c18:	e7fe      	b.n	1c18 <init+0xc4>
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	20000004 	.word	0x20000004
    1c20:	00ffffff 	.word	0x00ffffff
    1c24:	e000e010 	.word	0xe000e010
    1c28:	e000ed00 	.word	0xe000ed00
    1c2c:	40000400 	.word	0x40000400
    1c30:	40000c00 	.word	0x40000c00
    1c34:	0000401e 	.word	0x0000401e
    1c38:	42004000 	.word	0x42004000
    1c3c:	00004021 	.word	0x00004021
    1c40:	42004800 	.word	0x42004800

00001c44 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1c44:	4a16      	ldr	r2, [pc, #88]	; (1ca0 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1c46:	b500      	push	{lr}
    1c48:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1c4a:	7e51      	ldrb	r1, [r2, #25]
    1c4c:	09c9      	lsrs	r1, r1, #7
    1c4e:	2901      	cmp	r1, #1
    1c50:	d0fb      	beq.n	1c4a <analogReference+0x6>
  syncADC();
  switch (mode)
    1c52:	3801      	subs	r0, #1
    1c54:	2804      	cmp	r0, #4
    1c56:	d816      	bhi.n	1c86 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1c58:	6919      	ldr	r1, [r3, #16]
    1c5a:	4a12      	ldr	r2, [pc, #72]	; (1ca4 <analogReference+0x60>)
    1c5c:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c5e:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1c60:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c62:	785a      	ldrb	r2, [r3, #1]
    1c64:	438a      	bics	r2, r1
  switch (mode)
    1c66:	f001 f833 	bl	2cd0 <__gnu_thumb1_case_uqi>
    1c6a:	0803      	.short	0x0803
    1c6c:	0b06      	.short	0x0b06
    1c6e:	03          	.byte	0x03
    1c6f:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1c70:	0011      	movs	r1, r2
    1c72:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c74:	430a      	orrs	r2, r1
    1c76:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1c78:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1c7a:	0011      	movs	r1, r2
    1c7c:	2203      	movs	r2, #3
    1c7e:	e7f9      	b.n	1c74 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c80:	0011      	movs	r1, r2
    1c82:	2202      	movs	r2, #2
    1c84:	e7f6      	b.n	1c74 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1c86:	23f0      	movs	r3, #240	; 0xf0
    1c88:	6911      	ldr	r1, [r2, #16]
    1c8a:	051b      	lsls	r3, r3, #20
    1c8c:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c8e:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1c90:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c92:	7853      	ldrb	r3, [r2, #1]
    1c94:	438b      	bics	r3, r1
    1c96:	0019      	movs	r1, r3
    1c98:	2302      	movs	r3, #2
    1c9a:	430b      	orrs	r3, r1
    1c9c:	7053      	strb	r3, [r2, #1]
}
    1c9e:	e7eb      	b.n	1c78 <analogReference+0x34>
    1ca0:	42004000 	.word	0x42004000
    1ca4:	f0ffffff 	.word	0xf0ffffff

00001ca8 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ca8:	2318      	movs	r3, #24
{
    1caa:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1cac:	001d      	movs	r5, r3
{
    1cae:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1cb0:	4345      	muls	r5, r0
    1cb2:	2008      	movs	r0, #8
    1cb4:	4a20      	ldr	r2, [pc, #128]	; (1d38 <pinMode+0x90>)
    1cb6:	1955      	adds	r5, r2, r5
    1cb8:	5628      	ldrsb	r0, [r5, r0]
    1cba:	3001      	adds	r0, #1
    1cbc:	d014      	beq.n	1ce8 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1cbe:	2903      	cmp	r1, #3
    1cc0:	d812      	bhi.n	1ce8 <pinMode+0x40>
    1cc2:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1cc4:	4363      	muls	r3, r4
    1cc6:	56d1      	ldrsb	r1, [r2, r3]
    1cc8:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1cca:	f001 f801 	bl	2cd0 <__gnu_thumb1_case_uqi>
    1cce:	2802      	.short	0x2802
    1cd0:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1cd2:	6858      	ldr	r0, [r3, #4]
    1cd4:	01cb      	lsls	r3, r1, #7
    1cd6:	2102      	movs	r1, #2
    1cd8:	4a18      	ldr	r2, [pc, #96]	; (1d3c <pinMode+0x94>)
    1cda:	189b      	adds	r3, r3, r2
    1cdc:	181a      	adds	r2, r3, r0
    1cde:	3240      	adds	r2, #64	; 0x40
    1ce0:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1ce2:	2201      	movs	r2, #1
    1ce4:	4082      	lsls	r2, r0
    1ce6:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1ce8:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1cea:	6858      	ldr	r0, [r3, #4]
    1cec:	01cb      	lsls	r3, r1, #7
    1cee:	2106      	movs	r1, #6
    1cf0:	4a12      	ldr	r2, [pc, #72]	; (1d3c <pinMode+0x94>)
    1cf2:	189b      	adds	r3, r3, r2
    1cf4:	181a      	adds	r2, r3, r0
    1cf6:	3240      	adds	r2, #64	; 0x40
    1cf8:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1cfa:	2201      	movs	r2, #1
    1cfc:	4082      	lsls	r2, r0
    1cfe:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1d00:	619a      	str	r2, [r3, #24]
    break ;
    1d02:	e7f1      	b.n	1ce8 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1d04:	6858      	ldr	r0, [r3, #4]
    1d06:	01cb      	lsls	r3, r1, #7
    1d08:	2106      	movs	r1, #6
    1d0a:	4a0c      	ldr	r2, [pc, #48]	; (1d3c <pinMode+0x94>)
    1d0c:	189b      	adds	r3, r3, r2
    1d0e:	181a      	adds	r2, r3, r0
    1d10:	3240      	adds	r2, #64	; 0x40
    1d12:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1d14:	2201      	movs	r2, #1
    1d16:	4082      	lsls	r2, r0
    1d18:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1d1a:	615a      	str	r2, [r3, #20]
    break ;
    1d1c:	e7e4      	b.n	1ce8 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1d1e:	6858      	ldr	r0, [r3, #4]
    1d20:	01cb      	lsls	r3, r1, #7
    1d22:	2102      	movs	r1, #2
    1d24:	4a05      	ldr	r2, [pc, #20]	; (1d3c <pinMode+0x94>)
    1d26:	189b      	adds	r3, r3, r2
    1d28:	181a      	adds	r2, r3, r0
    1d2a:	3240      	adds	r2, #64	; 0x40
    1d2c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1d2e:	2201      	movs	r2, #1
    1d30:	4082      	lsls	r2, r0
    1d32:	609a      	str	r2, [r3, #8]
    break ;
    1d34:	e7d8      	b.n	1ce8 <pinMode+0x40>
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	0000315c 	.word	0x0000315c
    1d3c:	41004400 	.word	0x41004400

00001d40 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1d40:	2318      	movs	r3, #24
{
    1d42:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1d44:	2408      	movs	r4, #8
    1d46:	4358      	muls	r0, r3
    1d48:	4a11      	ldr	r2, [pc, #68]	; (1d90 <digitalWrite+0x50>)
    1d4a:	1813      	adds	r3, r2, r0
    1d4c:	571c      	ldrsb	r4, [r3, r4]
    1d4e:	3401      	adds	r4, #1
    1d50:	d01b      	beq.n	1d8a <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1d52:	2601      	movs	r6, #1
    1d54:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1d56:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1d58:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1d5a:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1d5c:	4a0d      	ldr	r2, [pc, #52]	; (1d94 <digitalWrite+0x54>)
    1d5e:	01db      	lsls	r3, r3, #7
    1d60:	189a      	adds	r2, r3, r2
    1d62:	6890      	ldr	r0, [r2, #8]
    1d64:	4228      	tst	r0, r5
    1d66:	d10b      	bne.n	1d80 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1d68:	000c      	movs	r4, r1
    1d6a:	1e60      	subs	r0, r4, #1
    1d6c:	4184      	sbcs	r4, r0
    1d6e:	19d2      	adds	r2, r2, r7
    1d70:	3240      	adds	r2, #64	; 0x40
    1d72:	7810      	ldrb	r0, [r2, #0]
    1d74:	4034      	ands	r4, r6
    1d76:	3603      	adds	r6, #3
    1d78:	00a4      	lsls	r4, r4, #2
    1d7a:	43b0      	bics	r0, r6
    1d7c:	4320      	orrs	r0, r4
    1d7e:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1d80:	4a04      	ldr	r2, [pc, #16]	; (1d94 <digitalWrite+0x54>)
    1d82:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    1d84:	2900      	cmp	r1, #0
    1d86:	d101      	bne.n	1d8c <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    1d88:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    1d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    1d8c:	619d      	str	r5, [r3, #24]
    break ;
    1d8e:	e7fc      	b.n	1d8a <digitalWrite+0x4a>
    1d90:	0000315c 	.word	0x0000315c
    1d94:	41004400 	.word	0x41004400

00001d98 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d9a:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1d9c:	2018      	movs	r0, #24
    1d9e:	4358      	muls	r0, r3
    1da0:	4a2a      	ldr	r2, [pc, #168]	; (1e4c <pinPeripheral+0xb4>)
    1da2:	1810      	adds	r0, r2, r0
    1da4:	7a00      	ldrb	r0, [r0, #8]
    1da6:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1da8:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1daa:	3001      	adds	r0, #1
    1dac:	d013      	beq.n	1dd6 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    1dae:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1db0:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    1db2:	280c      	cmp	r0, #12
    1db4:	d80f      	bhi.n	1dd6 <pinPeripheral+0x3e>
    1db6:	f000 ff8b 	bl	2cd0 <__gnu_thumb1_case_uqi>
    1dba:	1c45      	.short	0x1c45
    1dbc:	1c1c1c1c 	.word	0x1c1c1c1c
    1dc0:	071c1c1c 	.word	0x071c1c1c
    1dc4:	0707      	.short	0x0707
    1dc6:	07          	.byte	0x07
    1dc7:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1dc8:	2909      	cmp	r1, #9
    1dca:	d106      	bne.n	1dda <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    1dcc:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    1dce:	0018      	movs	r0, r3
    1dd0:	f7ff ff6a 	bl	1ca8 <pinMode>
  return 0l ;
    1dd4:	2400      	movs	r4, #0
}
    1dd6:	0020      	movs	r0, r4
    1dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1dda:	290a      	cmp	r1, #10
    1ddc:	d101      	bne.n	1de2 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    1dde:	3908      	subs	r1, #8
    1de0:	e7f5      	b.n	1dce <pinPeripheral+0x36>
  return 0l ;
    1de2:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    1de4:	290b      	cmp	r1, #11
    1de6:	d1f6      	bne.n	1dd6 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    1de8:	390a      	subs	r1, #10
    1dea:	0018      	movs	r0, r3
    1dec:	f7ff ff5c 	bl	1ca8 <pinMode>
    1df0:	e7f1      	b.n	1dd6 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1df2:	2018      	movs	r0, #24
    1df4:	4343      	muls	r3, r0
    1df6:	18d0      	adds	r0, r2, r3
    1df8:	6846      	ldr	r6, [r0, #4]
    1dfa:	2501      	movs	r5, #1
    1dfc:	0034      	movs	r4, r6
    1dfe:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    1e00:	4813      	ldr	r0, [pc, #76]	; (1e50 <pinPeripheral+0xb8>)
    1e02:	01d2      	lsls	r2, r2, #7
    1e04:	1812      	adds	r2, r2, r0
    1e06:	0873      	lsrs	r3, r6, #1
    1e08:	18d3      	adds	r3, r2, r3
    1e0a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1e0c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    1e0e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1e10:	2c00      	cmp	r4, #0
    1e12:	d00b      	beq.n	1e2c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1e14:	240f      	movs	r4, #15
    1e16:	0109      	lsls	r1, r1, #4
    1e18:	4020      	ands	r0, r4
    1e1a:	4301      	orrs	r1, r0
    1e1c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1e1e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1e20:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1e22:	3240      	adds	r2, #64	; 0x40
    1e24:	7813      	ldrb	r3, [r2, #0]
    1e26:	431d      	orrs	r5, r3
    1e28:	7015      	strb	r5, [r2, #0]
    1e2a:	e7d3      	b.n	1dd4 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1e2c:	270f      	movs	r7, #15
    1e2e:	43b8      	bics	r0, r7
    1e30:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1e32:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1e34:	b2c9      	uxtb	r1, r1
    1e36:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1e38:	0013      	movs	r3, r2
    1e3a:	3340      	adds	r3, #64	; 0x40
    1e3c:	781a      	ldrb	r2, [r3, #0]
    1e3e:	4315      	orrs	r5, r2
    1e40:	701d      	strb	r5, [r3, #0]
    1e42:	e7c8      	b.n	1dd6 <pinPeripheral+0x3e>
      return -1l ;
    1e44:	2401      	movs	r4, #1
    1e46:	4264      	negs	r4, r4
    1e48:	e7c5      	b.n	1dd6 <pinPeripheral+0x3e>
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	0000315c 	.word	0x0000315c
    1e50:	41004400 	.word	0x41004400

00001e54 <_ZN7TwoWire5writeEi>:
    void onRequest(void(*)(void));

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1e54:	b510      	push	{r4, lr}
    1e56:	6803      	ldr	r3, [r0, #0]
    1e58:	b2c9      	uxtb	r1, r1
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	4798      	blx	r3
    1e5e:	bd10      	pop	{r4, pc}

00001e60 <_ZN19Adafruit_EEPROM_I2CC1Ev>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C(void) {}
    1e60:	4770      	bx	lr

00001e62 <_ZN19Adafruit_EEPROM_I2C5beginEhP7TwoWire>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_EEPROM_I2C::begin(uint8_t addr, TwoWire *theWire) {
    1e62:	b510      	push	{r4, lr}
    1e64:	0004      	movs	r4, r0
  i2c_addr = addr;
  _wire = theWire;
    1e66:	6042      	str	r2, [r0, #4]
  i2c_addr = addr;
    1e68:	7001      	strb	r1, [r0, #0]

  _wire->begin();
    1e6a:	0010      	movs	r0, r2
    1e6c:	f000 f8ac 	bl	1fc8 <_ZN7TwoWire5beginEv>

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(i2c_addr);
    1e70:	7821      	ldrb	r1, [r4, #0]
    1e72:	6860      	ldr	r0, [r4, #4]
    1e74:	f000 f8c8 	bl	2008 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
    1e78:	6860      	ldr	r0, [r4, #4]
    1e7a:	f000 f97f 	bl	217c <_ZN7TwoWire15endTransmissionEv>
    1e7e:	4243      	negs	r3, r0
    1e80:	4158      	adcs	r0, r3
    return true;
  }

  return false;
}
    1e82:	b2c0      	uxtb	r0, r0
    1e84:	bd10      	pop	{r4, pc}

00001e86 <_ZN19Adafruit_EEPROM_I2C6write8Eth>:
                The 16-bit address to write to in EEPROM memory
    @param[in] value
                The 8-bit value to write at addr
*/
/**************************************************************************/
void Adafruit_EEPROM_I2C::write8(uint16_t addr, uint8_t value) {
    1e86:	b570      	push	{r4, r5, r6, lr}
    1e88:	0004      	movs	r4, r0
    1e8a:	000d      	movs	r5, r1
    1e8c:	0016      	movs	r6, r2
  _wire->beginTransmission(i2c_addr);
    1e8e:	7801      	ldrb	r1, [r0, #0]
    1e90:	6840      	ldr	r0, [r0, #4]
    1e92:	f000 f8b9 	bl	2008 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(addr >> 8);
    1e96:	1229      	asrs	r1, r5, #8
    1e98:	6860      	ldr	r0, [r4, #4]
    1e9a:	f7ff ffdb 	bl	1e54 <_ZN7TwoWire5writeEi>
  _wire->write(addr & 0xFF);
    1e9e:	b2e9      	uxtb	r1, r5
    1ea0:	6860      	ldr	r0, [r4, #4]
    1ea2:	f7ff ffd7 	bl	1e54 <_ZN7TwoWire5writeEi>
  _wire->write(value);
    1ea6:	6860      	ldr	r0, [r4, #4]
    1ea8:	0031      	movs	r1, r6
    1eaa:	6803      	ldr	r3, [r0, #0]
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	4798      	blx	r3
  _wire->endTransmission();
    1eb0:	6860      	ldr	r0, [r4, #4]
    1eb2:	f000 f963 	bl	217c <_ZN7TwoWire15endTransmissionEv>

  // Wait until it acks!
  while (1) {
    _wire->beginTransmission(i2c_addr);
    1eb6:	6860      	ldr	r0, [r4, #4]
    1eb8:	7821      	ldrb	r1, [r4, #0]
    1eba:	f000 f8a5 	bl	2008 <_ZN7TwoWire17beginTransmissionEh>
    if (_wire->endTransmission() == 0) {
    1ebe:	6860      	ldr	r0, [r4, #4]
    1ec0:	f000 f95c 	bl	217c <_ZN7TwoWire15endTransmissionEv>
    1ec4:	2800      	cmp	r0, #0
    1ec6:	d003      	beq.n	1ed0 <_ZN19Adafruit_EEPROM_I2C6write8Eth+0x4a>
      return;
    }
    delay(1);
    1ec8:	2001      	movs	r0, #1
    1eca:	f7fe fa1d 	bl	308 <delay>
    _wire->beginTransmission(i2c_addr);
    1ece:	e7f2      	b.n	1eb6 <_ZN19Adafruit_EEPROM_I2C6write8Eth+0x30>
  }
}
    1ed0:	bd70      	pop	{r4, r5, r6, pc}

00001ed2 <_ZN19Adafruit_EEPROM_I2C5read8Et>:
    @param addr
                The 16-bit address to read from in EEPROM memory
    @returns    The 8-bit value retrieved at addr
*/
/**************************************************************************/
uint8_t Adafruit_EEPROM_I2C::read8(uint16_t addr) {
    1ed2:	b570      	push	{r4, r5, r6, lr}
    1ed4:	0004      	movs	r4, r0
    1ed6:	000d      	movs	r5, r1
  _wire->beginTransmission(i2c_addr);
    1ed8:	7801      	ldrb	r1, [r0, #0]
    1eda:	6840      	ldr	r0, [r0, #4]
    1edc:	f000 f894 	bl	2008 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(addr >> 8);
    1ee0:	1229      	asrs	r1, r5, #8
    1ee2:	6860      	ldr	r0, [r4, #4]
    1ee4:	f7ff ffb6 	bl	1e54 <_ZN7TwoWire5writeEi>
  _wire->write(addr & 0xFF);
    1ee8:	b2e9      	uxtb	r1, r5
    1eea:	6860      	ldr	r0, [r4, #4]
    1eec:	f7ff ffb2 	bl	1e54 <_ZN7TwoWire5writeEi>
  _wire->endTransmission();
    1ef0:	6860      	ldr	r0, [r4, #4]
    1ef2:	f000 f943 	bl	217c <_ZN7TwoWire15endTransmissionEv>

  size_t recv = _wire->requestFrom(i2c_addr, (uint8_t)1);
    1ef6:	7821      	ldrb	r1, [r4, #0]
    1ef8:	2201      	movs	r2, #1
    1efa:	6860      	ldr	r0, [r4, #4]
    1efc:	f000 f8dc 	bl	20b8 <_ZN7TwoWire11requestFromEhj>
    1f00:	0003      	movs	r3, r0
  if (recv != 1) {
    return 0;
    1f02:	2000      	movs	r0, #0
  if (recv != 1) {
    1f04:	2b01      	cmp	r3, #1
    1f06:	d104      	bne.n	1f12 <_ZN19Adafruit_EEPROM_I2C5read8Et+0x40>
  }
  return _wire->read();
    1f08:	6860      	ldr	r0, [r4, #4]
    1f0a:	6803      	ldr	r3, [r0, #0]
    1f0c:	695b      	ldr	r3, [r3, #20]
    1f0e:	4798      	blx	r3
    1f10:	b2c0      	uxtb	r0, r0
}
    1f12:	bd70      	pop	{r4, r5, r6, pc}

00001f14 <_ZN7TwoWire5writeEPKhj>:

  return 1 ;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f16:	0005      	movs	r5, r0
    1f18:	000e      	movs	r6, r1
    1f1a:	0017      	movs	r7, r2
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    1f1c:	2400      	movs	r4, #0
    1f1e:	42bc      	cmp	r4, r7
    1f20:	d008      	beq.n	1f34 <_ZN7TwoWire5writeEPKhj+0x20>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    1f22:	682b      	ldr	r3, [r5, #0]
    1f24:	5d31      	ldrb	r1, [r6, r4]
    1f26:	681b      	ldr	r3, [r3, #0]
    1f28:	0028      	movs	r0, r5
    1f2a:	4798      	blx	r3
    1f2c:	2800      	cmp	r0, #0
    1f2e:	d001      	beq.n	1f34 <_ZN7TwoWire5writeEPKhj+0x20>
  for(size_t i = 0; i < quantity; ++i)
    1f30:	3401      	adds	r4, #1
    1f32:	e7f4      	b.n	1f1e <_ZN7TwoWire5writeEPKhj+0xa>
      return i;
  }

  //All data stored
  return quantity;
}
    1f34:	0020      	movs	r0, r4
    1f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001f38 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    1f38:	4770      	bx	lr

00001f3a <_ZN7TwoWire4peekEv>:
  if(_iTail == _iHead)
    1f3a:	0003      	movs	r3, r0
    1f3c:	33fc      	adds	r3, #252	; 0xfc
    1f3e:	6a19      	ldr	r1, [r3, #32]
    1f40:	69da      	ldr	r2, [r3, #28]
    1f42:	4291      	cmp	r1, r2
    1f44:	d003      	beq.n	1f4e <_ZN7TwoWire4peekEv+0x14>
  return _aucBuffer[_iTail];
    1f46:	6a1b      	ldr	r3, [r3, #32]
    1f48:	18c0      	adds	r0, r0, r3
    1f4a:	7e00      	ldrb	r0, [r0, #24]
}
    1f4c:	4770      	bx	lr
    return -1;
    1f4e:	2001      	movs	r0, #1
    1f50:	4240      	negs	r0, r0
  return rxBuffer.peek();
    1f52:	e7fb      	b.n	1f4c <_ZN7TwoWire4peekEv+0x12>

00001f54 <_ZN7TwoWire9availableEv>:
  int delta = _iHead - _iTail;
    1f54:	0003      	movs	r3, r0
    1f56:	33fc      	adds	r3, #252	; 0xfc
    1f58:	69d8      	ldr	r0, [r3, #28]
    1f5a:	6a1b      	ldr	r3, [r3, #32]
    1f5c:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    1f5e:	d501      	bpl.n	1f64 <_ZN7TwoWire9availableEv+0x10>
    return N + delta;
    1f60:	3001      	adds	r0, #1
    1f62:	30ff      	adds	r0, #255	; 0xff
}
    1f64:	4770      	bx	lr
	...

00001f68 <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    1f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f6a:	9301      	str	r3, [sp, #4]
    1f6c:	23fa      	movs	r3, #250	; 0xfa
    memset( _aucBuffer, 0, N ) ;
    1f6e:	2680      	movs	r6, #128	; 0x80
    1f70:	2500      	movs	r5, #0
    1f72:	0004      	movs	r4, r0
    1f74:	009b      	lsls	r3, r3, #2
    1f76:	6083      	str	r3, [r0, #8]
    1f78:	4b12      	ldr	r3, [pc, #72]	; (1fc4 <_ZN7TwoWireC1EP6SERCOMhh+0x5c>)
    1f7a:	0076      	lsls	r6, r6, #1
    1f7c:	3308      	adds	r3, #8
    1f7e:	000f      	movs	r7, r1
    1f80:	6045      	str	r5, [r0, #4]
    1f82:	0029      	movs	r1, r5
    1f84:	9200      	str	r2, [sp, #0]
    1f86:	6003      	str	r3, [r0, #0]
    1f88:	0032      	movs	r2, r6
    1f8a:	3018      	adds	r0, #24
    1f8c:	f000 ff77 	bl	2e7e <memset>
  _iHead = 0;
    1f90:	0023      	movs	r3, r4
    memset( _aucBuffer, 0, N ) ;
    1f92:	0020      	movs	r0, r4
  _iHead = 0;
    1f94:	33fc      	adds	r3, #252	; 0xfc
    memset( _aucBuffer, 0, N ) ;
    1f96:	3021      	adds	r0, #33	; 0x21
  _iHead = 0;
    1f98:	61dd      	str	r5, [r3, #28]
    memset( _aucBuffer, 0, N ) ;
    1f9a:	0032      	movs	r2, r6
  _iTail = 0;
    1f9c:	621d      	str	r5, [r3, #32]
    memset( _aucBuffer, 0, N ) ;
    1f9e:	0029      	movs	r1, r5
    1fa0:	30ff      	adds	r0, #255	; 0xff
    1fa2:	f000 ff6c 	bl	2e7e <memset>
  _iHead = 0;
    1fa6:	2387      	movs	r3, #135	; 0x87
    1fa8:	009b      	lsls	r3, r3, #2
    1faa:	18e3      	adds	r3, r4, r3
    1fac:	605d      	str	r5, [r3, #4]
  _iTail = 0;
    1fae:	609d      	str	r5, [r3, #8]
  this->_uc_pinSDA=pinSDA;
    1fb0:	466b      	mov	r3, sp
    1fb2:	781b      	ldrb	r3, [r3, #0]
  this->sercom = s;
    1fb4:	6127      	str	r7, [r4, #16]
  this->_uc_pinSDA=pinSDA;
    1fb6:	7523      	strb	r3, [r4, #20]
  this->_uc_pinSCL=pinSCL;
    1fb8:	466b      	mov	r3, sp
    1fba:	791b      	ldrb	r3, [r3, #4]
  transmissionBegun = false;
    1fbc:	75a5      	strb	r5, [r4, #22]
}
    1fbe:	0020      	movs	r0, r4
  this->_uc_pinSCL=pinSCL;
    1fc0:	7563      	strb	r3, [r4, #21]
}
    1fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1fc4:	00003138 	.word	0x00003138

00001fc8 <_ZN7TwoWire5beginEv>:
void TwoWire::begin(void) {
    1fc8:	b570      	push	{r4, r5, r6, lr}
    1fca:	0006      	movs	r6, r0
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    1fcc:	2518      	movs	r5, #24
  sercom->initMasterWIRE(TWI_CLOCK);
    1fce:	490c      	ldr	r1, [pc, #48]	; (2000 <_ZN7TwoWire5beginEv+0x38>)
    1fd0:	6900      	ldr	r0, [r0, #16]
    1fd2:	f000 fbd5 	bl	2780 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    1fd6:	6930      	ldr	r0, [r6, #16]
    1fd8:	f000 fa6d 	bl	24b6 <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    1fdc:	002b      	movs	r3, r5
    1fde:	2108      	movs	r1, #8
    1fe0:	7d30      	ldrb	r0, [r6, #20]
    1fe2:	4c08      	ldr	r4, [pc, #32]	; (2004 <_ZN7TwoWire5beginEv+0x3c>)
    1fe4:	4343      	muls	r3, r0
    1fe6:	18e3      	adds	r3, r4, r3
    1fe8:	5659      	ldrsb	r1, [r3, r1]
    1fea:	f7ff fed5 	bl	1d98 <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    1fee:	2108      	movs	r1, #8
    1ff0:	7d70      	ldrb	r0, [r6, #21]
    1ff2:	4345      	muls	r5, r0
    1ff4:	1964      	adds	r4, r4, r5
    1ff6:	5661      	ldrsb	r1, [r4, r1]
    1ff8:	f7ff fece 	bl	1d98 <pinPeripheral>
}
    1ffc:	bd70      	pop	{r4, r5, r6, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	000186a0 	.word	0x000186a0
    2004:	0000315c 	.word	0x0000315c

00002008 <_ZN7TwoWire17beginTransmissionEh>:
  txAddress = address;
    2008:	238a      	movs	r3, #138	; 0x8a
  _iHead = 0;
    200a:	2200      	movs	r2, #0
    200c:	009b      	lsls	r3, r3, #2
    200e:	54c1      	strb	r1, [r0, r3]
    2010:	3b0c      	subs	r3, #12
    2012:	18c3      	adds	r3, r0, r3
    2014:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    2016:	609a      	str	r2, [r3, #8]
  transmissionBegun = true;
    2018:	2301      	movs	r3, #1
    201a:	7583      	strb	r3, [r0, #22]
}
    201c:	4770      	bx	lr

0000201e <_ZN11RingBufferNILi256EE10store_charEh>:
  int i = nextIndex(_iHead);
    201e:	0002      	movs	r2, r0
    2020:	32fc      	adds	r2, #252	; 0xfc
    2022:	6853      	ldr	r3, [r2, #4]
void RingBufferN<N>::store_char( uint8_t c )
    2024:	b510      	push	{r4, lr}
  return (uint32_t)(index + 1) % N;
    2026:	3301      	adds	r3, #1
  if ( i != _iTail )
    2028:	6894      	ldr	r4, [r2, #8]
  return (uint32_t)(index + 1) % N;
    202a:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    202c:	429c      	cmp	r4, r3
    202e:	d002      	beq.n	2036 <_ZN11RingBufferNILi256EE10store_charEh+0x18>
    _aucBuffer[_iHead] = c ;
    2030:	6854      	ldr	r4, [r2, #4]
    2032:	5501      	strb	r1, [r0, r4]
    _iHead = i ;
    2034:	6053      	str	r3, [r2, #4]
}
    2036:	bd10      	pop	{r4, pc}

00002038 <_ZN7TwoWire11requestFromEhjb>:
{
    2038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    203a:	2400      	movs	r4, #0
    203c:	0005      	movs	r5, r0
    203e:	0017      	movs	r7, r2
    2040:	9301      	str	r3, [sp, #4]
    return 0;
    2042:	0020      	movs	r0, r4
  if(quantity == 0)
    2044:	42a2      	cmp	r2, r4
    2046:	d02e      	beq.n	20a6 <_ZN7TwoWire11requestFromEhjb+0x6e>
  _iHead = 0;
    2048:	002b      	movs	r3, r5
    204a:	33fc      	adds	r3, #252	; 0xfc
    204c:	61dc      	str	r4, [r3, #28]
  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    204e:	2201      	movs	r2, #1
  _iTail = 0;
    2050:	621c      	str	r4, [r3, #32]
    2052:	6928      	ldr	r0, [r5, #16]
    2054:	f000 fa70 	bl	2538 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    2058:	0006      	movs	r6, r0
    205a:	42a0      	cmp	r0, r4
    205c:	d022      	beq.n	20a4 <_ZN7TwoWire11requestFromEhjb+0x6c>
  rxBuffer.clear();
    205e:	002b      	movs	r3, r5
    2060:	3318      	adds	r3, #24
    2062:	9300      	str	r3, [sp, #0]
    rxBuffer.store_char(sercom->readDataWIRE());
    2064:	6928      	ldr	r0, [r5, #16]
    2066:	f000 faf4 	bl	2652 <_ZN6SERCOM12readDataWIREEv>
    for (byteRead = 1; byteRead < quantity && (busOwner = sercom->isBusOwnerWIRE()); ++byteRead)
    206a:	3401      	adds	r4, #1
    rxBuffer.store_char(sercom->readDataWIRE());
    206c:	0001      	movs	r1, r0
    206e:	9800      	ldr	r0, [sp, #0]
    2070:	f7ff ffd5 	bl	201e <_ZN11RingBufferNILi256EE10store_charEh>
    for (byteRead = 1; byteRead < quantity && (busOwner = sercom->isBusOwnerWIRE()); ++byteRead)
    2074:	42bc      	cmp	r4, r7
    2076:	d005      	beq.n	2084 <_ZN7TwoWire11requestFromEhjb+0x4c>
    2078:	6928      	ldr	r0, [r5, #16]
    207a:	f000 fac8 	bl	260e <_ZN6SERCOM14isBusOwnerWIREEv>
    207e:	2800      	cmp	r0, #0
    2080:	d112      	bne.n	20a8 <_ZN7TwoWire11requestFromEhjb+0x70>
    2082:	0006      	movs	r6, r0
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    2084:	6928      	ldr	r0, [r5, #16]
    2086:	f000 fa29 	bl	24dc <_ZN6SERCOM18prepareNackBitWIREEv>
    if (stopBit && busOwner)
    208a:	9b01      	ldr	r3, [sp, #4]
    208c:	2b00      	cmp	r3, #0
    208e:	d103      	bne.n	2098 <_ZN7TwoWire11requestFromEhjb+0x60>
    if (!busOwner)
    2090:	2e00      	cmp	r6, #0
    2092:	d107      	bne.n	20a4 <_ZN7TwoWire11requestFromEhjb+0x6c>
      byteRead--;   // because last read byte was garbage/invalid
    2094:	3c01      	subs	r4, #1
    2096:	e005      	b.n	20a4 <_ZN7TwoWire11requestFromEhjb+0x6c>
    if (stopBit && busOwner)
    2098:	2e00      	cmp	r6, #0
    209a:	d0fb      	beq.n	2094 <_ZN7TwoWire11requestFromEhjb+0x5c>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop unless arbitration was lost
    209c:	2103      	movs	r1, #3
    209e:	6928      	ldr	r0, [r5, #16]
    20a0:	f000 fa2e 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
  return byteRead;
    20a4:	b2e0      	uxtb	r0, r4
}
    20a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    20a8:	6928      	ldr	r0, [r5, #16]
    20aa:	f000 fa1f 	bl	24ec <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    20ae:	2102      	movs	r1, #2
    20b0:	6928      	ldr	r0, [r5, #16]
    20b2:	f000 fa25 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
    20b6:	e7d5      	b.n	2064 <_ZN7TwoWire11requestFromEhjb+0x2c>

000020b8 <_ZN7TwoWire11requestFromEhj>:
{
    20b8:	b510      	push	{r4, lr}
  return requestFrom(address, quantity, true);
    20ba:	2301      	movs	r3, #1
    20bc:	f7ff ffbc 	bl	2038 <_ZN7TwoWire11requestFromEhjb>
}
    20c0:	bd10      	pop	{r4, pc}

000020c2 <_ZN7TwoWire5writeEh>:
    return 0 ;
    20c2:	2200      	movs	r2, #0
{
    20c4:	b510      	push	{r4, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
    20c6:	7d83      	ldrb	r3, [r0, #22]
    20c8:	4293      	cmp	r3, r2
    20ca:	d00d      	beq.n	20e8 <_ZN7TwoWire5writeEh+0x26>
  return (nextIndex(_iHead) == _iTail);
    20cc:	2387      	movs	r3, #135	; 0x87
    20ce:	009b      	lsls	r3, r3, #2
    20d0:	18c4      	adds	r4, r0, r3
    20d2:	6863      	ldr	r3, [r4, #4]
    20d4:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(index + 1) % N;
    20d6:	3301      	adds	r3, #1
    20d8:	b2db      	uxtb	r3, r3
    20da:	42a3      	cmp	r3, r4
    20dc:	d004      	beq.n	20e8 <_ZN7TwoWire5writeEh+0x26>
  txBuffer.store_char( ucData ) ;
    20de:	3021      	adds	r0, #33	; 0x21
    20e0:	30ff      	adds	r0, #255	; 0xff
    20e2:	f7ff ff9c 	bl	201e <_ZN11RingBufferNILi256EE10store_charEh>
  return 1 ;
    20e6:	2201      	movs	r2, #1
}
    20e8:	0010      	movs	r0, r2
    20ea:	bd10      	pop	{r4, pc}

000020ec <_ZN11RingBufferNILi256EE9read_charEv>:
  if(_iTail == _iHead)
    20ec:	0003      	movs	r3, r0
    20ee:	33fc      	adds	r3, #252	; 0xfc
    20f0:	6899      	ldr	r1, [r3, #8]
    20f2:	685a      	ldr	r2, [r3, #4]
    20f4:	4291      	cmp	r1, r2
    20f6:	d006      	beq.n	2106 <_ZN11RingBufferNILi256EE9read_charEv+0x1a>
  uint8_t value = _aucBuffer[_iTail];
    20f8:	689a      	ldr	r2, [r3, #8]
    20fa:	5c80      	ldrb	r0, [r0, r2]
  _iTail = nextIndex(_iTail);
    20fc:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    20fe:	3201      	adds	r2, #1
    2100:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    2102:	609a      	str	r2, [r3, #8]
}
    2104:	4770      	bx	lr
    return -1;
    2106:	2001      	movs	r0, #1
    2108:	4240      	negs	r0, r0
    210a:	e7fb      	b.n	2104 <_ZN11RingBufferNILi256EE9read_charEv+0x18>

0000210c <_ZN7TwoWire15endTransmissionEb>:
  transmissionBegun = false ;
    210c:	2200      	movs	r2, #0
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    210e:	238a      	movs	r3, #138	; 0x8a
{
    2110:	b570      	push	{r4, r5, r6, lr}
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    2112:	009b      	lsls	r3, r3, #2
  transmissionBegun = false ;
    2114:	7582      	strb	r2, [r0, #22]
{
    2116:	0005      	movs	r5, r0
    2118:	000e      	movs	r6, r1
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    211a:	5cc1      	ldrb	r1, [r0, r3]
    211c:	6900      	ldr	r0, [r0, #16]
    211e:	f000 fa0b 	bl	2538 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    2122:	2800      	cmp	r0, #0
    2124:	d106      	bne.n	2134 <_ZN7TwoWire15endTransmissionEb+0x28>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    2126:	2103      	movs	r1, #3
    2128:	6928      	ldr	r0, [r5, #16]
    212a:	f000 f9e9 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    212e:	2402      	movs	r4, #2
}
    2130:	0020      	movs	r0, r4
    2132:	bd70      	pop	{r4, r5, r6, pc}
  int delta = _iHead - _iTail;
    2134:	2387      	movs	r3, #135	; 0x87
  while( txBuffer.available() )
    2136:	0028      	movs	r0, r5
    2138:	009b      	lsls	r3, r3, #2
    213a:	18ea      	adds	r2, r5, r3
    213c:	6853      	ldr	r3, [r2, #4]
    213e:	6894      	ldr	r4, [r2, #8]
    2140:	3021      	adds	r0, #33	; 0x21
    2142:	30ff      	adds	r0, #255	; 0xff
    2144:	1b1c      	subs	r4, r3, r4
  if(delta < 0)
    2146:	d501      	bpl.n	214c <_ZN7TwoWire15endTransmissionEb+0x40>
    return N + delta;
    2148:	3401      	adds	r4, #1
    214a:	34ff      	adds	r4, #255	; 0xff
    214c:	2c00      	cmp	r4, #0
    214e:	d00e      	beq.n	216e <_ZN7TwoWire15endTransmissionEb+0x62>
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    2150:	692c      	ldr	r4, [r5, #16]
    2152:	f7ff ffcb 	bl	20ec <_ZN11RingBufferNILi256EE9read_charEv>
    2156:	b2c1      	uxtb	r1, r0
    2158:	0020      	movs	r0, r4
    215a:	f000 fa2f 	bl	25bc <_ZN6SERCOM18sendDataMasterWIREEh>
    215e:	2800      	cmp	r0, #0
    2160:	d1e8      	bne.n	2134 <_ZN7TwoWire15endTransmissionEb+0x28>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    2162:	2103      	movs	r1, #3
    2164:	6928      	ldr	r0, [r5, #16]
    2166:	f000 f9cb 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    216a:	2403      	movs	r4, #3
    216c:	e7e0      	b.n	2130 <_ZN7TwoWire15endTransmissionEb+0x24>
  if (stopBit)
    216e:	2e00      	cmp	r6, #0
    2170:	d0de      	beq.n	2130 <_ZN7TwoWire15endTransmissionEb+0x24>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    2172:	2103      	movs	r1, #3
    2174:	6928      	ldr	r0, [r5, #16]
    2176:	f000 f9c3 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
    217a:	e7d9      	b.n	2130 <_ZN7TwoWire15endTransmissionEb+0x24>

0000217c <_ZN7TwoWire15endTransmissionEv>:
{
    217c:	b510      	push	{r4, lr}
  return endTransmission(true);
    217e:	2101      	movs	r1, #1
    2180:	f7ff ffc4 	bl	210c <_ZN7TwoWire15endTransmissionEb>
}
    2184:	bd10      	pop	{r4, pc}

00002186 <_ZN7TwoWire4readEv>:
{
    2186:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    2188:	3018      	adds	r0, #24
    218a:	f7ff ffaf 	bl	20ec <_ZN11RingBufferNILi256EE9read_charEv>
}
    218e:	bd10      	pop	{r4, pc}

00002190 <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    2190:	b570      	push	{r4, r5, r6, lr}
    2192:	0004      	movs	r4, r0
  if ( sercom->isSlaveWIRE() )
    2194:	6900      	ldr	r0, [r0, #16]
    2196:	f000 fa31 	bl	25fc <_ZN6SERCOM11isSlaveWIREEv>
    219a:	2800      	cmp	r0, #0
    219c:	d028      	beq.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
  {
    if(sercom->isStopDetectedWIRE() || 
    219e:	6920      	ldr	r0, [r4, #16]
    21a0:	f000 fa43 	bl	262a <_ZN6SERCOM18isStopDetectedWIREEv>
    21a4:	2800      	cmp	r0, #0
    21a6:	d10e      	bne.n	21c6 <_ZN7TwoWire9onServiceEv+0x36>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    21a8:	6920      	ldr	r0, [r4, #16]
    21aa:	f000 fa48 	bl	263e <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
    21ae:	2800      	cmp	r0, #0
    21b0:	d055      	beq.n	225e <_ZN7TwoWire9onServiceEv+0xce>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    21b2:	6920      	ldr	r0, [r4, #16]
    21b4:	f000 fa3e 	bl	2634 <_ZN6SERCOM21isRestartDetectedWIREEv>
    21b8:	2800      	cmp	r0, #0
    21ba:	d050      	beq.n	225e <_ZN7TwoWire9onServiceEv+0xce>
    21bc:	6920      	ldr	r0, [r4, #16]
    21be:	f000 fa43 	bl	2648 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    21c2:	2800      	cmp	r0, #0
    21c4:	d14b      	bne.n	225e <_ZN7TwoWire9onServiceEv+0xce>
    {
      sercom->prepareAckBitWIRE();
    21c6:	6920      	ldr	r0, [r4, #16]
    21c8:	f000 f990 	bl	24ec <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    21cc:	2103      	movs	r1, #3
    21ce:	6920      	ldr	r0, [r4, #16]
    21d0:	f000 f996 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    21d4:	238c      	movs	r3, #140	; 0x8c
    21d6:	009b      	lsls	r3, r3, #2
    21d8:	58e5      	ldr	r5, [r4, r3]
    21da:	2d00      	cmp	r5, #0
    21dc:	d004      	beq.n	21e8 <_ZN7TwoWire9onServiceEv+0x58>
      {
        onReceiveCallback(available());
    21de:	6823      	ldr	r3, [r4, #0]
    21e0:	0020      	movs	r0, r4
    21e2:	691b      	ldr	r3, [r3, #16]
    21e4:	4798      	blx	r3
    21e6:	47a8      	blx	r5
  _iHead = 0;
    21e8:	2300      	movs	r3, #0
    21ea:	34fc      	adds	r4, #252	; 0xfc
    21ec:	61e3      	str	r3, [r4, #28]
  _iTail = 0;
    21ee:	6223      	str	r3, [r4, #32]

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    21f0:	bd70      	pop	{r4, r5, r6, pc}
      sercom->prepareAckBitWIRE();
    21f2:	6920      	ldr	r0, [r4, #16]
    21f4:	f000 f97a 	bl	24ec <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    21f8:	6920      	ldr	r0, [r4, #16]
    21fa:	2103      	movs	r1, #3
    21fc:	f000 f980 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    2200:	6920      	ldr	r0, [r4, #16]
    2202:	f000 fa21 	bl	2648 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    2206:	2800      	cmp	r0, #0
    2208:	d0f2      	beq.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
  _iHead = 0;
    220a:	2387      	movs	r3, #135	; 0x87
    220c:	2200      	movs	r2, #0
    220e:	009b      	lsls	r3, r3, #2
    2210:	18e3      	adds	r3, r4, r3
    2212:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    2214:	609a      	str	r2, [r3, #8]
        transmissionBegun = true;
    2216:	2301      	movs	r3, #1
    2218:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
    221a:	238b      	movs	r3, #139	; 0x8b
    221c:	009b      	lsls	r3, r3, #2
    221e:	58e3      	ldr	r3, [r4, r3]
    2220:	4293      	cmp	r3, r2
    2222:	d0e5      	beq.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
          onRequestCallback();
    2224:	4798      	blx	r3
    2226:	e7e3      	b.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
  return (nextIndex(_iHead) == _iTail);
    2228:	0022      	movs	r2, r4
    222a:	32fc      	adds	r2, #252	; 0xfc
    222c:	69d3      	ldr	r3, [r2, #28]
    222e:	6a12      	ldr	r2, [r2, #32]
  return (uint32_t)(index + 1) % N;
    2230:	3301      	adds	r3, #1
    2232:	b2db      	uxtb	r3, r3
          sercom->prepareNackBitWIRE(); 
    2234:	6920      	ldr	r0, [r4, #16]
        if (rxBuffer.isFull()) {
    2236:	4293      	cmp	r3, r2
    2238:	d106      	bne.n	2248 <_ZN7TwoWire9onServiceEv+0xb8>
          sercom->prepareNackBitWIRE(); 
    223a:	f000 f94f 	bl	24dc <_ZN6SERCOM18prepareNackBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    223e:	2103      	movs	r1, #3
    2240:	6920      	ldr	r0, [r4, #16]
    2242:	f000 f95d 	bl	2500 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    2246:	e7d3      	b.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
          rxBuffer.store_char(sercom->readDataWIRE());
    2248:	f000 fa03 	bl	2652 <_ZN6SERCOM12readDataWIREEv>
    224c:	0001      	movs	r1, r0
    224e:	0020      	movs	r0, r4
    2250:	3018      	adds	r0, #24
    2252:	f7ff fee4 	bl	201e <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    2256:	6920      	ldr	r0, [r4, #16]
    2258:	f000 f948 	bl	24ec <_ZN6SERCOM17prepareAckBitWIREEv>
    225c:	e7ef      	b.n	223e <_ZN7TwoWire9onServiceEv+0xae>
    else if(sercom->isAddressMatch())  //Address Match
    225e:	6920      	ldr	r0, [r4, #16]
    2260:	f000 f9ed 	bl	263e <_ZN6SERCOM14isAddressMatchEv>
    2264:	2800      	cmp	r0, #0
    2266:	d1c4      	bne.n	21f2 <_ZN7TwoWire9onServiceEv+0x62>
    else if(sercom->isDataReadyWIRE())
    2268:	6920      	ldr	r0, [r4, #16]
    226a:	f000 f9d9 	bl	2620 <_ZN6SERCOM15isDataReadyWIREEv>
    226e:	2800      	cmp	r0, #0
    2270:	d0be      	beq.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
      if (sercom->isMasterReadOperationWIRE())
    2272:	6920      	ldr	r0, [r4, #16]
    2274:	f000 f9e8 	bl	2648 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    2278:	2800      	cmp	r0, #0
    227a:	d0d5      	beq.n	2228 <_ZN7TwoWire9onServiceEv+0x98>
  int delta = _iHead - _iTail;
    227c:	2387      	movs	r3, #135	; 0x87
    227e:	009b      	lsls	r3, r3, #2
    2280:	18e2      	adds	r2, r4, r3
    2282:	6853      	ldr	r3, [r2, #4]
    2284:	6892      	ldr	r2, [r2, #8]
    2286:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    2288:	d501      	bpl.n	228e <_ZN7TwoWire9onServiceEv+0xfe>
    return N + delta;
    228a:	3301      	adds	r3, #1
    228c:	33ff      	adds	r3, #255	; 0xff
        uint8_t c = 0xff;
    228e:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
    2290:	2b00      	cmp	r3, #0
    2292:	d005      	beq.n	22a0 <_ZN7TwoWire9onServiceEv+0x110>
    2294:	0020      	movs	r0, r4
    2296:	3021      	adds	r0, #33	; 0x21
    2298:	30ff      	adds	r0, #255	; 0xff
          c = txBuffer.read_char();
    229a:	f7ff ff27 	bl	20ec <_ZN11RingBufferNILi256EE9read_charEv>
    229e:	b2c1      	uxtb	r1, r0
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    22a0:	6920      	ldr	r0, [r4, #16]
    22a2:	f000 f99d 	bl	25e0 <_ZN6SERCOM17sendDataSlaveWIREEh>
    22a6:	75a0      	strb	r0, [r4, #22]
    22a8:	e7a2      	b.n	21f0 <_ZN7TwoWire9onServiceEv+0x60>
	...

000022ac <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    22ac:	b510      	push	{r4, lr}
    Wire.onService();
    22ae:	4802      	ldr	r0, [pc, #8]	; (22b8 <SERCOM3_Handler+0xc>)
    22b0:	f7ff ff6e 	bl	2190 <_ZN7TwoWire9onServiceEv>
  }
    22b4:	bd10      	pop	{r4, pc}
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	200006b0 	.word	0x200006b0

000022bc <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    22bc:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    22be:	2315      	movs	r3, #21
    22c0:	2214      	movs	r2, #20
    22c2:	4902      	ldr	r1, [pc, #8]	; (22cc <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
    22c4:	4802      	ldr	r0, [pc, #8]	; (22d0 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    22c6:	f7ff fe4f 	bl	1f68 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    22ca:	bd10      	pop	{r4, pc}
    22cc:	20000d68 	.word	0x20000d68
    22d0:	200006b0 	.word	0x200006b0

000022d4 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    22d4:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    22d6:	4802      	ldr	r0, [pc, #8]	; (22e0 <SERCOM0_Handler+0xc>)
    22d8:	f7fe fb3d 	bl	956 <_ZN4Uart10IrqHandlerEv>
}
    22dc:	bd10      	pop	{r4, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	20000b20 	.word	0x20000b20

000022e4 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    22e4:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    22e6:	4802      	ldr	r0, [pc, #8]	; (22f0 <SERCOM5_Handler+0xc>)
    22e8:	f7fe fb35 	bl	956 <_ZN4Uart10IrqHandlerEv>
}
    22ec:	bd10      	pop	{r4, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	200008e4 	.word	0x200008e4

000022f4 <_GLOBAL__sub_I_g_APinDescription>:
    22f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    22f6:	2401      	movs	r4, #1
    22f8:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    22fa:	4f15      	ldr	r7, [pc, #84]	; (2350 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    22fc:	4915      	ldr	r1, [pc, #84]	; (2354 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    22fe:	0038      	movs	r0, r7
    2300:	f000 f84a 	bl	2398 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    2304:	4914      	ldr	r1, [pc, #80]	; (2358 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    2306:	4815      	ldr	r0, [pc, #84]	; (235c <_GLOBAL__sub_I_g_APinDescription+0x68>)
    2308:	f000 f846 	bl	2398 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    230c:	4914      	ldr	r1, [pc, #80]	; (2360 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    230e:	4815      	ldr	r0, [pc, #84]	; (2364 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    2310:	f000 f842 	bl	2398 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    2314:	4914      	ldr	r1, [pc, #80]	; (2368 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    2316:	4815      	ldr	r0, [pc, #84]	; (236c <_GLOBAL__sub_I_g_APinDescription+0x78>)
    2318:	f000 f83e 	bl	2398 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    231c:	4914      	ldr	r1, [pc, #80]	; (2370 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    231e:	4815      	ldr	r0, [pc, #84]	; (2374 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    2320:	f000 f83a 	bl	2398 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    2324:	4d14      	ldr	r5, [pc, #80]	; (2378 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    2326:	4915      	ldr	r1, [pc, #84]	; (237c <_GLOBAL__sub_I_g_APinDescription+0x88>)
    2328:	0028      	movs	r0, r5
    232a:	f000 f835 	bl	2398 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    232e:	0039      	movs	r1, r7
    2330:	9600      	str	r6, [sp, #0]
    2332:	0023      	movs	r3, r4
    2334:	9401      	str	r4, [sp, #4]
    2336:	2200      	movs	r2, #0
    2338:	4811      	ldr	r0, [pc, #68]	; (2380 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    233a:	f7fe faa1 	bl	880 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    233e:	9600      	str	r6, [sp, #0]
    2340:	0029      	movs	r1, r5
    2342:	9401      	str	r4, [sp, #4]
    2344:	231e      	movs	r3, #30
    2346:	221f      	movs	r2, #31
    2348:	480e      	ldr	r0, [pc, #56]	; (2384 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    234a:	f7fe fa99 	bl	880 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    234e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2350:	20000d5c 	.word	0x20000d5c
    2354:	42000800 	.word	0x42000800
    2358:	42000c00 	.word	0x42000c00
    235c:	20000d60 	.word	0x20000d60
    2360:	42001000 	.word	0x42001000
    2364:	20000d64 	.word	0x20000d64
    2368:	42001400 	.word	0x42001400
    236c:	20000d68 	.word	0x20000d68
    2370:	42001800 	.word	0x42001800
    2374:	20000d6c 	.word	0x20000d6c
    2378:	20000d70 	.word	0x20000d70
    237c:	42001c00 	.word	0x42001c00
    2380:	20000b20 	.word	0x20000b20
    2384:	200008e4 	.word	0x200008e4

00002388 <_Znwj>:
    2388:	b510      	push	{r4, lr}
    238a:	f000 fd5b 	bl	2e44 <malloc>
    238e:	bd10      	pop	{r4, pc}

00002390 <_ZdlPv>:
    2390:	b510      	push	{r4, lr}
    2392:	f000 fd61 	bl	2e58 <free>
    2396:	bd10      	pop	{r4, pc}

00002398 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    2398:	6001      	str	r1, [r0, #0]
}
    239a:	4770      	bx	lr

0000239c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	ac05      	add	r4, sp, #20
    23a0:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    23a2:	6804      	ldr	r4, [r0, #0]
    23a4:	1e98      	subs	r0, r3, #2
    23a6:	1e47      	subs	r7, r0, #1
    23a8:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    23aa:	6826      	ldr	r6, [r4, #0]
    23ac:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    23ae:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    23b0:	4332      	orrs	r2, r6
    23b2:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    23b4:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    23b6:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    23b8:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    23ba:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    23bc:	6862      	ldr	r2, [r4, #4]
    23be:	4329      	orrs	r1, r5
    23c0:	2000      	movs	r0, #0
    23c2:	2b02      	cmp	r3, #2
    23c4:	d000      	beq.n	23c8 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    23c6:	0358      	lsls	r0, r3, #13
    23c8:	4311      	orrs	r1, r2
    23ca:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    23cc:	6061      	str	r1, [r4, #4]
}
    23ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000023d0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    23d0:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    23d2:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    23d4:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    23d6:	03a4      	lsls	r4, r4, #14
    23d8:	6818      	ldr	r0, [r3, #0]
    23da:	0512      	lsls	r2, r2, #20
    23dc:	4022      	ands	r2, r4
    23de:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    23e0:	20c0      	movs	r0, #192	; 0xc0
    23e2:	0409      	lsls	r1, r1, #16
    23e4:	0280      	lsls	r0, r0, #10
    23e6:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    23e8:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    23ea:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    23ec:	685a      	ldr	r2, [r3, #4]
    23ee:	4310      	orrs	r0, r2
    23f0:	6058      	str	r0, [r3, #4]
}
    23f2:	bd10      	pop	{r4, pc}

000023f4 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    23f4:	2201      	movs	r2, #1
    23f6:	6803      	ldr	r3, [r0, #0]
    23f8:	6819      	ldr	r1, [r3, #0]
    23fa:	430a      	orrs	r2, r1
    23fc:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    23fe:	681a      	ldr	r2, [r3, #0]
    2400:	07d2      	lsls	r2, r2, #31
    2402:	d4fc      	bmi.n	23fe <_ZN6SERCOM9resetUARTEv+0xa>
    2404:	69da      	ldr	r2, [r3, #28]
    2406:	07d2      	lsls	r2, r2, #31
    2408:	d4f9      	bmi.n	23fe <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    240a:	4770      	bx	lr

0000240c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    240c:	2202      	movs	r2, #2
    240e:	6803      	ldr	r3, [r0, #0]
    2410:	6819      	ldr	r1, [r3, #0]
    2412:	430a      	orrs	r2, r1
    2414:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    2416:	69da      	ldr	r2, [r3, #28]
    2418:	0792      	lsls	r2, r2, #30
    241a:	d4fc      	bmi.n	2416 <_ZN6SERCOM10enableUARTEv+0xa>
}
    241c:	4770      	bx	lr

0000241e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    241e:	6803      	ldr	r3, [r0, #0]
    2420:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    2422:	07d2      	lsls	r2, r2, #31
    2424:	d402      	bmi.n	242c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    2426:	7e1a      	ldrb	r2, [r3, #24]
    2428:	0792      	lsls	r2, r2, #30
    242a:	d5fc      	bpl.n	2426 <_ZN6SERCOM9flushUARTEv+0x8>
}
    242c:	4770      	bx	lr

0000242e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    242e:	2200      	movs	r2, #0
    2430:	6803      	ldr	r3, [r0, #0]
    2432:	835a      	strh	r2, [r3, #26]
}
    2434:	4770      	bx	lr

00002436 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    2436:	6803      	ldr	r3, [r0, #0]
    2438:	7e18      	ldrb	r0, [r3, #24]
    243a:	0740      	lsls	r0, r0, #29
    243c:	0fc0      	lsrs	r0, r0, #31
}
    243e:	4770      	bx	lr

00002440 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    2440:	6803      	ldr	r3, [r0, #0]
    2442:	7e18      	ldrb	r0, [r3, #24]
    2444:	09c0      	lsrs	r0, r0, #7
}
    2446:	4770      	bx	lr

00002448 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    2448:	2380      	movs	r3, #128	; 0x80
    244a:	6802      	ldr	r2, [r0, #0]
    244c:	425b      	negs	r3, r3
    244e:	7e11      	ldrb	r1, [r2, #24]
    2450:	430b      	orrs	r3, r1
    2452:	7613      	strb	r3, [r2, #24]
}
    2454:	4770      	bx	lr

00002456 <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    2456:	6803      	ldr	r3, [r0, #0]
    2458:	8b58      	ldrh	r0, [r3, #26]
    245a:	0780      	lsls	r0, r0, #30
    245c:	0fc0      	lsrs	r0, r0, #31
}
    245e:	4770      	bx	lr

00002460 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    2460:	2302      	movs	r3, #2
    2462:	6802      	ldr	r2, [r0, #0]
    2464:	8b51      	ldrh	r1, [r2, #26]
    2466:	430b      	orrs	r3, r1
    2468:	8353      	strh	r3, [r2, #26]
}
    246a:	4770      	bx	lr

0000246c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    246c:	6803      	ldr	r3, [r0, #0]
    246e:	7e18      	ldrb	r0, [r3, #24]
    2470:	07c0      	lsls	r0, r0, #31
    2472:	0fc0      	lsrs	r0, r0, #31
}
    2474:	4770      	bx	lr

00002476 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    2476:	6803      	ldr	r3, [r0, #0]
    2478:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    247a:	b2c0      	uxtb	r0, r0
}
    247c:	4770      	bx	lr

0000247e <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    247e:	6803      	ldr	r3, [r0, #0]
    2480:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    2482:	07d2      	lsls	r2, r2, #31
    2484:	d5fc      	bpl.n	2480 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    2486:	b289      	uxth	r1, r1
  return 1;
}
    2488:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    248a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    248c:	4770      	bx	lr

0000248e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    248e:	2201      	movs	r2, #1
    2490:	6803      	ldr	r3, [r0, #0]
    2492:	759a      	strb	r2, [r3, #22]
}
    2494:	4770      	bx	lr

00002496 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    2496:	2201      	movs	r2, #1
    2498:	6803      	ldr	r3, [r0, #0]
    249a:	751a      	strb	r2, [r3, #20]
}
    249c:	4770      	bx	lr

0000249e <_ZN6SERCOM9resetWIREEv>:
void SERCOM::resetWIRE()
{
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    249e:	2201      	movs	r2, #1
    24a0:	6803      	ldr	r3, [r0, #0]
    24a2:	6819      	ldr	r1, [r3, #0]
    24a4:	430a      	orrs	r2, r1
    24a6:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    24a8:	681a      	ldr	r2, [r3, #0]
    24aa:	07d2      	lsls	r2, r2, #31
    24ac:	d4fc      	bmi.n	24a8 <_ZN6SERCOM9resetWIREEv+0xa>
    24ae:	69da      	ldr	r2, [r3, #28]
    24b0:	07d2      	lsls	r2, r2, #31
    24b2:	d4f9      	bmi.n	24a8 <_ZN6SERCOM9resetWIREEv+0xa>
}
    24b4:	4770      	bx	lr

000024b6 <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    24b6:	2202      	movs	r2, #2
    24b8:	6803      	ldr	r3, [r0, #0]
    24ba:	6819      	ldr	r1, [r3, #0]
    24bc:	430a      	orrs	r2, r1
    24be:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    24c0:	69da      	ldr	r2, [r3, #28]
    24c2:	0792      	lsls	r2, r2, #30
    24c4:	d4fc      	bmi.n	24c0 <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    24c6:	2130      	movs	r1, #48	; 0x30
    24c8:	8b5a      	ldrh	r2, [r3, #26]
    24ca:	438a      	bics	r2, r1
    24cc:	0011      	movs	r1, r2
    24ce:	2210      	movs	r2, #16
    24d0:	430a      	orrs	r2, r1
    24d2:	835a      	strh	r2, [r3, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    24d4:	69da      	ldr	r2, [r3, #28]
    24d6:	0752      	lsls	r2, r2, #29
    24d8:	d4fc      	bmi.n	24d4 <_ZN6SERCOM10enableWIREEv+0x1e>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    24da:	4770      	bx	lr

000024dc <_ZN6SERCOM18prepareNackBitWIREEv>:
  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
}

void SERCOM::prepareNackBitWIRE( void )
{
    24dc:	2380      	movs	r3, #128	; 0x80
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    24de:	6802      	ldr	r2, [r0, #0]
    24e0:	02db      	lsls	r3, r3, #11
    24e2:	6811      	ldr	r1, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    24e4:	6851      	ldr	r1, [r2, #4]
    24e6:	430b      	orrs	r3, r1
    24e8:	6053      	str	r3, [r2, #4]
}
    24ea:	4770      	bx	lr

000024ec <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    24ec:	6803      	ldr	r3, [r0, #0]
    24ee:	4903      	ldr	r1, [pc, #12]	; (24fc <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
    24f0:	681a      	ldr	r2, [r3, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    24f2:	685a      	ldr	r2, [r3, #4]
    24f4:	400a      	ands	r2, r1
    24f6:	605a      	str	r2, [r3, #4]
}
    24f8:	4770      	bx	lr
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	fffbffff 	.word	0xfffbffff

00002500 <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    2500:	6803      	ldr	r3, [r0, #0]
{
    2502:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    2504:	6818      	ldr	r0, [r3, #0]
    2506:	2203      	movs	r2, #3
    2508:	06c0      	lsls	r0, r0, #27
    250a:	0f40      	lsrs	r0, r0, #29
    250c:	4c09      	ldr	r4, [pc, #36]	; (2534 <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    250e:	2805      	cmp	r0, #5
    2510:	d109      	bne.n	2526 <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    2512:	6858      	ldr	r0, [r3, #4]
    2514:	4011      	ands	r1, r2
    2516:	0409      	lsls	r1, r1, #16
    2518:	4020      	ands	r0, r4
    251a:	4301      	orrs	r1, r0
    251c:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    251e:	69da      	ldr	r2, [r3, #28]
    2520:	0752      	lsls	r2, r2, #29
    2522:	d4fc      	bmi.n	251e <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    2524:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    2526:	6858      	ldr	r0, [r3, #4]
    2528:	4011      	ands	r1, r2
    252a:	0409      	lsls	r1, r1, #16
    252c:	4020      	ands	r0, r4
    252e:	4301      	orrs	r1, r0
    2530:	6059      	str	r1, [r3, #4]
}
    2532:	e7f7      	b.n	2524 <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    2534:	fffcffff 	.word	0xfffcffff

00002538 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:
{
    2538:	b570      	push	{r4, r5, r6, lr}
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
}

bool SERCOM::isBusOwnerWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    253a:	6803      	ldr	r3, [r0, #0]
{
    253c:	0004      	movs	r4, r0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    253e:	8b58      	ldrh	r0, [r3, #26]
    2540:	0680      	lsls	r0, r0, #26
    2542:	0f80      	lsrs	r0, r0, #30
  if(!isBusOwnerWIRE())
    2544:	2802      	cmp	r0, #2
    2546:	d00e      	beq.n	2566 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
}

bool SERCOM::isBusBusyWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    2548:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    254a:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    254c:	06ad      	lsls	r5, r5, #26
    254e:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    2550:	2d03      	cmp	r5, #3
    2552:	d032      	beq.n	25ba <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
    2554:	8b58      	ldrh	r0, [r3, #26]
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    2556:	0780      	lsls	r0, r0, #30
    2558:	d505      	bpl.n	2566 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    255a:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    255c:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    255e:	06ad      	lsls	r5, r5, #26
    2560:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    2562:	2d01      	cmp	r5, #1
    2564:	d129      	bne.n	25ba <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  sercom->I2CM.ADDR.bit.ADDR = address;
    2566:	6a58      	ldr	r0, [r3, #36]	; 0x24
  address = (address << 0x1ul) | flag;
    2568:	0049      	lsls	r1, r1, #1
    256a:	4311      	orrs	r1, r2
  sercom->I2CM.ADDR.bit.ADDR = address;
    256c:	0ac0      	lsrs	r0, r0, #11
  address = (address << 0x1ul) | flag;
    256e:	b2c9      	uxtb	r1, r1
  sercom->I2CM.ADDR.bit.ADDR = address;
    2570:	02c0      	lsls	r0, r0, #11
    2572:	4308      	orrs	r0, r1
    2574:	6258      	str	r0, [r3, #36]	; 0x24
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    2576:	2a00      	cmp	r2, #0
    2578:	d113      	bne.n	25a2 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
    while( !sercom->I2CM.INTFLAG.bit.MB )
    257a:	7e1a      	ldrb	r2, [r3, #24]
    257c:	07d2      	lsls	r2, r2, #31
    257e:	d5fc      	bpl.n	257a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x42>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    2580:	8b5b      	ldrh	r3, [r3, #26]
    2582:	069b      	lsls	r3, r3, #26
    2584:	0f9b      	lsrs	r3, r3, #30
    if(!isBusOwnerWIRE())
    2586:	2b02      	cmp	r3, #2
    2588:	d004      	beq.n	2594 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
      startTransmissionWIRE(address >> 1, flag);
    258a:	0849      	lsrs	r1, r1, #1
    258c:	2200      	movs	r2, #0
    258e:	0020      	movs	r0, r4
    2590:	f7ff ffd2 	bl	2538 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
  if(sercom->I2CM.STATUS.bit.RXNACK)
    2594:	6823      	ldr	r3, [r4, #0]
    2596:	8b58      	ldrh	r0, [r3, #26]
    2598:	0740      	lsls	r0, r0, #29
    259a:	0fc3      	lsrs	r3, r0, #31
    259c:	2001      	movs	r0, #1
    259e:	4058      	eors	r0, r3
    25a0:	e00b      	b.n	25ba <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
    while( !sercom->I2CM.INTFLAG.bit.SB )
    25a2:	7e18      	ldrb	r0, [r3, #24]
    25a4:	0780      	lsls	r0, r0, #30
    25a6:	0fc0      	lsrs	r0, r0, #31
    25a8:	d1f4      	bne.n	2594 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
        if (sercom->I2CM.INTFLAG.bit.MB) {
    25aa:	7e1a      	ldrb	r2, [r3, #24]
    25ac:	07d2      	lsls	r2, r2, #31
    25ae:	d5f8      	bpl.n	25a2 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    25b0:	22c0      	movs	r2, #192	; 0xc0
    25b2:	6859      	ldr	r1, [r3, #4]
    25b4:	0292      	lsls	r2, r2, #10
    25b6:	430a      	orrs	r2, r1
    25b8:	605a      	str	r2, [r3, #4]
}
    25ba:	bd70      	pop	{r4, r5, r6, pc}

000025bc <_ZN6SERCOM18sendDataMasterWIREEh>:
  sercom->I2CM.DATA.bit.DATA = data;
    25bc:	6803      	ldr	r3, [r0, #0]
    25be:	001a      	movs	r2, r3
    25c0:	3228      	adds	r2, #40	; 0x28
    25c2:	7011      	strb	r1, [r2, #0]
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    25c4:	7e18      	ldrb	r0, [r3, #24]
    25c6:	07c0      	lsls	r0, r0, #31
    25c8:	0fc0      	lsrs	r0, r0, #31
    25ca:	d103      	bne.n	25d4 <_ZN6SERCOM18sendDataMasterWIREEh+0x18>
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    25cc:	8b5a      	ldrh	r2, [r3, #26]
    25ce:	07d2      	lsls	r2, r2, #31
    25d0:	d5f8      	bpl.n	25c4 <_ZN6SERCOM18sendDataMasterWIREEh+0x8>
}
    25d2:	4770      	bx	lr
  if(sercom->I2CM.STATUS.bit.RXNACK)
    25d4:	8b58      	ldrh	r0, [r3, #26]
    25d6:	0740      	lsls	r0, r0, #29
    25d8:	0fc3      	lsrs	r3, r0, #31
    25da:	2001      	movs	r0, #1
    25dc:	4058      	eors	r0, r3
    25de:	e7f8      	b.n	25d2 <_ZN6SERCOM18sendDataMasterWIREEh+0x16>

000025e0 <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
    25e0:	6803      	ldr	r3, [r0, #0]
    return false;
    25e2:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
    25e4:	001a      	movs	r2, r3
    25e6:	3228      	adds	r2, #40	; 0x28
    25e8:	7011      	strb	r1, [r2, #0]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    25ea:	7e1a      	ldrb	r2, [r3, #24]
    25ec:	0752      	lsls	r2, r2, #29
    25ee:	d504      	bpl.n	25fa <_ZN6SERCOM17sendDataSlaveWIREEh+0x1a>
    25f0:	8b58      	ldrh	r0, [r3, #26]
    25f2:	2301      	movs	r3, #1
    25f4:	0740      	lsls	r0, r0, #29
    25f6:	0fc0      	lsrs	r0, r0, #31
    25f8:	4058      	eors	r0, r3
}
    25fa:	4770      	bx	lr

000025fc <_ZN6SERCOM11isSlaveWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    25fc:	6803      	ldr	r3, [r0, #0]
    25fe:	6818      	ldr	r0, [r3, #0]
    2600:	06c0      	lsls	r0, r0, #27
    2602:	0f40      	lsrs	r0, r0, #29
    2604:	3804      	subs	r0, #4
    2606:	4243      	negs	r3, r0
    2608:	4158      	adcs	r0, r3
    260a:	b2c0      	uxtb	r0, r0
}
    260c:	4770      	bx	lr

0000260e <_ZN6SERCOM14isBusOwnerWIREEv>:
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    260e:	6803      	ldr	r3, [r0, #0]
    2610:	8b58      	ldrh	r0, [r3, #26]
    2612:	0680      	lsls	r0, r0, #26
    2614:	0f80      	lsrs	r0, r0, #30
    2616:	3802      	subs	r0, #2
    2618:	4243      	negs	r3, r0
    261a:	4158      	adcs	r0, r3
    261c:	b2c0      	uxtb	r0, r0
}
    261e:	4770      	bx	lr

00002620 <_ZN6SERCOM15isDataReadyWIREEv>:
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
    2620:	6803      	ldr	r3, [r0, #0]
    2622:	7e18      	ldrb	r0, [r3, #24]
    2624:	0740      	lsls	r0, r0, #29
    2626:	0fc0      	lsrs	r0, r0, #31
}
    2628:	4770      	bx	lr

0000262a <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
    262a:	6803      	ldr	r3, [r0, #0]
    262c:	7e18      	ldrb	r0, [r3, #24]
    262e:	07c0      	lsls	r0, r0, #31
    2630:	0fc0      	lsrs	r0, r0, #31
}
    2632:	4770      	bx	lr

00002634 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
    2634:	6803      	ldr	r3, [r0, #0]
    2636:	8b58      	ldrh	r0, [r3, #26]
    2638:	06c0      	lsls	r0, r0, #27
    263a:	0fc0      	lsrs	r0, r0, #31
}
    263c:	4770      	bx	lr

0000263e <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    263e:	6803      	ldr	r3, [r0, #0]
    2640:	7e18      	ldrb	r0, [r3, #24]
    2642:	0780      	lsls	r0, r0, #30
    2644:	0fc0      	lsrs	r0, r0, #31
}
    2646:	4770      	bx	lr

00002648 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
    2648:	6803      	ldr	r3, [r0, #0]
    264a:	8b58      	ldrh	r0, [r3, #26]
    264c:	0700      	lsls	r0, r0, #28
    264e:	0fc0      	lsrs	r0, r0, #31
}
    2650:	4770      	bx	lr

00002652 <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    2652:	6803      	ldr	r3, [r0, #0]
    2654:	681a      	ldr	r2, [r3, #0]
    2656:	06d2      	lsls	r2, r2, #27
    2658:	0f52      	lsrs	r2, r2, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
    265a:	2a05      	cmp	r2, #5
    265c:	d105      	bne.n	266a <_ZN6SERCOM12readDataWIREEv+0x18>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 && sercom->I2CM.INTFLAG.bit.MB == 0 )
    265e:	7e1a      	ldrb	r2, [r3, #24]
    2660:	0792      	lsls	r2, r2, #30
    2662:	d402      	bmi.n	266a <_ZN6SERCOM12readDataWIREEv+0x18>
    2664:	7e1a      	ldrb	r2, [r3, #24]
    2666:	07d2      	lsls	r2, r2, #31
    2668:	d5f9      	bpl.n	265e <_ZN6SERCOM12readDataWIREEv+0xc>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    266a:	3328      	adds	r3, #40	; 0x28
    266c:	7818      	ldrb	r0, [r3, #0]
    266e:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
  }
}
    2670:	4770      	bx	lr
	...

00002674 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    2674:	6803      	ldr	r3, [r0, #0]
    2676:	4a21      	ldr	r2, [pc, #132]	; (26fc <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    2678:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    267a:	4293      	cmp	r3, r2
    267c:	d011      	beq.n	26a2 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    267e:	4a20      	ldr	r2, [pc, #128]	; (2700 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    2680:	4293      	cmp	r3, r2
    2682:	d02f      	beq.n	26e4 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    2684:	4a1f      	ldr	r2, [pc, #124]	; (2704 <_ZN6SERCOM13initClockNVICEv+0x90>)
    2686:	4293      	cmp	r3, r2
    2688:	d02f      	beq.n	26ea <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    268a:	4a1f      	ldr	r2, [pc, #124]	; (2708 <_ZN6SERCOM13initClockNVICEv+0x94>)
    268c:	4293      	cmp	r3, r2
    268e:	d02f      	beq.n	26f0 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    2690:	4a1e      	ldr	r2, [pc, #120]	; (270c <_ZN6SERCOM13initClockNVICEv+0x98>)
    2692:	4293      	cmp	r3, r2
    2694:	d02f      	beq.n	26f6 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    2696:	4a1e      	ldr	r2, [pc, #120]	; (2710 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    2698:	4293      	cmp	r3, r2
    269a:	d122      	bne.n	26e2 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    269c:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    269e:	2219      	movs	r2, #25
    26a0:	e001      	b.n	26a6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    26a2:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    26a4:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26a6:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    26a8:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26aa:	4099      	lsls	r1, r3
    26ac:	4819      	ldr	r0, [pc, #100]	; (2714 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    26ae:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26b0:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    26b2:	0899      	lsrs	r1, r3, #2
    26b4:	402b      	ands	r3, r5
    26b6:	40ab      	lsls	r3, r5
    26b8:	35fc      	adds	r5, #252	; 0xfc
    26ba:	409d      	lsls	r5, r3
    26bc:	0089      	lsls	r1, r1, #2
    26be:	1809      	adds	r1, r1, r0
    26c0:	00a4      	lsls	r4, r4, #2
    26c2:	5908      	ldr	r0, [r1, r4]
    26c4:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    26c6:	25c0      	movs	r5, #192	; 0xc0
    26c8:	409d      	lsls	r5, r3
    26ca:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    26cc:	4303      	orrs	r3, r0
    26ce:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    26d0:	2380      	movs	r3, #128	; 0x80
    26d2:	01db      	lsls	r3, r3, #7
    26d4:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    26d6:	4b10      	ldr	r3, [pc, #64]	; (2718 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    26d8:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    26da:	785a      	ldrb	r2, [r3, #1]
    26dc:	b252      	sxtb	r2, r2
    26de:	2a00      	cmp	r2, #0
    26e0:	dbfb      	blt.n	26da <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    26e2:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    26e4:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    26e6:	2215      	movs	r2, #21
    26e8:	e7dd      	b.n	26a6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    26ea:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    26ec:	2216      	movs	r2, #22
    26ee:	e7da      	b.n	26a6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    26f0:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    26f2:	2217      	movs	r2, #23
    26f4:	e7d7      	b.n	26a6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    26f6:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    26f8:	2218      	movs	r2, #24
    26fa:	e7d4      	b.n	26a6 <_ZN6SERCOM13initClockNVICEv+0x32>
    26fc:	42000800 	.word	0x42000800
    2700:	42000c00 	.word	0x42000c00
    2704:	42001000 	.word	0x42001000
    2708:	42001400 	.word	0x42001400
    270c:	42001800 	.word	0x42001800
    2710:	42001c00 	.word	0x42001c00
    2714:	e000e100 	.word	0xe000e100
    2718:	40000c00 	.word	0x40000c00

0000271c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    271e:	0004      	movs	r4, r0
    2720:	0016      	movs	r6, r2
    2722:	000f      	movs	r7, r1
    2724:	001d      	movs	r5, r3
  initClockNVIC();
    2726:	f7ff ffa5 	bl	2674 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    272a:	0020      	movs	r0, r4
    272c:	f7ff fe62 	bl	23f4 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2730:	221c      	movs	r2, #28
    2732:	00bb      	lsls	r3, r7, #2
    2734:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2736:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2738:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    273a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    273c:	4313      	orrs	r3, r2
    273e:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    2740:	2384      	movs	r3, #132	; 0x84
    2742:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    2744:	2f01      	cmp	r7, #1
    2746:	d118      	bne.n	277a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    2748:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    274a:	2e01      	cmp	r6, #1
    274c:	d000      	beq.n	2750 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    274e:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    2750:	4b0a      	ldr	r3, [pc, #40]	; (277c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    2752:	4369      	muls	r1, r5
    2754:	6818      	ldr	r0, [r3, #0]
    2756:	00c0      	lsls	r0, r0, #3
    2758:	f000 fac4 	bl	2ce4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    275c:	2207      	movs	r2, #7
    275e:	89a3      	ldrh	r3, [r4, #12]
    2760:	4002      	ands	r2, r0
    2762:	04db      	lsls	r3, r3, #19
    2764:	0352      	lsls	r2, r2, #13
    2766:	0cdb      	lsrs	r3, r3, #19
    2768:	4313      	orrs	r3, r2
    276a:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    276c:	0403      	lsls	r3, r0, #16
    276e:	89a0      	ldrh	r0, [r4, #12]
    2770:	0cdb      	lsrs	r3, r3, #19
    2772:	0b40      	lsrs	r0, r0, #13
    2774:	0340      	lsls	r0, r0, #13
    2776:	4318      	orrs	r0, r3
    2778:	81a0      	strh	r0, [r4, #12]
}
    277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    277c:	20000004 	.word	0x20000004

00002780 <_ZN6SERCOM14initMasterWIREEm>:
{
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	0005      	movs	r5, r0
    2784:	000c      	movs	r4, r1
  initClockNVIC() ;
    2786:	f7ff ff75 	bl	2674 <_ZN6SERCOM13initClockNVICEv>
  resetWIRE() ;
    278a:	0028      	movs	r0, r5
    278c:	f7ff fe87 	bl	249e <_ZN6SERCOM9resetWIREEv>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    2790:	2314      	movs	r3, #20
    2792:	682d      	ldr	r5, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    2794:	0061      	lsls	r1, r4, #1
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    2796:	602b      	str	r3, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    2798:	4b0c      	ldr	r3, [pc, #48]	; (27cc <_ZN6SERCOM14initMasterWIREEm+0x4c>)
    279a:	681e      	ldr	r6, [r3, #0]
    279c:	0030      	movs	r0, r6
    279e:	f000 faa1 	bl	2ce4 <__udivsi3>
    27a2:	490b      	ldr	r1, [pc, #44]	; (27d0 <_ZN6SERCOM14initMasterWIREEm+0x50>)
    27a4:	0004      	movs	r4, r0
    27a6:	0030      	movs	r0, r6
    27a8:	f000 fa9c 	bl	2ce4 <__udivsi3>
    27ac:	237d      	movs	r3, #125	; 0x7d
    27ae:	21fa      	movs	r1, #250	; 0xfa
    27b0:	4358      	muls	r0, r3
    27b2:	00c9      	lsls	r1, r1, #3
    27b4:	f000 fa96 	bl	2ce4 <__udivsi3>
    27b8:	23ff      	movs	r3, #255	; 0xff
    27ba:	1a24      	subs	r4, r4, r0
    27bc:	68e8      	ldr	r0, [r5, #12]
    27be:	3c05      	subs	r4, #5
    27c0:	401c      	ands	r4, r3
    27c2:	4398      	bics	r0, r3
    27c4:	4304      	orrs	r4, r0
    27c6:	60ec      	str	r4, [r5, #12]
}
    27c8:	bd70      	pop	{r4, r5, r6, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	20000004 	.word	0x20000004
    27d0:	000f4240 	.word	0x000f4240

000027d4 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
    27d4:	2000      	movs	r0, #0
    27d6:	4770      	bx	lr

000027d8 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
    27d8:	b408      	push	{r3}
    27da:	4b02      	ldr	r3, [pc, #8]	; (27e4 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
    27dc:	469c      	mov	ip, r3
    27de:	3810      	subs	r0, #16
    27e0:	bc08      	pop	{r3}
    27e2:	4760      	bx	ip
    27e4:	000027d5 	.word	0x000027d5

000027e8 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    27e8:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    27ea:	250f      	movs	r5, #15
    27ec:	1dcb      	adds	r3, r1, #7
    27ee:	3901      	subs	r1, #1
    27f0:	0002      	movs	r2, r0
    27f2:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    27f4:	0014      	movs	r4, r2
		val = (val >> 4);
    27f6:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    27f8:	3430      	adds	r4, #48	; 0x30
    27fa:	2a09      	cmp	r2, #9
    27fc:	dd01      	ble.n	2802 <_ZL5utox8mPc+0x1a>
    27fe:	3237      	adds	r2, #55	; 0x37
    2800:	0014      	movs	r4, r2
    2802:	701c      	strb	r4, [r3, #0]
    2804:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    2806:	428b      	cmp	r3, r1
    2808:	d1f2      	bne.n	27f0 <_ZL5utox8mPc+0x8>
	}
}
    280a:	bd30      	pop	{r4, r5, pc}

0000280c <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
    280c:	b510      	push	{r4, lr}
    280e:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    2810:	4b0b      	ldr	r3, [pc, #44]	; (2840 <_ZN7Serial_12getShortNameEPc+0x34>)
    2812:	6818      	ldr	r0, [r3, #0]
    2814:	f7ff ffe8 	bl	27e8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    2818:	0021      	movs	r1, r4
    281a:	4b0a      	ldr	r3, [pc, #40]	; (2844 <_ZN7Serial_12getShortNameEPc+0x38>)
    281c:	3108      	adds	r1, #8
    281e:	6818      	ldr	r0, [r3, #0]
    2820:	f7ff ffe2 	bl	27e8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    2824:	0021      	movs	r1, r4
    2826:	4b08      	ldr	r3, [pc, #32]	; (2848 <_ZN7Serial_12getShortNameEPc+0x3c>)
    2828:	3110      	adds	r1, #16
    282a:	6818      	ldr	r0, [r3, #0]
    282c:	f7ff ffdc 	bl	27e8 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    2830:	0021      	movs	r1, r4
    2832:	4b06      	ldr	r3, [pc, #24]	; (284c <_ZN7Serial_12getShortNameEPc+0x40>)
    2834:	3118      	adds	r1, #24
    2836:	6818      	ldr	r0, [r3, #0]
    2838:	f7ff ffd6 	bl	27e8 <_ZL5utox8mPc>
	return 32;
}
    283c:	2020      	movs	r0, #32
    283e:	bd10      	pop	{r4, pc}
    2840:	0080a00c 	.word	0x0080a00c
    2844:	0080a040 	.word	0x0080a040
    2848:	0080a044 	.word	0x0080a044
    284c:	0080a048 	.word	0x0080a048

00002850 <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
    2850:	b408      	push	{r3}
    2852:	4b02      	ldr	r3, [pc, #8]	; (285c <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
    2854:	469c      	mov	ip, r3
    2856:	3810      	subs	r0, #16
    2858:	bc08      	pop	{r3}
    285a:	4760      	bx	ip
    285c:	0000280d 	.word	0x0000280d

00002860 <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
    2860:	4770      	bx	lr
	...

00002864 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
    2864:	b408      	push	{r3}
    2866:	4b02      	ldr	r3, [pc, #8]	; (2870 <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
    2868:	469c      	mov	ip, r3
    286a:	3810      	subs	r0, #16
    286c:	bc08      	pop	{r3}
    286e:	4760      	bx	ip
    2870:	00002861 	.word	0x00002861

00002874 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    2874:	203f      	movs	r0, #63	; 0x3f
    2876:	4770      	bx	lr

00002878 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    2878:	b513      	push	{r0, r1, r4, lr}
    287a:	466b      	mov	r3, sp
	return write(&c, 1);
    287c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    287e:	71d9      	strb	r1, [r3, #7]
    2880:	3307      	adds	r3, #7
	return write(&c, 1);
    2882:	6854      	ldr	r4, [r2, #4]
    2884:	0019      	movs	r1, r3
    2886:	2201      	movs	r2, #1
    2888:	47a0      	blx	r4
}
    288a:	bd16      	pop	{r1, r2, r4, pc}

0000288c <_ZN7Serial_12getInterfaceEPh>:
{
    288c:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
    288e:	780b      	ldrb	r3, [r1, #0]
{
    2890:	b095      	sub	sp, #84	; 0x54
	};
    2892:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
    2894:	3302      	adds	r3, #2
{
    2896:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
    2898:	700b      	strb	r3, [r1, #0]
	};
    289a:	2242      	movs	r2, #66	; 0x42
    289c:	2100      	movs	r1, #0
    289e:	0020      	movs	r0, r4
    28a0:	f000 faed 	bl	2e7e <memset>
    28a4:	2209      	movs	r2, #9
    28a6:	2504      	movs	r5, #4
    28a8:	7222      	strb	r2, [r4, #8]
    28aa:	2204      	movs	r2, #4
    28ac:	75a5      	strb	r5, [r4, #22]
    28ae:	7262      	strb	r2, [r4, #9]
    28b0:	2506      	movs	r5, #6
    28b2:	2205      	movs	r2, #5
    28b4:	2024      	movs	r0, #36	; 0x24
    28b6:	ae02      	add	r6, sp, #8
    28b8:	7665      	strb	r5, [r4, #25]
    28ba:	7725      	strb	r5, [r4, #28]
    28bc:	1995      	adds	r5, r2, r6
    28be:	74a0      	strb	r0, [r4, #18]
    28c0:	75e0      	strb	r0, [r4, #23]
    28c2:	76e0      	strb	r0, [r4, #27]
    28c4:	77e8      	strb	r0, [r5, #31]
    28c6:	0030      	movs	r0, r6
    28c8:	2101      	movs	r1, #1
    28ca:	3006      	adds	r0, #6
    28cc:	77c1      	strb	r1, [r0, #31]
    28ce:	0030      	movs	r0, r6
    28d0:	3007      	adds	r0, #7
    28d2:	77c1      	strb	r1, [r0, #31]
    28d4:	a804      	add	r0, sp, #16
    28d6:	77c1      	strb	r1, [r0, #31]
    28d8:	2009      	movs	r0, #9
    28da:	7321      	strb	r1, [r4, #12]
    28dc:	7561      	strb	r1, [r4, #21]
    28de:	1980      	adds	r0, r0, r6
    28e0:	3106      	adds	r1, #6
    28e2:	77c1      	strb	r1, [r0, #31]
    28e4:	200a      	movs	r0, #10
    28e6:	1980      	adds	r0, r0, r6
    28e8:	77c2      	strb	r2, [r0, #31]
    28ea:	2003      	movs	r0, #3
    28ec:	4684      	mov	ip, r0
    28ee:	4665      	mov	r5, ip
    28f0:	a805      	add	r0, sp, #20
    28f2:	77c5      	strb	r5, [r0, #31]
    28f4:	202e      	movs	r0, #46	; 0x2e
    28f6:	2710      	movs	r7, #16
    28f8:	1980      	adds	r0, r0, r6
    28fa:	7007      	strb	r7, [r0, #0]
    28fc:	202f      	movs	r0, #47	; 0x2f
    28fe:	2509      	movs	r5, #9
    2900:	2308      	movs	r3, #8
    2902:	1980      	adds	r0, r0, r6
    2904:	7005      	strb	r5, [r0, #0]
    2906:	2504      	movs	r5, #4
    2908:	7023      	strb	r3, [r4, #0]
    290a:	3303      	adds	r3, #3
    290c:	7063      	strb	r3, [r4, #1]
    290e:	a80e      	add	r0, sp, #56	; 0x38
    2910:	3b09      	subs	r3, #9
    2912:	70e3      	strb	r3, [r4, #3]
    2914:	7123      	strb	r3, [r4, #4]
    2916:	7163      	strb	r3, [r4, #5]
    2918:	7363      	strb	r3, [r4, #13]
    291a:	73a3      	strb	r3, [r4, #14]
    291c:	7462      	strb	r2, [r4, #17]
    291e:	7623      	strb	r3, [r4, #24]
    2920:	76a2      	strb	r2, [r4, #26]
    2922:	77e2      	strb	r2, [r4, #31]
    2924:	7527      	strb	r7, [r4, #20]
    2926:	8527      	strh	r7, [r4, #40]	; 0x28
    2928:	7005      	strb	r5, [r0, #0]
    292a:	2033      	movs	r0, #51	; 0x33
    292c:	0035      	movs	r5, r6
    292e:	1980      	adds	r0, r0, r6
    2930:	260a      	movs	r6, #10
    2932:	7003      	strb	r3, [r0, #0]
    2934:	a80f      	add	r0, sp, #60	; 0x3c
    2936:	7006      	strb	r6, [r0, #0]
    2938:	a810      	add	r0, sp, #64	; 0x40
    293a:	7001      	strb	r1, [r0, #0]
    293c:	2039      	movs	r0, #57	; 0x39
    293e:	1940      	adds	r0, r0, r5
    2940:	7002      	strb	r2, [r0, #0]
    2942:	203b      	movs	r0, #59	; 0x3b
    2944:	3635      	adds	r6, #53	; 0x35
    2946:	1976      	adds	r6, r6, r5
    2948:	7031      	strb	r1, [r6, #0]
    294a:	a912      	add	r1, sp, #72	; 0x48
    294c:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    294e:	2180      	movs	r1, #128	; 0x80
	};
    2950:	323d      	adds	r2, #61	; 0x3d
    2952:	1940      	adds	r0, r0, r5
    2954:	1952      	adds	r2, r2, r5
    2956:	7003      	strb	r3, [r0, #0]
    2958:	7013      	strb	r3, [r2, #0]
    295a:	2040      	movs	r0, #64	; 0x40
    295c:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    295e:	4249      	negs	r1, r1
    2960:	000e      	movs	r6, r1
	};
    2962:	3341      	adds	r3, #65	; 0x41
    2964:	195b      	adds	r3, r3, r5
    2966:	7018      	strb	r0, [r3, #0]
    2968:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
    296a:	9b01      	ldr	r3, [sp, #4]
	};
    296c:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
    296e:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    2970:	9a01      	ldr	r2, [sp, #4]
	};
    2972:	70a3      	strb	r3, [r4, #2]
    2974:	72a3      	strb	r3, [r4, #10]
    2976:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
    2978:	3301      	adds	r3, #1
    297a:	b2db      	uxtb	r3, r3
	};
    297c:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    297e:	7d52      	ldrb	r2, [r2, #21]
	};
    2980:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    2982:	4316      	orrs	r6, r2
	};
    2984:	1940      	adds	r0, r0, r5
    2986:	77c6      	strb	r6, [r0, #31]
    2988:	2031      	movs	r0, #49	; 0x31
    298a:	1940      	adds	r0, r0, r5
    298c:	7003      	strb	r3, [r0, #0]
    298e:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
    2990:	1c50      	adds	r0, r2, #1
	};
    2992:	195b      	adds	r3, r3, r5
    2994:	7018      	strb	r0, [r3, #0]
    2996:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
    2998:	3202      	adds	r2, #2
    299a:	430a      	orrs	r2, r1
	};
    299c:	195b      	adds	r3, r3, r5
    299e:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
    29a0:	0021      	movs	r1, r4
    29a2:	2242      	movs	r2, #66	; 0x42
    29a4:	4802      	ldr	r0, [pc, #8]	; (29b0 <_ZN7Serial_12getInterfaceEPh+0x124>)
    29a6:	f7fe fe81 	bl	16ac <_ZN14USBDeviceClass11sendControlEPKvm>
}
    29aa:	b015      	add	sp, #84	; 0x54
    29ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	200000f4 	.word	0x200000f4

000029b4 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
    29b4:	b408      	push	{r3}
    29b6:	4b02      	ldr	r3, [pc, #8]	; (29c0 <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
    29b8:	469c      	mov	ip, r3
    29ba:	3810      	subs	r0, #16
    29bc:	bc08      	pop	{r3}
    29be:	4760      	bx	ip
    29c0:	0000288d 	.word	0x0000288d

000029c4 <_ZN7Serial_5setupER8USBSetup>:
{
    29c4:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
    29c6:	790a      	ldrb	r2, [r1, #4]
    29c8:	7d03      	ldrb	r3, [r0, #20]
{
    29ca:	000c      	movs	r4, r1
		return false;
    29cc:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
    29ce:	429a      	cmp	r2, r3
    29d0:	d10b      	bne.n	29ea <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
    29d2:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
    29d4:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    29d6:	2ba1      	cmp	r3, #161	; 0xa1
    29d8:	d109      	bne.n	29ee <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
    29da:	2e21      	cmp	r6, #33	; 0x21
    29dc:	d105      	bne.n	29ea <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    29de:	2207      	movs	r2, #7
    29e0:	491f      	ldr	r1, [pc, #124]	; (2a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
    29e2:	4820      	ldr	r0, [pc, #128]	; (2a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    29e4:	f7fe fe62 	bl	16ac <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    29e8:	3501      	adds	r5, #1
}
    29ea:	0028      	movs	r0, r5
    29ec:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    29ee:	2b21      	cmp	r3, #33	; 0x21
    29f0:	d1fb      	bne.n	29ea <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
    29f2:	2e20      	cmp	r6, #32
    29f4:	d119      	bne.n	2a2a <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    29f6:	2207      	movs	r2, #7
    29f8:	4919      	ldr	r1, [pc, #100]	; (2a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
    29fa:	481a      	ldr	r0, [pc, #104]	; (2a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    29fc:	f7fe fd8c 	bl	1518 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
    2a00:	4b17      	ldr	r3, [pc, #92]	; (2a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
    2a02:	781a      	ldrb	r2, [r3, #0]
    2a04:	7859      	ldrb	r1, [r3, #1]
    2a06:	0209      	lsls	r1, r1, #8
    2a08:	4311      	orrs	r1, r2
    2a0a:	789a      	ldrb	r2, [r3, #2]
    2a0c:	0412      	lsls	r2, r2, #16
    2a0e:	4311      	orrs	r1, r2
    2a10:	78da      	ldrb	r2, [r3, #3]
    2a12:	0612      	lsls	r2, r2, #24
    2a14:	430a      	orrs	r2, r1
    2a16:	2196      	movs	r1, #150	; 0x96
    2a18:	00c9      	lsls	r1, r1, #3
    2a1a:	428a      	cmp	r2, r1
    2a1c:	d102      	bne.n	2a24 <_ZN7Serial_5setupER8USBSetup+0x60>
    2a1e:	79db      	ldrb	r3, [r3, #7]
    2a20:	07db      	lsls	r3, r3, #31
    2a22:	d508      	bpl.n	2a36 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
    2a24:	f7fd fd62 	bl	4ec <cancelReset>
    2a28:	e008      	b.n	2a3c <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    2a2a:	2e22      	cmp	r6, #34	; 0x22
    2a2c:	d10a      	bne.n	2a44 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
    2a2e:	788a      	ldrb	r2, [r1, #2]
    2a30:	4b0b      	ldr	r3, [pc, #44]	; (2a60 <_ZN7Serial_5setupER8USBSetup+0x9c>)
    2a32:	71da      	strb	r2, [r3, #7]
    2a34:	e7e4      	b.n	2a00 <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
    2a36:	20fa      	movs	r0, #250	; 0xfa
    2a38:	f7fd fd4e 	bl	4d8 <initiateReset>
			USBDevice.sendZlp(0);
    2a3c:	2100      	movs	r1, #0
    2a3e:	4809      	ldr	r0, [pc, #36]	; (2a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    2a40:	f7fe ff4a 	bl	18d8 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    2a44:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
    2a46:	2e23      	cmp	r6, #35	; 0x23
    2a48:	d1cf      	bne.n	29ea <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    2a4a:	78e3      	ldrb	r3, [r4, #3]
    2a4c:	78a2      	ldrb	r2, [r4, #2]
    2a4e:	021b      	lsls	r3, r3, #8
    2a50:	4313      	orrs	r3, r2
    2a52:	4a05      	ldr	r2, [pc, #20]	; (2a68 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
    2a54:	2100      	movs	r1, #0
    2a56:	4803      	ldr	r0, [pc, #12]	; (2a64 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    2a58:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
    2a5a:	f7fe ff3d 	bl	18d8 <_ZN14USBDeviceClass7sendZlpEm>
    2a5e:	e7c4      	b.n	29ea <_ZN7Serial_5setupER8USBSetup+0x26>
    2a60:	2000000c 	.word	0x2000000c
    2a64:	200000f4 	.word	0x200000f4
    2a68:	20000008 	.word	0x20000008

00002a6c <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
    2a6c:	b408      	push	{r3}
    2a6e:	4b02      	ldr	r3, [pc, #8]	; (2a78 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
    2a70:	469c      	mov	ip, r3
    2a72:	3810      	subs	r0, #16
    2a74:	bc08      	pop	{r3}
    2a76:	4760      	bx	ip
    2a78:	000029c5 	.word	0x000029c5

00002a7c <_ZN7Serial_9availableEv>:
{
    2a7c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
    2a7e:	7d41      	ldrb	r1, [r0, #21]
    2a80:	6a00      	ldr	r0, [r0, #32]
    2a82:	3101      	adds	r1, #1
    2a84:	f7fe fc72 	bl	136c <_ZN14USBDeviceClass9availableEm>
    2a88:	4b03      	ldr	r3, [pc, #12]	; (2a98 <_ZN7Serial_9availableEv+0x1c>)
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	3301      	adds	r3, #1
    2a8e:	1e5a      	subs	r2, r3, #1
    2a90:	4193      	sbcs	r3, r2
    2a92:	1818      	adds	r0, r3, r0
}
    2a94:	bd10      	pop	{r4, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	20000014 	.word	0x20000014

00002a9c <_ZN7Serial_5flushEv>:
{
    2a9c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    2a9e:	7d41      	ldrb	r1, [r0, #21]
    2aa0:	6a00      	ldr	r0, [r0, #32]
    2aa2:	3102      	adds	r1, #2
    2aa4:	f7fe fc78 	bl	1398 <_ZN14USBDeviceClass5flushEm>
}
    2aa8:	bd10      	pop	{r4, pc}

00002aaa <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
    2aaa:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
    2aac:	7d41      	ldrb	r1, [r0, #21]
    2aae:	6a00      	ldr	r0, [r0, #32]
    2ab0:	3102      	adds	r1, #2
    2ab2:	f7fe fc3f 	bl	1334 <_ZN14USBDeviceClass5clearEm>
}
    2ab6:	bd10      	pop	{r4, pc}

00002ab8 <_ZN7Serial_5writeEPKhj>:
{
    2ab8:	b570      	push	{r4, r5, r6, lr}
    2aba:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    2abc:	7d41      	ldrb	r1, [r0, #21]
{
    2abe:	0004      	movs	r4, r0
    2ac0:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    2ac2:	3102      	adds	r1, #2
    2ac4:	002a      	movs	r2, r5
    2ac6:	6a00      	ldr	r0, [r0, #32]
    2ac8:	f7fe fd3a 	bl	1540 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    2acc:	2800      	cmp	r0, #0
    2ace:	d101      	bne.n	2ad4 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
    2ad0:	2301      	movs	r3, #1
    2ad2:	6063      	str	r3, [r4, #4]
}
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

00002ad8 <_ZN7Serial_4peekEv>:
{
    2ad8:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    2ada:	4c05      	ldr	r4, [pc, #20]	; (2af0 <_ZN7Serial_4peekEv+0x18>)
    2adc:	6823      	ldr	r3, [r4, #0]
    2ade:	1c5a      	adds	r2, r3, #1
    2ae0:	d104      	bne.n	2aec <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    2ae2:	6803      	ldr	r3, [r0, #0]
    2ae4:	695b      	ldr	r3, [r3, #20]
    2ae6:	4798      	blx	r3
    2ae8:	0003      	movs	r3, r0
    2aea:	6020      	str	r0, [r4, #0]
}
    2aec:	0018      	movs	r0, r3
    2aee:	bd10      	pop	{r4, pc}
    2af0:	20000014 	.word	0x20000014

00002af4 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    2af4:	4a07      	ldr	r2, [pc, #28]	; (2b14 <_ZN7Serial_4readEv+0x20>)
{
    2af6:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
    2af8:	6810      	ldr	r0, [r2, #0]
{
    2afa:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    2afc:	1c41      	adds	r1, r0, #1
    2afe:	d003      	beq.n	2b08 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    2b00:	2301      	movs	r3, #1
    2b02:	425b      	negs	r3, r3
    2b04:	6013      	str	r3, [r2, #0]
}
    2b06:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    2b08:	7d59      	ldrb	r1, [r3, #21]
    2b0a:	6a18      	ldr	r0, [r3, #32]
    2b0c:	3101      	adds	r1, #1
    2b0e:	f7fe fcc7 	bl	14a0 <_ZN14USBDeviceClass4recvEm>
    2b12:	e7f8      	b.n	2b06 <_ZN7Serial_4readEv+0x12>
    2b14:	20000014 	.word	0x20000014

00002b18 <_ZN7Serial_C1ER14USBDeviceClass>:
    2b18:	23fa      	movs	r3, #250	; 0xfa
    2b1a:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
    2b1c:	b570      	push	{r4, r5, r6, lr}
    2b1e:	0004      	movs	r4, r0
    2b20:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
    2b22:	2303      	movs	r3, #3
    2b24:	7583      	strb	r3, [r0, #22]
    2b26:	0023      	movs	r3, r4
    Print() : write_error(0) {}
    2b28:	2200      	movs	r2, #0
    2b2a:	3328      	adds	r3, #40	; 0x28
    2b2c:	6042      	str	r2, [r0, #4]
    2b2e:	61a3      	str	r3, [r4, #24]
    2b30:	4b0c      	ldr	r3, [pc, #48]	; (2b64 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
    2b32:	2002      	movs	r0, #2
    2b34:	001d      	movs	r5, r3
    2b36:	3344      	adds	r3, #68	; 0x44
    2b38:	6123      	str	r3, [r4, #16]
    2b3a:	3508      	adds	r5, #8
    2b3c:	1d63      	adds	r3, r4, #5
    2b3e:	61e2      	str	r2, [r4, #28]
    2b40:	6025      	str	r5, [r4, #0]
    2b42:	6221      	str	r1, [r4, #32]
    2b44:	75e0      	strb	r0, [r4, #23]
    2b46:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
    2b48:	2383      	movs	r3, #131	; 0x83
    2b4a:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
    2b4c:	3b01      	subs	r3, #1
    2b4e:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
    2b50:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
    2b52:	f000 f8ad 	bl	2cb0 <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
    2b56:	0021      	movs	r1, r4
    2b58:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
    2b5a:	f000 f87d 	bl	2c58 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
    2b5e:	0020      	movs	r0, r4
    2b60:	bd70      	pop	{r4, r5, r6, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	000035ac 	.word	0x000035ac

00002b68 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
    2b68:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    2b6a:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2b6c:	4a09      	ldr	r2, [pc, #36]	; (2b94 <_ZN7Serial_15enableInterruptEv+0x2c>)
    2b6e:	2002      	movs	r0, #2
    2b70:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    2b72:	3301      	adds	r3, #1
    2b74:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2b76:	b2db      	uxtb	r3, r3
    2b78:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2b7a:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2b7c:	18d3      	adds	r3, r2, r3
    2b7e:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2b80:	31ff      	adds	r1, #255	; 0xff
    2b82:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2b84:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2b86:	4320      	orrs	r0, r4
    2b88:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2b8a:	7a99      	ldrb	r1, [r3, #10]
    2b8c:	430a      	orrs	r2, r1
    2b8e:	729a      	strb	r2, [r3, #10]
}
    2b90:	bd10      	pop	{r4, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	200005ac 	.word	0x200005ac

00002b98 <_ZN7Serial_5beginEm>:
}
    2b98:	4770      	bx	lr
	...

00002b9c <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
    2b9c:	b510      	push	{r4, lr}
    2b9e:	4902      	ldr	r1, [pc, #8]	; (2ba8 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
    2ba0:	4802      	ldr	r0, [pc, #8]	; (2bac <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
    2ba2:	f7ff ffb9 	bl	2b18 <_ZN7Serial_C1ER14USBDeviceClass>
    2ba6:	bd10      	pop	{r4, pc}
    2ba8:	200000f4 	.word	0x200000f4
    2bac:	20000d74 	.word	0x20000d74

00002bb0 <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	000e      	movs	r6, r1
	int sent = 0;
    2bb4:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2bb6:	6844      	ldr	r4, [r0, #4]
    2bb8:	2c00      	cmp	r4, #0
    2bba:	d00b      	beq.n	2bd4 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    2bbc:	6823      	ldr	r3, [r4, #0]
    2bbe:	0031      	movs	r1, r6
    2bc0:	685b      	ldr	r3, [r3, #4]
    2bc2:	0020      	movs	r0, r4
    2bc4:	4798      	blx	r3
		if (res < 0)
    2bc6:	2800      	cmp	r0, #0
    2bc8:	db02      	blt.n	2bd0 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    2bca:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    2bcc:	68e4      	ldr	r4, [r4, #12]
    2bce:	e7f3      	b.n	2bb8 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    2bd0:	2501      	movs	r5, #1
    2bd2:	426d      	negs	r5, r5
	}
	return sent;
}
    2bd4:	0028      	movs	r0, r5
    2bd6:	bd70      	pop	{r4, r5, r6, pc}

00002bd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    2bd8:	b570      	push	{r4, r5, r6, lr}
    2bda:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2bdc:	6844      	ldr	r4, [r0, #4]
    2bde:	2c00      	cmp	r4, #0
    2be0:	d008      	beq.n	2bf4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    2be2:	6823      	ldr	r3, [r4, #0]
    2be4:	0029      	movs	r1, r5
    2be6:	689b      	ldr	r3, [r3, #8]
    2be8:	0020      	movs	r0, r4
    2bea:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    2bec:	2800      	cmp	r0, #0
    2bee:	d102      	bne.n	2bf6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    2bf0:	68e4      	ldr	r4, [r4, #12]
    2bf2:	e7f4      	b.n	2bde <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    2bf4:	0020      	movs	r0, r4
}
    2bf6:	bd70      	pop	{r4, r5, r6, pc}

00002bf8 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
    2bf8:	b570      	push	{r4, r5, r6, lr}
    2bfa:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
    2bfc:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
    2bfe:	6844      	ldr	r4, [r0, #4]
    2c00:	2c00      	cmp	r4, #0
    2c02:	d009      	beq.n	2c18 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
    2c04:	6823      	ldr	r3, [r4, #0]
    2c06:	0029      	movs	r1, r5
    2c08:	0020      	movs	r0, r4
    2c0a:	691b      	ldr	r3, [r3, #16]
    2c0c:	4798      	blx	r3
		iSerialNum += len;
		size += len;
    2c0e:	1836      	adds	r6, r6, r0
		iSerialNum += len;
    2c10:	182d      	adds	r5, r5, r0
		size += len;
    2c12:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
    2c14:	68e4      	ldr	r4, [r4, #12]
    2c16:	e7f3      	b.n	2c00 <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
    2c18:	0030      	movs	r0, r6
	*iSerialNum = 0;
    2c1a:	702c      	strb	r4, [r5, #0]
}
    2c1c:	bd70      	pop	{r4, r5, r6, pc}

00002c1e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    2c1e:	b570      	push	{r4, r5, r6, lr}
    2c20:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2c22:	6844      	ldr	r4, [r0, #4]
    2c24:	2c00      	cmp	r4, #0
    2c26:	d008      	beq.n	2c3a <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    2c28:	6823      	ldr	r3, [r4, #0]
    2c2a:	0029      	movs	r1, r5
    2c2c:	681b      	ldr	r3, [r3, #0]
    2c2e:	0020      	movs	r0, r4
    2c30:	4798      	blx	r3
    2c32:	2800      	cmp	r0, #0
    2c34:	d102      	bne.n	2c3c <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    2c36:	68e4      	ldr	r4, [r4, #12]
    2c38:	e7f4      	b.n	2c24 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    2c3a:	0020      	movs	r0, r4
}
    2c3c:	bd70      	pop	{r4, r5, r6, pc}

00002c3e <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
    2c3e:	b570      	push	{r4, r5, r6, lr}
    2c40:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2c42:	6844      	ldr	r4, [r0, #4]
    2c44:	2c00      	cmp	r4, #0
    2c46:	d006      	beq.n	2c56 <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
    2c48:	6823      	ldr	r3, [r4, #0]
    2c4a:	0020      	movs	r0, r4
    2c4c:	68db      	ldr	r3, [r3, #12]
    2c4e:	0029      	movs	r1, r5
    2c50:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
    2c52:	68e4      	ldr	r4, [r4, #12]
    2c54:	e7f6      	b.n	2c44 <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
    2c56:	bd70      	pop	{r4, r5, r6, pc}

00002c58 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
    2c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    2c5a:	798c      	ldrb	r4, [r1, #6]
    2c5c:	7845      	ldrb	r5, [r0, #1]
{
    2c5e:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    2c60:	192a      	adds	r2, r5, r4
		return false;
    2c62:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    2c64:	2a07      	cmp	r2, #7
    2c66:	dc1f      	bgt.n	2ca8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
    2c68:	685a      	ldr	r2, [r3, #4]
    2c6a:	4282      	cmp	r2, r0
    2c6c:	d116      	bne.n	2c9c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
    2c6e:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
    2c70:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
    2c72:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
    2c74:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
    2c76:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
    2c78:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
    2c7a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2c7c:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
    2c7e:	4d0b      	ldr	r5, [pc, #44]	; (2cac <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2c80:	4294      	cmp	r4, r2
    2c82:	dd10      	ble.n	2ca6 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
    2c84:	688f      	ldr	r7, [r1, #8]
    2c86:	7858      	ldrb	r0, [r3, #1]
    2c88:	0096      	lsls	r6, r2, #2
    2c8a:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2c8c:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
    2c8e:	0086      	lsls	r6, r0, #2
		lastEp++;
    2c90:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
    2c92:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2c94:	b2d2      	uxtb	r2, r2
		lastEp++;
    2c96:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    2c98:	e7f2      	b.n	2c80 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
    2c9a:	0002      	movs	r2, r0
		while (current->next) {
    2c9c:	68d0      	ldr	r0, [r2, #12]
    2c9e:	2800      	cmp	r0, #0
    2ca0:	d1fb      	bne.n	2c9a <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
    2ca2:	60d1      	str	r1, [r2, #12]
    2ca4:	e7e4      	b.n	2c70 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
    2ca6:	2001      	movs	r0, #1
	// restart USB layer???
}
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	200000cc 	.word	0x200000cc

00002cb0 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2cb0:	2201      	movs	r2, #1
    2cb2:	4905      	ldr	r1, [pc, #20]	; (2cc8 <_Z12PluggableUSBv+0x18>)
    2cb4:	4805      	ldr	r0, [pc, #20]	; (2ccc <_Z12PluggableUSBv+0x1c>)
    2cb6:	680b      	ldr	r3, [r1, #0]
    2cb8:	4013      	ands	r3, r2
    2cba:	d103      	bne.n	2cc4 <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
    2cbc:	7003      	strb	r3, [r0, #0]
    2cbe:	7042      	strb	r2, [r0, #1]
    2cc0:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    2cc2:	600a      	str	r2, [r1, #0]
}
    2cc4:	4770      	bx	lr
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	20000da8 	.word	0x20000da8
    2ccc:	20000dac 	.word	0x20000dac

00002cd0 <__gnu_thumb1_case_uqi>:
    2cd0:	b402      	push	{r1}
    2cd2:	4671      	mov	r1, lr
    2cd4:	0849      	lsrs	r1, r1, #1
    2cd6:	0049      	lsls	r1, r1, #1
    2cd8:	5c09      	ldrb	r1, [r1, r0]
    2cda:	0049      	lsls	r1, r1, #1
    2cdc:	448e      	add	lr, r1
    2cde:	bc02      	pop	{r1}
    2ce0:	4770      	bx	lr
    2ce2:	46c0      	nop			; (mov r8, r8)

00002ce4 <__udivsi3>:
    2ce4:	2200      	movs	r2, #0
    2ce6:	0843      	lsrs	r3, r0, #1
    2ce8:	428b      	cmp	r3, r1
    2cea:	d374      	bcc.n	2dd6 <__udivsi3+0xf2>
    2cec:	0903      	lsrs	r3, r0, #4
    2cee:	428b      	cmp	r3, r1
    2cf0:	d35f      	bcc.n	2db2 <__udivsi3+0xce>
    2cf2:	0a03      	lsrs	r3, r0, #8
    2cf4:	428b      	cmp	r3, r1
    2cf6:	d344      	bcc.n	2d82 <__udivsi3+0x9e>
    2cf8:	0b03      	lsrs	r3, r0, #12
    2cfa:	428b      	cmp	r3, r1
    2cfc:	d328      	bcc.n	2d50 <__udivsi3+0x6c>
    2cfe:	0c03      	lsrs	r3, r0, #16
    2d00:	428b      	cmp	r3, r1
    2d02:	d30d      	bcc.n	2d20 <__udivsi3+0x3c>
    2d04:	22ff      	movs	r2, #255	; 0xff
    2d06:	0209      	lsls	r1, r1, #8
    2d08:	ba12      	rev	r2, r2
    2d0a:	0c03      	lsrs	r3, r0, #16
    2d0c:	428b      	cmp	r3, r1
    2d0e:	d302      	bcc.n	2d16 <__udivsi3+0x32>
    2d10:	1212      	asrs	r2, r2, #8
    2d12:	0209      	lsls	r1, r1, #8
    2d14:	d065      	beq.n	2de2 <__udivsi3+0xfe>
    2d16:	0b03      	lsrs	r3, r0, #12
    2d18:	428b      	cmp	r3, r1
    2d1a:	d319      	bcc.n	2d50 <__udivsi3+0x6c>
    2d1c:	e000      	b.n	2d20 <__udivsi3+0x3c>
    2d1e:	0a09      	lsrs	r1, r1, #8
    2d20:	0bc3      	lsrs	r3, r0, #15
    2d22:	428b      	cmp	r3, r1
    2d24:	d301      	bcc.n	2d2a <__udivsi3+0x46>
    2d26:	03cb      	lsls	r3, r1, #15
    2d28:	1ac0      	subs	r0, r0, r3
    2d2a:	4152      	adcs	r2, r2
    2d2c:	0b83      	lsrs	r3, r0, #14
    2d2e:	428b      	cmp	r3, r1
    2d30:	d301      	bcc.n	2d36 <__udivsi3+0x52>
    2d32:	038b      	lsls	r3, r1, #14
    2d34:	1ac0      	subs	r0, r0, r3
    2d36:	4152      	adcs	r2, r2
    2d38:	0b43      	lsrs	r3, r0, #13
    2d3a:	428b      	cmp	r3, r1
    2d3c:	d301      	bcc.n	2d42 <__udivsi3+0x5e>
    2d3e:	034b      	lsls	r3, r1, #13
    2d40:	1ac0      	subs	r0, r0, r3
    2d42:	4152      	adcs	r2, r2
    2d44:	0b03      	lsrs	r3, r0, #12
    2d46:	428b      	cmp	r3, r1
    2d48:	d301      	bcc.n	2d4e <__udivsi3+0x6a>
    2d4a:	030b      	lsls	r3, r1, #12
    2d4c:	1ac0      	subs	r0, r0, r3
    2d4e:	4152      	adcs	r2, r2
    2d50:	0ac3      	lsrs	r3, r0, #11
    2d52:	428b      	cmp	r3, r1
    2d54:	d301      	bcc.n	2d5a <__udivsi3+0x76>
    2d56:	02cb      	lsls	r3, r1, #11
    2d58:	1ac0      	subs	r0, r0, r3
    2d5a:	4152      	adcs	r2, r2
    2d5c:	0a83      	lsrs	r3, r0, #10
    2d5e:	428b      	cmp	r3, r1
    2d60:	d301      	bcc.n	2d66 <__udivsi3+0x82>
    2d62:	028b      	lsls	r3, r1, #10
    2d64:	1ac0      	subs	r0, r0, r3
    2d66:	4152      	adcs	r2, r2
    2d68:	0a43      	lsrs	r3, r0, #9
    2d6a:	428b      	cmp	r3, r1
    2d6c:	d301      	bcc.n	2d72 <__udivsi3+0x8e>
    2d6e:	024b      	lsls	r3, r1, #9
    2d70:	1ac0      	subs	r0, r0, r3
    2d72:	4152      	adcs	r2, r2
    2d74:	0a03      	lsrs	r3, r0, #8
    2d76:	428b      	cmp	r3, r1
    2d78:	d301      	bcc.n	2d7e <__udivsi3+0x9a>
    2d7a:	020b      	lsls	r3, r1, #8
    2d7c:	1ac0      	subs	r0, r0, r3
    2d7e:	4152      	adcs	r2, r2
    2d80:	d2cd      	bcs.n	2d1e <__udivsi3+0x3a>
    2d82:	09c3      	lsrs	r3, r0, #7
    2d84:	428b      	cmp	r3, r1
    2d86:	d301      	bcc.n	2d8c <__udivsi3+0xa8>
    2d88:	01cb      	lsls	r3, r1, #7
    2d8a:	1ac0      	subs	r0, r0, r3
    2d8c:	4152      	adcs	r2, r2
    2d8e:	0983      	lsrs	r3, r0, #6
    2d90:	428b      	cmp	r3, r1
    2d92:	d301      	bcc.n	2d98 <__udivsi3+0xb4>
    2d94:	018b      	lsls	r3, r1, #6
    2d96:	1ac0      	subs	r0, r0, r3
    2d98:	4152      	adcs	r2, r2
    2d9a:	0943      	lsrs	r3, r0, #5
    2d9c:	428b      	cmp	r3, r1
    2d9e:	d301      	bcc.n	2da4 <__udivsi3+0xc0>
    2da0:	014b      	lsls	r3, r1, #5
    2da2:	1ac0      	subs	r0, r0, r3
    2da4:	4152      	adcs	r2, r2
    2da6:	0903      	lsrs	r3, r0, #4
    2da8:	428b      	cmp	r3, r1
    2daa:	d301      	bcc.n	2db0 <__udivsi3+0xcc>
    2dac:	010b      	lsls	r3, r1, #4
    2dae:	1ac0      	subs	r0, r0, r3
    2db0:	4152      	adcs	r2, r2
    2db2:	08c3      	lsrs	r3, r0, #3
    2db4:	428b      	cmp	r3, r1
    2db6:	d301      	bcc.n	2dbc <__udivsi3+0xd8>
    2db8:	00cb      	lsls	r3, r1, #3
    2dba:	1ac0      	subs	r0, r0, r3
    2dbc:	4152      	adcs	r2, r2
    2dbe:	0883      	lsrs	r3, r0, #2
    2dc0:	428b      	cmp	r3, r1
    2dc2:	d301      	bcc.n	2dc8 <__udivsi3+0xe4>
    2dc4:	008b      	lsls	r3, r1, #2
    2dc6:	1ac0      	subs	r0, r0, r3
    2dc8:	4152      	adcs	r2, r2
    2dca:	0843      	lsrs	r3, r0, #1
    2dcc:	428b      	cmp	r3, r1
    2dce:	d301      	bcc.n	2dd4 <__udivsi3+0xf0>
    2dd0:	004b      	lsls	r3, r1, #1
    2dd2:	1ac0      	subs	r0, r0, r3
    2dd4:	4152      	adcs	r2, r2
    2dd6:	1a41      	subs	r1, r0, r1
    2dd8:	d200      	bcs.n	2ddc <__udivsi3+0xf8>
    2dda:	4601      	mov	r1, r0
    2ddc:	4152      	adcs	r2, r2
    2dde:	4610      	mov	r0, r2
    2de0:	4770      	bx	lr
    2de2:	e7ff      	b.n	2de4 <__udivsi3+0x100>
    2de4:	b501      	push	{r0, lr}
    2de6:	2000      	movs	r0, #0
    2de8:	f000 f806 	bl	2df8 <__aeabi_idiv0>
    2dec:	bd02      	pop	{r1, pc}
    2dee:	46c0      	nop			; (mov r8, r8)

00002df0 <__aeabi_uidivmod>:
    2df0:	2900      	cmp	r1, #0
    2df2:	d0f7      	beq.n	2de4 <__udivsi3+0x100>
    2df4:	e776      	b.n	2ce4 <__udivsi3>
    2df6:	4770      	bx	lr

00002df8 <__aeabi_idiv0>:
    2df8:	4770      	bx	lr
    2dfa:	46c0      	nop			; (mov r8, r8)

00002dfc <__libc_init_array>:
    2dfc:	b570      	push	{r4, r5, r6, lr}
    2dfe:	2600      	movs	r6, #0
    2e00:	4d0c      	ldr	r5, [pc, #48]	; (2e34 <__libc_init_array+0x38>)
    2e02:	4c0d      	ldr	r4, [pc, #52]	; (2e38 <__libc_init_array+0x3c>)
    2e04:	1b64      	subs	r4, r4, r5
    2e06:	10a4      	asrs	r4, r4, #2
    2e08:	42a6      	cmp	r6, r4
    2e0a:	d109      	bne.n	2e20 <__libc_init_array+0x24>
    2e0c:	2600      	movs	r6, #0
    2e0e:	f000 f911 	bl	3034 <_init>
    2e12:	4d0a      	ldr	r5, [pc, #40]	; (2e3c <__libc_init_array+0x40>)
    2e14:	4c0a      	ldr	r4, [pc, #40]	; (2e40 <__libc_init_array+0x44>)
    2e16:	1b64      	subs	r4, r4, r5
    2e18:	10a4      	asrs	r4, r4, #2
    2e1a:	42a6      	cmp	r6, r4
    2e1c:	d105      	bne.n	2e2a <__libc_init_array+0x2e>
    2e1e:	bd70      	pop	{r4, r5, r6, pc}
    2e20:	00b3      	lsls	r3, r6, #2
    2e22:	58eb      	ldr	r3, [r5, r3]
    2e24:	4798      	blx	r3
    2e26:	3601      	adds	r6, #1
    2e28:	e7ee      	b.n	2e08 <__libc_init_array+0xc>
    2e2a:	00b3      	lsls	r3, r6, #2
    2e2c:	58eb      	ldr	r3, [r5, r3]
    2e2e:	4798      	blx	r3
    2e30:	3601      	adds	r6, #1
    2e32:	e7f2      	b.n	2e1a <__libc_init_array+0x1e>
    2e34:	2000007c 	.word	0x2000007c
    2e38:	2000007c 	.word	0x2000007c
    2e3c:	2000007c 	.word	0x2000007c
    2e40:	20000094 	.word	0x20000094

00002e44 <malloc>:
    2e44:	b510      	push	{r4, lr}
    2e46:	4b03      	ldr	r3, [pc, #12]	; (2e54 <malloc+0x10>)
    2e48:	0001      	movs	r1, r0
    2e4a:	6818      	ldr	r0, [r3, #0]
    2e4c:	f000 f86a 	bl	2f24 <_malloc_r>
    2e50:	bd10      	pop	{r4, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	20000018 	.word	0x20000018

00002e58 <free>:
    2e58:	b510      	push	{r4, lr}
    2e5a:	4b03      	ldr	r3, [pc, #12]	; (2e68 <free+0x10>)
    2e5c:	0001      	movs	r1, r0
    2e5e:	6818      	ldr	r0, [r3, #0]
    2e60:	f000 f816 	bl	2e90 <_free_r>
    2e64:	bd10      	pop	{r4, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	20000018 	.word	0x20000018

00002e6c <memcpy>:
    2e6c:	2300      	movs	r3, #0
    2e6e:	b510      	push	{r4, lr}
    2e70:	429a      	cmp	r2, r3
    2e72:	d100      	bne.n	2e76 <memcpy+0xa>
    2e74:	bd10      	pop	{r4, pc}
    2e76:	5ccc      	ldrb	r4, [r1, r3]
    2e78:	54c4      	strb	r4, [r0, r3]
    2e7a:	3301      	adds	r3, #1
    2e7c:	e7f8      	b.n	2e70 <memcpy+0x4>

00002e7e <memset>:
    2e7e:	0003      	movs	r3, r0
    2e80:	1882      	adds	r2, r0, r2
    2e82:	4293      	cmp	r3, r2
    2e84:	d100      	bne.n	2e88 <memset+0xa>
    2e86:	4770      	bx	lr
    2e88:	7019      	strb	r1, [r3, #0]
    2e8a:	3301      	adds	r3, #1
    2e8c:	e7f9      	b.n	2e82 <memset+0x4>
	...

00002e90 <_free_r>:
    2e90:	b570      	push	{r4, r5, r6, lr}
    2e92:	0005      	movs	r5, r0
    2e94:	2900      	cmp	r1, #0
    2e96:	d010      	beq.n	2eba <_free_r+0x2a>
    2e98:	1f0c      	subs	r4, r1, #4
    2e9a:	6823      	ldr	r3, [r4, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	da00      	bge.n	2ea2 <_free_r+0x12>
    2ea0:	18e4      	adds	r4, r4, r3
    2ea2:	0028      	movs	r0, r5
    2ea4:	f000 f8b5 	bl	3012 <__malloc_lock>
    2ea8:	4a1d      	ldr	r2, [pc, #116]	; (2f20 <_free_r+0x90>)
    2eaa:	6813      	ldr	r3, [r2, #0]
    2eac:	2b00      	cmp	r3, #0
    2eae:	d105      	bne.n	2ebc <_free_r+0x2c>
    2eb0:	6063      	str	r3, [r4, #4]
    2eb2:	6014      	str	r4, [r2, #0]
    2eb4:	0028      	movs	r0, r5
    2eb6:	f000 f8ad 	bl	3014 <__malloc_unlock>
    2eba:	bd70      	pop	{r4, r5, r6, pc}
    2ebc:	42a3      	cmp	r3, r4
    2ebe:	d909      	bls.n	2ed4 <_free_r+0x44>
    2ec0:	6821      	ldr	r1, [r4, #0]
    2ec2:	1860      	adds	r0, r4, r1
    2ec4:	4283      	cmp	r3, r0
    2ec6:	d1f3      	bne.n	2eb0 <_free_r+0x20>
    2ec8:	6818      	ldr	r0, [r3, #0]
    2eca:	685b      	ldr	r3, [r3, #4]
    2ecc:	1841      	adds	r1, r0, r1
    2ece:	6021      	str	r1, [r4, #0]
    2ed0:	e7ee      	b.n	2eb0 <_free_r+0x20>
    2ed2:	0013      	movs	r3, r2
    2ed4:	685a      	ldr	r2, [r3, #4]
    2ed6:	2a00      	cmp	r2, #0
    2ed8:	d001      	beq.n	2ede <_free_r+0x4e>
    2eda:	42a2      	cmp	r2, r4
    2edc:	d9f9      	bls.n	2ed2 <_free_r+0x42>
    2ede:	6819      	ldr	r1, [r3, #0]
    2ee0:	1858      	adds	r0, r3, r1
    2ee2:	42a0      	cmp	r0, r4
    2ee4:	d10b      	bne.n	2efe <_free_r+0x6e>
    2ee6:	6820      	ldr	r0, [r4, #0]
    2ee8:	1809      	adds	r1, r1, r0
    2eea:	1858      	adds	r0, r3, r1
    2eec:	6019      	str	r1, [r3, #0]
    2eee:	4282      	cmp	r2, r0
    2ef0:	d1e0      	bne.n	2eb4 <_free_r+0x24>
    2ef2:	6810      	ldr	r0, [r2, #0]
    2ef4:	6852      	ldr	r2, [r2, #4]
    2ef6:	1841      	adds	r1, r0, r1
    2ef8:	6019      	str	r1, [r3, #0]
    2efa:	605a      	str	r2, [r3, #4]
    2efc:	e7da      	b.n	2eb4 <_free_r+0x24>
    2efe:	42a0      	cmp	r0, r4
    2f00:	d902      	bls.n	2f08 <_free_r+0x78>
    2f02:	230c      	movs	r3, #12
    2f04:	602b      	str	r3, [r5, #0]
    2f06:	e7d5      	b.n	2eb4 <_free_r+0x24>
    2f08:	6821      	ldr	r1, [r4, #0]
    2f0a:	1860      	adds	r0, r4, r1
    2f0c:	4282      	cmp	r2, r0
    2f0e:	d103      	bne.n	2f18 <_free_r+0x88>
    2f10:	6810      	ldr	r0, [r2, #0]
    2f12:	6852      	ldr	r2, [r2, #4]
    2f14:	1841      	adds	r1, r0, r1
    2f16:	6021      	str	r1, [r4, #0]
    2f18:	6062      	str	r2, [r4, #4]
    2f1a:	605c      	str	r4, [r3, #4]
    2f1c:	e7ca      	b.n	2eb4 <_free_r+0x24>
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	20000db4 	.word	0x20000db4

00002f24 <_malloc_r>:
    2f24:	2303      	movs	r3, #3
    2f26:	b570      	push	{r4, r5, r6, lr}
    2f28:	1ccd      	adds	r5, r1, #3
    2f2a:	439d      	bics	r5, r3
    2f2c:	3508      	adds	r5, #8
    2f2e:	0006      	movs	r6, r0
    2f30:	2d0c      	cmp	r5, #12
    2f32:	d21e      	bcs.n	2f72 <_malloc_r+0x4e>
    2f34:	250c      	movs	r5, #12
    2f36:	42a9      	cmp	r1, r5
    2f38:	d81d      	bhi.n	2f76 <_malloc_r+0x52>
    2f3a:	0030      	movs	r0, r6
    2f3c:	f000 f869 	bl	3012 <__malloc_lock>
    2f40:	4a25      	ldr	r2, [pc, #148]	; (2fd8 <_malloc_r+0xb4>)
    2f42:	6814      	ldr	r4, [r2, #0]
    2f44:	0021      	movs	r1, r4
    2f46:	2900      	cmp	r1, #0
    2f48:	d119      	bne.n	2f7e <_malloc_r+0x5a>
    2f4a:	4c24      	ldr	r4, [pc, #144]	; (2fdc <_malloc_r+0xb8>)
    2f4c:	6823      	ldr	r3, [r4, #0]
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d103      	bne.n	2f5a <_malloc_r+0x36>
    2f52:	0030      	movs	r0, r6
    2f54:	f000 f844 	bl	2fe0 <_sbrk_r>
    2f58:	6020      	str	r0, [r4, #0]
    2f5a:	0029      	movs	r1, r5
    2f5c:	0030      	movs	r0, r6
    2f5e:	f000 f83f 	bl	2fe0 <_sbrk_r>
    2f62:	1c43      	adds	r3, r0, #1
    2f64:	d12c      	bne.n	2fc0 <_malloc_r+0x9c>
    2f66:	230c      	movs	r3, #12
    2f68:	0030      	movs	r0, r6
    2f6a:	6033      	str	r3, [r6, #0]
    2f6c:	f000 f852 	bl	3014 <__malloc_unlock>
    2f70:	e003      	b.n	2f7a <_malloc_r+0x56>
    2f72:	2d00      	cmp	r5, #0
    2f74:	dadf      	bge.n	2f36 <_malloc_r+0x12>
    2f76:	230c      	movs	r3, #12
    2f78:	6033      	str	r3, [r6, #0]
    2f7a:	2000      	movs	r0, #0
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
    2f7e:	680b      	ldr	r3, [r1, #0]
    2f80:	1b5b      	subs	r3, r3, r5
    2f82:	d41a      	bmi.n	2fba <_malloc_r+0x96>
    2f84:	2b0b      	cmp	r3, #11
    2f86:	d903      	bls.n	2f90 <_malloc_r+0x6c>
    2f88:	600b      	str	r3, [r1, #0]
    2f8a:	18cc      	adds	r4, r1, r3
    2f8c:	6025      	str	r5, [r4, #0]
    2f8e:	e003      	b.n	2f98 <_malloc_r+0x74>
    2f90:	428c      	cmp	r4, r1
    2f92:	d10e      	bne.n	2fb2 <_malloc_r+0x8e>
    2f94:	6863      	ldr	r3, [r4, #4]
    2f96:	6013      	str	r3, [r2, #0]
    2f98:	0030      	movs	r0, r6
    2f9a:	f000 f83b 	bl	3014 <__malloc_unlock>
    2f9e:	0020      	movs	r0, r4
    2fa0:	2207      	movs	r2, #7
    2fa2:	300b      	adds	r0, #11
    2fa4:	1d23      	adds	r3, r4, #4
    2fa6:	4390      	bics	r0, r2
    2fa8:	1ac3      	subs	r3, r0, r3
    2faa:	d0e7      	beq.n	2f7c <_malloc_r+0x58>
    2fac:	425a      	negs	r2, r3
    2fae:	50e2      	str	r2, [r4, r3]
    2fb0:	e7e4      	b.n	2f7c <_malloc_r+0x58>
    2fb2:	684b      	ldr	r3, [r1, #4]
    2fb4:	6063      	str	r3, [r4, #4]
    2fb6:	000c      	movs	r4, r1
    2fb8:	e7ee      	b.n	2f98 <_malloc_r+0x74>
    2fba:	000c      	movs	r4, r1
    2fbc:	6849      	ldr	r1, [r1, #4]
    2fbe:	e7c2      	b.n	2f46 <_malloc_r+0x22>
    2fc0:	2303      	movs	r3, #3
    2fc2:	1cc4      	adds	r4, r0, #3
    2fc4:	439c      	bics	r4, r3
    2fc6:	42a0      	cmp	r0, r4
    2fc8:	d0e0      	beq.n	2f8c <_malloc_r+0x68>
    2fca:	1a21      	subs	r1, r4, r0
    2fcc:	0030      	movs	r0, r6
    2fce:	f000 f807 	bl	2fe0 <_sbrk_r>
    2fd2:	1c43      	adds	r3, r0, #1
    2fd4:	d1da      	bne.n	2f8c <_malloc_r+0x68>
    2fd6:	e7c6      	b.n	2f66 <_malloc_r+0x42>
    2fd8:	20000db4 	.word	0x20000db4
    2fdc:	20000db8 	.word	0x20000db8

00002fe0 <_sbrk_r>:
    2fe0:	2300      	movs	r3, #0
    2fe2:	b570      	push	{r4, r5, r6, lr}
    2fe4:	4c06      	ldr	r4, [pc, #24]	; (3000 <_sbrk_r+0x20>)
    2fe6:	0005      	movs	r5, r0
    2fe8:	0008      	movs	r0, r1
    2fea:	6023      	str	r3, [r4, #0]
    2fec:	f000 f814 	bl	3018 <_sbrk>
    2ff0:	1c43      	adds	r3, r0, #1
    2ff2:	d103      	bne.n	2ffc <_sbrk_r+0x1c>
    2ff4:	6823      	ldr	r3, [r4, #0]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d000      	beq.n	2ffc <_sbrk_r+0x1c>
    2ffa:	602b      	str	r3, [r5, #0]
    2ffc:	bd70      	pop	{r4, r5, r6, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	20000dc0 	.word	0x20000dc0

00003004 <strlen>:
    3004:	2300      	movs	r3, #0
    3006:	5cc2      	ldrb	r2, [r0, r3]
    3008:	3301      	adds	r3, #1
    300a:	2a00      	cmp	r2, #0
    300c:	d1fb      	bne.n	3006 <strlen+0x2>
    300e:	1e58      	subs	r0, r3, #1
    3010:	4770      	bx	lr

00003012 <__malloc_lock>:
    3012:	4770      	bx	lr

00003014 <__malloc_unlock>:
    3014:	4770      	bx	lr
	...

00003018 <_sbrk>:
    3018:	4a04      	ldr	r2, [pc, #16]	; (302c <_sbrk+0x14>)
    301a:	6813      	ldr	r3, [r2, #0]
    301c:	2b00      	cmp	r3, #0
    301e:	d003      	beq.n	3028 <_sbrk+0x10>
    3020:	1818      	adds	r0, r3, r0
    3022:	6010      	str	r0, [r2, #0]
    3024:	0018      	movs	r0, r3
    3026:	4770      	bx	lr
    3028:	4b01      	ldr	r3, [pc, #4]	; (3030 <_sbrk+0x18>)
    302a:	e7f9      	b.n	3020 <_sbrk+0x8>
    302c:	20000dbc 	.word	0x20000dbc
    3030:	20000dc4 	.word	0x20000dc4

00003034 <_init>:
    3034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	bcf8      	pop	{r3, r4, r5, r6, r7}
    303a:	bc08      	pop	{r3}
    303c:	469e      	mov	lr, r3
    303e:	4770      	bx	lr

00003040 <_fini>:
    3040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3046:	bc08      	pop	{r3}
    3048:	469e      	mov	lr, r3
    304a:	4770      	bx	lr
    304c:	6e756f46 	.word	0x6e756f46
    3050:	32492064 	.word	0x32492064
    3054:	45452043 	.word	0x45452043
    3058:	4d4f5250 	.word	0x4d4f5250
    305c:	73655200 	.word	0x73655200
    3060:	74726174 	.word	0x74726174
    3064:	00206465 	.word	0x00206465
    3068:	6d697420 	.word	0x6d697420
    306c:	49007365 	.word	0x49007365
    3070:	45204332 	.word	0x45204332
    3074:	4f525045 	.word	0x4f525045
    3078:	6f6e204d 	.word	0x6f6e204d
    307c:	64692074 	.word	0x64692074
    3080:	69746e65 	.word	0x69746e65
    3084:	64656966 	.word	0x64656966
    3088:	2e2e2e20 	.word	0x2e2e2e20
    308c:	65686320 	.word	0x65686320
    3090:	79206b63 	.word	0x79206b63
    3094:	2072756f 	.word	0x2072756f
    3098:	6e6e6f63 	.word	0x6e6e6f63
    309c:	69746365 	.word	0x69746365
    30a0:	3f736e6f 	.word	0x3f736e6f
    30a4:	0a000a0d 	.word	0x0a000a0d
    30a8:	00783020 	.word	0x00783020
    30ac:	0000203a 	.word	0x0000203a

000030b0 <_ZTV4Uart>:
	...
    30b8:	00000a25 0000039d 0000094b 00000907     %.......K.......
    30c8:	00000921 00000ad9 000006e9 000006d9     !...............
    30d8:	0000076d 00000703 000006d5              m...........

000030e4 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    30ec:	00000cc1 00000f77 00000f5f 00000f3d     ....w..._...=...
    30fc:	00000b25 00000b27 00000c15              %...'.......

00003108 <_ZL14STRING_PRODUCT>:
    3108:	75647241 206f6e69 6f72655a 03040000              Arduino Zero..

00003116 <_ZL15STRING_LANGUAGE>:
    3116:	04090304                                ....

0000311a <_ZL19STRING_MANUFACTURER>:
    311a:	75647241 206f6e69 00434c4c              Arduino LLC.

00003126 <_ZL21USB_DeviceDescriptorB>:
    3126:	02000112 400102ef 804d2341 02010100     .......@A#M.....
    3136:	00000103                                         ..

00003138 <_ZTV7TwoWire>:
	...
    3140:	000020c3 00001f15 00000399 00001f39     . ..........9...
    3150:	00001f55 00002187 00001f3b              U....!..;...

0000315c <g_APinDescription>:
    315c:	00000000 0000000b 00000002 00000004     ................
    316c:	ffff00ff 000bffff 00000000 0000000a     ................
    317c:	00000002 00000004 ffff00ff 000affff     ................
    318c:	00000000 0000000e 00000008 00000004     ................
    319c:	ffff00ff 000effff 00000000 00000009     ................
    31ac:	00000004 0000001c 000100ff 00090001     ................
    31bc:	00000000 00000008 00000004 0000001c     ................
    31cc:	000000ff 00100000 00000000 0000000f     ................
    31dc:	00000004 0000001c 030100ff 000f0301     ................
    31ec:	00000000 00000014 00000005 0000002c     ............,...
    31fc:	000200ff 00040002 00000000 00000015     ................
    320c:	00000005 0000002c 000300ff 00050003     ....,...........
    321c:	00000000 00000006 00000004 0000001c     ................
    322c:	010000ff 00060100 00000000 00000007     ................
    323c:	00000004 0000001c 010100ff 00070101     ................
    324c:	00000000 00000012 00000004 0000001c     ................
    325c:	030000ff 00020300 00000000 00000010     ................
    326c:	00000004 0000001c 020000ff 00000200     ................
    327c:	00000000 00000013 00000005 0000002c     ............,...
    328c:	000300ff 00030003 00000000 00000011     ................
    329c:	00000004 0000001c 020100ff 00010201     ................
    32ac:	00000000 00000002 00000001 00000002     ................
    32bc:	ffff0000 0002ffff 00000001 00000008     ................
    32cc:	00000001 00000018 04000002 00080400     ................
    32dc:	00000001 00000009 00000001 00000018     ................
    32ec:	04010003 00090401 00000000 00000004     ................
    32fc:	00000001 00000000 ffff0004 0004ffff     ................
    330c:	00000000 00000005 00000001 00000000     ................
    331c:	ffff0005 0005ffff 00000001 00000002     ................
    332c:	00000001 00000000 ffff000a 0002ffff     ................
    333c:	00000000 00000016 00000002 00000004     ................
    334c:	ffff00ff 0006ffff 00000000 00000017     ................
    335c:	00000002 00000004 ffff00ff 0007ffff     ................
    336c:	00000000 0000000c 00000003 00000004     ................
    337c:	ffff00ff 000cffff 00000001 0000000a     ................
    338c:	00000003 00000004 ffff00ff 000affff     ................
    339c:	00000001 0000000b 00000003 00000004     ................
    33ac:	ffff00ff 000bffff 00000001 00000003     ................
    33bc:	0000000b 00000004 ffff00ff 00ffffff     ................
    33cc:	00000000 0000001b 0000000b 00000004     ................
    33dc:	ffff00ff 00ffffff 00000000 0000001c     ................
    33ec:	00000006 00000000 ffff00ff 00ffffff     ................
    33fc:	00000000 00000018 00000006 00000000     ................
    340c:	ffff00ff 00ffffff 00000000 00000019     ................
    341c:	00000006 00000000 ffff00ff 00ffffff     ................
    342c:	00000001 00000016 00000003 00000000     ................
    343c:	ffff00ff 00ffffff 00000001 00000017     ................
    344c:	00000003 00000000 ffff00ff 00ffffff     ................
    345c:	00000000 00000016 00000002 00000000     ................
    346c:	ffff00ff 00ffffff 00000000 00000017     ................
    347c:	00000002 00000000 ffff00ff 00ffffff     ................
    348c:	00000000 00000013 00000002 00000000     ................
    349c:	ffff00ff 00ffffff 00000000 00000010     ................
    34ac:	00000002 00000000 ffff00ff 00ffffff     ................
    34bc:	00000000 00000012 00000002 00000000     ................
    34cc:	ffff00ff 00ffffff 00000000 00000011     ................
    34dc:	00000002 00000000 ffff00ff 00ffffff     ................
    34ec:	00000000 0000000d 00000004 0000000c     ................
    34fc:	000100ff 000dffff 00000000 00000015     ................
    350c:	00000005 0000000c 000300ff 00ffffff     ................
    351c:	00000000 00000006 00000004 0000000c     ................
    352c:	010000ff 00ffffff 00000000 00000007     ................
    353c:	00000004 0000000c 010100ff 00ffffff     ................
    354c:	00000000 00000003 00000001 00000002     ................
    355c:	ffff00ff 00ffffff 00000000 00000002     ................
    356c:	00000001 00000002 ffff0014 0002ffff     ................
    357c:	00000000 0000001e 00000004 00000006     ................
    358c:	ffff00ff 000a0100 00000000 0000001f     ................
    359c:	00000004 00000006 ffff00ff 000b0101     ................

000035ac <_ZTV7Serial_>:
	...
    35b4:	00002879 00002ab9 00002875 00002a9d     y(...*..u(...*..
    35c4:	00002a7d 00002af5 00002ad9 00002aab     }*...*...*...*..
    35d4:	0000288d 000027d5 000029c5 0000280d     .(...'...)...(..
    35e4:	00002861 fffffff0 00000000 00002a6d     a(..........m*..
    35f4:	000029b5 000027d9 00002865 00002851     .)...'..e(..Q(..

00003604 <__EH_FRAME_BEGIN__>:
    3604:	00000000                                ....
