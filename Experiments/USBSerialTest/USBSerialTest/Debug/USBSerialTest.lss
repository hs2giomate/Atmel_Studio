
USBSerialTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d888  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000d888  0000d888  0001d888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000052c  20000000  0000d890  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002052c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002052c  2**0
                  CONTENTS
  5 .bss          00000914  2000052c  0000ddbc  0002052c  2**2
                  ALLOC
  6 .stack        00010000  20000e40  0000e6d0  0002052c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002055a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00055584  00000000  00000000  000205b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000074c2  00000000  00000000  00075b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017f63  00000000  00000000  0007cff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002aa8  00000000  00000000  00094f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000027d8  00000000  00000000  00097a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00048277  00000000  00000000  0009a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e718  00000000  00000000  000e2453  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00137fdc  00000000  00000000  00110b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b42c  00000000  00000000  00248b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 0e 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     @.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	fd 53 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .S..............
      7c:	d1 02 00 00 8d 42 00 00 9d 42 00 00 ad 42 00 00     .....B...B...B..
      8c:	bd 42 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .B..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 e9 65 00 00 05 66 00 00 21 66 00 00     .....e...f..!f..
     114:	3d 66 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     =f..............
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 59 66 00 00 75 66 00 00 91 66 00 00     ....Yf..uf...f..
     154:	ad 66 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .f..............
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 11 38 00 00 11 a0 00 00     .........8......
     184:	21 a0 00 00 31 a0 00 00 41 a0 00 00 d1 02 00 00     !...1...A.......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 41 77 00 00 5d 77 00 00     ........Aw..]w..
     1f4:	79 77 00 00 95 77 00 00 d1 02 00 00 d1 02 00 00     yw...w..........
     204:	d1 02 00 00 b1 77 00 00 d1 02 00 00 d1 02 00 00     .....w..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000052c 	.word	0x2000052c
     280:	00000000 	.word	0x00000000
     284:	0000d890 	.word	0x0000d890

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d890 	.word	0x0000d890
     2c4:	20000530 	.word	0x20000530
     2c8:	0000d890 	.word	0x0000d890
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000d890 	.word	0x0000d890
     33c:	2000052c 	.word	0x2000052c
     340:	20000e40 	.word	0x20000e40
     344:	2000052c 	.word	0x2000052c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000d08d 	.word	0x0000d08d
     354:	000003a9 	.word	0x000003a9

00000358 <_Z14StartLivePulsev>:
		usb_echo_test();
		
	}
}

uint8_t	StartLivePulse(void){
     358:	b508      	push	{r3, lr}
	//usb<<"**** Life Pulse Activated****"<<NEWLINE;
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     35a:	4802      	ldr	r0, [pc, #8]	; (364 <_Z14StartLivePulsev+0xc>)
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <_Z14StartLivePulsev+0x10>)
     35e:	4798      	blx	r3
	return p;
}
     360:	b2c0      	uxtb	r0, r0
     362:	bd08      	pop	{r3, pc}
     364:	20000ca4 	.word	0x20000ca4
     368:	00001bc9 	.word	0x00001bc9

0000036c <_Z13usb_echo_testv>:

void usb_echo_test(void){
     36c:	b510      	push	{r4, lr}
	char c;
	if (usb.available())
     36e:	4809      	ldr	r0, [pc, #36]	; (394 <_Z13usb_echo_testv+0x28>)
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <_Z13usb_echo_testv+0x2c>)
     372:	4798      	blx	r3
     374:	b900      	cbnz	r0, 378 <_Z13usb_echo_testv+0xc>
     376:	bd10      	pop	{r4, pc}
	{
		int inByte=usb.read();
     378:	4806      	ldr	r0, [pc, #24]	; (394 <_Z13usb_echo_testv+0x28>)
     37a:	4b08      	ldr	r3, [pc, #32]	; (39c <_Z13usb_echo_testv+0x30>)
     37c:	4798      	blx	r3
     37e:	4604      	mov	r4, r0
		if (inByte>33)
     380:	2821      	cmp	r0, #33	; 0x21
     382:	ddf8      	ble.n	376 <_Z13usb_echo_testv+0xa>
		{
//			usb.writeData2(&inByte,1);
			delay_ms(100);
     384:	2064      	movs	r0, #100	; 0x64
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <_Z13usb_echo_testv+0x34>)
     388:	4798      	blx	r3
			c=char(inByte);
			usb.print(c);
     38a:	b2e1      	uxtb	r1, r4
     38c:	4801      	ldr	r0, [pc, #4]	; (394 <_Z13usb_echo_testv+0x28>)
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <_Z13usb_echo_testv+0x38>)
     390:	4798      	blx	r3
// 			usb.println((float)inByte/23);
// 			usb<<"it does work"<<NEWLINE;
		}
	}
}
     392:	e7f0      	b.n	376 <_Z13usb_echo_testv+0xa>
     394:	20000b5c 	.word	0x20000b5c
     398:	0000ca25 	.word	0x0000ca25
     39c:	0000c881 	.word	0x0000c881
     3a0:	0000187d 	.word	0x0000187d
     3a4:	0000cb15 	.word	0x0000cb15

000003a8 <main>:
{
     3a8:	b508      	push	{r3, lr}
	atmel_start_init();
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <main+0x1c>)
     3ac:	4798      	blx	r3
	usb.Init();
     3ae:	4806      	ldr	r0, [pc, #24]	; (3c8 <main+0x20>)
     3b0:	4b06      	ldr	r3, [pc, #24]	; (3cc <main+0x24>)
     3b2:	4798      	blx	r3
	delay_ms(100);
     3b4:	2064      	movs	r0, #100	; 0x64
     3b6:	4b06      	ldr	r3, [pc, #24]	; (3d0 <main+0x28>)
     3b8:	4798      	blx	r3
	StartLivePulse();
     3ba:	4b06      	ldr	r3, [pc, #24]	; (3d4 <main+0x2c>)
     3bc:	4798      	blx	r3
		usb_echo_test();
     3be:	4c06      	ldr	r4, [pc, #24]	; (3d8 <main+0x30>)
     3c0:	47a0      	blx	r4
     3c2:	e7fd      	b.n	3c0 <main+0x18>
     3c4:	000003dd 	.word	0x000003dd
     3c8:	20000b5c 	.word	0x20000b5c
     3cc:	0000c7a1 	.word	0x0000c7a1
     3d0:	0000187d 	.word	0x0000187d
     3d4:	00000359 	.word	0x00000359
     3d8:	0000036d 	.word	0x0000036d

000003dc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3dc:	b580      	push	{r7, lr}
     3de:	af00      	add	r7, sp, #0
	system_init();
     3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <atmel_start_init+0x14>)
     3e2:	4798      	blx	r3
	usb_init();
     3e4:	4b03      	ldr	r3, [pc, #12]	; (3f4 <atmel_start_init+0x18>)
     3e6:	4798      	blx	r3
	spi_nor_flash_init();
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <atmel_start_init+0x1c>)
     3ea:	4798      	blx	r3
}
     3ec:	bf00      	nop
     3ee:	bd80      	pop	{r7, pc}
     3f0:	000014f5 	.word	0x000014f5
     3f4:	0000a715 	.word	0x0000a715
     3f8:	0000a6a9 	.word	0x0000a6a9

000003fc <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     3fc:	b480      	push	{r7}
     3fe:	b085      	sub	sp, #20
     400:	af00      	add	r7, sp, #0
     402:	60f8      	str	r0, [r7, #12]
     404:	460b      	mov	r3, r1
     406:	607a      	str	r2, [r7, #4]
     408:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     40a:	7afa      	ldrb	r2, [r7, #11]
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	3220      	adds	r2, #32
     410:	6879      	ldr	r1, [r7, #4]
     412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     416:	bf00      	nop
     418:	3714      	adds	r7, #20
     41a:	46bd      	mov	sp, r7
     41c:	f85d 7b04 	ldr.w	r7, [sp], #4
     420:	4770      	bx	lr

00000422 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     422:	b480      	push	{r7}
     424:	b083      	sub	sp, #12
     426:	af00      	add	r7, sp, #0
     428:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     42a:	687b      	ldr	r3, [r7, #4]
     42c:	691b      	ldr	r3, [r3, #16]
     42e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     432:	687b      	ldr	r3, [r7, #4]
     434:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     436:	bf00      	nop
     438:	370c      	adds	r7, #12
     43a:	46bd      	mov	sp, r7
     43c:	f85d 7b04 	ldr.w	r7, [sp], #4
     440:	4770      	bx	lr

00000442 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     442:	b480      	push	{r7}
     444:	b083      	sub	sp, #12
     446:	af00      	add	r7, sp, #0
     448:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	691b      	ldr	r3, [r3, #16]
     44e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     452:	687b      	ldr	r3, [r7, #4]
     454:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     456:	bf00      	nop
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	f85d 7b04 	ldr.w	r7, [sp], #4
     460:	4770      	bx	lr

00000462 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     462:	b480      	push	{r7}
     464:	b083      	sub	sp, #12
     466:	af00      	add	r7, sp, #0
     468:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	691b      	ldr	r3, [r3, #16]
     46e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     472:	687b      	ldr	r3, [r7, #4]
     474:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     476:	bf00      	nop
     478:	370c      	adds	r7, #12
     47a:	46bd      	mov	sp, r7
     47c:	f85d 7b04 	ldr.w	r7, [sp], #4
     480:	4770      	bx	lr

00000482 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     482:	b480      	push	{r7}
     484:	b083      	sub	sp, #12
     486:	af00      	add	r7, sp, #0
     488:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	691b      	ldr	r3, [r3, #16]
     48e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     492:	687b      	ldr	r3, [r7, #4]
     494:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     496:	bf00      	nop
     498:	370c      	adds	r7, #12
     49a:	46bd      	mov	sp, r7
     49c:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a0:	4770      	bx	lr

000004a2 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     4a2:	b480      	push	{r7}
     4a4:	b083      	sub	sp, #12
     4a6:	af00      	add	r7, sp, #0
     4a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	695b      	ldr	r3, [r3, #20]
     4ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4b6:	bf00      	nop
     4b8:	370c      	adds	r7, #12
     4ba:	46bd      	mov	sp, r7
     4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c0:	4770      	bx	lr

000004c2 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4c2:	b480      	push	{r7}
     4c4:	b083      	sub	sp, #12
     4c6:	af00      	add	r7, sp, #0
     4c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	695b      	ldr	r3, [r3, #20]
     4ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4d6:	bf00      	nop
     4d8:	370c      	adds	r7, #12
     4da:	46bd      	mov	sp, r7
     4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e0:	4770      	bx	lr

000004e2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4e2:	b480      	push	{r7}
     4e4:	b083      	sub	sp, #12
     4e6:	af00      	add	r7, sp, #0
     4e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	695b      	ldr	r3, [r3, #20]
     4ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4f6:	bf00      	nop
     4f8:	370c      	adds	r7, #12
     4fa:	46bd      	mov	sp, r7
     4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     500:	4770      	bx	lr

00000502 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     502:	b480      	push	{r7}
     504:	b083      	sub	sp, #12
     506:	af00      	add	r7, sp, #0
     508:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	695b      	ldr	r3, [r3, #20]
     50e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     512:	687b      	ldr	r3, [r7, #4]
     514:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     516:	bf00      	nop
     518:	370c      	adds	r7, #12
     51a:	46bd      	mov	sp, r7
     51c:	f85d 7b04 	ldr.w	r7, [sp], #4
     520:	4770      	bx	lr

00000522 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     522:	b480      	push	{r7}
     524:	b083      	sub	sp, #12
     526:	af00      	add	r7, sp, #0
     528:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	695b      	ldr	r3, [r3, #20]
     52e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     532:	687b      	ldr	r3, [r7, #4]
     534:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     536:	bf00      	nop
     538:	370c      	adds	r7, #12
     53a:	46bd      	mov	sp, r7
     53c:	f85d 7b04 	ldr.w	r7, [sp], #4
     540:	4770      	bx	lr

00000542 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     542:	b480      	push	{r7}
     544:	b083      	sub	sp, #12
     546:	af00      	add	r7, sp, #0
     548:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	695b      	ldr	r3, [r3, #20]
     54e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     552:	687b      	ldr	r3, [r7, #4]
     554:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     556:	bf00      	nop
     558:	370c      	adds	r7, #12
     55a:	46bd      	mov	sp, r7
     55c:	f85d 7b04 	ldr.w	r7, [sp], #4
     560:	4770      	bx	lr

00000562 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	695b      	ldr	r3, [r3, #20]
     56e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     572:	687b      	ldr	r3, [r7, #4]
     574:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     576:	bf00      	nop
     578:	370c      	adds	r7, #12
     57a:	46bd      	mov	sp, r7
     57c:	f85d 7b04 	ldr.w	r7, [sp], #4
     580:	4770      	bx	lr

00000582 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     582:	b480      	push	{r7}
     584:	b083      	sub	sp, #12
     586:	af00      	add	r7, sp, #0
     588:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	699b      	ldr	r3, [r3, #24]
     58e:	f043 0201 	orr.w	r2, r3, #1
     592:	687b      	ldr	r3, [r7, #4]
     594:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     596:	bf00      	nop
     598:	370c      	adds	r7, #12
     59a:	46bd      	mov	sp, r7
     59c:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a0:	4770      	bx	lr

000005a2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     5a2:	b480      	push	{r7}
     5a4:	b083      	sub	sp, #12
     5a6:	af00      	add	r7, sp, #0
     5a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     5aa:	687b      	ldr	r3, [r7, #4]
     5ac:	699b      	ldr	r3, [r3, #24]
     5ae:	f043 0202 	orr.w	r2, r3, #2
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5b6:	bf00      	nop
     5b8:	370c      	adds	r7, #12
     5ba:	46bd      	mov	sp, r7
     5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c0:	4770      	bx	lr

000005c2 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     5c2:	b480      	push	{r7}
     5c4:	b083      	sub	sp, #12
     5c6:	af00      	add	r7, sp, #0
     5c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	699b      	ldr	r3, [r3, #24]
     5ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5d6:	bf00      	nop
     5d8:	370c      	adds	r7, #12
     5da:	46bd      	mov	sp, r7
     5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e0:	4770      	bx	lr

000005e2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     5e2:	b480      	push	{r7}
     5e4:	b083      	sub	sp, #12
     5e6:	af00      	add	r7, sp, #0
     5e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	699b      	ldr	r3, [r3, #24]
     5ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5f6:	bf00      	nop
     5f8:	370c      	adds	r7, #12
     5fa:	46bd      	mov	sp, r7
     5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     600:	4770      	bx	lr

00000602 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     602:	b480      	push	{r7}
     604:	b083      	sub	sp, #12
     606:	af00      	add	r7, sp, #0
     608:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	699b      	ldr	r3, [r3, #24]
     60e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     612:	687b      	ldr	r3, [r7, #4]
     614:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     616:	bf00      	nop
     618:	370c      	adds	r7, #12
     61a:	46bd      	mov	sp, r7
     61c:	f85d 7b04 	ldr.w	r7, [sp], #4
     620:	4770      	bx	lr

00000622 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     622:	b480      	push	{r7}
     624:	b083      	sub	sp, #12
     626:	af00      	add	r7, sp, #0
     628:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	69db      	ldr	r3, [r3, #28]
     62e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     632:	687b      	ldr	r3, [r7, #4]
     634:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     636:	bf00      	nop
     638:	370c      	adds	r7, #12
     63a:	46bd      	mov	sp, r7
     63c:	f85d 7b04 	ldr.w	r7, [sp], #4
     640:	4770      	bx	lr

00000642 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     642:	b480      	push	{r7}
     644:	b083      	sub	sp, #12
     646:	af00      	add	r7, sp, #0
     648:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	6a1b      	ldr	r3, [r3, #32]
     64e:	f043 0202 	orr.w	r2, r3, #2
     652:	687b      	ldr	r3, [r7, #4]
     654:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     656:	bf00      	nop
     658:	370c      	adds	r7, #12
     65a:	46bd      	mov	sp, r7
     65c:	f85d 7b04 	ldr.w	r7, [sp], #4
     660:	4770      	bx	lr

00000662 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     662:	b480      	push	{r7}
     664:	b083      	sub	sp, #12
     666:	af00      	add	r7, sp, #0
     668:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	6a1b      	ldr	r3, [r3, #32]
     66e:	f043 0204 	orr.w	r2, r3, #4
     672:	687b      	ldr	r3, [r7, #4]
     674:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     676:	bf00      	nop
     678:	370c      	adds	r7, #12
     67a:	46bd      	mov	sp, r7
     67c:	f85d 7b04 	ldr.w	r7, [sp], #4
     680:	4770      	bx	lr

00000682 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     682:	b480      	push	{r7}
     684:	b083      	sub	sp, #12
     686:	af00      	add	r7, sp, #0
     688:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	6a1b      	ldr	r3, [r3, #32]
     68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     692:	687b      	ldr	r3, [r7, #4]
     694:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     696:	bf00      	nop
     698:	370c      	adds	r7, #12
     69a:	46bd      	mov	sp, r7
     69c:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a0:	4770      	bx	lr

000006a2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6a2:	b480      	push	{r7}
     6a4:	b085      	sub	sp, #20
     6a6:	af00      	add	r7, sp, #0
     6a8:	60f8      	str	r0, [r7, #12]
     6aa:	460b      	mov	r3, r1
     6ac:	607a      	str	r2, [r7, #4]
     6ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b0:	7afb      	ldrb	r3, [r7, #11]
     6b2:	68fa      	ldr	r2, [r7, #12]
     6b4:	01db      	lsls	r3, r3, #7
     6b6:	4413      	add	r3, r2
     6b8:	3308      	adds	r3, #8
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	601a      	str	r2, [r3, #0]
}
     6be:	bf00      	nop
     6c0:	3714      	adds	r7, #20
     6c2:	46bd      	mov	sp, r7
     6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c8:	4770      	bx	lr

000006ca <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6ca:	b480      	push	{r7}
     6cc:	b085      	sub	sp, #20
     6ce:	af00      	add	r7, sp, #0
     6d0:	60f8      	str	r0, [r7, #12]
     6d2:	460b      	mov	r3, r1
     6d4:	607a      	str	r2, [r7, #4]
     6d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d8:	7afb      	ldrb	r3, [r7, #11]
     6da:	68fa      	ldr	r2, [r7, #12]
     6dc:	01db      	lsls	r3, r3, #7
     6de:	4413      	add	r3, r2
     6e0:	3304      	adds	r3, #4
     6e2:	687a      	ldr	r2, [r7, #4]
     6e4:	601a      	str	r2, [r3, #0]
}
     6e6:	bf00      	nop
     6e8:	3714      	adds	r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f0:	4770      	bx	lr

000006f2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     6f2:	b480      	push	{r7}
     6f4:	b085      	sub	sp, #20
     6f6:	af00      	add	r7, sp, #0
     6f8:	60f8      	str	r0, [r7, #12]
     6fa:	460b      	mov	r3, r1
     6fc:	607a      	str	r2, [r7, #4]
     6fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     700:	7afb      	ldrb	r3, [r7, #11]
     702:	68fa      	ldr	r2, [r7, #12]
     704:	01db      	lsls	r3, r3, #7
     706:	4413      	add	r3, r2
     708:	3318      	adds	r3, #24
     70a:	687a      	ldr	r2, [r7, #4]
     70c:	601a      	str	r2, [r3, #0]
}
     70e:	bf00      	nop
     710:	3714      	adds	r7, #20
     712:	46bd      	mov	sp, r7
     714:	f85d 7b04 	ldr.w	r7, [sp], #4
     718:	4770      	bx	lr

0000071a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     71a:	b480      	push	{r7}
     71c:	b085      	sub	sp, #20
     71e:	af00      	add	r7, sp, #0
     720:	60f8      	str	r0, [r7, #12]
     722:	460b      	mov	r3, r1
     724:	607a      	str	r2, [r7, #4]
     726:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     728:	7afb      	ldrb	r3, [r7, #11]
     72a:	68fa      	ldr	r2, [r7, #12]
     72c:	01db      	lsls	r3, r3, #7
     72e:	4413      	add	r3, r2
     730:	3314      	adds	r3, #20
     732:	687a      	ldr	r2, [r7, #4]
     734:	601a      	str	r2, [r3, #0]
}
     736:	bf00      	nop
     738:	3714      	adds	r7, #20
     73a:	46bd      	mov	sp, r7
     73c:	f85d 7b04 	ldr.w	r7, [sp], #4
     740:	4770      	bx	lr

00000742 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     742:	b480      	push	{r7}
     744:	b085      	sub	sp, #20
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
     74a:	4608      	mov	r0, r1
     74c:	4611      	mov	r1, r2
     74e:	461a      	mov	r2, r3
     750:	4603      	mov	r3, r0
     752:	70fb      	strb	r3, [r7, #3]
     754:	460b      	mov	r3, r1
     756:	70bb      	strb	r3, [r7, #2]
     758:	4613      	mov	r3, r2
     75a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     75c:	78fa      	ldrb	r2, [r7, #3]
     75e:	78bb      	ldrb	r3, [r7, #2]
     760:	6879      	ldr	r1, [r7, #4]
     762:	01d2      	lsls	r2, r2, #7
     764:	440a      	add	r2, r1
     766:	4413      	add	r3, r2
     768:	3330      	adds	r3, #48	; 0x30
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     76e:	7bfb      	ldrb	r3, [r7, #15]
     770:	f023 030f 	bic.w	r3, r3, #15
     774:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     776:	787b      	ldrb	r3, [r7, #1]
     778:	f003 030f 	and.w	r3, r3, #15
     77c:	b2da      	uxtb	r2, r3
     77e:	7bfb      	ldrb	r3, [r7, #15]
     780:	4313      	orrs	r3, r2
     782:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     784:	78fa      	ldrb	r2, [r7, #3]
     786:	78bb      	ldrb	r3, [r7, #2]
     788:	6879      	ldr	r1, [r7, #4]
     78a:	01d2      	lsls	r2, r2, #7
     78c:	440a      	add	r2, r1
     78e:	4413      	add	r3, r2
     790:	3330      	adds	r3, #48	; 0x30
     792:	7bfa      	ldrb	r2, [r7, #15]
     794:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     796:	bf00      	nop
     798:	3714      	adds	r7, #20
     79a:	46bd      	mov	sp, r7
     79c:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a0:	4770      	bx	lr

000007a2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     7a2:	b480      	push	{r7}
     7a4:	b085      	sub	sp, #20
     7a6:	af00      	add	r7, sp, #0
     7a8:	6078      	str	r0, [r7, #4]
     7aa:	4608      	mov	r0, r1
     7ac:	4611      	mov	r1, r2
     7ae:	461a      	mov	r2, r3
     7b0:	4603      	mov	r3, r0
     7b2:	70fb      	strb	r3, [r7, #3]
     7b4:	460b      	mov	r3, r1
     7b6:	70bb      	strb	r3, [r7, #2]
     7b8:	4613      	mov	r3, r2
     7ba:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7bc:	78fa      	ldrb	r2, [r7, #3]
     7be:	78bb      	ldrb	r3, [r7, #2]
     7c0:	6879      	ldr	r1, [r7, #4]
     7c2:	01d2      	lsls	r2, r2, #7
     7c4:	440a      	add	r2, r1
     7c6:	4413      	add	r3, r2
     7c8:	3330      	adds	r3, #48	; 0x30
     7ca:	781b      	ldrb	r3, [r3, #0]
     7cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	7bfb      	ldrb	r3, [r7, #15]
     7d0:	f003 030f 	and.w	r3, r3, #15
     7d4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     7d6:	787b      	ldrb	r3, [r7, #1]
     7d8:	011b      	lsls	r3, r3, #4
     7da:	b2da      	uxtb	r2, r3
     7dc:	7bfb      	ldrb	r3, [r7, #15]
     7de:	4313      	orrs	r3, r2
     7e0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	78bb      	ldrb	r3, [r7, #2]
     7e6:	6879      	ldr	r1, [r7, #4]
     7e8:	01d2      	lsls	r2, r2, #7
     7ea:	440a      	add	r2, r1
     7ec:	4413      	add	r3, r2
     7ee:	3330      	adds	r3, #48	; 0x30
     7f0:	7bfa      	ldrb	r2, [r7, #15]
     7f2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7f4:	bf00      	nop
     7f6:	3714      	adds	r7, #20
     7f8:	46bd      	mov	sp, r7
     7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fe:	4770      	bx	lr

00000800 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     800:	b480      	push	{r7}
     802:	b085      	sub	sp, #20
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	4608      	mov	r0, r1
     80a:	4611      	mov	r1, r2
     80c:	461a      	mov	r2, r3
     80e:	4603      	mov	r3, r0
     810:	70fb      	strb	r3, [r7, #3]
     812:	460b      	mov	r3, r1
     814:	70bb      	strb	r3, [r7, #2]
     816:	4613      	mov	r3, r2
     818:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81a:	78fa      	ldrb	r2, [r7, #3]
     81c:	78bb      	ldrb	r3, [r7, #2]
     81e:	6879      	ldr	r1, [r7, #4]
     820:	01d2      	lsls	r2, r2, #7
     822:	440a      	add	r2, r1
     824:	4413      	add	r3, r2
     826:	3340      	adds	r3, #64	; 0x40
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     82c:	7bfb      	ldrb	r3, [r7, #15]
     82e:	f023 0301 	bic.w	r3, r3, #1
     832:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     834:	787a      	ldrb	r2, [r7, #1]
     836:	7bfb      	ldrb	r3, [r7, #15]
     838:	4313      	orrs	r3, r2
     83a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	78fa      	ldrb	r2, [r7, #3]
     83e:	78bb      	ldrb	r3, [r7, #2]
     840:	6879      	ldr	r1, [r7, #4]
     842:	01d2      	lsls	r2, r2, #7
     844:	440a      	add	r2, r1
     846:	4413      	add	r3, r2
     848:	3340      	adds	r3, #64	; 0x40
     84a:	7bfa      	ldrb	r2, [r7, #15]
     84c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     84e:	bf00      	nop
     850:	3714      	adds	r7, #20
     852:	46bd      	mov	sp, r7
     854:	f85d 7b04 	ldr.w	r7, [sp], #4
     858:	4770      	bx	lr

0000085a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     85a:	b490      	push	{r4, r7}
     85c:	b082      	sub	sp, #8
     85e:	af00      	add	r7, sp, #0
     860:	6078      	str	r0, [r7, #4]
     862:	460b      	mov	r3, r1
     864:	70fb      	strb	r3, [r7, #3]
     866:	4613      	mov	r3, r2
     868:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     86a:	78fa      	ldrb	r2, [r7, #3]
     86c:	78bb      	ldrb	r3, [r7, #2]
     86e:	78f8      	ldrb	r0, [r7, #3]
     870:	78b9      	ldrb	r1, [r7, #2]
     872:	687c      	ldr	r4, [r7, #4]
     874:	01c0      	lsls	r0, r0, #7
     876:	4420      	add	r0, r4
     878:	4401      	add	r1, r0
     87a:	3140      	adds	r1, #64	; 0x40
     87c:	7809      	ldrb	r1, [r1, #0]
     87e:	b2c9      	uxtb	r1, r1
     880:	f041 0104 	orr.w	r1, r1, #4
     884:	b2c8      	uxtb	r0, r1
     886:	6879      	ldr	r1, [r7, #4]
     888:	01d2      	lsls	r2, r2, #7
     88a:	440a      	add	r2, r1
     88c:	4413      	add	r3, r2
     88e:	3340      	adds	r3, #64	; 0x40
     890:	4602      	mov	r2, r0
     892:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     894:	bf00      	nop
     896:	3708      	adds	r7, #8
     898:	46bd      	mov	sp, r7
     89a:	bc90      	pop	{r4, r7}
     89c:	4770      	bx	lr

0000089e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     89e:	b490      	push	{r4, r7}
     8a0:	b082      	sub	sp, #8
     8a2:	af00      	add	r7, sp, #0
     8a4:	6078      	str	r0, [r7, #4]
     8a6:	460b      	mov	r3, r1
     8a8:	70fb      	strb	r3, [r7, #3]
     8aa:	4613      	mov	r3, r2
     8ac:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ae:	78fa      	ldrb	r2, [r7, #3]
     8b0:	78bb      	ldrb	r3, [r7, #2]
     8b2:	78f8      	ldrb	r0, [r7, #3]
     8b4:	78b9      	ldrb	r1, [r7, #2]
     8b6:	687c      	ldr	r4, [r7, #4]
     8b8:	01c0      	lsls	r0, r0, #7
     8ba:	4420      	add	r0, r4
     8bc:	4401      	add	r1, r0
     8be:	3140      	adds	r1, #64	; 0x40
     8c0:	7809      	ldrb	r1, [r1, #0]
     8c2:	b2c9      	uxtb	r1, r1
     8c4:	f021 0104 	bic.w	r1, r1, #4
     8c8:	b2c8      	uxtb	r0, r1
     8ca:	6879      	ldr	r1, [r7, #4]
     8cc:	01d2      	lsls	r2, r2, #7
     8ce:	440a      	add	r2, r1
     8d0:	4413      	add	r3, r2
     8d2:	3340      	adds	r3, #64	; 0x40
     8d4:	4602      	mov	r2, r0
     8d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8d8:	bf00      	nop
     8da:	3708      	adds	r7, #8
     8dc:	46bd      	mov	sp, r7
     8de:	bc90      	pop	{r4, r7}
     8e0:	4770      	bx	lr

000008e2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     8e2:	b480      	push	{r7}
     8e4:	b085      	sub	sp, #20
     8e6:	af00      	add	r7, sp, #0
     8e8:	60f8      	str	r0, [r7, #12]
     8ea:	460b      	mov	r3, r1
     8ec:	607a      	str	r2, [r7, #4]
     8ee:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f0:	7afb      	ldrb	r3, [r7, #11]
     8f2:	68fa      	ldr	r2, [r7, #12]
     8f4:	01db      	lsls	r3, r3, #7
     8f6:	4413      	add	r3, r2
     8f8:	3328      	adds	r3, #40	; 0x28
     8fa:	687a      	ldr	r2, [r7, #4]
     8fc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8fe:	bf00      	nop
     900:	3714      	adds	r7, #20
     902:	46bd      	mov	sp, r7
     904:	f85d 7b04 	ldr.w	r7, [sp], #4
     908:	4770      	bx	lr
	...

0000090c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     90c:	b580      	push	{r7, lr}
     90e:	b082      	sub	sp, #8
     910:	af00      	add	r7, sp, #0
     912:	4603      	mov	r3, r0
     914:	6039      	str	r1, [r7, #0]
     916:	71fb      	strb	r3, [r7, #7]
     918:	4613      	mov	r3, r2
     91a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     91c:	79bb      	ldrb	r3, [r7, #6]
     91e:	2b01      	cmp	r3, #1
     920:	d01c      	beq.n	95c <_gpio_set_direction+0x50>
     922:	2b02      	cmp	r3, #2
     924:	d037      	beq.n	996 <_gpio_set_direction+0x8a>
     926:	2b00      	cmp	r3, #0
     928:	d14e      	bne.n	9c8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     92a:	79fb      	ldrb	r3, [r7, #7]
     92c:	683a      	ldr	r2, [r7, #0]
     92e:	4619      	mov	r1, r3
     930:	482a      	ldr	r0, [pc, #168]	; (9dc <_gpio_set_direction+0xd0>)
     932:	4b2b      	ldr	r3, [pc, #172]	; (9e0 <_gpio_set_direction+0xd4>)
     934:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     936:	683b      	ldr	r3, [r7, #0]
     938:	b29b      	uxth	r3, r3
     93a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     93e:	79fb      	ldrb	r3, [r7, #7]
     940:	4619      	mov	r1, r3
     942:	4826      	ldr	r0, [pc, #152]	; (9dc <_gpio_set_direction+0xd0>)
     944:	4b27      	ldr	r3, [pc, #156]	; (9e4 <_gpio_set_direction+0xd8>)
     946:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     948:	683b      	ldr	r3, [r7, #0]
     94a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     94c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     950:	79fb      	ldrb	r3, [r7, #7]
     952:	4619      	mov	r1, r3
     954:	4821      	ldr	r0, [pc, #132]	; (9dc <_gpio_set_direction+0xd0>)
     956:	4b23      	ldr	r3, [pc, #140]	; (9e4 <_gpio_set_direction+0xd8>)
     958:	4798      	blx	r3
		break;
     95a:	e03a      	b.n	9d2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     95c:	79fb      	ldrb	r3, [r7, #7]
     95e:	683a      	ldr	r2, [r7, #0]
     960:	4619      	mov	r1, r3
     962:	481e      	ldr	r0, [pc, #120]	; (9dc <_gpio_set_direction+0xd0>)
     964:	4b1e      	ldr	r3, [pc, #120]	; (9e0 <_gpio_set_direction+0xd4>)
     966:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     968:	683b      	ldr	r3, [r7, #0]
     96a:	b29b      	uxth	r3, r3
     96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     974:	79f9      	ldrb	r1, [r7, #7]
     976:	461a      	mov	r2, r3
     978:	4818      	ldr	r0, [pc, #96]	; (9dc <_gpio_set_direction+0xd0>)
     97a:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <_gpio_set_direction+0xd8>)
     97c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     97e:	683b      	ldr	r3, [r7, #0]
     980:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     98a:	79f9      	ldrb	r1, [r7, #7]
     98c:	461a      	mov	r2, r3
     98e:	4813      	ldr	r0, [pc, #76]	; (9dc <_gpio_set_direction+0xd0>)
     990:	4b14      	ldr	r3, [pc, #80]	; (9e4 <_gpio_set_direction+0xd8>)
     992:	4798      	blx	r3
		break;
     994:	e01d      	b.n	9d2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     996:	79fb      	ldrb	r3, [r7, #7]
     998:	683a      	ldr	r2, [r7, #0]
     99a:	4619      	mov	r1, r3
     99c:	480f      	ldr	r0, [pc, #60]	; (9dc <_gpio_set_direction+0xd0>)
     99e:	4b12      	ldr	r3, [pc, #72]	; (9e8 <_gpio_set_direction+0xdc>)
     9a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     9a2:	683b      	ldr	r3, [r7, #0]
     9a4:	b29b      	uxth	r3, r3
     9a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9aa:	79fb      	ldrb	r3, [r7, #7]
     9ac:	4619      	mov	r1, r3
     9ae:	480b      	ldr	r0, [pc, #44]	; (9dc <_gpio_set_direction+0xd0>)
     9b0:	4b0c      	ldr	r3, [pc, #48]	; (9e4 <_gpio_set_direction+0xd8>)
     9b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9b4:	683b      	ldr	r3, [r7, #0]
     9b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9bc:	79fb      	ldrb	r3, [r7, #7]
     9be:	4619      	mov	r1, r3
     9c0:	4806      	ldr	r0, [pc, #24]	; (9dc <_gpio_set_direction+0xd0>)
     9c2:	4b08      	ldr	r3, [pc, #32]	; (9e4 <_gpio_set_direction+0xd8>)
     9c4:	4798      	blx	r3
		break;
     9c6:	e004      	b.n	9d2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     9c8:	2246      	movs	r2, #70	; 0x46
     9ca:	4908      	ldr	r1, [pc, #32]	; (9ec <_gpio_set_direction+0xe0>)
     9cc:	2000      	movs	r0, #0
     9ce:	4b08      	ldr	r3, [pc, #32]	; (9f0 <_gpio_set_direction+0xe4>)
     9d0:	4798      	blx	r3
	}
}
     9d2:	bf00      	nop
     9d4:	3708      	adds	r7, #8
     9d6:	46bd      	mov	sp, r7
     9d8:	bd80      	pop	{r7, pc}
     9da:	bf00      	nop
     9dc:	41008000 	.word	0x41008000
     9e0:	000006cb 	.word	0x000006cb
     9e4:	000008e3 	.word	0x000008e3
     9e8:	000006a3 	.word	0x000006a3
     9ec:	0000d3cc 	.word	0x0000d3cc
     9f0:	000030c9 	.word	0x000030c9

000009f4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	b082      	sub	sp, #8
     9f8:	af00      	add	r7, sp, #0
     9fa:	4603      	mov	r3, r0
     9fc:	6039      	str	r1, [r7, #0]
     9fe:	71fb      	strb	r3, [r7, #7]
     a00:	4613      	mov	r3, r2
     a02:	71bb      	strb	r3, [r7, #6]
	if (level) {
     a04:	79bb      	ldrb	r3, [r7, #6]
     a06:	2b00      	cmp	r3, #0
     a08:	d006      	beq.n	a18 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     a0a:	79fb      	ldrb	r3, [r7, #7]
     a0c:	683a      	ldr	r2, [r7, #0]
     a0e:	4619      	mov	r1, r3
     a10:	4806      	ldr	r0, [pc, #24]	; (a2c <_gpio_set_level+0x38>)
     a12:	4b07      	ldr	r3, [pc, #28]	; (a30 <_gpio_set_level+0x3c>)
     a14:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     a16:	e005      	b.n	a24 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     a18:	79fb      	ldrb	r3, [r7, #7]
     a1a:	683a      	ldr	r2, [r7, #0]
     a1c:	4619      	mov	r1, r3
     a1e:	4803      	ldr	r0, [pc, #12]	; (a2c <_gpio_set_level+0x38>)
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <_gpio_set_level+0x40>)
     a22:	4798      	blx	r3
}
     a24:	bf00      	nop
     a26:	3708      	adds	r7, #8
     a28:	46bd      	mov	sp, r7
     a2a:	bd80      	pop	{r7, pc}
     a2c:	41008000 	.word	0x41008000
     a30:	000006f3 	.word	0x000006f3
     a34:	0000071b 	.word	0x0000071b

00000a38 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     a38:	b580      	push	{r7, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	af00      	add	r7, sp, #0
     a3e:	4603      	mov	r3, r0
     a40:	71fb      	strb	r3, [r7, #7]
     a42:	460b      	mov	r3, r1
     a44:	71bb      	strb	r3, [r7, #6]
     a46:	4613      	mov	r3, r2
     a48:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     a4a:	797b      	ldrb	r3, [r7, #5]
     a4c:	2b01      	cmp	r3, #1
     a4e:	d00a      	beq.n	a66 <_gpio_set_pin_pull_mode+0x2e>
     a50:	2b02      	cmp	r3, #2
     a52:	d01f      	beq.n	a94 <_gpio_set_pin_pull_mode+0x5c>
     a54:	2b00      	cmp	r3, #0
     a56:	d134      	bne.n	ac2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     a58:	79ba      	ldrb	r2, [r7, #6]
     a5a:	79fb      	ldrb	r3, [r7, #7]
     a5c:	4619      	mov	r1, r3
     a5e:	481e      	ldr	r0, [pc, #120]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a60:	4b1e      	ldr	r3, [pc, #120]	; (adc <_gpio_set_pin_pull_mode+0xa4>)
     a62:	4798      	blx	r3
		break;
     a64:	e033      	b.n	ace <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a66:	79bb      	ldrb	r3, [r7, #6]
     a68:	2201      	movs	r2, #1
     a6a:	409a      	lsls	r2, r3
     a6c:	79fb      	ldrb	r3, [r7, #7]
     a6e:	4619      	mov	r1, r3
     a70:	4819      	ldr	r0, [pc, #100]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a72:	4b1b      	ldr	r3, [pc, #108]	; (ae0 <_gpio_set_pin_pull_mode+0xa8>)
     a74:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a76:	79ba      	ldrb	r2, [r7, #6]
     a78:	79fb      	ldrb	r3, [r7, #7]
     a7a:	4619      	mov	r1, r3
     a7c:	4816      	ldr	r0, [pc, #88]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a7e:	4b19      	ldr	r3, [pc, #100]	; (ae4 <_gpio_set_pin_pull_mode+0xac>)
     a80:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     a82:	79bb      	ldrb	r3, [r7, #6]
     a84:	2201      	movs	r2, #1
     a86:	409a      	lsls	r2, r3
     a88:	79fb      	ldrb	r3, [r7, #7]
     a8a:	4619      	mov	r1, r3
     a8c:	4812      	ldr	r0, [pc, #72]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a8e:	4b16      	ldr	r3, [pc, #88]	; (ae8 <_gpio_set_pin_pull_mode+0xb0>)
     a90:	4798      	blx	r3
		break;
     a92:	e01c      	b.n	ace <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a94:	79bb      	ldrb	r3, [r7, #6]
     a96:	2201      	movs	r2, #1
     a98:	409a      	lsls	r2, r3
     a9a:	79fb      	ldrb	r3, [r7, #7]
     a9c:	4619      	mov	r1, r3
     a9e:	480e      	ldr	r0, [pc, #56]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     aa0:	4b0f      	ldr	r3, [pc, #60]	; (ae0 <_gpio_set_pin_pull_mode+0xa8>)
     aa2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     aa4:	79ba      	ldrb	r2, [r7, #6]
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	4619      	mov	r1, r3
     aaa:	480b      	ldr	r0, [pc, #44]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     aac:	4b0d      	ldr	r3, [pc, #52]	; (ae4 <_gpio_set_pin_pull_mode+0xac>)
     aae:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     ab0:	79bb      	ldrb	r3, [r7, #6]
     ab2:	2201      	movs	r2, #1
     ab4:	409a      	lsls	r2, r3
     ab6:	79fb      	ldrb	r3, [r7, #7]
     ab8:	4619      	mov	r1, r3
     aba:	4807      	ldr	r0, [pc, #28]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <_gpio_set_pin_pull_mode+0xb4>)
     abe:	4798      	blx	r3
		break;
     ac0:	e005      	b.n	ace <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     ac2:	2289      	movs	r2, #137	; 0x89
     ac4:	490a      	ldr	r1, [pc, #40]	; (af0 <_gpio_set_pin_pull_mode+0xb8>)
     ac6:	2000      	movs	r0, #0
     ac8:	4b0a      	ldr	r3, [pc, #40]	; (af4 <_gpio_set_pin_pull_mode+0xbc>)
     aca:	4798      	blx	r3
		break;
     acc:	bf00      	nop
	}
}
     ace:	bf00      	nop
     ad0:	3708      	adds	r7, #8
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	bf00      	nop
     ad8:	41008000 	.word	0x41008000
     adc:	0000089f 	.word	0x0000089f
     ae0:	000006cb 	.word	0x000006cb
     ae4:	0000085b 	.word	0x0000085b
     ae8:	000006f3 	.word	0x000006f3
     aec:	0000071b 	.word	0x0000071b
     af0:	0000d3cc 	.word	0x0000d3cc
     af4:	000030c9 	.word	0x000030c9

00000af8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     af8:	b590      	push	{r4, r7, lr}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
     b00:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	095b      	lsrs	r3, r3, #5
     b06:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	b2db      	uxtb	r3, r3
     b0c:	f003 031f 	and.w	r3, r3, #31
     b10:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     b12:	683b      	ldr	r3, [r7, #0]
     b14:	f1b3 3fff 	cmp.w	r3, #4294967295
     b18:	d106      	bne.n	b28 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     b1a:	7bba      	ldrb	r2, [r7, #14]
     b1c:	7bf9      	ldrb	r1, [r7, #15]
     b1e:	2300      	movs	r3, #0
     b20:	4812      	ldr	r0, [pc, #72]	; (b6c <_gpio_set_pin_function+0x74>)
     b22:	4c13      	ldr	r4, [pc, #76]	; (b70 <_gpio_set_pin_function+0x78>)
     b24:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     b26:	e01d      	b.n	b64 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     b28:	7bba      	ldrb	r2, [r7, #14]
     b2a:	7bf9      	ldrb	r1, [r7, #15]
     b2c:	2301      	movs	r3, #1
     b2e:	480f      	ldr	r0, [pc, #60]	; (b6c <_gpio_set_pin_function+0x74>)
     b30:	4c0f      	ldr	r4, [pc, #60]	; (b70 <_gpio_set_pin_function+0x78>)
     b32:	47a0      	blx	r4
		if (pin & 1) {
     b34:	7bbb      	ldrb	r3, [r7, #14]
     b36:	f003 0301 	and.w	r3, r3, #1
     b3a:	2b00      	cmp	r3, #0
     b3c:	d009      	beq.n	b52 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     b3e:	7bbb      	ldrb	r3, [r7, #14]
     b40:	085b      	lsrs	r3, r3, #1
     b42:	b2da      	uxtb	r2, r3
     b44:	683b      	ldr	r3, [r7, #0]
     b46:	b2db      	uxtb	r3, r3
     b48:	7bf9      	ldrb	r1, [r7, #15]
     b4a:	4808      	ldr	r0, [pc, #32]	; (b6c <_gpio_set_pin_function+0x74>)
     b4c:	4c09      	ldr	r4, [pc, #36]	; (b74 <_gpio_set_pin_function+0x7c>)
     b4e:	47a0      	blx	r4
}
     b50:	e008      	b.n	b64 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     b52:	7bbb      	ldrb	r3, [r7, #14]
     b54:	085b      	lsrs	r3, r3, #1
     b56:	b2da      	uxtb	r2, r3
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	b2db      	uxtb	r3, r3
     b5c:	7bf9      	ldrb	r1, [r7, #15]
     b5e:	4803      	ldr	r0, [pc, #12]	; (b6c <_gpio_set_pin_function+0x74>)
     b60:	4c05      	ldr	r4, [pc, #20]	; (b78 <_gpio_set_pin_function+0x80>)
     b62:	47a0      	blx	r4
}
     b64:	bf00      	nop
     b66:	3714      	adds	r7, #20
     b68:	46bd      	mov	sp, r7
     b6a:	bd90      	pop	{r4, r7, pc}
     b6c:	41008000 	.word	0x41008000
     b70:	00000801 	.word	0x00000801
     b74:	000007a3 	.word	0x000007a3
     b78:	00000743 	.word	0x00000743

00000b7c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b082      	sub	sp, #8
     b80:	af00      	add	r7, sp, #0
     b82:	4603      	mov	r3, r0
     b84:	460a      	mov	r2, r1
     b86:	71fb      	strb	r3, [r7, #7]
     b88:	4613      	mov	r3, r2
     b8a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     b8c:	79fb      	ldrb	r3, [r7, #7]
     b8e:	095b      	lsrs	r3, r3, #5
     b90:	b2d8      	uxtb	r0, r3
     b92:	79fb      	ldrb	r3, [r7, #7]
     b94:	f003 031f 	and.w	r3, r3, #31
     b98:	b2db      	uxtb	r3, r3
     b9a:	79ba      	ldrb	r2, [r7, #6]
     b9c:	4619      	mov	r1, r3
     b9e:	4b03      	ldr	r3, [pc, #12]	; (bac <gpio_set_pin_pull_mode+0x30>)
     ba0:	4798      	blx	r3
}
     ba2:	bf00      	nop
     ba4:	3708      	adds	r7, #8
     ba6:	46bd      	mov	sp, r7
     ba8:	bd80      	pop	{r7, pc}
     baa:	bf00      	nop
     bac:	00000a39 	.word	0x00000a39

00000bb0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	b082      	sub	sp, #8
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
     bb8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     bba:	6839      	ldr	r1, [r7, #0]
     bbc:	6878      	ldr	r0, [r7, #4]
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <gpio_set_pin_function+0x1c>)
     bc0:	4798      	blx	r3
}
     bc2:	bf00      	nop
     bc4:	3708      	adds	r7, #8
     bc6:	46bd      	mov	sp, r7
     bc8:	bd80      	pop	{r7, pc}
     bca:	bf00      	nop
     bcc:	00000af9 	.word	0x00000af9

00000bd0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     bd0:	b580      	push	{r7, lr}
     bd2:	b082      	sub	sp, #8
     bd4:	af00      	add	r7, sp, #0
     bd6:	4603      	mov	r3, r0
     bd8:	460a      	mov	r2, r1
     bda:	71fb      	strb	r3, [r7, #7]
     bdc:	4613      	mov	r3, r2
     bde:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     be0:	79fb      	ldrb	r3, [r7, #7]
     be2:	095b      	lsrs	r3, r3, #5
     be4:	b2d8      	uxtb	r0, r3
     be6:	79fb      	ldrb	r3, [r7, #7]
     be8:	f003 031f 	and.w	r3, r3, #31
     bec:	2201      	movs	r2, #1
     bee:	fa02 f303 	lsl.w	r3, r2, r3
     bf2:	79ba      	ldrb	r2, [r7, #6]
     bf4:	4619      	mov	r1, r3
     bf6:	4b03      	ldr	r3, [pc, #12]	; (c04 <gpio_set_pin_direction+0x34>)
     bf8:	4798      	blx	r3
}
     bfa:	bf00      	nop
     bfc:	3708      	adds	r7, #8
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	0000090d 	.word	0x0000090d

00000c08 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c08:	b580      	push	{r7, lr}
     c0a:	b082      	sub	sp, #8
     c0c:	af00      	add	r7, sp, #0
     c0e:	4603      	mov	r3, r0
     c10:	460a      	mov	r2, r1
     c12:	71fb      	strb	r3, [r7, #7]
     c14:	4613      	mov	r3, r2
     c16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c18:	79fb      	ldrb	r3, [r7, #7]
     c1a:	095b      	lsrs	r3, r3, #5
     c1c:	b2d8      	uxtb	r0, r3
     c1e:	79fb      	ldrb	r3, [r7, #7]
     c20:	f003 031f 	and.w	r3, r3, #31
     c24:	2201      	movs	r2, #1
     c26:	fa02 f303 	lsl.w	r3, r2, r3
     c2a:	79ba      	ldrb	r2, [r7, #6]
     c2c:	4619      	mov	r1, r3
     c2e:	4b03      	ldr	r3, [pc, #12]	; (c3c <gpio_set_pin_level+0x34>)
     c30:	4798      	blx	r3
}
     c32:	bf00      	nop
     c34:	3708      	adds	r7, #8
     c36:	46bd      	mov	sp, r7
     c38:	bd80      	pop	{r7, pc}
     c3a:	bf00      	nop
     c3c:	000009f5 	.word	0x000009f5

00000c40 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     c40:	b580      	push	{r7, lr}
     c42:	af00      	add	r7, sp, #0
	_init_chip();
     c44:	4b01      	ldr	r3, [pc, #4]	; (c4c <init_mcu+0xc>)
     c46:	4798      	blx	r3
}
     c48:	bf00      	nop
     c4a:	bd80      	pop	{r7, pc}
     c4c:	00003cd1 	.word	0x00003cd1

00000c50 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     c50:	b580      	push	{r7, lr}
     c52:	b082      	sub	sp, #8
     c54:	af00      	add	r7, sp, #0
     c56:	6078      	str	r0, [r7, #4]
     c58:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d004      	beq.n	c6a <wdt_init+0x1a>
     c60:	683b      	ldr	r3, [r7, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d001      	beq.n	c6a <wdt_init+0x1a>
     c66:	2301      	movs	r3, #1
     c68:	e000      	b.n	c6c <wdt_init+0x1c>
     c6a:	2300      	movs	r3, #0
     c6c:	f003 0301 	and.w	r3, r3, #1
     c70:	b2db      	uxtb	r3, r3
     c72:	2248      	movs	r2, #72	; 0x48
     c74:	4907      	ldr	r1, [pc, #28]	; (c94 <wdt_init+0x44>)
     c76:	4618      	mov	r0, r3
     c78:	4b07      	ldr	r3, [pc, #28]	; (c98 <wdt_init+0x48>)
     c7a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	683a      	ldr	r2, [r7, #0]
     c80:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	4618      	mov	r0, r3
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <wdt_init+0x4c>)
     c88:	4798      	blx	r3
     c8a:	4603      	mov	r3, r0
}
     c8c:	4618      	mov	r0, r3
     c8e:	3708      	adds	r7, #8
     c90:	46bd      	mov	sp, r7
     c92:	bd80      	pop	{r7, pc}
     c94:	0000d3e8 	.word	0x0000d3e8
     c98:	000030c9 	.word	0x000030c9
     c9c:	0000a14d 	.word	0x0000a14d

00000ca0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     ca4:	4804      	ldr	r0, [pc, #16]	; (cb8 <CRC_CALC_init+0x18>)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <CRC_CALC_init+0x1c>)
     ca8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     caa:	4905      	ldr	r1, [pc, #20]	; (cc0 <CRC_CALC_init+0x20>)
     cac:	4805      	ldr	r0, [pc, #20]	; (cc4 <CRC_CALC_init+0x24>)
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <CRC_CALC_init+0x28>)
     cb0:	4798      	blx	r3
}
     cb2:	bf00      	nop
     cb4:	bd80      	pop	{r7, pc}
     cb6:	bf00      	nop
     cb8:	40000800 	.word	0x40000800
     cbc:	000005a3 	.word	0x000005a3
     cc0:	41002000 	.word	0x41002000
     cc4:	20000d84 	.word	0x20000d84
     cc8:	000017fd 	.word	0x000017fd

00000ccc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     ccc:	b580      	push	{r7, lr}
     cce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     cd0:	2244      	movs	r2, #68	; 0x44
     cd2:	2104      	movs	r1, #4
     cd4:	481e      	ldr	r0, [pc, #120]	; (d50 <EXTERNAL_IRQ_0_init+0x84>)
     cd6:	4b1f      	ldr	r3, [pc, #124]	; (d54 <EXTERNAL_IRQ_0_init+0x88>)
     cd8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     cda:	481f      	ldr	r0, [pc, #124]	; (d58 <EXTERNAL_IRQ_0_init+0x8c>)
     cdc:	4b1f      	ldr	r3, [pc, #124]	; (d5c <EXTERNAL_IRQ_0_init+0x90>)
     cde:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
     ce0:	2101      	movs	r1, #1
     ce2:	2004      	movs	r0, #4
     ce4:	4b1e      	ldr	r3, [pc, #120]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     ce6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
     ce8:	2102      	movs	r1, #2
     cea:	2004      	movs	r0, #4
     cec:	4b1d      	ldr	r3, [pc, #116]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     cee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
     cf0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     cf4:	2004      	movs	r0, #4
     cf6:	4b1c      	ldr	r3, [pc, #112]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     cf8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
     cfa:	2101      	movs	r1, #1
     cfc:	2005      	movs	r0, #5
     cfe:	4b18      	ldr	r3, [pc, #96]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     d00:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
     d02:	2102      	movs	r1, #2
     d04:	2005      	movs	r0, #5
     d06:	4b17      	ldr	r3, [pc, #92]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     d08:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
     d0a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     d0e:	2005      	movs	r0, #5
     d10:	4b15      	ldr	r3, [pc, #84]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     d12:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
     d14:	2101      	movs	r1, #1
     d16:	2056      	movs	r0, #86	; 0x56
     d18:	4b11      	ldr	r3, [pc, #68]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     d1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
     d1c:	2102      	movs	r1, #2
     d1e:	2056      	movs	r0, #86	; 0x56
     d20:	4b10      	ldr	r3, [pc, #64]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     d22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
     d24:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     d28:	2056      	movs	r0, #86	; 0x56
     d2a:	4b0f      	ldr	r3, [pc, #60]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     d2c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
     d2e:	2101      	movs	r1, #1
     d30:	2057      	movs	r0, #87	; 0x57
     d32:	4b0b      	ldr	r3, [pc, #44]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     d34:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
     d36:	2102      	movs	r1, #2
     d38:	2057      	movs	r0, #87	; 0x57
     d3a:	4b0a      	ldr	r3, [pc, #40]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     d3c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
     d3e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     d42:	2057      	movs	r0, #87	; 0x57
     d44:	4b08      	ldr	r3, [pc, #32]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     d46:	4798      	blx	r3

	ext_irq_init();
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <EXTERNAL_IRQ_0_init+0xa0>)
     d4a:	4798      	blx	r3
}
     d4c:	bf00      	nop
     d4e:	bd80      	pop	{r7, pc}
     d50:	40001c00 	.word	0x40001c00
     d54:	000003fd 	.word	0x000003fd
     d58:	40000800 	.word	0x40000800
     d5c:	000004e3 	.word	0x000004e3
     d60:	00000bd1 	.word	0x00000bd1
     d64:	00000b7d 	.word	0x00000b7d
     d68:	00000bb1 	.word	0x00000bb1
     d6c:	000018c5 	.word	0x000018c5

00000d70 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     d70:	b580      	push	{r7, lr}
     d72:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d74:	2244      	movs	r2, #68	; 0x44
     d76:	210b      	movs	r1, #11
     d78:	4804      	ldr	r0, [pc, #16]	; (d8c <EVENT_SYSTEM_0_init+0x1c>)
     d7a:	4b05      	ldr	r3, [pc, #20]	; (d90 <EVENT_SYSTEM_0_init+0x20>)
     d7c:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     d7e:	4805      	ldr	r0, [pc, #20]	; (d94 <EVENT_SYSTEM_0_init+0x24>)
     d80:	4b05      	ldr	r3, [pc, #20]	; (d98 <EVENT_SYSTEM_0_init+0x28>)
     d82:	4798      	blx	r3

	event_system_init();
     d84:	4b05      	ldr	r3, [pc, #20]	; (d9c <EVENT_SYSTEM_0_init+0x2c>)
     d86:	4798      	blx	r3
}
     d88:	bf00      	nop
     d8a:	bd80      	pop	{r7, pc}
     d8c:	40001c00 	.word	0x40001c00
     d90:	000003fd 	.word	0x000003fd
     d94:	40000800 	.word	0x40000800
     d98:	000005c3 	.word	0x000005c3
     d9c:	000018b1 	.word	0x000018b1

00000da0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     da4:	2101      	movs	r1, #1
     da6:	202b      	movs	r0, #43	; 0x2b
     da8:	4b2b      	ldr	r3, [pc, #172]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     daa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     dac:	2100      	movs	r1, #0
     dae:	202b      	movs	r0, #43	; 0x2b
     db0:	4b2a      	ldr	r3, [pc, #168]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     db2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     db4:	492a      	ldr	r1, [pc, #168]	; (e60 <QSPI_N25Q256_PORT_init+0xc0>)
     db6:	202b      	movs	r0, #43	; 0x2b
     db8:	4b2a      	ldr	r3, [pc, #168]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     dba:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     dbc:	2102      	movs	r1, #2
     dbe:	2008      	movs	r0, #8
     dc0:	4b25      	ldr	r3, [pc, #148]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     dc2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     dc4:	2100      	movs	r1, #0
     dc6:	2008      	movs	r0, #8
     dc8:	4b27      	ldr	r3, [pc, #156]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     dca:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     dcc:	2100      	movs	r1, #0
     dce:	2008      	movs	r0, #8
     dd0:	4b22      	ldr	r3, [pc, #136]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     dd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     dd4:	4925      	ldr	r1, [pc, #148]	; (e6c <QSPI_N25Q256_PORT_init+0xcc>)
     dd6:	2008      	movs	r0, #8
     dd8:	4b22      	ldr	r3, [pc, #136]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     dda:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     ddc:	2102      	movs	r1, #2
     dde:	2009      	movs	r0, #9
     de0:	4b1d      	ldr	r3, [pc, #116]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     de2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     de4:	2100      	movs	r1, #0
     de6:	2009      	movs	r0, #9
     de8:	4b1f      	ldr	r3, [pc, #124]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     dea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     dec:	2100      	movs	r1, #0
     dee:	2009      	movs	r0, #9
     df0:	4b1a      	ldr	r3, [pc, #104]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     df2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     df4:	491e      	ldr	r1, [pc, #120]	; (e70 <QSPI_N25Q256_PORT_init+0xd0>)
     df6:	2009      	movs	r0, #9
     df8:	4b1a      	ldr	r3, [pc, #104]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     dfa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     dfc:	2102      	movs	r1, #2
     dfe:	200a      	movs	r0, #10
     e00:	4b15      	ldr	r3, [pc, #84]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     e02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     e04:	2100      	movs	r1, #0
     e06:	200a      	movs	r0, #10
     e08:	4b17      	ldr	r3, [pc, #92]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     e0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     e0c:	2100      	movs	r1, #0
     e0e:	200a      	movs	r0, #10
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     e12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     e14:	4917      	ldr	r1, [pc, #92]	; (e74 <QSPI_N25Q256_PORT_init+0xd4>)
     e16:	200a      	movs	r0, #10
     e18:	4b12      	ldr	r3, [pc, #72]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     e1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     e1c:	2102      	movs	r1, #2
     e1e:	200b      	movs	r0, #11
     e20:	4b0d      	ldr	r3, [pc, #52]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     e22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     e24:	2100      	movs	r1, #0
     e26:	200b      	movs	r0, #11
     e28:	4b0f      	ldr	r3, [pc, #60]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     e2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     e2c:	2100      	movs	r1, #0
     e2e:	200b      	movs	r0, #11
     e30:	4b0a      	ldr	r3, [pc, #40]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     e34:	4910      	ldr	r1, [pc, #64]	; (e78 <QSPI_N25Q256_PORT_init+0xd8>)
     e36:	200b      	movs	r0, #11
     e38:	4b0a      	ldr	r3, [pc, #40]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     e3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     e3c:	2101      	movs	r1, #1
     e3e:	202a      	movs	r0, #42	; 0x2a
     e40:	4b05      	ldr	r3, [pc, #20]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     e42:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     e44:	2100      	movs	r1, #0
     e46:	202a      	movs	r0, #42	; 0x2a
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     e4a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     e4c:	490b      	ldr	r1, [pc, #44]	; (e7c <QSPI_N25Q256_PORT_init+0xdc>)
     e4e:	202a      	movs	r0, #42	; 0x2a
     e50:	4b04      	ldr	r3, [pc, #16]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     e52:	4798      	blx	r3
}
     e54:	bf00      	nop
     e56:	bd80      	pop	{r7, pc}
     e58:	00000bd1 	.word	0x00000bd1
     e5c:	00000b7d 	.word	0x00000b7d
     e60:	002b0007 	.word	0x002b0007
     e64:	00000bb1 	.word	0x00000bb1
     e68:	00000c09 	.word	0x00000c09
     e6c:	00080007 	.word	0x00080007
     e70:	00090007 	.word	0x00090007
     e74:	000a0007 	.word	0x000a0007
     e78:	000b0007 	.word	0x000b0007
     e7c:	002a0007 	.word	0x002a0007

00000e80 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     e80:	b580      	push	{r7, lr}
     e82:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     e84:	4805      	ldr	r0, [pc, #20]	; (e9c <QSPI_N25Q256_CLOCK_init+0x1c>)
     e86:	4b06      	ldr	r3, [pc, #24]	; (ea0 <QSPI_N25Q256_CLOCK_init+0x20>)
     e88:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     e8a:	4804      	ldr	r0, [pc, #16]	; (e9c <QSPI_N25Q256_CLOCK_init+0x1c>)
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <QSPI_N25Q256_CLOCK_init+0x24>)
     e8e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     e90:	4802      	ldr	r0, [pc, #8]	; (e9c <QSPI_N25Q256_CLOCK_init+0x1c>)
     e92:	4b05      	ldr	r3, [pc, #20]	; (ea8 <QSPI_N25Q256_CLOCK_init+0x28>)
     e94:	4798      	blx	r3
}
     e96:	bf00      	nop
     e98:	bd80      	pop	{r7, pc}
     e9a:	bf00      	nop
     e9c:	40000800 	.word	0x40000800
     ea0:	00000443 	.word	0x00000443
     ea4:	00000483 	.word	0x00000483
     ea8:	00000623 	.word	0x00000623

00000eac <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     eac:	b580      	push	{r7, lr}
     eae:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     eb0:	4b04      	ldr	r3, [pc, #16]	; (ec4 <QSPI_N25Q256_init+0x18>)
     eb2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     eb4:	4904      	ldr	r1, [pc, #16]	; (ec8 <QSPI_N25Q256_init+0x1c>)
     eb6:	4805      	ldr	r0, [pc, #20]	; (ecc <QSPI_N25Q256_init+0x20>)
     eb8:	4b05      	ldr	r3, [pc, #20]	; (ed0 <QSPI_N25Q256_init+0x24>)
     eba:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     ebc:	4b05      	ldr	r3, [pc, #20]	; (ed4 <QSPI_N25Q256_init+0x28>)
     ebe:	4798      	blx	r3
}
     ec0:	bf00      	nop
     ec2:	bd80      	pop	{r7, pc}
     ec4:	00000e81 	.word	0x00000e81
     ec8:	42003400 	.word	0x42003400
     ecc:	20000c68 	.word	0x20000c68
     ed0:	00001c65 	.word	0x00001c65
     ed4:	00000da1 	.word	0x00000da1

00000ed8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
     ed8:	b580      	push	{r7, lr}
     eda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     edc:	4802      	ldr	r0, [pc, #8]	; (ee8 <DATETIME_CLOCK_CLOCK_init+0x10>)
     ede:	4b03      	ldr	r3, [pc, #12]	; (eec <DATETIME_CLOCK_CLOCK_init+0x14>)
     ee0:	4798      	blx	r3
}
     ee2:	bf00      	nop
     ee4:	bd80      	pop	{r7, pc}
     ee6:	bf00      	nop
     ee8:	40000800 	.word	0x40000800
     eec:	000004c3 	.word	0x000004c3

00000ef0 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
     ef4:	4b03      	ldr	r3, [pc, #12]	; (f04 <DATETIME_CLOCK_init+0x14>)
     ef6:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
     ef8:	4903      	ldr	r1, [pc, #12]	; (f08 <DATETIME_CLOCK_init+0x18>)
     efa:	4804      	ldr	r0, [pc, #16]	; (f0c <DATETIME_CLOCK_init+0x1c>)
     efc:	4b04      	ldr	r3, [pc, #16]	; (f10 <DATETIME_CLOCK_init+0x20>)
     efe:	4798      	blx	r3
}
     f00:	bf00      	nop
     f02:	bd80      	pop	{r7, pc}
     f04:	00000ed9 	.word	0x00000ed9
     f08:	40002400 	.word	0x40002400
     f0c:	20000d60 	.word	0x20000d60
     f10:	000016a1 	.word	0x000016a1

00000f14 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
     f14:	b580      	push	{r7, lr}
     f16:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
     f18:	2100      	movs	r1, #0
     f1a:	2051      	movs	r0, #81	; 0x51
     f1c:	4b11      	ldr	r3, [pc, #68]	; (f64 <SPI_HI3593_PORT_init+0x50>)
     f1e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
     f20:	2102      	movs	r1, #2
     f22:	2051      	movs	r0, #81	; 0x51
     f24:	4b10      	ldr	r3, [pc, #64]	; (f68 <SPI_HI3593_PORT_init+0x54>)
     f26:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
     f28:	4910      	ldr	r1, [pc, #64]	; (f6c <SPI_HI3593_PORT_init+0x58>)
     f2a:	2051      	movs	r0, #81	; 0x51
     f2c:	4b10      	ldr	r3, [pc, #64]	; (f70 <SPI_HI3593_PORT_init+0x5c>)
     f2e:	4798      	blx	r3

	gpio_set_pin_level(PC16,
     f30:	2100      	movs	r1, #0
     f32:	2050      	movs	r0, #80	; 0x50
     f34:	4b0b      	ldr	r3, [pc, #44]	; (f64 <SPI_HI3593_PORT_init+0x50>)
     f36:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
     f38:	2102      	movs	r1, #2
     f3a:	2050      	movs	r0, #80	; 0x50
     f3c:	4b0a      	ldr	r3, [pc, #40]	; (f68 <SPI_HI3593_PORT_init+0x54>)
     f3e:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
     f40:	490c      	ldr	r1, [pc, #48]	; (f74 <SPI_HI3593_PORT_init+0x60>)
     f42:	2050      	movs	r0, #80	; 0x50
     f44:	4b0a      	ldr	r3, [pc, #40]	; (f70 <SPI_HI3593_PORT_init+0x5c>)
     f46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
     f48:	2101      	movs	r1, #1
     f4a:	2006      	movs	r0, #6
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <SPI_HI3593_PORT_init+0x54>)
     f4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
     f50:	2100      	movs	r1, #0
     f52:	2006      	movs	r0, #6
     f54:	4b08      	ldr	r3, [pc, #32]	; (f78 <SPI_HI3593_PORT_init+0x64>)
     f56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
     f58:	4908      	ldr	r1, [pc, #32]	; (f7c <SPI_HI3593_PORT_init+0x68>)
     f5a:	2006      	movs	r0, #6
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <SPI_HI3593_PORT_init+0x5c>)
     f5e:	4798      	blx	r3
}
     f60:	bf00      	nop
     f62:	bd80      	pop	{r7, pc}
     f64:	00000c09 	.word	0x00000c09
     f68:	00000bd1 	.word	0x00000bd1
     f6c:	00510003 	.word	0x00510003
     f70:	00000bb1 	.word	0x00000bb1
     f74:	00500003 	.word	0x00500003
     f78:	00000b7d 	.word	0x00000b7d
     f7c:	00060003 	.word	0x00060003

00000f80 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
     f80:	b580      	push	{r7, lr}
     f82:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f84:	2240      	movs	r2, #64	; 0x40
     f86:	2107      	movs	r1, #7
     f88:	4806      	ldr	r0, [pc, #24]	; (fa4 <SPI_HI3593_CLOCK_init+0x24>)
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <SPI_HI3593_CLOCK_init+0x28>)
     f8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f8e:	2243      	movs	r2, #67	; 0x43
     f90:	2103      	movs	r1, #3
     f92:	4804      	ldr	r0, [pc, #16]	; (fa4 <SPI_HI3593_CLOCK_init+0x24>)
     f94:	4b04      	ldr	r3, [pc, #16]	; (fa8 <SPI_HI3593_CLOCK_init+0x28>)
     f96:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     f98:	4804      	ldr	r0, [pc, #16]	; (fac <SPI_HI3593_CLOCK_init+0x2c>)
     f9a:	4b05      	ldr	r3, [pc, #20]	; (fb0 <SPI_HI3593_CLOCK_init+0x30>)
     f9c:	4798      	blx	r3
}
     f9e:	bf00      	nop
     fa0:	bd80      	pop	{r7, pc}
     fa2:	bf00      	nop
     fa4:	40001c00 	.word	0x40001c00
     fa8:	000003fd 	.word	0x000003fd
     fac:	40000800 	.word	0x40000800
     fb0:	00000503 	.word	0x00000503

00000fb4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
     fb8:	4b04      	ldr	r3, [pc, #16]	; (fcc <SPI_HI3593_init+0x18>)
     fba:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
     fbc:	4904      	ldr	r1, [pc, #16]	; (fd0 <SPI_HI3593_init+0x1c>)
     fbe:	4805      	ldr	r0, [pc, #20]	; (fd4 <SPI_HI3593_init+0x20>)
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <SPI_HI3593_init+0x24>)
     fc2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
     fc4:	4b05      	ldr	r3, [pc, #20]	; (fdc <SPI_HI3593_init+0x28>)
     fc6:	4798      	blx	r3
}
     fc8:	bf00      	nop
     fca:	bd80      	pop	{r7, pc}
     fcc:	00000f81 	.word	0x00000f81
     fd0:	40003000 	.word	0x40003000
     fd4:	20000c08 	.word	0x20000c08
     fd8:	00002141 	.word	0x00002141
     fdc:	00000f15 	.word	0x00000f15

00000fe0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
     fe0:	b580      	push	{r7, lr}
     fe2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA00,
     fe4:	2100      	movs	r1, #0
     fe6:	2000      	movs	r0, #0
     fe8:	4b11      	ldr	r3, [pc, #68]	; (1030 <SPI_TEMP_PORT_init+0x50>)
     fea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA00, GPIO_DIRECTION_OUT);
     fec:	2102      	movs	r1, #2
     fee:	2000      	movs	r0, #0
     ff0:	4b10      	ldr	r3, [pc, #64]	; (1034 <SPI_TEMP_PORT_init+0x54>)
     ff2:	4798      	blx	r3

	gpio_set_pin_function(PA00, PINMUX_PA00D_SERCOM1_PAD0);
     ff4:	2103      	movs	r1, #3
     ff6:	2000      	movs	r0, #0
     ff8:	4b0f      	ldr	r3, [pc, #60]	; (1038 <SPI_TEMP_PORT_init+0x58>)
     ffa:	4798      	blx	r3

	gpio_set_pin_level(PA01,
     ffc:	2100      	movs	r1, #0
     ffe:	2001      	movs	r0, #1
    1000:	4b0b      	ldr	r3, [pc, #44]	; (1030 <SPI_TEMP_PORT_init+0x50>)
    1002:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA01, GPIO_DIRECTION_OUT);
    1004:	2102      	movs	r1, #2
    1006:	2001      	movs	r0, #1
    1008:	4b0a      	ldr	r3, [pc, #40]	; (1034 <SPI_TEMP_PORT_init+0x54>)
    100a:	4798      	blx	r3

	gpio_set_pin_function(PA01, PINMUX_PA01D_SERCOM1_PAD1);
    100c:	490b      	ldr	r1, [pc, #44]	; (103c <SPI_TEMP_PORT_init+0x5c>)
    100e:	2001      	movs	r0, #1
    1010:	4b09      	ldr	r3, [pc, #36]	; (1038 <SPI_TEMP_PORT_init+0x58>)
    1012:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1014:	2101      	movs	r1, #1
    1016:	2012      	movs	r0, #18
    1018:	4b06      	ldr	r3, [pc, #24]	; (1034 <SPI_TEMP_PORT_init+0x54>)
    101a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    101c:	2100      	movs	r1, #0
    101e:	2012      	movs	r0, #18
    1020:	4b07      	ldr	r3, [pc, #28]	; (1040 <SPI_TEMP_PORT_init+0x60>)
    1022:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    1024:	4907      	ldr	r1, [pc, #28]	; (1044 <SPI_TEMP_PORT_init+0x64>)
    1026:	2012      	movs	r0, #18
    1028:	4b03      	ldr	r3, [pc, #12]	; (1038 <SPI_TEMP_PORT_init+0x58>)
    102a:	4798      	blx	r3
}
    102c:	bf00      	nop
    102e:	bd80      	pop	{r7, pc}
    1030:	00000c09 	.word	0x00000c09
    1034:	00000bd1 	.word	0x00000bd1
    1038:	00000bb1 	.word	0x00000bb1
    103c:	00010003 	.word	0x00010003
    1040:	00000b7d 	.word	0x00000b7d
    1044:	00120002 	.word	0x00120002

00001048 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1048:	b580      	push	{r7, lr}
    104a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    104c:	2240      	movs	r2, #64	; 0x40
    104e:	2108      	movs	r1, #8
    1050:	4806      	ldr	r0, [pc, #24]	; (106c <SPI_TEMP_CLOCK_init+0x24>)
    1052:	4b07      	ldr	r3, [pc, #28]	; (1070 <SPI_TEMP_CLOCK_init+0x28>)
    1054:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1056:	2243      	movs	r2, #67	; 0x43
    1058:	2103      	movs	r1, #3
    105a:	4804      	ldr	r0, [pc, #16]	; (106c <SPI_TEMP_CLOCK_init+0x24>)
    105c:	4b04      	ldr	r3, [pc, #16]	; (1070 <SPI_TEMP_CLOCK_init+0x28>)
    105e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1060:	4804      	ldr	r0, [pc, #16]	; (1074 <SPI_TEMP_CLOCK_init+0x2c>)
    1062:	4b05      	ldr	r3, [pc, #20]	; (1078 <SPI_TEMP_CLOCK_init+0x30>)
    1064:	4798      	blx	r3
}
    1066:	bf00      	nop
    1068:	bd80      	pop	{r7, pc}
    106a:	bf00      	nop
    106c:	40001c00 	.word	0x40001c00
    1070:	000003fd 	.word	0x000003fd
    1074:	40000800 	.word	0x40000800
    1078:	00000523 	.word	0x00000523

0000107c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1080:	4b04      	ldr	r3, [pc, #16]	; (1094 <SPI_TEMP_init+0x18>)
    1082:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM1);
    1084:	4904      	ldr	r1, [pc, #16]	; (1098 <SPI_TEMP_init+0x1c>)
    1086:	4805      	ldr	r0, [pc, #20]	; (109c <SPI_TEMP_init+0x20>)
    1088:	4b05      	ldr	r3, [pc, #20]	; (10a0 <SPI_TEMP_init+0x24>)
    108a:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    108c:	4b05      	ldr	r3, [pc, #20]	; (10a4 <SPI_TEMP_init+0x28>)
    108e:	4798      	blx	r3
}
    1090:	bf00      	nop
    1092:	bd80      	pop	{r7, pc}
    1094:	00001049 	.word	0x00001049
    1098:	40003400 	.word	0x40003400
    109c:	20000c20 	.word	0x20000c20
    10a0:	00001f8d 	.word	0x00001f8d
    10a4:	00000fe1 	.word	0x00000fe1

000010a8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    10ac:	2100      	movs	r1, #0
    10ae:	2017      	movs	r0, #23
    10b0:	4b07      	ldr	r3, [pc, #28]	; (10d0 <I2C_EXPANDER_PORT_init+0x28>)
    10b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    10b4:	4907      	ldr	r1, [pc, #28]	; (10d4 <I2C_EXPANDER_PORT_init+0x2c>)
    10b6:	2017      	movs	r0, #23
    10b8:	4b07      	ldr	r3, [pc, #28]	; (10d8 <I2C_EXPANDER_PORT_init+0x30>)
    10ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    10bc:	2100      	movs	r1, #0
    10be:	2016      	movs	r0, #22
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <I2C_EXPANDER_PORT_init+0x28>)
    10c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    10c4:	4905      	ldr	r1, [pc, #20]	; (10dc <I2C_EXPANDER_PORT_init+0x34>)
    10c6:	2016      	movs	r0, #22
    10c8:	4b03      	ldr	r3, [pc, #12]	; (10d8 <I2C_EXPANDER_PORT_init+0x30>)
    10ca:	4798      	blx	r3
}
    10cc:	bf00      	nop
    10ce:	bd80      	pop	{r7, pc}
    10d0:	00000b7d 	.word	0x00000b7d
    10d4:	00170003 	.word	0x00170003
    10d8:	00000bb1 	.word	0x00000bb1
    10dc:	00160003 	.word	0x00160003

000010e0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    10e0:	b580      	push	{r7, lr}
    10e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10e4:	2242      	movs	r2, #66	; 0x42
    10e6:	2123      	movs	r1, #35	; 0x23
    10e8:	4806      	ldr	r0, [pc, #24]	; (1104 <I2C_EXPANDER_CLOCK_init+0x24>)
    10ea:	4b07      	ldr	r3, [pc, #28]	; (1108 <I2C_EXPANDER_CLOCK_init+0x28>)
    10ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10ee:	2246      	movs	r2, #70	; 0x46
    10f0:	2103      	movs	r1, #3
    10f2:	4804      	ldr	r0, [pc, #16]	; (1104 <I2C_EXPANDER_CLOCK_init+0x24>)
    10f4:	4b04      	ldr	r3, [pc, #16]	; (1108 <I2C_EXPANDER_CLOCK_init+0x28>)
    10f6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    10f8:	4804      	ldr	r0, [pc, #16]	; (110c <I2C_EXPANDER_CLOCK_init+0x2c>)
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <I2C_EXPANDER_CLOCK_init+0x30>)
    10fc:	4798      	blx	r3
}
    10fe:	bf00      	nop
    1100:	bd80      	pop	{r7, pc}
    1102:	bf00      	nop
    1104:	40001c00 	.word	0x40001c00
    1108:	000003fd 	.word	0x000003fd
    110c:	40000800 	.word	0x40000800
    1110:	00000643 	.word	0x00000643

00001114 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1114:	b580      	push	{r7, lr}
    1116:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1118:	4b04      	ldr	r3, [pc, #16]	; (112c <I2C_EXPANDER_init+0x18>)
    111a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    111c:	4904      	ldr	r1, [pc, #16]	; (1130 <I2C_EXPANDER_init+0x1c>)
    111e:	4805      	ldr	r0, [pc, #20]	; (1134 <I2C_EXPANDER_init+0x20>)
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <I2C_EXPANDER_init+0x24>)
    1122:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <I2C_EXPANDER_init+0x28>)
    1126:	4798      	blx	r3
}
    1128:	bf00      	nop
    112a:	bd80      	pop	{r7, pc}
    112c:	000010e1 	.word	0x000010e1
    1130:	43000400 	.word	0x43000400
    1134:	20000d04 	.word	0x20000d04
    1138:	00001ad1 	.word	0x00001ad1
    113c:	000010a9 	.word	0x000010a9

00001140 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    1140:	b580      	push	{r7, lr}
    1142:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PD09,
    1144:	2100      	movs	r1, #0
    1146:	2069      	movs	r0, #105	; 0x69
    1148:	4b11      	ldr	r3, [pc, #68]	; (1190 <SPI_MEMORIES_PORT_init+0x50>)
    114a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PD09, GPIO_DIRECTION_OUT);
    114c:	2102      	movs	r1, #2
    114e:	2069      	movs	r0, #105	; 0x69
    1150:	4b10      	ldr	r3, [pc, #64]	; (1194 <SPI_MEMORIES_PORT_init+0x54>)
    1152:	4798      	blx	r3

	gpio_set_pin_function(PD09, PINMUX_PD09D_SERCOM6_PAD0);
    1154:	4910      	ldr	r1, [pc, #64]	; (1198 <SPI_MEMORIES_PORT_init+0x58>)
    1156:	2069      	movs	r0, #105	; 0x69
    1158:	4b10      	ldr	r3, [pc, #64]	; (119c <SPI_MEMORIES_PORT_init+0x5c>)
    115a:	4798      	blx	r3

	gpio_set_pin_level(PD08,
    115c:	2100      	movs	r1, #0
    115e:	2068      	movs	r0, #104	; 0x68
    1160:	4b0b      	ldr	r3, [pc, #44]	; (1190 <SPI_MEMORIES_PORT_init+0x50>)
    1162:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PD08, GPIO_DIRECTION_OUT);
    1164:	2102      	movs	r1, #2
    1166:	2068      	movs	r0, #104	; 0x68
    1168:	4b0a      	ldr	r3, [pc, #40]	; (1194 <SPI_MEMORIES_PORT_init+0x54>)
    116a:	4798      	blx	r3

	gpio_set_pin_function(PD08, PINMUX_PD08D_SERCOM6_PAD1);
    116c:	490c      	ldr	r1, [pc, #48]	; (11a0 <SPI_MEMORIES_PORT_init+0x60>)
    116e:	2068      	movs	r0, #104	; 0x68
    1170:	4b0a      	ldr	r3, [pc, #40]	; (119c <SPI_MEMORIES_PORT_init+0x5c>)
    1172:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC06, GPIO_DIRECTION_IN);
    1174:	2101      	movs	r1, #1
    1176:	2046      	movs	r0, #70	; 0x46
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <SPI_MEMORIES_PORT_init+0x54>)
    117a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC06,
    117c:	2100      	movs	r1, #0
    117e:	2046      	movs	r0, #70	; 0x46
    1180:	4b08      	ldr	r3, [pc, #32]	; (11a4 <SPI_MEMORIES_PORT_init+0x64>)
    1182:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC06, PINMUX_PC06C_SERCOM6_PAD2);
    1184:	4908      	ldr	r1, [pc, #32]	; (11a8 <SPI_MEMORIES_PORT_init+0x68>)
    1186:	2046      	movs	r0, #70	; 0x46
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <SPI_MEMORIES_PORT_init+0x5c>)
    118a:	4798      	blx	r3
}
    118c:	bf00      	nop
    118e:	bd80      	pop	{r7, pc}
    1190:	00000c09 	.word	0x00000c09
    1194:	00000bd1 	.word	0x00000bd1
    1198:	00690003 	.word	0x00690003
    119c:	00000bb1 	.word	0x00000bb1
    11a0:	00680003 	.word	0x00680003
    11a4:	00000b7d 	.word	0x00000b7d
    11a8:	00460002 	.word	0x00460002

000011ac <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    11ac:	b580      	push	{r7, lr}
    11ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11b0:	2242      	movs	r2, #66	; 0x42
    11b2:	2124      	movs	r1, #36	; 0x24
    11b4:	4806      	ldr	r0, [pc, #24]	; (11d0 <SPI_MEMORIES_CLOCK_init+0x24>)
    11b6:	4b07      	ldr	r3, [pc, #28]	; (11d4 <SPI_MEMORIES_CLOCK_init+0x28>)
    11b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11ba:	2246      	movs	r2, #70	; 0x46
    11bc:	2103      	movs	r1, #3
    11be:	4804      	ldr	r0, [pc, #16]	; (11d0 <SPI_MEMORIES_CLOCK_init+0x24>)
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <SPI_MEMORIES_CLOCK_init+0x28>)
    11c2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    11c4:	4804      	ldr	r0, [pc, #16]	; (11d8 <SPI_MEMORIES_CLOCK_init+0x2c>)
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <SPI_MEMORIES_CLOCK_init+0x30>)
    11c8:	4798      	blx	r3
}
    11ca:	bf00      	nop
    11cc:	bd80      	pop	{r7, pc}
    11ce:	bf00      	nop
    11d0:	40001c00 	.word	0x40001c00
    11d4:	000003fd 	.word	0x000003fd
    11d8:	40000800 	.word	0x40000800
    11dc:	00000663 	.word	0x00000663

000011e0 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    11e4:	4b04      	ldr	r3, [pc, #16]	; (11f8 <SPI_MEMORIES_init+0x18>)
    11e6:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM6);
    11e8:	4904      	ldr	r1, [pc, #16]	; (11fc <SPI_MEMORIES_init+0x1c>)
    11ea:	4805      	ldr	r0, [pc, #20]	; (1200 <SPI_MEMORIES_init+0x20>)
    11ec:	4b05      	ldr	r3, [pc, #20]	; (1204 <SPI_MEMORIES_init+0x24>)
    11ee:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    11f0:	4b05      	ldr	r3, [pc, #20]	; (1208 <SPI_MEMORIES_init+0x28>)
    11f2:	4798      	blx	r3
}
    11f4:	bf00      	nop
    11f6:	bd80      	pop	{r7, pc}
    11f8:	000011ad 	.word	0x000011ad
    11fc:	43000800 	.word	0x43000800
    1200:	20000bf0 	.word	0x20000bf0
    1204:	00002141 	.word	0x00002141
    1208:	00001141 	.word	0x00001141

0000120c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    120c:	b580      	push	{r7, lr}
    120e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1210:	4808      	ldr	r0, [pc, #32]	; (1234 <TIMER_INTERFACE_init+0x28>)
    1212:	4b09      	ldr	r3, [pc, #36]	; (1238 <TIMER_INTERFACE_init+0x2c>)
    1214:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1216:	2243      	movs	r2, #67	; 0x43
    1218:	2109      	movs	r1, #9
    121a:	4808      	ldr	r0, [pc, #32]	; (123c <TIMER_INTERFACE_init+0x30>)
    121c:	4b08      	ldr	r3, [pc, #32]	; (1240 <TIMER_INTERFACE_init+0x34>)
    121e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    1220:	4b08      	ldr	r3, [pc, #32]	; (1244 <TIMER_INTERFACE_init+0x38>)
    1222:	4798      	blx	r3
    1224:	4603      	mov	r3, r0
    1226:	461a      	mov	r2, r3
    1228:	4907      	ldr	r1, [pc, #28]	; (1248 <TIMER_INTERFACE_init+0x3c>)
    122a:	4808      	ldr	r0, [pc, #32]	; (124c <TIMER_INTERFACE_init+0x40>)
    122c:	4b08      	ldr	r3, [pc, #32]	; (1250 <TIMER_INTERFACE_init+0x44>)
    122e:	4798      	blx	r3
}
    1230:	bf00      	nop
    1232:	bd80      	pop	{r7, pc}
    1234:	40000800 	.word	0x40000800
    1238:	00000543 	.word	0x00000543
    123c:	40001c00 	.word	0x40001c00
    1240:	000003fd 	.word	0x000003fd
    1244:	0000761d 	.word	0x0000761d
    1248:	40003800 	.word	0x40003800
    124c:	20000c88 	.word	0x20000c88
    1250:	00002311 	.word	0x00002311

00001254 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1258:	4808      	ldr	r0, [pc, #32]	; (127c <TIMER_EVENT_init+0x28>)
    125a:	4b09      	ldr	r3, [pc, #36]	; (1280 <TIMER_EVENT_init+0x2c>)
    125c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    125e:	2245      	movs	r2, #69	; 0x45
    1260:	2109      	movs	r1, #9
    1262:	4808      	ldr	r0, [pc, #32]	; (1284 <TIMER_EVENT_init+0x30>)
    1264:	4b08      	ldr	r3, [pc, #32]	; (1288 <TIMER_EVENT_init+0x34>)
    1266:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1268:	4b08      	ldr	r3, [pc, #32]	; (128c <TIMER_EVENT_init+0x38>)
    126a:	4798      	blx	r3
    126c:	4603      	mov	r3, r0
    126e:	461a      	mov	r2, r3
    1270:	4907      	ldr	r1, [pc, #28]	; (1290 <TIMER_EVENT_init+0x3c>)
    1272:	4808      	ldr	r0, [pc, #32]	; (1294 <TIMER_EVENT_init+0x40>)
    1274:	4b08      	ldr	r3, [pc, #32]	; (1298 <TIMER_EVENT_init+0x44>)
    1276:	4798      	blx	r3
}
    1278:	bf00      	nop
    127a:	bd80      	pop	{r7, pc}
    127c:	40000800 	.word	0x40000800
    1280:	00000563 	.word	0x00000563
    1284:	40001c00 	.word	0x40001c00
    1288:	000003fd 	.word	0x000003fd
    128c:	0000761d 	.word	0x0000761d
    1290:	40003c00 	.word	0x40003c00
    1294:	20000c6c 	.word	0x20000c6c
    1298:	00002311 	.word	0x00002311

0000129c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    129c:	b580      	push	{r7, lr}
    129e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    12a0:	4808      	ldr	r0, [pc, #32]	; (12c4 <TIMER_ARINC_init+0x28>)
    12a2:	4b09      	ldr	r3, [pc, #36]	; (12c8 <TIMER_ARINC_init+0x2c>)
    12a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12a6:	2244      	movs	r2, #68	; 0x44
    12a8:	211a      	movs	r1, #26
    12aa:	4808      	ldr	r0, [pc, #32]	; (12cc <TIMER_ARINC_init+0x30>)
    12ac:	4b08      	ldr	r3, [pc, #32]	; (12d0 <TIMER_ARINC_init+0x34>)
    12ae:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    12b0:	4b08      	ldr	r3, [pc, #32]	; (12d4 <TIMER_ARINC_init+0x38>)
    12b2:	4798      	blx	r3
    12b4:	4603      	mov	r3, r0
    12b6:	461a      	mov	r2, r3
    12b8:	4907      	ldr	r1, [pc, #28]	; (12d8 <TIMER_ARINC_init+0x3c>)
    12ba:	4808      	ldr	r0, [pc, #32]	; (12dc <TIMER_ARINC_init+0x40>)
    12bc:	4b08      	ldr	r3, [pc, #32]	; (12e0 <TIMER_ARINC_init+0x44>)
    12be:	4798      	blx	r3
}
    12c0:	bf00      	nop
    12c2:	bd80      	pop	{r7, pc}
    12c4:	40000800 	.word	0x40000800
    12c8:	000005e3 	.word	0x000005e3
    12cc:	40001c00 	.word	0x40001c00
    12d0:	000003fd 	.word	0x000003fd
    12d4:	0000761d 	.word	0x0000761d
    12d8:	4101a000 	.word	0x4101a000
    12dc:	20000ce8 	.word	0x20000ce8
    12e0:	00002311 	.word	0x00002311

000012e4 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    12e8:	4808      	ldr	r0, [pc, #32]	; (130c <TIMER_HVAC_init+0x28>)
    12ea:	4b09      	ldr	r3, [pc, #36]	; (1310 <TIMER_HVAC_init+0x2c>)
    12ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12ee:	2245      	movs	r2, #69	; 0x45
    12f0:	211a      	movs	r1, #26
    12f2:	4808      	ldr	r0, [pc, #32]	; (1314 <TIMER_HVAC_init+0x30>)
    12f4:	4b08      	ldr	r3, [pc, #32]	; (1318 <TIMER_HVAC_init+0x34>)
    12f6:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    12f8:	4b08      	ldr	r3, [pc, #32]	; (131c <TIMER_HVAC_init+0x38>)
    12fa:	4798      	blx	r3
    12fc:	4603      	mov	r3, r0
    12fe:	461a      	mov	r2, r3
    1300:	4907      	ldr	r1, [pc, #28]	; (1320 <TIMER_HVAC_init+0x3c>)
    1302:	4808      	ldr	r0, [pc, #32]	; (1324 <TIMER_HVAC_init+0x40>)
    1304:	4b08      	ldr	r3, [pc, #32]	; (1328 <TIMER_HVAC_init+0x44>)
    1306:	4798      	blx	r3
}
    1308:	bf00      	nop
    130a:	bd80      	pop	{r7, pc}
    130c:	40000800 	.word	0x40000800
    1310:	00000603 	.word	0x00000603
    1314:	40001c00 	.word	0x40001c00
    1318:	000003fd 	.word	0x000003fd
    131c:	0000761d 	.word	0x0000761d
    1320:	4101c000 	.word	0x4101c000
    1324:	20000d44 	.word	0x20000d44
    1328:	00002311 	.word	0x00002311

0000132c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    132c:	b480      	push	{r7}
    132e:	af00      	add	r7, sp, #0
}
    1330:	bf00      	nop
    1332:	46bd      	mov	sp, r7
    1334:	f85d 7b04 	ldr.w	r7, [sp], #4
    1338:	4770      	bx	lr
	...

0000133c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    133c:	b580      	push	{r7, lr}
    133e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1340:	4804      	ldr	r0, [pc, #16]	; (1354 <LIVE_PULSE_CLOCK_init+0x18>)
    1342:	4b05      	ldr	r3, [pc, #20]	; (1358 <LIVE_PULSE_CLOCK_init+0x1c>)
    1344:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1346:	224b      	movs	r2, #75	; 0x4b
    1348:	2127      	movs	r1, #39	; 0x27
    134a:	4804      	ldr	r0, [pc, #16]	; (135c <LIVE_PULSE_CLOCK_init+0x20>)
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <LIVE_PULSE_CLOCK_init+0x24>)
    134e:	4798      	blx	r3
}
    1350:	bf00      	nop
    1352:	bd80      	pop	{r7, pc}
    1354:	40000800 	.word	0x40000800
    1358:	00000683 	.word	0x00000683
    135c:	40001c00 	.word	0x40001c00
    1360:	000003fd 	.word	0x000003fd

00001364 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1364:	b580      	push	{r7, lr}
    1366:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <LIVE_PULSE_init+0x20>)
    136a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <LIVE_PULSE_init+0x24>)
    136e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1370:	4b06      	ldr	r3, [pc, #24]	; (138c <LIVE_PULSE_init+0x28>)
    1372:	4798      	blx	r3
    1374:	4603      	mov	r3, r0
    1376:	461a      	mov	r2, r3
    1378:	4905      	ldr	r1, [pc, #20]	; (1390 <LIVE_PULSE_init+0x2c>)
    137a:	4806      	ldr	r0, [pc, #24]	; (1394 <LIVE_PULSE_init+0x30>)
    137c:	4b06      	ldr	r3, [pc, #24]	; (1398 <LIVE_PULSE_init+0x34>)
    137e:	4798      	blx	r3
}
    1380:	bf00      	nop
    1382:	bd80      	pop	{r7, pc}
    1384:	0000133d 	.word	0x0000133d
    1388:	0000132d 	.word	0x0000132d
    138c:	0000762d 	.word	0x0000762d
    1390:	43001800 	.word	0x43001800
    1394:	20000ca4 	.word	0x20000ca4
    1398:	00001b65 	.word	0x00001b65

0000139c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    139c:	b580      	push	{r7, lr}
    139e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    13a0:	2102      	movs	r1, #2
    13a2:	2018      	movs	r0, #24
    13a4:	4b0f      	ldr	r3, [pc, #60]	; (13e4 <CDCUSB_PORT_init+0x48>)
    13a6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    13a8:	2100      	movs	r1, #0
    13aa:	2018      	movs	r0, #24
    13ac:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <CDCUSB_PORT_init+0x4c>)
    13ae:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    13b0:	2100      	movs	r1, #0
    13b2:	2018      	movs	r0, #24
    13b4:	4b0d      	ldr	r3, [pc, #52]	; (13ec <CDCUSB_PORT_init+0x50>)
    13b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    13b8:	490d      	ldr	r1, [pc, #52]	; (13f0 <CDCUSB_PORT_init+0x54>)
    13ba:	2018      	movs	r0, #24
    13bc:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <CDCUSB_PORT_init+0x58>)
    13be:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    13c0:	2102      	movs	r1, #2
    13c2:	2019      	movs	r0, #25
    13c4:	4b07      	ldr	r3, [pc, #28]	; (13e4 <CDCUSB_PORT_init+0x48>)
    13c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    13c8:	2100      	movs	r1, #0
    13ca:	2019      	movs	r0, #25
    13cc:	4b06      	ldr	r3, [pc, #24]	; (13e8 <CDCUSB_PORT_init+0x4c>)
    13ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    13d0:	2100      	movs	r1, #0
    13d2:	2019      	movs	r0, #25
    13d4:	4b05      	ldr	r3, [pc, #20]	; (13ec <CDCUSB_PORT_init+0x50>)
    13d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    13d8:	4907      	ldr	r1, [pc, #28]	; (13f8 <CDCUSB_PORT_init+0x5c>)
    13da:	2019      	movs	r0, #25
    13dc:	4b05      	ldr	r3, [pc, #20]	; (13f4 <CDCUSB_PORT_init+0x58>)
    13de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    13e0:	bf00      	nop
    13e2:	bd80      	pop	{r7, pc}
    13e4:	00000bd1 	.word	0x00000bd1
    13e8:	00000c09 	.word	0x00000c09
    13ec:	00000b7d 	.word	0x00000b7d
    13f0:	00180007 	.word	0x00180007
    13f4:	00000bb1 	.word	0x00000bb1
    13f8:	00190007 	.word	0x00190007

000013fc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1400:	2242      	movs	r2, #66	; 0x42
    1402:	210a      	movs	r1, #10
    1404:	4805      	ldr	r0, [pc, #20]	; (141c <CDCUSB_CLOCK_init+0x20>)
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <CDCUSB_CLOCK_init+0x24>)
    1408:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    140a:	4806      	ldr	r0, [pc, #24]	; (1424 <CDCUSB_CLOCK_init+0x28>)
    140c:	4b06      	ldr	r3, [pc, #24]	; (1428 <CDCUSB_CLOCK_init+0x2c>)
    140e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1410:	4804      	ldr	r0, [pc, #16]	; (1424 <CDCUSB_CLOCK_init+0x28>)
    1412:	4b06      	ldr	r3, [pc, #24]	; (142c <CDCUSB_CLOCK_init+0x30>)
    1414:	4798      	blx	r3
}
    1416:	bf00      	nop
    1418:	bd80      	pop	{r7, pc}
    141a:	bf00      	nop
    141c:	40001c00 	.word	0x40001c00
    1420:	000003fd 	.word	0x000003fd
    1424:	40000800 	.word	0x40000800
    1428:	00000423 	.word	0x00000423
    142c:	00000583 	.word	0x00000583

00001430 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1430:	b580      	push	{r7, lr}
    1432:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1434:	4b03      	ldr	r3, [pc, #12]	; (1444 <CDCUSB_init+0x14>)
    1436:	4798      	blx	r3
	usb_d_init();
    1438:	4b03      	ldr	r3, [pc, #12]	; (1448 <CDCUSB_init+0x18>)
    143a:	4798      	blx	r3
	CDCUSB_PORT_init();
    143c:	4b03      	ldr	r3, [pc, #12]	; (144c <CDCUSB_init+0x1c>)
    143e:	4798      	blx	r3
}
    1440:	bf00      	nop
    1442:	bd80      	pop	{r7, pc}
    1444:	000013fd 	.word	0x000013fd
    1448:	00002b21 	.word	0x00002b21
    144c:	0000139d 	.word	0x0000139d

00001450 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1450:	b580      	push	{r7, lr}
    1452:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1454:	4802      	ldr	r0, [pc, #8]	; (1460 <WATCHDOG_CLOCK_init+0x10>)
    1456:	4b03      	ldr	r3, [pc, #12]	; (1464 <WATCHDOG_CLOCK_init+0x14>)
    1458:	4798      	blx	r3
}
    145a:	bf00      	nop
    145c:	bd80      	pop	{r7, pc}
    145e:	bf00      	nop
    1460:	40000800 	.word	0x40000800
    1464:	000004a3 	.word	0x000004a3

00001468 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1468:	b580      	push	{r7, lr}
    146a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    146c:	4b03      	ldr	r3, [pc, #12]	; (147c <WATCHDOG_init+0x14>)
    146e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1470:	4903      	ldr	r1, [pc, #12]	; (1480 <WATCHDOG_init+0x18>)
    1472:	4804      	ldr	r0, [pc, #16]	; (1484 <WATCHDOG_init+0x1c>)
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <WATCHDOG_init+0x20>)
    1476:	4798      	blx	r3
}
    1478:	bf00      	nop
    147a:	bd80      	pop	{r7, pc}
    147c:	00001451 	.word	0x00001451
    1480:	40002000 	.word	0x40002000
    1484:	20000d80 	.word	0x20000d80
    1488:	00000c51 	.word	0x00000c51

0000148c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    148c:	b580      	push	{r7, lr}
    148e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1490:	4904      	ldr	r1, [pc, #16]	; (14a4 <CAN_CCU_PORT_init+0x18>)
    1492:	202d      	movs	r0, #45	; 0x2d
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <CAN_CCU_PORT_init+0x1c>)
    1496:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1498:	4904      	ldr	r1, [pc, #16]	; (14ac <CAN_CCU_PORT_init+0x20>)
    149a:	202c      	movs	r0, #44	; 0x2c
    149c:	4b02      	ldr	r3, [pc, #8]	; (14a8 <CAN_CCU_PORT_init+0x1c>)
    149e:	4798      	blx	r3
}
    14a0:	bf00      	nop
    14a2:	bd80      	pop	{r7, pc}
    14a4:	002d0007 	.word	0x002d0007
    14a8:	00000bb1 	.word	0x00000bb1
    14ac:	002c0007 	.word	0x002c0007

000014b0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    14b4:	4807      	ldr	r0, [pc, #28]	; (14d4 <CAN_CCU_init+0x24>)
    14b6:	4b08      	ldr	r3, [pc, #32]	; (14d8 <CAN_CCU_init+0x28>)
    14b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14ba:	2243      	movs	r2, #67	; 0x43
    14bc:	211c      	movs	r1, #28
    14be:	4807      	ldr	r0, [pc, #28]	; (14dc <CAN_CCU_init+0x2c>)
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <CAN_CCU_init+0x30>)
    14c2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    14c4:	4907      	ldr	r1, [pc, #28]	; (14e4 <CAN_CCU_init+0x34>)
    14c6:	4808      	ldr	r0, [pc, #32]	; (14e8 <CAN_CCU_init+0x38>)
    14c8:	4b08      	ldr	r3, [pc, #32]	; (14ec <CAN_CCU_init+0x3c>)
    14ca:	4798      	blx	r3
	CAN_CCU_PORT_init();
    14cc:	4b08      	ldr	r3, [pc, #32]	; (14f0 <CAN_CCU_init+0x40>)
    14ce:	4798      	blx	r3
}
    14d0:	bf00      	nop
    14d2:	bd80      	pop	{r7, pc}
    14d4:	40000800 	.word	0x40000800
    14d8:	00000463 	.word	0x00000463
    14dc:	40001c00 	.word	0x40001c00
    14e0:	000003fd 	.word	0x000003fd
    14e4:	42000400 	.word	0x42000400
    14e8:	20000cc0 	.word	0x20000cc0
    14ec:	00001711 	.word	0x00001711
    14f0:	0000148d 	.word	0x0000148d

000014f4 <system_init>:

void system_init(void)
{
    14f4:	b580      	push	{r7, lr}
    14f6:	af00      	add	r7, sp, #0
	init_mcu();
    14f8:	4b53      	ldr	r3, [pc, #332]	; (1648 <system_init+0x154>)
    14fa:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    14fc:	2101      	movs	r1, #1
    14fe:	2027      	movs	r0, #39	; 0x27
    1500:	4b52      	ldr	r3, [pc, #328]	; (164c <system_init+0x158>)
    1502:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1504:	2102      	movs	r1, #2
    1506:	2027      	movs	r0, #39	; 0x27
    1508:	4b51      	ldr	r3, [pc, #324]	; (1650 <system_init+0x15c>)
    150a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    150c:	f04f 31ff 	mov.w	r1, #4294967295
    1510:	2027      	movs	r0, #39	; 0x27
    1512:	4b50      	ldr	r3, [pc, #320]	; (1654 <system_init+0x160>)
    1514:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1516:	2101      	movs	r1, #1
    1518:	203d      	movs	r0, #61	; 0x3d
    151a:	4b4f      	ldr	r3, [pc, #316]	; (1658 <system_init+0x164>)
    151c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    151e:	2102      	movs	r1, #2
    1520:	203d      	movs	r0, #61	; 0x3d
    1522:	4b4a      	ldr	r3, [pc, #296]	; (164c <system_init+0x158>)
    1524:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1526:	f04f 31ff 	mov.w	r1, #4294967295
    152a:	203d      	movs	r0, #61	; 0x3d
    152c:	4b49      	ldr	r3, [pc, #292]	; (1654 <system_init+0x160>)
    152e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1530:	2101      	movs	r1, #1
    1532:	203f      	movs	r0, #63	; 0x3f
    1534:	4b45      	ldr	r3, [pc, #276]	; (164c <system_init+0x158>)
    1536:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1538:	2101      	movs	r1, #1
    153a:	203f      	movs	r0, #63	; 0x3f
    153c:	4b44      	ldr	r3, [pc, #272]	; (1650 <system_init+0x15c>)
    153e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1540:	f04f 31ff 	mov.w	r1, #4294967295
    1544:	203f      	movs	r0, #63	; 0x3f
    1546:	4b43      	ldr	r3, [pc, #268]	; (1654 <system_init+0x160>)
    1548:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    154a:	2101      	movs	r1, #1
    154c:	2040      	movs	r0, #64	; 0x40
    154e:	4b3f      	ldr	r3, [pc, #252]	; (164c <system_init+0x158>)
    1550:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1552:	2102      	movs	r1, #2
    1554:	2040      	movs	r0, #64	; 0x40
    1556:	4b3e      	ldr	r3, [pc, #248]	; (1650 <system_init+0x15c>)
    1558:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    155a:	f04f 31ff 	mov.w	r1, #4294967295
    155e:	2040      	movs	r0, #64	; 0x40
    1560:	4b3c      	ldr	r3, [pc, #240]	; (1654 <system_init+0x160>)
    1562:	4798      	blx	r3

	// GPIO on PC05

	gpio_set_pin_level(CS_FLASH,
    1564:	2101      	movs	r1, #1
    1566:	2045      	movs	r0, #69	; 0x45
    1568:	4b3b      	ldr	r3, [pc, #236]	; (1658 <system_init+0x164>)
    156a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    156c:	2102      	movs	r1, #2
    156e:	2045      	movs	r0, #69	; 0x45
    1570:	4b36      	ldr	r3, [pc, #216]	; (164c <system_init+0x158>)
    1572:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1574:	f04f 31ff 	mov.w	r1, #4294967295
    1578:	2045      	movs	r0, #69	; 0x45
    157a:	4b36      	ldr	r3, [pc, #216]	; (1654 <system_init+0x160>)
    157c:	4798      	blx	r3

	// GPIO on PC07

	gpio_set_pin_level(CS_FRAM,
    157e:	2101      	movs	r1, #1
    1580:	2047      	movs	r0, #71	; 0x47
    1582:	4b35      	ldr	r3, [pc, #212]	; (1658 <system_init+0x164>)
    1584:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1586:	2102      	movs	r1, #2
    1588:	2047      	movs	r0, #71	; 0x47
    158a:	4b30      	ldr	r3, [pc, #192]	; (164c <system_init+0x158>)
    158c:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    158e:	f04f 31ff 	mov.w	r1, #4294967295
    1592:	2047      	movs	r0, #71	; 0x47
    1594:	4b2f      	ldr	r3, [pc, #188]	; (1654 <system_init+0x160>)
    1596:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1598:	2100      	movs	r1, #0
    159a:	204d      	movs	r0, #77	; 0x4d
    159c:	4b2e      	ldr	r3, [pc, #184]	; (1658 <system_init+0x164>)
    159e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    15a0:	2102      	movs	r1, #2
    15a2:	204d      	movs	r0, #77	; 0x4d
    15a4:	4b29      	ldr	r3, [pc, #164]	; (164c <system_init+0x158>)
    15a6:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    15a8:	f04f 31ff 	mov.w	r1, #4294967295
    15ac:	204d      	movs	r0, #77	; 0x4d
    15ae:	4b29      	ldr	r3, [pc, #164]	; (1654 <system_init+0x160>)
    15b0:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    15b2:	2101      	movs	r1, #1
    15b4:	204e      	movs	r0, #78	; 0x4e
    15b6:	4b28      	ldr	r3, [pc, #160]	; (1658 <system_init+0x164>)
    15b8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    15ba:	2102      	movs	r1, #2
    15bc:	204e      	movs	r0, #78	; 0x4e
    15be:	4b23      	ldr	r3, [pc, #140]	; (164c <system_init+0x158>)
    15c0:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    15c2:	f04f 31ff 	mov.w	r1, #4294967295
    15c6:	204e      	movs	r0, #78	; 0x4e
    15c8:	4b22      	ldr	r3, [pc, #136]	; (1654 <system_init+0x160>)
    15ca:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    15cc:	2100      	movs	r1, #0
    15ce:	204f      	movs	r0, #79	; 0x4f
    15d0:	4b21      	ldr	r3, [pc, #132]	; (1658 <system_init+0x164>)
    15d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    15d4:	2102      	movs	r1, #2
    15d6:	204f      	movs	r0, #79	; 0x4f
    15d8:	4b1c      	ldr	r3, [pc, #112]	; (164c <system_init+0x158>)
    15da:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    15dc:	f04f 31ff 	mov.w	r1, #4294967295
    15e0:	204f      	movs	r0, #79	; 0x4f
    15e2:	4b1c      	ldr	r3, [pc, #112]	; (1654 <system_init+0x160>)
    15e4:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    15e6:	2100      	movs	r1, #0
    15e8:	2052      	movs	r0, #82	; 0x52
    15ea:	4b1b      	ldr	r3, [pc, #108]	; (1658 <system_init+0x164>)
    15ec:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    15ee:	2102      	movs	r1, #2
    15f0:	2052      	movs	r0, #82	; 0x52
    15f2:	4b16      	ldr	r3, [pc, #88]	; (164c <system_init+0x158>)
    15f4:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    15f6:	f04f 31ff 	mov.w	r1, #4294967295
    15fa:	2052      	movs	r0, #82	; 0x52
    15fc:	4b15      	ldr	r3, [pc, #84]	; (1654 <system_init+0x160>)
    15fe:	4798      	blx	r3

	CRC_CALC_init();
    1600:	4b16      	ldr	r3, [pc, #88]	; (165c <system_init+0x168>)
    1602:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1604:	4b16      	ldr	r3, [pc, #88]	; (1660 <system_init+0x16c>)
    1606:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1608:	4b16      	ldr	r3, [pc, #88]	; (1664 <system_init+0x170>)
    160a:	4798      	blx	r3

	QSPI_N25Q256_init();
    160c:	4b16      	ldr	r3, [pc, #88]	; (1668 <system_init+0x174>)
    160e:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1610:	4b16      	ldr	r3, [pc, #88]	; (166c <system_init+0x178>)
    1612:	4798      	blx	r3

	SPI_HI3593_init();
    1614:	4b16      	ldr	r3, [pc, #88]	; (1670 <system_init+0x17c>)
    1616:	4798      	blx	r3

	SPI_TEMP_init();
    1618:	4b16      	ldr	r3, [pc, #88]	; (1674 <system_init+0x180>)
    161a:	4798      	blx	r3

	I2C_EXPANDER_init();
    161c:	4b16      	ldr	r3, [pc, #88]	; (1678 <system_init+0x184>)
    161e:	4798      	blx	r3

	SPI_MEMORIES_init();
    1620:	4b16      	ldr	r3, [pc, #88]	; (167c <system_init+0x188>)
    1622:	4798      	blx	r3

	TIMER_INTERFACE_init();
    1624:	4b16      	ldr	r3, [pc, #88]	; (1680 <system_init+0x18c>)
    1626:	4798      	blx	r3
	TIMER_EVENT_init();
    1628:	4b16      	ldr	r3, [pc, #88]	; (1684 <system_init+0x190>)
    162a:	4798      	blx	r3
	TIMER_ARINC_init();
    162c:	4b16      	ldr	r3, [pc, #88]	; (1688 <system_init+0x194>)
    162e:	4798      	blx	r3
	TIMER_HVAC_init();
    1630:	4b16      	ldr	r3, [pc, #88]	; (168c <system_init+0x198>)
    1632:	4798      	blx	r3
	LIVE_PULSE_init();
    1634:	4b16      	ldr	r3, [pc, #88]	; (1690 <system_init+0x19c>)
    1636:	4798      	blx	r3

	CDCUSB_init();
    1638:	4b16      	ldr	r3, [pc, #88]	; (1694 <system_init+0x1a0>)
    163a:	4798      	blx	r3

	WATCHDOG_init();
    163c:	4b16      	ldr	r3, [pc, #88]	; (1698 <system_init+0x1a4>)
    163e:	4798      	blx	r3
	CAN_CCU_init();
    1640:	4b16      	ldr	r3, [pc, #88]	; (169c <system_init+0x1a8>)
    1642:	4798      	blx	r3
}
    1644:	bf00      	nop
    1646:	bd80      	pop	{r7, pc}
    1648:	00000c41 	.word	0x00000c41
    164c:	00000bd1 	.word	0x00000bd1
    1650:	00000b7d 	.word	0x00000b7d
    1654:	00000bb1 	.word	0x00000bb1
    1658:	00000c09 	.word	0x00000c09
    165c:	00000ca1 	.word	0x00000ca1
    1660:	00000ccd 	.word	0x00000ccd
    1664:	00000d71 	.word	0x00000d71
    1668:	00000ead 	.word	0x00000ead
    166c:	00000ef1 	.word	0x00000ef1
    1670:	00000fb5 	.word	0x00000fb5
    1674:	0000107d 	.word	0x0000107d
    1678:	00001115 	.word	0x00001115
    167c:	000011e1 	.word	0x000011e1
    1680:	0000120d 	.word	0x0000120d
    1684:	00001255 	.word	0x00001255
    1688:	0000129d 	.word	0x0000129d
    168c:	000012e5 	.word	0x000012e5
    1690:	00001365 	.word	0x00001365
    1694:	00001431 	.word	0x00001431
    1698:	00001469 	.word	0x00001469
    169c:	000014b1 	.word	0x000014b1

000016a0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	b084      	sub	sp, #16
    16a4:	af00      	add	r7, sp, #0
    16a6:	6078      	str	r0, [r7, #4]
    16a8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    16aa:	2300      	movs	r3, #0
    16ac:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	2b00      	cmp	r3, #0
    16b2:	bf14      	ite	ne
    16b4:	2301      	movne	r3, #1
    16b6:	2300      	moveq	r3, #0
    16b8:	b2db      	uxtb	r3, r3
    16ba:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    16be:	4911      	ldr	r1, [pc, #68]	; (1704 <calendar_init+0x64>)
    16c0:	4618      	mov	r0, r3
    16c2:	4b11      	ldr	r3, [pc, #68]	; (1708 <calendar_init+0x68>)
    16c4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	681a      	ldr	r2, [r3, #0]
    16ca:	683b      	ldr	r3, [r7, #0]
    16cc:	429a      	cmp	r2, r3
    16ce:	d101      	bne.n	16d4 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    16d0:	2300      	movs	r3, #0
    16d2:	e013      	b.n	16fc <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	2b00      	cmp	r3, #0
    16da:	d002      	beq.n	16e2 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    16dc:	f06f 0311 	mvn.w	r3, #17
    16e0:	e00c      	b.n	16fc <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	683a      	ldr	r2, [r7, #0]
    16e6:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	4618      	mov	r0, r3
    16ec:	4b07      	ldr	r3, [pc, #28]	; (170c <calendar_init+0x6c>)
    16ee:	4798      	blx	r3
    16f0:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	f240 72b2 	movw	r2, #1970	; 0x7b2
    16f8:	619a      	str	r2, [r3, #24]

	return ret;
    16fa:	68fb      	ldr	r3, [r7, #12]
}
    16fc:	4618      	mov	r0, r3
    16fe:	3710      	adds	r7, #16
    1700:	46bd      	mov	sp, r7
    1702:	bd80      	pop	{r7, pc}
    1704:	0000d404 	.word	0x0000d404
    1708:	000030c9 	.word	0x000030c9
    170c:	000052b5 	.word	0x000052b5

00001710 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1710:	b580      	push	{r7, lr}
    1712:	b084      	sub	sp, #16
    1714:	af00      	add	r7, sp, #0
    1716:	6078      	str	r0, [r7, #4]
    1718:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	2b00      	cmp	r3, #0
    171e:	d004      	beq.n	172a <can_async_init+0x1a>
    1720:	683b      	ldr	r3, [r7, #0]
    1722:	2b00      	cmp	r3, #0
    1724:	d001      	beq.n	172a <can_async_init+0x1a>
    1726:	2301      	movs	r3, #1
    1728:	e000      	b.n	172c <can_async_init+0x1c>
    172a:	2300      	movs	r3, #0
    172c:	f003 0301 	and.w	r3, r3, #1
    1730:	b2db      	uxtb	r3, r3
    1732:	2241      	movs	r2, #65	; 0x41
    1734:	490e      	ldr	r1, [pc, #56]	; (1770 <can_async_init+0x60>)
    1736:	4618      	mov	r0, r3
    1738:	4b0e      	ldr	r3, [pc, #56]	; (1774 <can_async_init+0x64>)
    173a:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	6839      	ldr	r1, [r7, #0]
    1740:	4618      	mov	r0, r3
    1742:	4b0d      	ldr	r3, [pc, #52]	; (1778 <can_async_init+0x68>)
    1744:	4798      	blx	r3
    1746:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1748:	68fb      	ldr	r3, [r7, #12]
    174a:	2b00      	cmp	r3, #0
    174c:	d001      	beq.n	1752 <can_async_init+0x42>
		return rc;
    174e:	68fb      	ldr	r3, [r7, #12]
    1750:	e009      	b.n	1766 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	4a09      	ldr	r2, [pc, #36]	; (177c <can_async_init+0x6c>)
    1756:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	4a09      	ldr	r2, [pc, #36]	; (1780 <can_async_init+0x70>)
    175c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	4a08      	ldr	r2, [pc, #32]	; (1784 <can_async_init+0x74>)
    1762:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1764:	2300      	movs	r3, #0
}
    1766:	4618      	mov	r0, r3
    1768:	3710      	adds	r7, #16
    176a:	46bd      	mov	sp, r7
    176c:	bd80      	pop	{r7, pc}
    176e:	bf00      	nop
    1770:	0000d420 	.word	0x0000d420
    1774:	000030c9 	.word	0x000030c9
    1778:	00003625 	.word	0x00003625
    177c:	00001789 	.word	0x00001789
    1780:	000017ad 	.word	0x000017ad
    1784:	000017d1 	.word	0x000017d1

00001788 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1788:	b580      	push	{r7, lr}
    178a:	b084      	sub	sp, #16
    178c:	af00      	add	r7, sp, #0
    178e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	69db      	ldr	r3, [r3, #28]
    1798:	2b00      	cmp	r3, #0
    179a:	d003      	beq.n	17a4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	69db      	ldr	r3, [r3, #28]
    17a0:	68f8      	ldr	r0, [r7, #12]
    17a2:	4798      	blx	r3
	}
}
    17a4:	bf00      	nop
    17a6:	3710      	adds	r7, #16
    17a8:	46bd      	mov	sp, r7
    17aa:	bd80      	pop	{r7, pc}

000017ac <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	b084      	sub	sp, #16
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    17b8:	68fb      	ldr	r3, [r7, #12]
    17ba:	6a1b      	ldr	r3, [r3, #32]
    17bc:	2b00      	cmp	r3, #0
    17be:	d003      	beq.n	17c8 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    17c0:	68fb      	ldr	r3, [r7, #12]
    17c2:	6a1b      	ldr	r3, [r3, #32]
    17c4:	68f8      	ldr	r0, [r7, #12]
    17c6:	4798      	blx	r3
	}
}
    17c8:	bf00      	nop
    17ca:	3710      	adds	r7, #16
    17cc:	46bd      	mov	sp, r7
    17ce:	bd80      	pop	{r7, pc}

000017d0 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b084      	sub	sp, #16
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
    17d8:	460b      	mov	r3, r1
    17da:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17e4:	2b00      	cmp	r3, #0
    17e6:	d005      	beq.n	17f4 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17ec:	78fa      	ldrb	r2, [r7, #3]
    17ee:	4611      	mov	r1, r2
    17f0:	68f8      	ldr	r0, [r7, #12]
    17f2:	4798      	blx	r3
	}
}
    17f4:	bf00      	nop
    17f6:	3710      	adds	r7, #16
    17f8:	46bd      	mov	sp, r7
    17fa:	bd80      	pop	{r7, pc}

000017fc <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	b082      	sub	sp, #8
    1800:	af00      	add	r7, sp, #0
    1802:	6078      	str	r0, [r7, #4]
    1804:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	2b00      	cmp	r3, #0
    180a:	d004      	beq.n	1816 <crc_sync_init+0x1a>
    180c:	683b      	ldr	r3, [r7, #0]
    180e:	2b00      	cmp	r3, #0
    1810:	d001      	beq.n	1816 <crc_sync_init+0x1a>
    1812:	2301      	movs	r3, #1
    1814:	e000      	b.n	1818 <crc_sync_init+0x1c>
    1816:	2300      	movs	r3, #0
    1818:	f003 0301 	and.w	r3, r3, #1
    181c:	b2db      	uxtb	r3, r3
    181e:	222b      	movs	r2, #43	; 0x2b
    1820:	4906      	ldr	r1, [pc, #24]	; (183c <crc_sync_init+0x40>)
    1822:	4618      	mov	r0, r3
    1824:	4b06      	ldr	r3, [pc, #24]	; (1840 <crc_sync_init+0x44>)
    1826:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	6839      	ldr	r1, [r7, #0]
    182c:	4618      	mov	r0, r3
    182e:	4b05      	ldr	r3, [pc, #20]	; (1844 <crc_sync_init+0x48>)
    1830:	4798      	blx	r3
    1832:	4603      	mov	r3, r0
}
    1834:	4618      	mov	r0, r3
    1836:	3708      	adds	r7, #8
    1838:	46bd      	mov	sp, r7
    183a:	bd80      	pop	{r7, pc}
    183c:	0000d43c 	.word	0x0000d43c
    1840:	000030c9 	.word	0x000030c9
    1844:	00003d25 	.word	0x00003d25

00001848 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1848:	b590      	push	{r4, r7, lr}
    184a:	b083      	sub	sp, #12
    184c:	af00      	add	r7, sp, #0
    184e:	4603      	mov	r3, r0
    1850:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1852:	4b07      	ldr	r3, [pc, #28]	; (1870 <delay_us+0x28>)
    1854:	681c      	ldr	r4, [r3, #0]
    1856:	88fb      	ldrh	r3, [r7, #6]
    1858:	4618      	mov	r0, r3
    185a:	4b06      	ldr	r3, [pc, #24]	; (1874 <delay_us+0x2c>)
    185c:	4798      	blx	r3
    185e:	4603      	mov	r3, r0
    1860:	4619      	mov	r1, r3
    1862:	4620      	mov	r0, r4
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <delay_us+0x30>)
    1866:	4798      	blx	r3
}
    1868:	bf00      	nop
    186a:	370c      	adds	r7, #12
    186c:	46bd      	mov	sp, r7
    186e:	bd90      	pop	{r4, r7, pc}
    1870:	20000548 	.word	0x20000548
    1874:	00003a7d 	.word	0x00003a7d
    1878:	00003c11 	.word	0x00003c11

0000187c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    187c:	b590      	push	{r4, r7, lr}
    187e:	b083      	sub	sp, #12
    1880:	af00      	add	r7, sp, #0
    1882:	4603      	mov	r3, r0
    1884:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1886:	4b07      	ldr	r3, [pc, #28]	; (18a4 <delay_ms+0x28>)
    1888:	681c      	ldr	r4, [r3, #0]
    188a:	88fb      	ldrh	r3, [r7, #6]
    188c:	4618      	mov	r0, r3
    188e:	4b06      	ldr	r3, [pc, #24]	; (18a8 <delay_ms+0x2c>)
    1890:	4798      	blx	r3
    1892:	4603      	mov	r3, r0
    1894:	4619      	mov	r1, r3
    1896:	4620      	mov	r0, r4
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <delay_ms+0x30>)
    189a:	4798      	blx	r3
}
    189c:	bf00      	nop
    189e:	370c      	adds	r7, #12
    18a0:	46bd      	mov	sp, r7
    18a2:	bd90      	pop	{r4, r7, pc}
    18a4:	20000548 	.word	0x20000548
    18a8:	00003be9 	.word	0x00003be9
    18ac:	00003c11 	.word	0x00003c11

000018b0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    18b0:	b580      	push	{r7, lr}
    18b2:	af00      	add	r7, sp, #0
	return _event_system_init();
    18b4:	4b02      	ldr	r3, [pc, #8]	; (18c0 <event_system_init+0x10>)
    18b6:	4798      	blx	r3
    18b8:	4603      	mov	r3, r0
}
    18ba:	4618      	mov	r0, r3
    18bc:	bd80      	pop	{r7, pc}
    18be:	bf00      	nop
    18c0:	00004359 	.word	0x00004359

000018c4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b082      	sub	sp, #8
    18c8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    18ca:	2300      	movs	r3, #0
    18cc:	80fb      	strh	r3, [r7, #6]
    18ce:	e00e      	b.n	18ee <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    18d0:	88fb      	ldrh	r3, [r7, #6]
    18d2:	4a0c      	ldr	r2, [pc, #48]	; (1904 <ext_irq_init+0x40>)
    18d4:	00db      	lsls	r3, r3, #3
    18d6:	4413      	add	r3, r2
    18d8:	f04f 32ff 	mov.w	r2, #4294967295
    18dc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    18de:	88fb      	ldrh	r3, [r7, #6]
    18e0:	4a08      	ldr	r2, [pc, #32]	; (1904 <ext_irq_init+0x40>)
    18e2:	2100      	movs	r1, #0
    18e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    18e8:	88fb      	ldrh	r3, [r7, #6]
    18ea:	3301      	adds	r3, #1
    18ec:	80fb      	strh	r3, [r7, #6]
    18ee:	88fb      	ldrh	r3, [r7, #6]
    18f0:	2b03      	cmp	r3, #3
    18f2:	d9ed      	bls.n	18d0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    18f4:	4804      	ldr	r0, [pc, #16]	; (1908 <ext_irq_init+0x44>)
    18f6:	4b05      	ldr	r3, [pc, #20]	; (190c <ext_irq_init+0x48>)
    18f8:	4798      	blx	r3
    18fa:	4603      	mov	r3, r0
}
    18fc:	4618      	mov	r0, r3
    18fe:	3708      	adds	r7, #8
    1900:	46bd      	mov	sp, r7
    1902:	bd80      	pop	{r7, pc}
    1904:	2000054c 	.word	0x2000054c
    1908:	00001911 	.word	0x00001911
    190c:	0000402d 	.word	0x0000402d

00001910 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1910:	b580      	push	{r7, lr}
    1912:	b084      	sub	sp, #16
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1918:	2300      	movs	r3, #0
    191a:	73fb      	strb	r3, [r7, #15]
    191c:	2304      	movs	r3, #4
    191e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1920:	e02a      	b.n	1978 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1922:	7bba      	ldrb	r2, [r7, #14]
    1924:	7bfb      	ldrb	r3, [r7, #15]
    1926:	4413      	add	r3, r2
    1928:	105b      	asrs	r3, r3, #1
    192a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    192c:	7b7b      	ldrb	r3, [r7, #13]
    192e:	2b03      	cmp	r3, #3
    1930:	d827      	bhi.n	1982 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1932:	7b7b      	ldrb	r3, [r7, #13]
    1934:	4a16      	ldr	r2, [pc, #88]	; (1990 <process_ext_irq+0x80>)
    1936:	00db      	lsls	r3, r3, #3
    1938:	4413      	add	r3, r2
    193a:	685a      	ldr	r2, [r3, #4]
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	429a      	cmp	r2, r3
    1940:	d10b      	bne.n	195a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1942:	7b7b      	ldrb	r3, [r7, #13]
    1944:	4a12      	ldr	r2, [pc, #72]	; (1990 <process_ext_irq+0x80>)
    1946:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    194a:	2b00      	cmp	r3, #0
    194c:	d01b      	beq.n	1986 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    194e:	7b7b      	ldrb	r3, [r7, #13]
    1950:	4a0f      	ldr	r2, [pc, #60]	; (1990 <process_ext_irq+0x80>)
    1952:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1956:	4798      	blx	r3
			}
			return;
    1958:	e015      	b.n	1986 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    195a:	7b7b      	ldrb	r3, [r7, #13]
    195c:	4a0c      	ldr	r2, [pc, #48]	; (1990 <process_ext_irq+0x80>)
    195e:	00db      	lsls	r3, r3, #3
    1960:	4413      	add	r3, r2
    1962:	685a      	ldr	r2, [r3, #4]
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	429a      	cmp	r2, r3
    1968:	d203      	bcs.n	1972 <process_ext_irq+0x62>
			lower = middle + 1;
    196a:	7b7b      	ldrb	r3, [r7, #13]
    196c:	3301      	adds	r3, #1
    196e:	73fb      	strb	r3, [r7, #15]
    1970:	e002      	b.n	1978 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1972:	7b7b      	ldrb	r3, [r7, #13]
    1974:	3b01      	subs	r3, #1
    1976:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1978:	7bba      	ldrb	r2, [r7, #14]
    197a:	7bfb      	ldrb	r3, [r7, #15]
    197c:	429a      	cmp	r2, r3
    197e:	d2d0      	bcs.n	1922 <process_ext_irq+0x12>
    1980:	e002      	b.n	1988 <process_ext_irq+0x78>
			return;
    1982:	bf00      	nop
    1984:	e000      	b.n	1988 <process_ext_irq+0x78>
			return;
    1986:	bf00      	nop
		}
	}
}
    1988:	3710      	adds	r7, #16
    198a:	46bd      	mov	sp, r7
    198c:	bd80      	pop	{r7, pc}
    198e:	bf00      	nop
    1990:	2000054c 	.word	0x2000054c

00001994 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1994:	b580      	push	{r7, lr}
    1996:	b084      	sub	sp, #16
    1998:	af00      	add	r7, sp, #0
    199a:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	885b      	ldrh	r3, [r3, #2]
    19a4:	b29b      	uxth	r3, r3
    19a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    19aa:	2b00      	cmp	r3, #0
    19ac:	d107      	bne.n	19be <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    19b2:	2b00      	cmp	r3, #0
    19b4:	d003      	beq.n	19be <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    19b6:	68fb      	ldr	r3, [r7, #12]
    19b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    19ba:	68f8      	ldr	r0, [r7, #12]
    19bc:	4798      	blx	r3
		}
	}
}
    19be:	bf00      	nop
    19c0:	3710      	adds	r7, #16
    19c2:	46bd      	mov	sp, r7
    19c4:	bd80      	pop	{r7, pc}

000019c6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    19c6:	b580      	push	{r7, lr}
    19c8:	b084      	sub	sp, #16
    19ca:	af00      	add	r7, sp, #0
    19cc:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	885b      	ldrh	r3, [r3, #2]
    19d6:	b29b      	uxth	r3, r3
    19d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    19dc:	2b00      	cmp	r3, #0
    19de:	d107      	bne.n	19f0 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    19e4:	2b00      	cmp	r3, #0
    19e6:	d003      	beq.n	19f0 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    19e8:	68fb      	ldr	r3, [r7, #12]
    19ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    19ec:	68f8      	ldr	r0, [r7, #12]
    19ee:	4798      	blx	r3
		}
	}
}
    19f0:	bf00      	nop
    19f2:	3710      	adds	r7, #16
    19f4:	46bd      	mov	sp, r7
    19f6:	bd80      	pop	{r7, pc}

000019f8 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b084      	sub	sp, #16
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	885b      	ldrh	r3, [r3, #2]
    1a0a:	b29b      	uxth	r3, r3
    1a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1a10:	2b00      	cmp	r3, #0
    1a12:	d108      	bne.n	1a26 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d004      	beq.n	1a26 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1a1c:	68fb      	ldr	r3, [r7, #12]
    1a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1a20:	6839      	ldr	r1, [r7, #0]
    1a22:	68f8      	ldr	r0, [r7, #12]
    1a24:	4798      	blx	r3
		}
	}
}
    1a26:	bf00      	nop
    1a28:	3710      	adds	r7, #16
    1a2a:	46bd      	mov	sp, r7
    1a2c:	bd80      	pop	{r7, pc}
	...

00001a30 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	b08a      	sub	sp, #40	; 0x28
    1a34:	af00      	add	r7, sp, #0
    1a36:	60f8      	str	r0, [r7, #12]
    1a38:	60b9      	str	r1, [r7, #8]
    1a3a:	4613      	mov	r3, r2
    1a3c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1a3e:	68fb      	ldr	r3, [r7, #12]
    1a40:	3b28      	subs	r3, #40	; 0x28
    1a42:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1a48:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1a4a:	88fb      	ldrh	r3, [r7, #6]
    1a4c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1a4e:	f248 0301 	movw	r3, #32769	; 0x8001
    1a52:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1a54:	68bb      	ldr	r3, [r7, #8]
    1a56:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a5a:	f107 0214 	add.w	r2, r7, #20
    1a5e:	4611      	mov	r1, r2
    1a60:	4618      	mov	r0, r3
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <i2c_m_async_read+0x4c>)
    1a64:	4798      	blx	r3
    1a66:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1a68:	6a3b      	ldr	r3, [r7, #32]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d001      	beq.n	1a72 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1a6e:	6a3b      	ldr	r3, [r7, #32]
    1a70:	e000      	b.n	1a74 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1a72:	88fb      	ldrh	r3, [r7, #6]
}
    1a74:	4618      	mov	r0, r3
    1a76:	3728      	adds	r7, #40	; 0x28
    1a78:	46bd      	mov	sp, r7
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	0000614d 	.word	0x0000614d

00001a80 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b08a      	sub	sp, #40	; 0x28
    1a84:	af00      	add	r7, sp, #0
    1a86:	60f8      	str	r0, [r7, #12]
    1a88:	60b9      	str	r1, [r7, #8]
    1a8a:	4613      	mov	r3, r2
    1a8c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	3b28      	subs	r3, #40	; 0x28
    1a92:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1a98:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1a9a:	88fb      	ldrh	r3, [r7, #6]
    1a9c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1aa2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1aa4:	68bb      	ldr	r3, [r7, #8]
    1aa6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1aaa:	f107 0214 	add.w	r2, r7, #20
    1aae:	4611      	mov	r1, r2
    1ab0:	4618      	mov	r0, r3
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <i2c_m_async_write+0x4c>)
    1ab4:	4798      	blx	r3
    1ab6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1ab8:	6a3b      	ldr	r3, [r7, #32]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d001      	beq.n	1ac2 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1abe:	6a3b      	ldr	r3, [r7, #32]
    1ac0:	e000      	b.n	1ac4 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1ac2:	88fb      	ldrh	r3, [r7, #6]
}
    1ac4:	4618      	mov	r0, r3
    1ac6:	3728      	adds	r7, #40	; 0x28
    1ac8:	46bd      	mov	sp, r7
    1aca:	bd80      	pop	{r7, pc}
    1acc:	0000614d 	.word	0x0000614d

00001ad0 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b084      	sub	sp, #16
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
    1ad8:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	2b00      	cmp	r3, #0
    1ade:	bf14      	ite	ne
    1ae0:	2301      	movne	r3, #1
    1ae2:	2300      	moveq	r3, #0
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	2289      	movs	r2, #137	; 0x89
    1ae8:	4915      	ldr	r1, [pc, #84]	; (1b40 <i2c_m_async_init+0x70>)
    1aea:	4618      	mov	r0, r3
    1aec:	4b15      	ldr	r3, [pc, #84]	; (1b44 <i2c_m_async_init+0x74>)
    1aee:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	6839      	ldr	r1, [r7, #0]
    1af4:	4618      	mov	r0, r3
    1af6:	4b14      	ldr	r3, [pc, #80]	; (1b48 <i2c_m_async_init+0x78>)
    1af8:	4798      	blx	r3
    1afa:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1afc:	68fb      	ldr	r3, [r7, #12]
    1afe:	2b00      	cmp	r3, #0
    1b00:	d001      	beq.n	1b06 <i2c_m_async_init+0x36>
		return init_status;
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	e018      	b.n	1b38 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	4a10      	ldr	r2, [pc, #64]	; (1b4c <i2c_m_async_init+0x7c>)
    1b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	4a10      	ldr	r2, [pc, #64]	; (1b50 <i2c_m_async_init+0x80>)
    1b10:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	4a0f      	ldr	r2, [pc, #60]	; (1b54 <i2c_m_async_init+0x84>)
    1b16:	2101      	movs	r1, #1
    1b18:	4618      	mov	r0, r3
    1b1a:	4b0f      	ldr	r3, [pc, #60]	; (1b58 <i2c_m_async_init+0x88>)
    1b1c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	4a0e      	ldr	r2, [pc, #56]	; (1b5c <i2c_m_async_init+0x8c>)
    1b22:	2102      	movs	r1, #2
    1b24:	4618      	mov	r0, r3
    1b26:	4b0c      	ldr	r3, [pc, #48]	; (1b58 <i2c_m_async_init+0x88>)
    1b28:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	4a0c      	ldr	r2, [pc, #48]	; (1b60 <i2c_m_async_init+0x90>)
    1b2e:	2100      	movs	r1, #0
    1b30:	4618      	mov	r0, r3
    1b32:	4b09      	ldr	r3, [pc, #36]	; (1b58 <i2c_m_async_init+0x88>)
    1b34:	4798      	blx	r3

	return ERR_NONE;
    1b36:	2300      	movs	r3, #0
}
    1b38:	4618      	mov	r0, r3
    1b3a:	3710      	adds	r7, #16
    1b3c:	46bd      	mov	sp, r7
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	0000d458 	.word	0x0000d458
    1b44:	000030c9 	.word	0x000030c9
    1b48:	00005f9d 	.word	0x00005f9d
    1b4c:	00001a31 	.word	0x00001a31
    1b50:	00001a81 	.word	0x00001a81
    1b54:	00001995 	.word	0x00001995
    1b58:	00006221 	.word	0x00006221
    1b5c:	000019c7 	.word	0x000019c7
    1b60:	000019f9 	.word	0x000019f9

00001b64 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1b64:	b580      	push	{r7, lr}
    1b66:	b084      	sub	sp, #16
    1b68:	af00      	add	r7, sp, #0
    1b6a:	60f8      	str	r0, [r7, #12]
    1b6c:	60b9      	str	r1, [r7, #8]
    1b6e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d004      	beq.n	1b80 <pwm_init+0x1c>
    1b76:	68bb      	ldr	r3, [r7, #8]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d001      	beq.n	1b80 <pwm_init+0x1c>
    1b7c:	2301      	movs	r3, #1
    1b7e:	e000      	b.n	1b82 <pwm_init+0x1e>
    1b80:	2300      	movs	r3, #0
    1b82:	f003 0301 	and.w	r3, r3, #1
    1b86:	b2db      	uxtb	r3, r3
    1b88:	2233      	movs	r2, #51	; 0x33
    1b8a:	490a      	ldr	r1, [pc, #40]	; (1bb4 <pwm_init+0x50>)
    1b8c:	4618      	mov	r0, r3
    1b8e:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <pwm_init+0x54>)
    1b90:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1b92:	68fb      	ldr	r3, [r7, #12]
    1b94:	68b9      	ldr	r1, [r7, #8]
    1b96:	4618      	mov	r0, r3
    1b98:	4b08      	ldr	r3, [pc, #32]	; (1bbc <pwm_init+0x58>)
    1b9a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1b9c:	68fb      	ldr	r3, [r7, #12]
    1b9e:	4a08      	ldr	r2, [pc, #32]	; (1bc0 <pwm_init+0x5c>)
    1ba0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1ba2:	68fb      	ldr	r3, [r7, #12]
    1ba4:	4a07      	ldr	r2, [pc, #28]	; (1bc4 <pwm_init+0x60>)
    1ba6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1ba8:	2300      	movs	r3, #0
}
    1baa:	4618      	mov	r0, r3
    1bac:	3710      	adds	r7, #16
    1bae:	46bd      	mov	sp, r7
    1bb0:	bd80      	pop	{r7, pc}
    1bb2:	bf00      	nop
    1bb4:	0000d478 	.word	0x0000d478
    1bb8:	000030c9 	.word	0x000030c9
    1bbc:	00007361 	.word	0x00007361
    1bc0:	00001c1d 	.word	0x00001c1d
    1bc4:	00001c41 	.word	0x00001c41

00001bc8 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	bf14      	ite	ne
    1bd6:	2301      	movne	r3, #1
    1bd8:	2300      	moveq	r3, #0
    1bda:	b2db      	uxtb	r3, r3
    1bdc:	224a      	movs	r2, #74	; 0x4a
    1bde:	490b      	ldr	r1, [pc, #44]	; (1c0c <pwm_enable+0x44>)
    1be0:	4618      	mov	r0, r3
    1be2:	4b0b      	ldr	r3, [pc, #44]	; (1c10 <pwm_enable+0x48>)
    1be4:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	4618      	mov	r0, r3
    1bea:	4b0a      	ldr	r3, [pc, #40]	; (1c14 <pwm_enable+0x4c>)
    1bec:	4798      	blx	r3
    1bee:	4603      	mov	r3, r0
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d002      	beq.n	1bfa <pwm_enable+0x32>
		return ERR_DENIED;
    1bf4:	f06f 0310 	mvn.w	r3, #16
    1bf8:	e004      	b.n	1c04 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	4618      	mov	r0, r3
    1bfe:	4b06      	ldr	r3, [pc, #24]	; (1c18 <pwm_enable+0x50>)
    1c00:	4798      	blx	r3

	return ERR_NONE;
    1c02:	2300      	movs	r3, #0
}
    1c04:	4618      	mov	r0, r3
    1c06:	3708      	adds	r7, #8
    1c08:	46bd      	mov	sp, r7
    1c0a:	bd80      	pop	{r7, pc}
    1c0c:	0000d478 	.word	0x0000d478
    1c10:	000030c9 	.word	0x000030c9
    1c14:	000075fd 	.word	0x000075fd
    1c18:	0000759d 	.word	0x0000759d

00001c1c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1c1c:	b580      	push	{r7, lr}
    1c1e:	b084      	sub	sp, #16
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	695b      	ldr	r3, [r3, #20]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d003      	beq.n	1c38 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1c30:	68fb      	ldr	r3, [r7, #12]
    1c32:	695b      	ldr	r3, [r3, #20]
    1c34:	68f8      	ldr	r0, [r7, #12]
    1c36:	4798      	blx	r3
	}
}
    1c38:	bf00      	nop
    1c3a:	3710      	adds	r7, #16
    1c3c:	46bd      	mov	sp, r7
    1c3e:	bd80      	pop	{r7, pc}

00001c40 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1c40:	b580      	push	{r7, lr}
    1c42:	b084      	sub	sp, #16
    1c44:	af00      	add	r7, sp, #0
    1c46:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1c4c:	68fb      	ldr	r3, [r7, #12]
    1c4e:	699b      	ldr	r3, [r3, #24]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d003      	beq.n	1c5c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1c54:	68fb      	ldr	r3, [r7, #12]
    1c56:	699b      	ldr	r3, [r3, #24]
    1c58:	68f8      	ldr	r0, [r7, #12]
    1c5a:	4798      	blx	r3
	}
}
    1c5c:	bf00      	nop
    1c5e:	3710      	adds	r7, #16
    1c60:	46bd      	mov	sp, r7
    1c62:	bd80      	pop	{r7, pc}

00001c64 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
    1c6c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d004      	beq.n	1c7e <qspi_sync_init+0x1a>
    1c74:	683b      	ldr	r3, [r7, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d001      	beq.n	1c7e <qspi_sync_init+0x1a>
    1c7a:	2301      	movs	r3, #1
    1c7c:	e000      	b.n	1c80 <qspi_sync_init+0x1c>
    1c7e:	2300      	movs	r3, #0
    1c80:	f003 0301 	and.w	r3, r3, #1
    1c84:	b2db      	uxtb	r3, r3
    1c86:	2231      	movs	r2, #49	; 0x31
    1c88:	4906      	ldr	r1, [pc, #24]	; (1ca4 <qspi_sync_init+0x40>)
    1c8a:	4618      	mov	r0, r3
    1c8c:	4b06      	ldr	r3, [pc, #24]	; (1ca8 <qspi_sync_init+0x44>)
    1c8e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1c90:	687b      	ldr	r3, [r7, #4]
    1c92:	6839      	ldr	r1, [r7, #0]
    1c94:	4618      	mov	r0, r3
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <qspi_sync_init+0x48>)
    1c98:	4798      	blx	r3
    1c9a:	4603      	mov	r3, r0
}
    1c9c:	4618      	mov	r0, r3
    1c9e:	3708      	adds	r7, #8
    1ca0:	46bd      	mov	sp, r7
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	0000d490 	.word	0x0000d490
    1ca8:	000030c9 	.word	0x000030c9
    1cac:	00004ef1 	.word	0x00004ef1

00001cb0 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b082      	sub	sp, #8
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	bf14      	ite	ne
    1cbe:	2301      	movne	r3, #1
    1cc0:	2300      	moveq	r3, #0
    1cc2:	b2db      	uxtb	r3, r3
    1cc4:	223f      	movs	r2, #63	; 0x3f
    1cc6:	4906      	ldr	r1, [pc, #24]	; (1ce0 <qspi_sync_enable+0x30>)
    1cc8:	4618      	mov	r0, r3
    1cca:	4b06      	ldr	r3, [pc, #24]	; (1ce4 <qspi_sync_enable+0x34>)
    1ccc:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	4618      	mov	r0, r3
    1cd2:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <qspi_sync_enable+0x38>)
    1cd4:	4798      	blx	r3
    1cd6:	4603      	mov	r3, r0
}
    1cd8:	4618      	mov	r0, r3
    1cda:	3708      	adds	r7, #8
    1cdc:	46bd      	mov	sp, r7
    1cde:	bd80      	pop	{r7, pc}
    1ce0:	0000d490 	.word	0x0000d490
    1ce4:	000030c9 	.word	0x000030c9
    1ce8:	00004f65 	.word	0x00004f65

00001cec <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	b082      	sub	sp, #8
    1cf0:	af00      	add	r7, sp, #0
    1cf2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	bf14      	ite	ne
    1cfa:	2301      	movne	r3, #1
    1cfc:	2300      	moveq	r3, #0
    1cfe:	b2db      	uxtb	r3, r3
    1d00:	2246      	movs	r2, #70	; 0x46
    1d02:	4906      	ldr	r1, [pc, #24]	; (1d1c <qspi_sync_disable+0x30>)
    1d04:	4618      	mov	r0, r3
    1d06:	4b06      	ldr	r3, [pc, #24]	; (1d20 <qspi_sync_disable+0x34>)
    1d08:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    1d0a:	687b      	ldr	r3, [r7, #4]
    1d0c:	4618      	mov	r0, r3
    1d0e:	4b05      	ldr	r3, [pc, #20]	; (1d24 <qspi_sync_disable+0x38>)
    1d10:	4798      	blx	r3
    1d12:	4603      	mov	r3, r0
}
    1d14:	4618      	mov	r0, r3
    1d16:	3708      	adds	r7, #8
    1d18:	46bd      	mov	sp, r7
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	0000d490 	.word	0x0000d490
    1d20:	000030c9 	.word	0x000030c9
    1d24:	00004f89 	.word	0x00004f89

00001d28 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	b082      	sub	sp, #8
    1d2c:	af00      	add	r7, sp, #0
    1d2e:	6078      	str	r0, [r7, #4]
    1d30:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d004      	beq.n	1d42 <qspi_sync_serial_run_command+0x1a>
    1d38:	683b      	ldr	r3, [r7, #0]
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d001      	beq.n	1d42 <qspi_sync_serial_run_command+0x1a>
    1d3e:	2301      	movs	r3, #1
    1d40:	e000      	b.n	1d44 <qspi_sync_serial_run_command+0x1c>
    1d42:	2300      	movs	r3, #0
    1d44:	f003 0301 	and.w	r3, r3, #1
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	224d      	movs	r2, #77	; 0x4d
    1d4c:	4906      	ldr	r1, [pc, #24]	; (1d68 <qspi_sync_serial_run_command+0x40>)
    1d4e:	4618      	mov	r0, r3
    1d50:	4b06      	ldr	r3, [pc, #24]	; (1d6c <qspi_sync_serial_run_command+0x44>)
    1d52:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	6839      	ldr	r1, [r7, #0]
    1d58:	4618      	mov	r0, r3
    1d5a:	4b05      	ldr	r3, [pc, #20]	; (1d70 <qspi_sync_serial_run_command+0x48>)
    1d5c:	4798      	blx	r3
    1d5e:	4603      	mov	r3, r0
}
    1d60:	4618      	mov	r0, r3
    1d62:	3708      	adds	r7, #8
    1d64:	46bd      	mov	sp, r7
    1d66:	bd80      	pop	{r7, pc}
    1d68:	0000d490 	.word	0x0000d490
    1d6c:	000030c9 	.word	0x000030c9
    1d70:	000050d5 	.word	0x000050d5

00001d74 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	b084      	sub	sp, #16
    1d78:	af00      	add	r7, sp, #0
    1d7a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	3b04      	subs	r3, #4
    1d80:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    1d82:	687b      	ldr	r3, [r7, #4]
    1d84:	791b      	ldrb	r3, [r3, #4]
    1d86:	2b01      	cmp	r3, #1
    1d88:	d80e      	bhi.n	1da8 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d8e:	68fb      	ldr	r3, [r7, #12]
    1d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d92:	1c58      	adds	r0, r3, #1
    1d94:	68f9      	ldr	r1, [r7, #12]
    1d96:	6448      	str	r0, [r1, #68]	; 0x44
    1d98:	4413      	add	r3, r2
    1d9a:	781b      	ldrb	r3, [r3, #0]
    1d9c:	b29b      	uxth	r3, r3
    1d9e:	4619      	mov	r1, r3
    1da0:	6878      	ldr	r0, [r7, #4]
    1da2:	4b11      	ldr	r3, [pc, #68]	; (1de8 <_spi_dev_tx+0x74>)
    1da4:	4798      	blx	r3
    1da6:	e00d      	b.n	1dc4 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1dac:	68fb      	ldr	r3, [r7, #12]
    1dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1db0:	1c58      	adds	r0, r3, #1
    1db2:	68f9      	ldr	r1, [r7, #12]
    1db4:	6448      	str	r0, [r1, #68]	; 0x44
    1db6:	005b      	lsls	r3, r3, #1
    1db8:	4413      	add	r3, r2
    1dba:	881b      	ldrh	r3, [r3, #0]
    1dbc:	4619      	mov	r1, r3
    1dbe:	6878      	ldr	r0, [r7, #4]
    1dc0:	4b09      	ldr	r3, [pc, #36]	; (1de8 <_spi_dev_tx+0x74>)
    1dc2:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1dc8:	68fb      	ldr	r3, [r7, #12]
    1dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1dcc:	429a      	cmp	r2, r3
    1dce:	d107      	bne.n	1de0 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    1dd0:	2100      	movs	r1, #0
    1dd2:	6878      	ldr	r0, [r7, #4]
    1dd4:	4b05      	ldr	r3, [pc, #20]	; (1dec <_spi_dev_tx+0x78>)
    1dd6:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1dd8:	2101      	movs	r1, #1
    1dda:	6878      	ldr	r0, [r7, #4]
    1ddc:	4b04      	ldr	r3, [pc, #16]	; (1df0 <_spi_dev_tx+0x7c>)
    1dde:	4798      	blx	r3
	}
}
    1de0:	bf00      	nop
    1de2:	3710      	adds	r7, #16
    1de4:	46bd      	mov	sp, r7
    1de6:	bd80      	pop	{r7, pc}
    1de8:	00006c11 	.word	0x00006c11
    1dec:	00006ad5 	.word	0x00006ad5
    1df0:	00006ba9 	.word	0x00006ba9

00001df4 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    1df4:	b590      	push	{r4, r7, lr}
    1df6:	b085      	sub	sp, #20
    1df8:	af00      	add	r7, sp, #0
    1dfa:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	3b04      	subs	r3, #4
    1e00:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    1e02:	68fb      	ldr	r3, [r7, #12]
    1e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e06:	2b00      	cmp	r3, #0
    1e08:	d021      	beq.n	1e4e <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	791b      	ldrb	r3, [r3, #4]
    1e0e:	2b01      	cmp	r3, #1
    1e10:	d80e      	bhi.n	1e30 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1e12:	68fb      	ldr	r3, [r7, #12]
    1e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1e16:	68fb      	ldr	r3, [r7, #12]
    1e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e1a:	1c58      	adds	r0, r3, #1
    1e1c:	68f9      	ldr	r1, [r7, #12]
    1e1e:	6448      	str	r0, [r1, #68]	; 0x44
    1e20:	18d4      	adds	r4, r2, r3
    1e22:	6878      	ldr	r0, [r7, #4]
    1e24:	4b2e      	ldr	r3, [pc, #184]	; (1ee0 <_spi_dev_rx+0xec>)
    1e26:	4798      	blx	r3
    1e28:	4603      	mov	r3, r0
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	7023      	strb	r3, [r4, #0]
    1e2e:	e016      	b.n	1e5e <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1e30:	68fb      	ldr	r3, [r7, #12]
    1e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1e34:	68fb      	ldr	r3, [r7, #12]
    1e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e38:	1c58      	adds	r0, r3, #1
    1e3a:	68f9      	ldr	r1, [r7, #12]
    1e3c:	6448      	str	r0, [r1, #68]	; 0x44
    1e3e:	005b      	lsls	r3, r3, #1
    1e40:	18d4      	adds	r4, r2, r3
    1e42:	6878      	ldr	r0, [r7, #4]
    1e44:	4b26      	ldr	r3, [pc, #152]	; (1ee0 <_spi_dev_rx+0xec>)
    1e46:	4798      	blx	r3
    1e48:	4603      	mov	r3, r0
    1e4a:	8023      	strh	r3, [r4, #0]
    1e4c:	e007      	b.n	1e5e <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    1e4e:	6878      	ldr	r0, [r7, #4]
    1e50:	4b23      	ldr	r3, [pc, #140]	; (1ee0 <_spi_dev_rx+0xec>)
    1e52:	4798      	blx	r3
		spi->xfercnt++;
    1e54:	68fb      	ldr	r3, [r7, #12]
    1e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e58:	1c5a      	adds	r2, r3, #1
    1e5a:	68fb      	ldr	r3, [r7, #12]
    1e5c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1e62:	68fb      	ldr	r3, [r7, #12]
    1e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1e66:	429a      	cmp	r2, r3
    1e68:	d226      	bcs.n	1eb8 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    1e6a:	68fb      	ldr	r3, [r7, #12]
    1e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d01b      	beq.n	1eaa <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	791b      	ldrb	r3, [r3, #4]
    1e76:	2b01      	cmp	r3, #1
    1e78:	d80b      	bhi.n	1e92 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1e7a:	68fb      	ldr	r3, [r7, #12]
    1e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e7e:	68fb      	ldr	r3, [r7, #12]
    1e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e82:	4413      	add	r3, r2
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	b29b      	uxth	r3, r3
    1e88:	4619      	mov	r1, r3
    1e8a:	6878      	ldr	r0, [r7, #4]
    1e8c:	4b15      	ldr	r3, [pc, #84]	; (1ee4 <_spi_dev_rx+0xf0>)
    1e8e:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    1e90:	e022      	b.n	1ed8 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1e92:	68fb      	ldr	r3, [r7, #12]
    1e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e96:	68fb      	ldr	r3, [r7, #12]
    1e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e9a:	005b      	lsls	r3, r3, #1
    1e9c:	4413      	add	r3, r2
    1e9e:	881b      	ldrh	r3, [r3, #0]
    1ea0:	4619      	mov	r1, r3
    1ea2:	6878      	ldr	r0, [r7, #4]
    1ea4:	4b0f      	ldr	r3, [pc, #60]	; (1ee4 <_spi_dev_rx+0xf0>)
    1ea6:	4798      	blx	r3
}
    1ea8:	e016      	b.n	1ed8 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1eaa:	687b      	ldr	r3, [r7, #4]
    1eac:	88db      	ldrh	r3, [r3, #6]
    1eae:	4619      	mov	r1, r3
    1eb0:	6878      	ldr	r0, [r7, #4]
    1eb2:	4b0c      	ldr	r3, [pc, #48]	; (1ee4 <_spi_dev_rx+0xf0>)
    1eb4:	4798      	blx	r3
}
    1eb6:	e00f      	b.n	1ed8 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    1eb8:	2100      	movs	r1, #0
    1eba:	6878      	ldr	r0, [r7, #4]
    1ebc:	4b0a      	ldr	r3, [pc, #40]	; (1ee8 <_spi_dev_rx+0xf4>)
    1ebe:	4798      	blx	r3
		spi->stat = 0;
    1ec0:	68fb      	ldr	r3, [r7, #12]
    1ec2:	2200      	movs	r2, #0
    1ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    1ec8:	68fb      	ldr	r3, [r7, #12]
    1eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d003      	beq.n	1ed8 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    1ed0:	68fb      	ldr	r3, [r7, #12]
    1ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ed4:	68f8      	ldr	r0, [r7, #12]
    1ed6:	4798      	blx	r3
}
    1ed8:	bf00      	nop
    1eda:	3714      	adds	r7, #20
    1edc:	46bd      	mov	sp, r7
    1ede:	bd90      	pop	{r4, r7, pc}
    1ee0:	00006c69 	.word	0x00006c69
    1ee4:	00006c11 	.word	0x00006c11
    1ee8:	00006b39 	.word	0x00006b39

00001eec <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b084      	sub	sp, #16
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	3b04      	subs	r3, #4
    1ef8:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1efe:	68fb      	ldr	r3, [r7, #12]
    1f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f02:	429a      	cmp	r2, r3
    1f04:	d30f      	bcc.n	1f26 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    1f06:	2100      	movs	r1, #0
    1f08:	6878      	ldr	r0, [r7, #4]
    1f0a:	4b09      	ldr	r3, [pc, #36]	; (1f30 <_spi_dev_complete+0x44>)
    1f0c:	4798      	blx	r3
		spi->stat = 0;
    1f0e:	68fb      	ldr	r3, [r7, #12]
    1f10:	2200      	movs	r2, #0
    1f12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d003      	beq.n	1f26 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    1f1e:	68fb      	ldr	r3, [r7, #12]
    1f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1f22:	68f8      	ldr	r0, [r7, #12]
    1f24:	4798      	blx	r3
		}
	}
}
    1f26:	bf00      	nop
    1f28:	3710      	adds	r7, #16
    1f2a:	46bd      	mov	sp, r7
    1f2c:	bd80      	pop	{r7, pc}
    1f2e:	bf00      	nop
    1f30:	00006ba9 	.word	0x00006ba9

00001f34 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	b084      	sub	sp, #16
    1f38:	af00      	add	r7, sp, #0
    1f3a:	6078      	str	r0, [r7, #4]
    1f3c:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	3b04      	subs	r3, #4
    1f42:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    1f44:	2100      	movs	r1, #0
    1f46:	6878      	ldr	r0, [r7, #4]
    1f48:	4b0d      	ldr	r3, [pc, #52]	; (1f80 <_spi_dev_error+0x4c>)
    1f4a:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    1f4c:	2100      	movs	r1, #0
    1f4e:	6878      	ldr	r0, [r7, #4]
    1f50:	4b0c      	ldr	r3, [pc, #48]	; (1f84 <_spi_dev_error+0x50>)
    1f52:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    1f54:	2100      	movs	r1, #0
    1f56:	6878      	ldr	r0, [r7, #4]
    1f58:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <_spi_dev_error+0x54>)
    1f5a:	4798      	blx	r3
	spi->stat = 0;
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	2200      	movs	r2, #0
    1f60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    1f64:	68fb      	ldr	r3, [r7, #12]
    1f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d004      	beq.n	1f76 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f70:	6839      	ldr	r1, [r7, #0]
    1f72:	68f8      	ldr	r0, [r7, #12]
    1f74:	4798      	blx	r3
	}
}
    1f76:	bf00      	nop
    1f78:	3710      	adds	r7, #16
    1f7a:	46bd      	mov	sp, r7
    1f7c:	bd80      	pop	{r7, pc}
    1f7e:	bf00      	nop
    1f80:	00006ad5 	.word	0x00006ad5
    1f84:	00006b39 	.word	0x00006b39
    1f88:	00006ba9 	.word	0x00006ba9

00001f8c <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b084      	sub	sp, #16
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
    1f94:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1f96:	2300      	movs	r3, #0
    1f98:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d004      	beq.n	1faa <spi_m_async_init+0x1e>
    1fa0:	683b      	ldr	r3, [r7, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d001      	beq.n	1faa <spi_m_async_init+0x1e>
    1fa6:	2301      	movs	r3, #1
    1fa8:	e000      	b.n	1fac <spi_m_async_init+0x20>
    1faa:	2300      	movs	r3, #0
    1fac:	f003 0301 	and.w	r3, r3, #1
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	22a5      	movs	r2, #165	; 0xa5
    1fb4:	491c      	ldr	r1, [pc, #112]	; (2028 <spi_m_async_init+0x9c>)
    1fb6:	4618      	mov	r0, r3
    1fb8:	4b1c      	ldr	r3, [pc, #112]	; (202c <spi_m_async_init+0xa0>)
    1fba:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	683a      	ldr	r2, [r7, #0]
    1fc0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	3304      	adds	r3, #4
    1fc6:	6839      	ldr	r1, [r7, #0]
    1fc8:	4618      	mov	r0, r3
    1fca:	4b19      	ldr	r3, [pc, #100]	; (2030 <spi_m_async_init+0xa4>)
    1fcc:	4798      	blx	r3
    1fce:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    1fd0:	68fb      	ldr	r3, [r7, #12]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	db23      	blt.n	201e <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	3304      	adds	r3, #4
    1fda:	4a16      	ldr	r2, [pc, #88]	; (2034 <spi_m_async_init+0xa8>)
    1fdc:	2100      	movs	r1, #0
    1fde:	4618      	mov	r0, r3
    1fe0:	4b15      	ldr	r3, [pc, #84]	; (2038 <spi_m_async_init+0xac>)
    1fe2:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	3304      	adds	r3, #4
    1fe8:	4a14      	ldr	r2, [pc, #80]	; (203c <spi_m_async_init+0xb0>)
    1fea:	2101      	movs	r1, #1
    1fec:	4618      	mov	r0, r3
    1fee:	4b12      	ldr	r3, [pc, #72]	; (2038 <spi_m_async_init+0xac>)
    1ff0:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	3304      	adds	r3, #4
    1ff6:	4a12      	ldr	r2, [pc, #72]	; (2040 <spi_m_async_init+0xb4>)
    1ff8:	2102      	movs	r1, #2
    1ffa:	4618      	mov	r0, r3
    1ffc:	4b0e      	ldr	r3, [pc, #56]	; (2038 <spi_m_async_init+0xac>)
    1ffe:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	3304      	adds	r3, #4
    2004:	4a0f      	ldr	r2, [pc, #60]	; (2044 <spi_m_async_init+0xb8>)
    2006:	2103      	movs	r1, #3
    2008:	4618      	mov	r0, r3
    200a:	4b0b      	ldr	r3, [pc, #44]	; (2038 <spi_m_async_init+0xac>)
    200c:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	4a0d      	ldr	r2, [pc, #52]	; (2048 <spi_m_async_init+0xbc>)
    2012:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	4a0d      	ldr	r2, [pc, #52]	; (204c <spi_m_async_init+0xc0>)
    2018:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    201a:	2300      	movs	r3, #0
    201c:	e000      	b.n	2020 <spi_m_async_init+0x94>
		return rc;
    201e:	68fb      	ldr	r3, [r7, #12]
}
    2020:	4618      	mov	r0, r3
    2022:	3710      	adds	r7, #16
    2024:	46bd      	mov	sp, r7
    2026:	bd80      	pop	{r7, pc}
    2028:	0000d4ac 	.word	0x0000d4ac
    202c:	000030c9 	.word	0x000030c9
    2030:	000067d5 	.word	0x000067d5
    2034:	00001d75 	.word	0x00001d75
    2038:	00006cb9 	.word	0x00006cb9
    203c:	00001df5 	.word	0x00001df5
    2040:	00001eed 	.word	0x00001eed
    2044:	00001f35 	.word	0x00001f35
    2048:	00002051 	.word	0x00002051
    204c:	000020d1 	.word	0x000020d1

00002050 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    2050:	b580      	push	{r7, lr}
    2052:	b086      	sub	sp, #24
    2054:	af00      	add	r7, sp, #0
    2056:	60f8      	str	r0, [r7, #12]
    2058:	60b9      	str	r1, [r7, #8]
    205a:	4613      	mov	r3, r2
    205c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    205e:	68fb      	ldr	r3, [r7, #12]
    2060:	2b00      	cmp	r3, #0
    2062:	bf14      	ite	ne
    2064:	2301      	movne	r3, #1
    2066:	2300      	moveq	r3, #0
    2068:	b2db      	uxtb	r3, r3
    206a:	f240 1205 	movw	r2, #261	; 0x105
    206e:	4914      	ldr	r1, [pc, #80]	; (20c0 <_spi_m_async_io_read+0x70>)
    2070:	4618      	mov	r0, r3
    2072:	4b14      	ldr	r3, [pc, #80]	; (20c4 <_spi_m_async_io_read+0x74>)
    2074:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2076:	68fb      	ldr	r3, [r7, #12]
    2078:	3b24      	subs	r3, #36	; 0x24
    207a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    207c:	697b      	ldr	r3, [r7, #20]
    207e:	68ba      	ldr	r2, [r7, #8]
    2080:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    2082:	697b      	ldr	r3, [r7, #20]
    2084:	2200      	movs	r2, #0
    2086:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2088:	88fa      	ldrh	r2, [r7, #6]
    208a:	697b      	ldr	r3, [r7, #20]
    208c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    208e:	697b      	ldr	r3, [r7, #20]
    2090:	2200      	movs	r2, #0
    2092:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2094:	697b      	ldr	r3, [r7, #20]
    2096:	2210      	movs	r2, #16
    2098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    209c:	697b      	ldr	r3, [r7, #20]
    209e:	3304      	adds	r3, #4
    20a0:	2101      	movs	r1, #1
    20a2:	4618      	mov	r0, r3
    20a4:	4b08      	ldr	r3, [pc, #32]	; (20c8 <_spi_m_async_io_read+0x78>)
    20a6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    20a8:	697b      	ldr	r3, [r7, #20]
    20aa:	3304      	adds	r3, #4
    20ac:	f240 11ff 	movw	r1, #511	; 0x1ff
    20b0:	4618      	mov	r0, r3
    20b2:	4b06      	ldr	r3, [pc, #24]	; (20cc <_spi_m_async_io_read+0x7c>)
    20b4:	4798      	blx	r3

	return ERR_NONE;
    20b6:	2300      	movs	r3, #0
}
    20b8:	4618      	mov	r0, r3
    20ba:	3718      	adds	r7, #24
    20bc:	46bd      	mov	sp, r7
    20be:	bd80      	pop	{r7, pc}
    20c0:	0000d4ac 	.word	0x0000d4ac
    20c4:	000030c9 	.word	0x000030c9
    20c8:	00006b39 	.word	0x00006b39
    20cc:	00006c11 	.word	0x00006c11

000020d0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b086      	sub	sp, #24
    20d4:	af00      	add	r7, sp, #0
    20d6:	60f8      	str	r0, [r7, #12]
    20d8:	60b9      	str	r1, [r7, #8]
    20da:	4613      	mov	r3, r2
    20dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    20de:	68fb      	ldr	r3, [r7, #12]
    20e0:	2b00      	cmp	r3, #0
    20e2:	bf14      	ite	ne
    20e4:	2301      	movne	r3, #1
    20e6:	2300      	moveq	r3, #0
    20e8:	b2db      	uxtb	r3, r3
    20ea:	f240 1227 	movw	r2, #295	; 0x127
    20ee:	4911      	ldr	r1, [pc, #68]	; (2134 <_spi_m_async_io_write+0x64>)
    20f0:	4618      	mov	r0, r3
    20f2:	4b11      	ldr	r3, [pc, #68]	; (2138 <_spi_m_async_io_write+0x68>)
    20f4:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    20f6:	68fb      	ldr	r3, [r7, #12]
    20f8:	3b24      	subs	r3, #36	; 0x24
    20fa:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    20fc:	697b      	ldr	r3, [r7, #20]
    20fe:	2200      	movs	r2, #0
    2100:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    2102:	697b      	ldr	r3, [r7, #20]
    2104:	68ba      	ldr	r2, [r7, #8]
    2106:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2108:	88fa      	ldrh	r2, [r7, #6]
    210a:	697b      	ldr	r3, [r7, #20]
    210c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    210e:	697b      	ldr	r3, [r7, #20]
    2110:	2200      	movs	r2, #0
    2112:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2114:	697b      	ldr	r3, [r7, #20]
    2116:	2210      	movs	r2, #16
    2118:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    211c:	697b      	ldr	r3, [r7, #20]
    211e:	3304      	adds	r3, #4
    2120:	2101      	movs	r1, #1
    2122:	4618      	mov	r0, r3
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <_spi_m_async_io_write+0x6c>)
    2126:	4798      	blx	r3

	return ERR_NONE;
    2128:	2300      	movs	r3, #0
}
    212a:	4618      	mov	r0, r3
    212c:	3718      	adds	r7, #24
    212e:	46bd      	mov	sp, r7
    2130:	bd80      	pop	{r7, pc}
    2132:	bf00      	nop
    2134:	0000d4ac 	.word	0x0000d4ac
    2138:	000030c9 	.word	0x000030c9
    213c:	00006ad5 	.word	0x00006ad5

00002140 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2140:	b580      	push	{r7, lr}
    2142:	b084      	sub	sp, #16
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
    2148:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    214a:	2300      	movs	r3, #0
    214c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	2b00      	cmp	r3, #0
    2152:	d004      	beq.n	215e <spi_m_sync_init+0x1e>
    2154:	683b      	ldr	r3, [r7, #0]
    2156:	2b00      	cmp	r3, #0
    2158:	d001      	beq.n	215e <spi_m_sync_init+0x1e>
    215a:	2301      	movs	r3, #1
    215c:	e000      	b.n	2160 <spi_m_sync_init+0x20>
    215e:	2300      	movs	r3, #0
    2160:	f003 0301 	and.w	r3, r3, #1
    2164:	b2db      	uxtb	r3, r3
    2166:	2240      	movs	r2, #64	; 0x40
    2168:	4910      	ldr	r1, [pc, #64]	; (21ac <spi_m_sync_init+0x6c>)
    216a:	4618      	mov	r0, r3
    216c:	4b10      	ldr	r3, [pc, #64]	; (21b0 <spi_m_sync_init+0x70>)
    216e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	683a      	ldr	r2, [r7, #0]
    2174:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	3304      	adds	r3, #4
    217a:	6839      	ldr	r1, [r7, #0]
    217c:	4618      	mov	r0, r3
    217e:	4b0d      	ldr	r3, [pc, #52]	; (21b4 <spi_m_sync_init+0x74>)
    2180:	4798      	blx	r3
    2182:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2184:	68fb      	ldr	r3, [r7, #12]
    2186:	2b00      	cmp	r3, #0
    2188:	da01      	bge.n	218e <spi_m_sync_init+0x4e>
		return rc;
    218a:	68fb      	ldr	r3, [r7, #12]
    218c:	e00a      	b.n	21a4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    218e:	687b      	ldr	r3, [r7, #4]
    2190:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2194:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	4a07      	ldr	r2, [pc, #28]	; (21b8 <spi_m_sync_init+0x78>)
    219a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	4a07      	ldr	r2, [pc, #28]	; (21bc <spi_m_sync_init+0x7c>)
    21a0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    21a2:	2300      	movs	r3, #0
}
    21a4:	4618      	mov	r0, r3
    21a6:	3710      	adds	r7, #16
    21a8:	46bd      	mov	sp, r7
    21aa:	bd80      	pop	{r7, pc}
    21ac:	0000d4cc 	.word	0x0000d4cc
    21b0:	000030c9 	.word	0x000030c9
    21b4:	000066c9 	.word	0x000066c9
    21b8:	000021c1 	.word	0x000021c1
    21bc:	00002219 	.word	0x00002219

000021c0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    21c0:	b580      	push	{r7, lr}
    21c2:	b088      	sub	sp, #32
    21c4:	af00      	add	r7, sp, #0
    21c6:	60f8      	str	r0, [r7, #12]
    21c8:	60b9      	str	r1, [r7, #8]
    21ca:	4613      	mov	r3, r2
    21cc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21ce:	68fb      	ldr	r3, [r7, #12]
    21d0:	2b00      	cmp	r3, #0
    21d2:	bf14      	ite	ne
    21d4:	2301      	movne	r3, #1
    21d6:	2300      	moveq	r3, #0
    21d8:	b2db      	uxtb	r3, r3
    21da:	2287      	movs	r2, #135	; 0x87
    21dc:	490b      	ldr	r1, [pc, #44]	; (220c <_spi_m_sync_io_read+0x4c>)
    21de:	4618      	mov	r0, r3
    21e0:	4b0b      	ldr	r3, [pc, #44]	; (2210 <_spi_m_sync_io_read+0x50>)
    21e2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	3b0c      	subs	r3, #12
    21e8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    21ee:	2300      	movs	r3, #0
    21f0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21f2:	88fb      	ldrh	r3, [r7, #6]
    21f4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21f6:	f107 0310 	add.w	r3, r7, #16
    21fa:	4619      	mov	r1, r3
    21fc:	69f8      	ldr	r0, [r7, #28]
    21fe:	4b05      	ldr	r3, [pc, #20]	; (2214 <_spi_m_sync_io_read+0x54>)
    2200:	4798      	blx	r3
    2202:	4603      	mov	r3, r0
}
    2204:	4618      	mov	r0, r3
    2206:	3720      	adds	r7, #32
    2208:	46bd      	mov	sp, r7
    220a:	bd80      	pop	{r7, pc}
    220c:	0000d4cc 	.word	0x0000d4cc
    2210:	000030c9 	.word	0x000030c9
    2214:	00002271 	.word	0x00002271

00002218 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2218:	b580      	push	{r7, lr}
    221a:	b088      	sub	sp, #32
    221c:	af00      	add	r7, sp, #0
    221e:	60f8      	str	r0, [r7, #12]
    2220:	60b9      	str	r1, [r7, #8]
    2222:	4613      	mov	r3, r2
    2224:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2226:	68fb      	ldr	r3, [r7, #12]
    2228:	2b00      	cmp	r3, #0
    222a:	bf14      	ite	ne
    222c:	2301      	movne	r3, #1
    222e:	2300      	moveq	r3, #0
    2230:	b2db      	uxtb	r3, r3
    2232:	22a3      	movs	r2, #163	; 0xa3
    2234:	490b      	ldr	r1, [pc, #44]	; (2264 <_spi_m_sync_io_write+0x4c>)
    2236:	4618      	mov	r0, r3
    2238:	4b0b      	ldr	r3, [pc, #44]	; (2268 <_spi_m_sync_io_write+0x50>)
    223a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    223c:	68fb      	ldr	r3, [r7, #12]
    223e:	3b0c      	subs	r3, #12
    2240:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2242:	2300      	movs	r3, #0
    2244:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2246:	68bb      	ldr	r3, [r7, #8]
    2248:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    224a:	88fb      	ldrh	r3, [r7, #6]
    224c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    224e:	f107 0310 	add.w	r3, r7, #16
    2252:	4619      	mov	r1, r3
    2254:	69f8      	ldr	r0, [r7, #28]
    2256:	4b05      	ldr	r3, [pc, #20]	; (226c <_spi_m_sync_io_write+0x54>)
    2258:	4798      	blx	r3
    225a:	4603      	mov	r3, r0
}
    225c:	4618      	mov	r0, r3
    225e:	3720      	adds	r7, #32
    2260:	46bd      	mov	sp, r7
    2262:	bd80      	pop	{r7, pc}
    2264:	0000d4cc 	.word	0x0000d4cc
    2268:	000030c9 	.word	0x000030c9
    226c:	00002271 	.word	0x00002271

00002270 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2270:	b580      	push	{r7, lr}
    2272:	b086      	sub	sp, #24
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	2b00      	cmp	r3, #0
    227e:	d004      	beq.n	228a <spi_m_sync_transfer+0x1a>
    2280:	683b      	ldr	r3, [r7, #0]
    2282:	2b00      	cmp	r3, #0
    2284:	d001      	beq.n	228a <spi_m_sync_transfer+0x1a>
    2286:	2301      	movs	r3, #1
    2288:	e000      	b.n	228c <spi_m_sync_transfer+0x1c>
    228a:	2300      	movs	r3, #0
    228c:	f003 0301 	and.w	r3, r3, #1
    2290:	b2db      	uxtb	r3, r3
    2292:	22b3      	movs	r2, #179	; 0xb3
    2294:	490c      	ldr	r1, [pc, #48]	; (22c8 <spi_m_sync_transfer+0x58>)
    2296:	4618      	mov	r0, r3
    2298:	4b0c      	ldr	r3, [pc, #48]	; (22cc <spi_m_sync_transfer+0x5c>)
    229a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    229c:	683b      	ldr	r3, [r7, #0]
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    22a2:	683b      	ldr	r3, [r7, #0]
    22a4:	685b      	ldr	r3, [r3, #4]
    22a6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    22a8:	683b      	ldr	r3, [r7, #0]
    22aa:	689b      	ldr	r3, [r3, #8]
    22ac:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	3304      	adds	r3, #4
    22b2:	f107 020c 	add.w	r2, r7, #12
    22b6:	4611      	mov	r1, r2
    22b8:	4618      	mov	r0, r3
    22ba:	4b05      	ldr	r3, [pc, #20]	; (22d0 <spi_m_sync_transfer+0x60>)
    22bc:	4798      	blx	r3
    22be:	4603      	mov	r3, r0
}
    22c0:	4618      	mov	r0, r3
    22c2:	3718      	adds	r7, #24
    22c4:	46bd      	mov	sp, r7
    22c6:	bd80      	pop	{r7, pc}
    22c8:	0000d4cc 	.word	0x0000d4cc
    22cc:	000030c9 	.word	0x000030c9
    22d0:	000069b9 	.word	0x000069b9

000022d4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    22d4:	b480      	push	{r7}
    22d6:	b083      	sub	sp, #12
    22d8:	af00      	add	r7, sp, #0
    22da:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	681b      	ldr	r3, [r3, #0]
}
    22e0:	4618      	mov	r0, r3
    22e2:	370c      	adds	r7, #12
    22e4:	46bd      	mov	sp, r7
    22e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    22ea:	4770      	bx	lr

000022ec <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    22ec:	b480      	push	{r7}
    22ee:	b083      	sub	sp, #12
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d002      	beq.n	2300 <list_get_next_element+0x14>
    22fa:	687b      	ldr	r3, [r7, #4]
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	e000      	b.n	2302 <list_get_next_element+0x16>
    2300:	2300      	movs	r3, #0
}
    2302:	4618      	mov	r0, r3
    2304:	370c      	adds	r7, #12
    2306:	46bd      	mov	sp, r7
    2308:	f85d 7b04 	ldr.w	r7, [sp], #4
    230c:	4770      	bx	lr
	...

00002310 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2310:	b580      	push	{r7, lr}
    2312:	b084      	sub	sp, #16
    2314:	af00      	add	r7, sp, #0
    2316:	60f8      	str	r0, [r7, #12]
    2318:	60b9      	str	r1, [r7, #8]
    231a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    231c:	68fb      	ldr	r3, [r7, #12]
    231e:	2b00      	cmp	r3, #0
    2320:	d004      	beq.n	232c <timer_init+0x1c>
    2322:	68bb      	ldr	r3, [r7, #8]
    2324:	2b00      	cmp	r3, #0
    2326:	d001      	beq.n	232c <timer_init+0x1c>
    2328:	2301      	movs	r3, #1
    232a:	e000      	b.n	232e <timer_init+0x1e>
    232c:	2300      	movs	r3, #0
    232e:	f003 0301 	and.w	r3, r3, #1
    2332:	b2db      	uxtb	r3, r3
    2334:	223b      	movs	r2, #59	; 0x3b
    2336:	490a      	ldr	r1, [pc, #40]	; (2360 <timer_init+0x50>)
    2338:	4618      	mov	r0, r3
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <timer_init+0x54>)
    233c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	68b9      	ldr	r1, [r7, #8]
    2342:	4618      	mov	r0, r3
    2344:	4b08      	ldr	r3, [pc, #32]	; (2368 <timer_init+0x58>)
    2346:	4798      	blx	r3
	descr->time                           = 0;
    2348:	68fb      	ldr	r3, [r7, #12]
    234a:	2200      	movs	r2, #0
    234c:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	4a06      	ldr	r2, [pc, #24]	; (236c <timer_init+0x5c>)
    2352:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2354:	2300      	movs	r3, #0
}
    2356:	4618      	mov	r0, r3
    2358:	3710      	adds	r7, #16
    235a:	46bd      	mov	sp, r7
    235c:	bd80      	pop	{r7, pc}
    235e:	bf00      	nop
    2360:	0000d4e8 	.word	0x0000d4e8
    2364:	000030c9 	.word	0x000030c9
    2368:	000070b1 	.word	0x000070b1
    236c:	000026b9 	.word	0x000026b9

00002370 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2370:	b580      	push	{r7, lr}
    2372:	b082      	sub	sp, #8
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	2b00      	cmp	r3, #0
    237c:	bf14      	ite	ne
    237e:	2301      	movne	r3, #1
    2380:	2300      	moveq	r3, #0
    2382:	b2db      	uxtb	r3, r3
    2384:	2253      	movs	r2, #83	; 0x53
    2386:	490b      	ldr	r1, [pc, #44]	; (23b4 <timer_start+0x44>)
    2388:	4618      	mov	r0, r3
    238a:	4b0b      	ldr	r3, [pc, #44]	; (23b8 <timer_start+0x48>)
    238c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	4618      	mov	r0, r3
    2392:	4b0a      	ldr	r3, [pc, #40]	; (23bc <timer_start+0x4c>)
    2394:	4798      	blx	r3
    2396:	4603      	mov	r3, r0
    2398:	2b00      	cmp	r3, #0
    239a:	d002      	beq.n	23a2 <timer_start+0x32>
		return ERR_DENIED;
    239c:	f06f 0310 	mvn.w	r3, #16
    23a0:	e004      	b.n	23ac <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	4618      	mov	r0, r3
    23a6:	4b06      	ldr	r3, [pc, #24]	; (23c0 <timer_start+0x50>)
    23a8:	4798      	blx	r3

	return ERR_NONE;
    23aa:	2300      	movs	r3, #0
}
    23ac:	4618      	mov	r0, r3
    23ae:	3708      	adds	r7, #8
    23b0:	46bd      	mov	sp, r7
    23b2:	bd80      	pop	{r7, pc}
    23b4:	0000d4e8 	.word	0x0000d4e8
    23b8:	000030c9 	.word	0x000030c9
    23bc:	000075dd 	.word	0x000075dd
    23c0:	0000757d 	.word	0x0000757d

000023c4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
    23ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	2b00      	cmp	r3, #0
    23d0:	bf14      	ite	ne
    23d2:	2301      	movne	r3, #1
    23d4:	2300      	moveq	r3, #0
    23d6:	b2db      	uxtb	r3, r3
    23d8:	2261      	movs	r2, #97	; 0x61
    23da:	490d      	ldr	r1, [pc, #52]	; (2410 <timer_stop+0x4c>)
    23dc:	4618      	mov	r0, r3
    23de:	4b0d      	ldr	r3, [pc, #52]	; (2414 <timer_stop+0x50>)
    23e0:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	4618      	mov	r0, r3
    23e6:	4b0c      	ldr	r3, [pc, #48]	; (2418 <timer_stop+0x54>)
    23e8:	4798      	blx	r3
    23ea:	4603      	mov	r3, r0
    23ec:	f083 0301 	eor.w	r3, r3, #1
    23f0:	b2db      	uxtb	r3, r3
    23f2:	2b00      	cmp	r3, #0
    23f4:	d002      	beq.n	23fc <timer_stop+0x38>
		return ERR_DENIED;
    23f6:	f06f 0310 	mvn.w	r3, #16
    23fa:	e004      	b.n	2406 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	4618      	mov	r0, r3
    2400:	4b06      	ldr	r3, [pc, #24]	; (241c <timer_stop+0x58>)
    2402:	4798      	blx	r3

	return ERR_NONE;
    2404:	2300      	movs	r3, #0
}
    2406:	4618      	mov	r0, r3
    2408:	3708      	adds	r7, #8
    240a:	46bd      	mov	sp, r7
    240c:	bd80      	pop	{r7, pc}
    240e:	bf00      	nop
    2410:	0000d4e8 	.word	0x0000d4e8
    2414:	000030c9 	.word	0x000030c9
    2418:	000075dd 	.word	0x000075dd
    241c:	000075bd 	.word	0x000075bd

00002420 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2420:	b580      	push	{r7, lr}
    2422:	b084      	sub	sp, #16
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	2b00      	cmp	r3, #0
    242e:	d004      	beq.n	243a <timer_add_task+0x1a>
    2430:	683b      	ldr	r3, [r7, #0]
    2432:	2b00      	cmp	r3, #0
    2434:	d001      	beq.n	243a <timer_add_task+0x1a>
    2436:	2301      	movs	r3, #1
    2438:	e000      	b.n	243c <timer_add_task+0x1c>
    243a:	2300      	movs	r3, #0
    243c:	f003 0301 	and.w	r3, r3, #1
    2440:	b2db      	uxtb	r3, r3
    2442:	227a      	movs	r2, #122	; 0x7a
    2444:	492d      	ldr	r1, [pc, #180]	; (24fc <timer_add_task+0xdc>)
    2446:	4618      	mov	r0, r3
    2448:	4b2d      	ldr	r3, [pc, #180]	; (2500 <timer_add_task+0xe0>)
    244a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	7e1b      	ldrb	r3, [r3, #24]
    2450:	b2db      	uxtb	r3, r3
    2452:	f043 0301 	orr.w	r3, r3, #1
    2456:	b2da      	uxtb	r2, r3
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	3314      	adds	r3, #20
    2460:	6839      	ldr	r1, [r7, #0]
    2462:	4618      	mov	r0, r3
    2464:	4b27      	ldr	r3, [pc, #156]	; (2504 <timer_add_task+0xe4>)
    2466:	4798      	blx	r3
    2468:	4603      	mov	r3, r0
    246a:	2b00      	cmp	r3, #0
    246c:	d00f      	beq.n	248e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	7e1b      	ldrb	r3, [r3, #24]
    2472:	b2db      	uxtb	r3, r3
    2474:	f023 0301 	bic.w	r3, r3, #1
    2478:	b2da      	uxtb	r2, r3
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    247e:	227f      	movs	r2, #127	; 0x7f
    2480:	491e      	ldr	r1, [pc, #120]	; (24fc <timer_add_task+0xdc>)
    2482:	2000      	movs	r0, #0
    2484:	4b1e      	ldr	r3, [pc, #120]	; (2500 <timer_add_task+0xe0>)
    2486:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2488:	f06f 0311 	mvn.w	r3, #17
    248c:	e032      	b.n	24f4 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	691a      	ldr	r2, [r3, #16]
    2492:	683b      	ldr	r3, [r7, #0]
    2494:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2496:	687b      	ldr	r3, [r7, #4]
    2498:	f103 0014 	add.w	r0, r3, #20
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	691b      	ldr	r3, [r3, #16]
    24a0:	461a      	mov	r2, r3
    24a2:	6839      	ldr	r1, [r7, #0]
    24a4:	4b18      	ldr	r3, [pc, #96]	; (2508 <timer_add_task+0xe8>)
    24a6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	7e1b      	ldrb	r3, [r3, #24]
    24ac:	b2db      	uxtb	r3, r3
    24ae:	f023 0301 	bic.w	r3, r3, #1
    24b2:	b2da      	uxtb	r2, r3
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	7e1b      	ldrb	r3, [r3, #24]
    24bc:	b2db      	uxtb	r3, r3
    24be:	f003 0302 	and.w	r3, r3, #2
    24c2:	2b00      	cmp	r3, #0
    24c4:	d015      	beq.n	24f2 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    24c6:	f107 030c 	add.w	r3, r7, #12
    24ca:	4618      	mov	r0, r3
    24cc:	4b0f      	ldr	r3, [pc, #60]	; (250c <timer_add_task+0xec>)
    24ce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    24d0:	687b      	ldr	r3, [r7, #4]
    24d2:	7e1b      	ldrb	r3, [r3, #24]
    24d4:	b2db      	uxtb	r3, r3
    24d6:	f023 0302 	bic.w	r3, r3, #2
    24da:	b2da      	uxtb	r2, r3
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	4618      	mov	r0, r3
    24e4:	4b0a      	ldr	r3, [pc, #40]	; (2510 <timer_add_task+0xf0>)
    24e6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    24e8:	f107 030c 	add.w	r3, r7, #12
    24ec:	4618      	mov	r0, r3
    24ee:	4b09      	ldr	r3, [pc, #36]	; (2514 <timer_add_task+0xf4>)
    24f0:	4798      	blx	r3
	}

	return ERR_NONE;
    24f2:	2300      	movs	r3, #0
}
    24f4:	4618      	mov	r0, r3
    24f6:	3710      	adds	r7, #16
    24f8:	46bd      	mov	sp, r7
    24fa:	bd80      	pop	{r7, pc}
    24fc:	0000d4e8 	.word	0x0000d4e8
    2500:	000030c9 	.word	0x000030c9
    2504:	000030f1 	.word	0x000030f1
    2508:	00002609 	.word	0x00002609
    250c:	0000a725 	.word	0x0000a725
    2510:	0000763d 	.word	0x0000763d
    2514:	0000a74b 	.word	0x0000a74b

00002518 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2518:	b580      	push	{r7, lr}
    251a:	b084      	sub	sp, #16
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2522:	687b      	ldr	r3, [r7, #4]
    2524:	2b00      	cmp	r3, #0
    2526:	d004      	beq.n	2532 <timer_remove_task+0x1a>
    2528:	683b      	ldr	r3, [r7, #0]
    252a:	2b00      	cmp	r3, #0
    252c:	d001      	beq.n	2532 <timer_remove_task+0x1a>
    252e:	2301      	movs	r3, #1
    2530:	e000      	b.n	2534 <timer_remove_task+0x1c>
    2532:	2300      	movs	r3, #0
    2534:	f003 0301 	and.w	r3, r3, #1
    2538:	b2db      	uxtb	r3, r3
    253a:	2295      	movs	r2, #149	; 0x95
    253c:	492b      	ldr	r1, [pc, #172]	; (25ec <timer_remove_task+0xd4>)
    253e:	4618      	mov	r0, r3
    2540:	4b2b      	ldr	r3, [pc, #172]	; (25f0 <timer_remove_task+0xd8>)
    2542:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	7e1b      	ldrb	r3, [r3, #24]
    2548:	b2db      	uxtb	r3, r3
    254a:	f043 0301 	orr.w	r3, r3, #1
    254e:	b2da      	uxtb	r2, r3
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	3314      	adds	r3, #20
    2558:	6839      	ldr	r1, [r7, #0]
    255a:	4618      	mov	r0, r3
    255c:	4b25      	ldr	r3, [pc, #148]	; (25f4 <timer_remove_task+0xdc>)
    255e:	4798      	blx	r3
    2560:	4603      	mov	r3, r0
    2562:	f083 0301 	eor.w	r3, r3, #1
    2566:	b2db      	uxtb	r3, r3
    2568:	2b00      	cmp	r3, #0
    256a:	d00f      	beq.n	258c <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	7e1b      	ldrb	r3, [r3, #24]
    2570:	b2db      	uxtb	r3, r3
    2572:	f023 0301 	bic.w	r3, r3, #1
    2576:	b2da      	uxtb	r2, r3
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    257c:	229a      	movs	r2, #154	; 0x9a
    257e:	491b      	ldr	r1, [pc, #108]	; (25ec <timer_remove_task+0xd4>)
    2580:	2000      	movs	r0, #0
    2582:	4b1b      	ldr	r3, [pc, #108]	; (25f0 <timer_remove_task+0xd8>)
    2584:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2586:	f06f 0309 	mvn.w	r3, #9
    258a:	e02b      	b.n	25e4 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	3314      	adds	r3, #20
    2590:	6839      	ldr	r1, [r7, #0]
    2592:	4618      	mov	r0, r3
    2594:	4b18      	ldr	r3, [pc, #96]	; (25f8 <timer_remove_task+0xe0>)
    2596:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	7e1b      	ldrb	r3, [r3, #24]
    259c:	b2db      	uxtb	r3, r3
    259e:	f023 0301 	bic.w	r3, r3, #1
    25a2:	b2da      	uxtb	r2, r3
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	7e1b      	ldrb	r3, [r3, #24]
    25ac:	b2db      	uxtb	r3, r3
    25ae:	f003 0302 	and.w	r3, r3, #2
    25b2:	2b00      	cmp	r3, #0
    25b4:	d015      	beq.n	25e2 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    25b6:	f107 030c 	add.w	r3, r7, #12
    25ba:	4618      	mov	r0, r3
    25bc:	4b0f      	ldr	r3, [pc, #60]	; (25fc <timer_remove_task+0xe4>)
    25be:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	7e1b      	ldrb	r3, [r3, #24]
    25c4:	b2db      	uxtb	r3, r3
    25c6:	f023 0302 	bic.w	r3, r3, #2
    25ca:	b2da      	uxtb	r2, r3
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	4618      	mov	r0, r3
    25d4:	4b0a      	ldr	r3, [pc, #40]	; (2600 <timer_remove_task+0xe8>)
    25d6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    25d8:	f107 030c 	add.w	r3, r7, #12
    25dc:	4618      	mov	r0, r3
    25de:	4b09      	ldr	r3, [pc, #36]	; (2604 <timer_remove_task+0xec>)
    25e0:	4798      	blx	r3
	}

	return ERR_NONE;
    25e2:	2300      	movs	r3, #0
}
    25e4:	4618      	mov	r0, r3
    25e6:	3710      	adds	r7, #16
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	0000d4e8 	.word	0x0000d4e8
    25f0:	000030c9 	.word	0x000030c9
    25f4:	000030f1 	.word	0x000030f1
    25f8:	00003253 	.word	0x00003253
    25fc:	0000a725 	.word	0x0000a725
    2600:	0000763d 	.word	0x0000763d
    2604:	0000a74b 	.word	0x0000a74b

00002608 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2608:	b580      	push	{r7, lr}
    260a:	b088      	sub	sp, #32
    260c:	af00      	add	r7, sp, #0
    260e:	60f8      	str	r0, [r7, #12]
    2610:	60b9      	str	r1, [r7, #8]
    2612:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2614:	2300      	movs	r3, #0
    2616:	61bb      	str	r3, [r7, #24]
    2618:	68f8      	ldr	r0, [r7, #12]
    261a:	4b23      	ldr	r3, [pc, #140]	; (26a8 <timer_add_timer_task+0xa0>)
    261c:	4798      	blx	r3
    261e:	6138      	str	r0, [r7, #16]

	if (!head) {
    2620:	693b      	ldr	r3, [r7, #16]
    2622:	2b00      	cmp	r3, #0
    2624:	d104      	bne.n	2630 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2626:	68b9      	ldr	r1, [r7, #8]
    2628:	68f8      	ldr	r0, [r7, #12]
    262a:	4b20      	ldr	r3, [pc, #128]	; (26ac <timer_add_timer_task+0xa4>)
    262c:	4798      	blx	r3
		return;
    262e:	e037      	b.n	26a0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2630:	693b      	ldr	r3, [r7, #16]
    2632:	61fb      	str	r3, [r7, #28]
    2634:	e022      	b.n	267c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2636:	69fb      	ldr	r3, [r7, #28]
    2638:	685a      	ldr	r2, [r3, #4]
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	429a      	cmp	r2, r3
    263e:	d808      	bhi.n	2652 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2640:	69fb      	ldr	r3, [r7, #28]
    2642:	689a      	ldr	r2, [r3, #8]
    2644:	69fb      	ldr	r3, [r7, #28]
    2646:	6859      	ldr	r1, [r3, #4]
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	1acb      	subs	r3, r1, r3
    264c:	4413      	add	r3, r2
    264e:	617b      	str	r3, [r7, #20]
    2650:	e009      	b.n	2666 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2652:	69fb      	ldr	r3, [r7, #28]
    2654:	689a      	ldr	r2, [r3, #8]
    2656:	69fb      	ldr	r3, [r7, #28]
    2658:	685b      	ldr	r3, [r3, #4]
    265a:	441a      	add	r2, r3
    265c:	687b      	ldr	r3, [r7, #4]
    265e:	425b      	negs	r3, r3
    2660:	4413      	add	r3, r2
    2662:	3301      	adds	r3, #1
    2664:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2666:	68bb      	ldr	r3, [r7, #8]
    2668:	689a      	ldr	r2, [r3, #8]
    266a:	697b      	ldr	r3, [r7, #20]
    266c:	429a      	cmp	r2, r3
    266e:	d909      	bls.n	2684 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2670:	69fb      	ldr	r3, [r7, #28]
    2672:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2674:	69f8      	ldr	r0, [r7, #28]
    2676:	4b0e      	ldr	r3, [pc, #56]	; (26b0 <timer_add_timer_task+0xa8>)
    2678:	4798      	blx	r3
    267a:	61f8      	str	r0, [r7, #28]
    267c:	69fb      	ldr	r3, [r7, #28]
    267e:	2b00      	cmp	r3, #0
    2680:	d1d9      	bne.n	2636 <timer_add_timer_task+0x2e>
    2682:	e000      	b.n	2686 <timer_add_timer_task+0x7e>
			break;
    2684:	bf00      	nop
	}

	if (it == head) {
    2686:	69fa      	ldr	r2, [r7, #28]
    2688:	693b      	ldr	r3, [r7, #16]
    268a:	429a      	cmp	r2, r3
    268c:	d104      	bne.n	2698 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    268e:	68b9      	ldr	r1, [r7, #8]
    2690:	68f8      	ldr	r0, [r7, #12]
    2692:	4b06      	ldr	r3, [pc, #24]	; (26ac <timer_add_timer_task+0xa4>)
    2694:	4798      	blx	r3
    2696:	e003      	b.n	26a0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2698:	68b9      	ldr	r1, [r7, #8]
    269a:	69b8      	ldr	r0, [r7, #24]
    269c:	4b05      	ldr	r3, [pc, #20]	; (26b4 <timer_add_timer_task+0xac>)
    269e:	4798      	blx	r3
	}
}
    26a0:	3720      	adds	r7, #32
    26a2:	46bd      	mov	sp, r7
    26a4:	bd80      	pop	{r7, pc}
    26a6:	bf00      	nop
    26a8:	000022d5 	.word	0x000022d5
    26ac:	00003129 	.word	0x00003129
    26b0:	000022ed 	.word	0x000022ed
    26b4:	00003181 	.word	0x00003181

000026b8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    26b8:	b580      	push	{r7, lr}
    26ba:	b086      	sub	sp, #24
    26bc:	af00      	add	r7, sp, #0
    26be:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    26c4:	693b      	ldr	r3, [r7, #16]
    26c6:	3314      	adds	r3, #20
    26c8:	4618      	mov	r0, r3
    26ca:	4b27      	ldr	r3, [pc, #156]	; (2768 <timer_process_counted+0xb0>)
    26cc:	4798      	blx	r3
    26ce:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    26d0:	693b      	ldr	r3, [r7, #16]
    26d2:	691b      	ldr	r3, [r3, #16]
    26d4:	1c5a      	adds	r2, r3, #1
    26d6:	693b      	ldr	r3, [r7, #16]
    26d8:	611a      	str	r2, [r3, #16]
    26da:	693b      	ldr	r3, [r7, #16]
    26dc:	691b      	ldr	r3, [r3, #16]
    26de:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    26e0:	693b      	ldr	r3, [r7, #16]
    26e2:	7e1b      	ldrb	r3, [r3, #24]
    26e4:	b2db      	uxtb	r3, r3
    26e6:	f003 0301 	and.w	r3, r3, #1
    26ea:	2b00      	cmp	r3, #0
    26ec:	d106      	bne.n	26fc <timer_process_counted+0x44>
    26ee:	693b      	ldr	r3, [r7, #16]
    26f0:	7e1b      	ldrb	r3, [r3, #24]
    26f2:	b2db      	uxtb	r3, r3
    26f4:	f003 0302 	and.w	r3, r3, #2
    26f8:	2b00      	cmp	r3, #0
    26fa:	d027      	beq.n	274c <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    26fc:	693b      	ldr	r3, [r7, #16]
    26fe:	7e1b      	ldrb	r3, [r3, #24]
    2700:	b2db      	uxtb	r3, r3
    2702:	f043 0302 	orr.w	r3, r3, #2
    2706:	b2da      	uxtb	r2, r3
    2708:	693b      	ldr	r3, [r7, #16]
    270a:	761a      	strb	r2, [r3, #24]
		return;
    270c:	e029      	b.n	2762 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    270e:	697b      	ldr	r3, [r7, #20]
    2710:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2712:	693b      	ldr	r3, [r7, #16]
    2714:	3314      	adds	r3, #20
    2716:	4618      	mov	r0, r3
    2718:	4b14      	ldr	r3, [pc, #80]	; (276c <timer_process_counted+0xb4>)
    271a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    271c:	68bb      	ldr	r3, [r7, #8]
    271e:	7c1b      	ldrb	r3, [r3, #16]
    2720:	2b01      	cmp	r3, #1
    2722:	d109      	bne.n	2738 <timer_process_counted+0x80>
			tmp->time_label = time;
    2724:	68bb      	ldr	r3, [r7, #8]
    2726:	68fa      	ldr	r2, [r7, #12]
    2728:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    272a:	693b      	ldr	r3, [r7, #16]
    272c:	3314      	adds	r3, #20
    272e:	68fa      	ldr	r2, [r7, #12]
    2730:	68b9      	ldr	r1, [r7, #8]
    2732:	4618      	mov	r0, r3
    2734:	4b0e      	ldr	r3, [pc, #56]	; (2770 <timer_process_counted+0xb8>)
    2736:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2738:	693b      	ldr	r3, [r7, #16]
    273a:	3314      	adds	r3, #20
    273c:	4618      	mov	r0, r3
    273e:	4b0a      	ldr	r3, [pc, #40]	; (2768 <timer_process_counted+0xb0>)
    2740:	4798      	blx	r3
    2742:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2744:	68bb      	ldr	r3, [r7, #8]
    2746:	68db      	ldr	r3, [r3, #12]
    2748:	68b8      	ldr	r0, [r7, #8]
    274a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    274c:	697b      	ldr	r3, [r7, #20]
    274e:	2b00      	cmp	r3, #0
    2750:	d007      	beq.n	2762 <timer_process_counted+0xaa>
    2752:	697b      	ldr	r3, [r7, #20]
    2754:	685b      	ldr	r3, [r3, #4]
    2756:	68fa      	ldr	r2, [r7, #12]
    2758:	1ad2      	subs	r2, r2, r3
    275a:	697b      	ldr	r3, [r7, #20]
    275c:	689b      	ldr	r3, [r3, #8]
    275e:	429a      	cmp	r2, r3
    2760:	d2d5      	bcs.n	270e <timer_process_counted+0x56>
	}
}
    2762:	3718      	adds	r7, #24
    2764:	46bd      	mov	sp, r7
    2766:	bd80      	pop	{r7, pc}
    2768:	000022d5 	.word	0x000022d5
    276c:	00003221 	.word	0x00003221
    2770:	00002609 	.word	0x00002609

00002774 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2774:	b480      	push	{r7}
    2776:	b085      	sub	sp, #20
    2778:	af00      	add	r7, sp, #0
    277a:	4603      	mov	r3, r0
    277c:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    277e:	2300      	movs	r3, #0
    2780:	73fb      	strb	r3, [r7, #15]
    2782:	e029      	b.n	27d8 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2784:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2788:	4a19      	ldr	r2, [pc, #100]	; (27f0 <_usb_d_find_ep+0x7c>)
    278a:	015b      	lsls	r3, r3, #5
    278c:	4413      	add	r3, r2
    278e:	3301      	adds	r3, #1
    2790:	781b      	ldrb	r3, [r3, #0]
    2792:	79fa      	ldrb	r2, [r7, #7]
    2794:	429a      	cmp	r2, r3
    2796:	d102      	bne.n	279e <_usb_d_find_ep+0x2a>
			return i;
    2798:	f997 300f 	ldrsb.w	r3, [r7, #15]
    279c:	e022      	b.n	27e4 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27a2:	4a13      	ldr	r2, [pc, #76]	; (27f0 <_usb_d_find_ep+0x7c>)
    27a4:	015b      	lsls	r3, r3, #5
    27a6:	4413      	add	r3, r2
    27a8:	781b      	ldrb	r3, [r3, #0]
    27aa:	2b00      	cmp	r3, #0
    27ac:	d10e      	bne.n	27cc <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    27ae:	79fb      	ldrb	r3, [r7, #7]
    27b0:	f003 030f 	and.w	r3, r3, #15
    27b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    27b8:	490d      	ldr	r1, [pc, #52]	; (27f0 <_usb_d_find_ep+0x7c>)
    27ba:	0152      	lsls	r2, r2, #5
    27bc:	440a      	add	r2, r1
    27be:	3201      	adds	r2, #1
    27c0:	7812      	ldrb	r2, [r2, #0]
    27c2:	4293      	cmp	r3, r2
    27c4:	d102      	bne.n	27cc <_usb_d_find_ep+0x58>
			return i;
    27c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27ca:	e00b      	b.n	27e4 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    27cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27d0:	b2db      	uxtb	r3, r3
    27d2:	3301      	adds	r3, #1
    27d4:	b2db      	uxtb	r3, r3
    27d6:	73fb      	strb	r3, [r7, #15]
    27d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27dc:	2b03      	cmp	r3, #3
    27de:	ddd1      	ble.n	2784 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    27e0:	f04f 33ff 	mov.w	r3, #4294967295
}
    27e4:	4618      	mov	r0, r3
    27e6:	3714      	adds	r7, #20
    27e8:	46bd      	mov	sp, r7
    27ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ee:	4770      	bx	lr
    27f0:	2000056c 	.word	0x2000056c

000027f4 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b088      	sub	sp, #32
    27f8:	af00      	add	r7, sp, #0
    27fa:	60ba      	str	r2, [r7, #8]
    27fc:	607b      	str	r3, [r7, #4]
    27fe:	4603      	mov	r3, r0
    2800:	73fb      	strb	r3, [r7, #15]
    2802:	460b      	mov	r3, r1
    2804:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2806:	68bb      	ldr	r3, [r7, #8]
    2808:	617b      	str	r3, [r7, #20]
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	61bb      	str	r3, [r7, #24]
    280e:	7bbb      	ldrb	r3, [r7, #14]
    2810:	2b00      	cmp	r3, #0
    2812:	d004      	beq.n	281e <_usb_d_trans+0x2a>
    2814:	7bfb      	ldrb	r3, [r7, #15]
    2816:	f063 037f 	orn	r3, r3, #127	; 0x7f
    281a:	b2db      	uxtb	r3, r3
    281c:	e003      	b.n	2826 <_usb_d_trans+0x32>
    281e:	7bfb      	ldrb	r3, [r7, #15]
    2820:	f003 030f 	and.w	r3, r3, #15
    2824:	b2db      	uxtb	r3, r3
    2826:	773b      	strb	r3, [r7, #28]
    2828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    282c:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    282e:	f107 0314 	add.w	r3, r7, #20
    2832:	4618      	mov	r0, r3
    2834:	4b03      	ldr	r3, [pc, #12]	; (2844 <_usb_d_trans+0x50>)
    2836:	4798      	blx	r3
    2838:	4603      	mov	r3, r0
}
    283a:	4618      	mov	r0, r3
    283c:	3720      	adds	r7, #32
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop
    2844:	00009d59 	.word	0x00009d59

00002848 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2848:	b480      	push	{r7}
    284a:	b085      	sub	sp, #20
    284c:	af00      	add	r7, sp, #0
    284e:	60f8      	str	r0, [r7, #12]
    2850:	60b9      	str	r1, [r7, #8]
    2852:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2854:	2300      	movs	r3, #0
}
    2856:	4618      	mov	r0, r3
    2858:	3714      	adds	r7, #20
    285a:	46bd      	mov	sp, r7
    285c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2860:	4770      	bx	lr
	...

00002864 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2864:	b580      	push	{r7, lr}
    2866:	b086      	sub	sp, #24
    2868:	af00      	add	r7, sp, #0
    286a:	4603      	mov	r3, r0
    286c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    286e:	79fb      	ldrb	r3, [r7, #7]
    2870:	4618      	mov	r0, r3
    2872:	4b2a      	ldr	r3, [pc, #168]	; (291c <usb_d_cb_trans_setup+0xb8>)
    2874:	4798      	blx	r3
    2876:	4603      	mov	r3, r0
    2878:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    287a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    287e:	015b      	lsls	r3, r3, #5
    2880:	4a27      	ldr	r2, [pc, #156]	; (2920 <usb_d_cb_trans_setup+0xbc>)
    2882:	4413      	add	r3, r2
    2884:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2886:	693b      	ldr	r3, [r7, #16]
    2888:	330c      	adds	r3, #12
    288a:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    288c:	79fb      	ldrb	r3, [r7, #7]
    288e:	68f9      	ldr	r1, [r7, #12]
    2890:	4618      	mov	r0, r3
    2892:	4b24      	ldr	r3, [pc, #144]	; (2924 <usb_d_cb_trans_setup+0xc0>)
    2894:	4798      	blx	r3
    2896:	4603      	mov	r3, r0
    2898:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    289a:	7afb      	ldrb	r3, [r7, #11]
    289c:	2b08      	cmp	r3, #8
    289e:	d00d      	beq.n	28bc <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    28a0:	79fb      	ldrb	r3, [r7, #7]
    28a2:	2101      	movs	r1, #1
    28a4:	4618      	mov	r0, r3
    28a6:	4b20      	ldr	r3, [pc, #128]	; (2928 <usb_d_cb_trans_setup+0xc4>)
    28a8:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    28aa:	79fb      	ldrb	r3, [r7, #7]
    28ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    28b0:	b2db      	uxtb	r3, r3
    28b2:	2101      	movs	r1, #1
    28b4:	4618      	mov	r0, r3
    28b6:	4b1c      	ldr	r3, [pc, #112]	; (2928 <usb_d_cb_trans_setup+0xc4>)
    28b8:	4798      	blx	r3
		return;
    28ba:	e02b      	b.n	2914 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    28bc:	79fb      	ldrb	r3, [r7, #7]
    28be:	2100      	movs	r1, #0
    28c0:	4618      	mov	r0, r3
    28c2:	4b19      	ldr	r3, [pc, #100]	; (2928 <usb_d_cb_trans_setup+0xc4>)
    28c4:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    28c6:	79fb      	ldrb	r3, [r7, #7]
    28c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    28cc:	b2db      	uxtb	r3, r3
    28ce:	2100      	movs	r1, #0
    28d0:	4618      	mov	r0, r3
    28d2:	4b15      	ldr	r3, [pc, #84]	; (2928 <usb_d_cb_trans_setup+0xc4>)
    28d4:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    28d6:	693b      	ldr	r3, [r7, #16]
    28d8:	2201      	movs	r2, #1
    28da:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    28dc:	693b      	ldr	r3, [r7, #16]
    28de:	695b      	ldr	r3, [r3, #20]
    28e0:	79fa      	ldrb	r2, [r7, #7]
    28e2:	68f9      	ldr	r1, [r7, #12]
    28e4:	4610      	mov	r0, r2
    28e6:	4798      	blx	r3
    28e8:	4603      	mov	r3, r0
    28ea:	f083 0301 	eor.w	r3, r3, #1
    28ee:	b2db      	uxtb	r3, r3
    28f0:	2b00      	cmp	r3, #0
    28f2:	d00f      	beq.n	2914 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    28f4:	693b      	ldr	r3, [r7, #16]
    28f6:	2205      	movs	r2, #5
    28f8:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    28fa:	79fb      	ldrb	r3, [r7, #7]
    28fc:	2101      	movs	r1, #1
    28fe:	4618      	mov	r0, r3
    2900:	4b09      	ldr	r3, [pc, #36]	; (2928 <usb_d_cb_trans_setup+0xc4>)
    2902:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2904:	79fb      	ldrb	r3, [r7, #7]
    2906:	f063 037f 	orn	r3, r3, #127	; 0x7f
    290a:	b2db      	uxtb	r3, r3
    290c:	2101      	movs	r1, #1
    290e:	4618      	mov	r0, r3
    2910:	4b05      	ldr	r3, [pc, #20]	; (2928 <usb_d_cb_trans_setup+0xc4>)
    2912:	4798      	blx	r3
	}
}
    2914:	3718      	adds	r7, #24
    2916:	46bd      	mov	sp, r7
    2918:	bd80      	pop	{r7, pc}
    291a:	bf00      	nop
    291c:	00002775 	.word	0x00002775
    2920:	2000056c 	.word	0x2000056c
    2924:	00009cb1 	.word	0x00009cb1
    2928:	00009b29 	.word	0x00009b29

0000292c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    292c:	b580      	push	{r7, lr}
    292e:	b084      	sub	sp, #16
    2930:	af00      	add	r7, sp, #0
    2932:	4603      	mov	r3, r0
    2934:	6039      	str	r1, [r7, #0]
    2936:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2938:	79fb      	ldrb	r3, [r7, #7]
    293a:	4618      	mov	r0, r3
    293c:	4b0d      	ldr	r3, [pc, #52]	; (2974 <usb_d_cb_trans_more+0x48>)
    293e:	4798      	blx	r3
    2940:	4603      	mov	r3, r0
    2942:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2944:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2948:	015b      	lsls	r3, r3, #5
    294a:	4a0b      	ldr	r2, [pc, #44]	; (2978 <usb_d_cb_trans_more+0x4c>)
    294c:	4413      	add	r3, r2
    294e:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2950:	68bb      	ldr	r3, [r7, #8]
    2952:	789b      	ldrb	r3, [r3, #2]
    2954:	2b03      	cmp	r3, #3
    2956:	d107      	bne.n	2968 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2958:	68bb      	ldr	r3, [r7, #8]
    295a:	699b      	ldr	r3, [r3, #24]
    295c:	79fa      	ldrb	r2, [r7, #7]
    295e:	6839      	ldr	r1, [r7, #0]
    2960:	4610      	mov	r0, r2
    2962:	4798      	blx	r3
    2964:	4603      	mov	r3, r0
    2966:	e000      	b.n	296a <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2968:	2300      	movs	r3, #0
}
    296a:	4618      	mov	r0, r3
    296c:	3710      	adds	r7, #16
    296e:	46bd      	mov	sp, r7
    2970:	bd80      	pop	{r7, pc}
    2972:	bf00      	nop
    2974:	00002775 	.word	0x00002775
    2978:	2000056c 	.word	0x2000056c

0000297c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    297c:	b590      	push	{r4, r7, lr}
    297e:	b087      	sub	sp, #28
    2980:	af02      	add	r7, sp, #8
    2982:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	789b      	ldrb	r3, [r3, #2]
    2988:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	7b1b      	ldrb	r3, [r3, #12]
    298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2992:	2b00      	cmp	r3, #0
    2994:	bf14      	ite	ne
    2996:	2301      	movne	r3, #1
    2998:	2300      	moveq	r3, #0
    299a:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    299c:	7bfb      	ldrb	r3, [r7, #15]
    299e:	2b03      	cmp	r3, #3
    29a0:	d13a      	bne.n	2a18 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	69db      	ldr	r3, [r3, #28]
    29a6:	687a      	ldr	r2, [r7, #4]
    29a8:	7850      	ldrb	r0, [r2, #1]
    29aa:	687a      	ldr	r2, [r7, #4]
    29ac:	320c      	adds	r2, #12
    29ae:	2101      	movs	r1, #1
    29b0:	4798      	blx	r3
    29b2:	4603      	mov	r3, r0
    29b4:	737b      	strb	r3, [r7, #13]
		if (err) {
    29b6:	7b7b      	ldrb	r3, [r7, #13]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d015      	beq.n	29e8 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	2205      	movs	r2, #5
    29c0:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    29c2:	687b      	ldr	r3, [r7, #4]
    29c4:	2202      	movs	r2, #2
    29c6:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    29c8:	7bbb      	ldrb	r3, [r7, #14]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d002      	beq.n	29d4 <usb_d_ctrl_trans_done+0x58>
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	785b      	ldrb	r3, [r3, #1]
    29d2:	e004      	b.n	29de <usb_d_ctrl_trans_done+0x62>
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	785b      	ldrb	r3, [r3, #1]
    29d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    29dc:	b2db      	uxtb	r3, r3
    29de:	2101      	movs	r1, #1
    29e0:	4618      	mov	r0, r3
    29e2:	4b15      	ldr	r3, [pc, #84]	; (2a38 <usb_d_ctrl_trans_done+0xbc>)
    29e4:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    29e6:	e022      	b.n	2a2e <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	2204      	movs	r2, #4
    29ec:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	7858      	ldrb	r0, [r3, #1]
    29f2:	7bbb      	ldrb	r3, [r7, #14]
    29f4:	2b00      	cmp	r3, #0
    29f6:	bf14      	ite	ne
    29f8:	2301      	movne	r3, #1
    29fa:	2300      	moveq	r3, #0
    29fc:	b2db      	uxtb	r3, r3
    29fe:	f083 0301 	eor.w	r3, r3, #1
    2a02:	b2db      	uxtb	r3, r3
    2a04:	f003 0301 	and.w	r3, r3, #1
    2a08:	b2d9      	uxtb	r1, r3
    2a0a:	2301      	movs	r3, #1
    2a0c:	9300      	str	r3, [sp, #0]
    2a0e:	2300      	movs	r3, #0
    2a10:	2200      	movs	r2, #0
    2a12:	4c0a      	ldr	r4, [pc, #40]	; (2a3c <usb_d_ctrl_trans_done+0xc0>)
    2a14:	47a0      	blx	r4
}
    2a16:	e00a      	b.n	2a2e <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	69db      	ldr	r3, [r3, #28]
    2a1c:	687a      	ldr	r2, [r7, #4]
    2a1e:	7850      	ldrb	r0, [r2, #1]
    2a20:	687a      	ldr	r2, [r7, #4]
    2a22:	320c      	adds	r2, #12
    2a24:	2100      	movs	r1, #0
    2a26:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	2202      	movs	r2, #2
    2a2c:	709a      	strb	r2, [r3, #2]
}
    2a2e:	bf00      	nop
    2a30:	3714      	adds	r7, #20
    2a32:	46bd      	mov	sp, r7
    2a34:	bd90      	pop	{r4, r7, pc}
    2a36:	bf00      	nop
    2a38:	00009b29 	.word	0x00009b29
    2a3c:	000027f5 	.word	0x000027f5

00002a40 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b086      	sub	sp, #24
    2a44:	af00      	add	r7, sp, #0
    2a46:	4603      	mov	r3, r0
    2a48:	60b9      	str	r1, [r7, #8]
    2a4a:	607a      	str	r2, [r7, #4]
    2a4c:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a4e:	7bfb      	ldrb	r3, [r7, #15]
    2a50:	4618      	mov	r0, r3
    2a52:	4b2f      	ldr	r3, [pc, #188]	; (2b10 <_usb_d_cb_trans_done+0xd0>)
    2a54:	4798      	blx	r3
    2a56:	4603      	mov	r3, r0
    2a58:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a5e:	015b      	lsls	r3, r3, #5
    2a60:	4a2c      	ldr	r2, [pc, #176]	; (2b14 <_usb_d_cb_trans_done+0xd4>)
    2a62:	4413      	add	r3, r2
    2a64:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2a66:	68bb      	ldr	r3, [r7, #8]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d10e      	bne.n	2a8a <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2a6c:	693b      	ldr	r3, [r7, #16]
    2a6e:	2200      	movs	r2, #0
    2a70:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a72:	693b      	ldr	r3, [r7, #16]
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	2b00      	cmp	r3, #0
    2a78:	d103      	bne.n	2a82 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2a7a:	6938      	ldr	r0, [r7, #16]
    2a7c:	4b26      	ldr	r3, [pc, #152]	; (2b18 <_usb_d_cb_trans_done+0xd8>)
    2a7e:	4798      	blx	r3
			return;
    2a80:	e043      	b.n	2b0a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2a82:	693b      	ldr	r3, [r7, #16]
    2a84:	2201      	movs	r2, #1
    2a86:	709a      	strb	r2, [r3, #2]
    2a88:	e038      	b.n	2afc <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2a8a:	68bb      	ldr	r3, [r7, #8]
    2a8c:	2b01      	cmp	r3, #1
    2a8e:	d113      	bne.n	2ab8 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2a90:	693b      	ldr	r3, [r7, #16]
    2a92:	2202      	movs	r2, #2
    2a94:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a96:	693b      	ldr	r3, [r7, #16]
    2a98:	781b      	ldrb	r3, [r3, #0]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d108      	bne.n	2ab0 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2a9e:	693b      	ldr	r3, [r7, #16]
    2aa0:	2202      	movs	r2, #2
    2aa2:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2aa4:	7bfb      	ldrb	r3, [r7, #15]
    2aa6:	2100      	movs	r1, #0
    2aa8:	4618      	mov	r0, r3
    2aaa:	4b1c      	ldr	r3, [pc, #112]	; (2b1c <_usb_d_cb_trans_done+0xdc>)
    2aac:	4798      	blx	r3
    2aae:	e025      	b.n	2afc <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ab0:	693b      	ldr	r3, [r7, #16]
    2ab2:	2205      	movs	r2, #5
    2ab4:	709a      	strb	r2, [r3, #2]
    2ab6:	e021      	b.n	2afc <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2ab8:	68bb      	ldr	r3, [r7, #8]
    2aba:	2b02      	cmp	r3, #2
    2abc:	d10e      	bne.n	2adc <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2abe:	693b      	ldr	r3, [r7, #16]
    2ac0:	2204      	movs	r2, #4
    2ac2:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ac4:	693b      	ldr	r3, [r7, #16]
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d103      	bne.n	2ad4 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2acc:	693b      	ldr	r3, [r7, #16]
    2ace:	2202      	movs	r2, #2
    2ad0:	709a      	strb	r2, [r3, #2]
			return;
    2ad2:	e01a      	b.n	2b0a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ad4:	693b      	ldr	r3, [r7, #16]
    2ad6:	2201      	movs	r2, #1
    2ad8:	709a      	strb	r2, [r3, #2]
    2ada:	e00f      	b.n	2afc <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2adc:	68bb      	ldr	r3, [r7, #8]
    2ade:	2b03      	cmp	r3, #3
    2ae0:	d106      	bne.n	2af0 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2ae2:	693b      	ldr	r3, [r7, #16]
    2ae4:	2200      	movs	r2, #0
    2ae6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2ae8:	693b      	ldr	r3, [r7, #16]
    2aea:	2205      	movs	r2, #5
    2aec:	70da      	strb	r2, [r3, #3]
    2aee:	e005      	b.n	2afc <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2af0:	693b      	ldr	r3, [r7, #16]
    2af2:	2206      	movs	r2, #6
    2af4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2af6:	693b      	ldr	r3, [r7, #16]
    2af8:	2206      	movs	r2, #6
    2afa:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2afc:	693b      	ldr	r3, [r7, #16]
    2afe:	69db      	ldr	r3, [r3, #28]
    2b00:	693a      	ldr	r2, [r7, #16]
    2b02:	78d1      	ldrb	r1, [r2, #3]
    2b04:	687a      	ldr	r2, [r7, #4]
    2b06:	7bf8      	ldrb	r0, [r7, #15]
    2b08:	4798      	blx	r3
}
    2b0a:	3718      	adds	r7, #24
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	00002775 	.word	0x00002775
    2b14:	2000056c 	.word	0x2000056c
    2b18:	0000297d 	.word	0x0000297d
    2b1c:	00009b29 	.word	0x00009b29

00002b20 <usb_d_init>:

int32_t usb_d_init(void)
{
    2b20:	b580      	push	{r7, lr}
    2b22:	b082      	sub	sp, #8
    2b24:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2b26:	4b21      	ldr	r3, [pc, #132]	; (2bac <usb_d_init+0x8c>)
    2b28:	4798      	blx	r3
    2b2a:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2b2c:	683b      	ldr	r3, [r7, #0]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	da01      	bge.n	2b36 <usb_d_init+0x16>
		return rc;
    2b32:	683b      	ldr	r3, [r7, #0]
    2b34:	e036      	b.n	2ba4 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2b36:	2280      	movs	r2, #128	; 0x80
    2b38:	2100      	movs	r1, #0
    2b3a:	481d      	ldr	r0, [pc, #116]	; (2bb0 <usb_d_init+0x90>)
    2b3c:	4b1d      	ldr	r3, [pc, #116]	; (2bb4 <usb_d_init+0x94>)
    2b3e:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b40:	2300      	movs	r3, #0
    2b42:	71fb      	strb	r3, [r7, #7]
    2b44:	e01e      	b.n	2b84 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2b46:	79fb      	ldrb	r3, [r7, #7]
    2b48:	4a19      	ldr	r2, [pc, #100]	; (2bb0 <usb_d_init+0x90>)
    2b4a:	015b      	lsls	r3, r3, #5
    2b4c:	4413      	add	r3, r2
    2b4e:	3301      	adds	r3, #1
    2b50:	22ff      	movs	r2, #255	; 0xff
    2b52:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2b54:	79fb      	ldrb	r3, [r7, #7]
    2b56:	4a16      	ldr	r2, [pc, #88]	; (2bb0 <usb_d_init+0x90>)
    2b58:	015b      	lsls	r3, r3, #5
    2b5a:	4413      	add	r3, r2
    2b5c:	3314      	adds	r3, #20
    2b5e:	4a16      	ldr	r2, [pc, #88]	; (2bb8 <usb_d_init+0x98>)
    2b60:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2b62:	79fb      	ldrb	r3, [r7, #7]
    2b64:	4a12      	ldr	r2, [pc, #72]	; (2bb0 <usb_d_init+0x90>)
    2b66:	015b      	lsls	r3, r3, #5
    2b68:	4413      	add	r3, r2
    2b6a:	3318      	adds	r3, #24
    2b6c:	4a12      	ldr	r2, [pc, #72]	; (2bb8 <usb_d_init+0x98>)
    2b6e:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2b70:	79fb      	ldrb	r3, [r7, #7]
    2b72:	4a0f      	ldr	r2, [pc, #60]	; (2bb0 <usb_d_init+0x90>)
    2b74:	015b      	lsls	r3, r3, #5
    2b76:	4413      	add	r3, r2
    2b78:	331c      	adds	r3, #28
    2b7a:	4a0f      	ldr	r2, [pc, #60]	; (2bb8 <usb_d_init+0x98>)
    2b7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b7e:	79fb      	ldrb	r3, [r7, #7]
    2b80:	3301      	adds	r3, #1
    2b82:	71fb      	strb	r3, [r7, #7]
    2b84:	79fb      	ldrb	r3, [r7, #7]
    2b86:	2b03      	cmp	r3, #3
    2b88:	d9dd      	bls.n	2b46 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2b8a:	490c      	ldr	r1, [pc, #48]	; (2bbc <usb_d_init+0x9c>)
    2b8c:	2000      	movs	r0, #0
    2b8e:	4b0c      	ldr	r3, [pc, #48]	; (2bc0 <usb_d_init+0xa0>)
    2b90:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2b92:	490c      	ldr	r1, [pc, #48]	; (2bc4 <usb_d_init+0xa4>)
    2b94:	2001      	movs	r0, #1
    2b96:	4b0a      	ldr	r3, [pc, #40]	; (2bc0 <usb_d_init+0xa0>)
    2b98:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2b9a:	490b      	ldr	r1, [pc, #44]	; (2bc8 <usb_d_init+0xa8>)
    2b9c:	2002      	movs	r0, #2
    2b9e:	4b08      	ldr	r3, [pc, #32]	; (2bc0 <usb_d_init+0xa0>)
    2ba0:	4798      	blx	r3
	return ERR_NONE;
    2ba2:	2300      	movs	r3, #0
}
    2ba4:	4618      	mov	r0, r3
    2ba6:	3708      	adds	r7, #8
    2ba8:	46bd      	mov	sp, r7
    2baa:	bd80      	pop	{r7, pc}
    2bac:	00009371 	.word	0x00009371
    2bb0:	2000056c 	.word	0x2000056c
    2bb4:	0000d211 	.word	0x0000d211
    2bb8:	00002849 	.word	0x00002849
    2bbc:	00002865 	.word	0x00002865
    2bc0:	00009fb9 	.word	0x00009fb9
    2bc4:	0000292d 	.word	0x0000292d
    2bc8:	00002a41 	.word	0x00002a41

00002bcc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b082      	sub	sp, #8
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	4603      	mov	r3, r0
    2bd4:	6039      	str	r1, [r7, #0]
    2bd6:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2bd8:	79fb      	ldrb	r3, [r7, #7]
    2bda:	6839      	ldr	r1, [r7, #0]
    2bdc:	4618      	mov	r0, r3
    2bde:	4b03      	ldr	r3, [pc, #12]	; (2bec <usb_d_register_callback+0x20>)
    2be0:	4798      	blx	r3
}
    2be2:	bf00      	nop
    2be4:	3708      	adds	r7, #8
    2be6:	46bd      	mov	sp, r7
    2be8:	bd80      	pop	{r7, pc}
    2bea:	bf00      	nop
    2bec:	00009f71 	.word	0x00009f71

00002bf0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2bf4:	4b02      	ldr	r3, [pc, #8]	; (2c00 <usb_d_enable+0x10>)
    2bf6:	4798      	blx	r3
    2bf8:	4603      	mov	r3, r0
}
    2bfa:	4618      	mov	r0, r3
    2bfc:	bd80      	pop	{r7, pc}
    2bfe:	bf00      	nop
    2c00:	00009461 	.word	0x00009461

00002c04 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2c04:	b580      	push	{r7, lr}
    2c06:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2c08:	4b01      	ldr	r3, [pc, #4]	; (2c10 <usb_d_attach+0xc>)
    2c0a:	4798      	blx	r3
}
    2c0c:	bf00      	nop
    2c0e:	bd80      	pop	{r7, pc}
    2c10:	000094e5 	.word	0x000094e5

00002c14 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2c14:	b580      	push	{r7, lr}
    2c16:	b082      	sub	sp, #8
    2c18:	af00      	add	r7, sp, #0
    2c1a:	4603      	mov	r3, r0
    2c1c:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2c1e:	79fb      	ldrb	r3, [r7, #7]
    2c20:	4618      	mov	r0, r3
    2c22:	4b03      	ldr	r3, [pc, #12]	; (2c30 <usb_d_set_address+0x1c>)
    2c24:	4798      	blx	r3
}
    2c26:	bf00      	nop
    2c28:	3708      	adds	r7, #8
    2c2a:	46bd      	mov	sp, r7
    2c2c:	bd80      	pop	{r7, pc}
    2c2e:	bf00      	nop
    2c30:	000094f9 	.word	0x000094f9

00002c34 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2c34:	b580      	push	{r7, lr}
    2c36:	b082      	sub	sp, #8
    2c38:	af00      	add	r7, sp, #0
    2c3a:	4603      	mov	r3, r0
    2c3c:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2c3e:	79fb      	ldrb	r3, [r7, #7]
    2c40:	b29b      	uxth	r3, r3
    2c42:	461a      	mov	r2, r3
    2c44:	2100      	movs	r1, #0
    2c46:	2000      	movs	r0, #0
    2c48:	4b03      	ldr	r3, [pc, #12]	; (2c58 <usb_d_ep0_init+0x24>)
    2c4a:	4798      	blx	r3
    2c4c:	4603      	mov	r3, r0
}
    2c4e:	4618      	mov	r0, r3
    2c50:	3708      	adds	r7, #8
    2c52:	46bd      	mov	sp, r7
    2c54:	bd80      	pop	{r7, pc}
    2c56:	bf00      	nop
    2c58:	00002c5d 	.word	0x00002c5d

00002c5c <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b086      	sub	sp, #24
    2c60:	af00      	add	r7, sp, #0
    2c62:	4603      	mov	r3, r0
    2c64:	71fb      	strb	r3, [r7, #7]
    2c66:	460b      	mov	r3, r1
    2c68:	71bb      	strb	r3, [r7, #6]
    2c6a:	4613      	mov	r3, r2
    2c6c:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c6e:	79fb      	ldrb	r3, [r7, #7]
    2c70:	4618      	mov	r0, r3
    2c72:	4b1e      	ldr	r3, [pc, #120]	; (2cec <usb_d_ep_init+0x90>)
    2c74:	4798      	blx	r3
    2c76:	4603      	mov	r3, r0
    2c78:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c7e:	015b      	lsls	r3, r3, #5
    2c80:	4a1b      	ldr	r2, [pc, #108]	; (2cf0 <usb_d_ep_init+0x94>)
    2c82:	4413      	add	r3, r2
    2c84:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	db02      	blt.n	2c94 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2c8e:	f06f 0313 	mvn.w	r3, #19
    2c92:	e027      	b.n	2ce4 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2c94:	20ff      	movs	r0, #255	; 0xff
    2c96:	4b15      	ldr	r3, [pc, #84]	; (2cec <usb_d_ep_init+0x90>)
    2c98:	4798      	blx	r3
    2c9a:	4603      	mov	r3, r0
    2c9c:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	da02      	bge.n	2cac <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2ca6:	f06f 0314 	mvn.w	r3, #20
    2caa:	e01b      	b.n	2ce4 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2cb0:	015b      	lsls	r3, r3, #5
    2cb2:	4a0f      	ldr	r2, [pc, #60]	; (2cf0 <usb_d_ep_init+0x94>)
    2cb4:	4413      	add	r3, r2
    2cb6:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2cb8:	88ba      	ldrh	r2, [r7, #4]
    2cba:	79b9      	ldrb	r1, [r7, #6]
    2cbc:	79fb      	ldrb	r3, [r7, #7]
    2cbe:	4618      	mov	r0, r3
    2cc0:	4b0c      	ldr	r3, [pc, #48]	; (2cf4 <usb_d_ep_init+0x98>)
    2cc2:	4798      	blx	r3
    2cc4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2cc6:	68fb      	ldr	r3, [r7, #12]
    2cc8:	2b00      	cmp	r3, #0
    2cca:	da01      	bge.n	2cd0 <usb_d_ep_init+0x74>
		return rc;
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	e009      	b.n	2ce4 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2cd0:	693b      	ldr	r3, [r7, #16]
    2cd2:	79fa      	ldrb	r2, [r7, #7]
    2cd4:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2cd6:	79bb      	ldrb	r3, [r7, #6]
    2cd8:	f003 0303 	and.w	r3, r3, #3
    2cdc:	b2da      	uxtb	r2, r3
    2cde:	693b      	ldr	r3, [r7, #16]
    2ce0:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2ce2:	2300      	movs	r3, #0
}
    2ce4:	4618      	mov	r0, r3
    2ce6:	3718      	adds	r7, #24
    2ce8:	46bd      	mov	sp, r7
    2cea:	bd80      	pop	{r7, pc}
    2cec:	00002775 	.word	0x00002775
    2cf0:	2000056c 	.word	0x2000056c
    2cf4:	00009599 	.word	0x00009599

00002cf8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b084      	sub	sp, #16
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	4603      	mov	r3, r0
    2d00:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d02:	79fb      	ldrb	r3, [r7, #7]
    2d04:	4618      	mov	r0, r3
    2d06:	4b0d      	ldr	r3, [pc, #52]	; (2d3c <usb_d_ep_deinit+0x44>)
    2d08:	4798      	blx	r3
    2d0a:	4603      	mov	r3, r0
    2d0c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d12:	015b      	lsls	r3, r3, #5
    2d14:	4a0a      	ldr	r2, [pc, #40]	; (2d40 <usb_d_ep_deinit+0x48>)
    2d16:	4413      	add	r3, r2
    2d18:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	db07      	blt.n	2d32 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2d22:	79fb      	ldrb	r3, [r7, #7]
    2d24:	4618      	mov	r0, r3
    2d26:	4b07      	ldr	r3, [pc, #28]	; (2d44 <usb_d_ep_deinit+0x4c>)
    2d28:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2d2a:	68bb      	ldr	r3, [r7, #8]
    2d2c:	22ff      	movs	r2, #255	; 0xff
    2d2e:	705a      	strb	r2, [r3, #1]
    2d30:	e000      	b.n	2d34 <usb_d_ep_deinit+0x3c>
		return;
    2d32:	bf00      	nop
}
    2d34:	3710      	adds	r7, #16
    2d36:	46bd      	mov	sp, r7
    2d38:	bd80      	pop	{r7, pc}
    2d3a:	bf00      	nop
    2d3c:	00002775 	.word	0x00002775
    2d40:	2000056c 	.word	0x2000056c
    2d44:	000096cd 	.word	0x000096cd

00002d48 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b086      	sub	sp, #24
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	4603      	mov	r3, r0
    2d50:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d52:	79fb      	ldrb	r3, [r7, #7]
    2d54:	4618      	mov	r0, r3
    2d56:	4b15      	ldr	r3, [pc, #84]	; (2dac <usb_d_ep_enable+0x64>)
    2d58:	4798      	blx	r3
    2d5a:	4603      	mov	r3, r0
    2d5c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d62:	015b      	lsls	r3, r3, #5
    2d64:	4a12      	ldr	r2, [pc, #72]	; (2db0 <usb_d_ep_enable+0x68>)
    2d66:	4413      	add	r3, r2
    2d68:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	da02      	bge.n	2d78 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2d72:	f06f 0311 	mvn.w	r3, #17
    2d76:	e014      	b.n	2da2 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2d78:	693b      	ldr	r3, [r7, #16]
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d101      	bne.n	2d84 <usb_d_ep_enable+0x3c>
    2d80:	2202      	movs	r2, #2
    2d82:	e000      	b.n	2d86 <usb_d_ep_enable+0x3e>
    2d84:	2201      	movs	r2, #1
    2d86:	693b      	ldr	r3, [r7, #16]
    2d88:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2d8a:	79fb      	ldrb	r3, [r7, #7]
    2d8c:	4618      	mov	r0, r3
    2d8e:	4b09      	ldr	r3, [pc, #36]	; (2db4 <usb_d_ep_enable+0x6c>)
    2d90:	4798      	blx	r3
    2d92:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	2b00      	cmp	r3, #0
    2d98:	da02      	bge.n	2da0 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2d9a:	693b      	ldr	r3, [r7, #16]
    2d9c:	2200      	movs	r2, #0
    2d9e:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2da0:	68fb      	ldr	r3, [r7, #12]
}
    2da2:	4618      	mov	r0, r3
    2da4:	3718      	adds	r7, #24
    2da6:	46bd      	mov	sp, r7
    2da8:	bd80      	pop	{r7, pc}
    2daa:	bf00      	nop
    2dac:	00002775 	.word	0x00002775
    2db0:	2000056c 	.word	0x2000056c
    2db4:	000097b1 	.word	0x000097b1

00002db8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2db8:	b590      	push	{r4, r7, lr}
    2dba:	b08d      	sub	sp, #52	; 0x34
    2dbc:	af02      	add	r7, sp, #8
    2dbe:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2dc0:	687b      	ldr	r3, [r7, #4]
    2dc2:	7a1b      	ldrb	r3, [r3, #8]
    2dc4:	4618      	mov	r0, r3
    2dc6:	4b51      	ldr	r3, [pc, #324]	; (2f0c <usb_d_ep_transfer+0x154>)
    2dc8:	4798      	blx	r3
    2dca:	4603      	mov	r3, r0
    2dcc:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2dd2:	015b      	lsls	r3, r3, #5
    2dd4:	4a4e      	ldr	r2, [pc, #312]	; (2f10 <usb_d_ep_transfer+0x158>)
    2dd6:	4413      	add	r3, r2
    2dd8:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	7a1b      	ldrb	r3, [r3, #8]
    2dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2de2:	2b00      	cmp	r3, #0
    2de4:	bf14      	ite	ne
    2de6:	2301      	movne	r3, #1
    2de8:	2300      	moveq	r3, #0
    2dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	7a5b      	ldrb	r3, [r3, #9]
    2df2:	2b00      	cmp	r3, #0
    2df4:	bf14      	ite	ne
    2df6:	2301      	movne	r3, #1
    2df8:	2300      	moveq	r3, #0
    2dfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	685b      	ldr	r3, [r3, #4]
    2e02:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2e08:	2b00      	cmp	r3, #0
    2e0a:	da02      	bge.n	2e12 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2e0c:	f06f 0311 	mvn.w	r3, #17
    2e10:	e077      	b.n	2f02 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2e12:	f107 0308 	add.w	r3, r7, #8
    2e16:	4618      	mov	r0, r3
    2e18:	4b3e      	ldr	r3, [pc, #248]	; (2f14 <usb_d_ep_transfer+0x15c>)
    2e1a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2e1c:	69bb      	ldr	r3, [r7, #24]
    2e1e:	789b      	ldrb	r3, [r3, #2]
    2e20:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2e22:	7bfb      	ldrb	r3, [r7, #15]
    2e24:	b2db      	uxtb	r3, r3
    2e26:	2b01      	cmp	r3, #1
    2e28:	d10c      	bne.n	2e44 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2e2a:	69bb      	ldr	r3, [r7, #24]
    2e2c:	2203      	movs	r2, #3
    2e2e:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2e30:	f107 0308 	add.w	r3, r7, #8
    2e34:	4618      	mov	r0, r3
    2e36:	4b38      	ldr	r3, [pc, #224]	; (2f18 <usb_d_ep_transfer+0x160>)
    2e38:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e3a:	69bb      	ldr	r3, [r7, #24]
    2e3c:	781b      	ldrb	r3, [r3, #0]
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d151      	bne.n	2ee6 <usb_d_ep_transfer+0x12e>
    2e42:	e017      	b.n	2e74 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2e44:	f107 0308 	add.w	r3, r7, #8
    2e48:	4618      	mov	r0, r3
    2e4a:	4b33      	ldr	r3, [pc, #204]	; (2f18 <usb_d_ep_transfer+0x160>)
    2e4c:	4798      	blx	r3
		switch (state) {
    2e4e:	7bfb      	ldrb	r3, [r7, #15]
    2e50:	b2db      	uxtb	r3, r3
    2e52:	2b05      	cmp	r3, #5
    2e54:	d004      	beq.n	2e60 <usb_d_ep_transfer+0xa8>
    2e56:	2b06      	cmp	r3, #6
    2e58:	d004      	beq.n	2e64 <usb_d_ep_transfer+0xac>
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d005      	beq.n	2e6a <usb_d_ep_transfer+0xb2>
    2e5e:	e007      	b.n	2e70 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2e60:	2302      	movs	r3, #2
    2e62:	e04e      	b.n	2f02 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2e64:	f06f 030f 	mvn.w	r3, #15
    2e68:	e04b      	b.n	2f02 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2e6a:	f06f 0312 	mvn.w	r3, #18
    2e6e:	e048      	b.n	2f02 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2e70:	2301      	movs	r3, #1
    2e72:	e046      	b.n	2f02 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2e74:	69bb      	ldr	r3, [r7, #24]
    2e76:	7c9b      	ldrb	r3, [r3, #18]
    2e78:	b29a      	uxth	r2, r3
    2e7a:	69bb      	ldr	r3, [r7, #24]
    2e7c:	7cdb      	ldrb	r3, [r3, #19]
    2e7e:	b29b      	uxth	r3, r3
    2e80:	021b      	lsls	r3, r3, #8
    2e82:	b29b      	uxth	r3, r3
    2e84:	4413      	add	r3, r2
    2e86:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2e88:	8afb      	ldrh	r3, [r7, #22]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d10b      	bne.n	2ea6 <usb_d_ep_transfer+0xee>
			dir                 = true;
    2e8e:	2301      	movs	r3, #1
    2e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2e94:	2300      	movs	r3, #0
    2e96:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2e98:	2301      	movs	r3, #1
    2e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2e9e:	69bb      	ldr	r3, [r7, #24]
    2ea0:	2204      	movs	r2, #4
    2ea2:	709a      	strb	r2, [r3, #2]
    2ea4:	e01f      	b.n	2ee6 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2ea6:	69bb      	ldr	r3, [r7, #24]
    2ea8:	7b1b      	ldrb	r3, [r3, #12]
    2eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2eae:	2b00      	cmp	r3, #0
    2eb0:	bf14      	ite	ne
    2eb2:	2301      	movne	r3, #1
    2eb4:	2300      	moveq	r3, #0
    2eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2eba:	8afa      	ldrh	r2, [r7, #22]
    2ebc:	6a3b      	ldr	r3, [r7, #32]
    2ebe:	429a      	cmp	r2, r3
    2ec0:	d201      	bcs.n	2ec6 <usb_d_ep_transfer+0x10e>
				len = req_len;
    2ec2:	8afb      	ldrh	r3, [r7, #22]
    2ec4:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d008      	beq.n	2ee0 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2ece:	8afa      	ldrh	r2, [r7, #22]
    2ed0:	6a3b      	ldr	r3, [r7, #32]
    2ed2:	429a      	cmp	r2, r3
    2ed4:	bf8c      	ite	hi
    2ed6:	2301      	movhi	r3, #1
    2ed8:	2300      	movls	r3, #0
    2eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2ede:	e002      	b.n	2ee6 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2ee0:	2300      	movs	r3, #0
    2ee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2ee6:	687b      	ldr	r3, [r7, #4]
    2ee8:	7a18      	ldrb	r0, [r3, #8]
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	681a      	ldr	r2, [r3, #0]
    2eee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2ef2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2ef6:	9300      	str	r3, [sp, #0]
    2ef8:	6a3b      	ldr	r3, [r7, #32]
    2efa:	4c08      	ldr	r4, [pc, #32]	; (2f1c <usb_d_ep_transfer+0x164>)
    2efc:	47a0      	blx	r4
    2efe:	6138      	str	r0, [r7, #16]
	return rc;
    2f00:	693b      	ldr	r3, [r7, #16]
}
    2f02:	4618      	mov	r0, r3
    2f04:	372c      	adds	r7, #44	; 0x2c
    2f06:	46bd      	mov	sp, r7
    2f08:	bd90      	pop	{r4, r7, pc}
    2f0a:	bf00      	nop
    2f0c:	00002775 	.word	0x00002775
    2f10:	2000056c 	.word	0x2000056c
    2f14:	0000a725 	.word	0x0000a725
    2f18:	0000a74b 	.word	0x0000a74b
    2f1c:	000027f5 	.word	0x000027f5

00002f20 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b084      	sub	sp, #16
    2f24:	af00      	add	r7, sp, #0
    2f26:	4603      	mov	r3, r0
    2f28:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f2a:	79fb      	ldrb	r3, [r7, #7]
    2f2c:	4618      	mov	r0, r3
    2f2e:	4b0e      	ldr	r3, [pc, #56]	; (2f68 <usb_d_ep_abort+0x48>)
    2f30:	4798      	blx	r3
    2f32:	4603      	mov	r3, r0
    2f34:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f3a:	015b      	lsls	r3, r3, #5
    2f3c:	4a0b      	ldr	r2, [pc, #44]	; (2f6c <usb_d_ep_abort+0x4c>)
    2f3e:	4413      	add	r3, r2
    2f40:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f46:	2b00      	cmp	r3, #0
    2f48:	db0a      	blt.n	2f60 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    2f4a:	79fb      	ldrb	r3, [r7, #7]
    2f4c:	4618      	mov	r0, r3
    2f4e:	4b08      	ldr	r3, [pc, #32]	; (2f70 <usb_d_ep_abort+0x50>)
    2f50:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2f52:	68bb      	ldr	r3, [r7, #8]
    2f54:	2201      	movs	r2, #1
    2f56:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    2f58:	68bb      	ldr	r3, [r7, #8]
    2f5a:	2204      	movs	r2, #4
    2f5c:	70da      	strb	r2, [r3, #3]
    2f5e:	e000      	b.n	2f62 <usb_d_ep_abort+0x42>
		return;
    2f60:	bf00      	nop
}
    2f62:	3710      	adds	r7, #16
    2f64:	46bd      	mov	sp, r7
    2f66:	bd80      	pop	{r7, pc}
    2f68:	00002775 	.word	0x00002775
    2f6c:	2000056c 	.word	0x2000056c
    2f70:	00009f1d 	.word	0x00009f1d

00002f74 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2f74:	b580      	push	{r7, lr}
    2f76:	b086      	sub	sp, #24
    2f78:	af00      	add	r7, sp, #0
    2f7a:	4603      	mov	r3, r0
    2f7c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f7e:	79fb      	ldrb	r3, [r7, #7]
    2f80:	4618      	mov	r0, r3
    2f82:	4b1a      	ldr	r3, [pc, #104]	; (2fec <_usb_d_ep_halt_clr+0x78>)
    2f84:	4798      	blx	r3
    2f86:	4603      	mov	r3, r0
    2f88:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f8e:	015b      	lsls	r3, r3, #5
    2f90:	4a17      	ldr	r2, [pc, #92]	; (2ff0 <_usb_d_ep_halt_clr+0x7c>)
    2f92:	4413      	add	r3, r2
    2f94:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	da02      	bge.n	2fa4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2f9e:	f06f 0311 	mvn.w	r3, #17
    2fa2:	e01f      	b.n	2fe4 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2fa4:	79fb      	ldrb	r3, [r7, #7]
    2fa6:	2102      	movs	r1, #2
    2fa8:	4618      	mov	r0, r3
    2faa:	4b12      	ldr	r3, [pc, #72]	; (2ff4 <_usb_d_ep_halt_clr+0x80>)
    2fac:	4798      	blx	r3
    2fae:	4603      	mov	r3, r0
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d016      	beq.n	2fe2 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2fb4:	79fb      	ldrb	r3, [r7, #7]
    2fb6:	2100      	movs	r1, #0
    2fb8:	4618      	mov	r0, r3
    2fba:	4b0e      	ldr	r3, [pc, #56]	; (2ff4 <_usb_d_ep_halt_clr+0x80>)
    2fbc:	4798      	blx	r3
    2fbe:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2fc0:	68fb      	ldr	r3, [r7, #12]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	da01      	bge.n	2fca <_usb_d_ep_halt_clr+0x56>
			return rc;
    2fc6:	68fb      	ldr	r3, [r7, #12]
    2fc8:	e00c      	b.n	2fe4 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2fca:	693b      	ldr	r3, [r7, #16]
    2fcc:	2201      	movs	r2, #1
    2fce:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2fd0:	693b      	ldr	r3, [r7, #16]
    2fd2:	2203      	movs	r2, #3
    2fd4:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2fd6:	693b      	ldr	r3, [r7, #16]
    2fd8:	69db      	ldr	r3, [r3, #28]
    2fda:	79f8      	ldrb	r0, [r7, #7]
    2fdc:	2200      	movs	r2, #0
    2fde:	2103      	movs	r1, #3
    2fe0:	4798      	blx	r3
	}
	return ERR_NONE;
    2fe2:	2300      	movs	r3, #0
}
    2fe4:	4618      	mov	r0, r3
    2fe6:	3718      	adds	r7, #24
    2fe8:	46bd      	mov	sp, r7
    2fea:	bd80      	pop	{r7, pc}
    2fec:	00002775 	.word	0x00002775
    2ff0:	2000056c 	.word	0x2000056c
    2ff4:	00009b29 	.word	0x00009b29

00002ff8 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2ff8:	b580      	push	{r7, lr}
    2ffa:	b082      	sub	sp, #8
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	4603      	mov	r3, r0
    3000:	460a      	mov	r2, r1
    3002:	71fb      	strb	r3, [r7, #7]
    3004:	4613      	mov	r3, r2
    3006:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3008:	79bb      	ldrb	r3, [r7, #6]
    300a:	2b00      	cmp	r3, #0
    300c:	d105      	bne.n	301a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    300e:	79fb      	ldrb	r3, [r7, #7]
    3010:	4618      	mov	r0, r3
    3012:	4b0c      	ldr	r3, [pc, #48]	; (3044 <usb_d_ep_halt+0x4c>)
    3014:	4798      	blx	r3
    3016:	4603      	mov	r3, r0
    3018:	e00f      	b.n	303a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    301a:	79bb      	ldrb	r3, [r7, #6]
    301c:	2b01      	cmp	r3, #1
    301e:	d106      	bne.n	302e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3020:	79fb      	ldrb	r3, [r7, #7]
    3022:	2101      	movs	r1, #1
    3024:	4618      	mov	r0, r3
    3026:	4b08      	ldr	r3, [pc, #32]	; (3048 <usb_d_ep_halt+0x50>)
    3028:	4798      	blx	r3
    302a:	4603      	mov	r3, r0
    302c:	e005      	b.n	303a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    302e:	79fb      	ldrb	r3, [r7, #7]
    3030:	2102      	movs	r1, #2
    3032:	4618      	mov	r0, r3
    3034:	4b04      	ldr	r3, [pc, #16]	; (3048 <usb_d_ep_halt+0x50>)
    3036:	4798      	blx	r3
    3038:	4603      	mov	r3, r0
	}
}
    303a:	4618      	mov	r0, r3
    303c:	3708      	adds	r7, #8
    303e:	46bd      	mov	sp, r7
    3040:	bd80      	pop	{r7, pc}
    3042:	bf00      	nop
    3044:	00002f75 	.word	0x00002f75
    3048:	00009b29 	.word	0x00009b29

0000304c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    304c:	b580      	push	{r7, lr}
    304e:	b086      	sub	sp, #24
    3050:	af00      	add	r7, sp, #0
    3052:	4603      	mov	r3, r0
    3054:	603a      	str	r2, [r7, #0]
    3056:	71fb      	strb	r3, [r7, #7]
    3058:	460b      	mov	r3, r1
    305a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    305c:	79fb      	ldrb	r3, [r7, #7]
    305e:	4618      	mov	r0, r3
    3060:	4b16      	ldr	r3, [pc, #88]	; (30bc <usb_d_ep_register_callback+0x70>)
    3062:	4798      	blx	r3
    3064:	4603      	mov	r3, r0
    3066:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3068:	f997 3017 	ldrsb.w	r3, [r7, #23]
    306c:	015b      	lsls	r3, r3, #5
    306e:	4a14      	ldr	r2, [pc, #80]	; (30c0 <usb_d_ep_register_callback+0x74>)
    3070:	4413      	add	r3, r2
    3072:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3074:	683b      	ldr	r3, [r7, #0]
    3076:	2b00      	cmp	r3, #0
    3078:	d001      	beq.n	307e <usb_d_ep_register_callback+0x32>
    307a:	683b      	ldr	r3, [r7, #0]
    307c:	e000      	b.n	3080 <usb_d_ep_register_callback+0x34>
    307e:	4b11      	ldr	r3, [pc, #68]	; (30c4 <usb_d_ep_register_callback+0x78>)
    3080:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3082:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3086:	2b00      	cmp	r3, #0
    3088:	db13      	blt.n	30b2 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    308a:	79bb      	ldrb	r3, [r7, #6]
    308c:	2b01      	cmp	r3, #1
    308e:	d008      	beq.n	30a2 <usb_d_ep_register_callback+0x56>
    3090:	2b02      	cmp	r3, #2
    3092:	d00a      	beq.n	30aa <usb_d_ep_register_callback+0x5e>
    3094:	2b00      	cmp	r3, #0
    3096:	d000      	beq.n	309a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3098:	e00c      	b.n	30b4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    309a:	693b      	ldr	r3, [r7, #16]
    309c:	68fa      	ldr	r2, [r7, #12]
    309e:	615a      	str	r2, [r3, #20]
		break;
    30a0:	e008      	b.n	30b4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    30a2:	693b      	ldr	r3, [r7, #16]
    30a4:	68fa      	ldr	r2, [r7, #12]
    30a6:	619a      	str	r2, [r3, #24]
		break;
    30a8:	e004      	b.n	30b4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    30aa:	693b      	ldr	r3, [r7, #16]
    30ac:	68fa      	ldr	r2, [r7, #12]
    30ae:	61da      	str	r2, [r3, #28]
		break;
    30b0:	e000      	b.n	30b4 <usb_d_ep_register_callback+0x68>
		return;
    30b2:	bf00      	nop
	}
}
    30b4:	3718      	adds	r7, #24
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop
    30bc:	00002775 	.word	0x00002775
    30c0:	2000056c 	.word	0x2000056c
    30c4:	00002849 	.word	0x00002849

000030c8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    30c8:	b480      	push	{r7}
    30ca:	b085      	sub	sp, #20
    30cc:	af00      	add	r7, sp, #0
    30ce:	4603      	mov	r3, r0
    30d0:	60b9      	str	r1, [r7, #8]
    30d2:	607a      	str	r2, [r7, #4]
    30d4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    30d6:	7bfb      	ldrb	r3, [r7, #15]
    30d8:	f083 0301 	eor.w	r3, r3, #1
    30dc:	b2db      	uxtb	r3, r3
    30de:	2b00      	cmp	r3, #0
    30e0:	d000      	beq.n	30e4 <assert+0x1c>
		__asm("BKPT #0");
    30e2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    30e4:	bf00      	nop
    30e6:	3714      	adds	r7, #20
    30e8:	46bd      	mov	sp, r7
    30ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    30ee:	4770      	bx	lr

000030f0 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    30f0:	b480      	push	{r7}
    30f2:	b085      	sub	sp, #20
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	681b      	ldr	r3, [r3, #0]
    30fe:	60fb      	str	r3, [r7, #12]
    3100:	e008      	b.n	3114 <is_list_element+0x24>
		if (it == element) {
    3102:	68fa      	ldr	r2, [r7, #12]
    3104:	683b      	ldr	r3, [r7, #0]
    3106:	429a      	cmp	r2, r3
    3108:	d101      	bne.n	310e <is_list_element+0x1e>
			return true;
    310a:	2301      	movs	r3, #1
    310c:	e006      	b.n	311c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    310e:	68fb      	ldr	r3, [r7, #12]
    3110:	681b      	ldr	r3, [r3, #0]
    3112:	60fb      	str	r3, [r7, #12]
    3114:	68fb      	ldr	r3, [r7, #12]
    3116:	2b00      	cmp	r3, #0
    3118:	d1f3      	bne.n	3102 <is_list_element+0x12>
		}
	}

	return false;
    311a:	2300      	movs	r3, #0
}
    311c:	4618      	mov	r0, r3
    311e:	3714      	adds	r7, #20
    3120:	46bd      	mov	sp, r7
    3122:	f85d 7b04 	ldr.w	r7, [sp], #4
    3126:	4770      	bx	lr

00003128 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3128:	b580      	push	{r7, lr}
    312a:	b082      	sub	sp, #8
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
    3130:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3132:	6839      	ldr	r1, [r7, #0]
    3134:	6878      	ldr	r0, [r7, #4]
    3136:	4b0f      	ldr	r3, [pc, #60]	; (3174 <list_insert_as_head+0x4c>)
    3138:	4798      	blx	r3
    313a:	4603      	mov	r3, r0
    313c:	2b00      	cmp	r3, #0
    313e:	bf14      	ite	ne
    3140:	2301      	movne	r3, #1
    3142:	2300      	moveq	r3, #0
    3144:	b2db      	uxtb	r3, r3
    3146:	f083 0301 	eor.w	r3, r3, #1
    314a:	b2db      	uxtb	r3, r3
    314c:	f003 0301 	and.w	r3, r3, #1
    3150:	b2db      	uxtb	r3, r3
    3152:	2239      	movs	r2, #57	; 0x39
    3154:	4908      	ldr	r1, [pc, #32]	; (3178 <list_insert_as_head+0x50>)
    3156:	4618      	mov	r0, r3
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <list_insert_as_head+0x54>)
    315a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	681a      	ldr	r2, [r3, #0]
    3160:	683b      	ldr	r3, [r7, #0]
    3162:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	683a      	ldr	r2, [r7, #0]
    3168:	601a      	str	r2, [r3, #0]
}
    316a:	bf00      	nop
    316c:	3708      	adds	r7, #8
    316e:	46bd      	mov	sp, r7
    3170:	bd80      	pop	{r7, pc}
    3172:	bf00      	nop
    3174:	000030f1 	.word	0x000030f1
    3178:	0000d500 	.word	0x0000d500
    317c:	000030c9 	.word	0x000030c9

00003180 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3180:	b480      	push	{r7}
    3182:	b083      	sub	sp, #12
    3184:	af00      	add	r7, sp, #0
    3186:	6078      	str	r0, [r7, #4]
    3188:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	681a      	ldr	r2, [r3, #0]
    318e:	683b      	ldr	r3, [r7, #0]
    3190:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	683a      	ldr	r2, [r7, #0]
    3196:	601a      	str	r2, [r3, #0]
}
    3198:	bf00      	nop
    319a:	370c      	adds	r7, #12
    319c:	46bd      	mov	sp, r7
    319e:	f85d 7b04 	ldr.w	r7, [sp], #4
    31a2:	4770      	bx	lr

000031a4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    31a4:	b580      	push	{r7, lr}
    31a6:	b084      	sub	sp, #16
    31a8:	af00      	add	r7, sp, #0
    31aa:	6078      	str	r0, [r7, #4]
    31ac:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	681b      	ldr	r3, [r3, #0]
    31b2:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    31b4:	6839      	ldr	r1, [r7, #0]
    31b6:	6878      	ldr	r0, [r7, #4]
    31b8:	4b16      	ldr	r3, [pc, #88]	; (3214 <list_insert_at_end+0x70>)
    31ba:	4798      	blx	r3
    31bc:	4603      	mov	r3, r0
    31be:	2b00      	cmp	r3, #0
    31c0:	bf14      	ite	ne
    31c2:	2301      	movne	r3, #1
    31c4:	2300      	moveq	r3, #0
    31c6:	b2db      	uxtb	r3, r3
    31c8:	f083 0301 	eor.w	r3, r3, #1
    31cc:	b2db      	uxtb	r3, r3
    31ce:	f003 0301 	and.w	r3, r3, #1
    31d2:	b2db      	uxtb	r3, r3
    31d4:	224f      	movs	r2, #79	; 0x4f
    31d6:	4910      	ldr	r1, [pc, #64]	; (3218 <list_insert_at_end+0x74>)
    31d8:	4618      	mov	r0, r3
    31da:	4b10      	ldr	r3, [pc, #64]	; (321c <list_insert_at_end+0x78>)
    31dc:	4798      	blx	r3

	if (!list->head) {
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	681b      	ldr	r3, [r3, #0]
    31e2:	2b00      	cmp	r3, #0
    31e4:	d109      	bne.n	31fa <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	683a      	ldr	r2, [r7, #0]
    31ea:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    31ec:	683b      	ldr	r3, [r7, #0]
    31ee:	2200      	movs	r2, #0
    31f0:	601a      	str	r2, [r3, #0]
		return;
    31f2:	e00c      	b.n	320e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	681b      	ldr	r3, [r3, #0]
    31fe:	2b00      	cmp	r3, #0
    3200:	d1f8      	bne.n	31f4 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3202:	68fb      	ldr	r3, [r7, #12]
    3204:	683a      	ldr	r2, [r7, #0]
    3206:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3208:	683b      	ldr	r3, [r7, #0]
    320a:	2200      	movs	r2, #0
    320c:	601a      	str	r2, [r3, #0]
}
    320e:	3710      	adds	r7, #16
    3210:	46bd      	mov	sp, r7
    3212:	bd80      	pop	{r7, pc}
    3214:	000030f1 	.word	0x000030f1
    3218:	0000d500 	.word	0x0000d500
    321c:	000030c9 	.word	0x000030c9

00003220 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3220:	b480      	push	{r7}
    3222:	b085      	sub	sp, #20
    3224:	af00      	add	r7, sp, #0
    3226:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	681b      	ldr	r3, [r3, #0]
    322c:	2b00      	cmp	r3, #0
    322e:	d009      	beq.n	3244 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	681b      	ldr	r3, [r3, #0]
    3234:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	681b      	ldr	r3, [r3, #0]
    323a:	681a      	ldr	r2, [r3, #0]
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3240:	68fb      	ldr	r3, [r7, #12]
    3242:	e000      	b.n	3246 <list_remove_head+0x26>
	}

	return NULL;
    3244:	2300      	movs	r3, #0
}
    3246:	4618      	mov	r0, r3
    3248:	3714      	adds	r7, #20
    324a:	46bd      	mov	sp, r7
    324c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3250:	4770      	bx	lr

00003252 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3252:	b480      	push	{r7}
    3254:	b085      	sub	sp, #20
    3256:	af00      	add	r7, sp, #0
    3258:	6078      	str	r0, [r7, #4]
    325a:	6039      	str	r1, [r7, #0]
	if (!element) {
    325c:	683b      	ldr	r3, [r7, #0]
    325e:	2b00      	cmp	r3, #0
    3260:	d101      	bne.n	3266 <list_delete_element+0x14>
		return false;
    3262:	2300      	movs	r3, #0
    3264:	e024      	b.n	32b0 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	681a      	ldr	r2, [r3, #0]
    326a:	683b      	ldr	r3, [r7, #0]
    326c:	429a      	cmp	r2, r3
    326e:	d106      	bne.n	327e <list_delete_element+0x2c>
		list->head = list->head->next;
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	681b      	ldr	r3, [r3, #0]
    3274:	681a      	ldr	r2, [r3, #0]
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	601a      	str	r2, [r3, #0]
		return true;
    327a:	2301      	movs	r3, #1
    327c:	e018      	b.n	32b0 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	681b      	ldr	r3, [r3, #0]
    3282:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3284:	e002      	b.n	328c <list_delete_element+0x3a>
			it = it->next;
    3286:	68fb      	ldr	r3, [r7, #12]
    3288:	681b      	ldr	r3, [r3, #0]
    328a:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    328c:	68fb      	ldr	r3, [r7, #12]
    328e:	2b00      	cmp	r3, #0
    3290:	d004      	beq.n	329c <list_delete_element+0x4a>
    3292:	68fb      	ldr	r3, [r7, #12]
    3294:	681a      	ldr	r2, [r3, #0]
    3296:	683b      	ldr	r3, [r7, #0]
    3298:	429a      	cmp	r2, r3
    329a:	d1f4      	bne.n	3286 <list_delete_element+0x34>
		}
		if (it) {
    329c:	68fb      	ldr	r3, [r7, #12]
    329e:	2b00      	cmp	r3, #0
    32a0:	d005      	beq.n	32ae <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    32a2:	683b      	ldr	r3, [r7, #0]
    32a4:	681a      	ldr	r2, [r3, #0]
    32a6:	68fb      	ldr	r3, [r7, #12]
    32a8:	601a      	str	r2, [r3, #0]
			return true;
    32aa:	2301      	movs	r3, #1
    32ac:	e000      	b.n	32b0 <list_delete_element+0x5e>
		}
	}

	return false;
    32ae:	2300      	movs	r3, #0
}
    32b0:	4618      	mov	r0, r3
    32b2:	3714      	adds	r7, #20
    32b4:	46bd      	mov	sp, r7
    32b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    32ba:	4770      	bx	lr

000032bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    32bc:	b480      	push	{r7}
    32be:	b083      	sub	sp, #12
    32c0:	af00      	add	r7, sp, #0
    32c2:	4603      	mov	r3, r0
    32c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    32c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32ca:	2b00      	cmp	r3, #0
    32cc:	db0b      	blt.n	32e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32ce:	4909      	ldr	r1, [pc, #36]	; (32f4 <__NVIC_EnableIRQ+0x38>)
    32d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32d4:	095b      	lsrs	r3, r3, #5
    32d6:	88fa      	ldrh	r2, [r7, #6]
    32d8:	f002 021f 	and.w	r2, r2, #31
    32dc:	2001      	movs	r0, #1
    32de:	fa00 f202 	lsl.w	r2, r0, r2
    32e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    32e6:	bf00      	nop
    32e8:	370c      	adds	r7, #12
    32ea:	46bd      	mov	sp, r7
    32ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f0:	4770      	bx	lr
    32f2:	bf00      	nop
    32f4:	e000e100 	.word	0xe000e100

000032f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    32f8:	b480      	push	{r7}
    32fa:	b083      	sub	sp, #12
    32fc:	af00      	add	r7, sp, #0
    32fe:	4603      	mov	r3, r0
    3300:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3306:	2b00      	cmp	r3, #0
    3308:	db10      	blt.n	332c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    330a:	490b      	ldr	r1, [pc, #44]	; (3338 <__NVIC_DisableIRQ+0x40>)
    330c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3310:	095b      	lsrs	r3, r3, #5
    3312:	88fa      	ldrh	r2, [r7, #6]
    3314:	f002 021f 	and.w	r2, r2, #31
    3318:	2001      	movs	r0, #1
    331a:	fa00 f202 	lsl.w	r2, r0, r2
    331e:	3320      	adds	r3, #32
    3320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3328:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    332c:	bf00      	nop
    332e:	370c      	adds	r7, #12
    3330:	46bd      	mov	sp, r7
    3332:	f85d 7b04 	ldr.w	r7, [sp], #4
    3336:	4770      	bx	lr
    3338:	e000e100 	.word	0xe000e100

0000333c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    333c:	b480      	push	{r7}
    333e:	b083      	sub	sp, #12
    3340:	af00      	add	r7, sp, #0
    3342:	4603      	mov	r3, r0
    3344:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    334a:	2b00      	cmp	r3, #0
    334c:	db0c      	blt.n	3368 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    334e:	4909      	ldr	r1, [pc, #36]	; (3374 <__NVIC_ClearPendingIRQ+0x38>)
    3350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3354:	095b      	lsrs	r3, r3, #5
    3356:	88fa      	ldrh	r2, [r7, #6]
    3358:	f002 021f 	and.w	r2, r2, #31
    335c:	2001      	movs	r0, #1
    335e:	fa00 f202 	lsl.w	r2, r0, r2
    3362:	3360      	adds	r3, #96	; 0x60
    3364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3368:	bf00      	nop
    336a:	370c      	adds	r7, #12
    336c:	46bd      	mov	sp, r7
    336e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3372:	4770      	bx	lr
    3374:	e000e100 	.word	0xe000e100

00003378 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3378:	b480      	push	{r7}
    337a:	b083      	sub	sp, #12
    337c:	af00      	add	r7, sp, #0
    337e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3384:	095b      	lsrs	r3, r3, #5
    3386:	f003 0301 	and.w	r3, r3, #1
    338a:	2b00      	cmp	r3, #0
    338c:	bf14      	ite	ne
    338e:	2301      	movne	r3, #1
    3390:	2300      	moveq	r3, #0
    3392:	b2db      	uxtb	r3, r3
}
    3394:	4618      	mov	r0, r3
    3396:	370c      	adds	r7, #12
    3398:	46bd      	mov	sp, r7
    339a:	f85d 7b04 	ldr.w	r7, [sp], #4
    339e:	4770      	bx	lr

000033a0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    33a0:	b480      	push	{r7}
    33a2:	b083      	sub	sp, #12
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
    33a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    33aa:	687b      	ldr	r3, [r7, #4]
    33ac:	683a      	ldr	r2, [r7, #0]
    33ae:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    33b0:	bf00      	nop
    33b2:	370c      	adds	r7, #12
    33b4:	46bd      	mov	sp, r7
    33b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ba:	4770      	bx	lr

000033bc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    33bc:	b480      	push	{r7}
    33be:	b083      	sub	sp, #12
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
    33c4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	683a      	ldr	r2, [r7, #0]
    33ca:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    33cc:	bf00      	nop
    33ce:	370c      	adds	r7, #12
    33d0:	46bd      	mov	sp, r7
    33d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d6:	4770      	bx	lr

000033d8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    33d8:	b480      	push	{r7}
    33da:	b083      	sub	sp, #12
    33dc:	af00      	add	r7, sp, #0
    33de:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	699b      	ldr	r3, [r3, #24]
    33e4:	f043 0201 	orr.w	r2, r3, #1
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    33ec:	bf00      	nop
    33ee:	370c      	adds	r7, #12
    33f0:	46bd      	mov	sp, r7
    33f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33f6:	4770      	bx	lr

000033f8 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    33f8:	b480      	push	{r7}
    33fa:	b085      	sub	sp, #20
    33fc:	af00      	add	r7, sp, #0
    33fe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	699b      	ldr	r3, [r3, #24]
    3404:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3406:	68fb      	ldr	r3, [r7, #12]
    3408:	f003 0301 	and.w	r3, r3, #1
    340c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    340e:	68fb      	ldr	r3, [r7, #12]
    3410:	2b00      	cmp	r3, #0
    3412:	bf14      	ite	ne
    3414:	2301      	movne	r3, #1
    3416:	2300      	moveq	r3, #0
    3418:	b2db      	uxtb	r3, r3
}
    341a:	4618      	mov	r0, r3
    341c:	3714      	adds	r7, #20
    341e:	46bd      	mov	sp, r7
    3420:	f85d 7b04 	ldr.w	r7, [sp], #4
    3424:	4770      	bx	lr

00003426 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3426:	b480      	push	{r7}
    3428:	b083      	sub	sp, #12
    342a:	af00      	add	r7, sp, #0
    342c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    342e:	687b      	ldr	r3, [r7, #4]
    3430:	699b      	ldr	r3, [r3, #24]
    3432:	f023 0201 	bic.w	r2, r3, #1
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    343a:	bf00      	nop
    343c:	370c      	adds	r7, #12
    343e:	46bd      	mov	sp, r7
    3440:	f85d 7b04 	ldr.w	r7, [sp], #4
    3444:	4770      	bx	lr

00003446 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3446:	b480      	push	{r7}
    3448:	b083      	sub	sp, #12
    344a:	af00      	add	r7, sp, #0
    344c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	699b      	ldr	r3, [r3, #24]
    3452:	f043 0202 	orr.w	r2, r3, #2
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    345a:	bf00      	nop
    345c:	370c      	adds	r7, #12
    345e:	46bd      	mov	sp, r7
    3460:	f85d 7b04 	ldr.w	r7, [sp], #4
    3464:	4770      	bx	lr

00003466 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3466:	b480      	push	{r7}
    3468:	b083      	sub	sp, #12
    346a:	af00      	add	r7, sp, #0
    346c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	699b      	ldr	r3, [r3, #24]
    3472:	f023 0202 	bic.w	r2, r3, #2
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    347a:	bf00      	nop
    347c:	370c      	adds	r7, #12
    347e:	46bd      	mov	sp, r7
    3480:	f85d 7b04 	ldr.w	r7, [sp], #4
    3484:	4770      	bx	lr

00003486 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3486:	b480      	push	{r7}
    3488:	b083      	sub	sp, #12
    348a:	af00      	add	r7, sp, #0
    348c:	6078      	str	r0, [r7, #4]
    348e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	699a      	ldr	r2, [r3, #24]
    3494:	683b      	ldr	r3, [r7, #0]
    3496:	431a      	orrs	r2, r3
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    349c:	bf00      	nop
    349e:	370c      	adds	r7, #12
    34a0:	46bd      	mov	sp, r7
    34a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34a6:	4770      	bx	lr

000034a8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    34a8:	b480      	push	{r7}
    34aa:	b083      	sub	sp, #12
    34ac:	af00      	add	r7, sp, #0
    34ae:	6078      	str	r0, [r7, #4]
    34b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    34b8:	bf00      	nop
    34ba:	370c      	adds	r7, #12
    34bc:	46bd      	mov	sp, r7
    34be:	f85d 7b04 	ldr.w	r7, [sp], #4
    34c2:	4770      	bx	lr

000034c4 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    34c4:	b480      	push	{r7}
    34c6:	b083      	sub	sp, #12
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
    34cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	683a      	ldr	r2, [r7, #0]
    34d2:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    34d4:	bf00      	nop
    34d6:	370c      	adds	r7, #12
    34d8:	46bd      	mov	sp, r7
    34da:	f85d 7b04 	ldr.w	r7, [sp], #4
    34de:	4770      	bx	lr

000034e0 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    34e0:	b480      	push	{r7}
    34e2:	b083      	sub	sp, #12
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    34ec:	4618      	mov	r0, r3
    34ee:	370c      	adds	r7, #12
    34f0:	46bd      	mov	sp, r7
    34f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34f6:	4770      	bx	lr

000034f8 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    34f8:	b480      	push	{r7}
    34fa:	b083      	sub	sp, #12
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	683a      	ldr	r2, [r7, #0]
    3506:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3508:	bf00      	nop
    350a:	370c      	adds	r7, #12
    350c:	46bd      	mov	sp, r7
    350e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3512:	4770      	bx	lr

00003514 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3514:	b480      	push	{r7}
    3516:	b083      	sub	sp, #12
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
    351c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	683a      	ldr	r2, [r7, #0]
    3522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3526:	bf00      	nop
    3528:	370c      	adds	r7, #12
    352a:	46bd      	mov	sp, r7
    352c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3530:	4770      	bx	lr

00003532 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3532:	b480      	push	{r7}
    3534:	b083      	sub	sp, #12
    3536:	af00      	add	r7, sp, #0
    3538:	6078      	str	r0, [r7, #4]
    353a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	683a      	ldr	r2, [r7, #0]
    3540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3544:	bf00      	nop
    3546:	370c      	adds	r7, #12
    3548:	46bd      	mov	sp, r7
    354a:	f85d 7b04 	ldr.w	r7, [sp], #4
    354e:	4770      	bx	lr

00003550 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3550:	b480      	push	{r7}
    3552:	b083      	sub	sp, #12
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
    3558:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	683a      	ldr	r2, [r7, #0]
    355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3562:	bf00      	nop
    3564:	370c      	adds	r7, #12
    3566:	46bd      	mov	sp, r7
    3568:	f85d 7b04 	ldr.w	r7, [sp], #4
    356c:	4770      	bx	lr

0000356e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    356e:	b480      	push	{r7}
    3570:	b083      	sub	sp, #12
    3572:	af00      	add	r7, sp, #0
    3574:	6078      	str	r0, [r7, #4]
    3576:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	683a      	ldr	r2, [r7, #0]
    357c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3580:	bf00      	nop
    3582:	370c      	adds	r7, #12
    3584:	46bd      	mov	sp, r7
    3586:	f85d 7b04 	ldr.w	r7, [sp], #4
    358a:	4770      	bx	lr

0000358c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    358c:	b480      	push	{r7}
    358e:	b083      	sub	sp, #12
    3590:	af00      	add	r7, sp, #0
    3592:	6078      	str	r0, [r7, #4]
    3594:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	683a      	ldr	r2, [r7, #0]
    359a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    359e:	bf00      	nop
    35a0:	370c      	adds	r7, #12
    35a2:	46bd      	mov	sp, r7
    35a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    35a8:	4770      	bx	lr

000035aa <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    35aa:	b480      	push	{r7}
    35ac:	b083      	sub	sp, #12
    35ae:	af00      	add	r7, sp, #0
    35b0:	6078      	str	r0, [r7, #4]
    35b2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	683a      	ldr	r2, [r7, #0]
    35b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    35bc:	bf00      	nop
    35be:	370c      	adds	r7, #12
    35c0:	46bd      	mov	sp, r7
    35c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    35c6:	4770      	bx	lr

000035c8 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    35c8:	b480      	push	{r7}
    35ca:	b083      	sub	sp, #12
    35cc:	af00      	add	r7, sp, #0
    35ce:	6078      	str	r0, [r7, #4]
    35d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	683a      	ldr	r2, [r7, #0]
    35d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35da:	bf00      	nop
    35dc:	370c      	adds	r7, #12
    35de:	46bd      	mov	sp, r7
    35e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35e4:	4770      	bx	lr

000035e6 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    35e6:	b480      	push	{r7}
    35e8:	b083      	sub	sp, #12
    35ea:	af00      	add	r7, sp, #0
    35ec:	6078      	str	r0, [r7, #4]
    35ee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	683a      	ldr	r2, [r7, #0]
    35f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    35f8:	bf00      	nop
    35fa:	370c      	adds	r7, #12
    35fc:	46bd      	mov	sp, r7
    35fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3602:	4770      	bx	lr

00003604 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3604:	b480      	push	{r7}
    3606:	b083      	sub	sp, #12
    3608:	af00      	add	r7, sp, #0
    360a:	6078      	str	r0, [r7, #4]
    360c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	683a      	ldr	r2, [r7, #0]
    3612:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3616:	bf00      	nop
    3618:	370c      	adds	r7, #12
    361a:	46bd      	mov	sp, r7
    361c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3620:	4770      	bx	lr
	...

00003624 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3624:	b580      	push	{r7, lr}
    3626:	b082      	sub	sp, #8
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
    362c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	683a      	ldr	r2, [r7, #0]
    3632:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	681b      	ldr	r3, [r3, #0]
    3638:	4618      	mov	r0, r3
    363a:	4b55      	ldr	r3, [pc, #340]	; (3790 <_can_async_init+0x16c>)
    363c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    363e:	bf00      	nop
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	681b      	ldr	r3, [r3, #0]
    3644:	4618      	mov	r0, r3
    3646:	4b53      	ldr	r3, [pc, #332]	; (3794 <_can_async_init+0x170>)
    3648:	4798      	blx	r3
    364a:	4603      	mov	r3, r0
    364c:	f083 0301 	eor.w	r3, r3, #1
    3650:	b2db      	uxtb	r3, r3
    3652:	2b00      	cmp	r3, #0
    3654:	d1f4      	bne.n	3640 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	681b      	ldr	r3, [r3, #0]
    365a:	4618      	mov	r0, r3
    365c:	4b4e      	ldr	r3, [pc, #312]	; (3798 <_can_async_init+0x174>)
    365e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3660:	683b      	ldr	r3, [r7, #0]
    3662:	4a4e      	ldr	r2, [pc, #312]	; (379c <_can_async_init+0x178>)
    3664:	4293      	cmp	r3, r2
    3666:	d17a      	bne.n	375e <_can_async_init+0x13a>
		_can1_dev    = dev;
    3668:	4a4d      	ldr	r2, [pc, #308]	; (37a0 <_can_async_init+0x17c>)
    366a:	687b      	ldr	r3, [r7, #4]
    366c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    366e:	687b      	ldr	r3, [r7, #4]
    3670:	4a4c      	ldr	r2, [pc, #304]	; (37a4 <_can_async_init+0x180>)
    3672:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	681b      	ldr	r3, [r3, #0]
    3678:	f44f 7140 	mov.w	r1, #768	; 0x300
    367c:	4618      	mov	r0, r3
    367e:	4b4a      	ldr	r3, [pc, #296]	; (37a8 <_can_async_init+0x184>)
    3680:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	2102      	movs	r1, #2
    3688:	4618      	mov	r0, r3
    368a:	4b48      	ldr	r3, [pc, #288]	; (37ac <_can_async_init+0x188>)
    368c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	681b      	ldr	r3, [r3, #0]
    3692:	4947      	ldr	r1, [pc, #284]	; (37b0 <_can_async_init+0x18c>)
    3694:	4618      	mov	r0, r3
    3696:	4b47      	ldr	r3, [pc, #284]	; (37b4 <_can_async_init+0x190>)
    3698:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	681b      	ldr	r3, [r3, #0]
    369e:	4946      	ldr	r1, [pc, #280]	; (37b8 <_can_async_init+0x194>)
    36a0:	4618      	mov	r0, r3
    36a2:	4b46      	ldr	r3, [pc, #280]	; (37bc <_can_async_init+0x198>)
    36a4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	681a      	ldr	r2, [r3, #0]
    36aa:	4b45      	ldr	r3, [pc, #276]	; (37c0 <_can_async_init+0x19c>)
    36ac:	b29b      	uxth	r3, r3
    36ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    36b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    36b6:	4619      	mov	r1, r3
    36b8:	4610      	mov	r0, r2
    36ba:	4b42      	ldr	r3, [pc, #264]	; (37c4 <_can_async_init+0x1a0>)
    36bc:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    36be:	687b      	ldr	r3, [r7, #4]
    36c0:	681b      	ldr	r3, [r3, #0]
    36c2:	2107      	movs	r1, #7
    36c4:	4618      	mov	r0, r3
    36c6:	4b40      	ldr	r3, [pc, #256]	; (37c8 <_can_async_init+0x1a4>)
    36c8:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	2107      	movs	r1, #7
    36d0:	4618      	mov	r0, r3
    36d2:	4b3e      	ldr	r3, [pc, #248]	; (37cc <_can_async_init+0x1a8>)
    36d4:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	681a      	ldr	r2, [r3, #0]
    36da:	4b3d      	ldr	r3, [pc, #244]	; (37d0 <_can_async_init+0x1ac>)
    36dc:	b29b      	uxth	r3, r3
    36de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    36e2:	4619      	mov	r1, r3
    36e4:	4610      	mov	r0, r2
    36e6:	4b3b      	ldr	r3, [pc, #236]	; (37d4 <_can_async_init+0x1b0>)
    36e8:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	681a      	ldr	r2, [r3, #0]
    36ee:	4b3a      	ldr	r3, [pc, #232]	; (37d8 <_can_async_init+0x1b4>)
    36f0:	b29b      	uxth	r3, r3
    36f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36f6:	4619      	mov	r1, r3
    36f8:	4610      	mov	r0, r2
    36fa:	4b38      	ldr	r3, [pc, #224]	; (37dc <_can_async_init+0x1b8>)
    36fc:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	2108      	movs	r1, #8
    3704:	4618      	mov	r0, r3
    3706:	4b36      	ldr	r3, [pc, #216]	; (37e0 <_can_async_init+0x1bc>)
    3708:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	681a      	ldr	r2, [r3, #0]
    370e:	4b35      	ldr	r3, [pc, #212]	; (37e4 <_can_async_init+0x1c0>)
    3710:	b29b      	uxth	r3, r3
    3712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3716:	4619      	mov	r1, r3
    3718:	4610      	mov	r0, r2
    371a:	4b33      	ldr	r3, [pc, #204]	; (37e8 <_can_async_init+0x1c4>)
    371c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    371e:	687b      	ldr	r3, [r7, #4]
    3720:	681a      	ldr	r2, [r3, #0]
    3722:	4b32      	ldr	r3, [pc, #200]	; (37ec <_can_async_init+0x1c8>)
    3724:	b29b      	uxth	r3, r3
    3726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    372a:	4619      	mov	r1, r3
    372c:	4610      	mov	r0, r2
    372e:	4b30      	ldr	r3, [pc, #192]	; (37f0 <_can_async_init+0x1cc>)
    3730:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	681b      	ldr	r3, [r3, #0]
    3736:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    373a:	4618      	mov	r0, r3
    373c:	4b2d      	ldr	r3, [pc, #180]	; (37f4 <_can_async_init+0x1d0>)
    373e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3740:	204f      	movs	r0, #79	; 0x4f
    3742:	4b2d      	ldr	r3, [pc, #180]	; (37f8 <_can_async_init+0x1d4>)
    3744:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3746:	204f      	movs	r0, #79	; 0x4f
    3748:	4b2c      	ldr	r3, [pc, #176]	; (37fc <_can_async_init+0x1d8>)
    374a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    374c:	204f      	movs	r0, #79	; 0x4f
    374e:	4b2c      	ldr	r3, [pc, #176]	; (3800 <_can_async_init+0x1dc>)
    3750:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3752:	687b      	ldr	r3, [r7, #4]
    3754:	681b      	ldr	r3, [r3, #0]
    3756:	2101      	movs	r1, #1
    3758:	4618      	mov	r0, r3
    375a:	4b2a      	ldr	r3, [pc, #168]	; (3804 <_can_async_init+0x1e0>)
    375c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    375e:	687b      	ldr	r3, [r7, #4]
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	4618      	mov	r0, r3
    3764:	4b28      	ldr	r3, [pc, #160]	; (3808 <_can_async_init+0x1e4>)
    3766:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	681b      	ldr	r3, [r3, #0]
    376c:	4618      	mov	r0, r3
    376e:	4b27      	ldr	r3, [pc, #156]	; (380c <_can_async_init+0x1e8>)
    3770:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3772:	bf00      	nop
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	4618      	mov	r0, r3
    377a:	4b06      	ldr	r3, [pc, #24]	; (3794 <_can_async_init+0x170>)
    377c:	4798      	blx	r3
    377e:	4603      	mov	r3, r0
    3780:	2b00      	cmp	r3, #0
    3782:	d1f7      	bne.n	3774 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3784:	2300      	movs	r3, #0
}
    3786:	4618      	mov	r0, r3
    3788:	3708      	adds	r7, #8
    378a:	46bd      	mov	sp, r7
    378c:	bd80      	pop	{r7, pc}
    378e:	bf00      	nop
    3790:	000033d9 	.word	0x000033d9
    3794:	000033f9 	.word	0x000033f9
    3798:	00003447 	.word	0x00003447
    379c:	42000400 	.word	0x42000400
    37a0:	2000068c 	.word	0x2000068c
    37a4:	20000004 	.word	0x20000004
    37a8:	00003487 	.word	0x00003487
    37ac:	000033a1 	.word	0x000033a1
    37b0:	00010c01 	.word	0x00010c01
    37b4:	000034a9 	.word	0x000034a9
    37b8:	00010c10 	.word	0x00010c10
    37bc:	000033bd 	.word	0x000033bd
    37c0:	20000dd0 	.word	0x20000dd0
    37c4:	0000358d 	.word	0x0000358d
    37c8:	000035ab 	.word	0x000035ab
    37cc:	000035e7 	.word	0x000035e7
    37d0:	20000d88 	.word	0x20000d88
    37d4:	000035c9 	.word	0x000035c9
    37d8:	200005ec 	.word	0x200005ec
    37dc:	00003605 	.word	0x00003605
    37e0:	00003515 	.word	0x00003515
    37e4:	200005fc 	.word	0x200005fc
    37e8:	00003533 	.word	0x00003533
    37ec:	2000067c 	.word	0x2000067c
    37f0:	00003551 	.word	0x00003551
    37f4:	0000356f 	.word	0x0000356f
    37f8:	000032f9 	.word	0x000032f9
    37fc:	0000333d 	.word	0x0000333d
    3800:	000032bd 	.word	0x000032bd
    3804:	000034f9 	.word	0x000034f9
    3808:	00003467 	.word	0x00003467
    380c:	00003427 	.word	0x00003427

00003810 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3810:	b590      	push	{r4, r7, lr}
    3812:	b083      	sub	sp, #12
    3814:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3816:	4b2c      	ldr	r3, [pc, #176]	; (38c8 <CAN1_Handler+0xb8>)
    3818:	681b      	ldr	r3, [r3, #0]
    381a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	681b      	ldr	r3, [r3, #0]
    3820:	4618      	mov	r0, r3
    3822:	4b2a      	ldr	r3, [pc, #168]	; (38cc <CAN1_Handler+0xbc>)
    3824:	4798      	blx	r3
    3826:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3828:	683b      	ldr	r3, [r7, #0]
    382a:	f003 0301 	and.w	r3, r3, #1
    382e:	2b00      	cmp	r3, #0
    3830:	d003      	beq.n	383a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	689b      	ldr	r3, [r3, #8]
    3836:	6878      	ldr	r0, [r7, #4]
    3838:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    383a:	683b      	ldr	r3, [r7, #0]
    383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3840:	2b00      	cmp	r3, #0
    3842:	d003      	beq.n	384c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	685b      	ldr	r3, [r3, #4]
    3848:	6878      	ldr	r0, [r7, #4]
    384a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    384c:	683b      	ldr	r3, [r7, #0]
    384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3852:	2b00      	cmp	r3, #0
    3854:	d004      	beq.n	3860 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	68db      	ldr	r3, [r3, #12]
    385a:	2103      	movs	r1, #3
    385c:	6878      	ldr	r0, [r7, #4]
    385e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3866:	2b00      	cmp	r3, #0
    3868:	d004      	beq.n	3874 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	68db      	ldr	r3, [r3, #12]
    386e:	2100      	movs	r1, #0
    3870:	6878      	ldr	r0, [r7, #4]
    3872:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3874:	683b      	ldr	r3, [r7, #0]
    3876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    387a:	2b00      	cmp	r3, #0
    387c:	d00f      	beq.n	389e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	68dc      	ldr	r4, [r3, #12]
    3882:	687b      	ldr	r3, [r7, #4]
    3884:	681b      	ldr	r3, [r3, #0]
    3886:	4618      	mov	r0, r3
    3888:	4b11      	ldr	r3, [pc, #68]	; (38d0 <CAN1_Handler+0xc0>)
    388a:	4798      	blx	r3
    388c:	4603      	mov	r3, r0
    388e:	2b00      	cmp	r3, #0
    3890:	d001      	beq.n	3896 <CAN1_Handler+0x86>
    3892:	2302      	movs	r3, #2
    3894:	e000      	b.n	3898 <CAN1_Handler+0x88>
    3896:	2301      	movs	r3, #1
    3898:	4619      	mov	r1, r3
    389a:	6878      	ldr	r0, [r7, #4]
    389c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    389e:	683b      	ldr	r3, [r7, #0]
    38a0:	f003 0308 	and.w	r3, r3, #8
    38a4:	2b00      	cmp	r3, #0
    38a6:	d004      	beq.n	38b2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    38a8:	687b      	ldr	r3, [r7, #4]
    38aa:	68db      	ldr	r3, [r3, #12]
    38ac:	2104      	movs	r1, #4
    38ae:	6878      	ldr	r0, [r7, #4]
    38b0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	6839      	ldr	r1, [r7, #0]
    38b8:	4618      	mov	r0, r3
    38ba:	4b06      	ldr	r3, [pc, #24]	; (38d4 <CAN1_Handler+0xc4>)
    38bc:	4798      	blx	r3
}
    38be:	bf00      	nop
    38c0:	370c      	adds	r7, #12
    38c2:	46bd      	mov	sp, r7
    38c4:	bd90      	pop	{r4, r7, pc}
    38c6:	bf00      	nop
    38c8:	2000068c 	.word	0x2000068c
    38cc:	000034e1 	.word	0x000034e1
    38d0:	00003379 	.word	0x00003379
    38d4:	000034c5 	.word	0x000034c5

000038d8 <__NVIC_SetPendingIRQ>:
{
    38d8:	b480      	push	{r7}
    38da:	b083      	sub	sp, #12
    38dc:	af00      	add	r7, sp, #0
    38de:	4603      	mov	r3, r0
    38e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    38e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    38e6:	2b00      	cmp	r3, #0
    38e8:	db0c      	blt.n	3904 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38ea:	4909      	ldr	r1, [pc, #36]	; (3910 <__NVIC_SetPendingIRQ+0x38>)
    38ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    38f0:	095b      	lsrs	r3, r3, #5
    38f2:	88fa      	ldrh	r2, [r7, #6]
    38f4:	f002 021f 	and.w	r2, r2, #31
    38f8:	2001      	movs	r0, #1
    38fa:	fa00 f202 	lsl.w	r2, r0, r2
    38fe:	3340      	adds	r3, #64	; 0x40
    3900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3904:	bf00      	nop
    3906:	370c      	adds	r7, #12
    3908:	46bd      	mov	sp, r7
    390a:	f85d 7b04 	ldr.w	r7, [sp], #4
    390e:	4770      	bx	lr
    3910:	e000e100 	.word	0xe000e100

00003914 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3914:	b580      	push	{r7, lr}
    3916:	b082      	sub	sp, #8
    3918:	af00      	add	r7, sp, #0
    391a:	4603      	mov	r3, r0
    391c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    391e:	79fb      	ldrb	r3, [r7, #7]
    3920:	b21b      	sxth	r3, r3
    3922:	4618      	mov	r0, r3
    3924:	4b02      	ldr	r3, [pc, #8]	; (3930 <_irq_set+0x1c>)
    3926:	4798      	blx	r3
}
    3928:	bf00      	nop
    392a:	3708      	adds	r7, #8
    392c:	46bd      	mov	sp, r7
    392e:	bd80      	pop	{r7, pc}
    3930:	000038d9 	.word	0x000038d9

00003934 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3934:	b480      	push	{r7}
    3936:	b083      	sub	sp, #12
    3938:	af00      	add	r7, sp, #0
    393a:	4603      	mov	r3, r0
    393c:	6039      	str	r1, [r7, #0]
    393e:	80fb      	strh	r3, [r7, #6]
    3940:	4613      	mov	r3, r2
    3942:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3944:	797b      	ldrb	r3, [r7, #5]
    3946:	3b04      	subs	r3, #4
    3948:	2b05      	cmp	r3, #5
    394a:	d86b      	bhi.n	3a24 <_get_cycles_for_us_internal+0xf0>
    394c:	a201      	add	r2, pc, #4	; (adr r2, 3954 <_get_cycles_for_us_internal+0x20>)
    394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3952:	bf00      	nop
    3954:	00003a03 	.word	0x00003a03
    3958:	000039e3 	.word	0x000039e3
    395c:	000039c5 	.word	0x000039c5
    3960:	000039a7 	.word	0x000039a7
    3964:	00003989 	.word	0x00003989
    3968:	0000396d 	.word	0x0000396d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    396c:	88fb      	ldrh	r3, [r7, #6]
    396e:	683a      	ldr	r2, [r7, #0]
    3970:	4935      	ldr	r1, [pc, #212]	; (3a48 <_get_cycles_for_us_internal+0x114>)
    3972:	fba1 1202 	umull	r1, r2, r1, r2
    3976:	0c92      	lsrs	r2, r2, #18
    3978:	fb02 f303 	mul.w	r3, r2, r3
    397c:	3302      	adds	r3, #2
    397e:	4a33      	ldr	r2, [pc, #204]	; (3a4c <_get_cycles_for_us_internal+0x118>)
    3980:	fba2 2303 	umull	r2, r3, r2, r3
    3984:	085b      	lsrs	r3, r3, #1
    3986:	e059      	b.n	3a3c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3988:	88fb      	ldrh	r3, [r7, #6]
    398a:	683a      	ldr	r2, [r7, #0]
    398c:	0952      	lsrs	r2, r2, #5
    398e:	4930      	ldr	r1, [pc, #192]	; (3a50 <_get_cycles_for_us_internal+0x11c>)
    3990:	fba1 1202 	umull	r1, r2, r1, r2
    3994:	09d2      	lsrs	r2, r2, #7
    3996:	fb02 f303 	mul.w	r3, r2, r3
    399a:	331d      	adds	r3, #29
    399c:	4a2d      	ldr	r2, [pc, #180]	; (3a54 <_get_cycles_for_us_internal+0x120>)
    399e:	fba2 2303 	umull	r2, r3, r2, r3
    39a2:	091b      	lsrs	r3, r3, #4
    39a4:	e04a      	b.n	3a3c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    39a6:	88fb      	ldrh	r3, [r7, #6]
    39a8:	683a      	ldr	r2, [r7, #0]
    39aa:	492b      	ldr	r1, [pc, #172]	; (3a58 <_get_cycles_for_us_internal+0x124>)
    39ac:	fba1 1202 	umull	r1, r2, r1, r2
    39b0:	0b52      	lsrs	r2, r2, #13
    39b2:	fb02 f303 	mul.w	r3, r2, r3
    39b6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    39ba:	4a28      	ldr	r2, [pc, #160]	; (3a5c <_get_cycles_for_us_internal+0x128>)
    39bc:	fba2 2303 	umull	r2, r3, r2, r3
    39c0:	095b      	lsrs	r3, r3, #5
    39c2:	e03b      	b.n	3a3c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    39c4:	88fb      	ldrh	r3, [r7, #6]
    39c6:	683a      	ldr	r2, [r7, #0]
    39c8:	4925      	ldr	r1, [pc, #148]	; (3a60 <_get_cycles_for_us_internal+0x12c>)
    39ca:	fba1 1202 	umull	r1, r2, r1, r2
    39ce:	0992      	lsrs	r2, r2, #6
    39d0:	fb02 f303 	mul.w	r3, r2, r3
    39d4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    39d8:	4a22      	ldr	r2, [pc, #136]	; (3a64 <_get_cycles_for_us_internal+0x130>)
    39da:	fba2 2303 	umull	r2, r3, r2, r3
    39de:	099b      	lsrs	r3, r3, #6
    39e0:	e02c      	b.n	3a3c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    39e2:	88fb      	ldrh	r3, [r7, #6]
    39e4:	683a      	ldr	r2, [r7, #0]
    39e6:	4920      	ldr	r1, [pc, #128]	; (3a68 <_get_cycles_for_us_internal+0x134>)
    39e8:	fba1 1202 	umull	r1, r2, r1, r2
    39ec:	0952      	lsrs	r2, r2, #5
    39ee:	fb02 f303 	mul.w	r3, r2, r3
    39f2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    39f6:	332f      	adds	r3, #47	; 0x2f
    39f8:	4a1c      	ldr	r2, [pc, #112]	; (3a6c <_get_cycles_for_us_internal+0x138>)
    39fa:	fba2 2303 	umull	r2, r3, r2, r3
    39fe:	0b5b      	lsrs	r3, r3, #13
    3a00:	e01c      	b.n	3a3c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3a02:	88fb      	ldrh	r3, [r7, #6]
    3a04:	683a      	ldr	r2, [r7, #0]
    3a06:	491a      	ldr	r1, [pc, #104]	; (3a70 <_get_cycles_for_us_internal+0x13c>)
    3a08:	fba1 1202 	umull	r1, r2, r1, r2
    3a0c:	08d2      	lsrs	r2, r2, #3
    3a0e:	fb02 f303 	mul.w	r3, r2, r3
    3a12:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3a16:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3a1a:	4a16      	ldr	r2, [pc, #88]	; (3a74 <_get_cycles_for_us_internal+0x140>)
    3a1c:	fba2 2303 	umull	r2, r3, r2, r3
    3a20:	0c5b      	lsrs	r3, r3, #17
    3a22:	e00b      	b.n	3a3c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3a24:	88fb      	ldrh	r3, [r7, #6]
    3a26:	683a      	ldr	r2, [r7, #0]
    3a28:	fb02 f303 	mul.w	r3, r2, r3
    3a2c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3a30:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3a34:	4a10      	ldr	r2, [pc, #64]	; (3a78 <_get_cycles_for_us_internal+0x144>)
    3a36:	fba2 2303 	umull	r2, r3, r2, r3
    3a3a:	0c9b      	lsrs	r3, r3, #18
	}
}
    3a3c:	4618      	mov	r0, r3
    3a3e:	370c      	adds	r7, #12
    3a40:	46bd      	mov	sp, r7
    3a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a46:	4770      	bx	lr
    3a48:	431bde83 	.word	0x431bde83
    3a4c:	aaaaaaab 	.word	0xaaaaaaab
    3a50:	0a7c5ac5 	.word	0x0a7c5ac5
    3a54:	88888889 	.word	0x88888889
    3a58:	d1b71759 	.word	0xd1b71759
    3a5c:	1b4e81b5 	.word	0x1b4e81b5
    3a60:	10624dd3 	.word	0x10624dd3
    3a64:	057619f1 	.word	0x057619f1
    3a68:	51eb851f 	.word	0x51eb851f
    3a6c:	45e7b273 	.word	0x45e7b273
    3a70:	cccccccd 	.word	0xcccccccd
    3a74:	6fd91d85 	.word	0x6fd91d85
    3a78:	165e9f81 	.word	0x165e9f81

00003a7c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b082      	sub	sp, #8
    3a80:	af00      	add	r7, sp, #0
    3a82:	4603      	mov	r3, r0
    3a84:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3a86:	88fb      	ldrh	r3, [r7, #6]
    3a88:	2209      	movs	r2, #9
    3a8a:	4904      	ldr	r1, [pc, #16]	; (3a9c <_get_cycles_for_us+0x20>)
    3a8c:	4618      	mov	r0, r3
    3a8e:	4b04      	ldr	r3, [pc, #16]	; (3aa0 <_get_cycles_for_us+0x24>)
    3a90:	4798      	blx	r3
    3a92:	4603      	mov	r3, r0
}
    3a94:	4618      	mov	r0, r3
    3a96:	3708      	adds	r7, #8
    3a98:	46bd      	mov	sp, r7
    3a9a:	bd80      	pop	{r7, pc}
    3a9c:	07270e00 	.word	0x07270e00
    3aa0:	00003935 	.word	0x00003935

00003aa4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3aa4:	b480      	push	{r7}
    3aa6:	b083      	sub	sp, #12
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	4603      	mov	r3, r0
    3aac:	6039      	str	r1, [r7, #0]
    3aae:	80fb      	strh	r3, [r7, #6]
    3ab0:	4613      	mov	r3, r2
    3ab2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3ab4:	797b      	ldrb	r3, [r7, #5]
    3ab6:	3b04      	subs	r3, #4
    3ab8:	2b05      	cmp	r3, #5
    3aba:	d870      	bhi.n	3b9e <_get_cycles_for_ms_internal+0xfa>
    3abc:	a201      	add	r2, pc, #4	; (adr r2, 3ac4 <_get_cycles_for_ms_internal+0x20>)
    3abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3ac2:	bf00      	nop
    3ac4:	00003b81 	.word	0x00003b81
    3ac8:	00003b65 	.word	0x00003b65
    3acc:	00003b49 	.word	0x00003b49
    3ad0:	00003b25 	.word	0x00003b25
    3ad4:	00003b01 	.word	0x00003b01
    3ad8:	00003add 	.word	0x00003add
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3adc:	88fb      	ldrh	r3, [r7, #6]
    3ade:	683a      	ldr	r2, [r7, #0]
    3ae0:	4937      	ldr	r1, [pc, #220]	; (3bc0 <_get_cycles_for_ms_internal+0x11c>)
    3ae2:	fba1 1202 	umull	r1, r2, r1, r2
    3ae6:	0c92      	lsrs	r2, r2, #18
    3ae8:	fb02 f303 	mul.w	r3, r2, r3
    3aec:	3302      	adds	r3, #2
    3aee:	4a35      	ldr	r2, [pc, #212]	; (3bc4 <_get_cycles_for_ms_internal+0x120>)
    3af0:	fba2 2303 	umull	r2, r3, r2, r3
    3af4:	085b      	lsrs	r3, r3, #1
    3af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3afa:	fb02 f303 	mul.w	r3, r2, r3
    3afe:	e058      	b.n	3bb2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3b00:	88fb      	ldrh	r3, [r7, #6]
    3b02:	683a      	ldr	r2, [r7, #0]
    3b04:	0952      	lsrs	r2, r2, #5
    3b06:	4930      	ldr	r1, [pc, #192]	; (3bc8 <_get_cycles_for_ms_internal+0x124>)
    3b08:	fba1 1202 	umull	r1, r2, r1, r2
    3b0c:	09d2      	lsrs	r2, r2, #7
    3b0e:	fb02 f303 	mul.w	r3, r2, r3
    3b12:	3302      	adds	r3, #2
    3b14:	4a2b      	ldr	r2, [pc, #172]	; (3bc4 <_get_cycles_for_ms_internal+0x120>)
    3b16:	fba2 2303 	umull	r2, r3, r2, r3
    3b1a:	085b      	lsrs	r3, r3, #1
    3b1c:	2264      	movs	r2, #100	; 0x64
    3b1e:	fb02 f303 	mul.w	r3, r2, r3
    3b22:	e046      	b.n	3bb2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3b24:	88fb      	ldrh	r3, [r7, #6]
    3b26:	683a      	ldr	r2, [r7, #0]
    3b28:	4928      	ldr	r1, [pc, #160]	; (3bcc <_get_cycles_for_ms_internal+0x128>)
    3b2a:	fba1 1202 	umull	r1, r2, r1, r2
    3b2e:	0b52      	lsrs	r2, r2, #13
    3b30:	fb02 f303 	mul.w	r3, r2, r3
    3b34:	3302      	adds	r3, #2
    3b36:	4a23      	ldr	r2, [pc, #140]	; (3bc4 <_get_cycles_for_ms_internal+0x120>)
    3b38:	fba2 2303 	umull	r2, r3, r2, r3
    3b3c:	085a      	lsrs	r2, r3, #1
    3b3e:	4613      	mov	r3, r2
    3b40:	009b      	lsls	r3, r3, #2
    3b42:	4413      	add	r3, r2
    3b44:	005b      	lsls	r3, r3, #1
    3b46:	e034      	b.n	3bb2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3b48:	88fb      	ldrh	r3, [r7, #6]
    3b4a:	683a      	ldr	r2, [r7, #0]
    3b4c:	4920      	ldr	r1, [pc, #128]	; (3bd0 <_get_cycles_for_ms_internal+0x12c>)
    3b4e:	fba1 1202 	umull	r1, r2, r1, r2
    3b52:	0992      	lsrs	r2, r2, #6
    3b54:	fb02 f303 	mul.w	r3, r2, r3
    3b58:	3302      	adds	r3, #2
    3b5a:	4a1a      	ldr	r2, [pc, #104]	; (3bc4 <_get_cycles_for_ms_internal+0x120>)
    3b5c:	fba2 2303 	umull	r2, r3, r2, r3
    3b60:	085b      	lsrs	r3, r3, #1
    3b62:	e026      	b.n	3bb2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3b64:	88fb      	ldrh	r3, [r7, #6]
    3b66:	683a      	ldr	r2, [r7, #0]
    3b68:	491a      	ldr	r1, [pc, #104]	; (3bd4 <_get_cycles_for_ms_internal+0x130>)
    3b6a:	fba1 1202 	umull	r1, r2, r1, r2
    3b6e:	0952      	lsrs	r2, r2, #5
    3b70:	fb02 f303 	mul.w	r3, r2, r3
    3b74:	331d      	adds	r3, #29
    3b76:	4a18      	ldr	r2, [pc, #96]	; (3bd8 <_get_cycles_for_ms_internal+0x134>)
    3b78:	fba2 2303 	umull	r2, r3, r2, r3
    3b7c:	091b      	lsrs	r3, r3, #4
    3b7e:	e018      	b.n	3bb2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3b80:	88fb      	ldrh	r3, [r7, #6]
    3b82:	683a      	ldr	r2, [r7, #0]
    3b84:	4915      	ldr	r1, [pc, #84]	; (3bdc <_get_cycles_for_ms_internal+0x138>)
    3b86:	fba1 1202 	umull	r1, r2, r1, r2
    3b8a:	08d2      	lsrs	r2, r2, #3
    3b8c:	fb02 f303 	mul.w	r3, r2, r3
    3b90:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3b94:	4a12      	ldr	r2, [pc, #72]	; (3be0 <_get_cycles_for_ms_internal+0x13c>)
    3b96:	fba2 2303 	umull	r2, r3, r2, r3
    3b9a:	095b      	lsrs	r3, r3, #5
    3b9c:	e009      	b.n	3bb2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3b9e:	88fb      	ldrh	r3, [r7, #6]
    3ba0:	683a      	ldr	r2, [r7, #0]
    3ba2:	fb02 f303 	mul.w	r3, r2, r3
    3ba6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3baa:	4a0e      	ldr	r2, [pc, #56]	; (3be4 <_get_cycles_for_ms_internal+0x140>)
    3bac:	fba2 2303 	umull	r2, r3, r2, r3
    3bb0:	099b      	lsrs	r3, r3, #6
	}
}
    3bb2:	4618      	mov	r0, r3
    3bb4:	370c      	adds	r7, #12
    3bb6:	46bd      	mov	sp, r7
    3bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bbc:	4770      	bx	lr
    3bbe:	bf00      	nop
    3bc0:	431bde83 	.word	0x431bde83
    3bc4:	aaaaaaab 	.word	0xaaaaaaab
    3bc8:	0a7c5ac5 	.word	0x0a7c5ac5
    3bcc:	d1b71759 	.word	0xd1b71759
    3bd0:	10624dd3 	.word	0x10624dd3
    3bd4:	51eb851f 	.word	0x51eb851f
    3bd8:	88888889 	.word	0x88888889
    3bdc:	cccccccd 	.word	0xcccccccd
    3be0:	1b4e81b5 	.word	0x1b4e81b5
    3be4:	057619f1 	.word	0x057619f1

00003be8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	b082      	sub	sp, #8
    3bec:	af00      	add	r7, sp, #0
    3bee:	4603      	mov	r3, r0
    3bf0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3bf2:	88fb      	ldrh	r3, [r7, #6]
    3bf4:	2209      	movs	r2, #9
    3bf6:	4904      	ldr	r1, [pc, #16]	; (3c08 <_get_cycles_for_ms+0x20>)
    3bf8:	4618      	mov	r0, r3
    3bfa:	4b04      	ldr	r3, [pc, #16]	; (3c0c <_get_cycles_for_ms+0x24>)
    3bfc:	4798      	blx	r3
    3bfe:	4603      	mov	r3, r0
}
    3c00:	4618      	mov	r0, r3
    3c02:	3708      	adds	r7, #8
    3c04:	46bd      	mov	sp, r7
    3c06:	bd80      	pop	{r7, pc}
    3c08:	07270e00 	.word	0x07270e00
    3c0c:	00003aa5 	.word	0x00003aa5

00003c10 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3c10:	b480      	push	{r7}
    3c12:	b083      	sub	sp, #12
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
    3c18:	6039      	str	r1, [r7, #0]
    3c1a:	bf00      	nop
    3c1c:	f3af 8000 	nop.w

00003c20 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3c20:	3901      	subs	r1, #1
    3c22:	d8fd      	bhi.n	3c20 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3c24:	bf00      	nop
    3c26:	370c      	adds	r7, #12
    3c28:	46bd      	mov	sp, r7
    3c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c2e:	4770      	bx	lr

00003c30 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3c30:	b480      	push	{r7}
    3c32:	b083      	sub	sp, #12
    3c34:	af00      	add	r7, sp, #0
    3c36:	6078      	str	r0, [r7, #4]
    3c38:	460b      	mov	r3, r1
    3c3a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	881b      	ldrh	r3, [r3, #0]
    3c40:	b29a      	uxth	r2, r3
    3c42:	887b      	ldrh	r3, [r7, #2]
    3c44:	021b      	lsls	r3, r3, #8
    3c46:	b29b      	uxth	r3, r3
    3c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3c4c:	b29b      	uxth	r3, r3
    3c4e:	4313      	orrs	r3, r2
    3c50:	b29a      	uxth	r2, r3
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3c56:	bf00      	nop
    3c58:	370c      	adds	r7, #12
    3c5a:	46bd      	mov	sp, r7
    3c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c60:	4770      	bx	lr

00003c62 <hri_port_set_EVCTRL_reg>:
{
    3c62:	b480      	push	{r7}
    3c64:	b085      	sub	sp, #20
    3c66:	af00      	add	r7, sp, #0
    3c68:	60f8      	str	r0, [r7, #12]
    3c6a:	460b      	mov	r3, r1
    3c6c:	607a      	str	r2, [r7, #4]
    3c6e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3c70:	7afb      	ldrb	r3, [r7, #11]
    3c72:	7afa      	ldrb	r2, [r7, #11]
    3c74:	68f9      	ldr	r1, [r7, #12]
    3c76:	01d2      	lsls	r2, r2, #7
    3c78:	440a      	add	r2, r1
    3c7a:	322c      	adds	r2, #44	; 0x2c
    3c7c:	6811      	ldr	r1, [r2, #0]
    3c7e:	687a      	ldr	r2, [r7, #4]
    3c80:	430a      	orrs	r2, r1
    3c82:	68f9      	ldr	r1, [r7, #12]
    3c84:	01db      	lsls	r3, r3, #7
    3c86:	440b      	add	r3, r1
    3c88:	332c      	adds	r3, #44	; 0x2c
    3c8a:	601a      	str	r2, [r3, #0]
}
    3c8c:	bf00      	nop
    3c8e:	3714      	adds	r7, #20
    3c90:	46bd      	mov	sp, r7
    3c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c96:	4770      	bx	lr

00003c98 <_port_event_init>:

static inline void _port_event_init()
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3c9c:	2200      	movs	r2, #0
    3c9e:	2100      	movs	r1, #0
    3ca0:	4809      	ldr	r0, [pc, #36]	; (3cc8 <_port_event_init+0x30>)
    3ca2:	4b0a      	ldr	r3, [pc, #40]	; (3ccc <_port_event_init+0x34>)
    3ca4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3ca6:	2200      	movs	r2, #0
    3ca8:	2101      	movs	r1, #1
    3caa:	4807      	ldr	r0, [pc, #28]	; (3cc8 <_port_event_init+0x30>)
    3cac:	4b07      	ldr	r3, [pc, #28]	; (3ccc <_port_event_init+0x34>)
    3cae:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3cb0:	22ef      	movs	r2, #239	; 0xef
    3cb2:	2102      	movs	r1, #2
    3cb4:	4804      	ldr	r0, [pc, #16]	; (3cc8 <_port_event_init+0x30>)
    3cb6:	4b05      	ldr	r3, [pc, #20]	; (3ccc <_port_event_init+0x34>)
    3cb8:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3cba:	2200      	movs	r2, #0
    3cbc:	2103      	movs	r1, #3
    3cbe:	4802      	ldr	r0, [pc, #8]	; (3cc8 <_port_event_init+0x30>)
    3cc0:	4b02      	ldr	r3, [pc, #8]	; (3ccc <_port_event_init+0x34>)
    3cc2:	4798      	blx	r3
}
    3cc4:	bf00      	nop
    3cc6:	bd80      	pop	{r7, pc}
    3cc8:	41008000 	.word	0x41008000
    3ccc:	00003c63 	.word	0x00003c63

00003cd0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3cd4:	2104      	movs	r1, #4
    3cd6:	480b      	ldr	r0, [pc, #44]	; (3d04 <_init_chip+0x34>)
    3cd8:	4b0b      	ldr	r3, [pc, #44]	; (3d08 <_init_chip+0x38>)
    3cda:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3cdc:	4b0b      	ldr	r3, [pc, #44]	; (3d0c <_init_chip+0x3c>)
    3cde:	4798      	blx	r3
	_oscctrl_init_sources();
    3ce0:	4b0b      	ldr	r3, [pc, #44]	; (3d10 <_init_chip+0x40>)
    3ce2:	4798      	blx	r3
	_mclk_init();
    3ce4:	4b0b      	ldr	r3, [pc, #44]	; (3d14 <_init_chip+0x44>)
    3ce6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3ce8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3cec:	4b0a      	ldr	r3, [pc, #40]	; (3d18 <_init_chip+0x48>)
    3cee:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3cf0:	4b0a      	ldr	r3, [pc, #40]	; (3d1c <_init_chip+0x4c>)
    3cf2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3cf4:	f640 30df 	movw	r0, #3039	; 0xbdf
    3cf8:	4b07      	ldr	r3, [pc, #28]	; (3d18 <_init_chip+0x48>)
    3cfa:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3cfc:	4b08      	ldr	r3, [pc, #32]	; (3d20 <_init_chip+0x50>)
    3cfe:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3d00:	bf00      	nop
    3d02:	bd80      	pop	{r7, pc}
    3d04:	41004000 	.word	0x41004000
    3d08:	00003c31 	.word	0x00003c31
    3d0c:	00004629 	.word	0x00004629
    3d10:	00004af1 	.word	0x00004af1
    3d14:	00004549 	.word	0x00004549
    3d18:	00004439 	.word	0x00004439
    3d1c:	00004b31 	.word	0x00004b31
    3d20:	00003c99 	.word	0x00003c99

00003d24 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	683a      	ldr	r2, [r7, #0]
    3d32:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3d34:	2300      	movs	r3, #0
}
    3d36:	4618      	mov	r0, r3
    3d38:	370c      	adds	r7, #12
    3d3a:	46bd      	mov	sp, r7
    3d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d40:	4770      	bx	lr
	...

00003d44 <__NVIC_EnableIRQ>:
{
    3d44:	b480      	push	{r7}
    3d46:	b083      	sub	sp, #12
    3d48:	af00      	add	r7, sp, #0
    3d4a:	4603      	mov	r3, r0
    3d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d52:	2b00      	cmp	r3, #0
    3d54:	db0b      	blt.n	3d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d56:	4909      	ldr	r1, [pc, #36]	; (3d7c <__NVIC_EnableIRQ+0x38>)
    3d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d5c:	095b      	lsrs	r3, r3, #5
    3d5e:	88fa      	ldrh	r2, [r7, #6]
    3d60:	f002 021f 	and.w	r2, r2, #31
    3d64:	2001      	movs	r0, #1
    3d66:	fa00 f202 	lsl.w	r2, r0, r2
    3d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d6e:	bf00      	nop
    3d70:	370c      	adds	r7, #12
    3d72:	46bd      	mov	sp, r7
    3d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop
    3d7c:	e000e100 	.word	0xe000e100

00003d80 <__NVIC_DisableIRQ>:
{
    3d80:	b480      	push	{r7}
    3d82:	b083      	sub	sp, #12
    3d84:	af00      	add	r7, sp, #0
    3d86:	4603      	mov	r3, r0
    3d88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	db10      	blt.n	3db4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d92:	490b      	ldr	r1, [pc, #44]	; (3dc0 <__NVIC_DisableIRQ+0x40>)
    3d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d98:	095b      	lsrs	r3, r3, #5
    3d9a:	88fa      	ldrh	r2, [r7, #6]
    3d9c:	f002 021f 	and.w	r2, r2, #31
    3da0:	2001      	movs	r0, #1
    3da2:	fa00 f202 	lsl.w	r2, r0, r2
    3da6:	3320      	adds	r3, #32
    3da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3db0:	f3bf 8f6f 	isb	sy
}
    3db4:	bf00      	nop
    3db6:	370c      	adds	r7, #12
    3db8:	46bd      	mov	sp, r7
    3dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dbe:	4770      	bx	lr
    3dc0:	e000e100 	.word	0xe000e100

00003dc4 <__NVIC_ClearPendingIRQ>:
{
    3dc4:	b480      	push	{r7}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	4603      	mov	r3, r0
    3dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	db0c      	blt.n	3df0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3dd6:	4909      	ldr	r1, [pc, #36]	; (3dfc <__NVIC_ClearPendingIRQ+0x38>)
    3dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ddc:	095b      	lsrs	r3, r3, #5
    3dde:	88fa      	ldrh	r2, [r7, #6]
    3de0:	f002 021f 	and.w	r2, r2, #31
    3de4:	2001      	movs	r0, #1
    3de6:	fa00 f202 	lsl.w	r2, r0, r2
    3dea:	3360      	adds	r3, #96	; 0x60
    3dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3df0:	bf00      	nop
    3df2:	370c      	adds	r7, #12
    3df4:	46bd      	mov	sp, r7
    3df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfa:	4770      	bx	lr
    3dfc:	e000e100 	.word	0xe000e100

00003e00 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3e00:	b480      	push	{r7}
    3e02:	b083      	sub	sp, #12
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
    3e08:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3e0a:	bf00      	nop
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	685a      	ldr	r2, [r3, #4]
    3e10:	683b      	ldr	r3, [r7, #0]
    3e12:	4013      	ands	r3, r2
    3e14:	2b00      	cmp	r3, #0
    3e16:	d1f9      	bne.n	3e0c <hri_eic_wait_for_sync+0xc>
	};
}
    3e18:	bf00      	nop
    3e1a:	370c      	adds	r7, #12
    3e1c:	46bd      	mov	sp, r7
    3e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e22:	4770      	bx	lr

00003e24 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3e24:	b480      	push	{r7}
    3e26:	b083      	sub	sp, #12
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
    3e2c:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	685a      	ldr	r2, [r3, #4]
    3e32:	683b      	ldr	r3, [r7, #0]
    3e34:	4013      	ands	r3, r2
    3e36:	2b00      	cmp	r3, #0
    3e38:	bf14      	ite	ne
    3e3a:	2301      	movne	r3, #1
    3e3c:	2300      	moveq	r3, #0
    3e3e:	b2db      	uxtb	r3, r3
}
    3e40:	4618      	mov	r0, r3
    3e42:	370c      	adds	r7, #12
    3e44:	46bd      	mov	sp, r7
    3e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4a:	4770      	bx	lr

00003e4c <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    3e4c:	b480      	push	{r7}
    3e4e:	b083      	sub	sp, #12
    3e50:	af00      	add	r7, sp, #0
    3e52:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	695b      	ldr	r3, [r3, #20]
}
    3e58:	4618      	mov	r0, r3
    3e5a:	370c      	adds	r7, #12
    3e5c:	46bd      	mov	sp, r7
    3e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e62:	4770      	bx	lr

00003e64 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    3e64:	b480      	push	{r7}
    3e66:	b083      	sub	sp, #12
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    3e6c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	683a      	ldr	r2, [r7, #0]
    3e72:	615a      	str	r2, [r3, #20]
}
    3e74:	bf00      	nop
    3e76:	370c      	adds	r7, #12
    3e78:	46bd      	mov	sp, r7
    3e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7e:	4770      	bx	lr

00003e80 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b082      	sub	sp, #8
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	781b      	ldrb	r3, [r3, #0]
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	f043 0302 	orr.w	r3, r3, #2
    3e92:	b2da      	uxtb	r2, r3
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3e98:	2103      	movs	r1, #3
    3e9a:	6878      	ldr	r0, [r7, #4]
    3e9c:	4b02      	ldr	r3, [pc, #8]	; (3ea8 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    3e9e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3ea0:	bf00      	nop
    3ea2:	3708      	adds	r7, #8
    3ea4:	46bd      	mov	sp, r7
    3ea6:	bd80      	pop	{r7, pc}
    3ea8:	00003e01 	.word	0x00003e01

00003eac <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b082      	sub	sp, #8
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	781b      	ldrb	r3, [r3, #0]
    3eb8:	b2db      	uxtb	r3, r3
    3eba:	f023 0302 	bic.w	r3, r3, #2
    3ebe:	b2da      	uxtb	r2, r3
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3ec4:	2103      	movs	r1, #3
    3ec6:	6878      	ldr	r0, [r7, #4]
    3ec8:	4b02      	ldr	r3, [pc, #8]	; (3ed4 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    3eca:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3ecc:	bf00      	nop
    3ece:	3708      	adds	r7, #8
    3ed0:	46bd      	mov	sp, r7
    3ed2:	bd80      	pop	{r7, pc}
    3ed4:	00003e01 	.word	0x00003e01

00003ed8 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b084      	sub	sp, #16
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
    3ee0:	460b      	mov	r3, r1
    3ee2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    3eea:	7bfb      	ldrb	r3, [r7, #15]
    3eec:	f023 0310 	bic.w	r3, r3, #16
    3ef0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    3ef2:	78fb      	ldrb	r3, [r7, #3]
    3ef4:	011b      	lsls	r3, r3, #4
    3ef6:	b25a      	sxtb	r2, r3
    3ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3efc:	4313      	orrs	r3, r2
    3efe:	b25b      	sxtb	r3, r3
    3f00:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	7bfa      	ldrb	r2, [r7, #15]
    3f06:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3f08:	2103      	movs	r1, #3
    3f0a:	6878      	ldr	r0, [r7, #4]
    3f0c:	4b02      	ldr	r3, [pc, #8]	; (3f18 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    3f0e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f10:	bf00      	nop
    3f12:	3710      	adds	r7, #16
    3f14:	46bd      	mov	sp, r7
    3f16:	bd80      	pop	{r7, pc}
    3f18:	00003e01 	.word	0x00003e01

00003f1c <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b084      	sub	sp, #16
    3f20:	af00      	add	r7, sp, #0
    3f22:	6078      	str	r0, [r7, #4]
    3f24:	460b      	mov	r3, r1
    3f26:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3f28:	2103      	movs	r1, #3
    3f2a:	6878      	ldr	r0, [r7, #4]
    3f2c:	4b06      	ldr	r3, [pc, #24]	; (3f48 <hri_eic_get_CTRLA_reg+0x2c>)
    3f2e:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    3f36:	7bfa      	ldrb	r2, [r7, #15]
    3f38:	78fb      	ldrb	r3, [r7, #3]
    3f3a:	4013      	ands	r3, r2
    3f3c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    3f3e:	7bfb      	ldrb	r3, [r7, #15]
}
    3f40:	4618      	mov	r0, r3
    3f42:	3710      	adds	r7, #16
    3f44:	46bd      	mov	sp, r7
    3f46:	bd80      	pop	{r7, pc}
    3f48:	00003e01 	.word	0x00003e01

00003f4c <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    3f4c:	b580      	push	{r7, lr}
    3f4e:	b082      	sub	sp, #8
    3f50:	af00      	add	r7, sp, #0
    3f52:	6078      	str	r0, [r7, #4]
    3f54:	460b      	mov	r3, r1
    3f56:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	78fa      	ldrb	r2, [r7, #3]
    3f5c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3f5e:	2103      	movs	r1, #3
    3f60:	6878      	ldr	r0, [r7, #4]
    3f62:	4b03      	ldr	r3, [pc, #12]	; (3f70 <hri_eic_write_CTRLA_reg+0x24>)
    3f64:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f66:	bf00      	nop
    3f68:	3708      	adds	r7, #8
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	bf00      	nop
    3f70:	00003e01 	.word	0x00003e01

00003f74 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    3f74:	b480      	push	{r7}
    3f76:	b083      	sub	sp, #12
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
    3f7c:	460b      	mov	r3, r1
    3f7e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	78fa      	ldrb	r2, [r7, #3]
    3f84:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f86:	bf00      	nop
    3f88:	370c      	adds	r7, #12
    3f8a:	46bd      	mov	sp, r7
    3f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f90:	4770      	bx	lr

00003f92 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    3f92:	b480      	push	{r7}
    3f94:	b083      	sub	sp, #12
    3f96:	af00      	add	r7, sp, #0
    3f98:	6078      	str	r0, [r7, #4]
    3f9a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	683a      	ldr	r2, [r7, #0]
    3fa0:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3fa2:	bf00      	nop
    3fa4:	370c      	adds	r7, #12
    3fa6:	46bd      	mov	sp, r7
    3fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fac:	4770      	bx	lr

00003fae <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    3fae:	b480      	push	{r7}
    3fb0:	b083      	sub	sp, #12
    3fb2:	af00      	add	r7, sp, #0
    3fb4:	6078      	str	r0, [r7, #4]
    3fb6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	683a      	ldr	r2, [r7, #0]
    3fbc:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3fbe:	bf00      	nop
    3fc0:	370c      	adds	r7, #12
    3fc2:	46bd      	mov	sp, r7
    3fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc8:	4770      	bx	lr

00003fca <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    3fca:	b480      	push	{r7}
    3fcc:	b085      	sub	sp, #20
    3fce:	af00      	add	r7, sp, #0
    3fd0:	60f8      	str	r0, [r7, #12]
    3fd2:	460b      	mov	r3, r1
    3fd4:	607a      	str	r2, [r7, #4]
    3fd6:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    3fd8:	7afb      	ldrb	r3, [r7, #11]
    3fda:	68fa      	ldr	r2, [r7, #12]
    3fdc:	3306      	adds	r3, #6
    3fde:	009b      	lsls	r3, r3, #2
    3fe0:	4413      	add	r3, r2
    3fe2:	687a      	ldr	r2, [r7, #4]
    3fe4:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3fe6:	bf00      	nop
    3fe8:	3714      	adds	r7, #20
    3fea:	46bd      	mov	sp, r7
    3fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff0:	4770      	bx	lr

00003ff2 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    3ff2:	b480      	push	{r7}
    3ff4:	b083      	sub	sp, #12
    3ff6:	af00      	add	r7, sp, #0
    3ff8:	6078      	str	r0, [r7, #4]
    3ffa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	683a      	ldr	r2, [r7, #0]
    4000:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4002:	bf00      	nop
    4004:	370c      	adds	r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	f85d 7b04 	ldr.w	r7, [sp], #4
    400c:	4770      	bx	lr

0000400e <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    400e:	b480      	push	{r7}
    4010:	b083      	sub	sp, #12
    4012:	af00      	add	r7, sp, #0
    4014:	6078      	str	r0, [r7, #4]
    4016:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	683a      	ldr	r2, [r7, #0]
    401c:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    401e:	bf00      	nop
    4020:	370c      	adds	r7, #12
    4022:	46bd      	mov	sp, r7
    4024:	f85d 7b04 	ldr.w	r7, [sp], #4
    4028:	4770      	bx	lr
	...

0000402c <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4034:	2101      	movs	r1, #1
    4036:	4838      	ldr	r0, [pc, #224]	; (4118 <_ext_irq_init+0xec>)
    4038:	4b38      	ldr	r3, [pc, #224]	; (411c <_ext_irq_init+0xf0>)
    403a:	4798      	blx	r3
    403c:	4603      	mov	r3, r0
    403e:	f083 0301 	eor.w	r3, r3, #1
    4042:	b2db      	uxtb	r3, r3
    4044:	2b00      	cmp	r3, #0
    4046:	d011      	beq.n	406c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4048:	2102      	movs	r1, #2
    404a:	4833      	ldr	r0, [pc, #204]	; (4118 <_ext_irq_init+0xec>)
    404c:	4b34      	ldr	r3, [pc, #208]	; (4120 <_ext_irq_init+0xf4>)
    404e:	4798      	blx	r3
    4050:	4603      	mov	r3, r0
    4052:	2b00      	cmp	r3, #0
    4054:	d006      	beq.n	4064 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4056:	4830      	ldr	r0, [pc, #192]	; (4118 <_ext_irq_init+0xec>)
    4058:	4b32      	ldr	r3, [pc, #200]	; (4124 <_ext_irq_init+0xf8>)
    405a:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    405c:	2102      	movs	r1, #2
    405e:	482e      	ldr	r0, [pc, #184]	; (4118 <_ext_irq_init+0xec>)
    4060:	4b31      	ldr	r3, [pc, #196]	; (4128 <_ext_irq_init+0xfc>)
    4062:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4064:	2101      	movs	r1, #1
    4066:	482c      	ldr	r0, [pc, #176]	; (4118 <_ext_irq_init+0xec>)
    4068:	4b30      	ldr	r3, [pc, #192]	; (412c <_ext_irq_init+0x100>)
    406a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    406c:	2101      	movs	r1, #1
    406e:	482a      	ldr	r0, [pc, #168]	; (4118 <_ext_irq_init+0xec>)
    4070:	4b2d      	ldr	r3, [pc, #180]	; (4128 <_ext_irq_init+0xfc>)
    4072:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4074:	2100      	movs	r1, #0
    4076:	4828      	ldr	r0, [pc, #160]	; (4118 <_ext_irq_init+0xec>)
    4078:	4b2d      	ldr	r3, [pc, #180]	; (4130 <_ext_irq_init+0x104>)
    407a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    407c:	2100      	movs	r1, #0
    407e:	4826      	ldr	r0, [pc, #152]	; (4118 <_ext_irq_init+0xec>)
    4080:	4b2c      	ldr	r3, [pc, #176]	; (4134 <_ext_irq_init+0x108>)
    4082:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4084:	2100      	movs	r1, #0
    4086:	4824      	ldr	r0, [pc, #144]	; (4118 <_ext_irq_init+0xec>)
    4088:	4b2b      	ldr	r3, [pc, #172]	; (4138 <_ext_irq_init+0x10c>)
    408a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    408c:	2130      	movs	r1, #48	; 0x30
    408e:	4822      	ldr	r0, [pc, #136]	; (4118 <_ext_irq_init+0xec>)
    4090:	4b2a      	ldr	r3, [pc, #168]	; (413c <_ext_irq_init+0x110>)
    4092:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4094:	2130      	movs	r1, #48	; 0x30
    4096:	4820      	ldr	r0, [pc, #128]	; (4118 <_ext_irq_init+0xec>)
    4098:	4b29      	ldr	r3, [pc, #164]	; (4140 <_ext_irq_init+0x114>)
    409a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    409c:	2100      	movs	r1, #0
    409e:	481e      	ldr	r0, [pc, #120]	; (4118 <_ext_irq_init+0xec>)
    40a0:	4b28      	ldr	r3, [pc, #160]	; (4144 <_ext_irq_init+0x118>)
    40a2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    40a4:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    40a8:	2100      	movs	r1, #0
    40aa:	481b      	ldr	r0, [pc, #108]	; (4118 <_ext_irq_init+0xec>)
    40ac:	4b26      	ldr	r3, [pc, #152]	; (4148 <_ext_irq_init+0x11c>)
    40ae:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    40b0:	2200      	movs	r2, #0
    40b2:	2101      	movs	r1, #1
    40b4:	4818      	ldr	r0, [pc, #96]	; (4118 <_ext_irq_init+0xec>)
    40b6:	4b24      	ldr	r3, [pc, #144]	; (4148 <_ext_irq_init+0x11c>)
    40b8:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    40ba:	4817      	ldr	r0, [pc, #92]	; (4118 <_ext_irq_init+0xec>)
    40bc:	4b23      	ldr	r3, [pc, #140]	; (414c <_ext_irq_init+0x120>)
    40be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    40c0:	2010      	movs	r0, #16
    40c2:	4b23      	ldr	r3, [pc, #140]	; (4150 <_ext_irq_init+0x124>)
    40c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    40c6:	2010      	movs	r0, #16
    40c8:	4b22      	ldr	r3, [pc, #136]	; (4154 <_ext_irq_init+0x128>)
    40ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    40cc:	2010      	movs	r0, #16
    40ce:	4b22      	ldr	r3, [pc, #136]	; (4158 <_ext_irq_init+0x12c>)
    40d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    40d2:	2011      	movs	r0, #17
    40d4:	4b1e      	ldr	r3, [pc, #120]	; (4150 <_ext_irq_init+0x124>)
    40d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    40d8:	2011      	movs	r0, #17
    40da:	4b1e      	ldr	r3, [pc, #120]	; (4154 <_ext_irq_init+0x128>)
    40dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    40de:	2011      	movs	r0, #17
    40e0:	4b1d      	ldr	r3, [pc, #116]	; (4158 <_ext_irq_init+0x12c>)
    40e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    40e4:	2012      	movs	r0, #18
    40e6:	4b1a      	ldr	r3, [pc, #104]	; (4150 <_ext_irq_init+0x124>)
    40e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    40ea:	2012      	movs	r0, #18
    40ec:	4b19      	ldr	r3, [pc, #100]	; (4154 <_ext_irq_init+0x128>)
    40ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    40f0:	2012      	movs	r0, #18
    40f2:	4b19      	ldr	r3, [pc, #100]	; (4158 <_ext_irq_init+0x12c>)
    40f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    40f6:	2013      	movs	r0, #19
    40f8:	4b15      	ldr	r3, [pc, #84]	; (4150 <_ext_irq_init+0x124>)
    40fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    40fc:	2013      	movs	r0, #19
    40fe:	4b15      	ldr	r3, [pc, #84]	; (4154 <_ext_irq_init+0x128>)
    4100:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4102:	2013      	movs	r0, #19
    4104:	4b14      	ldr	r3, [pc, #80]	; (4158 <_ext_irq_init+0x12c>)
    4106:	4798      	blx	r3

	callback = cb;
    4108:	4a14      	ldr	r2, [pc, #80]	; (415c <_ext_irq_init+0x130>)
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    410e:	2300      	movs	r3, #0
}
    4110:	4618      	mov	r0, r3
    4112:	3708      	adds	r7, #8
    4114:	46bd      	mov	sp, r7
    4116:	bd80      	pop	{r7, pc}
    4118:	40002800 	.word	0x40002800
    411c:	00003e25 	.word	0x00003e25
    4120:	00003f1d 	.word	0x00003f1d
    4124:	00003ead 	.word	0x00003ead
    4128:	00003e01 	.word	0x00003e01
    412c:	00003f4d 	.word	0x00003f4d
    4130:	00003ed9 	.word	0x00003ed9
    4134:	00003f75 	.word	0x00003f75
    4138:	00003f93 	.word	0x00003f93
    413c:	00003faf 	.word	0x00003faf
    4140:	00003ff3 	.word	0x00003ff3
    4144:	0000400f 	.word	0x0000400f
    4148:	00003fcb 	.word	0x00003fcb
    414c:	00003e81 	.word	0x00003e81
    4150:	00003d81 	.word	0x00003d81
    4154:	00003dc5 	.word	0x00003dc5
    4158:	00003d45 	.word	0x00003d45
    415c:	20000690 	.word	0x20000690

00004160 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4160:	b580      	push	{r7, lr}
    4162:	b084      	sub	sp, #16
    4164:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4166:	4841      	ldr	r0, [pc, #260]	; (426c <_ext_irq_handler+0x10c>)
    4168:	4b41      	ldr	r3, [pc, #260]	; (4270 <_ext_irq_handler+0x110>)
    416a:	4798      	blx	r3
    416c:	4603      	mov	r3, r0
    416e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4170:	f04f 33ff 	mov.w	r3, #4294967295
    4174:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4176:	683b      	ldr	r3, [r7, #0]
    4178:	4619      	mov	r1, r3
    417a:	483c      	ldr	r0, [pc, #240]	; (426c <_ext_irq_handler+0x10c>)
    417c:	4b3d      	ldr	r3, [pc, #244]	; (4274 <_ext_irq_handler+0x114>)
    417e:	4798      	blx	r3

	ASSERT(callback);
    4180:	4b3d      	ldr	r3, [pc, #244]	; (4278 <_ext_irq_handler+0x118>)
    4182:	681b      	ldr	r3, [r3, #0]
    4184:	2b00      	cmp	r3, #0
    4186:	bf14      	ite	ne
    4188:	2301      	movne	r3, #1
    418a:	2300      	moveq	r3, #0
    418c:	b2db      	uxtb	r3, r3
    418e:	22f4      	movs	r2, #244	; 0xf4
    4190:	493a      	ldr	r1, [pc, #232]	; (427c <_ext_irq_handler+0x11c>)
    4192:	4618      	mov	r0, r3
    4194:	4b3a      	ldr	r3, [pc, #232]	; (4280 <_ext_irq_handler+0x120>)
    4196:	4798      	blx	r3

	while (flags) {
    4198:	e060      	b.n	425c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    419a:	683b      	ldr	r3, [r7, #0]
    419c:	4618      	mov	r0, r3
    419e:	4b39      	ldr	r3, [pc, #228]	; (4284 <_ext_irq_handler+0x124>)
    41a0:	4798      	blx	r3
    41a2:	4603      	mov	r3, r0
    41a4:	b2db      	uxtb	r3, r3
    41a6:	3b01      	subs	r3, #1
    41a8:	b2db      	uxtb	r3, r3
    41aa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    41ac:	e047      	b.n	423e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    41ae:	2300      	movs	r3, #0
    41b0:	71fb      	strb	r3, [r7, #7]
    41b2:	2304      	movs	r3, #4
    41b4:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    41b6:	e024      	b.n	4202 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    41b8:	79ba      	ldrb	r2, [r7, #6]
    41ba:	79fb      	ldrb	r3, [r7, #7]
    41bc:	4413      	add	r3, r2
    41be:	105b      	asrs	r3, r3, #1
    41c0:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    41c2:	797b      	ldrb	r3, [r7, #5]
    41c4:	4a30      	ldr	r2, [pc, #192]	; (4288 <_ext_irq_handler+0x128>)
    41c6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    41ca:	461a      	mov	r2, r3
    41cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41d0:	429a      	cmp	r2, r3
    41d2:	d106      	bne.n	41e2 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    41d4:	797b      	ldrb	r3, [r7, #5]
    41d6:	4a2c      	ldr	r2, [pc, #176]	; (4288 <_ext_irq_handler+0x128>)
    41d8:	00db      	lsls	r3, r3, #3
    41da:	4413      	add	r3, r2
    41dc:	685b      	ldr	r3, [r3, #4]
    41de:	60bb      	str	r3, [r7, #8]
					break;
    41e0:	e013      	b.n	420a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    41e2:	797b      	ldrb	r3, [r7, #5]
    41e4:	4a28      	ldr	r2, [pc, #160]	; (4288 <_ext_irq_handler+0x128>)
    41e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    41ea:	461a      	mov	r2, r3
    41ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41f0:	429a      	cmp	r2, r3
    41f2:	da03      	bge.n	41fc <_ext_irq_handler+0x9c>
					lower = middle + 1;
    41f4:	797b      	ldrb	r3, [r7, #5]
    41f6:	3301      	adds	r3, #1
    41f8:	71fb      	strb	r3, [r7, #7]
    41fa:	e002      	b.n	4202 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    41fc:	797b      	ldrb	r3, [r7, #5]
    41fe:	3b01      	subs	r3, #1
    4200:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4202:	79ba      	ldrb	r2, [r7, #6]
    4204:	79fb      	ldrb	r3, [r7, #7]
    4206:	429a      	cmp	r2, r3
    4208:	d2d6      	bcs.n	41b8 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    420a:	68bb      	ldr	r3, [r7, #8]
    420c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4210:	d003      	beq.n	421a <_ext_irq_handler+0xba>
				callback(pin);
    4212:	4b19      	ldr	r3, [pc, #100]	; (4278 <_ext_irq_handler+0x118>)
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	68b8      	ldr	r0, [r7, #8]
    4218:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    421e:	2201      	movs	r2, #1
    4220:	fa02 f303 	lsl.w	r3, r2, r3
    4224:	43da      	mvns	r2, r3
    4226:	683b      	ldr	r3, [r7, #0]
    4228:	4013      	ands	r3, r2
    422a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    422c:	683b      	ldr	r3, [r7, #0]
    422e:	4618      	mov	r0, r3
    4230:	4b14      	ldr	r3, [pc, #80]	; (4284 <_ext_irq_handler+0x124>)
    4232:	4798      	blx	r3
    4234:	4603      	mov	r3, r0
    4236:	b2db      	uxtb	r3, r3
    4238:	3b01      	subs	r3, #1
    423a:	b2db      	uxtb	r3, r3
    423c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    423e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4242:	f1b3 3fff 	cmp.w	r3, #4294967295
    4246:	d1b2      	bne.n	41ae <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4248:	4808      	ldr	r0, [pc, #32]	; (426c <_ext_irq_handler+0x10c>)
    424a:	4b09      	ldr	r3, [pc, #36]	; (4270 <_ext_irq_handler+0x110>)
    424c:	4798      	blx	r3
    424e:	4603      	mov	r3, r0
    4250:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4252:	683b      	ldr	r3, [r7, #0]
    4254:	4619      	mov	r1, r3
    4256:	4805      	ldr	r0, [pc, #20]	; (426c <_ext_irq_handler+0x10c>)
    4258:	4b06      	ldr	r3, [pc, #24]	; (4274 <_ext_irq_handler+0x114>)
    425a:	4798      	blx	r3
	while (flags) {
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	2b00      	cmp	r3, #0
    4260:	d19b      	bne.n	419a <_ext_irq_handler+0x3a>
	}
}
    4262:	bf00      	nop
    4264:	3710      	adds	r7, #16
    4266:	46bd      	mov	sp, r7
    4268:	bd80      	pop	{r7, pc}
    426a:	bf00      	nop
    426c:	40002800 	.word	0x40002800
    4270:	00003e4d 	.word	0x00003e4d
    4274:	00003e65 	.word	0x00003e65
    4278:	20000690 	.word	0x20000690
    427c:	0000d540 	.word	0x0000d540
    4280:	000030c9 	.word	0x000030c9
    4284:	0000d071 	.word	0x0000d071
    4288:	0000d520 	.word	0x0000d520

0000428c <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    428c:	b580      	push	{r7, lr}
    428e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4290:	4b01      	ldr	r3, [pc, #4]	; (4298 <EIC_4_Handler+0xc>)
    4292:	4798      	blx	r3
} /**
    4294:	bf00      	nop
    4296:	bd80      	pop	{r7, pc}
    4298:	00004161 	.word	0x00004161

0000429c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    429c:	b580      	push	{r7, lr}
    429e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    42a0:	4b01      	ldr	r3, [pc, #4]	; (42a8 <EIC_5_Handler+0xc>)
    42a2:	4798      	blx	r3
} /**
    42a4:	bf00      	nop
    42a6:	bd80      	pop	{r7, pc}
    42a8:	00004161 	.word	0x00004161

000042ac <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    42ac:	b580      	push	{r7, lr}
    42ae:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    42b0:	4b01      	ldr	r3, [pc, #4]	; (42b8 <EIC_6_Handler+0xc>)
    42b2:	4798      	blx	r3
} /**
    42b4:	bf00      	nop
    42b6:	bd80      	pop	{r7, pc}
    42b8:	00004161 	.word	0x00004161

000042bc <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    42bc:	b580      	push	{r7, lr}
    42be:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    42c0:	4b01      	ldr	r3, [pc, #4]	; (42c8 <EIC_7_Handler+0xc>)
    42c2:	4798      	blx	r3
}
    42c4:	bf00      	nop
    42c6:	bd80      	pop	{r7, pc}
    42c8:	00004161 	.word	0x00004161

000042cc <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    42cc:	b480      	push	{r7}
    42ce:	b085      	sub	sp, #20
    42d0:	af00      	add	r7, sp, #0
    42d2:	60f8      	str	r0, [r7, #12]
    42d4:	460b      	mov	r3, r1
    42d6:	607a      	str	r2, [r7, #4]
    42d8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    42da:	7afa      	ldrb	r2, [r7, #11]
    42dc:	68fb      	ldr	r3, [r7, #12]
    42de:	3248      	adds	r2, #72	; 0x48
    42e0:	6879      	ldr	r1, [r7, #4]
    42e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    42e6:	bf00      	nop
    42e8:	3714      	adds	r7, #20
    42ea:	46bd      	mov	sp, r7
    42ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f0:	4770      	bx	lr

000042f2 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    42f2:	b480      	push	{r7}
    42f4:	b083      	sub	sp, #12
    42f6:	af00      	add	r7, sp, #0
    42f8:	6078      	str	r0, [r7, #4]
    42fa:	460b      	mov	r3, r1
    42fc:	70fb      	strb	r3, [r7, #3]
    42fe:	4613      	mov	r3, r2
    4300:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4302:	78fb      	ldrb	r3, [r7, #3]
    4304:	687a      	ldr	r2, [r7, #4]
    4306:	3304      	adds	r3, #4
    4308:	00db      	lsls	r3, r3, #3
    430a:	4413      	add	r3, r2
    430c:	78ba      	ldrb	r2, [r7, #2]
    430e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4310:	78fb      	ldrb	r3, [r7, #3]
    4312:	78ba      	ldrb	r2, [r7, #2]
    4314:	43d2      	mvns	r2, r2
    4316:	b2d1      	uxtb	r1, r2
    4318:	687a      	ldr	r2, [r7, #4]
    431a:	3304      	adds	r3, #4
    431c:	00db      	lsls	r3, r3, #3
    431e:	4413      	add	r3, r2
    4320:	460a      	mov	r2, r1
    4322:	711a      	strb	r2, [r3, #4]
}
    4324:	bf00      	nop
    4326:	370c      	adds	r7, #12
    4328:	46bd      	mov	sp, r7
    432a:	f85d 7b04 	ldr.w	r7, [sp], #4
    432e:	4770      	bx	lr

00004330 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4330:	b480      	push	{r7}
    4332:	b085      	sub	sp, #20
    4334:	af00      	add	r7, sp, #0
    4336:	60f8      	str	r0, [r7, #12]
    4338:	460b      	mov	r3, r1
    433a:	607a      	str	r2, [r7, #4]
    433c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    433e:	7afa      	ldrb	r2, [r7, #11]
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	3204      	adds	r2, #4
    4344:	6879      	ldr	r1, [r7, #4]
    4346:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    434a:	bf00      	nop
    434c:	3714      	adds	r7, #20
    434e:	46bd      	mov	sp, r7
    4350:	f85d 7b04 	ldr.w	r7, [sp], #4
    4354:	4770      	bx	lr
	...

00004358 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4358:	b580      	push	{r7, lr}
    435a:	b082      	sub	sp, #8
    435c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    435e:	2300      	movs	r3, #0
    4360:	71fb      	strb	r3, [r7, #7]
    4362:	e00b      	b.n	437c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4364:	79fb      	ldrb	r3, [r7, #7]
    4366:	4a18      	ldr	r2, [pc, #96]	; (43c8 <_event_system_init+0x70>)
    4368:	5cd3      	ldrb	r3, [r2, r3]
    436a:	461a      	mov	r2, r3
    436c:	79fb      	ldrb	r3, [r7, #7]
    436e:	4619      	mov	r1, r3
    4370:	4816      	ldr	r0, [pc, #88]	; (43cc <_event_system_init+0x74>)
    4372:	4b17      	ldr	r3, [pc, #92]	; (43d0 <_event_system_init+0x78>)
    4374:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4376:	79fb      	ldrb	r3, [r7, #7]
    4378:	3301      	adds	r3, #1
    437a:	71fb      	strb	r3, [r7, #7]
    437c:	79fb      	ldrb	r3, [r7, #7]
    437e:	2b42      	cmp	r3, #66	; 0x42
    4380:	d9f0      	bls.n	4364 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4382:	2300      	movs	r3, #0
    4384:	71fb      	strb	r3, [r7, #7]
    4386:	e016      	b.n	43b6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4388:	79fb      	ldrb	r3, [r7, #7]
    438a:	4a12      	ldr	r2, [pc, #72]	; (43d4 <_event_system_init+0x7c>)
    438c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4390:	461a      	mov	r2, r3
    4392:	79fb      	ldrb	r3, [r7, #7]
    4394:	4619      	mov	r1, r3
    4396:	480d      	ldr	r0, [pc, #52]	; (43cc <_event_system_init+0x74>)
    4398:	4b0f      	ldr	r3, [pc, #60]	; (43d8 <_event_system_init+0x80>)
    439a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    439c:	79fb      	ldrb	r3, [r7, #7]
    439e:	4a0f      	ldr	r2, [pc, #60]	; (43dc <_event_system_init+0x84>)
    43a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    43a4:	b2da      	uxtb	r2, r3
    43a6:	79fb      	ldrb	r3, [r7, #7]
    43a8:	4619      	mov	r1, r3
    43aa:	4808      	ldr	r0, [pc, #32]	; (43cc <_event_system_init+0x74>)
    43ac:	4b0c      	ldr	r3, [pc, #48]	; (43e0 <_event_system_init+0x88>)
    43ae:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    43b0:	79fb      	ldrb	r3, [r7, #7]
    43b2:	3301      	adds	r3, #1
    43b4:	71fb      	strb	r3, [r7, #7]
    43b6:	79fb      	ldrb	r3, [r7, #7]
    43b8:	2b1f      	cmp	r3, #31
    43ba:	d9e5      	bls.n	4388 <_event_system_init+0x30>
	}

	return ERR_NONE;
    43bc:	2300      	movs	r3, #0
}
    43be:	4618      	mov	r0, r3
    43c0:	3708      	adds	r7, #8
    43c2:	46bd      	mov	sp, r7
    43c4:	bd80      	pop	{r7, pc}
    43c6:	bf00      	nop
    43c8:	0000d558 	.word	0x0000d558
    43cc:	4100e000 	.word	0x4100e000
    43d0:	000042cd 	.word	0x000042cd
    43d4:	0000d59c 	.word	0x0000d59c
    43d8:	00004331 	.word	0x00004331
    43dc:	0000d5dc 	.word	0x0000d5dc
    43e0:	000042f3 	.word	0x000042f3

000043e4 <hri_gclk_wait_for_sync>:
{
    43e4:	b480      	push	{r7}
    43e6:	b083      	sub	sp, #12
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
    43ec:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    43ee:	bf00      	nop
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	685a      	ldr	r2, [r3, #4]
    43f4:	683b      	ldr	r3, [r7, #0]
    43f6:	4013      	ands	r3, r2
    43f8:	2b00      	cmp	r3, #0
    43fa:	d1f9      	bne.n	43f0 <hri_gclk_wait_for_sync+0xc>
}
    43fc:	bf00      	nop
    43fe:	370c      	adds	r7, #12
    4400:	46bd      	mov	sp, r7
    4402:	f85d 7b04 	ldr.w	r7, [sp], #4
    4406:	4770      	bx	lr

00004408 <hri_gclk_write_GENCTRL_reg>:
{
    4408:	b580      	push	{r7, lr}
    440a:	b084      	sub	sp, #16
    440c:	af00      	add	r7, sp, #0
    440e:	60f8      	str	r0, [r7, #12]
    4410:	460b      	mov	r3, r1
    4412:	607a      	str	r2, [r7, #4]
    4414:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4416:	7afa      	ldrb	r2, [r7, #11]
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	3208      	adds	r2, #8
    441c:	6879      	ldr	r1, [r7, #4]
    441e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4422:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4426:	68f8      	ldr	r0, [r7, #12]
    4428:	4b02      	ldr	r3, [pc, #8]	; (4434 <hri_gclk_write_GENCTRL_reg+0x2c>)
    442a:	4798      	blx	r3
}
    442c:	bf00      	nop
    442e:	3710      	adds	r7, #16
    4430:	46bd      	mov	sp, r7
    4432:	bd80      	pop	{r7, pc}
    4434:	000043e5 	.word	0x000043e5

00004438 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4438:	b580      	push	{r7, lr}
    443a:	b082      	sub	sp, #8
    443c:	af00      	add	r7, sp, #0
    443e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	f003 0301 	and.w	r3, r3, #1
    4446:	2b00      	cmp	r3, #0
    4448:	d004      	beq.n	4454 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    444a:	4a2c      	ldr	r2, [pc, #176]	; (44fc <_gclk_init_generators_by_fref+0xc4>)
    444c:	2100      	movs	r1, #0
    444e:	482c      	ldr	r0, [pc, #176]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    4450:	4b2c      	ldr	r3, [pc, #176]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    4452:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	f003 0302 	and.w	r3, r3, #2
    445a:	2b00      	cmp	r3, #0
    445c:	d004      	beq.n	4468 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    445e:	4a2a      	ldr	r2, [pc, #168]	; (4508 <_gclk_init_generators_by_fref+0xd0>)
    4460:	2101      	movs	r1, #1
    4462:	4827      	ldr	r0, [pc, #156]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    4464:	4b27      	ldr	r3, [pc, #156]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    4466:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4468:	687b      	ldr	r3, [r7, #4]
    446a:	f003 0304 	and.w	r3, r3, #4
    446e:	2b00      	cmp	r3, #0
    4470:	d004      	beq.n	447c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4472:	4a26      	ldr	r2, [pc, #152]	; (450c <_gclk_init_generators_by_fref+0xd4>)
    4474:	2102      	movs	r1, #2
    4476:	4822      	ldr	r0, [pc, #136]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    4478:	4b22      	ldr	r3, [pc, #136]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    447a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	f003 0308 	and.w	r3, r3, #8
    4482:	2b00      	cmp	r3, #0
    4484:	d004      	beq.n	4490 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4486:	4a22      	ldr	r2, [pc, #136]	; (4510 <_gclk_init_generators_by_fref+0xd8>)
    4488:	2103      	movs	r1, #3
    448a:	481d      	ldr	r0, [pc, #116]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    448c:	4b1d      	ldr	r3, [pc, #116]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    448e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	f003 0310 	and.w	r3, r3, #16
    4496:	2b00      	cmp	r3, #0
    4498:	d004      	beq.n	44a4 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    449a:	4a1e      	ldr	r2, [pc, #120]	; (4514 <_gclk_init_generators_by_fref+0xdc>)
    449c:	2104      	movs	r1, #4
    449e:	4818      	ldr	r0, [pc, #96]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    44a0:	4b18      	ldr	r3, [pc, #96]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    44a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	f003 0320 	and.w	r3, r3, #32
    44aa:	2b00      	cmp	r3, #0
    44ac:	d004      	beq.n	44b8 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    44ae:	4a1a      	ldr	r2, [pc, #104]	; (4518 <_gclk_init_generators_by_fref+0xe0>)
    44b0:	2105      	movs	r1, #5
    44b2:	4813      	ldr	r0, [pc, #76]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    44b4:	4b13      	ldr	r3, [pc, #76]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    44b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    44be:	2b00      	cmp	r3, #0
    44c0:	d004      	beq.n	44cc <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    44c2:	4a16      	ldr	r2, [pc, #88]	; (451c <_gclk_init_generators_by_fref+0xe4>)
    44c4:	2106      	movs	r1, #6
    44c6:	480e      	ldr	r0, [pc, #56]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    44c8:	4b0e      	ldr	r3, [pc, #56]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    44ca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    44d2:	2b00      	cmp	r3, #0
    44d4:	d004      	beq.n	44e0 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    44d6:	4a12      	ldr	r2, [pc, #72]	; (4520 <_gclk_init_generators_by_fref+0xe8>)
    44d8:	210a      	movs	r1, #10
    44da:	4809      	ldr	r0, [pc, #36]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    44dc:	4b09      	ldr	r3, [pc, #36]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    44de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    44e0:	687b      	ldr	r3, [r7, #4]
    44e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    44e6:	2b00      	cmp	r3, #0
    44e8:	d004      	beq.n	44f4 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    44ea:	4a0e      	ldr	r2, [pc, #56]	; (4524 <_gclk_init_generators_by_fref+0xec>)
    44ec:	210b      	movs	r1, #11
    44ee:	4804      	ldr	r0, [pc, #16]	; (4500 <_gclk_init_generators_by_fref+0xc8>)
    44f0:	4b04      	ldr	r3, [pc, #16]	; (4504 <_gclk_init_generators_by_fref+0xcc>)
    44f2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    44f4:	bf00      	nop
    44f6:	3708      	adds	r7, #8
    44f8:	46bd      	mov	sp, r7
    44fa:	bd80      	pop	{r7, pc}
    44fc:	00010107 	.word	0x00010107
    4500:	40001c00 	.word	0x40001c00
    4504:	00004409 	.word	0x00004409
    4508:	00010907 	.word	0x00010907
    450c:	00010906 	.word	0x00010906
    4510:	00020908 	.word	0x00020908
    4514:	00010901 	.word	0x00010901
    4518:	00062901 	.word	0x00062901
    451c:	000c2901 	.word	0x000c2901
    4520:	00010905 	.word	0x00010905
    4524:	00041905 	.word	0x00041905

00004528 <hri_mclk_write_CPUDIV_reg>:
{
    4528:	b480      	push	{r7}
    452a:	b083      	sub	sp, #12
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
    4530:	460b      	mov	r3, r1
    4532:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4534:	687b      	ldr	r3, [r7, #4]
    4536:	78fa      	ldrb	r2, [r7, #3]
    4538:	715a      	strb	r2, [r3, #5]
}
    453a:	bf00      	nop
    453c:	370c      	adds	r7, #12
    453e:	46bd      	mov	sp, r7
    4540:	f85d 7b04 	ldr.w	r7, [sp], #4
    4544:	4770      	bx	lr
	...

00004548 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4548:	b580      	push	{r7, lr}
    454a:	b082      	sub	sp, #8
    454c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    454e:	4b05      	ldr	r3, [pc, #20]	; (4564 <_mclk_init+0x1c>)
    4550:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4552:	2101      	movs	r1, #1
    4554:	6878      	ldr	r0, [r7, #4]
    4556:	4b04      	ldr	r3, [pc, #16]	; (4568 <_mclk_init+0x20>)
    4558:	4798      	blx	r3
}
    455a:	bf00      	nop
    455c:	3708      	adds	r7, #8
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
    4562:	bf00      	nop
    4564:	40000800 	.word	0x40000800
    4568:	00004529 	.word	0x00004529

0000456c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    456c:	b480      	push	{r7}
    456e:	b083      	sub	sp, #12
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
    4574:	460b      	mov	r3, r1
    4576:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	78fa      	ldrb	r2, [r7, #3]
    457c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    457e:	bf00      	nop
    4580:	370c      	adds	r7, #12
    4582:	46bd      	mov	sp, r7
    4584:	f85d 7b04 	ldr.w	r7, [sp], #4
    4588:	4770      	bx	lr

0000458a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    458a:	b480      	push	{r7}
    458c:	b083      	sub	sp, #12
    458e:	af00      	add	r7, sp, #0
    4590:	6078      	str	r0, [r7, #4]
    4592:	460b      	mov	r3, r1
    4594:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	887a      	ldrh	r2, [r7, #2]
    459a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    459c:	bf00      	nop
    459e:	370c      	adds	r7, #12
    45a0:	46bd      	mov	sp, r7
    45a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a6:	4770      	bx	lr

000045a8 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    45a8:	b480      	push	{r7}
    45aa:	b083      	sub	sp, #12
    45ac:	af00      	add	r7, sp, #0
    45ae:	6078      	str	r0, [r7, #4]
    45b0:	460b      	mov	r3, r1
    45b2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    45b4:	687b      	ldr	r3, [r7, #4]
    45b6:	78fa      	ldrb	r2, [r7, #3]
    45b8:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    45ba:	bf00      	nop
    45bc:	370c      	adds	r7, #12
    45be:	46bd      	mov	sp, r7
    45c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45c4:	4770      	bx	lr

000045c6 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    45c6:	b480      	push	{r7}
    45c8:	b083      	sub	sp, #12
    45ca:	af00      	add	r7, sp, #0
    45cc:	6078      	str	r0, [r7, #4]
    45ce:	460b      	mov	r3, r1
    45d0:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	78fa      	ldrb	r2, [r7, #3]
    45d6:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    45d8:	bf00      	nop
    45da:	370c      	adds	r7, #12
    45dc:	46bd      	mov	sp, r7
    45de:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e2:	4770      	bx	lr

000045e4 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    45e4:	b480      	push	{r7}
    45e6:	b085      	sub	sp, #20
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	69db      	ldr	r3, [r3, #28]
    45f0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	0a1b      	lsrs	r3, r3, #8
    45f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    45fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    45fc:	68fb      	ldr	r3, [r7, #12]
}
    45fe:	4618      	mov	r0, r3
    4600:	3714      	adds	r7, #20
    4602:	46bd      	mov	sp, r7
    4604:	f85d 7b04 	ldr.w	r7, [sp], #4
    4608:	4770      	bx	lr

0000460a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    460a:	b480      	push	{r7}
    460c:	b083      	sub	sp, #12
    460e:	af00      	add	r7, sp, #0
    4610:	6078      	str	r0, [r7, #4]
    4612:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4614:	687b      	ldr	r3, [r7, #4]
    4616:	683a      	ldr	r2, [r7, #0]
    4618:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    461a:	bf00      	nop
    461c:	370c      	adds	r7, #12
    461e:	46bd      	mov	sp, r7
    4620:	f85d 7b04 	ldr.w	r7, [sp], #4
    4624:	4770      	bx	lr
	...

00004628 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4628:	b580      	push	{r7, lr}
    462a:	b082      	sub	sp, #8
    462c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    462e:	4b13      	ldr	r3, [pc, #76]	; (467c <_osc32kctrl_init_sources+0x54>)
    4630:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4632:	2300      	movs	r3, #0
    4634:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4636:	f242 018e 	movw	r1, #8334	; 0x208e
    463a:	6878      	ldr	r0, [r7, #4]
    463c:	4b10      	ldr	r3, [pc, #64]	; (4680 <_osc32kctrl_init_sources+0x58>)
    463e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4640:	2100      	movs	r1, #0
    4642:	6878      	ldr	r0, [r7, #4]
    4644:	4b0f      	ldr	r3, [pc, #60]	; (4684 <_osc32kctrl_init_sources+0x5c>)
    4646:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4648:	2100      	movs	r1, #0
    464a:	6878      	ldr	r0, [r7, #4]
    464c:	4b0e      	ldr	r3, [pc, #56]	; (4688 <_osc32kctrl_init_sources+0x60>)
    464e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4650:	6878      	ldr	r0, [r7, #4]
    4652:	4b0e      	ldr	r3, [pc, #56]	; (468c <_osc32kctrl_init_sources+0x64>)
    4654:	4798      	blx	r3
    4656:	4603      	mov	r3, r0
    4658:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    465a:	887b      	ldrh	r3, [r7, #2]
    465c:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    465e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4662:	4619      	mov	r1, r3
    4664:	6878      	ldr	r0, [r7, #4]
    4666:	4b0a      	ldr	r3, [pc, #40]	; (4690 <_osc32kctrl_init_sources+0x68>)
    4668:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    466a:	2100      	movs	r1, #0
    466c:	6878      	ldr	r0, [r7, #4]
    466e:	4b09      	ldr	r3, [pc, #36]	; (4694 <_osc32kctrl_init_sources+0x6c>)
    4670:	4798      	blx	r3
	(void)calib;
}
    4672:	bf00      	nop
    4674:	3708      	adds	r7, #8
    4676:	46bd      	mov	sp, r7
    4678:	bd80      	pop	{r7, pc}
    467a:	bf00      	nop
    467c:	40001400 	.word	0x40001400
    4680:	0000458b 	.word	0x0000458b
    4684:	000045a9 	.word	0x000045a9
    4688:	000045c7 	.word	0x000045c7
    468c:	000045e5 	.word	0x000045e5
    4690:	0000460b 	.word	0x0000460b
    4694:	0000456d 	.word	0x0000456d

00004698 <hri_gclk_wait_for_sync>:
{
    4698:	b480      	push	{r7}
    469a:	b083      	sub	sp, #12
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
    46a0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    46a2:	bf00      	nop
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	685a      	ldr	r2, [r3, #4]
    46a8:	683b      	ldr	r3, [r7, #0]
    46aa:	4013      	ands	r3, r2
    46ac:	2b00      	cmp	r3, #0
    46ae:	d1f9      	bne.n	46a4 <hri_gclk_wait_for_sync+0xc>
}
    46b0:	bf00      	nop
    46b2:	370c      	adds	r7, #12
    46b4:	46bd      	mov	sp, r7
    46b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ba:	4770      	bx	lr

000046bc <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    46bc:	b480      	push	{r7}
    46be:	b083      	sub	sp, #12
    46c0:	af00      	add	r7, sp, #0
    46c2:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	685b      	ldr	r3, [r3, #4]
    46c8:	089b      	lsrs	r3, r3, #2
    46ca:	f003 0301 	and.w	r3, r3, #1
    46ce:	2b00      	cmp	r3, #0
    46d0:	bf14      	ite	ne
    46d2:	2301      	movne	r3, #1
    46d4:	2300      	moveq	r3, #0
    46d6:	b2db      	uxtb	r3, r3
}
    46d8:	4618      	mov	r0, r3
    46da:	370c      	adds	r7, #12
    46dc:	46bd      	mov	sp, r7
    46de:	f85d 7b04 	ldr.w	r7, [sp], #4
    46e2:	4770      	bx	lr

000046e4 <hri_gclk_read_SYNCBUSY_reg>:
{
    46e4:	b480      	push	{r7}
    46e6:	b083      	sub	sp, #12
    46e8:	af00      	add	r7, sp, #0
    46ea:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    46ec:	687b      	ldr	r3, [r7, #4]
    46ee:	685b      	ldr	r3, [r3, #4]
}
    46f0:	4618      	mov	r0, r3
    46f2:	370c      	adds	r7, #12
    46f4:	46bd      	mov	sp, r7
    46f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fa:	4770      	bx	lr

000046fc <hri_gclk_write_GENCTRL_SRC_bf>:
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b086      	sub	sp, #24
    4700:	af00      	add	r7, sp, #0
    4702:	60f8      	str	r0, [r7, #12]
    4704:	460b      	mov	r3, r1
    4706:	607a      	str	r2, [r7, #4]
    4708:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    470a:	7afa      	ldrb	r2, [r7, #11]
    470c:	68fb      	ldr	r3, [r7, #12]
    470e:	3208      	adds	r2, #8
    4710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4714:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4716:	697b      	ldr	r3, [r7, #20]
    4718:	f023 030f 	bic.w	r3, r3, #15
    471c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	f003 030f 	and.w	r3, r3, #15
    4724:	697a      	ldr	r2, [r7, #20]
    4726:	4313      	orrs	r3, r2
    4728:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    472a:	7afa      	ldrb	r2, [r7, #11]
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	3208      	adds	r2, #8
    4730:	6979      	ldr	r1, [r7, #20]
    4732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4736:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    473a:	68f8      	ldr	r0, [r7, #12]
    473c:	4b02      	ldr	r3, [pc, #8]	; (4748 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    473e:	4798      	blx	r3
}
    4740:	bf00      	nop
    4742:	3718      	adds	r7, #24
    4744:	46bd      	mov	sp, r7
    4746:	bd80      	pop	{r7, pc}
    4748:	00004699 	.word	0x00004699

0000474c <hri_gclk_write_PCHCTRL_reg>:
{
    474c:	b480      	push	{r7}
    474e:	b085      	sub	sp, #20
    4750:	af00      	add	r7, sp, #0
    4752:	60f8      	str	r0, [r7, #12]
    4754:	460b      	mov	r3, r1
    4756:	607a      	str	r2, [r7, #4]
    4758:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    475a:	7afa      	ldrb	r2, [r7, #11]
    475c:	68fb      	ldr	r3, [r7, #12]
    475e:	3220      	adds	r2, #32
    4760:	6879      	ldr	r1, [r7, #4]
    4762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4766:	bf00      	nop
    4768:	3714      	adds	r7, #20
    476a:	46bd      	mov	sp, r7
    476c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4770:	4770      	bx	lr

00004772 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4772:	b480      	push	{r7}
    4774:	b085      	sub	sp, #20
    4776:	af00      	add	r7, sp, #0
    4778:	60f8      	str	r0, [r7, #12]
    477a:	460b      	mov	r3, r1
    477c:	607a      	str	r2, [r7, #4]
    477e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4780:	bf00      	nop
    4782:	7afa      	ldrb	r2, [r7, #11]
    4784:	68f9      	ldr	r1, [r7, #12]
    4786:	4613      	mov	r3, r2
    4788:	009b      	lsls	r3, r3, #2
    478a:	4413      	add	r3, r2
    478c:	009b      	lsls	r3, r3, #2
    478e:	440b      	add	r3, r1
    4790:	333c      	adds	r3, #60	; 0x3c
    4792:	681a      	ldr	r2, [r3, #0]
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	4013      	ands	r3, r2
    4798:	2b00      	cmp	r3, #0
    479a:	d1f2      	bne.n	4782 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    479c:	bf00      	nop
    479e:	3714      	adds	r7, #20
    47a0:	46bd      	mov	sp, r7
    47a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a6:	4770      	bx	lr

000047a8 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    47a8:	b480      	push	{r7}
    47aa:	b083      	sub	sp, #12
    47ac:	af00      	add	r7, sp, #0
    47ae:	6078      	str	r0, [r7, #4]
    47b0:	460b      	mov	r3, r1
    47b2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    47b4:	78fa      	ldrb	r2, [r7, #3]
    47b6:	6879      	ldr	r1, [r7, #4]
    47b8:	4613      	mov	r3, r2
    47ba:	009b      	lsls	r3, r3, #2
    47bc:	4413      	add	r3, r2
    47be:	009b      	lsls	r3, r3, #2
    47c0:	440b      	add	r3, r1
    47c2:	3340      	adds	r3, #64	; 0x40
    47c4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    47c6:	f003 0301 	and.w	r3, r3, #1
    47ca:	2b00      	cmp	r3, #0
    47cc:	bf14      	ite	ne
    47ce:	2301      	movne	r3, #1
    47d0:	2300      	moveq	r3, #0
    47d2:	b2db      	uxtb	r3, r3
}
    47d4:	4618      	mov	r0, r3
    47d6:	370c      	adds	r7, #12
    47d8:	46bd      	mov	sp, r7
    47da:	f85d 7b04 	ldr.w	r7, [sp], #4
    47de:	4770      	bx	lr

000047e0 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    47e0:	b480      	push	{r7}
    47e2:	b083      	sub	sp, #12
    47e4:	af00      	add	r7, sp, #0
    47e6:	6078      	str	r0, [r7, #4]
    47e8:	460b      	mov	r3, r1
    47ea:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    47ec:	78fa      	ldrb	r2, [r7, #3]
    47ee:	6879      	ldr	r1, [r7, #4]
    47f0:	4613      	mov	r3, r2
    47f2:	009b      	lsls	r3, r3, #2
    47f4:	4413      	add	r3, r2
    47f6:	009b      	lsls	r3, r3, #2
    47f8:	440b      	add	r3, r1
    47fa:	3340      	adds	r3, #64	; 0x40
    47fc:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    47fe:	085b      	lsrs	r3, r3, #1
    4800:	f003 0301 	and.w	r3, r3, #1
    4804:	2b00      	cmp	r3, #0
    4806:	bf14      	ite	ne
    4808:	2301      	movne	r3, #1
    480a:	2300      	moveq	r3, #0
    480c:	b2db      	uxtb	r3, r3
}
    480e:	4618      	mov	r0, r3
    4810:	370c      	adds	r7, #12
    4812:	46bd      	mov	sp, r7
    4814:	f85d 7b04 	ldr.w	r7, [sp], #4
    4818:	4770      	bx	lr
	...

0000481c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    481c:	b580      	push	{r7, lr}
    481e:	b082      	sub	sp, #8
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
    4824:	460b      	mov	r3, r1
    4826:	70fb      	strb	r3, [r7, #3]
    4828:	4613      	mov	r3, r2
    482a:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    482c:	78fa      	ldrb	r2, [r7, #3]
    482e:	6879      	ldr	r1, [r7, #4]
    4830:	4613      	mov	r3, r2
    4832:	009b      	lsls	r3, r3, #2
    4834:	4413      	add	r3, r2
    4836:	009b      	lsls	r3, r3, #2
    4838:	440b      	add	r3, r1
    483a:	3330      	adds	r3, #48	; 0x30
    483c:	78ba      	ldrb	r2, [r7, #2]
    483e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4840:	78fb      	ldrb	r3, [r7, #3]
    4842:	2202      	movs	r2, #2
    4844:	4619      	mov	r1, r3
    4846:	6878      	ldr	r0, [r7, #4]
    4848:	4b02      	ldr	r3, [pc, #8]	; (4854 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    484a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    484c:	bf00      	nop
    484e:	3708      	adds	r7, #8
    4850:	46bd      	mov	sp, r7
    4852:	bd80      	pop	{r7, pc}
    4854:	00004773 	.word	0x00004773

00004858 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4858:	b580      	push	{r7, lr}
    485a:	b084      	sub	sp, #16
    485c:	af00      	add	r7, sp, #0
    485e:	60f8      	str	r0, [r7, #12]
    4860:	460b      	mov	r3, r1
    4862:	607a      	str	r2, [r7, #4]
    4864:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4866:	7afa      	ldrb	r2, [r7, #11]
    4868:	68f9      	ldr	r1, [r7, #12]
    486a:	4613      	mov	r3, r2
    486c:	009b      	lsls	r3, r3, #2
    486e:	4413      	add	r3, r2
    4870:	009b      	lsls	r3, r3, #2
    4872:	440b      	add	r3, r1
    4874:	3334      	adds	r3, #52	; 0x34
    4876:	687a      	ldr	r2, [r7, #4]
    4878:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    487a:	7afb      	ldrb	r3, [r7, #11]
    487c:	2206      	movs	r2, #6
    487e:	4619      	mov	r1, r3
    4880:	68f8      	ldr	r0, [r7, #12]
    4882:	4b03      	ldr	r3, [pc, #12]	; (4890 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4884:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4886:	bf00      	nop
    4888:	3710      	adds	r7, #16
    488a:	46bd      	mov	sp, r7
    488c:	bd80      	pop	{r7, pc}
    488e:	bf00      	nop
    4890:	00004773 	.word	0x00004773

00004894 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4894:	b480      	push	{r7}
    4896:	b085      	sub	sp, #20
    4898:	af00      	add	r7, sp, #0
    489a:	60f8      	str	r0, [r7, #12]
    489c:	460b      	mov	r3, r1
    489e:	607a      	str	r2, [r7, #4]
    48a0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    48a2:	7afa      	ldrb	r2, [r7, #11]
    48a4:	68f9      	ldr	r1, [r7, #12]
    48a6:	4613      	mov	r3, r2
    48a8:	009b      	lsls	r3, r3, #2
    48aa:	4413      	add	r3, r2
    48ac:	009b      	lsls	r3, r3, #2
    48ae:	440b      	add	r3, r1
    48b0:	3338      	adds	r3, #56	; 0x38
    48b2:	687a      	ldr	r2, [r7, #4]
    48b4:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    48b6:	bf00      	nop
    48b8:	3714      	adds	r7, #20
    48ba:	46bd      	mov	sp, r7
    48bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c0:	4770      	bx	lr

000048c2 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    48c2:	b480      	push	{r7}
    48c4:	b083      	sub	sp, #12
    48c6:	af00      	add	r7, sp, #0
    48c8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	691b      	ldr	r3, [r3, #16]
    48ce:	085b      	lsrs	r3, r3, #1
    48d0:	f003 0301 	and.w	r3, r3, #1
    48d4:	2b00      	cmp	r3, #0
    48d6:	bf14      	ite	ne
    48d8:	2301      	movne	r3, #1
    48da:	2300      	moveq	r3, #0
    48dc:	b2db      	uxtb	r3, r3
}
    48de:	4618      	mov	r0, r3
    48e0:	370c      	adds	r7, #12
    48e2:	46bd      	mov	sp, r7
    48e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e8:	4770      	bx	lr

000048ea <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    48ea:	b480      	push	{r7}
    48ec:	b083      	sub	sp, #12
    48ee:	af00      	add	r7, sp, #0
    48f0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	691b      	ldr	r3, [r3, #16]
    48f6:	0a1b      	lsrs	r3, r3, #8
    48f8:	f003 0301 	and.w	r3, r3, #1
    48fc:	2b00      	cmp	r3, #0
    48fe:	bf14      	ite	ne
    4900:	2301      	movne	r3, #1
    4902:	2300      	moveq	r3, #0
    4904:	b2db      	uxtb	r3, r3
}
    4906:	4618      	mov	r0, r3
    4908:	370c      	adds	r7, #12
    490a:	46bd      	mov	sp, r7
    490c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4910:	4770      	bx	lr

00004912 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4912:	b480      	push	{r7}
    4914:	b085      	sub	sp, #20
    4916:	af00      	add	r7, sp, #0
    4918:	6078      	str	r0, [r7, #4]
    491a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	691b      	ldr	r3, [r3, #16]
    4920:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4922:	68fa      	ldr	r2, [r7, #12]
    4924:	683b      	ldr	r3, [r7, #0]
    4926:	4013      	ands	r3, r2
    4928:	60fb      	str	r3, [r7, #12]
	return tmp;
    492a:	68fb      	ldr	r3, [r7, #12]
}
    492c:	4618      	mov	r0, r3
    492e:	3714      	adds	r7, #20
    4930:	46bd      	mov	sp, r7
    4932:	f85d 7b04 	ldr.w	r7, [sp], #4
    4936:	4770      	bx	lr

00004938 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4938:	b480      	push	{r7}
    493a:	b085      	sub	sp, #20
    493c:	af00      	add	r7, sp, #0
    493e:	60f8      	str	r0, [r7, #12]
    4940:	460b      	mov	r3, r1
    4942:	607a      	str	r2, [r7, #4]
    4944:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4946:	7afb      	ldrb	r3, [r7, #11]
    4948:	68fa      	ldr	r2, [r7, #12]
    494a:	3304      	adds	r3, #4
    494c:	009b      	lsls	r3, r3, #2
    494e:	4413      	add	r3, r2
    4950:	687a      	ldr	r2, [r7, #4]
    4952:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4954:	bf00      	nop
    4956:	3714      	adds	r7, #20
    4958:	46bd      	mov	sp, r7
    495a:	f85d 7b04 	ldr.w	r7, [sp], #4
    495e:	4770      	bx	lr

00004960 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4960:	b480      	push	{r7}
    4962:	b083      	sub	sp, #12
    4964:	af00      	add	r7, sp, #0
    4966:	6078      	str	r0, [r7, #4]
    4968:	460b      	mov	r3, r1
    496a:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	78fa      	ldrb	r2, [r7, #3]
    4970:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4972:	bf00      	nop
    4974:	370c      	adds	r7, #12
    4976:	46bd      	mov	sp, r7
    4978:	f85d 7b04 	ldr.w	r7, [sp], #4
    497c:	4770      	bx	lr

0000497e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    497e:	b480      	push	{r7}
    4980:	b085      	sub	sp, #20
    4982:	af00      	add	r7, sp, #0
    4984:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	f893 3020 	ldrb.w	r3, [r3, #32]
    498c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    498e:	7bfb      	ldrb	r3, [r7, #15]
    4990:	f003 0301 	and.w	r3, r3, #1
    4994:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4996:	7bfb      	ldrb	r3, [r7, #15]
    4998:	2b00      	cmp	r3, #0
    499a:	bf14      	ite	ne
    499c:	2301      	movne	r3, #1
    499e:	2300      	moveq	r3, #0
    49a0:	b2db      	uxtb	r3, r3
}
    49a2:	4618      	mov	r0, r3
    49a4:	3714      	adds	r7, #20
    49a6:	46bd      	mov	sp, r7
    49a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ac:	4770      	bx	lr

000049ae <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    49ae:	b480      	push	{r7}
    49b0:	b083      	sub	sp, #12
    49b2:	af00      	add	r7, sp, #0
    49b4:	6078      	str	r0, [r7, #4]
    49b6:	460b      	mov	r3, r1
    49b8:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    49ba:	687b      	ldr	r3, [r7, #4]
    49bc:	78fa      	ldrb	r2, [r7, #3]
    49be:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    49c2:	bf00      	nop
    49c4:	370c      	adds	r7, #12
    49c6:	46bd      	mov	sp, r7
    49c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49cc:	4770      	bx	lr

000049ce <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    49ce:	b480      	push	{r7}
    49d0:	b083      	sub	sp, #12
    49d2:	af00      	add	r7, sp, #0
    49d4:	6078      	str	r0, [r7, #4]
    49d6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	683a      	ldr	r2, [r7, #0]
    49dc:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    49de:	bf00      	nop
    49e0:	370c      	adds	r7, #12
    49e2:	46bd      	mov	sp, r7
    49e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e8:	4770      	bx	lr

000049ea <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    49ea:	b480      	push	{r7}
    49ec:	b083      	sub	sp, #12
    49ee:	af00      	add	r7, sp, #0
    49f0:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    49f6:	4618      	mov	r0, r3
    49f8:	370c      	adds	r7, #12
    49fa:	46bd      	mov	sp, r7
    49fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a00:	4770      	bx	lr

00004a02 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4a02:	b480      	push	{r7}
    4a04:	b083      	sub	sp, #12
    4a06:	af00      	add	r7, sp, #0
    4a08:	6078      	str	r0, [r7, #4]
    4a0a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	683a      	ldr	r2, [r7, #0]
    4a10:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4a12:	bf00      	nop
    4a14:	370c      	adds	r7, #12
    4a16:	46bd      	mov	sp, r7
    4a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a1c:	4770      	bx	lr

00004a1e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4a1e:	b480      	push	{r7}
    4a20:	b085      	sub	sp, #20
    4a22:	af00      	add	r7, sp, #0
    4a24:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4a26:	687b      	ldr	r3, [r7, #4]
    4a28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4a2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4a2e:	7bfb      	ldrb	r3, [r7, #15]
    4a30:	085b      	lsrs	r3, r3, #1
    4a32:	b2db      	uxtb	r3, r3
    4a34:	f003 0301 	and.w	r3, r3, #1
    4a38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4a3a:	7bfb      	ldrb	r3, [r7, #15]
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	bf14      	ite	ne
    4a40:	2301      	movne	r3, #1
    4a42:	2300      	moveq	r3, #0
    4a44:	b2db      	uxtb	r3, r3
}
    4a46:	4618      	mov	r0, r3
    4a48:	3714      	adds	r7, #20
    4a4a:	46bd      	mov	sp, r7
    4a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a50:	4770      	bx	lr

00004a52 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4a52:	b480      	push	{r7}
    4a54:	b085      	sub	sp, #20
    4a56:	af00      	add	r7, sp, #0
    4a58:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4a60:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4a62:	7bfb      	ldrb	r3, [r7, #15]
    4a64:	089b      	lsrs	r3, r3, #2
    4a66:	b2db      	uxtb	r3, r3
    4a68:	f003 0301 	and.w	r3, r3, #1
    4a6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4a6e:	7bfb      	ldrb	r3, [r7, #15]
    4a70:	2b00      	cmp	r3, #0
    4a72:	bf14      	ite	ne
    4a74:	2301      	movne	r3, #1
    4a76:	2300      	moveq	r3, #0
    4a78:	b2db      	uxtb	r3, r3
}
    4a7a:	4618      	mov	r0, r3
    4a7c:	3714      	adds	r7, #20
    4a7e:	46bd      	mov	sp, r7
    4a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a84:	4770      	bx	lr

00004a86 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4a86:	b480      	push	{r7}
    4a88:	b085      	sub	sp, #20
    4a8a:	af00      	add	r7, sp, #0
    4a8c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4a8e:	687b      	ldr	r3, [r7, #4]
    4a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4a94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4a96:	7bfb      	ldrb	r3, [r7, #15]
    4a98:	08db      	lsrs	r3, r3, #3
    4a9a:	b2db      	uxtb	r3, r3
    4a9c:	f003 0301 	and.w	r3, r3, #1
    4aa0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4aa2:	7bfb      	ldrb	r3, [r7, #15]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	bf14      	ite	ne
    4aa8:	2301      	movne	r3, #1
    4aaa:	2300      	moveq	r3, #0
    4aac:	b2db      	uxtb	r3, r3
}
    4aae:	4618      	mov	r0, r3
    4ab0:	3714      	adds	r7, #20
    4ab2:	46bd      	mov	sp, r7
    4ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab8:	4770      	bx	lr

00004aba <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4aba:	b480      	push	{r7}
    4abc:	b085      	sub	sp, #20
    4abe:	af00      	add	r7, sp, #0
    4ac0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4ac8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4aca:	7bfb      	ldrb	r3, [r7, #15]
    4acc:	091b      	lsrs	r3, r3, #4
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	f003 0301 	and.w	r3, r3, #1
    4ad4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4ad6:	7bfb      	ldrb	r3, [r7, #15]
    4ad8:	2b00      	cmp	r3, #0
    4ada:	bf14      	ite	ne
    4adc:	2301      	movne	r3, #1
    4ade:	2300      	moveq	r3, #0
    4ae0:	b2db      	uxtb	r3, r3
}
    4ae2:	4618      	mov	r0, r3
    4ae4:	3714      	adds	r7, #20
    4ae6:	46bd      	mov	sp, r7
    4ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aec:	4770      	bx	lr
	...

00004af0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4af0:	b580      	push	{r7, lr}
    4af2:	b082      	sub	sp, #8
    4af4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4af6:	4b0a      	ldr	r3, [pc, #40]	; (4b20 <_oscctrl_init_sources+0x30>)
    4af8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4afa:	4a0a      	ldr	r2, [pc, #40]	; (4b24 <_oscctrl_init_sources+0x34>)
    4afc:	2101      	movs	r1, #1
    4afe:	6878      	ldr	r0, [r7, #4]
    4b00:	4b09      	ldr	r3, [pc, #36]	; (4b28 <_oscctrl_init_sources+0x38>)
    4b02:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4b04:	bf00      	nop
    4b06:	6878      	ldr	r0, [r7, #4]
    4b08:	4b08      	ldr	r3, [pc, #32]	; (4b2c <_oscctrl_init_sources+0x3c>)
    4b0a:	4798      	blx	r3
    4b0c:	4603      	mov	r3, r0
    4b0e:	f083 0301 	eor.w	r3, r3, #1
    4b12:	b2db      	uxtb	r3, r3
    4b14:	2b00      	cmp	r3, #0
    4b16:	d1f6      	bne.n	4b06 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4b18:	bf00      	nop
    4b1a:	3708      	adds	r7, #8
    4b1c:	46bd      	mov	sp, r7
    4b1e:	bd80      	pop	{r7, pc}
    4b20:	40001000 	.word	0x40001000
    4b24:	03002606 	.word	0x03002606
    4b28:	00004939 	.word	0x00004939
    4b2c:	000048c3 	.word	0x000048c3

00004b30 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b084      	sub	sp, #16
    4b34:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4b36:	4b6b      	ldr	r3, [pc, #428]	; (4ce4 <_oscctrl_init_referenced_generators+0x1b4>)
    4b38:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4b3a:	2204      	movs	r2, #4
    4b3c:	2100      	movs	r1, #0
    4b3e:	486a      	ldr	r0, [pc, #424]	; (4ce8 <_oscctrl_init_referenced_generators+0x1b8>)
    4b40:	4b6a      	ldr	r3, [pc, #424]	; (4cec <_oscctrl_init_referenced_generators+0x1bc>)
    4b42:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4b44:	bf00      	nop
    4b46:	4868      	ldr	r0, [pc, #416]	; (4ce8 <_oscctrl_init_referenced_generators+0x1b8>)
    4b48:	4b69      	ldr	r3, [pc, #420]	; (4cf0 <_oscctrl_init_referenced_generators+0x1c0>)
    4b4a:	4798      	blx	r3
    4b4c:	4603      	mov	r3, r0
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d1f9      	bne.n	4b46 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4b52:	2100      	movs	r1, #0
    4b54:	68f8      	ldr	r0, [r7, #12]
    4b56:	4b67      	ldr	r3, [pc, #412]	; (4cf4 <_oscctrl_init_referenced_generators+0x1c4>)
    4b58:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4b5a:	4967      	ldr	r1, [pc, #412]	; (4cf8 <_oscctrl_init_referenced_generators+0x1c8>)
    4b5c:	68f8      	ldr	r0, [r7, #12]
    4b5e:	4b67      	ldr	r3, [pc, #412]	; (4cfc <_oscctrl_init_referenced_generators+0x1cc>)
    4b60:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4b62:	bf00      	nop
    4b64:	68f8      	ldr	r0, [r7, #12]
    4b66:	4b66      	ldr	r3, [pc, #408]	; (4d00 <_oscctrl_init_referenced_generators+0x1d0>)
    4b68:	4798      	blx	r3
    4b6a:	4603      	mov	r3, r0
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d1f9      	bne.n	4b64 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4b70:	2100      	movs	r1, #0
    4b72:	68f8      	ldr	r0, [r7, #12]
    4b74:	4b63      	ldr	r3, [pc, #396]	; (4d04 <_oscctrl_init_referenced_generators+0x1d4>)
    4b76:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4b78:	bf00      	nop
    4b7a:	68f8      	ldr	r0, [r7, #12]
    4b7c:	4b62      	ldr	r3, [pc, #392]	; (4d08 <_oscctrl_init_referenced_generators+0x1d8>)
    4b7e:	4798      	blx	r3
    4b80:	4603      	mov	r3, r0
    4b82:	2b00      	cmp	r3, #0
    4b84:	d1f9      	bne.n	4b7a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4b86:	2302      	movs	r3, #2
    4b88:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4b8a:	7afb      	ldrb	r3, [r7, #11]
    4b8c:	4619      	mov	r1, r3
    4b8e:	68f8      	ldr	r0, [r7, #12]
    4b90:	4b58      	ldr	r3, [pc, #352]	; (4cf4 <_oscctrl_init_referenced_generators+0x1c4>)
    4b92:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4b94:	bf00      	nop
    4b96:	68f8      	ldr	r0, [r7, #12]
    4b98:	4b5c      	ldr	r3, [pc, #368]	; (4d0c <_oscctrl_init_referenced_generators+0x1dc>)
    4b9a:	4798      	blx	r3
    4b9c:	4603      	mov	r3, r0
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d1f9      	bne.n	4b96 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4ba2:	68f8      	ldr	r0, [r7, #12]
    4ba4:	4b5a      	ldr	r3, [pc, #360]	; (4d10 <_oscctrl_init_referenced_generators+0x1e0>)
    4ba6:	4798      	blx	r3
    4ba8:	4603      	mov	r3, r0
    4baa:	4619      	mov	r1, r3
    4bac:	68f8      	ldr	r0, [r7, #12]
    4bae:	4b59      	ldr	r3, [pc, #356]	; (4d14 <_oscctrl_init_referenced_generators+0x1e4>)
    4bb0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4bb2:	bf00      	nop
    4bb4:	68f8      	ldr	r0, [r7, #12]
    4bb6:	4b58      	ldr	r3, [pc, #352]	; (4d18 <_oscctrl_init_referenced_generators+0x1e8>)
    4bb8:	4798      	blx	r3
    4bba:	4603      	mov	r3, r0
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d1f9      	bne.n	4bb4 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4bc0:	2319      	movs	r3, #25
    4bc2:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4bc4:	7afb      	ldrb	r3, [r7, #11]
    4bc6:	4619      	mov	r1, r3
    4bc8:	68f8      	ldr	r0, [r7, #12]
    4bca:	4b4e      	ldr	r3, [pc, #312]	; (4d04 <_oscctrl_init_referenced_generators+0x1d4>)
    4bcc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4bce:	bf00      	nop
    4bd0:	68f8      	ldr	r0, [r7, #12]
    4bd2:	4b4d      	ldr	r3, [pc, #308]	; (4d08 <_oscctrl_init_referenced_generators+0x1d8>)
    4bd4:	4798      	blx	r3
    4bd6:	4603      	mov	r3, r0
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d1f9      	bne.n	4bd0 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4bdc:	2245      	movs	r2, #69	; 0x45
    4bde:	2101      	movs	r1, #1
    4be0:	4841      	ldr	r0, [pc, #260]	; (4ce8 <_oscctrl_init_referenced_generators+0x1b8>)
    4be2:	4b4e      	ldr	r3, [pc, #312]	; (4d1c <_oscctrl_init_referenced_generators+0x1ec>)
    4be4:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4be6:	223b      	movs	r2, #59	; 0x3b
    4be8:	2100      	movs	r1, #0
    4bea:	68f8      	ldr	r0, [r7, #12]
    4bec:	4b4c      	ldr	r3, [pc, #304]	; (4d20 <_oscctrl_init_referenced_generators+0x1f0>)
    4bee:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4bf0:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4bf4:	2100      	movs	r1, #0
    4bf6:	68f8      	ldr	r0, [r7, #12]
    4bf8:	4b4a      	ldr	r3, [pc, #296]	; (4d24 <_oscctrl_init_referenced_generators+0x1f4>)
    4bfa:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4bfc:	2242      	movs	r2, #66	; 0x42
    4bfe:	2100      	movs	r1, #0
    4c00:	68f8      	ldr	r0, [r7, #12]
    4c02:	4b49      	ldr	r3, [pc, #292]	; (4d28 <_oscctrl_init_referenced_generators+0x1f8>)
    4c04:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4c06:	4a49      	ldr	r2, [pc, #292]	; (4d2c <_oscctrl_init_referenced_generators+0x1fc>)
    4c08:	2101      	movs	r1, #1
    4c0a:	68f8      	ldr	r0, [r7, #12]
    4c0c:	4b44      	ldr	r3, [pc, #272]	; (4d20 <_oscctrl_init_referenced_generators+0x1f0>)
    4c0e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4c10:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4c14:	2101      	movs	r1, #1
    4c16:	68f8      	ldr	r0, [r7, #12]
    4c18:	4b42      	ldr	r3, [pc, #264]	; (4d24 <_oscctrl_init_referenced_generators+0x1f4>)
    4c1a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4c1c:	2202      	movs	r2, #2
    4c1e:	2101      	movs	r1, #1
    4c20:	68f8      	ldr	r0, [r7, #12]
    4c22:	4b41      	ldr	r3, [pc, #260]	; (4d28 <_oscctrl_init_referenced_generators+0x1f8>)
    4c24:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4c26:	68f8      	ldr	r0, [r7, #12]
    4c28:	4b41      	ldr	r3, [pc, #260]	; (4d30 <_oscctrl_init_referenced_generators+0x200>)
    4c2a:	4798      	blx	r3
    4c2c:	4603      	mov	r3, r0
    4c2e:	2b00      	cmp	r3, #0
    4c30:	d00c      	beq.n	4c4c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    4c32:	f44f 6310 	mov.w	r3, #2304	; 0x900
    4c36:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4c38:	bf00      	nop
    4c3a:	6879      	ldr	r1, [r7, #4]
    4c3c:	68f8      	ldr	r0, [r7, #12]
    4c3e:	4b3d      	ldr	r3, [pc, #244]	; (4d34 <_oscctrl_init_referenced_generators+0x204>)
    4c40:	4798      	blx	r3
    4c42:	4602      	mov	r2, r0
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	429a      	cmp	r2, r3
    4c48:	d1f7      	bne.n	4c3a <_oscctrl_init_referenced_generators+0x10a>
    4c4a:	e009      	b.n	4c60 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4c4c:	bf00      	nop
    4c4e:	68f8      	ldr	r0, [r7, #12]
    4c50:	4b39      	ldr	r3, [pc, #228]	; (4d38 <_oscctrl_init_referenced_generators+0x208>)
    4c52:	4798      	blx	r3
    4c54:	4603      	mov	r3, r0
    4c56:	f083 0301 	eor.w	r3, r3, #1
    4c5a:	b2db      	uxtb	r3, r3
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d1f6      	bne.n	4c4e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4c60:	bf00      	nop
    4c62:	2100      	movs	r1, #0
    4c64:	68f8      	ldr	r0, [r7, #12]
    4c66:	4b35      	ldr	r3, [pc, #212]	; (4d3c <_oscctrl_init_referenced_generators+0x20c>)
    4c68:	4798      	blx	r3
    4c6a:	4603      	mov	r3, r0
    4c6c:	f083 0301 	eor.w	r3, r3, #1
    4c70:	b2db      	uxtb	r3, r3
    4c72:	2b00      	cmp	r3, #0
    4c74:	d009      	beq.n	4c8a <_oscctrl_init_referenced_generators+0x15a>
    4c76:	2100      	movs	r1, #0
    4c78:	68f8      	ldr	r0, [r7, #12]
    4c7a:	4b31      	ldr	r3, [pc, #196]	; (4d40 <_oscctrl_init_referenced_generators+0x210>)
    4c7c:	4798      	blx	r3
    4c7e:	4603      	mov	r3, r0
    4c80:	f083 0301 	eor.w	r3, r3, #1
    4c84:	b2db      	uxtb	r3, r3
    4c86:	2b00      	cmp	r3, #0
    4c88:	d1eb      	bne.n	4c62 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4c8a:	bf00      	nop
    4c8c:	2101      	movs	r1, #1
    4c8e:	68f8      	ldr	r0, [r7, #12]
    4c90:	4b2a      	ldr	r3, [pc, #168]	; (4d3c <_oscctrl_init_referenced_generators+0x20c>)
    4c92:	4798      	blx	r3
    4c94:	4603      	mov	r3, r0
    4c96:	f083 0301 	eor.w	r3, r3, #1
    4c9a:	b2db      	uxtb	r3, r3
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	d009      	beq.n	4cb4 <_oscctrl_init_referenced_generators+0x184>
    4ca0:	2101      	movs	r1, #1
    4ca2:	68f8      	ldr	r0, [r7, #12]
    4ca4:	4b26      	ldr	r3, [pc, #152]	; (4d40 <_oscctrl_init_referenced_generators+0x210>)
    4ca6:	4798      	blx	r3
    4ca8:	4603      	mov	r3, r0
    4caa:	f083 0301 	eor.w	r3, r3, #1
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d1eb      	bne.n	4c8c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4cb4:	bf00      	nop
    4cb6:	480c      	ldr	r0, [pc, #48]	; (4ce8 <_oscctrl_init_referenced_generators+0x1b8>)
    4cb8:	4b22      	ldr	r3, [pc, #136]	; (4d44 <_oscctrl_init_referenced_generators+0x214>)
    4cba:	4798      	blx	r3
    4cbc:	4603      	mov	r3, r0
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d1f9      	bne.n	4cb6 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    4cc2:	2207      	movs	r2, #7
    4cc4:	2100      	movs	r1, #0
    4cc6:	4808      	ldr	r0, [pc, #32]	; (4ce8 <_oscctrl_init_referenced_generators+0x1b8>)
    4cc8:	4b08      	ldr	r3, [pc, #32]	; (4cec <_oscctrl_init_referenced_generators+0x1bc>)
    4cca:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4ccc:	bf00      	nop
    4cce:	4806      	ldr	r0, [pc, #24]	; (4ce8 <_oscctrl_init_referenced_generators+0x1b8>)
    4cd0:	4b07      	ldr	r3, [pc, #28]	; (4cf0 <_oscctrl_init_referenced_generators+0x1c0>)
    4cd2:	4798      	blx	r3
    4cd4:	4603      	mov	r3, r0
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d1f9      	bne.n	4cce <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    4cda:	bf00      	nop
    4cdc:	3710      	adds	r7, #16
    4cde:	46bd      	mov	sp, r7
    4ce0:	bd80      	pop	{r7, pc}
    4ce2:	bf00      	nop
    4ce4:	40001000 	.word	0x40001000
    4ce8:	40001c00 	.word	0x40001c00
    4cec:	000046fd 	.word	0x000046fd
    4cf0:	000046bd 	.word	0x000046bd
    4cf4:	00004961 	.word	0x00004961
    4cf8:	0401bb80 	.word	0x0401bb80
    4cfc:	00004a03 	.word	0x00004a03
    4d00:	00004abb 	.word	0x00004abb
    4d04:	000049af 	.word	0x000049af
    4d08:	00004a53 	.word	0x00004a53
    4d0c:	00004a1f 	.word	0x00004a1f
    4d10:	000049eb 	.word	0x000049eb
    4d14:	000049cf 	.word	0x000049cf
    4d18:	00004a87 	.word	0x00004a87
    4d1c:	0000474d 	.word	0x0000474d
    4d20:	00004859 	.word	0x00004859
    4d24:	00004895 	.word	0x00004895
    4d28:	0000481d 	.word	0x0000481d
    4d2c:	000407a0 	.word	0x000407a0
    4d30:	0000497f 	.word	0x0000497f
    4d34:	00004913 	.word	0x00004913
    4d38:	000048eb 	.word	0x000048eb
    4d3c:	000047a9 	.word	0x000047a9
    4d40:	000047e1 	.word	0x000047e1
    4d44:	000046e5 	.word	0x000046e5

00004d48 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    4d48:	b480      	push	{r7}
    4d4a:	b083      	sub	sp, #12
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	69db      	ldr	r3, [r3, #28]
    4d54:	0a9b      	lsrs	r3, r3, #10
    4d56:	f003 0301 	and.w	r3, r3, #1
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	bf14      	ite	ne
    4d5e:	2301      	movne	r3, #1
    4d60:	2300      	moveq	r3, #0
    4d62:	b2db      	uxtb	r3, r3
}
    4d64:	4618      	mov	r0, r3
    4d66:	370c      	adds	r7, #12
    4d68:	46bd      	mov	sp, r7
    4d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6e:	4770      	bx	lr

00004d70 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    4d70:	b480      	push	{r7}
    4d72:	b083      	sub	sp, #12
    4d74:	af00      	add	r7, sp, #0
    4d76:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4d7e:	61da      	str	r2, [r3, #28]
}
    4d80:	bf00      	nop
    4d82:	370c      	adds	r7, #12
    4d84:	46bd      	mov	sp, r7
    4d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8a:	4770      	bx	lr

00004d8c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    4d8c:	b480      	push	{r7}
    4d8e:	b083      	sub	sp, #12
    4d90:	af00      	add	r7, sp, #0
    4d92:	6078      	str	r0, [r7, #4]
    4d94:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	683a      	ldr	r2, [r7, #0]
    4d9a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4d9c:	bf00      	nop
    4d9e:	370c      	adds	r7, #12
    4da0:	46bd      	mov	sp, r7
    4da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da6:	4770      	bx	lr

00004da8 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    4da8:	b480      	push	{r7}
    4daa:	b083      	sub	sp, #12
    4dac:	af00      	add	r7, sp, #0
    4dae:	6078      	str	r0, [r7, #4]
    4db0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	683a      	ldr	r2, [r7, #0]
    4db6:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4db8:	bf00      	nop
    4dba:	370c      	adds	r7, #12
    4dbc:	46bd      	mov	sp, r7
    4dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc2:	4770      	bx	lr

00004dc4 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    4dc4:	b480      	push	{r7}
    4dc6:	b083      	sub	sp, #12
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
    4dcc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	683a      	ldr	r2, [r7, #0]
    4dd2:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4dd4:	bf00      	nop
    4dd6:	370c      	adds	r7, #12
    4dd8:	46bd      	mov	sp, r7
    4dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dde:	4770      	bx	lr

00004de0 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    4de0:	b480      	push	{r7}
    4de2:	b083      	sub	sp, #12
    4de4:	af00      	add	r7, sp, #0
    4de6:	6078      	str	r0, [r7, #4]
    4de8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	683a      	ldr	r2, [r7, #0]
    4dee:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4df0:	bf00      	nop
    4df2:	370c      	adds	r7, #12
    4df4:	46bd      	mov	sp, r7
    4df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfa:	4770      	bx	lr

00004dfc <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4dfc:	b480      	push	{r7}
    4dfe:	b085      	sub	sp, #20
    4e00:	af00      	add	r7, sp, #0
    4e02:	6078      	str	r0, [r7, #4]
    4e04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4e06:	687b      	ldr	r3, [r7, #4]
    4e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e0a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4e12:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    4e14:	683b      	ldr	r3, [r7, #0]
    4e16:	b2db      	uxtb	r3, r3
    4e18:	68fa      	ldr	r2, [r7, #12]
    4e1a:	4313      	orrs	r3, r2
    4e1c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	68fa      	ldr	r2, [r7, #12]
    4e22:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4e24:	bf00      	nop
    4e26:	3714      	adds	r7, #20
    4e28:	46bd      	mov	sp, r7
    4e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e2e:	4770      	bx	lr

00004e30 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4e30:	b480      	push	{r7}
    4e32:	b085      	sub	sp, #20
    4e34:	af00      	add	r7, sp, #0
    4e36:	6078      	str	r0, [r7, #4]
    4e38:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e3e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    4e40:	68fb      	ldr	r3, [r7, #12]
    4e42:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    4e46:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    4e48:	683b      	ldr	r3, [r7, #0]
    4e4a:	041b      	lsls	r3, r3, #16
    4e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4e50:	68fa      	ldr	r2, [r7, #12]
    4e52:	4313      	orrs	r3, r2
    4e54:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	68fa      	ldr	r2, [r7, #12]
    4e5a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4e5c:	bf00      	nop
    4e5e:	3714      	adds	r7, #20
    4e60:	46bd      	mov	sp, r7
    4e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e66:	4770      	bx	lr

00004e68 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    4e68:	b480      	push	{r7}
    4e6a:	b083      	sub	sp, #12
    4e6c:	af00      	add	r7, sp, #0
    4e6e:	6078      	str	r0, [r7, #4]
    4e70:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	683a      	ldr	r2, [r7, #0]
    4e76:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4e78:	bf00      	nop
    4e7a:	370c      	adds	r7, #12
    4e7c:	46bd      	mov	sp, r7
    4e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e82:	4770      	bx	lr

00004e84 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    4e84:	b480      	push	{r7}
    4e86:	b083      	sub	sp, #12
    4e88:	af00      	add	r7, sp, #0
    4e8a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    4e90:	4618      	mov	r0, r3
    4e92:	370c      	adds	r7, #12
    4e94:	46bd      	mov	sp, r7
    4e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e9a:	4770      	bx	lr

00004e9c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    4e9c:	b480      	push	{r7}
    4e9e:	b085      	sub	sp, #20
    4ea0:	af00      	add	r7, sp, #0
    4ea2:	60f8      	str	r0, [r7, #12]
    4ea4:	60b9      	str	r1, [r7, #8]
    4ea6:	607a      	str	r2, [r7, #4]
	while (count--) {
    4ea8:	e007      	b.n	4eba <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    4eaa:	68fb      	ldr	r3, [r7, #12]
    4eac:	1c5a      	adds	r2, r3, #1
    4eae:	60fa      	str	r2, [r7, #12]
    4eb0:	68ba      	ldr	r2, [r7, #8]
    4eb2:	1c51      	adds	r1, r2, #1
    4eb4:	60b9      	str	r1, [r7, #8]
    4eb6:	7812      	ldrb	r2, [r2, #0]
    4eb8:	701a      	strb	r2, [r3, #0]
	while (count--) {
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	1e5a      	subs	r2, r3, #1
    4ebe:	607a      	str	r2, [r7, #4]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d1f2      	bne.n	4eaa <_qspi_memcpy+0xe>
	}
}
    4ec4:	bf00      	nop
    4ec6:	3714      	adds	r7, #20
    4ec8:	46bd      	mov	sp, r7
    4eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ece:	4770      	bx	lr

00004ed0 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    4ed0:	b580      	push	{r7, lr}
    4ed2:	b082      	sub	sp, #8
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    4ed8:	4903      	ldr	r1, [pc, #12]	; (4ee8 <_qspi_end_transfer+0x18>)
    4eda:	6878      	ldr	r0, [r7, #4]
    4edc:	4b03      	ldr	r3, [pc, #12]	; (4eec <_qspi_end_transfer+0x1c>)
    4ede:	4798      	blx	r3
}
    4ee0:	bf00      	nop
    4ee2:	3708      	adds	r7, #8
    4ee4:	46bd      	mov	sp, r7
    4ee6:	bd80      	pop	{r7, pc}
    4ee8:	01000002 	.word	0x01000002
    4eec:	00004d8d 	.word	0x00004d8d

00004ef0 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    4ef0:	b580      	push	{r7, lr}
    4ef2:	b082      	sub	sp, #8
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]
    4ef8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	2b00      	cmp	r3, #0
    4efe:	d004      	beq.n	4f0a <_qspi_sync_init+0x1a>
    4f00:	683b      	ldr	r3, [r7, #0]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d001      	beq.n	4f0a <_qspi_sync_init+0x1a>
    4f06:	2301      	movs	r3, #1
    4f08:	e000      	b.n	4f0c <_qspi_sync_init+0x1c>
    4f0a:	2300      	movs	r3, #0
    4f0c:	f003 0301 	and.w	r3, r3, #1
    4f10:	b2db      	uxtb	r3, r3
    4f12:	2240      	movs	r2, #64	; 0x40
    4f14:	490c      	ldr	r1, [pc, #48]	; (4f48 <_qspi_sync_init+0x58>)
    4f16:	4618      	mov	r0, r3
    4f18:	4b0c      	ldr	r3, [pc, #48]	; (4f4c <_qspi_sync_init+0x5c>)
    4f1a:	4798      	blx	r3
	dev->prvt = hw;
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	683a      	ldr	r2, [r7, #0]
    4f20:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    4f22:	687b      	ldr	r3, [r7, #4]
    4f24:	681b      	ldr	r3, [r3, #0]
    4f26:	2101      	movs	r1, #1
    4f28:	4618      	mov	r0, r3
    4f2a:	4b09      	ldr	r3, [pc, #36]	; (4f50 <_qspi_sync_init+0x60>)
    4f2c:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    4f2e:	4909      	ldr	r1, [pc, #36]	; (4f54 <_qspi_sync_init+0x64>)
    4f30:	6838      	ldr	r0, [r7, #0]
    4f32:	4b09      	ldr	r3, [pc, #36]	; (4f58 <_qspi_sync_init+0x68>)
    4f34:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    4f36:	4909      	ldr	r1, [pc, #36]	; (4f5c <_qspi_sync_init+0x6c>)
    4f38:	6838      	ldr	r0, [r7, #0]
    4f3a:	4b09      	ldr	r3, [pc, #36]	; (4f60 <_qspi_sync_init+0x70>)
    4f3c:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    4f3e:	2300      	movs	r3, #0
}
    4f40:	4618      	mov	r0, r3
    4f42:	3708      	adds	r7, #8
    4f44:	46bd      	mov	sp, r7
    4f46:	bd80      	pop	{r7, pc}
    4f48:	0000d65c 	.word	0x0000d65c
    4f4c:	000030c9 	.word	0x000030c9
    4f50:	00004d8d 	.word	0x00004d8d
    4f54:	06000011 	.word	0x06000011
    4f58:	00004da9 	.word	0x00004da9
    4f5c:	00241300 	.word	0x00241300
    4f60:	00004dc5 	.word	0x00004dc5

00004f64 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    4f64:	b580      	push	{r7, lr}
    4f66:	b082      	sub	sp, #8
    4f68:	af00      	add	r7, sp, #0
    4f6a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	681b      	ldr	r3, [r3, #0]
    4f70:	2102      	movs	r1, #2
    4f72:	4618      	mov	r0, r3
    4f74:	4b03      	ldr	r3, [pc, #12]	; (4f84 <_qspi_sync_enable+0x20>)
    4f76:	4798      	blx	r3
	return ERR_NONE;
    4f78:	2300      	movs	r3, #0
}
    4f7a:	4618      	mov	r0, r3
    4f7c:	3708      	adds	r7, #8
    4f7e:	46bd      	mov	sp, r7
    4f80:	bd80      	pop	{r7, pc}
    4f82:	bf00      	nop
    4f84:	00004d8d 	.word	0x00004d8d

00004f88 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    4f88:	b580      	push	{r7, lr}
    4f8a:	b082      	sub	sp, #8
    4f8c:	af00      	add	r7, sp, #0
    4f8e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	2100      	movs	r1, #0
    4f96:	4618      	mov	r0, r3
    4f98:	4b03      	ldr	r3, [pc, #12]	; (4fa8 <_qspi_sync_disable+0x20>)
    4f9a:	4798      	blx	r3
	return ERR_NONE;
    4f9c:	2300      	movs	r3, #0
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	3708      	adds	r7, #8
    4fa2:	46bd      	mov	sp, r7
    4fa4:	bd80      	pop	{r7, pc}
    4fa6:	bf00      	nop
    4fa8:	00004d8d 	.word	0x00004d8d

00004fac <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4fac:	b580      	push	{r7, lr}
    4fae:	b084      	sub	sp, #16
    4fb0:	af00      	add	r7, sp, #0
    4fb2:	6078      	str	r0, [r7, #4]
    4fb4:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    4fb6:	687b      	ldr	r3, [r7, #4]
    4fb8:	681b      	ldr	r3, [r3, #0]
    4fba:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    4fbc:	683b      	ldr	r3, [r7, #0]
    4fbe:	781b      	ldrb	r3, [r3, #0]
    4fc0:	f003 0320 	and.w	r3, r3, #32
    4fc4:	b2db      	uxtb	r3, r3
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d005      	beq.n	4fd6 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    4fca:	683b      	ldr	r3, [r7, #0]
    4fcc:	689b      	ldr	r3, [r3, #8]
    4fce:	4619      	mov	r1, r3
    4fd0:	68f8      	ldr	r0, [r7, #12]
    4fd2:	4b13      	ldr	r3, [pc, #76]	; (5020 <_qspi_sync_command_set_ifr+0x74>)
    4fd4:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    4fd6:	683b      	ldr	r3, [r7, #0]
    4fd8:	781b      	ldrb	r3, [r3, #0]
    4fda:	f003 0310 	and.w	r3, r3, #16
    4fde:	b2db      	uxtb	r3, r3
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d005      	beq.n	4ff0 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    4fe4:	683b      	ldr	r3, [r7, #0]
    4fe6:	791b      	ldrb	r3, [r3, #4]
    4fe8:	4619      	mov	r1, r3
    4fea:	68f8      	ldr	r0, [r7, #12]
    4fec:	4b0d      	ldr	r3, [pc, #52]	; (5024 <_qspi_sync_command_set_ifr+0x78>)
    4fee:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    4ff0:	683b      	ldr	r3, [r7, #0]
    4ff2:	781b      	ldrb	r3, [r3, #0]
    4ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d005      	beq.n	500a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    4ffe:	683b      	ldr	r3, [r7, #0]
    5000:	795b      	ldrb	r3, [r3, #5]
    5002:	4619      	mov	r1, r3
    5004:	68f8      	ldr	r0, [r7, #12]
    5006:	4b08      	ldr	r3, [pc, #32]	; (5028 <_qspi_sync_command_set_ifr+0x7c>)
    5008:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    500a:	683b      	ldr	r3, [r7, #0]
    500c:	681b      	ldr	r3, [r3, #0]
    500e:	4619      	mov	r1, r3
    5010:	68f8      	ldr	r0, [r7, #12]
    5012:	4b06      	ldr	r3, [pc, #24]	; (502c <_qspi_sync_command_set_ifr+0x80>)
    5014:	4798      	blx	r3
}
    5016:	bf00      	nop
    5018:	3710      	adds	r7, #16
    501a:	46bd      	mov	sp, r7
    501c:	bd80      	pop	{r7, pc}
    501e:	bf00      	nop
    5020:	00004de1 	.word	0x00004de1
    5024:	00004dfd 	.word	0x00004dfd
    5028:	00004e31 	.word	0x00004e31
    502c:	00004e69 	.word	0x00004e69

00005030 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5030:	b580      	push	{r7, lr}
    5032:	b084      	sub	sp, #16
    5034:	af00      	add	r7, sp, #0
    5036:	6078      	str	r0, [r7, #4]
    5038:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	681b      	ldr	r3, [r3, #0]
    503e:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5040:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5044:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5046:	683b      	ldr	r3, [r7, #0]
    5048:	781b      	ldrb	r3, [r3, #0]
    504a:	f003 0320 	and.w	r3, r3, #32
    504e:	b2db      	uxtb	r3, r3
    5050:	2b00      	cmp	r3, #0
    5052:	d004      	beq.n	505e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5054:	683b      	ldr	r3, [r7, #0]
    5056:	689b      	ldr	r3, [r3, #8]
    5058:	68fa      	ldr	r2, [r7, #12]
    505a:	4413      	add	r3, r2
    505c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    505e:	68b8      	ldr	r0, [r7, #8]
    5060:	4b18      	ldr	r3, [pc, #96]	; (50c4 <_qspi_sync_run_transfer+0x94>)
    5062:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5064:	683b      	ldr	r3, [r7, #0]
    5066:	691b      	ldr	r3, [r3, #16]
    5068:	2b00      	cmp	r3, #0
    506a:	d103      	bne.n	5074 <_qspi_sync_run_transfer+0x44>
    506c:	683b      	ldr	r3, [r7, #0]
    506e:	695b      	ldr	r3, [r3, #20]
    5070:	2b00      	cmp	r3, #0
    5072:	d001      	beq.n	5078 <_qspi_sync_run_transfer+0x48>
    5074:	2301      	movs	r3, #1
    5076:	e000      	b.n	507a <_qspi_sync_run_transfer+0x4a>
    5078:	2300      	movs	r3, #0
    507a:	f003 0301 	and.w	r3, r3, #1
    507e:	b2db      	uxtb	r3, r3
    5080:	2282      	movs	r2, #130	; 0x82
    5082:	4911      	ldr	r1, [pc, #68]	; (50c8 <_qspi_sync_run_transfer+0x98>)
    5084:	4618      	mov	r0, r3
    5086:	4b11      	ldr	r3, [pc, #68]	; (50cc <_qspi_sync_run_transfer+0x9c>)
    5088:	4798      	blx	r3

	if (cmd->tx_buf) {
    508a:	683b      	ldr	r3, [r7, #0]
    508c:	691b      	ldr	r3, [r3, #16]
    508e:	2b00      	cmp	r3, #0
    5090:	d008      	beq.n	50a4 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5092:	683b      	ldr	r3, [r7, #0]
    5094:	6919      	ldr	r1, [r3, #16]
    5096:	683b      	ldr	r3, [r7, #0]
    5098:	68db      	ldr	r3, [r3, #12]
    509a:	461a      	mov	r2, r3
    509c:	68f8      	ldr	r0, [r7, #12]
    509e:	4b0c      	ldr	r3, [pc, #48]	; (50d0 <_qspi_sync_run_transfer+0xa0>)
    50a0:	4798      	blx	r3
    50a2:	e007      	b.n	50b4 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    50a4:	683b      	ldr	r3, [r7, #0]
    50a6:	6958      	ldr	r0, [r3, #20]
    50a8:	683b      	ldr	r3, [r7, #0]
    50aa:	68db      	ldr	r3, [r3, #12]
    50ac:	461a      	mov	r2, r3
    50ae:	68f9      	ldr	r1, [r7, #12]
    50b0:	4b07      	ldr	r3, [pc, #28]	; (50d0 <_qspi_sync_run_transfer+0xa0>)
    50b2:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    50b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    50b8:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    50bc:	bf00      	nop
    50be:	3710      	adds	r7, #16
    50c0:	46bd      	mov	sp, r7
    50c2:	bd80      	pop	{r7, pc}
    50c4:	00004e85 	.word	0x00004e85
    50c8:	0000d65c 	.word	0x0000d65c
    50cc:	000030c9 	.word	0x000030c9
    50d0:	00004e9d 	.word	0x00004e9d

000050d4 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    50d4:	b580      	push	{r7, lr}
    50d6:	b082      	sub	sp, #8
    50d8:	af00      	add	r7, sp, #0
    50da:	6078      	str	r0, [r7, #4]
    50dc:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    50de:	6839      	ldr	r1, [r7, #0]
    50e0:	6878      	ldr	r0, [r7, #4]
    50e2:	4b14      	ldr	r3, [pc, #80]	; (5134 <_qspi_sync_serial_run_command+0x60>)
    50e4:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    50e6:	683b      	ldr	r3, [r7, #0]
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    50ee:	b2db      	uxtb	r3, r3
    50f0:	2b00      	cmp	r3, #0
    50f2:	d003      	beq.n	50fc <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    50f4:	6839      	ldr	r1, [r7, #0]
    50f6:	6878      	ldr	r0, [r7, #4]
    50f8:	4b0f      	ldr	r3, [pc, #60]	; (5138 <_qspi_sync_serial_run_command+0x64>)
    50fa:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	681b      	ldr	r3, [r3, #0]
    5100:	4618      	mov	r0, r3
    5102:	4b0e      	ldr	r3, [pc, #56]	; (513c <_qspi_sync_serial_run_command+0x68>)
    5104:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5106:	bf00      	nop
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	681b      	ldr	r3, [r3, #0]
    510c:	4618      	mov	r0, r3
    510e:	4b0c      	ldr	r3, [pc, #48]	; (5140 <_qspi_sync_serial_run_command+0x6c>)
    5110:	4798      	blx	r3
    5112:	4603      	mov	r3, r0
    5114:	f083 0301 	eor.w	r3, r3, #1
    5118:	b2db      	uxtb	r3, r3
    511a:	2b00      	cmp	r3, #0
    511c:	d1f4      	bne.n	5108 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	4618      	mov	r0, r3
    5124:	4b07      	ldr	r3, [pc, #28]	; (5144 <_qspi_sync_serial_run_command+0x70>)
    5126:	4798      	blx	r3
	return ERR_NONE;
    5128:	2300      	movs	r3, #0
}
    512a:	4618      	mov	r0, r3
    512c:	3708      	adds	r7, #8
    512e:	46bd      	mov	sp, r7
    5130:	bd80      	pop	{r7, pc}
    5132:	bf00      	nop
    5134:	00004fad 	.word	0x00004fad
    5138:	00005031 	.word	0x00005031
    513c:	00004ed1 	.word	0x00004ed1
    5140:	00004d49 	.word	0x00004d49
    5144:	00004d71 	.word	0x00004d71

00005148 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5148:	b480      	push	{r7}
    514a:	b083      	sub	sp, #12
    514c:	af00      	add	r7, sp, #0
    514e:	6078      	str	r0, [r7, #4]
    5150:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5152:	bf00      	nop
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	691a      	ldr	r2, [r3, #16]
    5158:	683b      	ldr	r3, [r7, #0]
    515a:	4013      	ands	r3, r2
    515c:	2b00      	cmp	r3, #0
    515e:	d1f9      	bne.n	5154 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5160:	bf00      	nop
    5162:	370c      	adds	r7, #12
    5164:	46bd      	mov	sp, r7
    5166:	f85d 7b04 	ldr.w	r7, [sp], #4
    516a:	4770      	bx	lr

0000516c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    516c:	b480      	push	{r7}
    516e:	b083      	sub	sp, #12
    5170:	af00      	add	r7, sp, #0
    5172:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	f44f 7280 	mov.w	r2, #256	; 0x100
    517a:	819a      	strh	r2, [r3, #12]
}
    517c:	bf00      	nop
    517e:	370c      	adds	r7, #12
    5180:	46bd      	mov	sp, r7
    5182:	f85d 7b04 	ldr.w	r7, [sp], #4
    5186:	4770      	bx	lr

00005188 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5188:	b480      	push	{r7}
    518a:	b083      	sub	sp, #12
    518c:	af00      	add	r7, sp, #0
    518e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5196:	819a      	strh	r2, [r3, #12]
}
    5198:	bf00      	nop
    519a:	370c      	adds	r7, #12
    519c:	46bd      	mov	sp, r7
    519e:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a2:	4770      	bx	lr

000051a4 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    51a4:	b480      	push	{r7}
    51a6:	b083      	sub	sp, #12
    51a8:	af00      	add	r7, sp, #0
    51aa:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	899b      	ldrh	r3, [r3, #12]
    51b0:	b29b      	uxth	r3, r3
}
    51b2:	4618      	mov	r0, r3
    51b4:	370c      	adds	r7, #12
    51b6:	46bd      	mov	sp, r7
    51b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51bc:	4770      	bx	lr

000051be <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    51be:	b480      	push	{r7}
    51c0:	b083      	sub	sp, #12
    51c2:	af00      	add	r7, sp, #0
    51c4:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    51c6:	687b      	ldr	r3, [r7, #4]
    51c8:	895b      	ldrh	r3, [r3, #10]
    51ca:	b29b      	uxth	r3, r3
}
    51cc:	4618      	mov	r0, r3
    51ce:	370c      	adds	r7, #12
    51d0:	46bd      	mov	sp, r7
    51d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d6:	4770      	bx	lr

000051d8 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    51d8:	b580      	push	{r7, lr}
    51da:	b082      	sub	sp, #8
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    51e0:	687b      	ldr	r3, [r7, #4]
    51e2:	881b      	ldrh	r3, [r3, #0]
    51e4:	b29b      	uxth	r3, r3
    51e6:	f043 0301 	orr.w	r3, r3, #1
    51ea:	b29a      	uxth	r2, r3
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    51f0:	2101      	movs	r1, #1
    51f2:	6878      	ldr	r0, [r7, #4]
    51f4:	4b02      	ldr	r3, [pc, #8]	; (5200 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    51f6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    51f8:	bf00      	nop
    51fa:	3708      	adds	r7, #8
    51fc:	46bd      	mov	sp, r7
    51fe:	bd80      	pop	{r7, pc}
    5200:	00005149 	.word	0x00005149

00005204 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5204:	b580      	push	{r7, lr}
    5206:	b084      	sub	sp, #16
    5208:	af00      	add	r7, sp, #0
    520a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    520c:	f248 0103 	movw	r1, #32771	; 0x8003
    5210:	6878      	ldr	r0, [r7, #4]
    5212:	4b0a      	ldr	r3, [pc, #40]	; (523c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5214:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	881b      	ldrh	r3, [r3, #0]
    521a:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    521c:	89fb      	ldrh	r3, [r7, #14]
    521e:	085b      	lsrs	r3, r3, #1
    5220:	b29b      	uxth	r3, r3
    5222:	f003 0301 	and.w	r3, r3, #1
    5226:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5228:	89fb      	ldrh	r3, [r7, #14]
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	b2db      	uxtb	r3, r3
}
    5234:	4618      	mov	r0, r3
    5236:	3710      	adds	r7, #16
    5238:	46bd      	mov	sp, r7
    523a:	bd80      	pop	{r7, pc}
    523c:	00005149 	.word	0x00005149

00005240 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5240:	b580      	push	{r7, lr}
    5242:	b082      	sub	sp, #8
    5244:	af00      	add	r7, sp, #0
    5246:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	881b      	ldrh	r3, [r3, #0]
    524c:	b29b      	uxth	r3, r3
    524e:	f023 0302 	bic.w	r3, r3, #2
    5252:	b29a      	uxth	r2, r3
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5258:	f248 0103 	movw	r1, #32771	; 0x8003
    525c:	6878      	ldr	r0, [r7, #4]
    525e:	4b03      	ldr	r3, [pc, #12]	; (526c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5260:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5262:	bf00      	nop
    5264:	3708      	adds	r7, #8
    5266:	46bd      	mov	sp, r7
    5268:	bd80      	pop	{r7, pc}
    526a:	bf00      	nop
    526c:	00005149 	.word	0x00005149

00005270 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5270:	b580      	push	{r7, lr}
    5272:	b082      	sub	sp, #8
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
    5278:	460b      	mov	r3, r1
    527a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	887a      	ldrh	r2, [r7, #2]
    5280:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5282:	f248 0103 	movw	r1, #32771	; 0x8003
    5286:	6878      	ldr	r0, [r7, #4]
    5288:	4b02      	ldr	r3, [pc, #8]	; (5294 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    528a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    528c:	bf00      	nop
    528e:	3708      	adds	r7, #8
    5290:	46bd      	mov	sp, r7
    5292:	bd80      	pop	{r7, pc}
    5294:	00005149 	.word	0x00005149

00005298 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5298:	b480      	push	{r7}
    529a:	b083      	sub	sp, #12
    529c:	af00      	add	r7, sp, #0
    529e:	6078      	str	r0, [r7, #4]
    52a0:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	683a      	ldr	r2, [r7, #0]
    52a6:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    52a8:	bf00      	nop
    52aa:	370c      	adds	r7, #12
    52ac:	46bd      	mov	sp, r7
    52ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    52b2:	4770      	bx	lr

000052b4 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    52b4:	b580      	push	{r7, lr}
    52b6:	b082      	sub	sp, #8
    52b8:	af00      	add	r7, sp, #0
    52ba:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	2b00      	cmp	r3, #0
    52c0:	d005      	beq.n	52ce <_calendar_init+0x1a>
    52c2:	687b      	ldr	r3, [r7, #4]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2b00      	cmp	r3, #0
    52c8:	d001      	beq.n	52ce <_calendar_init+0x1a>
    52ca:	2301      	movs	r3, #1
    52cc:	e000      	b.n	52d0 <_calendar_init+0x1c>
    52ce:	2300      	movs	r3, #0
    52d0:	f003 0301 	and.w	r3, r3, #1
    52d4:	b2db      	uxtb	r3, r3
    52d6:	222f      	movs	r2, #47	; 0x2f
    52d8:	491e      	ldr	r1, [pc, #120]	; (5354 <_calendar_init+0xa0>)
    52da:	4618      	mov	r0, r3
    52dc:	4b1e      	ldr	r3, [pc, #120]	; (5358 <_calendar_init+0xa4>)
    52de:	4798      	blx	r3

	_rtc_dev = dev;
    52e0:	4a1e      	ldr	r2, [pc, #120]	; (535c <_calendar_init+0xa8>)
    52e2:	687b      	ldr	r3, [r7, #4]
    52e4:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	681b      	ldr	r3, [r3, #0]
    52ea:	2101      	movs	r1, #1
    52ec:	4618      	mov	r0, r3
    52ee:	4b1c      	ldr	r3, [pc, #112]	; (5360 <_calendar_init+0xac>)
    52f0:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	681b      	ldr	r3, [r3, #0]
    52f6:	4618      	mov	r0, r3
    52f8:	4b1a      	ldr	r3, [pc, #104]	; (5364 <_calendar_init+0xb0>)
    52fa:	4798      	blx	r3
    52fc:	4603      	mov	r3, r0
    52fe:	2b00      	cmp	r3, #0
    5300:	d00a      	beq.n	5318 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	4618      	mov	r0, r3
    5308:	4b17      	ldr	r3, [pc, #92]	; (5368 <_calendar_init+0xb4>)
    530a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	681b      	ldr	r3, [r3, #0]
    5310:	2102      	movs	r1, #2
    5312:	4618      	mov	r0, r3
    5314:	4b12      	ldr	r3, [pc, #72]	; (5360 <_calendar_init+0xac>)
    5316:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	681b      	ldr	r3, [r3, #0]
    531c:	4618      	mov	r0, r3
    531e:	4b13      	ldr	r3, [pc, #76]	; (536c <_calendar_init+0xb8>)
    5320:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5322:	687b      	ldr	r3, [r7, #4]
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	2101      	movs	r1, #1
    5328:	4618      	mov	r0, r3
    532a:	4b0d      	ldr	r3, [pc, #52]	; (5360 <_calendar_init+0xac>)
    532c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	681b      	ldr	r3, [r3, #0]
    5332:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5336:	4618      	mov	r0, r3
    5338:	4b0d      	ldr	r3, [pc, #52]	; (5370 <_calendar_init+0xbc>)
    533a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5340:	2100      	movs	r1, #0
    5342:	4618      	mov	r0, r3
    5344:	4b0b      	ldr	r3, [pc, #44]	; (5374 <_calendar_init+0xc0>)
    5346:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5348:	2300      	movs	r3, #0
}
    534a:	4618      	mov	r0, r3
    534c:	3708      	adds	r7, #8
    534e:	46bd      	mov	sp, r7
    5350:	bd80      	pop	{r7, pc}
    5352:	bf00      	nop
    5354:	0000d674 	.word	0x0000d674
    5358:	000030c9 	.word	0x000030c9
    535c:	20000694 	.word	0x20000694
    5360:	00005149 	.word	0x00005149
    5364:	00005205 	.word	0x00005205
    5368:	00005241 	.word	0x00005241
    536c:	000051d9 	.word	0x000051d9
    5370:	00005271 	.word	0x00005271
    5374:	00005299 	.word	0x00005299

00005378 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5378:	b580      	push	{r7, lr}
    537a:	b084      	sub	sp, #16
    537c:	af00      	add	r7, sp, #0
    537e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5380:	687b      	ldr	r3, [r7, #4]
    5382:	681b      	ldr	r3, [r3, #0]
    5384:	4618      	mov	r0, r3
    5386:	4b19      	ldr	r3, [pc, #100]	; (53ec <_rtc_interrupt_handler+0x74>)
    5388:	4798      	blx	r3
    538a:	4603      	mov	r3, r0
    538c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    538e:	687b      	ldr	r3, [r7, #4]
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	4618      	mov	r0, r3
    5394:	4b16      	ldr	r3, [pc, #88]	; (53f0 <_rtc_interrupt_handler+0x78>)
    5396:	4798      	blx	r3
    5398:	4603      	mov	r3, r0
    539a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    539c:	89fa      	ldrh	r2, [r7, #14]
    539e:	89bb      	ldrh	r3, [r7, #12]
    53a0:	4013      	ands	r3, r2
    53a2:	b29b      	uxth	r3, r3
    53a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    53a8:	2b00      	cmp	r3, #0
    53aa:	d009      	beq.n	53c0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    53ac:	687b      	ldr	r3, [r7, #4]
    53ae:	685b      	ldr	r3, [r3, #4]
    53b0:	6878      	ldr	r0, [r7, #4]
    53b2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	681b      	ldr	r3, [r3, #0]
    53b8:	4618      	mov	r0, r3
    53ba:	4b0e      	ldr	r3, [pc, #56]	; (53f4 <_rtc_interrupt_handler+0x7c>)
    53bc:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    53be:	e010      	b.n	53e2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    53c0:	89fa      	ldrh	r2, [r7, #14]
    53c2:	89bb      	ldrh	r3, [r7, #12]
    53c4:	4013      	ands	r3, r2
    53c6:	b29b      	uxth	r3, r3
    53c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    53cc:	2b00      	cmp	r3, #0
    53ce:	d008      	beq.n	53e2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	689b      	ldr	r3, [r3, #8]
    53d4:	6878      	ldr	r0, [r7, #4]
    53d6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	4618      	mov	r0, r3
    53de:	4b06      	ldr	r3, [pc, #24]	; (53f8 <_rtc_interrupt_handler+0x80>)
    53e0:	4798      	blx	r3
}
    53e2:	bf00      	nop
    53e4:	3710      	adds	r7, #16
    53e6:	46bd      	mov	sp, r7
    53e8:	bd80      	pop	{r7, pc}
    53ea:	bf00      	nop
    53ec:	000051a5 	.word	0x000051a5
    53f0:	000051bf 	.word	0x000051bf
    53f4:	0000516d 	.word	0x0000516d
    53f8:	00005189 	.word	0x00005189

000053fc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    53fc:	b580      	push	{r7, lr}
    53fe:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5400:	4b03      	ldr	r3, [pc, #12]	; (5410 <RTC_Handler+0x14>)
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	4618      	mov	r0, r3
    5406:	4b03      	ldr	r3, [pc, #12]	; (5414 <RTC_Handler+0x18>)
    5408:	4798      	blx	r3
}
    540a:	bf00      	nop
    540c:	bd80      	pop	{r7, pc}
    540e:	bf00      	nop
    5410:	20000694 	.word	0x20000694
    5414:	00005379 	.word	0x00005379

00005418 <__NVIC_EnableIRQ>:
{
    5418:	b480      	push	{r7}
    541a:	b083      	sub	sp, #12
    541c:	af00      	add	r7, sp, #0
    541e:	4603      	mov	r3, r0
    5420:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5426:	2b00      	cmp	r3, #0
    5428:	db0b      	blt.n	5442 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    542a:	4909      	ldr	r1, [pc, #36]	; (5450 <__NVIC_EnableIRQ+0x38>)
    542c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5430:	095b      	lsrs	r3, r3, #5
    5432:	88fa      	ldrh	r2, [r7, #6]
    5434:	f002 021f 	and.w	r2, r2, #31
    5438:	2001      	movs	r0, #1
    543a:	fa00 f202 	lsl.w	r2, r0, r2
    543e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5442:	bf00      	nop
    5444:	370c      	adds	r7, #12
    5446:	46bd      	mov	sp, r7
    5448:	f85d 7b04 	ldr.w	r7, [sp], #4
    544c:	4770      	bx	lr
    544e:	bf00      	nop
    5450:	e000e100 	.word	0xe000e100

00005454 <__NVIC_DisableIRQ>:
{
    5454:	b480      	push	{r7}
    5456:	b083      	sub	sp, #12
    5458:	af00      	add	r7, sp, #0
    545a:	4603      	mov	r3, r0
    545c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    545e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5462:	2b00      	cmp	r3, #0
    5464:	db10      	blt.n	5488 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5466:	490b      	ldr	r1, [pc, #44]	; (5494 <__NVIC_DisableIRQ+0x40>)
    5468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    546c:	095b      	lsrs	r3, r3, #5
    546e:	88fa      	ldrh	r2, [r7, #6]
    5470:	f002 021f 	and.w	r2, r2, #31
    5474:	2001      	movs	r0, #1
    5476:	fa00 f202 	lsl.w	r2, r0, r2
    547a:	3320      	adds	r3, #32
    547c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5480:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5484:	f3bf 8f6f 	isb	sy
}
    5488:	bf00      	nop
    548a:	370c      	adds	r7, #12
    548c:	46bd      	mov	sp, r7
    548e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5492:	4770      	bx	lr
    5494:	e000e100 	.word	0xe000e100

00005498 <__NVIC_ClearPendingIRQ>:
{
    5498:	b480      	push	{r7}
    549a:	b083      	sub	sp, #12
    549c:	af00      	add	r7, sp, #0
    549e:	4603      	mov	r3, r0
    54a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    54a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    54a6:	2b00      	cmp	r3, #0
    54a8:	db0c      	blt.n	54c4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54aa:	4909      	ldr	r1, [pc, #36]	; (54d0 <__NVIC_ClearPendingIRQ+0x38>)
    54ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    54b0:	095b      	lsrs	r3, r3, #5
    54b2:	88fa      	ldrh	r2, [r7, #6]
    54b4:	f002 021f 	and.w	r2, r2, #31
    54b8:	2001      	movs	r0, #1
    54ba:	fa00 f202 	lsl.w	r2, r0, r2
    54be:	3360      	adds	r3, #96	; 0x60
    54c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    54c4:	bf00      	nop
    54c6:	370c      	adds	r7, #12
    54c8:	46bd      	mov	sp, r7
    54ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ce:	4770      	bx	lr
    54d0:	e000e100 	.word	0xe000e100

000054d4 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    54d4:	b480      	push	{r7}
    54d6:	b083      	sub	sp, #12
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
    54dc:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    54de:	bf00      	nop
    54e0:	687b      	ldr	r3, [r7, #4]
    54e2:	69da      	ldr	r2, [r3, #28]
    54e4:	683b      	ldr	r3, [r7, #0]
    54e6:	4013      	ands	r3, r2
    54e8:	2b00      	cmp	r3, #0
    54ea:	d1f9      	bne.n	54e0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    54ec:	bf00      	nop
    54ee:	370c      	adds	r7, #12
    54f0:	46bd      	mov	sp, r7
    54f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f6:	4770      	bx	lr

000054f8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    54f8:	b480      	push	{r7}
    54fa:	b083      	sub	sp, #12
    54fc:	af00      	add	r7, sp, #0
    54fe:	6078      	str	r0, [r7, #4]
    5500:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5502:	687b      	ldr	r3, [r7, #4]
    5504:	69da      	ldr	r2, [r3, #28]
    5506:	683b      	ldr	r3, [r7, #0]
    5508:	4013      	ands	r3, r2
    550a:	2b00      	cmp	r3, #0
    550c:	bf14      	ite	ne
    550e:	2301      	movne	r3, #1
    5510:	2300      	moveq	r3, #0
    5512:	b2db      	uxtb	r3, r3
}
    5514:	4618      	mov	r0, r3
    5516:	370c      	adds	r7, #12
    5518:	46bd      	mov	sp, r7
    551a:	f85d 7b04 	ldr.w	r7, [sp], #4
    551e:	4770      	bx	lr

00005520 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5520:	b480      	push	{r7}
    5522:	b083      	sub	sp, #12
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
    5528:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    552a:	bf00      	nop
    552c:	687b      	ldr	r3, [r7, #4]
    552e:	69da      	ldr	r2, [r3, #28]
    5530:	683b      	ldr	r3, [r7, #0]
    5532:	4013      	ands	r3, r2
    5534:	2b00      	cmp	r3, #0
    5536:	d1f9      	bne.n	552c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5538:	bf00      	nop
    553a:	370c      	adds	r7, #12
    553c:	46bd      	mov	sp, r7
    553e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5542:	4770      	bx	lr

00005544 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5544:	b480      	push	{r7}
    5546:	b083      	sub	sp, #12
    5548:	af00      	add	r7, sp, #0
    554a:	6078      	str	r0, [r7, #4]
    554c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	69da      	ldr	r2, [r3, #28]
    5552:	683b      	ldr	r3, [r7, #0]
    5554:	4013      	ands	r3, r2
    5556:	2b00      	cmp	r3, #0
    5558:	bf14      	ite	ne
    555a:	2301      	movne	r3, #1
    555c:	2300      	moveq	r3, #0
    555e:	b2db      	uxtb	r3, r3
}
    5560:	4618      	mov	r0, r3
    5562:	370c      	adds	r7, #12
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    556c:	b480      	push	{r7}
    556e:	b083      	sub	sp, #12
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	2201      	movs	r2, #1
    5578:	761a      	strb	r2, [r3, #24]
}
    557a:	bf00      	nop
    557c:	370c      	adds	r7, #12
    557e:	46bd      	mov	sp, r7
    5580:	f85d 7b04 	ldr.w	r7, [sp], #4
    5584:	4770      	bx	lr

00005586 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5586:	b480      	push	{r7}
    5588:	b083      	sub	sp, #12
    558a:	af00      	add	r7, sp, #0
    558c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    558e:	687b      	ldr	r3, [r7, #4]
    5590:	2202      	movs	r2, #2
    5592:	761a      	strb	r2, [r3, #24]
}
    5594:	bf00      	nop
    5596:	370c      	adds	r7, #12
    5598:	46bd      	mov	sp, r7
    559a:	f85d 7b04 	ldr.w	r7, [sp], #4
    559e:	4770      	bx	lr

000055a0 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    55a0:	b480      	push	{r7}
    55a2:	b083      	sub	sp, #12
    55a4:	af00      	add	r7, sp, #0
    55a6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	7e1b      	ldrb	r3, [r3, #24]
    55ac:	b2db      	uxtb	r3, r3
}
    55ae:	4618      	mov	r0, r3
    55b0:	370c      	adds	r7, #12
    55b2:	46bd      	mov	sp, r7
    55b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b8:	4770      	bx	lr

000055ba <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    55ba:	b480      	push	{r7}
    55bc:	b083      	sub	sp, #12
    55be:	af00      	add	r7, sp, #0
    55c0:	6078      	str	r0, [r7, #4]
    55c2:	460b      	mov	r3, r1
    55c4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	78fa      	ldrb	r2, [r7, #3]
    55ca:	761a      	strb	r2, [r3, #24]
}
    55cc:	bf00      	nop
    55ce:	370c      	adds	r7, #12
    55d0:	46bd      	mov	sp, r7
    55d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55d6:	4770      	bx	lr

000055d8 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    55d8:	b480      	push	{r7}
    55da:	b085      	sub	sp, #20
    55dc:	af00      	add	r7, sp, #0
    55de:	6078      	str	r0, [r7, #4]
    55e0:	460b      	mov	r3, r1
    55e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    55e4:	687b      	ldr	r3, [r7, #4]
    55e6:	7e1b      	ldrb	r3, [r3, #24]
    55e8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    55ea:	7bfa      	ldrb	r2, [r7, #15]
    55ec:	78fb      	ldrb	r3, [r7, #3]
    55ee:	4013      	ands	r3, r2
    55f0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    55f2:	7bfb      	ldrb	r3, [r7, #15]
}
    55f4:	4618      	mov	r0, r3
    55f6:	3714      	adds	r7, #20
    55f8:	46bd      	mov	sp, r7
    55fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fe:	4770      	bx	lr

00005600 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5600:	b480      	push	{r7}
    5602:	b083      	sub	sp, #12
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	7e1b      	ldrb	r3, [r3, #24]
    560c:	b2db      	uxtb	r3, r3
}
    560e:	4618      	mov	r0, r3
    5610:	370c      	adds	r7, #12
    5612:	46bd      	mov	sp, r7
    5614:	f85d 7b04 	ldr.w	r7, [sp], #4
    5618:	4770      	bx	lr

0000561a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    561a:	b480      	push	{r7}
    561c:	b083      	sub	sp, #12
    561e:	af00      	add	r7, sp, #0
    5620:	6078      	str	r0, [r7, #4]
    5622:	460b      	mov	r3, r1
    5624:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	78fa      	ldrb	r2, [r7, #3]
    562a:	761a      	strb	r2, [r3, #24]
}
    562c:	bf00      	nop
    562e:	370c      	adds	r7, #12
    5630:	46bd      	mov	sp, r7
    5632:	f85d 7b04 	ldr.w	r7, [sp], #4
    5636:	4770      	bx	lr

00005638 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    5638:	b480      	push	{r7}
    563a:	b083      	sub	sp, #12
    563c:	af00      	add	r7, sp, #0
    563e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	2201      	movs	r2, #1
    5644:	759a      	strb	r2, [r3, #22]
}
    5646:	bf00      	nop
    5648:	370c      	adds	r7, #12
    564a:	46bd      	mov	sp, r7
    564c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5650:	4770      	bx	lr

00005652 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    5652:	b480      	push	{r7}
    5654:	b083      	sub	sp, #12
    5656:	af00      	add	r7, sp, #0
    5658:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	2201      	movs	r2, #1
    565e:	751a      	strb	r2, [r3, #20]
}
    5660:	bf00      	nop
    5662:	370c      	adds	r7, #12
    5664:	46bd      	mov	sp, r7
    5666:	f85d 7b04 	ldr.w	r7, [sp], #4
    566a:	4770      	bx	lr

0000566c <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    566c:	b480      	push	{r7}
    566e:	b083      	sub	sp, #12
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    5674:	687b      	ldr	r3, [r7, #4]
    5676:	2202      	movs	r2, #2
    5678:	759a      	strb	r2, [r3, #22]
}
    567a:	bf00      	nop
    567c:	370c      	adds	r7, #12
    567e:	46bd      	mov	sp, r7
    5680:	f85d 7b04 	ldr.w	r7, [sp], #4
    5684:	4770      	bx	lr

00005686 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5686:	b480      	push	{r7}
    5688:	b083      	sub	sp, #12
    568a:	af00      	add	r7, sp, #0
    568c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	2202      	movs	r2, #2
    5692:	751a      	strb	r2, [r3, #20]
}
    5694:	bf00      	nop
    5696:	370c      	adds	r7, #12
    5698:	46bd      	mov	sp, r7
    569a:	f85d 7b04 	ldr.w	r7, [sp], #4
    569e:	4770      	bx	lr

000056a0 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    56a0:	b480      	push	{r7}
    56a2:	b083      	sub	sp, #12
    56a4:	af00      	add	r7, sp, #0
    56a6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	2204      	movs	r2, #4
    56ac:	759a      	strb	r2, [r3, #22]
}
    56ae:	bf00      	nop
    56b0:	370c      	adds	r7, #12
    56b2:	46bd      	mov	sp, r7
    56b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b8:	4770      	bx	lr

000056ba <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    56ba:	b480      	push	{r7}
    56bc:	b083      	sub	sp, #12
    56be:	af00      	add	r7, sp, #0
    56c0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    56c2:	687b      	ldr	r3, [r7, #4]
    56c4:	2204      	movs	r2, #4
    56c6:	751a      	strb	r2, [r3, #20]
}
    56c8:	bf00      	nop
    56ca:	370c      	adds	r7, #12
    56cc:	46bd      	mov	sp, r7
    56ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d2:	4770      	bx	lr

000056d4 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    56d4:	b480      	push	{r7}
    56d6:	b083      	sub	sp, #12
    56d8:	af00      	add	r7, sp, #0
    56da:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	7d9b      	ldrb	r3, [r3, #22]
    56e0:	b2db      	uxtb	r3, r3
}
    56e2:	4618      	mov	r0, r3
    56e4:	370c      	adds	r7, #12
    56e6:	46bd      	mov	sp, r7
    56e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ec:	4770      	bx	lr
	...

000056f0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    56f0:	b580      	push	{r7, lr}
    56f2:	b082      	sub	sp, #8
    56f4:	af00      	add	r7, sp, #0
    56f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	f023 0202 	bic.w	r2, r3, #2
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5704:	2103      	movs	r1, #3
    5706:	6878      	ldr	r0, [r7, #4]
    5708:	4b02      	ldr	r3, [pc, #8]	; (5714 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    570a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    570c:	bf00      	nop
    570e:	3708      	adds	r7, #8
    5710:	46bd      	mov	sp, r7
    5712:	bd80      	pop	{r7, pc}
    5714:	000054d5 	.word	0x000054d5

00005718 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5718:	b480      	push	{r7}
    571a:	b085      	sub	sp, #20
    571c:	af00      	add	r7, sp, #0
    571e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5726:	68fb      	ldr	r3, [r7, #12]
    5728:	0edb      	lsrs	r3, r3, #27
    572a:	f003 0301 	and.w	r3, r3, #1
    572e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5730:	68fb      	ldr	r3, [r7, #12]
    5732:	2b00      	cmp	r3, #0
    5734:	bf14      	ite	ne
    5736:	2301      	movne	r3, #1
    5738:	2300      	moveq	r3, #0
    573a:	b2db      	uxtb	r3, r3
}
    573c:	4618      	mov	r0, r3
    573e:	3714      	adds	r7, #20
    5740:	46bd      	mov	sp, r7
    5742:	f85d 7b04 	ldr.w	r7, [sp], #4
    5746:	4770      	bx	lr

00005748 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5748:	b580      	push	{r7, lr}
    574a:	b084      	sub	sp, #16
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
    5750:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5752:	2103      	movs	r1, #3
    5754:	6878      	ldr	r0, [r7, #4]
    5756:	4b07      	ldr	r3, [pc, #28]	; (5774 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5758:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5760:	68fa      	ldr	r2, [r7, #12]
    5762:	683b      	ldr	r3, [r7, #0]
    5764:	4013      	ands	r3, r2
    5766:	60fb      	str	r3, [r7, #12]
	return tmp;
    5768:	68fb      	ldr	r3, [r7, #12]
}
    576a:	4618      	mov	r0, r3
    576c:	3710      	adds	r7, #16
    576e:	46bd      	mov	sp, r7
    5770:	bd80      	pop	{r7, pc}
    5772:	bf00      	nop
    5774:	000054d5 	.word	0x000054d5

00005778 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5778:	b580      	push	{r7, lr}
    577a:	b082      	sub	sp, #8
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
    5780:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5782:	687b      	ldr	r3, [r7, #4]
    5784:	683a      	ldr	r2, [r7, #0]
    5786:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5788:	2103      	movs	r1, #3
    578a:	6878      	ldr	r0, [r7, #4]
    578c:	4b02      	ldr	r3, [pc, #8]	; (5798 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    578e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5790:	bf00      	nop
    5792:	3708      	adds	r7, #8
    5794:	46bd      	mov	sp, r7
    5796:	bd80      	pop	{r7, pc}
    5798:	000054d5 	.word	0x000054d5

0000579c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    579c:	b580      	push	{r7, lr}
    579e:	b084      	sub	sp, #16
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    57a4:	2103      	movs	r1, #3
    57a6:	6878      	ldr	r0, [r7, #4]
    57a8:	4b09      	ldr	r3, [pc, #36]	; (57d0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    57aa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    57ac:	687b      	ldr	r3, [r7, #4]
    57ae:	681b      	ldr	r3, [r3, #0]
    57b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    57b2:	68fb      	ldr	r3, [r7, #12]
    57b4:	085b      	lsrs	r3, r3, #1
    57b6:	f003 0301 	and.w	r3, r3, #1
    57ba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    57bc:	68fb      	ldr	r3, [r7, #12]
    57be:	2b00      	cmp	r3, #0
    57c0:	bf14      	ite	ne
    57c2:	2301      	movne	r3, #1
    57c4:	2300      	moveq	r3, #0
    57c6:	b2db      	uxtb	r3, r3
}
    57c8:	4618      	mov	r0, r3
    57ca:	3710      	adds	r7, #16
    57cc:	46bd      	mov	sp, r7
    57ce:	bd80      	pop	{r7, pc}
    57d0:	00005521 	.word	0x00005521

000057d4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    57d4:	b580      	push	{r7, lr}
    57d6:	b082      	sub	sp, #8
    57d8:	af00      	add	r7, sp, #0
    57da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    57dc:	687b      	ldr	r3, [r7, #4]
    57de:	681b      	ldr	r3, [r3, #0]
    57e0:	f023 0202 	bic.w	r2, r3, #2
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    57e8:	2103      	movs	r1, #3
    57ea:	6878      	ldr	r0, [r7, #4]
    57ec:	4b02      	ldr	r3, [pc, #8]	; (57f8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    57ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    57f0:	bf00      	nop
    57f2:	3708      	adds	r7, #8
    57f4:	46bd      	mov	sp, r7
    57f6:	bd80      	pop	{r7, pc}
    57f8:	00005521 	.word	0x00005521

000057fc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b084      	sub	sp, #16
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
    5804:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5806:	2103      	movs	r1, #3
    5808:	6878      	ldr	r0, [r7, #4]
    580a:	4b07      	ldr	r3, [pc, #28]	; (5828 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    580c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5814:	68fa      	ldr	r2, [r7, #12]
    5816:	683b      	ldr	r3, [r7, #0]
    5818:	4013      	ands	r3, r2
    581a:	60fb      	str	r3, [r7, #12]
	return tmp;
    581c:	68fb      	ldr	r3, [r7, #12]
}
    581e:	4618      	mov	r0, r3
    5820:	3710      	adds	r7, #16
    5822:	46bd      	mov	sp, r7
    5824:	bd80      	pop	{r7, pc}
    5826:	bf00      	nop
    5828:	00005521 	.word	0x00005521

0000582c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    582c:	b580      	push	{r7, lr}
    582e:	b082      	sub	sp, #8
    5830:	af00      	add	r7, sp, #0
    5832:	6078      	str	r0, [r7, #4]
    5834:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	683a      	ldr	r2, [r7, #0]
    583a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    583c:	2103      	movs	r1, #3
    583e:	6878      	ldr	r0, [r7, #4]
    5840:	4b02      	ldr	r3, [pc, #8]	; (584c <hri_sercomspi_write_CTRLA_reg+0x20>)
    5842:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5844:	bf00      	nop
    5846:	3708      	adds	r7, #8
    5848:	46bd      	mov	sp, r7
    584a:	bd80      	pop	{r7, pc}
    584c:	00005521 	.word	0x00005521

00005850 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5850:	b580      	push	{r7, lr}
    5852:	b082      	sub	sp, #8
    5854:	af00      	add	r7, sp, #0
    5856:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	685b      	ldr	r3, [r3, #4]
    585c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5864:	2104      	movs	r1, #4
    5866:	6878      	ldr	r0, [r7, #4]
    5868:	4b02      	ldr	r3, [pc, #8]	; (5874 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    586a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    586c:	bf00      	nop
    586e:	3708      	adds	r7, #8
    5870:	46bd      	mov	sp, r7
    5872:	bd80      	pop	{r7, pc}
    5874:	000054d5 	.word	0x000054d5

00005878 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5878:	b580      	push	{r7, lr}
    587a:	b082      	sub	sp, #8
    587c:	af00      	add	r7, sp, #0
    587e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5880:	687b      	ldr	r3, [r7, #4]
    5882:	685b      	ldr	r3, [r3, #4]
    5884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    588c:	2104      	movs	r1, #4
    588e:	6878      	ldr	r0, [r7, #4]
    5890:	4b02      	ldr	r3, [pc, #8]	; (589c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5892:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5894:	bf00      	nop
    5896:	3708      	adds	r7, #8
    5898:	46bd      	mov	sp, r7
    589a:	bd80      	pop	{r7, pc}
    589c:	000054d5 	.word	0x000054d5

000058a0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b082      	sub	sp, #8
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	685b      	ldr	r3, [r3, #4]
    58ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    58b4:	2104      	movs	r1, #4
    58b6:	6878      	ldr	r0, [r7, #4]
    58b8:	4b02      	ldr	r3, [pc, #8]	; (58c4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    58ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58bc:	bf00      	nop
    58be:	3708      	adds	r7, #8
    58c0:	46bd      	mov	sp, r7
    58c2:	bd80      	pop	{r7, pc}
    58c4:	000054d5 	.word	0x000054d5

000058c8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    58c8:	b580      	push	{r7, lr}
    58ca:	b082      	sub	sp, #8
    58cc:	af00      	add	r7, sp, #0
    58ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	685b      	ldr	r3, [r3, #4]
    58d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    58d8:	687b      	ldr	r3, [r7, #4]
    58da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    58dc:	2104      	movs	r1, #4
    58de:	6878      	ldr	r0, [r7, #4]
    58e0:	4b02      	ldr	r3, [pc, #8]	; (58ec <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    58e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58e4:	bf00      	nop
    58e6:	3708      	adds	r7, #8
    58e8:	46bd      	mov	sp, r7
    58ea:	bd80      	pop	{r7, pc}
    58ec:	000054d5 	.word	0x000054d5

000058f0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    58f0:	b580      	push	{r7, lr}
    58f2:	b082      	sub	sp, #8
    58f4:	af00      	add	r7, sp, #0
    58f6:	6078      	str	r0, [r7, #4]
    58f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    58fa:	687b      	ldr	r3, [r7, #4]
    58fc:	685a      	ldr	r2, [r3, #4]
    58fe:	683b      	ldr	r3, [r7, #0]
    5900:	041b      	lsls	r3, r3, #16
    5902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5906:	431a      	orrs	r2, r3
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    590c:	2104      	movs	r1, #4
    590e:	6878      	ldr	r0, [r7, #4]
    5910:	4b02      	ldr	r3, [pc, #8]	; (591c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5912:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5914:	bf00      	nop
    5916:	3708      	adds	r7, #8
    5918:	46bd      	mov	sp, r7
    591a:	bd80      	pop	{r7, pc}
    591c:	000054d5 	.word	0x000054d5

00005920 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5920:	b580      	push	{r7, lr}
    5922:	b082      	sub	sp, #8
    5924:	af00      	add	r7, sp, #0
    5926:	6078      	str	r0, [r7, #4]
    5928:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	683a      	ldr	r2, [r7, #0]
    592e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5930:	2104      	movs	r1, #4
    5932:	6878      	ldr	r0, [r7, #4]
    5934:	4b02      	ldr	r3, [pc, #8]	; (5940 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5936:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5938:	bf00      	nop
    593a:	3708      	adds	r7, #8
    593c:	46bd      	mov	sp, r7
    593e:	bd80      	pop	{r7, pc}
    5940:	000054d5 	.word	0x000054d5

00005944 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
    594c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	683a      	ldr	r2, [r7, #0]
    5952:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5954:	2117      	movs	r1, #23
    5956:	6878      	ldr	r0, [r7, #4]
    5958:	4b02      	ldr	r3, [pc, #8]	; (5964 <hri_sercomspi_write_CTRLB_reg+0x20>)
    595a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    595c:	bf00      	nop
    595e:	3708      	adds	r7, #8
    5960:	46bd      	mov	sp, r7
    5962:	bd80      	pop	{r7, pc}
    5964:	00005521 	.word	0x00005521

00005968 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5968:	b480      	push	{r7}
    596a:	b083      	sub	sp, #12
    596c:	af00      	add	r7, sp, #0
    596e:	6078      	str	r0, [r7, #4]
    5970:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	683a      	ldr	r2, [r7, #0]
    5976:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5978:	bf00      	nop
    597a:	370c      	adds	r7, #12
    597c:	46bd      	mov	sp, r7
    597e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5982:	4770      	bx	lr

00005984 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5984:	b480      	push	{r7}
    5986:	b083      	sub	sp, #12
    5988:	af00      	add	r7, sp, #0
    598a:	6078      	str	r0, [r7, #4]
    598c:	460b      	mov	r3, r1
    598e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	78fa      	ldrb	r2, [r7, #3]
    5994:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5996:	bf00      	nop
    5998:	370c      	adds	r7, #12
    599a:	46bd      	mov	sp, r7
    599c:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a0:	4770      	bx	lr
	...

000059a4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    59a4:	b580      	push	{r7, lr}
    59a6:	b084      	sub	sp, #16
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
    59ac:	460b      	mov	r3, r1
    59ae:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59b4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    59b6:	68fb      	ldr	r3, [r7, #12]
    59b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    59bc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    59be:	78fb      	ldrb	r3, [r7, #3]
    59c0:	039b      	lsls	r3, r3, #14
    59c2:	461a      	mov	r2, r3
    59c4:	68fb      	ldr	r3, [r7, #12]
    59c6:	4313      	orrs	r3, r2
    59c8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	68fa      	ldr	r2, [r7, #12]
    59ce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    59d0:	2104      	movs	r1, #4
    59d2:	6878      	ldr	r0, [r7, #4]
    59d4:	4b02      	ldr	r3, [pc, #8]	; (59e0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    59d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59d8:	bf00      	nop
    59da:	3710      	adds	r7, #16
    59dc:	46bd      	mov	sp, r7
    59de:	bd80      	pop	{r7, pc}
    59e0:	000054d5 	.word	0x000054d5

000059e4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	b082      	sub	sp, #8
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
    59ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	683a      	ldr	r2, [r7, #0]
    59f2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    59f4:	2104      	movs	r1, #4
    59f6:	6878      	ldr	r0, [r7, #4]
    59f8:	4b02      	ldr	r3, [pc, #8]	; (5a04 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    59fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59fc:	bf00      	nop
    59fe:	3708      	adds	r7, #8
    5a00:	46bd      	mov	sp, r7
    5a02:	bd80      	pop	{r7, pc}
    5a04:	000054d5 	.word	0x000054d5

00005a08 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5a08:	b580      	push	{r7, lr}
    5a0a:	b082      	sub	sp, #8
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a10:	2104      	movs	r1, #4
    5a12:	6878      	ldr	r0, [r7, #4]
    5a14:	4b03      	ldr	r3, [pc, #12]	; (5a24 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5a16:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5a18:	687b      	ldr	r3, [r7, #4]
    5a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5a1c:	4618      	mov	r0, r3
    5a1e:	3708      	adds	r7, #8
    5a20:	46bd      	mov	sp, r7
    5a22:	bd80      	pop	{r7, pc}
    5a24:	000054d5 	.word	0x000054d5

00005a28 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    5a30:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	683a      	ldr	r2, [r7, #0]
    5a36:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a38:	bf00      	nop
    5a3a:	370c      	adds	r7, #12
    5a3c:	46bd      	mov	sp, r7
    5a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a42:	4770      	bx	lr

00005a44 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5a44:	b580      	push	{r7, lr}
    5a46:	b082      	sub	sp, #8
    5a48:	af00      	add	r7, sp, #0
    5a4a:	6078      	str	r0, [r7, #4]
    5a4c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	683a      	ldr	r2, [r7, #0]
    5a52:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a54:	2104      	movs	r1, #4
    5a56:	6878      	ldr	r0, [r7, #4]
    5a58:	4b02      	ldr	r3, [pc, #8]	; (5a64 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5a5a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a5c:	bf00      	nop
    5a5e:	3708      	adds	r7, #8
    5a60:	46bd      	mov	sp, r7
    5a62:	bd80      	pop	{r7, pc}
    5a64:	000054d5 	.word	0x000054d5

00005a68 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5a68:	b580      	push	{r7, lr}
    5a6a:	b082      	sub	sp, #8
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a70:	2104      	movs	r1, #4
    5a72:	6878      	ldr	r0, [r7, #4]
    5a74:	4b03      	ldr	r3, [pc, #12]	; (5a84 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5a76:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5a7c:	4618      	mov	r0, r3
    5a7e:	3708      	adds	r7, #8
    5a80:	46bd      	mov	sp, r7
    5a82:	bd80      	pop	{r7, pc}
    5a84:	000054d5 	.word	0x000054d5

00005a88 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5a88:	b480      	push	{r7}
    5a8a:	b083      	sub	sp, #12
    5a8c:	af00      	add	r7, sp, #0
    5a8e:	6078      	str	r0, [r7, #4]
    5a90:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	683a      	ldr	r2, [r7, #0]
    5a96:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a98:	bf00      	nop
    5a9a:	370c      	adds	r7, #12
    5a9c:	46bd      	mov	sp, r7
    5a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa2:	4770      	bx	lr

00005aa4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5aa4:	b480      	push	{r7}
    5aa6:	b083      	sub	sp, #12
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5ab0:	4618      	mov	r0, r3
    5ab2:	370c      	adds	r7, #12
    5ab4:	46bd      	mov	sp, r7
    5ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aba:	4770      	bx	lr

00005abc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5abc:	b480      	push	{r7}
    5abe:	b083      	sub	sp, #12
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
    5ac4:	460b      	mov	r3, r1
    5ac6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	78fa      	ldrb	r2, [r7, #3]
    5acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ad0:	bf00      	nop
    5ad2:	370c      	adds	r7, #12
    5ad4:	46bd      	mov	sp, r7
    5ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ada:	4770      	bx	lr

00005adc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5adc:	b480      	push	{r7}
    5ade:	b083      	sub	sp, #12
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
    5ae4:	460b      	mov	r3, r1
    5ae6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	887a      	ldrh	r2, [r7, #2]
    5aec:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5aee:	bf00      	nop
    5af0:	370c      	adds	r7, #12
    5af2:	46bd      	mov	sp, r7
    5af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af8:	4770      	bx	lr
	...

00005afc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5afc:	b580      	push	{r7, lr}
    5afe:	b082      	sub	sp, #8
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b04:	2104      	movs	r1, #4
    5b06:	6878      	ldr	r0, [r7, #4]
    5b08:	4b04      	ldr	r3, [pc, #16]	; (5b1c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5b0a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	8b5b      	ldrh	r3, [r3, #26]
    5b10:	b29b      	uxth	r3, r3
}
    5b12:	4618      	mov	r0, r3
    5b14:	3708      	adds	r7, #8
    5b16:	46bd      	mov	sp, r7
    5b18:	bd80      	pop	{r7, pc}
    5b1a:	bf00      	nop
    5b1c:	000054d5 	.word	0x000054d5

00005b20 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5b20:	b4b0      	push	{r4, r5, r7}
    5b22:	b08d      	sub	sp, #52	; 0x34
    5b24:	af00      	add	r7, sp, #0
    5b26:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5b28:	4b13      	ldr	r3, [pc, #76]	; (5b78 <_sercom_get_hardware_index+0x58>)
    5b2a:	f107 040c 	add.w	r4, r7, #12
    5b2e:	461d      	mov	r5, r3
    5b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5b34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5b3c:	2300      	movs	r3, #0
    5b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5b40:	e010      	b.n	5b64 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b44:	009b      	lsls	r3, r3, #2
    5b46:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5b4a:	4413      	add	r3, r2
    5b4c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5b50:	461a      	mov	r2, r3
    5b52:	687b      	ldr	r3, [r7, #4]
    5b54:	429a      	cmp	r2, r3
    5b56:	d102      	bne.n	5b5e <_sercom_get_hardware_index+0x3e>
			return i;
    5b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b5a:	b2db      	uxtb	r3, r3
    5b5c:	e006      	b.n	5b6c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b60:	3301      	adds	r3, #1
    5b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    5b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b66:	2b07      	cmp	r3, #7
    5b68:	d9eb      	bls.n	5b42 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5b6a:	2300      	movs	r3, #0
}
    5b6c:	4618      	mov	r0, r3
    5b6e:	3734      	adds	r7, #52	; 0x34
    5b70:	46bd      	mov	sp, r7
    5b72:	bcb0      	pop	{r4, r5, r7}
    5b74:	4770      	bx	lr
    5b76:	bf00      	nop
    5b78:	0000d6a8 	.word	0x0000d6a8

00005b7c <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5b7c:	b480      	push	{r7}
    5b7e:	b083      	sub	sp, #12
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
    5b84:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM1) {
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	4a09      	ldr	r2, [pc, #36]	; (5bb0 <_sercom_init_irq_param+0x34>)
    5b8a:	4293      	cmp	r3, r2
    5b8c:	d102      	bne.n	5b94 <_sercom_init_irq_param+0x18>
		_sercom1_dev = (struct _spi_async_dev *)dev;
    5b8e:	4a09      	ldr	r2, [pc, #36]	; (5bb4 <_sercom_init_irq_param+0x38>)
    5b90:	683b      	ldr	r3, [r7, #0]
    5b92:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	4a08      	ldr	r2, [pc, #32]	; (5bb8 <_sercom_init_irq_param+0x3c>)
    5b98:	4293      	cmp	r3, r2
    5b9a:	d102      	bne.n	5ba2 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5b9c:	4a07      	ldr	r2, [pc, #28]	; (5bbc <_sercom_init_irq_param+0x40>)
    5b9e:	683b      	ldr	r3, [r7, #0]
    5ba0:	6013      	str	r3, [r2, #0]
	}
}
    5ba2:	bf00      	nop
    5ba4:	370c      	adds	r7, #12
    5ba6:	46bd      	mov	sp, r7
    5ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bac:	4770      	bx	lr
    5bae:	bf00      	nop
    5bb0:	40003400 	.word	0x40003400
    5bb4:	200006b0 	.word	0x200006b0
    5bb8:	43000400 	.word	0x43000400
    5bbc:	200006b4 	.word	0x200006b4

00005bc0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b084      	sub	sp, #16
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5bc8:	6878      	ldr	r0, [r7, #4]
    5bca:	4b13      	ldr	r3, [pc, #76]	; (5c18 <_get_i2cm_index+0x58>)
    5bcc:	4798      	blx	r3
    5bce:	4603      	mov	r3, r0
    5bd0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5bd2:	2300      	movs	r3, #0
    5bd4:	73fb      	strb	r3, [r7, #15]
    5bd6:	e010      	b.n	5bfa <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5bd8:	7bfa      	ldrb	r2, [r7, #15]
    5bda:	4910      	ldr	r1, [pc, #64]	; (5c1c <_get_i2cm_index+0x5c>)
    5bdc:	4613      	mov	r3, r2
    5bde:	005b      	lsls	r3, r3, #1
    5be0:	4413      	add	r3, r2
    5be2:	00db      	lsls	r3, r3, #3
    5be4:	440b      	add	r3, r1
    5be6:	781b      	ldrb	r3, [r3, #0]
    5be8:	7bba      	ldrb	r2, [r7, #14]
    5bea:	429a      	cmp	r2, r3
    5bec:	d102      	bne.n	5bf4 <_get_i2cm_index+0x34>
			return i;
    5bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5bf2:	e00d      	b.n	5c10 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5bf4:	7bfb      	ldrb	r3, [r7, #15]
    5bf6:	3301      	adds	r3, #1
    5bf8:	73fb      	strb	r3, [r7, #15]
    5bfa:	7bfb      	ldrb	r3, [r7, #15]
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d0eb      	beq.n	5bd8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5c00:	f240 32b2 	movw	r2, #946	; 0x3b2
    5c04:	4906      	ldr	r1, [pc, #24]	; (5c20 <_get_i2cm_index+0x60>)
    5c06:	2000      	movs	r0, #0
    5c08:	4b06      	ldr	r3, [pc, #24]	; (5c24 <_get_i2cm_index+0x64>)
    5c0a:	4798      	blx	r3
	return -1;
    5c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5c10:	4618      	mov	r0, r3
    5c12:	3710      	adds	r7, #16
    5c14:	46bd      	mov	sp, r7
    5c16:	bd80      	pop	{r7, pc}
    5c18:	00005b21 	.word	0x00005b21
    5c1c:	20000018 	.word	0x20000018
    5c20:	0000d68c 	.word	0x0000d68c
    5c24:	000030c9 	.word	0x000030c9

00005c28 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b082      	sub	sp, #8
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5c30:	2103      	movs	r1, #3
    5c32:	6878      	ldr	r0, [r7, #4]
    5c34:	4b02      	ldr	r3, [pc, #8]	; (5c40 <_sercom_i2c_send_stop+0x18>)
    5c36:	4798      	blx	r3
}
    5c38:	bf00      	nop
    5c3a:	3708      	adds	r7, #8
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}
    5c40:	000058f1 	.word	0x000058f1

00005c44 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5c44:	b590      	push	{r4, r7, lr}
    5c46:	b087      	sub	sp, #28
    5c48:	af00      	add	r7, sp, #0
    5c4a:	60f8      	str	r0, [r7, #12]
    5c4c:	60b9      	str	r1, [r7, #8]
    5c4e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5c50:	68f8      	ldr	r0, [r7, #12]
    5c52:	4b7d      	ldr	r3, [pc, #500]	; (5e48 <_sercom_i2c_sync_analyse_flags+0x204>)
    5c54:	4798      	blx	r3
    5c56:	4603      	mov	r3, r0
    5c58:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5c5a:	68f8      	ldr	r0, [r7, #12]
    5c5c:	4b7b      	ldr	r3, [pc, #492]	; (5e4c <_sercom_i2c_sync_analyse_flags+0x208>)
    5c5e:	4798      	blx	r3
    5c60:	4603      	mov	r3, r0
    5c62:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5c64:	68bb      	ldr	r3, [r7, #8]
    5c66:	f003 0301 	and.w	r3, r3, #1
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	f000 8095 	beq.w	5d9a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5c70:	8a7b      	ldrh	r3, [r7, #18]
    5c72:	f003 0302 	and.w	r3, r3, #2
    5c76:	2b00      	cmp	r3, #0
    5c78:	d01d      	beq.n	5cb6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5c7a:	68f8      	ldr	r0, [r7, #12]
    5c7c:	4b74      	ldr	r3, [pc, #464]	; (5e50 <_sercom_i2c_sync_analyse_flags+0x20c>)
    5c7e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	885b      	ldrh	r3, [r3, #2]
    5c84:	b29b      	uxth	r3, r3
    5c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5c8a:	b29a      	uxth	r2, r3
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	885b      	ldrh	r3, [r3, #2]
    5c94:	b29b      	uxth	r3, r3
    5c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5c9a:	b29a      	uxth	r2, r3
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5ca0:	8a7b      	ldrh	r3, [r7, #18]
    5ca2:	f003 0301 	and.w	r3, r3, #1
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d002      	beq.n	5cb0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5caa:	f06f 0304 	mvn.w	r3, #4
    5cae:	e0c6      	b.n	5e3e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5cb0:	f06f 0303 	mvn.w	r3, #3
    5cb4:	e0c3      	b.n	5e3e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5cb6:	8a7b      	ldrh	r3, [r7, #18]
    5cb8:	f003 0304 	and.w	r3, r3, #4
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d01f      	beq.n	5d00 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	685b      	ldr	r3, [r3, #4]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	dd07      	ble.n	5cd8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	885b      	ldrh	r3, [r3, #2]
    5ccc:	b29b      	uxth	r3, r3
    5cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5cd2:	b29a      	uxth	r2, r3
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	885b      	ldrh	r3, [r3, #2]
    5cdc:	b29b      	uxth	r3, r3
    5cde:	b21b      	sxth	r3, r3
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	da02      	bge.n	5cea <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    5ce4:	68f8      	ldr	r0, [r7, #12]
    5ce6:	4b5b      	ldr	r3, [pc, #364]	; (5e54 <_sercom_i2c_sync_analyse_flags+0x210>)
    5ce8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	885b      	ldrh	r3, [r3, #2]
    5cee:	b29b      	uxth	r3, r3
    5cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5cf4:	b29a      	uxth	r2, r3
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5cfa:	f06f 0301 	mvn.w	r3, #1
    5cfe:	e09e      	b.n	5e3e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	885b      	ldrh	r3, [r3, #2]
    5d04:	b29b      	uxth	r3, r3
    5d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d01c      	beq.n	5d48 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	881b      	ldrh	r3, [r3, #0]
    5d12:	121b      	asrs	r3, r3, #8
    5d14:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5d16:	f003 0406 	and.w	r4, r3, #6
    5d1a:	68f8      	ldr	r0, [r7, #12]
    5d1c:	4b4e      	ldr	r3, [pc, #312]	; (5e58 <_sercom_i2c_sync_analyse_flags+0x214>)
    5d1e:	4798      	blx	r3
    5d20:	4603      	mov	r3, r0
    5d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5d26:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5d28:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5d2c:	4619      	mov	r1, r3
    5d2e:	68f8      	ldr	r0, [r7, #12]
    5d30:	4b4a      	ldr	r3, [pc, #296]	; (5e5c <_sercom_i2c_sync_analyse_flags+0x218>)
    5d32:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	885b      	ldrh	r3, [r3, #2]
    5d38:	b29b      	uxth	r3, r3
    5d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5d3e:	b29a      	uxth	r2, r3
    5d40:	687b      	ldr	r3, [r7, #4]
    5d42:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    5d44:	2300      	movs	r3, #0
    5d46:	e07a      	b.n	5e3e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	685b      	ldr	r3, [r3, #4]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d111      	bne.n	5d74 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	885b      	ldrh	r3, [r3, #2]
    5d54:	b29b      	uxth	r3, r3
    5d56:	b21b      	sxth	r3, r3
    5d58:	2b00      	cmp	r3, #0
    5d5a:	da02      	bge.n	5d62 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    5d5c:	68f8      	ldr	r0, [r7, #12]
    5d5e:	4b3d      	ldr	r3, [pc, #244]	; (5e54 <_sercom_i2c_sync_analyse_flags+0x210>)
    5d60:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5d62:	687b      	ldr	r3, [r7, #4]
    5d64:	885b      	ldrh	r3, [r3, #2]
    5d66:	b29b      	uxth	r3, r3
    5d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5d6c:	b29a      	uxth	r2, r3
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	805a      	strh	r2, [r3, #2]
    5d72:	e010      	b.n	5d96 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	689b      	ldr	r3, [r3, #8]
    5d78:	781b      	ldrb	r3, [r3, #0]
    5d7a:	4619      	mov	r1, r3
    5d7c:	68f8      	ldr	r0, [r7, #12]
    5d7e:	4b38      	ldr	r3, [pc, #224]	; (5e60 <_sercom_i2c_sync_analyse_flags+0x21c>)
    5d80:	4798      	blx	r3
				msg->buffer++;
    5d82:	687b      	ldr	r3, [r7, #4]
    5d84:	689b      	ldr	r3, [r3, #8]
    5d86:	1c5a      	adds	r2, r3, #1
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	609a      	str	r2, [r3, #8]
				msg->len--;
    5d8c:	687b      	ldr	r3, [r7, #4]
    5d8e:	685b      	ldr	r3, [r3, #4]
    5d90:	1e5a      	subs	r2, r3, #1
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    5d96:	2300      	movs	r3, #0
    5d98:	e051      	b.n	5e3e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    5d9a:	68bb      	ldr	r3, [r7, #8]
    5d9c:	f003 0302 	and.w	r3, r3, #2
    5da0:	2b00      	cmp	r3, #0
    5da2:	d04b      	beq.n	5e3c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	685b      	ldr	r3, [r3, #4]
    5da8:	2b00      	cmp	r3, #0
    5daa:	d041      	beq.n	5e30 <_sercom_i2c_sync_analyse_flags+0x1ec>
    5dac:	8a7b      	ldrh	r3, [r7, #18]
    5dae:	f003 0304 	and.w	r3, r3, #4
    5db2:	2b00      	cmp	r3, #0
    5db4:	d13c      	bne.n	5e30 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    5db6:	687b      	ldr	r3, [r7, #4]
    5db8:	685b      	ldr	r3, [r3, #4]
    5dba:	1e5a      	subs	r2, r3, #1
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5dc0:	687b      	ldr	r3, [r7, #4]
    5dc2:	685b      	ldr	r3, [r3, #4]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d102      	bne.n	5dce <_sercom_i2c_sync_analyse_flags+0x18a>
    5dc8:	697b      	ldr	r3, [r7, #20]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d006      	beq.n	5ddc <_sercom_i2c_sync_analyse_flags+0x198>
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	685b      	ldr	r3, [r3, #4]
    5dd2:	2b01      	cmp	r3, #1
    5dd4:	d105      	bne.n	5de2 <_sercom_i2c_sync_analyse_flags+0x19e>
    5dd6:	697b      	ldr	r3, [r7, #20]
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d002      	beq.n	5de2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5ddc:	68f8      	ldr	r0, [r7, #12]
    5dde:	4b21      	ldr	r3, [pc, #132]	; (5e64 <_sercom_i2c_sync_analyse_flags+0x220>)
    5de0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5de2:	687b      	ldr	r3, [r7, #4]
    5de4:	685b      	ldr	r3, [r3, #4]
    5de6:	2b00      	cmp	r3, #0
    5de8:	d113      	bne.n	5e12 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	885b      	ldrh	r3, [r3, #2]
    5dee:	b29b      	uxth	r3, r3
    5df0:	b21b      	sxth	r3, r3
    5df2:	2b00      	cmp	r3, #0
    5df4:	da05      	bge.n	5e02 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5df6:	68f8      	ldr	r0, [r7, #12]
    5df8:	4b1b      	ldr	r3, [pc, #108]	; (5e68 <_sercom_i2c_sync_analyse_flags+0x224>)
    5dfa:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    5dfc:	68f8      	ldr	r0, [r7, #12]
    5dfe:	4b15      	ldr	r3, [pc, #84]	; (5e54 <_sercom_i2c_sync_analyse_flags+0x210>)
    5e00:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	885b      	ldrh	r3, [r3, #2]
    5e06:	b29b      	uxth	r3, r3
    5e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5e0c:	b29a      	uxth	r2, r3
    5e0e:	687b      	ldr	r3, [r7, #4]
    5e10:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	689c      	ldr	r4, [r3, #8]
    5e16:	1c62      	adds	r2, r4, #1
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	609a      	str	r2, [r3, #8]
    5e1c:	68f8      	ldr	r0, [r7, #12]
    5e1e:	4b13      	ldr	r3, [pc, #76]	; (5e6c <_sercom_i2c_sync_analyse_flags+0x228>)
    5e20:	4798      	blx	r3
    5e22:	4603      	mov	r3, r0
    5e24:	b2db      	uxtb	r3, r3
    5e26:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5e28:	68f8      	ldr	r0, [r7, #12]
    5e2a:	4b11      	ldr	r3, [pc, #68]	; (5e70 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5e2c:	4798      	blx	r3
    5e2e:	e005      	b.n	5e3c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5e30:	68f8      	ldr	r0, [r7, #12]
    5e32:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5e34:	4798      	blx	r3
			return I2C_NACK;
    5e36:	f06f 0301 	mvn.w	r3, #1
    5e3a:	e000      	b.n	5e3e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    5e3c:	2300      	movs	r3, #0
}
    5e3e:	4618      	mov	r0, r3
    5e40:	371c      	adds	r7, #28
    5e42:	46bd      	mov	sp, r7
    5e44:	bd90      	pop	{r4, r7, pc}
    5e46:	bf00      	nop
    5e48:	00005719 	.word	0x00005719
    5e4c:	00005afd 	.word	0x00005afd
    5e50:	0000556d 	.word	0x0000556d
    5e54:	00005c29 	.word	0x00005c29
    5e58:	00005a09 	.word	0x00005a09
    5e5c:	000059e5 	.word	0x000059e5
    5e60:	00005a45 	.word	0x00005a45
    5e64:	000058a1 	.word	0x000058a1
    5e68:	00005879 	.word	0x00005879
    5e6c:	00005a69 	.word	0x00005a69
    5e70:	00005587 	.word	0x00005587

00005e74 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	b086      	sub	sp, #24
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	691b      	ldr	r3, [r3, #16]
    5e80:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    5e82:	6938      	ldr	r0, [r7, #16]
    5e84:	4b37      	ldr	r3, [pc, #220]	; (5f64 <_sercom_i2c_m_irq_handler+0xf0>)
    5e86:	4798      	blx	r3
    5e88:	4603      	mov	r3, r0
    5e8a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    5e8c:	2300      	movs	r3, #0
    5e8e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	2b00      	cmp	r3, #0
    5e94:	bf14      	ite	ne
    5e96:	2301      	movne	r3, #1
    5e98:	2300      	moveq	r3, #0
    5e9a:	b2db      	uxtb	r3, r3
    5e9c:	f240 4224 	movw	r2, #1060	; 0x424
    5ea0:	4931      	ldr	r1, [pc, #196]	; (5f68 <_sercom_i2c_m_irq_handler+0xf4>)
    5ea2:	4618      	mov	r0, r3
    5ea4:	4b31      	ldr	r3, [pc, #196]	; (5f6c <_sercom_i2c_m_irq_handler+0xf8>)
    5ea6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	691b      	ldr	r3, [r3, #16]
    5eac:	2b00      	cmp	r3, #0
    5eae:	bf14      	ite	ne
    5eb0:	2301      	movne	r3, #1
    5eb2:	2300      	moveq	r3, #0
    5eb4:	b2db      	uxtb	r3, r3
    5eb6:	f240 4225 	movw	r2, #1061	; 0x425
    5eba:	492b      	ldr	r1, [pc, #172]	; (5f68 <_sercom_i2c_m_irq_handler+0xf4>)
    5ebc:	4618      	mov	r0, r3
    5ebe:	4b2b      	ldr	r3, [pc, #172]	; (5f6c <_sercom_i2c_m_irq_handler+0xf8>)
    5ec0:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    5ec2:	bf00      	nop
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5eca:	2b00      	cmp	r3, #0
    5ecc:	d126      	bne.n	5f1c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    5ece:	687b      	ldr	r3, [r7, #4]
    5ed0:	461a      	mov	r2, r3
    5ed2:	68f9      	ldr	r1, [r7, #12]
    5ed4:	6938      	ldr	r0, [r7, #16]
    5ed6:	4b26      	ldr	r3, [pc, #152]	; (5f70 <_sercom_i2c_m_irq_handler+0xfc>)
    5ed8:	4798      	blx	r3
    5eda:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    5edc:	697b      	ldr	r3, [r7, #20]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d11b      	bne.n	5f1a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    5ee2:	68fb      	ldr	r3, [r7, #12]
    5ee4:	f003 0301 	and.w	r3, r3, #1
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d008      	beq.n	5efe <_sercom_i2c_m_irq_handler+0x8a>
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	699b      	ldr	r3, [r3, #24]
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d004      	beq.n	5efe <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	699b      	ldr	r3, [r3, #24]
    5ef8:	6878      	ldr	r0, [r7, #4]
    5efa:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    5efc:	e02e      	b.n	5f5c <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    5efe:	68fb      	ldr	r3, [r7, #12]
    5f00:	f003 0302 	and.w	r3, r3, #2
    5f04:	2b00      	cmp	r3, #0
    5f06:	d029      	beq.n	5f5c <_sercom_i2c_m_irq_handler+0xe8>
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	69db      	ldr	r3, [r3, #28]
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d025      	beq.n	5f5c <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	69db      	ldr	r3, [r3, #28]
    5f14:	6878      	ldr	r0, [r7, #4]
    5f16:	4798      	blx	r3
		return;
    5f18:	e020      	b.n	5f5c <_sercom_i2c_m_irq_handler+0xe8>
			break;
    5f1a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	885b      	ldrh	r3, [r3, #2]
    5f20:	b29b      	uxth	r3, r3
    5f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5f26:	b29a      	uxth	r2, r3
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	695b      	ldr	r3, [r3, #20]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d014      	beq.n	5f5e <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    5f34:	697b      	ldr	r3, [r7, #20]
    5f36:	2b00      	cmp	r3, #0
    5f38:	d005      	beq.n	5f46 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	695b      	ldr	r3, [r3, #20]
    5f3e:	6979      	ldr	r1, [r7, #20]
    5f40:	6878      	ldr	r0, [r7, #4]
    5f42:	4798      	blx	r3
    5f44:	e005      	b.n	5f52 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	695b      	ldr	r3, [r3, #20]
    5f4a:	f06f 0104 	mvn.w	r1, #4
    5f4e:	6878      	ldr	r0, [r7, #4]
    5f50:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    5f52:	2180      	movs	r1, #128	; 0x80
    5f54:	6938      	ldr	r0, [r7, #16]
    5f56:	4b07      	ldr	r3, [pc, #28]	; (5f74 <_sercom_i2c_m_irq_handler+0x100>)
    5f58:	4798      	blx	r3
    5f5a:	e000      	b.n	5f5e <_sercom_i2c_m_irq_handler+0xea>
		return;
    5f5c:	bf00      	nop
	}
}
    5f5e:	3718      	adds	r7, #24
    5f60:	46bd      	mov	sp, r7
    5f62:	bd80      	pop	{r7, pc}
    5f64:	000055a1 	.word	0x000055a1
    5f68:	0000d68c 	.word	0x0000d68c
    5f6c:	000030c9 	.word	0x000030c9
    5f70:	00005c45 	.word	0x00005c45
    5f74:	000055bb 	.word	0x000055bb

00005f78 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    5f78:	b580      	push	{r7, lr}
    5f7a:	b082      	sub	sp, #8
    5f7c:	af00      	add	r7, sp, #0
    5f7e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    5f80:	6878      	ldr	r0, [r7, #4]
    5f82:	4b05      	ldr	r3, [pc, #20]	; (5f98 <_sercom_get_irq_num+0x20>)
    5f84:	4798      	blx	r3
    5f86:	4603      	mov	r3, r0
    5f88:	009b      	lsls	r3, r3, #2
    5f8a:	b2db      	uxtb	r3, r3
    5f8c:	332e      	adds	r3, #46	; 0x2e
    5f8e:	b2db      	uxtb	r3, r3
}
    5f90:	4618      	mov	r0, r3
    5f92:	3708      	adds	r7, #8
    5f94:	46bd      	mov	sp, r7
    5f96:	bd80      	pop	{r7, pc}
    5f98:	00005b21 	.word	0x00005b21

00005f9c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    5f9c:	b580      	push	{r7, lr}
    5f9e:	b086      	sub	sp, #24
    5fa0:	af00      	add	r7, sp, #0
    5fa2:	6078      	str	r0, [r7, #4]
    5fa4:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	2b00      	cmp	r3, #0
    5faa:	bf14      	ite	ne
    5fac:	2301      	movne	r3, #1
    5fae:	2300      	moveq	r3, #0
    5fb0:	b2db      	uxtb	r3, r3
    5fb2:	f44f 6293 	mov.w	r2, #1176	; 0x498
    5fb6:	491d      	ldr	r1, [pc, #116]	; (602c <_i2c_m_async_init+0x90>)
    5fb8:	4618      	mov	r0, r3
    5fba:	4b1d      	ldr	r3, [pc, #116]	; (6030 <_i2c_m_async_init+0x94>)
    5fbc:	4798      	blx	r3

	i2c_dev->hw = hw;
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	683a      	ldr	r2, [r7, #0]
    5fc2:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	6839      	ldr	r1, [r7, #0]
    5fc8:	4618      	mov	r0, r3
    5fca:	4b1a      	ldr	r3, [pc, #104]	; (6034 <_i2c_m_async_init+0x98>)
    5fcc:	4798      	blx	r3
    5fce:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    5fd0:	68fb      	ldr	r3, [r7, #12]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d001      	beq.n	5fda <_i2c_m_async_init+0x3e>
		return init_status;
    5fd6:	68fb      	ldr	r3, [r7, #12]
    5fd8:	e024      	b.n	6024 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    5fda:	6879      	ldr	r1, [r7, #4]
    5fdc:	6838      	ldr	r0, [r7, #0]
    5fde:	4b16      	ldr	r3, [pc, #88]	; (6038 <_i2c_m_async_init+0x9c>)
    5fe0:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    5fe2:	6838      	ldr	r0, [r7, #0]
    5fe4:	4b15      	ldr	r3, [pc, #84]	; (603c <_i2c_m_async_init+0xa0>)
    5fe6:	4798      	blx	r3
    5fe8:	4603      	mov	r3, r0
    5fea:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    5fec:	2300      	movs	r3, #0
    5fee:	613b      	str	r3, [r7, #16]
    5ff0:	e014      	b.n	601c <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    5ff2:	7dfb      	ldrb	r3, [r7, #23]
    5ff4:	b21b      	sxth	r3, r3
    5ff6:	4618      	mov	r0, r3
    5ff8:	4b11      	ldr	r3, [pc, #68]	; (6040 <_i2c_m_async_init+0xa4>)
    5ffa:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    5ffc:	7dfb      	ldrb	r3, [r7, #23]
    5ffe:	b21b      	sxth	r3, r3
    6000:	4618      	mov	r0, r3
    6002:	4b10      	ldr	r3, [pc, #64]	; (6044 <_i2c_m_async_init+0xa8>)
    6004:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6006:	7dfb      	ldrb	r3, [r7, #23]
    6008:	b21b      	sxth	r3, r3
    600a:	4618      	mov	r0, r3
    600c:	4b0e      	ldr	r3, [pc, #56]	; (6048 <_i2c_m_async_init+0xac>)
    600e:	4798      	blx	r3
		irq++;
    6010:	7dfb      	ldrb	r3, [r7, #23]
    6012:	3301      	adds	r3, #1
    6014:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6016:	693b      	ldr	r3, [r7, #16]
    6018:	3301      	adds	r3, #1
    601a:	613b      	str	r3, [r7, #16]
    601c:	693b      	ldr	r3, [r7, #16]
    601e:	2b03      	cmp	r3, #3
    6020:	d9e7      	bls.n	5ff2 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6022:	2300      	movs	r3, #0
}
    6024:	4618      	mov	r0, r3
    6026:	3718      	adds	r7, #24
    6028:	46bd      	mov	sp, r7
    602a:	bd80      	pop	{r7, pc}
    602c:	0000d68c 	.word	0x0000d68c
    6030:	000030c9 	.word	0x000030c9
    6034:	00006265 	.word	0x00006265
    6038:	00005b7d 	.word	0x00005b7d
    603c:	00005f79 	.word	0x00005f79
    6040:	00005455 	.word	0x00005455
    6044:	00005499 	.word	0x00005499
    6048:	00005419 	.word	0x00005419

0000604c <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    604c:	b590      	push	{r4, r7, lr}
    604e:	b087      	sub	sp, #28
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	691b      	ldr	r3, [r3, #16]
    6058:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    605a:	687b      	ldr	r3, [r7, #4]
    605c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    605e:	6978      	ldr	r0, [r7, #20]
    6060:	4b33      	ldr	r3, [pc, #204]	; (6130 <_sercom_i2c_send_address+0xe4>)
    6062:	4798      	blx	r3
    6064:	4603      	mov	r3, r0
    6066:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	2b00      	cmp	r3, #0
    606c:	bf14      	ite	ne
    606e:	2301      	movne	r3, #1
    6070:	2300      	moveq	r3, #0
    6072:	b2db      	uxtb	r3, r3
    6074:	f240 42c6 	movw	r2, #1222	; 0x4c6
    6078:	492e      	ldr	r1, [pc, #184]	; (6134 <_sercom_i2c_send_address+0xe8>)
    607a:	4618      	mov	r0, r3
    607c:	4b2e      	ldr	r3, [pc, #184]	; (6138 <_sercom_i2c_send_address+0xec>)
    607e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6080:	693b      	ldr	r3, [r7, #16]
    6082:	685b      	ldr	r3, [r3, #4]
    6084:	2b01      	cmp	r3, #1
    6086:	d106      	bne.n	6096 <_sercom_i2c_send_address+0x4a>
    6088:	68fb      	ldr	r3, [r7, #12]
    608a:	2b00      	cmp	r3, #0
    608c:	d003      	beq.n	6096 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    608e:	6978      	ldr	r0, [r7, #20]
    6090:	4b2a      	ldr	r3, [pc, #168]	; (613c <_sercom_i2c_send_address+0xf0>)
    6092:	4798      	blx	r3
    6094:	e002      	b.n	609c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6096:	6978      	ldr	r0, [r7, #20]
    6098:	4b29      	ldr	r3, [pc, #164]	; (6140 <_sercom_i2c_send_address+0xf4>)
    609a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    609c:	693b      	ldr	r3, [r7, #16]
    609e:	881b      	ldrh	r3, [r3, #0]
    60a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    60a4:	2b00      	cmp	r3, #0
    60a6:	d022      	beq.n	60ee <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    60a8:	693b      	ldr	r3, [r7, #16]
    60aa:	885b      	ldrh	r3, [r3, #2]
    60ac:	b29b      	uxth	r3, r3
    60ae:	f003 0301 	and.w	r3, r3, #1
    60b2:	2b00      	cmp	r3, #0
    60b4:	d007      	beq.n	60c6 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    60b6:	693b      	ldr	r3, [r7, #16]
    60b8:	885b      	ldrh	r3, [r3, #2]
    60ba:	b29b      	uxth	r3, r3
    60bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    60c0:	b29a      	uxth	r2, r3
    60c2:	693b      	ldr	r3, [r7, #16]
    60c4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    60c6:	693b      	ldr	r3, [r7, #16]
    60c8:	881b      	ldrh	r3, [r3, #0]
    60ca:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    60cc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    60d0:	401c      	ands	r4, r3
    60d2:	6978      	ldr	r0, [r7, #20]
    60d4:	4b1b      	ldr	r3, [pc, #108]	; (6144 <_sercom_i2c_send_address+0xf8>)
    60d6:	4798      	blx	r3
    60d8:	4603      	mov	r3, r0
    60da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    60de:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    60e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    60e4:	4619      	mov	r1, r3
    60e6:	6978      	ldr	r0, [r7, #20]
    60e8:	4b17      	ldr	r3, [pc, #92]	; (6148 <_sercom_i2c_send_address+0xfc>)
    60ea:	4798      	blx	r3
    60ec:	e01a      	b.n	6124 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    60ee:	693b      	ldr	r3, [r7, #16]
    60f0:	881b      	ldrh	r3, [r3, #0]
    60f2:	005b      	lsls	r3, r3, #1
    60f4:	b2db      	uxtb	r3, r3
    60f6:	693a      	ldr	r2, [r7, #16]
    60f8:	8852      	ldrh	r2, [r2, #2]
    60fa:	b292      	uxth	r2, r2
    60fc:	f002 0201 	and.w	r2, r2, #1
    6100:	2a00      	cmp	r2, #0
    6102:	bf14      	ite	ne
    6104:	2201      	movne	r2, #1
    6106:	2200      	moveq	r2, #0
    6108:	b2d2      	uxtb	r2, r2
    610a:	4313      	orrs	r3, r2
    610c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    610e:	6978      	ldr	r0, [r7, #20]
    6110:	4b0c      	ldr	r3, [pc, #48]	; (6144 <_sercom_i2c_send_address+0xf8>)
    6112:	4798      	blx	r3
    6114:	4603      	mov	r3, r0
    6116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    611a:	4323      	orrs	r3, r4
    611c:	4619      	mov	r1, r3
    611e:	6978      	ldr	r0, [r7, #20]
    6120:	4b09      	ldr	r3, [pc, #36]	; (6148 <_sercom_i2c_send_address+0xfc>)
    6122:	4798      	blx	r3
	}

	return ERR_NONE;
    6124:	2300      	movs	r3, #0
}
    6126:	4618      	mov	r0, r3
    6128:	371c      	adds	r7, #28
    612a:	46bd      	mov	sp, r7
    612c:	bd90      	pop	{r4, r7, pc}
    612e:	bf00      	nop
    6130:	00005719 	.word	0x00005719
    6134:	0000d68c 	.word	0x0000d68c
    6138:	000030c9 	.word	0x000030c9
    613c:	000058a1 	.word	0x000058a1
    6140:	000058c9 	.word	0x000058c9
    6144:	00005a09 	.word	0x00005a09
    6148:	000059e5 	.word	0x000059e5

0000614c <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    614c:	b580      	push	{r7, lr}
    614e:	b084      	sub	sp, #16
    6150:	af00      	add	r7, sp, #0
    6152:	6078      	str	r0, [r7, #4]
    6154:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	2b00      	cmp	r3, #0
    615a:	bf14      	ite	ne
    615c:	2301      	movne	r3, #1
    615e:	2300      	moveq	r3, #0
    6160:	b2db      	uxtb	r3, r3
    6162:	f240 42ee 	movw	r2, #1262	; 0x4ee
    6166:	492a      	ldr	r1, [pc, #168]	; (6210 <_i2c_m_async_transfer+0xc4>)
    6168:	4618      	mov	r0, r3
    616a:	4b2a      	ldr	r3, [pc, #168]	; (6214 <_i2c_m_async_transfer+0xc8>)
    616c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    616e:	687b      	ldr	r3, [r7, #4]
    6170:	691b      	ldr	r3, [r3, #16]
    6172:	2b00      	cmp	r3, #0
    6174:	bf14      	ite	ne
    6176:	2301      	movne	r3, #1
    6178:	2300      	moveq	r3, #0
    617a:	b2db      	uxtb	r3, r3
    617c:	f240 42ef 	movw	r2, #1263	; 0x4ef
    6180:	4923      	ldr	r1, [pc, #140]	; (6210 <_i2c_m_async_transfer+0xc4>)
    6182:	4618      	mov	r0, r3
    6184:	4b23      	ldr	r3, [pc, #140]	; (6214 <_i2c_m_async_transfer+0xc8>)
    6186:	4798      	blx	r3
	ASSERT(msg);
    6188:	683b      	ldr	r3, [r7, #0]
    618a:	2b00      	cmp	r3, #0
    618c:	bf14      	ite	ne
    618e:	2301      	movne	r3, #1
    6190:	2300      	moveq	r3, #0
    6192:	b2db      	uxtb	r3, r3
    6194:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    6198:	491d      	ldr	r1, [pc, #116]	; (6210 <_i2c_m_async_transfer+0xc4>)
    619a:	4618      	mov	r0, r3
    619c:	4b1d      	ldr	r3, [pc, #116]	; (6214 <_i2c_m_async_transfer+0xc8>)
    619e:	4798      	blx	r3

	if (msg->len == 0) {
    61a0:	683b      	ldr	r3, [r7, #0]
    61a2:	685b      	ldr	r3, [r3, #4]
    61a4:	2b00      	cmp	r3, #0
    61a6:	d101      	bne.n	61ac <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    61a8:	2300      	movs	r3, #0
    61aa:	e02d      	b.n	6208 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	885b      	ldrh	r3, [r3, #2]
    61b0:	b29b      	uxth	r3, r3
    61b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    61b6:	2b00      	cmp	r3, #0
    61b8:	d002      	beq.n	61c0 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    61ba:	f06f 0303 	mvn.w	r3, #3
    61be:	e023      	b.n	6208 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    61c0:	683b      	ldr	r3, [r7, #0]
    61c2:	885b      	ldrh	r3, [r3, #2]
    61c4:	b29b      	uxth	r3, r3
    61c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    61ca:	b29a      	uxth	r2, r3
    61cc:	683b      	ldr	r3, [r7, #0]
    61ce:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	683a      	ldr	r2, [r7, #0]
    61d4:	ca07      	ldmia	r2, {r0, r1, r2}
    61d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	691b      	ldr	r3, [r3, #16]
    61de:	4618      	mov	r0, r3
    61e0:	4b0d      	ldr	r3, [pc, #52]	; (6218 <_i2c_m_async_transfer+0xcc>)
    61e2:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    61e4:	6878      	ldr	r0, [r7, #4]
    61e6:	4b0d      	ldr	r3, [pc, #52]	; (621c <_i2c_m_async_transfer+0xd0>)
    61e8:	4798      	blx	r3
    61ea:	60f8      	str	r0, [r7, #12]

	if (ret) {
    61ec:	68fb      	ldr	r3, [r7, #12]
    61ee:	2b00      	cmp	r3, #0
    61f0:	d009      	beq.n	6206 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	885b      	ldrh	r3, [r3, #2]
    61f6:	b29b      	uxth	r3, r3
    61f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61fc:	b29a      	uxth	r2, r3
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	805a      	strh	r2, [r3, #2]

		return ret;
    6202:	68fb      	ldr	r3, [r7, #12]
    6204:	e000      	b.n	6208 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6206:	2300      	movs	r3, #0
}
    6208:	4618      	mov	r0, r3
    620a:	3710      	adds	r7, #16
    620c:	46bd      	mov	sp, r7
    620e:	bd80      	pop	{r7, pc}
    6210:	0000d68c 	.word	0x0000d68c
    6214:	000030c9 	.word	0x000030c9
    6218:	00005851 	.word	0x00005851
    621c:	0000604d 	.word	0x0000604d

00006220 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6220:	b480      	push	{r7}
    6222:	b085      	sub	sp, #20
    6224:	af00      	add	r7, sp, #0
    6226:	60f8      	str	r0, [r7, #12]
    6228:	460b      	mov	r3, r1
    622a:	607a      	str	r2, [r7, #4]
    622c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    622e:	7afb      	ldrb	r3, [r7, #11]
    6230:	2b01      	cmp	r3, #1
    6232:	d008      	beq.n	6246 <_i2c_m_async_register_callback+0x26>
    6234:	2b02      	cmp	r3, #2
    6236:	d00a      	beq.n	624e <_i2c_m_async_register_callback+0x2e>
    6238:	2b00      	cmp	r3, #0
    623a:	d000      	beq.n	623e <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    623c:	e00b      	b.n	6256 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    623e:	68fb      	ldr	r3, [r7, #12]
    6240:	687a      	ldr	r2, [r7, #4]
    6242:	615a      	str	r2, [r3, #20]
		break;
    6244:	e007      	b.n	6256 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6246:	68fb      	ldr	r3, [r7, #12]
    6248:	687a      	ldr	r2, [r7, #4]
    624a:	619a      	str	r2, [r3, #24]
		break;
    624c:	e003      	b.n	6256 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    624e:	68fb      	ldr	r3, [r7, #12]
    6250:	687a      	ldr	r2, [r7, #4]
    6252:	61da      	str	r2, [r3, #28]
		break;
    6254:	bf00      	nop
	}

	return ERR_NONE;
    6256:	2300      	movs	r3, #0
}
    6258:	4618      	mov	r0, r3
    625a:	3714      	adds	r7, #20
    625c:	46bd      	mov	sp, r7
    625e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6262:	4770      	bx	lr

00006264 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6264:	b580      	push	{r7, lr}
    6266:	b084      	sub	sp, #16
    6268:	af00      	add	r7, sp, #0
    626a:	6078      	str	r0, [r7, #4]
    626c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    626e:	6838      	ldr	r0, [r7, #0]
    6270:	4b42      	ldr	r3, [pc, #264]	; (637c <_i2c_m_sync_init_impl+0x118>)
    6272:	4798      	blx	r3
    6274:	4603      	mov	r3, r0
    6276:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6278:	2101      	movs	r1, #1
    627a:	6838      	ldr	r0, [r7, #0]
    627c:	4b40      	ldr	r3, [pc, #256]	; (6380 <_i2c_m_sync_init_impl+0x11c>)
    627e:	4798      	blx	r3
    6280:	4603      	mov	r3, r0
    6282:	f083 0301 	eor.w	r3, r3, #1
    6286:	b2db      	uxtb	r3, r3
    6288:	2b00      	cmp	r3, #0
    628a:	d020      	beq.n	62ce <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    628c:	7bfa      	ldrb	r2, [r7, #15]
    628e:	493d      	ldr	r1, [pc, #244]	; (6384 <_i2c_m_sync_init_impl+0x120>)
    6290:	4613      	mov	r3, r2
    6292:	005b      	lsls	r3, r3, #1
    6294:	4413      	add	r3, r2
    6296:	00db      	lsls	r3, r3, #3
    6298:	440b      	add	r3, r1
    629a:	3304      	adds	r3, #4
    629c:	681b      	ldr	r3, [r3, #0]
    629e:	f003 031c 	and.w	r3, r3, #28
    62a2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    62a4:	2102      	movs	r1, #2
    62a6:	6838      	ldr	r0, [r7, #0]
    62a8:	4b37      	ldr	r3, [pc, #220]	; (6388 <_i2c_m_sync_init_impl+0x124>)
    62aa:	4798      	blx	r3
    62ac:	4603      	mov	r3, r0
    62ae:	2b00      	cmp	r3, #0
    62b0:	d006      	beq.n	62c0 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    62b2:	6838      	ldr	r0, [r7, #0]
    62b4:	4b35      	ldr	r3, [pc, #212]	; (638c <_i2c_m_sync_init_impl+0x128>)
    62b6:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    62b8:	2102      	movs	r1, #2
    62ba:	6838      	ldr	r0, [r7, #0]
    62bc:	4b34      	ldr	r3, [pc, #208]	; (6390 <_i2c_m_sync_init_impl+0x12c>)
    62be:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    62c0:	68bb      	ldr	r3, [r7, #8]
    62c2:	f043 0301 	orr.w	r3, r3, #1
    62c6:	4619      	mov	r1, r3
    62c8:	6838      	ldr	r0, [r7, #0]
    62ca:	4b32      	ldr	r3, [pc, #200]	; (6394 <_i2c_m_sync_init_impl+0x130>)
    62cc:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    62ce:	2101      	movs	r1, #1
    62d0:	6838      	ldr	r0, [r7, #0]
    62d2:	4b2f      	ldr	r3, [pc, #188]	; (6390 <_i2c_m_sync_init_impl+0x12c>)
    62d4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    62d6:	7bfa      	ldrb	r2, [r7, #15]
    62d8:	492a      	ldr	r1, [pc, #168]	; (6384 <_i2c_m_sync_init_impl+0x120>)
    62da:	4613      	mov	r3, r2
    62dc:	005b      	lsls	r3, r3, #1
    62de:	4413      	add	r3, r2
    62e0:	00db      	lsls	r3, r3, #3
    62e2:	440b      	add	r3, r1
    62e4:	3304      	adds	r3, #4
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	4619      	mov	r1, r3
    62ea:	6838      	ldr	r0, [r7, #0]
    62ec:	4b29      	ldr	r3, [pc, #164]	; (6394 <_i2c_m_sync_init_impl+0x130>)
    62ee:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    62f0:	7bfa      	ldrb	r2, [r7, #15]
    62f2:	4924      	ldr	r1, [pc, #144]	; (6384 <_i2c_m_sync_init_impl+0x120>)
    62f4:	4613      	mov	r3, r2
    62f6:	005b      	lsls	r3, r3, #1
    62f8:	4413      	add	r3, r2
    62fa:	00db      	lsls	r3, r3, #3
    62fc:	440b      	add	r3, r1
    62fe:	3308      	adds	r3, #8
    6300:	681b      	ldr	r3, [r3, #0]
    6302:	4619      	mov	r1, r3
    6304:	6838      	ldr	r0, [r7, #0]
    6306:	4b24      	ldr	r3, [pc, #144]	; (6398 <_i2c_m_sync_init_impl+0x134>)
    6308:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    630a:	7bfa      	ldrb	r2, [r7, #15]
    630c:	491d      	ldr	r1, [pc, #116]	; (6384 <_i2c_m_sync_init_impl+0x120>)
    630e:	4613      	mov	r3, r2
    6310:	005b      	lsls	r3, r3, #1
    6312:	4413      	add	r3, r2
    6314:	00db      	lsls	r3, r3, #3
    6316:	440b      	add	r3, r1
    6318:	330c      	adds	r3, #12
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	4619      	mov	r1, r3
    631e:	6838      	ldr	r0, [r7, #0]
    6320:	4b1e      	ldr	r3, [pc, #120]	; (639c <_i2c_m_sync_init_impl+0x138>)
    6322:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6324:	7bfa      	ldrb	r2, [r7, #15]
    6326:	4917      	ldr	r1, [pc, #92]	; (6384 <_i2c_m_sync_init_impl+0x120>)
    6328:	4613      	mov	r3, r2
    632a:	005b      	lsls	r3, r3, #1
    632c:	4413      	add	r3, r2
    632e:	00db      	lsls	r3, r3, #3
    6330:	440b      	add	r3, r1
    6332:	3304      	adds	r3, #4
    6334:	681b      	ldr	r3, [r3, #0]
    6336:	0e1b      	lsrs	r3, r3, #24
    6338:	b29b      	uxth	r3, r3
    633a:	f003 0303 	and.w	r3, r3, #3
    633e:	b29a      	uxth	r2, r3
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	899b      	ldrh	r3, [r3, #12]
    6348:	2b01      	cmp	r3, #1
    634a:	bf8c      	ite	hi
    634c:	2301      	movhi	r3, #1
    634e:	2300      	movls	r3, #0
    6350:	b2db      	uxtb	r3, r3
    6352:	4619      	mov	r1, r3
    6354:	6838      	ldr	r0, [r7, #0]
    6356:	4b12      	ldr	r3, [pc, #72]	; (63a0 <_i2c_m_sync_init_impl+0x13c>)
    6358:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    635a:	7bfa      	ldrb	r2, [r7, #15]
    635c:	4909      	ldr	r1, [pc, #36]	; (6384 <_i2c_m_sync_init_impl+0x120>)
    635e:	4613      	mov	r3, r2
    6360:	005b      	lsls	r3, r3, #1
    6362:	4413      	add	r3, r2
    6364:	00db      	lsls	r3, r3, #3
    6366:	440b      	add	r3, r1
    6368:	3312      	adds	r3, #18
    636a:	881a      	ldrh	r2, [r3, #0]
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6370:	2300      	movs	r3, #0
}
    6372:	4618      	mov	r0, r3
    6374:	3710      	adds	r7, #16
    6376:	46bd      	mov	sp, r7
    6378:	bd80      	pop	{r7, pc}
    637a:	bf00      	nop
    637c:	00005bc1 	.word	0x00005bc1
    6380:	000054f9 	.word	0x000054f9
    6384:	20000018 	.word	0x20000018
    6388:	00005749 	.word	0x00005749
    638c:	000056f1 	.word	0x000056f1
    6390:	000054d5 	.word	0x000054d5
    6394:	00005779 	.word	0x00005779
    6398:	00005921 	.word	0x00005921
    639c:	00005969 	.word	0x00005969
    63a0:	000059a5 	.word	0x000059a5

000063a4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    63a4:	b580      	push	{r7, lr}
    63a6:	b082      	sub	sp, #8
    63a8:	af00      	add	r7, sp, #0
    63aa:	6078      	str	r0, [r7, #4]
    63ac:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	2b00      	cmp	r3, #0
    63b2:	d004      	beq.n	63be <_spi_load_regs_master+0x1a>
    63b4:	683b      	ldr	r3, [r7, #0]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d001      	beq.n	63be <_spi_load_regs_master+0x1a>
    63ba:	2301      	movs	r3, #1
    63bc:	e000      	b.n	63c0 <_spi_load_regs_master+0x1c>
    63be:	2300      	movs	r3, #0
    63c0:	f003 0301 	and.w	r3, r3, #1
    63c4:	b2db      	uxtb	r3, r3
    63c6:	f640 123c 	movw	r2, #2364	; 0x93c
    63ca:	4915      	ldr	r1, [pc, #84]	; (6420 <_spi_load_regs_master+0x7c>)
    63cc:	4618      	mov	r0, r3
    63ce:	4b15      	ldr	r3, [pc, #84]	; (6424 <_spi_load_regs_master+0x80>)
    63d0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    63d2:	683b      	ldr	r3, [r7, #0]
    63d4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    63d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    63da:	f023 0301 	bic.w	r3, r3, #1
    63de:	4619      	mov	r1, r3
    63e0:	6878      	ldr	r0, [r7, #4]
    63e2:	4b11      	ldr	r3, [pc, #68]	; (6428 <_spi_load_regs_master+0x84>)
    63e4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    63ea:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    63ee:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    63f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    63f6:	4619      	mov	r1, r3
    63f8:	6878      	ldr	r0, [r7, #4]
    63fa:	4b0c      	ldr	r3, [pc, #48]	; (642c <_spi_load_regs_master+0x88>)
    63fc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    63fe:	683b      	ldr	r3, [r7, #0]
    6400:	7b1b      	ldrb	r3, [r3, #12]
    6402:	4619      	mov	r1, r3
    6404:	6878      	ldr	r0, [r7, #4]
    6406:	4b0a      	ldr	r3, [pc, #40]	; (6430 <_spi_load_regs_master+0x8c>)
    6408:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    640a:	683b      	ldr	r3, [r7, #0]
    640c:	7b5b      	ldrb	r3, [r3, #13]
    640e:	4619      	mov	r1, r3
    6410:	6878      	ldr	r0, [r7, #4]
    6412:	4b08      	ldr	r3, [pc, #32]	; (6434 <_spi_load_regs_master+0x90>)
    6414:	4798      	blx	r3
}
    6416:	bf00      	nop
    6418:	3708      	adds	r7, #8
    641a:	46bd      	mov	sp, r7
    641c:	bd80      	pop	{r7, pc}
    641e:	bf00      	nop
    6420:	0000d68c 	.word	0x0000d68c
    6424:	000030c9 	.word	0x000030c9
    6428:	0000582d 	.word	0x0000582d
    642c:	00005945 	.word	0x00005945
    6430:	00005985 	.word	0x00005985
    6434:	00005abd 	.word	0x00005abd

00006438 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6438:	b580      	push	{r7, lr}
    643a:	b082      	sub	sp, #8
    643c:	af00      	add	r7, sp, #0
    643e:	6078      	str	r0, [r7, #4]
    6440:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6442:	687b      	ldr	r3, [r7, #4]
    6444:	2b00      	cmp	r3, #0
    6446:	d004      	beq.n	6452 <_spi_load_regs_slave+0x1a>
    6448:	683b      	ldr	r3, [r7, #0]
    644a:	2b00      	cmp	r3, #0
    644c:	d001      	beq.n	6452 <_spi_load_regs_slave+0x1a>
    644e:	2301      	movs	r3, #1
    6450:	e000      	b.n	6454 <_spi_load_regs_slave+0x1c>
    6452:	2300      	movs	r3, #0
    6454:	f003 0301 	and.w	r3, r3, #1
    6458:	b2db      	uxtb	r3, r3
    645a:	f44f 6215 	mov.w	r2, #2384	; 0x950
    645e:	491a      	ldr	r1, [pc, #104]	; (64c8 <_spi_load_regs_slave+0x90>)
    6460:	4618      	mov	r0, r3
    6462:	4b1a      	ldr	r3, [pc, #104]	; (64cc <_spi_load_regs_slave+0x94>)
    6464:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6466:	683b      	ldr	r3, [r7, #0]
    6468:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    646a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    646e:	f023 0301 	bic.w	r3, r3, #1
    6472:	4619      	mov	r1, r3
    6474:	6878      	ldr	r0, [r7, #4]
    6476:	4b16      	ldr	r3, [pc, #88]	; (64d0 <_spi_load_regs_slave+0x98>)
    6478:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    647a:	683b      	ldr	r3, [r7, #0]
    647c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    647e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6482:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    648a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    648e:	4619      	mov	r1, r3
    6490:	6878      	ldr	r0, [r7, #4]
    6492:	4b10      	ldr	r3, [pc, #64]	; (64d4 <_spi_load_regs_slave+0x9c>)
    6494:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6496:	683b      	ldr	r3, [r7, #0]
    6498:	689b      	ldr	r3, [r3, #8]
    649a:	4619      	mov	r1, r3
    649c:	6878      	ldr	r0, [r7, #4]
    649e:	4b0e      	ldr	r3, [pc, #56]	; (64d8 <_spi_load_regs_slave+0xa0>)
    64a0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    64a2:	683b      	ldr	r3, [r7, #0]
    64a4:	7b5b      	ldrb	r3, [r3, #13]
    64a6:	4619      	mov	r1, r3
    64a8:	6878      	ldr	r0, [r7, #4]
    64aa:	4b0c      	ldr	r3, [pc, #48]	; (64dc <_spi_load_regs_slave+0xa4>)
    64ac:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    64ae:	bf00      	nop
    64b0:	f04f 31ff 	mov.w	r1, #4294967295
    64b4:	6878      	ldr	r0, [r7, #4]
    64b6:	4b0a      	ldr	r3, [pc, #40]	; (64e0 <_spi_load_regs_slave+0xa8>)
    64b8:	4798      	blx	r3
    64ba:	4603      	mov	r3, r0
    64bc:	2b00      	cmp	r3, #0
    64be:	d1f7      	bne.n	64b0 <_spi_load_regs_slave+0x78>
		;
}
    64c0:	bf00      	nop
    64c2:	3708      	adds	r7, #8
    64c4:	46bd      	mov	sp, r7
    64c6:	bd80      	pop	{r7, pc}
    64c8:	0000d68c 	.word	0x0000d68c
    64cc:	000030c9 	.word	0x000030c9
    64d0:	0000582d 	.word	0x0000582d
    64d4:	00005945 	.word	0x00005945
    64d8:	00005a29 	.word	0x00005a29
    64dc:	00005abd 	.word	0x00005abd
    64e0:	00005545 	.word	0x00005545

000064e4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	b084      	sub	sp, #16
    64e8:	af00      	add	r7, sp, #0
    64ea:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	4618      	mov	r0, r3
    64f0:	4b11      	ldr	r3, [pc, #68]	; (6538 <_spi_get_regs+0x54>)
    64f2:	4798      	blx	r3
    64f4:	4603      	mov	r3, r0
    64f6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    64f8:	2300      	movs	r3, #0
    64fa:	73fb      	strb	r3, [r7, #15]
    64fc:	e014      	b.n	6528 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    64fe:	7bfa      	ldrb	r2, [r7, #15]
    6500:	490e      	ldr	r1, [pc, #56]	; (653c <_spi_get_regs+0x58>)
    6502:	4613      	mov	r3, r2
    6504:	011b      	lsls	r3, r3, #4
    6506:	4413      	add	r3, r2
    6508:	440b      	add	r3, r1
    650a:	3310      	adds	r3, #16
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	7bba      	ldrb	r2, [r7, #14]
    6510:	429a      	cmp	r2, r3
    6512:	d106      	bne.n	6522 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6514:	7bfa      	ldrb	r2, [r7, #15]
    6516:	4613      	mov	r3, r2
    6518:	011b      	lsls	r3, r3, #4
    651a:	4413      	add	r3, r2
    651c:	4a07      	ldr	r2, [pc, #28]	; (653c <_spi_get_regs+0x58>)
    651e:	4413      	add	r3, r2
    6520:	e006      	b.n	6530 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6522:	7bfb      	ldrb	r3, [r7, #15]
    6524:	3301      	adds	r3, #1
    6526:	73fb      	strb	r3, [r7, #15]
    6528:	7bfb      	ldrb	r3, [r7, #15]
    652a:	2b02      	cmp	r3, #2
    652c:	d9e7      	bls.n	64fe <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    652e:	2300      	movs	r3, #0
}
    6530:	4618      	mov	r0, r3
    6532:	3710      	adds	r7, #16
    6534:	46bd      	mov	sp, r7
    6536:	bd80      	pop	{r7, pc}
    6538:	00005b21 	.word	0x00005b21
    653c:	0000d6c8 	.word	0x0000d6c8

00006540 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6540:	b580      	push	{r7, lr}
    6542:	b084      	sub	sp, #16
    6544:	af00      	add	r7, sp, #0
    6546:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    6548:	687b      	ldr	r3, [r7, #4]
    654a:	681b      	ldr	r3, [r3, #0]
    654c:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    654e:	68f8      	ldr	r0, [r7, #12]
    6550:	4b21      	ldr	r3, [pc, #132]	; (65d8 <_spi_handler+0x98>)
    6552:	4798      	blx	r3
    6554:	4603      	mov	r3, r0
    6556:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6558:	68f8      	ldr	r0, [r7, #12]
    655a:	4b20      	ldr	r3, [pc, #128]	; (65dc <_spi_handler+0x9c>)
    655c:	4798      	blx	r3
    655e:	4603      	mov	r3, r0
    6560:	461a      	mov	r2, r3
    6562:	7afb      	ldrb	r3, [r7, #11]
    6564:	4013      	ands	r3, r2
    6566:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6568:	7afb      	ldrb	r3, [r7, #11]
    656a:	f003 0301 	and.w	r3, r3, #1
    656e:	2b00      	cmp	r3, #0
    6570:	d004      	beq.n	657c <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	689b      	ldr	r3, [r3, #8]
    6576:	6878      	ldr	r0, [r7, #4]
    6578:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    657a:	e029      	b.n	65d0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    657c:	7afb      	ldrb	r3, [r7, #11]
    657e:	f003 0304 	and.w	r3, r3, #4
    6582:	2b00      	cmp	r3, #0
    6584:	d004      	beq.n	6590 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	68db      	ldr	r3, [r3, #12]
    658a:	6878      	ldr	r0, [r7, #4]
    658c:	4798      	blx	r3
}
    658e:	e01f      	b.n	65d0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6590:	7afb      	ldrb	r3, [r7, #11]
    6592:	f003 0302 	and.w	r3, r3, #2
    6596:	2b00      	cmp	r3, #0
    6598:	d008      	beq.n	65ac <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    659a:	2102      	movs	r1, #2
    659c:	68f8      	ldr	r0, [r7, #12]
    659e:	4b10      	ldr	r3, [pc, #64]	; (65e0 <_spi_handler+0xa0>)
    65a0:	4798      	blx	r3
		dev->callbacks.complete(dev);
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	691b      	ldr	r3, [r3, #16]
    65a6:	6878      	ldr	r0, [r7, #4]
    65a8:	4798      	blx	r3
}
    65aa:	e011      	b.n	65d0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    65ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
    65b0:	2b00      	cmp	r3, #0
    65b2:	da0d      	bge.n	65d0 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    65b4:	2104      	movs	r1, #4
    65b6:	68f8      	ldr	r0, [r7, #12]
    65b8:	4b0a      	ldr	r3, [pc, #40]	; (65e4 <_spi_handler+0xa4>)
    65ba:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    65bc:	2180      	movs	r1, #128	; 0x80
    65be:	68f8      	ldr	r0, [r7, #12]
    65c0:	4b07      	ldr	r3, [pc, #28]	; (65e0 <_spi_handler+0xa0>)
    65c2:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	695b      	ldr	r3, [r3, #20]
    65c8:	f06f 0112 	mvn.w	r1, #18
    65cc:	6878      	ldr	r0, [r7, #4]
    65ce:	4798      	blx	r3
}
    65d0:	bf00      	nop
    65d2:	3710      	adds	r7, #16
    65d4:	46bd      	mov	sp, r7
    65d6:	bd80      	pop	{r7, pc}
    65d8:	00005601 	.word	0x00005601
    65dc:	000056d5 	.word	0x000056d5
    65e0:	0000561b 	.word	0x0000561b
    65e4:	00005add 	.word	0x00005add

000065e8 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    65ec:	4b03      	ldr	r3, [pc, #12]	; (65fc <SERCOM1_0_Handler+0x14>)
    65ee:	681b      	ldr	r3, [r3, #0]
    65f0:	4618      	mov	r0, r3
    65f2:	4b03      	ldr	r3, [pc, #12]	; (6600 <SERCOM1_0_Handler+0x18>)
    65f4:	4798      	blx	r3
}
    65f6:	bf00      	nop
    65f8:	bd80      	pop	{r7, pc}
    65fa:	bf00      	nop
    65fc:	200006b0 	.word	0x200006b0
    6600:	00006541 	.word	0x00006541

00006604 <SERCOM1_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    6604:	b580      	push	{r7, lr}
    6606:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    6608:	4b03      	ldr	r3, [pc, #12]	; (6618 <SERCOM1_1_Handler+0x14>)
    660a:	681b      	ldr	r3, [r3, #0]
    660c:	4618      	mov	r0, r3
    660e:	4b03      	ldr	r3, [pc, #12]	; (661c <SERCOM1_1_Handler+0x18>)
    6610:	4798      	blx	r3
}
    6612:	bf00      	nop
    6614:	bd80      	pop	{r7, pc}
    6616:	bf00      	nop
    6618:	200006b0 	.word	0x200006b0
    661c:	00006541 	.word	0x00006541

00006620 <SERCOM1_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    6620:	b580      	push	{r7, lr}
    6622:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    6624:	4b03      	ldr	r3, [pc, #12]	; (6634 <SERCOM1_2_Handler+0x14>)
    6626:	681b      	ldr	r3, [r3, #0]
    6628:	4618      	mov	r0, r3
    662a:	4b03      	ldr	r3, [pc, #12]	; (6638 <SERCOM1_2_Handler+0x18>)
    662c:	4798      	blx	r3
}
    662e:	bf00      	nop
    6630:	bd80      	pop	{r7, pc}
    6632:	bf00      	nop
    6634:	200006b0 	.word	0x200006b0
    6638:	00006541 	.word	0x00006541

0000663c <SERCOM1_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    663c:	b580      	push	{r7, lr}
    663e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    6640:	4b03      	ldr	r3, [pc, #12]	; (6650 <SERCOM1_3_Handler+0x14>)
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	4618      	mov	r0, r3
    6646:	4b03      	ldr	r3, [pc, #12]	; (6654 <SERCOM1_3_Handler+0x18>)
    6648:	4798      	blx	r3
}
    664a:	bf00      	nop
    664c:	bd80      	pop	{r7, pc}
    664e:	bf00      	nop
    6650:	200006b0 	.word	0x200006b0
    6654:	00006541 	.word	0x00006541

00006658 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    6658:	b580      	push	{r7, lr}
    665a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    665c:	4b03      	ldr	r3, [pc, #12]	; (666c <SERCOM5_0_Handler+0x14>)
    665e:	681b      	ldr	r3, [r3, #0]
    6660:	4618      	mov	r0, r3
    6662:	4b03      	ldr	r3, [pc, #12]	; (6670 <SERCOM5_0_Handler+0x18>)
    6664:	4798      	blx	r3
}
    6666:	bf00      	nop
    6668:	bd80      	pop	{r7, pc}
    666a:	bf00      	nop
    666c:	200006b4 	.word	0x200006b4
    6670:	00005e75 	.word	0x00005e75

00006674 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6674:	b580      	push	{r7, lr}
    6676:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6678:	4b03      	ldr	r3, [pc, #12]	; (6688 <SERCOM5_1_Handler+0x14>)
    667a:	681b      	ldr	r3, [r3, #0]
    667c:	4618      	mov	r0, r3
    667e:	4b03      	ldr	r3, [pc, #12]	; (668c <SERCOM5_1_Handler+0x18>)
    6680:	4798      	blx	r3
}
    6682:	bf00      	nop
    6684:	bd80      	pop	{r7, pc}
    6686:	bf00      	nop
    6688:	200006b4 	.word	0x200006b4
    668c:	00005e75 	.word	0x00005e75

00006690 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6690:	b580      	push	{r7, lr}
    6692:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6694:	4b03      	ldr	r3, [pc, #12]	; (66a4 <SERCOM5_2_Handler+0x14>)
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	4618      	mov	r0, r3
    669a:	4b03      	ldr	r3, [pc, #12]	; (66a8 <SERCOM5_2_Handler+0x18>)
    669c:	4798      	blx	r3
}
    669e:	bf00      	nop
    66a0:	bd80      	pop	{r7, pc}
    66a2:	bf00      	nop
    66a4:	200006b4 	.word	0x200006b4
    66a8:	00005e75 	.word	0x00005e75

000066ac <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    66ac:	b580      	push	{r7, lr}
    66ae:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    66b0:	4b03      	ldr	r3, [pc, #12]	; (66c0 <SERCOM5_3_Handler+0x14>)
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	4618      	mov	r0, r3
    66b6:	4b03      	ldr	r3, [pc, #12]	; (66c4 <SERCOM5_3_Handler+0x18>)
    66b8:	4798      	blx	r3
}
    66ba:	bf00      	nop
    66bc:	bd80      	pop	{r7, pc}
    66be:	bf00      	nop
    66c0:	200006b4 	.word	0x200006b4
    66c4:	00005e75 	.word	0x00005e75

000066c8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    66c8:	b580      	push	{r7, lr}
    66ca:	b084      	sub	sp, #16
    66cc:	af00      	add	r7, sp, #0
    66ce:	6078      	str	r0, [r7, #4]
    66d0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    66d2:	683b      	ldr	r3, [r7, #0]
    66d4:	4618      	mov	r0, r3
    66d6:	4b35      	ldr	r3, [pc, #212]	; (67ac <_spi_m_sync_init+0xe4>)
    66d8:	4798      	blx	r3
    66da:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	2b00      	cmp	r3, #0
    66e0:	d004      	beq.n	66ec <_spi_m_sync_init+0x24>
    66e2:	683b      	ldr	r3, [r7, #0]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d001      	beq.n	66ec <_spi_m_sync_init+0x24>
    66e8:	2301      	movs	r3, #1
    66ea:	e000      	b.n	66ee <_spi_m_sync_init+0x26>
    66ec:	2300      	movs	r3, #0
    66ee:	f003 0301 	and.w	r3, r3, #1
    66f2:	b2db      	uxtb	r3, r3
    66f4:	f640 12c6 	movw	r2, #2502	; 0x9c6
    66f8:	492d      	ldr	r1, [pc, #180]	; (67b0 <_spi_m_sync_init+0xe8>)
    66fa:	4618      	mov	r0, r3
    66fc:	4b2d      	ldr	r3, [pc, #180]	; (67b4 <_spi_m_sync_init+0xec>)
    66fe:	4798      	blx	r3

	if (regs == NULL) {
    6700:	68fb      	ldr	r3, [r7, #12]
    6702:	2b00      	cmp	r3, #0
    6704:	d102      	bne.n	670c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6706:	f06f 030c 	mvn.w	r3, #12
    670a:	e04a      	b.n	67a2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    670c:	2101      	movs	r1, #1
    670e:	6838      	ldr	r0, [r7, #0]
    6710:	4b29      	ldr	r3, [pc, #164]	; (67b8 <_spi_m_sync_init+0xf0>)
    6712:	4798      	blx	r3
    6714:	4603      	mov	r3, r0
    6716:	f083 0301 	eor.w	r3, r3, #1
    671a:	b2db      	uxtb	r3, r3
    671c:	2b00      	cmp	r3, #0
    671e:	d019      	beq.n	6754 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6720:	68fb      	ldr	r3, [r7, #12]
    6722:	681b      	ldr	r3, [r3, #0]
    6724:	f003 031c 	and.w	r3, r3, #28
    6728:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    672a:	2102      	movs	r1, #2
    672c:	6838      	ldr	r0, [r7, #0]
    672e:	4b23      	ldr	r3, [pc, #140]	; (67bc <_spi_m_sync_init+0xf4>)
    6730:	4798      	blx	r3
    6732:	4603      	mov	r3, r0
    6734:	2b00      	cmp	r3, #0
    6736:	d006      	beq.n	6746 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6738:	6838      	ldr	r0, [r7, #0]
    673a:	4b21      	ldr	r3, [pc, #132]	; (67c0 <_spi_m_sync_init+0xf8>)
    673c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    673e:	2102      	movs	r1, #2
    6740:	6838      	ldr	r0, [r7, #0]
    6742:	4b20      	ldr	r3, [pc, #128]	; (67c4 <_spi_m_sync_init+0xfc>)
    6744:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6746:	68bb      	ldr	r3, [r7, #8]
    6748:	f043 0301 	orr.w	r3, r3, #1
    674c:	4619      	mov	r1, r3
    674e:	6838      	ldr	r0, [r7, #0]
    6750:	4b1d      	ldr	r3, [pc, #116]	; (67c8 <_spi_m_sync_init+0x100>)
    6752:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6754:	2101      	movs	r1, #1
    6756:	6838      	ldr	r0, [r7, #0]
    6758:	4b1a      	ldr	r3, [pc, #104]	; (67c4 <_spi_m_sync_init+0xfc>)
    675a:	4798      	blx	r3

	dev->prvt = hw;
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	683a      	ldr	r2, [r7, #0]
    6760:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6762:	68fb      	ldr	r3, [r7, #12]
    6764:	681b      	ldr	r3, [r3, #0]
    6766:	f003 031c 	and.w	r3, r3, #28
    676a:	2b08      	cmp	r3, #8
    676c:	d104      	bne.n	6778 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    676e:	68f9      	ldr	r1, [r7, #12]
    6770:	6838      	ldr	r0, [r7, #0]
    6772:	4b16      	ldr	r3, [pc, #88]	; (67cc <_spi_m_sync_init+0x104>)
    6774:	4798      	blx	r3
    6776:	e003      	b.n	6780 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6778:	68f9      	ldr	r1, [r7, #12]
    677a:	6838      	ldr	r0, [r7, #0]
    677c:	4b14      	ldr	r3, [pc, #80]	; (67d0 <_spi_m_sync_init+0x108>)
    677e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6780:	68fb      	ldr	r3, [r7, #12]
    6782:	685b      	ldr	r3, [r3, #4]
    6784:	f003 0307 	and.w	r3, r3, #7
    6788:	2b00      	cmp	r3, #0
    678a:	d101      	bne.n	6790 <_spi_m_sync_init+0xc8>
    678c:	2201      	movs	r2, #1
    678e:	e000      	b.n	6792 <_spi_m_sync_init+0xca>
    6790:	2202      	movs	r2, #2
    6792:	687b      	ldr	r3, [r7, #4]
    6794:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6796:	68fb      	ldr	r3, [r7, #12]
    6798:	89db      	ldrh	r3, [r3, #14]
    679a:	b29a      	uxth	r2, r3
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    67a0:	2300      	movs	r3, #0
}
    67a2:	4618      	mov	r0, r3
    67a4:	3710      	adds	r7, #16
    67a6:	46bd      	mov	sp, r7
    67a8:	bd80      	pop	{r7, pc}
    67aa:	bf00      	nop
    67ac:	000064e5 	.word	0x000064e5
    67b0:	0000d68c 	.word	0x0000d68c
    67b4:	000030c9 	.word	0x000030c9
    67b8:	00005545 	.word	0x00005545
    67bc:	000057fd 	.word	0x000057fd
    67c0:	000057d5 	.word	0x000057d5
    67c4:	00005521 	.word	0x00005521
    67c8:	0000582d 	.word	0x0000582d
    67cc:	00006439 	.word	0x00006439
    67d0:	000063a5 	.word	0x000063a5

000067d4 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b086      	sub	sp, #24
    67d8:	af00      	add	r7, sp, #0
    67da:	6078      	str	r0, [r7, #4]
    67dc:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    67de:	687b      	ldr	r3, [r7, #4]
    67e0:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    67e2:	6839      	ldr	r1, [r7, #0]
    67e4:	6878      	ldr	r0, [r7, #4]
    67e6:	4b1a      	ldr	r3, [pc, #104]	; (6850 <_spi_m_async_init+0x7c>)
    67e8:	4798      	blx	r3
    67ea:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    67ec:	68bb      	ldr	r3, [r7, #8]
    67ee:	2b00      	cmp	r3, #0
    67f0:	da01      	bge.n	67f6 <_spi_m_async_init+0x22>
		return rc;
    67f2:	68bb      	ldr	r3, [r7, #8]
    67f4:	e028      	b.n	6848 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    67f6:	6879      	ldr	r1, [r7, #4]
    67f8:	6838      	ldr	r0, [r7, #0]
    67fa:	4b16      	ldr	r3, [pc, #88]	; (6854 <_spi_m_async_init+0x80>)
    67fc:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    67fe:	68fb      	ldr	r3, [r7, #12]
    6800:	2200      	movs	r2, #0
    6802:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    6804:	68fb      	ldr	r3, [r7, #12]
    6806:	2200      	movs	r2, #0
    6808:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    680a:	68fb      	ldr	r3, [r7, #12]
    680c:	2200      	movs	r2, #0
    680e:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6810:	6838      	ldr	r0, [r7, #0]
    6812:	4b11      	ldr	r3, [pc, #68]	; (6858 <_spi_m_async_init+0x84>)
    6814:	4798      	blx	r3
    6816:	4603      	mov	r3, r0
    6818:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    681a:	2300      	movs	r3, #0
    681c:	613b      	str	r3, [r7, #16]
    681e:	e00f      	b.n	6840 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6820:	7dfb      	ldrb	r3, [r7, #23]
    6822:	b21b      	sxth	r3, r3
    6824:	4618      	mov	r0, r3
    6826:	4b0d      	ldr	r3, [pc, #52]	; (685c <_spi_m_async_init+0x88>)
    6828:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    682a:	7dfb      	ldrb	r3, [r7, #23]
    682c:	b21b      	sxth	r3, r3
    682e:	4618      	mov	r0, r3
    6830:	4b0b      	ldr	r3, [pc, #44]	; (6860 <_spi_m_async_init+0x8c>)
    6832:	4798      	blx	r3
		irq++;
    6834:	7dfb      	ldrb	r3, [r7, #23]
    6836:	3301      	adds	r3, #1
    6838:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    683a:	693b      	ldr	r3, [r7, #16]
    683c:	3301      	adds	r3, #1
    683e:	613b      	str	r3, [r7, #16]
    6840:	693b      	ldr	r3, [r7, #16]
    6842:	2b03      	cmp	r3, #3
    6844:	d9ec      	bls.n	6820 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    6846:	2300      	movs	r3, #0
}
    6848:	4618      	mov	r0, r3
    684a:	3718      	adds	r7, #24
    684c:	46bd      	mov	sp, r7
    684e:	bd80      	pop	{r7, pc}
    6850:	000066c9 	.word	0x000066c9
    6854:	00005b7d 	.word	0x00005b7d
    6858:	00005f79 	.word	0x00005f79
    685c:	00005455 	.word	0x00005455
    6860:	00005499 	.word	0x00005499

00006864 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6864:	b580      	push	{r7, lr}
    6866:	b082      	sub	sp, #8
    6868:	af00      	add	r7, sp, #0
    686a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    686c:	bf00      	nop
    686e:	2103      	movs	r1, #3
    6870:	6878      	ldr	r0, [r7, #4]
    6872:	4b06      	ldr	r3, [pc, #24]	; (688c <_spi_wait_bus_idle+0x28>)
    6874:	4798      	blx	r3
    6876:	4603      	mov	r3, r0
    6878:	2b00      	cmp	r3, #0
    687a:	d0f8      	beq.n	686e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    687c:	2103      	movs	r1, #3
    687e:	6878      	ldr	r0, [r7, #4]
    6880:	4b03      	ldr	r3, [pc, #12]	; (6890 <_spi_wait_bus_idle+0x2c>)
    6882:	4798      	blx	r3
}
    6884:	bf00      	nop
    6886:	3708      	adds	r7, #8
    6888:	46bd      	mov	sp, r7
    688a:	bd80      	pop	{r7, pc}
    688c:	000055d9 	.word	0x000055d9
    6890:	0000561b 	.word	0x0000561b

00006894 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6894:	b580      	push	{r7, lr}
    6896:	b086      	sub	sp, #24
    6898:	af00      	add	r7, sp, #0
    689a:	60f8      	str	r0, [r7, #12]
    689c:	60b9      	str	r1, [r7, #8]
    689e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    68a0:	68bb      	ldr	r3, [r7, #8]
    68a2:	f003 0304 	and.w	r3, r3, #4
    68a6:	2b00      	cmp	r3, #0
    68a8:	d101      	bne.n	68ae <_spi_rx_check_and_receive+0x1a>
		return false;
    68aa:	2300      	movs	r3, #0
    68ac:	e022      	b.n	68f4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    68ae:	68f8      	ldr	r0, [r7, #12]
    68b0:	4b12      	ldr	r3, [pc, #72]	; (68fc <_spi_rx_check_and_receive+0x68>)
    68b2:	4798      	blx	r3
    68b4:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	685b      	ldr	r3, [r3, #4]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d014      	beq.n	68e8 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	685b      	ldr	r3, [r3, #4]
    68c2:	1c59      	adds	r1, r3, #1
    68c4:	687a      	ldr	r2, [r7, #4]
    68c6:	6051      	str	r1, [r2, #4]
    68c8:	697a      	ldr	r2, [r7, #20]
    68ca:	b2d2      	uxtb	r2, r2
    68cc:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	7c1b      	ldrb	r3, [r3, #16]
    68d2:	2b01      	cmp	r3, #1
    68d4:	d908      	bls.n	68e8 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    68d6:	687b      	ldr	r3, [r7, #4]
    68d8:	685b      	ldr	r3, [r3, #4]
    68da:	1c59      	adds	r1, r3, #1
    68dc:	687a      	ldr	r2, [r7, #4]
    68de:	6051      	str	r1, [r2, #4]
    68e0:	697a      	ldr	r2, [r7, #20]
    68e2:	0a12      	lsrs	r2, r2, #8
    68e4:	b2d2      	uxtb	r2, r2
    68e6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	68db      	ldr	r3, [r3, #12]
    68ec:	1c5a      	adds	r2, r3, #1
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	60da      	str	r2, [r3, #12]

	return true;
    68f2:	2301      	movs	r3, #1
}
    68f4:	4618      	mov	r0, r3
    68f6:	3718      	adds	r7, #24
    68f8:	46bd      	mov	sp, r7
    68fa:	bd80      	pop	{r7, pc}
    68fc:	00005aa5 	.word	0x00005aa5

00006900 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6900:	b580      	push	{r7, lr}
    6902:	b086      	sub	sp, #24
    6904:	af00      	add	r7, sp, #0
    6906:	60f8      	str	r0, [r7, #12]
    6908:	60b9      	str	r1, [r7, #8]
    690a:	607a      	str	r2, [r7, #4]
    690c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    690e:	68bb      	ldr	r3, [r7, #8]
    6910:	f003 0301 	and.w	r3, r3, #1
    6914:	2b00      	cmp	r3, #0
    6916:	d028      	beq.n	696a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	681b      	ldr	r3, [r3, #0]
    691c:	2b00      	cmp	r3, #0
    691e:	d018      	beq.n	6952 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	681b      	ldr	r3, [r3, #0]
    6924:	1c59      	adds	r1, r3, #1
    6926:	687a      	ldr	r2, [r7, #4]
    6928:	6011      	str	r1, [r2, #0]
    692a:	781b      	ldrb	r3, [r3, #0]
    692c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    692e:	687b      	ldr	r3, [r7, #4]
    6930:	7c1b      	ldrb	r3, [r3, #16]
    6932:	2b01      	cmp	r3, #1
    6934:	d90f      	bls.n	6956 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	681b      	ldr	r3, [r3, #0]
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	021b      	lsls	r3, r3, #8
    693e:	461a      	mov	r2, r3
    6940:	697b      	ldr	r3, [r7, #20]
    6942:	4313      	orrs	r3, r2
    6944:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	1c5a      	adds	r2, r3, #1
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	601a      	str	r2, [r3, #0]
    6950:	e001      	b.n	6956 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6952:	887b      	ldrh	r3, [r7, #2]
    6954:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	689b      	ldr	r3, [r3, #8]
    695a:	1c5a      	adds	r2, r3, #1
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6960:	6979      	ldr	r1, [r7, #20]
    6962:	68f8      	ldr	r0, [r7, #12]
    6964:	4b03      	ldr	r3, [pc, #12]	; (6974 <_spi_tx_check_and_send+0x74>)
    6966:	4798      	blx	r3
    6968:	e000      	b.n	696c <_spi_tx_check_and_send+0x6c>
		return;
    696a:	bf00      	nop
}
    696c:	3718      	adds	r7, #24
    696e:	46bd      	mov	sp, r7
    6970:	bd80      	pop	{r7, pc}
    6972:	bf00      	nop
    6974:	00005a89 	.word	0x00005a89

00006978 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6978:	b580      	push	{r7, lr}
    697a:	b082      	sub	sp, #8
    697c:	af00      	add	r7, sp, #0
    697e:	6078      	str	r0, [r7, #4]
    6980:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6982:	687b      	ldr	r3, [r7, #4]
    6984:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6988:	2b00      	cmp	r3, #0
    698a:	d00b      	beq.n	69a4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    698c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6990:	6838      	ldr	r0, [r7, #0]
    6992:	4b07      	ldr	r3, [pc, #28]	; (69b0 <_spi_err_check+0x38>)
    6994:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6996:	2180      	movs	r1, #128	; 0x80
    6998:	6838      	ldr	r0, [r7, #0]
    699a:	4b06      	ldr	r3, [pc, #24]	; (69b4 <_spi_err_check+0x3c>)
    699c:	4798      	blx	r3
		return ERR_OVERFLOW;
    699e:	f06f 0312 	mvn.w	r3, #18
    69a2:	e000      	b.n	69a6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    69a4:	2300      	movs	r3, #0
}
    69a6:	4618      	mov	r0, r3
    69a8:	3708      	adds	r7, #8
    69aa:	46bd      	mov	sp, r7
    69ac:	bd80      	pop	{r7, pc}
    69ae:	bf00      	nop
    69b0:	00005add 	.word	0x00005add
    69b4:	0000561b 	.word	0x0000561b

000069b8 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    69b8:	b590      	push	{r4, r7, lr}
    69ba:	b08b      	sub	sp, #44	; 0x2c
    69bc:	af00      	add	r7, sp, #0
    69be:	6078      	str	r0, [r7, #4]
    69c0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    69c8:	2300      	movs	r3, #0
    69ca:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    69cc:	683b      	ldr	r3, [r7, #0]
    69ce:	681b      	ldr	r3, [r3, #0]
    69d0:	60bb      	str	r3, [r7, #8]
    69d2:	683b      	ldr	r3, [r7, #0]
    69d4:	685b      	ldr	r3, [r3, #4]
    69d6:	60fb      	str	r3, [r7, #12]
    69d8:	2300      	movs	r3, #0
    69da:	613b      	str	r3, [r7, #16]
    69dc:	2300      	movs	r3, #0
    69de:	617b      	str	r3, [r7, #20]
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	791b      	ldrb	r3, [r3, #4]
    69e4:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    69e6:	687b      	ldr	r3, [r7, #4]
    69e8:	2b00      	cmp	r3, #0
    69ea:	d004      	beq.n	69f6 <_spi_m_sync_trans+0x3e>
    69ec:	6a3b      	ldr	r3, [r7, #32]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d001      	beq.n	69f6 <_spi_m_sync_trans+0x3e>
    69f2:	2301      	movs	r3, #1
    69f4:	e000      	b.n	69f8 <_spi_m_sync_trans+0x40>
    69f6:	2300      	movs	r3, #0
    69f8:	f003 0301 	and.w	r3, r3, #1
    69fc:	b2db      	uxtb	r3, r3
    69fe:	f640 322a 	movw	r2, #2858	; 0xb2a
    6a02:	492b      	ldr	r1, [pc, #172]	; (6ab0 <_spi_m_sync_trans+0xf8>)
    6a04:	4618      	mov	r0, r3
    6a06:	4b2b      	ldr	r3, [pc, #172]	; (6ab4 <_spi_m_sync_trans+0xfc>)
    6a08:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6a0a:	2107      	movs	r1, #7
    6a0c:	6a38      	ldr	r0, [r7, #32]
    6a0e:	4b2a      	ldr	r3, [pc, #168]	; (6ab8 <_spi_m_sync_trans+0x100>)
    6a10:	4798      	blx	r3
    6a12:	4603      	mov	r3, r0
    6a14:	2b00      	cmp	r3, #0
    6a16:	d002      	beq.n	6a1e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6a18:	f06f 0303 	mvn.w	r3, #3
    6a1c:	e043      	b.n	6aa6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6a1e:	6a38      	ldr	r0, [r7, #32]
    6a20:	4b26      	ldr	r3, [pc, #152]	; (6abc <_spi_m_sync_trans+0x104>)
    6a22:	4798      	blx	r3
    6a24:	4603      	mov	r3, r0
    6a26:	f083 0301 	eor.w	r3, r3, #1
    6a2a:	b2db      	uxtb	r3, r3
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d002      	beq.n	6a36 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6a30:	f06f 0313 	mvn.w	r3, #19
    6a34:	e037      	b.n	6aa6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6a36:	6a38      	ldr	r0, [r7, #32]
    6a38:	4b21      	ldr	r3, [pc, #132]	; (6ac0 <_spi_m_sync_trans+0x108>)
    6a3a:	4798      	blx	r3
    6a3c:	4603      	mov	r3, r0
    6a3e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6a40:	f107 0308 	add.w	r3, r7, #8
    6a44:	461a      	mov	r2, r3
    6a46:	69f9      	ldr	r1, [r7, #28]
    6a48:	6a38      	ldr	r0, [r7, #32]
    6a4a:	4b1e      	ldr	r3, [pc, #120]	; (6ac4 <_spi_m_sync_trans+0x10c>)
    6a4c:	4798      	blx	r3
    6a4e:	4603      	mov	r3, r0
    6a50:	f083 0301 	eor.w	r3, r3, #1
    6a54:	b2db      	uxtb	r3, r3
    6a56:	2b00      	cmp	r3, #0
    6a58:	d00b      	beq.n	6a72 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6a5a:	697a      	ldr	r2, [r7, #20]
    6a5c:	693b      	ldr	r3, [r7, #16]
    6a5e:	429a      	cmp	r2, r3
    6a60:	d307      	bcc.n	6a72 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	88db      	ldrh	r3, [r3, #6]
    6a66:	f107 0208 	add.w	r2, r7, #8
    6a6a:	69f9      	ldr	r1, [r7, #28]
    6a6c:	6a38      	ldr	r0, [r7, #32]
    6a6e:	4c16      	ldr	r4, [pc, #88]	; (6ac8 <_spi_m_sync_trans+0x110>)
    6a70:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6a72:	6a39      	ldr	r1, [r7, #32]
    6a74:	69f8      	ldr	r0, [r7, #28]
    6a76:	4b15      	ldr	r3, [pc, #84]	; (6acc <_spi_m_sync_trans+0x114>)
    6a78:	4798      	blx	r3
    6a7a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a7e:	2b00      	cmp	r3, #0
    6a80:	db0c      	blt.n	6a9c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6a82:	693a      	ldr	r2, [r7, #16]
    6a84:	683b      	ldr	r3, [r7, #0]
    6a86:	689b      	ldr	r3, [r3, #8]
    6a88:	429a      	cmp	r2, r3
    6a8a:	d3d4      	bcc.n	6a36 <_spi_m_sync_trans+0x7e>
    6a8c:	697a      	ldr	r2, [r7, #20]
    6a8e:	683b      	ldr	r3, [r7, #0]
    6a90:	689b      	ldr	r3, [r3, #8]
    6a92:	429a      	cmp	r2, r3
    6a94:	d3cf      	bcc.n	6a36 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6a96:	693b      	ldr	r3, [r7, #16]
    6a98:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6a9a:	e000      	b.n	6a9e <_spi_m_sync_trans+0xe6>
			break;
    6a9c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6a9e:	6a38      	ldr	r0, [r7, #32]
    6aa0:	4b0b      	ldr	r3, [pc, #44]	; (6ad0 <_spi_m_sync_trans+0x118>)
    6aa2:	4798      	blx	r3

	return rc;
    6aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6aa6:	4618      	mov	r0, r3
    6aa8:	372c      	adds	r7, #44	; 0x2c
    6aaa:	46bd      	mov	sp, r7
    6aac:	bd90      	pop	{r4, r7, pc}
    6aae:	bf00      	nop
    6ab0:	0000d68c 	.word	0x0000d68c
    6ab4:	000030c9 	.word	0x000030c9
    6ab8:	00005545 	.word	0x00005545
    6abc:	0000579d 	.word	0x0000579d
    6ac0:	00005601 	.word	0x00005601
    6ac4:	00006895 	.word	0x00006895
    6ac8:	00006901 	.word	0x00006901
    6acc:	00006979 	.word	0x00006979
    6ad0:	00006865 	.word	0x00006865

00006ad4 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b084      	sub	sp, #16
    6ad8:	af00      	add	r7, sp, #0
    6ada:	6078      	str	r0, [r7, #4]
    6adc:	460b      	mov	r3, r1
    6ade:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	681b      	ldr	r3, [r3, #0]
    6ae4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d004      	beq.n	6af6 <_spi_m_async_enable_tx+0x22>
    6aec:	68fb      	ldr	r3, [r7, #12]
    6aee:	2b00      	cmp	r3, #0
    6af0:	d001      	beq.n	6af6 <_spi_m_async_enable_tx+0x22>
    6af2:	2301      	movs	r3, #1
    6af4:	e000      	b.n	6af8 <_spi_m_async_enable_tx+0x24>
    6af6:	2300      	movs	r3, #0
    6af8:	f003 0301 	and.w	r3, r3, #1
    6afc:	b2db      	uxtb	r3, r3
    6afe:	f640 3256 	movw	r2, #2902	; 0xb56
    6b02:	4909      	ldr	r1, [pc, #36]	; (6b28 <_spi_m_async_enable_tx+0x54>)
    6b04:	4618      	mov	r0, r3
    6b06:	4b09      	ldr	r3, [pc, #36]	; (6b2c <_spi_m_async_enable_tx+0x58>)
    6b08:	4798      	blx	r3

	if (state) {
    6b0a:	78fb      	ldrb	r3, [r7, #3]
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d003      	beq.n	6b18 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6b10:	68f8      	ldr	r0, [r7, #12]
    6b12:	4b07      	ldr	r3, [pc, #28]	; (6b30 <_spi_m_async_enable_tx+0x5c>)
    6b14:	4798      	blx	r3
    6b16:	e002      	b.n	6b1e <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6b18:	68f8      	ldr	r0, [r7, #12]
    6b1a:	4b06      	ldr	r3, [pc, #24]	; (6b34 <_spi_m_async_enable_tx+0x60>)
    6b1c:	4798      	blx	r3
	}

	return ERR_NONE;
    6b1e:	2300      	movs	r3, #0
}
    6b20:	4618      	mov	r0, r3
    6b22:	3710      	adds	r7, #16
    6b24:	46bd      	mov	sp, r7
    6b26:	bd80      	pop	{r7, pc}
    6b28:	0000d68c 	.word	0x0000d68c
    6b2c:	000030c9 	.word	0x000030c9
    6b30:	00005639 	.word	0x00005639
    6b34:	00005653 	.word	0x00005653

00006b38 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b084      	sub	sp, #16
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
    6b40:	460b      	mov	r3, r1
    6b42:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	681b      	ldr	r3, [r3, #0]
    6b48:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6b4a:	687b      	ldr	r3, [r7, #4]
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	bf14      	ite	ne
    6b50:	2301      	movne	r3, #1
    6b52:	2300      	moveq	r3, #0
    6b54:	b2db      	uxtb	r3, r3
    6b56:	f640 326a 	movw	r2, #2922	; 0xb6a
    6b5a:	490f      	ldr	r1, [pc, #60]	; (6b98 <_spi_m_async_enable_rx+0x60>)
    6b5c:	4618      	mov	r0, r3
    6b5e:	4b0f      	ldr	r3, [pc, #60]	; (6b9c <_spi_m_async_enable_rx+0x64>)
    6b60:	4798      	blx	r3
	ASSERT(hw);
    6b62:	68fb      	ldr	r3, [r7, #12]
    6b64:	2b00      	cmp	r3, #0
    6b66:	bf14      	ite	ne
    6b68:	2301      	movne	r3, #1
    6b6a:	2300      	moveq	r3, #0
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	f640 326b 	movw	r2, #2923	; 0xb6b
    6b72:	4909      	ldr	r1, [pc, #36]	; (6b98 <_spi_m_async_enable_rx+0x60>)
    6b74:	4618      	mov	r0, r3
    6b76:	4b09      	ldr	r3, [pc, #36]	; (6b9c <_spi_m_async_enable_rx+0x64>)
    6b78:	4798      	blx	r3

	if (state) {
    6b7a:	78fb      	ldrb	r3, [r7, #3]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d003      	beq.n	6b88 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6b80:	68f8      	ldr	r0, [r7, #12]
    6b82:	4b07      	ldr	r3, [pc, #28]	; (6ba0 <_spi_m_async_enable_rx+0x68>)
    6b84:	4798      	blx	r3
    6b86:	e002      	b.n	6b8e <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6b88:	68f8      	ldr	r0, [r7, #12]
    6b8a:	4b06      	ldr	r3, [pc, #24]	; (6ba4 <_spi_m_async_enable_rx+0x6c>)
    6b8c:	4798      	blx	r3
	}

	return ERR_NONE;
    6b8e:	2300      	movs	r3, #0
}
    6b90:	4618      	mov	r0, r3
    6b92:	3710      	adds	r7, #16
    6b94:	46bd      	mov	sp, r7
    6b96:	bd80      	pop	{r7, pc}
    6b98:	0000d68c 	.word	0x0000d68c
    6b9c:	000030c9 	.word	0x000030c9
    6ba0:	000056a1 	.word	0x000056a1
    6ba4:	000056bb 	.word	0x000056bb

00006ba8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6ba8:	b580      	push	{r7, lr}
    6baa:	b082      	sub	sp, #8
    6bac:	af00      	add	r7, sp, #0
    6bae:	6078      	str	r0, [r7, #4]
    6bb0:	460b      	mov	r3, r1
    6bb2:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    6bb4:	687b      	ldr	r3, [r7, #4]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d005      	beq.n	6bc6 <_spi_m_async_enable_tx_complete+0x1e>
    6bba:	687b      	ldr	r3, [r7, #4]
    6bbc:	681b      	ldr	r3, [r3, #0]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d001      	beq.n	6bc6 <_spi_m_async_enable_tx_complete+0x1e>
    6bc2:	2301      	movs	r3, #1
    6bc4:	e000      	b.n	6bc8 <_spi_m_async_enable_tx_complete+0x20>
    6bc6:	2300      	movs	r3, #0
    6bc8:	f003 0301 	and.w	r3, r3, #1
    6bcc:	b2db      	uxtb	r3, r3
    6bce:	f640 327d 	movw	r2, #2941	; 0xb7d
    6bd2:	490b      	ldr	r1, [pc, #44]	; (6c00 <_spi_m_async_enable_tx_complete+0x58>)
    6bd4:	4618      	mov	r0, r3
    6bd6:	4b0b      	ldr	r3, [pc, #44]	; (6c04 <_spi_m_async_enable_tx_complete+0x5c>)
    6bd8:	4798      	blx	r3

	if (state) {
    6bda:	78fb      	ldrb	r3, [r7, #3]
    6bdc:	2b00      	cmp	r3, #0
    6bde:	d005      	beq.n	6bec <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	681b      	ldr	r3, [r3, #0]
    6be4:	4618      	mov	r0, r3
    6be6:	4b08      	ldr	r3, [pc, #32]	; (6c08 <_spi_m_async_enable_tx_complete+0x60>)
    6be8:	4798      	blx	r3
    6bea:	e004      	b.n	6bf6 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	681b      	ldr	r3, [r3, #0]
    6bf0:	4618      	mov	r0, r3
    6bf2:	4b06      	ldr	r3, [pc, #24]	; (6c0c <_spi_m_async_enable_tx_complete+0x64>)
    6bf4:	4798      	blx	r3
	}

	return ERR_NONE;
    6bf6:	2300      	movs	r3, #0
}
    6bf8:	4618      	mov	r0, r3
    6bfa:	3708      	adds	r7, #8
    6bfc:	46bd      	mov	sp, r7
    6bfe:	bd80      	pop	{r7, pc}
    6c00:	0000d68c 	.word	0x0000d68c
    6c04:	000030c9 	.word	0x000030c9
    6c08:	0000566d 	.word	0x0000566d
    6c0c:	00005687 	.word	0x00005687

00006c10 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    6c10:	b580      	push	{r7, lr}
    6c12:	b082      	sub	sp, #8
    6c14:	af00      	add	r7, sp, #0
    6c16:	6078      	str	r0, [r7, #4]
    6c18:	460b      	mov	r3, r1
    6c1a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d005      	beq.n	6c2e <_spi_m_async_write_one+0x1e>
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	681b      	ldr	r3, [r3, #0]
    6c26:	2b00      	cmp	r3, #0
    6c28:	d001      	beq.n	6c2e <_spi_m_async_write_one+0x1e>
    6c2a:	2301      	movs	r3, #1
    6c2c:	e000      	b.n	6c30 <_spi_m_async_write_one+0x20>
    6c2e:	2300      	movs	r3, #0
    6c30:	f003 0301 	and.w	r3, r3, #1
    6c34:	b2db      	uxtb	r3, r3
    6c36:	f640 328f 	movw	r2, #2959	; 0xb8f
    6c3a:	4908      	ldr	r1, [pc, #32]	; (6c5c <_spi_m_async_write_one+0x4c>)
    6c3c:	4618      	mov	r0, r3
    6c3e:	4b08      	ldr	r3, [pc, #32]	; (6c60 <_spi_m_async_write_one+0x50>)
    6c40:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	681b      	ldr	r3, [r3, #0]
    6c46:	887a      	ldrh	r2, [r7, #2]
    6c48:	4611      	mov	r1, r2
    6c4a:	4618      	mov	r0, r3
    6c4c:	4b05      	ldr	r3, [pc, #20]	; (6c64 <_spi_m_async_write_one+0x54>)
    6c4e:	4798      	blx	r3

	return ERR_NONE;
    6c50:	2300      	movs	r3, #0
}
    6c52:	4618      	mov	r0, r3
    6c54:	3708      	adds	r7, #8
    6c56:	46bd      	mov	sp, r7
    6c58:	bd80      	pop	{r7, pc}
    6c5a:	bf00      	nop
    6c5c:	0000d68c 	.word	0x0000d68c
    6c60:	000030c9 	.word	0x000030c9
    6c64:	00005a89 	.word	0x00005a89

00006c68 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b082      	sub	sp, #8
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	2b00      	cmp	r3, #0
    6c74:	d005      	beq.n	6c82 <_spi_m_async_read_one+0x1a>
    6c76:	687b      	ldr	r3, [r7, #4]
    6c78:	681b      	ldr	r3, [r3, #0]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d001      	beq.n	6c82 <_spi_m_async_read_one+0x1a>
    6c7e:	2301      	movs	r3, #1
    6c80:	e000      	b.n	6c84 <_spi_m_async_read_one+0x1c>
    6c82:	2300      	movs	r3, #0
    6c84:	f003 0301 	and.w	r3, r3, #1
    6c88:	b2db      	uxtb	r3, r3
    6c8a:	f640 32aa 	movw	r2, #2986	; 0xbaa
    6c8e:	4907      	ldr	r1, [pc, #28]	; (6cac <_spi_m_async_read_one+0x44>)
    6c90:	4618      	mov	r0, r3
    6c92:	4b07      	ldr	r3, [pc, #28]	; (6cb0 <_spi_m_async_read_one+0x48>)
    6c94:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	681b      	ldr	r3, [r3, #0]
    6c9a:	4618      	mov	r0, r3
    6c9c:	4b05      	ldr	r3, [pc, #20]	; (6cb4 <_spi_m_async_read_one+0x4c>)
    6c9e:	4798      	blx	r3
    6ca0:	4603      	mov	r3, r0
    6ca2:	b29b      	uxth	r3, r3
}
    6ca4:	4618      	mov	r0, r3
    6ca6:	3708      	adds	r7, #8
    6ca8:	46bd      	mov	sp, r7
    6caa:	bd80      	pop	{r7, pc}
    6cac:	0000d68c 	.word	0x0000d68c
    6cb0:	000030c9 	.word	0x000030c9
    6cb4:	00005aa5 	.word	0x00005aa5

00006cb8 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    6cb8:	b580      	push	{r7, lr}
    6cba:	b086      	sub	sp, #24
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	60f8      	str	r0, [r7, #12]
    6cc0:	460b      	mov	r3, r1
    6cc2:	607a      	str	r2, [r7, #4]
    6cc4:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    6cca:	68fb      	ldr	r3, [r7, #12]
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d004      	beq.n	6cda <_spi_m_async_register_callback+0x22>
    6cd0:	7afb      	ldrb	r3, [r7, #11]
    6cd2:	2b03      	cmp	r3, #3
    6cd4:	d801      	bhi.n	6cda <_spi_m_async_register_callback+0x22>
    6cd6:	2301      	movs	r3, #1
    6cd8:	e000      	b.n	6cdc <_spi_m_async_register_callback+0x24>
    6cda:	2300      	movs	r3, #0
    6cdc:	f003 0301 	and.w	r3, r3, #1
    6ce0:	b2db      	uxtb	r3, r3
    6ce2:	f640 32c3 	movw	r2, #3011	; 0xbc3
    6ce6:	4909      	ldr	r1, [pc, #36]	; (6d0c <_spi_m_async_register_callback+0x54>)
    6ce8:	4618      	mov	r0, r3
    6cea:	4b09      	ldr	r3, [pc, #36]	; (6d10 <_spi_m_async_register_callback+0x58>)
    6cec:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    6cee:	697b      	ldr	r3, [r7, #20]
    6cf0:	3308      	adds	r3, #8
    6cf2:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    6cf4:	7afb      	ldrb	r3, [r7, #11]
    6cf6:	009b      	lsls	r3, r3, #2
    6cf8:	693a      	ldr	r2, [r7, #16]
    6cfa:	4413      	add	r3, r2
    6cfc:	687a      	ldr	r2, [r7, #4]
    6cfe:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6d00:	2300      	movs	r3, #0
}
    6d02:	4618      	mov	r0, r3
    6d04:	3718      	adds	r7, #24
    6d06:	46bd      	mov	sp, r7
    6d08:	bd80      	pop	{r7, pc}
    6d0a:	bf00      	nop
    6d0c:	0000d68c 	.word	0x0000d68c
    6d10:	000030c9 	.word	0x000030c9

00006d14 <__NVIC_EnableIRQ>:
{
    6d14:	b480      	push	{r7}
    6d16:	b083      	sub	sp, #12
    6d18:	af00      	add	r7, sp, #0
    6d1a:	4603      	mov	r3, r0
    6d1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d22:	2b00      	cmp	r3, #0
    6d24:	db0b      	blt.n	6d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d26:	4909      	ldr	r1, [pc, #36]	; (6d4c <__NVIC_EnableIRQ+0x38>)
    6d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d2c:	095b      	lsrs	r3, r3, #5
    6d2e:	88fa      	ldrh	r2, [r7, #6]
    6d30:	f002 021f 	and.w	r2, r2, #31
    6d34:	2001      	movs	r0, #1
    6d36:	fa00 f202 	lsl.w	r2, r0, r2
    6d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d3e:	bf00      	nop
    6d40:	370c      	adds	r7, #12
    6d42:	46bd      	mov	sp, r7
    6d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d48:	4770      	bx	lr
    6d4a:	bf00      	nop
    6d4c:	e000e100 	.word	0xe000e100

00006d50 <__NVIC_DisableIRQ>:
{
    6d50:	b480      	push	{r7}
    6d52:	b083      	sub	sp, #12
    6d54:	af00      	add	r7, sp, #0
    6d56:	4603      	mov	r3, r0
    6d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	db10      	blt.n	6d84 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d62:	490b      	ldr	r1, [pc, #44]	; (6d90 <__NVIC_DisableIRQ+0x40>)
    6d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d68:	095b      	lsrs	r3, r3, #5
    6d6a:	88fa      	ldrh	r2, [r7, #6]
    6d6c:	f002 021f 	and.w	r2, r2, #31
    6d70:	2001      	movs	r0, #1
    6d72:	fa00 f202 	lsl.w	r2, r0, r2
    6d76:	3320      	adds	r3, #32
    6d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d80:	f3bf 8f6f 	isb	sy
}
    6d84:	bf00      	nop
    6d86:	370c      	adds	r7, #12
    6d88:	46bd      	mov	sp, r7
    6d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d8e:	4770      	bx	lr
    6d90:	e000e100 	.word	0xe000e100

00006d94 <__NVIC_ClearPendingIRQ>:
{
    6d94:	b480      	push	{r7}
    6d96:	b083      	sub	sp, #12
    6d98:	af00      	add	r7, sp, #0
    6d9a:	4603      	mov	r3, r0
    6d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6da2:	2b00      	cmp	r3, #0
    6da4:	db0c      	blt.n	6dc0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6da6:	4909      	ldr	r1, [pc, #36]	; (6dcc <__NVIC_ClearPendingIRQ+0x38>)
    6da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dac:	095b      	lsrs	r3, r3, #5
    6dae:	88fa      	ldrh	r2, [r7, #6]
    6db0:	f002 021f 	and.w	r2, r2, #31
    6db4:	2001      	movs	r0, #1
    6db6:	fa00 f202 	lsl.w	r2, r0, r2
    6dba:	3360      	adds	r3, #96	; 0x60
    6dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dc0:	bf00      	nop
    6dc2:	370c      	adds	r7, #12
    6dc4:	46bd      	mov	sp, r7
    6dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dca:	4770      	bx	lr
    6dcc:	e000e100 	.word	0xe000e100

00006dd0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6dd0:	b480      	push	{r7}
    6dd2:	b083      	sub	sp, #12
    6dd4:	af00      	add	r7, sp, #0
    6dd6:	6078      	str	r0, [r7, #4]
    6dd8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6dda:	bf00      	nop
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	691a      	ldr	r2, [r3, #16]
    6de0:	683b      	ldr	r3, [r7, #0]
    6de2:	4013      	ands	r3, r2
    6de4:	2b00      	cmp	r3, #0
    6de6:	d1f9      	bne.n	6ddc <hri_tc_wait_for_sync+0xc>
	};
}
    6de8:	bf00      	nop
    6dea:	370c      	adds	r7, #12
    6dec:	46bd      	mov	sp, r7
    6dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    6df2:	4770      	bx	lr

00006df4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6df4:	b480      	push	{r7}
    6df6:	b083      	sub	sp, #12
    6df8:	af00      	add	r7, sp, #0
    6dfa:	6078      	str	r0, [r7, #4]
    6dfc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6dfe:	687b      	ldr	r3, [r7, #4]
    6e00:	691a      	ldr	r2, [r3, #16]
    6e02:	683b      	ldr	r3, [r7, #0]
    6e04:	4013      	ands	r3, r2
    6e06:	2b00      	cmp	r3, #0
    6e08:	bf14      	ite	ne
    6e0a:	2301      	movne	r3, #1
    6e0c:	2300      	moveq	r3, #0
    6e0e:	b2db      	uxtb	r3, r3
}
    6e10:	4618      	mov	r0, r3
    6e12:	370c      	adds	r7, #12
    6e14:	46bd      	mov	sp, r7
    6e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e1a:	4770      	bx	lr

00006e1c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    6e1c:	b480      	push	{r7}
    6e1e:	b083      	sub	sp, #12
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	7a9b      	ldrb	r3, [r3, #10]
    6e28:	b2db      	uxtb	r3, r3
    6e2a:	f003 0301 	and.w	r3, r3, #1
    6e2e:	2b00      	cmp	r3, #0
    6e30:	bf14      	ite	ne
    6e32:	2301      	movne	r3, #1
    6e34:	2300      	moveq	r3, #0
    6e36:	b2db      	uxtb	r3, r3
}
    6e38:	4618      	mov	r0, r3
    6e3a:	370c      	adds	r7, #12
    6e3c:	46bd      	mov	sp, r7
    6e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e42:	4770      	bx	lr

00006e44 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    6e44:	b480      	push	{r7}
    6e46:	b083      	sub	sp, #12
    6e48:	af00      	add	r7, sp, #0
    6e4a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	2201      	movs	r2, #1
    6e50:	729a      	strb	r2, [r3, #10]
}
    6e52:	bf00      	nop
    6e54:	370c      	adds	r7, #12
    6e56:	46bd      	mov	sp, r7
    6e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e5c:	4770      	bx	lr

00006e5e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    6e5e:	b480      	push	{r7}
    6e60:	b083      	sub	sp, #12
    6e62:	af00      	add	r7, sp, #0
    6e64:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	2202      	movs	r2, #2
    6e6a:	729a      	strb	r2, [r3, #10]
}
    6e6c:	bf00      	nop
    6e6e:	370c      	adds	r7, #12
    6e70:	46bd      	mov	sp, r7
    6e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e76:	4770      	bx	lr

00006e78 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    6e78:	b480      	push	{r7}
    6e7a:	b083      	sub	sp, #12
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	2201      	movs	r2, #1
    6e84:	725a      	strb	r2, [r3, #9]
}
    6e86:	bf00      	nop
    6e88:	370c      	adds	r7, #12
    6e8a:	46bd      	mov	sp, r7
    6e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e90:	4770      	bx	lr

00006e92 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    6e92:	b480      	push	{r7}
    6e94:	b083      	sub	sp, #12
    6e96:	af00      	add	r7, sp, #0
    6e98:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	7a5b      	ldrb	r3, [r3, #9]
    6e9e:	b2db      	uxtb	r3, r3
    6ea0:	085b      	lsrs	r3, r3, #1
    6ea2:	f003 0301 	and.w	r3, r3, #1
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	bf14      	ite	ne
    6eaa:	2301      	movne	r3, #1
    6eac:	2300      	moveq	r3, #0
    6eae:	b2db      	uxtb	r3, r3
}
    6eb0:	4618      	mov	r0, r3
    6eb2:	370c      	adds	r7, #12
    6eb4:	46bd      	mov	sp, r7
    6eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eba:	4770      	bx	lr

00006ebc <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b082      	sub	sp, #8
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	681b      	ldr	r3, [r3, #0]
    6ec8:	f043 0202 	orr.w	r2, r3, #2
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6ed0:	2103      	movs	r1, #3
    6ed2:	6878      	ldr	r0, [r7, #4]
    6ed4:	4b02      	ldr	r3, [pc, #8]	; (6ee0 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    6ed6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6ed8:	bf00      	nop
    6eda:	3708      	adds	r7, #8
    6edc:	46bd      	mov	sp, r7
    6ede:	bd80      	pop	{r7, pc}
    6ee0:	00006dd1 	.word	0x00006dd1

00006ee4 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b084      	sub	sp, #16
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6eec:	2103      	movs	r1, #3
    6eee:	6878      	ldr	r0, [r7, #4]
    6ef0:	4b09      	ldr	r3, [pc, #36]	; (6f18 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    6ef2:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	681b      	ldr	r3, [r3, #0]
    6ef8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    6efa:	68fb      	ldr	r3, [r7, #12]
    6efc:	085b      	lsrs	r3, r3, #1
    6efe:	f003 0301 	and.w	r3, r3, #1
    6f02:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6f04:	68fb      	ldr	r3, [r7, #12]
    6f06:	2b00      	cmp	r3, #0
    6f08:	bf14      	ite	ne
    6f0a:	2301      	movne	r3, #1
    6f0c:	2300      	moveq	r3, #0
    6f0e:	b2db      	uxtb	r3, r3
}
    6f10:	4618      	mov	r0, r3
    6f12:	3710      	adds	r7, #16
    6f14:	46bd      	mov	sp, r7
    6f16:	bd80      	pop	{r7, pc}
    6f18:	00006dd1 	.word	0x00006dd1

00006f1c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6f1c:	b580      	push	{r7, lr}
    6f1e:	b082      	sub	sp, #8
    6f20:	af00      	add	r7, sp, #0
    6f22:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    6f24:	687b      	ldr	r3, [r7, #4]
    6f26:	681b      	ldr	r3, [r3, #0]
    6f28:	f023 0202 	bic.w	r2, r3, #2
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f30:	2103      	movs	r1, #3
    6f32:	6878      	ldr	r0, [r7, #4]
    6f34:	4b02      	ldr	r3, [pc, #8]	; (6f40 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    6f36:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f38:	bf00      	nop
    6f3a:	3708      	adds	r7, #8
    6f3c:	46bd      	mov	sp, r7
    6f3e:	bd80      	pop	{r7, pc}
    6f40:	00006dd1 	.word	0x00006dd1

00006f44 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    6f44:	b580      	push	{r7, lr}
    6f46:	b084      	sub	sp, #16
    6f48:	af00      	add	r7, sp, #0
    6f4a:	6078      	str	r0, [r7, #4]
    6f4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f4e:	2103      	movs	r1, #3
    6f50:	6878      	ldr	r0, [r7, #4]
    6f52:	4b07      	ldr	r3, [pc, #28]	; (6f70 <hri_tc_get_CTRLA_reg+0x2c>)
    6f54:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6f5c:	68fa      	ldr	r2, [r7, #12]
    6f5e:	683b      	ldr	r3, [r7, #0]
    6f60:	4013      	ands	r3, r2
    6f62:	60fb      	str	r3, [r7, #12]
	return tmp;
    6f64:	68fb      	ldr	r3, [r7, #12]
}
    6f66:	4618      	mov	r0, r3
    6f68:	3710      	adds	r7, #16
    6f6a:	46bd      	mov	sp, r7
    6f6c:	bd80      	pop	{r7, pc}
    6f6e:	bf00      	nop
    6f70:	00006dd1 	.word	0x00006dd1

00006f74 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    6f74:	b580      	push	{r7, lr}
    6f76:	b082      	sub	sp, #8
    6f78:	af00      	add	r7, sp, #0
    6f7a:	6078      	str	r0, [r7, #4]
    6f7c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6f7e:	687b      	ldr	r3, [r7, #4]
    6f80:	683a      	ldr	r2, [r7, #0]
    6f82:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f84:	2103      	movs	r1, #3
    6f86:	6878      	ldr	r0, [r7, #4]
    6f88:	4b02      	ldr	r3, [pc, #8]	; (6f94 <hri_tc_write_CTRLA_reg+0x20>)
    6f8a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f8c:	bf00      	nop
    6f8e:	3708      	adds	r7, #8
    6f90:	46bd      	mov	sp, r7
    6f92:	bd80      	pop	{r7, pc}
    6f94:	00006dd1 	.word	0x00006dd1

00006f98 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    6f98:	b480      	push	{r7}
    6f9a:	b083      	sub	sp, #12
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
    6fa0:	460b      	mov	r3, r1
    6fa2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	887a      	ldrh	r2, [r7, #2]
    6fa8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    6faa:	bf00      	nop
    6fac:	370c      	adds	r7, #12
    6fae:	46bd      	mov	sp, r7
    6fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fb4:	4770      	bx	lr

00006fb6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    6fb6:	b480      	push	{r7}
    6fb8:	b083      	sub	sp, #12
    6fba:	af00      	add	r7, sp, #0
    6fbc:	6078      	str	r0, [r7, #4]
    6fbe:	460b      	mov	r3, r1
    6fc0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	78fa      	ldrb	r2, [r7, #3]
    6fc6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fc8:	bf00      	nop
    6fca:	370c      	adds	r7, #12
    6fcc:	46bd      	mov	sp, r7
    6fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd2:	4770      	bx	lr

00006fd4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    6fd4:	b480      	push	{r7}
    6fd6:	b083      	sub	sp, #12
    6fd8:	af00      	add	r7, sp, #0
    6fda:	6078      	str	r0, [r7, #4]
    6fdc:	460b      	mov	r3, r1
    6fde:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	78fa      	ldrb	r2, [r7, #3]
    6fe4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fe6:	bf00      	nop
    6fe8:	370c      	adds	r7, #12
    6fea:	46bd      	mov	sp, r7
    6fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ff0:	4770      	bx	lr
	...

00006ff4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b082      	sub	sp, #8
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]
    6ffc:	460b      	mov	r3, r1
    6ffe:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7000:	687b      	ldr	r3, [r7, #4]
    7002:	78fa      	ldrb	r2, [r7, #3]
    7004:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7006:	2120      	movs	r1, #32
    7008:	6878      	ldr	r0, [r7, #4]
    700a:	4b03      	ldr	r3, [pc, #12]	; (7018 <hri_tccount8_write_PER_reg+0x24>)
    700c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    700e:	bf00      	nop
    7010:	3708      	adds	r7, #8
    7012:	46bd      	mov	sp, r7
    7014:	bd80      	pop	{r7, pc}
    7016:	bf00      	nop
    7018:	00006dd1 	.word	0x00006dd1

0000701c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    701c:	b580      	push	{r7, lr}
    701e:	b082      	sub	sp, #8
    7020:	af00      	add	r7, sp, #0
    7022:	6078      	str	r0, [r7, #4]
    7024:	460b      	mov	r3, r1
    7026:	70fb      	strb	r3, [r7, #3]
    7028:	4613      	mov	r3, r2
    702a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    702c:	78fb      	ldrb	r3, [r7, #3]
    702e:	687a      	ldr	r2, [r7, #4]
    7030:	4413      	add	r3, r2
    7032:	78ba      	ldrb	r2, [r7, #2]
    7034:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7036:	21c0      	movs	r1, #192	; 0xc0
    7038:	6878      	ldr	r0, [r7, #4]
    703a:	4b03      	ldr	r3, [pc, #12]	; (7048 <hri_tccount8_write_CC_reg+0x2c>)
    703c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    703e:	bf00      	nop
    7040:	3708      	adds	r7, #8
    7042:	46bd      	mov	sp, r7
    7044:	bd80      	pop	{r7, pc}
    7046:	bf00      	nop
    7048:	00006dd1 	.word	0x00006dd1

0000704c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    704c:	b580      	push	{r7, lr}
    704e:	b082      	sub	sp, #8
    7050:	af00      	add	r7, sp, #0
    7052:	6078      	str	r0, [r7, #4]
    7054:	460b      	mov	r3, r1
    7056:	70fb      	strb	r3, [r7, #3]
    7058:	4613      	mov	r3, r2
    705a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    705c:	78fb      	ldrb	r3, [r7, #3]
    705e:	687a      	ldr	r2, [r7, #4]
    7060:	330c      	adds	r3, #12
    7062:	005b      	lsls	r3, r3, #1
    7064:	4413      	add	r3, r2
    7066:	883a      	ldrh	r2, [r7, #0]
    7068:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    706a:	21c0      	movs	r1, #192	; 0xc0
    706c:	6878      	ldr	r0, [r7, #4]
    706e:	4b03      	ldr	r3, [pc, #12]	; (707c <hri_tccount16_write_CC_reg+0x30>)
    7070:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7072:	bf00      	nop
    7074:	3708      	adds	r7, #8
    7076:	46bd      	mov	sp, r7
    7078:	bd80      	pop	{r7, pc}
    707a:	bf00      	nop
    707c:	00006dd1 	.word	0x00006dd1

00007080 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7080:	b580      	push	{r7, lr}
    7082:	b084      	sub	sp, #16
    7084:	af00      	add	r7, sp, #0
    7086:	60f8      	str	r0, [r7, #12]
    7088:	460b      	mov	r3, r1
    708a:	607a      	str	r2, [r7, #4]
    708c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    708e:	7afb      	ldrb	r3, [r7, #11]
    7090:	68fa      	ldr	r2, [r7, #12]
    7092:	3306      	adds	r3, #6
    7094:	009b      	lsls	r3, r3, #2
    7096:	4413      	add	r3, r2
    7098:	687a      	ldr	r2, [r7, #4]
    709a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    709c:	21c0      	movs	r1, #192	; 0xc0
    709e:	68f8      	ldr	r0, [r7, #12]
    70a0:	4b02      	ldr	r3, [pc, #8]	; (70ac <hri_tccount32_write_CC_reg+0x2c>)
    70a2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    70a4:	bf00      	nop
    70a6:	3710      	adds	r7, #16
    70a8:	46bd      	mov	sp, r7
    70aa:	bd80      	pop	{r7, pc}
    70ac:	00006dd1 	.word	0x00006dd1

000070b0 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    70b0:	b580      	push	{r7, lr}
    70b2:	b084      	sub	sp, #16
    70b4:	af00      	add	r7, sp, #0
    70b6:	6078      	str	r0, [r7, #4]
    70b8:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    70ba:	6838      	ldr	r0, [r7, #0]
    70bc:	4b93      	ldr	r3, [pc, #588]	; (730c <_timer_init+0x25c>)
    70be:	4798      	blx	r3
    70c0:	4603      	mov	r3, r0
    70c2:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	683a      	ldr	r2, [r7, #0]
    70c8:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    70ca:	2295      	movs	r2, #149	; 0x95
    70cc:	4990      	ldr	r1, [pc, #576]	; (7310 <_timer_init+0x260>)
    70ce:	2001      	movs	r0, #1
    70d0:	4b90      	ldr	r3, [pc, #576]	; (7314 <_timer_init+0x264>)
    70d2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    70d4:	2101      	movs	r1, #1
    70d6:	6838      	ldr	r0, [r7, #0]
    70d8:	4b8f      	ldr	r3, [pc, #572]	; (7318 <_timer_init+0x268>)
    70da:	4798      	blx	r3
    70dc:	4603      	mov	r3, r0
    70de:	f083 0301 	eor.w	r3, r3, #1
    70e2:	b2db      	uxtb	r3, r3
    70e4:	2b00      	cmp	r3, #0
    70e6:	d011      	beq.n	710c <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    70e8:	2102      	movs	r1, #2
    70ea:	6838      	ldr	r0, [r7, #0]
    70ec:	4b8b      	ldr	r3, [pc, #556]	; (731c <_timer_init+0x26c>)
    70ee:	4798      	blx	r3
    70f0:	4603      	mov	r3, r0
    70f2:	2b00      	cmp	r3, #0
    70f4:	d006      	beq.n	7104 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    70f6:	6838      	ldr	r0, [r7, #0]
    70f8:	4b89      	ldr	r3, [pc, #548]	; (7320 <_timer_init+0x270>)
    70fa:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    70fc:	2102      	movs	r1, #2
    70fe:	6838      	ldr	r0, [r7, #0]
    7100:	4b88      	ldr	r3, [pc, #544]	; (7324 <_timer_init+0x274>)
    7102:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7104:	2101      	movs	r1, #1
    7106:	6838      	ldr	r0, [r7, #0]
    7108:	4b87      	ldr	r3, [pc, #540]	; (7328 <_timer_init+0x278>)
    710a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    710c:	2101      	movs	r1, #1
    710e:	6838      	ldr	r0, [r7, #0]
    7110:	4b84      	ldr	r3, [pc, #528]	; (7324 <_timer_init+0x274>)
    7112:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7114:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7118:	4984      	ldr	r1, [pc, #528]	; (732c <_timer_init+0x27c>)
    711a:	4613      	mov	r3, r2
    711c:	009b      	lsls	r3, r3, #2
    711e:	4413      	add	r3, r2
    7120:	009b      	lsls	r3, r3, #2
    7122:	440b      	add	r3, r1
    7124:	3304      	adds	r3, #4
    7126:	681b      	ldr	r3, [r3, #0]
    7128:	4619      	mov	r1, r3
    712a:	6838      	ldr	r0, [r7, #0]
    712c:	4b7e      	ldr	r3, [pc, #504]	; (7328 <_timer_init+0x278>)
    712e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7130:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7134:	497d      	ldr	r1, [pc, #500]	; (732c <_timer_init+0x27c>)
    7136:	4613      	mov	r3, r2
    7138:	009b      	lsls	r3, r3, #2
    713a:	4413      	add	r3, r2
    713c:	009b      	lsls	r3, r3, #2
    713e:	440b      	add	r3, r1
    7140:	330a      	adds	r3, #10
    7142:	781b      	ldrb	r3, [r3, #0]
    7144:	4619      	mov	r1, r3
    7146:	6838      	ldr	r0, [r7, #0]
    7148:	4b79      	ldr	r3, [pc, #484]	; (7330 <_timer_init+0x280>)
    714a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    714c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7150:	4976      	ldr	r1, [pc, #472]	; (732c <_timer_init+0x27c>)
    7152:	4613      	mov	r3, r2
    7154:	009b      	lsls	r3, r3, #2
    7156:	4413      	add	r3, r2
    7158:	009b      	lsls	r3, r3, #2
    715a:	440b      	add	r3, r1
    715c:	3308      	adds	r3, #8
    715e:	881b      	ldrh	r3, [r3, #0]
    7160:	4619      	mov	r1, r3
    7162:	6838      	ldr	r0, [r7, #0]
    7164:	4b73      	ldr	r3, [pc, #460]	; (7334 <_timer_init+0x284>)
    7166:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7168:	2101      	movs	r1, #1
    716a:	6838      	ldr	r0, [r7, #0]
    716c:	4b72      	ldr	r3, [pc, #456]	; (7338 <_timer_init+0x288>)
    716e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7170:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7174:	496d      	ldr	r1, [pc, #436]	; (732c <_timer_init+0x27c>)
    7176:	4613      	mov	r3, r2
    7178:	009b      	lsls	r3, r3, #2
    717a:	4413      	add	r3, r2
    717c:	009b      	lsls	r3, r3, #2
    717e:	440b      	add	r3, r1
    7180:	3304      	adds	r3, #4
    7182:	681b      	ldr	r3, [r3, #0]
    7184:	f003 030c 	and.w	r3, r3, #12
    7188:	2b08      	cmp	r3, #8
    718a:	d11e      	bne.n	71ca <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    718c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7190:	4966      	ldr	r1, [pc, #408]	; (732c <_timer_init+0x27c>)
    7192:	4613      	mov	r3, r2
    7194:	009b      	lsls	r3, r3, #2
    7196:	4413      	add	r3, r2
    7198:	009b      	lsls	r3, r3, #2
    719a:	440b      	add	r3, r1
    719c:	330c      	adds	r3, #12
    719e:	681b      	ldr	r3, [r3, #0]
    71a0:	461a      	mov	r2, r3
    71a2:	2100      	movs	r1, #0
    71a4:	6838      	ldr	r0, [r7, #0]
    71a6:	4b65      	ldr	r3, [pc, #404]	; (733c <_timer_init+0x28c>)
    71a8:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    71aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71ae:	495f      	ldr	r1, [pc, #380]	; (732c <_timer_init+0x27c>)
    71b0:	4613      	mov	r3, r2
    71b2:	009b      	lsls	r3, r3, #2
    71b4:	4413      	add	r3, r2
    71b6:	009b      	lsls	r3, r3, #2
    71b8:	440b      	add	r3, r1
    71ba:	3310      	adds	r3, #16
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	461a      	mov	r2, r3
    71c0:	2101      	movs	r1, #1
    71c2:	6838      	ldr	r0, [r7, #0]
    71c4:	4b5d      	ldr	r3, [pc, #372]	; (733c <_timer_init+0x28c>)
    71c6:	4798      	blx	r3
    71c8:	e06a      	b.n	72a0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    71ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71ce:	4957      	ldr	r1, [pc, #348]	; (732c <_timer_init+0x27c>)
    71d0:	4613      	mov	r3, r2
    71d2:	009b      	lsls	r3, r3, #2
    71d4:	4413      	add	r3, r2
    71d6:	009b      	lsls	r3, r3, #2
    71d8:	440b      	add	r3, r1
    71da:	3304      	adds	r3, #4
    71dc:	681b      	ldr	r3, [r3, #0]
    71de:	f003 030c 	and.w	r3, r3, #12
    71e2:	2b00      	cmp	r3, #0
    71e4:	d120      	bne.n	7228 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    71e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71ea:	4950      	ldr	r1, [pc, #320]	; (732c <_timer_init+0x27c>)
    71ec:	4613      	mov	r3, r2
    71ee:	009b      	lsls	r3, r3, #2
    71f0:	4413      	add	r3, r2
    71f2:	009b      	lsls	r3, r3, #2
    71f4:	440b      	add	r3, r1
    71f6:	330c      	adds	r3, #12
    71f8:	681b      	ldr	r3, [r3, #0]
    71fa:	b29b      	uxth	r3, r3
    71fc:	461a      	mov	r2, r3
    71fe:	2100      	movs	r1, #0
    7200:	6838      	ldr	r0, [r7, #0]
    7202:	4b4f      	ldr	r3, [pc, #316]	; (7340 <_timer_init+0x290>)
    7204:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7206:	f997 200f 	ldrsb.w	r2, [r7, #15]
    720a:	4948      	ldr	r1, [pc, #288]	; (732c <_timer_init+0x27c>)
    720c:	4613      	mov	r3, r2
    720e:	009b      	lsls	r3, r3, #2
    7210:	4413      	add	r3, r2
    7212:	009b      	lsls	r3, r3, #2
    7214:	440b      	add	r3, r1
    7216:	3310      	adds	r3, #16
    7218:	681b      	ldr	r3, [r3, #0]
    721a:	b29b      	uxth	r3, r3
    721c:	461a      	mov	r2, r3
    721e:	2101      	movs	r1, #1
    7220:	6838      	ldr	r0, [r7, #0]
    7222:	4b47      	ldr	r3, [pc, #284]	; (7340 <_timer_init+0x290>)
    7224:	4798      	blx	r3
    7226:	e03b      	b.n	72a0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7228:	f997 200f 	ldrsb.w	r2, [r7, #15]
    722c:	493f      	ldr	r1, [pc, #252]	; (732c <_timer_init+0x27c>)
    722e:	4613      	mov	r3, r2
    7230:	009b      	lsls	r3, r3, #2
    7232:	4413      	add	r3, r2
    7234:	009b      	lsls	r3, r3, #2
    7236:	440b      	add	r3, r1
    7238:	3304      	adds	r3, #4
    723a:	681b      	ldr	r3, [r3, #0]
    723c:	f003 030c 	and.w	r3, r3, #12
    7240:	2b04      	cmp	r3, #4
    7242:	d12d      	bne.n	72a0 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7244:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7248:	4938      	ldr	r1, [pc, #224]	; (732c <_timer_init+0x27c>)
    724a:	4613      	mov	r3, r2
    724c:	009b      	lsls	r3, r3, #2
    724e:	4413      	add	r3, r2
    7250:	009b      	lsls	r3, r3, #2
    7252:	440b      	add	r3, r1
    7254:	330c      	adds	r3, #12
    7256:	681b      	ldr	r3, [r3, #0]
    7258:	b2db      	uxtb	r3, r3
    725a:	461a      	mov	r2, r3
    725c:	2100      	movs	r1, #0
    725e:	6838      	ldr	r0, [r7, #0]
    7260:	4b38      	ldr	r3, [pc, #224]	; (7344 <_timer_init+0x294>)
    7262:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7264:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7268:	4930      	ldr	r1, [pc, #192]	; (732c <_timer_init+0x27c>)
    726a:	4613      	mov	r3, r2
    726c:	009b      	lsls	r3, r3, #2
    726e:	4413      	add	r3, r2
    7270:	009b      	lsls	r3, r3, #2
    7272:	440b      	add	r3, r1
    7274:	3310      	adds	r3, #16
    7276:	681b      	ldr	r3, [r3, #0]
    7278:	b2db      	uxtb	r3, r3
    727a:	461a      	mov	r2, r3
    727c:	2101      	movs	r1, #1
    727e:	6838      	ldr	r0, [r7, #0]
    7280:	4b30      	ldr	r3, [pc, #192]	; (7344 <_timer_init+0x294>)
    7282:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7284:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7288:	4928      	ldr	r1, [pc, #160]	; (732c <_timer_init+0x27c>)
    728a:	4613      	mov	r3, r2
    728c:	009b      	lsls	r3, r3, #2
    728e:	4413      	add	r3, r2
    7290:	009b      	lsls	r3, r3, #2
    7292:	440b      	add	r3, r1
    7294:	330b      	adds	r3, #11
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	4619      	mov	r1, r3
    729a:	6838      	ldr	r0, [r7, #0]
    729c:	4b2a      	ldr	r3, [pc, #168]	; (7348 <_timer_init+0x298>)
    729e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    72a0:	6838      	ldr	r0, [r7, #0]
    72a2:	4b2a      	ldr	r3, [pc, #168]	; (734c <_timer_init+0x29c>)
    72a4:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    72a6:	6879      	ldr	r1, [r7, #4]
    72a8:	6838      	ldr	r0, [r7, #0]
    72aa:	4b29      	ldr	r3, [pc, #164]	; (7350 <_timer_init+0x2a0>)
    72ac:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    72ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72b2:	491e      	ldr	r1, [pc, #120]	; (732c <_timer_init+0x27c>)
    72b4:	4613      	mov	r3, r2
    72b6:	009b      	lsls	r3, r3, #2
    72b8:	4413      	add	r3, r2
    72ba:	009b      	lsls	r3, r3, #2
    72bc:	440b      	add	r3, r1
    72be:	3302      	adds	r3, #2
    72c0:	f9b3 3000 	ldrsh.w	r3, [r3]
    72c4:	4618      	mov	r0, r3
    72c6:	4b23      	ldr	r3, [pc, #140]	; (7354 <_timer_init+0x2a4>)
    72c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    72ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72ce:	4917      	ldr	r1, [pc, #92]	; (732c <_timer_init+0x27c>)
    72d0:	4613      	mov	r3, r2
    72d2:	009b      	lsls	r3, r3, #2
    72d4:	4413      	add	r3, r2
    72d6:	009b      	lsls	r3, r3, #2
    72d8:	440b      	add	r3, r1
    72da:	3302      	adds	r3, #2
    72dc:	f9b3 3000 	ldrsh.w	r3, [r3]
    72e0:	4618      	mov	r0, r3
    72e2:	4b1d      	ldr	r3, [pc, #116]	; (7358 <_timer_init+0x2a8>)
    72e4:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    72e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72ea:	4910      	ldr	r1, [pc, #64]	; (732c <_timer_init+0x27c>)
    72ec:	4613      	mov	r3, r2
    72ee:	009b      	lsls	r3, r3, #2
    72f0:	4413      	add	r3, r2
    72f2:	009b      	lsls	r3, r3, #2
    72f4:	440b      	add	r3, r1
    72f6:	3302      	adds	r3, #2
    72f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    72fc:	4618      	mov	r0, r3
    72fe:	4b17      	ldr	r3, [pc, #92]	; (735c <_timer_init+0x2ac>)
    7300:	4798      	blx	r3

	return ERR_NONE;
    7302:	2300      	movs	r3, #0
}
    7304:	4618      	mov	r0, r3
    7306:	3710      	adds	r7, #16
    7308:	46bd      	mov	sp, r7
    730a:	bd80      	pop	{r7, pc}
    730c:	000077cd 	.word	0x000077cd
    7310:	0000d6fc 	.word	0x0000d6fc
    7314:	000030c9 	.word	0x000030c9
    7318:	00006df5 	.word	0x00006df5
    731c:	00006f45 	.word	0x00006f45
    7320:	00006f1d 	.word	0x00006f1d
    7324:	00006dd1 	.word	0x00006dd1
    7328:	00006f75 	.word	0x00006f75
    732c:	20000030 	.word	0x20000030
    7330:	00006fd5 	.word	0x00006fd5
    7334:	00006f99 	.word	0x00006f99
    7338:	00006fb7 	.word	0x00006fb7
    733c:	00007081 	.word	0x00007081
    7340:	0000704d 	.word	0x0000704d
    7344:	0000701d 	.word	0x0000701d
    7348:	00006ff5 	.word	0x00006ff5
    734c:	00006e79 	.word	0x00006e79
    7350:	00007835 	.word	0x00007835
    7354:	00006d51 	.word	0x00006d51
    7358:	00006d95 	.word	0x00006d95
    735c:	00006d15 	.word	0x00006d15

00007360 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7360:	b580      	push	{r7, lr}
    7362:	b084      	sub	sp, #16
    7364:	af00      	add	r7, sp, #0
    7366:	6078      	str	r0, [r7, #4]
    7368:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    736a:	6838      	ldr	r0, [r7, #0]
    736c:	4b73      	ldr	r3, [pc, #460]	; (753c <_pwm_init+0x1dc>)
    736e:	4798      	blx	r3
    7370:	4603      	mov	r3, r0
    7372:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	683a      	ldr	r2, [r7, #0]
    7378:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    737a:	2101      	movs	r1, #1
    737c:	6838      	ldr	r0, [r7, #0]
    737e:	4b70      	ldr	r3, [pc, #448]	; (7540 <_pwm_init+0x1e0>)
    7380:	4798      	blx	r3
    7382:	4603      	mov	r3, r0
    7384:	f083 0301 	eor.w	r3, r3, #1
    7388:	b2db      	uxtb	r3, r3
    738a:	2b00      	cmp	r3, #0
    738c:	d011      	beq.n	73b2 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    738e:	2102      	movs	r1, #2
    7390:	6838      	ldr	r0, [r7, #0]
    7392:	4b6c      	ldr	r3, [pc, #432]	; (7544 <_pwm_init+0x1e4>)
    7394:	4798      	blx	r3
    7396:	4603      	mov	r3, r0
    7398:	2b00      	cmp	r3, #0
    739a:	d006      	beq.n	73aa <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    739c:	6838      	ldr	r0, [r7, #0]
    739e:	4b6a      	ldr	r3, [pc, #424]	; (7548 <_pwm_init+0x1e8>)
    73a0:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    73a2:	2102      	movs	r1, #2
    73a4:	6838      	ldr	r0, [r7, #0]
    73a6:	4b69      	ldr	r3, [pc, #420]	; (754c <_pwm_init+0x1ec>)
    73a8:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    73aa:	2101      	movs	r1, #1
    73ac:	6838      	ldr	r0, [r7, #0]
    73ae:	4b68      	ldr	r3, [pc, #416]	; (7550 <_pwm_init+0x1f0>)
    73b0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    73b2:	2101      	movs	r1, #1
    73b4:	6838      	ldr	r0, [r7, #0]
    73b6:	4b65      	ldr	r3, [pc, #404]	; (754c <_pwm_init+0x1ec>)
    73b8:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    73ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73be:	4965      	ldr	r1, [pc, #404]	; (7554 <_pwm_init+0x1f4>)
    73c0:	4613      	mov	r3, r2
    73c2:	009b      	lsls	r3, r3, #2
    73c4:	4413      	add	r3, r2
    73c6:	009b      	lsls	r3, r3, #2
    73c8:	440b      	add	r3, r1
    73ca:	3304      	adds	r3, #4
    73cc:	681b      	ldr	r3, [r3, #0]
    73ce:	4619      	mov	r1, r3
    73d0:	6838      	ldr	r0, [r7, #0]
    73d2:	4b5f      	ldr	r3, [pc, #380]	; (7550 <_pwm_init+0x1f0>)
    73d4:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    73d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73da:	495e      	ldr	r1, [pc, #376]	; (7554 <_pwm_init+0x1f4>)
    73dc:	4613      	mov	r3, r2
    73de:	009b      	lsls	r3, r3, #2
    73e0:	4413      	add	r3, r2
    73e2:	009b      	lsls	r3, r3, #2
    73e4:	440b      	add	r3, r1
    73e6:	330a      	adds	r3, #10
    73e8:	781b      	ldrb	r3, [r3, #0]
    73ea:	4619      	mov	r1, r3
    73ec:	6838      	ldr	r0, [r7, #0]
    73ee:	4b5a      	ldr	r3, [pc, #360]	; (7558 <_pwm_init+0x1f8>)
    73f0:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    73f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73f6:	4957      	ldr	r1, [pc, #348]	; (7554 <_pwm_init+0x1f4>)
    73f8:	4613      	mov	r3, r2
    73fa:	009b      	lsls	r3, r3, #2
    73fc:	4413      	add	r3, r2
    73fe:	009b      	lsls	r3, r3, #2
    7400:	440b      	add	r3, r1
    7402:	3308      	adds	r3, #8
    7404:	881b      	ldrh	r3, [r3, #0]
    7406:	4619      	mov	r1, r3
    7408:	6838      	ldr	r0, [r7, #0]
    740a:	4b54      	ldr	r3, [pc, #336]	; (755c <_pwm_init+0x1fc>)
    740c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    740e:	2103      	movs	r1, #3
    7410:	6838      	ldr	r0, [r7, #0]
    7412:	4b53      	ldr	r3, [pc, #332]	; (7560 <_pwm_init+0x200>)
    7414:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7416:	f997 200f 	ldrsb.w	r2, [r7, #15]
    741a:	494e      	ldr	r1, [pc, #312]	; (7554 <_pwm_init+0x1f4>)
    741c:	4613      	mov	r3, r2
    741e:	009b      	lsls	r3, r3, #2
    7420:	4413      	add	r3, r2
    7422:	009b      	lsls	r3, r3, #2
    7424:	440b      	add	r3, r1
    7426:	3304      	adds	r3, #4
    7428:	681b      	ldr	r3, [r3, #0]
    742a:	f003 030c 	and.w	r3, r3, #12
    742e:	2b08      	cmp	r3, #8
    7430:	d11e      	bne.n	7470 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7432:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7436:	4947      	ldr	r1, [pc, #284]	; (7554 <_pwm_init+0x1f4>)
    7438:	4613      	mov	r3, r2
    743a:	009b      	lsls	r3, r3, #2
    743c:	4413      	add	r3, r2
    743e:	009b      	lsls	r3, r3, #2
    7440:	440b      	add	r3, r1
    7442:	330c      	adds	r3, #12
    7444:	681b      	ldr	r3, [r3, #0]
    7446:	461a      	mov	r2, r3
    7448:	2100      	movs	r1, #0
    744a:	6838      	ldr	r0, [r7, #0]
    744c:	4b45      	ldr	r3, [pc, #276]	; (7564 <_pwm_init+0x204>)
    744e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7450:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7454:	493f      	ldr	r1, [pc, #252]	; (7554 <_pwm_init+0x1f4>)
    7456:	4613      	mov	r3, r2
    7458:	009b      	lsls	r3, r3, #2
    745a:	4413      	add	r3, r2
    745c:	009b      	lsls	r3, r3, #2
    745e:	440b      	add	r3, r1
    7460:	3310      	adds	r3, #16
    7462:	681b      	ldr	r3, [r3, #0]
    7464:	461a      	mov	r2, r3
    7466:	2101      	movs	r1, #1
    7468:	6838      	ldr	r0, [r7, #0]
    746a:	4b3e      	ldr	r3, [pc, #248]	; (7564 <_pwm_init+0x204>)
    746c:	4798      	blx	r3
    746e:	e031      	b.n	74d4 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7470:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7474:	4937      	ldr	r1, [pc, #220]	; (7554 <_pwm_init+0x1f4>)
    7476:	4613      	mov	r3, r2
    7478:	009b      	lsls	r3, r3, #2
    747a:	4413      	add	r3, r2
    747c:	009b      	lsls	r3, r3, #2
    747e:	440b      	add	r3, r1
    7480:	3304      	adds	r3, #4
    7482:	681b      	ldr	r3, [r3, #0]
    7484:	f003 030c 	and.w	r3, r3, #12
    7488:	2b00      	cmp	r3, #0
    748a:	d120      	bne.n	74ce <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    748c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7490:	4930      	ldr	r1, [pc, #192]	; (7554 <_pwm_init+0x1f4>)
    7492:	4613      	mov	r3, r2
    7494:	009b      	lsls	r3, r3, #2
    7496:	4413      	add	r3, r2
    7498:	009b      	lsls	r3, r3, #2
    749a:	440b      	add	r3, r1
    749c:	330c      	adds	r3, #12
    749e:	681b      	ldr	r3, [r3, #0]
    74a0:	b29b      	uxth	r3, r3
    74a2:	461a      	mov	r2, r3
    74a4:	2100      	movs	r1, #0
    74a6:	6838      	ldr	r0, [r7, #0]
    74a8:	4b2f      	ldr	r3, [pc, #188]	; (7568 <_pwm_init+0x208>)
    74aa:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    74ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74b0:	4928      	ldr	r1, [pc, #160]	; (7554 <_pwm_init+0x1f4>)
    74b2:	4613      	mov	r3, r2
    74b4:	009b      	lsls	r3, r3, #2
    74b6:	4413      	add	r3, r2
    74b8:	009b      	lsls	r3, r3, #2
    74ba:	440b      	add	r3, r1
    74bc:	3310      	adds	r3, #16
    74be:	681b      	ldr	r3, [r3, #0]
    74c0:	b29b      	uxth	r3, r3
    74c2:	461a      	mov	r2, r3
    74c4:	2101      	movs	r1, #1
    74c6:	6838      	ldr	r0, [r7, #0]
    74c8:	4b27      	ldr	r3, [pc, #156]	; (7568 <_pwm_init+0x208>)
    74ca:	4798      	blx	r3
    74cc:	e002      	b.n	74d4 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    74ce:	f04f 33ff 	mov.w	r3, #4294967295
    74d2:	e02e      	b.n	7532 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    74d4:	6879      	ldr	r1, [r7, #4]
    74d6:	6838      	ldr	r0, [r7, #0]
    74d8:	4b24      	ldr	r3, [pc, #144]	; (756c <_pwm_init+0x20c>)
    74da:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    74dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74e0:	491c      	ldr	r1, [pc, #112]	; (7554 <_pwm_init+0x1f4>)
    74e2:	4613      	mov	r3, r2
    74e4:	009b      	lsls	r3, r3, #2
    74e6:	4413      	add	r3, r2
    74e8:	009b      	lsls	r3, r3, #2
    74ea:	440b      	add	r3, r1
    74ec:	3302      	adds	r3, #2
    74ee:	f9b3 3000 	ldrsh.w	r3, [r3]
    74f2:	4618      	mov	r0, r3
    74f4:	4b1e      	ldr	r3, [pc, #120]	; (7570 <_pwm_init+0x210>)
    74f6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    74f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74fc:	4915      	ldr	r1, [pc, #84]	; (7554 <_pwm_init+0x1f4>)
    74fe:	4613      	mov	r3, r2
    7500:	009b      	lsls	r3, r3, #2
    7502:	4413      	add	r3, r2
    7504:	009b      	lsls	r3, r3, #2
    7506:	440b      	add	r3, r1
    7508:	3302      	adds	r3, #2
    750a:	f9b3 3000 	ldrsh.w	r3, [r3]
    750e:	4618      	mov	r0, r3
    7510:	4b18      	ldr	r3, [pc, #96]	; (7574 <_pwm_init+0x214>)
    7512:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7514:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7518:	490e      	ldr	r1, [pc, #56]	; (7554 <_pwm_init+0x1f4>)
    751a:	4613      	mov	r3, r2
    751c:	009b      	lsls	r3, r3, #2
    751e:	4413      	add	r3, r2
    7520:	009b      	lsls	r3, r3, #2
    7522:	440b      	add	r3, r1
    7524:	3302      	adds	r3, #2
    7526:	f9b3 3000 	ldrsh.w	r3, [r3]
    752a:	4618      	mov	r0, r3
    752c:	4b12      	ldr	r3, [pc, #72]	; (7578 <_pwm_init+0x218>)
    752e:	4798      	blx	r3

	return 0;
    7530:	2300      	movs	r3, #0
}
    7532:	4618      	mov	r0, r3
    7534:	3710      	adds	r7, #16
    7536:	46bd      	mov	sp, r7
    7538:	bd80      	pop	{r7, pc}
    753a:	bf00      	nop
    753c:	000077cd 	.word	0x000077cd
    7540:	00006df5 	.word	0x00006df5
    7544:	00006f45 	.word	0x00006f45
    7548:	00006f1d 	.word	0x00006f1d
    754c:	00006dd1 	.word	0x00006dd1
    7550:	00006f75 	.word	0x00006f75
    7554:	20000030 	.word	0x20000030
    7558:	00006fd5 	.word	0x00006fd5
    755c:	00006f99 	.word	0x00006f99
    7560:	00006fb7 	.word	0x00006fb7
    7564:	00007081 	.word	0x00007081
    7568:	0000704d 	.word	0x0000704d
    756c:	00007835 	.word	0x00007835
    7570:	00006d51 	.word	0x00006d51
    7574:	00006d95 	.word	0x00006d95
    7578:	00006d15 	.word	0x00006d15

0000757c <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    757c:	b580      	push	{r7, lr}
    757e:	b082      	sub	sp, #8
    7580:	af00      	add	r7, sp, #0
    7582:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7584:	687b      	ldr	r3, [r7, #4]
    7586:	68db      	ldr	r3, [r3, #12]
    7588:	4618      	mov	r0, r3
    758a:	4b03      	ldr	r3, [pc, #12]	; (7598 <_timer_start+0x1c>)
    758c:	4798      	blx	r3
}
    758e:	bf00      	nop
    7590:	3708      	adds	r7, #8
    7592:	46bd      	mov	sp, r7
    7594:	bd80      	pop	{r7, pc}
    7596:	bf00      	nop
    7598:	00006ebd 	.word	0x00006ebd

0000759c <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    759c:	b580      	push	{r7, lr}
    759e:	b082      	sub	sp, #8
    75a0:	af00      	add	r7, sp, #0
    75a2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	691b      	ldr	r3, [r3, #16]
    75a8:	4618      	mov	r0, r3
    75aa:	4b03      	ldr	r3, [pc, #12]	; (75b8 <_pwm_enable+0x1c>)
    75ac:	4798      	blx	r3
}
    75ae:	bf00      	nop
    75b0:	3708      	adds	r7, #8
    75b2:	46bd      	mov	sp, r7
    75b4:	bd80      	pop	{r7, pc}
    75b6:	bf00      	nop
    75b8:	00006ebd 	.word	0x00006ebd

000075bc <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    75bc:	b580      	push	{r7, lr}
    75be:	b082      	sub	sp, #8
    75c0:	af00      	add	r7, sp, #0
    75c2:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	68db      	ldr	r3, [r3, #12]
    75c8:	4618      	mov	r0, r3
    75ca:	4b03      	ldr	r3, [pc, #12]	; (75d8 <_timer_stop+0x1c>)
    75cc:	4798      	blx	r3
}
    75ce:	bf00      	nop
    75d0:	3708      	adds	r7, #8
    75d2:	46bd      	mov	sp, r7
    75d4:	bd80      	pop	{r7, pc}
    75d6:	bf00      	nop
    75d8:	00006f1d 	.word	0x00006f1d

000075dc <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    75dc:	b580      	push	{r7, lr}
    75de:	b082      	sub	sp, #8
    75e0:	af00      	add	r7, sp, #0
    75e2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    75e4:	687b      	ldr	r3, [r7, #4]
    75e6:	68db      	ldr	r3, [r3, #12]
    75e8:	4618      	mov	r0, r3
    75ea:	4b03      	ldr	r3, [pc, #12]	; (75f8 <_timer_is_started+0x1c>)
    75ec:	4798      	blx	r3
    75ee:	4603      	mov	r3, r0
}
    75f0:	4618      	mov	r0, r3
    75f2:	3708      	adds	r7, #8
    75f4:	46bd      	mov	sp, r7
    75f6:	bd80      	pop	{r7, pc}
    75f8:	00006ee5 	.word	0x00006ee5

000075fc <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    75fc:	b580      	push	{r7, lr}
    75fe:	b082      	sub	sp, #8
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	691b      	ldr	r3, [r3, #16]
    7608:	4618      	mov	r0, r3
    760a:	4b03      	ldr	r3, [pc, #12]	; (7618 <_pwm_is_enabled+0x1c>)
    760c:	4798      	blx	r3
    760e:	4603      	mov	r3, r0
}
    7610:	4618      	mov	r0, r3
    7612:	3708      	adds	r7, #8
    7614:	46bd      	mov	sp, r7
    7616:	bd80      	pop	{r7, pc}
    7618:	00006ee5 	.word	0x00006ee5

0000761c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    761c:	b480      	push	{r7}
    761e:	af00      	add	r7, sp, #0
	return NULL;
    7620:	2300      	movs	r3, #0
}
    7622:	4618      	mov	r0, r3
    7624:	46bd      	mov	sp, r7
    7626:	f85d 7b04 	ldr.w	r7, [sp], #4
    762a:	4770      	bx	lr

0000762c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    762c:	b480      	push	{r7}
    762e:	af00      	add	r7, sp, #0
	return NULL;
    7630:	2300      	movs	r3, #0
}
    7632:	4618      	mov	r0, r3
    7634:	46bd      	mov	sp, r7
    7636:	f85d 7b04 	ldr.w	r7, [sp], #4
    763a:	4770      	bx	lr

0000763c <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    763c:	b580      	push	{r7, lr}
    763e:	b084      	sub	sp, #16
    7640:	af00      	add	r7, sp, #0
    7642:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	68db      	ldr	r3, [r3, #12]
    7648:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    764a:	68f8      	ldr	r0, [r7, #12]
    764c:	4b0e      	ldr	r3, [pc, #56]	; (7688 <_timer_set_irq+0x4c>)
    764e:	4798      	blx	r3
    7650:	4603      	mov	r3, r0
    7652:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7654:	f240 12a3 	movw	r2, #419	; 0x1a3
    7658:	490c      	ldr	r1, [pc, #48]	; (768c <_timer_set_irq+0x50>)
    765a:	2001      	movs	r0, #1
    765c:	4b0c      	ldr	r3, [pc, #48]	; (7690 <_timer_set_irq+0x54>)
    765e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7660:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7664:	490b      	ldr	r1, [pc, #44]	; (7694 <_timer_set_irq+0x58>)
    7666:	4613      	mov	r3, r2
    7668:	009b      	lsls	r3, r3, #2
    766a:	4413      	add	r3, r2
    766c:	009b      	lsls	r3, r3, #2
    766e:	440b      	add	r3, r1
    7670:	3302      	adds	r3, #2
    7672:	f9b3 3000 	ldrsh.w	r3, [r3]
    7676:	b2db      	uxtb	r3, r3
    7678:	4618      	mov	r0, r3
    767a:	4b07      	ldr	r3, [pc, #28]	; (7698 <_timer_set_irq+0x5c>)
    767c:	4798      	blx	r3
}
    767e:	bf00      	nop
    7680:	3710      	adds	r7, #16
    7682:	46bd      	mov	sp, r7
    7684:	bd80      	pop	{r7, pc}
    7686:	bf00      	nop
    7688:	000077cd 	.word	0x000077cd
    768c:	0000d6fc 	.word	0x0000d6fc
    7690:	000030c9 	.word	0x000030c9
    7694:	20000030 	.word	0x20000030
    7698:	00003915 	.word	0x00003915

0000769c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    769c:	b580      	push	{r7, lr}
    769e:	b084      	sub	sp, #16
    76a0:	af00      	add	r7, sp, #0
    76a2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	68db      	ldr	r3, [r3, #12]
    76a8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    76aa:	68f8      	ldr	r0, [r7, #12]
    76ac:	4b07      	ldr	r3, [pc, #28]	; (76cc <tc_interrupt_handler+0x30>)
    76ae:	4798      	blx	r3
    76b0:	4603      	mov	r3, r0
    76b2:	2b00      	cmp	r3, #0
    76b4:	d006      	beq.n	76c4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    76b6:	68f8      	ldr	r0, [r7, #12]
    76b8:	4b05      	ldr	r3, [pc, #20]	; (76d0 <tc_interrupt_handler+0x34>)
    76ba:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	681b      	ldr	r3, [r3, #0]
    76c0:	6878      	ldr	r0, [r7, #4]
    76c2:	4798      	blx	r3
	}
}
    76c4:	bf00      	nop
    76c6:	3710      	adds	r7, #16
    76c8:	46bd      	mov	sp, r7
    76ca:	bd80      	pop	{r7, pc}
    76cc:	00006e1d 	.word	0x00006e1d
    76d0:	00006e45 	.word	0x00006e45

000076d4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    76d4:	b580      	push	{r7, lr}
    76d6:	b084      	sub	sp, #16
    76d8:	af00      	add	r7, sp, #0
    76da:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	691b      	ldr	r3, [r3, #16]
    76e0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    76e2:	68f8      	ldr	r0, [r7, #12]
    76e4:	4b12      	ldr	r3, [pc, #72]	; (7730 <tc_pwm_interrupt_handler+0x5c>)
    76e6:	4798      	blx	r3
    76e8:	4603      	mov	r3, r0
    76ea:	2b00      	cmp	r3, #0
    76ec:	d00a      	beq.n	7704 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    76ee:	68f8      	ldr	r0, [r7, #12]
    76f0:	4b10      	ldr	r3, [pc, #64]	; (7734 <tc_pwm_interrupt_handler+0x60>)
    76f2:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    76f4:	687b      	ldr	r3, [r7, #4]
    76f6:	681b      	ldr	r3, [r3, #0]
    76f8:	2b00      	cmp	r3, #0
    76fa:	d003      	beq.n	7704 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    76fc:	687b      	ldr	r3, [r7, #4]
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	6878      	ldr	r0, [r7, #4]
    7702:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7704:	68f8      	ldr	r0, [r7, #12]
    7706:	4b0c      	ldr	r3, [pc, #48]	; (7738 <tc_pwm_interrupt_handler+0x64>)
    7708:	4798      	blx	r3
    770a:	4603      	mov	r3, r0
    770c:	2b00      	cmp	r3, #0
    770e:	d00a      	beq.n	7726 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7710:	68f8      	ldr	r0, [r7, #12]
    7712:	4b0a      	ldr	r3, [pc, #40]	; (773c <tc_pwm_interrupt_handler+0x68>)
    7714:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7716:	687b      	ldr	r3, [r7, #4]
    7718:	685b      	ldr	r3, [r3, #4]
    771a:	2b00      	cmp	r3, #0
    771c:	d003      	beq.n	7726 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	685b      	ldr	r3, [r3, #4]
    7722:	6878      	ldr	r0, [r7, #4]
    7724:	4798      	blx	r3
		}
	}
}
    7726:	bf00      	nop
    7728:	3710      	adds	r7, #16
    772a:	46bd      	mov	sp, r7
    772c:	bd80      	pop	{r7, pc}
    772e:	bf00      	nop
    7730:	00006e1d 	.word	0x00006e1d
    7734:	00006e45 	.word	0x00006e45
    7738:	00006e93 	.word	0x00006e93
    773c:	00006e5f 	.word	0x00006e5f

00007740 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7740:	b580      	push	{r7, lr}
    7742:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7744:	4b03      	ldr	r3, [pc, #12]	; (7754 <TC0_Handler+0x14>)
    7746:	681b      	ldr	r3, [r3, #0]
    7748:	4618      	mov	r0, r3
    774a:	4b03      	ldr	r3, [pc, #12]	; (7758 <TC0_Handler+0x18>)
    774c:	4798      	blx	r3
}
    774e:	bf00      	nop
    7750:	bd80      	pop	{r7, pc}
    7752:	bf00      	nop
    7754:	200006c8 	.word	0x200006c8
    7758:	0000769d 	.word	0x0000769d

0000775c <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    775c:	b580      	push	{r7, lr}
    775e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    7760:	4b03      	ldr	r3, [pc, #12]	; (7770 <TC1_Handler+0x14>)
    7762:	681b      	ldr	r3, [r3, #0]
    7764:	4618      	mov	r0, r3
    7766:	4b03      	ldr	r3, [pc, #12]	; (7774 <TC1_Handler+0x18>)
    7768:	4798      	blx	r3
}
    776a:	bf00      	nop
    776c:	bd80      	pop	{r7, pc}
    776e:	bf00      	nop
    7770:	200006cc 	.word	0x200006cc
    7774:	0000769d 	.word	0x0000769d

00007778 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7778:	b580      	push	{r7, lr}
    777a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    777c:	4b03      	ldr	r3, [pc, #12]	; (778c <TC2_Handler+0x14>)
    777e:	681b      	ldr	r3, [r3, #0]
    7780:	4618      	mov	r0, r3
    7782:	4b03      	ldr	r3, [pc, #12]	; (7790 <TC2_Handler+0x18>)
    7784:	4798      	blx	r3
}
    7786:	bf00      	nop
    7788:	bd80      	pop	{r7, pc}
    778a:	bf00      	nop
    778c:	200006d0 	.word	0x200006d0
    7790:	0000769d 	.word	0x0000769d

00007794 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    7794:	b580      	push	{r7, lr}
    7796:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    7798:	4b03      	ldr	r3, [pc, #12]	; (77a8 <TC3_Handler+0x14>)
    779a:	681b      	ldr	r3, [r3, #0]
    779c:	4618      	mov	r0, r3
    779e:	4b03      	ldr	r3, [pc, #12]	; (77ac <TC3_Handler+0x18>)
    77a0:	4798      	blx	r3
}
    77a2:	bf00      	nop
    77a4:	bd80      	pop	{r7, pc}
    77a6:	bf00      	nop
    77a8:	200006d4 	.word	0x200006d4
    77ac:	0000769d 	.word	0x0000769d

000077b0 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    77b0:	b580      	push	{r7, lr}
    77b2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    77b4:	4b03      	ldr	r3, [pc, #12]	; (77c4 <TC7_Handler+0x14>)
    77b6:	681b      	ldr	r3, [r3, #0]
    77b8:	4618      	mov	r0, r3
    77ba:	4b03      	ldr	r3, [pc, #12]	; (77c8 <TC7_Handler+0x18>)
    77bc:	4798      	blx	r3
}
    77be:	bf00      	nop
    77c0:	bd80      	pop	{r7, pc}
    77c2:	bf00      	nop
    77c4:	200006d8 	.word	0x200006d8
    77c8:	000076d5 	.word	0x000076d5

000077cc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b084      	sub	sp, #16
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    77d4:	6878      	ldr	r0, [r7, #4]
    77d6:	4b13      	ldr	r3, [pc, #76]	; (7824 <get_tc_index+0x58>)
    77d8:	4798      	blx	r3
    77da:	4603      	mov	r3, r0
    77dc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    77de:	2300      	movs	r3, #0
    77e0:	73fb      	strb	r3, [r7, #15]
    77e2:	e010      	b.n	7806 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    77e4:	7bfa      	ldrb	r2, [r7, #15]
    77e6:	4910      	ldr	r1, [pc, #64]	; (7828 <get_tc_index+0x5c>)
    77e8:	4613      	mov	r3, r2
    77ea:	009b      	lsls	r3, r3, #2
    77ec:	4413      	add	r3, r2
    77ee:	009b      	lsls	r3, r3, #2
    77f0:	440b      	add	r3, r1
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	7bba      	ldrb	r2, [r7, #14]
    77f6:	429a      	cmp	r2, r3
    77f8:	d102      	bne.n	7800 <get_tc_index+0x34>
			return i;
    77fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    77fe:	e00d      	b.n	781c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7800:	7bfb      	ldrb	r3, [r7, #15]
    7802:	3301      	adds	r3, #1
    7804:	73fb      	strb	r3, [r7, #15]
    7806:	7bfb      	ldrb	r3, [r7, #15]
    7808:	2b04      	cmp	r3, #4
    780a:	d9eb      	bls.n	77e4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    780c:	f240 2206 	movw	r2, #518	; 0x206
    7810:	4906      	ldr	r1, [pc, #24]	; (782c <get_tc_index+0x60>)
    7812:	2000      	movs	r0, #0
    7814:	4b06      	ldr	r3, [pc, #24]	; (7830 <get_tc_index+0x64>)
    7816:	4798      	blx	r3
	return -1;
    7818:	f04f 33ff 	mov.w	r3, #4294967295
}
    781c:	4618      	mov	r0, r3
    781e:	3710      	adds	r7, #16
    7820:	46bd      	mov	sp, r7
    7822:	bd80      	pop	{r7, pc}
    7824:	000078b9 	.word	0x000078b9
    7828:	20000030 	.word	0x20000030
    782c:	0000d6fc 	.word	0x0000d6fc
    7830:	000030c9 	.word	0x000030c9

00007834 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7834:	b480      	push	{r7}
    7836:	b083      	sub	sp, #12
    7838:	af00      	add	r7, sp, #0
    783a:	6078      	str	r0, [r7, #4]
    783c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    783e:	687b      	ldr	r3, [r7, #4]
    7840:	4a13      	ldr	r2, [pc, #76]	; (7890 <_tc_init_irq_param+0x5c>)
    7842:	4293      	cmp	r3, r2
    7844:	d102      	bne.n	784c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7846:	4a13      	ldr	r2, [pc, #76]	; (7894 <_tc_init_irq_param+0x60>)
    7848:	683b      	ldr	r3, [r7, #0]
    784a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    784c:	687b      	ldr	r3, [r7, #4]
    784e:	4a12      	ldr	r2, [pc, #72]	; (7898 <_tc_init_irq_param+0x64>)
    7850:	4293      	cmp	r3, r2
    7852:	d102      	bne.n	785a <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    7854:	4a11      	ldr	r2, [pc, #68]	; (789c <_tc_init_irq_param+0x68>)
    7856:	683b      	ldr	r3, [r7, #0]
    7858:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    785a:	687b      	ldr	r3, [r7, #4]
    785c:	4a10      	ldr	r2, [pc, #64]	; (78a0 <_tc_init_irq_param+0x6c>)
    785e:	4293      	cmp	r3, r2
    7860:	d102      	bne.n	7868 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    7862:	4a10      	ldr	r2, [pc, #64]	; (78a4 <_tc_init_irq_param+0x70>)
    7864:	683b      	ldr	r3, [r7, #0]
    7866:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7868:	687b      	ldr	r3, [r7, #4]
    786a:	4a0f      	ldr	r2, [pc, #60]	; (78a8 <_tc_init_irq_param+0x74>)
    786c:	4293      	cmp	r3, r2
    786e:	d102      	bne.n	7876 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    7870:	4a0e      	ldr	r2, [pc, #56]	; (78ac <_tc_init_irq_param+0x78>)
    7872:	683b      	ldr	r3, [r7, #0]
    7874:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	4a0d      	ldr	r2, [pc, #52]	; (78b0 <_tc_init_irq_param+0x7c>)
    787a:	4293      	cmp	r3, r2
    787c:	d102      	bne.n	7884 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    787e:	4a0d      	ldr	r2, [pc, #52]	; (78b4 <_tc_init_irq_param+0x80>)
    7880:	683b      	ldr	r3, [r7, #0]
    7882:	6013      	str	r3, [r2, #0]
	}
}
    7884:	bf00      	nop
    7886:	370c      	adds	r7, #12
    7888:	46bd      	mov	sp, r7
    788a:	f85d 7b04 	ldr.w	r7, [sp], #4
    788e:	4770      	bx	lr
    7890:	40003800 	.word	0x40003800
    7894:	200006c8 	.word	0x200006c8
    7898:	40003c00 	.word	0x40003c00
    789c:	200006cc 	.word	0x200006cc
    78a0:	4101a000 	.word	0x4101a000
    78a4:	200006d0 	.word	0x200006d0
    78a8:	4101c000 	.word	0x4101c000
    78ac:	200006d4 	.word	0x200006d4
    78b0:	43001800 	.word	0x43001800
    78b4:	200006d8 	.word	0x200006d8

000078b8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    78b8:	b4b0      	push	{r4, r5, r7}
    78ba:	b08d      	sub	sp, #52	; 0x34
    78bc:	af00      	add	r7, sp, #0
    78be:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    78c0:	4b13      	ldr	r3, [pc, #76]	; (7910 <_get_hardware_offset+0x58>)
    78c2:	f107 040c 	add.w	r4, r7, #12
    78c6:	461d      	mov	r5, r3
    78c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    78ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    78cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    78d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    78d4:	2300      	movs	r3, #0
    78d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    78d8:	e010      	b.n	78fc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    78da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    78dc:	009b      	lsls	r3, r3, #2
    78de:	f107 0230 	add.w	r2, r7, #48	; 0x30
    78e2:	4413      	add	r3, r2
    78e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    78e8:	461a      	mov	r2, r3
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	429a      	cmp	r2, r3
    78ee:	d102      	bne.n	78f6 <_get_hardware_offset+0x3e>
			return i;
    78f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    78f2:	b2db      	uxtb	r3, r3
    78f4:	e006      	b.n	7904 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    78f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    78f8:	3301      	adds	r3, #1
    78fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    78fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    78fe:	2b07      	cmp	r3, #7
    7900:	d9eb      	bls.n	78da <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7902:	2300      	movs	r3, #0
}
    7904:	4618      	mov	r0, r3
    7906:	3734      	adds	r7, #52	; 0x34
    7908:	46bd      	mov	sp, r7
    790a:	bcb0      	pop	{r4, r5, r7}
    790c:	4770      	bx	lr
    790e:	bf00      	nop
    7910:	0000d710 	.word	0x0000d710

00007914 <__NVIC_EnableIRQ>:
{
    7914:	b480      	push	{r7}
    7916:	b083      	sub	sp, #12
    7918:	af00      	add	r7, sp, #0
    791a:	4603      	mov	r3, r0
    791c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    791e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7922:	2b00      	cmp	r3, #0
    7924:	db0b      	blt.n	793e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7926:	4909      	ldr	r1, [pc, #36]	; (794c <__NVIC_EnableIRQ+0x38>)
    7928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    792c:	095b      	lsrs	r3, r3, #5
    792e:	88fa      	ldrh	r2, [r7, #6]
    7930:	f002 021f 	and.w	r2, r2, #31
    7934:	2001      	movs	r0, #1
    7936:	fa00 f202 	lsl.w	r2, r0, r2
    793a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    793e:	bf00      	nop
    7940:	370c      	adds	r7, #12
    7942:	46bd      	mov	sp, r7
    7944:	f85d 7b04 	ldr.w	r7, [sp], #4
    7948:	4770      	bx	lr
    794a:	bf00      	nop
    794c:	e000e100 	.word	0xe000e100

00007950 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7950:	b480      	push	{r7}
    7952:	b087      	sub	sp, #28
    7954:	af00      	add	r7, sp, #0
    7956:	60f8      	str	r0, [r7, #12]
    7958:	460b      	mov	r3, r1
    795a:	607a      	str	r2, [r7, #4]
    795c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    795e:	7afa      	ldrb	r2, [r7, #11]
    7960:	68f9      	ldr	r1, [r7, #12]
    7962:	4613      	mov	r3, r2
    7964:	009b      	lsls	r3, r3, #2
    7966:	4413      	add	r3, r2
    7968:	009b      	lsls	r3, r3, #2
    796a:	440b      	add	r3, r1
    796c:	3340      	adds	r3, #64	; 0x40
    796e:	681b      	ldr	r3, [r3, #0]
    7970:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7972:	697a      	ldr	r2, [r7, #20]
    7974:	687b      	ldr	r3, [r7, #4]
    7976:	4013      	ands	r3, r2
    7978:	617b      	str	r3, [r7, #20]
	return tmp;
    797a:	697b      	ldr	r3, [r7, #20]
}
    797c:	4618      	mov	r0, r3
    797e:	371c      	adds	r7, #28
    7980:	46bd      	mov	sp, r7
    7982:	f85d 7b04 	ldr.w	r7, [sp], #4
    7986:	4770      	bx	lr

00007988 <hri_oscctrl_get_STATUS_reg>:
{
    7988:	b480      	push	{r7}
    798a:	b085      	sub	sp, #20
    798c:	af00      	add	r7, sp, #0
    798e:	6078      	str	r0, [r7, #4]
    7990:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	691b      	ldr	r3, [r3, #16]
    7996:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7998:	68fa      	ldr	r2, [r7, #12]
    799a:	683b      	ldr	r3, [r7, #0]
    799c:	4013      	ands	r3, r2
    799e:	60fb      	str	r3, [r7, #12]
	return tmp;
    79a0:	68fb      	ldr	r3, [r7, #12]
}
    79a2:	4618      	mov	r0, r3
    79a4:	3714      	adds	r7, #20
    79a6:	46bd      	mov	sp, r7
    79a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ac:	4770      	bx	lr

000079ae <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    79ae:	b480      	push	{r7}
    79b0:	b085      	sub	sp, #20
    79b2:	af00      	add	r7, sp, #0
    79b4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	f893 3020 	ldrb.w	r3, [r3, #32]
    79bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    79be:	7bfb      	ldrb	r3, [r7, #15]
    79c0:	f003 0301 	and.w	r3, r3, #1
    79c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    79c6:	7bfb      	ldrb	r3, [r7, #15]
    79c8:	2b00      	cmp	r3, #0
    79ca:	bf14      	ite	ne
    79cc:	2301      	movne	r3, #1
    79ce:	2300      	moveq	r3, #0
    79d0:	b2db      	uxtb	r3, r3
}
    79d2:	4618      	mov	r0, r3
    79d4:	3714      	adds	r7, #20
    79d6:	46bd      	mov	sp, r7
    79d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79dc:	4770      	bx	lr

000079de <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    79de:	b480      	push	{r7}
    79e0:	b083      	sub	sp, #12
    79e2:	af00      	add	r7, sp, #0
    79e4:	6078      	str	r0, [r7, #4]
    79e6:	460b      	mov	r3, r1
    79e8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    79ea:	bf00      	nop
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	789b      	ldrb	r3, [r3, #2]
    79f0:	b2da      	uxtb	r2, r3
    79f2:	78fb      	ldrb	r3, [r7, #3]
    79f4:	4013      	ands	r3, r2
    79f6:	b2db      	uxtb	r3, r3
    79f8:	2b00      	cmp	r3, #0
    79fa:	d1f7      	bne.n	79ec <hri_usb_wait_for_sync+0xe>
	};
}
    79fc:	bf00      	nop
    79fe:	370c      	adds	r7, #12
    7a00:	46bd      	mov	sp, r7
    7a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a06:	4770      	bx	lr

00007a08 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7a08:	b480      	push	{r7}
    7a0a:	b083      	sub	sp, #12
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	6078      	str	r0, [r7, #4]
    7a10:	460b      	mov	r3, r1
    7a12:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	789b      	ldrb	r3, [r3, #2]
    7a18:	b2da      	uxtb	r2, r3
    7a1a:	78fb      	ldrb	r3, [r7, #3]
    7a1c:	4013      	ands	r3, r2
    7a1e:	b2db      	uxtb	r3, r3
    7a20:	2b00      	cmp	r3, #0
    7a22:	bf14      	ite	ne
    7a24:	2301      	movne	r3, #1
    7a26:	2300      	moveq	r3, #0
    7a28:	b2db      	uxtb	r3, r3
}
    7a2a:	4618      	mov	r0, r3
    7a2c:	370c      	adds	r7, #12
    7a2e:	46bd      	mov	sp, r7
    7a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a34:	4770      	bx	lr

00007a36 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7a36:	b480      	push	{r7}
    7a38:	b085      	sub	sp, #20
    7a3a:	af00      	add	r7, sp, #0
    7a3c:	6078      	str	r0, [r7, #4]
    7a3e:	460b      	mov	r3, r1
    7a40:	70fb      	strb	r3, [r7, #3]
    7a42:	4613      	mov	r3, r2
    7a44:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7a46:	78fb      	ldrb	r3, [r7, #3]
    7a48:	687a      	ldr	r2, [r7, #4]
    7a4a:	3308      	adds	r3, #8
    7a4c:	015b      	lsls	r3, r3, #5
    7a4e:	4413      	add	r3, r2
    7a50:	3307      	adds	r3, #7
    7a52:	781b      	ldrb	r3, [r3, #0]
    7a54:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7a56:	7bfa      	ldrb	r2, [r7, #15]
    7a58:	78bb      	ldrb	r3, [r7, #2]
    7a5a:	4013      	ands	r3, r2
    7a5c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7a5e:	7bfb      	ldrb	r3, [r7, #15]
}
    7a60:	4618      	mov	r0, r3
    7a62:	3714      	adds	r7, #20
    7a64:	46bd      	mov	sp, r7
    7a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a6a:	4770      	bx	lr

00007a6c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7a6c:	b480      	push	{r7}
    7a6e:	b083      	sub	sp, #12
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
    7a74:	460b      	mov	r3, r1
    7a76:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7a78:	78fb      	ldrb	r3, [r7, #3]
    7a7a:	687a      	ldr	r2, [r7, #4]
    7a7c:	3308      	adds	r3, #8
    7a7e:	015b      	lsls	r3, r3, #5
    7a80:	4413      	add	r3, r2
    7a82:	3307      	adds	r3, #7
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	b2db      	uxtb	r3, r3
}
    7a88:	4618      	mov	r0, r3
    7a8a:	370c      	adds	r7, #12
    7a8c:	46bd      	mov	sp, r7
    7a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a92:	4770      	bx	lr

00007a94 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7a94:	b480      	push	{r7}
    7a96:	b083      	sub	sp, #12
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
    7a9c:	460b      	mov	r3, r1
    7a9e:	70fb      	strb	r3, [r7, #3]
    7aa0:	4613      	mov	r3, r2
    7aa2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7aa4:	78fb      	ldrb	r3, [r7, #3]
    7aa6:	687a      	ldr	r2, [r7, #4]
    7aa8:	3308      	adds	r3, #8
    7aaa:	015b      	lsls	r3, r3, #5
    7aac:	4413      	add	r3, r2
    7aae:	3307      	adds	r3, #7
    7ab0:	78ba      	ldrb	r2, [r7, #2]
    7ab2:	701a      	strb	r2, [r3, #0]
}
    7ab4:	bf00      	nop
    7ab6:	370c      	adds	r7, #12
    7ab8:	46bd      	mov	sp, r7
    7aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7abe:	4770      	bx	lr

00007ac0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7ac0:	b480      	push	{r7}
    7ac2:	b083      	sub	sp, #12
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	6078      	str	r0, [r7, #4]
    7ac8:	460b      	mov	r3, r1
    7aca:	70fb      	strb	r3, [r7, #3]
    7acc:	4613      	mov	r3, r2
    7ace:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7ad0:	78fb      	ldrb	r3, [r7, #3]
    7ad2:	687a      	ldr	r2, [r7, #4]
    7ad4:	3308      	adds	r3, #8
    7ad6:	015b      	lsls	r3, r3, #5
    7ad8:	4413      	add	r3, r2
    7ada:	3305      	adds	r3, #5
    7adc:	78ba      	ldrb	r2, [r7, #2]
    7ade:	701a      	strb	r2, [r3, #0]
}
    7ae0:	bf00      	nop
    7ae2:	370c      	adds	r7, #12
    7ae4:	46bd      	mov	sp, r7
    7ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aea:	4770      	bx	lr

00007aec <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7aec:	b480      	push	{r7}
    7aee:	b083      	sub	sp, #12
    7af0:	af00      	add	r7, sp, #0
    7af2:	6078      	str	r0, [r7, #4]
    7af4:	460b      	mov	r3, r1
    7af6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7af8:	78fb      	ldrb	r3, [r7, #3]
    7afa:	687a      	ldr	r2, [r7, #4]
    7afc:	3308      	adds	r3, #8
    7afe:	015b      	lsls	r3, r3, #5
    7b00:	4413      	add	r3, r2
    7b02:	3306      	adds	r3, #6
    7b04:	781b      	ldrb	r3, [r3, #0]
    7b06:	b2db      	uxtb	r3, r3
}
    7b08:	4618      	mov	r0, r3
    7b0a:	370c      	adds	r7, #12
    7b0c:	46bd      	mov	sp, r7
    7b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b12:	4770      	bx	lr

00007b14 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7b14:	b480      	push	{r7}
    7b16:	b083      	sub	sp, #12
    7b18:	af00      	add	r7, sp, #0
    7b1a:	6078      	str	r0, [r7, #4]
    7b1c:	460b      	mov	r3, r1
    7b1e:	70fb      	strb	r3, [r7, #3]
    7b20:	4613      	mov	r3, r2
    7b22:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7b24:	78fb      	ldrb	r3, [r7, #3]
    7b26:	687a      	ldr	r2, [r7, #4]
    7b28:	3308      	adds	r3, #8
    7b2a:	015b      	lsls	r3, r3, #5
    7b2c:	4413      	add	r3, r2
    7b2e:	3304      	adds	r3, #4
    7b30:	78ba      	ldrb	r2, [r7, #2]
    7b32:	701a      	strb	r2, [r3, #0]
}
    7b34:	bf00      	nop
    7b36:	370c      	adds	r7, #12
    7b38:	46bd      	mov	sp, r7
    7b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b3e:	4770      	bx	lr

00007b40 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7b40:	b480      	push	{r7}
    7b42:	b083      	sub	sp, #12
    7b44:	af00      	add	r7, sp, #0
    7b46:	6078      	str	r0, [r7, #4]
    7b48:	460b      	mov	r3, r1
    7b4a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7b4c:	78fb      	ldrb	r3, [r7, #3]
    7b4e:	687a      	ldr	r2, [r7, #4]
    7b50:	015b      	lsls	r3, r3, #5
    7b52:	4413      	add	r3, r2
    7b54:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7b58:	2210      	movs	r2, #16
    7b5a:	701a      	strb	r2, [r3, #0]
}
    7b5c:	bf00      	nop
    7b5e:	370c      	adds	r7, #12
    7b60:	46bd      	mov	sp, r7
    7b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b66:	4770      	bx	lr

00007b68 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7b68:	b480      	push	{r7}
    7b6a:	b083      	sub	sp, #12
    7b6c:	af00      	add	r7, sp, #0
    7b6e:	6078      	str	r0, [r7, #4]
    7b70:	460b      	mov	r3, r1
    7b72:	70fb      	strb	r3, [r7, #3]
    7b74:	4613      	mov	r3, r2
    7b76:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7b78:	78fb      	ldrb	r3, [r7, #3]
    7b7a:	687a      	ldr	r2, [r7, #4]
    7b7c:	015b      	lsls	r3, r3, #5
    7b7e:	4413      	add	r3, r2
    7b80:	f203 1309 	addw	r3, r3, #265	; 0x109
    7b84:	78ba      	ldrb	r2, [r7, #2]
    7b86:	701a      	strb	r2, [r3, #0]
}
    7b88:	bf00      	nop
    7b8a:	370c      	adds	r7, #12
    7b8c:	46bd      	mov	sp, r7
    7b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b92:	4770      	bx	lr

00007b94 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7b94:	b480      	push	{r7}
    7b96:	b083      	sub	sp, #12
    7b98:	af00      	add	r7, sp, #0
    7b9a:	6078      	str	r0, [r7, #4]
    7b9c:	460b      	mov	r3, r1
    7b9e:	70fb      	strb	r3, [r7, #3]
    7ba0:	4613      	mov	r3, r2
    7ba2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7ba4:	78fb      	ldrb	r3, [r7, #3]
    7ba6:	687a      	ldr	r2, [r7, #4]
    7ba8:	015b      	lsls	r3, r3, #5
    7baa:	4413      	add	r3, r2
    7bac:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7bb0:	78ba      	ldrb	r2, [r7, #2]
    7bb2:	701a      	strb	r2, [r3, #0]
}
    7bb4:	bf00      	nop
    7bb6:	370c      	adds	r7, #12
    7bb8:	46bd      	mov	sp, r7
    7bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bbe:	4770      	bx	lr

00007bc0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7bc0:	b480      	push	{r7}
    7bc2:	b085      	sub	sp, #20
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	6078      	str	r0, [r7, #4]
    7bc8:	460b      	mov	r3, r1
    7bca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7bcc:	78fb      	ldrb	r3, [r7, #3]
    7bce:	687a      	ldr	r2, [r7, #4]
    7bd0:	3308      	adds	r3, #8
    7bd2:	015b      	lsls	r3, r3, #5
    7bd4:	4413      	add	r3, r2
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7bda:	7bfb      	ldrb	r3, [r7, #15]
    7bdc:	f003 0307 	and.w	r3, r3, #7
    7be0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7be2:	7bfb      	ldrb	r3, [r7, #15]
}
    7be4:	4618      	mov	r0, r3
    7be6:	3714      	adds	r7, #20
    7be8:	46bd      	mov	sp, r7
    7bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bee:	4770      	bx	lr

00007bf0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7bf0:	b480      	push	{r7}
    7bf2:	b085      	sub	sp, #20
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	6078      	str	r0, [r7, #4]
    7bf8:	460b      	mov	r3, r1
    7bfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7bfc:	78fb      	ldrb	r3, [r7, #3]
    7bfe:	687a      	ldr	r2, [r7, #4]
    7c00:	3308      	adds	r3, #8
    7c02:	015b      	lsls	r3, r3, #5
    7c04:	4413      	add	r3, r2
    7c06:	781b      	ldrb	r3, [r3, #0]
    7c08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7c0a:	7bfb      	ldrb	r3, [r7, #15]
    7c0c:	091b      	lsrs	r3, r3, #4
    7c0e:	b2db      	uxtb	r3, r3
    7c10:	f003 0307 	and.w	r3, r3, #7
    7c14:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7c16:	7bfb      	ldrb	r3, [r7, #15]
}
    7c18:	4618      	mov	r0, r3
    7c1a:	3714      	adds	r7, #20
    7c1c:	46bd      	mov	sp, r7
    7c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c22:	4770      	bx	lr

00007c24 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7c24:	b480      	push	{r7}
    7c26:	b083      	sub	sp, #12
    7c28:	af00      	add	r7, sp, #0
    7c2a:	6078      	str	r0, [r7, #4]
    7c2c:	460b      	mov	r3, r1
    7c2e:	70fb      	strb	r3, [r7, #3]
    7c30:	4613      	mov	r3, r2
    7c32:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7c34:	78fb      	ldrb	r3, [r7, #3]
    7c36:	687a      	ldr	r2, [r7, #4]
    7c38:	3308      	adds	r3, #8
    7c3a:	015b      	lsls	r3, r3, #5
    7c3c:	4413      	add	r3, r2
    7c3e:	78ba      	ldrb	r2, [r7, #2]
    7c40:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7c42:	bf00      	nop
    7c44:	370c      	adds	r7, #12
    7c46:	46bd      	mov	sp, r7
    7c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c4c:	4770      	bx	lr

00007c4e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7c4e:	b480      	push	{r7}
    7c50:	b083      	sub	sp, #12
    7c52:	af00      	add	r7, sp, #0
    7c54:	6078      	str	r0, [r7, #4]
    7c56:	460b      	mov	r3, r1
    7c58:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7c5a:	78fb      	ldrb	r3, [r7, #3]
    7c5c:	687a      	ldr	r2, [r7, #4]
    7c5e:	3308      	adds	r3, #8
    7c60:	015b      	lsls	r3, r3, #5
    7c62:	4413      	add	r3, r2
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	b2db      	uxtb	r3, r3
}
    7c68:	4618      	mov	r0, r3
    7c6a:	370c      	adds	r7, #12
    7c6c:	46bd      	mov	sp, r7
    7c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c72:	4770      	bx	lr

00007c74 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7c74:	b480      	push	{r7}
    7c76:	b083      	sub	sp, #12
    7c78:	af00      	add	r7, sp, #0
    7c7a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7c7c:	687b      	ldr	r3, [r7, #4]
    7c7e:	8b9b      	ldrh	r3, [r3, #28]
    7c80:	b29b      	uxth	r3, r3
}
    7c82:	4618      	mov	r0, r3
    7c84:	370c      	adds	r7, #12
    7c86:	46bd      	mov	sp, r7
    7c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c8c:	4770      	bx	lr

00007c8e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7c8e:	b480      	push	{r7}
    7c90:	b083      	sub	sp, #12
    7c92:	af00      	add	r7, sp, #0
    7c94:	6078      	str	r0, [r7, #4]
    7c96:	460b      	mov	r3, r1
    7c98:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	887a      	ldrh	r2, [r7, #2]
    7c9e:	839a      	strh	r2, [r3, #28]
}
    7ca0:	bf00      	nop
    7ca2:	370c      	adds	r7, #12
    7ca4:	46bd      	mov	sp, r7
    7ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7caa:	4770      	bx	lr

00007cac <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7cac:	b480      	push	{r7}
    7cae:	b083      	sub	sp, #12
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
    7cb4:	460b      	mov	r3, r1
    7cb6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7cb8:	687b      	ldr	r3, [r7, #4]
    7cba:	887a      	ldrh	r2, [r7, #2]
    7cbc:	831a      	strh	r2, [r3, #24]
}
    7cbe:	bf00      	nop
    7cc0:	370c      	adds	r7, #12
    7cc2:	46bd      	mov	sp, r7
    7cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cc8:	4770      	bx	lr

00007cca <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7cca:	b480      	push	{r7}
    7ccc:	b083      	sub	sp, #12
    7cce:	af00      	add	r7, sp, #0
    7cd0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7cd2:	687b      	ldr	r3, [r7, #4]
    7cd4:	8b1b      	ldrh	r3, [r3, #24]
    7cd6:	b29b      	uxth	r3, r3
}
    7cd8:	4618      	mov	r0, r3
    7cda:	370c      	adds	r7, #12
    7cdc:	46bd      	mov	sp, r7
    7cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ce2:	4770      	bx	lr

00007ce4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7ce4:	b480      	push	{r7}
    7ce6:	b083      	sub	sp, #12
    7ce8:	af00      	add	r7, sp, #0
    7cea:	6078      	str	r0, [r7, #4]
    7cec:	460b      	mov	r3, r1
    7cee:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7cf0:	687b      	ldr	r3, [r7, #4]
    7cf2:	887a      	ldrh	r2, [r7, #2]
    7cf4:	829a      	strh	r2, [r3, #20]
}
    7cf6:	bf00      	nop
    7cf8:	370c      	adds	r7, #12
    7cfa:	46bd      	mov	sp, r7
    7cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d00:	4770      	bx	lr

00007d02 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7d02:	b480      	push	{r7}
    7d04:	b085      	sub	sp, #20
    7d06:	af00      	add	r7, sp, #0
    7d08:	6078      	str	r0, [r7, #4]
    7d0a:	460b      	mov	r3, r1
    7d0c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	789b      	ldrb	r3, [r3, #2]
    7d12:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d14:	7bfa      	ldrb	r2, [r7, #15]
    7d16:	78fb      	ldrb	r3, [r7, #3]
    7d18:	4013      	ands	r3, r2
    7d1a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d1c:	7bfb      	ldrb	r3, [r7, #15]
}
    7d1e:	4618      	mov	r0, r3
    7d20:	3714      	adds	r7, #20
    7d22:	46bd      	mov	sp, r7
    7d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d28:	4770      	bx	lr
	...

00007d2c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7d2c:	b580      	push	{r7, lr}
    7d2e:	b082      	sub	sp, #8
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	b2db      	uxtb	r3, r3
    7d3a:	f023 0302 	bic.w	r3, r3, #2
    7d3e:	b2da      	uxtb	r2, r3
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7d44:	2103      	movs	r1, #3
    7d46:	6878      	ldr	r0, [r7, #4]
    7d48:	4b02      	ldr	r3, [pc, #8]	; (7d54 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7d4a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7d4c:	bf00      	nop
    7d4e:	3708      	adds	r7, #8
    7d50:	46bd      	mov	sp, r7
    7d52:	bd80      	pop	{r7, pc}
    7d54:	000079df 	.word	0x000079df

00007d58 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    7d58:	b580      	push	{r7, lr}
    7d5a:	b084      	sub	sp, #16
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
    7d60:	460b      	mov	r3, r1
    7d62:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7d64:	2103      	movs	r1, #3
    7d66:	6878      	ldr	r0, [r7, #4]
    7d68:	4b06      	ldr	r3, [pc, #24]	; (7d84 <hri_usb_get_CTRLA_reg+0x2c>)
    7d6a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	781b      	ldrb	r3, [r3, #0]
    7d70:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d72:	7bfa      	ldrb	r2, [r7, #15]
    7d74:	78fb      	ldrb	r3, [r7, #3]
    7d76:	4013      	ands	r3, r2
    7d78:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d7a:	7bfb      	ldrb	r3, [r7, #15]
}
    7d7c:	4618      	mov	r0, r3
    7d7e:	3710      	adds	r7, #16
    7d80:	46bd      	mov	sp, r7
    7d82:	bd80      	pop	{r7, pc}
    7d84:	000079df 	.word	0x000079df

00007d88 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b082      	sub	sp, #8
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
    7d90:	460b      	mov	r3, r1
    7d92:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    7d94:	687b      	ldr	r3, [r7, #4]
    7d96:	78fa      	ldrb	r2, [r7, #3]
    7d98:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7d9a:	2103      	movs	r1, #3
    7d9c:	6878      	ldr	r0, [r7, #4]
    7d9e:	4b03      	ldr	r3, [pc, #12]	; (7dac <hri_usb_write_CTRLA_reg+0x24>)
    7da0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7da2:	bf00      	nop
    7da4:	3708      	adds	r7, #8
    7da6:	46bd      	mov	sp, r7
    7da8:	bd80      	pop	{r7, pc}
    7daa:	bf00      	nop
    7dac:	000079df 	.word	0x000079df

00007db0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    7db0:	b580      	push	{r7, lr}
    7db2:	b082      	sub	sp, #8
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7db8:	2103      	movs	r1, #3
    7dba:	6878      	ldr	r0, [r7, #4]
    7dbc:	4b04      	ldr	r3, [pc, #16]	; (7dd0 <hri_usb_read_CTRLA_reg+0x20>)
    7dbe:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    7dc0:	687b      	ldr	r3, [r7, #4]
    7dc2:	781b      	ldrb	r3, [r3, #0]
    7dc4:	b2db      	uxtb	r3, r3
}
    7dc6:	4618      	mov	r0, r3
    7dc8:	3708      	adds	r7, #8
    7dca:	46bd      	mov	sp, r7
    7dcc:	bd80      	pop	{r7, pc}
    7dce:	bf00      	nop
    7dd0:	000079df 	.word	0x000079df

00007dd4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    7dd4:	b480      	push	{r7}
    7dd6:	b083      	sub	sp, #12
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	891b      	ldrh	r3, [r3, #8]
    7de0:	b29b      	uxth	r3, r3
    7de2:	f023 0301 	bic.w	r3, r3, #1
    7de6:	b29a      	uxth	r2, r3
    7de8:	687b      	ldr	r3, [r7, #4]
    7dea:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7dec:	bf00      	nop
    7dee:	370c      	adds	r7, #12
    7df0:	46bd      	mov	sp, r7
    7df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7df6:	4770      	bx	lr

00007df8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    7df8:	b480      	push	{r7}
    7dfa:	b083      	sub	sp, #12
    7dfc:	af00      	add	r7, sp, #0
    7dfe:	6078      	str	r0, [r7, #4]
    7e00:	460b      	mov	r3, r1
    7e02:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	887a      	ldrh	r2, [r7, #2]
    7e08:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7e0a:	bf00      	nop
    7e0c:	370c      	adds	r7, #12
    7e0e:	46bd      	mov	sp, r7
    7e10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e14:	4770      	bx	lr

00007e16 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    7e16:	b480      	push	{r7}
    7e18:	b083      	sub	sp, #12
    7e1a:	af00      	add	r7, sp, #0
    7e1c:	6078      	str	r0, [r7, #4]
    7e1e:	460b      	mov	r3, r1
    7e20:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	78fa      	ldrb	r2, [r7, #3]
    7e26:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    7e28:	bf00      	nop
    7e2a:	370c      	adds	r7, #12
    7e2c:	46bd      	mov	sp, r7
    7e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e32:	4770      	bx	lr

00007e34 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    7e34:	b480      	push	{r7}
    7e36:	b083      	sub	sp, #12
    7e38:	af00      	add	r7, sp, #0
    7e3a:	6078      	str	r0, [r7, #4]
    7e3c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	683a      	ldr	r2, [r7, #0]
    7e42:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    7e44:	bf00      	nop
    7e46:	370c      	adds	r7, #12
    7e48:	46bd      	mov	sp, r7
    7e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e4e:	4770      	bx	lr

00007e50 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    7e50:	b480      	push	{r7}
    7e52:	b083      	sub	sp, #12
    7e54:	af00      	add	r7, sp, #0
    7e56:	6078      	str	r0, [r7, #4]
    7e58:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    7e5a:	2300      	movs	r3, #0
}
    7e5c:	4618      	mov	r0, r3
    7e5e:	370c      	adds	r7, #12
    7e60:	46bd      	mov	sp, r7
    7e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e66:	4770      	bx	lr

00007e68 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    7e68:	b480      	push	{r7}
    7e6a:	b085      	sub	sp, #20
    7e6c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    7e6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7e72:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    7e74:	4b28      	ldr	r3, [pc, #160]	; (7f18 <_usb_load_calib+0xb0>)
    7e76:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    7e78:	f003 031f 	and.w	r3, r3, #31
    7e7c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    7e7e:	4b26      	ldr	r3, [pc, #152]	; (7f18 <_usb_load_calib+0xb0>)
    7e80:	681b      	ldr	r3, [r3, #0]
    7e82:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    7e84:	f003 031f 	and.w	r3, r3, #31
    7e88:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    7e8a:	4b23      	ldr	r3, [pc, #140]	; (7f18 <_usb_load_calib+0xb0>)
    7e8c:	681b      	ldr	r3, [r3, #0]
    7e8e:	0a9b      	lsrs	r3, r3, #10
    7e90:	f003 0307 	and.w	r3, r3, #7
    7e94:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    7e96:	68fb      	ldr	r3, [r7, #12]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d002      	beq.n	7ea2 <_usb_load_calib+0x3a>
    7e9c:	68fb      	ldr	r3, [r7, #12]
    7e9e:	2b1f      	cmp	r3, #31
    7ea0:	d101      	bne.n	7ea6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    7ea2:	2309      	movs	r3, #9
    7ea4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    7ea6:	68bb      	ldr	r3, [r7, #8]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d002      	beq.n	7eb2 <_usb_load_calib+0x4a>
    7eac:	68bb      	ldr	r3, [r7, #8]
    7eae:	2b1f      	cmp	r3, #31
    7eb0:	d101      	bne.n	7eb6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    7eb2:	2319      	movs	r3, #25
    7eb4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    7eb6:	687b      	ldr	r3, [r7, #4]
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d002      	beq.n	7ec2 <_usb_load_calib+0x5a>
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	2b07      	cmp	r3, #7
    7ec0:	d101      	bne.n	7ec6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    7ec2:	2306      	movs	r3, #6
    7ec4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    7ec6:	68fb      	ldr	r3, [r7, #12]
    7ec8:	b29b      	uxth	r3, r3
    7eca:	019b      	lsls	r3, r3, #6
    7ecc:	b29b      	uxth	r3, r3
    7ece:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    7ed2:	b29a      	uxth	r2, r3
    7ed4:	68bb      	ldr	r3, [r7, #8]
    7ed6:	b29b      	uxth	r3, r3
    7ed8:	f003 031f 	and.w	r3, r3, #31
    7edc:	b29b      	uxth	r3, r3
    7ede:	4313      	orrs	r3, r2
    7ee0:	b29a      	uxth	r2, r3
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	b29b      	uxth	r3, r3
    7ee6:	031b      	lsls	r3, r3, #12
    7ee8:	b29b      	uxth	r3, r3
    7eea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    7eee:	b29b      	uxth	r3, r3
    7ef0:	4313      	orrs	r3, r2
    7ef2:	b29a      	uxth	r2, r3
    7ef4:	683b      	ldr	r3, [r7, #0]
    7ef6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    7ef8:	683a      	ldr	r2, [r7, #0]
    7efa:	78d3      	ldrb	r3, [r2, #3]
    7efc:	f043 0303 	orr.w	r3, r3, #3
    7f00:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    7f02:	683a      	ldr	r2, [r7, #0]
    7f04:	78d3      	ldrb	r3, [r2, #3]
    7f06:	f043 030c 	orr.w	r3, r3, #12
    7f0a:	70d3      	strb	r3, [r2, #3]
}
    7f0c:	bf00      	nop
    7f0e:	3714      	adds	r7, #20
    7f10:	46bd      	mov	sp, r7
    7f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f16:	4770      	bx	lr
    7f18:	00800084 	.word	0x00800084

00007f1c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    7f1c:	b580      	push	{r7, lr}
    7f1e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    7f20:	bf00      	nop
    7f22:	2203      	movs	r2, #3
    7f24:	2100      	movs	r1, #0
    7f26:	4804      	ldr	r0, [pc, #16]	; (7f38 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    7f28:	4b04      	ldr	r3, [pc, #16]	; (7f3c <_usb_d_dev_wait_dpll_rdy+0x20>)
    7f2a:	4798      	blx	r3
    7f2c:	4603      	mov	r3, r0
    7f2e:	2b03      	cmp	r3, #3
    7f30:	d1f7      	bne.n	7f22 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    7f32:	bf00      	nop
    7f34:	bd80      	pop	{r7, pc}
    7f36:	bf00      	nop
    7f38:	40001000 	.word	0x40001000
    7f3c:	00007951 	.word	0x00007951

00007f40 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    7f40:	b580      	push	{r7, lr}
    7f42:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7f44:	480e      	ldr	r0, [pc, #56]	; (7f80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7f46:	4b0f      	ldr	r3, [pc, #60]	; (7f84 <_usb_d_dev_wait_dfll_rdy+0x44>)
    7f48:	4798      	blx	r3
    7f4a:	4603      	mov	r3, r0
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d00a      	beq.n	7f66 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    7f50:	bf00      	nop
    7f52:	f44f 6110 	mov.w	r1, #2304	; 0x900
    7f56:	480a      	ldr	r0, [pc, #40]	; (7f80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7f58:	4b0b      	ldr	r3, [pc, #44]	; (7f88 <_usb_d_dev_wait_dfll_rdy+0x48>)
    7f5a:	4798      	blx	r3
    7f5c:	4603      	mov	r3, r0
    7f5e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7f62:	d1f6      	bne.n	7f52 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    7f64:	e009      	b.n	7f7a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7f66:	bf00      	nop
    7f68:	f44f 7180 	mov.w	r1, #256	; 0x100
    7f6c:	4804      	ldr	r0, [pc, #16]	; (7f80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7f6e:	4b06      	ldr	r3, [pc, #24]	; (7f88 <_usb_d_dev_wait_dfll_rdy+0x48>)
    7f70:	4798      	blx	r3
    7f72:	4603      	mov	r3, r0
    7f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    7f78:	d1f6      	bne.n	7f68 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    7f7a:	bf00      	nop
    7f7c:	bd80      	pop	{r7, pc}
    7f7e:	bf00      	nop
    7f80:	40001000 	.word	0x40001000
    7f84:	000079af 	.word	0x000079af
    7f88:	00007989 	.word	0x00007989

00007f8c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b082      	sub	sp, #8
    7f90:	af00      	add	r7, sp, #0
    7f92:	4603      	mov	r3, r0
    7f94:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    7f96:	79fb      	ldrb	r3, [r7, #7]
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d102      	bne.n	7fa2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    7f9c:	4b05      	ldr	r3, [pc, #20]	; (7fb4 <_usb_d_dev_wait_clk_rdy+0x28>)
    7f9e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    7fa0:	e004      	b.n	7fac <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    7fa2:	79fb      	ldrb	r3, [r7, #7]
    7fa4:	2b01      	cmp	r3, #1
    7fa6:	d101      	bne.n	7fac <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    7fa8:	4b03      	ldr	r3, [pc, #12]	; (7fb8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    7faa:	4798      	blx	r3
}
    7fac:	bf00      	nop
    7fae:	3708      	adds	r7, #8
    7fb0:	46bd      	mov	sp, r7
    7fb2:	bd80      	pop	{r7, pc}
    7fb4:	00007f41 	.word	0x00007f41
    7fb8:	00007f1d 	.word	0x00007f1d

00007fbc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b082      	sub	sp, #8
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	4603      	mov	r3, r0
    7fc4:	6039      	str	r1, [r7, #0]
    7fc6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    7fc8:	683b      	ldr	r3, [r7, #0]
    7fca:	b2da      	uxtb	r2, r3
    7fcc:	79fb      	ldrb	r3, [r7, #7]
    7fce:	4619      	mov	r1, r3
    7fd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7fd4:	4b02      	ldr	r3, [pc, #8]	; (7fe0 <_usbd_ep_int_ack+0x24>)
    7fd6:	4798      	blx	r3
}
    7fd8:	bf00      	nop
    7fda:	3708      	adds	r7, #8
    7fdc:	46bd      	mov	sp, r7
    7fde:	bd80      	pop	{r7, pc}
    7fe0:	00007a95 	.word	0x00007a95

00007fe4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    7fe4:	b580      	push	{r7, lr}
    7fe6:	b082      	sub	sp, #8
    7fe8:	af00      	add	r7, sp, #0
    7fea:	4603      	mov	r3, r0
    7fec:	6039      	str	r1, [r7, #0]
    7fee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    7ff0:	683b      	ldr	r3, [r7, #0]
    7ff2:	b2da      	uxtb	r2, r3
    7ff4:	79fb      	ldrb	r3, [r7, #7]
    7ff6:	4619      	mov	r1, r3
    7ff8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7ffc:	4b02      	ldr	r3, [pc, #8]	; (8008 <_usbd_ep_int_en+0x24>)
    7ffe:	4798      	blx	r3
}
    8000:	bf00      	nop
    8002:	3708      	adds	r7, #8
    8004:	46bd      	mov	sp, r7
    8006:	bd80      	pop	{r7, pc}
    8008:	00007b69 	.word	0x00007b69

0000800c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    800c:	b580      	push	{r7, lr}
    800e:	b082      	sub	sp, #8
    8010:	af00      	add	r7, sp, #0
    8012:	4603      	mov	r3, r0
    8014:	6039      	str	r1, [r7, #0]
    8016:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8018:	683b      	ldr	r3, [r7, #0]
    801a:	b2da      	uxtb	r2, r3
    801c:	79fb      	ldrb	r3, [r7, #7]
    801e:	4619      	mov	r1, r3
    8020:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8024:	4b02      	ldr	r3, [pc, #8]	; (8030 <_usbd_ep_int_dis+0x24>)
    8026:	4798      	blx	r3
}
    8028:	bf00      	nop
    802a:	3708      	adds	r7, #8
    802c:	46bd      	mov	sp, r7
    802e:	bd80      	pop	{r7, pc}
    8030:	00007b95 	.word	0x00007b95

00008034 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8034:	b580      	push	{r7, lr}
    8036:	b082      	sub	sp, #8
    8038:	af00      	add	r7, sp, #0
    803a:	4603      	mov	r3, r0
    803c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    803e:	79fb      	ldrb	r3, [r7, #7]
    8040:	4619      	mov	r1, r3
    8042:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8046:	4b06      	ldr	r3, [pc, #24]	; (8060 <_usbd_ep_is_ctrl+0x2c>)
    8048:	4798      	blx	r3
    804a:	4603      	mov	r3, r0
    804c:	2b11      	cmp	r3, #17
    804e:	bf0c      	ite	eq
    8050:	2301      	moveq	r3, #1
    8052:	2300      	movne	r3, #0
    8054:	b2db      	uxtb	r3, r3
}
    8056:	4618      	mov	r0, r3
    8058:	3708      	adds	r7, #8
    805a:	46bd      	mov	sp, r7
    805c:	bd80      	pop	{r7, pc}
    805e:	bf00      	nop
    8060:	00007c4f 	.word	0x00007c4f

00008064 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8064:	b580      	push	{r7, lr}
    8066:	b082      	sub	sp, #8
    8068:	af00      	add	r7, sp, #0
    806a:	4603      	mov	r3, r0
    806c:	71fb      	strb	r3, [r7, #7]
    806e:	460b      	mov	r3, r1
    8070:	71bb      	strb	r3, [r7, #6]
    8072:	4613      	mov	r3, r2
    8074:	717b      	strb	r3, [r7, #5]
	if (st) {
    8076:	797b      	ldrb	r3, [r7, #5]
    8078:	2b00      	cmp	r3, #0
    807a:	d00b      	beq.n	8094 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    807c:	79bb      	ldrb	r3, [r7, #6]
    807e:	2210      	movs	r2, #16
    8080:	fa02 f303 	lsl.w	r3, r2, r3
    8084:	b2da      	uxtb	r2, r3
    8086:	79fb      	ldrb	r3, [r7, #7]
    8088:	4619      	mov	r1, r3
    808a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    808e:	4b09      	ldr	r3, [pc, #36]	; (80b4 <_usbd_ep_set_stall+0x50>)
    8090:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8092:	e00a      	b.n	80aa <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8094:	79bb      	ldrb	r3, [r7, #6]
    8096:	2210      	movs	r2, #16
    8098:	fa02 f303 	lsl.w	r3, r2, r3
    809c:	b2da      	uxtb	r2, r3
    809e:	79fb      	ldrb	r3, [r7, #7]
    80a0:	4619      	mov	r1, r3
    80a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80a6:	4b04      	ldr	r3, [pc, #16]	; (80b8 <_usbd_ep_set_stall+0x54>)
    80a8:	4798      	blx	r3
}
    80aa:	bf00      	nop
    80ac:	3708      	adds	r7, #8
    80ae:	46bd      	mov	sp, r7
    80b0:	bd80      	pop	{r7, pc}
    80b2:	bf00      	nop
    80b4:	00007ac1 	.word	0x00007ac1
    80b8:	00007b15 	.word	0x00007b15

000080bc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    80bc:	b580      	push	{r7, lr}
    80be:	b084      	sub	sp, #16
    80c0:	af00      	add	r7, sp, #0
    80c2:	4603      	mov	r3, r0
    80c4:	460a      	mov	r2, r1
    80c6:	71fb      	strb	r3, [r7, #7]
    80c8:	4613      	mov	r3, r2
    80ca:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    80cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    80d0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    80d2:	79fb      	ldrb	r3, [r7, #7]
    80d4:	4619      	mov	r1, r3
    80d6:	68f8      	ldr	r0, [r7, #12]
    80d8:	4b08      	ldr	r3, [pc, #32]	; (80fc <_usbd_ep_is_stalled+0x40>)
    80da:	4798      	blx	r3
    80dc:	4603      	mov	r3, r0
    80de:	4619      	mov	r1, r3
    80e0:	79bb      	ldrb	r3, [r7, #6]
    80e2:	2210      	movs	r2, #16
    80e4:	fa02 f303 	lsl.w	r3, r2, r3
    80e8:	400b      	ands	r3, r1
    80ea:	2b00      	cmp	r3, #0
    80ec:	bf14      	ite	ne
    80ee:	2301      	movne	r3, #1
    80f0:	2300      	moveq	r3, #0
    80f2:	b2db      	uxtb	r3, r3
}
    80f4:	4618      	mov	r0, r3
    80f6:	3710      	adds	r7, #16
    80f8:	46bd      	mov	sp, r7
    80fa:	bd80      	pop	{r7, pc}
    80fc:	00007aed 	.word	0x00007aed

00008100 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8100:	b580      	push	{r7, lr}
    8102:	b084      	sub	sp, #16
    8104:	af00      	add	r7, sp, #0
    8106:	4603      	mov	r3, r0
    8108:	460a      	mov	r2, r1
    810a:	71fb      	strb	r3, [r7, #7]
    810c:	4613      	mov	r3, r2
    810e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8110:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8114:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8116:	79fb      	ldrb	r3, [r7, #7]
    8118:	4619      	mov	r1, r3
    811a:	68f8      	ldr	r0, [r7, #12]
    811c:	4b08      	ldr	r3, [pc, #32]	; (8140 <_usbd_ep_is_stall_sent+0x40>)
    811e:	4798      	blx	r3
    8120:	4603      	mov	r3, r0
    8122:	4619      	mov	r1, r3
    8124:	79bb      	ldrb	r3, [r7, #6]
    8126:	2220      	movs	r2, #32
    8128:	fa02 f303 	lsl.w	r3, r2, r3
    812c:	400b      	ands	r3, r1
    812e:	2b00      	cmp	r3, #0
    8130:	bf14      	ite	ne
    8132:	2301      	movne	r3, #1
    8134:	2300      	moveq	r3, #0
    8136:	b2db      	uxtb	r3, r3
}
    8138:	4618      	mov	r0, r3
    813a:	3710      	adds	r7, #16
    813c:	46bd      	mov	sp, r7
    813e:	bd80      	pop	{r7, pc}
    8140:	00007a6d 	.word	0x00007a6d

00008144 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8144:	b580      	push	{r7, lr}
    8146:	b082      	sub	sp, #8
    8148:	af00      	add	r7, sp, #0
    814a:	4603      	mov	r3, r0
    814c:	460a      	mov	r2, r1
    814e:	71fb      	strb	r3, [r7, #7]
    8150:	4613      	mov	r3, r2
    8152:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8154:	79bb      	ldrb	r3, [r7, #6]
    8156:	2220      	movs	r2, #32
    8158:	409a      	lsls	r2, r3
    815a:	79fb      	ldrb	r3, [r7, #7]
    815c:	4611      	mov	r1, r2
    815e:	4618      	mov	r0, r3
    8160:	4b02      	ldr	r3, [pc, #8]	; (816c <_usbd_ep_ack_stall+0x28>)
    8162:	4798      	blx	r3
}
    8164:	bf00      	nop
    8166:	3708      	adds	r7, #8
    8168:	46bd      	mov	sp, r7
    816a:	bd80      	pop	{r7, pc}
    816c:	00007fbd 	.word	0x00007fbd

00008170 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8170:	b580      	push	{r7, lr}
    8172:	b082      	sub	sp, #8
    8174:	af00      	add	r7, sp, #0
    8176:	4603      	mov	r3, r0
    8178:	71fb      	strb	r3, [r7, #7]
    817a:	460b      	mov	r3, r1
    817c:	71bb      	strb	r3, [r7, #6]
    817e:	4613      	mov	r3, r2
    8180:	717b      	strb	r3, [r7, #5]
	if (en) {
    8182:	797b      	ldrb	r3, [r7, #5]
    8184:	2b00      	cmp	r3, #0
    8186:	d008      	beq.n	819a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8188:	79bb      	ldrb	r3, [r7, #6]
    818a:	2220      	movs	r2, #32
    818c:	409a      	lsls	r2, r3
    818e:	79fb      	ldrb	r3, [r7, #7]
    8190:	4611      	mov	r1, r2
    8192:	4618      	mov	r0, r3
    8194:	4b07      	ldr	r3, [pc, #28]	; (81b4 <_usbd_ep_int_stall_en+0x44>)
    8196:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8198:	e007      	b.n	81aa <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    819a:	79bb      	ldrb	r3, [r7, #6]
    819c:	2220      	movs	r2, #32
    819e:	409a      	lsls	r2, r3
    81a0:	79fb      	ldrb	r3, [r7, #7]
    81a2:	4611      	mov	r1, r2
    81a4:	4618      	mov	r0, r3
    81a6:	4b04      	ldr	r3, [pc, #16]	; (81b8 <_usbd_ep_int_stall_en+0x48>)
    81a8:	4798      	blx	r3
}
    81aa:	bf00      	nop
    81ac:	3708      	adds	r7, #8
    81ae:	46bd      	mov	sp, r7
    81b0:	bd80      	pop	{r7, pc}
    81b2:	bf00      	nop
    81b4:	00007fe5 	.word	0x00007fe5
    81b8:	0000800d 	.word	0x0000800d

000081bc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    81bc:	b580      	push	{r7, lr}
    81be:	b082      	sub	sp, #8
    81c0:	af00      	add	r7, sp, #0
    81c2:	4603      	mov	r3, r0
    81c4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    81c6:	79fb      	ldrb	r3, [r7, #7]
    81c8:	4619      	mov	r1, r3
    81ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    81ce:	4b03      	ldr	r3, [pc, #12]	; (81dc <_usbd_ep_stop_setup+0x20>)
    81d0:	4798      	blx	r3
}
    81d2:	bf00      	nop
    81d4:	3708      	adds	r7, #8
    81d6:	46bd      	mov	sp, r7
    81d8:	bd80      	pop	{r7, pc}
    81da:	bf00      	nop
    81dc:	00007b41 	.word	0x00007b41

000081e0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	b082      	sub	sp, #8
    81e4:	af00      	add	r7, sp, #0
    81e6:	4603      	mov	r3, r0
    81e8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    81ea:	79fb      	ldrb	r3, [r7, #7]
    81ec:	2210      	movs	r2, #16
    81ee:	4619      	mov	r1, r3
    81f0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    81f4:	4b05      	ldr	r3, [pc, #20]	; (820c <_usbd_ep_is_setup+0x2c>)
    81f6:	4798      	blx	r3
    81f8:	4603      	mov	r3, r0
    81fa:	2b00      	cmp	r3, #0
    81fc:	bf14      	ite	ne
    81fe:	2301      	movne	r3, #1
    8200:	2300      	moveq	r3, #0
    8202:	b2db      	uxtb	r3, r3
}
    8204:	4618      	mov	r0, r3
    8206:	3708      	adds	r7, #8
    8208:	46bd      	mov	sp, r7
    820a:	bd80      	pop	{r7, pc}
    820c:	00007a37 	.word	0x00007a37

00008210 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8210:	b580      	push	{r7, lr}
    8212:	b082      	sub	sp, #8
    8214:	af00      	add	r7, sp, #0
    8216:	4603      	mov	r3, r0
    8218:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    821a:	79fb      	ldrb	r3, [r7, #7]
    821c:	2110      	movs	r1, #16
    821e:	4618      	mov	r0, r3
    8220:	4b02      	ldr	r3, [pc, #8]	; (822c <_usbd_ep_ack_setup+0x1c>)
    8222:	4798      	blx	r3
}
    8224:	bf00      	nop
    8226:	3708      	adds	r7, #8
    8228:	46bd      	mov	sp, r7
    822a:	bd80      	pop	{r7, pc}
    822c:	00007fbd 	.word	0x00007fbd

00008230 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	4603      	mov	r3, r0
    8238:	71fb      	strb	r3, [r7, #7]
    823a:	460b      	mov	r3, r1
    823c:	71bb      	strb	r3, [r7, #6]
    823e:	4613      	mov	r3, r2
    8240:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8242:	797b      	ldrb	r3, [r7, #5]
    8244:	2b00      	cmp	r3, #0
    8246:	d00b      	beq.n	8260 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8248:	79bb      	ldrb	r3, [r7, #6]
    824a:	2201      	movs	r2, #1
    824c:	fa02 f303 	lsl.w	r3, r2, r3
    8250:	b2da      	uxtb	r2, r3
    8252:	79fb      	ldrb	r3, [r7, #7]
    8254:	4619      	mov	r1, r3
    8256:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    825a:	4b09      	ldr	r3, [pc, #36]	; (8280 <_usbd_ep_set_toggle+0x50>)
    825c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    825e:	e00a      	b.n	8276 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8260:	79bb      	ldrb	r3, [r7, #6]
    8262:	2201      	movs	r2, #1
    8264:	fa02 f303 	lsl.w	r3, r2, r3
    8268:	b2da      	uxtb	r2, r3
    826a:	79fb      	ldrb	r3, [r7, #7]
    826c:	4619      	mov	r1, r3
    826e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8272:	4b04      	ldr	r3, [pc, #16]	; (8284 <_usbd_ep_set_toggle+0x54>)
    8274:	4798      	blx	r3
}
    8276:	bf00      	nop
    8278:	3708      	adds	r7, #8
    827a:	46bd      	mov	sp, r7
    827c:	bd80      	pop	{r7, pc}
    827e:	bf00      	nop
    8280:	00007ac1 	.word	0x00007ac1
    8284:	00007b15 	.word	0x00007b15

00008288 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8288:	b580      	push	{r7, lr}
    828a:	b082      	sub	sp, #8
    828c:	af00      	add	r7, sp, #0
    828e:	4603      	mov	r3, r0
    8290:	460a      	mov	r2, r1
    8292:	71fb      	strb	r3, [r7, #7]
    8294:	4613      	mov	r3, r2
    8296:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8298:	79bb      	ldrb	r3, [r7, #6]
    829a:	2201      	movs	r2, #1
    829c:	409a      	lsls	r2, r3
    829e:	79fb      	ldrb	r3, [r7, #7]
    82a0:	4611      	mov	r1, r2
    82a2:	4618      	mov	r0, r3
    82a4:	4b02      	ldr	r3, [pc, #8]	; (82b0 <_usbd_ep_ack_io_cpt+0x28>)
    82a6:	4798      	blx	r3
}
    82a8:	bf00      	nop
    82aa:	3708      	adds	r7, #8
    82ac:	46bd      	mov	sp, r7
    82ae:	bd80      	pop	{r7, pc}
    82b0:	00007fbd 	.word	0x00007fbd

000082b4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    82b4:	b480      	push	{r7}
    82b6:	b085      	sub	sp, #20
    82b8:	af00      	add	r7, sp, #0
    82ba:	4603      	mov	r3, r0
    82bc:	603a      	str	r2, [r7, #0]
    82be:	71fb      	strb	r3, [r7, #7]
    82c0:	460b      	mov	r3, r1
    82c2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    82c4:	79fa      	ldrb	r2, [r7, #7]
    82c6:	79bb      	ldrb	r3, [r7, #6]
    82c8:	0052      	lsls	r2, r2, #1
    82ca:	4413      	add	r3, r2
    82cc:	011b      	lsls	r3, r3, #4
    82ce:	4a06      	ldr	r2, [pc, #24]	; (82e8 <_usbd_ep_set_buf+0x34>)
    82d0:	4413      	add	r3, r2
    82d2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    82d4:	68fb      	ldr	r3, [r7, #12]
    82d6:	683a      	ldr	r2, [r7, #0]
    82d8:	601a      	str	r2, [r3, #0]
}
    82da:	bf00      	nop
    82dc:	3714      	adds	r7, #20
    82de:	46bd      	mov	sp, r7
    82e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e4:	4770      	bx	lr
    82e6:	bf00      	nop
    82e8:	200009e4 	.word	0x200009e4

000082ec <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    82ec:	b480      	push	{r7}
    82ee:	b085      	sub	sp, #20
    82f0:	af00      	add	r7, sp, #0
    82f2:	4603      	mov	r3, r0
    82f4:	71fb      	strb	r3, [r7, #7]
    82f6:	460b      	mov	r3, r1
    82f8:	71bb      	strb	r3, [r7, #6]
    82fa:	4613      	mov	r3, r2
    82fc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    82fe:	79fa      	ldrb	r2, [r7, #7]
    8300:	79bb      	ldrb	r3, [r7, #6]
    8302:	0052      	lsls	r2, r2, #1
    8304:	4413      	add	r3, r2
    8306:	011b      	lsls	r3, r3, #4
    8308:	4a08      	ldr	r2, [pc, #32]	; (832c <_usbd_ep_set_in_count+0x40>)
    830a:	4413      	add	r3, r2
    830c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    830e:	88bb      	ldrh	r3, [r7, #4]
    8310:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8314:	b299      	uxth	r1, r3
    8316:	68fa      	ldr	r2, [r7, #12]
    8318:	6853      	ldr	r3, [r2, #4]
    831a:	f361 339b 	bfi	r3, r1, #14, #14
    831e:	6053      	str	r3, [r2, #4]
}
    8320:	bf00      	nop
    8322:	3714      	adds	r7, #20
    8324:	46bd      	mov	sp, r7
    8326:	f85d 7b04 	ldr.w	r7, [sp], #4
    832a:	4770      	bx	lr
    832c:	200009e4 	.word	0x200009e4

00008330 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8330:	b480      	push	{r7}
    8332:	b085      	sub	sp, #20
    8334:	af00      	add	r7, sp, #0
    8336:	4603      	mov	r3, r0
    8338:	71fb      	strb	r3, [r7, #7]
    833a:	460b      	mov	r3, r1
    833c:	71bb      	strb	r3, [r7, #6]
    833e:	4613      	mov	r3, r2
    8340:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8342:	79fa      	ldrb	r2, [r7, #7]
    8344:	79bb      	ldrb	r3, [r7, #6]
    8346:	0052      	lsls	r2, r2, #1
    8348:	4413      	add	r3, r2
    834a:	011b      	lsls	r3, r3, #4
    834c:	4a08      	ldr	r2, [pc, #32]	; (8370 <_usbd_ep_set_in_size+0x40>)
    834e:	4413      	add	r3, r2
    8350:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8352:	88bb      	ldrh	r3, [r7, #4]
    8354:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8358:	b299      	uxth	r1, r3
    835a:	68fa      	ldr	r2, [r7, #12]
    835c:	6853      	ldr	r3, [r2, #4]
    835e:	f361 030d 	bfi	r3, r1, #0, #14
    8362:	6053      	str	r3, [r2, #4]
}
    8364:	bf00      	nop
    8366:	3714      	adds	r7, #20
    8368:	46bd      	mov	sp, r7
    836a:	f85d 7b04 	ldr.w	r7, [sp], #4
    836e:	4770      	bx	lr
    8370:	200009e4 	.word	0x200009e4

00008374 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8374:	b480      	push	{r7}
    8376:	b085      	sub	sp, #20
    8378:	af00      	add	r7, sp, #0
    837a:	4603      	mov	r3, r0
    837c:	71fb      	strb	r3, [r7, #7]
    837e:	460b      	mov	r3, r1
    8380:	71bb      	strb	r3, [r7, #6]
    8382:	4613      	mov	r3, r2
    8384:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8386:	79fa      	ldrb	r2, [r7, #7]
    8388:	79bb      	ldrb	r3, [r7, #6]
    838a:	0052      	lsls	r2, r2, #1
    838c:	4413      	add	r3, r2
    838e:	011b      	lsls	r3, r3, #4
    8390:	4a08      	ldr	r2, [pc, #32]	; (83b4 <_usbd_ep_set_out_count+0x40>)
    8392:	4413      	add	r3, r2
    8394:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8396:	88bb      	ldrh	r3, [r7, #4]
    8398:	f3c3 030d 	ubfx	r3, r3, #0, #14
    839c:	b299      	uxth	r1, r3
    839e:	68fa      	ldr	r2, [r7, #12]
    83a0:	6853      	ldr	r3, [r2, #4]
    83a2:	f361 030d 	bfi	r3, r1, #0, #14
    83a6:	6053      	str	r3, [r2, #4]
}
    83a8:	bf00      	nop
    83aa:	3714      	adds	r7, #20
    83ac:	46bd      	mov	sp, r7
    83ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    83b2:	4770      	bx	lr
    83b4:	200009e4 	.word	0x200009e4

000083b8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    83b8:	b480      	push	{r7}
    83ba:	b085      	sub	sp, #20
    83bc:	af00      	add	r7, sp, #0
    83be:	4603      	mov	r3, r0
    83c0:	71fb      	strb	r3, [r7, #7]
    83c2:	460b      	mov	r3, r1
    83c4:	71bb      	strb	r3, [r7, #6]
    83c6:	4613      	mov	r3, r2
    83c8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    83ca:	79fa      	ldrb	r2, [r7, #7]
    83cc:	79bb      	ldrb	r3, [r7, #6]
    83ce:	0052      	lsls	r2, r2, #1
    83d0:	4413      	add	r3, r2
    83d2:	011b      	lsls	r3, r3, #4
    83d4:	4a08      	ldr	r2, [pc, #32]	; (83f8 <_usbd_ep_set_out_size+0x40>)
    83d6:	4413      	add	r3, r2
    83d8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    83da:	88bb      	ldrh	r3, [r7, #4]
    83dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    83e0:	b299      	uxth	r1, r3
    83e2:	68fa      	ldr	r2, [r7, #12]
    83e4:	6853      	ldr	r3, [r2, #4]
    83e6:	f361 339b 	bfi	r3, r1, #14, #14
    83ea:	6053      	str	r3, [r2, #4]
}
    83ec:	bf00      	nop
    83ee:	3714      	adds	r7, #20
    83f0:	46bd      	mov	sp, r7
    83f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f6:	4770      	bx	lr
    83f8:	200009e4 	.word	0x200009e4

000083fc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    83fc:	b580      	push	{r7, lr}
    83fe:	b084      	sub	sp, #16
    8400:	af00      	add	r7, sp, #0
    8402:	60ba      	str	r2, [r7, #8]
    8404:	607b      	str	r3, [r7, #4]
    8406:	4603      	mov	r3, r0
    8408:	73fb      	strb	r3, [r7, #15]
    840a:	460b      	mov	r3, r1
    840c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    840e:	68bb      	ldr	r3, [r7, #8]
    8410:	b29a      	uxth	r2, r3
    8412:	7bb9      	ldrb	r1, [r7, #14]
    8414:	7bfb      	ldrb	r3, [r7, #15]
    8416:	4618      	mov	r0, r3
    8418:	4b06      	ldr	r3, [pc, #24]	; (8434 <_usbd_ep_set_in_trans+0x38>)
    841a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    841c:	687b      	ldr	r3, [r7, #4]
    841e:	b29a      	uxth	r2, r3
    8420:	7bb9      	ldrb	r1, [r7, #14]
    8422:	7bfb      	ldrb	r3, [r7, #15]
    8424:	4618      	mov	r0, r3
    8426:	4b04      	ldr	r3, [pc, #16]	; (8438 <_usbd_ep_set_in_trans+0x3c>)
    8428:	4798      	blx	r3
}
    842a:	bf00      	nop
    842c:	3710      	adds	r7, #16
    842e:	46bd      	mov	sp, r7
    8430:	bd80      	pop	{r7, pc}
    8432:	bf00      	nop
    8434:	00008331 	.word	0x00008331
    8438:	000082ed 	.word	0x000082ed

0000843c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    843c:	b580      	push	{r7, lr}
    843e:	b084      	sub	sp, #16
    8440:	af00      	add	r7, sp, #0
    8442:	60ba      	str	r2, [r7, #8]
    8444:	607b      	str	r3, [r7, #4]
    8446:	4603      	mov	r3, r0
    8448:	73fb      	strb	r3, [r7, #15]
    844a:	460b      	mov	r3, r1
    844c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    844e:	68bb      	ldr	r3, [r7, #8]
    8450:	b29a      	uxth	r2, r3
    8452:	7bb9      	ldrb	r1, [r7, #14]
    8454:	7bfb      	ldrb	r3, [r7, #15]
    8456:	4618      	mov	r0, r3
    8458:	4b06      	ldr	r3, [pc, #24]	; (8474 <_usbd_ep_set_out_trans+0x38>)
    845a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    845c:	687b      	ldr	r3, [r7, #4]
    845e:	b29a      	uxth	r2, r3
    8460:	7bb9      	ldrb	r1, [r7, #14]
    8462:	7bfb      	ldrb	r3, [r7, #15]
    8464:	4618      	mov	r0, r3
    8466:	4b04      	ldr	r3, [pc, #16]	; (8478 <_usbd_ep_set_out_trans+0x3c>)
    8468:	4798      	blx	r3
}
    846a:	bf00      	nop
    846c:	3710      	adds	r7, #16
    846e:	46bd      	mov	sp, r7
    8470:	bd80      	pop	{r7, pc}
    8472:	bf00      	nop
    8474:	000083b9 	.word	0x000083b9
    8478:	00008375 	.word	0x00008375

0000847c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    847c:	b480      	push	{r7}
    847e:	b085      	sub	sp, #20
    8480:	af00      	add	r7, sp, #0
    8482:	4603      	mov	r3, r0
    8484:	460a      	mov	r2, r1
    8486:	71fb      	strb	r3, [r7, #7]
    8488:	4613      	mov	r3, r2
    848a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    848c:	79fa      	ldrb	r2, [r7, #7]
    848e:	79bb      	ldrb	r3, [r7, #6]
    8490:	0052      	lsls	r2, r2, #1
    8492:	4413      	add	r3, r2
    8494:	011b      	lsls	r3, r3, #4
    8496:	4a06      	ldr	r2, [pc, #24]	; (84b0 <_usbd_ep_clear_bank_status+0x34>)
    8498:	4413      	add	r3, r2
    849a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	2200      	movs	r2, #0
    84a0:	729a      	strb	r2, [r3, #10]
}
    84a2:	bf00      	nop
    84a4:	3714      	adds	r7, #20
    84a6:	46bd      	mov	sp, r7
    84a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ac:	4770      	bx	lr
    84ae:	bf00      	nop
    84b0:	200009e4 	.word	0x200009e4

000084b4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b082      	sub	sp, #8
    84b8:	af00      	add	r7, sp, #0
    84ba:	4603      	mov	r3, r0
    84bc:	71fb      	strb	r3, [r7, #7]
    84be:	460b      	mov	r3, r1
    84c0:	71bb      	strb	r3, [r7, #6]
    84c2:	4613      	mov	r3, r2
    84c4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    84c6:	797b      	ldrb	r3, [r7, #5]
    84c8:	2b00      	cmp	r3, #0
    84ca:	d00b      	beq.n	84e4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    84cc:	79bb      	ldrb	r3, [r7, #6]
    84ce:	2240      	movs	r2, #64	; 0x40
    84d0:	fa02 f303 	lsl.w	r3, r2, r3
    84d4:	b2da      	uxtb	r2, r3
    84d6:	79fb      	ldrb	r3, [r7, #7]
    84d8:	4619      	mov	r1, r3
    84da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84de:	4b09      	ldr	r3, [pc, #36]	; (8504 <_usbd_ep_set_in_rdy+0x50>)
    84e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    84e2:	e00a      	b.n	84fa <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    84e4:	79bb      	ldrb	r3, [r7, #6]
    84e6:	2240      	movs	r2, #64	; 0x40
    84e8:	fa02 f303 	lsl.w	r3, r2, r3
    84ec:	b2da      	uxtb	r2, r3
    84ee:	79fb      	ldrb	r3, [r7, #7]
    84f0:	4619      	mov	r1, r3
    84f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84f6:	4b04      	ldr	r3, [pc, #16]	; (8508 <_usbd_ep_set_in_rdy+0x54>)
    84f8:	4798      	blx	r3
}
    84fa:	bf00      	nop
    84fc:	3708      	adds	r7, #8
    84fe:	46bd      	mov	sp, r7
    8500:	bd80      	pop	{r7, pc}
    8502:	bf00      	nop
    8504:	00007ac1 	.word	0x00007ac1
    8508:	00007b15 	.word	0x00007b15

0000850c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    850c:	b580      	push	{r7, lr}
    850e:	b082      	sub	sp, #8
    8510:	af00      	add	r7, sp, #0
    8512:	4603      	mov	r3, r0
    8514:	71fb      	strb	r3, [r7, #7]
    8516:	460b      	mov	r3, r1
    8518:	71bb      	strb	r3, [r7, #6]
    851a:	4613      	mov	r3, r2
    851c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    851e:	797b      	ldrb	r3, [r7, #5]
    8520:	2b00      	cmp	r3, #0
    8522:	d00b      	beq.n	853c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8524:	79bb      	ldrb	r3, [r7, #6]
    8526:	2240      	movs	r2, #64	; 0x40
    8528:	fa02 f303 	lsl.w	r3, r2, r3
    852c:	b2da      	uxtb	r2, r3
    852e:	79fb      	ldrb	r3, [r7, #7]
    8530:	4619      	mov	r1, r3
    8532:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8536:	4b09      	ldr	r3, [pc, #36]	; (855c <_usbd_ep_set_out_rdy+0x50>)
    8538:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    853a:	e00a      	b.n	8552 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    853c:	79bb      	ldrb	r3, [r7, #6]
    853e:	2240      	movs	r2, #64	; 0x40
    8540:	fa02 f303 	lsl.w	r3, r2, r3
    8544:	b2da      	uxtb	r2, r3
    8546:	79fb      	ldrb	r3, [r7, #7]
    8548:	4619      	mov	r1, r3
    854a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    854e:	4b04      	ldr	r3, [pc, #16]	; (8560 <_usbd_ep_set_out_rdy+0x54>)
    8550:	4798      	blx	r3
}
    8552:	bf00      	nop
    8554:	3708      	adds	r7, #8
    8556:	46bd      	mov	sp, r7
    8558:	bd80      	pop	{r7, pc}
    855a:	bf00      	nop
    855c:	00007b15 	.word	0x00007b15
    8560:	00007ac1 	.word	0x00007ac1

00008564 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8564:	b480      	push	{r7}
    8566:	b083      	sub	sp, #12
    8568:	af00      	add	r7, sp, #0
    856a:	4603      	mov	r3, r0
    856c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    856e:	88fb      	ldrh	r3, [r7, #6]
    8570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8574:	d820      	bhi.n	85b8 <_usbd_ep_pcksize_size+0x54>
    8576:	88fb      	ldrh	r3, [r7, #6]
    8578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    857c:	d81a      	bhi.n	85b4 <_usbd_ep_pcksize_size+0x50>
    857e:	88fb      	ldrh	r3, [r7, #6]
    8580:	2b80      	cmp	r3, #128	; 0x80
    8582:	d815      	bhi.n	85b0 <_usbd_ep_pcksize_size+0x4c>
    8584:	88fb      	ldrh	r3, [r7, #6]
    8586:	2b40      	cmp	r3, #64	; 0x40
    8588:	d810      	bhi.n	85ac <_usbd_ep_pcksize_size+0x48>
    858a:	88fb      	ldrh	r3, [r7, #6]
    858c:	2b20      	cmp	r3, #32
    858e:	d80b      	bhi.n	85a8 <_usbd_ep_pcksize_size+0x44>
    8590:	88fb      	ldrh	r3, [r7, #6]
    8592:	2b10      	cmp	r3, #16
    8594:	d806      	bhi.n	85a4 <_usbd_ep_pcksize_size+0x40>
    8596:	88fb      	ldrh	r3, [r7, #6]
    8598:	2b08      	cmp	r3, #8
    859a:	bf8c      	ite	hi
    859c:	2301      	movhi	r3, #1
    859e:	2300      	movls	r3, #0
    85a0:	b2db      	uxtb	r3, r3
    85a2:	e00a      	b.n	85ba <_usbd_ep_pcksize_size+0x56>
    85a4:	2302      	movs	r3, #2
    85a6:	e008      	b.n	85ba <_usbd_ep_pcksize_size+0x56>
    85a8:	2303      	movs	r3, #3
    85aa:	e006      	b.n	85ba <_usbd_ep_pcksize_size+0x56>
    85ac:	2304      	movs	r3, #4
    85ae:	e004      	b.n	85ba <_usbd_ep_pcksize_size+0x56>
    85b0:	2305      	movs	r3, #5
    85b2:	e002      	b.n	85ba <_usbd_ep_pcksize_size+0x56>
    85b4:	2306      	movs	r3, #6
    85b6:	e000      	b.n	85ba <_usbd_ep_pcksize_size+0x56>
    85b8:	2307      	movs	r3, #7
}
    85ba:	4618      	mov	r0, r3
    85bc:	370c      	adds	r7, #12
    85be:	46bd      	mov	sp, r7
    85c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c4:	4770      	bx	lr
	...

000085c8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    85c8:	b480      	push	{r7}
    85ca:	b085      	sub	sp, #20
    85cc:	af00      	add	r7, sp, #0
    85ce:	4603      	mov	r3, r0
    85d0:	460a      	mov	r2, r1
    85d2:	71fb      	strb	r3, [r7, #7]
    85d4:	4613      	mov	r3, r2
    85d6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    85d8:	79fb      	ldrb	r3, [r7, #7]
    85da:	2b00      	cmp	r3, #0
    85dc:	d008      	beq.n	85f0 <_usb_d_dev_ept+0x28>
    85de:	79bb      	ldrb	r3, [r7, #6]
    85e0:	2b00      	cmp	r3, #0
    85e2:	d003      	beq.n	85ec <_usb_d_dev_ept+0x24>
    85e4:	79fb      	ldrb	r3, [r7, #7]
    85e6:	3304      	adds	r3, #4
    85e8:	b2db      	uxtb	r3, r3
    85ea:	e002      	b.n	85f2 <_usb_d_dev_ept+0x2a>
    85ec:	79fb      	ldrb	r3, [r7, #7]
    85ee:	e000      	b.n	85f2 <_usb_d_dev_ept+0x2a>
    85f0:	2300      	movs	r3, #0
    85f2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    85f4:	7bfa      	ldrb	r2, [r7, #15]
    85f6:	4613      	mov	r3, r2
    85f8:	009b      	lsls	r3, r3, #2
    85fa:	4413      	add	r3, r2
    85fc:	009b      	lsls	r3, r3, #2
    85fe:	3310      	adds	r3, #16
    8600:	4a04      	ldr	r2, [pc, #16]	; (8614 <_usb_d_dev_ept+0x4c>)
    8602:	4413      	add	r3, r2
    8604:	3304      	adds	r3, #4
}
    8606:	4618      	mov	r0, r3
    8608:	3714      	adds	r7, #20
    860a:	46bd      	mov	sp, r7
    860c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8610:	4770      	bx	lr
    8612:	bf00      	nop
    8614:	2000091c 	.word	0x2000091c

00008618 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8618:	b580      	push	{r7, lr}
    861a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    861c:	2104      	movs	r1, #4
    861e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8622:	4b03      	ldr	r3, [pc, #12]	; (8630 <_usb_d_dev_sof+0x18>)
    8624:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8626:	4b03      	ldr	r3, [pc, #12]	; (8634 <_usb_d_dev_sof+0x1c>)
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	4798      	blx	r3
}
    862c:	bf00      	nop
    862e:	bd80      	pop	{r7, pc}
    8630:	00007c8f 	.word	0x00007c8f
    8634:	2000091c 	.word	0x2000091c

00008638 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8638:	b580      	push	{r7, lr}
    863a:	b084      	sub	sp, #16
    863c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    863e:	2300      	movs	r3, #0
    8640:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8642:	f240 2101 	movw	r1, #513	; 0x201
    8646:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    864a:	4b1a      	ldr	r3, [pc, #104]	; (86b4 <_usb_d_dev_lpmsusp+0x7c>)
    864c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    864e:	f240 2101 	movw	r1, #513	; 0x201
    8652:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8656:	4b18      	ldr	r3, [pc, #96]	; (86b8 <_usb_d_dev_lpmsusp+0x80>)
    8658:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    865a:	2170      	movs	r1, #112	; 0x70
    865c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8660:	4b16      	ldr	r3, [pc, #88]	; (86bc <_usb_d_dev_lpmsusp+0x84>)
    8662:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8664:	2300      	movs	r3, #0
    8666:	73fb      	strb	r3, [r7, #15]
    8668:	e018      	b.n	869c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    866a:	7bfb      	ldrb	r3, [r7, #15]
    866c:	015b      	lsls	r3, r3, #5
    866e:	4a14      	ldr	r2, [pc, #80]	; (86c0 <_usb_d_dev_lpmsusp+0x88>)
    8670:	4413      	add	r3, r2
    8672:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	891b      	ldrh	r3, [r3, #8]
    8678:	f3c3 0303 	ubfx	r3, r3, #0, #4
    867c:	b2db      	uxtb	r3, r3
    867e:	2b03      	cmp	r3, #3
    8680:	d109      	bne.n	8696 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8682:	687b      	ldr	r3, [r7, #4]
    8684:	891b      	ldrh	r3, [r3, #8]
    8686:	f3c3 130a 	ubfx	r3, r3, #4, #11
    868a:	b29b      	uxth	r3, r3
    868c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    868e:	687b      	ldr	r3, [r7, #4]
    8690:	2200      	movs	r2, #0
    8692:	811a      	strh	r2, [r3, #8]
			break;
    8694:	e005      	b.n	86a2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8696:	7bfb      	ldrb	r3, [r7, #15]
    8698:	3301      	adds	r3, #1
    869a:	73fb      	strb	r3, [r7, #15]
    869c:	7bfb      	ldrb	r3, [r7, #15]
    869e:	2b03      	cmp	r3, #3
    86a0:	d9e3      	bls.n	866a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    86a2:	4b08      	ldr	r3, [pc, #32]	; (86c4 <_usb_d_dev_lpmsusp+0x8c>)
    86a4:	685b      	ldr	r3, [r3, #4]
    86a6:	68b9      	ldr	r1, [r7, #8]
    86a8:	2003      	movs	r0, #3
    86aa:	4798      	blx	r3
}
    86ac:	bf00      	nop
    86ae:	3710      	adds	r7, #16
    86b0:	46bd      	mov	sp, r7
    86b2:	bd80      	pop	{r7, pc}
    86b4:	00007c8f 	.word	0x00007c8f
    86b8:	00007ce5 	.word	0x00007ce5
    86bc:	00007cad 	.word	0x00007cad
    86c0:	200009e4 	.word	0x200009e4
    86c4:	2000091c 	.word	0x2000091c

000086c8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    86cc:	2180      	movs	r1, #128	; 0x80
    86ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86d2:	4b04      	ldr	r3, [pc, #16]	; (86e4 <_usb_d_dev_ramerr+0x1c>)
    86d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    86d6:	4b04      	ldr	r3, [pc, #16]	; (86e8 <_usb_d_dev_ramerr+0x20>)
    86d8:	685b      	ldr	r3, [r3, #4]
    86da:	2100      	movs	r1, #0
    86dc:	2005      	movs	r0, #5
    86de:	4798      	blx	r3
}
    86e0:	bf00      	nop
    86e2:	bd80      	pop	{r7, pc}
    86e4:	00007c8f 	.word	0x00007c8f
    86e8:	2000091c 	.word	0x2000091c

000086ec <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    86ec:	b580      	push	{r7, lr}
    86ee:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    86f0:	2170      	movs	r1, #112	; 0x70
    86f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86f6:	4b0b      	ldr	r3, [pc, #44]	; (8724 <_usb_d_dev_wakeup+0x38>)
    86f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    86fa:	2170      	movs	r1, #112	; 0x70
    86fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8700:	4b09      	ldr	r3, [pc, #36]	; (8728 <_usb_d_dev_wakeup+0x3c>)
    8702:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8704:	f240 2101 	movw	r1, #513	; 0x201
    8708:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    870c:	4b07      	ldr	r3, [pc, #28]	; (872c <_usb_d_dev_wakeup+0x40>)
    870e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8710:	2000      	movs	r0, #0
    8712:	4b07      	ldr	r3, [pc, #28]	; (8730 <_usb_d_dev_wakeup+0x44>)
    8714:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8716:	4b07      	ldr	r3, [pc, #28]	; (8734 <_usb_d_dev_wakeup+0x48>)
    8718:	685b      	ldr	r3, [r3, #4]
    871a:	2100      	movs	r1, #0
    871c:	2002      	movs	r0, #2
    871e:	4798      	blx	r3
}
    8720:	bf00      	nop
    8722:	bd80      	pop	{r7, pc}
    8724:	00007c8f 	.word	0x00007c8f
    8728:	00007ce5 	.word	0x00007ce5
    872c:	00007cad 	.word	0x00007cad
    8730:	00007f8d 	.word	0x00007f8d
    8734:	2000091c 	.word	0x2000091c

00008738 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8738:	b580      	push	{r7, lr}
    873a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    873c:	2200      	movs	r2, #0
    873e:	2100      	movs	r1, #0
    8740:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8744:	4b0d      	ldr	r3, [pc, #52]	; (877c <_usb_d_dev_reset+0x44>)
    8746:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8748:	2108      	movs	r1, #8
    874a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    874e:	4b0c      	ldr	r3, [pc, #48]	; (8780 <_usb_d_dev_reset+0x48>)
    8750:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8752:	2170      	movs	r1, #112	; 0x70
    8754:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8758:	4b0a      	ldr	r3, [pc, #40]	; (8784 <_usb_d_dev_reset+0x4c>)
    875a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    875c:	f240 2101 	movw	r1, #513	; 0x201
    8760:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8764:	4b08      	ldr	r3, [pc, #32]	; (8788 <_usb_d_dev_reset+0x50>)
    8766:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8768:	4b08      	ldr	r3, [pc, #32]	; (878c <_usb_d_dev_reset+0x54>)
    876a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    876c:	4b08      	ldr	r3, [pc, #32]	; (8790 <_usb_d_dev_reset+0x58>)
    876e:	685b      	ldr	r3, [r3, #4]
    8770:	2100      	movs	r1, #0
    8772:	2001      	movs	r0, #1
    8774:	4798      	blx	r3
}
    8776:	bf00      	nop
    8778:	bd80      	pop	{r7, pc}
    877a:	bf00      	nop
    877c:	00007c25 	.word	0x00007c25
    8780:	00007c8f 	.word	0x00007c8f
    8784:	00007ce5 	.word	0x00007ce5
    8788:	00007cad 	.word	0x00007cad
    878c:	000092f5 	.word	0x000092f5
    8790:	2000091c 	.word	0x2000091c

00008794 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8794:	b580      	push	{r7, lr}
    8796:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8798:	f240 2101 	movw	r1, #513	; 0x201
    879c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87a0:	4b09      	ldr	r3, [pc, #36]	; (87c8 <_usb_d_dev_suspend+0x34>)
    87a2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    87a4:	f240 2101 	movw	r1, #513	; 0x201
    87a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ac:	4b07      	ldr	r3, [pc, #28]	; (87cc <_usb_d_dev_suspend+0x38>)
    87ae:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    87b0:	2170      	movs	r1, #112	; 0x70
    87b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87b6:	4b06      	ldr	r3, [pc, #24]	; (87d0 <_usb_d_dev_suspend+0x3c>)
    87b8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    87ba:	4b06      	ldr	r3, [pc, #24]	; (87d4 <_usb_d_dev_suspend+0x40>)
    87bc:	685b      	ldr	r3, [r3, #4]
    87be:	2100      	movs	r1, #0
    87c0:	2004      	movs	r0, #4
    87c2:	4798      	blx	r3
}
    87c4:	bf00      	nop
    87c6:	bd80      	pop	{r7, pc}
    87c8:	00007c8f 	.word	0x00007c8f
    87cc:	00007ce5 	.word	0x00007ce5
    87d0:	00007cad 	.word	0x00007cad
    87d4:	2000091c 	.word	0x2000091c

000087d8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    87d8:	b580      	push	{r7, lr}
    87da:	b082      	sub	sp, #8
    87dc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    87de:	2301      	movs	r3, #1
    87e0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    87e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87e6:	4b22      	ldr	r3, [pc, #136]	; (8870 <_usb_d_dev_handle_nep+0x98>)
    87e8:	4798      	blx	r3
    87ea:	4603      	mov	r3, r0
    87ec:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    87ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87f2:	4b20      	ldr	r3, [pc, #128]	; (8874 <_usb_d_dev_handle_nep+0x9c>)
    87f4:	4798      	blx	r3
    87f6:	4603      	mov	r3, r0
    87f8:	461a      	mov	r2, r3
    87fa:	88bb      	ldrh	r3, [r7, #4]
    87fc:	4013      	ands	r3, r2
    87fe:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8800:	88bb      	ldrh	r3, [r7, #4]
    8802:	f003 0304 	and.w	r3, r3, #4
    8806:	2b00      	cmp	r3, #0
    8808:	d003      	beq.n	8812 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    880a:	4b1b      	ldr	r3, [pc, #108]	; (8878 <_usb_d_dev_handle_nep+0xa0>)
    880c:	4798      	blx	r3
		return true;
    880e:	2301      	movs	r3, #1
    8810:	e02a      	b.n	8868 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8812:	88bb      	ldrh	r3, [r7, #4]
    8814:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8818:	2b00      	cmp	r3, #0
    881a:	d002      	beq.n	8822 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    881c:	4b17      	ldr	r3, [pc, #92]	; (887c <_usb_d_dev_handle_nep+0xa4>)
    881e:	4798      	blx	r3
    8820:	e021      	b.n	8866 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8822:	88bb      	ldrh	r3, [r7, #4]
    8824:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8828:	2b00      	cmp	r3, #0
    882a:	d002      	beq.n	8832 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    882c:	4b14      	ldr	r3, [pc, #80]	; (8880 <_usb_d_dev_handle_nep+0xa8>)
    882e:	4798      	blx	r3
    8830:	e019      	b.n	8866 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8832:	88bb      	ldrh	r3, [r7, #4]
    8834:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8838:	2b00      	cmp	r3, #0
    883a:	d002      	beq.n	8842 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    883c:	4b11      	ldr	r3, [pc, #68]	; (8884 <_usb_d_dev_handle_nep+0xac>)
    883e:	4798      	blx	r3
    8840:	e011      	b.n	8866 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8842:	88bb      	ldrh	r3, [r7, #4]
    8844:	f003 0308 	and.w	r3, r3, #8
    8848:	2b00      	cmp	r3, #0
    884a:	d002      	beq.n	8852 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    884c:	4b0e      	ldr	r3, [pc, #56]	; (8888 <_usb_d_dev_handle_nep+0xb0>)
    884e:	4798      	blx	r3
    8850:	e009      	b.n	8866 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8852:	88bb      	ldrh	r3, [r7, #4]
    8854:	f003 0301 	and.w	r3, r3, #1
    8858:	2b00      	cmp	r3, #0
    885a:	d002      	beq.n	8862 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    885c:	4b0b      	ldr	r3, [pc, #44]	; (888c <_usb_d_dev_handle_nep+0xb4>)
    885e:	4798      	blx	r3
    8860:	e001      	b.n	8866 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8862:	2300      	movs	r3, #0
    8864:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8866:	79fb      	ldrb	r3, [r7, #7]
}
    8868:	4618      	mov	r0, r3
    886a:	3708      	adds	r7, #8
    886c:	46bd      	mov	sp, r7
    886e:	bd80      	pop	{r7, pc}
    8870:	00007c75 	.word	0x00007c75
    8874:	00007ccb 	.word	0x00007ccb
    8878:	00008619 	.word	0x00008619
    887c:	00008639 	.word	0x00008639
    8880:	000086c9 	.word	0x000086c9
    8884:	000086ed 	.word	0x000086ed
    8888:	00008739 	.word	0x00008739
    888c:	00008795 	.word	0x00008795

00008890 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8890:	b590      	push	{r4, r7, lr}
    8892:	b089      	sub	sp, #36	; 0x24
    8894:	af00      	add	r7, sp, #0
    8896:	6078      	str	r0, [r7, #4]
    8898:	460b      	mov	r3, r1
    889a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    889c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88a0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    88a2:	687b      	ldr	r3, [r7, #4]
    88a4:	7c9b      	ldrb	r3, [r3, #18]
    88a6:	f003 030f 	and.w	r3, r3, #15
    88aa:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    88ac:	7dfb      	ldrb	r3, [r7, #23]
    88ae:	015b      	lsls	r3, r3, #5
    88b0:	4a73      	ldr	r2, [pc, #460]	; (8a80 <_usb_d_dev_in_next+0x1f0>)
    88b2:	4413      	add	r3, r2
    88b4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    88b6:	78fb      	ldrb	r3, [r7, #3]
    88b8:	2b00      	cmp	r3, #0
    88ba:	d006      	beq.n	88ca <_usb_d_dev_in_next+0x3a>
    88bc:	693b      	ldr	r3, [r7, #16]
    88be:	3310      	adds	r3, #16
    88c0:	685b      	ldr	r3, [r3, #4]
    88c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    88c6:	b29b      	uxth	r3, r3
    88c8:	e000      	b.n	88cc <_usb_d_dev_in_next+0x3c>
    88ca:	2300      	movs	r3, #0
    88cc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    88ce:	687b      	ldr	r3, [r7, #4]
    88d0:	8a1b      	ldrh	r3, [r3, #16]
    88d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    88d6:	4293      	cmp	r3, r2
    88d8:	d103      	bne.n	88e2 <_usb_d_dev_in_next+0x52>
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	8a1b      	ldrh	r3, [r3, #16]
    88de:	b21b      	sxth	r3, r3
    88e0:	e004      	b.n	88ec <_usb_d_dev_in_next+0x5c>
    88e2:	687b      	ldr	r3, [r7, #4]
    88e4:	8a1b      	ldrh	r3, [r3, #16]
    88e6:	3b01      	subs	r3, #1
    88e8:	b29b      	uxth	r3, r3
    88ea:	b21b      	sxth	r3, r3
    88ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    88f0:	4013      	ands	r3, r2
    88f2:	b21b      	sxth	r3, r3
    88f4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    88f6:	2300      	movs	r3, #0
    88f8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    88fa:	687b      	ldr	r3, [r7, #4]
    88fc:	7cdb      	ldrb	r3, [r3, #19]
    88fe:	f003 0307 	and.w	r3, r3, #7
    8902:	b2db      	uxtb	r3, r3
    8904:	2b01      	cmp	r3, #1
    8906:	bf0c      	ite	eq
    8908:	2301      	moveq	r3, #1
    890a:	2300      	movne	r3, #0
    890c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    890e:	78fb      	ldrb	r3, [r7, #3]
    8910:	2b00      	cmp	r3, #0
    8912:	d004      	beq.n	891e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8914:	7dfb      	ldrb	r3, [r7, #23]
    8916:	2101      	movs	r1, #1
    8918:	4618      	mov	r0, r3
    891a:	4b5a      	ldr	r3, [pc, #360]	; (8a84 <_usb_d_dev_in_next+0x1f4>)
    891c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    891e:	687b      	ldr	r3, [r7, #4]
    8920:	689a      	ldr	r2, [r3, #8]
    8922:	89fb      	ldrh	r3, [r7, #14]
    8924:	441a      	add	r2, r3
    8926:	687b      	ldr	r3, [r7, #4]
    8928:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	689a      	ldr	r2, [r3, #8]
    892e:	687b      	ldr	r3, [r7, #4]
    8930:	685b      	ldr	r3, [r3, #4]
    8932:	429a      	cmp	r2, r3
    8934:	d243      	bcs.n	89be <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	685b      	ldr	r3, [r3, #4]
    893a:	b29a      	uxth	r2, r3
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	689b      	ldr	r3, [r3, #8]
    8940:	b29b      	uxth	r3, r3
    8942:	1ad3      	subs	r3, r2, r3
    8944:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	7cdb      	ldrb	r3, [r3, #19]
    894a:	f003 0320 	and.w	r3, r3, #32
    894e:	b2db      	uxtb	r3, r3
    8950:	2b00      	cmp	r3, #0
    8952:	d01b      	beq.n	898c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8954:	687b      	ldr	r3, [r7, #4]
    8956:	8a1b      	ldrh	r3, [r3, #16]
    8958:	8bfa      	ldrh	r2, [r7, #30]
    895a:	429a      	cmp	r2, r3
    895c:	d902      	bls.n	8964 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	8a1b      	ldrh	r3, [r3, #16]
    8962:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	68d8      	ldr	r0, [r3, #12]
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	681a      	ldr	r2, [r3, #0]
    896c:	687b      	ldr	r3, [r7, #4]
    896e:	689b      	ldr	r3, [r3, #8]
    8970:	4413      	add	r3, r2
    8972:	8bfa      	ldrh	r2, [r7, #30]
    8974:	4619      	mov	r1, r3
    8976:	4b44      	ldr	r3, [pc, #272]	; (8a88 <_usb_d_dev_in_next+0x1f8>)
    8978:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	68db      	ldr	r3, [r3, #12]
    897e:	461a      	mov	r2, r3
    8980:	7dfb      	ldrb	r3, [r7, #23]
    8982:	2101      	movs	r1, #1
    8984:	4618      	mov	r0, r3
    8986:	4b41      	ldr	r3, [pc, #260]	; (8a8c <_usb_d_dev_in_next+0x1fc>)
    8988:	4798      	blx	r3
    898a:	e011      	b.n	89b0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    898c:	8bfb      	ldrh	r3, [r7, #30]
    898e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8992:	d902      	bls.n	899a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8998:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    899a:	687b      	ldr	r3, [r7, #4]
    899c:	681a      	ldr	r2, [r3, #0]
    899e:	687b      	ldr	r3, [r7, #4]
    89a0:	689b      	ldr	r3, [r3, #8]
    89a2:	4413      	add	r3, r2
    89a4:	461a      	mov	r2, r3
    89a6:	7dfb      	ldrb	r3, [r7, #23]
    89a8:	2101      	movs	r1, #1
    89aa:	4618      	mov	r0, r3
    89ac:	4b37      	ldr	r3, [pc, #220]	; (8a8c <_usb_d_dev_in_next+0x1fc>)
    89ae:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    89b0:	8bfa      	ldrh	r2, [r7, #30]
    89b2:	7df8      	ldrb	r0, [r7, #23]
    89b4:	2300      	movs	r3, #0
    89b6:	2101      	movs	r1, #1
    89b8:	4c35      	ldr	r4, [pc, #212]	; (8a90 <_usb_d_dev_in_next+0x200>)
    89ba:	47a0      	blx	r4
		goto _in_tx_exec;
    89bc:	e041      	b.n	8a42 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	7cdb      	ldrb	r3, [r3, #19]
    89c2:	f003 0310 	and.w	r3, r3, #16
    89c6:	b2db      	uxtb	r3, r3
    89c8:	2b00      	cmp	r3, #0
    89ca:	d00b      	beq.n	89e4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    89cc:	687a      	ldr	r2, [r7, #4]
    89ce:	7cd3      	ldrb	r3, [r2, #19]
    89d0:	f36f 1304 	bfc	r3, #4, #1
    89d4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    89d6:	7df8      	ldrb	r0, [r7, #23]
    89d8:	2300      	movs	r3, #0
    89da:	2200      	movs	r2, #0
    89dc:	2101      	movs	r1, #1
    89de:	4c2c      	ldr	r4, [pc, #176]	; (8a90 <_usb_d_dev_in_next+0x200>)
    89e0:	47a0      	blx	r4
		goto _in_tx_exec;
    89e2:	e02e      	b.n	8a42 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    89e4:	7afb      	ldrb	r3, [r7, #11]
    89e6:	2b00      	cmp	r3, #0
    89e8:	d006      	beq.n	89f8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    89ea:	7dfb      	ldrb	r3, [r7, #23]
    89ec:	224b      	movs	r2, #75	; 0x4b
    89ee:	4619      	mov	r1, r3
    89f0:	69b8      	ldr	r0, [r7, #24]
    89f2:	4b28      	ldr	r3, [pc, #160]	; (8a94 <_usb_d_dev_in_next+0x204>)
    89f4:	4798      	blx	r3
    89f6:	e005      	b.n	8a04 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    89f8:	7dfb      	ldrb	r3, [r7, #23]
    89fa:	224a      	movs	r2, #74	; 0x4a
    89fc:	4619      	mov	r1, r3
    89fe:	69b8      	ldr	r0, [r7, #24]
    8a00:	4b24      	ldr	r3, [pc, #144]	; (8a94 <_usb_d_dev_in_next+0x204>)
    8a02:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8a04:	687b      	ldr	r3, [r7, #4]
    8a06:	8a1b      	ldrh	r3, [r3, #16]
    8a08:	89ba      	ldrh	r2, [r7, #12]
    8a0a:	429a      	cmp	r2, r3
    8a0c:	d114      	bne.n	8a38 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8a0e:	687a      	ldr	r2, [r7, #4]
    8a10:	7cd3      	ldrb	r3, [r2, #19]
    8a12:	f36f 1386 	bfc	r3, #6, #1
    8a16:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8a18:	4b1f      	ldr	r3, [pc, #124]	; (8a98 <_usb_d_dev_in_next+0x208>)
    8a1a:	68db      	ldr	r3, [r3, #12]
    8a1c:	687a      	ldr	r2, [r7, #4]
    8a1e:	7c90      	ldrb	r0, [r2, #18]
    8a20:	687a      	ldr	r2, [r7, #4]
    8a22:	6892      	ldr	r2, [r2, #8]
    8a24:	4611      	mov	r1, r2
    8a26:	4798      	blx	r3
    8a28:	4603      	mov	r3, r0
    8a2a:	2b00      	cmp	r3, #0
    8a2c:	d124      	bne.n	8a78 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8a2e:	687a      	ldr	r2, [r7, #4]
    8a30:	7cd3      	ldrb	r3, [r2, #19]
    8a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8a36:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8a38:	2100      	movs	r1, #0
    8a3a:	6878      	ldr	r0, [r7, #4]
    8a3c:	4b17      	ldr	r3, [pc, #92]	; (8a9c <_usb_d_dev_in_next+0x20c>)
    8a3e:	4798      	blx	r3
	return;
    8a40:	e01b      	b.n	8a7a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8a42:	78fb      	ldrb	r3, [r7, #3]
    8a44:	f083 0301 	eor.w	r3, r3, #1
    8a48:	b2db      	uxtb	r3, r3
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d00d      	beq.n	8a6a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8a4e:	7afb      	ldrb	r3, [r7, #11]
    8a50:	2b00      	cmp	r3, #0
    8a52:	d002      	beq.n	8a5a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8a54:	234e      	movs	r3, #78	; 0x4e
    8a56:	777b      	strb	r3, [r7, #29]
    8a58:	e001      	b.n	8a5e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8a5a:	234a      	movs	r3, #74	; 0x4a
    8a5c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8a5e:	7f7a      	ldrb	r2, [r7, #29]
    8a60:	7dfb      	ldrb	r3, [r7, #23]
    8a62:	4619      	mov	r1, r3
    8a64:	69b8      	ldr	r0, [r7, #24]
    8a66:	4b0e      	ldr	r3, [pc, #56]	; (8aa0 <_usb_d_dev_in_next+0x210>)
    8a68:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8a6a:	7dfb      	ldrb	r3, [r7, #23]
    8a6c:	2201      	movs	r2, #1
    8a6e:	2101      	movs	r1, #1
    8a70:	4618      	mov	r0, r3
    8a72:	4b0c      	ldr	r3, [pc, #48]	; (8aa4 <_usb_d_dev_in_next+0x214>)
    8a74:	4798      	blx	r3
    8a76:	e000      	b.n	8a7a <_usb_d_dev_in_next+0x1ea>
			return;
    8a78:	bf00      	nop
}
    8a7a:	3724      	adds	r7, #36	; 0x24
    8a7c:	46bd      	mov	sp, r7
    8a7e:	bd90      	pop	{r4, r7, pc}
    8a80:	200009e4 	.word	0x200009e4
    8a84:	00008289 	.word	0x00008289
    8a88:	0000d0dd 	.word	0x0000d0dd
    8a8c:	000082b5 	.word	0x000082b5
    8a90:	000083fd 	.word	0x000083fd
    8a94:	00007b95 	.word	0x00007b95
    8a98:	2000091c 	.word	0x2000091c
    8a9c:	00009bb9 	.word	0x00009bb9
    8aa0:	00007b69 	.word	0x00007b69
    8aa4:	000084b5 	.word	0x000084b5

00008aa8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8aa8:	b590      	push	{r4, r7, lr}
    8aaa:	b08b      	sub	sp, #44	; 0x2c
    8aac:	af00      	add	r7, sp, #0
    8aae:	6078      	str	r0, [r7, #4]
    8ab0:	460b      	mov	r3, r1
    8ab2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8ab4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ab8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8aba:	687b      	ldr	r3, [r7, #4]
    8abc:	7c9b      	ldrb	r3, [r3, #18]
    8abe:	f003 030f 	and.w	r3, r3, #15
    8ac2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8ac4:	7ffb      	ldrb	r3, [r7, #31]
    8ac6:	015b      	lsls	r3, r3, #5
    8ac8:	4a94      	ldr	r2, [pc, #592]	; (8d1c <_usb_d_dev_out_next+0x274>)
    8aca:	4413      	add	r3, r2
    8acc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8ace:	78fb      	ldrb	r3, [r7, #3]
    8ad0:	2b00      	cmp	r3, #0
    8ad2:	d005      	beq.n	8ae0 <_usb_d_dev_out_next+0x38>
    8ad4:	69bb      	ldr	r3, [r7, #24]
    8ad6:	685b      	ldr	r3, [r3, #4]
    8ad8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8adc:	b29b      	uxth	r3, r3
    8ade:	e000      	b.n	8ae2 <_usb_d_dev_out_next+0x3a>
    8ae0:	2300      	movs	r3, #0
    8ae2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8ae4:	78fb      	ldrb	r3, [r7, #3]
    8ae6:	2b00      	cmp	r3, #0
    8ae8:	d005      	beq.n	8af6 <_usb_d_dev_out_next+0x4e>
    8aea:	69bb      	ldr	r3, [r7, #24]
    8aec:	685b      	ldr	r3, [r3, #4]
    8aee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8af2:	b29b      	uxth	r3, r3
    8af4:	e000      	b.n	8af8 <_usb_d_dev_out_next+0x50>
    8af6:	2300      	movs	r3, #0
    8af8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	8a1b      	ldrh	r3, [r3, #16]
    8afe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b02:	4293      	cmp	r3, r2
    8b04:	d004      	beq.n	8b10 <_usb_d_dev_out_next+0x68>
    8b06:	687b      	ldr	r3, [r7, #4]
    8b08:	8a1b      	ldrh	r3, [r3, #16]
    8b0a:	3b01      	subs	r3, #1
    8b0c:	b29b      	uxth	r3, r3
    8b0e:	e001      	b.n	8b14 <_usb_d_dev_out_next+0x6c>
    8b10:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8b14:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8b16:	8aba      	ldrh	r2, [r7, #20]
    8b18:	8a7b      	ldrh	r3, [r7, #18]
    8b1a:	4013      	ands	r3, r2
    8b1c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8b1e:	687b      	ldr	r3, [r7, #4]
    8b20:	7cdb      	ldrb	r3, [r3, #19]
    8b22:	f003 0307 	and.w	r3, r3, #7
    8b26:	b2db      	uxtb	r3, r3
    8b28:	2b01      	cmp	r3, #1
    8b2a:	bf0c      	ite	eq
    8b2c:	2301      	moveq	r3, #1
    8b2e:	2300      	movne	r3, #0
    8b30:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8b32:	78fb      	ldrb	r3, [r7, #3]
    8b34:	2b00      	cmp	r3, #0
    8b36:	d004      	beq.n	8b42 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8b38:	7ffb      	ldrb	r3, [r7, #31]
    8b3a:	2100      	movs	r1, #0
    8b3c:	4618      	mov	r0, r3
    8b3e:	4b78      	ldr	r3, [pc, #480]	; (8d20 <_usb_d_dev_out_next+0x278>)
    8b40:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8b42:	687b      	ldr	r3, [r7, #4]
    8b44:	7cdb      	ldrb	r3, [r3, #19]
    8b46:	f003 0320 	and.w	r3, r3, #32
    8b4a:	b2db      	uxtb	r3, r3
    8b4c:	2b00      	cmp	r3, #0
    8b4e:	d01c      	beq.n	8b8a <_usb_d_dev_out_next+0xe2>
    8b50:	687b      	ldr	r3, [r7, #4]
    8b52:	685b      	ldr	r3, [r3, #4]
    8b54:	2b00      	cmp	r3, #0
    8b56:	d018      	beq.n	8b8a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	685b      	ldr	r3, [r3, #4]
    8b5c:	b29a      	uxth	r2, r3
    8b5e:	687b      	ldr	r3, [r7, #4]
    8b60:	689b      	ldr	r3, [r3, #8]
    8b62:	b29b      	uxth	r3, r3
    8b64:	1ad3      	subs	r3, r2, r3
    8b66:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	681a      	ldr	r2, [r3, #0]
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	689b      	ldr	r3, [r3, #8]
    8b70:	18d0      	adds	r0, r2, r3
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	68d9      	ldr	r1, [r3, #12]
    8b76:	89ba      	ldrh	r2, [r7, #12]
    8b78:	8a3b      	ldrh	r3, [r7, #16]
    8b7a:	429a      	cmp	r2, r3
    8b7c:	d901      	bls.n	8b82 <_usb_d_dev_out_next+0xda>
    8b7e:	8a3b      	ldrh	r3, [r7, #16]
    8b80:	e000      	b.n	8b84 <_usb_d_dev_out_next+0xdc>
    8b82:	89bb      	ldrh	r3, [r7, #12]
    8b84:	461a      	mov	r2, r3
    8b86:	4b67      	ldr	r3, [pc, #412]	; (8d24 <_usb_d_dev_out_next+0x27c>)
    8b88:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	685b      	ldr	r3, [r3, #4]
    8b8e:	2b00      	cmp	r3, #0
    8b90:	d121      	bne.n	8bd6 <_usb_d_dev_out_next+0x12e>
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	7cdb      	ldrb	r3, [r3, #19]
    8b96:	f003 0310 	and.w	r3, r3, #16
    8b9a:	b2db      	uxtb	r3, r3
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d01a      	beq.n	8bd6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8ba0:	687a      	ldr	r2, [r7, #4]
    8ba2:	7cd3      	ldrb	r3, [r2, #19]
    8ba4:	f36f 1304 	bfc	r3, #4, #1
    8ba8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8baa:	687a      	ldr	r2, [r7, #4]
    8bac:	7cd3      	ldrb	r3, [r2, #19]
    8bae:	f043 0320 	orr.w	r3, r3, #32
    8bb2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	68db      	ldr	r3, [r3, #12]
    8bb8:	461a      	mov	r2, r3
    8bba:	7ffb      	ldrb	r3, [r7, #31]
    8bbc:	2100      	movs	r1, #0
    8bbe:	4618      	mov	r0, r3
    8bc0:	4b59      	ldr	r3, [pc, #356]	; (8d28 <_usb_d_dev_out_next+0x280>)
    8bc2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8bc4:	687b      	ldr	r3, [r7, #4]
    8bc6:	8a1b      	ldrh	r3, [r3, #16]
    8bc8:	461a      	mov	r2, r3
    8bca:	7ff8      	ldrb	r0, [r7, #31]
    8bcc:	2300      	movs	r3, #0
    8bce:	2100      	movs	r1, #0
    8bd0:	4c56      	ldr	r4, [pc, #344]	; (8d2c <_usb_d_dev_out_next+0x284>)
    8bd2:	47a0      	blx	r4
		goto _out_rx_exec;
    8bd4:	e090      	b.n	8cf8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8bd6:	78fb      	ldrb	r3, [r7, #3]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d010      	beq.n	8bfe <_usb_d_dev_out_next+0x156>
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	8a1b      	ldrh	r3, [r3, #16]
    8be0:	8a3a      	ldrh	r2, [r7, #16]
    8be2:	429a      	cmp	r2, r3
    8be4:	d20b      	bcs.n	8bfe <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8be6:	687a      	ldr	r2, [r7, #4]
    8be8:	7cd3      	ldrb	r3, [r2, #19]
    8bea:	f36f 1304 	bfc	r3, #4, #1
    8bee:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8bf0:	687b      	ldr	r3, [r7, #4]
    8bf2:	689a      	ldr	r2, [r3, #8]
    8bf4:	8abb      	ldrh	r3, [r7, #20]
    8bf6:	441a      	add	r2, r3
    8bf8:	687b      	ldr	r3, [r7, #4]
    8bfa:	609a      	str	r2, [r3, #8]
    8bfc:	e05c      	b.n	8cb8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8bfe:	687b      	ldr	r3, [r7, #4]
    8c00:	689a      	ldr	r2, [r3, #8]
    8c02:	8afb      	ldrh	r3, [r7, #22]
    8c04:	441a      	add	r2, r3
    8c06:	687b      	ldr	r3, [r7, #4]
    8c08:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8c0a:	687b      	ldr	r3, [r7, #4]
    8c0c:	689a      	ldr	r2, [r3, #8]
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	685b      	ldr	r3, [r3, #4]
    8c12:	429a      	cmp	r2, r3
    8c14:	d250      	bcs.n	8cb8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	685b      	ldr	r3, [r3, #4]
    8c1a:	b29a      	uxth	r2, r3
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	689b      	ldr	r3, [r3, #8]
    8c20:	b29b      	uxth	r3, r3
    8c22:	1ad3      	subs	r3, r2, r3
    8c24:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	7cdb      	ldrb	r3, [r3, #19]
    8c2a:	f003 0320 	and.w	r3, r3, #32
    8c2e:	b2db      	uxtb	r3, r3
    8c30:	2b00      	cmp	r3, #0
    8c32:	d010      	beq.n	8c56 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	8a1b      	ldrh	r3, [r3, #16]
    8c38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c3a:	429a      	cmp	r2, r3
    8c3c:	d902      	bls.n	8c44 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	8a1b      	ldrh	r3, [r3, #16]
    8c42:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	68db      	ldr	r3, [r3, #12]
    8c48:	461a      	mov	r2, r3
    8c4a:	7ffb      	ldrb	r3, [r7, #31]
    8c4c:	2100      	movs	r1, #0
    8c4e:	4618      	mov	r0, r3
    8c50:	4b35      	ldr	r3, [pc, #212]	; (8d28 <_usb_d_dev_out_next+0x280>)
    8c52:	4798      	blx	r3
    8c54:	e029      	b.n	8caa <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	8a1b      	ldrh	r3, [r3, #16]
    8c5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c5c:	429a      	cmp	r2, r3
    8c5e:	d90f      	bls.n	8c80 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8c66:	d903      	bls.n	8c70 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    8c6e:	e011      	b.n	8c94 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8c70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c72:	8a7b      	ldrh	r3, [r7, #18]
    8c74:	4013      	ands	r3, r2
    8c76:	b29b      	uxth	r3, r3
    8c78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c7a:	1ad3      	subs	r3, r2, r3
    8c7c:	84fb      	strh	r3, [r7, #38]	; 0x26
    8c7e:	e009      	b.n	8c94 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	8a1b      	ldrh	r3, [r3, #16]
    8c84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c86:	429a      	cmp	r2, r3
    8c88:	d204      	bcs.n	8c94 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8c8a:	687a      	ldr	r2, [r7, #4]
    8c8c:	7cd3      	ldrb	r3, [r2, #19]
    8c8e:	f043 0320 	orr.w	r3, r3, #32
    8c92:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	681a      	ldr	r2, [r3, #0]
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	689b      	ldr	r3, [r3, #8]
    8c9c:	4413      	add	r3, r2
    8c9e:	461a      	mov	r2, r3
    8ca0:	7ffb      	ldrb	r3, [r7, #31]
    8ca2:	2100      	movs	r1, #0
    8ca4:	4618      	mov	r0, r3
    8ca6:	4b20      	ldr	r3, [pc, #128]	; (8d28 <_usb_d_dev_out_next+0x280>)
    8ca8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8caa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8cac:	7ff8      	ldrb	r0, [r7, #31]
    8cae:	2300      	movs	r3, #0
    8cb0:	2100      	movs	r1, #0
    8cb2:	4c1e      	ldr	r4, [pc, #120]	; (8d2c <_usb_d_dev_out_next+0x284>)
    8cb4:	47a0      	blx	r4
			goto _out_rx_exec;
    8cb6:	e01f      	b.n	8cf8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8cb8:	7bfb      	ldrb	r3, [r7, #15]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d006      	beq.n	8ccc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8cbe:	7ffb      	ldrb	r3, [r7, #31]
    8cc0:	222d      	movs	r2, #45	; 0x2d
    8cc2:	4619      	mov	r1, r3
    8cc4:	6a38      	ldr	r0, [r7, #32]
    8cc6:	4b1a      	ldr	r3, [pc, #104]	; (8d30 <_usb_d_dev_out_next+0x288>)
    8cc8:	4798      	blx	r3
    8cca:	e005      	b.n	8cd8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8ccc:	7ffb      	ldrb	r3, [r7, #31]
    8cce:	2225      	movs	r2, #37	; 0x25
    8cd0:	4619      	mov	r1, r3
    8cd2:	6a38      	ldr	r0, [r7, #32]
    8cd4:	4b16      	ldr	r3, [pc, #88]	; (8d30 <_usb_d_dev_out_next+0x288>)
    8cd6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8cd8:	7ffb      	ldrb	r3, [r7, #31]
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d107      	bne.n	8cee <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	68db      	ldr	r3, [r3, #12]
    8ce2:	461a      	mov	r2, r3
    8ce4:	7ffb      	ldrb	r3, [r7, #31]
    8ce6:	2100      	movs	r1, #0
    8ce8:	4618      	mov	r0, r3
    8cea:	4b0f      	ldr	r3, [pc, #60]	; (8d28 <_usb_d_dev_out_next+0x280>)
    8cec:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8cee:	2100      	movs	r1, #0
    8cf0:	6878      	ldr	r0, [r7, #4]
    8cf2:	4b10      	ldr	r3, [pc, #64]	; (8d34 <_usb_d_dev_out_next+0x28c>)
    8cf4:	4798      	blx	r3
	return;
    8cf6:	e031      	b.n	8d5c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8cf8:	78fb      	ldrb	r3, [r7, #3]
    8cfa:	f083 0301 	eor.w	r3, r3, #1
    8cfe:	b2db      	uxtb	r3, r3
    8d00:	2b00      	cmp	r3, #0
    8d02:	d025      	beq.n	8d50 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8d04:	7bfb      	ldrb	r3, [r7, #15]
    8d06:	2b00      	cmp	r3, #0
    8d08:	d018      	beq.n	8d3c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8d0a:	7ffb      	ldrb	r3, [r7, #31]
    8d0c:	2101      	movs	r1, #1
    8d0e:	4618      	mov	r0, r3
    8d10:	4b09      	ldr	r3, [pc, #36]	; (8d38 <_usb_d_dev_out_next+0x290>)
    8d12:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8d14:	232d      	movs	r3, #45	; 0x2d
    8d16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8d1a:	e012      	b.n	8d42 <_usb_d_dev_out_next+0x29a>
    8d1c:	200009e4 	.word	0x200009e4
    8d20:	00008289 	.word	0x00008289
    8d24:	0000d0dd 	.word	0x0000d0dd
    8d28:	000082b5 	.word	0x000082b5
    8d2c:	0000843d 	.word	0x0000843d
    8d30:	00007b95 	.word	0x00007b95
    8d34:	00009bb9 	.word	0x00009bb9
    8d38:	0000847d 	.word	0x0000847d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8d3c:	2325      	movs	r3, #37	; 0x25
    8d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8d42:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8d46:	7ffb      	ldrb	r3, [r7, #31]
    8d48:	4619      	mov	r1, r3
    8d4a:	6a38      	ldr	r0, [r7, #32]
    8d4c:	4b05      	ldr	r3, [pc, #20]	; (8d64 <_usb_d_dev_out_next+0x2bc>)
    8d4e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8d50:	7ffb      	ldrb	r3, [r7, #31]
    8d52:	2201      	movs	r2, #1
    8d54:	2100      	movs	r1, #0
    8d56:	4618      	mov	r0, r3
    8d58:	4b03      	ldr	r3, [pc, #12]	; (8d68 <_usb_d_dev_out_next+0x2c0>)
    8d5a:	4798      	blx	r3
}
    8d5c:	372c      	adds	r7, #44	; 0x2c
    8d5e:	46bd      	mov	sp, r7
    8d60:	bd90      	pop	{r4, r7, pc}
    8d62:	bf00      	nop
    8d64:	00007b69 	.word	0x00007b69
    8d68:	0000850d 	.word	0x0000850d

00008d6c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	b084      	sub	sp, #16
    8d70:	af00      	add	r7, sp, #0
    8d72:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	7c9b      	ldrb	r3, [r3, #18]
    8d78:	f003 030f 	and.w	r3, r3, #15
    8d7c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d7e:	687b      	ldr	r3, [r7, #4]
    8d80:	7cdb      	ldrb	r3, [r3, #19]
    8d82:	f003 0307 	and.w	r3, r3, #7
    8d86:	b2db      	uxtb	r3, r3
    8d88:	2b01      	cmp	r3, #1
    8d8a:	bf0c      	ite	eq
    8d8c:	2301      	moveq	r3, #1
    8d8e:	2300      	movne	r3, #0
    8d90:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    8d92:	7bbb      	ldrb	r3, [r7, #14]
    8d94:	f083 0301 	eor.w	r3, r3, #1
    8d98:	b2db      	uxtb	r3, r3
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d008      	beq.n	8db0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    8d9e:	7bfb      	ldrb	r3, [r7, #15]
    8da0:	4618      	mov	r0, r3
    8da2:	4b20      	ldr	r3, [pc, #128]	; (8e24 <_usb_d_dev_handle_setup+0xb8>)
    8da4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    8da6:	7bfb      	ldrb	r3, [r7, #15]
    8da8:	4618      	mov	r0, r3
    8daa:	4b1f      	ldr	r3, [pc, #124]	; (8e28 <_usb_d_dev_handle_setup+0xbc>)
    8dac:	4798      	blx	r3
		return;
    8dae:	e036      	b.n	8e1e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8db0:	687b      	ldr	r3, [r7, #4]
    8db2:	7cdb      	ldrb	r3, [r3, #19]
    8db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8db8:	b2db      	uxtb	r3, r3
    8dba:	2b00      	cmp	r3, #0
    8dbc:	d010      	beq.n	8de0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    8dbe:	687a      	ldr	r2, [r7, #4]
    8dc0:	7cd3      	ldrb	r3, [r2, #19]
    8dc2:	f36f 1386 	bfc	r3, #6, #1
    8dc6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8dc8:	7bfb      	ldrb	r3, [r7, #15]
    8dca:	2200      	movs	r2, #0
    8dcc:	2101      	movs	r1, #1
    8dce:	4618      	mov	r0, r3
    8dd0:	4b16      	ldr	r3, [pc, #88]	; (8e2c <_usb_d_dev_handle_setup+0xc0>)
    8dd2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    8dd4:	7bfb      	ldrb	r3, [r7, #15]
    8dd6:	2200      	movs	r2, #0
    8dd8:	2100      	movs	r1, #0
    8dda:	4618      	mov	r0, r3
    8ddc:	4b14      	ldr	r3, [pc, #80]	; (8e30 <_usb_d_dev_handle_setup+0xc4>)
    8dde:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    8de0:	687a      	ldr	r2, [r7, #4]
    8de2:	7cd3      	ldrb	r3, [r2, #19]
    8de4:	f36f 03c3 	bfc	r3, #3, #1
    8de8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    8dea:	7bfb      	ldrb	r3, [r7, #15]
    8dec:	2100      	movs	r1, #0
    8dee:	4618      	mov	r0, r3
    8df0:	4b10      	ldr	r3, [pc, #64]	; (8e34 <_usb_d_dev_handle_setup+0xc8>)
    8df2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    8df4:	7bfb      	ldrb	r3, [r7, #15]
    8df6:	2101      	movs	r1, #1
    8df8:	4618      	mov	r0, r3
    8dfa:	4b0e      	ldr	r3, [pc, #56]	; (8e34 <_usb_d_dev_handle_setup+0xc8>)
    8dfc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8dfe:	7bfb      	ldrb	r3, [r7, #15]
    8e00:	216f      	movs	r1, #111	; 0x6f
    8e02:	4618      	mov	r0, r3
    8e04:	4b0c      	ldr	r3, [pc, #48]	; (8e38 <_usb_d_dev_handle_setup+0xcc>)
    8e06:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8e08:	7bfb      	ldrb	r3, [r7, #15]
    8e0a:	216f      	movs	r1, #111	; 0x6f
    8e0c:	4618      	mov	r0, r3
    8e0e:	4b0b      	ldr	r3, [pc, #44]	; (8e3c <_usb_d_dev_handle_setup+0xd0>)
    8e10:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8e12:	4b0b      	ldr	r3, [pc, #44]	; (8e40 <_usb_d_dev_handle_setup+0xd4>)
    8e14:	689b      	ldr	r3, [r3, #8]
    8e16:	687a      	ldr	r2, [r7, #4]
    8e18:	7c92      	ldrb	r2, [r2, #18]
    8e1a:	4610      	mov	r0, r2
    8e1c:	4798      	blx	r3
}
    8e1e:	3710      	adds	r7, #16
    8e20:	46bd      	mov	sp, r7
    8e22:	bd80      	pop	{r7, pc}
    8e24:	00008211 	.word	0x00008211
    8e28:	000081bd 	.word	0x000081bd
    8e2c:	000084b5 	.word	0x000084b5
    8e30:	0000850d 	.word	0x0000850d
    8e34:	0000847d 	.word	0x0000847d
    8e38:	00007fbd 	.word	0x00007fbd
    8e3c:	0000800d 	.word	0x0000800d
    8e40:	2000091c 	.word	0x2000091c

00008e44 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8e44:	b580      	push	{r7, lr}
    8e46:	b084      	sub	sp, #16
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
    8e4c:	460b      	mov	r3, r1
    8e4e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	7c9b      	ldrb	r3, [r3, #18]
    8e54:	f003 030f 	and.w	r3, r3, #15
    8e58:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    8e5a:	78f9      	ldrb	r1, [r7, #3]
    8e5c:	7bfb      	ldrb	r3, [r7, #15]
    8e5e:	2200      	movs	r2, #0
    8e60:	4618      	mov	r0, r3
    8e62:	4b07      	ldr	r3, [pc, #28]	; (8e80 <_usb_d_dev_handle_stall+0x3c>)
    8e64:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8e66:	4b07      	ldr	r3, [pc, #28]	; (8e84 <_usb_d_dev_handle_stall+0x40>)
    8e68:	691b      	ldr	r3, [r3, #16]
    8e6a:	687a      	ldr	r2, [r7, #4]
    8e6c:	7c90      	ldrb	r0, [r2, #18]
    8e6e:	687a      	ldr	r2, [r7, #4]
    8e70:	6892      	ldr	r2, [r2, #8]
    8e72:	2101      	movs	r1, #1
    8e74:	4798      	blx	r3
}
    8e76:	bf00      	nop
    8e78:	3710      	adds	r7, #16
    8e7a:	46bd      	mov	sp, r7
    8e7c:	bd80      	pop	{r7, pc}
    8e7e:	bf00      	nop
    8e80:	00008171 	.word	0x00008171
    8e84:	2000091c 	.word	0x2000091c

00008e88 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8e88:	b580      	push	{r7, lr}
    8e8a:	b088      	sub	sp, #32
    8e8c:	af00      	add	r7, sp, #0
    8e8e:	6078      	str	r0, [r7, #4]
    8e90:	460b      	mov	r3, r1
    8e92:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    8e94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e98:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8e9a:	687b      	ldr	r3, [r7, #4]
    8e9c:	7c9b      	ldrb	r3, [r3, #18]
    8e9e:	f003 030f 	and.w	r3, r3, #15
    8ea2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8ea4:	4b61      	ldr	r3, [pc, #388]	; (902c <_usb_d_dev_handle_trfail+0x1a4>)
    8ea6:	881b      	ldrh	r3, [r3, #0]
    8ea8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    8eaa:	7efb      	ldrb	r3, [r7, #27]
    8eac:	015b      	lsls	r3, r3, #5
    8eae:	4a60      	ldr	r2, [pc, #384]	; (9030 <_usb_d_dev_handle_trfail+0x1a8>)
    8eb0:	4413      	add	r3, r2
    8eb2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    8eb4:	78fb      	ldrb	r3, [r7, #3]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d006      	beq.n	8ec8 <_usb_d_dev_handle_trfail+0x40>
    8eba:	7efb      	ldrb	r3, [r7, #27]
    8ebc:	4619      	mov	r1, r3
    8ebe:	69f8      	ldr	r0, [r7, #28]
    8ec0:	4b5c      	ldr	r3, [pc, #368]	; (9034 <_usb_d_dev_handle_trfail+0x1ac>)
    8ec2:	4798      	blx	r3
    8ec4:	4603      	mov	r3, r0
    8ec6:	e005      	b.n	8ed4 <_usb_d_dev_handle_trfail+0x4c>
    8ec8:	7efb      	ldrb	r3, [r7, #27]
    8eca:	4619      	mov	r1, r3
    8ecc:	69f8      	ldr	r0, [r7, #28]
    8ece:	4b5a      	ldr	r3, [pc, #360]	; (9038 <_usb_d_dev_handle_trfail+0x1b0>)
    8ed0:	4798      	blx	r3
    8ed2:	4603      	mov	r3, r0
    8ed4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8ed6:	687b      	ldr	r3, [r7, #4]
    8ed8:	7cdb      	ldrb	r3, [r3, #19]
    8eda:	f003 0307 	and.w	r3, r3, #7
    8ede:	b2db      	uxtb	r3, r3
    8ee0:	2b01      	cmp	r3, #1
    8ee2:	bf0c      	ite	eq
    8ee4:	2301      	moveq	r3, #1
    8ee6:	2300      	movne	r3, #0
    8ee8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    8eea:	78fb      	ldrb	r3, [r7, #3]
    8eec:	011b      	lsls	r3, r3, #4
    8eee:	697a      	ldr	r2, [r7, #20]
    8ef0:	4413      	add	r3, r2
    8ef2:	7a9b      	ldrb	r3, [r3, #10]
    8ef4:	b2db      	uxtb	r3, r3
    8ef6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8ef8:	7cfb      	ldrb	r3, [r7, #19]
    8efa:	2b02      	cmp	r3, #2
    8efc:	d12f      	bne.n	8f5e <_usb_d_dev_handle_trfail+0xd6>
    8efe:	7b3b      	ldrb	r3, [r7, #12]
    8f00:	f003 0301 	and.w	r3, r3, #1
    8f04:	b2db      	uxtb	r3, r3
    8f06:	2b00      	cmp	r3, #0
    8f08:	d029      	beq.n	8f5e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8f0a:	78fb      	ldrb	r3, [r7, #3]
    8f0c:	011b      	lsls	r3, r3, #4
    8f0e:	697a      	ldr	r2, [r7, #20]
    8f10:	441a      	add	r2, r3
    8f12:	7a93      	ldrb	r3, [r2, #10]
    8f14:	f36f 0300 	bfc	r3, #0, #1
    8f18:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8f1a:	78fb      	ldrb	r3, [r7, #3]
    8f1c:	f107 0220 	add.w	r2, r7, #32
    8f20:	4413      	add	r3, r2
    8f22:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f26:	7efb      	ldrb	r3, [r7, #27]
    8f28:	4619      	mov	r1, r3
    8f2a:	69f8      	ldr	r0, [r7, #28]
    8f2c:	4b43      	ldr	r3, [pc, #268]	; (903c <_usb_d_dev_handle_trfail+0x1b4>)
    8f2e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8f30:	78fb      	ldrb	r3, [r7, #3]
    8f32:	f107 0220 	add.w	r2, r7, #32
    8f36:	4413      	add	r3, r2
    8f38:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f3c:	7efb      	ldrb	r3, [r7, #27]
    8f3e:	4619      	mov	r1, r3
    8f40:	69f8      	ldr	r0, [r7, #28]
    8f42:	4b3f      	ldr	r3, [pc, #252]	; (9040 <_usb_d_dev_handle_trfail+0x1b8>)
    8f44:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8f46:	78fb      	ldrb	r3, [r7, #3]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	bf14      	ite	ne
    8f4c:	2301      	movne	r3, #1
    8f4e:	2300      	moveq	r3, #0
    8f50:	b2db      	uxtb	r3, r3
    8f52:	2204      	movs	r2, #4
    8f54:	4619      	mov	r1, r3
    8f56:	6878      	ldr	r0, [r7, #4]
    8f58:	4b3a      	ldr	r3, [pc, #232]	; (9044 <_usb_d_dev_handle_trfail+0x1bc>)
    8f5a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    8f5c:	e062      	b.n	9024 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    8f5e:	7b3b      	ldrb	r3, [r7, #12]
    8f60:	f003 0302 	and.w	r3, r3, #2
    8f64:	b2db      	uxtb	r3, r3
    8f66:	2b00      	cmp	r3, #0
    8f68:	d040      	beq.n	8fec <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    8f6a:	78fb      	ldrb	r3, [r7, #3]
    8f6c:	011b      	lsls	r3, r3, #4
    8f6e:	697a      	ldr	r2, [r7, #20]
    8f70:	441a      	add	r2, r3
    8f72:	7a93      	ldrb	r3, [r2, #10]
    8f74:	f36f 0341 	bfc	r3, #1, #1
    8f78:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8f7a:	78fb      	ldrb	r3, [r7, #3]
    8f7c:	f107 0220 	add.w	r2, r7, #32
    8f80:	4413      	add	r3, r2
    8f82:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f86:	7efb      	ldrb	r3, [r7, #27]
    8f88:	4619      	mov	r1, r3
    8f8a:	69f8      	ldr	r0, [r7, #28]
    8f8c:	4b2b      	ldr	r3, [pc, #172]	; (903c <_usb_d_dev_handle_trfail+0x1b4>)
    8f8e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8f90:	78fb      	ldrb	r3, [r7, #3]
    8f92:	f107 0220 	add.w	r2, r7, #32
    8f96:	4413      	add	r3, r2
    8f98:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f9c:	7efb      	ldrb	r3, [r7, #27]
    8f9e:	4619      	mov	r1, r3
    8fa0:	69f8      	ldr	r0, [r7, #28]
    8fa2:	4b27      	ldr	r3, [pc, #156]	; (9040 <_usb_d_dev_handle_trfail+0x1b8>)
    8fa4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8fa6:	7cbb      	ldrb	r3, [r7, #18]
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d03b      	beq.n	9024 <_usb_d_dev_handle_trfail+0x19c>
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	7cdb      	ldrb	r3, [r3, #19]
    8fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fb4:	b2db      	uxtb	r3, r3
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	d034      	beq.n	9024 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8fba:	687b      	ldr	r3, [r7, #4]
    8fbc:	7cdb      	ldrb	r3, [r3, #19]
    8fbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    8fc2:	b2db      	uxtb	r3, r3
    8fc4:	461a      	mov	r2, r3
    8fc6:	78fb      	ldrb	r3, [r7, #3]
    8fc8:	4293      	cmp	r3, r2
    8fca:	d02b      	beq.n	9024 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	7cdb      	ldrb	r3, [r3, #19]
    8fd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    8fd4:	b2db      	uxtb	r3, r3
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	bf14      	ite	ne
    8fda:	2301      	movne	r3, #1
    8fdc:	2300      	moveq	r3, #0
    8fde:	b2db      	uxtb	r3, r3
    8fe0:	2200      	movs	r2, #0
    8fe2:	4619      	mov	r1, r3
    8fe4:	6878      	ldr	r0, [r7, #4]
    8fe6:	4b17      	ldr	r3, [pc, #92]	; (9044 <_usb_d_dev_handle_trfail+0x1bc>)
    8fe8:	4798      	blx	r3
}
    8fea:	e01b      	b.n	9024 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    8fec:	78fa      	ldrb	r2, [r7, #3]
    8fee:	7efb      	ldrb	r3, [r7, #27]
    8ff0:	4611      	mov	r1, r2
    8ff2:	4618      	mov	r0, r3
    8ff4:	4b14      	ldr	r3, [pc, #80]	; (9048 <_usb_d_dev_handle_trfail+0x1c0>)
    8ff6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8ff8:	78fb      	ldrb	r3, [r7, #3]
    8ffa:	f107 0220 	add.w	r2, r7, #32
    8ffe:	4413      	add	r3, r2
    9000:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9004:	7efb      	ldrb	r3, [r7, #27]
    9006:	4619      	mov	r1, r3
    9008:	69f8      	ldr	r0, [r7, #28]
    900a:	4b0c      	ldr	r3, [pc, #48]	; (903c <_usb_d_dev_handle_trfail+0x1b4>)
    900c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    900e:	78fb      	ldrb	r3, [r7, #3]
    9010:	f107 0220 	add.w	r2, r7, #32
    9014:	4413      	add	r3, r2
    9016:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    901a:	7efb      	ldrb	r3, [r7, #27]
    901c:	4619      	mov	r1, r3
    901e:	69f8      	ldr	r0, [r7, #28]
    9020:	4b07      	ldr	r3, [pc, #28]	; (9040 <_usb_d_dev_handle_trfail+0x1b8>)
    9022:	4798      	blx	r3
}
    9024:	bf00      	nop
    9026:	3720      	adds	r7, #32
    9028:	46bd      	mov	sp, r7
    902a:	bd80      	pop	{r7, pc}
    902c:	0000d76c 	.word	0x0000d76c
    9030:	200009e4 	.word	0x200009e4
    9034:	00007bf1 	.word	0x00007bf1
    9038:	00007bc1 	.word	0x00007bc1
    903c:	00007a95 	.word	0x00007a95
    9040:	00007b95 	.word	0x00007b95
    9044:	00009c01 	.word	0x00009c01
    9048:	0000847d 	.word	0x0000847d

0000904c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    904c:	b580      	push	{r7, lr}
    904e:	b082      	sub	sp, #8
    9050:	af00      	add	r7, sp, #0
    9052:	6078      	str	r0, [r7, #4]
    9054:	460b      	mov	r3, r1
    9056:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9058:	78fb      	ldrb	r3, [r7, #3]
    905a:	f003 0310 	and.w	r3, r3, #16
    905e:	2b00      	cmp	r3, #0
    9060:	d003      	beq.n	906a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9062:	6878      	ldr	r0, [r7, #4]
    9064:	4b0c      	ldr	r3, [pc, #48]	; (9098 <_usb_d_dev_trans_setup_isr+0x4c>)
    9066:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9068:	e012      	b.n	9090 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    906a:	78fb      	ldrb	r3, [r7, #3]
    906c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9070:	2b00      	cmp	r3, #0
    9072:	d004      	beq.n	907e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9074:	2101      	movs	r1, #1
    9076:	6878      	ldr	r0, [r7, #4]
    9078:	4b08      	ldr	r3, [pc, #32]	; (909c <_usb_d_dev_trans_setup_isr+0x50>)
    907a:	4798      	blx	r3
}
    907c:	e008      	b.n	9090 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    907e:	78fb      	ldrb	r3, [r7, #3]
    9080:	f003 0320 	and.w	r3, r3, #32
    9084:	2b00      	cmp	r3, #0
    9086:	d003      	beq.n	9090 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9088:	2100      	movs	r1, #0
    908a:	6878      	ldr	r0, [r7, #4]
    908c:	4b03      	ldr	r3, [pc, #12]	; (909c <_usb_d_dev_trans_setup_isr+0x50>)
    908e:	4798      	blx	r3
}
    9090:	bf00      	nop
    9092:	3708      	adds	r7, #8
    9094:	46bd      	mov	sp, r7
    9096:	bd80      	pop	{r7, pc}
    9098:	00008d6d 	.word	0x00008d6d
    909c:	00008e45 	.word	0x00008e45

000090a0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    90a0:	b580      	push	{r7, lr}
    90a2:	b082      	sub	sp, #8
    90a4:	af00      	add	r7, sp, #0
    90a6:	6078      	str	r0, [r7, #4]
    90a8:	460b      	mov	r3, r1
    90aa:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    90ac:	78fb      	ldrb	r3, [r7, #3]
    90ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90b2:	2b00      	cmp	r3, #0
    90b4:	d004      	beq.n	90c0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    90b6:	2101      	movs	r1, #1
    90b8:	6878      	ldr	r0, [r7, #4]
    90ba:	4b1a      	ldr	r3, [pc, #104]	; (9124 <_usb_d_dev_trans_in_isr+0x84>)
    90bc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    90be:	e02c      	b.n	911a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    90c0:	78fb      	ldrb	r3, [r7, #3]
    90c2:	f003 0308 	and.w	r3, r3, #8
    90c6:	2b00      	cmp	r3, #0
    90c8:	d004      	beq.n	90d4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    90ca:	2101      	movs	r1, #1
    90cc:	6878      	ldr	r0, [r7, #4]
    90ce:	4b16      	ldr	r3, [pc, #88]	; (9128 <_usb_d_dev_trans_in_isr+0x88>)
    90d0:	4798      	blx	r3
}
    90d2:	e022      	b.n	911a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    90d4:	78fb      	ldrb	r3, [r7, #3]
    90d6:	f003 0302 	and.w	r3, r3, #2
    90da:	2b00      	cmp	r3, #0
    90dc:	d004      	beq.n	90e8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    90de:	2101      	movs	r1, #1
    90e0:	6878      	ldr	r0, [r7, #4]
    90e2:	4b12      	ldr	r3, [pc, #72]	; (912c <_usb_d_dev_trans_in_isr+0x8c>)
    90e4:	4798      	blx	r3
}
    90e6:	e018      	b.n	911a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	7cdb      	ldrb	r3, [r3, #19]
    90ec:	f003 0307 	and.w	r3, r3, #7
    90f0:	b2db      	uxtb	r3, r3
    90f2:	2b01      	cmp	r3, #1
    90f4:	d111      	bne.n	911a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    90f6:	78fb      	ldrb	r3, [r7, #3]
    90f8:	f003 0304 	and.w	r3, r3, #4
    90fc:	2b00      	cmp	r3, #0
    90fe:	d004      	beq.n	910a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9100:	2100      	movs	r1, #0
    9102:	6878      	ldr	r0, [r7, #4]
    9104:	4b08      	ldr	r3, [pc, #32]	; (9128 <_usb_d_dev_trans_in_isr+0x88>)
    9106:	4798      	blx	r3
}
    9108:	e007      	b.n	911a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    910a:	78fb      	ldrb	r3, [r7, #3]
    910c:	f003 0310 	and.w	r3, r3, #16
    9110:	2b00      	cmp	r3, #0
    9112:	d002      	beq.n	911a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9114:	6878      	ldr	r0, [r7, #4]
    9116:	4b06      	ldr	r3, [pc, #24]	; (9130 <_usb_d_dev_trans_in_isr+0x90>)
    9118:	4798      	blx	r3
}
    911a:	bf00      	nop
    911c:	3708      	adds	r7, #8
    911e:	46bd      	mov	sp, r7
    9120:	bd80      	pop	{r7, pc}
    9122:	bf00      	nop
    9124:	00008e45 	.word	0x00008e45
    9128:	00008e89 	.word	0x00008e89
    912c:	00008891 	.word	0x00008891
    9130:	00008d6d 	.word	0x00008d6d

00009134 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9134:	b580      	push	{r7, lr}
    9136:	b082      	sub	sp, #8
    9138:	af00      	add	r7, sp, #0
    913a:	6078      	str	r0, [r7, #4]
    913c:	460b      	mov	r3, r1
    913e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9140:	78fb      	ldrb	r3, [r7, #3]
    9142:	f003 0320 	and.w	r3, r3, #32
    9146:	2b00      	cmp	r3, #0
    9148:	d004      	beq.n	9154 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    914a:	2100      	movs	r1, #0
    914c:	6878      	ldr	r0, [r7, #4]
    914e:	4b1a      	ldr	r3, [pc, #104]	; (91b8 <_usb_d_dev_trans_out_isr+0x84>)
    9150:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9152:	e02c      	b.n	91ae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9154:	78fb      	ldrb	r3, [r7, #3]
    9156:	f003 0304 	and.w	r3, r3, #4
    915a:	2b00      	cmp	r3, #0
    915c:	d004      	beq.n	9168 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    915e:	2100      	movs	r1, #0
    9160:	6878      	ldr	r0, [r7, #4]
    9162:	4b16      	ldr	r3, [pc, #88]	; (91bc <_usb_d_dev_trans_out_isr+0x88>)
    9164:	4798      	blx	r3
}
    9166:	e022      	b.n	91ae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9168:	78fb      	ldrb	r3, [r7, #3]
    916a:	f003 0301 	and.w	r3, r3, #1
    916e:	2b00      	cmp	r3, #0
    9170:	d004      	beq.n	917c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9172:	2101      	movs	r1, #1
    9174:	6878      	ldr	r0, [r7, #4]
    9176:	4b12      	ldr	r3, [pc, #72]	; (91c0 <_usb_d_dev_trans_out_isr+0x8c>)
    9178:	4798      	blx	r3
}
    917a:	e018      	b.n	91ae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	7cdb      	ldrb	r3, [r3, #19]
    9180:	f003 0307 	and.w	r3, r3, #7
    9184:	b2db      	uxtb	r3, r3
    9186:	2b01      	cmp	r3, #1
    9188:	d111      	bne.n	91ae <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    918a:	78fb      	ldrb	r3, [r7, #3]
    918c:	f003 0308 	and.w	r3, r3, #8
    9190:	2b00      	cmp	r3, #0
    9192:	d004      	beq.n	919e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9194:	2101      	movs	r1, #1
    9196:	6878      	ldr	r0, [r7, #4]
    9198:	4b08      	ldr	r3, [pc, #32]	; (91bc <_usb_d_dev_trans_out_isr+0x88>)
    919a:	4798      	blx	r3
}
    919c:	e007      	b.n	91ae <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    919e:	78fb      	ldrb	r3, [r7, #3]
    91a0:	f003 0310 	and.w	r3, r3, #16
    91a4:	2b00      	cmp	r3, #0
    91a6:	d002      	beq.n	91ae <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    91a8:	6878      	ldr	r0, [r7, #4]
    91aa:	4b06      	ldr	r3, [pc, #24]	; (91c4 <_usb_d_dev_trans_out_isr+0x90>)
    91ac:	4798      	blx	r3
}
    91ae:	bf00      	nop
    91b0:	3708      	adds	r7, #8
    91b2:	46bd      	mov	sp, r7
    91b4:	bd80      	pop	{r7, pc}
    91b6:	bf00      	nop
    91b8:	00008e45 	.word	0x00008e45
    91bc:	00008e89 	.word	0x00008e89
    91c0:	00008aa9 	.word	0x00008aa9
    91c4:	00008d6d 	.word	0x00008d6d

000091c8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	b084      	sub	sp, #16
    91cc:	af00      	add	r7, sp, #0
    91ce:	6078      	str	r0, [r7, #4]
    91d0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    91d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91d6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    91d8:	683b      	ldr	r3, [r7, #0]
    91da:	7c9b      	ldrb	r3, [r3, #18]
    91dc:	f003 030f 	and.w	r3, r3, #15
    91e0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    91e2:	7afb      	ldrb	r3, [r7, #11]
    91e4:	2201      	movs	r2, #1
    91e6:	409a      	lsls	r2, r3
    91e8:	687b      	ldr	r3, [r7, #4]
    91ea:	4013      	ands	r3, r2
    91ec:	2b00      	cmp	r3, #0
    91ee:	d03d      	beq.n	926c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    91f0:	7afb      	ldrb	r3, [r7, #11]
    91f2:	68fa      	ldr	r2, [r7, #12]
    91f4:	3308      	adds	r3, #8
    91f6:	015b      	lsls	r3, r3, #5
    91f8:	4413      	add	r3, r2
    91fa:	3307      	adds	r3, #7
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9200:	7afb      	ldrb	r3, [r7, #11]
    9202:	68fa      	ldr	r2, [r7, #12]
    9204:	015b      	lsls	r3, r3, #5
    9206:	4413      	add	r3, r2
    9208:	f203 1309 	addw	r3, r3, #265	; 0x109
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9210:	7aba      	ldrb	r2, [r7, #10]
    9212:	7a7b      	ldrb	r3, [r7, #9]
    9214:	4013      	ands	r3, r2
    9216:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9218:	7abb      	ldrb	r3, [r7, #10]
    921a:	2b00      	cmp	r3, #0
    921c:	d027      	beq.n	926e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    921e:	683b      	ldr	r3, [r7, #0]
    9220:	7cdb      	ldrb	r3, [r3, #19]
    9222:	f003 0307 	and.w	r3, r3, #7
    9226:	b2db      	uxtb	r3, r3
    9228:	2b01      	cmp	r3, #1
    922a:	d10c      	bne.n	9246 <_usb_d_dev_handle_eps+0x7e>
    922c:	683b      	ldr	r3, [r7, #0]
    922e:	7cdb      	ldrb	r3, [r3, #19]
    9230:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9234:	b2db      	uxtb	r3, r3
    9236:	2b00      	cmp	r3, #0
    9238:	d105      	bne.n	9246 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    923a:	7abb      	ldrb	r3, [r7, #10]
    923c:	4619      	mov	r1, r3
    923e:	6838      	ldr	r0, [r7, #0]
    9240:	4b0c      	ldr	r3, [pc, #48]	; (9274 <_usb_d_dev_handle_eps+0xac>)
    9242:	4798      	blx	r3
    9244:	e013      	b.n	926e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9246:	683b      	ldr	r3, [r7, #0]
    9248:	7cdb      	ldrb	r3, [r3, #19]
    924a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    924e:	b2db      	uxtb	r3, r3
    9250:	2b00      	cmp	r3, #0
    9252:	d005      	beq.n	9260 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9254:	7abb      	ldrb	r3, [r7, #10]
    9256:	4619      	mov	r1, r3
    9258:	6838      	ldr	r0, [r7, #0]
    925a:	4b07      	ldr	r3, [pc, #28]	; (9278 <_usb_d_dev_handle_eps+0xb0>)
    925c:	4798      	blx	r3
    925e:	e006      	b.n	926e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9260:	7abb      	ldrb	r3, [r7, #10]
    9262:	4619      	mov	r1, r3
    9264:	6838      	ldr	r0, [r7, #0]
    9266:	4b05      	ldr	r3, [pc, #20]	; (927c <_usb_d_dev_handle_eps+0xb4>)
    9268:	4798      	blx	r3
    926a:	e000      	b.n	926e <_usb_d_dev_handle_eps+0xa6>
		return;
    926c:	bf00      	nop
		}
	}
}
    926e:	3710      	adds	r7, #16
    9270:	46bd      	mov	sp, r7
    9272:	bd80      	pop	{r7, pc}
    9274:	0000904d 	.word	0x0000904d
    9278:	000090a1 	.word	0x000090a1
    927c:	00009135 	.word	0x00009135

00009280 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9280:	b580      	push	{r7, lr}
    9282:	b084      	sub	sp, #16
    9284:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9286:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    928a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    928c:	68bb      	ldr	r3, [r7, #8]
    928e:	8c1b      	ldrh	r3, [r3, #32]
    9290:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9292:	88fb      	ldrh	r3, [r7, #6]
    9294:	2b00      	cmp	r3, #0
    9296:	d104      	bne.n	92a2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9298:	4b13      	ldr	r3, [pc, #76]	; (92e8 <_usb_d_dev_handler+0x68>)
    929a:	4798      	blx	r3
    929c:	4603      	mov	r3, r0
    929e:	2b00      	cmp	r3, #0
    92a0:	d11e      	bne.n	92e0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    92a2:	2300      	movs	r3, #0
    92a4:	73fb      	strb	r3, [r7, #15]
    92a6:	e017      	b.n	92d8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    92a8:	7bfa      	ldrb	r2, [r7, #15]
    92aa:	4613      	mov	r3, r2
    92ac:	009b      	lsls	r3, r3, #2
    92ae:	4413      	add	r3, r2
    92b0:	009b      	lsls	r3, r3, #2
    92b2:	3310      	adds	r3, #16
    92b4:	4a0d      	ldr	r2, [pc, #52]	; (92ec <_usb_d_dev_handler+0x6c>)
    92b6:	4413      	add	r3, r2
    92b8:	3304      	adds	r3, #4
    92ba:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    92bc:	683b      	ldr	r3, [r7, #0]
    92be:	7c9b      	ldrb	r3, [r3, #18]
    92c0:	2bff      	cmp	r3, #255	; 0xff
    92c2:	d005      	beq.n	92d0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    92c4:	88fb      	ldrh	r3, [r7, #6]
    92c6:	6839      	ldr	r1, [r7, #0]
    92c8:	4618      	mov	r0, r3
    92ca:	4b09      	ldr	r3, [pc, #36]	; (92f0 <_usb_d_dev_handler+0x70>)
    92cc:	4798      	blx	r3
    92ce:	e000      	b.n	92d2 <_usb_d_dev_handler+0x52>
			continue;
    92d0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    92d2:	7bfb      	ldrb	r3, [r7, #15]
    92d4:	3301      	adds	r3, #1
    92d6:	73fb      	strb	r3, [r7, #15]
    92d8:	7bfb      	ldrb	r3, [r7, #15]
    92da:	2b08      	cmp	r3, #8
    92dc:	d9e4      	bls.n	92a8 <_usb_d_dev_handler+0x28>
    92de:	e000      	b.n	92e2 <_usb_d_dev_handler+0x62>
			return;
    92e0:	bf00      	nop
	}
}
    92e2:	3710      	adds	r7, #16
    92e4:	46bd      	mov	sp, r7
    92e6:	bd80      	pop	{r7, pc}
    92e8:	000087d9 	.word	0x000087d9
    92ec:	2000091c 	.word	0x2000091c
    92f0:	000091c9 	.word	0x000091c9

000092f4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    92f4:	b580      	push	{r7, lr}
    92f6:	b082      	sub	sp, #8
    92f8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    92fa:	2300      	movs	r3, #0
    92fc:	71fb      	strb	r3, [r7, #7]
    92fe:	e023      	b.n	9348 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9300:	79fa      	ldrb	r2, [r7, #7]
    9302:	4613      	mov	r3, r2
    9304:	009b      	lsls	r3, r3, #2
    9306:	4413      	add	r3, r2
    9308:	009b      	lsls	r3, r3, #2
    930a:	3310      	adds	r3, #16
    930c:	4a14      	ldr	r2, [pc, #80]	; (9360 <_usb_d_dev_reset_epts+0x6c>)
    930e:	4413      	add	r3, r2
    9310:	3304      	adds	r3, #4
    9312:	2103      	movs	r1, #3
    9314:	4618      	mov	r0, r3
    9316:	4b13      	ldr	r3, [pc, #76]	; (9364 <_usb_d_dev_reset_epts+0x70>)
    9318:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    931a:	79fa      	ldrb	r2, [r7, #7]
    931c:	4910      	ldr	r1, [pc, #64]	; (9360 <_usb_d_dev_reset_epts+0x6c>)
    931e:	4613      	mov	r3, r2
    9320:	009b      	lsls	r3, r3, #2
    9322:	4413      	add	r3, r2
    9324:	009b      	lsls	r3, r3, #2
    9326:	440b      	add	r3, r1
    9328:	3326      	adds	r3, #38	; 0x26
    932a:	22ff      	movs	r2, #255	; 0xff
    932c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    932e:	79fa      	ldrb	r2, [r7, #7]
    9330:	490b      	ldr	r1, [pc, #44]	; (9360 <_usb_d_dev_reset_epts+0x6c>)
    9332:	4613      	mov	r3, r2
    9334:	009b      	lsls	r3, r3, #2
    9336:	4413      	add	r3, r2
    9338:	009b      	lsls	r3, r3, #2
    933a:	440b      	add	r3, r1
    933c:	3327      	adds	r3, #39	; 0x27
    933e:	2200      	movs	r2, #0
    9340:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9342:	79fb      	ldrb	r3, [r7, #7]
    9344:	3301      	adds	r3, #1
    9346:	71fb      	strb	r3, [r7, #7]
    9348:	79fb      	ldrb	r3, [r7, #7]
    934a:	2b08      	cmp	r3, #8
    934c:	d9d8      	bls.n	9300 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    934e:	22a0      	movs	r2, #160	; 0xa0
    9350:	2100      	movs	r1, #0
    9352:	4805      	ldr	r0, [pc, #20]	; (9368 <_usb_d_dev_reset_epts+0x74>)
    9354:	4b05      	ldr	r3, [pc, #20]	; (936c <_usb_d_dev_reset_epts+0x78>)
    9356:	4798      	blx	r3
}
    9358:	bf00      	nop
    935a:	3708      	adds	r7, #8
    935c:	46bd      	mov	sp, r7
    935e:	bd80      	pop	{r7, pc}
    9360:	2000091c 	.word	0x2000091c
    9364:	00009bb9 	.word	0x00009bb9
    9368:	200009e4 	.word	0x200009e4
    936c:	0000d211 	.word	0x0000d211

00009370 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9370:	b580      	push	{r7, lr}
    9372:	b084      	sub	sp, #16
    9374:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9376:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    937a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    937c:	2301      	movs	r3, #1
    937e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9380:	2304      	movs	r3, #4
    9382:	713b      	strb	r3, [r7, #4]
    9384:	2300      	movs	r3, #0
    9386:	717b      	strb	r3, [r7, #5]
    9388:	2300      	movs	r3, #0
    938a:	71bb      	strb	r3, [r7, #6]
    938c:	2300      	movs	r3, #0
    938e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9390:	2101      	movs	r1, #1
    9392:	68f8      	ldr	r0, [r7, #12]
    9394:	4b26      	ldr	r3, [pc, #152]	; (9430 <_usb_d_dev_init+0xc0>)
    9396:	4798      	blx	r3
    9398:	4603      	mov	r3, r0
    939a:	f083 0301 	eor.w	r3, r3, #1
    939e:	b2db      	uxtb	r3, r3
    93a0:	2b00      	cmp	r3, #0
    93a2:	d011      	beq.n	93c8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    93a4:	2102      	movs	r1, #2
    93a6:	68f8      	ldr	r0, [r7, #12]
    93a8:	4b22      	ldr	r3, [pc, #136]	; (9434 <_usb_d_dev_init+0xc4>)
    93aa:	4798      	blx	r3
    93ac:	4603      	mov	r3, r0
    93ae:	2b00      	cmp	r3, #0
    93b0:	d006      	beq.n	93c0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    93b2:	68f8      	ldr	r0, [r7, #12]
    93b4:	4b20      	ldr	r3, [pc, #128]	; (9438 <_usb_d_dev_init+0xc8>)
    93b6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    93b8:	2102      	movs	r1, #2
    93ba:	68f8      	ldr	r0, [r7, #12]
    93bc:	4b1f      	ldr	r3, [pc, #124]	; (943c <_usb_d_dev_init+0xcc>)
    93be:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    93c0:	2101      	movs	r1, #1
    93c2:	68f8      	ldr	r0, [r7, #12]
    93c4:	4b1e      	ldr	r3, [pc, #120]	; (9440 <_usb_d_dev_init+0xd0>)
    93c6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    93c8:	2101      	movs	r1, #1
    93ca:	68f8      	ldr	r0, [r7, #12]
    93cc:	4b1b      	ldr	r3, [pc, #108]	; (943c <_usb_d_dev_init+0xcc>)
    93ce:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    93d0:	4b1c      	ldr	r3, [pc, #112]	; (9444 <_usb_d_dev_init+0xd4>)
    93d2:	4a1d      	ldr	r2, [pc, #116]	; (9448 <_usb_d_dev_init+0xd8>)
    93d4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    93d6:	4b1b      	ldr	r3, [pc, #108]	; (9444 <_usb_d_dev_init+0xd4>)
    93d8:	4a1b      	ldr	r2, [pc, #108]	; (9448 <_usb_d_dev_init+0xd8>)
    93da:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    93dc:	4b19      	ldr	r3, [pc, #100]	; (9444 <_usb_d_dev_init+0xd4>)
    93de:	4a1a      	ldr	r2, [pc, #104]	; (9448 <_usb_d_dev_init+0xd8>)
    93e0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    93e2:	4b18      	ldr	r3, [pc, #96]	; (9444 <_usb_d_dev_init+0xd4>)
    93e4:	4a18      	ldr	r2, [pc, #96]	; (9448 <_usb_d_dev_init+0xd8>)
    93e6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    93e8:	4b16      	ldr	r3, [pc, #88]	; (9444 <_usb_d_dev_init+0xd4>)
    93ea:	4a17      	ldr	r2, [pc, #92]	; (9448 <_usb_d_dev_init+0xd8>)
    93ec:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    93ee:	4b17      	ldr	r3, [pc, #92]	; (944c <_usb_d_dev_init+0xdc>)
    93f0:	4798      	blx	r3

	_usb_load_calib();
    93f2:	4b17      	ldr	r3, [pc, #92]	; (9450 <_usb_d_dev_init+0xe0>)
    93f4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    93f6:	2104      	movs	r1, #4
    93f8:	68f8      	ldr	r0, [r7, #12]
    93fa:	4b11      	ldr	r3, [pc, #68]	; (9440 <_usb_d_dev_init+0xd0>)
    93fc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    93fe:	4b15      	ldr	r3, [pc, #84]	; (9454 <_usb_d_dev_init+0xe4>)
    9400:	4619      	mov	r1, r3
    9402:	68f8      	ldr	r0, [r7, #12]
    9404:	4b14      	ldr	r3, [pc, #80]	; (9458 <_usb_d_dev_init+0xe8>)
    9406:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9408:	7afb      	ldrb	r3, [r7, #11]
    940a:	f107 0210 	add.w	r2, r7, #16
    940e:	4413      	add	r3, r2
    9410:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9414:	f043 0301 	orr.w	r3, r3, #1
    9418:	b2db      	uxtb	r3, r3
    941a:	b29b      	uxth	r3, r3
    941c:	4619      	mov	r1, r3
    941e:	68f8      	ldr	r0, [r7, #12]
    9420:	4b0e      	ldr	r3, [pc, #56]	; (945c <_usb_d_dev_init+0xec>)
    9422:	4798      	blx	r3

	return ERR_NONE;
    9424:	2300      	movs	r3, #0
}
    9426:	4618      	mov	r0, r3
    9428:	3710      	adds	r7, #16
    942a:	46bd      	mov	sp, r7
    942c:	bd80      	pop	{r7, pc}
    942e:	bf00      	nop
    9430:	00007a09 	.word	0x00007a09
    9434:	00007d59 	.word	0x00007d59
    9438:	00007d2d 	.word	0x00007d2d
    943c:	000079df 	.word	0x000079df
    9440:	00007d89 	.word	0x00007d89
    9444:	2000091c 	.word	0x2000091c
    9448:	00007e51 	.word	0x00007e51
    944c:	000092f5 	.word	0x000092f5
    9450:	00007e69 	.word	0x00007e69
    9454:	200009e4 	.word	0x200009e4
    9458:	00007e35 	.word	0x00007e35
    945c:	00007df9 	.word	0x00007df9

00009460 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9460:	b580      	push	{r7, lr}
    9462:	b082      	sub	sp, #8
    9464:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9466:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    946a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    946c:	2103      	movs	r1, #3
    946e:	6878      	ldr	r0, [r7, #4]
    9470:	4b17      	ldr	r3, [pc, #92]	; (94d0 <_usb_d_dev_enable+0x70>)
    9472:	4798      	blx	r3
    9474:	4603      	mov	r3, r0
    9476:	2b00      	cmp	r3, #0
    9478:	d002      	beq.n	9480 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    947a:	f06f 0310 	mvn.w	r3, #16
    947e:	e023      	b.n	94c8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9480:	6878      	ldr	r0, [r7, #4]
    9482:	4b14      	ldr	r3, [pc, #80]	; (94d4 <_usb_d_dev_enable+0x74>)
    9484:	4798      	blx	r3
    9486:	4603      	mov	r3, r0
    9488:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    948a:	78fb      	ldrb	r3, [r7, #3]
    948c:	f003 0302 	and.w	r3, r3, #2
    9490:	2b00      	cmp	r3, #0
    9492:	d107      	bne.n	94a4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9494:	78fb      	ldrb	r3, [r7, #3]
    9496:	f043 0302 	orr.w	r3, r3, #2
    949a:	b2db      	uxtb	r3, r3
    949c:	4619      	mov	r1, r3
    949e:	6878      	ldr	r0, [r7, #4]
    94a0:	4b0d      	ldr	r3, [pc, #52]	; (94d8 <_usb_d_dev_enable+0x78>)
    94a2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    94a4:	2050      	movs	r0, #80	; 0x50
    94a6:	4b0d      	ldr	r3, [pc, #52]	; (94dc <_usb_d_dev_enable+0x7c>)
    94a8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    94aa:	2051      	movs	r0, #81	; 0x51
    94ac:	4b0b      	ldr	r3, [pc, #44]	; (94dc <_usb_d_dev_enable+0x7c>)
    94ae:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    94b0:	2052      	movs	r0, #82	; 0x52
    94b2:	4b0a      	ldr	r3, [pc, #40]	; (94dc <_usb_d_dev_enable+0x7c>)
    94b4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    94b6:	2053      	movs	r0, #83	; 0x53
    94b8:	4b08      	ldr	r3, [pc, #32]	; (94dc <_usb_d_dev_enable+0x7c>)
    94ba:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    94bc:	f240 218d 	movw	r1, #653	; 0x28d
    94c0:	6878      	ldr	r0, [r7, #4]
    94c2:	4b07      	ldr	r3, [pc, #28]	; (94e0 <_usb_d_dev_enable+0x80>)
    94c4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    94c6:	2300      	movs	r3, #0
}
    94c8:	4618      	mov	r0, r3
    94ca:	3708      	adds	r7, #8
    94cc:	46bd      	mov	sp, r7
    94ce:	bd80      	pop	{r7, pc}
    94d0:	00007d03 	.word	0x00007d03
    94d4:	00007db1 	.word	0x00007db1
    94d8:	00007d89 	.word	0x00007d89
    94dc:	00007915 	.word	0x00007915
    94e0:	00007cad 	.word	0x00007cad

000094e4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    94e4:	b580      	push	{r7, lr}
    94e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    94e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94ec:	4b01      	ldr	r3, [pc, #4]	; (94f4 <_usb_d_dev_attach+0x10>)
    94ee:	4798      	blx	r3
}
    94f0:	bf00      	nop
    94f2:	bd80      	pop	{r7, pc}
    94f4:	00007dd5 	.word	0x00007dd5

000094f8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    94f8:	b580      	push	{r7, lr}
    94fa:	b082      	sub	sp, #8
    94fc:	af00      	add	r7, sp, #0
    94fe:	4603      	mov	r3, r0
    9500:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9502:	79fb      	ldrb	r3, [r7, #7]
    9504:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9508:	b2db      	uxtb	r3, r3
    950a:	4619      	mov	r1, r3
    950c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9510:	4b02      	ldr	r3, [pc, #8]	; (951c <_usb_d_dev_set_address+0x24>)
    9512:	4798      	blx	r3
}
    9514:	bf00      	nop
    9516:	3708      	adds	r7, #8
    9518:	46bd      	mov	sp, r7
    951a:	bd80      	pop	{r7, pc}
    951c:	00007e17 	.word	0x00007e17

00009520 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9520:	b590      	push	{r4, r7, lr}
    9522:	b085      	sub	sp, #20
    9524:	af00      	add	r7, sp, #0
    9526:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9528:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    952c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	7c9b      	ldrb	r3, [r3, #18]
    9532:	f003 030f 	and.w	r3, r3, #15
    9536:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	68db      	ldr	r3, [r3, #12]
    953c:	461a      	mov	r2, r3
    953e:	7afb      	ldrb	r3, [r7, #11]
    9540:	2100      	movs	r1, #0
    9542:	4618      	mov	r0, r3
    9544:	4b0f      	ldr	r3, [pc, #60]	; (9584 <_usb_d_dev_trans_setup+0x64>)
    9546:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9548:	687b      	ldr	r3, [r7, #4]
    954a:	8a1b      	ldrh	r3, [r3, #16]
    954c:	461a      	mov	r2, r3
    954e:	7af8      	ldrb	r0, [r7, #11]
    9550:	2300      	movs	r3, #0
    9552:	2100      	movs	r1, #0
    9554:	4c0c      	ldr	r4, [pc, #48]	; (9588 <_usb_d_dev_trans_setup+0x68>)
    9556:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9558:	7afb      	ldrb	r3, [r7, #11]
    955a:	22b0      	movs	r2, #176	; 0xb0
    955c:	4619      	mov	r1, r3
    955e:	68f8      	ldr	r0, [r7, #12]
    9560:	4b0a      	ldr	r3, [pc, #40]	; (958c <_usb_d_dev_trans_setup+0x6c>)
    9562:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9564:	7afb      	ldrb	r3, [r7, #11]
    9566:	2200      	movs	r2, #0
    9568:	2100      	movs	r1, #0
    956a:	4618      	mov	r0, r3
    956c:	4b08      	ldr	r3, [pc, #32]	; (9590 <_usb_d_dev_trans_setup+0x70>)
    956e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9570:	7afb      	ldrb	r3, [r7, #11]
    9572:	2210      	movs	r2, #16
    9574:	4619      	mov	r1, r3
    9576:	68f8      	ldr	r0, [r7, #12]
    9578:	4b06      	ldr	r3, [pc, #24]	; (9594 <_usb_d_dev_trans_setup+0x74>)
    957a:	4798      	blx	r3
}
    957c:	bf00      	nop
    957e:	3714      	adds	r7, #20
    9580:	46bd      	mov	sp, r7
    9582:	bd90      	pop	{r4, r7, pc}
    9584:	000082b5 	.word	0x000082b5
    9588:	0000843d 	.word	0x0000843d
    958c:	00007b15 	.word	0x00007b15
    9590:	0000850d 	.word	0x0000850d
    9594:	00007b69 	.word	0x00007b69

00009598 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9598:	b580      	push	{r7, lr}
    959a:	b088      	sub	sp, #32
    959c:	af00      	add	r7, sp, #0
    959e:	4603      	mov	r3, r0
    95a0:	71fb      	strb	r3, [r7, #7]
    95a2:	460b      	mov	r3, r1
    95a4:	71bb      	strb	r3, [r7, #6]
    95a6:	4613      	mov	r3, r2
    95a8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    95aa:	79fb      	ldrb	r3, [r7, #7]
    95ac:	f003 030f 	and.w	r3, r3, #15
    95b0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    95b2:	79fb      	ldrb	r3, [r7, #7]
    95b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    95b8:	2b00      	cmp	r3, #0
    95ba:	bf14      	ite	ne
    95bc:	2301      	movne	r3, #1
    95be:	2300      	moveq	r3, #0
    95c0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    95c2:	7fba      	ldrb	r2, [r7, #30]
    95c4:	7ffb      	ldrb	r3, [r7, #31]
    95c6:	4611      	mov	r1, r2
    95c8:	4618      	mov	r0, r3
    95ca:	4b3e      	ldr	r3, [pc, #248]	; (96c4 <_usb_d_dev_ep_init+0x12c>)
    95cc:	4798      	blx	r3
    95ce:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    95d0:	79bb      	ldrb	r3, [r7, #6]
    95d2:	f003 0303 	and.w	r3, r3, #3
    95d6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    95d8:	7ffa      	ldrb	r2, [r7, #31]
    95da:	4613      	mov	r3, r2
    95dc:	005b      	lsls	r3, r3, #1
    95de:	4413      	add	r3, r2
    95e0:	009b      	lsls	r3, r3, #2
    95e2:	4a39      	ldr	r2, [pc, #228]	; (96c8 <_usb_d_dev_ep_init+0x130>)
    95e4:	4413      	add	r3, r2
    95e6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    95e8:	7ffb      	ldrb	r3, [r7, #31]
    95ea:	2b04      	cmp	r3, #4
    95ec:	d902      	bls.n	95f4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    95ee:	f06f 0311 	mvn.w	r3, #17
    95f2:	e063      	b.n	96bc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    95f4:	69bb      	ldr	r3, [r7, #24]
    95f6:	7c9b      	ldrb	r3, [r3, #18]
    95f8:	2bff      	cmp	r3, #255	; 0xff
    95fa:	d002      	beq.n	9602 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    95fc:	f06f 0313 	mvn.w	r3, #19
    9600:	e05c      	b.n	96bc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9602:	7dfb      	ldrb	r3, [r7, #23]
    9604:	2b00      	cmp	r3, #0
    9606:	d11f      	bne.n	9648 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9608:	7fbb      	ldrb	r3, [r7, #30]
    960a:	2b00      	cmp	r3, #0
    960c:	bf14      	ite	ne
    960e:	2301      	movne	r3, #1
    9610:	2300      	moveq	r3, #0
    9612:	b2db      	uxtb	r3, r3
    9614:	f083 0301 	eor.w	r3, r3, #1
    9618:	b2db      	uxtb	r3, r3
    961a:	f003 0301 	and.w	r3, r3, #1
    961e:	b2da      	uxtb	r2, r3
    9620:	7ffb      	ldrb	r3, [r7, #31]
    9622:	4611      	mov	r1, r2
    9624:	4618      	mov	r0, r3
    9626:	4b27      	ldr	r3, [pc, #156]	; (96c4 <_usb_d_dev_ep_init+0x12c>)
    9628:	4798      	blx	r3
    962a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    962c:	68fb      	ldr	r3, [r7, #12]
    962e:	7c9b      	ldrb	r3, [r3, #18]
    9630:	2bff      	cmp	r3, #255	; 0xff
    9632:	d002      	beq.n	963a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9634:	f06f 0313 	mvn.w	r3, #19
    9638:	e040      	b.n	96bc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    963a:	693b      	ldr	r3, [r7, #16]
    963c:	681b      	ldr	r3, [r3, #0]
    963e:	2b00      	cmp	r3, #0
    9640:	d102      	bne.n	9648 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9642:	f06f 0312 	mvn.w	r3, #18
    9646:	e039      	b.n	96bc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9648:	7fbb      	ldrb	r3, [r7, #30]
    964a:	2b00      	cmp	r3, #0
    964c:	d007      	beq.n	965e <_usb_d_dev_ep_init+0xc6>
    964e:	693b      	ldr	r3, [r7, #16]
    9650:	685b      	ldr	r3, [r3, #4]
    9652:	2b00      	cmp	r3, #0
    9654:	bf14      	ite	ne
    9656:	2301      	movne	r3, #1
    9658:	2300      	moveq	r3, #0
    965a:	b2db      	uxtb	r3, r3
    965c:	e006      	b.n	966c <_usb_d_dev_ep_init+0xd4>
    965e:	693b      	ldr	r3, [r7, #16]
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	2b00      	cmp	r3, #0
    9664:	bf14      	ite	ne
    9666:	2301      	movne	r3, #1
    9668:	2300      	moveq	r3, #0
    966a:	b2db      	uxtb	r3, r3
    966c:	2b00      	cmp	r3, #0
    966e:	d00f      	beq.n	9690 <_usb_d_dev_ep_init+0xf8>
    9670:	7fbb      	ldrb	r3, [r7, #30]
    9672:	2b00      	cmp	r3, #0
    9674:	d003      	beq.n	967e <_usb_d_dev_ep_init+0xe6>
    9676:	693b      	ldr	r3, [r7, #16]
    9678:	895b      	ldrh	r3, [r3, #10]
    967a:	461a      	mov	r2, r3
    967c:	e002      	b.n	9684 <_usb_d_dev_ep_init+0xec>
    967e:	693b      	ldr	r3, [r7, #16]
    9680:	891b      	ldrh	r3, [r3, #8]
    9682:	461a      	mov	r2, r3
    9684:	88bb      	ldrh	r3, [r7, #4]
    9686:	429a      	cmp	r2, r3
    9688:	da02      	bge.n	9690 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    968a:	f06f 0312 	mvn.w	r3, #18
    968e:	e015      	b.n	96bc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9690:	7fbb      	ldrb	r3, [r7, #30]
    9692:	2b00      	cmp	r3, #0
    9694:	d002      	beq.n	969c <_usb_d_dev_ep_init+0x104>
    9696:	693b      	ldr	r3, [r7, #16]
    9698:	685b      	ldr	r3, [r3, #4]
    969a:	e001      	b.n	96a0 <_usb_d_dev_ep_init+0x108>
    969c:	693b      	ldr	r3, [r7, #16]
    969e:	681b      	ldr	r3, [r3, #0]
    96a0:	69ba      	ldr	r2, [r7, #24]
    96a2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    96a4:	69bb      	ldr	r3, [r7, #24]
    96a6:	88ba      	ldrh	r2, [r7, #4]
    96a8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    96aa:	7dfb      	ldrb	r3, [r7, #23]
    96ac:	3301      	adds	r3, #1
    96ae:	b2da      	uxtb	r2, r3
    96b0:	69bb      	ldr	r3, [r7, #24]
    96b2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    96b4:	69bb      	ldr	r3, [r7, #24]
    96b6:	79fa      	ldrb	r2, [r7, #7]
    96b8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    96ba:	2300      	movs	r3, #0
}
    96bc:	4618      	mov	r0, r3
    96be:	3720      	adds	r7, #32
    96c0:	46bd      	mov	sp, r7
    96c2:	bd80      	pop	{r7, pc}
    96c4:	000085c9 	.word	0x000085c9
    96c8:	0000d730 	.word	0x0000d730

000096cc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    96cc:	b580      	push	{r7, lr}
    96ce:	b086      	sub	sp, #24
    96d0:	af00      	add	r7, sp, #0
    96d2:	4603      	mov	r3, r0
    96d4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    96d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96da:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    96dc:	79fb      	ldrb	r3, [r7, #7]
    96de:	f003 030f 	and.w	r3, r3, #15
    96e2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    96e4:	79fb      	ldrb	r3, [r7, #7]
    96e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    96ea:	2b00      	cmp	r3, #0
    96ec:	bf14      	ite	ne
    96ee:	2301      	movne	r3, #1
    96f0:	2300      	moveq	r3, #0
    96f2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    96f4:	7cba      	ldrb	r2, [r7, #18]
    96f6:	7cfb      	ldrb	r3, [r7, #19]
    96f8:	4611      	mov	r1, r2
    96fa:	4618      	mov	r0, r3
    96fc:	4b2a      	ldr	r3, [pc, #168]	; (97a8 <_usb_d_dev_ep_deinit+0xdc>)
    96fe:	4798      	blx	r3
    9700:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9702:	7cfb      	ldrb	r3, [r7, #19]
    9704:	2b04      	cmp	r3, #4
    9706:	d84a      	bhi.n	979e <_usb_d_dev_ep_deinit+0xd2>
    9708:	68fb      	ldr	r3, [r7, #12]
    970a:	7c9b      	ldrb	r3, [r3, #18]
    970c:	2bff      	cmp	r3, #255	; 0xff
    970e:	d046      	beq.n	979e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9710:	7cbb      	ldrb	r3, [r7, #18]
    9712:	2203      	movs	r2, #3
    9714:	4619      	mov	r1, r3
    9716:	68f8      	ldr	r0, [r7, #12]
    9718:	4b24      	ldr	r3, [pc, #144]	; (97ac <_usb_d_dev_ep_deinit+0xe0>)
    971a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    971c:	68fb      	ldr	r3, [r7, #12]
    971e:	7cdb      	ldrb	r3, [r3, #19]
    9720:	f003 0307 	and.w	r3, r3, #7
    9724:	b2db      	uxtb	r3, r3
    9726:	2b01      	cmp	r3, #1
    9728:	d107      	bne.n	973a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    972a:	79fb      	ldrb	r3, [r7, #7]
    972c:	697a      	ldr	r2, [r7, #20]
    972e:	3308      	adds	r3, #8
    9730:	015b      	lsls	r3, r3, #5
    9732:	4413      	add	r3, r2
    9734:	2200      	movs	r2, #0
    9736:	701a      	strb	r2, [r3, #0]
    9738:	e02a      	b.n	9790 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    973a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    973e:	2b00      	cmp	r3, #0
    9740:	da15      	bge.n	976e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9742:	79fb      	ldrb	r3, [r7, #7]
    9744:	f003 030f 	and.w	r3, r3, #15
    9748:	79fa      	ldrb	r2, [r7, #7]
    974a:	f002 020f 	and.w	r2, r2, #15
    974e:	6979      	ldr	r1, [r7, #20]
    9750:	3208      	adds	r2, #8
    9752:	0152      	lsls	r2, r2, #5
    9754:	440a      	add	r2, r1
    9756:	7812      	ldrb	r2, [r2, #0]
    9758:	b2d2      	uxtb	r2, r2
    975a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    975e:	b2d1      	uxtb	r1, r2
    9760:	697a      	ldr	r2, [r7, #20]
    9762:	3308      	adds	r3, #8
    9764:	015b      	lsls	r3, r3, #5
    9766:	4413      	add	r3, r2
    9768:	460a      	mov	r2, r1
    976a:	701a      	strb	r2, [r3, #0]
    976c:	e010      	b.n	9790 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    976e:	79fb      	ldrb	r3, [r7, #7]
    9770:	79fa      	ldrb	r2, [r7, #7]
    9772:	6979      	ldr	r1, [r7, #20]
    9774:	3208      	adds	r2, #8
    9776:	0152      	lsls	r2, r2, #5
    9778:	440a      	add	r2, r1
    977a:	7812      	ldrb	r2, [r2, #0]
    977c:	b2d2      	uxtb	r2, r2
    977e:	f022 0207 	bic.w	r2, r2, #7
    9782:	b2d1      	uxtb	r1, r2
    9784:	697a      	ldr	r2, [r7, #20]
    9786:	3308      	adds	r3, #8
    9788:	015b      	lsls	r3, r3, #5
    978a:	4413      	add	r3, r2
    978c:	460a      	mov	r2, r1
    978e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9790:	68fb      	ldr	r3, [r7, #12]
    9792:	2200      	movs	r2, #0
    9794:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9796:	68fb      	ldr	r3, [r7, #12]
    9798:	22ff      	movs	r2, #255	; 0xff
    979a:	749a      	strb	r2, [r3, #18]
    979c:	e000      	b.n	97a0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    979e:	bf00      	nop
}
    97a0:	3718      	adds	r7, #24
    97a2:	46bd      	mov	sp, r7
    97a4:	bd80      	pop	{r7, pc}
    97a6:	bf00      	nop
    97a8:	000085c9 	.word	0x000085c9
    97ac:	00009c01 	.word	0x00009c01

000097b0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    97b0:	b5b0      	push	{r4, r5, r7, lr}
    97b2:	b088      	sub	sp, #32
    97b4:	af00      	add	r7, sp, #0
    97b6:	4603      	mov	r3, r0
    97b8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    97ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97be:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    97c0:	79fb      	ldrb	r3, [r7, #7]
    97c2:	f003 030f 	and.w	r3, r3, #15
    97c6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    97c8:	79fb      	ldrb	r3, [r7, #7]
    97ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    97ce:	2b00      	cmp	r3, #0
    97d0:	bf14      	ite	ne
    97d2:	2301      	movne	r3, #1
    97d4:	2300      	moveq	r3, #0
    97d6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    97d8:	7eba      	ldrb	r2, [r7, #26]
    97da:	7efb      	ldrb	r3, [r7, #27]
    97dc:	4611      	mov	r1, r2
    97de:	4618      	mov	r0, r3
    97e0:	4b70      	ldr	r3, [pc, #448]	; (99a4 <_usb_d_dev_ep_enable+0x1f4>)
    97e2:	4798      	blx	r3
    97e4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    97e6:	7efb      	ldrb	r3, [r7, #27]
    97e8:	4619      	mov	r1, r3
    97ea:	69f8      	ldr	r0, [r7, #28]
    97ec:	4b6e      	ldr	r3, [pc, #440]	; (99a8 <_usb_d_dev_ep_enable+0x1f8>)
    97ee:	4798      	blx	r3
    97f0:	4603      	mov	r3, r0
    97f2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    97f4:	7efb      	ldrb	r3, [r7, #27]
    97f6:	2b04      	cmp	r3, #4
    97f8:	d803      	bhi.n	9802 <_usb_d_dev_ep_enable+0x52>
    97fa:	697b      	ldr	r3, [r7, #20]
    97fc:	7c9b      	ldrb	r3, [r3, #18]
    97fe:	2bff      	cmp	r3, #255	; 0xff
    9800:	d102      	bne.n	9808 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9802:	f06f 0311 	mvn.w	r3, #17
    9806:	e0c8      	b.n	999a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9808:	7efb      	ldrb	r3, [r7, #27]
    980a:	015b      	lsls	r3, r3, #5
    980c:	4a67      	ldr	r2, [pc, #412]	; (99ac <_usb_d_dev_ep_enable+0x1fc>)
    980e:	4413      	add	r3, r2
    9810:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9812:	697b      	ldr	r3, [r7, #20]
    9814:	7cdb      	ldrb	r3, [r3, #19]
    9816:	f003 0307 	and.w	r3, r3, #7
    981a:	b2db      	uxtb	r3, r3
    981c:	2b01      	cmp	r3, #1
    981e:	d14b      	bne.n	98b8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9820:	7cfb      	ldrb	r3, [r7, #19]
    9822:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9826:	2b00      	cmp	r3, #0
    9828:	d002      	beq.n	9830 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    982a:	f06f 0313 	mvn.w	r3, #19
    982e:	e0b4      	b.n	999a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9830:	7efb      	ldrb	r3, [r7, #27]
    9832:	2211      	movs	r2, #17
    9834:	4619      	mov	r1, r3
    9836:	69f8      	ldr	r0, [r7, #28]
    9838:	4b5d      	ldr	r3, [pc, #372]	; (99b0 <_usb_d_dev_ep_enable+0x200>)
    983a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    983c:	697b      	ldr	r3, [r7, #20]
    983e:	8a1b      	ldrh	r3, [r3, #16]
    9840:	039b      	lsls	r3, r3, #14
    9842:	4c5c      	ldr	r4, [pc, #368]	; (99b4 <_usb_d_dev_ep_enable+0x204>)
    9844:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9846:	697b      	ldr	r3, [r7, #20]
    9848:	8a1b      	ldrh	r3, [r3, #16]
    984a:	4618      	mov	r0, r3
    984c:	4b5a      	ldr	r3, [pc, #360]	; (99b8 <_usb_d_dev_ep_enable+0x208>)
    984e:	4798      	blx	r3
    9850:	4603      	mov	r3, r0
    9852:	071b      	lsls	r3, r3, #28
    9854:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9858:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    985c:	68fb      	ldr	r3, [r7, #12]
    985e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9860:	68fb      	ldr	r3, [r7, #12]
    9862:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9866:	697b      	ldr	r3, [r7, #20]
    9868:	8a1b      	ldrh	r3, [r3, #16]
    986a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    986e:	697b      	ldr	r3, [r7, #20]
    9870:	8a1b      	ldrh	r3, [r3, #16]
    9872:	4618      	mov	r0, r3
    9874:	4b50      	ldr	r3, [pc, #320]	; (99b8 <_usb_d_dev_ep_enable+0x208>)
    9876:	4798      	blx	r3
    9878:	4603      	mov	r3, r0
    987a:	071b      	lsls	r3, r3, #28
    987c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9880:	432b      	orrs	r3, r5
    9882:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9884:	7efb      	ldrb	r3, [r7, #27]
    9886:	2200      	movs	r2, #0
    9888:	2100      	movs	r1, #0
    988a:	4618      	mov	r0, r3
    988c:	4b4b      	ldr	r3, [pc, #300]	; (99bc <_usb_d_dev_ep_enable+0x20c>)
    988e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9890:	7efb      	ldrb	r3, [r7, #27]
    9892:	2200      	movs	r2, #0
    9894:	2101      	movs	r1, #1
    9896:	4618      	mov	r0, r3
    9898:	4b49      	ldr	r3, [pc, #292]	; (99c0 <_usb_d_dev_ep_enable+0x210>)
    989a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    989c:	7efb      	ldrb	r3, [r7, #27]
    989e:	2100      	movs	r1, #0
    98a0:	4618      	mov	r0, r3
    98a2:	4b48      	ldr	r3, [pc, #288]	; (99c4 <_usb_d_dev_ep_enable+0x214>)
    98a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    98a6:	7efb      	ldrb	r3, [r7, #27]
    98a8:	2101      	movs	r1, #1
    98aa:	4618      	mov	r0, r3
    98ac:	4b45      	ldr	r3, [pc, #276]	; (99c4 <_usb_d_dev_ep_enable+0x214>)
    98ae:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    98b0:	6978      	ldr	r0, [r7, #20]
    98b2:	4b45      	ldr	r3, [pc, #276]	; (99c8 <_usb_d_dev_ep_enable+0x218>)
    98b4:	4798      	blx	r3
    98b6:	e06f      	b.n	9998 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    98b8:	7ebb      	ldrb	r3, [r7, #26]
    98ba:	2b00      	cmp	r3, #0
    98bc:	d038      	beq.n	9930 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    98be:	7cfb      	ldrb	r3, [r7, #19]
    98c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    98c4:	2b00      	cmp	r3, #0
    98c6:	d002      	beq.n	98ce <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    98c8:	f06f 0313 	mvn.w	r3, #19
    98cc:	e065      	b.n	999a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    98ce:	697b      	ldr	r3, [r7, #20]
    98d0:	7cdb      	ldrb	r3, [r3, #19]
    98d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    98d6:	b2db      	uxtb	r3, r3
    98d8:	011b      	lsls	r3, r3, #4
    98da:	b2db      	uxtb	r3, r3
    98dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    98e0:	b2da      	uxtb	r2, r3
    98e2:	7cfb      	ldrb	r3, [r7, #19]
    98e4:	4313      	orrs	r3, r2
    98e6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    98e8:	7cfa      	ldrb	r2, [r7, #19]
    98ea:	7efb      	ldrb	r3, [r7, #27]
    98ec:	4619      	mov	r1, r3
    98ee:	69f8      	ldr	r0, [r7, #28]
    98f0:	4b2f      	ldr	r3, [pc, #188]	; (99b0 <_usb_d_dev_ep_enable+0x200>)
    98f2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    98f4:	68fb      	ldr	r3, [r7, #12]
    98f6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98fa:	697b      	ldr	r3, [r7, #20]
    98fc:	8a1b      	ldrh	r3, [r3, #16]
    98fe:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9902:	697b      	ldr	r3, [r7, #20]
    9904:	8a1b      	ldrh	r3, [r3, #16]
    9906:	4618      	mov	r0, r3
    9908:	4b2b      	ldr	r3, [pc, #172]	; (99b8 <_usb_d_dev_ep_enable+0x208>)
    990a:	4798      	blx	r3
    990c:	4603      	mov	r3, r0
    990e:	071b      	lsls	r3, r3, #28
    9910:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9914:	432b      	orrs	r3, r5
    9916:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9918:	7efb      	ldrb	r3, [r7, #27]
    991a:	2200      	movs	r2, #0
    991c:	2101      	movs	r1, #1
    991e:	4618      	mov	r0, r3
    9920:	4b27      	ldr	r3, [pc, #156]	; (99c0 <_usb_d_dev_ep_enable+0x210>)
    9922:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9924:	7efb      	ldrb	r3, [r7, #27]
    9926:	2101      	movs	r1, #1
    9928:	4618      	mov	r0, r3
    992a:	4b26      	ldr	r3, [pc, #152]	; (99c4 <_usb_d_dev_ep_enable+0x214>)
    992c:	4798      	blx	r3
    992e:	e033      	b.n	9998 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9930:	7cfb      	ldrb	r3, [r7, #19]
    9932:	f003 0307 	and.w	r3, r3, #7
    9936:	2b00      	cmp	r3, #0
    9938:	d002      	beq.n	9940 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    993a:	f06f 0313 	mvn.w	r3, #19
    993e:	e02c      	b.n	999a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9940:	697b      	ldr	r3, [r7, #20]
    9942:	7cdb      	ldrb	r3, [r3, #19]
    9944:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9948:	b2db      	uxtb	r3, r3
    994a:	461a      	mov	r2, r3
    994c:	7cfb      	ldrb	r3, [r7, #19]
    994e:	4313      	orrs	r3, r2
    9950:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9952:	7cfa      	ldrb	r2, [r7, #19]
    9954:	7efb      	ldrb	r3, [r7, #27]
    9956:	4619      	mov	r1, r3
    9958:	69f8      	ldr	r0, [r7, #28]
    995a:	4b15      	ldr	r3, [pc, #84]	; (99b0 <_usb_d_dev_ep_enable+0x200>)
    995c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    995e:	697b      	ldr	r3, [r7, #20]
    9960:	8a1b      	ldrh	r3, [r3, #16]
    9962:	039b      	lsls	r3, r3, #14
    9964:	4c13      	ldr	r4, [pc, #76]	; (99b4 <_usb_d_dev_ep_enable+0x204>)
    9966:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9968:	697b      	ldr	r3, [r7, #20]
    996a:	8a1b      	ldrh	r3, [r3, #16]
    996c:	4618      	mov	r0, r3
    996e:	4b12      	ldr	r3, [pc, #72]	; (99b8 <_usb_d_dev_ep_enable+0x208>)
    9970:	4798      	blx	r3
    9972:	4603      	mov	r3, r0
    9974:	071b      	lsls	r3, r3, #28
    9976:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    997a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    997e:	68fb      	ldr	r3, [r7, #12]
    9980:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9982:	7efb      	ldrb	r3, [r7, #27]
    9984:	2200      	movs	r2, #0
    9986:	2100      	movs	r1, #0
    9988:	4618      	mov	r0, r3
    998a:	4b0c      	ldr	r3, [pc, #48]	; (99bc <_usb_d_dev_ep_enable+0x20c>)
    998c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    998e:	7efb      	ldrb	r3, [r7, #27]
    9990:	2100      	movs	r1, #0
    9992:	4618      	mov	r0, r3
    9994:	4b0b      	ldr	r3, [pc, #44]	; (99c4 <_usb_d_dev_ep_enable+0x214>)
    9996:	4798      	blx	r3
	}

	return USB_OK;
    9998:	2300      	movs	r3, #0
}
    999a:	4618      	mov	r0, r3
    999c:	3720      	adds	r7, #32
    999e:	46bd      	mov	sp, r7
    99a0:	bdb0      	pop	{r4, r5, r7, pc}
    99a2:	bf00      	nop
    99a4:	000085c9 	.word	0x000085c9
    99a8:	00007c4f 	.word	0x00007c4f
    99ac:	200009e4 	.word	0x200009e4
    99b0:	00007c25 	.word	0x00007c25
    99b4:	0fffc000 	.word	0x0fffc000
    99b8:	00008565 	.word	0x00008565
    99bc:	0000850d 	.word	0x0000850d
    99c0:	000084b5 	.word	0x000084b5
    99c4:	0000847d 	.word	0x0000847d
    99c8:	00009521 	.word	0x00009521

000099cc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    99cc:	b580      	push	{r7, lr}
    99ce:	b084      	sub	sp, #16
    99d0:	af00      	add	r7, sp, #0
    99d2:	6078      	str	r0, [r7, #4]
    99d4:	460b      	mov	r3, r1
    99d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    99d8:	687b      	ldr	r3, [r7, #4]
    99da:	7c9b      	ldrb	r3, [r3, #18]
    99dc:	f003 030f 	and.w	r3, r3, #15
    99e0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    99e2:	78fa      	ldrb	r2, [r7, #3]
    99e4:	7bfb      	ldrb	r3, [r7, #15]
    99e6:	4611      	mov	r1, r2
    99e8:	4618      	mov	r0, r3
    99ea:	4b03      	ldr	r3, [pc, #12]	; (99f8 <_usb_d_dev_ep_stall_get+0x2c>)
    99ec:	4798      	blx	r3
    99ee:	4603      	mov	r3, r0
}
    99f0:	4618      	mov	r0, r3
    99f2:	3710      	adds	r7, #16
    99f4:	46bd      	mov	sp, r7
    99f6:	bd80      	pop	{r7, pc}
    99f8:	000080bd 	.word	0x000080bd

000099fc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    99fc:	b580      	push	{r7, lr}
    99fe:	b084      	sub	sp, #16
    9a00:	af00      	add	r7, sp, #0
    9a02:	6078      	str	r0, [r7, #4]
    9a04:	460b      	mov	r3, r1
    9a06:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a08:	687b      	ldr	r3, [r7, #4]
    9a0a:	7c9b      	ldrb	r3, [r3, #18]
    9a0c:	f003 030f 	and.w	r3, r3, #15
    9a10:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9a12:	78f9      	ldrb	r1, [r7, #3]
    9a14:	7bfb      	ldrb	r3, [r7, #15]
    9a16:	2201      	movs	r2, #1
    9a18:	4618      	mov	r0, r3
    9a1a:	4b0a      	ldr	r3, [pc, #40]	; (9a44 <_usb_d_dev_ep_stall_set+0x48>)
    9a1c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9a1e:	78fb      	ldrb	r3, [r7, #3]
    9a20:	2220      	movs	r2, #32
    9a22:	409a      	lsls	r2, r3
    9a24:	7bfb      	ldrb	r3, [r7, #15]
    9a26:	4611      	mov	r1, r2
    9a28:	4618      	mov	r0, r3
    9a2a:	4b07      	ldr	r3, [pc, #28]	; (9a48 <_usb_d_dev_ep_stall_set+0x4c>)
    9a2c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9a2e:	687a      	ldr	r2, [r7, #4]
    9a30:	7cd3      	ldrb	r3, [r2, #19]
    9a32:	f043 0308 	orr.w	r3, r3, #8
    9a36:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9a38:	2300      	movs	r3, #0
}
    9a3a:	4618      	mov	r0, r3
    9a3c:	3710      	adds	r7, #16
    9a3e:	46bd      	mov	sp, r7
    9a40:	bd80      	pop	{r7, pc}
    9a42:	bf00      	nop
    9a44:	00008065 	.word	0x00008065
    9a48:	00007fe5 	.word	0x00007fe5

00009a4c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b084      	sub	sp, #16
    9a50:	af00      	add	r7, sp, #0
    9a52:	6078      	str	r0, [r7, #4]
    9a54:	460b      	mov	r3, r1
    9a56:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9a58:	687b      	ldr	r3, [r7, #4]
    9a5a:	7c9b      	ldrb	r3, [r3, #18]
    9a5c:	f003 030f 	and.w	r3, r3, #15
    9a60:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9a62:	78fa      	ldrb	r2, [r7, #3]
    9a64:	7bfb      	ldrb	r3, [r7, #15]
    9a66:	4611      	mov	r1, r2
    9a68:	4618      	mov	r0, r3
    9a6a:	4b28      	ldr	r3, [pc, #160]	; (9b0c <_usb_d_dev_ep_stall_clr+0xc0>)
    9a6c:	4798      	blx	r3
    9a6e:	4603      	mov	r3, r0
    9a70:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9a72:	7bbb      	ldrb	r3, [r7, #14]
    9a74:	f083 0301 	eor.w	r3, r3, #1
    9a78:	b2db      	uxtb	r3, r3
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d001      	beq.n	9a82 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9a7e:	2300      	movs	r3, #0
    9a80:	e040      	b.n	9b04 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9a82:	78f9      	ldrb	r1, [r7, #3]
    9a84:	7bfb      	ldrb	r3, [r7, #15]
    9a86:	2200      	movs	r2, #0
    9a88:	4618      	mov	r0, r3
    9a8a:	4b21      	ldr	r3, [pc, #132]	; (9b10 <_usb_d_dev_ep_stall_clr+0xc4>)
    9a8c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9a8e:	78fb      	ldrb	r3, [r7, #3]
    9a90:	2220      	movs	r2, #32
    9a92:	409a      	lsls	r2, r3
    9a94:	7bfb      	ldrb	r3, [r7, #15]
    9a96:	4611      	mov	r1, r2
    9a98:	4618      	mov	r0, r3
    9a9a:	4b1e      	ldr	r3, [pc, #120]	; (9b14 <_usb_d_dev_ep_stall_clr+0xc8>)
    9a9c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9a9e:	78fa      	ldrb	r2, [r7, #3]
    9aa0:	7bfb      	ldrb	r3, [r7, #15]
    9aa2:	4611      	mov	r1, r2
    9aa4:	4618      	mov	r0, r3
    9aa6:	4b1c      	ldr	r3, [pc, #112]	; (9b18 <_usb_d_dev_ep_stall_clr+0xcc>)
    9aa8:	4798      	blx	r3
    9aaa:	4603      	mov	r3, r0
    9aac:	2b00      	cmp	r3, #0
    9aae:	d00b      	beq.n	9ac8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9ab0:	78fa      	ldrb	r2, [r7, #3]
    9ab2:	7bfb      	ldrb	r3, [r7, #15]
    9ab4:	4611      	mov	r1, r2
    9ab6:	4618      	mov	r0, r3
    9ab8:	4b18      	ldr	r3, [pc, #96]	; (9b1c <_usb_d_dev_ep_stall_clr+0xd0>)
    9aba:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9abc:	78f9      	ldrb	r1, [r7, #3]
    9abe:	7bfb      	ldrb	r3, [r7, #15]
    9ac0:	2200      	movs	r2, #0
    9ac2:	4618      	mov	r0, r3
    9ac4:	4b16      	ldr	r3, [pc, #88]	; (9b20 <_usb_d_dev_ep_stall_clr+0xd4>)
    9ac6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9ac8:	687b      	ldr	r3, [r7, #4]
    9aca:	7cdb      	ldrb	r3, [r3, #19]
    9acc:	f003 0307 	and.w	r3, r3, #7
    9ad0:	b2db      	uxtb	r3, r3
    9ad2:	2b01      	cmp	r3, #1
    9ad4:	d110      	bne.n	9af8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9ad6:	7bfb      	ldrb	r3, [r7, #15]
    9ad8:	4619      	mov	r1, r3
    9ada:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ade:	4b11      	ldr	r3, [pc, #68]	; (9b24 <_usb_d_dev_ep_stall_clr+0xd8>)
    9ae0:	4798      	blx	r3
    9ae2:	4603      	mov	r3, r0
    9ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9ae8:	2b00      	cmp	r3, #0
    9aea:	d10a      	bne.n	9b02 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9aec:	687a      	ldr	r2, [r7, #4]
    9aee:	7cd3      	ldrb	r3, [r2, #19]
    9af0:	f36f 03c3 	bfc	r3, #3, #1
    9af4:	74d3      	strb	r3, [r2, #19]
    9af6:	e004      	b.n	9b02 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9af8:	687a      	ldr	r2, [r7, #4]
    9afa:	7cd3      	ldrb	r3, [r2, #19]
    9afc:	f36f 03c3 	bfc	r3, #3, #1
    9b00:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9b02:	2300      	movs	r3, #0
}
    9b04:	4618      	mov	r0, r3
    9b06:	3710      	adds	r7, #16
    9b08:	46bd      	mov	sp, r7
    9b0a:	bd80      	pop	{r7, pc}
    9b0c:	000080bd 	.word	0x000080bd
    9b10:	00008065 	.word	0x00008065
    9b14:	0000800d 	.word	0x0000800d
    9b18:	00008101 	.word	0x00008101
    9b1c:	00008145 	.word	0x00008145
    9b20:	00008231 	.word	0x00008231
    9b24:	00007aed 	.word	0x00007aed

00009b28 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9b28:	b580      	push	{r7, lr}
    9b2a:	b086      	sub	sp, #24
    9b2c:	af00      	add	r7, sp, #0
    9b2e:	4603      	mov	r3, r0
    9b30:	460a      	mov	r2, r1
    9b32:	71fb      	strb	r3, [r7, #7]
    9b34:	4613      	mov	r3, r2
    9b36:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9b38:	79fb      	ldrb	r3, [r7, #7]
    9b3a:	f003 030f 	and.w	r3, r3, #15
    9b3e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9b40:	79fb      	ldrb	r3, [r7, #7]
    9b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9b46:	2b00      	cmp	r3, #0
    9b48:	bf14      	ite	ne
    9b4a:	2301      	movne	r3, #1
    9b4c:	2300      	moveq	r3, #0
    9b4e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9b50:	7cba      	ldrb	r2, [r7, #18]
    9b52:	7cfb      	ldrb	r3, [r7, #19]
    9b54:	4611      	mov	r1, r2
    9b56:	4618      	mov	r0, r3
    9b58:	4b13      	ldr	r3, [pc, #76]	; (9ba8 <_usb_d_dev_ep_stall+0x80>)
    9b5a:	4798      	blx	r3
    9b5c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9b5e:	7cfb      	ldrb	r3, [r7, #19]
    9b60:	2b04      	cmp	r3, #4
    9b62:	d902      	bls.n	9b6a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9b64:	f06f 0311 	mvn.w	r3, #17
    9b68:	e01a      	b.n	9ba0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9b6a:	79bb      	ldrb	r3, [r7, #6]
    9b6c:	2b01      	cmp	r3, #1
    9b6e:	d106      	bne.n	9b7e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9b70:	7cbb      	ldrb	r3, [r7, #18]
    9b72:	4619      	mov	r1, r3
    9b74:	68f8      	ldr	r0, [r7, #12]
    9b76:	4b0d      	ldr	r3, [pc, #52]	; (9bac <_usb_d_dev_ep_stall+0x84>)
    9b78:	4798      	blx	r3
    9b7a:	6178      	str	r0, [r7, #20]
    9b7c:	e00f      	b.n	9b9e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9b7e:	79bb      	ldrb	r3, [r7, #6]
    9b80:	2b00      	cmp	r3, #0
    9b82:	d106      	bne.n	9b92 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9b84:	7cbb      	ldrb	r3, [r7, #18]
    9b86:	4619      	mov	r1, r3
    9b88:	68f8      	ldr	r0, [r7, #12]
    9b8a:	4b09      	ldr	r3, [pc, #36]	; (9bb0 <_usb_d_dev_ep_stall+0x88>)
    9b8c:	4798      	blx	r3
    9b8e:	6178      	str	r0, [r7, #20]
    9b90:	e005      	b.n	9b9e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9b92:	7cbb      	ldrb	r3, [r7, #18]
    9b94:	4619      	mov	r1, r3
    9b96:	68f8      	ldr	r0, [r7, #12]
    9b98:	4b06      	ldr	r3, [pc, #24]	; (9bb4 <_usb_d_dev_ep_stall+0x8c>)
    9b9a:	4798      	blx	r3
    9b9c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9b9e:	697b      	ldr	r3, [r7, #20]
}
    9ba0:	4618      	mov	r0, r3
    9ba2:	3718      	adds	r7, #24
    9ba4:	46bd      	mov	sp, r7
    9ba6:	bd80      	pop	{r7, pc}
    9ba8:	000085c9 	.word	0x000085c9
    9bac:	000099fd 	.word	0x000099fd
    9bb0:	00009a4d 	.word	0x00009a4d
    9bb4:	000099cd 	.word	0x000099cd

00009bb8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9bb8:	b580      	push	{r7, lr}
    9bba:	b082      	sub	sp, #8
    9bbc:	af00      	add	r7, sp, #0
    9bbe:	6078      	str	r0, [r7, #4]
    9bc0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	7c9b      	ldrb	r3, [r3, #18]
    9bc6:	2bff      	cmp	r3, #255	; 0xff
    9bc8:	d014      	beq.n	9bf4 <_usb_d_dev_trans_done+0x3c>
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	7cdb      	ldrb	r3, [r3, #19]
    9bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bd2:	b2db      	uxtb	r3, r3
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d00d      	beq.n	9bf4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9bd8:	687a      	ldr	r2, [r7, #4]
    9bda:	7cd3      	ldrb	r3, [r2, #19]
    9bdc:	f36f 1386 	bfc	r3, #6, #1
    9be0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9be2:	4b06      	ldr	r3, [pc, #24]	; (9bfc <_usb_d_dev_trans_done+0x44>)
    9be4:	691b      	ldr	r3, [r3, #16]
    9be6:	687a      	ldr	r2, [r7, #4]
    9be8:	7c90      	ldrb	r0, [r2, #18]
    9bea:	687a      	ldr	r2, [r7, #4]
    9bec:	6892      	ldr	r2, [r2, #8]
    9bee:	6839      	ldr	r1, [r7, #0]
    9bf0:	4798      	blx	r3
    9bf2:	e000      	b.n	9bf6 <_usb_d_dev_trans_done+0x3e>
		return;
    9bf4:	bf00      	nop
}
    9bf6:	3708      	adds	r7, #8
    9bf8:	46bd      	mov	sp, r7
    9bfa:	bd80      	pop	{r7, pc}
    9bfc:	2000091c 	.word	0x2000091c

00009c00 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9c00:	b580      	push	{r7, lr}
    9c02:	b086      	sub	sp, #24
    9c04:	af00      	add	r7, sp, #0
    9c06:	60f8      	str	r0, [r7, #12]
    9c08:	460b      	mov	r3, r1
    9c0a:	607a      	str	r2, [r7, #4]
    9c0c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c0e:	68fb      	ldr	r3, [r7, #12]
    9c10:	7c9b      	ldrb	r3, [r3, #18]
    9c12:	f003 030f 	and.w	r3, r3, #15
    9c16:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9c18:	4b1f      	ldr	r3, [pc, #124]	; (9c98 <_usb_d_dev_trans_stop+0x98>)
    9c1a:	881b      	ldrh	r3, [r3, #0]
    9c1c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9c1e:	68fb      	ldr	r3, [r7, #12]
    9c20:	7c9b      	ldrb	r3, [r3, #18]
    9c22:	2bff      	cmp	r3, #255	; 0xff
    9c24:	d033      	beq.n	9c8e <_usb_d_dev_trans_stop+0x8e>
    9c26:	68fb      	ldr	r3, [r7, #12]
    9c28:	7cdb      	ldrb	r3, [r3, #19]
    9c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c2e:	b2db      	uxtb	r3, r3
    9c30:	2b00      	cmp	r3, #0
    9c32:	d02c      	beq.n	9c8e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9c34:	7afb      	ldrb	r3, [r7, #11]
    9c36:	2b00      	cmp	r3, #0
    9c38:	d006      	beq.n	9c48 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9c3a:	7dfb      	ldrb	r3, [r7, #23]
    9c3c:	2200      	movs	r2, #0
    9c3e:	2101      	movs	r1, #1
    9c40:	4618      	mov	r0, r3
    9c42:	4b16      	ldr	r3, [pc, #88]	; (9c9c <_usb_d_dev_trans_stop+0x9c>)
    9c44:	4798      	blx	r3
    9c46:	e005      	b.n	9c54 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9c48:	7dfb      	ldrb	r3, [r7, #23]
    9c4a:	2200      	movs	r2, #0
    9c4c:	2100      	movs	r1, #0
    9c4e:	4618      	mov	r0, r3
    9c50:	4b13      	ldr	r3, [pc, #76]	; (9ca0 <_usb_d_dev_trans_stop+0xa0>)
    9c52:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9c54:	7afb      	ldrb	r3, [r7, #11]
    9c56:	f107 0218 	add.w	r2, r7, #24
    9c5a:	4413      	add	r3, r2
    9c5c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9c60:	461a      	mov	r2, r3
    9c62:	7dfb      	ldrb	r3, [r7, #23]
    9c64:	4611      	mov	r1, r2
    9c66:	4618      	mov	r0, r3
    9c68:	4b0e      	ldr	r3, [pc, #56]	; (9ca4 <_usb_d_dev_trans_stop+0xa4>)
    9c6a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9c6c:	7afb      	ldrb	r3, [r7, #11]
    9c6e:	f107 0218 	add.w	r2, r7, #24
    9c72:	4413      	add	r3, r2
    9c74:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9c78:	461a      	mov	r2, r3
    9c7a:	7dfb      	ldrb	r3, [r7, #23]
    9c7c:	4611      	mov	r1, r2
    9c7e:	4618      	mov	r0, r3
    9c80:	4b09      	ldr	r3, [pc, #36]	; (9ca8 <_usb_d_dev_trans_stop+0xa8>)
    9c82:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9c84:	6879      	ldr	r1, [r7, #4]
    9c86:	68f8      	ldr	r0, [r7, #12]
    9c88:	4b08      	ldr	r3, [pc, #32]	; (9cac <_usb_d_dev_trans_stop+0xac>)
    9c8a:	4798      	blx	r3
    9c8c:	e000      	b.n	9c90 <_usb_d_dev_trans_stop+0x90>
		return;
    9c8e:	bf00      	nop
}
    9c90:	3718      	adds	r7, #24
    9c92:	46bd      	mov	sp, r7
    9c94:	bd80      	pop	{r7, pc}
    9c96:	bf00      	nop
    9c98:	0000d770 	.word	0x0000d770
    9c9c:	000084b5 	.word	0x000084b5
    9ca0:	0000850d 	.word	0x0000850d
    9ca4:	00007fbd 	.word	0x00007fbd
    9ca8:	0000800d 	.word	0x0000800d
    9cac:	00009bb9 	.word	0x00009bb9

00009cb0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9cb0:	b580      	push	{r7, lr}
    9cb2:	b086      	sub	sp, #24
    9cb4:	af00      	add	r7, sp, #0
    9cb6:	4603      	mov	r3, r0
    9cb8:	6039      	str	r1, [r7, #0]
    9cba:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9cbc:	79fb      	ldrb	r3, [r7, #7]
    9cbe:	f003 030f 	and.w	r3, r3, #15
    9cc2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9cc4:	7dfb      	ldrb	r3, [r7, #23]
    9cc6:	015b      	lsls	r3, r3, #5
    9cc8:	4a1e      	ldr	r2, [pc, #120]	; (9d44 <_usb_d_dev_ep_read_req+0x94>)
    9cca:	4413      	add	r3, r2
    9ccc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9cce:	693b      	ldr	r3, [r7, #16]
    9cd0:	681b      	ldr	r3, [r3, #0]
    9cd2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9cd4:	693b      	ldr	r3, [r7, #16]
    9cd6:	685b      	ldr	r3, [r3, #4]
    9cd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9cdc:	b29b      	uxth	r3, r3
    9cde:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9ce0:	7dfb      	ldrb	r3, [r7, #23]
    9ce2:	2b04      	cmp	r3, #4
    9ce4:	d802      	bhi.n	9cec <_usb_d_dev_ep_read_req+0x3c>
    9ce6:	683b      	ldr	r3, [r7, #0]
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d102      	bne.n	9cf2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9cec:	f06f 0311 	mvn.w	r3, #17
    9cf0:	e023      	b.n	9d3a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9cf2:	7dfb      	ldrb	r3, [r7, #23]
    9cf4:	4618      	mov	r0, r3
    9cf6:	4b14      	ldr	r3, [pc, #80]	; (9d48 <_usb_d_dev_ep_read_req+0x98>)
    9cf8:	4798      	blx	r3
    9cfa:	4603      	mov	r3, r0
    9cfc:	f083 0301 	eor.w	r3, r3, #1
    9d00:	b2db      	uxtb	r3, r3
    9d02:	2b00      	cmp	r3, #0
    9d04:	d002      	beq.n	9d0c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9d06:	f06f 0312 	mvn.w	r3, #18
    9d0a:	e016      	b.n	9d3a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9d0c:	7dfb      	ldrb	r3, [r7, #23]
    9d0e:	4618      	mov	r0, r3
    9d10:	4b0e      	ldr	r3, [pc, #56]	; (9d4c <_usb_d_dev_ep_read_req+0x9c>)
    9d12:	4798      	blx	r3
    9d14:	4603      	mov	r3, r0
    9d16:	f083 0301 	eor.w	r3, r3, #1
    9d1a:	b2db      	uxtb	r3, r3
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d001      	beq.n	9d24 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9d20:	2300      	movs	r3, #0
    9d22:	e00a      	b.n	9d3a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9d24:	68fb      	ldr	r3, [r7, #12]
    9d26:	2208      	movs	r2, #8
    9d28:	4619      	mov	r1, r3
    9d2a:	6838      	ldr	r0, [r7, #0]
    9d2c:	4b08      	ldr	r3, [pc, #32]	; (9d50 <_usb_d_dev_ep_read_req+0xa0>)
    9d2e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9d30:	7dfb      	ldrb	r3, [r7, #23]
    9d32:	4618      	mov	r0, r3
    9d34:	4b07      	ldr	r3, [pc, #28]	; (9d54 <_usb_d_dev_ep_read_req+0xa4>)
    9d36:	4798      	blx	r3

	return bytes;
    9d38:	897b      	ldrh	r3, [r7, #10]
}
    9d3a:	4618      	mov	r0, r3
    9d3c:	3718      	adds	r7, #24
    9d3e:	46bd      	mov	sp, r7
    9d40:	bd80      	pop	{r7, pc}
    9d42:	bf00      	nop
    9d44:	200009e4 	.word	0x200009e4
    9d48:	00008035 	.word	0x00008035
    9d4c:	000081e1 	.word	0x000081e1
    9d50:	0000d0dd 	.word	0x0000d0dd
    9d54:	00008211 	.word	0x00008211

00009d58 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9d58:	b580      	push	{r7, lr}
    9d5a:	b086      	sub	sp, #24
    9d5c:	af00      	add	r7, sp, #0
    9d5e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9d60:	687b      	ldr	r3, [r7, #4]
    9d62:	7a1b      	ldrb	r3, [r3, #8]
    9d64:	f003 030f 	and.w	r3, r3, #15
    9d68:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	7a1b      	ldrb	r3, [r3, #8]
    9d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d72:	2b00      	cmp	r3, #0
    9d74:	bf14      	ite	ne
    9d76:	2301      	movne	r3, #1
    9d78:	2300      	moveq	r3, #0
    9d7a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9d7c:	7d7a      	ldrb	r2, [r7, #21]
    9d7e:	7dbb      	ldrb	r3, [r7, #22]
    9d80:	4611      	mov	r1, r2
    9d82:	4618      	mov	r0, r3
    9d84:	4b5f      	ldr	r3, [pc, #380]	; (9f04 <_usb_d_dev_ep_trans+0x1ac>)
    9d86:	4798      	blx	r3
    9d88:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9d8a:	693b      	ldr	r3, [r7, #16]
    9d8c:	8a1b      	ldrh	r3, [r3, #16]
    9d8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9d92:	4293      	cmp	r3, r2
    9d94:	d004      	beq.n	9da0 <_usb_d_dev_ep_trans+0x48>
    9d96:	693b      	ldr	r3, [r7, #16]
    9d98:	8a1b      	ldrh	r3, [r3, #16]
    9d9a:	3b01      	subs	r3, #1
    9d9c:	b29b      	uxth	r3, r3
    9d9e:	e001      	b.n	9da4 <_usb_d_dev_ep_trans+0x4c>
    9da0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9da4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	685a      	ldr	r2, [r3, #4]
    9daa:	89fb      	ldrh	r3, [r7, #14]
    9dac:	4013      	ands	r3, r2
    9dae:	2b00      	cmp	r3, #0
    9db0:	bf14      	ite	ne
    9db2:	2301      	movne	r3, #1
    9db4:	2300      	moveq	r3, #0
    9db6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    9db8:	2300      	movs	r3, #0
    9dba:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9dbc:	7dbb      	ldrb	r3, [r7, #22]
    9dbe:	2b04      	cmp	r3, #4
    9dc0:	d902      	bls.n	9dc8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    9dc2:	f06f 0311 	mvn.w	r3, #17
    9dc6:	e098      	b.n	9efa <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	681b      	ldr	r3, [r3, #0]
    9dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9dd0:	d31a      	bcc.n	9e08 <_usb_d_dev_ep_trans+0xb0>
    9dd2:	687b      	ldr	r3, [r7, #4]
    9dd4:	681b      	ldr	r3, [r3, #0]
    9dd6:	461a      	mov	r2, r3
    9dd8:	687b      	ldr	r3, [r7, #4]
    9dda:	685b      	ldr	r3, [r3, #4]
    9ddc:	4413      	add	r3, r2
    9dde:	4a4a      	ldr	r2, [pc, #296]	; (9f08 <_usb_d_dev_ep_trans+0x1b0>)
    9de0:	4293      	cmp	r3, r2
    9de2:	d811      	bhi.n	9e08 <_usb_d_dev_ep_trans+0xb0>
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	681b      	ldr	r3, [r3, #0]
    9de8:	f003 0303 	and.w	r3, r3, #3
    9dec:	2b00      	cmp	r3, #0
    9dee:	d10b      	bne.n	9e08 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    9df0:	7d7b      	ldrb	r3, [r7, #21]
    9df2:	f083 0301 	eor.w	r3, r3, #1
    9df6:	b2db      	uxtb	r3, r3
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d00e      	beq.n	9e1a <_usb_d_dev_ep_trans+0xc2>
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	685b      	ldr	r3, [r3, #4]
    9e00:	693a      	ldr	r2, [r7, #16]
    9e02:	8a12      	ldrh	r2, [r2, #16]
    9e04:	4293      	cmp	r3, r2
    9e06:	d208      	bcs.n	9e1a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    9e08:	693b      	ldr	r3, [r7, #16]
    9e0a:	68db      	ldr	r3, [r3, #12]
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	d102      	bne.n	9e16 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    9e10:	f06f 0312 	mvn.w	r3, #18
    9e14:	e071      	b.n	9efa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    9e16:	2301      	movs	r3, #1
    9e18:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    9e1a:	7d7b      	ldrb	r3, [r7, #21]
    9e1c:	f083 0301 	eor.w	r3, r3, #1
    9e20:	b2db      	uxtb	r3, r3
    9e22:	2b00      	cmp	r3, #0
    9e24:	d009      	beq.n	9e3a <_usb_d_dev_ep_trans+0xe2>
    9e26:	7b7b      	ldrb	r3, [r7, #13]
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d006      	beq.n	9e3a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    9e2c:	693b      	ldr	r3, [r7, #16]
    9e2e:	68db      	ldr	r3, [r3, #12]
    9e30:	2b00      	cmp	r3, #0
    9e32:	d102      	bne.n	9e3a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    9e34:	f06f 0311 	mvn.w	r3, #17
    9e38:	e05f      	b.n	9efa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9e3a:	693b      	ldr	r3, [r7, #16]
    9e3c:	7cdb      	ldrb	r3, [r3, #19]
    9e3e:	f003 0308 	and.w	r3, r3, #8
    9e42:	b2db      	uxtb	r3, r3
    9e44:	2b00      	cmp	r3, #0
    9e46:	d001      	beq.n	9e4c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    9e48:	2302      	movs	r3, #2
    9e4a:	e056      	b.n	9efa <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    9e4c:	f107 0308 	add.w	r3, r7, #8
    9e50:	4618      	mov	r0, r3
    9e52:	4b2e      	ldr	r3, [pc, #184]	; (9f0c <_usb_d_dev_ep_trans+0x1b4>)
    9e54:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9e56:	693b      	ldr	r3, [r7, #16]
    9e58:	7cdb      	ldrb	r3, [r3, #19]
    9e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e5e:	b2db      	uxtb	r3, r3
    9e60:	2b00      	cmp	r3, #0
    9e62:	d006      	beq.n	9e72 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    9e64:	f107 0308 	add.w	r3, r7, #8
    9e68:	4618      	mov	r0, r3
    9e6a:	4b29      	ldr	r3, [pc, #164]	; (9f10 <_usb_d_dev_ep_trans+0x1b8>)
    9e6c:	4798      	blx	r3
		return USB_BUSY;
    9e6e:	2301      	movs	r3, #1
    9e70:	e043      	b.n	9efa <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    9e72:	693a      	ldr	r2, [r7, #16]
    9e74:	7cd3      	ldrb	r3, [r2, #19]
    9e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e7a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    9e7c:	f107 0308 	add.w	r3, r7, #8
    9e80:	4618      	mov	r0, r3
    9e82:	4b23      	ldr	r3, [pc, #140]	; (9f10 <_usb_d_dev_ep_trans+0x1b8>)
    9e84:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    9e86:	687b      	ldr	r3, [r7, #4]
    9e88:	681a      	ldr	r2, [r3, #0]
    9e8a:	693b      	ldr	r3, [r7, #16]
    9e8c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    9e8e:	687b      	ldr	r3, [r7, #4]
    9e90:	685a      	ldr	r2, [r3, #4]
    9e92:	693b      	ldr	r3, [r7, #16]
    9e94:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    9e96:	693b      	ldr	r3, [r7, #16]
    9e98:	2200      	movs	r2, #0
    9e9a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    9e9c:	693a      	ldr	r2, [r7, #16]
    9e9e:	7cd3      	ldrb	r3, [r2, #19]
    9ea0:	7d79      	ldrb	r1, [r7, #21]
    9ea2:	f361 13c7 	bfi	r3, r1, #7, #1
    9ea6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    9ea8:	693a      	ldr	r2, [r7, #16]
    9eaa:	7cd3      	ldrb	r3, [r2, #19]
    9eac:	7df9      	ldrb	r1, [r7, #23]
    9eae:	f361 1345 	bfi	r3, r1, #5, #1
    9eb2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	7a5b      	ldrb	r3, [r3, #9]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d007      	beq.n	9ecc <_usb_d_dev_ep_trans+0x174>
    9ebc:	7b7b      	ldrb	r3, [r7, #13]
    9ebe:	f083 0301 	eor.w	r3, r3, #1
    9ec2:	b2db      	uxtb	r3, r3
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d001      	beq.n	9ecc <_usb_d_dev_ep_trans+0x174>
    9ec8:	2301      	movs	r3, #1
    9eca:	e000      	b.n	9ece <_usb_d_dev_ep_trans+0x176>
    9ecc:	2300      	movs	r3, #0
    9ece:	b2db      	uxtb	r3, r3
    9ed0:	f003 0301 	and.w	r3, r3, #1
    9ed4:	b2d9      	uxtb	r1, r3
    9ed6:	693a      	ldr	r2, [r7, #16]
    9ed8:	7cd3      	ldrb	r3, [r2, #19]
    9eda:	f361 1304 	bfi	r3, r1, #4, #1
    9ede:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    9ee0:	7d7b      	ldrb	r3, [r7, #21]
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d004      	beq.n	9ef0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    9ee6:	2100      	movs	r1, #0
    9ee8:	6938      	ldr	r0, [r7, #16]
    9eea:	4b0a      	ldr	r3, [pc, #40]	; (9f14 <_usb_d_dev_ep_trans+0x1bc>)
    9eec:	4798      	blx	r3
    9eee:	e003      	b.n	9ef8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    9ef0:	2100      	movs	r1, #0
    9ef2:	6938      	ldr	r0, [r7, #16]
    9ef4:	4b08      	ldr	r3, [pc, #32]	; (9f18 <_usb_d_dev_ep_trans+0x1c0>)
    9ef6:	4798      	blx	r3
	}

	return ERR_NONE;
    9ef8:	2300      	movs	r3, #0
}
    9efa:	4618      	mov	r0, r3
    9efc:	3718      	adds	r7, #24
    9efe:	46bd      	mov	sp, r7
    9f00:	bd80      	pop	{r7, pc}
    9f02:	bf00      	nop
    9f04:	000085c9 	.word	0x000085c9
    9f08:	20041fff 	.word	0x20041fff
    9f0c:	0000a725 	.word	0x0000a725
    9f10:	0000a74b 	.word	0x0000a74b
    9f14:	00008891 	.word	0x00008891
    9f18:	00008aa9 	.word	0x00008aa9

00009f1c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    9f1c:	b580      	push	{r7, lr}
    9f1e:	b084      	sub	sp, #16
    9f20:	af00      	add	r7, sp, #0
    9f22:	4603      	mov	r3, r0
    9f24:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    9f26:	79fb      	ldrb	r3, [r7, #7]
    9f28:	f003 030f 	and.w	r3, r3, #15
    9f2c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    9f2e:	79fb      	ldrb	r3, [r7, #7]
    9f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f34:	2b00      	cmp	r3, #0
    9f36:	bf14      	ite	ne
    9f38:	2301      	movne	r3, #1
    9f3a:	2300      	moveq	r3, #0
    9f3c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9f3e:	7bba      	ldrb	r2, [r7, #14]
    9f40:	7bfb      	ldrb	r3, [r7, #15]
    9f42:	4611      	mov	r1, r2
    9f44:	4618      	mov	r0, r3
    9f46:	4b08      	ldr	r3, [pc, #32]	; (9f68 <_usb_d_dev_ep_abort+0x4c>)
    9f48:	4798      	blx	r3
    9f4a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    9f4c:	7bfb      	ldrb	r3, [r7, #15]
    9f4e:	2b04      	cmp	r3, #4
    9f50:	d806      	bhi.n	9f60 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    9f52:	7bbb      	ldrb	r3, [r7, #14]
    9f54:	2202      	movs	r2, #2
    9f56:	4619      	mov	r1, r3
    9f58:	68b8      	ldr	r0, [r7, #8]
    9f5a:	4b04      	ldr	r3, [pc, #16]	; (9f6c <_usb_d_dev_ep_abort+0x50>)
    9f5c:	4798      	blx	r3
    9f5e:	e000      	b.n	9f62 <_usb_d_dev_ep_abort+0x46>
		return;
    9f60:	bf00      	nop
}
    9f62:	3710      	adds	r7, #16
    9f64:	46bd      	mov	sp, r7
    9f66:	bd80      	pop	{r7, pc}
    9f68:	000085c9 	.word	0x000085c9
    9f6c:	00009c01 	.word	0x00009c01

00009f70 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9f70:	b480      	push	{r7}
    9f72:	b085      	sub	sp, #20
    9f74:	af00      	add	r7, sp, #0
    9f76:	4603      	mov	r3, r0
    9f78:	6039      	str	r1, [r7, #0]
    9f7a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9f7c:	683b      	ldr	r3, [r7, #0]
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d001      	beq.n	9f86 <_usb_d_dev_register_callback+0x16>
    9f82:	683b      	ldr	r3, [r7, #0]
    9f84:	e000      	b.n	9f88 <_usb_d_dev_register_callback+0x18>
    9f86:	4b0a      	ldr	r3, [pc, #40]	; (9fb0 <_usb_d_dev_register_callback+0x40>)
    9f88:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    9f8a:	79fb      	ldrb	r3, [r7, #7]
    9f8c:	2b01      	cmp	r3, #1
    9f8e:	d103      	bne.n	9f98 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9f90:	4a08      	ldr	r2, [pc, #32]	; (9fb4 <_usb_d_dev_register_callback+0x44>)
    9f92:	68fb      	ldr	r3, [r7, #12]
    9f94:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    9f96:	e005      	b.n	9fa4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    9f98:	79fb      	ldrb	r3, [r7, #7]
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	d102      	bne.n	9fa4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    9f9e:	4a05      	ldr	r2, [pc, #20]	; (9fb4 <_usb_d_dev_register_callback+0x44>)
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	6013      	str	r3, [r2, #0]
}
    9fa4:	bf00      	nop
    9fa6:	3714      	adds	r7, #20
    9fa8:	46bd      	mov	sp, r7
    9faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fae:	4770      	bx	lr
    9fb0:	00007e51 	.word	0x00007e51
    9fb4:	2000091c 	.word	0x2000091c

00009fb8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    9fb8:	b480      	push	{r7}
    9fba:	b085      	sub	sp, #20
    9fbc:	af00      	add	r7, sp, #0
    9fbe:	4603      	mov	r3, r0
    9fc0:	6039      	str	r1, [r7, #0]
    9fc2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9fc4:	683b      	ldr	r3, [r7, #0]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d001      	beq.n	9fce <_usb_d_dev_register_ep_callback+0x16>
    9fca:	683b      	ldr	r3, [r7, #0]
    9fcc:	e000      	b.n	9fd0 <_usb_d_dev_register_ep_callback+0x18>
    9fce:	4b0e      	ldr	r3, [pc, #56]	; (a008 <_usb_d_dev_register_ep_callback+0x50>)
    9fd0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9fd2:	79fb      	ldrb	r3, [r7, #7]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d103      	bne.n	9fe0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9fd8:	4a0c      	ldr	r2, [pc, #48]	; (a00c <_usb_d_dev_register_ep_callback+0x54>)
    9fda:	68fb      	ldr	r3, [r7, #12]
    9fdc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    9fde:	e00c      	b.n	9ffa <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9fe0:	79fb      	ldrb	r3, [r7, #7]
    9fe2:	2b01      	cmp	r3, #1
    9fe4:	d103      	bne.n	9fee <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    9fe6:	4a09      	ldr	r2, [pc, #36]	; (a00c <_usb_d_dev_register_ep_callback+0x54>)
    9fe8:	68fb      	ldr	r3, [r7, #12]
    9fea:	60d3      	str	r3, [r2, #12]
}
    9fec:	e005      	b.n	9ffa <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9fee:	79fb      	ldrb	r3, [r7, #7]
    9ff0:	2b02      	cmp	r3, #2
    9ff2:	d102      	bne.n	9ffa <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    9ff4:	4a05      	ldr	r2, [pc, #20]	; (a00c <_usb_d_dev_register_ep_callback+0x54>)
    9ff6:	68fb      	ldr	r3, [r7, #12]
    9ff8:	6113      	str	r3, [r2, #16]
}
    9ffa:	bf00      	nop
    9ffc:	3714      	adds	r7, #20
    9ffe:	46bd      	mov	sp, r7
    a000:	f85d 7b04 	ldr.w	r7, [sp], #4
    a004:	4770      	bx	lr
    a006:	bf00      	nop
    a008:	00007e51 	.word	0x00007e51
    a00c:	2000091c 	.word	0x2000091c

0000a010 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a010:	b580      	push	{r7, lr}
    a012:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a014:	4b01      	ldr	r3, [pc, #4]	; (a01c <USB_0_Handler+0xc>)
    a016:	4798      	blx	r3
}
    a018:	bf00      	nop
    a01a:	bd80      	pop	{r7, pc}
    a01c:	00009281 	.word	0x00009281

0000a020 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a020:	b580      	push	{r7, lr}
    a022:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a024:	4b01      	ldr	r3, [pc, #4]	; (a02c <USB_1_Handler+0xc>)
    a026:	4798      	blx	r3
}
    a028:	bf00      	nop
    a02a:	bd80      	pop	{r7, pc}
    a02c:	00009281 	.word	0x00009281

0000a030 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a030:	b580      	push	{r7, lr}
    a032:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a034:	4b01      	ldr	r3, [pc, #4]	; (a03c <USB_2_Handler+0xc>)
    a036:	4798      	blx	r3
}
    a038:	bf00      	nop
    a03a:	bd80      	pop	{r7, pc}
    a03c:	00009281 	.word	0x00009281

0000a040 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a040:	b580      	push	{r7, lr}
    a042:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a044:	4b01      	ldr	r3, [pc, #4]	; (a04c <USB_3_Handler+0xc>)
    a046:	4798      	blx	r3
}
    a048:	bf00      	nop
    a04a:	bd80      	pop	{r7, pc}
    a04c:	00009281 	.word	0x00009281

0000a050 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a050:	b480      	push	{r7}
    a052:	b083      	sub	sp, #12
    a054:	af00      	add	r7, sp, #0
    a056:	6078      	str	r0, [r7, #4]
    a058:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a05a:	bf00      	nop
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	689a      	ldr	r2, [r3, #8]
    a060:	683b      	ldr	r3, [r7, #0]
    a062:	4013      	ands	r3, r2
    a064:	2b00      	cmp	r3, #0
    a066:	d1f9      	bne.n	a05c <hri_wdt_wait_for_sync+0xc>
	};
}
    a068:	bf00      	nop
    a06a:	370c      	adds	r7, #12
    a06c:	46bd      	mov	sp, r7
    a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a072:	4770      	bx	lr

0000a074 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a074:	b580      	push	{r7, lr}
    a076:	b084      	sub	sp, #16
    a078:	af00      	add	r7, sp, #0
    a07a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a07c:	210e      	movs	r1, #14
    a07e:	6878      	ldr	r0, [r7, #4]
    a080:	4b0a      	ldr	r3, [pc, #40]	; (a0ac <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a082:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	781b      	ldrb	r3, [r3, #0]
    a088:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a08a:	7bfb      	ldrb	r3, [r7, #15]
    a08c:	085b      	lsrs	r3, r3, #1
    a08e:	b2db      	uxtb	r3, r3
    a090:	f003 0301 	and.w	r3, r3, #1
    a094:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a096:	7bfb      	ldrb	r3, [r7, #15]
    a098:	2b00      	cmp	r3, #0
    a09a:	bf14      	ite	ne
    a09c:	2301      	movne	r3, #1
    a09e:	2300      	moveq	r3, #0
    a0a0:	b2db      	uxtb	r3, r3
}
    a0a2:	4618      	mov	r0, r3
    a0a4:	3710      	adds	r7, #16
    a0a6:	46bd      	mov	sp, r7
    a0a8:	bd80      	pop	{r7, pc}
    a0aa:	bf00      	nop
    a0ac:	0000a051 	.word	0x0000a051

0000a0b0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a0b0:	b580      	push	{r7, lr}
    a0b2:	b082      	sub	sp, #8
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	781b      	ldrb	r3, [r3, #0]
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	f023 0304 	bic.w	r3, r3, #4
    a0c2:	b2da      	uxtb	r2, r3
    a0c4:	687b      	ldr	r3, [r7, #4]
    a0c6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a0c8:	210e      	movs	r1, #14
    a0ca:	6878      	ldr	r0, [r7, #4]
    a0cc:	4b02      	ldr	r3, [pc, #8]	; (a0d8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a0ce:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a0d0:	bf00      	nop
    a0d2:	3708      	adds	r7, #8
    a0d4:	46bd      	mov	sp, r7
    a0d6:	bd80      	pop	{r7, pc}
    a0d8:	0000a051 	.word	0x0000a051

0000a0dc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a0dc:	b580      	push	{r7, lr}
    a0de:	b084      	sub	sp, #16
    a0e0:	af00      	add	r7, sp, #0
    a0e2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a0e4:	210e      	movs	r1, #14
    a0e6:	6878      	ldr	r0, [r7, #4]
    a0e8:	4b08      	ldr	r3, [pc, #32]	; (a10c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a0ea:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	781b      	ldrb	r3, [r3, #0]
    a0f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a0f2:	7bfb      	ldrb	r3, [r7, #15]
    a0f4:	09db      	lsrs	r3, r3, #7
    a0f6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a0f8:	7bfb      	ldrb	r3, [r7, #15]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	bf14      	ite	ne
    a0fe:	2301      	movne	r3, #1
    a100:	2300      	moveq	r3, #0
    a102:	b2db      	uxtb	r3, r3
}
    a104:	4618      	mov	r0, r3
    a106:	3710      	adds	r7, #16
    a108:	46bd      	mov	sp, r7
    a10a:	bd80      	pop	{r7, pc}
    a10c:	0000a051 	.word	0x0000a051

0000a110 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a110:	b480      	push	{r7}
    a112:	b085      	sub	sp, #20
    a114:	af00      	add	r7, sp, #0
    a116:	6078      	str	r0, [r7, #4]
    a118:	460b      	mov	r3, r1
    a11a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	785b      	ldrb	r3, [r3, #1]
    a120:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a122:	7bfb      	ldrb	r3, [r7, #15]
    a124:	f023 030f 	bic.w	r3, r3, #15
    a128:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a12a:	78fb      	ldrb	r3, [r7, #3]
    a12c:	f003 030f 	and.w	r3, r3, #15
    a130:	b2da      	uxtb	r2, r3
    a132:	7bfb      	ldrb	r3, [r7, #15]
    a134:	4313      	orrs	r3, r2
    a136:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a138:	687b      	ldr	r3, [r7, #4]
    a13a:	7bfa      	ldrb	r2, [r7, #15]
    a13c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a13e:	bf00      	nop
    a140:	3714      	adds	r7, #20
    a142:	46bd      	mov	sp, r7
    a144:	f85d 7b04 	ldr.w	r7, [sp], #4
    a148:	4770      	bx	lr
	...

0000a14c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a14c:	b580      	push	{r7, lr}
    a14e:	b082      	sub	sp, #8
    a150:	af00      	add	r7, sp, #0
    a152:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a154:	687b      	ldr	r3, [r7, #4]
    a156:	2b00      	cmp	r3, #0
    a158:	d005      	beq.n	a166 <_wdt_init+0x1a>
    a15a:	687b      	ldr	r3, [r7, #4]
    a15c:	681b      	ldr	r3, [r3, #0]
    a15e:	2b00      	cmp	r3, #0
    a160:	d001      	beq.n	a166 <_wdt_init+0x1a>
    a162:	2301      	movs	r3, #1
    a164:	e000      	b.n	a168 <_wdt_init+0x1c>
    a166:	2300      	movs	r3, #0
    a168:	f003 0301 	and.w	r3, r3, #1
    a16c:	b2db      	uxtb	r3, r3
    a16e:	2250      	movs	r2, #80	; 0x50
    a170:	4913      	ldr	r1, [pc, #76]	; (a1c0 <_wdt_init+0x74>)
    a172:	4618      	mov	r0, r3
    a174:	4b13      	ldr	r3, [pc, #76]	; (a1c4 <_wdt_init+0x78>)
    a176:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a178:	687b      	ldr	r3, [r7, #4]
    a17a:	681b      	ldr	r3, [r3, #0]
    a17c:	4618      	mov	r0, r3
    a17e:	4b12      	ldr	r3, [pc, #72]	; (a1c8 <_wdt_init+0x7c>)
    a180:	4798      	blx	r3
    a182:	4603      	mov	r3, r0
    a184:	2b00      	cmp	r3, #0
    a186:	d107      	bne.n	a198 <_wdt_init+0x4c>
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	681b      	ldr	r3, [r3, #0]
    a18c:	4618      	mov	r0, r3
    a18e:	4b0f      	ldr	r3, [pc, #60]	; (a1cc <_wdt_init+0x80>)
    a190:	4798      	blx	r3
    a192:	4603      	mov	r3, r0
    a194:	2b00      	cmp	r3, #0
    a196:	d002      	beq.n	a19e <_wdt_init+0x52>
		return ERR_DENIED;
    a198:	f06f 0310 	mvn.w	r3, #16
    a19c:	e00b      	b.n	a1b6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a19e:	687b      	ldr	r3, [r7, #4]
    a1a0:	681b      	ldr	r3, [r3, #0]
    a1a2:	4618      	mov	r0, r3
    a1a4:	4b0a      	ldr	r3, [pc, #40]	; (a1d0 <_wdt_init+0x84>)
    a1a6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	681b      	ldr	r3, [r3, #0]
    a1ac:	210b      	movs	r1, #11
    a1ae:	4618      	mov	r0, r3
    a1b0:	4b08      	ldr	r3, [pc, #32]	; (a1d4 <_wdt_init+0x88>)
    a1b2:	4798      	blx	r3
	}

	return ERR_NONE;
    a1b4:	2300      	movs	r3, #0
}
    a1b6:	4618      	mov	r0, r3
    a1b8:	3708      	adds	r7, #8
    a1ba:	46bd      	mov	sp, r7
    a1bc:	bd80      	pop	{r7, pc}
    a1be:	bf00      	nop
    a1c0:	0000d774 	.word	0x0000d774
    a1c4:	000030c9 	.word	0x000030c9
    a1c8:	0000a0dd 	.word	0x0000a0dd
    a1cc:	0000a075 	.word	0x0000a075
    a1d0:	0000a0b1 	.word	0x0000a0b1
    a1d4:	0000a111 	.word	0x0000a111

0000a1d8 <hri_port_set_DIR_reg>:
{
    a1d8:	b480      	push	{r7}
    a1da:	b085      	sub	sp, #20
    a1dc:	af00      	add	r7, sp, #0
    a1de:	60f8      	str	r0, [r7, #12]
    a1e0:	460b      	mov	r3, r1
    a1e2:	607a      	str	r2, [r7, #4]
    a1e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a1e6:	7afb      	ldrb	r3, [r7, #11]
    a1e8:	68fa      	ldr	r2, [r7, #12]
    a1ea:	01db      	lsls	r3, r3, #7
    a1ec:	4413      	add	r3, r2
    a1ee:	3308      	adds	r3, #8
    a1f0:	687a      	ldr	r2, [r7, #4]
    a1f2:	601a      	str	r2, [r3, #0]
}
    a1f4:	bf00      	nop
    a1f6:	3714      	adds	r7, #20
    a1f8:	46bd      	mov	sp, r7
    a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1fe:	4770      	bx	lr

0000a200 <hri_port_clear_DIR_reg>:
{
    a200:	b480      	push	{r7}
    a202:	b085      	sub	sp, #20
    a204:	af00      	add	r7, sp, #0
    a206:	60f8      	str	r0, [r7, #12]
    a208:	460b      	mov	r3, r1
    a20a:	607a      	str	r2, [r7, #4]
    a20c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a20e:	7afb      	ldrb	r3, [r7, #11]
    a210:	68fa      	ldr	r2, [r7, #12]
    a212:	01db      	lsls	r3, r3, #7
    a214:	4413      	add	r3, r2
    a216:	3304      	adds	r3, #4
    a218:	687a      	ldr	r2, [r7, #4]
    a21a:	601a      	str	r2, [r3, #0]
}
    a21c:	bf00      	nop
    a21e:	3714      	adds	r7, #20
    a220:	46bd      	mov	sp, r7
    a222:	f85d 7b04 	ldr.w	r7, [sp], #4
    a226:	4770      	bx	lr

0000a228 <hri_port_set_OUT_reg>:
{
    a228:	b480      	push	{r7}
    a22a:	b085      	sub	sp, #20
    a22c:	af00      	add	r7, sp, #0
    a22e:	60f8      	str	r0, [r7, #12]
    a230:	460b      	mov	r3, r1
    a232:	607a      	str	r2, [r7, #4]
    a234:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a236:	7afb      	ldrb	r3, [r7, #11]
    a238:	68fa      	ldr	r2, [r7, #12]
    a23a:	01db      	lsls	r3, r3, #7
    a23c:	4413      	add	r3, r2
    a23e:	3318      	adds	r3, #24
    a240:	687a      	ldr	r2, [r7, #4]
    a242:	601a      	str	r2, [r3, #0]
}
    a244:	bf00      	nop
    a246:	3714      	adds	r7, #20
    a248:	46bd      	mov	sp, r7
    a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a24e:	4770      	bx	lr

0000a250 <hri_port_clear_OUT_reg>:
{
    a250:	b480      	push	{r7}
    a252:	b085      	sub	sp, #20
    a254:	af00      	add	r7, sp, #0
    a256:	60f8      	str	r0, [r7, #12]
    a258:	460b      	mov	r3, r1
    a25a:	607a      	str	r2, [r7, #4]
    a25c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a25e:	7afb      	ldrb	r3, [r7, #11]
    a260:	68fa      	ldr	r2, [r7, #12]
    a262:	01db      	lsls	r3, r3, #7
    a264:	4413      	add	r3, r2
    a266:	3314      	adds	r3, #20
    a268:	687a      	ldr	r2, [r7, #4]
    a26a:	601a      	str	r2, [r3, #0]
}
    a26c:	bf00      	nop
    a26e:	3714      	adds	r7, #20
    a270:	46bd      	mov	sp, r7
    a272:	f85d 7b04 	ldr.w	r7, [sp], #4
    a276:	4770      	bx	lr

0000a278 <hri_port_write_PMUX_PMUXE_bf>:
{
    a278:	b480      	push	{r7}
    a27a:	b085      	sub	sp, #20
    a27c:	af00      	add	r7, sp, #0
    a27e:	6078      	str	r0, [r7, #4]
    a280:	4608      	mov	r0, r1
    a282:	4611      	mov	r1, r2
    a284:	461a      	mov	r2, r3
    a286:	4603      	mov	r3, r0
    a288:	70fb      	strb	r3, [r7, #3]
    a28a:	460b      	mov	r3, r1
    a28c:	70bb      	strb	r3, [r7, #2]
    a28e:	4613      	mov	r3, r2
    a290:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a292:	78fa      	ldrb	r2, [r7, #3]
    a294:	78bb      	ldrb	r3, [r7, #2]
    a296:	6879      	ldr	r1, [r7, #4]
    a298:	01d2      	lsls	r2, r2, #7
    a29a:	440a      	add	r2, r1
    a29c:	4413      	add	r3, r2
    a29e:	3330      	adds	r3, #48	; 0x30
    a2a0:	781b      	ldrb	r3, [r3, #0]
    a2a2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a2a4:	7bfb      	ldrb	r3, [r7, #15]
    a2a6:	f023 030f 	bic.w	r3, r3, #15
    a2aa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a2ac:	787b      	ldrb	r3, [r7, #1]
    a2ae:	f003 030f 	and.w	r3, r3, #15
    a2b2:	b2da      	uxtb	r2, r3
    a2b4:	7bfb      	ldrb	r3, [r7, #15]
    a2b6:	4313      	orrs	r3, r2
    a2b8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a2ba:	78fa      	ldrb	r2, [r7, #3]
    a2bc:	78bb      	ldrb	r3, [r7, #2]
    a2be:	6879      	ldr	r1, [r7, #4]
    a2c0:	01d2      	lsls	r2, r2, #7
    a2c2:	440a      	add	r2, r1
    a2c4:	4413      	add	r3, r2
    a2c6:	3330      	adds	r3, #48	; 0x30
    a2c8:	7bfa      	ldrb	r2, [r7, #15]
    a2ca:	701a      	strb	r2, [r3, #0]
}
    a2cc:	bf00      	nop
    a2ce:	3714      	adds	r7, #20
    a2d0:	46bd      	mov	sp, r7
    a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2d6:	4770      	bx	lr

0000a2d8 <hri_port_write_PMUX_PMUXO_bf>:
{
    a2d8:	b480      	push	{r7}
    a2da:	b085      	sub	sp, #20
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
    a2e0:	4608      	mov	r0, r1
    a2e2:	4611      	mov	r1, r2
    a2e4:	461a      	mov	r2, r3
    a2e6:	4603      	mov	r3, r0
    a2e8:	70fb      	strb	r3, [r7, #3]
    a2ea:	460b      	mov	r3, r1
    a2ec:	70bb      	strb	r3, [r7, #2]
    a2ee:	4613      	mov	r3, r2
    a2f0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a2f2:	78fa      	ldrb	r2, [r7, #3]
    a2f4:	78bb      	ldrb	r3, [r7, #2]
    a2f6:	6879      	ldr	r1, [r7, #4]
    a2f8:	01d2      	lsls	r2, r2, #7
    a2fa:	440a      	add	r2, r1
    a2fc:	4413      	add	r3, r2
    a2fe:	3330      	adds	r3, #48	; 0x30
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a304:	7bfb      	ldrb	r3, [r7, #15]
    a306:	f003 030f 	and.w	r3, r3, #15
    a30a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a30c:	787b      	ldrb	r3, [r7, #1]
    a30e:	011b      	lsls	r3, r3, #4
    a310:	b2da      	uxtb	r2, r3
    a312:	7bfb      	ldrb	r3, [r7, #15]
    a314:	4313      	orrs	r3, r2
    a316:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a318:	78fa      	ldrb	r2, [r7, #3]
    a31a:	78bb      	ldrb	r3, [r7, #2]
    a31c:	6879      	ldr	r1, [r7, #4]
    a31e:	01d2      	lsls	r2, r2, #7
    a320:	440a      	add	r2, r1
    a322:	4413      	add	r3, r2
    a324:	3330      	adds	r3, #48	; 0x30
    a326:	7bfa      	ldrb	r2, [r7, #15]
    a328:	701a      	strb	r2, [r3, #0]
}
    a32a:	bf00      	nop
    a32c:	3714      	adds	r7, #20
    a32e:	46bd      	mov	sp, r7
    a330:	f85d 7b04 	ldr.w	r7, [sp], #4
    a334:	4770      	bx	lr

0000a336 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a336:	b480      	push	{r7}
    a338:	b085      	sub	sp, #20
    a33a:	af00      	add	r7, sp, #0
    a33c:	6078      	str	r0, [r7, #4]
    a33e:	4608      	mov	r0, r1
    a340:	4611      	mov	r1, r2
    a342:	461a      	mov	r2, r3
    a344:	4603      	mov	r3, r0
    a346:	70fb      	strb	r3, [r7, #3]
    a348:	460b      	mov	r3, r1
    a34a:	70bb      	strb	r3, [r7, #2]
    a34c:	4613      	mov	r3, r2
    a34e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a350:	78fa      	ldrb	r2, [r7, #3]
    a352:	78bb      	ldrb	r3, [r7, #2]
    a354:	6879      	ldr	r1, [r7, #4]
    a356:	01d2      	lsls	r2, r2, #7
    a358:	440a      	add	r2, r1
    a35a:	4413      	add	r3, r2
    a35c:	3340      	adds	r3, #64	; 0x40
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a362:	7bfb      	ldrb	r3, [r7, #15]
    a364:	f023 0301 	bic.w	r3, r3, #1
    a368:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a36a:	787a      	ldrb	r2, [r7, #1]
    a36c:	7bfb      	ldrb	r3, [r7, #15]
    a36e:	4313      	orrs	r3, r2
    a370:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a372:	78fa      	ldrb	r2, [r7, #3]
    a374:	78bb      	ldrb	r3, [r7, #2]
    a376:	6879      	ldr	r1, [r7, #4]
    a378:	01d2      	lsls	r2, r2, #7
    a37a:	440a      	add	r2, r1
    a37c:	4413      	add	r3, r2
    a37e:	3340      	adds	r3, #64	; 0x40
    a380:	7bfa      	ldrb	r2, [r7, #15]
    a382:	701a      	strb	r2, [r3, #0]
}
    a384:	bf00      	nop
    a386:	3714      	adds	r7, #20
    a388:	46bd      	mov	sp, r7
    a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a38e:	4770      	bx	lr

0000a390 <hri_port_write_WRCONFIG_reg>:
{
    a390:	b480      	push	{r7}
    a392:	b085      	sub	sp, #20
    a394:	af00      	add	r7, sp, #0
    a396:	60f8      	str	r0, [r7, #12]
    a398:	460b      	mov	r3, r1
    a39a:	607a      	str	r2, [r7, #4]
    a39c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a39e:	7afb      	ldrb	r3, [r7, #11]
    a3a0:	68fa      	ldr	r2, [r7, #12]
    a3a2:	01db      	lsls	r3, r3, #7
    a3a4:	4413      	add	r3, r2
    a3a6:	3328      	adds	r3, #40	; 0x28
    a3a8:	687a      	ldr	r2, [r7, #4]
    a3aa:	601a      	str	r2, [r3, #0]
}
    a3ac:	bf00      	nop
    a3ae:	3714      	adds	r7, #20
    a3b0:	46bd      	mov	sp, r7
    a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3b6:	4770      	bx	lr

0000a3b8 <_gpio_set_direction>:
{
    a3b8:	b580      	push	{r7, lr}
    a3ba:	b082      	sub	sp, #8
    a3bc:	af00      	add	r7, sp, #0
    a3be:	4603      	mov	r3, r0
    a3c0:	6039      	str	r1, [r7, #0]
    a3c2:	71fb      	strb	r3, [r7, #7]
    a3c4:	4613      	mov	r3, r2
    a3c6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a3c8:	79bb      	ldrb	r3, [r7, #6]
    a3ca:	2b01      	cmp	r3, #1
    a3cc:	d01c      	beq.n	a408 <_gpio_set_direction+0x50>
    a3ce:	2b02      	cmp	r3, #2
    a3d0:	d037      	beq.n	a442 <_gpio_set_direction+0x8a>
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	d14e      	bne.n	a474 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a3d6:	79fb      	ldrb	r3, [r7, #7]
    a3d8:	683a      	ldr	r2, [r7, #0]
    a3da:	4619      	mov	r1, r3
    a3dc:	482a      	ldr	r0, [pc, #168]	; (a488 <_gpio_set_direction+0xd0>)
    a3de:	4b2b      	ldr	r3, [pc, #172]	; (a48c <_gpio_set_direction+0xd4>)
    a3e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a3e2:	683b      	ldr	r3, [r7, #0]
    a3e4:	b29b      	uxth	r3, r3
    a3e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a3ea:	79fb      	ldrb	r3, [r7, #7]
    a3ec:	4619      	mov	r1, r3
    a3ee:	4826      	ldr	r0, [pc, #152]	; (a488 <_gpio_set_direction+0xd0>)
    a3f0:	4b27      	ldr	r3, [pc, #156]	; (a490 <_gpio_set_direction+0xd8>)
    a3f2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a3f4:	683b      	ldr	r3, [r7, #0]
    a3f6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a3f8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a3fc:	79fb      	ldrb	r3, [r7, #7]
    a3fe:	4619      	mov	r1, r3
    a400:	4821      	ldr	r0, [pc, #132]	; (a488 <_gpio_set_direction+0xd0>)
    a402:	4b23      	ldr	r3, [pc, #140]	; (a490 <_gpio_set_direction+0xd8>)
    a404:	4798      	blx	r3
		break;
    a406:	e03a      	b.n	a47e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a408:	79fb      	ldrb	r3, [r7, #7]
    a40a:	683a      	ldr	r2, [r7, #0]
    a40c:	4619      	mov	r1, r3
    a40e:	481e      	ldr	r0, [pc, #120]	; (a488 <_gpio_set_direction+0xd0>)
    a410:	4b1e      	ldr	r3, [pc, #120]	; (a48c <_gpio_set_direction+0xd4>)
    a412:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a414:	683b      	ldr	r3, [r7, #0]
    a416:	b29b      	uxth	r3, r3
    a418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a420:	79f9      	ldrb	r1, [r7, #7]
    a422:	461a      	mov	r2, r3
    a424:	4818      	ldr	r0, [pc, #96]	; (a488 <_gpio_set_direction+0xd0>)
    a426:	4b1a      	ldr	r3, [pc, #104]	; (a490 <_gpio_set_direction+0xd8>)
    a428:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a42a:	683b      	ldr	r3, [r7, #0]
    a42c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a42e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a436:	79f9      	ldrb	r1, [r7, #7]
    a438:	461a      	mov	r2, r3
    a43a:	4813      	ldr	r0, [pc, #76]	; (a488 <_gpio_set_direction+0xd0>)
    a43c:	4b14      	ldr	r3, [pc, #80]	; (a490 <_gpio_set_direction+0xd8>)
    a43e:	4798      	blx	r3
		break;
    a440:	e01d      	b.n	a47e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a442:	79fb      	ldrb	r3, [r7, #7]
    a444:	683a      	ldr	r2, [r7, #0]
    a446:	4619      	mov	r1, r3
    a448:	480f      	ldr	r0, [pc, #60]	; (a488 <_gpio_set_direction+0xd0>)
    a44a:	4b12      	ldr	r3, [pc, #72]	; (a494 <_gpio_set_direction+0xdc>)
    a44c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a44e:	683b      	ldr	r3, [r7, #0]
    a450:	b29b      	uxth	r3, r3
    a452:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a456:	79fb      	ldrb	r3, [r7, #7]
    a458:	4619      	mov	r1, r3
    a45a:	480b      	ldr	r0, [pc, #44]	; (a488 <_gpio_set_direction+0xd0>)
    a45c:	4b0c      	ldr	r3, [pc, #48]	; (a490 <_gpio_set_direction+0xd8>)
    a45e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a460:	683b      	ldr	r3, [r7, #0]
    a462:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a464:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a468:	79fb      	ldrb	r3, [r7, #7]
    a46a:	4619      	mov	r1, r3
    a46c:	4806      	ldr	r0, [pc, #24]	; (a488 <_gpio_set_direction+0xd0>)
    a46e:	4b08      	ldr	r3, [pc, #32]	; (a490 <_gpio_set_direction+0xd8>)
    a470:	4798      	blx	r3
		break;
    a472:	e004      	b.n	a47e <_gpio_set_direction+0xc6>
		ASSERT(false);
    a474:	2246      	movs	r2, #70	; 0x46
    a476:	4908      	ldr	r1, [pc, #32]	; (a498 <_gpio_set_direction+0xe0>)
    a478:	2000      	movs	r0, #0
    a47a:	4b08      	ldr	r3, [pc, #32]	; (a49c <_gpio_set_direction+0xe4>)
    a47c:	4798      	blx	r3
}
    a47e:	bf00      	nop
    a480:	3708      	adds	r7, #8
    a482:	46bd      	mov	sp, r7
    a484:	bd80      	pop	{r7, pc}
    a486:	bf00      	nop
    a488:	41008000 	.word	0x41008000
    a48c:	0000a201 	.word	0x0000a201
    a490:	0000a391 	.word	0x0000a391
    a494:	0000a1d9 	.word	0x0000a1d9
    a498:	0000d78c 	.word	0x0000d78c
    a49c:	000030c9 	.word	0x000030c9

0000a4a0 <_gpio_set_level>:
{
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b082      	sub	sp, #8
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	4603      	mov	r3, r0
    a4a8:	6039      	str	r1, [r7, #0]
    a4aa:	71fb      	strb	r3, [r7, #7]
    a4ac:	4613      	mov	r3, r2
    a4ae:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a4b0:	79bb      	ldrb	r3, [r7, #6]
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	d006      	beq.n	a4c4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a4b6:	79fb      	ldrb	r3, [r7, #7]
    a4b8:	683a      	ldr	r2, [r7, #0]
    a4ba:	4619      	mov	r1, r3
    a4bc:	4806      	ldr	r0, [pc, #24]	; (a4d8 <_gpio_set_level+0x38>)
    a4be:	4b07      	ldr	r3, [pc, #28]	; (a4dc <_gpio_set_level+0x3c>)
    a4c0:	4798      	blx	r3
}
    a4c2:	e005      	b.n	a4d0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a4c4:	79fb      	ldrb	r3, [r7, #7]
    a4c6:	683a      	ldr	r2, [r7, #0]
    a4c8:	4619      	mov	r1, r3
    a4ca:	4803      	ldr	r0, [pc, #12]	; (a4d8 <_gpio_set_level+0x38>)
    a4cc:	4b04      	ldr	r3, [pc, #16]	; (a4e0 <_gpio_set_level+0x40>)
    a4ce:	4798      	blx	r3
}
    a4d0:	bf00      	nop
    a4d2:	3708      	adds	r7, #8
    a4d4:	46bd      	mov	sp, r7
    a4d6:	bd80      	pop	{r7, pc}
    a4d8:	41008000 	.word	0x41008000
    a4dc:	0000a229 	.word	0x0000a229
    a4e0:	0000a251 	.word	0x0000a251

0000a4e4 <_gpio_set_pin_function>:
{
    a4e4:	b590      	push	{r4, r7, lr}
    a4e6:	b085      	sub	sp, #20
    a4e8:	af00      	add	r7, sp, #0
    a4ea:	6078      	str	r0, [r7, #4]
    a4ec:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	095b      	lsrs	r3, r3, #5
    a4f2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a4f4:	687b      	ldr	r3, [r7, #4]
    a4f6:	b2db      	uxtb	r3, r3
    a4f8:	f003 031f 	and.w	r3, r3, #31
    a4fc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a4fe:	683b      	ldr	r3, [r7, #0]
    a500:	f1b3 3fff 	cmp.w	r3, #4294967295
    a504:	d106      	bne.n	a514 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a506:	7bba      	ldrb	r2, [r7, #14]
    a508:	7bf9      	ldrb	r1, [r7, #15]
    a50a:	2300      	movs	r3, #0
    a50c:	4812      	ldr	r0, [pc, #72]	; (a558 <_gpio_set_pin_function+0x74>)
    a50e:	4c13      	ldr	r4, [pc, #76]	; (a55c <_gpio_set_pin_function+0x78>)
    a510:	47a0      	blx	r4
}
    a512:	e01d      	b.n	a550 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a514:	7bba      	ldrb	r2, [r7, #14]
    a516:	7bf9      	ldrb	r1, [r7, #15]
    a518:	2301      	movs	r3, #1
    a51a:	480f      	ldr	r0, [pc, #60]	; (a558 <_gpio_set_pin_function+0x74>)
    a51c:	4c0f      	ldr	r4, [pc, #60]	; (a55c <_gpio_set_pin_function+0x78>)
    a51e:	47a0      	blx	r4
		if (pin & 1) {
    a520:	7bbb      	ldrb	r3, [r7, #14]
    a522:	f003 0301 	and.w	r3, r3, #1
    a526:	2b00      	cmp	r3, #0
    a528:	d009      	beq.n	a53e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a52a:	7bbb      	ldrb	r3, [r7, #14]
    a52c:	085b      	lsrs	r3, r3, #1
    a52e:	b2da      	uxtb	r2, r3
    a530:	683b      	ldr	r3, [r7, #0]
    a532:	b2db      	uxtb	r3, r3
    a534:	7bf9      	ldrb	r1, [r7, #15]
    a536:	4808      	ldr	r0, [pc, #32]	; (a558 <_gpio_set_pin_function+0x74>)
    a538:	4c09      	ldr	r4, [pc, #36]	; (a560 <_gpio_set_pin_function+0x7c>)
    a53a:	47a0      	blx	r4
}
    a53c:	e008      	b.n	a550 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a53e:	7bbb      	ldrb	r3, [r7, #14]
    a540:	085b      	lsrs	r3, r3, #1
    a542:	b2da      	uxtb	r2, r3
    a544:	683b      	ldr	r3, [r7, #0]
    a546:	b2db      	uxtb	r3, r3
    a548:	7bf9      	ldrb	r1, [r7, #15]
    a54a:	4803      	ldr	r0, [pc, #12]	; (a558 <_gpio_set_pin_function+0x74>)
    a54c:	4c05      	ldr	r4, [pc, #20]	; (a564 <_gpio_set_pin_function+0x80>)
    a54e:	47a0      	blx	r4
}
    a550:	bf00      	nop
    a552:	3714      	adds	r7, #20
    a554:	46bd      	mov	sp, r7
    a556:	bd90      	pop	{r4, r7, pc}
    a558:	41008000 	.word	0x41008000
    a55c:	0000a337 	.word	0x0000a337
    a560:	0000a2d9 	.word	0x0000a2d9
    a564:	0000a279 	.word	0x0000a279

0000a568 <gpio_set_pin_function>:
{
    a568:	b580      	push	{r7, lr}
    a56a:	b082      	sub	sp, #8
    a56c:	af00      	add	r7, sp, #0
    a56e:	6078      	str	r0, [r7, #4]
    a570:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a572:	6839      	ldr	r1, [r7, #0]
    a574:	6878      	ldr	r0, [r7, #4]
    a576:	4b03      	ldr	r3, [pc, #12]	; (a584 <gpio_set_pin_function+0x1c>)
    a578:	4798      	blx	r3
}
    a57a:	bf00      	nop
    a57c:	3708      	adds	r7, #8
    a57e:	46bd      	mov	sp, r7
    a580:	bd80      	pop	{r7, pc}
    a582:	bf00      	nop
    a584:	0000a4e5 	.word	0x0000a4e5

0000a588 <gpio_set_pin_direction>:
{
    a588:	b580      	push	{r7, lr}
    a58a:	b082      	sub	sp, #8
    a58c:	af00      	add	r7, sp, #0
    a58e:	4603      	mov	r3, r0
    a590:	460a      	mov	r2, r1
    a592:	71fb      	strb	r3, [r7, #7]
    a594:	4613      	mov	r3, r2
    a596:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a598:	79fb      	ldrb	r3, [r7, #7]
    a59a:	095b      	lsrs	r3, r3, #5
    a59c:	b2d8      	uxtb	r0, r3
    a59e:	79fb      	ldrb	r3, [r7, #7]
    a5a0:	f003 031f 	and.w	r3, r3, #31
    a5a4:	2201      	movs	r2, #1
    a5a6:	fa02 f303 	lsl.w	r3, r2, r3
    a5aa:	79ba      	ldrb	r2, [r7, #6]
    a5ac:	4619      	mov	r1, r3
    a5ae:	4b03      	ldr	r3, [pc, #12]	; (a5bc <gpio_set_pin_direction+0x34>)
    a5b0:	4798      	blx	r3
}
    a5b2:	bf00      	nop
    a5b4:	3708      	adds	r7, #8
    a5b6:	46bd      	mov	sp, r7
    a5b8:	bd80      	pop	{r7, pc}
    a5ba:	bf00      	nop
    a5bc:	0000a3b9 	.word	0x0000a3b9

0000a5c0 <gpio_set_pin_level>:
{
    a5c0:	b580      	push	{r7, lr}
    a5c2:	b082      	sub	sp, #8
    a5c4:	af00      	add	r7, sp, #0
    a5c6:	4603      	mov	r3, r0
    a5c8:	460a      	mov	r2, r1
    a5ca:	71fb      	strb	r3, [r7, #7]
    a5cc:	4613      	mov	r3, r2
    a5ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a5d0:	79fb      	ldrb	r3, [r7, #7]
    a5d2:	095b      	lsrs	r3, r3, #5
    a5d4:	b2d8      	uxtb	r0, r3
    a5d6:	79fb      	ldrb	r3, [r7, #7]
    a5d8:	f003 031f 	and.w	r3, r3, #31
    a5dc:	2201      	movs	r2, #1
    a5de:	fa02 f303 	lsl.w	r3, r2, r3
    a5e2:	79ba      	ldrb	r2, [r7, #6]
    a5e4:	4619      	mov	r1, r3
    a5e6:	4b03      	ldr	r3, [pc, #12]	; (a5f4 <gpio_set_pin_level+0x34>)
    a5e8:	4798      	blx	r3
}
    a5ea:	bf00      	nop
    a5ec:	3708      	adds	r7, #8
    a5ee:	46bd      	mov	sp, r7
    a5f0:	bd80      	pop	{r7, pc}
    a5f2:	bf00      	nop
    a5f4:	0000a4a1 	.word	0x0000a4a1

0000a5f8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a5f8:	b580      	push	{r7, lr}
    a5fa:	b082      	sub	sp, #8
    a5fc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a5fe:	2100      	movs	r1, #0
    a600:	2008      	movs	r0, #8
    a602:	4b24      	ldr	r3, [pc, #144]	; (a694 <QSPI_N25Q256_exit_xip+0x9c>)
    a604:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a606:	2100      	movs	r1, #0
    a608:	202b      	movs	r0, #43	; 0x2b
    a60a:	4b22      	ldr	r3, [pc, #136]	; (a694 <QSPI_N25Q256_exit_xip+0x9c>)
    a60c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a60e:	2100      	movs	r1, #0
    a610:	202a      	movs	r0, #42	; 0x2a
    a612:	4b20      	ldr	r3, [pc, #128]	; (a694 <QSPI_N25Q256_exit_xip+0x9c>)
    a614:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a616:	2102      	movs	r1, #2
    a618:	2008      	movs	r0, #8
    a61a:	4b1f      	ldr	r3, [pc, #124]	; (a698 <QSPI_N25Q256_exit_xip+0xa0>)
    a61c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a61e:	2102      	movs	r1, #2
    a620:	202b      	movs	r0, #43	; 0x2b
    a622:	4b1d      	ldr	r3, [pc, #116]	; (a698 <QSPI_N25Q256_exit_xip+0xa0>)
    a624:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a626:	2102      	movs	r1, #2
    a628:	202a      	movs	r0, #42	; 0x2a
    a62a:	4b1b      	ldr	r3, [pc, #108]	; (a698 <QSPI_N25Q256_exit_xip+0xa0>)
    a62c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a62e:	2101      	movs	r1, #1
    a630:	2008      	movs	r0, #8
    a632:	4b1a      	ldr	r3, [pc, #104]	; (a69c <QSPI_N25Q256_exit_xip+0xa4>)
    a634:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a636:	2100      	movs	r1, #0
    a638:	202b      	movs	r0, #43	; 0x2b
    a63a:	4b18      	ldr	r3, [pc, #96]	; (a69c <QSPI_N25Q256_exit_xip+0xa4>)
    a63c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a63e:	2100      	movs	r1, #0
    a640:	202a      	movs	r0, #42	; 0x2a
    a642:	4b16      	ldr	r3, [pc, #88]	; (a69c <QSPI_N25Q256_exit_xip+0xa4>)
    a644:	4798      	blx	r3

	delay_us(1);
    a646:	2001      	movs	r0, #1
    a648:	4b15      	ldr	r3, [pc, #84]	; (a6a0 <QSPI_N25Q256_exit_xip+0xa8>)
    a64a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a64c:	2300      	movs	r3, #0
    a64e:	607b      	str	r3, [r7, #4]
    a650:	e010      	b.n	a674 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a652:	2101      	movs	r1, #1
    a654:	202a      	movs	r0, #42	; 0x2a
    a656:	4b11      	ldr	r3, [pc, #68]	; (a69c <QSPI_N25Q256_exit_xip+0xa4>)
    a658:	4798      	blx	r3
		delay_us(1);
    a65a:	2001      	movs	r0, #1
    a65c:	4b10      	ldr	r3, [pc, #64]	; (a6a0 <QSPI_N25Q256_exit_xip+0xa8>)
    a65e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a660:	2100      	movs	r1, #0
    a662:	202a      	movs	r0, #42	; 0x2a
    a664:	4b0d      	ldr	r3, [pc, #52]	; (a69c <QSPI_N25Q256_exit_xip+0xa4>)
    a666:	4798      	blx	r3
		delay_us(1);
    a668:	2001      	movs	r0, #1
    a66a:	4b0d      	ldr	r3, [pc, #52]	; (a6a0 <QSPI_N25Q256_exit_xip+0xa8>)
    a66c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	3301      	adds	r3, #1
    a672:	607b      	str	r3, [r7, #4]
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	2b06      	cmp	r3, #6
    a678:	ddeb      	ble.n	a652 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a67a:	2101      	movs	r1, #1
    a67c:	202b      	movs	r0, #43	; 0x2b
    a67e:	4b07      	ldr	r3, [pc, #28]	; (a69c <QSPI_N25Q256_exit_xip+0xa4>)
    a680:	4798      	blx	r3
	delay_us(1);
    a682:	2001      	movs	r0, #1
    a684:	4b06      	ldr	r3, [pc, #24]	; (a6a0 <QSPI_N25Q256_exit_xip+0xa8>)
    a686:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a688:	4b06      	ldr	r3, [pc, #24]	; (a6a4 <QSPI_N25Q256_exit_xip+0xac>)
    a68a:	4798      	blx	r3
}
    a68c:	bf00      	nop
    a68e:	3708      	adds	r7, #8
    a690:	46bd      	mov	sp, r7
    a692:	bd80      	pop	{r7, pc}
    a694:	0000a569 	.word	0x0000a569
    a698:	0000a589 	.word	0x0000a589
    a69c:	0000a5c1 	.word	0x0000a5c1
    a6a0:	00001849 	.word	0x00001849
    a6a4:	00000da1 	.word	0x00000da1

0000a6a8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a6a8:	b598      	push	{r3, r4, r7, lr}
    a6aa:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a6ac:	4806      	ldr	r0, [pc, #24]	; (a6c8 <spi_nor_flash_init+0x20>)
    a6ae:	4b07      	ldr	r3, [pc, #28]	; (a6cc <spi_nor_flash_init+0x24>)
    a6b0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a6b2:	2300      	movs	r3, #0
    a6b4:	4a06      	ldr	r2, [pc, #24]	; (a6d0 <spi_nor_flash_init+0x28>)
    a6b6:	4904      	ldr	r1, [pc, #16]	; (a6c8 <spi_nor_flash_init+0x20>)
    a6b8:	4806      	ldr	r0, [pc, #24]	; (a6d4 <spi_nor_flash_init+0x2c>)
    a6ba:	4c07      	ldr	r4, [pc, #28]	; (a6d8 <spi_nor_flash_init+0x30>)
    a6bc:	47a0      	blx	r4
    a6be:	4602      	mov	r2, r0
    a6c0:	4b06      	ldr	r3, [pc, #24]	; (a6dc <spi_nor_flash_init+0x34>)
    a6c2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a6c4:	bf00      	nop
    a6c6:	bd98      	pop	{r3, r4, r7, pc}
    a6c8:	20000c68 	.word	0x20000c68
    a6cc:	00001cb1 	.word	0x00001cb1
    a6d0:	0000a5f9 	.word	0x0000a5f9
    a6d4:	20000a84 	.word	0x20000a84
    a6d8:	0000ab15 	.word	0x0000ab15
    a6dc:	20000e18 	.word	0x20000e18

0000a6e0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a6e0:	b580      	push	{r7, lr}
    a6e2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a6e4:	4805      	ldr	r0, [pc, #20]	; (a6fc <cdc_device_acm_init+0x1c>)
    a6e6:	4b06      	ldr	r3, [pc, #24]	; (a700 <cdc_device_acm_init+0x20>)
    a6e8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a6ea:	4b06      	ldr	r3, [pc, #24]	; (a704 <cdc_device_acm_init+0x24>)
    a6ec:	4798      	blx	r3

	usbdc_start(single_desc);
    a6ee:	4806      	ldr	r0, [pc, #24]	; (a708 <cdc_device_acm_init+0x28>)
    a6f0:	4b06      	ldr	r3, [pc, #24]	; (a70c <cdc_device_acm_init+0x2c>)
    a6f2:	4798      	blx	r3
	usbdc_attach();
    a6f4:	4b06      	ldr	r3, [pc, #24]	; (a710 <cdc_device_acm_init+0x30>)
    a6f6:	4798      	blx	r3
}
    a6f8:	bf00      	nop
    a6fa:	bd80      	pop	{r7, pc}
    a6fc:	20000ad4 	.word	0x20000ad4
    a700:	0000c23d 	.word	0x0000c23d
    a704:	0000b4b5 	.word	0x0000b4b5
    a708:	200000ec 	.word	0x200000ec
    a70c:	0000c2d9 	.word	0x0000c2d9
    a710:	0000c329 	.word	0x0000c329

0000a714 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a714:	b580      	push	{r7, lr}
    a716:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a718:	4b01      	ldr	r3, [pc, #4]	; (a720 <usb_init+0xc>)
    a71a:	4798      	blx	r3
}
    a71c:	bf00      	nop
    a71e:	bd80      	pop	{r7, pc}
    a720:	0000a6e1 	.word	0x0000a6e1

0000a724 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a724:	b480      	push	{r7}
    a726:	b085      	sub	sp, #20
    a728:	af00      	add	r7, sp, #0
    a72a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a72c:	f3ef 8310 	mrs	r3, PRIMASK
    a730:	60fb      	str	r3, [r7, #12]
  return(result);
    a732:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a734:	687b      	ldr	r3, [r7, #4]
    a736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a738:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a73a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a73e:	bf00      	nop
    a740:	3714      	adds	r7, #20
    a742:	46bd      	mov	sp, r7
    a744:	f85d 7b04 	ldr.w	r7, [sp], #4
    a748:	4770      	bx	lr

0000a74a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a74a:	b480      	push	{r7}
    a74c:	b085      	sub	sp, #20
    a74e:	af00      	add	r7, sp, #0
    a750:	6078      	str	r0, [r7, #4]
    a752:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a756:	687b      	ldr	r3, [r7, #4]
    a758:	681b      	ldr	r3, [r3, #0]
    a75a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a75c:	68fb      	ldr	r3, [r7, #12]
    a75e:	f383 8810 	msr	PRIMASK, r3
}
    a762:	bf00      	nop
    a764:	3714      	adds	r7, #20
    a766:	46bd      	mov	sp, r7
    a768:	f85d 7b04 	ldr.w	r7, [sp], #4
    a76c:	4770      	bx	lr
	...

0000a770 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a770:	b580      	push	{r7, lr}
    a772:	b08c      	sub	sp, #48	; 0x30
    a774:	af00      	add	r7, sp, #0
    a776:	6078      	str	r0, [r7, #4]
    a778:	460b      	mov	r3, r1
    a77a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	681b      	ldr	r3, [r3, #0]
    a784:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a786:	f107 030c 	add.w	r3, r7, #12
    a78a:	2200      	movs	r2, #0
    a78c:	601a      	str	r2, [r3, #0]
    a78e:	605a      	str	r2, [r3, #4]
    a790:	609a      	str	r2, [r3, #8]
    a792:	60da      	str	r2, [r3, #12]
    a794:	611a      	str	r2, [r3, #16]
    a796:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a79a:	7b1b      	ldrb	r3, [r3, #12]
    a79c:	2b00      	cmp	r3, #0
    a79e:	d001      	beq.n	a7a4 <n25q256a_xip_confirm+0x34>
    a7a0:	2206      	movs	r2, #6
    a7a2:	e000      	b.n	a7a6 <n25q256a_xip_confirm+0x36>
    a7a4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a7a6:	7b3b      	ldrb	r3, [r7, #12]
    a7a8:	f362 0302 	bfi	r3, r2, #0, #3
    a7ac:	733b      	strb	r3, [r7, #12]
    a7ae:	7b3b      	ldrb	r3, [r7, #12]
    a7b0:	f043 0310 	orr.w	r3, r3, #16
    a7b4:	733b      	strb	r3, [r7, #12]
    a7b6:	7b3b      	ldrb	r3, [r7, #12]
    a7b8:	f043 0320 	orr.w	r3, r3, #32
    a7bc:	733b      	strb	r3, [r7, #12]
    a7be:	7b3b      	ldrb	r3, [r7, #12]
    a7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a7c4:	733b      	strb	r3, [r7, #12]
    a7c6:	7b3b      	ldrb	r3, [r7, #12]
    a7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a7cc:	733b      	strb	r3, [r7, #12]
    a7ce:	7b7b      	ldrb	r3, [r7, #13]
    a7d0:	f043 0303 	orr.w	r3, r3, #3
    a7d4:	737b      	strb	r3, [r7, #13]
    a7d6:	7b7b      	ldrb	r3, [r7, #13]
    a7d8:	2201      	movs	r2, #1
    a7da:	f362 1305 	bfi	r3, r2, #4, #2
    a7de:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a7e2:	7b1b      	ldrb	r3, [r3, #12]
    a7e4:	2b00      	cmp	r3, #0
    a7e6:	d001      	beq.n	a7ec <n25q256a_xip_confirm+0x7c>
    a7e8:	2208      	movs	r2, #8
    a7ea:	e000      	b.n	a7ee <n25q256a_xip_confirm+0x7e>
    a7ec:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a7ee:	7bbb      	ldrb	r3, [r7, #14]
    a7f0:	f362 0304 	bfi	r3, r2, #0, #5
    a7f4:	73bb      	strb	r3, [r7, #14]
    a7f6:	230b      	movs	r3, #11
    a7f8:	743b      	strb	r3, [r7, #16]
    a7fa:	78fb      	ldrb	r3, [r7, #3]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d001      	beq.n	a804 <n25q256a_xip_confirm+0x94>
    a800:	2300      	movs	r3, #0
    a802:	e000      	b.n	a806 <n25q256a_xip_confirm+0x96>
    a804:	23ff      	movs	r3, #255	; 0xff
    a806:	747b      	strb	r3, [r7, #17]
    a808:	2301      	movs	r3, #1
    a80a:	61bb      	str	r3, [r7, #24]
    a80c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    a810:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    a812:	f107 030c 	add.w	r3, r7, #12
    a816:	4619      	mov	r1, r3
    a818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a81a:	4b07      	ldr	r3, [pc, #28]	; (a838 <n25q256a_xip_confirm+0xc8>)
    a81c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    a81e:	78fb      	ldrb	r3, [r7, #3]
    a820:	2b00      	cmp	r3, #0
    a822:	d001      	beq.n	a828 <n25q256a_xip_confirm+0xb8>
    a824:	2202      	movs	r2, #2
    a826:	e000      	b.n	a82a <n25q256a_xip_confirm+0xba>
    a828:	2201      	movs	r2, #1
    a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a82c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a82e:	2300      	movs	r3, #0
}
    a830:	4618      	mov	r0, r3
    a832:	3730      	adds	r7, #48	; 0x30
    a834:	46bd      	mov	sp, r7
    a836:	bd80      	pop	{r7, pc}
    a838:	00001d29 	.word	0x00001d29

0000a83c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b08c      	sub	sp, #48	; 0x30
    a840:	af00      	add	r7, sp, #0
    a842:	6078      	str	r0, [r7, #4]
    a844:	460b      	mov	r3, r1
    a846:	70fb      	strb	r3, [r7, #3]
    a848:	4613      	mov	r3, r2
    a84a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    a84c:	2300      	movs	r3, #0
    a84e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    a854:	687b      	ldr	r3, [r7, #4]
    a856:	681b      	ldr	r3, [r3, #0]
    a858:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    a85a:	f107 030c 	add.w	r3, r7, #12
    a85e:	2200      	movs	r2, #0
    a860:	601a      	str	r2, [r3, #0]
    a862:	605a      	str	r2, [r3, #4]
    a864:	609a      	str	r2, [r3, #8]
    a866:	60da      	str	r2, [r3, #12]
    a868:	611a      	str	r2, [r3, #16]
    a86a:	615a      	str	r2, [r3, #20]
    a86c:	78fb      	ldrb	r3, [r7, #3]
    a86e:	f003 0307 	and.w	r3, r3, #7
    a872:	b2da      	uxtb	r2, r3
    a874:	7b3b      	ldrb	r3, [r7, #12]
    a876:	f362 0302 	bfi	r3, r2, #0, #3
    a87a:	733b      	strb	r3, [r7, #12]
    a87c:	7b3b      	ldrb	r3, [r7, #12]
    a87e:	f043 0310 	orr.w	r3, r3, #16
    a882:	733b      	strb	r3, [r7, #12]
    a884:	7b3b      	ldrb	r3, [r7, #12]
    a886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a88a:	733b      	strb	r3, [r7, #12]
    a88c:	78bb      	ldrb	r3, [r7, #2]
    a88e:	743b      	strb	r3, [r7, #16]
    a890:	2301      	movs	r3, #1
    a892:	61bb      	str	r3, [r7, #24]
    a894:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a898:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a89c:	7b5b      	ldrb	r3, [r3, #13]
    a89e:	2b00      	cmp	r3, #0
    a8a0:	d003      	beq.n	a8aa <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    a8a2:	2100      	movs	r1, #0
    a8a4:	6878      	ldr	r0, [r7, #4]
    a8a6:	4b0a      	ldr	r3, [pc, #40]	; (a8d0 <n25q256a_read_reg+0x94>)
    a8a8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a8aa:	f107 030c 	add.w	r3, r7, #12
    a8ae:	4619      	mov	r1, r3
    a8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a8b2:	4b08      	ldr	r3, [pc, #32]	; (a8d4 <n25q256a_read_reg+0x98>)
    a8b4:	4798      	blx	r3
	if (n25q->xip_mode) {
    a8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8b8:	7b5b      	ldrb	r3, [r3, #13]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d003      	beq.n	a8c6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    a8be:	2101      	movs	r1, #1
    a8c0:	6878      	ldr	r0, [r7, #4]
    a8c2:	4b03      	ldr	r3, [pc, #12]	; (a8d0 <n25q256a_read_reg+0x94>)
    a8c4:	4798      	blx	r3
	}
	return status;
    a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a8c8:	4618      	mov	r0, r3
    a8ca:	3730      	adds	r7, #48	; 0x30
    a8cc:	46bd      	mov	sp, r7
    a8ce:	bd80      	pop	{r7, pc}
    a8d0:	0000a771 	.word	0x0000a771
    a8d4:	00001d29 	.word	0x00001d29

0000a8d8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    a8d8:	b580      	push	{r7, lr}
    a8da:	b08c      	sub	sp, #48	; 0x30
    a8dc:	af00      	add	r7, sp, #0
    a8de:	60f8      	str	r0, [r7, #12]
    a8e0:	607b      	str	r3, [r7, #4]
    a8e2:	460b      	mov	r3, r1
    a8e4:	72fb      	strb	r3, [r7, #11]
    a8e6:	4613      	mov	r3, r2
    a8e8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a8ea:	68fb      	ldr	r3, [r7, #12]
    a8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a8ee:	68fb      	ldr	r3, [r7, #12]
    a8f0:	681b      	ldr	r3, [r3, #0]
    a8f2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    a8f4:	f107 0310 	add.w	r3, r7, #16
    a8f8:	2200      	movs	r2, #0
    a8fa:	601a      	str	r2, [r3, #0]
    a8fc:	605a      	str	r2, [r3, #4]
    a8fe:	609a      	str	r2, [r3, #8]
    a900:	60da      	str	r2, [r3, #12]
    a902:	611a      	str	r2, [r3, #16]
    a904:	615a      	str	r2, [r3, #20]
    a906:	7afb      	ldrb	r3, [r7, #11]
    a908:	f003 0307 	and.w	r3, r3, #7
    a90c:	b2da      	uxtb	r2, r3
    a90e:	7c3b      	ldrb	r3, [r7, #16]
    a910:	f362 0302 	bfi	r3, r2, #0, #3
    a914:	743b      	strb	r3, [r7, #16]
    a916:	7c3b      	ldrb	r3, [r7, #16]
    a918:	f043 0310 	orr.w	r3, r3, #16
    a91c:	743b      	strb	r3, [r7, #16]
    a91e:	7c3b      	ldrb	r3, [r7, #16]
    a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a924:	743b      	strb	r3, [r7, #16]
    a926:	7c7b      	ldrb	r3, [r7, #17]
    a928:	2202      	movs	r2, #2
    a92a:	f362 1305 	bfi	r3, r2, #4, #2
    a92e:	747b      	strb	r3, [r7, #17]
    a930:	7abb      	ldrb	r3, [r7, #10]
    a932:	753b      	strb	r3, [r7, #20]
    a934:	2301      	movs	r3, #1
    a936:	61fb      	str	r3, [r7, #28]
    a938:	1d3b      	adds	r3, r7, #4
    a93a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a93e:	7b5b      	ldrb	r3, [r3, #13]
    a940:	2b00      	cmp	r3, #0
    a942:	d003      	beq.n	a94c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    a944:	2100      	movs	r1, #0
    a946:	68f8      	ldr	r0, [r7, #12]
    a948:	4b09      	ldr	r3, [pc, #36]	; (a970 <n25q256a_write_reg+0x98>)
    a94a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a94c:	f107 0310 	add.w	r3, r7, #16
    a950:	4619      	mov	r1, r3
    a952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a954:	4b07      	ldr	r3, [pc, #28]	; (a974 <n25q256a_write_reg+0x9c>)
    a956:	4798      	blx	r3
	if (n25q->xip_mode) {
    a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a95a:	7b5b      	ldrb	r3, [r3, #13]
    a95c:	2b00      	cmp	r3, #0
    a95e:	d003      	beq.n	a968 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    a960:	2101      	movs	r1, #1
    a962:	68f8      	ldr	r0, [r7, #12]
    a964:	4b02      	ldr	r3, [pc, #8]	; (a970 <n25q256a_write_reg+0x98>)
    a966:	4798      	blx	r3
	}
}
    a968:	bf00      	nop
    a96a:	3730      	adds	r7, #48	; 0x30
    a96c:	46bd      	mov	sp, r7
    a96e:	bd80      	pop	{r7, pc}
    a970:	0000a771 	.word	0x0000a771
    a974:	00001d29 	.word	0x00001d29

0000a978 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b090      	sub	sp, #64	; 0x40
    a97c:	af00      	add	r7, sp, #0
    a97e:	6078      	str	r0, [r7, #4]
    a980:	460b      	mov	r3, r1
    a982:	70fb      	strb	r3, [r7, #3]
    a984:	4613      	mov	r3, r2
    a986:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	681b      	ldr	r3, [r3, #0]
    a98c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    a98e:	78bb      	ldrb	r3, [r7, #2]
    a990:	2b00      	cmp	r3, #0
    a992:	d001      	beq.n	a998 <n25q256a_write_enable+0x20>
    a994:	2306      	movs	r3, #6
    a996:	e000      	b.n	a99a <n25q256a_write_enable+0x22>
    a998:	2304      	movs	r3, #4
    a99a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    a99e:	f107 0320 	add.w	r3, r7, #32
    a9a2:	2200      	movs	r2, #0
    a9a4:	601a      	str	r2, [r3, #0]
    a9a6:	605a      	str	r2, [r3, #4]
    a9a8:	609a      	str	r2, [r3, #8]
    a9aa:	60da      	str	r2, [r3, #12]
    a9ac:	611a      	str	r2, [r3, #16]
    a9ae:	615a      	str	r2, [r3, #20]
    a9b0:	78fb      	ldrb	r3, [r7, #3]
    a9b2:	f003 0307 	and.w	r3, r3, #7
    a9b6:	b2da      	uxtb	r2, r3
    a9b8:	f897 3020 	ldrb.w	r3, [r7, #32]
    a9bc:	f362 0302 	bfi	r3, r2, #0, #3
    a9c0:	f887 3020 	strb.w	r3, [r7, #32]
    a9c4:	f897 3020 	ldrb.w	r3, [r7, #32]
    a9c8:	f043 0310 	orr.w	r3, r3, #16
    a9cc:	f887 3020 	strb.w	r3, [r7, #32]
    a9d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a9d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    a9d8:	f107 0308 	add.w	r3, r7, #8
    a9dc:	2200      	movs	r2, #0
    a9de:	601a      	str	r2, [r3, #0]
    a9e0:	605a      	str	r2, [r3, #4]
    a9e2:	609a      	str	r2, [r3, #8]
    a9e4:	60da      	str	r2, [r3, #12]
    a9e6:	611a      	str	r2, [r3, #16]
    a9e8:	615a      	str	r2, [r3, #20]
    a9ea:	78fb      	ldrb	r3, [r7, #3]
    a9ec:	f003 0307 	and.w	r3, r3, #7
    a9f0:	b2da      	uxtb	r2, r3
    a9f2:	7a3b      	ldrb	r3, [r7, #8]
    a9f4:	f362 0302 	bfi	r3, r2, #0, #3
    a9f8:	723b      	strb	r3, [r7, #8]
    a9fa:	7a3b      	ldrb	r3, [r7, #8]
    a9fc:	f043 0310 	orr.w	r3, r3, #16
    aa00:	723b      	strb	r3, [r7, #8]
    aa02:	7a3b      	ldrb	r3, [r7, #8]
    aa04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa08:	723b      	strb	r3, [r7, #8]
    aa0a:	2305      	movs	r3, #5
    aa0c:	733b      	strb	r3, [r7, #12]
    aa0e:	2301      	movs	r3, #1
    aa10:	617b      	str	r3, [r7, #20]
    aa12:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    aa16:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    aa18:	f107 0320 	add.w	r3, r7, #32
    aa1c:	4619      	mov	r1, r3
    aa1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa20:	4b08      	ldr	r3, [pc, #32]	; (aa44 <n25q256a_write_enable+0xcc>)
    aa22:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    aa24:	f107 0308 	add.w	r3, r7, #8
    aa28:	4619      	mov	r1, r3
    aa2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa2c:	4b05      	ldr	r3, [pc, #20]	; (aa44 <n25q256a_write_enable+0xcc>)
    aa2e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    aa30:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    aa34:	f003 0302 	and.w	r3, r3, #2
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d0ed      	beq.n	aa18 <n25q256a_write_enable+0xa0>
}
    aa3c:	bf00      	nop
    aa3e:	3740      	adds	r7, #64	; 0x40
    aa40:	46bd      	mov	sp, r7
    aa42:	bd80      	pop	{r7, pc}
    aa44:	00001d29 	.word	0x00001d29

0000aa48 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    aa48:	b590      	push	{r4, r7, lr}
    aa4a:	b087      	sub	sp, #28
    aa4c:	af00      	add	r7, sp, #0
    aa4e:	6078      	str	r0, [r7, #4]
    aa50:	460b      	mov	r3, r1
    aa52:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aa54:	687b      	ldr	r3, [r7, #4]
    aa56:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aa58:	68fb      	ldr	r3, [r7, #12]
    aa5a:	7b1b      	ldrb	r3, [r3, #12]
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d001      	beq.n	aa64 <n25q256a_switch_mode+0x1c>
    aa60:	2306      	movs	r3, #6
    aa62:	e000      	b.n	aa66 <n25q256a_switch_mode+0x1e>
    aa64:	2300      	movs	r3, #0
    aa66:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aa68:	7afb      	ldrb	r3, [r7, #11]
    aa6a:	2265      	movs	r2, #101	; 0x65
    aa6c:	4619      	mov	r1, r3
    aa6e:	6878      	ldr	r0, [r7, #4]
    aa70:	4b25      	ldr	r3, [pc, #148]	; (ab08 <n25q256a_switch_mode+0xc0>)
    aa72:	4798      	blx	r3
    aa74:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    aa76:	2300      	movs	r3, #0
    aa78:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    aa7a:	68fb      	ldr	r3, [r7, #12]
    aa7c:	7b1b      	ldrb	r3, [r3, #12]
    aa7e:	78fa      	ldrb	r2, [r7, #3]
    aa80:	429a      	cmp	r2, r3
    aa82:	d03d      	beq.n	ab00 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    aa84:	78fb      	ldrb	r3, [r7, #3]
    aa86:	2b00      	cmp	r3, #0
    aa88:	d00b      	beq.n	aaa2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    aa8a:	697b      	ldr	r3, [r7, #20]
    aa8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa90:	2b00      	cmp	r3, #0
    aa92:	d011      	beq.n	aab8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    aa94:	697b      	ldr	r3, [r7, #20]
    aa96:	f003 031f 	and.w	r3, r3, #31
    aa9a:	617b      	str	r3, [r7, #20]
			modify = 1;
    aa9c:	2301      	movs	r3, #1
    aa9e:	74fb      	strb	r3, [r7, #19]
    aaa0:	e00a      	b.n	aab8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    aaa2:	697b      	ldr	r3, [r7, #20]
    aaa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aaa8:	2b00      	cmp	r3, #0
    aaaa:	d105      	bne.n	aab8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    aaac:	697b      	ldr	r3, [r7, #20]
    aaae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    aab2:	617b      	str	r3, [r7, #20]
			modify = 1;
    aab4:	2301      	movs	r3, #1
    aab6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    aab8:	7cfb      	ldrb	r3, [r7, #19]
    aaba:	2b00      	cmp	r3, #0
    aabc:	d021      	beq.n	ab02 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    aabe:	68fb      	ldr	r3, [r7, #12]
    aac0:	78fa      	ldrb	r2, [r7, #3]
    aac2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    aac4:	7afb      	ldrb	r3, [r7, #11]
    aac6:	2201      	movs	r2, #1
    aac8:	4619      	mov	r1, r3
    aaca:	6878      	ldr	r0, [r7, #4]
    aacc:	4b0f      	ldr	r3, [pc, #60]	; (ab0c <n25q256a_switch_mode+0xc4>)
    aace:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    aad0:	7af9      	ldrb	r1, [r7, #11]
    aad2:	697b      	ldr	r3, [r7, #20]
    aad4:	2261      	movs	r2, #97	; 0x61
    aad6:	6878      	ldr	r0, [r7, #4]
    aad8:	4c0d      	ldr	r4, [pc, #52]	; (ab10 <n25q256a_switch_mode+0xc8>)
    aada:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aadc:	78fb      	ldrb	r3, [r7, #3]
    aade:	2b00      	cmp	r3, #0
    aae0:	d001      	beq.n	aae6 <n25q256a_switch_mode+0x9e>
    aae2:	2306      	movs	r3, #6
    aae4:	e000      	b.n	aae8 <n25q256a_switch_mode+0xa0>
    aae6:	2300      	movs	r3, #0
    aae8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aaea:	7afb      	ldrb	r3, [r7, #11]
    aaec:	2265      	movs	r2, #101	; 0x65
    aaee:	4619      	mov	r1, r3
    aaf0:	6878      	ldr	r0, [r7, #4]
    aaf2:	4b05      	ldr	r3, [pc, #20]	; (ab08 <n25q256a_switch_mode+0xc0>)
    aaf4:	4798      	blx	r3
    aaf6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    aaf8:	68fb      	ldr	r3, [r7, #12]
    aafa:	78fa      	ldrb	r2, [r7, #3]
    aafc:	731a      	strb	r2, [r3, #12]
    aafe:	e000      	b.n	ab02 <n25q256a_switch_mode+0xba>
		return;
    ab00:	bf00      	nop
	}
}
    ab02:	371c      	adds	r7, #28
    ab04:	46bd      	mov	sp, r7
    ab06:	bd90      	pop	{r4, r7, pc}
    ab08:	0000a83d 	.word	0x0000a83d
    ab0c:	0000a979 	.word	0x0000a979
    ab10:	0000a8d9 	.word	0x0000a8d9

0000ab14 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ab14:	b580      	push	{r7, lr}
    ab16:	b086      	sub	sp, #24
    ab18:	af00      	add	r7, sp, #0
    ab1a:	60f8      	str	r0, [r7, #12]
    ab1c:	60b9      	str	r1, [r7, #8]
    ab1e:	607a      	str	r2, [r7, #4]
    ab20:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ab22:	68fb      	ldr	r3, [r7, #12]
    ab24:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ab26:	4a0c      	ldr	r2, [pc, #48]	; (ab58 <n25q256a_construct+0x44>)
    ab28:	68b9      	ldr	r1, [r7, #8]
    ab2a:	68f8      	ldr	r0, [r7, #12]
    ab2c:	4b0b      	ldr	r3, [pc, #44]	; (ab5c <n25q256a_construct+0x48>)
    ab2e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ab30:	697b      	ldr	r3, [r7, #20]
    ab32:	2200      	movs	r2, #0
    ab34:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    ab36:	697b      	ldr	r3, [r7, #20]
    ab38:	2200      	movs	r2, #0
    ab3a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    ab3c:	697b      	ldr	r3, [r7, #20]
    ab3e:	687a      	ldr	r2, [r7, #4]
    ab40:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    ab42:	78fb      	ldrb	r3, [r7, #3]
    ab44:	4619      	mov	r1, r3
    ab46:	68f8      	ldr	r0, [r7, #12]
    ab48:	4b05      	ldr	r3, [pc, #20]	; (ab60 <n25q256a_construct+0x4c>)
    ab4a:	4798      	blx	r3
	return me;
    ab4c:	68fb      	ldr	r3, [r7, #12]
}
    ab4e:	4618      	mov	r0, r3
    ab50:	3718      	adds	r7, #24
    ab52:	46bd      	mov	sp, r7
    ab54:	bd80      	pop	{r7, pc}
    ab56:	bf00      	nop
    ab58:	0000d7a8 	.word	0x0000d7a8
    ab5c:	0000aff1 	.word	0x0000aff1
    ab60:	0000aa49 	.word	0x0000aa49

0000ab64 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ab64:	b580      	push	{r7, lr}
    ab66:	b08c      	sub	sp, #48	; 0x30
    ab68:	af00      	add	r7, sp, #0
    ab6a:	60f8      	str	r0, [r7, #12]
    ab6c:	60b9      	str	r1, [r7, #8]
    ab6e:	607a      	str	r2, [r7, #4]
    ab70:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ab72:	68fb      	ldr	r3, [r7, #12]
    ab74:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ab76:	68fb      	ldr	r3, [r7, #12]
    ab78:	681b      	ldr	r3, [r3, #0]
    ab7a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    ab7c:	f107 0310 	add.w	r3, r7, #16
    ab80:	2200      	movs	r2, #0
    ab82:	601a      	str	r2, [r3, #0]
    ab84:	605a      	str	r2, [r3, #4]
    ab86:	609a      	str	r2, [r3, #8]
    ab88:	60da      	str	r2, [r3, #12]
    ab8a:	611a      	str	r2, [r3, #16]
    ab8c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab90:	7b1b      	ldrb	r3, [r3, #12]
    ab92:	2b00      	cmp	r3, #0
    ab94:	d001      	beq.n	ab9a <n25q256a_read+0x36>
    ab96:	2206      	movs	r2, #6
    ab98:	e000      	b.n	ab9c <n25q256a_read+0x38>
    ab9a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ab9c:	7c3b      	ldrb	r3, [r7, #16]
    ab9e:	f362 0302 	bfi	r3, r2, #0, #3
    aba2:	743b      	strb	r3, [r7, #16]
    aba4:	7c3b      	ldrb	r3, [r7, #16]
    aba6:	f043 0310 	orr.w	r3, r3, #16
    abaa:	743b      	strb	r3, [r7, #16]
    abac:	7c3b      	ldrb	r3, [r7, #16]
    abae:	f043 0320 	orr.w	r3, r3, #32
    abb2:	743b      	strb	r3, [r7, #16]
    abb4:	7c3b      	ldrb	r3, [r7, #16]
    abb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    abba:	743b      	strb	r3, [r7, #16]
    abbc:	7c7b      	ldrb	r3, [r7, #17]
    abbe:	2201      	movs	r2, #1
    abc0:	f362 1305 	bfi	r3, r2, #4, #2
    abc4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abc8:	7b1b      	ldrb	r3, [r3, #12]
    abca:	2b00      	cmp	r3, #0
    abcc:	d001      	beq.n	abd2 <n25q256a_read+0x6e>
    abce:	220a      	movs	r2, #10
    abd0:	e000      	b.n	abd4 <n25q256a_read+0x70>
    abd2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    abd4:	7cbb      	ldrb	r3, [r7, #18]
    abd6:	f362 0304 	bfi	r3, r2, #0, #5
    abda:	74bb      	strb	r3, [r7, #18]
    abdc:	230b      	movs	r3, #11
    abde:	753b      	strb	r3, [r7, #20]
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	61bb      	str	r3, [r7, #24]
    abe4:	683b      	ldr	r3, [r7, #0]
    abe6:	61fb      	str	r3, [r7, #28]
    abe8:	68bb      	ldr	r3, [r7, #8]
    abea:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    abec:	f107 0310 	add.w	r3, r7, #16
    abf0:	4619      	mov	r1, r3
    abf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    abf4:	4b03      	ldr	r3, [pc, #12]	; (ac04 <n25q256a_read+0xa0>)
    abf6:	4798      	blx	r3
	return ERR_NONE;
    abf8:	2300      	movs	r3, #0
}
    abfa:	4618      	mov	r0, r3
    abfc:	3730      	adds	r7, #48	; 0x30
    abfe:	46bd      	mov	sp, r7
    ac00:	bd80      	pop	{r7, pc}
    ac02:	bf00      	nop
    ac04:	00001d29 	.word	0x00001d29

0000ac08 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ac08:	b580      	push	{r7, lr}
    ac0a:	b08c      	sub	sp, #48	; 0x30
    ac0c:	af00      	add	r7, sp, #0
    ac0e:	60f8      	str	r0, [r7, #12]
    ac10:	60b9      	str	r1, [r7, #8]
    ac12:	607a      	str	r2, [r7, #4]
    ac14:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ac16:	68fb      	ldr	r3, [r7, #12]
    ac18:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac1a:	68fb      	ldr	r3, [r7, #12]
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ac20:	f107 0310 	add.w	r3, r7, #16
    ac24:	2200      	movs	r2, #0
    ac26:	601a      	str	r2, [r3, #0]
    ac28:	605a      	str	r2, [r3, #4]
    ac2a:	609a      	str	r2, [r3, #8]
    ac2c:	60da      	str	r2, [r3, #12]
    ac2e:	611a      	str	r2, [r3, #16]
    ac30:	615a      	str	r2, [r3, #20]
    ac32:	7c3b      	ldrb	r3, [r7, #16]
    ac34:	f043 0310 	orr.w	r3, r3, #16
    ac38:	743b      	strb	r3, [r7, #16]
    ac3a:	7c3b      	ldrb	r3, [r7, #16]
    ac3c:	f043 0320 	orr.w	r3, r3, #32
    ac40:	743b      	strb	r3, [r7, #16]
    ac42:	7c3b      	ldrb	r3, [r7, #16]
    ac44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac48:	743b      	strb	r3, [r7, #16]
    ac4a:	7c7b      	ldrb	r3, [r7, #17]
    ac4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ac50:	747b      	strb	r3, [r7, #17]
    ac52:	2302      	movs	r3, #2
    ac54:	753b      	strb	r3, [r7, #20]
    ac56:	687b      	ldr	r3, [r7, #4]
    ac58:	61bb      	str	r3, [r7, #24]
    ac5a:	683b      	ldr	r3, [r7, #0]
    ac5c:	61fb      	str	r3, [r7, #28]
    ac5e:	68bb      	ldr	r3, [r7, #8]
    ac60:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac64:	7b1b      	ldrb	r3, [r3, #12]
    ac66:	2b00      	cmp	r3, #0
    ac68:	d001      	beq.n	ac6e <n25q256a_write+0x66>
    ac6a:	2206      	movs	r2, #6
    ac6c:	e000      	b.n	ac70 <n25q256a_write+0x68>
    ac6e:	2200      	movs	r2, #0
    ac70:	7c3b      	ldrb	r3, [r7, #16]
    ac72:	f362 0302 	bfi	r3, r2, #0, #3
    ac76:	743b      	strb	r3, [r7, #16]
	while (length) {
    ac78:	e035      	b.n	ace6 <n25q256a_write+0xde>
		cmd.address = address;
    ac7a:	687b      	ldr	r3, [r7, #4]
    ac7c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ac7e:	683b      	ldr	r3, [r7, #0]
    ac80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ac84:	d802      	bhi.n	ac8c <n25q256a_write+0x84>
			cmd.buf_len = length;
    ac86:	683b      	ldr	r3, [r7, #0]
    ac88:	61fb      	str	r3, [r7, #28]
    ac8a:	e002      	b.n	ac92 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ac8c:	f44f 7380 	mov.w	r3, #256	; 0x100
    ac90:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ac92:	7c3b      	ldrb	r3, [r7, #16]
    ac94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ac98:	b2db      	uxtb	r3, r3
    ac9a:	2201      	movs	r2, #1
    ac9c:	4619      	mov	r1, r3
    ac9e:	68f8      	ldr	r0, [r7, #12]
    aca0:	4b19      	ldr	r3, [pc, #100]	; (ad08 <n25q256a_write+0x100>)
    aca2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    aca4:	f107 0310 	add.w	r3, r7, #16
    aca8:	4619      	mov	r1, r3
    acaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    acac:	4b17      	ldr	r3, [pc, #92]	; (ad0c <n25q256a_write+0x104>)
    acae:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    acb0:	bf00      	nop
    acb2:	7c3b      	ldrb	r3, [r7, #16]
    acb4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    acb8:	b2db      	uxtb	r3, r3
    acba:	2270      	movs	r2, #112	; 0x70
    acbc:	4619      	mov	r1, r3
    acbe:	68f8      	ldr	r0, [r7, #12]
    acc0:	4b13      	ldr	r3, [pc, #76]	; (ad10 <n25q256a_write+0x108>)
    acc2:	4798      	blx	r3
    acc4:	4603      	mov	r3, r0
    acc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acca:	2b00      	cmp	r3, #0
    accc:	d0f1      	beq.n	acb2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    acce:	6a3a      	ldr	r2, [r7, #32]
    acd0:	69fb      	ldr	r3, [r7, #28]
    acd2:	4413      	add	r3, r2
    acd4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    acd6:	69fb      	ldr	r3, [r7, #28]
    acd8:	683a      	ldr	r2, [r7, #0]
    acda:	1ad3      	subs	r3, r2, r3
    acdc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    acde:	69fb      	ldr	r3, [r7, #28]
    ace0:	687a      	ldr	r2, [r7, #4]
    ace2:	4413      	add	r3, r2
    ace4:	607b      	str	r3, [r7, #4]
	while (length) {
    ace6:	683b      	ldr	r3, [r7, #0]
    ace8:	2b00      	cmp	r3, #0
    acea:	d1c6      	bne.n	ac7a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acee:	7b5b      	ldrb	r3, [r3, #13]
    acf0:	2b00      	cmp	r3, #0
    acf2:	d003      	beq.n	acfc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    acf4:	2101      	movs	r1, #1
    acf6:	68f8      	ldr	r0, [r7, #12]
    acf8:	4b06      	ldr	r3, [pc, #24]	; (ad14 <n25q256a_write+0x10c>)
    acfa:	4798      	blx	r3
	}
	return ERR_NONE;
    acfc:	2300      	movs	r3, #0
}
    acfe:	4618      	mov	r0, r3
    ad00:	3730      	adds	r7, #48	; 0x30
    ad02:	46bd      	mov	sp, r7
    ad04:	bd80      	pop	{r7, pc}
    ad06:	bf00      	nop
    ad08:	0000a979 	.word	0x0000a979
    ad0c:	00001d29 	.word	0x00001d29
    ad10:	0000a83d 	.word	0x0000a83d
    ad14:	0000a771 	.word	0x0000a771

0000ad18 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ad18:	b580      	push	{r7, lr}
    ad1a:	b090      	sub	sp, #64	; 0x40
    ad1c:	af00      	add	r7, sp, #0
    ad1e:	60f8      	str	r0, [r7, #12]
    ad20:	60b9      	str	r1, [r7, #8]
    ad22:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ad24:	68fb      	ldr	r3, [r7, #12]
    ad26:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ad28:	68fb      	ldr	r3, [r7, #12]
    ad2a:	681b      	ldr	r3, [r3, #0]
    ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ad2e:	f107 0314 	add.w	r3, r7, #20
    ad32:	2200      	movs	r2, #0
    ad34:	601a      	str	r2, [r3, #0]
    ad36:	605a      	str	r2, [r3, #4]
    ad38:	609a      	str	r2, [r3, #8]
    ad3a:	60da      	str	r2, [r3, #12]
    ad3c:	611a      	str	r2, [r3, #16]
    ad3e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ad40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad42:	7b1b      	ldrb	r3, [r3, #12]
    ad44:	2b00      	cmp	r3, #0
    ad46:	d001      	beq.n	ad4c <n25q256a_erase+0x34>
    ad48:	2206      	movs	r2, #6
    ad4a:	e000      	b.n	ad4e <n25q256a_erase+0x36>
    ad4c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    ad4e:	7d3b      	ldrb	r3, [r7, #20]
    ad50:	f362 0302 	bfi	r3, r2, #0, #3
    ad54:	753b      	strb	r3, [r7, #20]
    ad56:	7d3b      	ldrb	r3, [r7, #20]
    ad58:	f043 0310 	orr.w	r3, r3, #16
    ad5c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    ad5e:	687b      	ldr	r3, [r7, #4]
    ad60:	4a56      	ldr	r2, [pc, #344]	; (aebc <n25q256a_erase+0x1a4>)
    ad62:	4293      	cmp	r3, r2
    ad64:	bf94      	ite	ls
    ad66:	2301      	movls	r3, #1
    ad68:	2300      	movhi	r3, #0
    ad6a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    ad6c:	7d3b      	ldrb	r3, [r7, #20]
    ad6e:	f362 1345 	bfi	r3, r2, #5, #1
    ad72:	753b      	strb	r3, [r7, #20]
    ad74:	7d7b      	ldrb	r3, [r7, #21]
    ad76:	2202      	movs	r2, #2
    ad78:	f362 1305 	bfi	r3, r2, #4, #2
    ad7c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    ad7e:	68bb      	ldr	r3, [r7, #8]
    ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    ad82:	687b      	ldr	r3, [r7, #4]
    ad84:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    ad86:	2300      	movs	r3, #0
    ad88:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    ad8a:	687b      	ldr	r3, [r7, #4]
    ad8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ad90:	2b00      	cmp	r3, #0
    ad92:	d104      	bne.n	ad9e <n25q256a_erase+0x86>
    ad94:	68bb      	ldr	r3, [r7, #8]
    ad96:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d002      	beq.n	ada4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ad9e:	f06f 030c 	mvn.w	r3, #12
    ada2:	e087      	b.n	aeb4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ada4:	687b      	ldr	r3, [r7, #4]
    ada6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    adaa:	d368      	bcc.n	ae7e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    adac:	23c7      	movs	r3, #199	; 0xc7
    adae:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    adb0:	7d3b      	ldrb	r3, [r7, #20]
    adb2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    adb6:	b2db      	uxtb	r3, r3
    adb8:	2201      	movs	r2, #1
    adba:	4619      	mov	r1, r3
    adbc:	68f8      	ldr	r0, [r7, #12]
    adbe:	4b40      	ldr	r3, [pc, #256]	; (aec0 <n25q256a_erase+0x1a8>)
    adc0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    adc2:	f107 0314 	add.w	r3, r7, #20
    adc6:	4619      	mov	r1, r3
    adc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    adca:	4b3e      	ldr	r3, [pc, #248]	; (aec4 <n25q256a_erase+0x1ac>)
    adcc:	4798      	blx	r3
    adce:	e059      	b.n	ae84 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    add0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    add2:	b29b      	uxth	r3, r3
    add4:	2b00      	cmp	r3, #0
    add6:	d11f      	bne.n	ae18 <n25q256a_erase+0x100>
    add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    adda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    adde:	d31b      	bcc.n	ae18 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ade0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ade2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ade4:	23d8      	movs	r3, #216	; 0xd8
    ade6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ade8:	7d3b      	ldrb	r3, [r7, #20]
    adea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    adee:	b2db      	uxtb	r3, r3
    adf0:	2201      	movs	r2, #1
    adf2:	4619      	mov	r1, r3
    adf4:	68f8      	ldr	r0, [r7, #12]
    adf6:	4b32      	ldr	r3, [pc, #200]	; (aec0 <n25q256a_erase+0x1a8>)
    adf8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    adfa:	f107 0314 	add.w	r3, r7, #20
    adfe:	4619      	mov	r1, r3
    ae00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae02:	4b30      	ldr	r3, [pc, #192]	; (aec4 <n25q256a_erase+0x1ac>)
    ae04:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ae06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae08:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae10:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ae14:	63bb      	str	r3, [r7, #56]	; 0x38
    ae16:	e023      	b.n	ae60 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ae1e:	d31b      	bcc.n	ae58 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ae20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae22:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ae24:	2320      	movs	r3, #32
    ae26:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae28:	7d3b      	ldrb	r3, [r7, #20]
    ae2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae2e:	b2db      	uxtb	r3, r3
    ae30:	2201      	movs	r2, #1
    ae32:	4619      	mov	r1, r3
    ae34:	68f8      	ldr	r0, [r7, #12]
    ae36:	4b22      	ldr	r3, [pc, #136]	; (aec0 <n25q256a_erase+0x1a8>)
    ae38:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae3a:	f107 0314 	add.w	r3, r7, #20
    ae3e:	4619      	mov	r1, r3
    ae40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae42:	4b20      	ldr	r3, [pc, #128]	; (aec4 <n25q256a_erase+0x1ac>)
    ae44:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    ae46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae50:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    ae54:	63bb      	str	r3, [r7, #56]	; 0x38
    ae56:	e003      	b.n	ae60 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    ae58:	f06f 030c 	mvn.w	r3, #12
    ae5c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    ae5e:	e011      	b.n	ae84 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ae60:	bf00      	nop
    ae62:	7d3b      	ldrb	r3, [r7, #20]
    ae64:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae68:	b2db      	uxtb	r3, r3
    ae6a:	2270      	movs	r2, #112	; 0x70
    ae6c:	4619      	mov	r1, r3
    ae6e:	68f8      	ldr	r0, [r7, #12]
    ae70:	4b15      	ldr	r3, [pc, #84]	; (aec8 <n25q256a_erase+0x1b0>)
    ae72:	4798      	blx	r3
    ae74:	4603      	mov	r3, r0
    ae76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d0f1      	beq.n	ae62 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae80:	2b00      	cmp	r3, #0
    ae82:	d1a5      	bne.n	add0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ae84:	bf00      	nop
    ae86:	7d3b      	ldrb	r3, [r7, #20]
    ae88:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae8c:	b2db      	uxtb	r3, r3
    ae8e:	2270      	movs	r2, #112	; 0x70
    ae90:	4619      	mov	r1, r3
    ae92:	68f8      	ldr	r0, [r7, #12]
    ae94:	4b0c      	ldr	r3, [pc, #48]	; (aec8 <n25q256a_erase+0x1b0>)
    ae96:	4798      	blx	r3
    ae98:	4603      	mov	r3, r0
    ae9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae9e:	2b00      	cmp	r3, #0
    aea0:	d0f1      	beq.n	ae86 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aea4:	7b5b      	ldrb	r3, [r3, #13]
    aea6:	2b00      	cmp	r3, #0
    aea8:	d003      	beq.n	aeb2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    aeaa:	2101      	movs	r1, #1
    aeac:	68f8      	ldr	r0, [r7, #12]
    aeae:	4b07      	ldr	r3, [pc, #28]	; (aecc <n25q256a_erase+0x1b4>)
    aeb0:	4798      	blx	r3
	}
	return rc;
    aeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    aeb4:	4618      	mov	r0, r3
    aeb6:	3740      	adds	r7, #64	; 0x40
    aeb8:	46bd      	mov	sp, r7
    aeba:	bd80      	pop	{r7, pc}
    aebc:	001fffff 	.word	0x001fffff
    aec0:	0000a979 	.word	0x0000a979
    aec4:	00001d29 	.word	0x00001d29
    aec8:	0000a83d 	.word	0x0000a83d
    aecc:	0000a771 	.word	0x0000a771

0000aed0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    aed0:	b590      	push	{r4, r7, lr}
    aed2:	b085      	sub	sp, #20
    aed4:	af00      	add	r7, sp, #0
    aed6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aedc:	68fb      	ldr	r3, [r7, #12]
    aede:	7b1b      	ldrb	r3, [r3, #12]
    aee0:	2b00      	cmp	r3, #0
    aee2:	d001      	beq.n	aee8 <n25q256a_enable_xip+0x18>
    aee4:	2306      	movs	r3, #6
    aee6:	e000      	b.n	aeea <n25q256a_enable_xip+0x1a>
    aee8:	2300      	movs	r3, #0
    aeea:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    aeec:	68fb      	ldr	r3, [r7, #12]
    aeee:	7b5b      	ldrb	r3, [r3, #13]
    aef0:	2b00      	cmp	r3, #0
    aef2:	d129      	bne.n	af48 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    aef4:	7afb      	ldrb	r3, [r7, #11]
    aef6:	2285      	movs	r2, #133	; 0x85
    aef8:	4619      	mov	r1, r3
    aefa:	6878      	ldr	r0, [r7, #4]
    aefc:	4b15      	ldr	r3, [pc, #84]	; (af54 <n25q256a_enable_xip+0x84>)
    aefe:	4798      	blx	r3
    af00:	4603      	mov	r3, r0
    af02:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    af04:	7abb      	ldrb	r3, [r7, #10]
    af06:	f003 0308 	and.w	r3, r3, #8
    af0a:	2b00      	cmp	r3, #0
    af0c:	d015      	beq.n	af3a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    af0e:	7abb      	ldrb	r3, [r7, #10]
    af10:	f023 0308 	bic.w	r3, r3, #8
    af14:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    af16:	7abb      	ldrb	r3, [r7, #10]
    af18:	7af9      	ldrb	r1, [r7, #11]
    af1a:	2281      	movs	r2, #129	; 0x81
    af1c:	6878      	ldr	r0, [r7, #4]
    af1e:	4c0e      	ldr	r4, [pc, #56]	; (af58 <n25q256a_enable_xip+0x88>)
    af20:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af22:	bf00      	nop
    af24:	7afb      	ldrb	r3, [r7, #11]
    af26:	2270      	movs	r2, #112	; 0x70
    af28:	4619      	mov	r1, r3
    af2a:	6878      	ldr	r0, [r7, #4]
    af2c:	4b09      	ldr	r3, [pc, #36]	; (af54 <n25q256a_enable_xip+0x84>)
    af2e:	4798      	blx	r3
    af30:	4603      	mov	r3, r0
    af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af36:	2b00      	cmp	r3, #0
    af38:	d0f4      	beq.n	af24 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    af3a:	68fb      	ldr	r3, [r7, #12]
    af3c:	2201      	movs	r2, #1
    af3e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    af40:	2101      	movs	r1, #1
    af42:	6878      	ldr	r0, [r7, #4]
    af44:	4b05      	ldr	r3, [pc, #20]	; (af5c <n25q256a_enable_xip+0x8c>)
    af46:	4798      	blx	r3
	}
	return ERR_NONE;
    af48:	2300      	movs	r3, #0
}
    af4a:	4618      	mov	r0, r3
    af4c:	3714      	adds	r7, #20
    af4e:	46bd      	mov	sp, r7
    af50:	bd90      	pop	{r4, r7, pc}
    af52:	bf00      	nop
    af54:	0000a83d 	.word	0x0000a83d
    af58:	0000a8d9 	.word	0x0000a8d9
    af5c:	0000a771 	.word	0x0000a771

0000af60 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    af60:	b580      	push	{r7, lr}
    af62:	b086      	sub	sp, #24
    af64:	af00      	add	r7, sp, #0
    af66:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    af68:	687b      	ldr	r3, [r7, #4]
    af6a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	681b      	ldr	r3, [r3, #0]
    af70:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af72:	697b      	ldr	r3, [r7, #20]
    af74:	7b1b      	ldrb	r3, [r3, #12]
    af76:	2b00      	cmp	r3, #0
    af78:	d001      	beq.n	af7e <n25q256a_disable_xip+0x1e>
    af7a:	2306      	movs	r3, #6
    af7c:	e000      	b.n	af80 <n25q256a_disable_xip+0x20>
    af7e:	2300      	movs	r3, #0
    af80:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    af82:	2100      	movs	r1, #0
    af84:	6878      	ldr	r0, [r7, #4]
    af86:	4b15      	ldr	r3, [pc, #84]	; (afdc <n25q256a_disable_xip+0x7c>)
    af88:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    af8a:	7bfb      	ldrb	r3, [r7, #15]
    af8c:	2285      	movs	r2, #133	; 0x85
    af8e:	4619      	mov	r1, r3
    af90:	6878      	ldr	r0, [r7, #4]
    af92:	4b13      	ldr	r3, [pc, #76]	; (afe0 <n25q256a_disable_xip+0x80>)
    af94:	4798      	blx	r3
    af96:	4603      	mov	r3, r0
    af98:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    af9a:	7bbb      	ldrb	r3, [r7, #14]
    af9c:	f003 0308 	and.w	r3, r3, #8
    afa0:	2b00      	cmp	r3, #0
    afa2:	d113      	bne.n	afcc <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    afa4:	697b      	ldr	r3, [r7, #20]
    afa6:	689b      	ldr	r3, [r3, #8]
    afa8:	2b00      	cmp	r3, #0
    afaa:	d00f      	beq.n	afcc <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    afac:	693b      	ldr	r3, [r7, #16]
    afae:	681b      	ldr	r3, [r3, #0]
    afb0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    afb2:	6938      	ldr	r0, [r7, #16]
    afb4:	4b0b      	ldr	r3, [pc, #44]	; (afe4 <n25q256a_disable_xip+0x84>)
    afb6:	4798      	blx	r3
			n25q->pin_exit_xip();
    afb8:	697b      	ldr	r3, [r7, #20]
    afba:	689b      	ldr	r3, [r3, #8]
    afbc:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    afbe:	68b9      	ldr	r1, [r7, #8]
    afc0:	6938      	ldr	r0, [r7, #16]
    afc2:	4b09      	ldr	r3, [pc, #36]	; (afe8 <n25q256a_disable_xip+0x88>)
    afc4:	4798      	blx	r3
			qspi_sync_enable(descr);
    afc6:	6938      	ldr	r0, [r7, #16]
    afc8:	4b08      	ldr	r3, [pc, #32]	; (afec <n25q256a_disable_xip+0x8c>)
    afca:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    afcc:	697b      	ldr	r3, [r7, #20]
    afce:	2200      	movs	r2, #0
    afd0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    afd2:	2300      	movs	r3, #0
}
    afd4:	4618      	mov	r0, r3
    afd6:	3718      	adds	r7, #24
    afd8:	46bd      	mov	sp, r7
    afda:	bd80      	pop	{r7, pc}
    afdc:	0000a771 	.word	0x0000a771
    afe0:	0000a83d 	.word	0x0000a83d
    afe4:	00001ced 	.word	0x00001ced
    afe8:	00001c65 	.word	0x00001c65
    afec:	00001cb1 	.word	0x00001cb1

0000aff0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    aff0:	b480      	push	{r7}
    aff2:	b085      	sub	sp, #20
    aff4:	af00      	add	r7, sp, #0
    aff6:	60f8      	str	r0, [r7, #12]
    aff8:	60b9      	str	r1, [r7, #8]
    affa:	607a      	str	r2, [r7, #4]
	me->io        = io;
    affc:	68fb      	ldr	r3, [r7, #12]
    affe:	68ba      	ldr	r2, [r7, #8]
    b000:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b002:	68fb      	ldr	r3, [r7, #12]
    b004:	687a      	ldr	r2, [r7, #4]
    b006:	605a      	str	r2, [r3, #4]

	return me;
    b008:	68fb      	ldr	r3, [r7, #12]
}
    b00a:	4618      	mov	r0, r3
    b00c:	3714      	adds	r7, #20
    b00e:	46bd      	mov	sp, r7
    b010:	f85d 7b04 	ldr.w	r7, [sp], #4
    b014:	4770      	bx	lr

0000b016 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b016:	b480      	push	{r7}
    b018:	b083      	sub	sp, #12
    b01a:	af00      	add	r7, sp, #0
    b01c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b01e:	687b      	ldr	r3, [r7, #4]
    b020:	781b      	ldrb	r3, [r3, #0]
    b022:	b29a      	uxth	r2, r3
    b024:	687b      	ldr	r3, [r7, #4]
    b026:	3301      	adds	r3, #1
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	b29b      	uxth	r3, r3
    b02c:	021b      	lsls	r3, r3, #8
    b02e:	b29b      	uxth	r3, r3
    b030:	4413      	add	r3, r2
    b032:	b29b      	uxth	r3, r3
}
    b034:	4618      	mov	r0, r3
    b036:	370c      	adds	r7, #12
    b038:	46bd      	mov	sp, r7
    b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b03e:	4770      	bx	lr

0000b040 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b040:	b480      	push	{r7}
    b042:	b083      	sub	sp, #12
    b044:	af00      	add	r7, sp, #0
    b046:	6078      	str	r0, [r7, #4]
	return desc[0];
    b048:	687b      	ldr	r3, [r7, #4]
    b04a:	781b      	ldrb	r3, [r3, #0]
}
    b04c:	4618      	mov	r0, r3
    b04e:	370c      	adds	r7, #12
    b050:	46bd      	mov	sp, r7
    b052:	f85d 7b04 	ldr.w	r7, [sp], #4
    b056:	4770      	bx	lr

0000b058 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b058:	b580      	push	{r7, lr}
    b05a:	b082      	sub	sp, #8
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b060:	6878      	ldr	r0, [r7, #4]
    b062:	4b05      	ldr	r3, [pc, #20]	; (b078 <usb_desc_next+0x20>)
    b064:	4798      	blx	r3
    b066:	4603      	mov	r3, r0
    b068:	461a      	mov	r2, r3
    b06a:	687b      	ldr	r3, [r7, #4]
    b06c:	4413      	add	r3, r2
}
    b06e:	4618      	mov	r0, r3
    b070:	3708      	adds	r7, #8
    b072:	46bd      	mov	sp, r7
    b074:	bd80      	pop	{r7, pc}
    b076:	bf00      	nop
    b078:	0000b041 	.word	0x0000b041

0000b07c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b08c      	sub	sp, #48	; 0x30
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
    b084:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b086:	687b      	ldr	r3, [r7, #4]
    b088:	689b      	ldr	r3, [r3, #8]
    b08a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b08c:	683b      	ldr	r3, [r7, #0]
    b08e:	681b      	ldr	r3, [r3, #0]
    b090:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b092:	2300      	movs	r3, #0
    b094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b098:	e08f      	b.n	b1ba <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b09c:	2b00      	cmp	r3, #0
    b09e:	d102      	bne.n	b0a6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b0a0:	f06f 0309 	mvn.w	r3, #9
    b0a4:	e092      	b.n	b1cc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0a8:	789b      	ldrb	r3, [r3, #2]
    b0aa:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0ae:	795b      	ldrb	r3, [r3, #5]
    b0b0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b0b2:	7c7b      	ldrb	r3, [r7, #17]
    b0b4:	2b02      	cmp	r3, #2
    b0b6:	d002      	beq.n	b0be <cdcdf_acm_enable+0x42>
    b0b8:	7c7b      	ldrb	r3, [r7, #17]
    b0ba:	2b0a      	cmp	r3, #10
    b0bc:	d121      	bne.n	b102 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b0be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b0c2:	6a3a      	ldr	r2, [r7, #32]
    b0c4:	5cd2      	ldrb	r2, [r2, r3]
    b0c6:	7bbb      	ldrb	r3, [r7, #14]
    b0c8:	429a      	cmp	r2, r3
    b0ca:	d102      	bne.n	b0d2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b0cc:	f06f 0311 	mvn.w	r3, #17
    b0d0:	e07c      	b.n	b1cc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b0d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b0d6:	6a3a      	ldr	r2, [r7, #32]
    b0d8:	5cd3      	ldrb	r3, [r2, r3]
    b0da:	2bff      	cmp	r3, #255	; 0xff
    b0dc:	d002      	beq.n	b0e4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b0de:	f06f 031b 	mvn.w	r3, #27
    b0e2:	e073      	b.n	b1cc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b0e8:	7bb9      	ldrb	r1, [r7, #14]
    b0ea:	6a3a      	ldr	r2, [r7, #32]
    b0ec:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b0ee:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b0f0:	683b      	ldr	r3, [r7, #0]
    b0f2:	685b      	ldr	r3, [r3, #4]
    b0f4:	2205      	movs	r2, #5
    b0f6:	4619      	mov	r1, r3
    b0f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b0fa:	4b36      	ldr	r3, [pc, #216]	; (b1d4 <cdcdf_acm_enable+0x158>)
    b0fc:	4798      	blx	r3
    b0fe:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b100:	e047      	b.n	b192 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b102:	f06f 0309 	mvn.w	r3, #9
    b106:	e061      	b.n	b1cc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b10a:	789b      	ldrb	r3, [r3, #2]
    b10c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b110:	78db      	ldrb	r3, [r3, #3]
    b112:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b116:	3304      	adds	r3, #4
    b118:	4618      	mov	r0, r3
    b11a:	4b2f      	ldr	r3, [pc, #188]	; (b1d8 <cdcdf_acm_enable+0x15c>)
    b11c:	4798      	blx	r3
    b11e:	4603      	mov	r3, r0
    b120:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b122:	7ebb      	ldrb	r3, [r7, #26]
    b124:	7ef9      	ldrb	r1, [r7, #27]
    b126:	8bba      	ldrh	r2, [r7, #28]
    b128:	4618      	mov	r0, r3
    b12a:	4b2c      	ldr	r3, [pc, #176]	; (b1dc <cdcdf_acm_enable+0x160>)
    b12c:	4798      	blx	r3
    b12e:	4603      	mov	r3, r0
    b130:	2b00      	cmp	r3, #0
    b132:	d002      	beq.n	b13a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b134:	f06f 0313 	mvn.w	r3, #19
    b138:	e048      	b.n	b1cc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b13a:	7ebb      	ldrb	r3, [r7, #26]
    b13c:	b25b      	sxtb	r3, r3
    b13e:	2b00      	cmp	r3, #0
    b140:	da0f      	bge.n	b162 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b146:	7eb9      	ldrb	r1, [r7, #26]
    b148:	6a3a      	ldr	r2, [r7, #32]
    b14a:	4413      	add	r3, r2
    b14c:	460a      	mov	r2, r1
    b14e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b154:	6a3a      	ldr	r2, [r7, #32]
    b156:	4413      	add	r3, r2
    b158:	789b      	ldrb	r3, [r3, #2]
    b15a:	4618      	mov	r0, r3
    b15c:	4b20      	ldr	r3, [pc, #128]	; (b1e0 <cdcdf_acm_enable+0x164>)
    b15e:	4798      	blx	r3
    b160:	e007      	b.n	b172 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b162:	7eba      	ldrb	r2, [r7, #26]
    b164:	6a3b      	ldr	r3, [r7, #32]
    b166:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b168:	6a3b      	ldr	r3, [r7, #32]
    b16a:	791b      	ldrb	r3, [r3, #4]
    b16c:	4618      	mov	r0, r3
    b16e:	4b1c      	ldr	r3, [pc, #112]	; (b1e0 <cdcdf_acm_enable+0x164>)
    b170:	4798      	blx	r3
			}
			desc->sod = ep;
    b172:	683b      	ldr	r3, [r7, #0]
    b174:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b176:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b178:	683b      	ldr	r3, [r7, #0]
    b17a:	681b      	ldr	r3, [r3, #0]
    b17c:	4618      	mov	r0, r3
    b17e:	4b19      	ldr	r3, [pc, #100]	; (b1e4 <cdcdf_acm_enable+0x168>)
    b180:	4798      	blx	r3
    b182:	4602      	mov	r2, r0
    b184:	683b      	ldr	r3, [r7, #0]
    b186:	685b      	ldr	r3, [r3, #4]
    b188:	4619      	mov	r1, r3
    b18a:	4610      	mov	r0, r2
    b18c:	4b16      	ldr	r3, [pc, #88]	; (b1e8 <cdcdf_acm_enable+0x16c>)
    b18e:	4798      	blx	r3
    b190:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b194:	2b00      	cmp	r3, #0
    b196:	d1b7      	bne.n	b108 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b198:	683b      	ldr	r3, [r7, #0]
    b19a:	681b      	ldr	r3, [r3, #0]
    b19c:	4618      	mov	r0, r3
    b19e:	4b11      	ldr	r3, [pc, #68]	; (b1e4 <cdcdf_acm_enable+0x168>)
    b1a0:	4798      	blx	r3
    b1a2:	683b      	ldr	r3, [r7, #0]
    b1a4:	685b      	ldr	r3, [r3, #4]
    b1a6:	2204      	movs	r2, #4
    b1a8:	4619      	mov	r1, r3
    b1aa:	4b0a      	ldr	r3, [pc, #40]	; (b1d4 <cdcdf_acm_enable+0x158>)
    b1ac:	4798      	blx	r3
    b1ae:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1b4:	3301      	adds	r3, #1
    b1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1be:	2b01      	cmp	r3, #1
    b1c0:	f67f af6b 	bls.w	b09a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b1c4:	4b09      	ldr	r3, [pc, #36]	; (b1ec <cdcdf_acm_enable+0x170>)
    b1c6:	2201      	movs	r2, #1
    b1c8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b1ca:	2300      	movs	r3, #0
}
    b1cc:	4618      	mov	r0, r3
    b1ce:	3730      	adds	r7, #48	; 0x30
    b1d0:	46bd      	mov	sp, r7
    b1d2:	bd80      	pop	{r7, pc}
    b1d4:	0000c43d 	.word	0x0000c43d
    b1d8:	0000b017 	.word	0x0000b017
    b1dc:	00002c5d 	.word	0x00002c5d
    b1e0:	00002d49 	.word	0x00002d49
    b1e4:	0000b059 	.word	0x0000b059
    b1e8:	0000c499 	.word	0x0000c499
    b1ec:	20000b20 	.word	0x20000b20

0000b1f0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b1f0:	b580      	push	{r7, lr}
    b1f2:	b088      	sub	sp, #32
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	6078      	str	r0, [r7, #4]
    b1f8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b1fa:	687b      	ldr	r3, [r7, #4]
    b1fc:	689b      	ldr	r3, [r3, #8]
    b1fe:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b200:	683b      	ldr	r3, [r7, #0]
    b202:	2b00      	cmp	r3, #0
    b204:	d00c      	beq.n	b220 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b206:	683b      	ldr	r3, [r7, #0]
    b208:	681b      	ldr	r3, [r3, #0]
    b20a:	795b      	ldrb	r3, [r3, #5]
    b20c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b20e:	7c7b      	ldrb	r3, [r7, #17]
    b210:	2b02      	cmp	r3, #2
    b212:	d005      	beq.n	b220 <cdcdf_acm_disable+0x30>
    b214:	7c7b      	ldrb	r3, [r7, #17]
    b216:	2b0a      	cmp	r3, #10
    b218:	d002      	beq.n	b220 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b21a:	f06f 0309 	mvn.w	r3, #9
    b21e:	e035      	b.n	b28c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b220:	2300      	movs	r3, #0
    b222:	77fb      	strb	r3, [r7, #31]
    b224:	e01f      	b.n	b266 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b226:	7ffb      	ldrb	r3, [r7, #31]
    b228:	69ba      	ldr	r2, [r7, #24]
    b22a:	5cd3      	ldrb	r3, [r2, r3]
    b22c:	2bff      	cmp	r3, #255	; 0xff
    b22e:	d016      	beq.n	b25e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b230:	7ffb      	ldrb	r3, [r7, #31]
    b232:	69ba      	ldr	r2, [r7, #24]
    b234:	21ff      	movs	r1, #255	; 0xff
    b236:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b238:	7ffb      	ldrb	r3, [r7, #31]
    b23a:	69ba      	ldr	r2, [r7, #24]
    b23c:	4413      	add	r3, r2
    b23e:	789b      	ldrb	r3, [r3, #2]
    b240:	2bff      	cmp	r3, #255	; 0xff
    b242:	d00d      	beq.n	b260 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b244:	7ffb      	ldrb	r3, [r7, #31]
    b246:	69ba      	ldr	r2, [r7, #24]
    b248:	4413      	add	r3, r2
    b24a:	789b      	ldrb	r3, [r3, #2]
    b24c:	4618      	mov	r0, r3
    b24e:	4b11      	ldr	r3, [pc, #68]	; (b294 <cdcdf_acm_disable+0xa4>)
    b250:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b252:	7ffb      	ldrb	r3, [r7, #31]
    b254:	69ba      	ldr	r2, [r7, #24]
    b256:	4413      	add	r3, r2
    b258:	22ff      	movs	r2, #255	; 0xff
    b25a:	709a      	strb	r2, [r3, #2]
    b25c:	e000      	b.n	b260 <cdcdf_acm_disable+0x70>
			continue;
    b25e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b260:	7ffb      	ldrb	r3, [r7, #31]
    b262:	3301      	adds	r3, #1
    b264:	77fb      	strb	r3, [r7, #31]
    b266:	7ffb      	ldrb	r3, [r7, #31]
    b268:	2b01      	cmp	r3, #1
    b26a:	d9dc      	bls.n	b226 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b26c:	69bb      	ldr	r3, [r7, #24]
    b26e:	791b      	ldrb	r3, [r3, #4]
    b270:	2bff      	cmp	r3, #255	; 0xff
    b272:	d007      	beq.n	b284 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b274:	69bb      	ldr	r3, [r7, #24]
    b276:	791b      	ldrb	r3, [r3, #4]
    b278:	4618      	mov	r0, r3
    b27a:	4b06      	ldr	r3, [pc, #24]	; (b294 <cdcdf_acm_disable+0xa4>)
    b27c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b27e:	69bb      	ldr	r3, [r7, #24]
    b280:	22ff      	movs	r2, #255	; 0xff
    b282:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b284:	4b04      	ldr	r3, [pc, #16]	; (b298 <cdcdf_acm_disable+0xa8>)
    b286:	2200      	movs	r2, #0
    b288:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b28a:	2300      	movs	r3, #0
}
    b28c:	4618      	mov	r0, r3
    b28e:	3720      	adds	r7, #32
    b290:	46bd      	mov	sp, r7
    b292:	bd80      	pop	{r7, pc}
    b294:	00002cf9 	.word	0x00002cf9
    b298:	20000b20 	.word	0x20000b20

0000b29c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b29c:	b580      	push	{r7, lr}
    b29e:	b084      	sub	sp, #16
    b2a0:	af00      	add	r7, sp, #0
    b2a2:	60f8      	str	r0, [r7, #12]
    b2a4:	460b      	mov	r3, r1
    b2a6:	607a      	str	r2, [r7, #4]
    b2a8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b2aa:	7afb      	ldrb	r3, [r7, #11]
    b2ac:	2b01      	cmp	r3, #1
    b2ae:	d009      	beq.n	b2c4 <cdcdf_acm_ctrl+0x28>
    b2b0:	2b02      	cmp	r3, #2
    b2b2:	d00d      	beq.n	b2d0 <cdcdf_acm_ctrl+0x34>
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d10e      	bne.n	b2d6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b2b8:	6879      	ldr	r1, [r7, #4]
    b2ba:	68f8      	ldr	r0, [r7, #12]
    b2bc:	4b09      	ldr	r3, [pc, #36]	; (b2e4 <cdcdf_acm_ctrl+0x48>)
    b2be:	4798      	blx	r3
    b2c0:	4603      	mov	r3, r0
    b2c2:	e00a      	b.n	b2da <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b2c4:	6879      	ldr	r1, [r7, #4]
    b2c6:	68f8      	ldr	r0, [r7, #12]
    b2c8:	4b07      	ldr	r3, [pc, #28]	; (b2e8 <cdcdf_acm_ctrl+0x4c>)
    b2ca:	4798      	blx	r3
    b2cc:	4603      	mov	r3, r0
    b2ce:	e004      	b.n	b2da <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b2d0:	f06f 031a 	mvn.w	r3, #26
    b2d4:	e001      	b.n	b2da <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b2d6:	f06f 030c 	mvn.w	r3, #12
	}
}
    b2da:	4618      	mov	r0, r3
    b2dc:	3710      	adds	r7, #16
    b2de:	46bd      	mov	sp, r7
    b2e0:	bd80      	pop	{r7, pc}
    b2e2:	bf00      	nop
    b2e4:	0000b07d 	.word	0x0000b07d
    b2e8:	0000b1f1 	.word	0x0000b1f1

0000b2ec <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b2ec:	b590      	push	{r4, r7, lr}
    b2ee:	b087      	sub	sp, #28
    b2f0:	af00      	add	r7, sp, #0
    b2f2:	4603      	mov	r3, r0
    b2f4:	6039      	str	r1, [r7, #0]
    b2f6:	71fb      	strb	r3, [r7, #7]
    b2f8:	4613      	mov	r3, r2
    b2fa:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b2fc:	683b      	ldr	r3, [r7, #0]
    b2fe:	799a      	ldrb	r2, [r3, #6]
    b300:	79db      	ldrb	r3, [r3, #7]
    b302:	021b      	lsls	r3, r3, #8
    b304:	4313      	orrs	r3, r2
    b306:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b308:	4b2b      	ldr	r3, [pc, #172]	; (b3b8 <cdcdf_acm_set_req+0xcc>)
    b30a:	4798      	blx	r3
    b30c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b30e:	683b      	ldr	r3, [r7, #0]
    b310:	785b      	ldrb	r3, [r3, #1]
    b312:	2b20      	cmp	r3, #32
    b314:	d002      	beq.n	b31c <cdcdf_acm_set_req+0x30>
    b316:	2b22      	cmp	r3, #34	; 0x22
    b318:	d034      	beq.n	b384 <cdcdf_acm_set_req+0x98>
    b31a:	e046      	b.n	b3aa <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b31c:	8afb      	ldrh	r3, [r7, #22]
    b31e:	2b07      	cmp	r3, #7
    b320:	d002      	beq.n	b328 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b322:	f04f 33ff 	mov.w	r3, #4294967295
    b326:	e042      	b.n	b3ae <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b328:	79bb      	ldrb	r3, [r7, #6]
    b32a:	2b00      	cmp	r3, #0
    b32c:	d107      	bne.n	b33e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b32e:	8afa      	ldrh	r2, [r7, #22]
    b330:	79f8      	ldrb	r0, [r7, #7]
    b332:	2300      	movs	r3, #0
    b334:	6939      	ldr	r1, [r7, #16]
    b336:	4c21      	ldr	r4, [pc, #132]	; (b3bc <cdcdf_acm_set_req+0xd0>)
    b338:	47a0      	blx	r4
    b33a:	4603      	mov	r3, r0
    b33c:	e037      	b.n	b3ae <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b33e:	693a      	ldr	r2, [r7, #16]
    b340:	f107 0308 	add.w	r3, r7, #8
    b344:	6810      	ldr	r0, [r2, #0]
    b346:	6018      	str	r0, [r3, #0]
    b348:	8891      	ldrh	r1, [r2, #4]
    b34a:	7992      	ldrb	r2, [r2, #6]
    b34c:	8099      	strh	r1, [r3, #4]
    b34e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b350:	4b1b      	ldr	r3, [pc, #108]	; (b3c0 <cdcdf_acm_set_req+0xd4>)
    b352:	681b      	ldr	r3, [r3, #0]
    b354:	2b00      	cmp	r3, #0
    b356:	d008      	beq.n	b36a <cdcdf_acm_set_req+0x7e>
    b358:	4b19      	ldr	r3, [pc, #100]	; (b3c0 <cdcdf_acm_set_req+0xd4>)
    b35a:	681b      	ldr	r3, [r3, #0]
    b35c:	f107 0208 	add.w	r2, r7, #8
    b360:	4610      	mov	r0, r2
    b362:	4798      	blx	r3
    b364:	4603      	mov	r3, r0
    b366:	2b00      	cmp	r3, #0
    b368:	d00a      	beq.n	b380 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b36a:	4b16      	ldr	r3, [pc, #88]	; (b3c4 <cdcdf_acm_set_req+0xd8>)
    b36c:	f107 0208 	add.w	r2, r7, #8
    b370:	e892 0003 	ldmia.w	r2, {r0, r1}
    b374:	6018      	str	r0, [r3, #0]
    b376:	3304      	adds	r3, #4
    b378:	8019      	strh	r1, [r3, #0]
    b37a:	3302      	adds	r3, #2
    b37c:	0c0a      	lsrs	r2, r1, #16
    b37e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b380:	2300      	movs	r3, #0
    b382:	e014      	b.n	b3ae <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b384:	2300      	movs	r3, #0
    b386:	2200      	movs	r2, #0
    b388:	2100      	movs	r1, #0
    b38a:	2000      	movs	r0, #0
    b38c:	4c0b      	ldr	r4, [pc, #44]	; (b3bc <cdcdf_acm_set_req+0xd0>)
    b38e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b390:	4b0d      	ldr	r3, [pc, #52]	; (b3c8 <cdcdf_acm_set_req+0xdc>)
    b392:	681b      	ldr	r3, [r3, #0]
    b394:	2b00      	cmp	r3, #0
    b396:	d006      	beq.n	b3a6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b398:	4b0b      	ldr	r3, [pc, #44]	; (b3c8 <cdcdf_acm_set_req+0xdc>)
    b39a:	681b      	ldr	r3, [r3, #0]
    b39c:	683a      	ldr	r2, [r7, #0]
    b39e:	8852      	ldrh	r2, [r2, #2]
    b3a0:	b292      	uxth	r2, r2
    b3a2:	4610      	mov	r0, r2
    b3a4:	4798      	blx	r3
		}
		return ERR_NONE;
    b3a6:	2300      	movs	r3, #0
    b3a8:	e001      	b.n	b3ae <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b3aa:	f06f 030c 	mvn.w	r3, #12
	}
}
    b3ae:	4618      	mov	r0, r3
    b3b0:	371c      	adds	r7, #28
    b3b2:	46bd      	mov	sp, r7
    b3b4:	bd90      	pop	{r4, r7, pc}
    b3b6:	bf00      	nop
    b3b8:	0000c339 	.word	0x0000c339
    b3bc:	0000c1ad 	.word	0x0000c1ad
    b3c0:	20000b34 	.word	0x20000b34
    b3c4:	20000b28 	.word	0x20000b28
    b3c8:	20000b30 	.word	0x20000b30

0000b3cc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b3cc:	b590      	push	{r4, r7, lr}
    b3ce:	b085      	sub	sp, #20
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	4603      	mov	r3, r0
    b3d4:	6039      	str	r1, [r7, #0]
    b3d6:	71fb      	strb	r3, [r7, #7]
    b3d8:	4613      	mov	r3, r2
    b3da:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b3dc:	683b      	ldr	r3, [r7, #0]
    b3de:	799a      	ldrb	r2, [r3, #6]
    b3e0:	79db      	ldrb	r3, [r3, #7]
    b3e2:	021b      	lsls	r3, r3, #8
    b3e4:	4313      	orrs	r3, r2
    b3e6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b3e8:	79bb      	ldrb	r3, [r7, #6]
    b3ea:	2b01      	cmp	r3, #1
    b3ec:	d101      	bne.n	b3f2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b3ee:	2300      	movs	r3, #0
    b3f0:	e013      	b.n	b41a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b3f2:	683b      	ldr	r3, [r7, #0]
    b3f4:	785b      	ldrb	r3, [r3, #1]
    b3f6:	2b21      	cmp	r3, #33	; 0x21
    b3f8:	d10d      	bne.n	b416 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b3fa:	89fb      	ldrh	r3, [r7, #14]
    b3fc:	2b07      	cmp	r3, #7
    b3fe:	d002      	beq.n	b406 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b400:	f04f 33ff 	mov.w	r3, #4294967295
    b404:	e009      	b.n	b41a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b406:	89fa      	ldrh	r2, [r7, #14]
    b408:	79f8      	ldrb	r0, [r7, #7]
    b40a:	2300      	movs	r3, #0
    b40c:	4905      	ldr	r1, [pc, #20]	; (b424 <cdcdf_acm_get_req+0x58>)
    b40e:	4c06      	ldr	r4, [pc, #24]	; (b428 <cdcdf_acm_get_req+0x5c>)
    b410:	47a0      	blx	r4
    b412:	4603      	mov	r3, r0
    b414:	e001      	b.n	b41a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b416:	f06f 030c 	mvn.w	r3, #12
	}
}
    b41a:	4618      	mov	r0, r3
    b41c:	3714      	adds	r7, #20
    b41e:	46bd      	mov	sp, r7
    b420:	bd90      	pop	{r4, r7, pc}
    b422:	bf00      	nop
    b424:	20000b28 	.word	0x20000b28
    b428:	0000c1ad 	.word	0x0000c1ad

0000b42c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b42c:	b580      	push	{r7, lr}
    b42e:	b082      	sub	sp, #8
    b430:	af00      	add	r7, sp, #0
    b432:	4603      	mov	r3, r0
    b434:	6039      	str	r1, [r7, #0]
    b436:	71fb      	strb	r3, [r7, #7]
    b438:	4613      	mov	r3, r2
    b43a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b43c:	683b      	ldr	r3, [r7, #0]
    b43e:	781b      	ldrb	r3, [r3, #0]
    b440:	095b      	lsrs	r3, r3, #5
    b442:	b2db      	uxtb	r3, r3
    b444:	f003 0303 	and.w	r3, r3, #3
    b448:	2b01      	cmp	r3, #1
    b44a:	d002      	beq.n	b452 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b44c:	f06f 0309 	mvn.w	r3, #9
    b450:	e026      	b.n	b4a0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b452:	683b      	ldr	r3, [r7, #0]
    b454:	889b      	ldrh	r3, [r3, #4]
    b456:	b29a      	uxth	r2, r3
    b458:	4b13      	ldr	r3, [pc, #76]	; (b4a8 <cdcdf_acm_req+0x7c>)
    b45a:	781b      	ldrb	r3, [r3, #0]
    b45c:	b29b      	uxth	r3, r3
    b45e:	429a      	cmp	r2, r3
    b460:	d007      	beq.n	b472 <cdcdf_acm_req+0x46>
    b462:	683b      	ldr	r3, [r7, #0]
    b464:	889b      	ldrh	r3, [r3, #4]
    b466:	b29a      	uxth	r2, r3
    b468:	4b0f      	ldr	r3, [pc, #60]	; (b4a8 <cdcdf_acm_req+0x7c>)
    b46a:	785b      	ldrb	r3, [r3, #1]
    b46c:	b29b      	uxth	r3, r3
    b46e:	429a      	cmp	r2, r3
    b470:	d114      	bne.n	b49c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b472:	683b      	ldr	r3, [r7, #0]
    b474:	781b      	ldrb	r3, [r3, #0]
    b476:	b25b      	sxtb	r3, r3
    b478:	2b00      	cmp	r3, #0
    b47a:	da07      	bge.n	b48c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b47c:	79ba      	ldrb	r2, [r7, #6]
    b47e:	79fb      	ldrb	r3, [r7, #7]
    b480:	6839      	ldr	r1, [r7, #0]
    b482:	4618      	mov	r0, r3
    b484:	4b09      	ldr	r3, [pc, #36]	; (b4ac <cdcdf_acm_req+0x80>)
    b486:	4798      	blx	r3
    b488:	4603      	mov	r3, r0
    b48a:	e009      	b.n	b4a0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b48c:	79ba      	ldrb	r2, [r7, #6]
    b48e:	79fb      	ldrb	r3, [r7, #7]
    b490:	6839      	ldr	r1, [r7, #0]
    b492:	4618      	mov	r0, r3
    b494:	4b06      	ldr	r3, [pc, #24]	; (b4b0 <cdcdf_acm_req+0x84>)
    b496:	4798      	blx	r3
    b498:	4603      	mov	r3, r0
    b49a:	e001      	b.n	b4a0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b49c:	f06f 0309 	mvn.w	r3, #9
	}
}
    b4a0:	4618      	mov	r0, r3
    b4a2:	3708      	adds	r7, #8
    b4a4:	46bd      	mov	sp, r7
    b4a6:	bd80      	pop	{r7, pc}
    b4a8:	20000b20 	.word	0x20000b20
    b4ac:	0000b3cd 	.word	0x0000b3cd
    b4b0:	0000b2ed 	.word	0x0000b2ed

0000b4b4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b4b4:	b580      	push	{r7, lr}
    b4b6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b4b8:	4b0b      	ldr	r3, [pc, #44]	; (b4e8 <cdcdf_acm_init+0x34>)
    b4ba:	4798      	blx	r3
    b4bc:	4603      	mov	r3, r0
    b4be:	2b01      	cmp	r3, #1
    b4c0:	d902      	bls.n	b4c8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b4c2:	f06f 0310 	mvn.w	r3, #16
    b4c6:	e00d      	b.n	b4e4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b4c8:	4b08      	ldr	r3, [pc, #32]	; (b4ec <cdcdf_acm_init+0x38>)
    b4ca:	4a09      	ldr	r2, [pc, #36]	; (b4f0 <cdcdf_acm_init+0x3c>)
    b4cc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b4ce:	4b07      	ldr	r3, [pc, #28]	; (b4ec <cdcdf_acm_init+0x38>)
    b4d0:	4a08      	ldr	r2, [pc, #32]	; (b4f4 <cdcdf_acm_init+0x40>)
    b4d2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b4d4:	4805      	ldr	r0, [pc, #20]	; (b4ec <cdcdf_acm_init+0x38>)
    b4d6:	4b08      	ldr	r3, [pc, #32]	; (b4f8 <cdcdf_acm_init+0x44>)
    b4d8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b4da:	4908      	ldr	r1, [pc, #32]	; (b4fc <cdcdf_acm_init+0x48>)
    b4dc:	2001      	movs	r0, #1
    b4de:	4b08      	ldr	r3, [pc, #32]	; (b500 <cdcdf_acm_init+0x4c>)
    b4e0:	4798      	blx	r3
	return ERR_NONE;
    b4e2:	2300      	movs	r3, #0
}
    b4e4:	4618      	mov	r0, r3
    b4e6:	bd80      	pop	{r7, pc}
    b4e8:	0000c351 	.word	0x0000c351
    b4ec:	20000b14 	.word	0x20000b14
    b4f0:	0000b29d 	.word	0x0000b29d
    b4f4:	20000b20 	.word	0x20000b20
    b4f8:	0000c2b9 	.word	0x0000c2b9
    b4fc:	200000f4 	.word	0x200000f4
    b500:	0000c1e9 	.word	0x0000c1e9

0000b504 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    b504:	b590      	push	{r4, r7, lr}
    b506:	b083      	sub	sp, #12
    b508:	af00      	add	r7, sp, #0
    b50a:	6078      	str	r0, [r7, #4]
    b50c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    b50e:	4b0b      	ldr	r3, [pc, #44]	; (b53c <cdcdf_acm_read+0x38>)
    b510:	4798      	blx	r3
    b512:	4603      	mov	r3, r0
    b514:	f083 0301 	eor.w	r3, r3, #1
    b518:	b2db      	uxtb	r3, r3
    b51a:	2b00      	cmp	r3, #0
    b51c:	d002      	beq.n	b524 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    b51e:	f06f 0310 	mvn.w	r3, #16
    b522:	e007      	b.n	b534 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b524:	4b06      	ldr	r3, [pc, #24]	; (b540 <cdcdf_acm_read+0x3c>)
    b526:	7918      	ldrb	r0, [r3, #4]
    b528:	2300      	movs	r3, #0
    b52a:	683a      	ldr	r2, [r7, #0]
    b52c:	6879      	ldr	r1, [r7, #4]
    b52e:	4c05      	ldr	r4, [pc, #20]	; (b544 <cdcdf_acm_read+0x40>)
    b530:	47a0      	blx	r4
    b532:	4603      	mov	r3, r0
}
    b534:	4618      	mov	r0, r3
    b536:	370c      	adds	r7, #12
    b538:	46bd      	mov	sp, r7
    b53a:	bd90      	pop	{r4, r7, pc}
    b53c:	0000b629 	.word	0x0000b629
    b540:	20000b20 	.word	0x20000b20
    b544:	0000c1ad 	.word	0x0000c1ad

0000b548 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    b548:	b590      	push	{r4, r7, lr}
    b54a:	b083      	sub	sp, #12
    b54c:	af00      	add	r7, sp, #0
    b54e:	6078      	str	r0, [r7, #4]
    b550:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    b552:	4b0b      	ldr	r3, [pc, #44]	; (b580 <cdcdf_acm_write+0x38>)
    b554:	4798      	blx	r3
    b556:	4603      	mov	r3, r0
    b558:	f083 0301 	eor.w	r3, r3, #1
    b55c:	b2db      	uxtb	r3, r3
    b55e:	2b00      	cmp	r3, #0
    b560:	d002      	beq.n	b568 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    b562:	f06f 0310 	mvn.w	r3, #16
    b566:	e007      	b.n	b578 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b568:	4b06      	ldr	r3, [pc, #24]	; (b584 <cdcdf_acm_write+0x3c>)
    b56a:	78d8      	ldrb	r0, [r3, #3]
    b56c:	2301      	movs	r3, #1
    b56e:	683a      	ldr	r2, [r7, #0]
    b570:	6879      	ldr	r1, [r7, #4]
    b572:	4c05      	ldr	r4, [pc, #20]	; (b588 <cdcdf_acm_write+0x40>)
    b574:	47a0      	blx	r4
    b576:	4603      	mov	r3, r0
}
    b578:	4618      	mov	r0, r3
    b57a:	370c      	adds	r7, #12
    b57c:	46bd      	mov	sp, r7
    b57e:	bd90      	pop	{r4, r7, pc}
    b580:	0000b629 	.word	0x0000b629
    b584:	20000b20 	.word	0x20000b20
    b588:	0000c1ad 	.word	0x0000c1ad

0000b58c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    b58c:	b580      	push	{r7, lr}
    b58e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    b590:	4b05      	ldr	r3, [pc, #20]	; (b5a8 <cdcdf_acm_stop_xfer+0x1c>)
    b592:	78db      	ldrb	r3, [r3, #3]
    b594:	4618      	mov	r0, r3
    b596:	4b05      	ldr	r3, [pc, #20]	; (b5ac <cdcdf_acm_stop_xfer+0x20>)
    b598:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    b59a:	4b03      	ldr	r3, [pc, #12]	; (b5a8 <cdcdf_acm_stop_xfer+0x1c>)
    b59c:	791b      	ldrb	r3, [r3, #4]
    b59e:	4618      	mov	r0, r3
    b5a0:	4b02      	ldr	r3, [pc, #8]	; (b5ac <cdcdf_acm_stop_xfer+0x20>)
    b5a2:	4798      	blx	r3
}
    b5a4:	bf00      	nop
    b5a6:	bd80      	pop	{r7, pc}
    b5a8:	20000b20 	.word	0x20000b20
    b5ac:	00002f21 	.word	0x00002f21

0000b5b0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    b5b0:	b580      	push	{r7, lr}
    b5b2:	b082      	sub	sp, #8
    b5b4:	af00      	add	r7, sp, #0
    b5b6:	4603      	mov	r3, r0
    b5b8:	6039      	str	r1, [r7, #0]
    b5ba:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    b5bc:	79fb      	ldrb	r3, [r7, #7]
    b5be:	2b03      	cmp	r3, #3
    b5c0:	d822      	bhi.n	b608 <cdcdf_acm_register_callback+0x58>
    b5c2:	a201      	add	r2, pc, #4	; (adr r2, b5c8 <cdcdf_acm_register_callback+0x18>)
    b5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b5c8:	0000b5d9 	.word	0x0000b5d9
    b5cc:	0000b5e9 	.word	0x0000b5e9
    b5d0:	0000b5f9 	.word	0x0000b5f9
    b5d4:	0000b601 	.word	0x0000b601
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    b5d8:	4b0f      	ldr	r3, [pc, #60]	; (b618 <cdcdf_acm_register_callback+0x68>)
    b5da:	791b      	ldrb	r3, [r3, #4]
    b5dc:	683a      	ldr	r2, [r7, #0]
    b5de:	2102      	movs	r1, #2
    b5e0:	4618      	mov	r0, r3
    b5e2:	4b0e      	ldr	r3, [pc, #56]	; (b61c <cdcdf_acm_register_callback+0x6c>)
    b5e4:	4798      	blx	r3
		break;
    b5e6:	e012      	b.n	b60e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    b5e8:	4b0b      	ldr	r3, [pc, #44]	; (b618 <cdcdf_acm_register_callback+0x68>)
    b5ea:	78db      	ldrb	r3, [r3, #3]
    b5ec:	683a      	ldr	r2, [r7, #0]
    b5ee:	2102      	movs	r1, #2
    b5f0:	4618      	mov	r0, r3
    b5f2:	4b0a      	ldr	r3, [pc, #40]	; (b61c <cdcdf_acm_register_callback+0x6c>)
    b5f4:	4798      	blx	r3
		break;
    b5f6:	e00a      	b.n	b60e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    b5f8:	4a09      	ldr	r2, [pc, #36]	; (b620 <cdcdf_acm_register_callback+0x70>)
    b5fa:	683b      	ldr	r3, [r7, #0]
    b5fc:	6013      	str	r3, [r2, #0]
		break;
    b5fe:	e006      	b.n	b60e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    b600:	4a08      	ldr	r2, [pc, #32]	; (b624 <cdcdf_acm_register_callback+0x74>)
    b602:	683b      	ldr	r3, [r7, #0]
    b604:	6013      	str	r3, [r2, #0]
		break;
    b606:	e002      	b.n	b60e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    b608:	f06f 030c 	mvn.w	r3, #12
    b60c:	e000      	b.n	b610 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    b60e:	2300      	movs	r3, #0
}
    b610:	4618      	mov	r0, r3
    b612:	3708      	adds	r7, #8
    b614:	46bd      	mov	sp, r7
    b616:	bd80      	pop	{r7, pc}
    b618:	20000b20 	.word	0x20000b20
    b61c:	0000304d 	.word	0x0000304d
    b620:	20000b34 	.word	0x20000b34
    b624:	20000b30 	.word	0x20000b30

0000b628 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    b628:	b480      	push	{r7}
    b62a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    b62c:	4b03      	ldr	r3, [pc, #12]	; (b63c <cdcdf_acm_is_enabled+0x14>)
    b62e:	795b      	ldrb	r3, [r3, #5]
}
    b630:	4618      	mov	r0, r3
    b632:	46bd      	mov	sp, r7
    b634:	f85d 7b04 	ldr.w	r7, [sp], #4
    b638:	4770      	bx	lr
    b63a:	bf00      	nop
    b63c:	20000b20 	.word	0x20000b20

0000b640 <usb_get_u16>:
{
    b640:	b480      	push	{r7}
    b642:	b083      	sub	sp, #12
    b644:	af00      	add	r7, sp, #0
    b646:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b648:	687b      	ldr	r3, [r7, #4]
    b64a:	781b      	ldrb	r3, [r3, #0]
    b64c:	b29a      	uxth	r2, r3
    b64e:	687b      	ldr	r3, [r7, #4]
    b650:	3301      	adds	r3, #1
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	b29b      	uxth	r3, r3
    b656:	021b      	lsls	r3, r3, #8
    b658:	b29b      	uxth	r3, r3
    b65a:	4413      	add	r3, r2
    b65c:	b29b      	uxth	r3, r3
}
    b65e:	4618      	mov	r0, r3
    b660:	370c      	adds	r7, #12
    b662:	46bd      	mov	sp, r7
    b664:	f85d 7b04 	ldr.w	r7, [sp], #4
    b668:	4770      	bx	lr

0000b66a <usb_desc_len>:
{
    b66a:	b480      	push	{r7}
    b66c:	b083      	sub	sp, #12
    b66e:	af00      	add	r7, sp, #0
    b670:	6078      	str	r0, [r7, #4]
	return desc[0];
    b672:	687b      	ldr	r3, [r7, #4]
    b674:	781b      	ldrb	r3, [r3, #0]
}
    b676:	4618      	mov	r0, r3
    b678:	370c      	adds	r7, #12
    b67a:	46bd      	mov	sp, r7
    b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b680:	4770      	bx	lr
	...

0000b684 <usb_desc_next>:
{
    b684:	b580      	push	{r7, lr}
    b686:	b082      	sub	sp, #8
    b688:	af00      	add	r7, sp, #0
    b68a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b68c:	6878      	ldr	r0, [r7, #4]
    b68e:	4b05      	ldr	r3, [pc, #20]	; (b6a4 <usb_desc_next+0x20>)
    b690:	4798      	blx	r3
    b692:	4603      	mov	r3, r0
    b694:	461a      	mov	r2, r3
    b696:	687b      	ldr	r3, [r7, #4]
    b698:	4413      	add	r3, r2
}
    b69a:	4618      	mov	r0, r3
    b69c:	3708      	adds	r7, #8
    b69e:	46bd      	mov	sp, r7
    b6a0:	bd80      	pop	{r7, pc}
    b6a2:	bf00      	nop
    b6a4:	0000b66b 	.word	0x0000b66b

0000b6a8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b6a8:	b580      	push	{r7, lr}
    b6aa:	b082      	sub	sp, #8
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b6b0:	687b      	ldr	r3, [r7, #4]
    b6b2:	3302      	adds	r3, #2
    b6b4:	4618      	mov	r0, r3
    b6b6:	4b03      	ldr	r3, [pc, #12]	; (b6c4 <usb_cfg_desc_total_len+0x1c>)
    b6b8:	4798      	blx	r3
    b6ba:	4603      	mov	r3, r0
}
    b6bc:	4618      	mov	r0, r3
    b6be:	3708      	adds	r7, #8
    b6c0:	46bd      	mov	sp, r7
    b6c2:	bd80      	pop	{r7, pc}
    b6c4:	0000b641 	.word	0x0000b641

0000b6c8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b6c8:	b590      	push	{r4, r7, lr}
    b6ca:	b085      	sub	sp, #20
    b6cc:	af00      	add	r7, sp, #0
    b6ce:	4603      	mov	r3, r0
    b6d0:	6039      	str	r1, [r7, #0]
    b6d2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b6d4:	2300      	movs	r3, #0
    b6d6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b6d8:	683b      	ldr	r3, [r7, #0]
    b6da:	799a      	ldrb	r2, [r3, #6]
    b6dc:	79db      	ldrb	r3, [r3, #7]
    b6de:	021b      	lsls	r3, r3, #8
    b6e0:	4313      	orrs	r3, r2
    b6e2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b6e4:	897b      	ldrh	r3, [r7, #10]
    b6e6:	2b12      	cmp	r3, #18
    b6e8:	d901      	bls.n	b6ee <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b6ea:	2312      	movs	r3, #18
    b6ec:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b6ee:	68fb      	ldr	r3, [r7, #12]
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d10a      	bne.n	b70a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b6f4:	4b0f      	ldr	r3, [pc, #60]	; (b734 <usbdc_get_dev_desc+0x6c>)
    b6f6:	681b      	ldr	r3, [r3, #0]
    b6f8:	6818      	ldr	r0, [r3, #0]
    b6fa:	4b0e      	ldr	r3, [pc, #56]	; (b734 <usbdc_get_dev_desc+0x6c>)
    b6fc:	681b      	ldr	r3, [r3, #0]
    b6fe:	685b      	ldr	r3, [r3, #4]
    b700:	2201      	movs	r2, #1
    b702:	4619      	mov	r1, r3
    b704:	4b0c      	ldr	r3, [pc, #48]	; (b738 <usbdc_get_dev_desc+0x70>)
    b706:	4798      	blx	r3
    b708:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b70a:	68fb      	ldr	r3, [r7, #12]
    b70c:	2b00      	cmp	r3, #0
    b70e:	d101      	bne.n	b714 <usbdc_get_dev_desc+0x4c>
		return false;
    b710:	2300      	movs	r3, #0
    b712:	e00b      	b.n	b72c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b714:	897a      	ldrh	r2, [r7, #10]
    b716:	79f8      	ldrb	r0, [r7, #7]
    b718:	2300      	movs	r3, #0
    b71a:	68f9      	ldr	r1, [r7, #12]
    b71c:	4c07      	ldr	r4, [pc, #28]	; (b73c <usbdc_get_dev_desc+0x74>)
    b71e:	47a0      	blx	r4
    b720:	4603      	mov	r3, r0
    b722:	2b00      	cmp	r3, #0
    b724:	d001      	beq.n	b72a <usbdc_get_dev_desc+0x62>
		return false;
    b726:	2300      	movs	r3, #0
    b728:	e000      	b.n	b72c <usbdc_get_dev_desc+0x64>
	}
	return true;
    b72a:	2301      	movs	r3, #1
}
    b72c:	4618      	mov	r0, r3
    b72e:	3714      	adds	r7, #20
    b730:	46bd      	mov	sp, r7
    b732:	bd90      	pop	{r4, r7, pc}
    b734:	20000b38 	.word	0x20000b38
    b738:	0000c43d 	.word	0x0000c43d
    b73c:	0000c1ad 	.word	0x0000c1ad

0000b740 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b740:	b590      	push	{r4, r7, lr}
    b742:	b087      	sub	sp, #28
    b744:	af00      	add	r7, sp, #0
    b746:	4603      	mov	r3, r0
    b748:	6039      	str	r1, [r7, #0]
    b74a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b74c:	2300      	movs	r3, #0
    b74e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b750:	683b      	ldr	r3, [r7, #0]
    b752:	799a      	ldrb	r2, [r3, #6]
    b754:	79db      	ldrb	r3, [r3, #7]
    b756:	021b      	lsls	r3, r3, #8
    b758:	4313      	orrs	r3, r2
    b75a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b75c:	683b      	ldr	r3, [r7, #0]
    b75e:	885b      	ldrh	r3, [r3, #2]
    b760:	b29b      	uxth	r3, r3
    b762:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b764:	8a7a      	ldrh	r2, [r7, #18]
    b766:	4b1e      	ldr	r3, [pc, #120]	; (b7e0 <usbdc_get_cfg_desc+0xa0>)
    b768:	7f1b      	ldrb	r3, [r3, #28]
    b76a:	3b01      	subs	r3, #1
    b76c:	4013      	ands	r3, r2
    b76e:	2b00      	cmp	r3, #0
    b770:	bf0c      	ite	eq
    b772:	2301      	moveq	r3, #1
    b774:	2300      	movne	r3, #0
    b776:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b778:	697b      	ldr	r3, [r7, #20]
    b77a:	2b00      	cmp	r3, #0
    b77c:	d10c      	bne.n	b798 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b77e:	4b18      	ldr	r3, [pc, #96]	; (b7e0 <usbdc_get_cfg_desc+0xa0>)
    b780:	681b      	ldr	r3, [r3, #0]
    b782:	6818      	ldr	r0, [r3, #0]
    b784:	4b16      	ldr	r3, [pc, #88]	; (b7e0 <usbdc_get_cfg_desc+0xa0>)
    b786:	681b      	ldr	r3, [r3, #0]
    b788:	6859      	ldr	r1, [r3, #4]
    b78a:	7c3b      	ldrb	r3, [r7, #16]
    b78c:	3301      	adds	r3, #1
    b78e:	b2db      	uxtb	r3, r3
    b790:	461a      	mov	r2, r3
    b792:	4b14      	ldr	r3, [pc, #80]	; (b7e4 <usbdc_get_cfg_desc+0xa4>)
    b794:	4798      	blx	r3
    b796:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b798:	697b      	ldr	r3, [r7, #20]
    b79a:	2b00      	cmp	r3, #0
    b79c:	d101      	bne.n	b7a2 <usbdc_get_cfg_desc+0x62>
		return false;
    b79e:	2300      	movs	r3, #0
    b7a0:	e019      	b.n	b7d6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b7a2:	6978      	ldr	r0, [r7, #20]
    b7a4:	4b10      	ldr	r3, [pc, #64]	; (b7e8 <usbdc_get_cfg_desc+0xa8>)
    b7a6:	4798      	blx	r3
    b7a8:	4603      	mov	r3, r0
    b7aa:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b7ac:	8a7a      	ldrh	r2, [r7, #18]
    b7ae:	89fb      	ldrh	r3, [r7, #14]
    b7b0:	429a      	cmp	r2, r3
    b7b2:	d802      	bhi.n	b7ba <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b7b4:	2300      	movs	r3, #0
    b7b6:	747b      	strb	r3, [r7, #17]
    b7b8:	e001      	b.n	b7be <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b7ba:	89fb      	ldrh	r3, [r7, #14]
    b7bc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b7be:	8a7a      	ldrh	r2, [r7, #18]
    b7c0:	7c7b      	ldrb	r3, [r7, #17]
    b7c2:	79f8      	ldrb	r0, [r7, #7]
    b7c4:	6979      	ldr	r1, [r7, #20]
    b7c6:	4c09      	ldr	r4, [pc, #36]	; (b7ec <usbdc_get_cfg_desc+0xac>)
    b7c8:	47a0      	blx	r4
    b7ca:	4603      	mov	r3, r0
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d001      	beq.n	b7d4 <usbdc_get_cfg_desc+0x94>
		return false;
    b7d0:	2300      	movs	r3, #0
    b7d2:	e000      	b.n	b7d6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b7d4:	2301      	movs	r3, #1
}
    b7d6:	4618      	mov	r0, r3
    b7d8:	371c      	adds	r7, #28
    b7da:	46bd      	mov	sp, r7
    b7dc:	bd90      	pop	{r4, r7, pc}
    b7de:	bf00      	nop
    b7e0:	20000b38 	.word	0x20000b38
    b7e4:	0000c4fd 	.word	0x0000c4fd
    b7e8:	0000b6a9 	.word	0x0000b6a9
    b7ec:	0000c1ad 	.word	0x0000c1ad

0000b7f0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b7f0:	b590      	push	{r4, r7, lr}
    b7f2:	b085      	sub	sp, #20
    b7f4:	af00      	add	r7, sp, #0
    b7f6:	4603      	mov	r3, r0
    b7f8:	6039      	str	r1, [r7, #0]
    b7fa:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b7fc:	683b      	ldr	r3, [r7, #0]
    b7fe:	799a      	ldrb	r2, [r3, #6]
    b800:	79db      	ldrb	r3, [r3, #7]
    b802:	021b      	lsls	r3, r3, #8
    b804:	4313      	orrs	r3, r2
    b806:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b808:	683b      	ldr	r3, [r7, #0]
    b80a:	885b      	ldrh	r3, [r3, #2]
    b80c:	b29b      	uxth	r3, r3
    b80e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b810:	89fa      	ldrh	r2, [r7, #14]
    b812:	4b1a      	ldr	r3, [pc, #104]	; (b87c <usbdc_get_str_desc+0x8c>)
    b814:	7f1b      	ldrb	r3, [r3, #28]
    b816:	3b01      	subs	r3, #1
    b818:	4013      	ands	r3, r2
    b81a:	2b00      	cmp	r3, #0
    b81c:	bf0c      	ite	eq
    b81e:	2301      	moveq	r3, #1
    b820:	2300      	movne	r3, #0
    b822:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b824:	4b15      	ldr	r3, [pc, #84]	; (b87c <usbdc_get_str_desc+0x8c>)
    b826:	681b      	ldr	r3, [r3, #0]
    b828:	6818      	ldr	r0, [r3, #0]
    b82a:	4b14      	ldr	r3, [pc, #80]	; (b87c <usbdc_get_str_desc+0x8c>)
    b82c:	681b      	ldr	r3, [r3, #0]
    b82e:	685b      	ldr	r3, [r3, #4]
    b830:	7b3a      	ldrb	r2, [r7, #12]
    b832:	4619      	mov	r1, r3
    b834:	4b12      	ldr	r3, [pc, #72]	; (b880 <usbdc_get_str_desc+0x90>)
    b836:	4798      	blx	r3
    b838:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b83a:	68bb      	ldr	r3, [r7, #8]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d101      	bne.n	b844 <usbdc_get_str_desc+0x54>
		return false;
    b840:	2300      	movs	r3, #0
    b842:	e017      	b.n	b874 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b844:	68bb      	ldr	r3, [r7, #8]
    b846:	781b      	ldrb	r3, [r3, #0]
    b848:	b29b      	uxth	r3, r3
    b84a:	89fa      	ldrh	r2, [r7, #14]
    b84c:	429a      	cmp	r2, r3
    b84e:	d802      	bhi.n	b856 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b850:	2300      	movs	r3, #0
    b852:	737b      	strb	r3, [r7, #13]
    b854:	e002      	b.n	b85c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b856:	68bb      	ldr	r3, [r7, #8]
    b858:	781b      	ldrb	r3, [r3, #0]
    b85a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b85c:	89fa      	ldrh	r2, [r7, #14]
    b85e:	7b7b      	ldrb	r3, [r7, #13]
    b860:	79f8      	ldrb	r0, [r7, #7]
    b862:	68b9      	ldr	r1, [r7, #8]
    b864:	4c07      	ldr	r4, [pc, #28]	; (b884 <usbdc_get_str_desc+0x94>)
    b866:	47a0      	blx	r4
    b868:	4603      	mov	r3, r0
    b86a:	2b00      	cmp	r3, #0
    b86c:	d001      	beq.n	b872 <usbdc_get_str_desc+0x82>
		return false;
    b86e:	2300      	movs	r3, #0
    b870:	e000      	b.n	b874 <usbdc_get_str_desc+0x84>
	}
	return true;
    b872:	2301      	movs	r3, #1
}
    b874:	4618      	mov	r0, r3
    b876:	3714      	adds	r7, #20
    b878:	46bd      	mov	sp, r7
    b87a:	bd90      	pop	{r4, r7, pc}
    b87c:	20000b38 	.word	0x20000b38
    b880:	0000c575 	.word	0x0000c575
    b884:	0000c1ad 	.word	0x0000c1ad

0000b888 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b888:	b580      	push	{r7, lr}
    b88a:	b084      	sub	sp, #16
    b88c:	af00      	add	r7, sp, #0
    b88e:	4603      	mov	r3, r0
    b890:	6039      	str	r1, [r7, #0]
    b892:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b894:	683b      	ldr	r3, [r7, #0]
    b896:	885b      	ldrh	r3, [r3, #2]
    b898:	b29b      	uxth	r3, r3
    b89a:	0a1b      	lsrs	r3, r3, #8
    b89c:	b29b      	uxth	r3, r3
    b89e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b8a0:	7bfb      	ldrb	r3, [r7, #15]
    b8a2:	2b02      	cmp	r3, #2
    b8a4:	d00d      	beq.n	b8c2 <usbdc_get_desc_req+0x3a>
    b8a6:	2b03      	cmp	r3, #3
    b8a8:	d012      	beq.n	b8d0 <usbdc_get_desc_req+0x48>
    b8aa:	2b01      	cmp	r3, #1
    b8ac:	d002      	beq.n	b8b4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b8ae:	bf00      	nop
	}
	return false;
    b8b0:	2300      	movs	r3, #0
    b8b2:	e013      	b.n	b8dc <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b8b4:	79fb      	ldrb	r3, [r7, #7]
    b8b6:	6839      	ldr	r1, [r7, #0]
    b8b8:	4618      	mov	r0, r3
    b8ba:	4b0a      	ldr	r3, [pc, #40]	; (b8e4 <usbdc_get_desc_req+0x5c>)
    b8bc:	4798      	blx	r3
    b8be:	4603      	mov	r3, r0
    b8c0:	e00c      	b.n	b8dc <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b8c2:	79fb      	ldrb	r3, [r7, #7]
    b8c4:	6839      	ldr	r1, [r7, #0]
    b8c6:	4618      	mov	r0, r3
    b8c8:	4b07      	ldr	r3, [pc, #28]	; (b8e8 <usbdc_get_desc_req+0x60>)
    b8ca:	4798      	blx	r3
    b8cc:	4603      	mov	r3, r0
    b8ce:	e005      	b.n	b8dc <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b8d0:	79fb      	ldrb	r3, [r7, #7]
    b8d2:	6839      	ldr	r1, [r7, #0]
    b8d4:	4618      	mov	r0, r3
    b8d6:	4b05      	ldr	r3, [pc, #20]	; (b8ec <usbdc_get_desc_req+0x64>)
    b8d8:	4798      	blx	r3
    b8da:	4603      	mov	r3, r0
}
    b8dc:	4618      	mov	r0, r3
    b8de:	3710      	adds	r7, #16
    b8e0:	46bd      	mov	sp, r7
    b8e2:	bd80      	pop	{r7, pc}
    b8e4:	0000b6c9 	.word	0x0000b6c9
    b8e8:	0000b741 	.word	0x0000b741
    b8ec:	0000b7f1 	.word	0x0000b7f1

0000b8f0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    b8f0:	b590      	push	{r4, r7, lr}
    b8f2:	b085      	sub	sp, #20
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	4603      	mov	r3, r0
    b8f8:	6039      	str	r1, [r7, #0]
    b8fa:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b8fc:	683b      	ldr	r3, [r7, #0]
    b8fe:	781b      	ldrb	r3, [r3, #0]
    b900:	f003 031f 	and.w	r3, r3, #31
    b904:	2b00      	cmp	r3, #0
    b906:	db1b      	blt.n	b940 <usbdc_get_status_req+0x50>
    b908:	2b01      	cmp	r3, #1
    b90a:	dd02      	ble.n	b912 <usbdc_get_status_req+0x22>
    b90c:	2b02      	cmp	r3, #2
    b90e:	d003      	beq.n	b918 <usbdc_get_status_req+0x28>
    b910:	e016      	b.n	b940 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    b912:	2300      	movs	r3, #0
    b914:	60fb      	str	r3, [r7, #12]
		break;
    b916:	e015      	b.n	b944 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b918:	683b      	ldr	r3, [r7, #0]
    b91a:	889b      	ldrh	r3, [r3, #4]
    b91c:	b29b      	uxth	r3, r3
    b91e:	b2db      	uxtb	r3, r3
    b920:	2102      	movs	r1, #2
    b922:	4618      	mov	r0, r3
    b924:	4b0f      	ldr	r3, [pc, #60]	; (b964 <usbdc_get_status_req+0x74>)
    b926:	4798      	blx	r3
    b928:	4603      	mov	r3, r0
    b92a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    b92c:	68fb      	ldr	r3, [r7, #12]
    b92e:	2b00      	cmp	r3, #0
    b930:	da01      	bge.n	b936 <usbdc_get_status_req+0x46>
			return false;
    b932:	2300      	movs	r3, #0
    b934:	e012      	b.n	b95c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    b936:	68fb      	ldr	r3, [r7, #12]
    b938:	f003 0301 	and.w	r3, r3, #1
    b93c:	60fb      	str	r3, [r7, #12]
		break;
    b93e:	e001      	b.n	b944 <usbdc_get_status_req+0x54>
	default:
		return false;
    b940:	2300      	movs	r3, #0
    b942:	e00b      	b.n	b95c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    b944:	4b08      	ldr	r3, [pc, #32]	; (b968 <usbdc_get_status_req+0x78>)
    b946:	695b      	ldr	r3, [r3, #20]
    b948:	89ba      	ldrh	r2, [r7, #12]
    b94a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b94c:	4b06      	ldr	r3, [pc, #24]	; (b968 <usbdc_get_status_req+0x78>)
    b94e:	6959      	ldr	r1, [r3, #20]
    b950:	79f8      	ldrb	r0, [r7, #7]
    b952:	2300      	movs	r3, #0
    b954:	2202      	movs	r2, #2
    b956:	4c05      	ldr	r4, [pc, #20]	; (b96c <usbdc_get_status_req+0x7c>)
    b958:	47a0      	blx	r4
	return true;
    b95a:	2301      	movs	r3, #1
}
    b95c:	4618      	mov	r0, r3
    b95e:	3714      	adds	r7, #20
    b960:	46bd      	mov	sp, r7
    b962:	bd90      	pop	{r4, r7, pc}
    b964:	00002ff9 	.word	0x00002ff9
    b968:	20000b38 	.word	0x20000b38
    b96c:	0000c1ad 	.word	0x0000c1ad

0000b970 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    b970:	b590      	push	{r4, r7, lr}
    b972:	b085      	sub	sp, #20
    b974:	af00      	add	r7, sp, #0
    b976:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b978:	4b1f      	ldr	r3, [pc, #124]	; (b9f8 <usbdc_get_interface+0x88>)
    b97a:	691b      	ldr	r3, [r3, #16]
    b97c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b97e:	4b1e      	ldr	r3, [pc, #120]	; (b9f8 <usbdc_get_interface+0x88>)
    b980:	7f5b      	ldrb	r3, [r3, #29]
    b982:	461a      	mov	r2, r3
    b984:	687b      	ldr	r3, [r7, #4]
    b986:	889b      	ldrh	r3, [r3, #4]
    b988:	b29b      	uxth	r3, r3
    b98a:	fa42 f303 	asr.w	r3, r2, r3
    b98e:	f003 0301 	and.w	r3, r3, #1
    b992:	2b00      	cmp	r3, #0
    b994:	d128      	bne.n	b9e8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    b996:	4b18      	ldr	r3, [pc, #96]	; (b9f8 <usbdc_get_interface+0x88>)
    b998:	695b      	ldr	r3, [r3, #20]
    b99a:	2200      	movs	r2, #0
    b99c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b99e:	4b16      	ldr	r3, [pc, #88]	; (b9f8 <usbdc_get_interface+0x88>)
    b9a0:	6959      	ldr	r1, [r3, #20]
    b9a2:	2300      	movs	r3, #0
    b9a4:	2201      	movs	r2, #1
    b9a6:	2000      	movs	r0, #0
    b9a8:	4c14      	ldr	r4, [pc, #80]	; (b9fc <usbdc_get_interface+0x8c>)
    b9aa:	47a0      	blx	r4
		return true;
    b9ac:	2301      	movs	r3, #1
    b9ae:	e01f      	b.n	b9f0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b9b0:	68fb      	ldr	r3, [r7, #12]
    b9b2:	685b      	ldr	r3, [r3, #4]
    b9b4:	687a      	ldr	r2, [r7, #4]
    b9b6:	2102      	movs	r1, #2
    b9b8:	68f8      	ldr	r0, [r7, #12]
    b9ba:	4798      	blx	r3
    b9bc:	60b8      	str	r0, [r7, #8]
    b9be:	68bb      	ldr	r3, [r7, #8]
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	da03      	bge.n	b9cc <usbdc_get_interface+0x5c>
			func = func->next;
    b9c4:	68fb      	ldr	r3, [r7, #12]
    b9c6:	681b      	ldr	r3, [r3, #0]
    b9c8:	60fb      	str	r3, [r7, #12]
    b9ca:	e00d      	b.n	b9e8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b9cc:	4b0a      	ldr	r3, [pc, #40]	; (b9f8 <usbdc_get_interface+0x88>)
    b9ce:	695b      	ldr	r3, [r3, #20]
    b9d0:	68ba      	ldr	r2, [r7, #8]
    b9d2:	b2d2      	uxtb	r2, r2
    b9d4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b9d6:	4b08      	ldr	r3, [pc, #32]	; (b9f8 <usbdc_get_interface+0x88>)
    b9d8:	6959      	ldr	r1, [r3, #20]
    b9da:	2300      	movs	r3, #0
    b9dc:	2201      	movs	r2, #1
    b9de:	2000      	movs	r0, #0
    b9e0:	4c06      	ldr	r4, [pc, #24]	; (b9fc <usbdc_get_interface+0x8c>)
    b9e2:	47a0      	blx	r4
			return true;
    b9e4:	2301      	movs	r3, #1
    b9e6:	e003      	b.n	b9f0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    b9e8:	68fb      	ldr	r3, [r7, #12]
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d1e0      	bne.n	b9b0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    b9ee:	2300      	movs	r3, #0
}
    b9f0:	4618      	mov	r0, r3
    b9f2:	3714      	adds	r7, #20
    b9f4:	46bd      	mov	sp, r7
    b9f6:	bd90      	pop	{r4, r7, pc}
    b9f8:	20000b38 	.word	0x20000b38
    b9fc:	0000c1ad 	.word	0x0000c1ad

0000ba00 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ba00:	b590      	push	{r4, r7, lr}
    ba02:	b083      	sub	sp, #12
    ba04:	af00      	add	r7, sp, #0
    ba06:	4603      	mov	r3, r0
    ba08:	6039      	str	r1, [r7, #0]
    ba0a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ba0c:	683b      	ldr	r3, [r7, #0]
    ba0e:	785b      	ldrb	r3, [r3, #1]
    ba10:	2b0a      	cmp	r3, #10
    ba12:	d83a      	bhi.n	ba8a <usbdc_get_req+0x8a>
    ba14:	a201      	add	r2, pc, #4	; (adr r2, ba1c <usbdc_get_req+0x1c>)
    ba16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba1a:	bf00      	nop
    ba1c:	0000ba73 	.word	0x0000ba73
    ba20:	0000ba8b 	.word	0x0000ba8b
    ba24:	0000ba8b 	.word	0x0000ba8b
    ba28:	0000ba8b 	.word	0x0000ba8b
    ba2c:	0000ba8b 	.word	0x0000ba8b
    ba30:	0000ba8b 	.word	0x0000ba8b
    ba34:	0000ba49 	.word	0x0000ba49
    ba38:	0000ba8b 	.word	0x0000ba8b
    ba3c:	0000ba57 	.word	0x0000ba57
    ba40:	0000ba8b 	.word	0x0000ba8b
    ba44:	0000ba81 	.word	0x0000ba81
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ba48:	79fb      	ldrb	r3, [r7, #7]
    ba4a:	6839      	ldr	r1, [r7, #0]
    ba4c:	4618      	mov	r0, r3
    ba4e:	4b11      	ldr	r3, [pc, #68]	; (ba94 <usbdc_get_req+0x94>)
    ba50:	4798      	blx	r3
    ba52:	4603      	mov	r3, r0
    ba54:	e01a      	b.n	ba8c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ba56:	4b10      	ldr	r3, [pc, #64]	; (ba98 <usbdc_get_req+0x98>)
    ba58:	695b      	ldr	r3, [r3, #20]
    ba5a:	4a0f      	ldr	r2, [pc, #60]	; (ba98 <usbdc_get_req+0x98>)
    ba5c:	7ed2      	ldrb	r2, [r2, #27]
    ba5e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ba60:	4b0d      	ldr	r3, [pc, #52]	; (ba98 <usbdc_get_req+0x98>)
    ba62:	6959      	ldr	r1, [r3, #20]
    ba64:	79f8      	ldrb	r0, [r7, #7]
    ba66:	2300      	movs	r3, #0
    ba68:	2201      	movs	r2, #1
    ba6a:	4c0c      	ldr	r4, [pc, #48]	; (ba9c <usbdc_get_req+0x9c>)
    ba6c:	47a0      	blx	r4
		return true;
    ba6e:	2301      	movs	r3, #1
    ba70:	e00c      	b.n	ba8c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    ba72:	79fb      	ldrb	r3, [r7, #7]
    ba74:	6839      	ldr	r1, [r7, #0]
    ba76:	4618      	mov	r0, r3
    ba78:	4b09      	ldr	r3, [pc, #36]	; (baa0 <usbdc_get_req+0xa0>)
    ba7a:	4798      	blx	r3
    ba7c:	4603      	mov	r3, r0
    ba7e:	e005      	b.n	ba8c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    ba80:	6838      	ldr	r0, [r7, #0]
    ba82:	4b08      	ldr	r3, [pc, #32]	; (baa4 <usbdc_get_req+0xa4>)
    ba84:	4798      	blx	r3
    ba86:	4603      	mov	r3, r0
    ba88:	e000      	b.n	ba8c <usbdc_get_req+0x8c>
	default:
		return false;
    ba8a:	2300      	movs	r3, #0
	}
}
    ba8c:	4618      	mov	r0, r3
    ba8e:	370c      	adds	r7, #12
    ba90:	46bd      	mov	sp, r7
    ba92:	bd90      	pop	{r4, r7, pc}
    ba94:	0000b889 	.word	0x0000b889
    ba98:	20000b38 	.word	0x20000b38
    ba9c:	0000c1ad 	.word	0x0000c1ad
    baa0:	0000b8f1 	.word	0x0000b8f1
    baa4:	0000b971 	.word	0x0000b971

0000baa8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    baa8:	b590      	push	{r4, r7, lr}
    baaa:	b083      	sub	sp, #12
    baac:	af00      	add	r7, sp, #0
    baae:	4603      	mov	r3, r0
    bab0:	6039      	str	r1, [r7, #0]
    bab2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bab4:	683b      	ldr	r3, [r7, #0]
    bab6:	781b      	ldrb	r3, [r3, #0]
    bab8:	f003 031f 	and.w	r3, r3, #31
    babc:	2b02      	cmp	r3, #2
    babe:	d116      	bne.n	baee <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bac0:	683b      	ldr	r3, [r7, #0]
    bac2:	88db      	ldrh	r3, [r3, #6]
    bac4:	b29b      	uxth	r3, r3
    bac6:	2b00      	cmp	r3, #0
    bac8:	d001      	beq.n	bace <usbdc_clear_ftr_req+0x26>
			return false;
    baca:	2300      	movs	r3, #0
    bacc:	e010      	b.n	baf0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bace:	683b      	ldr	r3, [r7, #0]
    bad0:	889b      	ldrh	r3, [r3, #4]
    bad2:	b29b      	uxth	r3, r3
    bad4:	b2db      	uxtb	r3, r3
    bad6:	2100      	movs	r1, #0
    bad8:	4618      	mov	r0, r3
    bada:	4b07      	ldr	r3, [pc, #28]	; (baf8 <usbdc_clear_ftr_req+0x50>)
    badc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bade:	79f8      	ldrb	r0, [r7, #7]
    bae0:	2301      	movs	r3, #1
    bae2:	2200      	movs	r2, #0
    bae4:	2100      	movs	r1, #0
    bae6:	4c05      	ldr	r4, [pc, #20]	; (bafc <usbdc_clear_ftr_req+0x54>)
    bae8:	47a0      	blx	r4
		return true;
    baea:	2301      	movs	r3, #1
    baec:	e000      	b.n	baf0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    baee:	2300      	movs	r3, #0
	}
}
    baf0:	4618      	mov	r0, r3
    baf2:	370c      	adds	r7, #12
    baf4:	46bd      	mov	sp, r7
    baf6:	bd90      	pop	{r4, r7, pc}
    baf8:	00002ff9 	.word	0x00002ff9
    bafc:	0000c1ad 	.word	0x0000c1ad

0000bb00 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bb00:	b590      	push	{r4, r7, lr}
    bb02:	b083      	sub	sp, #12
    bb04:	af00      	add	r7, sp, #0
    bb06:	4603      	mov	r3, r0
    bb08:	6039      	str	r1, [r7, #0]
    bb0a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bb0c:	683b      	ldr	r3, [r7, #0]
    bb0e:	781b      	ldrb	r3, [r3, #0]
    bb10:	f003 031f 	and.w	r3, r3, #31
    bb14:	2b02      	cmp	r3, #2
    bb16:	d116      	bne.n	bb46 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bb18:	683b      	ldr	r3, [r7, #0]
    bb1a:	88db      	ldrh	r3, [r3, #6]
    bb1c:	b29b      	uxth	r3, r3
    bb1e:	2b00      	cmp	r3, #0
    bb20:	d001      	beq.n	bb26 <usbdc_set_ftr_req+0x26>
			return false;
    bb22:	2300      	movs	r3, #0
    bb24:	e010      	b.n	bb48 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bb26:	683b      	ldr	r3, [r7, #0]
    bb28:	889b      	ldrh	r3, [r3, #4]
    bb2a:	b29b      	uxth	r3, r3
    bb2c:	b2db      	uxtb	r3, r3
    bb2e:	2101      	movs	r1, #1
    bb30:	4618      	mov	r0, r3
    bb32:	4b07      	ldr	r3, [pc, #28]	; (bb50 <usbdc_set_ftr_req+0x50>)
    bb34:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bb36:	79f8      	ldrb	r0, [r7, #7]
    bb38:	2301      	movs	r3, #1
    bb3a:	2200      	movs	r2, #0
    bb3c:	2100      	movs	r1, #0
    bb3e:	4c05      	ldr	r4, [pc, #20]	; (bb54 <usbdc_set_ftr_req+0x54>)
    bb40:	47a0      	blx	r4
		return true;
    bb42:	2301      	movs	r3, #1
    bb44:	e000      	b.n	bb48 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bb46:	2300      	movs	r3, #0
	}
}
    bb48:	4618      	mov	r0, r3
    bb4a:	370c      	adds	r7, #12
    bb4c:	46bd      	mov	sp, r7
    bb4e:	bd90      	pop	{r4, r7, pc}
    bb50:	00002ff9 	.word	0x00002ff9
    bb54:	0000c1ad 	.word	0x0000c1ad

0000bb58 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bb58:	b580      	push	{r7, lr}
    bb5a:	b082      	sub	sp, #8
    bb5c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bb5e:	4b0a      	ldr	r3, [pc, #40]	; (bb88 <usbdc_unconfig+0x30>)
    bb60:	691b      	ldr	r3, [r3, #16]
    bb62:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bb64:	e008      	b.n	bb78 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bb66:	687b      	ldr	r3, [r7, #4]
    bb68:	685b      	ldr	r3, [r3, #4]
    bb6a:	2200      	movs	r2, #0
    bb6c:	2101      	movs	r1, #1
    bb6e:	6878      	ldr	r0, [r7, #4]
    bb70:	4798      	blx	r3
		func = func->next;
    bb72:	687b      	ldr	r3, [r7, #4]
    bb74:	681b      	ldr	r3, [r3, #0]
    bb76:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bb78:	687b      	ldr	r3, [r7, #4]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d1f3      	bne.n	bb66 <usbdc_unconfig+0xe>
	}
}
    bb7e:	bf00      	nop
    bb80:	3708      	adds	r7, #8
    bb82:	46bd      	mov	sp, r7
    bb84:	bd80      	pop	{r7, pc}
    bb86:	bf00      	nop
    bb88:	20000b38 	.word	0x20000b38

0000bb8c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bb8c:	b580      	push	{r7, lr}
    bb8e:	b088      	sub	sp, #32
    bb90:	af00      	add	r7, sp, #0
    bb92:	4603      	mov	r3, r0
    bb94:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bb96:	2300      	movs	r3, #0
    bb98:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bb9a:	23ff      	movs	r3, #255	; 0xff
    bb9c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bb9e:	79fb      	ldrb	r3, [r7, #7]
    bba0:	2b00      	cmp	r3, #0
    bba2:	d103      	bne.n	bbac <usbdc_set_config+0x20>
		usbdc_unconfig();
    bba4:	4b2e      	ldr	r3, [pc, #184]	; (bc60 <usbdc_set_config+0xd4>)
    bba6:	4798      	blx	r3
		return true;
    bba8:	2301      	movs	r3, #1
    bbaa:	e055      	b.n	bc58 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bbac:	69bb      	ldr	r3, [r7, #24]
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d10a      	bne.n	bbc8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bbb2:	4b2c      	ldr	r3, [pc, #176]	; (bc64 <usbdc_set_config+0xd8>)
    bbb4:	681b      	ldr	r3, [r3, #0]
    bbb6:	6818      	ldr	r0, [r3, #0]
    bbb8:	4b2a      	ldr	r3, [pc, #168]	; (bc64 <usbdc_set_config+0xd8>)
    bbba:	681b      	ldr	r3, [r3, #0]
    bbbc:	685b      	ldr	r3, [r3, #4]
    bbbe:	79fa      	ldrb	r2, [r7, #7]
    bbc0:	4619      	mov	r1, r3
    bbc2:	4b29      	ldr	r3, [pc, #164]	; (bc68 <usbdc_set_config+0xdc>)
    bbc4:	4798      	blx	r3
    bbc6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bbc8:	69bb      	ldr	r3, [r7, #24]
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d101      	bne.n	bbd2 <usbdc_set_config+0x46>
		return false;
    bbce:	2300      	movs	r3, #0
    bbd0:	e042      	b.n	bc58 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bbd2:	69b8      	ldr	r0, [r7, #24]
    bbd4:	4b25      	ldr	r3, [pc, #148]	; (bc6c <usbdc_set_config+0xe0>)
    bbd6:	4798      	blx	r3
    bbd8:	4603      	mov	r3, r0
    bbda:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bbdc:	8abb      	ldrh	r3, [r7, #20]
    bbde:	69ba      	ldr	r2, [r7, #24]
    bbe0:	4413      	add	r3, r2
    bbe2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bbe4:	693b      	ldr	r3, [r7, #16]
    bbe6:	2204      	movs	r2, #4
    bbe8:	4619      	mov	r1, r3
    bbea:	69b8      	ldr	r0, [r7, #24]
    bbec:	4b20      	ldr	r3, [pc, #128]	; (bc70 <usbdc_set_config+0xe4>)
    bbee:	4798      	blx	r3
    bbf0:	4603      	mov	r3, r0
    bbf2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bbf4:	e02c      	b.n	bc50 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bbf6:	68fb      	ldr	r3, [r7, #12]
    bbf8:	3302      	adds	r3, #2
    bbfa:	781b      	ldrb	r3, [r3, #0]
    bbfc:	7dfa      	ldrb	r2, [r7, #23]
    bbfe:	429a      	cmp	r2, r3
    bc00:	d018      	beq.n	bc34 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bc02:	68fb      	ldr	r3, [r7, #12]
    bc04:	789b      	ldrb	r3, [r3, #2]
    bc06:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bc08:	4b16      	ldr	r3, [pc, #88]	; (bc64 <usbdc_set_config+0xd8>)
    bc0a:	691b      	ldr	r3, [r3, #16]
    bc0c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bc0e:	e00c      	b.n	bc2a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bc10:	69fb      	ldr	r3, [r7, #28]
    bc12:	685b      	ldr	r3, [r3, #4]
    bc14:	f107 020c 	add.w	r2, r7, #12
    bc18:	2100      	movs	r1, #0
    bc1a:	69f8      	ldr	r0, [r7, #28]
    bc1c:	4798      	blx	r3
    bc1e:	4603      	mov	r3, r0
    bc20:	2b00      	cmp	r3, #0
    bc22:	d006      	beq.n	bc32 <usbdc_set_config+0xa6>
					func = func->next;
    bc24:	69fb      	ldr	r3, [r7, #28]
    bc26:	681b      	ldr	r3, [r3, #0]
    bc28:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bc2a:	69fb      	ldr	r3, [r7, #28]
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d1ef      	bne.n	bc10 <usbdc_set_config+0x84>
    bc30:	e000      	b.n	bc34 <usbdc_set_config+0xa8>
				} else {
					break;
    bc32:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bc34:	68fb      	ldr	r3, [r7, #12]
    bc36:	4618      	mov	r0, r3
    bc38:	4b0e      	ldr	r3, [pc, #56]	; (bc74 <usbdc_set_config+0xe8>)
    bc3a:	4798      	blx	r3
    bc3c:	4603      	mov	r3, r0
    bc3e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bc40:	68fb      	ldr	r3, [r7, #12]
    bc42:	6939      	ldr	r1, [r7, #16]
    bc44:	2204      	movs	r2, #4
    bc46:	4618      	mov	r0, r3
    bc48:	4b09      	ldr	r3, [pc, #36]	; (bc70 <usbdc_set_config+0xe4>)
    bc4a:	4798      	blx	r3
    bc4c:	4603      	mov	r3, r0
    bc4e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bc50:	68fb      	ldr	r3, [r7, #12]
    bc52:	2b00      	cmp	r3, #0
    bc54:	d1cf      	bne.n	bbf6 <usbdc_set_config+0x6a>
	}
	return true;
    bc56:	2301      	movs	r3, #1
}
    bc58:	4618      	mov	r0, r3
    bc5a:	3720      	adds	r7, #32
    bc5c:	46bd      	mov	sp, r7
    bc5e:	bd80      	pop	{r7, pc}
    bc60:	0000bb59 	.word	0x0000bb59
    bc64:	20000b38 	.word	0x20000b38
    bc68:	0000c4fd 	.word	0x0000c4fd
    bc6c:	0000b6a9 	.word	0x0000b6a9
    bc70:	0000c43d 	.word	0x0000c43d
    bc74:	0000b685 	.word	0x0000b685

0000bc78 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bc78:	b580      	push	{r7, lr}
    bc7a:	b082      	sub	sp, #8
    bc7c:	af00      	add	r7, sp, #0
    bc7e:	4603      	mov	r3, r0
    bc80:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bc82:	79fb      	ldrb	r3, [r7, #7]
    bc84:	4618      	mov	r0, r3
    bc86:	4b03      	ldr	r3, [pc, #12]	; (bc94 <usbdc_set_address+0x1c>)
    bc88:	4798      	blx	r3
}
    bc8a:	bf00      	nop
    bc8c:	3708      	adds	r7, #8
    bc8e:	46bd      	mov	sp, r7
    bc90:	bd80      	pop	{r7, pc}
    bc92:	bf00      	nop
    bc94:	00002c15 	.word	0x00002c15

0000bc98 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bc98:	b590      	push	{r4, r7, lr}
    bc9a:	b087      	sub	sp, #28
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	4603      	mov	r3, r0
    bca0:	460a      	mov	r2, r1
    bca2:	80fb      	strh	r3, [r7, #6]
    bca4:	4613      	mov	r3, r2
    bca6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bca8:	2300      	movs	r3, #0
    bcaa:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bcac:	693b      	ldr	r3, [r7, #16]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d10b      	bne.n	bcca <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bcb2:	4b43      	ldr	r3, [pc, #268]	; (bdc0 <usbdc_set_interface+0x128>)
    bcb4:	681b      	ldr	r3, [r3, #0]
    bcb6:	6818      	ldr	r0, [r3, #0]
    bcb8:	4b41      	ldr	r3, [pc, #260]	; (bdc0 <usbdc_set_interface+0x128>)
    bcba:	681b      	ldr	r3, [r3, #0]
    bcbc:	6859      	ldr	r1, [r3, #4]
    bcbe:	4b40      	ldr	r3, [pc, #256]	; (bdc0 <usbdc_set_interface+0x128>)
    bcc0:	7edb      	ldrb	r3, [r3, #27]
    bcc2:	461a      	mov	r2, r3
    bcc4:	4b3f      	ldr	r3, [pc, #252]	; (bdc4 <usbdc_set_interface+0x12c>)
    bcc6:	4798      	blx	r3
    bcc8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bcca:	693b      	ldr	r3, [r7, #16]
    bccc:	2b00      	cmp	r3, #0
    bcce:	d101      	bne.n	bcd4 <usbdc_set_interface+0x3c>
		return false;
    bcd0:	2300      	movs	r3, #0
    bcd2:	e071      	b.n	bdb8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bcd4:	693b      	ldr	r3, [r7, #16]
    bcd6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bcd8:	6938      	ldr	r0, [r7, #16]
    bcda:	4b3b      	ldr	r3, [pc, #236]	; (bdc8 <usbdc_set_interface+0x130>)
    bcdc:	4798      	blx	r3
    bcde:	4603      	mov	r3, r0
    bce0:	461a      	mov	r2, r3
    bce2:	693b      	ldr	r3, [r7, #16]
    bce4:	4413      	add	r3, r2
    bce6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bce8:	68bb      	ldr	r3, [r7, #8]
    bcea:	68f9      	ldr	r1, [r7, #12]
    bcec:	2204      	movs	r2, #4
    bcee:	4618      	mov	r0, r3
    bcf0:	4b36      	ldr	r3, [pc, #216]	; (bdcc <usbdc_set_interface+0x134>)
    bcf2:	4798      	blx	r3
    bcf4:	6138      	str	r0, [r7, #16]
    bcf6:	693b      	ldr	r3, [r7, #16]
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d113      	bne.n	bd24 <usbdc_set_interface+0x8c>
		return false;
    bcfc:	2300      	movs	r3, #0
    bcfe:	e05b      	b.n	bdb8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    bd00:	68bb      	ldr	r3, [r7, #8]
    bd02:	4618      	mov	r0, r3
    bd04:	4b32      	ldr	r3, [pc, #200]	; (bdd0 <usbdc_set_interface+0x138>)
    bd06:	4798      	blx	r3
    bd08:	4603      	mov	r3, r0
    bd0a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bd0c:	68bb      	ldr	r3, [r7, #8]
    bd0e:	68f9      	ldr	r1, [r7, #12]
    bd10:	2204      	movs	r2, #4
    bd12:	4618      	mov	r0, r3
    bd14:	4b2d      	ldr	r3, [pc, #180]	; (bdcc <usbdc_set_interface+0x134>)
    bd16:	4798      	blx	r3
    bd18:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    bd1a:	693b      	ldr	r3, [r7, #16]
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	d101      	bne.n	bd24 <usbdc_set_interface+0x8c>
			return false;
    bd20:	2300      	movs	r3, #0
    bd22:	e049      	b.n	bdb8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    bd24:	693b      	ldr	r3, [r7, #16]
    bd26:	3302      	adds	r3, #2
    bd28:	781b      	ldrb	r3, [r3, #0]
    bd2a:	b29b      	uxth	r3, r3
    bd2c:	88ba      	ldrh	r2, [r7, #4]
    bd2e:	429a      	cmp	r2, r3
    bd30:	d1e6      	bne.n	bd00 <usbdc_set_interface+0x68>
    bd32:	693b      	ldr	r3, [r7, #16]
    bd34:	3303      	adds	r3, #3
    bd36:	781b      	ldrb	r3, [r3, #0]
    bd38:	b29b      	uxth	r3, r3
    bd3a:	88fa      	ldrh	r2, [r7, #6]
    bd3c:	429a      	cmp	r2, r3
    bd3e:	d1df      	bne.n	bd00 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    bd40:	693b      	ldr	r3, [r7, #16]
    bd42:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    bd44:	4b1e      	ldr	r3, [pc, #120]	; (bdc0 <usbdc_set_interface+0x128>)
    bd46:	691b      	ldr	r3, [r3, #16]
    bd48:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    bd4a:	e031      	b.n	bdb0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    bd4c:	697b      	ldr	r3, [r7, #20]
    bd4e:	685b      	ldr	r3, [r3, #4]
    bd50:	f107 0208 	add.w	r2, r7, #8
    bd54:	2101      	movs	r1, #1
    bd56:	6978      	ldr	r0, [r7, #20]
    bd58:	4798      	blx	r3
    bd5a:	4603      	mov	r3, r0
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d003      	beq.n	bd68 <usbdc_set_interface+0xd0>
			func = func->next;
    bd60:	697b      	ldr	r3, [r7, #20]
    bd62:	681b      	ldr	r3, [r3, #0]
    bd64:	617b      	str	r3, [r7, #20]
    bd66:	e023      	b.n	bdb0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bd68:	697b      	ldr	r3, [r7, #20]
    bd6a:	685b      	ldr	r3, [r3, #4]
    bd6c:	f107 0208 	add.w	r2, r7, #8
    bd70:	2100      	movs	r1, #0
    bd72:	6978      	ldr	r0, [r7, #20]
    bd74:	4798      	blx	r3
    bd76:	4603      	mov	r3, r0
    bd78:	2b00      	cmp	r3, #0
    bd7a:	d117      	bne.n	bdac <usbdc_set_interface+0x114>
			if (alt_set) {
    bd7c:	88fb      	ldrh	r3, [r7, #6]
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d00c      	beq.n	bd9c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bd82:	4b0f      	ldr	r3, [pc, #60]	; (bdc0 <usbdc_set_interface+0x128>)
    bd84:	7f5b      	ldrb	r3, [r3, #29]
    bd86:	b25a      	sxtb	r2, r3
    bd88:	88bb      	ldrh	r3, [r7, #4]
    bd8a:	2101      	movs	r1, #1
    bd8c:	fa01 f303 	lsl.w	r3, r1, r3
    bd90:	b25b      	sxtb	r3, r3
    bd92:	4313      	orrs	r3, r2
    bd94:	b25b      	sxtb	r3, r3
    bd96:	b2da      	uxtb	r2, r3
    bd98:	4b09      	ldr	r3, [pc, #36]	; (bdc0 <usbdc_set_interface+0x128>)
    bd9a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    bd9c:	2300      	movs	r3, #0
    bd9e:	2200      	movs	r2, #0
    bda0:	2100      	movs	r1, #0
    bda2:	2000      	movs	r0, #0
    bda4:	4c0b      	ldr	r4, [pc, #44]	; (bdd4 <usbdc_set_interface+0x13c>)
    bda6:	47a0      	blx	r4
			return true;
    bda8:	2301      	movs	r3, #1
    bdaa:	e005      	b.n	bdb8 <usbdc_set_interface+0x120>
		} else {
			return false;
    bdac:	2300      	movs	r3, #0
    bdae:	e003      	b.n	bdb8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bdb0:	697b      	ldr	r3, [r7, #20]
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d1ca      	bne.n	bd4c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bdb6:	2300      	movs	r3, #0
}
    bdb8:	4618      	mov	r0, r3
    bdba:	371c      	adds	r7, #28
    bdbc:	46bd      	mov	sp, r7
    bdbe:	bd90      	pop	{r4, r7, pc}
    bdc0:	20000b38 	.word	0x20000b38
    bdc4:	0000c4fd 	.word	0x0000c4fd
    bdc8:	0000b6a9 	.word	0x0000b6a9
    bdcc:	0000c43d 	.word	0x0000c43d
    bdd0:	0000b685 	.word	0x0000b685
    bdd4:	0000c1ad 	.word	0x0000c1ad

0000bdd8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bdd8:	b590      	push	{r4, r7, lr}
    bdda:	b083      	sub	sp, #12
    bddc:	af00      	add	r7, sp, #0
    bdde:	4603      	mov	r3, r0
    bde0:	6039      	str	r1, [r7, #0]
    bde2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bde4:	683b      	ldr	r3, [r7, #0]
    bde6:	785b      	ldrb	r3, [r3, #1]
    bde8:	3b01      	subs	r3, #1
    bdea:	2b0a      	cmp	r3, #10
    bdec:	d85b      	bhi.n	bea6 <usbdc_set_req+0xce>
    bdee:	a201      	add	r2, pc, #4	; (adr r2, bdf4 <usbdc_set_req+0x1c>)
    bdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bdf4:	0000be73 	.word	0x0000be73
    bdf8:	0000bea7 	.word	0x0000bea7
    bdfc:	0000be81 	.word	0x0000be81
    be00:	0000bea7 	.word	0x0000bea7
    be04:	0000be21 	.word	0x0000be21
    be08:	0000bea7 	.word	0x0000bea7
    be0c:	0000bea7 	.word	0x0000bea7
    be10:	0000bea7 	.word	0x0000bea7
    be14:	0000be3b 	.word	0x0000be3b
    be18:	0000bea7 	.word	0x0000bea7
    be1c:	0000be8f 	.word	0x0000be8f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    be20:	79f8      	ldrb	r0, [r7, #7]
    be22:	2301      	movs	r3, #1
    be24:	2200      	movs	r2, #0
    be26:	2100      	movs	r1, #0
    be28:	4c21      	ldr	r4, [pc, #132]	; (beb0 <usbdc_set_req+0xd8>)
    be2a:	47a0      	blx	r4
    be2c:	4603      	mov	r3, r0
    be2e:	2b00      	cmp	r3, #0
    be30:	bf0c      	ite	eq
    be32:	2301      	moveq	r3, #1
    be34:	2300      	movne	r3, #0
    be36:	b2db      	uxtb	r3, r3
    be38:	e036      	b.n	bea8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    be3a:	683b      	ldr	r3, [r7, #0]
    be3c:	885b      	ldrh	r3, [r3, #2]
    be3e:	b29b      	uxth	r3, r3
    be40:	b2db      	uxtb	r3, r3
    be42:	4618      	mov	r0, r3
    be44:	4b1b      	ldr	r3, [pc, #108]	; (beb4 <usbdc_set_req+0xdc>)
    be46:	4798      	blx	r3
    be48:	4603      	mov	r3, r0
    be4a:	f083 0301 	eor.w	r3, r3, #1
    be4e:	b2db      	uxtb	r3, r3
    be50:	2b00      	cmp	r3, #0
    be52:	d001      	beq.n	be58 <usbdc_set_req+0x80>
			return false;
    be54:	2300      	movs	r3, #0
    be56:	e027      	b.n	bea8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    be58:	79f8      	ldrb	r0, [r7, #7]
    be5a:	2301      	movs	r3, #1
    be5c:	2200      	movs	r2, #0
    be5e:	2100      	movs	r1, #0
    be60:	4c13      	ldr	r4, [pc, #76]	; (beb0 <usbdc_set_req+0xd8>)
    be62:	47a0      	blx	r4
    be64:	4603      	mov	r3, r0
    be66:	2b00      	cmp	r3, #0
    be68:	bf0c      	ite	eq
    be6a:	2301      	moveq	r3, #1
    be6c:	2300      	movne	r3, #0
    be6e:	b2db      	uxtb	r3, r3
    be70:	e01a      	b.n	bea8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    be72:	79fb      	ldrb	r3, [r7, #7]
    be74:	6839      	ldr	r1, [r7, #0]
    be76:	4618      	mov	r0, r3
    be78:	4b0f      	ldr	r3, [pc, #60]	; (beb8 <usbdc_set_req+0xe0>)
    be7a:	4798      	blx	r3
    be7c:	4603      	mov	r3, r0
    be7e:	e013      	b.n	bea8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    be80:	79fb      	ldrb	r3, [r7, #7]
    be82:	6839      	ldr	r1, [r7, #0]
    be84:	4618      	mov	r0, r3
    be86:	4b0d      	ldr	r3, [pc, #52]	; (bebc <usbdc_set_req+0xe4>)
    be88:	4798      	blx	r3
    be8a:	4603      	mov	r3, r0
    be8c:	e00c      	b.n	bea8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    be8e:	683b      	ldr	r3, [r7, #0]
    be90:	885b      	ldrh	r3, [r3, #2]
    be92:	b29a      	uxth	r2, r3
    be94:	683b      	ldr	r3, [r7, #0]
    be96:	889b      	ldrh	r3, [r3, #4]
    be98:	b29b      	uxth	r3, r3
    be9a:	4619      	mov	r1, r3
    be9c:	4610      	mov	r0, r2
    be9e:	4b08      	ldr	r3, [pc, #32]	; (bec0 <usbdc_set_req+0xe8>)
    bea0:	4798      	blx	r3
    bea2:	4603      	mov	r3, r0
    bea4:	e000      	b.n	bea8 <usbdc_set_req+0xd0>
	default:
		return false;
    bea6:	2300      	movs	r3, #0
	}
}
    bea8:	4618      	mov	r0, r3
    beaa:	370c      	adds	r7, #12
    beac:	46bd      	mov	sp, r7
    beae:	bd90      	pop	{r4, r7, pc}
    beb0:	0000c1ad 	.word	0x0000c1ad
    beb4:	0000bb8d 	.word	0x0000bb8d
    beb8:	0000baa9 	.word	0x0000baa9
    bebc:	0000bb01 	.word	0x0000bb01
    bec0:	0000bc99 	.word	0x0000bc99

0000bec4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bec4:	b580      	push	{r7, lr}
    bec6:	b082      	sub	sp, #8
    bec8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    beca:	4b0a      	ldr	r3, [pc, #40]	; (bef4 <usbdc_sof_notify+0x30>)
    becc:	685b      	ldr	r3, [r3, #4]
    bece:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    bed0:	e009      	b.n	bee6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    bed2:	687b      	ldr	r3, [r7, #4]
    bed4:	685b      	ldr	r3, [r3, #4]
    bed6:	2b00      	cmp	r3, #0
    bed8:	d002      	beq.n	bee0 <usbdc_sof_notify+0x1c>
			sof->cb();
    beda:	687b      	ldr	r3, [r7, #4]
    bedc:	685b      	ldr	r3, [r3, #4]
    bede:	4798      	blx	r3
		}
		sof = sof->next;
    bee0:	687b      	ldr	r3, [r7, #4]
    bee2:	681b      	ldr	r3, [r3, #0]
    bee4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    bee6:	687b      	ldr	r3, [r7, #4]
    bee8:	2b00      	cmp	r3, #0
    beea:	d1f2      	bne.n	bed2 <usbdc_sof_notify+0xe>
	}
}
    beec:	bf00      	nop
    beee:	3708      	adds	r7, #8
    bef0:	46bd      	mov	sp, r7
    bef2:	bd80      	pop	{r7, pc}
    bef4:	20000b38 	.word	0x20000b38

0000bef8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    bef8:	b580      	push	{r7, lr}
    befa:	b084      	sub	sp, #16
    befc:	af00      	add	r7, sp, #0
    befe:	4603      	mov	r3, r0
    bf00:	6039      	str	r1, [r7, #0]
    bf02:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bf04:	4b0b      	ldr	r3, [pc, #44]	; (bf34 <usbdc_change_notify+0x3c>)
    bf06:	68db      	ldr	r3, [r3, #12]
    bf08:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    bf0a:	e00c      	b.n	bf26 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    bf0c:	68fb      	ldr	r3, [r7, #12]
    bf0e:	685b      	ldr	r3, [r3, #4]
    bf10:	2b00      	cmp	r3, #0
    bf12:	d005      	beq.n	bf20 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    bf14:	68fb      	ldr	r3, [r7, #12]
    bf16:	685b      	ldr	r3, [r3, #4]
    bf18:	79fa      	ldrb	r2, [r7, #7]
    bf1a:	6839      	ldr	r1, [r7, #0]
    bf1c:	4610      	mov	r0, r2
    bf1e:	4798      	blx	r3
		}
		cg = cg->next;
    bf20:	68fb      	ldr	r3, [r7, #12]
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    bf26:	68fb      	ldr	r3, [r7, #12]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d1ef      	bne.n	bf0c <usbdc_change_notify+0x14>
	}
}
    bf2c:	bf00      	nop
    bf2e:	3710      	adds	r7, #16
    bf30:	46bd      	mov	sp, r7
    bf32:	bd80      	pop	{r7, pc}
    bf34:	20000b38 	.word	0x20000b38

0000bf38 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf38:	b580      	push	{r7, lr}
    bf3a:	b084      	sub	sp, #16
    bf3c:	af00      	add	r7, sp, #0
    bf3e:	4603      	mov	r3, r0
    bf40:	6039      	str	r1, [r7, #0]
    bf42:	71fb      	strb	r3, [r7, #7]
    bf44:	4613      	mov	r3, r2
    bf46:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bf48:	4b12      	ldr	r3, [pc, #72]	; (bf94 <usbdc_request_handler+0x5c>)
    bf4a:	689b      	ldr	r3, [r3, #8]
    bf4c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    bf4e:	e019      	b.n	bf84 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    bf50:	68fb      	ldr	r3, [r7, #12]
    bf52:	685b      	ldr	r3, [r3, #4]
    bf54:	2b00      	cmp	r3, #0
    bf56:	d012      	beq.n	bf7e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    bf58:	68fb      	ldr	r3, [r7, #12]
    bf5a:	685b      	ldr	r3, [r3, #4]
    bf5c:	79ba      	ldrb	r2, [r7, #6]
    bf5e:	79f8      	ldrb	r0, [r7, #7]
    bf60:	6839      	ldr	r1, [r7, #0]
    bf62:	4798      	blx	r3
    bf64:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    bf66:	68bb      	ldr	r3, [r7, #8]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d101      	bne.n	bf70 <usbdc_request_handler+0x38>
				return true;
    bf6c:	2301      	movs	r3, #1
    bf6e:	e00d      	b.n	bf8c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    bf70:	68bb      	ldr	r3, [r7, #8]
    bf72:	f113 0f0a 	cmn.w	r3, #10
    bf76:	d002      	beq.n	bf7e <usbdc_request_handler+0x46>
				return -1;
    bf78:	f04f 33ff 	mov.w	r3, #4294967295
    bf7c:	e006      	b.n	bf8c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    bf7e:	68fb      	ldr	r3, [r7, #12]
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    bf84:	68fb      	ldr	r3, [r7, #12]
    bf86:	2b00      	cmp	r3, #0
    bf88:	d1e2      	bne.n	bf50 <usbdc_request_handler+0x18>
	}
	return false;
    bf8a:	2300      	movs	r3, #0
}
    bf8c:	4618      	mov	r0, r3
    bf8e:	3710      	adds	r7, #16
    bf90:	46bd      	mov	sp, r7
    bf92:	bd80      	pop	{r7, pc}
    bf94:	20000b38 	.word	0x20000b38

0000bf98 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bf98:	b580      	push	{r7, lr}
    bf9a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    bf9c:	4b01      	ldr	r3, [pc, #4]	; (bfa4 <usbd_sof_cb+0xc>)
    bf9e:	4798      	blx	r3
}
    bfa0:	bf00      	nop
    bfa2:	bd80      	pop	{r7, pc}
    bfa4:	0000bec5 	.word	0x0000bec5

0000bfa8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    bfa8:	b580      	push	{r7, lr}
    bfaa:	b082      	sub	sp, #8
    bfac:	af00      	add	r7, sp, #0
    bfae:	4603      	mov	r3, r0
    bfb0:	6039      	str	r1, [r7, #0]
    bfb2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    bfb4:	79fb      	ldrb	r3, [r7, #7]
    bfb6:	2200      	movs	r2, #0
    bfb8:	6839      	ldr	r1, [r7, #0]
    bfba:	4618      	mov	r0, r3
    bfbc:	4b14      	ldr	r3, [pc, #80]	; (c010 <usbdc_cb_ctl_req+0x68>)
    bfbe:	4798      	blx	r3
    bfc0:	4603      	mov	r3, r0
    bfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
    bfc6:	d00b      	beq.n	bfe0 <usbdc_cb_ctl_req+0x38>
    bfc8:	2b01      	cmp	r3, #1
    bfca:	d007      	beq.n	bfdc <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    bfcc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bfce:	683b      	ldr	r3, [r7, #0]
    bfd0:	781b      	ldrb	r3, [r3, #0]
    bfd2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    bfd6:	2b00      	cmp	r3, #0
    bfd8:	d007      	beq.n	bfea <usbdc_cb_ctl_req+0x42>
    bfda:	e003      	b.n	bfe4 <usbdc_cb_ctl_req+0x3c>
		return true;
    bfdc:	2301      	movs	r3, #1
    bfde:	e013      	b.n	c008 <usbdc_cb_ctl_req+0x60>
		return false;
    bfe0:	2300      	movs	r3, #0
    bfe2:	e011      	b.n	c008 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bfe4:	2b80      	cmp	r3, #128	; 0x80
    bfe6:	d007      	beq.n	bff8 <usbdc_cb_ctl_req+0x50>
    bfe8:	e00d      	b.n	c006 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    bfea:	79fb      	ldrb	r3, [r7, #7]
    bfec:	6839      	ldr	r1, [r7, #0]
    bfee:	4618      	mov	r0, r3
    bff0:	4b08      	ldr	r3, [pc, #32]	; (c014 <usbdc_cb_ctl_req+0x6c>)
    bff2:	4798      	blx	r3
    bff4:	4603      	mov	r3, r0
    bff6:	e007      	b.n	c008 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    bff8:	79fb      	ldrb	r3, [r7, #7]
    bffa:	6839      	ldr	r1, [r7, #0]
    bffc:	4618      	mov	r0, r3
    bffe:	4b06      	ldr	r3, [pc, #24]	; (c018 <usbdc_cb_ctl_req+0x70>)
    c000:	4798      	blx	r3
    c002:	4603      	mov	r3, r0
    c004:	e000      	b.n	c008 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c006:	2300      	movs	r3, #0
	}
}
    c008:	4618      	mov	r0, r3
    c00a:	3708      	adds	r7, #8
    c00c:	46bd      	mov	sp, r7
    c00e:	bd80      	pop	{r7, pc}
    c010:	0000bf39 	.word	0x0000bf39
    c014:	0000bdd9 	.word	0x0000bdd9
    c018:	0000ba01 	.word	0x0000ba01

0000c01c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c01c:	b580      	push	{r7, lr}
    c01e:	b082      	sub	sp, #8
    c020:	af00      	add	r7, sp, #0
    c022:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c024:	687b      	ldr	r3, [r7, #4]
    c026:	781b      	ldrb	r3, [r3, #0]
    c028:	2b00      	cmp	r3, #0
    c02a:	d135      	bne.n	c098 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c02c:	687b      	ldr	r3, [r7, #4]
    c02e:	785b      	ldrb	r3, [r3, #1]
    c030:	2b05      	cmp	r3, #5
    c032:	d019      	beq.n	c068 <usbdc_ctrl_status_end+0x4c>
    c034:	2b09      	cmp	r3, #9
    c036:	d000      	beq.n	c03a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c038:	e02f      	b.n	c09a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c03a:	687b      	ldr	r3, [r7, #4]
    c03c:	885b      	ldrh	r3, [r3, #2]
    c03e:	b29b      	uxth	r3, r3
    c040:	b2da      	uxtb	r2, r3
    c042:	4b17      	ldr	r3, [pc, #92]	; (c0a0 <usbdc_ctrl_status_end+0x84>)
    c044:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c046:	687b      	ldr	r3, [r7, #4]
    c048:	885b      	ldrh	r3, [r3, #2]
    c04a:	b29b      	uxth	r3, r3
    c04c:	2b00      	cmp	r3, #0
    c04e:	d001      	beq.n	c054 <usbdc_ctrl_status_end+0x38>
    c050:	2204      	movs	r2, #4
    c052:	e000      	b.n	c056 <usbdc_ctrl_status_end+0x3a>
    c054:	2203      	movs	r2, #3
    c056:	4b12      	ldr	r3, [pc, #72]	; (c0a0 <usbdc_ctrl_status_end+0x84>)
    c058:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c05a:	4b11      	ldr	r3, [pc, #68]	; (c0a0 <usbdc_ctrl_status_end+0x84>)
    c05c:	7e9b      	ldrb	r3, [r3, #26]
    c05e:	4619      	mov	r1, r3
    c060:	2001      	movs	r0, #1
    c062:	4b10      	ldr	r3, [pc, #64]	; (c0a4 <usbdc_ctrl_status_end+0x88>)
    c064:	4798      	blx	r3
		break;
    c066:	e018      	b.n	c09a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c068:	687b      	ldr	r3, [r7, #4]
    c06a:	885b      	ldrh	r3, [r3, #2]
    c06c:	b29b      	uxth	r3, r3
    c06e:	b2db      	uxtb	r3, r3
    c070:	4618      	mov	r0, r3
    c072:	4b0d      	ldr	r3, [pc, #52]	; (c0a8 <usbdc_ctrl_status_end+0x8c>)
    c074:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c076:	687b      	ldr	r3, [r7, #4]
    c078:	885b      	ldrh	r3, [r3, #2]
    c07a:	b29b      	uxth	r3, r3
    c07c:	2b00      	cmp	r3, #0
    c07e:	d001      	beq.n	c084 <usbdc_ctrl_status_end+0x68>
    c080:	2203      	movs	r2, #3
    c082:	e000      	b.n	c086 <usbdc_ctrl_status_end+0x6a>
    c084:	2202      	movs	r2, #2
    c086:	4b06      	ldr	r3, [pc, #24]	; (c0a0 <usbdc_ctrl_status_end+0x84>)
    c088:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c08a:	4b05      	ldr	r3, [pc, #20]	; (c0a0 <usbdc_ctrl_status_end+0x84>)
    c08c:	7e9b      	ldrb	r3, [r3, #26]
    c08e:	4619      	mov	r1, r3
    c090:	2001      	movs	r0, #1
    c092:	4b04      	ldr	r3, [pc, #16]	; (c0a4 <usbdc_ctrl_status_end+0x88>)
    c094:	4798      	blx	r3
		break;
    c096:	e000      	b.n	c09a <usbdc_ctrl_status_end+0x7e>
		return;
    c098:	bf00      	nop
	}
}
    c09a:	3708      	adds	r7, #8
    c09c:	46bd      	mov	sp, r7
    c09e:	bd80      	pop	{r7, pc}
    c0a0:	20000b38 	.word	0x20000b38
    c0a4:	0000bef9 	.word	0x0000bef9
    c0a8:	0000bc79 	.word	0x0000bc79

0000c0ac <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c0ac:	b580      	push	{r7, lr}
    c0ae:	b082      	sub	sp, #8
    c0b0:	af00      	add	r7, sp, #0
    c0b2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c0b4:	2201      	movs	r2, #1
    c0b6:	6879      	ldr	r1, [r7, #4]
    c0b8:	2000      	movs	r0, #0
    c0ba:	4b03      	ldr	r3, [pc, #12]	; (c0c8 <usbdc_ctrl_data_end+0x1c>)
    c0bc:	4798      	blx	r3
	return false;
    c0be:	2300      	movs	r3, #0
}
    c0c0:	4618      	mov	r0, r3
    c0c2:	3708      	adds	r7, #8
    c0c4:	46bd      	mov	sp, r7
    c0c6:	bd80      	pop	{r7, pc}
    c0c8:	0000bf39 	.word	0x0000bf39

0000c0cc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c0cc:	b580      	push	{r7, lr}
    c0ce:	b082      	sub	sp, #8
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	4603      	mov	r3, r0
    c0d4:	603a      	str	r2, [r7, #0]
    c0d6:	71fb      	strb	r3, [r7, #7]
    c0d8:	460b      	mov	r3, r1
    c0da:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c0dc:	79bb      	ldrb	r3, [r7, #6]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d002      	beq.n	c0e8 <usbdc_cb_ctl_done+0x1c>
    c0e2:	2b01      	cmp	r3, #1
    c0e4:	d004      	beq.n	c0f0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c0e6:	e008      	b.n	c0fa <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c0e8:	6838      	ldr	r0, [r7, #0]
    c0ea:	4b06      	ldr	r3, [pc, #24]	; (c104 <usbdc_cb_ctl_done+0x38>)
    c0ec:	4798      	blx	r3
		break;
    c0ee:	e004      	b.n	c0fa <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c0f0:	6838      	ldr	r0, [r7, #0]
    c0f2:	4b05      	ldr	r3, [pc, #20]	; (c108 <usbdc_cb_ctl_done+0x3c>)
    c0f4:	4798      	blx	r3
    c0f6:	4603      	mov	r3, r0
    c0f8:	e000      	b.n	c0fc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c0fa:	2300      	movs	r3, #0
}
    c0fc:	4618      	mov	r0, r3
    c0fe:	3708      	adds	r7, #8
    c100:	46bd      	mov	sp, r7
    c102:	bd80      	pop	{r7, pc}
    c104:	0000c01d 	.word	0x0000c01d
    c108:	0000c0ad 	.word	0x0000c0ad

0000c10c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c10c:	b580      	push	{r7, lr}
    c10e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c110:	4b10      	ldr	r3, [pc, #64]	; (c154 <usbdc_reset+0x48>)
    c112:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c114:	4b10      	ldr	r3, [pc, #64]	; (c158 <usbdc_reset+0x4c>)
    c116:	2202      	movs	r2, #2
    c118:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c11a:	4b0f      	ldr	r3, [pc, #60]	; (c158 <usbdc_reset+0x4c>)
    c11c:	2200      	movs	r2, #0
    c11e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c120:	4b0d      	ldr	r3, [pc, #52]	; (c158 <usbdc_reset+0x4c>)
    c122:	2200      	movs	r2, #0
    c124:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c126:	2000      	movs	r0, #0
    c128:	4b0c      	ldr	r3, [pc, #48]	; (c15c <usbdc_reset+0x50>)
    c12a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c12c:	4b0a      	ldr	r3, [pc, #40]	; (c158 <usbdc_reset+0x4c>)
    c12e:	7f1b      	ldrb	r3, [r3, #28]
    c130:	4618      	mov	r0, r3
    c132:	4b0b      	ldr	r3, [pc, #44]	; (c160 <usbdc_reset+0x54>)
    c134:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c136:	4a0b      	ldr	r2, [pc, #44]	; (c164 <usbdc_reset+0x58>)
    c138:	2100      	movs	r1, #0
    c13a:	2000      	movs	r0, #0
    c13c:	4b0a      	ldr	r3, [pc, #40]	; (c168 <usbdc_reset+0x5c>)
    c13e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c140:	4a0a      	ldr	r2, [pc, #40]	; (c16c <usbdc_reset+0x60>)
    c142:	2102      	movs	r1, #2
    c144:	2000      	movs	r0, #0
    c146:	4b08      	ldr	r3, [pc, #32]	; (c168 <usbdc_reset+0x5c>)
    c148:	4798      	blx	r3
	usb_d_ep_enable(0);
    c14a:	2000      	movs	r0, #0
    c14c:	4b08      	ldr	r3, [pc, #32]	; (c170 <usbdc_reset+0x64>)
    c14e:	4798      	blx	r3
}
    c150:	bf00      	nop
    c152:	bd80      	pop	{r7, pc}
    c154:	0000bb59 	.word	0x0000bb59
    c158:	20000b38 	.word	0x20000b38
    c15c:	00002cf9 	.word	0x00002cf9
    c160:	00002c35 	.word	0x00002c35
    c164:	0000bfa9 	.word	0x0000bfa9
    c168:	0000304d 	.word	0x0000304d
    c16c:	0000c0cd 	.word	0x0000c0cd
    c170:	00002d49 	.word	0x00002d49

0000c174 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c174:	b580      	push	{r7, lr}
    c176:	b082      	sub	sp, #8
    c178:	af00      	add	r7, sp, #0
    c17a:	4603      	mov	r3, r0
    c17c:	6039      	str	r1, [r7, #0]
    c17e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c180:	79fb      	ldrb	r3, [r7, #7]
    c182:	2b00      	cmp	r3, #0
    c184:	d002      	beq.n	c18c <usbd_event_cb+0x18>
    c186:	2b01      	cmp	r3, #1
    c188:	d005      	beq.n	c196 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c18a:	e007      	b.n	c19c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c18c:	6839      	ldr	r1, [r7, #0]
    c18e:	2000      	movs	r0, #0
    c190:	4b04      	ldr	r3, [pc, #16]	; (c1a4 <usbd_event_cb+0x30>)
    c192:	4798      	blx	r3
		break;
    c194:	e002      	b.n	c19c <usbd_event_cb+0x28>
		usbdc_reset();
    c196:	4b04      	ldr	r3, [pc, #16]	; (c1a8 <usbd_event_cb+0x34>)
    c198:	4798      	blx	r3
		break;
    c19a:	bf00      	nop
	}
}
    c19c:	bf00      	nop
    c19e:	3708      	adds	r7, #8
    c1a0:	46bd      	mov	sp, r7
    c1a2:	bd80      	pop	{r7, pc}
    c1a4:	0000bef9 	.word	0x0000bef9
    c1a8:	0000c10d 	.word	0x0000c10d

0000c1ac <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	b088      	sub	sp, #32
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	60b9      	str	r1, [r7, #8]
    c1b4:	607a      	str	r2, [r7, #4]
    c1b6:	461a      	mov	r2, r3
    c1b8:	4603      	mov	r3, r0
    c1ba:	73fb      	strb	r3, [r7, #15]
    c1bc:	4613      	mov	r3, r2
    c1be:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c1c0:	68bb      	ldr	r3, [r7, #8]
    c1c2:	617b      	str	r3, [r7, #20]
    c1c4:	687b      	ldr	r3, [r7, #4]
    c1c6:	61bb      	str	r3, [r7, #24]
    c1c8:	7bfb      	ldrb	r3, [r7, #15]
    c1ca:	773b      	strb	r3, [r7, #28]
    c1cc:	7bbb      	ldrb	r3, [r7, #14]
    c1ce:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c1d0:	f107 0314 	add.w	r3, r7, #20
    c1d4:	4618      	mov	r0, r3
    c1d6:	4b03      	ldr	r3, [pc, #12]	; (c1e4 <usbdc_xfer+0x38>)
    c1d8:	4798      	blx	r3
    c1da:	4603      	mov	r3, r0
}
    c1dc:	4618      	mov	r0, r3
    c1de:	3720      	adds	r7, #32
    c1e0:	46bd      	mov	sp, r7
    c1e2:	bd80      	pop	{r7, pc}
    c1e4:	00002db9 	.word	0x00002db9

0000c1e8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c1e8:	b580      	push	{r7, lr}
    c1ea:	b082      	sub	sp, #8
    c1ec:	af00      	add	r7, sp, #0
    c1ee:	4603      	mov	r3, r0
    c1f0:	6039      	str	r1, [r7, #0]
    c1f2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c1f4:	79fb      	ldrb	r3, [r7, #7]
    c1f6:	2b01      	cmp	r3, #1
    c1f8:	d009      	beq.n	c20e <usbdc_register_handler+0x26>
    c1fa:	2b02      	cmp	r3, #2
    c1fc:	d00c      	beq.n	c218 <usbdc_register_handler+0x30>
    c1fe:	2b00      	cmp	r3, #0
    c200:	d000      	beq.n	c204 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c202:	e00e      	b.n	c222 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c204:	6839      	ldr	r1, [r7, #0]
    c206:	4809      	ldr	r0, [pc, #36]	; (c22c <usbdc_register_handler+0x44>)
    c208:	4b09      	ldr	r3, [pc, #36]	; (c230 <usbdc_register_handler+0x48>)
    c20a:	4798      	blx	r3
		break;
    c20c:	e009      	b.n	c222 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c20e:	6839      	ldr	r1, [r7, #0]
    c210:	4808      	ldr	r0, [pc, #32]	; (c234 <usbdc_register_handler+0x4c>)
    c212:	4b07      	ldr	r3, [pc, #28]	; (c230 <usbdc_register_handler+0x48>)
    c214:	4798      	blx	r3
		break;
    c216:	e004      	b.n	c222 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c218:	6839      	ldr	r1, [r7, #0]
    c21a:	4807      	ldr	r0, [pc, #28]	; (c238 <usbdc_register_handler+0x50>)
    c21c:	4b04      	ldr	r3, [pc, #16]	; (c230 <usbdc_register_handler+0x48>)
    c21e:	4798      	blx	r3
		break;
    c220:	bf00      	nop
	}
}
    c222:	bf00      	nop
    c224:	3708      	adds	r7, #8
    c226:	46bd      	mov	sp, r7
    c228:	bd80      	pop	{r7, pc}
    c22a:	bf00      	nop
    c22c:	20000b3c 	.word	0x20000b3c
    c230:	000031a5 	.word	0x000031a5
    c234:	20000b40 	.word	0x20000b40
    c238:	20000b44 	.word	0x20000b44

0000c23c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c23c:	b580      	push	{r7, lr}
    c23e:	b084      	sub	sp, #16
    c240:	af00      	add	r7, sp, #0
    c242:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c244:	687b      	ldr	r3, [r7, #4]
    c246:	2b00      	cmp	r3, #0
    c248:	bf14      	ite	ne
    c24a:	2301      	movne	r3, #1
    c24c:	2300      	moveq	r3, #0
    c24e:	b2db      	uxtb	r3, r3
    c250:	f240 3255 	movw	r2, #853	; 0x355
    c254:	4910      	ldr	r1, [pc, #64]	; (c298 <usbdc_init+0x5c>)
    c256:	4618      	mov	r0, r3
    c258:	4b10      	ldr	r3, [pc, #64]	; (c29c <usbdc_init+0x60>)
    c25a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c25c:	4b10      	ldr	r3, [pc, #64]	; (c2a0 <usbdc_init+0x64>)
    c25e:	4798      	blx	r3
    c260:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c262:	68fb      	ldr	r3, [r7, #12]
    c264:	2b00      	cmp	r3, #0
    c266:	da01      	bge.n	c26c <usbdc_init+0x30>
		return rc;
    c268:	68fb      	ldr	r3, [r7, #12]
    c26a:	e010      	b.n	c28e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c26c:	2220      	movs	r2, #32
    c26e:	2100      	movs	r1, #0
    c270:	480c      	ldr	r0, [pc, #48]	; (c2a4 <usbdc_init+0x68>)
    c272:	4b0d      	ldr	r3, [pc, #52]	; (c2a8 <usbdc_init+0x6c>)
    c274:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c276:	4a0b      	ldr	r2, [pc, #44]	; (c2a4 <usbdc_init+0x68>)
    c278:	687b      	ldr	r3, [r7, #4]
    c27a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c27c:	490b      	ldr	r1, [pc, #44]	; (c2ac <usbdc_init+0x70>)
    c27e:	2000      	movs	r0, #0
    c280:	4b0b      	ldr	r3, [pc, #44]	; (c2b0 <usbdc_init+0x74>)
    c282:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c284:	490b      	ldr	r1, [pc, #44]	; (c2b4 <usbdc_init+0x78>)
    c286:	2001      	movs	r0, #1
    c288:	4b09      	ldr	r3, [pc, #36]	; (c2b0 <usbdc_init+0x74>)
    c28a:	4798      	blx	r3

	return 0;
    c28c:	2300      	movs	r3, #0
}
    c28e:	4618      	mov	r0, r3
    c290:	3710      	adds	r7, #16
    c292:	46bd      	mov	sp, r7
    c294:	bd80      	pop	{r7, pc}
    c296:	bf00      	nop
    c298:	0000d7bc 	.word	0x0000d7bc
    c29c:	000030c9 	.word	0x000030c9
    c2a0:	00002b21 	.word	0x00002b21
    c2a4:	20000b38 	.word	0x20000b38
    c2a8:	0000d211 	.word	0x0000d211
    c2ac:	0000bf99 	.word	0x0000bf99
    c2b0:	00002bcd 	.word	0x00002bcd
    c2b4:	0000c175 	.word	0x0000c175

0000c2b8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c2b8:	b580      	push	{r7, lr}
    c2ba:	b082      	sub	sp, #8
    c2bc:	af00      	add	r7, sp, #0
    c2be:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c2c0:	6879      	ldr	r1, [r7, #4]
    c2c2:	4803      	ldr	r0, [pc, #12]	; (c2d0 <usbdc_register_function+0x18>)
    c2c4:	4b03      	ldr	r3, [pc, #12]	; (c2d4 <usbdc_register_function+0x1c>)
    c2c6:	4798      	blx	r3
}
    c2c8:	bf00      	nop
    c2ca:	3708      	adds	r7, #8
    c2cc:	46bd      	mov	sp, r7
    c2ce:	bd80      	pop	{r7, pc}
    c2d0:	20000b48 	.word	0x20000b48
    c2d4:	000031a5 	.word	0x000031a5

0000c2d8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c2d8:	b580      	push	{r7, lr}
    c2da:	b082      	sub	sp, #8
    c2dc:	af00      	add	r7, sp, #0
    c2de:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c2e0:	4b0f      	ldr	r3, [pc, #60]	; (c320 <usbdc_start+0x48>)
    c2e2:	7e9b      	ldrb	r3, [r3, #26]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d002      	beq.n	c2ee <usbdc_start+0x16>
		return ERR_BUSY;
    c2e8:	f06f 0303 	mvn.w	r3, #3
    c2ec:	e013      	b.n	c316 <usbdc_start+0x3e>
	}

	if (desces) {
    c2ee:	687b      	ldr	r3, [r7, #4]
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d00e      	beq.n	c312 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c2f4:	4a0a      	ldr	r2, [pc, #40]	; (c320 <usbdc_start+0x48>)
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c2fa:	687b      	ldr	r3, [r7, #4]
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	79da      	ldrb	r2, [r3, #7]
    c300:	4b07      	ldr	r3, [pc, #28]	; (c320 <usbdc_start+0x48>)
    c302:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c304:	4b06      	ldr	r3, [pc, #24]	; (c320 <usbdc_start+0x48>)
    c306:	2201      	movs	r2, #1
    c308:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c30a:	4b06      	ldr	r3, [pc, #24]	; (c324 <usbdc_start+0x4c>)
    c30c:	4798      	blx	r3
	return ERR_NONE;
    c30e:	2300      	movs	r3, #0
    c310:	e001      	b.n	c316 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c312:	f06f 0308 	mvn.w	r3, #8
}
    c316:	4618      	mov	r0, r3
    c318:	3708      	adds	r7, #8
    c31a:	46bd      	mov	sp, r7
    c31c:	bd80      	pop	{r7, pc}
    c31e:	bf00      	nop
    c320:	20000b38 	.word	0x20000b38
    c324:	00002bf1 	.word	0x00002bf1

0000c328 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c328:	b580      	push	{r7, lr}
    c32a:	af00      	add	r7, sp, #0
	usb_d_attach();
    c32c:	4b01      	ldr	r3, [pc, #4]	; (c334 <usbdc_attach+0xc>)
    c32e:	4798      	blx	r3
}
    c330:	bf00      	nop
    c332:	bd80      	pop	{r7, pc}
    c334:	00002c05 	.word	0x00002c05

0000c338 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c338:	b480      	push	{r7}
    c33a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c33c:	4b03      	ldr	r3, [pc, #12]	; (c34c <usbdc_get_ctrl_buffer+0x14>)
    c33e:	695b      	ldr	r3, [r3, #20]
}
    c340:	4618      	mov	r0, r3
    c342:	46bd      	mov	sp, r7
    c344:	f85d 7b04 	ldr.w	r7, [sp], #4
    c348:	4770      	bx	lr
    c34a:	bf00      	nop
    c34c:	20000b38 	.word	0x20000b38

0000c350 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c350:	b480      	push	{r7}
    c352:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c354:	4b07      	ldr	r3, [pc, #28]	; (c374 <usbdc_get_state+0x24>)
    c356:	7e9b      	ldrb	r3, [r3, #26]
    c358:	f003 0310 	and.w	r3, r3, #16
    c35c:	2b00      	cmp	r3, #0
    c35e:	d001      	beq.n	c364 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c360:	2310      	movs	r3, #16
    c362:	e001      	b.n	c368 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c364:	4b03      	ldr	r3, [pc, #12]	; (c374 <usbdc_get_state+0x24>)
    c366:	7e9b      	ldrb	r3, [r3, #26]
}
    c368:	4618      	mov	r0, r3
    c36a:	46bd      	mov	sp, r7
    c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c370:	4770      	bx	lr
    c372:	bf00      	nop
    c374:	20000b38 	.word	0x20000b38

0000c378 <usb_get_u16>:
{
    c378:	b480      	push	{r7}
    c37a:	b083      	sub	sp, #12
    c37c:	af00      	add	r7, sp, #0
    c37e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c380:	687b      	ldr	r3, [r7, #4]
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	b29a      	uxth	r2, r3
    c386:	687b      	ldr	r3, [r7, #4]
    c388:	3301      	adds	r3, #1
    c38a:	781b      	ldrb	r3, [r3, #0]
    c38c:	b29b      	uxth	r3, r3
    c38e:	021b      	lsls	r3, r3, #8
    c390:	b29b      	uxth	r3, r3
    c392:	4413      	add	r3, r2
    c394:	b29b      	uxth	r3, r3
}
    c396:	4618      	mov	r0, r3
    c398:	370c      	adds	r7, #12
    c39a:	46bd      	mov	sp, r7
    c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3a0:	4770      	bx	lr

0000c3a2 <usb_desc_len>:
{
    c3a2:	b480      	push	{r7}
    c3a4:	b083      	sub	sp, #12
    c3a6:	af00      	add	r7, sp, #0
    c3a8:	6078      	str	r0, [r7, #4]
	return desc[0];
    c3aa:	687b      	ldr	r3, [r7, #4]
    c3ac:	781b      	ldrb	r3, [r3, #0]
}
    c3ae:	4618      	mov	r0, r3
    c3b0:	370c      	adds	r7, #12
    c3b2:	46bd      	mov	sp, r7
    c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3b8:	4770      	bx	lr

0000c3ba <usb_desc_type>:
{
    c3ba:	b480      	push	{r7}
    c3bc:	b083      	sub	sp, #12
    c3be:	af00      	add	r7, sp, #0
    c3c0:	6078      	str	r0, [r7, #4]
	return desc[1];
    c3c2:	687b      	ldr	r3, [r7, #4]
    c3c4:	3301      	adds	r3, #1
    c3c6:	781b      	ldrb	r3, [r3, #0]
}
    c3c8:	4618      	mov	r0, r3
    c3ca:	370c      	adds	r7, #12
    c3cc:	46bd      	mov	sp, r7
    c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3d2:	4770      	bx	lr

0000c3d4 <usb_desc_next>:
{
    c3d4:	b580      	push	{r7, lr}
    c3d6:	b082      	sub	sp, #8
    c3d8:	af00      	add	r7, sp, #0
    c3da:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c3dc:	6878      	ldr	r0, [r7, #4]
    c3de:	4b05      	ldr	r3, [pc, #20]	; (c3f4 <usb_desc_next+0x20>)
    c3e0:	4798      	blx	r3
    c3e2:	4603      	mov	r3, r0
    c3e4:	461a      	mov	r2, r3
    c3e6:	687b      	ldr	r3, [r7, #4]
    c3e8:	4413      	add	r3, r2
}
    c3ea:	4618      	mov	r0, r3
    c3ec:	3708      	adds	r7, #8
    c3ee:	46bd      	mov	sp, r7
    c3f0:	bd80      	pop	{r7, pc}
    c3f2:	bf00      	nop
    c3f4:	0000c3a3 	.word	0x0000c3a3

0000c3f8 <usb_cfg_desc_total_len>:
{
    c3f8:	b580      	push	{r7, lr}
    c3fa:	b082      	sub	sp, #8
    c3fc:	af00      	add	r7, sp, #0
    c3fe:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c400:	687b      	ldr	r3, [r7, #4]
    c402:	3302      	adds	r3, #2
    c404:	4618      	mov	r0, r3
    c406:	4b03      	ldr	r3, [pc, #12]	; (c414 <usb_cfg_desc_total_len+0x1c>)
    c408:	4798      	blx	r3
    c40a:	4603      	mov	r3, r0
}
    c40c:	4618      	mov	r0, r3
    c40e:	3708      	adds	r7, #8
    c410:	46bd      	mov	sp, r7
    c412:	bd80      	pop	{r7, pc}
    c414:	0000c379 	.word	0x0000c379

0000c418 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c418:	b580      	push	{r7, lr}
    c41a:	b082      	sub	sp, #8
    c41c:	af00      	add	r7, sp, #0
    c41e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c420:	6878      	ldr	r0, [r7, #4]
    c422:	4b05      	ldr	r3, [pc, #20]	; (c438 <usb_cfg_desc_next+0x20>)
    c424:	4798      	blx	r3
    c426:	4603      	mov	r3, r0
    c428:	461a      	mov	r2, r3
    c42a:	687b      	ldr	r3, [r7, #4]
    c42c:	4413      	add	r3, r2
}
    c42e:	4618      	mov	r0, r3
    c430:	3708      	adds	r7, #8
    c432:	46bd      	mov	sp, r7
    c434:	bd80      	pop	{r7, pc}
    c436:	bf00      	nop
    c438:	0000c3f9 	.word	0x0000c3f9

0000c43c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c43c:	b580      	push	{r7, lr}
    c43e:	b084      	sub	sp, #16
    c440:	af00      	add	r7, sp, #0
    c442:	60f8      	str	r0, [r7, #12]
    c444:	60b9      	str	r1, [r7, #8]
    c446:	4613      	mov	r3, r2
    c448:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c44a:	e015      	b.n	c478 <usb_find_desc+0x3c>
		_desc_len_check();
    c44c:	68f8      	ldr	r0, [r7, #12]
    c44e:	4b0f      	ldr	r3, [pc, #60]	; (c48c <usb_find_desc+0x50>)
    c450:	4798      	blx	r3
    c452:	4603      	mov	r3, r0
    c454:	2b01      	cmp	r3, #1
    c456:	d801      	bhi.n	c45c <usb_find_desc+0x20>
    c458:	2300      	movs	r3, #0
    c45a:	e012      	b.n	c482 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c45c:	68f8      	ldr	r0, [r7, #12]
    c45e:	4b0c      	ldr	r3, [pc, #48]	; (c490 <usb_find_desc+0x54>)
    c460:	4798      	blx	r3
    c462:	4603      	mov	r3, r0
    c464:	461a      	mov	r2, r3
    c466:	79fb      	ldrb	r3, [r7, #7]
    c468:	4293      	cmp	r3, r2
    c46a:	d101      	bne.n	c470 <usb_find_desc+0x34>
			return desc;
    c46c:	68fb      	ldr	r3, [r7, #12]
    c46e:	e008      	b.n	c482 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c470:	68f8      	ldr	r0, [r7, #12]
    c472:	4b08      	ldr	r3, [pc, #32]	; (c494 <usb_find_desc+0x58>)
    c474:	4798      	blx	r3
    c476:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c478:	68fa      	ldr	r2, [r7, #12]
    c47a:	68bb      	ldr	r3, [r7, #8]
    c47c:	429a      	cmp	r2, r3
    c47e:	d3e5      	bcc.n	c44c <usb_find_desc+0x10>
	}
	return NULL;
    c480:	2300      	movs	r3, #0
}
    c482:	4618      	mov	r0, r3
    c484:	3710      	adds	r7, #16
    c486:	46bd      	mov	sp, r7
    c488:	bd80      	pop	{r7, pc}
    c48a:	bf00      	nop
    c48c:	0000c3a3 	.word	0x0000c3a3
    c490:	0000c3bb 	.word	0x0000c3bb
    c494:	0000c3d5 	.word	0x0000c3d5

0000c498 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c498:	b580      	push	{r7, lr}
    c49a:	b082      	sub	sp, #8
    c49c:	af00      	add	r7, sp, #0
    c49e:	6078      	str	r0, [r7, #4]
    c4a0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c4a2:	e019      	b.n	c4d8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c4a4:	6878      	ldr	r0, [r7, #4]
    c4a6:	4b12      	ldr	r3, [pc, #72]	; (c4f0 <usb_find_ep_desc+0x58>)
    c4a8:	4798      	blx	r3
    c4aa:	4603      	mov	r3, r0
    c4ac:	2b01      	cmp	r3, #1
    c4ae:	d801      	bhi.n	c4b4 <usb_find_ep_desc+0x1c>
    c4b0:	2300      	movs	r3, #0
    c4b2:	e018      	b.n	c4e6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c4b4:	6878      	ldr	r0, [r7, #4]
    c4b6:	4b0f      	ldr	r3, [pc, #60]	; (c4f4 <usb_find_ep_desc+0x5c>)
    c4b8:	4798      	blx	r3
    c4ba:	4603      	mov	r3, r0
    c4bc:	2b04      	cmp	r3, #4
    c4be:	d010      	beq.n	c4e2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c4c0:	6878      	ldr	r0, [r7, #4]
    c4c2:	4b0c      	ldr	r3, [pc, #48]	; (c4f4 <usb_find_ep_desc+0x5c>)
    c4c4:	4798      	blx	r3
    c4c6:	4603      	mov	r3, r0
    c4c8:	2b05      	cmp	r3, #5
    c4ca:	d101      	bne.n	c4d0 <usb_find_ep_desc+0x38>
			return desc;
    c4cc:	687b      	ldr	r3, [r7, #4]
    c4ce:	e00a      	b.n	c4e6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c4d0:	6878      	ldr	r0, [r7, #4]
    c4d2:	4b09      	ldr	r3, [pc, #36]	; (c4f8 <usb_find_ep_desc+0x60>)
    c4d4:	4798      	blx	r3
    c4d6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c4d8:	687a      	ldr	r2, [r7, #4]
    c4da:	683b      	ldr	r3, [r7, #0]
    c4dc:	429a      	cmp	r2, r3
    c4de:	d3e1      	bcc.n	c4a4 <usb_find_ep_desc+0xc>
    c4e0:	e000      	b.n	c4e4 <usb_find_ep_desc+0x4c>
			break;
    c4e2:	bf00      	nop
	}
	return NULL;
    c4e4:	2300      	movs	r3, #0
}
    c4e6:	4618      	mov	r0, r3
    c4e8:	3708      	adds	r7, #8
    c4ea:	46bd      	mov	sp, r7
    c4ec:	bd80      	pop	{r7, pc}
    c4ee:	bf00      	nop
    c4f0:	0000c3a3 	.word	0x0000c3a3
    c4f4:	0000c3bb 	.word	0x0000c3bb
    c4f8:	0000c3d5 	.word	0x0000c3d5

0000c4fc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c4fc:	b580      	push	{r7, lr}
    c4fe:	b084      	sub	sp, #16
    c500:	af00      	add	r7, sp, #0
    c502:	60f8      	str	r0, [r7, #12]
    c504:	60b9      	str	r1, [r7, #8]
    c506:	4613      	mov	r3, r2
    c508:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c50a:	2202      	movs	r2, #2
    c50c:	68b9      	ldr	r1, [r7, #8]
    c50e:	68f8      	ldr	r0, [r7, #12]
    c510:	4b15      	ldr	r3, [pc, #84]	; (c568 <usb_find_cfg_desc+0x6c>)
    c512:	4798      	blx	r3
    c514:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c516:	68fb      	ldr	r3, [r7, #12]
    c518:	2b00      	cmp	r3, #0
    c51a:	d11a      	bne.n	c552 <usb_find_cfg_desc+0x56>
		return NULL;
    c51c:	2300      	movs	r3, #0
    c51e:	e01f      	b.n	c560 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c520:	68f8      	ldr	r0, [r7, #12]
    c522:	4b12      	ldr	r3, [pc, #72]	; (c56c <usb_find_cfg_desc+0x70>)
    c524:	4798      	blx	r3
    c526:	4603      	mov	r3, r0
    c528:	2b01      	cmp	r3, #1
    c52a:	d801      	bhi.n	c530 <usb_find_cfg_desc+0x34>
    c52c:	2300      	movs	r3, #0
    c52e:	e017      	b.n	c560 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c530:	68fb      	ldr	r3, [r7, #12]
    c532:	3301      	adds	r3, #1
    c534:	781b      	ldrb	r3, [r3, #0]
    c536:	2b02      	cmp	r3, #2
    c538:	d110      	bne.n	c55c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c53a:	68fb      	ldr	r3, [r7, #12]
    c53c:	3305      	adds	r3, #5
    c53e:	781b      	ldrb	r3, [r3, #0]
    c540:	79fa      	ldrb	r2, [r7, #7]
    c542:	429a      	cmp	r2, r3
    c544:	d101      	bne.n	c54a <usb_find_cfg_desc+0x4e>
			return desc;
    c546:	68fb      	ldr	r3, [r7, #12]
    c548:	e00a      	b.n	c560 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c54a:	68f8      	ldr	r0, [r7, #12]
    c54c:	4b08      	ldr	r3, [pc, #32]	; (c570 <usb_find_cfg_desc+0x74>)
    c54e:	4798      	blx	r3
    c550:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c552:	68fa      	ldr	r2, [r7, #12]
    c554:	68bb      	ldr	r3, [r7, #8]
    c556:	429a      	cmp	r2, r3
    c558:	d3e2      	bcc.n	c520 <usb_find_cfg_desc+0x24>
    c55a:	e000      	b.n	c55e <usb_find_cfg_desc+0x62>
			break;
    c55c:	bf00      	nop
	}
	return NULL;
    c55e:	2300      	movs	r3, #0
}
    c560:	4618      	mov	r0, r3
    c562:	3710      	adds	r7, #16
    c564:	46bd      	mov	sp, r7
    c566:	bd80      	pop	{r7, pc}
    c568:	0000c43d 	.word	0x0000c43d
    c56c:	0000c3a3 	.word	0x0000c3a3
    c570:	0000c419 	.word	0x0000c419

0000c574 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c574:	b580      	push	{r7, lr}
    c576:	b086      	sub	sp, #24
    c578:	af00      	add	r7, sp, #0
    c57a:	60f8      	str	r0, [r7, #12]
    c57c:	60b9      	str	r1, [r7, #8]
    c57e:	4613      	mov	r3, r2
    c580:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c582:	2300      	movs	r3, #0
    c584:	75fb      	strb	r3, [r7, #23]
    c586:	e020      	b.n	c5ca <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c588:	2203      	movs	r2, #3
    c58a:	68b9      	ldr	r1, [r7, #8]
    c58c:	68f8      	ldr	r0, [r7, #12]
    c58e:	4b13      	ldr	r3, [pc, #76]	; (c5dc <usb_find_str_desc+0x68>)
    c590:	4798      	blx	r3
    c592:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c594:	68fb      	ldr	r3, [r7, #12]
    c596:	2b00      	cmp	r3, #0
    c598:	d015      	beq.n	c5c6 <usb_find_str_desc+0x52>
			_desc_len_check();
    c59a:	68f8      	ldr	r0, [r7, #12]
    c59c:	4b10      	ldr	r3, [pc, #64]	; (c5e0 <usb_find_str_desc+0x6c>)
    c59e:	4798      	blx	r3
    c5a0:	4603      	mov	r3, r0
    c5a2:	2b01      	cmp	r3, #1
    c5a4:	d801      	bhi.n	c5aa <usb_find_str_desc+0x36>
    c5a6:	2300      	movs	r3, #0
    c5a8:	e014      	b.n	c5d4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    c5aa:	7dfa      	ldrb	r2, [r7, #23]
    c5ac:	79fb      	ldrb	r3, [r7, #7]
    c5ae:	429a      	cmp	r2, r3
    c5b0:	d101      	bne.n	c5b6 <usb_find_str_desc+0x42>
				return desc;
    c5b2:	68fb      	ldr	r3, [r7, #12]
    c5b4:	e00e      	b.n	c5d4 <usb_find_str_desc+0x60>
			}
			i++;
    c5b6:	7dfb      	ldrb	r3, [r7, #23]
    c5b8:	3301      	adds	r3, #1
    c5ba:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c5bc:	68f8      	ldr	r0, [r7, #12]
    c5be:	4b09      	ldr	r3, [pc, #36]	; (c5e4 <usb_find_str_desc+0x70>)
    c5c0:	4798      	blx	r3
    c5c2:	60f8      	str	r0, [r7, #12]
    c5c4:	e001      	b.n	c5ca <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c5c6:	2300      	movs	r3, #0
    c5c8:	e004      	b.n	c5d4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c5ca:	68fa      	ldr	r2, [r7, #12]
    c5cc:	68bb      	ldr	r3, [r7, #8]
    c5ce:	429a      	cmp	r2, r3
    c5d0:	d3da      	bcc.n	c588 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c5d2:	2300      	movs	r3, #0
}
    c5d4:	4618      	mov	r0, r3
    c5d6:	3718      	adds	r7, #24
    c5d8:	46bd      	mov	sp, r7
    c5da:	bd80      	pop	{r7, pc}
    c5dc:	0000c43d 	.word	0x0000c43d
    c5e0:	0000c3a3 	.word	0x0000c3a3
    c5e4:	0000c3d5 	.word	0x0000c3d5

0000c5e8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    c5e8:	b480      	push	{r7}
    c5ea:	b083      	sub	sp, #12
    c5ec:	af00      	add	r7, sp, #0
    c5ee:	6078      	str	r0, [r7, #4]
    c5f0:	4a05      	ldr	r2, [pc, #20]	; (c608 <_ZN5PrintC1Ev+0x20>)
    c5f2:	687b      	ldr	r3, [r7, #4]
    c5f4:	601a      	str	r2, [r3, #0]
    c5f6:	687b      	ldr	r3, [r7, #4]
    c5f8:	2200      	movs	r2, #0
    c5fa:	605a      	str	r2, [r3, #4]
    c5fc:	687b      	ldr	r3, [r7, #4]
    c5fe:	4618      	mov	r0, r3
    c600:	370c      	adds	r7, #12
    c602:	46bd      	mov	sp, r7
    c604:	bc80      	pop	{r7}
    c606:	4770      	bx	lr
    c608:	0000d848 	.word	0x0000d848

0000c60c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    c60c:	b480      	push	{r7}
    c60e:	b083      	sub	sp, #12
    c610:	af00      	add	r7, sp, #0
    c612:	6078      	str	r0, [r7, #4]
    c614:	2300      	movs	r3, #0
    c616:	4618      	mov	r0, r3
    c618:	370c      	adds	r7, #12
    c61a:	46bd      	mov	sp, r7
    c61c:	bc80      	pop	{r7}
    c61e:	4770      	bx	lr

0000c620 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    c620:	b480      	push	{r7}
    c622:	b083      	sub	sp, #12
    c624:	af00      	add	r7, sp, #0
    c626:	6078      	str	r0, [r7, #4]
    c628:	bf00      	nop
    c62a:	370c      	adds	r7, #12
    c62c:	46bd      	mov	sp, r7
    c62e:	bc80      	pop	{r7}
    c630:	4770      	bx	lr
	...

0000c634 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    c634:	b580      	push	{r7, lr}
    c636:	b082      	sub	sp, #8
    c638:	af00      	add	r7, sp, #0
    c63a:	6078      	str	r0, [r7, #4]
    c63c:	687b      	ldr	r3, [r7, #4]
    c63e:	4618      	mov	r0, r3
    c640:	4b06      	ldr	r3, [pc, #24]	; (c65c <_ZN6StreamC1Ev+0x28>)
    c642:	4798      	blx	r3
    c644:	4a06      	ldr	r2, [pc, #24]	; (c660 <_ZN6StreamC1Ev+0x2c>)
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	601a      	str	r2, [r3, #0]
    c64a:	687b      	ldr	r3, [r7, #4]
    c64c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c650:	609a      	str	r2, [r3, #8]
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	4618      	mov	r0, r3
    c656:	3708      	adds	r7, #8
    c658:	46bd      	mov	sp, r7
    c65a:	bd80      	pop	{r7, pc}
    c65c:	0000c5e9 	.word	0x0000c5e9
    c660:	0000d80c 	.word	0x0000d80c

0000c664 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    c664:	b480      	push	{r7}
    c666:	b083      	sub	sp, #12
    c668:	af00      	add	r7, sp, #0
    c66a:	4603      	mov	r3, r0
    c66c:	603a      	str	r2, [r7, #0]
    c66e:	71fb      	strb	r3, [r7, #7]
    c670:	460b      	mov	r3, r1
    c672:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    c674:	4b08      	ldr	r3, [pc, #32]	; (c698 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    c676:	681b      	ldr	r3, [r3, #0]
    c678:	2201      	movs	r2, #1
    c67a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    c67c:	4b06      	ldr	r3, [pc, #24]	; (c698 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    c67e:	681b      	ldr	r3, [r3, #0]
    c680:	2201      	movs	r2, #1
    c682:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    c684:	4b04      	ldr	r3, [pc, #16]	; (c698 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    c686:	681b      	ldr	r3, [r3, #0]
    c688:	2201      	movs	r2, #1
    c68a:	741a      	strb	r2, [r3, #16]


	return false;
    c68c:	2300      	movs	r3, #0
}
    c68e:	4618      	mov	r0, r3
    c690:	370c      	adds	r7, #12
    c692:	46bd      	mov	sp, r7
    c694:	bc80      	pop	{r7}
    c696:	4770      	bx	lr
    c698:	20000b58 	.word	0x20000b58

0000c69c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    c69c:	b480      	push	{r7}
    c69e:	b083      	sub	sp, #12
    c6a0:	af00      	add	r7, sp, #0
    c6a2:	4603      	mov	r3, r0
    c6a4:	603a      	str	r2, [r7, #0]
    c6a6:	71fb      	strb	r3, [r7, #7]
    c6a8:	460b      	mov	r3, r1
    c6aa:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    c6ac:	4b08      	ldr	r3, [pc, #32]	; (c6d0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    c6ae:	681b      	ldr	r3, [r3, #0]
    c6b0:	2201      	movs	r2, #1
    c6b2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    c6b4:	4b06      	ldr	r3, [pc, #24]	; (c6d0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    c6b6:	681b      	ldr	r3, [r3, #0]
    c6b8:	2201      	movs	r2, #1
    c6ba:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    c6bc:	4b04      	ldr	r3, [pc, #16]	; (c6d0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    c6be:	681b      	ldr	r3, [r3, #0]
    c6c0:	2201      	movs	r2, #1
    c6c2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    c6c4:	2300      	movs	r3, #0
}
    c6c6:	4618      	mov	r0, r3
    c6c8:	370c      	adds	r7, #12
    c6ca:	46bd      	mov	sp, r7
    c6cc:	bc80      	pop	{r7}
    c6ce:	4770      	bx	lr
    c6d0:	20000b58 	.word	0x20000b58

0000c6d4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    c6d4:	b580      	push	{r7, lr}
    c6d6:	b082      	sub	sp, #8
    c6d8:	af00      	add	r7, sp, #0
    c6da:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    c6dc:	793b      	ldrb	r3, [r7, #4]
    c6de:	f003 0301 	and.w	r3, r3, #1
    c6e2:	b2db      	uxtb	r3, r3
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d013      	beq.n	c710 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    c6e8:	490c      	ldr	r1, [pc, #48]	; (c71c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    c6ea:	2000      	movs	r0, #0
    c6ec:	4b0c      	ldr	r3, [pc, #48]	; (c720 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    c6ee:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    c6f0:	490c      	ldr	r1, [pc, #48]	; (c724 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    c6f2:	2001      	movs	r0, #1
    c6f4:	4b0a      	ldr	r3, [pc, #40]	; (c720 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    c6f6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    c6f8:	4b0b      	ldr	r3, [pc, #44]	; (c728 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    c6fa:	681b      	ldr	r3, [r3, #0]
    c6fc:	2201      	movs	r2, #1
    c6fe:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    c700:	4b09      	ldr	r3, [pc, #36]	; (c728 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    c702:	681b      	ldr	r3, [r3, #0]
    c704:	2201      	movs	r2, #1
    c706:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    c708:	4b07      	ldr	r3, [pc, #28]	; (c728 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    c70a:	681b      	ldr	r3, [r3, #0]
    c70c:	2201      	movs	r2, #1
    c70e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    c710:	2300      	movs	r3, #0
}
    c712:	4618      	mov	r0, r3
    c714:	3708      	adds	r7, #8
    c716:	46bd      	mov	sp, r7
    c718:	bd80      	pop	{r7, pc}
    c71a:	bf00      	nop
    c71c:	0000c665 	.word	0x0000c665
    c720:	0000b5b1 	.word	0x0000b5b1
    c724:	0000c69d 	.word	0x0000c69d
    c728:	20000b58 	.word	0x20000b58

0000c72c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    c72c:	b580      	push	{r7, lr}
    c72e:	b082      	sub	sp, #8
    c730:	af00      	add	r7, sp, #0
    c732:	6078      	str	r0, [r7, #4]
    c734:	687b      	ldr	r3, [r7, #4]
    c736:	4618      	mov	r0, r3
    c738:	4b0a      	ldr	r3, [pc, #40]	; (c764 <_ZN9CDC_ClassC1Ev+0x38>)
    c73a:	4798      	blx	r3
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	3310      	adds	r3, #16
    c740:	4618      	mov	r0, r3
    c742:	4b09      	ldr	r3, [pc, #36]	; (c768 <_ZN9CDC_ClassC1Ev+0x3c>)
    c744:	4798      	blx	r3
    c746:	4a09      	ldr	r2, [pc, #36]	; (c76c <_ZN9CDC_ClassC1Ev+0x40>)
    c748:	687b      	ldr	r3, [r7, #4]
    c74a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	f04f 32ff 	mov.w	r2, #4294967295
    c752:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    c754:	4a06      	ldr	r2, [pc, #24]	; (c770 <_ZN9CDC_ClassC1Ev+0x44>)
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    c75a:	687b      	ldr	r3, [r7, #4]
    c75c:	4618      	mov	r0, r3
    c75e:	3708      	adds	r7, #8
    c760:	46bd      	mov	sp, r7
    c762:	bd80      	pop	{r7, pc}
    c764:	0000c635 	.word	0x0000c635
    c768:	0000cc79 	.word	0x0000cc79
    c76c:	0000d7dc 	.word	0x0000d7dc
    c770:	20000b58 	.word	0x20000b58

0000c774 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    c774:	b580      	push	{r7, lr}
    c776:	b082      	sub	sp, #8
    c778:	af00      	add	r7, sp, #0
    c77a:	6078      	str	r0, [r7, #4]
    c77c:	4a06      	ldr	r2, [pc, #24]	; (c798 <_ZN9CDC_ClassD1Ev+0x24>)
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	601a      	str	r2, [r3, #0]
    c782:	687b      	ldr	r3, [r7, #4]
    c784:	3310      	adds	r3, #16
    c786:	4618      	mov	r0, r3
    c788:	4b04      	ldr	r3, [pc, #16]	; (c79c <_ZN9CDC_ClassD1Ev+0x28>)
    c78a:	4798      	blx	r3
{
} //~CDC_Class
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	4618      	mov	r0, r3
    c790:	3708      	adds	r7, #8
    c792:	46bd      	mov	sp, r7
    c794:	bd80      	pop	{r7, pc}
    c796:	bf00      	nop
    c798:	0000d7dc 	.word	0x0000d7dc
    c79c:	0000cc99 	.word	0x0000cc99

0000c7a0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    c7a0:	b580      	push	{r7, lr}
    c7a2:	b082      	sub	sp, #8
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	3310      	adds	r3, #16
    c7ac:	4618      	mov	r0, r3
    c7ae:	4b06      	ldr	r3, [pc, #24]	; (c7c8 <_ZN9CDC_Class4InitEv+0x28>)
    c7b0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    c7b2:	4906      	ldr	r1, [pc, #24]	; (c7cc <_ZN9CDC_Class4InitEv+0x2c>)
    c7b4:	2003      	movs	r0, #3
    c7b6:	4b06      	ldr	r3, [pc, #24]	; (c7d0 <_ZN9CDC_Class4InitEv+0x30>)
    c7b8:	4798      	blx	r3
	
		
	if (plugged)
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
    c7be:	bf00      	nop
    c7c0:	3708      	adds	r7, #8
    c7c2:	46bd      	mov	sp, r7
    c7c4:	bd80      	pop	{r7, pc}
    c7c6:	bf00      	nop
    c7c8:	0000ccad 	.word	0x0000ccad
    c7cc:	0000c6d5 	.word	0x0000c6d5
    c7d0:	0000b5b1 	.word	0x0000b5b1

0000c7d4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    c7d4:	b580      	push	{r7, lr}
    c7d6:	b082      	sub	sp, #8
    c7d8:	af00      	add	r7, sp, #0
    c7da:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    c7dc:	4b03      	ldr	r3, [pc, #12]	; (c7ec <_ZN9CDC_Class9IsEnabledEv+0x18>)
    c7de:	4798      	blx	r3
    c7e0:	4603      	mov	r3, r0
	
}
    c7e2:	4618      	mov	r0, r3
    c7e4:	3708      	adds	r7, #8
    c7e6:	46bd      	mov	sp, r7
    c7e8:	bd80      	pop	{r7, pc}
    c7ea:	bf00      	nop
    c7ec:	0000b629 	.word	0x0000b629

0000c7f0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b084      	sub	sp, #16
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    c7f8:	687b      	ldr	r3, [r7, #4]
    c7fa:	699b      	ldr	r3, [r3, #24]
    c7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    c800:	bf14      	ite	ne
    c802:	2301      	movne	r3, #1
    c804:	2300      	moveq	r3, #0
    c806:	b2db      	uxtb	r3, r3
    c808:	2b00      	cmp	r3, #0
    c80a:	d002      	beq.n	c812 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    c80c:	687b      	ldr	r3, [r7, #4]
    c80e:	699b      	ldr	r3, [r3, #24]
    c810:	e011      	b.n	c836 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    c812:	687b      	ldr	r3, [r7, #4]
    c814:	681b      	ldr	r3, [r3, #0]
    c816:	331c      	adds	r3, #28
    c818:	681b      	ldr	r3, [r3, #0]
    c81a:	f107 010f 	add.w	r1, r7, #15
    c81e:	2201      	movs	r2, #1
    c820:	6878      	ldr	r0, [r7, #4]
    c822:	4798      	blx	r3
    c824:	4602      	mov	r2, r0
    c826:	687b      	ldr	r3, [r7, #4]
    c828:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    c82a:	7bfb      	ldrb	r3, [r7, #15]
    c82c:	461a      	mov	r2, r3
    c82e:	687b      	ldr	r3, [r7, #4]
    c830:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    c832:	687b      	ldr	r3, [r7, #4]
    c834:	699b      	ldr	r3, [r3, #24]
}
    c836:	4618      	mov	r0, r3
    c838:	3710      	adds	r7, #16
    c83a:	46bd      	mov	sp, r7
    c83c:	bd80      	pop	{r7, pc}
	...

0000c840 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    c840:	b580      	push	{r7, lr}
    c842:	b086      	sub	sp, #24
    c844:	af00      	add	r7, sp, #0
    c846:	60f8      	str	r0, [r7, #12]
    c848:	60b9      	str	r1, [r7, #8]
    c84a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    c84c:	68fb      	ldr	r3, [r7, #12]
    c84e:	2200      	movs	r2, #0
    c850:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    c852:	687b      	ldr	r3, [r7, #4]
    c854:	4619      	mov	r1, r3
    c856:	68b8      	ldr	r0, [r7, #8]
    c858:	4b08      	ldr	r3, [pc, #32]	; (c87c <_ZN9CDC_Class8readDataEPvl+0x3c>)
    c85a:	4798      	blx	r3
    c85c:	4603      	mov	r3, r0
    c85e:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    c860:	68fb      	ldr	r3, [r7, #12]
    c862:	7d5b      	ldrb	r3, [r3, #21]
    c864:	b2db      	uxtb	r3, r3
    c866:	f083 0301 	eor.w	r3, r3, #1
    c86a:	b2db      	uxtb	r3, r3
    c86c:	2b00      	cmp	r3, #0
    c86e:	d000      	beq.n	c872 <_ZN9CDC_Class8readDataEPvl+0x32>
    c870:	e7f6      	b.n	c860 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    c872:	7dfb      	ldrb	r3, [r7, #23]
}
    c874:	4618      	mov	r0, r3
    c876:	3718      	adds	r7, #24
    c878:	46bd      	mov	sp, r7
    c87a:	bd80      	pop	{r7, pc}
    c87c:	0000b505 	.word	0x0000b505

0000c880 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    c880:	b580      	push	{r7, lr}
    c882:	b084      	sub	sp, #16
    c884:	af00      	add	r7, sp, #0
    c886:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	2200      	movs	r2, #0
    c88c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    c88e:	f107 030f 	add.w	r3, r7, #15
    c892:	2101      	movs	r1, #1
    c894:	4618      	mov	r0, r3
    c896:	4b08      	ldr	r3, [pc, #32]	; (c8b8 <_ZN9CDC_Class4readEv+0x38>)
    c898:	4798      	blx	r3
	while(!rxReady);
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	7d5b      	ldrb	r3, [r3, #21]
    c89e:	b2db      	uxtb	r3, r3
    c8a0:	f083 0301 	eor.w	r3, r3, #1
    c8a4:	b2db      	uxtb	r3, r3
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d000      	beq.n	c8ac <_ZN9CDC_Class4readEv+0x2c>
    c8aa:	e7f6      	b.n	c89a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    c8ac:	7bfb      	ldrb	r3, [r7, #15]
}
    c8ae:	4618      	mov	r0, r3
    c8b0:	3710      	adds	r7, #16
    c8b2:	46bd      	mov	sp, r7
    c8b4:	bd80      	pop	{r7, pc}
    c8b6:	bf00      	nop
    c8b8:	0000b505 	.word	0x0000b505

0000c8bc <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    c8bc:	b580      	push	{r7, lr}
    c8be:	b082      	sub	sp, #8
    c8c0:	af00      	add	r7, sp, #0
    c8c2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    c8c4:	687b      	ldr	r3, [r7, #4]
    c8c6:	331c      	adds	r3, #28
    c8c8:	2140      	movs	r1, #64	; 0x40
    c8ca:	4618      	mov	r0, r3
    c8cc:	4b02      	ldr	r3, [pc, #8]	; (c8d8 <_ZN9CDC_Class5flushEv+0x1c>)
    c8ce:	4798      	blx	r3
}
    c8d0:	bf00      	nop
    c8d2:	3708      	adds	r7, #8
    c8d4:	46bd      	mov	sp, r7
    c8d6:	bd80      	pop	{r7, pc}
    c8d8:	0000b549 	.word	0x0000b549

0000c8dc <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    c8dc:	b580      	push	{r7, lr}
    c8de:	b082      	sub	sp, #8
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    c8e4:	4b02      	ldr	r3, [pc, #8]	; (c8f0 <_ZN9CDC_Class5clearEv+0x14>)
    c8e6:	4798      	blx	r3
}
    c8e8:	bf00      	nop
    c8ea:	3708      	adds	r7, #8
    c8ec:	46bd      	mov	sp, r7
    c8ee:	bd80      	pop	{r7, pc}
    c8f0:	0000b58d 	.word	0x0000b58d

0000c8f4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    c8f4:	b580      	push	{r7, lr}
    c8f6:	b082      	sub	sp, #8
    c8f8:	af00      	add	r7, sp, #0
    c8fa:	6078      	str	r0, [r7, #4]
    c8fc:	460b      	mov	r3, r1
    c8fe:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    c900:	687b      	ldr	r3, [r7, #4]
    c902:	7d1b      	ldrb	r3, [r3, #20]
    c904:	b2db      	uxtb	r3, r3
    c906:	f083 0301 	eor.w	r3, r3, #1
    c90a:	b2db      	uxtb	r3, r3
    c90c:	2b00      	cmp	r3, #0
    c90e:	d000      	beq.n	c912 <_ZN9CDC_Class5writeEh+0x1e>
    c910:	e7f6      	b.n	c900 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    c912:	687b      	ldr	r3, [r7, #4]
    c914:	681b      	ldr	r3, [r3, #0]
    c916:	3324      	adds	r3, #36	; 0x24
    c918:	681b      	ldr	r3, [r3, #0]
    c91a:	1cf9      	adds	r1, r7, #3
    c91c:	2201      	movs	r2, #1
    c91e:	6878      	ldr	r0, [r7, #4]
    c920:	4798      	blx	r3
    c922:	4603      	mov	r3, r0
}
    c924:	4618      	mov	r0, r3
    c926:	3708      	adds	r7, #8
    c928:	46bd      	mov	sp, r7
    c92a:	bd80      	pop	{r7, pc}

0000c92c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    c92c:	b580      	push	{r7, lr}
    c92e:	b086      	sub	sp, #24
    c930:	af00      	add	r7, sp, #0
    c932:	60f8      	str	r0, [r7, #12]
    c934:	60b9      	str	r1, [r7, #8]
    c936:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    c938:	68fb      	ldr	r3, [r7, #12]
    c93a:	2200      	movs	r2, #0
    c93c:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    c93e:	68fb      	ldr	r3, [r7, #12]
    c940:	3310      	adds	r3, #16
    c942:	4618      	mov	r0, r3
    c944:	4b14      	ldr	r3, [pc, #80]	; (c998 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    c946:	4798      	blx	r3
    c948:	4603      	mov	r3, r0
    c94a:	2b00      	cmp	r3, #0
    c94c:	d01e      	beq.n	c98c <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    c94e:	687b      	ldr	r3, [r7, #4]
    c950:	4619      	mov	r1, r3
    c952:	68b8      	ldr	r0, [r7, #8]
    c954:	4b11      	ldr	r3, [pc, #68]	; (c99c <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    c956:	4798      	blx	r3
    c958:	4603      	mov	r3, r0
    c95a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    c95c:	68fb      	ldr	r3, [r7, #12]
    c95e:	7d1b      	ldrb	r3, [r3, #20]
    c960:	b2db      	uxtb	r3, r3
    c962:	f083 0301 	eor.w	r3, r3, #1
    c966:	b2db      	uxtb	r3, r3
    c968:	2b00      	cmp	r3, #0
    c96a:	d006      	beq.n	c97a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    c96c:	68fb      	ldr	r3, [r7, #12]
    c96e:	7c5b      	ldrb	r3, [r3, #17]
    c970:	b2db      	uxtb	r3, r3
    c972:	2b00      	cmp	r3, #0
    c974:	d001      	beq.n	c97a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    c976:	2301      	movs	r3, #1
    c978:	e000      	b.n	c97c <_ZN9CDC_Class9writeDataEPKvl+0x50>
    c97a:	2300      	movs	r3, #0
    c97c:	2b00      	cmp	r3, #0
    c97e:	d000      	beq.n	c982 <_ZN9CDC_Class9writeDataEPKvl+0x56>
    c980:	e7ec      	b.n	c95c <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
    c982:	4807      	ldr	r0, [pc, #28]	; (c9a0 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    c984:	4b07      	ldr	r3, [pc, #28]	; (c9a4 <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    c986:	4798      	blx	r3
		return r;
    c988:	697b      	ldr	r3, [r7, #20]
    c98a:	e000      	b.n	c98e <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    c98c:	2300      	movs	r3, #0
	}
	

}
    c98e:	4618      	mov	r0, r3
    c990:	3718      	adds	r7, #24
    c992:	46bd      	mov	sp, r7
    c994:	bd80      	pop	{r7, pc}
    c996:	bf00      	nop
    c998:	0000cd49 	.word	0x0000cd49
    c99c:	0000b549 	.word	0x0000b549
    c9a0:	20000bc4 	.word	0x20000bc4
    c9a4:	0000cf09 	.word	0x0000cf09

0000c9a8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    c9a8:	b580      	push	{r7, lr}
    c9aa:	b086      	sub	sp, #24
    c9ac:	af00      	add	r7, sp, #0
    c9ae:	60f8      	str	r0, [r7, #12]
    c9b0:	60b9      	str	r1, [r7, #8]
    c9b2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    c9b4:	68fb      	ldr	r3, [r7, #12]
    c9b6:	2200      	movs	r2, #0
    c9b8:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
    c9ba:	68fb      	ldr	r3, [r7, #12]
    c9bc:	3310      	adds	r3, #16
    c9be:	6879      	ldr	r1, [r7, #4]
    c9c0:	4618      	mov	r0, r3
    c9c2:	4b14      	ldr	r3, [pc, #80]	; (ca14 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    c9c4:	4798      	blx	r3
    c9c6:	4603      	mov	r3, r0
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d01c      	beq.n	ca06 <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    c9cc:	6879      	ldr	r1, [r7, #4]
    c9ce:	68b8      	ldr	r0, [r7, #8]
    c9d0:	4b11      	ldr	r3, [pc, #68]	; (ca18 <_ZN9CDC_Class5writeEPKhj+0x70>)
    c9d2:	4798      	blx	r3
    c9d4:	4603      	mov	r3, r0
    c9d6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    c9d8:	68fb      	ldr	r3, [r7, #12]
    c9da:	7d1b      	ldrb	r3, [r3, #20]
    c9dc:	b2db      	uxtb	r3, r3
    c9de:	f083 0301 	eor.w	r3, r3, #1
    c9e2:	b2db      	uxtb	r3, r3
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d006      	beq.n	c9f6 <_ZN9CDC_Class5writeEPKhj+0x4e>
    c9e8:	68fb      	ldr	r3, [r7, #12]
    c9ea:	7c5b      	ldrb	r3, [r3, #17]
    c9ec:	b2db      	uxtb	r3, r3
    c9ee:	2b00      	cmp	r3, #0
    c9f0:	d001      	beq.n	c9f6 <_ZN9CDC_Class5writeEPKhj+0x4e>
    c9f2:	2301      	movs	r3, #1
    c9f4:	e000      	b.n	c9f8 <_ZN9CDC_Class5writeEPKhj+0x50>
    c9f6:	2300      	movs	r3, #0
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	d000      	beq.n	c9fe <_ZN9CDC_Class5writeEPKhj+0x56>
    c9fc:	e7ec      	b.n	c9d8 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
    c9fe:	4807      	ldr	r0, [pc, #28]	; (ca1c <_ZN9CDC_Class5writeEPKhj+0x74>)
    ca00:	4b07      	ldr	r3, [pc, #28]	; (ca20 <_ZN9CDC_Class5writeEPKhj+0x78>)
    ca02:	4798      	blx	r3
    ca04:	e001      	b.n	ca0a <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
    ca06:	2300      	movs	r3, #0
    ca08:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    ca0a:	697b      	ldr	r3, [r7, #20]
}
    ca0c:	4618      	mov	r0, r3
    ca0e:	3718      	adds	r7, #24
    ca10:	46bd      	mov	sp, r7
    ca12:	bd80      	pop	{r7, pc}
    ca14:	0000cdc1 	.word	0x0000cdc1
    ca18:	0000b549 	.word	0x0000b549
    ca1c:	20000bc4 	.word	0x20000bc4
    ca20:	0000cf09 	.word	0x0000cf09

0000ca24 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    ca24:	b480      	push	{r7}
    ca26:	b083      	sub	sp, #12
    ca28:	af00      	add	r7, sp, #0
    ca2a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    ca2c:	687b      	ldr	r3, [r7, #4]
    ca2e:	7d5b      	ldrb	r3, [r3, #21]
    ca30:	b2db      	uxtb	r3, r3
    ca32:	2b00      	cmp	r3, #0
    ca34:	d006      	beq.n	ca44 <_ZN9CDC_Class9availableEv+0x20>
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	7d1b      	ldrb	r3, [r3, #20]
    ca3a:	b2db      	uxtb	r3, r3
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d001      	beq.n	ca44 <_ZN9CDC_Class9availableEv+0x20>
    ca40:	2301      	movs	r3, #1
    ca42:	e000      	b.n	ca46 <_ZN9CDC_Class9availableEv+0x22>
    ca44:	2300      	movs	r3, #0
    ca46:	2b00      	cmp	r3, #0
    ca48:	d001      	beq.n	ca4e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ca4a:	2301      	movs	r3, #1
    ca4c:	e000      	b.n	ca50 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ca4e:	2300      	movs	r3, #0
	}
	
}
    ca50:	4618      	mov	r0, r3
    ca52:	370c      	adds	r7, #12
    ca54:	46bd      	mov	sp, r7
    ca56:	bc80      	pop	{r7}
    ca58:	4770      	bx	lr
	...

0000ca5c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    ca5c:	b580      	push	{r7, lr}
    ca5e:	b082      	sub	sp, #8
    ca60:	af00      	add	r7, sp, #0
    ca62:	6078      	str	r0, [r7, #4]
    ca64:	6039      	str	r1, [r7, #0]
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	2b01      	cmp	r3, #1
    ca6a:	d10c      	bne.n	ca86 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ca6c:	683b      	ldr	r3, [r7, #0]
    ca6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ca72:	4293      	cmp	r3, r2
    ca74:	d107      	bne.n	ca86 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ca76:	4806      	ldr	r0, [pc, #24]	; (ca90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ca78:	4b06      	ldr	r3, [pc, #24]	; (ca94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ca7a:	4798      	blx	r3
    ca7c:	4a06      	ldr	r2, [pc, #24]	; (ca98 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ca7e:	4907      	ldr	r1, [pc, #28]	; (ca9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ca80:	4803      	ldr	r0, [pc, #12]	; (ca90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ca82:	4b07      	ldr	r3, [pc, #28]	; (caa0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ca84:	4798      	blx	r3
    ca86:	bf00      	nop
    ca88:	3708      	adds	r7, #8
    ca8a:	46bd      	mov	sp, r7
    ca8c:	bd80      	pop	{r7, pc}
    ca8e:	bf00      	nop
    ca90:	20000b5c 	.word	0x20000b5c
    ca94:	0000c72d 	.word	0x0000c72d
    ca98:	20000000 	.word	0x20000000
    ca9c:	0000c775 	.word	0x0000c775
    caa0:	0000d059 	.word	0x0000d059

0000caa4 <_GLOBAL__sub_I_ptrCDCClass>:
    caa4:	b580      	push	{r7, lr}
    caa6:	af00      	add	r7, sp, #0
    caa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    caac:	2001      	movs	r0, #1
    caae:	4b01      	ldr	r3, [pc, #4]	; (cab4 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    cab0:	4798      	blx	r3
    cab2:	bd80      	pop	{r7, pc}
    cab4:	0000ca5d 	.word	0x0000ca5d

0000cab8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    cab8:	b580      	push	{r7, lr}
    caba:	b086      	sub	sp, #24
    cabc:	af00      	add	r7, sp, #0
    cabe:	60f8      	str	r0, [r7, #12]
    cac0:	60b9      	str	r1, [r7, #8]
    cac2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    cac4:	2300      	movs	r3, #0
    cac6:	617b      	str	r3, [r7, #20]
  while (size--) {
    cac8:	687b      	ldr	r3, [r7, #4]
    caca:	1e5a      	subs	r2, r3, #1
    cacc:	607a      	str	r2, [r7, #4]
    cace:	2b00      	cmp	r3, #0
    cad0:	bf14      	ite	ne
    cad2:	2301      	movne	r3, #1
    cad4:	2300      	moveq	r3, #0
    cad6:	b2db      	uxtb	r3, r3
    cad8:	2b00      	cmp	r3, #0
    cada:	d016      	beq.n	cb0a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    cadc:	68fb      	ldr	r3, [r7, #12]
    cade:	681b      	ldr	r3, [r3, #0]
    cae0:	681a      	ldr	r2, [r3, #0]
    cae2:	68bb      	ldr	r3, [r7, #8]
    cae4:	1c59      	adds	r1, r3, #1
    cae6:	60b9      	str	r1, [r7, #8]
    cae8:	781b      	ldrb	r3, [r3, #0]
    caea:	4619      	mov	r1, r3
    caec:	68f8      	ldr	r0, [r7, #12]
    caee:	4790      	blx	r2
    caf0:	4603      	mov	r3, r0
    caf2:	2b00      	cmp	r3, #0
    caf4:	bf14      	ite	ne
    caf6:	2301      	movne	r3, #1
    caf8:	2300      	moveq	r3, #0
    cafa:	b2db      	uxtb	r3, r3
    cafc:	2b00      	cmp	r3, #0
    cafe:	d003      	beq.n	cb08 <_ZN5Print5writeEPKhj+0x50>
    cb00:	697b      	ldr	r3, [r7, #20]
    cb02:	3301      	adds	r3, #1
    cb04:	617b      	str	r3, [r7, #20]
  while (size--) {
    cb06:	e7df      	b.n	cac8 <_ZN5Print5writeEPKhj+0x10>
    else break;
    cb08:	bf00      	nop
  }
  return n;
    cb0a:	697b      	ldr	r3, [r7, #20]
}
    cb0c:	4618      	mov	r0, r3
    cb0e:	3718      	adds	r7, #24
    cb10:	46bd      	mov	sp, r7
    cb12:	bd80      	pop	{r7, pc}

0000cb14 <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
    cb14:	b580      	push	{r7, lr}
    cb16:	b082      	sub	sp, #8
    cb18:	af00      	add	r7, sp, #0
    cb1a:	6078      	str	r0, [r7, #4]
    cb1c:	460b      	mov	r3, r1
    cb1e:	70fb      	strb	r3, [r7, #3]
  return write(c);
    cb20:	687b      	ldr	r3, [r7, #4]
    cb22:	681b      	ldr	r3, [r3, #0]
    cb24:	681b      	ldr	r3, [r3, #0]
    cb26:	78fa      	ldrb	r2, [r7, #3]
    cb28:	4611      	mov	r1, r2
    cb2a:	6878      	ldr	r0, [r7, #4]
    cb2c:	4798      	blx	r3
    cb2e:	4603      	mov	r3, r0
}
    cb30:	4618      	mov	r0, r3
    cb32:	3708      	adds	r7, #8
    cb34:	46bd      	mov	sp, r7
    cb36:	bd80      	pop	{r7, pc}

0000cb38 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    cb38:	b480      	push	{r7}
    cb3a:	b083      	sub	sp, #12
    cb3c:	af00      	add	r7, sp, #0
    cb3e:	6078      	str	r0, [r7, #4]
    cb40:	460b      	mov	r3, r1
    cb42:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    cb44:	78fb      	ldrb	r3, [r7, #3]
    cb46:	687a      	ldr	r2, [r7, #4]
    cb48:	01db      	lsls	r3, r3, #7
    cb4a:	4413      	add	r3, r2
    cb4c:	681b      	ldr	r3, [r3, #0]
}
    cb4e:	4618      	mov	r0, r3
    cb50:	370c      	adds	r7, #12
    cb52:	46bd      	mov	sp, r7
    cb54:	bc80      	pop	{r7}
    cb56:	4770      	bx	lr

0000cb58 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    cb58:	b480      	push	{r7}
    cb5a:	b083      	sub	sp, #12
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	6078      	str	r0, [r7, #4]
    cb60:	460b      	mov	r3, r1
    cb62:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    cb64:	78fb      	ldrb	r3, [r7, #3]
    cb66:	687a      	ldr	r2, [r7, #4]
    cb68:	01db      	lsls	r3, r3, #7
    cb6a:	4413      	add	r3, r2
    cb6c:	3310      	adds	r3, #16
    cb6e:	681b      	ldr	r3, [r3, #0]
}
    cb70:	4618      	mov	r0, r3
    cb72:	370c      	adds	r7, #12
    cb74:	46bd      	mov	sp, r7
    cb76:	bc80      	pop	{r7}
    cb78:	4770      	bx	lr

0000cb7a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    cb7a:	b480      	push	{r7}
    cb7c:	b083      	sub	sp, #12
    cb7e:	af00      	add	r7, sp, #0
    cb80:	6078      	str	r0, [r7, #4]
    cb82:	460b      	mov	r3, r1
    cb84:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    cb86:	78fb      	ldrb	r3, [r7, #3]
    cb88:	687a      	ldr	r2, [r7, #4]
    cb8a:	01db      	lsls	r3, r3, #7
    cb8c:	4413      	add	r3, r2
    cb8e:	3320      	adds	r3, #32
    cb90:	681b      	ldr	r3, [r3, #0]
}
    cb92:	4618      	mov	r0, r3
    cb94:	370c      	adds	r7, #12
    cb96:	46bd      	mov	sp, r7
    cb98:	bc80      	pop	{r7}
    cb9a:	4770      	bx	lr

0000cb9c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    cb9c:	b580      	push	{r7, lr}
    cb9e:	b086      	sub	sp, #24
    cba0:	af00      	add	r7, sp, #0
    cba2:	4603      	mov	r3, r0
    cba4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    cba6:	f107 030c 	add.w	r3, r7, #12
    cbaa:	4618      	mov	r0, r3
    cbac:	4b13      	ldr	r3, [pc, #76]	; (cbfc <_gpio_get_level+0x60>)
    cbae:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    cbb0:	79fb      	ldrb	r3, [r7, #7]
    cbb2:	4619      	mov	r1, r3
    cbb4:	4812      	ldr	r0, [pc, #72]	; (cc00 <_gpio_get_level+0x64>)
    cbb6:	4b13      	ldr	r3, [pc, #76]	; (cc04 <_gpio_get_level+0x68>)
    cbb8:	4798      	blx	r3
    cbba:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    cbbc:	79fb      	ldrb	r3, [r7, #7]
    cbbe:	4619      	mov	r1, r3
    cbc0:	480f      	ldr	r0, [pc, #60]	; (cc00 <_gpio_get_level+0x64>)
    cbc2:	4b11      	ldr	r3, [pc, #68]	; (cc08 <_gpio_get_level+0x6c>)
    cbc4:	4798      	blx	r3
    cbc6:	4602      	mov	r2, r0
    cbc8:	697b      	ldr	r3, [r7, #20]
    cbca:	43db      	mvns	r3, r3
    cbcc:	4013      	ands	r3, r2
    cbce:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    cbd0:	79fb      	ldrb	r3, [r7, #7]
    cbd2:	4619      	mov	r1, r3
    cbd4:	480a      	ldr	r0, [pc, #40]	; (cc00 <_gpio_get_level+0x64>)
    cbd6:	4b0d      	ldr	r3, [pc, #52]	; (cc0c <_gpio_get_level+0x70>)
    cbd8:	4798      	blx	r3
    cbda:	4602      	mov	r2, r0
    cbdc:	697b      	ldr	r3, [r7, #20]
    cbde:	4013      	ands	r3, r2
    cbe0:	693a      	ldr	r2, [r7, #16]
    cbe2:	4313      	orrs	r3, r2
    cbe4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    cbe6:	f107 030c 	add.w	r3, r7, #12
    cbea:	4618      	mov	r0, r3
    cbec:	4b08      	ldr	r3, [pc, #32]	; (cc10 <_gpio_get_level+0x74>)
    cbee:	4798      	blx	r3

	return tmp;
    cbf0:	693b      	ldr	r3, [r7, #16]
}
    cbf2:	4618      	mov	r0, r3
    cbf4:	3718      	adds	r7, #24
    cbf6:	46bd      	mov	sp, r7
    cbf8:	bd80      	pop	{r7, pc}
    cbfa:	bf00      	nop
    cbfc:	0000a725 	.word	0x0000a725
    cc00:	41008000 	.word	0x41008000
    cc04:	0000cb39 	.word	0x0000cb39
    cc08:	0000cb7b 	.word	0x0000cb7b
    cc0c:	0000cb59 	.word	0x0000cb59
    cc10:	0000a74b 	.word	0x0000a74b

0000cc14 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	4603      	mov	r3, r0
    cc1c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    cc1e:	79fb      	ldrb	r3, [r7, #7]
    cc20:	115b      	asrs	r3, r3, #5
    cc22:	b2db      	uxtb	r3, r3
    cc24:	4618      	mov	r0, r3
    cc26:	4b09      	ldr	r3, [pc, #36]	; (cc4c <gpio_get_pin_level+0x38>)
    cc28:	4798      	blx	r3
    cc2a:	4601      	mov	r1, r0
    cc2c:	79fb      	ldrb	r3, [r7, #7]
    cc2e:	f003 031f 	and.w	r3, r3, #31
    cc32:	2201      	movs	r2, #1
    cc34:	fa02 f303 	lsl.w	r3, r2, r3
    cc38:	400b      	ands	r3, r1
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	bf14      	ite	ne
    cc3e:	2301      	movne	r3, #1
    cc40:	2300      	moveq	r3, #0
    cc42:	b2db      	uxtb	r3, r3
}
    cc44:	4618      	mov	r0, r3
    cc46:	3708      	adds	r7, #8
    cc48:	46bd      	mov	sp, r7
    cc4a:	bd80      	pop	{r7, pc}
    cc4c:	0000cb9d 	.word	0x0000cb9d

0000cc50 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    cc50:	b480      	push	{r7}
    cc52:	b083      	sub	sp, #12
    cc54:	af00      	add	r7, sp, #0
    cc56:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    cc58:	4b06      	ldr	r3, [pc, #24]	; (cc74 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    cc5a:	681b      	ldr	r3, [r3, #0]
    cc5c:	2201      	movs	r2, #1
    cc5e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    cc60:	4b04      	ldr	r3, [pc, #16]	; (cc74 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    cc62:	681b      	ldr	r3, [r3, #0]
    cc64:	2200      	movs	r2, #0
    cc66:	705a      	strb	r2, [r3, #1]
}
    cc68:	bf00      	nop
    cc6a:	370c      	adds	r7, #12
    cc6c:	46bd      	mov	sp, r7
    cc6e:	bc80      	pop	{r7}
    cc70:	4770      	bx	lr
    cc72:	bf00      	nop
    cc74:	20000bbc 	.word	0x20000bbc

0000cc78 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    cc78:	b480      	push	{r7}
    cc7a:	b083      	sub	sp, #12
    cc7c:	af00      	add	r7, sp, #0
    cc7e:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    cc80:	4a04      	ldr	r2, [pc, #16]	; (cc94 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    cc86:	687b      	ldr	r3, [r7, #4]
    cc88:	4618      	mov	r0, r3
    cc8a:	370c      	adds	r7, #12
    cc8c:	46bd      	mov	sp, r7
    cc8e:	bc80      	pop	{r7}
    cc90:	4770      	bx	lr
    cc92:	bf00      	nop
    cc94:	20000bbc 	.word	0x20000bbc

0000cc98 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    cc98:	b480      	push	{r7}
    cc9a:	b083      	sub	sp, #12
    cc9c:	af00      	add	r7, sp, #0
    cc9e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	4618      	mov	r0, r3
    cca4:	370c      	adds	r7, #12
    cca6:	46bd      	mov	sp, r7
    cca8:	bc80      	pop	{r7}
    ccaa:	4770      	bx	lr

0000ccac <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    ccac:	b580      	push	{r7, lr}
    ccae:	b082      	sub	sp, #8
    ccb0:	af00      	add	r7, sp, #0
    ccb2:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    ccb4:	2040      	movs	r0, #64	; 0x40
    ccb6:	4b1c      	ldr	r3, [pc, #112]	; (cd28 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    ccb8:	4798      	blx	r3
    ccba:	4603      	mov	r3, r0
    ccbc:	461a      	mov	r2, r3
    ccbe:	687b      	ldr	r3, [r7, #4]
    ccc0:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    ccc2:	687b      	ldr	r3, [r7, #4]
    ccc4:	78db      	ldrb	r3, [r3, #3]
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d024      	beq.n	cd14 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    ccca:	687b      	ldr	r3, [r7, #4]
    cccc:	2200      	movs	r2, #0
    ccce:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    ccd0:	687b      	ldr	r3, [r7, #4]
    ccd2:	2201      	movs	r2, #1
    ccd4:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ccd6:	f44f 7216 	mov.w	r2, #600	; 0x258
    ccda:	4914      	ldr	r1, [pc, #80]	; (cd2c <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    ccdc:	4814      	ldr	r0, [pc, #80]	; (cd30 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ccde:	4b15      	ldr	r3, [pc, #84]	; (cd34 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    cce0:	4798      	blx	r3
			usbTimer.Start();
    cce2:	4813      	ldr	r0, [pc, #76]	; (cd30 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    cce4:	4b14      	ldr	r3, [pc, #80]	; (cd38 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    cce6:	4798      	blx	r3
			while (!usb.IsEnabled()){
    cce8:	4814      	ldr	r0, [pc, #80]	; (cd3c <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    ccea:	4b15      	ldr	r3, [pc, #84]	; (cd40 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ccec:	4798      	blx	r3
    ccee:	4603      	mov	r3, r0
    ccf0:	f083 0301 	eor.w	r3, r3, #1
    ccf4:	b2db      	uxtb	r3, r3
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d008      	beq.n	cd0c <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    ccfa:	687b      	ldr	r3, [r7, #4]
    ccfc:	789b      	ldrb	r3, [r3, #2]
    ccfe:	b2db      	uxtb	r3, r3
    cd00:	2b00      	cmp	r3, #0
    cd02:	d0f1      	beq.n	cce8 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    cd04:	687b      	ldr	r3, [r7, #4]
    cd06:	2200      	movs	r2, #0
    cd08:	701a      	strb	r2, [r3, #0]
					return;
    cd0a:	e009      	b.n	cd20 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
    cd0c:	4808      	ldr	r0, [pc, #32]	; (cd30 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    cd0e:	4b0d      	ldr	r3, [pc, #52]	; (cd44 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    cd10:	4798      	blx	r3
    cd12:	e005      	b.n	cd20 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    cd14:	687b      	ldr	r3, [r7, #4]
    cd16:	2200      	movs	r2, #0
    cd18:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    cd1a:	687b      	ldr	r3, [r7, #4]
    cd1c:	2200      	movs	r2, #0
    cd1e:	705a      	strb	r2, [r3, #1]
		}
		
}
    cd20:	3708      	adds	r7, #8
    cd22:	46bd      	mov	sp, r7
    cd24:	bd80      	pop	{r7, pc}
    cd26:	bf00      	nop
    cd28:	0000cc15 	.word	0x0000cc15
    cd2c:	0000cc51 	.word	0x0000cc51
    cd30:	20000bc4 	.word	0x20000bc4
    cd34:	0000cf8d 	.word	0x0000cf8d
    cd38:	0000cee5 	.word	0x0000cee5
    cd3c:	20000b5c 	.word	0x20000b5c
    cd40:	0000c7d5 	.word	0x0000c7d5
    cd44:	0000cf09 	.word	0x0000cf09

0000cd48 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    cd48:	b580      	push	{r7, lr}
    cd4a:	b082      	sub	sp, #8
    cd4c:	af00      	add	r7, sp, #0
    cd4e:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    cd50:	687b      	ldr	r3, [r7, #4]
    cd52:	785b      	ldrb	r3, [r3, #1]
    cd54:	b2db      	uxtb	r3, r3
    cd56:	2b00      	cmp	r3, #0
    cd58:	d01f      	beq.n	cd9a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    cd5a:	687b      	ldr	r3, [r7, #4]
    cd5c:	781b      	ldrb	r3, [r3, #0]
    cd5e:	b2db      	uxtb	r3, r3
    cd60:	2b00      	cmp	r3, #0
    cd62:	d105      	bne.n	cd70 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    cd64:	4812      	ldr	r0, [pc, #72]	; (cdb0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    cd66:	4b13      	ldr	r3, [pc, #76]	; (cdb4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    cd68:	4798      	blx	r3
    cd6a:	4603      	mov	r3, r0
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d001      	beq.n	cd74 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    cd70:	2301      	movs	r3, #1
    cd72:	e000      	b.n	cd76 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    cd74:	2300      	movs	r3, #0
    cd76:	2b00      	cmp	r3, #0
    cd78:	d00b      	beq.n	cd92 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
    cd7a:	480f      	ldr	r0, [pc, #60]	; (cdb8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    cd7c:	4b0f      	ldr	r3, [pc, #60]	; (cdbc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    cd7e:	4798      	blx	r3
    cd80:	4603      	mov	r3, r0
    cd82:	2b00      	cmp	r3, #0
    cd84:	bf0c      	ite	eq
    cd86:	2301      	moveq	r3, #1
    cd88:	2300      	movne	r3, #0
    cd8a:	b2da      	uxtb	r2, r3
    cd8c:	687b      	ldr	r3, [r7, #4]
    cd8e:	705a      	strb	r2, [r3, #1]
    cd90:	e007      	b.n	cda2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    cd92:	687b      	ldr	r3, [r7, #4]
    cd94:	2200      	movs	r2, #0
    cd96:	705a      	strb	r2, [r3, #1]
    cd98:	e003      	b.n	cda2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    cd9a:	687b      	ldr	r3, [r7, #4]
    cd9c:	785b      	ldrb	r3, [r3, #1]
    cd9e:	b2db      	uxtb	r3, r3
    cda0:	e002      	b.n	cda8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    cda2:	687b      	ldr	r3, [r7, #4]
    cda4:	785b      	ldrb	r3, [r3, #1]
    cda6:	b2db      	uxtb	r3, r3
}
    cda8:	4618      	mov	r0, r3
    cdaa:	3708      	adds	r7, #8
    cdac:	46bd      	mov	sp, r7
    cdae:	bd80      	pop	{r7, pc}
    cdb0:	20000b5c 	.word	0x20000b5c
    cdb4:	0000c7d5 	.word	0x0000c7d5
    cdb8:	20000bc4 	.word	0x20000bc4
    cdbc:	0000cee5 	.word	0x0000cee5

0000cdc0 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    cdc0:	b580      	push	{r7, lr}
    cdc2:	b082      	sub	sp, #8
    cdc4:	af00      	add	r7, sp, #0
    cdc6:	6078      	str	r0, [r7, #4]
    cdc8:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
    cdca:	687b      	ldr	r3, [r7, #4]
    cdcc:	785b      	ldrb	r3, [r3, #1]
    cdce:	b2db      	uxtb	r3, r3
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d02f      	beq.n	ce34 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
    cdd4:	687b      	ldr	r3, [r7, #4]
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	b2db      	uxtb	r3, r3
    cdda:	2b00      	cmp	r3, #0
    cddc:	d105      	bne.n	cdea <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
    cdde:	481b      	ldr	r0, [pc, #108]	; (ce4c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
    cde0:	4b1b      	ldr	r3, [pc, #108]	; (ce50 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
    cde2:	4798      	blx	r3
    cde4:	4603      	mov	r3, r0
    cde6:	2b00      	cmp	r3, #0
    cde8:	d001      	beq.n	cdee <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
    cdea:	2301      	movs	r3, #1
    cdec:	e000      	b.n	cdf0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
    cdee:	2300      	movs	r3, #0
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d01b      	beq.n	ce2c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
    cdf4:	4817      	ldr	r0, [pc, #92]	; (ce54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    cdf6:	4b18      	ldr	r3, [pc, #96]	; (ce58 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
    cdf8:	4798      	blx	r3
			usbTimer.Remove_task();
    cdfa:	4816      	ldr	r0, [pc, #88]	; (ce54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    cdfc:	4b17      	ldr	r3, [pc, #92]	; (ce5c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
    cdfe:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    ce00:	683a      	ldr	r2, [r7, #0]
    ce02:	4613      	mov	r3, r2
    ce04:	009b      	lsls	r3, r3, #2
    ce06:	4413      	add	r3, r2
    ce08:	005b      	lsls	r3, r3, #1
    ce0a:	461a      	mov	r2, r3
    ce0c:	4914      	ldr	r1, [pc, #80]	; (ce60 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
    ce0e:	4811      	ldr	r0, [pc, #68]	; (ce54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    ce10:	4b14      	ldr	r3, [pc, #80]	; (ce64 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
    ce12:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    ce14:	480f      	ldr	r0, [pc, #60]	; (ce54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    ce16:	4b14      	ldr	r3, [pc, #80]	; (ce68 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
    ce18:	4798      	blx	r3
    ce1a:	4603      	mov	r3, r0
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	bf0c      	ite	eq
    ce20:	2301      	moveq	r3, #1
    ce22:	2300      	movne	r3, #0
    ce24:	b2da      	uxtb	r2, r3
    ce26:	687b      	ldr	r3, [r7, #4]
    ce28:	705a      	strb	r2, [r3, #1]
    ce2a:	e007      	b.n	ce3c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
    ce2c:	687b      	ldr	r3, [r7, #4]
    ce2e:	2200      	movs	r2, #0
    ce30:	705a      	strb	r2, [r3, #1]
    ce32:	e003      	b.n	ce3c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
    ce34:	687b      	ldr	r3, [r7, #4]
    ce36:	785b      	ldrb	r3, [r3, #1]
    ce38:	b2db      	uxtb	r3, r3
    ce3a:	e002      	b.n	ce42 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
    ce3c:	687b      	ldr	r3, [r7, #4]
    ce3e:	785b      	ldrb	r3, [r3, #1]
    ce40:	b2db      	uxtb	r3, r3
    ce42:	4618      	mov	r0, r3
    ce44:	3708      	adds	r7, #8
    ce46:	46bd      	mov	sp, r7
    ce48:	bd80      	pop	{r7, pc}
    ce4a:	bf00      	nop
    ce4c:	20000b5c 	.word	0x20000b5c
    ce50:	0000c7d5 	.word	0x0000c7d5
    ce54:	20000bc4 	.word	0x20000bc4
    ce58:	0000cf09 	.word	0x0000cf09
    ce5c:	0000cfb5 	.word	0x0000cfb5
    ce60:	0000cc51 	.word	0x0000cc51
    ce64:	0000cf8d 	.word	0x0000cf8d
    ce68:	0000cee5 	.word	0x0000cee5

0000ce6c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    ce6c:	b580      	push	{r7, lr}
    ce6e:	b082      	sub	sp, #8
    ce70:	af00      	add	r7, sp, #0
    ce72:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    ce74:	4b04      	ldr	r3, [pc, #16]	; (ce88 <_ZL7task_cbPK10timer_task+0x1c>)
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	4618      	mov	r0, r3
    ce7a:	4b04      	ldr	r3, [pc, #16]	; (ce8c <_ZL7task_cbPK10timer_task+0x20>)
    ce7c:	4798      	blx	r3
}
    ce7e:	bf00      	nop
    ce80:	3708      	adds	r7, #8
    ce82:	46bd      	mov	sp, r7
    ce84:	bd80      	pop	{r7, pc}
    ce86:	bf00      	nop
    ce88:	20000bc0 	.word	0x20000bc0
    ce8c:	0000cf31 	.word	0x0000cf31

0000ce90 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    ce90:	b480      	push	{r7}
    ce92:	b083      	sub	sp, #12
    ce94:	af00      	add	r7, sp, #0
    ce96:	6078      	str	r0, [r7, #4]
    ce98:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    ce9a:	687b      	ldr	r3, [r7, #4]
    ce9c:	683a      	ldr	r2, [r7, #0]
    ce9e:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
    cea0:	4a07      	ldr	r2, [pc, #28]	; (cec0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
    cea2:	687b      	ldr	r3, [r7, #4]
    cea4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    cea6:	687b      	ldr	r3, [r7, #4]
    cea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ceac:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	4a04      	ldr	r2, [pc, #16]	; (cec4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    ceb2:	621a      	str	r2, [r3, #32]
} //Timer_Class
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	4618      	mov	r0, r3
    ceb8:	370c      	adds	r7, #12
    ceba:	46bd      	mov	sp, r7
    cebc:	bc80      	pop	{r7}
    cebe:	4770      	bx	lr
    cec0:	20000bc0 	.word	0x20000bc0
    cec4:	0000ce6d 	.word	0x0000ce6d

0000cec8 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    cec8:	b480      	push	{r7}
    ceca:	b083      	sub	sp, #12
    cecc:	af00      	add	r7, sp, #0
    cece:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ced0:	687b      	ldr	r3, [r7, #4]
    ced2:	2200      	movs	r2, #0
    ced4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ced6:	687b      	ldr	r3, [r7, #4]
    ced8:	4618      	mov	r0, r3
    ceda:	370c      	adds	r7, #12
    cedc:	46bd      	mov	sp, r7
    cede:	bc80      	pop	{r7}
    cee0:	4770      	bx	lr
	...

0000cee4 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    cee4:	b580      	push	{r7, lr}
    cee6:	b084      	sub	sp, #16
    cee8:	af00      	add	r7, sp, #0
    ceea:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	689b      	ldr	r3, [r3, #8]
    cef0:	4618      	mov	r0, r3
    cef2:	4b04      	ldr	r3, [pc, #16]	; (cf04 <_ZN17TimerSerial_Class5StartEv+0x20>)
    cef4:	4798      	blx	r3
    cef6:	60f8      	str	r0, [r7, #12]
	return status;
    cef8:	68fb      	ldr	r3, [r7, #12]
	
}
    cefa:	4618      	mov	r0, r3
    cefc:	3710      	adds	r7, #16
    cefe:	46bd      	mov	sp, r7
    cf00:	bd80      	pop	{r7, pc}
    cf02:	bf00      	nop
    cf04:	00002371 	.word	0x00002371

0000cf08 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    cf08:	b580      	push	{r7, lr}
    cf0a:	b084      	sub	sp, #16
    cf0c:	af00      	add	r7, sp, #0
    cf0e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    cf10:	687b      	ldr	r3, [r7, #4]
    cf12:	689b      	ldr	r3, [r3, #8]
    cf14:	4618      	mov	r0, r3
    cf16:	4b05      	ldr	r3, [pc, #20]	; (cf2c <_ZN17TimerSerial_Class4StopEv+0x24>)
    cf18:	4798      	blx	r3
    cf1a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    cf1c:	687b      	ldr	r3, [r7, #4]
    cf1e:	2200      	movs	r2, #0
    cf20:	705a      	strb	r2, [r3, #1]
	return status;
    cf22:	68fb      	ldr	r3, [r7, #12]
}
    cf24:	4618      	mov	r0, r3
    cf26:	3710      	adds	r7, #16
    cf28:	46bd      	mov	sp, r7
    cf2a:	bd80      	pop	{r7, pc}
    cf2c:	000023c5 	.word	0x000023c5

0000cf30 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
    cf30:	b480      	push	{r7}
    cf32:	b083      	sub	sp, #12
    cf34:	af00      	add	r7, sp, #0
    cf36:	6078      	str	r0, [r7, #4]
	timeout=1;
    cf38:	687b      	ldr	r3, [r7, #4]
    cf3a:	2201      	movs	r2, #1
    cf3c:	705a      	strb	r2, [r3, #1]
}
    cf3e:	bf00      	nop
    cf40:	370c      	adds	r7, #12
    cf42:	46bd      	mov	sp, r7
    cf44:	bc80      	pop	{r7}
    cf46:	4770      	bx	lr

0000cf48 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    cf48:	b580      	push	{r7, lr}
    cf4a:	b086      	sub	sp, #24
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	60f8      	str	r0, [r7, #12]
    cf50:	60b9      	str	r1, [r7, #8]
    cf52:	607a      	str	r2, [r7, #4]
    cf54:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    cf56:	68fb      	ldr	r3, [r7, #12]
    cf58:	687a      	ldr	r2, [r7, #4]
    cf5a:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    cf5c:	68fb      	ldr	r3, [r7, #12]
    cf5e:	68ba      	ldr	r2, [r7, #8]
    cf60:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    cf62:	68fb      	ldr	r3, [r7, #12]
    cf64:	78fa      	ldrb	r2, [r7, #3]
    cf66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    cf6a:	68fb      	ldr	r3, [r7, #12]
    cf6c:	689a      	ldr	r2, [r3, #8]
    cf6e:	68fb      	ldr	r3, [r7, #12]
    cf70:	3314      	adds	r3, #20
    cf72:	4619      	mov	r1, r3
    cf74:	4610      	mov	r0, r2
    cf76:	4b04      	ldr	r3, [pc, #16]	; (cf88 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
    cf78:	4798      	blx	r3
    cf7a:	6178      	str	r0, [r7, #20]
	
	return status;
    cf7c:	697b      	ldr	r3, [r7, #20]
}
    cf7e:	4618      	mov	r0, r3
    cf80:	3718      	adds	r7, #24
    cf82:	46bd      	mov	sp, r7
    cf84:	bd80      	pop	{r7, pc}
    cf86:	bf00      	nop
    cf88:	00002421 	.word	0x00002421

0000cf8c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    cf8c:	b590      	push	{r4, r7, lr}
    cf8e:	b087      	sub	sp, #28
    cf90:	af00      	add	r7, sp, #0
    cf92:	60f8      	str	r0, [r7, #12]
    cf94:	60b9      	str	r1, [r7, #8]
    cf96:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    cf98:	2300      	movs	r3, #0
    cf9a:	687a      	ldr	r2, [r7, #4]
    cf9c:	68b9      	ldr	r1, [r7, #8]
    cf9e:	68f8      	ldr	r0, [r7, #12]
    cfa0:	4c03      	ldr	r4, [pc, #12]	; (cfb0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    cfa2:	47a0      	blx	r4
    cfa4:	6178      	str	r0, [r7, #20]
	return status;
    cfa6:	697b      	ldr	r3, [r7, #20]
}
    cfa8:	4618      	mov	r0, r3
    cfaa:	371c      	adds	r7, #28
    cfac:	46bd      	mov	sp, r7
    cfae:	bd90      	pop	{r4, r7, pc}
    cfb0:	0000cf49 	.word	0x0000cf49

0000cfb4 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    cfb4:	b580      	push	{r7, lr}
    cfb6:	b082      	sub	sp, #8
    cfb8:	af00      	add	r7, sp, #0
    cfba:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    cfbc:	687b      	ldr	r3, [r7, #4]
    cfbe:	689a      	ldr	r2, [r3, #8]
    cfc0:	687b      	ldr	r3, [r7, #4]
    cfc2:	3314      	adds	r3, #20
    cfc4:	4619      	mov	r1, r3
    cfc6:	4610      	mov	r0, r2
    cfc8:	4b02      	ldr	r3, [pc, #8]	; (cfd4 <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
    cfca:	4798      	blx	r3
}
    cfcc:	bf00      	nop
    cfce:	3708      	adds	r7, #8
    cfd0:	46bd      	mov	sp, r7
    cfd2:	bd80      	pop	{r7, pc}
    cfd4:	00002519 	.word	0x00002519

0000cfd8 <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
    cfd8:	b580      	push	{r7, lr}
    cfda:	b082      	sub	sp, #8
    cfdc:	af00      	add	r7, sp, #0
    cfde:	6078      	str	r0, [r7, #4]
    cfe0:	6039      	str	r1, [r7, #0]
    cfe2:	687b      	ldr	r3, [r7, #4]
    cfe4:	2b01      	cmp	r3, #1
    cfe6:	d10d      	bne.n	d004 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    cfe8:	683b      	ldr	r3, [r7, #0]
    cfea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cfee:	4293      	cmp	r3, r2
    cff0:	d108      	bne.n	d004 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    cff2:	4906      	ldr	r1, [pc, #24]	; (d00c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    cff4:	4806      	ldr	r0, [pc, #24]	; (d010 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    cff6:	4b07      	ldr	r3, [pc, #28]	; (d014 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    cff8:	4798      	blx	r3
    cffa:	4a07      	ldr	r2, [pc, #28]	; (d018 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    cffc:	4907      	ldr	r1, [pc, #28]	; (d01c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    cffe:	4804      	ldr	r0, [pc, #16]	; (d010 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d000:	4b07      	ldr	r3, [pc, #28]	; (d020 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d002:	4798      	blx	r3
    d004:	bf00      	nop
    d006:	3708      	adds	r7, #8
    d008:	46bd      	mov	sp, r7
    d00a:	bd80      	pop	{r7, pc}
    d00c:	20000c88 	.word	0x20000c88
    d010:	20000bc4 	.word	0x20000bc4
    d014:	0000ce91 	.word	0x0000ce91
    d018:	20000000 	.word	0x20000000
    d01c:	0000cec9 	.word	0x0000cec9
    d020:	0000d059 	.word	0x0000d059

0000d024 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    d024:	b580      	push	{r7, lr}
    d026:	af00      	add	r7, sp, #0
    d028:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d02c:	2001      	movs	r0, #1
    d02e:	4b01      	ldr	r3, [pc, #4]	; (d034 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    d030:	4798      	blx	r3
    d032:	bd80      	pop	{r7, pc}
    d034:	0000cfd9 	.word	0x0000cfd9

0000d038 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    d038:	b480      	push	{r7}
    d03a:	b083      	sub	sp, #12
    d03c:	af00      	add	r7, sp, #0
    d03e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    d040:	2300      	movs	r3, #0
	}
    d042:	4618      	mov	r0, r3
    d044:	370c      	adds	r7, #12
    d046:	46bd      	mov	sp, r7
    d048:	bc80      	pop	{r7}
    d04a:	4770      	bx	lr

0000d04c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    d04c:	b480      	push	{r7}
    d04e:	af00      	add	r7, sp, #0
		}
    d050:	bf00      	nop
    d052:	46bd      	mov	sp, r7
    d054:	bc80      	pop	{r7}
    d056:	4770      	bx	lr

0000d058 <__aeabi_atexit>:
    d058:	460b      	mov	r3, r1
    d05a:	4601      	mov	r1, r0
    d05c:	4618      	mov	r0, r3
    d05e:	f000 b801 	b.w	d064 <__cxa_atexit>
    d062:	bf00      	nop

0000d064 <__cxa_atexit>:
    d064:	4613      	mov	r3, r2
    d066:	460a      	mov	r2, r1
    d068:	4601      	mov	r1, r0
    d06a:	2002      	movs	r0, #2
    d06c:	f000 b91e 	b.w	d2ac <__register_exitproc>

0000d070 <ffs>:
    d070:	b140      	cbz	r0, d084 <ffs+0x14>
    d072:	2300      	movs	r3, #0
    d074:	fa40 f103 	asr.w	r1, r0, r3
    d078:	1c5a      	adds	r2, r3, #1
    d07a:	07c9      	lsls	r1, r1, #31
    d07c:	4613      	mov	r3, r2
    d07e:	d5f9      	bpl.n	d074 <ffs+0x4>
    d080:	4610      	mov	r0, r2
    d082:	4770      	bx	lr
    d084:	4602      	mov	r2, r0
    d086:	4610      	mov	r0, r2
    d088:	4770      	bx	lr
    d08a:	bf00      	nop

0000d08c <__libc_init_array>:
    d08c:	b570      	push	{r4, r5, r6, lr}
    d08e:	4e0f      	ldr	r6, [pc, #60]	; (d0cc <__libc_init_array+0x40>)
    d090:	4d0f      	ldr	r5, [pc, #60]	; (d0d0 <__libc_init_array+0x44>)
    d092:	1b76      	subs	r6, r6, r5
    d094:	10b6      	asrs	r6, r6, #2
    d096:	bf18      	it	ne
    d098:	2400      	movne	r4, #0
    d09a:	d005      	beq.n	d0a8 <__libc_init_array+0x1c>
    d09c:	3401      	adds	r4, #1
    d09e:	f855 3b04 	ldr.w	r3, [r5], #4
    d0a2:	4798      	blx	r3
    d0a4:	42a6      	cmp	r6, r4
    d0a6:	d1f9      	bne.n	d09c <__libc_init_array+0x10>
    d0a8:	4e0a      	ldr	r6, [pc, #40]	; (d0d4 <__libc_init_array+0x48>)
    d0aa:	4d0b      	ldr	r5, [pc, #44]	; (d0d8 <__libc_init_array+0x4c>)
    d0ac:	1b76      	subs	r6, r6, r5
    d0ae:	f000 fbd5 	bl	d85c <_init>
    d0b2:	10b6      	asrs	r6, r6, #2
    d0b4:	bf18      	it	ne
    d0b6:	2400      	movne	r4, #0
    d0b8:	d006      	beq.n	d0c8 <__libc_init_array+0x3c>
    d0ba:	3401      	adds	r4, #1
    d0bc:	f855 3b04 	ldr.w	r3, [r5], #4
    d0c0:	4798      	blx	r3
    d0c2:	42a6      	cmp	r6, r4
    d0c4:	d1f9      	bne.n	d0ba <__libc_init_array+0x2e>
    d0c6:	bd70      	pop	{r4, r5, r6, pc}
    d0c8:	bd70      	pop	{r4, r5, r6, pc}
    d0ca:	bf00      	nop
    d0cc:	0000d868 	.word	0x0000d868
    d0d0:	0000d868 	.word	0x0000d868
    d0d4:	0000d878 	.word	0x0000d878
    d0d8:	0000d868 	.word	0x0000d868

0000d0dc <memcpy>:
    d0dc:	4684      	mov	ip, r0
    d0de:	ea41 0300 	orr.w	r3, r1, r0
    d0e2:	f013 0303 	ands.w	r3, r3, #3
    d0e6:	d16d      	bne.n	d1c4 <memcpy+0xe8>
    d0e8:	3a40      	subs	r2, #64	; 0x40
    d0ea:	d341      	bcc.n	d170 <memcpy+0x94>
    d0ec:	f851 3b04 	ldr.w	r3, [r1], #4
    d0f0:	f840 3b04 	str.w	r3, [r0], #4
    d0f4:	f851 3b04 	ldr.w	r3, [r1], #4
    d0f8:	f840 3b04 	str.w	r3, [r0], #4
    d0fc:	f851 3b04 	ldr.w	r3, [r1], #4
    d100:	f840 3b04 	str.w	r3, [r0], #4
    d104:	f851 3b04 	ldr.w	r3, [r1], #4
    d108:	f840 3b04 	str.w	r3, [r0], #4
    d10c:	f851 3b04 	ldr.w	r3, [r1], #4
    d110:	f840 3b04 	str.w	r3, [r0], #4
    d114:	f851 3b04 	ldr.w	r3, [r1], #4
    d118:	f840 3b04 	str.w	r3, [r0], #4
    d11c:	f851 3b04 	ldr.w	r3, [r1], #4
    d120:	f840 3b04 	str.w	r3, [r0], #4
    d124:	f851 3b04 	ldr.w	r3, [r1], #4
    d128:	f840 3b04 	str.w	r3, [r0], #4
    d12c:	f851 3b04 	ldr.w	r3, [r1], #4
    d130:	f840 3b04 	str.w	r3, [r0], #4
    d134:	f851 3b04 	ldr.w	r3, [r1], #4
    d138:	f840 3b04 	str.w	r3, [r0], #4
    d13c:	f851 3b04 	ldr.w	r3, [r1], #4
    d140:	f840 3b04 	str.w	r3, [r0], #4
    d144:	f851 3b04 	ldr.w	r3, [r1], #4
    d148:	f840 3b04 	str.w	r3, [r0], #4
    d14c:	f851 3b04 	ldr.w	r3, [r1], #4
    d150:	f840 3b04 	str.w	r3, [r0], #4
    d154:	f851 3b04 	ldr.w	r3, [r1], #4
    d158:	f840 3b04 	str.w	r3, [r0], #4
    d15c:	f851 3b04 	ldr.w	r3, [r1], #4
    d160:	f840 3b04 	str.w	r3, [r0], #4
    d164:	f851 3b04 	ldr.w	r3, [r1], #4
    d168:	f840 3b04 	str.w	r3, [r0], #4
    d16c:	3a40      	subs	r2, #64	; 0x40
    d16e:	d2bd      	bcs.n	d0ec <memcpy+0x10>
    d170:	3230      	adds	r2, #48	; 0x30
    d172:	d311      	bcc.n	d198 <memcpy+0xbc>
    d174:	f851 3b04 	ldr.w	r3, [r1], #4
    d178:	f840 3b04 	str.w	r3, [r0], #4
    d17c:	f851 3b04 	ldr.w	r3, [r1], #4
    d180:	f840 3b04 	str.w	r3, [r0], #4
    d184:	f851 3b04 	ldr.w	r3, [r1], #4
    d188:	f840 3b04 	str.w	r3, [r0], #4
    d18c:	f851 3b04 	ldr.w	r3, [r1], #4
    d190:	f840 3b04 	str.w	r3, [r0], #4
    d194:	3a10      	subs	r2, #16
    d196:	d2ed      	bcs.n	d174 <memcpy+0x98>
    d198:	320c      	adds	r2, #12
    d19a:	d305      	bcc.n	d1a8 <memcpy+0xcc>
    d19c:	f851 3b04 	ldr.w	r3, [r1], #4
    d1a0:	f840 3b04 	str.w	r3, [r0], #4
    d1a4:	3a04      	subs	r2, #4
    d1a6:	d2f9      	bcs.n	d19c <memcpy+0xc0>
    d1a8:	3204      	adds	r2, #4
    d1aa:	d008      	beq.n	d1be <memcpy+0xe2>
    d1ac:	07d2      	lsls	r2, r2, #31
    d1ae:	bf1c      	itt	ne
    d1b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    d1b4:	f800 3b01 	strbne.w	r3, [r0], #1
    d1b8:	d301      	bcc.n	d1be <memcpy+0xe2>
    d1ba:	880b      	ldrh	r3, [r1, #0]
    d1bc:	8003      	strh	r3, [r0, #0]
    d1be:	4660      	mov	r0, ip
    d1c0:	4770      	bx	lr
    d1c2:	bf00      	nop
    d1c4:	2a08      	cmp	r2, #8
    d1c6:	d313      	bcc.n	d1f0 <memcpy+0x114>
    d1c8:	078b      	lsls	r3, r1, #30
    d1ca:	d08d      	beq.n	d0e8 <memcpy+0xc>
    d1cc:	f010 0303 	ands.w	r3, r0, #3
    d1d0:	d08a      	beq.n	d0e8 <memcpy+0xc>
    d1d2:	f1c3 0304 	rsb	r3, r3, #4
    d1d6:	1ad2      	subs	r2, r2, r3
    d1d8:	07db      	lsls	r3, r3, #31
    d1da:	bf1c      	itt	ne
    d1dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    d1e0:	f800 3b01 	strbne.w	r3, [r0], #1
    d1e4:	d380      	bcc.n	d0e8 <memcpy+0xc>
    d1e6:	f831 3b02 	ldrh.w	r3, [r1], #2
    d1ea:	f820 3b02 	strh.w	r3, [r0], #2
    d1ee:	e77b      	b.n	d0e8 <memcpy+0xc>
    d1f0:	3a04      	subs	r2, #4
    d1f2:	d3d9      	bcc.n	d1a8 <memcpy+0xcc>
    d1f4:	3a01      	subs	r2, #1
    d1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
    d1fa:	f800 3b01 	strb.w	r3, [r0], #1
    d1fe:	d2f9      	bcs.n	d1f4 <memcpy+0x118>
    d200:	780b      	ldrb	r3, [r1, #0]
    d202:	7003      	strb	r3, [r0, #0]
    d204:	784b      	ldrb	r3, [r1, #1]
    d206:	7043      	strb	r3, [r0, #1]
    d208:	788b      	ldrb	r3, [r1, #2]
    d20a:	7083      	strb	r3, [r0, #2]
    d20c:	4660      	mov	r0, ip
    d20e:	4770      	bx	lr

0000d210 <memset>:
    d210:	b470      	push	{r4, r5, r6}
    d212:	0786      	lsls	r6, r0, #30
    d214:	d046      	beq.n	d2a4 <memset+0x94>
    d216:	1e54      	subs	r4, r2, #1
    d218:	2a00      	cmp	r2, #0
    d21a:	d041      	beq.n	d2a0 <memset+0x90>
    d21c:	b2ca      	uxtb	r2, r1
    d21e:	4603      	mov	r3, r0
    d220:	e002      	b.n	d228 <memset+0x18>
    d222:	f114 34ff 	adds.w	r4, r4, #4294967295
    d226:	d33b      	bcc.n	d2a0 <memset+0x90>
    d228:	f803 2b01 	strb.w	r2, [r3], #1
    d22c:	079d      	lsls	r5, r3, #30
    d22e:	d1f8      	bne.n	d222 <memset+0x12>
    d230:	2c03      	cmp	r4, #3
    d232:	d92e      	bls.n	d292 <memset+0x82>
    d234:	b2cd      	uxtb	r5, r1
    d236:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d23a:	2c0f      	cmp	r4, #15
    d23c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d240:	d919      	bls.n	d276 <memset+0x66>
    d242:	f103 0210 	add.w	r2, r3, #16
    d246:	4626      	mov	r6, r4
    d248:	3e10      	subs	r6, #16
    d24a:	2e0f      	cmp	r6, #15
    d24c:	f842 5c10 	str.w	r5, [r2, #-16]
    d250:	f842 5c0c 	str.w	r5, [r2, #-12]
    d254:	f842 5c08 	str.w	r5, [r2, #-8]
    d258:	f842 5c04 	str.w	r5, [r2, #-4]
    d25c:	f102 0210 	add.w	r2, r2, #16
    d260:	d8f2      	bhi.n	d248 <memset+0x38>
    d262:	f1a4 0210 	sub.w	r2, r4, #16
    d266:	f022 020f 	bic.w	r2, r2, #15
    d26a:	f004 040f 	and.w	r4, r4, #15
    d26e:	3210      	adds	r2, #16
    d270:	2c03      	cmp	r4, #3
    d272:	4413      	add	r3, r2
    d274:	d90d      	bls.n	d292 <memset+0x82>
    d276:	461e      	mov	r6, r3
    d278:	4622      	mov	r2, r4
    d27a:	3a04      	subs	r2, #4
    d27c:	2a03      	cmp	r2, #3
    d27e:	f846 5b04 	str.w	r5, [r6], #4
    d282:	d8fa      	bhi.n	d27a <memset+0x6a>
    d284:	1f22      	subs	r2, r4, #4
    d286:	f022 0203 	bic.w	r2, r2, #3
    d28a:	3204      	adds	r2, #4
    d28c:	4413      	add	r3, r2
    d28e:	f004 0403 	and.w	r4, r4, #3
    d292:	b12c      	cbz	r4, d2a0 <memset+0x90>
    d294:	b2c9      	uxtb	r1, r1
    d296:	441c      	add	r4, r3
    d298:	f803 1b01 	strb.w	r1, [r3], #1
    d29c:	429c      	cmp	r4, r3
    d29e:	d1fb      	bne.n	d298 <memset+0x88>
    d2a0:	bc70      	pop	{r4, r5, r6}
    d2a2:	4770      	bx	lr
    d2a4:	4614      	mov	r4, r2
    d2a6:	4603      	mov	r3, r0
    d2a8:	e7c2      	b.n	d230 <memset+0x20>
    d2aa:	bf00      	nop

0000d2ac <__register_exitproc>:
    d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2b0:	4d2c      	ldr	r5, [pc, #176]	; (d364 <__register_exitproc+0xb8>)
    d2b2:	4606      	mov	r6, r0
    d2b4:	6828      	ldr	r0, [r5, #0]
    d2b6:	4698      	mov	r8, r3
    d2b8:	460f      	mov	r7, r1
    d2ba:	4691      	mov	r9, r2
    d2bc:	f000 f882 	bl	d3c4 <__retarget_lock_acquire_recursive>
    d2c0:	4b29      	ldr	r3, [pc, #164]	; (d368 <__register_exitproc+0xbc>)
    d2c2:	681c      	ldr	r4, [r3, #0]
    d2c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d03e      	beq.n	d34a <__register_exitproc+0x9e>
    d2cc:	685a      	ldr	r2, [r3, #4]
    d2ce:	2a1f      	cmp	r2, #31
    d2d0:	dc1c      	bgt.n	d30c <__register_exitproc+0x60>
    d2d2:	f102 0e01 	add.w	lr, r2, #1
    d2d6:	b176      	cbz	r6, d2f6 <__register_exitproc+0x4a>
    d2d8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    d2dc:	2401      	movs	r4, #1
    d2de:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d2e2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    d2e6:	4094      	lsls	r4, r2
    d2e8:	4320      	orrs	r0, r4
    d2ea:	2e02      	cmp	r6, #2
    d2ec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    d2f0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d2f4:	d023      	beq.n	d33e <__register_exitproc+0x92>
    d2f6:	3202      	adds	r2, #2
    d2f8:	f8c3 e004 	str.w	lr, [r3, #4]
    d2fc:	6828      	ldr	r0, [r5, #0]
    d2fe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    d302:	f000 f861 	bl	d3c8 <__retarget_lock_release_recursive>
    d306:	2000      	movs	r0, #0
    d308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d30c:	4b17      	ldr	r3, [pc, #92]	; (d36c <__register_exitproc+0xc0>)
    d30e:	b30b      	cbz	r3, d354 <__register_exitproc+0xa8>
    d310:	f44f 70c8 	mov.w	r0, #400	; 0x190
    d314:	f7ff fe90 	bl	d038 <malloc>
    d318:	4603      	mov	r3, r0
    d31a:	b1d8      	cbz	r0, d354 <__register_exitproc+0xa8>
    d31c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    d320:	6002      	str	r2, [r0, #0]
    d322:	2100      	movs	r1, #0
    d324:	6041      	str	r1, [r0, #4]
    d326:	460a      	mov	r2, r1
    d328:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    d32c:	f04f 0e01 	mov.w	lr, #1
    d330:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    d334:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    d338:	2e00      	cmp	r6, #0
    d33a:	d0dc      	beq.n	d2f6 <__register_exitproc+0x4a>
    d33c:	e7cc      	b.n	d2d8 <__register_exitproc+0x2c>
    d33e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    d342:	430c      	orrs	r4, r1
    d344:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    d348:	e7d5      	b.n	d2f6 <__register_exitproc+0x4a>
    d34a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    d34e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    d352:	e7bb      	b.n	d2cc <__register_exitproc+0x20>
    d354:	6828      	ldr	r0, [r5, #0]
    d356:	f000 f837 	bl	d3c8 <__retarget_lock_release_recursive>
    d35a:	f04f 30ff 	mov.w	r0, #4294967295
    d35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d362:	bf00      	nop
    d364:	20000528 	.word	0x20000528
    d368:	0000d858 	.word	0x0000d858
    d36c:	0000d039 	.word	0x0000d039

0000d370 <register_fini>:
    d370:	4b02      	ldr	r3, [pc, #8]	; (d37c <register_fini+0xc>)
    d372:	b113      	cbz	r3, d37a <register_fini+0xa>
    d374:	4802      	ldr	r0, [pc, #8]	; (d380 <register_fini+0x10>)
    d376:	f000 b805 	b.w	d384 <atexit>
    d37a:	4770      	bx	lr
    d37c:	00000000 	.word	0x00000000
    d380:	0000d391 	.word	0x0000d391

0000d384 <atexit>:
    d384:	2300      	movs	r3, #0
    d386:	4601      	mov	r1, r0
    d388:	461a      	mov	r2, r3
    d38a:	4618      	mov	r0, r3
    d38c:	f7ff bf8e 	b.w	d2ac <__register_exitproc>

0000d390 <__libc_fini_array>:
    d390:	b538      	push	{r3, r4, r5, lr}
    d392:	4c0a      	ldr	r4, [pc, #40]	; (d3bc <__libc_fini_array+0x2c>)
    d394:	4d0a      	ldr	r5, [pc, #40]	; (d3c0 <__libc_fini_array+0x30>)
    d396:	1b64      	subs	r4, r4, r5
    d398:	10a4      	asrs	r4, r4, #2
    d39a:	d00a      	beq.n	d3b2 <__libc_fini_array+0x22>
    d39c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    d3a0:	3b01      	subs	r3, #1
    d3a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d3a6:	3c01      	subs	r4, #1
    d3a8:	f855 3904 	ldr.w	r3, [r5], #-4
    d3ac:	4798      	blx	r3
    d3ae:	2c00      	cmp	r4, #0
    d3b0:	d1f9      	bne.n	d3a6 <__libc_fini_array+0x16>
    d3b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d3b6:	f000 ba5f 	b.w	d878 <_fini>
    d3ba:	bf00      	nop
    d3bc:	0000d888 	.word	0x0000d888
    d3c0:	0000d884 	.word	0x0000d884

0000d3c4 <__retarget_lock_acquire_recursive>:
    d3c4:	4770      	bx	lr
    d3c6:	bf00      	nop

0000d3c8 <__retarget_lock_release_recursive>:
    d3c8:	4770      	bx	lr
    d3ca:	bf00      	nop
    d3cc:	682f2e2e 	.word	0x682f2e2e
    d3d0:	702f6c70 	.word	0x702f6c70
    d3d4:	2f74726f 	.word	0x2f74726f
    d3d8:	5f6c7068 	.word	0x5f6c7068
    d3dc:	6f697067 	.word	0x6f697067
    d3e0:	7361625f 	.word	0x7361625f
    d3e4:	00682e65 	.word	0x00682e65
    d3e8:	682f2e2e 	.word	0x682f2e2e
    d3ec:	692f6c61 	.word	0x692f6c61
    d3f0:	756c636e 	.word	0x756c636e
    d3f4:	682f6564 	.word	0x682f6564
    d3f8:	775f6c61 	.word	0x775f6c61
    d3fc:	682e7464 	.word	0x682e7464
    d400:	00000000 	.word	0x00000000
    d404:	682f2e2e 	.word	0x682f2e2e
    d408:	732f6c61 	.word	0x732f6c61
    d40c:	682f6372 	.word	0x682f6372
    d410:	635f6c61 	.word	0x635f6c61
    d414:	6e656c61 	.word	0x6e656c61
    d418:	2e726164 	.word	0x2e726164
    d41c:	00000063 	.word	0x00000063
    d420:	682f2e2e 	.word	0x682f2e2e
    d424:	732f6c61 	.word	0x732f6c61
    d428:	682f6372 	.word	0x682f6372
    d42c:	635f6c61 	.word	0x635f6c61
    d430:	615f6e61 	.word	0x615f6e61
    d434:	636e7973 	.word	0x636e7973
    d438:	0000632e 	.word	0x0000632e
    d43c:	682f2e2e 	.word	0x682f2e2e
    d440:	732f6c61 	.word	0x732f6c61
    d444:	682f6372 	.word	0x682f6372
    d448:	635f6c61 	.word	0x635f6c61
    d44c:	735f6372 	.word	0x735f6372
    d450:	2e636e79 	.word	0x2e636e79
    d454:	00000063 	.word	0x00000063
    d458:	682f2e2e 	.word	0x682f2e2e
    d45c:	732f6c61 	.word	0x732f6c61
    d460:	682f6372 	.word	0x682f6372
    d464:	695f6c61 	.word	0x695f6c61
    d468:	6d5f6332 	.word	0x6d5f6332
    d46c:	7973615f 	.word	0x7973615f
    d470:	632e636e 	.word	0x632e636e
    d474:	00000000 	.word	0x00000000
    d478:	682f2e2e 	.word	0x682f2e2e
    d47c:	732f6c61 	.word	0x732f6c61
    d480:	682f6372 	.word	0x682f6372
    d484:	705f6c61 	.word	0x705f6c61
    d488:	632e6d77 	.word	0x632e6d77
    d48c:	00000000 	.word	0x00000000
    d490:	682f2e2e 	.word	0x682f2e2e
    d494:	732f6c61 	.word	0x732f6c61
    d498:	682f6372 	.word	0x682f6372
    d49c:	715f6c61 	.word	0x715f6c61
    d4a0:	5f697073 	.word	0x5f697073
    d4a4:	636e7973 	.word	0x636e7973
    d4a8:	0000632e 	.word	0x0000632e
    d4ac:	682f2e2e 	.word	0x682f2e2e
    d4b0:	732f6c61 	.word	0x732f6c61
    d4b4:	682f6372 	.word	0x682f6372
    d4b8:	735f6c61 	.word	0x735f6c61
    d4bc:	6d5f6970 	.word	0x6d5f6970
    d4c0:	7973615f 	.word	0x7973615f
    d4c4:	632e636e 	.word	0x632e636e
    d4c8:	00000000 	.word	0x00000000
    d4cc:	682f2e2e 	.word	0x682f2e2e
    d4d0:	732f6c61 	.word	0x732f6c61
    d4d4:	682f6372 	.word	0x682f6372
    d4d8:	735f6c61 	.word	0x735f6c61
    d4dc:	6d5f6970 	.word	0x6d5f6970
    d4e0:	6e79735f 	.word	0x6e79735f
    d4e4:	00632e63 	.word	0x00632e63
    d4e8:	682f2e2e 	.word	0x682f2e2e
    d4ec:	732f6c61 	.word	0x732f6c61
    d4f0:	682f6372 	.word	0x682f6372
    d4f4:	745f6c61 	.word	0x745f6c61
    d4f8:	72656d69 	.word	0x72656d69
    d4fc:	0000632e 	.word	0x0000632e
    d500:	682f2e2e 	.word	0x682f2e2e
    d504:	752f6c61 	.word	0x752f6c61
    d508:	736c6974 	.word	0x736c6974
    d50c:	6372732f 	.word	0x6372732f
    d510:	6974752f 	.word	0x6974752f
    d514:	6c5f736c 	.word	0x6c5f736c
    d518:	2e747369 	.word	0x2e747369
    d51c:	00000063 	.word	0x00000063

0000d520 <_map>:
    d520:	00000004 00000004 00000005 00000005     ................
    d530:	00000006 00000056 00000007 00000057     ....V.......W...
    d540:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    d550:	632e6369 00000000                       ic.c....

0000d558 <user_mux_confs>:
    d558:	00000100 00000000 00000000 00000000     ................
	...

0000d59c <channel_confs>:
    d59c:	0000065e 00000000 00000000 00000000     ^...............
	...

0000d5dc <interrupt_cfg>:
	...
    d65c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d66c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d67c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d68c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    d69c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    d6ac:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    d6bc:	43000400 43000800 43000c00              ...C...C...C

0000d6c8 <sercomspi_regs>:
    d6c8:	0020000c 00020000 00000000 01ff00fe     .. .............
    d6d8:	20000c00 02000000 00000000 ff00fe00     ... ............
    d6e8:	000c0101 00000020 00000002 00020000     .... ...........
    d6f8:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    d708:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    d718:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    d728:	43001400 43001800                       ...C...C

0000d730 <_usb_ep_cfgs>:
    d730:	200006dc 00000000 00000040 2000071c     ... ....@...... 
    d740:	2000075c 00400040 2000079c 200007dc     \.. @.@.... ... 
    d750:	00400040 2000081c 2000085c 00400040     @.@.... \.. @.@.
    d760:	2000089c 200008dc 00400040 00000804     ... ... @.@.....
    d770:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    d780:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    d790:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    d7a0:	7361625f 00682e65                       _base.h.

0000d7a8 <n25q256a_interface>:
    d7a8:	0000ab65 0000ac09 0000ad19 0000aed1     e...............
    d7b8:	0000af61 752f2e2e 642f6273 63697665     a...../usb/devic
    d7c8:	73752f65 2e636462 00000063              e/usbdc.c...

0000d7d4 <_ZTV9CDC_Class>:
	...
    d7dc:	0000c8f5 0000c9a9 0000c60d 0000c8bd     ................
    d7ec:	0000ca25 0000c881 0000c7f1 0000c841     %...........A...
    d7fc:	0000c8dd 0000c92d                       ....-...

0000d804 <_ZTV6Stream>:
	...
    d80c:	0000d04d 0000cab9 0000c60d 0000c621     M...........!...
    d81c:	0000d04d 0000d04d 0000d04d 2e257830     M...M...M...0x%.
    d82c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    d83c:	0066766f                                ovf.

0000d840 <_ZTV5Print>:
	...
    d848:	0000d04d 0000cab9 0000c60d 0000c621     M...........!...

0000d858 <_global_impure_ptr>:
    d858:	20000100                                ... 

0000d85c <_init>:
    d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d85e:	bf00      	nop
    d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d862:	bc08      	pop	{r3}
    d864:	469e      	mov	lr, r3
    d866:	4770      	bx	lr

0000d868 <__init_array_start>:
    d868:	0000d371 	.word	0x0000d371

0000d86c <__frame_dummy_init_array_entry>:
    d86c:	00000289 0000caa5 0000d025              ........%...

0000d878 <_fini>:
    d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d87a:	bf00      	nop
    d87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d87e:	bc08      	pop	{r3}
    d880:	469e      	mov	lr, r3
    d882:	4770      	bx	lr

0000d884 <__fini_array_start>:
    d884:	00000265 	.word	0x00000265
