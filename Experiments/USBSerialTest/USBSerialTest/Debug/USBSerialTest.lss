
USBSerialTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d890  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000d890  0000d890  0001d890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000544  20000000  0000d898  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020544  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020544  2**0
                  CONTENTS
  5 .bss          00000940  20000544  0000dddc  00020544  2**2
                  ALLOC
  6 .stack        00010004  20000e84  0000e71c  00020544  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020572  2**0
                  CONTENTS, READONLY
  9 .debug_info   000555cb  00000000  00000000  000205cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000074aa  00000000  00000000  00075b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017ffb  00000000  00000000  0007d040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ac8  00000000  00000000  0009503b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000027f8  00000000  00000000  00097b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00048232  00000000  00000000  0009a2fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e75a  00000000  00000000  000e252d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013802f  00000000  00000000  00110c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b498  00000000  00000000  00248cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 0e 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	95 53 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .S..............
      7c:	d1 02 00 00 3d 42 00 00 4d 42 00 00 5d 42 00 00     ....=B..MB..]B..
      8c:	6d 42 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     mB..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 91 65 00 00 ad 65 00 00 c9 65 00 00     .....e...e...e..
     144:	e5 65 00 00 01 66 00 00 1d 66 00 00 39 66 00 00     .e...f...f..9f..
     154:	55 66 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     Uf..............
     164:	d1 02 00 00 71 66 00 00 8d 66 00 00 a9 66 00 00     ....qf...f...f..
     174:	c5 66 00 00 d1 02 00 00 c1 37 00 00 29 a0 00 00     .f.......7..)...
     184:	39 a0 00 00 49 a0 00 00 59 a0 00 00 d1 02 00 00     9...I...Y.......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 59 77 00 00 75 77 00 00     ........Yw..uw..
     1f4:	91 77 00 00 ad 77 00 00 d1 02 00 00 d1 02 00 00     .w...w..........
     204:	d1 02 00 00 c9 77 00 00 d1 02 00 00 d1 02 00 00     .....w..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000544 	.word	0x20000544
     280:	00000000 	.word	0x00000000
     284:	0000d898 	.word	0x0000d898

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d898 	.word	0x0000d898
     2c4:	20000548 	.word	0x20000548
     2c8:	0000d898 	.word	0x0000d898
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000d898 	.word	0x0000d898
     33c:	20000544 	.word	0x20000544
     340:	20000e84 	.word	0x20000e84
     344:	20000544 	.word	0x20000544
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000d0a5 	.word	0x0000d0a5
     354:	000003a9 	.word	0x000003a9

00000358 <_Z14StartLivePulsev>:
		usb_echo_test();
		
	}
}

uint8_t	StartLivePulse(void){
     358:	b508      	push	{r3, lr}
	//usb<<"**** Life Pulse Activated****"<<NEWLINE;
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     35a:	4802      	ldr	r0, [pc, #8]	; (364 <_Z14StartLivePulsev+0xc>)
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <_Z14StartLivePulsev+0x10>)
     35e:	4798      	blx	r3
	return p;
}
     360:	b2c0      	uxtb	r0, r0
     362:	bd08      	pop	{r3, pc}
     364:	20000ca8 	.word	0x20000ca8
     368:	00001b79 	.word	0x00001b79

0000036c <_Z13usb_echo_testv>:

void usb_echo_test(void){
     36c:	b510      	push	{r4, lr}
	char c;
	if (usb.available())
     36e:	4809      	ldr	r0, [pc, #36]	; (394 <_Z13usb_echo_testv+0x28>)
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <_Z13usb_echo_testv+0x2c>)
     372:	4798      	blx	r3
     374:	b900      	cbnz	r0, 378 <_Z13usb_echo_testv+0xc>
     376:	bd10      	pop	{r4, pc}
	{
		int inByte=usb.read();
     378:	4806      	ldr	r0, [pc, #24]	; (394 <_Z13usb_echo_testv+0x28>)
     37a:	4b08      	ldr	r3, [pc, #32]	; (39c <_Z13usb_echo_testv+0x30>)
     37c:	4798      	blx	r3
     37e:	4604      	mov	r4, r0
		if (inByte>33)
     380:	2821      	cmp	r0, #33	; 0x21
     382:	ddf8      	ble.n	376 <_Z13usb_echo_testv+0xa>
		{
//			usb.writeData2(&inByte,1);
			delay_ms(100);
     384:	2064      	movs	r0, #100	; 0x64
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <_Z13usb_echo_testv+0x34>)
     388:	4798      	blx	r3
			c=char(inByte);
			usb.print(c);
     38a:	b2e1      	uxtb	r1, r4
     38c:	4801      	ldr	r0, [pc, #4]	; (394 <_Z13usb_echo_testv+0x28>)
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <_Z13usb_echo_testv+0x38>)
     390:	4798      	blx	r3
// 			usb.println((float)inByte/23);
// 			usb<<"it does work"<<NEWLINE;
		}
	}
}
     392:	e7f0      	b.n	376 <_Z13usb_echo_testv+0xa>
     394:	20000b78 	.word	0x20000b78
     398:	0000ca3d 	.word	0x0000ca3d
     39c:	0000c899 	.word	0x0000c899
     3a0:	0000182d 	.word	0x0000182d
     3a4:	0000cb2d 	.word	0x0000cb2d

000003a8 <main>:
{
     3a8:	b508      	push	{r3, lr}
	atmel_start_init();
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <main+0x1c>)
     3ac:	4798      	blx	r3
	usb.Init();
     3ae:	4806      	ldr	r0, [pc, #24]	; (3c8 <main+0x20>)
     3b0:	4b06      	ldr	r3, [pc, #24]	; (3cc <main+0x24>)
     3b2:	4798      	blx	r3
	delay_ms(100);
     3b4:	2064      	movs	r0, #100	; 0x64
     3b6:	4b06      	ldr	r3, [pc, #24]	; (3d0 <main+0x28>)
     3b8:	4798      	blx	r3
	StartLivePulse();
     3ba:	4b06      	ldr	r3, [pc, #24]	; (3d4 <main+0x2c>)
     3bc:	4798      	blx	r3
		usb_echo_test();
     3be:	4c06      	ldr	r4, [pc, #24]	; (3d8 <main+0x30>)
     3c0:	47a0      	blx	r4
     3c2:	e7fd      	b.n	3c0 <main+0x18>
     3c4:	000003dd 	.word	0x000003dd
     3c8:	20000b78 	.word	0x20000b78
     3cc:	0000c7b9 	.word	0x0000c7b9
     3d0:	0000182d 	.word	0x0000182d
     3d4:	00000359 	.word	0x00000359
     3d8:	0000036d 	.word	0x0000036d

000003dc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3dc:	b580      	push	{r7, lr}
     3de:	af00      	add	r7, sp, #0
	system_init();
     3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <atmel_start_init+0x14>)
     3e2:	4798      	blx	r3
	usb_init();
     3e4:	4b03      	ldr	r3, [pc, #12]	; (3f4 <atmel_start_init+0x18>)
     3e6:	4798      	blx	r3
	spi_nor_flash_init();
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <atmel_start_init+0x1c>)
     3ea:	4798      	blx	r3
}
     3ec:	bf00      	nop
     3ee:	bd80      	pop	{r7, pc}
     3f0:	000014d9 	.word	0x000014d9
     3f4:	0000a72d 	.word	0x0000a72d
     3f8:	0000a6c1 	.word	0x0000a6c1

000003fc <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     3fc:	b480      	push	{r7}
     3fe:	b085      	sub	sp, #20
     400:	af00      	add	r7, sp, #0
     402:	60f8      	str	r0, [r7, #12]
     404:	460b      	mov	r3, r1
     406:	607a      	str	r2, [r7, #4]
     408:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     40a:	7afa      	ldrb	r2, [r7, #11]
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	3220      	adds	r2, #32
     410:	6879      	ldr	r1, [r7, #4]
     412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     416:	bf00      	nop
     418:	3714      	adds	r7, #20
     41a:	46bd      	mov	sp, r7
     41c:	f85d 7b04 	ldr.w	r7, [sp], #4
     420:	4770      	bx	lr

00000422 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     422:	b480      	push	{r7}
     424:	b083      	sub	sp, #12
     426:	af00      	add	r7, sp, #0
     428:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     42a:	687b      	ldr	r3, [r7, #4]
     42c:	691b      	ldr	r3, [r3, #16]
     42e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     432:	687b      	ldr	r3, [r7, #4]
     434:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     436:	bf00      	nop
     438:	370c      	adds	r7, #12
     43a:	46bd      	mov	sp, r7
     43c:	f85d 7b04 	ldr.w	r7, [sp], #4
     440:	4770      	bx	lr

00000442 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     442:	b480      	push	{r7}
     444:	b083      	sub	sp, #12
     446:	af00      	add	r7, sp, #0
     448:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	691b      	ldr	r3, [r3, #16]
     44e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     452:	687b      	ldr	r3, [r7, #4]
     454:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     456:	bf00      	nop
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	f85d 7b04 	ldr.w	r7, [sp], #4
     460:	4770      	bx	lr

00000462 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     462:	b480      	push	{r7}
     464:	b083      	sub	sp, #12
     466:	af00      	add	r7, sp, #0
     468:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	691b      	ldr	r3, [r3, #16]
     46e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     472:	687b      	ldr	r3, [r7, #4]
     474:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     476:	bf00      	nop
     478:	370c      	adds	r7, #12
     47a:	46bd      	mov	sp, r7
     47c:	f85d 7b04 	ldr.w	r7, [sp], #4
     480:	4770      	bx	lr

00000482 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     482:	b480      	push	{r7}
     484:	b083      	sub	sp, #12
     486:	af00      	add	r7, sp, #0
     488:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	691b      	ldr	r3, [r3, #16]
     48e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     492:	687b      	ldr	r3, [r7, #4]
     494:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     496:	bf00      	nop
     498:	370c      	adds	r7, #12
     49a:	46bd      	mov	sp, r7
     49c:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a0:	4770      	bx	lr

000004a2 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     4a2:	b480      	push	{r7}
     4a4:	b083      	sub	sp, #12
     4a6:	af00      	add	r7, sp, #0
     4a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	695b      	ldr	r3, [r3, #20]
     4ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4b6:	bf00      	nop
     4b8:	370c      	adds	r7, #12
     4ba:	46bd      	mov	sp, r7
     4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c0:	4770      	bx	lr

000004c2 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4c2:	b480      	push	{r7}
     4c4:	b083      	sub	sp, #12
     4c6:	af00      	add	r7, sp, #0
     4c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	695b      	ldr	r3, [r3, #20]
     4ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4d6:	bf00      	nop
     4d8:	370c      	adds	r7, #12
     4da:	46bd      	mov	sp, r7
     4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e0:	4770      	bx	lr

000004e2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4e2:	b480      	push	{r7}
     4e4:	b083      	sub	sp, #12
     4e6:	af00      	add	r7, sp, #0
     4e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	695b      	ldr	r3, [r3, #20]
     4ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4f6:	bf00      	nop
     4f8:	370c      	adds	r7, #12
     4fa:	46bd      	mov	sp, r7
     4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     500:	4770      	bx	lr

00000502 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     502:	b480      	push	{r7}
     504:	b083      	sub	sp, #12
     506:	af00      	add	r7, sp, #0
     508:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	695b      	ldr	r3, [r3, #20]
     50e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     512:	687b      	ldr	r3, [r7, #4]
     514:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     516:	bf00      	nop
     518:	370c      	adds	r7, #12
     51a:	46bd      	mov	sp, r7
     51c:	f85d 7b04 	ldr.w	r7, [sp], #4
     520:	4770      	bx	lr

00000522 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     522:	b480      	push	{r7}
     524:	b083      	sub	sp, #12
     526:	af00      	add	r7, sp, #0
     528:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	695b      	ldr	r3, [r3, #20]
     52e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     532:	687b      	ldr	r3, [r7, #4]
     534:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     536:	bf00      	nop
     538:	370c      	adds	r7, #12
     53a:	46bd      	mov	sp, r7
     53c:	f85d 7b04 	ldr.w	r7, [sp], #4
     540:	4770      	bx	lr

00000542 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     542:	b480      	push	{r7}
     544:	b083      	sub	sp, #12
     546:	af00      	add	r7, sp, #0
     548:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	699b      	ldr	r3, [r3, #24]
     54e:	f043 0201 	orr.w	r2, r3, #1
     552:	687b      	ldr	r3, [r7, #4]
     554:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     556:	bf00      	nop
     558:	370c      	adds	r7, #12
     55a:	46bd      	mov	sp, r7
     55c:	f85d 7b04 	ldr.w	r7, [sp], #4
     560:	4770      	bx	lr

00000562 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	699b      	ldr	r3, [r3, #24]
     56e:	f043 0202 	orr.w	r2, r3, #2
     572:	687b      	ldr	r3, [r7, #4]
     574:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     576:	bf00      	nop
     578:	370c      	adds	r7, #12
     57a:	46bd      	mov	sp, r7
     57c:	f85d 7b04 	ldr.w	r7, [sp], #4
     580:	4770      	bx	lr

00000582 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     582:	b480      	push	{r7}
     584:	b083      	sub	sp, #12
     586:	af00      	add	r7, sp, #0
     588:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	699b      	ldr	r3, [r3, #24]
     58e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     592:	687b      	ldr	r3, [r7, #4]
     594:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     596:	bf00      	nop
     598:	370c      	adds	r7, #12
     59a:	46bd      	mov	sp, r7
     59c:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a0:	4770      	bx	lr

000005a2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     5a2:	b480      	push	{r7}
     5a4:	b083      	sub	sp, #12
     5a6:	af00      	add	r7, sp, #0
     5a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5aa:	687b      	ldr	r3, [r7, #4]
     5ac:	699b      	ldr	r3, [r3, #24]
     5ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5b6:	bf00      	nop
     5b8:	370c      	adds	r7, #12
     5ba:	46bd      	mov	sp, r7
     5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c0:	4770      	bx	lr

000005c2 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     5c2:	b480      	push	{r7}
     5c4:	b083      	sub	sp, #12
     5c6:	af00      	add	r7, sp, #0
     5c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	699b      	ldr	r3, [r3, #24]
     5ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5d6:	bf00      	nop
     5d8:	370c      	adds	r7, #12
     5da:	46bd      	mov	sp, r7
     5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e0:	4770      	bx	lr

000005e2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     5e2:	b480      	push	{r7}
     5e4:	b083      	sub	sp, #12
     5e6:	af00      	add	r7, sp, #0
     5e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	69db      	ldr	r3, [r3, #28]
     5ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5f6:	bf00      	nop
     5f8:	370c      	adds	r7, #12
     5fa:	46bd      	mov	sp, r7
     5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     600:	4770      	bx	lr

00000602 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     602:	b480      	push	{r7}
     604:	b083      	sub	sp, #12
     606:	af00      	add	r7, sp, #0
     608:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	6a1b      	ldr	r3, [r3, #32]
     60e:	f043 0201 	orr.w	r2, r3, #1
     612:	687b      	ldr	r3, [r7, #4]
     614:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     616:	bf00      	nop
     618:	370c      	adds	r7, #12
     61a:	46bd      	mov	sp, r7
     61c:	f85d 7b04 	ldr.w	r7, [sp], #4
     620:	4770      	bx	lr

00000622 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     622:	b480      	push	{r7}
     624:	b083      	sub	sp, #12
     626:	af00      	add	r7, sp, #0
     628:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	6a1b      	ldr	r3, [r3, #32]
     62e:	f043 0202 	orr.w	r2, r3, #2
     632:	687b      	ldr	r3, [r7, #4]
     634:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     636:	bf00      	nop
     638:	370c      	adds	r7, #12
     63a:	46bd      	mov	sp, r7
     63c:	f85d 7b04 	ldr.w	r7, [sp], #4
     640:	4770      	bx	lr

00000642 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     642:	b480      	push	{r7}
     644:	b083      	sub	sp, #12
     646:	af00      	add	r7, sp, #0
     648:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	6a1b      	ldr	r3, [r3, #32]
     64e:	f043 0204 	orr.w	r2, r3, #4
     652:	687b      	ldr	r3, [r7, #4]
     654:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     656:	bf00      	nop
     658:	370c      	adds	r7, #12
     65a:	46bd      	mov	sp, r7
     65c:	f85d 7b04 	ldr.w	r7, [sp], #4
     660:	4770      	bx	lr

00000662 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     662:	b480      	push	{r7}
     664:	b083      	sub	sp, #12
     666:	af00      	add	r7, sp, #0
     668:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	6a1b      	ldr	r3, [r3, #32]
     66e:	f043 0208 	orr.w	r2, r3, #8
     672:	687b      	ldr	r3, [r7, #4]
     674:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     676:	bf00      	nop
     678:	370c      	adds	r7, #12
     67a:	46bd      	mov	sp, r7
     67c:	f85d 7b04 	ldr.w	r7, [sp], #4
     680:	4770      	bx	lr

00000682 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     682:	b480      	push	{r7}
     684:	b083      	sub	sp, #12
     686:	af00      	add	r7, sp, #0
     688:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	6a1b      	ldr	r3, [r3, #32]
     68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     692:	687b      	ldr	r3, [r7, #4]
     694:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     696:	bf00      	nop
     698:	370c      	adds	r7, #12
     69a:	46bd      	mov	sp, r7
     69c:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a0:	4770      	bx	lr

000006a2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6a2:	b480      	push	{r7}
     6a4:	b085      	sub	sp, #20
     6a6:	af00      	add	r7, sp, #0
     6a8:	60f8      	str	r0, [r7, #12]
     6aa:	460b      	mov	r3, r1
     6ac:	607a      	str	r2, [r7, #4]
     6ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b0:	7afb      	ldrb	r3, [r7, #11]
     6b2:	68fa      	ldr	r2, [r7, #12]
     6b4:	01db      	lsls	r3, r3, #7
     6b6:	4413      	add	r3, r2
     6b8:	3308      	adds	r3, #8
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	601a      	str	r2, [r3, #0]
}
     6be:	bf00      	nop
     6c0:	3714      	adds	r7, #20
     6c2:	46bd      	mov	sp, r7
     6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c8:	4770      	bx	lr

000006ca <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6ca:	b480      	push	{r7}
     6cc:	b085      	sub	sp, #20
     6ce:	af00      	add	r7, sp, #0
     6d0:	60f8      	str	r0, [r7, #12]
     6d2:	460b      	mov	r3, r1
     6d4:	607a      	str	r2, [r7, #4]
     6d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d8:	7afb      	ldrb	r3, [r7, #11]
     6da:	68fa      	ldr	r2, [r7, #12]
     6dc:	01db      	lsls	r3, r3, #7
     6de:	4413      	add	r3, r2
     6e0:	3304      	adds	r3, #4
     6e2:	687a      	ldr	r2, [r7, #4]
     6e4:	601a      	str	r2, [r3, #0]
}
     6e6:	bf00      	nop
     6e8:	3714      	adds	r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f0:	4770      	bx	lr

000006f2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     6f2:	b480      	push	{r7}
     6f4:	b085      	sub	sp, #20
     6f6:	af00      	add	r7, sp, #0
     6f8:	60f8      	str	r0, [r7, #12]
     6fa:	460b      	mov	r3, r1
     6fc:	607a      	str	r2, [r7, #4]
     6fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     700:	7afb      	ldrb	r3, [r7, #11]
     702:	68fa      	ldr	r2, [r7, #12]
     704:	01db      	lsls	r3, r3, #7
     706:	4413      	add	r3, r2
     708:	3318      	adds	r3, #24
     70a:	687a      	ldr	r2, [r7, #4]
     70c:	601a      	str	r2, [r3, #0]
}
     70e:	bf00      	nop
     710:	3714      	adds	r7, #20
     712:	46bd      	mov	sp, r7
     714:	f85d 7b04 	ldr.w	r7, [sp], #4
     718:	4770      	bx	lr

0000071a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     71a:	b480      	push	{r7}
     71c:	b085      	sub	sp, #20
     71e:	af00      	add	r7, sp, #0
     720:	60f8      	str	r0, [r7, #12]
     722:	460b      	mov	r3, r1
     724:	607a      	str	r2, [r7, #4]
     726:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     728:	7afb      	ldrb	r3, [r7, #11]
     72a:	68fa      	ldr	r2, [r7, #12]
     72c:	01db      	lsls	r3, r3, #7
     72e:	4413      	add	r3, r2
     730:	3314      	adds	r3, #20
     732:	687a      	ldr	r2, [r7, #4]
     734:	601a      	str	r2, [r3, #0]
}
     736:	bf00      	nop
     738:	3714      	adds	r7, #20
     73a:	46bd      	mov	sp, r7
     73c:	f85d 7b04 	ldr.w	r7, [sp], #4
     740:	4770      	bx	lr

00000742 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     742:	b480      	push	{r7}
     744:	b085      	sub	sp, #20
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
     74a:	4608      	mov	r0, r1
     74c:	4611      	mov	r1, r2
     74e:	461a      	mov	r2, r3
     750:	4603      	mov	r3, r0
     752:	70fb      	strb	r3, [r7, #3]
     754:	460b      	mov	r3, r1
     756:	70bb      	strb	r3, [r7, #2]
     758:	4613      	mov	r3, r2
     75a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     75c:	78fa      	ldrb	r2, [r7, #3]
     75e:	78bb      	ldrb	r3, [r7, #2]
     760:	6879      	ldr	r1, [r7, #4]
     762:	01d2      	lsls	r2, r2, #7
     764:	440a      	add	r2, r1
     766:	4413      	add	r3, r2
     768:	3330      	adds	r3, #48	; 0x30
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     76e:	7bfb      	ldrb	r3, [r7, #15]
     770:	f023 030f 	bic.w	r3, r3, #15
     774:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     776:	787b      	ldrb	r3, [r7, #1]
     778:	f003 030f 	and.w	r3, r3, #15
     77c:	b2da      	uxtb	r2, r3
     77e:	7bfb      	ldrb	r3, [r7, #15]
     780:	4313      	orrs	r3, r2
     782:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     784:	78fa      	ldrb	r2, [r7, #3]
     786:	78bb      	ldrb	r3, [r7, #2]
     788:	6879      	ldr	r1, [r7, #4]
     78a:	01d2      	lsls	r2, r2, #7
     78c:	440a      	add	r2, r1
     78e:	4413      	add	r3, r2
     790:	3330      	adds	r3, #48	; 0x30
     792:	7bfa      	ldrb	r2, [r7, #15]
     794:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     796:	bf00      	nop
     798:	3714      	adds	r7, #20
     79a:	46bd      	mov	sp, r7
     79c:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a0:	4770      	bx	lr

000007a2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     7a2:	b480      	push	{r7}
     7a4:	b085      	sub	sp, #20
     7a6:	af00      	add	r7, sp, #0
     7a8:	6078      	str	r0, [r7, #4]
     7aa:	4608      	mov	r0, r1
     7ac:	4611      	mov	r1, r2
     7ae:	461a      	mov	r2, r3
     7b0:	4603      	mov	r3, r0
     7b2:	70fb      	strb	r3, [r7, #3]
     7b4:	460b      	mov	r3, r1
     7b6:	70bb      	strb	r3, [r7, #2]
     7b8:	4613      	mov	r3, r2
     7ba:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7bc:	78fa      	ldrb	r2, [r7, #3]
     7be:	78bb      	ldrb	r3, [r7, #2]
     7c0:	6879      	ldr	r1, [r7, #4]
     7c2:	01d2      	lsls	r2, r2, #7
     7c4:	440a      	add	r2, r1
     7c6:	4413      	add	r3, r2
     7c8:	3330      	adds	r3, #48	; 0x30
     7ca:	781b      	ldrb	r3, [r3, #0]
     7cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	7bfb      	ldrb	r3, [r7, #15]
     7d0:	f003 030f 	and.w	r3, r3, #15
     7d4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     7d6:	787b      	ldrb	r3, [r7, #1]
     7d8:	011b      	lsls	r3, r3, #4
     7da:	b2da      	uxtb	r2, r3
     7dc:	7bfb      	ldrb	r3, [r7, #15]
     7de:	4313      	orrs	r3, r2
     7e0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	78bb      	ldrb	r3, [r7, #2]
     7e6:	6879      	ldr	r1, [r7, #4]
     7e8:	01d2      	lsls	r2, r2, #7
     7ea:	440a      	add	r2, r1
     7ec:	4413      	add	r3, r2
     7ee:	3330      	adds	r3, #48	; 0x30
     7f0:	7bfa      	ldrb	r2, [r7, #15]
     7f2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7f4:	bf00      	nop
     7f6:	3714      	adds	r7, #20
     7f8:	46bd      	mov	sp, r7
     7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fe:	4770      	bx	lr

00000800 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     800:	b480      	push	{r7}
     802:	b085      	sub	sp, #20
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	4608      	mov	r0, r1
     80a:	4611      	mov	r1, r2
     80c:	461a      	mov	r2, r3
     80e:	4603      	mov	r3, r0
     810:	70fb      	strb	r3, [r7, #3]
     812:	460b      	mov	r3, r1
     814:	70bb      	strb	r3, [r7, #2]
     816:	4613      	mov	r3, r2
     818:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81a:	78fa      	ldrb	r2, [r7, #3]
     81c:	78bb      	ldrb	r3, [r7, #2]
     81e:	6879      	ldr	r1, [r7, #4]
     820:	01d2      	lsls	r2, r2, #7
     822:	440a      	add	r2, r1
     824:	4413      	add	r3, r2
     826:	3340      	adds	r3, #64	; 0x40
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     82c:	7bfb      	ldrb	r3, [r7, #15]
     82e:	f023 0301 	bic.w	r3, r3, #1
     832:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     834:	787a      	ldrb	r2, [r7, #1]
     836:	7bfb      	ldrb	r3, [r7, #15]
     838:	4313      	orrs	r3, r2
     83a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	78fa      	ldrb	r2, [r7, #3]
     83e:	78bb      	ldrb	r3, [r7, #2]
     840:	6879      	ldr	r1, [r7, #4]
     842:	01d2      	lsls	r2, r2, #7
     844:	440a      	add	r2, r1
     846:	4413      	add	r3, r2
     848:	3340      	adds	r3, #64	; 0x40
     84a:	7bfa      	ldrb	r2, [r7, #15]
     84c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     84e:	bf00      	nop
     850:	3714      	adds	r7, #20
     852:	46bd      	mov	sp, r7
     854:	f85d 7b04 	ldr.w	r7, [sp], #4
     858:	4770      	bx	lr

0000085a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     85a:	b490      	push	{r4, r7}
     85c:	b082      	sub	sp, #8
     85e:	af00      	add	r7, sp, #0
     860:	6078      	str	r0, [r7, #4]
     862:	460b      	mov	r3, r1
     864:	70fb      	strb	r3, [r7, #3]
     866:	4613      	mov	r3, r2
     868:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     86a:	78fa      	ldrb	r2, [r7, #3]
     86c:	78bb      	ldrb	r3, [r7, #2]
     86e:	78f8      	ldrb	r0, [r7, #3]
     870:	78b9      	ldrb	r1, [r7, #2]
     872:	687c      	ldr	r4, [r7, #4]
     874:	01c0      	lsls	r0, r0, #7
     876:	4420      	add	r0, r4
     878:	4401      	add	r1, r0
     87a:	3140      	adds	r1, #64	; 0x40
     87c:	7809      	ldrb	r1, [r1, #0]
     87e:	b2c9      	uxtb	r1, r1
     880:	f041 0104 	orr.w	r1, r1, #4
     884:	b2c8      	uxtb	r0, r1
     886:	6879      	ldr	r1, [r7, #4]
     888:	01d2      	lsls	r2, r2, #7
     88a:	440a      	add	r2, r1
     88c:	4413      	add	r3, r2
     88e:	3340      	adds	r3, #64	; 0x40
     890:	4602      	mov	r2, r0
     892:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     894:	bf00      	nop
     896:	3708      	adds	r7, #8
     898:	46bd      	mov	sp, r7
     89a:	bc90      	pop	{r4, r7}
     89c:	4770      	bx	lr

0000089e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     89e:	b490      	push	{r4, r7}
     8a0:	b082      	sub	sp, #8
     8a2:	af00      	add	r7, sp, #0
     8a4:	6078      	str	r0, [r7, #4]
     8a6:	460b      	mov	r3, r1
     8a8:	70fb      	strb	r3, [r7, #3]
     8aa:	4613      	mov	r3, r2
     8ac:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ae:	78fa      	ldrb	r2, [r7, #3]
     8b0:	78bb      	ldrb	r3, [r7, #2]
     8b2:	78f8      	ldrb	r0, [r7, #3]
     8b4:	78b9      	ldrb	r1, [r7, #2]
     8b6:	687c      	ldr	r4, [r7, #4]
     8b8:	01c0      	lsls	r0, r0, #7
     8ba:	4420      	add	r0, r4
     8bc:	4401      	add	r1, r0
     8be:	3140      	adds	r1, #64	; 0x40
     8c0:	7809      	ldrb	r1, [r1, #0]
     8c2:	b2c9      	uxtb	r1, r1
     8c4:	f021 0104 	bic.w	r1, r1, #4
     8c8:	b2c8      	uxtb	r0, r1
     8ca:	6879      	ldr	r1, [r7, #4]
     8cc:	01d2      	lsls	r2, r2, #7
     8ce:	440a      	add	r2, r1
     8d0:	4413      	add	r3, r2
     8d2:	3340      	adds	r3, #64	; 0x40
     8d4:	4602      	mov	r2, r0
     8d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8d8:	bf00      	nop
     8da:	3708      	adds	r7, #8
     8dc:	46bd      	mov	sp, r7
     8de:	bc90      	pop	{r4, r7}
     8e0:	4770      	bx	lr

000008e2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     8e2:	b480      	push	{r7}
     8e4:	b085      	sub	sp, #20
     8e6:	af00      	add	r7, sp, #0
     8e8:	60f8      	str	r0, [r7, #12]
     8ea:	460b      	mov	r3, r1
     8ec:	607a      	str	r2, [r7, #4]
     8ee:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f0:	7afb      	ldrb	r3, [r7, #11]
     8f2:	68fa      	ldr	r2, [r7, #12]
     8f4:	01db      	lsls	r3, r3, #7
     8f6:	4413      	add	r3, r2
     8f8:	3328      	adds	r3, #40	; 0x28
     8fa:	687a      	ldr	r2, [r7, #4]
     8fc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8fe:	bf00      	nop
     900:	3714      	adds	r7, #20
     902:	46bd      	mov	sp, r7
     904:	f85d 7b04 	ldr.w	r7, [sp], #4
     908:	4770      	bx	lr
	...

0000090c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     90c:	b580      	push	{r7, lr}
     90e:	b082      	sub	sp, #8
     910:	af00      	add	r7, sp, #0
     912:	4603      	mov	r3, r0
     914:	6039      	str	r1, [r7, #0]
     916:	71fb      	strb	r3, [r7, #7]
     918:	4613      	mov	r3, r2
     91a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     91c:	79bb      	ldrb	r3, [r7, #6]
     91e:	2b01      	cmp	r3, #1
     920:	d01c      	beq.n	95c <_gpio_set_direction+0x50>
     922:	2b02      	cmp	r3, #2
     924:	d037      	beq.n	996 <_gpio_set_direction+0x8a>
     926:	2b00      	cmp	r3, #0
     928:	d14e      	bne.n	9c8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     92a:	79fb      	ldrb	r3, [r7, #7]
     92c:	683a      	ldr	r2, [r7, #0]
     92e:	4619      	mov	r1, r3
     930:	482a      	ldr	r0, [pc, #168]	; (9dc <_gpio_set_direction+0xd0>)
     932:	4b2b      	ldr	r3, [pc, #172]	; (9e0 <_gpio_set_direction+0xd4>)
     934:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     936:	683b      	ldr	r3, [r7, #0]
     938:	b29b      	uxth	r3, r3
     93a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     93e:	79fb      	ldrb	r3, [r7, #7]
     940:	4619      	mov	r1, r3
     942:	4826      	ldr	r0, [pc, #152]	; (9dc <_gpio_set_direction+0xd0>)
     944:	4b27      	ldr	r3, [pc, #156]	; (9e4 <_gpio_set_direction+0xd8>)
     946:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     948:	683b      	ldr	r3, [r7, #0]
     94a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     94c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     950:	79fb      	ldrb	r3, [r7, #7]
     952:	4619      	mov	r1, r3
     954:	4821      	ldr	r0, [pc, #132]	; (9dc <_gpio_set_direction+0xd0>)
     956:	4b23      	ldr	r3, [pc, #140]	; (9e4 <_gpio_set_direction+0xd8>)
     958:	4798      	blx	r3
		break;
     95a:	e03a      	b.n	9d2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     95c:	79fb      	ldrb	r3, [r7, #7]
     95e:	683a      	ldr	r2, [r7, #0]
     960:	4619      	mov	r1, r3
     962:	481e      	ldr	r0, [pc, #120]	; (9dc <_gpio_set_direction+0xd0>)
     964:	4b1e      	ldr	r3, [pc, #120]	; (9e0 <_gpio_set_direction+0xd4>)
     966:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     968:	683b      	ldr	r3, [r7, #0]
     96a:	b29b      	uxth	r3, r3
     96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     974:	79f9      	ldrb	r1, [r7, #7]
     976:	461a      	mov	r2, r3
     978:	4818      	ldr	r0, [pc, #96]	; (9dc <_gpio_set_direction+0xd0>)
     97a:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <_gpio_set_direction+0xd8>)
     97c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     97e:	683b      	ldr	r3, [r7, #0]
     980:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     98a:	79f9      	ldrb	r1, [r7, #7]
     98c:	461a      	mov	r2, r3
     98e:	4813      	ldr	r0, [pc, #76]	; (9dc <_gpio_set_direction+0xd0>)
     990:	4b14      	ldr	r3, [pc, #80]	; (9e4 <_gpio_set_direction+0xd8>)
     992:	4798      	blx	r3
		break;
     994:	e01d      	b.n	9d2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     996:	79fb      	ldrb	r3, [r7, #7]
     998:	683a      	ldr	r2, [r7, #0]
     99a:	4619      	mov	r1, r3
     99c:	480f      	ldr	r0, [pc, #60]	; (9dc <_gpio_set_direction+0xd0>)
     99e:	4b12      	ldr	r3, [pc, #72]	; (9e8 <_gpio_set_direction+0xdc>)
     9a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     9a2:	683b      	ldr	r3, [r7, #0]
     9a4:	b29b      	uxth	r3, r3
     9a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9aa:	79fb      	ldrb	r3, [r7, #7]
     9ac:	4619      	mov	r1, r3
     9ae:	480b      	ldr	r0, [pc, #44]	; (9dc <_gpio_set_direction+0xd0>)
     9b0:	4b0c      	ldr	r3, [pc, #48]	; (9e4 <_gpio_set_direction+0xd8>)
     9b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9b4:	683b      	ldr	r3, [r7, #0]
     9b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9bc:	79fb      	ldrb	r3, [r7, #7]
     9be:	4619      	mov	r1, r3
     9c0:	4806      	ldr	r0, [pc, #24]	; (9dc <_gpio_set_direction+0xd0>)
     9c2:	4b08      	ldr	r3, [pc, #32]	; (9e4 <_gpio_set_direction+0xd8>)
     9c4:	4798      	blx	r3
		break;
     9c6:	e004      	b.n	9d2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     9c8:	2246      	movs	r2, #70	; 0x46
     9ca:	4908      	ldr	r1, [pc, #32]	; (9ec <_gpio_set_direction+0xe0>)
     9cc:	2000      	movs	r0, #0
     9ce:	4b08      	ldr	r3, [pc, #32]	; (9f0 <_gpio_set_direction+0xe4>)
     9d0:	4798      	blx	r3
	}
}
     9d2:	bf00      	nop
     9d4:	3708      	adds	r7, #8
     9d6:	46bd      	mov	sp, r7
     9d8:	bd80      	pop	{r7, pc}
     9da:	bf00      	nop
     9dc:	41008000 	.word	0x41008000
     9e0:	000006cb 	.word	0x000006cb
     9e4:	000008e3 	.word	0x000008e3
     9e8:	000006a3 	.word	0x000006a3
     9ec:	0000d3e4 	.word	0x0000d3e4
     9f0:	00003079 	.word	0x00003079

000009f4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	b082      	sub	sp, #8
     9f8:	af00      	add	r7, sp, #0
     9fa:	4603      	mov	r3, r0
     9fc:	6039      	str	r1, [r7, #0]
     9fe:	71fb      	strb	r3, [r7, #7]
     a00:	4613      	mov	r3, r2
     a02:	71bb      	strb	r3, [r7, #6]
	if (level) {
     a04:	79bb      	ldrb	r3, [r7, #6]
     a06:	2b00      	cmp	r3, #0
     a08:	d006      	beq.n	a18 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     a0a:	79fb      	ldrb	r3, [r7, #7]
     a0c:	683a      	ldr	r2, [r7, #0]
     a0e:	4619      	mov	r1, r3
     a10:	4806      	ldr	r0, [pc, #24]	; (a2c <_gpio_set_level+0x38>)
     a12:	4b07      	ldr	r3, [pc, #28]	; (a30 <_gpio_set_level+0x3c>)
     a14:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     a16:	e005      	b.n	a24 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     a18:	79fb      	ldrb	r3, [r7, #7]
     a1a:	683a      	ldr	r2, [r7, #0]
     a1c:	4619      	mov	r1, r3
     a1e:	4803      	ldr	r0, [pc, #12]	; (a2c <_gpio_set_level+0x38>)
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <_gpio_set_level+0x40>)
     a22:	4798      	blx	r3
}
     a24:	bf00      	nop
     a26:	3708      	adds	r7, #8
     a28:	46bd      	mov	sp, r7
     a2a:	bd80      	pop	{r7, pc}
     a2c:	41008000 	.word	0x41008000
     a30:	000006f3 	.word	0x000006f3
     a34:	0000071b 	.word	0x0000071b

00000a38 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     a38:	b580      	push	{r7, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	af00      	add	r7, sp, #0
     a3e:	4603      	mov	r3, r0
     a40:	71fb      	strb	r3, [r7, #7]
     a42:	460b      	mov	r3, r1
     a44:	71bb      	strb	r3, [r7, #6]
     a46:	4613      	mov	r3, r2
     a48:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     a4a:	797b      	ldrb	r3, [r7, #5]
     a4c:	2b01      	cmp	r3, #1
     a4e:	d00a      	beq.n	a66 <_gpio_set_pin_pull_mode+0x2e>
     a50:	2b02      	cmp	r3, #2
     a52:	d01f      	beq.n	a94 <_gpio_set_pin_pull_mode+0x5c>
     a54:	2b00      	cmp	r3, #0
     a56:	d134      	bne.n	ac2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     a58:	79ba      	ldrb	r2, [r7, #6]
     a5a:	79fb      	ldrb	r3, [r7, #7]
     a5c:	4619      	mov	r1, r3
     a5e:	481e      	ldr	r0, [pc, #120]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a60:	4b1e      	ldr	r3, [pc, #120]	; (adc <_gpio_set_pin_pull_mode+0xa4>)
     a62:	4798      	blx	r3
		break;
     a64:	e033      	b.n	ace <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a66:	79bb      	ldrb	r3, [r7, #6]
     a68:	2201      	movs	r2, #1
     a6a:	409a      	lsls	r2, r3
     a6c:	79fb      	ldrb	r3, [r7, #7]
     a6e:	4619      	mov	r1, r3
     a70:	4819      	ldr	r0, [pc, #100]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a72:	4b1b      	ldr	r3, [pc, #108]	; (ae0 <_gpio_set_pin_pull_mode+0xa8>)
     a74:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a76:	79ba      	ldrb	r2, [r7, #6]
     a78:	79fb      	ldrb	r3, [r7, #7]
     a7a:	4619      	mov	r1, r3
     a7c:	4816      	ldr	r0, [pc, #88]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a7e:	4b19      	ldr	r3, [pc, #100]	; (ae4 <_gpio_set_pin_pull_mode+0xac>)
     a80:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     a82:	79bb      	ldrb	r3, [r7, #6]
     a84:	2201      	movs	r2, #1
     a86:	409a      	lsls	r2, r3
     a88:	79fb      	ldrb	r3, [r7, #7]
     a8a:	4619      	mov	r1, r3
     a8c:	4812      	ldr	r0, [pc, #72]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     a8e:	4b16      	ldr	r3, [pc, #88]	; (ae8 <_gpio_set_pin_pull_mode+0xb0>)
     a90:	4798      	blx	r3
		break;
     a92:	e01c      	b.n	ace <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a94:	79bb      	ldrb	r3, [r7, #6]
     a96:	2201      	movs	r2, #1
     a98:	409a      	lsls	r2, r3
     a9a:	79fb      	ldrb	r3, [r7, #7]
     a9c:	4619      	mov	r1, r3
     a9e:	480e      	ldr	r0, [pc, #56]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     aa0:	4b0f      	ldr	r3, [pc, #60]	; (ae0 <_gpio_set_pin_pull_mode+0xa8>)
     aa2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     aa4:	79ba      	ldrb	r2, [r7, #6]
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	4619      	mov	r1, r3
     aaa:	480b      	ldr	r0, [pc, #44]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     aac:	4b0d      	ldr	r3, [pc, #52]	; (ae4 <_gpio_set_pin_pull_mode+0xac>)
     aae:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     ab0:	79bb      	ldrb	r3, [r7, #6]
     ab2:	2201      	movs	r2, #1
     ab4:	409a      	lsls	r2, r3
     ab6:	79fb      	ldrb	r3, [r7, #7]
     ab8:	4619      	mov	r1, r3
     aba:	4807      	ldr	r0, [pc, #28]	; (ad8 <_gpio_set_pin_pull_mode+0xa0>)
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <_gpio_set_pin_pull_mode+0xb4>)
     abe:	4798      	blx	r3
		break;
     ac0:	e005      	b.n	ace <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     ac2:	2289      	movs	r2, #137	; 0x89
     ac4:	490a      	ldr	r1, [pc, #40]	; (af0 <_gpio_set_pin_pull_mode+0xb8>)
     ac6:	2000      	movs	r0, #0
     ac8:	4b0a      	ldr	r3, [pc, #40]	; (af4 <_gpio_set_pin_pull_mode+0xbc>)
     aca:	4798      	blx	r3
		break;
     acc:	bf00      	nop
	}
}
     ace:	bf00      	nop
     ad0:	3708      	adds	r7, #8
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	bf00      	nop
     ad8:	41008000 	.word	0x41008000
     adc:	0000089f 	.word	0x0000089f
     ae0:	000006cb 	.word	0x000006cb
     ae4:	0000085b 	.word	0x0000085b
     ae8:	000006f3 	.word	0x000006f3
     aec:	0000071b 	.word	0x0000071b
     af0:	0000d3e4 	.word	0x0000d3e4
     af4:	00003079 	.word	0x00003079

00000af8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     af8:	b590      	push	{r4, r7, lr}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
     b00:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	095b      	lsrs	r3, r3, #5
     b06:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	b2db      	uxtb	r3, r3
     b0c:	f003 031f 	and.w	r3, r3, #31
     b10:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     b12:	683b      	ldr	r3, [r7, #0]
     b14:	f1b3 3fff 	cmp.w	r3, #4294967295
     b18:	d106      	bne.n	b28 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     b1a:	7bba      	ldrb	r2, [r7, #14]
     b1c:	7bf9      	ldrb	r1, [r7, #15]
     b1e:	2300      	movs	r3, #0
     b20:	4812      	ldr	r0, [pc, #72]	; (b6c <_gpio_set_pin_function+0x74>)
     b22:	4c13      	ldr	r4, [pc, #76]	; (b70 <_gpio_set_pin_function+0x78>)
     b24:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     b26:	e01d      	b.n	b64 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     b28:	7bba      	ldrb	r2, [r7, #14]
     b2a:	7bf9      	ldrb	r1, [r7, #15]
     b2c:	2301      	movs	r3, #1
     b2e:	480f      	ldr	r0, [pc, #60]	; (b6c <_gpio_set_pin_function+0x74>)
     b30:	4c0f      	ldr	r4, [pc, #60]	; (b70 <_gpio_set_pin_function+0x78>)
     b32:	47a0      	blx	r4
		if (pin & 1) {
     b34:	7bbb      	ldrb	r3, [r7, #14]
     b36:	f003 0301 	and.w	r3, r3, #1
     b3a:	2b00      	cmp	r3, #0
     b3c:	d009      	beq.n	b52 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     b3e:	7bbb      	ldrb	r3, [r7, #14]
     b40:	085b      	lsrs	r3, r3, #1
     b42:	b2da      	uxtb	r2, r3
     b44:	683b      	ldr	r3, [r7, #0]
     b46:	b2db      	uxtb	r3, r3
     b48:	7bf9      	ldrb	r1, [r7, #15]
     b4a:	4808      	ldr	r0, [pc, #32]	; (b6c <_gpio_set_pin_function+0x74>)
     b4c:	4c09      	ldr	r4, [pc, #36]	; (b74 <_gpio_set_pin_function+0x7c>)
     b4e:	47a0      	blx	r4
}
     b50:	e008      	b.n	b64 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     b52:	7bbb      	ldrb	r3, [r7, #14]
     b54:	085b      	lsrs	r3, r3, #1
     b56:	b2da      	uxtb	r2, r3
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	b2db      	uxtb	r3, r3
     b5c:	7bf9      	ldrb	r1, [r7, #15]
     b5e:	4803      	ldr	r0, [pc, #12]	; (b6c <_gpio_set_pin_function+0x74>)
     b60:	4c05      	ldr	r4, [pc, #20]	; (b78 <_gpio_set_pin_function+0x80>)
     b62:	47a0      	blx	r4
}
     b64:	bf00      	nop
     b66:	3714      	adds	r7, #20
     b68:	46bd      	mov	sp, r7
     b6a:	bd90      	pop	{r4, r7, pc}
     b6c:	41008000 	.word	0x41008000
     b70:	00000801 	.word	0x00000801
     b74:	000007a3 	.word	0x000007a3
     b78:	00000743 	.word	0x00000743

00000b7c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b082      	sub	sp, #8
     b80:	af00      	add	r7, sp, #0
     b82:	4603      	mov	r3, r0
     b84:	460a      	mov	r2, r1
     b86:	71fb      	strb	r3, [r7, #7]
     b88:	4613      	mov	r3, r2
     b8a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     b8c:	79fb      	ldrb	r3, [r7, #7]
     b8e:	095b      	lsrs	r3, r3, #5
     b90:	b2d8      	uxtb	r0, r3
     b92:	79fb      	ldrb	r3, [r7, #7]
     b94:	f003 031f 	and.w	r3, r3, #31
     b98:	b2db      	uxtb	r3, r3
     b9a:	79ba      	ldrb	r2, [r7, #6]
     b9c:	4619      	mov	r1, r3
     b9e:	4b03      	ldr	r3, [pc, #12]	; (bac <gpio_set_pin_pull_mode+0x30>)
     ba0:	4798      	blx	r3
}
     ba2:	bf00      	nop
     ba4:	3708      	adds	r7, #8
     ba6:	46bd      	mov	sp, r7
     ba8:	bd80      	pop	{r7, pc}
     baa:	bf00      	nop
     bac:	00000a39 	.word	0x00000a39

00000bb0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	b082      	sub	sp, #8
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
     bb8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     bba:	6839      	ldr	r1, [r7, #0]
     bbc:	6878      	ldr	r0, [r7, #4]
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <gpio_set_pin_function+0x1c>)
     bc0:	4798      	blx	r3
}
     bc2:	bf00      	nop
     bc4:	3708      	adds	r7, #8
     bc6:	46bd      	mov	sp, r7
     bc8:	bd80      	pop	{r7, pc}
     bca:	bf00      	nop
     bcc:	00000af9 	.word	0x00000af9

00000bd0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     bd0:	b580      	push	{r7, lr}
     bd2:	b082      	sub	sp, #8
     bd4:	af00      	add	r7, sp, #0
     bd6:	4603      	mov	r3, r0
     bd8:	460a      	mov	r2, r1
     bda:	71fb      	strb	r3, [r7, #7]
     bdc:	4613      	mov	r3, r2
     bde:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     be0:	79fb      	ldrb	r3, [r7, #7]
     be2:	095b      	lsrs	r3, r3, #5
     be4:	b2d8      	uxtb	r0, r3
     be6:	79fb      	ldrb	r3, [r7, #7]
     be8:	f003 031f 	and.w	r3, r3, #31
     bec:	2201      	movs	r2, #1
     bee:	fa02 f303 	lsl.w	r3, r2, r3
     bf2:	79ba      	ldrb	r2, [r7, #6]
     bf4:	4619      	mov	r1, r3
     bf6:	4b03      	ldr	r3, [pc, #12]	; (c04 <gpio_set_pin_direction+0x34>)
     bf8:	4798      	blx	r3
}
     bfa:	bf00      	nop
     bfc:	3708      	adds	r7, #8
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	0000090d 	.word	0x0000090d

00000c08 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c08:	b580      	push	{r7, lr}
     c0a:	b082      	sub	sp, #8
     c0c:	af00      	add	r7, sp, #0
     c0e:	4603      	mov	r3, r0
     c10:	460a      	mov	r2, r1
     c12:	71fb      	strb	r3, [r7, #7]
     c14:	4613      	mov	r3, r2
     c16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c18:	79fb      	ldrb	r3, [r7, #7]
     c1a:	095b      	lsrs	r3, r3, #5
     c1c:	b2d8      	uxtb	r0, r3
     c1e:	79fb      	ldrb	r3, [r7, #7]
     c20:	f003 031f 	and.w	r3, r3, #31
     c24:	2201      	movs	r2, #1
     c26:	fa02 f303 	lsl.w	r3, r2, r3
     c2a:	79ba      	ldrb	r2, [r7, #6]
     c2c:	4619      	mov	r1, r3
     c2e:	4b03      	ldr	r3, [pc, #12]	; (c3c <gpio_set_pin_level+0x34>)
     c30:	4798      	blx	r3
}
     c32:	bf00      	nop
     c34:	3708      	adds	r7, #8
     c36:	46bd      	mov	sp, r7
     c38:	bd80      	pop	{r7, pc}
     c3a:	bf00      	nop
     c3c:	000009f5 	.word	0x000009f5

00000c40 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     c40:	b580      	push	{r7, lr}
     c42:	af00      	add	r7, sp, #0
	_init_chip();
     c44:	4b01      	ldr	r3, [pc, #4]	; (c4c <init_mcu+0xc>)
     c46:	4798      	blx	r3
}
     c48:	bf00      	nop
     c4a:	bd80      	pop	{r7, pc}
     c4c:	00003c81 	.word	0x00003c81

00000c50 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     c50:	b580      	push	{r7, lr}
     c52:	b082      	sub	sp, #8
     c54:	af00      	add	r7, sp, #0
     c56:	6078      	str	r0, [r7, #4]
     c58:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d004      	beq.n	c6a <wdt_init+0x1a>
     c60:	683b      	ldr	r3, [r7, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d001      	beq.n	c6a <wdt_init+0x1a>
     c66:	2301      	movs	r3, #1
     c68:	e000      	b.n	c6c <wdt_init+0x1c>
     c6a:	2300      	movs	r3, #0
     c6c:	f003 0301 	and.w	r3, r3, #1
     c70:	b2db      	uxtb	r3, r3
     c72:	2248      	movs	r2, #72	; 0x48
     c74:	4907      	ldr	r1, [pc, #28]	; (c94 <wdt_init+0x44>)
     c76:	4618      	mov	r0, r3
     c78:	4b07      	ldr	r3, [pc, #28]	; (c98 <wdt_init+0x48>)
     c7a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	683a      	ldr	r2, [r7, #0]
     c80:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	4618      	mov	r0, r3
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <wdt_init+0x4c>)
     c88:	4798      	blx	r3
     c8a:	4603      	mov	r3, r0
}
     c8c:	4618      	mov	r0, r3
     c8e:	3708      	adds	r7, #8
     c90:	46bd      	mov	sp, r7
     c92:	bd80      	pop	{r7, pc}
     c94:	0000d400 	.word	0x0000d400
     c98:	00003079 	.word	0x00003079
     c9c:	0000a165 	.word	0x0000a165

00000ca0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     ca4:	4804      	ldr	r0, [pc, #16]	; (cb8 <CRC_CALC_init+0x18>)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <CRC_CALC_init+0x1c>)
     ca8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     caa:	4905      	ldr	r1, [pc, #20]	; (cc0 <CRC_CALC_init+0x20>)
     cac:	4805      	ldr	r0, [pc, #20]	; (cc4 <CRC_CALC_init+0x24>)
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <CRC_CALC_init+0x28>)
     cb0:	4798      	blx	r3
}
     cb2:	bf00      	nop
     cb4:	bd80      	pop	{r7, pc}
     cb6:	bf00      	nop
     cb8:	40000800 	.word	0x40000800
     cbc:	00000563 	.word	0x00000563
     cc0:	41002000 	.word	0x41002000
     cc4:	20000dc8 	.word	0x20000dc8
     cc8:	000017ad 	.word	0x000017ad

00000ccc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     ccc:	b580      	push	{r7, lr}
     cce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     cd0:	2244      	movs	r2, #68	; 0x44
     cd2:	2104      	movs	r1, #4
     cd4:	481e      	ldr	r0, [pc, #120]	; (d50 <EXTERNAL_IRQ_0_init+0x84>)
     cd6:	4b1f      	ldr	r3, [pc, #124]	; (d54 <EXTERNAL_IRQ_0_init+0x88>)
     cd8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     cda:	481f      	ldr	r0, [pc, #124]	; (d58 <EXTERNAL_IRQ_0_init+0x8c>)
     cdc:	4b1f      	ldr	r3, [pc, #124]	; (d5c <EXTERNAL_IRQ_0_init+0x90>)
     cde:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
     ce0:	2101      	movs	r1, #1
     ce2:	2004      	movs	r0, #4
     ce4:	4b1e      	ldr	r3, [pc, #120]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     ce6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
     ce8:	2102      	movs	r1, #2
     cea:	2004      	movs	r0, #4
     cec:	4b1d      	ldr	r3, [pc, #116]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     cee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
     cf0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     cf4:	2004      	movs	r0, #4
     cf6:	4b1c      	ldr	r3, [pc, #112]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     cf8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
     cfa:	2101      	movs	r1, #1
     cfc:	2005      	movs	r0, #5
     cfe:	4b18      	ldr	r3, [pc, #96]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     d00:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
     d02:	2102      	movs	r1, #2
     d04:	2005      	movs	r0, #5
     d06:	4b17      	ldr	r3, [pc, #92]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     d08:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
     d0a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     d0e:	2005      	movs	r0, #5
     d10:	4b15      	ldr	r3, [pc, #84]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     d12:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
     d14:	2101      	movs	r1, #1
     d16:	2056      	movs	r0, #86	; 0x56
     d18:	4b11      	ldr	r3, [pc, #68]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     d1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
     d1c:	2102      	movs	r1, #2
     d1e:	2056      	movs	r0, #86	; 0x56
     d20:	4b10      	ldr	r3, [pc, #64]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     d22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
     d24:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     d28:	2056      	movs	r0, #86	; 0x56
     d2a:	4b0f      	ldr	r3, [pc, #60]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     d2c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
     d2e:	2101      	movs	r1, #1
     d30:	2057      	movs	r0, #87	; 0x57
     d32:	4b0b      	ldr	r3, [pc, #44]	; (d60 <EXTERNAL_IRQ_0_init+0x94>)
     d34:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
     d36:	2102      	movs	r1, #2
     d38:	2057      	movs	r0, #87	; 0x57
     d3a:	4b0a      	ldr	r3, [pc, #40]	; (d64 <EXTERNAL_IRQ_0_init+0x98>)
     d3c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
     d3e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     d42:	2057      	movs	r0, #87	; 0x57
     d44:	4b08      	ldr	r3, [pc, #32]	; (d68 <EXTERNAL_IRQ_0_init+0x9c>)
     d46:	4798      	blx	r3

	ext_irq_init();
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <EXTERNAL_IRQ_0_init+0xa0>)
     d4a:	4798      	blx	r3
}
     d4c:	bf00      	nop
     d4e:	bd80      	pop	{r7, pc}
     d50:	40001c00 	.word	0x40001c00
     d54:	000003fd 	.word	0x000003fd
     d58:	40000800 	.word	0x40000800
     d5c:	000004e3 	.word	0x000004e3
     d60:	00000bd1 	.word	0x00000bd1
     d64:	00000b7d 	.word	0x00000b7d
     d68:	00000bb1 	.word	0x00000bb1
     d6c:	00001875 	.word	0x00001875

00000d70 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     d70:	b580      	push	{r7, lr}
     d72:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d74:	2244      	movs	r2, #68	; 0x44
     d76:	210b      	movs	r1, #11
     d78:	4804      	ldr	r0, [pc, #16]	; (d8c <EVENT_SYSTEM_0_init+0x1c>)
     d7a:	4b05      	ldr	r3, [pc, #20]	; (d90 <EVENT_SYSTEM_0_init+0x20>)
     d7c:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     d7e:	4805      	ldr	r0, [pc, #20]	; (d94 <EVENT_SYSTEM_0_init+0x24>)
     d80:	4b05      	ldr	r3, [pc, #20]	; (d98 <EVENT_SYSTEM_0_init+0x28>)
     d82:	4798      	blx	r3

	event_system_init();
     d84:	4b05      	ldr	r3, [pc, #20]	; (d9c <EVENT_SYSTEM_0_init+0x2c>)
     d86:	4798      	blx	r3
}
     d88:	bf00      	nop
     d8a:	bd80      	pop	{r7, pc}
     d8c:	40001c00 	.word	0x40001c00
     d90:	000003fd 	.word	0x000003fd
     d94:	40000800 	.word	0x40000800
     d98:	00000583 	.word	0x00000583
     d9c:	00001861 	.word	0x00001861

00000da0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     da4:	2101      	movs	r1, #1
     da6:	202b      	movs	r0, #43	; 0x2b
     da8:	4b2b      	ldr	r3, [pc, #172]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     daa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     dac:	2100      	movs	r1, #0
     dae:	202b      	movs	r0, #43	; 0x2b
     db0:	4b2a      	ldr	r3, [pc, #168]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     db2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     db4:	492a      	ldr	r1, [pc, #168]	; (e60 <QSPI_N25Q256_PORT_init+0xc0>)
     db6:	202b      	movs	r0, #43	; 0x2b
     db8:	4b2a      	ldr	r3, [pc, #168]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     dba:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     dbc:	2102      	movs	r1, #2
     dbe:	2008      	movs	r0, #8
     dc0:	4b25      	ldr	r3, [pc, #148]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     dc2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     dc4:	2100      	movs	r1, #0
     dc6:	2008      	movs	r0, #8
     dc8:	4b27      	ldr	r3, [pc, #156]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     dca:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     dcc:	2100      	movs	r1, #0
     dce:	2008      	movs	r0, #8
     dd0:	4b22      	ldr	r3, [pc, #136]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     dd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     dd4:	4925      	ldr	r1, [pc, #148]	; (e6c <QSPI_N25Q256_PORT_init+0xcc>)
     dd6:	2008      	movs	r0, #8
     dd8:	4b22      	ldr	r3, [pc, #136]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     dda:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     ddc:	2102      	movs	r1, #2
     dde:	2009      	movs	r0, #9
     de0:	4b1d      	ldr	r3, [pc, #116]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     de2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     de4:	2100      	movs	r1, #0
     de6:	2009      	movs	r0, #9
     de8:	4b1f      	ldr	r3, [pc, #124]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     dea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     dec:	2100      	movs	r1, #0
     dee:	2009      	movs	r0, #9
     df0:	4b1a      	ldr	r3, [pc, #104]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     df2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     df4:	491e      	ldr	r1, [pc, #120]	; (e70 <QSPI_N25Q256_PORT_init+0xd0>)
     df6:	2009      	movs	r0, #9
     df8:	4b1a      	ldr	r3, [pc, #104]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     dfa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     dfc:	2102      	movs	r1, #2
     dfe:	200a      	movs	r0, #10
     e00:	4b15      	ldr	r3, [pc, #84]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     e02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     e04:	2100      	movs	r1, #0
     e06:	200a      	movs	r0, #10
     e08:	4b17      	ldr	r3, [pc, #92]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     e0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     e0c:	2100      	movs	r1, #0
     e0e:	200a      	movs	r0, #10
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     e12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     e14:	4917      	ldr	r1, [pc, #92]	; (e74 <QSPI_N25Q256_PORT_init+0xd4>)
     e16:	200a      	movs	r0, #10
     e18:	4b12      	ldr	r3, [pc, #72]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     e1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     e1c:	2102      	movs	r1, #2
     e1e:	200b      	movs	r0, #11
     e20:	4b0d      	ldr	r3, [pc, #52]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     e22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     e24:	2100      	movs	r1, #0
     e26:	200b      	movs	r0, #11
     e28:	4b0f      	ldr	r3, [pc, #60]	; (e68 <QSPI_N25Q256_PORT_init+0xc8>)
     e2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     e2c:	2100      	movs	r1, #0
     e2e:	200b      	movs	r0, #11
     e30:	4b0a      	ldr	r3, [pc, #40]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     e34:	4910      	ldr	r1, [pc, #64]	; (e78 <QSPI_N25Q256_PORT_init+0xd8>)
     e36:	200b      	movs	r0, #11
     e38:	4b0a      	ldr	r3, [pc, #40]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     e3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     e3c:	2101      	movs	r1, #1
     e3e:	202a      	movs	r0, #42	; 0x2a
     e40:	4b05      	ldr	r3, [pc, #20]	; (e58 <QSPI_N25Q256_PORT_init+0xb8>)
     e42:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     e44:	2100      	movs	r1, #0
     e46:	202a      	movs	r0, #42	; 0x2a
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <QSPI_N25Q256_PORT_init+0xbc>)
     e4a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     e4c:	490b      	ldr	r1, [pc, #44]	; (e7c <QSPI_N25Q256_PORT_init+0xdc>)
     e4e:	202a      	movs	r0, #42	; 0x2a
     e50:	4b04      	ldr	r3, [pc, #16]	; (e64 <QSPI_N25Q256_PORT_init+0xc4>)
     e52:	4798      	blx	r3
}
     e54:	bf00      	nop
     e56:	bd80      	pop	{r7, pc}
     e58:	00000bd1 	.word	0x00000bd1
     e5c:	00000b7d 	.word	0x00000b7d
     e60:	002b0007 	.word	0x002b0007
     e64:	00000bb1 	.word	0x00000bb1
     e68:	00000c09 	.word	0x00000c09
     e6c:	00080007 	.word	0x00080007
     e70:	00090007 	.word	0x00090007
     e74:	000a0007 	.word	0x000a0007
     e78:	000b0007 	.word	0x000b0007
     e7c:	002a0007 	.word	0x002a0007

00000e80 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     e80:	b580      	push	{r7, lr}
     e82:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     e84:	4805      	ldr	r0, [pc, #20]	; (e9c <QSPI_N25Q256_CLOCK_init+0x1c>)
     e86:	4b06      	ldr	r3, [pc, #24]	; (ea0 <QSPI_N25Q256_CLOCK_init+0x20>)
     e88:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     e8a:	4804      	ldr	r0, [pc, #16]	; (e9c <QSPI_N25Q256_CLOCK_init+0x1c>)
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <QSPI_N25Q256_CLOCK_init+0x24>)
     e8e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     e90:	4802      	ldr	r0, [pc, #8]	; (e9c <QSPI_N25Q256_CLOCK_init+0x1c>)
     e92:	4b05      	ldr	r3, [pc, #20]	; (ea8 <QSPI_N25Q256_CLOCK_init+0x28>)
     e94:	4798      	blx	r3
}
     e96:	bf00      	nop
     e98:	bd80      	pop	{r7, pc}
     e9a:	bf00      	nop
     e9c:	40000800 	.word	0x40000800
     ea0:	00000443 	.word	0x00000443
     ea4:	00000483 	.word	0x00000483
     ea8:	000005e3 	.word	0x000005e3

00000eac <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     eac:	b580      	push	{r7, lr}
     eae:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     eb0:	4b04      	ldr	r3, [pc, #16]	; (ec4 <QSPI_N25Q256_init+0x18>)
     eb2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     eb4:	4904      	ldr	r1, [pc, #16]	; (ec8 <QSPI_N25Q256_init+0x1c>)
     eb6:	4805      	ldr	r0, [pc, #20]	; (ecc <QSPI_N25Q256_init+0x20>)
     eb8:	4b05      	ldr	r3, [pc, #20]	; (ed0 <QSPI_N25Q256_init+0x24>)
     eba:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     ebc:	4b05      	ldr	r3, [pc, #20]	; (ed4 <QSPI_N25Q256_init+0x28>)
     ebe:	4798      	blx	r3
}
     ec0:	bf00      	nop
     ec2:	bd80      	pop	{r7, pc}
     ec4:	00000e81 	.word	0x00000e81
     ec8:	42003400 	.word	0x42003400
     ecc:	20000c6c 	.word	0x20000c6c
     ed0:	00001c15 	.word	0x00001c15
     ed4:	00000da1 	.word	0x00000da1

00000ed8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
     ed8:	b580      	push	{r7, lr}
     eda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     edc:	4802      	ldr	r0, [pc, #8]	; (ee8 <DATETIME_CLOCK_CLOCK_init+0x10>)
     ede:	4b03      	ldr	r3, [pc, #12]	; (eec <DATETIME_CLOCK_CLOCK_init+0x14>)
     ee0:	4798      	blx	r3
}
     ee2:	bf00      	nop
     ee4:	bd80      	pop	{r7, pc}
     ee6:	bf00      	nop
     ee8:	40000800 	.word	0x40000800
     eec:	000004c3 	.word	0x000004c3

00000ef0 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
     ef4:	4b03      	ldr	r3, [pc, #12]	; (f04 <DATETIME_CLOCK_init+0x14>)
     ef6:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
     ef8:	4903      	ldr	r1, [pc, #12]	; (f08 <DATETIME_CLOCK_init+0x18>)
     efa:	4804      	ldr	r0, [pc, #16]	; (f0c <DATETIME_CLOCK_init+0x1c>)
     efc:	4b04      	ldr	r3, [pc, #16]	; (f10 <DATETIME_CLOCK_init+0x20>)
     efe:	4798      	blx	r3
}
     f00:	bf00      	nop
     f02:	bd80      	pop	{r7, pc}
     f04:	00000ed9 	.word	0x00000ed9
     f08:	40002400 	.word	0x40002400
     f0c:	20000da4 	.word	0x20000da4
     f10:	00001651 	.word	0x00001651

00000f14 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
     f14:	b580      	push	{r7, lr}
     f16:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
     f18:	2100      	movs	r1, #0
     f1a:	203b      	movs	r0, #59	; 0x3b
     f1c:	4b11      	ldr	r3, [pc, #68]	; (f64 <SPI_TEMP_PORT_init+0x50>)
     f1e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
     f20:	2102      	movs	r1, #2
     f22:	203b      	movs	r0, #59	; 0x3b
     f24:	4b10      	ldr	r3, [pc, #64]	; (f68 <SPI_TEMP_PORT_init+0x54>)
     f26:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
     f28:	4910      	ldr	r1, [pc, #64]	; (f6c <SPI_TEMP_PORT_init+0x58>)
     f2a:	203b      	movs	r0, #59	; 0x3b
     f2c:	4b10      	ldr	r3, [pc, #64]	; (f70 <SPI_TEMP_PORT_init+0x5c>)
     f2e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
     f30:	2100      	movs	r1, #0
     f32:	203a      	movs	r0, #58	; 0x3a
     f34:	4b0b      	ldr	r3, [pc, #44]	; (f64 <SPI_TEMP_PORT_init+0x50>)
     f36:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
     f38:	2102      	movs	r1, #2
     f3a:	203a      	movs	r0, #58	; 0x3a
     f3c:	4b0a      	ldr	r3, [pc, #40]	; (f68 <SPI_TEMP_PORT_init+0x54>)
     f3e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
     f40:	490c      	ldr	r1, [pc, #48]	; (f74 <SPI_TEMP_PORT_init+0x60>)
     f42:	203a      	movs	r0, #58	; 0x3a
     f44:	4b0a      	ldr	r3, [pc, #40]	; (f70 <SPI_TEMP_PORT_init+0x5c>)
     f46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
     f48:	2101      	movs	r1, #1
     f4a:	203c      	movs	r0, #60	; 0x3c
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <SPI_TEMP_PORT_init+0x54>)
     f4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
     f50:	2100      	movs	r1, #0
     f52:	203c      	movs	r0, #60	; 0x3c
     f54:	4b08      	ldr	r3, [pc, #32]	; (f78 <SPI_TEMP_PORT_init+0x64>)
     f56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
     f58:	4908      	ldr	r1, [pc, #32]	; (f7c <SPI_TEMP_PORT_init+0x68>)
     f5a:	203c      	movs	r0, #60	; 0x3c
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <SPI_TEMP_PORT_init+0x5c>)
     f5e:	4798      	blx	r3
}
     f60:	bf00      	nop
     f62:	bd80      	pop	{r7, pc}
     f64:	00000c09 	.word	0x00000c09
     f68:	00000bd1 	.word	0x00000bd1
     f6c:	003b0003 	.word	0x003b0003
     f70:	00000bb1 	.word	0x00000bb1
     f74:	003a0003 	.word	0x003a0003
     f78:	00000b7d 	.word	0x00000b7d
     f7c:	003c0003 	.word	0x003c0003

00000f80 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
     f80:	b580      	push	{r7, lr}
     f82:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f84:	2243      	movs	r2, #67	; 0x43
     f86:	2122      	movs	r1, #34	; 0x22
     f88:	4806      	ldr	r0, [pc, #24]	; (fa4 <SPI_TEMP_CLOCK_init+0x24>)
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <SPI_TEMP_CLOCK_init+0x28>)
     f8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f8e:	224a      	movs	r2, #74	; 0x4a
     f90:	2103      	movs	r1, #3
     f92:	4804      	ldr	r0, [pc, #16]	; (fa4 <SPI_TEMP_CLOCK_init+0x24>)
     f94:	4b04      	ldr	r3, [pc, #16]	; (fa8 <SPI_TEMP_CLOCK_init+0x28>)
     f96:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
     f98:	4804      	ldr	r0, [pc, #16]	; (fac <SPI_TEMP_CLOCK_init+0x2c>)
     f9a:	4b05      	ldr	r3, [pc, #20]	; (fb0 <SPI_TEMP_CLOCK_init+0x30>)
     f9c:	4798      	blx	r3
}
     f9e:	bf00      	nop
     fa0:	bd80      	pop	{r7, pc}
     fa2:	bf00      	nop
     fa4:	40001c00 	.word	0x40001c00
     fa8:	000003fd 	.word	0x000003fd
     fac:	40000800 	.word	0x40000800
     fb0:	00000603 	.word	0x00000603

00000fb4 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
     fb8:	4b05      	ldr	r3, [pc, #20]	; (fd0 <SPI_TEMP_init+0x1c>)
     fba:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
     fbc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     fc0:	4804      	ldr	r0, [pc, #16]	; (fd4 <SPI_TEMP_init+0x20>)
     fc2:	4b05      	ldr	r3, [pc, #20]	; (fd8 <SPI_TEMP_init+0x24>)
     fc4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <SPI_TEMP_init+0x28>)
     fc8:	4798      	blx	r3
}
     fca:	bf00      	nop
     fcc:	bd80      	pop	{r7, pc}
     fce:	bf00      	nop
     fd0:	00000f81 	.word	0x00000f81
     fd4:	20000c24 	.word	0x20000c24
     fd8:	00001f3d 	.word	0x00001f3d
     fdc:	00000f15 	.word	0x00000f15

00000fe0 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
     fe0:	b580      	push	{r7, lr}
     fe2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
     fe4:	2100      	movs	r1, #0
     fe6:	2017      	movs	r0, #23
     fe8:	4b07      	ldr	r3, [pc, #28]	; (1008 <I2C_EXPANDER_PORT_init+0x28>)
     fea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
     fec:	4907      	ldr	r1, [pc, #28]	; (100c <I2C_EXPANDER_PORT_init+0x2c>)
     fee:	2017      	movs	r0, #23
     ff0:	4b07      	ldr	r3, [pc, #28]	; (1010 <I2C_EXPANDER_PORT_init+0x30>)
     ff2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
     ff4:	2100      	movs	r1, #0
     ff6:	2016      	movs	r0, #22
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <I2C_EXPANDER_PORT_init+0x28>)
     ffa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
     ffc:	4905      	ldr	r1, [pc, #20]	; (1014 <I2C_EXPANDER_PORT_init+0x34>)
     ffe:	2016      	movs	r0, #22
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <I2C_EXPANDER_PORT_init+0x30>)
    1002:	4798      	blx	r3
}
    1004:	bf00      	nop
    1006:	bd80      	pop	{r7, pc}
    1008:	00000b7d 	.word	0x00000b7d
    100c:	00170003 	.word	0x00170003
    1010:	00000bb1 	.word	0x00000bb1
    1014:	00160003 	.word	0x00160003

00001018 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1018:	b580      	push	{r7, lr}
    101a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    101c:	2243      	movs	r2, #67	; 0x43
    101e:	2123      	movs	r1, #35	; 0x23
    1020:	4806      	ldr	r0, [pc, #24]	; (103c <I2C_EXPANDER_CLOCK_init+0x24>)
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <I2C_EXPANDER_CLOCK_init+0x28>)
    1024:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1026:	224a      	movs	r2, #74	; 0x4a
    1028:	2103      	movs	r1, #3
    102a:	4804      	ldr	r0, [pc, #16]	; (103c <I2C_EXPANDER_CLOCK_init+0x24>)
    102c:	4b04      	ldr	r3, [pc, #16]	; (1040 <I2C_EXPANDER_CLOCK_init+0x28>)
    102e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1030:	4804      	ldr	r0, [pc, #16]	; (1044 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <I2C_EXPANDER_CLOCK_init+0x30>)
    1034:	4798      	blx	r3
}
    1036:	bf00      	nop
    1038:	bd80      	pop	{r7, pc}
    103a:	bf00      	nop
    103c:	40001c00 	.word	0x40001c00
    1040:	000003fd 	.word	0x000003fd
    1044:	40000800 	.word	0x40000800
    1048:	00000623 	.word	0x00000623

0000104c <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    104c:	b580      	push	{r7, lr}
    104e:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <I2C_EXPANDER_init+0x18>)
    1052:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    1054:	4904      	ldr	r1, [pc, #16]	; (1068 <I2C_EXPANDER_init+0x1c>)
    1056:	4805      	ldr	r0, [pc, #20]	; (106c <I2C_EXPANDER_init+0x20>)
    1058:	4b05      	ldr	r3, [pc, #20]	; (1070 <I2C_EXPANDER_init+0x24>)
    105a:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    105c:	4b05      	ldr	r3, [pc, #20]	; (1074 <I2C_EXPANDER_init+0x28>)
    105e:	4798      	blx	r3
}
    1060:	bf00      	nop
    1062:	bd80      	pop	{r7, pc}
    1064:	00001019 	.word	0x00001019
    1068:	43000400 	.word	0x43000400
    106c:	20000d08 	.word	0x20000d08
    1070:	00001a81 	.word	0x00001a81
    1074:	00000fe1 	.word	0x00000fe1

00001078 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1078:	b580      	push	{r7, lr}
    107a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    107c:	2100      	movs	r1, #0
    107e:	2044      	movs	r0, #68	; 0x44
    1080:	4b11      	ldr	r3, [pc, #68]	; (10c8 <SPI_HI3593_PORT_init+0x50>)
    1082:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1084:	2102      	movs	r1, #2
    1086:	2044      	movs	r0, #68	; 0x44
    1088:	4b10      	ldr	r3, [pc, #64]	; (10cc <SPI_HI3593_PORT_init+0x54>)
    108a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    108c:	4910      	ldr	r1, [pc, #64]	; (10d0 <SPI_HI3593_PORT_init+0x58>)
    108e:	2044      	movs	r0, #68	; 0x44
    1090:	4b10      	ldr	r3, [pc, #64]	; (10d4 <SPI_HI3593_PORT_init+0x5c>)
    1092:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1094:	2100      	movs	r1, #0
    1096:	2045      	movs	r0, #69	; 0x45
    1098:	4b0b      	ldr	r3, [pc, #44]	; (10c8 <SPI_HI3593_PORT_init+0x50>)
    109a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    109c:	2102      	movs	r1, #2
    109e:	2045      	movs	r0, #69	; 0x45
    10a0:	4b0a      	ldr	r3, [pc, #40]	; (10cc <SPI_HI3593_PORT_init+0x54>)
    10a2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    10a4:	490c      	ldr	r1, [pc, #48]	; (10d8 <SPI_HI3593_PORT_init+0x60>)
    10a6:	2045      	movs	r0, #69	; 0x45
    10a8:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <SPI_HI3593_PORT_init+0x5c>)
    10aa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    10ac:	2101      	movs	r1, #1
    10ae:	2047      	movs	r0, #71	; 0x47
    10b0:	4b06      	ldr	r3, [pc, #24]	; (10cc <SPI_HI3593_PORT_init+0x54>)
    10b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    10b4:	2100      	movs	r1, #0
    10b6:	2047      	movs	r0, #71	; 0x47
    10b8:	4b08      	ldr	r3, [pc, #32]	; (10dc <SPI_HI3593_PORT_init+0x64>)
    10ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    10bc:	4908      	ldr	r1, [pc, #32]	; (10e0 <SPI_HI3593_PORT_init+0x68>)
    10be:	2047      	movs	r0, #71	; 0x47
    10c0:	4b04      	ldr	r3, [pc, #16]	; (10d4 <SPI_HI3593_PORT_init+0x5c>)
    10c2:	4798      	blx	r3
}
    10c4:	bf00      	nop
    10c6:	bd80      	pop	{r7, pc}
    10c8:	00000c09 	.word	0x00000c09
    10cc:	00000bd1 	.word	0x00000bd1
    10d0:	00440002 	.word	0x00440002
    10d4:	00000bb1 	.word	0x00000bb1
    10d8:	00450002 	.word	0x00450002
    10dc:	00000b7d 	.word	0x00000b7d
    10e0:	00470002 	.word	0x00470002

000010e4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    10e4:	b580      	push	{r7, lr}
    10e6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10e8:	2243      	movs	r2, #67	; 0x43
    10ea:	2124      	movs	r1, #36	; 0x24
    10ec:	4806      	ldr	r0, [pc, #24]	; (1108 <SPI_HI3593_CLOCK_init+0x24>)
    10ee:	4b07      	ldr	r3, [pc, #28]	; (110c <SPI_HI3593_CLOCK_init+0x28>)
    10f0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10f2:	224a      	movs	r2, #74	; 0x4a
    10f4:	2103      	movs	r1, #3
    10f6:	4804      	ldr	r0, [pc, #16]	; (1108 <SPI_HI3593_CLOCK_init+0x24>)
    10f8:	4b04      	ldr	r3, [pc, #16]	; (110c <SPI_HI3593_CLOCK_init+0x28>)
    10fa:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    10fc:	4804      	ldr	r0, [pc, #16]	; (1110 <SPI_HI3593_CLOCK_init+0x2c>)
    10fe:	4b05      	ldr	r3, [pc, #20]	; (1114 <SPI_HI3593_CLOCK_init+0x30>)
    1100:	4798      	blx	r3
}
    1102:	bf00      	nop
    1104:	bd80      	pop	{r7, pc}
    1106:	bf00      	nop
    1108:	40001c00 	.word	0x40001c00
    110c:	000003fd 	.word	0x000003fd
    1110:	40000800 	.word	0x40000800
    1114:	00000643 	.word	0x00000643

00001118 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1118:	b580      	push	{r7, lr}
    111a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    111c:	4b04      	ldr	r3, [pc, #16]	; (1130 <SPI_HI3593_init+0x18>)
    111e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1120:	4904      	ldr	r1, [pc, #16]	; (1134 <SPI_HI3593_init+0x1c>)
    1122:	4805      	ldr	r0, [pc, #20]	; (1138 <SPI_HI3593_init+0x20>)
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <SPI_HI3593_init+0x24>)
    1126:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1128:	4b05      	ldr	r3, [pc, #20]	; (1140 <SPI_HI3593_init+0x28>)
    112a:	4798      	blx	r3
}
    112c:	bf00      	nop
    112e:	bd80      	pop	{r7, pc}
    1130:	000010e5 	.word	0x000010e5
    1134:	43000800 	.word	0x43000800
    1138:	20000c0c 	.word	0x20000c0c
    113c:	000020f1 	.word	0x000020f1
    1140:	00001079 	.word	0x00001079

00001144 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1144:	b580      	push	{r7, lr}
    1146:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1148:	2100      	movs	r1, #0
    114a:	2068      	movs	r0, #104	; 0x68
    114c:	4b07      	ldr	r3, [pc, #28]	; (116c <I2C_EEPROM_PORT_init+0x28>)
    114e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1150:	4907      	ldr	r1, [pc, #28]	; (1170 <I2C_EEPROM_PORT_init+0x2c>)
    1152:	2068      	movs	r0, #104	; 0x68
    1154:	4b07      	ldr	r3, [pc, #28]	; (1174 <I2C_EEPROM_PORT_init+0x30>)
    1156:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1158:	2100      	movs	r1, #0
    115a:	2069      	movs	r0, #105	; 0x69
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <I2C_EEPROM_PORT_init+0x28>)
    115e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1160:	4905      	ldr	r1, [pc, #20]	; (1178 <I2C_EEPROM_PORT_init+0x34>)
    1162:	2069      	movs	r0, #105	; 0x69
    1164:	4b03      	ldr	r3, [pc, #12]	; (1174 <I2C_EEPROM_PORT_init+0x30>)
    1166:	4798      	blx	r3
}
    1168:	bf00      	nop
    116a:	bd80      	pop	{r7, pc}
    116c:	00000b7d 	.word	0x00000b7d
    1170:	00680002 	.word	0x00680002
    1174:	00000bb1 	.word	0x00000bb1
    1178:	00690002 	.word	0x00690002

0000117c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    117c:	b580      	push	{r7, lr}
    117e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1180:	2242      	movs	r2, #66	; 0x42
    1182:	2125      	movs	r1, #37	; 0x25
    1184:	4806      	ldr	r0, [pc, #24]	; (11a0 <I2C_EEPROM_CLOCK_init+0x24>)
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <I2C_EEPROM_CLOCK_init+0x28>)
    1188:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    118a:	224a      	movs	r2, #74	; 0x4a
    118c:	2103      	movs	r1, #3
    118e:	4804      	ldr	r0, [pc, #16]	; (11a0 <I2C_EEPROM_CLOCK_init+0x24>)
    1190:	4b04      	ldr	r3, [pc, #16]	; (11a4 <I2C_EEPROM_CLOCK_init+0x28>)
    1192:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1194:	4804      	ldr	r0, [pc, #16]	; (11a8 <I2C_EEPROM_CLOCK_init+0x2c>)
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <I2C_EEPROM_CLOCK_init+0x30>)
    1198:	4798      	blx	r3
}
    119a:	bf00      	nop
    119c:	bd80      	pop	{r7, pc}
    119e:	bf00      	nop
    11a0:	40001c00 	.word	0x40001c00
    11a4:	000003fd 	.word	0x000003fd
    11a8:	40000800 	.word	0x40000800
    11ac:	00000663 	.word	0x00000663

000011b0 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    11b4:	4b04      	ldr	r3, [pc, #16]	; (11c8 <I2C_EEPROM_init+0x18>)
    11b6:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    11b8:	4904      	ldr	r1, [pc, #16]	; (11cc <I2C_EEPROM_init+0x1c>)
    11ba:	4805      	ldr	r0, [pc, #20]	; (11d0 <I2C_EEPROM_init+0x20>)
    11bc:	4b05      	ldr	r3, [pc, #20]	; (11d4 <I2C_EEPROM_init+0x24>)
    11be:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    11c0:	4b05      	ldr	r3, [pc, #20]	; (11d8 <I2C_EEPROM_init+0x28>)
    11c2:	4798      	blx	r3
}
    11c4:	bf00      	nop
    11c6:	bd80      	pop	{r7, pc}
    11c8:	0000117d 	.word	0x0000117d
    11cc:	43000c00 	.word	0x43000c00
    11d0:	20000d64 	.word	0x20000d64
    11d4:	00001a81 	.word	0x00001a81
    11d8:	00001145 	.word	0x00001145

000011dc <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    11dc:	b580      	push	{r7, lr}
    11de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    11e0:	4808      	ldr	r0, [pc, #32]	; (1204 <TIMER_INTERFACE_init+0x28>)
    11e2:	4b09      	ldr	r3, [pc, #36]	; (1208 <TIMER_INTERFACE_init+0x2c>)
    11e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11e6:	2243      	movs	r2, #67	; 0x43
    11e8:	2109      	movs	r1, #9
    11ea:	4808      	ldr	r0, [pc, #32]	; (120c <TIMER_INTERFACE_init+0x30>)
    11ec:	4b08      	ldr	r3, [pc, #32]	; (1210 <TIMER_INTERFACE_init+0x34>)
    11ee:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <TIMER_INTERFACE_init+0x38>)
    11f2:	4798      	blx	r3
    11f4:	4603      	mov	r3, r0
    11f6:	461a      	mov	r2, r3
    11f8:	4907      	ldr	r1, [pc, #28]	; (1218 <TIMER_INTERFACE_init+0x3c>)
    11fa:	4808      	ldr	r0, [pc, #32]	; (121c <TIMER_INTERFACE_init+0x40>)
    11fc:	4b08      	ldr	r3, [pc, #32]	; (1220 <TIMER_INTERFACE_init+0x44>)
    11fe:	4798      	blx	r3
}
    1200:	bf00      	nop
    1202:	bd80      	pop	{r7, pc}
    1204:	40000800 	.word	0x40000800
    1208:	00000503 	.word	0x00000503
    120c:	40001c00 	.word	0x40001c00
    1210:	000003fd 	.word	0x000003fd
    1214:	00007635 	.word	0x00007635
    1218:	40003800 	.word	0x40003800
    121c:	20000c8c 	.word	0x20000c8c
    1220:	000022c1 	.word	0x000022c1

00001224 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1224:	b580      	push	{r7, lr}
    1226:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1228:	4808      	ldr	r0, [pc, #32]	; (124c <TIMER_EVENT_init+0x28>)
    122a:	4b09      	ldr	r3, [pc, #36]	; (1250 <TIMER_EVENT_init+0x2c>)
    122c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    122e:	2245      	movs	r2, #69	; 0x45
    1230:	2109      	movs	r1, #9
    1232:	4808      	ldr	r0, [pc, #32]	; (1254 <TIMER_EVENT_init+0x30>)
    1234:	4b08      	ldr	r3, [pc, #32]	; (1258 <TIMER_EVENT_init+0x34>)
    1236:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <TIMER_EVENT_init+0x38>)
    123a:	4798      	blx	r3
    123c:	4603      	mov	r3, r0
    123e:	461a      	mov	r2, r3
    1240:	4907      	ldr	r1, [pc, #28]	; (1260 <TIMER_EVENT_init+0x3c>)
    1242:	4808      	ldr	r0, [pc, #32]	; (1264 <TIMER_EVENT_init+0x40>)
    1244:	4b08      	ldr	r3, [pc, #32]	; (1268 <TIMER_EVENT_init+0x44>)
    1246:	4798      	blx	r3
}
    1248:	bf00      	nop
    124a:	bd80      	pop	{r7, pc}
    124c:	40000800 	.word	0x40000800
    1250:	00000523 	.word	0x00000523
    1254:	40001c00 	.word	0x40001c00
    1258:	000003fd 	.word	0x000003fd
    125c:	00007635 	.word	0x00007635
    1260:	40003c00 	.word	0x40003c00
    1264:	20000c70 	.word	0x20000c70
    1268:	000022c1 	.word	0x000022c1

0000126c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    126c:	b580      	push	{r7, lr}
    126e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1270:	4808      	ldr	r0, [pc, #32]	; (1294 <TIMER_ARINC_init+0x28>)
    1272:	4b09      	ldr	r3, [pc, #36]	; (1298 <TIMER_ARINC_init+0x2c>)
    1274:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1276:	2244      	movs	r2, #68	; 0x44
    1278:	211a      	movs	r1, #26
    127a:	4808      	ldr	r0, [pc, #32]	; (129c <TIMER_ARINC_init+0x30>)
    127c:	4b08      	ldr	r3, [pc, #32]	; (12a0 <TIMER_ARINC_init+0x34>)
    127e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <TIMER_ARINC_init+0x38>)
    1282:	4798      	blx	r3
    1284:	4603      	mov	r3, r0
    1286:	461a      	mov	r2, r3
    1288:	4907      	ldr	r1, [pc, #28]	; (12a8 <TIMER_ARINC_init+0x3c>)
    128a:	4808      	ldr	r0, [pc, #32]	; (12ac <TIMER_ARINC_init+0x40>)
    128c:	4b08      	ldr	r3, [pc, #32]	; (12b0 <TIMER_ARINC_init+0x44>)
    128e:	4798      	blx	r3
}
    1290:	bf00      	nop
    1292:	bd80      	pop	{r7, pc}
    1294:	40000800 	.word	0x40000800
    1298:	000005a3 	.word	0x000005a3
    129c:	40001c00 	.word	0x40001c00
    12a0:	000003fd 	.word	0x000003fd
    12a4:	00007635 	.word	0x00007635
    12a8:	4101a000 	.word	0x4101a000
    12ac:	20000cec 	.word	0x20000cec
    12b0:	000022c1 	.word	0x000022c1

000012b4 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    12b8:	4808      	ldr	r0, [pc, #32]	; (12dc <TIMER_HVAC_init+0x28>)
    12ba:	4b09      	ldr	r3, [pc, #36]	; (12e0 <TIMER_HVAC_init+0x2c>)
    12bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12be:	2245      	movs	r2, #69	; 0x45
    12c0:	211a      	movs	r1, #26
    12c2:	4808      	ldr	r0, [pc, #32]	; (12e4 <TIMER_HVAC_init+0x30>)
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <TIMER_HVAC_init+0x34>)
    12c6:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    12c8:	4b08      	ldr	r3, [pc, #32]	; (12ec <TIMER_HVAC_init+0x38>)
    12ca:	4798      	blx	r3
    12cc:	4603      	mov	r3, r0
    12ce:	461a      	mov	r2, r3
    12d0:	4907      	ldr	r1, [pc, #28]	; (12f0 <TIMER_HVAC_init+0x3c>)
    12d2:	4808      	ldr	r0, [pc, #32]	; (12f4 <TIMER_HVAC_init+0x40>)
    12d4:	4b08      	ldr	r3, [pc, #32]	; (12f8 <TIMER_HVAC_init+0x44>)
    12d6:	4798      	blx	r3
}
    12d8:	bf00      	nop
    12da:	bd80      	pop	{r7, pc}
    12dc:	40000800 	.word	0x40000800
    12e0:	000005c3 	.word	0x000005c3
    12e4:	40001c00 	.word	0x40001c00
    12e8:	000003fd 	.word	0x000003fd
    12ec:	00007635 	.word	0x00007635
    12f0:	4101c000 	.word	0x4101c000
    12f4:	20000d48 	.word	0x20000d48
    12f8:	000022c1 	.word	0x000022c1

000012fc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    1300:	4904      	ldr	r1, [pc, #16]	; (1314 <LIVE_PULSE_PORT_init+0x18>)
    1302:	2020      	movs	r0, #32
    1304:	4b04      	ldr	r3, [pc, #16]	; (1318 <LIVE_PULSE_PORT_init+0x1c>)
    1306:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1308:	4904      	ldr	r1, [pc, #16]	; (131c <LIVE_PULSE_PORT_init+0x20>)
    130a:	2021      	movs	r0, #33	; 0x21
    130c:	4b02      	ldr	r3, [pc, #8]	; (1318 <LIVE_PULSE_PORT_init+0x1c>)
    130e:	4798      	blx	r3
}
    1310:	bf00      	nop
    1312:	bd80      	pop	{r7, pc}
    1314:	00200004 	.word	0x00200004
    1318:	00000bb1 	.word	0x00000bb1
    131c:	00210004 	.word	0x00210004

00001320 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1320:	b580      	push	{r7, lr}
    1322:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1324:	4804      	ldr	r0, [pc, #16]	; (1338 <LIVE_PULSE_CLOCK_init+0x18>)
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <LIVE_PULSE_CLOCK_init+0x1c>)
    1328:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    132a:	224b      	movs	r2, #75	; 0x4b
    132c:	2127      	movs	r1, #39	; 0x27
    132e:	4804      	ldr	r0, [pc, #16]	; (1340 <LIVE_PULSE_CLOCK_init+0x20>)
    1330:	4b04      	ldr	r3, [pc, #16]	; (1344 <LIVE_PULSE_CLOCK_init+0x24>)
    1332:	4798      	blx	r3
}
    1334:	bf00      	nop
    1336:	bd80      	pop	{r7, pc}
    1338:	40000800 	.word	0x40000800
    133c:	00000683 	.word	0x00000683
    1340:	40001c00 	.word	0x40001c00
    1344:	000003fd 	.word	0x000003fd

00001348 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    134c:	4b06      	ldr	r3, [pc, #24]	; (1368 <LIVE_PULSE_init+0x20>)
    134e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1350:	4b06      	ldr	r3, [pc, #24]	; (136c <LIVE_PULSE_init+0x24>)
    1352:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1354:	4b06      	ldr	r3, [pc, #24]	; (1370 <LIVE_PULSE_init+0x28>)
    1356:	4798      	blx	r3
    1358:	4603      	mov	r3, r0
    135a:	461a      	mov	r2, r3
    135c:	4905      	ldr	r1, [pc, #20]	; (1374 <LIVE_PULSE_init+0x2c>)
    135e:	4806      	ldr	r0, [pc, #24]	; (1378 <LIVE_PULSE_init+0x30>)
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <LIVE_PULSE_init+0x34>)
    1362:	4798      	blx	r3
}
    1364:	bf00      	nop
    1366:	bd80      	pop	{r7, pc}
    1368:	00001321 	.word	0x00001321
    136c:	000012fd 	.word	0x000012fd
    1370:	00007645 	.word	0x00007645
    1374:	43001800 	.word	0x43001800
    1378:	20000ca8 	.word	0x20000ca8
    137c:	00001b15 	.word	0x00001b15

00001380 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1380:	b580      	push	{r7, lr}
    1382:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1384:	2102      	movs	r1, #2
    1386:	2018      	movs	r0, #24
    1388:	4b0f      	ldr	r3, [pc, #60]	; (13c8 <CDCUSB_PORT_init+0x48>)
    138a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    138c:	2100      	movs	r1, #0
    138e:	2018      	movs	r0, #24
    1390:	4b0e      	ldr	r3, [pc, #56]	; (13cc <CDCUSB_PORT_init+0x4c>)
    1392:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1394:	2100      	movs	r1, #0
    1396:	2018      	movs	r0, #24
    1398:	4b0d      	ldr	r3, [pc, #52]	; (13d0 <CDCUSB_PORT_init+0x50>)
    139a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    139c:	490d      	ldr	r1, [pc, #52]	; (13d4 <CDCUSB_PORT_init+0x54>)
    139e:	2018      	movs	r0, #24
    13a0:	4b0d      	ldr	r3, [pc, #52]	; (13d8 <CDCUSB_PORT_init+0x58>)
    13a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    13a4:	2102      	movs	r1, #2
    13a6:	2019      	movs	r0, #25
    13a8:	4b07      	ldr	r3, [pc, #28]	; (13c8 <CDCUSB_PORT_init+0x48>)
    13aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    13ac:	2100      	movs	r1, #0
    13ae:	2019      	movs	r0, #25
    13b0:	4b06      	ldr	r3, [pc, #24]	; (13cc <CDCUSB_PORT_init+0x4c>)
    13b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    13b4:	2100      	movs	r1, #0
    13b6:	2019      	movs	r0, #25
    13b8:	4b05      	ldr	r3, [pc, #20]	; (13d0 <CDCUSB_PORT_init+0x50>)
    13ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    13bc:	4907      	ldr	r1, [pc, #28]	; (13dc <CDCUSB_PORT_init+0x5c>)
    13be:	2019      	movs	r0, #25
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <CDCUSB_PORT_init+0x58>)
    13c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    13c4:	bf00      	nop
    13c6:	bd80      	pop	{r7, pc}
    13c8:	00000bd1 	.word	0x00000bd1
    13cc:	00000c09 	.word	0x00000c09
    13d0:	00000b7d 	.word	0x00000b7d
    13d4:	00180007 	.word	0x00180007
    13d8:	00000bb1 	.word	0x00000bb1
    13dc:	00190007 	.word	0x00190007

000013e0 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    13e0:	b580      	push	{r7, lr}
    13e2:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    13e4:	2242      	movs	r2, #66	; 0x42
    13e6:	210a      	movs	r1, #10
    13e8:	4805      	ldr	r0, [pc, #20]	; (1400 <CDCUSB_CLOCK_init+0x20>)
    13ea:	4b06      	ldr	r3, [pc, #24]	; (1404 <CDCUSB_CLOCK_init+0x24>)
    13ec:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    13ee:	4806      	ldr	r0, [pc, #24]	; (1408 <CDCUSB_CLOCK_init+0x28>)
    13f0:	4b06      	ldr	r3, [pc, #24]	; (140c <CDCUSB_CLOCK_init+0x2c>)
    13f2:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    13f4:	4804      	ldr	r0, [pc, #16]	; (1408 <CDCUSB_CLOCK_init+0x28>)
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <CDCUSB_CLOCK_init+0x30>)
    13f8:	4798      	blx	r3
}
    13fa:	bf00      	nop
    13fc:	bd80      	pop	{r7, pc}
    13fe:	bf00      	nop
    1400:	40001c00 	.word	0x40001c00
    1404:	000003fd 	.word	0x000003fd
    1408:	40000800 	.word	0x40000800
    140c:	00000423 	.word	0x00000423
    1410:	00000543 	.word	0x00000543

00001414 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1414:	b580      	push	{r7, lr}
    1416:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1418:	4b03      	ldr	r3, [pc, #12]	; (1428 <CDCUSB_init+0x14>)
    141a:	4798      	blx	r3
	usb_d_init();
    141c:	4b03      	ldr	r3, [pc, #12]	; (142c <CDCUSB_init+0x18>)
    141e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1420:	4b03      	ldr	r3, [pc, #12]	; (1430 <CDCUSB_init+0x1c>)
    1422:	4798      	blx	r3
}
    1424:	bf00      	nop
    1426:	bd80      	pop	{r7, pc}
    1428:	000013e1 	.word	0x000013e1
    142c:	00002ad1 	.word	0x00002ad1
    1430:	00001381 	.word	0x00001381

00001434 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1438:	4802      	ldr	r0, [pc, #8]	; (1444 <WATCHDOG_CLOCK_init+0x10>)
    143a:	4b03      	ldr	r3, [pc, #12]	; (1448 <WATCHDOG_CLOCK_init+0x14>)
    143c:	4798      	blx	r3
}
    143e:	bf00      	nop
    1440:	bd80      	pop	{r7, pc}
    1442:	bf00      	nop
    1444:	40000800 	.word	0x40000800
    1448:	000004a3 	.word	0x000004a3

0000144c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    144c:	b580      	push	{r7, lr}
    144e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <WATCHDOG_init+0x14>)
    1452:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1454:	4903      	ldr	r1, [pc, #12]	; (1464 <WATCHDOG_init+0x18>)
    1456:	4804      	ldr	r0, [pc, #16]	; (1468 <WATCHDOG_init+0x1c>)
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <WATCHDOG_init+0x20>)
    145a:	4798      	blx	r3
}
    145c:	bf00      	nop
    145e:	bd80      	pop	{r7, pc}
    1460:	00001435 	.word	0x00001435
    1464:	40002000 	.word	0x40002000
    1468:	20000dc4 	.word	0x20000dc4
    146c:	00000c51 	.word	0x00000c51

00001470 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1470:	b580      	push	{r7, lr}
    1472:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1474:	4904      	ldr	r1, [pc, #16]	; (1488 <CAN_CCU_PORT_init+0x18>)
    1476:	202d      	movs	r0, #45	; 0x2d
    1478:	4b04      	ldr	r3, [pc, #16]	; (148c <CAN_CCU_PORT_init+0x1c>)
    147a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    147c:	4904      	ldr	r1, [pc, #16]	; (1490 <CAN_CCU_PORT_init+0x20>)
    147e:	202c      	movs	r0, #44	; 0x2c
    1480:	4b02      	ldr	r3, [pc, #8]	; (148c <CAN_CCU_PORT_init+0x1c>)
    1482:	4798      	blx	r3
}
    1484:	bf00      	nop
    1486:	bd80      	pop	{r7, pc}
    1488:	002d0007 	.word	0x002d0007
    148c:	00000bb1 	.word	0x00000bb1
    1490:	002c0007 	.word	0x002c0007

00001494 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1494:	b580      	push	{r7, lr}
    1496:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1498:	4807      	ldr	r0, [pc, #28]	; (14b8 <CAN_CCU_init+0x24>)
    149a:	4b08      	ldr	r3, [pc, #32]	; (14bc <CAN_CCU_init+0x28>)
    149c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    149e:	2243      	movs	r2, #67	; 0x43
    14a0:	211c      	movs	r1, #28
    14a2:	4807      	ldr	r0, [pc, #28]	; (14c0 <CAN_CCU_init+0x2c>)
    14a4:	4b07      	ldr	r3, [pc, #28]	; (14c4 <CAN_CCU_init+0x30>)
    14a6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    14a8:	4907      	ldr	r1, [pc, #28]	; (14c8 <CAN_CCU_init+0x34>)
    14aa:	4808      	ldr	r0, [pc, #32]	; (14cc <CAN_CCU_init+0x38>)
    14ac:	4b08      	ldr	r3, [pc, #32]	; (14d0 <CAN_CCU_init+0x3c>)
    14ae:	4798      	blx	r3
	CAN_CCU_PORT_init();
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <CAN_CCU_init+0x40>)
    14b2:	4798      	blx	r3
}
    14b4:	bf00      	nop
    14b6:	bd80      	pop	{r7, pc}
    14b8:	40000800 	.word	0x40000800
    14bc:	00000463 	.word	0x00000463
    14c0:	40001c00 	.word	0x40001c00
    14c4:	000003fd 	.word	0x000003fd
    14c8:	42000400 	.word	0x42000400
    14cc:	20000cc4 	.word	0x20000cc4
    14d0:	000016c1 	.word	0x000016c1
    14d4:	00001471 	.word	0x00001471

000014d8 <system_init>:

void system_init(void)
{
    14d8:	b580      	push	{r7, lr}
    14da:	af00      	add	r7, sp, #0
	init_mcu();
    14dc:	4b46      	ldr	r3, [pc, #280]	; (15f8 <system_init+0x120>)
    14de:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    14e0:	2101      	movs	r1, #1
    14e2:	2027      	movs	r0, #39	; 0x27
    14e4:	4b45      	ldr	r3, [pc, #276]	; (15fc <system_init+0x124>)
    14e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    14e8:	2102      	movs	r1, #2
    14ea:	2027      	movs	r0, #39	; 0x27
    14ec:	4b44      	ldr	r3, [pc, #272]	; (1600 <system_init+0x128>)
    14ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    14f0:	f04f 31ff 	mov.w	r1, #4294967295
    14f4:	2027      	movs	r0, #39	; 0x27
    14f6:	4b43      	ldr	r3, [pc, #268]	; (1604 <system_init+0x12c>)
    14f8:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    14fa:	2101      	movs	r1, #1
    14fc:	203d      	movs	r0, #61	; 0x3d
    14fe:	4b42      	ldr	r3, [pc, #264]	; (1608 <system_init+0x130>)
    1500:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    1502:	2102      	movs	r1, #2
    1504:	203d      	movs	r0, #61	; 0x3d
    1506:	4b3d      	ldr	r3, [pc, #244]	; (15fc <system_init+0x124>)
    1508:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    150a:	f04f 31ff 	mov.w	r1, #4294967295
    150e:	203d      	movs	r0, #61	; 0x3d
    1510:	4b3c      	ldr	r3, [pc, #240]	; (1604 <system_init+0x12c>)
    1512:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1514:	2101      	movs	r1, #1
    1516:	203f      	movs	r0, #63	; 0x3f
    1518:	4b38      	ldr	r3, [pc, #224]	; (15fc <system_init+0x124>)
    151a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    151c:	2101      	movs	r1, #1
    151e:	203f      	movs	r0, #63	; 0x3f
    1520:	4b37      	ldr	r3, [pc, #220]	; (1600 <system_init+0x128>)
    1522:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1524:	f04f 31ff 	mov.w	r1, #4294967295
    1528:	203f      	movs	r0, #63	; 0x3f
    152a:	4b36      	ldr	r3, [pc, #216]	; (1604 <system_init+0x12c>)
    152c:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    152e:	2101      	movs	r1, #1
    1530:	2040      	movs	r0, #64	; 0x40
    1532:	4b32      	ldr	r3, [pc, #200]	; (15fc <system_init+0x124>)
    1534:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1536:	2102      	movs	r1, #2
    1538:	2040      	movs	r0, #64	; 0x40
    153a:	4b31      	ldr	r3, [pc, #196]	; (1600 <system_init+0x128>)
    153c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    153e:	f04f 31ff 	mov.w	r1, #4294967295
    1542:	2040      	movs	r0, #64	; 0x40
    1544:	4b2f      	ldr	r3, [pc, #188]	; (1604 <system_init+0x12c>)
    1546:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1548:	2100      	movs	r1, #0
    154a:	204d      	movs	r0, #77	; 0x4d
    154c:	4b2e      	ldr	r3, [pc, #184]	; (1608 <system_init+0x130>)
    154e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1550:	2102      	movs	r1, #2
    1552:	204d      	movs	r0, #77	; 0x4d
    1554:	4b29      	ldr	r3, [pc, #164]	; (15fc <system_init+0x124>)
    1556:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1558:	f04f 31ff 	mov.w	r1, #4294967295
    155c:	204d      	movs	r0, #77	; 0x4d
    155e:	4b29      	ldr	r3, [pc, #164]	; (1604 <system_init+0x12c>)
    1560:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1562:	2101      	movs	r1, #1
    1564:	204e      	movs	r0, #78	; 0x4e
    1566:	4b28      	ldr	r3, [pc, #160]	; (1608 <system_init+0x130>)
    1568:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    156a:	2102      	movs	r1, #2
    156c:	204e      	movs	r0, #78	; 0x4e
    156e:	4b23      	ldr	r3, [pc, #140]	; (15fc <system_init+0x124>)
    1570:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1572:	f04f 31ff 	mov.w	r1, #4294967295
    1576:	204e      	movs	r0, #78	; 0x4e
    1578:	4b22      	ldr	r3, [pc, #136]	; (1604 <system_init+0x12c>)
    157a:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    157c:	2100      	movs	r1, #0
    157e:	204f      	movs	r0, #79	; 0x4f
    1580:	4b21      	ldr	r3, [pc, #132]	; (1608 <system_init+0x130>)
    1582:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1584:	2102      	movs	r1, #2
    1586:	204f      	movs	r0, #79	; 0x4f
    1588:	4b1c      	ldr	r3, [pc, #112]	; (15fc <system_init+0x124>)
    158a:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    158c:	f04f 31ff 	mov.w	r1, #4294967295
    1590:	204f      	movs	r0, #79	; 0x4f
    1592:	4b1c      	ldr	r3, [pc, #112]	; (1604 <system_init+0x12c>)
    1594:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1596:	2100      	movs	r1, #0
    1598:	2052      	movs	r0, #82	; 0x52
    159a:	4b1b      	ldr	r3, [pc, #108]	; (1608 <system_init+0x130>)
    159c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    159e:	2102      	movs	r1, #2
    15a0:	2052      	movs	r0, #82	; 0x52
    15a2:	4b16      	ldr	r3, [pc, #88]	; (15fc <system_init+0x124>)
    15a4:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    15a6:	f04f 31ff 	mov.w	r1, #4294967295
    15aa:	2052      	movs	r0, #82	; 0x52
    15ac:	4b15      	ldr	r3, [pc, #84]	; (1604 <system_init+0x12c>)
    15ae:	4798      	blx	r3

	CRC_CALC_init();
    15b0:	4b16      	ldr	r3, [pc, #88]	; (160c <system_init+0x134>)
    15b2:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    15b4:	4b16      	ldr	r3, [pc, #88]	; (1610 <system_init+0x138>)
    15b6:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    15b8:	4b16      	ldr	r3, [pc, #88]	; (1614 <system_init+0x13c>)
    15ba:	4798      	blx	r3

	QSPI_N25Q256_init();
    15bc:	4b16      	ldr	r3, [pc, #88]	; (1618 <system_init+0x140>)
    15be:	4798      	blx	r3

	DATETIME_CLOCK_init();
    15c0:	4b16      	ldr	r3, [pc, #88]	; (161c <system_init+0x144>)
    15c2:	4798      	blx	r3

	SPI_TEMP_init();
    15c4:	4b16      	ldr	r3, [pc, #88]	; (1620 <system_init+0x148>)
    15c6:	4798      	blx	r3

	I2C_EXPANDER_init();
    15c8:	4b16      	ldr	r3, [pc, #88]	; (1624 <system_init+0x14c>)
    15ca:	4798      	blx	r3

	SPI_HI3593_init();
    15cc:	4b16      	ldr	r3, [pc, #88]	; (1628 <system_init+0x150>)
    15ce:	4798      	blx	r3

	I2C_EEPROM_init();
    15d0:	4b16      	ldr	r3, [pc, #88]	; (162c <system_init+0x154>)
    15d2:	4798      	blx	r3

	TIMER_INTERFACE_init();
    15d4:	4b16      	ldr	r3, [pc, #88]	; (1630 <system_init+0x158>)
    15d6:	4798      	blx	r3
	TIMER_EVENT_init();
    15d8:	4b16      	ldr	r3, [pc, #88]	; (1634 <system_init+0x15c>)
    15da:	4798      	blx	r3
	TIMER_ARINC_init();
    15dc:	4b16      	ldr	r3, [pc, #88]	; (1638 <system_init+0x160>)
    15de:	4798      	blx	r3
	TIMER_HVAC_init();
    15e0:	4b16      	ldr	r3, [pc, #88]	; (163c <system_init+0x164>)
    15e2:	4798      	blx	r3
	LIVE_PULSE_init();
    15e4:	4b16      	ldr	r3, [pc, #88]	; (1640 <system_init+0x168>)
    15e6:	4798      	blx	r3

	CDCUSB_init();
    15e8:	4b16      	ldr	r3, [pc, #88]	; (1644 <system_init+0x16c>)
    15ea:	4798      	blx	r3

	WATCHDOG_init();
    15ec:	4b16      	ldr	r3, [pc, #88]	; (1648 <system_init+0x170>)
    15ee:	4798      	blx	r3
	CAN_CCU_init();
    15f0:	4b16      	ldr	r3, [pc, #88]	; (164c <system_init+0x174>)
    15f2:	4798      	blx	r3
}
    15f4:	bf00      	nop
    15f6:	bd80      	pop	{r7, pc}
    15f8:	00000c41 	.word	0x00000c41
    15fc:	00000bd1 	.word	0x00000bd1
    1600:	00000b7d 	.word	0x00000b7d
    1604:	00000bb1 	.word	0x00000bb1
    1608:	00000c09 	.word	0x00000c09
    160c:	00000ca1 	.word	0x00000ca1
    1610:	00000ccd 	.word	0x00000ccd
    1614:	00000d71 	.word	0x00000d71
    1618:	00000ead 	.word	0x00000ead
    161c:	00000ef1 	.word	0x00000ef1
    1620:	00000fb5 	.word	0x00000fb5
    1624:	0000104d 	.word	0x0000104d
    1628:	00001119 	.word	0x00001119
    162c:	000011b1 	.word	0x000011b1
    1630:	000011dd 	.word	0x000011dd
    1634:	00001225 	.word	0x00001225
    1638:	0000126d 	.word	0x0000126d
    163c:	000012b5 	.word	0x000012b5
    1640:	00001349 	.word	0x00001349
    1644:	00001415 	.word	0x00001415
    1648:	0000144d 	.word	0x0000144d
    164c:	00001495 	.word	0x00001495

00001650 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1650:	b580      	push	{r7, lr}
    1652:	b084      	sub	sp, #16
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
    1658:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    165a:	2300      	movs	r3, #0
    165c:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	2b00      	cmp	r3, #0
    1662:	bf14      	ite	ne
    1664:	2301      	movne	r3, #1
    1666:	2300      	moveq	r3, #0
    1668:	b2db      	uxtb	r3, r3
    166a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    166e:	4911      	ldr	r1, [pc, #68]	; (16b4 <calendar_init+0x64>)
    1670:	4618      	mov	r0, r3
    1672:	4b11      	ldr	r3, [pc, #68]	; (16b8 <calendar_init+0x68>)
    1674:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	681a      	ldr	r2, [r3, #0]
    167a:	683b      	ldr	r3, [r7, #0]
    167c:	429a      	cmp	r2, r3
    167e:	d101      	bne.n	1684 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1680:	2300      	movs	r3, #0
    1682:	e013      	b.n	16ac <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	2b00      	cmp	r3, #0
    168a:	d002      	beq.n	1692 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    168c:	f06f 0311 	mvn.w	r3, #17
    1690:	e00c      	b.n	16ac <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	683a      	ldr	r2, [r7, #0]
    1696:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	4618      	mov	r0, r3
    169c:	4b07      	ldr	r3, [pc, #28]	; (16bc <calendar_init+0x6c>)
    169e:	4798      	blx	r3
    16a0:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	f240 72b2 	movw	r2, #1970	; 0x7b2
    16a8:	619a      	str	r2, [r3, #24]

	return ret;
    16aa:	68fb      	ldr	r3, [r7, #12]
}
    16ac:	4618      	mov	r0, r3
    16ae:	3710      	adds	r7, #16
    16b0:	46bd      	mov	sp, r7
    16b2:	bd80      	pop	{r7, pc}
    16b4:	0000d41c 	.word	0x0000d41c
    16b8:	00003079 	.word	0x00003079
    16bc:	0000524d 	.word	0x0000524d

000016c0 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b084      	sub	sp, #16
    16c4:	af00      	add	r7, sp, #0
    16c6:	6078      	str	r0, [r7, #4]
    16c8:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d004      	beq.n	16da <can_async_init+0x1a>
    16d0:	683b      	ldr	r3, [r7, #0]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d001      	beq.n	16da <can_async_init+0x1a>
    16d6:	2301      	movs	r3, #1
    16d8:	e000      	b.n	16dc <can_async_init+0x1c>
    16da:	2300      	movs	r3, #0
    16dc:	f003 0301 	and.w	r3, r3, #1
    16e0:	b2db      	uxtb	r3, r3
    16e2:	2241      	movs	r2, #65	; 0x41
    16e4:	490e      	ldr	r1, [pc, #56]	; (1720 <can_async_init+0x60>)
    16e6:	4618      	mov	r0, r3
    16e8:	4b0e      	ldr	r3, [pc, #56]	; (1724 <can_async_init+0x64>)
    16ea:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	6839      	ldr	r1, [r7, #0]
    16f0:	4618      	mov	r0, r3
    16f2:	4b0d      	ldr	r3, [pc, #52]	; (1728 <can_async_init+0x68>)
    16f4:	4798      	blx	r3
    16f6:	60f8      	str	r0, [r7, #12]
	if (rc) {
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d001      	beq.n	1702 <can_async_init+0x42>
		return rc;
    16fe:	68fb      	ldr	r3, [r7, #12]
    1700:	e009      	b.n	1716 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	4a09      	ldr	r2, [pc, #36]	; (172c <can_async_init+0x6c>)
    1706:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	4a09      	ldr	r2, [pc, #36]	; (1730 <can_async_init+0x70>)
    170c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	4a08      	ldr	r2, [pc, #32]	; (1734 <can_async_init+0x74>)
    1712:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1714:	2300      	movs	r3, #0
}
    1716:	4618      	mov	r0, r3
    1718:	3710      	adds	r7, #16
    171a:	46bd      	mov	sp, r7
    171c:	bd80      	pop	{r7, pc}
    171e:	bf00      	nop
    1720:	0000d438 	.word	0x0000d438
    1724:	00003079 	.word	0x00003079
    1728:	000035d5 	.word	0x000035d5
    172c:	00001739 	.word	0x00001739
    1730:	0000175d 	.word	0x0000175d
    1734:	00001781 	.word	0x00001781

00001738 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1738:	b580      	push	{r7, lr}
    173a:	b084      	sub	sp, #16
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1744:	68fb      	ldr	r3, [r7, #12]
    1746:	69db      	ldr	r3, [r3, #28]
    1748:	2b00      	cmp	r3, #0
    174a:	d003      	beq.n	1754 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	69db      	ldr	r3, [r3, #28]
    1750:	68f8      	ldr	r0, [r7, #12]
    1752:	4798      	blx	r3
	}
}
    1754:	bf00      	nop
    1756:	3710      	adds	r7, #16
    1758:	46bd      	mov	sp, r7
    175a:	bd80      	pop	{r7, pc}

0000175c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    175c:	b580      	push	{r7, lr}
    175e:	b084      	sub	sp, #16
    1760:	af00      	add	r7, sp, #0
    1762:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1764:	687b      	ldr	r3, [r7, #4]
    1766:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1768:	68fb      	ldr	r3, [r7, #12]
    176a:	6a1b      	ldr	r3, [r3, #32]
    176c:	2b00      	cmp	r3, #0
    176e:	d003      	beq.n	1778 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	6a1b      	ldr	r3, [r3, #32]
    1774:	68f8      	ldr	r0, [r7, #12]
    1776:	4798      	blx	r3
	}
}
    1778:	bf00      	nop
    177a:	3710      	adds	r7, #16
    177c:	46bd      	mov	sp, r7
    177e:	bd80      	pop	{r7, pc}

00001780 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1780:	b580      	push	{r7, lr}
    1782:	b084      	sub	sp, #16
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
    1788:	460b      	mov	r3, r1
    178a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1794:	2b00      	cmp	r3, #0
    1796:	d005      	beq.n	17a4 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    179c:	78fa      	ldrb	r2, [r7, #3]
    179e:	4611      	mov	r1, r2
    17a0:	68f8      	ldr	r0, [r7, #12]
    17a2:	4798      	blx	r3
	}
}
    17a4:	bf00      	nop
    17a6:	3710      	adds	r7, #16
    17a8:	46bd      	mov	sp, r7
    17aa:	bd80      	pop	{r7, pc}

000017ac <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
    17b4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d004      	beq.n	17c6 <crc_sync_init+0x1a>
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	2b00      	cmp	r3, #0
    17c0:	d001      	beq.n	17c6 <crc_sync_init+0x1a>
    17c2:	2301      	movs	r3, #1
    17c4:	e000      	b.n	17c8 <crc_sync_init+0x1c>
    17c6:	2300      	movs	r3, #0
    17c8:	f003 0301 	and.w	r3, r3, #1
    17cc:	b2db      	uxtb	r3, r3
    17ce:	222b      	movs	r2, #43	; 0x2b
    17d0:	4906      	ldr	r1, [pc, #24]	; (17ec <crc_sync_init+0x40>)
    17d2:	4618      	mov	r0, r3
    17d4:	4b06      	ldr	r3, [pc, #24]	; (17f0 <crc_sync_init+0x44>)
    17d6:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	6839      	ldr	r1, [r7, #0]
    17dc:	4618      	mov	r0, r3
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <crc_sync_init+0x48>)
    17e0:	4798      	blx	r3
    17e2:	4603      	mov	r3, r0
}
    17e4:	4618      	mov	r0, r3
    17e6:	3708      	adds	r7, #8
    17e8:	46bd      	mov	sp, r7
    17ea:	bd80      	pop	{r7, pc}
    17ec:	0000d454 	.word	0x0000d454
    17f0:	00003079 	.word	0x00003079
    17f4:	00003cd5 	.word	0x00003cd5

000017f8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    17f8:	b590      	push	{r4, r7, lr}
    17fa:	b083      	sub	sp, #12
    17fc:	af00      	add	r7, sp, #0
    17fe:	4603      	mov	r3, r0
    1800:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1802:	4b07      	ldr	r3, [pc, #28]	; (1820 <delay_us+0x28>)
    1804:	681c      	ldr	r4, [r3, #0]
    1806:	88fb      	ldrh	r3, [r7, #6]
    1808:	4618      	mov	r0, r3
    180a:	4b06      	ldr	r3, [pc, #24]	; (1824 <delay_us+0x2c>)
    180c:	4798      	blx	r3
    180e:	4603      	mov	r3, r0
    1810:	4619      	mov	r1, r3
    1812:	4620      	mov	r0, r4
    1814:	4b04      	ldr	r3, [pc, #16]	; (1828 <delay_us+0x30>)
    1816:	4798      	blx	r3
}
    1818:	bf00      	nop
    181a:	370c      	adds	r7, #12
    181c:	46bd      	mov	sp, r7
    181e:	bd90      	pop	{r4, r7, pc}
    1820:	20000560 	.word	0x20000560
    1824:	00003a2d 	.word	0x00003a2d
    1828:	00003bc1 	.word	0x00003bc1

0000182c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    182c:	b590      	push	{r4, r7, lr}
    182e:	b083      	sub	sp, #12
    1830:	af00      	add	r7, sp, #0
    1832:	4603      	mov	r3, r0
    1834:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1836:	4b07      	ldr	r3, [pc, #28]	; (1854 <delay_ms+0x28>)
    1838:	681c      	ldr	r4, [r3, #0]
    183a:	88fb      	ldrh	r3, [r7, #6]
    183c:	4618      	mov	r0, r3
    183e:	4b06      	ldr	r3, [pc, #24]	; (1858 <delay_ms+0x2c>)
    1840:	4798      	blx	r3
    1842:	4603      	mov	r3, r0
    1844:	4619      	mov	r1, r3
    1846:	4620      	mov	r0, r4
    1848:	4b04      	ldr	r3, [pc, #16]	; (185c <delay_ms+0x30>)
    184a:	4798      	blx	r3
}
    184c:	bf00      	nop
    184e:	370c      	adds	r7, #12
    1850:	46bd      	mov	sp, r7
    1852:	bd90      	pop	{r4, r7, pc}
    1854:	20000560 	.word	0x20000560
    1858:	00003b99 	.word	0x00003b99
    185c:	00003bc1 	.word	0x00003bc1

00001860 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1860:	b580      	push	{r7, lr}
    1862:	af00      	add	r7, sp, #0
	return _event_system_init();
    1864:	4b02      	ldr	r3, [pc, #8]	; (1870 <event_system_init+0x10>)
    1866:	4798      	blx	r3
    1868:	4603      	mov	r3, r0
}
    186a:	4618      	mov	r0, r3
    186c:	bd80      	pop	{r7, pc}
    186e:	bf00      	nop
    1870:	00004309 	.word	0x00004309

00001874 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1874:	b580      	push	{r7, lr}
    1876:	b082      	sub	sp, #8
    1878:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    187a:	2300      	movs	r3, #0
    187c:	80fb      	strh	r3, [r7, #6]
    187e:	e00e      	b.n	189e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1880:	88fb      	ldrh	r3, [r7, #6]
    1882:	4a0c      	ldr	r2, [pc, #48]	; (18b4 <ext_irq_init+0x40>)
    1884:	00db      	lsls	r3, r3, #3
    1886:	4413      	add	r3, r2
    1888:	f04f 32ff 	mov.w	r2, #4294967295
    188c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    188e:	88fb      	ldrh	r3, [r7, #6]
    1890:	4a08      	ldr	r2, [pc, #32]	; (18b4 <ext_irq_init+0x40>)
    1892:	2100      	movs	r1, #0
    1894:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1898:	88fb      	ldrh	r3, [r7, #6]
    189a:	3301      	adds	r3, #1
    189c:	80fb      	strh	r3, [r7, #6]
    189e:	88fb      	ldrh	r3, [r7, #6]
    18a0:	2b03      	cmp	r3, #3
    18a2:	d9ed      	bls.n	1880 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    18a4:	4804      	ldr	r0, [pc, #16]	; (18b8 <ext_irq_init+0x44>)
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <ext_irq_init+0x48>)
    18a8:	4798      	blx	r3
    18aa:	4603      	mov	r3, r0
}
    18ac:	4618      	mov	r0, r3
    18ae:	3708      	adds	r7, #8
    18b0:	46bd      	mov	sp, r7
    18b2:	bd80      	pop	{r7, pc}
    18b4:	20000564 	.word	0x20000564
    18b8:	000018c1 	.word	0x000018c1
    18bc:	00003fdd 	.word	0x00003fdd

000018c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b084      	sub	sp, #16
    18c4:	af00      	add	r7, sp, #0
    18c6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    18c8:	2300      	movs	r3, #0
    18ca:	73fb      	strb	r3, [r7, #15]
    18cc:	2304      	movs	r3, #4
    18ce:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    18d0:	e02a      	b.n	1928 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    18d2:	7bba      	ldrb	r2, [r7, #14]
    18d4:	7bfb      	ldrb	r3, [r7, #15]
    18d6:	4413      	add	r3, r2
    18d8:	105b      	asrs	r3, r3, #1
    18da:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    18dc:	7b7b      	ldrb	r3, [r7, #13]
    18de:	2b03      	cmp	r3, #3
    18e0:	d827      	bhi.n	1932 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    18e2:	7b7b      	ldrb	r3, [r7, #13]
    18e4:	4a16      	ldr	r2, [pc, #88]	; (1940 <process_ext_irq+0x80>)
    18e6:	00db      	lsls	r3, r3, #3
    18e8:	4413      	add	r3, r2
    18ea:	685a      	ldr	r2, [r3, #4]
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	429a      	cmp	r2, r3
    18f0:	d10b      	bne.n	190a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    18f2:	7b7b      	ldrb	r3, [r7, #13]
    18f4:	4a12      	ldr	r2, [pc, #72]	; (1940 <process_ext_irq+0x80>)
    18f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    18fa:	2b00      	cmp	r3, #0
    18fc:	d01b      	beq.n	1936 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    18fe:	7b7b      	ldrb	r3, [r7, #13]
    1900:	4a0f      	ldr	r2, [pc, #60]	; (1940 <process_ext_irq+0x80>)
    1902:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1906:	4798      	blx	r3
			}
			return;
    1908:	e015      	b.n	1936 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    190a:	7b7b      	ldrb	r3, [r7, #13]
    190c:	4a0c      	ldr	r2, [pc, #48]	; (1940 <process_ext_irq+0x80>)
    190e:	00db      	lsls	r3, r3, #3
    1910:	4413      	add	r3, r2
    1912:	685a      	ldr	r2, [r3, #4]
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	429a      	cmp	r2, r3
    1918:	d203      	bcs.n	1922 <process_ext_irq+0x62>
			lower = middle + 1;
    191a:	7b7b      	ldrb	r3, [r7, #13]
    191c:	3301      	adds	r3, #1
    191e:	73fb      	strb	r3, [r7, #15]
    1920:	e002      	b.n	1928 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1922:	7b7b      	ldrb	r3, [r7, #13]
    1924:	3b01      	subs	r3, #1
    1926:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1928:	7bba      	ldrb	r2, [r7, #14]
    192a:	7bfb      	ldrb	r3, [r7, #15]
    192c:	429a      	cmp	r2, r3
    192e:	d2d0      	bcs.n	18d2 <process_ext_irq+0x12>
    1930:	e002      	b.n	1938 <process_ext_irq+0x78>
			return;
    1932:	bf00      	nop
    1934:	e000      	b.n	1938 <process_ext_irq+0x78>
			return;
    1936:	bf00      	nop
		}
	}
}
    1938:	3710      	adds	r7, #16
    193a:	46bd      	mov	sp, r7
    193c:	bd80      	pop	{r7, pc}
    193e:	bf00      	nop
    1940:	20000564 	.word	0x20000564

00001944 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1944:	b580      	push	{r7, lr}
    1946:	b084      	sub	sp, #16
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	885b      	ldrh	r3, [r3, #2]
    1954:	b29b      	uxth	r3, r3
    1956:	f403 7380 	and.w	r3, r3, #256	; 0x100
    195a:	2b00      	cmp	r3, #0
    195c:	d107      	bne.n	196e <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1962:	2b00      	cmp	r3, #0
    1964:	d003      	beq.n	196e <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1966:	68fb      	ldr	r3, [r7, #12]
    1968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    196a:	68f8      	ldr	r0, [r7, #12]
    196c:	4798      	blx	r3
		}
	}
}
    196e:	bf00      	nop
    1970:	3710      	adds	r7, #16
    1972:	46bd      	mov	sp, r7
    1974:	bd80      	pop	{r7, pc}

00001976 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1976:	b580      	push	{r7, lr}
    1978:	b084      	sub	sp, #16
    197a:	af00      	add	r7, sp, #0
    197c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	885b      	ldrh	r3, [r3, #2]
    1986:	b29b      	uxth	r3, r3
    1988:	f403 7380 	and.w	r3, r3, #256	; 0x100
    198c:	2b00      	cmp	r3, #0
    198e:	d107      	bne.n	19a0 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1990:	68fb      	ldr	r3, [r7, #12]
    1992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1994:	2b00      	cmp	r3, #0
    1996:	d003      	beq.n	19a0 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1998:	68fb      	ldr	r3, [r7, #12]
    199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    199c:	68f8      	ldr	r0, [r7, #12]
    199e:	4798      	blx	r3
		}
	}
}
    19a0:	bf00      	nop
    19a2:	3710      	adds	r7, #16
    19a4:	46bd      	mov	sp, r7
    19a6:	bd80      	pop	{r7, pc}

000019a8 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b084      	sub	sp, #16
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
    19b0:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    19b2:	687b      	ldr	r3, [r7, #4]
    19b4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	885b      	ldrh	r3, [r3, #2]
    19ba:	b29b      	uxth	r3, r3
    19bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    19c0:	2b00      	cmp	r3, #0
    19c2:	d108      	bne.n	19d6 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    19c8:	2b00      	cmp	r3, #0
    19ca:	d004      	beq.n	19d6 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    19cc:	68fb      	ldr	r3, [r7, #12]
    19ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    19d0:	6839      	ldr	r1, [r7, #0]
    19d2:	68f8      	ldr	r0, [r7, #12]
    19d4:	4798      	blx	r3
		}
	}
}
    19d6:	bf00      	nop
    19d8:	3710      	adds	r7, #16
    19da:	46bd      	mov	sp, r7
    19dc:	bd80      	pop	{r7, pc}
	...

000019e0 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	b08a      	sub	sp, #40	; 0x28
    19e4:	af00      	add	r7, sp, #0
    19e6:	60f8      	str	r0, [r7, #12]
    19e8:	60b9      	str	r1, [r7, #8]
    19ea:	4613      	mov	r3, r2
    19ec:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    19ee:	68fb      	ldr	r3, [r7, #12]
    19f0:	3b28      	subs	r3, #40	; 0x28
    19f2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    19f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    19f8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    19fa:	88fb      	ldrh	r3, [r7, #6]
    19fc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    19fe:	f248 0301 	movw	r3, #32769	; 0x8001
    1a02:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1a04:	68bb      	ldr	r3, [r7, #8]
    1a06:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a0a:	f107 0214 	add.w	r2, r7, #20
    1a0e:	4611      	mov	r1, r2
    1a10:	4618      	mov	r0, r3
    1a12:	4b06      	ldr	r3, [pc, #24]	; (1a2c <i2c_m_async_read+0x4c>)
    1a14:	4798      	blx	r3
    1a16:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1a18:	6a3b      	ldr	r3, [r7, #32]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d001      	beq.n	1a22 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1a1e:	6a3b      	ldr	r3, [r7, #32]
    1a20:	e000      	b.n	1a24 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1a22:	88fb      	ldrh	r3, [r7, #6]
}
    1a24:	4618      	mov	r0, r3
    1a26:	3728      	adds	r7, #40	; 0x28
    1a28:	46bd      	mov	sp, r7
    1a2a:	bd80      	pop	{r7, pc}
    1a2c:	000060f5 	.word	0x000060f5

00001a30 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	b08a      	sub	sp, #40	; 0x28
    1a34:	af00      	add	r7, sp, #0
    1a36:	60f8      	str	r0, [r7, #12]
    1a38:	60b9      	str	r1, [r7, #8]
    1a3a:	4613      	mov	r3, r2
    1a3c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1a3e:	68fb      	ldr	r3, [r7, #12]
    1a40:	3b28      	subs	r3, #40	; 0x28
    1a42:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1a48:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1a4a:	88fb      	ldrh	r3, [r7, #6]
    1a4c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1a52:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1a54:	68bb      	ldr	r3, [r7, #8]
    1a56:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a5a:	f107 0214 	add.w	r2, r7, #20
    1a5e:	4611      	mov	r1, r2
    1a60:	4618      	mov	r0, r3
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <i2c_m_async_write+0x4c>)
    1a64:	4798      	blx	r3
    1a66:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1a68:	6a3b      	ldr	r3, [r7, #32]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d001      	beq.n	1a72 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1a6e:	6a3b      	ldr	r3, [r7, #32]
    1a70:	e000      	b.n	1a74 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1a72:	88fb      	ldrh	r3, [r7, #6]
}
    1a74:	4618      	mov	r0, r3
    1a76:	3728      	adds	r7, #40	; 0x28
    1a78:	46bd      	mov	sp, r7
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	000060f5 	.word	0x000060f5

00001a80 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b084      	sub	sp, #16
    1a84:	af00      	add	r7, sp, #0
    1a86:	6078      	str	r0, [r7, #4]
    1a88:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	bf14      	ite	ne
    1a90:	2301      	movne	r3, #1
    1a92:	2300      	moveq	r3, #0
    1a94:	b2db      	uxtb	r3, r3
    1a96:	2289      	movs	r2, #137	; 0x89
    1a98:	4915      	ldr	r1, [pc, #84]	; (1af0 <i2c_m_async_init+0x70>)
    1a9a:	4618      	mov	r0, r3
    1a9c:	4b15      	ldr	r3, [pc, #84]	; (1af4 <i2c_m_async_init+0x74>)
    1a9e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	6839      	ldr	r1, [r7, #0]
    1aa4:	4618      	mov	r0, r3
    1aa6:	4b14      	ldr	r3, [pc, #80]	; (1af8 <i2c_m_async_init+0x78>)
    1aa8:	4798      	blx	r3
    1aaa:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1aac:	68fb      	ldr	r3, [r7, #12]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d001      	beq.n	1ab6 <i2c_m_async_init+0x36>
		return init_status;
    1ab2:	68fb      	ldr	r3, [r7, #12]
    1ab4:	e018      	b.n	1ae8 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	4a10      	ldr	r2, [pc, #64]	; (1afc <i2c_m_async_init+0x7c>)
    1aba:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	4a10      	ldr	r2, [pc, #64]	; (1b00 <i2c_m_async_init+0x80>)
    1ac0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	4a0f      	ldr	r2, [pc, #60]	; (1b04 <i2c_m_async_init+0x84>)
    1ac6:	2101      	movs	r1, #1
    1ac8:	4618      	mov	r0, r3
    1aca:	4b0f      	ldr	r3, [pc, #60]	; (1b08 <i2c_m_async_init+0x88>)
    1acc:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	4a0e      	ldr	r2, [pc, #56]	; (1b0c <i2c_m_async_init+0x8c>)
    1ad2:	2102      	movs	r1, #2
    1ad4:	4618      	mov	r0, r3
    1ad6:	4b0c      	ldr	r3, [pc, #48]	; (1b08 <i2c_m_async_init+0x88>)
    1ad8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	4a0c      	ldr	r2, [pc, #48]	; (1b10 <i2c_m_async_init+0x90>)
    1ade:	2100      	movs	r1, #0
    1ae0:	4618      	mov	r0, r3
    1ae2:	4b09      	ldr	r3, [pc, #36]	; (1b08 <i2c_m_async_init+0x88>)
    1ae4:	4798      	blx	r3

	return ERR_NONE;
    1ae6:	2300      	movs	r3, #0
}
    1ae8:	4618      	mov	r0, r3
    1aea:	3710      	adds	r7, #16
    1aec:	46bd      	mov	sp, r7
    1aee:	bd80      	pop	{r7, pc}
    1af0:	0000d470 	.word	0x0000d470
    1af4:	00003079 	.word	0x00003079
    1af8:	00005f45 	.word	0x00005f45
    1afc:	000019e1 	.word	0x000019e1
    1b00:	00001a31 	.word	0x00001a31
    1b04:	00001945 	.word	0x00001945
    1b08:	000061c9 	.word	0x000061c9
    1b0c:	00001977 	.word	0x00001977
    1b10:	000019a9 	.word	0x000019a9

00001b14 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b084      	sub	sp, #16
    1b18:	af00      	add	r7, sp, #0
    1b1a:	60f8      	str	r0, [r7, #12]
    1b1c:	60b9      	str	r1, [r7, #8]
    1b1e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1b20:	68fb      	ldr	r3, [r7, #12]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d004      	beq.n	1b30 <pwm_init+0x1c>
    1b26:	68bb      	ldr	r3, [r7, #8]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d001      	beq.n	1b30 <pwm_init+0x1c>
    1b2c:	2301      	movs	r3, #1
    1b2e:	e000      	b.n	1b32 <pwm_init+0x1e>
    1b30:	2300      	movs	r3, #0
    1b32:	f003 0301 	and.w	r3, r3, #1
    1b36:	b2db      	uxtb	r3, r3
    1b38:	2233      	movs	r2, #51	; 0x33
    1b3a:	490a      	ldr	r1, [pc, #40]	; (1b64 <pwm_init+0x50>)
    1b3c:	4618      	mov	r0, r3
    1b3e:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <pwm_init+0x54>)
    1b40:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1b42:	68fb      	ldr	r3, [r7, #12]
    1b44:	68b9      	ldr	r1, [r7, #8]
    1b46:	4618      	mov	r0, r3
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <pwm_init+0x58>)
    1b4a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	4a08      	ldr	r2, [pc, #32]	; (1b70 <pwm_init+0x5c>)
    1b50:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	4a07      	ldr	r2, [pc, #28]	; (1b74 <pwm_init+0x60>)
    1b56:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1b58:	2300      	movs	r3, #0
}
    1b5a:	4618      	mov	r0, r3
    1b5c:	3710      	adds	r7, #16
    1b5e:	46bd      	mov	sp, r7
    1b60:	bd80      	pop	{r7, pc}
    1b62:	bf00      	nop
    1b64:	0000d490 	.word	0x0000d490
    1b68:	00003079 	.word	0x00003079
    1b6c:	00007379 	.word	0x00007379
    1b70:	00001bcd 	.word	0x00001bcd
    1b74:	00001bf1 	.word	0x00001bf1

00001b78 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b082      	sub	sp, #8
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	2b00      	cmp	r3, #0
    1b84:	bf14      	ite	ne
    1b86:	2301      	movne	r3, #1
    1b88:	2300      	moveq	r3, #0
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	224a      	movs	r2, #74	; 0x4a
    1b8e:	490b      	ldr	r1, [pc, #44]	; (1bbc <pwm_enable+0x44>)
    1b90:	4618      	mov	r0, r3
    1b92:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <pwm_enable+0x48>)
    1b94:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	4618      	mov	r0, r3
    1b9a:	4b0a      	ldr	r3, [pc, #40]	; (1bc4 <pwm_enable+0x4c>)
    1b9c:	4798      	blx	r3
    1b9e:	4603      	mov	r3, r0
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d002      	beq.n	1baa <pwm_enable+0x32>
		return ERR_DENIED;
    1ba4:	f06f 0310 	mvn.w	r3, #16
    1ba8:	e004      	b.n	1bb4 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    1baa:	687b      	ldr	r3, [r7, #4]
    1bac:	4618      	mov	r0, r3
    1bae:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <pwm_enable+0x50>)
    1bb0:	4798      	blx	r3

	return ERR_NONE;
    1bb2:	2300      	movs	r3, #0
}
    1bb4:	4618      	mov	r0, r3
    1bb6:	3708      	adds	r7, #8
    1bb8:	46bd      	mov	sp, r7
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	0000d490 	.word	0x0000d490
    1bc0:	00003079 	.word	0x00003079
    1bc4:	00007615 	.word	0x00007615
    1bc8:	000075b5 	.word	0x000075b5

00001bcc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b084      	sub	sp, #16
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	695b      	ldr	r3, [r3, #20]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d003      	beq.n	1be8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	695b      	ldr	r3, [r3, #20]
    1be4:	68f8      	ldr	r0, [r7, #12]
    1be6:	4798      	blx	r3
	}
}
    1be8:	bf00      	nop
    1bea:	3710      	adds	r7, #16
    1bec:	46bd      	mov	sp, r7
    1bee:	bd80      	pop	{r7, pc}

00001bf0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b084      	sub	sp, #16
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1bfc:	68fb      	ldr	r3, [r7, #12]
    1bfe:	699b      	ldr	r3, [r3, #24]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d003      	beq.n	1c0c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1c04:	68fb      	ldr	r3, [r7, #12]
    1c06:	699b      	ldr	r3, [r3, #24]
    1c08:	68f8      	ldr	r0, [r7, #12]
    1c0a:	4798      	blx	r3
	}
}
    1c0c:	bf00      	nop
    1c0e:	3710      	adds	r7, #16
    1c10:	46bd      	mov	sp, r7
    1c12:	bd80      	pop	{r7, pc}

00001c14 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b082      	sub	sp, #8
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
    1c1c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d004      	beq.n	1c2e <qspi_sync_init+0x1a>
    1c24:	683b      	ldr	r3, [r7, #0]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d001      	beq.n	1c2e <qspi_sync_init+0x1a>
    1c2a:	2301      	movs	r3, #1
    1c2c:	e000      	b.n	1c30 <qspi_sync_init+0x1c>
    1c2e:	2300      	movs	r3, #0
    1c30:	f003 0301 	and.w	r3, r3, #1
    1c34:	b2db      	uxtb	r3, r3
    1c36:	2231      	movs	r2, #49	; 0x31
    1c38:	4906      	ldr	r1, [pc, #24]	; (1c54 <qspi_sync_init+0x40>)
    1c3a:	4618      	mov	r0, r3
    1c3c:	4b06      	ldr	r3, [pc, #24]	; (1c58 <qspi_sync_init+0x44>)
    1c3e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	6839      	ldr	r1, [r7, #0]
    1c44:	4618      	mov	r0, r3
    1c46:	4b05      	ldr	r3, [pc, #20]	; (1c5c <qspi_sync_init+0x48>)
    1c48:	4798      	blx	r3
    1c4a:	4603      	mov	r3, r0
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	3708      	adds	r7, #8
    1c50:	46bd      	mov	sp, r7
    1c52:	bd80      	pop	{r7, pc}
    1c54:	0000d4a8 	.word	0x0000d4a8
    1c58:	00003079 	.word	0x00003079
    1c5c:	00004e89 	.word	0x00004e89

00001c60 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	b082      	sub	sp, #8
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	bf14      	ite	ne
    1c6e:	2301      	movne	r3, #1
    1c70:	2300      	moveq	r3, #0
    1c72:	b2db      	uxtb	r3, r3
    1c74:	223f      	movs	r2, #63	; 0x3f
    1c76:	4906      	ldr	r1, [pc, #24]	; (1c90 <qspi_sync_enable+0x30>)
    1c78:	4618      	mov	r0, r3
    1c7a:	4b06      	ldr	r3, [pc, #24]	; (1c94 <qspi_sync_enable+0x34>)
    1c7c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	4618      	mov	r0, r3
    1c82:	4b05      	ldr	r3, [pc, #20]	; (1c98 <qspi_sync_enable+0x38>)
    1c84:	4798      	blx	r3
    1c86:	4603      	mov	r3, r0
}
    1c88:	4618      	mov	r0, r3
    1c8a:	3708      	adds	r7, #8
    1c8c:	46bd      	mov	sp, r7
    1c8e:	bd80      	pop	{r7, pc}
    1c90:	0000d4a8 	.word	0x0000d4a8
    1c94:	00003079 	.word	0x00003079
    1c98:	00004efd 	.word	0x00004efd

00001c9c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b082      	sub	sp, #8
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	bf14      	ite	ne
    1caa:	2301      	movne	r3, #1
    1cac:	2300      	moveq	r3, #0
    1cae:	b2db      	uxtb	r3, r3
    1cb0:	2246      	movs	r2, #70	; 0x46
    1cb2:	4906      	ldr	r1, [pc, #24]	; (1ccc <qspi_sync_disable+0x30>)
    1cb4:	4618      	mov	r0, r3
    1cb6:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <qspi_sync_disable+0x34>)
    1cb8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	4618      	mov	r0, r3
    1cbe:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <qspi_sync_disable+0x38>)
    1cc0:	4798      	blx	r3
    1cc2:	4603      	mov	r3, r0
}
    1cc4:	4618      	mov	r0, r3
    1cc6:	3708      	adds	r7, #8
    1cc8:	46bd      	mov	sp, r7
    1cca:	bd80      	pop	{r7, pc}
    1ccc:	0000d4a8 	.word	0x0000d4a8
    1cd0:	00003079 	.word	0x00003079
    1cd4:	00004f21 	.word	0x00004f21

00001cd8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1cd8:	b580      	push	{r7, lr}
    1cda:	b082      	sub	sp, #8
    1cdc:	af00      	add	r7, sp, #0
    1cde:	6078      	str	r0, [r7, #4]
    1ce0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d004      	beq.n	1cf2 <qspi_sync_serial_run_command+0x1a>
    1ce8:	683b      	ldr	r3, [r7, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d001      	beq.n	1cf2 <qspi_sync_serial_run_command+0x1a>
    1cee:	2301      	movs	r3, #1
    1cf0:	e000      	b.n	1cf4 <qspi_sync_serial_run_command+0x1c>
    1cf2:	2300      	movs	r3, #0
    1cf4:	f003 0301 	and.w	r3, r3, #1
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	224d      	movs	r2, #77	; 0x4d
    1cfc:	4906      	ldr	r1, [pc, #24]	; (1d18 <qspi_sync_serial_run_command+0x40>)
    1cfe:	4618      	mov	r0, r3
    1d00:	4b06      	ldr	r3, [pc, #24]	; (1d1c <qspi_sync_serial_run_command+0x44>)
    1d02:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	6839      	ldr	r1, [r7, #0]
    1d08:	4618      	mov	r0, r3
    1d0a:	4b05      	ldr	r3, [pc, #20]	; (1d20 <qspi_sync_serial_run_command+0x48>)
    1d0c:	4798      	blx	r3
    1d0e:	4603      	mov	r3, r0
}
    1d10:	4618      	mov	r0, r3
    1d12:	3708      	adds	r7, #8
    1d14:	46bd      	mov	sp, r7
    1d16:	bd80      	pop	{r7, pc}
    1d18:	0000d4a8 	.word	0x0000d4a8
    1d1c:	00003079 	.word	0x00003079
    1d20:	0000506d 	.word	0x0000506d

00001d24 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    1d24:	b580      	push	{r7, lr}
    1d26:	b084      	sub	sp, #16
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	3b04      	subs	r3, #4
    1d30:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	791b      	ldrb	r3, [r3, #4]
    1d36:	2b01      	cmp	r3, #1
    1d38:	d80e      	bhi.n	1d58 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1d3a:	68fb      	ldr	r3, [r7, #12]
    1d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d42:	1c58      	adds	r0, r3, #1
    1d44:	68f9      	ldr	r1, [r7, #12]
    1d46:	6448      	str	r0, [r1, #68]	; 0x44
    1d48:	4413      	add	r3, r2
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	b29b      	uxth	r3, r3
    1d4e:	4619      	mov	r1, r3
    1d50:	6878      	ldr	r0, [r7, #4]
    1d52:	4b11      	ldr	r3, [pc, #68]	; (1d98 <_spi_dev_tx+0x74>)
    1d54:	4798      	blx	r3
    1d56:	e00d      	b.n	1d74 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1d58:	68fb      	ldr	r3, [r7, #12]
    1d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d60:	1c58      	adds	r0, r3, #1
    1d62:	68f9      	ldr	r1, [r7, #12]
    1d64:	6448      	str	r0, [r1, #68]	; 0x44
    1d66:	005b      	lsls	r3, r3, #1
    1d68:	4413      	add	r3, r2
    1d6a:	881b      	ldrh	r3, [r3, #0]
    1d6c:	4619      	mov	r1, r3
    1d6e:	6878      	ldr	r0, [r7, #4]
    1d70:	4b09      	ldr	r3, [pc, #36]	; (1d98 <_spi_dev_tx+0x74>)
    1d72:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    1d74:	68fb      	ldr	r3, [r7, #12]
    1d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1d7c:	429a      	cmp	r2, r3
    1d7e:	d107      	bne.n	1d90 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    1d80:	2100      	movs	r1, #0
    1d82:	6878      	ldr	r0, [r7, #4]
    1d84:	4b05      	ldr	r3, [pc, #20]	; (1d9c <_spi_dev_tx+0x78>)
    1d86:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1d88:	2101      	movs	r1, #1
    1d8a:	6878      	ldr	r0, [r7, #4]
    1d8c:	4b04      	ldr	r3, [pc, #16]	; (1da0 <_spi_dev_tx+0x7c>)
    1d8e:	4798      	blx	r3
	}
}
    1d90:	bf00      	nop
    1d92:	3710      	adds	r7, #16
    1d94:	46bd      	mov	sp, r7
    1d96:	bd80      	pop	{r7, pc}
    1d98:	00006c29 	.word	0x00006c29
    1d9c:	00006aed 	.word	0x00006aed
    1da0:	00006bc1 	.word	0x00006bc1

00001da4 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    1da4:	b590      	push	{r4, r7, lr}
    1da6:	b085      	sub	sp, #20
    1da8:	af00      	add	r7, sp, #0
    1daa:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	3b04      	subs	r3, #4
    1db0:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    1db2:	68fb      	ldr	r3, [r7, #12]
    1db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1db6:	2b00      	cmp	r3, #0
    1db8:	d021      	beq.n	1dfe <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	791b      	ldrb	r3, [r3, #4]
    1dbe:	2b01      	cmp	r3, #1
    1dc0:	d80e      	bhi.n	1de0 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1dc2:	68fb      	ldr	r3, [r7, #12]
    1dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1dca:	1c58      	adds	r0, r3, #1
    1dcc:	68f9      	ldr	r1, [r7, #12]
    1dce:	6448      	str	r0, [r1, #68]	; 0x44
    1dd0:	18d4      	adds	r4, r2, r3
    1dd2:	6878      	ldr	r0, [r7, #4]
    1dd4:	4b2e      	ldr	r3, [pc, #184]	; (1e90 <_spi_dev_rx+0xec>)
    1dd6:	4798      	blx	r3
    1dd8:	4603      	mov	r3, r0
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	7023      	strb	r3, [r4, #0]
    1dde:	e016      	b.n	1e0e <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1de0:	68fb      	ldr	r3, [r7, #12]
    1de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1de4:	68fb      	ldr	r3, [r7, #12]
    1de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1de8:	1c58      	adds	r0, r3, #1
    1dea:	68f9      	ldr	r1, [r7, #12]
    1dec:	6448      	str	r0, [r1, #68]	; 0x44
    1dee:	005b      	lsls	r3, r3, #1
    1df0:	18d4      	adds	r4, r2, r3
    1df2:	6878      	ldr	r0, [r7, #4]
    1df4:	4b26      	ldr	r3, [pc, #152]	; (1e90 <_spi_dev_rx+0xec>)
    1df6:	4798      	blx	r3
    1df8:	4603      	mov	r3, r0
    1dfa:	8023      	strh	r3, [r4, #0]
    1dfc:	e007      	b.n	1e0e <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    1dfe:	6878      	ldr	r0, [r7, #4]
    1e00:	4b23      	ldr	r3, [pc, #140]	; (1e90 <_spi_dev_rx+0xec>)
    1e02:	4798      	blx	r3
		spi->xfercnt++;
    1e04:	68fb      	ldr	r3, [r7, #12]
    1e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e08:	1c5a      	adds	r2, r3, #1
    1e0a:	68fb      	ldr	r3, [r7, #12]
    1e0c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    1e0e:	68fb      	ldr	r3, [r7, #12]
    1e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1e12:	68fb      	ldr	r3, [r7, #12]
    1e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1e16:	429a      	cmp	r2, r3
    1e18:	d226      	bcs.n	1e68 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    1e1a:	68fb      	ldr	r3, [r7, #12]
    1e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d01b      	beq.n	1e5a <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	791b      	ldrb	r3, [r3, #4]
    1e26:	2b01      	cmp	r3, #1
    1e28:	d80b      	bhi.n	1e42 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1e2a:	68fb      	ldr	r3, [r7, #12]
    1e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e2e:	68fb      	ldr	r3, [r7, #12]
    1e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e32:	4413      	add	r3, r2
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	b29b      	uxth	r3, r3
    1e38:	4619      	mov	r1, r3
    1e3a:	6878      	ldr	r0, [r7, #4]
    1e3c:	4b15      	ldr	r3, [pc, #84]	; (1e94 <_spi_dev_rx+0xf0>)
    1e3e:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    1e40:	e022      	b.n	1e88 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e46:	68fb      	ldr	r3, [r7, #12]
    1e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e4a:	005b      	lsls	r3, r3, #1
    1e4c:	4413      	add	r3, r2
    1e4e:	881b      	ldrh	r3, [r3, #0]
    1e50:	4619      	mov	r1, r3
    1e52:	6878      	ldr	r0, [r7, #4]
    1e54:	4b0f      	ldr	r3, [pc, #60]	; (1e94 <_spi_dev_rx+0xf0>)
    1e56:	4798      	blx	r3
}
    1e58:	e016      	b.n	1e88 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	88db      	ldrh	r3, [r3, #6]
    1e5e:	4619      	mov	r1, r3
    1e60:	6878      	ldr	r0, [r7, #4]
    1e62:	4b0c      	ldr	r3, [pc, #48]	; (1e94 <_spi_dev_rx+0xf0>)
    1e64:	4798      	blx	r3
}
    1e66:	e00f      	b.n	1e88 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    1e68:	2100      	movs	r1, #0
    1e6a:	6878      	ldr	r0, [r7, #4]
    1e6c:	4b0a      	ldr	r3, [pc, #40]	; (1e98 <_spi_dev_rx+0xf4>)
    1e6e:	4798      	blx	r3
		spi->stat = 0;
    1e70:	68fb      	ldr	r3, [r7, #12]
    1e72:	2200      	movs	r2, #0
    1e74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    1e78:	68fb      	ldr	r3, [r7, #12]
    1e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d003      	beq.n	1e88 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    1e80:	68fb      	ldr	r3, [r7, #12]
    1e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1e84:	68f8      	ldr	r0, [r7, #12]
    1e86:	4798      	blx	r3
}
    1e88:	bf00      	nop
    1e8a:	3714      	adds	r7, #20
    1e8c:	46bd      	mov	sp, r7
    1e8e:	bd90      	pop	{r4, r7, pc}
    1e90:	00006c81 	.word	0x00006c81
    1e94:	00006c29 	.word	0x00006c29
    1e98:	00006b51 	.word	0x00006b51

00001e9c <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b084      	sub	sp, #16
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	3b04      	subs	r3, #4
    1ea8:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1eb2:	429a      	cmp	r2, r3
    1eb4:	d30f      	bcc.n	1ed6 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    1eb6:	2100      	movs	r1, #0
    1eb8:	6878      	ldr	r0, [r7, #4]
    1eba:	4b09      	ldr	r3, [pc, #36]	; (1ee0 <_spi_dev_complete+0x44>)
    1ebc:	4798      	blx	r3
		spi->stat = 0;
    1ebe:	68fb      	ldr	r3, [r7, #12]
    1ec0:	2200      	movs	r2, #0
    1ec2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    1ec6:	68fb      	ldr	r3, [r7, #12]
    1ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d003      	beq.n	1ed6 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ed2:	68f8      	ldr	r0, [r7, #12]
    1ed4:	4798      	blx	r3
		}
	}
}
    1ed6:	bf00      	nop
    1ed8:	3710      	adds	r7, #16
    1eda:	46bd      	mov	sp, r7
    1edc:	bd80      	pop	{r7, pc}
    1ede:	bf00      	nop
    1ee0:	00006bc1 	.word	0x00006bc1

00001ee4 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    1ee4:	b580      	push	{r7, lr}
    1ee6:	b084      	sub	sp, #16
    1ee8:	af00      	add	r7, sp, #0
    1eea:	6078      	str	r0, [r7, #4]
    1eec:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1eee:	687b      	ldr	r3, [r7, #4]
    1ef0:	3b04      	subs	r3, #4
    1ef2:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    1ef4:	2100      	movs	r1, #0
    1ef6:	6878      	ldr	r0, [r7, #4]
    1ef8:	4b0d      	ldr	r3, [pc, #52]	; (1f30 <_spi_dev_error+0x4c>)
    1efa:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    1efc:	2100      	movs	r1, #0
    1efe:	6878      	ldr	r0, [r7, #4]
    1f00:	4b0c      	ldr	r3, [pc, #48]	; (1f34 <_spi_dev_error+0x50>)
    1f02:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    1f04:	2100      	movs	r1, #0
    1f06:	6878      	ldr	r0, [r7, #4]
    1f08:	4b0b      	ldr	r3, [pc, #44]	; (1f38 <_spi_dev_error+0x54>)
    1f0a:	4798      	blx	r3
	spi->stat = 0;
    1f0c:	68fb      	ldr	r3, [r7, #12]
    1f0e:	2200      	movs	r2, #0
    1f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    1f14:	68fb      	ldr	r3, [r7, #12]
    1f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d004      	beq.n	1f26 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f20:	6839      	ldr	r1, [r7, #0]
    1f22:	68f8      	ldr	r0, [r7, #12]
    1f24:	4798      	blx	r3
	}
}
    1f26:	bf00      	nop
    1f28:	3710      	adds	r7, #16
    1f2a:	46bd      	mov	sp, r7
    1f2c:	bd80      	pop	{r7, pc}
    1f2e:	bf00      	nop
    1f30:	00006aed 	.word	0x00006aed
    1f34:	00006b51 	.word	0x00006b51
    1f38:	00006bc1 	.word	0x00006bc1

00001f3c <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    1f3c:	b580      	push	{r7, lr}
    1f3e:	b084      	sub	sp, #16
    1f40:	af00      	add	r7, sp, #0
    1f42:	6078      	str	r0, [r7, #4]
    1f44:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1f46:	2300      	movs	r3, #0
    1f48:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d004      	beq.n	1f5a <spi_m_async_init+0x1e>
    1f50:	683b      	ldr	r3, [r7, #0]
    1f52:	2b00      	cmp	r3, #0
    1f54:	d001      	beq.n	1f5a <spi_m_async_init+0x1e>
    1f56:	2301      	movs	r3, #1
    1f58:	e000      	b.n	1f5c <spi_m_async_init+0x20>
    1f5a:	2300      	movs	r3, #0
    1f5c:	f003 0301 	and.w	r3, r3, #1
    1f60:	b2db      	uxtb	r3, r3
    1f62:	22a5      	movs	r2, #165	; 0xa5
    1f64:	491c      	ldr	r1, [pc, #112]	; (1fd8 <spi_m_async_init+0x9c>)
    1f66:	4618      	mov	r0, r3
    1f68:	4b1c      	ldr	r3, [pc, #112]	; (1fdc <spi_m_async_init+0xa0>)
    1f6a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	683a      	ldr	r2, [r7, #0]
    1f70:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	3304      	adds	r3, #4
    1f76:	6839      	ldr	r1, [r7, #0]
    1f78:	4618      	mov	r0, r3
    1f7a:	4b19      	ldr	r3, [pc, #100]	; (1fe0 <spi_m_async_init+0xa4>)
    1f7c:	4798      	blx	r3
    1f7e:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	2b00      	cmp	r3, #0
    1f84:	db23      	blt.n	1fce <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	3304      	adds	r3, #4
    1f8a:	4a16      	ldr	r2, [pc, #88]	; (1fe4 <spi_m_async_init+0xa8>)
    1f8c:	2100      	movs	r1, #0
    1f8e:	4618      	mov	r0, r3
    1f90:	4b15      	ldr	r3, [pc, #84]	; (1fe8 <spi_m_async_init+0xac>)
    1f92:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	3304      	adds	r3, #4
    1f98:	4a14      	ldr	r2, [pc, #80]	; (1fec <spi_m_async_init+0xb0>)
    1f9a:	2101      	movs	r1, #1
    1f9c:	4618      	mov	r0, r3
    1f9e:	4b12      	ldr	r3, [pc, #72]	; (1fe8 <spi_m_async_init+0xac>)
    1fa0:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	3304      	adds	r3, #4
    1fa6:	4a12      	ldr	r2, [pc, #72]	; (1ff0 <spi_m_async_init+0xb4>)
    1fa8:	2102      	movs	r1, #2
    1faa:	4618      	mov	r0, r3
    1fac:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <spi_m_async_init+0xac>)
    1fae:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	3304      	adds	r3, #4
    1fb4:	4a0f      	ldr	r2, [pc, #60]	; (1ff4 <spi_m_async_init+0xb8>)
    1fb6:	2103      	movs	r1, #3
    1fb8:	4618      	mov	r0, r3
    1fba:	4b0b      	ldr	r3, [pc, #44]	; (1fe8 <spi_m_async_init+0xac>)
    1fbc:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	4a0d      	ldr	r2, [pc, #52]	; (1ff8 <spi_m_async_init+0xbc>)
    1fc2:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    1fc4:	687b      	ldr	r3, [r7, #4]
    1fc6:	4a0d      	ldr	r2, [pc, #52]	; (1ffc <spi_m_async_init+0xc0>)
    1fc8:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    1fca:	2300      	movs	r3, #0
    1fcc:	e000      	b.n	1fd0 <spi_m_async_init+0x94>
		return rc;
    1fce:	68fb      	ldr	r3, [r7, #12]
}
    1fd0:	4618      	mov	r0, r3
    1fd2:	3710      	adds	r7, #16
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bd80      	pop	{r7, pc}
    1fd8:	0000d4c4 	.word	0x0000d4c4
    1fdc:	00003079 	.word	0x00003079
    1fe0:	000067ed 	.word	0x000067ed
    1fe4:	00001d25 	.word	0x00001d25
    1fe8:	00006cd1 	.word	0x00006cd1
    1fec:	00001da5 	.word	0x00001da5
    1ff0:	00001e9d 	.word	0x00001e9d
    1ff4:	00001ee5 	.word	0x00001ee5
    1ff8:	00002001 	.word	0x00002001
    1ffc:	00002081 	.word	0x00002081

00002000 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    2000:	b580      	push	{r7, lr}
    2002:	b086      	sub	sp, #24
    2004:	af00      	add	r7, sp, #0
    2006:	60f8      	str	r0, [r7, #12]
    2008:	60b9      	str	r1, [r7, #8]
    200a:	4613      	mov	r3, r2
    200c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    200e:	68fb      	ldr	r3, [r7, #12]
    2010:	2b00      	cmp	r3, #0
    2012:	bf14      	ite	ne
    2014:	2301      	movne	r3, #1
    2016:	2300      	moveq	r3, #0
    2018:	b2db      	uxtb	r3, r3
    201a:	f240 1205 	movw	r2, #261	; 0x105
    201e:	4914      	ldr	r1, [pc, #80]	; (2070 <_spi_m_async_io_read+0x70>)
    2020:	4618      	mov	r0, r3
    2022:	4b14      	ldr	r3, [pc, #80]	; (2074 <_spi_m_async_io_read+0x74>)
    2024:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	3b24      	subs	r3, #36	; 0x24
    202a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    202c:	697b      	ldr	r3, [r7, #20]
    202e:	68ba      	ldr	r2, [r7, #8]
    2030:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    2032:	697b      	ldr	r3, [r7, #20]
    2034:	2200      	movs	r2, #0
    2036:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2038:	88fa      	ldrh	r2, [r7, #6]
    203a:	697b      	ldr	r3, [r7, #20]
    203c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    203e:	697b      	ldr	r3, [r7, #20]
    2040:	2200      	movs	r2, #0
    2042:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2044:	697b      	ldr	r3, [r7, #20]
    2046:	2210      	movs	r2, #16
    2048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    204c:	697b      	ldr	r3, [r7, #20]
    204e:	3304      	adds	r3, #4
    2050:	2101      	movs	r1, #1
    2052:	4618      	mov	r0, r3
    2054:	4b08      	ldr	r3, [pc, #32]	; (2078 <_spi_m_async_io_read+0x78>)
    2056:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    2058:	697b      	ldr	r3, [r7, #20]
    205a:	3304      	adds	r3, #4
    205c:	f240 11ff 	movw	r1, #511	; 0x1ff
    2060:	4618      	mov	r0, r3
    2062:	4b06      	ldr	r3, [pc, #24]	; (207c <_spi_m_async_io_read+0x7c>)
    2064:	4798      	blx	r3

	return ERR_NONE;
    2066:	2300      	movs	r3, #0
}
    2068:	4618      	mov	r0, r3
    206a:	3718      	adds	r7, #24
    206c:	46bd      	mov	sp, r7
    206e:	bd80      	pop	{r7, pc}
    2070:	0000d4c4 	.word	0x0000d4c4
    2074:	00003079 	.word	0x00003079
    2078:	00006b51 	.word	0x00006b51
    207c:	00006c29 	.word	0x00006c29

00002080 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2080:	b580      	push	{r7, lr}
    2082:	b086      	sub	sp, #24
    2084:	af00      	add	r7, sp, #0
    2086:	60f8      	str	r0, [r7, #12]
    2088:	60b9      	str	r1, [r7, #8]
    208a:	4613      	mov	r3, r2
    208c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    208e:	68fb      	ldr	r3, [r7, #12]
    2090:	2b00      	cmp	r3, #0
    2092:	bf14      	ite	ne
    2094:	2301      	movne	r3, #1
    2096:	2300      	moveq	r3, #0
    2098:	b2db      	uxtb	r3, r3
    209a:	f240 1227 	movw	r2, #295	; 0x127
    209e:	4911      	ldr	r1, [pc, #68]	; (20e4 <_spi_m_async_io_write+0x64>)
    20a0:	4618      	mov	r0, r3
    20a2:	4b11      	ldr	r3, [pc, #68]	; (20e8 <_spi_m_async_io_write+0x68>)
    20a4:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    20a6:	68fb      	ldr	r3, [r7, #12]
    20a8:	3b24      	subs	r3, #36	; 0x24
    20aa:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    20ac:	697b      	ldr	r3, [r7, #20]
    20ae:	2200      	movs	r2, #0
    20b0:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    20b2:	697b      	ldr	r3, [r7, #20]
    20b4:	68ba      	ldr	r2, [r7, #8]
    20b6:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    20b8:	88fa      	ldrh	r2, [r7, #6]
    20ba:	697b      	ldr	r3, [r7, #20]
    20bc:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    20be:	697b      	ldr	r3, [r7, #20]
    20c0:	2200      	movs	r2, #0
    20c2:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    20c4:	697b      	ldr	r3, [r7, #20]
    20c6:	2210      	movs	r2, #16
    20c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    20cc:	697b      	ldr	r3, [r7, #20]
    20ce:	3304      	adds	r3, #4
    20d0:	2101      	movs	r1, #1
    20d2:	4618      	mov	r0, r3
    20d4:	4b05      	ldr	r3, [pc, #20]	; (20ec <_spi_m_async_io_write+0x6c>)
    20d6:	4798      	blx	r3

	return ERR_NONE;
    20d8:	2300      	movs	r3, #0
}
    20da:	4618      	mov	r0, r3
    20dc:	3718      	adds	r7, #24
    20de:	46bd      	mov	sp, r7
    20e0:	bd80      	pop	{r7, pc}
    20e2:	bf00      	nop
    20e4:	0000d4c4 	.word	0x0000d4c4
    20e8:	00003079 	.word	0x00003079
    20ec:	00006aed 	.word	0x00006aed

000020f0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b084      	sub	sp, #16
    20f4:	af00      	add	r7, sp, #0
    20f6:	6078      	str	r0, [r7, #4]
    20f8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    20fa:	2300      	movs	r3, #0
    20fc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    20fe:	687b      	ldr	r3, [r7, #4]
    2100:	2b00      	cmp	r3, #0
    2102:	d004      	beq.n	210e <spi_m_sync_init+0x1e>
    2104:	683b      	ldr	r3, [r7, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d001      	beq.n	210e <spi_m_sync_init+0x1e>
    210a:	2301      	movs	r3, #1
    210c:	e000      	b.n	2110 <spi_m_sync_init+0x20>
    210e:	2300      	movs	r3, #0
    2110:	f003 0301 	and.w	r3, r3, #1
    2114:	b2db      	uxtb	r3, r3
    2116:	2240      	movs	r2, #64	; 0x40
    2118:	4910      	ldr	r1, [pc, #64]	; (215c <spi_m_sync_init+0x6c>)
    211a:	4618      	mov	r0, r3
    211c:	4b10      	ldr	r3, [pc, #64]	; (2160 <spi_m_sync_init+0x70>)
    211e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	683a      	ldr	r2, [r7, #0]
    2124:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	3304      	adds	r3, #4
    212a:	6839      	ldr	r1, [r7, #0]
    212c:	4618      	mov	r0, r3
    212e:	4b0d      	ldr	r3, [pc, #52]	; (2164 <spi_m_sync_init+0x74>)
    2130:	4798      	blx	r3
    2132:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2134:	68fb      	ldr	r3, [r7, #12]
    2136:	2b00      	cmp	r3, #0
    2138:	da01      	bge.n	213e <spi_m_sync_init+0x4e>
		return rc;
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	e00a      	b.n	2154 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2144:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	4a07      	ldr	r2, [pc, #28]	; (2168 <spi_m_sync_init+0x78>)
    214a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	4a07      	ldr	r2, [pc, #28]	; (216c <spi_m_sync_init+0x7c>)
    2150:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2152:	2300      	movs	r3, #0
}
    2154:	4618      	mov	r0, r3
    2156:	3710      	adds	r7, #16
    2158:	46bd      	mov	sp, r7
    215a:	bd80      	pop	{r7, pc}
    215c:	0000d4e4 	.word	0x0000d4e4
    2160:	00003079 	.word	0x00003079
    2164:	000066e1 	.word	0x000066e1
    2168:	00002171 	.word	0x00002171
    216c:	000021c9 	.word	0x000021c9

00002170 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2170:	b580      	push	{r7, lr}
    2172:	b088      	sub	sp, #32
    2174:	af00      	add	r7, sp, #0
    2176:	60f8      	str	r0, [r7, #12]
    2178:	60b9      	str	r1, [r7, #8]
    217a:	4613      	mov	r3, r2
    217c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	2b00      	cmp	r3, #0
    2182:	bf14      	ite	ne
    2184:	2301      	movne	r3, #1
    2186:	2300      	moveq	r3, #0
    2188:	b2db      	uxtb	r3, r3
    218a:	2287      	movs	r2, #135	; 0x87
    218c:	490b      	ldr	r1, [pc, #44]	; (21bc <_spi_m_sync_io_read+0x4c>)
    218e:	4618      	mov	r0, r3
    2190:	4b0b      	ldr	r3, [pc, #44]	; (21c0 <_spi_m_sync_io_read+0x50>)
    2192:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2194:	68fb      	ldr	r3, [r7, #12]
    2196:	3b0c      	subs	r3, #12
    2198:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    219a:	68bb      	ldr	r3, [r7, #8]
    219c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    219e:	2300      	movs	r3, #0
    21a0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21a2:	88fb      	ldrh	r3, [r7, #6]
    21a4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21a6:	f107 0310 	add.w	r3, r7, #16
    21aa:	4619      	mov	r1, r3
    21ac:	69f8      	ldr	r0, [r7, #28]
    21ae:	4b05      	ldr	r3, [pc, #20]	; (21c4 <_spi_m_sync_io_read+0x54>)
    21b0:	4798      	blx	r3
    21b2:	4603      	mov	r3, r0
}
    21b4:	4618      	mov	r0, r3
    21b6:	3720      	adds	r7, #32
    21b8:	46bd      	mov	sp, r7
    21ba:	bd80      	pop	{r7, pc}
    21bc:	0000d4e4 	.word	0x0000d4e4
    21c0:	00003079 	.word	0x00003079
    21c4:	00002221 	.word	0x00002221

000021c8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    21c8:	b580      	push	{r7, lr}
    21ca:	b088      	sub	sp, #32
    21cc:	af00      	add	r7, sp, #0
    21ce:	60f8      	str	r0, [r7, #12]
    21d0:	60b9      	str	r1, [r7, #8]
    21d2:	4613      	mov	r3, r2
    21d4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21d6:	68fb      	ldr	r3, [r7, #12]
    21d8:	2b00      	cmp	r3, #0
    21da:	bf14      	ite	ne
    21dc:	2301      	movne	r3, #1
    21de:	2300      	moveq	r3, #0
    21e0:	b2db      	uxtb	r3, r3
    21e2:	22a3      	movs	r2, #163	; 0xa3
    21e4:	490b      	ldr	r1, [pc, #44]	; (2214 <_spi_m_sync_io_write+0x4c>)
    21e6:	4618      	mov	r0, r3
    21e8:	4b0b      	ldr	r3, [pc, #44]	; (2218 <_spi_m_sync_io_write+0x50>)
    21ea:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    21ec:	68fb      	ldr	r3, [r7, #12]
    21ee:	3b0c      	subs	r3, #12
    21f0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    21f2:	2300      	movs	r3, #0
    21f4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    21f6:	68bb      	ldr	r3, [r7, #8]
    21f8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21fa:	88fb      	ldrh	r3, [r7, #6]
    21fc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21fe:	f107 0310 	add.w	r3, r7, #16
    2202:	4619      	mov	r1, r3
    2204:	69f8      	ldr	r0, [r7, #28]
    2206:	4b05      	ldr	r3, [pc, #20]	; (221c <_spi_m_sync_io_write+0x54>)
    2208:	4798      	blx	r3
    220a:	4603      	mov	r3, r0
}
    220c:	4618      	mov	r0, r3
    220e:	3720      	adds	r7, #32
    2210:	46bd      	mov	sp, r7
    2212:	bd80      	pop	{r7, pc}
    2214:	0000d4e4 	.word	0x0000d4e4
    2218:	00003079 	.word	0x00003079
    221c:	00002221 	.word	0x00002221

00002220 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2220:	b580      	push	{r7, lr}
    2222:	b086      	sub	sp, #24
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	2b00      	cmp	r3, #0
    222e:	d004      	beq.n	223a <spi_m_sync_transfer+0x1a>
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	d001      	beq.n	223a <spi_m_sync_transfer+0x1a>
    2236:	2301      	movs	r3, #1
    2238:	e000      	b.n	223c <spi_m_sync_transfer+0x1c>
    223a:	2300      	movs	r3, #0
    223c:	f003 0301 	and.w	r3, r3, #1
    2240:	b2db      	uxtb	r3, r3
    2242:	22b3      	movs	r2, #179	; 0xb3
    2244:	490c      	ldr	r1, [pc, #48]	; (2278 <spi_m_sync_transfer+0x58>)
    2246:	4618      	mov	r0, r3
    2248:	4b0c      	ldr	r3, [pc, #48]	; (227c <spi_m_sync_transfer+0x5c>)
    224a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    224c:	683b      	ldr	r3, [r7, #0]
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2252:	683b      	ldr	r3, [r7, #0]
    2254:	685b      	ldr	r3, [r3, #4]
    2256:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2258:	683b      	ldr	r3, [r7, #0]
    225a:	689b      	ldr	r3, [r3, #8]
    225c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	3304      	adds	r3, #4
    2262:	f107 020c 	add.w	r2, r7, #12
    2266:	4611      	mov	r1, r2
    2268:	4618      	mov	r0, r3
    226a:	4b05      	ldr	r3, [pc, #20]	; (2280 <spi_m_sync_transfer+0x60>)
    226c:	4798      	blx	r3
    226e:	4603      	mov	r3, r0
}
    2270:	4618      	mov	r0, r3
    2272:	3718      	adds	r7, #24
    2274:	46bd      	mov	sp, r7
    2276:	bd80      	pop	{r7, pc}
    2278:	0000d4e4 	.word	0x0000d4e4
    227c:	00003079 	.word	0x00003079
    2280:	000069d1 	.word	0x000069d1

00002284 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2284:	b480      	push	{r7}
    2286:	b083      	sub	sp, #12
    2288:	af00      	add	r7, sp, #0
    228a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    228c:	687b      	ldr	r3, [r7, #4]
    228e:	681b      	ldr	r3, [r3, #0]
}
    2290:	4618      	mov	r0, r3
    2292:	370c      	adds	r7, #12
    2294:	46bd      	mov	sp, r7
    2296:	f85d 7b04 	ldr.w	r7, [sp], #4
    229a:	4770      	bx	lr

0000229c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    229c:	b480      	push	{r7}
    229e:	b083      	sub	sp, #12
    22a0:	af00      	add	r7, sp, #0
    22a2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d002      	beq.n	22b0 <list_get_next_element+0x14>
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	e000      	b.n	22b2 <list_get_next_element+0x16>
    22b0:	2300      	movs	r3, #0
}
    22b2:	4618      	mov	r0, r3
    22b4:	370c      	adds	r7, #12
    22b6:	46bd      	mov	sp, r7
    22b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    22bc:	4770      	bx	lr
	...

000022c0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b084      	sub	sp, #16
    22c4:	af00      	add	r7, sp, #0
    22c6:	60f8      	str	r0, [r7, #12]
    22c8:	60b9      	str	r1, [r7, #8]
    22ca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    22cc:	68fb      	ldr	r3, [r7, #12]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d004      	beq.n	22dc <timer_init+0x1c>
    22d2:	68bb      	ldr	r3, [r7, #8]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d001      	beq.n	22dc <timer_init+0x1c>
    22d8:	2301      	movs	r3, #1
    22da:	e000      	b.n	22de <timer_init+0x1e>
    22dc:	2300      	movs	r3, #0
    22de:	f003 0301 	and.w	r3, r3, #1
    22e2:	b2db      	uxtb	r3, r3
    22e4:	223b      	movs	r2, #59	; 0x3b
    22e6:	490a      	ldr	r1, [pc, #40]	; (2310 <timer_init+0x50>)
    22e8:	4618      	mov	r0, r3
    22ea:	4b0a      	ldr	r3, [pc, #40]	; (2314 <timer_init+0x54>)
    22ec:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    22ee:	68fb      	ldr	r3, [r7, #12]
    22f0:	68b9      	ldr	r1, [r7, #8]
    22f2:	4618      	mov	r0, r3
    22f4:	4b08      	ldr	r3, [pc, #32]	; (2318 <timer_init+0x58>)
    22f6:	4798      	blx	r3
	descr->time                           = 0;
    22f8:	68fb      	ldr	r3, [r7, #12]
    22fa:	2200      	movs	r2, #0
    22fc:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    22fe:	68fb      	ldr	r3, [r7, #12]
    2300:	4a06      	ldr	r2, [pc, #24]	; (231c <timer_init+0x5c>)
    2302:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2304:	2300      	movs	r3, #0
}
    2306:	4618      	mov	r0, r3
    2308:	3710      	adds	r7, #16
    230a:	46bd      	mov	sp, r7
    230c:	bd80      	pop	{r7, pc}
    230e:	bf00      	nop
    2310:	0000d500 	.word	0x0000d500
    2314:	00003079 	.word	0x00003079
    2318:	000070c9 	.word	0x000070c9
    231c:	00002669 	.word	0x00002669

00002320 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2320:	b580      	push	{r7, lr}
    2322:	b082      	sub	sp, #8
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	2b00      	cmp	r3, #0
    232c:	bf14      	ite	ne
    232e:	2301      	movne	r3, #1
    2330:	2300      	moveq	r3, #0
    2332:	b2db      	uxtb	r3, r3
    2334:	2253      	movs	r2, #83	; 0x53
    2336:	490b      	ldr	r1, [pc, #44]	; (2364 <timer_start+0x44>)
    2338:	4618      	mov	r0, r3
    233a:	4b0b      	ldr	r3, [pc, #44]	; (2368 <timer_start+0x48>)
    233c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	4618      	mov	r0, r3
    2342:	4b0a      	ldr	r3, [pc, #40]	; (236c <timer_start+0x4c>)
    2344:	4798      	blx	r3
    2346:	4603      	mov	r3, r0
    2348:	2b00      	cmp	r3, #0
    234a:	d002      	beq.n	2352 <timer_start+0x32>
		return ERR_DENIED;
    234c:	f06f 0310 	mvn.w	r3, #16
    2350:	e004      	b.n	235c <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	4618      	mov	r0, r3
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <timer_start+0x50>)
    2358:	4798      	blx	r3

	return ERR_NONE;
    235a:	2300      	movs	r3, #0
}
    235c:	4618      	mov	r0, r3
    235e:	3708      	adds	r7, #8
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}
    2364:	0000d500 	.word	0x0000d500
    2368:	00003079 	.word	0x00003079
    236c:	000075f5 	.word	0x000075f5
    2370:	00007595 	.word	0x00007595

00002374 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2374:	b580      	push	{r7, lr}
    2376:	b082      	sub	sp, #8
    2378:	af00      	add	r7, sp, #0
    237a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	2b00      	cmp	r3, #0
    2380:	bf14      	ite	ne
    2382:	2301      	movne	r3, #1
    2384:	2300      	moveq	r3, #0
    2386:	b2db      	uxtb	r3, r3
    2388:	2261      	movs	r2, #97	; 0x61
    238a:	490d      	ldr	r1, [pc, #52]	; (23c0 <timer_stop+0x4c>)
    238c:	4618      	mov	r0, r3
    238e:	4b0d      	ldr	r3, [pc, #52]	; (23c4 <timer_stop+0x50>)
    2390:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	4618      	mov	r0, r3
    2396:	4b0c      	ldr	r3, [pc, #48]	; (23c8 <timer_stop+0x54>)
    2398:	4798      	blx	r3
    239a:	4603      	mov	r3, r0
    239c:	f083 0301 	eor.w	r3, r3, #1
    23a0:	b2db      	uxtb	r3, r3
    23a2:	2b00      	cmp	r3, #0
    23a4:	d002      	beq.n	23ac <timer_stop+0x38>
		return ERR_DENIED;
    23a6:	f06f 0310 	mvn.w	r3, #16
    23aa:	e004      	b.n	23b6 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	4618      	mov	r0, r3
    23b0:	4b06      	ldr	r3, [pc, #24]	; (23cc <timer_stop+0x58>)
    23b2:	4798      	blx	r3

	return ERR_NONE;
    23b4:	2300      	movs	r3, #0
}
    23b6:	4618      	mov	r0, r3
    23b8:	3708      	adds	r7, #8
    23ba:	46bd      	mov	sp, r7
    23bc:	bd80      	pop	{r7, pc}
    23be:	bf00      	nop
    23c0:	0000d500 	.word	0x0000d500
    23c4:	00003079 	.word	0x00003079
    23c8:	000075f5 	.word	0x000075f5
    23cc:	000075d5 	.word	0x000075d5

000023d0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b084      	sub	sp, #16
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
    23d8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	2b00      	cmp	r3, #0
    23de:	d004      	beq.n	23ea <timer_add_task+0x1a>
    23e0:	683b      	ldr	r3, [r7, #0]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d001      	beq.n	23ea <timer_add_task+0x1a>
    23e6:	2301      	movs	r3, #1
    23e8:	e000      	b.n	23ec <timer_add_task+0x1c>
    23ea:	2300      	movs	r3, #0
    23ec:	f003 0301 	and.w	r3, r3, #1
    23f0:	b2db      	uxtb	r3, r3
    23f2:	227a      	movs	r2, #122	; 0x7a
    23f4:	492d      	ldr	r1, [pc, #180]	; (24ac <timer_add_task+0xdc>)
    23f6:	4618      	mov	r0, r3
    23f8:	4b2d      	ldr	r3, [pc, #180]	; (24b0 <timer_add_task+0xe0>)
    23fa:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	7e1b      	ldrb	r3, [r3, #24]
    2400:	b2db      	uxtb	r3, r3
    2402:	f043 0301 	orr.w	r3, r3, #1
    2406:	b2da      	uxtb	r2, r3
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	3314      	adds	r3, #20
    2410:	6839      	ldr	r1, [r7, #0]
    2412:	4618      	mov	r0, r3
    2414:	4b27      	ldr	r3, [pc, #156]	; (24b4 <timer_add_task+0xe4>)
    2416:	4798      	blx	r3
    2418:	4603      	mov	r3, r0
    241a:	2b00      	cmp	r3, #0
    241c:	d00f      	beq.n	243e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	7e1b      	ldrb	r3, [r3, #24]
    2422:	b2db      	uxtb	r3, r3
    2424:	f023 0301 	bic.w	r3, r3, #1
    2428:	b2da      	uxtb	r2, r3
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    242e:	227f      	movs	r2, #127	; 0x7f
    2430:	491e      	ldr	r1, [pc, #120]	; (24ac <timer_add_task+0xdc>)
    2432:	2000      	movs	r0, #0
    2434:	4b1e      	ldr	r3, [pc, #120]	; (24b0 <timer_add_task+0xe0>)
    2436:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2438:	f06f 0311 	mvn.w	r3, #17
    243c:	e032      	b.n	24a4 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	691a      	ldr	r2, [r3, #16]
    2442:	683b      	ldr	r3, [r7, #0]
    2444:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	f103 0014 	add.w	r0, r3, #20
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	691b      	ldr	r3, [r3, #16]
    2450:	461a      	mov	r2, r3
    2452:	6839      	ldr	r1, [r7, #0]
    2454:	4b18      	ldr	r3, [pc, #96]	; (24b8 <timer_add_task+0xe8>)
    2456:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	7e1b      	ldrb	r3, [r3, #24]
    245c:	b2db      	uxtb	r3, r3
    245e:	f023 0301 	bic.w	r3, r3, #1
    2462:	b2da      	uxtb	r2, r3
    2464:	687b      	ldr	r3, [r7, #4]
    2466:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	7e1b      	ldrb	r3, [r3, #24]
    246c:	b2db      	uxtb	r3, r3
    246e:	f003 0302 	and.w	r3, r3, #2
    2472:	2b00      	cmp	r3, #0
    2474:	d015      	beq.n	24a2 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    2476:	f107 030c 	add.w	r3, r7, #12
    247a:	4618      	mov	r0, r3
    247c:	4b0f      	ldr	r3, [pc, #60]	; (24bc <timer_add_task+0xec>)
    247e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	7e1b      	ldrb	r3, [r3, #24]
    2484:	b2db      	uxtb	r3, r3
    2486:	f023 0302 	bic.w	r3, r3, #2
    248a:	b2da      	uxtb	r2, r3
    248c:	687b      	ldr	r3, [r7, #4]
    248e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	4618      	mov	r0, r3
    2494:	4b0a      	ldr	r3, [pc, #40]	; (24c0 <timer_add_task+0xf0>)
    2496:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2498:	f107 030c 	add.w	r3, r7, #12
    249c:	4618      	mov	r0, r3
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <timer_add_task+0xf4>)
    24a0:	4798      	blx	r3
	}

	return ERR_NONE;
    24a2:	2300      	movs	r3, #0
}
    24a4:	4618      	mov	r0, r3
    24a6:	3710      	adds	r7, #16
    24a8:	46bd      	mov	sp, r7
    24aa:	bd80      	pop	{r7, pc}
    24ac:	0000d500 	.word	0x0000d500
    24b0:	00003079 	.word	0x00003079
    24b4:	000030a1 	.word	0x000030a1
    24b8:	000025b9 	.word	0x000025b9
    24bc:	0000a73d 	.word	0x0000a73d
    24c0:	00007655 	.word	0x00007655
    24c4:	0000a763 	.word	0x0000a763

000024c8 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	2b00      	cmp	r3, #0
    24d6:	d004      	beq.n	24e2 <timer_remove_task+0x1a>
    24d8:	683b      	ldr	r3, [r7, #0]
    24da:	2b00      	cmp	r3, #0
    24dc:	d001      	beq.n	24e2 <timer_remove_task+0x1a>
    24de:	2301      	movs	r3, #1
    24e0:	e000      	b.n	24e4 <timer_remove_task+0x1c>
    24e2:	2300      	movs	r3, #0
    24e4:	f003 0301 	and.w	r3, r3, #1
    24e8:	b2db      	uxtb	r3, r3
    24ea:	2295      	movs	r2, #149	; 0x95
    24ec:	492b      	ldr	r1, [pc, #172]	; (259c <timer_remove_task+0xd4>)
    24ee:	4618      	mov	r0, r3
    24f0:	4b2b      	ldr	r3, [pc, #172]	; (25a0 <timer_remove_task+0xd8>)
    24f2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	7e1b      	ldrb	r3, [r3, #24]
    24f8:	b2db      	uxtb	r3, r3
    24fa:	f043 0301 	orr.w	r3, r3, #1
    24fe:	b2da      	uxtb	r2, r3
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	3314      	adds	r3, #20
    2508:	6839      	ldr	r1, [r7, #0]
    250a:	4618      	mov	r0, r3
    250c:	4b25      	ldr	r3, [pc, #148]	; (25a4 <timer_remove_task+0xdc>)
    250e:	4798      	blx	r3
    2510:	4603      	mov	r3, r0
    2512:	f083 0301 	eor.w	r3, r3, #1
    2516:	b2db      	uxtb	r3, r3
    2518:	2b00      	cmp	r3, #0
    251a:	d00f      	beq.n	253c <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	7e1b      	ldrb	r3, [r3, #24]
    2520:	b2db      	uxtb	r3, r3
    2522:	f023 0301 	bic.w	r3, r3, #1
    2526:	b2da      	uxtb	r2, r3
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    252c:	229a      	movs	r2, #154	; 0x9a
    252e:	491b      	ldr	r1, [pc, #108]	; (259c <timer_remove_task+0xd4>)
    2530:	2000      	movs	r0, #0
    2532:	4b1b      	ldr	r3, [pc, #108]	; (25a0 <timer_remove_task+0xd8>)
    2534:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2536:	f06f 0309 	mvn.w	r3, #9
    253a:	e02b      	b.n	2594 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	3314      	adds	r3, #20
    2540:	6839      	ldr	r1, [r7, #0]
    2542:	4618      	mov	r0, r3
    2544:	4b18      	ldr	r3, [pc, #96]	; (25a8 <timer_remove_task+0xe0>)
    2546:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	7e1b      	ldrb	r3, [r3, #24]
    254c:	b2db      	uxtb	r3, r3
    254e:	f023 0301 	bic.w	r3, r3, #1
    2552:	b2da      	uxtb	r2, r3
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	7e1b      	ldrb	r3, [r3, #24]
    255c:	b2db      	uxtb	r3, r3
    255e:	f003 0302 	and.w	r3, r3, #2
    2562:	2b00      	cmp	r3, #0
    2564:	d015      	beq.n	2592 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    2566:	f107 030c 	add.w	r3, r7, #12
    256a:	4618      	mov	r0, r3
    256c:	4b0f      	ldr	r3, [pc, #60]	; (25ac <timer_remove_task+0xe4>)
    256e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	7e1b      	ldrb	r3, [r3, #24]
    2574:	b2db      	uxtb	r3, r3
    2576:	f023 0302 	bic.w	r3, r3, #2
    257a:	b2da      	uxtb	r2, r3
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	4618      	mov	r0, r3
    2584:	4b0a      	ldr	r3, [pc, #40]	; (25b0 <timer_remove_task+0xe8>)
    2586:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2588:	f107 030c 	add.w	r3, r7, #12
    258c:	4618      	mov	r0, r3
    258e:	4b09      	ldr	r3, [pc, #36]	; (25b4 <timer_remove_task+0xec>)
    2590:	4798      	blx	r3
	}

	return ERR_NONE;
    2592:	2300      	movs	r3, #0
}
    2594:	4618      	mov	r0, r3
    2596:	3710      	adds	r7, #16
    2598:	46bd      	mov	sp, r7
    259a:	bd80      	pop	{r7, pc}
    259c:	0000d500 	.word	0x0000d500
    25a0:	00003079 	.word	0x00003079
    25a4:	000030a1 	.word	0x000030a1
    25a8:	00003203 	.word	0x00003203
    25ac:	0000a73d 	.word	0x0000a73d
    25b0:	00007655 	.word	0x00007655
    25b4:	0000a763 	.word	0x0000a763

000025b8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b088      	sub	sp, #32
    25bc:	af00      	add	r7, sp, #0
    25be:	60f8      	str	r0, [r7, #12]
    25c0:	60b9      	str	r1, [r7, #8]
    25c2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    25c4:	2300      	movs	r3, #0
    25c6:	61bb      	str	r3, [r7, #24]
    25c8:	68f8      	ldr	r0, [r7, #12]
    25ca:	4b23      	ldr	r3, [pc, #140]	; (2658 <timer_add_timer_task+0xa0>)
    25cc:	4798      	blx	r3
    25ce:	6138      	str	r0, [r7, #16]

	if (!head) {
    25d0:	693b      	ldr	r3, [r7, #16]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d104      	bne.n	25e0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    25d6:	68b9      	ldr	r1, [r7, #8]
    25d8:	68f8      	ldr	r0, [r7, #12]
    25da:	4b20      	ldr	r3, [pc, #128]	; (265c <timer_add_timer_task+0xa4>)
    25dc:	4798      	blx	r3
		return;
    25de:	e037      	b.n	2650 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    25e0:	693b      	ldr	r3, [r7, #16]
    25e2:	61fb      	str	r3, [r7, #28]
    25e4:	e022      	b.n	262c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    25e6:	69fb      	ldr	r3, [r7, #28]
    25e8:	685a      	ldr	r2, [r3, #4]
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	429a      	cmp	r2, r3
    25ee:	d808      	bhi.n	2602 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    25f0:	69fb      	ldr	r3, [r7, #28]
    25f2:	689a      	ldr	r2, [r3, #8]
    25f4:	69fb      	ldr	r3, [r7, #28]
    25f6:	6859      	ldr	r1, [r3, #4]
    25f8:	687b      	ldr	r3, [r7, #4]
    25fa:	1acb      	subs	r3, r1, r3
    25fc:	4413      	add	r3, r2
    25fe:	617b      	str	r3, [r7, #20]
    2600:	e009      	b.n	2616 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2602:	69fb      	ldr	r3, [r7, #28]
    2604:	689a      	ldr	r2, [r3, #8]
    2606:	69fb      	ldr	r3, [r7, #28]
    2608:	685b      	ldr	r3, [r3, #4]
    260a:	441a      	add	r2, r3
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	425b      	negs	r3, r3
    2610:	4413      	add	r3, r2
    2612:	3301      	adds	r3, #1
    2614:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2616:	68bb      	ldr	r3, [r7, #8]
    2618:	689a      	ldr	r2, [r3, #8]
    261a:	697b      	ldr	r3, [r7, #20]
    261c:	429a      	cmp	r2, r3
    261e:	d909      	bls.n	2634 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2620:	69fb      	ldr	r3, [r7, #28]
    2622:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2624:	69f8      	ldr	r0, [r7, #28]
    2626:	4b0e      	ldr	r3, [pc, #56]	; (2660 <timer_add_timer_task+0xa8>)
    2628:	4798      	blx	r3
    262a:	61f8      	str	r0, [r7, #28]
    262c:	69fb      	ldr	r3, [r7, #28]
    262e:	2b00      	cmp	r3, #0
    2630:	d1d9      	bne.n	25e6 <timer_add_timer_task+0x2e>
    2632:	e000      	b.n	2636 <timer_add_timer_task+0x7e>
			break;
    2634:	bf00      	nop
	}

	if (it == head) {
    2636:	69fa      	ldr	r2, [r7, #28]
    2638:	693b      	ldr	r3, [r7, #16]
    263a:	429a      	cmp	r2, r3
    263c:	d104      	bne.n	2648 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    263e:	68b9      	ldr	r1, [r7, #8]
    2640:	68f8      	ldr	r0, [r7, #12]
    2642:	4b06      	ldr	r3, [pc, #24]	; (265c <timer_add_timer_task+0xa4>)
    2644:	4798      	blx	r3
    2646:	e003      	b.n	2650 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2648:	68b9      	ldr	r1, [r7, #8]
    264a:	69b8      	ldr	r0, [r7, #24]
    264c:	4b05      	ldr	r3, [pc, #20]	; (2664 <timer_add_timer_task+0xac>)
    264e:	4798      	blx	r3
	}
}
    2650:	3720      	adds	r7, #32
    2652:	46bd      	mov	sp, r7
    2654:	bd80      	pop	{r7, pc}
    2656:	bf00      	nop
    2658:	00002285 	.word	0x00002285
    265c:	000030d9 	.word	0x000030d9
    2660:	0000229d 	.word	0x0000229d
    2664:	00003131 	.word	0x00003131

00002668 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2668:	b580      	push	{r7, lr}
    266a:	b086      	sub	sp, #24
    266c:	af00      	add	r7, sp, #0
    266e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2674:	693b      	ldr	r3, [r7, #16]
    2676:	3314      	adds	r3, #20
    2678:	4618      	mov	r0, r3
    267a:	4b27      	ldr	r3, [pc, #156]	; (2718 <timer_process_counted+0xb0>)
    267c:	4798      	blx	r3
    267e:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2680:	693b      	ldr	r3, [r7, #16]
    2682:	691b      	ldr	r3, [r3, #16]
    2684:	1c5a      	adds	r2, r3, #1
    2686:	693b      	ldr	r3, [r7, #16]
    2688:	611a      	str	r2, [r3, #16]
    268a:	693b      	ldr	r3, [r7, #16]
    268c:	691b      	ldr	r3, [r3, #16]
    268e:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2690:	693b      	ldr	r3, [r7, #16]
    2692:	7e1b      	ldrb	r3, [r3, #24]
    2694:	b2db      	uxtb	r3, r3
    2696:	f003 0301 	and.w	r3, r3, #1
    269a:	2b00      	cmp	r3, #0
    269c:	d106      	bne.n	26ac <timer_process_counted+0x44>
    269e:	693b      	ldr	r3, [r7, #16]
    26a0:	7e1b      	ldrb	r3, [r3, #24]
    26a2:	b2db      	uxtb	r3, r3
    26a4:	f003 0302 	and.w	r3, r3, #2
    26a8:	2b00      	cmp	r3, #0
    26aa:	d027      	beq.n	26fc <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    26ac:	693b      	ldr	r3, [r7, #16]
    26ae:	7e1b      	ldrb	r3, [r3, #24]
    26b0:	b2db      	uxtb	r3, r3
    26b2:	f043 0302 	orr.w	r3, r3, #2
    26b6:	b2da      	uxtb	r2, r3
    26b8:	693b      	ldr	r3, [r7, #16]
    26ba:	761a      	strb	r2, [r3, #24]
		return;
    26bc:	e029      	b.n	2712 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    26be:	697b      	ldr	r3, [r7, #20]
    26c0:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    26c2:	693b      	ldr	r3, [r7, #16]
    26c4:	3314      	adds	r3, #20
    26c6:	4618      	mov	r0, r3
    26c8:	4b14      	ldr	r3, [pc, #80]	; (271c <timer_process_counted+0xb4>)
    26ca:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    26cc:	68bb      	ldr	r3, [r7, #8]
    26ce:	7c1b      	ldrb	r3, [r3, #16]
    26d0:	2b01      	cmp	r3, #1
    26d2:	d109      	bne.n	26e8 <timer_process_counted+0x80>
			tmp->time_label = time;
    26d4:	68bb      	ldr	r3, [r7, #8]
    26d6:	68fa      	ldr	r2, [r7, #12]
    26d8:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    26da:	693b      	ldr	r3, [r7, #16]
    26dc:	3314      	adds	r3, #20
    26de:	68fa      	ldr	r2, [r7, #12]
    26e0:	68b9      	ldr	r1, [r7, #8]
    26e2:	4618      	mov	r0, r3
    26e4:	4b0e      	ldr	r3, [pc, #56]	; (2720 <timer_process_counted+0xb8>)
    26e6:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    26e8:	693b      	ldr	r3, [r7, #16]
    26ea:	3314      	adds	r3, #20
    26ec:	4618      	mov	r0, r3
    26ee:	4b0a      	ldr	r3, [pc, #40]	; (2718 <timer_process_counted+0xb0>)
    26f0:	4798      	blx	r3
    26f2:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    26f4:	68bb      	ldr	r3, [r7, #8]
    26f6:	68db      	ldr	r3, [r3, #12]
    26f8:	68b8      	ldr	r0, [r7, #8]
    26fa:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    26fc:	697b      	ldr	r3, [r7, #20]
    26fe:	2b00      	cmp	r3, #0
    2700:	d007      	beq.n	2712 <timer_process_counted+0xaa>
    2702:	697b      	ldr	r3, [r7, #20]
    2704:	685b      	ldr	r3, [r3, #4]
    2706:	68fa      	ldr	r2, [r7, #12]
    2708:	1ad2      	subs	r2, r2, r3
    270a:	697b      	ldr	r3, [r7, #20]
    270c:	689b      	ldr	r3, [r3, #8]
    270e:	429a      	cmp	r2, r3
    2710:	d2d5      	bcs.n	26be <timer_process_counted+0x56>
	}
}
    2712:	3718      	adds	r7, #24
    2714:	46bd      	mov	sp, r7
    2716:	bd80      	pop	{r7, pc}
    2718:	00002285 	.word	0x00002285
    271c:	000031d1 	.word	0x000031d1
    2720:	000025b9 	.word	0x000025b9

00002724 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2724:	b480      	push	{r7}
    2726:	b085      	sub	sp, #20
    2728:	af00      	add	r7, sp, #0
    272a:	4603      	mov	r3, r0
    272c:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    272e:	2300      	movs	r3, #0
    2730:	73fb      	strb	r3, [r7, #15]
    2732:	e029      	b.n	2788 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2734:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2738:	4a19      	ldr	r2, [pc, #100]	; (27a0 <_usb_d_find_ep+0x7c>)
    273a:	015b      	lsls	r3, r3, #5
    273c:	4413      	add	r3, r2
    273e:	3301      	adds	r3, #1
    2740:	781b      	ldrb	r3, [r3, #0]
    2742:	79fa      	ldrb	r2, [r7, #7]
    2744:	429a      	cmp	r2, r3
    2746:	d102      	bne.n	274e <_usb_d_find_ep+0x2a>
			return i;
    2748:	f997 300f 	ldrsb.w	r3, [r7, #15]
    274c:	e022      	b.n	2794 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2752:	4a13      	ldr	r2, [pc, #76]	; (27a0 <_usb_d_find_ep+0x7c>)
    2754:	015b      	lsls	r3, r3, #5
    2756:	4413      	add	r3, r2
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	2b00      	cmp	r3, #0
    275c:	d10e      	bne.n	277c <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    275e:	79fb      	ldrb	r3, [r7, #7]
    2760:	f003 030f 	and.w	r3, r3, #15
    2764:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2768:	490d      	ldr	r1, [pc, #52]	; (27a0 <_usb_d_find_ep+0x7c>)
    276a:	0152      	lsls	r2, r2, #5
    276c:	440a      	add	r2, r1
    276e:	3201      	adds	r2, #1
    2770:	7812      	ldrb	r2, [r2, #0]
    2772:	4293      	cmp	r3, r2
    2774:	d102      	bne.n	277c <_usb_d_find_ep+0x58>
			return i;
    2776:	f997 300f 	ldrsb.w	r3, [r7, #15]
    277a:	e00b      	b.n	2794 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    277c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2780:	b2db      	uxtb	r3, r3
    2782:	3301      	adds	r3, #1
    2784:	b2db      	uxtb	r3, r3
    2786:	73fb      	strb	r3, [r7, #15]
    2788:	f997 300f 	ldrsb.w	r3, [r7, #15]
    278c:	2b03      	cmp	r3, #3
    278e:	ddd1      	ble.n	2734 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2790:	f04f 33ff 	mov.w	r3, #4294967295
}
    2794:	4618      	mov	r0, r3
    2796:	3714      	adds	r7, #20
    2798:	46bd      	mov	sp, r7
    279a:	f85d 7b04 	ldr.w	r7, [sp], #4
    279e:	4770      	bx	lr
    27a0:	20000584 	.word	0x20000584

000027a4 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	b088      	sub	sp, #32
    27a8:	af00      	add	r7, sp, #0
    27aa:	60ba      	str	r2, [r7, #8]
    27ac:	607b      	str	r3, [r7, #4]
    27ae:	4603      	mov	r3, r0
    27b0:	73fb      	strb	r3, [r7, #15]
    27b2:	460b      	mov	r3, r1
    27b4:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    27b6:	68bb      	ldr	r3, [r7, #8]
    27b8:	617b      	str	r3, [r7, #20]
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	61bb      	str	r3, [r7, #24]
    27be:	7bbb      	ldrb	r3, [r7, #14]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d004      	beq.n	27ce <_usb_d_trans+0x2a>
    27c4:	7bfb      	ldrb	r3, [r7, #15]
    27c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    27ca:	b2db      	uxtb	r3, r3
    27cc:	e003      	b.n	27d6 <_usb_d_trans+0x32>
    27ce:	7bfb      	ldrb	r3, [r7, #15]
    27d0:	f003 030f 	and.w	r3, r3, #15
    27d4:	b2db      	uxtb	r3, r3
    27d6:	773b      	strb	r3, [r7, #28]
    27d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    27dc:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    27de:	f107 0314 	add.w	r3, r7, #20
    27e2:	4618      	mov	r0, r3
    27e4:	4b03      	ldr	r3, [pc, #12]	; (27f4 <_usb_d_trans+0x50>)
    27e6:	4798      	blx	r3
    27e8:	4603      	mov	r3, r0
}
    27ea:	4618      	mov	r0, r3
    27ec:	3720      	adds	r7, #32
    27ee:	46bd      	mov	sp, r7
    27f0:	bd80      	pop	{r7, pc}
    27f2:	bf00      	nop
    27f4:	00009d71 	.word	0x00009d71

000027f8 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    27f8:	b480      	push	{r7}
    27fa:	b085      	sub	sp, #20
    27fc:	af00      	add	r7, sp, #0
    27fe:	60f8      	str	r0, [r7, #12]
    2800:	60b9      	str	r1, [r7, #8]
    2802:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2804:	2300      	movs	r3, #0
}
    2806:	4618      	mov	r0, r3
    2808:	3714      	adds	r7, #20
    280a:	46bd      	mov	sp, r7
    280c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2810:	4770      	bx	lr
	...

00002814 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2814:	b580      	push	{r7, lr}
    2816:	b086      	sub	sp, #24
    2818:	af00      	add	r7, sp, #0
    281a:	4603      	mov	r3, r0
    281c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    281e:	79fb      	ldrb	r3, [r7, #7]
    2820:	4618      	mov	r0, r3
    2822:	4b2a      	ldr	r3, [pc, #168]	; (28cc <usb_d_cb_trans_setup+0xb8>)
    2824:	4798      	blx	r3
    2826:	4603      	mov	r3, r0
    2828:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    282a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    282e:	015b      	lsls	r3, r3, #5
    2830:	4a27      	ldr	r2, [pc, #156]	; (28d0 <usb_d_cb_trans_setup+0xbc>)
    2832:	4413      	add	r3, r2
    2834:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2836:	693b      	ldr	r3, [r7, #16]
    2838:	330c      	adds	r3, #12
    283a:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    283c:	79fb      	ldrb	r3, [r7, #7]
    283e:	68f9      	ldr	r1, [r7, #12]
    2840:	4618      	mov	r0, r3
    2842:	4b24      	ldr	r3, [pc, #144]	; (28d4 <usb_d_cb_trans_setup+0xc0>)
    2844:	4798      	blx	r3
    2846:	4603      	mov	r3, r0
    2848:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    284a:	7afb      	ldrb	r3, [r7, #11]
    284c:	2b08      	cmp	r3, #8
    284e:	d00d      	beq.n	286c <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2850:	79fb      	ldrb	r3, [r7, #7]
    2852:	2101      	movs	r1, #1
    2854:	4618      	mov	r0, r3
    2856:	4b20      	ldr	r3, [pc, #128]	; (28d8 <usb_d_cb_trans_setup+0xc4>)
    2858:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    285a:	79fb      	ldrb	r3, [r7, #7]
    285c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2860:	b2db      	uxtb	r3, r3
    2862:	2101      	movs	r1, #1
    2864:	4618      	mov	r0, r3
    2866:	4b1c      	ldr	r3, [pc, #112]	; (28d8 <usb_d_cb_trans_setup+0xc4>)
    2868:	4798      	blx	r3
		return;
    286a:	e02b      	b.n	28c4 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    286c:	79fb      	ldrb	r3, [r7, #7]
    286e:	2100      	movs	r1, #0
    2870:	4618      	mov	r0, r3
    2872:	4b19      	ldr	r3, [pc, #100]	; (28d8 <usb_d_cb_trans_setup+0xc4>)
    2874:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2876:	79fb      	ldrb	r3, [r7, #7]
    2878:	f063 037f 	orn	r3, r3, #127	; 0x7f
    287c:	b2db      	uxtb	r3, r3
    287e:	2100      	movs	r1, #0
    2880:	4618      	mov	r0, r3
    2882:	4b15      	ldr	r3, [pc, #84]	; (28d8 <usb_d_cb_trans_setup+0xc4>)
    2884:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2886:	693b      	ldr	r3, [r7, #16]
    2888:	2201      	movs	r2, #1
    288a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    288c:	693b      	ldr	r3, [r7, #16]
    288e:	695b      	ldr	r3, [r3, #20]
    2890:	79fa      	ldrb	r2, [r7, #7]
    2892:	68f9      	ldr	r1, [r7, #12]
    2894:	4610      	mov	r0, r2
    2896:	4798      	blx	r3
    2898:	4603      	mov	r3, r0
    289a:	f083 0301 	eor.w	r3, r3, #1
    289e:	b2db      	uxtb	r3, r3
    28a0:	2b00      	cmp	r3, #0
    28a2:	d00f      	beq.n	28c4 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    28a4:	693b      	ldr	r3, [r7, #16]
    28a6:	2205      	movs	r2, #5
    28a8:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    28aa:	79fb      	ldrb	r3, [r7, #7]
    28ac:	2101      	movs	r1, #1
    28ae:	4618      	mov	r0, r3
    28b0:	4b09      	ldr	r3, [pc, #36]	; (28d8 <usb_d_cb_trans_setup+0xc4>)
    28b2:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    28b4:	79fb      	ldrb	r3, [r7, #7]
    28b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    28ba:	b2db      	uxtb	r3, r3
    28bc:	2101      	movs	r1, #1
    28be:	4618      	mov	r0, r3
    28c0:	4b05      	ldr	r3, [pc, #20]	; (28d8 <usb_d_cb_trans_setup+0xc4>)
    28c2:	4798      	blx	r3
	}
}
    28c4:	3718      	adds	r7, #24
    28c6:	46bd      	mov	sp, r7
    28c8:	bd80      	pop	{r7, pc}
    28ca:	bf00      	nop
    28cc:	00002725 	.word	0x00002725
    28d0:	20000584 	.word	0x20000584
    28d4:	00009cc9 	.word	0x00009cc9
    28d8:	00009b41 	.word	0x00009b41

000028dc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b084      	sub	sp, #16
    28e0:	af00      	add	r7, sp, #0
    28e2:	4603      	mov	r3, r0
    28e4:	6039      	str	r1, [r7, #0]
    28e6:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    28e8:	79fb      	ldrb	r3, [r7, #7]
    28ea:	4618      	mov	r0, r3
    28ec:	4b0d      	ldr	r3, [pc, #52]	; (2924 <usb_d_cb_trans_more+0x48>)
    28ee:	4798      	blx	r3
    28f0:	4603      	mov	r3, r0
    28f2:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    28f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    28f8:	015b      	lsls	r3, r3, #5
    28fa:	4a0b      	ldr	r2, [pc, #44]	; (2928 <usb_d_cb_trans_more+0x4c>)
    28fc:	4413      	add	r3, r2
    28fe:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2900:	68bb      	ldr	r3, [r7, #8]
    2902:	789b      	ldrb	r3, [r3, #2]
    2904:	2b03      	cmp	r3, #3
    2906:	d107      	bne.n	2918 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2908:	68bb      	ldr	r3, [r7, #8]
    290a:	699b      	ldr	r3, [r3, #24]
    290c:	79fa      	ldrb	r2, [r7, #7]
    290e:	6839      	ldr	r1, [r7, #0]
    2910:	4610      	mov	r0, r2
    2912:	4798      	blx	r3
    2914:	4603      	mov	r3, r0
    2916:	e000      	b.n	291a <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2918:	2300      	movs	r3, #0
}
    291a:	4618      	mov	r0, r3
    291c:	3710      	adds	r7, #16
    291e:	46bd      	mov	sp, r7
    2920:	bd80      	pop	{r7, pc}
    2922:	bf00      	nop
    2924:	00002725 	.word	0x00002725
    2928:	20000584 	.word	0x20000584

0000292c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    292c:	b590      	push	{r4, r7, lr}
    292e:	b087      	sub	sp, #28
    2930:	af02      	add	r7, sp, #8
    2932:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	789b      	ldrb	r3, [r3, #2]
    2938:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	7b1b      	ldrb	r3, [r3, #12]
    293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2942:	2b00      	cmp	r3, #0
    2944:	bf14      	ite	ne
    2946:	2301      	movne	r3, #1
    2948:	2300      	moveq	r3, #0
    294a:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    294c:	7bfb      	ldrb	r3, [r7, #15]
    294e:	2b03      	cmp	r3, #3
    2950:	d13a      	bne.n	29c8 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	69db      	ldr	r3, [r3, #28]
    2956:	687a      	ldr	r2, [r7, #4]
    2958:	7850      	ldrb	r0, [r2, #1]
    295a:	687a      	ldr	r2, [r7, #4]
    295c:	320c      	adds	r2, #12
    295e:	2101      	movs	r1, #1
    2960:	4798      	blx	r3
    2962:	4603      	mov	r3, r0
    2964:	737b      	strb	r3, [r7, #13]
		if (err) {
    2966:	7b7b      	ldrb	r3, [r7, #13]
    2968:	2b00      	cmp	r3, #0
    296a:	d015      	beq.n	2998 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	2205      	movs	r2, #5
    2970:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	2202      	movs	r2, #2
    2976:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2978:	7bbb      	ldrb	r3, [r7, #14]
    297a:	2b00      	cmp	r3, #0
    297c:	d002      	beq.n	2984 <usb_d_ctrl_trans_done+0x58>
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	785b      	ldrb	r3, [r3, #1]
    2982:	e004      	b.n	298e <usb_d_ctrl_trans_done+0x62>
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	785b      	ldrb	r3, [r3, #1]
    2988:	f063 037f 	orn	r3, r3, #127	; 0x7f
    298c:	b2db      	uxtb	r3, r3
    298e:	2101      	movs	r1, #1
    2990:	4618      	mov	r0, r3
    2992:	4b15      	ldr	r3, [pc, #84]	; (29e8 <usb_d_ctrl_trans_done+0xbc>)
    2994:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2996:	e022      	b.n	29de <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	2204      	movs	r2, #4
    299c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	7858      	ldrb	r0, [r3, #1]
    29a2:	7bbb      	ldrb	r3, [r7, #14]
    29a4:	2b00      	cmp	r3, #0
    29a6:	bf14      	ite	ne
    29a8:	2301      	movne	r3, #1
    29aa:	2300      	moveq	r3, #0
    29ac:	b2db      	uxtb	r3, r3
    29ae:	f083 0301 	eor.w	r3, r3, #1
    29b2:	b2db      	uxtb	r3, r3
    29b4:	f003 0301 	and.w	r3, r3, #1
    29b8:	b2d9      	uxtb	r1, r3
    29ba:	2301      	movs	r3, #1
    29bc:	9300      	str	r3, [sp, #0]
    29be:	2300      	movs	r3, #0
    29c0:	2200      	movs	r2, #0
    29c2:	4c0a      	ldr	r4, [pc, #40]	; (29ec <usb_d_ctrl_trans_done+0xc0>)
    29c4:	47a0      	blx	r4
}
    29c6:	e00a      	b.n	29de <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	69db      	ldr	r3, [r3, #28]
    29cc:	687a      	ldr	r2, [r7, #4]
    29ce:	7850      	ldrb	r0, [r2, #1]
    29d0:	687a      	ldr	r2, [r7, #4]
    29d2:	320c      	adds	r2, #12
    29d4:	2100      	movs	r1, #0
    29d6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	2202      	movs	r2, #2
    29dc:	709a      	strb	r2, [r3, #2]
}
    29de:	bf00      	nop
    29e0:	3714      	adds	r7, #20
    29e2:	46bd      	mov	sp, r7
    29e4:	bd90      	pop	{r4, r7, pc}
    29e6:	bf00      	nop
    29e8:	00009b41 	.word	0x00009b41
    29ec:	000027a5 	.word	0x000027a5

000029f0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	b086      	sub	sp, #24
    29f4:	af00      	add	r7, sp, #0
    29f6:	4603      	mov	r3, r0
    29f8:	60b9      	str	r1, [r7, #8]
    29fa:	607a      	str	r2, [r7, #4]
    29fc:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    29fe:	7bfb      	ldrb	r3, [r7, #15]
    2a00:	4618      	mov	r0, r3
    2a02:	4b2f      	ldr	r3, [pc, #188]	; (2ac0 <_usb_d_cb_trans_done+0xd0>)
    2a04:	4798      	blx	r3
    2a06:	4603      	mov	r3, r0
    2a08:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a0e:	015b      	lsls	r3, r3, #5
    2a10:	4a2c      	ldr	r2, [pc, #176]	; (2ac4 <_usb_d_cb_trans_done+0xd4>)
    2a12:	4413      	add	r3, r2
    2a14:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2a16:	68bb      	ldr	r3, [r7, #8]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d10e      	bne.n	2a3a <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2a1c:	693b      	ldr	r3, [r7, #16]
    2a1e:	2200      	movs	r2, #0
    2a20:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d103      	bne.n	2a32 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2a2a:	6938      	ldr	r0, [r7, #16]
    2a2c:	4b26      	ldr	r3, [pc, #152]	; (2ac8 <_usb_d_cb_trans_done+0xd8>)
    2a2e:	4798      	blx	r3
			return;
    2a30:	e043      	b.n	2aba <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2a32:	693b      	ldr	r3, [r7, #16]
    2a34:	2201      	movs	r2, #1
    2a36:	709a      	strb	r2, [r3, #2]
    2a38:	e038      	b.n	2aac <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2a3a:	68bb      	ldr	r3, [r7, #8]
    2a3c:	2b01      	cmp	r3, #1
    2a3e:	d113      	bne.n	2a68 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2a40:	693b      	ldr	r3, [r7, #16]
    2a42:	2202      	movs	r2, #2
    2a44:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a46:	693b      	ldr	r3, [r7, #16]
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d108      	bne.n	2a60 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2a4e:	693b      	ldr	r3, [r7, #16]
    2a50:	2202      	movs	r2, #2
    2a52:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2a54:	7bfb      	ldrb	r3, [r7, #15]
    2a56:	2100      	movs	r1, #0
    2a58:	4618      	mov	r0, r3
    2a5a:	4b1c      	ldr	r3, [pc, #112]	; (2acc <_usb_d_cb_trans_done+0xdc>)
    2a5c:	4798      	blx	r3
    2a5e:	e025      	b.n	2aac <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2a60:	693b      	ldr	r3, [r7, #16]
    2a62:	2205      	movs	r2, #5
    2a64:	709a      	strb	r2, [r3, #2]
    2a66:	e021      	b.n	2aac <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2a68:	68bb      	ldr	r3, [r7, #8]
    2a6a:	2b02      	cmp	r3, #2
    2a6c:	d10e      	bne.n	2a8c <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2a6e:	693b      	ldr	r3, [r7, #16]
    2a70:	2204      	movs	r2, #4
    2a72:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a74:	693b      	ldr	r3, [r7, #16]
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d103      	bne.n	2a84 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2a7c:	693b      	ldr	r3, [r7, #16]
    2a7e:	2202      	movs	r2, #2
    2a80:	709a      	strb	r2, [r3, #2]
			return;
    2a82:	e01a      	b.n	2aba <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2a84:	693b      	ldr	r3, [r7, #16]
    2a86:	2201      	movs	r2, #1
    2a88:	709a      	strb	r2, [r3, #2]
    2a8a:	e00f      	b.n	2aac <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2a8c:	68bb      	ldr	r3, [r7, #8]
    2a8e:	2b03      	cmp	r3, #3
    2a90:	d106      	bne.n	2aa0 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2a92:	693b      	ldr	r3, [r7, #16]
    2a94:	2200      	movs	r2, #0
    2a96:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2a98:	693b      	ldr	r3, [r7, #16]
    2a9a:	2205      	movs	r2, #5
    2a9c:	70da      	strb	r2, [r3, #3]
    2a9e:	e005      	b.n	2aac <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2aa0:	693b      	ldr	r3, [r7, #16]
    2aa2:	2206      	movs	r2, #6
    2aa4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2aa6:	693b      	ldr	r3, [r7, #16]
    2aa8:	2206      	movs	r2, #6
    2aaa:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2aac:	693b      	ldr	r3, [r7, #16]
    2aae:	69db      	ldr	r3, [r3, #28]
    2ab0:	693a      	ldr	r2, [r7, #16]
    2ab2:	78d1      	ldrb	r1, [r2, #3]
    2ab4:	687a      	ldr	r2, [r7, #4]
    2ab6:	7bf8      	ldrb	r0, [r7, #15]
    2ab8:	4798      	blx	r3
}
    2aba:	3718      	adds	r7, #24
    2abc:	46bd      	mov	sp, r7
    2abe:	bd80      	pop	{r7, pc}
    2ac0:	00002725 	.word	0x00002725
    2ac4:	20000584 	.word	0x20000584
    2ac8:	0000292d 	.word	0x0000292d
    2acc:	00009b41 	.word	0x00009b41

00002ad0 <usb_d_init>:

int32_t usb_d_init(void)
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b082      	sub	sp, #8
    2ad4:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2ad6:	4b21      	ldr	r3, [pc, #132]	; (2b5c <usb_d_init+0x8c>)
    2ad8:	4798      	blx	r3
    2ada:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	da01      	bge.n	2ae6 <usb_d_init+0x16>
		return rc;
    2ae2:	683b      	ldr	r3, [r7, #0]
    2ae4:	e036      	b.n	2b54 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2ae6:	2280      	movs	r2, #128	; 0x80
    2ae8:	2100      	movs	r1, #0
    2aea:	481d      	ldr	r0, [pc, #116]	; (2b60 <usb_d_init+0x90>)
    2aec:	4b1d      	ldr	r3, [pc, #116]	; (2b64 <usb_d_init+0x94>)
    2aee:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2af0:	2300      	movs	r3, #0
    2af2:	71fb      	strb	r3, [r7, #7]
    2af4:	e01e      	b.n	2b34 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2af6:	79fb      	ldrb	r3, [r7, #7]
    2af8:	4a19      	ldr	r2, [pc, #100]	; (2b60 <usb_d_init+0x90>)
    2afa:	015b      	lsls	r3, r3, #5
    2afc:	4413      	add	r3, r2
    2afe:	3301      	adds	r3, #1
    2b00:	22ff      	movs	r2, #255	; 0xff
    2b02:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2b04:	79fb      	ldrb	r3, [r7, #7]
    2b06:	4a16      	ldr	r2, [pc, #88]	; (2b60 <usb_d_init+0x90>)
    2b08:	015b      	lsls	r3, r3, #5
    2b0a:	4413      	add	r3, r2
    2b0c:	3314      	adds	r3, #20
    2b0e:	4a16      	ldr	r2, [pc, #88]	; (2b68 <usb_d_init+0x98>)
    2b10:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2b12:	79fb      	ldrb	r3, [r7, #7]
    2b14:	4a12      	ldr	r2, [pc, #72]	; (2b60 <usb_d_init+0x90>)
    2b16:	015b      	lsls	r3, r3, #5
    2b18:	4413      	add	r3, r2
    2b1a:	3318      	adds	r3, #24
    2b1c:	4a12      	ldr	r2, [pc, #72]	; (2b68 <usb_d_init+0x98>)
    2b1e:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2b20:	79fb      	ldrb	r3, [r7, #7]
    2b22:	4a0f      	ldr	r2, [pc, #60]	; (2b60 <usb_d_init+0x90>)
    2b24:	015b      	lsls	r3, r3, #5
    2b26:	4413      	add	r3, r2
    2b28:	331c      	adds	r3, #28
    2b2a:	4a0f      	ldr	r2, [pc, #60]	; (2b68 <usb_d_init+0x98>)
    2b2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b2e:	79fb      	ldrb	r3, [r7, #7]
    2b30:	3301      	adds	r3, #1
    2b32:	71fb      	strb	r3, [r7, #7]
    2b34:	79fb      	ldrb	r3, [r7, #7]
    2b36:	2b03      	cmp	r3, #3
    2b38:	d9dd      	bls.n	2af6 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2b3a:	490c      	ldr	r1, [pc, #48]	; (2b6c <usb_d_init+0x9c>)
    2b3c:	2000      	movs	r0, #0
    2b3e:	4b0c      	ldr	r3, [pc, #48]	; (2b70 <usb_d_init+0xa0>)
    2b40:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2b42:	490c      	ldr	r1, [pc, #48]	; (2b74 <usb_d_init+0xa4>)
    2b44:	2001      	movs	r0, #1
    2b46:	4b0a      	ldr	r3, [pc, #40]	; (2b70 <usb_d_init+0xa0>)
    2b48:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2b4a:	490b      	ldr	r1, [pc, #44]	; (2b78 <usb_d_init+0xa8>)
    2b4c:	2002      	movs	r0, #2
    2b4e:	4b08      	ldr	r3, [pc, #32]	; (2b70 <usb_d_init+0xa0>)
    2b50:	4798      	blx	r3
	return ERR_NONE;
    2b52:	2300      	movs	r3, #0
}
    2b54:	4618      	mov	r0, r3
    2b56:	3708      	adds	r7, #8
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd80      	pop	{r7, pc}
    2b5c:	00009389 	.word	0x00009389
    2b60:	20000584 	.word	0x20000584
    2b64:	0000d229 	.word	0x0000d229
    2b68:	000027f9 	.word	0x000027f9
    2b6c:	00002815 	.word	0x00002815
    2b70:	00009fd1 	.word	0x00009fd1
    2b74:	000028dd 	.word	0x000028dd
    2b78:	000029f1 	.word	0x000029f1

00002b7c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b082      	sub	sp, #8
    2b80:	af00      	add	r7, sp, #0
    2b82:	4603      	mov	r3, r0
    2b84:	6039      	str	r1, [r7, #0]
    2b86:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2b88:	79fb      	ldrb	r3, [r7, #7]
    2b8a:	6839      	ldr	r1, [r7, #0]
    2b8c:	4618      	mov	r0, r3
    2b8e:	4b03      	ldr	r3, [pc, #12]	; (2b9c <usb_d_register_callback+0x20>)
    2b90:	4798      	blx	r3
}
    2b92:	bf00      	nop
    2b94:	3708      	adds	r7, #8
    2b96:	46bd      	mov	sp, r7
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	bf00      	nop
    2b9c:	00009f89 	.word	0x00009f89

00002ba0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2ba0:	b580      	push	{r7, lr}
    2ba2:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2ba4:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <usb_d_enable+0x10>)
    2ba6:	4798      	blx	r3
    2ba8:	4603      	mov	r3, r0
}
    2baa:	4618      	mov	r0, r3
    2bac:	bd80      	pop	{r7, pc}
    2bae:	bf00      	nop
    2bb0:	00009479 	.word	0x00009479

00002bb4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2bb8:	4b01      	ldr	r3, [pc, #4]	; (2bc0 <usb_d_attach+0xc>)
    2bba:	4798      	blx	r3
}
    2bbc:	bf00      	nop
    2bbe:	bd80      	pop	{r7, pc}
    2bc0:	000094fd 	.word	0x000094fd

00002bc4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	b082      	sub	sp, #8
    2bc8:	af00      	add	r7, sp, #0
    2bca:	4603      	mov	r3, r0
    2bcc:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2bce:	79fb      	ldrb	r3, [r7, #7]
    2bd0:	4618      	mov	r0, r3
    2bd2:	4b03      	ldr	r3, [pc, #12]	; (2be0 <usb_d_set_address+0x1c>)
    2bd4:	4798      	blx	r3
}
    2bd6:	bf00      	nop
    2bd8:	3708      	adds	r7, #8
    2bda:	46bd      	mov	sp, r7
    2bdc:	bd80      	pop	{r7, pc}
    2bde:	bf00      	nop
    2be0:	00009511 	.word	0x00009511

00002be4 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2be4:	b580      	push	{r7, lr}
    2be6:	b082      	sub	sp, #8
    2be8:	af00      	add	r7, sp, #0
    2bea:	4603      	mov	r3, r0
    2bec:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2bee:	79fb      	ldrb	r3, [r7, #7]
    2bf0:	b29b      	uxth	r3, r3
    2bf2:	461a      	mov	r2, r3
    2bf4:	2100      	movs	r1, #0
    2bf6:	2000      	movs	r0, #0
    2bf8:	4b03      	ldr	r3, [pc, #12]	; (2c08 <usb_d_ep0_init+0x24>)
    2bfa:	4798      	blx	r3
    2bfc:	4603      	mov	r3, r0
}
    2bfe:	4618      	mov	r0, r3
    2c00:	3708      	adds	r7, #8
    2c02:	46bd      	mov	sp, r7
    2c04:	bd80      	pop	{r7, pc}
    2c06:	bf00      	nop
    2c08:	00002c0d 	.word	0x00002c0d

00002c0c <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b086      	sub	sp, #24
    2c10:	af00      	add	r7, sp, #0
    2c12:	4603      	mov	r3, r0
    2c14:	71fb      	strb	r3, [r7, #7]
    2c16:	460b      	mov	r3, r1
    2c18:	71bb      	strb	r3, [r7, #6]
    2c1a:	4613      	mov	r3, r2
    2c1c:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c1e:	79fb      	ldrb	r3, [r7, #7]
    2c20:	4618      	mov	r0, r3
    2c22:	4b1e      	ldr	r3, [pc, #120]	; (2c9c <usb_d_ep_init+0x90>)
    2c24:	4798      	blx	r3
    2c26:	4603      	mov	r3, r0
    2c28:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c2e:	015b      	lsls	r3, r3, #5
    2c30:	4a1b      	ldr	r2, [pc, #108]	; (2ca0 <usb_d_ep_init+0x94>)
    2c32:	4413      	add	r3, r2
    2c34:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	db02      	blt.n	2c44 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2c3e:	f06f 0313 	mvn.w	r3, #19
    2c42:	e027      	b.n	2c94 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2c44:	20ff      	movs	r0, #255	; 0xff
    2c46:	4b15      	ldr	r3, [pc, #84]	; (2c9c <usb_d_ep_init+0x90>)
    2c48:	4798      	blx	r3
    2c4a:	4603      	mov	r3, r0
    2c4c:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c52:	2b00      	cmp	r3, #0
    2c54:	da02      	bge.n	2c5c <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2c56:	f06f 0314 	mvn.w	r3, #20
    2c5a:	e01b      	b.n	2c94 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c60:	015b      	lsls	r3, r3, #5
    2c62:	4a0f      	ldr	r2, [pc, #60]	; (2ca0 <usb_d_ep_init+0x94>)
    2c64:	4413      	add	r3, r2
    2c66:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2c68:	88ba      	ldrh	r2, [r7, #4]
    2c6a:	79b9      	ldrb	r1, [r7, #6]
    2c6c:	79fb      	ldrb	r3, [r7, #7]
    2c6e:	4618      	mov	r0, r3
    2c70:	4b0c      	ldr	r3, [pc, #48]	; (2ca4 <usb_d_ep_init+0x98>)
    2c72:	4798      	blx	r3
    2c74:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2c76:	68fb      	ldr	r3, [r7, #12]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	da01      	bge.n	2c80 <usb_d_ep_init+0x74>
		return rc;
    2c7c:	68fb      	ldr	r3, [r7, #12]
    2c7e:	e009      	b.n	2c94 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2c80:	693b      	ldr	r3, [r7, #16]
    2c82:	79fa      	ldrb	r2, [r7, #7]
    2c84:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2c86:	79bb      	ldrb	r3, [r7, #6]
    2c88:	f003 0303 	and.w	r3, r3, #3
    2c8c:	b2da      	uxtb	r2, r3
    2c8e:	693b      	ldr	r3, [r7, #16]
    2c90:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2c92:	2300      	movs	r3, #0
}
    2c94:	4618      	mov	r0, r3
    2c96:	3718      	adds	r7, #24
    2c98:	46bd      	mov	sp, r7
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	00002725 	.word	0x00002725
    2ca0:	20000584 	.word	0x20000584
    2ca4:	000095b1 	.word	0x000095b1

00002ca8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	4603      	mov	r3, r0
    2cb0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2cb2:	79fb      	ldrb	r3, [r7, #7]
    2cb4:	4618      	mov	r0, r3
    2cb6:	4b0d      	ldr	r3, [pc, #52]	; (2cec <usb_d_ep_deinit+0x44>)
    2cb8:	4798      	blx	r3
    2cba:	4603      	mov	r3, r0
    2cbc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2cc2:	015b      	lsls	r3, r3, #5
    2cc4:	4a0a      	ldr	r2, [pc, #40]	; (2cf0 <usb_d_ep_deinit+0x48>)
    2cc6:	4413      	add	r3, r2
    2cc8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	db07      	blt.n	2ce2 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2cd2:	79fb      	ldrb	r3, [r7, #7]
    2cd4:	4618      	mov	r0, r3
    2cd6:	4b07      	ldr	r3, [pc, #28]	; (2cf4 <usb_d_ep_deinit+0x4c>)
    2cd8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2cda:	68bb      	ldr	r3, [r7, #8]
    2cdc:	22ff      	movs	r2, #255	; 0xff
    2cde:	705a      	strb	r2, [r3, #1]
    2ce0:	e000      	b.n	2ce4 <usb_d_ep_deinit+0x3c>
		return;
    2ce2:	bf00      	nop
}
    2ce4:	3710      	adds	r7, #16
    2ce6:	46bd      	mov	sp, r7
    2ce8:	bd80      	pop	{r7, pc}
    2cea:	bf00      	nop
    2cec:	00002725 	.word	0x00002725
    2cf0:	20000584 	.word	0x20000584
    2cf4:	000096e5 	.word	0x000096e5

00002cf8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b086      	sub	sp, #24
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	4603      	mov	r3, r0
    2d00:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d02:	79fb      	ldrb	r3, [r7, #7]
    2d04:	4618      	mov	r0, r3
    2d06:	4b15      	ldr	r3, [pc, #84]	; (2d5c <usb_d_ep_enable+0x64>)
    2d08:	4798      	blx	r3
    2d0a:	4603      	mov	r3, r0
    2d0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d12:	015b      	lsls	r3, r3, #5
    2d14:	4a12      	ldr	r2, [pc, #72]	; (2d60 <usb_d_ep_enable+0x68>)
    2d16:	4413      	add	r3, r2
    2d18:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	da02      	bge.n	2d28 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2d22:	f06f 0311 	mvn.w	r3, #17
    2d26:	e014      	b.n	2d52 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2d28:	693b      	ldr	r3, [r7, #16]
    2d2a:	781b      	ldrb	r3, [r3, #0]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d101      	bne.n	2d34 <usb_d_ep_enable+0x3c>
    2d30:	2202      	movs	r2, #2
    2d32:	e000      	b.n	2d36 <usb_d_ep_enable+0x3e>
    2d34:	2201      	movs	r2, #1
    2d36:	693b      	ldr	r3, [r7, #16]
    2d38:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2d3a:	79fb      	ldrb	r3, [r7, #7]
    2d3c:	4618      	mov	r0, r3
    2d3e:	4b09      	ldr	r3, [pc, #36]	; (2d64 <usb_d_ep_enable+0x6c>)
    2d40:	4798      	blx	r3
    2d42:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2d44:	68fb      	ldr	r3, [r7, #12]
    2d46:	2b00      	cmp	r3, #0
    2d48:	da02      	bge.n	2d50 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2d4a:	693b      	ldr	r3, [r7, #16]
    2d4c:	2200      	movs	r2, #0
    2d4e:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2d50:	68fb      	ldr	r3, [r7, #12]
}
    2d52:	4618      	mov	r0, r3
    2d54:	3718      	adds	r7, #24
    2d56:	46bd      	mov	sp, r7
    2d58:	bd80      	pop	{r7, pc}
    2d5a:	bf00      	nop
    2d5c:	00002725 	.word	0x00002725
    2d60:	20000584 	.word	0x20000584
    2d64:	000097c9 	.word	0x000097c9

00002d68 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2d68:	b590      	push	{r4, r7, lr}
    2d6a:	b08d      	sub	sp, #52	; 0x34
    2d6c:	af02      	add	r7, sp, #8
    2d6e:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	7a1b      	ldrb	r3, [r3, #8]
    2d74:	4618      	mov	r0, r3
    2d76:	4b51      	ldr	r3, [pc, #324]	; (2ebc <usb_d_ep_transfer+0x154>)
    2d78:	4798      	blx	r3
    2d7a:	4603      	mov	r3, r0
    2d7c:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2d82:	015b      	lsls	r3, r3, #5
    2d84:	4a4e      	ldr	r2, [pc, #312]	; (2ec0 <usb_d_ep_transfer+0x158>)
    2d86:	4413      	add	r3, r2
    2d88:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	7a1b      	ldrb	r3, [r3, #8]
    2d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2d92:	2b00      	cmp	r3, #0
    2d94:	bf14      	ite	ne
    2d96:	2301      	movne	r3, #1
    2d98:	2300      	moveq	r3, #0
    2d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	7a5b      	ldrb	r3, [r3, #9]
    2da2:	2b00      	cmp	r3, #0
    2da4:	bf14      	ite	ne
    2da6:	2301      	movne	r3, #1
    2da8:	2300      	moveq	r3, #0
    2daa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	685b      	ldr	r3, [r3, #4]
    2db2:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2db4:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2db8:	2b00      	cmp	r3, #0
    2dba:	da02      	bge.n	2dc2 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2dbc:	f06f 0311 	mvn.w	r3, #17
    2dc0:	e077      	b.n	2eb2 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2dc2:	f107 0308 	add.w	r3, r7, #8
    2dc6:	4618      	mov	r0, r3
    2dc8:	4b3e      	ldr	r3, [pc, #248]	; (2ec4 <usb_d_ep_transfer+0x15c>)
    2dca:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2dcc:	69bb      	ldr	r3, [r7, #24]
    2dce:	789b      	ldrb	r3, [r3, #2]
    2dd0:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2dd2:	7bfb      	ldrb	r3, [r7, #15]
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	2b01      	cmp	r3, #1
    2dd8:	d10c      	bne.n	2df4 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2dda:	69bb      	ldr	r3, [r7, #24]
    2ddc:	2203      	movs	r2, #3
    2dde:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2de0:	f107 0308 	add.w	r3, r7, #8
    2de4:	4618      	mov	r0, r3
    2de6:	4b38      	ldr	r3, [pc, #224]	; (2ec8 <usb_d_ep_transfer+0x160>)
    2de8:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2dea:	69bb      	ldr	r3, [r7, #24]
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d151      	bne.n	2e96 <usb_d_ep_transfer+0x12e>
    2df2:	e017      	b.n	2e24 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2df4:	f107 0308 	add.w	r3, r7, #8
    2df8:	4618      	mov	r0, r3
    2dfa:	4b33      	ldr	r3, [pc, #204]	; (2ec8 <usb_d_ep_transfer+0x160>)
    2dfc:	4798      	blx	r3
		switch (state) {
    2dfe:	7bfb      	ldrb	r3, [r7, #15]
    2e00:	b2db      	uxtb	r3, r3
    2e02:	2b05      	cmp	r3, #5
    2e04:	d004      	beq.n	2e10 <usb_d_ep_transfer+0xa8>
    2e06:	2b06      	cmp	r3, #6
    2e08:	d004      	beq.n	2e14 <usb_d_ep_transfer+0xac>
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d005      	beq.n	2e1a <usb_d_ep_transfer+0xb2>
    2e0e:	e007      	b.n	2e20 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2e10:	2302      	movs	r3, #2
    2e12:	e04e      	b.n	2eb2 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2e14:	f06f 030f 	mvn.w	r3, #15
    2e18:	e04b      	b.n	2eb2 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2e1a:	f06f 0312 	mvn.w	r3, #18
    2e1e:	e048      	b.n	2eb2 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2e20:	2301      	movs	r3, #1
    2e22:	e046      	b.n	2eb2 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2e24:	69bb      	ldr	r3, [r7, #24]
    2e26:	7c9b      	ldrb	r3, [r3, #18]
    2e28:	b29a      	uxth	r2, r3
    2e2a:	69bb      	ldr	r3, [r7, #24]
    2e2c:	7cdb      	ldrb	r3, [r3, #19]
    2e2e:	b29b      	uxth	r3, r3
    2e30:	021b      	lsls	r3, r3, #8
    2e32:	b29b      	uxth	r3, r3
    2e34:	4413      	add	r3, r2
    2e36:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2e38:	8afb      	ldrh	r3, [r7, #22]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d10b      	bne.n	2e56 <usb_d_ep_transfer+0xee>
			dir                 = true;
    2e3e:	2301      	movs	r3, #1
    2e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2e44:	2300      	movs	r3, #0
    2e46:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2e48:	2301      	movs	r3, #1
    2e4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2e4e:	69bb      	ldr	r3, [r7, #24]
    2e50:	2204      	movs	r2, #4
    2e52:	709a      	strb	r2, [r3, #2]
    2e54:	e01f      	b.n	2e96 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2e56:	69bb      	ldr	r3, [r7, #24]
    2e58:	7b1b      	ldrb	r3, [r3, #12]
    2e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2e5e:	2b00      	cmp	r3, #0
    2e60:	bf14      	ite	ne
    2e62:	2301      	movne	r3, #1
    2e64:	2300      	moveq	r3, #0
    2e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2e6a:	8afa      	ldrh	r2, [r7, #22]
    2e6c:	6a3b      	ldr	r3, [r7, #32]
    2e6e:	429a      	cmp	r2, r3
    2e70:	d201      	bcs.n	2e76 <usb_d_ep_transfer+0x10e>
				len = req_len;
    2e72:	8afb      	ldrh	r3, [r7, #22]
    2e74:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d008      	beq.n	2e90 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2e7e:	8afa      	ldrh	r2, [r7, #22]
    2e80:	6a3b      	ldr	r3, [r7, #32]
    2e82:	429a      	cmp	r2, r3
    2e84:	bf8c      	ite	hi
    2e86:	2301      	movhi	r3, #1
    2e88:	2300      	movls	r3, #0
    2e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2e8e:	e002      	b.n	2e96 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2e90:	2300      	movs	r3, #0
    2e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	7a18      	ldrb	r0, [r3, #8]
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	681a      	ldr	r2, [r3, #0]
    2e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2ea2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2ea6:	9300      	str	r3, [sp, #0]
    2ea8:	6a3b      	ldr	r3, [r7, #32]
    2eaa:	4c08      	ldr	r4, [pc, #32]	; (2ecc <usb_d_ep_transfer+0x164>)
    2eac:	47a0      	blx	r4
    2eae:	6138      	str	r0, [r7, #16]
	return rc;
    2eb0:	693b      	ldr	r3, [r7, #16]
}
    2eb2:	4618      	mov	r0, r3
    2eb4:	372c      	adds	r7, #44	; 0x2c
    2eb6:	46bd      	mov	sp, r7
    2eb8:	bd90      	pop	{r4, r7, pc}
    2eba:	bf00      	nop
    2ebc:	00002725 	.word	0x00002725
    2ec0:	20000584 	.word	0x20000584
    2ec4:	0000a73d 	.word	0x0000a73d
    2ec8:	0000a763 	.word	0x0000a763
    2ecc:	000027a5 	.word	0x000027a5

00002ed0 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b084      	sub	sp, #16
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	4603      	mov	r3, r0
    2ed8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2eda:	79fb      	ldrb	r3, [r7, #7]
    2edc:	4618      	mov	r0, r3
    2ede:	4b0e      	ldr	r3, [pc, #56]	; (2f18 <usb_d_ep_abort+0x48>)
    2ee0:	4798      	blx	r3
    2ee2:	4603      	mov	r3, r0
    2ee4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2eea:	015b      	lsls	r3, r3, #5
    2eec:	4a0b      	ldr	r2, [pc, #44]	; (2f1c <usb_d_ep_abort+0x4c>)
    2eee:	4413      	add	r3, r2
    2ef0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	db0a      	blt.n	2f10 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    2efa:	79fb      	ldrb	r3, [r7, #7]
    2efc:	4618      	mov	r0, r3
    2efe:	4b08      	ldr	r3, [pc, #32]	; (2f20 <usb_d_ep_abort+0x50>)
    2f00:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2f02:	68bb      	ldr	r3, [r7, #8]
    2f04:	2201      	movs	r2, #1
    2f06:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    2f08:	68bb      	ldr	r3, [r7, #8]
    2f0a:	2204      	movs	r2, #4
    2f0c:	70da      	strb	r2, [r3, #3]
    2f0e:	e000      	b.n	2f12 <usb_d_ep_abort+0x42>
		return;
    2f10:	bf00      	nop
}
    2f12:	3710      	adds	r7, #16
    2f14:	46bd      	mov	sp, r7
    2f16:	bd80      	pop	{r7, pc}
    2f18:	00002725 	.word	0x00002725
    2f1c:	20000584 	.word	0x20000584
    2f20:	00009f35 	.word	0x00009f35

00002f24 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2f24:	b580      	push	{r7, lr}
    2f26:	b086      	sub	sp, #24
    2f28:	af00      	add	r7, sp, #0
    2f2a:	4603      	mov	r3, r0
    2f2c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f2e:	79fb      	ldrb	r3, [r7, #7]
    2f30:	4618      	mov	r0, r3
    2f32:	4b1a      	ldr	r3, [pc, #104]	; (2f9c <_usb_d_ep_halt_clr+0x78>)
    2f34:	4798      	blx	r3
    2f36:	4603      	mov	r3, r0
    2f38:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f3e:	015b      	lsls	r3, r3, #5
    2f40:	4a17      	ldr	r2, [pc, #92]	; (2fa0 <_usb_d_ep_halt_clr+0x7c>)
    2f42:	4413      	add	r3, r2
    2f44:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	da02      	bge.n	2f54 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2f4e:	f06f 0311 	mvn.w	r3, #17
    2f52:	e01f      	b.n	2f94 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2f54:	79fb      	ldrb	r3, [r7, #7]
    2f56:	2102      	movs	r1, #2
    2f58:	4618      	mov	r0, r3
    2f5a:	4b12      	ldr	r3, [pc, #72]	; (2fa4 <_usb_d_ep_halt_clr+0x80>)
    2f5c:	4798      	blx	r3
    2f5e:	4603      	mov	r3, r0
    2f60:	2b00      	cmp	r3, #0
    2f62:	d016      	beq.n	2f92 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2f64:	79fb      	ldrb	r3, [r7, #7]
    2f66:	2100      	movs	r1, #0
    2f68:	4618      	mov	r0, r3
    2f6a:	4b0e      	ldr	r3, [pc, #56]	; (2fa4 <_usb_d_ep_halt_clr+0x80>)
    2f6c:	4798      	blx	r3
    2f6e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2f70:	68fb      	ldr	r3, [r7, #12]
    2f72:	2b00      	cmp	r3, #0
    2f74:	da01      	bge.n	2f7a <_usb_d_ep_halt_clr+0x56>
			return rc;
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	e00c      	b.n	2f94 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2f7a:	693b      	ldr	r3, [r7, #16]
    2f7c:	2201      	movs	r2, #1
    2f7e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2f80:	693b      	ldr	r3, [r7, #16]
    2f82:	2203      	movs	r2, #3
    2f84:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2f86:	693b      	ldr	r3, [r7, #16]
    2f88:	69db      	ldr	r3, [r3, #28]
    2f8a:	79f8      	ldrb	r0, [r7, #7]
    2f8c:	2200      	movs	r2, #0
    2f8e:	2103      	movs	r1, #3
    2f90:	4798      	blx	r3
	}
	return ERR_NONE;
    2f92:	2300      	movs	r3, #0
}
    2f94:	4618      	mov	r0, r3
    2f96:	3718      	adds	r7, #24
    2f98:	46bd      	mov	sp, r7
    2f9a:	bd80      	pop	{r7, pc}
    2f9c:	00002725 	.word	0x00002725
    2fa0:	20000584 	.word	0x20000584
    2fa4:	00009b41 	.word	0x00009b41

00002fa8 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2fa8:	b580      	push	{r7, lr}
    2faa:	b082      	sub	sp, #8
    2fac:	af00      	add	r7, sp, #0
    2fae:	4603      	mov	r3, r0
    2fb0:	460a      	mov	r2, r1
    2fb2:	71fb      	strb	r3, [r7, #7]
    2fb4:	4613      	mov	r3, r2
    2fb6:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2fb8:	79bb      	ldrb	r3, [r7, #6]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d105      	bne.n	2fca <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2fbe:	79fb      	ldrb	r3, [r7, #7]
    2fc0:	4618      	mov	r0, r3
    2fc2:	4b0c      	ldr	r3, [pc, #48]	; (2ff4 <usb_d_ep_halt+0x4c>)
    2fc4:	4798      	blx	r3
    2fc6:	4603      	mov	r3, r0
    2fc8:	e00f      	b.n	2fea <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2fca:	79bb      	ldrb	r3, [r7, #6]
    2fcc:	2b01      	cmp	r3, #1
    2fce:	d106      	bne.n	2fde <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2fd0:	79fb      	ldrb	r3, [r7, #7]
    2fd2:	2101      	movs	r1, #1
    2fd4:	4618      	mov	r0, r3
    2fd6:	4b08      	ldr	r3, [pc, #32]	; (2ff8 <usb_d_ep_halt+0x50>)
    2fd8:	4798      	blx	r3
    2fda:	4603      	mov	r3, r0
    2fdc:	e005      	b.n	2fea <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2fde:	79fb      	ldrb	r3, [r7, #7]
    2fe0:	2102      	movs	r1, #2
    2fe2:	4618      	mov	r0, r3
    2fe4:	4b04      	ldr	r3, [pc, #16]	; (2ff8 <usb_d_ep_halt+0x50>)
    2fe6:	4798      	blx	r3
    2fe8:	4603      	mov	r3, r0
	}
}
    2fea:	4618      	mov	r0, r3
    2fec:	3708      	adds	r7, #8
    2fee:	46bd      	mov	sp, r7
    2ff0:	bd80      	pop	{r7, pc}
    2ff2:	bf00      	nop
    2ff4:	00002f25 	.word	0x00002f25
    2ff8:	00009b41 	.word	0x00009b41

00002ffc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	b086      	sub	sp, #24
    3000:	af00      	add	r7, sp, #0
    3002:	4603      	mov	r3, r0
    3004:	603a      	str	r2, [r7, #0]
    3006:	71fb      	strb	r3, [r7, #7]
    3008:	460b      	mov	r3, r1
    300a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    300c:	79fb      	ldrb	r3, [r7, #7]
    300e:	4618      	mov	r0, r3
    3010:	4b16      	ldr	r3, [pc, #88]	; (306c <usb_d_ep_register_callback+0x70>)
    3012:	4798      	blx	r3
    3014:	4603      	mov	r3, r0
    3016:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3018:	f997 3017 	ldrsb.w	r3, [r7, #23]
    301c:	015b      	lsls	r3, r3, #5
    301e:	4a14      	ldr	r2, [pc, #80]	; (3070 <usb_d_ep_register_callback+0x74>)
    3020:	4413      	add	r3, r2
    3022:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3024:	683b      	ldr	r3, [r7, #0]
    3026:	2b00      	cmp	r3, #0
    3028:	d001      	beq.n	302e <usb_d_ep_register_callback+0x32>
    302a:	683b      	ldr	r3, [r7, #0]
    302c:	e000      	b.n	3030 <usb_d_ep_register_callback+0x34>
    302e:	4b11      	ldr	r3, [pc, #68]	; (3074 <usb_d_ep_register_callback+0x78>)
    3030:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3032:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3036:	2b00      	cmp	r3, #0
    3038:	db13      	blt.n	3062 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    303a:	79bb      	ldrb	r3, [r7, #6]
    303c:	2b01      	cmp	r3, #1
    303e:	d008      	beq.n	3052 <usb_d_ep_register_callback+0x56>
    3040:	2b02      	cmp	r3, #2
    3042:	d00a      	beq.n	305a <usb_d_ep_register_callback+0x5e>
    3044:	2b00      	cmp	r3, #0
    3046:	d000      	beq.n	304a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3048:	e00c      	b.n	3064 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    304a:	693b      	ldr	r3, [r7, #16]
    304c:	68fa      	ldr	r2, [r7, #12]
    304e:	615a      	str	r2, [r3, #20]
		break;
    3050:	e008      	b.n	3064 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3052:	693b      	ldr	r3, [r7, #16]
    3054:	68fa      	ldr	r2, [r7, #12]
    3056:	619a      	str	r2, [r3, #24]
		break;
    3058:	e004      	b.n	3064 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    305a:	693b      	ldr	r3, [r7, #16]
    305c:	68fa      	ldr	r2, [r7, #12]
    305e:	61da      	str	r2, [r3, #28]
		break;
    3060:	e000      	b.n	3064 <usb_d_ep_register_callback+0x68>
		return;
    3062:	bf00      	nop
	}
}
    3064:	3718      	adds	r7, #24
    3066:	46bd      	mov	sp, r7
    3068:	bd80      	pop	{r7, pc}
    306a:	bf00      	nop
    306c:	00002725 	.word	0x00002725
    3070:	20000584 	.word	0x20000584
    3074:	000027f9 	.word	0x000027f9

00003078 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3078:	b480      	push	{r7}
    307a:	b085      	sub	sp, #20
    307c:	af00      	add	r7, sp, #0
    307e:	4603      	mov	r3, r0
    3080:	60b9      	str	r1, [r7, #8]
    3082:	607a      	str	r2, [r7, #4]
    3084:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3086:	7bfb      	ldrb	r3, [r7, #15]
    3088:	f083 0301 	eor.w	r3, r3, #1
    308c:	b2db      	uxtb	r3, r3
    308e:	2b00      	cmp	r3, #0
    3090:	d000      	beq.n	3094 <assert+0x1c>
		__asm("BKPT #0");
    3092:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3094:	bf00      	nop
    3096:	3714      	adds	r7, #20
    3098:	46bd      	mov	sp, r7
    309a:	f85d 7b04 	ldr.w	r7, [sp], #4
    309e:	4770      	bx	lr

000030a0 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    30a0:	b480      	push	{r7}
    30a2:	b085      	sub	sp, #20
    30a4:	af00      	add	r7, sp, #0
    30a6:	6078      	str	r0, [r7, #4]
    30a8:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    30aa:	687b      	ldr	r3, [r7, #4]
    30ac:	681b      	ldr	r3, [r3, #0]
    30ae:	60fb      	str	r3, [r7, #12]
    30b0:	e008      	b.n	30c4 <is_list_element+0x24>
		if (it == element) {
    30b2:	68fa      	ldr	r2, [r7, #12]
    30b4:	683b      	ldr	r3, [r7, #0]
    30b6:	429a      	cmp	r2, r3
    30b8:	d101      	bne.n	30be <is_list_element+0x1e>
			return true;
    30ba:	2301      	movs	r3, #1
    30bc:	e006      	b.n	30cc <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	681b      	ldr	r3, [r3, #0]
    30c2:	60fb      	str	r3, [r7, #12]
    30c4:	68fb      	ldr	r3, [r7, #12]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d1f3      	bne.n	30b2 <is_list_element+0x12>
		}
	}

	return false;
    30ca:	2300      	movs	r3, #0
}
    30cc:	4618      	mov	r0, r3
    30ce:	3714      	adds	r7, #20
    30d0:	46bd      	mov	sp, r7
    30d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30d6:	4770      	bx	lr

000030d8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b082      	sub	sp, #8
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
    30e0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    30e2:	6839      	ldr	r1, [r7, #0]
    30e4:	6878      	ldr	r0, [r7, #4]
    30e6:	4b0f      	ldr	r3, [pc, #60]	; (3124 <list_insert_as_head+0x4c>)
    30e8:	4798      	blx	r3
    30ea:	4603      	mov	r3, r0
    30ec:	2b00      	cmp	r3, #0
    30ee:	bf14      	ite	ne
    30f0:	2301      	movne	r3, #1
    30f2:	2300      	moveq	r3, #0
    30f4:	b2db      	uxtb	r3, r3
    30f6:	f083 0301 	eor.w	r3, r3, #1
    30fa:	b2db      	uxtb	r3, r3
    30fc:	f003 0301 	and.w	r3, r3, #1
    3100:	b2db      	uxtb	r3, r3
    3102:	2239      	movs	r2, #57	; 0x39
    3104:	4908      	ldr	r1, [pc, #32]	; (3128 <list_insert_as_head+0x50>)
    3106:	4618      	mov	r0, r3
    3108:	4b08      	ldr	r3, [pc, #32]	; (312c <list_insert_as_head+0x54>)
    310a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	681a      	ldr	r2, [r3, #0]
    3110:	683b      	ldr	r3, [r7, #0]
    3112:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	683a      	ldr	r2, [r7, #0]
    3118:	601a      	str	r2, [r3, #0]
}
    311a:	bf00      	nop
    311c:	3708      	adds	r7, #8
    311e:	46bd      	mov	sp, r7
    3120:	bd80      	pop	{r7, pc}
    3122:	bf00      	nop
    3124:	000030a1 	.word	0x000030a1
    3128:	0000d518 	.word	0x0000d518
    312c:	00003079 	.word	0x00003079

00003130 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3130:	b480      	push	{r7}
    3132:	b083      	sub	sp, #12
    3134:	af00      	add	r7, sp, #0
    3136:	6078      	str	r0, [r7, #4]
    3138:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	681a      	ldr	r2, [r3, #0]
    313e:	683b      	ldr	r3, [r7, #0]
    3140:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	683a      	ldr	r2, [r7, #0]
    3146:	601a      	str	r2, [r3, #0]
}
    3148:	bf00      	nop
    314a:	370c      	adds	r7, #12
    314c:	46bd      	mov	sp, r7
    314e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3152:	4770      	bx	lr

00003154 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3154:	b580      	push	{r7, lr}
    3156:	b084      	sub	sp, #16
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]
    315c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	681b      	ldr	r3, [r3, #0]
    3162:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3164:	6839      	ldr	r1, [r7, #0]
    3166:	6878      	ldr	r0, [r7, #4]
    3168:	4b16      	ldr	r3, [pc, #88]	; (31c4 <list_insert_at_end+0x70>)
    316a:	4798      	blx	r3
    316c:	4603      	mov	r3, r0
    316e:	2b00      	cmp	r3, #0
    3170:	bf14      	ite	ne
    3172:	2301      	movne	r3, #1
    3174:	2300      	moveq	r3, #0
    3176:	b2db      	uxtb	r3, r3
    3178:	f083 0301 	eor.w	r3, r3, #1
    317c:	b2db      	uxtb	r3, r3
    317e:	f003 0301 	and.w	r3, r3, #1
    3182:	b2db      	uxtb	r3, r3
    3184:	224f      	movs	r2, #79	; 0x4f
    3186:	4910      	ldr	r1, [pc, #64]	; (31c8 <list_insert_at_end+0x74>)
    3188:	4618      	mov	r0, r3
    318a:	4b10      	ldr	r3, [pc, #64]	; (31cc <list_insert_at_end+0x78>)
    318c:	4798      	blx	r3

	if (!list->head) {
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	681b      	ldr	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d109      	bne.n	31aa <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	683a      	ldr	r2, [r7, #0]
    319a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    319c:	683b      	ldr	r3, [r7, #0]
    319e:	2200      	movs	r2, #0
    31a0:	601a      	str	r2, [r3, #0]
		return;
    31a2:	e00c      	b.n	31be <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    31a4:	68fb      	ldr	r3, [r7, #12]
    31a6:	681b      	ldr	r3, [r3, #0]
    31a8:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    31aa:	68fb      	ldr	r3, [r7, #12]
    31ac:	681b      	ldr	r3, [r3, #0]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d1f8      	bne.n	31a4 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    31b2:	68fb      	ldr	r3, [r7, #12]
    31b4:	683a      	ldr	r2, [r7, #0]
    31b6:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    31b8:	683b      	ldr	r3, [r7, #0]
    31ba:	2200      	movs	r2, #0
    31bc:	601a      	str	r2, [r3, #0]
}
    31be:	3710      	adds	r7, #16
    31c0:	46bd      	mov	sp, r7
    31c2:	bd80      	pop	{r7, pc}
    31c4:	000030a1 	.word	0x000030a1
    31c8:	0000d518 	.word	0x0000d518
    31cc:	00003079 	.word	0x00003079

000031d0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    31d0:	b480      	push	{r7}
    31d2:	b085      	sub	sp, #20
    31d4:	af00      	add	r7, sp, #0
    31d6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	681b      	ldr	r3, [r3, #0]
    31dc:	2b00      	cmp	r3, #0
    31de:	d009      	beq.n	31f4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	681a      	ldr	r2, [r3, #0]
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    31f0:	68fb      	ldr	r3, [r7, #12]
    31f2:	e000      	b.n	31f6 <list_remove_head+0x26>
	}

	return NULL;
    31f4:	2300      	movs	r3, #0
}
    31f6:	4618      	mov	r0, r3
    31f8:	3714      	adds	r7, #20
    31fa:	46bd      	mov	sp, r7
    31fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3200:	4770      	bx	lr

00003202 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3202:	b480      	push	{r7}
    3204:	b085      	sub	sp, #20
    3206:	af00      	add	r7, sp, #0
    3208:	6078      	str	r0, [r7, #4]
    320a:	6039      	str	r1, [r7, #0]
	if (!element) {
    320c:	683b      	ldr	r3, [r7, #0]
    320e:	2b00      	cmp	r3, #0
    3210:	d101      	bne.n	3216 <list_delete_element+0x14>
		return false;
    3212:	2300      	movs	r3, #0
    3214:	e024      	b.n	3260 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	681a      	ldr	r2, [r3, #0]
    321a:	683b      	ldr	r3, [r7, #0]
    321c:	429a      	cmp	r2, r3
    321e:	d106      	bne.n	322e <list_delete_element+0x2c>
		list->head = list->head->next;
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	681b      	ldr	r3, [r3, #0]
    3224:	681a      	ldr	r2, [r3, #0]
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	601a      	str	r2, [r3, #0]
		return true;
    322a:	2301      	movs	r3, #1
    322c:	e018      	b.n	3260 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	681b      	ldr	r3, [r3, #0]
    3232:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3234:	e002      	b.n	323c <list_delete_element+0x3a>
			it = it->next;
    3236:	68fb      	ldr	r3, [r7, #12]
    3238:	681b      	ldr	r3, [r3, #0]
    323a:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    323c:	68fb      	ldr	r3, [r7, #12]
    323e:	2b00      	cmp	r3, #0
    3240:	d004      	beq.n	324c <list_delete_element+0x4a>
    3242:	68fb      	ldr	r3, [r7, #12]
    3244:	681a      	ldr	r2, [r3, #0]
    3246:	683b      	ldr	r3, [r7, #0]
    3248:	429a      	cmp	r2, r3
    324a:	d1f4      	bne.n	3236 <list_delete_element+0x34>
		}
		if (it) {
    324c:	68fb      	ldr	r3, [r7, #12]
    324e:	2b00      	cmp	r3, #0
    3250:	d005      	beq.n	325e <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3252:	683b      	ldr	r3, [r7, #0]
    3254:	681a      	ldr	r2, [r3, #0]
    3256:	68fb      	ldr	r3, [r7, #12]
    3258:	601a      	str	r2, [r3, #0]
			return true;
    325a:	2301      	movs	r3, #1
    325c:	e000      	b.n	3260 <list_delete_element+0x5e>
		}
	}

	return false;
    325e:	2300      	movs	r3, #0
}
    3260:	4618      	mov	r0, r3
    3262:	3714      	adds	r7, #20
    3264:	46bd      	mov	sp, r7
    3266:	f85d 7b04 	ldr.w	r7, [sp], #4
    326a:	4770      	bx	lr

0000326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    326c:	b480      	push	{r7}
    326e:	b083      	sub	sp, #12
    3270:	af00      	add	r7, sp, #0
    3272:	4603      	mov	r3, r0
    3274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    327a:	2b00      	cmp	r3, #0
    327c:	db0b      	blt.n	3296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    327e:	4909      	ldr	r1, [pc, #36]	; (32a4 <__NVIC_EnableIRQ+0x38>)
    3280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3284:	095b      	lsrs	r3, r3, #5
    3286:	88fa      	ldrh	r2, [r7, #6]
    3288:	f002 021f 	and.w	r2, r2, #31
    328c:	2001      	movs	r0, #1
    328e:	fa00 f202 	lsl.w	r2, r0, r2
    3292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3296:	bf00      	nop
    3298:	370c      	adds	r7, #12
    329a:	46bd      	mov	sp, r7
    329c:	f85d 7b04 	ldr.w	r7, [sp], #4
    32a0:	4770      	bx	lr
    32a2:	bf00      	nop
    32a4:	e000e100 	.word	0xe000e100

000032a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    32a8:	b480      	push	{r7}
    32aa:	b083      	sub	sp, #12
    32ac:	af00      	add	r7, sp, #0
    32ae:	4603      	mov	r3, r0
    32b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    32b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32b6:	2b00      	cmp	r3, #0
    32b8:	db10      	blt.n	32dc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32ba:	490b      	ldr	r1, [pc, #44]	; (32e8 <__NVIC_DisableIRQ+0x40>)
    32bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32c0:	095b      	lsrs	r3, r3, #5
    32c2:	88fa      	ldrh	r2, [r7, #6]
    32c4:	f002 021f 	and.w	r2, r2, #31
    32c8:	2001      	movs	r0, #1
    32ca:	fa00 f202 	lsl.w	r2, r0, r2
    32ce:	3320      	adds	r3, #32
    32d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    32d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    32dc:	bf00      	nop
    32de:	370c      	adds	r7, #12
    32e0:	46bd      	mov	sp, r7
    32e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e6:	4770      	bx	lr
    32e8:	e000e100 	.word	0xe000e100

000032ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    32ec:	b480      	push	{r7}
    32ee:	b083      	sub	sp, #12
    32f0:	af00      	add	r7, sp, #0
    32f2:	4603      	mov	r3, r0
    32f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    32f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32fa:	2b00      	cmp	r3, #0
    32fc:	db0c      	blt.n	3318 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32fe:	4909      	ldr	r1, [pc, #36]	; (3324 <__NVIC_ClearPendingIRQ+0x38>)
    3300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3304:	095b      	lsrs	r3, r3, #5
    3306:	88fa      	ldrh	r2, [r7, #6]
    3308:	f002 021f 	and.w	r2, r2, #31
    330c:	2001      	movs	r0, #1
    330e:	fa00 f202 	lsl.w	r2, r0, r2
    3312:	3360      	adds	r3, #96	; 0x60
    3314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3318:	bf00      	nop
    331a:	370c      	adds	r7, #12
    331c:	46bd      	mov	sp, r7
    331e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3322:	4770      	bx	lr
    3324:	e000e100 	.word	0xe000e100

00003328 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3328:	b480      	push	{r7}
    332a:	b083      	sub	sp, #12
    332c:	af00      	add	r7, sp, #0
    332e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3334:	095b      	lsrs	r3, r3, #5
    3336:	f003 0301 	and.w	r3, r3, #1
    333a:	2b00      	cmp	r3, #0
    333c:	bf14      	ite	ne
    333e:	2301      	movne	r3, #1
    3340:	2300      	moveq	r3, #0
    3342:	b2db      	uxtb	r3, r3
}
    3344:	4618      	mov	r0, r3
    3346:	370c      	adds	r7, #12
    3348:	46bd      	mov	sp, r7
    334a:	f85d 7b04 	ldr.w	r7, [sp], #4
    334e:	4770      	bx	lr

00003350 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3350:	b480      	push	{r7}
    3352:	b083      	sub	sp, #12
    3354:	af00      	add	r7, sp, #0
    3356:	6078      	str	r0, [r7, #4]
    3358:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	683a      	ldr	r2, [r7, #0]
    335e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3360:	bf00      	nop
    3362:	370c      	adds	r7, #12
    3364:	46bd      	mov	sp, r7
    3366:	f85d 7b04 	ldr.w	r7, [sp], #4
    336a:	4770      	bx	lr

0000336c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    336c:	b480      	push	{r7}
    336e:	b083      	sub	sp, #12
    3370:	af00      	add	r7, sp, #0
    3372:	6078      	str	r0, [r7, #4]
    3374:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3376:	687b      	ldr	r3, [r7, #4]
    3378:	683a      	ldr	r2, [r7, #0]
    337a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    337c:	bf00      	nop
    337e:	370c      	adds	r7, #12
    3380:	46bd      	mov	sp, r7
    3382:	f85d 7b04 	ldr.w	r7, [sp], #4
    3386:	4770      	bx	lr

00003388 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3388:	b480      	push	{r7}
    338a:	b083      	sub	sp, #12
    338c:	af00      	add	r7, sp, #0
    338e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	699b      	ldr	r3, [r3, #24]
    3394:	f043 0201 	orr.w	r2, r3, #1
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    339c:	bf00      	nop
    339e:	370c      	adds	r7, #12
    33a0:	46bd      	mov	sp, r7
    33a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33a6:	4770      	bx	lr

000033a8 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    33a8:	b480      	push	{r7}
    33aa:	b085      	sub	sp, #20
    33ac:	af00      	add	r7, sp, #0
    33ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	699b      	ldr	r3, [r3, #24]
    33b4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    33b6:	68fb      	ldr	r3, [r7, #12]
    33b8:	f003 0301 	and.w	r3, r3, #1
    33bc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    33be:	68fb      	ldr	r3, [r7, #12]
    33c0:	2b00      	cmp	r3, #0
    33c2:	bf14      	ite	ne
    33c4:	2301      	movne	r3, #1
    33c6:	2300      	moveq	r3, #0
    33c8:	b2db      	uxtb	r3, r3
}
    33ca:	4618      	mov	r0, r3
    33cc:	3714      	adds	r7, #20
    33ce:	46bd      	mov	sp, r7
    33d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d4:	4770      	bx	lr

000033d6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    33d6:	b480      	push	{r7}
    33d8:	b083      	sub	sp, #12
    33da:	af00      	add	r7, sp, #0
    33dc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	699b      	ldr	r3, [r3, #24]
    33e2:	f023 0201 	bic.w	r2, r3, #1
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    33ea:	bf00      	nop
    33ec:	370c      	adds	r7, #12
    33ee:	46bd      	mov	sp, r7
    33f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    33f4:	4770      	bx	lr

000033f6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    33f6:	b480      	push	{r7}
    33f8:	b083      	sub	sp, #12
    33fa:	af00      	add	r7, sp, #0
    33fc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	699b      	ldr	r3, [r3, #24]
    3402:	f043 0202 	orr.w	r2, r3, #2
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    340a:	bf00      	nop
    340c:	370c      	adds	r7, #12
    340e:	46bd      	mov	sp, r7
    3410:	f85d 7b04 	ldr.w	r7, [sp], #4
    3414:	4770      	bx	lr

00003416 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3416:	b480      	push	{r7}
    3418:	b083      	sub	sp, #12
    341a:	af00      	add	r7, sp, #0
    341c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	699b      	ldr	r3, [r3, #24]
    3422:	f023 0202 	bic.w	r2, r3, #2
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    342a:	bf00      	nop
    342c:	370c      	adds	r7, #12
    342e:	46bd      	mov	sp, r7
    3430:	f85d 7b04 	ldr.w	r7, [sp], #4
    3434:	4770      	bx	lr

00003436 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3436:	b480      	push	{r7}
    3438:	b083      	sub	sp, #12
    343a:	af00      	add	r7, sp, #0
    343c:	6078      	str	r0, [r7, #4]
    343e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	699a      	ldr	r2, [r3, #24]
    3444:	683b      	ldr	r3, [r7, #0]
    3446:	431a      	orrs	r2, r3
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    344c:	bf00      	nop
    344e:	370c      	adds	r7, #12
    3450:	46bd      	mov	sp, r7
    3452:	f85d 7b04 	ldr.w	r7, [sp], #4
    3456:	4770      	bx	lr

00003458 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3458:	b480      	push	{r7}
    345a:	b083      	sub	sp, #12
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
    3460:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	683a      	ldr	r2, [r7, #0]
    3466:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3468:	bf00      	nop
    346a:	370c      	adds	r7, #12
    346c:	46bd      	mov	sp, r7
    346e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3472:	4770      	bx	lr

00003474 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3474:	b480      	push	{r7}
    3476:	b083      	sub	sp, #12
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
    347c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	683a      	ldr	r2, [r7, #0]
    3482:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3484:	bf00      	nop
    3486:	370c      	adds	r7, #12
    3488:	46bd      	mov	sp, r7
    348a:	f85d 7b04 	ldr.w	r7, [sp], #4
    348e:	4770      	bx	lr

00003490 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3490:	b480      	push	{r7}
    3492:	b083      	sub	sp, #12
    3494:	af00      	add	r7, sp, #0
    3496:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    349c:	4618      	mov	r0, r3
    349e:	370c      	adds	r7, #12
    34a0:	46bd      	mov	sp, r7
    34a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34a6:	4770      	bx	lr

000034a8 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    34a8:	b480      	push	{r7}
    34aa:	b083      	sub	sp, #12
    34ac:	af00      	add	r7, sp, #0
    34ae:	6078      	str	r0, [r7, #4]
    34b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    34b8:	bf00      	nop
    34ba:	370c      	adds	r7, #12
    34bc:	46bd      	mov	sp, r7
    34be:	f85d 7b04 	ldr.w	r7, [sp], #4
    34c2:	4770      	bx	lr

000034c4 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    34c4:	b480      	push	{r7}
    34c6:	b083      	sub	sp, #12
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
    34cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	683a      	ldr	r2, [r7, #0]
    34d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    34d6:	bf00      	nop
    34d8:	370c      	adds	r7, #12
    34da:	46bd      	mov	sp, r7
    34dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e0:	4770      	bx	lr

000034e2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    34e2:	b480      	push	{r7}
    34e4:	b083      	sub	sp, #12
    34e6:	af00      	add	r7, sp, #0
    34e8:	6078      	str	r0, [r7, #4]
    34ea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	683a      	ldr	r2, [r7, #0]
    34f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    34f4:	bf00      	nop
    34f6:	370c      	adds	r7, #12
    34f8:	46bd      	mov	sp, r7
    34fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    34fe:	4770      	bx	lr

00003500 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3500:	b480      	push	{r7}
    3502:	b083      	sub	sp, #12
    3504:	af00      	add	r7, sp, #0
    3506:	6078      	str	r0, [r7, #4]
    3508:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	683a      	ldr	r2, [r7, #0]
    350e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3512:	bf00      	nop
    3514:	370c      	adds	r7, #12
    3516:	46bd      	mov	sp, r7
    3518:	f85d 7b04 	ldr.w	r7, [sp], #4
    351c:	4770      	bx	lr

0000351e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    351e:	b480      	push	{r7}
    3520:	b083      	sub	sp, #12
    3522:	af00      	add	r7, sp, #0
    3524:	6078      	str	r0, [r7, #4]
    3526:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	683a      	ldr	r2, [r7, #0]
    352c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3530:	bf00      	nop
    3532:	370c      	adds	r7, #12
    3534:	46bd      	mov	sp, r7
    3536:	f85d 7b04 	ldr.w	r7, [sp], #4
    353a:	4770      	bx	lr

0000353c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    353c:	b480      	push	{r7}
    353e:	b083      	sub	sp, #12
    3540:	af00      	add	r7, sp, #0
    3542:	6078      	str	r0, [r7, #4]
    3544:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	683a      	ldr	r2, [r7, #0]
    354a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    354e:	bf00      	nop
    3550:	370c      	adds	r7, #12
    3552:	46bd      	mov	sp, r7
    3554:	f85d 7b04 	ldr.w	r7, [sp], #4
    3558:	4770      	bx	lr

0000355a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    355a:	b480      	push	{r7}
    355c:	b083      	sub	sp, #12
    355e:	af00      	add	r7, sp, #0
    3560:	6078      	str	r0, [r7, #4]
    3562:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3564:	687b      	ldr	r3, [r7, #4]
    3566:	683a      	ldr	r2, [r7, #0]
    3568:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    356c:	bf00      	nop
    356e:	370c      	adds	r7, #12
    3570:	46bd      	mov	sp, r7
    3572:	f85d 7b04 	ldr.w	r7, [sp], #4
    3576:	4770      	bx	lr

00003578 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3578:	b480      	push	{r7}
    357a:	b083      	sub	sp, #12
    357c:	af00      	add	r7, sp, #0
    357e:	6078      	str	r0, [r7, #4]
    3580:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	683a      	ldr	r2, [r7, #0]
    3586:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    358a:	bf00      	nop
    358c:	370c      	adds	r7, #12
    358e:	46bd      	mov	sp, r7
    3590:	f85d 7b04 	ldr.w	r7, [sp], #4
    3594:	4770      	bx	lr

00003596 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3596:	b480      	push	{r7}
    3598:	b083      	sub	sp, #12
    359a:	af00      	add	r7, sp, #0
    359c:	6078      	str	r0, [r7, #4]
    359e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	683a      	ldr	r2, [r7, #0]
    35a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    35a8:	bf00      	nop
    35aa:	370c      	adds	r7, #12
    35ac:	46bd      	mov	sp, r7
    35ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    35b2:	4770      	bx	lr

000035b4 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    35b4:	b480      	push	{r7}
    35b6:	b083      	sub	sp, #12
    35b8:	af00      	add	r7, sp, #0
    35ba:	6078      	str	r0, [r7, #4]
    35bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    35be:	687b      	ldr	r3, [r7, #4]
    35c0:	683a      	ldr	r2, [r7, #0]
    35c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35c6:	bf00      	nop
    35c8:	370c      	adds	r7, #12
    35ca:	46bd      	mov	sp, r7
    35cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    35d0:	4770      	bx	lr
	...

000035d4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b082      	sub	sp, #8
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
    35dc:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    35de:	687b      	ldr	r3, [r7, #4]
    35e0:	683a      	ldr	r2, [r7, #0]
    35e2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	4618      	mov	r0, r3
    35ea:	4b55      	ldr	r3, [pc, #340]	; (3740 <_can_async_init+0x16c>)
    35ec:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    35ee:	bf00      	nop
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	681b      	ldr	r3, [r3, #0]
    35f4:	4618      	mov	r0, r3
    35f6:	4b53      	ldr	r3, [pc, #332]	; (3744 <_can_async_init+0x170>)
    35f8:	4798      	blx	r3
    35fa:	4603      	mov	r3, r0
    35fc:	f083 0301 	eor.w	r3, r3, #1
    3600:	b2db      	uxtb	r3, r3
    3602:	2b00      	cmp	r3, #0
    3604:	d1f4      	bne.n	35f0 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	4618      	mov	r0, r3
    360c:	4b4e      	ldr	r3, [pc, #312]	; (3748 <_can_async_init+0x174>)
    360e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3610:	683b      	ldr	r3, [r7, #0]
    3612:	4a4e      	ldr	r2, [pc, #312]	; (374c <_can_async_init+0x178>)
    3614:	4293      	cmp	r3, r2
    3616:	d17a      	bne.n	370e <_can_async_init+0x13a>
		_can1_dev    = dev;
    3618:	4a4d      	ldr	r2, [pc, #308]	; (3750 <_can_async_init+0x17c>)
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    361e:	687b      	ldr	r3, [r7, #4]
    3620:	4a4c      	ldr	r2, [pc, #304]	; (3754 <_can_async_init+0x180>)
    3622:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	681b      	ldr	r3, [r3, #0]
    3628:	f44f 7140 	mov.w	r1, #768	; 0x300
    362c:	4618      	mov	r0, r3
    362e:	4b4a      	ldr	r3, [pc, #296]	; (3758 <_can_async_init+0x184>)
    3630:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	681b      	ldr	r3, [r3, #0]
    3636:	2102      	movs	r1, #2
    3638:	4618      	mov	r0, r3
    363a:	4b48      	ldr	r3, [pc, #288]	; (375c <_can_async_init+0x188>)
    363c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	681b      	ldr	r3, [r3, #0]
    3642:	4947      	ldr	r1, [pc, #284]	; (3760 <_can_async_init+0x18c>)
    3644:	4618      	mov	r0, r3
    3646:	4b47      	ldr	r3, [pc, #284]	; (3764 <_can_async_init+0x190>)
    3648:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	4946      	ldr	r1, [pc, #280]	; (3768 <_can_async_init+0x194>)
    3650:	4618      	mov	r0, r3
    3652:	4b46      	ldr	r3, [pc, #280]	; (376c <_can_async_init+0x198>)
    3654:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	681a      	ldr	r2, [r3, #0]
    365a:	4b45      	ldr	r3, [pc, #276]	; (3770 <_can_async_init+0x19c>)
    365c:	b29b      	uxth	r3, r3
    365e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3666:	4619      	mov	r1, r3
    3668:	4610      	mov	r0, r2
    366a:	4b42      	ldr	r3, [pc, #264]	; (3774 <_can_async_init+0x1a0>)
    366c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    366e:	687b      	ldr	r3, [r7, #4]
    3670:	681b      	ldr	r3, [r3, #0]
    3672:	2107      	movs	r1, #7
    3674:	4618      	mov	r0, r3
    3676:	4b40      	ldr	r3, [pc, #256]	; (3778 <_can_async_init+0x1a4>)
    3678:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	681b      	ldr	r3, [r3, #0]
    367e:	2107      	movs	r1, #7
    3680:	4618      	mov	r0, r3
    3682:	4b3e      	ldr	r3, [pc, #248]	; (377c <_can_async_init+0x1a8>)
    3684:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	681a      	ldr	r2, [r3, #0]
    368a:	4b3d      	ldr	r3, [pc, #244]	; (3780 <_can_async_init+0x1ac>)
    368c:	b29b      	uxth	r3, r3
    368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3692:	4619      	mov	r1, r3
    3694:	4610      	mov	r0, r2
    3696:	4b3b      	ldr	r3, [pc, #236]	; (3784 <_can_async_init+0x1b0>)
    3698:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	681a      	ldr	r2, [r3, #0]
    369e:	4b3a      	ldr	r3, [pc, #232]	; (3788 <_can_async_init+0x1b4>)
    36a0:	b29b      	uxth	r3, r3
    36a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36a6:	4619      	mov	r1, r3
    36a8:	4610      	mov	r0, r2
    36aa:	4b38      	ldr	r3, [pc, #224]	; (378c <_can_async_init+0x1b8>)
    36ac:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	681b      	ldr	r3, [r3, #0]
    36b2:	2108      	movs	r1, #8
    36b4:	4618      	mov	r0, r3
    36b6:	4b36      	ldr	r3, [pc, #216]	; (3790 <_can_async_init+0x1bc>)
    36b8:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	4b35      	ldr	r3, [pc, #212]	; (3794 <_can_async_init+0x1c0>)
    36c0:	b29b      	uxth	r3, r3
    36c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    36c6:	4619      	mov	r1, r3
    36c8:	4610      	mov	r0, r2
    36ca:	4b33      	ldr	r3, [pc, #204]	; (3798 <_can_async_init+0x1c4>)
    36cc:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	681a      	ldr	r2, [r3, #0]
    36d2:	4b32      	ldr	r3, [pc, #200]	; (379c <_can_async_init+0x1c8>)
    36d4:	b29b      	uxth	r3, r3
    36d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36da:	4619      	mov	r1, r3
    36dc:	4610      	mov	r0, r2
    36de:	4b30      	ldr	r3, [pc, #192]	; (37a0 <_can_async_init+0x1cc>)
    36e0:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    36e2:	687b      	ldr	r3, [r7, #4]
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    36ea:	4618      	mov	r0, r3
    36ec:	4b2d      	ldr	r3, [pc, #180]	; (37a4 <_can_async_init+0x1d0>)
    36ee:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    36f0:	204f      	movs	r0, #79	; 0x4f
    36f2:	4b2d      	ldr	r3, [pc, #180]	; (37a8 <_can_async_init+0x1d4>)
    36f4:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    36f6:	204f      	movs	r0, #79	; 0x4f
    36f8:	4b2c      	ldr	r3, [pc, #176]	; (37ac <_can_async_init+0x1d8>)
    36fa:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    36fc:	204f      	movs	r0, #79	; 0x4f
    36fe:	4b2c      	ldr	r3, [pc, #176]	; (37b0 <_can_async_init+0x1dc>)
    3700:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	2101      	movs	r1, #1
    3708:	4618      	mov	r0, r3
    370a:	4b2a      	ldr	r3, [pc, #168]	; (37b4 <_can_async_init+0x1e0>)
    370c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	681b      	ldr	r3, [r3, #0]
    3712:	4618      	mov	r0, r3
    3714:	4b28      	ldr	r3, [pc, #160]	; (37b8 <_can_async_init+0x1e4>)
    3716:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3718:	687b      	ldr	r3, [r7, #4]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	4618      	mov	r0, r3
    371e:	4b27      	ldr	r3, [pc, #156]	; (37bc <_can_async_init+0x1e8>)
    3720:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3722:	bf00      	nop
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	4618      	mov	r0, r3
    372a:	4b06      	ldr	r3, [pc, #24]	; (3744 <_can_async_init+0x170>)
    372c:	4798      	blx	r3
    372e:	4603      	mov	r3, r0
    3730:	2b00      	cmp	r3, #0
    3732:	d1f7      	bne.n	3724 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3734:	2300      	movs	r3, #0
}
    3736:	4618      	mov	r0, r3
    3738:	3708      	adds	r7, #8
    373a:	46bd      	mov	sp, r7
    373c:	bd80      	pop	{r7, pc}
    373e:	bf00      	nop
    3740:	00003389 	.word	0x00003389
    3744:	000033a9 	.word	0x000033a9
    3748:	000033f7 	.word	0x000033f7
    374c:	42000400 	.word	0x42000400
    3750:	200006a4 	.word	0x200006a4
    3754:	20000004 	.word	0x20000004
    3758:	00003437 	.word	0x00003437
    375c:	00003351 	.word	0x00003351
    3760:	00010c01 	.word	0x00010c01
    3764:	00003459 	.word	0x00003459
    3768:	00010c10 	.word	0x00010c10
    376c:	0000336d 	.word	0x0000336d
    3770:	20000e14 	.word	0x20000e14
    3774:	0000353d 	.word	0x0000353d
    3778:	0000355b 	.word	0x0000355b
    377c:	00003597 	.word	0x00003597
    3780:	20000dcc 	.word	0x20000dcc
    3784:	00003579 	.word	0x00003579
    3788:	20000604 	.word	0x20000604
    378c:	000035b5 	.word	0x000035b5
    3790:	000034c5 	.word	0x000034c5
    3794:	20000614 	.word	0x20000614
    3798:	000034e3 	.word	0x000034e3
    379c:	20000694 	.word	0x20000694
    37a0:	00003501 	.word	0x00003501
    37a4:	0000351f 	.word	0x0000351f
    37a8:	000032a9 	.word	0x000032a9
    37ac:	000032ed 	.word	0x000032ed
    37b0:	0000326d 	.word	0x0000326d
    37b4:	000034a9 	.word	0x000034a9
    37b8:	00003417 	.word	0x00003417
    37bc:	000033d7 	.word	0x000033d7

000037c0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    37c0:	b590      	push	{r4, r7, lr}
    37c2:	b083      	sub	sp, #12
    37c4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    37c6:	4b2c      	ldr	r3, [pc, #176]	; (3878 <CAN1_Handler+0xb8>)
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	4618      	mov	r0, r3
    37d2:	4b2a      	ldr	r3, [pc, #168]	; (387c <CAN1_Handler+0xbc>)
    37d4:	4798      	blx	r3
    37d6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    37d8:	683b      	ldr	r3, [r7, #0]
    37da:	f003 0301 	and.w	r3, r3, #1
    37de:	2b00      	cmp	r3, #0
    37e0:	d003      	beq.n	37ea <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	689b      	ldr	r3, [r3, #8]
    37e6:	6878      	ldr	r0, [r7, #4]
    37e8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    37ea:	683b      	ldr	r3, [r7, #0]
    37ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    37f0:	2b00      	cmp	r3, #0
    37f2:	d003      	beq.n	37fc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	685b      	ldr	r3, [r3, #4]
    37f8:	6878      	ldr	r0, [r7, #4]
    37fa:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    37fc:	683b      	ldr	r3, [r7, #0]
    37fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3802:	2b00      	cmp	r3, #0
    3804:	d004      	beq.n	3810 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	68db      	ldr	r3, [r3, #12]
    380a:	2103      	movs	r1, #3
    380c:	6878      	ldr	r0, [r7, #4]
    380e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3810:	683b      	ldr	r3, [r7, #0]
    3812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3816:	2b00      	cmp	r3, #0
    3818:	d004      	beq.n	3824 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	68db      	ldr	r3, [r3, #12]
    381e:	2100      	movs	r1, #0
    3820:	6878      	ldr	r0, [r7, #4]
    3822:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3824:	683b      	ldr	r3, [r7, #0]
    3826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    382a:	2b00      	cmp	r3, #0
    382c:	d00f      	beq.n	384e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	68dc      	ldr	r4, [r3, #12]
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	681b      	ldr	r3, [r3, #0]
    3836:	4618      	mov	r0, r3
    3838:	4b11      	ldr	r3, [pc, #68]	; (3880 <CAN1_Handler+0xc0>)
    383a:	4798      	blx	r3
    383c:	4603      	mov	r3, r0
    383e:	2b00      	cmp	r3, #0
    3840:	d001      	beq.n	3846 <CAN1_Handler+0x86>
    3842:	2302      	movs	r3, #2
    3844:	e000      	b.n	3848 <CAN1_Handler+0x88>
    3846:	2301      	movs	r3, #1
    3848:	4619      	mov	r1, r3
    384a:	6878      	ldr	r0, [r7, #4]
    384c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    384e:	683b      	ldr	r3, [r7, #0]
    3850:	f003 0308 	and.w	r3, r3, #8
    3854:	2b00      	cmp	r3, #0
    3856:	d004      	beq.n	3862 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3858:	687b      	ldr	r3, [r7, #4]
    385a:	68db      	ldr	r3, [r3, #12]
    385c:	2104      	movs	r1, #4
    385e:	6878      	ldr	r0, [r7, #4]
    3860:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	6839      	ldr	r1, [r7, #0]
    3868:	4618      	mov	r0, r3
    386a:	4b06      	ldr	r3, [pc, #24]	; (3884 <CAN1_Handler+0xc4>)
    386c:	4798      	blx	r3
}
    386e:	bf00      	nop
    3870:	370c      	adds	r7, #12
    3872:	46bd      	mov	sp, r7
    3874:	bd90      	pop	{r4, r7, pc}
    3876:	bf00      	nop
    3878:	200006a4 	.word	0x200006a4
    387c:	00003491 	.word	0x00003491
    3880:	00003329 	.word	0x00003329
    3884:	00003475 	.word	0x00003475

00003888 <__NVIC_SetPendingIRQ>:
{
    3888:	b480      	push	{r7}
    388a:	b083      	sub	sp, #12
    388c:	af00      	add	r7, sp, #0
    388e:	4603      	mov	r3, r0
    3890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3896:	2b00      	cmp	r3, #0
    3898:	db0c      	blt.n	38b4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    389a:	4909      	ldr	r1, [pc, #36]	; (38c0 <__NVIC_SetPendingIRQ+0x38>)
    389c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    38a0:	095b      	lsrs	r3, r3, #5
    38a2:	88fa      	ldrh	r2, [r7, #6]
    38a4:	f002 021f 	and.w	r2, r2, #31
    38a8:	2001      	movs	r0, #1
    38aa:	fa00 f202 	lsl.w	r2, r0, r2
    38ae:	3340      	adds	r3, #64	; 0x40
    38b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    38b4:	bf00      	nop
    38b6:	370c      	adds	r7, #12
    38b8:	46bd      	mov	sp, r7
    38ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    38be:	4770      	bx	lr
    38c0:	e000e100 	.word	0xe000e100

000038c4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    38c4:	b580      	push	{r7, lr}
    38c6:	b082      	sub	sp, #8
    38c8:	af00      	add	r7, sp, #0
    38ca:	4603      	mov	r3, r0
    38cc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    38ce:	79fb      	ldrb	r3, [r7, #7]
    38d0:	b21b      	sxth	r3, r3
    38d2:	4618      	mov	r0, r3
    38d4:	4b02      	ldr	r3, [pc, #8]	; (38e0 <_irq_set+0x1c>)
    38d6:	4798      	blx	r3
}
    38d8:	bf00      	nop
    38da:	3708      	adds	r7, #8
    38dc:	46bd      	mov	sp, r7
    38de:	bd80      	pop	{r7, pc}
    38e0:	00003889 	.word	0x00003889

000038e4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    38e4:	b480      	push	{r7}
    38e6:	b083      	sub	sp, #12
    38e8:	af00      	add	r7, sp, #0
    38ea:	4603      	mov	r3, r0
    38ec:	6039      	str	r1, [r7, #0]
    38ee:	80fb      	strh	r3, [r7, #6]
    38f0:	4613      	mov	r3, r2
    38f2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    38f4:	797b      	ldrb	r3, [r7, #5]
    38f6:	3b04      	subs	r3, #4
    38f8:	2b05      	cmp	r3, #5
    38fa:	d86b      	bhi.n	39d4 <_get_cycles_for_us_internal+0xf0>
    38fc:	a201      	add	r2, pc, #4	; (adr r2, 3904 <_get_cycles_for_us_internal+0x20>)
    38fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3902:	bf00      	nop
    3904:	000039b3 	.word	0x000039b3
    3908:	00003993 	.word	0x00003993
    390c:	00003975 	.word	0x00003975
    3910:	00003957 	.word	0x00003957
    3914:	00003939 	.word	0x00003939
    3918:	0000391d 	.word	0x0000391d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    391c:	88fb      	ldrh	r3, [r7, #6]
    391e:	683a      	ldr	r2, [r7, #0]
    3920:	4935      	ldr	r1, [pc, #212]	; (39f8 <_get_cycles_for_us_internal+0x114>)
    3922:	fba1 1202 	umull	r1, r2, r1, r2
    3926:	0c92      	lsrs	r2, r2, #18
    3928:	fb02 f303 	mul.w	r3, r2, r3
    392c:	3302      	adds	r3, #2
    392e:	4a33      	ldr	r2, [pc, #204]	; (39fc <_get_cycles_for_us_internal+0x118>)
    3930:	fba2 2303 	umull	r2, r3, r2, r3
    3934:	085b      	lsrs	r3, r3, #1
    3936:	e059      	b.n	39ec <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3938:	88fb      	ldrh	r3, [r7, #6]
    393a:	683a      	ldr	r2, [r7, #0]
    393c:	0952      	lsrs	r2, r2, #5
    393e:	4930      	ldr	r1, [pc, #192]	; (3a00 <_get_cycles_for_us_internal+0x11c>)
    3940:	fba1 1202 	umull	r1, r2, r1, r2
    3944:	09d2      	lsrs	r2, r2, #7
    3946:	fb02 f303 	mul.w	r3, r2, r3
    394a:	331d      	adds	r3, #29
    394c:	4a2d      	ldr	r2, [pc, #180]	; (3a04 <_get_cycles_for_us_internal+0x120>)
    394e:	fba2 2303 	umull	r2, r3, r2, r3
    3952:	091b      	lsrs	r3, r3, #4
    3954:	e04a      	b.n	39ec <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3956:	88fb      	ldrh	r3, [r7, #6]
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	492b      	ldr	r1, [pc, #172]	; (3a08 <_get_cycles_for_us_internal+0x124>)
    395c:	fba1 1202 	umull	r1, r2, r1, r2
    3960:	0b52      	lsrs	r2, r2, #13
    3962:	fb02 f303 	mul.w	r3, r2, r3
    3966:	f203 132b 	addw	r3, r3, #299	; 0x12b
    396a:	4a28      	ldr	r2, [pc, #160]	; (3a0c <_get_cycles_for_us_internal+0x128>)
    396c:	fba2 2303 	umull	r2, r3, r2, r3
    3970:	095b      	lsrs	r3, r3, #5
    3972:	e03b      	b.n	39ec <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3974:	88fb      	ldrh	r3, [r7, #6]
    3976:	683a      	ldr	r2, [r7, #0]
    3978:	4925      	ldr	r1, [pc, #148]	; (3a10 <_get_cycles_for_us_internal+0x12c>)
    397a:	fba1 1202 	umull	r1, r2, r1, r2
    397e:	0992      	lsrs	r2, r2, #6
    3980:	fb02 f303 	mul.w	r3, r2, r3
    3984:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3988:	4a22      	ldr	r2, [pc, #136]	; (3a14 <_get_cycles_for_us_internal+0x130>)
    398a:	fba2 2303 	umull	r2, r3, r2, r3
    398e:	099b      	lsrs	r3, r3, #6
    3990:	e02c      	b.n	39ec <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3992:	88fb      	ldrh	r3, [r7, #6]
    3994:	683a      	ldr	r2, [r7, #0]
    3996:	4920      	ldr	r1, [pc, #128]	; (3a18 <_get_cycles_for_us_internal+0x134>)
    3998:	fba1 1202 	umull	r1, r2, r1, r2
    399c:	0952      	lsrs	r2, r2, #5
    399e:	fb02 f303 	mul.w	r3, r2, r3
    39a2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    39a6:	332f      	adds	r3, #47	; 0x2f
    39a8:	4a1c      	ldr	r2, [pc, #112]	; (3a1c <_get_cycles_for_us_internal+0x138>)
    39aa:	fba2 2303 	umull	r2, r3, r2, r3
    39ae:	0b5b      	lsrs	r3, r3, #13
    39b0:	e01c      	b.n	39ec <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    39b2:	88fb      	ldrh	r3, [r7, #6]
    39b4:	683a      	ldr	r2, [r7, #0]
    39b6:	491a      	ldr	r1, [pc, #104]	; (3a20 <_get_cycles_for_us_internal+0x13c>)
    39b8:	fba1 1202 	umull	r1, r2, r1, r2
    39bc:	08d2      	lsrs	r2, r2, #3
    39be:	fb02 f303 	mul.w	r3, r2, r3
    39c2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    39c6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    39ca:	4a16      	ldr	r2, [pc, #88]	; (3a24 <_get_cycles_for_us_internal+0x140>)
    39cc:	fba2 2303 	umull	r2, r3, r2, r3
    39d0:	0c5b      	lsrs	r3, r3, #17
    39d2:	e00b      	b.n	39ec <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    39d4:	88fb      	ldrh	r3, [r7, #6]
    39d6:	683a      	ldr	r2, [r7, #0]
    39d8:	fb02 f303 	mul.w	r3, r2, r3
    39dc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    39e0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    39e4:	4a10      	ldr	r2, [pc, #64]	; (3a28 <_get_cycles_for_us_internal+0x144>)
    39e6:	fba2 2303 	umull	r2, r3, r2, r3
    39ea:	0c9b      	lsrs	r3, r3, #18
	}
}
    39ec:	4618      	mov	r0, r3
    39ee:	370c      	adds	r7, #12
    39f0:	46bd      	mov	sp, r7
    39f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f6:	4770      	bx	lr
    39f8:	431bde83 	.word	0x431bde83
    39fc:	aaaaaaab 	.word	0xaaaaaaab
    3a00:	0a7c5ac5 	.word	0x0a7c5ac5
    3a04:	88888889 	.word	0x88888889
    3a08:	d1b71759 	.word	0xd1b71759
    3a0c:	1b4e81b5 	.word	0x1b4e81b5
    3a10:	10624dd3 	.word	0x10624dd3
    3a14:	057619f1 	.word	0x057619f1
    3a18:	51eb851f 	.word	0x51eb851f
    3a1c:	45e7b273 	.word	0x45e7b273
    3a20:	cccccccd 	.word	0xcccccccd
    3a24:	6fd91d85 	.word	0x6fd91d85
    3a28:	165e9f81 	.word	0x165e9f81

00003a2c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b082      	sub	sp, #8
    3a30:	af00      	add	r7, sp, #0
    3a32:	4603      	mov	r3, r0
    3a34:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3a36:	88fb      	ldrh	r3, [r7, #6]
    3a38:	2209      	movs	r2, #9
    3a3a:	4904      	ldr	r1, [pc, #16]	; (3a4c <_get_cycles_for_us+0x20>)
    3a3c:	4618      	mov	r0, r3
    3a3e:	4b04      	ldr	r3, [pc, #16]	; (3a50 <_get_cycles_for_us+0x24>)
    3a40:	4798      	blx	r3
    3a42:	4603      	mov	r3, r0
}
    3a44:	4618      	mov	r0, r3
    3a46:	3708      	adds	r7, #8
    3a48:	46bd      	mov	sp, r7
    3a4a:	bd80      	pop	{r7, pc}
    3a4c:	07270e00 	.word	0x07270e00
    3a50:	000038e5 	.word	0x000038e5

00003a54 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3a54:	b480      	push	{r7}
    3a56:	b083      	sub	sp, #12
    3a58:	af00      	add	r7, sp, #0
    3a5a:	4603      	mov	r3, r0
    3a5c:	6039      	str	r1, [r7, #0]
    3a5e:	80fb      	strh	r3, [r7, #6]
    3a60:	4613      	mov	r3, r2
    3a62:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3a64:	797b      	ldrb	r3, [r7, #5]
    3a66:	3b04      	subs	r3, #4
    3a68:	2b05      	cmp	r3, #5
    3a6a:	d870      	bhi.n	3b4e <_get_cycles_for_ms_internal+0xfa>
    3a6c:	a201      	add	r2, pc, #4	; (adr r2, 3a74 <_get_cycles_for_ms_internal+0x20>)
    3a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3a72:	bf00      	nop
    3a74:	00003b31 	.word	0x00003b31
    3a78:	00003b15 	.word	0x00003b15
    3a7c:	00003af9 	.word	0x00003af9
    3a80:	00003ad5 	.word	0x00003ad5
    3a84:	00003ab1 	.word	0x00003ab1
    3a88:	00003a8d 	.word	0x00003a8d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3a8c:	88fb      	ldrh	r3, [r7, #6]
    3a8e:	683a      	ldr	r2, [r7, #0]
    3a90:	4937      	ldr	r1, [pc, #220]	; (3b70 <_get_cycles_for_ms_internal+0x11c>)
    3a92:	fba1 1202 	umull	r1, r2, r1, r2
    3a96:	0c92      	lsrs	r2, r2, #18
    3a98:	fb02 f303 	mul.w	r3, r2, r3
    3a9c:	3302      	adds	r3, #2
    3a9e:	4a35      	ldr	r2, [pc, #212]	; (3b74 <_get_cycles_for_ms_internal+0x120>)
    3aa0:	fba2 2303 	umull	r2, r3, r2, r3
    3aa4:	085b      	lsrs	r3, r3, #1
    3aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3aaa:	fb02 f303 	mul.w	r3, r2, r3
    3aae:	e058      	b.n	3b62 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3ab0:	88fb      	ldrh	r3, [r7, #6]
    3ab2:	683a      	ldr	r2, [r7, #0]
    3ab4:	0952      	lsrs	r2, r2, #5
    3ab6:	4930      	ldr	r1, [pc, #192]	; (3b78 <_get_cycles_for_ms_internal+0x124>)
    3ab8:	fba1 1202 	umull	r1, r2, r1, r2
    3abc:	09d2      	lsrs	r2, r2, #7
    3abe:	fb02 f303 	mul.w	r3, r2, r3
    3ac2:	3302      	adds	r3, #2
    3ac4:	4a2b      	ldr	r2, [pc, #172]	; (3b74 <_get_cycles_for_ms_internal+0x120>)
    3ac6:	fba2 2303 	umull	r2, r3, r2, r3
    3aca:	085b      	lsrs	r3, r3, #1
    3acc:	2264      	movs	r2, #100	; 0x64
    3ace:	fb02 f303 	mul.w	r3, r2, r3
    3ad2:	e046      	b.n	3b62 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3ad4:	88fb      	ldrh	r3, [r7, #6]
    3ad6:	683a      	ldr	r2, [r7, #0]
    3ad8:	4928      	ldr	r1, [pc, #160]	; (3b7c <_get_cycles_for_ms_internal+0x128>)
    3ada:	fba1 1202 	umull	r1, r2, r1, r2
    3ade:	0b52      	lsrs	r2, r2, #13
    3ae0:	fb02 f303 	mul.w	r3, r2, r3
    3ae4:	3302      	adds	r3, #2
    3ae6:	4a23      	ldr	r2, [pc, #140]	; (3b74 <_get_cycles_for_ms_internal+0x120>)
    3ae8:	fba2 2303 	umull	r2, r3, r2, r3
    3aec:	085a      	lsrs	r2, r3, #1
    3aee:	4613      	mov	r3, r2
    3af0:	009b      	lsls	r3, r3, #2
    3af2:	4413      	add	r3, r2
    3af4:	005b      	lsls	r3, r3, #1
    3af6:	e034      	b.n	3b62 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3af8:	88fb      	ldrh	r3, [r7, #6]
    3afa:	683a      	ldr	r2, [r7, #0]
    3afc:	4920      	ldr	r1, [pc, #128]	; (3b80 <_get_cycles_for_ms_internal+0x12c>)
    3afe:	fba1 1202 	umull	r1, r2, r1, r2
    3b02:	0992      	lsrs	r2, r2, #6
    3b04:	fb02 f303 	mul.w	r3, r2, r3
    3b08:	3302      	adds	r3, #2
    3b0a:	4a1a      	ldr	r2, [pc, #104]	; (3b74 <_get_cycles_for_ms_internal+0x120>)
    3b0c:	fba2 2303 	umull	r2, r3, r2, r3
    3b10:	085b      	lsrs	r3, r3, #1
    3b12:	e026      	b.n	3b62 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3b14:	88fb      	ldrh	r3, [r7, #6]
    3b16:	683a      	ldr	r2, [r7, #0]
    3b18:	491a      	ldr	r1, [pc, #104]	; (3b84 <_get_cycles_for_ms_internal+0x130>)
    3b1a:	fba1 1202 	umull	r1, r2, r1, r2
    3b1e:	0952      	lsrs	r2, r2, #5
    3b20:	fb02 f303 	mul.w	r3, r2, r3
    3b24:	331d      	adds	r3, #29
    3b26:	4a18      	ldr	r2, [pc, #96]	; (3b88 <_get_cycles_for_ms_internal+0x134>)
    3b28:	fba2 2303 	umull	r2, r3, r2, r3
    3b2c:	091b      	lsrs	r3, r3, #4
    3b2e:	e018      	b.n	3b62 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3b30:	88fb      	ldrh	r3, [r7, #6]
    3b32:	683a      	ldr	r2, [r7, #0]
    3b34:	4915      	ldr	r1, [pc, #84]	; (3b8c <_get_cycles_for_ms_internal+0x138>)
    3b36:	fba1 1202 	umull	r1, r2, r1, r2
    3b3a:	08d2      	lsrs	r2, r2, #3
    3b3c:	fb02 f303 	mul.w	r3, r2, r3
    3b40:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3b44:	4a12      	ldr	r2, [pc, #72]	; (3b90 <_get_cycles_for_ms_internal+0x13c>)
    3b46:	fba2 2303 	umull	r2, r3, r2, r3
    3b4a:	095b      	lsrs	r3, r3, #5
    3b4c:	e009      	b.n	3b62 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3b4e:	88fb      	ldrh	r3, [r7, #6]
    3b50:	683a      	ldr	r2, [r7, #0]
    3b52:	fb02 f303 	mul.w	r3, r2, r3
    3b56:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3b5a:	4a0e      	ldr	r2, [pc, #56]	; (3b94 <_get_cycles_for_ms_internal+0x140>)
    3b5c:	fba2 2303 	umull	r2, r3, r2, r3
    3b60:	099b      	lsrs	r3, r3, #6
	}
}
    3b62:	4618      	mov	r0, r3
    3b64:	370c      	adds	r7, #12
    3b66:	46bd      	mov	sp, r7
    3b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop
    3b70:	431bde83 	.word	0x431bde83
    3b74:	aaaaaaab 	.word	0xaaaaaaab
    3b78:	0a7c5ac5 	.word	0x0a7c5ac5
    3b7c:	d1b71759 	.word	0xd1b71759
    3b80:	10624dd3 	.word	0x10624dd3
    3b84:	51eb851f 	.word	0x51eb851f
    3b88:	88888889 	.word	0x88888889
    3b8c:	cccccccd 	.word	0xcccccccd
    3b90:	1b4e81b5 	.word	0x1b4e81b5
    3b94:	057619f1 	.word	0x057619f1

00003b98 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	b082      	sub	sp, #8
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	4603      	mov	r3, r0
    3ba0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3ba2:	88fb      	ldrh	r3, [r7, #6]
    3ba4:	2209      	movs	r2, #9
    3ba6:	4904      	ldr	r1, [pc, #16]	; (3bb8 <_get_cycles_for_ms+0x20>)
    3ba8:	4618      	mov	r0, r3
    3baa:	4b04      	ldr	r3, [pc, #16]	; (3bbc <_get_cycles_for_ms+0x24>)
    3bac:	4798      	blx	r3
    3bae:	4603      	mov	r3, r0
}
    3bb0:	4618      	mov	r0, r3
    3bb2:	3708      	adds	r7, #8
    3bb4:	46bd      	mov	sp, r7
    3bb6:	bd80      	pop	{r7, pc}
    3bb8:	07270e00 	.word	0x07270e00
    3bbc:	00003a55 	.word	0x00003a55

00003bc0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3bc0:	b480      	push	{r7}
    3bc2:	b083      	sub	sp, #12
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
    3bc8:	6039      	str	r1, [r7, #0]
    3bca:	bf00      	nop
    3bcc:	f3af 8000 	nop.w

00003bd0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3bd0:	3901      	subs	r1, #1
    3bd2:	d8fd      	bhi.n	3bd0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3bd4:	bf00      	nop
    3bd6:	370c      	adds	r7, #12
    3bd8:	46bd      	mov	sp, r7
    3bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bde:	4770      	bx	lr

00003be0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3be0:	b480      	push	{r7}
    3be2:	b083      	sub	sp, #12
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
    3be8:	460b      	mov	r3, r1
    3bea:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	881b      	ldrh	r3, [r3, #0]
    3bf0:	b29a      	uxth	r2, r3
    3bf2:	887b      	ldrh	r3, [r7, #2]
    3bf4:	021b      	lsls	r3, r3, #8
    3bf6:	b29b      	uxth	r3, r3
    3bf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3bfc:	b29b      	uxth	r3, r3
    3bfe:	4313      	orrs	r3, r2
    3c00:	b29a      	uxth	r2, r3
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3c06:	bf00      	nop
    3c08:	370c      	adds	r7, #12
    3c0a:	46bd      	mov	sp, r7
    3c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c10:	4770      	bx	lr

00003c12 <hri_port_set_EVCTRL_reg>:
{
    3c12:	b480      	push	{r7}
    3c14:	b085      	sub	sp, #20
    3c16:	af00      	add	r7, sp, #0
    3c18:	60f8      	str	r0, [r7, #12]
    3c1a:	460b      	mov	r3, r1
    3c1c:	607a      	str	r2, [r7, #4]
    3c1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3c20:	7afb      	ldrb	r3, [r7, #11]
    3c22:	7afa      	ldrb	r2, [r7, #11]
    3c24:	68f9      	ldr	r1, [r7, #12]
    3c26:	01d2      	lsls	r2, r2, #7
    3c28:	440a      	add	r2, r1
    3c2a:	322c      	adds	r2, #44	; 0x2c
    3c2c:	6811      	ldr	r1, [r2, #0]
    3c2e:	687a      	ldr	r2, [r7, #4]
    3c30:	430a      	orrs	r2, r1
    3c32:	68f9      	ldr	r1, [r7, #12]
    3c34:	01db      	lsls	r3, r3, #7
    3c36:	440b      	add	r3, r1
    3c38:	332c      	adds	r3, #44	; 0x2c
    3c3a:	601a      	str	r2, [r3, #0]
}
    3c3c:	bf00      	nop
    3c3e:	3714      	adds	r7, #20
    3c40:	46bd      	mov	sp, r7
    3c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c46:	4770      	bx	lr

00003c48 <_port_event_init>:

static inline void _port_event_init()
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3c4c:	2200      	movs	r2, #0
    3c4e:	2100      	movs	r1, #0
    3c50:	4809      	ldr	r0, [pc, #36]	; (3c78 <_port_event_init+0x30>)
    3c52:	4b0a      	ldr	r3, [pc, #40]	; (3c7c <_port_event_init+0x34>)
    3c54:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3c56:	2200      	movs	r2, #0
    3c58:	2101      	movs	r1, #1
    3c5a:	4807      	ldr	r0, [pc, #28]	; (3c78 <_port_event_init+0x30>)
    3c5c:	4b07      	ldr	r3, [pc, #28]	; (3c7c <_port_event_init+0x34>)
    3c5e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3c60:	22ef      	movs	r2, #239	; 0xef
    3c62:	2102      	movs	r1, #2
    3c64:	4804      	ldr	r0, [pc, #16]	; (3c78 <_port_event_init+0x30>)
    3c66:	4b05      	ldr	r3, [pc, #20]	; (3c7c <_port_event_init+0x34>)
    3c68:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3c6a:	2200      	movs	r2, #0
    3c6c:	2103      	movs	r1, #3
    3c6e:	4802      	ldr	r0, [pc, #8]	; (3c78 <_port_event_init+0x30>)
    3c70:	4b02      	ldr	r3, [pc, #8]	; (3c7c <_port_event_init+0x34>)
    3c72:	4798      	blx	r3
}
    3c74:	bf00      	nop
    3c76:	bd80      	pop	{r7, pc}
    3c78:	41008000 	.word	0x41008000
    3c7c:	00003c13 	.word	0x00003c13

00003c80 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3c80:	b580      	push	{r7, lr}
    3c82:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3c84:	2104      	movs	r1, #4
    3c86:	480b      	ldr	r0, [pc, #44]	; (3cb4 <_init_chip+0x34>)
    3c88:	4b0b      	ldr	r3, [pc, #44]	; (3cb8 <_init_chip+0x38>)
    3c8a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3c8c:	4b0b      	ldr	r3, [pc, #44]	; (3cbc <_init_chip+0x3c>)
    3c8e:	4798      	blx	r3
	_oscctrl_init_sources();
    3c90:	4b0b      	ldr	r3, [pc, #44]	; (3cc0 <_init_chip+0x40>)
    3c92:	4798      	blx	r3
	_mclk_init();
    3c94:	4b0b      	ldr	r3, [pc, #44]	; (3cc4 <_init_chip+0x44>)
    3c96:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3c98:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3c9c:	4b0a      	ldr	r3, [pc, #40]	; (3cc8 <_init_chip+0x48>)
    3c9e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3ca0:	4b0a      	ldr	r3, [pc, #40]	; (3ccc <_init_chip+0x4c>)
    3ca2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3ca4:	f640 30df 	movw	r0, #3039	; 0xbdf
    3ca8:	4b07      	ldr	r3, [pc, #28]	; (3cc8 <_init_chip+0x48>)
    3caa:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3cac:	4b08      	ldr	r3, [pc, #32]	; (3cd0 <_init_chip+0x50>)
    3cae:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3cb0:	bf00      	nop
    3cb2:	bd80      	pop	{r7, pc}
    3cb4:	41004000 	.word	0x41004000
    3cb8:	00003be1 	.word	0x00003be1
    3cbc:	000045c1 	.word	0x000045c1
    3cc0:	00004a89 	.word	0x00004a89
    3cc4:	000044e1 	.word	0x000044e1
    3cc8:	000043e9 	.word	0x000043e9
    3ccc:	00004ac9 	.word	0x00004ac9
    3cd0:	00003c49 	.word	0x00003c49

00003cd4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    3cd4:	b480      	push	{r7}
    3cd6:	b083      	sub	sp, #12
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
    3cdc:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	683a      	ldr	r2, [r7, #0]
    3ce2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3ce4:	2300      	movs	r3, #0
}
    3ce6:	4618      	mov	r0, r3
    3ce8:	370c      	adds	r7, #12
    3cea:	46bd      	mov	sp, r7
    3cec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf0:	4770      	bx	lr
	...

00003cf4 <__NVIC_EnableIRQ>:
{
    3cf4:	b480      	push	{r7}
    3cf6:	b083      	sub	sp, #12
    3cf8:	af00      	add	r7, sp, #0
    3cfa:	4603      	mov	r3, r0
    3cfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d02:	2b00      	cmp	r3, #0
    3d04:	db0b      	blt.n	3d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d06:	4909      	ldr	r1, [pc, #36]	; (3d2c <__NVIC_EnableIRQ+0x38>)
    3d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d0c:	095b      	lsrs	r3, r3, #5
    3d0e:	88fa      	ldrh	r2, [r7, #6]
    3d10:	f002 021f 	and.w	r2, r2, #31
    3d14:	2001      	movs	r0, #1
    3d16:	fa00 f202 	lsl.w	r2, r0, r2
    3d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d1e:	bf00      	nop
    3d20:	370c      	adds	r7, #12
    3d22:	46bd      	mov	sp, r7
    3d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop
    3d2c:	e000e100 	.word	0xe000e100

00003d30 <__NVIC_DisableIRQ>:
{
    3d30:	b480      	push	{r7}
    3d32:	b083      	sub	sp, #12
    3d34:	af00      	add	r7, sp, #0
    3d36:	4603      	mov	r3, r0
    3d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	db10      	blt.n	3d64 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d42:	490b      	ldr	r1, [pc, #44]	; (3d70 <__NVIC_DisableIRQ+0x40>)
    3d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d48:	095b      	lsrs	r3, r3, #5
    3d4a:	88fa      	ldrh	r2, [r7, #6]
    3d4c:	f002 021f 	and.w	r2, r2, #31
    3d50:	2001      	movs	r0, #1
    3d52:	fa00 f202 	lsl.w	r2, r0, r2
    3d56:	3320      	adds	r3, #32
    3d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d60:	f3bf 8f6f 	isb	sy
}
    3d64:	bf00      	nop
    3d66:	370c      	adds	r7, #12
    3d68:	46bd      	mov	sp, r7
    3d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d6e:	4770      	bx	lr
    3d70:	e000e100 	.word	0xe000e100

00003d74 <__NVIC_ClearPendingIRQ>:
{
    3d74:	b480      	push	{r7}
    3d76:	b083      	sub	sp, #12
    3d78:	af00      	add	r7, sp, #0
    3d7a:	4603      	mov	r3, r0
    3d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d82:	2b00      	cmp	r3, #0
    3d84:	db0c      	blt.n	3da0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d86:	4909      	ldr	r1, [pc, #36]	; (3dac <__NVIC_ClearPendingIRQ+0x38>)
    3d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d8c:	095b      	lsrs	r3, r3, #5
    3d8e:	88fa      	ldrh	r2, [r7, #6]
    3d90:	f002 021f 	and.w	r2, r2, #31
    3d94:	2001      	movs	r0, #1
    3d96:	fa00 f202 	lsl.w	r2, r0, r2
    3d9a:	3360      	adds	r3, #96	; 0x60
    3d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3da0:	bf00      	nop
    3da2:	370c      	adds	r7, #12
    3da4:	46bd      	mov	sp, r7
    3da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3daa:	4770      	bx	lr
    3dac:	e000e100 	.word	0xe000e100

00003db0 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
    3db8:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3dba:	bf00      	nop
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	685a      	ldr	r2, [r3, #4]
    3dc0:	683b      	ldr	r3, [r7, #0]
    3dc2:	4013      	ands	r3, r2
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d1f9      	bne.n	3dbc <hri_eic_wait_for_sync+0xc>
	};
}
    3dc8:	bf00      	nop
    3dca:	370c      	adds	r7, #12
    3dcc:	46bd      	mov	sp, r7
    3dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd2:	4770      	bx	lr

00003dd4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3dd4:	b480      	push	{r7}
    3dd6:	b083      	sub	sp, #12
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
    3ddc:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	685a      	ldr	r2, [r3, #4]
    3de2:	683b      	ldr	r3, [r7, #0]
    3de4:	4013      	ands	r3, r2
    3de6:	2b00      	cmp	r3, #0
    3de8:	bf14      	ite	ne
    3dea:	2301      	movne	r3, #1
    3dec:	2300      	moveq	r3, #0
    3dee:	b2db      	uxtb	r3, r3
}
    3df0:	4618      	mov	r0, r3
    3df2:	370c      	adds	r7, #12
    3df4:	46bd      	mov	sp, r7
    3df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfa:	4770      	bx	lr

00003dfc <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b083      	sub	sp, #12
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	695b      	ldr	r3, [r3, #20]
}
    3e08:	4618      	mov	r0, r3
    3e0a:	370c      	adds	r7, #12
    3e0c:	46bd      	mov	sp, r7
    3e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e12:	4770      	bx	lr

00003e14 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    3e14:	b480      	push	{r7}
    3e16:	b083      	sub	sp, #12
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    3e1c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	683a      	ldr	r2, [r7, #0]
    3e22:	615a      	str	r2, [r3, #20]
}
    3e24:	bf00      	nop
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr

00003e30 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3e30:	b580      	push	{r7, lr}
    3e32:	b082      	sub	sp, #8
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	b2db      	uxtb	r3, r3
    3e3e:	f043 0302 	orr.w	r3, r3, #2
    3e42:	b2da      	uxtb	r2, r3
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3e48:	2103      	movs	r1, #3
    3e4a:	6878      	ldr	r0, [r7, #4]
    3e4c:	4b02      	ldr	r3, [pc, #8]	; (3e58 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    3e4e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3e50:	bf00      	nop
    3e52:	3708      	adds	r7, #8
    3e54:	46bd      	mov	sp, r7
    3e56:	bd80      	pop	{r7, pc}
    3e58:	00003db1 	.word	0x00003db1

00003e5c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b082      	sub	sp, #8
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	781b      	ldrb	r3, [r3, #0]
    3e68:	b2db      	uxtb	r3, r3
    3e6a:	f023 0302 	bic.w	r3, r3, #2
    3e6e:	b2da      	uxtb	r2, r3
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3e74:	2103      	movs	r1, #3
    3e76:	6878      	ldr	r0, [r7, #4]
    3e78:	4b02      	ldr	r3, [pc, #8]	; (3e84 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    3e7a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3e7c:	bf00      	nop
    3e7e:	3708      	adds	r7, #8
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}
    3e84:	00003db1 	.word	0x00003db1

00003e88 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	b084      	sub	sp, #16
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
    3e90:	460b      	mov	r3, r1
    3e92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    3e9a:	7bfb      	ldrb	r3, [r7, #15]
    3e9c:	f023 0310 	bic.w	r3, r3, #16
    3ea0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    3ea2:	78fb      	ldrb	r3, [r7, #3]
    3ea4:	011b      	lsls	r3, r3, #4
    3ea6:	b25a      	sxtb	r2, r3
    3ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3eac:	4313      	orrs	r3, r2
    3eae:	b25b      	sxtb	r3, r3
    3eb0:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	7bfa      	ldrb	r2, [r7, #15]
    3eb6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3eb8:	2103      	movs	r1, #3
    3eba:	6878      	ldr	r0, [r7, #4]
    3ebc:	4b02      	ldr	r3, [pc, #8]	; (3ec8 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    3ebe:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3ec0:	bf00      	nop
    3ec2:	3710      	adds	r7, #16
    3ec4:	46bd      	mov	sp, r7
    3ec6:	bd80      	pop	{r7, pc}
    3ec8:	00003db1 	.word	0x00003db1

00003ecc <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    3ecc:	b580      	push	{r7, lr}
    3ece:	b084      	sub	sp, #16
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
    3ed4:	460b      	mov	r3, r1
    3ed6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3ed8:	2103      	movs	r1, #3
    3eda:	6878      	ldr	r0, [r7, #4]
    3edc:	4b06      	ldr	r3, [pc, #24]	; (3ef8 <hri_eic_get_CTRLA_reg+0x2c>)
    3ede:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	781b      	ldrb	r3, [r3, #0]
    3ee4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    3ee6:	7bfa      	ldrb	r2, [r7, #15]
    3ee8:	78fb      	ldrb	r3, [r7, #3]
    3eea:	4013      	ands	r3, r2
    3eec:	73fb      	strb	r3, [r7, #15]
	return tmp;
    3eee:	7bfb      	ldrb	r3, [r7, #15]
}
    3ef0:	4618      	mov	r0, r3
    3ef2:	3710      	adds	r7, #16
    3ef4:	46bd      	mov	sp, r7
    3ef6:	bd80      	pop	{r7, pc}
    3ef8:	00003db1 	.word	0x00003db1

00003efc <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b082      	sub	sp, #8
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
    3f04:	460b      	mov	r3, r1
    3f06:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	78fa      	ldrb	r2, [r7, #3]
    3f0c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3f0e:	2103      	movs	r1, #3
    3f10:	6878      	ldr	r0, [r7, #4]
    3f12:	4b03      	ldr	r3, [pc, #12]	; (3f20 <hri_eic_write_CTRLA_reg+0x24>)
    3f14:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f16:	bf00      	nop
    3f18:	3708      	adds	r7, #8
    3f1a:	46bd      	mov	sp, r7
    3f1c:	bd80      	pop	{r7, pc}
    3f1e:	bf00      	nop
    3f20:	00003db1 	.word	0x00003db1

00003f24 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    3f24:	b480      	push	{r7}
    3f26:	b083      	sub	sp, #12
    3f28:	af00      	add	r7, sp, #0
    3f2a:	6078      	str	r0, [r7, #4]
    3f2c:	460b      	mov	r3, r1
    3f2e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	78fa      	ldrb	r2, [r7, #3]
    3f34:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f36:	bf00      	nop
    3f38:	370c      	adds	r7, #12
    3f3a:	46bd      	mov	sp, r7
    3f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f40:	4770      	bx	lr

00003f42 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    3f42:	b480      	push	{r7}
    3f44:	b083      	sub	sp, #12
    3f46:	af00      	add	r7, sp, #0
    3f48:	6078      	str	r0, [r7, #4]
    3f4a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	683a      	ldr	r2, [r7, #0]
    3f50:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f52:	bf00      	nop
    3f54:	370c      	adds	r7, #12
    3f56:	46bd      	mov	sp, r7
    3f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f5c:	4770      	bx	lr

00003f5e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    3f5e:	b480      	push	{r7}
    3f60:	b083      	sub	sp, #12
    3f62:	af00      	add	r7, sp, #0
    3f64:	6078      	str	r0, [r7, #4]
    3f66:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	683a      	ldr	r2, [r7, #0]
    3f6c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f6e:	bf00      	nop
    3f70:	370c      	adds	r7, #12
    3f72:	46bd      	mov	sp, r7
    3f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f78:	4770      	bx	lr

00003f7a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    3f7a:	b480      	push	{r7}
    3f7c:	b085      	sub	sp, #20
    3f7e:	af00      	add	r7, sp, #0
    3f80:	60f8      	str	r0, [r7, #12]
    3f82:	460b      	mov	r3, r1
    3f84:	607a      	str	r2, [r7, #4]
    3f86:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    3f88:	7afb      	ldrb	r3, [r7, #11]
    3f8a:	68fa      	ldr	r2, [r7, #12]
    3f8c:	3306      	adds	r3, #6
    3f8e:	009b      	lsls	r3, r3, #2
    3f90:	4413      	add	r3, r2
    3f92:	687a      	ldr	r2, [r7, #4]
    3f94:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3f96:	bf00      	nop
    3f98:	3714      	adds	r7, #20
    3f9a:	46bd      	mov	sp, r7
    3f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa0:	4770      	bx	lr

00003fa2 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    3fa2:	b480      	push	{r7}
    3fa4:	b083      	sub	sp, #12
    3fa6:	af00      	add	r7, sp, #0
    3fa8:	6078      	str	r0, [r7, #4]
    3faa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	683a      	ldr	r2, [r7, #0]
    3fb0:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    3fb2:	bf00      	nop
    3fb4:	370c      	adds	r7, #12
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr

00003fbe <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    3fbe:	b480      	push	{r7}
    3fc0:	b083      	sub	sp, #12
    3fc2:	af00      	add	r7, sp, #0
    3fc4:	6078      	str	r0, [r7, #4]
    3fc6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	683a      	ldr	r2, [r7, #0]
    3fcc:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    3fce:	bf00      	nop
    3fd0:	370c      	adds	r7, #12
    3fd2:	46bd      	mov	sp, r7
    3fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd8:	4770      	bx	lr
	...

00003fdc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    3fe4:	2101      	movs	r1, #1
    3fe6:	4838      	ldr	r0, [pc, #224]	; (40c8 <_ext_irq_init+0xec>)
    3fe8:	4b38      	ldr	r3, [pc, #224]	; (40cc <_ext_irq_init+0xf0>)
    3fea:	4798      	blx	r3
    3fec:	4603      	mov	r3, r0
    3fee:	f083 0301 	eor.w	r3, r3, #1
    3ff2:	b2db      	uxtb	r3, r3
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d011      	beq.n	401c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    3ff8:	2102      	movs	r1, #2
    3ffa:	4833      	ldr	r0, [pc, #204]	; (40c8 <_ext_irq_init+0xec>)
    3ffc:	4b34      	ldr	r3, [pc, #208]	; (40d0 <_ext_irq_init+0xf4>)
    3ffe:	4798      	blx	r3
    4000:	4603      	mov	r3, r0
    4002:	2b00      	cmp	r3, #0
    4004:	d006      	beq.n	4014 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4006:	4830      	ldr	r0, [pc, #192]	; (40c8 <_ext_irq_init+0xec>)
    4008:	4b32      	ldr	r3, [pc, #200]	; (40d4 <_ext_irq_init+0xf8>)
    400a:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    400c:	2102      	movs	r1, #2
    400e:	482e      	ldr	r0, [pc, #184]	; (40c8 <_ext_irq_init+0xec>)
    4010:	4b31      	ldr	r3, [pc, #196]	; (40d8 <_ext_irq_init+0xfc>)
    4012:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4014:	2101      	movs	r1, #1
    4016:	482c      	ldr	r0, [pc, #176]	; (40c8 <_ext_irq_init+0xec>)
    4018:	4b30      	ldr	r3, [pc, #192]	; (40dc <_ext_irq_init+0x100>)
    401a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    401c:	2101      	movs	r1, #1
    401e:	482a      	ldr	r0, [pc, #168]	; (40c8 <_ext_irq_init+0xec>)
    4020:	4b2d      	ldr	r3, [pc, #180]	; (40d8 <_ext_irq_init+0xfc>)
    4022:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4024:	2100      	movs	r1, #0
    4026:	4828      	ldr	r0, [pc, #160]	; (40c8 <_ext_irq_init+0xec>)
    4028:	4b2d      	ldr	r3, [pc, #180]	; (40e0 <_ext_irq_init+0x104>)
    402a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    402c:	2100      	movs	r1, #0
    402e:	4826      	ldr	r0, [pc, #152]	; (40c8 <_ext_irq_init+0xec>)
    4030:	4b2c      	ldr	r3, [pc, #176]	; (40e4 <_ext_irq_init+0x108>)
    4032:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4034:	2100      	movs	r1, #0
    4036:	4824      	ldr	r0, [pc, #144]	; (40c8 <_ext_irq_init+0xec>)
    4038:	4b2b      	ldr	r3, [pc, #172]	; (40e8 <_ext_irq_init+0x10c>)
    403a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    403c:	2130      	movs	r1, #48	; 0x30
    403e:	4822      	ldr	r0, [pc, #136]	; (40c8 <_ext_irq_init+0xec>)
    4040:	4b2a      	ldr	r3, [pc, #168]	; (40ec <_ext_irq_init+0x110>)
    4042:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4044:	2130      	movs	r1, #48	; 0x30
    4046:	4820      	ldr	r0, [pc, #128]	; (40c8 <_ext_irq_init+0xec>)
    4048:	4b29      	ldr	r3, [pc, #164]	; (40f0 <_ext_irq_init+0x114>)
    404a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    404c:	2100      	movs	r1, #0
    404e:	481e      	ldr	r0, [pc, #120]	; (40c8 <_ext_irq_init+0xec>)
    4050:	4b28      	ldr	r3, [pc, #160]	; (40f4 <_ext_irq_init+0x118>)
    4052:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4054:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    4058:	2100      	movs	r1, #0
    405a:	481b      	ldr	r0, [pc, #108]	; (40c8 <_ext_irq_init+0xec>)
    405c:	4b26      	ldr	r3, [pc, #152]	; (40f8 <_ext_irq_init+0x11c>)
    405e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4060:	2200      	movs	r2, #0
    4062:	2101      	movs	r1, #1
    4064:	4818      	ldr	r0, [pc, #96]	; (40c8 <_ext_irq_init+0xec>)
    4066:	4b24      	ldr	r3, [pc, #144]	; (40f8 <_ext_irq_init+0x11c>)
    4068:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    406a:	4817      	ldr	r0, [pc, #92]	; (40c8 <_ext_irq_init+0xec>)
    406c:	4b23      	ldr	r3, [pc, #140]	; (40fc <_ext_irq_init+0x120>)
    406e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4070:	2010      	movs	r0, #16
    4072:	4b23      	ldr	r3, [pc, #140]	; (4100 <_ext_irq_init+0x124>)
    4074:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4076:	2010      	movs	r0, #16
    4078:	4b22      	ldr	r3, [pc, #136]	; (4104 <_ext_irq_init+0x128>)
    407a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    407c:	2010      	movs	r0, #16
    407e:	4b22      	ldr	r3, [pc, #136]	; (4108 <_ext_irq_init+0x12c>)
    4080:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4082:	2011      	movs	r0, #17
    4084:	4b1e      	ldr	r3, [pc, #120]	; (4100 <_ext_irq_init+0x124>)
    4086:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4088:	2011      	movs	r0, #17
    408a:	4b1e      	ldr	r3, [pc, #120]	; (4104 <_ext_irq_init+0x128>)
    408c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    408e:	2011      	movs	r0, #17
    4090:	4b1d      	ldr	r3, [pc, #116]	; (4108 <_ext_irq_init+0x12c>)
    4092:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4094:	2012      	movs	r0, #18
    4096:	4b1a      	ldr	r3, [pc, #104]	; (4100 <_ext_irq_init+0x124>)
    4098:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    409a:	2012      	movs	r0, #18
    409c:	4b19      	ldr	r3, [pc, #100]	; (4104 <_ext_irq_init+0x128>)
    409e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    40a0:	2012      	movs	r0, #18
    40a2:	4b19      	ldr	r3, [pc, #100]	; (4108 <_ext_irq_init+0x12c>)
    40a4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    40a6:	2013      	movs	r0, #19
    40a8:	4b15      	ldr	r3, [pc, #84]	; (4100 <_ext_irq_init+0x124>)
    40aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    40ac:	2013      	movs	r0, #19
    40ae:	4b15      	ldr	r3, [pc, #84]	; (4104 <_ext_irq_init+0x128>)
    40b0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    40b2:	2013      	movs	r0, #19
    40b4:	4b14      	ldr	r3, [pc, #80]	; (4108 <_ext_irq_init+0x12c>)
    40b6:	4798      	blx	r3

	callback = cb;
    40b8:	4a14      	ldr	r2, [pc, #80]	; (410c <_ext_irq_init+0x130>)
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    40be:	2300      	movs	r3, #0
}
    40c0:	4618      	mov	r0, r3
    40c2:	3708      	adds	r7, #8
    40c4:	46bd      	mov	sp, r7
    40c6:	bd80      	pop	{r7, pc}
    40c8:	40002800 	.word	0x40002800
    40cc:	00003dd5 	.word	0x00003dd5
    40d0:	00003ecd 	.word	0x00003ecd
    40d4:	00003e5d 	.word	0x00003e5d
    40d8:	00003db1 	.word	0x00003db1
    40dc:	00003efd 	.word	0x00003efd
    40e0:	00003e89 	.word	0x00003e89
    40e4:	00003f25 	.word	0x00003f25
    40e8:	00003f43 	.word	0x00003f43
    40ec:	00003f5f 	.word	0x00003f5f
    40f0:	00003fa3 	.word	0x00003fa3
    40f4:	00003fbf 	.word	0x00003fbf
    40f8:	00003f7b 	.word	0x00003f7b
    40fc:	00003e31 	.word	0x00003e31
    4100:	00003d31 	.word	0x00003d31
    4104:	00003d75 	.word	0x00003d75
    4108:	00003cf5 	.word	0x00003cf5
    410c:	200006a8 	.word	0x200006a8

00004110 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4110:	b580      	push	{r7, lr}
    4112:	b084      	sub	sp, #16
    4114:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4116:	4841      	ldr	r0, [pc, #260]	; (421c <_ext_irq_handler+0x10c>)
    4118:	4b41      	ldr	r3, [pc, #260]	; (4220 <_ext_irq_handler+0x110>)
    411a:	4798      	blx	r3
    411c:	4603      	mov	r3, r0
    411e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4120:	f04f 33ff 	mov.w	r3, #4294967295
    4124:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	4619      	mov	r1, r3
    412a:	483c      	ldr	r0, [pc, #240]	; (421c <_ext_irq_handler+0x10c>)
    412c:	4b3d      	ldr	r3, [pc, #244]	; (4224 <_ext_irq_handler+0x114>)
    412e:	4798      	blx	r3

	ASSERT(callback);
    4130:	4b3d      	ldr	r3, [pc, #244]	; (4228 <_ext_irq_handler+0x118>)
    4132:	681b      	ldr	r3, [r3, #0]
    4134:	2b00      	cmp	r3, #0
    4136:	bf14      	ite	ne
    4138:	2301      	movne	r3, #1
    413a:	2300      	moveq	r3, #0
    413c:	b2db      	uxtb	r3, r3
    413e:	22f4      	movs	r2, #244	; 0xf4
    4140:	493a      	ldr	r1, [pc, #232]	; (422c <_ext_irq_handler+0x11c>)
    4142:	4618      	mov	r0, r3
    4144:	4b3a      	ldr	r3, [pc, #232]	; (4230 <_ext_irq_handler+0x120>)
    4146:	4798      	blx	r3

	while (flags) {
    4148:	e060      	b.n	420c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	4618      	mov	r0, r3
    414e:	4b39      	ldr	r3, [pc, #228]	; (4234 <_ext_irq_handler+0x124>)
    4150:	4798      	blx	r3
    4152:	4603      	mov	r3, r0
    4154:	b2db      	uxtb	r3, r3
    4156:	3b01      	subs	r3, #1
    4158:	b2db      	uxtb	r3, r3
    415a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    415c:	e047      	b.n	41ee <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    415e:	2300      	movs	r3, #0
    4160:	71fb      	strb	r3, [r7, #7]
    4162:	2304      	movs	r3, #4
    4164:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4166:	e024      	b.n	41b2 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    4168:	79ba      	ldrb	r2, [r7, #6]
    416a:	79fb      	ldrb	r3, [r7, #7]
    416c:	4413      	add	r3, r2
    416e:	105b      	asrs	r3, r3, #1
    4170:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4172:	797b      	ldrb	r3, [r7, #5]
    4174:	4a30      	ldr	r2, [pc, #192]	; (4238 <_ext_irq_handler+0x128>)
    4176:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    417a:	461a      	mov	r2, r3
    417c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4180:	429a      	cmp	r2, r3
    4182:	d106      	bne.n	4192 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    4184:	797b      	ldrb	r3, [r7, #5]
    4186:	4a2c      	ldr	r2, [pc, #176]	; (4238 <_ext_irq_handler+0x128>)
    4188:	00db      	lsls	r3, r3, #3
    418a:	4413      	add	r3, r2
    418c:	685b      	ldr	r3, [r3, #4]
    418e:	60bb      	str	r3, [r7, #8]
					break;
    4190:	e013      	b.n	41ba <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    4192:	797b      	ldrb	r3, [r7, #5]
    4194:	4a28      	ldr	r2, [pc, #160]	; (4238 <_ext_irq_handler+0x128>)
    4196:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    419a:	461a      	mov	r2, r3
    419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41a0:	429a      	cmp	r2, r3
    41a2:	da03      	bge.n	41ac <_ext_irq_handler+0x9c>
					lower = middle + 1;
    41a4:	797b      	ldrb	r3, [r7, #5]
    41a6:	3301      	adds	r3, #1
    41a8:	71fb      	strb	r3, [r7, #7]
    41aa:	e002      	b.n	41b2 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    41ac:	797b      	ldrb	r3, [r7, #5]
    41ae:	3b01      	subs	r3, #1
    41b0:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    41b2:	79ba      	ldrb	r2, [r7, #6]
    41b4:	79fb      	ldrb	r3, [r7, #7]
    41b6:	429a      	cmp	r2, r3
    41b8:	d2d6      	bcs.n	4168 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    41ba:	68bb      	ldr	r3, [r7, #8]
    41bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    41c0:	d003      	beq.n	41ca <_ext_irq_handler+0xba>
				callback(pin);
    41c2:	4b19      	ldr	r3, [pc, #100]	; (4228 <_ext_irq_handler+0x118>)
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	68b8      	ldr	r0, [r7, #8]
    41c8:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    41ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41ce:	2201      	movs	r2, #1
    41d0:	fa02 f303 	lsl.w	r3, r2, r3
    41d4:	43da      	mvns	r2, r3
    41d6:	683b      	ldr	r3, [r7, #0]
    41d8:	4013      	ands	r3, r2
    41da:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    41dc:	683b      	ldr	r3, [r7, #0]
    41de:	4618      	mov	r0, r3
    41e0:	4b14      	ldr	r3, [pc, #80]	; (4234 <_ext_irq_handler+0x124>)
    41e2:	4798      	blx	r3
    41e4:	4603      	mov	r3, r0
    41e6:	b2db      	uxtb	r3, r3
    41e8:	3b01      	subs	r3, #1
    41ea:	b2db      	uxtb	r3, r3
    41ec:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    41ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    41f6:	d1b2      	bne.n	415e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    41f8:	4808      	ldr	r0, [pc, #32]	; (421c <_ext_irq_handler+0x10c>)
    41fa:	4b09      	ldr	r3, [pc, #36]	; (4220 <_ext_irq_handler+0x110>)
    41fc:	4798      	blx	r3
    41fe:	4603      	mov	r3, r0
    4200:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4202:	683b      	ldr	r3, [r7, #0]
    4204:	4619      	mov	r1, r3
    4206:	4805      	ldr	r0, [pc, #20]	; (421c <_ext_irq_handler+0x10c>)
    4208:	4b06      	ldr	r3, [pc, #24]	; (4224 <_ext_irq_handler+0x114>)
    420a:	4798      	blx	r3
	while (flags) {
    420c:	683b      	ldr	r3, [r7, #0]
    420e:	2b00      	cmp	r3, #0
    4210:	d19b      	bne.n	414a <_ext_irq_handler+0x3a>
	}
}
    4212:	bf00      	nop
    4214:	3710      	adds	r7, #16
    4216:	46bd      	mov	sp, r7
    4218:	bd80      	pop	{r7, pc}
    421a:	bf00      	nop
    421c:	40002800 	.word	0x40002800
    4220:	00003dfd 	.word	0x00003dfd
    4224:	00003e15 	.word	0x00003e15
    4228:	200006a8 	.word	0x200006a8
    422c:	0000d558 	.word	0x0000d558
    4230:	00003079 	.word	0x00003079
    4234:	0000d089 	.word	0x0000d089
    4238:	0000d538 	.word	0x0000d538

0000423c <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    423c:	b580      	push	{r7, lr}
    423e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4240:	4b01      	ldr	r3, [pc, #4]	; (4248 <EIC_4_Handler+0xc>)
    4242:	4798      	blx	r3
} /**
    4244:	bf00      	nop
    4246:	bd80      	pop	{r7, pc}
    4248:	00004111 	.word	0x00004111

0000424c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    424c:	b580      	push	{r7, lr}
    424e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4250:	4b01      	ldr	r3, [pc, #4]	; (4258 <EIC_5_Handler+0xc>)
    4252:	4798      	blx	r3
} /**
    4254:	bf00      	nop
    4256:	bd80      	pop	{r7, pc}
    4258:	00004111 	.word	0x00004111

0000425c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    425c:	b580      	push	{r7, lr}
    425e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4260:	4b01      	ldr	r3, [pc, #4]	; (4268 <EIC_6_Handler+0xc>)
    4262:	4798      	blx	r3
} /**
    4264:	bf00      	nop
    4266:	bd80      	pop	{r7, pc}
    4268:	00004111 	.word	0x00004111

0000426c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    426c:	b580      	push	{r7, lr}
    426e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4270:	4b01      	ldr	r3, [pc, #4]	; (4278 <EIC_7_Handler+0xc>)
    4272:	4798      	blx	r3
}
    4274:	bf00      	nop
    4276:	bd80      	pop	{r7, pc}
    4278:	00004111 	.word	0x00004111

0000427c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    427c:	b480      	push	{r7}
    427e:	b085      	sub	sp, #20
    4280:	af00      	add	r7, sp, #0
    4282:	60f8      	str	r0, [r7, #12]
    4284:	460b      	mov	r3, r1
    4286:	607a      	str	r2, [r7, #4]
    4288:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    428a:	7afa      	ldrb	r2, [r7, #11]
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	3248      	adds	r2, #72	; 0x48
    4290:	6879      	ldr	r1, [r7, #4]
    4292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4296:	bf00      	nop
    4298:	3714      	adds	r7, #20
    429a:	46bd      	mov	sp, r7
    429c:	f85d 7b04 	ldr.w	r7, [sp], #4
    42a0:	4770      	bx	lr

000042a2 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    42a2:	b480      	push	{r7}
    42a4:	b083      	sub	sp, #12
    42a6:	af00      	add	r7, sp, #0
    42a8:	6078      	str	r0, [r7, #4]
    42aa:	460b      	mov	r3, r1
    42ac:	70fb      	strb	r3, [r7, #3]
    42ae:	4613      	mov	r3, r2
    42b0:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    42b2:	78fb      	ldrb	r3, [r7, #3]
    42b4:	687a      	ldr	r2, [r7, #4]
    42b6:	3304      	adds	r3, #4
    42b8:	00db      	lsls	r3, r3, #3
    42ba:	4413      	add	r3, r2
    42bc:	78ba      	ldrb	r2, [r7, #2]
    42be:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    42c0:	78fb      	ldrb	r3, [r7, #3]
    42c2:	78ba      	ldrb	r2, [r7, #2]
    42c4:	43d2      	mvns	r2, r2
    42c6:	b2d1      	uxtb	r1, r2
    42c8:	687a      	ldr	r2, [r7, #4]
    42ca:	3304      	adds	r3, #4
    42cc:	00db      	lsls	r3, r3, #3
    42ce:	4413      	add	r3, r2
    42d0:	460a      	mov	r2, r1
    42d2:	711a      	strb	r2, [r3, #4]
}
    42d4:	bf00      	nop
    42d6:	370c      	adds	r7, #12
    42d8:	46bd      	mov	sp, r7
    42da:	f85d 7b04 	ldr.w	r7, [sp], #4
    42de:	4770      	bx	lr

000042e0 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    42e0:	b480      	push	{r7}
    42e2:	b085      	sub	sp, #20
    42e4:	af00      	add	r7, sp, #0
    42e6:	60f8      	str	r0, [r7, #12]
    42e8:	460b      	mov	r3, r1
    42ea:	607a      	str	r2, [r7, #4]
    42ec:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    42ee:	7afa      	ldrb	r2, [r7, #11]
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	3204      	adds	r2, #4
    42f4:	6879      	ldr	r1, [r7, #4]
    42f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    42fa:	bf00      	nop
    42fc:	3714      	adds	r7, #20
    42fe:	46bd      	mov	sp, r7
    4300:	f85d 7b04 	ldr.w	r7, [sp], #4
    4304:	4770      	bx	lr
	...

00004308 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    430e:	2300      	movs	r3, #0
    4310:	71fb      	strb	r3, [r7, #7]
    4312:	e00b      	b.n	432c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4314:	79fb      	ldrb	r3, [r7, #7]
    4316:	4a18      	ldr	r2, [pc, #96]	; (4378 <_event_system_init+0x70>)
    4318:	5cd3      	ldrb	r3, [r2, r3]
    431a:	461a      	mov	r2, r3
    431c:	79fb      	ldrb	r3, [r7, #7]
    431e:	4619      	mov	r1, r3
    4320:	4816      	ldr	r0, [pc, #88]	; (437c <_event_system_init+0x74>)
    4322:	4b17      	ldr	r3, [pc, #92]	; (4380 <_event_system_init+0x78>)
    4324:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4326:	79fb      	ldrb	r3, [r7, #7]
    4328:	3301      	adds	r3, #1
    432a:	71fb      	strb	r3, [r7, #7]
    432c:	79fb      	ldrb	r3, [r7, #7]
    432e:	2b42      	cmp	r3, #66	; 0x42
    4330:	d9f0      	bls.n	4314 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4332:	2300      	movs	r3, #0
    4334:	71fb      	strb	r3, [r7, #7]
    4336:	e016      	b.n	4366 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4338:	79fb      	ldrb	r3, [r7, #7]
    433a:	4a12      	ldr	r2, [pc, #72]	; (4384 <_event_system_init+0x7c>)
    433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4340:	461a      	mov	r2, r3
    4342:	79fb      	ldrb	r3, [r7, #7]
    4344:	4619      	mov	r1, r3
    4346:	480d      	ldr	r0, [pc, #52]	; (437c <_event_system_init+0x74>)
    4348:	4b0f      	ldr	r3, [pc, #60]	; (4388 <_event_system_init+0x80>)
    434a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    434c:	79fb      	ldrb	r3, [r7, #7]
    434e:	4a0f      	ldr	r2, [pc, #60]	; (438c <_event_system_init+0x84>)
    4350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4354:	b2da      	uxtb	r2, r3
    4356:	79fb      	ldrb	r3, [r7, #7]
    4358:	4619      	mov	r1, r3
    435a:	4808      	ldr	r0, [pc, #32]	; (437c <_event_system_init+0x74>)
    435c:	4b0c      	ldr	r3, [pc, #48]	; (4390 <_event_system_init+0x88>)
    435e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4360:	79fb      	ldrb	r3, [r7, #7]
    4362:	3301      	adds	r3, #1
    4364:	71fb      	strb	r3, [r7, #7]
    4366:	79fb      	ldrb	r3, [r7, #7]
    4368:	2b1f      	cmp	r3, #31
    436a:	d9e5      	bls.n	4338 <_event_system_init+0x30>
	}

	return ERR_NONE;
    436c:	2300      	movs	r3, #0
}
    436e:	4618      	mov	r0, r3
    4370:	3708      	adds	r7, #8
    4372:	46bd      	mov	sp, r7
    4374:	bd80      	pop	{r7, pc}
    4376:	bf00      	nop
    4378:	0000d570 	.word	0x0000d570
    437c:	4100e000 	.word	0x4100e000
    4380:	0000427d 	.word	0x0000427d
    4384:	0000d5b4 	.word	0x0000d5b4
    4388:	000042e1 	.word	0x000042e1
    438c:	0000d5f4 	.word	0x0000d5f4
    4390:	000042a3 	.word	0x000042a3

00004394 <hri_gclk_wait_for_sync>:
{
    4394:	b480      	push	{r7}
    4396:	b083      	sub	sp, #12
    4398:	af00      	add	r7, sp, #0
    439a:	6078      	str	r0, [r7, #4]
    439c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    439e:	bf00      	nop
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	685a      	ldr	r2, [r3, #4]
    43a4:	683b      	ldr	r3, [r7, #0]
    43a6:	4013      	ands	r3, r2
    43a8:	2b00      	cmp	r3, #0
    43aa:	d1f9      	bne.n	43a0 <hri_gclk_wait_for_sync+0xc>
}
    43ac:	bf00      	nop
    43ae:	370c      	adds	r7, #12
    43b0:	46bd      	mov	sp, r7
    43b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b6:	4770      	bx	lr

000043b8 <hri_gclk_write_GENCTRL_reg>:
{
    43b8:	b580      	push	{r7, lr}
    43ba:	b084      	sub	sp, #16
    43bc:	af00      	add	r7, sp, #0
    43be:	60f8      	str	r0, [r7, #12]
    43c0:	460b      	mov	r3, r1
    43c2:	607a      	str	r2, [r7, #4]
    43c4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    43c6:	7afa      	ldrb	r2, [r7, #11]
    43c8:	68fb      	ldr	r3, [r7, #12]
    43ca:	3208      	adds	r2, #8
    43cc:	6879      	ldr	r1, [r7, #4]
    43ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    43d2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    43d6:	68f8      	ldr	r0, [r7, #12]
    43d8:	4b02      	ldr	r3, [pc, #8]	; (43e4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    43da:	4798      	blx	r3
}
    43dc:	bf00      	nop
    43de:	3710      	adds	r7, #16
    43e0:	46bd      	mov	sp, r7
    43e2:	bd80      	pop	{r7, pc}
    43e4:	00004395 	.word	0x00004395

000043e8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    43e8:	b580      	push	{r7, lr}
    43ea:	b082      	sub	sp, #8
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	f003 0301 	and.w	r3, r3, #1
    43f6:	2b00      	cmp	r3, #0
    43f8:	d004      	beq.n	4404 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    43fa:	4a27      	ldr	r2, [pc, #156]	; (4498 <_gclk_init_generators_by_fref+0xb0>)
    43fc:	2100      	movs	r1, #0
    43fe:	4827      	ldr	r0, [pc, #156]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    4400:	4b27      	ldr	r3, [pc, #156]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    4402:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	f003 0302 	and.w	r3, r3, #2
    440a:	2b00      	cmp	r3, #0
    440c:	d004      	beq.n	4418 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    440e:	4a25      	ldr	r2, [pc, #148]	; (44a4 <_gclk_init_generators_by_fref+0xbc>)
    4410:	2101      	movs	r1, #1
    4412:	4822      	ldr	r0, [pc, #136]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    4414:	4b22      	ldr	r3, [pc, #136]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    4416:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	f003 0304 	and.w	r3, r3, #4
    441e:	2b00      	cmp	r3, #0
    4420:	d004      	beq.n	442c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4422:	4a21      	ldr	r2, [pc, #132]	; (44a8 <_gclk_init_generators_by_fref+0xc0>)
    4424:	2102      	movs	r1, #2
    4426:	481d      	ldr	r0, [pc, #116]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    4428:	4b1d      	ldr	r3, [pc, #116]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    442a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	f003 0308 	and.w	r3, r3, #8
    4432:	2b00      	cmp	r3, #0
    4434:	d004      	beq.n	4440 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4436:	4a1d      	ldr	r2, [pc, #116]	; (44ac <_gclk_init_generators_by_fref+0xc4>)
    4438:	2103      	movs	r1, #3
    443a:	4818      	ldr	r0, [pc, #96]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    443c:	4b18      	ldr	r3, [pc, #96]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    443e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	f003 0310 	and.w	r3, r3, #16
    4446:	2b00      	cmp	r3, #0
    4448:	d004      	beq.n	4454 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    444a:	4a19      	ldr	r2, [pc, #100]	; (44b0 <_gclk_init_generators_by_fref+0xc8>)
    444c:	2104      	movs	r1, #4
    444e:	4813      	ldr	r0, [pc, #76]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    4450:	4b13      	ldr	r3, [pc, #76]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    4452:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	f003 0320 	and.w	r3, r3, #32
    445a:	2b00      	cmp	r3, #0
    445c:	d004      	beq.n	4468 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    445e:	4a15      	ldr	r2, [pc, #84]	; (44b4 <_gclk_init_generators_by_fref+0xcc>)
    4460:	2105      	movs	r1, #5
    4462:	480e      	ldr	r0, [pc, #56]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    4464:	4b0e      	ldr	r3, [pc, #56]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    4466:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4468:	687b      	ldr	r3, [r7, #4]
    446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    446e:	2b00      	cmp	r3, #0
    4470:	d004      	beq.n	447c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4472:	4a11      	ldr	r2, [pc, #68]	; (44b8 <_gclk_init_generators_by_fref+0xd0>)
    4474:	210a      	movs	r1, #10
    4476:	4809      	ldr	r0, [pc, #36]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    4478:	4b09      	ldr	r3, [pc, #36]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    447a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4482:	2b00      	cmp	r3, #0
    4484:	d004      	beq.n	4490 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4486:	4a0d      	ldr	r2, [pc, #52]	; (44bc <_gclk_init_generators_by_fref+0xd4>)
    4488:	210b      	movs	r1, #11
    448a:	4804      	ldr	r0, [pc, #16]	; (449c <_gclk_init_generators_by_fref+0xb4>)
    448c:	4b04      	ldr	r3, [pc, #16]	; (44a0 <_gclk_init_generators_by_fref+0xb8>)
    448e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4490:	bf00      	nop
    4492:	3708      	adds	r7, #8
    4494:	46bd      	mov	sp, r7
    4496:	bd80      	pop	{r7, pc}
    4498:	00010107 	.word	0x00010107
    449c:	40001c00 	.word	0x40001c00
    44a0:	000043b9 	.word	0x000043b9
    44a4:	00010907 	.word	0x00010907
    44a8:	00010906 	.word	0x00010906
    44ac:	00020908 	.word	0x00020908
    44b0:	00010901 	.word	0x00010901
    44b4:	00062901 	.word	0x00062901
    44b8:	00010905 	.word	0x00010905
    44bc:	00041905 	.word	0x00041905

000044c0 <hri_mclk_write_CPUDIV_reg>:
{
    44c0:	b480      	push	{r7}
    44c2:	b083      	sub	sp, #12
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
    44c8:	460b      	mov	r3, r1
    44ca:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	78fa      	ldrb	r2, [r7, #3]
    44d0:	715a      	strb	r2, [r3, #5]
}
    44d2:	bf00      	nop
    44d4:	370c      	adds	r7, #12
    44d6:	46bd      	mov	sp, r7
    44d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44dc:	4770      	bx	lr
	...

000044e0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b082      	sub	sp, #8
    44e4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    44e6:	4b05      	ldr	r3, [pc, #20]	; (44fc <_mclk_init+0x1c>)
    44e8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    44ea:	2101      	movs	r1, #1
    44ec:	6878      	ldr	r0, [r7, #4]
    44ee:	4b04      	ldr	r3, [pc, #16]	; (4500 <_mclk_init+0x20>)
    44f0:	4798      	blx	r3
}
    44f2:	bf00      	nop
    44f4:	3708      	adds	r7, #8
    44f6:	46bd      	mov	sp, r7
    44f8:	bd80      	pop	{r7, pc}
    44fa:	bf00      	nop
    44fc:	40000800 	.word	0x40000800
    4500:	000044c1 	.word	0x000044c1

00004504 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4504:	b480      	push	{r7}
    4506:	b083      	sub	sp, #12
    4508:	af00      	add	r7, sp, #0
    450a:	6078      	str	r0, [r7, #4]
    450c:	460b      	mov	r3, r1
    450e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4510:	687b      	ldr	r3, [r7, #4]
    4512:	78fa      	ldrb	r2, [r7, #3]
    4514:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4516:	bf00      	nop
    4518:	370c      	adds	r7, #12
    451a:	46bd      	mov	sp, r7
    451c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4520:	4770      	bx	lr

00004522 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4522:	b480      	push	{r7}
    4524:	b083      	sub	sp, #12
    4526:	af00      	add	r7, sp, #0
    4528:	6078      	str	r0, [r7, #4]
    452a:	460b      	mov	r3, r1
    452c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	887a      	ldrh	r2, [r7, #2]
    4532:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4534:	bf00      	nop
    4536:	370c      	adds	r7, #12
    4538:	46bd      	mov	sp, r7
    453a:	f85d 7b04 	ldr.w	r7, [sp], #4
    453e:	4770      	bx	lr

00004540 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4540:	b480      	push	{r7}
    4542:	b083      	sub	sp, #12
    4544:	af00      	add	r7, sp, #0
    4546:	6078      	str	r0, [r7, #4]
    4548:	460b      	mov	r3, r1
    454a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	78fa      	ldrb	r2, [r7, #3]
    4550:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4552:	bf00      	nop
    4554:	370c      	adds	r7, #12
    4556:	46bd      	mov	sp, r7
    4558:	f85d 7b04 	ldr.w	r7, [sp], #4
    455c:	4770      	bx	lr

0000455e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    455e:	b480      	push	{r7}
    4560:	b083      	sub	sp, #12
    4562:	af00      	add	r7, sp, #0
    4564:	6078      	str	r0, [r7, #4]
    4566:	460b      	mov	r3, r1
    4568:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	78fa      	ldrb	r2, [r7, #3]
    456e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4570:	bf00      	nop
    4572:	370c      	adds	r7, #12
    4574:	46bd      	mov	sp, r7
    4576:	f85d 7b04 	ldr.w	r7, [sp], #4
    457a:	4770      	bx	lr

0000457c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    457c:	b480      	push	{r7}
    457e:	b085      	sub	sp, #20
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	69db      	ldr	r3, [r3, #28]
    4588:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	0a1b      	lsrs	r3, r3, #8
    458e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4592:	60fb      	str	r3, [r7, #12]
	return tmp;
    4594:	68fb      	ldr	r3, [r7, #12]
}
    4596:	4618      	mov	r0, r3
    4598:	3714      	adds	r7, #20
    459a:	46bd      	mov	sp, r7
    459c:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a0:	4770      	bx	lr

000045a2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    45a2:	b480      	push	{r7}
    45a4:	b083      	sub	sp, #12
    45a6:	af00      	add	r7, sp, #0
    45a8:	6078      	str	r0, [r7, #4]
    45aa:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    45ac:	687b      	ldr	r3, [r7, #4]
    45ae:	683a      	ldr	r2, [r7, #0]
    45b0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    45b2:	bf00      	nop
    45b4:	370c      	adds	r7, #12
    45b6:	46bd      	mov	sp, r7
    45b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45bc:	4770      	bx	lr
	...

000045c0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    45c0:	b580      	push	{r7, lr}
    45c2:	b082      	sub	sp, #8
    45c4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    45c6:	4b13      	ldr	r3, [pc, #76]	; (4614 <_osc32kctrl_init_sources+0x54>)
    45c8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    45ca:	2300      	movs	r3, #0
    45cc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    45ce:	f242 018e 	movw	r1, #8334	; 0x208e
    45d2:	6878      	ldr	r0, [r7, #4]
    45d4:	4b10      	ldr	r3, [pc, #64]	; (4618 <_osc32kctrl_init_sources+0x58>)
    45d6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    45d8:	2100      	movs	r1, #0
    45da:	6878      	ldr	r0, [r7, #4]
    45dc:	4b0f      	ldr	r3, [pc, #60]	; (461c <_osc32kctrl_init_sources+0x5c>)
    45de:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    45e0:	2100      	movs	r1, #0
    45e2:	6878      	ldr	r0, [r7, #4]
    45e4:	4b0e      	ldr	r3, [pc, #56]	; (4620 <_osc32kctrl_init_sources+0x60>)
    45e6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    45e8:	6878      	ldr	r0, [r7, #4]
    45ea:	4b0e      	ldr	r3, [pc, #56]	; (4624 <_osc32kctrl_init_sources+0x64>)
    45ec:	4798      	blx	r3
    45ee:	4603      	mov	r3, r0
    45f0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    45f2:	887b      	ldrh	r3, [r7, #2]
    45f4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    45f6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    45fa:	4619      	mov	r1, r3
    45fc:	6878      	ldr	r0, [r7, #4]
    45fe:	4b0a      	ldr	r3, [pc, #40]	; (4628 <_osc32kctrl_init_sources+0x68>)
    4600:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4602:	2100      	movs	r1, #0
    4604:	6878      	ldr	r0, [r7, #4]
    4606:	4b09      	ldr	r3, [pc, #36]	; (462c <_osc32kctrl_init_sources+0x6c>)
    4608:	4798      	blx	r3
	(void)calib;
}
    460a:	bf00      	nop
    460c:	3708      	adds	r7, #8
    460e:	46bd      	mov	sp, r7
    4610:	bd80      	pop	{r7, pc}
    4612:	bf00      	nop
    4614:	40001400 	.word	0x40001400
    4618:	00004523 	.word	0x00004523
    461c:	00004541 	.word	0x00004541
    4620:	0000455f 	.word	0x0000455f
    4624:	0000457d 	.word	0x0000457d
    4628:	000045a3 	.word	0x000045a3
    462c:	00004505 	.word	0x00004505

00004630 <hri_gclk_wait_for_sync>:
{
    4630:	b480      	push	{r7}
    4632:	b083      	sub	sp, #12
    4634:	af00      	add	r7, sp, #0
    4636:	6078      	str	r0, [r7, #4]
    4638:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    463a:	bf00      	nop
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	685a      	ldr	r2, [r3, #4]
    4640:	683b      	ldr	r3, [r7, #0]
    4642:	4013      	ands	r3, r2
    4644:	2b00      	cmp	r3, #0
    4646:	d1f9      	bne.n	463c <hri_gclk_wait_for_sync+0xc>
}
    4648:	bf00      	nop
    464a:	370c      	adds	r7, #12
    464c:	46bd      	mov	sp, r7
    464e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4652:	4770      	bx	lr

00004654 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4654:	b480      	push	{r7}
    4656:	b083      	sub	sp, #12
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	685b      	ldr	r3, [r3, #4]
    4660:	089b      	lsrs	r3, r3, #2
    4662:	f003 0301 	and.w	r3, r3, #1
    4666:	2b00      	cmp	r3, #0
    4668:	bf14      	ite	ne
    466a:	2301      	movne	r3, #1
    466c:	2300      	moveq	r3, #0
    466e:	b2db      	uxtb	r3, r3
}
    4670:	4618      	mov	r0, r3
    4672:	370c      	adds	r7, #12
    4674:	46bd      	mov	sp, r7
    4676:	f85d 7b04 	ldr.w	r7, [sp], #4
    467a:	4770      	bx	lr

0000467c <hri_gclk_read_SYNCBUSY_reg>:
{
    467c:	b480      	push	{r7}
    467e:	b083      	sub	sp, #12
    4680:	af00      	add	r7, sp, #0
    4682:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	685b      	ldr	r3, [r3, #4]
}
    4688:	4618      	mov	r0, r3
    468a:	370c      	adds	r7, #12
    468c:	46bd      	mov	sp, r7
    468e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4692:	4770      	bx	lr

00004694 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4694:	b580      	push	{r7, lr}
    4696:	b086      	sub	sp, #24
    4698:	af00      	add	r7, sp, #0
    469a:	60f8      	str	r0, [r7, #12]
    469c:	460b      	mov	r3, r1
    469e:	607a      	str	r2, [r7, #4]
    46a0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    46a2:	7afa      	ldrb	r2, [r7, #11]
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	3208      	adds	r2, #8
    46a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    46ac:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    46ae:	697b      	ldr	r3, [r7, #20]
    46b0:	f023 030f 	bic.w	r3, r3, #15
    46b4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	f003 030f 	and.w	r3, r3, #15
    46bc:	697a      	ldr	r2, [r7, #20]
    46be:	4313      	orrs	r3, r2
    46c0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    46c2:	7afa      	ldrb	r2, [r7, #11]
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	3208      	adds	r2, #8
    46c8:	6979      	ldr	r1, [r7, #20]
    46ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    46ce:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    46d2:	68f8      	ldr	r0, [r7, #12]
    46d4:	4b02      	ldr	r3, [pc, #8]	; (46e0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    46d6:	4798      	blx	r3
}
    46d8:	bf00      	nop
    46da:	3718      	adds	r7, #24
    46dc:	46bd      	mov	sp, r7
    46de:	bd80      	pop	{r7, pc}
    46e0:	00004631 	.word	0x00004631

000046e4 <hri_gclk_write_PCHCTRL_reg>:
{
    46e4:	b480      	push	{r7}
    46e6:	b085      	sub	sp, #20
    46e8:	af00      	add	r7, sp, #0
    46ea:	60f8      	str	r0, [r7, #12]
    46ec:	460b      	mov	r3, r1
    46ee:	607a      	str	r2, [r7, #4]
    46f0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    46f2:	7afa      	ldrb	r2, [r7, #11]
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	3220      	adds	r2, #32
    46f8:	6879      	ldr	r1, [r7, #4]
    46fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    46fe:	bf00      	nop
    4700:	3714      	adds	r7, #20
    4702:	46bd      	mov	sp, r7
    4704:	f85d 7b04 	ldr.w	r7, [sp], #4
    4708:	4770      	bx	lr

0000470a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    470a:	b480      	push	{r7}
    470c:	b085      	sub	sp, #20
    470e:	af00      	add	r7, sp, #0
    4710:	60f8      	str	r0, [r7, #12]
    4712:	460b      	mov	r3, r1
    4714:	607a      	str	r2, [r7, #4]
    4716:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4718:	bf00      	nop
    471a:	7afa      	ldrb	r2, [r7, #11]
    471c:	68f9      	ldr	r1, [r7, #12]
    471e:	4613      	mov	r3, r2
    4720:	009b      	lsls	r3, r3, #2
    4722:	4413      	add	r3, r2
    4724:	009b      	lsls	r3, r3, #2
    4726:	440b      	add	r3, r1
    4728:	333c      	adds	r3, #60	; 0x3c
    472a:	681a      	ldr	r2, [r3, #0]
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	4013      	ands	r3, r2
    4730:	2b00      	cmp	r3, #0
    4732:	d1f2      	bne.n	471a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4734:	bf00      	nop
    4736:	3714      	adds	r7, #20
    4738:	46bd      	mov	sp, r7
    473a:	f85d 7b04 	ldr.w	r7, [sp], #4
    473e:	4770      	bx	lr

00004740 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4740:	b480      	push	{r7}
    4742:	b083      	sub	sp, #12
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
    4748:	460b      	mov	r3, r1
    474a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    474c:	78fa      	ldrb	r2, [r7, #3]
    474e:	6879      	ldr	r1, [r7, #4]
    4750:	4613      	mov	r3, r2
    4752:	009b      	lsls	r3, r3, #2
    4754:	4413      	add	r3, r2
    4756:	009b      	lsls	r3, r3, #2
    4758:	440b      	add	r3, r1
    475a:	3340      	adds	r3, #64	; 0x40
    475c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    475e:	f003 0301 	and.w	r3, r3, #1
    4762:	2b00      	cmp	r3, #0
    4764:	bf14      	ite	ne
    4766:	2301      	movne	r3, #1
    4768:	2300      	moveq	r3, #0
    476a:	b2db      	uxtb	r3, r3
}
    476c:	4618      	mov	r0, r3
    476e:	370c      	adds	r7, #12
    4770:	46bd      	mov	sp, r7
    4772:	f85d 7b04 	ldr.w	r7, [sp], #4
    4776:	4770      	bx	lr

00004778 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4778:	b480      	push	{r7}
    477a:	b083      	sub	sp, #12
    477c:	af00      	add	r7, sp, #0
    477e:	6078      	str	r0, [r7, #4]
    4780:	460b      	mov	r3, r1
    4782:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4784:	78fa      	ldrb	r2, [r7, #3]
    4786:	6879      	ldr	r1, [r7, #4]
    4788:	4613      	mov	r3, r2
    478a:	009b      	lsls	r3, r3, #2
    478c:	4413      	add	r3, r2
    478e:	009b      	lsls	r3, r3, #2
    4790:	440b      	add	r3, r1
    4792:	3340      	adds	r3, #64	; 0x40
    4794:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4796:	085b      	lsrs	r3, r3, #1
    4798:	f003 0301 	and.w	r3, r3, #1
    479c:	2b00      	cmp	r3, #0
    479e:	bf14      	ite	ne
    47a0:	2301      	movne	r3, #1
    47a2:	2300      	moveq	r3, #0
    47a4:	b2db      	uxtb	r3, r3
}
    47a6:	4618      	mov	r0, r3
    47a8:	370c      	adds	r7, #12
    47aa:	46bd      	mov	sp, r7
    47ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b0:	4770      	bx	lr
	...

000047b4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b082      	sub	sp, #8
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]
    47bc:	460b      	mov	r3, r1
    47be:	70fb      	strb	r3, [r7, #3]
    47c0:	4613      	mov	r3, r2
    47c2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    47c4:	78fa      	ldrb	r2, [r7, #3]
    47c6:	6879      	ldr	r1, [r7, #4]
    47c8:	4613      	mov	r3, r2
    47ca:	009b      	lsls	r3, r3, #2
    47cc:	4413      	add	r3, r2
    47ce:	009b      	lsls	r3, r3, #2
    47d0:	440b      	add	r3, r1
    47d2:	3330      	adds	r3, #48	; 0x30
    47d4:	78ba      	ldrb	r2, [r7, #2]
    47d6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    47d8:	78fb      	ldrb	r3, [r7, #3]
    47da:	2202      	movs	r2, #2
    47dc:	4619      	mov	r1, r3
    47de:	6878      	ldr	r0, [r7, #4]
    47e0:	4b02      	ldr	r3, [pc, #8]	; (47ec <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    47e2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    47e4:	bf00      	nop
    47e6:	3708      	adds	r7, #8
    47e8:	46bd      	mov	sp, r7
    47ea:	bd80      	pop	{r7, pc}
    47ec:	0000470b 	.word	0x0000470b

000047f0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    47f0:	b580      	push	{r7, lr}
    47f2:	b084      	sub	sp, #16
    47f4:	af00      	add	r7, sp, #0
    47f6:	60f8      	str	r0, [r7, #12]
    47f8:	460b      	mov	r3, r1
    47fa:	607a      	str	r2, [r7, #4]
    47fc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    47fe:	7afa      	ldrb	r2, [r7, #11]
    4800:	68f9      	ldr	r1, [r7, #12]
    4802:	4613      	mov	r3, r2
    4804:	009b      	lsls	r3, r3, #2
    4806:	4413      	add	r3, r2
    4808:	009b      	lsls	r3, r3, #2
    480a:	440b      	add	r3, r1
    480c:	3334      	adds	r3, #52	; 0x34
    480e:	687a      	ldr	r2, [r7, #4]
    4810:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4812:	7afb      	ldrb	r3, [r7, #11]
    4814:	2206      	movs	r2, #6
    4816:	4619      	mov	r1, r3
    4818:	68f8      	ldr	r0, [r7, #12]
    481a:	4b03      	ldr	r3, [pc, #12]	; (4828 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    481c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    481e:	bf00      	nop
    4820:	3710      	adds	r7, #16
    4822:	46bd      	mov	sp, r7
    4824:	bd80      	pop	{r7, pc}
    4826:	bf00      	nop
    4828:	0000470b 	.word	0x0000470b

0000482c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    482c:	b480      	push	{r7}
    482e:	b085      	sub	sp, #20
    4830:	af00      	add	r7, sp, #0
    4832:	60f8      	str	r0, [r7, #12]
    4834:	460b      	mov	r3, r1
    4836:	607a      	str	r2, [r7, #4]
    4838:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    483a:	7afa      	ldrb	r2, [r7, #11]
    483c:	68f9      	ldr	r1, [r7, #12]
    483e:	4613      	mov	r3, r2
    4840:	009b      	lsls	r3, r3, #2
    4842:	4413      	add	r3, r2
    4844:	009b      	lsls	r3, r3, #2
    4846:	440b      	add	r3, r1
    4848:	3338      	adds	r3, #56	; 0x38
    484a:	687a      	ldr	r2, [r7, #4]
    484c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    484e:	bf00      	nop
    4850:	3714      	adds	r7, #20
    4852:	46bd      	mov	sp, r7
    4854:	f85d 7b04 	ldr.w	r7, [sp], #4
    4858:	4770      	bx	lr

0000485a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    485a:	b480      	push	{r7}
    485c:	b083      	sub	sp, #12
    485e:	af00      	add	r7, sp, #0
    4860:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	691b      	ldr	r3, [r3, #16]
    4866:	085b      	lsrs	r3, r3, #1
    4868:	f003 0301 	and.w	r3, r3, #1
    486c:	2b00      	cmp	r3, #0
    486e:	bf14      	ite	ne
    4870:	2301      	movne	r3, #1
    4872:	2300      	moveq	r3, #0
    4874:	b2db      	uxtb	r3, r3
}
    4876:	4618      	mov	r0, r3
    4878:	370c      	adds	r7, #12
    487a:	46bd      	mov	sp, r7
    487c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4880:	4770      	bx	lr

00004882 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4882:	b480      	push	{r7}
    4884:	b083      	sub	sp, #12
    4886:	af00      	add	r7, sp, #0
    4888:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	691b      	ldr	r3, [r3, #16]
    488e:	0a1b      	lsrs	r3, r3, #8
    4890:	f003 0301 	and.w	r3, r3, #1
    4894:	2b00      	cmp	r3, #0
    4896:	bf14      	ite	ne
    4898:	2301      	movne	r3, #1
    489a:	2300      	moveq	r3, #0
    489c:	b2db      	uxtb	r3, r3
}
    489e:	4618      	mov	r0, r3
    48a0:	370c      	adds	r7, #12
    48a2:	46bd      	mov	sp, r7
    48a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a8:	4770      	bx	lr

000048aa <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    48aa:	b480      	push	{r7}
    48ac:	b085      	sub	sp, #20
    48ae:	af00      	add	r7, sp, #0
    48b0:	6078      	str	r0, [r7, #4]
    48b2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	691b      	ldr	r3, [r3, #16]
    48b8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    48ba:	68fa      	ldr	r2, [r7, #12]
    48bc:	683b      	ldr	r3, [r7, #0]
    48be:	4013      	ands	r3, r2
    48c0:	60fb      	str	r3, [r7, #12]
	return tmp;
    48c2:	68fb      	ldr	r3, [r7, #12]
}
    48c4:	4618      	mov	r0, r3
    48c6:	3714      	adds	r7, #20
    48c8:	46bd      	mov	sp, r7
    48ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ce:	4770      	bx	lr

000048d0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    48d0:	b480      	push	{r7}
    48d2:	b085      	sub	sp, #20
    48d4:	af00      	add	r7, sp, #0
    48d6:	60f8      	str	r0, [r7, #12]
    48d8:	460b      	mov	r3, r1
    48da:	607a      	str	r2, [r7, #4]
    48dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    48de:	7afb      	ldrb	r3, [r7, #11]
    48e0:	68fa      	ldr	r2, [r7, #12]
    48e2:	3304      	adds	r3, #4
    48e4:	009b      	lsls	r3, r3, #2
    48e6:	4413      	add	r3, r2
    48e8:	687a      	ldr	r2, [r7, #4]
    48ea:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    48ec:	bf00      	nop
    48ee:	3714      	adds	r7, #20
    48f0:	46bd      	mov	sp, r7
    48f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f6:	4770      	bx	lr

000048f8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    48f8:	b480      	push	{r7}
    48fa:	b083      	sub	sp, #12
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    4900:	460b      	mov	r3, r1
    4902:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	78fa      	ldrb	r2, [r7, #3]
    4908:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    490a:	bf00      	nop
    490c:	370c      	adds	r7, #12
    490e:	46bd      	mov	sp, r7
    4910:	f85d 7b04 	ldr.w	r7, [sp], #4
    4914:	4770      	bx	lr

00004916 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4916:	b480      	push	{r7}
    4918:	b085      	sub	sp, #20
    491a:	af00      	add	r7, sp, #0
    491c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	f893 3020 	ldrb.w	r3, [r3, #32]
    4924:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4926:	7bfb      	ldrb	r3, [r7, #15]
    4928:	f003 0301 	and.w	r3, r3, #1
    492c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    492e:	7bfb      	ldrb	r3, [r7, #15]
    4930:	2b00      	cmp	r3, #0
    4932:	bf14      	ite	ne
    4934:	2301      	movne	r3, #1
    4936:	2300      	moveq	r3, #0
    4938:	b2db      	uxtb	r3, r3
}
    493a:	4618      	mov	r0, r3
    493c:	3714      	adds	r7, #20
    493e:	46bd      	mov	sp, r7
    4940:	f85d 7b04 	ldr.w	r7, [sp], #4
    4944:	4770      	bx	lr

00004946 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4946:	b480      	push	{r7}
    4948:	b083      	sub	sp, #12
    494a:	af00      	add	r7, sp, #0
    494c:	6078      	str	r0, [r7, #4]
    494e:	460b      	mov	r3, r1
    4950:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	78fa      	ldrb	r2, [r7, #3]
    4956:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    495a:	bf00      	nop
    495c:	370c      	adds	r7, #12
    495e:	46bd      	mov	sp, r7
    4960:	f85d 7b04 	ldr.w	r7, [sp], #4
    4964:	4770      	bx	lr

00004966 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4966:	b480      	push	{r7}
    4968:	b083      	sub	sp, #12
    496a:	af00      	add	r7, sp, #0
    496c:	6078      	str	r0, [r7, #4]
    496e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	683a      	ldr	r2, [r7, #0]
    4974:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4976:	bf00      	nop
    4978:	370c      	adds	r7, #12
    497a:	46bd      	mov	sp, r7
    497c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4980:	4770      	bx	lr

00004982 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4982:	b480      	push	{r7}
    4984:	b083      	sub	sp, #12
    4986:	af00      	add	r7, sp, #0
    4988:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    498e:	4618      	mov	r0, r3
    4990:	370c      	adds	r7, #12
    4992:	46bd      	mov	sp, r7
    4994:	f85d 7b04 	ldr.w	r7, [sp], #4
    4998:	4770      	bx	lr

0000499a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    499a:	b480      	push	{r7}
    499c:	b083      	sub	sp, #12
    499e:	af00      	add	r7, sp, #0
    49a0:	6078      	str	r0, [r7, #4]
    49a2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	683a      	ldr	r2, [r7, #0]
    49a8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    49aa:	bf00      	nop
    49ac:	370c      	adds	r7, #12
    49ae:	46bd      	mov	sp, r7
    49b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b4:	4770      	bx	lr

000049b6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    49b6:	b480      	push	{r7}
    49b8:	b085      	sub	sp, #20
    49ba:	af00      	add	r7, sp, #0
    49bc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    49be:	687b      	ldr	r3, [r7, #4]
    49c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    49c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    49c6:	7bfb      	ldrb	r3, [r7, #15]
    49c8:	085b      	lsrs	r3, r3, #1
    49ca:	b2db      	uxtb	r3, r3
    49cc:	f003 0301 	and.w	r3, r3, #1
    49d0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    49d2:	7bfb      	ldrb	r3, [r7, #15]
    49d4:	2b00      	cmp	r3, #0
    49d6:	bf14      	ite	ne
    49d8:	2301      	movne	r3, #1
    49da:	2300      	moveq	r3, #0
    49dc:	b2db      	uxtb	r3, r3
}
    49de:	4618      	mov	r0, r3
    49e0:	3714      	adds	r7, #20
    49e2:	46bd      	mov	sp, r7
    49e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e8:	4770      	bx	lr

000049ea <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    49ea:	b480      	push	{r7}
    49ec:	b085      	sub	sp, #20
    49ee:	af00      	add	r7, sp, #0
    49f0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    49f8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    49fa:	7bfb      	ldrb	r3, [r7, #15]
    49fc:	089b      	lsrs	r3, r3, #2
    49fe:	b2db      	uxtb	r3, r3
    4a00:	f003 0301 	and.w	r3, r3, #1
    4a04:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4a06:	7bfb      	ldrb	r3, [r7, #15]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	bf14      	ite	ne
    4a0c:	2301      	movne	r3, #1
    4a0e:	2300      	moveq	r3, #0
    4a10:	b2db      	uxtb	r3, r3
}
    4a12:	4618      	mov	r0, r3
    4a14:	3714      	adds	r7, #20
    4a16:	46bd      	mov	sp, r7
    4a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a1c:	4770      	bx	lr

00004a1e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4a1e:	b480      	push	{r7}
    4a20:	b085      	sub	sp, #20
    4a22:	af00      	add	r7, sp, #0
    4a24:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4a26:	687b      	ldr	r3, [r7, #4]
    4a28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4a2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4a2e:	7bfb      	ldrb	r3, [r7, #15]
    4a30:	08db      	lsrs	r3, r3, #3
    4a32:	b2db      	uxtb	r3, r3
    4a34:	f003 0301 	and.w	r3, r3, #1
    4a38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4a3a:	7bfb      	ldrb	r3, [r7, #15]
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	bf14      	ite	ne
    4a40:	2301      	movne	r3, #1
    4a42:	2300      	moveq	r3, #0
    4a44:	b2db      	uxtb	r3, r3
}
    4a46:	4618      	mov	r0, r3
    4a48:	3714      	adds	r7, #20
    4a4a:	46bd      	mov	sp, r7
    4a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a50:	4770      	bx	lr

00004a52 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4a52:	b480      	push	{r7}
    4a54:	b085      	sub	sp, #20
    4a56:	af00      	add	r7, sp, #0
    4a58:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4a60:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4a62:	7bfb      	ldrb	r3, [r7, #15]
    4a64:	091b      	lsrs	r3, r3, #4
    4a66:	b2db      	uxtb	r3, r3
    4a68:	f003 0301 	and.w	r3, r3, #1
    4a6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4a6e:	7bfb      	ldrb	r3, [r7, #15]
    4a70:	2b00      	cmp	r3, #0
    4a72:	bf14      	ite	ne
    4a74:	2301      	movne	r3, #1
    4a76:	2300      	moveq	r3, #0
    4a78:	b2db      	uxtb	r3, r3
}
    4a7a:	4618      	mov	r0, r3
    4a7c:	3714      	adds	r7, #20
    4a7e:	46bd      	mov	sp, r7
    4a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a84:	4770      	bx	lr
	...

00004a88 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4a8e:	4b0a      	ldr	r3, [pc, #40]	; (4ab8 <_oscctrl_init_sources+0x30>)
    4a90:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4a92:	4a0a      	ldr	r2, [pc, #40]	; (4abc <_oscctrl_init_sources+0x34>)
    4a94:	2101      	movs	r1, #1
    4a96:	6878      	ldr	r0, [r7, #4]
    4a98:	4b09      	ldr	r3, [pc, #36]	; (4ac0 <_oscctrl_init_sources+0x38>)
    4a9a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4a9c:	bf00      	nop
    4a9e:	6878      	ldr	r0, [r7, #4]
    4aa0:	4b08      	ldr	r3, [pc, #32]	; (4ac4 <_oscctrl_init_sources+0x3c>)
    4aa2:	4798      	blx	r3
    4aa4:	4603      	mov	r3, r0
    4aa6:	f083 0301 	eor.w	r3, r3, #1
    4aaa:	b2db      	uxtb	r3, r3
    4aac:	2b00      	cmp	r3, #0
    4aae:	d1f6      	bne.n	4a9e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4ab0:	bf00      	nop
    4ab2:	3708      	adds	r7, #8
    4ab4:	46bd      	mov	sp, r7
    4ab6:	bd80      	pop	{r7, pc}
    4ab8:	40001000 	.word	0x40001000
    4abc:	03002606 	.word	0x03002606
    4ac0:	000048d1 	.word	0x000048d1
    4ac4:	0000485b 	.word	0x0000485b

00004ac8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4ac8:	b580      	push	{r7, lr}
    4aca:	b084      	sub	sp, #16
    4acc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4ace:	4b6b      	ldr	r3, [pc, #428]	; (4c7c <_oscctrl_init_referenced_generators+0x1b4>)
    4ad0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4ad2:	2204      	movs	r2, #4
    4ad4:	2100      	movs	r1, #0
    4ad6:	486a      	ldr	r0, [pc, #424]	; (4c80 <_oscctrl_init_referenced_generators+0x1b8>)
    4ad8:	4b6a      	ldr	r3, [pc, #424]	; (4c84 <_oscctrl_init_referenced_generators+0x1bc>)
    4ada:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4adc:	bf00      	nop
    4ade:	4868      	ldr	r0, [pc, #416]	; (4c80 <_oscctrl_init_referenced_generators+0x1b8>)
    4ae0:	4b69      	ldr	r3, [pc, #420]	; (4c88 <_oscctrl_init_referenced_generators+0x1c0>)
    4ae2:	4798      	blx	r3
    4ae4:	4603      	mov	r3, r0
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d1f9      	bne.n	4ade <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4aea:	2100      	movs	r1, #0
    4aec:	68f8      	ldr	r0, [r7, #12]
    4aee:	4b67      	ldr	r3, [pc, #412]	; (4c8c <_oscctrl_init_referenced_generators+0x1c4>)
    4af0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4af2:	4967      	ldr	r1, [pc, #412]	; (4c90 <_oscctrl_init_referenced_generators+0x1c8>)
    4af4:	68f8      	ldr	r0, [r7, #12]
    4af6:	4b67      	ldr	r3, [pc, #412]	; (4c94 <_oscctrl_init_referenced_generators+0x1cc>)
    4af8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4afa:	bf00      	nop
    4afc:	68f8      	ldr	r0, [r7, #12]
    4afe:	4b66      	ldr	r3, [pc, #408]	; (4c98 <_oscctrl_init_referenced_generators+0x1d0>)
    4b00:	4798      	blx	r3
    4b02:	4603      	mov	r3, r0
    4b04:	2b00      	cmp	r3, #0
    4b06:	d1f9      	bne.n	4afc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4b08:	2100      	movs	r1, #0
    4b0a:	68f8      	ldr	r0, [r7, #12]
    4b0c:	4b63      	ldr	r3, [pc, #396]	; (4c9c <_oscctrl_init_referenced_generators+0x1d4>)
    4b0e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4b10:	bf00      	nop
    4b12:	68f8      	ldr	r0, [r7, #12]
    4b14:	4b62      	ldr	r3, [pc, #392]	; (4ca0 <_oscctrl_init_referenced_generators+0x1d8>)
    4b16:	4798      	blx	r3
    4b18:	4603      	mov	r3, r0
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d1f9      	bne.n	4b12 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4b1e:	2302      	movs	r3, #2
    4b20:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4b22:	7afb      	ldrb	r3, [r7, #11]
    4b24:	4619      	mov	r1, r3
    4b26:	68f8      	ldr	r0, [r7, #12]
    4b28:	4b58      	ldr	r3, [pc, #352]	; (4c8c <_oscctrl_init_referenced_generators+0x1c4>)
    4b2a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4b2c:	bf00      	nop
    4b2e:	68f8      	ldr	r0, [r7, #12]
    4b30:	4b5c      	ldr	r3, [pc, #368]	; (4ca4 <_oscctrl_init_referenced_generators+0x1dc>)
    4b32:	4798      	blx	r3
    4b34:	4603      	mov	r3, r0
    4b36:	2b00      	cmp	r3, #0
    4b38:	d1f9      	bne.n	4b2e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4b3a:	68f8      	ldr	r0, [r7, #12]
    4b3c:	4b5a      	ldr	r3, [pc, #360]	; (4ca8 <_oscctrl_init_referenced_generators+0x1e0>)
    4b3e:	4798      	blx	r3
    4b40:	4603      	mov	r3, r0
    4b42:	4619      	mov	r1, r3
    4b44:	68f8      	ldr	r0, [r7, #12]
    4b46:	4b59      	ldr	r3, [pc, #356]	; (4cac <_oscctrl_init_referenced_generators+0x1e4>)
    4b48:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4b4a:	bf00      	nop
    4b4c:	68f8      	ldr	r0, [r7, #12]
    4b4e:	4b58      	ldr	r3, [pc, #352]	; (4cb0 <_oscctrl_init_referenced_generators+0x1e8>)
    4b50:	4798      	blx	r3
    4b52:	4603      	mov	r3, r0
    4b54:	2b00      	cmp	r3, #0
    4b56:	d1f9      	bne.n	4b4c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4b58:	2319      	movs	r3, #25
    4b5a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4b5c:	7afb      	ldrb	r3, [r7, #11]
    4b5e:	4619      	mov	r1, r3
    4b60:	68f8      	ldr	r0, [r7, #12]
    4b62:	4b4e      	ldr	r3, [pc, #312]	; (4c9c <_oscctrl_init_referenced_generators+0x1d4>)
    4b64:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4b66:	bf00      	nop
    4b68:	68f8      	ldr	r0, [r7, #12]
    4b6a:	4b4d      	ldr	r3, [pc, #308]	; (4ca0 <_oscctrl_init_referenced_generators+0x1d8>)
    4b6c:	4798      	blx	r3
    4b6e:	4603      	mov	r3, r0
    4b70:	2b00      	cmp	r3, #0
    4b72:	d1f9      	bne.n	4b68 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4b74:	2245      	movs	r2, #69	; 0x45
    4b76:	2101      	movs	r1, #1
    4b78:	4841      	ldr	r0, [pc, #260]	; (4c80 <_oscctrl_init_referenced_generators+0x1b8>)
    4b7a:	4b4e      	ldr	r3, [pc, #312]	; (4cb4 <_oscctrl_init_referenced_generators+0x1ec>)
    4b7c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4b7e:	223b      	movs	r2, #59	; 0x3b
    4b80:	2100      	movs	r1, #0
    4b82:	68f8      	ldr	r0, [r7, #12]
    4b84:	4b4c      	ldr	r3, [pc, #304]	; (4cb8 <_oscctrl_init_referenced_generators+0x1f0>)
    4b86:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4b88:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4b8c:	2100      	movs	r1, #0
    4b8e:	68f8      	ldr	r0, [r7, #12]
    4b90:	4b4a      	ldr	r3, [pc, #296]	; (4cbc <_oscctrl_init_referenced_generators+0x1f4>)
    4b92:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4b94:	2242      	movs	r2, #66	; 0x42
    4b96:	2100      	movs	r1, #0
    4b98:	68f8      	ldr	r0, [r7, #12]
    4b9a:	4b49      	ldr	r3, [pc, #292]	; (4cc0 <_oscctrl_init_referenced_generators+0x1f8>)
    4b9c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4b9e:	4a49      	ldr	r2, [pc, #292]	; (4cc4 <_oscctrl_init_referenced_generators+0x1fc>)
    4ba0:	2101      	movs	r1, #1
    4ba2:	68f8      	ldr	r0, [r7, #12]
    4ba4:	4b44      	ldr	r3, [pc, #272]	; (4cb8 <_oscctrl_init_referenced_generators+0x1f0>)
    4ba6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4ba8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4bac:	2101      	movs	r1, #1
    4bae:	68f8      	ldr	r0, [r7, #12]
    4bb0:	4b42      	ldr	r3, [pc, #264]	; (4cbc <_oscctrl_init_referenced_generators+0x1f4>)
    4bb2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4bb4:	2202      	movs	r2, #2
    4bb6:	2101      	movs	r1, #1
    4bb8:	68f8      	ldr	r0, [r7, #12]
    4bba:	4b41      	ldr	r3, [pc, #260]	; (4cc0 <_oscctrl_init_referenced_generators+0x1f8>)
    4bbc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4bbe:	68f8      	ldr	r0, [r7, #12]
    4bc0:	4b41      	ldr	r3, [pc, #260]	; (4cc8 <_oscctrl_init_referenced_generators+0x200>)
    4bc2:	4798      	blx	r3
    4bc4:	4603      	mov	r3, r0
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d00c      	beq.n	4be4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    4bca:	f44f 6310 	mov.w	r3, #2304	; 0x900
    4bce:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4bd0:	bf00      	nop
    4bd2:	6879      	ldr	r1, [r7, #4]
    4bd4:	68f8      	ldr	r0, [r7, #12]
    4bd6:	4b3d      	ldr	r3, [pc, #244]	; (4ccc <_oscctrl_init_referenced_generators+0x204>)
    4bd8:	4798      	blx	r3
    4bda:	4602      	mov	r2, r0
    4bdc:	687b      	ldr	r3, [r7, #4]
    4bde:	429a      	cmp	r2, r3
    4be0:	d1f7      	bne.n	4bd2 <_oscctrl_init_referenced_generators+0x10a>
    4be2:	e009      	b.n	4bf8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4be4:	bf00      	nop
    4be6:	68f8      	ldr	r0, [r7, #12]
    4be8:	4b39      	ldr	r3, [pc, #228]	; (4cd0 <_oscctrl_init_referenced_generators+0x208>)
    4bea:	4798      	blx	r3
    4bec:	4603      	mov	r3, r0
    4bee:	f083 0301 	eor.w	r3, r3, #1
    4bf2:	b2db      	uxtb	r3, r3
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d1f6      	bne.n	4be6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4bf8:	bf00      	nop
    4bfa:	2100      	movs	r1, #0
    4bfc:	68f8      	ldr	r0, [r7, #12]
    4bfe:	4b35      	ldr	r3, [pc, #212]	; (4cd4 <_oscctrl_init_referenced_generators+0x20c>)
    4c00:	4798      	blx	r3
    4c02:	4603      	mov	r3, r0
    4c04:	f083 0301 	eor.w	r3, r3, #1
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d009      	beq.n	4c22 <_oscctrl_init_referenced_generators+0x15a>
    4c0e:	2100      	movs	r1, #0
    4c10:	68f8      	ldr	r0, [r7, #12]
    4c12:	4b31      	ldr	r3, [pc, #196]	; (4cd8 <_oscctrl_init_referenced_generators+0x210>)
    4c14:	4798      	blx	r3
    4c16:	4603      	mov	r3, r0
    4c18:	f083 0301 	eor.w	r3, r3, #1
    4c1c:	b2db      	uxtb	r3, r3
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d1eb      	bne.n	4bfa <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4c22:	bf00      	nop
    4c24:	2101      	movs	r1, #1
    4c26:	68f8      	ldr	r0, [r7, #12]
    4c28:	4b2a      	ldr	r3, [pc, #168]	; (4cd4 <_oscctrl_init_referenced_generators+0x20c>)
    4c2a:	4798      	blx	r3
    4c2c:	4603      	mov	r3, r0
    4c2e:	f083 0301 	eor.w	r3, r3, #1
    4c32:	b2db      	uxtb	r3, r3
    4c34:	2b00      	cmp	r3, #0
    4c36:	d009      	beq.n	4c4c <_oscctrl_init_referenced_generators+0x184>
    4c38:	2101      	movs	r1, #1
    4c3a:	68f8      	ldr	r0, [r7, #12]
    4c3c:	4b26      	ldr	r3, [pc, #152]	; (4cd8 <_oscctrl_init_referenced_generators+0x210>)
    4c3e:	4798      	blx	r3
    4c40:	4603      	mov	r3, r0
    4c42:	f083 0301 	eor.w	r3, r3, #1
    4c46:	b2db      	uxtb	r3, r3
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d1eb      	bne.n	4c24 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4c4c:	bf00      	nop
    4c4e:	480c      	ldr	r0, [pc, #48]	; (4c80 <_oscctrl_init_referenced_generators+0x1b8>)
    4c50:	4b22      	ldr	r3, [pc, #136]	; (4cdc <_oscctrl_init_referenced_generators+0x214>)
    4c52:	4798      	blx	r3
    4c54:	4603      	mov	r3, r0
    4c56:	2b00      	cmp	r3, #0
    4c58:	d1f9      	bne.n	4c4e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    4c5a:	2207      	movs	r2, #7
    4c5c:	2100      	movs	r1, #0
    4c5e:	4808      	ldr	r0, [pc, #32]	; (4c80 <_oscctrl_init_referenced_generators+0x1b8>)
    4c60:	4b08      	ldr	r3, [pc, #32]	; (4c84 <_oscctrl_init_referenced_generators+0x1bc>)
    4c62:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4c64:	bf00      	nop
    4c66:	4806      	ldr	r0, [pc, #24]	; (4c80 <_oscctrl_init_referenced_generators+0x1b8>)
    4c68:	4b07      	ldr	r3, [pc, #28]	; (4c88 <_oscctrl_init_referenced_generators+0x1c0>)
    4c6a:	4798      	blx	r3
    4c6c:	4603      	mov	r3, r0
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d1f9      	bne.n	4c66 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    4c72:	bf00      	nop
    4c74:	3710      	adds	r7, #16
    4c76:	46bd      	mov	sp, r7
    4c78:	bd80      	pop	{r7, pc}
    4c7a:	bf00      	nop
    4c7c:	40001000 	.word	0x40001000
    4c80:	40001c00 	.word	0x40001c00
    4c84:	00004695 	.word	0x00004695
    4c88:	00004655 	.word	0x00004655
    4c8c:	000048f9 	.word	0x000048f9
    4c90:	0401bb80 	.word	0x0401bb80
    4c94:	0000499b 	.word	0x0000499b
    4c98:	00004a53 	.word	0x00004a53
    4c9c:	00004947 	.word	0x00004947
    4ca0:	000049eb 	.word	0x000049eb
    4ca4:	000049b7 	.word	0x000049b7
    4ca8:	00004983 	.word	0x00004983
    4cac:	00004967 	.word	0x00004967
    4cb0:	00004a1f 	.word	0x00004a1f
    4cb4:	000046e5 	.word	0x000046e5
    4cb8:	000047f1 	.word	0x000047f1
    4cbc:	0000482d 	.word	0x0000482d
    4cc0:	000047b5 	.word	0x000047b5
    4cc4:	000407a0 	.word	0x000407a0
    4cc8:	00004917 	.word	0x00004917
    4ccc:	000048ab 	.word	0x000048ab
    4cd0:	00004883 	.word	0x00004883
    4cd4:	00004741 	.word	0x00004741
    4cd8:	00004779 	.word	0x00004779
    4cdc:	0000467d 	.word	0x0000467d

00004ce0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    4ce0:	b480      	push	{r7}
    4ce2:	b083      	sub	sp, #12
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	69db      	ldr	r3, [r3, #28]
    4cec:	0a9b      	lsrs	r3, r3, #10
    4cee:	f003 0301 	and.w	r3, r3, #1
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	bf14      	ite	ne
    4cf6:	2301      	movne	r3, #1
    4cf8:	2300      	moveq	r3, #0
    4cfa:	b2db      	uxtb	r3, r3
}
    4cfc:	4618      	mov	r0, r3
    4cfe:	370c      	adds	r7, #12
    4d00:	46bd      	mov	sp, r7
    4d02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d06:	4770      	bx	lr

00004d08 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    4d08:	b480      	push	{r7}
    4d0a:	b083      	sub	sp, #12
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4d16:	61da      	str	r2, [r3, #28]
}
    4d18:	bf00      	nop
    4d1a:	370c      	adds	r7, #12
    4d1c:	46bd      	mov	sp, r7
    4d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d22:	4770      	bx	lr

00004d24 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    4d24:	b480      	push	{r7}
    4d26:	b083      	sub	sp, #12
    4d28:	af00      	add	r7, sp, #0
    4d2a:	6078      	str	r0, [r7, #4]
    4d2c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    4d2e:	687b      	ldr	r3, [r7, #4]
    4d30:	683a      	ldr	r2, [r7, #0]
    4d32:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4d34:	bf00      	nop
    4d36:	370c      	adds	r7, #12
    4d38:	46bd      	mov	sp, r7
    4d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d3e:	4770      	bx	lr

00004d40 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    4d40:	b480      	push	{r7}
    4d42:	b083      	sub	sp, #12
    4d44:	af00      	add	r7, sp, #0
    4d46:	6078      	str	r0, [r7, #4]
    4d48:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	683a      	ldr	r2, [r7, #0]
    4d4e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4d50:	bf00      	nop
    4d52:	370c      	adds	r7, #12
    4d54:	46bd      	mov	sp, r7
    4d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5a:	4770      	bx	lr

00004d5c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    4d5c:	b480      	push	{r7}
    4d5e:	b083      	sub	sp, #12
    4d60:	af00      	add	r7, sp, #0
    4d62:	6078      	str	r0, [r7, #4]
    4d64:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	683a      	ldr	r2, [r7, #0]
    4d6a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4d6c:	bf00      	nop
    4d6e:	370c      	adds	r7, #12
    4d70:	46bd      	mov	sp, r7
    4d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d76:	4770      	bx	lr

00004d78 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	683a      	ldr	r2, [r7, #0]
    4d86:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4d88:	bf00      	nop
    4d8a:	370c      	adds	r7, #12
    4d8c:	46bd      	mov	sp, r7
    4d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d92:	4770      	bx	lr

00004d94 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4d94:	b480      	push	{r7}
    4d96:	b085      	sub	sp, #20
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4da2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    4da4:	68fb      	ldr	r3, [r7, #12]
    4da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4daa:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    4dac:	683b      	ldr	r3, [r7, #0]
    4dae:	b2db      	uxtb	r3, r3
    4db0:	68fa      	ldr	r2, [r7, #12]
    4db2:	4313      	orrs	r3, r2
    4db4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4db6:	687b      	ldr	r3, [r7, #4]
    4db8:	68fa      	ldr	r2, [r7, #12]
    4dba:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4dbc:	bf00      	nop
    4dbe:	3714      	adds	r7, #20
    4dc0:	46bd      	mov	sp, r7
    4dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc6:	4770      	bx	lr

00004dc8 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4dc8:	b480      	push	{r7}
    4dca:	b085      	sub	sp, #20
    4dcc:	af00      	add	r7, sp, #0
    4dce:	6078      	str	r0, [r7, #4]
    4dd0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4dd6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    4dd8:	68fb      	ldr	r3, [r7, #12]
    4dda:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    4dde:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    4de0:	683b      	ldr	r3, [r7, #0]
    4de2:	041b      	lsls	r3, r3, #16
    4de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4de8:	68fa      	ldr	r2, [r7, #12]
    4dea:	4313      	orrs	r3, r2
    4dec:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	68fa      	ldr	r2, [r7, #12]
    4df2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4df4:	bf00      	nop
    4df6:	3714      	adds	r7, #20
    4df8:	46bd      	mov	sp, r7
    4dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfe:	4770      	bx	lr

00004e00 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    4e00:	b480      	push	{r7}
    4e02:	b083      	sub	sp, #12
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
    4e08:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	683a      	ldr	r2, [r7, #0]
    4e0e:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4e10:	bf00      	nop
    4e12:	370c      	adds	r7, #12
    4e14:	46bd      	mov	sp, r7
    4e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e1a:	4770      	bx	lr

00004e1c <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    4e1c:	b480      	push	{r7}
    4e1e:	b083      	sub	sp, #12
    4e20:	af00      	add	r7, sp, #0
    4e22:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    4e28:	4618      	mov	r0, r3
    4e2a:	370c      	adds	r7, #12
    4e2c:	46bd      	mov	sp, r7
    4e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e32:	4770      	bx	lr

00004e34 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    4e34:	b480      	push	{r7}
    4e36:	b085      	sub	sp, #20
    4e38:	af00      	add	r7, sp, #0
    4e3a:	60f8      	str	r0, [r7, #12]
    4e3c:	60b9      	str	r1, [r7, #8]
    4e3e:	607a      	str	r2, [r7, #4]
	while (count--) {
    4e40:	e007      	b.n	4e52 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    4e42:	68fb      	ldr	r3, [r7, #12]
    4e44:	1c5a      	adds	r2, r3, #1
    4e46:	60fa      	str	r2, [r7, #12]
    4e48:	68ba      	ldr	r2, [r7, #8]
    4e4a:	1c51      	adds	r1, r2, #1
    4e4c:	60b9      	str	r1, [r7, #8]
    4e4e:	7812      	ldrb	r2, [r2, #0]
    4e50:	701a      	strb	r2, [r3, #0]
	while (count--) {
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	1e5a      	subs	r2, r3, #1
    4e56:	607a      	str	r2, [r7, #4]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d1f2      	bne.n	4e42 <_qspi_memcpy+0xe>
	}
}
    4e5c:	bf00      	nop
    4e5e:	3714      	adds	r7, #20
    4e60:	46bd      	mov	sp, r7
    4e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e66:	4770      	bx	lr

00004e68 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	b082      	sub	sp, #8
    4e6c:	af00      	add	r7, sp, #0
    4e6e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    4e70:	4903      	ldr	r1, [pc, #12]	; (4e80 <_qspi_end_transfer+0x18>)
    4e72:	6878      	ldr	r0, [r7, #4]
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <_qspi_end_transfer+0x1c>)
    4e76:	4798      	blx	r3
}
    4e78:	bf00      	nop
    4e7a:	3708      	adds	r7, #8
    4e7c:	46bd      	mov	sp, r7
    4e7e:	bd80      	pop	{r7, pc}
    4e80:	01000002 	.word	0x01000002
    4e84:	00004d25 	.word	0x00004d25

00004e88 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b082      	sub	sp, #8
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	6078      	str	r0, [r7, #4]
    4e90:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d004      	beq.n	4ea2 <_qspi_sync_init+0x1a>
    4e98:	683b      	ldr	r3, [r7, #0]
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d001      	beq.n	4ea2 <_qspi_sync_init+0x1a>
    4e9e:	2301      	movs	r3, #1
    4ea0:	e000      	b.n	4ea4 <_qspi_sync_init+0x1c>
    4ea2:	2300      	movs	r3, #0
    4ea4:	f003 0301 	and.w	r3, r3, #1
    4ea8:	b2db      	uxtb	r3, r3
    4eaa:	2240      	movs	r2, #64	; 0x40
    4eac:	490c      	ldr	r1, [pc, #48]	; (4ee0 <_qspi_sync_init+0x58>)
    4eae:	4618      	mov	r0, r3
    4eb0:	4b0c      	ldr	r3, [pc, #48]	; (4ee4 <_qspi_sync_init+0x5c>)
    4eb2:	4798      	blx	r3
	dev->prvt = hw;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	683a      	ldr	r2, [r7, #0]
    4eb8:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	2101      	movs	r1, #1
    4ec0:	4618      	mov	r0, r3
    4ec2:	4b09      	ldr	r3, [pc, #36]	; (4ee8 <_qspi_sync_init+0x60>)
    4ec4:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    4ec6:	4909      	ldr	r1, [pc, #36]	; (4eec <_qspi_sync_init+0x64>)
    4ec8:	6838      	ldr	r0, [r7, #0]
    4eca:	4b09      	ldr	r3, [pc, #36]	; (4ef0 <_qspi_sync_init+0x68>)
    4ecc:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    4ece:	4909      	ldr	r1, [pc, #36]	; (4ef4 <_qspi_sync_init+0x6c>)
    4ed0:	6838      	ldr	r0, [r7, #0]
    4ed2:	4b09      	ldr	r3, [pc, #36]	; (4ef8 <_qspi_sync_init+0x70>)
    4ed4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    4ed6:	2300      	movs	r3, #0
}
    4ed8:	4618      	mov	r0, r3
    4eda:	3708      	adds	r7, #8
    4edc:	46bd      	mov	sp, r7
    4ede:	bd80      	pop	{r7, pc}
    4ee0:	0000d674 	.word	0x0000d674
    4ee4:	00003079 	.word	0x00003079
    4ee8:	00004d25 	.word	0x00004d25
    4eec:	06000011 	.word	0x06000011
    4ef0:	00004d41 	.word	0x00004d41
    4ef4:	00241300 	.word	0x00241300
    4ef8:	00004d5d 	.word	0x00004d5d

00004efc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    4efc:	b580      	push	{r7, lr}
    4efe:	b082      	sub	sp, #8
    4f00:	af00      	add	r7, sp, #0
    4f02:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	2102      	movs	r1, #2
    4f0a:	4618      	mov	r0, r3
    4f0c:	4b03      	ldr	r3, [pc, #12]	; (4f1c <_qspi_sync_enable+0x20>)
    4f0e:	4798      	blx	r3
	return ERR_NONE;
    4f10:	2300      	movs	r3, #0
}
    4f12:	4618      	mov	r0, r3
    4f14:	3708      	adds	r7, #8
    4f16:	46bd      	mov	sp, r7
    4f18:	bd80      	pop	{r7, pc}
    4f1a:	bf00      	nop
    4f1c:	00004d25 	.word	0x00004d25

00004f20 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    4f20:	b580      	push	{r7, lr}
    4f22:	b082      	sub	sp, #8
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	2100      	movs	r1, #0
    4f2e:	4618      	mov	r0, r3
    4f30:	4b03      	ldr	r3, [pc, #12]	; (4f40 <_qspi_sync_disable+0x20>)
    4f32:	4798      	blx	r3
	return ERR_NONE;
    4f34:	2300      	movs	r3, #0
}
    4f36:	4618      	mov	r0, r3
    4f38:	3708      	adds	r7, #8
    4f3a:	46bd      	mov	sp, r7
    4f3c:	bd80      	pop	{r7, pc}
    4f3e:	bf00      	nop
    4f40:	00004d25 	.word	0x00004d25

00004f44 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b084      	sub	sp, #16
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
    4f4c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    4f4e:	687b      	ldr	r3, [r7, #4]
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    4f54:	683b      	ldr	r3, [r7, #0]
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	f003 0320 	and.w	r3, r3, #32
    4f5c:	b2db      	uxtb	r3, r3
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d005      	beq.n	4f6e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    4f62:	683b      	ldr	r3, [r7, #0]
    4f64:	689b      	ldr	r3, [r3, #8]
    4f66:	4619      	mov	r1, r3
    4f68:	68f8      	ldr	r0, [r7, #12]
    4f6a:	4b13      	ldr	r3, [pc, #76]	; (4fb8 <_qspi_sync_command_set_ifr+0x74>)
    4f6c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    4f6e:	683b      	ldr	r3, [r7, #0]
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	f003 0310 	and.w	r3, r3, #16
    4f76:	b2db      	uxtb	r3, r3
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d005      	beq.n	4f88 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    4f7c:	683b      	ldr	r3, [r7, #0]
    4f7e:	791b      	ldrb	r3, [r3, #4]
    4f80:	4619      	mov	r1, r3
    4f82:	68f8      	ldr	r0, [r7, #12]
    4f84:	4b0d      	ldr	r3, [pc, #52]	; (4fbc <_qspi_sync_command_set_ifr+0x78>)
    4f86:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    4f88:	683b      	ldr	r3, [r7, #0]
    4f8a:	781b      	ldrb	r3, [r3, #0]
    4f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4f90:	b2db      	uxtb	r3, r3
    4f92:	2b00      	cmp	r3, #0
    4f94:	d005      	beq.n	4fa2 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    4f96:	683b      	ldr	r3, [r7, #0]
    4f98:	795b      	ldrb	r3, [r3, #5]
    4f9a:	4619      	mov	r1, r3
    4f9c:	68f8      	ldr	r0, [r7, #12]
    4f9e:	4b08      	ldr	r3, [pc, #32]	; (4fc0 <_qspi_sync_command_set_ifr+0x7c>)
    4fa0:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    4fa2:	683b      	ldr	r3, [r7, #0]
    4fa4:	681b      	ldr	r3, [r3, #0]
    4fa6:	4619      	mov	r1, r3
    4fa8:	68f8      	ldr	r0, [r7, #12]
    4faa:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <_qspi_sync_command_set_ifr+0x80>)
    4fac:	4798      	blx	r3
}
    4fae:	bf00      	nop
    4fb0:	3710      	adds	r7, #16
    4fb2:	46bd      	mov	sp, r7
    4fb4:	bd80      	pop	{r7, pc}
    4fb6:	bf00      	nop
    4fb8:	00004d79 	.word	0x00004d79
    4fbc:	00004d95 	.word	0x00004d95
    4fc0:	00004dc9 	.word	0x00004dc9
    4fc4:	00004e01 	.word	0x00004e01

00004fc8 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4fc8:	b580      	push	{r7, lr}
    4fca:	b084      	sub	sp, #16
    4fcc:	af00      	add	r7, sp, #0
    4fce:	6078      	str	r0, [r7, #4]
    4fd0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    4fd2:	687b      	ldr	r3, [r7, #4]
    4fd4:	681b      	ldr	r3, [r3, #0]
    4fd6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    4fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4fdc:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    4fde:	683b      	ldr	r3, [r7, #0]
    4fe0:	781b      	ldrb	r3, [r3, #0]
    4fe2:	f003 0320 	and.w	r3, r3, #32
    4fe6:	b2db      	uxtb	r3, r3
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d004      	beq.n	4ff6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    4fec:	683b      	ldr	r3, [r7, #0]
    4fee:	689b      	ldr	r3, [r3, #8]
    4ff0:	68fa      	ldr	r2, [r7, #12]
    4ff2:	4413      	add	r3, r2
    4ff4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    4ff6:	68b8      	ldr	r0, [r7, #8]
    4ff8:	4b18      	ldr	r3, [pc, #96]	; (505c <_qspi_sync_run_transfer+0x94>)
    4ffa:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    4ffc:	683b      	ldr	r3, [r7, #0]
    4ffe:	691b      	ldr	r3, [r3, #16]
    5000:	2b00      	cmp	r3, #0
    5002:	d103      	bne.n	500c <_qspi_sync_run_transfer+0x44>
    5004:	683b      	ldr	r3, [r7, #0]
    5006:	695b      	ldr	r3, [r3, #20]
    5008:	2b00      	cmp	r3, #0
    500a:	d001      	beq.n	5010 <_qspi_sync_run_transfer+0x48>
    500c:	2301      	movs	r3, #1
    500e:	e000      	b.n	5012 <_qspi_sync_run_transfer+0x4a>
    5010:	2300      	movs	r3, #0
    5012:	f003 0301 	and.w	r3, r3, #1
    5016:	b2db      	uxtb	r3, r3
    5018:	2282      	movs	r2, #130	; 0x82
    501a:	4911      	ldr	r1, [pc, #68]	; (5060 <_qspi_sync_run_transfer+0x98>)
    501c:	4618      	mov	r0, r3
    501e:	4b11      	ldr	r3, [pc, #68]	; (5064 <_qspi_sync_run_transfer+0x9c>)
    5020:	4798      	blx	r3

	if (cmd->tx_buf) {
    5022:	683b      	ldr	r3, [r7, #0]
    5024:	691b      	ldr	r3, [r3, #16]
    5026:	2b00      	cmp	r3, #0
    5028:	d008      	beq.n	503c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    502a:	683b      	ldr	r3, [r7, #0]
    502c:	6919      	ldr	r1, [r3, #16]
    502e:	683b      	ldr	r3, [r7, #0]
    5030:	68db      	ldr	r3, [r3, #12]
    5032:	461a      	mov	r2, r3
    5034:	68f8      	ldr	r0, [r7, #12]
    5036:	4b0c      	ldr	r3, [pc, #48]	; (5068 <_qspi_sync_run_transfer+0xa0>)
    5038:	4798      	blx	r3
    503a:	e007      	b.n	504c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    503c:	683b      	ldr	r3, [r7, #0]
    503e:	6958      	ldr	r0, [r3, #20]
    5040:	683b      	ldr	r3, [r7, #0]
    5042:	68db      	ldr	r3, [r3, #12]
    5044:	461a      	mov	r2, r3
    5046:	68f9      	ldr	r1, [r7, #12]
    5048:	4b07      	ldr	r3, [pc, #28]	; (5068 <_qspi_sync_run_transfer+0xa0>)
    504a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    504c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5050:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5054:	bf00      	nop
    5056:	3710      	adds	r7, #16
    5058:	46bd      	mov	sp, r7
    505a:	bd80      	pop	{r7, pc}
    505c:	00004e1d 	.word	0x00004e1d
    5060:	0000d674 	.word	0x0000d674
    5064:	00003079 	.word	0x00003079
    5068:	00004e35 	.word	0x00004e35

0000506c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    506c:	b580      	push	{r7, lr}
    506e:	b082      	sub	sp, #8
    5070:	af00      	add	r7, sp, #0
    5072:	6078      	str	r0, [r7, #4]
    5074:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5076:	6839      	ldr	r1, [r7, #0]
    5078:	6878      	ldr	r0, [r7, #4]
    507a:	4b14      	ldr	r3, [pc, #80]	; (50cc <_qspi_sync_serial_run_command+0x60>)
    507c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    507e:	683b      	ldr	r3, [r7, #0]
    5080:	781b      	ldrb	r3, [r3, #0]
    5082:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5086:	b2db      	uxtb	r3, r3
    5088:	2b00      	cmp	r3, #0
    508a:	d003      	beq.n	5094 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    508c:	6839      	ldr	r1, [r7, #0]
    508e:	6878      	ldr	r0, [r7, #4]
    5090:	4b0f      	ldr	r3, [pc, #60]	; (50d0 <_qspi_sync_serial_run_command+0x64>)
    5092:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	681b      	ldr	r3, [r3, #0]
    5098:	4618      	mov	r0, r3
    509a:	4b0e      	ldr	r3, [pc, #56]	; (50d4 <_qspi_sync_serial_run_command+0x68>)
    509c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    509e:	bf00      	nop
    50a0:	687b      	ldr	r3, [r7, #4]
    50a2:	681b      	ldr	r3, [r3, #0]
    50a4:	4618      	mov	r0, r3
    50a6:	4b0c      	ldr	r3, [pc, #48]	; (50d8 <_qspi_sync_serial_run_command+0x6c>)
    50a8:	4798      	blx	r3
    50aa:	4603      	mov	r3, r0
    50ac:	f083 0301 	eor.w	r3, r3, #1
    50b0:	b2db      	uxtb	r3, r3
    50b2:	2b00      	cmp	r3, #0
    50b4:	d1f4      	bne.n	50a0 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    50b6:	687b      	ldr	r3, [r7, #4]
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	4618      	mov	r0, r3
    50bc:	4b07      	ldr	r3, [pc, #28]	; (50dc <_qspi_sync_serial_run_command+0x70>)
    50be:	4798      	blx	r3
	return ERR_NONE;
    50c0:	2300      	movs	r3, #0
}
    50c2:	4618      	mov	r0, r3
    50c4:	3708      	adds	r7, #8
    50c6:	46bd      	mov	sp, r7
    50c8:	bd80      	pop	{r7, pc}
    50ca:	bf00      	nop
    50cc:	00004f45 	.word	0x00004f45
    50d0:	00004fc9 	.word	0x00004fc9
    50d4:	00004e69 	.word	0x00004e69
    50d8:	00004ce1 	.word	0x00004ce1
    50dc:	00004d09 	.word	0x00004d09

000050e0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    50e0:	b480      	push	{r7}
    50e2:	b083      	sub	sp, #12
    50e4:	af00      	add	r7, sp, #0
    50e6:	6078      	str	r0, [r7, #4]
    50e8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    50ea:	bf00      	nop
    50ec:	687b      	ldr	r3, [r7, #4]
    50ee:	691a      	ldr	r2, [r3, #16]
    50f0:	683b      	ldr	r3, [r7, #0]
    50f2:	4013      	ands	r3, r2
    50f4:	2b00      	cmp	r3, #0
    50f6:	d1f9      	bne.n	50ec <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    50f8:	bf00      	nop
    50fa:	370c      	adds	r7, #12
    50fc:	46bd      	mov	sp, r7
    50fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5102:	4770      	bx	lr

00005104 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5104:	b480      	push	{r7}
    5106:	b083      	sub	sp, #12
    5108:	af00      	add	r7, sp, #0
    510a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5112:	819a      	strh	r2, [r3, #12]
}
    5114:	bf00      	nop
    5116:	370c      	adds	r7, #12
    5118:	46bd      	mov	sp, r7
    511a:	f85d 7b04 	ldr.w	r7, [sp], #4
    511e:	4770      	bx	lr

00005120 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5120:	b480      	push	{r7}
    5122:	b083      	sub	sp, #12
    5124:	af00      	add	r7, sp, #0
    5126:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5128:	687b      	ldr	r3, [r7, #4]
    512a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    512e:	819a      	strh	r2, [r3, #12]
}
    5130:	bf00      	nop
    5132:	370c      	adds	r7, #12
    5134:	46bd      	mov	sp, r7
    5136:	f85d 7b04 	ldr.w	r7, [sp], #4
    513a:	4770      	bx	lr

0000513c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    513c:	b480      	push	{r7}
    513e:	b083      	sub	sp, #12
    5140:	af00      	add	r7, sp, #0
    5142:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	899b      	ldrh	r3, [r3, #12]
    5148:	b29b      	uxth	r3, r3
}
    514a:	4618      	mov	r0, r3
    514c:	370c      	adds	r7, #12
    514e:	46bd      	mov	sp, r7
    5150:	f85d 7b04 	ldr.w	r7, [sp], #4
    5154:	4770      	bx	lr

00005156 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5156:	b480      	push	{r7}
    5158:	b083      	sub	sp, #12
    515a:	af00      	add	r7, sp, #0
    515c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    515e:	687b      	ldr	r3, [r7, #4]
    5160:	895b      	ldrh	r3, [r3, #10]
    5162:	b29b      	uxth	r3, r3
}
    5164:	4618      	mov	r0, r3
    5166:	370c      	adds	r7, #12
    5168:	46bd      	mov	sp, r7
    516a:	f85d 7b04 	ldr.w	r7, [sp], #4
    516e:	4770      	bx	lr

00005170 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	881b      	ldrh	r3, [r3, #0]
    517c:	b29b      	uxth	r3, r3
    517e:	f043 0301 	orr.w	r3, r3, #1
    5182:	b29a      	uxth	r2, r3
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5188:	2101      	movs	r1, #1
    518a:	6878      	ldr	r0, [r7, #4]
    518c:	4b02      	ldr	r3, [pc, #8]	; (5198 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    518e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5190:	bf00      	nop
    5192:	3708      	adds	r7, #8
    5194:	46bd      	mov	sp, r7
    5196:	bd80      	pop	{r7, pc}
    5198:	000050e1 	.word	0x000050e1

0000519c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    519c:	b580      	push	{r7, lr}
    519e:	b084      	sub	sp, #16
    51a0:	af00      	add	r7, sp, #0
    51a2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    51a4:	f248 0103 	movw	r1, #32771	; 0x8003
    51a8:	6878      	ldr	r0, [r7, #4]
    51aa:	4b0a      	ldr	r3, [pc, #40]	; (51d4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    51ac:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	881b      	ldrh	r3, [r3, #0]
    51b2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    51b4:	89fb      	ldrh	r3, [r7, #14]
    51b6:	085b      	lsrs	r3, r3, #1
    51b8:	b29b      	uxth	r3, r3
    51ba:	f003 0301 	and.w	r3, r3, #1
    51be:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    51c0:	89fb      	ldrh	r3, [r7, #14]
    51c2:	2b00      	cmp	r3, #0
    51c4:	bf14      	ite	ne
    51c6:	2301      	movne	r3, #1
    51c8:	2300      	moveq	r3, #0
    51ca:	b2db      	uxtb	r3, r3
}
    51cc:	4618      	mov	r0, r3
    51ce:	3710      	adds	r7, #16
    51d0:	46bd      	mov	sp, r7
    51d2:	bd80      	pop	{r7, pc}
    51d4:	000050e1 	.word	0x000050e1

000051d8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    51d8:	b580      	push	{r7, lr}
    51da:	b082      	sub	sp, #8
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    51e0:	687b      	ldr	r3, [r7, #4]
    51e2:	881b      	ldrh	r3, [r3, #0]
    51e4:	b29b      	uxth	r3, r3
    51e6:	f023 0302 	bic.w	r3, r3, #2
    51ea:	b29a      	uxth	r2, r3
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    51f0:	f248 0103 	movw	r1, #32771	; 0x8003
    51f4:	6878      	ldr	r0, [r7, #4]
    51f6:	4b03      	ldr	r3, [pc, #12]	; (5204 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    51f8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    51fa:	bf00      	nop
    51fc:	3708      	adds	r7, #8
    51fe:	46bd      	mov	sp, r7
    5200:	bd80      	pop	{r7, pc}
    5202:	bf00      	nop
    5204:	000050e1 	.word	0x000050e1

00005208 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5208:	b580      	push	{r7, lr}
    520a:	b082      	sub	sp, #8
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
    5210:	460b      	mov	r3, r1
    5212:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	887a      	ldrh	r2, [r7, #2]
    5218:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    521a:	f248 0103 	movw	r1, #32771	; 0x8003
    521e:	6878      	ldr	r0, [r7, #4]
    5220:	4b02      	ldr	r3, [pc, #8]	; (522c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5222:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5224:	bf00      	nop
    5226:	3708      	adds	r7, #8
    5228:	46bd      	mov	sp, r7
    522a:	bd80      	pop	{r7, pc}
    522c:	000050e1 	.word	0x000050e1

00005230 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5230:	b480      	push	{r7}
    5232:	b083      	sub	sp, #12
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
    5238:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	683a      	ldr	r2, [r7, #0]
    523e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5240:	bf00      	nop
    5242:	370c      	adds	r7, #12
    5244:	46bd      	mov	sp, r7
    5246:	f85d 7b04 	ldr.w	r7, [sp], #4
    524a:	4770      	bx	lr

0000524c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    524c:	b580      	push	{r7, lr}
    524e:	b082      	sub	sp, #8
    5250:	af00      	add	r7, sp, #0
    5252:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	2b00      	cmp	r3, #0
    5258:	d005      	beq.n	5266 <_calendar_init+0x1a>
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	2b00      	cmp	r3, #0
    5260:	d001      	beq.n	5266 <_calendar_init+0x1a>
    5262:	2301      	movs	r3, #1
    5264:	e000      	b.n	5268 <_calendar_init+0x1c>
    5266:	2300      	movs	r3, #0
    5268:	f003 0301 	and.w	r3, r3, #1
    526c:	b2db      	uxtb	r3, r3
    526e:	222f      	movs	r2, #47	; 0x2f
    5270:	491e      	ldr	r1, [pc, #120]	; (52ec <_calendar_init+0xa0>)
    5272:	4618      	mov	r0, r3
    5274:	4b1e      	ldr	r3, [pc, #120]	; (52f0 <_calendar_init+0xa4>)
    5276:	4798      	blx	r3

	_rtc_dev = dev;
    5278:	4a1e      	ldr	r2, [pc, #120]	; (52f4 <_calendar_init+0xa8>)
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	681b      	ldr	r3, [r3, #0]
    5282:	2101      	movs	r1, #1
    5284:	4618      	mov	r0, r3
    5286:	4b1c      	ldr	r3, [pc, #112]	; (52f8 <_calendar_init+0xac>)
    5288:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	681b      	ldr	r3, [r3, #0]
    528e:	4618      	mov	r0, r3
    5290:	4b1a      	ldr	r3, [pc, #104]	; (52fc <_calendar_init+0xb0>)
    5292:	4798      	blx	r3
    5294:	4603      	mov	r3, r0
    5296:	2b00      	cmp	r3, #0
    5298:	d00a      	beq.n	52b0 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	681b      	ldr	r3, [r3, #0]
    529e:	4618      	mov	r0, r3
    52a0:	4b17      	ldr	r3, [pc, #92]	; (5300 <_calendar_init+0xb4>)
    52a2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	2102      	movs	r1, #2
    52aa:	4618      	mov	r0, r3
    52ac:	4b12      	ldr	r3, [pc, #72]	; (52f8 <_calendar_init+0xac>)
    52ae:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	4618      	mov	r0, r3
    52b6:	4b13      	ldr	r3, [pc, #76]	; (5304 <_calendar_init+0xb8>)
    52b8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	681b      	ldr	r3, [r3, #0]
    52be:	2101      	movs	r1, #1
    52c0:	4618      	mov	r0, r3
    52c2:	4b0d      	ldr	r3, [pc, #52]	; (52f8 <_calendar_init+0xac>)
    52c4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    52ce:	4618      	mov	r0, r3
    52d0:	4b0d      	ldr	r3, [pc, #52]	; (5308 <_calendar_init+0xbc>)
    52d2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    52d8:	2100      	movs	r1, #0
    52da:	4618      	mov	r0, r3
    52dc:	4b0b      	ldr	r3, [pc, #44]	; (530c <_calendar_init+0xc0>)
    52de:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    52e0:	2300      	movs	r3, #0
}
    52e2:	4618      	mov	r0, r3
    52e4:	3708      	adds	r7, #8
    52e6:	46bd      	mov	sp, r7
    52e8:	bd80      	pop	{r7, pc}
    52ea:	bf00      	nop
    52ec:	0000d68c 	.word	0x0000d68c
    52f0:	00003079 	.word	0x00003079
    52f4:	200006ac 	.word	0x200006ac
    52f8:	000050e1 	.word	0x000050e1
    52fc:	0000519d 	.word	0x0000519d
    5300:	000051d9 	.word	0x000051d9
    5304:	00005171 	.word	0x00005171
    5308:	00005209 	.word	0x00005209
    530c:	00005231 	.word	0x00005231

00005310 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5310:	b580      	push	{r7, lr}
    5312:	b084      	sub	sp, #16
    5314:	af00      	add	r7, sp, #0
    5316:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	681b      	ldr	r3, [r3, #0]
    531c:	4618      	mov	r0, r3
    531e:	4b19      	ldr	r3, [pc, #100]	; (5384 <_rtc_interrupt_handler+0x74>)
    5320:	4798      	blx	r3
    5322:	4603      	mov	r3, r0
    5324:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	681b      	ldr	r3, [r3, #0]
    532a:	4618      	mov	r0, r3
    532c:	4b16      	ldr	r3, [pc, #88]	; (5388 <_rtc_interrupt_handler+0x78>)
    532e:	4798      	blx	r3
    5330:	4603      	mov	r3, r0
    5332:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5334:	89fa      	ldrh	r2, [r7, #14]
    5336:	89bb      	ldrh	r3, [r7, #12]
    5338:	4013      	ands	r3, r2
    533a:	b29b      	uxth	r3, r3
    533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5340:	2b00      	cmp	r3, #0
    5342:	d009      	beq.n	5358 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	685b      	ldr	r3, [r3, #4]
    5348:	6878      	ldr	r0, [r7, #4]
    534a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	4618      	mov	r0, r3
    5352:	4b0e      	ldr	r3, [pc, #56]	; (538c <_rtc_interrupt_handler+0x7c>)
    5354:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5356:	e010      	b.n	537a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5358:	89fa      	ldrh	r2, [r7, #14]
    535a:	89bb      	ldrh	r3, [r7, #12]
    535c:	4013      	ands	r3, r2
    535e:	b29b      	uxth	r3, r3
    5360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5364:	2b00      	cmp	r3, #0
    5366:	d008      	beq.n	537a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	689b      	ldr	r3, [r3, #8]
    536c:	6878      	ldr	r0, [r7, #4]
    536e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5370:	687b      	ldr	r3, [r7, #4]
    5372:	681b      	ldr	r3, [r3, #0]
    5374:	4618      	mov	r0, r3
    5376:	4b06      	ldr	r3, [pc, #24]	; (5390 <_rtc_interrupt_handler+0x80>)
    5378:	4798      	blx	r3
}
    537a:	bf00      	nop
    537c:	3710      	adds	r7, #16
    537e:	46bd      	mov	sp, r7
    5380:	bd80      	pop	{r7, pc}
    5382:	bf00      	nop
    5384:	0000513d 	.word	0x0000513d
    5388:	00005157 	.word	0x00005157
    538c:	00005105 	.word	0x00005105
    5390:	00005121 	.word	0x00005121

00005394 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5394:	b580      	push	{r7, lr}
    5396:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5398:	4b03      	ldr	r3, [pc, #12]	; (53a8 <RTC_Handler+0x14>)
    539a:	681b      	ldr	r3, [r3, #0]
    539c:	4618      	mov	r0, r3
    539e:	4b03      	ldr	r3, [pc, #12]	; (53ac <RTC_Handler+0x18>)
    53a0:	4798      	blx	r3
}
    53a2:	bf00      	nop
    53a4:	bd80      	pop	{r7, pc}
    53a6:	bf00      	nop
    53a8:	200006ac 	.word	0x200006ac
    53ac:	00005311 	.word	0x00005311

000053b0 <__NVIC_EnableIRQ>:
{
    53b0:	b480      	push	{r7}
    53b2:	b083      	sub	sp, #12
    53b4:	af00      	add	r7, sp, #0
    53b6:	4603      	mov	r3, r0
    53b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    53ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    53be:	2b00      	cmp	r3, #0
    53c0:	db0b      	blt.n	53da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    53c2:	4909      	ldr	r1, [pc, #36]	; (53e8 <__NVIC_EnableIRQ+0x38>)
    53c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    53c8:	095b      	lsrs	r3, r3, #5
    53ca:	88fa      	ldrh	r2, [r7, #6]
    53cc:	f002 021f 	and.w	r2, r2, #31
    53d0:	2001      	movs	r0, #1
    53d2:	fa00 f202 	lsl.w	r2, r0, r2
    53d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    53da:	bf00      	nop
    53dc:	370c      	adds	r7, #12
    53de:	46bd      	mov	sp, r7
    53e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e4:	4770      	bx	lr
    53e6:	bf00      	nop
    53e8:	e000e100 	.word	0xe000e100

000053ec <__NVIC_DisableIRQ>:
{
    53ec:	b480      	push	{r7}
    53ee:	b083      	sub	sp, #12
    53f0:	af00      	add	r7, sp, #0
    53f2:	4603      	mov	r3, r0
    53f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    53f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    53fa:	2b00      	cmp	r3, #0
    53fc:	db10      	blt.n	5420 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    53fe:	490b      	ldr	r1, [pc, #44]	; (542c <__NVIC_DisableIRQ+0x40>)
    5400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5404:	095b      	lsrs	r3, r3, #5
    5406:	88fa      	ldrh	r2, [r7, #6]
    5408:	f002 021f 	and.w	r2, r2, #31
    540c:	2001      	movs	r0, #1
    540e:	fa00 f202 	lsl.w	r2, r0, r2
    5412:	3320      	adds	r3, #32
    5414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    541c:	f3bf 8f6f 	isb	sy
}
    5420:	bf00      	nop
    5422:	370c      	adds	r7, #12
    5424:	46bd      	mov	sp, r7
    5426:	f85d 7b04 	ldr.w	r7, [sp], #4
    542a:	4770      	bx	lr
    542c:	e000e100 	.word	0xe000e100

00005430 <__NVIC_ClearPendingIRQ>:
{
    5430:	b480      	push	{r7}
    5432:	b083      	sub	sp, #12
    5434:	af00      	add	r7, sp, #0
    5436:	4603      	mov	r3, r0
    5438:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    543a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    543e:	2b00      	cmp	r3, #0
    5440:	db0c      	blt.n	545c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5442:	4909      	ldr	r1, [pc, #36]	; (5468 <__NVIC_ClearPendingIRQ+0x38>)
    5444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5448:	095b      	lsrs	r3, r3, #5
    544a:	88fa      	ldrh	r2, [r7, #6]
    544c:	f002 021f 	and.w	r2, r2, #31
    5450:	2001      	movs	r0, #1
    5452:	fa00 f202 	lsl.w	r2, r0, r2
    5456:	3360      	adds	r3, #96	; 0x60
    5458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    545c:	bf00      	nop
    545e:	370c      	adds	r7, #12
    5460:	46bd      	mov	sp, r7
    5462:	f85d 7b04 	ldr.w	r7, [sp], #4
    5466:	4770      	bx	lr
    5468:	e000e100 	.word	0xe000e100

0000546c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    546c:	b480      	push	{r7}
    546e:	b083      	sub	sp, #12
    5470:	af00      	add	r7, sp, #0
    5472:	6078      	str	r0, [r7, #4]
    5474:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5476:	bf00      	nop
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	69da      	ldr	r2, [r3, #28]
    547c:	683b      	ldr	r3, [r7, #0]
    547e:	4013      	ands	r3, r2
    5480:	2b00      	cmp	r3, #0
    5482:	d1f9      	bne.n	5478 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5484:	bf00      	nop
    5486:	370c      	adds	r7, #12
    5488:	46bd      	mov	sp, r7
    548a:	f85d 7b04 	ldr.w	r7, [sp], #4
    548e:	4770      	bx	lr

00005490 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5490:	b480      	push	{r7}
    5492:	b083      	sub	sp, #12
    5494:	af00      	add	r7, sp, #0
    5496:	6078      	str	r0, [r7, #4]
    5498:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	69da      	ldr	r2, [r3, #28]
    549e:	683b      	ldr	r3, [r7, #0]
    54a0:	4013      	ands	r3, r2
    54a2:	2b00      	cmp	r3, #0
    54a4:	bf14      	ite	ne
    54a6:	2301      	movne	r3, #1
    54a8:	2300      	moveq	r3, #0
    54aa:	b2db      	uxtb	r3, r3
}
    54ac:	4618      	mov	r0, r3
    54ae:	370c      	adds	r7, #12
    54b0:	46bd      	mov	sp, r7
    54b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b6:	4770      	bx	lr

000054b8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    54b8:	b480      	push	{r7}
    54ba:	b083      	sub	sp, #12
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
    54c0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    54c2:	bf00      	nop
    54c4:	687b      	ldr	r3, [r7, #4]
    54c6:	69da      	ldr	r2, [r3, #28]
    54c8:	683b      	ldr	r3, [r7, #0]
    54ca:	4013      	ands	r3, r2
    54cc:	2b00      	cmp	r3, #0
    54ce:	d1f9      	bne.n	54c4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    54d0:	bf00      	nop
    54d2:	370c      	adds	r7, #12
    54d4:	46bd      	mov	sp, r7
    54d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54da:	4770      	bx	lr

000054dc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    54dc:	b480      	push	{r7}
    54de:	b083      	sub	sp, #12
    54e0:	af00      	add	r7, sp, #0
    54e2:	6078      	str	r0, [r7, #4]
    54e4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	69da      	ldr	r2, [r3, #28]
    54ea:	683b      	ldr	r3, [r7, #0]
    54ec:	4013      	ands	r3, r2
    54ee:	2b00      	cmp	r3, #0
    54f0:	bf14      	ite	ne
    54f2:	2301      	movne	r3, #1
    54f4:	2300      	moveq	r3, #0
    54f6:	b2db      	uxtb	r3, r3
}
    54f8:	4618      	mov	r0, r3
    54fa:	370c      	adds	r7, #12
    54fc:	46bd      	mov	sp, r7
    54fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5502:	4770      	bx	lr

00005504 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5504:	b480      	push	{r7}
    5506:	b083      	sub	sp, #12
    5508:	af00      	add	r7, sp, #0
    550a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	2201      	movs	r2, #1
    5510:	761a      	strb	r2, [r3, #24]
}
    5512:	bf00      	nop
    5514:	370c      	adds	r7, #12
    5516:	46bd      	mov	sp, r7
    5518:	f85d 7b04 	ldr.w	r7, [sp], #4
    551c:	4770      	bx	lr

0000551e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    551e:	b480      	push	{r7}
    5520:	b083      	sub	sp, #12
    5522:	af00      	add	r7, sp, #0
    5524:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5526:	687b      	ldr	r3, [r7, #4]
    5528:	2202      	movs	r2, #2
    552a:	761a      	strb	r2, [r3, #24]
}
    552c:	bf00      	nop
    552e:	370c      	adds	r7, #12
    5530:	46bd      	mov	sp, r7
    5532:	f85d 7b04 	ldr.w	r7, [sp], #4
    5536:	4770      	bx	lr

00005538 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5538:	b480      	push	{r7}
    553a:	b083      	sub	sp, #12
    553c:	af00      	add	r7, sp, #0
    553e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	7e1b      	ldrb	r3, [r3, #24]
    5544:	b2db      	uxtb	r3, r3
}
    5546:	4618      	mov	r0, r3
    5548:	370c      	adds	r7, #12
    554a:	46bd      	mov	sp, r7
    554c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5550:	4770      	bx	lr

00005552 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5552:	b480      	push	{r7}
    5554:	b083      	sub	sp, #12
    5556:	af00      	add	r7, sp, #0
    5558:	6078      	str	r0, [r7, #4]
    555a:	460b      	mov	r3, r1
    555c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	78fa      	ldrb	r2, [r7, #3]
    5562:	761a      	strb	r2, [r3, #24]
}
    5564:	bf00      	nop
    5566:	370c      	adds	r7, #12
    5568:	46bd      	mov	sp, r7
    556a:	f85d 7b04 	ldr.w	r7, [sp], #4
    556e:	4770      	bx	lr

00005570 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5570:	b480      	push	{r7}
    5572:	b085      	sub	sp, #20
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
    5578:	460b      	mov	r3, r1
    557a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	7e1b      	ldrb	r3, [r3, #24]
    5580:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5582:	7bfa      	ldrb	r2, [r7, #15]
    5584:	78fb      	ldrb	r3, [r7, #3]
    5586:	4013      	ands	r3, r2
    5588:	73fb      	strb	r3, [r7, #15]
	return tmp;
    558a:	7bfb      	ldrb	r3, [r7, #15]
}
    558c:	4618      	mov	r0, r3
    558e:	3714      	adds	r7, #20
    5590:	46bd      	mov	sp, r7
    5592:	f85d 7b04 	ldr.w	r7, [sp], #4
    5596:	4770      	bx	lr

00005598 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5598:	b480      	push	{r7}
    559a:	b083      	sub	sp, #12
    559c:	af00      	add	r7, sp, #0
    559e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	7e1b      	ldrb	r3, [r3, #24]
    55a4:	b2db      	uxtb	r3, r3
}
    55a6:	4618      	mov	r0, r3
    55a8:	370c      	adds	r7, #12
    55aa:	46bd      	mov	sp, r7
    55ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b0:	4770      	bx	lr

000055b2 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    55b2:	b480      	push	{r7}
    55b4:	b083      	sub	sp, #12
    55b6:	af00      	add	r7, sp, #0
    55b8:	6078      	str	r0, [r7, #4]
    55ba:	460b      	mov	r3, r1
    55bc:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	78fa      	ldrb	r2, [r7, #3]
    55c2:	761a      	strb	r2, [r3, #24]
}
    55c4:	bf00      	nop
    55c6:	370c      	adds	r7, #12
    55c8:	46bd      	mov	sp, r7
    55ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ce:	4770      	bx	lr

000055d0 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    55d0:	b480      	push	{r7}
    55d2:	b083      	sub	sp, #12
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	2201      	movs	r2, #1
    55dc:	759a      	strb	r2, [r3, #22]
}
    55de:	bf00      	nop
    55e0:	370c      	adds	r7, #12
    55e2:	46bd      	mov	sp, r7
    55e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55e8:	4770      	bx	lr

000055ea <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    55ea:	b480      	push	{r7}
    55ec:	b083      	sub	sp, #12
    55ee:	af00      	add	r7, sp, #0
    55f0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	2201      	movs	r2, #1
    55f6:	751a      	strb	r2, [r3, #20]
}
    55f8:	bf00      	nop
    55fa:	370c      	adds	r7, #12
    55fc:	46bd      	mov	sp, r7
    55fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5602:	4770      	bx	lr

00005604 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    5604:	b480      	push	{r7}
    5606:	b083      	sub	sp, #12
    5608:	af00      	add	r7, sp, #0
    560a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	2202      	movs	r2, #2
    5610:	759a      	strb	r2, [r3, #22]
}
    5612:	bf00      	nop
    5614:	370c      	adds	r7, #12
    5616:	46bd      	mov	sp, r7
    5618:	f85d 7b04 	ldr.w	r7, [sp], #4
    561c:	4770      	bx	lr

0000561e <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    561e:	b480      	push	{r7}
    5620:	b083      	sub	sp, #12
    5622:	af00      	add	r7, sp, #0
    5624:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	2202      	movs	r2, #2
    562a:	751a      	strb	r2, [r3, #20]
}
    562c:	bf00      	nop
    562e:	370c      	adds	r7, #12
    5630:	46bd      	mov	sp, r7
    5632:	f85d 7b04 	ldr.w	r7, [sp], #4
    5636:	4770      	bx	lr

00005638 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5638:	b480      	push	{r7}
    563a:	b083      	sub	sp, #12
    563c:	af00      	add	r7, sp, #0
    563e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	2204      	movs	r2, #4
    5644:	759a      	strb	r2, [r3, #22]
}
    5646:	bf00      	nop
    5648:	370c      	adds	r7, #12
    564a:	46bd      	mov	sp, r7
    564c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5650:	4770      	bx	lr

00005652 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5652:	b480      	push	{r7}
    5654:	b083      	sub	sp, #12
    5656:	af00      	add	r7, sp, #0
    5658:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	2204      	movs	r2, #4
    565e:	751a      	strb	r2, [r3, #20]
}
    5660:	bf00      	nop
    5662:	370c      	adds	r7, #12
    5664:	46bd      	mov	sp, r7
    5666:	f85d 7b04 	ldr.w	r7, [sp], #4
    566a:	4770      	bx	lr

0000566c <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    566c:	b480      	push	{r7}
    566e:	b083      	sub	sp, #12
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5674:	687b      	ldr	r3, [r7, #4]
    5676:	7d9b      	ldrb	r3, [r3, #22]
    5678:	b2db      	uxtb	r3, r3
}
    567a:	4618      	mov	r0, r3
    567c:	370c      	adds	r7, #12
    567e:	46bd      	mov	sp, r7
    5680:	f85d 7b04 	ldr.w	r7, [sp], #4
    5684:	4770      	bx	lr
	...

00005688 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5688:	b580      	push	{r7, lr}
    568a:	b082      	sub	sp, #8
    568c:	af00      	add	r7, sp, #0
    568e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	681b      	ldr	r3, [r3, #0]
    5694:	f023 0202 	bic.w	r2, r3, #2
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    569c:	2103      	movs	r1, #3
    569e:	6878      	ldr	r0, [r7, #4]
    56a0:	4b02      	ldr	r3, [pc, #8]	; (56ac <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    56a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    56a4:	bf00      	nop
    56a6:	3708      	adds	r7, #8
    56a8:	46bd      	mov	sp, r7
    56aa:	bd80      	pop	{r7, pc}
    56ac:	0000546d 	.word	0x0000546d

000056b0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    56b0:	b480      	push	{r7}
    56b2:	b085      	sub	sp, #20
    56b4:	af00      	add	r7, sp, #0
    56b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    56be:	68fb      	ldr	r3, [r7, #12]
    56c0:	0edb      	lsrs	r3, r3, #27
    56c2:	f003 0301 	and.w	r3, r3, #1
    56c6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    56c8:	68fb      	ldr	r3, [r7, #12]
    56ca:	2b00      	cmp	r3, #0
    56cc:	bf14      	ite	ne
    56ce:	2301      	movne	r3, #1
    56d0:	2300      	moveq	r3, #0
    56d2:	b2db      	uxtb	r3, r3
}
    56d4:	4618      	mov	r0, r3
    56d6:	3714      	adds	r7, #20
    56d8:	46bd      	mov	sp, r7
    56da:	f85d 7b04 	ldr.w	r7, [sp], #4
    56de:	4770      	bx	lr

000056e0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    56e0:	b580      	push	{r7, lr}
    56e2:	b084      	sub	sp, #16
    56e4:	af00      	add	r7, sp, #0
    56e6:	6078      	str	r0, [r7, #4]
    56e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    56ea:	2103      	movs	r1, #3
    56ec:	6878      	ldr	r0, [r7, #4]
    56ee:	4b07      	ldr	r3, [pc, #28]	; (570c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    56f0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    56f8:	68fa      	ldr	r2, [r7, #12]
    56fa:	683b      	ldr	r3, [r7, #0]
    56fc:	4013      	ands	r3, r2
    56fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    5700:	68fb      	ldr	r3, [r7, #12]
}
    5702:	4618      	mov	r0, r3
    5704:	3710      	adds	r7, #16
    5706:	46bd      	mov	sp, r7
    5708:	bd80      	pop	{r7, pc}
    570a:	bf00      	nop
    570c:	0000546d 	.word	0x0000546d

00005710 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5710:	b580      	push	{r7, lr}
    5712:	b082      	sub	sp, #8
    5714:	af00      	add	r7, sp, #0
    5716:	6078      	str	r0, [r7, #4]
    5718:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	683a      	ldr	r2, [r7, #0]
    571e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5720:	2103      	movs	r1, #3
    5722:	6878      	ldr	r0, [r7, #4]
    5724:	4b02      	ldr	r3, [pc, #8]	; (5730 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5726:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5728:	bf00      	nop
    572a:	3708      	adds	r7, #8
    572c:	46bd      	mov	sp, r7
    572e:	bd80      	pop	{r7, pc}
    5730:	0000546d 	.word	0x0000546d

00005734 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5734:	b580      	push	{r7, lr}
    5736:	b084      	sub	sp, #16
    5738:	af00      	add	r7, sp, #0
    573a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    573c:	2103      	movs	r1, #3
    573e:	6878      	ldr	r0, [r7, #4]
    5740:	4b09      	ldr	r3, [pc, #36]	; (5768 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5742:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5744:	687b      	ldr	r3, [r7, #4]
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    574a:	68fb      	ldr	r3, [r7, #12]
    574c:	085b      	lsrs	r3, r3, #1
    574e:	f003 0301 	and.w	r3, r3, #1
    5752:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5754:	68fb      	ldr	r3, [r7, #12]
    5756:	2b00      	cmp	r3, #0
    5758:	bf14      	ite	ne
    575a:	2301      	movne	r3, #1
    575c:	2300      	moveq	r3, #0
    575e:	b2db      	uxtb	r3, r3
}
    5760:	4618      	mov	r0, r3
    5762:	3710      	adds	r7, #16
    5764:	46bd      	mov	sp, r7
    5766:	bd80      	pop	{r7, pc}
    5768:	000054b9 	.word	0x000054b9

0000576c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    576c:	b580      	push	{r7, lr}
    576e:	b082      	sub	sp, #8
    5770:	af00      	add	r7, sp, #0
    5772:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5774:	687b      	ldr	r3, [r7, #4]
    5776:	681b      	ldr	r3, [r3, #0]
    5778:	f023 0202 	bic.w	r2, r3, #2
    577c:	687b      	ldr	r3, [r7, #4]
    577e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5780:	2103      	movs	r1, #3
    5782:	6878      	ldr	r0, [r7, #4]
    5784:	4b02      	ldr	r3, [pc, #8]	; (5790 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5786:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5788:	bf00      	nop
    578a:	3708      	adds	r7, #8
    578c:	46bd      	mov	sp, r7
    578e:	bd80      	pop	{r7, pc}
    5790:	000054b9 	.word	0x000054b9

00005794 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5794:	b580      	push	{r7, lr}
    5796:	b084      	sub	sp, #16
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
    579c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    579e:	2103      	movs	r1, #3
    57a0:	6878      	ldr	r0, [r7, #4]
    57a2:	4b07      	ldr	r3, [pc, #28]	; (57c0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    57a4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    57ac:	68fa      	ldr	r2, [r7, #12]
    57ae:	683b      	ldr	r3, [r7, #0]
    57b0:	4013      	ands	r3, r2
    57b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    57b4:	68fb      	ldr	r3, [r7, #12]
}
    57b6:	4618      	mov	r0, r3
    57b8:	3710      	adds	r7, #16
    57ba:	46bd      	mov	sp, r7
    57bc:	bd80      	pop	{r7, pc}
    57be:	bf00      	nop
    57c0:	000054b9 	.word	0x000054b9

000057c4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    57c4:	b580      	push	{r7, lr}
    57c6:	b082      	sub	sp, #8
    57c8:	af00      	add	r7, sp, #0
    57ca:	6078      	str	r0, [r7, #4]
    57cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	683a      	ldr	r2, [r7, #0]
    57d2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    57d4:	2103      	movs	r1, #3
    57d6:	6878      	ldr	r0, [r7, #4]
    57d8:	4b02      	ldr	r3, [pc, #8]	; (57e4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    57da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    57dc:	bf00      	nop
    57de:	3708      	adds	r7, #8
    57e0:	46bd      	mov	sp, r7
    57e2:	bd80      	pop	{r7, pc}
    57e4:	000054b9 	.word	0x000054b9

000057e8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	b082      	sub	sp, #8
    57ec:	af00      	add	r7, sp, #0
    57ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	685b      	ldr	r3, [r3, #4]
    57f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    57fc:	2104      	movs	r1, #4
    57fe:	6878      	ldr	r0, [r7, #4]
    5800:	4b02      	ldr	r3, [pc, #8]	; (580c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5802:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5804:	bf00      	nop
    5806:	3708      	adds	r7, #8
    5808:	46bd      	mov	sp, r7
    580a:	bd80      	pop	{r7, pc}
    580c:	0000546d 	.word	0x0000546d

00005810 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5810:	b580      	push	{r7, lr}
    5812:	b082      	sub	sp, #8
    5814:	af00      	add	r7, sp, #0
    5816:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	685b      	ldr	r3, [r3, #4]
    581c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5824:	2104      	movs	r1, #4
    5826:	6878      	ldr	r0, [r7, #4]
    5828:	4b02      	ldr	r3, [pc, #8]	; (5834 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    582a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    582c:	bf00      	nop
    582e:	3708      	adds	r7, #8
    5830:	46bd      	mov	sp, r7
    5832:	bd80      	pop	{r7, pc}
    5834:	0000546d 	.word	0x0000546d

00005838 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5838:	b580      	push	{r7, lr}
    583a:	b082      	sub	sp, #8
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5840:	687b      	ldr	r3, [r7, #4]
    5842:	685b      	ldr	r3, [r3, #4]
    5844:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    584c:	2104      	movs	r1, #4
    584e:	6878      	ldr	r0, [r7, #4]
    5850:	4b02      	ldr	r3, [pc, #8]	; (585c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5852:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5854:	bf00      	nop
    5856:	3708      	adds	r7, #8
    5858:	46bd      	mov	sp, r7
    585a:	bd80      	pop	{r7, pc}
    585c:	0000546d 	.word	0x0000546d

00005860 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	685b      	ldr	r3, [r3, #4]
    586c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5874:	2104      	movs	r1, #4
    5876:	6878      	ldr	r0, [r7, #4]
    5878:	4b02      	ldr	r3, [pc, #8]	; (5884 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    587a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    587c:	bf00      	nop
    587e:	3708      	adds	r7, #8
    5880:	46bd      	mov	sp, r7
    5882:	bd80      	pop	{r7, pc}
    5884:	0000546d 	.word	0x0000546d

00005888 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5888:	b580      	push	{r7, lr}
    588a:	b082      	sub	sp, #8
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
    5890:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	685a      	ldr	r2, [r3, #4]
    5896:	683b      	ldr	r3, [r7, #0]
    5898:	041b      	lsls	r3, r3, #16
    589a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    589e:	431a      	orrs	r2, r3
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    58a4:	2104      	movs	r1, #4
    58a6:	6878      	ldr	r0, [r7, #4]
    58a8:	4b02      	ldr	r3, [pc, #8]	; (58b4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    58aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58ac:	bf00      	nop
    58ae:	3708      	adds	r7, #8
    58b0:	46bd      	mov	sp, r7
    58b2:	bd80      	pop	{r7, pc}
    58b4:	0000546d 	.word	0x0000546d

000058b8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    58b8:	b580      	push	{r7, lr}
    58ba:	b082      	sub	sp, #8
    58bc:	af00      	add	r7, sp, #0
    58be:	6078      	str	r0, [r7, #4]
    58c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    58c2:	687b      	ldr	r3, [r7, #4]
    58c4:	683a      	ldr	r2, [r7, #0]
    58c6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    58c8:	2104      	movs	r1, #4
    58ca:	6878      	ldr	r0, [r7, #4]
    58cc:	4b02      	ldr	r3, [pc, #8]	; (58d8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    58ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58d0:	bf00      	nop
    58d2:	3708      	adds	r7, #8
    58d4:	46bd      	mov	sp, r7
    58d6:	bd80      	pop	{r7, pc}
    58d8:	0000546d 	.word	0x0000546d

000058dc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    58dc:	b580      	push	{r7, lr}
    58de:	b082      	sub	sp, #8
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
    58e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	683a      	ldr	r2, [r7, #0]
    58ea:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    58ec:	2117      	movs	r1, #23
    58ee:	6878      	ldr	r0, [r7, #4]
    58f0:	4b02      	ldr	r3, [pc, #8]	; (58fc <hri_sercomspi_write_CTRLB_reg+0x20>)
    58f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58f4:	bf00      	nop
    58f6:	3708      	adds	r7, #8
    58f8:	46bd      	mov	sp, r7
    58fa:	bd80      	pop	{r7, pc}
    58fc:	000054b9 	.word	0x000054b9

00005900 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5900:	b480      	push	{r7}
    5902:	b083      	sub	sp, #12
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
    5908:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	683a      	ldr	r2, [r7, #0]
    590e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5910:	bf00      	nop
    5912:	370c      	adds	r7, #12
    5914:	46bd      	mov	sp, r7
    5916:	f85d 7b04 	ldr.w	r7, [sp], #4
    591a:	4770      	bx	lr

0000591c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    591c:	b480      	push	{r7}
    591e:	b083      	sub	sp, #12
    5920:	af00      	add	r7, sp, #0
    5922:	6078      	str	r0, [r7, #4]
    5924:	460b      	mov	r3, r1
    5926:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	78fa      	ldrb	r2, [r7, #3]
    592c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    592e:	bf00      	nop
    5930:	370c      	adds	r7, #12
    5932:	46bd      	mov	sp, r7
    5934:	f85d 7b04 	ldr.w	r7, [sp], #4
    5938:	4770      	bx	lr
	...

0000593c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    593c:	b580      	push	{r7, lr}
    593e:	b084      	sub	sp, #16
    5940:	af00      	add	r7, sp, #0
    5942:	6078      	str	r0, [r7, #4]
    5944:	460b      	mov	r3, r1
    5946:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    594c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    594e:	68fb      	ldr	r3, [r7, #12]
    5950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5954:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5956:	78fb      	ldrb	r3, [r7, #3]
    5958:	039b      	lsls	r3, r3, #14
    595a:	461a      	mov	r2, r3
    595c:	68fb      	ldr	r3, [r7, #12]
    595e:	4313      	orrs	r3, r2
    5960:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	68fa      	ldr	r2, [r7, #12]
    5966:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5968:	2104      	movs	r1, #4
    596a:	6878      	ldr	r0, [r7, #4]
    596c:	4b02      	ldr	r3, [pc, #8]	; (5978 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    596e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5970:	bf00      	nop
    5972:	3710      	adds	r7, #16
    5974:	46bd      	mov	sp, r7
    5976:	bd80      	pop	{r7, pc}
    5978:	0000546d 	.word	0x0000546d

0000597c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    597c:	b580      	push	{r7, lr}
    597e:	b082      	sub	sp, #8
    5980:	af00      	add	r7, sp, #0
    5982:	6078      	str	r0, [r7, #4]
    5984:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	683a      	ldr	r2, [r7, #0]
    598a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    598c:	2104      	movs	r1, #4
    598e:	6878      	ldr	r0, [r7, #4]
    5990:	4b02      	ldr	r3, [pc, #8]	; (599c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5992:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5994:	bf00      	nop
    5996:	3708      	adds	r7, #8
    5998:	46bd      	mov	sp, r7
    599a:	bd80      	pop	{r7, pc}
    599c:	0000546d 	.word	0x0000546d

000059a0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    59a0:	b580      	push	{r7, lr}
    59a2:	b082      	sub	sp, #8
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    59a8:	2104      	movs	r1, #4
    59aa:	6878      	ldr	r0, [r7, #4]
    59ac:	4b03      	ldr	r3, [pc, #12]	; (59bc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    59ae:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    59b4:	4618      	mov	r0, r3
    59b6:	3708      	adds	r7, #8
    59b8:	46bd      	mov	sp, r7
    59ba:	bd80      	pop	{r7, pc}
    59bc:	0000546d 	.word	0x0000546d

000059c0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    59c0:	b480      	push	{r7}
    59c2:	b083      	sub	sp, #12
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
    59c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	683a      	ldr	r2, [r7, #0]
    59ce:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59d0:	bf00      	nop
    59d2:	370c      	adds	r7, #12
    59d4:	46bd      	mov	sp, r7
    59d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59da:	4770      	bx	lr

000059dc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    59dc:	b580      	push	{r7, lr}
    59de:	b082      	sub	sp, #8
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
    59e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	683a      	ldr	r2, [r7, #0]
    59ea:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    59ec:	2104      	movs	r1, #4
    59ee:	6878      	ldr	r0, [r7, #4]
    59f0:	4b02      	ldr	r3, [pc, #8]	; (59fc <hri_sercomi2cm_write_DATA_reg+0x20>)
    59f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59f4:	bf00      	nop
    59f6:	3708      	adds	r7, #8
    59f8:	46bd      	mov	sp, r7
    59fa:	bd80      	pop	{r7, pc}
    59fc:	0000546d 	.word	0x0000546d

00005a00 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	b082      	sub	sp, #8
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a08:	2104      	movs	r1, #4
    5a0a:	6878      	ldr	r0, [r7, #4]
    5a0c:	4b03      	ldr	r3, [pc, #12]	; (5a1c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5a0e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5a14:	4618      	mov	r0, r3
    5a16:	3708      	adds	r7, #8
    5a18:	46bd      	mov	sp, r7
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	0000546d 	.word	0x0000546d

00005a20 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5a20:	b480      	push	{r7}
    5a22:	b083      	sub	sp, #12
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
    5a28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	683a      	ldr	r2, [r7, #0]
    5a2e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a30:	bf00      	nop
    5a32:	370c      	adds	r7, #12
    5a34:	46bd      	mov	sp, r7
    5a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3a:	4770      	bx	lr

00005a3c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5a3c:	b480      	push	{r7}
    5a3e:	b083      	sub	sp, #12
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5a48:	4618      	mov	r0, r3
    5a4a:	370c      	adds	r7, #12
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr

00005a54 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5a54:	b480      	push	{r7}
    5a56:	b083      	sub	sp, #12
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
    5a5c:	460b      	mov	r3, r1
    5a5e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	78fa      	ldrb	r2, [r7, #3]
    5a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a68:	bf00      	nop
    5a6a:	370c      	adds	r7, #12
    5a6c:	46bd      	mov	sp, r7
    5a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a72:	4770      	bx	lr

00005a74 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5a74:	b480      	push	{r7}
    5a76:	b083      	sub	sp, #12
    5a78:	af00      	add	r7, sp, #0
    5a7a:	6078      	str	r0, [r7, #4]
    5a7c:	460b      	mov	r3, r1
    5a7e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	887a      	ldrh	r2, [r7, #2]
    5a84:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a86:	bf00      	nop
    5a88:	370c      	adds	r7, #12
    5a8a:	46bd      	mov	sp, r7
    5a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a90:	4770      	bx	lr
	...

00005a94 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5a94:	b580      	push	{r7, lr}
    5a96:	b082      	sub	sp, #8
    5a98:	af00      	add	r7, sp, #0
    5a9a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5a9c:	2104      	movs	r1, #4
    5a9e:	6878      	ldr	r0, [r7, #4]
    5aa0:	4b04      	ldr	r3, [pc, #16]	; (5ab4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5aa2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	8b5b      	ldrh	r3, [r3, #26]
    5aa8:	b29b      	uxth	r3, r3
}
    5aaa:	4618      	mov	r0, r3
    5aac:	3708      	adds	r7, #8
    5aae:	46bd      	mov	sp, r7
    5ab0:	bd80      	pop	{r7, pc}
    5ab2:	bf00      	nop
    5ab4:	0000546d 	.word	0x0000546d

00005ab8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5ab8:	b4b0      	push	{r4, r5, r7}
    5aba:	b08d      	sub	sp, #52	; 0x34
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5ac0:	4b13      	ldr	r3, [pc, #76]	; (5b10 <_sercom_get_hardware_index+0x58>)
    5ac2:	f107 040c 	add.w	r4, r7, #12
    5ac6:	461d      	mov	r5, r3
    5ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5acc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ad4:	2300      	movs	r3, #0
    5ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ad8:	e010      	b.n	5afc <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5adc:	009b      	lsls	r3, r3, #2
    5ade:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5ae2:	4413      	add	r3, r2
    5ae4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5ae8:	461a      	mov	r2, r3
    5aea:	687b      	ldr	r3, [r7, #4]
    5aec:	429a      	cmp	r2, r3
    5aee:	d102      	bne.n	5af6 <_sercom_get_hardware_index+0x3e>
			return i;
    5af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5af2:	b2db      	uxtb	r3, r3
    5af4:	e006      	b.n	5b04 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5af8:	3301      	adds	r3, #1
    5afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    5afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5afe:	2b07      	cmp	r3, #7
    5b00:	d9eb      	bls.n	5ada <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5b02:	2300      	movs	r3, #0
}
    5b04:	4618      	mov	r0, r3
    5b06:	3734      	adds	r7, #52	; 0x34
    5b08:	46bd      	mov	sp, r7
    5b0a:	bcb0      	pop	{r4, r5, r7}
    5b0c:	4770      	bx	lr
    5b0e:	bf00      	nop
    5b10:	0000d6c0 	.word	0x0000d6c0

00005b14 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5b14:	b480      	push	{r7}
    5b16:	b083      	sub	sp, #12
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
    5b1c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    5b24:	d102      	bne.n	5b2c <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    5b26:	4a0b      	ldr	r2, [pc, #44]	; (5b54 <_sercom_init_irq_param+0x40>)
    5b28:	683b      	ldr	r3, [r7, #0]
    5b2a:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	4a0a      	ldr	r2, [pc, #40]	; (5b58 <_sercom_init_irq_param+0x44>)
    5b30:	4293      	cmp	r3, r2
    5b32:	d102      	bne.n	5b3a <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5b34:	4a09      	ldr	r2, [pc, #36]	; (5b5c <_sercom_init_irq_param+0x48>)
    5b36:	683b      	ldr	r3, [r7, #0]
    5b38:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	4a08      	ldr	r2, [pc, #32]	; (5b60 <_sercom_init_irq_param+0x4c>)
    5b3e:	4293      	cmp	r3, r2
    5b40:	d102      	bne.n	5b48 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    5b42:	4a08      	ldr	r2, [pc, #32]	; (5b64 <_sercom_init_irq_param+0x50>)
    5b44:	683b      	ldr	r3, [r7, #0]
    5b46:	6013      	str	r3, [r2, #0]
	}
}
    5b48:	bf00      	nop
    5b4a:	370c      	adds	r7, #12
    5b4c:	46bd      	mov	sp, r7
    5b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b52:	4770      	bx	lr
    5b54:	200006c8 	.word	0x200006c8
    5b58:	43000400 	.word	0x43000400
    5b5c:	200006cc 	.word	0x200006cc
    5b60:	43000c00 	.word	0x43000c00
    5b64:	200006d0 	.word	0x200006d0

00005b68 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5b68:	b580      	push	{r7, lr}
    5b6a:	b084      	sub	sp, #16
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5b70:	6878      	ldr	r0, [r7, #4]
    5b72:	4b13      	ldr	r3, [pc, #76]	; (5bc0 <_get_i2cm_index+0x58>)
    5b74:	4798      	blx	r3
    5b76:	4603      	mov	r3, r0
    5b78:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5b7a:	2300      	movs	r3, #0
    5b7c:	73fb      	strb	r3, [r7, #15]
    5b7e:	e010      	b.n	5ba2 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5b80:	7bfa      	ldrb	r2, [r7, #15]
    5b82:	4910      	ldr	r1, [pc, #64]	; (5bc4 <_get_i2cm_index+0x5c>)
    5b84:	4613      	mov	r3, r2
    5b86:	005b      	lsls	r3, r3, #1
    5b88:	4413      	add	r3, r2
    5b8a:	00db      	lsls	r3, r3, #3
    5b8c:	440b      	add	r3, r1
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	7bba      	ldrb	r2, [r7, #14]
    5b92:	429a      	cmp	r2, r3
    5b94:	d102      	bne.n	5b9c <_get_i2cm_index+0x34>
			return i;
    5b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5b9a:	e00d      	b.n	5bb8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5b9c:	7bfb      	ldrb	r3, [r7, #15]
    5b9e:	3301      	adds	r3, #1
    5ba0:	73fb      	strb	r3, [r7, #15]
    5ba2:	7bfb      	ldrb	r3, [r7, #15]
    5ba4:	2b01      	cmp	r3, #1
    5ba6:	d9eb      	bls.n	5b80 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5ba8:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    5bac:	4906      	ldr	r1, [pc, #24]	; (5bc8 <_get_i2cm_index+0x60>)
    5bae:	2000      	movs	r0, #0
    5bb0:	4b06      	ldr	r3, [pc, #24]	; (5bcc <_get_i2cm_index+0x64>)
    5bb2:	4798      	blx	r3
	return -1;
    5bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
    5bb8:	4618      	mov	r0, r3
    5bba:	3710      	adds	r7, #16
    5bbc:	46bd      	mov	sp, r7
    5bbe:	bd80      	pop	{r7, pc}
    5bc0:	00005ab9 	.word	0x00005ab9
    5bc4:	20000018 	.word	0x20000018
    5bc8:	0000d6a4 	.word	0x0000d6a4
    5bcc:	00003079 	.word	0x00003079

00005bd0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b082      	sub	sp, #8
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5bd8:	2103      	movs	r1, #3
    5bda:	6878      	ldr	r0, [r7, #4]
    5bdc:	4b02      	ldr	r3, [pc, #8]	; (5be8 <_sercom_i2c_send_stop+0x18>)
    5bde:	4798      	blx	r3
}
    5be0:	bf00      	nop
    5be2:	3708      	adds	r7, #8
    5be4:	46bd      	mov	sp, r7
    5be6:	bd80      	pop	{r7, pc}
    5be8:	00005889 	.word	0x00005889

00005bec <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5bec:	b590      	push	{r4, r7, lr}
    5bee:	b087      	sub	sp, #28
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	60f8      	str	r0, [r7, #12]
    5bf4:	60b9      	str	r1, [r7, #8]
    5bf6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5bf8:	68f8      	ldr	r0, [r7, #12]
    5bfa:	4b7d      	ldr	r3, [pc, #500]	; (5df0 <_sercom_i2c_sync_analyse_flags+0x204>)
    5bfc:	4798      	blx	r3
    5bfe:	4603      	mov	r3, r0
    5c00:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5c02:	68f8      	ldr	r0, [r7, #12]
    5c04:	4b7b      	ldr	r3, [pc, #492]	; (5df4 <_sercom_i2c_sync_analyse_flags+0x208>)
    5c06:	4798      	blx	r3
    5c08:	4603      	mov	r3, r0
    5c0a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5c0c:	68bb      	ldr	r3, [r7, #8]
    5c0e:	f003 0301 	and.w	r3, r3, #1
    5c12:	2b00      	cmp	r3, #0
    5c14:	f000 8095 	beq.w	5d42 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5c18:	8a7b      	ldrh	r3, [r7, #18]
    5c1a:	f003 0302 	and.w	r3, r3, #2
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d01d      	beq.n	5c5e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5c22:	68f8      	ldr	r0, [r7, #12]
    5c24:	4b74      	ldr	r3, [pc, #464]	; (5df8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    5c26:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	885b      	ldrh	r3, [r3, #2]
    5c2c:	b29b      	uxth	r3, r3
    5c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5c32:	b29a      	uxth	r2, r3
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	885b      	ldrh	r3, [r3, #2]
    5c3c:	b29b      	uxth	r3, r3
    5c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5c42:	b29a      	uxth	r2, r3
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5c48:	8a7b      	ldrh	r3, [r7, #18]
    5c4a:	f003 0301 	and.w	r3, r3, #1
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d002      	beq.n	5c58 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5c52:	f06f 0304 	mvn.w	r3, #4
    5c56:	e0c6      	b.n	5de6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5c58:	f06f 0303 	mvn.w	r3, #3
    5c5c:	e0c3      	b.n	5de6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5c5e:	8a7b      	ldrh	r3, [r7, #18]
    5c60:	f003 0304 	and.w	r3, r3, #4
    5c64:	2b00      	cmp	r3, #0
    5c66:	d01f      	beq.n	5ca8 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5c68:	687b      	ldr	r3, [r7, #4]
    5c6a:	685b      	ldr	r3, [r3, #4]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	dd07      	ble.n	5c80 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5c70:	687b      	ldr	r3, [r7, #4]
    5c72:	885b      	ldrh	r3, [r3, #2]
    5c74:	b29b      	uxth	r3, r3
    5c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5c7a:	b29a      	uxth	r2, r3
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	885b      	ldrh	r3, [r3, #2]
    5c84:	b29b      	uxth	r3, r3
    5c86:	b21b      	sxth	r3, r3
    5c88:	2b00      	cmp	r3, #0
    5c8a:	da02      	bge.n	5c92 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    5c8c:	68f8      	ldr	r0, [r7, #12]
    5c8e:	4b5b      	ldr	r3, [pc, #364]	; (5dfc <_sercom_i2c_sync_analyse_flags+0x210>)
    5c90:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	885b      	ldrh	r3, [r3, #2]
    5c96:	b29b      	uxth	r3, r3
    5c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5c9c:	b29a      	uxth	r2, r3
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5ca2:	f06f 0301 	mvn.w	r3, #1
    5ca6:	e09e      	b.n	5de6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5ca8:	687b      	ldr	r3, [r7, #4]
    5caa:	885b      	ldrh	r3, [r3, #2]
    5cac:	b29b      	uxth	r3, r3
    5cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d01c      	beq.n	5cf0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5cb6:	687b      	ldr	r3, [r7, #4]
    5cb8:	881b      	ldrh	r3, [r3, #0]
    5cba:	121b      	asrs	r3, r3, #8
    5cbc:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5cbe:	f003 0406 	and.w	r4, r3, #6
    5cc2:	68f8      	ldr	r0, [r7, #12]
    5cc4:	4b4e      	ldr	r3, [pc, #312]	; (5e00 <_sercom_i2c_sync_analyse_flags+0x214>)
    5cc6:	4798      	blx	r3
    5cc8:	4603      	mov	r3, r0
    5cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5cce:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5cd0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5cd4:	4619      	mov	r1, r3
    5cd6:	68f8      	ldr	r0, [r7, #12]
    5cd8:	4b4a      	ldr	r3, [pc, #296]	; (5e04 <_sercom_i2c_sync_analyse_flags+0x218>)
    5cda:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	885b      	ldrh	r3, [r3, #2]
    5ce0:	b29b      	uxth	r3, r3
    5ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5ce6:	b29a      	uxth	r2, r3
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    5cec:	2300      	movs	r3, #0
    5cee:	e07a      	b.n	5de6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	685b      	ldr	r3, [r3, #4]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d111      	bne.n	5d1c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	885b      	ldrh	r3, [r3, #2]
    5cfc:	b29b      	uxth	r3, r3
    5cfe:	b21b      	sxth	r3, r3
    5d00:	2b00      	cmp	r3, #0
    5d02:	da02      	bge.n	5d0a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    5d04:	68f8      	ldr	r0, [r7, #12]
    5d06:	4b3d      	ldr	r3, [pc, #244]	; (5dfc <_sercom_i2c_sync_analyse_flags+0x210>)
    5d08:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	885b      	ldrh	r3, [r3, #2]
    5d0e:	b29b      	uxth	r3, r3
    5d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5d14:	b29a      	uxth	r2, r3
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	805a      	strh	r2, [r3, #2]
    5d1a:	e010      	b.n	5d3e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	689b      	ldr	r3, [r3, #8]
    5d20:	781b      	ldrb	r3, [r3, #0]
    5d22:	4619      	mov	r1, r3
    5d24:	68f8      	ldr	r0, [r7, #12]
    5d26:	4b38      	ldr	r3, [pc, #224]	; (5e08 <_sercom_i2c_sync_analyse_flags+0x21c>)
    5d28:	4798      	blx	r3
				msg->buffer++;
    5d2a:	687b      	ldr	r3, [r7, #4]
    5d2c:	689b      	ldr	r3, [r3, #8]
    5d2e:	1c5a      	adds	r2, r3, #1
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	609a      	str	r2, [r3, #8]
				msg->len--;
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	685b      	ldr	r3, [r3, #4]
    5d38:	1e5a      	subs	r2, r3, #1
    5d3a:	687b      	ldr	r3, [r7, #4]
    5d3c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    5d3e:	2300      	movs	r3, #0
    5d40:	e051      	b.n	5de6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    5d42:	68bb      	ldr	r3, [r7, #8]
    5d44:	f003 0302 	and.w	r3, r3, #2
    5d48:	2b00      	cmp	r3, #0
    5d4a:	d04b      	beq.n	5de4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	685b      	ldr	r3, [r3, #4]
    5d50:	2b00      	cmp	r3, #0
    5d52:	d041      	beq.n	5dd8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    5d54:	8a7b      	ldrh	r3, [r7, #18]
    5d56:	f003 0304 	and.w	r3, r3, #4
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d13c      	bne.n	5dd8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	685b      	ldr	r3, [r3, #4]
    5d62:	1e5a      	subs	r2, r3, #1
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5d68:	687b      	ldr	r3, [r7, #4]
    5d6a:	685b      	ldr	r3, [r3, #4]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d102      	bne.n	5d76 <_sercom_i2c_sync_analyse_flags+0x18a>
    5d70:	697b      	ldr	r3, [r7, #20]
    5d72:	2b00      	cmp	r3, #0
    5d74:	d006      	beq.n	5d84 <_sercom_i2c_sync_analyse_flags+0x198>
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	685b      	ldr	r3, [r3, #4]
    5d7a:	2b01      	cmp	r3, #1
    5d7c:	d105      	bne.n	5d8a <_sercom_i2c_sync_analyse_flags+0x19e>
    5d7e:	697b      	ldr	r3, [r7, #20]
    5d80:	2b00      	cmp	r3, #0
    5d82:	d002      	beq.n	5d8a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5d84:	68f8      	ldr	r0, [r7, #12]
    5d86:	4b21      	ldr	r3, [pc, #132]	; (5e0c <_sercom_i2c_sync_analyse_flags+0x220>)
    5d88:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	685b      	ldr	r3, [r3, #4]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d113      	bne.n	5dba <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	885b      	ldrh	r3, [r3, #2]
    5d96:	b29b      	uxth	r3, r3
    5d98:	b21b      	sxth	r3, r3
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	da05      	bge.n	5daa <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5d9e:	68f8      	ldr	r0, [r7, #12]
    5da0:	4b1b      	ldr	r3, [pc, #108]	; (5e10 <_sercom_i2c_sync_analyse_flags+0x224>)
    5da2:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    5da4:	68f8      	ldr	r0, [r7, #12]
    5da6:	4b15      	ldr	r3, [pc, #84]	; (5dfc <_sercom_i2c_sync_analyse_flags+0x210>)
    5da8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	885b      	ldrh	r3, [r3, #2]
    5dae:	b29b      	uxth	r3, r3
    5db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5db4:	b29a      	uxth	r2, r3
    5db6:	687b      	ldr	r3, [r7, #4]
    5db8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	689c      	ldr	r4, [r3, #8]
    5dbe:	1c62      	adds	r2, r4, #1
    5dc0:	687b      	ldr	r3, [r7, #4]
    5dc2:	609a      	str	r2, [r3, #8]
    5dc4:	68f8      	ldr	r0, [r7, #12]
    5dc6:	4b13      	ldr	r3, [pc, #76]	; (5e14 <_sercom_i2c_sync_analyse_flags+0x228>)
    5dc8:	4798      	blx	r3
    5dca:	4603      	mov	r3, r0
    5dcc:	b2db      	uxtb	r3, r3
    5dce:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5dd0:	68f8      	ldr	r0, [r7, #12]
    5dd2:	4b11      	ldr	r3, [pc, #68]	; (5e18 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5dd4:	4798      	blx	r3
    5dd6:	e005      	b.n	5de4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5dd8:	68f8      	ldr	r0, [r7, #12]
    5dda:	4b0f      	ldr	r3, [pc, #60]	; (5e18 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5ddc:	4798      	blx	r3
			return I2C_NACK;
    5dde:	f06f 0301 	mvn.w	r3, #1
    5de2:	e000      	b.n	5de6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    5de4:	2300      	movs	r3, #0
}
    5de6:	4618      	mov	r0, r3
    5de8:	371c      	adds	r7, #28
    5dea:	46bd      	mov	sp, r7
    5dec:	bd90      	pop	{r4, r7, pc}
    5dee:	bf00      	nop
    5df0:	000056b1 	.word	0x000056b1
    5df4:	00005a95 	.word	0x00005a95
    5df8:	00005505 	.word	0x00005505
    5dfc:	00005bd1 	.word	0x00005bd1
    5e00:	000059a1 	.word	0x000059a1
    5e04:	0000597d 	.word	0x0000597d
    5e08:	000059dd 	.word	0x000059dd
    5e0c:	00005839 	.word	0x00005839
    5e10:	00005811 	.word	0x00005811
    5e14:	00005a01 	.word	0x00005a01
    5e18:	0000551f 	.word	0x0000551f

00005e1c <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    5e1c:	b580      	push	{r7, lr}
    5e1e:	b086      	sub	sp, #24
    5e20:	af00      	add	r7, sp, #0
    5e22:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	691b      	ldr	r3, [r3, #16]
    5e28:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    5e2a:	6938      	ldr	r0, [r7, #16]
    5e2c:	4b37      	ldr	r3, [pc, #220]	; (5f0c <_sercom_i2c_m_irq_handler+0xf0>)
    5e2e:	4798      	blx	r3
    5e30:	4603      	mov	r3, r0
    5e32:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    5e34:	2300      	movs	r3, #0
    5e36:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	bf14      	ite	ne
    5e3e:	2301      	movne	r3, #1
    5e40:	2300      	moveq	r3, #0
    5e42:	b2db      	uxtb	r3, r3
    5e44:	f240 422a 	movw	r2, #1066	; 0x42a
    5e48:	4931      	ldr	r1, [pc, #196]	; (5f10 <_sercom_i2c_m_irq_handler+0xf4>)
    5e4a:	4618      	mov	r0, r3
    5e4c:	4b31      	ldr	r3, [pc, #196]	; (5f14 <_sercom_i2c_m_irq_handler+0xf8>)
    5e4e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	691b      	ldr	r3, [r3, #16]
    5e54:	2b00      	cmp	r3, #0
    5e56:	bf14      	ite	ne
    5e58:	2301      	movne	r3, #1
    5e5a:	2300      	moveq	r3, #0
    5e5c:	b2db      	uxtb	r3, r3
    5e5e:	f240 422b 	movw	r2, #1067	; 0x42b
    5e62:	492b      	ldr	r1, [pc, #172]	; (5f10 <_sercom_i2c_m_irq_handler+0xf4>)
    5e64:	4618      	mov	r0, r3
    5e66:	4b2b      	ldr	r3, [pc, #172]	; (5f14 <_sercom_i2c_m_irq_handler+0xf8>)
    5e68:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    5e6a:	bf00      	nop
    5e6c:	68fb      	ldr	r3, [r7, #12]
    5e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5e72:	2b00      	cmp	r3, #0
    5e74:	d126      	bne.n	5ec4 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    5e76:	687b      	ldr	r3, [r7, #4]
    5e78:	461a      	mov	r2, r3
    5e7a:	68f9      	ldr	r1, [r7, #12]
    5e7c:	6938      	ldr	r0, [r7, #16]
    5e7e:	4b26      	ldr	r3, [pc, #152]	; (5f18 <_sercom_i2c_m_irq_handler+0xfc>)
    5e80:	4798      	blx	r3
    5e82:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    5e84:	697b      	ldr	r3, [r7, #20]
    5e86:	2b00      	cmp	r3, #0
    5e88:	d11b      	bne.n	5ec2 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    5e8a:	68fb      	ldr	r3, [r7, #12]
    5e8c:	f003 0301 	and.w	r3, r3, #1
    5e90:	2b00      	cmp	r3, #0
    5e92:	d008      	beq.n	5ea6 <_sercom_i2c_m_irq_handler+0x8a>
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	699b      	ldr	r3, [r3, #24]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d004      	beq.n	5ea6 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    5e9c:	687b      	ldr	r3, [r7, #4]
    5e9e:	699b      	ldr	r3, [r3, #24]
    5ea0:	6878      	ldr	r0, [r7, #4]
    5ea2:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    5ea4:	e02e      	b.n	5f04 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    5ea6:	68fb      	ldr	r3, [r7, #12]
    5ea8:	f003 0302 	and.w	r3, r3, #2
    5eac:	2b00      	cmp	r3, #0
    5eae:	d029      	beq.n	5f04 <_sercom_i2c_m_irq_handler+0xe8>
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	69db      	ldr	r3, [r3, #28]
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d025      	beq.n	5f04 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	69db      	ldr	r3, [r3, #28]
    5ebc:	6878      	ldr	r0, [r7, #4]
    5ebe:	4798      	blx	r3
		return;
    5ec0:	e020      	b.n	5f04 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    5ec2:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	885b      	ldrh	r3, [r3, #2]
    5ec8:	b29b      	uxth	r3, r3
    5eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5ece:	b29a      	uxth	r2, r3
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	695b      	ldr	r3, [r3, #20]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d014      	beq.n	5f06 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    5edc:	697b      	ldr	r3, [r7, #20]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d005      	beq.n	5eee <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	695b      	ldr	r3, [r3, #20]
    5ee6:	6979      	ldr	r1, [r7, #20]
    5ee8:	6878      	ldr	r0, [r7, #4]
    5eea:	4798      	blx	r3
    5eec:	e005      	b.n	5efa <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	695b      	ldr	r3, [r3, #20]
    5ef2:	f06f 0104 	mvn.w	r1, #4
    5ef6:	6878      	ldr	r0, [r7, #4]
    5ef8:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    5efa:	2180      	movs	r1, #128	; 0x80
    5efc:	6938      	ldr	r0, [r7, #16]
    5efe:	4b07      	ldr	r3, [pc, #28]	; (5f1c <_sercom_i2c_m_irq_handler+0x100>)
    5f00:	4798      	blx	r3
    5f02:	e000      	b.n	5f06 <_sercom_i2c_m_irq_handler+0xea>
		return;
    5f04:	bf00      	nop
	}
}
    5f06:	3718      	adds	r7, #24
    5f08:	46bd      	mov	sp, r7
    5f0a:	bd80      	pop	{r7, pc}
    5f0c:	00005539 	.word	0x00005539
    5f10:	0000d6a4 	.word	0x0000d6a4
    5f14:	00003079 	.word	0x00003079
    5f18:	00005bed 	.word	0x00005bed
    5f1c:	00005553 	.word	0x00005553

00005f20 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    5f20:	b580      	push	{r7, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	af00      	add	r7, sp, #0
    5f26:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    5f28:	6878      	ldr	r0, [r7, #4]
    5f2a:	4b05      	ldr	r3, [pc, #20]	; (5f40 <_sercom_get_irq_num+0x20>)
    5f2c:	4798      	blx	r3
    5f2e:	4603      	mov	r3, r0
    5f30:	009b      	lsls	r3, r3, #2
    5f32:	b2db      	uxtb	r3, r3
    5f34:	332e      	adds	r3, #46	; 0x2e
    5f36:	b2db      	uxtb	r3, r3
}
    5f38:	4618      	mov	r0, r3
    5f3a:	3708      	adds	r7, #8
    5f3c:	46bd      	mov	sp, r7
    5f3e:	bd80      	pop	{r7, pc}
    5f40:	00005ab9 	.word	0x00005ab9

00005f44 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    5f44:	b580      	push	{r7, lr}
    5f46:	b086      	sub	sp, #24
    5f48:	af00      	add	r7, sp, #0
    5f4a:	6078      	str	r0, [r7, #4]
    5f4c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	2b00      	cmp	r3, #0
    5f52:	bf14      	ite	ne
    5f54:	2301      	movne	r3, #1
    5f56:	2300      	moveq	r3, #0
    5f58:	b2db      	uxtb	r3, r3
    5f5a:	f240 429e 	movw	r2, #1182	; 0x49e
    5f5e:	491d      	ldr	r1, [pc, #116]	; (5fd4 <_i2c_m_async_init+0x90>)
    5f60:	4618      	mov	r0, r3
    5f62:	4b1d      	ldr	r3, [pc, #116]	; (5fd8 <_i2c_m_async_init+0x94>)
    5f64:	4798      	blx	r3

	i2c_dev->hw = hw;
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	683a      	ldr	r2, [r7, #0]
    5f6a:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	6839      	ldr	r1, [r7, #0]
    5f70:	4618      	mov	r0, r3
    5f72:	4b1a      	ldr	r3, [pc, #104]	; (5fdc <_i2c_m_async_init+0x98>)
    5f74:	4798      	blx	r3
    5f76:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d001      	beq.n	5f82 <_i2c_m_async_init+0x3e>
		return init_status;
    5f7e:	68fb      	ldr	r3, [r7, #12]
    5f80:	e024      	b.n	5fcc <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    5f82:	6879      	ldr	r1, [r7, #4]
    5f84:	6838      	ldr	r0, [r7, #0]
    5f86:	4b16      	ldr	r3, [pc, #88]	; (5fe0 <_i2c_m_async_init+0x9c>)
    5f88:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    5f8a:	6838      	ldr	r0, [r7, #0]
    5f8c:	4b15      	ldr	r3, [pc, #84]	; (5fe4 <_i2c_m_async_init+0xa0>)
    5f8e:	4798      	blx	r3
    5f90:	4603      	mov	r3, r0
    5f92:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    5f94:	2300      	movs	r3, #0
    5f96:	613b      	str	r3, [r7, #16]
    5f98:	e014      	b.n	5fc4 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    5f9a:	7dfb      	ldrb	r3, [r7, #23]
    5f9c:	b21b      	sxth	r3, r3
    5f9e:	4618      	mov	r0, r3
    5fa0:	4b11      	ldr	r3, [pc, #68]	; (5fe8 <_i2c_m_async_init+0xa4>)
    5fa2:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    5fa4:	7dfb      	ldrb	r3, [r7, #23]
    5fa6:	b21b      	sxth	r3, r3
    5fa8:	4618      	mov	r0, r3
    5faa:	4b10      	ldr	r3, [pc, #64]	; (5fec <_i2c_m_async_init+0xa8>)
    5fac:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    5fae:	7dfb      	ldrb	r3, [r7, #23]
    5fb0:	b21b      	sxth	r3, r3
    5fb2:	4618      	mov	r0, r3
    5fb4:	4b0e      	ldr	r3, [pc, #56]	; (5ff0 <_i2c_m_async_init+0xac>)
    5fb6:	4798      	blx	r3
		irq++;
    5fb8:	7dfb      	ldrb	r3, [r7, #23]
    5fba:	3301      	adds	r3, #1
    5fbc:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    5fbe:	693b      	ldr	r3, [r7, #16]
    5fc0:	3301      	adds	r3, #1
    5fc2:	613b      	str	r3, [r7, #16]
    5fc4:	693b      	ldr	r3, [r7, #16]
    5fc6:	2b03      	cmp	r3, #3
    5fc8:	d9e7      	bls.n	5f9a <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    5fca:	2300      	movs	r3, #0
}
    5fcc:	4618      	mov	r0, r3
    5fce:	3718      	adds	r7, #24
    5fd0:	46bd      	mov	sp, r7
    5fd2:	bd80      	pop	{r7, pc}
    5fd4:	0000d6a4 	.word	0x0000d6a4
    5fd8:	00003079 	.word	0x00003079
    5fdc:	0000620d 	.word	0x0000620d
    5fe0:	00005b15 	.word	0x00005b15
    5fe4:	00005f21 	.word	0x00005f21
    5fe8:	000053ed 	.word	0x000053ed
    5fec:	00005431 	.word	0x00005431
    5ff0:	000053b1 	.word	0x000053b1

00005ff4 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    5ff4:	b590      	push	{r4, r7, lr}
    5ff6:	b087      	sub	sp, #28
    5ff8:	af00      	add	r7, sp, #0
    5ffa:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	691b      	ldr	r3, [r3, #16]
    6000:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6002:	687b      	ldr	r3, [r7, #4]
    6004:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6006:	6978      	ldr	r0, [r7, #20]
    6008:	4b33      	ldr	r3, [pc, #204]	; (60d8 <_sercom_i2c_send_address+0xe4>)
    600a:	4798      	blx	r3
    600c:	4603      	mov	r3, r0
    600e:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	2b00      	cmp	r3, #0
    6014:	bf14      	ite	ne
    6016:	2301      	movne	r3, #1
    6018:	2300      	moveq	r3, #0
    601a:	b2db      	uxtb	r3, r3
    601c:	f240 42cc 	movw	r2, #1228	; 0x4cc
    6020:	492e      	ldr	r1, [pc, #184]	; (60dc <_sercom_i2c_send_address+0xe8>)
    6022:	4618      	mov	r0, r3
    6024:	4b2e      	ldr	r3, [pc, #184]	; (60e0 <_sercom_i2c_send_address+0xec>)
    6026:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6028:	693b      	ldr	r3, [r7, #16]
    602a:	685b      	ldr	r3, [r3, #4]
    602c:	2b01      	cmp	r3, #1
    602e:	d106      	bne.n	603e <_sercom_i2c_send_address+0x4a>
    6030:	68fb      	ldr	r3, [r7, #12]
    6032:	2b00      	cmp	r3, #0
    6034:	d003      	beq.n	603e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6036:	6978      	ldr	r0, [r7, #20]
    6038:	4b2a      	ldr	r3, [pc, #168]	; (60e4 <_sercom_i2c_send_address+0xf0>)
    603a:	4798      	blx	r3
    603c:	e002      	b.n	6044 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    603e:	6978      	ldr	r0, [r7, #20]
    6040:	4b29      	ldr	r3, [pc, #164]	; (60e8 <_sercom_i2c_send_address+0xf4>)
    6042:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6044:	693b      	ldr	r3, [r7, #16]
    6046:	881b      	ldrh	r3, [r3, #0]
    6048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    604c:	2b00      	cmp	r3, #0
    604e:	d022      	beq.n	6096 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6050:	693b      	ldr	r3, [r7, #16]
    6052:	885b      	ldrh	r3, [r3, #2]
    6054:	b29b      	uxth	r3, r3
    6056:	f003 0301 	and.w	r3, r3, #1
    605a:	2b00      	cmp	r3, #0
    605c:	d007      	beq.n	606e <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    605e:	693b      	ldr	r3, [r7, #16]
    6060:	885b      	ldrh	r3, [r3, #2]
    6062:	b29b      	uxth	r3, r3
    6064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6068:	b29a      	uxth	r2, r3
    606a:	693b      	ldr	r3, [r7, #16]
    606c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    606e:	693b      	ldr	r3, [r7, #16]
    6070:	881b      	ldrh	r3, [r3, #0]
    6072:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6074:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6078:	401c      	ands	r4, r3
    607a:	6978      	ldr	r0, [r7, #20]
    607c:	4b1b      	ldr	r3, [pc, #108]	; (60ec <_sercom_i2c_send_address+0xf8>)
    607e:	4798      	blx	r3
    6080:	4603      	mov	r3, r0
    6082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6086:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    608c:	4619      	mov	r1, r3
    608e:	6978      	ldr	r0, [r7, #20]
    6090:	4b17      	ldr	r3, [pc, #92]	; (60f0 <_sercom_i2c_send_address+0xfc>)
    6092:	4798      	blx	r3
    6094:	e01a      	b.n	60cc <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6096:	693b      	ldr	r3, [r7, #16]
    6098:	881b      	ldrh	r3, [r3, #0]
    609a:	005b      	lsls	r3, r3, #1
    609c:	b2db      	uxtb	r3, r3
    609e:	693a      	ldr	r2, [r7, #16]
    60a0:	8852      	ldrh	r2, [r2, #2]
    60a2:	b292      	uxth	r2, r2
    60a4:	f002 0201 	and.w	r2, r2, #1
    60a8:	2a00      	cmp	r2, #0
    60aa:	bf14      	ite	ne
    60ac:	2201      	movne	r2, #1
    60ae:	2200      	moveq	r2, #0
    60b0:	b2d2      	uxtb	r2, r2
    60b2:	4313      	orrs	r3, r2
    60b4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    60b6:	6978      	ldr	r0, [r7, #20]
    60b8:	4b0c      	ldr	r3, [pc, #48]	; (60ec <_sercom_i2c_send_address+0xf8>)
    60ba:	4798      	blx	r3
    60bc:	4603      	mov	r3, r0
    60be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    60c2:	4323      	orrs	r3, r4
    60c4:	4619      	mov	r1, r3
    60c6:	6978      	ldr	r0, [r7, #20]
    60c8:	4b09      	ldr	r3, [pc, #36]	; (60f0 <_sercom_i2c_send_address+0xfc>)
    60ca:	4798      	blx	r3
	}

	return ERR_NONE;
    60cc:	2300      	movs	r3, #0
}
    60ce:	4618      	mov	r0, r3
    60d0:	371c      	adds	r7, #28
    60d2:	46bd      	mov	sp, r7
    60d4:	bd90      	pop	{r4, r7, pc}
    60d6:	bf00      	nop
    60d8:	000056b1 	.word	0x000056b1
    60dc:	0000d6a4 	.word	0x0000d6a4
    60e0:	00003079 	.word	0x00003079
    60e4:	00005839 	.word	0x00005839
    60e8:	00005861 	.word	0x00005861
    60ec:	000059a1 	.word	0x000059a1
    60f0:	0000597d 	.word	0x0000597d

000060f4 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    60f4:	b580      	push	{r7, lr}
    60f6:	b084      	sub	sp, #16
    60f8:	af00      	add	r7, sp, #0
    60fa:	6078      	str	r0, [r7, #4]
    60fc:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    60fe:	687b      	ldr	r3, [r7, #4]
    6100:	2b00      	cmp	r3, #0
    6102:	bf14      	ite	ne
    6104:	2301      	movne	r3, #1
    6106:	2300      	moveq	r3, #0
    6108:	b2db      	uxtb	r3, r3
    610a:	f240 42f4 	movw	r2, #1268	; 0x4f4
    610e:	492a      	ldr	r1, [pc, #168]	; (61b8 <_i2c_m_async_transfer+0xc4>)
    6110:	4618      	mov	r0, r3
    6112:	4b2a      	ldr	r3, [pc, #168]	; (61bc <_i2c_m_async_transfer+0xc8>)
    6114:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	691b      	ldr	r3, [r3, #16]
    611a:	2b00      	cmp	r3, #0
    611c:	bf14      	ite	ne
    611e:	2301      	movne	r3, #1
    6120:	2300      	moveq	r3, #0
    6122:	b2db      	uxtb	r3, r3
    6124:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6128:	4923      	ldr	r1, [pc, #140]	; (61b8 <_i2c_m_async_transfer+0xc4>)
    612a:	4618      	mov	r0, r3
    612c:	4b23      	ldr	r3, [pc, #140]	; (61bc <_i2c_m_async_transfer+0xc8>)
    612e:	4798      	blx	r3
	ASSERT(msg);
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	2b00      	cmp	r3, #0
    6134:	bf14      	ite	ne
    6136:	2301      	movne	r3, #1
    6138:	2300      	moveq	r3, #0
    613a:	b2db      	uxtb	r3, r3
    613c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6140:	491d      	ldr	r1, [pc, #116]	; (61b8 <_i2c_m_async_transfer+0xc4>)
    6142:	4618      	mov	r0, r3
    6144:	4b1d      	ldr	r3, [pc, #116]	; (61bc <_i2c_m_async_transfer+0xc8>)
    6146:	4798      	blx	r3

	if (msg->len == 0) {
    6148:	683b      	ldr	r3, [r7, #0]
    614a:	685b      	ldr	r3, [r3, #4]
    614c:	2b00      	cmp	r3, #0
    614e:	d101      	bne.n	6154 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6150:	2300      	movs	r3, #0
    6152:	e02d      	b.n	61b0 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	885b      	ldrh	r3, [r3, #2]
    6158:	b29b      	uxth	r3, r3
    615a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    615e:	2b00      	cmp	r3, #0
    6160:	d002      	beq.n	6168 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6162:	f06f 0303 	mvn.w	r3, #3
    6166:	e023      	b.n	61b0 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6168:	683b      	ldr	r3, [r7, #0]
    616a:	885b      	ldrh	r3, [r3, #2]
    616c:	b29b      	uxth	r3, r3
    616e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6172:	b29a      	uxth	r2, r3
    6174:	683b      	ldr	r3, [r7, #0]
    6176:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	683a      	ldr	r2, [r7, #0]
    617c:	ca07      	ldmia	r2, {r0, r1, r2}
    617e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6182:	687b      	ldr	r3, [r7, #4]
    6184:	691b      	ldr	r3, [r3, #16]
    6186:	4618      	mov	r0, r3
    6188:	4b0d      	ldr	r3, [pc, #52]	; (61c0 <_i2c_m_async_transfer+0xcc>)
    618a:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    618c:	6878      	ldr	r0, [r7, #4]
    618e:	4b0d      	ldr	r3, [pc, #52]	; (61c4 <_i2c_m_async_transfer+0xd0>)
    6190:	4798      	blx	r3
    6192:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6194:	68fb      	ldr	r3, [r7, #12]
    6196:	2b00      	cmp	r3, #0
    6198:	d009      	beq.n	61ae <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	885b      	ldrh	r3, [r3, #2]
    619e:	b29b      	uxth	r3, r3
    61a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61a4:	b29a      	uxth	r2, r3
    61a6:	687b      	ldr	r3, [r7, #4]
    61a8:	805a      	strh	r2, [r3, #2]

		return ret;
    61aa:	68fb      	ldr	r3, [r7, #12]
    61ac:	e000      	b.n	61b0 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    61ae:	2300      	movs	r3, #0
}
    61b0:	4618      	mov	r0, r3
    61b2:	3710      	adds	r7, #16
    61b4:	46bd      	mov	sp, r7
    61b6:	bd80      	pop	{r7, pc}
    61b8:	0000d6a4 	.word	0x0000d6a4
    61bc:	00003079 	.word	0x00003079
    61c0:	000057e9 	.word	0x000057e9
    61c4:	00005ff5 	.word	0x00005ff5

000061c8 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    61c8:	b480      	push	{r7}
    61ca:	b085      	sub	sp, #20
    61cc:	af00      	add	r7, sp, #0
    61ce:	60f8      	str	r0, [r7, #12]
    61d0:	460b      	mov	r3, r1
    61d2:	607a      	str	r2, [r7, #4]
    61d4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    61d6:	7afb      	ldrb	r3, [r7, #11]
    61d8:	2b01      	cmp	r3, #1
    61da:	d008      	beq.n	61ee <_i2c_m_async_register_callback+0x26>
    61dc:	2b02      	cmp	r3, #2
    61de:	d00a      	beq.n	61f6 <_i2c_m_async_register_callback+0x2e>
    61e0:	2b00      	cmp	r3, #0
    61e2:	d000      	beq.n	61e6 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    61e4:	e00b      	b.n	61fe <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    61e6:	68fb      	ldr	r3, [r7, #12]
    61e8:	687a      	ldr	r2, [r7, #4]
    61ea:	615a      	str	r2, [r3, #20]
		break;
    61ec:	e007      	b.n	61fe <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    61ee:	68fb      	ldr	r3, [r7, #12]
    61f0:	687a      	ldr	r2, [r7, #4]
    61f2:	619a      	str	r2, [r3, #24]
		break;
    61f4:	e003      	b.n	61fe <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    61f6:	68fb      	ldr	r3, [r7, #12]
    61f8:	687a      	ldr	r2, [r7, #4]
    61fa:	61da      	str	r2, [r3, #28]
		break;
    61fc:	bf00      	nop
	}

	return ERR_NONE;
    61fe:	2300      	movs	r3, #0
}
    6200:	4618      	mov	r0, r3
    6202:	3714      	adds	r7, #20
    6204:	46bd      	mov	sp, r7
    6206:	f85d 7b04 	ldr.w	r7, [sp], #4
    620a:	4770      	bx	lr

0000620c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    620c:	b580      	push	{r7, lr}
    620e:	b084      	sub	sp, #16
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
    6214:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6216:	6838      	ldr	r0, [r7, #0]
    6218:	4b42      	ldr	r3, [pc, #264]	; (6324 <_i2c_m_sync_init_impl+0x118>)
    621a:	4798      	blx	r3
    621c:	4603      	mov	r3, r0
    621e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6220:	2101      	movs	r1, #1
    6222:	6838      	ldr	r0, [r7, #0]
    6224:	4b40      	ldr	r3, [pc, #256]	; (6328 <_i2c_m_sync_init_impl+0x11c>)
    6226:	4798      	blx	r3
    6228:	4603      	mov	r3, r0
    622a:	f083 0301 	eor.w	r3, r3, #1
    622e:	b2db      	uxtb	r3, r3
    6230:	2b00      	cmp	r3, #0
    6232:	d020      	beq.n	6276 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6234:	7bfa      	ldrb	r2, [r7, #15]
    6236:	493d      	ldr	r1, [pc, #244]	; (632c <_i2c_m_sync_init_impl+0x120>)
    6238:	4613      	mov	r3, r2
    623a:	005b      	lsls	r3, r3, #1
    623c:	4413      	add	r3, r2
    623e:	00db      	lsls	r3, r3, #3
    6240:	440b      	add	r3, r1
    6242:	3304      	adds	r3, #4
    6244:	681b      	ldr	r3, [r3, #0]
    6246:	f003 031c 	and.w	r3, r3, #28
    624a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    624c:	2102      	movs	r1, #2
    624e:	6838      	ldr	r0, [r7, #0]
    6250:	4b37      	ldr	r3, [pc, #220]	; (6330 <_i2c_m_sync_init_impl+0x124>)
    6252:	4798      	blx	r3
    6254:	4603      	mov	r3, r0
    6256:	2b00      	cmp	r3, #0
    6258:	d006      	beq.n	6268 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    625a:	6838      	ldr	r0, [r7, #0]
    625c:	4b35      	ldr	r3, [pc, #212]	; (6334 <_i2c_m_sync_init_impl+0x128>)
    625e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6260:	2102      	movs	r1, #2
    6262:	6838      	ldr	r0, [r7, #0]
    6264:	4b34      	ldr	r3, [pc, #208]	; (6338 <_i2c_m_sync_init_impl+0x12c>)
    6266:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6268:	68bb      	ldr	r3, [r7, #8]
    626a:	f043 0301 	orr.w	r3, r3, #1
    626e:	4619      	mov	r1, r3
    6270:	6838      	ldr	r0, [r7, #0]
    6272:	4b32      	ldr	r3, [pc, #200]	; (633c <_i2c_m_sync_init_impl+0x130>)
    6274:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6276:	2101      	movs	r1, #1
    6278:	6838      	ldr	r0, [r7, #0]
    627a:	4b2f      	ldr	r3, [pc, #188]	; (6338 <_i2c_m_sync_init_impl+0x12c>)
    627c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    627e:	7bfa      	ldrb	r2, [r7, #15]
    6280:	492a      	ldr	r1, [pc, #168]	; (632c <_i2c_m_sync_init_impl+0x120>)
    6282:	4613      	mov	r3, r2
    6284:	005b      	lsls	r3, r3, #1
    6286:	4413      	add	r3, r2
    6288:	00db      	lsls	r3, r3, #3
    628a:	440b      	add	r3, r1
    628c:	3304      	adds	r3, #4
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	4619      	mov	r1, r3
    6292:	6838      	ldr	r0, [r7, #0]
    6294:	4b29      	ldr	r3, [pc, #164]	; (633c <_i2c_m_sync_init_impl+0x130>)
    6296:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6298:	7bfa      	ldrb	r2, [r7, #15]
    629a:	4924      	ldr	r1, [pc, #144]	; (632c <_i2c_m_sync_init_impl+0x120>)
    629c:	4613      	mov	r3, r2
    629e:	005b      	lsls	r3, r3, #1
    62a0:	4413      	add	r3, r2
    62a2:	00db      	lsls	r3, r3, #3
    62a4:	440b      	add	r3, r1
    62a6:	3308      	adds	r3, #8
    62a8:	681b      	ldr	r3, [r3, #0]
    62aa:	4619      	mov	r1, r3
    62ac:	6838      	ldr	r0, [r7, #0]
    62ae:	4b24      	ldr	r3, [pc, #144]	; (6340 <_i2c_m_sync_init_impl+0x134>)
    62b0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    62b2:	7bfa      	ldrb	r2, [r7, #15]
    62b4:	491d      	ldr	r1, [pc, #116]	; (632c <_i2c_m_sync_init_impl+0x120>)
    62b6:	4613      	mov	r3, r2
    62b8:	005b      	lsls	r3, r3, #1
    62ba:	4413      	add	r3, r2
    62bc:	00db      	lsls	r3, r3, #3
    62be:	440b      	add	r3, r1
    62c0:	330c      	adds	r3, #12
    62c2:	681b      	ldr	r3, [r3, #0]
    62c4:	4619      	mov	r1, r3
    62c6:	6838      	ldr	r0, [r7, #0]
    62c8:	4b1e      	ldr	r3, [pc, #120]	; (6344 <_i2c_m_sync_init_impl+0x138>)
    62ca:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    62cc:	7bfa      	ldrb	r2, [r7, #15]
    62ce:	4917      	ldr	r1, [pc, #92]	; (632c <_i2c_m_sync_init_impl+0x120>)
    62d0:	4613      	mov	r3, r2
    62d2:	005b      	lsls	r3, r3, #1
    62d4:	4413      	add	r3, r2
    62d6:	00db      	lsls	r3, r3, #3
    62d8:	440b      	add	r3, r1
    62da:	3304      	adds	r3, #4
    62dc:	681b      	ldr	r3, [r3, #0]
    62de:	0e1b      	lsrs	r3, r3, #24
    62e0:	b29b      	uxth	r3, r3
    62e2:	f003 0303 	and.w	r3, r3, #3
    62e6:	b29a      	uxth	r2, r3
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	899b      	ldrh	r3, [r3, #12]
    62f0:	2b01      	cmp	r3, #1
    62f2:	bf8c      	ite	hi
    62f4:	2301      	movhi	r3, #1
    62f6:	2300      	movls	r3, #0
    62f8:	b2db      	uxtb	r3, r3
    62fa:	4619      	mov	r1, r3
    62fc:	6838      	ldr	r0, [r7, #0]
    62fe:	4b12      	ldr	r3, [pc, #72]	; (6348 <_i2c_m_sync_init_impl+0x13c>)
    6300:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6302:	7bfa      	ldrb	r2, [r7, #15]
    6304:	4909      	ldr	r1, [pc, #36]	; (632c <_i2c_m_sync_init_impl+0x120>)
    6306:	4613      	mov	r3, r2
    6308:	005b      	lsls	r3, r3, #1
    630a:	4413      	add	r3, r2
    630c:	00db      	lsls	r3, r3, #3
    630e:	440b      	add	r3, r1
    6310:	3312      	adds	r3, #18
    6312:	881a      	ldrh	r2, [r3, #0]
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6318:	2300      	movs	r3, #0
}
    631a:	4618      	mov	r0, r3
    631c:	3710      	adds	r7, #16
    631e:	46bd      	mov	sp, r7
    6320:	bd80      	pop	{r7, pc}
    6322:	bf00      	nop
    6324:	00005b69 	.word	0x00005b69
    6328:	00005491 	.word	0x00005491
    632c:	20000018 	.word	0x20000018
    6330:	000056e1 	.word	0x000056e1
    6334:	00005689 	.word	0x00005689
    6338:	0000546d 	.word	0x0000546d
    633c:	00005711 	.word	0x00005711
    6340:	000058b9 	.word	0x000058b9
    6344:	00005901 	.word	0x00005901
    6348:	0000593d 	.word	0x0000593d

0000634c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    634c:	b580      	push	{r7, lr}
    634e:	b082      	sub	sp, #8
    6350:	af00      	add	r7, sp, #0
    6352:	6078      	str	r0, [r7, #4]
    6354:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	2b00      	cmp	r3, #0
    635a:	d004      	beq.n	6366 <_spi_load_regs_master+0x1a>
    635c:	683b      	ldr	r3, [r7, #0]
    635e:	2b00      	cmp	r3, #0
    6360:	d001      	beq.n	6366 <_spi_load_regs_master+0x1a>
    6362:	2301      	movs	r3, #1
    6364:	e000      	b.n	6368 <_spi_load_regs_master+0x1c>
    6366:	2300      	movs	r3, #0
    6368:	f003 0301 	and.w	r3, r3, #1
    636c:	b2db      	uxtb	r3, r3
    636e:	f640 1242 	movw	r2, #2370	; 0x942
    6372:	4915      	ldr	r1, [pc, #84]	; (63c8 <_spi_load_regs_master+0x7c>)
    6374:	4618      	mov	r0, r3
    6376:	4b15      	ldr	r3, [pc, #84]	; (63cc <_spi_load_regs_master+0x80>)
    6378:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    637a:	683b      	ldr	r3, [r7, #0]
    637c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    637e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6382:	f023 0301 	bic.w	r3, r3, #1
    6386:	4619      	mov	r1, r3
    6388:	6878      	ldr	r0, [r7, #4]
    638a:	4b11      	ldr	r3, [pc, #68]	; (63d0 <_spi_load_regs_master+0x84>)
    638c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    638e:	683b      	ldr	r3, [r7, #0]
    6390:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6392:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6396:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    639a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    639e:	4619      	mov	r1, r3
    63a0:	6878      	ldr	r0, [r7, #4]
    63a2:	4b0c      	ldr	r3, [pc, #48]	; (63d4 <_spi_load_regs_master+0x88>)
    63a4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    63a6:	683b      	ldr	r3, [r7, #0]
    63a8:	7b1b      	ldrb	r3, [r3, #12]
    63aa:	4619      	mov	r1, r3
    63ac:	6878      	ldr	r0, [r7, #4]
    63ae:	4b0a      	ldr	r3, [pc, #40]	; (63d8 <_spi_load_regs_master+0x8c>)
    63b0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    63b2:	683b      	ldr	r3, [r7, #0]
    63b4:	7b5b      	ldrb	r3, [r3, #13]
    63b6:	4619      	mov	r1, r3
    63b8:	6878      	ldr	r0, [r7, #4]
    63ba:	4b08      	ldr	r3, [pc, #32]	; (63dc <_spi_load_regs_master+0x90>)
    63bc:	4798      	blx	r3
}
    63be:	bf00      	nop
    63c0:	3708      	adds	r7, #8
    63c2:	46bd      	mov	sp, r7
    63c4:	bd80      	pop	{r7, pc}
    63c6:	bf00      	nop
    63c8:	0000d6a4 	.word	0x0000d6a4
    63cc:	00003079 	.word	0x00003079
    63d0:	000057c5 	.word	0x000057c5
    63d4:	000058dd 	.word	0x000058dd
    63d8:	0000591d 	.word	0x0000591d
    63dc:	00005a55 	.word	0x00005a55

000063e0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    63e0:	b580      	push	{r7, lr}
    63e2:	b082      	sub	sp, #8
    63e4:	af00      	add	r7, sp, #0
    63e6:	6078      	str	r0, [r7, #4]
    63e8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	2b00      	cmp	r3, #0
    63ee:	d004      	beq.n	63fa <_spi_load_regs_slave+0x1a>
    63f0:	683b      	ldr	r3, [r7, #0]
    63f2:	2b00      	cmp	r3, #0
    63f4:	d001      	beq.n	63fa <_spi_load_regs_slave+0x1a>
    63f6:	2301      	movs	r3, #1
    63f8:	e000      	b.n	63fc <_spi_load_regs_slave+0x1c>
    63fa:	2300      	movs	r3, #0
    63fc:	f003 0301 	and.w	r3, r3, #1
    6400:	b2db      	uxtb	r3, r3
    6402:	f640 1256 	movw	r2, #2390	; 0x956
    6406:	491a      	ldr	r1, [pc, #104]	; (6470 <_spi_load_regs_slave+0x90>)
    6408:	4618      	mov	r0, r3
    640a:	4b1a      	ldr	r3, [pc, #104]	; (6474 <_spi_load_regs_slave+0x94>)
    640c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    640e:	683b      	ldr	r3, [r7, #0]
    6410:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6412:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6416:	f023 0301 	bic.w	r3, r3, #1
    641a:	4619      	mov	r1, r3
    641c:	6878      	ldr	r0, [r7, #4]
    641e:	4b16      	ldr	r3, [pc, #88]	; (6478 <_spi_load_regs_slave+0x98>)
    6420:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6422:	683b      	ldr	r3, [r7, #0]
    6424:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6426:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    642a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    642e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6432:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6436:	4619      	mov	r1, r3
    6438:	6878      	ldr	r0, [r7, #4]
    643a:	4b10      	ldr	r3, [pc, #64]	; (647c <_spi_load_regs_slave+0x9c>)
    643c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    643e:	683b      	ldr	r3, [r7, #0]
    6440:	689b      	ldr	r3, [r3, #8]
    6442:	4619      	mov	r1, r3
    6444:	6878      	ldr	r0, [r7, #4]
    6446:	4b0e      	ldr	r3, [pc, #56]	; (6480 <_spi_load_regs_slave+0xa0>)
    6448:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    644a:	683b      	ldr	r3, [r7, #0]
    644c:	7b5b      	ldrb	r3, [r3, #13]
    644e:	4619      	mov	r1, r3
    6450:	6878      	ldr	r0, [r7, #4]
    6452:	4b0c      	ldr	r3, [pc, #48]	; (6484 <_spi_load_regs_slave+0xa4>)
    6454:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6456:	bf00      	nop
    6458:	f04f 31ff 	mov.w	r1, #4294967295
    645c:	6878      	ldr	r0, [r7, #4]
    645e:	4b0a      	ldr	r3, [pc, #40]	; (6488 <_spi_load_regs_slave+0xa8>)
    6460:	4798      	blx	r3
    6462:	4603      	mov	r3, r0
    6464:	2b00      	cmp	r3, #0
    6466:	d1f7      	bne.n	6458 <_spi_load_regs_slave+0x78>
		;
}
    6468:	bf00      	nop
    646a:	3708      	adds	r7, #8
    646c:	46bd      	mov	sp, r7
    646e:	bd80      	pop	{r7, pc}
    6470:	0000d6a4 	.word	0x0000d6a4
    6474:	00003079 	.word	0x00003079
    6478:	000057c5 	.word	0x000057c5
    647c:	000058dd 	.word	0x000058dd
    6480:	000059c1 	.word	0x000059c1
    6484:	00005a55 	.word	0x00005a55
    6488:	000054dd 	.word	0x000054dd

0000648c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    648c:	b580      	push	{r7, lr}
    648e:	b084      	sub	sp, #16
    6490:	af00      	add	r7, sp, #0
    6492:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	4618      	mov	r0, r3
    6498:	4b11      	ldr	r3, [pc, #68]	; (64e0 <_spi_get_regs+0x54>)
    649a:	4798      	blx	r3
    649c:	4603      	mov	r3, r0
    649e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	73fb      	strb	r3, [r7, #15]
    64a4:	e014      	b.n	64d0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    64a6:	7bfa      	ldrb	r2, [r7, #15]
    64a8:	490e      	ldr	r1, [pc, #56]	; (64e4 <_spi_get_regs+0x58>)
    64aa:	4613      	mov	r3, r2
    64ac:	011b      	lsls	r3, r3, #4
    64ae:	4413      	add	r3, r2
    64b0:	440b      	add	r3, r1
    64b2:	3310      	adds	r3, #16
    64b4:	781b      	ldrb	r3, [r3, #0]
    64b6:	7bba      	ldrb	r2, [r7, #14]
    64b8:	429a      	cmp	r2, r3
    64ba:	d106      	bne.n	64ca <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    64bc:	7bfa      	ldrb	r2, [r7, #15]
    64be:	4613      	mov	r3, r2
    64c0:	011b      	lsls	r3, r3, #4
    64c2:	4413      	add	r3, r2
    64c4:	4a07      	ldr	r2, [pc, #28]	; (64e4 <_spi_get_regs+0x58>)
    64c6:	4413      	add	r3, r2
    64c8:	e006      	b.n	64d8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    64ca:	7bfb      	ldrb	r3, [r7, #15]
    64cc:	3301      	adds	r3, #1
    64ce:	73fb      	strb	r3, [r7, #15]
    64d0:	7bfb      	ldrb	r3, [r7, #15]
    64d2:	2b01      	cmp	r3, #1
    64d4:	d9e7      	bls.n	64a6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    64d6:	2300      	movs	r3, #0
}
    64d8:	4618      	mov	r0, r3
    64da:	3710      	adds	r7, #16
    64dc:	46bd      	mov	sp, r7
    64de:	bd80      	pop	{r7, pc}
    64e0:	00005ab9 	.word	0x00005ab9
    64e4:	0000d6e0 	.word	0x0000d6e0

000064e8 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    64e8:	b580      	push	{r7, lr}
    64ea:	b084      	sub	sp, #16
    64ec:	af00      	add	r7, sp, #0
    64ee:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	681b      	ldr	r3, [r3, #0]
    64f4:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    64f6:	68f8      	ldr	r0, [r7, #12]
    64f8:	4b21      	ldr	r3, [pc, #132]	; (6580 <_spi_handler+0x98>)
    64fa:	4798      	blx	r3
    64fc:	4603      	mov	r3, r0
    64fe:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6500:	68f8      	ldr	r0, [r7, #12]
    6502:	4b20      	ldr	r3, [pc, #128]	; (6584 <_spi_handler+0x9c>)
    6504:	4798      	blx	r3
    6506:	4603      	mov	r3, r0
    6508:	461a      	mov	r2, r3
    650a:	7afb      	ldrb	r3, [r7, #11]
    650c:	4013      	ands	r3, r2
    650e:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6510:	7afb      	ldrb	r3, [r7, #11]
    6512:	f003 0301 	and.w	r3, r3, #1
    6516:	2b00      	cmp	r3, #0
    6518:	d004      	beq.n	6524 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	689b      	ldr	r3, [r3, #8]
    651e:	6878      	ldr	r0, [r7, #4]
    6520:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6522:	e029      	b.n	6578 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6524:	7afb      	ldrb	r3, [r7, #11]
    6526:	f003 0304 	and.w	r3, r3, #4
    652a:	2b00      	cmp	r3, #0
    652c:	d004      	beq.n	6538 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	68db      	ldr	r3, [r3, #12]
    6532:	6878      	ldr	r0, [r7, #4]
    6534:	4798      	blx	r3
}
    6536:	e01f      	b.n	6578 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6538:	7afb      	ldrb	r3, [r7, #11]
    653a:	f003 0302 	and.w	r3, r3, #2
    653e:	2b00      	cmp	r3, #0
    6540:	d008      	beq.n	6554 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    6542:	2102      	movs	r1, #2
    6544:	68f8      	ldr	r0, [r7, #12]
    6546:	4b10      	ldr	r3, [pc, #64]	; (6588 <_spi_handler+0xa0>)
    6548:	4798      	blx	r3
		dev->callbacks.complete(dev);
    654a:	687b      	ldr	r3, [r7, #4]
    654c:	691b      	ldr	r3, [r3, #16]
    654e:	6878      	ldr	r0, [r7, #4]
    6550:	4798      	blx	r3
}
    6552:	e011      	b.n	6578 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6554:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6558:	2b00      	cmp	r3, #0
    655a:	da0d      	bge.n	6578 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    655c:	2104      	movs	r1, #4
    655e:	68f8      	ldr	r0, [r7, #12]
    6560:	4b0a      	ldr	r3, [pc, #40]	; (658c <_spi_handler+0xa4>)
    6562:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6564:	2180      	movs	r1, #128	; 0x80
    6566:	68f8      	ldr	r0, [r7, #12]
    6568:	4b07      	ldr	r3, [pc, #28]	; (6588 <_spi_handler+0xa0>)
    656a:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    656c:	687b      	ldr	r3, [r7, #4]
    656e:	695b      	ldr	r3, [r3, #20]
    6570:	f06f 0112 	mvn.w	r1, #18
    6574:	6878      	ldr	r0, [r7, #4]
    6576:	4798      	blx	r3
}
    6578:	bf00      	nop
    657a:	3710      	adds	r7, #16
    657c:	46bd      	mov	sp, r7
    657e:	bd80      	pop	{r7, pc}
    6580:	00005599 	.word	0x00005599
    6584:	0000566d 	.word	0x0000566d
    6588:	000055b3 	.word	0x000055b3
    658c:	00005a75 	.word	0x00005a75

00006590 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    6590:	b580      	push	{r7, lr}
    6592:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6594:	4b03      	ldr	r3, [pc, #12]	; (65a4 <SERCOM4_0_Handler+0x14>)
    6596:	681b      	ldr	r3, [r3, #0]
    6598:	4618      	mov	r0, r3
    659a:	4b03      	ldr	r3, [pc, #12]	; (65a8 <SERCOM4_0_Handler+0x18>)
    659c:	4798      	blx	r3
}
    659e:	bf00      	nop
    65a0:	bd80      	pop	{r7, pc}
    65a2:	bf00      	nop
    65a4:	200006c8 	.word	0x200006c8
    65a8:	000064e9 	.word	0x000064e9

000065ac <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    65b0:	4b03      	ldr	r3, [pc, #12]	; (65c0 <SERCOM4_1_Handler+0x14>)
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	4618      	mov	r0, r3
    65b6:	4b03      	ldr	r3, [pc, #12]	; (65c4 <SERCOM4_1_Handler+0x18>)
    65b8:	4798      	blx	r3
}
    65ba:	bf00      	nop
    65bc:	bd80      	pop	{r7, pc}
    65be:	bf00      	nop
    65c0:	200006c8 	.word	0x200006c8
    65c4:	000064e9 	.word	0x000064e9

000065c8 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    65c8:	b580      	push	{r7, lr}
    65ca:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    65cc:	4b03      	ldr	r3, [pc, #12]	; (65dc <SERCOM4_2_Handler+0x14>)
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	4618      	mov	r0, r3
    65d2:	4b03      	ldr	r3, [pc, #12]	; (65e0 <SERCOM4_2_Handler+0x18>)
    65d4:	4798      	blx	r3
}
    65d6:	bf00      	nop
    65d8:	bd80      	pop	{r7, pc}
    65da:	bf00      	nop
    65dc:	200006c8 	.word	0x200006c8
    65e0:	000064e9 	.word	0x000064e9

000065e4 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    65e8:	4b03      	ldr	r3, [pc, #12]	; (65f8 <SERCOM4_3_Handler+0x14>)
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	4618      	mov	r0, r3
    65ee:	4b03      	ldr	r3, [pc, #12]	; (65fc <SERCOM4_3_Handler+0x18>)
    65f0:	4798      	blx	r3
}
    65f2:	bf00      	nop
    65f4:	bd80      	pop	{r7, pc}
    65f6:	bf00      	nop
    65f8:	200006c8 	.word	0x200006c8
    65fc:	000064e9 	.word	0x000064e9

00006600 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    6600:	b580      	push	{r7, lr}
    6602:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6604:	4b03      	ldr	r3, [pc, #12]	; (6614 <SERCOM5_0_Handler+0x14>)
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	4618      	mov	r0, r3
    660a:	4b03      	ldr	r3, [pc, #12]	; (6618 <SERCOM5_0_Handler+0x18>)
    660c:	4798      	blx	r3
}
    660e:	bf00      	nop
    6610:	bd80      	pop	{r7, pc}
    6612:	bf00      	nop
    6614:	200006cc 	.word	0x200006cc
    6618:	00005e1d 	.word	0x00005e1d

0000661c <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    661c:	b580      	push	{r7, lr}
    661e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6620:	4b03      	ldr	r3, [pc, #12]	; (6630 <SERCOM5_1_Handler+0x14>)
    6622:	681b      	ldr	r3, [r3, #0]
    6624:	4618      	mov	r0, r3
    6626:	4b03      	ldr	r3, [pc, #12]	; (6634 <SERCOM5_1_Handler+0x18>)
    6628:	4798      	blx	r3
}
    662a:	bf00      	nop
    662c:	bd80      	pop	{r7, pc}
    662e:	bf00      	nop
    6630:	200006cc 	.word	0x200006cc
    6634:	00005e1d 	.word	0x00005e1d

00006638 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6638:	b580      	push	{r7, lr}
    663a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    663c:	4b03      	ldr	r3, [pc, #12]	; (664c <SERCOM5_2_Handler+0x14>)
    663e:	681b      	ldr	r3, [r3, #0]
    6640:	4618      	mov	r0, r3
    6642:	4b03      	ldr	r3, [pc, #12]	; (6650 <SERCOM5_2_Handler+0x18>)
    6644:	4798      	blx	r3
}
    6646:	bf00      	nop
    6648:	bd80      	pop	{r7, pc}
    664a:	bf00      	nop
    664c:	200006cc 	.word	0x200006cc
    6650:	00005e1d 	.word	0x00005e1d

00006654 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6654:	b580      	push	{r7, lr}
    6656:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6658:	4b03      	ldr	r3, [pc, #12]	; (6668 <SERCOM5_3_Handler+0x14>)
    665a:	681b      	ldr	r3, [r3, #0]
    665c:	4618      	mov	r0, r3
    665e:	4b03      	ldr	r3, [pc, #12]	; (666c <SERCOM5_3_Handler+0x18>)
    6660:	4798      	blx	r3
}
    6662:	bf00      	nop
    6664:	bd80      	pop	{r7, pc}
    6666:	bf00      	nop
    6668:	200006cc 	.word	0x200006cc
    666c:	00005e1d 	.word	0x00005e1d

00006670 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6670:	b580      	push	{r7, lr}
    6672:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6674:	4b03      	ldr	r3, [pc, #12]	; (6684 <SERCOM7_0_Handler+0x14>)
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	4618      	mov	r0, r3
    667a:	4b03      	ldr	r3, [pc, #12]	; (6688 <SERCOM7_0_Handler+0x18>)
    667c:	4798      	blx	r3
}
    667e:	bf00      	nop
    6680:	bd80      	pop	{r7, pc}
    6682:	bf00      	nop
    6684:	200006d0 	.word	0x200006d0
    6688:	00005e1d 	.word	0x00005e1d

0000668c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    668c:	b580      	push	{r7, lr}
    668e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6690:	4b03      	ldr	r3, [pc, #12]	; (66a0 <SERCOM7_1_Handler+0x14>)
    6692:	681b      	ldr	r3, [r3, #0]
    6694:	4618      	mov	r0, r3
    6696:	4b03      	ldr	r3, [pc, #12]	; (66a4 <SERCOM7_1_Handler+0x18>)
    6698:	4798      	blx	r3
}
    669a:	bf00      	nop
    669c:	bd80      	pop	{r7, pc}
    669e:	bf00      	nop
    66a0:	200006d0 	.word	0x200006d0
    66a4:	00005e1d 	.word	0x00005e1d

000066a8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    66a8:	b580      	push	{r7, lr}
    66aa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    66ac:	4b03      	ldr	r3, [pc, #12]	; (66bc <SERCOM7_2_Handler+0x14>)
    66ae:	681b      	ldr	r3, [r3, #0]
    66b0:	4618      	mov	r0, r3
    66b2:	4b03      	ldr	r3, [pc, #12]	; (66c0 <SERCOM7_2_Handler+0x18>)
    66b4:	4798      	blx	r3
}
    66b6:	bf00      	nop
    66b8:	bd80      	pop	{r7, pc}
    66ba:	bf00      	nop
    66bc:	200006d0 	.word	0x200006d0
    66c0:	00005e1d 	.word	0x00005e1d

000066c4 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    66c8:	4b03      	ldr	r3, [pc, #12]	; (66d8 <SERCOM7_3_Handler+0x14>)
    66ca:	681b      	ldr	r3, [r3, #0]
    66cc:	4618      	mov	r0, r3
    66ce:	4b03      	ldr	r3, [pc, #12]	; (66dc <SERCOM7_3_Handler+0x18>)
    66d0:	4798      	blx	r3
}
    66d2:	bf00      	nop
    66d4:	bd80      	pop	{r7, pc}
    66d6:	bf00      	nop
    66d8:	200006d0 	.word	0x200006d0
    66dc:	00005e1d 	.word	0x00005e1d

000066e0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    66e0:	b580      	push	{r7, lr}
    66e2:	b084      	sub	sp, #16
    66e4:	af00      	add	r7, sp, #0
    66e6:	6078      	str	r0, [r7, #4]
    66e8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    66ea:	683b      	ldr	r3, [r7, #0]
    66ec:	4618      	mov	r0, r3
    66ee:	4b35      	ldr	r3, [pc, #212]	; (67c4 <_spi_m_sync_init+0xe4>)
    66f0:	4798      	blx	r3
    66f2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d004      	beq.n	6704 <_spi_m_sync_init+0x24>
    66fa:	683b      	ldr	r3, [r7, #0]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d001      	beq.n	6704 <_spi_m_sync_init+0x24>
    6700:	2301      	movs	r3, #1
    6702:	e000      	b.n	6706 <_spi_m_sync_init+0x26>
    6704:	2300      	movs	r3, #0
    6706:	f003 0301 	and.w	r3, r3, #1
    670a:	b2db      	uxtb	r3, r3
    670c:	f640 12e9 	movw	r2, #2537	; 0x9e9
    6710:	492d      	ldr	r1, [pc, #180]	; (67c8 <_spi_m_sync_init+0xe8>)
    6712:	4618      	mov	r0, r3
    6714:	4b2d      	ldr	r3, [pc, #180]	; (67cc <_spi_m_sync_init+0xec>)
    6716:	4798      	blx	r3

	if (regs == NULL) {
    6718:	68fb      	ldr	r3, [r7, #12]
    671a:	2b00      	cmp	r3, #0
    671c:	d102      	bne.n	6724 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    671e:	f06f 030c 	mvn.w	r3, #12
    6722:	e04a      	b.n	67ba <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6724:	2101      	movs	r1, #1
    6726:	6838      	ldr	r0, [r7, #0]
    6728:	4b29      	ldr	r3, [pc, #164]	; (67d0 <_spi_m_sync_init+0xf0>)
    672a:	4798      	blx	r3
    672c:	4603      	mov	r3, r0
    672e:	f083 0301 	eor.w	r3, r3, #1
    6732:	b2db      	uxtb	r3, r3
    6734:	2b00      	cmp	r3, #0
    6736:	d019      	beq.n	676c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6738:	68fb      	ldr	r3, [r7, #12]
    673a:	681b      	ldr	r3, [r3, #0]
    673c:	f003 031c 	and.w	r3, r3, #28
    6740:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6742:	2102      	movs	r1, #2
    6744:	6838      	ldr	r0, [r7, #0]
    6746:	4b23      	ldr	r3, [pc, #140]	; (67d4 <_spi_m_sync_init+0xf4>)
    6748:	4798      	blx	r3
    674a:	4603      	mov	r3, r0
    674c:	2b00      	cmp	r3, #0
    674e:	d006      	beq.n	675e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6750:	6838      	ldr	r0, [r7, #0]
    6752:	4b21      	ldr	r3, [pc, #132]	; (67d8 <_spi_m_sync_init+0xf8>)
    6754:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6756:	2102      	movs	r1, #2
    6758:	6838      	ldr	r0, [r7, #0]
    675a:	4b20      	ldr	r3, [pc, #128]	; (67dc <_spi_m_sync_init+0xfc>)
    675c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    675e:	68bb      	ldr	r3, [r7, #8]
    6760:	f043 0301 	orr.w	r3, r3, #1
    6764:	4619      	mov	r1, r3
    6766:	6838      	ldr	r0, [r7, #0]
    6768:	4b1d      	ldr	r3, [pc, #116]	; (67e0 <_spi_m_sync_init+0x100>)
    676a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    676c:	2101      	movs	r1, #1
    676e:	6838      	ldr	r0, [r7, #0]
    6770:	4b1a      	ldr	r3, [pc, #104]	; (67dc <_spi_m_sync_init+0xfc>)
    6772:	4798      	blx	r3

	dev->prvt = hw;
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	683a      	ldr	r2, [r7, #0]
    6778:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    677a:	68fb      	ldr	r3, [r7, #12]
    677c:	681b      	ldr	r3, [r3, #0]
    677e:	f003 031c 	and.w	r3, r3, #28
    6782:	2b08      	cmp	r3, #8
    6784:	d104      	bne.n	6790 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6786:	68f9      	ldr	r1, [r7, #12]
    6788:	6838      	ldr	r0, [r7, #0]
    678a:	4b16      	ldr	r3, [pc, #88]	; (67e4 <_spi_m_sync_init+0x104>)
    678c:	4798      	blx	r3
    678e:	e003      	b.n	6798 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6790:	68f9      	ldr	r1, [r7, #12]
    6792:	6838      	ldr	r0, [r7, #0]
    6794:	4b14      	ldr	r3, [pc, #80]	; (67e8 <_spi_m_sync_init+0x108>)
    6796:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6798:	68fb      	ldr	r3, [r7, #12]
    679a:	685b      	ldr	r3, [r3, #4]
    679c:	f003 0307 	and.w	r3, r3, #7
    67a0:	2b00      	cmp	r3, #0
    67a2:	d101      	bne.n	67a8 <_spi_m_sync_init+0xc8>
    67a4:	2201      	movs	r2, #1
    67a6:	e000      	b.n	67aa <_spi_m_sync_init+0xca>
    67a8:	2202      	movs	r2, #2
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    67ae:	68fb      	ldr	r3, [r7, #12]
    67b0:	89db      	ldrh	r3, [r3, #14]
    67b2:	b29a      	uxth	r2, r3
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    67b8:	2300      	movs	r3, #0
}
    67ba:	4618      	mov	r0, r3
    67bc:	3710      	adds	r7, #16
    67be:	46bd      	mov	sp, r7
    67c0:	bd80      	pop	{r7, pc}
    67c2:	bf00      	nop
    67c4:	0000648d 	.word	0x0000648d
    67c8:	0000d6a4 	.word	0x0000d6a4
    67cc:	00003079 	.word	0x00003079
    67d0:	000054dd 	.word	0x000054dd
    67d4:	00005795 	.word	0x00005795
    67d8:	0000576d 	.word	0x0000576d
    67dc:	000054b9 	.word	0x000054b9
    67e0:	000057c5 	.word	0x000057c5
    67e4:	000063e1 	.word	0x000063e1
    67e8:	0000634d 	.word	0x0000634d

000067ec <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b086      	sub	sp, #24
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
    67f4:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    67fa:	6839      	ldr	r1, [r7, #0]
    67fc:	6878      	ldr	r0, [r7, #4]
    67fe:	4b1a      	ldr	r3, [pc, #104]	; (6868 <_spi_m_async_init+0x7c>)
    6800:	4798      	blx	r3
    6802:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    6804:	68bb      	ldr	r3, [r7, #8]
    6806:	2b00      	cmp	r3, #0
    6808:	da01      	bge.n	680e <_spi_m_async_init+0x22>
		return rc;
    680a:	68bb      	ldr	r3, [r7, #8]
    680c:	e028      	b.n	6860 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    680e:	6879      	ldr	r1, [r7, #4]
    6810:	6838      	ldr	r0, [r7, #0]
    6812:	4b16      	ldr	r3, [pc, #88]	; (686c <_spi_m_async_init+0x80>)
    6814:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    6816:	68fb      	ldr	r3, [r7, #12]
    6818:	2200      	movs	r2, #0
    681a:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    681c:	68fb      	ldr	r3, [r7, #12]
    681e:	2200      	movs	r2, #0
    6820:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    6822:	68fb      	ldr	r3, [r7, #12]
    6824:	2200      	movs	r2, #0
    6826:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6828:	6838      	ldr	r0, [r7, #0]
    682a:	4b11      	ldr	r3, [pc, #68]	; (6870 <_spi_m_async_init+0x84>)
    682c:	4798      	blx	r3
    682e:	4603      	mov	r3, r0
    6830:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6832:	2300      	movs	r3, #0
    6834:	613b      	str	r3, [r7, #16]
    6836:	e00f      	b.n	6858 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6838:	7dfb      	ldrb	r3, [r7, #23]
    683a:	b21b      	sxth	r3, r3
    683c:	4618      	mov	r0, r3
    683e:	4b0d      	ldr	r3, [pc, #52]	; (6874 <_spi_m_async_init+0x88>)
    6840:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6842:	7dfb      	ldrb	r3, [r7, #23]
    6844:	b21b      	sxth	r3, r3
    6846:	4618      	mov	r0, r3
    6848:	4b0b      	ldr	r3, [pc, #44]	; (6878 <_spi_m_async_init+0x8c>)
    684a:	4798      	blx	r3
		irq++;
    684c:	7dfb      	ldrb	r3, [r7, #23]
    684e:	3301      	adds	r3, #1
    6850:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6852:	693b      	ldr	r3, [r7, #16]
    6854:	3301      	adds	r3, #1
    6856:	613b      	str	r3, [r7, #16]
    6858:	693b      	ldr	r3, [r7, #16]
    685a:	2b03      	cmp	r3, #3
    685c:	d9ec      	bls.n	6838 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    685e:	2300      	movs	r3, #0
}
    6860:	4618      	mov	r0, r3
    6862:	3718      	adds	r7, #24
    6864:	46bd      	mov	sp, r7
    6866:	bd80      	pop	{r7, pc}
    6868:	000066e1 	.word	0x000066e1
    686c:	00005b15 	.word	0x00005b15
    6870:	00005f21 	.word	0x00005f21
    6874:	000053ed 	.word	0x000053ed
    6878:	00005431 	.word	0x00005431

0000687c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    687c:	b580      	push	{r7, lr}
    687e:	b082      	sub	sp, #8
    6880:	af00      	add	r7, sp, #0
    6882:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6884:	bf00      	nop
    6886:	2103      	movs	r1, #3
    6888:	6878      	ldr	r0, [r7, #4]
    688a:	4b06      	ldr	r3, [pc, #24]	; (68a4 <_spi_wait_bus_idle+0x28>)
    688c:	4798      	blx	r3
    688e:	4603      	mov	r3, r0
    6890:	2b00      	cmp	r3, #0
    6892:	d0f8      	beq.n	6886 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6894:	2103      	movs	r1, #3
    6896:	6878      	ldr	r0, [r7, #4]
    6898:	4b03      	ldr	r3, [pc, #12]	; (68a8 <_spi_wait_bus_idle+0x2c>)
    689a:	4798      	blx	r3
}
    689c:	bf00      	nop
    689e:	3708      	adds	r7, #8
    68a0:	46bd      	mov	sp, r7
    68a2:	bd80      	pop	{r7, pc}
    68a4:	00005571 	.word	0x00005571
    68a8:	000055b3 	.word	0x000055b3

000068ac <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    68ac:	b580      	push	{r7, lr}
    68ae:	b086      	sub	sp, #24
    68b0:	af00      	add	r7, sp, #0
    68b2:	60f8      	str	r0, [r7, #12]
    68b4:	60b9      	str	r1, [r7, #8]
    68b6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    68b8:	68bb      	ldr	r3, [r7, #8]
    68ba:	f003 0304 	and.w	r3, r3, #4
    68be:	2b00      	cmp	r3, #0
    68c0:	d101      	bne.n	68c6 <_spi_rx_check_and_receive+0x1a>
		return false;
    68c2:	2300      	movs	r3, #0
    68c4:	e022      	b.n	690c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    68c6:	68f8      	ldr	r0, [r7, #12]
    68c8:	4b12      	ldr	r3, [pc, #72]	; (6914 <_spi_rx_check_and_receive+0x68>)
    68ca:	4798      	blx	r3
    68cc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	685b      	ldr	r3, [r3, #4]
    68d2:	2b00      	cmp	r3, #0
    68d4:	d014      	beq.n	6900 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    68d6:	687b      	ldr	r3, [r7, #4]
    68d8:	685b      	ldr	r3, [r3, #4]
    68da:	1c59      	adds	r1, r3, #1
    68dc:	687a      	ldr	r2, [r7, #4]
    68de:	6051      	str	r1, [r2, #4]
    68e0:	697a      	ldr	r2, [r7, #20]
    68e2:	b2d2      	uxtb	r2, r2
    68e4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	7c1b      	ldrb	r3, [r3, #16]
    68ea:	2b01      	cmp	r3, #1
    68ec:	d908      	bls.n	6900 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	685b      	ldr	r3, [r3, #4]
    68f2:	1c59      	adds	r1, r3, #1
    68f4:	687a      	ldr	r2, [r7, #4]
    68f6:	6051      	str	r1, [r2, #4]
    68f8:	697a      	ldr	r2, [r7, #20]
    68fa:	0a12      	lsrs	r2, r2, #8
    68fc:	b2d2      	uxtb	r2, r2
    68fe:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	68db      	ldr	r3, [r3, #12]
    6904:	1c5a      	adds	r2, r3, #1
    6906:	687b      	ldr	r3, [r7, #4]
    6908:	60da      	str	r2, [r3, #12]

	return true;
    690a:	2301      	movs	r3, #1
}
    690c:	4618      	mov	r0, r3
    690e:	3718      	adds	r7, #24
    6910:	46bd      	mov	sp, r7
    6912:	bd80      	pop	{r7, pc}
    6914:	00005a3d 	.word	0x00005a3d

00006918 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6918:	b580      	push	{r7, lr}
    691a:	b086      	sub	sp, #24
    691c:	af00      	add	r7, sp, #0
    691e:	60f8      	str	r0, [r7, #12]
    6920:	60b9      	str	r1, [r7, #8]
    6922:	607a      	str	r2, [r7, #4]
    6924:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6926:	68bb      	ldr	r3, [r7, #8]
    6928:	f003 0301 	and.w	r3, r3, #1
    692c:	2b00      	cmp	r3, #0
    692e:	d028      	beq.n	6982 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	681b      	ldr	r3, [r3, #0]
    6934:	2b00      	cmp	r3, #0
    6936:	d018      	beq.n	696a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	681b      	ldr	r3, [r3, #0]
    693c:	1c59      	adds	r1, r3, #1
    693e:	687a      	ldr	r2, [r7, #4]
    6940:	6011      	str	r1, [r2, #0]
    6942:	781b      	ldrb	r3, [r3, #0]
    6944:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	7c1b      	ldrb	r3, [r3, #16]
    694a:	2b01      	cmp	r3, #1
    694c:	d90f      	bls.n	696e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    694e:	687b      	ldr	r3, [r7, #4]
    6950:	681b      	ldr	r3, [r3, #0]
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	021b      	lsls	r3, r3, #8
    6956:	461a      	mov	r2, r3
    6958:	697b      	ldr	r3, [r7, #20]
    695a:	4313      	orrs	r3, r2
    695c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    695e:	687b      	ldr	r3, [r7, #4]
    6960:	681b      	ldr	r3, [r3, #0]
    6962:	1c5a      	adds	r2, r3, #1
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	601a      	str	r2, [r3, #0]
    6968:	e001      	b.n	696e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    696a:	887b      	ldrh	r3, [r7, #2]
    696c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    696e:	687b      	ldr	r3, [r7, #4]
    6970:	689b      	ldr	r3, [r3, #8]
    6972:	1c5a      	adds	r2, r3, #1
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6978:	6979      	ldr	r1, [r7, #20]
    697a:	68f8      	ldr	r0, [r7, #12]
    697c:	4b03      	ldr	r3, [pc, #12]	; (698c <_spi_tx_check_and_send+0x74>)
    697e:	4798      	blx	r3
    6980:	e000      	b.n	6984 <_spi_tx_check_and_send+0x6c>
		return;
    6982:	bf00      	nop
}
    6984:	3718      	adds	r7, #24
    6986:	46bd      	mov	sp, r7
    6988:	bd80      	pop	{r7, pc}
    698a:	bf00      	nop
    698c:	00005a21 	.word	0x00005a21

00006990 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6990:	b580      	push	{r7, lr}
    6992:	b082      	sub	sp, #8
    6994:	af00      	add	r7, sp, #0
    6996:	6078      	str	r0, [r7, #4]
    6998:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    69a0:	2b00      	cmp	r3, #0
    69a2:	d00b      	beq.n	69bc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    69a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    69a8:	6838      	ldr	r0, [r7, #0]
    69aa:	4b07      	ldr	r3, [pc, #28]	; (69c8 <_spi_err_check+0x38>)
    69ac:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    69ae:	2180      	movs	r1, #128	; 0x80
    69b0:	6838      	ldr	r0, [r7, #0]
    69b2:	4b06      	ldr	r3, [pc, #24]	; (69cc <_spi_err_check+0x3c>)
    69b4:	4798      	blx	r3
		return ERR_OVERFLOW;
    69b6:	f06f 0312 	mvn.w	r3, #18
    69ba:	e000      	b.n	69be <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    69bc:	2300      	movs	r3, #0
}
    69be:	4618      	mov	r0, r3
    69c0:	3708      	adds	r7, #8
    69c2:	46bd      	mov	sp, r7
    69c4:	bd80      	pop	{r7, pc}
    69c6:	bf00      	nop
    69c8:	00005a75 	.word	0x00005a75
    69cc:	000055b3 	.word	0x000055b3

000069d0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    69d0:	b590      	push	{r4, r7, lr}
    69d2:	b08b      	sub	sp, #44	; 0x2c
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
    69d8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	681b      	ldr	r3, [r3, #0]
    69de:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    69e0:	2300      	movs	r3, #0
    69e2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    69e4:	683b      	ldr	r3, [r7, #0]
    69e6:	681b      	ldr	r3, [r3, #0]
    69e8:	60bb      	str	r3, [r7, #8]
    69ea:	683b      	ldr	r3, [r7, #0]
    69ec:	685b      	ldr	r3, [r3, #4]
    69ee:	60fb      	str	r3, [r7, #12]
    69f0:	2300      	movs	r3, #0
    69f2:	613b      	str	r3, [r7, #16]
    69f4:	2300      	movs	r3, #0
    69f6:	617b      	str	r3, [r7, #20]
    69f8:	687b      	ldr	r3, [r7, #4]
    69fa:	791b      	ldrb	r3, [r3, #4]
    69fc:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    69fe:	687b      	ldr	r3, [r7, #4]
    6a00:	2b00      	cmp	r3, #0
    6a02:	d004      	beq.n	6a0e <_spi_m_sync_trans+0x3e>
    6a04:	6a3b      	ldr	r3, [r7, #32]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d001      	beq.n	6a0e <_spi_m_sync_trans+0x3e>
    6a0a:	2301      	movs	r3, #1
    6a0c:	e000      	b.n	6a10 <_spi_m_sync_trans+0x40>
    6a0e:	2300      	movs	r3, #0
    6a10:	f003 0301 	and.w	r3, r3, #1
    6a14:	b2db      	uxtb	r3, r3
    6a16:	f640 324d 	movw	r2, #2893	; 0xb4d
    6a1a:	492b      	ldr	r1, [pc, #172]	; (6ac8 <_spi_m_sync_trans+0xf8>)
    6a1c:	4618      	mov	r0, r3
    6a1e:	4b2b      	ldr	r3, [pc, #172]	; (6acc <_spi_m_sync_trans+0xfc>)
    6a20:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6a22:	2107      	movs	r1, #7
    6a24:	6a38      	ldr	r0, [r7, #32]
    6a26:	4b2a      	ldr	r3, [pc, #168]	; (6ad0 <_spi_m_sync_trans+0x100>)
    6a28:	4798      	blx	r3
    6a2a:	4603      	mov	r3, r0
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d002      	beq.n	6a36 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6a30:	f06f 0303 	mvn.w	r3, #3
    6a34:	e043      	b.n	6abe <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6a36:	6a38      	ldr	r0, [r7, #32]
    6a38:	4b26      	ldr	r3, [pc, #152]	; (6ad4 <_spi_m_sync_trans+0x104>)
    6a3a:	4798      	blx	r3
    6a3c:	4603      	mov	r3, r0
    6a3e:	f083 0301 	eor.w	r3, r3, #1
    6a42:	b2db      	uxtb	r3, r3
    6a44:	2b00      	cmp	r3, #0
    6a46:	d002      	beq.n	6a4e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6a48:	f06f 0313 	mvn.w	r3, #19
    6a4c:	e037      	b.n	6abe <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6a4e:	6a38      	ldr	r0, [r7, #32]
    6a50:	4b21      	ldr	r3, [pc, #132]	; (6ad8 <_spi_m_sync_trans+0x108>)
    6a52:	4798      	blx	r3
    6a54:	4603      	mov	r3, r0
    6a56:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6a58:	f107 0308 	add.w	r3, r7, #8
    6a5c:	461a      	mov	r2, r3
    6a5e:	69f9      	ldr	r1, [r7, #28]
    6a60:	6a38      	ldr	r0, [r7, #32]
    6a62:	4b1e      	ldr	r3, [pc, #120]	; (6adc <_spi_m_sync_trans+0x10c>)
    6a64:	4798      	blx	r3
    6a66:	4603      	mov	r3, r0
    6a68:	f083 0301 	eor.w	r3, r3, #1
    6a6c:	b2db      	uxtb	r3, r3
    6a6e:	2b00      	cmp	r3, #0
    6a70:	d00b      	beq.n	6a8a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6a72:	697a      	ldr	r2, [r7, #20]
    6a74:	693b      	ldr	r3, [r7, #16]
    6a76:	429a      	cmp	r2, r3
    6a78:	d307      	bcc.n	6a8a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6a7a:	687b      	ldr	r3, [r7, #4]
    6a7c:	88db      	ldrh	r3, [r3, #6]
    6a7e:	f107 0208 	add.w	r2, r7, #8
    6a82:	69f9      	ldr	r1, [r7, #28]
    6a84:	6a38      	ldr	r0, [r7, #32]
    6a86:	4c16      	ldr	r4, [pc, #88]	; (6ae0 <_spi_m_sync_trans+0x110>)
    6a88:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6a8a:	6a39      	ldr	r1, [r7, #32]
    6a8c:	69f8      	ldr	r0, [r7, #28]
    6a8e:	4b15      	ldr	r3, [pc, #84]	; (6ae4 <_spi_m_sync_trans+0x114>)
    6a90:	4798      	blx	r3
    6a92:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a96:	2b00      	cmp	r3, #0
    6a98:	db0c      	blt.n	6ab4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6a9a:	693a      	ldr	r2, [r7, #16]
    6a9c:	683b      	ldr	r3, [r7, #0]
    6a9e:	689b      	ldr	r3, [r3, #8]
    6aa0:	429a      	cmp	r2, r3
    6aa2:	d3d4      	bcc.n	6a4e <_spi_m_sync_trans+0x7e>
    6aa4:	697a      	ldr	r2, [r7, #20]
    6aa6:	683b      	ldr	r3, [r7, #0]
    6aa8:	689b      	ldr	r3, [r3, #8]
    6aaa:	429a      	cmp	r2, r3
    6aac:	d3cf      	bcc.n	6a4e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6aae:	693b      	ldr	r3, [r7, #16]
    6ab0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6ab2:	e000      	b.n	6ab6 <_spi_m_sync_trans+0xe6>
			break;
    6ab4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6ab6:	6a38      	ldr	r0, [r7, #32]
    6ab8:	4b0b      	ldr	r3, [pc, #44]	; (6ae8 <_spi_m_sync_trans+0x118>)
    6aba:	4798      	blx	r3

	return rc;
    6abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6abe:	4618      	mov	r0, r3
    6ac0:	372c      	adds	r7, #44	; 0x2c
    6ac2:	46bd      	mov	sp, r7
    6ac4:	bd90      	pop	{r4, r7, pc}
    6ac6:	bf00      	nop
    6ac8:	0000d6a4 	.word	0x0000d6a4
    6acc:	00003079 	.word	0x00003079
    6ad0:	000054dd 	.word	0x000054dd
    6ad4:	00005735 	.word	0x00005735
    6ad8:	00005599 	.word	0x00005599
    6adc:	000068ad 	.word	0x000068ad
    6ae0:	00006919 	.word	0x00006919
    6ae4:	00006991 	.word	0x00006991
    6ae8:	0000687d 	.word	0x0000687d

00006aec <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6aec:	b580      	push	{r7, lr}
    6aee:	b084      	sub	sp, #16
    6af0:	af00      	add	r7, sp, #0
    6af2:	6078      	str	r0, [r7, #4]
    6af4:	460b      	mov	r3, r1
    6af6:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	681b      	ldr	r3, [r3, #0]
    6afc:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	2b00      	cmp	r3, #0
    6b02:	d004      	beq.n	6b0e <_spi_m_async_enable_tx+0x22>
    6b04:	68fb      	ldr	r3, [r7, #12]
    6b06:	2b00      	cmp	r3, #0
    6b08:	d001      	beq.n	6b0e <_spi_m_async_enable_tx+0x22>
    6b0a:	2301      	movs	r3, #1
    6b0c:	e000      	b.n	6b10 <_spi_m_async_enable_tx+0x24>
    6b0e:	2300      	movs	r3, #0
    6b10:	f003 0301 	and.w	r3, r3, #1
    6b14:	b2db      	uxtb	r3, r3
    6b16:	f640 3279 	movw	r2, #2937	; 0xb79
    6b1a:	4909      	ldr	r1, [pc, #36]	; (6b40 <_spi_m_async_enable_tx+0x54>)
    6b1c:	4618      	mov	r0, r3
    6b1e:	4b09      	ldr	r3, [pc, #36]	; (6b44 <_spi_m_async_enable_tx+0x58>)
    6b20:	4798      	blx	r3

	if (state) {
    6b22:	78fb      	ldrb	r3, [r7, #3]
    6b24:	2b00      	cmp	r3, #0
    6b26:	d003      	beq.n	6b30 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6b28:	68f8      	ldr	r0, [r7, #12]
    6b2a:	4b07      	ldr	r3, [pc, #28]	; (6b48 <_spi_m_async_enable_tx+0x5c>)
    6b2c:	4798      	blx	r3
    6b2e:	e002      	b.n	6b36 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6b30:	68f8      	ldr	r0, [r7, #12]
    6b32:	4b06      	ldr	r3, [pc, #24]	; (6b4c <_spi_m_async_enable_tx+0x60>)
    6b34:	4798      	blx	r3
	}

	return ERR_NONE;
    6b36:	2300      	movs	r3, #0
}
    6b38:	4618      	mov	r0, r3
    6b3a:	3710      	adds	r7, #16
    6b3c:	46bd      	mov	sp, r7
    6b3e:	bd80      	pop	{r7, pc}
    6b40:	0000d6a4 	.word	0x0000d6a4
    6b44:	00003079 	.word	0x00003079
    6b48:	000055d1 	.word	0x000055d1
    6b4c:	000055eb 	.word	0x000055eb

00006b50 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6b50:	b580      	push	{r7, lr}
    6b52:	b084      	sub	sp, #16
    6b54:	af00      	add	r7, sp, #0
    6b56:	6078      	str	r0, [r7, #4]
    6b58:	460b      	mov	r3, r1
    6b5a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6b62:	687b      	ldr	r3, [r7, #4]
    6b64:	2b00      	cmp	r3, #0
    6b66:	bf14      	ite	ne
    6b68:	2301      	movne	r3, #1
    6b6a:	2300      	moveq	r3, #0
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	f640 328d 	movw	r2, #2957	; 0xb8d
    6b72:	490f      	ldr	r1, [pc, #60]	; (6bb0 <_spi_m_async_enable_rx+0x60>)
    6b74:	4618      	mov	r0, r3
    6b76:	4b0f      	ldr	r3, [pc, #60]	; (6bb4 <_spi_m_async_enable_rx+0x64>)
    6b78:	4798      	blx	r3
	ASSERT(hw);
    6b7a:	68fb      	ldr	r3, [r7, #12]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	bf14      	ite	ne
    6b80:	2301      	movne	r3, #1
    6b82:	2300      	moveq	r3, #0
    6b84:	b2db      	uxtb	r3, r3
    6b86:	f640 328e 	movw	r2, #2958	; 0xb8e
    6b8a:	4909      	ldr	r1, [pc, #36]	; (6bb0 <_spi_m_async_enable_rx+0x60>)
    6b8c:	4618      	mov	r0, r3
    6b8e:	4b09      	ldr	r3, [pc, #36]	; (6bb4 <_spi_m_async_enable_rx+0x64>)
    6b90:	4798      	blx	r3

	if (state) {
    6b92:	78fb      	ldrb	r3, [r7, #3]
    6b94:	2b00      	cmp	r3, #0
    6b96:	d003      	beq.n	6ba0 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6b98:	68f8      	ldr	r0, [r7, #12]
    6b9a:	4b07      	ldr	r3, [pc, #28]	; (6bb8 <_spi_m_async_enable_rx+0x68>)
    6b9c:	4798      	blx	r3
    6b9e:	e002      	b.n	6ba6 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6ba0:	68f8      	ldr	r0, [r7, #12]
    6ba2:	4b06      	ldr	r3, [pc, #24]	; (6bbc <_spi_m_async_enable_rx+0x6c>)
    6ba4:	4798      	blx	r3
	}

	return ERR_NONE;
    6ba6:	2300      	movs	r3, #0
}
    6ba8:	4618      	mov	r0, r3
    6baa:	3710      	adds	r7, #16
    6bac:	46bd      	mov	sp, r7
    6bae:	bd80      	pop	{r7, pc}
    6bb0:	0000d6a4 	.word	0x0000d6a4
    6bb4:	00003079 	.word	0x00003079
    6bb8:	00005639 	.word	0x00005639
    6bbc:	00005653 	.word	0x00005653

00006bc0 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6bc0:	b580      	push	{r7, lr}
    6bc2:	b082      	sub	sp, #8
    6bc4:	af00      	add	r7, sp, #0
    6bc6:	6078      	str	r0, [r7, #4]
    6bc8:	460b      	mov	r3, r1
    6bca:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    6bcc:	687b      	ldr	r3, [r7, #4]
    6bce:	2b00      	cmp	r3, #0
    6bd0:	d005      	beq.n	6bde <_spi_m_async_enable_tx_complete+0x1e>
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	681b      	ldr	r3, [r3, #0]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d001      	beq.n	6bde <_spi_m_async_enable_tx_complete+0x1e>
    6bda:	2301      	movs	r3, #1
    6bdc:	e000      	b.n	6be0 <_spi_m_async_enable_tx_complete+0x20>
    6bde:	2300      	movs	r3, #0
    6be0:	f003 0301 	and.w	r3, r3, #1
    6be4:	b2db      	uxtb	r3, r3
    6be6:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    6bea:	490b      	ldr	r1, [pc, #44]	; (6c18 <_spi_m_async_enable_tx_complete+0x58>)
    6bec:	4618      	mov	r0, r3
    6bee:	4b0b      	ldr	r3, [pc, #44]	; (6c1c <_spi_m_async_enable_tx_complete+0x5c>)
    6bf0:	4798      	blx	r3

	if (state) {
    6bf2:	78fb      	ldrb	r3, [r7, #3]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d005      	beq.n	6c04 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	4618      	mov	r0, r3
    6bfe:	4b08      	ldr	r3, [pc, #32]	; (6c20 <_spi_m_async_enable_tx_complete+0x60>)
    6c00:	4798      	blx	r3
    6c02:	e004      	b.n	6c0e <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	681b      	ldr	r3, [r3, #0]
    6c08:	4618      	mov	r0, r3
    6c0a:	4b06      	ldr	r3, [pc, #24]	; (6c24 <_spi_m_async_enable_tx_complete+0x64>)
    6c0c:	4798      	blx	r3
	}

	return ERR_NONE;
    6c0e:	2300      	movs	r3, #0
}
    6c10:	4618      	mov	r0, r3
    6c12:	3708      	adds	r7, #8
    6c14:	46bd      	mov	sp, r7
    6c16:	bd80      	pop	{r7, pc}
    6c18:	0000d6a4 	.word	0x0000d6a4
    6c1c:	00003079 	.word	0x00003079
    6c20:	00005605 	.word	0x00005605
    6c24:	0000561f 	.word	0x0000561f

00006c28 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    6c28:	b580      	push	{r7, lr}
    6c2a:	b082      	sub	sp, #8
    6c2c:	af00      	add	r7, sp, #0
    6c2e:	6078      	str	r0, [r7, #4]
    6c30:	460b      	mov	r3, r1
    6c32:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	2b00      	cmp	r3, #0
    6c38:	d005      	beq.n	6c46 <_spi_m_async_write_one+0x1e>
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	681b      	ldr	r3, [r3, #0]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	d001      	beq.n	6c46 <_spi_m_async_write_one+0x1e>
    6c42:	2301      	movs	r3, #1
    6c44:	e000      	b.n	6c48 <_spi_m_async_write_one+0x20>
    6c46:	2300      	movs	r3, #0
    6c48:	f003 0301 	and.w	r3, r3, #1
    6c4c:	b2db      	uxtb	r3, r3
    6c4e:	f640 32b2 	movw	r2, #2994	; 0xbb2
    6c52:	4908      	ldr	r1, [pc, #32]	; (6c74 <_spi_m_async_write_one+0x4c>)
    6c54:	4618      	mov	r0, r3
    6c56:	4b08      	ldr	r3, [pc, #32]	; (6c78 <_spi_m_async_write_one+0x50>)
    6c58:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6c5a:	687b      	ldr	r3, [r7, #4]
    6c5c:	681b      	ldr	r3, [r3, #0]
    6c5e:	887a      	ldrh	r2, [r7, #2]
    6c60:	4611      	mov	r1, r2
    6c62:	4618      	mov	r0, r3
    6c64:	4b05      	ldr	r3, [pc, #20]	; (6c7c <_spi_m_async_write_one+0x54>)
    6c66:	4798      	blx	r3

	return ERR_NONE;
    6c68:	2300      	movs	r3, #0
}
    6c6a:	4618      	mov	r0, r3
    6c6c:	3708      	adds	r7, #8
    6c6e:	46bd      	mov	sp, r7
    6c70:	bd80      	pop	{r7, pc}
    6c72:	bf00      	nop
    6c74:	0000d6a4 	.word	0x0000d6a4
    6c78:	00003079 	.word	0x00003079
    6c7c:	00005a21 	.word	0x00005a21

00006c80 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    6c80:	b580      	push	{r7, lr}
    6c82:	b082      	sub	sp, #8
    6c84:	af00      	add	r7, sp, #0
    6c86:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d005      	beq.n	6c9a <_spi_m_async_read_one+0x1a>
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	681b      	ldr	r3, [r3, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d001      	beq.n	6c9a <_spi_m_async_read_one+0x1a>
    6c96:	2301      	movs	r3, #1
    6c98:	e000      	b.n	6c9c <_spi_m_async_read_one+0x1c>
    6c9a:	2300      	movs	r3, #0
    6c9c:	f003 0301 	and.w	r3, r3, #1
    6ca0:	b2db      	uxtb	r3, r3
    6ca2:	f640 32cd 	movw	r2, #3021	; 0xbcd
    6ca6:	4907      	ldr	r1, [pc, #28]	; (6cc4 <_spi_m_async_read_one+0x44>)
    6ca8:	4618      	mov	r0, r3
    6caa:	4b07      	ldr	r3, [pc, #28]	; (6cc8 <_spi_m_async_read_one+0x48>)
    6cac:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	681b      	ldr	r3, [r3, #0]
    6cb2:	4618      	mov	r0, r3
    6cb4:	4b05      	ldr	r3, [pc, #20]	; (6ccc <_spi_m_async_read_one+0x4c>)
    6cb6:	4798      	blx	r3
    6cb8:	4603      	mov	r3, r0
    6cba:	b29b      	uxth	r3, r3
}
    6cbc:	4618      	mov	r0, r3
    6cbe:	3708      	adds	r7, #8
    6cc0:	46bd      	mov	sp, r7
    6cc2:	bd80      	pop	{r7, pc}
    6cc4:	0000d6a4 	.word	0x0000d6a4
    6cc8:	00003079 	.word	0x00003079
    6ccc:	00005a3d 	.word	0x00005a3d

00006cd0 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    6cd0:	b580      	push	{r7, lr}
    6cd2:	b086      	sub	sp, #24
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	60f8      	str	r0, [r7, #12]
    6cd8:	460b      	mov	r3, r1
    6cda:	607a      	str	r2, [r7, #4]
    6cdc:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    6cde:	68fb      	ldr	r3, [r7, #12]
    6ce0:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    6ce2:	68fb      	ldr	r3, [r7, #12]
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d004      	beq.n	6cf2 <_spi_m_async_register_callback+0x22>
    6ce8:	7afb      	ldrb	r3, [r7, #11]
    6cea:	2b03      	cmp	r3, #3
    6cec:	d801      	bhi.n	6cf2 <_spi_m_async_register_callback+0x22>
    6cee:	2301      	movs	r3, #1
    6cf0:	e000      	b.n	6cf4 <_spi_m_async_register_callback+0x24>
    6cf2:	2300      	movs	r3, #0
    6cf4:	f003 0301 	and.w	r3, r3, #1
    6cf8:	b2db      	uxtb	r3, r3
    6cfa:	f640 32e6 	movw	r2, #3046	; 0xbe6
    6cfe:	4909      	ldr	r1, [pc, #36]	; (6d24 <_spi_m_async_register_callback+0x54>)
    6d00:	4618      	mov	r0, r3
    6d02:	4b09      	ldr	r3, [pc, #36]	; (6d28 <_spi_m_async_register_callback+0x58>)
    6d04:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    6d06:	697b      	ldr	r3, [r7, #20]
    6d08:	3308      	adds	r3, #8
    6d0a:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    6d0c:	7afb      	ldrb	r3, [r7, #11]
    6d0e:	009b      	lsls	r3, r3, #2
    6d10:	693a      	ldr	r2, [r7, #16]
    6d12:	4413      	add	r3, r2
    6d14:	687a      	ldr	r2, [r7, #4]
    6d16:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6d18:	2300      	movs	r3, #0
}
    6d1a:	4618      	mov	r0, r3
    6d1c:	3718      	adds	r7, #24
    6d1e:	46bd      	mov	sp, r7
    6d20:	bd80      	pop	{r7, pc}
    6d22:	bf00      	nop
    6d24:	0000d6a4 	.word	0x0000d6a4
    6d28:	00003079 	.word	0x00003079

00006d2c <__NVIC_EnableIRQ>:
{
    6d2c:	b480      	push	{r7}
    6d2e:	b083      	sub	sp, #12
    6d30:	af00      	add	r7, sp, #0
    6d32:	4603      	mov	r3, r0
    6d34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	db0b      	blt.n	6d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d3e:	4909      	ldr	r1, [pc, #36]	; (6d64 <__NVIC_EnableIRQ+0x38>)
    6d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d44:	095b      	lsrs	r3, r3, #5
    6d46:	88fa      	ldrh	r2, [r7, #6]
    6d48:	f002 021f 	and.w	r2, r2, #31
    6d4c:	2001      	movs	r0, #1
    6d4e:	fa00 f202 	lsl.w	r2, r0, r2
    6d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d56:	bf00      	nop
    6d58:	370c      	adds	r7, #12
    6d5a:	46bd      	mov	sp, r7
    6d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d60:	4770      	bx	lr
    6d62:	bf00      	nop
    6d64:	e000e100 	.word	0xe000e100

00006d68 <__NVIC_DisableIRQ>:
{
    6d68:	b480      	push	{r7}
    6d6a:	b083      	sub	sp, #12
    6d6c:	af00      	add	r7, sp, #0
    6d6e:	4603      	mov	r3, r0
    6d70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d76:	2b00      	cmp	r3, #0
    6d78:	db10      	blt.n	6d9c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d7a:	490b      	ldr	r1, [pc, #44]	; (6da8 <__NVIC_DisableIRQ+0x40>)
    6d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d80:	095b      	lsrs	r3, r3, #5
    6d82:	88fa      	ldrh	r2, [r7, #6]
    6d84:	f002 021f 	and.w	r2, r2, #31
    6d88:	2001      	movs	r0, #1
    6d8a:	fa00 f202 	lsl.w	r2, r0, r2
    6d8e:	3320      	adds	r3, #32
    6d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d98:	f3bf 8f6f 	isb	sy
}
    6d9c:	bf00      	nop
    6d9e:	370c      	adds	r7, #12
    6da0:	46bd      	mov	sp, r7
    6da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6da6:	4770      	bx	lr
    6da8:	e000e100 	.word	0xe000e100

00006dac <__NVIC_ClearPendingIRQ>:
{
    6dac:	b480      	push	{r7}
    6dae:	b083      	sub	sp, #12
    6db0:	af00      	add	r7, sp, #0
    6db2:	4603      	mov	r3, r0
    6db4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	db0c      	blt.n	6dd8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dbe:	4909      	ldr	r1, [pc, #36]	; (6de4 <__NVIC_ClearPendingIRQ+0x38>)
    6dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dc4:	095b      	lsrs	r3, r3, #5
    6dc6:	88fa      	ldrh	r2, [r7, #6]
    6dc8:	f002 021f 	and.w	r2, r2, #31
    6dcc:	2001      	movs	r0, #1
    6dce:	fa00 f202 	lsl.w	r2, r0, r2
    6dd2:	3360      	adds	r3, #96	; 0x60
    6dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dd8:	bf00      	nop
    6dda:	370c      	adds	r7, #12
    6ddc:	46bd      	mov	sp, r7
    6dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    6de2:	4770      	bx	lr
    6de4:	e000e100 	.word	0xe000e100

00006de8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6de8:	b480      	push	{r7}
    6dea:	b083      	sub	sp, #12
    6dec:	af00      	add	r7, sp, #0
    6dee:	6078      	str	r0, [r7, #4]
    6df0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6df2:	bf00      	nop
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	691a      	ldr	r2, [r3, #16]
    6df8:	683b      	ldr	r3, [r7, #0]
    6dfa:	4013      	ands	r3, r2
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d1f9      	bne.n	6df4 <hri_tc_wait_for_sync+0xc>
	};
}
    6e00:	bf00      	nop
    6e02:	370c      	adds	r7, #12
    6e04:	46bd      	mov	sp, r7
    6e06:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e0a:	4770      	bx	lr

00006e0c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6e0c:	b480      	push	{r7}
    6e0e:	b083      	sub	sp, #12
    6e10:	af00      	add	r7, sp, #0
    6e12:	6078      	str	r0, [r7, #4]
    6e14:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	691a      	ldr	r2, [r3, #16]
    6e1a:	683b      	ldr	r3, [r7, #0]
    6e1c:	4013      	ands	r3, r2
    6e1e:	2b00      	cmp	r3, #0
    6e20:	bf14      	ite	ne
    6e22:	2301      	movne	r3, #1
    6e24:	2300      	moveq	r3, #0
    6e26:	b2db      	uxtb	r3, r3
}
    6e28:	4618      	mov	r0, r3
    6e2a:	370c      	adds	r7, #12
    6e2c:	46bd      	mov	sp, r7
    6e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e32:	4770      	bx	lr

00006e34 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    6e34:	b480      	push	{r7}
    6e36:	b083      	sub	sp, #12
    6e38:	af00      	add	r7, sp, #0
    6e3a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    6e3c:	687b      	ldr	r3, [r7, #4]
    6e3e:	7a9b      	ldrb	r3, [r3, #10]
    6e40:	b2db      	uxtb	r3, r3
    6e42:	f003 0301 	and.w	r3, r3, #1
    6e46:	2b00      	cmp	r3, #0
    6e48:	bf14      	ite	ne
    6e4a:	2301      	movne	r3, #1
    6e4c:	2300      	moveq	r3, #0
    6e4e:	b2db      	uxtb	r3, r3
}
    6e50:	4618      	mov	r0, r3
    6e52:	370c      	adds	r7, #12
    6e54:	46bd      	mov	sp, r7
    6e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e5a:	4770      	bx	lr

00006e5c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    6e5c:	b480      	push	{r7}
    6e5e:	b083      	sub	sp, #12
    6e60:	af00      	add	r7, sp, #0
    6e62:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	2201      	movs	r2, #1
    6e68:	729a      	strb	r2, [r3, #10]
}
    6e6a:	bf00      	nop
    6e6c:	370c      	adds	r7, #12
    6e6e:	46bd      	mov	sp, r7
    6e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e74:	4770      	bx	lr

00006e76 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    6e76:	b480      	push	{r7}
    6e78:	b083      	sub	sp, #12
    6e7a:	af00      	add	r7, sp, #0
    6e7c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	2202      	movs	r2, #2
    6e82:	729a      	strb	r2, [r3, #10]
}
    6e84:	bf00      	nop
    6e86:	370c      	adds	r7, #12
    6e88:	46bd      	mov	sp, r7
    6e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e8e:	4770      	bx	lr

00006e90 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    6e90:	b480      	push	{r7}
    6e92:	b083      	sub	sp, #12
    6e94:	af00      	add	r7, sp, #0
    6e96:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    6e98:	687b      	ldr	r3, [r7, #4]
    6e9a:	2201      	movs	r2, #1
    6e9c:	725a      	strb	r2, [r3, #9]
}
    6e9e:	bf00      	nop
    6ea0:	370c      	adds	r7, #12
    6ea2:	46bd      	mov	sp, r7
    6ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea8:	4770      	bx	lr

00006eaa <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    6eaa:	b480      	push	{r7}
    6eac:	b083      	sub	sp, #12
    6eae:	af00      	add	r7, sp, #0
    6eb0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	7a5b      	ldrb	r3, [r3, #9]
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	085b      	lsrs	r3, r3, #1
    6eba:	f003 0301 	and.w	r3, r3, #1
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	bf14      	ite	ne
    6ec2:	2301      	movne	r3, #1
    6ec4:	2300      	moveq	r3, #0
    6ec6:	b2db      	uxtb	r3, r3
}
    6ec8:	4618      	mov	r0, r3
    6eca:	370c      	adds	r7, #12
    6ecc:	46bd      	mov	sp, r7
    6ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ed2:	4770      	bx	lr

00006ed4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b082      	sub	sp, #8
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	681b      	ldr	r3, [r3, #0]
    6ee0:	f043 0202 	orr.w	r2, r3, #2
    6ee4:	687b      	ldr	r3, [r7, #4]
    6ee6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6ee8:	2103      	movs	r1, #3
    6eea:	6878      	ldr	r0, [r7, #4]
    6eec:	4b02      	ldr	r3, [pc, #8]	; (6ef8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    6eee:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6ef0:	bf00      	nop
    6ef2:	3708      	adds	r7, #8
    6ef4:	46bd      	mov	sp, r7
    6ef6:	bd80      	pop	{r7, pc}
    6ef8:	00006de9 	.word	0x00006de9

00006efc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6efc:	b580      	push	{r7, lr}
    6efe:	b084      	sub	sp, #16
    6f00:	af00      	add	r7, sp, #0
    6f02:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f04:	2103      	movs	r1, #3
    6f06:	6878      	ldr	r0, [r7, #4]
    6f08:	4b09      	ldr	r3, [pc, #36]	; (6f30 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    6f0a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	681b      	ldr	r3, [r3, #0]
    6f10:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    6f12:	68fb      	ldr	r3, [r7, #12]
    6f14:	085b      	lsrs	r3, r3, #1
    6f16:	f003 0301 	and.w	r3, r3, #1
    6f1a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6f1c:	68fb      	ldr	r3, [r7, #12]
    6f1e:	2b00      	cmp	r3, #0
    6f20:	bf14      	ite	ne
    6f22:	2301      	movne	r3, #1
    6f24:	2300      	moveq	r3, #0
    6f26:	b2db      	uxtb	r3, r3
}
    6f28:	4618      	mov	r0, r3
    6f2a:	3710      	adds	r7, #16
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	00006de9 	.word	0x00006de9

00006f34 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b082      	sub	sp, #8
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	f023 0202 	bic.w	r2, r3, #2
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f48:	2103      	movs	r1, #3
    6f4a:	6878      	ldr	r0, [r7, #4]
    6f4c:	4b02      	ldr	r3, [pc, #8]	; (6f58 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    6f4e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f50:	bf00      	nop
    6f52:	3708      	adds	r7, #8
    6f54:	46bd      	mov	sp, r7
    6f56:	bd80      	pop	{r7, pc}
    6f58:	00006de9 	.word	0x00006de9

00006f5c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    6f5c:	b580      	push	{r7, lr}
    6f5e:	b084      	sub	sp, #16
    6f60:	af00      	add	r7, sp, #0
    6f62:	6078      	str	r0, [r7, #4]
    6f64:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f66:	2103      	movs	r1, #3
    6f68:	6878      	ldr	r0, [r7, #4]
    6f6a:	4b07      	ldr	r3, [pc, #28]	; (6f88 <hri_tc_get_CTRLA_reg+0x2c>)
    6f6c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	681b      	ldr	r3, [r3, #0]
    6f72:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6f74:	68fa      	ldr	r2, [r7, #12]
    6f76:	683b      	ldr	r3, [r7, #0]
    6f78:	4013      	ands	r3, r2
    6f7a:	60fb      	str	r3, [r7, #12]
	return tmp;
    6f7c:	68fb      	ldr	r3, [r7, #12]
}
    6f7e:	4618      	mov	r0, r3
    6f80:	3710      	adds	r7, #16
    6f82:	46bd      	mov	sp, r7
    6f84:	bd80      	pop	{r7, pc}
    6f86:	bf00      	nop
    6f88:	00006de9 	.word	0x00006de9

00006f8c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    6f8c:	b580      	push	{r7, lr}
    6f8e:	b082      	sub	sp, #8
    6f90:	af00      	add	r7, sp, #0
    6f92:	6078      	str	r0, [r7, #4]
    6f94:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6f96:	687b      	ldr	r3, [r7, #4]
    6f98:	683a      	ldr	r2, [r7, #0]
    6f9a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f9c:	2103      	movs	r1, #3
    6f9e:	6878      	ldr	r0, [r7, #4]
    6fa0:	4b02      	ldr	r3, [pc, #8]	; (6fac <hri_tc_write_CTRLA_reg+0x20>)
    6fa2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6fa4:	bf00      	nop
    6fa6:	3708      	adds	r7, #8
    6fa8:	46bd      	mov	sp, r7
    6faa:	bd80      	pop	{r7, pc}
    6fac:	00006de9 	.word	0x00006de9

00006fb0 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    6fb0:	b480      	push	{r7}
    6fb2:	b083      	sub	sp, #12
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	6078      	str	r0, [r7, #4]
    6fb8:	460b      	mov	r3, r1
    6fba:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	887a      	ldrh	r2, [r7, #2]
    6fc0:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fc2:	bf00      	nop
    6fc4:	370c      	adds	r7, #12
    6fc6:	46bd      	mov	sp, r7
    6fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fcc:	4770      	bx	lr

00006fce <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    6fce:	b480      	push	{r7}
    6fd0:	b083      	sub	sp, #12
    6fd2:	af00      	add	r7, sp, #0
    6fd4:	6078      	str	r0, [r7, #4]
    6fd6:	460b      	mov	r3, r1
    6fd8:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	78fa      	ldrb	r2, [r7, #3]
    6fde:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fe0:	bf00      	nop
    6fe2:	370c      	adds	r7, #12
    6fe4:	46bd      	mov	sp, r7
    6fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fea:	4770      	bx	lr

00006fec <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    6fec:	b480      	push	{r7}
    6fee:	b083      	sub	sp, #12
    6ff0:	af00      	add	r7, sp, #0
    6ff2:	6078      	str	r0, [r7, #4]
    6ff4:	460b      	mov	r3, r1
    6ff6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	78fa      	ldrb	r2, [r7, #3]
    6ffc:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    6ffe:	bf00      	nop
    7000:	370c      	adds	r7, #12
    7002:	46bd      	mov	sp, r7
    7004:	f85d 7b04 	ldr.w	r7, [sp], #4
    7008:	4770      	bx	lr
	...

0000700c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    700c:	b580      	push	{r7, lr}
    700e:	b082      	sub	sp, #8
    7010:	af00      	add	r7, sp, #0
    7012:	6078      	str	r0, [r7, #4]
    7014:	460b      	mov	r3, r1
    7016:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	78fa      	ldrb	r2, [r7, #3]
    701c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    701e:	2120      	movs	r1, #32
    7020:	6878      	ldr	r0, [r7, #4]
    7022:	4b03      	ldr	r3, [pc, #12]	; (7030 <hri_tccount8_write_PER_reg+0x24>)
    7024:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7026:	bf00      	nop
    7028:	3708      	adds	r7, #8
    702a:	46bd      	mov	sp, r7
    702c:	bd80      	pop	{r7, pc}
    702e:	bf00      	nop
    7030:	00006de9 	.word	0x00006de9

00007034 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7034:	b580      	push	{r7, lr}
    7036:	b082      	sub	sp, #8
    7038:	af00      	add	r7, sp, #0
    703a:	6078      	str	r0, [r7, #4]
    703c:	460b      	mov	r3, r1
    703e:	70fb      	strb	r3, [r7, #3]
    7040:	4613      	mov	r3, r2
    7042:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7044:	78fb      	ldrb	r3, [r7, #3]
    7046:	687a      	ldr	r2, [r7, #4]
    7048:	4413      	add	r3, r2
    704a:	78ba      	ldrb	r2, [r7, #2]
    704c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    704e:	21c0      	movs	r1, #192	; 0xc0
    7050:	6878      	ldr	r0, [r7, #4]
    7052:	4b03      	ldr	r3, [pc, #12]	; (7060 <hri_tccount8_write_CC_reg+0x2c>)
    7054:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7056:	bf00      	nop
    7058:	3708      	adds	r7, #8
    705a:	46bd      	mov	sp, r7
    705c:	bd80      	pop	{r7, pc}
    705e:	bf00      	nop
    7060:	00006de9 	.word	0x00006de9

00007064 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7064:	b580      	push	{r7, lr}
    7066:	b082      	sub	sp, #8
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
    706c:	460b      	mov	r3, r1
    706e:	70fb      	strb	r3, [r7, #3]
    7070:	4613      	mov	r3, r2
    7072:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7074:	78fb      	ldrb	r3, [r7, #3]
    7076:	687a      	ldr	r2, [r7, #4]
    7078:	330c      	adds	r3, #12
    707a:	005b      	lsls	r3, r3, #1
    707c:	4413      	add	r3, r2
    707e:	883a      	ldrh	r2, [r7, #0]
    7080:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7082:	21c0      	movs	r1, #192	; 0xc0
    7084:	6878      	ldr	r0, [r7, #4]
    7086:	4b03      	ldr	r3, [pc, #12]	; (7094 <hri_tccount16_write_CC_reg+0x30>)
    7088:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    708a:	bf00      	nop
    708c:	3708      	adds	r7, #8
    708e:	46bd      	mov	sp, r7
    7090:	bd80      	pop	{r7, pc}
    7092:	bf00      	nop
    7094:	00006de9 	.word	0x00006de9

00007098 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7098:	b580      	push	{r7, lr}
    709a:	b084      	sub	sp, #16
    709c:	af00      	add	r7, sp, #0
    709e:	60f8      	str	r0, [r7, #12]
    70a0:	460b      	mov	r3, r1
    70a2:	607a      	str	r2, [r7, #4]
    70a4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    70a6:	7afb      	ldrb	r3, [r7, #11]
    70a8:	68fa      	ldr	r2, [r7, #12]
    70aa:	3306      	adds	r3, #6
    70ac:	009b      	lsls	r3, r3, #2
    70ae:	4413      	add	r3, r2
    70b0:	687a      	ldr	r2, [r7, #4]
    70b2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    70b4:	21c0      	movs	r1, #192	; 0xc0
    70b6:	68f8      	ldr	r0, [r7, #12]
    70b8:	4b02      	ldr	r3, [pc, #8]	; (70c4 <hri_tccount32_write_CC_reg+0x2c>)
    70ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    70bc:	bf00      	nop
    70be:	3710      	adds	r7, #16
    70c0:	46bd      	mov	sp, r7
    70c2:	bd80      	pop	{r7, pc}
    70c4:	00006de9 	.word	0x00006de9

000070c8 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    70c8:	b580      	push	{r7, lr}
    70ca:	b084      	sub	sp, #16
    70cc:	af00      	add	r7, sp, #0
    70ce:	6078      	str	r0, [r7, #4]
    70d0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    70d2:	6838      	ldr	r0, [r7, #0]
    70d4:	4b93      	ldr	r3, [pc, #588]	; (7324 <_timer_init+0x25c>)
    70d6:	4798      	blx	r3
    70d8:	4603      	mov	r3, r0
    70da:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    70dc:	687b      	ldr	r3, [r7, #4]
    70de:	683a      	ldr	r2, [r7, #0]
    70e0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    70e2:	2295      	movs	r2, #149	; 0x95
    70e4:	4990      	ldr	r1, [pc, #576]	; (7328 <_timer_init+0x260>)
    70e6:	2001      	movs	r0, #1
    70e8:	4b90      	ldr	r3, [pc, #576]	; (732c <_timer_init+0x264>)
    70ea:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    70ec:	2101      	movs	r1, #1
    70ee:	6838      	ldr	r0, [r7, #0]
    70f0:	4b8f      	ldr	r3, [pc, #572]	; (7330 <_timer_init+0x268>)
    70f2:	4798      	blx	r3
    70f4:	4603      	mov	r3, r0
    70f6:	f083 0301 	eor.w	r3, r3, #1
    70fa:	b2db      	uxtb	r3, r3
    70fc:	2b00      	cmp	r3, #0
    70fe:	d011      	beq.n	7124 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7100:	2102      	movs	r1, #2
    7102:	6838      	ldr	r0, [r7, #0]
    7104:	4b8b      	ldr	r3, [pc, #556]	; (7334 <_timer_init+0x26c>)
    7106:	4798      	blx	r3
    7108:	4603      	mov	r3, r0
    710a:	2b00      	cmp	r3, #0
    710c:	d006      	beq.n	711c <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    710e:	6838      	ldr	r0, [r7, #0]
    7110:	4b89      	ldr	r3, [pc, #548]	; (7338 <_timer_init+0x270>)
    7112:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7114:	2102      	movs	r1, #2
    7116:	6838      	ldr	r0, [r7, #0]
    7118:	4b88      	ldr	r3, [pc, #544]	; (733c <_timer_init+0x274>)
    711a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    711c:	2101      	movs	r1, #1
    711e:	6838      	ldr	r0, [r7, #0]
    7120:	4b87      	ldr	r3, [pc, #540]	; (7340 <_timer_init+0x278>)
    7122:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7124:	2101      	movs	r1, #1
    7126:	6838      	ldr	r0, [r7, #0]
    7128:	4b84      	ldr	r3, [pc, #528]	; (733c <_timer_init+0x274>)
    712a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    712c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7130:	4984      	ldr	r1, [pc, #528]	; (7344 <_timer_init+0x27c>)
    7132:	4613      	mov	r3, r2
    7134:	009b      	lsls	r3, r3, #2
    7136:	4413      	add	r3, r2
    7138:	009b      	lsls	r3, r3, #2
    713a:	440b      	add	r3, r1
    713c:	3304      	adds	r3, #4
    713e:	681b      	ldr	r3, [r3, #0]
    7140:	4619      	mov	r1, r3
    7142:	6838      	ldr	r0, [r7, #0]
    7144:	4b7e      	ldr	r3, [pc, #504]	; (7340 <_timer_init+0x278>)
    7146:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7148:	f997 200f 	ldrsb.w	r2, [r7, #15]
    714c:	497d      	ldr	r1, [pc, #500]	; (7344 <_timer_init+0x27c>)
    714e:	4613      	mov	r3, r2
    7150:	009b      	lsls	r3, r3, #2
    7152:	4413      	add	r3, r2
    7154:	009b      	lsls	r3, r3, #2
    7156:	440b      	add	r3, r1
    7158:	330a      	adds	r3, #10
    715a:	781b      	ldrb	r3, [r3, #0]
    715c:	4619      	mov	r1, r3
    715e:	6838      	ldr	r0, [r7, #0]
    7160:	4b79      	ldr	r3, [pc, #484]	; (7348 <_timer_init+0x280>)
    7162:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7164:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7168:	4976      	ldr	r1, [pc, #472]	; (7344 <_timer_init+0x27c>)
    716a:	4613      	mov	r3, r2
    716c:	009b      	lsls	r3, r3, #2
    716e:	4413      	add	r3, r2
    7170:	009b      	lsls	r3, r3, #2
    7172:	440b      	add	r3, r1
    7174:	3308      	adds	r3, #8
    7176:	881b      	ldrh	r3, [r3, #0]
    7178:	4619      	mov	r1, r3
    717a:	6838      	ldr	r0, [r7, #0]
    717c:	4b73      	ldr	r3, [pc, #460]	; (734c <_timer_init+0x284>)
    717e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7180:	2101      	movs	r1, #1
    7182:	6838      	ldr	r0, [r7, #0]
    7184:	4b72      	ldr	r3, [pc, #456]	; (7350 <_timer_init+0x288>)
    7186:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7188:	f997 200f 	ldrsb.w	r2, [r7, #15]
    718c:	496d      	ldr	r1, [pc, #436]	; (7344 <_timer_init+0x27c>)
    718e:	4613      	mov	r3, r2
    7190:	009b      	lsls	r3, r3, #2
    7192:	4413      	add	r3, r2
    7194:	009b      	lsls	r3, r3, #2
    7196:	440b      	add	r3, r1
    7198:	3304      	adds	r3, #4
    719a:	681b      	ldr	r3, [r3, #0]
    719c:	f003 030c 	and.w	r3, r3, #12
    71a0:	2b08      	cmp	r3, #8
    71a2:	d11e      	bne.n	71e2 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    71a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71a8:	4966      	ldr	r1, [pc, #408]	; (7344 <_timer_init+0x27c>)
    71aa:	4613      	mov	r3, r2
    71ac:	009b      	lsls	r3, r3, #2
    71ae:	4413      	add	r3, r2
    71b0:	009b      	lsls	r3, r3, #2
    71b2:	440b      	add	r3, r1
    71b4:	330c      	adds	r3, #12
    71b6:	681b      	ldr	r3, [r3, #0]
    71b8:	461a      	mov	r2, r3
    71ba:	2100      	movs	r1, #0
    71bc:	6838      	ldr	r0, [r7, #0]
    71be:	4b65      	ldr	r3, [pc, #404]	; (7354 <_timer_init+0x28c>)
    71c0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    71c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71c6:	495f      	ldr	r1, [pc, #380]	; (7344 <_timer_init+0x27c>)
    71c8:	4613      	mov	r3, r2
    71ca:	009b      	lsls	r3, r3, #2
    71cc:	4413      	add	r3, r2
    71ce:	009b      	lsls	r3, r3, #2
    71d0:	440b      	add	r3, r1
    71d2:	3310      	adds	r3, #16
    71d4:	681b      	ldr	r3, [r3, #0]
    71d6:	461a      	mov	r2, r3
    71d8:	2101      	movs	r1, #1
    71da:	6838      	ldr	r0, [r7, #0]
    71dc:	4b5d      	ldr	r3, [pc, #372]	; (7354 <_timer_init+0x28c>)
    71de:	4798      	blx	r3
    71e0:	e06a      	b.n	72b8 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    71e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71e6:	4957      	ldr	r1, [pc, #348]	; (7344 <_timer_init+0x27c>)
    71e8:	4613      	mov	r3, r2
    71ea:	009b      	lsls	r3, r3, #2
    71ec:	4413      	add	r3, r2
    71ee:	009b      	lsls	r3, r3, #2
    71f0:	440b      	add	r3, r1
    71f2:	3304      	adds	r3, #4
    71f4:	681b      	ldr	r3, [r3, #0]
    71f6:	f003 030c 	and.w	r3, r3, #12
    71fa:	2b00      	cmp	r3, #0
    71fc:	d120      	bne.n	7240 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    71fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7202:	4950      	ldr	r1, [pc, #320]	; (7344 <_timer_init+0x27c>)
    7204:	4613      	mov	r3, r2
    7206:	009b      	lsls	r3, r3, #2
    7208:	4413      	add	r3, r2
    720a:	009b      	lsls	r3, r3, #2
    720c:	440b      	add	r3, r1
    720e:	330c      	adds	r3, #12
    7210:	681b      	ldr	r3, [r3, #0]
    7212:	b29b      	uxth	r3, r3
    7214:	461a      	mov	r2, r3
    7216:	2100      	movs	r1, #0
    7218:	6838      	ldr	r0, [r7, #0]
    721a:	4b4f      	ldr	r3, [pc, #316]	; (7358 <_timer_init+0x290>)
    721c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    721e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7222:	4948      	ldr	r1, [pc, #288]	; (7344 <_timer_init+0x27c>)
    7224:	4613      	mov	r3, r2
    7226:	009b      	lsls	r3, r3, #2
    7228:	4413      	add	r3, r2
    722a:	009b      	lsls	r3, r3, #2
    722c:	440b      	add	r3, r1
    722e:	3310      	adds	r3, #16
    7230:	681b      	ldr	r3, [r3, #0]
    7232:	b29b      	uxth	r3, r3
    7234:	461a      	mov	r2, r3
    7236:	2101      	movs	r1, #1
    7238:	6838      	ldr	r0, [r7, #0]
    723a:	4b47      	ldr	r3, [pc, #284]	; (7358 <_timer_init+0x290>)
    723c:	4798      	blx	r3
    723e:	e03b      	b.n	72b8 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7240:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7244:	493f      	ldr	r1, [pc, #252]	; (7344 <_timer_init+0x27c>)
    7246:	4613      	mov	r3, r2
    7248:	009b      	lsls	r3, r3, #2
    724a:	4413      	add	r3, r2
    724c:	009b      	lsls	r3, r3, #2
    724e:	440b      	add	r3, r1
    7250:	3304      	adds	r3, #4
    7252:	681b      	ldr	r3, [r3, #0]
    7254:	f003 030c 	and.w	r3, r3, #12
    7258:	2b04      	cmp	r3, #4
    725a:	d12d      	bne.n	72b8 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    725c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7260:	4938      	ldr	r1, [pc, #224]	; (7344 <_timer_init+0x27c>)
    7262:	4613      	mov	r3, r2
    7264:	009b      	lsls	r3, r3, #2
    7266:	4413      	add	r3, r2
    7268:	009b      	lsls	r3, r3, #2
    726a:	440b      	add	r3, r1
    726c:	330c      	adds	r3, #12
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	b2db      	uxtb	r3, r3
    7272:	461a      	mov	r2, r3
    7274:	2100      	movs	r1, #0
    7276:	6838      	ldr	r0, [r7, #0]
    7278:	4b38      	ldr	r3, [pc, #224]	; (735c <_timer_init+0x294>)
    727a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    727c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7280:	4930      	ldr	r1, [pc, #192]	; (7344 <_timer_init+0x27c>)
    7282:	4613      	mov	r3, r2
    7284:	009b      	lsls	r3, r3, #2
    7286:	4413      	add	r3, r2
    7288:	009b      	lsls	r3, r3, #2
    728a:	440b      	add	r3, r1
    728c:	3310      	adds	r3, #16
    728e:	681b      	ldr	r3, [r3, #0]
    7290:	b2db      	uxtb	r3, r3
    7292:	461a      	mov	r2, r3
    7294:	2101      	movs	r1, #1
    7296:	6838      	ldr	r0, [r7, #0]
    7298:	4b30      	ldr	r3, [pc, #192]	; (735c <_timer_init+0x294>)
    729a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    729c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72a0:	4928      	ldr	r1, [pc, #160]	; (7344 <_timer_init+0x27c>)
    72a2:	4613      	mov	r3, r2
    72a4:	009b      	lsls	r3, r3, #2
    72a6:	4413      	add	r3, r2
    72a8:	009b      	lsls	r3, r3, #2
    72aa:	440b      	add	r3, r1
    72ac:	330b      	adds	r3, #11
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	4619      	mov	r1, r3
    72b2:	6838      	ldr	r0, [r7, #0]
    72b4:	4b2a      	ldr	r3, [pc, #168]	; (7360 <_timer_init+0x298>)
    72b6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    72b8:	6838      	ldr	r0, [r7, #0]
    72ba:	4b2a      	ldr	r3, [pc, #168]	; (7364 <_timer_init+0x29c>)
    72bc:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    72be:	6879      	ldr	r1, [r7, #4]
    72c0:	6838      	ldr	r0, [r7, #0]
    72c2:	4b29      	ldr	r3, [pc, #164]	; (7368 <_timer_init+0x2a0>)
    72c4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    72c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72ca:	491e      	ldr	r1, [pc, #120]	; (7344 <_timer_init+0x27c>)
    72cc:	4613      	mov	r3, r2
    72ce:	009b      	lsls	r3, r3, #2
    72d0:	4413      	add	r3, r2
    72d2:	009b      	lsls	r3, r3, #2
    72d4:	440b      	add	r3, r1
    72d6:	3302      	adds	r3, #2
    72d8:	f9b3 3000 	ldrsh.w	r3, [r3]
    72dc:	4618      	mov	r0, r3
    72de:	4b23      	ldr	r3, [pc, #140]	; (736c <_timer_init+0x2a4>)
    72e0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    72e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72e6:	4917      	ldr	r1, [pc, #92]	; (7344 <_timer_init+0x27c>)
    72e8:	4613      	mov	r3, r2
    72ea:	009b      	lsls	r3, r3, #2
    72ec:	4413      	add	r3, r2
    72ee:	009b      	lsls	r3, r3, #2
    72f0:	440b      	add	r3, r1
    72f2:	3302      	adds	r3, #2
    72f4:	f9b3 3000 	ldrsh.w	r3, [r3]
    72f8:	4618      	mov	r0, r3
    72fa:	4b1d      	ldr	r3, [pc, #116]	; (7370 <_timer_init+0x2a8>)
    72fc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    72fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7302:	4910      	ldr	r1, [pc, #64]	; (7344 <_timer_init+0x27c>)
    7304:	4613      	mov	r3, r2
    7306:	009b      	lsls	r3, r3, #2
    7308:	4413      	add	r3, r2
    730a:	009b      	lsls	r3, r3, #2
    730c:	440b      	add	r3, r1
    730e:	3302      	adds	r3, #2
    7310:	f9b3 3000 	ldrsh.w	r3, [r3]
    7314:	4618      	mov	r0, r3
    7316:	4b17      	ldr	r3, [pc, #92]	; (7374 <_timer_init+0x2ac>)
    7318:	4798      	blx	r3

	return ERR_NONE;
    731a:	2300      	movs	r3, #0
}
    731c:	4618      	mov	r0, r3
    731e:	3710      	adds	r7, #16
    7320:	46bd      	mov	sp, r7
    7322:	bd80      	pop	{r7, pc}
    7324:	000077e5 	.word	0x000077e5
    7328:	0000d704 	.word	0x0000d704
    732c:	00003079 	.word	0x00003079
    7330:	00006e0d 	.word	0x00006e0d
    7334:	00006f5d 	.word	0x00006f5d
    7338:	00006f35 	.word	0x00006f35
    733c:	00006de9 	.word	0x00006de9
    7340:	00006f8d 	.word	0x00006f8d
    7344:	20000048 	.word	0x20000048
    7348:	00006fed 	.word	0x00006fed
    734c:	00006fb1 	.word	0x00006fb1
    7350:	00006fcf 	.word	0x00006fcf
    7354:	00007099 	.word	0x00007099
    7358:	00007065 	.word	0x00007065
    735c:	00007035 	.word	0x00007035
    7360:	0000700d 	.word	0x0000700d
    7364:	00006e91 	.word	0x00006e91
    7368:	0000784d 	.word	0x0000784d
    736c:	00006d69 	.word	0x00006d69
    7370:	00006dad 	.word	0x00006dad
    7374:	00006d2d 	.word	0x00006d2d

00007378 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7378:	b580      	push	{r7, lr}
    737a:	b084      	sub	sp, #16
    737c:	af00      	add	r7, sp, #0
    737e:	6078      	str	r0, [r7, #4]
    7380:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7382:	6838      	ldr	r0, [r7, #0]
    7384:	4b73      	ldr	r3, [pc, #460]	; (7554 <_pwm_init+0x1dc>)
    7386:	4798      	blx	r3
    7388:	4603      	mov	r3, r0
    738a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	683a      	ldr	r2, [r7, #0]
    7390:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7392:	2101      	movs	r1, #1
    7394:	6838      	ldr	r0, [r7, #0]
    7396:	4b70      	ldr	r3, [pc, #448]	; (7558 <_pwm_init+0x1e0>)
    7398:	4798      	blx	r3
    739a:	4603      	mov	r3, r0
    739c:	f083 0301 	eor.w	r3, r3, #1
    73a0:	b2db      	uxtb	r3, r3
    73a2:	2b00      	cmp	r3, #0
    73a4:	d011      	beq.n	73ca <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    73a6:	2102      	movs	r1, #2
    73a8:	6838      	ldr	r0, [r7, #0]
    73aa:	4b6c      	ldr	r3, [pc, #432]	; (755c <_pwm_init+0x1e4>)
    73ac:	4798      	blx	r3
    73ae:	4603      	mov	r3, r0
    73b0:	2b00      	cmp	r3, #0
    73b2:	d006      	beq.n	73c2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    73b4:	6838      	ldr	r0, [r7, #0]
    73b6:	4b6a      	ldr	r3, [pc, #424]	; (7560 <_pwm_init+0x1e8>)
    73b8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    73ba:	2102      	movs	r1, #2
    73bc:	6838      	ldr	r0, [r7, #0]
    73be:	4b69      	ldr	r3, [pc, #420]	; (7564 <_pwm_init+0x1ec>)
    73c0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    73c2:	2101      	movs	r1, #1
    73c4:	6838      	ldr	r0, [r7, #0]
    73c6:	4b68      	ldr	r3, [pc, #416]	; (7568 <_pwm_init+0x1f0>)
    73c8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    73ca:	2101      	movs	r1, #1
    73cc:	6838      	ldr	r0, [r7, #0]
    73ce:	4b65      	ldr	r3, [pc, #404]	; (7564 <_pwm_init+0x1ec>)
    73d0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    73d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73d6:	4965      	ldr	r1, [pc, #404]	; (756c <_pwm_init+0x1f4>)
    73d8:	4613      	mov	r3, r2
    73da:	009b      	lsls	r3, r3, #2
    73dc:	4413      	add	r3, r2
    73de:	009b      	lsls	r3, r3, #2
    73e0:	440b      	add	r3, r1
    73e2:	3304      	adds	r3, #4
    73e4:	681b      	ldr	r3, [r3, #0]
    73e6:	4619      	mov	r1, r3
    73e8:	6838      	ldr	r0, [r7, #0]
    73ea:	4b5f      	ldr	r3, [pc, #380]	; (7568 <_pwm_init+0x1f0>)
    73ec:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    73ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73f2:	495e      	ldr	r1, [pc, #376]	; (756c <_pwm_init+0x1f4>)
    73f4:	4613      	mov	r3, r2
    73f6:	009b      	lsls	r3, r3, #2
    73f8:	4413      	add	r3, r2
    73fa:	009b      	lsls	r3, r3, #2
    73fc:	440b      	add	r3, r1
    73fe:	330a      	adds	r3, #10
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	4619      	mov	r1, r3
    7404:	6838      	ldr	r0, [r7, #0]
    7406:	4b5a      	ldr	r3, [pc, #360]	; (7570 <_pwm_init+0x1f8>)
    7408:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    740a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    740e:	4957      	ldr	r1, [pc, #348]	; (756c <_pwm_init+0x1f4>)
    7410:	4613      	mov	r3, r2
    7412:	009b      	lsls	r3, r3, #2
    7414:	4413      	add	r3, r2
    7416:	009b      	lsls	r3, r3, #2
    7418:	440b      	add	r3, r1
    741a:	3308      	adds	r3, #8
    741c:	881b      	ldrh	r3, [r3, #0]
    741e:	4619      	mov	r1, r3
    7420:	6838      	ldr	r0, [r7, #0]
    7422:	4b54      	ldr	r3, [pc, #336]	; (7574 <_pwm_init+0x1fc>)
    7424:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7426:	2103      	movs	r1, #3
    7428:	6838      	ldr	r0, [r7, #0]
    742a:	4b53      	ldr	r3, [pc, #332]	; (7578 <_pwm_init+0x200>)
    742c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    742e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7432:	494e      	ldr	r1, [pc, #312]	; (756c <_pwm_init+0x1f4>)
    7434:	4613      	mov	r3, r2
    7436:	009b      	lsls	r3, r3, #2
    7438:	4413      	add	r3, r2
    743a:	009b      	lsls	r3, r3, #2
    743c:	440b      	add	r3, r1
    743e:	3304      	adds	r3, #4
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	f003 030c 	and.w	r3, r3, #12
    7446:	2b08      	cmp	r3, #8
    7448:	d11e      	bne.n	7488 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    744a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    744e:	4947      	ldr	r1, [pc, #284]	; (756c <_pwm_init+0x1f4>)
    7450:	4613      	mov	r3, r2
    7452:	009b      	lsls	r3, r3, #2
    7454:	4413      	add	r3, r2
    7456:	009b      	lsls	r3, r3, #2
    7458:	440b      	add	r3, r1
    745a:	330c      	adds	r3, #12
    745c:	681b      	ldr	r3, [r3, #0]
    745e:	461a      	mov	r2, r3
    7460:	2100      	movs	r1, #0
    7462:	6838      	ldr	r0, [r7, #0]
    7464:	4b45      	ldr	r3, [pc, #276]	; (757c <_pwm_init+0x204>)
    7466:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7468:	f997 200f 	ldrsb.w	r2, [r7, #15]
    746c:	493f      	ldr	r1, [pc, #252]	; (756c <_pwm_init+0x1f4>)
    746e:	4613      	mov	r3, r2
    7470:	009b      	lsls	r3, r3, #2
    7472:	4413      	add	r3, r2
    7474:	009b      	lsls	r3, r3, #2
    7476:	440b      	add	r3, r1
    7478:	3310      	adds	r3, #16
    747a:	681b      	ldr	r3, [r3, #0]
    747c:	461a      	mov	r2, r3
    747e:	2101      	movs	r1, #1
    7480:	6838      	ldr	r0, [r7, #0]
    7482:	4b3e      	ldr	r3, [pc, #248]	; (757c <_pwm_init+0x204>)
    7484:	4798      	blx	r3
    7486:	e031      	b.n	74ec <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7488:	f997 200f 	ldrsb.w	r2, [r7, #15]
    748c:	4937      	ldr	r1, [pc, #220]	; (756c <_pwm_init+0x1f4>)
    748e:	4613      	mov	r3, r2
    7490:	009b      	lsls	r3, r3, #2
    7492:	4413      	add	r3, r2
    7494:	009b      	lsls	r3, r3, #2
    7496:	440b      	add	r3, r1
    7498:	3304      	adds	r3, #4
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	f003 030c 	and.w	r3, r3, #12
    74a0:	2b00      	cmp	r3, #0
    74a2:	d120      	bne.n	74e6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    74a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74a8:	4930      	ldr	r1, [pc, #192]	; (756c <_pwm_init+0x1f4>)
    74aa:	4613      	mov	r3, r2
    74ac:	009b      	lsls	r3, r3, #2
    74ae:	4413      	add	r3, r2
    74b0:	009b      	lsls	r3, r3, #2
    74b2:	440b      	add	r3, r1
    74b4:	330c      	adds	r3, #12
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	b29b      	uxth	r3, r3
    74ba:	461a      	mov	r2, r3
    74bc:	2100      	movs	r1, #0
    74be:	6838      	ldr	r0, [r7, #0]
    74c0:	4b2f      	ldr	r3, [pc, #188]	; (7580 <_pwm_init+0x208>)
    74c2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    74c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74c8:	4928      	ldr	r1, [pc, #160]	; (756c <_pwm_init+0x1f4>)
    74ca:	4613      	mov	r3, r2
    74cc:	009b      	lsls	r3, r3, #2
    74ce:	4413      	add	r3, r2
    74d0:	009b      	lsls	r3, r3, #2
    74d2:	440b      	add	r3, r1
    74d4:	3310      	adds	r3, #16
    74d6:	681b      	ldr	r3, [r3, #0]
    74d8:	b29b      	uxth	r3, r3
    74da:	461a      	mov	r2, r3
    74dc:	2101      	movs	r1, #1
    74de:	6838      	ldr	r0, [r7, #0]
    74e0:	4b27      	ldr	r3, [pc, #156]	; (7580 <_pwm_init+0x208>)
    74e2:	4798      	blx	r3
    74e4:	e002      	b.n	74ec <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    74e6:	f04f 33ff 	mov.w	r3, #4294967295
    74ea:	e02e      	b.n	754a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    74ec:	6879      	ldr	r1, [r7, #4]
    74ee:	6838      	ldr	r0, [r7, #0]
    74f0:	4b24      	ldr	r3, [pc, #144]	; (7584 <_pwm_init+0x20c>)
    74f2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    74f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74f8:	491c      	ldr	r1, [pc, #112]	; (756c <_pwm_init+0x1f4>)
    74fa:	4613      	mov	r3, r2
    74fc:	009b      	lsls	r3, r3, #2
    74fe:	4413      	add	r3, r2
    7500:	009b      	lsls	r3, r3, #2
    7502:	440b      	add	r3, r1
    7504:	3302      	adds	r3, #2
    7506:	f9b3 3000 	ldrsh.w	r3, [r3]
    750a:	4618      	mov	r0, r3
    750c:	4b1e      	ldr	r3, [pc, #120]	; (7588 <_pwm_init+0x210>)
    750e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7510:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7514:	4915      	ldr	r1, [pc, #84]	; (756c <_pwm_init+0x1f4>)
    7516:	4613      	mov	r3, r2
    7518:	009b      	lsls	r3, r3, #2
    751a:	4413      	add	r3, r2
    751c:	009b      	lsls	r3, r3, #2
    751e:	440b      	add	r3, r1
    7520:	3302      	adds	r3, #2
    7522:	f9b3 3000 	ldrsh.w	r3, [r3]
    7526:	4618      	mov	r0, r3
    7528:	4b18      	ldr	r3, [pc, #96]	; (758c <_pwm_init+0x214>)
    752a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    752c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7530:	490e      	ldr	r1, [pc, #56]	; (756c <_pwm_init+0x1f4>)
    7532:	4613      	mov	r3, r2
    7534:	009b      	lsls	r3, r3, #2
    7536:	4413      	add	r3, r2
    7538:	009b      	lsls	r3, r3, #2
    753a:	440b      	add	r3, r1
    753c:	3302      	adds	r3, #2
    753e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7542:	4618      	mov	r0, r3
    7544:	4b12      	ldr	r3, [pc, #72]	; (7590 <_pwm_init+0x218>)
    7546:	4798      	blx	r3

	return 0;
    7548:	2300      	movs	r3, #0
}
    754a:	4618      	mov	r0, r3
    754c:	3710      	adds	r7, #16
    754e:	46bd      	mov	sp, r7
    7550:	bd80      	pop	{r7, pc}
    7552:	bf00      	nop
    7554:	000077e5 	.word	0x000077e5
    7558:	00006e0d 	.word	0x00006e0d
    755c:	00006f5d 	.word	0x00006f5d
    7560:	00006f35 	.word	0x00006f35
    7564:	00006de9 	.word	0x00006de9
    7568:	00006f8d 	.word	0x00006f8d
    756c:	20000048 	.word	0x20000048
    7570:	00006fed 	.word	0x00006fed
    7574:	00006fb1 	.word	0x00006fb1
    7578:	00006fcf 	.word	0x00006fcf
    757c:	00007099 	.word	0x00007099
    7580:	00007065 	.word	0x00007065
    7584:	0000784d 	.word	0x0000784d
    7588:	00006d69 	.word	0x00006d69
    758c:	00006dad 	.word	0x00006dad
    7590:	00006d2d 	.word	0x00006d2d

00007594 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    7594:	b580      	push	{r7, lr}
    7596:	b082      	sub	sp, #8
    7598:	af00      	add	r7, sp, #0
    759a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    759c:	687b      	ldr	r3, [r7, #4]
    759e:	68db      	ldr	r3, [r3, #12]
    75a0:	4618      	mov	r0, r3
    75a2:	4b03      	ldr	r3, [pc, #12]	; (75b0 <_timer_start+0x1c>)
    75a4:	4798      	blx	r3
}
    75a6:	bf00      	nop
    75a8:	3708      	adds	r7, #8
    75aa:	46bd      	mov	sp, r7
    75ac:	bd80      	pop	{r7, pc}
    75ae:	bf00      	nop
    75b0:	00006ed5 	.word	0x00006ed5

000075b4 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b082      	sub	sp, #8
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	691b      	ldr	r3, [r3, #16]
    75c0:	4618      	mov	r0, r3
    75c2:	4b03      	ldr	r3, [pc, #12]	; (75d0 <_pwm_enable+0x1c>)
    75c4:	4798      	blx	r3
}
    75c6:	bf00      	nop
    75c8:	3708      	adds	r7, #8
    75ca:	46bd      	mov	sp, r7
    75cc:	bd80      	pop	{r7, pc}
    75ce:	bf00      	nop
    75d0:	00006ed5 	.word	0x00006ed5

000075d4 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    75d4:	b580      	push	{r7, lr}
    75d6:	b082      	sub	sp, #8
    75d8:	af00      	add	r7, sp, #0
    75da:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	68db      	ldr	r3, [r3, #12]
    75e0:	4618      	mov	r0, r3
    75e2:	4b03      	ldr	r3, [pc, #12]	; (75f0 <_timer_stop+0x1c>)
    75e4:	4798      	blx	r3
}
    75e6:	bf00      	nop
    75e8:	3708      	adds	r7, #8
    75ea:	46bd      	mov	sp, r7
    75ec:	bd80      	pop	{r7, pc}
    75ee:	bf00      	nop
    75f0:	00006f35 	.word	0x00006f35

000075f4 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    75f4:	b580      	push	{r7, lr}
    75f6:	b082      	sub	sp, #8
    75f8:	af00      	add	r7, sp, #0
    75fa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	68db      	ldr	r3, [r3, #12]
    7600:	4618      	mov	r0, r3
    7602:	4b03      	ldr	r3, [pc, #12]	; (7610 <_timer_is_started+0x1c>)
    7604:	4798      	blx	r3
    7606:	4603      	mov	r3, r0
}
    7608:	4618      	mov	r0, r3
    760a:	3708      	adds	r7, #8
    760c:	46bd      	mov	sp, r7
    760e:	bd80      	pop	{r7, pc}
    7610:	00006efd 	.word	0x00006efd

00007614 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    7614:	b580      	push	{r7, lr}
    7616:	b082      	sub	sp, #8
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	691b      	ldr	r3, [r3, #16]
    7620:	4618      	mov	r0, r3
    7622:	4b03      	ldr	r3, [pc, #12]	; (7630 <_pwm_is_enabled+0x1c>)
    7624:	4798      	blx	r3
    7626:	4603      	mov	r3, r0
}
    7628:	4618      	mov	r0, r3
    762a:	3708      	adds	r7, #8
    762c:	46bd      	mov	sp, r7
    762e:	bd80      	pop	{r7, pc}
    7630:	00006efd 	.word	0x00006efd

00007634 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7634:	b480      	push	{r7}
    7636:	af00      	add	r7, sp, #0
	return NULL;
    7638:	2300      	movs	r3, #0
}
    763a:	4618      	mov	r0, r3
    763c:	46bd      	mov	sp, r7
    763e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7642:	4770      	bx	lr

00007644 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7644:	b480      	push	{r7}
    7646:	af00      	add	r7, sp, #0
	return NULL;
    7648:	2300      	movs	r3, #0
}
    764a:	4618      	mov	r0, r3
    764c:	46bd      	mov	sp, r7
    764e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7652:	4770      	bx	lr

00007654 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    7654:	b580      	push	{r7, lr}
    7656:	b084      	sub	sp, #16
    7658:	af00      	add	r7, sp, #0
    765a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	68db      	ldr	r3, [r3, #12]
    7660:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7662:	68f8      	ldr	r0, [r7, #12]
    7664:	4b0e      	ldr	r3, [pc, #56]	; (76a0 <_timer_set_irq+0x4c>)
    7666:	4798      	blx	r3
    7668:	4603      	mov	r3, r0
    766a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    766c:	f240 12a3 	movw	r2, #419	; 0x1a3
    7670:	490c      	ldr	r1, [pc, #48]	; (76a4 <_timer_set_irq+0x50>)
    7672:	2001      	movs	r0, #1
    7674:	4b0c      	ldr	r3, [pc, #48]	; (76a8 <_timer_set_irq+0x54>)
    7676:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7678:	f997 200b 	ldrsb.w	r2, [r7, #11]
    767c:	490b      	ldr	r1, [pc, #44]	; (76ac <_timer_set_irq+0x58>)
    767e:	4613      	mov	r3, r2
    7680:	009b      	lsls	r3, r3, #2
    7682:	4413      	add	r3, r2
    7684:	009b      	lsls	r3, r3, #2
    7686:	440b      	add	r3, r1
    7688:	3302      	adds	r3, #2
    768a:	f9b3 3000 	ldrsh.w	r3, [r3]
    768e:	b2db      	uxtb	r3, r3
    7690:	4618      	mov	r0, r3
    7692:	4b07      	ldr	r3, [pc, #28]	; (76b0 <_timer_set_irq+0x5c>)
    7694:	4798      	blx	r3
}
    7696:	bf00      	nop
    7698:	3710      	adds	r7, #16
    769a:	46bd      	mov	sp, r7
    769c:	bd80      	pop	{r7, pc}
    769e:	bf00      	nop
    76a0:	000077e5 	.word	0x000077e5
    76a4:	0000d704 	.word	0x0000d704
    76a8:	00003079 	.word	0x00003079
    76ac:	20000048 	.word	0x20000048
    76b0:	000038c5 	.word	0x000038c5

000076b4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b084      	sub	sp, #16
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	68db      	ldr	r3, [r3, #12]
    76c0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    76c2:	68f8      	ldr	r0, [r7, #12]
    76c4:	4b07      	ldr	r3, [pc, #28]	; (76e4 <tc_interrupt_handler+0x30>)
    76c6:	4798      	blx	r3
    76c8:	4603      	mov	r3, r0
    76ca:	2b00      	cmp	r3, #0
    76cc:	d006      	beq.n	76dc <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    76ce:	68f8      	ldr	r0, [r7, #12]
    76d0:	4b05      	ldr	r3, [pc, #20]	; (76e8 <tc_interrupt_handler+0x34>)
    76d2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	681b      	ldr	r3, [r3, #0]
    76d8:	6878      	ldr	r0, [r7, #4]
    76da:	4798      	blx	r3
	}
}
    76dc:	bf00      	nop
    76de:	3710      	adds	r7, #16
    76e0:	46bd      	mov	sp, r7
    76e2:	bd80      	pop	{r7, pc}
    76e4:	00006e35 	.word	0x00006e35
    76e8:	00006e5d 	.word	0x00006e5d

000076ec <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    76ec:	b580      	push	{r7, lr}
    76ee:	b084      	sub	sp, #16
    76f0:	af00      	add	r7, sp, #0
    76f2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76f4:	687b      	ldr	r3, [r7, #4]
    76f6:	691b      	ldr	r3, [r3, #16]
    76f8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    76fa:	68f8      	ldr	r0, [r7, #12]
    76fc:	4b12      	ldr	r3, [pc, #72]	; (7748 <tc_pwm_interrupt_handler+0x5c>)
    76fe:	4798      	blx	r3
    7700:	4603      	mov	r3, r0
    7702:	2b00      	cmp	r3, #0
    7704:	d00a      	beq.n	771c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7706:	68f8      	ldr	r0, [r7, #12]
    7708:	4b10      	ldr	r3, [pc, #64]	; (774c <tc_pwm_interrupt_handler+0x60>)
    770a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2b00      	cmp	r3, #0
    7712:	d003      	beq.n	771c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7714:	687b      	ldr	r3, [r7, #4]
    7716:	681b      	ldr	r3, [r3, #0]
    7718:	6878      	ldr	r0, [r7, #4]
    771a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    771c:	68f8      	ldr	r0, [r7, #12]
    771e:	4b0c      	ldr	r3, [pc, #48]	; (7750 <tc_pwm_interrupt_handler+0x64>)
    7720:	4798      	blx	r3
    7722:	4603      	mov	r3, r0
    7724:	2b00      	cmp	r3, #0
    7726:	d00a      	beq.n	773e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7728:	68f8      	ldr	r0, [r7, #12]
    772a:	4b0a      	ldr	r3, [pc, #40]	; (7754 <tc_pwm_interrupt_handler+0x68>)
    772c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    772e:	687b      	ldr	r3, [r7, #4]
    7730:	685b      	ldr	r3, [r3, #4]
    7732:	2b00      	cmp	r3, #0
    7734:	d003      	beq.n	773e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	685b      	ldr	r3, [r3, #4]
    773a:	6878      	ldr	r0, [r7, #4]
    773c:	4798      	blx	r3
		}
	}
}
    773e:	bf00      	nop
    7740:	3710      	adds	r7, #16
    7742:	46bd      	mov	sp, r7
    7744:	bd80      	pop	{r7, pc}
    7746:	bf00      	nop
    7748:	00006e35 	.word	0x00006e35
    774c:	00006e5d 	.word	0x00006e5d
    7750:	00006eab 	.word	0x00006eab
    7754:	00006e77 	.word	0x00006e77

00007758 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7758:	b580      	push	{r7, lr}
    775a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    775c:	4b03      	ldr	r3, [pc, #12]	; (776c <TC0_Handler+0x14>)
    775e:	681b      	ldr	r3, [r3, #0]
    7760:	4618      	mov	r0, r3
    7762:	4b03      	ldr	r3, [pc, #12]	; (7770 <TC0_Handler+0x18>)
    7764:	4798      	blx	r3
}
    7766:	bf00      	nop
    7768:	bd80      	pop	{r7, pc}
    776a:	bf00      	nop
    776c:	200006e4 	.word	0x200006e4
    7770:	000076b5 	.word	0x000076b5

00007774 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    7774:	b580      	push	{r7, lr}
    7776:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    7778:	4b03      	ldr	r3, [pc, #12]	; (7788 <TC1_Handler+0x14>)
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	4618      	mov	r0, r3
    777e:	4b03      	ldr	r3, [pc, #12]	; (778c <TC1_Handler+0x18>)
    7780:	4798      	blx	r3
}
    7782:	bf00      	nop
    7784:	bd80      	pop	{r7, pc}
    7786:	bf00      	nop
    7788:	200006e8 	.word	0x200006e8
    778c:	000076b5 	.word	0x000076b5

00007790 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7790:	b580      	push	{r7, lr}
    7792:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7794:	4b03      	ldr	r3, [pc, #12]	; (77a4 <TC2_Handler+0x14>)
    7796:	681b      	ldr	r3, [r3, #0]
    7798:	4618      	mov	r0, r3
    779a:	4b03      	ldr	r3, [pc, #12]	; (77a8 <TC2_Handler+0x18>)
    779c:	4798      	blx	r3
}
    779e:	bf00      	nop
    77a0:	bd80      	pop	{r7, pc}
    77a2:	bf00      	nop
    77a4:	200006ec 	.word	0x200006ec
    77a8:	000076b5 	.word	0x000076b5

000077ac <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    77ac:	b580      	push	{r7, lr}
    77ae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    77b0:	4b03      	ldr	r3, [pc, #12]	; (77c0 <TC3_Handler+0x14>)
    77b2:	681b      	ldr	r3, [r3, #0]
    77b4:	4618      	mov	r0, r3
    77b6:	4b03      	ldr	r3, [pc, #12]	; (77c4 <TC3_Handler+0x18>)
    77b8:	4798      	blx	r3
}
    77ba:	bf00      	nop
    77bc:	bd80      	pop	{r7, pc}
    77be:	bf00      	nop
    77c0:	200006f0 	.word	0x200006f0
    77c4:	000076b5 	.word	0x000076b5

000077c8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    77c8:	b580      	push	{r7, lr}
    77ca:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    77cc:	4b03      	ldr	r3, [pc, #12]	; (77dc <TC7_Handler+0x14>)
    77ce:	681b      	ldr	r3, [r3, #0]
    77d0:	4618      	mov	r0, r3
    77d2:	4b03      	ldr	r3, [pc, #12]	; (77e0 <TC7_Handler+0x18>)
    77d4:	4798      	blx	r3
}
    77d6:	bf00      	nop
    77d8:	bd80      	pop	{r7, pc}
    77da:	bf00      	nop
    77dc:	200006f4 	.word	0x200006f4
    77e0:	000076ed 	.word	0x000076ed

000077e4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    77e4:	b580      	push	{r7, lr}
    77e6:	b084      	sub	sp, #16
    77e8:	af00      	add	r7, sp, #0
    77ea:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    77ec:	6878      	ldr	r0, [r7, #4]
    77ee:	4b13      	ldr	r3, [pc, #76]	; (783c <get_tc_index+0x58>)
    77f0:	4798      	blx	r3
    77f2:	4603      	mov	r3, r0
    77f4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    77f6:	2300      	movs	r3, #0
    77f8:	73fb      	strb	r3, [r7, #15]
    77fa:	e010      	b.n	781e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    77fc:	7bfa      	ldrb	r2, [r7, #15]
    77fe:	4910      	ldr	r1, [pc, #64]	; (7840 <get_tc_index+0x5c>)
    7800:	4613      	mov	r3, r2
    7802:	009b      	lsls	r3, r3, #2
    7804:	4413      	add	r3, r2
    7806:	009b      	lsls	r3, r3, #2
    7808:	440b      	add	r3, r1
    780a:	781b      	ldrb	r3, [r3, #0]
    780c:	7bba      	ldrb	r2, [r7, #14]
    780e:	429a      	cmp	r2, r3
    7810:	d102      	bne.n	7818 <get_tc_index+0x34>
			return i;
    7812:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7816:	e00d      	b.n	7834 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7818:	7bfb      	ldrb	r3, [r7, #15]
    781a:	3301      	adds	r3, #1
    781c:	73fb      	strb	r3, [r7, #15]
    781e:	7bfb      	ldrb	r3, [r7, #15]
    7820:	2b04      	cmp	r3, #4
    7822:	d9eb      	bls.n	77fc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7824:	f240 2206 	movw	r2, #518	; 0x206
    7828:	4906      	ldr	r1, [pc, #24]	; (7844 <get_tc_index+0x60>)
    782a:	2000      	movs	r0, #0
    782c:	4b06      	ldr	r3, [pc, #24]	; (7848 <get_tc_index+0x64>)
    782e:	4798      	blx	r3
	return -1;
    7830:	f04f 33ff 	mov.w	r3, #4294967295
}
    7834:	4618      	mov	r0, r3
    7836:	3710      	adds	r7, #16
    7838:	46bd      	mov	sp, r7
    783a:	bd80      	pop	{r7, pc}
    783c:	000078d1 	.word	0x000078d1
    7840:	20000048 	.word	0x20000048
    7844:	0000d704 	.word	0x0000d704
    7848:	00003079 	.word	0x00003079

0000784c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    784c:	b480      	push	{r7}
    784e:	b083      	sub	sp, #12
    7850:	af00      	add	r7, sp, #0
    7852:	6078      	str	r0, [r7, #4]
    7854:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7856:	687b      	ldr	r3, [r7, #4]
    7858:	4a13      	ldr	r2, [pc, #76]	; (78a8 <_tc_init_irq_param+0x5c>)
    785a:	4293      	cmp	r3, r2
    785c:	d102      	bne.n	7864 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    785e:	4a13      	ldr	r2, [pc, #76]	; (78ac <_tc_init_irq_param+0x60>)
    7860:	683b      	ldr	r3, [r7, #0]
    7862:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	4a12      	ldr	r2, [pc, #72]	; (78b0 <_tc_init_irq_param+0x64>)
    7868:	4293      	cmp	r3, r2
    786a:	d102      	bne.n	7872 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    786c:	4a11      	ldr	r2, [pc, #68]	; (78b4 <_tc_init_irq_param+0x68>)
    786e:	683b      	ldr	r3, [r7, #0]
    7870:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7872:	687b      	ldr	r3, [r7, #4]
    7874:	4a10      	ldr	r2, [pc, #64]	; (78b8 <_tc_init_irq_param+0x6c>)
    7876:	4293      	cmp	r3, r2
    7878:	d102      	bne.n	7880 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    787a:	4a10      	ldr	r2, [pc, #64]	; (78bc <_tc_init_irq_param+0x70>)
    787c:	683b      	ldr	r3, [r7, #0]
    787e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	4a0f      	ldr	r2, [pc, #60]	; (78c0 <_tc_init_irq_param+0x74>)
    7884:	4293      	cmp	r3, r2
    7886:	d102      	bne.n	788e <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    7888:	4a0e      	ldr	r2, [pc, #56]	; (78c4 <_tc_init_irq_param+0x78>)
    788a:	683b      	ldr	r3, [r7, #0]
    788c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	4a0d      	ldr	r2, [pc, #52]	; (78c8 <_tc_init_irq_param+0x7c>)
    7892:	4293      	cmp	r3, r2
    7894:	d102      	bne.n	789c <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    7896:	4a0d      	ldr	r2, [pc, #52]	; (78cc <_tc_init_irq_param+0x80>)
    7898:	683b      	ldr	r3, [r7, #0]
    789a:	6013      	str	r3, [r2, #0]
	}
}
    789c:	bf00      	nop
    789e:	370c      	adds	r7, #12
    78a0:	46bd      	mov	sp, r7
    78a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    78a6:	4770      	bx	lr
    78a8:	40003800 	.word	0x40003800
    78ac:	200006e4 	.word	0x200006e4
    78b0:	40003c00 	.word	0x40003c00
    78b4:	200006e8 	.word	0x200006e8
    78b8:	4101a000 	.word	0x4101a000
    78bc:	200006ec 	.word	0x200006ec
    78c0:	4101c000 	.word	0x4101c000
    78c4:	200006f0 	.word	0x200006f0
    78c8:	43001800 	.word	0x43001800
    78cc:	200006f4 	.word	0x200006f4

000078d0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    78d0:	b4b0      	push	{r4, r5, r7}
    78d2:	b08d      	sub	sp, #52	; 0x34
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    78d8:	4b13      	ldr	r3, [pc, #76]	; (7928 <_get_hardware_offset+0x58>)
    78da:	f107 040c 	add.w	r4, r7, #12
    78de:	461d      	mov	r5, r3
    78e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    78e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    78e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    78e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    78ec:	2300      	movs	r3, #0
    78ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    78f0:	e010      	b.n	7914 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    78f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    78f4:	009b      	lsls	r3, r3, #2
    78f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    78fa:	4413      	add	r3, r2
    78fc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7900:	461a      	mov	r2, r3
    7902:	687b      	ldr	r3, [r7, #4]
    7904:	429a      	cmp	r2, r3
    7906:	d102      	bne.n	790e <_get_hardware_offset+0x3e>
			return i;
    7908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    790a:	b2db      	uxtb	r3, r3
    790c:	e006      	b.n	791c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7910:	3301      	adds	r3, #1
    7912:	62fb      	str	r3, [r7, #44]	; 0x2c
    7914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7916:	2b07      	cmp	r3, #7
    7918:	d9eb      	bls.n	78f2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    791a:	2300      	movs	r3, #0
}
    791c:	4618      	mov	r0, r3
    791e:	3734      	adds	r7, #52	; 0x34
    7920:	46bd      	mov	sp, r7
    7922:	bcb0      	pop	{r4, r5, r7}
    7924:	4770      	bx	lr
    7926:	bf00      	nop
    7928:	0000d718 	.word	0x0000d718

0000792c <__NVIC_EnableIRQ>:
{
    792c:	b480      	push	{r7}
    792e:	b083      	sub	sp, #12
    7930:	af00      	add	r7, sp, #0
    7932:	4603      	mov	r3, r0
    7934:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    793a:	2b00      	cmp	r3, #0
    793c:	db0b      	blt.n	7956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    793e:	4909      	ldr	r1, [pc, #36]	; (7964 <__NVIC_EnableIRQ+0x38>)
    7940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7944:	095b      	lsrs	r3, r3, #5
    7946:	88fa      	ldrh	r2, [r7, #6]
    7948:	f002 021f 	and.w	r2, r2, #31
    794c:	2001      	movs	r0, #1
    794e:	fa00 f202 	lsl.w	r2, r0, r2
    7952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7956:	bf00      	nop
    7958:	370c      	adds	r7, #12
    795a:	46bd      	mov	sp, r7
    795c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7960:	4770      	bx	lr
    7962:	bf00      	nop
    7964:	e000e100 	.word	0xe000e100

00007968 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7968:	b480      	push	{r7}
    796a:	b087      	sub	sp, #28
    796c:	af00      	add	r7, sp, #0
    796e:	60f8      	str	r0, [r7, #12]
    7970:	460b      	mov	r3, r1
    7972:	607a      	str	r2, [r7, #4]
    7974:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7976:	7afa      	ldrb	r2, [r7, #11]
    7978:	68f9      	ldr	r1, [r7, #12]
    797a:	4613      	mov	r3, r2
    797c:	009b      	lsls	r3, r3, #2
    797e:	4413      	add	r3, r2
    7980:	009b      	lsls	r3, r3, #2
    7982:	440b      	add	r3, r1
    7984:	3340      	adds	r3, #64	; 0x40
    7986:	681b      	ldr	r3, [r3, #0]
    7988:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    798a:	697a      	ldr	r2, [r7, #20]
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	4013      	ands	r3, r2
    7990:	617b      	str	r3, [r7, #20]
	return tmp;
    7992:	697b      	ldr	r3, [r7, #20]
}
    7994:	4618      	mov	r0, r3
    7996:	371c      	adds	r7, #28
    7998:	46bd      	mov	sp, r7
    799a:	f85d 7b04 	ldr.w	r7, [sp], #4
    799e:	4770      	bx	lr

000079a0 <hri_oscctrl_get_STATUS_reg>:
{
    79a0:	b480      	push	{r7}
    79a2:	b085      	sub	sp, #20
    79a4:	af00      	add	r7, sp, #0
    79a6:	6078      	str	r0, [r7, #4]
    79a8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	691b      	ldr	r3, [r3, #16]
    79ae:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    79b0:	68fa      	ldr	r2, [r7, #12]
    79b2:	683b      	ldr	r3, [r7, #0]
    79b4:	4013      	ands	r3, r2
    79b6:	60fb      	str	r3, [r7, #12]
	return tmp;
    79b8:	68fb      	ldr	r3, [r7, #12]
}
    79ba:	4618      	mov	r0, r3
    79bc:	3714      	adds	r7, #20
    79be:	46bd      	mov	sp, r7
    79c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c4:	4770      	bx	lr

000079c6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    79c6:	b480      	push	{r7}
    79c8:	b085      	sub	sp, #20
    79ca:	af00      	add	r7, sp, #0
    79cc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	f893 3020 	ldrb.w	r3, [r3, #32]
    79d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    79d6:	7bfb      	ldrb	r3, [r7, #15]
    79d8:	f003 0301 	and.w	r3, r3, #1
    79dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    79de:	7bfb      	ldrb	r3, [r7, #15]
    79e0:	2b00      	cmp	r3, #0
    79e2:	bf14      	ite	ne
    79e4:	2301      	movne	r3, #1
    79e6:	2300      	moveq	r3, #0
    79e8:	b2db      	uxtb	r3, r3
}
    79ea:	4618      	mov	r0, r3
    79ec:	3714      	adds	r7, #20
    79ee:	46bd      	mov	sp, r7
    79f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f4:	4770      	bx	lr

000079f6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    79f6:	b480      	push	{r7}
    79f8:	b083      	sub	sp, #12
    79fa:	af00      	add	r7, sp, #0
    79fc:	6078      	str	r0, [r7, #4]
    79fe:	460b      	mov	r3, r1
    7a00:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7a02:	bf00      	nop
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	789b      	ldrb	r3, [r3, #2]
    7a08:	b2da      	uxtb	r2, r3
    7a0a:	78fb      	ldrb	r3, [r7, #3]
    7a0c:	4013      	ands	r3, r2
    7a0e:	b2db      	uxtb	r3, r3
    7a10:	2b00      	cmp	r3, #0
    7a12:	d1f7      	bne.n	7a04 <hri_usb_wait_for_sync+0xe>
	};
}
    7a14:	bf00      	nop
    7a16:	370c      	adds	r7, #12
    7a18:	46bd      	mov	sp, r7
    7a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a1e:	4770      	bx	lr

00007a20 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7a20:	b480      	push	{r7}
    7a22:	b083      	sub	sp, #12
    7a24:	af00      	add	r7, sp, #0
    7a26:	6078      	str	r0, [r7, #4]
    7a28:	460b      	mov	r3, r1
    7a2a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	789b      	ldrb	r3, [r3, #2]
    7a30:	b2da      	uxtb	r2, r3
    7a32:	78fb      	ldrb	r3, [r7, #3]
    7a34:	4013      	ands	r3, r2
    7a36:	b2db      	uxtb	r3, r3
    7a38:	2b00      	cmp	r3, #0
    7a3a:	bf14      	ite	ne
    7a3c:	2301      	movne	r3, #1
    7a3e:	2300      	moveq	r3, #0
    7a40:	b2db      	uxtb	r3, r3
}
    7a42:	4618      	mov	r0, r3
    7a44:	370c      	adds	r7, #12
    7a46:	46bd      	mov	sp, r7
    7a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4c:	4770      	bx	lr

00007a4e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7a4e:	b480      	push	{r7}
    7a50:	b085      	sub	sp, #20
    7a52:	af00      	add	r7, sp, #0
    7a54:	6078      	str	r0, [r7, #4]
    7a56:	460b      	mov	r3, r1
    7a58:	70fb      	strb	r3, [r7, #3]
    7a5a:	4613      	mov	r3, r2
    7a5c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7a5e:	78fb      	ldrb	r3, [r7, #3]
    7a60:	687a      	ldr	r2, [r7, #4]
    7a62:	3308      	adds	r3, #8
    7a64:	015b      	lsls	r3, r3, #5
    7a66:	4413      	add	r3, r2
    7a68:	3307      	adds	r3, #7
    7a6a:	781b      	ldrb	r3, [r3, #0]
    7a6c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7a6e:	7bfa      	ldrb	r2, [r7, #15]
    7a70:	78bb      	ldrb	r3, [r7, #2]
    7a72:	4013      	ands	r3, r2
    7a74:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7a76:	7bfb      	ldrb	r3, [r7, #15]
}
    7a78:	4618      	mov	r0, r3
    7a7a:	3714      	adds	r7, #20
    7a7c:	46bd      	mov	sp, r7
    7a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a82:	4770      	bx	lr

00007a84 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7a84:	b480      	push	{r7}
    7a86:	b083      	sub	sp, #12
    7a88:	af00      	add	r7, sp, #0
    7a8a:	6078      	str	r0, [r7, #4]
    7a8c:	460b      	mov	r3, r1
    7a8e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7a90:	78fb      	ldrb	r3, [r7, #3]
    7a92:	687a      	ldr	r2, [r7, #4]
    7a94:	3308      	adds	r3, #8
    7a96:	015b      	lsls	r3, r3, #5
    7a98:	4413      	add	r3, r2
    7a9a:	3307      	adds	r3, #7
    7a9c:	781b      	ldrb	r3, [r3, #0]
    7a9e:	b2db      	uxtb	r3, r3
}
    7aa0:	4618      	mov	r0, r3
    7aa2:	370c      	adds	r7, #12
    7aa4:	46bd      	mov	sp, r7
    7aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aaa:	4770      	bx	lr

00007aac <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7aac:	b480      	push	{r7}
    7aae:	b083      	sub	sp, #12
    7ab0:	af00      	add	r7, sp, #0
    7ab2:	6078      	str	r0, [r7, #4]
    7ab4:	460b      	mov	r3, r1
    7ab6:	70fb      	strb	r3, [r7, #3]
    7ab8:	4613      	mov	r3, r2
    7aba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7abc:	78fb      	ldrb	r3, [r7, #3]
    7abe:	687a      	ldr	r2, [r7, #4]
    7ac0:	3308      	adds	r3, #8
    7ac2:	015b      	lsls	r3, r3, #5
    7ac4:	4413      	add	r3, r2
    7ac6:	3307      	adds	r3, #7
    7ac8:	78ba      	ldrb	r2, [r7, #2]
    7aca:	701a      	strb	r2, [r3, #0]
}
    7acc:	bf00      	nop
    7ace:	370c      	adds	r7, #12
    7ad0:	46bd      	mov	sp, r7
    7ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ad6:	4770      	bx	lr

00007ad8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7ad8:	b480      	push	{r7}
    7ada:	b083      	sub	sp, #12
    7adc:	af00      	add	r7, sp, #0
    7ade:	6078      	str	r0, [r7, #4]
    7ae0:	460b      	mov	r3, r1
    7ae2:	70fb      	strb	r3, [r7, #3]
    7ae4:	4613      	mov	r3, r2
    7ae6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7ae8:	78fb      	ldrb	r3, [r7, #3]
    7aea:	687a      	ldr	r2, [r7, #4]
    7aec:	3308      	adds	r3, #8
    7aee:	015b      	lsls	r3, r3, #5
    7af0:	4413      	add	r3, r2
    7af2:	3305      	adds	r3, #5
    7af4:	78ba      	ldrb	r2, [r7, #2]
    7af6:	701a      	strb	r2, [r3, #0]
}
    7af8:	bf00      	nop
    7afa:	370c      	adds	r7, #12
    7afc:	46bd      	mov	sp, r7
    7afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b02:	4770      	bx	lr

00007b04 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7b04:	b480      	push	{r7}
    7b06:	b083      	sub	sp, #12
    7b08:	af00      	add	r7, sp, #0
    7b0a:	6078      	str	r0, [r7, #4]
    7b0c:	460b      	mov	r3, r1
    7b0e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7b10:	78fb      	ldrb	r3, [r7, #3]
    7b12:	687a      	ldr	r2, [r7, #4]
    7b14:	3308      	adds	r3, #8
    7b16:	015b      	lsls	r3, r3, #5
    7b18:	4413      	add	r3, r2
    7b1a:	3306      	adds	r3, #6
    7b1c:	781b      	ldrb	r3, [r3, #0]
    7b1e:	b2db      	uxtb	r3, r3
}
    7b20:	4618      	mov	r0, r3
    7b22:	370c      	adds	r7, #12
    7b24:	46bd      	mov	sp, r7
    7b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b2a:	4770      	bx	lr

00007b2c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7b2c:	b480      	push	{r7}
    7b2e:	b083      	sub	sp, #12
    7b30:	af00      	add	r7, sp, #0
    7b32:	6078      	str	r0, [r7, #4]
    7b34:	460b      	mov	r3, r1
    7b36:	70fb      	strb	r3, [r7, #3]
    7b38:	4613      	mov	r3, r2
    7b3a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7b3c:	78fb      	ldrb	r3, [r7, #3]
    7b3e:	687a      	ldr	r2, [r7, #4]
    7b40:	3308      	adds	r3, #8
    7b42:	015b      	lsls	r3, r3, #5
    7b44:	4413      	add	r3, r2
    7b46:	3304      	adds	r3, #4
    7b48:	78ba      	ldrb	r2, [r7, #2]
    7b4a:	701a      	strb	r2, [r3, #0]
}
    7b4c:	bf00      	nop
    7b4e:	370c      	adds	r7, #12
    7b50:	46bd      	mov	sp, r7
    7b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b56:	4770      	bx	lr

00007b58 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7b58:	b480      	push	{r7}
    7b5a:	b083      	sub	sp, #12
    7b5c:	af00      	add	r7, sp, #0
    7b5e:	6078      	str	r0, [r7, #4]
    7b60:	460b      	mov	r3, r1
    7b62:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7b64:	78fb      	ldrb	r3, [r7, #3]
    7b66:	687a      	ldr	r2, [r7, #4]
    7b68:	015b      	lsls	r3, r3, #5
    7b6a:	4413      	add	r3, r2
    7b6c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7b70:	2210      	movs	r2, #16
    7b72:	701a      	strb	r2, [r3, #0]
}
    7b74:	bf00      	nop
    7b76:	370c      	adds	r7, #12
    7b78:	46bd      	mov	sp, r7
    7b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b7e:	4770      	bx	lr

00007b80 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7b80:	b480      	push	{r7}
    7b82:	b083      	sub	sp, #12
    7b84:	af00      	add	r7, sp, #0
    7b86:	6078      	str	r0, [r7, #4]
    7b88:	460b      	mov	r3, r1
    7b8a:	70fb      	strb	r3, [r7, #3]
    7b8c:	4613      	mov	r3, r2
    7b8e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7b90:	78fb      	ldrb	r3, [r7, #3]
    7b92:	687a      	ldr	r2, [r7, #4]
    7b94:	015b      	lsls	r3, r3, #5
    7b96:	4413      	add	r3, r2
    7b98:	f203 1309 	addw	r3, r3, #265	; 0x109
    7b9c:	78ba      	ldrb	r2, [r7, #2]
    7b9e:	701a      	strb	r2, [r3, #0]
}
    7ba0:	bf00      	nop
    7ba2:	370c      	adds	r7, #12
    7ba4:	46bd      	mov	sp, r7
    7ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7baa:	4770      	bx	lr

00007bac <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7bac:	b480      	push	{r7}
    7bae:	b083      	sub	sp, #12
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
    7bb4:	460b      	mov	r3, r1
    7bb6:	70fb      	strb	r3, [r7, #3]
    7bb8:	4613      	mov	r3, r2
    7bba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7bbc:	78fb      	ldrb	r3, [r7, #3]
    7bbe:	687a      	ldr	r2, [r7, #4]
    7bc0:	015b      	lsls	r3, r3, #5
    7bc2:	4413      	add	r3, r2
    7bc4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7bc8:	78ba      	ldrb	r2, [r7, #2]
    7bca:	701a      	strb	r2, [r3, #0]
}
    7bcc:	bf00      	nop
    7bce:	370c      	adds	r7, #12
    7bd0:	46bd      	mov	sp, r7
    7bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bd6:	4770      	bx	lr

00007bd8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7bd8:	b480      	push	{r7}
    7bda:	b085      	sub	sp, #20
    7bdc:	af00      	add	r7, sp, #0
    7bde:	6078      	str	r0, [r7, #4]
    7be0:	460b      	mov	r3, r1
    7be2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7be4:	78fb      	ldrb	r3, [r7, #3]
    7be6:	687a      	ldr	r2, [r7, #4]
    7be8:	3308      	adds	r3, #8
    7bea:	015b      	lsls	r3, r3, #5
    7bec:	4413      	add	r3, r2
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7bf2:	7bfb      	ldrb	r3, [r7, #15]
    7bf4:	f003 0307 	and.w	r3, r3, #7
    7bf8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7bfa:	7bfb      	ldrb	r3, [r7, #15]
}
    7bfc:	4618      	mov	r0, r3
    7bfe:	3714      	adds	r7, #20
    7c00:	46bd      	mov	sp, r7
    7c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c06:	4770      	bx	lr

00007c08 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7c08:	b480      	push	{r7}
    7c0a:	b085      	sub	sp, #20
    7c0c:	af00      	add	r7, sp, #0
    7c0e:	6078      	str	r0, [r7, #4]
    7c10:	460b      	mov	r3, r1
    7c12:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7c14:	78fb      	ldrb	r3, [r7, #3]
    7c16:	687a      	ldr	r2, [r7, #4]
    7c18:	3308      	adds	r3, #8
    7c1a:	015b      	lsls	r3, r3, #5
    7c1c:	4413      	add	r3, r2
    7c1e:	781b      	ldrb	r3, [r3, #0]
    7c20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7c22:	7bfb      	ldrb	r3, [r7, #15]
    7c24:	091b      	lsrs	r3, r3, #4
    7c26:	b2db      	uxtb	r3, r3
    7c28:	f003 0307 	and.w	r3, r3, #7
    7c2c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7c2e:	7bfb      	ldrb	r3, [r7, #15]
}
    7c30:	4618      	mov	r0, r3
    7c32:	3714      	adds	r7, #20
    7c34:	46bd      	mov	sp, r7
    7c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c3a:	4770      	bx	lr

00007c3c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7c3c:	b480      	push	{r7}
    7c3e:	b083      	sub	sp, #12
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
    7c44:	460b      	mov	r3, r1
    7c46:	70fb      	strb	r3, [r7, #3]
    7c48:	4613      	mov	r3, r2
    7c4a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7c4c:	78fb      	ldrb	r3, [r7, #3]
    7c4e:	687a      	ldr	r2, [r7, #4]
    7c50:	3308      	adds	r3, #8
    7c52:	015b      	lsls	r3, r3, #5
    7c54:	4413      	add	r3, r2
    7c56:	78ba      	ldrb	r2, [r7, #2]
    7c58:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7c5a:	bf00      	nop
    7c5c:	370c      	adds	r7, #12
    7c5e:	46bd      	mov	sp, r7
    7c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c64:	4770      	bx	lr

00007c66 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7c66:	b480      	push	{r7}
    7c68:	b083      	sub	sp, #12
    7c6a:	af00      	add	r7, sp, #0
    7c6c:	6078      	str	r0, [r7, #4]
    7c6e:	460b      	mov	r3, r1
    7c70:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7c72:	78fb      	ldrb	r3, [r7, #3]
    7c74:	687a      	ldr	r2, [r7, #4]
    7c76:	3308      	adds	r3, #8
    7c78:	015b      	lsls	r3, r3, #5
    7c7a:	4413      	add	r3, r2
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	b2db      	uxtb	r3, r3
}
    7c80:	4618      	mov	r0, r3
    7c82:	370c      	adds	r7, #12
    7c84:	46bd      	mov	sp, r7
    7c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c8a:	4770      	bx	lr

00007c8c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7c8c:	b480      	push	{r7}
    7c8e:	b083      	sub	sp, #12
    7c90:	af00      	add	r7, sp, #0
    7c92:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	8b9b      	ldrh	r3, [r3, #28]
    7c98:	b29b      	uxth	r3, r3
}
    7c9a:	4618      	mov	r0, r3
    7c9c:	370c      	adds	r7, #12
    7c9e:	46bd      	mov	sp, r7
    7ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca4:	4770      	bx	lr

00007ca6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7ca6:	b480      	push	{r7}
    7ca8:	b083      	sub	sp, #12
    7caa:	af00      	add	r7, sp, #0
    7cac:	6078      	str	r0, [r7, #4]
    7cae:	460b      	mov	r3, r1
    7cb0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7cb2:	687b      	ldr	r3, [r7, #4]
    7cb4:	887a      	ldrh	r2, [r7, #2]
    7cb6:	839a      	strh	r2, [r3, #28]
}
    7cb8:	bf00      	nop
    7cba:	370c      	adds	r7, #12
    7cbc:	46bd      	mov	sp, r7
    7cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cc2:	4770      	bx	lr

00007cc4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7cc4:	b480      	push	{r7}
    7cc6:	b083      	sub	sp, #12
    7cc8:	af00      	add	r7, sp, #0
    7cca:	6078      	str	r0, [r7, #4]
    7ccc:	460b      	mov	r3, r1
    7cce:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	887a      	ldrh	r2, [r7, #2]
    7cd4:	831a      	strh	r2, [r3, #24]
}
    7cd6:	bf00      	nop
    7cd8:	370c      	adds	r7, #12
    7cda:	46bd      	mov	sp, r7
    7cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ce0:	4770      	bx	lr

00007ce2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7ce2:	b480      	push	{r7}
    7ce4:	b083      	sub	sp, #12
    7ce6:	af00      	add	r7, sp, #0
    7ce8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7cea:	687b      	ldr	r3, [r7, #4]
    7cec:	8b1b      	ldrh	r3, [r3, #24]
    7cee:	b29b      	uxth	r3, r3
}
    7cf0:	4618      	mov	r0, r3
    7cf2:	370c      	adds	r7, #12
    7cf4:	46bd      	mov	sp, r7
    7cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cfa:	4770      	bx	lr

00007cfc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7cfc:	b480      	push	{r7}
    7cfe:	b083      	sub	sp, #12
    7d00:	af00      	add	r7, sp, #0
    7d02:	6078      	str	r0, [r7, #4]
    7d04:	460b      	mov	r3, r1
    7d06:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	887a      	ldrh	r2, [r7, #2]
    7d0c:	829a      	strh	r2, [r3, #20]
}
    7d0e:	bf00      	nop
    7d10:	370c      	adds	r7, #12
    7d12:	46bd      	mov	sp, r7
    7d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d18:	4770      	bx	lr

00007d1a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7d1a:	b480      	push	{r7}
    7d1c:	b085      	sub	sp, #20
    7d1e:	af00      	add	r7, sp, #0
    7d20:	6078      	str	r0, [r7, #4]
    7d22:	460b      	mov	r3, r1
    7d24:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7d26:	687b      	ldr	r3, [r7, #4]
    7d28:	789b      	ldrb	r3, [r3, #2]
    7d2a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d2c:	7bfa      	ldrb	r2, [r7, #15]
    7d2e:	78fb      	ldrb	r3, [r7, #3]
    7d30:	4013      	ands	r3, r2
    7d32:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d34:	7bfb      	ldrb	r3, [r7, #15]
}
    7d36:	4618      	mov	r0, r3
    7d38:	3714      	adds	r7, #20
    7d3a:	46bd      	mov	sp, r7
    7d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d40:	4770      	bx	lr
	...

00007d44 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7d44:	b580      	push	{r7, lr}
    7d46:	b082      	sub	sp, #8
    7d48:	af00      	add	r7, sp, #0
    7d4a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7d4c:	687b      	ldr	r3, [r7, #4]
    7d4e:	781b      	ldrb	r3, [r3, #0]
    7d50:	b2db      	uxtb	r3, r3
    7d52:	f023 0302 	bic.w	r3, r3, #2
    7d56:	b2da      	uxtb	r2, r3
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7d5c:	2103      	movs	r1, #3
    7d5e:	6878      	ldr	r0, [r7, #4]
    7d60:	4b02      	ldr	r3, [pc, #8]	; (7d6c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7d62:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7d64:	bf00      	nop
    7d66:	3708      	adds	r7, #8
    7d68:	46bd      	mov	sp, r7
    7d6a:	bd80      	pop	{r7, pc}
    7d6c:	000079f7 	.word	0x000079f7

00007d70 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    7d70:	b580      	push	{r7, lr}
    7d72:	b084      	sub	sp, #16
    7d74:	af00      	add	r7, sp, #0
    7d76:	6078      	str	r0, [r7, #4]
    7d78:	460b      	mov	r3, r1
    7d7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7d7c:	2103      	movs	r1, #3
    7d7e:	6878      	ldr	r0, [r7, #4]
    7d80:	4b06      	ldr	r3, [pc, #24]	; (7d9c <hri_usb_get_CTRLA_reg+0x2c>)
    7d82:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    7d84:	687b      	ldr	r3, [r7, #4]
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d8a:	7bfa      	ldrb	r2, [r7, #15]
    7d8c:	78fb      	ldrb	r3, [r7, #3]
    7d8e:	4013      	ands	r3, r2
    7d90:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d92:	7bfb      	ldrb	r3, [r7, #15]
}
    7d94:	4618      	mov	r0, r3
    7d96:	3710      	adds	r7, #16
    7d98:	46bd      	mov	sp, r7
    7d9a:	bd80      	pop	{r7, pc}
    7d9c:	000079f7 	.word	0x000079f7

00007da0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    7da0:	b580      	push	{r7, lr}
    7da2:	b082      	sub	sp, #8
    7da4:	af00      	add	r7, sp, #0
    7da6:	6078      	str	r0, [r7, #4]
    7da8:	460b      	mov	r3, r1
    7daa:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	78fa      	ldrb	r2, [r7, #3]
    7db0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7db2:	2103      	movs	r1, #3
    7db4:	6878      	ldr	r0, [r7, #4]
    7db6:	4b03      	ldr	r3, [pc, #12]	; (7dc4 <hri_usb_write_CTRLA_reg+0x24>)
    7db8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7dba:	bf00      	nop
    7dbc:	3708      	adds	r7, #8
    7dbe:	46bd      	mov	sp, r7
    7dc0:	bd80      	pop	{r7, pc}
    7dc2:	bf00      	nop
    7dc4:	000079f7 	.word	0x000079f7

00007dc8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    7dc8:	b580      	push	{r7, lr}
    7dca:	b082      	sub	sp, #8
    7dcc:	af00      	add	r7, sp, #0
    7dce:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7dd0:	2103      	movs	r1, #3
    7dd2:	6878      	ldr	r0, [r7, #4]
    7dd4:	4b04      	ldr	r3, [pc, #16]	; (7de8 <hri_usb_read_CTRLA_reg+0x20>)
    7dd6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    7dd8:	687b      	ldr	r3, [r7, #4]
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	b2db      	uxtb	r3, r3
}
    7dde:	4618      	mov	r0, r3
    7de0:	3708      	adds	r7, #8
    7de2:	46bd      	mov	sp, r7
    7de4:	bd80      	pop	{r7, pc}
    7de6:	bf00      	nop
    7de8:	000079f7 	.word	0x000079f7

00007dec <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    7dec:	b480      	push	{r7}
    7dee:	b083      	sub	sp, #12
    7df0:	af00      	add	r7, sp, #0
    7df2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	891b      	ldrh	r3, [r3, #8]
    7df8:	b29b      	uxth	r3, r3
    7dfa:	f023 0301 	bic.w	r3, r3, #1
    7dfe:	b29a      	uxth	r2, r3
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7e04:	bf00      	nop
    7e06:	370c      	adds	r7, #12
    7e08:	46bd      	mov	sp, r7
    7e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e0e:	4770      	bx	lr

00007e10 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    7e10:	b480      	push	{r7}
    7e12:	b083      	sub	sp, #12
    7e14:	af00      	add	r7, sp, #0
    7e16:	6078      	str	r0, [r7, #4]
    7e18:	460b      	mov	r3, r1
    7e1a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    7e1c:	687b      	ldr	r3, [r7, #4]
    7e1e:	887a      	ldrh	r2, [r7, #2]
    7e20:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7e22:	bf00      	nop
    7e24:	370c      	adds	r7, #12
    7e26:	46bd      	mov	sp, r7
    7e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2c:	4770      	bx	lr

00007e2e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    7e2e:	b480      	push	{r7}
    7e30:	b083      	sub	sp, #12
    7e32:	af00      	add	r7, sp, #0
    7e34:	6078      	str	r0, [r7, #4]
    7e36:	460b      	mov	r3, r1
    7e38:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    7e3a:	687b      	ldr	r3, [r7, #4]
    7e3c:	78fa      	ldrb	r2, [r7, #3]
    7e3e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    7e40:	bf00      	nop
    7e42:	370c      	adds	r7, #12
    7e44:	46bd      	mov	sp, r7
    7e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e4a:	4770      	bx	lr

00007e4c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    7e4c:	b480      	push	{r7}
    7e4e:	b083      	sub	sp, #12
    7e50:	af00      	add	r7, sp, #0
    7e52:	6078      	str	r0, [r7, #4]
    7e54:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	683a      	ldr	r2, [r7, #0]
    7e5a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    7e5c:	bf00      	nop
    7e5e:	370c      	adds	r7, #12
    7e60:	46bd      	mov	sp, r7
    7e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e66:	4770      	bx	lr

00007e68 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    7e68:	b480      	push	{r7}
    7e6a:	b083      	sub	sp, #12
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
    7e70:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    7e72:	2300      	movs	r3, #0
}
    7e74:	4618      	mov	r0, r3
    7e76:	370c      	adds	r7, #12
    7e78:	46bd      	mov	sp, r7
    7e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e7e:	4770      	bx	lr

00007e80 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    7e80:	b480      	push	{r7}
    7e82:	b085      	sub	sp, #20
    7e84:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    7e86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7e8a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    7e8c:	4b28      	ldr	r3, [pc, #160]	; (7f30 <_usb_load_calib+0xb0>)
    7e8e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    7e90:	f003 031f 	and.w	r3, r3, #31
    7e94:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    7e96:	4b26      	ldr	r3, [pc, #152]	; (7f30 <_usb_load_calib+0xb0>)
    7e98:	681b      	ldr	r3, [r3, #0]
    7e9a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    7e9c:	f003 031f 	and.w	r3, r3, #31
    7ea0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    7ea2:	4b23      	ldr	r3, [pc, #140]	; (7f30 <_usb_load_calib+0xb0>)
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	0a9b      	lsrs	r3, r3, #10
    7ea8:	f003 0307 	and.w	r3, r3, #7
    7eac:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    7eae:	68fb      	ldr	r3, [r7, #12]
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d002      	beq.n	7eba <_usb_load_calib+0x3a>
    7eb4:	68fb      	ldr	r3, [r7, #12]
    7eb6:	2b1f      	cmp	r3, #31
    7eb8:	d101      	bne.n	7ebe <_usb_load_calib+0x3e>
		pad_transn = 9;
    7eba:	2309      	movs	r3, #9
    7ebc:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    7ebe:	68bb      	ldr	r3, [r7, #8]
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d002      	beq.n	7eca <_usb_load_calib+0x4a>
    7ec4:	68bb      	ldr	r3, [r7, #8]
    7ec6:	2b1f      	cmp	r3, #31
    7ec8:	d101      	bne.n	7ece <_usb_load_calib+0x4e>
		pad_transp = 25;
    7eca:	2319      	movs	r3, #25
    7ecc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d002      	beq.n	7eda <_usb_load_calib+0x5a>
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	2b07      	cmp	r3, #7
    7ed8:	d101      	bne.n	7ede <_usb_load_calib+0x5e>
		pad_trim = 6;
    7eda:	2306      	movs	r3, #6
    7edc:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    7ede:	68fb      	ldr	r3, [r7, #12]
    7ee0:	b29b      	uxth	r3, r3
    7ee2:	019b      	lsls	r3, r3, #6
    7ee4:	b29b      	uxth	r3, r3
    7ee6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    7eea:	b29a      	uxth	r2, r3
    7eec:	68bb      	ldr	r3, [r7, #8]
    7eee:	b29b      	uxth	r3, r3
    7ef0:	f003 031f 	and.w	r3, r3, #31
    7ef4:	b29b      	uxth	r3, r3
    7ef6:	4313      	orrs	r3, r2
    7ef8:	b29a      	uxth	r2, r3
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	b29b      	uxth	r3, r3
    7efe:	031b      	lsls	r3, r3, #12
    7f00:	b29b      	uxth	r3, r3
    7f02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    7f06:	b29b      	uxth	r3, r3
    7f08:	4313      	orrs	r3, r2
    7f0a:	b29a      	uxth	r2, r3
    7f0c:	683b      	ldr	r3, [r7, #0]
    7f0e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    7f10:	683a      	ldr	r2, [r7, #0]
    7f12:	78d3      	ldrb	r3, [r2, #3]
    7f14:	f043 0303 	orr.w	r3, r3, #3
    7f18:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    7f1a:	683a      	ldr	r2, [r7, #0]
    7f1c:	78d3      	ldrb	r3, [r2, #3]
    7f1e:	f043 030c 	orr.w	r3, r3, #12
    7f22:	70d3      	strb	r3, [r2, #3]
}
    7f24:	bf00      	nop
    7f26:	3714      	adds	r7, #20
    7f28:	46bd      	mov	sp, r7
    7f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f2e:	4770      	bx	lr
    7f30:	00800084 	.word	0x00800084

00007f34 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    7f34:	b580      	push	{r7, lr}
    7f36:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    7f38:	bf00      	nop
    7f3a:	2203      	movs	r2, #3
    7f3c:	2100      	movs	r1, #0
    7f3e:	4804      	ldr	r0, [pc, #16]	; (7f50 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    7f40:	4b04      	ldr	r3, [pc, #16]	; (7f54 <_usb_d_dev_wait_dpll_rdy+0x20>)
    7f42:	4798      	blx	r3
    7f44:	4603      	mov	r3, r0
    7f46:	2b03      	cmp	r3, #3
    7f48:	d1f7      	bne.n	7f3a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    7f4a:	bf00      	nop
    7f4c:	bd80      	pop	{r7, pc}
    7f4e:	bf00      	nop
    7f50:	40001000 	.word	0x40001000
    7f54:	00007969 	.word	0x00007969

00007f58 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    7f58:	b580      	push	{r7, lr}
    7f5a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7f5c:	480e      	ldr	r0, [pc, #56]	; (7f98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7f5e:	4b0f      	ldr	r3, [pc, #60]	; (7f9c <_usb_d_dev_wait_dfll_rdy+0x44>)
    7f60:	4798      	blx	r3
    7f62:	4603      	mov	r3, r0
    7f64:	2b00      	cmp	r3, #0
    7f66:	d00a      	beq.n	7f7e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    7f68:	bf00      	nop
    7f6a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    7f6e:	480a      	ldr	r0, [pc, #40]	; (7f98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7f70:	4b0b      	ldr	r3, [pc, #44]	; (7fa0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    7f72:	4798      	blx	r3
    7f74:	4603      	mov	r3, r0
    7f76:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7f7a:	d1f6      	bne.n	7f6a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    7f7c:	e009      	b.n	7f92 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7f7e:	bf00      	nop
    7f80:	f44f 7180 	mov.w	r1, #256	; 0x100
    7f84:	4804      	ldr	r0, [pc, #16]	; (7f98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7f86:	4b06      	ldr	r3, [pc, #24]	; (7fa0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    7f88:	4798      	blx	r3
    7f8a:	4603      	mov	r3, r0
    7f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    7f90:	d1f6      	bne.n	7f80 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    7f92:	bf00      	nop
    7f94:	bd80      	pop	{r7, pc}
    7f96:	bf00      	nop
    7f98:	40001000 	.word	0x40001000
    7f9c:	000079c7 	.word	0x000079c7
    7fa0:	000079a1 	.word	0x000079a1

00007fa4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    7fa4:	b580      	push	{r7, lr}
    7fa6:	b082      	sub	sp, #8
    7fa8:	af00      	add	r7, sp, #0
    7faa:	4603      	mov	r3, r0
    7fac:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    7fae:	79fb      	ldrb	r3, [r7, #7]
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d102      	bne.n	7fba <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    7fb4:	4b05      	ldr	r3, [pc, #20]	; (7fcc <_usb_d_dev_wait_clk_rdy+0x28>)
    7fb6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    7fb8:	e004      	b.n	7fc4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    7fba:	79fb      	ldrb	r3, [r7, #7]
    7fbc:	2b01      	cmp	r3, #1
    7fbe:	d101      	bne.n	7fc4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    7fc0:	4b03      	ldr	r3, [pc, #12]	; (7fd0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    7fc2:	4798      	blx	r3
}
    7fc4:	bf00      	nop
    7fc6:	3708      	adds	r7, #8
    7fc8:	46bd      	mov	sp, r7
    7fca:	bd80      	pop	{r7, pc}
    7fcc:	00007f59 	.word	0x00007f59
    7fd0:	00007f35 	.word	0x00007f35

00007fd4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    7fd4:	b580      	push	{r7, lr}
    7fd6:	b082      	sub	sp, #8
    7fd8:	af00      	add	r7, sp, #0
    7fda:	4603      	mov	r3, r0
    7fdc:	6039      	str	r1, [r7, #0]
    7fde:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    7fe0:	683b      	ldr	r3, [r7, #0]
    7fe2:	b2da      	uxtb	r2, r3
    7fe4:	79fb      	ldrb	r3, [r7, #7]
    7fe6:	4619      	mov	r1, r3
    7fe8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7fec:	4b02      	ldr	r3, [pc, #8]	; (7ff8 <_usbd_ep_int_ack+0x24>)
    7fee:	4798      	blx	r3
}
    7ff0:	bf00      	nop
    7ff2:	3708      	adds	r7, #8
    7ff4:	46bd      	mov	sp, r7
    7ff6:	bd80      	pop	{r7, pc}
    7ff8:	00007aad 	.word	0x00007aad

00007ffc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    7ffc:	b580      	push	{r7, lr}
    7ffe:	b082      	sub	sp, #8
    8000:	af00      	add	r7, sp, #0
    8002:	4603      	mov	r3, r0
    8004:	6039      	str	r1, [r7, #0]
    8006:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8008:	683b      	ldr	r3, [r7, #0]
    800a:	b2da      	uxtb	r2, r3
    800c:	79fb      	ldrb	r3, [r7, #7]
    800e:	4619      	mov	r1, r3
    8010:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8014:	4b02      	ldr	r3, [pc, #8]	; (8020 <_usbd_ep_int_en+0x24>)
    8016:	4798      	blx	r3
}
    8018:	bf00      	nop
    801a:	3708      	adds	r7, #8
    801c:	46bd      	mov	sp, r7
    801e:	bd80      	pop	{r7, pc}
    8020:	00007b81 	.word	0x00007b81

00008024 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8024:	b580      	push	{r7, lr}
    8026:	b082      	sub	sp, #8
    8028:	af00      	add	r7, sp, #0
    802a:	4603      	mov	r3, r0
    802c:	6039      	str	r1, [r7, #0]
    802e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8030:	683b      	ldr	r3, [r7, #0]
    8032:	b2da      	uxtb	r2, r3
    8034:	79fb      	ldrb	r3, [r7, #7]
    8036:	4619      	mov	r1, r3
    8038:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    803c:	4b02      	ldr	r3, [pc, #8]	; (8048 <_usbd_ep_int_dis+0x24>)
    803e:	4798      	blx	r3
}
    8040:	bf00      	nop
    8042:	3708      	adds	r7, #8
    8044:	46bd      	mov	sp, r7
    8046:	bd80      	pop	{r7, pc}
    8048:	00007bad 	.word	0x00007bad

0000804c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    804c:	b580      	push	{r7, lr}
    804e:	b082      	sub	sp, #8
    8050:	af00      	add	r7, sp, #0
    8052:	4603      	mov	r3, r0
    8054:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8056:	79fb      	ldrb	r3, [r7, #7]
    8058:	4619      	mov	r1, r3
    805a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    805e:	4b06      	ldr	r3, [pc, #24]	; (8078 <_usbd_ep_is_ctrl+0x2c>)
    8060:	4798      	blx	r3
    8062:	4603      	mov	r3, r0
    8064:	2b11      	cmp	r3, #17
    8066:	bf0c      	ite	eq
    8068:	2301      	moveq	r3, #1
    806a:	2300      	movne	r3, #0
    806c:	b2db      	uxtb	r3, r3
}
    806e:	4618      	mov	r0, r3
    8070:	3708      	adds	r7, #8
    8072:	46bd      	mov	sp, r7
    8074:	bd80      	pop	{r7, pc}
    8076:	bf00      	nop
    8078:	00007c67 	.word	0x00007c67

0000807c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    807c:	b580      	push	{r7, lr}
    807e:	b082      	sub	sp, #8
    8080:	af00      	add	r7, sp, #0
    8082:	4603      	mov	r3, r0
    8084:	71fb      	strb	r3, [r7, #7]
    8086:	460b      	mov	r3, r1
    8088:	71bb      	strb	r3, [r7, #6]
    808a:	4613      	mov	r3, r2
    808c:	717b      	strb	r3, [r7, #5]
	if (st) {
    808e:	797b      	ldrb	r3, [r7, #5]
    8090:	2b00      	cmp	r3, #0
    8092:	d00b      	beq.n	80ac <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8094:	79bb      	ldrb	r3, [r7, #6]
    8096:	2210      	movs	r2, #16
    8098:	fa02 f303 	lsl.w	r3, r2, r3
    809c:	b2da      	uxtb	r2, r3
    809e:	79fb      	ldrb	r3, [r7, #7]
    80a0:	4619      	mov	r1, r3
    80a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80a6:	4b09      	ldr	r3, [pc, #36]	; (80cc <_usbd_ep_set_stall+0x50>)
    80a8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    80aa:	e00a      	b.n	80c2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    80ac:	79bb      	ldrb	r3, [r7, #6]
    80ae:	2210      	movs	r2, #16
    80b0:	fa02 f303 	lsl.w	r3, r2, r3
    80b4:	b2da      	uxtb	r2, r3
    80b6:	79fb      	ldrb	r3, [r7, #7]
    80b8:	4619      	mov	r1, r3
    80ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80be:	4b04      	ldr	r3, [pc, #16]	; (80d0 <_usbd_ep_set_stall+0x54>)
    80c0:	4798      	blx	r3
}
    80c2:	bf00      	nop
    80c4:	3708      	adds	r7, #8
    80c6:	46bd      	mov	sp, r7
    80c8:	bd80      	pop	{r7, pc}
    80ca:	bf00      	nop
    80cc:	00007ad9 	.word	0x00007ad9
    80d0:	00007b2d 	.word	0x00007b2d

000080d4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    80d4:	b580      	push	{r7, lr}
    80d6:	b084      	sub	sp, #16
    80d8:	af00      	add	r7, sp, #0
    80da:	4603      	mov	r3, r0
    80dc:	460a      	mov	r2, r1
    80de:	71fb      	strb	r3, [r7, #7]
    80e0:	4613      	mov	r3, r2
    80e2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    80e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    80e8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    80ea:	79fb      	ldrb	r3, [r7, #7]
    80ec:	4619      	mov	r1, r3
    80ee:	68f8      	ldr	r0, [r7, #12]
    80f0:	4b08      	ldr	r3, [pc, #32]	; (8114 <_usbd_ep_is_stalled+0x40>)
    80f2:	4798      	blx	r3
    80f4:	4603      	mov	r3, r0
    80f6:	4619      	mov	r1, r3
    80f8:	79bb      	ldrb	r3, [r7, #6]
    80fa:	2210      	movs	r2, #16
    80fc:	fa02 f303 	lsl.w	r3, r2, r3
    8100:	400b      	ands	r3, r1
    8102:	2b00      	cmp	r3, #0
    8104:	bf14      	ite	ne
    8106:	2301      	movne	r3, #1
    8108:	2300      	moveq	r3, #0
    810a:	b2db      	uxtb	r3, r3
}
    810c:	4618      	mov	r0, r3
    810e:	3710      	adds	r7, #16
    8110:	46bd      	mov	sp, r7
    8112:	bd80      	pop	{r7, pc}
    8114:	00007b05 	.word	0x00007b05

00008118 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8118:	b580      	push	{r7, lr}
    811a:	b084      	sub	sp, #16
    811c:	af00      	add	r7, sp, #0
    811e:	4603      	mov	r3, r0
    8120:	460a      	mov	r2, r1
    8122:	71fb      	strb	r3, [r7, #7]
    8124:	4613      	mov	r3, r2
    8126:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8128:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    812c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    812e:	79fb      	ldrb	r3, [r7, #7]
    8130:	4619      	mov	r1, r3
    8132:	68f8      	ldr	r0, [r7, #12]
    8134:	4b08      	ldr	r3, [pc, #32]	; (8158 <_usbd_ep_is_stall_sent+0x40>)
    8136:	4798      	blx	r3
    8138:	4603      	mov	r3, r0
    813a:	4619      	mov	r1, r3
    813c:	79bb      	ldrb	r3, [r7, #6]
    813e:	2220      	movs	r2, #32
    8140:	fa02 f303 	lsl.w	r3, r2, r3
    8144:	400b      	ands	r3, r1
    8146:	2b00      	cmp	r3, #0
    8148:	bf14      	ite	ne
    814a:	2301      	movne	r3, #1
    814c:	2300      	moveq	r3, #0
    814e:	b2db      	uxtb	r3, r3
}
    8150:	4618      	mov	r0, r3
    8152:	3710      	adds	r7, #16
    8154:	46bd      	mov	sp, r7
    8156:	bd80      	pop	{r7, pc}
    8158:	00007a85 	.word	0x00007a85

0000815c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    815c:	b580      	push	{r7, lr}
    815e:	b082      	sub	sp, #8
    8160:	af00      	add	r7, sp, #0
    8162:	4603      	mov	r3, r0
    8164:	460a      	mov	r2, r1
    8166:	71fb      	strb	r3, [r7, #7]
    8168:	4613      	mov	r3, r2
    816a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    816c:	79bb      	ldrb	r3, [r7, #6]
    816e:	2220      	movs	r2, #32
    8170:	409a      	lsls	r2, r3
    8172:	79fb      	ldrb	r3, [r7, #7]
    8174:	4611      	mov	r1, r2
    8176:	4618      	mov	r0, r3
    8178:	4b02      	ldr	r3, [pc, #8]	; (8184 <_usbd_ep_ack_stall+0x28>)
    817a:	4798      	blx	r3
}
    817c:	bf00      	nop
    817e:	3708      	adds	r7, #8
    8180:	46bd      	mov	sp, r7
    8182:	bd80      	pop	{r7, pc}
    8184:	00007fd5 	.word	0x00007fd5

00008188 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8188:	b580      	push	{r7, lr}
    818a:	b082      	sub	sp, #8
    818c:	af00      	add	r7, sp, #0
    818e:	4603      	mov	r3, r0
    8190:	71fb      	strb	r3, [r7, #7]
    8192:	460b      	mov	r3, r1
    8194:	71bb      	strb	r3, [r7, #6]
    8196:	4613      	mov	r3, r2
    8198:	717b      	strb	r3, [r7, #5]
	if (en) {
    819a:	797b      	ldrb	r3, [r7, #5]
    819c:	2b00      	cmp	r3, #0
    819e:	d008      	beq.n	81b2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    81a0:	79bb      	ldrb	r3, [r7, #6]
    81a2:	2220      	movs	r2, #32
    81a4:	409a      	lsls	r2, r3
    81a6:	79fb      	ldrb	r3, [r7, #7]
    81a8:	4611      	mov	r1, r2
    81aa:	4618      	mov	r0, r3
    81ac:	4b07      	ldr	r3, [pc, #28]	; (81cc <_usbd_ep_int_stall_en+0x44>)
    81ae:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    81b0:	e007      	b.n	81c2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    81b2:	79bb      	ldrb	r3, [r7, #6]
    81b4:	2220      	movs	r2, #32
    81b6:	409a      	lsls	r2, r3
    81b8:	79fb      	ldrb	r3, [r7, #7]
    81ba:	4611      	mov	r1, r2
    81bc:	4618      	mov	r0, r3
    81be:	4b04      	ldr	r3, [pc, #16]	; (81d0 <_usbd_ep_int_stall_en+0x48>)
    81c0:	4798      	blx	r3
}
    81c2:	bf00      	nop
    81c4:	3708      	adds	r7, #8
    81c6:	46bd      	mov	sp, r7
    81c8:	bd80      	pop	{r7, pc}
    81ca:	bf00      	nop
    81cc:	00007ffd 	.word	0x00007ffd
    81d0:	00008025 	.word	0x00008025

000081d4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    81d4:	b580      	push	{r7, lr}
    81d6:	b082      	sub	sp, #8
    81d8:	af00      	add	r7, sp, #0
    81da:	4603      	mov	r3, r0
    81dc:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    81de:	79fb      	ldrb	r3, [r7, #7]
    81e0:	4619      	mov	r1, r3
    81e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    81e6:	4b03      	ldr	r3, [pc, #12]	; (81f4 <_usbd_ep_stop_setup+0x20>)
    81e8:	4798      	blx	r3
}
    81ea:	bf00      	nop
    81ec:	3708      	adds	r7, #8
    81ee:	46bd      	mov	sp, r7
    81f0:	bd80      	pop	{r7, pc}
    81f2:	bf00      	nop
    81f4:	00007b59 	.word	0x00007b59

000081f8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    81f8:	b580      	push	{r7, lr}
    81fa:	b082      	sub	sp, #8
    81fc:	af00      	add	r7, sp, #0
    81fe:	4603      	mov	r3, r0
    8200:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8202:	79fb      	ldrb	r3, [r7, #7]
    8204:	2210      	movs	r2, #16
    8206:	4619      	mov	r1, r3
    8208:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    820c:	4b05      	ldr	r3, [pc, #20]	; (8224 <_usbd_ep_is_setup+0x2c>)
    820e:	4798      	blx	r3
    8210:	4603      	mov	r3, r0
    8212:	2b00      	cmp	r3, #0
    8214:	bf14      	ite	ne
    8216:	2301      	movne	r3, #1
    8218:	2300      	moveq	r3, #0
    821a:	b2db      	uxtb	r3, r3
}
    821c:	4618      	mov	r0, r3
    821e:	3708      	adds	r7, #8
    8220:	46bd      	mov	sp, r7
    8222:	bd80      	pop	{r7, pc}
    8224:	00007a4f 	.word	0x00007a4f

00008228 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8228:	b580      	push	{r7, lr}
    822a:	b082      	sub	sp, #8
    822c:	af00      	add	r7, sp, #0
    822e:	4603      	mov	r3, r0
    8230:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8232:	79fb      	ldrb	r3, [r7, #7]
    8234:	2110      	movs	r1, #16
    8236:	4618      	mov	r0, r3
    8238:	4b02      	ldr	r3, [pc, #8]	; (8244 <_usbd_ep_ack_setup+0x1c>)
    823a:	4798      	blx	r3
}
    823c:	bf00      	nop
    823e:	3708      	adds	r7, #8
    8240:	46bd      	mov	sp, r7
    8242:	bd80      	pop	{r7, pc}
    8244:	00007fd5 	.word	0x00007fd5

00008248 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8248:	b580      	push	{r7, lr}
    824a:	b082      	sub	sp, #8
    824c:	af00      	add	r7, sp, #0
    824e:	4603      	mov	r3, r0
    8250:	71fb      	strb	r3, [r7, #7]
    8252:	460b      	mov	r3, r1
    8254:	71bb      	strb	r3, [r7, #6]
    8256:	4613      	mov	r3, r2
    8258:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    825a:	797b      	ldrb	r3, [r7, #5]
    825c:	2b00      	cmp	r3, #0
    825e:	d00b      	beq.n	8278 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8260:	79bb      	ldrb	r3, [r7, #6]
    8262:	2201      	movs	r2, #1
    8264:	fa02 f303 	lsl.w	r3, r2, r3
    8268:	b2da      	uxtb	r2, r3
    826a:	79fb      	ldrb	r3, [r7, #7]
    826c:	4619      	mov	r1, r3
    826e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8272:	4b09      	ldr	r3, [pc, #36]	; (8298 <_usbd_ep_set_toggle+0x50>)
    8274:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8276:	e00a      	b.n	828e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8278:	79bb      	ldrb	r3, [r7, #6]
    827a:	2201      	movs	r2, #1
    827c:	fa02 f303 	lsl.w	r3, r2, r3
    8280:	b2da      	uxtb	r2, r3
    8282:	79fb      	ldrb	r3, [r7, #7]
    8284:	4619      	mov	r1, r3
    8286:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    828a:	4b04      	ldr	r3, [pc, #16]	; (829c <_usbd_ep_set_toggle+0x54>)
    828c:	4798      	blx	r3
}
    828e:	bf00      	nop
    8290:	3708      	adds	r7, #8
    8292:	46bd      	mov	sp, r7
    8294:	bd80      	pop	{r7, pc}
    8296:	bf00      	nop
    8298:	00007ad9 	.word	0x00007ad9
    829c:	00007b2d 	.word	0x00007b2d

000082a0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	b082      	sub	sp, #8
    82a4:	af00      	add	r7, sp, #0
    82a6:	4603      	mov	r3, r0
    82a8:	460a      	mov	r2, r1
    82aa:	71fb      	strb	r3, [r7, #7]
    82ac:	4613      	mov	r3, r2
    82ae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    82b0:	79bb      	ldrb	r3, [r7, #6]
    82b2:	2201      	movs	r2, #1
    82b4:	409a      	lsls	r2, r3
    82b6:	79fb      	ldrb	r3, [r7, #7]
    82b8:	4611      	mov	r1, r2
    82ba:	4618      	mov	r0, r3
    82bc:	4b02      	ldr	r3, [pc, #8]	; (82c8 <_usbd_ep_ack_io_cpt+0x28>)
    82be:	4798      	blx	r3
}
    82c0:	bf00      	nop
    82c2:	3708      	adds	r7, #8
    82c4:	46bd      	mov	sp, r7
    82c6:	bd80      	pop	{r7, pc}
    82c8:	00007fd5 	.word	0x00007fd5

000082cc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    82cc:	b480      	push	{r7}
    82ce:	b085      	sub	sp, #20
    82d0:	af00      	add	r7, sp, #0
    82d2:	4603      	mov	r3, r0
    82d4:	603a      	str	r2, [r7, #0]
    82d6:	71fb      	strb	r3, [r7, #7]
    82d8:	460b      	mov	r3, r1
    82da:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    82dc:	79fa      	ldrb	r2, [r7, #7]
    82de:	79bb      	ldrb	r3, [r7, #6]
    82e0:	0052      	lsls	r2, r2, #1
    82e2:	4413      	add	r3, r2
    82e4:	011b      	lsls	r3, r3, #4
    82e6:	4a06      	ldr	r2, [pc, #24]	; (8300 <_usbd_ep_set_buf+0x34>)
    82e8:	4413      	add	r3, r2
    82ea:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    82ec:	68fb      	ldr	r3, [r7, #12]
    82ee:	683a      	ldr	r2, [r7, #0]
    82f0:	601a      	str	r2, [r3, #0]
}
    82f2:	bf00      	nop
    82f4:	3714      	adds	r7, #20
    82f6:	46bd      	mov	sp, r7
    82f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    82fc:	4770      	bx	lr
    82fe:	bf00      	nop
    8300:	20000a00 	.word	0x20000a00

00008304 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8304:	b480      	push	{r7}
    8306:	b085      	sub	sp, #20
    8308:	af00      	add	r7, sp, #0
    830a:	4603      	mov	r3, r0
    830c:	71fb      	strb	r3, [r7, #7]
    830e:	460b      	mov	r3, r1
    8310:	71bb      	strb	r3, [r7, #6]
    8312:	4613      	mov	r3, r2
    8314:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8316:	79fa      	ldrb	r2, [r7, #7]
    8318:	79bb      	ldrb	r3, [r7, #6]
    831a:	0052      	lsls	r2, r2, #1
    831c:	4413      	add	r3, r2
    831e:	011b      	lsls	r3, r3, #4
    8320:	4a08      	ldr	r2, [pc, #32]	; (8344 <_usbd_ep_set_in_count+0x40>)
    8322:	4413      	add	r3, r2
    8324:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8326:	88bb      	ldrh	r3, [r7, #4]
    8328:	f3c3 030d 	ubfx	r3, r3, #0, #14
    832c:	b299      	uxth	r1, r3
    832e:	68fa      	ldr	r2, [r7, #12]
    8330:	6853      	ldr	r3, [r2, #4]
    8332:	f361 339b 	bfi	r3, r1, #14, #14
    8336:	6053      	str	r3, [r2, #4]
}
    8338:	bf00      	nop
    833a:	3714      	adds	r7, #20
    833c:	46bd      	mov	sp, r7
    833e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8342:	4770      	bx	lr
    8344:	20000a00 	.word	0x20000a00

00008348 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8348:	b480      	push	{r7}
    834a:	b085      	sub	sp, #20
    834c:	af00      	add	r7, sp, #0
    834e:	4603      	mov	r3, r0
    8350:	71fb      	strb	r3, [r7, #7]
    8352:	460b      	mov	r3, r1
    8354:	71bb      	strb	r3, [r7, #6]
    8356:	4613      	mov	r3, r2
    8358:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    835a:	79fa      	ldrb	r2, [r7, #7]
    835c:	79bb      	ldrb	r3, [r7, #6]
    835e:	0052      	lsls	r2, r2, #1
    8360:	4413      	add	r3, r2
    8362:	011b      	lsls	r3, r3, #4
    8364:	4a08      	ldr	r2, [pc, #32]	; (8388 <_usbd_ep_set_in_size+0x40>)
    8366:	4413      	add	r3, r2
    8368:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    836a:	88bb      	ldrh	r3, [r7, #4]
    836c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8370:	b299      	uxth	r1, r3
    8372:	68fa      	ldr	r2, [r7, #12]
    8374:	6853      	ldr	r3, [r2, #4]
    8376:	f361 030d 	bfi	r3, r1, #0, #14
    837a:	6053      	str	r3, [r2, #4]
}
    837c:	bf00      	nop
    837e:	3714      	adds	r7, #20
    8380:	46bd      	mov	sp, r7
    8382:	f85d 7b04 	ldr.w	r7, [sp], #4
    8386:	4770      	bx	lr
    8388:	20000a00 	.word	0x20000a00

0000838c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    838c:	b480      	push	{r7}
    838e:	b085      	sub	sp, #20
    8390:	af00      	add	r7, sp, #0
    8392:	4603      	mov	r3, r0
    8394:	71fb      	strb	r3, [r7, #7]
    8396:	460b      	mov	r3, r1
    8398:	71bb      	strb	r3, [r7, #6]
    839a:	4613      	mov	r3, r2
    839c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    839e:	79fa      	ldrb	r2, [r7, #7]
    83a0:	79bb      	ldrb	r3, [r7, #6]
    83a2:	0052      	lsls	r2, r2, #1
    83a4:	4413      	add	r3, r2
    83a6:	011b      	lsls	r3, r3, #4
    83a8:	4a08      	ldr	r2, [pc, #32]	; (83cc <_usbd_ep_set_out_count+0x40>)
    83aa:	4413      	add	r3, r2
    83ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    83ae:	88bb      	ldrh	r3, [r7, #4]
    83b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    83b4:	b299      	uxth	r1, r3
    83b6:	68fa      	ldr	r2, [r7, #12]
    83b8:	6853      	ldr	r3, [r2, #4]
    83ba:	f361 030d 	bfi	r3, r1, #0, #14
    83be:	6053      	str	r3, [r2, #4]
}
    83c0:	bf00      	nop
    83c2:	3714      	adds	r7, #20
    83c4:	46bd      	mov	sp, r7
    83c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ca:	4770      	bx	lr
    83cc:	20000a00 	.word	0x20000a00

000083d0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    83d0:	b480      	push	{r7}
    83d2:	b085      	sub	sp, #20
    83d4:	af00      	add	r7, sp, #0
    83d6:	4603      	mov	r3, r0
    83d8:	71fb      	strb	r3, [r7, #7]
    83da:	460b      	mov	r3, r1
    83dc:	71bb      	strb	r3, [r7, #6]
    83de:	4613      	mov	r3, r2
    83e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    83e2:	79fa      	ldrb	r2, [r7, #7]
    83e4:	79bb      	ldrb	r3, [r7, #6]
    83e6:	0052      	lsls	r2, r2, #1
    83e8:	4413      	add	r3, r2
    83ea:	011b      	lsls	r3, r3, #4
    83ec:	4a08      	ldr	r2, [pc, #32]	; (8410 <_usbd_ep_set_out_size+0x40>)
    83ee:	4413      	add	r3, r2
    83f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    83f2:	88bb      	ldrh	r3, [r7, #4]
    83f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    83f8:	b299      	uxth	r1, r3
    83fa:	68fa      	ldr	r2, [r7, #12]
    83fc:	6853      	ldr	r3, [r2, #4]
    83fe:	f361 339b 	bfi	r3, r1, #14, #14
    8402:	6053      	str	r3, [r2, #4]
}
    8404:	bf00      	nop
    8406:	3714      	adds	r7, #20
    8408:	46bd      	mov	sp, r7
    840a:	f85d 7b04 	ldr.w	r7, [sp], #4
    840e:	4770      	bx	lr
    8410:	20000a00 	.word	0x20000a00

00008414 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8414:	b580      	push	{r7, lr}
    8416:	b084      	sub	sp, #16
    8418:	af00      	add	r7, sp, #0
    841a:	60ba      	str	r2, [r7, #8]
    841c:	607b      	str	r3, [r7, #4]
    841e:	4603      	mov	r3, r0
    8420:	73fb      	strb	r3, [r7, #15]
    8422:	460b      	mov	r3, r1
    8424:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8426:	68bb      	ldr	r3, [r7, #8]
    8428:	b29a      	uxth	r2, r3
    842a:	7bb9      	ldrb	r1, [r7, #14]
    842c:	7bfb      	ldrb	r3, [r7, #15]
    842e:	4618      	mov	r0, r3
    8430:	4b06      	ldr	r3, [pc, #24]	; (844c <_usbd_ep_set_in_trans+0x38>)
    8432:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8434:	687b      	ldr	r3, [r7, #4]
    8436:	b29a      	uxth	r2, r3
    8438:	7bb9      	ldrb	r1, [r7, #14]
    843a:	7bfb      	ldrb	r3, [r7, #15]
    843c:	4618      	mov	r0, r3
    843e:	4b04      	ldr	r3, [pc, #16]	; (8450 <_usbd_ep_set_in_trans+0x3c>)
    8440:	4798      	blx	r3
}
    8442:	bf00      	nop
    8444:	3710      	adds	r7, #16
    8446:	46bd      	mov	sp, r7
    8448:	bd80      	pop	{r7, pc}
    844a:	bf00      	nop
    844c:	00008349 	.word	0x00008349
    8450:	00008305 	.word	0x00008305

00008454 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8454:	b580      	push	{r7, lr}
    8456:	b084      	sub	sp, #16
    8458:	af00      	add	r7, sp, #0
    845a:	60ba      	str	r2, [r7, #8]
    845c:	607b      	str	r3, [r7, #4]
    845e:	4603      	mov	r3, r0
    8460:	73fb      	strb	r3, [r7, #15]
    8462:	460b      	mov	r3, r1
    8464:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8466:	68bb      	ldr	r3, [r7, #8]
    8468:	b29a      	uxth	r2, r3
    846a:	7bb9      	ldrb	r1, [r7, #14]
    846c:	7bfb      	ldrb	r3, [r7, #15]
    846e:	4618      	mov	r0, r3
    8470:	4b06      	ldr	r3, [pc, #24]	; (848c <_usbd_ep_set_out_trans+0x38>)
    8472:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	b29a      	uxth	r2, r3
    8478:	7bb9      	ldrb	r1, [r7, #14]
    847a:	7bfb      	ldrb	r3, [r7, #15]
    847c:	4618      	mov	r0, r3
    847e:	4b04      	ldr	r3, [pc, #16]	; (8490 <_usbd_ep_set_out_trans+0x3c>)
    8480:	4798      	blx	r3
}
    8482:	bf00      	nop
    8484:	3710      	adds	r7, #16
    8486:	46bd      	mov	sp, r7
    8488:	bd80      	pop	{r7, pc}
    848a:	bf00      	nop
    848c:	000083d1 	.word	0x000083d1
    8490:	0000838d 	.word	0x0000838d

00008494 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8494:	b480      	push	{r7}
    8496:	b085      	sub	sp, #20
    8498:	af00      	add	r7, sp, #0
    849a:	4603      	mov	r3, r0
    849c:	460a      	mov	r2, r1
    849e:	71fb      	strb	r3, [r7, #7]
    84a0:	4613      	mov	r3, r2
    84a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    84a4:	79fa      	ldrb	r2, [r7, #7]
    84a6:	79bb      	ldrb	r3, [r7, #6]
    84a8:	0052      	lsls	r2, r2, #1
    84aa:	4413      	add	r3, r2
    84ac:	011b      	lsls	r3, r3, #4
    84ae:	4a06      	ldr	r2, [pc, #24]	; (84c8 <_usbd_ep_clear_bank_status+0x34>)
    84b0:	4413      	add	r3, r2
    84b2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    84b4:	68fb      	ldr	r3, [r7, #12]
    84b6:	2200      	movs	r2, #0
    84b8:	729a      	strb	r2, [r3, #10]
}
    84ba:	bf00      	nop
    84bc:	3714      	adds	r7, #20
    84be:	46bd      	mov	sp, r7
    84c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c4:	4770      	bx	lr
    84c6:	bf00      	nop
    84c8:	20000a00 	.word	0x20000a00

000084cc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    84cc:	b580      	push	{r7, lr}
    84ce:	b082      	sub	sp, #8
    84d0:	af00      	add	r7, sp, #0
    84d2:	4603      	mov	r3, r0
    84d4:	71fb      	strb	r3, [r7, #7]
    84d6:	460b      	mov	r3, r1
    84d8:	71bb      	strb	r3, [r7, #6]
    84da:	4613      	mov	r3, r2
    84dc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    84de:	797b      	ldrb	r3, [r7, #5]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d00b      	beq.n	84fc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    84e4:	79bb      	ldrb	r3, [r7, #6]
    84e6:	2240      	movs	r2, #64	; 0x40
    84e8:	fa02 f303 	lsl.w	r3, r2, r3
    84ec:	b2da      	uxtb	r2, r3
    84ee:	79fb      	ldrb	r3, [r7, #7]
    84f0:	4619      	mov	r1, r3
    84f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84f6:	4b09      	ldr	r3, [pc, #36]	; (851c <_usbd_ep_set_in_rdy+0x50>)
    84f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    84fa:	e00a      	b.n	8512 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    84fc:	79bb      	ldrb	r3, [r7, #6]
    84fe:	2240      	movs	r2, #64	; 0x40
    8500:	fa02 f303 	lsl.w	r3, r2, r3
    8504:	b2da      	uxtb	r2, r3
    8506:	79fb      	ldrb	r3, [r7, #7]
    8508:	4619      	mov	r1, r3
    850a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    850e:	4b04      	ldr	r3, [pc, #16]	; (8520 <_usbd_ep_set_in_rdy+0x54>)
    8510:	4798      	blx	r3
}
    8512:	bf00      	nop
    8514:	3708      	adds	r7, #8
    8516:	46bd      	mov	sp, r7
    8518:	bd80      	pop	{r7, pc}
    851a:	bf00      	nop
    851c:	00007ad9 	.word	0x00007ad9
    8520:	00007b2d 	.word	0x00007b2d

00008524 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8524:	b580      	push	{r7, lr}
    8526:	b082      	sub	sp, #8
    8528:	af00      	add	r7, sp, #0
    852a:	4603      	mov	r3, r0
    852c:	71fb      	strb	r3, [r7, #7]
    852e:	460b      	mov	r3, r1
    8530:	71bb      	strb	r3, [r7, #6]
    8532:	4613      	mov	r3, r2
    8534:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8536:	797b      	ldrb	r3, [r7, #5]
    8538:	2b00      	cmp	r3, #0
    853a:	d00b      	beq.n	8554 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    853c:	79bb      	ldrb	r3, [r7, #6]
    853e:	2240      	movs	r2, #64	; 0x40
    8540:	fa02 f303 	lsl.w	r3, r2, r3
    8544:	b2da      	uxtb	r2, r3
    8546:	79fb      	ldrb	r3, [r7, #7]
    8548:	4619      	mov	r1, r3
    854a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    854e:	4b09      	ldr	r3, [pc, #36]	; (8574 <_usbd_ep_set_out_rdy+0x50>)
    8550:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8552:	e00a      	b.n	856a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8554:	79bb      	ldrb	r3, [r7, #6]
    8556:	2240      	movs	r2, #64	; 0x40
    8558:	fa02 f303 	lsl.w	r3, r2, r3
    855c:	b2da      	uxtb	r2, r3
    855e:	79fb      	ldrb	r3, [r7, #7]
    8560:	4619      	mov	r1, r3
    8562:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8566:	4b04      	ldr	r3, [pc, #16]	; (8578 <_usbd_ep_set_out_rdy+0x54>)
    8568:	4798      	blx	r3
}
    856a:	bf00      	nop
    856c:	3708      	adds	r7, #8
    856e:	46bd      	mov	sp, r7
    8570:	bd80      	pop	{r7, pc}
    8572:	bf00      	nop
    8574:	00007b2d 	.word	0x00007b2d
    8578:	00007ad9 	.word	0x00007ad9

0000857c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    857c:	b480      	push	{r7}
    857e:	b083      	sub	sp, #12
    8580:	af00      	add	r7, sp, #0
    8582:	4603      	mov	r3, r0
    8584:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8586:	88fb      	ldrh	r3, [r7, #6]
    8588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    858c:	d820      	bhi.n	85d0 <_usbd_ep_pcksize_size+0x54>
    858e:	88fb      	ldrh	r3, [r7, #6]
    8590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8594:	d81a      	bhi.n	85cc <_usbd_ep_pcksize_size+0x50>
    8596:	88fb      	ldrh	r3, [r7, #6]
    8598:	2b80      	cmp	r3, #128	; 0x80
    859a:	d815      	bhi.n	85c8 <_usbd_ep_pcksize_size+0x4c>
    859c:	88fb      	ldrh	r3, [r7, #6]
    859e:	2b40      	cmp	r3, #64	; 0x40
    85a0:	d810      	bhi.n	85c4 <_usbd_ep_pcksize_size+0x48>
    85a2:	88fb      	ldrh	r3, [r7, #6]
    85a4:	2b20      	cmp	r3, #32
    85a6:	d80b      	bhi.n	85c0 <_usbd_ep_pcksize_size+0x44>
    85a8:	88fb      	ldrh	r3, [r7, #6]
    85aa:	2b10      	cmp	r3, #16
    85ac:	d806      	bhi.n	85bc <_usbd_ep_pcksize_size+0x40>
    85ae:	88fb      	ldrh	r3, [r7, #6]
    85b0:	2b08      	cmp	r3, #8
    85b2:	bf8c      	ite	hi
    85b4:	2301      	movhi	r3, #1
    85b6:	2300      	movls	r3, #0
    85b8:	b2db      	uxtb	r3, r3
    85ba:	e00a      	b.n	85d2 <_usbd_ep_pcksize_size+0x56>
    85bc:	2302      	movs	r3, #2
    85be:	e008      	b.n	85d2 <_usbd_ep_pcksize_size+0x56>
    85c0:	2303      	movs	r3, #3
    85c2:	e006      	b.n	85d2 <_usbd_ep_pcksize_size+0x56>
    85c4:	2304      	movs	r3, #4
    85c6:	e004      	b.n	85d2 <_usbd_ep_pcksize_size+0x56>
    85c8:	2305      	movs	r3, #5
    85ca:	e002      	b.n	85d2 <_usbd_ep_pcksize_size+0x56>
    85cc:	2306      	movs	r3, #6
    85ce:	e000      	b.n	85d2 <_usbd_ep_pcksize_size+0x56>
    85d0:	2307      	movs	r3, #7
}
    85d2:	4618      	mov	r0, r3
    85d4:	370c      	adds	r7, #12
    85d6:	46bd      	mov	sp, r7
    85d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85dc:	4770      	bx	lr
	...

000085e0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    85e0:	b480      	push	{r7}
    85e2:	b085      	sub	sp, #20
    85e4:	af00      	add	r7, sp, #0
    85e6:	4603      	mov	r3, r0
    85e8:	460a      	mov	r2, r1
    85ea:	71fb      	strb	r3, [r7, #7]
    85ec:	4613      	mov	r3, r2
    85ee:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    85f0:	79fb      	ldrb	r3, [r7, #7]
    85f2:	2b00      	cmp	r3, #0
    85f4:	d008      	beq.n	8608 <_usb_d_dev_ept+0x28>
    85f6:	79bb      	ldrb	r3, [r7, #6]
    85f8:	2b00      	cmp	r3, #0
    85fa:	d003      	beq.n	8604 <_usb_d_dev_ept+0x24>
    85fc:	79fb      	ldrb	r3, [r7, #7]
    85fe:	3304      	adds	r3, #4
    8600:	b2db      	uxtb	r3, r3
    8602:	e002      	b.n	860a <_usb_d_dev_ept+0x2a>
    8604:	79fb      	ldrb	r3, [r7, #7]
    8606:	e000      	b.n	860a <_usb_d_dev_ept+0x2a>
    8608:	2300      	movs	r3, #0
    860a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    860c:	7bfa      	ldrb	r2, [r7, #15]
    860e:	4613      	mov	r3, r2
    8610:	009b      	lsls	r3, r3, #2
    8612:	4413      	add	r3, r2
    8614:	009b      	lsls	r3, r3, #2
    8616:	3310      	adds	r3, #16
    8618:	4a04      	ldr	r2, [pc, #16]	; (862c <_usb_d_dev_ept+0x4c>)
    861a:	4413      	add	r3, r2
    861c:	3304      	adds	r3, #4
}
    861e:	4618      	mov	r0, r3
    8620:	3714      	adds	r7, #20
    8622:	46bd      	mov	sp, r7
    8624:	f85d 7b04 	ldr.w	r7, [sp], #4
    8628:	4770      	bx	lr
    862a:	bf00      	nop
    862c:	20000938 	.word	0x20000938

00008630 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8630:	b580      	push	{r7, lr}
    8632:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8634:	2104      	movs	r1, #4
    8636:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    863a:	4b03      	ldr	r3, [pc, #12]	; (8648 <_usb_d_dev_sof+0x18>)
    863c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    863e:	4b03      	ldr	r3, [pc, #12]	; (864c <_usb_d_dev_sof+0x1c>)
    8640:	681b      	ldr	r3, [r3, #0]
    8642:	4798      	blx	r3
}
    8644:	bf00      	nop
    8646:	bd80      	pop	{r7, pc}
    8648:	00007ca7 	.word	0x00007ca7
    864c:	20000938 	.word	0x20000938

00008650 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8650:	b580      	push	{r7, lr}
    8652:	b084      	sub	sp, #16
    8654:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8656:	2300      	movs	r3, #0
    8658:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    865a:	f240 2101 	movw	r1, #513	; 0x201
    865e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8662:	4b1a      	ldr	r3, [pc, #104]	; (86cc <_usb_d_dev_lpmsusp+0x7c>)
    8664:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8666:	f240 2101 	movw	r1, #513	; 0x201
    866a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    866e:	4b18      	ldr	r3, [pc, #96]	; (86d0 <_usb_d_dev_lpmsusp+0x80>)
    8670:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8672:	2170      	movs	r1, #112	; 0x70
    8674:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8678:	4b16      	ldr	r3, [pc, #88]	; (86d4 <_usb_d_dev_lpmsusp+0x84>)
    867a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    867c:	2300      	movs	r3, #0
    867e:	73fb      	strb	r3, [r7, #15]
    8680:	e018      	b.n	86b4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8682:	7bfb      	ldrb	r3, [r7, #15]
    8684:	015b      	lsls	r3, r3, #5
    8686:	4a14      	ldr	r2, [pc, #80]	; (86d8 <_usb_d_dev_lpmsusp+0x88>)
    8688:	4413      	add	r3, r2
    868a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	891b      	ldrh	r3, [r3, #8]
    8690:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8694:	b2db      	uxtb	r3, r3
    8696:	2b03      	cmp	r3, #3
    8698:	d109      	bne.n	86ae <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    869a:	687b      	ldr	r3, [r7, #4]
    869c:	891b      	ldrh	r3, [r3, #8]
    869e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    86a2:	b29b      	uxth	r3, r3
    86a4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    86a6:	687b      	ldr	r3, [r7, #4]
    86a8:	2200      	movs	r2, #0
    86aa:	811a      	strh	r2, [r3, #8]
			break;
    86ac:	e005      	b.n	86ba <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    86ae:	7bfb      	ldrb	r3, [r7, #15]
    86b0:	3301      	adds	r3, #1
    86b2:	73fb      	strb	r3, [r7, #15]
    86b4:	7bfb      	ldrb	r3, [r7, #15]
    86b6:	2b03      	cmp	r3, #3
    86b8:	d9e3      	bls.n	8682 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    86ba:	4b08      	ldr	r3, [pc, #32]	; (86dc <_usb_d_dev_lpmsusp+0x8c>)
    86bc:	685b      	ldr	r3, [r3, #4]
    86be:	68b9      	ldr	r1, [r7, #8]
    86c0:	2003      	movs	r0, #3
    86c2:	4798      	blx	r3
}
    86c4:	bf00      	nop
    86c6:	3710      	adds	r7, #16
    86c8:	46bd      	mov	sp, r7
    86ca:	bd80      	pop	{r7, pc}
    86cc:	00007ca7 	.word	0x00007ca7
    86d0:	00007cfd 	.word	0x00007cfd
    86d4:	00007cc5 	.word	0x00007cc5
    86d8:	20000a00 	.word	0x20000a00
    86dc:	20000938 	.word	0x20000938

000086e0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    86e4:	2180      	movs	r1, #128	; 0x80
    86e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86ea:	4b04      	ldr	r3, [pc, #16]	; (86fc <_usb_d_dev_ramerr+0x1c>)
    86ec:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    86ee:	4b04      	ldr	r3, [pc, #16]	; (8700 <_usb_d_dev_ramerr+0x20>)
    86f0:	685b      	ldr	r3, [r3, #4]
    86f2:	2100      	movs	r1, #0
    86f4:	2005      	movs	r0, #5
    86f6:	4798      	blx	r3
}
    86f8:	bf00      	nop
    86fa:	bd80      	pop	{r7, pc}
    86fc:	00007ca7 	.word	0x00007ca7
    8700:	20000938 	.word	0x20000938

00008704 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8704:	b580      	push	{r7, lr}
    8706:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8708:	2170      	movs	r1, #112	; 0x70
    870a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    870e:	4b0b      	ldr	r3, [pc, #44]	; (873c <_usb_d_dev_wakeup+0x38>)
    8710:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8712:	2170      	movs	r1, #112	; 0x70
    8714:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8718:	4b09      	ldr	r3, [pc, #36]	; (8740 <_usb_d_dev_wakeup+0x3c>)
    871a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    871c:	f240 2101 	movw	r1, #513	; 0x201
    8720:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8724:	4b07      	ldr	r3, [pc, #28]	; (8744 <_usb_d_dev_wakeup+0x40>)
    8726:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8728:	2000      	movs	r0, #0
    872a:	4b07      	ldr	r3, [pc, #28]	; (8748 <_usb_d_dev_wakeup+0x44>)
    872c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    872e:	4b07      	ldr	r3, [pc, #28]	; (874c <_usb_d_dev_wakeup+0x48>)
    8730:	685b      	ldr	r3, [r3, #4]
    8732:	2100      	movs	r1, #0
    8734:	2002      	movs	r0, #2
    8736:	4798      	blx	r3
}
    8738:	bf00      	nop
    873a:	bd80      	pop	{r7, pc}
    873c:	00007ca7 	.word	0x00007ca7
    8740:	00007cfd 	.word	0x00007cfd
    8744:	00007cc5 	.word	0x00007cc5
    8748:	00007fa5 	.word	0x00007fa5
    874c:	20000938 	.word	0x20000938

00008750 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8750:	b580      	push	{r7, lr}
    8752:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8754:	2200      	movs	r2, #0
    8756:	2100      	movs	r1, #0
    8758:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    875c:	4b0d      	ldr	r3, [pc, #52]	; (8794 <_usb_d_dev_reset+0x44>)
    875e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8760:	2108      	movs	r1, #8
    8762:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8766:	4b0c      	ldr	r3, [pc, #48]	; (8798 <_usb_d_dev_reset+0x48>)
    8768:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    876a:	2170      	movs	r1, #112	; 0x70
    876c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8770:	4b0a      	ldr	r3, [pc, #40]	; (879c <_usb_d_dev_reset+0x4c>)
    8772:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8774:	f240 2101 	movw	r1, #513	; 0x201
    8778:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    877c:	4b08      	ldr	r3, [pc, #32]	; (87a0 <_usb_d_dev_reset+0x50>)
    877e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8780:	4b08      	ldr	r3, [pc, #32]	; (87a4 <_usb_d_dev_reset+0x54>)
    8782:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8784:	4b08      	ldr	r3, [pc, #32]	; (87a8 <_usb_d_dev_reset+0x58>)
    8786:	685b      	ldr	r3, [r3, #4]
    8788:	2100      	movs	r1, #0
    878a:	2001      	movs	r0, #1
    878c:	4798      	blx	r3
}
    878e:	bf00      	nop
    8790:	bd80      	pop	{r7, pc}
    8792:	bf00      	nop
    8794:	00007c3d 	.word	0x00007c3d
    8798:	00007ca7 	.word	0x00007ca7
    879c:	00007cfd 	.word	0x00007cfd
    87a0:	00007cc5 	.word	0x00007cc5
    87a4:	0000930d 	.word	0x0000930d
    87a8:	20000938 	.word	0x20000938

000087ac <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    87b0:	f240 2101 	movw	r1, #513	; 0x201
    87b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87b8:	4b09      	ldr	r3, [pc, #36]	; (87e0 <_usb_d_dev_suspend+0x34>)
    87ba:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    87bc:	f240 2101 	movw	r1, #513	; 0x201
    87c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87c4:	4b07      	ldr	r3, [pc, #28]	; (87e4 <_usb_d_dev_suspend+0x38>)
    87c6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    87c8:	2170      	movs	r1, #112	; 0x70
    87ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ce:	4b06      	ldr	r3, [pc, #24]	; (87e8 <_usb_d_dev_suspend+0x3c>)
    87d0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    87d2:	4b06      	ldr	r3, [pc, #24]	; (87ec <_usb_d_dev_suspend+0x40>)
    87d4:	685b      	ldr	r3, [r3, #4]
    87d6:	2100      	movs	r1, #0
    87d8:	2004      	movs	r0, #4
    87da:	4798      	blx	r3
}
    87dc:	bf00      	nop
    87de:	bd80      	pop	{r7, pc}
    87e0:	00007ca7 	.word	0x00007ca7
    87e4:	00007cfd 	.word	0x00007cfd
    87e8:	00007cc5 	.word	0x00007cc5
    87ec:	20000938 	.word	0x20000938

000087f0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	b082      	sub	sp, #8
    87f4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    87f6:	2301      	movs	r3, #1
    87f8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    87fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87fe:	4b22      	ldr	r3, [pc, #136]	; (8888 <_usb_d_dev_handle_nep+0x98>)
    8800:	4798      	blx	r3
    8802:	4603      	mov	r3, r0
    8804:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8806:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    880a:	4b20      	ldr	r3, [pc, #128]	; (888c <_usb_d_dev_handle_nep+0x9c>)
    880c:	4798      	blx	r3
    880e:	4603      	mov	r3, r0
    8810:	461a      	mov	r2, r3
    8812:	88bb      	ldrh	r3, [r7, #4]
    8814:	4013      	ands	r3, r2
    8816:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8818:	88bb      	ldrh	r3, [r7, #4]
    881a:	f003 0304 	and.w	r3, r3, #4
    881e:	2b00      	cmp	r3, #0
    8820:	d003      	beq.n	882a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8822:	4b1b      	ldr	r3, [pc, #108]	; (8890 <_usb_d_dev_handle_nep+0xa0>)
    8824:	4798      	blx	r3
		return true;
    8826:	2301      	movs	r3, #1
    8828:	e02a      	b.n	8880 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    882a:	88bb      	ldrh	r3, [r7, #4]
    882c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8830:	2b00      	cmp	r3, #0
    8832:	d002      	beq.n	883a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8834:	4b17      	ldr	r3, [pc, #92]	; (8894 <_usb_d_dev_handle_nep+0xa4>)
    8836:	4798      	blx	r3
    8838:	e021      	b.n	887e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    883a:	88bb      	ldrh	r3, [r7, #4]
    883c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8840:	2b00      	cmp	r3, #0
    8842:	d002      	beq.n	884a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8844:	4b14      	ldr	r3, [pc, #80]	; (8898 <_usb_d_dev_handle_nep+0xa8>)
    8846:	4798      	blx	r3
    8848:	e019      	b.n	887e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    884a:	88bb      	ldrh	r3, [r7, #4]
    884c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8850:	2b00      	cmp	r3, #0
    8852:	d002      	beq.n	885a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8854:	4b11      	ldr	r3, [pc, #68]	; (889c <_usb_d_dev_handle_nep+0xac>)
    8856:	4798      	blx	r3
    8858:	e011      	b.n	887e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    885a:	88bb      	ldrh	r3, [r7, #4]
    885c:	f003 0308 	and.w	r3, r3, #8
    8860:	2b00      	cmp	r3, #0
    8862:	d002      	beq.n	886a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8864:	4b0e      	ldr	r3, [pc, #56]	; (88a0 <_usb_d_dev_handle_nep+0xb0>)
    8866:	4798      	blx	r3
    8868:	e009      	b.n	887e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    886a:	88bb      	ldrh	r3, [r7, #4]
    886c:	f003 0301 	and.w	r3, r3, #1
    8870:	2b00      	cmp	r3, #0
    8872:	d002      	beq.n	887a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8874:	4b0b      	ldr	r3, [pc, #44]	; (88a4 <_usb_d_dev_handle_nep+0xb4>)
    8876:	4798      	blx	r3
    8878:	e001      	b.n	887e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    887a:	2300      	movs	r3, #0
    887c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    887e:	79fb      	ldrb	r3, [r7, #7]
}
    8880:	4618      	mov	r0, r3
    8882:	3708      	adds	r7, #8
    8884:	46bd      	mov	sp, r7
    8886:	bd80      	pop	{r7, pc}
    8888:	00007c8d 	.word	0x00007c8d
    888c:	00007ce3 	.word	0x00007ce3
    8890:	00008631 	.word	0x00008631
    8894:	00008651 	.word	0x00008651
    8898:	000086e1 	.word	0x000086e1
    889c:	00008705 	.word	0x00008705
    88a0:	00008751 	.word	0x00008751
    88a4:	000087ad 	.word	0x000087ad

000088a8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    88a8:	b590      	push	{r4, r7, lr}
    88aa:	b089      	sub	sp, #36	; 0x24
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    88b0:	460b      	mov	r3, r1
    88b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    88b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88b8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	7c9b      	ldrb	r3, [r3, #18]
    88be:	f003 030f 	and.w	r3, r3, #15
    88c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    88c4:	7dfb      	ldrb	r3, [r7, #23]
    88c6:	015b      	lsls	r3, r3, #5
    88c8:	4a73      	ldr	r2, [pc, #460]	; (8a98 <_usb_d_dev_in_next+0x1f0>)
    88ca:	4413      	add	r3, r2
    88cc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    88ce:	78fb      	ldrb	r3, [r7, #3]
    88d0:	2b00      	cmp	r3, #0
    88d2:	d006      	beq.n	88e2 <_usb_d_dev_in_next+0x3a>
    88d4:	693b      	ldr	r3, [r7, #16]
    88d6:	3310      	adds	r3, #16
    88d8:	685b      	ldr	r3, [r3, #4]
    88da:	f3c3 030d 	ubfx	r3, r3, #0, #14
    88de:	b29b      	uxth	r3, r3
    88e0:	e000      	b.n	88e4 <_usb_d_dev_in_next+0x3c>
    88e2:	2300      	movs	r3, #0
    88e4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	8a1b      	ldrh	r3, [r3, #16]
    88ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    88ee:	4293      	cmp	r3, r2
    88f0:	d103      	bne.n	88fa <_usb_d_dev_in_next+0x52>
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	8a1b      	ldrh	r3, [r3, #16]
    88f6:	b21b      	sxth	r3, r3
    88f8:	e004      	b.n	8904 <_usb_d_dev_in_next+0x5c>
    88fa:	687b      	ldr	r3, [r7, #4]
    88fc:	8a1b      	ldrh	r3, [r3, #16]
    88fe:	3b01      	subs	r3, #1
    8900:	b29b      	uxth	r3, r3
    8902:	b21b      	sxth	r3, r3
    8904:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8908:	4013      	ands	r3, r2
    890a:	b21b      	sxth	r3, r3
    890c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    890e:	2300      	movs	r3, #0
    8910:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	7cdb      	ldrb	r3, [r3, #19]
    8916:	f003 0307 	and.w	r3, r3, #7
    891a:	b2db      	uxtb	r3, r3
    891c:	2b01      	cmp	r3, #1
    891e:	bf0c      	ite	eq
    8920:	2301      	moveq	r3, #1
    8922:	2300      	movne	r3, #0
    8924:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8926:	78fb      	ldrb	r3, [r7, #3]
    8928:	2b00      	cmp	r3, #0
    892a:	d004      	beq.n	8936 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    892c:	7dfb      	ldrb	r3, [r7, #23]
    892e:	2101      	movs	r1, #1
    8930:	4618      	mov	r0, r3
    8932:	4b5a      	ldr	r3, [pc, #360]	; (8a9c <_usb_d_dev_in_next+0x1f4>)
    8934:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	689a      	ldr	r2, [r3, #8]
    893a:	89fb      	ldrh	r3, [r7, #14]
    893c:	441a      	add	r2, r3
    893e:	687b      	ldr	r3, [r7, #4]
    8940:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	689a      	ldr	r2, [r3, #8]
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	685b      	ldr	r3, [r3, #4]
    894a:	429a      	cmp	r2, r3
    894c:	d243      	bcs.n	89d6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    894e:	687b      	ldr	r3, [r7, #4]
    8950:	685b      	ldr	r3, [r3, #4]
    8952:	b29a      	uxth	r2, r3
    8954:	687b      	ldr	r3, [r7, #4]
    8956:	689b      	ldr	r3, [r3, #8]
    8958:	b29b      	uxth	r3, r3
    895a:	1ad3      	subs	r3, r2, r3
    895c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	7cdb      	ldrb	r3, [r3, #19]
    8962:	f003 0320 	and.w	r3, r3, #32
    8966:	b2db      	uxtb	r3, r3
    8968:	2b00      	cmp	r3, #0
    896a:	d01b      	beq.n	89a4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    896c:	687b      	ldr	r3, [r7, #4]
    896e:	8a1b      	ldrh	r3, [r3, #16]
    8970:	8bfa      	ldrh	r2, [r7, #30]
    8972:	429a      	cmp	r2, r3
    8974:	d902      	bls.n	897c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8976:	687b      	ldr	r3, [r7, #4]
    8978:	8a1b      	ldrh	r3, [r3, #16]
    897a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	68d8      	ldr	r0, [r3, #12]
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	681a      	ldr	r2, [r3, #0]
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	689b      	ldr	r3, [r3, #8]
    8988:	4413      	add	r3, r2
    898a:	8bfa      	ldrh	r2, [r7, #30]
    898c:	4619      	mov	r1, r3
    898e:	4b44      	ldr	r3, [pc, #272]	; (8aa0 <_usb_d_dev_in_next+0x1f8>)
    8990:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8992:	687b      	ldr	r3, [r7, #4]
    8994:	68db      	ldr	r3, [r3, #12]
    8996:	461a      	mov	r2, r3
    8998:	7dfb      	ldrb	r3, [r7, #23]
    899a:	2101      	movs	r1, #1
    899c:	4618      	mov	r0, r3
    899e:	4b41      	ldr	r3, [pc, #260]	; (8aa4 <_usb_d_dev_in_next+0x1fc>)
    89a0:	4798      	blx	r3
    89a2:	e011      	b.n	89c8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    89a4:	8bfb      	ldrh	r3, [r7, #30]
    89a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    89aa:	d902      	bls.n	89b2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    89ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    89b0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	681a      	ldr	r2, [r3, #0]
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	689b      	ldr	r3, [r3, #8]
    89ba:	4413      	add	r3, r2
    89bc:	461a      	mov	r2, r3
    89be:	7dfb      	ldrb	r3, [r7, #23]
    89c0:	2101      	movs	r1, #1
    89c2:	4618      	mov	r0, r3
    89c4:	4b37      	ldr	r3, [pc, #220]	; (8aa4 <_usb_d_dev_in_next+0x1fc>)
    89c6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    89c8:	8bfa      	ldrh	r2, [r7, #30]
    89ca:	7df8      	ldrb	r0, [r7, #23]
    89cc:	2300      	movs	r3, #0
    89ce:	2101      	movs	r1, #1
    89d0:	4c35      	ldr	r4, [pc, #212]	; (8aa8 <_usb_d_dev_in_next+0x200>)
    89d2:	47a0      	blx	r4
		goto _in_tx_exec;
    89d4:	e041      	b.n	8a5a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	7cdb      	ldrb	r3, [r3, #19]
    89da:	f003 0310 	and.w	r3, r3, #16
    89de:	b2db      	uxtb	r3, r3
    89e0:	2b00      	cmp	r3, #0
    89e2:	d00b      	beq.n	89fc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    89e4:	687a      	ldr	r2, [r7, #4]
    89e6:	7cd3      	ldrb	r3, [r2, #19]
    89e8:	f36f 1304 	bfc	r3, #4, #1
    89ec:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    89ee:	7df8      	ldrb	r0, [r7, #23]
    89f0:	2300      	movs	r3, #0
    89f2:	2200      	movs	r2, #0
    89f4:	2101      	movs	r1, #1
    89f6:	4c2c      	ldr	r4, [pc, #176]	; (8aa8 <_usb_d_dev_in_next+0x200>)
    89f8:	47a0      	blx	r4
		goto _in_tx_exec;
    89fa:	e02e      	b.n	8a5a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    89fc:	7afb      	ldrb	r3, [r7, #11]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d006      	beq.n	8a10 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8a02:	7dfb      	ldrb	r3, [r7, #23]
    8a04:	224b      	movs	r2, #75	; 0x4b
    8a06:	4619      	mov	r1, r3
    8a08:	69b8      	ldr	r0, [r7, #24]
    8a0a:	4b28      	ldr	r3, [pc, #160]	; (8aac <_usb_d_dev_in_next+0x204>)
    8a0c:	4798      	blx	r3
    8a0e:	e005      	b.n	8a1c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8a10:	7dfb      	ldrb	r3, [r7, #23]
    8a12:	224a      	movs	r2, #74	; 0x4a
    8a14:	4619      	mov	r1, r3
    8a16:	69b8      	ldr	r0, [r7, #24]
    8a18:	4b24      	ldr	r3, [pc, #144]	; (8aac <_usb_d_dev_in_next+0x204>)
    8a1a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	8a1b      	ldrh	r3, [r3, #16]
    8a20:	89ba      	ldrh	r2, [r7, #12]
    8a22:	429a      	cmp	r2, r3
    8a24:	d114      	bne.n	8a50 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8a26:	687a      	ldr	r2, [r7, #4]
    8a28:	7cd3      	ldrb	r3, [r2, #19]
    8a2a:	f36f 1386 	bfc	r3, #6, #1
    8a2e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8a30:	4b1f      	ldr	r3, [pc, #124]	; (8ab0 <_usb_d_dev_in_next+0x208>)
    8a32:	68db      	ldr	r3, [r3, #12]
    8a34:	687a      	ldr	r2, [r7, #4]
    8a36:	7c90      	ldrb	r0, [r2, #18]
    8a38:	687a      	ldr	r2, [r7, #4]
    8a3a:	6892      	ldr	r2, [r2, #8]
    8a3c:	4611      	mov	r1, r2
    8a3e:	4798      	blx	r3
    8a40:	4603      	mov	r3, r0
    8a42:	2b00      	cmp	r3, #0
    8a44:	d124      	bne.n	8a90 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8a46:	687a      	ldr	r2, [r7, #4]
    8a48:	7cd3      	ldrb	r3, [r2, #19]
    8a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8a4e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8a50:	2100      	movs	r1, #0
    8a52:	6878      	ldr	r0, [r7, #4]
    8a54:	4b17      	ldr	r3, [pc, #92]	; (8ab4 <_usb_d_dev_in_next+0x20c>)
    8a56:	4798      	blx	r3
	return;
    8a58:	e01b      	b.n	8a92 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8a5a:	78fb      	ldrb	r3, [r7, #3]
    8a5c:	f083 0301 	eor.w	r3, r3, #1
    8a60:	b2db      	uxtb	r3, r3
    8a62:	2b00      	cmp	r3, #0
    8a64:	d00d      	beq.n	8a82 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8a66:	7afb      	ldrb	r3, [r7, #11]
    8a68:	2b00      	cmp	r3, #0
    8a6a:	d002      	beq.n	8a72 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8a6c:	234e      	movs	r3, #78	; 0x4e
    8a6e:	777b      	strb	r3, [r7, #29]
    8a70:	e001      	b.n	8a76 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8a72:	234a      	movs	r3, #74	; 0x4a
    8a74:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8a76:	7f7a      	ldrb	r2, [r7, #29]
    8a78:	7dfb      	ldrb	r3, [r7, #23]
    8a7a:	4619      	mov	r1, r3
    8a7c:	69b8      	ldr	r0, [r7, #24]
    8a7e:	4b0e      	ldr	r3, [pc, #56]	; (8ab8 <_usb_d_dev_in_next+0x210>)
    8a80:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8a82:	7dfb      	ldrb	r3, [r7, #23]
    8a84:	2201      	movs	r2, #1
    8a86:	2101      	movs	r1, #1
    8a88:	4618      	mov	r0, r3
    8a8a:	4b0c      	ldr	r3, [pc, #48]	; (8abc <_usb_d_dev_in_next+0x214>)
    8a8c:	4798      	blx	r3
    8a8e:	e000      	b.n	8a92 <_usb_d_dev_in_next+0x1ea>
			return;
    8a90:	bf00      	nop
}
    8a92:	3724      	adds	r7, #36	; 0x24
    8a94:	46bd      	mov	sp, r7
    8a96:	bd90      	pop	{r4, r7, pc}
    8a98:	20000a00 	.word	0x20000a00
    8a9c:	000082a1 	.word	0x000082a1
    8aa0:	0000d0f5 	.word	0x0000d0f5
    8aa4:	000082cd 	.word	0x000082cd
    8aa8:	00008415 	.word	0x00008415
    8aac:	00007bad 	.word	0x00007bad
    8ab0:	20000938 	.word	0x20000938
    8ab4:	00009bd1 	.word	0x00009bd1
    8ab8:	00007b81 	.word	0x00007b81
    8abc:	000084cd 	.word	0x000084cd

00008ac0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8ac0:	b590      	push	{r4, r7, lr}
    8ac2:	b08b      	sub	sp, #44	; 0x2c
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	6078      	str	r0, [r7, #4]
    8ac8:	460b      	mov	r3, r1
    8aca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8acc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ad0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	7c9b      	ldrb	r3, [r3, #18]
    8ad6:	f003 030f 	and.w	r3, r3, #15
    8ada:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8adc:	7ffb      	ldrb	r3, [r7, #31]
    8ade:	015b      	lsls	r3, r3, #5
    8ae0:	4a94      	ldr	r2, [pc, #592]	; (8d34 <_usb_d_dev_out_next+0x274>)
    8ae2:	4413      	add	r3, r2
    8ae4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8ae6:	78fb      	ldrb	r3, [r7, #3]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d005      	beq.n	8af8 <_usb_d_dev_out_next+0x38>
    8aec:	69bb      	ldr	r3, [r7, #24]
    8aee:	685b      	ldr	r3, [r3, #4]
    8af0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8af4:	b29b      	uxth	r3, r3
    8af6:	e000      	b.n	8afa <_usb_d_dev_out_next+0x3a>
    8af8:	2300      	movs	r3, #0
    8afa:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8afc:	78fb      	ldrb	r3, [r7, #3]
    8afe:	2b00      	cmp	r3, #0
    8b00:	d005      	beq.n	8b0e <_usb_d_dev_out_next+0x4e>
    8b02:	69bb      	ldr	r3, [r7, #24]
    8b04:	685b      	ldr	r3, [r3, #4]
    8b06:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b0a:	b29b      	uxth	r3, r3
    8b0c:	e000      	b.n	8b10 <_usb_d_dev_out_next+0x50>
    8b0e:	2300      	movs	r3, #0
    8b10:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	8a1b      	ldrh	r3, [r3, #16]
    8b16:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b1a:	4293      	cmp	r3, r2
    8b1c:	d004      	beq.n	8b28 <_usb_d_dev_out_next+0x68>
    8b1e:	687b      	ldr	r3, [r7, #4]
    8b20:	8a1b      	ldrh	r3, [r3, #16]
    8b22:	3b01      	subs	r3, #1
    8b24:	b29b      	uxth	r3, r3
    8b26:	e001      	b.n	8b2c <_usb_d_dev_out_next+0x6c>
    8b28:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8b2c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8b2e:	8aba      	ldrh	r2, [r7, #20]
    8b30:	8a7b      	ldrh	r3, [r7, #18]
    8b32:	4013      	ands	r3, r2
    8b34:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8b36:	687b      	ldr	r3, [r7, #4]
    8b38:	7cdb      	ldrb	r3, [r3, #19]
    8b3a:	f003 0307 	and.w	r3, r3, #7
    8b3e:	b2db      	uxtb	r3, r3
    8b40:	2b01      	cmp	r3, #1
    8b42:	bf0c      	ite	eq
    8b44:	2301      	moveq	r3, #1
    8b46:	2300      	movne	r3, #0
    8b48:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8b4a:	78fb      	ldrb	r3, [r7, #3]
    8b4c:	2b00      	cmp	r3, #0
    8b4e:	d004      	beq.n	8b5a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8b50:	7ffb      	ldrb	r3, [r7, #31]
    8b52:	2100      	movs	r1, #0
    8b54:	4618      	mov	r0, r3
    8b56:	4b78      	ldr	r3, [pc, #480]	; (8d38 <_usb_d_dev_out_next+0x278>)
    8b58:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	7cdb      	ldrb	r3, [r3, #19]
    8b5e:	f003 0320 	and.w	r3, r3, #32
    8b62:	b2db      	uxtb	r3, r3
    8b64:	2b00      	cmp	r3, #0
    8b66:	d01c      	beq.n	8ba2 <_usb_d_dev_out_next+0xe2>
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	685b      	ldr	r3, [r3, #4]
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	d018      	beq.n	8ba2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	685b      	ldr	r3, [r3, #4]
    8b74:	b29a      	uxth	r2, r3
    8b76:	687b      	ldr	r3, [r7, #4]
    8b78:	689b      	ldr	r3, [r3, #8]
    8b7a:	b29b      	uxth	r3, r3
    8b7c:	1ad3      	subs	r3, r2, r3
    8b7e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8b80:	687b      	ldr	r3, [r7, #4]
    8b82:	681a      	ldr	r2, [r3, #0]
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	689b      	ldr	r3, [r3, #8]
    8b88:	18d0      	adds	r0, r2, r3
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	68d9      	ldr	r1, [r3, #12]
    8b8e:	89ba      	ldrh	r2, [r7, #12]
    8b90:	8a3b      	ldrh	r3, [r7, #16]
    8b92:	429a      	cmp	r2, r3
    8b94:	d901      	bls.n	8b9a <_usb_d_dev_out_next+0xda>
    8b96:	8a3b      	ldrh	r3, [r7, #16]
    8b98:	e000      	b.n	8b9c <_usb_d_dev_out_next+0xdc>
    8b9a:	89bb      	ldrh	r3, [r7, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	4b67      	ldr	r3, [pc, #412]	; (8d3c <_usb_d_dev_out_next+0x27c>)
    8ba0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	685b      	ldr	r3, [r3, #4]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d121      	bne.n	8bee <_usb_d_dev_out_next+0x12e>
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	7cdb      	ldrb	r3, [r3, #19]
    8bae:	f003 0310 	and.w	r3, r3, #16
    8bb2:	b2db      	uxtb	r3, r3
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d01a      	beq.n	8bee <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8bb8:	687a      	ldr	r2, [r7, #4]
    8bba:	7cd3      	ldrb	r3, [r2, #19]
    8bbc:	f36f 1304 	bfc	r3, #4, #1
    8bc0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8bc2:	687a      	ldr	r2, [r7, #4]
    8bc4:	7cd3      	ldrb	r3, [r2, #19]
    8bc6:	f043 0320 	orr.w	r3, r3, #32
    8bca:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8bcc:	687b      	ldr	r3, [r7, #4]
    8bce:	68db      	ldr	r3, [r3, #12]
    8bd0:	461a      	mov	r2, r3
    8bd2:	7ffb      	ldrb	r3, [r7, #31]
    8bd4:	2100      	movs	r1, #0
    8bd6:	4618      	mov	r0, r3
    8bd8:	4b59      	ldr	r3, [pc, #356]	; (8d40 <_usb_d_dev_out_next+0x280>)
    8bda:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	8a1b      	ldrh	r3, [r3, #16]
    8be0:	461a      	mov	r2, r3
    8be2:	7ff8      	ldrb	r0, [r7, #31]
    8be4:	2300      	movs	r3, #0
    8be6:	2100      	movs	r1, #0
    8be8:	4c56      	ldr	r4, [pc, #344]	; (8d44 <_usb_d_dev_out_next+0x284>)
    8bea:	47a0      	blx	r4
		goto _out_rx_exec;
    8bec:	e090      	b.n	8d10 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8bee:	78fb      	ldrb	r3, [r7, #3]
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	d010      	beq.n	8c16 <_usb_d_dev_out_next+0x156>
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	8a1b      	ldrh	r3, [r3, #16]
    8bf8:	8a3a      	ldrh	r2, [r7, #16]
    8bfa:	429a      	cmp	r2, r3
    8bfc:	d20b      	bcs.n	8c16 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8bfe:	687a      	ldr	r2, [r7, #4]
    8c00:	7cd3      	ldrb	r3, [r2, #19]
    8c02:	f36f 1304 	bfc	r3, #4, #1
    8c06:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	689a      	ldr	r2, [r3, #8]
    8c0c:	8abb      	ldrh	r3, [r7, #20]
    8c0e:	441a      	add	r2, r3
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	609a      	str	r2, [r3, #8]
    8c14:	e05c      	b.n	8cd0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	689a      	ldr	r2, [r3, #8]
    8c1a:	8afb      	ldrh	r3, [r7, #22]
    8c1c:	441a      	add	r2, r3
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8c22:	687b      	ldr	r3, [r7, #4]
    8c24:	689a      	ldr	r2, [r3, #8]
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	685b      	ldr	r3, [r3, #4]
    8c2a:	429a      	cmp	r2, r3
    8c2c:	d250      	bcs.n	8cd0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	685b      	ldr	r3, [r3, #4]
    8c32:	b29a      	uxth	r2, r3
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	689b      	ldr	r3, [r3, #8]
    8c38:	b29b      	uxth	r3, r3
    8c3a:	1ad3      	subs	r3, r2, r3
    8c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	7cdb      	ldrb	r3, [r3, #19]
    8c42:	f003 0320 	and.w	r3, r3, #32
    8c46:	b2db      	uxtb	r3, r3
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d010      	beq.n	8c6e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	8a1b      	ldrh	r3, [r3, #16]
    8c50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c52:	429a      	cmp	r2, r3
    8c54:	d902      	bls.n	8c5c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	8a1b      	ldrh	r3, [r3, #16]
    8c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	68db      	ldr	r3, [r3, #12]
    8c60:	461a      	mov	r2, r3
    8c62:	7ffb      	ldrb	r3, [r7, #31]
    8c64:	2100      	movs	r1, #0
    8c66:	4618      	mov	r0, r3
    8c68:	4b35      	ldr	r3, [pc, #212]	; (8d40 <_usb_d_dev_out_next+0x280>)
    8c6a:	4798      	blx	r3
    8c6c:	e029      	b.n	8cc2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8c6e:	687b      	ldr	r3, [r7, #4]
    8c70:	8a1b      	ldrh	r3, [r3, #16]
    8c72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c74:	429a      	cmp	r2, r3
    8c76:	d90f      	bls.n	8c98 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8c7e:	d903      	bls.n	8c88 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8c84:	84fb      	strh	r3, [r7, #38]	; 0x26
    8c86:	e011      	b.n	8cac <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8c88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c8a:	8a7b      	ldrh	r3, [r7, #18]
    8c8c:	4013      	ands	r3, r2
    8c8e:	b29b      	uxth	r3, r3
    8c90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c92:	1ad3      	subs	r3, r2, r3
    8c94:	84fb      	strh	r3, [r7, #38]	; 0x26
    8c96:	e009      	b.n	8cac <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	8a1b      	ldrh	r3, [r3, #16]
    8c9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8c9e:	429a      	cmp	r2, r3
    8ca0:	d204      	bcs.n	8cac <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8ca2:	687a      	ldr	r2, [r7, #4]
    8ca4:	7cd3      	ldrb	r3, [r2, #19]
    8ca6:	f043 0320 	orr.w	r3, r3, #32
    8caa:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	681a      	ldr	r2, [r3, #0]
    8cb0:	687b      	ldr	r3, [r7, #4]
    8cb2:	689b      	ldr	r3, [r3, #8]
    8cb4:	4413      	add	r3, r2
    8cb6:	461a      	mov	r2, r3
    8cb8:	7ffb      	ldrb	r3, [r7, #31]
    8cba:	2100      	movs	r1, #0
    8cbc:	4618      	mov	r0, r3
    8cbe:	4b20      	ldr	r3, [pc, #128]	; (8d40 <_usb_d_dev_out_next+0x280>)
    8cc0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8cc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8cc4:	7ff8      	ldrb	r0, [r7, #31]
    8cc6:	2300      	movs	r3, #0
    8cc8:	2100      	movs	r1, #0
    8cca:	4c1e      	ldr	r4, [pc, #120]	; (8d44 <_usb_d_dev_out_next+0x284>)
    8ccc:	47a0      	blx	r4
			goto _out_rx_exec;
    8cce:	e01f      	b.n	8d10 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8cd0:	7bfb      	ldrb	r3, [r7, #15]
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d006      	beq.n	8ce4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8cd6:	7ffb      	ldrb	r3, [r7, #31]
    8cd8:	222d      	movs	r2, #45	; 0x2d
    8cda:	4619      	mov	r1, r3
    8cdc:	6a38      	ldr	r0, [r7, #32]
    8cde:	4b1a      	ldr	r3, [pc, #104]	; (8d48 <_usb_d_dev_out_next+0x288>)
    8ce0:	4798      	blx	r3
    8ce2:	e005      	b.n	8cf0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8ce4:	7ffb      	ldrb	r3, [r7, #31]
    8ce6:	2225      	movs	r2, #37	; 0x25
    8ce8:	4619      	mov	r1, r3
    8cea:	6a38      	ldr	r0, [r7, #32]
    8cec:	4b16      	ldr	r3, [pc, #88]	; (8d48 <_usb_d_dev_out_next+0x288>)
    8cee:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8cf0:	7ffb      	ldrb	r3, [r7, #31]
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d107      	bne.n	8d06 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	68db      	ldr	r3, [r3, #12]
    8cfa:	461a      	mov	r2, r3
    8cfc:	7ffb      	ldrb	r3, [r7, #31]
    8cfe:	2100      	movs	r1, #0
    8d00:	4618      	mov	r0, r3
    8d02:	4b0f      	ldr	r3, [pc, #60]	; (8d40 <_usb_d_dev_out_next+0x280>)
    8d04:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8d06:	2100      	movs	r1, #0
    8d08:	6878      	ldr	r0, [r7, #4]
    8d0a:	4b10      	ldr	r3, [pc, #64]	; (8d4c <_usb_d_dev_out_next+0x28c>)
    8d0c:	4798      	blx	r3
	return;
    8d0e:	e031      	b.n	8d74 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8d10:	78fb      	ldrb	r3, [r7, #3]
    8d12:	f083 0301 	eor.w	r3, r3, #1
    8d16:	b2db      	uxtb	r3, r3
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d025      	beq.n	8d68 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8d1c:	7bfb      	ldrb	r3, [r7, #15]
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d018      	beq.n	8d54 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8d22:	7ffb      	ldrb	r3, [r7, #31]
    8d24:	2101      	movs	r1, #1
    8d26:	4618      	mov	r0, r3
    8d28:	4b09      	ldr	r3, [pc, #36]	; (8d50 <_usb_d_dev_out_next+0x290>)
    8d2a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8d2c:	232d      	movs	r3, #45	; 0x2d
    8d2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8d32:	e012      	b.n	8d5a <_usb_d_dev_out_next+0x29a>
    8d34:	20000a00 	.word	0x20000a00
    8d38:	000082a1 	.word	0x000082a1
    8d3c:	0000d0f5 	.word	0x0000d0f5
    8d40:	000082cd 	.word	0x000082cd
    8d44:	00008455 	.word	0x00008455
    8d48:	00007bad 	.word	0x00007bad
    8d4c:	00009bd1 	.word	0x00009bd1
    8d50:	00008495 	.word	0x00008495
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8d54:	2325      	movs	r3, #37	; 0x25
    8d56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8d5a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8d5e:	7ffb      	ldrb	r3, [r7, #31]
    8d60:	4619      	mov	r1, r3
    8d62:	6a38      	ldr	r0, [r7, #32]
    8d64:	4b05      	ldr	r3, [pc, #20]	; (8d7c <_usb_d_dev_out_next+0x2bc>)
    8d66:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8d68:	7ffb      	ldrb	r3, [r7, #31]
    8d6a:	2201      	movs	r2, #1
    8d6c:	2100      	movs	r1, #0
    8d6e:	4618      	mov	r0, r3
    8d70:	4b03      	ldr	r3, [pc, #12]	; (8d80 <_usb_d_dev_out_next+0x2c0>)
    8d72:	4798      	blx	r3
}
    8d74:	372c      	adds	r7, #44	; 0x2c
    8d76:	46bd      	mov	sp, r7
    8d78:	bd90      	pop	{r4, r7, pc}
    8d7a:	bf00      	nop
    8d7c:	00007b81 	.word	0x00007b81
    8d80:	00008525 	.word	0x00008525

00008d84 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8d84:	b580      	push	{r7, lr}
    8d86:	b084      	sub	sp, #16
    8d88:	af00      	add	r7, sp, #0
    8d8a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	7c9b      	ldrb	r3, [r3, #18]
    8d90:	f003 030f 	and.w	r3, r3, #15
    8d94:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	7cdb      	ldrb	r3, [r3, #19]
    8d9a:	f003 0307 	and.w	r3, r3, #7
    8d9e:	b2db      	uxtb	r3, r3
    8da0:	2b01      	cmp	r3, #1
    8da2:	bf0c      	ite	eq
    8da4:	2301      	moveq	r3, #1
    8da6:	2300      	movne	r3, #0
    8da8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    8daa:	7bbb      	ldrb	r3, [r7, #14]
    8dac:	f083 0301 	eor.w	r3, r3, #1
    8db0:	b2db      	uxtb	r3, r3
    8db2:	2b00      	cmp	r3, #0
    8db4:	d008      	beq.n	8dc8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    8db6:	7bfb      	ldrb	r3, [r7, #15]
    8db8:	4618      	mov	r0, r3
    8dba:	4b20      	ldr	r3, [pc, #128]	; (8e3c <_usb_d_dev_handle_setup+0xb8>)
    8dbc:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    8dbe:	7bfb      	ldrb	r3, [r7, #15]
    8dc0:	4618      	mov	r0, r3
    8dc2:	4b1f      	ldr	r3, [pc, #124]	; (8e40 <_usb_d_dev_handle_setup+0xbc>)
    8dc4:	4798      	blx	r3
		return;
    8dc6:	e036      	b.n	8e36 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8dc8:	687b      	ldr	r3, [r7, #4]
    8dca:	7cdb      	ldrb	r3, [r3, #19]
    8dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8dd0:	b2db      	uxtb	r3, r3
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d010      	beq.n	8df8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    8dd6:	687a      	ldr	r2, [r7, #4]
    8dd8:	7cd3      	ldrb	r3, [r2, #19]
    8dda:	f36f 1386 	bfc	r3, #6, #1
    8dde:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8de0:	7bfb      	ldrb	r3, [r7, #15]
    8de2:	2200      	movs	r2, #0
    8de4:	2101      	movs	r1, #1
    8de6:	4618      	mov	r0, r3
    8de8:	4b16      	ldr	r3, [pc, #88]	; (8e44 <_usb_d_dev_handle_setup+0xc0>)
    8dea:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    8dec:	7bfb      	ldrb	r3, [r7, #15]
    8dee:	2200      	movs	r2, #0
    8df0:	2100      	movs	r1, #0
    8df2:	4618      	mov	r0, r3
    8df4:	4b14      	ldr	r3, [pc, #80]	; (8e48 <_usb_d_dev_handle_setup+0xc4>)
    8df6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    8df8:	687a      	ldr	r2, [r7, #4]
    8dfa:	7cd3      	ldrb	r3, [r2, #19]
    8dfc:	f36f 03c3 	bfc	r3, #3, #1
    8e00:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    8e02:	7bfb      	ldrb	r3, [r7, #15]
    8e04:	2100      	movs	r1, #0
    8e06:	4618      	mov	r0, r3
    8e08:	4b10      	ldr	r3, [pc, #64]	; (8e4c <_usb_d_dev_handle_setup+0xc8>)
    8e0a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    8e0c:	7bfb      	ldrb	r3, [r7, #15]
    8e0e:	2101      	movs	r1, #1
    8e10:	4618      	mov	r0, r3
    8e12:	4b0e      	ldr	r3, [pc, #56]	; (8e4c <_usb_d_dev_handle_setup+0xc8>)
    8e14:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8e16:	7bfb      	ldrb	r3, [r7, #15]
    8e18:	216f      	movs	r1, #111	; 0x6f
    8e1a:	4618      	mov	r0, r3
    8e1c:	4b0c      	ldr	r3, [pc, #48]	; (8e50 <_usb_d_dev_handle_setup+0xcc>)
    8e1e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8e20:	7bfb      	ldrb	r3, [r7, #15]
    8e22:	216f      	movs	r1, #111	; 0x6f
    8e24:	4618      	mov	r0, r3
    8e26:	4b0b      	ldr	r3, [pc, #44]	; (8e54 <_usb_d_dev_handle_setup+0xd0>)
    8e28:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8e2a:	4b0b      	ldr	r3, [pc, #44]	; (8e58 <_usb_d_dev_handle_setup+0xd4>)
    8e2c:	689b      	ldr	r3, [r3, #8]
    8e2e:	687a      	ldr	r2, [r7, #4]
    8e30:	7c92      	ldrb	r2, [r2, #18]
    8e32:	4610      	mov	r0, r2
    8e34:	4798      	blx	r3
}
    8e36:	3710      	adds	r7, #16
    8e38:	46bd      	mov	sp, r7
    8e3a:	bd80      	pop	{r7, pc}
    8e3c:	00008229 	.word	0x00008229
    8e40:	000081d5 	.word	0x000081d5
    8e44:	000084cd 	.word	0x000084cd
    8e48:	00008525 	.word	0x00008525
    8e4c:	00008495 	.word	0x00008495
    8e50:	00007fd5 	.word	0x00007fd5
    8e54:	00008025 	.word	0x00008025
    8e58:	20000938 	.word	0x20000938

00008e5c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b084      	sub	sp, #16
    8e60:	af00      	add	r7, sp, #0
    8e62:	6078      	str	r0, [r7, #4]
    8e64:	460b      	mov	r3, r1
    8e66:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	7c9b      	ldrb	r3, [r3, #18]
    8e6c:	f003 030f 	and.w	r3, r3, #15
    8e70:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    8e72:	78f9      	ldrb	r1, [r7, #3]
    8e74:	7bfb      	ldrb	r3, [r7, #15]
    8e76:	2200      	movs	r2, #0
    8e78:	4618      	mov	r0, r3
    8e7a:	4b07      	ldr	r3, [pc, #28]	; (8e98 <_usb_d_dev_handle_stall+0x3c>)
    8e7c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8e7e:	4b07      	ldr	r3, [pc, #28]	; (8e9c <_usb_d_dev_handle_stall+0x40>)
    8e80:	691b      	ldr	r3, [r3, #16]
    8e82:	687a      	ldr	r2, [r7, #4]
    8e84:	7c90      	ldrb	r0, [r2, #18]
    8e86:	687a      	ldr	r2, [r7, #4]
    8e88:	6892      	ldr	r2, [r2, #8]
    8e8a:	2101      	movs	r1, #1
    8e8c:	4798      	blx	r3
}
    8e8e:	bf00      	nop
    8e90:	3710      	adds	r7, #16
    8e92:	46bd      	mov	sp, r7
    8e94:	bd80      	pop	{r7, pc}
    8e96:	bf00      	nop
    8e98:	00008189 	.word	0x00008189
    8e9c:	20000938 	.word	0x20000938

00008ea0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8ea0:	b580      	push	{r7, lr}
    8ea2:	b088      	sub	sp, #32
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	6078      	str	r0, [r7, #4]
    8ea8:	460b      	mov	r3, r1
    8eaa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    8eac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8eb0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8eb2:	687b      	ldr	r3, [r7, #4]
    8eb4:	7c9b      	ldrb	r3, [r3, #18]
    8eb6:	f003 030f 	and.w	r3, r3, #15
    8eba:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8ebc:	4b61      	ldr	r3, [pc, #388]	; (9044 <_usb_d_dev_handle_trfail+0x1a4>)
    8ebe:	881b      	ldrh	r3, [r3, #0]
    8ec0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    8ec2:	7efb      	ldrb	r3, [r7, #27]
    8ec4:	015b      	lsls	r3, r3, #5
    8ec6:	4a60      	ldr	r2, [pc, #384]	; (9048 <_usb_d_dev_handle_trfail+0x1a8>)
    8ec8:	4413      	add	r3, r2
    8eca:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    8ecc:	78fb      	ldrb	r3, [r7, #3]
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d006      	beq.n	8ee0 <_usb_d_dev_handle_trfail+0x40>
    8ed2:	7efb      	ldrb	r3, [r7, #27]
    8ed4:	4619      	mov	r1, r3
    8ed6:	69f8      	ldr	r0, [r7, #28]
    8ed8:	4b5c      	ldr	r3, [pc, #368]	; (904c <_usb_d_dev_handle_trfail+0x1ac>)
    8eda:	4798      	blx	r3
    8edc:	4603      	mov	r3, r0
    8ede:	e005      	b.n	8eec <_usb_d_dev_handle_trfail+0x4c>
    8ee0:	7efb      	ldrb	r3, [r7, #27]
    8ee2:	4619      	mov	r1, r3
    8ee4:	69f8      	ldr	r0, [r7, #28]
    8ee6:	4b5a      	ldr	r3, [pc, #360]	; (9050 <_usb_d_dev_handle_trfail+0x1b0>)
    8ee8:	4798      	blx	r3
    8eea:	4603      	mov	r3, r0
    8eec:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8eee:	687b      	ldr	r3, [r7, #4]
    8ef0:	7cdb      	ldrb	r3, [r3, #19]
    8ef2:	f003 0307 	and.w	r3, r3, #7
    8ef6:	b2db      	uxtb	r3, r3
    8ef8:	2b01      	cmp	r3, #1
    8efa:	bf0c      	ite	eq
    8efc:	2301      	moveq	r3, #1
    8efe:	2300      	movne	r3, #0
    8f00:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    8f02:	78fb      	ldrb	r3, [r7, #3]
    8f04:	011b      	lsls	r3, r3, #4
    8f06:	697a      	ldr	r2, [r7, #20]
    8f08:	4413      	add	r3, r2
    8f0a:	7a9b      	ldrb	r3, [r3, #10]
    8f0c:	b2db      	uxtb	r3, r3
    8f0e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8f10:	7cfb      	ldrb	r3, [r7, #19]
    8f12:	2b02      	cmp	r3, #2
    8f14:	d12f      	bne.n	8f76 <_usb_d_dev_handle_trfail+0xd6>
    8f16:	7b3b      	ldrb	r3, [r7, #12]
    8f18:	f003 0301 	and.w	r3, r3, #1
    8f1c:	b2db      	uxtb	r3, r3
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d029      	beq.n	8f76 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8f22:	78fb      	ldrb	r3, [r7, #3]
    8f24:	011b      	lsls	r3, r3, #4
    8f26:	697a      	ldr	r2, [r7, #20]
    8f28:	441a      	add	r2, r3
    8f2a:	7a93      	ldrb	r3, [r2, #10]
    8f2c:	f36f 0300 	bfc	r3, #0, #1
    8f30:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8f32:	78fb      	ldrb	r3, [r7, #3]
    8f34:	f107 0220 	add.w	r2, r7, #32
    8f38:	4413      	add	r3, r2
    8f3a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f3e:	7efb      	ldrb	r3, [r7, #27]
    8f40:	4619      	mov	r1, r3
    8f42:	69f8      	ldr	r0, [r7, #28]
    8f44:	4b43      	ldr	r3, [pc, #268]	; (9054 <_usb_d_dev_handle_trfail+0x1b4>)
    8f46:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8f48:	78fb      	ldrb	r3, [r7, #3]
    8f4a:	f107 0220 	add.w	r2, r7, #32
    8f4e:	4413      	add	r3, r2
    8f50:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f54:	7efb      	ldrb	r3, [r7, #27]
    8f56:	4619      	mov	r1, r3
    8f58:	69f8      	ldr	r0, [r7, #28]
    8f5a:	4b3f      	ldr	r3, [pc, #252]	; (9058 <_usb_d_dev_handle_trfail+0x1b8>)
    8f5c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8f5e:	78fb      	ldrb	r3, [r7, #3]
    8f60:	2b00      	cmp	r3, #0
    8f62:	bf14      	ite	ne
    8f64:	2301      	movne	r3, #1
    8f66:	2300      	moveq	r3, #0
    8f68:	b2db      	uxtb	r3, r3
    8f6a:	2204      	movs	r2, #4
    8f6c:	4619      	mov	r1, r3
    8f6e:	6878      	ldr	r0, [r7, #4]
    8f70:	4b3a      	ldr	r3, [pc, #232]	; (905c <_usb_d_dev_handle_trfail+0x1bc>)
    8f72:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    8f74:	e062      	b.n	903c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    8f76:	7b3b      	ldrb	r3, [r7, #12]
    8f78:	f003 0302 	and.w	r3, r3, #2
    8f7c:	b2db      	uxtb	r3, r3
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d040      	beq.n	9004 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    8f82:	78fb      	ldrb	r3, [r7, #3]
    8f84:	011b      	lsls	r3, r3, #4
    8f86:	697a      	ldr	r2, [r7, #20]
    8f88:	441a      	add	r2, r3
    8f8a:	7a93      	ldrb	r3, [r2, #10]
    8f8c:	f36f 0341 	bfc	r3, #1, #1
    8f90:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8f92:	78fb      	ldrb	r3, [r7, #3]
    8f94:	f107 0220 	add.w	r2, r7, #32
    8f98:	4413      	add	r3, r2
    8f9a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f9e:	7efb      	ldrb	r3, [r7, #27]
    8fa0:	4619      	mov	r1, r3
    8fa2:	69f8      	ldr	r0, [r7, #28]
    8fa4:	4b2b      	ldr	r3, [pc, #172]	; (9054 <_usb_d_dev_handle_trfail+0x1b4>)
    8fa6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8fa8:	78fb      	ldrb	r3, [r7, #3]
    8faa:	f107 0220 	add.w	r2, r7, #32
    8fae:	4413      	add	r3, r2
    8fb0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8fb4:	7efb      	ldrb	r3, [r7, #27]
    8fb6:	4619      	mov	r1, r3
    8fb8:	69f8      	ldr	r0, [r7, #28]
    8fba:	4b27      	ldr	r3, [pc, #156]	; (9058 <_usb_d_dev_handle_trfail+0x1b8>)
    8fbc:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8fbe:	7cbb      	ldrb	r3, [r7, #18]
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d03b      	beq.n	903c <_usb_d_dev_handle_trfail+0x19c>
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	7cdb      	ldrb	r3, [r3, #19]
    8fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d034      	beq.n	903c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8fd2:	687b      	ldr	r3, [r7, #4]
    8fd4:	7cdb      	ldrb	r3, [r3, #19]
    8fd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    8fda:	b2db      	uxtb	r3, r3
    8fdc:	461a      	mov	r2, r3
    8fde:	78fb      	ldrb	r3, [r7, #3]
    8fe0:	4293      	cmp	r3, r2
    8fe2:	d02b      	beq.n	903c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8fe4:	687b      	ldr	r3, [r7, #4]
    8fe6:	7cdb      	ldrb	r3, [r3, #19]
    8fe8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    8fec:	b2db      	uxtb	r3, r3
    8fee:	2b00      	cmp	r3, #0
    8ff0:	bf14      	ite	ne
    8ff2:	2301      	movne	r3, #1
    8ff4:	2300      	moveq	r3, #0
    8ff6:	b2db      	uxtb	r3, r3
    8ff8:	2200      	movs	r2, #0
    8ffa:	4619      	mov	r1, r3
    8ffc:	6878      	ldr	r0, [r7, #4]
    8ffe:	4b17      	ldr	r3, [pc, #92]	; (905c <_usb_d_dev_handle_trfail+0x1bc>)
    9000:	4798      	blx	r3
}
    9002:	e01b      	b.n	903c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9004:	78fa      	ldrb	r2, [r7, #3]
    9006:	7efb      	ldrb	r3, [r7, #27]
    9008:	4611      	mov	r1, r2
    900a:	4618      	mov	r0, r3
    900c:	4b14      	ldr	r3, [pc, #80]	; (9060 <_usb_d_dev_handle_trfail+0x1c0>)
    900e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9010:	78fb      	ldrb	r3, [r7, #3]
    9012:	f107 0220 	add.w	r2, r7, #32
    9016:	4413      	add	r3, r2
    9018:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    901c:	7efb      	ldrb	r3, [r7, #27]
    901e:	4619      	mov	r1, r3
    9020:	69f8      	ldr	r0, [r7, #28]
    9022:	4b0c      	ldr	r3, [pc, #48]	; (9054 <_usb_d_dev_handle_trfail+0x1b4>)
    9024:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9026:	78fb      	ldrb	r3, [r7, #3]
    9028:	f107 0220 	add.w	r2, r7, #32
    902c:	4413      	add	r3, r2
    902e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9032:	7efb      	ldrb	r3, [r7, #27]
    9034:	4619      	mov	r1, r3
    9036:	69f8      	ldr	r0, [r7, #28]
    9038:	4b07      	ldr	r3, [pc, #28]	; (9058 <_usb_d_dev_handle_trfail+0x1b8>)
    903a:	4798      	blx	r3
}
    903c:	bf00      	nop
    903e:	3720      	adds	r7, #32
    9040:	46bd      	mov	sp, r7
    9042:	bd80      	pop	{r7, pc}
    9044:	0000d774 	.word	0x0000d774
    9048:	20000a00 	.word	0x20000a00
    904c:	00007c09 	.word	0x00007c09
    9050:	00007bd9 	.word	0x00007bd9
    9054:	00007aad 	.word	0x00007aad
    9058:	00007bad 	.word	0x00007bad
    905c:	00009c19 	.word	0x00009c19
    9060:	00008495 	.word	0x00008495

00009064 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9064:	b580      	push	{r7, lr}
    9066:	b082      	sub	sp, #8
    9068:	af00      	add	r7, sp, #0
    906a:	6078      	str	r0, [r7, #4]
    906c:	460b      	mov	r3, r1
    906e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9070:	78fb      	ldrb	r3, [r7, #3]
    9072:	f003 0310 	and.w	r3, r3, #16
    9076:	2b00      	cmp	r3, #0
    9078:	d003      	beq.n	9082 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    907a:	6878      	ldr	r0, [r7, #4]
    907c:	4b0c      	ldr	r3, [pc, #48]	; (90b0 <_usb_d_dev_trans_setup_isr+0x4c>)
    907e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9080:	e012      	b.n	90a8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9082:	78fb      	ldrb	r3, [r7, #3]
    9084:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9088:	2b00      	cmp	r3, #0
    908a:	d004      	beq.n	9096 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    908c:	2101      	movs	r1, #1
    908e:	6878      	ldr	r0, [r7, #4]
    9090:	4b08      	ldr	r3, [pc, #32]	; (90b4 <_usb_d_dev_trans_setup_isr+0x50>)
    9092:	4798      	blx	r3
}
    9094:	e008      	b.n	90a8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9096:	78fb      	ldrb	r3, [r7, #3]
    9098:	f003 0320 	and.w	r3, r3, #32
    909c:	2b00      	cmp	r3, #0
    909e:	d003      	beq.n	90a8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    90a0:	2100      	movs	r1, #0
    90a2:	6878      	ldr	r0, [r7, #4]
    90a4:	4b03      	ldr	r3, [pc, #12]	; (90b4 <_usb_d_dev_trans_setup_isr+0x50>)
    90a6:	4798      	blx	r3
}
    90a8:	bf00      	nop
    90aa:	3708      	adds	r7, #8
    90ac:	46bd      	mov	sp, r7
    90ae:	bd80      	pop	{r7, pc}
    90b0:	00008d85 	.word	0x00008d85
    90b4:	00008e5d 	.word	0x00008e5d

000090b8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    90b8:	b580      	push	{r7, lr}
    90ba:	b082      	sub	sp, #8
    90bc:	af00      	add	r7, sp, #0
    90be:	6078      	str	r0, [r7, #4]
    90c0:	460b      	mov	r3, r1
    90c2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    90c4:	78fb      	ldrb	r3, [r7, #3]
    90c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90ca:	2b00      	cmp	r3, #0
    90cc:	d004      	beq.n	90d8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    90ce:	2101      	movs	r1, #1
    90d0:	6878      	ldr	r0, [r7, #4]
    90d2:	4b1a      	ldr	r3, [pc, #104]	; (913c <_usb_d_dev_trans_in_isr+0x84>)
    90d4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    90d6:	e02c      	b.n	9132 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    90d8:	78fb      	ldrb	r3, [r7, #3]
    90da:	f003 0308 	and.w	r3, r3, #8
    90de:	2b00      	cmp	r3, #0
    90e0:	d004      	beq.n	90ec <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    90e2:	2101      	movs	r1, #1
    90e4:	6878      	ldr	r0, [r7, #4]
    90e6:	4b16      	ldr	r3, [pc, #88]	; (9140 <_usb_d_dev_trans_in_isr+0x88>)
    90e8:	4798      	blx	r3
}
    90ea:	e022      	b.n	9132 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    90ec:	78fb      	ldrb	r3, [r7, #3]
    90ee:	f003 0302 	and.w	r3, r3, #2
    90f2:	2b00      	cmp	r3, #0
    90f4:	d004      	beq.n	9100 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    90f6:	2101      	movs	r1, #1
    90f8:	6878      	ldr	r0, [r7, #4]
    90fa:	4b12      	ldr	r3, [pc, #72]	; (9144 <_usb_d_dev_trans_in_isr+0x8c>)
    90fc:	4798      	blx	r3
}
    90fe:	e018      	b.n	9132 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9100:	687b      	ldr	r3, [r7, #4]
    9102:	7cdb      	ldrb	r3, [r3, #19]
    9104:	f003 0307 	and.w	r3, r3, #7
    9108:	b2db      	uxtb	r3, r3
    910a:	2b01      	cmp	r3, #1
    910c:	d111      	bne.n	9132 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    910e:	78fb      	ldrb	r3, [r7, #3]
    9110:	f003 0304 	and.w	r3, r3, #4
    9114:	2b00      	cmp	r3, #0
    9116:	d004      	beq.n	9122 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9118:	2100      	movs	r1, #0
    911a:	6878      	ldr	r0, [r7, #4]
    911c:	4b08      	ldr	r3, [pc, #32]	; (9140 <_usb_d_dev_trans_in_isr+0x88>)
    911e:	4798      	blx	r3
}
    9120:	e007      	b.n	9132 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9122:	78fb      	ldrb	r3, [r7, #3]
    9124:	f003 0310 	and.w	r3, r3, #16
    9128:	2b00      	cmp	r3, #0
    912a:	d002      	beq.n	9132 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    912c:	6878      	ldr	r0, [r7, #4]
    912e:	4b06      	ldr	r3, [pc, #24]	; (9148 <_usb_d_dev_trans_in_isr+0x90>)
    9130:	4798      	blx	r3
}
    9132:	bf00      	nop
    9134:	3708      	adds	r7, #8
    9136:	46bd      	mov	sp, r7
    9138:	bd80      	pop	{r7, pc}
    913a:	bf00      	nop
    913c:	00008e5d 	.word	0x00008e5d
    9140:	00008ea1 	.word	0x00008ea1
    9144:	000088a9 	.word	0x000088a9
    9148:	00008d85 	.word	0x00008d85

0000914c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    914c:	b580      	push	{r7, lr}
    914e:	b082      	sub	sp, #8
    9150:	af00      	add	r7, sp, #0
    9152:	6078      	str	r0, [r7, #4]
    9154:	460b      	mov	r3, r1
    9156:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9158:	78fb      	ldrb	r3, [r7, #3]
    915a:	f003 0320 	and.w	r3, r3, #32
    915e:	2b00      	cmp	r3, #0
    9160:	d004      	beq.n	916c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9162:	2100      	movs	r1, #0
    9164:	6878      	ldr	r0, [r7, #4]
    9166:	4b1a      	ldr	r3, [pc, #104]	; (91d0 <_usb_d_dev_trans_out_isr+0x84>)
    9168:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    916a:	e02c      	b.n	91c6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    916c:	78fb      	ldrb	r3, [r7, #3]
    916e:	f003 0304 	and.w	r3, r3, #4
    9172:	2b00      	cmp	r3, #0
    9174:	d004      	beq.n	9180 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9176:	2100      	movs	r1, #0
    9178:	6878      	ldr	r0, [r7, #4]
    917a:	4b16      	ldr	r3, [pc, #88]	; (91d4 <_usb_d_dev_trans_out_isr+0x88>)
    917c:	4798      	blx	r3
}
    917e:	e022      	b.n	91c6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9180:	78fb      	ldrb	r3, [r7, #3]
    9182:	f003 0301 	and.w	r3, r3, #1
    9186:	2b00      	cmp	r3, #0
    9188:	d004      	beq.n	9194 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    918a:	2101      	movs	r1, #1
    918c:	6878      	ldr	r0, [r7, #4]
    918e:	4b12      	ldr	r3, [pc, #72]	; (91d8 <_usb_d_dev_trans_out_isr+0x8c>)
    9190:	4798      	blx	r3
}
    9192:	e018      	b.n	91c6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9194:	687b      	ldr	r3, [r7, #4]
    9196:	7cdb      	ldrb	r3, [r3, #19]
    9198:	f003 0307 	and.w	r3, r3, #7
    919c:	b2db      	uxtb	r3, r3
    919e:	2b01      	cmp	r3, #1
    91a0:	d111      	bne.n	91c6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    91a2:	78fb      	ldrb	r3, [r7, #3]
    91a4:	f003 0308 	and.w	r3, r3, #8
    91a8:	2b00      	cmp	r3, #0
    91aa:	d004      	beq.n	91b6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    91ac:	2101      	movs	r1, #1
    91ae:	6878      	ldr	r0, [r7, #4]
    91b0:	4b08      	ldr	r3, [pc, #32]	; (91d4 <_usb_d_dev_trans_out_isr+0x88>)
    91b2:	4798      	blx	r3
}
    91b4:	e007      	b.n	91c6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    91b6:	78fb      	ldrb	r3, [r7, #3]
    91b8:	f003 0310 	and.w	r3, r3, #16
    91bc:	2b00      	cmp	r3, #0
    91be:	d002      	beq.n	91c6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    91c0:	6878      	ldr	r0, [r7, #4]
    91c2:	4b06      	ldr	r3, [pc, #24]	; (91dc <_usb_d_dev_trans_out_isr+0x90>)
    91c4:	4798      	blx	r3
}
    91c6:	bf00      	nop
    91c8:	3708      	adds	r7, #8
    91ca:	46bd      	mov	sp, r7
    91cc:	bd80      	pop	{r7, pc}
    91ce:	bf00      	nop
    91d0:	00008e5d 	.word	0x00008e5d
    91d4:	00008ea1 	.word	0x00008ea1
    91d8:	00008ac1 	.word	0x00008ac1
    91dc:	00008d85 	.word	0x00008d85

000091e0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    91e0:	b580      	push	{r7, lr}
    91e2:	b084      	sub	sp, #16
    91e4:	af00      	add	r7, sp, #0
    91e6:	6078      	str	r0, [r7, #4]
    91e8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    91ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91ee:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    91f0:	683b      	ldr	r3, [r7, #0]
    91f2:	7c9b      	ldrb	r3, [r3, #18]
    91f4:	f003 030f 	and.w	r3, r3, #15
    91f8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    91fa:	7afb      	ldrb	r3, [r7, #11]
    91fc:	2201      	movs	r2, #1
    91fe:	409a      	lsls	r2, r3
    9200:	687b      	ldr	r3, [r7, #4]
    9202:	4013      	ands	r3, r2
    9204:	2b00      	cmp	r3, #0
    9206:	d03d      	beq.n	9284 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9208:	7afb      	ldrb	r3, [r7, #11]
    920a:	68fa      	ldr	r2, [r7, #12]
    920c:	3308      	adds	r3, #8
    920e:	015b      	lsls	r3, r3, #5
    9210:	4413      	add	r3, r2
    9212:	3307      	adds	r3, #7
    9214:	781b      	ldrb	r3, [r3, #0]
    9216:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9218:	7afb      	ldrb	r3, [r7, #11]
    921a:	68fa      	ldr	r2, [r7, #12]
    921c:	015b      	lsls	r3, r3, #5
    921e:	4413      	add	r3, r2
    9220:	f203 1309 	addw	r3, r3, #265	; 0x109
    9224:	781b      	ldrb	r3, [r3, #0]
    9226:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9228:	7aba      	ldrb	r2, [r7, #10]
    922a:	7a7b      	ldrb	r3, [r7, #9]
    922c:	4013      	ands	r3, r2
    922e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9230:	7abb      	ldrb	r3, [r7, #10]
    9232:	2b00      	cmp	r3, #0
    9234:	d027      	beq.n	9286 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9236:	683b      	ldr	r3, [r7, #0]
    9238:	7cdb      	ldrb	r3, [r3, #19]
    923a:	f003 0307 	and.w	r3, r3, #7
    923e:	b2db      	uxtb	r3, r3
    9240:	2b01      	cmp	r3, #1
    9242:	d10c      	bne.n	925e <_usb_d_dev_handle_eps+0x7e>
    9244:	683b      	ldr	r3, [r7, #0]
    9246:	7cdb      	ldrb	r3, [r3, #19]
    9248:	f003 0340 	and.w	r3, r3, #64	; 0x40
    924c:	b2db      	uxtb	r3, r3
    924e:	2b00      	cmp	r3, #0
    9250:	d105      	bne.n	925e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9252:	7abb      	ldrb	r3, [r7, #10]
    9254:	4619      	mov	r1, r3
    9256:	6838      	ldr	r0, [r7, #0]
    9258:	4b0c      	ldr	r3, [pc, #48]	; (928c <_usb_d_dev_handle_eps+0xac>)
    925a:	4798      	blx	r3
    925c:	e013      	b.n	9286 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    925e:	683b      	ldr	r3, [r7, #0]
    9260:	7cdb      	ldrb	r3, [r3, #19]
    9262:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9266:	b2db      	uxtb	r3, r3
    9268:	2b00      	cmp	r3, #0
    926a:	d005      	beq.n	9278 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    926c:	7abb      	ldrb	r3, [r7, #10]
    926e:	4619      	mov	r1, r3
    9270:	6838      	ldr	r0, [r7, #0]
    9272:	4b07      	ldr	r3, [pc, #28]	; (9290 <_usb_d_dev_handle_eps+0xb0>)
    9274:	4798      	blx	r3
    9276:	e006      	b.n	9286 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9278:	7abb      	ldrb	r3, [r7, #10]
    927a:	4619      	mov	r1, r3
    927c:	6838      	ldr	r0, [r7, #0]
    927e:	4b05      	ldr	r3, [pc, #20]	; (9294 <_usb_d_dev_handle_eps+0xb4>)
    9280:	4798      	blx	r3
    9282:	e000      	b.n	9286 <_usb_d_dev_handle_eps+0xa6>
		return;
    9284:	bf00      	nop
		}
	}
}
    9286:	3710      	adds	r7, #16
    9288:	46bd      	mov	sp, r7
    928a:	bd80      	pop	{r7, pc}
    928c:	00009065 	.word	0x00009065
    9290:	000090b9 	.word	0x000090b9
    9294:	0000914d 	.word	0x0000914d

00009298 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9298:	b580      	push	{r7, lr}
    929a:	b084      	sub	sp, #16
    929c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    929e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    92a2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    92a4:	68bb      	ldr	r3, [r7, #8]
    92a6:	8c1b      	ldrh	r3, [r3, #32]
    92a8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    92aa:	88fb      	ldrh	r3, [r7, #6]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d104      	bne.n	92ba <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    92b0:	4b13      	ldr	r3, [pc, #76]	; (9300 <_usb_d_dev_handler+0x68>)
    92b2:	4798      	blx	r3
    92b4:	4603      	mov	r3, r0
    92b6:	2b00      	cmp	r3, #0
    92b8:	d11e      	bne.n	92f8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    92ba:	2300      	movs	r3, #0
    92bc:	73fb      	strb	r3, [r7, #15]
    92be:	e017      	b.n	92f0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    92c0:	7bfa      	ldrb	r2, [r7, #15]
    92c2:	4613      	mov	r3, r2
    92c4:	009b      	lsls	r3, r3, #2
    92c6:	4413      	add	r3, r2
    92c8:	009b      	lsls	r3, r3, #2
    92ca:	3310      	adds	r3, #16
    92cc:	4a0d      	ldr	r2, [pc, #52]	; (9304 <_usb_d_dev_handler+0x6c>)
    92ce:	4413      	add	r3, r2
    92d0:	3304      	adds	r3, #4
    92d2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    92d4:	683b      	ldr	r3, [r7, #0]
    92d6:	7c9b      	ldrb	r3, [r3, #18]
    92d8:	2bff      	cmp	r3, #255	; 0xff
    92da:	d005      	beq.n	92e8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    92dc:	88fb      	ldrh	r3, [r7, #6]
    92de:	6839      	ldr	r1, [r7, #0]
    92e0:	4618      	mov	r0, r3
    92e2:	4b09      	ldr	r3, [pc, #36]	; (9308 <_usb_d_dev_handler+0x70>)
    92e4:	4798      	blx	r3
    92e6:	e000      	b.n	92ea <_usb_d_dev_handler+0x52>
			continue;
    92e8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    92ea:	7bfb      	ldrb	r3, [r7, #15]
    92ec:	3301      	adds	r3, #1
    92ee:	73fb      	strb	r3, [r7, #15]
    92f0:	7bfb      	ldrb	r3, [r7, #15]
    92f2:	2b08      	cmp	r3, #8
    92f4:	d9e4      	bls.n	92c0 <_usb_d_dev_handler+0x28>
    92f6:	e000      	b.n	92fa <_usb_d_dev_handler+0x62>
			return;
    92f8:	bf00      	nop
	}
}
    92fa:	3710      	adds	r7, #16
    92fc:	46bd      	mov	sp, r7
    92fe:	bd80      	pop	{r7, pc}
    9300:	000087f1 	.word	0x000087f1
    9304:	20000938 	.word	0x20000938
    9308:	000091e1 	.word	0x000091e1

0000930c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    930c:	b580      	push	{r7, lr}
    930e:	b082      	sub	sp, #8
    9310:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9312:	2300      	movs	r3, #0
    9314:	71fb      	strb	r3, [r7, #7]
    9316:	e023      	b.n	9360 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9318:	79fa      	ldrb	r2, [r7, #7]
    931a:	4613      	mov	r3, r2
    931c:	009b      	lsls	r3, r3, #2
    931e:	4413      	add	r3, r2
    9320:	009b      	lsls	r3, r3, #2
    9322:	3310      	adds	r3, #16
    9324:	4a14      	ldr	r2, [pc, #80]	; (9378 <_usb_d_dev_reset_epts+0x6c>)
    9326:	4413      	add	r3, r2
    9328:	3304      	adds	r3, #4
    932a:	2103      	movs	r1, #3
    932c:	4618      	mov	r0, r3
    932e:	4b13      	ldr	r3, [pc, #76]	; (937c <_usb_d_dev_reset_epts+0x70>)
    9330:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9332:	79fa      	ldrb	r2, [r7, #7]
    9334:	4910      	ldr	r1, [pc, #64]	; (9378 <_usb_d_dev_reset_epts+0x6c>)
    9336:	4613      	mov	r3, r2
    9338:	009b      	lsls	r3, r3, #2
    933a:	4413      	add	r3, r2
    933c:	009b      	lsls	r3, r3, #2
    933e:	440b      	add	r3, r1
    9340:	3326      	adds	r3, #38	; 0x26
    9342:	22ff      	movs	r2, #255	; 0xff
    9344:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9346:	79fa      	ldrb	r2, [r7, #7]
    9348:	490b      	ldr	r1, [pc, #44]	; (9378 <_usb_d_dev_reset_epts+0x6c>)
    934a:	4613      	mov	r3, r2
    934c:	009b      	lsls	r3, r3, #2
    934e:	4413      	add	r3, r2
    9350:	009b      	lsls	r3, r3, #2
    9352:	440b      	add	r3, r1
    9354:	3327      	adds	r3, #39	; 0x27
    9356:	2200      	movs	r2, #0
    9358:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    935a:	79fb      	ldrb	r3, [r7, #7]
    935c:	3301      	adds	r3, #1
    935e:	71fb      	strb	r3, [r7, #7]
    9360:	79fb      	ldrb	r3, [r7, #7]
    9362:	2b08      	cmp	r3, #8
    9364:	d9d8      	bls.n	9318 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9366:	22a0      	movs	r2, #160	; 0xa0
    9368:	2100      	movs	r1, #0
    936a:	4805      	ldr	r0, [pc, #20]	; (9380 <_usb_d_dev_reset_epts+0x74>)
    936c:	4b05      	ldr	r3, [pc, #20]	; (9384 <_usb_d_dev_reset_epts+0x78>)
    936e:	4798      	blx	r3
}
    9370:	bf00      	nop
    9372:	3708      	adds	r7, #8
    9374:	46bd      	mov	sp, r7
    9376:	bd80      	pop	{r7, pc}
    9378:	20000938 	.word	0x20000938
    937c:	00009bd1 	.word	0x00009bd1
    9380:	20000a00 	.word	0x20000a00
    9384:	0000d229 	.word	0x0000d229

00009388 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9388:	b580      	push	{r7, lr}
    938a:	b084      	sub	sp, #16
    938c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    938e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9392:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9394:	2301      	movs	r3, #1
    9396:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9398:	2304      	movs	r3, #4
    939a:	713b      	strb	r3, [r7, #4]
    939c:	2300      	movs	r3, #0
    939e:	717b      	strb	r3, [r7, #5]
    93a0:	2300      	movs	r3, #0
    93a2:	71bb      	strb	r3, [r7, #6]
    93a4:	2300      	movs	r3, #0
    93a6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    93a8:	2101      	movs	r1, #1
    93aa:	68f8      	ldr	r0, [r7, #12]
    93ac:	4b26      	ldr	r3, [pc, #152]	; (9448 <_usb_d_dev_init+0xc0>)
    93ae:	4798      	blx	r3
    93b0:	4603      	mov	r3, r0
    93b2:	f083 0301 	eor.w	r3, r3, #1
    93b6:	b2db      	uxtb	r3, r3
    93b8:	2b00      	cmp	r3, #0
    93ba:	d011      	beq.n	93e0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    93bc:	2102      	movs	r1, #2
    93be:	68f8      	ldr	r0, [r7, #12]
    93c0:	4b22      	ldr	r3, [pc, #136]	; (944c <_usb_d_dev_init+0xc4>)
    93c2:	4798      	blx	r3
    93c4:	4603      	mov	r3, r0
    93c6:	2b00      	cmp	r3, #0
    93c8:	d006      	beq.n	93d8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    93ca:	68f8      	ldr	r0, [r7, #12]
    93cc:	4b20      	ldr	r3, [pc, #128]	; (9450 <_usb_d_dev_init+0xc8>)
    93ce:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    93d0:	2102      	movs	r1, #2
    93d2:	68f8      	ldr	r0, [r7, #12]
    93d4:	4b1f      	ldr	r3, [pc, #124]	; (9454 <_usb_d_dev_init+0xcc>)
    93d6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    93d8:	2101      	movs	r1, #1
    93da:	68f8      	ldr	r0, [r7, #12]
    93dc:	4b1e      	ldr	r3, [pc, #120]	; (9458 <_usb_d_dev_init+0xd0>)
    93de:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    93e0:	2101      	movs	r1, #1
    93e2:	68f8      	ldr	r0, [r7, #12]
    93e4:	4b1b      	ldr	r3, [pc, #108]	; (9454 <_usb_d_dev_init+0xcc>)
    93e6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    93e8:	4b1c      	ldr	r3, [pc, #112]	; (945c <_usb_d_dev_init+0xd4>)
    93ea:	4a1d      	ldr	r2, [pc, #116]	; (9460 <_usb_d_dev_init+0xd8>)
    93ec:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    93ee:	4b1b      	ldr	r3, [pc, #108]	; (945c <_usb_d_dev_init+0xd4>)
    93f0:	4a1b      	ldr	r2, [pc, #108]	; (9460 <_usb_d_dev_init+0xd8>)
    93f2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    93f4:	4b19      	ldr	r3, [pc, #100]	; (945c <_usb_d_dev_init+0xd4>)
    93f6:	4a1a      	ldr	r2, [pc, #104]	; (9460 <_usb_d_dev_init+0xd8>)
    93f8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    93fa:	4b18      	ldr	r3, [pc, #96]	; (945c <_usb_d_dev_init+0xd4>)
    93fc:	4a18      	ldr	r2, [pc, #96]	; (9460 <_usb_d_dev_init+0xd8>)
    93fe:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9400:	4b16      	ldr	r3, [pc, #88]	; (945c <_usb_d_dev_init+0xd4>)
    9402:	4a17      	ldr	r2, [pc, #92]	; (9460 <_usb_d_dev_init+0xd8>)
    9404:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9406:	4b17      	ldr	r3, [pc, #92]	; (9464 <_usb_d_dev_init+0xdc>)
    9408:	4798      	blx	r3

	_usb_load_calib();
    940a:	4b17      	ldr	r3, [pc, #92]	; (9468 <_usb_d_dev_init+0xe0>)
    940c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    940e:	2104      	movs	r1, #4
    9410:	68f8      	ldr	r0, [r7, #12]
    9412:	4b11      	ldr	r3, [pc, #68]	; (9458 <_usb_d_dev_init+0xd0>)
    9414:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9416:	4b15      	ldr	r3, [pc, #84]	; (946c <_usb_d_dev_init+0xe4>)
    9418:	4619      	mov	r1, r3
    941a:	68f8      	ldr	r0, [r7, #12]
    941c:	4b14      	ldr	r3, [pc, #80]	; (9470 <_usb_d_dev_init+0xe8>)
    941e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9420:	7afb      	ldrb	r3, [r7, #11]
    9422:	f107 0210 	add.w	r2, r7, #16
    9426:	4413      	add	r3, r2
    9428:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    942c:	f043 0301 	orr.w	r3, r3, #1
    9430:	b2db      	uxtb	r3, r3
    9432:	b29b      	uxth	r3, r3
    9434:	4619      	mov	r1, r3
    9436:	68f8      	ldr	r0, [r7, #12]
    9438:	4b0e      	ldr	r3, [pc, #56]	; (9474 <_usb_d_dev_init+0xec>)
    943a:	4798      	blx	r3

	return ERR_NONE;
    943c:	2300      	movs	r3, #0
}
    943e:	4618      	mov	r0, r3
    9440:	3710      	adds	r7, #16
    9442:	46bd      	mov	sp, r7
    9444:	bd80      	pop	{r7, pc}
    9446:	bf00      	nop
    9448:	00007a21 	.word	0x00007a21
    944c:	00007d71 	.word	0x00007d71
    9450:	00007d45 	.word	0x00007d45
    9454:	000079f7 	.word	0x000079f7
    9458:	00007da1 	.word	0x00007da1
    945c:	20000938 	.word	0x20000938
    9460:	00007e69 	.word	0x00007e69
    9464:	0000930d 	.word	0x0000930d
    9468:	00007e81 	.word	0x00007e81
    946c:	20000a00 	.word	0x20000a00
    9470:	00007e4d 	.word	0x00007e4d
    9474:	00007e11 	.word	0x00007e11

00009478 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9478:	b580      	push	{r7, lr}
    947a:	b082      	sub	sp, #8
    947c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    947e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9482:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9484:	2103      	movs	r1, #3
    9486:	6878      	ldr	r0, [r7, #4]
    9488:	4b17      	ldr	r3, [pc, #92]	; (94e8 <_usb_d_dev_enable+0x70>)
    948a:	4798      	blx	r3
    948c:	4603      	mov	r3, r0
    948e:	2b00      	cmp	r3, #0
    9490:	d002      	beq.n	9498 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9492:	f06f 0310 	mvn.w	r3, #16
    9496:	e023      	b.n	94e0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9498:	6878      	ldr	r0, [r7, #4]
    949a:	4b14      	ldr	r3, [pc, #80]	; (94ec <_usb_d_dev_enable+0x74>)
    949c:	4798      	blx	r3
    949e:	4603      	mov	r3, r0
    94a0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    94a2:	78fb      	ldrb	r3, [r7, #3]
    94a4:	f003 0302 	and.w	r3, r3, #2
    94a8:	2b00      	cmp	r3, #0
    94aa:	d107      	bne.n	94bc <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    94ac:	78fb      	ldrb	r3, [r7, #3]
    94ae:	f043 0302 	orr.w	r3, r3, #2
    94b2:	b2db      	uxtb	r3, r3
    94b4:	4619      	mov	r1, r3
    94b6:	6878      	ldr	r0, [r7, #4]
    94b8:	4b0d      	ldr	r3, [pc, #52]	; (94f0 <_usb_d_dev_enable+0x78>)
    94ba:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    94bc:	2050      	movs	r0, #80	; 0x50
    94be:	4b0d      	ldr	r3, [pc, #52]	; (94f4 <_usb_d_dev_enable+0x7c>)
    94c0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    94c2:	2051      	movs	r0, #81	; 0x51
    94c4:	4b0b      	ldr	r3, [pc, #44]	; (94f4 <_usb_d_dev_enable+0x7c>)
    94c6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    94c8:	2052      	movs	r0, #82	; 0x52
    94ca:	4b0a      	ldr	r3, [pc, #40]	; (94f4 <_usb_d_dev_enable+0x7c>)
    94cc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    94ce:	2053      	movs	r0, #83	; 0x53
    94d0:	4b08      	ldr	r3, [pc, #32]	; (94f4 <_usb_d_dev_enable+0x7c>)
    94d2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    94d4:	f240 218d 	movw	r1, #653	; 0x28d
    94d8:	6878      	ldr	r0, [r7, #4]
    94da:	4b07      	ldr	r3, [pc, #28]	; (94f8 <_usb_d_dev_enable+0x80>)
    94dc:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    94de:	2300      	movs	r3, #0
}
    94e0:	4618      	mov	r0, r3
    94e2:	3708      	adds	r7, #8
    94e4:	46bd      	mov	sp, r7
    94e6:	bd80      	pop	{r7, pc}
    94e8:	00007d1b 	.word	0x00007d1b
    94ec:	00007dc9 	.word	0x00007dc9
    94f0:	00007da1 	.word	0x00007da1
    94f4:	0000792d 	.word	0x0000792d
    94f8:	00007cc5 	.word	0x00007cc5

000094fc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    94fc:	b580      	push	{r7, lr}
    94fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9500:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9504:	4b01      	ldr	r3, [pc, #4]	; (950c <_usb_d_dev_attach+0x10>)
    9506:	4798      	blx	r3
}
    9508:	bf00      	nop
    950a:	bd80      	pop	{r7, pc}
    950c:	00007ded 	.word	0x00007ded

00009510 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9510:	b580      	push	{r7, lr}
    9512:	b082      	sub	sp, #8
    9514:	af00      	add	r7, sp, #0
    9516:	4603      	mov	r3, r0
    9518:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    951a:	79fb      	ldrb	r3, [r7, #7]
    951c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9520:	b2db      	uxtb	r3, r3
    9522:	4619      	mov	r1, r3
    9524:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9528:	4b02      	ldr	r3, [pc, #8]	; (9534 <_usb_d_dev_set_address+0x24>)
    952a:	4798      	blx	r3
}
    952c:	bf00      	nop
    952e:	3708      	adds	r7, #8
    9530:	46bd      	mov	sp, r7
    9532:	bd80      	pop	{r7, pc}
    9534:	00007e2f 	.word	0x00007e2f

00009538 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9538:	b590      	push	{r4, r7, lr}
    953a:	b085      	sub	sp, #20
    953c:	af00      	add	r7, sp, #0
    953e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9540:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9544:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	7c9b      	ldrb	r3, [r3, #18]
    954a:	f003 030f 	and.w	r3, r3, #15
    954e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9550:	687b      	ldr	r3, [r7, #4]
    9552:	68db      	ldr	r3, [r3, #12]
    9554:	461a      	mov	r2, r3
    9556:	7afb      	ldrb	r3, [r7, #11]
    9558:	2100      	movs	r1, #0
    955a:	4618      	mov	r0, r3
    955c:	4b0f      	ldr	r3, [pc, #60]	; (959c <_usb_d_dev_trans_setup+0x64>)
    955e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	8a1b      	ldrh	r3, [r3, #16]
    9564:	461a      	mov	r2, r3
    9566:	7af8      	ldrb	r0, [r7, #11]
    9568:	2300      	movs	r3, #0
    956a:	2100      	movs	r1, #0
    956c:	4c0c      	ldr	r4, [pc, #48]	; (95a0 <_usb_d_dev_trans_setup+0x68>)
    956e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9570:	7afb      	ldrb	r3, [r7, #11]
    9572:	22b0      	movs	r2, #176	; 0xb0
    9574:	4619      	mov	r1, r3
    9576:	68f8      	ldr	r0, [r7, #12]
    9578:	4b0a      	ldr	r3, [pc, #40]	; (95a4 <_usb_d_dev_trans_setup+0x6c>)
    957a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    957c:	7afb      	ldrb	r3, [r7, #11]
    957e:	2200      	movs	r2, #0
    9580:	2100      	movs	r1, #0
    9582:	4618      	mov	r0, r3
    9584:	4b08      	ldr	r3, [pc, #32]	; (95a8 <_usb_d_dev_trans_setup+0x70>)
    9586:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9588:	7afb      	ldrb	r3, [r7, #11]
    958a:	2210      	movs	r2, #16
    958c:	4619      	mov	r1, r3
    958e:	68f8      	ldr	r0, [r7, #12]
    9590:	4b06      	ldr	r3, [pc, #24]	; (95ac <_usb_d_dev_trans_setup+0x74>)
    9592:	4798      	blx	r3
}
    9594:	bf00      	nop
    9596:	3714      	adds	r7, #20
    9598:	46bd      	mov	sp, r7
    959a:	bd90      	pop	{r4, r7, pc}
    959c:	000082cd 	.word	0x000082cd
    95a0:	00008455 	.word	0x00008455
    95a4:	00007b2d 	.word	0x00007b2d
    95a8:	00008525 	.word	0x00008525
    95ac:	00007b81 	.word	0x00007b81

000095b0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    95b0:	b580      	push	{r7, lr}
    95b2:	b088      	sub	sp, #32
    95b4:	af00      	add	r7, sp, #0
    95b6:	4603      	mov	r3, r0
    95b8:	71fb      	strb	r3, [r7, #7]
    95ba:	460b      	mov	r3, r1
    95bc:	71bb      	strb	r3, [r7, #6]
    95be:	4613      	mov	r3, r2
    95c0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    95c2:	79fb      	ldrb	r3, [r7, #7]
    95c4:	f003 030f 	and.w	r3, r3, #15
    95c8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    95ca:	79fb      	ldrb	r3, [r7, #7]
    95cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    95d0:	2b00      	cmp	r3, #0
    95d2:	bf14      	ite	ne
    95d4:	2301      	movne	r3, #1
    95d6:	2300      	moveq	r3, #0
    95d8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    95da:	7fba      	ldrb	r2, [r7, #30]
    95dc:	7ffb      	ldrb	r3, [r7, #31]
    95de:	4611      	mov	r1, r2
    95e0:	4618      	mov	r0, r3
    95e2:	4b3e      	ldr	r3, [pc, #248]	; (96dc <_usb_d_dev_ep_init+0x12c>)
    95e4:	4798      	blx	r3
    95e6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    95e8:	79bb      	ldrb	r3, [r7, #6]
    95ea:	f003 0303 	and.w	r3, r3, #3
    95ee:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    95f0:	7ffa      	ldrb	r2, [r7, #31]
    95f2:	4613      	mov	r3, r2
    95f4:	005b      	lsls	r3, r3, #1
    95f6:	4413      	add	r3, r2
    95f8:	009b      	lsls	r3, r3, #2
    95fa:	4a39      	ldr	r2, [pc, #228]	; (96e0 <_usb_d_dev_ep_init+0x130>)
    95fc:	4413      	add	r3, r2
    95fe:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9600:	7ffb      	ldrb	r3, [r7, #31]
    9602:	2b04      	cmp	r3, #4
    9604:	d902      	bls.n	960c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9606:	f06f 0311 	mvn.w	r3, #17
    960a:	e063      	b.n	96d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    960c:	69bb      	ldr	r3, [r7, #24]
    960e:	7c9b      	ldrb	r3, [r3, #18]
    9610:	2bff      	cmp	r3, #255	; 0xff
    9612:	d002      	beq.n	961a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9614:	f06f 0313 	mvn.w	r3, #19
    9618:	e05c      	b.n	96d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    961a:	7dfb      	ldrb	r3, [r7, #23]
    961c:	2b00      	cmp	r3, #0
    961e:	d11f      	bne.n	9660 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9620:	7fbb      	ldrb	r3, [r7, #30]
    9622:	2b00      	cmp	r3, #0
    9624:	bf14      	ite	ne
    9626:	2301      	movne	r3, #1
    9628:	2300      	moveq	r3, #0
    962a:	b2db      	uxtb	r3, r3
    962c:	f083 0301 	eor.w	r3, r3, #1
    9630:	b2db      	uxtb	r3, r3
    9632:	f003 0301 	and.w	r3, r3, #1
    9636:	b2da      	uxtb	r2, r3
    9638:	7ffb      	ldrb	r3, [r7, #31]
    963a:	4611      	mov	r1, r2
    963c:	4618      	mov	r0, r3
    963e:	4b27      	ldr	r3, [pc, #156]	; (96dc <_usb_d_dev_ep_init+0x12c>)
    9640:	4798      	blx	r3
    9642:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9644:	68fb      	ldr	r3, [r7, #12]
    9646:	7c9b      	ldrb	r3, [r3, #18]
    9648:	2bff      	cmp	r3, #255	; 0xff
    964a:	d002      	beq.n	9652 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    964c:	f06f 0313 	mvn.w	r3, #19
    9650:	e040      	b.n	96d4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9652:	693b      	ldr	r3, [r7, #16]
    9654:	681b      	ldr	r3, [r3, #0]
    9656:	2b00      	cmp	r3, #0
    9658:	d102      	bne.n	9660 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    965a:	f06f 0312 	mvn.w	r3, #18
    965e:	e039      	b.n	96d4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9660:	7fbb      	ldrb	r3, [r7, #30]
    9662:	2b00      	cmp	r3, #0
    9664:	d007      	beq.n	9676 <_usb_d_dev_ep_init+0xc6>
    9666:	693b      	ldr	r3, [r7, #16]
    9668:	685b      	ldr	r3, [r3, #4]
    966a:	2b00      	cmp	r3, #0
    966c:	bf14      	ite	ne
    966e:	2301      	movne	r3, #1
    9670:	2300      	moveq	r3, #0
    9672:	b2db      	uxtb	r3, r3
    9674:	e006      	b.n	9684 <_usb_d_dev_ep_init+0xd4>
    9676:	693b      	ldr	r3, [r7, #16]
    9678:	681b      	ldr	r3, [r3, #0]
    967a:	2b00      	cmp	r3, #0
    967c:	bf14      	ite	ne
    967e:	2301      	movne	r3, #1
    9680:	2300      	moveq	r3, #0
    9682:	b2db      	uxtb	r3, r3
    9684:	2b00      	cmp	r3, #0
    9686:	d00f      	beq.n	96a8 <_usb_d_dev_ep_init+0xf8>
    9688:	7fbb      	ldrb	r3, [r7, #30]
    968a:	2b00      	cmp	r3, #0
    968c:	d003      	beq.n	9696 <_usb_d_dev_ep_init+0xe6>
    968e:	693b      	ldr	r3, [r7, #16]
    9690:	895b      	ldrh	r3, [r3, #10]
    9692:	461a      	mov	r2, r3
    9694:	e002      	b.n	969c <_usb_d_dev_ep_init+0xec>
    9696:	693b      	ldr	r3, [r7, #16]
    9698:	891b      	ldrh	r3, [r3, #8]
    969a:	461a      	mov	r2, r3
    969c:	88bb      	ldrh	r3, [r7, #4]
    969e:	429a      	cmp	r2, r3
    96a0:	da02      	bge.n	96a8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    96a2:	f06f 0312 	mvn.w	r3, #18
    96a6:	e015      	b.n	96d4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    96a8:	7fbb      	ldrb	r3, [r7, #30]
    96aa:	2b00      	cmp	r3, #0
    96ac:	d002      	beq.n	96b4 <_usb_d_dev_ep_init+0x104>
    96ae:	693b      	ldr	r3, [r7, #16]
    96b0:	685b      	ldr	r3, [r3, #4]
    96b2:	e001      	b.n	96b8 <_usb_d_dev_ep_init+0x108>
    96b4:	693b      	ldr	r3, [r7, #16]
    96b6:	681b      	ldr	r3, [r3, #0]
    96b8:	69ba      	ldr	r2, [r7, #24]
    96ba:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    96bc:	69bb      	ldr	r3, [r7, #24]
    96be:	88ba      	ldrh	r2, [r7, #4]
    96c0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    96c2:	7dfb      	ldrb	r3, [r7, #23]
    96c4:	3301      	adds	r3, #1
    96c6:	b2da      	uxtb	r2, r3
    96c8:	69bb      	ldr	r3, [r7, #24]
    96ca:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    96cc:	69bb      	ldr	r3, [r7, #24]
    96ce:	79fa      	ldrb	r2, [r7, #7]
    96d0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    96d2:	2300      	movs	r3, #0
}
    96d4:	4618      	mov	r0, r3
    96d6:	3720      	adds	r7, #32
    96d8:	46bd      	mov	sp, r7
    96da:	bd80      	pop	{r7, pc}
    96dc:	000085e1 	.word	0x000085e1
    96e0:	0000d738 	.word	0x0000d738

000096e4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    96e4:	b580      	push	{r7, lr}
    96e6:	b086      	sub	sp, #24
    96e8:	af00      	add	r7, sp, #0
    96ea:	4603      	mov	r3, r0
    96ec:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    96ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96f2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    96f4:	79fb      	ldrb	r3, [r7, #7]
    96f6:	f003 030f 	and.w	r3, r3, #15
    96fa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    96fc:	79fb      	ldrb	r3, [r7, #7]
    96fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9702:	2b00      	cmp	r3, #0
    9704:	bf14      	ite	ne
    9706:	2301      	movne	r3, #1
    9708:	2300      	moveq	r3, #0
    970a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    970c:	7cba      	ldrb	r2, [r7, #18]
    970e:	7cfb      	ldrb	r3, [r7, #19]
    9710:	4611      	mov	r1, r2
    9712:	4618      	mov	r0, r3
    9714:	4b2a      	ldr	r3, [pc, #168]	; (97c0 <_usb_d_dev_ep_deinit+0xdc>)
    9716:	4798      	blx	r3
    9718:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    971a:	7cfb      	ldrb	r3, [r7, #19]
    971c:	2b04      	cmp	r3, #4
    971e:	d84a      	bhi.n	97b6 <_usb_d_dev_ep_deinit+0xd2>
    9720:	68fb      	ldr	r3, [r7, #12]
    9722:	7c9b      	ldrb	r3, [r3, #18]
    9724:	2bff      	cmp	r3, #255	; 0xff
    9726:	d046      	beq.n	97b6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9728:	7cbb      	ldrb	r3, [r7, #18]
    972a:	2203      	movs	r2, #3
    972c:	4619      	mov	r1, r3
    972e:	68f8      	ldr	r0, [r7, #12]
    9730:	4b24      	ldr	r3, [pc, #144]	; (97c4 <_usb_d_dev_ep_deinit+0xe0>)
    9732:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9734:	68fb      	ldr	r3, [r7, #12]
    9736:	7cdb      	ldrb	r3, [r3, #19]
    9738:	f003 0307 	and.w	r3, r3, #7
    973c:	b2db      	uxtb	r3, r3
    973e:	2b01      	cmp	r3, #1
    9740:	d107      	bne.n	9752 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9742:	79fb      	ldrb	r3, [r7, #7]
    9744:	697a      	ldr	r2, [r7, #20]
    9746:	3308      	adds	r3, #8
    9748:	015b      	lsls	r3, r3, #5
    974a:	4413      	add	r3, r2
    974c:	2200      	movs	r2, #0
    974e:	701a      	strb	r2, [r3, #0]
    9750:	e02a      	b.n	97a8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9752:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9756:	2b00      	cmp	r3, #0
    9758:	da15      	bge.n	9786 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    975a:	79fb      	ldrb	r3, [r7, #7]
    975c:	f003 030f 	and.w	r3, r3, #15
    9760:	79fa      	ldrb	r2, [r7, #7]
    9762:	f002 020f 	and.w	r2, r2, #15
    9766:	6979      	ldr	r1, [r7, #20]
    9768:	3208      	adds	r2, #8
    976a:	0152      	lsls	r2, r2, #5
    976c:	440a      	add	r2, r1
    976e:	7812      	ldrb	r2, [r2, #0]
    9770:	b2d2      	uxtb	r2, r2
    9772:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9776:	b2d1      	uxtb	r1, r2
    9778:	697a      	ldr	r2, [r7, #20]
    977a:	3308      	adds	r3, #8
    977c:	015b      	lsls	r3, r3, #5
    977e:	4413      	add	r3, r2
    9780:	460a      	mov	r2, r1
    9782:	701a      	strb	r2, [r3, #0]
    9784:	e010      	b.n	97a8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9786:	79fb      	ldrb	r3, [r7, #7]
    9788:	79fa      	ldrb	r2, [r7, #7]
    978a:	6979      	ldr	r1, [r7, #20]
    978c:	3208      	adds	r2, #8
    978e:	0152      	lsls	r2, r2, #5
    9790:	440a      	add	r2, r1
    9792:	7812      	ldrb	r2, [r2, #0]
    9794:	b2d2      	uxtb	r2, r2
    9796:	f022 0207 	bic.w	r2, r2, #7
    979a:	b2d1      	uxtb	r1, r2
    979c:	697a      	ldr	r2, [r7, #20]
    979e:	3308      	adds	r3, #8
    97a0:	015b      	lsls	r3, r3, #5
    97a2:	4413      	add	r3, r2
    97a4:	460a      	mov	r2, r1
    97a6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    97a8:	68fb      	ldr	r3, [r7, #12]
    97aa:	2200      	movs	r2, #0
    97ac:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    97ae:	68fb      	ldr	r3, [r7, #12]
    97b0:	22ff      	movs	r2, #255	; 0xff
    97b2:	749a      	strb	r2, [r3, #18]
    97b4:	e000      	b.n	97b8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    97b6:	bf00      	nop
}
    97b8:	3718      	adds	r7, #24
    97ba:	46bd      	mov	sp, r7
    97bc:	bd80      	pop	{r7, pc}
    97be:	bf00      	nop
    97c0:	000085e1 	.word	0x000085e1
    97c4:	00009c19 	.word	0x00009c19

000097c8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    97c8:	b5b0      	push	{r4, r5, r7, lr}
    97ca:	b088      	sub	sp, #32
    97cc:	af00      	add	r7, sp, #0
    97ce:	4603      	mov	r3, r0
    97d0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    97d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97d6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    97d8:	79fb      	ldrb	r3, [r7, #7]
    97da:	f003 030f 	and.w	r3, r3, #15
    97de:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    97e0:	79fb      	ldrb	r3, [r7, #7]
    97e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    97e6:	2b00      	cmp	r3, #0
    97e8:	bf14      	ite	ne
    97ea:	2301      	movne	r3, #1
    97ec:	2300      	moveq	r3, #0
    97ee:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    97f0:	7eba      	ldrb	r2, [r7, #26]
    97f2:	7efb      	ldrb	r3, [r7, #27]
    97f4:	4611      	mov	r1, r2
    97f6:	4618      	mov	r0, r3
    97f8:	4b70      	ldr	r3, [pc, #448]	; (99bc <_usb_d_dev_ep_enable+0x1f4>)
    97fa:	4798      	blx	r3
    97fc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    97fe:	7efb      	ldrb	r3, [r7, #27]
    9800:	4619      	mov	r1, r3
    9802:	69f8      	ldr	r0, [r7, #28]
    9804:	4b6e      	ldr	r3, [pc, #440]	; (99c0 <_usb_d_dev_ep_enable+0x1f8>)
    9806:	4798      	blx	r3
    9808:	4603      	mov	r3, r0
    980a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    980c:	7efb      	ldrb	r3, [r7, #27]
    980e:	2b04      	cmp	r3, #4
    9810:	d803      	bhi.n	981a <_usb_d_dev_ep_enable+0x52>
    9812:	697b      	ldr	r3, [r7, #20]
    9814:	7c9b      	ldrb	r3, [r3, #18]
    9816:	2bff      	cmp	r3, #255	; 0xff
    9818:	d102      	bne.n	9820 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    981a:	f06f 0311 	mvn.w	r3, #17
    981e:	e0c8      	b.n	99b2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9820:	7efb      	ldrb	r3, [r7, #27]
    9822:	015b      	lsls	r3, r3, #5
    9824:	4a67      	ldr	r2, [pc, #412]	; (99c4 <_usb_d_dev_ep_enable+0x1fc>)
    9826:	4413      	add	r3, r2
    9828:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    982a:	697b      	ldr	r3, [r7, #20]
    982c:	7cdb      	ldrb	r3, [r3, #19]
    982e:	f003 0307 	and.w	r3, r3, #7
    9832:	b2db      	uxtb	r3, r3
    9834:	2b01      	cmp	r3, #1
    9836:	d14b      	bne.n	98d0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9838:	7cfb      	ldrb	r3, [r7, #19]
    983a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    983e:	2b00      	cmp	r3, #0
    9840:	d002      	beq.n	9848 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9842:	f06f 0313 	mvn.w	r3, #19
    9846:	e0b4      	b.n	99b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9848:	7efb      	ldrb	r3, [r7, #27]
    984a:	2211      	movs	r2, #17
    984c:	4619      	mov	r1, r3
    984e:	69f8      	ldr	r0, [r7, #28]
    9850:	4b5d      	ldr	r3, [pc, #372]	; (99c8 <_usb_d_dev_ep_enable+0x200>)
    9852:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9854:	697b      	ldr	r3, [r7, #20]
    9856:	8a1b      	ldrh	r3, [r3, #16]
    9858:	039b      	lsls	r3, r3, #14
    985a:	4c5c      	ldr	r4, [pc, #368]	; (99cc <_usb_d_dev_ep_enable+0x204>)
    985c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    985e:	697b      	ldr	r3, [r7, #20]
    9860:	8a1b      	ldrh	r3, [r3, #16]
    9862:	4618      	mov	r0, r3
    9864:	4b5a      	ldr	r3, [pc, #360]	; (99d0 <_usb_d_dev_ep_enable+0x208>)
    9866:	4798      	blx	r3
    9868:	4603      	mov	r3, r0
    986a:	071b      	lsls	r3, r3, #28
    986c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9870:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9874:	68fb      	ldr	r3, [r7, #12]
    9876:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9878:	68fb      	ldr	r3, [r7, #12]
    987a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    987e:	697b      	ldr	r3, [r7, #20]
    9880:	8a1b      	ldrh	r3, [r3, #16]
    9882:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9886:	697b      	ldr	r3, [r7, #20]
    9888:	8a1b      	ldrh	r3, [r3, #16]
    988a:	4618      	mov	r0, r3
    988c:	4b50      	ldr	r3, [pc, #320]	; (99d0 <_usb_d_dev_ep_enable+0x208>)
    988e:	4798      	blx	r3
    9890:	4603      	mov	r3, r0
    9892:	071b      	lsls	r3, r3, #28
    9894:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9898:	432b      	orrs	r3, r5
    989a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    989c:	7efb      	ldrb	r3, [r7, #27]
    989e:	2200      	movs	r2, #0
    98a0:	2100      	movs	r1, #0
    98a2:	4618      	mov	r0, r3
    98a4:	4b4b      	ldr	r3, [pc, #300]	; (99d4 <_usb_d_dev_ep_enable+0x20c>)
    98a6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    98a8:	7efb      	ldrb	r3, [r7, #27]
    98aa:	2200      	movs	r2, #0
    98ac:	2101      	movs	r1, #1
    98ae:	4618      	mov	r0, r3
    98b0:	4b49      	ldr	r3, [pc, #292]	; (99d8 <_usb_d_dev_ep_enable+0x210>)
    98b2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    98b4:	7efb      	ldrb	r3, [r7, #27]
    98b6:	2100      	movs	r1, #0
    98b8:	4618      	mov	r0, r3
    98ba:	4b48      	ldr	r3, [pc, #288]	; (99dc <_usb_d_dev_ep_enable+0x214>)
    98bc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    98be:	7efb      	ldrb	r3, [r7, #27]
    98c0:	2101      	movs	r1, #1
    98c2:	4618      	mov	r0, r3
    98c4:	4b45      	ldr	r3, [pc, #276]	; (99dc <_usb_d_dev_ep_enable+0x214>)
    98c6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    98c8:	6978      	ldr	r0, [r7, #20]
    98ca:	4b45      	ldr	r3, [pc, #276]	; (99e0 <_usb_d_dev_ep_enable+0x218>)
    98cc:	4798      	blx	r3
    98ce:	e06f      	b.n	99b0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    98d0:	7ebb      	ldrb	r3, [r7, #26]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d038      	beq.n	9948 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    98d6:	7cfb      	ldrb	r3, [r7, #19]
    98d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    98dc:	2b00      	cmp	r3, #0
    98de:	d002      	beq.n	98e6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    98e0:	f06f 0313 	mvn.w	r3, #19
    98e4:	e065      	b.n	99b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    98e6:	697b      	ldr	r3, [r7, #20]
    98e8:	7cdb      	ldrb	r3, [r3, #19]
    98ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    98ee:	b2db      	uxtb	r3, r3
    98f0:	011b      	lsls	r3, r3, #4
    98f2:	b2db      	uxtb	r3, r3
    98f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    98f8:	b2da      	uxtb	r2, r3
    98fa:	7cfb      	ldrb	r3, [r7, #19]
    98fc:	4313      	orrs	r3, r2
    98fe:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9900:	7cfa      	ldrb	r2, [r7, #19]
    9902:	7efb      	ldrb	r3, [r7, #27]
    9904:	4619      	mov	r1, r3
    9906:	69f8      	ldr	r0, [r7, #28]
    9908:	4b2f      	ldr	r3, [pc, #188]	; (99c8 <_usb_d_dev_ep_enable+0x200>)
    990a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    990c:	68fb      	ldr	r3, [r7, #12]
    990e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9912:	697b      	ldr	r3, [r7, #20]
    9914:	8a1b      	ldrh	r3, [r3, #16]
    9916:	f3c3 050d 	ubfx	r5, r3, #0, #14
    991a:	697b      	ldr	r3, [r7, #20]
    991c:	8a1b      	ldrh	r3, [r3, #16]
    991e:	4618      	mov	r0, r3
    9920:	4b2b      	ldr	r3, [pc, #172]	; (99d0 <_usb_d_dev_ep_enable+0x208>)
    9922:	4798      	blx	r3
    9924:	4603      	mov	r3, r0
    9926:	071b      	lsls	r3, r3, #28
    9928:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    992c:	432b      	orrs	r3, r5
    992e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9930:	7efb      	ldrb	r3, [r7, #27]
    9932:	2200      	movs	r2, #0
    9934:	2101      	movs	r1, #1
    9936:	4618      	mov	r0, r3
    9938:	4b27      	ldr	r3, [pc, #156]	; (99d8 <_usb_d_dev_ep_enable+0x210>)
    993a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    993c:	7efb      	ldrb	r3, [r7, #27]
    993e:	2101      	movs	r1, #1
    9940:	4618      	mov	r0, r3
    9942:	4b26      	ldr	r3, [pc, #152]	; (99dc <_usb_d_dev_ep_enable+0x214>)
    9944:	4798      	blx	r3
    9946:	e033      	b.n	99b0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9948:	7cfb      	ldrb	r3, [r7, #19]
    994a:	f003 0307 	and.w	r3, r3, #7
    994e:	2b00      	cmp	r3, #0
    9950:	d002      	beq.n	9958 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9952:	f06f 0313 	mvn.w	r3, #19
    9956:	e02c      	b.n	99b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9958:	697b      	ldr	r3, [r7, #20]
    995a:	7cdb      	ldrb	r3, [r3, #19]
    995c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9960:	b2db      	uxtb	r3, r3
    9962:	461a      	mov	r2, r3
    9964:	7cfb      	ldrb	r3, [r7, #19]
    9966:	4313      	orrs	r3, r2
    9968:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    996a:	7cfa      	ldrb	r2, [r7, #19]
    996c:	7efb      	ldrb	r3, [r7, #27]
    996e:	4619      	mov	r1, r3
    9970:	69f8      	ldr	r0, [r7, #28]
    9972:	4b15      	ldr	r3, [pc, #84]	; (99c8 <_usb_d_dev_ep_enable+0x200>)
    9974:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9976:	697b      	ldr	r3, [r7, #20]
    9978:	8a1b      	ldrh	r3, [r3, #16]
    997a:	039b      	lsls	r3, r3, #14
    997c:	4c13      	ldr	r4, [pc, #76]	; (99cc <_usb_d_dev_ep_enable+0x204>)
    997e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9980:	697b      	ldr	r3, [r7, #20]
    9982:	8a1b      	ldrh	r3, [r3, #16]
    9984:	4618      	mov	r0, r3
    9986:	4b12      	ldr	r3, [pc, #72]	; (99d0 <_usb_d_dev_ep_enable+0x208>)
    9988:	4798      	blx	r3
    998a:	4603      	mov	r3, r0
    998c:	071b      	lsls	r3, r3, #28
    998e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9992:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9996:	68fb      	ldr	r3, [r7, #12]
    9998:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    999a:	7efb      	ldrb	r3, [r7, #27]
    999c:	2200      	movs	r2, #0
    999e:	2100      	movs	r1, #0
    99a0:	4618      	mov	r0, r3
    99a2:	4b0c      	ldr	r3, [pc, #48]	; (99d4 <_usb_d_dev_ep_enable+0x20c>)
    99a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    99a6:	7efb      	ldrb	r3, [r7, #27]
    99a8:	2100      	movs	r1, #0
    99aa:	4618      	mov	r0, r3
    99ac:	4b0b      	ldr	r3, [pc, #44]	; (99dc <_usb_d_dev_ep_enable+0x214>)
    99ae:	4798      	blx	r3
	}

	return USB_OK;
    99b0:	2300      	movs	r3, #0
}
    99b2:	4618      	mov	r0, r3
    99b4:	3720      	adds	r7, #32
    99b6:	46bd      	mov	sp, r7
    99b8:	bdb0      	pop	{r4, r5, r7, pc}
    99ba:	bf00      	nop
    99bc:	000085e1 	.word	0x000085e1
    99c0:	00007c67 	.word	0x00007c67
    99c4:	20000a00 	.word	0x20000a00
    99c8:	00007c3d 	.word	0x00007c3d
    99cc:	0fffc000 	.word	0x0fffc000
    99d0:	0000857d 	.word	0x0000857d
    99d4:	00008525 	.word	0x00008525
    99d8:	000084cd 	.word	0x000084cd
    99dc:	00008495 	.word	0x00008495
    99e0:	00009539 	.word	0x00009539

000099e4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    99e4:	b580      	push	{r7, lr}
    99e6:	b084      	sub	sp, #16
    99e8:	af00      	add	r7, sp, #0
    99ea:	6078      	str	r0, [r7, #4]
    99ec:	460b      	mov	r3, r1
    99ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	7c9b      	ldrb	r3, [r3, #18]
    99f4:	f003 030f 	and.w	r3, r3, #15
    99f8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    99fa:	78fa      	ldrb	r2, [r7, #3]
    99fc:	7bfb      	ldrb	r3, [r7, #15]
    99fe:	4611      	mov	r1, r2
    9a00:	4618      	mov	r0, r3
    9a02:	4b03      	ldr	r3, [pc, #12]	; (9a10 <_usb_d_dev_ep_stall_get+0x2c>)
    9a04:	4798      	blx	r3
    9a06:	4603      	mov	r3, r0
}
    9a08:	4618      	mov	r0, r3
    9a0a:	3710      	adds	r7, #16
    9a0c:	46bd      	mov	sp, r7
    9a0e:	bd80      	pop	{r7, pc}
    9a10:	000080d5 	.word	0x000080d5

00009a14 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9a14:	b580      	push	{r7, lr}
    9a16:	b084      	sub	sp, #16
    9a18:	af00      	add	r7, sp, #0
    9a1a:	6078      	str	r0, [r7, #4]
    9a1c:	460b      	mov	r3, r1
    9a1e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a20:	687b      	ldr	r3, [r7, #4]
    9a22:	7c9b      	ldrb	r3, [r3, #18]
    9a24:	f003 030f 	and.w	r3, r3, #15
    9a28:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9a2a:	78f9      	ldrb	r1, [r7, #3]
    9a2c:	7bfb      	ldrb	r3, [r7, #15]
    9a2e:	2201      	movs	r2, #1
    9a30:	4618      	mov	r0, r3
    9a32:	4b0a      	ldr	r3, [pc, #40]	; (9a5c <_usb_d_dev_ep_stall_set+0x48>)
    9a34:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9a36:	78fb      	ldrb	r3, [r7, #3]
    9a38:	2220      	movs	r2, #32
    9a3a:	409a      	lsls	r2, r3
    9a3c:	7bfb      	ldrb	r3, [r7, #15]
    9a3e:	4611      	mov	r1, r2
    9a40:	4618      	mov	r0, r3
    9a42:	4b07      	ldr	r3, [pc, #28]	; (9a60 <_usb_d_dev_ep_stall_set+0x4c>)
    9a44:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9a46:	687a      	ldr	r2, [r7, #4]
    9a48:	7cd3      	ldrb	r3, [r2, #19]
    9a4a:	f043 0308 	orr.w	r3, r3, #8
    9a4e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9a50:	2300      	movs	r3, #0
}
    9a52:	4618      	mov	r0, r3
    9a54:	3710      	adds	r7, #16
    9a56:	46bd      	mov	sp, r7
    9a58:	bd80      	pop	{r7, pc}
    9a5a:	bf00      	nop
    9a5c:	0000807d 	.word	0x0000807d
    9a60:	00007ffd 	.word	0x00007ffd

00009a64 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9a64:	b580      	push	{r7, lr}
    9a66:	b084      	sub	sp, #16
    9a68:	af00      	add	r7, sp, #0
    9a6a:	6078      	str	r0, [r7, #4]
    9a6c:	460b      	mov	r3, r1
    9a6e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	7c9b      	ldrb	r3, [r3, #18]
    9a74:	f003 030f 	and.w	r3, r3, #15
    9a78:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9a7a:	78fa      	ldrb	r2, [r7, #3]
    9a7c:	7bfb      	ldrb	r3, [r7, #15]
    9a7e:	4611      	mov	r1, r2
    9a80:	4618      	mov	r0, r3
    9a82:	4b28      	ldr	r3, [pc, #160]	; (9b24 <_usb_d_dev_ep_stall_clr+0xc0>)
    9a84:	4798      	blx	r3
    9a86:	4603      	mov	r3, r0
    9a88:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9a8a:	7bbb      	ldrb	r3, [r7, #14]
    9a8c:	f083 0301 	eor.w	r3, r3, #1
    9a90:	b2db      	uxtb	r3, r3
    9a92:	2b00      	cmp	r3, #0
    9a94:	d001      	beq.n	9a9a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9a96:	2300      	movs	r3, #0
    9a98:	e040      	b.n	9b1c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9a9a:	78f9      	ldrb	r1, [r7, #3]
    9a9c:	7bfb      	ldrb	r3, [r7, #15]
    9a9e:	2200      	movs	r2, #0
    9aa0:	4618      	mov	r0, r3
    9aa2:	4b21      	ldr	r3, [pc, #132]	; (9b28 <_usb_d_dev_ep_stall_clr+0xc4>)
    9aa4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9aa6:	78fb      	ldrb	r3, [r7, #3]
    9aa8:	2220      	movs	r2, #32
    9aaa:	409a      	lsls	r2, r3
    9aac:	7bfb      	ldrb	r3, [r7, #15]
    9aae:	4611      	mov	r1, r2
    9ab0:	4618      	mov	r0, r3
    9ab2:	4b1e      	ldr	r3, [pc, #120]	; (9b2c <_usb_d_dev_ep_stall_clr+0xc8>)
    9ab4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9ab6:	78fa      	ldrb	r2, [r7, #3]
    9ab8:	7bfb      	ldrb	r3, [r7, #15]
    9aba:	4611      	mov	r1, r2
    9abc:	4618      	mov	r0, r3
    9abe:	4b1c      	ldr	r3, [pc, #112]	; (9b30 <_usb_d_dev_ep_stall_clr+0xcc>)
    9ac0:	4798      	blx	r3
    9ac2:	4603      	mov	r3, r0
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d00b      	beq.n	9ae0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9ac8:	78fa      	ldrb	r2, [r7, #3]
    9aca:	7bfb      	ldrb	r3, [r7, #15]
    9acc:	4611      	mov	r1, r2
    9ace:	4618      	mov	r0, r3
    9ad0:	4b18      	ldr	r3, [pc, #96]	; (9b34 <_usb_d_dev_ep_stall_clr+0xd0>)
    9ad2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9ad4:	78f9      	ldrb	r1, [r7, #3]
    9ad6:	7bfb      	ldrb	r3, [r7, #15]
    9ad8:	2200      	movs	r2, #0
    9ada:	4618      	mov	r0, r3
    9adc:	4b16      	ldr	r3, [pc, #88]	; (9b38 <_usb_d_dev_ep_stall_clr+0xd4>)
    9ade:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	7cdb      	ldrb	r3, [r3, #19]
    9ae4:	f003 0307 	and.w	r3, r3, #7
    9ae8:	b2db      	uxtb	r3, r3
    9aea:	2b01      	cmp	r3, #1
    9aec:	d110      	bne.n	9b10 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9aee:	7bfb      	ldrb	r3, [r7, #15]
    9af0:	4619      	mov	r1, r3
    9af2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9af6:	4b11      	ldr	r3, [pc, #68]	; (9b3c <_usb_d_dev_ep_stall_clr+0xd8>)
    9af8:	4798      	blx	r3
    9afa:	4603      	mov	r3, r0
    9afc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9b00:	2b00      	cmp	r3, #0
    9b02:	d10a      	bne.n	9b1a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9b04:	687a      	ldr	r2, [r7, #4]
    9b06:	7cd3      	ldrb	r3, [r2, #19]
    9b08:	f36f 03c3 	bfc	r3, #3, #1
    9b0c:	74d3      	strb	r3, [r2, #19]
    9b0e:	e004      	b.n	9b1a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9b10:	687a      	ldr	r2, [r7, #4]
    9b12:	7cd3      	ldrb	r3, [r2, #19]
    9b14:	f36f 03c3 	bfc	r3, #3, #1
    9b18:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9b1a:	2300      	movs	r3, #0
}
    9b1c:	4618      	mov	r0, r3
    9b1e:	3710      	adds	r7, #16
    9b20:	46bd      	mov	sp, r7
    9b22:	bd80      	pop	{r7, pc}
    9b24:	000080d5 	.word	0x000080d5
    9b28:	0000807d 	.word	0x0000807d
    9b2c:	00008025 	.word	0x00008025
    9b30:	00008119 	.word	0x00008119
    9b34:	0000815d 	.word	0x0000815d
    9b38:	00008249 	.word	0x00008249
    9b3c:	00007b05 	.word	0x00007b05

00009b40 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9b40:	b580      	push	{r7, lr}
    9b42:	b086      	sub	sp, #24
    9b44:	af00      	add	r7, sp, #0
    9b46:	4603      	mov	r3, r0
    9b48:	460a      	mov	r2, r1
    9b4a:	71fb      	strb	r3, [r7, #7]
    9b4c:	4613      	mov	r3, r2
    9b4e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9b50:	79fb      	ldrb	r3, [r7, #7]
    9b52:	f003 030f 	and.w	r3, r3, #15
    9b56:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9b58:	79fb      	ldrb	r3, [r7, #7]
    9b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9b5e:	2b00      	cmp	r3, #0
    9b60:	bf14      	ite	ne
    9b62:	2301      	movne	r3, #1
    9b64:	2300      	moveq	r3, #0
    9b66:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9b68:	7cba      	ldrb	r2, [r7, #18]
    9b6a:	7cfb      	ldrb	r3, [r7, #19]
    9b6c:	4611      	mov	r1, r2
    9b6e:	4618      	mov	r0, r3
    9b70:	4b13      	ldr	r3, [pc, #76]	; (9bc0 <_usb_d_dev_ep_stall+0x80>)
    9b72:	4798      	blx	r3
    9b74:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9b76:	7cfb      	ldrb	r3, [r7, #19]
    9b78:	2b04      	cmp	r3, #4
    9b7a:	d902      	bls.n	9b82 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9b7c:	f06f 0311 	mvn.w	r3, #17
    9b80:	e01a      	b.n	9bb8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9b82:	79bb      	ldrb	r3, [r7, #6]
    9b84:	2b01      	cmp	r3, #1
    9b86:	d106      	bne.n	9b96 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9b88:	7cbb      	ldrb	r3, [r7, #18]
    9b8a:	4619      	mov	r1, r3
    9b8c:	68f8      	ldr	r0, [r7, #12]
    9b8e:	4b0d      	ldr	r3, [pc, #52]	; (9bc4 <_usb_d_dev_ep_stall+0x84>)
    9b90:	4798      	blx	r3
    9b92:	6178      	str	r0, [r7, #20]
    9b94:	e00f      	b.n	9bb6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9b96:	79bb      	ldrb	r3, [r7, #6]
    9b98:	2b00      	cmp	r3, #0
    9b9a:	d106      	bne.n	9baa <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9b9c:	7cbb      	ldrb	r3, [r7, #18]
    9b9e:	4619      	mov	r1, r3
    9ba0:	68f8      	ldr	r0, [r7, #12]
    9ba2:	4b09      	ldr	r3, [pc, #36]	; (9bc8 <_usb_d_dev_ep_stall+0x88>)
    9ba4:	4798      	blx	r3
    9ba6:	6178      	str	r0, [r7, #20]
    9ba8:	e005      	b.n	9bb6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9baa:	7cbb      	ldrb	r3, [r7, #18]
    9bac:	4619      	mov	r1, r3
    9bae:	68f8      	ldr	r0, [r7, #12]
    9bb0:	4b06      	ldr	r3, [pc, #24]	; (9bcc <_usb_d_dev_ep_stall+0x8c>)
    9bb2:	4798      	blx	r3
    9bb4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9bb6:	697b      	ldr	r3, [r7, #20]
}
    9bb8:	4618      	mov	r0, r3
    9bba:	3718      	adds	r7, #24
    9bbc:	46bd      	mov	sp, r7
    9bbe:	bd80      	pop	{r7, pc}
    9bc0:	000085e1 	.word	0x000085e1
    9bc4:	00009a15 	.word	0x00009a15
    9bc8:	00009a65 	.word	0x00009a65
    9bcc:	000099e5 	.word	0x000099e5

00009bd0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9bd0:	b580      	push	{r7, lr}
    9bd2:	b082      	sub	sp, #8
    9bd4:	af00      	add	r7, sp, #0
    9bd6:	6078      	str	r0, [r7, #4]
    9bd8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	7c9b      	ldrb	r3, [r3, #18]
    9bde:	2bff      	cmp	r3, #255	; 0xff
    9be0:	d014      	beq.n	9c0c <_usb_d_dev_trans_done+0x3c>
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	7cdb      	ldrb	r3, [r3, #19]
    9be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bea:	b2db      	uxtb	r3, r3
    9bec:	2b00      	cmp	r3, #0
    9bee:	d00d      	beq.n	9c0c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9bf0:	687a      	ldr	r2, [r7, #4]
    9bf2:	7cd3      	ldrb	r3, [r2, #19]
    9bf4:	f36f 1386 	bfc	r3, #6, #1
    9bf8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9bfa:	4b06      	ldr	r3, [pc, #24]	; (9c14 <_usb_d_dev_trans_done+0x44>)
    9bfc:	691b      	ldr	r3, [r3, #16]
    9bfe:	687a      	ldr	r2, [r7, #4]
    9c00:	7c90      	ldrb	r0, [r2, #18]
    9c02:	687a      	ldr	r2, [r7, #4]
    9c04:	6892      	ldr	r2, [r2, #8]
    9c06:	6839      	ldr	r1, [r7, #0]
    9c08:	4798      	blx	r3
    9c0a:	e000      	b.n	9c0e <_usb_d_dev_trans_done+0x3e>
		return;
    9c0c:	bf00      	nop
}
    9c0e:	3708      	adds	r7, #8
    9c10:	46bd      	mov	sp, r7
    9c12:	bd80      	pop	{r7, pc}
    9c14:	20000938 	.word	0x20000938

00009c18 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9c18:	b580      	push	{r7, lr}
    9c1a:	b086      	sub	sp, #24
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	60f8      	str	r0, [r7, #12]
    9c20:	460b      	mov	r3, r1
    9c22:	607a      	str	r2, [r7, #4]
    9c24:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c26:	68fb      	ldr	r3, [r7, #12]
    9c28:	7c9b      	ldrb	r3, [r3, #18]
    9c2a:	f003 030f 	and.w	r3, r3, #15
    9c2e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9c30:	4b1f      	ldr	r3, [pc, #124]	; (9cb0 <_usb_d_dev_trans_stop+0x98>)
    9c32:	881b      	ldrh	r3, [r3, #0]
    9c34:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9c36:	68fb      	ldr	r3, [r7, #12]
    9c38:	7c9b      	ldrb	r3, [r3, #18]
    9c3a:	2bff      	cmp	r3, #255	; 0xff
    9c3c:	d033      	beq.n	9ca6 <_usb_d_dev_trans_stop+0x8e>
    9c3e:	68fb      	ldr	r3, [r7, #12]
    9c40:	7cdb      	ldrb	r3, [r3, #19]
    9c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c46:	b2db      	uxtb	r3, r3
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d02c      	beq.n	9ca6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9c4c:	7afb      	ldrb	r3, [r7, #11]
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d006      	beq.n	9c60 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9c52:	7dfb      	ldrb	r3, [r7, #23]
    9c54:	2200      	movs	r2, #0
    9c56:	2101      	movs	r1, #1
    9c58:	4618      	mov	r0, r3
    9c5a:	4b16      	ldr	r3, [pc, #88]	; (9cb4 <_usb_d_dev_trans_stop+0x9c>)
    9c5c:	4798      	blx	r3
    9c5e:	e005      	b.n	9c6c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9c60:	7dfb      	ldrb	r3, [r7, #23]
    9c62:	2200      	movs	r2, #0
    9c64:	2100      	movs	r1, #0
    9c66:	4618      	mov	r0, r3
    9c68:	4b13      	ldr	r3, [pc, #76]	; (9cb8 <_usb_d_dev_trans_stop+0xa0>)
    9c6a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9c6c:	7afb      	ldrb	r3, [r7, #11]
    9c6e:	f107 0218 	add.w	r2, r7, #24
    9c72:	4413      	add	r3, r2
    9c74:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9c78:	461a      	mov	r2, r3
    9c7a:	7dfb      	ldrb	r3, [r7, #23]
    9c7c:	4611      	mov	r1, r2
    9c7e:	4618      	mov	r0, r3
    9c80:	4b0e      	ldr	r3, [pc, #56]	; (9cbc <_usb_d_dev_trans_stop+0xa4>)
    9c82:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9c84:	7afb      	ldrb	r3, [r7, #11]
    9c86:	f107 0218 	add.w	r2, r7, #24
    9c8a:	4413      	add	r3, r2
    9c8c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9c90:	461a      	mov	r2, r3
    9c92:	7dfb      	ldrb	r3, [r7, #23]
    9c94:	4611      	mov	r1, r2
    9c96:	4618      	mov	r0, r3
    9c98:	4b09      	ldr	r3, [pc, #36]	; (9cc0 <_usb_d_dev_trans_stop+0xa8>)
    9c9a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9c9c:	6879      	ldr	r1, [r7, #4]
    9c9e:	68f8      	ldr	r0, [r7, #12]
    9ca0:	4b08      	ldr	r3, [pc, #32]	; (9cc4 <_usb_d_dev_trans_stop+0xac>)
    9ca2:	4798      	blx	r3
    9ca4:	e000      	b.n	9ca8 <_usb_d_dev_trans_stop+0x90>
		return;
    9ca6:	bf00      	nop
}
    9ca8:	3718      	adds	r7, #24
    9caa:	46bd      	mov	sp, r7
    9cac:	bd80      	pop	{r7, pc}
    9cae:	bf00      	nop
    9cb0:	0000d778 	.word	0x0000d778
    9cb4:	000084cd 	.word	0x000084cd
    9cb8:	00008525 	.word	0x00008525
    9cbc:	00007fd5 	.word	0x00007fd5
    9cc0:	00008025 	.word	0x00008025
    9cc4:	00009bd1 	.word	0x00009bd1

00009cc8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9cc8:	b580      	push	{r7, lr}
    9cca:	b086      	sub	sp, #24
    9ccc:	af00      	add	r7, sp, #0
    9cce:	4603      	mov	r3, r0
    9cd0:	6039      	str	r1, [r7, #0]
    9cd2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9cd4:	79fb      	ldrb	r3, [r7, #7]
    9cd6:	f003 030f 	and.w	r3, r3, #15
    9cda:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9cdc:	7dfb      	ldrb	r3, [r7, #23]
    9cde:	015b      	lsls	r3, r3, #5
    9ce0:	4a1e      	ldr	r2, [pc, #120]	; (9d5c <_usb_d_dev_ep_read_req+0x94>)
    9ce2:	4413      	add	r3, r2
    9ce4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9ce6:	693b      	ldr	r3, [r7, #16]
    9ce8:	681b      	ldr	r3, [r3, #0]
    9cea:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9cec:	693b      	ldr	r3, [r7, #16]
    9cee:	685b      	ldr	r3, [r3, #4]
    9cf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9cf4:	b29b      	uxth	r3, r3
    9cf6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9cf8:	7dfb      	ldrb	r3, [r7, #23]
    9cfa:	2b04      	cmp	r3, #4
    9cfc:	d802      	bhi.n	9d04 <_usb_d_dev_ep_read_req+0x3c>
    9cfe:	683b      	ldr	r3, [r7, #0]
    9d00:	2b00      	cmp	r3, #0
    9d02:	d102      	bne.n	9d0a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9d04:	f06f 0311 	mvn.w	r3, #17
    9d08:	e023      	b.n	9d52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9d0a:	7dfb      	ldrb	r3, [r7, #23]
    9d0c:	4618      	mov	r0, r3
    9d0e:	4b14      	ldr	r3, [pc, #80]	; (9d60 <_usb_d_dev_ep_read_req+0x98>)
    9d10:	4798      	blx	r3
    9d12:	4603      	mov	r3, r0
    9d14:	f083 0301 	eor.w	r3, r3, #1
    9d18:	b2db      	uxtb	r3, r3
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d002      	beq.n	9d24 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9d1e:	f06f 0312 	mvn.w	r3, #18
    9d22:	e016      	b.n	9d52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9d24:	7dfb      	ldrb	r3, [r7, #23]
    9d26:	4618      	mov	r0, r3
    9d28:	4b0e      	ldr	r3, [pc, #56]	; (9d64 <_usb_d_dev_ep_read_req+0x9c>)
    9d2a:	4798      	blx	r3
    9d2c:	4603      	mov	r3, r0
    9d2e:	f083 0301 	eor.w	r3, r3, #1
    9d32:	b2db      	uxtb	r3, r3
    9d34:	2b00      	cmp	r3, #0
    9d36:	d001      	beq.n	9d3c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9d38:	2300      	movs	r3, #0
    9d3a:	e00a      	b.n	9d52 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9d3c:	68fb      	ldr	r3, [r7, #12]
    9d3e:	2208      	movs	r2, #8
    9d40:	4619      	mov	r1, r3
    9d42:	6838      	ldr	r0, [r7, #0]
    9d44:	4b08      	ldr	r3, [pc, #32]	; (9d68 <_usb_d_dev_ep_read_req+0xa0>)
    9d46:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9d48:	7dfb      	ldrb	r3, [r7, #23]
    9d4a:	4618      	mov	r0, r3
    9d4c:	4b07      	ldr	r3, [pc, #28]	; (9d6c <_usb_d_dev_ep_read_req+0xa4>)
    9d4e:	4798      	blx	r3

	return bytes;
    9d50:	897b      	ldrh	r3, [r7, #10]
}
    9d52:	4618      	mov	r0, r3
    9d54:	3718      	adds	r7, #24
    9d56:	46bd      	mov	sp, r7
    9d58:	bd80      	pop	{r7, pc}
    9d5a:	bf00      	nop
    9d5c:	20000a00 	.word	0x20000a00
    9d60:	0000804d 	.word	0x0000804d
    9d64:	000081f9 	.word	0x000081f9
    9d68:	0000d0f5 	.word	0x0000d0f5
    9d6c:	00008229 	.word	0x00008229

00009d70 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9d70:	b580      	push	{r7, lr}
    9d72:	b086      	sub	sp, #24
    9d74:	af00      	add	r7, sp, #0
    9d76:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	7a1b      	ldrb	r3, [r3, #8]
    9d7c:	f003 030f 	and.w	r3, r3, #15
    9d80:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	7a1b      	ldrb	r3, [r3, #8]
    9d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	bf14      	ite	ne
    9d8e:	2301      	movne	r3, #1
    9d90:	2300      	moveq	r3, #0
    9d92:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9d94:	7d7a      	ldrb	r2, [r7, #21]
    9d96:	7dbb      	ldrb	r3, [r7, #22]
    9d98:	4611      	mov	r1, r2
    9d9a:	4618      	mov	r0, r3
    9d9c:	4b5f      	ldr	r3, [pc, #380]	; (9f1c <_usb_d_dev_ep_trans+0x1ac>)
    9d9e:	4798      	blx	r3
    9da0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9da2:	693b      	ldr	r3, [r7, #16]
    9da4:	8a1b      	ldrh	r3, [r3, #16]
    9da6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9daa:	4293      	cmp	r3, r2
    9dac:	d004      	beq.n	9db8 <_usb_d_dev_ep_trans+0x48>
    9dae:	693b      	ldr	r3, [r7, #16]
    9db0:	8a1b      	ldrh	r3, [r3, #16]
    9db2:	3b01      	subs	r3, #1
    9db4:	b29b      	uxth	r3, r3
    9db6:	e001      	b.n	9dbc <_usb_d_dev_ep_trans+0x4c>
    9db8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9dbc:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    9dbe:	687b      	ldr	r3, [r7, #4]
    9dc0:	685a      	ldr	r2, [r3, #4]
    9dc2:	89fb      	ldrh	r3, [r7, #14]
    9dc4:	4013      	ands	r3, r2
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	bf14      	ite	ne
    9dca:	2301      	movne	r3, #1
    9dcc:	2300      	moveq	r3, #0
    9dce:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    9dd0:	2300      	movs	r3, #0
    9dd2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9dd4:	7dbb      	ldrb	r3, [r7, #22]
    9dd6:	2b04      	cmp	r3, #4
    9dd8:	d902      	bls.n	9de0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    9dda:	f06f 0311 	mvn.w	r3, #17
    9dde:	e098      	b.n	9f12 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9de8:	d31a      	bcc.n	9e20 <_usb_d_dev_ep_trans+0xb0>
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	681b      	ldr	r3, [r3, #0]
    9dee:	461a      	mov	r2, r3
    9df0:	687b      	ldr	r3, [r7, #4]
    9df2:	685b      	ldr	r3, [r3, #4]
    9df4:	4413      	add	r3, r2
    9df6:	4a4a      	ldr	r2, [pc, #296]	; (9f20 <_usb_d_dev_ep_trans+0x1b0>)
    9df8:	4293      	cmp	r3, r2
    9dfa:	d811      	bhi.n	9e20 <_usb_d_dev_ep_trans+0xb0>
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	681b      	ldr	r3, [r3, #0]
    9e00:	f003 0303 	and.w	r3, r3, #3
    9e04:	2b00      	cmp	r3, #0
    9e06:	d10b      	bne.n	9e20 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    9e08:	7d7b      	ldrb	r3, [r7, #21]
    9e0a:	f083 0301 	eor.w	r3, r3, #1
    9e0e:	b2db      	uxtb	r3, r3
    9e10:	2b00      	cmp	r3, #0
    9e12:	d00e      	beq.n	9e32 <_usb_d_dev_ep_trans+0xc2>
    9e14:	687b      	ldr	r3, [r7, #4]
    9e16:	685b      	ldr	r3, [r3, #4]
    9e18:	693a      	ldr	r2, [r7, #16]
    9e1a:	8a12      	ldrh	r2, [r2, #16]
    9e1c:	4293      	cmp	r3, r2
    9e1e:	d208      	bcs.n	9e32 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    9e20:	693b      	ldr	r3, [r7, #16]
    9e22:	68db      	ldr	r3, [r3, #12]
    9e24:	2b00      	cmp	r3, #0
    9e26:	d102      	bne.n	9e2e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    9e28:	f06f 0312 	mvn.w	r3, #18
    9e2c:	e071      	b.n	9f12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    9e2e:	2301      	movs	r3, #1
    9e30:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    9e32:	7d7b      	ldrb	r3, [r7, #21]
    9e34:	f083 0301 	eor.w	r3, r3, #1
    9e38:	b2db      	uxtb	r3, r3
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d009      	beq.n	9e52 <_usb_d_dev_ep_trans+0xe2>
    9e3e:	7b7b      	ldrb	r3, [r7, #13]
    9e40:	2b00      	cmp	r3, #0
    9e42:	d006      	beq.n	9e52 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    9e44:	693b      	ldr	r3, [r7, #16]
    9e46:	68db      	ldr	r3, [r3, #12]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d102      	bne.n	9e52 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    9e4c:	f06f 0311 	mvn.w	r3, #17
    9e50:	e05f      	b.n	9f12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9e52:	693b      	ldr	r3, [r7, #16]
    9e54:	7cdb      	ldrb	r3, [r3, #19]
    9e56:	f003 0308 	and.w	r3, r3, #8
    9e5a:	b2db      	uxtb	r3, r3
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d001      	beq.n	9e64 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    9e60:	2302      	movs	r3, #2
    9e62:	e056      	b.n	9f12 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    9e64:	f107 0308 	add.w	r3, r7, #8
    9e68:	4618      	mov	r0, r3
    9e6a:	4b2e      	ldr	r3, [pc, #184]	; (9f24 <_usb_d_dev_ep_trans+0x1b4>)
    9e6c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9e6e:	693b      	ldr	r3, [r7, #16]
    9e70:	7cdb      	ldrb	r3, [r3, #19]
    9e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e76:	b2db      	uxtb	r3, r3
    9e78:	2b00      	cmp	r3, #0
    9e7a:	d006      	beq.n	9e8a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    9e7c:	f107 0308 	add.w	r3, r7, #8
    9e80:	4618      	mov	r0, r3
    9e82:	4b29      	ldr	r3, [pc, #164]	; (9f28 <_usb_d_dev_ep_trans+0x1b8>)
    9e84:	4798      	blx	r3
		return USB_BUSY;
    9e86:	2301      	movs	r3, #1
    9e88:	e043      	b.n	9f12 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    9e8a:	693a      	ldr	r2, [r7, #16]
    9e8c:	7cd3      	ldrb	r3, [r2, #19]
    9e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e92:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    9e94:	f107 0308 	add.w	r3, r7, #8
    9e98:	4618      	mov	r0, r3
    9e9a:	4b23      	ldr	r3, [pc, #140]	; (9f28 <_usb_d_dev_ep_trans+0x1b8>)
    9e9c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    9e9e:	687b      	ldr	r3, [r7, #4]
    9ea0:	681a      	ldr	r2, [r3, #0]
    9ea2:	693b      	ldr	r3, [r7, #16]
    9ea4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	685a      	ldr	r2, [r3, #4]
    9eaa:	693b      	ldr	r3, [r7, #16]
    9eac:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    9eae:	693b      	ldr	r3, [r7, #16]
    9eb0:	2200      	movs	r2, #0
    9eb2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    9eb4:	693a      	ldr	r2, [r7, #16]
    9eb6:	7cd3      	ldrb	r3, [r2, #19]
    9eb8:	7d79      	ldrb	r1, [r7, #21]
    9eba:	f361 13c7 	bfi	r3, r1, #7, #1
    9ebe:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    9ec0:	693a      	ldr	r2, [r7, #16]
    9ec2:	7cd3      	ldrb	r3, [r2, #19]
    9ec4:	7df9      	ldrb	r1, [r7, #23]
    9ec6:	f361 1345 	bfi	r3, r1, #5, #1
    9eca:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9ecc:	687b      	ldr	r3, [r7, #4]
    9ece:	7a5b      	ldrb	r3, [r3, #9]
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	d007      	beq.n	9ee4 <_usb_d_dev_ep_trans+0x174>
    9ed4:	7b7b      	ldrb	r3, [r7, #13]
    9ed6:	f083 0301 	eor.w	r3, r3, #1
    9eda:	b2db      	uxtb	r3, r3
    9edc:	2b00      	cmp	r3, #0
    9ede:	d001      	beq.n	9ee4 <_usb_d_dev_ep_trans+0x174>
    9ee0:	2301      	movs	r3, #1
    9ee2:	e000      	b.n	9ee6 <_usb_d_dev_ep_trans+0x176>
    9ee4:	2300      	movs	r3, #0
    9ee6:	b2db      	uxtb	r3, r3
    9ee8:	f003 0301 	and.w	r3, r3, #1
    9eec:	b2d9      	uxtb	r1, r3
    9eee:	693a      	ldr	r2, [r7, #16]
    9ef0:	7cd3      	ldrb	r3, [r2, #19]
    9ef2:	f361 1304 	bfi	r3, r1, #4, #1
    9ef6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    9ef8:	7d7b      	ldrb	r3, [r7, #21]
    9efa:	2b00      	cmp	r3, #0
    9efc:	d004      	beq.n	9f08 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    9efe:	2100      	movs	r1, #0
    9f00:	6938      	ldr	r0, [r7, #16]
    9f02:	4b0a      	ldr	r3, [pc, #40]	; (9f2c <_usb_d_dev_ep_trans+0x1bc>)
    9f04:	4798      	blx	r3
    9f06:	e003      	b.n	9f10 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    9f08:	2100      	movs	r1, #0
    9f0a:	6938      	ldr	r0, [r7, #16]
    9f0c:	4b08      	ldr	r3, [pc, #32]	; (9f30 <_usb_d_dev_ep_trans+0x1c0>)
    9f0e:	4798      	blx	r3
	}

	return ERR_NONE;
    9f10:	2300      	movs	r3, #0
}
    9f12:	4618      	mov	r0, r3
    9f14:	3718      	adds	r7, #24
    9f16:	46bd      	mov	sp, r7
    9f18:	bd80      	pop	{r7, pc}
    9f1a:	bf00      	nop
    9f1c:	000085e1 	.word	0x000085e1
    9f20:	20041fff 	.word	0x20041fff
    9f24:	0000a73d 	.word	0x0000a73d
    9f28:	0000a763 	.word	0x0000a763
    9f2c:	000088a9 	.word	0x000088a9
    9f30:	00008ac1 	.word	0x00008ac1

00009f34 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    9f34:	b580      	push	{r7, lr}
    9f36:	b084      	sub	sp, #16
    9f38:	af00      	add	r7, sp, #0
    9f3a:	4603      	mov	r3, r0
    9f3c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    9f3e:	79fb      	ldrb	r3, [r7, #7]
    9f40:	f003 030f 	and.w	r3, r3, #15
    9f44:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    9f46:	79fb      	ldrb	r3, [r7, #7]
    9f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	bf14      	ite	ne
    9f50:	2301      	movne	r3, #1
    9f52:	2300      	moveq	r3, #0
    9f54:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9f56:	7bba      	ldrb	r2, [r7, #14]
    9f58:	7bfb      	ldrb	r3, [r7, #15]
    9f5a:	4611      	mov	r1, r2
    9f5c:	4618      	mov	r0, r3
    9f5e:	4b08      	ldr	r3, [pc, #32]	; (9f80 <_usb_d_dev_ep_abort+0x4c>)
    9f60:	4798      	blx	r3
    9f62:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    9f64:	7bfb      	ldrb	r3, [r7, #15]
    9f66:	2b04      	cmp	r3, #4
    9f68:	d806      	bhi.n	9f78 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    9f6a:	7bbb      	ldrb	r3, [r7, #14]
    9f6c:	2202      	movs	r2, #2
    9f6e:	4619      	mov	r1, r3
    9f70:	68b8      	ldr	r0, [r7, #8]
    9f72:	4b04      	ldr	r3, [pc, #16]	; (9f84 <_usb_d_dev_ep_abort+0x50>)
    9f74:	4798      	blx	r3
    9f76:	e000      	b.n	9f7a <_usb_d_dev_ep_abort+0x46>
		return;
    9f78:	bf00      	nop
}
    9f7a:	3710      	adds	r7, #16
    9f7c:	46bd      	mov	sp, r7
    9f7e:	bd80      	pop	{r7, pc}
    9f80:	000085e1 	.word	0x000085e1
    9f84:	00009c19 	.word	0x00009c19

00009f88 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9f88:	b480      	push	{r7}
    9f8a:	b085      	sub	sp, #20
    9f8c:	af00      	add	r7, sp, #0
    9f8e:	4603      	mov	r3, r0
    9f90:	6039      	str	r1, [r7, #0]
    9f92:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9f94:	683b      	ldr	r3, [r7, #0]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d001      	beq.n	9f9e <_usb_d_dev_register_callback+0x16>
    9f9a:	683b      	ldr	r3, [r7, #0]
    9f9c:	e000      	b.n	9fa0 <_usb_d_dev_register_callback+0x18>
    9f9e:	4b0a      	ldr	r3, [pc, #40]	; (9fc8 <_usb_d_dev_register_callback+0x40>)
    9fa0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    9fa2:	79fb      	ldrb	r3, [r7, #7]
    9fa4:	2b01      	cmp	r3, #1
    9fa6:	d103      	bne.n	9fb0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9fa8:	4a08      	ldr	r2, [pc, #32]	; (9fcc <_usb_d_dev_register_callback+0x44>)
    9faa:	68fb      	ldr	r3, [r7, #12]
    9fac:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    9fae:	e005      	b.n	9fbc <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    9fb0:	79fb      	ldrb	r3, [r7, #7]
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d102      	bne.n	9fbc <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    9fb6:	4a05      	ldr	r2, [pc, #20]	; (9fcc <_usb_d_dev_register_callback+0x44>)
    9fb8:	68fb      	ldr	r3, [r7, #12]
    9fba:	6013      	str	r3, [r2, #0]
}
    9fbc:	bf00      	nop
    9fbe:	3714      	adds	r7, #20
    9fc0:	46bd      	mov	sp, r7
    9fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fc6:	4770      	bx	lr
    9fc8:	00007e69 	.word	0x00007e69
    9fcc:	20000938 	.word	0x20000938

00009fd0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    9fd0:	b480      	push	{r7}
    9fd2:	b085      	sub	sp, #20
    9fd4:	af00      	add	r7, sp, #0
    9fd6:	4603      	mov	r3, r0
    9fd8:	6039      	str	r1, [r7, #0]
    9fda:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9fdc:	683b      	ldr	r3, [r7, #0]
    9fde:	2b00      	cmp	r3, #0
    9fe0:	d001      	beq.n	9fe6 <_usb_d_dev_register_ep_callback+0x16>
    9fe2:	683b      	ldr	r3, [r7, #0]
    9fe4:	e000      	b.n	9fe8 <_usb_d_dev_register_ep_callback+0x18>
    9fe6:	4b0e      	ldr	r3, [pc, #56]	; (a020 <_usb_d_dev_register_ep_callback+0x50>)
    9fe8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9fea:	79fb      	ldrb	r3, [r7, #7]
    9fec:	2b00      	cmp	r3, #0
    9fee:	d103      	bne.n	9ff8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9ff0:	4a0c      	ldr	r2, [pc, #48]	; (a024 <_usb_d_dev_register_ep_callback+0x54>)
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    9ff6:	e00c      	b.n	a012 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9ff8:	79fb      	ldrb	r3, [r7, #7]
    9ffa:	2b01      	cmp	r3, #1
    9ffc:	d103      	bne.n	a006 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    9ffe:	4a09      	ldr	r2, [pc, #36]	; (a024 <_usb_d_dev_register_ep_callback+0x54>)
    a000:	68fb      	ldr	r3, [r7, #12]
    a002:	60d3      	str	r3, [r2, #12]
}
    a004:	e005      	b.n	a012 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a006:	79fb      	ldrb	r3, [r7, #7]
    a008:	2b02      	cmp	r3, #2
    a00a:	d102      	bne.n	a012 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a00c:	4a05      	ldr	r2, [pc, #20]	; (a024 <_usb_d_dev_register_ep_callback+0x54>)
    a00e:	68fb      	ldr	r3, [r7, #12]
    a010:	6113      	str	r3, [r2, #16]
}
    a012:	bf00      	nop
    a014:	3714      	adds	r7, #20
    a016:	46bd      	mov	sp, r7
    a018:	f85d 7b04 	ldr.w	r7, [sp], #4
    a01c:	4770      	bx	lr
    a01e:	bf00      	nop
    a020:	00007e69 	.word	0x00007e69
    a024:	20000938 	.word	0x20000938

0000a028 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a028:	b580      	push	{r7, lr}
    a02a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a02c:	4b01      	ldr	r3, [pc, #4]	; (a034 <USB_0_Handler+0xc>)
    a02e:	4798      	blx	r3
}
    a030:	bf00      	nop
    a032:	bd80      	pop	{r7, pc}
    a034:	00009299 	.word	0x00009299

0000a038 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a038:	b580      	push	{r7, lr}
    a03a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a03c:	4b01      	ldr	r3, [pc, #4]	; (a044 <USB_1_Handler+0xc>)
    a03e:	4798      	blx	r3
}
    a040:	bf00      	nop
    a042:	bd80      	pop	{r7, pc}
    a044:	00009299 	.word	0x00009299

0000a048 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a048:	b580      	push	{r7, lr}
    a04a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a04c:	4b01      	ldr	r3, [pc, #4]	; (a054 <USB_2_Handler+0xc>)
    a04e:	4798      	blx	r3
}
    a050:	bf00      	nop
    a052:	bd80      	pop	{r7, pc}
    a054:	00009299 	.word	0x00009299

0000a058 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a058:	b580      	push	{r7, lr}
    a05a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a05c:	4b01      	ldr	r3, [pc, #4]	; (a064 <USB_3_Handler+0xc>)
    a05e:	4798      	blx	r3
}
    a060:	bf00      	nop
    a062:	bd80      	pop	{r7, pc}
    a064:	00009299 	.word	0x00009299

0000a068 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a068:	b480      	push	{r7}
    a06a:	b083      	sub	sp, #12
    a06c:	af00      	add	r7, sp, #0
    a06e:	6078      	str	r0, [r7, #4]
    a070:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a072:	bf00      	nop
    a074:	687b      	ldr	r3, [r7, #4]
    a076:	689a      	ldr	r2, [r3, #8]
    a078:	683b      	ldr	r3, [r7, #0]
    a07a:	4013      	ands	r3, r2
    a07c:	2b00      	cmp	r3, #0
    a07e:	d1f9      	bne.n	a074 <hri_wdt_wait_for_sync+0xc>
	};
}
    a080:	bf00      	nop
    a082:	370c      	adds	r7, #12
    a084:	46bd      	mov	sp, r7
    a086:	f85d 7b04 	ldr.w	r7, [sp], #4
    a08a:	4770      	bx	lr

0000a08c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a08c:	b580      	push	{r7, lr}
    a08e:	b084      	sub	sp, #16
    a090:	af00      	add	r7, sp, #0
    a092:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a094:	210e      	movs	r1, #14
    a096:	6878      	ldr	r0, [r7, #4]
    a098:	4b0a      	ldr	r3, [pc, #40]	; (a0c4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a09a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a09c:	687b      	ldr	r3, [r7, #4]
    a09e:	781b      	ldrb	r3, [r3, #0]
    a0a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a0a2:	7bfb      	ldrb	r3, [r7, #15]
    a0a4:	085b      	lsrs	r3, r3, #1
    a0a6:	b2db      	uxtb	r3, r3
    a0a8:	f003 0301 	and.w	r3, r3, #1
    a0ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a0ae:	7bfb      	ldrb	r3, [r7, #15]
    a0b0:	2b00      	cmp	r3, #0
    a0b2:	bf14      	ite	ne
    a0b4:	2301      	movne	r3, #1
    a0b6:	2300      	moveq	r3, #0
    a0b8:	b2db      	uxtb	r3, r3
}
    a0ba:	4618      	mov	r0, r3
    a0bc:	3710      	adds	r7, #16
    a0be:	46bd      	mov	sp, r7
    a0c0:	bd80      	pop	{r7, pc}
    a0c2:	bf00      	nop
    a0c4:	0000a069 	.word	0x0000a069

0000a0c8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a0c8:	b580      	push	{r7, lr}
    a0ca:	b082      	sub	sp, #8
    a0cc:	af00      	add	r7, sp, #0
    a0ce:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	781b      	ldrb	r3, [r3, #0]
    a0d4:	b2db      	uxtb	r3, r3
    a0d6:	f023 0304 	bic.w	r3, r3, #4
    a0da:	b2da      	uxtb	r2, r3
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a0e0:	210e      	movs	r1, #14
    a0e2:	6878      	ldr	r0, [r7, #4]
    a0e4:	4b02      	ldr	r3, [pc, #8]	; (a0f0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a0e6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a0e8:	bf00      	nop
    a0ea:	3708      	adds	r7, #8
    a0ec:	46bd      	mov	sp, r7
    a0ee:	bd80      	pop	{r7, pc}
    a0f0:	0000a069 	.word	0x0000a069

0000a0f4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a0f4:	b580      	push	{r7, lr}
    a0f6:	b084      	sub	sp, #16
    a0f8:	af00      	add	r7, sp, #0
    a0fa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a0fc:	210e      	movs	r1, #14
    a0fe:	6878      	ldr	r0, [r7, #4]
    a100:	4b08      	ldr	r3, [pc, #32]	; (a124 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a102:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	781b      	ldrb	r3, [r3, #0]
    a108:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a10a:	7bfb      	ldrb	r3, [r7, #15]
    a10c:	09db      	lsrs	r3, r3, #7
    a10e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a110:	7bfb      	ldrb	r3, [r7, #15]
    a112:	2b00      	cmp	r3, #0
    a114:	bf14      	ite	ne
    a116:	2301      	movne	r3, #1
    a118:	2300      	moveq	r3, #0
    a11a:	b2db      	uxtb	r3, r3
}
    a11c:	4618      	mov	r0, r3
    a11e:	3710      	adds	r7, #16
    a120:	46bd      	mov	sp, r7
    a122:	bd80      	pop	{r7, pc}
    a124:	0000a069 	.word	0x0000a069

0000a128 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a128:	b480      	push	{r7}
    a12a:	b085      	sub	sp, #20
    a12c:	af00      	add	r7, sp, #0
    a12e:	6078      	str	r0, [r7, #4]
    a130:	460b      	mov	r3, r1
    a132:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a134:	687b      	ldr	r3, [r7, #4]
    a136:	785b      	ldrb	r3, [r3, #1]
    a138:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a13a:	7bfb      	ldrb	r3, [r7, #15]
    a13c:	f023 030f 	bic.w	r3, r3, #15
    a140:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a142:	78fb      	ldrb	r3, [r7, #3]
    a144:	f003 030f 	and.w	r3, r3, #15
    a148:	b2da      	uxtb	r2, r3
    a14a:	7bfb      	ldrb	r3, [r7, #15]
    a14c:	4313      	orrs	r3, r2
    a14e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	7bfa      	ldrb	r2, [r7, #15]
    a154:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a156:	bf00      	nop
    a158:	3714      	adds	r7, #20
    a15a:	46bd      	mov	sp, r7
    a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a160:	4770      	bx	lr
	...

0000a164 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a164:	b580      	push	{r7, lr}
    a166:	b082      	sub	sp, #8
    a168:	af00      	add	r7, sp, #0
    a16a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	2b00      	cmp	r3, #0
    a170:	d005      	beq.n	a17e <_wdt_init+0x1a>
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	2b00      	cmp	r3, #0
    a178:	d001      	beq.n	a17e <_wdt_init+0x1a>
    a17a:	2301      	movs	r3, #1
    a17c:	e000      	b.n	a180 <_wdt_init+0x1c>
    a17e:	2300      	movs	r3, #0
    a180:	f003 0301 	and.w	r3, r3, #1
    a184:	b2db      	uxtb	r3, r3
    a186:	2250      	movs	r2, #80	; 0x50
    a188:	4913      	ldr	r1, [pc, #76]	; (a1d8 <_wdt_init+0x74>)
    a18a:	4618      	mov	r0, r3
    a18c:	4b13      	ldr	r3, [pc, #76]	; (a1dc <_wdt_init+0x78>)
    a18e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a190:	687b      	ldr	r3, [r7, #4]
    a192:	681b      	ldr	r3, [r3, #0]
    a194:	4618      	mov	r0, r3
    a196:	4b12      	ldr	r3, [pc, #72]	; (a1e0 <_wdt_init+0x7c>)
    a198:	4798      	blx	r3
    a19a:	4603      	mov	r3, r0
    a19c:	2b00      	cmp	r3, #0
    a19e:	d107      	bne.n	a1b0 <_wdt_init+0x4c>
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	681b      	ldr	r3, [r3, #0]
    a1a4:	4618      	mov	r0, r3
    a1a6:	4b0f      	ldr	r3, [pc, #60]	; (a1e4 <_wdt_init+0x80>)
    a1a8:	4798      	blx	r3
    a1aa:	4603      	mov	r3, r0
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d002      	beq.n	a1b6 <_wdt_init+0x52>
		return ERR_DENIED;
    a1b0:	f06f 0310 	mvn.w	r3, #16
    a1b4:	e00b      	b.n	a1ce <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	681b      	ldr	r3, [r3, #0]
    a1ba:	4618      	mov	r0, r3
    a1bc:	4b0a      	ldr	r3, [pc, #40]	; (a1e8 <_wdt_init+0x84>)
    a1be:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	681b      	ldr	r3, [r3, #0]
    a1c4:	210b      	movs	r1, #11
    a1c6:	4618      	mov	r0, r3
    a1c8:	4b08      	ldr	r3, [pc, #32]	; (a1ec <_wdt_init+0x88>)
    a1ca:	4798      	blx	r3
	}

	return ERR_NONE;
    a1cc:	2300      	movs	r3, #0
}
    a1ce:	4618      	mov	r0, r3
    a1d0:	3708      	adds	r7, #8
    a1d2:	46bd      	mov	sp, r7
    a1d4:	bd80      	pop	{r7, pc}
    a1d6:	bf00      	nop
    a1d8:	0000d77c 	.word	0x0000d77c
    a1dc:	00003079 	.word	0x00003079
    a1e0:	0000a0f5 	.word	0x0000a0f5
    a1e4:	0000a08d 	.word	0x0000a08d
    a1e8:	0000a0c9 	.word	0x0000a0c9
    a1ec:	0000a129 	.word	0x0000a129

0000a1f0 <hri_port_set_DIR_reg>:
{
    a1f0:	b480      	push	{r7}
    a1f2:	b085      	sub	sp, #20
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	60f8      	str	r0, [r7, #12]
    a1f8:	460b      	mov	r3, r1
    a1fa:	607a      	str	r2, [r7, #4]
    a1fc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a1fe:	7afb      	ldrb	r3, [r7, #11]
    a200:	68fa      	ldr	r2, [r7, #12]
    a202:	01db      	lsls	r3, r3, #7
    a204:	4413      	add	r3, r2
    a206:	3308      	adds	r3, #8
    a208:	687a      	ldr	r2, [r7, #4]
    a20a:	601a      	str	r2, [r3, #0]
}
    a20c:	bf00      	nop
    a20e:	3714      	adds	r7, #20
    a210:	46bd      	mov	sp, r7
    a212:	f85d 7b04 	ldr.w	r7, [sp], #4
    a216:	4770      	bx	lr

0000a218 <hri_port_clear_DIR_reg>:
{
    a218:	b480      	push	{r7}
    a21a:	b085      	sub	sp, #20
    a21c:	af00      	add	r7, sp, #0
    a21e:	60f8      	str	r0, [r7, #12]
    a220:	460b      	mov	r3, r1
    a222:	607a      	str	r2, [r7, #4]
    a224:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a226:	7afb      	ldrb	r3, [r7, #11]
    a228:	68fa      	ldr	r2, [r7, #12]
    a22a:	01db      	lsls	r3, r3, #7
    a22c:	4413      	add	r3, r2
    a22e:	3304      	adds	r3, #4
    a230:	687a      	ldr	r2, [r7, #4]
    a232:	601a      	str	r2, [r3, #0]
}
    a234:	bf00      	nop
    a236:	3714      	adds	r7, #20
    a238:	46bd      	mov	sp, r7
    a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a23e:	4770      	bx	lr

0000a240 <hri_port_set_OUT_reg>:
{
    a240:	b480      	push	{r7}
    a242:	b085      	sub	sp, #20
    a244:	af00      	add	r7, sp, #0
    a246:	60f8      	str	r0, [r7, #12]
    a248:	460b      	mov	r3, r1
    a24a:	607a      	str	r2, [r7, #4]
    a24c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a24e:	7afb      	ldrb	r3, [r7, #11]
    a250:	68fa      	ldr	r2, [r7, #12]
    a252:	01db      	lsls	r3, r3, #7
    a254:	4413      	add	r3, r2
    a256:	3318      	adds	r3, #24
    a258:	687a      	ldr	r2, [r7, #4]
    a25a:	601a      	str	r2, [r3, #0]
}
    a25c:	bf00      	nop
    a25e:	3714      	adds	r7, #20
    a260:	46bd      	mov	sp, r7
    a262:	f85d 7b04 	ldr.w	r7, [sp], #4
    a266:	4770      	bx	lr

0000a268 <hri_port_clear_OUT_reg>:
{
    a268:	b480      	push	{r7}
    a26a:	b085      	sub	sp, #20
    a26c:	af00      	add	r7, sp, #0
    a26e:	60f8      	str	r0, [r7, #12]
    a270:	460b      	mov	r3, r1
    a272:	607a      	str	r2, [r7, #4]
    a274:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a276:	7afb      	ldrb	r3, [r7, #11]
    a278:	68fa      	ldr	r2, [r7, #12]
    a27a:	01db      	lsls	r3, r3, #7
    a27c:	4413      	add	r3, r2
    a27e:	3314      	adds	r3, #20
    a280:	687a      	ldr	r2, [r7, #4]
    a282:	601a      	str	r2, [r3, #0]
}
    a284:	bf00      	nop
    a286:	3714      	adds	r7, #20
    a288:	46bd      	mov	sp, r7
    a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a28e:	4770      	bx	lr

0000a290 <hri_port_write_PMUX_PMUXE_bf>:
{
    a290:	b480      	push	{r7}
    a292:	b085      	sub	sp, #20
    a294:	af00      	add	r7, sp, #0
    a296:	6078      	str	r0, [r7, #4]
    a298:	4608      	mov	r0, r1
    a29a:	4611      	mov	r1, r2
    a29c:	461a      	mov	r2, r3
    a29e:	4603      	mov	r3, r0
    a2a0:	70fb      	strb	r3, [r7, #3]
    a2a2:	460b      	mov	r3, r1
    a2a4:	70bb      	strb	r3, [r7, #2]
    a2a6:	4613      	mov	r3, r2
    a2a8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a2aa:	78fa      	ldrb	r2, [r7, #3]
    a2ac:	78bb      	ldrb	r3, [r7, #2]
    a2ae:	6879      	ldr	r1, [r7, #4]
    a2b0:	01d2      	lsls	r2, r2, #7
    a2b2:	440a      	add	r2, r1
    a2b4:	4413      	add	r3, r2
    a2b6:	3330      	adds	r3, #48	; 0x30
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a2bc:	7bfb      	ldrb	r3, [r7, #15]
    a2be:	f023 030f 	bic.w	r3, r3, #15
    a2c2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a2c4:	787b      	ldrb	r3, [r7, #1]
    a2c6:	f003 030f 	and.w	r3, r3, #15
    a2ca:	b2da      	uxtb	r2, r3
    a2cc:	7bfb      	ldrb	r3, [r7, #15]
    a2ce:	4313      	orrs	r3, r2
    a2d0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a2d2:	78fa      	ldrb	r2, [r7, #3]
    a2d4:	78bb      	ldrb	r3, [r7, #2]
    a2d6:	6879      	ldr	r1, [r7, #4]
    a2d8:	01d2      	lsls	r2, r2, #7
    a2da:	440a      	add	r2, r1
    a2dc:	4413      	add	r3, r2
    a2de:	3330      	adds	r3, #48	; 0x30
    a2e0:	7bfa      	ldrb	r2, [r7, #15]
    a2e2:	701a      	strb	r2, [r3, #0]
}
    a2e4:	bf00      	nop
    a2e6:	3714      	adds	r7, #20
    a2e8:	46bd      	mov	sp, r7
    a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ee:	4770      	bx	lr

0000a2f0 <hri_port_write_PMUX_PMUXO_bf>:
{
    a2f0:	b480      	push	{r7}
    a2f2:	b085      	sub	sp, #20
    a2f4:	af00      	add	r7, sp, #0
    a2f6:	6078      	str	r0, [r7, #4]
    a2f8:	4608      	mov	r0, r1
    a2fa:	4611      	mov	r1, r2
    a2fc:	461a      	mov	r2, r3
    a2fe:	4603      	mov	r3, r0
    a300:	70fb      	strb	r3, [r7, #3]
    a302:	460b      	mov	r3, r1
    a304:	70bb      	strb	r3, [r7, #2]
    a306:	4613      	mov	r3, r2
    a308:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a30a:	78fa      	ldrb	r2, [r7, #3]
    a30c:	78bb      	ldrb	r3, [r7, #2]
    a30e:	6879      	ldr	r1, [r7, #4]
    a310:	01d2      	lsls	r2, r2, #7
    a312:	440a      	add	r2, r1
    a314:	4413      	add	r3, r2
    a316:	3330      	adds	r3, #48	; 0x30
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a31c:	7bfb      	ldrb	r3, [r7, #15]
    a31e:	f003 030f 	and.w	r3, r3, #15
    a322:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a324:	787b      	ldrb	r3, [r7, #1]
    a326:	011b      	lsls	r3, r3, #4
    a328:	b2da      	uxtb	r2, r3
    a32a:	7bfb      	ldrb	r3, [r7, #15]
    a32c:	4313      	orrs	r3, r2
    a32e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a330:	78fa      	ldrb	r2, [r7, #3]
    a332:	78bb      	ldrb	r3, [r7, #2]
    a334:	6879      	ldr	r1, [r7, #4]
    a336:	01d2      	lsls	r2, r2, #7
    a338:	440a      	add	r2, r1
    a33a:	4413      	add	r3, r2
    a33c:	3330      	adds	r3, #48	; 0x30
    a33e:	7bfa      	ldrb	r2, [r7, #15]
    a340:	701a      	strb	r2, [r3, #0]
}
    a342:	bf00      	nop
    a344:	3714      	adds	r7, #20
    a346:	46bd      	mov	sp, r7
    a348:	f85d 7b04 	ldr.w	r7, [sp], #4
    a34c:	4770      	bx	lr

0000a34e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a34e:	b480      	push	{r7}
    a350:	b085      	sub	sp, #20
    a352:	af00      	add	r7, sp, #0
    a354:	6078      	str	r0, [r7, #4]
    a356:	4608      	mov	r0, r1
    a358:	4611      	mov	r1, r2
    a35a:	461a      	mov	r2, r3
    a35c:	4603      	mov	r3, r0
    a35e:	70fb      	strb	r3, [r7, #3]
    a360:	460b      	mov	r3, r1
    a362:	70bb      	strb	r3, [r7, #2]
    a364:	4613      	mov	r3, r2
    a366:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a368:	78fa      	ldrb	r2, [r7, #3]
    a36a:	78bb      	ldrb	r3, [r7, #2]
    a36c:	6879      	ldr	r1, [r7, #4]
    a36e:	01d2      	lsls	r2, r2, #7
    a370:	440a      	add	r2, r1
    a372:	4413      	add	r3, r2
    a374:	3340      	adds	r3, #64	; 0x40
    a376:	781b      	ldrb	r3, [r3, #0]
    a378:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a37a:	7bfb      	ldrb	r3, [r7, #15]
    a37c:	f023 0301 	bic.w	r3, r3, #1
    a380:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a382:	787a      	ldrb	r2, [r7, #1]
    a384:	7bfb      	ldrb	r3, [r7, #15]
    a386:	4313      	orrs	r3, r2
    a388:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a38a:	78fa      	ldrb	r2, [r7, #3]
    a38c:	78bb      	ldrb	r3, [r7, #2]
    a38e:	6879      	ldr	r1, [r7, #4]
    a390:	01d2      	lsls	r2, r2, #7
    a392:	440a      	add	r2, r1
    a394:	4413      	add	r3, r2
    a396:	3340      	adds	r3, #64	; 0x40
    a398:	7bfa      	ldrb	r2, [r7, #15]
    a39a:	701a      	strb	r2, [r3, #0]
}
    a39c:	bf00      	nop
    a39e:	3714      	adds	r7, #20
    a3a0:	46bd      	mov	sp, r7
    a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3a6:	4770      	bx	lr

0000a3a8 <hri_port_write_WRCONFIG_reg>:
{
    a3a8:	b480      	push	{r7}
    a3aa:	b085      	sub	sp, #20
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	60f8      	str	r0, [r7, #12]
    a3b0:	460b      	mov	r3, r1
    a3b2:	607a      	str	r2, [r7, #4]
    a3b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a3b6:	7afb      	ldrb	r3, [r7, #11]
    a3b8:	68fa      	ldr	r2, [r7, #12]
    a3ba:	01db      	lsls	r3, r3, #7
    a3bc:	4413      	add	r3, r2
    a3be:	3328      	adds	r3, #40	; 0x28
    a3c0:	687a      	ldr	r2, [r7, #4]
    a3c2:	601a      	str	r2, [r3, #0]
}
    a3c4:	bf00      	nop
    a3c6:	3714      	adds	r7, #20
    a3c8:	46bd      	mov	sp, r7
    a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ce:	4770      	bx	lr

0000a3d0 <_gpio_set_direction>:
{
    a3d0:	b580      	push	{r7, lr}
    a3d2:	b082      	sub	sp, #8
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	4603      	mov	r3, r0
    a3d8:	6039      	str	r1, [r7, #0]
    a3da:	71fb      	strb	r3, [r7, #7]
    a3dc:	4613      	mov	r3, r2
    a3de:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a3e0:	79bb      	ldrb	r3, [r7, #6]
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	d01c      	beq.n	a420 <_gpio_set_direction+0x50>
    a3e6:	2b02      	cmp	r3, #2
    a3e8:	d037      	beq.n	a45a <_gpio_set_direction+0x8a>
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d14e      	bne.n	a48c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a3ee:	79fb      	ldrb	r3, [r7, #7]
    a3f0:	683a      	ldr	r2, [r7, #0]
    a3f2:	4619      	mov	r1, r3
    a3f4:	482a      	ldr	r0, [pc, #168]	; (a4a0 <_gpio_set_direction+0xd0>)
    a3f6:	4b2b      	ldr	r3, [pc, #172]	; (a4a4 <_gpio_set_direction+0xd4>)
    a3f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a3fa:	683b      	ldr	r3, [r7, #0]
    a3fc:	b29b      	uxth	r3, r3
    a3fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a402:	79fb      	ldrb	r3, [r7, #7]
    a404:	4619      	mov	r1, r3
    a406:	4826      	ldr	r0, [pc, #152]	; (a4a0 <_gpio_set_direction+0xd0>)
    a408:	4b27      	ldr	r3, [pc, #156]	; (a4a8 <_gpio_set_direction+0xd8>)
    a40a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a40c:	683b      	ldr	r3, [r7, #0]
    a40e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a410:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a414:	79fb      	ldrb	r3, [r7, #7]
    a416:	4619      	mov	r1, r3
    a418:	4821      	ldr	r0, [pc, #132]	; (a4a0 <_gpio_set_direction+0xd0>)
    a41a:	4b23      	ldr	r3, [pc, #140]	; (a4a8 <_gpio_set_direction+0xd8>)
    a41c:	4798      	blx	r3
		break;
    a41e:	e03a      	b.n	a496 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a420:	79fb      	ldrb	r3, [r7, #7]
    a422:	683a      	ldr	r2, [r7, #0]
    a424:	4619      	mov	r1, r3
    a426:	481e      	ldr	r0, [pc, #120]	; (a4a0 <_gpio_set_direction+0xd0>)
    a428:	4b1e      	ldr	r3, [pc, #120]	; (a4a4 <_gpio_set_direction+0xd4>)
    a42a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a42c:	683b      	ldr	r3, [r7, #0]
    a42e:	b29b      	uxth	r3, r3
    a430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a438:	79f9      	ldrb	r1, [r7, #7]
    a43a:	461a      	mov	r2, r3
    a43c:	4818      	ldr	r0, [pc, #96]	; (a4a0 <_gpio_set_direction+0xd0>)
    a43e:	4b1a      	ldr	r3, [pc, #104]	; (a4a8 <_gpio_set_direction+0xd8>)
    a440:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a442:	683b      	ldr	r3, [r7, #0]
    a444:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a446:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a44a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a44e:	79f9      	ldrb	r1, [r7, #7]
    a450:	461a      	mov	r2, r3
    a452:	4813      	ldr	r0, [pc, #76]	; (a4a0 <_gpio_set_direction+0xd0>)
    a454:	4b14      	ldr	r3, [pc, #80]	; (a4a8 <_gpio_set_direction+0xd8>)
    a456:	4798      	blx	r3
		break;
    a458:	e01d      	b.n	a496 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a45a:	79fb      	ldrb	r3, [r7, #7]
    a45c:	683a      	ldr	r2, [r7, #0]
    a45e:	4619      	mov	r1, r3
    a460:	480f      	ldr	r0, [pc, #60]	; (a4a0 <_gpio_set_direction+0xd0>)
    a462:	4b12      	ldr	r3, [pc, #72]	; (a4ac <_gpio_set_direction+0xdc>)
    a464:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a466:	683b      	ldr	r3, [r7, #0]
    a468:	b29b      	uxth	r3, r3
    a46a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a46e:	79fb      	ldrb	r3, [r7, #7]
    a470:	4619      	mov	r1, r3
    a472:	480b      	ldr	r0, [pc, #44]	; (a4a0 <_gpio_set_direction+0xd0>)
    a474:	4b0c      	ldr	r3, [pc, #48]	; (a4a8 <_gpio_set_direction+0xd8>)
    a476:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a478:	683b      	ldr	r3, [r7, #0]
    a47a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a47c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a480:	79fb      	ldrb	r3, [r7, #7]
    a482:	4619      	mov	r1, r3
    a484:	4806      	ldr	r0, [pc, #24]	; (a4a0 <_gpio_set_direction+0xd0>)
    a486:	4b08      	ldr	r3, [pc, #32]	; (a4a8 <_gpio_set_direction+0xd8>)
    a488:	4798      	blx	r3
		break;
    a48a:	e004      	b.n	a496 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a48c:	2246      	movs	r2, #70	; 0x46
    a48e:	4908      	ldr	r1, [pc, #32]	; (a4b0 <_gpio_set_direction+0xe0>)
    a490:	2000      	movs	r0, #0
    a492:	4b08      	ldr	r3, [pc, #32]	; (a4b4 <_gpio_set_direction+0xe4>)
    a494:	4798      	blx	r3
}
    a496:	bf00      	nop
    a498:	3708      	adds	r7, #8
    a49a:	46bd      	mov	sp, r7
    a49c:	bd80      	pop	{r7, pc}
    a49e:	bf00      	nop
    a4a0:	41008000 	.word	0x41008000
    a4a4:	0000a219 	.word	0x0000a219
    a4a8:	0000a3a9 	.word	0x0000a3a9
    a4ac:	0000a1f1 	.word	0x0000a1f1
    a4b0:	0000d794 	.word	0x0000d794
    a4b4:	00003079 	.word	0x00003079

0000a4b8 <_gpio_set_level>:
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b082      	sub	sp, #8
    a4bc:	af00      	add	r7, sp, #0
    a4be:	4603      	mov	r3, r0
    a4c0:	6039      	str	r1, [r7, #0]
    a4c2:	71fb      	strb	r3, [r7, #7]
    a4c4:	4613      	mov	r3, r2
    a4c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a4c8:	79bb      	ldrb	r3, [r7, #6]
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d006      	beq.n	a4dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a4ce:	79fb      	ldrb	r3, [r7, #7]
    a4d0:	683a      	ldr	r2, [r7, #0]
    a4d2:	4619      	mov	r1, r3
    a4d4:	4806      	ldr	r0, [pc, #24]	; (a4f0 <_gpio_set_level+0x38>)
    a4d6:	4b07      	ldr	r3, [pc, #28]	; (a4f4 <_gpio_set_level+0x3c>)
    a4d8:	4798      	blx	r3
}
    a4da:	e005      	b.n	a4e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a4dc:	79fb      	ldrb	r3, [r7, #7]
    a4de:	683a      	ldr	r2, [r7, #0]
    a4e0:	4619      	mov	r1, r3
    a4e2:	4803      	ldr	r0, [pc, #12]	; (a4f0 <_gpio_set_level+0x38>)
    a4e4:	4b04      	ldr	r3, [pc, #16]	; (a4f8 <_gpio_set_level+0x40>)
    a4e6:	4798      	blx	r3
}
    a4e8:	bf00      	nop
    a4ea:	3708      	adds	r7, #8
    a4ec:	46bd      	mov	sp, r7
    a4ee:	bd80      	pop	{r7, pc}
    a4f0:	41008000 	.word	0x41008000
    a4f4:	0000a241 	.word	0x0000a241
    a4f8:	0000a269 	.word	0x0000a269

0000a4fc <_gpio_set_pin_function>:
{
    a4fc:	b590      	push	{r4, r7, lr}
    a4fe:	b085      	sub	sp, #20
    a500:	af00      	add	r7, sp, #0
    a502:	6078      	str	r0, [r7, #4]
    a504:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a506:	687b      	ldr	r3, [r7, #4]
    a508:	095b      	lsrs	r3, r3, #5
    a50a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	b2db      	uxtb	r3, r3
    a510:	f003 031f 	and.w	r3, r3, #31
    a514:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a516:	683b      	ldr	r3, [r7, #0]
    a518:	f1b3 3fff 	cmp.w	r3, #4294967295
    a51c:	d106      	bne.n	a52c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a51e:	7bba      	ldrb	r2, [r7, #14]
    a520:	7bf9      	ldrb	r1, [r7, #15]
    a522:	2300      	movs	r3, #0
    a524:	4812      	ldr	r0, [pc, #72]	; (a570 <_gpio_set_pin_function+0x74>)
    a526:	4c13      	ldr	r4, [pc, #76]	; (a574 <_gpio_set_pin_function+0x78>)
    a528:	47a0      	blx	r4
}
    a52a:	e01d      	b.n	a568 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a52c:	7bba      	ldrb	r2, [r7, #14]
    a52e:	7bf9      	ldrb	r1, [r7, #15]
    a530:	2301      	movs	r3, #1
    a532:	480f      	ldr	r0, [pc, #60]	; (a570 <_gpio_set_pin_function+0x74>)
    a534:	4c0f      	ldr	r4, [pc, #60]	; (a574 <_gpio_set_pin_function+0x78>)
    a536:	47a0      	blx	r4
		if (pin & 1) {
    a538:	7bbb      	ldrb	r3, [r7, #14]
    a53a:	f003 0301 	and.w	r3, r3, #1
    a53e:	2b00      	cmp	r3, #0
    a540:	d009      	beq.n	a556 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a542:	7bbb      	ldrb	r3, [r7, #14]
    a544:	085b      	lsrs	r3, r3, #1
    a546:	b2da      	uxtb	r2, r3
    a548:	683b      	ldr	r3, [r7, #0]
    a54a:	b2db      	uxtb	r3, r3
    a54c:	7bf9      	ldrb	r1, [r7, #15]
    a54e:	4808      	ldr	r0, [pc, #32]	; (a570 <_gpio_set_pin_function+0x74>)
    a550:	4c09      	ldr	r4, [pc, #36]	; (a578 <_gpio_set_pin_function+0x7c>)
    a552:	47a0      	blx	r4
}
    a554:	e008      	b.n	a568 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a556:	7bbb      	ldrb	r3, [r7, #14]
    a558:	085b      	lsrs	r3, r3, #1
    a55a:	b2da      	uxtb	r2, r3
    a55c:	683b      	ldr	r3, [r7, #0]
    a55e:	b2db      	uxtb	r3, r3
    a560:	7bf9      	ldrb	r1, [r7, #15]
    a562:	4803      	ldr	r0, [pc, #12]	; (a570 <_gpio_set_pin_function+0x74>)
    a564:	4c05      	ldr	r4, [pc, #20]	; (a57c <_gpio_set_pin_function+0x80>)
    a566:	47a0      	blx	r4
}
    a568:	bf00      	nop
    a56a:	3714      	adds	r7, #20
    a56c:	46bd      	mov	sp, r7
    a56e:	bd90      	pop	{r4, r7, pc}
    a570:	41008000 	.word	0x41008000
    a574:	0000a34f 	.word	0x0000a34f
    a578:	0000a2f1 	.word	0x0000a2f1
    a57c:	0000a291 	.word	0x0000a291

0000a580 <gpio_set_pin_function>:
{
    a580:	b580      	push	{r7, lr}
    a582:	b082      	sub	sp, #8
    a584:	af00      	add	r7, sp, #0
    a586:	6078      	str	r0, [r7, #4]
    a588:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a58a:	6839      	ldr	r1, [r7, #0]
    a58c:	6878      	ldr	r0, [r7, #4]
    a58e:	4b03      	ldr	r3, [pc, #12]	; (a59c <gpio_set_pin_function+0x1c>)
    a590:	4798      	blx	r3
}
    a592:	bf00      	nop
    a594:	3708      	adds	r7, #8
    a596:	46bd      	mov	sp, r7
    a598:	bd80      	pop	{r7, pc}
    a59a:	bf00      	nop
    a59c:	0000a4fd 	.word	0x0000a4fd

0000a5a0 <gpio_set_pin_direction>:
{
    a5a0:	b580      	push	{r7, lr}
    a5a2:	b082      	sub	sp, #8
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	4603      	mov	r3, r0
    a5a8:	460a      	mov	r2, r1
    a5aa:	71fb      	strb	r3, [r7, #7]
    a5ac:	4613      	mov	r3, r2
    a5ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a5b0:	79fb      	ldrb	r3, [r7, #7]
    a5b2:	095b      	lsrs	r3, r3, #5
    a5b4:	b2d8      	uxtb	r0, r3
    a5b6:	79fb      	ldrb	r3, [r7, #7]
    a5b8:	f003 031f 	and.w	r3, r3, #31
    a5bc:	2201      	movs	r2, #1
    a5be:	fa02 f303 	lsl.w	r3, r2, r3
    a5c2:	79ba      	ldrb	r2, [r7, #6]
    a5c4:	4619      	mov	r1, r3
    a5c6:	4b03      	ldr	r3, [pc, #12]	; (a5d4 <gpio_set_pin_direction+0x34>)
    a5c8:	4798      	blx	r3
}
    a5ca:	bf00      	nop
    a5cc:	3708      	adds	r7, #8
    a5ce:	46bd      	mov	sp, r7
    a5d0:	bd80      	pop	{r7, pc}
    a5d2:	bf00      	nop
    a5d4:	0000a3d1 	.word	0x0000a3d1

0000a5d8 <gpio_set_pin_level>:
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b082      	sub	sp, #8
    a5dc:	af00      	add	r7, sp, #0
    a5de:	4603      	mov	r3, r0
    a5e0:	460a      	mov	r2, r1
    a5e2:	71fb      	strb	r3, [r7, #7]
    a5e4:	4613      	mov	r3, r2
    a5e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a5e8:	79fb      	ldrb	r3, [r7, #7]
    a5ea:	095b      	lsrs	r3, r3, #5
    a5ec:	b2d8      	uxtb	r0, r3
    a5ee:	79fb      	ldrb	r3, [r7, #7]
    a5f0:	f003 031f 	and.w	r3, r3, #31
    a5f4:	2201      	movs	r2, #1
    a5f6:	fa02 f303 	lsl.w	r3, r2, r3
    a5fa:	79ba      	ldrb	r2, [r7, #6]
    a5fc:	4619      	mov	r1, r3
    a5fe:	4b03      	ldr	r3, [pc, #12]	; (a60c <gpio_set_pin_level+0x34>)
    a600:	4798      	blx	r3
}
    a602:	bf00      	nop
    a604:	3708      	adds	r7, #8
    a606:	46bd      	mov	sp, r7
    a608:	bd80      	pop	{r7, pc}
    a60a:	bf00      	nop
    a60c:	0000a4b9 	.word	0x0000a4b9

0000a610 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a610:	b580      	push	{r7, lr}
    a612:	b082      	sub	sp, #8
    a614:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a616:	2100      	movs	r1, #0
    a618:	2008      	movs	r0, #8
    a61a:	4b24      	ldr	r3, [pc, #144]	; (a6ac <QSPI_N25Q256_exit_xip+0x9c>)
    a61c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a61e:	2100      	movs	r1, #0
    a620:	202b      	movs	r0, #43	; 0x2b
    a622:	4b22      	ldr	r3, [pc, #136]	; (a6ac <QSPI_N25Q256_exit_xip+0x9c>)
    a624:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a626:	2100      	movs	r1, #0
    a628:	202a      	movs	r0, #42	; 0x2a
    a62a:	4b20      	ldr	r3, [pc, #128]	; (a6ac <QSPI_N25Q256_exit_xip+0x9c>)
    a62c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a62e:	2102      	movs	r1, #2
    a630:	2008      	movs	r0, #8
    a632:	4b1f      	ldr	r3, [pc, #124]	; (a6b0 <QSPI_N25Q256_exit_xip+0xa0>)
    a634:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a636:	2102      	movs	r1, #2
    a638:	202b      	movs	r0, #43	; 0x2b
    a63a:	4b1d      	ldr	r3, [pc, #116]	; (a6b0 <QSPI_N25Q256_exit_xip+0xa0>)
    a63c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a63e:	2102      	movs	r1, #2
    a640:	202a      	movs	r0, #42	; 0x2a
    a642:	4b1b      	ldr	r3, [pc, #108]	; (a6b0 <QSPI_N25Q256_exit_xip+0xa0>)
    a644:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a646:	2101      	movs	r1, #1
    a648:	2008      	movs	r0, #8
    a64a:	4b1a      	ldr	r3, [pc, #104]	; (a6b4 <QSPI_N25Q256_exit_xip+0xa4>)
    a64c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a64e:	2100      	movs	r1, #0
    a650:	202b      	movs	r0, #43	; 0x2b
    a652:	4b18      	ldr	r3, [pc, #96]	; (a6b4 <QSPI_N25Q256_exit_xip+0xa4>)
    a654:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a656:	2100      	movs	r1, #0
    a658:	202a      	movs	r0, #42	; 0x2a
    a65a:	4b16      	ldr	r3, [pc, #88]	; (a6b4 <QSPI_N25Q256_exit_xip+0xa4>)
    a65c:	4798      	blx	r3

	delay_us(1);
    a65e:	2001      	movs	r0, #1
    a660:	4b15      	ldr	r3, [pc, #84]	; (a6b8 <QSPI_N25Q256_exit_xip+0xa8>)
    a662:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a664:	2300      	movs	r3, #0
    a666:	607b      	str	r3, [r7, #4]
    a668:	e010      	b.n	a68c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a66a:	2101      	movs	r1, #1
    a66c:	202a      	movs	r0, #42	; 0x2a
    a66e:	4b11      	ldr	r3, [pc, #68]	; (a6b4 <QSPI_N25Q256_exit_xip+0xa4>)
    a670:	4798      	blx	r3
		delay_us(1);
    a672:	2001      	movs	r0, #1
    a674:	4b10      	ldr	r3, [pc, #64]	; (a6b8 <QSPI_N25Q256_exit_xip+0xa8>)
    a676:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a678:	2100      	movs	r1, #0
    a67a:	202a      	movs	r0, #42	; 0x2a
    a67c:	4b0d      	ldr	r3, [pc, #52]	; (a6b4 <QSPI_N25Q256_exit_xip+0xa4>)
    a67e:	4798      	blx	r3
		delay_us(1);
    a680:	2001      	movs	r0, #1
    a682:	4b0d      	ldr	r3, [pc, #52]	; (a6b8 <QSPI_N25Q256_exit_xip+0xa8>)
    a684:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a686:	687b      	ldr	r3, [r7, #4]
    a688:	3301      	adds	r3, #1
    a68a:	607b      	str	r3, [r7, #4]
    a68c:	687b      	ldr	r3, [r7, #4]
    a68e:	2b06      	cmp	r3, #6
    a690:	ddeb      	ble.n	a66a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a692:	2101      	movs	r1, #1
    a694:	202b      	movs	r0, #43	; 0x2b
    a696:	4b07      	ldr	r3, [pc, #28]	; (a6b4 <QSPI_N25Q256_exit_xip+0xa4>)
    a698:	4798      	blx	r3
	delay_us(1);
    a69a:	2001      	movs	r0, #1
    a69c:	4b06      	ldr	r3, [pc, #24]	; (a6b8 <QSPI_N25Q256_exit_xip+0xa8>)
    a69e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a6a0:	4b06      	ldr	r3, [pc, #24]	; (a6bc <QSPI_N25Q256_exit_xip+0xac>)
    a6a2:	4798      	blx	r3
}
    a6a4:	bf00      	nop
    a6a6:	3708      	adds	r7, #8
    a6a8:	46bd      	mov	sp, r7
    a6aa:	bd80      	pop	{r7, pc}
    a6ac:	0000a581 	.word	0x0000a581
    a6b0:	0000a5a1 	.word	0x0000a5a1
    a6b4:	0000a5d9 	.word	0x0000a5d9
    a6b8:	000017f9 	.word	0x000017f9
    a6bc:	00000da1 	.word	0x00000da1

0000a6c0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a6c0:	b598      	push	{r3, r4, r7, lr}
    a6c2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a6c4:	4806      	ldr	r0, [pc, #24]	; (a6e0 <spi_nor_flash_init+0x20>)
    a6c6:	4b07      	ldr	r3, [pc, #28]	; (a6e4 <spi_nor_flash_init+0x24>)
    a6c8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a6ca:	2300      	movs	r3, #0
    a6cc:	4a06      	ldr	r2, [pc, #24]	; (a6e8 <spi_nor_flash_init+0x28>)
    a6ce:	4904      	ldr	r1, [pc, #16]	; (a6e0 <spi_nor_flash_init+0x20>)
    a6d0:	4806      	ldr	r0, [pc, #24]	; (a6ec <spi_nor_flash_init+0x2c>)
    a6d2:	4c07      	ldr	r4, [pc, #28]	; (a6f0 <spi_nor_flash_init+0x30>)
    a6d4:	47a0      	blx	r4
    a6d6:	4602      	mov	r2, r0
    a6d8:	4b06      	ldr	r3, [pc, #24]	; (a6f4 <spi_nor_flash_init+0x34>)
    a6da:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a6dc:	bf00      	nop
    a6de:	bd98      	pop	{r3, r4, r7, pc}
    a6e0:	20000c6c 	.word	0x20000c6c
    a6e4:	00001c61 	.word	0x00001c61
    a6e8:	0000a611 	.word	0x0000a611
    a6ec:	20000aa0 	.word	0x20000aa0
    a6f0:	0000ab2d 	.word	0x0000ab2d
    a6f4:	20000e5c 	.word	0x20000e5c

0000a6f8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a6f8:	b580      	push	{r7, lr}
    a6fa:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a6fc:	4805      	ldr	r0, [pc, #20]	; (a714 <cdc_device_acm_init+0x1c>)
    a6fe:	4b06      	ldr	r3, [pc, #24]	; (a718 <cdc_device_acm_init+0x20>)
    a700:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a702:	4b06      	ldr	r3, [pc, #24]	; (a71c <cdc_device_acm_init+0x24>)
    a704:	4798      	blx	r3

	usbdc_start(single_desc);
    a706:	4806      	ldr	r0, [pc, #24]	; (a720 <cdc_device_acm_init+0x28>)
    a708:	4b06      	ldr	r3, [pc, #24]	; (a724 <cdc_device_acm_init+0x2c>)
    a70a:	4798      	blx	r3
	usbdc_attach();
    a70c:	4b06      	ldr	r3, [pc, #24]	; (a728 <cdc_device_acm_init+0x30>)
    a70e:	4798      	blx	r3
}
    a710:	bf00      	nop
    a712:	bd80      	pop	{r7, pc}
    a714:	20000af0 	.word	0x20000af0
    a718:	0000c255 	.word	0x0000c255
    a71c:	0000b4cd 	.word	0x0000b4cd
    a720:	20000104 	.word	0x20000104
    a724:	0000c2f1 	.word	0x0000c2f1
    a728:	0000c341 	.word	0x0000c341

0000a72c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a730:	4b01      	ldr	r3, [pc, #4]	; (a738 <usb_init+0xc>)
    a732:	4798      	blx	r3
}
    a734:	bf00      	nop
    a736:	bd80      	pop	{r7, pc}
    a738:	0000a6f9 	.word	0x0000a6f9

0000a73c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a73c:	b480      	push	{r7}
    a73e:	b085      	sub	sp, #20
    a740:	af00      	add	r7, sp, #0
    a742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a744:	f3ef 8310 	mrs	r3, PRIMASK
    a748:	60fb      	str	r3, [r7, #12]
  return(result);
    a74a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a74c:	687b      	ldr	r3, [r7, #4]
    a74e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a750:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a752:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a756:	bf00      	nop
    a758:	3714      	adds	r7, #20
    a75a:	46bd      	mov	sp, r7
    a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a760:	4770      	bx	lr

0000a762 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a762:	b480      	push	{r7}
    a764:	b085      	sub	sp, #20
    a766:	af00      	add	r7, sp, #0
    a768:	6078      	str	r0, [r7, #4]
    a76a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a76e:	687b      	ldr	r3, [r7, #4]
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a774:	68fb      	ldr	r3, [r7, #12]
    a776:	f383 8810 	msr	PRIMASK, r3
}
    a77a:	bf00      	nop
    a77c:	3714      	adds	r7, #20
    a77e:	46bd      	mov	sp, r7
    a780:	f85d 7b04 	ldr.w	r7, [sp], #4
    a784:	4770      	bx	lr
	...

0000a788 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a788:	b580      	push	{r7, lr}
    a78a:	b08c      	sub	sp, #48	; 0x30
    a78c:	af00      	add	r7, sp, #0
    a78e:	6078      	str	r0, [r7, #4]
    a790:	460b      	mov	r3, r1
    a792:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a794:	687b      	ldr	r3, [r7, #4]
    a796:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	681b      	ldr	r3, [r3, #0]
    a79c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a79e:	f107 030c 	add.w	r3, r7, #12
    a7a2:	2200      	movs	r2, #0
    a7a4:	601a      	str	r2, [r3, #0]
    a7a6:	605a      	str	r2, [r3, #4]
    a7a8:	609a      	str	r2, [r3, #8]
    a7aa:	60da      	str	r2, [r3, #12]
    a7ac:	611a      	str	r2, [r3, #16]
    a7ae:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a7b2:	7b1b      	ldrb	r3, [r3, #12]
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d001      	beq.n	a7bc <n25q256a_xip_confirm+0x34>
    a7b8:	2206      	movs	r2, #6
    a7ba:	e000      	b.n	a7be <n25q256a_xip_confirm+0x36>
    a7bc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a7be:	7b3b      	ldrb	r3, [r7, #12]
    a7c0:	f362 0302 	bfi	r3, r2, #0, #3
    a7c4:	733b      	strb	r3, [r7, #12]
    a7c6:	7b3b      	ldrb	r3, [r7, #12]
    a7c8:	f043 0310 	orr.w	r3, r3, #16
    a7cc:	733b      	strb	r3, [r7, #12]
    a7ce:	7b3b      	ldrb	r3, [r7, #12]
    a7d0:	f043 0320 	orr.w	r3, r3, #32
    a7d4:	733b      	strb	r3, [r7, #12]
    a7d6:	7b3b      	ldrb	r3, [r7, #12]
    a7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a7dc:	733b      	strb	r3, [r7, #12]
    a7de:	7b3b      	ldrb	r3, [r7, #12]
    a7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a7e4:	733b      	strb	r3, [r7, #12]
    a7e6:	7b7b      	ldrb	r3, [r7, #13]
    a7e8:	f043 0303 	orr.w	r3, r3, #3
    a7ec:	737b      	strb	r3, [r7, #13]
    a7ee:	7b7b      	ldrb	r3, [r7, #13]
    a7f0:	2201      	movs	r2, #1
    a7f2:	f362 1305 	bfi	r3, r2, #4, #2
    a7f6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a7fa:	7b1b      	ldrb	r3, [r3, #12]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d001      	beq.n	a804 <n25q256a_xip_confirm+0x7c>
    a800:	2208      	movs	r2, #8
    a802:	e000      	b.n	a806 <n25q256a_xip_confirm+0x7e>
    a804:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a806:	7bbb      	ldrb	r3, [r7, #14]
    a808:	f362 0304 	bfi	r3, r2, #0, #5
    a80c:	73bb      	strb	r3, [r7, #14]
    a80e:	230b      	movs	r3, #11
    a810:	743b      	strb	r3, [r7, #16]
    a812:	78fb      	ldrb	r3, [r7, #3]
    a814:	2b00      	cmp	r3, #0
    a816:	d001      	beq.n	a81c <n25q256a_xip_confirm+0x94>
    a818:	2300      	movs	r3, #0
    a81a:	e000      	b.n	a81e <n25q256a_xip_confirm+0x96>
    a81c:	23ff      	movs	r3, #255	; 0xff
    a81e:	747b      	strb	r3, [r7, #17]
    a820:	2301      	movs	r3, #1
    a822:	61bb      	str	r3, [r7, #24]
    a824:	f107 0327 	add.w	r3, r7, #39	; 0x27
    a828:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    a82a:	f107 030c 	add.w	r3, r7, #12
    a82e:	4619      	mov	r1, r3
    a830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a832:	4b07      	ldr	r3, [pc, #28]	; (a850 <n25q256a_xip_confirm+0xc8>)
    a834:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    a836:	78fb      	ldrb	r3, [r7, #3]
    a838:	2b00      	cmp	r3, #0
    a83a:	d001      	beq.n	a840 <n25q256a_xip_confirm+0xb8>
    a83c:	2202      	movs	r2, #2
    a83e:	e000      	b.n	a842 <n25q256a_xip_confirm+0xba>
    a840:	2201      	movs	r2, #1
    a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a844:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a846:	2300      	movs	r3, #0
}
    a848:	4618      	mov	r0, r3
    a84a:	3730      	adds	r7, #48	; 0x30
    a84c:	46bd      	mov	sp, r7
    a84e:	bd80      	pop	{r7, pc}
    a850:	00001cd9 	.word	0x00001cd9

0000a854 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    a854:	b580      	push	{r7, lr}
    a856:	b08c      	sub	sp, #48	; 0x30
    a858:	af00      	add	r7, sp, #0
    a85a:	6078      	str	r0, [r7, #4]
    a85c:	460b      	mov	r3, r1
    a85e:	70fb      	strb	r3, [r7, #3]
    a860:	4613      	mov	r3, r2
    a862:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    a864:	2300      	movs	r3, #0
    a866:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    a868:	687b      	ldr	r3, [r7, #4]
    a86a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    a86c:	687b      	ldr	r3, [r7, #4]
    a86e:	681b      	ldr	r3, [r3, #0]
    a870:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    a872:	f107 030c 	add.w	r3, r7, #12
    a876:	2200      	movs	r2, #0
    a878:	601a      	str	r2, [r3, #0]
    a87a:	605a      	str	r2, [r3, #4]
    a87c:	609a      	str	r2, [r3, #8]
    a87e:	60da      	str	r2, [r3, #12]
    a880:	611a      	str	r2, [r3, #16]
    a882:	615a      	str	r2, [r3, #20]
    a884:	78fb      	ldrb	r3, [r7, #3]
    a886:	f003 0307 	and.w	r3, r3, #7
    a88a:	b2da      	uxtb	r2, r3
    a88c:	7b3b      	ldrb	r3, [r7, #12]
    a88e:	f362 0302 	bfi	r3, r2, #0, #3
    a892:	733b      	strb	r3, [r7, #12]
    a894:	7b3b      	ldrb	r3, [r7, #12]
    a896:	f043 0310 	orr.w	r3, r3, #16
    a89a:	733b      	strb	r3, [r7, #12]
    a89c:	7b3b      	ldrb	r3, [r7, #12]
    a89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a8a2:	733b      	strb	r3, [r7, #12]
    a8a4:	78bb      	ldrb	r3, [r7, #2]
    a8a6:	743b      	strb	r3, [r7, #16]
    a8a8:	2301      	movs	r3, #1
    a8aa:	61bb      	str	r3, [r7, #24]
    a8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a8b0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8b4:	7b5b      	ldrb	r3, [r3, #13]
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d003      	beq.n	a8c2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    a8ba:	2100      	movs	r1, #0
    a8bc:	6878      	ldr	r0, [r7, #4]
    a8be:	4b0a      	ldr	r3, [pc, #40]	; (a8e8 <n25q256a_read_reg+0x94>)
    a8c0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a8c2:	f107 030c 	add.w	r3, r7, #12
    a8c6:	4619      	mov	r1, r3
    a8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a8ca:	4b08      	ldr	r3, [pc, #32]	; (a8ec <n25q256a_read_reg+0x98>)
    a8cc:	4798      	blx	r3
	if (n25q->xip_mode) {
    a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8d0:	7b5b      	ldrb	r3, [r3, #13]
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d003      	beq.n	a8de <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    a8d6:	2101      	movs	r1, #1
    a8d8:	6878      	ldr	r0, [r7, #4]
    a8da:	4b03      	ldr	r3, [pc, #12]	; (a8e8 <n25q256a_read_reg+0x94>)
    a8dc:	4798      	blx	r3
	}
	return status;
    a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a8e0:	4618      	mov	r0, r3
    a8e2:	3730      	adds	r7, #48	; 0x30
    a8e4:	46bd      	mov	sp, r7
    a8e6:	bd80      	pop	{r7, pc}
    a8e8:	0000a789 	.word	0x0000a789
    a8ec:	00001cd9 	.word	0x00001cd9

0000a8f0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	b08c      	sub	sp, #48	; 0x30
    a8f4:	af00      	add	r7, sp, #0
    a8f6:	60f8      	str	r0, [r7, #12]
    a8f8:	607b      	str	r3, [r7, #4]
    a8fa:	460b      	mov	r3, r1
    a8fc:	72fb      	strb	r3, [r7, #11]
    a8fe:	4613      	mov	r3, r2
    a900:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a902:	68fb      	ldr	r3, [r7, #12]
    a904:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a906:	68fb      	ldr	r3, [r7, #12]
    a908:	681b      	ldr	r3, [r3, #0]
    a90a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    a90c:	f107 0310 	add.w	r3, r7, #16
    a910:	2200      	movs	r2, #0
    a912:	601a      	str	r2, [r3, #0]
    a914:	605a      	str	r2, [r3, #4]
    a916:	609a      	str	r2, [r3, #8]
    a918:	60da      	str	r2, [r3, #12]
    a91a:	611a      	str	r2, [r3, #16]
    a91c:	615a      	str	r2, [r3, #20]
    a91e:	7afb      	ldrb	r3, [r7, #11]
    a920:	f003 0307 	and.w	r3, r3, #7
    a924:	b2da      	uxtb	r2, r3
    a926:	7c3b      	ldrb	r3, [r7, #16]
    a928:	f362 0302 	bfi	r3, r2, #0, #3
    a92c:	743b      	strb	r3, [r7, #16]
    a92e:	7c3b      	ldrb	r3, [r7, #16]
    a930:	f043 0310 	orr.w	r3, r3, #16
    a934:	743b      	strb	r3, [r7, #16]
    a936:	7c3b      	ldrb	r3, [r7, #16]
    a938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a93c:	743b      	strb	r3, [r7, #16]
    a93e:	7c7b      	ldrb	r3, [r7, #17]
    a940:	2202      	movs	r2, #2
    a942:	f362 1305 	bfi	r3, r2, #4, #2
    a946:	747b      	strb	r3, [r7, #17]
    a948:	7abb      	ldrb	r3, [r7, #10]
    a94a:	753b      	strb	r3, [r7, #20]
    a94c:	2301      	movs	r3, #1
    a94e:	61fb      	str	r3, [r7, #28]
    a950:	1d3b      	adds	r3, r7, #4
    a952:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a956:	7b5b      	ldrb	r3, [r3, #13]
    a958:	2b00      	cmp	r3, #0
    a95a:	d003      	beq.n	a964 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    a95c:	2100      	movs	r1, #0
    a95e:	68f8      	ldr	r0, [r7, #12]
    a960:	4b09      	ldr	r3, [pc, #36]	; (a988 <n25q256a_write_reg+0x98>)
    a962:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a964:	f107 0310 	add.w	r3, r7, #16
    a968:	4619      	mov	r1, r3
    a96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a96c:	4b07      	ldr	r3, [pc, #28]	; (a98c <n25q256a_write_reg+0x9c>)
    a96e:	4798      	blx	r3
	if (n25q->xip_mode) {
    a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a972:	7b5b      	ldrb	r3, [r3, #13]
    a974:	2b00      	cmp	r3, #0
    a976:	d003      	beq.n	a980 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    a978:	2101      	movs	r1, #1
    a97a:	68f8      	ldr	r0, [r7, #12]
    a97c:	4b02      	ldr	r3, [pc, #8]	; (a988 <n25q256a_write_reg+0x98>)
    a97e:	4798      	blx	r3
	}
}
    a980:	bf00      	nop
    a982:	3730      	adds	r7, #48	; 0x30
    a984:	46bd      	mov	sp, r7
    a986:	bd80      	pop	{r7, pc}
    a988:	0000a789 	.word	0x0000a789
    a98c:	00001cd9 	.word	0x00001cd9

0000a990 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    a990:	b580      	push	{r7, lr}
    a992:	b090      	sub	sp, #64	; 0x40
    a994:	af00      	add	r7, sp, #0
    a996:	6078      	str	r0, [r7, #4]
    a998:	460b      	mov	r3, r1
    a99a:	70fb      	strb	r3, [r7, #3]
    a99c:	4613      	mov	r3, r2
    a99e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	681b      	ldr	r3, [r3, #0]
    a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    a9a6:	78bb      	ldrb	r3, [r7, #2]
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d001      	beq.n	a9b0 <n25q256a_write_enable+0x20>
    a9ac:	2306      	movs	r3, #6
    a9ae:	e000      	b.n	a9b2 <n25q256a_write_enable+0x22>
    a9b0:	2304      	movs	r3, #4
    a9b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    a9b6:	f107 0320 	add.w	r3, r7, #32
    a9ba:	2200      	movs	r2, #0
    a9bc:	601a      	str	r2, [r3, #0]
    a9be:	605a      	str	r2, [r3, #4]
    a9c0:	609a      	str	r2, [r3, #8]
    a9c2:	60da      	str	r2, [r3, #12]
    a9c4:	611a      	str	r2, [r3, #16]
    a9c6:	615a      	str	r2, [r3, #20]
    a9c8:	78fb      	ldrb	r3, [r7, #3]
    a9ca:	f003 0307 	and.w	r3, r3, #7
    a9ce:	b2da      	uxtb	r2, r3
    a9d0:	f897 3020 	ldrb.w	r3, [r7, #32]
    a9d4:	f362 0302 	bfi	r3, r2, #0, #3
    a9d8:	f887 3020 	strb.w	r3, [r7, #32]
    a9dc:	f897 3020 	ldrb.w	r3, [r7, #32]
    a9e0:	f043 0310 	orr.w	r3, r3, #16
    a9e4:	f887 3020 	strb.w	r3, [r7, #32]
    a9e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a9ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    a9f0:	f107 0308 	add.w	r3, r7, #8
    a9f4:	2200      	movs	r2, #0
    a9f6:	601a      	str	r2, [r3, #0]
    a9f8:	605a      	str	r2, [r3, #4]
    a9fa:	609a      	str	r2, [r3, #8]
    a9fc:	60da      	str	r2, [r3, #12]
    a9fe:	611a      	str	r2, [r3, #16]
    aa00:	615a      	str	r2, [r3, #20]
    aa02:	78fb      	ldrb	r3, [r7, #3]
    aa04:	f003 0307 	and.w	r3, r3, #7
    aa08:	b2da      	uxtb	r2, r3
    aa0a:	7a3b      	ldrb	r3, [r7, #8]
    aa0c:	f362 0302 	bfi	r3, r2, #0, #3
    aa10:	723b      	strb	r3, [r7, #8]
    aa12:	7a3b      	ldrb	r3, [r7, #8]
    aa14:	f043 0310 	orr.w	r3, r3, #16
    aa18:	723b      	strb	r3, [r7, #8]
    aa1a:	7a3b      	ldrb	r3, [r7, #8]
    aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa20:	723b      	strb	r3, [r7, #8]
    aa22:	2305      	movs	r3, #5
    aa24:	733b      	strb	r3, [r7, #12]
    aa26:	2301      	movs	r3, #1
    aa28:	617b      	str	r3, [r7, #20]
    aa2a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    aa2e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    aa30:	f107 0320 	add.w	r3, r7, #32
    aa34:	4619      	mov	r1, r3
    aa36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa38:	4b08      	ldr	r3, [pc, #32]	; (aa5c <n25q256a_write_enable+0xcc>)
    aa3a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    aa3c:	f107 0308 	add.w	r3, r7, #8
    aa40:	4619      	mov	r1, r3
    aa42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa44:	4b05      	ldr	r3, [pc, #20]	; (aa5c <n25q256a_write_enable+0xcc>)
    aa46:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    aa48:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    aa4c:	f003 0302 	and.w	r3, r3, #2
    aa50:	2b00      	cmp	r3, #0
    aa52:	d0ed      	beq.n	aa30 <n25q256a_write_enable+0xa0>
}
    aa54:	bf00      	nop
    aa56:	3740      	adds	r7, #64	; 0x40
    aa58:	46bd      	mov	sp, r7
    aa5a:	bd80      	pop	{r7, pc}
    aa5c:	00001cd9 	.word	0x00001cd9

0000aa60 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    aa60:	b590      	push	{r4, r7, lr}
    aa62:	b087      	sub	sp, #28
    aa64:	af00      	add	r7, sp, #0
    aa66:	6078      	str	r0, [r7, #4]
    aa68:	460b      	mov	r3, r1
    aa6a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aa6c:	687b      	ldr	r3, [r7, #4]
    aa6e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aa70:	68fb      	ldr	r3, [r7, #12]
    aa72:	7b1b      	ldrb	r3, [r3, #12]
    aa74:	2b00      	cmp	r3, #0
    aa76:	d001      	beq.n	aa7c <n25q256a_switch_mode+0x1c>
    aa78:	2306      	movs	r3, #6
    aa7a:	e000      	b.n	aa7e <n25q256a_switch_mode+0x1e>
    aa7c:	2300      	movs	r3, #0
    aa7e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aa80:	7afb      	ldrb	r3, [r7, #11]
    aa82:	2265      	movs	r2, #101	; 0x65
    aa84:	4619      	mov	r1, r3
    aa86:	6878      	ldr	r0, [r7, #4]
    aa88:	4b25      	ldr	r3, [pc, #148]	; (ab20 <n25q256a_switch_mode+0xc0>)
    aa8a:	4798      	blx	r3
    aa8c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    aa8e:	2300      	movs	r3, #0
    aa90:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    aa92:	68fb      	ldr	r3, [r7, #12]
    aa94:	7b1b      	ldrb	r3, [r3, #12]
    aa96:	78fa      	ldrb	r2, [r7, #3]
    aa98:	429a      	cmp	r2, r3
    aa9a:	d03d      	beq.n	ab18 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    aa9c:	78fb      	ldrb	r3, [r7, #3]
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	d00b      	beq.n	aaba <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    aaa2:	697b      	ldr	r3, [r7, #20]
    aaa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aaa8:	2b00      	cmp	r3, #0
    aaaa:	d011      	beq.n	aad0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    aaac:	697b      	ldr	r3, [r7, #20]
    aaae:	f003 031f 	and.w	r3, r3, #31
    aab2:	617b      	str	r3, [r7, #20]
			modify = 1;
    aab4:	2301      	movs	r3, #1
    aab6:	74fb      	strb	r3, [r7, #19]
    aab8:	e00a      	b.n	aad0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    aaba:	697b      	ldr	r3, [r7, #20]
    aabc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aac0:	2b00      	cmp	r3, #0
    aac2:	d105      	bne.n	aad0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    aac4:	697b      	ldr	r3, [r7, #20]
    aac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    aaca:	617b      	str	r3, [r7, #20]
			modify = 1;
    aacc:	2301      	movs	r3, #1
    aace:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    aad0:	7cfb      	ldrb	r3, [r7, #19]
    aad2:	2b00      	cmp	r3, #0
    aad4:	d021      	beq.n	ab1a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    aad6:	68fb      	ldr	r3, [r7, #12]
    aad8:	78fa      	ldrb	r2, [r7, #3]
    aada:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    aadc:	7afb      	ldrb	r3, [r7, #11]
    aade:	2201      	movs	r2, #1
    aae0:	4619      	mov	r1, r3
    aae2:	6878      	ldr	r0, [r7, #4]
    aae4:	4b0f      	ldr	r3, [pc, #60]	; (ab24 <n25q256a_switch_mode+0xc4>)
    aae6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    aae8:	7af9      	ldrb	r1, [r7, #11]
    aaea:	697b      	ldr	r3, [r7, #20]
    aaec:	2261      	movs	r2, #97	; 0x61
    aaee:	6878      	ldr	r0, [r7, #4]
    aaf0:	4c0d      	ldr	r4, [pc, #52]	; (ab28 <n25q256a_switch_mode+0xc8>)
    aaf2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aaf4:	78fb      	ldrb	r3, [r7, #3]
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d001      	beq.n	aafe <n25q256a_switch_mode+0x9e>
    aafa:	2306      	movs	r3, #6
    aafc:	e000      	b.n	ab00 <n25q256a_switch_mode+0xa0>
    aafe:	2300      	movs	r3, #0
    ab00:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ab02:	7afb      	ldrb	r3, [r7, #11]
    ab04:	2265      	movs	r2, #101	; 0x65
    ab06:	4619      	mov	r1, r3
    ab08:	6878      	ldr	r0, [r7, #4]
    ab0a:	4b05      	ldr	r3, [pc, #20]	; (ab20 <n25q256a_switch_mode+0xc0>)
    ab0c:	4798      	blx	r3
    ab0e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ab10:	68fb      	ldr	r3, [r7, #12]
    ab12:	78fa      	ldrb	r2, [r7, #3]
    ab14:	731a      	strb	r2, [r3, #12]
    ab16:	e000      	b.n	ab1a <n25q256a_switch_mode+0xba>
		return;
    ab18:	bf00      	nop
	}
}
    ab1a:	371c      	adds	r7, #28
    ab1c:	46bd      	mov	sp, r7
    ab1e:	bd90      	pop	{r4, r7, pc}
    ab20:	0000a855 	.word	0x0000a855
    ab24:	0000a991 	.word	0x0000a991
    ab28:	0000a8f1 	.word	0x0000a8f1

0000ab2c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b086      	sub	sp, #24
    ab30:	af00      	add	r7, sp, #0
    ab32:	60f8      	str	r0, [r7, #12]
    ab34:	60b9      	str	r1, [r7, #8]
    ab36:	607a      	str	r2, [r7, #4]
    ab38:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ab3a:	68fb      	ldr	r3, [r7, #12]
    ab3c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ab3e:	4a0c      	ldr	r2, [pc, #48]	; (ab70 <n25q256a_construct+0x44>)
    ab40:	68b9      	ldr	r1, [r7, #8]
    ab42:	68f8      	ldr	r0, [r7, #12]
    ab44:	4b0b      	ldr	r3, [pc, #44]	; (ab74 <n25q256a_construct+0x48>)
    ab46:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ab48:	697b      	ldr	r3, [r7, #20]
    ab4a:	2200      	movs	r2, #0
    ab4c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    ab4e:	697b      	ldr	r3, [r7, #20]
    ab50:	2200      	movs	r2, #0
    ab52:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    ab54:	697b      	ldr	r3, [r7, #20]
    ab56:	687a      	ldr	r2, [r7, #4]
    ab58:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    ab5a:	78fb      	ldrb	r3, [r7, #3]
    ab5c:	4619      	mov	r1, r3
    ab5e:	68f8      	ldr	r0, [r7, #12]
    ab60:	4b05      	ldr	r3, [pc, #20]	; (ab78 <n25q256a_construct+0x4c>)
    ab62:	4798      	blx	r3
	return me;
    ab64:	68fb      	ldr	r3, [r7, #12]
}
    ab66:	4618      	mov	r0, r3
    ab68:	3718      	adds	r7, #24
    ab6a:	46bd      	mov	sp, r7
    ab6c:	bd80      	pop	{r7, pc}
    ab6e:	bf00      	nop
    ab70:	0000d7b0 	.word	0x0000d7b0
    ab74:	0000b009 	.word	0x0000b009
    ab78:	0000aa61 	.word	0x0000aa61

0000ab7c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ab7c:	b580      	push	{r7, lr}
    ab7e:	b08c      	sub	sp, #48	; 0x30
    ab80:	af00      	add	r7, sp, #0
    ab82:	60f8      	str	r0, [r7, #12]
    ab84:	60b9      	str	r1, [r7, #8]
    ab86:	607a      	str	r2, [r7, #4]
    ab88:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ab8a:	68fb      	ldr	r3, [r7, #12]
    ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ab8e:	68fb      	ldr	r3, [r7, #12]
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    ab94:	f107 0310 	add.w	r3, r7, #16
    ab98:	2200      	movs	r2, #0
    ab9a:	601a      	str	r2, [r3, #0]
    ab9c:	605a      	str	r2, [r3, #4]
    ab9e:	609a      	str	r2, [r3, #8]
    aba0:	60da      	str	r2, [r3, #12]
    aba2:	611a      	str	r2, [r3, #16]
    aba4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aba8:	7b1b      	ldrb	r3, [r3, #12]
    abaa:	2b00      	cmp	r3, #0
    abac:	d001      	beq.n	abb2 <n25q256a_read+0x36>
    abae:	2206      	movs	r2, #6
    abb0:	e000      	b.n	abb4 <n25q256a_read+0x38>
    abb2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    abb4:	7c3b      	ldrb	r3, [r7, #16]
    abb6:	f362 0302 	bfi	r3, r2, #0, #3
    abba:	743b      	strb	r3, [r7, #16]
    abbc:	7c3b      	ldrb	r3, [r7, #16]
    abbe:	f043 0310 	orr.w	r3, r3, #16
    abc2:	743b      	strb	r3, [r7, #16]
    abc4:	7c3b      	ldrb	r3, [r7, #16]
    abc6:	f043 0320 	orr.w	r3, r3, #32
    abca:	743b      	strb	r3, [r7, #16]
    abcc:	7c3b      	ldrb	r3, [r7, #16]
    abce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    abd2:	743b      	strb	r3, [r7, #16]
    abd4:	7c7b      	ldrb	r3, [r7, #17]
    abd6:	2201      	movs	r2, #1
    abd8:	f362 1305 	bfi	r3, r2, #4, #2
    abdc:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abe0:	7b1b      	ldrb	r3, [r3, #12]
    abe2:	2b00      	cmp	r3, #0
    abe4:	d001      	beq.n	abea <n25q256a_read+0x6e>
    abe6:	220a      	movs	r2, #10
    abe8:	e000      	b.n	abec <n25q256a_read+0x70>
    abea:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    abec:	7cbb      	ldrb	r3, [r7, #18]
    abee:	f362 0304 	bfi	r3, r2, #0, #5
    abf2:	74bb      	strb	r3, [r7, #18]
    abf4:	230b      	movs	r3, #11
    abf6:	753b      	strb	r3, [r7, #20]
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	61bb      	str	r3, [r7, #24]
    abfc:	683b      	ldr	r3, [r7, #0]
    abfe:	61fb      	str	r3, [r7, #28]
    ac00:	68bb      	ldr	r3, [r7, #8]
    ac02:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ac04:	f107 0310 	add.w	r3, r7, #16
    ac08:	4619      	mov	r1, r3
    ac0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ac0c:	4b03      	ldr	r3, [pc, #12]	; (ac1c <n25q256a_read+0xa0>)
    ac0e:	4798      	blx	r3
	return ERR_NONE;
    ac10:	2300      	movs	r3, #0
}
    ac12:	4618      	mov	r0, r3
    ac14:	3730      	adds	r7, #48	; 0x30
    ac16:	46bd      	mov	sp, r7
    ac18:	bd80      	pop	{r7, pc}
    ac1a:	bf00      	nop
    ac1c:	00001cd9 	.word	0x00001cd9

0000ac20 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ac20:	b580      	push	{r7, lr}
    ac22:	b08c      	sub	sp, #48	; 0x30
    ac24:	af00      	add	r7, sp, #0
    ac26:	60f8      	str	r0, [r7, #12]
    ac28:	60b9      	str	r1, [r7, #8]
    ac2a:	607a      	str	r2, [r7, #4]
    ac2c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ac2e:	68fb      	ldr	r3, [r7, #12]
    ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac32:	68fb      	ldr	r3, [r7, #12]
    ac34:	681b      	ldr	r3, [r3, #0]
    ac36:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ac38:	f107 0310 	add.w	r3, r7, #16
    ac3c:	2200      	movs	r2, #0
    ac3e:	601a      	str	r2, [r3, #0]
    ac40:	605a      	str	r2, [r3, #4]
    ac42:	609a      	str	r2, [r3, #8]
    ac44:	60da      	str	r2, [r3, #12]
    ac46:	611a      	str	r2, [r3, #16]
    ac48:	615a      	str	r2, [r3, #20]
    ac4a:	7c3b      	ldrb	r3, [r7, #16]
    ac4c:	f043 0310 	orr.w	r3, r3, #16
    ac50:	743b      	strb	r3, [r7, #16]
    ac52:	7c3b      	ldrb	r3, [r7, #16]
    ac54:	f043 0320 	orr.w	r3, r3, #32
    ac58:	743b      	strb	r3, [r7, #16]
    ac5a:	7c3b      	ldrb	r3, [r7, #16]
    ac5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac60:	743b      	strb	r3, [r7, #16]
    ac62:	7c7b      	ldrb	r3, [r7, #17]
    ac64:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ac68:	747b      	strb	r3, [r7, #17]
    ac6a:	2302      	movs	r3, #2
    ac6c:	753b      	strb	r3, [r7, #20]
    ac6e:	687b      	ldr	r3, [r7, #4]
    ac70:	61bb      	str	r3, [r7, #24]
    ac72:	683b      	ldr	r3, [r7, #0]
    ac74:	61fb      	str	r3, [r7, #28]
    ac76:	68bb      	ldr	r3, [r7, #8]
    ac78:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac7c:	7b1b      	ldrb	r3, [r3, #12]
    ac7e:	2b00      	cmp	r3, #0
    ac80:	d001      	beq.n	ac86 <n25q256a_write+0x66>
    ac82:	2206      	movs	r2, #6
    ac84:	e000      	b.n	ac88 <n25q256a_write+0x68>
    ac86:	2200      	movs	r2, #0
    ac88:	7c3b      	ldrb	r3, [r7, #16]
    ac8a:	f362 0302 	bfi	r3, r2, #0, #3
    ac8e:	743b      	strb	r3, [r7, #16]
	while (length) {
    ac90:	e035      	b.n	acfe <n25q256a_write+0xde>
		cmd.address = address;
    ac92:	687b      	ldr	r3, [r7, #4]
    ac94:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ac96:	683b      	ldr	r3, [r7, #0]
    ac98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ac9c:	d802      	bhi.n	aca4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ac9e:	683b      	ldr	r3, [r7, #0]
    aca0:	61fb      	str	r3, [r7, #28]
    aca2:	e002      	b.n	acaa <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    aca4:	f44f 7380 	mov.w	r3, #256	; 0x100
    aca8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    acaa:	7c3b      	ldrb	r3, [r7, #16]
    acac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    acb0:	b2db      	uxtb	r3, r3
    acb2:	2201      	movs	r2, #1
    acb4:	4619      	mov	r1, r3
    acb6:	68f8      	ldr	r0, [r7, #12]
    acb8:	4b19      	ldr	r3, [pc, #100]	; (ad20 <n25q256a_write+0x100>)
    acba:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    acbc:	f107 0310 	add.w	r3, r7, #16
    acc0:	4619      	mov	r1, r3
    acc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    acc4:	4b17      	ldr	r3, [pc, #92]	; (ad24 <n25q256a_write+0x104>)
    acc6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    acc8:	bf00      	nop
    acca:	7c3b      	ldrb	r3, [r7, #16]
    accc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    acd0:	b2db      	uxtb	r3, r3
    acd2:	2270      	movs	r2, #112	; 0x70
    acd4:	4619      	mov	r1, r3
    acd6:	68f8      	ldr	r0, [r7, #12]
    acd8:	4b13      	ldr	r3, [pc, #76]	; (ad28 <n25q256a_write+0x108>)
    acda:	4798      	blx	r3
    acdc:	4603      	mov	r3, r0
    acde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ace2:	2b00      	cmp	r3, #0
    ace4:	d0f1      	beq.n	acca <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ace6:	6a3a      	ldr	r2, [r7, #32]
    ace8:	69fb      	ldr	r3, [r7, #28]
    acea:	4413      	add	r3, r2
    acec:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    acee:	69fb      	ldr	r3, [r7, #28]
    acf0:	683a      	ldr	r2, [r7, #0]
    acf2:	1ad3      	subs	r3, r2, r3
    acf4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    acf6:	69fb      	ldr	r3, [r7, #28]
    acf8:	687a      	ldr	r2, [r7, #4]
    acfa:	4413      	add	r3, r2
    acfc:	607b      	str	r3, [r7, #4]
	while (length) {
    acfe:	683b      	ldr	r3, [r7, #0]
    ad00:	2b00      	cmp	r3, #0
    ad02:	d1c6      	bne.n	ac92 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad06:	7b5b      	ldrb	r3, [r3, #13]
    ad08:	2b00      	cmp	r3, #0
    ad0a:	d003      	beq.n	ad14 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ad0c:	2101      	movs	r1, #1
    ad0e:	68f8      	ldr	r0, [r7, #12]
    ad10:	4b06      	ldr	r3, [pc, #24]	; (ad2c <n25q256a_write+0x10c>)
    ad12:	4798      	blx	r3
	}
	return ERR_NONE;
    ad14:	2300      	movs	r3, #0
}
    ad16:	4618      	mov	r0, r3
    ad18:	3730      	adds	r7, #48	; 0x30
    ad1a:	46bd      	mov	sp, r7
    ad1c:	bd80      	pop	{r7, pc}
    ad1e:	bf00      	nop
    ad20:	0000a991 	.word	0x0000a991
    ad24:	00001cd9 	.word	0x00001cd9
    ad28:	0000a855 	.word	0x0000a855
    ad2c:	0000a789 	.word	0x0000a789

0000ad30 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ad30:	b580      	push	{r7, lr}
    ad32:	b090      	sub	sp, #64	; 0x40
    ad34:	af00      	add	r7, sp, #0
    ad36:	60f8      	str	r0, [r7, #12]
    ad38:	60b9      	str	r1, [r7, #8]
    ad3a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ad3c:	68fb      	ldr	r3, [r7, #12]
    ad3e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ad40:	68fb      	ldr	r3, [r7, #12]
    ad42:	681b      	ldr	r3, [r3, #0]
    ad44:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ad46:	f107 0314 	add.w	r3, r7, #20
    ad4a:	2200      	movs	r2, #0
    ad4c:	601a      	str	r2, [r3, #0]
    ad4e:	605a      	str	r2, [r3, #4]
    ad50:	609a      	str	r2, [r3, #8]
    ad52:	60da      	str	r2, [r3, #12]
    ad54:	611a      	str	r2, [r3, #16]
    ad56:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad5a:	7b1b      	ldrb	r3, [r3, #12]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d001      	beq.n	ad64 <n25q256a_erase+0x34>
    ad60:	2206      	movs	r2, #6
    ad62:	e000      	b.n	ad66 <n25q256a_erase+0x36>
    ad64:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    ad66:	7d3b      	ldrb	r3, [r7, #20]
    ad68:	f362 0302 	bfi	r3, r2, #0, #3
    ad6c:	753b      	strb	r3, [r7, #20]
    ad6e:	7d3b      	ldrb	r3, [r7, #20]
    ad70:	f043 0310 	orr.w	r3, r3, #16
    ad74:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    ad76:	687b      	ldr	r3, [r7, #4]
    ad78:	4a56      	ldr	r2, [pc, #344]	; (aed4 <n25q256a_erase+0x1a4>)
    ad7a:	4293      	cmp	r3, r2
    ad7c:	bf94      	ite	ls
    ad7e:	2301      	movls	r3, #1
    ad80:	2300      	movhi	r3, #0
    ad82:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    ad84:	7d3b      	ldrb	r3, [r7, #20]
    ad86:	f362 1345 	bfi	r3, r2, #5, #1
    ad8a:	753b      	strb	r3, [r7, #20]
    ad8c:	7d7b      	ldrb	r3, [r7, #21]
    ad8e:	2202      	movs	r2, #2
    ad90:	f362 1305 	bfi	r3, r2, #4, #2
    ad94:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    ad96:	68bb      	ldr	r3, [r7, #8]
    ad98:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    ad9a:	687b      	ldr	r3, [r7, #4]
    ad9c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    ad9e:	2300      	movs	r3, #0
    ada0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    ada2:	687b      	ldr	r3, [r7, #4]
    ada4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ada8:	2b00      	cmp	r3, #0
    adaa:	d104      	bne.n	adb6 <n25q256a_erase+0x86>
    adac:	68bb      	ldr	r3, [r7, #8]
    adae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    adb2:	2b00      	cmp	r3, #0
    adb4:	d002      	beq.n	adbc <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    adb6:	f06f 030c 	mvn.w	r3, #12
    adba:	e087      	b.n	aecc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    adbc:	687b      	ldr	r3, [r7, #4]
    adbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    adc2:	d368      	bcc.n	ae96 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    adc4:	23c7      	movs	r3, #199	; 0xc7
    adc6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    adc8:	7d3b      	ldrb	r3, [r7, #20]
    adca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    adce:	b2db      	uxtb	r3, r3
    add0:	2201      	movs	r2, #1
    add2:	4619      	mov	r1, r3
    add4:	68f8      	ldr	r0, [r7, #12]
    add6:	4b40      	ldr	r3, [pc, #256]	; (aed8 <n25q256a_erase+0x1a8>)
    add8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    adda:	f107 0314 	add.w	r3, r7, #20
    adde:	4619      	mov	r1, r3
    ade0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ade2:	4b3e      	ldr	r3, [pc, #248]	; (aedc <n25q256a_erase+0x1ac>)
    ade4:	4798      	blx	r3
    ade6:	e059      	b.n	ae9c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ade8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    adea:	b29b      	uxth	r3, r3
    adec:	2b00      	cmp	r3, #0
    adee:	d11f      	bne.n	ae30 <n25q256a_erase+0x100>
    adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    adf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    adf6:	d31b      	bcc.n	ae30 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    adf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    adfa:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    adfc:	23d8      	movs	r3, #216	; 0xd8
    adfe:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae00:	7d3b      	ldrb	r3, [r7, #20]
    ae02:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae06:	b2db      	uxtb	r3, r3
    ae08:	2201      	movs	r2, #1
    ae0a:	4619      	mov	r1, r3
    ae0c:	68f8      	ldr	r0, [r7, #12]
    ae0e:	4b32      	ldr	r3, [pc, #200]	; (aed8 <n25q256a_erase+0x1a8>)
    ae10:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae12:	f107 0314 	add.w	r3, r7, #20
    ae16:	4619      	mov	r1, r3
    ae18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae1a:	4b30      	ldr	r3, [pc, #192]	; (aedc <n25q256a_erase+0x1ac>)
    ae1c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ae1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae20:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ae24:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae28:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ae2c:	63bb      	str	r3, [r7, #56]	; 0x38
    ae2e:	e023      	b.n	ae78 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ae36:	d31b      	bcc.n	ae70 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ae38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae3a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ae3c:	2320      	movs	r3, #32
    ae3e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae40:	7d3b      	ldrb	r3, [r7, #20]
    ae42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae46:	b2db      	uxtb	r3, r3
    ae48:	2201      	movs	r2, #1
    ae4a:	4619      	mov	r1, r3
    ae4c:	68f8      	ldr	r0, [r7, #12]
    ae4e:	4b22      	ldr	r3, [pc, #136]	; (aed8 <n25q256a_erase+0x1a8>)
    ae50:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae52:	f107 0314 	add.w	r3, r7, #20
    ae56:	4619      	mov	r1, r3
    ae58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae5a:	4b20      	ldr	r3, [pc, #128]	; (aedc <n25q256a_erase+0x1ac>)
    ae5c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    ae5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae68:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    ae6c:	63bb      	str	r3, [r7, #56]	; 0x38
    ae6e:	e003      	b.n	ae78 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    ae70:	f06f 030c 	mvn.w	r3, #12
    ae74:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    ae76:	e011      	b.n	ae9c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ae78:	bf00      	nop
    ae7a:	7d3b      	ldrb	r3, [r7, #20]
    ae7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae80:	b2db      	uxtb	r3, r3
    ae82:	2270      	movs	r2, #112	; 0x70
    ae84:	4619      	mov	r1, r3
    ae86:	68f8      	ldr	r0, [r7, #12]
    ae88:	4b15      	ldr	r3, [pc, #84]	; (aee0 <n25q256a_erase+0x1b0>)
    ae8a:	4798      	blx	r3
    ae8c:	4603      	mov	r3, r0
    ae8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae92:	2b00      	cmp	r3, #0
    ae94:	d0f1      	beq.n	ae7a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ae96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae98:	2b00      	cmp	r3, #0
    ae9a:	d1a5      	bne.n	ade8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ae9c:	bf00      	nop
    ae9e:	7d3b      	ldrb	r3, [r7, #20]
    aea0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aea4:	b2db      	uxtb	r3, r3
    aea6:	2270      	movs	r2, #112	; 0x70
    aea8:	4619      	mov	r1, r3
    aeaa:	68f8      	ldr	r0, [r7, #12]
    aeac:	4b0c      	ldr	r3, [pc, #48]	; (aee0 <n25q256a_erase+0x1b0>)
    aeae:	4798      	blx	r3
    aeb0:	4603      	mov	r3, r0
    aeb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aeb6:	2b00      	cmp	r3, #0
    aeb8:	d0f1      	beq.n	ae9e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aebc:	7b5b      	ldrb	r3, [r3, #13]
    aebe:	2b00      	cmp	r3, #0
    aec0:	d003      	beq.n	aeca <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    aec2:	2101      	movs	r1, #1
    aec4:	68f8      	ldr	r0, [r7, #12]
    aec6:	4b07      	ldr	r3, [pc, #28]	; (aee4 <n25q256a_erase+0x1b4>)
    aec8:	4798      	blx	r3
	}
	return rc;
    aeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    aecc:	4618      	mov	r0, r3
    aece:	3740      	adds	r7, #64	; 0x40
    aed0:	46bd      	mov	sp, r7
    aed2:	bd80      	pop	{r7, pc}
    aed4:	001fffff 	.word	0x001fffff
    aed8:	0000a991 	.word	0x0000a991
    aedc:	00001cd9 	.word	0x00001cd9
    aee0:	0000a855 	.word	0x0000a855
    aee4:	0000a789 	.word	0x0000a789

0000aee8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    aee8:	b590      	push	{r4, r7, lr}
    aeea:	b085      	sub	sp, #20
    aeec:	af00      	add	r7, sp, #0
    aeee:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aef4:	68fb      	ldr	r3, [r7, #12]
    aef6:	7b1b      	ldrb	r3, [r3, #12]
    aef8:	2b00      	cmp	r3, #0
    aefa:	d001      	beq.n	af00 <n25q256a_enable_xip+0x18>
    aefc:	2306      	movs	r3, #6
    aefe:	e000      	b.n	af02 <n25q256a_enable_xip+0x1a>
    af00:	2300      	movs	r3, #0
    af02:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    af04:	68fb      	ldr	r3, [r7, #12]
    af06:	7b5b      	ldrb	r3, [r3, #13]
    af08:	2b00      	cmp	r3, #0
    af0a:	d129      	bne.n	af60 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    af0c:	7afb      	ldrb	r3, [r7, #11]
    af0e:	2285      	movs	r2, #133	; 0x85
    af10:	4619      	mov	r1, r3
    af12:	6878      	ldr	r0, [r7, #4]
    af14:	4b15      	ldr	r3, [pc, #84]	; (af6c <n25q256a_enable_xip+0x84>)
    af16:	4798      	blx	r3
    af18:	4603      	mov	r3, r0
    af1a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    af1c:	7abb      	ldrb	r3, [r7, #10]
    af1e:	f003 0308 	and.w	r3, r3, #8
    af22:	2b00      	cmp	r3, #0
    af24:	d015      	beq.n	af52 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    af26:	7abb      	ldrb	r3, [r7, #10]
    af28:	f023 0308 	bic.w	r3, r3, #8
    af2c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    af2e:	7abb      	ldrb	r3, [r7, #10]
    af30:	7af9      	ldrb	r1, [r7, #11]
    af32:	2281      	movs	r2, #129	; 0x81
    af34:	6878      	ldr	r0, [r7, #4]
    af36:	4c0e      	ldr	r4, [pc, #56]	; (af70 <n25q256a_enable_xip+0x88>)
    af38:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af3a:	bf00      	nop
    af3c:	7afb      	ldrb	r3, [r7, #11]
    af3e:	2270      	movs	r2, #112	; 0x70
    af40:	4619      	mov	r1, r3
    af42:	6878      	ldr	r0, [r7, #4]
    af44:	4b09      	ldr	r3, [pc, #36]	; (af6c <n25q256a_enable_xip+0x84>)
    af46:	4798      	blx	r3
    af48:	4603      	mov	r3, r0
    af4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af4e:	2b00      	cmp	r3, #0
    af50:	d0f4      	beq.n	af3c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    af52:	68fb      	ldr	r3, [r7, #12]
    af54:	2201      	movs	r2, #1
    af56:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    af58:	2101      	movs	r1, #1
    af5a:	6878      	ldr	r0, [r7, #4]
    af5c:	4b05      	ldr	r3, [pc, #20]	; (af74 <n25q256a_enable_xip+0x8c>)
    af5e:	4798      	blx	r3
	}
	return ERR_NONE;
    af60:	2300      	movs	r3, #0
}
    af62:	4618      	mov	r0, r3
    af64:	3714      	adds	r7, #20
    af66:	46bd      	mov	sp, r7
    af68:	bd90      	pop	{r4, r7, pc}
    af6a:	bf00      	nop
    af6c:	0000a855 	.word	0x0000a855
    af70:	0000a8f1 	.word	0x0000a8f1
    af74:	0000a789 	.word	0x0000a789

0000af78 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    af78:	b580      	push	{r7, lr}
    af7a:	b086      	sub	sp, #24
    af7c:	af00      	add	r7, sp, #0
    af7e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    af80:	687b      	ldr	r3, [r7, #4]
    af82:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    af84:	687b      	ldr	r3, [r7, #4]
    af86:	681b      	ldr	r3, [r3, #0]
    af88:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af8a:	697b      	ldr	r3, [r7, #20]
    af8c:	7b1b      	ldrb	r3, [r3, #12]
    af8e:	2b00      	cmp	r3, #0
    af90:	d001      	beq.n	af96 <n25q256a_disable_xip+0x1e>
    af92:	2306      	movs	r3, #6
    af94:	e000      	b.n	af98 <n25q256a_disable_xip+0x20>
    af96:	2300      	movs	r3, #0
    af98:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    af9a:	2100      	movs	r1, #0
    af9c:	6878      	ldr	r0, [r7, #4]
    af9e:	4b15      	ldr	r3, [pc, #84]	; (aff4 <n25q256a_disable_xip+0x7c>)
    afa0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    afa2:	7bfb      	ldrb	r3, [r7, #15]
    afa4:	2285      	movs	r2, #133	; 0x85
    afa6:	4619      	mov	r1, r3
    afa8:	6878      	ldr	r0, [r7, #4]
    afaa:	4b13      	ldr	r3, [pc, #76]	; (aff8 <n25q256a_disable_xip+0x80>)
    afac:	4798      	blx	r3
    afae:	4603      	mov	r3, r0
    afb0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    afb2:	7bbb      	ldrb	r3, [r7, #14]
    afb4:	f003 0308 	and.w	r3, r3, #8
    afb8:	2b00      	cmp	r3, #0
    afba:	d113      	bne.n	afe4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    afbc:	697b      	ldr	r3, [r7, #20]
    afbe:	689b      	ldr	r3, [r3, #8]
    afc0:	2b00      	cmp	r3, #0
    afc2:	d00f      	beq.n	afe4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    afc4:	693b      	ldr	r3, [r7, #16]
    afc6:	681b      	ldr	r3, [r3, #0]
    afc8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    afca:	6938      	ldr	r0, [r7, #16]
    afcc:	4b0b      	ldr	r3, [pc, #44]	; (affc <n25q256a_disable_xip+0x84>)
    afce:	4798      	blx	r3
			n25q->pin_exit_xip();
    afd0:	697b      	ldr	r3, [r7, #20]
    afd2:	689b      	ldr	r3, [r3, #8]
    afd4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    afd6:	68b9      	ldr	r1, [r7, #8]
    afd8:	6938      	ldr	r0, [r7, #16]
    afda:	4b09      	ldr	r3, [pc, #36]	; (b000 <n25q256a_disable_xip+0x88>)
    afdc:	4798      	blx	r3
			qspi_sync_enable(descr);
    afde:	6938      	ldr	r0, [r7, #16]
    afe0:	4b08      	ldr	r3, [pc, #32]	; (b004 <n25q256a_disable_xip+0x8c>)
    afe2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    afe4:	697b      	ldr	r3, [r7, #20]
    afe6:	2200      	movs	r2, #0
    afe8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    afea:	2300      	movs	r3, #0
}
    afec:	4618      	mov	r0, r3
    afee:	3718      	adds	r7, #24
    aff0:	46bd      	mov	sp, r7
    aff2:	bd80      	pop	{r7, pc}
    aff4:	0000a789 	.word	0x0000a789
    aff8:	0000a855 	.word	0x0000a855
    affc:	00001c9d 	.word	0x00001c9d
    b000:	00001c15 	.word	0x00001c15
    b004:	00001c61 	.word	0x00001c61

0000b008 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b008:	b480      	push	{r7}
    b00a:	b085      	sub	sp, #20
    b00c:	af00      	add	r7, sp, #0
    b00e:	60f8      	str	r0, [r7, #12]
    b010:	60b9      	str	r1, [r7, #8]
    b012:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b014:	68fb      	ldr	r3, [r7, #12]
    b016:	68ba      	ldr	r2, [r7, #8]
    b018:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b01a:	68fb      	ldr	r3, [r7, #12]
    b01c:	687a      	ldr	r2, [r7, #4]
    b01e:	605a      	str	r2, [r3, #4]

	return me;
    b020:	68fb      	ldr	r3, [r7, #12]
}
    b022:	4618      	mov	r0, r3
    b024:	3714      	adds	r7, #20
    b026:	46bd      	mov	sp, r7
    b028:	f85d 7b04 	ldr.w	r7, [sp], #4
    b02c:	4770      	bx	lr

0000b02e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b02e:	b480      	push	{r7}
    b030:	b083      	sub	sp, #12
    b032:	af00      	add	r7, sp, #0
    b034:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b036:	687b      	ldr	r3, [r7, #4]
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	b29a      	uxth	r2, r3
    b03c:	687b      	ldr	r3, [r7, #4]
    b03e:	3301      	adds	r3, #1
    b040:	781b      	ldrb	r3, [r3, #0]
    b042:	b29b      	uxth	r3, r3
    b044:	021b      	lsls	r3, r3, #8
    b046:	b29b      	uxth	r3, r3
    b048:	4413      	add	r3, r2
    b04a:	b29b      	uxth	r3, r3
}
    b04c:	4618      	mov	r0, r3
    b04e:	370c      	adds	r7, #12
    b050:	46bd      	mov	sp, r7
    b052:	f85d 7b04 	ldr.w	r7, [sp], #4
    b056:	4770      	bx	lr

0000b058 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b058:	b480      	push	{r7}
    b05a:	b083      	sub	sp, #12
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
	return desc[0];
    b060:	687b      	ldr	r3, [r7, #4]
    b062:	781b      	ldrb	r3, [r3, #0]
}
    b064:	4618      	mov	r0, r3
    b066:	370c      	adds	r7, #12
    b068:	46bd      	mov	sp, r7
    b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b06e:	4770      	bx	lr

0000b070 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b070:	b580      	push	{r7, lr}
    b072:	b082      	sub	sp, #8
    b074:	af00      	add	r7, sp, #0
    b076:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b078:	6878      	ldr	r0, [r7, #4]
    b07a:	4b05      	ldr	r3, [pc, #20]	; (b090 <usb_desc_next+0x20>)
    b07c:	4798      	blx	r3
    b07e:	4603      	mov	r3, r0
    b080:	461a      	mov	r2, r3
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	4413      	add	r3, r2
}
    b086:	4618      	mov	r0, r3
    b088:	3708      	adds	r7, #8
    b08a:	46bd      	mov	sp, r7
    b08c:	bd80      	pop	{r7, pc}
    b08e:	bf00      	nop
    b090:	0000b059 	.word	0x0000b059

0000b094 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b094:	b580      	push	{r7, lr}
    b096:	b08c      	sub	sp, #48	; 0x30
    b098:	af00      	add	r7, sp, #0
    b09a:	6078      	str	r0, [r7, #4]
    b09c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b09e:	687b      	ldr	r3, [r7, #4]
    b0a0:	689b      	ldr	r3, [r3, #8]
    b0a2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b0a4:	683b      	ldr	r3, [r7, #0]
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b0aa:	2300      	movs	r3, #0
    b0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b0b0:	e08f      	b.n	b1d2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d102      	bne.n	b0be <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b0b8:	f06f 0309 	mvn.w	r3, #9
    b0bc:	e092      	b.n	b1e4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0c0:	789b      	ldrb	r3, [r3, #2]
    b0c2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0c6:	795b      	ldrb	r3, [r3, #5]
    b0c8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b0ca:	7c7b      	ldrb	r3, [r7, #17]
    b0cc:	2b02      	cmp	r3, #2
    b0ce:	d002      	beq.n	b0d6 <cdcdf_acm_enable+0x42>
    b0d0:	7c7b      	ldrb	r3, [r7, #17]
    b0d2:	2b0a      	cmp	r3, #10
    b0d4:	d121      	bne.n	b11a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b0da:	6a3a      	ldr	r2, [r7, #32]
    b0dc:	5cd2      	ldrb	r2, [r2, r3]
    b0de:	7bbb      	ldrb	r3, [r7, #14]
    b0e0:	429a      	cmp	r2, r3
    b0e2:	d102      	bne.n	b0ea <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b0e4:	f06f 0311 	mvn.w	r3, #17
    b0e8:	e07c      	b.n	b1e4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b0ee:	6a3a      	ldr	r2, [r7, #32]
    b0f0:	5cd3      	ldrb	r3, [r2, r3]
    b0f2:	2bff      	cmp	r3, #255	; 0xff
    b0f4:	d002      	beq.n	b0fc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b0f6:	f06f 031b 	mvn.w	r3, #27
    b0fa:	e073      	b.n	b1e4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b100:	7bb9      	ldrb	r1, [r7, #14]
    b102:	6a3a      	ldr	r2, [r7, #32]
    b104:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b106:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b108:	683b      	ldr	r3, [r7, #0]
    b10a:	685b      	ldr	r3, [r3, #4]
    b10c:	2205      	movs	r2, #5
    b10e:	4619      	mov	r1, r3
    b110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b112:	4b36      	ldr	r3, [pc, #216]	; (b1ec <cdcdf_acm_enable+0x158>)
    b114:	4798      	blx	r3
    b116:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b118:	e047      	b.n	b1aa <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b11a:	f06f 0309 	mvn.w	r3, #9
    b11e:	e061      	b.n	b1e4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b122:	789b      	ldrb	r3, [r3, #2]
    b124:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b128:	78db      	ldrb	r3, [r3, #3]
    b12a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b12e:	3304      	adds	r3, #4
    b130:	4618      	mov	r0, r3
    b132:	4b2f      	ldr	r3, [pc, #188]	; (b1f0 <cdcdf_acm_enable+0x15c>)
    b134:	4798      	blx	r3
    b136:	4603      	mov	r3, r0
    b138:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b13a:	7ebb      	ldrb	r3, [r7, #26]
    b13c:	7ef9      	ldrb	r1, [r7, #27]
    b13e:	8bba      	ldrh	r2, [r7, #28]
    b140:	4618      	mov	r0, r3
    b142:	4b2c      	ldr	r3, [pc, #176]	; (b1f4 <cdcdf_acm_enable+0x160>)
    b144:	4798      	blx	r3
    b146:	4603      	mov	r3, r0
    b148:	2b00      	cmp	r3, #0
    b14a:	d002      	beq.n	b152 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b14c:	f06f 0313 	mvn.w	r3, #19
    b150:	e048      	b.n	b1e4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b152:	7ebb      	ldrb	r3, [r7, #26]
    b154:	b25b      	sxtb	r3, r3
    b156:	2b00      	cmp	r3, #0
    b158:	da0f      	bge.n	b17a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b15a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b15e:	7eb9      	ldrb	r1, [r7, #26]
    b160:	6a3a      	ldr	r2, [r7, #32]
    b162:	4413      	add	r3, r2
    b164:	460a      	mov	r2, r1
    b166:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b16c:	6a3a      	ldr	r2, [r7, #32]
    b16e:	4413      	add	r3, r2
    b170:	789b      	ldrb	r3, [r3, #2]
    b172:	4618      	mov	r0, r3
    b174:	4b20      	ldr	r3, [pc, #128]	; (b1f8 <cdcdf_acm_enable+0x164>)
    b176:	4798      	blx	r3
    b178:	e007      	b.n	b18a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b17a:	7eba      	ldrb	r2, [r7, #26]
    b17c:	6a3b      	ldr	r3, [r7, #32]
    b17e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b180:	6a3b      	ldr	r3, [r7, #32]
    b182:	791b      	ldrb	r3, [r3, #4]
    b184:	4618      	mov	r0, r3
    b186:	4b1c      	ldr	r3, [pc, #112]	; (b1f8 <cdcdf_acm_enable+0x164>)
    b188:	4798      	blx	r3
			}
			desc->sod = ep;
    b18a:	683b      	ldr	r3, [r7, #0]
    b18c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b18e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b190:	683b      	ldr	r3, [r7, #0]
    b192:	681b      	ldr	r3, [r3, #0]
    b194:	4618      	mov	r0, r3
    b196:	4b19      	ldr	r3, [pc, #100]	; (b1fc <cdcdf_acm_enable+0x168>)
    b198:	4798      	blx	r3
    b19a:	4602      	mov	r2, r0
    b19c:	683b      	ldr	r3, [r7, #0]
    b19e:	685b      	ldr	r3, [r3, #4]
    b1a0:	4619      	mov	r1, r3
    b1a2:	4610      	mov	r0, r2
    b1a4:	4b16      	ldr	r3, [pc, #88]	; (b200 <cdcdf_acm_enable+0x16c>)
    b1a6:	4798      	blx	r3
    b1a8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d1b7      	bne.n	b120 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b1b0:	683b      	ldr	r3, [r7, #0]
    b1b2:	681b      	ldr	r3, [r3, #0]
    b1b4:	4618      	mov	r0, r3
    b1b6:	4b11      	ldr	r3, [pc, #68]	; (b1fc <cdcdf_acm_enable+0x168>)
    b1b8:	4798      	blx	r3
    b1ba:	683b      	ldr	r3, [r7, #0]
    b1bc:	685b      	ldr	r3, [r3, #4]
    b1be:	2204      	movs	r2, #4
    b1c0:	4619      	mov	r1, r3
    b1c2:	4b0a      	ldr	r3, [pc, #40]	; (b1ec <cdcdf_acm_enable+0x158>)
    b1c4:	4798      	blx	r3
    b1c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1cc:	3301      	adds	r3, #1
    b1ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1d6:	2b01      	cmp	r3, #1
    b1d8:	f67f af6b 	bls.w	b0b2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b1dc:	4b09      	ldr	r3, [pc, #36]	; (b204 <cdcdf_acm_enable+0x170>)
    b1de:	2201      	movs	r2, #1
    b1e0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b1e2:	2300      	movs	r3, #0
}
    b1e4:	4618      	mov	r0, r3
    b1e6:	3730      	adds	r7, #48	; 0x30
    b1e8:	46bd      	mov	sp, r7
    b1ea:	bd80      	pop	{r7, pc}
    b1ec:	0000c455 	.word	0x0000c455
    b1f0:	0000b02f 	.word	0x0000b02f
    b1f4:	00002c0d 	.word	0x00002c0d
    b1f8:	00002cf9 	.word	0x00002cf9
    b1fc:	0000b071 	.word	0x0000b071
    b200:	0000c4b1 	.word	0x0000c4b1
    b204:	20000b3c 	.word	0x20000b3c

0000b208 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b208:	b580      	push	{r7, lr}
    b20a:	b088      	sub	sp, #32
    b20c:	af00      	add	r7, sp, #0
    b20e:	6078      	str	r0, [r7, #4]
    b210:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b212:	687b      	ldr	r3, [r7, #4]
    b214:	689b      	ldr	r3, [r3, #8]
    b216:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b218:	683b      	ldr	r3, [r7, #0]
    b21a:	2b00      	cmp	r3, #0
    b21c:	d00c      	beq.n	b238 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b21e:	683b      	ldr	r3, [r7, #0]
    b220:	681b      	ldr	r3, [r3, #0]
    b222:	795b      	ldrb	r3, [r3, #5]
    b224:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b226:	7c7b      	ldrb	r3, [r7, #17]
    b228:	2b02      	cmp	r3, #2
    b22a:	d005      	beq.n	b238 <cdcdf_acm_disable+0x30>
    b22c:	7c7b      	ldrb	r3, [r7, #17]
    b22e:	2b0a      	cmp	r3, #10
    b230:	d002      	beq.n	b238 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b232:	f06f 0309 	mvn.w	r3, #9
    b236:	e035      	b.n	b2a4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b238:	2300      	movs	r3, #0
    b23a:	77fb      	strb	r3, [r7, #31]
    b23c:	e01f      	b.n	b27e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b23e:	7ffb      	ldrb	r3, [r7, #31]
    b240:	69ba      	ldr	r2, [r7, #24]
    b242:	5cd3      	ldrb	r3, [r2, r3]
    b244:	2bff      	cmp	r3, #255	; 0xff
    b246:	d016      	beq.n	b276 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b248:	7ffb      	ldrb	r3, [r7, #31]
    b24a:	69ba      	ldr	r2, [r7, #24]
    b24c:	21ff      	movs	r1, #255	; 0xff
    b24e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b250:	7ffb      	ldrb	r3, [r7, #31]
    b252:	69ba      	ldr	r2, [r7, #24]
    b254:	4413      	add	r3, r2
    b256:	789b      	ldrb	r3, [r3, #2]
    b258:	2bff      	cmp	r3, #255	; 0xff
    b25a:	d00d      	beq.n	b278 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b25c:	7ffb      	ldrb	r3, [r7, #31]
    b25e:	69ba      	ldr	r2, [r7, #24]
    b260:	4413      	add	r3, r2
    b262:	789b      	ldrb	r3, [r3, #2]
    b264:	4618      	mov	r0, r3
    b266:	4b11      	ldr	r3, [pc, #68]	; (b2ac <cdcdf_acm_disable+0xa4>)
    b268:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b26a:	7ffb      	ldrb	r3, [r7, #31]
    b26c:	69ba      	ldr	r2, [r7, #24]
    b26e:	4413      	add	r3, r2
    b270:	22ff      	movs	r2, #255	; 0xff
    b272:	709a      	strb	r2, [r3, #2]
    b274:	e000      	b.n	b278 <cdcdf_acm_disable+0x70>
			continue;
    b276:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b278:	7ffb      	ldrb	r3, [r7, #31]
    b27a:	3301      	adds	r3, #1
    b27c:	77fb      	strb	r3, [r7, #31]
    b27e:	7ffb      	ldrb	r3, [r7, #31]
    b280:	2b01      	cmp	r3, #1
    b282:	d9dc      	bls.n	b23e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b284:	69bb      	ldr	r3, [r7, #24]
    b286:	791b      	ldrb	r3, [r3, #4]
    b288:	2bff      	cmp	r3, #255	; 0xff
    b28a:	d007      	beq.n	b29c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b28c:	69bb      	ldr	r3, [r7, #24]
    b28e:	791b      	ldrb	r3, [r3, #4]
    b290:	4618      	mov	r0, r3
    b292:	4b06      	ldr	r3, [pc, #24]	; (b2ac <cdcdf_acm_disable+0xa4>)
    b294:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b296:	69bb      	ldr	r3, [r7, #24]
    b298:	22ff      	movs	r2, #255	; 0xff
    b29a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b29c:	4b04      	ldr	r3, [pc, #16]	; (b2b0 <cdcdf_acm_disable+0xa8>)
    b29e:	2200      	movs	r2, #0
    b2a0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b2a2:	2300      	movs	r3, #0
}
    b2a4:	4618      	mov	r0, r3
    b2a6:	3720      	adds	r7, #32
    b2a8:	46bd      	mov	sp, r7
    b2aa:	bd80      	pop	{r7, pc}
    b2ac:	00002ca9 	.word	0x00002ca9
    b2b0:	20000b3c 	.word	0x20000b3c

0000b2b4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b2b4:	b580      	push	{r7, lr}
    b2b6:	b084      	sub	sp, #16
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	60f8      	str	r0, [r7, #12]
    b2bc:	460b      	mov	r3, r1
    b2be:	607a      	str	r2, [r7, #4]
    b2c0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b2c2:	7afb      	ldrb	r3, [r7, #11]
    b2c4:	2b01      	cmp	r3, #1
    b2c6:	d009      	beq.n	b2dc <cdcdf_acm_ctrl+0x28>
    b2c8:	2b02      	cmp	r3, #2
    b2ca:	d00d      	beq.n	b2e8 <cdcdf_acm_ctrl+0x34>
    b2cc:	2b00      	cmp	r3, #0
    b2ce:	d10e      	bne.n	b2ee <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b2d0:	6879      	ldr	r1, [r7, #4]
    b2d2:	68f8      	ldr	r0, [r7, #12]
    b2d4:	4b09      	ldr	r3, [pc, #36]	; (b2fc <cdcdf_acm_ctrl+0x48>)
    b2d6:	4798      	blx	r3
    b2d8:	4603      	mov	r3, r0
    b2da:	e00a      	b.n	b2f2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b2dc:	6879      	ldr	r1, [r7, #4]
    b2de:	68f8      	ldr	r0, [r7, #12]
    b2e0:	4b07      	ldr	r3, [pc, #28]	; (b300 <cdcdf_acm_ctrl+0x4c>)
    b2e2:	4798      	blx	r3
    b2e4:	4603      	mov	r3, r0
    b2e6:	e004      	b.n	b2f2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b2e8:	f06f 031a 	mvn.w	r3, #26
    b2ec:	e001      	b.n	b2f2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b2ee:	f06f 030c 	mvn.w	r3, #12
	}
}
    b2f2:	4618      	mov	r0, r3
    b2f4:	3710      	adds	r7, #16
    b2f6:	46bd      	mov	sp, r7
    b2f8:	bd80      	pop	{r7, pc}
    b2fa:	bf00      	nop
    b2fc:	0000b095 	.word	0x0000b095
    b300:	0000b209 	.word	0x0000b209

0000b304 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b304:	b590      	push	{r4, r7, lr}
    b306:	b087      	sub	sp, #28
    b308:	af00      	add	r7, sp, #0
    b30a:	4603      	mov	r3, r0
    b30c:	6039      	str	r1, [r7, #0]
    b30e:	71fb      	strb	r3, [r7, #7]
    b310:	4613      	mov	r3, r2
    b312:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b314:	683b      	ldr	r3, [r7, #0]
    b316:	799a      	ldrb	r2, [r3, #6]
    b318:	79db      	ldrb	r3, [r3, #7]
    b31a:	021b      	lsls	r3, r3, #8
    b31c:	4313      	orrs	r3, r2
    b31e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b320:	4b2b      	ldr	r3, [pc, #172]	; (b3d0 <cdcdf_acm_set_req+0xcc>)
    b322:	4798      	blx	r3
    b324:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b326:	683b      	ldr	r3, [r7, #0]
    b328:	785b      	ldrb	r3, [r3, #1]
    b32a:	2b20      	cmp	r3, #32
    b32c:	d002      	beq.n	b334 <cdcdf_acm_set_req+0x30>
    b32e:	2b22      	cmp	r3, #34	; 0x22
    b330:	d034      	beq.n	b39c <cdcdf_acm_set_req+0x98>
    b332:	e046      	b.n	b3c2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b334:	8afb      	ldrh	r3, [r7, #22]
    b336:	2b07      	cmp	r3, #7
    b338:	d002      	beq.n	b340 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b33a:	f04f 33ff 	mov.w	r3, #4294967295
    b33e:	e042      	b.n	b3c6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b340:	79bb      	ldrb	r3, [r7, #6]
    b342:	2b00      	cmp	r3, #0
    b344:	d107      	bne.n	b356 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b346:	8afa      	ldrh	r2, [r7, #22]
    b348:	79f8      	ldrb	r0, [r7, #7]
    b34a:	2300      	movs	r3, #0
    b34c:	6939      	ldr	r1, [r7, #16]
    b34e:	4c21      	ldr	r4, [pc, #132]	; (b3d4 <cdcdf_acm_set_req+0xd0>)
    b350:	47a0      	blx	r4
    b352:	4603      	mov	r3, r0
    b354:	e037      	b.n	b3c6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b356:	693a      	ldr	r2, [r7, #16]
    b358:	f107 0308 	add.w	r3, r7, #8
    b35c:	6810      	ldr	r0, [r2, #0]
    b35e:	6018      	str	r0, [r3, #0]
    b360:	8891      	ldrh	r1, [r2, #4]
    b362:	7992      	ldrb	r2, [r2, #6]
    b364:	8099      	strh	r1, [r3, #4]
    b366:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b368:	4b1b      	ldr	r3, [pc, #108]	; (b3d8 <cdcdf_acm_set_req+0xd4>)
    b36a:	681b      	ldr	r3, [r3, #0]
    b36c:	2b00      	cmp	r3, #0
    b36e:	d008      	beq.n	b382 <cdcdf_acm_set_req+0x7e>
    b370:	4b19      	ldr	r3, [pc, #100]	; (b3d8 <cdcdf_acm_set_req+0xd4>)
    b372:	681b      	ldr	r3, [r3, #0]
    b374:	f107 0208 	add.w	r2, r7, #8
    b378:	4610      	mov	r0, r2
    b37a:	4798      	blx	r3
    b37c:	4603      	mov	r3, r0
    b37e:	2b00      	cmp	r3, #0
    b380:	d00a      	beq.n	b398 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b382:	4b16      	ldr	r3, [pc, #88]	; (b3dc <cdcdf_acm_set_req+0xd8>)
    b384:	f107 0208 	add.w	r2, r7, #8
    b388:	e892 0003 	ldmia.w	r2, {r0, r1}
    b38c:	6018      	str	r0, [r3, #0]
    b38e:	3304      	adds	r3, #4
    b390:	8019      	strh	r1, [r3, #0]
    b392:	3302      	adds	r3, #2
    b394:	0c0a      	lsrs	r2, r1, #16
    b396:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b398:	2300      	movs	r3, #0
    b39a:	e014      	b.n	b3c6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b39c:	2300      	movs	r3, #0
    b39e:	2200      	movs	r2, #0
    b3a0:	2100      	movs	r1, #0
    b3a2:	2000      	movs	r0, #0
    b3a4:	4c0b      	ldr	r4, [pc, #44]	; (b3d4 <cdcdf_acm_set_req+0xd0>)
    b3a6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b3a8:	4b0d      	ldr	r3, [pc, #52]	; (b3e0 <cdcdf_acm_set_req+0xdc>)
    b3aa:	681b      	ldr	r3, [r3, #0]
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	d006      	beq.n	b3be <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b3b0:	4b0b      	ldr	r3, [pc, #44]	; (b3e0 <cdcdf_acm_set_req+0xdc>)
    b3b2:	681b      	ldr	r3, [r3, #0]
    b3b4:	683a      	ldr	r2, [r7, #0]
    b3b6:	8852      	ldrh	r2, [r2, #2]
    b3b8:	b292      	uxth	r2, r2
    b3ba:	4610      	mov	r0, r2
    b3bc:	4798      	blx	r3
		}
		return ERR_NONE;
    b3be:	2300      	movs	r3, #0
    b3c0:	e001      	b.n	b3c6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b3c2:	f06f 030c 	mvn.w	r3, #12
	}
}
    b3c6:	4618      	mov	r0, r3
    b3c8:	371c      	adds	r7, #28
    b3ca:	46bd      	mov	sp, r7
    b3cc:	bd90      	pop	{r4, r7, pc}
    b3ce:	bf00      	nop
    b3d0:	0000c351 	.word	0x0000c351
    b3d4:	0000c1c5 	.word	0x0000c1c5
    b3d8:	20000b50 	.word	0x20000b50
    b3dc:	20000b44 	.word	0x20000b44
    b3e0:	20000b4c 	.word	0x20000b4c

0000b3e4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b3e4:	b590      	push	{r4, r7, lr}
    b3e6:	b085      	sub	sp, #20
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	4603      	mov	r3, r0
    b3ec:	6039      	str	r1, [r7, #0]
    b3ee:	71fb      	strb	r3, [r7, #7]
    b3f0:	4613      	mov	r3, r2
    b3f2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b3f4:	683b      	ldr	r3, [r7, #0]
    b3f6:	799a      	ldrb	r2, [r3, #6]
    b3f8:	79db      	ldrb	r3, [r3, #7]
    b3fa:	021b      	lsls	r3, r3, #8
    b3fc:	4313      	orrs	r3, r2
    b3fe:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b400:	79bb      	ldrb	r3, [r7, #6]
    b402:	2b01      	cmp	r3, #1
    b404:	d101      	bne.n	b40a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b406:	2300      	movs	r3, #0
    b408:	e013      	b.n	b432 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b40a:	683b      	ldr	r3, [r7, #0]
    b40c:	785b      	ldrb	r3, [r3, #1]
    b40e:	2b21      	cmp	r3, #33	; 0x21
    b410:	d10d      	bne.n	b42e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b412:	89fb      	ldrh	r3, [r7, #14]
    b414:	2b07      	cmp	r3, #7
    b416:	d002      	beq.n	b41e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b418:	f04f 33ff 	mov.w	r3, #4294967295
    b41c:	e009      	b.n	b432 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b41e:	89fa      	ldrh	r2, [r7, #14]
    b420:	79f8      	ldrb	r0, [r7, #7]
    b422:	2300      	movs	r3, #0
    b424:	4905      	ldr	r1, [pc, #20]	; (b43c <cdcdf_acm_get_req+0x58>)
    b426:	4c06      	ldr	r4, [pc, #24]	; (b440 <cdcdf_acm_get_req+0x5c>)
    b428:	47a0      	blx	r4
    b42a:	4603      	mov	r3, r0
    b42c:	e001      	b.n	b432 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b42e:	f06f 030c 	mvn.w	r3, #12
	}
}
    b432:	4618      	mov	r0, r3
    b434:	3714      	adds	r7, #20
    b436:	46bd      	mov	sp, r7
    b438:	bd90      	pop	{r4, r7, pc}
    b43a:	bf00      	nop
    b43c:	20000b44 	.word	0x20000b44
    b440:	0000c1c5 	.word	0x0000c1c5

0000b444 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b444:	b580      	push	{r7, lr}
    b446:	b082      	sub	sp, #8
    b448:	af00      	add	r7, sp, #0
    b44a:	4603      	mov	r3, r0
    b44c:	6039      	str	r1, [r7, #0]
    b44e:	71fb      	strb	r3, [r7, #7]
    b450:	4613      	mov	r3, r2
    b452:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b454:	683b      	ldr	r3, [r7, #0]
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	095b      	lsrs	r3, r3, #5
    b45a:	b2db      	uxtb	r3, r3
    b45c:	f003 0303 	and.w	r3, r3, #3
    b460:	2b01      	cmp	r3, #1
    b462:	d002      	beq.n	b46a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b464:	f06f 0309 	mvn.w	r3, #9
    b468:	e026      	b.n	b4b8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b46a:	683b      	ldr	r3, [r7, #0]
    b46c:	889b      	ldrh	r3, [r3, #4]
    b46e:	b29a      	uxth	r2, r3
    b470:	4b13      	ldr	r3, [pc, #76]	; (b4c0 <cdcdf_acm_req+0x7c>)
    b472:	781b      	ldrb	r3, [r3, #0]
    b474:	b29b      	uxth	r3, r3
    b476:	429a      	cmp	r2, r3
    b478:	d007      	beq.n	b48a <cdcdf_acm_req+0x46>
    b47a:	683b      	ldr	r3, [r7, #0]
    b47c:	889b      	ldrh	r3, [r3, #4]
    b47e:	b29a      	uxth	r2, r3
    b480:	4b0f      	ldr	r3, [pc, #60]	; (b4c0 <cdcdf_acm_req+0x7c>)
    b482:	785b      	ldrb	r3, [r3, #1]
    b484:	b29b      	uxth	r3, r3
    b486:	429a      	cmp	r2, r3
    b488:	d114      	bne.n	b4b4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b48a:	683b      	ldr	r3, [r7, #0]
    b48c:	781b      	ldrb	r3, [r3, #0]
    b48e:	b25b      	sxtb	r3, r3
    b490:	2b00      	cmp	r3, #0
    b492:	da07      	bge.n	b4a4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b494:	79ba      	ldrb	r2, [r7, #6]
    b496:	79fb      	ldrb	r3, [r7, #7]
    b498:	6839      	ldr	r1, [r7, #0]
    b49a:	4618      	mov	r0, r3
    b49c:	4b09      	ldr	r3, [pc, #36]	; (b4c4 <cdcdf_acm_req+0x80>)
    b49e:	4798      	blx	r3
    b4a0:	4603      	mov	r3, r0
    b4a2:	e009      	b.n	b4b8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b4a4:	79ba      	ldrb	r2, [r7, #6]
    b4a6:	79fb      	ldrb	r3, [r7, #7]
    b4a8:	6839      	ldr	r1, [r7, #0]
    b4aa:	4618      	mov	r0, r3
    b4ac:	4b06      	ldr	r3, [pc, #24]	; (b4c8 <cdcdf_acm_req+0x84>)
    b4ae:	4798      	blx	r3
    b4b0:	4603      	mov	r3, r0
    b4b2:	e001      	b.n	b4b8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b4b4:	f06f 0309 	mvn.w	r3, #9
	}
}
    b4b8:	4618      	mov	r0, r3
    b4ba:	3708      	adds	r7, #8
    b4bc:	46bd      	mov	sp, r7
    b4be:	bd80      	pop	{r7, pc}
    b4c0:	20000b3c 	.word	0x20000b3c
    b4c4:	0000b3e5 	.word	0x0000b3e5
    b4c8:	0000b305 	.word	0x0000b305

0000b4cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b4cc:	b580      	push	{r7, lr}
    b4ce:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b4d0:	4b0b      	ldr	r3, [pc, #44]	; (b500 <cdcdf_acm_init+0x34>)
    b4d2:	4798      	blx	r3
    b4d4:	4603      	mov	r3, r0
    b4d6:	2b01      	cmp	r3, #1
    b4d8:	d902      	bls.n	b4e0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b4da:	f06f 0310 	mvn.w	r3, #16
    b4de:	e00d      	b.n	b4fc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b4e0:	4b08      	ldr	r3, [pc, #32]	; (b504 <cdcdf_acm_init+0x38>)
    b4e2:	4a09      	ldr	r2, [pc, #36]	; (b508 <cdcdf_acm_init+0x3c>)
    b4e4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b4e6:	4b07      	ldr	r3, [pc, #28]	; (b504 <cdcdf_acm_init+0x38>)
    b4e8:	4a08      	ldr	r2, [pc, #32]	; (b50c <cdcdf_acm_init+0x40>)
    b4ea:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b4ec:	4805      	ldr	r0, [pc, #20]	; (b504 <cdcdf_acm_init+0x38>)
    b4ee:	4b08      	ldr	r3, [pc, #32]	; (b510 <cdcdf_acm_init+0x44>)
    b4f0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b4f2:	4908      	ldr	r1, [pc, #32]	; (b514 <cdcdf_acm_init+0x48>)
    b4f4:	2001      	movs	r0, #1
    b4f6:	4b08      	ldr	r3, [pc, #32]	; (b518 <cdcdf_acm_init+0x4c>)
    b4f8:	4798      	blx	r3
	return ERR_NONE;
    b4fa:	2300      	movs	r3, #0
}
    b4fc:	4618      	mov	r0, r3
    b4fe:	bd80      	pop	{r7, pc}
    b500:	0000c369 	.word	0x0000c369
    b504:	20000b30 	.word	0x20000b30
    b508:	0000b2b5 	.word	0x0000b2b5
    b50c:	20000b3c 	.word	0x20000b3c
    b510:	0000c2d1 	.word	0x0000c2d1
    b514:	2000010c 	.word	0x2000010c
    b518:	0000c201 	.word	0x0000c201

0000b51c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    b51c:	b590      	push	{r4, r7, lr}
    b51e:	b083      	sub	sp, #12
    b520:	af00      	add	r7, sp, #0
    b522:	6078      	str	r0, [r7, #4]
    b524:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    b526:	4b0b      	ldr	r3, [pc, #44]	; (b554 <cdcdf_acm_read+0x38>)
    b528:	4798      	blx	r3
    b52a:	4603      	mov	r3, r0
    b52c:	f083 0301 	eor.w	r3, r3, #1
    b530:	b2db      	uxtb	r3, r3
    b532:	2b00      	cmp	r3, #0
    b534:	d002      	beq.n	b53c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    b536:	f06f 0310 	mvn.w	r3, #16
    b53a:	e007      	b.n	b54c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b53c:	4b06      	ldr	r3, [pc, #24]	; (b558 <cdcdf_acm_read+0x3c>)
    b53e:	7918      	ldrb	r0, [r3, #4]
    b540:	2300      	movs	r3, #0
    b542:	683a      	ldr	r2, [r7, #0]
    b544:	6879      	ldr	r1, [r7, #4]
    b546:	4c05      	ldr	r4, [pc, #20]	; (b55c <cdcdf_acm_read+0x40>)
    b548:	47a0      	blx	r4
    b54a:	4603      	mov	r3, r0
}
    b54c:	4618      	mov	r0, r3
    b54e:	370c      	adds	r7, #12
    b550:	46bd      	mov	sp, r7
    b552:	bd90      	pop	{r4, r7, pc}
    b554:	0000b641 	.word	0x0000b641
    b558:	20000b3c 	.word	0x20000b3c
    b55c:	0000c1c5 	.word	0x0000c1c5

0000b560 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    b560:	b590      	push	{r4, r7, lr}
    b562:	b083      	sub	sp, #12
    b564:	af00      	add	r7, sp, #0
    b566:	6078      	str	r0, [r7, #4]
    b568:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    b56a:	4b0b      	ldr	r3, [pc, #44]	; (b598 <cdcdf_acm_write+0x38>)
    b56c:	4798      	blx	r3
    b56e:	4603      	mov	r3, r0
    b570:	f083 0301 	eor.w	r3, r3, #1
    b574:	b2db      	uxtb	r3, r3
    b576:	2b00      	cmp	r3, #0
    b578:	d002      	beq.n	b580 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    b57a:	f06f 0310 	mvn.w	r3, #16
    b57e:	e007      	b.n	b590 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b580:	4b06      	ldr	r3, [pc, #24]	; (b59c <cdcdf_acm_write+0x3c>)
    b582:	78d8      	ldrb	r0, [r3, #3]
    b584:	2301      	movs	r3, #1
    b586:	683a      	ldr	r2, [r7, #0]
    b588:	6879      	ldr	r1, [r7, #4]
    b58a:	4c05      	ldr	r4, [pc, #20]	; (b5a0 <cdcdf_acm_write+0x40>)
    b58c:	47a0      	blx	r4
    b58e:	4603      	mov	r3, r0
}
    b590:	4618      	mov	r0, r3
    b592:	370c      	adds	r7, #12
    b594:	46bd      	mov	sp, r7
    b596:	bd90      	pop	{r4, r7, pc}
    b598:	0000b641 	.word	0x0000b641
    b59c:	20000b3c 	.word	0x20000b3c
    b5a0:	0000c1c5 	.word	0x0000c1c5

0000b5a4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    b5a8:	4b05      	ldr	r3, [pc, #20]	; (b5c0 <cdcdf_acm_stop_xfer+0x1c>)
    b5aa:	78db      	ldrb	r3, [r3, #3]
    b5ac:	4618      	mov	r0, r3
    b5ae:	4b05      	ldr	r3, [pc, #20]	; (b5c4 <cdcdf_acm_stop_xfer+0x20>)
    b5b0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    b5b2:	4b03      	ldr	r3, [pc, #12]	; (b5c0 <cdcdf_acm_stop_xfer+0x1c>)
    b5b4:	791b      	ldrb	r3, [r3, #4]
    b5b6:	4618      	mov	r0, r3
    b5b8:	4b02      	ldr	r3, [pc, #8]	; (b5c4 <cdcdf_acm_stop_xfer+0x20>)
    b5ba:	4798      	blx	r3
}
    b5bc:	bf00      	nop
    b5be:	bd80      	pop	{r7, pc}
    b5c0:	20000b3c 	.word	0x20000b3c
    b5c4:	00002ed1 	.word	0x00002ed1

0000b5c8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	b082      	sub	sp, #8
    b5cc:	af00      	add	r7, sp, #0
    b5ce:	4603      	mov	r3, r0
    b5d0:	6039      	str	r1, [r7, #0]
    b5d2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    b5d4:	79fb      	ldrb	r3, [r7, #7]
    b5d6:	2b03      	cmp	r3, #3
    b5d8:	d822      	bhi.n	b620 <cdcdf_acm_register_callback+0x58>
    b5da:	a201      	add	r2, pc, #4	; (adr r2, b5e0 <cdcdf_acm_register_callback+0x18>)
    b5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b5e0:	0000b5f1 	.word	0x0000b5f1
    b5e4:	0000b601 	.word	0x0000b601
    b5e8:	0000b611 	.word	0x0000b611
    b5ec:	0000b619 	.word	0x0000b619
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    b5f0:	4b0f      	ldr	r3, [pc, #60]	; (b630 <cdcdf_acm_register_callback+0x68>)
    b5f2:	791b      	ldrb	r3, [r3, #4]
    b5f4:	683a      	ldr	r2, [r7, #0]
    b5f6:	2102      	movs	r1, #2
    b5f8:	4618      	mov	r0, r3
    b5fa:	4b0e      	ldr	r3, [pc, #56]	; (b634 <cdcdf_acm_register_callback+0x6c>)
    b5fc:	4798      	blx	r3
		break;
    b5fe:	e012      	b.n	b626 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    b600:	4b0b      	ldr	r3, [pc, #44]	; (b630 <cdcdf_acm_register_callback+0x68>)
    b602:	78db      	ldrb	r3, [r3, #3]
    b604:	683a      	ldr	r2, [r7, #0]
    b606:	2102      	movs	r1, #2
    b608:	4618      	mov	r0, r3
    b60a:	4b0a      	ldr	r3, [pc, #40]	; (b634 <cdcdf_acm_register_callback+0x6c>)
    b60c:	4798      	blx	r3
		break;
    b60e:	e00a      	b.n	b626 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    b610:	4a09      	ldr	r2, [pc, #36]	; (b638 <cdcdf_acm_register_callback+0x70>)
    b612:	683b      	ldr	r3, [r7, #0]
    b614:	6013      	str	r3, [r2, #0]
		break;
    b616:	e006      	b.n	b626 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    b618:	4a08      	ldr	r2, [pc, #32]	; (b63c <cdcdf_acm_register_callback+0x74>)
    b61a:	683b      	ldr	r3, [r7, #0]
    b61c:	6013      	str	r3, [r2, #0]
		break;
    b61e:	e002      	b.n	b626 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    b620:	f06f 030c 	mvn.w	r3, #12
    b624:	e000      	b.n	b628 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    b626:	2300      	movs	r3, #0
}
    b628:	4618      	mov	r0, r3
    b62a:	3708      	adds	r7, #8
    b62c:	46bd      	mov	sp, r7
    b62e:	bd80      	pop	{r7, pc}
    b630:	20000b3c 	.word	0x20000b3c
    b634:	00002ffd 	.word	0x00002ffd
    b638:	20000b50 	.word	0x20000b50
    b63c:	20000b4c 	.word	0x20000b4c

0000b640 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    b640:	b480      	push	{r7}
    b642:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    b644:	4b03      	ldr	r3, [pc, #12]	; (b654 <cdcdf_acm_is_enabled+0x14>)
    b646:	795b      	ldrb	r3, [r3, #5]
}
    b648:	4618      	mov	r0, r3
    b64a:	46bd      	mov	sp, r7
    b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b650:	4770      	bx	lr
    b652:	bf00      	nop
    b654:	20000b3c 	.word	0x20000b3c

0000b658 <usb_get_u16>:
{
    b658:	b480      	push	{r7}
    b65a:	b083      	sub	sp, #12
    b65c:	af00      	add	r7, sp, #0
    b65e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	b29a      	uxth	r2, r3
    b666:	687b      	ldr	r3, [r7, #4]
    b668:	3301      	adds	r3, #1
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	b29b      	uxth	r3, r3
    b66e:	021b      	lsls	r3, r3, #8
    b670:	b29b      	uxth	r3, r3
    b672:	4413      	add	r3, r2
    b674:	b29b      	uxth	r3, r3
}
    b676:	4618      	mov	r0, r3
    b678:	370c      	adds	r7, #12
    b67a:	46bd      	mov	sp, r7
    b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b680:	4770      	bx	lr

0000b682 <usb_desc_len>:
{
    b682:	b480      	push	{r7}
    b684:	b083      	sub	sp, #12
    b686:	af00      	add	r7, sp, #0
    b688:	6078      	str	r0, [r7, #4]
	return desc[0];
    b68a:	687b      	ldr	r3, [r7, #4]
    b68c:	781b      	ldrb	r3, [r3, #0]
}
    b68e:	4618      	mov	r0, r3
    b690:	370c      	adds	r7, #12
    b692:	46bd      	mov	sp, r7
    b694:	f85d 7b04 	ldr.w	r7, [sp], #4
    b698:	4770      	bx	lr
	...

0000b69c <usb_desc_next>:
{
    b69c:	b580      	push	{r7, lr}
    b69e:	b082      	sub	sp, #8
    b6a0:	af00      	add	r7, sp, #0
    b6a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b6a4:	6878      	ldr	r0, [r7, #4]
    b6a6:	4b05      	ldr	r3, [pc, #20]	; (b6bc <usb_desc_next+0x20>)
    b6a8:	4798      	blx	r3
    b6aa:	4603      	mov	r3, r0
    b6ac:	461a      	mov	r2, r3
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	4413      	add	r3, r2
}
    b6b2:	4618      	mov	r0, r3
    b6b4:	3708      	adds	r7, #8
    b6b6:	46bd      	mov	sp, r7
    b6b8:	bd80      	pop	{r7, pc}
    b6ba:	bf00      	nop
    b6bc:	0000b683 	.word	0x0000b683

0000b6c0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b6c0:	b580      	push	{r7, lr}
    b6c2:	b082      	sub	sp, #8
    b6c4:	af00      	add	r7, sp, #0
    b6c6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b6c8:	687b      	ldr	r3, [r7, #4]
    b6ca:	3302      	adds	r3, #2
    b6cc:	4618      	mov	r0, r3
    b6ce:	4b03      	ldr	r3, [pc, #12]	; (b6dc <usb_cfg_desc_total_len+0x1c>)
    b6d0:	4798      	blx	r3
    b6d2:	4603      	mov	r3, r0
}
    b6d4:	4618      	mov	r0, r3
    b6d6:	3708      	adds	r7, #8
    b6d8:	46bd      	mov	sp, r7
    b6da:	bd80      	pop	{r7, pc}
    b6dc:	0000b659 	.word	0x0000b659

0000b6e0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b6e0:	b590      	push	{r4, r7, lr}
    b6e2:	b085      	sub	sp, #20
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	4603      	mov	r3, r0
    b6e8:	6039      	str	r1, [r7, #0]
    b6ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b6ec:	2300      	movs	r3, #0
    b6ee:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b6f0:	683b      	ldr	r3, [r7, #0]
    b6f2:	799a      	ldrb	r2, [r3, #6]
    b6f4:	79db      	ldrb	r3, [r3, #7]
    b6f6:	021b      	lsls	r3, r3, #8
    b6f8:	4313      	orrs	r3, r2
    b6fa:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b6fc:	897b      	ldrh	r3, [r7, #10]
    b6fe:	2b12      	cmp	r3, #18
    b700:	d901      	bls.n	b706 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b702:	2312      	movs	r3, #18
    b704:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b706:	68fb      	ldr	r3, [r7, #12]
    b708:	2b00      	cmp	r3, #0
    b70a:	d10a      	bne.n	b722 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b70c:	4b0f      	ldr	r3, [pc, #60]	; (b74c <usbdc_get_dev_desc+0x6c>)
    b70e:	681b      	ldr	r3, [r3, #0]
    b710:	6818      	ldr	r0, [r3, #0]
    b712:	4b0e      	ldr	r3, [pc, #56]	; (b74c <usbdc_get_dev_desc+0x6c>)
    b714:	681b      	ldr	r3, [r3, #0]
    b716:	685b      	ldr	r3, [r3, #4]
    b718:	2201      	movs	r2, #1
    b71a:	4619      	mov	r1, r3
    b71c:	4b0c      	ldr	r3, [pc, #48]	; (b750 <usbdc_get_dev_desc+0x70>)
    b71e:	4798      	blx	r3
    b720:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b722:	68fb      	ldr	r3, [r7, #12]
    b724:	2b00      	cmp	r3, #0
    b726:	d101      	bne.n	b72c <usbdc_get_dev_desc+0x4c>
		return false;
    b728:	2300      	movs	r3, #0
    b72a:	e00b      	b.n	b744 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b72c:	897a      	ldrh	r2, [r7, #10]
    b72e:	79f8      	ldrb	r0, [r7, #7]
    b730:	2300      	movs	r3, #0
    b732:	68f9      	ldr	r1, [r7, #12]
    b734:	4c07      	ldr	r4, [pc, #28]	; (b754 <usbdc_get_dev_desc+0x74>)
    b736:	47a0      	blx	r4
    b738:	4603      	mov	r3, r0
    b73a:	2b00      	cmp	r3, #0
    b73c:	d001      	beq.n	b742 <usbdc_get_dev_desc+0x62>
		return false;
    b73e:	2300      	movs	r3, #0
    b740:	e000      	b.n	b744 <usbdc_get_dev_desc+0x64>
	}
	return true;
    b742:	2301      	movs	r3, #1
}
    b744:	4618      	mov	r0, r3
    b746:	3714      	adds	r7, #20
    b748:	46bd      	mov	sp, r7
    b74a:	bd90      	pop	{r4, r7, pc}
    b74c:	20000b54 	.word	0x20000b54
    b750:	0000c455 	.word	0x0000c455
    b754:	0000c1c5 	.word	0x0000c1c5

0000b758 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b758:	b590      	push	{r4, r7, lr}
    b75a:	b087      	sub	sp, #28
    b75c:	af00      	add	r7, sp, #0
    b75e:	4603      	mov	r3, r0
    b760:	6039      	str	r1, [r7, #0]
    b762:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b764:	2300      	movs	r3, #0
    b766:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b768:	683b      	ldr	r3, [r7, #0]
    b76a:	799a      	ldrb	r2, [r3, #6]
    b76c:	79db      	ldrb	r3, [r3, #7]
    b76e:	021b      	lsls	r3, r3, #8
    b770:	4313      	orrs	r3, r2
    b772:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b774:	683b      	ldr	r3, [r7, #0]
    b776:	885b      	ldrh	r3, [r3, #2]
    b778:	b29b      	uxth	r3, r3
    b77a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b77c:	8a7a      	ldrh	r2, [r7, #18]
    b77e:	4b1e      	ldr	r3, [pc, #120]	; (b7f8 <usbdc_get_cfg_desc+0xa0>)
    b780:	7f1b      	ldrb	r3, [r3, #28]
    b782:	3b01      	subs	r3, #1
    b784:	4013      	ands	r3, r2
    b786:	2b00      	cmp	r3, #0
    b788:	bf0c      	ite	eq
    b78a:	2301      	moveq	r3, #1
    b78c:	2300      	movne	r3, #0
    b78e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b790:	697b      	ldr	r3, [r7, #20]
    b792:	2b00      	cmp	r3, #0
    b794:	d10c      	bne.n	b7b0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b796:	4b18      	ldr	r3, [pc, #96]	; (b7f8 <usbdc_get_cfg_desc+0xa0>)
    b798:	681b      	ldr	r3, [r3, #0]
    b79a:	6818      	ldr	r0, [r3, #0]
    b79c:	4b16      	ldr	r3, [pc, #88]	; (b7f8 <usbdc_get_cfg_desc+0xa0>)
    b79e:	681b      	ldr	r3, [r3, #0]
    b7a0:	6859      	ldr	r1, [r3, #4]
    b7a2:	7c3b      	ldrb	r3, [r7, #16]
    b7a4:	3301      	adds	r3, #1
    b7a6:	b2db      	uxtb	r3, r3
    b7a8:	461a      	mov	r2, r3
    b7aa:	4b14      	ldr	r3, [pc, #80]	; (b7fc <usbdc_get_cfg_desc+0xa4>)
    b7ac:	4798      	blx	r3
    b7ae:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b7b0:	697b      	ldr	r3, [r7, #20]
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d101      	bne.n	b7ba <usbdc_get_cfg_desc+0x62>
		return false;
    b7b6:	2300      	movs	r3, #0
    b7b8:	e019      	b.n	b7ee <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b7ba:	6978      	ldr	r0, [r7, #20]
    b7bc:	4b10      	ldr	r3, [pc, #64]	; (b800 <usbdc_get_cfg_desc+0xa8>)
    b7be:	4798      	blx	r3
    b7c0:	4603      	mov	r3, r0
    b7c2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b7c4:	8a7a      	ldrh	r2, [r7, #18]
    b7c6:	89fb      	ldrh	r3, [r7, #14]
    b7c8:	429a      	cmp	r2, r3
    b7ca:	d802      	bhi.n	b7d2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b7cc:	2300      	movs	r3, #0
    b7ce:	747b      	strb	r3, [r7, #17]
    b7d0:	e001      	b.n	b7d6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b7d2:	89fb      	ldrh	r3, [r7, #14]
    b7d4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b7d6:	8a7a      	ldrh	r2, [r7, #18]
    b7d8:	7c7b      	ldrb	r3, [r7, #17]
    b7da:	79f8      	ldrb	r0, [r7, #7]
    b7dc:	6979      	ldr	r1, [r7, #20]
    b7de:	4c09      	ldr	r4, [pc, #36]	; (b804 <usbdc_get_cfg_desc+0xac>)
    b7e0:	47a0      	blx	r4
    b7e2:	4603      	mov	r3, r0
    b7e4:	2b00      	cmp	r3, #0
    b7e6:	d001      	beq.n	b7ec <usbdc_get_cfg_desc+0x94>
		return false;
    b7e8:	2300      	movs	r3, #0
    b7ea:	e000      	b.n	b7ee <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b7ec:	2301      	movs	r3, #1
}
    b7ee:	4618      	mov	r0, r3
    b7f0:	371c      	adds	r7, #28
    b7f2:	46bd      	mov	sp, r7
    b7f4:	bd90      	pop	{r4, r7, pc}
    b7f6:	bf00      	nop
    b7f8:	20000b54 	.word	0x20000b54
    b7fc:	0000c515 	.word	0x0000c515
    b800:	0000b6c1 	.word	0x0000b6c1
    b804:	0000c1c5 	.word	0x0000c1c5

0000b808 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b808:	b590      	push	{r4, r7, lr}
    b80a:	b085      	sub	sp, #20
    b80c:	af00      	add	r7, sp, #0
    b80e:	4603      	mov	r3, r0
    b810:	6039      	str	r1, [r7, #0]
    b812:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b814:	683b      	ldr	r3, [r7, #0]
    b816:	799a      	ldrb	r2, [r3, #6]
    b818:	79db      	ldrb	r3, [r3, #7]
    b81a:	021b      	lsls	r3, r3, #8
    b81c:	4313      	orrs	r3, r2
    b81e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b820:	683b      	ldr	r3, [r7, #0]
    b822:	885b      	ldrh	r3, [r3, #2]
    b824:	b29b      	uxth	r3, r3
    b826:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b828:	89fa      	ldrh	r2, [r7, #14]
    b82a:	4b1a      	ldr	r3, [pc, #104]	; (b894 <usbdc_get_str_desc+0x8c>)
    b82c:	7f1b      	ldrb	r3, [r3, #28]
    b82e:	3b01      	subs	r3, #1
    b830:	4013      	ands	r3, r2
    b832:	2b00      	cmp	r3, #0
    b834:	bf0c      	ite	eq
    b836:	2301      	moveq	r3, #1
    b838:	2300      	movne	r3, #0
    b83a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b83c:	4b15      	ldr	r3, [pc, #84]	; (b894 <usbdc_get_str_desc+0x8c>)
    b83e:	681b      	ldr	r3, [r3, #0]
    b840:	6818      	ldr	r0, [r3, #0]
    b842:	4b14      	ldr	r3, [pc, #80]	; (b894 <usbdc_get_str_desc+0x8c>)
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	685b      	ldr	r3, [r3, #4]
    b848:	7b3a      	ldrb	r2, [r7, #12]
    b84a:	4619      	mov	r1, r3
    b84c:	4b12      	ldr	r3, [pc, #72]	; (b898 <usbdc_get_str_desc+0x90>)
    b84e:	4798      	blx	r3
    b850:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b852:	68bb      	ldr	r3, [r7, #8]
    b854:	2b00      	cmp	r3, #0
    b856:	d101      	bne.n	b85c <usbdc_get_str_desc+0x54>
		return false;
    b858:	2300      	movs	r3, #0
    b85a:	e017      	b.n	b88c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b85c:	68bb      	ldr	r3, [r7, #8]
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	b29b      	uxth	r3, r3
    b862:	89fa      	ldrh	r2, [r7, #14]
    b864:	429a      	cmp	r2, r3
    b866:	d802      	bhi.n	b86e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b868:	2300      	movs	r3, #0
    b86a:	737b      	strb	r3, [r7, #13]
    b86c:	e002      	b.n	b874 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b86e:	68bb      	ldr	r3, [r7, #8]
    b870:	781b      	ldrb	r3, [r3, #0]
    b872:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b874:	89fa      	ldrh	r2, [r7, #14]
    b876:	7b7b      	ldrb	r3, [r7, #13]
    b878:	79f8      	ldrb	r0, [r7, #7]
    b87a:	68b9      	ldr	r1, [r7, #8]
    b87c:	4c07      	ldr	r4, [pc, #28]	; (b89c <usbdc_get_str_desc+0x94>)
    b87e:	47a0      	blx	r4
    b880:	4603      	mov	r3, r0
    b882:	2b00      	cmp	r3, #0
    b884:	d001      	beq.n	b88a <usbdc_get_str_desc+0x82>
		return false;
    b886:	2300      	movs	r3, #0
    b888:	e000      	b.n	b88c <usbdc_get_str_desc+0x84>
	}
	return true;
    b88a:	2301      	movs	r3, #1
}
    b88c:	4618      	mov	r0, r3
    b88e:	3714      	adds	r7, #20
    b890:	46bd      	mov	sp, r7
    b892:	bd90      	pop	{r4, r7, pc}
    b894:	20000b54 	.word	0x20000b54
    b898:	0000c58d 	.word	0x0000c58d
    b89c:	0000c1c5 	.word	0x0000c1c5

0000b8a0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b084      	sub	sp, #16
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	4603      	mov	r3, r0
    b8a8:	6039      	str	r1, [r7, #0]
    b8aa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b8ac:	683b      	ldr	r3, [r7, #0]
    b8ae:	885b      	ldrh	r3, [r3, #2]
    b8b0:	b29b      	uxth	r3, r3
    b8b2:	0a1b      	lsrs	r3, r3, #8
    b8b4:	b29b      	uxth	r3, r3
    b8b6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b8b8:	7bfb      	ldrb	r3, [r7, #15]
    b8ba:	2b02      	cmp	r3, #2
    b8bc:	d00d      	beq.n	b8da <usbdc_get_desc_req+0x3a>
    b8be:	2b03      	cmp	r3, #3
    b8c0:	d012      	beq.n	b8e8 <usbdc_get_desc_req+0x48>
    b8c2:	2b01      	cmp	r3, #1
    b8c4:	d002      	beq.n	b8cc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b8c6:	bf00      	nop
	}
	return false;
    b8c8:	2300      	movs	r3, #0
    b8ca:	e013      	b.n	b8f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b8cc:	79fb      	ldrb	r3, [r7, #7]
    b8ce:	6839      	ldr	r1, [r7, #0]
    b8d0:	4618      	mov	r0, r3
    b8d2:	4b0a      	ldr	r3, [pc, #40]	; (b8fc <usbdc_get_desc_req+0x5c>)
    b8d4:	4798      	blx	r3
    b8d6:	4603      	mov	r3, r0
    b8d8:	e00c      	b.n	b8f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b8da:	79fb      	ldrb	r3, [r7, #7]
    b8dc:	6839      	ldr	r1, [r7, #0]
    b8de:	4618      	mov	r0, r3
    b8e0:	4b07      	ldr	r3, [pc, #28]	; (b900 <usbdc_get_desc_req+0x60>)
    b8e2:	4798      	blx	r3
    b8e4:	4603      	mov	r3, r0
    b8e6:	e005      	b.n	b8f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b8e8:	79fb      	ldrb	r3, [r7, #7]
    b8ea:	6839      	ldr	r1, [r7, #0]
    b8ec:	4618      	mov	r0, r3
    b8ee:	4b05      	ldr	r3, [pc, #20]	; (b904 <usbdc_get_desc_req+0x64>)
    b8f0:	4798      	blx	r3
    b8f2:	4603      	mov	r3, r0
}
    b8f4:	4618      	mov	r0, r3
    b8f6:	3710      	adds	r7, #16
    b8f8:	46bd      	mov	sp, r7
    b8fa:	bd80      	pop	{r7, pc}
    b8fc:	0000b6e1 	.word	0x0000b6e1
    b900:	0000b759 	.word	0x0000b759
    b904:	0000b809 	.word	0x0000b809

0000b908 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    b908:	b590      	push	{r4, r7, lr}
    b90a:	b085      	sub	sp, #20
    b90c:	af00      	add	r7, sp, #0
    b90e:	4603      	mov	r3, r0
    b910:	6039      	str	r1, [r7, #0]
    b912:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b914:	683b      	ldr	r3, [r7, #0]
    b916:	781b      	ldrb	r3, [r3, #0]
    b918:	f003 031f 	and.w	r3, r3, #31
    b91c:	2b00      	cmp	r3, #0
    b91e:	db1b      	blt.n	b958 <usbdc_get_status_req+0x50>
    b920:	2b01      	cmp	r3, #1
    b922:	dd02      	ble.n	b92a <usbdc_get_status_req+0x22>
    b924:	2b02      	cmp	r3, #2
    b926:	d003      	beq.n	b930 <usbdc_get_status_req+0x28>
    b928:	e016      	b.n	b958 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    b92a:	2300      	movs	r3, #0
    b92c:	60fb      	str	r3, [r7, #12]
		break;
    b92e:	e015      	b.n	b95c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b930:	683b      	ldr	r3, [r7, #0]
    b932:	889b      	ldrh	r3, [r3, #4]
    b934:	b29b      	uxth	r3, r3
    b936:	b2db      	uxtb	r3, r3
    b938:	2102      	movs	r1, #2
    b93a:	4618      	mov	r0, r3
    b93c:	4b0f      	ldr	r3, [pc, #60]	; (b97c <usbdc_get_status_req+0x74>)
    b93e:	4798      	blx	r3
    b940:	4603      	mov	r3, r0
    b942:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    b944:	68fb      	ldr	r3, [r7, #12]
    b946:	2b00      	cmp	r3, #0
    b948:	da01      	bge.n	b94e <usbdc_get_status_req+0x46>
			return false;
    b94a:	2300      	movs	r3, #0
    b94c:	e012      	b.n	b974 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    b94e:	68fb      	ldr	r3, [r7, #12]
    b950:	f003 0301 	and.w	r3, r3, #1
    b954:	60fb      	str	r3, [r7, #12]
		break;
    b956:	e001      	b.n	b95c <usbdc_get_status_req+0x54>
	default:
		return false;
    b958:	2300      	movs	r3, #0
    b95a:	e00b      	b.n	b974 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    b95c:	4b08      	ldr	r3, [pc, #32]	; (b980 <usbdc_get_status_req+0x78>)
    b95e:	695b      	ldr	r3, [r3, #20]
    b960:	89ba      	ldrh	r2, [r7, #12]
    b962:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b964:	4b06      	ldr	r3, [pc, #24]	; (b980 <usbdc_get_status_req+0x78>)
    b966:	6959      	ldr	r1, [r3, #20]
    b968:	79f8      	ldrb	r0, [r7, #7]
    b96a:	2300      	movs	r3, #0
    b96c:	2202      	movs	r2, #2
    b96e:	4c05      	ldr	r4, [pc, #20]	; (b984 <usbdc_get_status_req+0x7c>)
    b970:	47a0      	blx	r4
	return true;
    b972:	2301      	movs	r3, #1
}
    b974:	4618      	mov	r0, r3
    b976:	3714      	adds	r7, #20
    b978:	46bd      	mov	sp, r7
    b97a:	bd90      	pop	{r4, r7, pc}
    b97c:	00002fa9 	.word	0x00002fa9
    b980:	20000b54 	.word	0x20000b54
    b984:	0000c1c5 	.word	0x0000c1c5

0000b988 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    b988:	b590      	push	{r4, r7, lr}
    b98a:	b085      	sub	sp, #20
    b98c:	af00      	add	r7, sp, #0
    b98e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b990:	4b1f      	ldr	r3, [pc, #124]	; (ba10 <usbdc_get_interface+0x88>)
    b992:	691b      	ldr	r3, [r3, #16]
    b994:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b996:	4b1e      	ldr	r3, [pc, #120]	; (ba10 <usbdc_get_interface+0x88>)
    b998:	7f5b      	ldrb	r3, [r3, #29]
    b99a:	461a      	mov	r2, r3
    b99c:	687b      	ldr	r3, [r7, #4]
    b99e:	889b      	ldrh	r3, [r3, #4]
    b9a0:	b29b      	uxth	r3, r3
    b9a2:	fa42 f303 	asr.w	r3, r2, r3
    b9a6:	f003 0301 	and.w	r3, r3, #1
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d128      	bne.n	ba00 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    b9ae:	4b18      	ldr	r3, [pc, #96]	; (ba10 <usbdc_get_interface+0x88>)
    b9b0:	695b      	ldr	r3, [r3, #20]
    b9b2:	2200      	movs	r2, #0
    b9b4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b9b6:	4b16      	ldr	r3, [pc, #88]	; (ba10 <usbdc_get_interface+0x88>)
    b9b8:	6959      	ldr	r1, [r3, #20]
    b9ba:	2300      	movs	r3, #0
    b9bc:	2201      	movs	r2, #1
    b9be:	2000      	movs	r0, #0
    b9c0:	4c14      	ldr	r4, [pc, #80]	; (ba14 <usbdc_get_interface+0x8c>)
    b9c2:	47a0      	blx	r4
		return true;
    b9c4:	2301      	movs	r3, #1
    b9c6:	e01f      	b.n	ba08 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b9c8:	68fb      	ldr	r3, [r7, #12]
    b9ca:	685b      	ldr	r3, [r3, #4]
    b9cc:	687a      	ldr	r2, [r7, #4]
    b9ce:	2102      	movs	r1, #2
    b9d0:	68f8      	ldr	r0, [r7, #12]
    b9d2:	4798      	blx	r3
    b9d4:	60b8      	str	r0, [r7, #8]
    b9d6:	68bb      	ldr	r3, [r7, #8]
    b9d8:	2b00      	cmp	r3, #0
    b9da:	da03      	bge.n	b9e4 <usbdc_get_interface+0x5c>
			func = func->next;
    b9dc:	68fb      	ldr	r3, [r7, #12]
    b9de:	681b      	ldr	r3, [r3, #0]
    b9e0:	60fb      	str	r3, [r7, #12]
    b9e2:	e00d      	b.n	ba00 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b9e4:	4b0a      	ldr	r3, [pc, #40]	; (ba10 <usbdc_get_interface+0x88>)
    b9e6:	695b      	ldr	r3, [r3, #20]
    b9e8:	68ba      	ldr	r2, [r7, #8]
    b9ea:	b2d2      	uxtb	r2, r2
    b9ec:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b9ee:	4b08      	ldr	r3, [pc, #32]	; (ba10 <usbdc_get_interface+0x88>)
    b9f0:	6959      	ldr	r1, [r3, #20]
    b9f2:	2300      	movs	r3, #0
    b9f4:	2201      	movs	r2, #1
    b9f6:	2000      	movs	r0, #0
    b9f8:	4c06      	ldr	r4, [pc, #24]	; (ba14 <usbdc_get_interface+0x8c>)
    b9fa:	47a0      	blx	r4
			return true;
    b9fc:	2301      	movs	r3, #1
    b9fe:	e003      	b.n	ba08 <usbdc_get_interface+0x80>
	while (NULL != func) {
    ba00:	68fb      	ldr	r3, [r7, #12]
    ba02:	2b00      	cmp	r3, #0
    ba04:	d1e0      	bne.n	b9c8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    ba06:	2300      	movs	r3, #0
}
    ba08:	4618      	mov	r0, r3
    ba0a:	3714      	adds	r7, #20
    ba0c:	46bd      	mov	sp, r7
    ba0e:	bd90      	pop	{r4, r7, pc}
    ba10:	20000b54 	.word	0x20000b54
    ba14:	0000c1c5 	.word	0x0000c1c5

0000ba18 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ba18:	b590      	push	{r4, r7, lr}
    ba1a:	b083      	sub	sp, #12
    ba1c:	af00      	add	r7, sp, #0
    ba1e:	4603      	mov	r3, r0
    ba20:	6039      	str	r1, [r7, #0]
    ba22:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ba24:	683b      	ldr	r3, [r7, #0]
    ba26:	785b      	ldrb	r3, [r3, #1]
    ba28:	2b0a      	cmp	r3, #10
    ba2a:	d83a      	bhi.n	baa2 <usbdc_get_req+0x8a>
    ba2c:	a201      	add	r2, pc, #4	; (adr r2, ba34 <usbdc_get_req+0x1c>)
    ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba32:	bf00      	nop
    ba34:	0000ba8b 	.word	0x0000ba8b
    ba38:	0000baa3 	.word	0x0000baa3
    ba3c:	0000baa3 	.word	0x0000baa3
    ba40:	0000baa3 	.word	0x0000baa3
    ba44:	0000baa3 	.word	0x0000baa3
    ba48:	0000baa3 	.word	0x0000baa3
    ba4c:	0000ba61 	.word	0x0000ba61
    ba50:	0000baa3 	.word	0x0000baa3
    ba54:	0000ba6f 	.word	0x0000ba6f
    ba58:	0000baa3 	.word	0x0000baa3
    ba5c:	0000ba99 	.word	0x0000ba99
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ba60:	79fb      	ldrb	r3, [r7, #7]
    ba62:	6839      	ldr	r1, [r7, #0]
    ba64:	4618      	mov	r0, r3
    ba66:	4b11      	ldr	r3, [pc, #68]	; (baac <usbdc_get_req+0x94>)
    ba68:	4798      	blx	r3
    ba6a:	4603      	mov	r3, r0
    ba6c:	e01a      	b.n	baa4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ba6e:	4b10      	ldr	r3, [pc, #64]	; (bab0 <usbdc_get_req+0x98>)
    ba70:	695b      	ldr	r3, [r3, #20]
    ba72:	4a0f      	ldr	r2, [pc, #60]	; (bab0 <usbdc_get_req+0x98>)
    ba74:	7ed2      	ldrb	r2, [r2, #27]
    ba76:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ba78:	4b0d      	ldr	r3, [pc, #52]	; (bab0 <usbdc_get_req+0x98>)
    ba7a:	6959      	ldr	r1, [r3, #20]
    ba7c:	79f8      	ldrb	r0, [r7, #7]
    ba7e:	2300      	movs	r3, #0
    ba80:	2201      	movs	r2, #1
    ba82:	4c0c      	ldr	r4, [pc, #48]	; (bab4 <usbdc_get_req+0x9c>)
    ba84:	47a0      	blx	r4
		return true;
    ba86:	2301      	movs	r3, #1
    ba88:	e00c      	b.n	baa4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    ba8a:	79fb      	ldrb	r3, [r7, #7]
    ba8c:	6839      	ldr	r1, [r7, #0]
    ba8e:	4618      	mov	r0, r3
    ba90:	4b09      	ldr	r3, [pc, #36]	; (bab8 <usbdc_get_req+0xa0>)
    ba92:	4798      	blx	r3
    ba94:	4603      	mov	r3, r0
    ba96:	e005      	b.n	baa4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    ba98:	6838      	ldr	r0, [r7, #0]
    ba9a:	4b08      	ldr	r3, [pc, #32]	; (babc <usbdc_get_req+0xa4>)
    ba9c:	4798      	blx	r3
    ba9e:	4603      	mov	r3, r0
    baa0:	e000      	b.n	baa4 <usbdc_get_req+0x8c>
	default:
		return false;
    baa2:	2300      	movs	r3, #0
	}
}
    baa4:	4618      	mov	r0, r3
    baa6:	370c      	adds	r7, #12
    baa8:	46bd      	mov	sp, r7
    baaa:	bd90      	pop	{r4, r7, pc}
    baac:	0000b8a1 	.word	0x0000b8a1
    bab0:	20000b54 	.word	0x20000b54
    bab4:	0000c1c5 	.word	0x0000c1c5
    bab8:	0000b909 	.word	0x0000b909
    babc:	0000b989 	.word	0x0000b989

0000bac0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bac0:	b590      	push	{r4, r7, lr}
    bac2:	b083      	sub	sp, #12
    bac4:	af00      	add	r7, sp, #0
    bac6:	4603      	mov	r3, r0
    bac8:	6039      	str	r1, [r7, #0]
    baca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bacc:	683b      	ldr	r3, [r7, #0]
    bace:	781b      	ldrb	r3, [r3, #0]
    bad0:	f003 031f 	and.w	r3, r3, #31
    bad4:	2b02      	cmp	r3, #2
    bad6:	d116      	bne.n	bb06 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bad8:	683b      	ldr	r3, [r7, #0]
    bada:	88db      	ldrh	r3, [r3, #6]
    badc:	b29b      	uxth	r3, r3
    bade:	2b00      	cmp	r3, #0
    bae0:	d001      	beq.n	bae6 <usbdc_clear_ftr_req+0x26>
			return false;
    bae2:	2300      	movs	r3, #0
    bae4:	e010      	b.n	bb08 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bae6:	683b      	ldr	r3, [r7, #0]
    bae8:	889b      	ldrh	r3, [r3, #4]
    baea:	b29b      	uxth	r3, r3
    baec:	b2db      	uxtb	r3, r3
    baee:	2100      	movs	r1, #0
    baf0:	4618      	mov	r0, r3
    baf2:	4b07      	ldr	r3, [pc, #28]	; (bb10 <usbdc_clear_ftr_req+0x50>)
    baf4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    baf6:	79f8      	ldrb	r0, [r7, #7]
    baf8:	2301      	movs	r3, #1
    bafa:	2200      	movs	r2, #0
    bafc:	2100      	movs	r1, #0
    bafe:	4c05      	ldr	r4, [pc, #20]	; (bb14 <usbdc_clear_ftr_req+0x54>)
    bb00:	47a0      	blx	r4
		return true;
    bb02:	2301      	movs	r3, #1
    bb04:	e000      	b.n	bb08 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    bb06:	2300      	movs	r3, #0
	}
}
    bb08:	4618      	mov	r0, r3
    bb0a:	370c      	adds	r7, #12
    bb0c:	46bd      	mov	sp, r7
    bb0e:	bd90      	pop	{r4, r7, pc}
    bb10:	00002fa9 	.word	0x00002fa9
    bb14:	0000c1c5 	.word	0x0000c1c5

0000bb18 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bb18:	b590      	push	{r4, r7, lr}
    bb1a:	b083      	sub	sp, #12
    bb1c:	af00      	add	r7, sp, #0
    bb1e:	4603      	mov	r3, r0
    bb20:	6039      	str	r1, [r7, #0]
    bb22:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bb24:	683b      	ldr	r3, [r7, #0]
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	f003 031f 	and.w	r3, r3, #31
    bb2c:	2b02      	cmp	r3, #2
    bb2e:	d116      	bne.n	bb5e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bb30:	683b      	ldr	r3, [r7, #0]
    bb32:	88db      	ldrh	r3, [r3, #6]
    bb34:	b29b      	uxth	r3, r3
    bb36:	2b00      	cmp	r3, #0
    bb38:	d001      	beq.n	bb3e <usbdc_set_ftr_req+0x26>
			return false;
    bb3a:	2300      	movs	r3, #0
    bb3c:	e010      	b.n	bb60 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bb3e:	683b      	ldr	r3, [r7, #0]
    bb40:	889b      	ldrh	r3, [r3, #4]
    bb42:	b29b      	uxth	r3, r3
    bb44:	b2db      	uxtb	r3, r3
    bb46:	2101      	movs	r1, #1
    bb48:	4618      	mov	r0, r3
    bb4a:	4b07      	ldr	r3, [pc, #28]	; (bb68 <usbdc_set_ftr_req+0x50>)
    bb4c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bb4e:	79f8      	ldrb	r0, [r7, #7]
    bb50:	2301      	movs	r3, #1
    bb52:	2200      	movs	r2, #0
    bb54:	2100      	movs	r1, #0
    bb56:	4c05      	ldr	r4, [pc, #20]	; (bb6c <usbdc_set_ftr_req+0x54>)
    bb58:	47a0      	blx	r4
		return true;
    bb5a:	2301      	movs	r3, #1
    bb5c:	e000      	b.n	bb60 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bb5e:	2300      	movs	r3, #0
	}
}
    bb60:	4618      	mov	r0, r3
    bb62:	370c      	adds	r7, #12
    bb64:	46bd      	mov	sp, r7
    bb66:	bd90      	pop	{r4, r7, pc}
    bb68:	00002fa9 	.word	0x00002fa9
    bb6c:	0000c1c5 	.word	0x0000c1c5

0000bb70 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b082      	sub	sp, #8
    bb74:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bb76:	4b0a      	ldr	r3, [pc, #40]	; (bba0 <usbdc_unconfig+0x30>)
    bb78:	691b      	ldr	r3, [r3, #16]
    bb7a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bb7c:	e008      	b.n	bb90 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	685b      	ldr	r3, [r3, #4]
    bb82:	2200      	movs	r2, #0
    bb84:	2101      	movs	r1, #1
    bb86:	6878      	ldr	r0, [r7, #4]
    bb88:	4798      	blx	r3
		func = func->next;
    bb8a:	687b      	ldr	r3, [r7, #4]
    bb8c:	681b      	ldr	r3, [r3, #0]
    bb8e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bb90:	687b      	ldr	r3, [r7, #4]
    bb92:	2b00      	cmp	r3, #0
    bb94:	d1f3      	bne.n	bb7e <usbdc_unconfig+0xe>
	}
}
    bb96:	bf00      	nop
    bb98:	3708      	adds	r7, #8
    bb9a:	46bd      	mov	sp, r7
    bb9c:	bd80      	pop	{r7, pc}
    bb9e:	bf00      	nop
    bba0:	20000b54 	.word	0x20000b54

0000bba4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bba4:	b580      	push	{r7, lr}
    bba6:	b088      	sub	sp, #32
    bba8:	af00      	add	r7, sp, #0
    bbaa:	4603      	mov	r3, r0
    bbac:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bbae:	2300      	movs	r3, #0
    bbb0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bbb2:	23ff      	movs	r3, #255	; 0xff
    bbb4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bbb6:	79fb      	ldrb	r3, [r7, #7]
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d103      	bne.n	bbc4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bbbc:	4b2e      	ldr	r3, [pc, #184]	; (bc78 <usbdc_set_config+0xd4>)
    bbbe:	4798      	blx	r3
		return true;
    bbc0:	2301      	movs	r3, #1
    bbc2:	e055      	b.n	bc70 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bbc4:	69bb      	ldr	r3, [r7, #24]
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	d10a      	bne.n	bbe0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bbca:	4b2c      	ldr	r3, [pc, #176]	; (bc7c <usbdc_set_config+0xd8>)
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	6818      	ldr	r0, [r3, #0]
    bbd0:	4b2a      	ldr	r3, [pc, #168]	; (bc7c <usbdc_set_config+0xd8>)
    bbd2:	681b      	ldr	r3, [r3, #0]
    bbd4:	685b      	ldr	r3, [r3, #4]
    bbd6:	79fa      	ldrb	r2, [r7, #7]
    bbd8:	4619      	mov	r1, r3
    bbda:	4b29      	ldr	r3, [pc, #164]	; (bc80 <usbdc_set_config+0xdc>)
    bbdc:	4798      	blx	r3
    bbde:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bbe0:	69bb      	ldr	r3, [r7, #24]
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d101      	bne.n	bbea <usbdc_set_config+0x46>
		return false;
    bbe6:	2300      	movs	r3, #0
    bbe8:	e042      	b.n	bc70 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bbea:	69b8      	ldr	r0, [r7, #24]
    bbec:	4b25      	ldr	r3, [pc, #148]	; (bc84 <usbdc_set_config+0xe0>)
    bbee:	4798      	blx	r3
    bbf0:	4603      	mov	r3, r0
    bbf2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bbf4:	8abb      	ldrh	r3, [r7, #20]
    bbf6:	69ba      	ldr	r2, [r7, #24]
    bbf8:	4413      	add	r3, r2
    bbfa:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bbfc:	693b      	ldr	r3, [r7, #16]
    bbfe:	2204      	movs	r2, #4
    bc00:	4619      	mov	r1, r3
    bc02:	69b8      	ldr	r0, [r7, #24]
    bc04:	4b20      	ldr	r3, [pc, #128]	; (bc88 <usbdc_set_config+0xe4>)
    bc06:	4798      	blx	r3
    bc08:	4603      	mov	r3, r0
    bc0a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bc0c:	e02c      	b.n	bc68 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bc0e:	68fb      	ldr	r3, [r7, #12]
    bc10:	3302      	adds	r3, #2
    bc12:	781b      	ldrb	r3, [r3, #0]
    bc14:	7dfa      	ldrb	r2, [r7, #23]
    bc16:	429a      	cmp	r2, r3
    bc18:	d018      	beq.n	bc4c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bc1a:	68fb      	ldr	r3, [r7, #12]
    bc1c:	789b      	ldrb	r3, [r3, #2]
    bc1e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bc20:	4b16      	ldr	r3, [pc, #88]	; (bc7c <usbdc_set_config+0xd8>)
    bc22:	691b      	ldr	r3, [r3, #16]
    bc24:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bc26:	e00c      	b.n	bc42 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bc28:	69fb      	ldr	r3, [r7, #28]
    bc2a:	685b      	ldr	r3, [r3, #4]
    bc2c:	f107 020c 	add.w	r2, r7, #12
    bc30:	2100      	movs	r1, #0
    bc32:	69f8      	ldr	r0, [r7, #28]
    bc34:	4798      	blx	r3
    bc36:	4603      	mov	r3, r0
    bc38:	2b00      	cmp	r3, #0
    bc3a:	d006      	beq.n	bc4a <usbdc_set_config+0xa6>
					func = func->next;
    bc3c:	69fb      	ldr	r3, [r7, #28]
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bc42:	69fb      	ldr	r3, [r7, #28]
    bc44:	2b00      	cmp	r3, #0
    bc46:	d1ef      	bne.n	bc28 <usbdc_set_config+0x84>
    bc48:	e000      	b.n	bc4c <usbdc_set_config+0xa8>
				} else {
					break;
    bc4a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bc4c:	68fb      	ldr	r3, [r7, #12]
    bc4e:	4618      	mov	r0, r3
    bc50:	4b0e      	ldr	r3, [pc, #56]	; (bc8c <usbdc_set_config+0xe8>)
    bc52:	4798      	blx	r3
    bc54:	4603      	mov	r3, r0
    bc56:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bc58:	68fb      	ldr	r3, [r7, #12]
    bc5a:	6939      	ldr	r1, [r7, #16]
    bc5c:	2204      	movs	r2, #4
    bc5e:	4618      	mov	r0, r3
    bc60:	4b09      	ldr	r3, [pc, #36]	; (bc88 <usbdc_set_config+0xe4>)
    bc62:	4798      	blx	r3
    bc64:	4603      	mov	r3, r0
    bc66:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bc68:	68fb      	ldr	r3, [r7, #12]
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	d1cf      	bne.n	bc0e <usbdc_set_config+0x6a>
	}
	return true;
    bc6e:	2301      	movs	r3, #1
}
    bc70:	4618      	mov	r0, r3
    bc72:	3720      	adds	r7, #32
    bc74:	46bd      	mov	sp, r7
    bc76:	bd80      	pop	{r7, pc}
    bc78:	0000bb71 	.word	0x0000bb71
    bc7c:	20000b54 	.word	0x20000b54
    bc80:	0000c515 	.word	0x0000c515
    bc84:	0000b6c1 	.word	0x0000b6c1
    bc88:	0000c455 	.word	0x0000c455
    bc8c:	0000b69d 	.word	0x0000b69d

0000bc90 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bc90:	b580      	push	{r7, lr}
    bc92:	b082      	sub	sp, #8
    bc94:	af00      	add	r7, sp, #0
    bc96:	4603      	mov	r3, r0
    bc98:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bc9a:	79fb      	ldrb	r3, [r7, #7]
    bc9c:	4618      	mov	r0, r3
    bc9e:	4b03      	ldr	r3, [pc, #12]	; (bcac <usbdc_set_address+0x1c>)
    bca0:	4798      	blx	r3
}
    bca2:	bf00      	nop
    bca4:	3708      	adds	r7, #8
    bca6:	46bd      	mov	sp, r7
    bca8:	bd80      	pop	{r7, pc}
    bcaa:	bf00      	nop
    bcac:	00002bc5 	.word	0x00002bc5

0000bcb0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bcb0:	b590      	push	{r4, r7, lr}
    bcb2:	b087      	sub	sp, #28
    bcb4:	af00      	add	r7, sp, #0
    bcb6:	4603      	mov	r3, r0
    bcb8:	460a      	mov	r2, r1
    bcba:	80fb      	strh	r3, [r7, #6]
    bcbc:	4613      	mov	r3, r2
    bcbe:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bcc0:	2300      	movs	r3, #0
    bcc2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bcc4:	693b      	ldr	r3, [r7, #16]
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	d10b      	bne.n	bce2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bcca:	4b43      	ldr	r3, [pc, #268]	; (bdd8 <usbdc_set_interface+0x128>)
    bccc:	681b      	ldr	r3, [r3, #0]
    bcce:	6818      	ldr	r0, [r3, #0]
    bcd0:	4b41      	ldr	r3, [pc, #260]	; (bdd8 <usbdc_set_interface+0x128>)
    bcd2:	681b      	ldr	r3, [r3, #0]
    bcd4:	6859      	ldr	r1, [r3, #4]
    bcd6:	4b40      	ldr	r3, [pc, #256]	; (bdd8 <usbdc_set_interface+0x128>)
    bcd8:	7edb      	ldrb	r3, [r3, #27]
    bcda:	461a      	mov	r2, r3
    bcdc:	4b3f      	ldr	r3, [pc, #252]	; (bddc <usbdc_set_interface+0x12c>)
    bcde:	4798      	blx	r3
    bce0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bce2:	693b      	ldr	r3, [r7, #16]
    bce4:	2b00      	cmp	r3, #0
    bce6:	d101      	bne.n	bcec <usbdc_set_interface+0x3c>
		return false;
    bce8:	2300      	movs	r3, #0
    bcea:	e071      	b.n	bdd0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bcec:	693b      	ldr	r3, [r7, #16]
    bcee:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bcf0:	6938      	ldr	r0, [r7, #16]
    bcf2:	4b3b      	ldr	r3, [pc, #236]	; (bde0 <usbdc_set_interface+0x130>)
    bcf4:	4798      	blx	r3
    bcf6:	4603      	mov	r3, r0
    bcf8:	461a      	mov	r2, r3
    bcfa:	693b      	ldr	r3, [r7, #16]
    bcfc:	4413      	add	r3, r2
    bcfe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bd00:	68bb      	ldr	r3, [r7, #8]
    bd02:	68f9      	ldr	r1, [r7, #12]
    bd04:	2204      	movs	r2, #4
    bd06:	4618      	mov	r0, r3
    bd08:	4b36      	ldr	r3, [pc, #216]	; (bde4 <usbdc_set_interface+0x134>)
    bd0a:	4798      	blx	r3
    bd0c:	6138      	str	r0, [r7, #16]
    bd0e:	693b      	ldr	r3, [r7, #16]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d113      	bne.n	bd3c <usbdc_set_interface+0x8c>
		return false;
    bd14:	2300      	movs	r3, #0
    bd16:	e05b      	b.n	bdd0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    bd18:	68bb      	ldr	r3, [r7, #8]
    bd1a:	4618      	mov	r0, r3
    bd1c:	4b32      	ldr	r3, [pc, #200]	; (bde8 <usbdc_set_interface+0x138>)
    bd1e:	4798      	blx	r3
    bd20:	4603      	mov	r3, r0
    bd22:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bd24:	68bb      	ldr	r3, [r7, #8]
    bd26:	68f9      	ldr	r1, [r7, #12]
    bd28:	2204      	movs	r2, #4
    bd2a:	4618      	mov	r0, r3
    bd2c:	4b2d      	ldr	r3, [pc, #180]	; (bde4 <usbdc_set_interface+0x134>)
    bd2e:	4798      	blx	r3
    bd30:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    bd32:	693b      	ldr	r3, [r7, #16]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d101      	bne.n	bd3c <usbdc_set_interface+0x8c>
			return false;
    bd38:	2300      	movs	r3, #0
    bd3a:	e049      	b.n	bdd0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    bd3c:	693b      	ldr	r3, [r7, #16]
    bd3e:	3302      	adds	r3, #2
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	b29b      	uxth	r3, r3
    bd44:	88ba      	ldrh	r2, [r7, #4]
    bd46:	429a      	cmp	r2, r3
    bd48:	d1e6      	bne.n	bd18 <usbdc_set_interface+0x68>
    bd4a:	693b      	ldr	r3, [r7, #16]
    bd4c:	3303      	adds	r3, #3
    bd4e:	781b      	ldrb	r3, [r3, #0]
    bd50:	b29b      	uxth	r3, r3
    bd52:	88fa      	ldrh	r2, [r7, #6]
    bd54:	429a      	cmp	r2, r3
    bd56:	d1df      	bne.n	bd18 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    bd58:	693b      	ldr	r3, [r7, #16]
    bd5a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    bd5c:	4b1e      	ldr	r3, [pc, #120]	; (bdd8 <usbdc_set_interface+0x128>)
    bd5e:	691b      	ldr	r3, [r3, #16]
    bd60:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    bd62:	e031      	b.n	bdc8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    bd64:	697b      	ldr	r3, [r7, #20]
    bd66:	685b      	ldr	r3, [r3, #4]
    bd68:	f107 0208 	add.w	r2, r7, #8
    bd6c:	2101      	movs	r1, #1
    bd6e:	6978      	ldr	r0, [r7, #20]
    bd70:	4798      	blx	r3
    bd72:	4603      	mov	r3, r0
    bd74:	2b00      	cmp	r3, #0
    bd76:	d003      	beq.n	bd80 <usbdc_set_interface+0xd0>
			func = func->next;
    bd78:	697b      	ldr	r3, [r7, #20]
    bd7a:	681b      	ldr	r3, [r3, #0]
    bd7c:	617b      	str	r3, [r7, #20]
    bd7e:	e023      	b.n	bdc8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bd80:	697b      	ldr	r3, [r7, #20]
    bd82:	685b      	ldr	r3, [r3, #4]
    bd84:	f107 0208 	add.w	r2, r7, #8
    bd88:	2100      	movs	r1, #0
    bd8a:	6978      	ldr	r0, [r7, #20]
    bd8c:	4798      	blx	r3
    bd8e:	4603      	mov	r3, r0
    bd90:	2b00      	cmp	r3, #0
    bd92:	d117      	bne.n	bdc4 <usbdc_set_interface+0x114>
			if (alt_set) {
    bd94:	88fb      	ldrh	r3, [r7, #6]
    bd96:	2b00      	cmp	r3, #0
    bd98:	d00c      	beq.n	bdb4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bd9a:	4b0f      	ldr	r3, [pc, #60]	; (bdd8 <usbdc_set_interface+0x128>)
    bd9c:	7f5b      	ldrb	r3, [r3, #29]
    bd9e:	b25a      	sxtb	r2, r3
    bda0:	88bb      	ldrh	r3, [r7, #4]
    bda2:	2101      	movs	r1, #1
    bda4:	fa01 f303 	lsl.w	r3, r1, r3
    bda8:	b25b      	sxtb	r3, r3
    bdaa:	4313      	orrs	r3, r2
    bdac:	b25b      	sxtb	r3, r3
    bdae:	b2da      	uxtb	r2, r3
    bdb0:	4b09      	ldr	r3, [pc, #36]	; (bdd8 <usbdc_set_interface+0x128>)
    bdb2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    bdb4:	2300      	movs	r3, #0
    bdb6:	2200      	movs	r2, #0
    bdb8:	2100      	movs	r1, #0
    bdba:	2000      	movs	r0, #0
    bdbc:	4c0b      	ldr	r4, [pc, #44]	; (bdec <usbdc_set_interface+0x13c>)
    bdbe:	47a0      	blx	r4
			return true;
    bdc0:	2301      	movs	r3, #1
    bdc2:	e005      	b.n	bdd0 <usbdc_set_interface+0x120>
		} else {
			return false;
    bdc4:	2300      	movs	r3, #0
    bdc6:	e003      	b.n	bdd0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bdc8:	697b      	ldr	r3, [r7, #20]
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d1ca      	bne.n	bd64 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bdce:	2300      	movs	r3, #0
}
    bdd0:	4618      	mov	r0, r3
    bdd2:	371c      	adds	r7, #28
    bdd4:	46bd      	mov	sp, r7
    bdd6:	bd90      	pop	{r4, r7, pc}
    bdd8:	20000b54 	.word	0x20000b54
    bddc:	0000c515 	.word	0x0000c515
    bde0:	0000b6c1 	.word	0x0000b6c1
    bde4:	0000c455 	.word	0x0000c455
    bde8:	0000b69d 	.word	0x0000b69d
    bdec:	0000c1c5 	.word	0x0000c1c5

0000bdf0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bdf0:	b590      	push	{r4, r7, lr}
    bdf2:	b083      	sub	sp, #12
    bdf4:	af00      	add	r7, sp, #0
    bdf6:	4603      	mov	r3, r0
    bdf8:	6039      	str	r1, [r7, #0]
    bdfa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bdfc:	683b      	ldr	r3, [r7, #0]
    bdfe:	785b      	ldrb	r3, [r3, #1]
    be00:	3b01      	subs	r3, #1
    be02:	2b0a      	cmp	r3, #10
    be04:	d85b      	bhi.n	bebe <usbdc_set_req+0xce>
    be06:	a201      	add	r2, pc, #4	; (adr r2, be0c <usbdc_set_req+0x1c>)
    be08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    be0c:	0000be8b 	.word	0x0000be8b
    be10:	0000bebf 	.word	0x0000bebf
    be14:	0000be99 	.word	0x0000be99
    be18:	0000bebf 	.word	0x0000bebf
    be1c:	0000be39 	.word	0x0000be39
    be20:	0000bebf 	.word	0x0000bebf
    be24:	0000bebf 	.word	0x0000bebf
    be28:	0000bebf 	.word	0x0000bebf
    be2c:	0000be53 	.word	0x0000be53
    be30:	0000bebf 	.word	0x0000bebf
    be34:	0000bea7 	.word	0x0000bea7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    be38:	79f8      	ldrb	r0, [r7, #7]
    be3a:	2301      	movs	r3, #1
    be3c:	2200      	movs	r2, #0
    be3e:	2100      	movs	r1, #0
    be40:	4c21      	ldr	r4, [pc, #132]	; (bec8 <usbdc_set_req+0xd8>)
    be42:	47a0      	blx	r4
    be44:	4603      	mov	r3, r0
    be46:	2b00      	cmp	r3, #0
    be48:	bf0c      	ite	eq
    be4a:	2301      	moveq	r3, #1
    be4c:	2300      	movne	r3, #0
    be4e:	b2db      	uxtb	r3, r3
    be50:	e036      	b.n	bec0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    be52:	683b      	ldr	r3, [r7, #0]
    be54:	885b      	ldrh	r3, [r3, #2]
    be56:	b29b      	uxth	r3, r3
    be58:	b2db      	uxtb	r3, r3
    be5a:	4618      	mov	r0, r3
    be5c:	4b1b      	ldr	r3, [pc, #108]	; (becc <usbdc_set_req+0xdc>)
    be5e:	4798      	blx	r3
    be60:	4603      	mov	r3, r0
    be62:	f083 0301 	eor.w	r3, r3, #1
    be66:	b2db      	uxtb	r3, r3
    be68:	2b00      	cmp	r3, #0
    be6a:	d001      	beq.n	be70 <usbdc_set_req+0x80>
			return false;
    be6c:	2300      	movs	r3, #0
    be6e:	e027      	b.n	bec0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    be70:	79f8      	ldrb	r0, [r7, #7]
    be72:	2301      	movs	r3, #1
    be74:	2200      	movs	r2, #0
    be76:	2100      	movs	r1, #0
    be78:	4c13      	ldr	r4, [pc, #76]	; (bec8 <usbdc_set_req+0xd8>)
    be7a:	47a0      	blx	r4
    be7c:	4603      	mov	r3, r0
    be7e:	2b00      	cmp	r3, #0
    be80:	bf0c      	ite	eq
    be82:	2301      	moveq	r3, #1
    be84:	2300      	movne	r3, #0
    be86:	b2db      	uxtb	r3, r3
    be88:	e01a      	b.n	bec0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    be8a:	79fb      	ldrb	r3, [r7, #7]
    be8c:	6839      	ldr	r1, [r7, #0]
    be8e:	4618      	mov	r0, r3
    be90:	4b0f      	ldr	r3, [pc, #60]	; (bed0 <usbdc_set_req+0xe0>)
    be92:	4798      	blx	r3
    be94:	4603      	mov	r3, r0
    be96:	e013      	b.n	bec0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    be98:	79fb      	ldrb	r3, [r7, #7]
    be9a:	6839      	ldr	r1, [r7, #0]
    be9c:	4618      	mov	r0, r3
    be9e:	4b0d      	ldr	r3, [pc, #52]	; (bed4 <usbdc_set_req+0xe4>)
    bea0:	4798      	blx	r3
    bea2:	4603      	mov	r3, r0
    bea4:	e00c      	b.n	bec0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bea6:	683b      	ldr	r3, [r7, #0]
    bea8:	885b      	ldrh	r3, [r3, #2]
    beaa:	b29a      	uxth	r2, r3
    beac:	683b      	ldr	r3, [r7, #0]
    beae:	889b      	ldrh	r3, [r3, #4]
    beb0:	b29b      	uxth	r3, r3
    beb2:	4619      	mov	r1, r3
    beb4:	4610      	mov	r0, r2
    beb6:	4b08      	ldr	r3, [pc, #32]	; (bed8 <usbdc_set_req+0xe8>)
    beb8:	4798      	blx	r3
    beba:	4603      	mov	r3, r0
    bebc:	e000      	b.n	bec0 <usbdc_set_req+0xd0>
	default:
		return false;
    bebe:	2300      	movs	r3, #0
	}
}
    bec0:	4618      	mov	r0, r3
    bec2:	370c      	adds	r7, #12
    bec4:	46bd      	mov	sp, r7
    bec6:	bd90      	pop	{r4, r7, pc}
    bec8:	0000c1c5 	.word	0x0000c1c5
    becc:	0000bba5 	.word	0x0000bba5
    bed0:	0000bac1 	.word	0x0000bac1
    bed4:	0000bb19 	.word	0x0000bb19
    bed8:	0000bcb1 	.word	0x0000bcb1

0000bedc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bedc:	b580      	push	{r7, lr}
    bede:	b082      	sub	sp, #8
    bee0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bee2:	4b0a      	ldr	r3, [pc, #40]	; (bf0c <usbdc_sof_notify+0x30>)
    bee4:	685b      	ldr	r3, [r3, #4]
    bee6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    bee8:	e009      	b.n	befe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    beea:	687b      	ldr	r3, [r7, #4]
    beec:	685b      	ldr	r3, [r3, #4]
    beee:	2b00      	cmp	r3, #0
    bef0:	d002      	beq.n	bef8 <usbdc_sof_notify+0x1c>
			sof->cb();
    bef2:	687b      	ldr	r3, [r7, #4]
    bef4:	685b      	ldr	r3, [r3, #4]
    bef6:	4798      	blx	r3
		}
		sof = sof->next;
    bef8:	687b      	ldr	r3, [r7, #4]
    befa:	681b      	ldr	r3, [r3, #0]
    befc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    befe:	687b      	ldr	r3, [r7, #4]
    bf00:	2b00      	cmp	r3, #0
    bf02:	d1f2      	bne.n	beea <usbdc_sof_notify+0xe>
	}
}
    bf04:	bf00      	nop
    bf06:	3708      	adds	r7, #8
    bf08:	46bd      	mov	sp, r7
    bf0a:	bd80      	pop	{r7, pc}
    bf0c:	20000b54 	.word	0x20000b54

0000bf10 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    bf10:	b580      	push	{r7, lr}
    bf12:	b084      	sub	sp, #16
    bf14:	af00      	add	r7, sp, #0
    bf16:	4603      	mov	r3, r0
    bf18:	6039      	str	r1, [r7, #0]
    bf1a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bf1c:	4b0b      	ldr	r3, [pc, #44]	; (bf4c <usbdc_change_notify+0x3c>)
    bf1e:	68db      	ldr	r3, [r3, #12]
    bf20:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    bf22:	e00c      	b.n	bf3e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    bf24:	68fb      	ldr	r3, [r7, #12]
    bf26:	685b      	ldr	r3, [r3, #4]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d005      	beq.n	bf38 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    bf2c:	68fb      	ldr	r3, [r7, #12]
    bf2e:	685b      	ldr	r3, [r3, #4]
    bf30:	79fa      	ldrb	r2, [r7, #7]
    bf32:	6839      	ldr	r1, [r7, #0]
    bf34:	4610      	mov	r0, r2
    bf36:	4798      	blx	r3
		}
		cg = cg->next;
    bf38:	68fb      	ldr	r3, [r7, #12]
    bf3a:	681b      	ldr	r3, [r3, #0]
    bf3c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    bf3e:	68fb      	ldr	r3, [r7, #12]
    bf40:	2b00      	cmp	r3, #0
    bf42:	d1ef      	bne.n	bf24 <usbdc_change_notify+0x14>
	}
}
    bf44:	bf00      	nop
    bf46:	3710      	adds	r7, #16
    bf48:	46bd      	mov	sp, r7
    bf4a:	bd80      	pop	{r7, pc}
    bf4c:	20000b54 	.word	0x20000b54

0000bf50 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf50:	b580      	push	{r7, lr}
    bf52:	b084      	sub	sp, #16
    bf54:	af00      	add	r7, sp, #0
    bf56:	4603      	mov	r3, r0
    bf58:	6039      	str	r1, [r7, #0]
    bf5a:	71fb      	strb	r3, [r7, #7]
    bf5c:	4613      	mov	r3, r2
    bf5e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bf60:	4b12      	ldr	r3, [pc, #72]	; (bfac <usbdc_request_handler+0x5c>)
    bf62:	689b      	ldr	r3, [r3, #8]
    bf64:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    bf66:	e019      	b.n	bf9c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    bf68:	68fb      	ldr	r3, [r7, #12]
    bf6a:	685b      	ldr	r3, [r3, #4]
    bf6c:	2b00      	cmp	r3, #0
    bf6e:	d012      	beq.n	bf96 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    bf70:	68fb      	ldr	r3, [r7, #12]
    bf72:	685b      	ldr	r3, [r3, #4]
    bf74:	79ba      	ldrb	r2, [r7, #6]
    bf76:	79f8      	ldrb	r0, [r7, #7]
    bf78:	6839      	ldr	r1, [r7, #0]
    bf7a:	4798      	blx	r3
    bf7c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    bf7e:	68bb      	ldr	r3, [r7, #8]
    bf80:	2b00      	cmp	r3, #0
    bf82:	d101      	bne.n	bf88 <usbdc_request_handler+0x38>
				return true;
    bf84:	2301      	movs	r3, #1
    bf86:	e00d      	b.n	bfa4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    bf88:	68bb      	ldr	r3, [r7, #8]
    bf8a:	f113 0f0a 	cmn.w	r3, #10
    bf8e:	d002      	beq.n	bf96 <usbdc_request_handler+0x46>
				return -1;
    bf90:	f04f 33ff 	mov.w	r3, #4294967295
    bf94:	e006      	b.n	bfa4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    bf96:	68fb      	ldr	r3, [r7, #12]
    bf98:	681b      	ldr	r3, [r3, #0]
    bf9a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    bf9c:	68fb      	ldr	r3, [r7, #12]
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d1e2      	bne.n	bf68 <usbdc_request_handler+0x18>
	}
	return false;
    bfa2:	2300      	movs	r3, #0
}
    bfa4:	4618      	mov	r0, r3
    bfa6:	3710      	adds	r7, #16
    bfa8:	46bd      	mov	sp, r7
    bfaa:	bd80      	pop	{r7, pc}
    bfac:	20000b54 	.word	0x20000b54

0000bfb0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bfb0:	b580      	push	{r7, lr}
    bfb2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    bfb4:	4b01      	ldr	r3, [pc, #4]	; (bfbc <usbd_sof_cb+0xc>)
    bfb6:	4798      	blx	r3
}
    bfb8:	bf00      	nop
    bfba:	bd80      	pop	{r7, pc}
    bfbc:	0000bedd 	.word	0x0000bedd

0000bfc0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    bfc0:	b580      	push	{r7, lr}
    bfc2:	b082      	sub	sp, #8
    bfc4:	af00      	add	r7, sp, #0
    bfc6:	4603      	mov	r3, r0
    bfc8:	6039      	str	r1, [r7, #0]
    bfca:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    bfcc:	79fb      	ldrb	r3, [r7, #7]
    bfce:	2200      	movs	r2, #0
    bfd0:	6839      	ldr	r1, [r7, #0]
    bfd2:	4618      	mov	r0, r3
    bfd4:	4b14      	ldr	r3, [pc, #80]	; (c028 <usbdc_cb_ctl_req+0x68>)
    bfd6:	4798      	blx	r3
    bfd8:	4603      	mov	r3, r0
    bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
    bfde:	d00b      	beq.n	bff8 <usbdc_cb_ctl_req+0x38>
    bfe0:	2b01      	cmp	r3, #1
    bfe2:	d007      	beq.n	bff4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    bfe4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bfe6:	683b      	ldr	r3, [r7, #0]
    bfe8:	781b      	ldrb	r3, [r3, #0]
    bfea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    bfee:	2b00      	cmp	r3, #0
    bff0:	d007      	beq.n	c002 <usbdc_cb_ctl_req+0x42>
    bff2:	e003      	b.n	bffc <usbdc_cb_ctl_req+0x3c>
		return true;
    bff4:	2301      	movs	r3, #1
    bff6:	e013      	b.n	c020 <usbdc_cb_ctl_req+0x60>
		return false;
    bff8:	2300      	movs	r3, #0
    bffa:	e011      	b.n	c020 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bffc:	2b80      	cmp	r3, #128	; 0x80
    bffe:	d007      	beq.n	c010 <usbdc_cb_ctl_req+0x50>
    c000:	e00d      	b.n	c01e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c002:	79fb      	ldrb	r3, [r7, #7]
    c004:	6839      	ldr	r1, [r7, #0]
    c006:	4618      	mov	r0, r3
    c008:	4b08      	ldr	r3, [pc, #32]	; (c02c <usbdc_cb_ctl_req+0x6c>)
    c00a:	4798      	blx	r3
    c00c:	4603      	mov	r3, r0
    c00e:	e007      	b.n	c020 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c010:	79fb      	ldrb	r3, [r7, #7]
    c012:	6839      	ldr	r1, [r7, #0]
    c014:	4618      	mov	r0, r3
    c016:	4b06      	ldr	r3, [pc, #24]	; (c030 <usbdc_cb_ctl_req+0x70>)
    c018:	4798      	blx	r3
    c01a:	4603      	mov	r3, r0
    c01c:	e000      	b.n	c020 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c01e:	2300      	movs	r3, #0
	}
}
    c020:	4618      	mov	r0, r3
    c022:	3708      	adds	r7, #8
    c024:	46bd      	mov	sp, r7
    c026:	bd80      	pop	{r7, pc}
    c028:	0000bf51 	.word	0x0000bf51
    c02c:	0000bdf1 	.word	0x0000bdf1
    c030:	0000ba19 	.word	0x0000ba19

0000c034 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c034:	b580      	push	{r7, lr}
    c036:	b082      	sub	sp, #8
    c038:	af00      	add	r7, sp, #0
    c03a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c03c:	687b      	ldr	r3, [r7, #4]
    c03e:	781b      	ldrb	r3, [r3, #0]
    c040:	2b00      	cmp	r3, #0
    c042:	d135      	bne.n	c0b0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c044:	687b      	ldr	r3, [r7, #4]
    c046:	785b      	ldrb	r3, [r3, #1]
    c048:	2b05      	cmp	r3, #5
    c04a:	d019      	beq.n	c080 <usbdc_ctrl_status_end+0x4c>
    c04c:	2b09      	cmp	r3, #9
    c04e:	d000      	beq.n	c052 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c050:	e02f      	b.n	c0b2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c052:	687b      	ldr	r3, [r7, #4]
    c054:	885b      	ldrh	r3, [r3, #2]
    c056:	b29b      	uxth	r3, r3
    c058:	b2da      	uxtb	r2, r3
    c05a:	4b17      	ldr	r3, [pc, #92]	; (c0b8 <usbdc_ctrl_status_end+0x84>)
    c05c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c05e:	687b      	ldr	r3, [r7, #4]
    c060:	885b      	ldrh	r3, [r3, #2]
    c062:	b29b      	uxth	r3, r3
    c064:	2b00      	cmp	r3, #0
    c066:	d001      	beq.n	c06c <usbdc_ctrl_status_end+0x38>
    c068:	2204      	movs	r2, #4
    c06a:	e000      	b.n	c06e <usbdc_ctrl_status_end+0x3a>
    c06c:	2203      	movs	r2, #3
    c06e:	4b12      	ldr	r3, [pc, #72]	; (c0b8 <usbdc_ctrl_status_end+0x84>)
    c070:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c072:	4b11      	ldr	r3, [pc, #68]	; (c0b8 <usbdc_ctrl_status_end+0x84>)
    c074:	7e9b      	ldrb	r3, [r3, #26]
    c076:	4619      	mov	r1, r3
    c078:	2001      	movs	r0, #1
    c07a:	4b10      	ldr	r3, [pc, #64]	; (c0bc <usbdc_ctrl_status_end+0x88>)
    c07c:	4798      	blx	r3
		break;
    c07e:	e018      	b.n	c0b2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c080:	687b      	ldr	r3, [r7, #4]
    c082:	885b      	ldrh	r3, [r3, #2]
    c084:	b29b      	uxth	r3, r3
    c086:	b2db      	uxtb	r3, r3
    c088:	4618      	mov	r0, r3
    c08a:	4b0d      	ldr	r3, [pc, #52]	; (c0c0 <usbdc_ctrl_status_end+0x8c>)
    c08c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c08e:	687b      	ldr	r3, [r7, #4]
    c090:	885b      	ldrh	r3, [r3, #2]
    c092:	b29b      	uxth	r3, r3
    c094:	2b00      	cmp	r3, #0
    c096:	d001      	beq.n	c09c <usbdc_ctrl_status_end+0x68>
    c098:	2203      	movs	r2, #3
    c09a:	e000      	b.n	c09e <usbdc_ctrl_status_end+0x6a>
    c09c:	2202      	movs	r2, #2
    c09e:	4b06      	ldr	r3, [pc, #24]	; (c0b8 <usbdc_ctrl_status_end+0x84>)
    c0a0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c0a2:	4b05      	ldr	r3, [pc, #20]	; (c0b8 <usbdc_ctrl_status_end+0x84>)
    c0a4:	7e9b      	ldrb	r3, [r3, #26]
    c0a6:	4619      	mov	r1, r3
    c0a8:	2001      	movs	r0, #1
    c0aa:	4b04      	ldr	r3, [pc, #16]	; (c0bc <usbdc_ctrl_status_end+0x88>)
    c0ac:	4798      	blx	r3
		break;
    c0ae:	e000      	b.n	c0b2 <usbdc_ctrl_status_end+0x7e>
		return;
    c0b0:	bf00      	nop
	}
}
    c0b2:	3708      	adds	r7, #8
    c0b4:	46bd      	mov	sp, r7
    c0b6:	bd80      	pop	{r7, pc}
    c0b8:	20000b54 	.word	0x20000b54
    c0bc:	0000bf11 	.word	0x0000bf11
    c0c0:	0000bc91 	.word	0x0000bc91

0000c0c4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c0c4:	b580      	push	{r7, lr}
    c0c6:	b082      	sub	sp, #8
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c0cc:	2201      	movs	r2, #1
    c0ce:	6879      	ldr	r1, [r7, #4]
    c0d0:	2000      	movs	r0, #0
    c0d2:	4b03      	ldr	r3, [pc, #12]	; (c0e0 <usbdc_ctrl_data_end+0x1c>)
    c0d4:	4798      	blx	r3
	return false;
    c0d6:	2300      	movs	r3, #0
}
    c0d8:	4618      	mov	r0, r3
    c0da:	3708      	adds	r7, #8
    c0dc:	46bd      	mov	sp, r7
    c0de:	bd80      	pop	{r7, pc}
    c0e0:	0000bf51 	.word	0x0000bf51

0000c0e4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c0e4:	b580      	push	{r7, lr}
    c0e6:	b082      	sub	sp, #8
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	4603      	mov	r3, r0
    c0ec:	603a      	str	r2, [r7, #0]
    c0ee:	71fb      	strb	r3, [r7, #7]
    c0f0:	460b      	mov	r3, r1
    c0f2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c0f4:	79bb      	ldrb	r3, [r7, #6]
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	d002      	beq.n	c100 <usbdc_cb_ctl_done+0x1c>
    c0fa:	2b01      	cmp	r3, #1
    c0fc:	d004      	beq.n	c108 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c0fe:	e008      	b.n	c112 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c100:	6838      	ldr	r0, [r7, #0]
    c102:	4b06      	ldr	r3, [pc, #24]	; (c11c <usbdc_cb_ctl_done+0x38>)
    c104:	4798      	blx	r3
		break;
    c106:	e004      	b.n	c112 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c108:	6838      	ldr	r0, [r7, #0]
    c10a:	4b05      	ldr	r3, [pc, #20]	; (c120 <usbdc_cb_ctl_done+0x3c>)
    c10c:	4798      	blx	r3
    c10e:	4603      	mov	r3, r0
    c110:	e000      	b.n	c114 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c112:	2300      	movs	r3, #0
}
    c114:	4618      	mov	r0, r3
    c116:	3708      	adds	r7, #8
    c118:	46bd      	mov	sp, r7
    c11a:	bd80      	pop	{r7, pc}
    c11c:	0000c035 	.word	0x0000c035
    c120:	0000c0c5 	.word	0x0000c0c5

0000c124 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c124:	b580      	push	{r7, lr}
    c126:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c128:	4b10      	ldr	r3, [pc, #64]	; (c16c <usbdc_reset+0x48>)
    c12a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c12c:	4b10      	ldr	r3, [pc, #64]	; (c170 <usbdc_reset+0x4c>)
    c12e:	2202      	movs	r2, #2
    c130:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c132:	4b0f      	ldr	r3, [pc, #60]	; (c170 <usbdc_reset+0x4c>)
    c134:	2200      	movs	r2, #0
    c136:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c138:	4b0d      	ldr	r3, [pc, #52]	; (c170 <usbdc_reset+0x4c>)
    c13a:	2200      	movs	r2, #0
    c13c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c13e:	2000      	movs	r0, #0
    c140:	4b0c      	ldr	r3, [pc, #48]	; (c174 <usbdc_reset+0x50>)
    c142:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c144:	4b0a      	ldr	r3, [pc, #40]	; (c170 <usbdc_reset+0x4c>)
    c146:	7f1b      	ldrb	r3, [r3, #28]
    c148:	4618      	mov	r0, r3
    c14a:	4b0b      	ldr	r3, [pc, #44]	; (c178 <usbdc_reset+0x54>)
    c14c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c14e:	4a0b      	ldr	r2, [pc, #44]	; (c17c <usbdc_reset+0x58>)
    c150:	2100      	movs	r1, #0
    c152:	2000      	movs	r0, #0
    c154:	4b0a      	ldr	r3, [pc, #40]	; (c180 <usbdc_reset+0x5c>)
    c156:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c158:	4a0a      	ldr	r2, [pc, #40]	; (c184 <usbdc_reset+0x60>)
    c15a:	2102      	movs	r1, #2
    c15c:	2000      	movs	r0, #0
    c15e:	4b08      	ldr	r3, [pc, #32]	; (c180 <usbdc_reset+0x5c>)
    c160:	4798      	blx	r3
	usb_d_ep_enable(0);
    c162:	2000      	movs	r0, #0
    c164:	4b08      	ldr	r3, [pc, #32]	; (c188 <usbdc_reset+0x64>)
    c166:	4798      	blx	r3
}
    c168:	bf00      	nop
    c16a:	bd80      	pop	{r7, pc}
    c16c:	0000bb71 	.word	0x0000bb71
    c170:	20000b54 	.word	0x20000b54
    c174:	00002ca9 	.word	0x00002ca9
    c178:	00002be5 	.word	0x00002be5
    c17c:	0000bfc1 	.word	0x0000bfc1
    c180:	00002ffd 	.word	0x00002ffd
    c184:	0000c0e5 	.word	0x0000c0e5
    c188:	00002cf9 	.word	0x00002cf9

0000c18c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c18c:	b580      	push	{r7, lr}
    c18e:	b082      	sub	sp, #8
    c190:	af00      	add	r7, sp, #0
    c192:	4603      	mov	r3, r0
    c194:	6039      	str	r1, [r7, #0]
    c196:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c198:	79fb      	ldrb	r3, [r7, #7]
    c19a:	2b00      	cmp	r3, #0
    c19c:	d002      	beq.n	c1a4 <usbd_event_cb+0x18>
    c19e:	2b01      	cmp	r3, #1
    c1a0:	d005      	beq.n	c1ae <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c1a2:	e007      	b.n	c1b4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c1a4:	6839      	ldr	r1, [r7, #0]
    c1a6:	2000      	movs	r0, #0
    c1a8:	4b04      	ldr	r3, [pc, #16]	; (c1bc <usbd_event_cb+0x30>)
    c1aa:	4798      	blx	r3
		break;
    c1ac:	e002      	b.n	c1b4 <usbd_event_cb+0x28>
		usbdc_reset();
    c1ae:	4b04      	ldr	r3, [pc, #16]	; (c1c0 <usbd_event_cb+0x34>)
    c1b0:	4798      	blx	r3
		break;
    c1b2:	bf00      	nop
	}
}
    c1b4:	bf00      	nop
    c1b6:	3708      	adds	r7, #8
    c1b8:	46bd      	mov	sp, r7
    c1ba:	bd80      	pop	{r7, pc}
    c1bc:	0000bf11 	.word	0x0000bf11
    c1c0:	0000c125 	.word	0x0000c125

0000c1c4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b088      	sub	sp, #32
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	60b9      	str	r1, [r7, #8]
    c1cc:	607a      	str	r2, [r7, #4]
    c1ce:	461a      	mov	r2, r3
    c1d0:	4603      	mov	r3, r0
    c1d2:	73fb      	strb	r3, [r7, #15]
    c1d4:	4613      	mov	r3, r2
    c1d6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c1d8:	68bb      	ldr	r3, [r7, #8]
    c1da:	617b      	str	r3, [r7, #20]
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	61bb      	str	r3, [r7, #24]
    c1e0:	7bfb      	ldrb	r3, [r7, #15]
    c1e2:	773b      	strb	r3, [r7, #28]
    c1e4:	7bbb      	ldrb	r3, [r7, #14]
    c1e6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c1e8:	f107 0314 	add.w	r3, r7, #20
    c1ec:	4618      	mov	r0, r3
    c1ee:	4b03      	ldr	r3, [pc, #12]	; (c1fc <usbdc_xfer+0x38>)
    c1f0:	4798      	blx	r3
    c1f2:	4603      	mov	r3, r0
}
    c1f4:	4618      	mov	r0, r3
    c1f6:	3720      	adds	r7, #32
    c1f8:	46bd      	mov	sp, r7
    c1fa:	bd80      	pop	{r7, pc}
    c1fc:	00002d69 	.word	0x00002d69

0000c200 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c200:	b580      	push	{r7, lr}
    c202:	b082      	sub	sp, #8
    c204:	af00      	add	r7, sp, #0
    c206:	4603      	mov	r3, r0
    c208:	6039      	str	r1, [r7, #0]
    c20a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c20c:	79fb      	ldrb	r3, [r7, #7]
    c20e:	2b01      	cmp	r3, #1
    c210:	d009      	beq.n	c226 <usbdc_register_handler+0x26>
    c212:	2b02      	cmp	r3, #2
    c214:	d00c      	beq.n	c230 <usbdc_register_handler+0x30>
    c216:	2b00      	cmp	r3, #0
    c218:	d000      	beq.n	c21c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c21a:	e00e      	b.n	c23a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c21c:	6839      	ldr	r1, [r7, #0]
    c21e:	4809      	ldr	r0, [pc, #36]	; (c244 <usbdc_register_handler+0x44>)
    c220:	4b09      	ldr	r3, [pc, #36]	; (c248 <usbdc_register_handler+0x48>)
    c222:	4798      	blx	r3
		break;
    c224:	e009      	b.n	c23a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c226:	6839      	ldr	r1, [r7, #0]
    c228:	4808      	ldr	r0, [pc, #32]	; (c24c <usbdc_register_handler+0x4c>)
    c22a:	4b07      	ldr	r3, [pc, #28]	; (c248 <usbdc_register_handler+0x48>)
    c22c:	4798      	blx	r3
		break;
    c22e:	e004      	b.n	c23a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c230:	6839      	ldr	r1, [r7, #0]
    c232:	4807      	ldr	r0, [pc, #28]	; (c250 <usbdc_register_handler+0x50>)
    c234:	4b04      	ldr	r3, [pc, #16]	; (c248 <usbdc_register_handler+0x48>)
    c236:	4798      	blx	r3
		break;
    c238:	bf00      	nop
	}
}
    c23a:	bf00      	nop
    c23c:	3708      	adds	r7, #8
    c23e:	46bd      	mov	sp, r7
    c240:	bd80      	pop	{r7, pc}
    c242:	bf00      	nop
    c244:	20000b58 	.word	0x20000b58
    c248:	00003155 	.word	0x00003155
    c24c:	20000b5c 	.word	0x20000b5c
    c250:	20000b60 	.word	0x20000b60

0000c254 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c254:	b580      	push	{r7, lr}
    c256:	b084      	sub	sp, #16
    c258:	af00      	add	r7, sp, #0
    c25a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c25c:	687b      	ldr	r3, [r7, #4]
    c25e:	2b00      	cmp	r3, #0
    c260:	bf14      	ite	ne
    c262:	2301      	movne	r3, #1
    c264:	2300      	moveq	r3, #0
    c266:	b2db      	uxtb	r3, r3
    c268:	f240 3255 	movw	r2, #853	; 0x355
    c26c:	4910      	ldr	r1, [pc, #64]	; (c2b0 <usbdc_init+0x5c>)
    c26e:	4618      	mov	r0, r3
    c270:	4b10      	ldr	r3, [pc, #64]	; (c2b4 <usbdc_init+0x60>)
    c272:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c274:	4b10      	ldr	r3, [pc, #64]	; (c2b8 <usbdc_init+0x64>)
    c276:	4798      	blx	r3
    c278:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c27a:	68fb      	ldr	r3, [r7, #12]
    c27c:	2b00      	cmp	r3, #0
    c27e:	da01      	bge.n	c284 <usbdc_init+0x30>
		return rc;
    c280:	68fb      	ldr	r3, [r7, #12]
    c282:	e010      	b.n	c2a6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c284:	2220      	movs	r2, #32
    c286:	2100      	movs	r1, #0
    c288:	480c      	ldr	r0, [pc, #48]	; (c2bc <usbdc_init+0x68>)
    c28a:	4b0d      	ldr	r3, [pc, #52]	; (c2c0 <usbdc_init+0x6c>)
    c28c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c28e:	4a0b      	ldr	r2, [pc, #44]	; (c2bc <usbdc_init+0x68>)
    c290:	687b      	ldr	r3, [r7, #4]
    c292:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c294:	490b      	ldr	r1, [pc, #44]	; (c2c4 <usbdc_init+0x70>)
    c296:	2000      	movs	r0, #0
    c298:	4b0b      	ldr	r3, [pc, #44]	; (c2c8 <usbdc_init+0x74>)
    c29a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c29c:	490b      	ldr	r1, [pc, #44]	; (c2cc <usbdc_init+0x78>)
    c29e:	2001      	movs	r0, #1
    c2a0:	4b09      	ldr	r3, [pc, #36]	; (c2c8 <usbdc_init+0x74>)
    c2a2:	4798      	blx	r3

	return 0;
    c2a4:	2300      	movs	r3, #0
}
    c2a6:	4618      	mov	r0, r3
    c2a8:	3710      	adds	r7, #16
    c2aa:	46bd      	mov	sp, r7
    c2ac:	bd80      	pop	{r7, pc}
    c2ae:	bf00      	nop
    c2b0:	0000d7c4 	.word	0x0000d7c4
    c2b4:	00003079 	.word	0x00003079
    c2b8:	00002ad1 	.word	0x00002ad1
    c2bc:	20000b54 	.word	0x20000b54
    c2c0:	0000d229 	.word	0x0000d229
    c2c4:	0000bfb1 	.word	0x0000bfb1
    c2c8:	00002b7d 	.word	0x00002b7d
    c2cc:	0000c18d 	.word	0x0000c18d

0000c2d0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c2d0:	b580      	push	{r7, lr}
    c2d2:	b082      	sub	sp, #8
    c2d4:	af00      	add	r7, sp, #0
    c2d6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c2d8:	6879      	ldr	r1, [r7, #4]
    c2da:	4803      	ldr	r0, [pc, #12]	; (c2e8 <usbdc_register_function+0x18>)
    c2dc:	4b03      	ldr	r3, [pc, #12]	; (c2ec <usbdc_register_function+0x1c>)
    c2de:	4798      	blx	r3
}
    c2e0:	bf00      	nop
    c2e2:	3708      	adds	r7, #8
    c2e4:	46bd      	mov	sp, r7
    c2e6:	bd80      	pop	{r7, pc}
    c2e8:	20000b64 	.word	0x20000b64
    c2ec:	00003155 	.word	0x00003155

0000c2f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c2f0:	b580      	push	{r7, lr}
    c2f2:	b082      	sub	sp, #8
    c2f4:	af00      	add	r7, sp, #0
    c2f6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c2f8:	4b0f      	ldr	r3, [pc, #60]	; (c338 <usbdc_start+0x48>)
    c2fa:	7e9b      	ldrb	r3, [r3, #26]
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d002      	beq.n	c306 <usbdc_start+0x16>
		return ERR_BUSY;
    c300:	f06f 0303 	mvn.w	r3, #3
    c304:	e013      	b.n	c32e <usbdc_start+0x3e>
	}

	if (desces) {
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	2b00      	cmp	r3, #0
    c30a:	d00e      	beq.n	c32a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c30c:	4a0a      	ldr	r2, [pc, #40]	; (c338 <usbdc_start+0x48>)
    c30e:	687b      	ldr	r3, [r7, #4]
    c310:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c312:	687b      	ldr	r3, [r7, #4]
    c314:	681b      	ldr	r3, [r3, #0]
    c316:	79da      	ldrb	r2, [r3, #7]
    c318:	4b07      	ldr	r3, [pc, #28]	; (c338 <usbdc_start+0x48>)
    c31a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c31c:	4b06      	ldr	r3, [pc, #24]	; (c338 <usbdc_start+0x48>)
    c31e:	2201      	movs	r2, #1
    c320:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c322:	4b06      	ldr	r3, [pc, #24]	; (c33c <usbdc_start+0x4c>)
    c324:	4798      	blx	r3
	return ERR_NONE;
    c326:	2300      	movs	r3, #0
    c328:	e001      	b.n	c32e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c32a:	f06f 0308 	mvn.w	r3, #8
}
    c32e:	4618      	mov	r0, r3
    c330:	3708      	adds	r7, #8
    c332:	46bd      	mov	sp, r7
    c334:	bd80      	pop	{r7, pc}
    c336:	bf00      	nop
    c338:	20000b54 	.word	0x20000b54
    c33c:	00002ba1 	.word	0x00002ba1

0000c340 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c340:	b580      	push	{r7, lr}
    c342:	af00      	add	r7, sp, #0
	usb_d_attach();
    c344:	4b01      	ldr	r3, [pc, #4]	; (c34c <usbdc_attach+0xc>)
    c346:	4798      	blx	r3
}
    c348:	bf00      	nop
    c34a:	bd80      	pop	{r7, pc}
    c34c:	00002bb5 	.word	0x00002bb5

0000c350 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c350:	b480      	push	{r7}
    c352:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c354:	4b03      	ldr	r3, [pc, #12]	; (c364 <usbdc_get_ctrl_buffer+0x14>)
    c356:	695b      	ldr	r3, [r3, #20]
}
    c358:	4618      	mov	r0, r3
    c35a:	46bd      	mov	sp, r7
    c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c360:	4770      	bx	lr
    c362:	bf00      	nop
    c364:	20000b54 	.word	0x20000b54

0000c368 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c368:	b480      	push	{r7}
    c36a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c36c:	4b07      	ldr	r3, [pc, #28]	; (c38c <usbdc_get_state+0x24>)
    c36e:	7e9b      	ldrb	r3, [r3, #26]
    c370:	f003 0310 	and.w	r3, r3, #16
    c374:	2b00      	cmp	r3, #0
    c376:	d001      	beq.n	c37c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c378:	2310      	movs	r3, #16
    c37a:	e001      	b.n	c380 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c37c:	4b03      	ldr	r3, [pc, #12]	; (c38c <usbdc_get_state+0x24>)
    c37e:	7e9b      	ldrb	r3, [r3, #26]
}
    c380:	4618      	mov	r0, r3
    c382:	46bd      	mov	sp, r7
    c384:	f85d 7b04 	ldr.w	r7, [sp], #4
    c388:	4770      	bx	lr
    c38a:	bf00      	nop
    c38c:	20000b54 	.word	0x20000b54

0000c390 <usb_get_u16>:
{
    c390:	b480      	push	{r7}
    c392:	b083      	sub	sp, #12
    c394:	af00      	add	r7, sp, #0
    c396:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c398:	687b      	ldr	r3, [r7, #4]
    c39a:	781b      	ldrb	r3, [r3, #0]
    c39c:	b29a      	uxth	r2, r3
    c39e:	687b      	ldr	r3, [r7, #4]
    c3a0:	3301      	adds	r3, #1
    c3a2:	781b      	ldrb	r3, [r3, #0]
    c3a4:	b29b      	uxth	r3, r3
    c3a6:	021b      	lsls	r3, r3, #8
    c3a8:	b29b      	uxth	r3, r3
    c3aa:	4413      	add	r3, r2
    c3ac:	b29b      	uxth	r3, r3
}
    c3ae:	4618      	mov	r0, r3
    c3b0:	370c      	adds	r7, #12
    c3b2:	46bd      	mov	sp, r7
    c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3b8:	4770      	bx	lr

0000c3ba <usb_desc_len>:
{
    c3ba:	b480      	push	{r7}
    c3bc:	b083      	sub	sp, #12
    c3be:	af00      	add	r7, sp, #0
    c3c0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c3c2:	687b      	ldr	r3, [r7, #4]
    c3c4:	781b      	ldrb	r3, [r3, #0]
}
    c3c6:	4618      	mov	r0, r3
    c3c8:	370c      	adds	r7, #12
    c3ca:	46bd      	mov	sp, r7
    c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3d0:	4770      	bx	lr

0000c3d2 <usb_desc_type>:
{
    c3d2:	b480      	push	{r7}
    c3d4:	b083      	sub	sp, #12
    c3d6:	af00      	add	r7, sp, #0
    c3d8:	6078      	str	r0, [r7, #4]
	return desc[1];
    c3da:	687b      	ldr	r3, [r7, #4]
    c3dc:	3301      	adds	r3, #1
    c3de:	781b      	ldrb	r3, [r3, #0]
}
    c3e0:	4618      	mov	r0, r3
    c3e2:	370c      	adds	r7, #12
    c3e4:	46bd      	mov	sp, r7
    c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3ea:	4770      	bx	lr

0000c3ec <usb_desc_next>:
{
    c3ec:	b580      	push	{r7, lr}
    c3ee:	b082      	sub	sp, #8
    c3f0:	af00      	add	r7, sp, #0
    c3f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c3f4:	6878      	ldr	r0, [r7, #4]
    c3f6:	4b05      	ldr	r3, [pc, #20]	; (c40c <usb_desc_next+0x20>)
    c3f8:	4798      	blx	r3
    c3fa:	4603      	mov	r3, r0
    c3fc:	461a      	mov	r2, r3
    c3fe:	687b      	ldr	r3, [r7, #4]
    c400:	4413      	add	r3, r2
}
    c402:	4618      	mov	r0, r3
    c404:	3708      	adds	r7, #8
    c406:	46bd      	mov	sp, r7
    c408:	bd80      	pop	{r7, pc}
    c40a:	bf00      	nop
    c40c:	0000c3bb 	.word	0x0000c3bb

0000c410 <usb_cfg_desc_total_len>:
{
    c410:	b580      	push	{r7, lr}
    c412:	b082      	sub	sp, #8
    c414:	af00      	add	r7, sp, #0
    c416:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c418:	687b      	ldr	r3, [r7, #4]
    c41a:	3302      	adds	r3, #2
    c41c:	4618      	mov	r0, r3
    c41e:	4b03      	ldr	r3, [pc, #12]	; (c42c <usb_cfg_desc_total_len+0x1c>)
    c420:	4798      	blx	r3
    c422:	4603      	mov	r3, r0
}
    c424:	4618      	mov	r0, r3
    c426:	3708      	adds	r7, #8
    c428:	46bd      	mov	sp, r7
    c42a:	bd80      	pop	{r7, pc}
    c42c:	0000c391 	.word	0x0000c391

0000c430 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c430:	b580      	push	{r7, lr}
    c432:	b082      	sub	sp, #8
    c434:	af00      	add	r7, sp, #0
    c436:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c438:	6878      	ldr	r0, [r7, #4]
    c43a:	4b05      	ldr	r3, [pc, #20]	; (c450 <usb_cfg_desc_next+0x20>)
    c43c:	4798      	blx	r3
    c43e:	4603      	mov	r3, r0
    c440:	461a      	mov	r2, r3
    c442:	687b      	ldr	r3, [r7, #4]
    c444:	4413      	add	r3, r2
}
    c446:	4618      	mov	r0, r3
    c448:	3708      	adds	r7, #8
    c44a:	46bd      	mov	sp, r7
    c44c:	bd80      	pop	{r7, pc}
    c44e:	bf00      	nop
    c450:	0000c411 	.word	0x0000c411

0000c454 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c454:	b580      	push	{r7, lr}
    c456:	b084      	sub	sp, #16
    c458:	af00      	add	r7, sp, #0
    c45a:	60f8      	str	r0, [r7, #12]
    c45c:	60b9      	str	r1, [r7, #8]
    c45e:	4613      	mov	r3, r2
    c460:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c462:	e015      	b.n	c490 <usb_find_desc+0x3c>
		_desc_len_check();
    c464:	68f8      	ldr	r0, [r7, #12]
    c466:	4b0f      	ldr	r3, [pc, #60]	; (c4a4 <usb_find_desc+0x50>)
    c468:	4798      	blx	r3
    c46a:	4603      	mov	r3, r0
    c46c:	2b01      	cmp	r3, #1
    c46e:	d801      	bhi.n	c474 <usb_find_desc+0x20>
    c470:	2300      	movs	r3, #0
    c472:	e012      	b.n	c49a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c474:	68f8      	ldr	r0, [r7, #12]
    c476:	4b0c      	ldr	r3, [pc, #48]	; (c4a8 <usb_find_desc+0x54>)
    c478:	4798      	blx	r3
    c47a:	4603      	mov	r3, r0
    c47c:	461a      	mov	r2, r3
    c47e:	79fb      	ldrb	r3, [r7, #7]
    c480:	4293      	cmp	r3, r2
    c482:	d101      	bne.n	c488 <usb_find_desc+0x34>
			return desc;
    c484:	68fb      	ldr	r3, [r7, #12]
    c486:	e008      	b.n	c49a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c488:	68f8      	ldr	r0, [r7, #12]
    c48a:	4b08      	ldr	r3, [pc, #32]	; (c4ac <usb_find_desc+0x58>)
    c48c:	4798      	blx	r3
    c48e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c490:	68fa      	ldr	r2, [r7, #12]
    c492:	68bb      	ldr	r3, [r7, #8]
    c494:	429a      	cmp	r2, r3
    c496:	d3e5      	bcc.n	c464 <usb_find_desc+0x10>
	}
	return NULL;
    c498:	2300      	movs	r3, #0
}
    c49a:	4618      	mov	r0, r3
    c49c:	3710      	adds	r7, #16
    c49e:	46bd      	mov	sp, r7
    c4a0:	bd80      	pop	{r7, pc}
    c4a2:	bf00      	nop
    c4a4:	0000c3bb 	.word	0x0000c3bb
    c4a8:	0000c3d3 	.word	0x0000c3d3
    c4ac:	0000c3ed 	.word	0x0000c3ed

0000c4b0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c4b0:	b580      	push	{r7, lr}
    c4b2:	b082      	sub	sp, #8
    c4b4:	af00      	add	r7, sp, #0
    c4b6:	6078      	str	r0, [r7, #4]
    c4b8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c4ba:	e019      	b.n	c4f0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c4bc:	6878      	ldr	r0, [r7, #4]
    c4be:	4b12      	ldr	r3, [pc, #72]	; (c508 <usb_find_ep_desc+0x58>)
    c4c0:	4798      	blx	r3
    c4c2:	4603      	mov	r3, r0
    c4c4:	2b01      	cmp	r3, #1
    c4c6:	d801      	bhi.n	c4cc <usb_find_ep_desc+0x1c>
    c4c8:	2300      	movs	r3, #0
    c4ca:	e018      	b.n	c4fe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c4cc:	6878      	ldr	r0, [r7, #4]
    c4ce:	4b0f      	ldr	r3, [pc, #60]	; (c50c <usb_find_ep_desc+0x5c>)
    c4d0:	4798      	blx	r3
    c4d2:	4603      	mov	r3, r0
    c4d4:	2b04      	cmp	r3, #4
    c4d6:	d010      	beq.n	c4fa <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c4d8:	6878      	ldr	r0, [r7, #4]
    c4da:	4b0c      	ldr	r3, [pc, #48]	; (c50c <usb_find_ep_desc+0x5c>)
    c4dc:	4798      	blx	r3
    c4de:	4603      	mov	r3, r0
    c4e0:	2b05      	cmp	r3, #5
    c4e2:	d101      	bne.n	c4e8 <usb_find_ep_desc+0x38>
			return desc;
    c4e4:	687b      	ldr	r3, [r7, #4]
    c4e6:	e00a      	b.n	c4fe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c4e8:	6878      	ldr	r0, [r7, #4]
    c4ea:	4b09      	ldr	r3, [pc, #36]	; (c510 <usb_find_ep_desc+0x60>)
    c4ec:	4798      	blx	r3
    c4ee:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c4f0:	687a      	ldr	r2, [r7, #4]
    c4f2:	683b      	ldr	r3, [r7, #0]
    c4f4:	429a      	cmp	r2, r3
    c4f6:	d3e1      	bcc.n	c4bc <usb_find_ep_desc+0xc>
    c4f8:	e000      	b.n	c4fc <usb_find_ep_desc+0x4c>
			break;
    c4fa:	bf00      	nop
	}
	return NULL;
    c4fc:	2300      	movs	r3, #0
}
    c4fe:	4618      	mov	r0, r3
    c500:	3708      	adds	r7, #8
    c502:	46bd      	mov	sp, r7
    c504:	bd80      	pop	{r7, pc}
    c506:	bf00      	nop
    c508:	0000c3bb 	.word	0x0000c3bb
    c50c:	0000c3d3 	.word	0x0000c3d3
    c510:	0000c3ed 	.word	0x0000c3ed

0000c514 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c514:	b580      	push	{r7, lr}
    c516:	b084      	sub	sp, #16
    c518:	af00      	add	r7, sp, #0
    c51a:	60f8      	str	r0, [r7, #12]
    c51c:	60b9      	str	r1, [r7, #8]
    c51e:	4613      	mov	r3, r2
    c520:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c522:	2202      	movs	r2, #2
    c524:	68b9      	ldr	r1, [r7, #8]
    c526:	68f8      	ldr	r0, [r7, #12]
    c528:	4b15      	ldr	r3, [pc, #84]	; (c580 <usb_find_cfg_desc+0x6c>)
    c52a:	4798      	blx	r3
    c52c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c52e:	68fb      	ldr	r3, [r7, #12]
    c530:	2b00      	cmp	r3, #0
    c532:	d11a      	bne.n	c56a <usb_find_cfg_desc+0x56>
		return NULL;
    c534:	2300      	movs	r3, #0
    c536:	e01f      	b.n	c578 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c538:	68f8      	ldr	r0, [r7, #12]
    c53a:	4b12      	ldr	r3, [pc, #72]	; (c584 <usb_find_cfg_desc+0x70>)
    c53c:	4798      	blx	r3
    c53e:	4603      	mov	r3, r0
    c540:	2b01      	cmp	r3, #1
    c542:	d801      	bhi.n	c548 <usb_find_cfg_desc+0x34>
    c544:	2300      	movs	r3, #0
    c546:	e017      	b.n	c578 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c548:	68fb      	ldr	r3, [r7, #12]
    c54a:	3301      	adds	r3, #1
    c54c:	781b      	ldrb	r3, [r3, #0]
    c54e:	2b02      	cmp	r3, #2
    c550:	d110      	bne.n	c574 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c552:	68fb      	ldr	r3, [r7, #12]
    c554:	3305      	adds	r3, #5
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	79fa      	ldrb	r2, [r7, #7]
    c55a:	429a      	cmp	r2, r3
    c55c:	d101      	bne.n	c562 <usb_find_cfg_desc+0x4e>
			return desc;
    c55e:	68fb      	ldr	r3, [r7, #12]
    c560:	e00a      	b.n	c578 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c562:	68f8      	ldr	r0, [r7, #12]
    c564:	4b08      	ldr	r3, [pc, #32]	; (c588 <usb_find_cfg_desc+0x74>)
    c566:	4798      	blx	r3
    c568:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c56a:	68fa      	ldr	r2, [r7, #12]
    c56c:	68bb      	ldr	r3, [r7, #8]
    c56e:	429a      	cmp	r2, r3
    c570:	d3e2      	bcc.n	c538 <usb_find_cfg_desc+0x24>
    c572:	e000      	b.n	c576 <usb_find_cfg_desc+0x62>
			break;
    c574:	bf00      	nop
	}
	return NULL;
    c576:	2300      	movs	r3, #0
}
    c578:	4618      	mov	r0, r3
    c57a:	3710      	adds	r7, #16
    c57c:	46bd      	mov	sp, r7
    c57e:	bd80      	pop	{r7, pc}
    c580:	0000c455 	.word	0x0000c455
    c584:	0000c3bb 	.word	0x0000c3bb
    c588:	0000c431 	.word	0x0000c431

0000c58c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c58c:	b580      	push	{r7, lr}
    c58e:	b086      	sub	sp, #24
    c590:	af00      	add	r7, sp, #0
    c592:	60f8      	str	r0, [r7, #12]
    c594:	60b9      	str	r1, [r7, #8]
    c596:	4613      	mov	r3, r2
    c598:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c59a:	2300      	movs	r3, #0
    c59c:	75fb      	strb	r3, [r7, #23]
    c59e:	e020      	b.n	c5e2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c5a0:	2203      	movs	r2, #3
    c5a2:	68b9      	ldr	r1, [r7, #8]
    c5a4:	68f8      	ldr	r0, [r7, #12]
    c5a6:	4b13      	ldr	r3, [pc, #76]	; (c5f4 <usb_find_str_desc+0x68>)
    c5a8:	4798      	blx	r3
    c5aa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c5ac:	68fb      	ldr	r3, [r7, #12]
    c5ae:	2b00      	cmp	r3, #0
    c5b0:	d015      	beq.n	c5de <usb_find_str_desc+0x52>
			_desc_len_check();
    c5b2:	68f8      	ldr	r0, [r7, #12]
    c5b4:	4b10      	ldr	r3, [pc, #64]	; (c5f8 <usb_find_str_desc+0x6c>)
    c5b6:	4798      	blx	r3
    c5b8:	4603      	mov	r3, r0
    c5ba:	2b01      	cmp	r3, #1
    c5bc:	d801      	bhi.n	c5c2 <usb_find_str_desc+0x36>
    c5be:	2300      	movs	r3, #0
    c5c0:	e014      	b.n	c5ec <usb_find_str_desc+0x60>
			if (i == str_index) {
    c5c2:	7dfa      	ldrb	r2, [r7, #23]
    c5c4:	79fb      	ldrb	r3, [r7, #7]
    c5c6:	429a      	cmp	r2, r3
    c5c8:	d101      	bne.n	c5ce <usb_find_str_desc+0x42>
				return desc;
    c5ca:	68fb      	ldr	r3, [r7, #12]
    c5cc:	e00e      	b.n	c5ec <usb_find_str_desc+0x60>
			}
			i++;
    c5ce:	7dfb      	ldrb	r3, [r7, #23]
    c5d0:	3301      	adds	r3, #1
    c5d2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c5d4:	68f8      	ldr	r0, [r7, #12]
    c5d6:	4b09      	ldr	r3, [pc, #36]	; (c5fc <usb_find_str_desc+0x70>)
    c5d8:	4798      	blx	r3
    c5da:	60f8      	str	r0, [r7, #12]
    c5dc:	e001      	b.n	c5e2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c5de:	2300      	movs	r3, #0
    c5e0:	e004      	b.n	c5ec <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c5e2:	68fa      	ldr	r2, [r7, #12]
    c5e4:	68bb      	ldr	r3, [r7, #8]
    c5e6:	429a      	cmp	r2, r3
    c5e8:	d3da      	bcc.n	c5a0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c5ea:	2300      	movs	r3, #0
}
    c5ec:	4618      	mov	r0, r3
    c5ee:	3718      	adds	r7, #24
    c5f0:	46bd      	mov	sp, r7
    c5f2:	bd80      	pop	{r7, pc}
    c5f4:	0000c455 	.word	0x0000c455
    c5f8:	0000c3bb 	.word	0x0000c3bb
    c5fc:	0000c3ed 	.word	0x0000c3ed

0000c600 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    c600:	b480      	push	{r7}
    c602:	b083      	sub	sp, #12
    c604:	af00      	add	r7, sp, #0
    c606:	6078      	str	r0, [r7, #4]
    c608:	4a05      	ldr	r2, [pc, #20]	; (c620 <_ZN5PrintC1Ev+0x20>)
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	601a      	str	r2, [r3, #0]
    c60e:	687b      	ldr	r3, [r7, #4]
    c610:	2200      	movs	r2, #0
    c612:	605a      	str	r2, [r3, #4]
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	4618      	mov	r0, r3
    c618:	370c      	adds	r7, #12
    c61a:	46bd      	mov	sp, r7
    c61c:	bc80      	pop	{r7}
    c61e:	4770      	bx	lr
    c620:	0000d850 	.word	0x0000d850

0000c624 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    c624:	b480      	push	{r7}
    c626:	b083      	sub	sp, #12
    c628:	af00      	add	r7, sp, #0
    c62a:	6078      	str	r0, [r7, #4]
    c62c:	2300      	movs	r3, #0
    c62e:	4618      	mov	r0, r3
    c630:	370c      	adds	r7, #12
    c632:	46bd      	mov	sp, r7
    c634:	bc80      	pop	{r7}
    c636:	4770      	bx	lr

0000c638 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    c638:	b480      	push	{r7}
    c63a:	b083      	sub	sp, #12
    c63c:	af00      	add	r7, sp, #0
    c63e:	6078      	str	r0, [r7, #4]
    c640:	bf00      	nop
    c642:	370c      	adds	r7, #12
    c644:	46bd      	mov	sp, r7
    c646:	bc80      	pop	{r7}
    c648:	4770      	bx	lr
	...

0000c64c <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    c64c:	b580      	push	{r7, lr}
    c64e:	b082      	sub	sp, #8
    c650:	af00      	add	r7, sp, #0
    c652:	6078      	str	r0, [r7, #4]
    c654:	687b      	ldr	r3, [r7, #4]
    c656:	4618      	mov	r0, r3
    c658:	4b06      	ldr	r3, [pc, #24]	; (c674 <_ZN6StreamC1Ev+0x28>)
    c65a:	4798      	blx	r3
    c65c:	4a06      	ldr	r2, [pc, #24]	; (c678 <_ZN6StreamC1Ev+0x2c>)
    c65e:	687b      	ldr	r3, [r7, #4]
    c660:	601a      	str	r2, [r3, #0]
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c668:	609a      	str	r2, [r3, #8]
    c66a:	687b      	ldr	r3, [r7, #4]
    c66c:	4618      	mov	r0, r3
    c66e:	3708      	adds	r7, #8
    c670:	46bd      	mov	sp, r7
    c672:	bd80      	pop	{r7, pc}
    c674:	0000c601 	.word	0x0000c601
    c678:	0000d814 	.word	0x0000d814

0000c67c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    c67c:	b480      	push	{r7}
    c67e:	b083      	sub	sp, #12
    c680:	af00      	add	r7, sp, #0
    c682:	4603      	mov	r3, r0
    c684:	603a      	str	r2, [r7, #0]
    c686:	71fb      	strb	r3, [r7, #7]
    c688:	460b      	mov	r3, r1
    c68a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    c68c:	4b08      	ldr	r3, [pc, #32]	; (c6b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	2201      	movs	r2, #1
    c692:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    c694:	4b06      	ldr	r3, [pc, #24]	; (c6b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	2201      	movs	r2, #1
    c69a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    c69c:	4b04      	ldr	r3, [pc, #16]	; (c6b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    c69e:	681b      	ldr	r3, [r3, #0]
    c6a0:	2201      	movs	r2, #1
    c6a2:	741a      	strb	r2, [r3, #16]


	return false;
    c6a4:	2300      	movs	r3, #0
}
    c6a6:	4618      	mov	r0, r3
    c6a8:	370c      	adds	r7, #12
    c6aa:	46bd      	mov	sp, r7
    c6ac:	bc80      	pop	{r7}
    c6ae:	4770      	bx	lr
    c6b0:	20000b74 	.word	0x20000b74

0000c6b4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    c6b4:	b480      	push	{r7}
    c6b6:	b083      	sub	sp, #12
    c6b8:	af00      	add	r7, sp, #0
    c6ba:	4603      	mov	r3, r0
    c6bc:	603a      	str	r2, [r7, #0]
    c6be:	71fb      	strb	r3, [r7, #7]
    c6c0:	460b      	mov	r3, r1
    c6c2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    c6c4:	4b08      	ldr	r3, [pc, #32]	; (c6e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    c6c6:	681b      	ldr	r3, [r3, #0]
    c6c8:	2201      	movs	r2, #1
    c6ca:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    c6cc:	4b06      	ldr	r3, [pc, #24]	; (c6e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	2201      	movs	r2, #1
    c6d2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    c6d4:	4b04      	ldr	r3, [pc, #16]	; (c6e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	2201      	movs	r2, #1
    c6da:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    c6dc:	2300      	movs	r3, #0
}
    c6de:	4618      	mov	r0, r3
    c6e0:	370c      	adds	r7, #12
    c6e2:	46bd      	mov	sp, r7
    c6e4:	bc80      	pop	{r7}
    c6e6:	4770      	bx	lr
    c6e8:	20000b74 	.word	0x20000b74

0000c6ec <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    c6ec:	b580      	push	{r7, lr}
    c6ee:	b082      	sub	sp, #8
    c6f0:	af00      	add	r7, sp, #0
    c6f2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    c6f4:	793b      	ldrb	r3, [r7, #4]
    c6f6:	f003 0301 	and.w	r3, r3, #1
    c6fa:	b2db      	uxtb	r3, r3
    c6fc:	2b00      	cmp	r3, #0
    c6fe:	d013      	beq.n	c728 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    c700:	490c      	ldr	r1, [pc, #48]	; (c734 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    c702:	2000      	movs	r0, #0
    c704:	4b0c      	ldr	r3, [pc, #48]	; (c738 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    c706:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    c708:	490c      	ldr	r1, [pc, #48]	; (c73c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    c70a:	2001      	movs	r0, #1
    c70c:	4b0a      	ldr	r3, [pc, #40]	; (c738 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    c70e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    c710:	4b0b      	ldr	r3, [pc, #44]	; (c740 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	2201      	movs	r2, #1
    c716:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    c718:	4b09      	ldr	r3, [pc, #36]	; (c740 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    c71a:	681b      	ldr	r3, [r3, #0]
    c71c:	2201      	movs	r2, #1
    c71e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    c720:	4b07      	ldr	r3, [pc, #28]	; (c740 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    c722:	681b      	ldr	r3, [r3, #0]
    c724:	2201      	movs	r2, #1
    c726:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    c728:	2300      	movs	r3, #0
}
    c72a:	4618      	mov	r0, r3
    c72c:	3708      	adds	r7, #8
    c72e:	46bd      	mov	sp, r7
    c730:	bd80      	pop	{r7, pc}
    c732:	bf00      	nop
    c734:	0000c67d 	.word	0x0000c67d
    c738:	0000b5c9 	.word	0x0000b5c9
    c73c:	0000c6b5 	.word	0x0000c6b5
    c740:	20000b74 	.word	0x20000b74

0000c744 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    c744:	b580      	push	{r7, lr}
    c746:	b082      	sub	sp, #8
    c748:	af00      	add	r7, sp, #0
    c74a:	6078      	str	r0, [r7, #4]
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	4618      	mov	r0, r3
    c750:	4b0a      	ldr	r3, [pc, #40]	; (c77c <_ZN9CDC_ClassC1Ev+0x38>)
    c752:	4798      	blx	r3
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	3310      	adds	r3, #16
    c758:	4618      	mov	r0, r3
    c75a:	4b09      	ldr	r3, [pc, #36]	; (c780 <_ZN9CDC_ClassC1Ev+0x3c>)
    c75c:	4798      	blx	r3
    c75e:	4a09      	ldr	r2, [pc, #36]	; (c784 <_ZN9CDC_ClassC1Ev+0x40>)
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	f04f 32ff 	mov.w	r2, #4294967295
    c76a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    c76c:	4a06      	ldr	r2, [pc, #24]	; (c788 <_ZN9CDC_ClassC1Ev+0x44>)
    c76e:	687b      	ldr	r3, [r7, #4]
    c770:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	4618      	mov	r0, r3
    c776:	3708      	adds	r7, #8
    c778:	46bd      	mov	sp, r7
    c77a:	bd80      	pop	{r7, pc}
    c77c:	0000c64d 	.word	0x0000c64d
    c780:	0000cc91 	.word	0x0000cc91
    c784:	0000d7e4 	.word	0x0000d7e4
    c788:	20000b74 	.word	0x20000b74

0000c78c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    c78c:	b580      	push	{r7, lr}
    c78e:	b082      	sub	sp, #8
    c790:	af00      	add	r7, sp, #0
    c792:	6078      	str	r0, [r7, #4]
    c794:	4a06      	ldr	r2, [pc, #24]	; (c7b0 <_ZN9CDC_ClassD1Ev+0x24>)
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	601a      	str	r2, [r3, #0]
    c79a:	687b      	ldr	r3, [r7, #4]
    c79c:	3310      	adds	r3, #16
    c79e:	4618      	mov	r0, r3
    c7a0:	4b04      	ldr	r3, [pc, #16]	; (c7b4 <_ZN9CDC_ClassD1Ev+0x28>)
    c7a2:	4798      	blx	r3
{
} //~CDC_Class
    c7a4:	687b      	ldr	r3, [r7, #4]
    c7a6:	4618      	mov	r0, r3
    c7a8:	3708      	adds	r7, #8
    c7aa:	46bd      	mov	sp, r7
    c7ac:	bd80      	pop	{r7, pc}
    c7ae:	bf00      	nop
    c7b0:	0000d7e4 	.word	0x0000d7e4
    c7b4:	0000ccb1 	.word	0x0000ccb1

0000c7b8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    c7b8:	b580      	push	{r7, lr}
    c7ba:	b082      	sub	sp, #8
    c7bc:	af00      	add	r7, sp, #0
    c7be:	6078      	str	r0, [r7, #4]
	
	OnInit();
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	3310      	adds	r3, #16
    c7c4:	4618      	mov	r0, r3
    c7c6:	4b06      	ldr	r3, [pc, #24]	; (c7e0 <_ZN9CDC_Class4InitEv+0x28>)
    c7c8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    c7ca:	4906      	ldr	r1, [pc, #24]	; (c7e4 <_ZN9CDC_Class4InitEv+0x2c>)
    c7cc:	2003      	movs	r0, #3
    c7ce:	4b06      	ldr	r3, [pc, #24]	; (c7e8 <_ZN9CDC_Class4InitEv+0x30>)
    c7d0:	4798      	blx	r3
	
		
	if (plugged)
    c7d2:	687b      	ldr	r3, [r7, #4]
    c7d4:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
    c7d6:	bf00      	nop
    c7d8:	3708      	adds	r7, #8
    c7da:	46bd      	mov	sp, r7
    c7dc:	bd80      	pop	{r7, pc}
    c7de:	bf00      	nop
    c7e0:	0000ccc5 	.word	0x0000ccc5
    c7e4:	0000c6ed 	.word	0x0000c6ed
    c7e8:	0000b5c9 	.word	0x0000b5c9

0000c7ec <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    c7ec:	b580      	push	{r7, lr}
    c7ee:	b082      	sub	sp, #8
    c7f0:	af00      	add	r7, sp, #0
    c7f2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    c7f4:	4b03      	ldr	r3, [pc, #12]	; (c804 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    c7f6:	4798      	blx	r3
    c7f8:	4603      	mov	r3, r0
	
}
    c7fa:	4618      	mov	r0, r3
    c7fc:	3708      	adds	r7, #8
    c7fe:	46bd      	mov	sp, r7
    c800:	bd80      	pop	{r7, pc}
    c802:	bf00      	nop
    c804:	0000b641 	.word	0x0000b641

0000c808 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    c808:	b580      	push	{r7, lr}
    c80a:	b084      	sub	sp, #16
    c80c:	af00      	add	r7, sp, #0
    c80e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    c810:	687b      	ldr	r3, [r7, #4]
    c812:	699b      	ldr	r3, [r3, #24]
    c814:	f1b3 3fff 	cmp.w	r3, #4294967295
    c818:	bf14      	ite	ne
    c81a:	2301      	movne	r3, #1
    c81c:	2300      	moveq	r3, #0
    c81e:	b2db      	uxtb	r3, r3
    c820:	2b00      	cmp	r3, #0
    c822:	d002      	beq.n	c82a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    c824:	687b      	ldr	r3, [r7, #4]
    c826:	699b      	ldr	r3, [r3, #24]
    c828:	e011      	b.n	c84e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    c82a:	687b      	ldr	r3, [r7, #4]
    c82c:	681b      	ldr	r3, [r3, #0]
    c82e:	331c      	adds	r3, #28
    c830:	681b      	ldr	r3, [r3, #0]
    c832:	f107 010f 	add.w	r1, r7, #15
    c836:	2201      	movs	r2, #1
    c838:	6878      	ldr	r0, [r7, #4]
    c83a:	4798      	blx	r3
    c83c:	4602      	mov	r2, r0
    c83e:	687b      	ldr	r3, [r7, #4]
    c840:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    c842:	7bfb      	ldrb	r3, [r7, #15]
    c844:	461a      	mov	r2, r3
    c846:	687b      	ldr	r3, [r7, #4]
    c848:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    c84a:	687b      	ldr	r3, [r7, #4]
    c84c:	699b      	ldr	r3, [r3, #24]
}
    c84e:	4618      	mov	r0, r3
    c850:	3710      	adds	r7, #16
    c852:	46bd      	mov	sp, r7
    c854:	bd80      	pop	{r7, pc}
	...

0000c858 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    c858:	b580      	push	{r7, lr}
    c85a:	b086      	sub	sp, #24
    c85c:	af00      	add	r7, sp, #0
    c85e:	60f8      	str	r0, [r7, #12]
    c860:	60b9      	str	r1, [r7, #8]
    c862:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    c864:	68fb      	ldr	r3, [r7, #12]
    c866:	2200      	movs	r2, #0
    c868:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    c86a:	687b      	ldr	r3, [r7, #4]
    c86c:	4619      	mov	r1, r3
    c86e:	68b8      	ldr	r0, [r7, #8]
    c870:	4b08      	ldr	r3, [pc, #32]	; (c894 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    c872:	4798      	blx	r3
    c874:	4603      	mov	r3, r0
    c876:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    c878:	68fb      	ldr	r3, [r7, #12]
    c87a:	7d5b      	ldrb	r3, [r3, #21]
    c87c:	b2db      	uxtb	r3, r3
    c87e:	f083 0301 	eor.w	r3, r3, #1
    c882:	b2db      	uxtb	r3, r3
    c884:	2b00      	cmp	r3, #0
    c886:	d000      	beq.n	c88a <_ZN9CDC_Class8readDataEPvl+0x32>
    c888:	e7f6      	b.n	c878 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    c88a:	7dfb      	ldrb	r3, [r7, #23]
}
    c88c:	4618      	mov	r0, r3
    c88e:	3718      	adds	r7, #24
    c890:	46bd      	mov	sp, r7
    c892:	bd80      	pop	{r7, pc}
    c894:	0000b51d 	.word	0x0000b51d

0000c898 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    c898:	b580      	push	{r7, lr}
    c89a:	b084      	sub	sp, #16
    c89c:	af00      	add	r7, sp, #0
    c89e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	2200      	movs	r2, #0
    c8a4:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    c8a6:	f107 030f 	add.w	r3, r7, #15
    c8aa:	2101      	movs	r1, #1
    c8ac:	4618      	mov	r0, r3
    c8ae:	4b08      	ldr	r3, [pc, #32]	; (c8d0 <_ZN9CDC_Class4readEv+0x38>)
    c8b0:	4798      	blx	r3
	while(!rxReady);
    c8b2:	687b      	ldr	r3, [r7, #4]
    c8b4:	7d5b      	ldrb	r3, [r3, #21]
    c8b6:	b2db      	uxtb	r3, r3
    c8b8:	f083 0301 	eor.w	r3, r3, #1
    c8bc:	b2db      	uxtb	r3, r3
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d000      	beq.n	c8c4 <_ZN9CDC_Class4readEv+0x2c>
    c8c2:	e7f6      	b.n	c8b2 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    c8c4:	7bfb      	ldrb	r3, [r7, #15]
}
    c8c6:	4618      	mov	r0, r3
    c8c8:	3710      	adds	r7, #16
    c8ca:	46bd      	mov	sp, r7
    c8cc:	bd80      	pop	{r7, pc}
    c8ce:	bf00      	nop
    c8d0:	0000b51d 	.word	0x0000b51d

0000c8d4 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    c8d4:	b580      	push	{r7, lr}
    c8d6:	b082      	sub	sp, #8
    c8d8:	af00      	add	r7, sp, #0
    c8da:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    c8dc:	687b      	ldr	r3, [r7, #4]
    c8de:	331c      	adds	r3, #28
    c8e0:	2140      	movs	r1, #64	; 0x40
    c8e2:	4618      	mov	r0, r3
    c8e4:	4b02      	ldr	r3, [pc, #8]	; (c8f0 <_ZN9CDC_Class5flushEv+0x1c>)
    c8e6:	4798      	blx	r3
}
    c8e8:	bf00      	nop
    c8ea:	3708      	adds	r7, #8
    c8ec:	46bd      	mov	sp, r7
    c8ee:	bd80      	pop	{r7, pc}
    c8f0:	0000b561 	.word	0x0000b561

0000c8f4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    c8f4:	b580      	push	{r7, lr}
    c8f6:	b082      	sub	sp, #8
    c8f8:	af00      	add	r7, sp, #0
    c8fa:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    c8fc:	4b02      	ldr	r3, [pc, #8]	; (c908 <_ZN9CDC_Class5clearEv+0x14>)
    c8fe:	4798      	blx	r3
}
    c900:	bf00      	nop
    c902:	3708      	adds	r7, #8
    c904:	46bd      	mov	sp, r7
    c906:	bd80      	pop	{r7, pc}
    c908:	0000b5a5 	.word	0x0000b5a5

0000c90c <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    c90c:	b580      	push	{r7, lr}
    c90e:	b082      	sub	sp, #8
    c910:	af00      	add	r7, sp, #0
    c912:	6078      	str	r0, [r7, #4]
    c914:	460b      	mov	r3, r1
    c916:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    c918:	687b      	ldr	r3, [r7, #4]
    c91a:	7d1b      	ldrb	r3, [r3, #20]
    c91c:	b2db      	uxtb	r3, r3
    c91e:	f083 0301 	eor.w	r3, r3, #1
    c922:	b2db      	uxtb	r3, r3
    c924:	2b00      	cmp	r3, #0
    c926:	d000      	beq.n	c92a <_ZN9CDC_Class5writeEh+0x1e>
    c928:	e7f6      	b.n	c918 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    c92a:	687b      	ldr	r3, [r7, #4]
    c92c:	681b      	ldr	r3, [r3, #0]
    c92e:	3324      	adds	r3, #36	; 0x24
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	1cf9      	adds	r1, r7, #3
    c934:	2201      	movs	r2, #1
    c936:	6878      	ldr	r0, [r7, #4]
    c938:	4798      	blx	r3
    c93a:	4603      	mov	r3, r0
}
    c93c:	4618      	mov	r0, r3
    c93e:	3708      	adds	r7, #8
    c940:	46bd      	mov	sp, r7
    c942:	bd80      	pop	{r7, pc}

0000c944 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    c944:	b580      	push	{r7, lr}
    c946:	b086      	sub	sp, #24
    c948:	af00      	add	r7, sp, #0
    c94a:	60f8      	str	r0, [r7, #12]
    c94c:	60b9      	str	r1, [r7, #8]
    c94e:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    c950:	68fb      	ldr	r3, [r7, #12]
    c952:	2200      	movs	r2, #0
    c954:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    c956:	68fb      	ldr	r3, [r7, #12]
    c958:	3310      	adds	r3, #16
    c95a:	4618      	mov	r0, r3
    c95c:	4b14      	ldr	r3, [pc, #80]	; (c9b0 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    c95e:	4798      	blx	r3
    c960:	4603      	mov	r3, r0
    c962:	2b00      	cmp	r3, #0
    c964:	d01e      	beq.n	c9a4 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	4619      	mov	r1, r3
    c96a:	68b8      	ldr	r0, [r7, #8]
    c96c:	4b11      	ldr	r3, [pc, #68]	; (c9b4 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    c96e:	4798      	blx	r3
    c970:	4603      	mov	r3, r0
    c972:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    c974:	68fb      	ldr	r3, [r7, #12]
    c976:	7d1b      	ldrb	r3, [r3, #20]
    c978:	b2db      	uxtb	r3, r3
    c97a:	f083 0301 	eor.w	r3, r3, #1
    c97e:	b2db      	uxtb	r3, r3
    c980:	2b00      	cmp	r3, #0
    c982:	d006      	beq.n	c992 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    c984:	68fb      	ldr	r3, [r7, #12]
    c986:	7c5b      	ldrb	r3, [r3, #17]
    c988:	b2db      	uxtb	r3, r3
    c98a:	2b00      	cmp	r3, #0
    c98c:	d001      	beq.n	c992 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    c98e:	2301      	movs	r3, #1
    c990:	e000      	b.n	c994 <_ZN9CDC_Class9writeDataEPKvl+0x50>
    c992:	2300      	movs	r3, #0
    c994:	2b00      	cmp	r3, #0
    c996:	d000      	beq.n	c99a <_ZN9CDC_Class9writeDataEPKvl+0x56>
    c998:	e7ec      	b.n	c974 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
    c99a:	4807      	ldr	r0, [pc, #28]	; (c9b8 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    c99c:	4b07      	ldr	r3, [pc, #28]	; (c9bc <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    c99e:	4798      	blx	r3
		return r;
    c9a0:	697b      	ldr	r3, [r7, #20]
    c9a2:	e000      	b.n	c9a6 <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    c9a4:	2300      	movs	r3, #0
	}
	

}
    c9a6:	4618      	mov	r0, r3
    c9a8:	3718      	adds	r7, #24
    c9aa:	46bd      	mov	sp, r7
    c9ac:	bd80      	pop	{r7, pc}
    c9ae:	bf00      	nop
    c9b0:	0000cd61 	.word	0x0000cd61
    c9b4:	0000b561 	.word	0x0000b561
    c9b8:	20000be0 	.word	0x20000be0
    c9bc:	0000cf21 	.word	0x0000cf21

0000c9c0 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    c9c0:	b580      	push	{r7, lr}
    c9c2:	b086      	sub	sp, #24
    c9c4:	af00      	add	r7, sp, #0
    c9c6:	60f8      	str	r0, [r7, #12]
    c9c8:	60b9      	str	r1, [r7, #8]
    c9ca:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    c9cc:	68fb      	ldr	r3, [r7, #12]
    c9ce:	2200      	movs	r2, #0
    c9d0:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
    c9d2:	68fb      	ldr	r3, [r7, #12]
    c9d4:	3310      	adds	r3, #16
    c9d6:	6879      	ldr	r1, [r7, #4]
    c9d8:	4618      	mov	r0, r3
    c9da:	4b14      	ldr	r3, [pc, #80]	; (ca2c <_ZN9CDC_Class5writeEPKhj+0x6c>)
    c9dc:	4798      	blx	r3
    c9de:	4603      	mov	r3, r0
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d01c      	beq.n	ca1e <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    c9e4:	6879      	ldr	r1, [r7, #4]
    c9e6:	68b8      	ldr	r0, [r7, #8]
    c9e8:	4b11      	ldr	r3, [pc, #68]	; (ca30 <_ZN9CDC_Class5writeEPKhj+0x70>)
    c9ea:	4798      	blx	r3
    c9ec:	4603      	mov	r3, r0
    c9ee:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    c9f0:	68fb      	ldr	r3, [r7, #12]
    c9f2:	7d1b      	ldrb	r3, [r3, #20]
    c9f4:	b2db      	uxtb	r3, r3
    c9f6:	f083 0301 	eor.w	r3, r3, #1
    c9fa:	b2db      	uxtb	r3, r3
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d006      	beq.n	ca0e <_ZN9CDC_Class5writeEPKhj+0x4e>
    ca00:	68fb      	ldr	r3, [r7, #12]
    ca02:	7c5b      	ldrb	r3, [r3, #17]
    ca04:	b2db      	uxtb	r3, r3
    ca06:	2b00      	cmp	r3, #0
    ca08:	d001      	beq.n	ca0e <_ZN9CDC_Class5writeEPKhj+0x4e>
    ca0a:	2301      	movs	r3, #1
    ca0c:	e000      	b.n	ca10 <_ZN9CDC_Class5writeEPKhj+0x50>
    ca0e:	2300      	movs	r3, #0
    ca10:	2b00      	cmp	r3, #0
    ca12:	d000      	beq.n	ca16 <_ZN9CDC_Class5writeEPKhj+0x56>
    ca14:	e7ec      	b.n	c9f0 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
    ca16:	4807      	ldr	r0, [pc, #28]	; (ca34 <_ZN9CDC_Class5writeEPKhj+0x74>)
    ca18:	4b07      	ldr	r3, [pc, #28]	; (ca38 <_ZN9CDC_Class5writeEPKhj+0x78>)
    ca1a:	4798      	blx	r3
    ca1c:	e001      	b.n	ca22 <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
    ca1e:	2300      	movs	r3, #0
    ca20:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    ca22:	697b      	ldr	r3, [r7, #20]
}
    ca24:	4618      	mov	r0, r3
    ca26:	3718      	adds	r7, #24
    ca28:	46bd      	mov	sp, r7
    ca2a:	bd80      	pop	{r7, pc}
    ca2c:	0000cdd9 	.word	0x0000cdd9
    ca30:	0000b561 	.word	0x0000b561
    ca34:	20000be0 	.word	0x20000be0
    ca38:	0000cf21 	.word	0x0000cf21

0000ca3c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    ca3c:	b480      	push	{r7}
    ca3e:	b083      	sub	sp, #12
    ca40:	af00      	add	r7, sp, #0
    ca42:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    ca44:	687b      	ldr	r3, [r7, #4]
    ca46:	7d5b      	ldrb	r3, [r3, #21]
    ca48:	b2db      	uxtb	r3, r3
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d006      	beq.n	ca5c <_ZN9CDC_Class9availableEv+0x20>
    ca4e:	687b      	ldr	r3, [r7, #4]
    ca50:	7d1b      	ldrb	r3, [r3, #20]
    ca52:	b2db      	uxtb	r3, r3
    ca54:	2b00      	cmp	r3, #0
    ca56:	d001      	beq.n	ca5c <_ZN9CDC_Class9availableEv+0x20>
    ca58:	2301      	movs	r3, #1
    ca5a:	e000      	b.n	ca5e <_ZN9CDC_Class9availableEv+0x22>
    ca5c:	2300      	movs	r3, #0
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d001      	beq.n	ca66 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ca62:	2301      	movs	r3, #1
    ca64:	e000      	b.n	ca68 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ca66:	2300      	movs	r3, #0
	}
	
}
    ca68:	4618      	mov	r0, r3
    ca6a:	370c      	adds	r7, #12
    ca6c:	46bd      	mov	sp, r7
    ca6e:	bc80      	pop	{r7}
    ca70:	4770      	bx	lr
	...

0000ca74 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    ca74:	b580      	push	{r7, lr}
    ca76:	b082      	sub	sp, #8
    ca78:	af00      	add	r7, sp, #0
    ca7a:	6078      	str	r0, [r7, #4]
    ca7c:	6039      	str	r1, [r7, #0]
    ca7e:	687b      	ldr	r3, [r7, #4]
    ca80:	2b01      	cmp	r3, #1
    ca82:	d10c      	bne.n	ca9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ca84:	683b      	ldr	r3, [r7, #0]
    ca86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ca8a:	4293      	cmp	r3, r2
    ca8c:	d107      	bne.n	ca9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ca8e:	4806      	ldr	r0, [pc, #24]	; (caa8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ca90:	4b06      	ldr	r3, [pc, #24]	; (caac <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ca92:	4798      	blx	r3
    ca94:	4a06      	ldr	r2, [pc, #24]	; (cab0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ca96:	4907      	ldr	r1, [pc, #28]	; (cab4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ca98:	4803      	ldr	r0, [pc, #12]	; (caa8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ca9a:	4b07      	ldr	r3, [pc, #28]	; (cab8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ca9c:	4798      	blx	r3
    ca9e:	bf00      	nop
    caa0:	3708      	adds	r7, #8
    caa2:	46bd      	mov	sp, r7
    caa4:	bd80      	pop	{r7, pc}
    caa6:	bf00      	nop
    caa8:	20000b78 	.word	0x20000b78
    caac:	0000c745 	.word	0x0000c745
    cab0:	20000000 	.word	0x20000000
    cab4:	0000c78d 	.word	0x0000c78d
    cab8:	0000d071 	.word	0x0000d071

0000cabc <_GLOBAL__sub_I_ptrCDCClass>:
    cabc:	b580      	push	{r7, lr}
    cabe:	af00      	add	r7, sp, #0
    cac0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cac4:	2001      	movs	r0, #1
    cac6:	4b01      	ldr	r3, [pc, #4]	; (cacc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    cac8:	4798      	blx	r3
    caca:	bd80      	pop	{r7, pc}
    cacc:	0000ca75 	.word	0x0000ca75

0000cad0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    cad0:	b580      	push	{r7, lr}
    cad2:	b086      	sub	sp, #24
    cad4:	af00      	add	r7, sp, #0
    cad6:	60f8      	str	r0, [r7, #12]
    cad8:	60b9      	str	r1, [r7, #8]
    cada:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    cadc:	2300      	movs	r3, #0
    cade:	617b      	str	r3, [r7, #20]
  while (size--) {
    cae0:	687b      	ldr	r3, [r7, #4]
    cae2:	1e5a      	subs	r2, r3, #1
    cae4:	607a      	str	r2, [r7, #4]
    cae6:	2b00      	cmp	r3, #0
    cae8:	bf14      	ite	ne
    caea:	2301      	movne	r3, #1
    caec:	2300      	moveq	r3, #0
    caee:	b2db      	uxtb	r3, r3
    caf0:	2b00      	cmp	r3, #0
    caf2:	d016      	beq.n	cb22 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    caf4:	68fb      	ldr	r3, [r7, #12]
    caf6:	681b      	ldr	r3, [r3, #0]
    caf8:	681a      	ldr	r2, [r3, #0]
    cafa:	68bb      	ldr	r3, [r7, #8]
    cafc:	1c59      	adds	r1, r3, #1
    cafe:	60b9      	str	r1, [r7, #8]
    cb00:	781b      	ldrb	r3, [r3, #0]
    cb02:	4619      	mov	r1, r3
    cb04:	68f8      	ldr	r0, [r7, #12]
    cb06:	4790      	blx	r2
    cb08:	4603      	mov	r3, r0
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	bf14      	ite	ne
    cb0e:	2301      	movne	r3, #1
    cb10:	2300      	moveq	r3, #0
    cb12:	b2db      	uxtb	r3, r3
    cb14:	2b00      	cmp	r3, #0
    cb16:	d003      	beq.n	cb20 <_ZN5Print5writeEPKhj+0x50>
    cb18:	697b      	ldr	r3, [r7, #20]
    cb1a:	3301      	adds	r3, #1
    cb1c:	617b      	str	r3, [r7, #20]
  while (size--) {
    cb1e:	e7df      	b.n	cae0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    cb20:	bf00      	nop
  }
  return n;
    cb22:	697b      	ldr	r3, [r7, #20]
}
    cb24:	4618      	mov	r0, r3
    cb26:	3718      	adds	r7, #24
    cb28:	46bd      	mov	sp, r7
    cb2a:	bd80      	pop	{r7, pc}

0000cb2c <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
    cb2c:	b580      	push	{r7, lr}
    cb2e:	b082      	sub	sp, #8
    cb30:	af00      	add	r7, sp, #0
    cb32:	6078      	str	r0, [r7, #4]
    cb34:	460b      	mov	r3, r1
    cb36:	70fb      	strb	r3, [r7, #3]
  return write(c);
    cb38:	687b      	ldr	r3, [r7, #4]
    cb3a:	681b      	ldr	r3, [r3, #0]
    cb3c:	681b      	ldr	r3, [r3, #0]
    cb3e:	78fa      	ldrb	r2, [r7, #3]
    cb40:	4611      	mov	r1, r2
    cb42:	6878      	ldr	r0, [r7, #4]
    cb44:	4798      	blx	r3
    cb46:	4603      	mov	r3, r0
}
    cb48:	4618      	mov	r0, r3
    cb4a:	3708      	adds	r7, #8
    cb4c:	46bd      	mov	sp, r7
    cb4e:	bd80      	pop	{r7, pc}

0000cb50 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    cb50:	b480      	push	{r7}
    cb52:	b083      	sub	sp, #12
    cb54:	af00      	add	r7, sp, #0
    cb56:	6078      	str	r0, [r7, #4]
    cb58:	460b      	mov	r3, r1
    cb5a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    cb5c:	78fb      	ldrb	r3, [r7, #3]
    cb5e:	687a      	ldr	r2, [r7, #4]
    cb60:	01db      	lsls	r3, r3, #7
    cb62:	4413      	add	r3, r2
    cb64:	681b      	ldr	r3, [r3, #0]
}
    cb66:	4618      	mov	r0, r3
    cb68:	370c      	adds	r7, #12
    cb6a:	46bd      	mov	sp, r7
    cb6c:	bc80      	pop	{r7}
    cb6e:	4770      	bx	lr

0000cb70 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    cb70:	b480      	push	{r7}
    cb72:	b083      	sub	sp, #12
    cb74:	af00      	add	r7, sp, #0
    cb76:	6078      	str	r0, [r7, #4]
    cb78:	460b      	mov	r3, r1
    cb7a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    cb7c:	78fb      	ldrb	r3, [r7, #3]
    cb7e:	687a      	ldr	r2, [r7, #4]
    cb80:	01db      	lsls	r3, r3, #7
    cb82:	4413      	add	r3, r2
    cb84:	3310      	adds	r3, #16
    cb86:	681b      	ldr	r3, [r3, #0]
}
    cb88:	4618      	mov	r0, r3
    cb8a:	370c      	adds	r7, #12
    cb8c:	46bd      	mov	sp, r7
    cb8e:	bc80      	pop	{r7}
    cb90:	4770      	bx	lr

0000cb92 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    cb92:	b480      	push	{r7}
    cb94:	b083      	sub	sp, #12
    cb96:	af00      	add	r7, sp, #0
    cb98:	6078      	str	r0, [r7, #4]
    cb9a:	460b      	mov	r3, r1
    cb9c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    cb9e:	78fb      	ldrb	r3, [r7, #3]
    cba0:	687a      	ldr	r2, [r7, #4]
    cba2:	01db      	lsls	r3, r3, #7
    cba4:	4413      	add	r3, r2
    cba6:	3320      	adds	r3, #32
    cba8:	681b      	ldr	r3, [r3, #0]
}
    cbaa:	4618      	mov	r0, r3
    cbac:	370c      	adds	r7, #12
    cbae:	46bd      	mov	sp, r7
    cbb0:	bc80      	pop	{r7}
    cbb2:	4770      	bx	lr

0000cbb4 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b086      	sub	sp, #24
    cbb8:	af00      	add	r7, sp, #0
    cbba:	4603      	mov	r3, r0
    cbbc:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    cbbe:	f107 030c 	add.w	r3, r7, #12
    cbc2:	4618      	mov	r0, r3
    cbc4:	4b13      	ldr	r3, [pc, #76]	; (cc14 <_gpio_get_level+0x60>)
    cbc6:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    cbc8:	79fb      	ldrb	r3, [r7, #7]
    cbca:	4619      	mov	r1, r3
    cbcc:	4812      	ldr	r0, [pc, #72]	; (cc18 <_gpio_get_level+0x64>)
    cbce:	4b13      	ldr	r3, [pc, #76]	; (cc1c <_gpio_get_level+0x68>)
    cbd0:	4798      	blx	r3
    cbd2:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    cbd4:	79fb      	ldrb	r3, [r7, #7]
    cbd6:	4619      	mov	r1, r3
    cbd8:	480f      	ldr	r0, [pc, #60]	; (cc18 <_gpio_get_level+0x64>)
    cbda:	4b11      	ldr	r3, [pc, #68]	; (cc20 <_gpio_get_level+0x6c>)
    cbdc:	4798      	blx	r3
    cbde:	4602      	mov	r2, r0
    cbe0:	697b      	ldr	r3, [r7, #20]
    cbe2:	43db      	mvns	r3, r3
    cbe4:	4013      	ands	r3, r2
    cbe6:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    cbe8:	79fb      	ldrb	r3, [r7, #7]
    cbea:	4619      	mov	r1, r3
    cbec:	480a      	ldr	r0, [pc, #40]	; (cc18 <_gpio_get_level+0x64>)
    cbee:	4b0d      	ldr	r3, [pc, #52]	; (cc24 <_gpio_get_level+0x70>)
    cbf0:	4798      	blx	r3
    cbf2:	4602      	mov	r2, r0
    cbf4:	697b      	ldr	r3, [r7, #20]
    cbf6:	4013      	ands	r3, r2
    cbf8:	693a      	ldr	r2, [r7, #16]
    cbfa:	4313      	orrs	r3, r2
    cbfc:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    cbfe:	f107 030c 	add.w	r3, r7, #12
    cc02:	4618      	mov	r0, r3
    cc04:	4b08      	ldr	r3, [pc, #32]	; (cc28 <_gpio_get_level+0x74>)
    cc06:	4798      	blx	r3

	return tmp;
    cc08:	693b      	ldr	r3, [r7, #16]
}
    cc0a:	4618      	mov	r0, r3
    cc0c:	3718      	adds	r7, #24
    cc0e:	46bd      	mov	sp, r7
    cc10:	bd80      	pop	{r7, pc}
    cc12:	bf00      	nop
    cc14:	0000a73d 	.word	0x0000a73d
    cc18:	41008000 	.word	0x41008000
    cc1c:	0000cb51 	.word	0x0000cb51
    cc20:	0000cb93 	.word	0x0000cb93
    cc24:	0000cb71 	.word	0x0000cb71
    cc28:	0000a763 	.word	0x0000a763

0000cc2c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b082      	sub	sp, #8
    cc30:	af00      	add	r7, sp, #0
    cc32:	4603      	mov	r3, r0
    cc34:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    cc36:	79fb      	ldrb	r3, [r7, #7]
    cc38:	115b      	asrs	r3, r3, #5
    cc3a:	b2db      	uxtb	r3, r3
    cc3c:	4618      	mov	r0, r3
    cc3e:	4b09      	ldr	r3, [pc, #36]	; (cc64 <gpio_get_pin_level+0x38>)
    cc40:	4798      	blx	r3
    cc42:	4601      	mov	r1, r0
    cc44:	79fb      	ldrb	r3, [r7, #7]
    cc46:	f003 031f 	and.w	r3, r3, #31
    cc4a:	2201      	movs	r2, #1
    cc4c:	fa02 f303 	lsl.w	r3, r2, r3
    cc50:	400b      	ands	r3, r1
    cc52:	2b00      	cmp	r3, #0
    cc54:	bf14      	ite	ne
    cc56:	2301      	movne	r3, #1
    cc58:	2300      	moveq	r3, #0
    cc5a:	b2db      	uxtb	r3, r3
}
    cc5c:	4618      	mov	r0, r3
    cc5e:	3708      	adds	r7, #8
    cc60:	46bd      	mov	sp, r7
    cc62:	bd80      	pop	{r7, pc}
    cc64:	0000cbb5 	.word	0x0000cbb5

0000cc68 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    cc68:	b480      	push	{r7}
    cc6a:	b083      	sub	sp, #12
    cc6c:	af00      	add	r7, sp, #0
    cc6e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    cc70:	4b06      	ldr	r3, [pc, #24]	; (cc8c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    cc72:	681b      	ldr	r3, [r3, #0]
    cc74:	2201      	movs	r2, #1
    cc76:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    cc78:	4b04      	ldr	r3, [pc, #16]	; (cc8c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    cc7a:	681b      	ldr	r3, [r3, #0]
    cc7c:	2200      	movs	r2, #0
    cc7e:	705a      	strb	r2, [r3, #1]
}
    cc80:	bf00      	nop
    cc82:	370c      	adds	r7, #12
    cc84:	46bd      	mov	sp, r7
    cc86:	bc80      	pop	{r7}
    cc88:	4770      	bx	lr
    cc8a:	bf00      	nop
    cc8c:	20000bd8 	.word	0x20000bd8

0000cc90 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    cc90:	b480      	push	{r7}
    cc92:	b083      	sub	sp, #12
    cc94:	af00      	add	r7, sp, #0
    cc96:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    cc98:	4a04      	ldr	r2, [pc, #16]	; (ccac <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    cc9a:	687b      	ldr	r3, [r7, #4]
    cc9c:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    cc9e:	687b      	ldr	r3, [r7, #4]
    cca0:	4618      	mov	r0, r3
    cca2:	370c      	adds	r7, #12
    cca4:	46bd      	mov	sp, r7
    cca6:	bc80      	pop	{r7}
    cca8:	4770      	bx	lr
    ccaa:	bf00      	nop
    ccac:	20000bd8 	.word	0x20000bd8

0000ccb0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ccb0:	b480      	push	{r7}
    ccb2:	b083      	sub	sp, #12
    ccb4:	af00      	add	r7, sp, #0
    ccb6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ccb8:	687b      	ldr	r3, [r7, #4]
    ccba:	4618      	mov	r0, r3
    ccbc:	370c      	adds	r7, #12
    ccbe:	46bd      	mov	sp, r7
    ccc0:	bc80      	pop	{r7}
    ccc2:	4770      	bx	lr

0000ccc4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    ccc4:	b580      	push	{r7, lr}
    ccc6:	b082      	sub	sp, #8
    ccc8:	af00      	add	r7, sp, #0
    ccca:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    cccc:	2040      	movs	r0, #64	; 0x40
    ccce:	4b1c      	ldr	r3, [pc, #112]	; (cd40 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    ccd0:	4798      	blx	r3
    ccd2:	4603      	mov	r3, r0
    ccd4:	461a      	mov	r2, r3
    ccd6:	687b      	ldr	r3, [r7, #4]
    ccd8:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	78db      	ldrb	r3, [r3, #3]
    ccde:	2b00      	cmp	r3, #0
    cce0:	d024      	beq.n	cd2c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    cce2:	687b      	ldr	r3, [r7, #4]
    cce4:	2200      	movs	r2, #0
    cce6:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    cce8:	687b      	ldr	r3, [r7, #4]
    ccea:	2201      	movs	r2, #1
    ccec:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ccee:	f44f 7216 	mov.w	r2, #600	; 0x258
    ccf2:	4914      	ldr	r1, [pc, #80]	; (cd44 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    ccf4:	4814      	ldr	r0, [pc, #80]	; (cd48 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ccf6:	4b15      	ldr	r3, [pc, #84]	; (cd4c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    ccf8:	4798      	blx	r3
			usbTimer.Start();
    ccfa:	4813      	ldr	r0, [pc, #76]	; (cd48 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ccfc:	4b14      	ldr	r3, [pc, #80]	; (cd50 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ccfe:	4798      	blx	r3
			while (!usb.IsEnabled()){
    cd00:	4814      	ldr	r0, [pc, #80]	; (cd54 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    cd02:	4b15      	ldr	r3, [pc, #84]	; (cd58 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    cd04:	4798      	blx	r3
    cd06:	4603      	mov	r3, r0
    cd08:	f083 0301 	eor.w	r3, r3, #1
    cd0c:	b2db      	uxtb	r3, r3
    cd0e:	2b00      	cmp	r3, #0
    cd10:	d008      	beq.n	cd24 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    cd12:	687b      	ldr	r3, [r7, #4]
    cd14:	789b      	ldrb	r3, [r3, #2]
    cd16:	b2db      	uxtb	r3, r3
    cd18:	2b00      	cmp	r3, #0
    cd1a:	d0f1      	beq.n	cd00 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    cd1c:	687b      	ldr	r3, [r7, #4]
    cd1e:	2200      	movs	r2, #0
    cd20:	701a      	strb	r2, [r3, #0]
					return;
    cd22:	e009      	b.n	cd38 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
    cd24:	4808      	ldr	r0, [pc, #32]	; (cd48 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    cd26:	4b0d      	ldr	r3, [pc, #52]	; (cd5c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    cd28:	4798      	blx	r3
    cd2a:	e005      	b.n	cd38 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    cd2c:	687b      	ldr	r3, [r7, #4]
    cd2e:	2200      	movs	r2, #0
    cd30:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    cd32:	687b      	ldr	r3, [r7, #4]
    cd34:	2200      	movs	r2, #0
    cd36:	705a      	strb	r2, [r3, #1]
		}
		
}
    cd38:	3708      	adds	r7, #8
    cd3a:	46bd      	mov	sp, r7
    cd3c:	bd80      	pop	{r7, pc}
    cd3e:	bf00      	nop
    cd40:	0000cc2d 	.word	0x0000cc2d
    cd44:	0000cc69 	.word	0x0000cc69
    cd48:	20000be0 	.word	0x20000be0
    cd4c:	0000cfa5 	.word	0x0000cfa5
    cd50:	0000cefd 	.word	0x0000cefd
    cd54:	20000b78 	.word	0x20000b78
    cd58:	0000c7ed 	.word	0x0000c7ed
    cd5c:	0000cf21 	.word	0x0000cf21

0000cd60 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    cd60:	b580      	push	{r7, lr}
    cd62:	b082      	sub	sp, #8
    cd64:	af00      	add	r7, sp, #0
    cd66:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    cd68:	687b      	ldr	r3, [r7, #4]
    cd6a:	785b      	ldrb	r3, [r3, #1]
    cd6c:	b2db      	uxtb	r3, r3
    cd6e:	2b00      	cmp	r3, #0
    cd70:	d01f      	beq.n	cdb2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    cd72:	687b      	ldr	r3, [r7, #4]
    cd74:	781b      	ldrb	r3, [r3, #0]
    cd76:	b2db      	uxtb	r3, r3
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d105      	bne.n	cd88 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    cd7c:	4812      	ldr	r0, [pc, #72]	; (cdc8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    cd7e:	4b13      	ldr	r3, [pc, #76]	; (cdcc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    cd80:	4798      	blx	r3
    cd82:	4603      	mov	r3, r0
    cd84:	2b00      	cmp	r3, #0
    cd86:	d001      	beq.n	cd8c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    cd88:	2301      	movs	r3, #1
    cd8a:	e000      	b.n	cd8e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    cd8c:	2300      	movs	r3, #0
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d00b      	beq.n	cdaa <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
    cd92:	480f      	ldr	r0, [pc, #60]	; (cdd0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    cd94:	4b0f      	ldr	r3, [pc, #60]	; (cdd4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    cd96:	4798      	blx	r3
    cd98:	4603      	mov	r3, r0
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	bf0c      	ite	eq
    cd9e:	2301      	moveq	r3, #1
    cda0:	2300      	movne	r3, #0
    cda2:	b2da      	uxtb	r2, r3
    cda4:	687b      	ldr	r3, [r7, #4]
    cda6:	705a      	strb	r2, [r3, #1]
    cda8:	e007      	b.n	cdba <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    cdaa:	687b      	ldr	r3, [r7, #4]
    cdac:	2200      	movs	r2, #0
    cdae:	705a      	strb	r2, [r3, #1]
    cdb0:	e003      	b.n	cdba <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    cdb2:	687b      	ldr	r3, [r7, #4]
    cdb4:	785b      	ldrb	r3, [r3, #1]
    cdb6:	b2db      	uxtb	r3, r3
    cdb8:	e002      	b.n	cdc0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    cdba:	687b      	ldr	r3, [r7, #4]
    cdbc:	785b      	ldrb	r3, [r3, #1]
    cdbe:	b2db      	uxtb	r3, r3
}
    cdc0:	4618      	mov	r0, r3
    cdc2:	3708      	adds	r7, #8
    cdc4:	46bd      	mov	sp, r7
    cdc6:	bd80      	pop	{r7, pc}
    cdc8:	20000b78 	.word	0x20000b78
    cdcc:	0000c7ed 	.word	0x0000c7ed
    cdd0:	20000be0 	.word	0x20000be0
    cdd4:	0000cefd 	.word	0x0000cefd

0000cdd8 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    cdd8:	b580      	push	{r7, lr}
    cdda:	b082      	sub	sp, #8
    cddc:	af00      	add	r7, sp, #0
    cdde:	6078      	str	r0, [r7, #4]
    cde0:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
    cde2:	687b      	ldr	r3, [r7, #4]
    cde4:	785b      	ldrb	r3, [r3, #1]
    cde6:	b2db      	uxtb	r3, r3
    cde8:	2b00      	cmp	r3, #0
    cdea:	d02f      	beq.n	ce4c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
    cdec:	687b      	ldr	r3, [r7, #4]
    cdee:	781b      	ldrb	r3, [r3, #0]
    cdf0:	b2db      	uxtb	r3, r3
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d105      	bne.n	ce02 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
    cdf6:	481b      	ldr	r0, [pc, #108]	; (ce64 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
    cdf8:	4b1b      	ldr	r3, [pc, #108]	; (ce68 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
    cdfa:	4798      	blx	r3
    cdfc:	4603      	mov	r3, r0
    cdfe:	2b00      	cmp	r3, #0
    ce00:	d001      	beq.n	ce06 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
    ce02:	2301      	movs	r3, #1
    ce04:	e000      	b.n	ce08 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
    ce06:	2300      	movs	r3, #0
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d01b      	beq.n	ce44 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
    ce0c:	4817      	ldr	r0, [pc, #92]	; (ce6c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    ce0e:	4b18      	ldr	r3, [pc, #96]	; (ce70 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
    ce10:	4798      	blx	r3
			usbTimer.Remove_task();
    ce12:	4816      	ldr	r0, [pc, #88]	; (ce6c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    ce14:	4b17      	ldr	r3, [pc, #92]	; (ce74 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
    ce16:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    ce18:	683a      	ldr	r2, [r7, #0]
    ce1a:	4613      	mov	r3, r2
    ce1c:	009b      	lsls	r3, r3, #2
    ce1e:	4413      	add	r3, r2
    ce20:	005b      	lsls	r3, r3, #1
    ce22:	461a      	mov	r2, r3
    ce24:	4914      	ldr	r1, [pc, #80]	; (ce78 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
    ce26:	4811      	ldr	r0, [pc, #68]	; (ce6c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    ce28:	4b14      	ldr	r3, [pc, #80]	; (ce7c <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
    ce2a:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    ce2c:	480f      	ldr	r0, [pc, #60]	; (ce6c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    ce2e:	4b14      	ldr	r3, [pc, #80]	; (ce80 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
    ce30:	4798      	blx	r3
    ce32:	4603      	mov	r3, r0
    ce34:	2b00      	cmp	r3, #0
    ce36:	bf0c      	ite	eq
    ce38:	2301      	moveq	r3, #1
    ce3a:	2300      	movne	r3, #0
    ce3c:	b2da      	uxtb	r2, r3
    ce3e:	687b      	ldr	r3, [r7, #4]
    ce40:	705a      	strb	r2, [r3, #1]
    ce42:	e007      	b.n	ce54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
    ce44:	687b      	ldr	r3, [r7, #4]
    ce46:	2200      	movs	r2, #0
    ce48:	705a      	strb	r2, [r3, #1]
    ce4a:	e003      	b.n	ce54 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
    ce4c:	687b      	ldr	r3, [r7, #4]
    ce4e:	785b      	ldrb	r3, [r3, #1]
    ce50:	b2db      	uxtb	r3, r3
    ce52:	e002      	b.n	ce5a <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
    ce54:	687b      	ldr	r3, [r7, #4]
    ce56:	785b      	ldrb	r3, [r3, #1]
    ce58:	b2db      	uxtb	r3, r3
    ce5a:	4618      	mov	r0, r3
    ce5c:	3708      	adds	r7, #8
    ce5e:	46bd      	mov	sp, r7
    ce60:	bd80      	pop	{r7, pc}
    ce62:	bf00      	nop
    ce64:	20000b78 	.word	0x20000b78
    ce68:	0000c7ed 	.word	0x0000c7ed
    ce6c:	20000be0 	.word	0x20000be0
    ce70:	0000cf21 	.word	0x0000cf21
    ce74:	0000cfcd 	.word	0x0000cfcd
    ce78:	0000cc69 	.word	0x0000cc69
    ce7c:	0000cfa5 	.word	0x0000cfa5
    ce80:	0000cefd 	.word	0x0000cefd

0000ce84 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    ce84:	b580      	push	{r7, lr}
    ce86:	b082      	sub	sp, #8
    ce88:	af00      	add	r7, sp, #0
    ce8a:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    ce8c:	4b04      	ldr	r3, [pc, #16]	; (cea0 <_ZL7task_cbPK10timer_task+0x1c>)
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	4618      	mov	r0, r3
    ce92:	4b04      	ldr	r3, [pc, #16]	; (cea4 <_ZL7task_cbPK10timer_task+0x20>)
    ce94:	4798      	blx	r3
}
    ce96:	bf00      	nop
    ce98:	3708      	adds	r7, #8
    ce9a:	46bd      	mov	sp, r7
    ce9c:	bd80      	pop	{r7, pc}
    ce9e:	bf00      	nop
    cea0:	20000bdc 	.word	0x20000bdc
    cea4:	0000cf49 	.word	0x0000cf49

0000cea8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    cea8:	b480      	push	{r7}
    ceaa:	b083      	sub	sp, #12
    ceac:	af00      	add	r7, sp, #0
    ceae:	6078      	str	r0, [r7, #4]
    ceb0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    ceb2:	687b      	ldr	r3, [r7, #4]
    ceb4:	683a      	ldr	r2, [r7, #0]
    ceb6:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
    ceb8:	4a07      	ldr	r2, [pc, #28]	; (ced8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
    ceba:	687b      	ldr	r3, [r7, #4]
    cebc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cec4:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    cec6:	687b      	ldr	r3, [r7, #4]
    cec8:	4a04      	ldr	r2, [pc, #16]	; (cedc <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    ceca:	621a      	str	r2, [r3, #32]
} //Timer_Class
    cecc:	687b      	ldr	r3, [r7, #4]
    cece:	4618      	mov	r0, r3
    ced0:	370c      	adds	r7, #12
    ced2:	46bd      	mov	sp, r7
    ced4:	bc80      	pop	{r7}
    ced6:	4770      	bx	lr
    ced8:	20000bdc 	.word	0x20000bdc
    cedc:	0000ce85 	.word	0x0000ce85

0000cee0 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    cee0:	b480      	push	{r7}
    cee2:	b083      	sub	sp, #12
    cee4:	af00      	add	r7, sp, #0
    cee6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    cee8:	687b      	ldr	r3, [r7, #4]
    ceea:	2200      	movs	r2, #0
    ceec:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ceee:	687b      	ldr	r3, [r7, #4]
    cef0:	4618      	mov	r0, r3
    cef2:	370c      	adds	r7, #12
    cef4:	46bd      	mov	sp, r7
    cef6:	bc80      	pop	{r7}
    cef8:	4770      	bx	lr
	...

0000cefc <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    cefc:	b580      	push	{r7, lr}
    cefe:	b084      	sub	sp, #16
    cf00:	af00      	add	r7, sp, #0
    cf02:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    cf04:	687b      	ldr	r3, [r7, #4]
    cf06:	689b      	ldr	r3, [r3, #8]
    cf08:	4618      	mov	r0, r3
    cf0a:	4b04      	ldr	r3, [pc, #16]	; (cf1c <_ZN17TimerSerial_Class5StartEv+0x20>)
    cf0c:	4798      	blx	r3
    cf0e:	60f8      	str	r0, [r7, #12]
	return status;
    cf10:	68fb      	ldr	r3, [r7, #12]
	
}
    cf12:	4618      	mov	r0, r3
    cf14:	3710      	adds	r7, #16
    cf16:	46bd      	mov	sp, r7
    cf18:	bd80      	pop	{r7, pc}
    cf1a:	bf00      	nop
    cf1c:	00002321 	.word	0x00002321

0000cf20 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    cf20:	b580      	push	{r7, lr}
    cf22:	b084      	sub	sp, #16
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    cf28:	687b      	ldr	r3, [r7, #4]
    cf2a:	689b      	ldr	r3, [r3, #8]
    cf2c:	4618      	mov	r0, r3
    cf2e:	4b05      	ldr	r3, [pc, #20]	; (cf44 <_ZN17TimerSerial_Class4StopEv+0x24>)
    cf30:	4798      	blx	r3
    cf32:	60f8      	str	r0, [r7, #12]
	timeout=0;
    cf34:	687b      	ldr	r3, [r7, #4]
    cf36:	2200      	movs	r2, #0
    cf38:	705a      	strb	r2, [r3, #1]
	return status;
    cf3a:	68fb      	ldr	r3, [r7, #12]
}
    cf3c:	4618      	mov	r0, r3
    cf3e:	3710      	adds	r7, #16
    cf40:	46bd      	mov	sp, r7
    cf42:	bd80      	pop	{r7, pc}
    cf44:	00002375 	.word	0x00002375

0000cf48 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
    cf48:	b480      	push	{r7}
    cf4a:	b083      	sub	sp, #12
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
	timeout=1;
    cf50:	687b      	ldr	r3, [r7, #4]
    cf52:	2201      	movs	r2, #1
    cf54:	705a      	strb	r2, [r3, #1]
}
    cf56:	bf00      	nop
    cf58:	370c      	adds	r7, #12
    cf5a:	46bd      	mov	sp, r7
    cf5c:	bc80      	pop	{r7}
    cf5e:	4770      	bx	lr

0000cf60 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    cf60:	b580      	push	{r7, lr}
    cf62:	b086      	sub	sp, #24
    cf64:	af00      	add	r7, sp, #0
    cf66:	60f8      	str	r0, [r7, #12]
    cf68:	60b9      	str	r1, [r7, #8]
    cf6a:	607a      	str	r2, [r7, #4]
    cf6c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    cf6e:	68fb      	ldr	r3, [r7, #12]
    cf70:	687a      	ldr	r2, [r7, #4]
    cf72:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	68ba      	ldr	r2, [r7, #8]
    cf78:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	78fa      	ldrb	r2, [r7, #3]
    cf7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    cf82:	68fb      	ldr	r3, [r7, #12]
    cf84:	689a      	ldr	r2, [r3, #8]
    cf86:	68fb      	ldr	r3, [r7, #12]
    cf88:	3314      	adds	r3, #20
    cf8a:	4619      	mov	r1, r3
    cf8c:	4610      	mov	r0, r2
    cf8e:	4b04      	ldr	r3, [pc, #16]	; (cfa0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
    cf90:	4798      	blx	r3
    cf92:	6178      	str	r0, [r7, #20]
	
	return status;
    cf94:	697b      	ldr	r3, [r7, #20]
}
    cf96:	4618      	mov	r0, r3
    cf98:	3718      	adds	r7, #24
    cf9a:	46bd      	mov	sp, r7
    cf9c:	bd80      	pop	{r7, pc}
    cf9e:	bf00      	nop
    cfa0:	000023d1 	.word	0x000023d1

0000cfa4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    cfa4:	b590      	push	{r4, r7, lr}
    cfa6:	b087      	sub	sp, #28
    cfa8:	af00      	add	r7, sp, #0
    cfaa:	60f8      	str	r0, [r7, #12]
    cfac:	60b9      	str	r1, [r7, #8]
    cfae:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    cfb0:	2300      	movs	r3, #0
    cfb2:	687a      	ldr	r2, [r7, #4]
    cfb4:	68b9      	ldr	r1, [r7, #8]
    cfb6:	68f8      	ldr	r0, [r7, #12]
    cfb8:	4c03      	ldr	r4, [pc, #12]	; (cfc8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    cfba:	47a0      	blx	r4
    cfbc:	6178      	str	r0, [r7, #20]
	return status;
    cfbe:	697b      	ldr	r3, [r7, #20]
}
    cfc0:	4618      	mov	r0, r3
    cfc2:	371c      	adds	r7, #28
    cfc4:	46bd      	mov	sp, r7
    cfc6:	bd90      	pop	{r4, r7, pc}
    cfc8:	0000cf61 	.word	0x0000cf61

0000cfcc <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    cfcc:	b580      	push	{r7, lr}
    cfce:	b082      	sub	sp, #8
    cfd0:	af00      	add	r7, sp, #0
    cfd2:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    cfd4:	687b      	ldr	r3, [r7, #4]
    cfd6:	689a      	ldr	r2, [r3, #8]
    cfd8:	687b      	ldr	r3, [r7, #4]
    cfda:	3314      	adds	r3, #20
    cfdc:	4619      	mov	r1, r3
    cfde:	4610      	mov	r0, r2
    cfe0:	4b02      	ldr	r3, [pc, #8]	; (cfec <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
    cfe2:	4798      	blx	r3
}
    cfe4:	bf00      	nop
    cfe6:	3708      	adds	r7, #8
    cfe8:	46bd      	mov	sp, r7
    cfea:	bd80      	pop	{r7, pc}
    cfec:	000024c9 	.word	0x000024c9

0000cff0 <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
    cff0:	b580      	push	{r7, lr}
    cff2:	b082      	sub	sp, #8
    cff4:	af00      	add	r7, sp, #0
    cff6:	6078      	str	r0, [r7, #4]
    cff8:	6039      	str	r1, [r7, #0]
    cffa:	687b      	ldr	r3, [r7, #4]
    cffc:	2b01      	cmp	r3, #1
    cffe:	d10d      	bne.n	d01c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d000:	683b      	ldr	r3, [r7, #0]
    d002:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d006:	4293      	cmp	r3, r2
    d008:	d108      	bne.n	d01c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d00a:	4906      	ldr	r1, [pc, #24]	; (d024 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d00c:	4806      	ldr	r0, [pc, #24]	; (d028 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d00e:	4b07      	ldr	r3, [pc, #28]	; (d02c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d010:	4798      	blx	r3
    d012:	4a07      	ldr	r2, [pc, #28]	; (d030 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d014:	4907      	ldr	r1, [pc, #28]	; (d034 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d016:	4804      	ldr	r0, [pc, #16]	; (d028 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d018:	4b07      	ldr	r3, [pc, #28]	; (d038 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d01a:	4798      	blx	r3
    d01c:	bf00      	nop
    d01e:	3708      	adds	r7, #8
    d020:	46bd      	mov	sp, r7
    d022:	bd80      	pop	{r7, pc}
    d024:	20000c8c 	.word	0x20000c8c
    d028:	20000be0 	.word	0x20000be0
    d02c:	0000cea9 	.word	0x0000cea9
    d030:	20000000 	.word	0x20000000
    d034:	0000cee1 	.word	0x0000cee1
    d038:	0000d071 	.word	0x0000d071

0000d03c <_GLOBAL__sub_I_ptrTimerSerialClass>:
    d03c:	b580      	push	{r7, lr}
    d03e:	af00      	add	r7, sp, #0
    d040:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d044:	2001      	movs	r0, #1
    d046:	4b01      	ldr	r3, [pc, #4]	; (d04c <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    d048:	4798      	blx	r3
    d04a:	bd80      	pop	{r7, pc}
    d04c:	0000cff1 	.word	0x0000cff1

0000d050 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    d050:	b480      	push	{r7}
    d052:	b083      	sub	sp, #12
    d054:	af00      	add	r7, sp, #0
    d056:	6078      	str	r0, [r7, #4]
    return (void *)0;
    d058:	2300      	movs	r3, #0
	}
    d05a:	4618      	mov	r0, r3
    d05c:	370c      	adds	r7, #12
    d05e:	46bd      	mov	sp, r7
    d060:	bc80      	pop	{r7}
    d062:	4770      	bx	lr

0000d064 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    d064:	b480      	push	{r7}
    d066:	af00      	add	r7, sp, #0
		}
    d068:	bf00      	nop
    d06a:	46bd      	mov	sp, r7
    d06c:	bc80      	pop	{r7}
    d06e:	4770      	bx	lr

0000d070 <__aeabi_atexit>:
    d070:	460b      	mov	r3, r1
    d072:	4601      	mov	r1, r0
    d074:	4618      	mov	r0, r3
    d076:	f000 b801 	b.w	d07c <__cxa_atexit>
    d07a:	bf00      	nop

0000d07c <__cxa_atexit>:
    d07c:	4613      	mov	r3, r2
    d07e:	460a      	mov	r2, r1
    d080:	4601      	mov	r1, r0
    d082:	2002      	movs	r0, #2
    d084:	f000 b91e 	b.w	d2c4 <__register_exitproc>

0000d088 <ffs>:
    d088:	b140      	cbz	r0, d09c <ffs+0x14>
    d08a:	2300      	movs	r3, #0
    d08c:	fa40 f103 	asr.w	r1, r0, r3
    d090:	1c5a      	adds	r2, r3, #1
    d092:	07c9      	lsls	r1, r1, #31
    d094:	4613      	mov	r3, r2
    d096:	d5f9      	bpl.n	d08c <ffs+0x4>
    d098:	4610      	mov	r0, r2
    d09a:	4770      	bx	lr
    d09c:	4602      	mov	r2, r0
    d09e:	4610      	mov	r0, r2
    d0a0:	4770      	bx	lr
    d0a2:	bf00      	nop

0000d0a4 <__libc_init_array>:
    d0a4:	b570      	push	{r4, r5, r6, lr}
    d0a6:	4e0f      	ldr	r6, [pc, #60]	; (d0e4 <__libc_init_array+0x40>)
    d0a8:	4d0f      	ldr	r5, [pc, #60]	; (d0e8 <__libc_init_array+0x44>)
    d0aa:	1b76      	subs	r6, r6, r5
    d0ac:	10b6      	asrs	r6, r6, #2
    d0ae:	bf18      	it	ne
    d0b0:	2400      	movne	r4, #0
    d0b2:	d005      	beq.n	d0c0 <__libc_init_array+0x1c>
    d0b4:	3401      	adds	r4, #1
    d0b6:	f855 3b04 	ldr.w	r3, [r5], #4
    d0ba:	4798      	blx	r3
    d0bc:	42a6      	cmp	r6, r4
    d0be:	d1f9      	bne.n	d0b4 <__libc_init_array+0x10>
    d0c0:	4e0a      	ldr	r6, [pc, #40]	; (d0ec <__libc_init_array+0x48>)
    d0c2:	4d0b      	ldr	r5, [pc, #44]	; (d0f0 <__libc_init_array+0x4c>)
    d0c4:	1b76      	subs	r6, r6, r5
    d0c6:	f000 fbcd 	bl	d864 <_init>
    d0ca:	10b6      	asrs	r6, r6, #2
    d0cc:	bf18      	it	ne
    d0ce:	2400      	movne	r4, #0
    d0d0:	d006      	beq.n	d0e0 <__libc_init_array+0x3c>
    d0d2:	3401      	adds	r4, #1
    d0d4:	f855 3b04 	ldr.w	r3, [r5], #4
    d0d8:	4798      	blx	r3
    d0da:	42a6      	cmp	r6, r4
    d0dc:	d1f9      	bne.n	d0d2 <__libc_init_array+0x2e>
    d0de:	bd70      	pop	{r4, r5, r6, pc}
    d0e0:	bd70      	pop	{r4, r5, r6, pc}
    d0e2:	bf00      	nop
    d0e4:	0000d870 	.word	0x0000d870
    d0e8:	0000d870 	.word	0x0000d870
    d0ec:	0000d880 	.word	0x0000d880
    d0f0:	0000d870 	.word	0x0000d870

0000d0f4 <memcpy>:
    d0f4:	4684      	mov	ip, r0
    d0f6:	ea41 0300 	orr.w	r3, r1, r0
    d0fa:	f013 0303 	ands.w	r3, r3, #3
    d0fe:	d16d      	bne.n	d1dc <memcpy+0xe8>
    d100:	3a40      	subs	r2, #64	; 0x40
    d102:	d341      	bcc.n	d188 <memcpy+0x94>
    d104:	f851 3b04 	ldr.w	r3, [r1], #4
    d108:	f840 3b04 	str.w	r3, [r0], #4
    d10c:	f851 3b04 	ldr.w	r3, [r1], #4
    d110:	f840 3b04 	str.w	r3, [r0], #4
    d114:	f851 3b04 	ldr.w	r3, [r1], #4
    d118:	f840 3b04 	str.w	r3, [r0], #4
    d11c:	f851 3b04 	ldr.w	r3, [r1], #4
    d120:	f840 3b04 	str.w	r3, [r0], #4
    d124:	f851 3b04 	ldr.w	r3, [r1], #4
    d128:	f840 3b04 	str.w	r3, [r0], #4
    d12c:	f851 3b04 	ldr.w	r3, [r1], #4
    d130:	f840 3b04 	str.w	r3, [r0], #4
    d134:	f851 3b04 	ldr.w	r3, [r1], #4
    d138:	f840 3b04 	str.w	r3, [r0], #4
    d13c:	f851 3b04 	ldr.w	r3, [r1], #4
    d140:	f840 3b04 	str.w	r3, [r0], #4
    d144:	f851 3b04 	ldr.w	r3, [r1], #4
    d148:	f840 3b04 	str.w	r3, [r0], #4
    d14c:	f851 3b04 	ldr.w	r3, [r1], #4
    d150:	f840 3b04 	str.w	r3, [r0], #4
    d154:	f851 3b04 	ldr.w	r3, [r1], #4
    d158:	f840 3b04 	str.w	r3, [r0], #4
    d15c:	f851 3b04 	ldr.w	r3, [r1], #4
    d160:	f840 3b04 	str.w	r3, [r0], #4
    d164:	f851 3b04 	ldr.w	r3, [r1], #4
    d168:	f840 3b04 	str.w	r3, [r0], #4
    d16c:	f851 3b04 	ldr.w	r3, [r1], #4
    d170:	f840 3b04 	str.w	r3, [r0], #4
    d174:	f851 3b04 	ldr.w	r3, [r1], #4
    d178:	f840 3b04 	str.w	r3, [r0], #4
    d17c:	f851 3b04 	ldr.w	r3, [r1], #4
    d180:	f840 3b04 	str.w	r3, [r0], #4
    d184:	3a40      	subs	r2, #64	; 0x40
    d186:	d2bd      	bcs.n	d104 <memcpy+0x10>
    d188:	3230      	adds	r2, #48	; 0x30
    d18a:	d311      	bcc.n	d1b0 <memcpy+0xbc>
    d18c:	f851 3b04 	ldr.w	r3, [r1], #4
    d190:	f840 3b04 	str.w	r3, [r0], #4
    d194:	f851 3b04 	ldr.w	r3, [r1], #4
    d198:	f840 3b04 	str.w	r3, [r0], #4
    d19c:	f851 3b04 	ldr.w	r3, [r1], #4
    d1a0:	f840 3b04 	str.w	r3, [r0], #4
    d1a4:	f851 3b04 	ldr.w	r3, [r1], #4
    d1a8:	f840 3b04 	str.w	r3, [r0], #4
    d1ac:	3a10      	subs	r2, #16
    d1ae:	d2ed      	bcs.n	d18c <memcpy+0x98>
    d1b0:	320c      	adds	r2, #12
    d1b2:	d305      	bcc.n	d1c0 <memcpy+0xcc>
    d1b4:	f851 3b04 	ldr.w	r3, [r1], #4
    d1b8:	f840 3b04 	str.w	r3, [r0], #4
    d1bc:	3a04      	subs	r2, #4
    d1be:	d2f9      	bcs.n	d1b4 <memcpy+0xc0>
    d1c0:	3204      	adds	r2, #4
    d1c2:	d008      	beq.n	d1d6 <memcpy+0xe2>
    d1c4:	07d2      	lsls	r2, r2, #31
    d1c6:	bf1c      	itt	ne
    d1c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    d1cc:	f800 3b01 	strbne.w	r3, [r0], #1
    d1d0:	d301      	bcc.n	d1d6 <memcpy+0xe2>
    d1d2:	880b      	ldrh	r3, [r1, #0]
    d1d4:	8003      	strh	r3, [r0, #0]
    d1d6:	4660      	mov	r0, ip
    d1d8:	4770      	bx	lr
    d1da:	bf00      	nop
    d1dc:	2a08      	cmp	r2, #8
    d1de:	d313      	bcc.n	d208 <memcpy+0x114>
    d1e0:	078b      	lsls	r3, r1, #30
    d1e2:	d08d      	beq.n	d100 <memcpy+0xc>
    d1e4:	f010 0303 	ands.w	r3, r0, #3
    d1e8:	d08a      	beq.n	d100 <memcpy+0xc>
    d1ea:	f1c3 0304 	rsb	r3, r3, #4
    d1ee:	1ad2      	subs	r2, r2, r3
    d1f0:	07db      	lsls	r3, r3, #31
    d1f2:	bf1c      	itt	ne
    d1f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    d1f8:	f800 3b01 	strbne.w	r3, [r0], #1
    d1fc:	d380      	bcc.n	d100 <memcpy+0xc>
    d1fe:	f831 3b02 	ldrh.w	r3, [r1], #2
    d202:	f820 3b02 	strh.w	r3, [r0], #2
    d206:	e77b      	b.n	d100 <memcpy+0xc>
    d208:	3a04      	subs	r2, #4
    d20a:	d3d9      	bcc.n	d1c0 <memcpy+0xcc>
    d20c:	3a01      	subs	r2, #1
    d20e:	f811 3b01 	ldrb.w	r3, [r1], #1
    d212:	f800 3b01 	strb.w	r3, [r0], #1
    d216:	d2f9      	bcs.n	d20c <memcpy+0x118>
    d218:	780b      	ldrb	r3, [r1, #0]
    d21a:	7003      	strb	r3, [r0, #0]
    d21c:	784b      	ldrb	r3, [r1, #1]
    d21e:	7043      	strb	r3, [r0, #1]
    d220:	788b      	ldrb	r3, [r1, #2]
    d222:	7083      	strb	r3, [r0, #2]
    d224:	4660      	mov	r0, ip
    d226:	4770      	bx	lr

0000d228 <memset>:
    d228:	b470      	push	{r4, r5, r6}
    d22a:	0786      	lsls	r6, r0, #30
    d22c:	d046      	beq.n	d2bc <memset+0x94>
    d22e:	1e54      	subs	r4, r2, #1
    d230:	2a00      	cmp	r2, #0
    d232:	d041      	beq.n	d2b8 <memset+0x90>
    d234:	b2ca      	uxtb	r2, r1
    d236:	4603      	mov	r3, r0
    d238:	e002      	b.n	d240 <memset+0x18>
    d23a:	f114 34ff 	adds.w	r4, r4, #4294967295
    d23e:	d33b      	bcc.n	d2b8 <memset+0x90>
    d240:	f803 2b01 	strb.w	r2, [r3], #1
    d244:	079d      	lsls	r5, r3, #30
    d246:	d1f8      	bne.n	d23a <memset+0x12>
    d248:	2c03      	cmp	r4, #3
    d24a:	d92e      	bls.n	d2aa <memset+0x82>
    d24c:	b2cd      	uxtb	r5, r1
    d24e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d252:	2c0f      	cmp	r4, #15
    d254:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d258:	d919      	bls.n	d28e <memset+0x66>
    d25a:	f103 0210 	add.w	r2, r3, #16
    d25e:	4626      	mov	r6, r4
    d260:	3e10      	subs	r6, #16
    d262:	2e0f      	cmp	r6, #15
    d264:	f842 5c10 	str.w	r5, [r2, #-16]
    d268:	f842 5c0c 	str.w	r5, [r2, #-12]
    d26c:	f842 5c08 	str.w	r5, [r2, #-8]
    d270:	f842 5c04 	str.w	r5, [r2, #-4]
    d274:	f102 0210 	add.w	r2, r2, #16
    d278:	d8f2      	bhi.n	d260 <memset+0x38>
    d27a:	f1a4 0210 	sub.w	r2, r4, #16
    d27e:	f022 020f 	bic.w	r2, r2, #15
    d282:	f004 040f 	and.w	r4, r4, #15
    d286:	3210      	adds	r2, #16
    d288:	2c03      	cmp	r4, #3
    d28a:	4413      	add	r3, r2
    d28c:	d90d      	bls.n	d2aa <memset+0x82>
    d28e:	461e      	mov	r6, r3
    d290:	4622      	mov	r2, r4
    d292:	3a04      	subs	r2, #4
    d294:	2a03      	cmp	r2, #3
    d296:	f846 5b04 	str.w	r5, [r6], #4
    d29a:	d8fa      	bhi.n	d292 <memset+0x6a>
    d29c:	1f22      	subs	r2, r4, #4
    d29e:	f022 0203 	bic.w	r2, r2, #3
    d2a2:	3204      	adds	r2, #4
    d2a4:	4413      	add	r3, r2
    d2a6:	f004 0403 	and.w	r4, r4, #3
    d2aa:	b12c      	cbz	r4, d2b8 <memset+0x90>
    d2ac:	b2c9      	uxtb	r1, r1
    d2ae:	441c      	add	r4, r3
    d2b0:	f803 1b01 	strb.w	r1, [r3], #1
    d2b4:	429c      	cmp	r4, r3
    d2b6:	d1fb      	bne.n	d2b0 <memset+0x88>
    d2b8:	bc70      	pop	{r4, r5, r6}
    d2ba:	4770      	bx	lr
    d2bc:	4614      	mov	r4, r2
    d2be:	4603      	mov	r3, r0
    d2c0:	e7c2      	b.n	d248 <memset+0x20>
    d2c2:	bf00      	nop

0000d2c4 <__register_exitproc>:
    d2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2c8:	4d2c      	ldr	r5, [pc, #176]	; (d37c <__register_exitproc+0xb8>)
    d2ca:	4606      	mov	r6, r0
    d2cc:	6828      	ldr	r0, [r5, #0]
    d2ce:	4698      	mov	r8, r3
    d2d0:	460f      	mov	r7, r1
    d2d2:	4691      	mov	r9, r2
    d2d4:	f000 f882 	bl	d3dc <__retarget_lock_acquire_recursive>
    d2d8:	4b29      	ldr	r3, [pc, #164]	; (d380 <__register_exitproc+0xbc>)
    d2da:	681c      	ldr	r4, [r3, #0]
    d2dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d03e      	beq.n	d362 <__register_exitproc+0x9e>
    d2e4:	685a      	ldr	r2, [r3, #4]
    d2e6:	2a1f      	cmp	r2, #31
    d2e8:	dc1c      	bgt.n	d324 <__register_exitproc+0x60>
    d2ea:	f102 0e01 	add.w	lr, r2, #1
    d2ee:	b176      	cbz	r6, d30e <__register_exitproc+0x4a>
    d2f0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    d2f4:	2401      	movs	r4, #1
    d2f6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d2fa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    d2fe:	4094      	lsls	r4, r2
    d300:	4320      	orrs	r0, r4
    d302:	2e02      	cmp	r6, #2
    d304:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    d308:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d30c:	d023      	beq.n	d356 <__register_exitproc+0x92>
    d30e:	3202      	adds	r2, #2
    d310:	f8c3 e004 	str.w	lr, [r3, #4]
    d314:	6828      	ldr	r0, [r5, #0]
    d316:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    d31a:	f000 f861 	bl	d3e0 <__retarget_lock_release_recursive>
    d31e:	2000      	movs	r0, #0
    d320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d324:	4b17      	ldr	r3, [pc, #92]	; (d384 <__register_exitproc+0xc0>)
    d326:	b30b      	cbz	r3, d36c <__register_exitproc+0xa8>
    d328:	f44f 70c8 	mov.w	r0, #400	; 0x190
    d32c:	f7ff fe90 	bl	d050 <malloc>
    d330:	4603      	mov	r3, r0
    d332:	b1d8      	cbz	r0, d36c <__register_exitproc+0xa8>
    d334:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    d338:	6002      	str	r2, [r0, #0]
    d33a:	2100      	movs	r1, #0
    d33c:	6041      	str	r1, [r0, #4]
    d33e:	460a      	mov	r2, r1
    d340:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    d344:	f04f 0e01 	mov.w	lr, #1
    d348:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    d34c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    d350:	2e00      	cmp	r6, #0
    d352:	d0dc      	beq.n	d30e <__register_exitproc+0x4a>
    d354:	e7cc      	b.n	d2f0 <__register_exitproc+0x2c>
    d356:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    d35a:	430c      	orrs	r4, r1
    d35c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    d360:	e7d5      	b.n	d30e <__register_exitproc+0x4a>
    d362:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    d366:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    d36a:	e7bb      	b.n	d2e4 <__register_exitproc+0x20>
    d36c:	6828      	ldr	r0, [r5, #0]
    d36e:	f000 f837 	bl	d3e0 <__retarget_lock_release_recursive>
    d372:	f04f 30ff 	mov.w	r0, #4294967295
    d376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d37a:	bf00      	nop
    d37c:	20000540 	.word	0x20000540
    d380:	0000d860 	.word	0x0000d860
    d384:	0000d051 	.word	0x0000d051

0000d388 <register_fini>:
    d388:	4b02      	ldr	r3, [pc, #8]	; (d394 <register_fini+0xc>)
    d38a:	b113      	cbz	r3, d392 <register_fini+0xa>
    d38c:	4802      	ldr	r0, [pc, #8]	; (d398 <register_fini+0x10>)
    d38e:	f000 b805 	b.w	d39c <atexit>
    d392:	4770      	bx	lr
    d394:	00000000 	.word	0x00000000
    d398:	0000d3a9 	.word	0x0000d3a9

0000d39c <atexit>:
    d39c:	2300      	movs	r3, #0
    d39e:	4601      	mov	r1, r0
    d3a0:	461a      	mov	r2, r3
    d3a2:	4618      	mov	r0, r3
    d3a4:	f7ff bf8e 	b.w	d2c4 <__register_exitproc>

0000d3a8 <__libc_fini_array>:
    d3a8:	b538      	push	{r3, r4, r5, lr}
    d3aa:	4c0a      	ldr	r4, [pc, #40]	; (d3d4 <__libc_fini_array+0x2c>)
    d3ac:	4d0a      	ldr	r5, [pc, #40]	; (d3d8 <__libc_fini_array+0x30>)
    d3ae:	1b64      	subs	r4, r4, r5
    d3b0:	10a4      	asrs	r4, r4, #2
    d3b2:	d00a      	beq.n	d3ca <__libc_fini_array+0x22>
    d3b4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    d3b8:	3b01      	subs	r3, #1
    d3ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d3be:	3c01      	subs	r4, #1
    d3c0:	f855 3904 	ldr.w	r3, [r5], #-4
    d3c4:	4798      	blx	r3
    d3c6:	2c00      	cmp	r4, #0
    d3c8:	d1f9      	bne.n	d3be <__libc_fini_array+0x16>
    d3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d3ce:	f000 ba57 	b.w	d880 <_fini>
    d3d2:	bf00      	nop
    d3d4:	0000d890 	.word	0x0000d890
    d3d8:	0000d88c 	.word	0x0000d88c

0000d3dc <__retarget_lock_acquire_recursive>:
    d3dc:	4770      	bx	lr
    d3de:	bf00      	nop

0000d3e0 <__retarget_lock_release_recursive>:
    d3e0:	4770      	bx	lr
    d3e2:	bf00      	nop
    d3e4:	682f2e2e 	.word	0x682f2e2e
    d3e8:	702f6c70 	.word	0x702f6c70
    d3ec:	2f74726f 	.word	0x2f74726f
    d3f0:	5f6c7068 	.word	0x5f6c7068
    d3f4:	6f697067 	.word	0x6f697067
    d3f8:	7361625f 	.word	0x7361625f
    d3fc:	00682e65 	.word	0x00682e65
    d400:	682f2e2e 	.word	0x682f2e2e
    d404:	692f6c61 	.word	0x692f6c61
    d408:	756c636e 	.word	0x756c636e
    d40c:	682f6564 	.word	0x682f6564
    d410:	775f6c61 	.word	0x775f6c61
    d414:	682e7464 	.word	0x682e7464
    d418:	00000000 	.word	0x00000000
    d41c:	682f2e2e 	.word	0x682f2e2e
    d420:	732f6c61 	.word	0x732f6c61
    d424:	682f6372 	.word	0x682f6372
    d428:	635f6c61 	.word	0x635f6c61
    d42c:	6e656c61 	.word	0x6e656c61
    d430:	2e726164 	.word	0x2e726164
    d434:	00000063 	.word	0x00000063
    d438:	682f2e2e 	.word	0x682f2e2e
    d43c:	732f6c61 	.word	0x732f6c61
    d440:	682f6372 	.word	0x682f6372
    d444:	635f6c61 	.word	0x635f6c61
    d448:	615f6e61 	.word	0x615f6e61
    d44c:	636e7973 	.word	0x636e7973
    d450:	0000632e 	.word	0x0000632e
    d454:	682f2e2e 	.word	0x682f2e2e
    d458:	732f6c61 	.word	0x732f6c61
    d45c:	682f6372 	.word	0x682f6372
    d460:	635f6c61 	.word	0x635f6c61
    d464:	735f6372 	.word	0x735f6372
    d468:	2e636e79 	.word	0x2e636e79
    d46c:	00000063 	.word	0x00000063
    d470:	682f2e2e 	.word	0x682f2e2e
    d474:	732f6c61 	.word	0x732f6c61
    d478:	682f6372 	.word	0x682f6372
    d47c:	695f6c61 	.word	0x695f6c61
    d480:	6d5f6332 	.word	0x6d5f6332
    d484:	7973615f 	.word	0x7973615f
    d488:	632e636e 	.word	0x632e636e
    d48c:	00000000 	.word	0x00000000
    d490:	682f2e2e 	.word	0x682f2e2e
    d494:	732f6c61 	.word	0x732f6c61
    d498:	682f6372 	.word	0x682f6372
    d49c:	705f6c61 	.word	0x705f6c61
    d4a0:	632e6d77 	.word	0x632e6d77
    d4a4:	00000000 	.word	0x00000000
    d4a8:	682f2e2e 	.word	0x682f2e2e
    d4ac:	732f6c61 	.word	0x732f6c61
    d4b0:	682f6372 	.word	0x682f6372
    d4b4:	715f6c61 	.word	0x715f6c61
    d4b8:	5f697073 	.word	0x5f697073
    d4bc:	636e7973 	.word	0x636e7973
    d4c0:	0000632e 	.word	0x0000632e
    d4c4:	682f2e2e 	.word	0x682f2e2e
    d4c8:	732f6c61 	.word	0x732f6c61
    d4cc:	682f6372 	.word	0x682f6372
    d4d0:	735f6c61 	.word	0x735f6c61
    d4d4:	6d5f6970 	.word	0x6d5f6970
    d4d8:	7973615f 	.word	0x7973615f
    d4dc:	632e636e 	.word	0x632e636e
    d4e0:	00000000 	.word	0x00000000
    d4e4:	682f2e2e 	.word	0x682f2e2e
    d4e8:	732f6c61 	.word	0x732f6c61
    d4ec:	682f6372 	.word	0x682f6372
    d4f0:	735f6c61 	.word	0x735f6c61
    d4f4:	6d5f6970 	.word	0x6d5f6970
    d4f8:	6e79735f 	.word	0x6e79735f
    d4fc:	00632e63 	.word	0x00632e63
    d500:	682f2e2e 	.word	0x682f2e2e
    d504:	732f6c61 	.word	0x732f6c61
    d508:	682f6372 	.word	0x682f6372
    d50c:	745f6c61 	.word	0x745f6c61
    d510:	72656d69 	.word	0x72656d69
    d514:	0000632e 	.word	0x0000632e
    d518:	682f2e2e 	.word	0x682f2e2e
    d51c:	752f6c61 	.word	0x752f6c61
    d520:	736c6974 	.word	0x736c6974
    d524:	6372732f 	.word	0x6372732f
    d528:	6974752f 	.word	0x6974752f
    d52c:	6c5f736c 	.word	0x6c5f736c
    d530:	2e747369 	.word	0x2e747369
    d534:	00000063 	.word	0x00000063

0000d538 <_map>:
    d538:	00000004 00000004 00000005 00000005     ................
    d548:	00000006 00000056 00000007 00000057     ....V.......W...
    d558:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    d568:	632e6369 00000000                       ic.c....

0000d570 <user_mux_confs>:
    d570:	00000100 00000000 00000000 00000000     ................
	...

0000d5b4 <channel_confs>:
    d5b4:	0000065e 00000000 00000000 00000000     ^...............
	...

0000d5f4 <interrupt_cfg>:
	...
    d674:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d684:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d694:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d6a4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    d6b4:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    d6c4:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    d6d4:	43000400 43000800 43000c00              ...C...C...C

0000d6e0 <sercomspi_regs>:
    d6e0:	0020000c 00020000 00000000 01ff009f     .. .............
    d6f0:	30000c04 02000000 00000000 ff009f00     ...0............
    d700:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    d710:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    d720:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    d730:	43001400 43001800                       ...C...C

0000d738 <_usb_ep_cfgs>:
    d738:	200006f8 00000000 00000040 20000738     ... ....@...8.. 
    d748:	20000778 00400040 200007b8 200007f8     x.. @.@.... ... 
    d758:	00400040 20000838 20000878 00400040     @.@.8.. x.. @.@.
    d768:	200008b8 200008f8 00400040 00000804     ... ... @.@.....
    d778:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    d788:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    d798:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    d7a8:	7361625f 00682e65                       _base.h.

0000d7b0 <n25q256a_interface>:
    d7b0:	0000ab7d 0000ac21 0000ad31 0000aee9     }...!...1.......
    d7c0:	0000af79 752f2e2e 642f6273 63697665     y...../usb/devic
    d7d0:	73752f65 2e636462 00000063              e/usbdc.c...

0000d7dc <_ZTV9CDC_Class>:
	...
    d7e4:	0000c90d 0000c9c1 0000c625 0000c8d5     ........%.......
    d7f4:	0000ca3d 0000c899 0000c809 0000c859     =...........Y...
    d804:	0000c8f5 0000c945                       ....E...

0000d80c <_ZTV6Stream>:
	...
    d814:	0000d065 0000cad1 0000c625 0000c639     e.......%...9...
    d824:	0000d065 0000d065 0000d065 2e257830     e...e...e...0x%.
    d834:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    d844:	0066766f                                ovf.

0000d848 <_ZTV5Print>:
	...
    d850:	0000d065 0000cad1 0000c625 0000c639     e.......%...9...

0000d860 <_global_impure_ptr>:
    d860:	20000118                                ... 

0000d864 <_init>:
    d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d866:	bf00      	nop
    d868:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d86a:	bc08      	pop	{r3}
    d86c:	469e      	mov	lr, r3
    d86e:	4770      	bx	lr

0000d870 <__init_array_start>:
    d870:	0000d389 	.word	0x0000d389

0000d874 <__frame_dummy_init_array_entry>:
    d874:	00000289 0000cabd 0000d03d              ........=...

0000d880 <_fini>:
    d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d882:	bf00      	nop
    d884:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d886:	bc08      	pop	{r3}
    d888:	469e      	mov	lr, r3
    d88a:	4770      	bx	lr

0000d88c <__fini_array_start>:
    d88c:	00000265 	.word	0x00000265
