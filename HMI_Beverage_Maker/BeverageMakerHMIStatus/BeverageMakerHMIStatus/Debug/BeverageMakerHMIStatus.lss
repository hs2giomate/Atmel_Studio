
BeverageMakerHMIStatus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000427a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00802000  0000427a  0000430e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000188  008021d0  008021d0  000044de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000044de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a0  00000000  00000000  00004550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ae65  00000000  00000000  00004cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046b3  00000000  00000000  0000fb55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e65  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018dc  00000000  00000000  00019070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005f1e  00000000  00000000  0001a94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003141  00000000  00000000  0002086a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  000239ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 01 	jmp	0x228	; 0x228 <__dtors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__vector_14>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      48:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      6c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      98:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b8:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__vector_46>
      bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      cc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      dc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ec:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      fc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     100:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     104:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     108:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     10c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     110:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     114:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     118:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     11c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     120:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     124:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     128:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     12c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     130:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     134:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     138:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     13c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     140:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     144:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     148:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     14c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     150:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     154:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     158:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     15c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     160:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     164:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     168:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     16c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     170:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     174:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     178:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     17c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     180:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     184:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     188:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     18c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     190:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     194:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     198:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     19c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c8:	02 07       	cpc	r16, r18
     1ca:	07 07       	cpc	r16, r23
     1cc:	0c 07       	cpc	r16, r28
     1ce:	11 07       	cpc	r17, r17
     1d0:	16 07       	cpc	r17, r22
     1d2:	1b 07       	cpc	r17, r27
     1d4:	20 07       	cpc	r18, r16
     1d6:	25 07       	cpc	r18, r21
     1d8:	2a 07       	cpc	r18, r26
     1da:	05 a8       	ldd	r0, Z+53	; 0x35
     1dc:	4c cd       	rjmp	.-1384   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
     1de:	b2 d4       	rcall	.+2404   	; 0xb44 <_ZN15LedStateMachine9WaitStateEv+0x84>
     1e0:	4e b9       	out	0x0e, r20	; 14
     1e2:	38 36       	cpi	r19, 0x68	; 104
     1e4:	a9 02       	muls	r26, r25
     1e6:	0c 50       	subi	r16, 0x0C	; 12
     1e8:	b9 91       	ld	r27, Y+
     1ea:	86 88       	ldd	r8, Z+22	; 0x16
     1ec:	08 3c       	cpi	r16, 0xC8	; 200
     1ee:	a6 aa       	std	Z+54, r10	; 0x36
     1f0:	aa 2a       	or	r10, r26
     1f2:	be 00       	.word	0x00be	; ????
     1f4:	00 00       	nop
     1f6:	80 3f       	cpi	r24, 0xF0	; 240

000001f8 <__trampolines_start>:
     1f8:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_ZN15LedStateMachine12HandleStatesEh+0x8e>
     1fc:	0c 94 20 07 	jmp	0xe40	; 0xe40 <_ZN15LedStateMachine12HandleStatesEh+0x7a>
     200:	0c 94 02 07 	jmp	0xe04	; 0xe04 <_ZN15LedStateMachine12HandleStatesEh+0x3e>
     204:	0c 94 11 07 	jmp	0xe22	; 0xe22 <_ZN15LedStateMachine12HandleStatesEh+0x5c>
     208:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <_ZN15LedStateMachine12HandleStatesEh+0x84>
     20c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_ZN15LedStateMachine12HandleStatesEh+0x48>
     210:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <_GLOBAL__sub_I_main>
     214:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_ZN15LedStateMachine12HandleStatesEh+0x66>
     218:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <_ZN15LedStateMachine12HandleStatesEh+0x52>
     21c:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_GLOBAL__sub_D_main>
     220:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <_ZN15LedStateMachine12HandleStatesEh+0x70>

00000224 <__ctors_start>:
     224:	a7 07       	cpc	r26, r23

00000226 <__ctors_end>:
     226:	b4 07       	cpc	r27, r20

00000228 <__dtors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	df e9       	ldi	r29, 0x9F	; 159
     232:	de bf       	out	0x3e, r29	; 62
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0c bf       	out	0x3c, r16	; 60

00000238 <__do_copy_data>:
     238:	11 e2       	ldi	r17, 0x21	; 33
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b0 e2       	ldi	r27, 0x20	; 32
     23e:	ea e7       	ldi	r30, 0x7A	; 122
     240:	f2 e4       	ldi	r31, 0x42	; 66
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0b bf       	out	0x3b, r16	; 59
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x14>
     248:	07 90       	elpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a0 3d       	cpi	r26, 0xD0	; 208
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0x10>

00000252 <__do_clear_bss>:
     252:	23 e2       	ldi	r18, 0x23	; 35
     254:	a0 ed       	ldi	r26, 0xD0	; 208
     256:	b1 e2       	ldi	r27, 0x21	; 33
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	a8 35       	cpi	r26, 0x58	; 88
     25e:	b2 07       	cpc	r27, r18
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>

00000262 <__do_global_ctors>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	c3 e1       	ldi	r28, 0x13	; 19
     266:	d1 e0       	ldi	r29, 0x01	; 1
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	06 c0       	rjmp	.+12     	; 0x278 <__do_global_ctors+0x16>
     26c:	21 97       	sbiw	r28, 0x01	; 1
     26e:	01 09       	sbc	r16, r1
     270:	80 2f       	mov	r24, r16
     272:	fe 01       	movw	r30, r28
     274:	0e 94 23 21 	call	0x4246	; 0x4246 <__tablejump2__>
     278:	c2 31       	cpi	r28, 0x12	; 18
     27a:	d1 07       	cpc	r29, r17
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	08 07       	cpc	r16, r24
     280:	a9 f7       	brne	.-22     	; 0x26c <__do_global_ctors+0xa>
     282:	0e 94 71 07 	call	0xee2	; 0xee2 <main>
     286:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__do_global_dtors>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <_ZN15LedStateMachineC1Ev>:

#include "LedStateMachine.h"

// default constructor

LedStateMachine::LedStateMachine()
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	1f 92       	push	r1
     294:	1f 92       	push	r1
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	fc 01       	movw	r30, r24
     2a4:	11 86       	std	Z+9, r1	; 0x09
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	12 86       	std	Z+10, r1	; 0x0a
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	2a e0       	ldi	r18, 0x0A	; 10
     2b4:	fc 01       	movw	r30, r24
     2b6:	23 87       	std	Z+11, r18	; 0x0b
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	9a 81       	ldd	r25, Y+2	; 0x02
     2bc:	2a e0       	ldi	r18, 0x0A	; 10
     2be:	fc 01       	movw	r30, r24
     2c0:	24 87       	std	Z+12, r18	; 0x0c
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
     2c6:	fc 01       	movw	r30, r24
     2c8:	15 86       	std	Z+13, r1	; 0x0d
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	fc 01       	movw	r30, r24
     2d2:	26 87       	std	Z+14, r18	; 0x0e
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	fc 01       	movw	r30, r24
     2da:	17 86       	std	Z+15, r1	; 0x0f
{
	scrollingSpot=2;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	22 e0       	ldi	r18, 0x02	; 2
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 af       	std	Z+56, r18	; 0x38
	//timedicrete=0;
} //LedStateMachine
     2e6:	00 00       	nop
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <_ZN15LedStateMachineD1Ev>:

// default destructor
LedStateMachine::~LedStateMachine()
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	1f 92       	push	r1
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	9a 83       	std	Y+2, r25	; 0x02
{
} //~LedStateMachine
     302:	00 00       	nop
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <_ZN15LedStateMachine4InitEv>:
//uint32_t	LedStateMachine::timedicrete;
 static uint32_t timedicrete;
 static uint8_t ledIndexProgressBar=0;
 static uint8_t stateIndex=0;

bool LedStateMachine::Init(){
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	1f 92       	push	r1
     314:	1f 92       	push	r1
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	9a 83       	std	Y+2, r25	; 0x02
	oldSec = gdwSecondsAlive;
     31e:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
     322:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
     326:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
     32a:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
     32e:	29 81       	ldd	r18, Y+1	; 0x01
     330:	3a 81       	ldd	r19, Y+2	; 0x02
     332:	f9 01       	movw	r30, r18
     334:	81 83       	std	Z+1, r24	; 0x01
     336:	92 83       	std	Z+2, r25	; 0x02
     338:	a3 83       	std	Z+3, r26	; 0x03
     33a:	b4 83       	std	Z+4, r27	; 0x04
	systemInitialisation();
     33c:	0e 94 6d 0c 	call	0x18da	; 0x18da <systemInitialisation>
}
     340:	00 00       	nop
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <_ZN15LedStateMachine15RunPeriodicTaskEv>:
void LedStateMachine::RunPeriodicTask(){
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	1f 92       	push	r1
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	9a 83       	std	Y+2, r25	; 0x02
		__builtin_avr_wdr();	/* Watchdog Timer Reset */
     35c:	a8 95       	wdr
		
		mainTimerService();		/* Update general timers / counters */
     35e:	0e 94 0a 19 	call	0x3214	; 0x3214 <mainTimerService>
		btnManageButtonScan();	// Manage button scanning / debounce / reporting 
     362:	0e 94 0c 0c 	call	0x1818	; 0x1818 <btnManageButtonScan>
		manageManualResetDetect();
     366:	0e 94 5e 12 	call	0x24bc	; 0x24bc <manageManualResetDetect>
// 
// 		esfHALTtestManage();
// 
 		pscCommandManager();	/* handle any message received from the PSC */
     36a:	0e 94 a6 12 	call	0x254c	; 0x254c <pscCommandManager>

		ledManager();
     36e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <ledManager>
}
     372:	00 00       	nop
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <_ZN15LedStateMachine10StandbyOffEv>:

void LedStateMachine::StandbyOff(){
     37e:	0f 93       	push	r16
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <_ZN15LedStateMachine10StandbyOffEv+0x8>
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	8a 83       	std	Y+2, r24	; 0x02
     38c:	9b 83       	std	Y+3, r25	; 0x03
	
	
			if (gc100msTick != oldSec)
     38e:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	9b 81       	ldd	r25, Y+3	; 0x03
     39e:	fc 01       	movw	r30, r24
     3a0:	81 81       	ldd	r24, Z+1	; 0x01
     3a2:	92 81       	ldd	r25, Z+2	; 0x02
     3a4:	a3 81       	ldd	r26, Z+3	; 0x03
     3a6:	b4 81       	ldd	r27, Z+4	; 0x04
     3a8:	28 17       	cp	r18, r24
     3aa:	39 07       	cpc	r19, r25
     3ac:	4a 07       	cpc	r20, r26
     3ae:	5b 07       	cpc	r21, r27
     3b0:	a1 f1       	breq	.+104    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			{
	
				oldSec=gc100msTick;
     3b2:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     3b6:	88 2f       	mov	r24, r24
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	f9 01       	movw	r30, r18
     3c4:	81 83       	std	Z+1, r24	; 0x01
     3c6:	92 83       	std	Z+2, r25	; 0x02
     3c8:	a3 83       	std	Z+3, r26	; 0x03
     3ca:	b4 83       	std	Z+4, r27	; 0x04
		
					//pscHALTprogressBarStep(3);
					for (uint8_t step=0; step < 20; step++)
     3cc:	19 82       	std	Y+1, r1	; 0x01
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	84 31       	cpi	r24, 0x14	; 20
     3d2:	58 f4       	brcc	.+22     	; 0x3ea <_ZN15LedStateMachine10StandbyOffEv+0x6c>
					{
							ledSetProgressSegmentColour(step,Full, 0,0, 255);
     3d4:	0f ef       	ldi	r16, 0xFF	; 255
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	68 ef       	ldi	r22, 0xF8	; 248
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
			{
	
				oldSec=gc100msTick;
		
					//pscHALTprogressBarStep(3);
					for (uint8_t step=0; step < 20; step++)
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	8f 5f       	subi	r24, 0xFF	; 255
     3e6:	89 83       	std	Y+1, r24	; 0x01
     3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <_ZN15LedStateMachine10StandbyOffEv+0x50>
							ledSetProgressSegmentColour(step,Full, 0,0, 255);
					
						
					}
					//ledManager();
					ledSetAllButtonColour(0,0,255);
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <ledSetAllButtonColour>
					if (stateChange)
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	9b 81       	ldd	r25, Y+3	; 0x03
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	81 70       	andi	r24, 0x01	; 1
     3fe:	88 23       	and	r24, r24
     400:	61 f0       	breq	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
					{
						ledSetAllIndicatorColour(0,0,0);
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
						stateChange=false;
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	9b 81       	ldd	r25, Y+3	; 0x03
     410:	fc 01       	movw	r30, r24
     412:	20 81       	ld	r18, Z
     414:	2e 7f       	andi	r18, 0xFE	; 254
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
					}
					//ledManager();
			}
		
}
     41a:	00 00       	nop
     41c:	23 96       	adiw	r28, 0x03	; 3
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	de bf       	out	0x3e, r29	; 62
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <_ZN15LedStateMachine17WhiteBarIntensityEh>:

void LedStateMachine::WhiteBarIntensity(uint8_t intens){
     42a:	0f 93       	push	r16
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	00 d0       	rcall	.+0      	; 0x432 <_ZN15LedStateMachine17WhiteBarIntensityEh+0x8>
     432:	1f 92       	push	r1
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	8a 83       	std	Y+2, r24	; 0x02
     43a:	9b 83       	std	Y+3, r25	; 0x03
     43c:	6c 83       	std	Y+4, r22	; 0x04
	
		//pscHALTprogressBarStep(3);
		for (uint8_t step=0; step < 20; step++)
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	84 31       	cpi	r24, 0x14	; 20
     444:	58 f4       	brcc	.+22     	; 0x45c <_ZN15LedStateMachine17WhiteBarIntensityEh+0x32>
		{
			ledSetProgressSegmentColour(step,intens, 81,81, 81);
     446:	01 e5       	ldi	r16, 0x51	; 81
     448:	21 e5       	ldi	r18, 0x51	; 81
     44a:	41 e5       	ldi	r20, 0x51	; 81
     44c:	6c 81       	ldd	r22, Y+4	; 0x04
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
}

void LedStateMachine::WhiteBarIntensity(uint8_t intens){
	
		//pscHALTprogressBarStep(3);
		for (uint8_t step=0; step < 20; step++)
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	89 83       	std	Y+1, r24	; 0x01
     45a:	f2 cf       	rjmp	.-28     	; 0x440 <_ZN15LedStateMachine17WhiteBarIntensityEh+0x16>
					
		}

	
	
}
     45c:	00 00       	nop
     45e:	24 96       	adiw	r28, 0x04	; 4
     460:	cd bf       	out	0x3d, r28	; 61
     462:	de bf       	out	0x3e, r29	; 62
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <_ZN15LedStateMachine15WhiteBarPulsingEv>:

void LedStateMachine::WhiteBarPulsing(void){
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	2a 97       	sbiw	r28, 0x0a	; 10
     476:	cd bf       	out	0x3d, r28	; 61
     478:	de bf       	out	0x3e, r29	; 62
     47a:	89 87       	std	Y+9, r24	; 0x09
     47c:	9a 87       	std	Y+10, r25	; 0x0a
		
// 	if (gc100msTick != old10mSec)
// 	{
	
		float	intensityLed=127*sin((timedicrete%360)*PI/(180*1))+128;
     47e:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
     482:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
     486:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
     48a:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
     48e:	28 e6       	ldi	r18, 0x68	; 104
     490:	31 e0       	ldi	r19, 0x01	; 1
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	bc 01       	movw	r22, r24
     498:	cd 01       	movw	r24, r26
     49a:	0e 94 01 21 	call	0x4202	; 0x4202 <__udivmodsi4>
     49e:	dc 01       	movw	r26, r24
     4a0:	cb 01       	movw	r24, r22
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 cf 08 	call	0x119e	; 0x119e <__floatunsisf>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	2b ed       	ldi	r18, 0xDB	; 219
     4b0:	3f e0       	ldi	r19, 0x0F	; 15
     4b2:	49 e4       	ldi	r20, 0x49	; 73
     4b4:	50 e4       	ldi	r21, 0x40	; 64
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__mulsf3>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	44 e3       	ldi	r20, 0x34	; 52
     4c8:	53 e4       	ldi	r21, 0x43	; 67
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	0e 94 2e 08 	call	0x105c	; 0x105c <__divsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	bc 01       	movw	r22, r24
     4d8:	cd 01       	movw	r24, r26
     4da:	0e 94 ca 09 	call	0x1394	; 0x1394 <sin>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	4e ef       	ldi	r20, 0xFE	; 254
     4e8:	52 e4       	ldi	r21, 0x42	; 66
     4ea:	bc 01       	movw	r22, r24
     4ec:	cd 01       	movw	r24, r26
     4ee:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__mulsf3>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	53 e4       	ldi	r21, 0x43	; 67
     4fe:	bc 01       	movw	r22, r24
     500:	cd 01       	movw	r24, r26
     502:	0e 94 c2 07 	call	0xf84	; 0xf84 <__addsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	ab 83       	std	Y+3, r26	; 0x03
     510:	bc 83       	std	Y+4, r27	; 0x04
		uint32_t floattoInt=(uint32_t)intensityLed;
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	7a 81       	ldd	r23, Y+2	; 0x02
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fixunssfsi>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8d 83       	std	Y+5, r24	; 0x05
     524:	9e 83       	std	Y+6, r25	; 0x06
     526:	af 83       	std	Y+7, r26	; 0x07
     528:	b8 87       	std	Y+8, r27	; 0x08
		intesityLedDiscrete=(uint8_t)(floattoInt&0xff);
     52a:	2d 81       	ldd	r18, Y+5	; 0x05
     52c:	89 85       	ldd	r24, Y+9	; 0x09
     52e:	9a 85       	ldd	r25, Y+10	; 0x0a
     530:	fc 01       	movw	r30, r24
     532:	21 af       	std	Z+57, r18	; 0x39
		WhiteBarIntensity(intesityLedDiscrete);
     534:	89 85       	ldd	r24, Y+9	; 0x09
     536:	9a 85       	ldd	r25, Y+10	; 0x0a
     538:	fc 01       	movw	r30, r24
     53a:	21 ad       	ldd	r18, Z+57	; 0x39
     53c:	89 85       	ldd	r24, Y+9	; 0x09
     53e:	9a 85       	ldd	r25, Y+10	; 0x0a
     540:	62 2f       	mov	r22, r18
     542:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN15LedStateMachine17WhiteBarIntensityEh>
		timedicrete++;
     546:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
     54a:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
     54e:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
     552:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	a1 1d       	adc	r26, r1
     55a:	b1 1d       	adc	r27, r1
     55c:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <__data_end>
     560:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <__data_end+0x1>
     564:	a0 93 d2 21 	sts	0x21D2, r26	; 0x8021d2 <__data_end+0x2>
     568:	b0 93 d3 21 	sts	0x21D3, r27	; 0x8021d3 <__data_end+0x3>
//	}
		
}
     56c:	00 00       	nop
     56e:	2a 96       	adiw	r28, 0x0a	; 10
     570:	cd bf       	out	0x3d, r28	; 61
     572:	de bf       	out	0x3e, r29	; 62
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <_ZN15LedStateMachine24LeftButtonGreenIntensityEh>:

void LedStateMachine::LeftButtonGreenIntensity(uint8_t intens){
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	00 d0       	rcall	.+0      	; 0x580 <_ZN15LedStateMachine24LeftButtonGreenIntensityEh+0x6>
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	6b 83       	std	Y+3, r22	; 0x03
	
	ledSetLeftButtonColourInt(intens,0,81,0);
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	41 e5       	ldi	r20, 0x51	; 81
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ledSetLeftButtonColourInt>
	
}
     596:	00 00       	nop
     598:	23 96       	adiw	r28, 0x03	; 3
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <_ZN15LedStateMachine25LedLeftButtonGreenPulsingEv>:
void LedStateMachine::LedLeftButtonGreenPulsing(void){
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	2a 97       	sbiw	r28, 0x0a	; 10
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	89 87       	std	Y+9, r24	; 0x09
     5b4:	9a 87       	std	Y+10, r25	; 0x0a
	
			
			float	intensityLed=127*sin((timedicrete%360)*PI/(180*1))+128;
     5b6:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
     5ba:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
     5be:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
     5c2:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
     5c6:	28 e6       	ldi	r18, 0x68	; 104
     5c8:	31 e0       	ldi	r19, 0x01	; 1
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	bc 01       	movw	r22, r24
     5d0:	cd 01       	movw	r24, r26
     5d2:	0e 94 01 21 	call	0x4202	; 0x4202 <__udivmodsi4>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	bc 01       	movw	r22, r24
     5dc:	cd 01       	movw	r24, r26
     5de:	0e 94 cf 08 	call	0x119e	; 0x119e <__floatunsisf>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	2b ed       	ldi	r18, 0xDB	; 219
     5e8:	3f e0       	ldi	r19, 0x0F	; 15
     5ea:	49 e4       	ldi	r20, 0x49	; 73
     5ec:	50 e4       	ldi	r21, 0x40	; 64
     5ee:	bc 01       	movw	r22, r24
     5f0:	cd 01       	movw	r24, r26
     5f2:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__mulsf3>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	44 e3       	ldi	r20, 0x34	; 52
     600:	53 e4       	ldi	r21, 0x43	; 67
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 2e 08 	call	0x105c	; 0x105c <__divsf3>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	bc 01       	movw	r22, r24
     610:	cd 01       	movw	r24, r26
     612:	0e 94 ca 09 	call	0x1394	; 0x1394 <sin>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	4e ef       	ldi	r20, 0xFE	; 254
     620:	52 e4       	ldi	r21, 0x42	; 66
     622:	bc 01       	movw	r22, r24
     624:	cd 01       	movw	r24, r26
     626:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__mulsf3>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	53 e4       	ldi	r21, 0x43	; 67
     636:	bc 01       	movw	r22, r24
     638:	cd 01       	movw	r24, r26
     63a:	0e 94 c2 07 	call	0xf84	; 0xf84 <__addsf3>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	ab 83       	std	Y+3, r26	; 0x03
     648:	bc 83       	std	Y+4, r27	; 0x04
			uint32_t floattoInt=(uint32_t)intensityLed;
     64a:	69 81       	ldd	r22, Y+1	; 0x01
     64c:	7a 81       	ldd	r23, Y+2	; 0x02
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fixunssfsi>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	8d 83       	std	Y+5, r24	; 0x05
     65c:	9e 83       	std	Y+6, r25	; 0x06
     65e:	af 83       	std	Y+7, r26	; 0x07
     660:	b8 87       	std	Y+8, r27	; 0x08
			intesityLedDiscrete=(uint8_t)(floattoInt&0xff);
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	89 85       	ldd	r24, Y+9	; 0x09
     666:	9a 85       	ldd	r25, Y+10	; 0x0a
     668:	fc 01       	movw	r30, r24
     66a:	21 af       	std	Z+57, r18	; 0x39
			LeftButtonGreenIntensity(intesityLedDiscrete);
     66c:	89 85       	ldd	r24, Y+9	; 0x09
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	fc 01       	movw	r30, r24
     672:	21 ad       	ldd	r18, Z+57	; 0x39
     674:	89 85       	ldd	r24, Y+9	; 0x09
     676:	9a 85       	ldd	r25, Y+10	; 0x0a
     678:	62 2f       	mov	r22, r18
     67a:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN15LedStateMachine24LeftButtonGreenIntensityEh>
			timedicrete++;
     67e:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
     682:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
     686:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
     68a:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	a1 1d       	adc	r26, r1
     692:	b1 1d       	adc	r27, r1
     694:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <__data_end>
     698:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <__data_end+0x1>
     69c:	a0 93 d2 21 	sts	0x21D2, r26	; 0x8021d2 <__data_end+0x2>
     6a0:	b0 93 d3 21 	sts	0x21D3, r27	; 0x8021d3 <__data_end+0x3>
		//}
}
     6a4:	00 00       	nop
     6a6:	2a 96       	adiw	r28, 0x0a	; 10
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <_ZN15LedStateMachine7HeatingEv>:
void LedStateMachine::Heating(void){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	1f 92       	push	r1
     6b8:	1f 92       	push	r1
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	9a 83       	std	Y+2, r25	; 0x02
		if (gc100msTick != old10mSec)
     6c2:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	fc 01       	movw	r30, r24
     6d4:	85 81       	ldd	r24, Z+5	; 0x05
     6d6:	96 81       	ldd	r25, Z+6	; 0x06
     6d8:	a7 81       	ldd	r26, Z+7	; 0x07
     6da:	b0 85       	ldd	r27, Z+8	; 0x08
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	4a 07       	cpc	r20, r26
     6e2:	5b 07       	cpc	r21, r27
     6e4:	d9 f1       	breq	.+118    	; 0x75c <_ZN15LedStateMachine7HeatingEv+0xaa>
		{
			old10mSec=gc100msTick;
     6e6:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	a0 e0       	ldi	r26, 0x00	; 0
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	29 81       	ldd	r18, Y+1	; 0x01
     6f4:	3a 81       	ldd	r19, Y+2	; 0x02
     6f6:	f9 01       	movw	r30, r18
     6f8:	85 83       	std	Z+5, r24	; 0x05
     6fa:	96 83       	std	Z+6, r25	; 0x06
     6fc:	a7 83       	std	Z+7, r26	; 0x07
     6fe:	b0 87       	std	Z+8, r27	; 0x08
	WhiteBarPulsing();
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	0e 94 36 02 	call	0x46c	; 0x46c <_ZN15LedStateMachine15WhiteBarPulsingEv>
 	timedicrete--;
     708:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <__data_end>
     70c:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <__data_end+0x1>
     710:	a0 91 d2 21 	lds	r26, 0x21D2	; 0x8021d2 <__data_end+0x2>
     714:	b0 91 d3 21 	lds	r27, 0x21D3	; 0x8021d3 <__data_end+0x3>
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	a1 09       	sbc	r26, r1
     71c:	b1 09       	sbc	r27, r1
     71e:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <__data_end>
     722:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <__data_end+0x1>
     726:	a0 93 d2 21 	sts	0x21D2, r26	; 0x8021d2 <__data_end+0x2>
     72a:	b0 93 d3 21 	sts	0x21D3, r27	; 0x8021d3 <__data_end+0x3>
	if (stateChange)
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	fc 01       	movw	r30, r24
     734:	80 81       	ld	r24, Z
     736:	81 70       	andi	r24, 0x01	; 1
     738:	88 23       	and	r24, r24
     73a:	61 f0       	breq	.+24     	; 0x754 <_ZN15LedStateMachine7HeatingEv+0xa2>
	{
		ledSetAllIndicatorColour(0,0,0);
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
		stateChange=false;
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	20 81       	ld	r18, Z
     74e:	2e 7f       	andi	r18, 0xFE	; 254
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
	}
 	LedLeftButtonGreenPulsing();
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN15LedStateMachine25LedLeftButtonGreenPulsingEv>
		}
	
}
     75c:	00 00       	nop
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv>:

void LedStateMachine::BlueBarDarkSpotScrolling(void){
     768:	0f 93       	push	r16
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	1f 92       	push	r1
     770:	1f 92       	push	r1
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	9a 83       	std	Y+2, r25	; 0x02
	
	if (gc1sTick != oldSec)
     77a:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc1sTick>
     77e:	28 2f       	mov	r18, r24
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	fc 01       	movw	r30, r24
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	92 81       	ldd	r25, Z+2	; 0x02
     790:	a3 81       	ldd	r26, Z+3	; 0x03
     792:	b4 81       	ldd	r27, Z+4	; 0x04
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	4a 07       	cpc	r20, r26
     79a:	5b 07       	cpc	r21, r27
     79c:	09 f4       	brne	.+2      	; 0x7a0 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x38>
     79e:	d2 c0       	rjmp	.+420    	; 0x944 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1dc>
	{
		
		 oldSec=gc1sTick;
     7a0:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc1sTick>
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	29 81       	ldd	r18, Y+1	; 0x01
     7ae:	3a 81       	ldd	r19, Y+2	; 0x02
     7b0:	f9 01       	movw	r30, r18
     7b2:	81 83       	std	Z+1, r24	; 0x01
     7b4:	92 83       	std	Z+2, r25	; 0x02
     7b6:	a3 83       	std	Z+3, r26	; 0x03
     7b8:	b4 83       	std	Z+4, r27	; 0x04
		if (ledIndexProgressBar<1)
     7ba:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     7be:	88 23       	and	r24, r24
     7c0:	d9 f4       	brne	.+54     	; 0x7f8 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x90>
		{
			ledSetProgressSegmentColour(ledIndexProgressBar,0, 0,0, 0);
     7c2:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
			ledSetProgressSegmentColour(ledIndexProgressBar+1,128, 0,0, 255);
     7d2:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
     7d8:	0f ef       	ldi	r16, 0xFF	; 255
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	60 e8       	ldi	r22, 0x80	; 128
     7e0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
			ledSetProgressSegmentColour(ledIndexProgressBar+2,255, 0,0, 255);
     7e4:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     7e8:	8e 5f       	subi	r24, 0xFE	; 254
     7ea:	0f ef       	ldi	r16, 0xFF	; 255
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	6f ef       	ldi	r22, 0xFF	; 255
     7f2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
     7f6:	9b c0       	rjmp	.+310    	; 0x92e <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
		} 
		else
		{
			if (ledIndexProgressBar<2)
     7f8:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	20 f5       	brcc	.+72     	; 0x848 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0xe0>
			{
					ledSetProgressSegmentColour(ledIndexProgressBar-1,128, 0,0, 255);
     800:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     804:	81 50       	subi	r24, 0x01	; 1
     806:	0f ef       	ldi	r16, 0xFF	; 255
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	60 e8       	ldi	r22, 0x80	; 128
     80e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar,0, 0,0, 0);
     812:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar+1,128, 0,0, 255);
     822:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     826:	8f 5f       	subi	r24, 0xFF	; 255
     828:	0f ef       	ldi	r16, 0xFF	; 255
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	60 e8       	ldi	r22, 0x80	; 128
     830:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar+2,255, 0,0, 255);
     834:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     838:	8e 5f       	subi	r24, 0xFE	; 254
     83a:	0f ef       	ldi	r16, 0xFF	; 255
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	6f ef       	ldi	r22, 0xFF	; 255
     842:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
     846:	73 c0       	rjmp	.+230    	; 0x92e <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
			} 
			else
			{
				if (ledIndexProgressBar<17)
     848:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     84c:	81 31       	cpi	r24, 0x11	; 17
     84e:	68 f5       	brcc	.+90     	; 0x8aa <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x142>
				{
					ledSetProgressSegmentColour(ledIndexProgressBar-2,255, 0,0, 255);
     850:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     854:	82 50       	subi	r24, 0x02	; 2
     856:	0f ef       	ldi	r16, 0xFF	; 255
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	6f ef       	ldi	r22, 0xFF	; 255
     85e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar-1,128, 0,0, 255);
     862:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     866:	81 50       	subi	r24, 0x01	; 1
     868:	0f ef       	ldi	r16, 0xFF	; 255
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	60 e8       	ldi	r22, 0x80	; 128
     870:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar,0, 0,0, 0);
     874:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar+1,128, 0,0, 255);
     884:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	0f ef       	ldi	r16, 0xFF	; 255
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	60 e8       	ldi	r22, 0x80	; 128
     892:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar+2,255, 0,0, 255);
     896:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     89a:	8e 5f       	subi	r24, 0xFE	; 254
     89c:	0f ef       	ldi	r16, 0xFF	; 255
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	6f ef       	ldi	r22, 0xFF	; 255
     8a4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
     8a8:	42 c0       	rjmp	.+132    	; 0x92e <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
				}
				else
				{
					if (ledIndexProgressBar<18)
     8aa:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     8ae:	82 31       	cpi	r24, 0x12	; 18
     8b0:	20 f5       	brcc	.+72     	; 0x8fa <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x192>
					{
						ledSetProgressSegmentColour(ledIndexProgressBar-2,255, 0,0, 255);
     8b2:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     8b6:	82 50       	subi	r24, 0x02	; 2
     8b8:	0f ef       	ldi	r16, 0xFF	; 255
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	6f ef       	ldi	r22, 0xFF	; 255
     8c0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
						ledSetProgressSegmentColour(ledIndexProgressBar-1,128, 0,0, 255);
     8c4:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     8c8:	81 50       	subi	r24, 0x01	; 1
     8ca:	0f ef       	ldi	r16, 0xFF	; 255
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	60 e8       	ldi	r22, 0x80	; 128
     8d2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
						ledSetProgressSegmentColour(ledIndexProgressBar,0, 0,0, 0);
     8d6:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
						ledSetProgressSegmentColour(ledIndexProgressBar+1,128, 0,0, 255);
     8e6:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     8ea:	8f 5f       	subi	r24, 0xFF	; 255
     8ec:	0f ef       	ldi	r16, 0xFF	; 255
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	60 e8       	ldi	r22, 0x80	; 128
     8f4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
     8f8:	1a c0       	rjmp	.+52     	; 0x92e <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
					}
					else
					{
						ledSetProgressSegmentColour(ledIndexProgressBar-2,255, 0,0, 255);
     8fa:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     8fe:	82 50       	subi	r24, 0x02	; 2
     900:	0f ef       	ldi	r16, 0xFF	; 255
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	6f ef       	ldi	r22, 0xFF	; 255
     908:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
						ledSetProgressSegmentColour(ledIndexProgressBar-1,128, 0,0, 255);
     90c:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     910:	81 50       	subi	r24, 0x01	; 1
     912:	0f ef       	ldi	r16, 0xFF	; 255
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	60 e8       	ldi	r22, 0x80	; 128
     91a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
						ledSetProgressSegmentColour(ledIndexProgressBar,0, 0,0, 0);
     91e:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
		
			
	
		
	/*	}*/
		ledIndexProgressBar++;
     92e:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <_ZL19ledIndexProgressBar>
		if (ledIndexProgressBar>19)
     938:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     93c:	84 31       	cpi	r24, 0x14	; 20
     93e:	10 f0       	brcs	.+4      	; 0x944 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1dc>
		{
			ledIndexProgressBar=0;
     940:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <_ZL19ledIndexProgressBar>
		}


	}
}
     944:	00 00       	nop
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <_ZN15LedStateMachine7FillingEv>:

void LedStateMachine::Filling(void){
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	1f 92       	push	r1
     958:	1f 92       	push	r1
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	9a 83       	std	Y+2, r25	; 0x02
	BlueBarDarkSpotScrolling();
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv>
	ledSetLeftButtonColourInt(255,0,0,255);
     96a:	2f ef       	ldi	r18, 0xFF	; 255
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ledSetLeftButtonColourInt>
	ledSetAllIndicatorColour(0,0,0);
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
}
     980:	00 00       	nop
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <_ZN15LedStateMachine5ReadyEv>:

void	LedStateMachine::Ready(void){
     98c:	0f 93       	push	r16
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	00 d0       	rcall	.+0      	; 0x994 <_ZN15LedStateMachine5ReadyEv+0x8>
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	8a 83       	std	Y+2, r24	; 0x02
     99a:	9b 83       	std	Y+3, r25	; 0x03
	if (gc100msTick != old10mSec)
     99c:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     9a0:	28 2f       	mov	r18, r24
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	9b 81       	ldd	r25, Y+3	; 0x03
     9ac:	fc 01       	movw	r30, r24
     9ae:	85 81       	ldd	r24, Z+5	; 0x05
     9b0:	96 81       	ldd	r25, Z+6	; 0x06
     9b2:	a7 81       	ldd	r26, Z+7	; 0x07
     9b4:	b0 85       	ldd	r27, Z+8	; 0x08
     9b6:	28 17       	cp	r18, r24
     9b8:	39 07       	cpc	r19, r25
     9ba:	4a 07       	cpc	r20, r26
     9bc:	5b 07       	cpc	r21, r27
     9be:	11 f1       	breq	.+68     	; 0xa04 <_ZN15LedStateMachine5ReadyEv+0x78>
	{
		old10mSec=gc100msTick;
     9c0:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     9c4:	88 2f       	mov	r24, r24
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	2a 81       	ldd	r18, Y+2	; 0x02
     9ce:	3b 81       	ldd	r19, Y+3	; 0x03
     9d0:	f9 01       	movw	r30, r18
     9d2:	85 83       	std	Z+5, r24	; 0x05
     9d4:	96 83       	std	Z+6, r25	; 0x06
     9d6:	a7 83       	std	Z+7, r26	; 0x07
     9d8:	b0 87       	std	Z+8, r27	; 0x08
		ledSetLeftButtonColourInt(255,0,255,0);
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	4f ef       	ldi	r20, 0xFF	; 255
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ledSetLeftButtonColourInt>
		for (uint8_t step=0; step < 20; step++)
     9e6:	19 82       	std	Y+1, r1	; 0x01
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	84 31       	cpi	r24, 0x14	; 20
     9ec:	58 f4       	brcc	.+22     	; 0xa04 <_ZN15LedStateMachine5ReadyEv+0x78>
		{
			ledSetProgressSegmentColour(step,255, 0,81, 0);
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	21 e5       	ldi	r18, 0x51	; 81
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	6f ef       	ldi	r22, 0xFF	; 255
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
void	LedStateMachine::Ready(void){
	if (gc100msTick != old10mSec)
	{
		old10mSec=gc100msTick;
		ledSetLeftButtonColourInt(255,0,255,0);
		for (uint8_t step=0; step < 20; step++)
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	f2 cf       	rjmp	.-28     	; 0x9e8 <_ZN15LedStateMachine5ReadyEv+0x5c>
		{
			ledSetProgressSegmentColour(step,255, 0,81, 0);
			
		}
	}
}
     a04:	00 00       	nop
     a06:	23 96       	adiw	r28, 0x03	; 3
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <_ZN15LedStateMachine11WaitNoWaterEv>:

void LedStateMachine::WaitNoWater(void){
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	1f 92       	push	r1
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	9a 83       	std	Y+2, r25	; 0x02

	WaitState();
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	0e 94 60 05 	call	0xac0	; 0xac0 <_ZN15LedStateMachine9WaitStateEv>
	if (stateChange)
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	81 70       	andi	r24, 0x01	; 1
     a36:	88 23       	and	r24, r24
     a38:	61 f0       	breq	.+24     	; 0xa52 <_ZN15LedStateMachine11WaitNoWaterEv+0x3e>
	{
		ledSetAllIndicatorColour(0,0,0);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
		stateChange=false;
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	fc 01       	movw	r30, r24
     a4a:	20 81       	ld	r18, Z
     a4c:	2e 7f       	andi	r18, 0xFE	; 254
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
	}
	ledSetIndicatorColour(1, 81, 81, 81);			
     a52:	21 e5       	ldi	r18, 0x51	; 81
     a54:	41 e5       	ldi	r20, 0x51	; 81
     a56:	61 e5       	ldi	r22, 0x51	; 81
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ledSetIndicatorColour>
}
     a5e:	00 00       	nop
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <_ZN15LedStateMachine19WaitOverTemperatureEv>:

void LedStateMachine::WaitOverTemperature(void){
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	1f 92       	push	r1
     a70:	1f 92       	push	r1
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	9a 83       	std	Y+2, r25	; 0x02

	WaitState();
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	0e 94 60 05 	call	0xac0	; 0xac0 <_ZN15LedStateMachine9WaitStateEv>
	if (stateChange)
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	fc 01       	movw	r30, r24
     a88:	80 81       	ld	r24, Z
     a8a:	81 70       	andi	r24, 0x01	; 1
     a8c:	88 23       	and	r24, r24
     a8e:	61 f0       	breq	.+24     	; 0xaa8 <_ZN15LedStateMachine19WaitOverTemperatureEv+0x3e>
	{
		ledSetAllIndicatorColour(0,0,0);
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
		stateChange=false;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 81       	ld	r18, Z
     aa2:	2e 7f       	andi	r18, 0xFE	; 254
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
	}
	ledSetIndicatorColour(3, 81, 40, 40);
     aa8:	28 e2       	ldi	r18, 0x28	; 40
     aaa:	48 e2       	ldi	r20, 0x28	; 40
     aac:	61 e5       	ldi	r22, 0x51	; 81
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ledSetIndicatorColour>
}
     ab4:	00 00       	nop
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <_ZN15LedStateMachine9WaitStateEv>:

void LedStateMachine::WaitState(void){
     ac0:	0f 93       	push	r16
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	1f 92       	push	r1
     ac8:	1f 92       	push	r1
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	9a 83       	std	Y+2, r25	; 0x02

	if (gc1sTick != oldSec)
     ad2:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc1sTick>
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	fc 01       	movw	r30, r24
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	92 81       	ldd	r25, Z+2	; 0x02
     ae8:	a3 81       	ldd	r26, Z+3	; 0x03
     aea:	b4 81       	ldd	r27, Z+4	; 0x04
     aec:	28 17       	cp	r18, r24
     aee:	39 07       	cpc	r19, r25
     af0:	4a 07       	cpc	r20, r26
     af2:	5b 07       	cpc	r21, r27
     af4:	09 f4       	brne	.+2      	; 0xaf8 <_ZN15LedStateMachine9WaitStateEv+0x38>
     af6:	83 c0       	rjmp	.+262    	; 0xbfe <_ZN15LedStateMachine9WaitStateEv+0x13e>
	{
		
		oldSec=gc1sTick;
     af8:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc1sTick>
     afc:	88 2f       	mov	r24, r24
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	3a 81       	ldd	r19, Y+2	; 0x02
     b08:	f9 01       	movw	r30, r18
     b0a:	81 83       	std	Z+1, r24	; 0x01
     b0c:	92 83       	std	Z+2, r25	; 0x02
     b0e:	a3 83       	std	Z+3, r26	; 0x03
     b10:	b4 83       	std	Z+4, r27	; 0x04
		if (ledIndexProgressBar<1)
     b12:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b16:	88 23       	and	r24, r24
     b18:	01 f5       	brne	.+64     	; 0xb5a <_ZN15LedStateMachine9WaitStateEv+0x9a>
		{
			ledSetProgressSegmentColour(18,0, 0,0, 0);
     b1a:	00 e0       	ldi	r16, 0x00	; 0
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	82 e1       	ldi	r24, 0x12	; 18
     b24:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
			ledSetProgressSegmentColour(19,0, 0,0, 0);
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	83 e1       	ldi	r24, 0x13	; 19
     b32:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
			ledSetProgressSegmentColour(ledIndexProgressBar,255, 81,81, 81);
     b36:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b3a:	01 e5       	ldi	r16, 0x51	; 81
     b3c:	21 e5       	ldi	r18, 0x51	; 81
     b3e:	41 e5       	ldi	r20, 0x51	; 81
     b40:	6f ef       	ldi	r22, 0xFF	; 255
     b42:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
			ledSetProgressSegmentColour(ledIndexProgressBar+1,128,  81,81, 81);
     b46:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	01 e5       	ldi	r16, 0x51	; 81
     b4e:	21 e5       	ldi	r18, 0x51	; 81
     b50:	41 e5       	ldi	r20, 0x51	; 81
     b52:	60 e8       	ldi	r22, 0x80	; 128
     b54:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
     b58:	46 c0       	rjmp	.+140    	; 0xbe6 <_ZN15LedStateMachine9WaitStateEv+0x126>
			
		}
		else
		{
			if (ledIndexProgressBar<2)
     b5a:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	d8 f4       	brcc	.+54     	; 0xb98 <_ZN15LedStateMachine9WaitStateEv+0xd8>
			{
				ledSetProgressSegmentColour(ledIndexProgressBar-1,128, 81,81, 81);
     b62:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b66:	81 50       	subi	r24, 0x01	; 1
     b68:	01 e5       	ldi	r16, 0x51	; 81
     b6a:	21 e5       	ldi	r18, 0x51	; 81
     b6c:	41 e5       	ldi	r20, 0x51	; 81
     b6e:	60 e8       	ldi	r22, 0x80	; 128
     b70:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(ledIndexProgressBar,255, 81,81, 81);
     b74:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b78:	01 e5       	ldi	r16, 0x51	; 81
     b7a:	21 e5       	ldi	r18, 0x51	; 81
     b7c:	41 e5       	ldi	r20, 0x51	; 81
     b7e:	6f ef       	ldi	r22, 0xFF	; 255
     b80:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(ledIndexProgressBar+1,128,  81,81, 81);
     b84:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	01 e5       	ldi	r16, 0x51	; 81
     b8c:	21 e5       	ldi	r18, 0x51	; 81
     b8e:	41 e5       	ldi	r20, 0x51	; 81
     b90:	60 e8       	ldi	r22, 0x80	; 128
     b92:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
     b96:	27 c0       	rjmp	.+78     	; 0xbe6 <_ZN15LedStateMachine9WaitStateEv+0x126>
				
			}
			else
			{
				if (ledIndexProgressBar<20)
     b98:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     b9c:	84 31       	cpi	r24, 0x14	; 20
     b9e:	18 f5       	brcc	.+70     	; 0xbe6 <_ZN15LedStateMachine9WaitStateEv+0x126>
				{
					ledSetProgressSegmentColour(ledIndexProgressBar-2,0, 0,0, 0);
     ba0:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     ba4:	82 50       	subi	r24, 0x02	; 2
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar-1,128, 81,81, 81);
     bb2:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     bb6:	81 50       	subi	r24, 0x01	; 1
     bb8:	01 e5       	ldi	r16, 0x51	; 81
     bba:	21 e5       	ldi	r18, 0x51	; 81
     bbc:	41 e5       	ldi	r20, 0x51	; 81
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar,255, 81,81, 81);
     bc4:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     bc8:	01 e5       	ldi	r16, 0x51	; 81
     bca:	21 e5       	ldi	r18, 0x51	; 81
     bcc:	41 e5       	ldi	r20, 0x51	; 81
     bce:	6f ef       	ldi	r22, 0xFF	; 255
     bd0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					ledSetProgressSegmentColour(ledIndexProgressBar+1,128,  81,81, 81);
     bd4:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	01 e5       	ldi	r16, 0x51	; 81
     bdc:	21 e5       	ldi	r18, 0x51	; 81
     bde:	41 e5       	ldi	r20, 0x51	; 81
     be0:	60 e8       	ldi	r22, 0x80	; 128
     be2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
					
				}
			}
			
		}
		ledIndexProgressBar++;
     be6:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <_ZL19ledIndexProgressBar>
		if (ledIndexProgressBar>19)
     bf0:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <_ZL19ledIndexProgressBar>
     bf4:	84 31       	cpi	r24, 0x14	; 20
     bf6:	30 f1       	brcs	.+76     	; 0xc44 <_ZN15LedStateMachine9WaitStateEv+0x184>
		{
			ledIndexProgressBar=0;
     bf8:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <_ZL19ledIndexProgressBar>
		}
	}

	

}
     bfc:	23 c0       	rjmp	.+70     	; 0xc44 <_ZN15LedStateMachine9WaitStateEv+0x184>
		{
			ledIndexProgressBar=0;
		}
		
		}else{
		if (gc100msTick != old10mSec)
     bfe:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	fc 01       	movw	r30, r24
     c10:	85 81       	ldd	r24, Z+5	; 0x05
     c12:	96 81       	ldd	r25, Z+6	; 0x06
     c14:	a7 81       	ldd	r26, Z+7	; 0x07
     c16:	b0 85       	ldd	r27, Z+8	; 0x08
     c18:	28 17       	cp	r18, r24
     c1a:	39 07       	cpc	r19, r25
     c1c:	4a 07       	cpc	r20, r26
     c1e:	5b 07       	cpc	r21, r27
     c20:	89 f0       	breq	.+34     	; 0xc44 <_ZN15LedStateMachine9WaitStateEv+0x184>
		{
			old10mSec=gc100msTick;
     c22:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	29 81       	ldd	r18, Y+1	; 0x01
     c30:	3a 81       	ldd	r19, Y+2	; 0x02
     c32:	f9 01       	movw	r30, r18
     c34:	85 83       	std	Z+5, r24	; 0x05
     c36:	96 83       	std	Z+6, r25	; 0x06
     c38:	a7 83       	std	Z+7, r26	; 0x07
     c3a:	b0 87       	std	Z+8, r27	; 0x08
			LedLeftButtonGreenPulsing();
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN15LedStateMachine25LedLeftButtonGreenPulsingEv>
		}
	}

	

}
     c44:	00 00       	nop
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <_ZN15LedStateMachine13FaultLowWaterEv>:

void LedStateMachine::FaultLowWater(void){
     c52:	0f 93       	push	r16
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <_ZN15LedStateMachine13FaultLowWaterEv+0x8>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	9b 83       	std	Y+3, r25	; 0x03
	if (stateChange)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	81 70       	andi	r24, 0x01	; 1
     c6c:	88 23       	and	r24, r24
     c6e:	61 f0       	breq	.+24     	; 0xc88 <_ZN15LedStateMachine13FaultLowWaterEv+0x36>
	{
		ledSetAllIndicatorColour(0,0,0);
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
		stateChange=false;
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	9b 81       	ldd	r25, Y+3	; 0x03
     c7e:	fc 01       	movw	r30, r24
     c80:	20 81       	ld	r18, Z
     c82:	2e 7f       	andi	r18, 0xFE	; 254
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18
	}
	ledSetIndicatorColour(1, 81, 81, 81);
     c88:	21 e5       	ldi	r18, 0x51	; 81
     c8a:	41 e5       	ldi	r20, 0x51	; 81
     c8c:	61 e5       	ldi	r22, 0x51	; 81
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ledSetIndicatorColour>
	ledSetLeftButtonColourInt(255,81,60, 8);
     c94:	28 e0       	ldi	r18, 0x08	; 8
     c96:	4c e3       	ldi	r20, 0x3C	; 60
     c98:	61 e5       	ldi	r22, 0x51	; 81
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ledSetLeftButtonColourInt>
	for (uint8_t step=0; step < 20; step++)
     ca0:	19 82       	std	Y+1, r1	; 0x01
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	84 31       	cpi	r24, 0x14	; 20
     ca6:	58 f4       	brcc	.+22     	; 0xcbe <_ZN15LedStateMachine13FaultLowWaterEv+0x6c>
	{
		ledSetProgressSegmentColour(step,255, 81,60, 8);
     ca8:	08 e0       	ldi	r16, 0x08	; 8
     caa:	2c e3       	ldi	r18, 0x3C	; 60
     cac:	41 e5       	ldi	r20, 0x51	; 81
     cae:	6f ef       	ldi	r22, 0xFF	; 255
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
		ledSetAllIndicatorColour(0,0,0);
		stateChange=false;
	}
	ledSetIndicatorColour(1, 81, 81, 81);
	ledSetLeftButtonColourInt(255,81,60, 8);
	for (uint8_t step=0; step < 20; step++)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	f2 cf       	rjmp	.-28     	; 0xca2 <_ZN15LedStateMachine13FaultLowWaterEv+0x50>
	{
		ledSetProgressSegmentColour(step,255, 81,60, 8);
		
	}
}
     cbe:	00 00       	nop
     cc0:	23 96       	adiw	r28, 0x03	; 3
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <_ZN15LedStateMachine21FaultOvertemeperatureEv>:
void LedStateMachine::FaultOvertemeperature(void){
     cce:	0f 93       	push	r16
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x8>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	8a 83       	std	Y+2, r24	; 0x02
     cdc:	9b 83       	std	Y+3, r25	; 0x03
	if (stateChange)
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	81 70       	andi	r24, 0x01	; 1
     ce8:	88 23       	and	r24, r24
     cea:	61 f0       	breq	.+24     	; 0xd04 <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x36>
	{
		 ledSetAllIndicatorColour(0,0,0);
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
		 stateChange=false;
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 81       	ld	r18, Z
     cfe:	2e 7f       	andi	r18, 0xFE	; 254
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18
	}
	
	ledSetIndicatorColour(3, 81, 40, 40);
     d04:	28 e2       	ldi	r18, 0x28	; 40
     d06:	48 e2       	ldi	r20, 0x28	; 40
     d08:	61 e5       	ldi	r22, 0x51	; 81
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ledSetIndicatorColour>
	ledSetLeftButtonColourInt(255,81,60, 8);
     d10:	28 e0       	ldi	r18, 0x08	; 8
     d12:	4c e3       	ldi	r20, 0x3C	; 60
     d14:	61 e5       	ldi	r22, 0x51	; 81
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ledSetLeftButtonColourInt>
	for (uint8_t step=0; step < 20; step++)
     d1c:	19 82       	std	Y+1, r1	; 0x01
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	84 31       	cpi	r24, 0x14	; 20
     d22:	58 f4       	brcc	.+22     	; 0xd3a <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x6c>
	{
		ledSetProgressSegmentColour(step,255, 81,60, 8);
     d24:	08 e0       	ldi	r16, 0x08	; 8
     d26:	2c e3       	ldi	r18, 0x3C	; 60
     d28:	41 e5       	ldi	r20, 0x51	; 81
     d2a:	6f ef       	ldi	r22, 0xFF	; 255
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
		 stateChange=false;
	}
	
	ledSetIndicatorColour(3, 81, 40, 40);
	ledSetLeftButtonColourInt(255,81,60, 8);
	for (uint8_t step=0; step < 20; step++)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	f2 cf       	rjmp	.-28     	; 0xd1e <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x50>
	{
		ledSetProgressSegmentColour(step,255, 81,60, 8);
		
	}
}
     d3a:	00 00       	nop
     d3c:	23 96       	adiw	r28, 0x03	; 3
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	0f 91       	pop	r16
     d48:	08 95       	ret

00000d4a <_ZN15LedStateMachine13FaultDrainageEv>:
void LedStateMachine::FaultDrainage(void){
     d4a:	0f 93       	push	r16
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	00 d0       	rcall	.+0      	; 0xd52 <_ZN15LedStateMachine13FaultDrainageEv+0x8>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	8a 83       	std	Y+2, r24	; 0x02
     d58:	9b 83       	std	Y+3, r25	; 0x03
	 if (stateChange)
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	fc 01       	movw	r30, r24
     d60:	80 81       	ld	r24, Z
     d62:	81 70       	andi	r24, 0x01	; 1
     d64:	88 23       	and	r24, r24
     d66:	61 f0       	breq	.+24     	; 0xd80 <_ZN15LedStateMachine13FaultDrainageEv+0x36>
	 {
		 ledSetAllIndicatorColour(0,0,0);
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
		 stateChange=false;
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	fc 01       	movw	r30, r24
     d78:	20 81       	ld	r18, Z
     d7a:	2e 7f       	andi	r18, 0xFE	; 254
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
	 }
	ledSetIndicatorColour(2, 40, 40, 81);
     d80:	21 e5       	ldi	r18, 0x51	; 81
     d82:	48 e2       	ldi	r20, 0x28	; 40
     d84:	68 e2       	ldi	r22, 0x28	; 40
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ledSetIndicatorColour>
	ledSetLeftButtonColourInt(255,81,60, 8);
     d8c:	28 e0       	ldi	r18, 0x08	; 8
     d8e:	4c e3       	ldi	r20, 0x3C	; 60
     d90:	61 e5       	ldi	r22, 0x51	; 81
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ledSetLeftButtonColourInt>
	for (uint8_t step=0; step < 20; step++)
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	84 31       	cpi	r24, 0x14	; 20
     d9e:	58 f4       	brcc	.+22     	; 0xdb6 <_ZN15LedStateMachine13FaultDrainageEv+0x6c>
	{
		ledSetProgressSegmentColour(step,255, 81,60, 8);
     da0:	08 e0       	ldi	r16, 0x08	; 8
     da2:	2c e3       	ldi	r18, 0x3C	; 60
     da4:	41 e5       	ldi	r20, 0x51	; 81
     da6:	6f ef       	ldi	r22, 0xFF	; 255
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
		 ledSetAllIndicatorColour(0,0,0);
		 stateChange=false;
	 }
	ledSetIndicatorColour(2, 40, 40, 81);
	ledSetLeftButtonColourInt(255,81,60, 8);
	for (uint8_t step=0; step < 20; step++)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	f2 cf       	rjmp	.-28     	; 0xd9a <_ZN15LedStateMachine13FaultDrainageEv+0x50>
	{
		ledSetProgressSegmentColour(step,255, 81,60, 8);
		
	}
}
     db6:	00 00       	nop
     db8:	23 96       	adiw	r28, 0x03	; 3
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <_ZN15LedStateMachine12HandleStatesEh>:

void LedStateMachine::HandleStates(uint8_t index){
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <_ZN15LedStateMachine12HandleStatesEh+0x6>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	6b 83       	std	Y+3, r22	; 0x03
	switch (index)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	09 2e       	mov	r0, r25
     dde:	00 0c       	add	r0, r0
     de0:	aa 0b       	sbc	r26, r26
     de2:	bb 0b       	sbc	r27, r27
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	28 e0       	ldi	r18, 0x08	; 8
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	84 1b       	sub	r24, r20
     dee:	95 0b       	sbc	r25, r21
     df0:	28 17       	cp	r18, r24
     df2:	39 07       	cpc	r19, r25
     df4:	a0 f1       	brcs	.+104    	; 0xe5e <_ZN15LedStateMachine12HandleStatesEh+0x98>
     df6:	fc 01       	movw	r30, r24
     df8:	88 27       	eor	r24, r24
     dfa:	ec 51       	subi	r30, 0x1C	; 28
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__tablejump2__>
	{
		case kStandbyOff:
		/* Your code here */
			StandbyOff();
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN15LedStateMachine10StandbyOffEv>
		break;
     e0c:	2d c0       	rjmp	.+90     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kFilling:
			Filling();
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN15LedStateMachine7FillingEv>
			break;
     e16:	28 c0       	rjmp	.+80     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kHeating:
			Heating();
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN15LedStateMachine7HeatingEv>
			break;
     e20:	23 c0       	rjmp	.+70     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kReady:
			Ready();
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN15LedStateMachine5ReadyEv>
			break;
     e2a:	1e c0       	rjmp	.+60     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kWaitNotWater:
			WaitNoWater();
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN15LedStateMachine11WaitNoWaterEv>
			break;
     e34:	19 c0       	rjmp	.+50     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kWaitOvertemperature:
			WaitOverTemperature();
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN15LedStateMachine19WaitOverTemperatureEv>
			break;
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kFaultLowWater:
			FaultLowWater();
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN15LedStateMachine13FaultLowWaterEv>
			break;
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kFaultOvertemperature:
			FaultOvertemeperature();
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN15LedStateMachine21FaultOvertemeperatureEv>
			break;
     e52:	0a c0       	rjmp	.+20     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		case kFaultDrainage:
			FaultDrainage();
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN15LedStateMachine13FaultDrainageEv>
			break;
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
		default:
		/* Your code here */
			WaitNoWater();
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN15LedStateMachine11WaitNoWaterEv>
		break;
     e66:	00 00       	nop
	}
}
     e68:	00 00       	nop
     e6a:	23 96       	adiw	r28, 0x03	; 3
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <_ZN15LedStateMachine9RunManualEv>:

void	LedStateMachine::RunManual(void){
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	1f 92       	push	r1
     e7c:	1f 92       	push	r1
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	9a 83       	std	Y+2, r25	; 0x02
	while (1)
	{
		RunPeriodicTask();
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN15LedStateMachine15RunPeriodicTaskEv>
		if (gButtonStates_Array[1].m_bActive_Confirmed==true)
     e8e:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <gButtonStates_Array+0x9>
     e92:	86 95       	lsr	r24
     e94:	81 70       	andi	r24, 0x01	; 1
     e96:	88 23       	and	r24, r24
     e98:	a9 f0       	breq	.+42     	; 0xec4 <_ZN15LedStateMachine9RunManualEv+0x4e>
		{
			stateIndex++;
     e9a:	80 91 d5 21 	lds	r24, 0x21D5	; 0x8021d5 <_ZL10stateIndex>
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <_ZL10stateIndex>
			while (gButtonStates_Array[1].m_bUnconfirmedState_Active==true)
     ea4:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <gButtonStates_Array+0x9>
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	88 23       	and	r24, r24
     eac:	19 f0       	breq	.+6      	; 0xeb4 <_ZN15LedStateMachine9RunManualEv+0x3e>
			{
				btnManageButtonScan();	
     eae:	0e 94 0c 0c 	call	0x1818	; 0x1818 <btnManageButtonScan>
	{
		RunPeriodicTask();
		if (gButtonStates_Array[1].m_bActive_Confirmed==true)
		{
			stateIndex++;
			while (gButtonStates_Array[1].m_bUnconfirmedState_Active==true)
     eb2:	f8 cf       	rjmp	.-16     	; 0xea4 <_ZN15LedStateMachine9RunManualEv+0x2e>
			{
				btnManageButtonScan();	
			}
			asm("nop");
     eb4:	00 00       	nop
			stateChange=true;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	fc 01       	movw	r30, r24
     ebc:	20 81       	ld	r18, Z
     ebe:	21 60       	ori	r18, 0x01	; 1
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
		}
		if (stateIndex>=kNumberStates)
     ec4:	80 91 d5 21 	lds	r24, 0x21D5	; 0x8021d5 <_ZL10stateIndex>
     ec8:	8a 30       	cpi	r24, 0x0A	; 10
     eca:	18 f0       	brcs	.+6      	; 0xed2 <_ZN15LedStateMachine9RunManualEv+0x5c>
		{
			stateIndex=1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <_ZL10stateIndex>
		}
		HandleStates(stateIndex);
     ed2:	20 91 d5 21 	lds	r18, 0x21D5	; 0x8021d5 <_ZL10stateIndex>
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	62 2f       	mov	r22, r18
     edc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_ZN15LedStateMachine12HandleStatesEh>
		break;
	}
}

void	LedStateMachine::RunManual(void){
	while (1)
     ee0:	d2 cf       	rjmp	.-92     	; 0xe86 <_ZN15LedStateMachine9RunManualEv+0x10>

00000ee2 <main>:
#include "main.h"

static LedStateMachine hmi;

int main(void)
{
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	hmi.Init();
     eea:	86 ed       	ldi	r24, 0xD6	; 214
     eec:	91 e2       	ldi	r25, 0x21	; 33
     eee:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN15LedStateMachine4InitEv>
    /* Replace with your application code */
    while (1) 
    {
		hmi.RunManual();
     ef2:	86 ed       	ldi	r24, 0xD6	; 214
     ef4:	91 e2       	ldi	r25, 0x21	; 33
     ef6:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN15LedStateMachine9RunManualEv>

int main(void)
{
	hmi.Init();
    /* Replace with your application code */
    while (1) 
     efa:	fb cf       	rjmp	.-10     	; 0xef2 <main+0x10>

00000efc <_Z41__static_initialization_and_destruction_0ii>:
	//	hmi.WaitOverTemperature();
	//hmi.FaultLowWater();
	//	hmi.FaultOvertemeperature();
		//hmi.FaultDrainage();
    }
}
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	00 d0       	rcall	.+0      	; 0xf02 <_Z41__static_initialization_and_destruction_0ii+0x6>
     f02:	1f 92       	push	r1
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	6b 83       	std	Y+3, r22	; 0x03
     f0e:	7c 83       	std	Y+4, r23	; 0x04
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	41 f4       	brne	.+16     	; 0xf28 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	21 f4       	brne	.+8      	; 0xf28 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 * Author : GMateusDP
 */ 

#include "main.h"

static LedStateMachine hmi;
     f20:	86 ed       	ldi	r24, 0xD6	; 214
     f22:	91 e2       	ldi	r25, 0x21	; 33
     f24:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN15LedStateMachineC1Ev>
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	89 2b       	or	r24, r25
     f2e:	41 f4       	brne	.+16     	; 0xf40 <_Z41__static_initialization_and_destruction_0ii+0x44>
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	21 f4       	brne	.+8      	; 0xf40 <_Z41__static_initialization_and_destruction_0ii+0x44>
     f38:	86 ed       	ldi	r24, 0xD6	; 214
     f3a:	91 e2       	ldi	r25, 0x21	; 33
     f3c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN15LedStateMachineD1Ev>
	//	hmi.WaitOverTemperature();
	//hmi.FaultLowWater();
	//	hmi.FaultOvertemeperature();
		//hmi.FaultDrainage();
    }
}
     f40:	00 00       	nop
     f42:	24 96       	adiw	r28, 0x04	; 4
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <_GLOBAL__sub_I_main>:
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	6f ef       	ldi	r22, 0xFF	; 255
     f58:	7f ef       	ldi	r23, 0xFF	; 255
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 7e 07 	call	0xefc	; 0xefc <_Z41__static_initialization_and_destruction_0ii>
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <_GLOBAL__sub_D_main>:
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	6f ef       	ldi	r22, 0xFF	; 255
     f72:	7f ef       	ldi	r23, 0xFF	; 255
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 7e 07 	call	0xefc	; 0xefc <_Z41__static_initialization_and_destruction_0ii>
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <__subsf3>:
     f82:	50 58       	subi	r21, 0x80	; 128

00000f84 <__addsf3>:
     f84:	bb 27       	eor	r27, r27
     f86:	aa 27       	eor	r26, r26
     f88:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3x>
     f8c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_round>
     f90:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_pscA>
     f94:	38 f0       	brcs	.+14     	; 0xfa4 <__addsf3+0x20>
     f96:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_pscB>
     f9a:	20 f0       	brcs	.+8      	; 0xfa4 <__addsf3+0x20>
     f9c:	39 f4       	brne	.+14     	; 0xfac <__addsf3+0x28>
     f9e:	9f 3f       	cpi	r25, 0xFF	; 255
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <__addsf3+0x24>
     fa2:	26 f4       	brtc	.+8      	; 0xfac <__addsf3+0x28>
     fa4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_nan>
     fa8:	0e f4       	brtc	.+2      	; 0xfac <__addsf3+0x28>
     faa:	e0 95       	com	r30
     fac:	e7 fb       	bst	r30, 7
     fae:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_inf>

00000fb2 <__addsf3x>:
     fb2:	e9 2f       	mov	r30, r25
     fb4:	0e 94 34 09 	call	0x1268	; 0x1268 <__fp_split3>
     fb8:	58 f3       	brcs	.-42     	; 0xf90 <__addsf3+0xc>
     fba:	ba 17       	cp	r27, r26
     fbc:	62 07       	cpc	r22, r18
     fbe:	73 07       	cpc	r23, r19
     fc0:	84 07       	cpc	r24, r20
     fc2:	95 07       	cpc	r25, r21
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__addsf3x+0x1c>
     fc6:	79 f4       	brne	.+30     	; 0xfe6 <__addsf3x+0x34>
     fc8:	a6 f5       	brtc	.+104    	; 0x1032 <__addsf3x+0x80>
     fca:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__fp_zero>
     fce:	0e f4       	brtc	.+2      	; 0xfd2 <__addsf3x+0x20>
     fd0:	e0 95       	com	r30
     fd2:	0b 2e       	mov	r0, r27
     fd4:	ba 2f       	mov	r27, r26
     fd6:	a0 2d       	mov	r26, r0
     fd8:	0b 01       	movw	r0, r22
     fda:	b9 01       	movw	r22, r18
     fdc:	90 01       	movw	r18, r0
     fde:	0c 01       	movw	r0, r24
     fe0:	ca 01       	movw	r24, r20
     fe2:	a0 01       	movw	r20, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	ff 27       	eor	r31, r31
     fe8:	59 1b       	sub	r21, r25
     fea:	99 f0       	breq	.+38     	; 0x1012 <__addsf3x+0x60>
     fec:	59 3f       	cpi	r21, 0xF9	; 249
     fee:	50 f4       	brcc	.+20     	; 0x1004 <__addsf3x+0x52>
     ff0:	50 3e       	cpi	r21, 0xE0	; 224
     ff2:	68 f1       	brcs	.+90     	; 0x104e <__addsf3x+0x9c>
     ff4:	1a 16       	cp	r1, r26
     ff6:	f0 40       	sbci	r31, 0x00	; 0
     ff8:	a2 2f       	mov	r26, r18
     ffa:	23 2f       	mov	r18, r19
     ffc:	34 2f       	mov	r19, r20
     ffe:	44 27       	eor	r20, r20
    1000:	58 5f       	subi	r21, 0xF8	; 248
    1002:	f3 cf       	rjmp	.-26     	; 0xfea <__addsf3x+0x38>
    1004:	46 95       	lsr	r20
    1006:	37 95       	ror	r19
    1008:	27 95       	ror	r18
    100a:	a7 95       	ror	r26
    100c:	f0 40       	sbci	r31, 0x00	; 0
    100e:	53 95       	inc	r21
    1010:	c9 f7       	brne	.-14     	; 0x1004 <__addsf3x+0x52>
    1012:	7e f4       	brtc	.+30     	; 0x1032 <__addsf3x+0x80>
    1014:	1f 16       	cp	r1, r31
    1016:	ba 0b       	sbc	r27, r26
    1018:	62 0b       	sbc	r22, r18
    101a:	73 0b       	sbc	r23, r19
    101c:	84 0b       	sbc	r24, r20
    101e:	ba f0       	brmi	.+46     	; 0x104e <__addsf3x+0x9c>
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	a1 f0       	breq	.+40     	; 0x104c <__addsf3x+0x9a>
    1024:	ff 0f       	add	r31, r31
    1026:	bb 1f       	adc	r27, r27
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	c2 f7       	brpl	.-16     	; 0x1020 <__addsf3x+0x6e>
    1030:	0e c0       	rjmp	.+28     	; 0x104e <__addsf3x+0x9c>
    1032:	ba 0f       	add	r27, r26
    1034:	62 1f       	adc	r22, r18
    1036:	73 1f       	adc	r23, r19
    1038:	84 1f       	adc	r24, r20
    103a:	48 f4       	brcc	.+18     	; 0x104e <__addsf3x+0x9c>
    103c:	87 95       	ror	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b7 95       	ror	r27
    1044:	f7 95       	ror	r31
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	08 f0       	brcs	.+2      	; 0x104c <__addsf3x+0x9a>
    104a:	b0 cf       	rjmp	.-160    	; 0xfac <__addsf3+0x28>
    104c:	93 95       	inc	r25
    104e:	88 0f       	add	r24, r24
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__addsf3x+0xa2>
    1052:	99 27       	eor	r25, r25
    1054:	ee 0f       	add	r30, r30
    1056:	97 95       	ror	r25
    1058:	87 95       	ror	r24
    105a:	08 95       	ret

0000105c <__divsf3>:
    105c:	0e 94 42 08 	call	0x1084	; 0x1084 <__divsf3x>
    1060:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_round>
    1064:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_pscB>
    1068:	58 f0       	brcs	.+22     	; 0x1080 <__divsf3+0x24>
    106a:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_pscA>
    106e:	40 f0       	brcs	.+16     	; 0x1080 <__divsf3+0x24>
    1070:	29 f4       	brne	.+10     	; 0x107c <__divsf3+0x20>
    1072:	5f 3f       	cpi	r21, 0xFF	; 255
    1074:	29 f0       	breq	.+10     	; 0x1080 <__divsf3+0x24>
    1076:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_inf>
    107a:	51 11       	cpse	r21, r1
    107c:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_szero>
    1080:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_nan>

00001084 <__divsf3x>:
    1084:	0e 94 34 09 	call	0x1268	; 0x1268 <__fp_split3>
    1088:	68 f3       	brcs	.-38     	; 0x1064 <__divsf3+0x8>

0000108a <__divsf3_pse>:
    108a:	99 23       	and	r25, r25
    108c:	b1 f3       	breq	.-20     	; 0x107a <__divsf3+0x1e>
    108e:	55 23       	and	r21, r21
    1090:	91 f3       	breq	.-28     	; 0x1076 <__divsf3+0x1a>
    1092:	95 1b       	sub	r25, r21
    1094:	55 0b       	sbc	r21, r21
    1096:	bb 27       	eor	r27, r27
    1098:	aa 27       	eor	r26, r26
    109a:	62 17       	cp	r22, r18
    109c:	73 07       	cpc	r23, r19
    109e:	84 07       	cpc	r24, r20
    10a0:	38 f0       	brcs	.+14     	; 0x10b0 <__divsf3_pse+0x26>
    10a2:	9f 5f       	subi	r25, 0xFF	; 255
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	44 1f       	adc	r20, r20
    10ac:	aa 1f       	adc	r26, r26
    10ae:	a9 f3       	breq	.-22     	; 0x109a <__divsf3_pse+0x10>
    10b0:	35 d0       	rcall	.+106    	; 0x111c <__divsf3_pse+0x92>
    10b2:	0e 2e       	mov	r0, r30
    10b4:	3a f0       	brmi	.+14     	; 0x10c4 <__divsf3_pse+0x3a>
    10b6:	e0 e8       	ldi	r30, 0x80	; 128
    10b8:	32 d0       	rcall	.+100    	; 0x111e <__divsf3_pse+0x94>
    10ba:	91 50       	subi	r25, 0x01	; 1
    10bc:	50 40       	sbci	r21, 0x00	; 0
    10be:	e6 95       	lsr	r30
    10c0:	00 1c       	adc	r0, r0
    10c2:	ca f7       	brpl	.-14     	; 0x10b6 <__divsf3_pse+0x2c>
    10c4:	2b d0       	rcall	.+86     	; 0x111c <__divsf3_pse+0x92>
    10c6:	fe 2f       	mov	r31, r30
    10c8:	29 d0       	rcall	.+82     	; 0x111c <__divsf3_pse+0x92>
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	bb 1f       	adc	r27, r27
    10d2:	26 17       	cp	r18, r22
    10d4:	37 07       	cpc	r19, r23
    10d6:	48 07       	cpc	r20, r24
    10d8:	ab 07       	cpc	r26, r27
    10da:	b0 e8       	ldi	r27, 0x80	; 128
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <__divsf3_pse+0x56>
    10de:	bb 0b       	sbc	r27, r27
    10e0:	80 2d       	mov	r24, r0
    10e2:	bf 01       	movw	r22, r30
    10e4:	ff 27       	eor	r31, r31
    10e6:	93 58       	subi	r25, 0x83	; 131
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ea:	3a f0       	brmi	.+14     	; 0x10fa <__divsf3_pse+0x70>
    10ec:	9e 3f       	cpi	r25, 0xFE	; 254
    10ee:	51 05       	cpc	r21, r1
    10f0:	78 f0       	brcs	.+30     	; 0x1110 <__divsf3_pse+0x86>
    10f2:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_inf>
    10f6:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_szero>
    10fa:	5f 3f       	cpi	r21, 0xFF	; 255
    10fc:	e4 f3       	brlt	.-8      	; 0x10f6 <__divsf3_pse+0x6c>
    10fe:	98 3e       	cpi	r25, 0xE8	; 232
    1100:	d4 f3       	brlt	.-12     	; 0x10f6 <__divsf3_pse+0x6c>
    1102:	86 95       	lsr	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	b7 95       	ror	r27
    110a:	f7 95       	ror	r31
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	c9 f7       	brne	.-14     	; 0x1102 <__divsf3_pse+0x78>
    1110:	88 0f       	add	r24, r24
    1112:	91 1d       	adc	r25, r1
    1114:	96 95       	lsr	r25
    1116:	87 95       	ror	r24
    1118:	97 f9       	bld	r25, 7
    111a:	08 95       	ret
    111c:	e1 e0       	ldi	r30, 0x01	; 1
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	bb 1f       	adc	r27, r27
    1126:	62 17       	cp	r22, r18
    1128:	73 07       	cpc	r23, r19
    112a:	84 07       	cpc	r24, r20
    112c:	ba 07       	cpc	r27, r26
    112e:	20 f0       	brcs	.+8      	; 0x1138 <__divsf3_pse+0xae>
    1130:	62 1b       	sub	r22, r18
    1132:	73 0b       	sbc	r23, r19
    1134:	84 0b       	sbc	r24, r20
    1136:	ba 0b       	sbc	r27, r26
    1138:	ee 1f       	adc	r30, r30
    113a:	88 f7       	brcc	.-30     	; 0x111e <__divsf3_pse+0x94>
    113c:	e0 95       	com	r30
    113e:	08 95       	ret

00001140 <__fixunssfsi>:
    1140:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_splitA>
    1144:	88 f0       	brcs	.+34     	; 0x1168 <__fixunssfsi+0x28>
    1146:	9f 57       	subi	r25, 0x7F	; 127
    1148:	98 f0       	brcs	.+38     	; 0x1170 <__fixunssfsi+0x30>
    114a:	b9 2f       	mov	r27, r25
    114c:	99 27       	eor	r25, r25
    114e:	b7 51       	subi	r27, 0x17	; 23
    1150:	b0 f0       	brcs	.+44     	; 0x117e <__fixunssfsi+0x3e>
    1152:	e1 f0       	breq	.+56     	; 0x118c <__fixunssfsi+0x4c>
    1154:	66 0f       	add	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	1a f0       	brmi	.+6      	; 0x1164 <__fixunssfsi+0x24>
    115e:	ba 95       	dec	r27
    1160:	c9 f7       	brne	.-14     	; 0x1154 <__fixunssfsi+0x14>
    1162:	14 c0       	rjmp	.+40     	; 0x118c <__fixunssfsi+0x4c>
    1164:	b1 30       	cpi	r27, 0x01	; 1
    1166:	91 f0       	breq	.+36     	; 0x118c <__fixunssfsi+0x4c>
    1168:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_zero>
    116c:	b1 e0       	ldi	r27, 0x01	; 1
    116e:	08 95       	ret
    1170:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__fp_zero>
    1174:	67 2f       	mov	r22, r23
    1176:	78 2f       	mov	r23, r24
    1178:	88 27       	eor	r24, r24
    117a:	b8 5f       	subi	r27, 0xF8	; 248
    117c:	39 f0       	breq	.+14     	; 0x118c <__fixunssfsi+0x4c>
    117e:	b9 3f       	cpi	r27, 0xF9	; 249
    1180:	cc f3       	brlt	.-14     	; 0x1174 <__fixunssfsi+0x34>
    1182:	86 95       	lsr	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	b3 95       	inc	r27
    118a:	d9 f7       	brne	.-10     	; 0x1182 <__fixunssfsi+0x42>
    118c:	3e f4       	brtc	.+14     	; 0x119c <__fixunssfsi+0x5c>
    118e:	90 95       	com	r25
    1190:	80 95       	com	r24
    1192:	70 95       	com	r23
    1194:	61 95       	neg	r22
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	8f 4f       	sbci	r24, 0xFF	; 255
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	08 95       	ret

0000119e <__floatunsisf>:
    119e:	e8 94       	clt
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <__floatsisf+0x12>

000011a2 <__floatsisf>:
    11a2:	97 fb       	bst	r25, 7
    11a4:	3e f4       	brtc	.+14     	; 0x11b4 <__floatsisf+0x12>
    11a6:	90 95       	com	r25
    11a8:	80 95       	com	r24
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	99 23       	and	r25, r25
    11b6:	a9 f0       	breq	.+42     	; 0x11e2 <__floatsisf+0x40>
    11b8:	f9 2f       	mov	r31, r25
    11ba:	96 e9       	ldi	r25, 0x96	; 150
    11bc:	bb 27       	eor	r27, r27
    11be:	93 95       	inc	r25
    11c0:	f6 95       	lsr	r31
    11c2:	87 95       	ror	r24
    11c4:	77 95       	ror	r23
    11c6:	67 95       	ror	r22
    11c8:	b7 95       	ror	r27
    11ca:	f1 11       	cpse	r31, r1
    11cc:	f8 cf       	rjmp	.-16     	; 0x11be <__floatsisf+0x1c>
    11ce:	fa f4       	brpl	.+62     	; 0x120e <__floatsisf+0x6c>
    11d0:	bb 0f       	add	r27, r27
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <__floatsisf+0x36>
    11d4:	60 ff       	sbrs	r22, 0
    11d6:	1b c0       	rjmp	.+54     	; 0x120e <__floatsisf+0x6c>
    11d8:	6f 5f       	subi	r22, 0xFF	; 255
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	8f 4f       	sbci	r24, 0xFF	; 255
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <__floatsisf+0x6c>
    11e2:	88 23       	and	r24, r24
    11e4:	11 f0       	breq	.+4      	; 0x11ea <__floatsisf+0x48>
    11e6:	96 e9       	ldi	r25, 0x96	; 150
    11e8:	11 c0       	rjmp	.+34     	; 0x120c <__floatsisf+0x6a>
    11ea:	77 23       	and	r23, r23
    11ec:	21 f0       	breq	.+8      	; 0x11f6 <__floatsisf+0x54>
    11ee:	9e e8       	ldi	r25, 0x8E	; 142
    11f0:	87 2f       	mov	r24, r23
    11f2:	76 2f       	mov	r23, r22
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <__floatsisf+0x5e>
    11f6:	66 23       	and	r22, r22
    11f8:	71 f0       	breq	.+28     	; 0x1216 <__floatsisf+0x74>
    11fa:	96 e8       	ldi	r25, 0x86	; 134
    11fc:	86 2f       	mov	r24, r22
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	2a f0       	brmi	.+10     	; 0x120e <__floatsisf+0x6c>
    1204:	9a 95       	dec	r25
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	da f7       	brpl	.-10     	; 0x1204 <__floatsisf+0x62>
    120e:	88 0f       	add	r24, r24
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__fp_inf>:
    1218:	97 f9       	bld	r25, 7
    121a:	9f 67       	ori	r25, 0x7F	; 127
    121c:	80 e8       	ldi	r24, 0x80	; 128
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	08 95       	ret

00001224 <__fp_nan>:
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	80 ec       	ldi	r24, 0xC0	; 192
    1228:	08 95       	ret

0000122a <__fp_pscA>:
    122a:	00 24       	eor	r0, r0
    122c:	0a 94       	dec	r0
    122e:	16 16       	cp	r1, r22
    1230:	17 06       	cpc	r1, r23
    1232:	18 06       	cpc	r1, r24
    1234:	09 06       	cpc	r0, r25
    1236:	08 95       	ret

00001238 <__fp_pscB>:
    1238:	00 24       	eor	r0, r0
    123a:	0a 94       	dec	r0
    123c:	12 16       	cp	r1, r18
    123e:	13 06       	cpc	r1, r19
    1240:	14 06       	cpc	r1, r20
    1242:	05 06       	cpc	r0, r21
    1244:	08 95       	ret

00001246 <__fp_round>:
    1246:	09 2e       	mov	r0, r25
    1248:	03 94       	inc	r0
    124a:	00 0c       	add	r0, r0
    124c:	11 f4       	brne	.+4      	; 0x1252 <__fp_round+0xc>
    124e:	88 23       	and	r24, r24
    1250:	52 f0       	brmi	.+20     	; 0x1266 <__fp_round+0x20>
    1252:	bb 0f       	add	r27, r27
    1254:	40 f4       	brcc	.+16     	; 0x1266 <__fp_round+0x20>
    1256:	bf 2b       	or	r27, r31
    1258:	11 f4       	brne	.+4      	; 0x125e <__fp_round+0x18>
    125a:	60 ff       	sbrs	r22, 0
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <__fp_round+0x20>
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	08 95       	ret

00001268 <__fp_split3>:
    1268:	57 fd       	sbrc	r21, 7
    126a:	90 58       	subi	r25, 0x80	; 128
    126c:	44 0f       	add	r20, r20
    126e:	55 1f       	adc	r21, r21
    1270:	59 f0       	breq	.+22     	; 0x1288 <__fp_splitA+0x10>
    1272:	5f 3f       	cpi	r21, 0xFF	; 255
    1274:	71 f0       	breq	.+28     	; 0x1292 <__fp_splitA+0x1a>
    1276:	47 95       	ror	r20

00001278 <__fp_splitA>:
    1278:	88 0f       	add	r24, r24
    127a:	97 fb       	bst	r25, 7
    127c:	99 1f       	adc	r25, r25
    127e:	61 f0       	breq	.+24     	; 0x1298 <__fp_splitA+0x20>
    1280:	9f 3f       	cpi	r25, 0xFF	; 255
    1282:	79 f0       	breq	.+30     	; 0x12a2 <__fp_splitA+0x2a>
    1284:	87 95       	ror	r24
    1286:	08 95       	ret
    1288:	12 16       	cp	r1, r18
    128a:	13 06       	cpc	r1, r19
    128c:	14 06       	cpc	r1, r20
    128e:	55 1f       	adc	r21, r21
    1290:	f2 cf       	rjmp	.-28     	; 0x1276 <__fp_split3+0xe>
    1292:	46 95       	lsr	r20
    1294:	f1 df       	rcall	.-30     	; 0x1278 <__fp_splitA>
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <__fp_splitA+0x30>
    1298:	16 16       	cp	r1, r22
    129a:	17 06       	cpc	r1, r23
    129c:	18 06       	cpc	r1, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	f1 cf       	rjmp	.-30     	; 0x1284 <__fp_splitA+0xc>
    12a2:	86 95       	lsr	r24
    12a4:	71 05       	cpc	r23, r1
    12a6:	61 05       	cpc	r22, r1
    12a8:	08 94       	sec
    12aa:	08 95       	ret

000012ac <__fp_zero>:
    12ac:	e8 94       	clt

000012ae <__fp_szero>:
    12ae:	bb 27       	eor	r27, r27
    12b0:	66 27       	eor	r22, r22
    12b2:	77 27       	eor	r23, r23
    12b4:	cb 01       	movw	r24, r22
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret

000012ba <__mulsf3>:
    12ba:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__mulsf3x>
    12be:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_round>
    12c2:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_pscA>
    12c6:	38 f0       	brcs	.+14     	; 0x12d6 <__mulsf3+0x1c>
    12c8:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_pscB>
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__mulsf3+0x1c>
    12ce:	95 23       	and	r25, r21
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <__mulsf3+0x1c>
    12d2:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_inf>
    12d6:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_nan>
    12da:	11 24       	eor	r1, r1
    12dc:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_szero>

000012e0 <__mulsf3x>:
    12e0:	0e 94 34 09 	call	0x1268	; 0x1268 <__fp_split3>
    12e4:	70 f3       	brcs	.-36     	; 0x12c2 <__mulsf3+0x8>

000012e6 <__mulsf3_pse>:
    12e6:	95 9f       	mul	r25, r21
    12e8:	c1 f3       	breq	.-16     	; 0x12da <__mulsf3+0x20>
    12ea:	95 0f       	add	r25, r21
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	55 1f       	adc	r21, r21
    12f0:	62 9f       	mul	r22, r18
    12f2:	f0 01       	movw	r30, r0
    12f4:	72 9f       	mul	r23, r18
    12f6:	bb 27       	eor	r27, r27
    12f8:	f0 0d       	add	r31, r0
    12fa:	b1 1d       	adc	r27, r1
    12fc:	63 9f       	mul	r22, r19
    12fe:	aa 27       	eor	r26, r26
    1300:	f0 0d       	add	r31, r0
    1302:	b1 1d       	adc	r27, r1
    1304:	aa 1f       	adc	r26, r26
    1306:	64 9f       	mul	r22, r20
    1308:	66 27       	eor	r22, r22
    130a:	b0 0d       	add	r27, r0
    130c:	a1 1d       	adc	r26, r1
    130e:	66 1f       	adc	r22, r22
    1310:	82 9f       	mul	r24, r18
    1312:	22 27       	eor	r18, r18
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	62 1f       	adc	r22, r18
    131a:	73 9f       	mul	r23, r19
    131c:	b0 0d       	add	r27, r0
    131e:	a1 1d       	adc	r26, r1
    1320:	62 1f       	adc	r22, r18
    1322:	83 9f       	mul	r24, r19
    1324:	a0 0d       	add	r26, r0
    1326:	61 1d       	adc	r22, r1
    1328:	22 1f       	adc	r18, r18
    132a:	74 9f       	mul	r23, r20
    132c:	33 27       	eor	r19, r19
    132e:	a0 0d       	add	r26, r0
    1330:	61 1d       	adc	r22, r1
    1332:	23 1f       	adc	r18, r19
    1334:	84 9f       	mul	r24, r20
    1336:	60 0d       	add	r22, r0
    1338:	21 1d       	adc	r18, r1
    133a:	82 2f       	mov	r24, r18
    133c:	76 2f       	mov	r23, r22
    133e:	6a 2f       	mov	r22, r26
    1340:	11 24       	eor	r1, r1
    1342:	9f 57       	subi	r25, 0x7F	; 127
    1344:	50 40       	sbci	r21, 0x00	; 0
    1346:	9a f0       	brmi	.+38     	; 0x136e <__mulsf3_pse+0x88>
    1348:	f1 f0       	breq	.+60     	; 0x1386 <__mulsf3_pse+0xa0>
    134a:	88 23       	and	r24, r24
    134c:	4a f0       	brmi	.+18     	; 0x1360 <__mulsf3_pse+0x7a>
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	bb 1f       	adc	r27, r27
    1354:	66 1f       	adc	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	88 1f       	adc	r24, r24
    135a:	91 50       	subi	r25, 0x01	; 1
    135c:	50 40       	sbci	r21, 0x00	; 0
    135e:	a9 f7       	brne	.-22     	; 0x134a <__mulsf3_pse+0x64>
    1360:	9e 3f       	cpi	r25, 0xFE	; 254
    1362:	51 05       	cpc	r21, r1
    1364:	80 f0       	brcs	.+32     	; 0x1386 <__mulsf3_pse+0xa0>
    1366:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_inf>
    136a:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_szero>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	e4 f3       	brlt	.-8      	; 0x136a <__mulsf3_pse+0x84>
    1372:	98 3e       	cpi	r25, 0xE8	; 232
    1374:	d4 f3       	brlt	.-12     	; 0x136a <__mulsf3_pse+0x84>
    1376:	86 95       	lsr	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	b7 95       	ror	r27
    137e:	f7 95       	ror	r31
    1380:	e7 95       	ror	r30
    1382:	9f 5f       	subi	r25, 0xFF	; 255
    1384:	c1 f7       	brne	.-16     	; 0x1376 <__mulsf3_pse+0x90>
    1386:	fe 2b       	or	r31, r30
    1388:	88 0f       	add	r24, r24
    138a:	91 1d       	adc	r25, r1
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	97 f9       	bld	r25, 7
    1392:	08 95       	ret

00001394 <sin>:
    1394:	9f 93       	push	r25
    1396:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_rempio2>
    139a:	0f 90       	pop	r0
    139c:	07 fc       	sbrc	r0, 7
    139e:	ee 5f       	subi	r30, 0xFE	; 254
    13a0:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_sinus>
    13a4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_nan>

000013a8 <__fp_rempio2>:
    13a8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_splitA>
    13ac:	d8 f3       	brcs	.-10     	; 0x13a4 <sin+0x10>
    13ae:	e8 94       	clt
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	bb 27       	eor	r27, r27
    13b4:	9f 57       	subi	r25, 0x7F	; 127
    13b6:	f0 f0       	brcs	.+60     	; 0x13f4 <__fp_rempio2+0x4c>
    13b8:	2a ed       	ldi	r18, 0xDA	; 218
    13ba:	3f e0       	ldi	r19, 0x0F	; 15
    13bc:	49 ec       	ldi	r20, 0xC9	; 201
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <__fp_rempio2+0x24>
    13c0:	ee 0f       	add	r30, r30
    13c2:	bb 0f       	add	r27, r27
    13c4:	66 1f       	adc	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	28 f0       	brcs	.+10     	; 0x13d6 <__fp_rempio2+0x2e>
    13cc:	b2 3a       	cpi	r27, 0xA2	; 162
    13ce:	62 07       	cpc	r22, r18
    13d0:	73 07       	cpc	r23, r19
    13d2:	84 07       	cpc	r24, r20
    13d4:	28 f0       	brcs	.+10     	; 0x13e0 <__fp_rempio2+0x38>
    13d6:	b2 5a       	subi	r27, 0xA2	; 162
    13d8:	62 0b       	sbc	r22, r18
    13da:	73 0b       	sbc	r23, r19
    13dc:	84 0b       	sbc	r24, r20
    13de:	e3 95       	inc	r30
    13e0:	9a 95       	dec	r25
    13e2:	72 f7       	brpl	.-36     	; 0x13c0 <__fp_rempio2+0x18>
    13e4:	80 38       	cpi	r24, 0x80	; 128
    13e6:	30 f4       	brcc	.+12     	; 0x13f4 <__fp_rempio2+0x4c>
    13e8:	9a 95       	dec	r25
    13ea:	bb 0f       	add	r27, r27
    13ec:	66 1f       	adc	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	d2 f7       	brpl	.-12     	; 0x13e8 <__fp_rempio2+0x40>
    13f4:	90 48       	sbci	r25, 0x80	; 128
    13f6:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__fp_mpack_finite>

000013fa <__fp_sinus>:
    13fa:	ef 93       	push	r30
    13fc:	e0 ff       	sbrs	r30, 0
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <__fp_sinus+0x14>
    1400:	a2 ea       	ldi	r26, 0xA2	; 162
    1402:	2a ed       	ldi	r18, 0xDA	; 218
    1404:	3f e0       	ldi	r19, 0x0F	; 15
    1406:	49 ec       	ldi	r20, 0xC9	; 201
    1408:	5f eb       	ldi	r21, 0xBF	; 191
    140a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3x>
    140e:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_round>
    1412:	0f 90       	pop	r0
    1414:	03 94       	inc	r0
    1416:	01 fc       	sbrc	r0, 1
    1418:	90 58       	subi	r25, 0x80	; 128
    141a:	ea ed       	ldi	r30, 0xDA	; 218
    141c:	f1 e0       	ldi	r31, 0x01	; 1
    141e:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_powsodd>

00001422 <__fp_mpack>:
    1422:	9f 3f       	cpi	r25, 0xFF	; 255
    1424:	31 f0       	breq	.+12     	; 0x1432 <__fp_mpack_finite+0xc>

00001426 <__fp_mpack_finite>:
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	20 f4       	brcc	.+8      	; 0x1432 <__fp_mpack_finite+0xc>
    142a:	87 95       	ror	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b7 95       	ror	r27
    1432:	88 0f       	add	r24, r24
    1434:	91 1d       	adc	r25, r1
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	97 f9       	bld	r25, 7
    143c:	08 95       	ret

0000143e <__fp_powsodd>:
    143e:	9f 93       	push	r25
    1440:	8f 93       	push	r24
    1442:	7f 93       	push	r23
    1444:	6f 93       	push	r22
    1446:	ff 93       	push	r31
    1448:	ef 93       	push	r30
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__mulsf3>
    1452:	ef 91       	pop	r30
    1454:	ff 91       	pop	r31
    1456:	0e 94 33 0a 	call	0x1466	; 0x1466 <__fp_powser>
    145a:	2f 91       	pop	r18
    145c:	3f 91       	pop	r19
    145e:	4f 91       	pop	r20
    1460:	5f 91       	pop	r21
    1462:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__mulsf3>

00001466 <__fp_powser>:
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	1f 93       	push	r17
    146c:	0f 93       	push	r16
    146e:	ff 92       	push	r15
    1470:	ef 92       	push	r14
    1472:	df 92       	push	r13
    1474:	7b 01       	movw	r14, r22
    1476:	8c 01       	movw	r16, r24
    1478:	68 94       	set
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <__fp_powser+0x22>
    147c:	da 2e       	mov	r13, r26
    147e:	ef 01       	movw	r28, r30
    1480:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__mulsf3x>
    1484:	fe 01       	movw	r30, r28
    1486:	e8 94       	clt
    1488:	a5 91       	lpm	r26, Z+
    148a:	25 91       	lpm	r18, Z+
    148c:	35 91       	lpm	r19, Z+
    148e:	45 91       	lpm	r20, Z+
    1490:	55 91       	lpm	r21, Z+
    1492:	a6 f3       	brts	.-24     	; 0x147c <__fp_powser+0x16>
    1494:	ef 01       	movw	r28, r30
    1496:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3x>
    149a:	fe 01       	movw	r30, r28
    149c:	97 01       	movw	r18, r14
    149e:	a8 01       	movw	r20, r16
    14a0:	da 94       	dec	r13
    14a2:	69 f7       	brne	.-38     	; 0x147e <__fp_powser+0x18>
    14a4:	df 90       	pop	r13
    14a6:	ef 90       	pop	r14
    14a8:	ff 90       	pop	r15
    14aa:	0f 91       	pop	r16
    14ac:	1f 91       	pop	r17
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <btnInitButtons>:

/** Initialise the User Interface Buttons driver
	\return Nothing
*/   
void btnInitButtons(void)
{
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : SW-COL1, initialise to input, high-impedance */
	/*	              | | | +----------- b4 : SW-COL2, initialise to input, high-impedance */
	/*	              | | +------------- b5 : SW-COL3, input with pull-up, reserved for future expansion */
	/*	              | +--------------- b6 : SW-ROW1, input with pull-up  */
	/*	              +----------------- b7 : SW-ROW2, input with pull-up, reserved for future expansion */
	PORTB.DIRCLR = 0xFC;	/* Clear to input */
    14bc:	80 e2       	ldi	r24, 0x20	; 32
    14be:	96 e0       	ldi	r25, 0x06	; 6
    14c0:	2c ef       	ldi	r18, 0xFC	; 252
    14c2:	fc 01       	movw	r30, r24
    14c4:	22 83       	std	Z+2, r18	; 0x02
	
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	96 e0       	ldi	r25, 0x06	; 6
    14ca:	28 e1       	ldi	r18, 0x18	; 24
    14cc:	fc 01       	movw	r30, r24
    14ce:	22 8b       	std	Z+18, r18	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	96 e0       	ldi	r25, 0x06	; 6
    14d4:	fc 01       	movw	r30, r24
    14d6:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
    14d8:	80 e2       	ldi	r24, 0x20	; 32
    14da:	96 e0       	ldi	r25, 0x06	; 6
    14dc:	fc 01       	movw	r30, r24
    14de:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	96 e0       	ldi	r25, 0x06	; 6
    14e4:	28 e1       	ldi	r18, 0x18	; 24
    14e6:	fc 01       	movw	r30, r24
    14e8:	25 8b       	std	Z+21, r18	; 0x15
	PORTB.PIN6CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    14ea:	80 e2       	ldi	r24, 0x20	; 32
    14ec:	96 e0       	ldi	r25, 0x06	; 6
    14ee:	28 e1       	ldi	r18, 0x18	; 24
    14f0:	fc 01       	movw	r30, r24
    14f2:	26 8b       	std	Z+22, r18	; 0x16
	PORTB.PIN7CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    14f4:	80 e2       	ldi	r24, 0x20	; 32
    14f6:	96 e0       	ldi	r25, 0x06	; 6
    14f8:	28 e1       	ldi	r18, 0x18	; 24
    14fa:	fc 01       	movw	r30, r24
    14fc:	27 8b       	std	Z+23, r18	; 0x17

	/* User-Interface Buttons row on PORTD */
	/* SW-ROW3, reserved for future expansion */
	PORTD.DIRCLR = 0x01;	/* Clear to input */
    14fe:	80 e6       	ldi	r24, 0x60	; 96
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	21 e0       	ldi	r18, 0x01	; 1
    1504:	fc 01       	movw	r30, r24
    1506:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    1508:	80 e6       	ldi	r24, 0x60	; 96
    150a:	96 e0       	ldi	r25, 0x06	; 6
    150c:	28 e1       	ldi	r18, 0x18	; 24
    150e:	fc 01       	movw	r30, r24
    1510:	20 8b       	std	Z+16, r18	; 0x10

	/* next column drive */
	btnDriveButtonColumn();
    1512:	0e 94 a4 0a 	call	0x1548	; 0x1548 <btnDriveButtonColumn>
}
    1516:	00 00       	nop
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <btnReleaseKeyboardAllColumn>:
		Advance to next column and Repeat

*/

static void btnReleaseKeyboardAllColumn(void)
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
	/* All column drive to high impedance  */
	PORTB.DIRCLR = 0x5C;	/* Clear to input */
    1526:	80 e2       	ldi	r24, 0x20	; 32
    1528:	96 e0       	ldi	r25, 0x06	; 6
    152a:	2c e5       	ldi	r18, 0x5C	; 92
    152c:	fc 01       	movw	r30, r24
    152e:	22 83       	std	Z+2, r18	; 0x02
	
	PORTB.PIN3CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
    1530:	80 e2       	ldi	r24, 0x20	; 32
    1532:	96 e0       	ldi	r25, 0x06	; 6
    1534:	fc 01       	movw	r30, r24
    1536:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
    1538:	80 e2       	ldi	r24, 0x20	; 32
    153a:	96 e0       	ldi	r25, 0x06	; 6
    153c:	fc 01       	movw	r30, r24
    153e:	14 8a       	std	Z+20, r1	; 0x14
}
    1540:	00 00       	nop
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <btnDriveButtonColumn>:

static void btnDriveButtonColumn(void)
{
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 d0       	rcall	.+0      	; 0x154e <btnDriveButtonColumn+0x6>
    154e:	1f 92       	push	r1
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	uint8_t cPinNum;
	uint8_t cPinMask;

	/* All column drive to high impedance first, to avoid short across power rails */
	btnReleaseKeyboardAllColumn();
    1554:	0e 94 8f 0a 	call	0x151e	; 0x151e <btnReleaseKeyboardAllColumn>

	/* Drive the target column to logic 0 */
	cPinNum = gcBtnColumnToPinNumMap_Array[gcColumnDrvNum];
    1558:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <gcColumnDrvNum>
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	82 53       	subi	r24, 0x32	; 50
    1562:	9e 4d       	sbci	r25, 0xDE	; 222
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
	cPinMask = (0x01 << cPinNum);
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <btnDriveButtonColumn+0x32>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	2a 95       	dec	r18
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <btnDriveButtonColumn+0x2e>
    157e:	8a 83       	std	Y+2, r24	; 0x02
	
    register8_t* pinControl = &(PORTB.PIN0CTRL);
    1580:	80 e3       	ldi	r24, 0x30	; 48
    1582:	96 e0       	ldi	r25, 0x06	; 6
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	9c 83       	std	Y+4, r25	; 0x04
	pinControl += cPinNum;
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	2b 81       	ldd	r18, Y+3	; 0x03
    1590:	3c 81       	ldd	r19, Y+4	; 0x04
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	9c 83       	std	Y+4, r25	; 0x04
	*pinControl = 0;	/* totem-pole output */
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	fc 01       	movw	r30, r24
    15a0:	10 82       	st	Z, r1
	PORTB.DIRSET = cPinMask;		/* Set as output */
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	96 e0       	ldi	r25, 0x06	; 6
    15a6:	2a 81       	ldd	r18, Y+2	; 0x02
    15a8:	fc 01       	movw	r30, r24
    15aa:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTCLR = cPinMask;	/* Logic LOW */
    15ac:	80 e2       	ldi	r24, 0x20	; 32
    15ae:	96 e0       	ldi	r25, 0x06	; 6
    15b0:	2a 81       	ldd	r18, Y+2	; 0x02
    15b2:	fc 01       	movw	r30, r24
    15b4:	26 83       	std	Z+6, r18	; 0x06
}
    15b6:	00 00       	nop
    15b8:	24 96       	adiw	r28, 0x04	; 4
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <btnCheckWhichButtonsActive>:

static void btnCheckWhichButtonsActive(void)
{
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <btnCheckWhichButtonsActive+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <btnCheckWhichButtonsActive+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t cButtonNum;
	bool bButtonActive;
	bool bConfirmedStateIsChanged;
	ButtonState_t* pButton;
	
	for(cRow = 0; cRow <= HIGHEST_VALID_ROW_NUM; cRow++)
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	2e c0       	rjmp	.+92     	; 0x1630 <btnCheckWhichButtonsActive+0x6c>
	{
		bButtonActive = btnIsButtonActiveOnRow(cRow);
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	0e 94 25 0c 	call	0x184a	; 0x184a <btnIsButtonActiveOnRow>
    15da:	8a 83       	std	Y+2, r24	; 0x02
		cButtonNum = btnColumnAndRowToBtnNum(gcColumnDrvNum, cRow);
    15dc:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <gcColumnDrvNum>
    15e0:	69 81       	ldd	r22, Y+1	; 0x01
    15e2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <btnColumnAndRowToBtnNum>
    15e6:	8b 83       	std	Y+3, r24	; 0x03
		
		pButton = &(gButtonStates_Array[cButtonNum]);
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	c9 01       	movw	r24, r18
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	88 5e       	subi	r24, 0xE8	; 232
    15fe:	9d 4d       	sbci	r25, 0xDD	; 221
    1600:	8c 83       	std	Y+4, r24	; 0x04
    1602:	9d 83       	std	Y+5, r25	; 0x05
		bConfirmedStateIsChanged = btnUpdateButtonState(pButton, bButtonActive);
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	6a 81       	ldd	r22, Y+2	; 0x02
    160a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <btnUpdateButtonState>
    160e:	8e 83       	std	Y+6, r24	; 0x06
		if(bConfirmedStateIsChanged)
    1610:	8e 81       	ldd	r24, Y+6	; 0x06
    1612:	88 23       	and	r24, r24
    1614:	51 f0       	breq	.+20     	; 0x162a <btnCheckWhichButtonsActive+0x66>
		{
			pscSetPublicButtonState(cButtonNum, pButton->m_bActive_Confirmed);
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	fc 01       	movw	r30, r24
    161c:	84 81       	ldd	r24, Z+4	; 0x04
    161e:	86 95       	lsr	r24
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	68 2f       	mov	r22, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	0e 94 28 13 	call	0x2650	; 0x2650 <pscSetPublicButtonState>
	uint8_t cButtonNum;
	bool bButtonActive;
	bool bConfirmedStateIsChanged;
	ButtonState_t* pButton;
	
	for(cRow = 0; cRow <= HIGHEST_VALID_ROW_NUM; cRow++)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	8f 5f       	subi	r24, 0xFF	; 255
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	88 23       	and	r24, r24
    1634:	79 f2       	breq	.-98     	; 0x15d4 <btnCheckWhichButtonsActive+0x10>
			pscSetPublicButtonState(cButtonNum, pButton->m_bActive_Confirmed);
		}
	}
	
	/* Always check the power button, which is not part of the matrix */
	bButtonActive = btnIsOnOffButtonActive();
    1636:	0e 94 4b 0c 	call	0x1896	; 0x1896 <btnIsOnOffButtonActive>
    163a:	8a 83       	std	Y+2, r24	; 0x02
	pButton = &gOnOffButton;
    163c:	82 e1       	ldi	r24, 0x12	; 18
    163e:	92 e2       	ldi	r25, 0x22	; 34
    1640:	8c 83       	std	Y+4, r24	; 0x04
    1642:	9d 83       	std	Y+5, r25	; 0x05
	bConfirmedStateIsChanged = btnUpdateButtonState(pButton, bButtonActive);
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	6a 81       	ldd	r22, Y+2	; 0x02
    164a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <btnUpdateButtonState>
    164e:	8e 83       	std	Y+6, r24	; 0x06
	if(bConfirmedStateIsChanged)
    1650:	8e 81       	ldd	r24, Y+6	; 0x06
    1652:	88 23       	and	r24, r24
    1654:	51 f0       	breq	.+20     	; 0x166a <btnCheckWhichButtonsActive+0xa6>
	{
		pscSetPublicButtonState(BtnLeft, pButton->m_bActive_Confirmed);
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	fc 01       	movw	r30, r24
    165c:	84 81       	ldd	r24, Z+4	; 0x04
    165e:	86 95       	lsr	r24
    1660:	81 70       	andi	r24, 0x01	; 1
    1662:	68 2f       	mov	r22, r24
    1664:	84 e6       	ldi	r24, 0x64	; 100
    1666:	0e 94 28 13 	call	0x2650	; 0x2650 <pscSetPublicButtonState>
	}
}
    166a:	00 00       	nop
    166c:	26 96       	adiw	r28, 0x06	; 6
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <btnColumnAndRowToBtnNum>:
		hardware drive matrix Column and Row.
	The buttonNum is ZERO-based
	The matrix Column & Row are ZERO-based
*/
static uint8_t btnColumnAndRowToBtnNum(uint8_t cColumnNum, uint8_t cRow)
{
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	00 d0       	rcall	.+0      	; 0x167e <btnColumnAndRowToBtnNum+0x6>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t cButtonNum;

	cButtonNum = cColumnNum * ROW_COUNT;
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
	cButtonNum += cRow;
    168a:	99 81       	ldd	r25, Y+1	; 0x01
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	89 0f       	add	r24, r25
    1690:	89 83       	std	Y+1, r24	; 0x01

	return(cButtonNum);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
}
    1694:	23 96       	adiw	r28, 0x03	; 3
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <btnUpdateButtonState>:

/*
	returns TRUE if the confirmed button state has been changed
*/
static bool btnUpdateButtonState(ButtonState_t* pButton, bool bButtonActive)
{
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <btnUpdateButtonState+0x6>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	6b 83       	std	Y+3, r22	; 0x03
	if(pButton->m_bUnconfirmedState_Active != bButtonActive)
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	fc 01       	movw	r30, r24
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	98 2f       	mov	r25, r24
    16ba:	91 70       	andi	r25, 0x01	; 1
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	98 17       	cp	r25, r24
    16c0:	c9 f0       	breq	.+50     	; 0x16f4 <btnUpdateButtonState+0x54>
	{	/* The button state has changed / is changing */
		/* Update the time-line mark, to track the time of the last change */
		pButton->m_dw_TimeOfLastChange_ms = gdw_msTimeCount;
    16c2:	80 91 1e 23 	lds	r24, 0x231E	; 0x80231e <gdw_msTimeCount>
    16c6:	90 91 1f 23 	lds	r25, 0x231F	; 0x80231f <gdw_msTimeCount+0x1>
    16ca:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <gdw_msTimeCount+0x2>
    16ce:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <gdw_msTimeCount+0x3>
    16d2:	29 81       	ldd	r18, Y+1	; 0x01
    16d4:	3a 81       	ldd	r19, Y+2	; 0x02
    16d6:	f9 01       	movw	r30, r18
    16d8:	80 83       	st	Z, r24
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	a2 83       	std	Z+2, r26	; 0x02
    16de:	b3 83       	std	Z+3, r27	; 0x03

		pButton->m_bUnconfirmedState_Active = bButtonActive;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	21 70       	andi	r18, 0x01	; 1
    16e8:	fc 01       	movw	r30, r24
    16ea:	34 81       	ldd	r19, Z+4	; 0x04
    16ec:	3e 7f       	andi	r19, 0xFE	; 254
    16ee:	23 2b       	or	r18, r19
    16f0:	fc 01       	movw	r30, r24
    16f2:	24 83       	std	Z+4, r18	; 0x04
	}

	return btnDebounceButton(pButton);
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	0e 94 84 0b 	call	0x1708	; 0x1708 <btnDebounceButton>
}
    16fc:	23 96       	adiw	r28, 0x03	; 3
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <btnDebounceButton>:

static bool btnDebounceButton(ButtonState_t* pButton)
{
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	28 97       	sbiw	r28, 0x08	; 8
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	8f 83       	std	Y+7, r24	; 0x07
    1720:	98 87       	std	Y+8, r25	; 0x08
	uint32_t dwTimeDiff;
	bool bConfirmedStateIsChanged = false;
    1722:	19 82       	std	Y+1, r1	; 0x01

	if(pButton->m_bActive_Confirmed != pButton->m_bUnconfirmedState_Active)
    1724:	8f 81       	ldd	r24, Y+7	; 0x07
    1726:	98 85       	ldd	r25, Y+8	; 0x08
    1728:	fc 01       	movw	r30, r24
    172a:	84 81       	ldd	r24, Z+4	; 0x04
    172c:	81 fb       	bst	r24, 1
    172e:	22 27       	eor	r18, r18
    1730:	20 f9       	bld	r18, 0
    1732:	8f 81       	ldd	r24, Y+7	; 0x07
    1734:	98 85       	ldd	r25, Y+8	; 0x08
    1736:	fc 01       	movw	r30, r24
    1738:	84 81       	ldd	r24, Z+4	; 0x04
    173a:	81 70       	andi	r24, 0x01	; 1
    173c:	28 17       	cp	r18, r24
    173e:	09 f4       	brne	.+2      	; 0x1742 <btnDebounceButton+0x3a>
    1740:	60 c0       	rjmp	.+192    	; 0x1802 <btnDebounceButton+0xfa>
	{	/* Recent change to button state, not yet made public */
		/* update the public state only if the de-bounce interval has elapsed since the last change */
		if(pButton->m_dw_TimeOfLastChange_ms > gdw_msTimeCount)
    1742:	8f 81       	ldd	r24, Y+7	; 0x07
    1744:	98 85       	ldd	r25, Y+8	; 0x08
    1746:	fc 01       	movw	r30, r24
    1748:	20 81       	ld	r18, Z
    174a:	31 81       	ldd	r19, Z+1	; 0x01
    174c:	42 81       	ldd	r20, Z+2	; 0x02
    174e:	53 81       	ldd	r21, Z+3	; 0x03
    1750:	80 91 1e 23 	lds	r24, 0x231E	; 0x80231e <gdw_msTimeCount>
    1754:	90 91 1f 23 	lds	r25, 0x231F	; 0x80231f <gdw_msTimeCount+0x1>
    1758:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <gdw_msTimeCount+0x2>
    175c:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <gdw_msTimeCount+0x3>
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	a4 07       	cpc	r26, r20
    1766:	b5 07       	cpc	r27, r21
    1768:	78 f4       	brcc	.+30     	; 0x1788 <btnDebounceButton+0x80>
		{	/* The global counter has wrapped since this button changed state */
			/* Start the interval again */
			pButton->m_dw_TimeOfLastChange_ms = gdw_msTimeCount;
    176a:	80 91 1e 23 	lds	r24, 0x231E	; 0x80231e <gdw_msTimeCount>
    176e:	90 91 1f 23 	lds	r25, 0x231F	; 0x80231f <gdw_msTimeCount+0x1>
    1772:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <gdw_msTimeCount+0x2>
    1776:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <gdw_msTimeCount+0x3>
    177a:	2f 81       	ldd	r18, Y+7	; 0x07
    177c:	38 85       	ldd	r19, Y+8	; 0x08
    177e:	f9 01       	movw	r30, r18
    1780:	80 83       	st	Z, r24
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	a2 83       	std	Z+2, r26	; 0x02
    1786:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		dwTimeDiff = gdw_msTimeCount -pButton->m_dw_TimeOfLastChange_ms;
    1788:	20 91 1e 23 	lds	r18, 0x231E	; 0x80231e <gdw_msTimeCount>
    178c:	30 91 1f 23 	lds	r19, 0x231F	; 0x80231f <gdw_msTimeCount+0x1>
    1790:	40 91 20 23 	lds	r20, 0x2320	; 0x802320 <gdw_msTimeCount+0x2>
    1794:	50 91 21 23 	lds	r21, 0x2321	; 0x802321 <gdw_msTimeCount+0x3>
    1798:	8f 81       	ldd	r24, Y+7	; 0x07
    179a:	98 85       	ldd	r25, Y+8	; 0x08
    179c:	fc 01       	movw	r30, r24
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	a2 81       	ldd	r26, Z+2	; 0x02
    17a4:	b3 81       	ldd	r27, Z+3	; 0x03
    17a6:	79 01       	movw	r14, r18
    17a8:	8a 01       	movw	r16, r20
    17aa:	e8 1a       	sub	r14, r24
    17ac:	f9 0a       	sbc	r15, r25
    17ae:	0a 0b       	sbc	r16, r26
    17b0:	1b 0b       	sbc	r17, r27
    17b2:	d8 01       	movw	r26, r16
    17b4:	c7 01       	movw	r24, r14
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	ac 83       	std	Y+4, r26	; 0x04
    17bc:	bd 83       	std	Y+5, r27	; 0x05
		if(dwTimeDiff >= BUTTON_DEBOUNCE_INTERVAL_MS)
    17be:	84 e1       	ldi	r24, 0x14	; 20
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 01       	movw	r18, r24
    17c4:	99 0f       	add	r25, r25
    17c6:	44 0b       	sbc	r20, r20
    17c8:	55 0b       	sbc	r21, r21
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	9b 81       	ldd	r25, Y+3	; 0x03
    17ce:	ac 81       	ldd	r26, Y+4	; 0x04
    17d0:	bd 81       	ldd	r27, Y+5	; 0x05
    17d2:	82 17       	cp	r24, r18
    17d4:	93 07       	cpc	r25, r19
    17d6:	a4 07       	cpc	r26, r20
    17d8:	b5 07       	cpc	r27, r21
    17da:	98 f0       	brcs	.+38     	; 0x1802 <btnDebounceButton+0xfa>
		{	/* de-bounce interval complete */
			bool bButtonActive = pButton->m_bUnconfirmedState_Active;
    17dc:	8f 81       	ldd	r24, Y+7	; 0x07
    17de:	98 85       	ldd	r25, Y+8	; 0x08
    17e0:	fc 01       	movw	r30, r24
    17e2:	84 81       	ldd	r24, Z+4	; 0x04
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	8e 83       	std	Y+6, r24	; 0x06
			/* Update the public / reported state */
			pButton->m_bActive_Confirmed = bButtonActive;
    17e8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ea:	98 85       	ldd	r25, Y+8	; 0x08
    17ec:	2e 81       	ldd	r18, Y+6	; 0x06
    17ee:	21 70       	andi	r18, 0x01	; 1
    17f0:	22 0f       	add	r18, r18
    17f2:	fc 01       	movw	r30, r24
    17f4:	34 81       	ldd	r19, Z+4	; 0x04
    17f6:	3d 7f       	andi	r19, 0xFD	; 253
    17f8:	23 2b       	or	r18, r19
    17fa:	fc 01       	movw	r30, r24
    17fc:	24 83       	std	Z+4, r18	; 0x04

			bConfirmedStateIsChanged = true;	/* Indicate the confirmed button state is changed */
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return bConfirmedStateIsChanged;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
}
    1804:	28 96       	adiw	r28, 0x08	; 8
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	08 95       	ret

00001818 <btnManageButtonScan>:

void btnManageButtonScan(void)
{
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	btnCheckWhichButtonsActive();
    1820:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <btnCheckWhichButtonsActive>

	/* Release all column drive */
	btnReleaseKeyboardAllColumn();
    1824:	0e 94 8f 0a 	call	0x151e	; 0x151e <btnReleaseKeyboardAllColumn>

	/* Advance to next column */
	gcColumnDrvNum++;
    1828:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <gcColumnDrvNum>
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <gcColumnDrvNum>
	if(gcColumnDrvNum > HIGHEST_VALID_COLUMN_NUM)
    1832:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <gcColumnDrvNum>
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	10 f0       	brcs	.+4      	; 0x183e <btnManageButtonScan+0x26>
	{	/* Matrix scan complete */
		/* Start again at first column */
		gcColumnDrvNum = 0;
    183a:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <gcColumnDrvNum>
	}

	/* next column drive */
	btnDriveButtonColumn();
    183e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <btnDriveButtonColumn>
}
    1842:	00 00       	nop
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <btnIsButtonActiveOnRow>:

static bool btnIsButtonActiveOnRow(uint8_t cRow)
{
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	00 d0       	rcall	.+0      	; 0x1850 <btnIsButtonActiveOnRow+0x6>
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	8c 83       	std	Y+4, r24	; 0x04
	bool bActive;
	uint8_t cPinNum;
	uint8_t cPinMask;

	bActive = false;
    1858:	19 82       	std	Y+1, r1	; 0x01
	cPinNum = gc_BtnRowToPinNumMap_Array[cRow];
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	8a 83       	std	Y+2, r24	; 0x02
	cPinMask = (0x01 << cPinNum);
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <btnIsButtonActiveOnRow+0x24>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	2a 95       	dec	r18
    1870:	e2 f7       	brpl	.-8      	; 0x186a <btnIsButtonActiveOnRow+0x20>
    1872:	8b 83       	std	Y+3, r24	; 0x03

	if((PORTB.IN & cPinMask) == 0)
    1874:	80 e2       	ldi	r24, 0x20	; 32
    1876:	96 e0       	ldi	r25, 0x06	; 6
    1878:	fc 01       	movw	r30, r24
    187a:	90 85       	ldd	r25, Z+8	; 0x08
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	89 23       	and	r24, r25
    1880:	88 23       	and	r24, r24
    1882:	11 f4       	brne	.+4      	; 0x1888 <btnIsButtonActiveOnRow+0x3e>
	{	/* button indicating active */
		bActive = true;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    1888:	89 81       	ldd	r24, Y+1	; 0x01
}
    188a:	24 96       	adiw	r28, 0x04	; 4
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <btnIsOnOffButtonActive>:


static bool btnIsOnOffButtonActive(void)
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	1f 92       	push	r1
    189c:	1f 92       	push	r1
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	bool bActive;
	uint8_t cPinMask;

	bActive = false;
    18a2:	19 82       	std	Y+1, r1	; 0x01
	cPinMask = PIN2_bm;
    18a4:	84 e0       	ldi	r24, 0x04	; 4
    18a6:	8a 83       	std	Y+2, r24	; 0x02

	if((PORTB.IN & cPinMask) == 0)
    18a8:	80 e2       	ldi	r24, 0x20	; 32
    18aa:	96 e0       	ldi	r25, 0x06	; 6
    18ac:	fc 01       	movw	r30, r24
    18ae:	90 85       	ldd	r25, Z+8	; 0x08
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	89 23       	and	r24, r25
    18b4:	88 23       	and	r24, r24
    18b6:	11 f4       	brne	.+4      	; 0x18bc <btnIsOnOffButtonActive+0x26>
	{	/* button indicating active */
		bActive = true;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <EnableInterrupts>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

static inline void EnableInterrupts(void)	{sei();}
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	78 94       	sei
    18d2:	00 00       	nop
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <systemInitialisation>:

/** Initialise everything
	\return Nothing
*/
void systemInitialisation(void)
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	1f 92       	push	r1
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	/* After Power-on-Reset, the XMEGA configures itself to use the internal 2MHz internal oscillator */
	/* The watchdog is enabled, locked and the interval set using the programmed FUSES */

	dspResetHold();	/* Assert the display reset signal early and hold */
    18e4:	0e 94 8d 1c 	call	0x391a	; 0x391a <dspResetHold>
	ledResetHold();	/* Assert the LED ICs reset signal early and hold */
    18e8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ledResetHold>
	watchdogInit();	/* Watchdog active as soon as possible */
    18ec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <watchdogInit>
	
	/* delay to give the power time to settle */
	delayAfterPowerOnReset();	
    18f0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <delayAfterPowerOnReset>
	
	cpuClockInit();	/* Configure the clock source and frequency to be used */
    18f4:	0e 94 b6 0c 	call	0x196c	; 0x196c <cpuClockInit>
	rstInit();
    18f8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <rstInit>
	dspResetHold();	/* Assert the display reset signal and hold */
    18fc:	0e 94 8d 1c 	call	0x391a	; 0x391a <dspResetHold>
	ledResetHold();	/* Assert the LED ICs reset signal early and hold */
    1900:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ledResetHold>
	pscI2cInit();
    1904:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <pscI2cInit>
	hmiI2cInit();
    1908:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <hmiI2cInit>
	adcInit();	/* forSupplyVoltageMeasurement, AmbientLightLevelMeasurement */
    190c:	0e 94 6f 1a 	call	0x34de	; 0x34de <adcInit>
	proximitySensorInit();	/* Configure Prox. Sensor */
    1910:	0e 94 77 12 	call	0x24ee	; 0x24ee <proximitySensorInit>
	btnInitButtons();
    1914:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <btnInitButtons>
	manualResetDetectInit();
    1918:	0e 94 4c 12 	call	0x2498	; 0x2498 <manualResetDetectInit>
	beepInit();
    191c:	0e 94 3d 1b 	call	0x367a	; 0x367a <beepInit>
	lowPowerInit(); /* Standby / low power (off / normal running mode) */
    1920:	0e 94 15 12 	call	0x242a	; 0x242a <lowPowerInit>
	mainTimerInit();	/* Used for general timing */
    1924:	0e 94 7f 18 	call	0x30fe	; 0x30fe <mainTimerInit>
	dspInit();
    1928:	0e 94 a4 1c 	call	0x3948	; 0x3948 <dspInit>
	ledDriverInit();
    192c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <ledDriverInit>
	spiInit();
    1930:	0e 94 4b 1a 	call	0x3496	; 0x3496 <spiInit>
	esfInit();
    1934:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <esfInit>
	quadInit();
    1938:	0e 94 a4 19 	call	0x3348	; 0x3348 <quadInit>


	
	/* wait for external devices to be ready after reset */
	/* The LED driver ICs require 2 ms after power up to fully wake up */
	delayAfterExternalHardwareReset();
    193c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <delayAfterExternalHardwareReset>

	uint8_t lastReasonForReset = rstGetLastReasonForReset();
    1940:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <rstGetLastReasonForReset>
    1944:	89 83       	std	Y+1, r24	; 0x01
	pscSetLastReasonForReset(lastReasonForReset);
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <pscSetLastReasonForReset>
	
	
	/* Enable low interrupt level */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    194c:	80 ea       	ldi	r24, 0xA0	; 160
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	20 ea       	ldi	r18, 0xA0	; 160
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	f9 01       	movw	r30, r18
    1956:	22 81       	ldd	r18, Z+2	; 0x02
    1958:	21 60       	ori	r18, 0x01	; 1
    195a:	fc 01       	movw	r30, r24
    195c:	22 83       	std	Z+2, r18	; 0x02

	/* Enable global interrupts */
	EnableInterrupts();
    195e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <EnableInterrupts>
}
    1962:	00 00       	nop
    1964:	0f 90       	pop	r0
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <cpuClockInit>:
	(NOTE the RS485 and bluetooth units use UART comms, but these are not fitted to production PCBA)
	The external xtal is not fitted to production PCBA.
	\return Nothing
*/   
static void cpuClockInit(void)
{
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	/*  Configure PLL with the 2 MHz RC oscillator as source and
	 *  multiply by 4 to yield 8 MHz PLL clock. Wait
	 *  for it to be stable and set prescaler C to divide by two
	 *  CPU clock = 8 MHz
	 */
	CLKSYS_PLL_Config(OSC_PLLSRC_RC2M_gc, 4);	/* multiply by 4 */
    1974:	64 e0       	ldi	r22, 0x04	; 4
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 a6 1b 	call	0x374c	; 0x374c <CLKSYS_PLL_Config>
	CLKSYS_Enable(OSC_PLLEN_bm);	/* Enable the clock source */
    197c:	80 e5       	ldi	r24, 0x50	; 80
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	20 e5       	ldi	r18, 0x50	; 80
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	20 81       	ld	r18, Z
    1988:	20 61       	ori	r18, 0x10	; 16
    198a:	fc 01       	movw	r30, r24
    198c:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config(CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);	/* Set the prescalers to 1. No division */
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 be 1b 	call	0x377c	; 0x377c <CLKSYS_Prescalers_Config>
	
	/* Wait for clock source to be stable */
	while(CLKSYS_IsReady(OSC_PLLRDY_bm) == 0)
    1996:	00 00       	nop
    1998:	80 e5       	ldi	r24, 0x50	; 80
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	fc 01       	movw	r30, r24
    199e:	81 81       	ldd	r24, Z+1	; 0x01
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	80 71       	andi	r24, 0x10	; 16
    19a6:	99 27       	eor	r25, r25
    19a8:	89 2b       	or	r24, r25
    19aa:	b1 f3       	breq	.-20     	; 0x1998 <cpuClockInit+0x2c>
	{}
		
	/* Select the clock source */
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_PLL_gc);
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <CLKSYS_Main_ClockSource_Select>
}
    19b2:	00 00       	nop
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <watchdogInit>:
/** Initialise the Watchdog
	Nothing to do in firmware, The watchdog is enabled, locked and the interval set using the programmed FUSES
	\return Nothing
*/   
static void watchdogInit(void)
{
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	/* The watchdog is enabled, locked and the interval set using the programmed FUSES */
}
    19c2:	00 00       	nop
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <delayAfterPowerOnReset>:

/** Create a delay after reset
	\return Nothing
*/   
static void delayAfterPowerOnReset(void)
{
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	/* Set up Timer/Counter 0 .
		CPU clock is 2 MHz
		prescale / divide by 2 to yield 1 MHz, or 1us timer clock
		Count full 16-bit range yields 65 ms
	 */
	TCD0.PER = 0;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	99 e0       	ldi	r25, 0x09	; 9
    19d6:	fc 01       	movw	r30, r24
    19d8:	16 a2       	std	Z+38, r1	; 0x26
    19da:	17 a2       	std	Z+39, r1	; 0x27
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV2_gc;
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	99 e0       	ldi	r25, 0x09	; 9
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	39 e0       	ldi	r19, 0x09	; 9
    19e4:	f9 01       	movw	r30, r18
    19e6:	20 81       	ld	r18, Z
    19e8:	20 7f       	andi	r18, 0xF0	; 240
    19ea:	22 60       	ori	r18, 0x02	; 2
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 83       	st	Z, r18
	
	/* Wait until the interval has ellapsed */
	while((TCD0.INTFLAGS & TC0_OVFIF_bm) == 0)
    19f0:	00 00       	nop
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	99 e0       	ldi	r25, 0x09	; 9
    19f6:	fc 01       	movw	r30, r24
    19f8:	84 85       	ldd	r24, Z+12	; 0x0c
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	99 27       	eor	r25, r25
    1a02:	89 2b       	or	r24, r25
    1a04:	b1 f3       	breq	.-20     	; 0x19f2 <delayAfterPowerOnReset+0x28>
	{}

	/* Disable the timer */
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm );
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	99 e0       	ldi	r25, 0x09	; 9
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	39 e0       	ldi	r19, 0x09	; 9
    1a0e:	f9 01       	movw	r30, r18
    1a10:	20 81       	ld	r18, Z
    1a12:	20 7f       	andi	r18, 0xF0	; 240
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
	
	/* Clear the overflow flag */
	TCD0.INTFLAGS = TC0_OVFIF_bm;
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	99 e0       	ldi	r25, 0x09	; 9
    1a1c:	21 e0       	ldi	r18, 0x01	; 1
    1a1e:	fc 01       	movw	r30, r24
    1a20:	24 87       	std	Z+12, r18	; 0x0c
}
    1a22:	00 00       	nop
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <delayAfterExternalHardwareReset>:


static void delayAfterExternalHardwareReset(void)
{
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	/* Set up Timer/Counter 0 .
		CPU clock is 8 MHz
		Count full 16-bit range yields 8 ms
	 */
	TCD0.PER = 0;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	99 e0       	ldi	r25, 0x09	; 9
    1a36:	fc 01       	movw	r30, r24
    1a38:	16 a2       	std	Z+38, r1	; 0x26
    1a3a:	17 a2       	std	Z+39, r1	; 0x27
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	99 e0       	ldi	r25, 0x09	; 9
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	39 e0       	ldi	r19, 0x09	; 9
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 81       	ld	r18, Z
    1a48:	20 7f       	andi	r18, 0xF0	; 240
    1a4a:	21 60       	ori	r18, 0x01	; 1
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	20 83       	st	Z, r18
	
	/* Wait until the interval has ellapsed */
	while((TCD0.INTFLAGS & TC0_OVFIF_bm) == 0)
    1a50:	00 00       	nop
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	99 e0       	ldi	r25, 0x09	; 9
    1a56:	fc 01       	movw	r30, r24
    1a58:	84 85       	ldd	r24, Z+12	; 0x0c
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	81 70       	andi	r24, 0x01	; 1
    1a60:	99 27       	eor	r25, r25
    1a62:	89 2b       	or	r24, r25
    1a64:	b1 f3       	breq	.-20     	; 0x1a52 <delayAfterExternalHardwareReset+0x28>
	{}

	/* Disable the timer */
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm );
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	99 e0       	ldi	r25, 0x09	; 9
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	39 e0       	ldi	r19, 0x09	; 9
    1a6e:	f9 01       	movw	r30, r18
    1a70:	20 81       	ld	r18, Z
    1a72:	20 7f       	andi	r18, 0xF0	; 240
    1a74:	fc 01       	movw	r30, r24
    1a76:	20 83       	st	Z, r18
	
	/* Clear the overflow flag */
	TCD0.INTFLAGS = TC0_OVFIF_bm;
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	99 e0       	ldi	r25, 0x09	; 9
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	fc 01       	movw	r30, r24
    1a80:	24 87       	std	Z+12, r18	; 0x0c
}
    1a82:	00 00       	nop
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <ledResetHold>:
}

void ledSetButtonOff(uint8_t cButton)
{
	ledSetButtonColour(cButton, 0,0,0);
}
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	80 ea       	ldi	r24, 0xA0	; 160
    1a94:	96 e0       	ldi	r25, 0x06	; 6
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	fc 01       	movw	r30, r24
    1a9a:	25 83       	std	Z+5, r18	; 0x05
    1a9c:	80 ea       	ldi	r24, 0xA0	; 160
    1a9e:	96 e0       	ldi	r25, 0x06	; 6
    1aa0:	21 e0       	ldi	r18, 0x01	; 1
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	21 83       	std	Z+1, r18	; 0x01
    1aa6:	80 ea       	ldi	r24, 0xA0	; 160
    1aa8:	96 e0       	ldi	r25, 0x06	; 6
    1aaa:	fc 01       	movw	r30, r24
    1aac:	10 8a       	std	Z+16, r1	; 0x10
    1aae:	00 00       	nop
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <ledDriverInit>:
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	80 ea       	ldi	r24, 0xA0	; 160
    1ac0:	96 e0       	ldi	r25, 0x06	; 6
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	26 83       	std	Z+6, r18	; 0x06
    1ac8:	00 00       	nop
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <ledSetAllIndicatorColour>:
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <ledSetAllIndicatorColour+0x6>
    1ad6:	1f 92       	push	r1
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	6b 83       	std	Y+3, r22	; 0x03
    1ae0:	4c 83       	std	Y+4, r20	; 0x04
    1ae2:	19 82       	std	Y+1, r1	; 0x01
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <ledSetAllIndicatorColour+0x28>
    1ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae8:	4b 81       	ldd	r20, Y+3	; 0x03
    1aea:	6a 81       	ldd	r22, Y+2	; 0x02
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ledSetIndicatorColour>
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	8f 5f       	subi	r24, 0xFF	; 255
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	85 30       	cpi	r24, 0x05	; 5
    1afc:	a0 f3       	brcs	.-24     	; 0x1ae6 <ledSetAllIndicatorColour+0x16>
    1afe:	00 00       	nop
    1b00:	24 96       	adiw	r28, 0x04	; 4
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	08 95       	ret

00001b0c <ledSetIndicatorColour>:
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	27 97       	sbiw	r28, 0x07	; 7
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	8c 83       	std	Y+4, r24	; 0x04
    1b1c:	6d 83       	std	Y+5, r22	; 0x05
    1b1e:	4e 83       	std	Y+6, r20	; 0x06
    1b20:	2f 83       	std	Y+7, r18	; 0x07
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e2       	ldi	r25, 0x20	; 32
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	88 e1       	ldi	r24, 0x18	; 24
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	89 2f       	mov	r24, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	89 0f       	add	r24, r25
    1b36:	9b 81       	ldd	r25, Y+3	; 0x03
    1b38:	89 0f       	add	r24, r25
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	82 35       	cpi	r24, 0x52	; 82
    1b40:	10 f0       	brcs	.+4      	; 0x1b46 <ledSetIndicatorColour+0x3a>
    1b42:	81 e5       	ldi	r24, 0x51	; 81
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8e 81       	ldd	r24, Y+6	; 0x06
    1b48:	82 35       	cpi	r24, 0x52	; 82
    1b4a:	10 f0       	brcs	.+4      	; 0x1b50 <ledSetIndicatorColour+0x44>
    1b4c:	81 e5       	ldi	r24, 0x51	; 81
    1b4e:	8e 83       	std	Y+6, r24	; 0x06
    1b50:	8f 81       	ldd	r24, Y+7	; 0x07
    1b52:	82 35       	cpi	r24, 0x52	; 82
    1b54:	10 f0       	brcs	.+4      	; 0x1b5a <ledSetIndicatorColour+0x4e>
    1b56:	81 e5       	ldi	r24, 0x51	; 81
    1b58:	8f 83       	std	Y+7, r24	; 0x07
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	29 81       	ldd	r18, Y+1	; 0x01
    1b62:	3a 81       	ldd	r19, Y+2	; 0x02
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	02 96       	adiw	r24, 0x02	; 2
    1b6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	20 83       	st	Z, r18
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	8f 5f       	subi	r24, 0xFF	; 255
    1b74:	8b 83       	std	Y+3, r24	; 0x03
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	29 81       	ldd	r18, Y+1	; 0x01
    1b7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	02 96       	adiw	r24, 0x02	; 2
    1b86:	2e 81       	ldd	r18, Y+6	; 0x06
    1b88:	fc 01       	movw	r30, r24
    1b8a:	20 83       	st	Z, r18
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	29 81       	ldd	r18, Y+1	; 0x01
    1b9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	02 96       	adiw	r24, 0x02	; 2
    1ba2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
    1ba8:	88 e0       	ldi	r24, 0x08	; 8
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	89 2f       	mov	r24, r25
    1bb0:	88 0f       	add	r24, r24
    1bb2:	89 0f       	add	r24, r25
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	89 0f       	add	r24, r25
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	29 81       	ldd	r18, Y+1	; 0x01
    1bc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc4:	82 0f       	add	r24, r18
    1bc6:	93 1f       	adc	r25, r19
    1bc8:	02 96       	adiw	r24, 0x02	; 2
    1bca:	2f ef       	ldi	r18, 0xFF	; 255
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 83       	st	Z, r18
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	29 81       	ldd	r18, Y+1	; 0x01
    1bde:	3a 81       	ldd	r19, Y+2	; 0x02
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	02 96       	adiw	r24, 0x02	; 2
    1be6:	2f ef       	ldi	r18, 0xFF	; 255
    1be8:	fc 01       	movw	r30, r24
    1bea:	20 83       	st	Z, r18
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	29 81       	ldd	r18, Y+1	; 0x01
    1bfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1bfc:	82 0f       	add	r24, r18
    1bfe:	93 1f       	adc	r25, r19
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	2f ef       	ldi	r18, 0xFF	; 255
    1c04:	fc 01       	movw	r30, r24
    1c06:	20 83       	st	Z, r18
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    1c0e:	00 00       	nop
    1c10:	27 96       	adiw	r28, 0x07	; 7
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <ledSetAllButtonColour>:
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <ledSetAllButtonColour+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	6a 83       	std	Y+2, r22	; 0x02
    1c2a:	4b 83       	std	Y+3, r20	; 0x03
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	4a 81       	ldd	r20, Y+2	; 0x02
    1c30:	69 81       	ldd	r22, Y+1	; 0x01
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <ledSetButtonColour>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	4a 81       	ldd	r20, Y+2	; 0x02
    1c3c:	69 81       	ldd	r22, Y+1	; 0x01
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <ledSetButtonColour>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	4a 81       	ldd	r20, Y+2	; 0x02
    1c48:	69 81       	ldd	r22, Y+1	; 0x01
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <ledSetButtonColour>
    1c50:	00 00       	nop
    1c52:	23 96       	adiw	r28, 0x03	; 3
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <ledSetButtonColour>:
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <ledSetButtonColour+0x6>
    1c64:	1f 92       	push	r1
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	6a 83       	std	Y+2, r22	; 0x02
    1c6e:	4b 83       	std	Y+3, r20	; 0x03
    1c70:	2c 83       	std	Y+4, r18	; 0x04
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	88 23       	and	r24, r24
    1c76:	31 f4       	brne	.+12     	; 0x1c84 <ledSetButtonColour+0x26>
    1c78:	4c 81       	ldd	r20, Y+4	; 0x04
    1c7a:	6b 81       	ldd	r22, Y+3	; 0x03
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <ledSetLeftButtonColour>
    1c82:	0e c0       	rjmp	.+28     	; 0x1ca0 <ledSetButtonColour+0x42>
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	31 f4       	brne	.+12     	; 0x1c96 <ledSetButtonColour+0x38>
    1c8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c8c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <ledSetCentreButtonColour>
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <ledSetButtonColour+0x42>
    1c96:	4c 81       	ldd	r20, Y+4	; 0x04
    1c98:	6b 81       	ldd	r22, Y+3	; 0x03
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	0e 94 6d 10 	call	0x20da	; 0x20da <ledSetRightButtonColour>
    1ca0:	00 00       	nop
    1ca2:	24 96       	adiw	r28, 0x04	; 4
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <ledSetLeftButtonColour>:

void ledSetLeftButtonColour(uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <ledSetLeftButtonColour+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <ledSetLeftButtonColour+0x8>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8c 83       	std	Y+4, r24	; 0x04
    1cbc:	6d 83       	std	Y+5, r22	; 0x05
    1cbe:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsLeftAndCtr;
    1cc0:	82 e4       	ldi	r24, 0x42	; 66
    1cc2:	90 e2       	ldi	r25, 0x20	; 32
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1cc8:	88 e1       	ldi	r24, 0x18	; 24
    1cca:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    1ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cce:	82 35       	cpi	r24, 0x52	; 82
    1cd0:	10 f0       	brcs	.+4      	; 0x1cd6 <ledSetLeftButtonColour+0x28>
	{
		cRed = ledDriverIref3mA;
    1cd2:	81 e5       	ldi	r24, 0x51	; 81
    1cd4:	8c 83       	std	Y+4, r24	; 0x04
	}
	if(cGreen  > ledDriverIref3mA)
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	82 35       	cpi	r24, 0x52	; 82
    1cda:	10 f0       	brcs	.+4      	; 0x1ce0 <ledSetLeftButtonColour+0x32>
	{
		cGreen = ledDriverIref3mA;
    1cdc:	81 e5       	ldi	r24, 0x51	; 81
    1cde:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cBlue  > ledDriverIref3mA)
    1ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce2:	82 35       	cpi	r24, 0x52	; 82
    1ce4:	10 f0       	brcs	.+4      	; 0x1cea <ledSetLeftButtonColour+0x3c>
	{
		cBlue = ledDriverIref3mA;
    1ce6:	81 e5       	ldi	r24, 0x51	; 81
    1ce8:	8e 83       	std	Y+6, r24	; 0x06
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	29 81       	ldd	r18, Y+1	; 0x01
    1cf2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf4:	82 0f       	add	r24, r18
    1cf6:	93 1f       	adc	r25, r19
    1cf8:	02 96       	adiw	r24, 0x02	; 2
    1cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	8f 5f       	subi	r24, 0xFF	; 255
    1d04:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	29 81       	ldd	r18, Y+1	; 0x01
    1d0e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	02 96       	adiw	r24, 0x02	; 2
    1d16:	2d 81       	ldd	r18, Y+5	; 0x05
    1d18:	fc 01       	movw	r30, r24
    1d1a:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	29 81       	ldd	r18, Y+1	; 0x01
    1d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2c:	82 0f       	add	r24, r18
    1d2e:	93 1f       	adc	r25, r19
    1d30:	02 96       	adiw	r24, 0x02	; 2
    1d32:	2e 81       	ldd	r18, Y+6	; 0x06
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Both channels are set the same */
	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	29 81       	ldd	r18, Y+1	; 0x01
    1d46:	3a 81       	ldd	r19, Y+2	; 0x02
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	02 96       	adiw	r24, 0x02	; 2
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	29 81       	ldd	r18, Y+1	; 0x01
    1d62:	3a 81       	ldd	r19, Y+2	; 0x02
    1d64:	82 0f       	add	r24, r18
    1d66:	93 1f       	adc	r25, r19
    1d68:	02 96       	adiw	r24, 0x02	; 2
    1d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	29 81       	ldd	r18, Y+1	; 0x01
    1d7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	02 96       	adiw	r24, 0x02	; 2
    1d86:	2e 81       	ldd	r18, Y+6	; 0x06
    1d88:	fc 01       	movw	r30, r24
    1d8a:	20 83       	st	Z, r18
	
	//cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
	cRegisterIndex = REG_PWM0;
    1d8c:	88 e0       	ldi	r24, 0x08	; 8
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
	
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	29 81       	ldd	r18, Y+1	; 0x01
    1d98:	3a 81       	ldd	r19, Y+2	; 0x02
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	02 96       	adiw	r24, 0x02	; 2
    1da0:	2f ef       	ldi	r18, 0xFF	; 255
    1da2:	fc 01       	movw	r30, r24
    1da4:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	29 81       	ldd	r18, Y+1	; 0x01
    1db4:	3a 81       	ldd	r19, Y+2	; 0x02
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	02 96       	adiw	r24, 0x02	; 2
    1dbc:	2f ef       	ldi	r18, 0xFF	; 255
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	29 81       	ldd	r18, Y+1	; 0x01
    1dd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	02 96       	adiw	r24, 0x02	; 2
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
	cRegisterIndex++;
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	29 81       	ldd	r18, Y+1	; 0x01
    1dec:	3a 81       	ldd	r19, Y+2	; 0x02
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	02 96       	adiw	r24, 0x02	; 2
    1df4:	2f ef       	ldi	r18, 0xFF	; 255
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	29 81       	ldd	r18, Y+1	; 0x01
    1e08:	3a 81       	ldd	r19, Y+2	; 0x02
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	02 96       	adiw	r24, 0x02	; 2
    1e10:	2f ef       	ldi	r18, 0xFF	; 255
    1e12:	fc 01       	movw	r30, r24
    1e14:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	29 81       	ldd	r18, Y+1	; 0x01
    1e24:	3a 81       	ldd	r19, Y+2	; 0x02
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	02 96       	adiw	r24, 0x02	; 2
    1e2c:	2f ef       	ldi	r18, 0xFF	; 255
    1e2e:	fc 01       	movw	r30, r24
    1e30:	20 83       	st	Z, r18
	cRegisterIndex++;
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	8b 83       	std	Y+3, r24	; 0x03
}
    1e38:	00 00       	nop
    1e3a:	26 96       	adiw	r28, 0x06	; 6
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <ledSetLeftButtonColourInt>:

void ledSetLeftButtonColourInt(uint8_t cInt,uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	27 97       	sbiw	r28, 0x07	; 7
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	8c 83       	std	Y+4, r24	; 0x04
    1e56:	6d 83       	std	Y+5, r22	; 0x05
    1e58:	4e 83       	std	Y+6, r20	; 0x06
    1e5a:	2f 83       	std	Y+7, r18	; 0x07
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsLeftAndCtr;
    1e5c:	82 e4       	ldi	r24, 0x42	; 66
    1e5e:	90 e2       	ldi	r25, 0x20	; 32
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1e64:	88 e1       	ldi	r24, 0x18	; 24
    1e66:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	82 35       	cpi	r24, 0x52	; 82
    1e6c:	10 f0       	brcs	.+4      	; 0x1e72 <ledSetLeftButtonColourInt+0x2c>
	{
		cRed = ledDriverIref3mA;
    1e6e:	81 e5       	ldi	r24, 0x51	; 81
    1e70:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cGreen  > ledDriverIref3mA)
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	82 35       	cpi	r24, 0x52	; 82
    1e76:	10 f0       	brcs	.+4      	; 0x1e7c <ledSetLeftButtonColourInt+0x36>
	{
		cGreen = ledDriverIref3mA;
    1e78:	81 e5       	ldi	r24, 0x51	; 81
    1e7a:	8e 83       	std	Y+6, r24	; 0x06
	}
	if(cBlue  > ledDriverIref3mA)
    1e7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e7e:	82 35       	cpi	r24, 0x52	; 82
    1e80:	10 f0       	brcs	.+4      	; 0x1e86 <ledSetLeftButtonColourInt+0x40>
	{
		cBlue = ledDriverIref3mA;
    1e82:	81 e5       	ldi	r24, 0x51	; 81
    1e84:	8f 83       	std	Y+7, r24	; 0x07
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	29 81       	ldd	r18, Y+1	; 0x01
    1e8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e90:	82 0f       	add	r24, r18
    1e92:	93 1f       	adc	r25, r19
    1e94:	02 96       	adiw	r24, 0x02	; 2
    1e96:	2d 81       	ldd	r18, Y+5	; 0x05
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	29 81       	ldd	r18, Y+1	; 0x01
    1eaa:	3a 81       	ldd	r19, Y+2	; 0x02
    1eac:	82 0f       	add	r24, r18
    1eae:	93 1f       	adc	r25, r19
    1eb0:	02 96       	adiw	r24, 0x02	; 2
    1eb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	29 81       	ldd	r18, Y+1	; 0x01
    1ec6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec8:	82 0f       	add	r24, r18
    1eca:	93 1f       	adc	r25, r19
    1ecc:	02 96       	adiw	r24, 0x02	; 2
    1ece:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Both channels are set the same */
	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	29 81       	ldd	r18, Y+1	; 0x01
    1ee2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	02 96       	adiw	r24, 0x02	; 2
    1eea:	2d 81       	ldd	r18, Y+5	; 0x05
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	29 81       	ldd	r18, Y+1	; 0x01
    1efe:	3a 81       	ldd	r19, Y+2	; 0x02
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	02 96       	adiw	r24, 0x02	; 2
    1f06:	2e 81       	ldd	r18, Y+6	; 0x06
    1f08:	fc 01       	movw	r30, r24
    1f0a:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	8f 5f       	subi	r24, 0xFF	; 255
    1f10:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	29 81       	ldd	r18, Y+1	; 0x01
    1f1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f1c:	82 0f       	add	r24, r18
    1f1e:	93 1f       	adc	r25, r19
    1f20:	02 96       	adiw	r24, 0x02	; 2
    1f22:	2f 81       	ldd	r18, Y+7	; 0x07
    1f24:	fc 01       	movw	r30, r24
    1f26:	20 83       	st	Z, r18
	
	//cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
	cRegisterIndex = REG_PWM0;
    1f28:	88 e0       	ldi	r24, 0x08	; 8
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
	
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	29 81       	ldd	r18, Y+1	; 0x01
    1f34:	3a 81       	ldd	r19, Y+2	; 0x02
    1f36:	82 0f       	add	r24, r18
    1f38:	93 1f       	adc	r25, r19
    1f3a:	02 96       	adiw	r24, 0x02	; 2
    1f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3e:	fc 01       	movw	r30, r24
    1f40:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	29 81       	ldd	r18, Y+1	; 0x01
    1f50:	3a 81       	ldd	r19, Y+2	; 0x02
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	02 96       	adiw	r24, 0x02	; 2
    1f58:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	29 81       	ldd	r18, Y+1	; 0x01
    1f6c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f6e:	82 0f       	add	r24, r18
    1f70:	93 1f       	adc	r25, r19
    1f72:	02 96       	adiw	r24, 0x02	; 2
    1f74:	2c 81       	ldd	r18, Y+4	; 0x04
    1f76:	fc 01       	movw	r30, r24
    1f78:	20 83       	st	Z, r18
	cRegisterIndex++;
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	29 81       	ldd	r18, Y+1	; 0x01
    1f88:	3a 81       	ldd	r19, Y+2	; 0x02
    1f8a:	82 0f       	add	r24, r18
    1f8c:	93 1f       	adc	r25, r19
    1f8e:	02 96       	adiw	r24, 0x02	; 2
    1f90:	2c 81       	ldd	r18, Y+4	; 0x04
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	29 81       	ldd	r18, Y+1	; 0x01
    1fa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fa6:	82 0f       	add	r24, r18
    1fa8:	93 1f       	adc	r25, r19
    1faa:	02 96       	adiw	r24, 0x02	; 2
    1fac:	2c 81       	ldd	r18, Y+4	; 0x04
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	29 81       	ldd	r18, Y+1	; 0x01
    1fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	02 96       	adiw	r24, 0x02	; 2
    1fc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fca:	fc 01       	movw	r30, r24
    1fcc:	20 83       	st	Z, r18
	cRegisterIndex++;
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
}
    1fd4:	00 00       	nop
    1fd6:	27 96       	adiw	r28, 0x07	; 7
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	08 95       	ret

00001fe2 <ledSetCentreButtonColour>:

void ledSetCentreButtonColour(uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <ledSetCentreButtonColour+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <ledSetCentreButtonColour+0x8>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	8c 83       	std	Y+4, r24	; 0x04
    1ff0:	6d 83       	std	Y+5, r22	; 0x05
    1ff2:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsLeftAndCtr;
    1ff4:	82 e4       	ldi	r24, 0x42	; 66
    1ff6:	90 e2       	ldi	r25, 0x20	; 32
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1ffc:	88 e1       	ldi	r24, 0x18	; 24
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
	cRegisterIndex += 6;	/* move to the RGB set for the target  */
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	8a 5f       	subi	r24, 0xFA	; 250
    2004:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	82 35       	cpi	r24, 0x52	; 82
    200a:	10 f0       	brcs	.+4      	; 0x2010 <ledSetCentreButtonColour+0x2e>
	{
		cRed = ledDriverIref3mA;
    200c:	81 e5       	ldi	r24, 0x51	; 81
    200e:	8c 83       	std	Y+4, r24	; 0x04
	}
	if(cGreen  > ledDriverIref3mA)
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	82 35       	cpi	r24, 0x52	; 82
    2014:	10 f0       	brcs	.+4      	; 0x201a <ledSetCentreButtonColour+0x38>
	{
		cGreen = ledDriverIref3mA;
    2016:	81 e5       	ldi	r24, 0x51	; 81
    2018:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cBlue  > ledDriverIref3mA)
    201a:	8e 81       	ldd	r24, Y+6	; 0x06
    201c:	82 35       	cpi	r24, 0x52	; 82
    201e:	10 f0       	brcs	.+4      	; 0x2024 <ledSetCentreButtonColour+0x42>
	{
		cBlue = ledDriverIref3mA;
    2020:	81 e5       	ldi	r24, 0x51	; 81
    2022:	8e 83       	std	Y+6, r24	; 0x06
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	29 81       	ldd	r18, Y+1	; 0x01
    202c:	3a 81       	ldd	r19, Y+2	; 0x02
    202e:	82 0f       	add	r24, r18
    2030:	93 1f       	adc	r25, r19
    2032:	02 96       	adiw	r24, 0x02	; 2
    2034:	2c 81       	ldd	r18, Y+4	; 0x04
    2036:	fc 01       	movw	r30, r24
    2038:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	29 81       	ldd	r18, Y+1	; 0x01
    2048:	3a 81       	ldd	r19, Y+2	; 0x02
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
    204e:	02 96       	adiw	r24, 0x02	; 2
    2050:	2d 81       	ldd	r18, Y+5	; 0x05
    2052:	fc 01       	movw	r30, r24
    2054:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	8f 5f       	subi	r24, 0xFF	; 255
    205a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	29 81       	ldd	r18, Y+1	; 0x01
    2064:	3a 81       	ldd	r19, Y+2	; 0x02
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	02 96       	adiw	r24, 0x02	; 2
    206c:	2e 81       	ldd	r18, Y+6	; 0x06
    206e:	fc 01       	movw	r30, r24
    2070:	20 83       	st	Z, r18

	/* The 2nd channel for the centre button is connected on a different driver */	
	pLedDriver = &gLedButtonsCtrAndRight;
    2072:	84 e8       	ldi	r24, 0x84	; 132
    2074:	90 e2       	ldi	r25, 0x20	; 32
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    207a:	88 e1       	ldi	r24, 0x18	; 24
    207c:	8b 83       	std	Y+3, r24	; 0x03

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	29 81       	ldd	r18, Y+1	; 0x01
    2086:	3a 81       	ldd	r19, Y+2	; 0x02
    2088:	82 0f       	add	r24, r18
    208a:	93 1f       	adc	r25, r19
    208c:	02 96       	adiw	r24, 0x02	; 2
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	8f 5f       	subi	r24, 0xFF	; 255
    2098:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	29 81       	ldd	r18, Y+1	; 0x01
    20a2:	3a 81       	ldd	r19, Y+2	; 0x02
    20a4:	82 0f       	add	r24, r18
    20a6:	93 1f       	adc	r25, r19
    20a8:	02 96       	adiw	r24, 0x02	; 2
    20aa:	2d 81       	ldd	r18, Y+5	; 0x05
    20ac:	fc 01       	movw	r30, r24
    20ae:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	29 81       	ldd	r18, Y+1	; 0x01
    20be:	3a 81       	ldd	r19, Y+2	; 0x02
    20c0:	82 0f       	add	r24, r18
    20c2:	93 1f       	adc	r25, r19
    20c4:	02 96       	adiw	r24, 0x02	; 2
    20c6:	2e 81       	ldd	r18, Y+6	; 0x06
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 83       	st	Z, r18
}
    20cc:	00 00       	nop
    20ce:	26 96       	adiw	r28, 0x06	; 6
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	08 95       	ret

000020da <ledSetRightButtonColour>:

void ledSetRightButtonColour(uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <ledSetRightButtonColour+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <ledSetRightButtonColour+0x8>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8c 83       	std	Y+4, r24	; 0x04
    20e8:	6d 83       	std	Y+5, r22	; 0x05
    20ea:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsCtrAndRight;
    20ec:	84 e8       	ldi	r24, 0x84	; 132
    20ee:	90 e2       	ldi	r25, 0x20	; 32
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    20f4:	88 e1       	ldi	r24, 0x18	; 24
    20f6:	8b 83       	std	Y+3, r24	; 0x03
	cRegisterIndex += 3;	/* move to the RGB set for the target  */
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	8d 5f       	subi	r24, 0xFD	; 253
    20fc:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	82 35       	cpi	r24, 0x52	; 82
    2102:	10 f0       	brcs	.+4      	; 0x2108 <ledSetRightButtonColour+0x2e>
	{
		cRed = ledDriverIref3mA;
    2104:	81 e5       	ldi	r24, 0x51	; 81
    2106:	8c 83       	std	Y+4, r24	; 0x04
	}
	if(cGreen  > ledDriverIref3mA)
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	82 35       	cpi	r24, 0x52	; 82
    210c:	10 f0       	brcs	.+4      	; 0x2112 <ledSetRightButtonColour+0x38>
	{
		cGreen = ledDriverIref3mA;
    210e:	81 e5       	ldi	r24, 0x51	; 81
    2110:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cBlue  > ledDriverIref3mA)
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	82 35       	cpi	r24, 0x52	; 82
    2116:	10 f0       	brcs	.+4      	; 0x211c <ledSetRightButtonColour+0x42>
	{
		cBlue = ledDriverIref3mA;
    2118:	81 e5       	ldi	r24, 0x51	; 81
    211a:	8e 83       	std	Y+6, r24	; 0x06
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	29 81       	ldd	r18, Y+1	; 0x01
    2124:	3a 81       	ldd	r19, Y+2	; 0x02
    2126:	82 0f       	add	r24, r18
    2128:	93 1f       	adc	r25, r19
    212a:	02 96       	adiw	r24, 0x02	; 2
    212c:	2c 81       	ldd	r18, Y+4	; 0x04
    212e:	fc 01       	movw	r30, r24
    2130:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	29 81       	ldd	r18, Y+1	; 0x01
    2140:	3a 81       	ldd	r19, Y+2	; 0x02
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	02 96       	adiw	r24, 0x02	; 2
    2148:	2d 81       	ldd	r18, Y+5	; 0x05
    214a:	fc 01       	movw	r30, r24
    214c:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	8f 5f       	subi	r24, 0xFF	; 255
    2152:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	29 81       	ldd	r18, Y+1	; 0x01
    215c:	3a 81       	ldd	r19, Y+2	; 0x02
    215e:	82 0f       	add	r24, r18
    2160:	93 1f       	adc	r25, r19
    2162:	02 96       	adiw	r24, 0x02	; 2
    2164:	2e 81       	ldd	r18, Y+6	; 0x06
    2166:	fc 01       	movw	r30, r24
    2168:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Both channels are set the same */
	pLedDriver->cRegister[cRegisterIndex] = cRed;
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	29 81       	ldd	r18, Y+1	; 0x01
    2178:	3a 81       	ldd	r19, Y+2	; 0x02
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	02 96       	adiw	r24, 0x02	; 2
    2180:	2c 81       	ldd	r18, Y+4	; 0x04
    2182:	fc 01       	movw	r30, r24
    2184:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	29 81       	ldd	r18, Y+1	; 0x01
    2194:	3a 81       	ldd	r19, Y+2	; 0x02
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	02 96       	adiw	r24, 0x02	; 2
    219c:	2d 81       	ldd	r18, Y+5	; 0x05
    219e:	fc 01       	movw	r30, r24
    21a0:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	29 81       	ldd	r18, Y+1	; 0x01
    21b0:	3a 81       	ldd	r19, Y+2	; 0x02
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	02 96       	adiw	r24, 0x02	; 2
    21b8:	2e 81       	ldd	r18, Y+6	; 0x06
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
}
    21be:	00 00       	nop
    21c0:	26 96       	adiw	r28, 0x06	; 6
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <ledSetProgressSegmentColour>:

void ledSetProgressSegmentColour(uint8_t cSegment, uint8_t cInt, uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    21cc:	0f 93       	push	r16
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	2a 97       	sbiw	r28, 0x0a	; 10
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	8e 83       	std	Y+6, r24	; 0x06
    21de:	6f 83       	std	Y+7, r22	; 0x07
    21e0:	48 87       	std	Y+8, r20	; 0x08
    21e2:	29 87       	std	Y+9, r18	; 0x09
    21e4:	0a 87       	std	Y+10, r16	; 0x0a
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The progress bar back-lights are arranged on four driver ICs */
	uint8_t driverIndex = cSegment / ProgressBarSegmentCountPerDriver;
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	8d ec       	ldi	r24, 0xCD	; 205
    21ea:	98 9f       	mul	r25, r24
    21ec:	81 2d       	mov	r24, r1
    21ee:	11 24       	eor	r1, r1
    21f0:	86 95       	lsr	r24
    21f2:	86 95       	lsr	r24
    21f4:	89 83       	std	Y+1, r24	; 0x01

	pLedDriver = &gLedProgressBar[driverIndex];
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	42 e4       	ldi	r20, 0x42	; 66
    21fe:	42 9f       	mul	r20, r18
    2200:	c0 01       	movw	r24, r0
    2202:	43 9f       	mul	r20, r19
    2204:	90 0d       	add	r25, r0
    2206:	11 24       	eor	r1, r1
    2208:	8a 53       	subi	r24, 0x3A	; 58
    220a:	9f 4d       	sbci	r25, 0xDF	; 223
    220c:	8a 83       	std	Y+2, r24	; 0x02
    220e:	9b 83       	std	Y+3, r25	; 0x03

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	uint8_t driverSegment = cSegment % ProgressBarSegmentCountPerDriver;	/* range is 0 to 4 */
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	8d ec       	ldi	r24, 0xCD	; 205
    2214:	98 9f       	mul	r25, r24
    2216:	81 2d       	mov	r24, r1
    2218:	11 24       	eor	r1, r1
    221a:	28 2f       	mov	r18, r24
    221c:	26 95       	lsr	r18
    221e:	26 95       	lsr	r18
    2220:	82 2f       	mov	r24, r18
    2222:	88 0f       	add	r24, r24
    2224:	88 0f       	add	r24, r24
    2226:	82 0f       	add	r24, r18
    2228:	29 2f       	mov	r18, r25
    222a:	28 1b       	sub	r18, r24
    222c:	82 2f       	mov	r24, r18
    222e:	8c 83       	std	Y+4, r24	; 0x04
	cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	89 2f       	mov	r24, r25
    2234:	88 0f       	add	r24, r24
    2236:	89 0f       	add	r24, r25
    2238:	8d 83       	std	Y+5, r24	; 0x05
	cRegisterIndex += REG_IREF0;
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	88 5e       	subi	r24, 0xE8	; 232
    223e:	8d 83       	std	Y+5, r24	; 0x05
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    2240:	88 85       	ldd	r24, Y+8	; 0x08
    2242:	82 35       	cpi	r24, 0x52	; 82
    2244:	10 f0       	brcs	.+4      	; 0x224a <ledSetProgressSegmentColour+0x7e>
	{
		cRed = ledDriverIref3mA;
    2246:	81 e5       	ldi	r24, 0x51	; 81
    2248:	88 87       	std	Y+8, r24	; 0x08
	}
	if(cGreen  > ledDriverIref3mA)
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	82 35       	cpi	r24, 0x52	; 82
    224e:	10 f0       	brcs	.+4      	; 0x2254 <ledSetProgressSegmentColour+0x88>
	{
		cGreen = ledDriverIref3mA;
    2250:	81 e5       	ldi	r24, 0x51	; 81
    2252:	89 87       	std	Y+9, r24	; 0x09
	}
	if(cBlue  > ledDriverIref3mA)
    2254:	8a 85       	ldd	r24, Y+10	; 0x0a
    2256:	82 35       	cpi	r24, 0x52	; 82
    2258:	10 f0       	brcs	.+4      	; 0x225e <ledSetProgressSegmentColour+0x92>
	{
		cBlue = ledDriverIref3mA;
    225a:	81 e5       	ldi	r24, 0x51	; 81
    225c:	8a 87       	std	Y+10, r24	; 0x0a
	}
	

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	2a 81       	ldd	r18, Y+2	; 0x02
    2266:	3b 81       	ldd	r19, Y+3	; 0x03
    2268:	82 0f       	add	r24, r18
    226a:	93 1f       	adc	r25, r19
    226c:	02 96       	adiw	r24, 0x02	; 2
    226e:	28 85       	ldd	r18, Y+8	; 0x08
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] =cGreen;
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	2a 81       	ldd	r18, Y+2	; 0x02
    2282:	3b 81       	ldd	r19, Y+3	; 0x03
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	02 96       	adiw	r24, 0x02	; 2
    228a:	29 85       	ldd	r18, Y+9	; 0x09
    228c:	fc 01       	movw	r30, r24
    228e:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	2a 81       	ldd	r18, Y+2	; 0x02
    229e:	3b 81       	ldd	r19, Y+3	; 0x03
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	02 96       	adiw	r24, 0x02	; 2
    22a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    22a8:	fc 01       	movw	r30, r24
    22aa:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	8d 83       	std	Y+5, r24	; 0x05
	
// 	///////////////////////////
	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	driverSegment = cSegment % ProgressBarSegmentCountPerDriver;	/* range is 0 to 4 */
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	8d ec       	ldi	r24, 0xCD	; 205
    22b6:	98 9f       	mul	r25, r24
    22b8:	81 2d       	mov	r24, r1
    22ba:	11 24       	eor	r1, r1
    22bc:	28 2f       	mov	r18, r24
    22be:	26 95       	lsr	r18
    22c0:	26 95       	lsr	r18
    22c2:	82 2f       	mov	r24, r18
    22c4:	88 0f       	add	r24, r24
    22c6:	88 0f       	add	r24, r24
    22c8:	82 0f       	add	r24, r18
    22ca:	f9 2f       	mov	r31, r25
    22cc:	f8 1b       	sub	r31, r24
    22ce:	8f 2f       	mov	r24, r31
    22d0:	8c 83       	std	Y+4, r24	; 0x04
	cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	89 2f       	mov	r24, r25
    22d6:	88 0f       	add	r24, r24
    22d8:	89 0f       	add	r24, r25
    22da:	8d 83       	std	Y+5, r24	; 0x05
	cRegisterIndex += REG_PWM0;
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	88 5f       	subi	r24, 0xF8	; 248
    22e0:	8d 83       	std	Y+5, r24	; 0x05
	
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	2a 81       	ldd	r18, Y+2	; 0x02
    22ea:	3b 81       	ldd	r19, Y+3	; 0x03
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	02 96       	adiw	r24, 0x02	; 2
    22f2:	2f 81       	ldd	r18, Y+7	; 0x07
    22f4:	fc 01       	movw	r30, r24
    22f6:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	2a 81       	ldd	r18, Y+2	; 0x02
    2306:	3b 81       	ldd	r19, Y+3	; 0x03
    2308:	82 0f       	add	r24, r18
    230a:	93 1f       	adc	r25, r19
    230c:	02 96       	adiw	r24, 0x02	; 2
    230e:	2f 81       	ldd	r18, Y+7	; 0x07
    2310:	fc 01       	movw	r30, r24
    2312:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	2a 81       	ldd	r18, Y+2	; 0x02
    2322:	3b 81       	ldd	r19, Y+3	; 0x03
    2324:	82 0f       	add	r24, r18
    2326:	93 1f       	adc	r25, r19
    2328:	02 96       	adiw	r24, 0x02	; 2
    232a:	2f 81       	ldd	r18, Y+7	; 0x07
    232c:	fc 01       	movw	r30, r24
    232e:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	8d 83       	std	Y+5, r24	; 0x05

}
    2336:	00 00       	nop
    2338:	2a 96       	adiw	r28, 0x0a	; 10
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <ledIndexToRegisterCache>:

static LedDriver_t* ledIndexToRegisterCache(uint8_t cLedIcIndex)
{
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	00 d0       	rcall	.+0      	; 0x234c <ledIndexToRegisterCache+0x6>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	8b 83       	std	Y+3, r24	; 0x03
	LedDriver_t* pLedDriver;

	pLedDriver = &gLedIndicators;
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e2       	ldi	r25, 0x20	; 32
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	9a 83       	std	Y+2, r25	; 0x02

	if(cLedIcIndex <= ledIndex_DriverIc_Progress3)
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	84 30       	cpi	r24, 0x04	; 4
    235e:	70 f4       	brcc	.+28     	; 0x237c <ledIndexToRegisterCache+0x36>
	{
		pLedDriver = &gLedProgressBar[cLedIcIndex]; 	/* Led Driver ICs for Progress Bar */
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	42 e4       	ldi	r20, 0x42	; 66
    2368:	42 9f       	mul	r20, r18
    236a:	c0 01       	movw	r24, r0
    236c:	43 9f       	mul	r20, r19
    236e:	90 0d       	add	r25, r0
    2370:	11 24       	eor	r1, r1
    2372:	8a 53       	subi	r24, 0x3A	; 58
    2374:	9f 4d       	sbci	r25, 0xDF	; 223
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	17 c0       	rjmp	.+46     	; 0x23aa <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_Indicators)
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	84 30       	cpi	r24, 0x04	; 4
    2380:	29 f4       	brne	.+10     	; 0x238c <ledIndexToRegisterCache+0x46>
	{
		pLedDriver = &gLedIndicators;
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e2       	ldi	r25, 0x20	; 32
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_ButtonsLeftAndCtr)
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	85 30       	cpi	r24, 0x05	; 5
    2390:	29 f4       	brne	.+10     	; 0x239c <ledIndexToRegisterCache+0x56>
	{
		pLedDriver = &gLedButtonsLeftAndCtr; 	/* Led Driver IC for the Left and Centre buttons */
    2392:	82 e4       	ldi	r24, 0x42	; 66
    2394:	90 e2       	ldi	r25, 0x20	; 32
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	07 c0       	rjmp	.+14     	; 0x23aa <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_ButtonsCtrAndRight)
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	86 30       	cpi	r24, 0x06	; 6
    23a0:	21 f4       	brne	.+8      	; 0x23aa <ledIndexToRegisterCache+0x64>
	{
		pLedDriver = &gLedButtonsCtrAndRight; 	/* Led Driver IC for the Centre and Right buttons */
    23a2:	84 e8       	ldi	r24, 0x84	; 132
    23a4:	90 e2       	ldi	r25, 0x20	; 32
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	9a 83       	std	Y+2, r25	; 0x02
	}
	else
	{}

	return pLedDriver;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
}
    23ae:	23 96       	adiw	r28, 0x03	; 3
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <ledManager>:

/** Manage the LED driver IC settings.
	\return Nothing
*/   
void ledManager(void)
{
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	1f 92       	push	r1
    23c0:	1f 92       	push	r1
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	LedDriver_t* pLedDriver;

	
	if(gc10msTick_Local == gc10msTick)
    23c6:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <gc10msTick_Local>
    23ca:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <gc10msTick>
    23ce:	98 17       	cp	r25, r24
    23d0:	31 f1       	breq	.+76     	; 0x241e <ledManager+0x64>
	{}	/* Leave some time between accesses on the I2C, to give the prox sensor access an opportunity */
	else if(hmiI2cReady())
    23d2:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <hmiI2cReady>
    23d6:	88 23       	and	r24, r24
    23d8:	11 f1       	breq	.+68     	; 0x241e <ledManager+0x64>
	{	/* HMI I2C bus is free */

		/* get a pointer to the LED IC variable */
		pLedDriver = ledIndexToRegisterCache(gcLedIcIndex);
    23da:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <gcLedIcIndex>
    23de:	0e 94 a3 11 	call	0x2346	; 0x2346 <ledIndexToRegisterCache>
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	9a 83       	std	Y+2, r25	; 0x02
		/* send data-set to IC */
		hmiI2cWrite(pLedDriver->cSlaveAddress, &(pLedDriver->cControl), gcLedDriverRegisterCount +1);	/* include the control register */
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	9c 01       	movw	r18, r24
    23ec:	2f 5f       	subi	r18, 0xFF	; 255
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	fc 01       	movw	r30, r24
    23f6:	80 81       	ld	r24, Z
    23f8:	41 e4       	ldi	r20, 0x41	; 65
    23fa:	b9 01       	movw	r22, r18
    23fc:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <hmiI2cWrite>

		gcLedIcIndex++;	/* Move on to next driver next time */
    2400:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <gcLedIcIndex>
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <gcLedIcIndex>
		if(gcLedIcIndex > ledIcCount)
    240a:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <gcLedIcIndex>
    240e:	88 30       	cpi	r24, 0x08	; 8
    2410:	10 f0       	brcs	.+4      	; 0x2416 <ledManager+0x5c>
		{	/* Transferred data to all ICs */
			gcLedIcIndex = 0;	/* Start again */
    2412:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <gcLedIcIndex>
		}
		
		gc10msTick_Local = gc10msTick;	/* mark the time of the last access to a LED IC */
    2416:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <gc10msTick>
    241a:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <gc10msTick_Local>
	}
	else
	{	/* HMI I2C bus is busy */
		/* try again next time around the main loop */
	}
}
    241e:	00 00       	nop
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	08 95       	ret

0000242a <lowPowerInit>:

/** Initialise the low power (standby) mode driver
	\return Nothing
*/
void lowPowerInit(void)
{
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : STANDBY, output, Logic 0 = Power-on; Logic 1 = Standby/Lo-power. Initialise power-on */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : */
	PORTE.OUTCLR = 0x10;	/* Clear output drive to logic 0 */
    2432:	80 e8       	ldi	r24, 0x80	; 128
    2434:	96 e0       	ldi	r25, 0x06	; 6
    2436:	20 e1       	ldi	r18, 0x10	; 16
    2438:	fc 01       	movw	r30, r24
    243a:	26 83       	std	Z+6, r18	; 0x06
	PORTE.DIRSET = 0x10;	/* Set outputs */
    243c:	80 e8       	ldi	r24, 0x80	; 128
    243e:	96 e0       	ldi	r25, 0x06	; 6
    2440:	20 e1       	ldi	r18, 0x10	; 16
    2442:	fc 01       	movw	r30, r24
    2444:	21 83       	std	Z+1, r18	; 0x01

	/* configured to output, totem-pole */
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc;
    2446:	80 e8       	ldi	r24, 0x80	; 128
    2448:	96 e0       	ldi	r25, 0x06	; 6
    244a:	fc 01       	movw	r30, r24
    244c:	14 8a       	std	Z+20, r1	; 0x14
}
    244e:	00 00       	nop
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <lowPowerTestEnable>:

bool gLowPowerTestEnabled;

void lowPowerTestEnable(bool bEnable)
{
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	1f 92       	push	r1
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	89 83       	std	Y+1, r24	; 0x01
	if(gLowPowerTestEnabled != bEnable)
    2462:	90 91 22 22 	lds	r25, 0x2222	; 0x802222 <gLowPowerTestEnabled>
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	98 17       	cp	r25, r24
    246a:	89 f0       	breq	.+34     	; 0x248e <lowPowerTestEnable+0x38>
	{	/* changing */
		if(bEnable)
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	88 23       	and	r24, r24
    2470:	31 f0       	breq	.+12     	; 0x247e <lowPowerTestEnable+0x28>
		{	/* Switch to low-power (standby) mode */
			PORTE.OUTSET = PIN4_bm;	/* Set output drive to logic 1 */
    2472:	80 e8       	ldi	r24, 0x80	; 128
    2474:	96 e0       	ldi	r25, 0x06	; 6
    2476:	20 e1       	ldi	r18, 0x10	; 16
    2478:	fc 01       	movw	r30, r24
    247a:	25 83       	std	Z+5, r18	; 0x05
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <lowPowerTestEnable+0x32>
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	/* Clear output drive to logic 0 */
    247e:	80 e8       	ldi	r24, 0x80	; 128
    2480:	96 e0       	ldi	r25, 0x06	; 6
    2482:	20 e1       	ldi	r18, 0x10	; 16
    2484:	fc 01       	movw	r30, r24
    2486:	26 83       	std	Z+6, r18	; 0x06
		}
		
		gLowPowerTestEnabled = bEnable;
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <gLowPowerTestEnabled>
	}
}
    248e:	00 00       	nop
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <manualResetDetectInit>:

/** Initialise the manual Reset Detect
	\return Nothing
*/   
void manualResetDetectInit(void)
{
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : USER-RST/, input with pull-up */
	PORTE.DIRCLR = 0x80;	/* Clear to input */
    24a0:	80 e8       	ldi	r24, 0x80	; 128
    24a2:	96 e0       	ldi	r25, 0x06	; 6
    24a4:	20 e8       	ldi	r18, 0x80	; 128
    24a6:	fc 01       	movw	r30, r24
    24a8:	22 83       	std	Z+2, r18	; 0x02

	/* configured to pull-up on input */
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;
    24aa:	80 e8       	ldi	r24, 0x80	; 128
    24ac:	96 e0       	ldi	r25, 0x06	; 6
    24ae:	28 e1       	ldi	r18, 0x18	; 24
    24b0:	fc 01       	movw	r30, r24
    24b2:	27 8b       	std	Z+23, r18	; 0x17

}
    24b4:	00 00       	nop
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	08 95       	ret

000024bc <manageManualResetDetect>:

bool manageManualResetDetect(void)
{
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	1f 92       	push	r1
    24c2:	1f 92       	push	r1
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	bool bActive;
	uint8_t cPinMask;

	bActive = false;
    24c8:	19 82       	std	Y+1, r1	; 0x01
	cPinMask = PIN7_bm;
    24ca:	80 e8       	ldi	r24, 0x80	; 128
    24cc:	8a 83       	std	Y+2, r24	; 0x02

	if((PORTE.IN & cPinMask) == 0)
    24ce:	80 e8       	ldi	r24, 0x80	; 128
    24d0:	96 e0       	ldi	r25, 0x06	; 6
    24d2:	fc 01       	movw	r30, r24
    24d4:	90 85       	ldd	r25, Z+8	; 0x08
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	89 23       	and	r24, r25
    24da:	88 23       	and	r24, r24
    24dc:	11 f4       	brne	.+4      	; 0x24e2 <manageManualResetDetect+0x26>
	{	/* button indicating active */
		bActive = true;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	08 95       	ret

000024ee <proximitySensorInit>:

/** Initialise the proximity Sensor driver
	\return Nothing
*/
void proximitySensorInit(void)
{
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : */
	PORTE.DIRCLR = 0x04;	/* Clear to input */
    24f6:	80 e8       	ldi	r24, 0x80	; 128
    24f8:	96 e0       	ldi	r25, 0x06	; 6
    24fa:	24 e0       	ldi	r18, 0x04	; 4
    24fc:	fc 01       	movw	r30, r24
    24fe:	22 83       	std	Z+2, r18	; 0x02

	/* configured to pull-up on input */
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;
    2500:	80 e8       	ldi	r24, 0x80	; 128
    2502:	96 e0       	ldi	r25, 0x06	; 6
    2504:	28 e1       	ldi	r18, 0x18	; 24
    2506:	fc 01       	movw	r30, r24
    2508:	22 8b       	std	Z+18, r18	; 0x12

}
    250a:	00 00       	nop
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <proxTestEnable>:
};
typedef enum ProxTestState ProxTestState_t;
ProxTestState_t gProxTestState;

void proxTestEnable(bool bEnable)
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	1f 92       	push	r1
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	89 83       	std	Y+1, r24	; 0x01
	if((gProxTestEnabled == false) && (bEnable == true))
    251e:	90 91 2e 22 	lds	r25, 0x222E	; 0x80222e <gProxTestEnabled>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	89 27       	eor	r24, r25
    2526:	88 23       	and	r24, r24
    2528:	39 f0       	breq	.+14     	; 0x2538 <proxTestEnable+0x26>
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	88 23       	and	r24, r24
    252e:	21 f0       	breq	.+8      	; 0x2538 <proxTestEnable+0x26>
	{	/* starting the test */
		gProxTestState = Atime_ProxTestState;
    2530:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <gProxTestState>
				
		dspOn();
    2534:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <dspOn>
	}
	dspErase();
    2538:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <dspErase>
	
	gProxTestEnabled = bEnable;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <gProxTestEnabled>
}
    2542:	00 00       	nop
    2544:	0f 90       	pop	r0
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <pscCommandManager>:

#include "pscCommand.h"


void pscCommandManager(void)
{
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	/* check if a command has been sent from the PSC */
	if(pscI2cIsCommandPendingProcessing())
    2554:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <pscI2cIsCommandPendingProcessing>
    2558:	88 23       	and	r24, r24
    255a:	11 f0       	breq	.+4      	; 0x2560 <pscCommandManager+0x14>
	{
		pscHALTProcessDataFromPsc();
    255c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <pscHALTProcessDataFromPsc>
	}
}
    2560:	00 00       	nop
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <EnableInterrupts>:
	
	pHaltEvent->externalFlashMemSuccessCount = externalFlashMemSuccessCount;
	pHaltEvent->externalFlashMemFailedCount = externalFlashMemFailedCount;
	
	EnableInterrupts();
}
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	78 94       	sei
    2572:	00 00       	nop
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <DisableInterrupts>:
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	f8 94       	cli
    2584:	00 00       	nop
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <pscSetSecondsAlive>:
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	00 d0       	rcall	.+0      	; 0x2592 <pscSetSecondsAlive+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <pscSetSecondsAlive+0x8>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	6b 83       	std	Y+3, r22	; 0x03
    259a:	7c 83       	std	Y+4, r23	; 0x04
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <pscI2cGetTxBuffer>
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	0e 94 bd 12 	call	0x257a	; 0x257a <DisableInterrupts>
    25ac:	29 81       	ldd	r18, Y+1	; 0x01
    25ae:	3a 81       	ldd	r19, Y+2	; 0x02
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	ad 81       	ldd	r26, Y+5	; 0x05
    25b6:	be 81       	ldd	r27, Y+6	; 0x06
    25b8:	f9 01       	movw	r30, r18
    25ba:	84 87       	std	Z+12, r24	; 0x0c
    25bc:	95 87       	std	Z+13, r25	; 0x0d
    25be:	a6 87       	std	Z+14, r26	; 0x0e
    25c0:	b7 87       	std	Z+15, r27	; 0x0f
    25c2:	0e 94 b4 12 	call	0x2568	; 0x2568 <EnableInterrupts>
    25c6:	00 00       	nop
    25c8:	26 96       	adiw	r28, 0x06	; 6
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <pscSetLastReasonForReset>:
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	00 d0       	rcall	.+0      	; 0x25da <pscSetLastReasonForReset+0x6>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	8b 83       	std	Y+3, r24	; 0x03
    25e0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <pscI2cGetTxBuffer>
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	0e 94 bd 12 	call	0x257a	; 0x257a <DisableInterrupts>
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	2b 81       	ldd	r18, Y+3	; 0x03
    25f2:	fc 01       	movw	r30, r24
    25f4:	26 8b       	std	Z+22, r18	; 0x16
    25f6:	0e 94 b4 12 	call	0x2568	; 0x2568 <EnableInterrupts>
    25fa:	00 00       	nop
    25fc:	23 96       	adiw	r28, 0x03	; 3
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <pscSetSequenceCount>:
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	00 d0       	rcall	.+0      	; 0x260e <pscSetSequenceCount+0x6>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <pscSetSequenceCount+0x8>
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	6b 83       	std	Y+3, r22	; 0x03
    2616:	7c 83       	std	Y+4, r23	; 0x04
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <pscI2cGetTxBuffer>
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	0e 94 bd 12 	call	0x257a	; 0x257a <DisableInterrupts>
    2628:	29 81       	ldd	r18, Y+1	; 0x01
    262a:	3a 81       	ldd	r19, Y+2	; 0x02
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	ad 81       	ldd	r26, Y+5	; 0x05
    2632:	be 81       	ldd	r27, Y+6	; 0x06
    2634:	f9 01       	movw	r30, r18
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
    263e:	0e 94 b4 12 	call	0x2568	; 0x2568 <EnableInterrupts>
    2642:	00 00       	nop
    2644:	26 96       	adiw	r28, 0x06	; 6
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <pscSetPublicButtonState>:

void pscSetPublicButtonState(uint8_t cButton, bool bActive)
{
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	00 d0       	rcall	.+0      	; 0x2656 <pscSetPublicButtonState+0x6>
    2656:	1f 92       	push	r1
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	6c 83       	std	Y+4, r22	; 0x04
	PscHALTEvent_t* pHaltEvent = (PscHALTEvent_t*)pscI2cGetTxBuffer();
    2660:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <pscI2cGetTxBuffer>
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	9a 83       	std	Y+2, r25	; 0x02
	
	/* Disable interrupts while editing the buffer the PSC I2C interrupt also uses */
	DisableInterrupts();
    2668:	0e 94 bd 12 	call	0x257a	; 0x257a <DisableInterrupts>
	
	if(cButton == BtnLeft)
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	84 36       	cpi	r24, 0x64	; 100
    2670:	59 f4       	brne	.+22     	; 0x2688 <pscSetPublicButtonState+0x38>
	{
		pHaltEvent->leftButtonStatus = bActive;
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	2c 81       	ldd	r18, Y+4	; 0x04
    2678:	21 70       	andi	r18, 0x01	; 1
    267a:	fc 01       	movw	r30, r24
    267c:	37 89       	ldd	r19, Z+23	; 0x17
    267e:	3e 7f       	andi	r19, 0xFE	; 254
    2680:	23 2b       	or	r18, r19
    2682:	fc 01       	movw	r30, r24
    2684:	27 8b       	std	Z+23, r18	; 0x17
    2686:	1e c0       	rjmp	.+60     	; 0x26c4 <pscSetPublicButtonState+0x74>
	}
	else if(cButton == BtnCentre)
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	88 23       	and	r24, r24
    268c:	61 f4       	brne	.+24     	; 0x26a6 <pscSetPublicButtonState+0x56>
	{
		pHaltEvent->centreButtonStatus = bActive;
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	2c 81       	ldd	r18, Y+4	; 0x04
    2694:	21 70       	andi	r18, 0x01	; 1
    2696:	22 0f       	add	r18, r18
    2698:	fc 01       	movw	r30, r24
    269a:	37 89       	ldd	r19, Z+23	; 0x17
    269c:	3d 7f       	andi	r19, 0xFD	; 253
    269e:	23 2b       	or	r18, r19
    26a0:	fc 01       	movw	r30, r24
    26a2:	27 8b       	std	Z+23, r18	; 0x17
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <pscSetPublicButtonState+0x74>
	}
	else if(cButton == BtnRight)
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	61 f4       	brne	.+24     	; 0x26c4 <pscSetPublicButtonState+0x74>
	{
		pHaltEvent->rightButtonStatus = bActive;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	2c 81       	ldd	r18, Y+4	; 0x04
    26b2:	21 70       	andi	r18, 0x01	; 1
    26b4:	22 0f       	add	r18, r18
    26b6:	22 0f       	add	r18, r18
    26b8:	fc 01       	movw	r30, r24
    26ba:	37 89       	ldd	r19, Z+23	; 0x17
    26bc:	3b 7f       	andi	r19, 0xFB	; 251
    26be:	23 2b       	or	r18, r19
    26c0:	fc 01       	movw	r30, r24
    26c2:	27 8b       	std	Z+23, r18	; 0x17
	}
	else
	{}
		
	EnableInterrupts();
    26c4:	0e 94 b4 12 	call	0x2568	; 0x2568 <EnableInterrupts>
}
    26c8:	00 00       	nop
    26ca:	24 96       	adiw	r28, 0x04	; 4
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	08 95       	ret

000026d6 <pscHALTProcessDataFromPsc>:
{
	return gSequenceCount;
}

void pscHALTProcessDataFromPsc(void)
{
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	2a 97       	sbiw	r28, 0x0a	; 10
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	de bf       	out	0x3e, r29	; 62
	PscHALTCommand_t	HaltCmd;

	/* Copy the PSC command to a local buffer */
	pscI2cReadCommandData((uint8_t*)&HaltCmd, sizeof(PscHALTCommand_t));
    26e4:	6a e0       	ldi	r22, 0x0A	; 10
    26e6:	ce 01       	movw	r24, r28
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <pscI2cReadCommandData>

	/* process it */
	pscHALTProcessCmd(&HaltCmd);
    26ee:	ce 01       	movw	r24, r28
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	0e 94 82 13 	call	0x2704	; 0x2704 <pscHALTProcessCmd>
}
    26f6:	00 00       	nop
    26f8:	2a 96       	adiw	r28, 0x0a	; 10
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <pscHALTProcessCmd>:

static void pscHALTProcessCmd(PscHALTCommand_t* pCmd)
{
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	00 d0       	rcall	.+0      	; 0x270a <pscHALTProcessCmd+0x6>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	8a 83       	std	Y+2, r24	; 0x02
    2710:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t cCommand = pCmd->cCommand;
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	fc 01       	movw	r30, r24
    2718:	84 81       	ldd	r24, Z+4	; 0x04
    271a:	89 83       	std	Y+1, r24	; 0x01

	gSequenceCount = pCmd->sequenceCount;	/* The test box increments this before each command is sent */
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	a2 81       	ldd	r26, Z+2	; 0x02
    2728:	b3 81       	ldd	r27, Z+3	; 0x03
    272a:	80 93 31 22 	sts	0x2231, r24	; 0x802231 <gSequenceCount>
    272e:	90 93 32 22 	sts	0x2232, r25	; 0x802232 <gSequenceCount+0x1>
    2732:	a0 93 33 22 	sts	0x2233, r26	; 0x802233 <gSequenceCount+0x2>
    2736:	b0 93 34 22 	sts	0x2234, r27	; 0x802234 <gSequenceCount+0x3>
	if(gSequenceCount == 1)
    273a:	80 91 31 22 	lds	r24, 0x2231	; 0x802231 <gSequenceCount>
    273e:	90 91 32 22 	lds	r25, 0x2232	; 0x802232 <gSequenceCount+0x1>
    2742:	a0 91 33 22 	lds	r26, 0x2233	; 0x802233 <gSequenceCount+0x2>
    2746:	b0 91 34 22 	lds	r27, 0x2234	; 0x802234 <gSequenceCount+0x3>
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	a1 05       	cpc	r26, r1
    274e:	b1 05       	cpc	r27, r1
    2750:	11 f4       	brne	.+4      	; 0x2756 <pscHALTProcessCmd+0x52>
	{	/* Start of Test */
		/* Reset the payload returned to the test box */
		esfTestRestart();
    2752:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <esfTestRestart>
	}

	pscSetSequenceCount(gSequenceCount);	/* return the sequence count in the payload read by the test box */
    2756:	80 91 31 22 	lds	r24, 0x2231	; 0x802231 <gSequenceCount>
    275a:	90 91 32 22 	lds	r25, 0x2232	; 0x802232 <gSequenceCount+0x1>
    275e:	a0 91 33 22 	lds	r26, 0x2233	; 0x802233 <gSequenceCount+0x2>
    2762:	b0 91 34 22 	lds	r27, 0x2234	; 0x802234 <gSequenceCount+0x3>
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 04 13 	call	0x2608	; 0x2608 <pscSetSequenceCount>

	if(cCommand == HaltCmd)
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	f9 f4       	brne	.+62     	; 0x27b2 <pscHALTProcessCmd+0xae>
	{
		pscHALTprogressBarStep(pCmd->progressBarStep,255);
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	fc 01       	movw	r30, r24
    277a:	85 81       	ldd	r24, Z+5	; 0x05
    277c:	6f ef       	ldi	r22, 0xFF	; 255
    277e:	0e 94 25 14 	call	0x284a	; 0x284a <pscHALTprogressBarStep>
		pscHALTdisplay(pCmd->displayOn, pCmd->displayStep);
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	9b 81       	ldd	r25, Y+3	; 0x03
    2786:	fc 01       	movw	r30, r24
    2788:	26 81       	ldd	r18, Z+6	; 0x06
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	9b 81       	ldd	r25, Y+3	; 0x03
    278e:	fc 01       	movw	r30, r24
    2790:	87 81       	ldd	r24, Z+7	; 0x07
    2792:	62 2f       	mov	r22, r18
    2794:	0e 94 5e 14 	call	0x28bc	; 0x28bc <pscHALTdisplay>
		pscHALTIndicatorsColourIndex(pCmd->indicatorsColourIndex);
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	9b 81       	ldd	r25, Y+3	; 0x03
    279c:	fc 01       	movw	r30, r24
    279e:	80 85       	ldd	r24, Z+8	; 0x08
    27a0:	0e 94 7f 14 	call	0x28fe	; 0x28fe <pscHALTIndicatorsColourIndex>
		pscHALTButtonsColourIndex(pCmd->buttonsColourIndex);
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	fc 01       	movw	r30, r24
    27aa:	81 85       	ldd	r24, Z+9	; 0x09
    27ac:	0e 94 b0 14 	call	0x2960	; 0x2960 <pscHALTButtonsColourIndex>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    27b0:	45 c0       	rjmp	.+138    	; 0x283c <pscHALTProcessCmd+0x138>
		pscHALTprogressBarStep(pCmd->progressBarStep,255);
		pscHALTdisplay(pCmd->displayOn, pCmd->displayStep);
		pscHALTIndicatorsColourIndex(pCmd->indicatorsColourIndex);
		pscHALTButtonsColourIndex(pCmd->buttonsColourIndex);
	}
	else if(cCommand == Rs485loopBackTestCmd)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	82 30       	cpi	r24, 0x02	; 2
    27b6:	21 f4       	brne	.+8      	; 0x27c0 <pscHALTProcessCmd+0xbc>
	{	/* Perform RS485 LoopBack Test */
		/* The following connections must be made at the HMI connector P301 for this test :
			pin 1 to pin 3 (TXP, RXP)
			pin 2 to pin 4 (TXN, RXN)
		*/
		rs485testEnable(true);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0e 94 2e 1a 	call	0x345c	; 0x345c <rs485testEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    27be:	3e c0       	rjmp	.+124    	; 0x283c <pscHALTProcessCmd+0x138>
			pin 1 to pin 3 (TXP, RXP)
			pin 2 to pin 4 (TXN, RXN)
		*/
		rs485testEnable(true);
	}
	else if(cCommand == Rs485DisableCmd)
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	21 f4       	brne	.+8      	; 0x27ce <pscHALTProcessCmd+0xca>
	{	/* Stop RS485 LoopBack Test */
		rs485testEnable(false);
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	0e 94 2e 1a 	call	0x345c	; 0x345c <rs485testEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    27cc:	37 c0       	rjmp	.+110    	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == Rs485DisableCmd)
	{	/* Stop RS485 LoopBack Test */
		rs485testEnable(false);
	}
	else if(cCommand == LowPowerTestCmd)
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	21 f4       	brne	.+8      	; 0x27dc <pscHALTProcessCmd+0xd8>
	{	/* enable the low-power Test */
		lowPowerTestEnable(true);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	0e 94 2b 12 	call	0x2456	; 0x2456 <lowPowerTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    27da:	30 c0       	rjmp	.+96     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == LowPowerTestCmd)
	{	/* enable the low-power Test */
		lowPowerTestEnable(true);
	}
	else if(cCommand == LowPowerDisableCmd)
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	85 30       	cpi	r24, 0x05	; 5
    27e0:	21 f4       	brne	.+8      	; 0x27ea <pscHALTProcessCmd+0xe6>
	{	/* disable the low-power Test */
		lowPowerTestEnable(false);
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 2b 12 	call	0x2456	; 0x2456 <lowPowerTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    27e8:	29 c0       	rjmp	.+82     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == LowPowerDisableCmd)
	{	/* disable the low-power Test */
		lowPowerTestEnable(false);
	}
	else if(cCommand == ProxTestCmd)
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	86 30       	cpi	r24, 0x06	; 6
    27ee:	21 f4       	brne	.+8      	; 0x27f8 <pscHALTProcessCmd+0xf4>
	{	/* enable the low-power Test */
		proxTestEnable(true);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	0e 94 89 12 	call	0x2512	; 0x2512 <proxTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    27f6:	22 c0       	rjmp	.+68     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == ProxTestCmd)
	{	/* enable the low-power Test */
		proxTestEnable(true);
	}
	else if(cCommand == ProxDisableCmd)
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	87 30       	cpi	r24, 0x07	; 7
    27fc:	21 f4       	brne	.+8      	; 0x2806 <pscHALTProcessCmd+0x102>
	{	/* disable the low-power Test */
		proxTestEnable(false);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	0e 94 89 12 	call	0x2512	; 0x2512 <proxTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    2804:	1b c0       	rjmp	.+54     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == ProxDisableCmd)
	{	/* disable the low-power Test */
		proxTestEnable(false);
	}
	else if(cCommand == QuadTestCmd)
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	88 30       	cpi	r24, 0x08	; 8
    280a:	21 f4       	brne	.+8      	; 0x2814 <pscHALTProcessCmd+0x110>
	{	/* enable the low-power Test */
		quadTestEnable(true);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	0e 94 b6 19 	call	0x336c	; 0x336c <quadTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    2812:	14 c0       	rjmp	.+40     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == QuadTestCmd)
	{	/* enable the low-power Test */
		quadTestEnable(true);
	}
	else if(cCommand == QuadDisableCmd)
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	89 30       	cpi	r24, 0x09	; 9
    2818:	21 f4       	brne	.+8      	; 0x2822 <pscHALTProcessCmd+0x11e>
	{	/* disable the low-power Test */
		quadTestEnable(false);
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	0e 94 b6 19 	call	0x336c	; 0x336c <quadTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    2820:	0d c0       	rjmp	.+26     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == QuadDisableCmd)
	{	/* disable the low-power Test */
		quadTestEnable(false);
	}
	else if(cCommand == AmbientLightTestCmd)
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	8a 30       	cpi	r24, 0x0A	; 10
    2826:	21 f4       	brne	.+8      	; 0x2830 <pscHALTProcessCmd+0x12c>
	{	/* enable the ambient light sensor Test */
		adcAmbientLightTestEnable(true);
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	0e 94 22 1b 	call	0x3644	; 0x3644 <adcAmbientLightTestEnable>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
	}
	else
	{}	/* Unrecognised command */
}
    282e:	06 c0       	rjmp	.+12     	; 0x283c <pscHALTProcessCmd+0x138>
	}
	else if(cCommand == AmbientLightTestCmd)
	{	/* enable the ambient light sensor Test */
		adcAmbientLightTestEnable(true);
	}
	else if(cCommand == AmbientLightDisableCmd)
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	8b 30       	cpi	r24, 0x0B	; 11
    2834:	19 f4       	brne	.+6      	; 0x283c <pscHALTProcessCmd+0x138>
	{	/* disable the ambient light sensor Test */
		adcAmbientLightTestEnable(false);
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	0e 94 22 1b 	call	0x3644	; 0x3644 <adcAmbientLightTestEnable>
	}
	else
	{}	/* Unrecognised command */
}
    283c:	00 00       	nop
    283e:	23 96       	adiw	r28, 0x03	; 3
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <pscHALTprogressBarStep>:
	0 = All off
	1 - 20 = number of segments illuminated white

*/
void pscHALTprogressBarStep(uint8_t step, uint8_t cInt)
{
    284a:	0f 93       	push	r16
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	29 97       	sbiw	r28, 0x09	; 9
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	88 87       	std	Y+8, r24	; 0x08
    285c:	69 87       	std	Y+9, r22	; 0x09
	uint8_t segmentIndex;

	/* Switch on all segments up to the step indicated */
	for(segmentIndex = 0; segmentIndex < step; segmentIndex++)
    285e:	19 82       	std	Y+1, r1	; 0x01
    2860:	10 c0       	rjmp	.+32     	; 0x2882 <pscHALTprogressBarStep+0x38>
	{
		uint8_t cRed = 255;
    2862:	8f ef       	ldi	r24, 0xFF	; 255
    2864:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t cGreen = 255;
    2866:	8f ef       	ldi	r24, 0xFF	; 255
    2868:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t cBlue = 255;
    286a:	8f ef       	ldi	r24, 0xFF	; 255
    286c:	8c 83       	std	Y+4, r24	; 0x04
		//ledSetProgressSegmentColour(segmentIndex, cRed, cGreen, cBlue);
		ledSetProgressSegmentColour(segmentIndex, cInt, cRed, cGreen, cBlue);
    286e:	0c 81       	ldd	r16, Y+4	; 0x04
    2870:	2b 81       	ldd	r18, Y+3	; 0x03
    2872:	4a 81       	ldd	r20, Y+2	; 0x02
    2874:	69 85       	ldd	r22, Y+9	; 0x09
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
void pscHALTprogressBarStep(uint8_t step, uint8_t cInt)
{
	uint8_t segmentIndex;

	/* Switch on all segments up to the step indicated */
	for(segmentIndex = 0; segmentIndex < step; segmentIndex++)
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	99 81       	ldd	r25, Y+1	; 0x01
    2884:	88 85       	ldd	r24, Y+8	; 0x08
    2886:	98 17       	cp	r25, r24
    2888:	60 f3       	brcs	.-40     	; 0x2862 <pscHALTprogressBarStep+0x18>
		//ledSetProgressSegmentColour(segmentIndex, cRed, cGreen, cBlue);
		ledSetProgressSegmentColour(segmentIndex, cInt, cRed, cGreen, cBlue);
	}

	/* Switch off all segments following the step indicated */
	for(; segmentIndex < ProgressBarSegmentCount; segmentIndex++)
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <pscHALTprogressBarStep+0x5c>
	{
		uint8_t cRed = 0;
    288c:	1d 82       	std	Y+5, r1	; 0x05
		uint8_t cGreen = 0;
    288e:	1e 82       	std	Y+6, r1	; 0x06
		uint8_t cBlue = 0;
    2890:	1f 82       	std	Y+7, r1	; 0x07
		//ledSetProgressSegmentColour(segmentIndex, cRed, cGreen, cBlue);
		ledSetProgressSegmentColour(segmentIndex, cInt, cRed, cGreen, cBlue);
    2892:	0f 81       	ldd	r16, Y+7	; 0x07
    2894:	2e 81       	ldd	r18, Y+6	; 0x06
    2896:	4d 81       	ldd	r20, Y+5	; 0x05
    2898:	69 85       	ldd	r22, Y+9	; 0x09
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ledSetProgressSegmentColour>
		//ledSetProgressSegmentColour(segmentIndex, cRed, cGreen, cBlue);
		ledSetProgressSegmentColour(segmentIndex, cInt, cRed, cGreen, cBlue);
	}

	/* Switch off all segments following the step indicated */
	for(; segmentIndex < ProgressBarSegmentCount; segmentIndex++)
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	84 31       	cpi	r24, 0x14	; 20
    28aa:	80 f3       	brcs	.-32     	; 0x288c <pscHALTprogressBarStep+0x42>
		uint8_t cGreen = 0;
		uint8_t cBlue = 0;
		//ledSetProgressSegmentColour(segmentIndex, cRed, cGreen, cBlue);
		ledSetProgressSegmentColour(segmentIndex, cInt, cRed, cGreen, cBlue);
	}
}
    28ac:	00 00       	nop
    28ae:	29 96       	adiw	r28, 0x09	; 9
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	0f 91       	pop	r16
    28ba:	08 95       	ret

000028bc <pscHALTdisplay>:

static void pscHALTdisplay(uint8_t onOff, uint8_t step)
{
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	1f 92       	push	r1
    28c2:	1f 92       	push	r1
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	6a 83       	std	Y+2, r22	; 0x02
	if(onOff == 0)
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	88 23       	and	r24, r24
    28d0:	19 f4       	brne	.+6      	; 0x28d8 <pscHALTdisplay+0x1c>
	{	/* switch off display */
		dspOff();
    28d2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <dspOff>
			dspInverseEnable();
		}
		else
		{}	/* Unrecognised */
	}
}
    28d6:	0d c0       	rjmp	.+26     	; 0x28f2 <pscHALTdisplay+0x36>
	{	/* switch off display */
		dspOff();
	}
	else
	{
		dspOn();
    28d8:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <dspOn>

		if(step == displayRightIsOn_HaltStep)
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	88 23       	and	r24, r24
    28e0:	19 f4       	brne	.+6      	; 0x28e8 <pscHALTdisplay+0x2c>
		{
			dspInverseDisable();
    28e2:	0e 94 13 1c 	call	0x3826	; 0x3826 <dspInverseDisable>
			dspInverseEnable();
		}
		else
		{}	/* Unrecognised */
	}
}
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <pscHALTdisplay+0x36>

		if(step == displayRightIsOn_HaltStep)
		{
			dspInverseDisable();
		}
		else if(step == displayLeftIsOn_HaltStep)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	11 f4       	brne	.+4      	; 0x28f2 <pscHALTdisplay+0x36>
		{
			dspInverseEnable();
    28ee:	0e 94 08 1c 	call	0x3810	; 0x3810 <dspInverseEnable>
		}
		else
		{}	/* Unrecognised */
	}
}
    28f2:	00 00       	nop
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <pscHALTIndicatorsColourIndex>:

static void pscHALTIndicatorsColourIndex(uint8_t index)
{
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	00 d0       	rcall	.+0      	; 0x2904 <pscHALTIndicatorsColourIndex+0x6>
    2904:	1f 92       	push	r1
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t cRed = 0;
    290c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t cGreen = 0;
    290e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t cBlue = 0;
    2910:	1b 82       	std	Y+3, r1	; 0x03

	if(index == Red_BacklightColourIndex)
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	19 f4       	brne	.+6      	; 0x291e <pscHALTIndicatorsColourIndex+0x20>
	{
		cRed = 255;
    2918:	8f ef       	ldi	r24, 0xFF	; 255
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	15 c0       	rjmp	.+42     	; 0x2948 <pscHALTIndicatorsColourIndex+0x4a>
	}
	else if(index == Green_BacklightColourIndex)
    291e:	8c 81       	ldd	r24, Y+4	; 0x04
    2920:	82 30       	cpi	r24, 0x02	; 2
    2922:	19 f4       	brne	.+6      	; 0x292a <pscHALTIndicatorsColourIndex+0x2c>
	{
		cGreen = 255;
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <pscHALTIndicatorsColourIndex+0x4a>
	}
	else if(index == Blue_BacklightColourIndex)
    292a:	8c 81       	ldd	r24, Y+4	; 0x04
    292c:	83 30       	cpi	r24, 0x03	; 3
    292e:	19 f4       	brne	.+6      	; 0x2936 <pscHALTIndicatorsColourIndex+0x38>
	{
		cBlue = 255;
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	8b 83       	std	Y+3, r24	; 0x03
    2934:	09 c0       	rjmp	.+18     	; 0x2948 <pscHALTIndicatorsColourIndex+0x4a>
	}
	else if(index == White_BacklightColourIndex)
    2936:	8c 81       	ldd	r24, Y+4	; 0x04
    2938:	84 30       	cpi	r24, 0x04	; 4
    293a:	31 f4       	brne	.+12     	; 0x2948 <pscHALTIndicatorsColourIndex+0x4a>
	{
		cRed = 255;
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	89 83       	std	Y+1, r24	; 0x01
		cGreen = 255;
    2940:	8f ef       	ldi	r24, 0xFF	; 255
    2942:	8a 83       	std	Y+2, r24	; 0x02
		cBlue = 255;
    2944:	8f ef       	ldi	r24, 0xFF	; 255
    2946:	8b 83       	std	Y+3, r24	; 0x03
	}
	else
	{}	/* Unrecognised */

	ledSetAllIndicatorColour(cRed, cGreen, cBlue);
    2948:	4b 81       	ldd	r20, Y+3	; 0x03
    294a:	6a 81       	ldd	r22, Y+2	; 0x02
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <ledSetAllIndicatorColour>
}
    2952:	00 00       	nop
    2954:	24 96       	adiw	r28, 0x04	; 4
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	08 95       	ret

00002960 <pscHALTButtonsColourIndex>:


static void pscHALTButtonsColourIndex(uint8_t index)
{
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	00 d0       	rcall	.+0      	; 0x2966 <pscHALTButtonsColourIndex+0x6>
    2966:	1f 92       	push	r1
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t cRed = 0;
    296e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t cGreen = 0;
    2970:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t cBlue = 0;
    2972:	1b 82       	std	Y+3, r1	; 0x03

	if(index == Red_BacklightColourIndex)
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	19 f4       	brne	.+6      	; 0x2980 <pscHALTButtonsColourIndex+0x20>
	{
		cRed = 255;
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	15 c0       	rjmp	.+42     	; 0x29aa <pscHALTButtonsColourIndex+0x4a>
	}
	else if(index == Green_BacklightColourIndex)
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	82 30       	cpi	r24, 0x02	; 2
    2984:	19 f4       	brne	.+6      	; 0x298c <pscHALTButtonsColourIndex+0x2c>
	{
		cGreen = 255;
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	8a 83       	std	Y+2, r24	; 0x02
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <pscHALTButtonsColourIndex+0x4a>
	}
	else if(index == Blue_BacklightColourIndex)
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	19 f4       	brne	.+6      	; 0x2998 <pscHALTButtonsColourIndex+0x38>
	{
		cBlue = 255;
    2992:	8f ef       	ldi	r24, 0xFF	; 255
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	09 c0       	rjmp	.+18     	; 0x29aa <pscHALTButtonsColourIndex+0x4a>
	}
	else if(index == White_BacklightColourIndex)
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	84 30       	cpi	r24, 0x04	; 4
    299c:	31 f4       	brne	.+12     	; 0x29aa <pscHALTButtonsColourIndex+0x4a>
	{
		cRed = 255;
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	89 83       	std	Y+1, r24	; 0x01
		cGreen = 255;
    29a2:	8f ef       	ldi	r24, 0xFF	; 255
    29a4:	8a 83       	std	Y+2, r24	; 0x02
		cBlue = 255;
    29a6:	8f ef       	ldi	r24, 0xFF	; 255
    29a8:	8b 83       	std	Y+3, r24	; 0x03
	}
	else
	{}	/* Unrecognised */

	ledSetAllButtonColour(cRed, cGreen, cBlue);
    29aa:	4b 81       	ldd	r20, Y+3	; 0x03
    29ac:	6a 81       	ldd	r22, Y+2	; 0x02
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <ledSetAllButtonColour>
}
    29b4:	00 00       	nop
    29b6:	24 96       	adiw	r28, 0x04	; 4
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	08 95       	ret

000029c2 <pscI2cInit>:

/** Initialise the I2C bus for communication with the PSC
	\return Nothing
*/   
void pscI2cInit(void)
{
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	/* Configuration of I2C peripheral overrides the normal port pin function */
	/* PSC-I2C-SDA */
	/* PSC-I2C-SCL */
	
	/* Initialise I2C */
	TWIC.SLAVE.CTRLA = 0;
    29ca:	80 e8       	ldi	r24, 0x80	; 128
    29cc:	94 e0       	ldi	r25, 0x04	; 4
    29ce:	fc 01       	movw	r30, r24
    29d0:	10 86       	std	Z+8, r1	; 0x08
	pscI2cInitialiseDriver(&gPscI2c);
    29d2:	89 e3       	ldi	r24, 0x39	; 57
    29d4:	92 e2       	ldi	r25, 0x22	; 34
    29d6:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <pscI2cInitialiseDriver>
	pscI2cInitialiseModule(&gPscI2c, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_LO_gc);
    29da:	82 e4       	ldi	r24, 0x42	; 66
    29dc:	40 e4       	ldi	r20, 0x40	; 64
    29de:	68 2f       	mov	r22, r24
    29e0:	89 e3       	ldi	r24, 0x39	; 57
    29e2:	92 e2       	ldi	r25, 0x22	; 34
    29e4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <pscI2cInitialiseModule>
}
    29e8:	00 00       	nop
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <pscI2cIsCommandPendingProcessing>:
/** Check if a command has been received from the PSC and is pending processing
	\return true if a command is pending processing
	\return false if a command isn't pending processing
*/   
bool pscI2cIsCommandPendingProcessing(void)
{
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	25 97       	sbiw	r28, 0x05	; 5
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	de bf       	out	0x3e, r29	; 62
	/* Restart the I2C peripheral if an error appears to be stopping communication */
	if(gMarkLastI2cActivity > gdwSecondsAlive)
    2a06:	20 91 35 22 	lds	r18, 0x2235	; 0x802235 <gMarkLastI2cActivity>
    2a0a:	30 91 36 22 	lds	r19, 0x2236	; 0x802236 <gMarkLastI2cActivity+0x1>
    2a0e:	40 91 37 22 	lds	r20, 0x2237	; 0x802237 <gMarkLastI2cActivity+0x2>
    2a12:	50 91 38 22 	lds	r21, 0x2238	; 0x802238 <gMarkLastI2cActivity+0x3>
    2a16:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    2a1a:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    2a1e:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    2a22:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    2a26:	82 17       	cp	r24, r18
    2a28:	93 07       	cpc	r25, r19
    2a2a:	a4 07       	cpc	r26, r20
    2a2c:	b5 07       	cpc	r27, r21
    2a2e:	80 f4       	brcc	.+32     	; 0x2a50 <pscI2cIsCommandPendingProcessing+0x60>
	{
		gMarkLastI2cActivity = gdwSecondsAlive;
    2a30:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    2a34:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    2a38:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    2a3c:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    2a40:	80 93 35 22 	sts	0x2235, r24	; 0x802235 <gMarkLastI2cActivity>
    2a44:	90 93 36 22 	sts	0x2236, r25	; 0x802236 <gMarkLastI2cActivity+0x1>
    2a48:	a0 93 37 22 	sts	0x2237, r26	; 0x802237 <gMarkLastI2cActivity+0x2>
    2a4c:	b0 93 38 22 	sts	0x2238, r27	; 0x802238 <gMarkLastI2cActivity+0x3>
	}
	uint32_t dwDiff = gdwSecondsAlive -gMarkLastI2cActivity;
    2a50:	20 91 18 23 	lds	r18, 0x2318	; 0x802318 <gdwSecondsAlive>
    2a54:	30 91 19 23 	lds	r19, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    2a58:	40 91 1a 23 	lds	r20, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    2a5c:	50 91 1b 23 	lds	r21, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    2a60:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <gMarkLastI2cActivity>
    2a64:	90 91 36 22 	lds	r25, 0x2236	; 0x802236 <gMarkLastI2cActivity+0x1>
    2a68:	a0 91 37 22 	lds	r26, 0x2237	; 0x802237 <gMarkLastI2cActivity+0x2>
    2a6c:	b0 91 38 22 	lds	r27, 0x2238	; 0x802238 <gMarkLastI2cActivity+0x3>
    2a70:	79 01       	movw	r14, r18
    2a72:	8a 01       	movw	r16, r20
    2a74:	e8 1a       	sub	r14, r24
    2a76:	f9 0a       	sbc	r15, r25
    2a78:	0a 0b       	sbc	r16, r26
    2a7a:	1b 0b       	sbc	r17, r27
    2a7c:	d8 01       	movw	r26, r16
    2a7e:	c7 01       	movw	r24, r14
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	ab 83       	std	Y+3, r26	; 0x03
    2a86:	bc 83       	std	Y+4, r27	; 0x04
	if(dwDiff > 5)
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a8e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a90:	06 97       	sbiw	r24, 0x06	; 6
    2a92:	a1 05       	cpc	r26, r1
    2a94:	b1 05       	cpc	r27, r1
    2a96:	d8 f0       	brcs	.+54     	; 0x2ace <pscI2cIsCommandPendingProcessing+0xde>
	{
		gMarkLastI2cActivity = gdwSecondsAlive;
    2a98:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    2a9c:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    2aa0:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    2aa4:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    2aa8:	80 93 35 22 	sts	0x2235, r24	; 0x802235 <gMarkLastI2cActivity>
    2aac:	90 93 36 22 	sts	0x2236, r25	; 0x802236 <gMarkLastI2cActivity+0x1>
    2ab0:	a0 93 37 22 	sts	0x2237, r26	; 0x802237 <gMarkLastI2cActivity+0x2>
    2ab4:	b0 93 38 22 	sts	0x2238, r27	; 0x802238 <gMarkLastI2cActivity+0x3>
	
		uint8_t i2cStatus = TWIC.SLAVE.STATUS & (TWI_SLAVE_DIF_bm | TWI_SLAVE_APIF_bm | TWI_SLAVE_CLKHOLD_bm | TWI_SLAVE_COLL_bm | TWI_SLAVE_BUSERR_bm);
    2ab8:	80 e8       	ldi	r24, 0x80	; 128
    2aba:	94 e0       	ldi	r25, 0x04	; 4
    2abc:	fc 01       	movw	r30, r24
    2abe:	82 85       	ldd	r24, Z+10	; 0x0a
    2ac0:	8c 7e       	andi	r24, 0xEC	; 236
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
		if(i2cStatus != 0)
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	88 23       	and	r24, r24
    2ac8:	11 f0       	breq	.+4      	; 0x2ace <pscI2cIsCommandPendingProcessing+0xde>
		{
			pscI2cInit();
    2aca:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <pscI2cInit>
		}
	}

	return(gPscI2c.bCommandPendingProcessing);
    2ace:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <gPscI2c>
}
    2ad2:	25 96       	adiw	r28, 0x05	; 5
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <pscI2cReadCommandData>:
/** Copy the latest command data sent from the PSC.
	Also clears the flag indicating a command is pending processing
	\return Nothing
*/   
void pscI2cReadCommandData(uint8_t* pDest, uint8_t cLength)
{
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	27 97       	sbiw	r28, 0x07	; 7
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	8d 83       	std	Y+5, r24	; 0x05
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t* pSrc;
	uint8_t cMaxLength = cLength;
    2afa:	8f 81       	ldd	r24, Y+7	; 0x07
    2afc:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Ensure the count of bytes copied does not exceed the maximum source length */
	if(cMaxLength > PscI2cRxBufferSize)
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	85 36       	cpi	r24, 0x65	; 101
    2b02:	10 f0       	brcs	.+4      	; 0x2b08 <pscI2cReadCommandData+0x22>
	{
		cMaxLength = PscI2cRxBufferSize;
    2b04:	84 e6       	ldi	r24, 0x64	; 100
    2b06:	8b 83       	std	Y+3, r24	; 0x03
	}
		
	/* Copy the data to the destination buffer */
	pSrc = (uint8_t*)gPscI2c.cRxData;
    2b08:	8a e3       	ldi	r24, 0x3A	; 58
    2b0a:	92 e2       	ldi	r25, 0x22	; 34
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
	for(uint8_t c = 0; c < cMaxLength; c++)
    2b10:	1c 82       	std	Y+4, r1	; 0x04
    2b12:	15 c0       	rjmp	.+42     	; 0x2b3e <pscI2cReadCommandData+0x58>
	{
		*pDest++ = *pSrc++;
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	9c 01       	movw	r18, r24
    2b1a:	2f 5f       	subi	r18, 0xFF	; 255
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	2d 83       	std	Y+5, r18	; 0x05
    2b20:	3e 83       	std	Y+6, r19	; 0x06
    2b22:	29 81       	ldd	r18, Y+1	; 0x01
    2b24:	3a 81       	ldd	r19, Y+2	; 0x02
    2b26:	a9 01       	movw	r20, r18
    2b28:	4f 5f       	subi	r20, 0xFF	; 255
    2b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2c:	49 83       	std	Y+1, r20	; 0x01
    2b2e:	5a 83       	std	Y+2, r21	; 0x02
    2b30:	f9 01       	movw	r30, r18
    2b32:	20 81       	ld	r18, Z
    2b34:	fc 01       	movw	r30, r24
    2b36:	20 83       	st	Z, r18
		cMaxLength = PscI2cRxBufferSize;
	}
		
	/* Copy the data to the destination buffer */
	pSrc = (uint8_t*)gPscI2c.cRxData;
	for(uint8_t c = 0; c < cMaxLength; c++)
    2b38:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	8c 83       	std	Y+4, r24	; 0x04
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	98 17       	cp	r25, r24
    2b44:	38 f3       	brcs	.-50     	; 0x2b14 <pscI2cReadCommandData+0x2e>
	{
		*pDest++ = *pSrc++;
	}
		
	/* Reset / Clear the flag which indicates a PSC command has been received and is ready for processing */
	gPscI2c.bCommandPendingProcessing = false;
    2b46:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <gPscI2c>
}
    2b4a:	00 00       	nop
    2b4c:	27 96       	adiw	r28, 0x07	; 7
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <__vector_12>:



/*! TWIC Slave Interrupt vector. */
ISR(TWIC_TWIS_vect)
{
    2b58:	1f 92       	push	r1
    2b5a:	0f 92       	push	r0
    2b5c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b60:	0f 92       	push	r0
    2b62:	11 24       	eor	r1, r1
    2b64:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b68:	0f 92       	push	r0
    2b6a:	2f 93       	push	r18
    2b6c:	3f 93       	push	r19
    2b6e:	4f 93       	push	r20
    2b70:	5f 93       	push	r21
    2b72:	6f 93       	push	r22
    2b74:	7f 93       	push	r23
    2b76:	8f 93       	push	r24
    2b78:	9f 93       	push	r25
    2b7a:	af 93       	push	r26
    2b7c:	bf 93       	push	r27
    2b7e:	ef 93       	push	r30
    2b80:	ff 93       	push	r31
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	pscI2cInterruptHandler(&gPscI2c);
    2b8a:	89 e3       	ldi	r24, 0x39	; 57
    2b8c:	92 e2       	ldi	r25, 0x22	; 34
    2b8e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <pscI2cInterruptHandler>
}
    2b92:	00 00       	nop
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	ff 91       	pop	r31
    2b9a:	ef 91       	pop	r30
    2b9c:	bf 91       	pop	r27
    2b9e:	af 91       	pop	r26
    2ba0:	9f 91       	pop	r25
    2ba2:	8f 91       	pop	r24
    2ba4:	7f 91       	pop	r23
    2ba6:	6f 91       	pop	r22
    2ba8:	5f 91       	pop	r21
    2baa:	4f 91       	pop	r20
    2bac:	3f 91       	pop	r19
    2bae:	2f 91       	pop	r18
    2bb0:	0f 90       	pop	r0
    2bb2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bb6:	0f 90       	pop	r0
    2bb8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bbc:	0f 90       	pop	r0
    2bbe:	1f 90       	pop	r1
    2bc0:	18 95       	reti

00002bc2 <pscI2cInitialiseDriver>:




void pscI2cInitialiseDriver(PscI2c_t *ppscI2c)
{
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	1f 92       	push	r1
    2bc8:	1f 92       	push	r1
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
	ppscI2c->cCountOfRxBytes = 0;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	87 53       	subi	r24, 0x37	; 55
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	fc 01       	movw	r30, r24
    2bdc:	10 82       	st	Z, r1
	ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	86 53       	subi	r24, 0x36	; 54
    2be4:	9f 4f       	sbci	r25, 0xFF	; 255
    2be6:	fc 01       	movw	r30, r24
    2be8:	10 82       	st	Z, r1
	ppscI2c->cStatus = PscI2cReady;
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	82 53       	subi	r24, 0x32	; 50
    2bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	10 82       	st	Z, r1
	ppscI2c->cResult = PscI2cResultUnknown;
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	81 53       	subi	r24, 0x31	; 49
    2bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfe:	fc 01       	movw	r30, r24
    2c00:	10 82       	st	Z, r1
	ppscI2c->bAbort = false;
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	85 53       	subi	r24, 0x35	; 53
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	10 82       	st	Z, r1
	ppscI2c->bCommandPendingProcessing = false;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	fc 01       	movw	r30, r24
    2c14:	10 82       	st	Z, r1
}
    2c16:	00 00       	nop
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	08 95       	ret

00002c22 <pscI2cInitialiseModule>:


void pscI2cInitialiseModule(PscI2c_t *ppscI2c,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <pscI2cInitialiseModule+0x6>
    2c28:	1f 92       	push	r1
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	6b 83       	std	Y+3, r22	; 0x03
    2c34:	4c 83       	std	Y+4, r20	; 0x04
	TWIC.SLAVE.CTRLA = intLevel |
    2c36:	80 e8       	ldi	r24, 0x80	; 128
    2c38:	94 e0       	ldi	r25, 0x04	; 4
    2c3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c3c:	2c 63       	ori	r18, 0x3C	; 60
    2c3e:	fc 01       	movw	r30, r24
    2c40:	20 87       	std	Z+8, r18	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
											TWI_SLAVE_PIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	TWIC.SLAVE.ADDR = (address<<1);
    2c42:	80 e8       	ldi	r24, 0x80	; 128
    2c44:	94 e0       	ldi	r25, 0x04	; 4
    2c46:	2b 81       	ldd	r18, Y+3	; 0x03
    2c48:	22 0f       	add	r18, r18
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	23 87       	std	Z+11, r18	; 0x0b
}
    2c4e:	00 00       	nop
    2c50:	24 96       	adiw	r28, 0x04	; 4
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <pscI2cInterruptHandler>:


void pscI2cInterruptHandler(PscI2c_t *ppscI2c)
{
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <pscI2cInterruptHandler+0x6>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	8a 83       	std	Y+2, r24	; 0x02
    2c68:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t i2cStatus = TWIC.SLAVE.STATUS;
    2c6a:	80 e8       	ldi	r24, 0x80	; 128
    2c6c:	94 e0       	ldi	r25, 0x04	; 4
    2c6e:	fc 01       	movw	r30, r24
    2c70:	82 85       	ldd	r24, Z+10	; 0x0a
    2c72:	89 83       	std	Y+1, r24	; 0x01

	if(i2cStatus & TWI_SLAVE_BUSERR_bm) 
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	84 70       	andi	r24, 0x04	; 4
    2c7c:	99 27       	eor	r25, r25
    2c7e:	89 2b       	or	r24, r25
    2c80:	d1 f0       	breq	.+52     	; 0x2cb6 <pscI2cInterruptHandler+0x5a>
	{	/* bus error */
		ppscI2c->cCountOfRxBytes = 0;
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	87 53       	subi	r24, 0x37	; 55
    2c88:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	10 82       	st	Z, r1
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	9b 81       	ldd	r25, Y+3	; 0x03
    2c92:	86 53       	subi	r24, 0x36	; 54
    2c94:	9f 4f       	sbci	r25, 0xFF	; 255
    2c96:	fc 01       	movw	r30, r24
    2c98:	10 82       	st	Z, r1
		ppscI2c->cResult = PscI2cResultBusError;
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	81 53       	subi	r24, 0x31	; 49
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	24 e0       	ldi	r18, 0x04	; 4
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	20 83       	st	Z, r18
		ppscI2c->cStatus = PscI2cReady;
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	9b 81       	ldd	r25, Y+3	; 0x03
    2cac:	82 53       	subi	r24, 0x32	; 50
    2cae:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	10 82       	st	Z, r1
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2cb4:	4d c0       	rjmp	.+154    	; 0x2d50 <pscI2cInterruptHandler+0xf4>
		ppscI2c->cCountOfRxBytes = 0;
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
		ppscI2c->cResult = PscI2cResultBusError;
		ppscI2c->cStatus = PscI2cReady;
	}
	else if(i2cStatus & TWI_SLAVE_COLL_bm) 
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 2f       	mov	r24, r24
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	88 70       	andi	r24, 0x08	; 8
    2cbe:	99 27       	eor	r25, r25
    2cc0:	89 2b       	or	r24, r25
    2cc2:	d1 f0       	breq	.+52     	; 0x2cf8 <pscI2cInterruptHandler+0x9c>
	{	/* transmit collision */
		ppscI2c->cCountOfRxBytes = 0;
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	87 53       	subi	r24, 0x37	; 55
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	fc 01       	movw	r30, r24
    2cce:	10 82       	st	Z, r1
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	86 53       	subi	r24, 0x36	; 54
    2cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd8:	fc 01       	movw	r30, r24
    2cda:	10 82       	st	Z, r1
		ppscI2c->cResult = PscI2cResultTransmitCollision;
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	81 53       	subi	r24, 0x31	; 49
    2ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce4:	23 e0       	ldi	r18, 0x03	; 3
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	20 83       	st	Z, r18
		ppscI2c->cStatus = PscI2cReady;
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	82 53       	subi	r24, 0x32	; 50
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	10 82       	st	Z, r1
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2cf6:	2c c0       	rjmp	.+88     	; 0x2d50 <pscI2cInterruptHandler+0xf4>
		ppscI2c->cCountOfRxBytes = 0;
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
		ppscI2c->cResult = PscI2cResultTransmitCollision;
		ppscI2c->cStatus = PscI2cReady;
	}
	else if((i2cStatus & TWI_SLAVE_APIF_bm) && (i2cStatus & TWI_SLAVE_AP_bm)) 
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	80 74       	andi	r24, 0x40	; 64
    2d00:	99 27       	eor	r25, r25
    2d02:	89 2b       	or	r24, r25
    2d04:	61 f0       	breq	.+24     	; 0x2d1e <pscI2cInterruptHandler+0xc2>
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	81 70       	andi	r24, 0x01	; 1
    2d0e:	99 27       	eor	r25, r25
    2d10:	89 2b       	or	r24, r25
    2d12:	29 f0       	breq	.+10     	; 0x2d1e <pscI2cInterruptHandler+0xc2>
	{	/* address match */
		pscI2cAddressMatchHandler(ppscI2c);
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <pscI2cAddressMatchHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2d1c:	19 c0       	rjmp	.+50     	; 0x2d50 <pscI2cInterruptHandler+0xf4>
	}
	else if((i2cStatus & TWI_SLAVE_APIF_bm) && (i2cStatus & TWI_SLAVE_AP_bm)) 
	{	/* address match */
		pscI2cAddressMatchHandler(ppscI2c);
	}
	else if(i2cStatus & TWI_SLAVE_APIF_bm) 
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	80 74       	andi	r24, 0x40	; 64
    2d26:	99 27       	eor	r25, r25
    2d28:	89 2b       	or	r24, r25
    2d2a:	29 f0       	breq	.+10     	; 0x2d36 <pscI2cInterruptHandler+0xda>
	{	/* stop (only enabled through slave read transaction) */
		pscI2cStopHandler(ppscI2c);
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <pscI2cStopHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2d34:	0d c0       	rjmp	.+26     	; 0x2d50 <pscI2cInterruptHandler+0xf4>
	}
	else if(i2cStatus & TWI_SLAVE_APIF_bm) 
	{	/* stop (only enabled through slave read transaction) */
		pscI2cStopHandler(ppscI2c);
	}
	else if(i2cStatus & TWI_SLAVE_DIF_bm) 
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <pscI2cInterruptHandler+0xea>
	{	/* data interrupt */
		pscI2cDataHandler(ppscI2c);
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <pscI2cDataHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2d44:	05 c0       	rjmp	.+10     	; 0x2d50 <pscI2cInterruptHandler+0xf4>
	{	/* data interrupt */
		pscI2cDataHandler(ppscI2c);
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	65 e0       	ldi	r22, 0x05	; 5
    2d4c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
	}
}
    2d50:	00 00       	nop
    2d52:	23 96       	adiw	r28, 0x03	; 3
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <pscI2cAddressMatchHandler>:
 *  Prepares TWI module for transaction upon address match
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cAddressMatchHandler(PscI2c_t *ppscI2c)
{
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <pscI2cAddressMatchHandler+0x6>
    2d64:	1f 92       	push	r1
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	8b 83       	std	Y+3, r24	; 0x03
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
	bool bOK;
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	94 e0       	ldi	r25, 0x04	; 4
    2d72:	fc 01       	movw	r30, r24
    2d74:	82 85       	ldd	r24, Z+10	; 0x0a
    2d76:	88 2f       	mov	r24, r24
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	82 70       	andi	r24, 0x02	; 2
    2d7c:	99 27       	eor	r25, r25
    2d7e:	21 e0       	ldi	r18, 0x01	; 1
    2d80:	89 2b       	or	r24, r25
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <pscI2cAddressMatchHandler+0x28>
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	2a 83       	std	Y+2, r18	; 0x02
	
	
	/* If application signalling need to abort (error occured). */
	if(ppscI2c->bAbort) 
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	85 53       	subi	r24, 0x35	; 53
    2d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d90:	fc 01       	movw	r30, r24
    2d92:	80 81       	ld	r24, Z
    2d94:	88 23       	and	r24, r24
    2d96:	89 f0       	breq	.+34     	; 0x2dba <pscI2cAddressMatchHandler+0x5c>
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    2d98:	80 e8       	ldi	r24, 0x80	; 128
    2d9a:	94 e0       	ldi	r25, 0x04	; 4
    2d9c:	22 e0       	ldi	r18, 0x02	; 2
    2d9e:	fc 01       	movw	r30, r24
    2da0:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	9c 81       	ldd	r25, Y+4	; 0x04
    2da6:	66 e0       	ldi	r22, 0x06	; 6
    2da8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
		ppscI2c->bAbort = false;
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	85 53       	subi	r24, 0x35	; 53
    2db2:	9f 4f       	sbci	r25, 0xFF	; 255
    2db4:	fc 01       	movw	r30, r24
    2db6:	10 82       	st	Z, r1
    2db8:	39 c0       	rjmp	.+114    	; 0x2e2c <pscI2cAddressMatchHandler+0xce>
	} 
	else 
	{
		bOK = true;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	89 83       	std	Y+1, r24	; 0x01
		if(bRead)
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	88 23       	and	r24, r24
    2dc2:	39 f4       	brne	.+14     	; 0x2dd2 <pscI2cAddressMatchHandler+0x74>
		{}
		else
		{	/* PSC trying to write data */
			if(ppscI2c->bCommandPendingProcessing)
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	fc 01       	movw	r30, r24
    2dca:	80 81       	ld	r24, Z
    2dcc:	88 23       	and	r24, r24
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <pscI2cAddressMatchHandler+0x74>
			{	/* Buffer is already in use */
				/* HMI not able to accept data from the PSC at this time */
				/* Terminate the transfer */
				bOK = false;
    2dd0:	19 82       	std	Y+1, r1	; 0x01
			{	/* buffer is free */
				/* OK to continue with transfer */
			}
		}

		if(bOK)
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 23       	and	r24, r24
    2dd6:	f9 f0       	breq	.+62     	; 0x2e16 <pscI2cAddressMatchHandler+0xb8>
		{
			ppscI2c->cStatus = PscI2cBusy;
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	9c 81       	ldd	r25, Y+4	; 0x04
    2ddc:	82 53       	subi	r24, 0x32	; 50
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	21 e0       	ldi	r18, 0x01	; 1
    2de2:	fc 01       	movw	r30, r24
    2de4:	20 83       	st	Z, r18
			ppscI2c->cResult = PscI2cResultUnknown;
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	81 53       	subi	r24, 0x31	; 49
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	fc 01       	movw	r30, r24
    2df0:	10 82       	st	Z, r1

			ppscI2c->cCountOfRxBytes = 0;
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	87 53       	subi	r24, 0x37	; 55
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	10 82       	st	Z, r1
			ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	86 53       	subi	r24, 0x36	; 54
    2e04:	9f 4f       	sbci	r25, 0xFF	; 255
    2e06:	fc 01       	movw	r30, r24
    2e08:	10 82       	st	Z, r1

			/* Send ACK, wait for data interrupt. */
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    2e0a:	80 e8       	ldi	r24, 0x80	; 128
    2e0c:	94 e0       	ldi	r25, 0x04	; 4
    2e0e:	23 e0       	ldi	r18, 0x03	; 3
    2e10:	fc 01       	movw	r30, r24
    2e12:	21 87       	std	Z+9, r18	; 0x09
    2e14:	0b c0       	rjmp	.+22     	; 0x2e2c <pscI2cAddressMatchHandler+0xce>
		}
		else
		{	
			/* Send Nack */
			/* Terminate the transfer */
			TWIC.SLAVE.CTRLB = (/*TWI_SLAVE_ACKACT_bm | */TWI_SLAVE_CMD_COMPTRANS_gc);
    2e16:	80 e8       	ldi	r24, 0x80	; 128
    2e18:	94 e0       	ldi	r25, 0x04	; 4
    2e1a:	22 e0       	ldi	r18, 0x02	; 2
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	21 87       	std	Z+9, r18	; 0x09
			ppscI2c->cStatus = PscI2cReady;
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	82 53       	subi	r24, 0x32	; 50
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	fc 01       	movw	r30, r24
    2e2a:	10 82       	st	Z, r1
		}
	}
	
	gMarkLastI2cActivity = gdwSecondsAlive;
    2e2c:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    2e30:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    2e34:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    2e38:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    2e3c:	80 93 35 22 	sts	0x2235, r24	; 0x802235 <gMarkLastI2cActivity>
    2e40:	90 93 36 22 	sts	0x2236, r25	; 0x802236 <gMarkLastI2cActivity+0x1>
    2e44:	a0 93 37 22 	sts	0x2237, r26	; 0x802237 <gMarkLastI2cActivity+0x2>
    2e48:	b0 93 38 22 	sts	0x2238, r27	; 0x802238 <gMarkLastI2cActivity+0x3>
}
    2e4c:	00 00       	nop
    2e4e:	24 96       	adiw	r28, 0x04	; 4
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	08 95       	ret

00002e5a <pscI2cStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cStopHandler(PscI2c_t *ppscI2c)
{
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <pscI2cStopHandler+0x6>
    2e60:	1f 92       	push	r1
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	8b 83       	std	Y+3, r24	; 0x03
    2e68:	9c 83       	std	Y+4, r25	; 0x04
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    2e6a:	80 e8       	ldi	r24, 0x80	; 128
    2e6c:	94 e0       	ldi	r25, 0x04	; 4
    2e6e:	fc 01       	movw	r30, r24
    2e70:	82 85       	ldd	r24, Z+10	; 0x0a
    2e72:	88 2f       	mov	r24, r24
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	82 70       	andi	r24, 0x02	; 2
    2e78:	99 27       	eor	r25, r25
    2e7a:	21 e0       	ldi	r18, 0x01	; 1
    2e7c:	89 2b       	or	r24, r25
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <pscI2cStopHandler+0x28>
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	29 83       	std	Y+1, r18	; 0x01
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t i2cStatus = TWIC.SLAVE.STATUS;
    2e84:	80 e8       	ldi	r24, 0x80	; 128
    2e86:	94 e0       	ldi	r25, 0x04	; 4
    2e88:	fc 01       	movw	r30, r24
    2e8a:	82 85       	ldd	r24, Z+10	; 0x0a
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
	TWIC.SLAVE.STATUS = i2cStatus | TWI_SLAVE_APIF_bm;
    2e8e:	80 e8       	ldi	r24, 0x80	; 128
    2e90:	94 e0       	ldi	r25, 0x04	; 4
    2e92:	2a 81       	ldd	r18, Y+2	; 0x02
    2e94:	20 64       	ori	r18, 0x40	; 64
    2e96:	fc 01       	movw	r30, r24
    2e98:	22 87       	std	Z+10, r18	; 0x0a

	pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	61 e0       	ldi	r22, 0x01	; 1
    2ea0:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
	
	if(bRead)
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	88 23       	and	r24, r24
    2ea8:	69 f4       	brne	.+26     	; 0x2ec4 <pscI2cStopHandler+0x6a>
	{
		
	}
	else
	{	/* PSC writing bytes to the HMI */
		if(ppscI2c->cCountOfRxBytes > 0)
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	87 53       	subi	r24, 0x37	; 55
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 23       	and	r24, r24
    2eb8:	29 f0       	breq	.+10     	; 0x2ec4 <pscI2cStopHandler+0x6a>
		{	/* PSC has successfully sent some bytes */
			/* Does it amount to a complete command ?
				no way to check without a CRC */
			ppscI2c->bCommandPendingProcessing = true;
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebe:	21 e0       	ldi	r18, 0x01	; 1
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	20 83       	st	Z, r18
		}
	}
}
    2ec4:	00 00       	nop
    2ec6:	24 96       	adiw	r28, 0x04	; 4
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	08 95       	ret

00002ed2 <pscI2cDataHandler>:
 *  Calls the appropriate slave read or write handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cDataHandler(PscI2c_t *ppscI2c)
{
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <pscI2cDataHandler+0x6>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	8a 83       	std	Y+2, r24	; 0x02
    2ede:	9b 83       	std	Y+3, r25	; 0x03
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    2ee0:	80 e8       	ldi	r24, 0x80	; 128
    2ee2:	94 e0       	ldi	r25, 0x04	; 4
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ee8:	88 2f       	mov	r24, r24
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	82 70       	andi	r24, 0x02	; 2
    2eee:	99 27       	eor	r25, r25
    2ef0:	21 e0       	ldi	r18, 0x01	; 1
    2ef2:	89 2b       	or	r24, r25
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <pscI2cDataHandler+0x26>
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	29 83       	std	Y+1, r18	; 0x01
	
	if(bRead)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	88 23       	and	r24, r24
    2efe:	29 f0       	breq	.+10     	; 0x2f0a <pscI2cDataHandler+0x38>
	{	/* PSC I2C master is reading data from the HMI */
		pscI2cReadHandler(ppscI2c);
    2f00:	8a 81       	ldd	r24, Y+2	; 0x02
    2f02:	9b 81       	ldd	r25, Y+3	; 0x03
    2f04:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <pscI2cReadHandler>
	} 
	else 
	{	/* PSC I2C master is writing data to the HMI */
		pscI2cWriteHandler(ppscI2c);
	}
}
    2f08:	04 c0       	rjmp	.+8      	; 0x2f12 <pscI2cDataHandler+0x40>
	{	/* PSC I2C master is reading data from the HMI */
		pscI2cReadHandler(ppscI2c);
	} 
	else 
	{	/* PSC I2C master is writing data to the HMI */
		pscI2cWriteHandler(ppscI2c);
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0e:	0e 94 90 17 	call	0x2f20	; 0x2f20 <pscI2cWriteHandler>
	}
}
    2f12:	00 00       	nop
    2f14:	23 96       	adiw	r28, 0x03	; 3
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <pscI2cWriteHandler>:
/*! \brief PSC I2C slave read interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cWriteHandler(PscI2c_t *ppscI2c)
{
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <pscI2cWriteHandler+0x6>
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	8a 83       	std	Y+2, r24	; 0x02
    2f2c:	9b 83       	std	Y+3, r25	; 0x03
	/* Enable stop interrupt. */
	///uint8_t currentCtrlA = TWIC.SLAVE.CTRLA;
	///TWIC.SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;


	if(ppscI2c->cCountOfRxBytes < PscI2cRxBufferSize) 
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	87 53       	subi	r24, 0x37	; 55
    2f34:	9f 4f       	sbci	r25, 0xFF	; 255
    2f36:	fc 01       	movw	r30, r24
    2f38:	80 81       	ld	r24, Z
    2f3a:	84 36       	cpi	r24, 0x64	; 100
    2f3c:	08 f0       	brcs	.+2      	; 0x2f40 <pscI2cWriteHandler+0x20>
    2f3e:	42 c0       	rjmp	.+132    	; 0x2fc4 <pscI2cWriteHandler+0xa4>
	{	/* Space in buffer for another byte */
		data = TWIC.SLAVE.DATA;
    2f40:	80 e8       	ldi	r24, 0x80	; 128
    2f42:	94 e0       	ldi	r25, 0x04	; 4
    2f44:	fc 01       	movw	r30, r24
    2f46:	84 85       	ldd	r24, Z+12	; 0x0c
    2f48:	89 83       	std	Y+1, r24	; 0x01
		ppscI2c->cRxData[ppscI2c->cCountOfRxBytes] = data;
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	87 53       	subi	r24, 0x37	; 55
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	fc 01       	movw	r30, r24
    2f54:	80 81       	ld	r24, Z
    2f56:	88 2f       	mov	r24, r24
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f5c:	3b 81       	ldd	r19, Y+3	; 0x03
    2f5e:	82 0f       	add	r24, r18
    2f60:	93 1f       	adc	r25, r19
    2f62:	01 96       	adiw	r24, 0x01	; 1
    2f64:	29 81       	ldd	r18, Y+1	; 0x01
    2f66:	fc 01       	movw	r30, r24
    2f68:	20 83       	st	Z, r18

		ppscI2c->cCountOfRxBytes++;
    2f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6e:	87 53       	subi	r24, 0x37	; 55
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	fc 01       	movw	r30, r24
    2f74:	80 81       	ld	r24, Z
    2f76:	21 e0       	ldi	r18, 0x01	; 1
    2f78:	28 0f       	add	r18, r24
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7e:	87 53       	subi	r24, 0x37	; 55
    2f80:	9f 4f       	sbci	r25, 0xFF	; 255
    2f82:	fc 01       	movw	r30, r24
    2f84:	20 83       	st	Z, r18

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if(ppscI2c->bAbort) 
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8a:	85 53       	subi	r24, 0x35	; 53
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	fc 01       	movw	r30, r24
    2f90:	80 81       	ld	r24, Z
    2f92:	88 23       	and	r24, r24
    2f94:	89 f0       	breq	.+34     	; 0x2fb8 <pscI2cWriteHandler+0x98>
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    2f96:	80 e8       	ldi	r24, 0x80	; 128
    2f98:	94 e0       	ldi	r25, 0x04	; 4
    2f9a:	22 e0       	ldi	r18, 0x02	; 2
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	21 87       	std	Z+9, r18	; 0x09
			pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa4:	66 e0       	ldi	r22, 0x06	; 6
    2fa6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
			ppscI2c->bAbort = false;
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	85 53       	subi	r24, 0x35	; 53
    2fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	10 82       	st	Z, r1
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
	}
}
    2fb6:	10 c0       	rjmp	.+32     	; 0x2fd8 <pscI2cWriteHandler+0xb8>
			pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
			ppscI2c->bAbort = false;
		} 
		else 
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    2fb8:	80 e8       	ldi	r24, 0x80	; 128
    2fba:	94 e0       	ldi	r25, 0x04	; 4
    2fbc:	23 e0       	ldi	r18, 0x03	; 3
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	21 87       	std	Z+9, r18	; 0x09
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
	}
}
    2fc2:	0a c0       	rjmp	.+20     	; 0x2fd8 <pscI2cWriteHandler+0xb8>
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
    2fc4:	80 e8       	ldi	r24, 0x80	; 128
    2fc6:	94 e0       	ldi	r25, 0x04	; 4
    2fc8:	26 e0       	ldi	r18, 0x06	; 6
    2fca:	fc 01       	movw	r30, r24
    2fcc:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd2:	62 e0       	ldi	r22, 0x02	; 2
    2fd4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
	}
}
    2fd8:	00 00       	nop
    2fda:	23 96       	adiw	r28, 0x03	; 3
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	08 95       	ret

00002fe6 <pscI2cGetTxBuffer>:

uint8_t* pscI2cGetTxBuffer(void)
{
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
	return(gPscI2c.cDataForPscToCollect);
    2fee:	8e e9       	ldi	r24, 0x9E	; 158
    2ff0:	92 e2       	ldi	r25, 0x22	; 34
}
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	08 95       	ret

00002ff8 <pscI2cReadHandler>:
/*! \brief PSC I2C slave write interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cReadHandler(PscI2c_t *ppscI2c)
{
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <pscI2cReadHandler+0x6>
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	8a 83       	std	Y+2, r24	; 0x02
    3004:	9b 83       	std	Y+3, r25	; 0x03
	/* If NACK, slave write transaction finished. */
	if((ppscI2c->cCountOfBytesCollectedByPsc > 0) && (TWIC.SLAVE.STATUS & TWI_SLAVE_RXACK_bm)) 
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	86 53       	subi	r24, 0x36	; 54
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	fc 01       	movw	r30, r24
    3010:	80 81       	ld	r24, Z
    3012:	88 23       	and	r24, r24
    3014:	a9 f0       	breq	.+42     	; 0x3040 <pscI2cReadHandler+0x48>
    3016:	80 e8       	ldi	r24, 0x80	; 128
    3018:	94 e0       	ldi	r25, 0x04	; 4
    301a:	fc 01       	movw	r30, r24
    301c:	82 85       	ldd	r24, Z+10	; 0x0a
    301e:	88 2f       	mov	r24, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	80 71       	andi	r24, 0x10	; 16
    3024:	99 27       	eor	r25, r25
    3026:	89 2b       	or	r24, r25
    3028:	59 f0       	breq	.+22     	; 0x3040 <pscI2cReadHandler+0x48>
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    302a:	80 e8       	ldi	r24, 0x80	; 128
    302c:	94 e0       	ldi	r25, 0x04	; 4
    302e:	22 e0       	ldi	r18, 0x02	; 2
    3030:	fc 01       	movw	r30, r24
    3032:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	9b 81       	ldd	r25, Y+3	; 0x03
    3038:	61 e0       	ldi	r22, 0x01	; 1
    303a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
		}
	}
}
    303e:	3c c0       	rjmp	.+120    	; 0x30b8 <pscI2cReadHandler+0xc0>
		pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
	}
	/* If ACK, master expects more data. */
	else 
	{
		if(ppscI2c->cCountOfBytesCollectedByPsc < PscI2cTxBufferSize) 
    3040:	8a 81       	ldd	r24, Y+2	; 0x02
    3042:	9b 81       	ldd	r25, Y+3	; 0x03
    3044:	86 53       	subi	r24, 0x36	; 54
    3046:	9f 4f       	sbci	r25, 0xFF	; 255
    3048:	fc 01       	movw	r30, r24
    304a:	80 81       	ld	r24, Z
    304c:	84 36       	cpi	r24, 0x64	; 100
    304e:	50 f5       	brcc	.+84     	; 0x30a4 <pscI2cReadHandler+0xac>
		{
			uint8_t data = ppscI2c->cDataForPscToCollect[ppscI2c->cCountOfBytesCollectedByPsc];
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	86 53       	subi	r24, 0x36	; 54
    3056:	9f 4f       	sbci	r25, 0xFF	; 255
    3058:	fc 01       	movw	r30, r24
    305a:	80 81       	ld	r24, Z
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	2a 81       	ldd	r18, Y+2	; 0x02
    3062:	3b 81       	ldd	r19, Y+3	; 0x03
    3064:	82 0f       	add	r24, r18
    3066:	93 1f       	adc	r25, r19
    3068:	8b 59       	subi	r24, 0x9B	; 155
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	fc 01       	movw	r30, r24
    306e:	80 81       	ld	r24, Z
    3070:	89 83       	std	Y+1, r24	; 0x01
			TWIC.SLAVE.DATA = data;
    3072:	80 e8       	ldi	r24, 0x80	; 128
    3074:	94 e0       	ldi	r25, 0x04	; 4
    3076:	29 81       	ldd	r18, Y+1	; 0x01
    3078:	fc 01       	movw	r30, r24
    307a:	24 87       	std	Z+12, r18	; 0x0c
			ppscI2c->cCountOfBytesCollectedByPsc++;
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	86 53       	subi	r24, 0x36	; 54
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	fc 01       	movw	r30, r24
    3086:	80 81       	ld	r24, Z
    3088:	21 e0       	ldi	r18, 0x01	; 1
    308a:	28 0f       	add	r18, r24
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	9b 81       	ldd	r25, Y+3	; 0x03
    3090:	86 53       	subi	r24, 0x36	; 54
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	fc 01       	movw	r30, r24
    3096:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    3098:	80 e8       	ldi	r24, 0x80	; 128
    309a:	94 e0       	ldi	r25, 0x04	; 4
    309c:	23 e0       	ldi	r18, 0x03	; 3
    309e:	fc 01       	movw	r30, r24
    30a0:	21 87       	std	Z+9, r18	; 0x09
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
		}
	}
}
    30a2:	0a c0       	rjmp	.+20     	; 0x30b8 <pscI2cReadHandler+0xc0>
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
		}
		/* If buffer overflow. */
		else 
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    30a4:	80 e8       	ldi	r24, 0x80	; 128
    30a6:	94 e0       	ldi	r25, 0x04	; 4
    30a8:	22 e0       	ldi	r18, 0x02	; 2
    30aa:	fc 01       	movw	r30, r24
    30ac:	21 87       	std	Z+9, r18	; 0x09
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	9b 81       	ldd	r25, Y+3	; 0x03
    30b2:	62 e0       	ldi	r22, 0x02	; 2
    30b4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <pscI2cTransactionFinished>
		}
	}
}
    30b8:	00 00       	nop
    30ba:	23 96       	adiw	r28, 0x03	; 3
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	08 95       	ret

000030c6 <pscI2cTransactionFinished>:
 *
 *  \param ppscI2c    The PscI2c_t struct instance.
 *  \param result The result of the transaction.
 */
void pscI2cTransactionFinished(PscI2c_t *ppscI2c, uint8_t result)
{
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <pscI2cTransactionFinished+0x6>
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	9a 83       	std	Y+2, r25	; 0x02
    30d4:	6b 83       	std	Y+3, r22	; 0x03
	ppscI2c->cResult = result;
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	81 53       	subi	r24, 0x31	; 49
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	2b 81       	ldd	r18, Y+3	; 0x03
    30e0:	fc 01       	movw	r30, r24
    30e2:	20 83       	st	Z, r18
	ppscI2c->cStatus = PscI2cReady;
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	82 53       	subi	r24, 0x32	; 50
    30ea:	9f 4f       	sbci	r25, 0xFF	; 255
    30ec:	fc 01       	movw	r30, r24
    30ee:	10 82       	st	Z, r1
}
    30f0:	00 00       	nop
    30f2:	23 96       	adiw	r28, 0x03	; 3
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <mainTimerInit>:

/** Initialise the main timer which is used for general timing.
	\return Nothing
*/   
void mainTimerInit(void)
{
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
		Assume CPU clock is 8 MHz
		Target is 1000 interrupts per second (every 1 ms)
		8 MHz / 256 = 31250 Hz
	to work from CPUCLK/64, with period 10000 and
	 */
	TCC0.PER = 800;
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	98 e0       	ldi	r25, 0x08	; 8
    310a:	20 e2       	ldi	r18, 0x20	; 32
    310c:	33 e0       	ldi	r19, 0x03	; 3
    310e:	fc 01       	movw	r30, r24
    3110:	26 a3       	std	Z+38, r18	; 0x26
    3112:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	98 e0       	ldi	r25, 0x08	; 8
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	38 e0       	ldi	r19, 0x08	; 8
    311c:	f9 01       	movw	r30, r18
    311e:	20 81       	ld	r18, Z
    3120:	20 7f       	andi	r18, 0xF0	; 240
    3122:	21 60       	ori	r18, 0x01	; 1
    3124:	fc 01       	movw	r30, r24
    3126:	20 83       	st	Z, r18
	
	/* Enable overflow interrupt */
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_LO_gc;
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	98 e0       	ldi	r25, 0x08	; 8
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	38 e0       	ldi	r19, 0x08	; 8
    3130:	f9 01       	movw	r30, r18
    3132:	26 81       	ldd	r18, Z+6	; 0x06
    3134:	2c 7f       	andi	r18, 0xFC	; 252
    3136:	21 60       	ori	r18, 0x01	; 1
    3138:	fc 01       	movw	r30, r24
    313a:	26 83       	std	Z+6, r18	; 0x06

}
    313c:	00 00       	nop
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
    3142:	08 95       	ret

00003144 <__vector_14>:

/** Interrupt handler for the main timer which is used for general timing
	\return Nothing
*/   
ISR(TCC0_OVF_vect)
{	/* Interrupt every 1ms */
    3144:	1f 92       	push	r1
    3146:	0f 92       	push	r0
    3148:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    314c:	0f 92       	push	r0
    314e:	11 24       	eor	r1, r1
    3150:	8f 93       	push	r24
    3152:	9f 93       	push	r25
    3154:	af 93       	push	r26
    3156:	bf 93       	push	r27
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62

	/* Increment a count of ms that can be used elsewhere */
	gdw_LocalmsTimeCount++;	/* Wraps every ~50 days */
    3160:	80 91 11 23 	lds	r24, 0x2311	; 0x802311 <gdw_LocalmsTimeCount>
    3164:	90 91 12 23 	lds	r25, 0x2312	; 0x802312 <gdw_LocalmsTimeCount+0x1>
    3168:	a0 91 13 23 	lds	r26, 0x2313	; 0x802313 <gdw_LocalmsTimeCount+0x2>
    316c:	b0 91 14 23 	lds	r27, 0x2314	; 0x802314 <gdw_LocalmsTimeCount+0x3>
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	a1 1d       	adc	r26, r1
    3174:	b1 1d       	adc	r27, r1
    3176:	80 93 11 23 	sts	0x2311, r24	; 0x802311 <gdw_LocalmsTimeCount>
    317a:	90 93 12 23 	sts	0x2312, r25	; 0x802312 <gdw_LocalmsTimeCount+0x1>
    317e:	a0 93 13 23 	sts	0x2313, r26	; 0x802313 <gdw_LocalmsTimeCount+0x2>
    3182:	b0 93 14 23 	sts	0x2314, r27	; 0x802314 <gdw_LocalmsTimeCount+0x3>

	if(++gc10msCount >= 10)
    3186:	80 91 09 23 	lds	r24, 0x2309	; 0x802309 <gc10msCount>
    318a:	8f 5f       	subi	r24, 0xFF	; 255
    318c:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <gc10msCount>
    3190:	8a 30       	cpi	r24, 0x0A	; 10
    3192:	98 f1       	brcs	.+102    	; 0x31fa <__vector_14+0xb6>
	{	/* Another 10ms */
		gc10msCount = 0;
    3194:	10 92 09 23 	sts	0x2309, r1	; 0x802309 <gc10msCount>

		/* Counter wraps every 2.56s */
		/* This is READ-ONLY from the main loop */
		gc10msTick++;	/* This is a simple counter to allow the main loop to use small time increments */
    3198:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <gc10msTick>
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	80 93 17 23 	sts	0x2317, r24	; 0x802317 <gc10msTick>

		if(++gc100msCount >= gcTenthSecond_PartCount)
    31a2:	80 91 15 23 	lds	r24, 0x2315	; 0x802315 <gc100msCount>
    31a6:	8f 5f       	subi	r24, 0xFF	; 255
    31a8:	80 93 15 23 	sts	0x2315, r24	; 0x802315 <gc100msCount>
    31ac:	9a e0       	ldi	r25, 0x0A	; 10
    31ae:	89 17       	cp	r24, r25
    31b0:	a8 f0       	brcs	.+42     	; 0x31dc <__vector_14+0x98>
		{	/* Another 100ms. Counter wraps every 25.6s */
			gc100msCount = 0;
    31b2:	10 92 15 23 	sts	0x2315, r1	; 0x802315 <gc100msCount>
			gc100msTick++;	/* This is a simple counter to allow the main loop to use small time increments
    31b6:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
    31ba:	8f 5f       	subi	r24, 0xFF	; 255
    31bc:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <gc100msTick>
									This is READ-ONLY from the main loop */


			if(++gc1sCount >= 10)
    31c0:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <gc1sCount>
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <gc1sCount>
    31ca:	8a 30       	cpi	r24, 0x0A	; 10
    31cc:	38 f0       	brcs	.+14     	; 0x31dc <__vector_14+0x98>
			{	/* Another 1000ms = 1s */
				gc1sCount = 0;
    31ce:	10 92 0e 23 	sts	0x230E, r1	; 0x80230e <gc1sCount>
				gc1sTick++;	/* This is a simple counter to allow the main loop to use small time increments
    31d2:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc1sTick>
    31d6:	8f 5f       	subi	r24, 0xFF	; 255
    31d8:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <gc1sTick>
									This is READ-ONLY from the main loop */
			}
		}

		if(++gcSubSecondCnt >= gcQuarterSecond_PartCount)
    31dc:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <gcSubSecondCnt>
    31e0:	8f 5f       	subi	r24, 0xFF	; 255
    31e2:	80 93 0b 23 	sts	0x230B, r24	; 0x80230b <gcSubSecondCnt>
    31e6:	99 e1       	ldi	r25, 0x19	; 25
    31e8:	89 17       	cp	r24, r25
    31ea:	38 f0       	brcs	.+14     	; 0x31fa <__vector_14+0xb6>
		{	/* Another quarter second */
			gcSubSecondCnt = 0;
    31ec:	10 92 0b 23 	sts	0x230B, r1	; 0x80230b <gcSubSecondCnt>
			gc250msTick++;	/* This is a simple counter to allow the main loop to use small time increments
    31f0:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gc250msTick>
    31f4:	8f 5f       	subi	r24, 0xFF	; 255
    31f6:	80 93 0a 23 	sts	0x230A, r24	; 0x80230a <gc250msTick>
									This is READ-ONLY from the main loop */
		}

	}

}
    31fa:	00 00       	nop
    31fc:	df 91       	pop	r29
    31fe:	cf 91       	pop	r28
    3200:	bf 91       	pop	r27
    3202:	af 91       	pop	r26
    3204:	9f 91       	pop	r25
    3206:	8f 91       	pop	r24
    3208:	0f 90       	pop	r0
    320a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    320e:	0f 90       	pop	r0
    3210:	1f 90       	pop	r1
    3212:	18 95       	reti

00003214 <mainTimerService>:
/** Manage general timing events.
	This is called once from the main loop and manages slower timing that can be handled outside of the interrupt.
	\return Nothing
*/   
void mainTimerService(void)
{
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	00 d0       	rcall	.+0      	; 0x321a <mainTimerService+0x6>
    321a:	00 d0       	rcall	.+0      	; 0x321c <mainTimerService+0x8>
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
	bool bAnother_100ms;
	bool bAnother_250ms;
	uint32_t dwTemp;

	bAnother_100ms = false;
    3220:	1e 82       	std	Y+6, r1	; 0x06
	bAnother_250ms = false;
    3222:	19 82       	std	Y+1, r1	; 0x01

	/* some rather weird looking code in here is most likely due to trying to avoid clashes with the interrupt 
		eg avoiding writing to variables that the interrupt also writes to */
	if(gcLastTimeHere_100ms != gc100msTick)
    3224:	90 91 1d 23 	lds	r25, 0x231D	; 0x80231d <gcLastTimeHere_100ms>
    3228:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gc100msTick>
    322c:	98 17       	cp	r25, r24
    322e:	39 f0       	breq	.+14     	; 0x323e <mainTimerService+0x2a>
	{	/* At least 100ms since last check */
		gcLastTimeHere_100ms++;	/* Catch up */
    3230:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <gcLastTimeHere_100ms>
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	80 93 1d 23 	sts	0x231D, r24	; 0x80231d <gcLastTimeHere_100ms>
		bAnother_100ms = true;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	8e 83       	std	Y+6, r24	; 0x06
	}

	if(gcLastTimeHere_250ms != gc250msTick)
    323e:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <gcLastTimeHere_250ms>
    3242:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gc250msTick>
    3246:	98 17       	cp	r25, r24
    3248:	39 f0       	breq	.+14     	; 0x3258 <mainTimerService+0x44>
	{	/* At least 250ms since last check */
		gcLastTimeHere_250ms++;	/* Catch up */
    324a:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <gcLastTimeHere_250ms>
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <gcLastTimeHere_250ms>
		bAnother_250ms = true;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	89 83       	std	Y+1, r24	; 0x01
	}

	/* gdw_msTimeCount Wraps every ~50 days */
	/* read repeatedly until 2 reads the same, to ensure int does not change it in middle of it being copied here */
	dwTemp = 0;
    3258:	1a 82       	std	Y+2, r1	; 0x02
    325a:	1b 82       	std	Y+3, r1	; 0x03
    325c:	1c 82       	std	Y+4, r1	; 0x04
    325e:	1d 82       	std	Y+5, r1	; 0x05
	do
	{
		gdw_msTimeCount = dwTemp;			/* Copy temp to destination */
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	ac 81       	ldd	r26, Y+4	; 0x04
    3266:	bd 81       	ldd	r27, Y+5	; 0x05
    3268:	80 93 1e 23 	sts	0x231E, r24	; 0x80231e <gdw_msTimeCount>
    326c:	90 93 1f 23 	sts	0x231F, r25	; 0x80231f <gdw_msTimeCount+0x1>
    3270:	a0 93 20 23 	sts	0x2320, r26	; 0x802320 <gdw_msTimeCount+0x2>
    3274:	b0 93 21 23 	sts	0x2321, r27	; 0x802321 <gdw_msTimeCount+0x3>
		dwTemp = gdw_LocalmsTimeCount;	/* Update temp from the src */
    3278:	80 91 11 23 	lds	r24, 0x2311	; 0x802311 <gdw_LocalmsTimeCount>
    327c:	90 91 12 23 	lds	r25, 0x2312	; 0x802312 <gdw_LocalmsTimeCount+0x1>
    3280:	a0 91 13 23 	lds	r26, 0x2313	; 0x802313 <gdw_LocalmsTimeCount+0x2>
    3284:	b0 91 14 23 	lds	r27, 0x2314	; 0x802314 <gdw_LocalmsTimeCount+0x3>
    3288:	8a 83       	std	Y+2, r24	; 0x02
    328a:	9b 83       	std	Y+3, r25	; 0x03
    328c:	ac 83       	std	Y+4, r26	; 0x04
    328e:	bd 83       	std	Y+5, r27	; 0x05
	} while(gdw_msTimeCount != dwTemp);	/* check the src has not changed since setting the destination */
    3290:	20 91 1e 23 	lds	r18, 0x231E	; 0x80231e <gdw_msTimeCount>
    3294:	30 91 1f 23 	lds	r19, 0x231F	; 0x80231f <gdw_msTimeCount+0x1>
    3298:	40 91 20 23 	lds	r20, 0x2320	; 0x802320 <gdw_msTimeCount+0x2>
    329c:	50 91 21 23 	lds	r21, 0x2321	; 0x802321 <gdw_msTimeCount+0x3>
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	ac 81       	ldd	r26, Y+4	; 0x04
    32a6:	bd 81       	ldd	r27, Y+5	; 0x05
    32a8:	28 17       	cp	r18, r24
    32aa:	39 07       	cpc	r19, r25
    32ac:	4a 07       	cpc	r20, r26
    32ae:	5b 07       	cpc	r21, r27
    32b0:	b9 f6       	brne	.-82     	; 0x3260 <mainTimerService+0x4c>
	if(bAnother_100ms)
	{	/* Another 100 ms */
	}


	if(bAnother_250ms)
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <mainTimerService+0xa6>
    32b8:	40 c0       	rjmp	.+128    	; 0x333a <mainTimerService+0x126>
	{	/* Another quarter second */
		if(++gcSecondTimer >= 4)
    32ba:	80 91 16 23 	lds	r24, 0x2316	; 0x802316 <gcSecondTimer>
    32be:	8f 5f       	subi	r24, 0xFF	; 255
    32c0:	80 93 16 23 	sts	0x2316, r24	; 0x802316 <gcSecondTimer>
    32c4:	80 91 16 23 	lds	r24, 0x2316	; 0x802316 <gcSecondTimer>
    32c8:	84 30       	cpi	r24, 0x04	; 4
    32ca:	b8 f1       	brcs	.+110    	; 0x333a <mainTimerService+0x126>
		{	/* Another second */
			gcSecondTimer = 0;
    32cc:	10 92 16 23 	sts	0x2316, r1	; 0x802316 <gcSecondTimer>

			/* Track how many seconds the controller has been up for. 32-bit. Can track 136 years */
			gdwSecondsAlive++;
    32d0:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    32d4:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    32d8:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    32dc:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	a1 1d       	adc	r26, r1
    32e4:	b1 1d       	adc	r27, r1
    32e6:	80 93 18 23 	sts	0x2318, r24	; 0x802318 <gdwSecondsAlive>
    32ea:	90 93 19 23 	sts	0x2319, r25	; 0x802319 <gdwSecondsAlive+0x1>
    32ee:	a0 93 1a 23 	sts	0x231A, r26	; 0x80231a <gdwSecondsAlive+0x2>
    32f2:	b0 93 1b 23 	sts	0x231B, r27	; 0x80231b <gdwSecondsAlive+0x3>
			
			pscSetSecondsAlive(gdwSecondsAlive);
    32f6:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    32fa:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    32fe:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    3302:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 c6 12 	call	0x258c	; 0x258c <pscSetSecondsAlive>


			gcTwoSecondTimer++;
    330e:	80 91 1c 23 	lds	r24, 0x231C	; 0x80231c <gcTwoSecondTimer>
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	80 93 1c 23 	sts	0x231C, r24	; 0x80231c <gcTwoSecondTimer>
			if(gcTwoSecondTimer >= 2)
    3318:	80 91 1c 23 	lds	r24, 0x231C	; 0x80231c <gcTwoSecondTimer>
    331c:	82 30       	cpi	r24, 0x02	; 2
    331e:	10 f0       	brcs	.+4      	; 0x3324 <mainTimerService+0x110>
			{
				/* Another two-seconds */
				gcTwoSecondTimer = 0;
    3320:	10 92 1c 23 	sts	0x231C, r1	; 0x80231c <gcTwoSecondTimer>
			}

			if(++gcMinuteTimer >= 60)
    3324:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <gcMinuteTimer>
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <gcMinuteTimer>
    332e:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <gcMinuteTimer>
    3332:	8c 33       	cpi	r24, 0x3C	; 60
    3334:	10 f0       	brcs	.+4      	; 0x333a <mainTimerService+0x126>
			{
				/* Another minute */
				gcMinuteTimer = 0;
    3336:	10 92 10 23 	sts	0x2310, r1	; 0x802310 <gcMinuteTimer>
			}

		}	/* Another second */

	}
}
    333a:	00 00       	nop
    333c:	26 96       	adiw	r28, 0x06	; 6
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret

00003348 <quadInit>:

/** Initialise the quadrature decoder
	\return Nothing
*/
void quadInit(void)
{
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    3350:	80 e8       	ldi	r24, 0x80	; 128
    3352:	96 e0       	ldi	r25, 0x06	; 6
    3354:	28 e1       	ldi	r18, 0x18	; 24
    3356:	fc 01       	movw	r30, r24
    3358:	25 8b       	std	Z+21, r18	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    335a:	80 e8       	ldi	r24, 0x80	; 128
    335c:	96 e0       	ldi	r25, 0x06	; 6
    335e:	28 e1       	ldi	r18, 0x18	; 24
    3360:	fc 01       	movw	r30, r24
    3362:	26 8b       	std	Z+22, r18	; 0x16
}
    3364:	00 00       	nop
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret

0000336c <quadTestEnable>:

bool gQuadTestEnabled;

void quadTestEnable(bool bEnable)
{
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	1f 92       	push	r1
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	89 83       	std	Y+1, r24	; 0x01
	if((gQuadTestEnabled == false) && (bEnable == true))
    3378:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <gQuadTestEnabled>
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	89 27       	eor	r24, r25
    3380:	88 23       	and	r24, r24
    3382:	29 f0       	breq	.+10     	; 0x338e <quadTestEnable+0x22>
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	88 23       	and	r24, r24
    3388:	11 f0       	breq	.+4      	; 0x338e <quadTestEnable+0x22>
	{	/* starting the test */
		
		dspOn();
    338a:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <dspOn>
	}
	dspErase();
    338e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <dspErase>
	
	gQuadTestEnabled = bEnable;
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <gQuadTestEnabled>
}
    3398:	00 00       	nop
    339a:	0f 90       	pop	r0
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	08 95       	ret

000033a2 <rstInit>:

/** Initialise the reset object, read the reason for the reset
	\return Nothing
*/   
void rstInit(void)
{
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
	gLastReasonForReset = RST.STATUS;
    33aa:	88 e7       	ldi	r24, 0x78	; 120
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	fc 01       	movw	r30, r24
    33b0:	80 81       	ld	r24, Z
    33b2:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <gLastReasonForReset>
	
	/* Clear all reset flags */
	RST.STATUS = 0x3F;
    33b6:	88 e7       	ldi	r24, 0x78	; 120
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	2f e3       	ldi	r18, 0x3F	; 63
    33bc:	fc 01       	movw	r30, r24
    33be:	20 83       	st	Z, r18
}
    33c0:	00 00       	nop
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	08 95       	ret

000033c8 <rstGetLastReasonForReset>:

uint8_t rstGetLastReasonForReset(void)
{
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
	return(gLastReasonForReset);
    33d0:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <gLastReasonForReset>
}
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	08 95       	ret

000033da <rs485testInit>:
				gWaitingForLoopBack = true;	/* Indicate waiting for the byte to be Rx via the loop-back connection */
				gc10ms_rs485TestInterval = gc10msTick;	/* Mark time of transmission */
			}
		}
	}
}
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	80 e6       	ldi	r24, 0x60	; 96
    33e4:	96 e0       	ldi	r25, 0x06	; 6
    33e6:	28 e0       	ldi	r18, 0x08	; 8
    33e8:	fc 01       	movw	r30, r24
    33ea:	21 83       	std	Z+1, r18	; 0x01
    33ec:	80 e6       	ldi	r24, 0x60	; 96
    33ee:	96 e0       	ldi	r25, 0x06	; 6
    33f0:	24 e0       	ldi	r18, 0x04	; 4
    33f2:	fc 01       	movw	r30, r24
    33f4:	22 83       	std	Z+2, r18	; 0x02
    33f6:	80 e6       	ldi	r24, 0x60	; 96
    33f8:	96 e0       	ldi	r25, 0x06	; 6
    33fa:	28 e1       	ldi	r18, 0x18	; 24
    33fc:	fc 01       	movw	r30, r24
    33fe:	22 8b       	std	Z+18, r18	; 0x12
    3400:	80 e6       	ldi	r24, 0x60	; 96
    3402:	96 e0       	ldi	r25, 0x06	; 6
    3404:	22 e0       	ldi	r18, 0x02	; 2
    3406:	fc 01       	movw	r30, r24
    3408:	21 83       	std	Z+1, r18	; 0x01
    340a:	80 e6       	ldi	r24, 0x60	; 96
    340c:	96 e0       	ldi	r25, 0x06	; 6
    340e:	22 e0       	ldi	r18, 0x02	; 2
    3410:	fc 01       	movw	r30, r24
    3412:	25 83       	std	Z+5, r18	; 0x05
    3414:	80 ea       	ldi	r24, 0xA0	; 160
    3416:	99 e0       	ldi	r25, 0x09	; 9
    3418:	23 e0       	ldi	r18, 0x03	; 3
    341a:	fc 01       	movw	r30, r24
    341c:	25 83       	std	Z+5, r18	; 0x05
    341e:	80 ea       	ldi	r24, 0xA0	; 160
    3420:	99 e0       	ldi	r25, 0x09	; 9
    3422:	23 e3       	ldi	r18, 0x33	; 51
    3424:	fc 01       	movw	r30, r24
    3426:	26 83       	std	Z+6, r18	; 0x06
    3428:	80 ea       	ldi	r24, 0xA0	; 160
    342a:	99 e0       	ldi	r25, 0x09	; 9
    342c:	fc 01       	movw	r30, r24
    342e:	17 82       	std	Z+7, r1	; 0x07
    3430:	80 ea       	ldi	r24, 0xA0	; 160
    3432:	99 e0       	ldi	r25, 0x09	; 9
    3434:	20 ea       	ldi	r18, 0xA0	; 160
    3436:	39 e0       	ldi	r19, 0x09	; 9
    3438:	f9 01       	movw	r30, r18
    343a:	24 81       	ldd	r18, Z+4	; 0x04
    343c:	20 61       	ori	r18, 0x10	; 16
    343e:	fc 01       	movw	r30, r24
    3440:	24 83       	std	Z+4, r18	; 0x04
    3442:	80 ea       	ldi	r24, 0xA0	; 160
    3444:	99 e0       	ldi	r25, 0x09	; 9
    3446:	20 ea       	ldi	r18, 0xA0	; 160
    3448:	39 e0       	ldi	r19, 0x09	; 9
    344a:	f9 01       	movw	r30, r18
    344c:	24 81       	ldd	r18, Z+4	; 0x04
    344e:	28 60       	ori	r18, 0x08	; 8
    3450:	fc 01       	movw	r30, r24
    3452:	24 83       	std	Z+4, r18	; 0x04
    3454:	00 00       	nop
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	08 95       	ret

0000345c <rs485testEnable>:

void rs485testEnable(bool bEnable)
{
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	1f 92       	push	r1
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	89 83       	std	Y+1, r24	; 0x01
	if((gRs485testEnabled == false) && (bEnable == true))
    3468:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <gRs485testEnabled>
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	89 27       	eor	r24, r25
    3470:	88 23       	and	r24, r24
    3472:	39 f0       	breq	.+14     	; 0x3482 <rs485testEnable+0x26>
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	88 23       	and	r24, r24
    3478:	21 f0       	breq	.+8      	; 0x3482 <rs485testEnable+0x26>
	{	/* starting the loop back test */
		rs485testInit();
    347a:	0e 94 ed 19 	call	0x33da	; 0x33da <rs485testInit>
		dspOn();
    347e:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <dspOn>
	}
	dspErase();
    3482:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <dspErase>
	
	gRs485testEnabled = bEnable;
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	80 93 2f 23 	sts	0x232F, r24	; 0x80232f <gRs485testEnabled>
}
    348c:	00 00       	nop
    348e:	0f 90       	pop	r0
    3490:	df 91       	pop	r29
    3492:	cf 91       	pop	r28
    3494:	08 95       	ret

00003496 <spiInit>:
uint8_t gTemp;

/* static function prototypes */

void spiInit(void)
{
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
	/* Configure GPIO for SPI pins */
	PORTC.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm;          /* MOSI, SCK, SS outputs; MISO input */
    349e:	80 e4       	ldi	r24, 0x40	; 64
    34a0:	96 e0       	ldi	r25, 0x06	; 6
    34a2:	20 eb       	ldi	r18, 0xB0	; 176
    34a4:	fc 01       	movw	r30, r24
    34a6:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET = PIN4_bm;       /* de-assert CS pin (active low) */
    34a8:	80 e4       	ldi	r24, 0x40	; 64
    34aa:	96 e0       	ldi	r25, 0x06	; 6
    34ac:	20 e1       	ldi	r18, 0x10	; 16
    34ae:	fc 01       	movw	r30, r24
    34b0:	25 83       	std	Z+5, r18	; 0x05
	
	/* Configure SPI, Master, Mode 0, 512 kHz clock */
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
    34b2:	80 ec       	ldi	r24, 0xC0	; 192
    34b4:	98 e0       	ldi	r25, 0x08	; 8
    34b6:	21 e5       	ldi	r18, 0x51	; 81
    34b8:	fc 01       	movw	r30, r24
    34ba:	20 83       	st	Z, r18
	
	/* Flush master receive buffer */
	while(SPIC.STATUS & 0x80)
    34bc:	06 c0       	rjmp	.+12     	; 0x34ca <spiInit+0x34>
	{
		gTemp = SPIC.DATA;
    34be:	80 ec       	ldi	r24, 0xC0	; 192
    34c0:	98 e0       	ldi	r25, 0x08	; 8
    34c2:	fc 01       	movw	r30, r24
    34c4:	83 81       	ldd	r24, Z+3	; 0x03
    34c6:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <gTemp>
	
	/* Configure SPI, Master, Mode 0, 512 kHz clock */
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
	
	/* Flush master receive buffer */
	while(SPIC.STATUS & 0x80)
    34ca:	80 ec       	ldi	r24, 0xC0	; 192
    34cc:	98 e0       	ldi	r25, 0x08	; 8
    34ce:	fc 01       	movw	r30, r24
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	88 23       	and	r24, r24
    34d4:	a4 f3       	brlt	.-24     	; 0x34be <spiInit+0x28>
	{
		gTemp = SPIC.DATA;
	}
}
    34d6:	00 00       	nop
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	08 95       	ret

000034de <adcInit>:
			dspShowVerticalLine(xPos, 1);	/* draw a line on the OLED corresponding to the result */
			gAmbientLightResult_Old = adcResult;
			resultOnDisplay = true;
		}
	}
}
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	80 e2       	ldi	r24, 0x20	; 32
    34ec:	96 e0       	ldi	r25, 0x06	; 6
    34ee:	23 e0       	ldi	r18, 0x03	; 3
    34f0:	fc 01       	movw	r30, r24
    34f2:	22 83       	std	Z+2, r18	; 0x02
    34f4:	00 e0       	ldi	r16, 0x00	; 0
    34f6:	12 e0       	ldi	r17, 0x02	; 2
    34f8:	80 e2       	ldi	r24, 0x20	; 32
    34fa:	0e 94 a7 1a 	call	0x354e	; 0x354e <adcReadCalibrationByte>
    34fe:	f8 01       	movw	r30, r16
    3500:	84 87       	std	Z+12, r24	; 0x0c
    3502:	00 e0       	ldi	r16, 0x00	; 0
    3504:	12 e0       	ldi	r17, 0x02	; 2
    3506:	81 e2       	ldi	r24, 0x21	; 33
    3508:	0e 94 a7 1a 	call	0x354e	; 0x354e <adcReadCalibrationByte>
    350c:	f8 01       	movw	r30, r16
    350e:	85 87       	std	Z+13, r24	; 0x0d
    3510:	00 e0       	ldi	r16, 0x00	; 0
    3512:	12 e0       	ldi	r17, 0x02	; 2
    3514:	80 e2       	ldi	r24, 0x20	; 32
    3516:	0e 94 a7 1a 	call	0x354e	; 0x354e <adcReadCalibrationByte>
    351a:	f8 01       	movw	r30, r16
    351c:	84 87       	std	Z+12, r24	; 0x0c
    351e:	00 e0       	ldi	r16, 0x00	; 0
    3520:	12 e0       	ldi	r17, 0x02	; 2
    3522:	81 e2       	ldi	r24, 0x21	; 33
    3524:	0e 94 a7 1a 	call	0x354e	; 0x354e <adcReadCalibrationByte>
    3528:	f8 01       	movw	r30, r16
    352a:	85 87       	std	Z+13, r24	; 0x0d
    352c:	0e 94 cb 1a 	call	0x3596	; 0x3596 <adcSetupForNextChannel>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	92 e0       	ldi	r25, 0x02	; 2
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	32 e0       	ldi	r19, 0x02	; 2
    3538:	f9 01       	movw	r30, r18
    353a:	20 a1       	ldd	r18, Z+32	; 0x20
    353c:	20 68       	ori	r18, 0x80	; 128
    353e:	fc 01       	movw	r30, r24
    3540:	20 a3       	std	Z+32, r18	; 0x20
    3542:	00 00       	nop
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	08 95       	ret

0000354e <adcReadCalibrationByte>:
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	25 97       	sbiw	r28, 0x05	; 5
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	8a ec       	ldi	r24, 0xCA	; 202
    3560:	91 e0       	ldi	r25, 0x01	; 1
    3562:	22 e0       	ldi	r18, 0x02	; 2
    3564:	fc 01       	movw	r30, r24
    3566:	20 83       	st	Z, r18
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	88 2f       	mov	r24, r24
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	9a 83       	std	Y+2, r25	; 0x02
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	9a 81       	ldd	r25, Y+2	; 0x02
    3576:	fc 01       	movw	r30, r24
    3578:	84 91       	lpm	r24, Z
    357a:	8b 83       	std	Y+3, r24	; 0x03
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	8c 83       	std	Y+4, r24	; 0x04
    3580:	8a ec       	ldi	r24, 0xCA	; 202
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	fc 01       	movw	r30, r24
    3586:	10 82       	st	Z, r1
    3588:	8c 81       	ldd	r24, Y+4	; 0x04
    358a:	25 96       	adiw	r28, 0x05	; 5
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	08 95       	ret

00003596 <adcSetupForNextChannel>:
    3596:	cf 93       	push	r28
    3598:	df 93       	push	r29
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	92 e0       	ldi	r25, 0x02	; 2
    35a2:	25 e0       	ldi	r18, 0x05	; 5
    35a4:	fc 01       	movw	r30, r24
    35a6:	24 83       	std	Z+4, r18	; 0x04
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	92 e0       	ldi	r25, 0x02	; 2
    35ac:	21 e0       	ldi	r18, 0x01	; 1
    35ae:	fc 01       	movw	r30, r24
    35b0:	26 83       	std	Z+6, r18	; 0x06
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	92 e0       	ldi	r25, 0x02	; 2
    35b6:	23 e0       	ldi	r18, 0x03	; 3
    35b8:	fc 01       	movw	r30, r24
    35ba:	22 83       	std	Z+2, r18	; 0x02
    35bc:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gAdcChannel>
    35c0:	88 23       	and	r24, r24
    35c2:	51 f4       	brne	.+20     	; 0x35d8 <adcSetupForNextChannel+0x42>
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	92 e0       	ldi	r25, 0x02	; 2
    35c8:	fc 01       	movw	r30, r24
    35ca:	10 a2       	std	Z+32, r1	; 0x20
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	92 e0       	ldi	r25, 0x02	; 2
    35d0:	20 e1       	ldi	r18, 0x10	; 16
    35d2:	fc 01       	movw	r30, r24
    35d4:	21 a3       	std	Z+33, r18	; 0x21
    35d6:	2a c0       	rjmp	.+84     	; 0x362c <adcSetupForNextChannel+0x96>
    35d8:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gAdcChannel>
    35dc:	81 30       	cpi	r24, 0x01	; 1
    35de:	49 f4       	brne	.+18     	; 0x35f2 <adcSetupForNextChannel+0x5c>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	92 e0       	ldi	r25, 0x02	; 2
    35e4:	fc 01       	movw	r30, r24
    35e6:	10 a2       	std	Z+32, r1	; 0x20
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	92 e0       	ldi	r25, 0x02	; 2
    35ec:	fc 01       	movw	r30, r24
    35ee:	11 a2       	std	Z+33, r1	; 0x21
    35f0:	1d c0       	rjmp	.+58     	; 0x362c <adcSetupForNextChannel+0x96>
    35f2:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gAdcChannel>
    35f6:	82 30       	cpi	r24, 0x02	; 2
    35f8:	59 f4       	brne	.+22     	; 0x3610 <adcSetupForNextChannel+0x7a>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	92 e0       	ldi	r25, 0x02	; 2
    35fe:	21 e0       	ldi	r18, 0x01	; 1
    3600:	fc 01       	movw	r30, r24
    3602:	20 a3       	std	Z+32, r18	; 0x20
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	92 e0       	ldi	r25, 0x02	; 2
    3608:	20 e4       	ldi	r18, 0x40	; 64
    360a:	fc 01       	movw	r30, r24
    360c:	21 a3       	std	Z+33, r18	; 0x21
    360e:	0e c0       	rjmp	.+28     	; 0x362c <adcSetupForNextChannel+0x96>
    3610:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gAdcChannel>
    3614:	83 30       	cpi	r24, 0x03	; 3
    3616:	51 f4       	brne	.+20     	; 0x362c <adcSetupForNextChannel+0x96>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	92 e0       	ldi	r25, 0x02	; 2
    361c:	21 e0       	ldi	r18, 0x01	; 1
    361e:	fc 01       	movw	r30, r24
    3620:	20 a3       	std	Z+32, r18	; 0x20
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	92 e0       	ldi	r25, 0x02	; 2
    3626:	28 e4       	ldi	r18, 0x48	; 72
    3628:	fc 01       	movw	r30, r24
    362a:	21 a3       	std	Z+33, r18	; 0x21
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	92 e0       	ldi	r25, 0x02	; 2
    3630:	21 e0       	ldi	r18, 0x01	; 1
    3632:	fc 01       	movw	r30, r24
    3634:	20 83       	st	Z, r18
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <gAdcDiscardSamples>
    363c:	00 00       	nop
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	08 95       	ret

00003644 <adcAmbientLightTestEnable>:

void adcAmbientLightTestEnable(bool bEnable)
{
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	1f 92       	push	r1
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	89 83       	std	Y+1, r24	; 0x01
	if((gAmbientLightTestEnabled == false) && (bEnable == true))
    3650:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <gAmbientLightTestEnabled>
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	89 27       	eor	r24, r25
    3658:	88 23       	and	r24, r24
    365a:	29 f0       	breq	.+10     	; 0x3666 <adcAmbientLightTestEnable+0x22>
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	88 23       	and	r24, r24
    3660:	11 f0       	breq	.+4      	; 0x3666 <adcAmbientLightTestEnable+0x22>
	{	/* starting the test */
		dspOn();
    3662:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <dspOn>
	}
	dspErase();
    3666:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <dspErase>
	
	gAmbientLightTestEnabled = bEnable;
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <gAmbientLightTestEnabled>
}
    3670:	00 00       	nop
    3672:	0f 90       	pop	r0
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	08 95       	ret

0000367a <beepInit>:
}

static void beepOn(void)
{
	PORTF.DIRSET = BeepPinMask;	/* Set pin as output */
}
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	80 ea       	ldi	r24, 0xA0	; 160
    3684:	96 e0       	ldi	r25, 0x06	; 6
    3686:	22 e0       	ldi	r18, 0x02	; 2
    3688:	fc 01       	movw	r30, r24
    368a:	26 83       	std	Z+6, r18	; 0x06
    368c:	0e 94 6d 1b 	call	0x36da	; 0x36da <beepOff>
    3690:	80 ea       	ldi	r24, 0xA0	; 160
    3692:	96 e0       	ldi	r25, 0x06	; 6
    3694:	fc 01       	movw	r30, r24
    3696:	11 8a       	std	Z+17, r1	; 0x11
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	9b e0       	ldi	r25, 0x0B	; 11
    369c:	22 e0       	ldi	r18, 0x02	; 2
    369e:	fc 01       	movw	r30, r24
    36a0:	20 83       	st	Z, r18
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	9b e0       	ldi	r25, 0x0B	; 11
    36a6:	23 e2       	ldi	r18, 0x23	; 35
    36a8:	fc 01       	movw	r30, r24
    36aa:	21 83       	std	Z+1, r18	; 0x01
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	9b e0       	ldi	r25, 0x0B	; 11
    36b0:	28 ee       	ldi	r18, 0xE8	; 232
    36b2:	33 e0       	ldi	r19, 0x03	; 3
    36b4:	fc 01       	movw	r30, r24
    36b6:	26 a3       	std	Z+38, r18	; 0x26
    36b8:	37 a3       	std	Z+39, r19	; 0x27
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	9b e0       	ldi	r25, 0x0B	; 11
    36be:	24 ef       	ldi	r18, 0xF4	; 244
    36c0:	31 e0       	ldi	r19, 0x01	; 1
    36c2:	fc 01       	movw	r30, r24
    36c4:	22 a7       	std	Z+42, r18	; 0x2a
    36c6:	33 a7       	std	Z+43, r19	; 0x2b
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	9b e0       	ldi	r25, 0x0B	; 11
    36cc:	fc 01       	movw	r30, r24
    36ce:	10 a2       	std	Z+32, r1	; 0x20
    36d0:	11 a2       	std	Z+33, r1	; 0x21
    36d2:	00 00       	nop
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	08 95       	ret

000036da <beepOff>:

static void beepOff(void)
{
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = BeepPinMask;	/* Set pin as input */
    36e2:	80 ea       	ldi	r24, 0xA0	; 160
    36e4:	96 e0       	ldi	r25, 0x06	; 6
    36e6:	22 e0       	ldi	r18, 0x02	; 2
    36e8:	fc 01       	movw	r30, r24
    36ea:	22 83       	std	Z+2, r18	; 0x02
}
    36ec:	00 00       	nop
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	08 95       	ret

000036f4 <CCPWrite>:
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
	uint8_t clkEnabled = OSC.CTRL & oscSel;
	return clkEnabled;
}
    36f4:	0f 93       	push	r16
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	00 d0       	rcall	.+0      	; 0x36fc <CCPWrite+0x8>
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <CCPWrite+0xa>
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	8c 83       	std	Y+4, r24	; 0x04
    3704:	9d 83       	std	Y+5, r25	; 0x05
    3706:	6e 83       	std	Y+6, r22	; 0x06
    3708:	8f e3       	ldi	r24, 0x3F	; 63
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	fc 01       	movw	r30, r24
    370e:	80 81       	ld	r24, Z
    3710:	8b 83       	std	Y+3, r24	; 0x03
    3712:	f8 94       	cli
    3714:	8c 81       	ldd	r24, Y+4	; 0x04
    3716:	9d 81       	ldd	r25, Y+5	; 0x05
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	9a 83       	std	Y+2, r25	; 0x02
    371c:	8b e3       	ldi	r24, 0x3B	; 59
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	fc 01       	movw	r30, r24
    3722:	10 82       	st	Z, r1
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	9a 81       	ldd	r25, Y+2	; 0x02
    3728:	2e 81       	ldd	r18, Y+6	; 0x06
    372a:	fc 01       	movw	r30, r24
    372c:	08 ed       	ldi	r16, 0xD8	; 216
    372e:	04 bf       	out	0x34, r16	; 52
    3730:	20 83       	st	Z, r18
    3732:	8f e3       	ldi	r24, 0x3F	; 63
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	2b 81       	ldd	r18, Y+3	; 0x03
    3738:	fc 01       	movw	r30, r24
    373a:	20 83       	st	Z, r18
    373c:	00 00       	nop
    373e:	26 96       	adiw	r28, 0x06	; 6
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	0f 91       	pop	r16
    374a:	08 95       	ret

0000374c <CLKSYS_PLL_Config>:
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	1f 92       	push	r1
    3752:	1f 92       	push	r1
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	6a 83       	std	Y+2, r22	; 0x02
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	8f 71       	andi	r24, 0x1F	; 31
    3760:	8a 83       	std	Y+2, r24	; 0x02
    3762:	80 e5       	ldi	r24, 0x50	; 80
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	39 81       	ldd	r19, Y+1	; 0x01
    3768:	2a 81       	ldd	r18, Y+2	; 0x02
    376a:	23 2b       	or	r18, r19
    376c:	fc 01       	movw	r30, r24
    376e:	25 83       	std	Z+5, r18	; 0x05
    3770:	00 00       	nop
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	08 95       	ret

0000377c <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    377c:	cf 93       	push	r28
    377e:	df 93       	push	r29
    3780:	00 d0       	rcall	.+0      	; 0x3782 <CLKSYS_Prescalers_Config+0x6>
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	8a 83       	std	Y+2, r24	; 0x02
    3788:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	89 2b       	or	r24, r25
    3790:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
    3792:	69 81       	ldd	r22, Y+1	; 0x01
    3794:	81 e4       	ldi	r24, 0x41	; 65
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <CCPWrite>
}
    379c:	00 00       	nop
    379e:	23 96       	adiw	r28, 0x03	; 3
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	08 95       	ret

000037aa <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	1f 92       	push	r1
    37b0:	1f 92       	push	r1
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    37b8:	80 e4       	ldi	r24, 0x40	; 64
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	fc 01       	movw	r30, r24
    37be:	80 81       	ld	r24, Z
    37c0:	98 2f       	mov	r25, r24
    37c2:	98 7f       	andi	r25, 0xF8	; 248
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	89 2b       	or	r24, r25
    37c8:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
    37ca:	69 81       	ldd	r22, Y+1	; 0x01
    37cc:	80 e4       	ldi	r24, 0x40	; 64
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    37d4:	80 e4       	ldi	r24, 0x40	; 64
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	fc 01       	movw	r30, r24
    37da:	90 81       	ld	r25, Z
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	89 23       	and	r24, r25
    37e0:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	08 95       	ret

000037ee <dspSetContrast>:
	
	for (i = 0; i < num_pages; i++)
	{
		dspWritePage(pixelData, page + i, x, width);
	}
}
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	1f 92       	push	r1
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	81 e8       	ldi	r24, 0x81	; 129
    37fc:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3806:	00 00       	nop
    3808:	0f 90       	pop	r0
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	08 95       	ret

00003810 <dspInverseEnable>:
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	87 ea       	ldi	r24, 0xA7	; 167
    381a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    381e:	00 00       	nop
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	08 95       	ret

00003826 <dspInverseDisable>:
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	86 ea       	ldi	r24, 0xA6	; 166
    3830:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3834:	00 00       	nop
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <dspSetStartLine>:
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	1f 92       	push	r1
    3842:	1f 92       	push	r1
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	8a 83       	std	Y+2, r24	; 0x02
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	8f 73       	andi	r24, 0x3F	; 63
    384e:	8a 83       	std	Y+2, r24	; 0x02
    3850:	80 e4       	ldi	r24, 0x40	; 64
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	99 81       	ldd	r25, Y+1	; 0x01
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	89 2b       	or	r24, r25
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3862:	00 00       	nop
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	08 95       	ret

0000386e <dspWriteByteToDisplay>:
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	00 d0       	rcall	.+0      	; 0x3874 <dspWriteByteToDisplay+0x6>
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	6a 83       	std	Y+2, r22	; 0x02
    387c:	4b 83       	std	Y+3, r20	; 0x03
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	0e 94 4f 1c 	call	0x389e	; 0x389e <dspSetPage>
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <dspSetColumn>
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <dspWriteData>
    3890:	00 00       	nop
    3892:	23 96       	adiw	r28, 0x03	; 3
    3894:	cd bf       	out	0x3d, r28	; 61
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	08 95       	ret

0000389e <dspSetPage>:
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	1f 92       	push	r1
    38a4:	1f 92       	push	r1
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	8a 83       	std	Y+2, r24	; 0x02
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	87 70       	andi	r24, 0x07	; 7
    38b0:	8a 83       	std	Y+2, r24	; 0x02
    38b2:	80 eb       	ldi	r24, 0xB0	; 176
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	99 81       	ldd	r25, Y+1	; 0x01
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	89 2b       	or	r24, r25
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    38c4:	00 00       	nop
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
    38ce:	08 95       	ret

000038d0 <dspSetColumn>:
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	1f 92       	push	r1
    38d6:	1f 92       	push	r1
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	8a 83       	std	Y+2, r24	; 0x02
    38de:	8a 81       	ldd	r24, Y+2	; 0x02
    38e0:	8f 77       	andi	r24, 0x7F	; 127
    38e2:	8a 83       	std	Y+2, r24	; 0x02
    38e4:	80 e1       	ldi	r24, 0x10	; 16
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	82 95       	swap	r24
    38ec:	8f 70       	andi	r24, 0x0F	; 15
    38ee:	99 81       	ldd	r25, Y+1	; 0x01
    38f0:	89 2b       	or	r24, r25
    38f2:	89 83       	std	Y+1, r24	; 0x01
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    38fa:	19 82       	std	Y+1, r1	; 0x01
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	98 2f       	mov	r25, r24
    3900:	9f 70       	andi	r25, 0x0F	; 15
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	89 2b       	or	r24, r25
    3906:	89 83       	std	Y+1, r24	; 0x01
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    390e:	00 00       	nop
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	08 95       	ret

0000391a <dspResetHold>:
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	80 ea       	ldi	r24, 0xA0	; 160
    3924:	96 e0       	ldi	r25, 0x06	; 6
    3926:	24 e3       	ldi	r18, 0x34	; 52
    3928:	fc 01       	movw	r30, r24
    392a:	26 83       	std	Z+6, r18	; 0x06
    392c:	80 ea       	ldi	r24, 0xA0	; 160
    392e:	96 e0       	ldi	r25, 0x06	; 6
    3930:	28 ec       	ldi	r18, 0xC8	; 200
    3932:	fc 01       	movw	r30, r24
    3934:	25 83       	std	Z+5, r18	; 0x05
    3936:	80 ea       	ldi	r24, 0xA0	; 160
    3938:	96 e0       	ldi	r25, 0x06	; 6
    393a:	2c ef       	ldi	r18, 0xFC	; 252
    393c:	fc 01       	movw	r30, r24
    393e:	21 83       	std	Z+1, r18	; 0x01
    3940:	00 00       	nop
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	08 95       	ret

00003948 <dspInit>:
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	96 e0       	ldi	r25, 0x06	; 6
    3954:	fc 01       	movw	r30, r24
    3956:	10 8a       	std	Z+16, r1	; 0x10
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	96 e0       	ldi	r25, 0x06	; 6
    395c:	fc 01       	movw	r30, r24
    395e:	11 8a       	std	Z+17, r1	; 0x11
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	96 e0       	ldi	r25, 0x06	; 6
    3964:	fc 01       	movw	r30, r24
    3966:	12 8a       	std	Z+18, r1	; 0x12
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	96 e0       	ldi	r25, 0x06	; 6
    396c:	fc 01       	movw	r30, r24
    396e:	13 8a       	std	Z+19, r1	; 0x13
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	96 e0       	ldi	r25, 0x06	; 6
    3974:	fc 01       	movw	r30, r24
    3976:	14 8a       	std	Z+20, r1	; 0x14
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	96 e0       	ldi	r25, 0x06	; 6
    397c:	fc 01       	movw	r30, r24
    397e:	15 8a       	std	Z+21, r1	; 0x15
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	96 e0       	ldi	r25, 0x06	; 6
    3984:	fc 01       	movw	r30, r24
    3986:	16 8a       	std	Z+22, r1	; 0x16
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	96 e0       	ldi	r25, 0x06	; 6
    398c:	fc 01       	movw	r30, r24
    398e:	17 8a       	std	Z+23, r1	; 0x17
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	96 e0       	ldi	r25, 0x06	; 6
    3994:	fc 01       	movw	r30, r24
    3996:	14 82       	std	Z+4, r1	; 0x04
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	96 e0       	ldi	r25, 0x06	; 6
    399c:	2f ef       	ldi	r18, 0xFF	; 255
    399e:	fc 01       	movw	r30, r24
    39a0:	20 83       	st	Z, r18
    39a2:	80 ea       	ldi	r24, 0xA0	; 160
    39a4:	96 e0       	ldi	r25, 0x06	; 6
    39a6:	24 e2       	ldi	r18, 0x24	; 36
    39a8:	fc 01       	movw	r30, r24
    39aa:	26 83       	std	Z+6, r18	; 0x06
    39ac:	80 ea       	ldi	r24, 0xA0	; 160
    39ae:	96 e0       	ldi	r25, 0x06	; 6
    39b0:	28 ed       	ldi	r18, 0xD8	; 216
    39b2:	fc 01       	movw	r30, r24
    39b4:	25 83       	std	Z+5, r18	; 0x05
    39b6:	80 ea       	ldi	r24, 0xA0	; 160
    39b8:	96 e0       	ldi	r25, 0x06	; 6
    39ba:	2c ef       	ldi	r18, 0xFC	; 252
    39bc:	fc 01       	movw	r30, r24
    39be:	21 83       	std	Z+1, r18	; 0x01
    39c0:	80 ea       	ldi	r24, 0xA0	; 160
    39c2:	96 e0       	ldi	r25, 0x06	; 6
    39c4:	fc 01       	movw	r30, r24
    39c6:	12 8a       	std	Z+18, r1	; 0x12
    39c8:	80 ea       	ldi	r24, 0xA0	; 160
    39ca:	96 e0       	ldi	r25, 0x06	; 6
    39cc:	fc 01       	movw	r30, r24
    39ce:	13 8a       	std	Z+19, r1	; 0x13
    39d0:	80 ea       	ldi	r24, 0xA0	; 160
    39d2:	96 e0       	ldi	r25, 0x06	; 6
    39d4:	fc 01       	movw	r30, r24
    39d6:	14 8a       	std	Z+20, r1	; 0x14
    39d8:	80 ea       	ldi	r24, 0xA0	; 160
    39da:	96 e0       	ldi	r25, 0x06	; 6
    39dc:	fc 01       	movw	r30, r24
    39de:	15 8a       	std	Z+21, r1	; 0x15
    39e0:	80 ea       	ldi	r24, 0xA0	; 160
    39e2:	96 e0       	ldi	r25, 0x06	; 6
    39e4:	fc 01       	movw	r30, r24
    39e6:	16 8a       	std	Z+22, r1	; 0x16
    39e8:	80 ea       	ldi	r24, 0xA0	; 160
    39ea:	96 e0       	ldi	r25, 0x06	; 6
    39ec:	fc 01       	movw	r30, r24
    39ee:	17 8a       	std	Z+23, r1	; 0x17
    39f0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <initSsd1309>
    39f4:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <dspBlackWhiteHalf>
    39f8:	00 00       	nop
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	08 95       	ret

00003a00 <dspOn>:
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <dspPowerOnHighVoltage>
    3a0c:	8f ea       	ldi	r24, 0xAF	; 175
    3a0e:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a12:	0e 94 13 1c 	call	0x3826	; 0x3826 <dspInverseDisable>
    3a16:	00 00       	nop
    3a18:	df 91       	pop	r29
    3a1a:	cf 91       	pop	r28
    3a1c:	08 95       	ret

00003a1e <dspPowerOnHighVoltage>:
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	80 ea       	ldi	r24, 0xA0	; 160
    3a28:	96 e0       	ldi	r25, 0x06	; 6
    3a2a:	24 e0       	ldi	r18, 0x04	; 4
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	25 83       	std	Z+5, r18	; 0x05
    3a30:	00 00       	nop
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	08 95       	ret

00003a38 <dspOff>:
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	8e ea       	ldi	r24, 0xAE	; 174
    3a42:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a46:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <dspPowerOffHighVoltage>
    3a4a:	00 00       	nop
    3a4c:	df 91       	pop	r29
    3a4e:	cf 91       	pop	r28
    3a50:	08 95       	ret

00003a52 <dspPowerOffHighVoltage>:
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	80 ea       	ldi	r24, 0xA0	; 160
    3a5c:	96 e0       	ldi	r25, 0x06	; 6
    3a5e:	24 e0       	ldi	r18, 0x04	; 4
    3a60:	fc 01       	movw	r30, r24
    3a62:	26 83       	std	Z+6, r18	; 0x06
    3a64:	00 00       	nop
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	08 95       	ret

00003a6c <initSsd1309>:
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	1f 92       	push	r1
    3a72:	1f 92       	push	r1
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	88 ea       	ldi	r24, 0xA8	; 168
    3a7a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a7e:	8f e1       	ldi	r24, 0x1F	; 31
    3a80:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a84:	83 ed       	ldi	r24, 0xD3	; 211
    3a86:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a90:	80 e2       	ldi	r24, 0x20	; 32
    3a92:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3a9c:	80 ea       	ldi	r24, 0xA0	; 160
    3a9e:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3aa2:	80 ec       	ldi	r24, 0xC0	; 192
    3aa4:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3aa8:	8a ed       	ldi	r24, 0xDA	; 218
    3aaa:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3aae:	82 e1       	ldi	r24, 0x12	; 18
    3ab0:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ab4:	8f ef       	ldi	r24, 0xFF	; 255
    3ab6:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <dspSetContrast>
    3aba:	85 ed       	ldi	r24, 0xD5	; 213
    3abc:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ac0:	80 e8       	ldi	r24, 0x80	; 128
    3ac2:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ac6:	8b ed       	ldi	r24, 0xDB	; 219
    3ac8:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3acc:	80 e4       	ldi	r24, 0x40	; 64
    3ace:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ad2:	89 ed       	ldi	r24, 0xD9	; 217
    3ad4:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ad8:	81 ef       	ldi	r24, 0xF1	; 241
    3ada:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ade:	84 ea       	ldi	r24, 0xA4	; 164
    3ae0:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <dspWriteCommand>
    3ae4:	0e 94 13 1c 	call	0x3826	; 0x3826 <dspInverseDisable>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	0e 94 1e 1c 	call	0x383c	; 0x383c <dspSetStartLine>
    3aee:	19 82       	std	Y+1, r1	; 0x01
    3af0:	10 c0       	rjmp	.+32     	; 0x3b12 <initSsd1309+0xa6>
    3af2:	1a 82       	std	Y+2, r1	; 0x02
    3af4:	08 c0       	rjmp	.+16     	; 0x3b06 <initSsd1309+0x9a>
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	6a 81       	ldd	r22, Y+2	; 0x02
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	0e 94 37 1c 	call	0x386e	; 0x386e <dspWriteByteToDisplay>
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
    3b04:	8a 83       	std	Y+2, r24	; 0x02
    3b06:	8a 81       	ldd	r24, Y+2	; 0x02
    3b08:	88 23       	and	r24, r24
    3b0a:	ac f7       	brge	.-22     	; 0x3af6 <initSsd1309+0x8a>
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	8f 5f       	subi	r24, 0xFF	; 255
    3b10:	89 83       	std	Y+1, r24	; 0x01
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	84 30       	cpi	r24, 0x04	; 4
    3b16:	68 f3       	brcs	.-38     	; 0x3af2 <initSsd1309+0x86>
    3b18:	00 00       	nop
    3b1a:	0f 90       	pop	r0
    3b1c:	0f 90       	pop	r0
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

00003b24 <dspWriteData>:
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	1f 92       	push	r1
    3b2a:	cd b7       	in	r28, 0x3d	; 61
    3b2c:	de b7       	in	r29, 0x3e	; 62
    3b2e:	89 83       	std	Y+1, r24	; 0x01
    3b30:	80 ea       	ldi	r24, 0xA0	; 160
    3b32:	96 e0       	ldi	r25, 0x06	; 6
    3b34:	20 e2       	ldi	r18, 0x20	; 32
    3b36:	fc 01       	movw	r30, r24
    3b38:	25 83       	std	Z+5, r18	; 0x05
    3b3a:	80 ea       	ldi	r24, 0xA0	; 160
    3b3c:	96 e0       	ldi	r25, 0x06	; 6
    3b3e:	28 e4       	ldi	r18, 0x48	; 72
    3b40:	fc 01       	movw	r30, r24
    3b42:	26 83       	std	Z+6, r18	; 0x06
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	96 e0       	ldi	r25, 0x06	; 6
    3b48:	29 81       	ldd	r18, Y+1	; 0x01
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	24 83       	std	Z+4, r18	; 0x04
    3b4e:	80 ea       	ldi	r24, 0xA0	; 160
    3b50:	96 e0       	ldi	r25, 0x06	; 6
    3b52:	20 e4       	ldi	r18, 0x40	; 64
    3b54:	fc 01       	movw	r30, r24
    3b56:	25 83       	std	Z+5, r18	; 0x05
    3b58:	80 ea       	ldi	r24, 0xA0	; 160
    3b5a:	96 e0       	ldi	r25, 0x06	; 6
    3b5c:	28 e0       	ldi	r18, 0x08	; 8
    3b5e:	fc 01       	movw	r30, r24
    3b60:	25 83       	std	Z+5, r18	; 0x05
    3b62:	00 00       	nop
    3b64:	0f 90       	pop	r0
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	08 95       	ret

00003b6c <dspWriteCommand>:
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	1f 92       	push	r1
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	89 83       	std	Y+1, r24	; 0x01
    3b78:	80 ea       	ldi	r24, 0xA0	; 160
    3b7a:	96 e0       	ldi	r25, 0x06	; 6
    3b7c:	20 e2       	ldi	r18, 0x20	; 32
    3b7e:	fc 01       	movw	r30, r24
    3b80:	26 83       	std	Z+6, r18	; 0x06
    3b82:	80 ea       	ldi	r24, 0xA0	; 160
    3b84:	96 e0       	ldi	r25, 0x06	; 6
    3b86:	28 e4       	ldi	r18, 0x48	; 72
    3b88:	fc 01       	movw	r30, r24
    3b8a:	26 83       	std	Z+6, r18	; 0x06
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	96 e0       	ldi	r25, 0x06	; 6
    3b90:	29 81       	ldd	r18, Y+1	; 0x01
    3b92:	fc 01       	movw	r30, r24
    3b94:	24 83       	std	Z+4, r18	; 0x04
    3b96:	80 ea       	ldi	r24, 0xA0	; 160
    3b98:	96 e0       	ldi	r25, 0x06	; 6
    3b9a:	20 e4       	ldi	r18, 0x40	; 64
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	25 83       	std	Z+5, r18	; 0x05
    3ba0:	80 ea       	ldi	r24, 0xA0	; 160
    3ba2:	96 e0       	ldi	r25, 0x06	; 6
    3ba4:	28 e0       	ldi	r18, 0x08	; 8
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	25 83       	std	Z+5, r18	; 0x05
    3baa:	00 00       	nop
    3bac:	0f 90       	pop	r0
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	08 95       	ret

00003bb4 <dspBlackWhiteHalf>:
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	27 97       	sbiw	r28, 0x07	; 7
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	de bf       	out	0x3e, r29	; 62
    3bc2:	80 e4       	ldi	r24, 0x40	; 64
    3bc4:	8a 83       	std	Y+2, r24	; 0x02
    3bc6:	1b 82       	std	Y+3, r1	; 0x03
    3bc8:	8f ef       	ldi	r24, 0xFF	; 255
    3bca:	8c 83       	std	Y+4, r24	; 0x04
    3bcc:	84 e0       	ldi	r24, 0x04	; 4
    3bce:	8d 83       	std	Y+5, r24	; 0x05
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	86 95       	lsr	r24
    3bd4:	86 95       	lsr	r24
    3bd6:	86 95       	lsr	r24
    3bd8:	8e 83       	std	Y+6, r24	; 0x06
    3bda:	80 e4       	ldi	r24, 0x40	; 64
    3bdc:	8f 83       	std	Y+7, r24	; 0x07
    3bde:	19 82       	std	Y+1, r1	; 0x01
    3be0:	0c c0       	rjmp	.+24     	; 0x3bfa <dspBlackWhiteHalf+0x46>
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	89 0f       	add	r24, r25
    3be8:	2f 81       	ldd	r18, Y+7	; 0x07
    3bea:	4a 81       	ldd	r20, Y+2	; 0x02
    3bec:	68 2f       	mov	r22, r24
    3bee:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf0:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <dspWritePage>
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	8f 5f       	subi	r24, 0xFF	; 255
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	99 81       	ldd	r25, Y+1	; 0x01
    3bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfe:	98 17       	cp	r25, r24
    3c00:	80 f3       	brcs	.-32     	; 0x3be2 <dspBlackWhiteHalf+0x2e>
    3c02:	00 00       	nop
    3c04:	27 96       	adiw	r28, 0x07	; 7
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	08 95       	ret

00003c10 <dspErase>:
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	27 97       	sbiw	r28, 0x07	; 7
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	1a 82       	std	Y+2, r1	; 0x02
    3c20:	1b 82       	std	Y+3, r1	; 0x03
    3c22:	1c 82       	std	Y+4, r1	; 0x04
    3c24:	84 e0       	ldi	r24, 0x04	; 4
    3c26:	8d 83       	std	Y+5, r24	; 0x05
    3c28:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2a:	86 95       	lsr	r24
    3c2c:	86 95       	lsr	r24
    3c2e:	86 95       	lsr	r24
    3c30:	8e 83       	std	Y+6, r24	; 0x06
    3c32:	80 e8       	ldi	r24, 0x80	; 128
    3c34:	8f 83       	std	Y+7, r24	; 0x07
    3c36:	19 82       	std	Y+1, r1	; 0x01
    3c38:	0c c0       	rjmp	.+24     	; 0x3c52 <dspErase+0x42>
    3c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	89 0f       	add	r24, r25
    3c40:	2f 81       	ldd	r18, Y+7	; 0x07
    3c42:	4a 81       	ldd	r20, Y+2	; 0x02
    3c44:	68 2f       	mov	r22, r24
    3c46:	8c 81       	ldd	r24, Y+4	; 0x04
    3c48:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <dspWritePage>
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	8f 5f       	subi	r24, 0xFF	; 255
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	99 81       	ldd	r25, Y+1	; 0x01
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	98 17       	cp	r25, r24
    3c58:	80 f3       	brcs	.-32     	; 0x3c3a <dspErase+0x2a>
    3c5a:	00 00       	nop
    3c5c:	27 96       	adiw	r28, 0x07	; 7
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	08 95       	ret

00003c68 <dspWritePage>:

static void dspWritePage(uint8_t pixelData, uint8_t page,uint8_t column, uint8_t width)
{
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <dspWritePage+0x6>
    3c6e:	1f 92       	push	r1
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	89 83       	std	Y+1, r24	; 0x01
    3c76:	6a 83       	std	Y+2, r22	; 0x02
    3c78:	4b 83       	std	Y+3, r20	; 0x03
    3c7a:	2c 83       	std	Y+4, r18	; 0x04
	dspSetPage(page);
    3c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7e:	0e 94 4f 1c 	call	0x389e	; 0x389e <dspSetPage>
	dspSetColumn(column);
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <dspSetColumn>

	do 
	{
		dspWriteData(pixelData);
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <dspWriteData>
	} while (--width);
    3c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c90:	81 50       	subi	r24, 0x01	; 1
    3c92:	8c 83       	std	Y+4, r24	; 0x04
    3c94:	8c 81       	ldd	r24, Y+4	; 0x04
    3c96:	88 23       	and	r24, r24
    3c98:	b9 f7       	brne	.-18     	; 0x3c88 <dspWritePage+0x20>
}
    3c9a:	00 00       	nop
    3c9c:	24 96       	adiw	r28, 0x04	; 4
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	08 95       	ret

00003ca8 <esfInit>:
static inline void CS_Flash_Disable(void)		{PORTC.OUTSET = PIN4_bm;	/* de-assert CS pin (active low) */}



void esfInit(void)
{
    3ca8:	cf 93       	push	r28
    3caa:	df 93       	push	r29
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
	/* Configure GPIO for external flash write-protect pin */
	PORTD.DIRSET = PIN4_bm;       /* /WP */
    3cb0:	80 e6       	ldi	r24, 0x60	; 96
    3cb2:	96 e0       	ldi	r25, 0x06	; 6
    3cb4:	20 e1       	ldi	r18, 0x10	; 16
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = PIN4_bm;			/* de-assert /WP pin (active low) */
    3cba:	80 e6       	ldi	r24, 0x60	; 96
    3cbc:	96 e0       	ldi	r25, 0x06	; 6
    3cbe:	20 e1       	ldi	r18, 0x10	; 16
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	25 83       	std	Z+5, r18	; 0x05

	/* request erase the first Flash sector before the test starts */
	gCheckForFlashEraseNextSector = true;
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	80 93 35 23 	sts	0x2335, r24	; 0x802335 <gCheckForFlashEraseNextSector>
}
    3cca:	00 00       	nop
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	08 95       	ret

00003cd2 <esfTestRestart>:
uint32_t glastSequenceCountWrittenToFlash;
uint32_t externalFlashMemSuccessCount;
uint32_t externalFlashMemFailedCount;

void esfTestRestart(void)
{
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
	externalFlashMemSuccessCount = 0;
    3cda:	10 92 36 23 	sts	0x2336, r1	; 0x802336 <externalFlashMemSuccessCount>
    3cde:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <externalFlashMemSuccessCount+0x1>
    3ce2:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <externalFlashMemSuccessCount+0x2>
    3ce6:	10 92 39 23 	sts	0x2339, r1	; 0x802339 <externalFlashMemSuccessCount+0x3>
	externalFlashMemFailedCount = 0;
    3cea:	10 92 3b 23 	sts	0x233B, r1	; 0x80233b <externalFlashMemFailedCount>
    3cee:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <externalFlashMemFailedCount+0x1>
    3cf2:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <externalFlashMemFailedCount+0x2>
    3cf6:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <externalFlashMemFailedCount+0x3>
	glastSequenceCountWrittenToFlash = 0;
    3cfa:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <glastSequenceCountWrittenToFlash>
    3cfe:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <glastSequenceCountWrittenToFlash+0x1>
    3d02:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <glastSequenceCountWrittenToFlash+0x2>
    3d06:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <glastSequenceCountWrittenToFlash+0x3>
}
    3d0a:	00 00       	nop
    3d0c:	df 91       	pop	r29
    3d0e:	cf 91       	pop	r28
    3d10:	08 95       	ret

00003d12 <hmiI2cInit>:

/** Initialise the I2C bus for communication with ICs on the HMI internal bus
	\return Nothing
*/   
void hmiI2cInit(void)
{
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
	/* Configuration of I2C peripheral overrides the normal port pin function */
	/* M-SDA */
	/* M-SCL */
	
	
	TWIE.MASTER.CTRLA = 0;
    3d1a:	80 ea       	ldi	r24, 0xA0	; 160
    3d1c:	94 e0       	ldi	r25, 0x04	; 4
    3d1e:	fc 01       	movw	r30, r24
    3d20:	11 82       	std	Z+1, r1	; 0x01
	gHmiI2c.pInterface = &TWIE;
    3d22:	80 ea       	ldi	r24, 0xA0	; 160
    3d24:	94 e0       	ldi	r25, 0x04	; 4
    3d26:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <gHmiI2c>
    3d2a:	90 93 48 23 	sts	0x2348, r25	; 0x802348 <gHmiI2c+0x1>
	TWIE.MASTER.CTRLA = TWI_MASTER_INTLVL_LO_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
    3d2e:	80 ea       	ldi	r24, 0xA0	; 160
    3d30:	94 e0       	ldi	r25, 0x04	; 4
    3d32:	28 e7       	ldi	r18, 0x78	; 120
    3d34:	fc 01       	movw	r30, r24
    3d36:	21 83       	std	Z+1, r18	; 0x01
	
	/* Baud-Setting =((gdwCpuFrequency /(2 * desired-baudrate)) - 5) */
	TWIE.MASTER.BAUD = gdwBaudSetting;
    3d38:	20 ea       	ldi	r18, 0xA0	; 160
    3d3a:	34 e0       	ldi	r19, 0x04	; 4
    3d3c:	83 e2       	ldi	r24, 0x23	; 35
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a0 e0       	ldi	r26, 0x00	; 0
    3d42:	b0 e0       	ldi	r27, 0x00	; 0
    3d44:	f9 01       	movw	r30, r18
    3d46:	85 83       	std	Z+5, r24	; 0x05
	TWIE.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3d48:	80 ea       	ldi	r24, 0xA0	; 160
    3d4a:	94 e0       	ldi	r25, 0x04	; 4
    3d4c:	21 e0       	ldi	r18, 0x01	; 1
    3d4e:	fc 01       	movw	r30, r24
    3d50:	24 83       	std	Z+4, r18	; 0x04

	gHmiI2c.cResult = HmiI2cResultUnknown;	/* indicate a transaction is not finished */
    3d52:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <gHmiI2c+0xc>
	gHmiI2c.cStatus = HmiI2cReady;
    3d56:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <gHmiI2c+0xb>
}
    3d5a:	00 00       	nop
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	08 95       	ret

00003d62 <hmiI2cReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool hmiI2cReady(void)
{
    3d62:	ef 92       	push	r14
    3d64:	ff 92       	push	r15
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	25 97       	sbiw	r28, 0x05	; 5
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	de bf       	out	0x3e, r29	; 62
	/* Restart the I2C peripheral if an error appears to be stopping communication */
	if(gMarkLastHmiI2cActivity > gdwSecondsAlive)
    3d78:	20 91 54 23 	lds	r18, 0x2354	; 0x802354 <gMarkLastHmiI2cActivity>
    3d7c:	30 91 55 23 	lds	r19, 0x2355	; 0x802355 <gMarkLastHmiI2cActivity+0x1>
    3d80:	40 91 56 23 	lds	r20, 0x2356	; 0x802356 <gMarkLastHmiI2cActivity+0x2>
    3d84:	50 91 57 23 	lds	r21, 0x2357	; 0x802357 <gMarkLastHmiI2cActivity+0x3>
    3d88:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    3d8c:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    3d90:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    3d94:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    3d98:	82 17       	cp	r24, r18
    3d9a:	93 07       	cpc	r25, r19
    3d9c:	a4 07       	cpc	r26, r20
    3d9e:	b5 07       	cpc	r27, r21
    3da0:	80 f4       	brcc	.+32     	; 0x3dc2 <hmiI2cReady+0x60>
	{
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
    3da2:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    3da6:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    3daa:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    3dae:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    3db2:	80 93 54 23 	sts	0x2354, r24	; 0x802354 <gMarkLastHmiI2cActivity>
    3db6:	90 93 55 23 	sts	0x2355, r25	; 0x802355 <gMarkLastHmiI2cActivity+0x1>
    3dba:	a0 93 56 23 	sts	0x2356, r26	; 0x802356 <gMarkLastHmiI2cActivity+0x2>
    3dbe:	b0 93 57 23 	sts	0x2357, r27	; 0x802357 <gMarkLastHmiI2cActivity+0x3>
	}
	uint32_t dwDiff = gdwSecondsAlive -gMarkLastHmiI2cActivity;
    3dc2:	20 91 18 23 	lds	r18, 0x2318	; 0x802318 <gdwSecondsAlive>
    3dc6:	30 91 19 23 	lds	r19, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    3dca:	40 91 1a 23 	lds	r20, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    3dce:	50 91 1b 23 	lds	r21, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    3dd2:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <gMarkLastHmiI2cActivity>
    3dd6:	90 91 55 23 	lds	r25, 0x2355	; 0x802355 <gMarkLastHmiI2cActivity+0x1>
    3dda:	a0 91 56 23 	lds	r26, 0x2356	; 0x802356 <gMarkLastHmiI2cActivity+0x2>
    3dde:	b0 91 57 23 	lds	r27, 0x2357	; 0x802357 <gMarkLastHmiI2cActivity+0x3>
    3de2:	79 01       	movw	r14, r18
    3de4:	8a 01       	movw	r16, r20
    3de6:	e8 1a       	sub	r14, r24
    3de8:	f9 0a       	sbc	r15, r25
    3dea:	0a 0b       	sbc	r16, r26
    3dec:	1b 0b       	sbc	r17, r27
    3dee:	d8 01       	movw	r26, r16
    3df0:	c7 01       	movw	r24, r14
    3df2:	89 83       	std	Y+1, r24	; 0x01
    3df4:	9a 83       	std	Y+2, r25	; 0x02
    3df6:	ab 83       	std	Y+3, r26	; 0x03
    3df8:	bc 83       	std	Y+4, r27	; 0x04
	if(dwDiff > 5)
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
    3dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dfe:	ab 81       	ldd	r26, Y+3	; 0x03
    3e00:	bc 81       	ldd	r27, Y+4	; 0x04
    3e02:	06 97       	sbiw	r24, 0x06	; 6
    3e04:	a1 05       	cpc	r26, r1
    3e06:	b1 05       	cpc	r27, r1
    3e08:	90 f0       	brcs	.+36     	; 0x3e2e <hmiI2cReady+0xcc>
	{
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
    3e0a:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    3e0e:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    3e12:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    3e16:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    3e1a:	80 93 54 23 	sts	0x2354, r24	; 0x802354 <gMarkLastHmiI2cActivity>
    3e1e:	90 93 55 23 	sts	0x2355, r25	; 0x802355 <gMarkLastHmiI2cActivity+0x1>
    3e22:	a0 93 56 23 	sts	0x2356, r26	; 0x802356 <gMarkLastHmiI2cActivity+0x2>
    3e26:	b0 93 57 23 	sts	0x2357, r27	; 0x802357 <gMarkLastHmiI2cActivity+0x3>
		
		hmiI2cInit();
    3e2a:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <hmiI2cInit>
	}

	bool twi_status = (gHmiI2c.cStatus == HmiI2cReady);
    3e2e:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <gHmiI2c+0xb>
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	99 23       	and	r25, r25
    3e36:	09 f0       	breq	.+2      	; 0x3e3a <hmiI2cReady+0xd8>
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	8d 83       	std	Y+5, r24	; 0x05
	return twi_status;
    3e3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3e3e:	25 96       	adiw	r28, 0x05	; 5
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	ff 90       	pop	r15
    3e4e:	ef 90       	pop	r14
    3e50:	08 95       	ret

00003e52 <hmiI2cWrite>:
 *  \retval 
 */
void hmiI2cWrite(uint8_t cAddress
                     ,uint8_t *pcWriteData
                     ,uint8_t cCountOfBytesToWrite)
{
    3e52:	0f 93       	push	r16
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <hmiI2cWrite+0x8>
    3e5a:	1f 92       	push	r1
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	6a 83       	std	Y+2, r22	; 0x02
    3e64:	7b 83       	std	Y+3, r23	; 0x03
    3e66:	4c 83       	std	Y+4, r20	; 0x04
	hmiI2cWriteRead(cAddress, pcWriteData, cCountOfBytesToWrite, 0, 0);
    3e68:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6c:	00 e0       	ldi	r16, 0x00	; 0
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	4c 81       	ldd	r20, Y+4	; 0x04
    3e74:	bc 01       	movw	r22, r24
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <hmiI2cWriteRead>
}
    3e7c:	00 00       	nop
    3e7e:	24 96       	adiw	r28, 0x04	; 4
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	0f 91       	pop	r16
    3e8a:	08 95       	ret

00003e8c <hmiI2cWriteRead>:
void hmiI2cWriteRead(uint8_t cAddress,
                         uint8_t *pcWriteData,
                         uint8_t cCountOfBytesToWrite,
								 uint8_t *pcReadBuffer,
                         uint8_t cCountOfBytesToRead)
{
    3e8c:	0f 93       	push	r16
    3e8e:	1f 93       	push	r17
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    3e98:	27 97       	sbiw	r28, 0x07	; 7
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	6a 83       	std	Y+2, r22	; 0x02
    3ea2:	7b 83       	std	Y+3, r23	; 0x03
    3ea4:	4c 83       	std	Y+4, r20	; 0x04
    3ea6:	2d 83       	std	Y+5, r18	; 0x05
    3ea8:	3e 83       	std	Y+6, r19	; 0x06
    3eaa:	0f 83       	std	Y+7, r16	; 0x07
	/*Initiate transaction */
	gHmiI2c.cStatus = HmiI2cBusy;	/* indicate a transaction is in progress */
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <gHmiI2c+0xb>
	gHmiI2c.cResult = HmiI2cResultUnknown;	/* indicate a transaction is not finished */
    3eb2:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <gHmiI2c+0xc>

	gHmiI2c.cAddress = cAddress;
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <gHmiI2c+0x2>

	/* Note the start of the data to be written */
	gHmiI2c.pcWriteData = pcWriteData;
    3ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec0:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <gHmiI2c+0x3>
    3ec4:	90 93 4b 23 	sts	0x234B, r25	; 0x80234b <gHmiI2c+0x4>
	
	gHmiI2c.pcReadBuf = pcReadBuffer;
    3ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ecc:	80 93 4c 23 	sts	0x234C, r24	; 0x80234c <gHmiI2c+0x5>
    3ed0:	90 93 4d 23 	sts	0x234D, r25	; 0x80234d <gHmiI2c+0x6>

	gHmiI2c.cCountOfBytesToWrite = cCountOfBytesToWrite;
    3ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed6:	80 93 4e 23 	sts	0x234E, r24	; 0x80234e <gHmiI2c+0x7>
	gHmiI2c.cCountOfBytesToRead = cCountOfBytesToRead;
    3eda:	8f 81       	ldd	r24, Y+7	; 0x07
    3edc:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <gHmiI2c+0x8>
	gHmiI2c.cCountOfBytesRead = 0;
    3ee0:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <gHmiI2c+0xa>

	if(gHmiI2c.cCountOfBytesToWrite > 0) 
    3ee4:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <gHmiI2c+0x7>
    3ee8:	88 23       	and	r24, r24
    3eea:	59 f0       	breq	.+22     	; 0x3f02 <hmiI2cWriteRead+0x76>
	{	/* write request */
		/* send the START condition + Address +Write ('R/_W = 0') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressWrite(gHmiI2c.cAddress);
    3eec:	00 91 47 23 	lds	r16, 0x2347	; 0x802347 <gHmiI2c>
    3ef0:	10 91 48 23 	lds	r17, 0x2348	; 0x802348 <gHmiI2c+0x1>
    3ef4:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <gHmiI2c+0x2>
    3ef8:	0e 94 9f 20 	call	0x413e	; 0x413e <i2cFormatSlaveAddressWrite>
    3efc:	f8 01       	movw	r30, r16
    3efe:	86 83       	std	Z+6, r24	; 0x06
		/* send the START condition + Address +Read('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
	}
	else
	{}	/* Should never be a request which neither writes nor reads anything */
}
    3f00:	0e c0       	rjmp	.+28     	; 0x3f1e <hmiI2cWriteRead+0x92>
	if(gHmiI2c.cCountOfBytesToWrite > 0) 
	{	/* write request */
		/* send the START condition + Address +Write ('R/_W = 0') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressWrite(gHmiI2c.cAddress);
	}
	else if(gHmiI2c.cCountOfBytesToRead > 0) 
    3f02:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <gHmiI2c+0x8>
    3f06:	88 23       	and	r24, r24
    3f08:	51 f0       	breq	.+20     	; 0x3f1e <hmiI2cWriteRead+0x92>
	{	/* read request */
		/* send the START condition + Address +Read('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
    3f0a:	00 91 47 23 	lds	r16, 0x2347	; 0x802347 <gHmiI2c>
    3f0e:	10 91 48 23 	lds	r17, 0x2348	; 0x802348 <gHmiI2c+0x1>
    3f12:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <gHmiI2c+0x2>
    3f16:	0e 94 8a 20 	call	0x4114	; 0x4114 <i2cFormatSlaveAddressRead>
    3f1a:	f8 01       	movw	r30, r16
    3f1c:	86 83       	std	Z+6, r24	; 0x06
	}
	else
	{}	/* Should never be a request which neither writes nor reads anything */
}
    3f1e:	00 00       	nop
    3f20:	27 96       	adiw	r28, 0x07	; 7
    3f22:	cd bf       	out	0x3d, r28	; 61
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	1f 91       	pop	r17
    3f2c:	0f 91       	pop	r16
    3f2e:	08 95       	ret

00003f30 <__vector_46>:
 *  Check current status and calls the appropriate handler.
 *
 */
/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    3f30:	1f 92       	push	r1
    3f32:	0f 92       	push	r0
    3f34:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3f38:	0f 92       	push	r0
    3f3a:	11 24       	eor	r1, r1
    3f3c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3f40:	0f 92       	push	r0
    3f42:	2f 93       	push	r18
    3f44:	3f 93       	push	r19
    3f46:	4f 93       	push	r20
    3f48:	5f 93       	push	r21
    3f4a:	6f 93       	push	r22
    3f4c:	7f 93       	push	r23
    3f4e:	8f 93       	push	r24
    3f50:	9f 93       	push	r25
    3f52:	af 93       	push	r26
    3f54:	bf 93       	push	r27
    3f56:	ef 93       	push	r30
    3f58:	ff 93       	push	r31
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
    3f5e:	1f 92       	push	r1
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = gHmiI2c.pInterface->MASTER.STATUS;
    3f64:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    3f68:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	84 81       	ldd	r24, Z+4	; 0x04
    3f70:	89 83       	std	Y+1, r24	; 0x01
	
	if(currentStatus & (TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm))
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	88 2f       	mov	r24, r24
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	8c 70       	andi	r24, 0x0C	; 12
    3f7a:	99 27       	eor	r25, r25
    3f7c:	89 2b       	or	r24, r25
    3f7e:	19 f0       	breq	.+6      	; 0x3f86 <__vector_46+0x56>
	{	/* arbitration lost or bus error */
		hmiI2cArbitrationLostBusErrorHandler();
    3f80:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <hmiI2cArbitrationLostBusErrorHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
    3f84:	23 c0       	rjmp	.+70     	; 0x3fcc <__vector_46+0x9c>
	
	if(currentStatus & (TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm))
	{	/* arbitration lost or bus error */
		hmiI2cArbitrationLostBusErrorHandler();
	}
	else if(currentStatus & TWI_MASTER_WIF_bm) 
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	88 2f       	mov	r24, r24
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	80 74       	andi	r24, 0x40	; 64
    3f8e:	99 27       	eor	r25, r25
    3f90:	89 2b       	or	r24, r25
    3f92:	99 f0       	breq	.+38     	; 0x3fba <__vector_46+0x8a>
	{	/* write interrupt */
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
    3f94:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gdwSecondsAlive>
    3f98:	90 91 19 23 	lds	r25, 0x2319	; 0x802319 <gdwSecondsAlive+0x1>
    3f9c:	a0 91 1a 23 	lds	r26, 0x231A	; 0x80231a <gdwSecondsAlive+0x2>
    3fa0:	b0 91 1b 23 	lds	r27, 0x231B	; 0x80231b <gdwSecondsAlive+0x3>
    3fa4:	80 93 54 23 	sts	0x2354, r24	; 0x802354 <gMarkLastHmiI2cActivity>
    3fa8:	90 93 55 23 	sts	0x2355, r25	; 0x802355 <gMarkLastHmiI2cActivity+0x1>
    3fac:	a0 93 56 23 	sts	0x2356, r26	; 0x802356 <gMarkLastHmiI2cActivity+0x2>
    3fb0:	b0 93 57 23 	sts	0x2357, r27	; 0x802357 <gMarkLastHmiI2cActivity+0x3>
		
		hmiI2cWriteHandler();
    3fb4:	0e 94 27 20 	call	0x404e	; 0x404e <hmiI2cWriteHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
    3fb8:	09 c0       	rjmp	.+18     	; 0x3fcc <__vector_46+0x9c>
	{	/* write interrupt */
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
		
		hmiI2cWriteHandler();
	}	
	else if(currentStatus & TWI_MASTER_RIF_bm) 
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	88 23       	and	r24, r24
    3fbe:	1c f4       	brge	.+6      	; 0x3fc6 <__vector_46+0x96>
	{	/* read interrupt */
		hmiI2cReadHandler();
    3fc0:	0e 94 b1 20 	call	0x4162	; 0x4162 <hmiI2cReadHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
    3fc4:	03 c0       	rjmp	.+6      	; 0x3fcc <__vector_46+0x9c>
	{	/* read interrupt */
		hmiI2cReadHandler();
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
    3fc6:	86 e0       	ldi	r24, 0x06	; 6
    3fc8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <hmiI2cTransactionFinished>
	}
}
    3fcc:	00 00       	nop
    3fce:	0f 90       	pop	r0
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	ff 91       	pop	r31
    3fd6:	ef 91       	pop	r30
    3fd8:	bf 91       	pop	r27
    3fda:	af 91       	pop	r26
    3fdc:	9f 91       	pop	r25
    3fde:	8f 91       	pop	r24
    3fe0:	7f 91       	pop	r23
    3fe2:	6f 91       	pop	r22
    3fe4:	5f 91       	pop	r21
    3fe6:	4f 91       	pop	r20
    3fe8:	3f 91       	pop	r19
    3fea:	2f 91       	pop	r18
    3fec:	0f 90       	pop	r0
    3fee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3ff2:	0f 90       	pop	r0
    3ff4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3ff8:	0f 90       	pop	r0
    3ffa:	1f 90       	pop	r1
    3ffc:	18 95       	reti

00003ffe <hmiI2cArbitrationLostBusErrorHandler>:
 *
 *  Handles TWI responses to lost arbitration and bus error.
 *
 */
inline static void hmiI2cArbitrationLostBusErrorHandler(void)
{
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	1f 92       	push	r1
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = gHmiI2c.pInterface->MASTER.STATUS;
    4008:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    400c:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    4010:	fc 01       	movw	r30, r24
    4012:	84 81       	ldd	r24, Z+4	; 0x04
    4014:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if(currentStatus & TWI_MASTER_BUSERR_bm) 
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	88 2f       	mov	r24, r24
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	84 70       	andi	r24, 0x04	; 4
    401e:	99 27       	eor	r25, r25
    4020:	89 2b       	or	r24, r25
    4022:	21 f0       	breq	.+8      	; 0x402c <hmiI2cArbitrationLostBusErrorHandler+0x2e>
	{
		gHmiI2c.cResult = HmiI2cResultBusError;
    4024:	84 e0       	ldi	r24, 0x04	; 4
    4026:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <gHmiI2c+0xc>
    402a:	03 c0       	rjmp	.+6      	; 0x4032 <hmiI2cArbitrationLostBusErrorHandler+0x34>
	}
	/* If arbitration lost. */
	else 
	{
		gHmiI2c.cResult = HmiI2cResultArbitrationLost;
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <gHmiI2c+0xc>
	}

	/* Clear interrupt flag. */
	gHmiI2c.pInterface->MASTER.STATUS =(TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm);
    4032:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    4036:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    403a:	2c e0       	ldi	r18, 0x0C	; 12
    403c:	fc 01       	movw	r30, r24
    403e:	24 83       	std	Z+4, r18	; 0x04

	gHmiI2c.cStatus = HmiI2cReady;
    4040:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <gHmiI2c+0xb>
}
    4044:	00 00       	nop
    4046:	0f 90       	pop	r0
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	08 95       	ret

0000404e <hmiI2cWriteHandler>:
 *
 *  Handles TWI transactions(master write) and responses to(N)ACK.
 *
 */
inline static void hmiI2cWriteHandler(void)
{
    404e:	0f 93       	push	r16
    4050:	1f 93       	push	r17
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	1f 92       	push	r1
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
	if(gHmiI2c.pInterface->MASTER.STATUS & TWI_MASTER_RXACK_bm) 
    405c:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    4060:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    4064:	fc 01       	movw	r30, r24
    4066:	84 81       	ldd	r24, Z+4	; 0x04
    4068:	88 2f       	mov	r24, r24
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	80 71       	andi	r24, 0x10	; 16
    406e:	99 27       	eor	r25, r25
    4070:	89 2b       	or	r24, r25
    4072:	69 f0       	breq	.+26     	; 0x408e <hmiI2cWriteHandler+0x40>
	{	/* NOT acknowledged(NACK) by slave */
		/* cancel the transaction */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4074:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    4078:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    407c:	23 e0       	ldi	r18, 0x03	; 3
    407e:	fc 01       	movw	r30, r24
    4080:	23 83       	std	Z+3, r18	; 0x03
		gHmiI2c.cResult = HmiI2cResultNackReceived;
    4082:	85 e0       	ldi	r24, 0x05	; 5
    4084:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <gHmiI2c+0xc>
		gHmiI2c.cStatus = HmiI2cReady;
    4088:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <gHmiI2c+0xb>
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    408c:	3c c0       	rjmp	.+120    	; 0x4106 <hmiI2cWriteHandler+0xb8>
		/* cancel the transaction */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		gHmiI2c.cResult = HmiI2cResultNackReceived;
		gHmiI2c.cStatus = HmiI2cReady;
	}
	else if(gHmiI2c.cCountOfBytesToWrite != 0) 
    408e:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <gHmiI2c+0x7>
    4092:	88 23       	and	r24, r24
    4094:	e9 f0       	breq	.+58     	; 0x40d0 <hmiI2cWriteHandler+0x82>
	{	/* more data to write */
		/* send next byte */
		gHmiI2c.cCountOfBytesToWrite--;
    4096:	80 91 4e 23 	lds	r24, 0x234E	; 0x80234e <gHmiI2c+0x7>
    409a:	81 50       	subi	r24, 0x01	; 1
    409c:	80 93 4e 23 	sts	0x234E, r24	; 0x80234e <gHmiI2c+0x7>
	
		uint8_t data = *(gHmiI2c.pcWriteData);
    40a0:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <gHmiI2c+0x3>
    40a4:	90 91 4b 23 	lds	r25, 0x234B	; 0x80234b <gHmiI2c+0x4>
    40a8:	fc 01       	movw	r30, r24
    40aa:	80 81       	ld	r24, Z
    40ac:	89 83       	std	Y+1, r24	; 0x01
		gHmiI2c.pInterface->MASTER.DATA = data;
    40ae:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    40b2:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    40b6:	29 81       	ldd	r18, Y+1	; 0x01
    40b8:	fc 01       	movw	r30, r24
    40ba:	27 83       	std	Z+7, r18	; 0x07
		gHmiI2c.pcWriteData++;
    40bc:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <gHmiI2c+0x3>
    40c0:	90 91 4b 23 	lds	r25, 0x234B	; 0x80234b <gHmiI2c+0x4>
    40c4:	01 96       	adiw	r24, 0x01	; 1
    40c6:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <gHmiI2c+0x3>
    40ca:	90 93 4b 23 	sts	0x234B, r25	; 0x80234b <gHmiI2c+0x4>
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    40ce:	1b c0       	rjmp	.+54     	; 0x4106 <hmiI2cWriteHandler+0xb8>
	
		uint8_t data = *(gHmiI2c.pcWriteData);
		gHmiI2c.pInterface->MASTER.DATA = data;
		gHmiI2c.pcWriteData++;
	}
	else if(gHmiI2c.cCountOfBytesRead < gHmiI2c.cCountOfBytesToRead) 
    40d0:	90 91 51 23 	lds	r25, 0x2351	; 0x802351 <gHmiI2c+0xa>
    40d4:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <gHmiI2c+0x8>
    40d8:	98 17       	cp	r25, r24
    40da:	58 f4       	brcc	.+22     	; 0x40f2 <hmiI2cWriteHandler+0xa4>
	{	/* setup data written, target data to be read */
		/* send repeated START condition + Address + Read ('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
    40dc:	00 91 47 23 	lds	r16, 0x2347	; 0x802347 <gHmiI2c>
    40e0:	10 91 48 23 	lds	r17, 0x2348	; 0x802348 <gHmiI2c+0x1>
    40e4:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <gHmiI2c+0x2>
    40e8:	0e 94 8a 20 	call	0x4114	; 0x4114 <i2cFormatSlaveAddressRead>
    40ec:	f8 01       	movw	r30, r16
    40ee:	86 83       	std	Z+6, r24	; 0x06
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    40f0:	0a c0       	rjmp	.+20     	; 0x4106 <hmiI2cWriteHandler+0xb8>
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
	}
	else 
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    40f2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    40f6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    40fa:	23 e0       	ldi	r18, 0x03	; 3
    40fc:	fc 01       	movw	r30, r24
    40fe:	23 83       	std	Z+3, r18	; 0x03
		hmiI2cTransactionFinished(HmiI2cResultOK);
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <hmiI2cTransactionFinished>
	}
}
    4106:	00 00       	nop
    4108:	0f 90       	pop	r0
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	1f 91       	pop	r17
    4110:	0f 91       	pop	r16
    4112:	08 95       	ret

00004114 <i2cFormatSlaveAddressRead>:

inline static uint8_t i2cFormatSlaveAddressRead(uint8_t cAddress)
{
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	1f 92       	push	r1
    411a:	1f 92       	push	r1
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
    4120:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t cSlaveAddress = cAddress;
    4122:	8a 81       	ldd	r24, Y+2	; 0x02
    4124:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress <<= 1;	/* shift the slave address into position */
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	88 0f       	add	r24, r24
    412a:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress |= 0x01;	/* include the READ bit */
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	81 60       	ori	r24, 0x01	; 1
    4130:	89 83       	std	Y+1, r24	; 0x01

	return cSlaveAddress;
    4132:	89 81       	ldd	r24, Y+1	; 0x01
}
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	08 95       	ret

0000413e <i2cFormatSlaveAddressWrite>:

inline static uint8_t i2cFormatSlaveAddressWrite(uint8_t cAddress)
{
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	1f 92       	push	r1
    4144:	1f 92       	push	r1
    4146:	cd b7       	in	r28, 0x3d	; 61
    4148:	de b7       	in	r29, 0x3e	; 62
    414a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t cSlaveAddress = cAddress;
    414c:	8a 81       	ldd	r24, Y+2	; 0x02
    414e:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress <<= 1;	/* shift the slave address into position */
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	88 0f       	add	r24, r24
    4154:	89 83       	std	Y+1, r24	; 0x01

	return cSlaveAddress;
    4156:	89 81       	ldd	r24, Y+1	; 0x01
}
    4158:	0f 90       	pop	r0
    415a:	0f 90       	pop	r0
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	08 95       	ret

00004162 <hmiI2cReadHandler>:
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 *
 */
inline static void hmiI2cReadHandler(void)
{
    4162:	cf 93       	push	r28
    4164:	df 93       	push	r29
    4166:	1f 92       	push	r1
    4168:	1f 92       	push	r1
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = gHmiI2c.pInterface->MASTER.DATA;
    416e:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    4172:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    4176:	fc 01       	movw	r30, r24
    4178:	87 81       	ldd	r24, Z+7	; 0x07
    417a:	89 83       	std	Y+1, r24	; 0x01
	*(gHmiI2c.pcReadBuf)++ = data;
    417c:	80 91 4c 23 	lds	r24, 0x234C	; 0x80234c <gHmiI2c+0x5>
    4180:	90 91 4d 23 	lds	r25, 0x234D	; 0x80234d <gHmiI2c+0x6>
    4184:	9c 01       	movw	r18, r24
    4186:	2f 5f       	subi	r18, 0xFF	; 255
    4188:	3f 4f       	sbci	r19, 0xFF	; 255
    418a:	20 93 4c 23 	sts	0x234C, r18	; 0x80234c <gHmiI2c+0x5>
    418e:	30 93 4d 23 	sts	0x234D, r19	; 0x80234d <gHmiI2c+0x6>
    4192:	29 81       	ldd	r18, Y+1	; 0x01
    4194:	fc 01       	movw	r30, r24
    4196:	20 83       	st	Z, r18
	gHmiI2c.cCountOfBytesRead++;
    4198:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <gHmiI2c+0xa>
    419c:	8f 5f       	subi	r24, 0xFF	; 255
    419e:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <gHmiI2c+0xa>

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t cCountOfBytesToRead = gHmiI2c.cCountOfBytesToRead;
    41a2:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <gHmiI2c+0x8>
    41a6:	8a 83       	std	Y+2, r24	; 0x02

	
	if(gHmiI2c.cCountOfBytesRead < cCountOfBytesToRead) 
    41a8:	90 91 51 23 	lds	r25, 0x2351	; 0x802351 <gHmiI2c+0xa>
    41ac:	8a 81       	ldd	r24, Y+2	; 0x02
    41ae:	98 17       	cp	r25, r24
    41b0:	40 f4       	brcc	.+16     	; 0x41c2 <hmiI2cReadHandler+0x60>
	{	/* more bytes to read */
		/* issue ACK to start next byte read */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    41b2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    41b6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    41ba:	22 e0       	ldi	r18, 0x02	; 2
    41bc:	fc 01       	movw	r30, r24
    41be:	23 83       	std	Z+3, r18	; 0x03
	{	/* transaction finished */
		/* issue NACK and STOP condition. */
		gHmiI2c.pInterface->MASTER.CTRLC = (TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc);
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    41c0:	0a c0       	rjmp	.+20     	; 0x41d6 <hmiI2cReadHandler+0x74>
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}
	else 
	{	/* transaction finished */
		/* issue NACK and STOP condition. */
		gHmiI2c.pInterface->MASTER.CTRLC = (TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc);
    41c2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <gHmiI2c>
    41c6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <gHmiI2c+0x1>
    41ca:	27 e0       	ldi	r18, 0x07	; 7
    41cc:	fc 01       	movw	r30, r24
    41ce:	23 83       	std	Z+3, r18	; 0x03
		hmiI2cTransactionFinished(HmiI2cResultOK);
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <hmiI2cTransactionFinished>
	}
}
    41d6:	00 00       	nop
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	08 95       	ret

000041e2 <hmiI2cTransactionFinished>:
 *
 *  \param twi     The hmiI2c_t struct instance.
 *  \param result  The result of the operation.
 */
static inline void hmiI2cTransactionFinished(uint8_t result)
{
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	1f 92       	push	r1
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	89 83       	std	Y+1, r24	; 0x01
	gHmiI2c.cResult = result;
    41ee:	89 81       	ldd	r24, Y+1	; 0x01
    41f0:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <gHmiI2c+0xc>
	gHmiI2c.cStatus = HmiI2cReady;
    41f4:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <gHmiI2c+0xb>
}
    41f8:	00 00       	nop
    41fa:	0f 90       	pop	r0
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	08 95       	ret

00004202 <__udivmodsi4>:
    4202:	a1 e2       	ldi	r26, 0x21	; 33
    4204:	1a 2e       	mov	r1, r26
    4206:	aa 1b       	sub	r26, r26
    4208:	bb 1b       	sub	r27, r27
    420a:	fd 01       	movw	r30, r26
    420c:	0d c0       	rjmp	.+26     	; 0x4228 <__udivmodsi4_ep>

0000420e <__udivmodsi4_loop>:
    420e:	aa 1f       	adc	r26, r26
    4210:	bb 1f       	adc	r27, r27
    4212:	ee 1f       	adc	r30, r30
    4214:	ff 1f       	adc	r31, r31
    4216:	a2 17       	cp	r26, r18
    4218:	b3 07       	cpc	r27, r19
    421a:	e4 07       	cpc	r30, r20
    421c:	f5 07       	cpc	r31, r21
    421e:	20 f0       	brcs	.+8      	; 0x4228 <__udivmodsi4_ep>
    4220:	a2 1b       	sub	r26, r18
    4222:	b3 0b       	sbc	r27, r19
    4224:	e4 0b       	sbc	r30, r20
    4226:	f5 0b       	sbc	r31, r21

00004228 <__udivmodsi4_ep>:
    4228:	66 1f       	adc	r22, r22
    422a:	77 1f       	adc	r23, r23
    422c:	88 1f       	adc	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	1a 94       	dec	r1
    4232:	69 f7       	brne	.-38     	; 0x420e <__udivmodsi4_loop>
    4234:	60 95       	com	r22
    4236:	70 95       	com	r23
    4238:	80 95       	com	r24
    423a:	90 95       	com	r25
    423c:	9b 01       	movw	r18, r22
    423e:	ac 01       	movw	r20, r24
    4240:	bd 01       	movw	r22, r26
    4242:	cf 01       	movw	r24, r30
    4244:	08 95       	ret

00004246 <__tablejump2__>:
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	88 1f       	adc	r24, r24
    424c:	8b bf       	out	0x3b, r24	; 59
    424e:	07 90       	elpm	r0, Z+
    4250:	f6 91       	elpm	r31, Z
    4252:	e0 2d       	mov	r30, r0
    4254:	19 94       	eijmp

00004256 <__do_global_dtors>:
    4256:	11 e0       	ldi	r17, 0x01	; 1
    4258:	c3 e1       	ldi	r28, 0x13	; 19
    425a:	d1 e0       	ldi	r29, 0x01	; 1
    425c:	00 e0       	ldi	r16, 0x00	; 0
    425e:	06 c0       	rjmp	.+12     	; 0x426c <__do_global_dtors+0x16>
    4260:	80 2f       	mov	r24, r16
    4262:	fe 01       	movw	r30, r28
    4264:	0e 94 23 21 	call	0x4246	; 0x4246 <__tablejump2__>
    4268:	21 96       	adiw	r28, 0x01	; 1
    426a:	01 1d       	adc	r16, r1
    426c:	c4 31       	cpi	r28, 0x14	; 20
    426e:	d1 07       	cpc	r29, r17
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	08 07       	cpc	r16, r24
    4274:	a9 f7       	brne	.-22     	; 0x4260 <__do_global_dtors+0xa>
    4276:	f8 94       	cli

00004278 <__stop_program>:
    4278:	ff cf       	rjmp	.-2      	; 0x4278 <__stop_program>
