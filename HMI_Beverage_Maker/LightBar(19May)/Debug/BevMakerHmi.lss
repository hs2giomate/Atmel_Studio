
BevMakerHmi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00802000  00002f90  00003024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000153  008021d2  008021d2  000031f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000093b9  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000405e  00000000  00000000  0000cc41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003eb9  00000000  00000000  00010c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013cc  00000000  00000000  00014b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005290  00000000  00000000  00015f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000270c  00000000  00000000  0001b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0001d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__vector_12>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__vector_14>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      58:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      5c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      60:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      64:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      68:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      6c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      70:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      74:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      78:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      7c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      80:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      84:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      88:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      8c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      90:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      94:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      98:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      9c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      a0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      a4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      a8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      ac:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      b0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      b4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      b8:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__vector_46>
      bc:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      c0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      c4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      c8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      cc:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      d0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      d4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      d8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      dc:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      e0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      e4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      e8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      ec:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      f0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      f4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      f8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      fc:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     100:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     104:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     108:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     10c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     110:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     114:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     118:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     11c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     120:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     124:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     128:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     12c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     130:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     134:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     138:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     13c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     140:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     144:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     148:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     14c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     150:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     154:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     158:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     15c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     160:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     164:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     168:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     16c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     170:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     174:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     178:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     17c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     180:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     184:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     188:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     18c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     190:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     194:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     198:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     19c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1a0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1a4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1a8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1ac:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1b0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1b4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1b8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1bc:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1c0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
     1c4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	df e9       	ldi	r29, 0x9F	; 159
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	0c bf       	out	0x3c, r16	; 60

000001d8 <__do_copy_data>:
     1d8:	11 e2       	ldi	r17, 0x21	; 33
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e2       	ldi	r27, 0x20	; 32
     1de:	e0 e9       	ldi	r30, 0x90	; 144
     1e0:	ff e2       	ldi	r31, 0x2F	; 47
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	0b bf       	out	0x3b, r16	; 59
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x14>
     1e8:	07 90       	elpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a2 3d       	cpi	r26, 0xD2	; 210
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0x10>

000001f2 <__do_clear_bss>:
     1f2:	23 e2       	ldi	r18, 0x23	; 35
     1f4:	a2 ed       	ldi	r26, 0xD2	; 210
     1f6:	b1 e2       	ldi	r27, 0x21	; 33
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a5 32       	cpi	r26, 0x25	; 37
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 c2 09 	call	0x1384	; 0x1384 <main>
     206:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <_exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <adcInit>:
	{
		gAdcChannel = 0;
	}

	adcSetupForNextChannel();
}
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	96 e0       	ldi	r25, 0x06	; 6
     21e:	23 e0       	ldi	r18, 0x03	; 3
     220:	fc 01       	movw	r30, r24
     222:	22 83       	std	Z+2, r18	; 0x02
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	12 e0       	ldi	r17, 0x02	; 2
     228:	80 e2       	ldi	r24, 0x20	; 32
     22a:	0e 94 3f 01 	call	0x27e	; 0x27e <adcReadCalibrationByte>
     22e:	f8 01       	movw	r30, r16
     230:	84 87       	std	Z+12, r24	; 0x0c
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	12 e0       	ldi	r17, 0x02	; 2
     236:	81 e2       	ldi	r24, 0x21	; 33
     238:	0e 94 3f 01 	call	0x27e	; 0x27e <adcReadCalibrationByte>
     23c:	f8 01       	movw	r30, r16
     23e:	85 87       	std	Z+13, r24	; 0x0d
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	12 e0       	ldi	r17, 0x02	; 2
     244:	80 e2       	ldi	r24, 0x20	; 32
     246:	0e 94 3f 01 	call	0x27e	; 0x27e <adcReadCalibrationByte>
     24a:	f8 01       	movw	r30, r16
     24c:	84 87       	std	Z+12, r24	; 0x0c
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	12 e0       	ldi	r17, 0x02	; 2
     252:	81 e2       	ldi	r24, 0x21	; 33
     254:	0e 94 3f 01 	call	0x27e	; 0x27e <adcReadCalibrationByte>
     258:	f8 01       	movw	r30, r16
     25a:	85 87       	std	Z+13, r24	; 0x0d
     25c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <adcSetupForNextChannel>
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	32 e0       	ldi	r19, 0x02	; 2
     268:	f9 01       	movw	r30, r18
     26a:	20 a1       	ldd	r18, Z+32	; 0x20
     26c:	20 68       	ori	r18, 0x80	; 128
     26e:	fc 01       	movw	r30, r24
     270:	20 a3       	std	Z+32, r18	; 0x20
     272:	00 00       	nop
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	08 95       	ret

0000027e <adcReadCalibrationByte>:
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	25 97       	sbiw	r28, 0x05	; 5
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	8d 83       	std	Y+5, r24	; 0x05
     28e:	8a ec       	ldi	r24, 0xCA	; 202
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	22 e0       	ldi	r18, 0x02	; 2
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
     298:	8d 81       	ldd	r24, Y+5	; 0x05
     29a:	88 2f       	mov	r24, r24
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	89 83       	std	Y+1, r24	; 0x01
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	fc 01       	movw	r30, r24
     2a8:	84 91       	lpm	r24, Z
     2aa:	8b 83       	std	Y+3, r24	; 0x03
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
     2ae:	8c 83       	std	Y+4, r24	; 0x04
     2b0:	8a ec       	ldi	r24, 0xCA	; 202
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	fc 01       	movw	r30, r24
     2b6:	10 82       	st	Z, r1
     2b8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ba:	25 96       	adiw	r28, 0x05	; 5
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <adcSetupForNextChannel>:

static void adcSetupForNextChannel(void)
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |       |     PRESCALER[2:0]    |
	//     0       0       0       0       0       0       0       0
	// The ADC runs off of the CPU_per clock, 8MHz
	// Set ADC clock to 63kHz:  CPU_per/128    =>    8MHz/128
	ADCA.PRESCALER = ADC_PRESCALER2_bm | ADC_PRESCALER0_bm;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	92 e0       	ldi	r25, 0x02	; 2
     2d2:	25 e0       	ldi	r18, 0x05	; 5
     2d4:	fc 01       	movw	r30, r24
     2d6:	24 83       	std	Z+4, r18	; 0x04
	//////////////////////////////////////////////////////////////////////
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm;
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	fc 01       	movw	r30, r24
     2e0:	26 83       	std	Z+6, r18	; 0x06
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set Vref to the internal 1V0 bandgap
	// Enable the bandgap
	// Enable the temperature sensor
	ADCA.REFCTRL = ADC_BANDGAP_bm | ADC_TEMPREF_bm;
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	92 e0       	ldi	r25, 0x02	; 2
     2e6:	23 e0       	ldi	r18, 0x03	; 3
     2e8:	fc 01       	movw	r30, r24
     2ea:	22 83       	std	Z+2, r18	; 0x02
	//////////////////////////////////////////////////////////////////////

	if(gAdcChannel == gAdcAvccChannel)
     2ec:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <gAdcChannel>
     2f0:	88 23       	and	r24, r24
     2f2:	51 f4       	brne	.+20     	; 0x308 <adcSetupForNextChannel+0x42>
		/////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = 0;	/* Internal signal */
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	fc 01       	movw	r30, r24
     2fa:	10 a2       	std	Z+32, r1	; 0x20

		ADCA.CH0.MUXCTRL = ADC_CH_MUXINT1_bm;	/* 1/10 Scaled Vcc */
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	20 e1       	ldi	r18, 0x10	; 16
     302:	fc 01       	movw	r30, r24
     304:	21 a3       	std	Z+33, r18	; 0x21
     306:	2a c0       	rjmp	.+84     	; 0x35c <adcSetupForNextChannel+0x96>
	}
	else if(gAdcChannel == gAdcTemperatureChannel)
     308:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <gAdcChannel>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	49 f4       	brne	.+18     	; 0x322 <adcSetupForNextChannel+0x5c>
		/////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = 0;	/* Internal signal */
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	fc 01       	movw	r30, r24
     316:	10 a2       	std	Z+32, r1	; 0x20

		ADCA.CH0.MUXCTRL = 0;	/* Temperature */
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	fc 01       	movw	r30, r24
     31e:	11 a2       	std	Z+33, r1	; 0x21
     320:	1d c0       	rjmp	.+58     	; 0x35c <adcSetupForNextChannel+0x96>
	}
	else if(gAdcChannel == gHmiSupplyVoltageChannel)
     322:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <gAdcChannel>
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	59 f4       	brne	.+22     	; 0x340 <adcSetupForNextChannel+0x7a>
		//////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	21 e0       	ldi	r18, 0x01	; 1
     330:	fc 01       	movw	r30, r24
     332:	20 a3       	std	Z+32, r18	; 0x20

		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS3_bm;		/* ADC8, PB0 */
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	20 e4       	ldi	r18, 0x40	; 64
     33a:	fc 01       	movw	r30, r24
     33c:	21 a3       	std	Z+33, r18	; 0x21
     33e:	0e c0       	rjmp	.+28     	; 0x35c <adcSetupForNextChannel+0x96>
	}
	else if(gAdcChannel == gAmbientLightChannel)
     340:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <gAdcChannel>
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	51 f4       	brne	.+20     	; 0x35c <adcSetupForNextChannel+0x96>
		//////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	fc 01       	movw	r30, r24
     350:	20 a3       	std	Z+32, r18	; 0x20

		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS3_bm | ADC_CH_MUXPOS0_bm;		/* ADC9, PB1 */
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	28 e4       	ldi	r18, 0x48	; 72
     358:	fc 01       	movw	r30, r24
     35a:	21 a3       	std	Z+33, r18	; 0x21
	//ADCA.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC
	ADCA.CTRLA = ADC_ENABLE_bm;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////

	gAdcDiscardSamples = 1;	/* Discard the first sample after switching channels */
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 fb 21 	sts	0x21FB, r24	; 0x8021fb <gAdcDiscardSamples>
}
     36c:	00 00       	nop
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <beepInit>:
}

static void beepOn(void)
{
	PORTF.DIRSET = BeepPinMask;	/* Set pin as output */
}
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	80 ea       	ldi	r24, 0xA0	; 160
     37e:	96 e0       	ldi	r25, 0x06	; 6
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	fc 01       	movw	r30, r24
     384:	26 83       	std	Z+6, r18	; 0x06
     386:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <beepOff>
     38a:	80 ea       	ldi	r24, 0xA0	; 160
     38c:	96 e0       	ldi	r25, 0x06	; 6
     38e:	fc 01       	movw	r30, r24
     390:	11 8a       	std	Z+17, r1	; 0x11
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	9b e0       	ldi	r25, 0x0B	; 11
     396:	22 e0       	ldi	r18, 0x02	; 2
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	9b e0       	ldi	r25, 0x0B	; 11
     3a0:	23 e2       	ldi	r18, 0x23	; 35
     3a2:	fc 01       	movw	r30, r24
     3a4:	21 83       	std	Z+1, r18	; 0x01
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	9b e0       	ldi	r25, 0x0B	; 11
     3aa:	28 ee       	ldi	r18, 0xE8	; 232
     3ac:	33 e0       	ldi	r19, 0x03	; 3
     3ae:	fc 01       	movw	r30, r24
     3b0:	26 a3       	std	Z+38, r18	; 0x26
     3b2:	37 a3       	std	Z+39, r19	; 0x27
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	9b e0       	ldi	r25, 0x0B	; 11
     3b8:	24 ef       	ldi	r18, 0xF4	; 244
     3ba:	31 e0       	ldi	r19, 0x01	; 1
     3bc:	fc 01       	movw	r30, r24
     3be:	22 a7       	std	Z+42, r18	; 0x2a
     3c0:	33 a7       	std	Z+43, r19	; 0x2b
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	9b e0       	ldi	r25, 0x0B	; 11
     3c6:	fc 01       	movw	r30, r24
     3c8:	10 a2       	std	Z+32, r1	; 0x20
     3ca:	11 a2       	std	Z+33, r1	; 0x21
     3cc:	00 00       	nop
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <beepOff>:

static void beepOff(void)
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = BeepPinMask;	/* Set pin as input */
     3dc:	80 ea       	ldi	r24, 0xA0	; 160
     3de:	96 e0       	ldi	r25, 0x06	; 6
     3e0:	22 e0       	ldi	r18, 0x02	; 2
     3e2:	fc 01       	movw	r30, r24
     3e4:	22 83       	std	Z+2, r18	; 0x02
}
     3e6:	00 00       	nop
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <btnInitButtons>:

/** Initialise the User Interface Buttons driver
	\return Nothing
*/   
void btnInitButtons(void)
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : SW-COL1, initialise to input, high-impedance */
	/*	              | | | +----------- b4 : SW-COL2, initialise to input, high-impedance */
	/*	              | | +------------- b5 : SW-COL3, input with pull-up, reserved for future expansion */
	/*	              | +--------------- b6 : SW-ROW1, input with pull-up  */
	/*	              +----------------- b7 : SW-ROW2, input with pull-up, reserved for future expansion */
	PORTB.DIRCLR = 0xFC;	/* Clear to input */
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	96 e0       	ldi	r25, 0x06	; 6
     3fa:	2c ef       	ldi	r18, 0xFC	; 252
     3fc:	fc 01       	movw	r30, r24
     3fe:	22 83       	std	Z+2, r18	; 0x02
	
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     400:	80 e2       	ldi	r24, 0x20	; 32
     402:	96 e0       	ldi	r25, 0x06	; 6
     404:	28 e1       	ldi	r18, 0x18	; 24
     406:	fc 01       	movw	r30, r24
     408:	22 8b       	std	Z+18, r18	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
     40a:	80 e2       	ldi	r24, 0x20	; 32
     40c:	96 e0       	ldi	r25, 0x06	; 6
     40e:	fc 01       	movw	r30, r24
     410:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	96 e0       	ldi	r25, 0x06	; 6
     416:	fc 01       	movw	r30, r24
     418:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	96 e0       	ldi	r25, 0x06	; 6
     41e:	28 e1       	ldi	r18, 0x18	; 24
     420:	fc 01       	movw	r30, r24
     422:	25 8b       	std	Z+21, r18	; 0x15
	PORTB.PIN6CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	96 e0       	ldi	r25, 0x06	; 6
     428:	28 e1       	ldi	r18, 0x18	; 24
     42a:	fc 01       	movw	r30, r24
     42c:	26 8b       	std	Z+22, r18	; 0x16
	PORTB.PIN7CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	96 e0       	ldi	r25, 0x06	; 6
     432:	28 e1       	ldi	r18, 0x18	; 24
     434:	fc 01       	movw	r30, r24
     436:	27 8b       	std	Z+23, r18	; 0x17

	/* User-Interface Buttons row on PORTD */
	/* SW-ROW3, reserved for future expansion */
	PORTD.DIRCLR = 0x01;	/* Clear to input */
     438:	80 e6       	ldi	r24, 0x60	; 96
     43a:	96 e0       	ldi	r25, 0x06	; 6
     43c:	21 e0       	ldi	r18, 0x01	; 1
     43e:	fc 01       	movw	r30, r24
     440:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     442:	80 e6       	ldi	r24, 0x60	; 96
     444:	96 e0       	ldi	r25, 0x06	; 6
     446:	28 e1       	ldi	r18, 0x18	; 24
     448:	fc 01       	movw	r30, r24
     44a:	20 8b       	std	Z+16, r18	; 0x10

	/* next column drive */
	btnDriveButtonColumn();
     44c:	0e 94 41 02 	call	0x482	; 0x482 <btnDriveButtonColumn>
}
     450:	00 00       	nop
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <btnReleaseKeyboardAllColumn>:
		Advance to next column and Repeat

*/

static void btnReleaseKeyboardAllColumn(void)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	/* All column drive to high impedance  */
	PORTB.DIRCLR = 0x5C;	/* Clear to input */
     460:	80 e2       	ldi	r24, 0x20	; 32
     462:	96 e0       	ldi	r25, 0x06	; 6
     464:	2c e5       	ldi	r18, 0x5C	; 92
     466:	fc 01       	movw	r30, r24
     468:	22 83       	std	Z+2, r18	; 0x02
	
	PORTB.PIN3CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
     46a:	80 e2       	ldi	r24, 0x20	; 32
     46c:	96 e0       	ldi	r25, 0x06	; 6
     46e:	fc 01       	movw	r30, r24
     470:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	96 e0       	ldi	r25, 0x06	; 6
     476:	fc 01       	movw	r30, r24
     478:	14 8a       	std	Z+20, r1	; 0x14
}
     47a:	00 00       	nop
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <btnDriveButtonColumn>:

static void btnDriveButtonColumn(void)
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <btnDriveButtonColumn+0x6>
     488:	1f 92       	push	r1
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	uint8_t cPinNum;
	uint8_t cPinMask;

	/* All column drive to high impedance first, to avoid short across power rails */
	btnReleaseKeyboardAllColumn();
     48e:	0e 94 2c 02 	call	0x458	; 0x458 <btnReleaseKeyboardAllColumn>

	/* Drive the target column to logic 0 */
	cPinNum = gcBtnColumnToPinNumMap_Array[gcColumnDrvNum];
     492:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <gcColumnDrvNum>
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	81 53       	subi	r24, 0x31	; 49
     49c:	9e 4d       	sbci	r25, 0xDE	; 222
     49e:	fc 01       	movw	r30, r24
     4a0:	80 81       	ld	r24, Z
     4a2:	89 83       	std	Y+1, r24	; 0x01
	cPinMask = (0x01 << cPinNum);
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	28 2f       	mov	r18, r24
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <btnDriveButtonColumn+0x32>
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	2a 95       	dec	r18
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <btnDriveButtonColumn+0x2e>
     4b8:	8a 83       	std	Y+2, r24	; 0x02
	
    register8_t* pinControl = &(PORTB.PIN0CTRL);
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	96 e0       	ldi	r25, 0x06	; 6
     4be:	8b 83       	std	Y+3, r24	; 0x03
     4c0:	9c 83       	std	Y+4, r25	; 0x04
	pinControl += cPinNum;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	2b 81       	ldd	r18, Y+3	; 0x03
     4ca:	3c 81       	ldd	r19, Y+4	; 0x04
     4cc:	82 0f       	add	r24, r18
     4ce:	93 1f       	adc	r25, r19
     4d0:	8b 83       	std	Y+3, r24	; 0x03
     4d2:	9c 83       	std	Y+4, r25	; 0x04
	*pinControl = 0;	/* totem-pole output */
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	9c 81       	ldd	r25, Y+4	; 0x04
     4d8:	fc 01       	movw	r30, r24
     4da:	10 82       	st	Z, r1
	PORTB.DIRSET = cPinMask;		/* Set as output */
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	96 e0       	ldi	r25, 0x06	; 6
     4e0:	2a 81       	ldd	r18, Y+2	; 0x02
     4e2:	fc 01       	movw	r30, r24
     4e4:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTCLR = cPinMask;	/* Logic LOW */
     4e6:	80 e2       	ldi	r24, 0x20	; 32
     4e8:	96 e0       	ldi	r25, 0x06	; 6
     4ea:	2a 81       	ldd	r18, Y+2	; 0x02
     4ec:	fc 01       	movw	r30, r24
     4ee:	26 83       	std	Z+6, r18	; 0x06
}
     4f0:	00 00       	nop
     4f2:	24 96       	adiw	r28, 0x04	; 4
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <CCPWrite>:
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
	uint8_t clkEnabled = OSC.CTRL & oscSel;
	return clkEnabled;
}
     4fe:	0f 93       	push	r16
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	00 d0       	rcall	.+0      	; 0x506 <CCPWrite+0x8>
     506:	00 d0       	rcall	.+0      	; 0x508 <CCPWrite+0xa>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	8c 83       	std	Y+4, r24	; 0x04
     50e:	9d 83       	std	Y+5, r25	; 0x05
     510:	6e 83       	std	Y+6, r22	; 0x06
     512:	8f e3       	ldi	r24, 0x3F	; 63
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	8b 83       	std	Y+3, r24	; 0x03
     51c:	f8 94       	cli
     51e:	8c 81       	ldd	r24, Y+4	; 0x04
     520:	9d 81       	ldd	r25, Y+5	; 0x05
     522:	89 83       	std	Y+1, r24	; 0x01
     524:	9a 83       	std	Y+2, r25	; 0x02
     526:	8b e3       	ldi	r24, 0x3B	; 59
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	fc 01       	movw	r30, r24
     52c:	10 82       	st	Z, r1
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	2e 81       	ldd	r18, Y+6	; 0x06
     534:	fc 01       	movw	r30, r24
     536:	08 ed       	ldi	r16, 0xD8	; 216
     538:	04 bf       	out	0x34, r16	; 52
     53a:	20 83       	st	Z, r18
     53c:	8f e3       	ldi	r24, 0x3F	; 63
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	2b 81       	ldd	r18, Y+3	; 0x03
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
     546:	00 00       	nop
     548:	26 96       	adiw	r28, 0x06	; 6
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <CLKSYS_PLL_Config>:
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	1f 92       	push	r1
     55c:	1f 92       	push	r1
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	6a 83       	std	Y+2, r22	; 0x02
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	8f 71       	andi	r24, 0x1F	; 31
     56a:	8a 83       	std	Y+2, r24	; 0x02
     56c:	80 e5       	ldi	r24, 0x50	; 80
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	39 81       	ldd	r19, Y+1	; 0x01
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	23 2b       	or	r18, r19
     576:	fc 01       	movw	r30, r24
     578:	25 83       	std	Z+5, r18	; 0x05
     57a:	00 00       	nop
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	00 d0       	rcall	.+0      	; 0x58c <CLKSYS_Prescalers_Config+0x6>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	8a 83       	std	Y+2, r24	; 0x02
     592:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	89 2b       	or	r24, r25
     59a:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     59c:	69 81       	ldd	r22, Y+1	; 0x01
     59e:	81 e4       	ldi	r24, 0x41	; 65
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <CCPWrite>
}
     5a6:	00 00       	nop
     5a8:	23 96       	adiw	r28, 0x03	; 3
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	1f 92       	push	r1
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     5c2:	80 e4       	ldi	r24, 0x40	; 64
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	98 2f       	mov	r25, r24
     5cc:	98 7f       	andi	r25, 0xF8	; 248
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	89 2b       	or	r24, r25
     5d2:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     5d4:	69 81       	ldd	r22, Y+1	; 0x01
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 7f 02 	call	0x4fe	; 0x4fe <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	fc 01       	movw	r30, r24
     5e4:	90 81       	ld	r25, Z
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	89 23       	and	r24, r25
     5ea:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <dspSetContrast>:
	
	for (i = 0; i < num_pages; i++)
	{
		dspWritePage(pixelData, page + i, x, width);
	}
}
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	81 e8       	ldi	r24, 0x81	; 129
     606:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     610:	00 00       	nop
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <dspInverseDisable>:
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	86 ea       	ldi	r24, 0xA6	; 166
     624:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     628:	00 00       	nop
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <dspSetStartLine>:
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	1f 92       	push	r1
     636:	1f 92       	push	r1
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	8a 83       	std	Y+2, r24	; 0x02
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	8f 73       	andi	r24, 0x3F	; 63
     642:	8a 83       	std	Y+2, r24	; 0x02
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	99 81       	ldd	r25, Y+1	; 0x01
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	89 2b       	or	r24, r25
     64e:	89 83       	std	Y+1, r24	; 0x01
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     656:	00 00       	nop
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <dspWriteByteToDisplay>:
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <dspWriteByteToDisplay+0x6>
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	89 83       	std	Y+1, r24	; 0x01
     66e:	6a 83       	std	Y+2, r22	; 0x02
     670:	4b 83       	std	Y+3, r20	; 0x03
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	0e 94 49 03 	call	0x692	; 0x692 <dspSetPage>
     678:	8a 81       	ldd	r24, Y+2	; 0x02
     67a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <dspSetColumn>
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	0e 94 56 04 	call	0x8ac	; 0x8ac <dspWriteData>
     684:	00 00       	nop
     686:	23 96       	adiw	r28, 0x03	; 3
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <dspSetPage>:
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	1f 92       	push	r1
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	8a 83       	std	Y+2, r24	; 0x02
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	87 70       	andi	r24, 0x07	; 7
     6a4:	8a 83       	std	Y+2, r24	; 0x02
     6a6:	80 eb       	ldi	r24, 0xB0	; 176
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	99 81       	ldd	r25, Y+1	; 0x01
     6ac:	8a 81       	ldd	r24, Y+2	; 0x02
     6ae:	89 2b       	or	r24, r25
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     6b8:	00 00       	nop
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <dspSetColumn>:
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	1f 92       	push	r1
     6ca:	1f 92       	push	r1
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	8a 83       	std	Y+2, r24	; 0x02
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	8f 77       	andi	r24, 0x7F	; 127
     6d6:	8a 83       	std	Y+2, r24	; 0x02
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	82 95       	swap	r24
     6e0:	8f 70       	andi	r24, 0x0F	; 15
     6e2:	99 81       	ldd	r25, Y+1	; 0x01
     6e4:	89 2b       	or	r24, r25
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     6ee:	19 82       	std	Y+1, r1	; 0x01
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	98 2f       	mov	r25, r24
     6f4:	9f 70       	andi	r25, 0x0F	; 15
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	89 2b       	or	r24, r25
     6fa:	89 83       	std	Y+1, r24	; 0x01
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     702:	00 00       	nop
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <dspResetHold>:
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	80 ea       	ldi	r24, 0xA0	; 160
     718:	96 e0       	ldi	r25, 0x06	; 6
     71a:	24 e3       	ldi	r18, 0x34	; 52
     71c:	fc 01       	movw	r30, r24
     71e:	26 83       	std	Z+6, r18	; 0x06
     720:	80 ea       	ldi	r24, 0xA0	; 160
     722:	96 e0       	ldi	r25, 0x06	; 6
     724:	28 ec       	ldi	r18, 0xC8	; 200
     726:	fc 01       	movw	r30, r24
     728:	25 83       	std	Z+5, r18	; 0x05
     72a:	80 ea       	ldi	r24, 0xA0	; 160
     72c:	96 e0       	ldi	r25, 0x06	; 6
     72e:	2c ef       	ldi	r18, 0xFC	; 252
     730:	fc 01       	movw	r30, r24
     732:	21 83       	std	Z+1, r18	; 0x01
     734:	00 00       	nop
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <dspInit>:
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	96 e0       	ldi	r25, 0x06	; 6
     748:	fc 01       	movw	r30, r24
     74a:	10 8a       	std	Z+16, r1	; 0x10
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	96 e0       	ldi	r25, 0x06	; 6
     750:	fc 01       	movw	r30, r24
     752:	11 8a       	std	Z+17, r1	; 0x11
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	96 e0       	ldi	r25, 0x06	; 6
     758:	fc 01       	movw	r30, r24
     75a:	12 8a       	std	Z+18, r1	; 0x12
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	96 e0       	ldi	r25, 0x06	; 6
     760:	fc 01       	movw	r30, r24
     762:	13 8a       	std	Z+19, r1	; 0x13
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	96 e0       	ldi	r25, 0x06	; 6
     768:	fc 01       	movw	r30, r24
     76a:	14 8a       	std	Z+20, r1	; 0x14
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	fc 01       	movw	r30, r24
     772:	15 8a       	std	Z+21, r1	; 0x15
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	96 e0       	ldi	r25, 0x06	; 6
     778:	fc 01       	movw	r30, r24
     77a:	16 8a       	std	Z+22, r1	; 0x16
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	96 e0       	ldi	r25, 0x06	; 6
     780:	fc 01       	movw	r30, r24
     782:	17 8a       	std	Z+23, r1	; 0x17
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	96 e0       	ldi	r25, 0x06	; 6
     788:	fc 01       	movw	r30, r24
     78a:	14 82       	std	Z+4, r1	; 0x04
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	96 e0       	ldi	r25, 0x06	; 6
     790:	2f ef       	ldi	r18, 0xFF	; 255
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	96 e0       	ldi	r25, 0x06	; 6
     79a:	24 e2       	ldi	r18, 0x24	; 36
     79c:	fc 01       	movw	r30, r24
     79e:	26 83       	std	Z+6, r18	; 0x06
     7a0:	80 ea       	ldi	r24, 0xA0	; 160
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	28 ed       	ldi	r18, 0xD8	; 216
     7a6:	fc 01       	movw	r30, r24
     7a8:	25 83       	std	Z+5, r18	; 0x05
     7aa:	80 ea       	ldi	r24, 0xA0	; 160
     7ac:	96 e0       	ldi	r25, 0x06	; 6
     7ae:	2c ef       	ldi	r18, 0xFC	; 252
     7b0:	fc 01       	movw	r30, r24
     7b2:	21 83       	std	Z+1, r18	; 0x01
     7b4:	80 ea       	ldi	r24, 0xA0	; 160
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	fc 01       	movw	r30, r24
     7ba:	12 8a       	std	Z+18, r1	; 0x12
     7bc:	80 ea       	ldi	r24, 0xA0	; 160
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	fc 01       	movw	r30, r24
     7c2:	13 8a       	std	Z+19, r1	; 0x13
     7c4:	80 ea       	ldi	r24, 0xA0	; 160
     7c6:	96 e0       	ldi	r25, 0x06	; 6
     7c8:	fc 01       	movw	r30, r24
     7ca:	14 8a       	std	Z+20, r1	; 0x14
     7cc:	80 ea       	ldi	r24, 0xA0	; 160
     7ce:	96 e0       	ldi	r25, 0x06	; 6
     7d0:	fc 01       	movw	r30, r24
     7d2:	15 8a       	std	Z+21, r1	; 0x15
     7d4:	80 ea       	ldi	r24, 0xA0	; 160
     7d6:	96 e0       	ldi	r25, 0x06	; 6
     7d8:	fc 01       	movw	r30, r24
     7da:	16 8a       	std	Z+22, r1	; 0x16
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	96 e0       	ldi	r25, 0x06	; 6
     7e0:	fc 01       	movw	r30, r24
     7e2:	17 8a       	std	Z+23, r1	; 0x17
     7e4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <initSsd1309>
     7e8:	0e 94 9e 04 	call	0x93c	; 0x93c <dspBlackWhiteHalf>
     7ec:	00 00       	nop
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <initSsd1309>:
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	1f 92       	push	r1
     7fa:	1f 92       	push	r1
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	88 ea       	ldi	r24, 0xA8	; 168
     802:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     806:	8f e1       	ldi	r24, 0x1F	; 31
     808:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     80c:	83 ed       	ldi	r24, 0xD3	; 211
     80e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     818:	80 e2       	ldi	r24, 0x20	; 32
     81a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     824:	80 ea       	ldi	r24, 0xA0	; 160
     826:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     82a:	80 ec       	ldi	r24, 0xC0	; 192
     82c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     830:	8a ed       	ldi	r24, 0xDA	; 218
     832:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     836:	82 e1       	ldi	r24, 0x12	; 18
     838:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <dspSetContrast>
     842:	85 ed       	ldi	r24, 0xD5	; 213
     844:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     84e:	8b ed       	ldi	r24, 0xDB	; 219
     850:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     854:	80 e4       	ldi	r24, 0x40	; 64
     856:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     85a:	89 ed       	ldi	r24, 0xD9	; 217
     85c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     860:	81 ef       	ldi	r24, 0xF1	; 241
     862:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     866:	84 ea       	ldi	r24, 0xA4	; 164
     868:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <dspWriteCommand>
     86c:	0e 94 0d 03 	call	0x61a	; 0x61a <dspInverseDisable>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 18 03 	call	0x630	; 0x630 <dspSetStartLine>
     876:	19 82       	std	Y+1, r1	; 0x01
     878:	10 c0       	rjmp	.+32     	; 0x89a <initSsd1309+0xa6>
     87a:	1a 82       	std	Y+2, r1	; 0x02
     87c:	08 c0       	rjmp	.+16     	; 0x88e <initSsd1309+0x9a>
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	6a 81       	ldd	r22, Y+2	; 0x02
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	0e 94 31 03 	call	0x662	; 0x662 <dspWriteByteToDisplay>
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	8f 5f       	subi	r24, 0xFF	; 255
     88c:	8a 83       	std	Y+2, r24	; 0x02
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	88 23       	and	r24, r24
     892:	ac f7       	brge	.-22     	; 0x87e <initSsd1309+0x8a>
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	68 f3       	brcs	.-38     	; 0x87a <initSsd1309+0x86>
     8a0:	00 00       	nop
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <dspWriteData>:
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	80 ea       	ldi	r24, 0xA0	; 160
     8ba:	96 e0       	ldi	r25, 0x06	; 6
     8bc:	20 e2       	ldi	r18, 0x20	; 32
     8be:	fc 01       	movw	r30, r24
     8c0:	25 83       	std	Z+5, r18	; 0x05
     8c2:	80 ea       	ldi	r24, 0xA0	; 160
     8c4:	96 e0       	ldi	r25, 0x06	; 6
     8c6:	28 e4       	ldi	r18, 0x48	; 72
     8c8:	fc 01       	movw	r30, r24
     8ca:	26 83       	std	Z+6, r18	; 0x06
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	96 e0       	ldi	r25, 0x06	; 6
     8d0:	29 81       	ldd	r18, Y+1	; 0x01
     8d2:	fc 01       	movw	r30, r24
     8d4:	24 83       	std	Z+4, r18	; 0x04
     8d6:	80 ea       	ldi	r24, 0xA0	; 160
     8d8:	96 e0       	ldi	r25, 0x06	; 6
     8da:	20 e4       	ldi	r18, 0x40	; 64
     8dc:	fc 01       	movw	r30, r24
     8de:	25 83       	std	Z+5, r18	; 0x05
     8e0:	80 ea       	ldi	r24, 0xA0	; 160
     8e2:	96 e0       	ldi	r25, 0x06	; 6
     8e4:	28 e0       	ldi	r18, 0x08	; 8
     8e6:	fc 01       	movw	r30, r24
     8e8:	25 83       	std	Z+5, r18	; 0x05
     8ea:	00 00       	nop
     8ec:	0f 90       	pop	r0
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <dspWriteCommand>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	1f 92       	push	r1
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	89 83       	std	Y+1, r24	; 0x01
     900:	80 ea       	ldi	r24, 0xA0	; 160
     902:	96 e0       	ldi	r25, 0x06	; 6
     904:	20 e2       	ldi	r18, 0x20	; 32
     906:	fc 01       	movw	r30, r24
     908:	26 83       	std	Z+6, r18	; 0x06
     90a:	80 ea       	ldi	r24, 0xA0	; 160
     90c:	96 e0       	ldi	r25, 0x06	; 6
     90e:	28 e4       	ldi	r18, 0x48	; 72
     910:	fc 01       	movw	r30, r24
     912:	26 83       	std	Z+6, r18	; 0x06
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	96 e0       	ldi	r25, 0x06	; 6
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	fc 01       	movw	r30, r24
     91c:	24 83       	std	Z+4, r18	; 0x04
     91e:	80 ea       	ldi	r24, 0xA0	; 160
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	20 e4       	ldi	r18, 0x40	; 64
     924:	fc 01       	movw	r30, r24
     926:	25 83       	std	Z+5, r18	; 0x05
     928:	80 ea       	ldi	r24, 0xA0	; 160
     92a:	96 e0       	ldi	r25, 0x06	; 6
     92c:	28 e0       	ldi	r18, 0x08	; 8
     92e:	fc 01       	movw	r30, r24
     930:	25 83       	std	Z+5, r18	; 0x05
     932:	00 00       	nop
     934:	0f 90       	pop	r0
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <dspBlackWhiteHalf>:
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	27 97       	sbiw	r28, 0x07	; 7
     946:	cd bf       	out	0x3d, r28	; 61
     948:	de bf       	out	0x3e, r29	; 62
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	8a 83       	std	Y+2, r24	; 0x02
     94e:	1b 82       	std	Y+3, r1	; 0x03
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	8c 83       	std	Y+4, r24	; 0x04
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	8d 83       	std	Y+5, r24	; 0x05
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	86 95       	lsr	r24
     95c:	86 95       	lsr	r24
     95e:	86 95       	lsr	r24
     960:	8e 83       	std	Y+6, r24	; 0x06
     962:	80 e4       	ldi	r24, 0x40	; 64
     964:	8f 83       	std	Y+7, r24	; 0x07
     966:	19 82       	std	Y+1, r1	; 0x01
     968:	0c c0       	rjmp	.+24     	; 0x982 <dspBlackWhiteHalf+0x46>
     96a:	9e 81       	ldd	r25, Y+6	; 0x06
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	89 0f       	add	r24, r25
     970:	2f 81       	ldd	r18, Y+7	; 0x07
     972:	4a 81       	ldd	r20, Y+2	; 0x02
     974:	68 2f       	mov	r22, r24
     976:	8c 81       	ldd	r24, Y+4	; 0x04
     978:	0e 94 cc 04 	call	0x998	; 0x998 <dspWritePage>
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	99 81       	ldd	r25, Y+1	; 0x01
     984:	8d 81       	ldd	r24, Y+5	; 0x05
     986:	98 17       	cp	r25, r24
     988:	80 f3       	brcs	.-32     	; 0x96a <dspBlackWhiteHalf+0x2e>
     98a:	00 00       	nop
     98c:	27 96       	adiw	r28, 0x07	; 7
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	de bf       	out	0x3e, r29	; 62
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <dspWritePage>:

static void dspWritePage(uint8_t pixelData, uint8_t page,uint8_t column, uint8_t width)
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	00 d0       	rcall	.+0      	; 0x99e <dspWritePage+0x6>
     99e:	1f 92       	push	r1
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	6a 83       	std	Y+2, r22	; 0x02
     9a8:	4b 83       	std	Y+3, r20	; 0x03
     9aa:	2c 83       	std	Y+4, r18	; 0x04
	dspSetPage(page);
     9ac:	8a 81       	ldd	r24, Y+2	; 0x02
     9ae:	0e 94 49 03 	call	0x692	; 0x692 <dspSetPage>
	dspSetColumn(column);
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <dspSetColumn>

	do 
	{
		dspWriteData(pixelData);
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	0e 94 56 04 	call	0x8ac	; 0x8ac <dspWriteData>
	} while (--width);
     9be:	8c 81       	ldd	r24, Y+4	; 0x04
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	8c 83       	std	Y+4, r24	; 0x04
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	88 23       	and	r24, r24
     9c8:	b9 f7       	brne	.-18     	; 0x9b8 <dspWritePage+0x20>
}
     9ca:	00 00       	nop
     9cc:	24 96       	adiw	r28, 0x04	; 4
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <esfInit>:
static inline void CS_Flash_Disable(void)		{PORTC.OUTSET = PIN4_bm;	/* de-assert CS pin (active low) */}



void esfInit(void)
{
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	/* Configure GPIO for external flash write-protect pin */
	PORTD.DIRSET = PIN4_bm;       /* /WP */
     9e0:	80 e6       	ldi	r24, 0x60	; 96
     9e2:	96 e0       	ldi	r25, 0x06	; 6
     9e4:	20 e1       	ldi	r18, 0x10	; 16
     9e6:	fc 01       	movw	r30, r24
     9e8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = PIN4_bm;			/* de-assert /WP pin (active low) */
     9ea:	80 e6       	ldi	r24, 0x60	; 96
     9ec:	96 e0       	ldi	r25, 0x06	; 6
     9ee:	20 e1       	ldi	r18, 0x10	; 16
     9f0:	fc 01       	movw	r30, r24
     9f2:	25 83       	std	Z+5, r18	; 0x05

	/* request erase the first Flash sector before the test starts */
	gCheckForFlashEraseNextSector = true;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <gCheckForFlashEraseNextSector>
}
     9fa:	00 00       	nop
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <hmiI2cInit>:

/** Initialise the I2C bus for communication with ICs on the HMI internal bus
	\return Nothing
*/   
void hmiI2cInit(void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
	/* Configuration of I2C peripheral overrides the normal port pin function */
	/* M-SDA */
	/* M-SCL */
	
	
	TWIE.MASTER.CTRLA = 0;
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	94 e0       	ldi	r25, 0x04	; 4
     a0e:	fc 01       	movw	r30, r24
     a10:	11 82       	std	Z+1, r1	; 0x01
	gHmiI2c.pInterface = &TWIE;
     a12:	80 ea       	ldi	r24, 0xA0	; 160
     a14:	94 e0       	ldi	r25, 0x04	; 4
     a16:	80 93 23 22 	sts	0x2223, r24	; 0x802223 <gHmiI2c>
     a1a:	90 93 24 22 	sts	0x2224, r25	; 0x802224 <gHmiI2c+0x1>
	TWIE.MASTER.CTRLA = TWI_MASTER_INTLVL_LO_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
     a1e:	80 ea       	ldi	r24, 0xA0	; 160
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	28 e7       	ldi	r18, 0x78	; 120
     a24:	fc 01       	movw	r30, r24
     a26:	21 83       	std	Z+1, r18	; 0x01
	
	/* Baud-Setting =((gdwCpuFrequency /(2 * desired-baudrate)) - 5) */
	TWIE.MASTER.BAUD = gdwBaudSetting;
     a28:	20 ea       	ldi	r18, 0xA0	; 160
     a2a:	34 e0       	ldi	r19, 0x04	; 4
     a2c:	83 e2       	ldi	r24, 0x23	; 35
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	85 83       	std	Z+5, r24	; 0x05
	TWIE.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     a38:	80 ea       	ldi	r24, 0xA0	; 160
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	fc 01       	movw	r30, r24
     a40:	24 83       	std	Z+4, r18	; 0x04

	gHmiI2c.cResult = HmiI2cResultUnknown;	/* indicate a transaction is not finished */
     a42:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <gHmiI2c+0xc>
	gHmiI2c.cStatus = HmiI2cReady;
     a46:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <gHmiI2c+0xb>
}
     a4a:	00 00       	nop
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <hmiI2cReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool hmiI2cReady(void)
{
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	25 97       	sbiw	r28, 0x05	; 5
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	de bf       	out	0x3e, r29	; 62
	/* Restart the I2C peripheral if an error appears to be stopping communication */
	if(gMarkLastHmiI2cActivity > gdwSecondsAlive)
     a68:	20 91 30 22 	lds	r18, 0x2230	; 0x802230 <gMarkLastHmiI2cActivity>
     a6c:	30 91 31 22 	lds	r19, 0x2231	; 0x802231 <gMarkLastHmiI2cActivity+0x1>
     a70:	40 91 32 22 	lds	r20, 0x2232	; 0x802232 <gMarkLastHmiI2cActivity+0x2>
     a74:	50 91 33 22 	lds	r21, 0x2233	; 0x802233 <gMarkLastHmiI2cActivity+0x3>
     a78:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
     a7c:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
     a80:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
     a84:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
     a88:	82 17       	cp	r24, r18
     a8a:	93 07       	cpc	r25, r19
     a8c:	a4 07       	cpc	r26, r20
     a8e:	b5 07       	cpc	r27, r21
     a90:	80 f4       	brcc	.+32     	; 0xab2 <hmiI2cReady+0x60>
	{
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
     a92:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
     a96:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
     a9a:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
     a9e:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
     aa2:	80 93 30 22 	sts	0x2230, r24	; 0x802230 <gMarkLastHmiI2cActivity>
     aa6:	90 93 31 22 	sts	0x2231, r25	; 0x802231 <gMarkLastHmiI2cActivity+0x1>
     aaa:	a0 93 32 22 	sts	0x2232, r26	; 0x802232 <gMarkLastHmiI2cActivity+0x2>
     aae:	b0 93 33 22 	sts	0x2233, r27	; 0x802233 <gMarkLastHmiI2cActivity+0x3>
	}
	uint32_t dwDiff = gdwSecondsAlive -gMarkLastHmiI2cActivity;
     ab2:	20 91 19 23 	lds	r18, 0x2319	; 0x802319 <gdwSecondsAlive>
     ab6:	30 91 1a 23 	lds	r19, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
     aba:	40 91 1b 23 	lds	r20, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
     abe:	50 91 1c 23 	lds	r21, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
     ac2:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <gMarkLastHmiI2cActivity>
     ac6:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <gMarkLastHmiI2cActivity+0x1>
     aca:	a0 91 32 22 	lds	r26, 0x2232	; 0x802232 <gMarkLastHmiI2cActivity+0x2>
     ace:	b0 91 33 22 	lds	r27, 0x2233	; 0x802233 <gMarkLastHmiI2cActivity+0x3>
     ad2:	79 01       	movw	r14, r18
     ad4:	8a 01       	movw	r16, r20
     ad6:	e8 1a       	sub	r14, r24
     ad8:	f9 0a       	sbc	r15, r25
     ada:	0a 0b       	sbc	r16, r26
     adc:	1b 0b       	sbc	r17, r27
     ade:	d8 01       	movw	r26, r16
     ae0:	c7 01       	movw	r24, r14
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	ab 83       	std	Y+3, r26	; 0x03
     ae8:	bc 83       	std	Y+4, r27	; 0x04
	if(dwDiff > 5)
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	ab 81       	ldd	r26, Y+3	; 0x03
     af0:	bc 81       	ldd	r27, Y+4	; 0x04
     af2:	06 97       	sbiw	r24, 0x06	; 6
     af4:	a1 05       	cpc	r26, r1
     af6:	b1 05       	cpc	r27, r1
     af8:	90 f0       	brcs	.+36     	; 0xb1e <hmiI2cReady+0xcc>
	{
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
     afa:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
     afe:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
     b02:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
     b06:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
     b0a:	80 93 30 22 	sts	0x2230, r24	; 0x802230 <gMarkLastHmiI2cActivity>
     b0e:	90 93 31 22 	sts	0x2231, r25	; 0x802231 <gMarkLastHmiI2cActivity+0x1>
     b12:	a0 93 32 22 	sts	0x2232, r26	; 0x802232 <gMarkLastHmiI2cActivity+0x2>
     b16:	b0 93 33 22 	sts	0x2233, r27	; 0x802233 <gMarkLastHmiI2cActivity+0x3>
		
		hmiI2cInit();
     b1a:	0e 94 01 05 	call	0xa02	; 0xa02 <hmiI2cInit>
	}

	bool twi_status = (gHmiI2c.cStatus == HmiI2cReady);
     b1e:	90 91 2e 22 	lds	r25, 0x222E	; 0x80222e <gHmiI2c+0xb>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	99 23       	and	r25, r25
     b26:	09 f0       	breq	.+2      	; 0xb2a <hmiI2cReady+0xd8>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	8d 83       	std	Y+5, r24	; 0x05
	return twi_status;
     b2c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b2e:	25 96       	adiw	r28, 0x05	; 5
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <hmiI2cWrite>:
 *  \retval 
 */
void hmiI2cWrite(uint8_t cAddress
                     ,uint8_t *pcWriteData
                     ,uint8_t cCountOfBytesToWrite)
{
     b42:	0f 93       	push	r16
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	00 d0       	rcall	.+0      	; 0xb4a <hmiI2cWrite+0x8>
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
     b54:	7b 83       	std	Y+3, r23	; 0x03
     b56:	4c 83       	std	Y+4, r20	; 0x04
	hmiI2cWriteRead(cAddress, pcWriteData, cCountOfBytesToWrite, 0, 0);
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 e0       	ldi	r16, 0x00	; 0
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	4c 81       	ldd	r20, Y+4	; 0x04
     b64:	bc 01       	movw	r22, r24
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	0e 94 be 05 	call	0xb7c	; 0xb7c <hmiI2cWriteRead>
}
     b6c:	00 00       	nop
     b6e:	24 96       	adiw	r28, 0x04	; 4
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <hmiI2cWriteRead>:
void hmiI2cWriteRead(uint8_t cAddress,
                         uint8_t *pcWriteData,
                         uint8_t cCountOfBytesToWrite,
								 uint8_t *pcReadBuffer,
                         uint8_t cCountOfBytesToRead)
{
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	27 97       	sbiw	r28, 0x07	; 7
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	6a 83       	std	Y+2, r22	; 0x02
     b92:	7b 83       	std	Y+3, r23	; 0x03
     b94:	4c 83       	std	Y+4, r20	; 0x04
     b96:	2d 83       	std	Y+5, r18	; 0x05
     b98:	3e 83       	std	Y+6, r19	; 0x06
     b9a:	0f 83       	std	Y+7, r16	; 0x07
	/*Initiate transaction */
	gHmiI2c.cStatus = HmiI2cBusy;	/* indicate a transaction is in progress */
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <gHmiI2c+0xb>
	gHmiI2c.cResult = HmiI2cResultUnknown;	/* indicate a transaction is not finished */
     ba2:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <gHmiI2c+0xc>

	gHmiI2c.cAddress = cAddress;
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	80 93 25 22 	sts	0x2225, r24	; 0x802225 <gHmiI2c+0x2>

	/* Note the start of the data to be written */
	gHmiI2c.pcWriteData = pcWriteData;
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	9b 81       	ldd	r25, Y+3	; 0x03
     bb0:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <gHmiI2c+0x3>
     bb4:	90 93 27 22 	sts	0x2227, r25	; 0x802227 <gHmiI2c+0x4>
	
	gHmiI2c.pcReadBuf = pcReadBuffer;
     bb8:	8d 81       	ldd	r24, Y+5	; 0x05
     bba:	9e 81       	ldd	r25, Y+6	; 0x06
     bbc:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <gHmiI2c+0x5>
     bc0:	90 93 29 22 	sts	0x2229, r25	; 0x802229 <gHmiI2c+0x6>

	gHmiI2c.cCountOfBytesToWrite = cCountOfBytesToWrite;
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	80 93 2a 22 	sts	0x222A, r24	; 0x80222a <gHmiI2c+0x7>
	gHmiI2c.cCountOfBytesToRead = cCountOfBytesToRead;
     bca:	8f 81       	ldd	r24, Y+7	; 0x07
     bcc:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <gHmiI2c+0x8>
	gHmiI2c.cCountOfBytesRead = 0;
     bd0:	10 92 2d 22 	sts	0x222D, r1	; 0x80222d <gHmiI2c+0xa>

	if(gHmiI2c.cCountOfBytesToWrite > 0) 
     bd4:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <gHmiI2c+0x7>
     bd8:	88 23       	and	r24, r24
     bda:	59 f0       	breq	.+22     	; 0xbf2 <hmiI2cWriteRead+0x76>
	{	/* write request */
		/* send the START condition + Address +Write ('R/_W = 0') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressWrite(gHmiI2c.cAddress);
     bdc:	00 91 23 22 	lds	r16, 0x2223	; 0x802223 <gHmiI2c>
     be0:	10 91 24 22 	lds	r17, 0x2224	; 0x802224 <gHmiI2c+0x1>
     be4:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <gHmiI2c+0x2>
     be8:	0e 94 17 07 	call	0xe2e	; 0xe2e <i2cFormatSlaveAddressWrite>
     bec:	f8 01       	movw	r30, r16
     bee:	86 83       	std	Z+6, r24	; 0x06
		/* send the START condition + Address +Read('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
	}
	else
	{}	/* Should never be a request which neither writes nor reads anything */
}
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <hmiI2cWriteRead+0x92>
	if(gHmiI2c.cCountOfBytesToWrite > 0) 
	{	/* write request */
		/* send the START condition + Address +Write ('R/_W = 0') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressWrite(gHmiI2c.cAddress);
	}
	else if(gHmiI2c.cCountOfBytesToRead > 0) 
     bf2:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <gHmiI2c+0x8>
     bf6:	88 23       	and	r24, r24
     bf8:	51 f0       	breq	.+20     	; 0xc0e <hmiI2cWriteRead+0x92>
	{	/* read request */
		/* send the START condition + Address +Read('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
     bfa:	00 91 23 22 	lds	r16, 0x2223	; 0x802223 <gHmiI2c>
     bfe:	10 91 24 22 	lds	r17, 0x2224	; 0x802224 <gHmiI2c+0x1>
     c02:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <gHmiI2c+0x2>
     c06:	0e 94 02 07 	call	0xe04	; 0xe04 <i2cFormatSlaveAddressRead>
     c0a:	f8 01       	movw	r30, r16
     c0c:	86 83       	std	Z+6, r24	; 0x06
	}
	else
	{}	/* Should never be a request which neither writes nor reads anything */
}
     c0e:	00 00       	nop
     c10:	27 96       	adiw	r28, 0x07	; 7
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <__vector_46>:
 *  Check current status and calls the appropriate handler.
 *
 */
/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c30:	0f 92       	push	r0
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	1f 92       	push	r1
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = gHmiI2c.pInterface->MASTER.STATUS;
     c54:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     c58:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     c5c:	fc 01       	movw	r30, r24
     c5e:	84 81       	ldd	r24, Z+4	; 0x04
     c60:	89 83       	std	Y+1, r24	; 0x01
	
	if(currentStatus & (TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm))
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	8c 70       	andi	r24, 0x0C	; 12
     c6a:	99 27       	eor	r25, r25
     c6c:	89 2b       	or	r24, r25
     c6e:	19 f0       	breq	.+6      	; 0xc76 <__vector_46+0x56>
	{	/* arbitration lost or bus error */
		hmiI2cArbitrationLostBusErrorHandler();
     c70:	0e 94 77 06 	call	0xcee	; 0xcee <hmiI2cArbitrationLostBusErrorHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
     c74:	23 c0       	rjmp	.+70     	; 0xcbc <__vector_46+0x9c>
	
	if(currentStatus & (TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm))
	{	/* arbitration lost or bus error */
		hmiI2cArbitrationLostBusErrorHandler();
	}
	else if(currentStatus & TWI_MASTER_WIF_bm) 
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	80 74       	andi	r24, 0x40	; 64
     c7e:	99 27       	eor	r25, r25
     c80:	89 2b       	or	r24, r25
     c82:	99 f0       	breq	.+38     	; 0xcaa <__vector_46+0x8a>
	{	/* write interrupt */
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
     c84:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
     c88:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
     c8c:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
     c90:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
     c94:	80 93 30 22 	sts	0x2230, r24	; 0x802230 <gMarkLastHmiI2cActivity>
     c98:	90 93 31 22 	sts	0x2231, r25	; 0x802231 <gMarkLastHmiI2cActivity+0x1>
     c9c:	a0 93 32 22 	sts	0x2232, r26	; 0x802232 <gMarkLastHmiI2cActivity+0x2>
     ca0:	b0 93 33 22 	sts	0x2233, r27	; 0x802233 <gMarkLastHmiI2cActivity+0x3>
		
		hmiI2cWriteHandler();
     ca4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <hmiI2cWriteHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <__vector_46+0x9c>
	{	/* write interrupt */
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
		
		hmiI2cWriteHandler();
	}	
	else if(currentStatus & TWI_MASTER_RIF_bm) 
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	88 23       	and	r24, r24
     cae:	1c f4       	brge	.+6      	; 0xcb6 <__vector_46+0x96>
	{	/* read interrupt */
		hmiI2cReadHandler();
     cb0:	0e 94 29 07 	call	0xe52	; 0xe52 <hmiI2cReadHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <__vector_46+0x9c>
	{	/* read interrupt */
		hmiI2cReadHandler();
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	0e 94 69 07 	call	0xed2	; 0xed2 <hmiI2cTransactionFinished>
	}
}
     cbc:	00 00       	nop
     cbe:	0f 90       	pop	r0
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ce2:	0f 90       	pop	r0
     ce4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <hmiI2cArbitrationLostBusErrorHandler>:
 *
 *  Handles TWI responses to lost arbitration and bus error.
 *
 */
inline static void hmiI2cArbitrationLostBusErrorHandler(void)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = gHmiI2c.pInterface->MASTER.STATUS;
     cf8:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     cfc:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     d00:	fc 01       	movw	r30, r24
     d02:	84 81       	ldd	r24, Z+4	; 0x04
     d04:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if(currentStatus & TWI_MASTER_BUSERR_bm) 
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	84 70       	andi	r24, 0x04	; 4
     d0e:	99 27       	eor	r25, r25
     d10:	89 2b       	or	r24, r25
     d12:	21 f0       	breq	.+8      	; 0xd1c <hmiI2cArbitrationLostBusErrorHandler+0x2e>
	{
		gHmiI2c.cResult = HmiI2cResultBusError;
     d14:	84 e0       	ldi	r24, 0x04	; 4
     d16:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <gHmiI2c+0xc>
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <hmiI2cArbitrationLostBusErrorHandler+0x34>
	}
	/* If arbitration lost. */
	else 
	{
		gHmiI2c.cResult = HmiI2cResultArbitrationLost;
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <gHmiI2c+0xc>
	}

	/* Clear interrupt flag. */
	gHmiI2c.pInterface->MASTER.STATUS =(TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm);
     d22:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     d26:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     d2a:	2c e0       	ldi	r18, 0x0C	; 12
     d2c:	fc 01       	movw	r30, r24
     d2e:	24 83       	std	Z+4, r18	; 0x04

	gHmiI2c.cStatus = HmiI2cReady;
     d30:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <gHmiI2c+0xb>
}
     d34:	00 00       	nop
     d36:	0f 90       	pop	r0
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <hmiI2cWriteHandler>:
 *
 *  Handles TWI transactions(master write) and responses to(N)ACK.
 *
 */
inline static void hmiI2cWriteHandler(void)
{
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	1f 92       	push	r1
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	if(gHmiI2c.pInterface->MASTER.STATUS & TWI_MASTER_RXACK_bm) 
     d4c:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     d50:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     d54:	fc 01       	movw	r30, r24
     d56:	84 81       	ldd	r24, Z+4	; 0x04
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	80 71       	andi	r24, 0x10	; 16
     d5e:	99 27       	eor	r25, r25
     d60:	89 2b       	or	r24, r25
     d62:	69 f0       	breq	.+26     	; 0xd7e <hmiI2cWriteHandler+0x40>
	{	/* NOT acknowledged(NACK) by slave */
		/* cancel the transaction */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d64:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     d68:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     d6c:	23 e0       	ldi	r18, 0x03	; 3
     d6e:	fc 01       	movw	r30, r24
     d70:	23 83       	std	Z+3, r18	; 0x03
		gHmiI2c.cResult = HmiI2cResultNackReceived;
     d72:	85 e0       	ldi	r24, 0x05	; 5
     d74:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <gHmiI2c+0xc>
		gHmiI2c.cStatus = HmiI2cReady;
     d78:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <gHmiI2c+0xb>
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
     d7c:	3c c0       	rjmp	.+120    	; 0xdf6 <hmiI2cWriteHandler+0xb8>
		/* cancel the transaction */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		gHmiI2c.cResult = HmiI2cResultNackReceived;
		gHmiI2c.cStatus = HmiI2cReady;
	}
	else if(gHmiI2c.cCountOfBytesToWrite != 0) 
     d7e:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <gHmiI2c+0x7>
     d82:	88 23       	and	r24, r24
     d84:	e9 f0       	breq	.+58     	; 0xdc0 <hmiI2cWriteHandler+0x82>
	{	/* more data to write */
		/* send next byte */
		gHmiI2c.cCountOfBytesToWrite--;
     d86:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <gHmiI2c+0x7>
     d8a:	81 50       	subi	r24, 0x01	; 1
     d8c:	80 93 2a 22 	sts	0x222A, r24	; 0x80222a <gHmiI2c+0x7>
	
		uint8_t data = *(gHmiI2c.pcWriteData);
     d90:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <gHmiI2c+0x3>
     d94:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <gHmiI2c+0x4>
     d98:	fc 01       	movw	r30, r24
     d9a:	80 81       	ld	r24, Z
     d9c:	89 83       	std	Y+1, r24	; 0x01
		gHmiI2c.pInterface->MASTER.DATA = data;
     d9e:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     da2:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     da6:	29 81       	ldd	r18, Y+1	; 0x01
     da8:	fc 01       	movw	r30, r24
     daa:	27 83       	std	Z+7, r18	; 0x07
		gHmiI2c.pcWriteData++;
     dac:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <gHmiI2c+0x3>
     db0:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <gHmiI2c+0x4>
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <gHmiI2c+0x3>
     dba:	90 93 27 22 	sts	0x2227, r25	; 0x802227 <gHmiI2c+0x4>
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
     dbe:	1b c0       	rjmp	.+54     	; 0xdf6 <hmiI2cWriteHandler+0xb8>
	
		uint8_t data = *(gHmiI2c.pcWriteData);
		gHmiI2c.pInterface->MASTER.DATA = data;
		gHmiI2c.pcWriteData++;
	}
	else if(gHmiI2c.cCountOfBytesRead < gHmiI2c.cCountOfBytesToRead) 
     dc0:	90 91 2d 22 	lds	r25, 0x222D	; 0x80222d <gHmiI2c+0xa>
     dc4:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <gHmiI2c+0x8>
     dc8:	98 17       	cp	r25, r24
     dca:	58 f4       	brcc	.+22     	; 0xde2 <hmiI2cWriteHandler+0xa4>
	{	/* setup data written, target data to be read */
		/* send repeated START condition + Address + Read ('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
     dcc:	00 91 23 22 	lds	r16, 0x2223	; 0x802223 <gHmiI2c>
     dd0:	10 91 24 22 	lds	r17, 0x2224	; 0x802224 <gHmiI2c+0x1>
     dd4:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <gHmiI2c+0x2>
     dd8:	0e 94 02 07 	call	0xe04	; 0xe04 <i2cFormatSlaveAddressRead>
     ddc:	f8 01       	movw	r30, r16
     dde:	86 83       	std	Z+6, r24	; 0x06
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
     de0:	0a c0       	rjmp	.+20     	; 0xdf6 <hmiI2cWriteHandler+0xb8>
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
	}
	else 
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     de2:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     de6:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     dea:	23 e0       	ldi	r18, 0x03	; 3
     dec:	fc 01       	movw	r30, r24
     dee:	23 83       	std	Z+3, r18	; 0x03
		hmiI2cTransactionFinished(HmiI2cResultOK);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 69 07 	call	0xed2	; 0xed2 <hmiI2cTransactionFinished>
	}
}
     df6:	00 00       	nop
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <i2cFormatSlaveAddressRead>:

inline static uint8_t i2cFormatSlaveAddressRead(uint8_t cAddress)
{
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	1f 92       	push	r1
     e0a:	1f 92       	push	r1
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t cSlaveAddress = cAddress;
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress <<= 1;	/* shift the slave address into position */
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	88 0f       	add	r24, r24
     e1a:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress |= 0x01;	/* include the READ bit */
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	89 83       	std	Y+1, r24	; 0x01

	return cSlaveAddress;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <i2cFormatSlaveAddressWrite>:

inline static uint8_t i2cFormatSlaveAddressWrite(uint8_t cAddress)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	1f 92       	push	r1
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t cSlaveAddress = cAddress;
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress <<= 1;	/* shift the slave address into position */
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	88 0f       	add	r24, r24
     e44:	89 83       	std	Y+1, r24	; 0x01

	return cSlaveAddress;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <hmiI2cReadHandler>:
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 *
 */
inline static void hmiI2cReadHandler(void)
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	1f 92       	push	r1
     e58:	1f 92       	push	r1
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = gHmiI2c.pInterface->MASTER.DATA;
     e5e:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     e62:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     e66:	fc 01       	movw	r30, r24
     e68:	87 81       	ldd	r24, Z+7	; 0x07
     e6a:	89 83       	std	Y+1, r24	; 0x01
	*(gHmiI2c.pcReadBuf)++ = data;
     e6c:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <gHmiI2c+0x5>
     e70:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <gHmiI2c+0x6>
     e74:	9c 01       	movw	r18, r24
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	20 93 28 22 	sts	0x2228, r18	; 0x802228 <gHmiI2c+0x5>
     e7e:	30 93 29 22 	sts	0x2229, r19	; 0x802229 <gHmiI2c+0x6>
     e82:	29 81       	ldd	r18, Y+1	; 0x01
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
	gHmiI2c.cCountOfBytesRead++;
     e88:	80 91 2d 22 	lds	r24, 0x222D	; 0x80222d <gHmiI2c+0xa>
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	80 93 2d 22 	sts	0x222D, r24	; 0x80222d <gHmiI2c+0xa>

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t cCountOfBytesToRead = gHmiI2c.cCountOfBytesToRead;
     e92:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <gHmiI2c+0x8>
     e96:	8a 83       	std	Y+2, r24	; 0x02

	
	if(gHmiI2c.cCountOfBytesRead < cCountOfBytesToRead) 
     e98:	90 91 2d 22 	lds	r25, 0x222D	; 0x80222d <gHmiI2c+0xa>
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	98 17       	cp	r25, r24
     ea0:	40 f4       	brcc	.+16     	; 0xeb2 <hmiI2cReadHandler+0x60>
	{	/* more bytes to read */
		/* issue ACK to start next byte read */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     ea2:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     ea6:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     eaa:	22 e0       	ldi	r18, 0x02	; 2
     eac:	fc 01       	movw	r30, r24
     eae:	23 83       	std	Z+3, r18	; 0x03
	{	/* transaction finished */
		/* issue NACK and STOP condition. */
		gHmiI2c.pInterface->MASTER.CTRLC = (TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc);
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
     eb0:	0a c0       	rjmp	.+20     	; 0xec6 <hmiI2cReadHandler+0x74>
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}
	else 
	{	/* transaction finished */
		/* issue NACK and STOP condition. */
		gHmiI2c.pInterface->MASTER.CTRLC = (TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc);
     eb2:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <gHmiI2c>
     eb6:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <gHmiI2c+0x1>
     eba:	27 e0       	ldi	r18, 0x07	; 7
     ebc:	fc 01       	movw	r30, r24
     ebe:	23 83       	std	Z+3, r18	; 0x03
		hmiI2cTransactionFinished(HmiI2cResultOK);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	0e 94 69 07 	call	0xed2	; 0xed2 <hmiI2cTransactionFinished>
	}
}
     ec6:	00 00       	nop
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <hmiI2cTransactionFinished>:
 *
 *  \param twi     The hmiI2c_t struct instance.
 *  \param result  The result of the operation.
 */
static inline void hmiI2cTransactionFinished(uint8_t result)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	89 83       	std	Y+1, r24	; 0x01
	gHmiI2c.cResult = result;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <gHmiI2c+0xc>
	gHmiI2c.cStatus = HmiI2cReady;
     ee4:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <gHmiI2c+0xb>
}
     ee8:	00 00       	nop
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <EnableInterrupts>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

static inline void EnableInterrupts(void)	{sei();}
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	78 94       	sei
     efc:	00 00       	nop
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <systemInitialisation>:

/** Initialise everything
	\return Nothing
*/
void systemInitialisation(void)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	1f 92       	push	r1
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	/* After Power-on-Reset, the XMEGA configures itself to use the internal 2MHz internal oscillator */
	/* The watchdog is enabled, locked and the interval set using the programmed FUSES */

	dspResetHold();	/* Assert the display reset signal early and hold */
     f0e:	0e 94 87 03 	call	0x70e	; 0x70e <dspResetHold>
	ledResetHold();	/* Assert the LED ICs reset signal early and hold */
     f12:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ledResetHold>
	watchdogInit();	/* Watchdog active as soon as possible */
     f16:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <watchdogInit>
	
	/* delay to give the power time to settle */
	delayAfterPowerOnReset();	
     f1a:	0e 94 fa 07 	call	0xff4	; 0xff4 <delayAfterPowerOnReset>
	
	cpuClockInit();	/* Configure the clock source and frequency to be used */
     f1e:	0e 94 cb 07 	call	0xf96	; 0xf96 <cpuClockInit>
	rstInit();
     f22:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <rstInit>
	dspResetHold();	/* Assert the display reset signal and hold */
     f26:	0e 94 87 03 	call	0x70e	; 0x70e <dspResetHold>
	ledResetHold();	/* Assert the LED ICs reset signal early and hold */
     f2a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ledResetHold>
	pscI2cInit();
     f2e:	0e 94 4a 12 	call	0x2494	; 0x2494 <pscI2cInit>
	hmiI2cInit();
     f32:	0e 94 01 05 	call	0xa02	; 0xa02 <hmiI2cInit>
	adcInit();	/* forSupplyVoltageMeasurement, AmbientLightLevelMeasurement */
     f36:	0e 94 07 01 	call	0x20e	; 0x20e <adcInit>
	proximitySensorInit();	/* Configure Prox. Sensor */
     f3a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <proximitySensorInit>
	btnInitButtons();
     f3e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <btnInitButtons>
	manualResetDetectInit();
     f42:	0e 94 bd 11 	call	0x237a	; 0x237a <manualResetDetectInit>
	beepInit();
     f46:	0e 94 ba 01 	call	0x374	; 0x374 <beepInit>
	lowPowerInit(); /* Standby / low power (off / normal running mode) */
     f4a:	0e 94 ac 09 	call	0x1358	; 0x1358 <lowPowerInit>
	mainTimerInit();	/* Used for general timing */
     f4e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <mainTimerInit>
	dspInit();
     f52:	0e 94 9e 03 	call	0x73c	; 0x73c <dspInit>
	ledDriverInit();
     f56:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ledDriverInit>
	spiInit();
     f5a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <spiInit>
	esfInit();
     f5e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <esfInit>
	quadInit();
     f62:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <quadInit>


	
	/* wait for external devices to be ready after reset */
	/* The LED driver ICs require 2 ms after power up to fully wake up */
	delayAfterExternalHardwareReset();
     f66:	0e 94 2a 08 	call	0x1054	; 0x1054 <delayAfterExternalHardwareReset>

	uint8_t lastReasonForReset = rstGetLastReasonForReset();
     f6a:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <rstGetLastReasonForReset>
     f6e:	89 83       	std	Y+1, r24	; 0x01
	pscSetLastReasonForReset(lastReasonForReset);
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	0e 94 30 12 	call	0x2460	; 0x2460 <pscSetLastReasonForReset>
	
	
	/* Enable low interrupt level */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     f76:	80 ea       	ldi	r24, 0xA0	; 160
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	20 ea       	ldi	r18, 0xA0	; 160
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	f9 01       	movw	r30, r18
     f80:	22 81       	ldd	r18, Z+2	; 0x02
     f82:	21 60       	ori	r18, 0x01	; 1
     f84:	fc 01       	movw	r30, r24
     f86:	22 83       	std	Z+2, r18	; 0x02

	/* Enable global interrupts */
	EnableInterrupts();
     f88:	0e 94 79 07 	call	0xef2	; 0xef2 <EnableInterrupts>
}
     f8c:	00 00       	nop
     f8e:	0f 90       	pop	r0
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <cpuClockInit>:
	(NOTE the RS485 and bluetooth units use UART comms, but these are not fitted to production PCBA)
	The external xtal is not fitted to production PCBA.
	\return Nothing
*/   
static void cpuClockInit(void)
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	/*  Configure PLL with the 2 MHz RC oscillator as source and
	 *  multiply by 4 to yield 8 MHz PLL clock. Wait
	 *  for it to be stable and set prescaler C to divide by two
	 *  CPU clock = 8 MHz
	 */
	CLKSYS_PLL_Config(OSC_PLLSRC_RC2M_gc, 4);	/* multiply by 4 */
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	0e 94 ab 02 	call	0x556	; 0x556 <CLKSYS_PLL_Config>
	CLKSYS_Enable(OSC_PLLEN_bm);	/* Enable the clock source */
     fa6:	80 e5       	ldi	r24, 0x50	; 80
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	20 e5       	ldi	r18, 0x50	; 80
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	f9 01       	movw	r30, r18
     fb0:	20 81       	ld	r18, Z
     fb2:	20 61       	ori	r18, 0x10	; 16
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config(CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);	/* Set the prescalers to 1. No division */
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 c3 02 	call	0x586	; 0x586 <CLKSYS_Prescalers_Config>
	
	/* Wait for clock source to be stable */
	while(CLKSYS_IsReady(OSC_PLLRDY_bm) == 0)
     fc0:	00 00       	nop
     fc2:	80 e5       	ldi	r24, 0x50	; 80
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	fc 01       	movw	r30, r24
     fc8:	81 81       	ldd	r24, Z+1	; 0x01
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	80 71       	andi	r24, 0x10	; 16
     fd0:	99 27       	eor	r25, r25
     fd2:	89 2b       	or	r24, r25
     fd4:	b1 f3       	breq	.-20     	; 0xfc2 <cpuClockInit+0x2c>
	{}
		
	/* Select the clock source */
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_PLL_gc);
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <CLKSYS_Main_ClockSource_Select>
}
     fdc:	00 00       	nop
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <watchdogInit>:
/** Initialise the Watchdog
	Nothing to do in firmware, The watchdog is enabled, locked and the interval set using the programmed FUSES
	\return Nothing
*/   
static void watchdogInit(void)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	/* The watchdog is enabled, locked and the interval set using the programmed FUSES */
}
     fec:	00 00       	nop
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <delayAfterPowerOnReset>:

/** Create a delay after reset
	\return Nothing
*/   
static void delayAfterPowerOnReset(void)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	/* Set up Timer/Counter 0 .
		CPU clock is 2 MHz
		prescale / divide by 2 to yield 1 MHz, or 1us timer clock
		Count full 16-bit range yields 65 ms
	 */
	TCD0.PER = 0;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	99 e0       	ldi	r25, 0x09	; 9
    1000:	fc 01       	movw	r30, r24
    1002:	16 a2       	std	Z+38, r1	; 0x26
    1004:	17 a2       	std	Z+39, r1	; 0x27
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV2_gc;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	99 e0       	ldi	r25, 0x09	; 9
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	39 e0       	ldi	r19, 0x09	; 9
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	20 7f       	andi	r18, 0xF0	; 240
    1014:	22 60       	ori	r18, 0x02	; 2
    1016:	fc 01       	movw	r30, r24
    1018:	20 83       	st	Z, r18
	
	/* Wait until the interval has ellapsed */
	while((TCD0.INTFLAGS & TC0_OVFIF_bm) == 0)
    101a:	00 00       	nop
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	99 e0       	ldi	r25, 0x09	; 9
    1020:	fc 01       	movw	r30, r24
    1022:	84 85       	ldd	r24, Z+12	; 0x0c
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	99 27       	eor	r25, r25
    102c:	89 2b       	or	r24, r25
    102e:	b1 f3       	breq	.-20     	; 0x101c <delayAfterPowerOnReset+0x28>
	{}

	/* Disable the timer */
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm );
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	99 e0       	ldi	r25, 0x09	; 9
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	39 e0       	ldi	r19, 0x09	; 9
    1038:	f9 01       	movw	r30, r18
    103a:	20 81       	ld	r18, Z
    103c:	20 7f       	andi	r18, 0xF0	; 240
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18
	
	/* Clear the overflow flag */
	TCD0.INTFLAGS = TC0_OVFIF_bm;
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	99 e0       	ldi	r25, 0x09	; 9
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	fc 01       	movw	r30, r24
    104a:	24 87       	std	Z+12, r18	; 0x0c
}
    104c:	00 00       	nop
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <delayAfterExternalHardwareReset>:


static void delayAfterExternalHardwareReset(void)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	/* Set up Timer/Counter 0 .
		CPU clock is 8 MHz
		Count full 16-bit range yields 8 ms
	 */
	TCD0.PER = 0;
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	99 e0       	ldi	r25, 0x09	; 9
    1060:	fc 01       	movw	r30, r24
    1062:	16 a2       	std	Z+38, r1	; 0x26
    1064:	17 a2       	std	Z+39, r1	; 0x27
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	99 e0       	ldi	r25, 0x09	; 9
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	39 e0       	ldi	r19, 0x09	; 9
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	20 7f       	andi	r18, 0xF0	; 240
    1074:	21 60       	ori	r18, 0x01	; 1
    1076:	fc 01       	movw	r30, r24
    1078:	20 83       	st	Z, r18
	
	/* Wait until the interval has ellapsed */
	while((TCD0.INTFLAGS & TC0_OVFIF_bm) == 0)
    107a:	00 00       	nop
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	99 e0       	ldi	r25, 0x09	; 9
    1080:	fc 01       	movw	r30, r24
    1082:	84 85       	ldd	r24, Z+12	; 0x0c
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	99 27       	eor	r25, r25
    108c:	89 2b       	or	r24, r25
    108e:	b1 f3       	breq	.-20     	; 0x107c <delayAfterExternalHardwareReset+0x28>
	{}

	/* Disable the timer */
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm );
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	99 e0       	ldi	r25, 0x09	; 9
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	39 e0       	ldi	r19, 0x09	; 9
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	20 7f       	andi	r18, 0xF0	; 240
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
	
	/* Clear the overflow flag */
	TCD0.INTFLAGS = TC0_OVFIF_bm;
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	99 e0       	ldi	r25, 0x09	; 9
    10a6:	21 e0       	ldi	r18, 0x01	; 1
    10a8:	fc 01       	movw	r30, r24
    10aa:	24 87       	std	Z+12, r18	; 0x0c
}
    10ac:	00 00       	nop
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <ledResetHold>:
	pLedDriver->cRegister[cRegisterIndex] = cRed;
	cRegisterIndex++;	/* Advance to next register */
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
	cRegisterIndex++;	/* Advance to next register */
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
}
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	80 ea       	ldi	r24, 0xA0	; 160
    10be:	96 e0       	ldi	r25, 0x06	; 6
    10c0:	21 e0       	ldi	r18, 0x01	; 1
    10c2:	fc 01       	movw	r30, r24
    10c4:	25 83       	std	Z+5, r18	; 0x05
    10c6:	80 ea       	ldi	r24, 0xA0	; 160
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	fc 01       	movw	r30, r24
    10ce:	21 83       	std	Z+1, r18	; 0x01
    10d0:	80 ea       	ldi	r24, 0xA0	; 160
    10d2:	96 e0       	ldi	r25, 0x06	; 6
    10d4:	fc 01       	movw	r30, r24
    10d6:	10 8a       	std	Z+16, r1	; 0x10
    10d8:	00 00       	nop
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <ledDriverInit>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	80 ea       	ldi	r24, 0xA0	; 160
    10ea:	96 e0       	ldi	r25, 0x06	; 6
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	fc 01       	movw	r30, r24
    10f0:	26 83       	std	Z+6, r18	; 0x06
    10f2:	00 00       	nop
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <ledSetProgressSegmentColour>:

void ledSetProgressSegmentColour(uint8_t cSegment, uint8_t cInt, uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    10fa:	0f 93       	push	r16
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	2a 97       	sbiw	r28, 0x0a	; 10
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	8e 83       	std	Y+6, r24	; 0x06
    110c:	6f 83       	std	Y+7, r22	; 0x07
    110e:	48 87       	std	Y+8, r20	; 0x08
    1110:	29 87       	std	Y+9, r18	; 0x09
    1112:	0a 87       	std	Y+10, r16	; 0x0a
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The progress bar back-lights are arranged on four driver ICs */
	uint8_t driverIndex = cSegment / ProgressBarSegmentCountPerDriver;
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	8d ec       	ldi	r24, 0xCD	; 205
    1118:	98 9f       	mul	r25, r24
    111a:	81 2d       	mov	r24, r1
    111c:	11 24       	eor	r1, r1
    111e:	86 95       	lsr	r24
    1120:	86 95       	lsr	r24
    1122:	89 83       	std	Y+1, r24	; 0x01

	pLedDriver = &gLedProgressBar[driverIndex];
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	42 e4       	ldi	r20, 0x42	; 66
    112c:	42 9f       	mul	r20, r18
    112e:	c0 01       	movw	r24, r0
    1130:	43 9f       	mul	r20, r19
    1132:	90 0d       	add	r25, r0
    1134:	11 24       	eor	r1, r1
    1136:	8a 53       	subi	r24, 0x3A	; 58
    1138:	9f 4d       	sbci	r25, 0xDF	; 223
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	9b 83       	std	Y+3, r25	; 0x03

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	uint8_t driverSegment = cSegment % ProgressBarSegmentCountPerDriver;	/* range is 0 to 4 */
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	8d ec       	ldi	r24, 0xCD	; 205
    1142:	98 9f       	mul	r25, r24
    1144:	81 2d       	mov	r24, r1
    1146:	11 24       	eor	r1, r1
    1148:	28 2f       	mov	r18, r24
    114a:	26 95       	lsr	r18
    114c:	26 95       	lsr	r18
    114e:	82 2f       	mov	r24, r18
    1150:	88 0f       	add	r24, r24
    1152:	88 0f       	add	r24, r24
    1154:	82 0f       	add	r24, r18
    1156:	29 2f       	mov	r18, r25
    1158:	28 1b       	sub	r18, r24
    115a:	82 2f       	mov	r24, r18
    115c:	8c 83       	std	Y+4, r24	; 0x04
	cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	89 2f       	mov	r24, r25
    1162:	88 0f       	add	r24, r24
    1164:	89 0f       	add	r24, r25
    1166:	8d 83       	std	Y+5, r24	; 0x05
	cRegisterIndex += REG_IREF0;
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	88 5e       	subi	r24, 0xE8	; 232
    116c:	8d 83       	std	Y+5, r24	; 0x05
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    116e:	88 85       	ldd	r24, Y+8	; 0x08
    1170:	82 35       	cpi	r24, 0x52	; 82
    1172:	10 f0       	brcs	.+4      	; 0x1178 <ledSetProgressSegmentColour+0x7e>
	{
		cRed = ledDriverIref3mA;
    1174:	81 e5       	ldi	r24, 0x51	; 81
    1176:	88 87       	std	Y+8, r24	; 0x08
	}
	if(cGreen  > ledDriverIref3mA)
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	82 35       	cpi	r24, 0x52	; 82
    117c:	10 f0       	brcs	.+4      	; 0x1182 <ledSetProgressSegmentColour+0x88>
	{
		cGreen = ledDriverIref3mA;
    117e:	81 e5       	ldi	r24, 0x51	; 81
    1180:	89 87       	std	Y+9, r24	; 0x09
	}
	if(cBlue  > ledDriverIref3mA)
    1182:	8a 85       	ldd	r24, Y+10	; 0x0a
    1184:	82 35       	cpi	r24, 0x52	; 82
    1186:	10 f0       	brcs	.+4      	; 0x118c <ledSetProgressSegmentColour+0x92>
	{
		cBlue = ledDriverIref3mA;
    1188:	81 e5       	ldi	r24, 0x51	; 81
    118a:	8a 87       	std	Y+10, r24	; 0x0a
	}
	

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	2a 81       	ldd	r18, Y+2	; 0x02
    1194:	3b 81       	ldd	r19, Y+3	; 0x03
    1196:	82 0f       	add	r24, r18
    1198:	93 1f       	adc	r25, r19
    119a:	02 96       	adiw	r24, 0x02	; 2
    119c:	28 85       	ldd	r18, Y+8	; 0x08
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] =cGreen;
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	2a 81       	ldd	r18, Y+2	; 0x02
    11b0:	3b 81       	ldd	r19, Y+3	; 0x03
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	02 96       	adiw	r24, 0x02	; 2
    11b8:	29 85       	ldd	r18, Y+9	; 0x09
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	2a 81       	ldd	r18, Y+2	; 0x02
    11cc:	3b 81       	ldd	r19, Y+3	; 0x03
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	02 96       	adiw	r24, 0x02	; 2
    11d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	8d 83       	std	Y+5, r24	; 0x05
	
// 	///////////////////////////
	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	driverSegment = cSegment % ProgressBarSegmentCountPerDriver;	/* range is 0 to 4 */
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	8d ec       	ldi	r24, 0xCD	; 205
    11e4:	98 9f       	mul	r25, r24
    11e6:	81 2d       	mov	r24, r1
    11e8:	11 24       	eor	r1, r1
    11ea:	28 2f       	mov	r18, r24
    11ec:	26 95       	lsr	r18
    11ee:	26 95       	lsr	r18
    11f0:	82 2f       	mov	r24, r18
    11f2:	88 0f       	add	r24, r24
    11f4:	88 0f       	add	r24, r24
    11f6:	82 0f       	add	r24, r18
    11f8:	f9 2f       	mov	r31, r25
    11fa:	f8 1b       	sub	r31, r24
    11fc:	8f 2f       	mov	r24, r31
    11fe:	8c 83       	std	Y+4, r24	; 0x04
	cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	89 2f       	mov	r24, r25
    1204:	88 0f       	add	r24, r24
    1206:	89 0f       	add	r24, r25
    1208:	8d 83       	std	Y+5, r24	; 0x05
	cRegisterIndex += REG_PWM0;
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	88 5f       	subi	r24, 0xF8	; 248
    120e:	8d 83       	std	Y+5, r24	; 0x05
	
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	2a 81       	ldd	r18, Y+2	; 0x02
    1218:	3b 81       	ldd	r19, Y+3	; 0x03
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	02 96       	adiw	r24, 0x02	; 2
    1220:	2f 81       	ldd	r18, Y+7	; 0x07
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	2a 81       	ldd	r18, Y+2	; 0x02
    1234:	3b 81       	ldd	r19, Y+3	; 0x03
    1236:	82 0f       	add	r24, r18
    1238:	93 1f       	adc	r25, r19
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	2f 81       	ldd	r18, Y+7	; 0x07
    123e:	fc 01       	movw	r30, r24
    1240:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	2a 81       	ldd	r18, Y+2	; 0x02
    1250:	3b 81       	ldd	r19, Y+3	; 0x03
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	02 96       	adiw	r24, 0x02	; 2
    1258:	2f 81       	ldd	r18, Y+7	; 0x07
    125a:	fc 01       	movw	r30, r24
    125c:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	8d 83       	std	Y+5, r24	; 0x05

}
    1264:	00 00       	nop
    1266:	2a 96       	adiw	r28, 0x0a	; 10
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <ledIndexToRegisterCache>:

static LedDriver_t* ledIndexToRegisterCache(uint8_t cLedIcIndex)
{
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	00 d0       	rcall	.+0      	; 0x127a <ledIndexToRegisterCache+0x6>
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	8b 83       	std	Y+3, r24	; 0x03
	LedDriver_t* pLedDriver;

	pLedDriver = &gLedIndicators;
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e2       	ldi	r25, 0x20	; 32
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	9a 83       	std	Y+2, r25	; 0x02

	if(cLedIcIndex <= ledIndex_DriverIc_Progress3)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	70 f4       	brcc	.+28     	; 0x12aa <ledIndexToRegisterCache+0x36>
	{
		pLedDriver = &gLedProgressBar[cLedIcIndex]; 	/* Led Driver ICs for Progress Bar */
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	42 e4       	ldi	r20, 0x42	; 66
    1296:	42 9f       	mul	r20, r18
    1298:	c0 01       	movw	r24, r0
    129a:	43 9f       	mul	r20, r19
    129c:	90 0d       	add	r25, r0
    129e:	11 24       	eor	r1, r1
    12a0:	8a 53       	subi	r24, 0x3A	; 58
    12a2:	9f 4d       	sbci	r25, 0xDF	; 223
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	17 c0       	rjmp	.+46     	; 0x12d8 <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_Indicators)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	29 f4       	brne	.+10     	; 0x12ba <ledIndexToRegisterCache+0x46>
	{
		pLedDriver = &gLedIndicators;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e2       	ldi	r25, 0x20	; 32
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_ButtonsLeftAndCtr)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	85 30       	cpi	r24, 0x05	; 5
    12be:	29 f4       	brne	.+10     	; 0x12ca <ledIndexToRegisterCache+0x56>
	{
		pLedDriver = &gLedButtonsLeftAndCtr; 	/* Led Driver IC for the Left and Centre buttons */
    12c0:	82 e4       	ldi	r24, 0x42	; 66
    12c2:	90 e2       	ldi	r25, 0x20	; 32
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_ButtonsCtrAndRight)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	86 30       	cpi	r24, 0x06	; 6
    12ce:	21 f4       	brne	.+8      	; 0x12d8 <ledIndexToRegisterCache+0x64>
	{
		pLedDriver = &gLedButtonsCtrAndRight; 	/* Led Driver IC for the Centre and Right buttons */
    12d0:	84 e8       	ldi	r24, 0x84	; 132
    12d2:	90 e2       	ldi	r25, 0x20	; 32
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	9a 83       	std	Y+2, r25	; 0x02
	}
	else
	{}

	return pLedDriver;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12dc:	23 96       	adiw	r28, 0x03	; 3
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <ledManager>:

/** Manage the LED driver IC settings.
	\return Nothing
*/   
void ledManager(void)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	1f 92       	push	r1
    12ee:	1f 92       	push	r1
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	LedDriver_t* pLedDriver;

	
	if(gc10msTick_Local == gc10msTick)
    12f4:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <gc10msTick_Local>
    12f8:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gc10msTick>
    12fc:	98 17       	cp	r25, r24
    12fe:	31 f1       	breq	.+76     	; 0x134c <ledManager+0x64>
	{}	/* Leave some time between accesses on the I2C, to give the prox sensor access an opportunity */
	else if(hmiI2cReady())
    1300:	0e 94 29 05 	call	0xa52	; 0xa52 <hmiI2cReady>
    1304:	88 23       	and	r24, r24
    1306:	11 f1       	breq	.+68     	; 0x134c <ledManager+0x64>
	{	/* HMI I2C bus is free */

		/* get a pointer to the LED IC variable */
		pLedDriver = ledIndexToRegisterCache(gcLedIcIndex);
    1308:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <gcLedIcIndex>
    130c:	0e 94 3a 09 	call	0x1274	; 0x1274 <ledIndexToRegisterCache>
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	9a 83       	std	Y+2, r25	; 0x02
		/* send data-set to IC */
		hmiI2cWrite(pLedDriver->cSlaveAddress, &(pLedDriver->cControl), gcLedDriverRegisterCount +1);	/* include the control register */
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	9c 01       	movw	r18, r24
    131a:	2f 5f       	subi	r18, 0xFF	; 255
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	41 e4       	ldi	r20, 0x41	; 65
    1328:	b9 01       	movw	r22, r18
    132a:	0e 94 a1 05 	call	0xb42	; 0xb42 <hmiI2cWrite>

		gcLedIcIndex++;	/* Move on to next driver next time */
    132e:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <gcLedIcIndex>
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	80 93 35 22 	sts	0x2235, r24	; 0x802235 <gcLedIcIndex>
		if(gcLedIcIndex > ledIcCount)
    1338:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <gcLedIcIndex>
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	10 f0       	brcs	.+4      	; 0x1344 <ledManager+0x5c>
		{	/* Transferred data to all ICs */
			gcLedIcIndex = 0;	/* Start again */
    1340:	10 92 35 22 	sts	0x2235, r1	; 0x802235 <gcLedIcIndex>
		}
		
		gc10msTick_Local = gc10msTick;	/* mark the time of the last access to a LED IC */
    1344:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gc10msTick>
    1348:	80 93 34 22 	sts	0x2234, r24	; 0x802234 <gc10msTick_Local>
	}
	else
	{	/* HMI I2C bus is busy */
		/* try again next time around the main loop */
	}
}
    134c:	00 00       	nop
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <lowPowerInit>:

/** Initialise the low power (standby) mode driver
	\return Nothing
*/
void lowPowerInit(void)
{
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : STANDBY, output, Logic 0 = Power-on; Logic 1 = Standby/Lo-power. Initialise power-on */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : */
	PORTE.OUTCLR = 0x10;	/* Clear output drive to logic 0 */
    1360:	80 e8       	ldi	r24, 0x80	; 128
    1362:	96 e0       	ldi	r25, 0x06	; 6
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	fc 01       	movw	r30, r24
    1368:	26 83       	std	Z+6, r18	; 0x06
	PORTE.DIRSET = 0x10;	/* Set outputs */
    136a:	80 e8       	ldi	r24, 0x80	; 128
    136c:	96 e0       	ldi	r25, 0x06	; 6
    136e:	20 e1       	ldi	r18, 0x10	; 16
    1370:	fc 01       	movw	r30, r24
    1372:	21 83       	std	Z+1, r18	; 0x01

	/* configured to output, totem-pole */
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc;
    1374:	80 e8       	ldi	r24, 0x80	; 128
    1376:	96 e0       	ldi	r25, 0x06	; 6
    1378:	fc 01       	movw	r30, r24
    137a:	14 8a       	std	Z+20, r1	; 0x14
}
    137c:	00 00       	nop
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <main>:

/** Firmware main entry point   
	\return This function does not return, the firmware cannot have an exit point
*/   
int main(void)
{
    1384:	0f 93       	push	r16
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	00 d0       	rcall	.+0      	; 0x138c <main+0x8>
    138c:	00 d0       	rcall	.+0      	; 0x138e <main+0xa>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	uint32_t oldSec = gdwSecondsAlive;
    1392:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
    1396:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
    139a:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
    139e:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	ac 83       	std	Y+4, r26	; 0x04
    13a8:	bd 83       	std	Y+5, r27	; 0x05
	bool stateChng = false;
    13aa:	19 82       	std	Y+1, r1	; 0x01
	uint8_t indip=0;
    13ac:	1e 82       	std	Y+6, r1	; 0x06
	
	systemInitialisation();
    13ae:	0e 94 82 07 	call	0xf04	; 0xf04 <systemInitialisation>
	
	for(;;)	/* main / forever loop */
	{
		/* The watchdog timer must be reset every 1s or the watchdog will reset the micro-controller */
		/* The watchdog is setup and locked by the FUSES */
		__builtin_avr_wdr();	/* Watchdog Timer Reset */
    13b2:	a8 95       	wdr
		
		mainTimerService();		/* Update general timers / counters */
    13b4:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <mainTimerService>
/*		btnManageButtonScan();	/ * Manage button scanning / debounce / reporting * /*/
		manageManualResetDetect();
    13b8:	0e 94 cf 11 	call	0x239e	; 0x239e <manageManualResetDetect>
// 
// 		esfHALTtestManage();
// 
// 		pscCommandManager();	/* handle any message received from the PSC */

		ledManager();			/* update the LED driver ICs */
    13bc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <ledManager>
static uint8_t state = 0;
static float LEDinten[10];
// 	if (gdwSecondsAlive != oldSec)
// 	{
// 		gdwSecondsAlive = oldSec;
	if (gc10msTick != oldSec)
    13c0:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gc10msTick>
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	ac 81       	ldd	r26, Y+4	; 0x04
    13d2:	bd 81       	ldd	r27, Y+5	; 0x05
    13d4:	28 17       	cp	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	4a 07       	cpc	r20, r26
    13da:	5b 07       	cpc	r21, r27
    13dc:	51 f3       	breq	.-44     	; 0x13b2 <main+0x2e>
	{
		gc10msTick = oldSec;
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 93 18 23 	sts	0x2318, r24	; 0x802318 <gc10msTick>
		stateChng = !stateChng;
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	21 e0       	ldi	r18, 0x01	; 1
    13ec:	89 2b       	or	r24, r25
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <main+0x6e>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	82 27       	eor	r24, r18
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
		if (stateChng)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 23       	and	r24, r24
    1406:	a9 f2       	breq	.-86     	; 0x13b2 <main+0x2e>
		{//RIGHT
			if (bPattern)
    1408:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <bPattern.3858>
    140c:	88 23       	and	r24, r24
    140e:	09 f4       	brne	.+2      	; 0x1412 <main+0x8e>
    1410:	ee c3       	rjmp	.+2012   	; 0x1bee <main+0x86a>
			{
				if (LEDinten[0] < 100)
    1412:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    1416:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    141a:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    141e:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	48 ec       	ldi	r20, 0xC8	; 200
    1428:	52 e4       	ldi	r21, 0x42	; 66
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1432:	88 23       	and	r24, r24
    1434:	dc f4       	brge	.+54     	; 0x146c <main+0xe8>
				{
					LEDinten[0] = LEDinten[0] + 5;
    1436:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    143a:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    143e:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    1442:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 ea       	ldi	r20, 0xA0	; 160
    144c:	50 e4       	ldi	r21, 0x40	; 64
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <__data_end>
    145e:	90 93 d3 21 	sts	0x21D3, r25	; 0x8021d3 <__data_end+0x1>
    1462:	a0 93 d4 21 	sts	0x21D4, r26	; 0x8021d4 <__data_end+0x2>
    1466:	b0 93 d5 21 	sts	0x21D5, r27	; 0x8021d5 <__data_end+0x3>
    146a:	0c c0       	rjmp	.+24     	; 0x1484 <main+0x100>
				}
				else
				{
					LEDinten[0] = 100;
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a8 ec       	ldi	r26, 0xC8	; 200
    1472:	b2 e4       	ldi	r27, 0x42	; 66
    1474:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <__data_end>
    1478:	90 93 d3 21 	sts	0x21D3, r25	; 0x8021d3 <__data_end+0x1>
    147c:	a0 93 d4 21 	sts	0x21D4, r26	; 0x8021d4 <__data_end+0x2>
    1480:	b0 93 d5 21 	sts	0x21D5, r27	; 0x8021d5 <__data_end+0x3>
				}
				ledSetProgressSegmentColour(9, LEDinten[0], 81, 81, 81); //LED 9
    1484:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    1488:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    148c:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    1490:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	01 e5       	ldi	r16, 0x51	; 81
    14a2:	21 e5       	ldi	r18, 0x51	; 81
    14a4:	41 e5       	ldi	r20, 0x51	; 81
    14a6:	68 2f       	mov	r22, r24
    14a8:	89 e0       	ldi	r24, 0x09	; 9
    14aa:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(10, LEDinten[0], 81, 81, 81);//LED 10
    14ae:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    14b2:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    14b6:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    14ba:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	01 e5       	ldi	r16, 0x51	; 81
    14cc:	21 e5       	ldi	r18, 0x51	; 81
    14ce:	41 e5       	ldi	r20, 0x51	; 81
    14d0:	68 2f       	mov	r22, r24
    14d2:	8a e0       	ldi	r24, 0x0A	; 10
    14d4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				
				
				if (LEDinten[1] < 100)
    14d8:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    14dc:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    14e0:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    14e4:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	48 ec       	ldi	r20, 0xC8	; 200
    14ee:	52 e4       	ldi	r21, 0x42	; 66
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    14f8:	88 23       	and	r24, r24
    14fa:	dc f4       	brge	.+54     	; 0x1532 <main+0x1ae>
				{
					LEDinten[1] = LEDinten[1] + 4.5;
    14fc:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    1500:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    1504:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1508:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e9       	ldi	r20, 0x90	; 144
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <__data_end+0x4>
    1524:	90 93 d7 21 	sts	0x21D7, r25	; 0x8021d7 <__data_end+0x5>
    1528:	a0 93 d8 21 	sts	0x21D8, r26	; 0x8021d8 <__data_end+0x6>
    152c:	b0 93 d9 21 	sts	0x21D9, r27	; 0x8021d9 <__data_end+0x7>
    1530:	0c c0       	rjmp	.+24     	; 0x154a <main+0x1c6>
				}
				else
				{
					LEDinten[1] = 100;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a8 ec       	ldi	r26, 0xC8	; 200
    1538:	b2 e4       	ldi	r27, 0x42	; 66
    153a:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <__data_end+0x4>
    153e:	90 93 d7 21 	sts	0x21D7, r25	; 0x8021d7 <__data_end+0x5>
    1542:	a0 93 d8 21 	sts	0x21D8, r26	; 0x8021d8 <__data_end+0x6>
    1546:	b0 93 d9 21 	sts	0x21D9, r27	; 0x8021d9 <__data_end+0x7>
				}
				ledSetProgressSegmentColour(8, LEDinten[1], 81, 81, 81); //LED 8
    154a:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    154e:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    1552:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1556:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	01 e5       	ldi	r16, 0x51	; 81
    1568:	21 e5       	ldi	r18, 0x51	; 81
    156a:	41 e5       	ldi	r20, 0x51	; 81
    156c:	68 2f       	mov	r22, r24
    156e:	88 e0       	ldi	r24, 0x08	; 8
    1570:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(11, LEDinten[1], 81, 81, 81);//LED 11
    1574:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    1578:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    157c:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1580:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	01 e5       	ldi	r16, 0x51	; 81
    1592:	21 e5       	ldi	r18, 0x51	; 81
    1594:	41 e5       	ldi	r20, 0x51	; 81
    1596:	68 2f       	mov	r22, r24
    1598:	8b e0       	ldi	r24, 0x0B	; 11
    159a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				
				
				if (LEDinten[2] < 100)
    159e:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    15a2:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    15a6:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    15aa:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	48 ec       	ldi	r20, 0xC8	; 200
    15b4:	52 e4       	ldi	r21, 0x42	; 66
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    15be:	88 23       	and	r24, r24
    15c0:	dc f4       	brge	.+54     	; 0x15f8 <main+0x274>
				{
					LEDinten[2] = LEDinten[2] + 4;
    15c2:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    15c6:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    15ca:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    15ce:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	50 e4       	ldi	r21, 0x40	; 64
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <__data_end+0x8>
    15ea:	90 93 db 21 	sts	0x21DB, r25	; 0x8021db <__data_end+0x9>
    15ee:	a0 93 dc 21 	sts	0x21DC, r26	; 0x8021dc <__data_end+0xa>
    15f2:	b0 93 dd 21 	sts	0x21DD, r27	; 0x8021dd <__data_end+0xb>
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <main+0x28c>
				}
				else
				{
					LEDinten[2] = 100;
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a8 ec       	ldi	r26, 0xC8	; 200
    15fe:	b2 e4       	ldi	r27, 0x42	; 66
    1600:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <__data_end+0x8>
    1604:	90 93 db 21 	sts	0x21DB, r25	; 0x8021db <__data_end+0x9>
    1608:	a0 93 dc 21 	sts	0x21DC, r26	; 0x8021dc <__data_end+0xa>
    160c:	b0 93 dd 21 	sts	0x21DD, r27	; 0x8021dd <__data_end+0xb>
				}
				ledSetProgressSegmentColour(7, LEDinten[2], 81, 81, 81); //LED 7
    1610:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    1614:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    1618:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    161c:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	01 e5       	ldi	r16, 0x51	; 81
    162e:	21 e5       	ldi	r18, 0x51	; 81
    1630:	41 e5       	ldi	r20, 0x51	; 81
    1632:	68 2f       	mov	r22, r24
    1634:	87 e0       	ldi	r24, 0x07	; 7
    1636:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(12, LEDinten[2], 81, 81, 81);//LED 12
    163a:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    163e:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    1642:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    1646:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	01 e5       	ldi	r16, 0x51	; 81
    1658:	21 e5       	ldi	r18, 0x51	; 81
    165a:	41 e5       	ldi	r20, 0x51	; 81
    165c:	68 2f       	mov	r22, r24
    165e:	8c e0       	ldi	r24, 0x0C	; 12
    1660:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[3] < 100)
    1664:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    1668:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    166c:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    1670:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	48 ec       	ldi	r20, 0xC8	; 200
    167a:	52 e4       	ldi	r21, 0x42	; 66
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1684:	88 23       	and	r24, r24
    1686:	dc f4       	brge	.+54     	; 0x16be <main+0x33a>
				{
					LEDinten[3] = LEDinten[3] + 3.5;
    1688:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    168c:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    1690:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    1694:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e6       	ldi	r20, 0x60	; 96
    169e:	50 e4       	ldi	r21, 0x40	; 64
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <__data_end+0xc>
    16b0:	90 93 df 21 	sts	0x21DF, r25	; 0x8021df <__data_end+0xd>
    16b4:	a0 93 e0 21 	sts	0x21E0, r26	; 0x8021e0 <__data_end+0xe>
    16b8:	b0 93 e1 21 	sts	0x21E1, r27	; 0x8021e1 <__data_end+0xf>
    16bc:	0c c0       	rjmp	.+24     	; 0x16d6 <main+0x352>
				}
				else
				{
					LEDinten[3] = 100;
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a8 ec       	ldi	r26, 0xC8	; 200
    16c4:	b2 e4       	ldi	r27, 0x42	; 66
    16c6:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <__data_end+0xc>
    16ca:	90 93 df 21 	sts	0x21DF, r25	; 0x8021df <__data_end+0xd>
    16ce:	a0 93 e0 21 	sts	0x21E0, r26	; 0x8021e0 <__data_end+0xe>
    16d2:	b0 93 e1 21 	sts	0x21E1, r27	; 0x8021e1 <__data_end+0xf>
				}
				ledSetProgressSegmentColour(6, LEDinten[3], 81, 81, 81); //LED 6
    16d6:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    16da:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    16de:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    16e2:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	01 e5       	ldi	r16, 0x51	; 81
    16f4:	21 e5       	ldi	r18, 0x51	; 81
    16f6:	41 e5       	ldi	r20, 0x51	; 81
    16f8:	68 2f       	mov	r22, r24
    16fa:	86 e0       	ldi	r24, 0x06	; 6
    16fc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(13, LEDinten[3], 81, 81, 81);//LED 13
    1700:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    1704:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    1708:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    170c:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	01 e5       	ldi	r16, 0x51	; 81
    171e:	21 e5       	ldi	r18, 0x51	; 81
    1720:	41 e5       	ldi	r20, 0x51	; 81
    1722:	68 2f       	mov	r22, r24
    1724:	8d e0       	ldi	r24, 0x0D	; 13
    1726:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[4] < 100)
    172a:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    172e:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    1732:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    1736:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	48 ec       	ldi	r20, 0xC8	; 200
    1740:	52 e4       	ldi	r21, 0x42	; 66
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    174a:	88 23       	and	r24, r24
    174c:	dc f4       	brge	.+54     	; 0x1784 <main+0x400>
				{
					LEDinten[4] = LEDinten[4] + 3;
    174e:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    1752:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    1756:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    175a:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e4       	ldi	r20, 0x40	; 64
    1764:	50 e4       	ldi	r21, 0x40	; 64
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <__data_end+0x10>
    1776:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <__data_end+0x11>
    177a:	a0 93 e4 21 	sts	0x21E4, r26	; 0x8021e4 <__data_end+0x12>
    177e:	b0 93 e5 21 	sts	0x21E5, r27	; 0x8021e5 <__data_end+0x13>
    1782:	0c c0       	rjmp	.+24     	; 0x179c <main+0x418>
				}
				else
				{
					LEDinten[4] = 100;
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a8 ec       	ldi	r26, 0xC8	; 200
    178a:	b2 e4       	ldi	r27, 0x42	; 66
    178c:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <__data_end+0x10>
    1790:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <__data_end+0x11>
    1794:	a0 93 e4 21 	sts	0x21E4, r26	; 0x8021e4 <__data_end+0x12>
    1798:	b0 93 e5 21 	sts	0x21E5, r27	; 0x8021e5 <__data_end+0x13>
				}
				ledSetProgressSegmentColour(5, LEDinten[4], 81, 81, 81); //LED 5
    179c:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    17a0:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    17a4:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    17a8:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	01 e5       	ldi	r16, 0x51	; 81
    17ba:	21 e5       	ldi	r18, 0x51	; 81
    17bc:	41 e5       	ldi	r20, 0x51	; 81
    17be:	68 2f       	mov	r22, r24
    17c0:	85 e0       	ldi	r24, 0x05	; 5
    17c2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(14, LEDinten[4], 81, 81, 81);//LED 14			
    17c6:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    17ca:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    17ce:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    17d2:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	01 e5       	ldi	r16, 0x51	; 81
    17e4:	21 e5       	ldi	r18, 0x51	; 81
    17e6:	41 e5       	ldi	r20, 0x51	; 81
    17e8:	68 2f       	mov	r22, r24
    17ea:	8e e0       	ldi	r24, 0x0E	; 14
    17ec:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[5] < 100)
    17f0:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    17f4:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    17f8:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    17fc:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	48 ec       	ldi	r20, 0xC8	; 200
    1806:	52 e4       	ldi	r21, 0x42	; 66
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1810:	88 23       	and	r24, r24
    1812:	dc f4       	brge	.+54     	; 0x184a <main+0x4c6>
				{
					LEDinten[5] = LEDinten[5] + 2.5;
    1814:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    1818:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    181c:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    1820:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	50 e4       	ldi	r21, 0x40	; 64
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <__data_end+0x14>
    183c:	90 93 e7 21 	sts	0x21E7, r25	; 0x8021e7 <__data_end+0x15>
    1840:	a0 93 e8 21 	sts	0x21E8, r26	; 0x8021e8 <__data_end+0x16>
    1844:	b0 93 e9 21 	sts	0x21E9, r27	; 0x8021e9 <__data_end+0x17>
    1848:	0c c0       	rjmp	.+24     	; 0x1862 <main+0x4de>
				}
				else
				{
					LEDinten[5] = 100;
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a8 ec       	ldi	r26, 0xC8	; 200
    1850:	b2 e4       	ldi	r27, 0x42	; 66
    1852:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <__data_end+0x14>
    1856:	90 93 e7 21 	sts	0x21E7, r25	; 0x8021e7 <__data_end+0x15>
    185a:	a0 93 e8 21 	sts	0x21E8, r26	; 0x8021e8 <__data_end+0x16>
    185e:	b0 93 e9 21 	sts	0x21E9, r27	; 0x8021e9 <__data_end+0x17>
				}
				ledSetProgressSegmentColour(4, LEDinten[5], 81, 81, 81); //LED 4
    1862:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    1866:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    186a:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    186e:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	01 e5       	ldi	r16, 0x51	; 81
    1880:	21 e5       	ldi	r18, 0x51	; 81
    1882:	41 e5       	ldi	r20, 0x51	; 81
    1884:	68 2f       	mov	r22, r24
    1886:	84 e0       	ldi	r24, 0x04	; 4
    1888:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(15, LEDinten[5], 81, 81, 81);//LED 15		
    188c:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    1890:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    1894:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    1898:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	01 e5       	ldi	r16, 0x51	; 81
    18aa:	21 e5       	ldi	r18, 0x51	; 81
    18ac:	41 e5       	ldi	r20, 0x51	; 81
    18ae:	68 2f       	mov	r22, r24
    18b0:	8f e0       	ldi	r24, 0x0F	; 15
    18b2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[6] < 100)
    18b6:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    18ba:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    18be:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    18c2:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	48 ec       	ldi	r20, 0xC8	; 200
    18cc:	52 e4       	ldi	r21, 0x42	; 66
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	dc f4       	brge	.+54     	; 0x1910 <main+0x58c>
				{
					LEDinten[6] = LEDinten[6] + 2;
    18da:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    18de:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    18e2:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    18e6:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e4       	ldi	r21, 0x40	; 64
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <__data_end+0x18>
    1902:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <__data_end+0x19>
    1906:	a0 93 ec 21 	sts	0x21EC, r26	; 0x8021ec <__data_end+0x1a>
    190a:	b0 93 ed 21 	sts	0x21ED, r27	; 0x8021ed <__data_end+0x1b>
    190e:	0c c0       	rjmp	.+24     	; 0x1928 <main+0x5a4>
				}
				else
				{
					LEDinten[6] = 100;
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a8 ec       	ldi	r26, 0xC8	; 200
    1916:	b2 e4       	ldi	r27, 0x42	; 66
    1918:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <__data_end+0x18>
    191c:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <__data_end+0x19>
    1920:	a0 93 ec 21 	sts	0x21EC, r26	; 0x8021ec <__data_end+0x1a>
    1924:	b0 93 ed 21 	sts	0x21ED, r27	; 0x8021ed <__data_end+0x1b>
				}
				ledSetProgressSegmentColour(3, LEDinten[6], 81, 81, 81); //LED 3
    1928:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    192c:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    1930:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    1934:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	01 e5       	ldi	r16, 0x51	; 81
    1946:	21 e5       	ldi	r18, 0x51	; 81
    1948:	41 e5       	ldi	r20, 0x51	; 81
    194a:	68 2f       	mov	r22, r24
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(16, LEDinten[6], 81, 81, 81);//LED 16		
    1952:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    1956:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    195a:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    195e:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	01 e5       	ldi	r16, 0x51	; 81
    1970:	21 e5       	ldi	r18, 0x51	; 81
    1972:	41 e5       	ldi	r20, 0x51	; 81
    1974:	68 2f       	mov	r22, r24
    1976:	80 e1       	ldi	r24, 0x10	; 16
    1978:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[7] < 100)
    197c:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    1980:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    1984:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    1988:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	48 ec       	ldi	r20, 0xC8	; 200
    1992:	52 e4       	ldi	r21, 0x42	; 66
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    199c:	88 23       	and	r24, r24
    199e:	dc f4       	brge	.+54     	; 0x19d6 <main+0x652>
				{
					LEDinten[7] = LEDinten[7] + 1.5;
    19a0:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    19a4:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    19a8:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    19ac:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 ec       	ldi	r20, 0xC0	; 192
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <__data_end+0x1c>
    19c8:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <__data_end+0x1d>
    19cc:	a0 93 f0 21 	sts	0x21F0, r26	; 0x8021f0 <__data_end+0x1e>
    19d0:	b0 93 f1 21 	sts	0x21F1, r27	; 0x8021f1 <__data_end+0x1f>
    19d4:	1b c0       	rjmp	.+54     	; 0x1a0c <main+0x688>
				}
				else
				{
					LEDinten[7] = 100;
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a8 ec       	ldi	r26, 0xC8	; 200
    19dc:	b2 e4       	ldi	r27, 0x42	; 66
    19de:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <__data_end+0x1c>
    19e2:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <__data_end+0x1d>
    19e6:	a0 93 f0 21 	sts	0x21F0, r26	; 0x8021f0 <__data_end+0x1e>
    19ea:	b0 93 f1 21 	sts	0x21F1, r27	; 0x8021f1 <__data_end+0x1f>
										bPattern = !bPattern;
    19ee:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <bPattern.3858>
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	21 e0       	ldi	r18, 0x01	; 1
    19f8:	89 2b       	or	r24, r25
    19fa:	09 f4       	brne	.+2      	; 0x19fe <main+0x67a>
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	82 27       	eor	r24, r18
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	81 70       	andi	r24, 0x01	; 1
    1a08:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <bPattern.3858>
				}
				ledSetProgressSegmentColour(2, LEDinten[7], 81, 81, 81); //LED 2
    1a0c:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    1a10:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    1a14:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    1a18:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	01 e5       	ldi	r16, 0x51	; 81
    1a2a:	21 e5       	ldi	r18, 0x51	; 81
    1a2c:	41 e5       	ldi	r20, 0x51	; 81
    1a2e:	68 2f       	mov	r22, r24
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(17, LEDinten[7], 81, 81, 81);//LED 17		
    1a36:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    1a3a:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    1a3e:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    1a42:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	01 e5       	ldi	r16, 0x51	; 81
    1a54:	21 e5       	ldi	r18, 0x51	; 81
    1a56:	41 e5       	ldi	r20, 0x51	; 81
    1a58:	68 2f       	mov	r22, r24
    1a5a:	81 e1       	ldi	r24, 0x11	; 17
    1a5c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[8] < 100)
    1a60:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    1a64:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    1a68:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    1a6c:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	48 ec       	ldi	r20, 0xC8	; 200
    1a76:	52 e4       	ldi	r21, 0x42	; 66
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	dc f4       	brge	.+54     	; 0x1aba <main+0x736>
				{
					LEDinten[8] = LEDinten[8] + 1;
    1a84:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    1a88:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    1a8c:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    1a90:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <__data_end+0x20>
    1aac:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <__data_end+0x21>
    1ab0:	a0 93 f4 21 	sts	0x21F4, r26	; 0x8021f4 <__data_end+0x22>
    1ab4:	b0 93 f5 21 	sts	0x21F5, r27	; 0x8021f5 <__data_end+0x23>
    1ab8:	0c c0       	rjmp	.+24     	; 0x1ad2 <main+0x74e>
				}
				else
				{
					LEDinten[8] = 100;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a8 ec       	ldi	r26, 0xC8	; 200
    1ac0:	b2 e4       	ldi	r27, 0x42	; 66
    1ac2:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <__data_end+0x20>
    1ac6:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <__data_end+0x21>
    1aca:	a0 93 f4 21 	sts	0x21F4, r26	; 0x8021f4 <__data_end+0x22>
    1ace:	b0 93 f5 21 	sts	0x21F5, r27	; 0x8021f5 <__data_end+0x23>
				}
				ledSetProgressSegmentColour(1, LEDinten[8], 81, 81, 81); //LED 1
    1ad2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    1ad6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    1ada:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    1ade:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	01 e5       	ldi	r16, 0x51	; 81
    1af0:	21 e5       	ldi	r18, 0x51	; 81
    1af2:	41 e5       	ldi	r20, 0x51	; 81
    1af4:	68 2f       	mov	r22, r24
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(18, LEDinten[8], 81, 81, 81);//LED 18	
    1afc:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    1b00:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    1b04:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    1b08:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	01 e5       	ldi	r16, 0x51	; 81
    1b1a:	21 e5       	ldi	r18, 0x51	; 81
    1b1c:	41 e5       	ldi	r20, 0x51	; 81
    1b1e:	68 2f       	mov	r22, r24
    1b20:	82 e1       	ldi	r24, 0x12	; 18
    1b22:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[9] < 100)
    1b26:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    1b2a:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    1b2e:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    1b32:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	48 ec       	ldi	r20, 0xC8	; 200
    1b3c:	52 e4       	ldi	r21, 0x42	; 66
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	dc f4       	brge	.+54     	; 0x1b80 <main+0x7fc>
				{
					LEDinten[9] = LEDinten[9] + 0.5;
    1b4a:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    1b4e:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    1b52:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    1b56:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__addsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <__data_end+0x24>
    1b72:	90 93 f7 21 	sts	0x21F7, r25	; 0x8021f7 <__data_end+0x25>
    1b76:	a0 93 f8 21 	sts	0x21F8, r26	; 0x8021f8 <__data_end+0x26>
    1b7a:	b0 93 f9 21 	sts	0x21F9, r27	; 0x8021f9 <__data_end+0x27>
    1b7e:	0c c0       	rjmp	.+24     	; 0x1b98 <main+0x814>
				}
				else
				{
					LEDinten[9] = 100;
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a8 ec       	ldi	r26, 0xC8	; 200
    1b86:	b2 e4       	ldi	r27, 0x42	; 66
    1b88:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <__data_end+0x24>
    1b8c:	90 93 f7 21 	sts	0x21F7, r25	; 0x8021f7 <__data_end+0x25>
    1b90:	a0 93 f8 21 	sts	0x21F8, r26	; 0x8021f8 <__data_end+0x26>
    1b94:	b0 93 f9 21 	sts	0x21F9, r27	; 0x8021f9 <__data_end+0x27>
/*					bPattern = !bPattern;*/
				}
				ledSetProgressSegmentColour(0, LEDinten[9], 81, 81, 81); //LED 0
    1b98:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    1b9c:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    1ba0:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    1ba4:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	01 e5       	ldi	r16, 0x51	; 81
    1bb6:	21 e5       	ldi	r18, 0x51	; 81
    1bb8:	41 e5       	ldi	r20, 0x51	; 81
    1bba:	68 2f       	mov	r22, r24
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(19, LEDinten[9], 81, 81, 81);//LED 19														
    1bc2:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    1bc6:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    1bca:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    1bce:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	01 e5       	ldi	r16, 0x51	; 81
    1be0:	21 e5       	ldi	r18, 0x51	; 81
    1be2:	41 e5       	ldi	r20, 0x51	; 81
    1be4:	68 2f       	mov	r22, r24
    1be6:	83 e1       	ldi	r24, 0x13	; 19
    1be8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
    1bec:	e2 cb       	rjmp	.-2108   	; 0x13b2 <main+0x2e>
			} 
 			else
 			{
				if (LEDinten[0] > 10)
    1bee:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    1bf2:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    1bf6:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    1bfa:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	dc f4       	brge	.+54     	; 0x1c48 <main+0x8c4>
				{
					LEDinten[0] = LEDinten[0] - 1;
    1c12:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    1c16:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    1c1a:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    1c1e:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <__data_end>
    1c3a:	90 93 d3 21 	sts	0x21D3, r25	; 0x8021d3 <__data_end+0x1>
    1c3e:	a0 93 d4 21 	sts	0x21D4, r26	; 0x8021d4 <__data_end+0x2>
    1c42:	b0 93 d5 21 	sts	0x21D5, r27	; 0x8021d5 <__data_end+0x3>
    1c46:	08 c0       	rjmp	.+16     	; 0x1c58 <main+0x8d4>
				}
				else
				{
					LEDinten[0] = 0;
    1c48:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <__data_end>
    1c4c:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <__data_end+0x1>
    1c50:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <__data_end+0x2>
    1c54:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <__data_end+0x3>
/*										bPattern = !bPattern;*/
				}
				ledSetProgressSegmentColour(9, LEDinten[0], 81, 81, 81); //LED 9
    1c58:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    1c5c:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    1c60:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    1c64:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	01 e5       	ldi	r16, 0x51	; 81
    1c76:	21 e5       	ldi	r18, 0x51	; 81
    1c78:	41 e5       	ldi	r20, 0x51	; 81
    1c7a:	68 2f       	mov	r22, r24
    1c7c:	89 e0       	ldi	r24, 0x09	; 9
    1c7e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(10, LEDinten[0], 81, 81, 81);//LED 10
    1c82:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <__data_end>
    1c86:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <__data_end+0x1>
    1c8a:	a0 91 d4 21 	lds	r26, 0x21D4	; 0x8021d4 <__data_end+0x2>
    1c8e:	b0 91 d5 21 	lds	r27, 0x21D5	; 0x8021d5 <__data_end+0x3>
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	01 e5       	ldi	r16, 0x51	; 81
    1ca0:	21 e5       	ldi	r18, 0x51	; 81
    1ca2:	41 e5       	ldi	r20, 0x51	; 81
    1ca4:	68 2f       	mov	r22, r24
    1ca6:	8a e0       	ldi	r24, 0x0A	; 10
    1ca8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				
				
				if (LEDinten[1] > 10)
    1cac:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    1cb0:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    1cb4:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1cb8:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	dc f4       	brge	.+54     	; 0x1d06 <main+0x982>
				{
					LEDinten[1] = LEDinten[1] - 2;
    1cd0:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    1cd4:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    1cd8:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1cdc:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	50 e4       	ldi	r21, 0x40	; 64
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <__data_end+0x4>
    1cf8:	90 93 d7 21 	sts	0x21D7, r25	; 0x8021d7 <__data_end+0x5>
    1cfc:	a0 93 d8 21 	sts	0x21D8, r26	; 0x8021d8 <__data_end+0x6>
    1d00:	b0 93 d9 21 	sts	0x21D9, r27	; 0x8021d9 <__data_end+0x7>
    1d04:	17 c0       	rjmp	.+46     	; 0x1d34 <main+0x9b0>
				}
				else
				{
					LEDinten[1] = 0;
    1d06:	10 92 d6 21 	sts	0x21D6, r1	; 0x8021d6 <__data_end+0x4>
    1d0a:	10 92 d7 21 	sts	0x21D7, r1	; 0x8021d7 <__data_end+0x5>
    1d0e:	10 92 d8 21 	sts	0x21D8, r1	; 0x8021d8 <__data_end+0x6>
    1d12:	10 92 d9 21 	sts	0x21D9, r1	; 0x8021d9 <__data_end+0x7>
						bPattern = !bPattern;
    1d16:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <bPattern.3858>
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	21 e0       	ldi	r18, 0x01	; 1
    1d20:	89 2b       	or	r24, r25
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <main+0x9a2>
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	82 27       	eor	r24, r18
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	81 70       	andi	r24, 0x01	; 1
    1d30:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <bPattern.3858>
				}
				ledSetProgressSegmentColour(8, LEDinten[1], 81, 81, 81); //LED 8
    1d34:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    1d38:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    1d3c:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1d40:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	01 e5       	ldi	r16, 0x51	; 81
    1d52:	21 e5       	ldi	r18, 0x51	; 81
    1d54:	41 e5       	ldi	r20, 0x51	; 81
    1d56:	68 2f       	mov	r22, r24
    1d58:	88 e0       	ldi	r24, 0x08	; 8
    1d5a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(11, LEDinten[1], 81, 81, 81);//LED 11
    1d5e:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <__data_end+0x4>
    1d62:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <__data_end+0x5>
    1d66:	a0 91 d8 21 	lds	r26, 0x21D8	; 0x8021d8 <__data_end+0x6>
    1d6a:	b0 91 d9 21 	lds	r27, 0x21D9	; 0x8021d9 <__data_end+0x7>
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	01 e5       	ldi	r16, 0x51	; 81
    1d7c:	21 e5       	ldi	r18, 0x51	; 81
    1d7e:	41 e5       	ldi	r20, 0x51	; 81
    1d80:	68 2f       	mov	r22, r24
    1d82:	8b e0       	ldi	r24, 0x0B	; 11
    1d84:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				
				
				if (LEDinten[2] > 10)
    1d88:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    1d8c:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    1d90:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    1d94:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	dc f4       	brge	.+54     	; 0x1de2 <main+0xa5e>
				{
					LEDinten[2] = LEDinten[2] - 3;
    1dac:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    1db0:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    1db4:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    1db8:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e4       	ldi	r20, 0x40	; 64
    1dc2:	50 e4       	ldi	r21, 0x40	; 64
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <__data_end+0x8>
    1dd4:	90 93 db 21 	sts	0x21DB, r25	; 0x8021db <__data_end+0x9>
    1dd8:	a0 93 dc 21 	sts	0x21DC, r26	; 0x8021dc <__data_end+0xa>
    1ddc:	b0 93 dd 21 	sts	0x21DD, r27	; 0x8021dd <__data_end+0xb>
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <main+0xa6e>
				}
				else
				{
					LEDinten[2] = 0;
    1de2:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <__data_end+0x8>
    1de6:	10 92 db 21 	sts	0x21DB, r1	; 0x8021db <__data_end+0x9>
    1dea:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <__data_end+0xa>
    1dee:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <__data_end+0xb>
				}
				ledSetProgressSegmentColour(7, LEDinten[2], 81, 81, 81); //LED 7
    1df2:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    1df6:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    1dfa:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    1dfe:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	01 e5       	ldi	r16, 0x51	; 81
    1e10:	21 e5       	ldi	r18, 0x51	; 81
    1e12:	41 e5       	ldi	r20, 0x51	; 81
    1e14:	68 2f       	mov	r22, r24
    1e16:	87 e0       	ldi	r24, 0x07	; 7
    1e18:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(12, LEDinten[2], 81, 81, 81);//LED 12
    1e1c:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <__data_end+0x8>
    1e20:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <__data_end+0x9>
    1e24:	a0 91 dc 21 	lds	r26, 0x21DC	; 0x8021dc <__data_end+0xa>
    1e28:	b0 91 dd 21 	lds	r27, 0x21DD	; 0x8021dd <__data_end+0xb>
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	01 e5       	ldi	r16, 0x51	; 81
    1e3a:	21 e5       	ldi	r18, 0x51	; 81
    1e3c:	41 e5       	ldi	r20, 0x51	; 81
    1e3e:	68 2f       	mov	r22, r24
    1e40:	8c e0       	ldi	r24, 0x0C	; 12
    1e42:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				
				if (LEDinten[3] > 10)
    1e46:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    1e4a:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    1e4e:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    1e52:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e2       	ldi	r20, 0x20	; 32
    1e5c:	51 e4       	ldi	r21, 0x41	; 65
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	dc f4       	brge	.+54     	; 0x1ea0 <main+0xb1c>
				{
					LEDinten[3] = LEDinten[3] - 4;
    1e6a:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    1e6e:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    1e72:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    1e76:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	50 e4       	ldi	r21, 0x40	; 64
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <__data_end+0xc>
    1e92:	90 93 df 21 	sts	0x21DF, r25	; 0x8021df <__data_end+0xd>
    1e96:	a0 93 e0 21 	sts	0x21E0, r26	; 0x8021e0 <__data_end+0xe>
    1e9a:	b0 93 e1 21 	sts	0x21E1, r27	; 0x8021e1 <__data_end+0xf>
    1e9e:	08 c0       	rjmp	.+16     	; 0x1eb0 <main+0xb2c>
				}
				else
				{
					LEDinten[3] = 0;
    1ea0:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <__data_end+0xc>
    1ea4:	10 92 df 21 	sts	0x21DF, r1	; 0x8021df <__data_end+0xd>
    1ea8:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <__data_end+0xe>
    1eac:	10 92 e1 21 	sts	0x21E1, r1	; 0x8021e1 <__data_end+0xf>
				}
				ledSetProgressSegmentColour(6, LEDinten[3], 81, 81, 81); //LED 6
    1eb0:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    1eb4:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    1eb8:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    1ebc:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	01 e5       	ldi	r16, 0x51	; 81
    1ece:	21 e5       	ldi	r18, 0x51	; 81
    1ed0:	41 e5       	ldi	r20, 0x51	; 81
    1ed2:	68 2f       	mov	r22, r24
    1ed4:	86 e0       	ldi	r24, 0x06	; 6
    1ed6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(13, LEDinten[3], 81, 81, 81);//LED 13
    1eda:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <__data_end+0xc>
    1ede:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <__data_end+0xd>
    1ee2:	a0 91 e0 21 	lds	r26, 0x21E0	; 0x8021e0 <__data_end+0xe>
    1ee6:	b0 91 e1 21 	lds	r27, 0x21E1	; 0x8021e1 <__data_end+0xf>
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	01 e5       	ldi	r16, 0x51	; 81
    1ef8:	21 e5       	ldi	r18, 0x51	; 81
    1efa:	41 e5       	ldi	r20, 0x51	; 81
    1efc:	68 2f       	mov	r22, r24
    1efe:	8d e0       	ldi	r24, 0x0D	; 13
    1f00:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>

				
				if (LEDinten[4] > 10)
    1f04:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    1f08:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    1f0c:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    1f10:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	dc f4       	brge	.+54     	; 0x1f5e <main+0xbda>
				{
					LEDinten[4] = LEDinten[4] - 5;
    1f28:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    1f2c:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    1f30:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    1f34:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 ea       	ldi	r20, 0xA0	; 160
    1f3e:	50 e4       	ldi	r21, 0x40	; 64
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <__data_end+0x10>
    1f50:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <__data_end+0x11>
    1f54:	a0 93 e4 21 	sts	0x21E4, r26	; 0x8021e4 <__data_end+0x12>
    1f58:	b0 93 e5 21 	sts	0x21E5, r27	; 0x8021e5 <__data_end+0x13>
    1f5c:	08 c0       	rjmp	.+16     	; 0x1f6e <main+0xbea>
				}
				else
				{
					LEDinten[4] = 0;
    1f5e:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <__data_end+0x10>
    1f62:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <__data_end+0x11>
    1f66:	10 92 e4 21 	sts	0x21E4, r1	; 0x8021e4 <__data_end+0x12>
    1f6a:	10 92 e5 21 	sts	0x21E5, r1	; 0x8021e5 <__data_end+0x13>
				}
				ledSetProgressSegmentColour(5, LEDinten[4], 81, 81, 81); //LED 5
    1f6e:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    1f72:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    1f76:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    1f7a:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	01 e5       	ldi	r16, 0x51	; 81
    1f8c:	21 e5       	ldi	r18, 0x51	; 81
    1f8e:	41 e5       	ldi	r20, 0x51	; 81
    1f90:	68 2f       	mov	r22, r24
    1f92:	85 e0       	ldi	r24, 0x05	; 5
    1f94:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(14, LEDinten[4], 81, 81, 81);//LED 14			
    1f98:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <__data_end+0x10>
    1f9c:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <__data_end+0x11>
    1fa0:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <__data_end+0x12>
    1fa4:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <__data_end+0x13>
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	01 e5       	ldi	r16, 0x51	; 81
    1fb6:	21 e5       	ldi	r18, 0x51	; 81
    1fb8:	41 e5       	ldi	r20, 0x51	; 81
    1fba:	68 2f       	mov	r22, r24
    1fbc:	8e e0       	ldi	r24, 0x0E	; 14
    1fbe:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[5] > 10)
    1fc2:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    1fc6:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    1fca:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    1fce:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	dc f4       	brge	.+54     	; 0x201c <main+0xc98>
				{
					LEDinten[5] = LEDinten[5] - 6;
    1fe6:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    1fea:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    1fee:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    1ff2:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 ec       	ldi	r20, 0xC0	; 192
    1ffc:	50 e4       	ldi	r21, 0x40	; 64
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <__data_end+0x14>
    200e:	90 93 e7 21 	sts	0x21E7, r25	; 0x8021e7 <__data_end+0x15>
    2012:	a0 93 e8 21 	sts	0x21E8, r26	; 0x8021e8 <__data_end+0x16>
    2016:	b0 93 e9 21 	sts	0x21E9, r27	; 0x8021e9 <__data_end+0x17>
    201a:	08 c0       	rjmp	.+16     	; 0x202c <main+0xca8>
				}
				else
				{
					LEDinten[5] = 0;
    201c:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <__data_end+0x14>
    2020:	10 92 e7 21 	sts	0x21E7, r1	; 0x8021e7 <__data_end+0x15>
    2024:	10 92 e8 21 	sts	0x21E8, r1	; 0x8021e8 <__data_end+0x16>
    2028:	10 92 e9 21 	sts	0x21E9, r1	; 0x8021e9 <__data_end+0x17>
				}
				ledSetProgressSegmentColour(4, LEDinten[5], 81, 81, 81); //LED 4
    202c:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    2030:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    2034:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    2038:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	01 e5       	ldi	r16, 0x51	; 81
    204a:	21 e5       	ldi	r18, 0x51	; 81
    204c:	41 e5       	ldi	r20, 0x51	; 81
    204e:	68 2f       	mov	r22, r24
    2050:	84 e0       	ldi	r24, 0x04	; 4
    2052:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(15, LEDinten[5], 81, 81, 81);//LED 15		
    2056:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <__data_end+0x14>
    205a:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <__data_end+0x15>
    205e:	a0 91 e8 21 	lds	r26, 0x21E8	; 0x8021e8 <__data_end+0x16>
    2062:	b0 91 e9 21 	lds	r27, 0x21E9	; 0x8021e9 <__data_end+0x17>
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	01 e5       	ldi	r16, 0x51	; 81
    2074:	21 e5       	ldi	r18, 0x51	; 81
    2076:	41 e5       	ldi	r20, 0x51	; 81
    2078:	68 2f       	mov	r22, r24
    207a:	8f e0       	ldi	r24, 0x0F	; 15
    207c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[6] > 10)
    2080:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    2084:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    2088:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    208c:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	dc f4       	brge	.+54     	; 0x20da <main+0xd56>
				{
					LEDinten[6] = LEDinten[6] - 7;
    20a4:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    20a8:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    20ac:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    20b0:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 ee       	ldi	r20, 0xE0	; 224
    20ba:	50 e4       	ldi	r21, 0x40	; 64
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <__data_end+0x18>
    20cc:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <__data_end+0x19>
    20d0:	a0 93 ec 21 	sts	0x21EC, r26	; 0x8021ec <__data_end+0x1a>
    20d4:	b0 93 ed 21 	sts	0x21ED, r27	; 0x8021ed <__data_end+0x1b>
    20d8:	08 c0       	rjmp	.+16     	; 0x20ea <main+0xd66>
				}
				else
				{
					LEDinten[6] = 0;
    20da:	10 92 ea 21 	sts	0x21EA, r1	; 0x8021ea <__data_end+0x18>
    20de:	10 92 eb 21 	sts	0x21EB, r1	; 0x8021eb <__data_end+0x19>
    20e2:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <__data_end+0x1a>
    20e6:	10 92 ed 21 	sts	0x21ED, r1	; 0x8021ed <__data_end+0x1b>
				}
				ledSetProgressSegmentColour(3, LEDinten[6], 81, 81, 81); //LED 3
    20ea:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    20ee:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    20f2:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    20f6:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	01 e5       	ldi	r16, 0x51	; 81
    2108:	21 e5       	ldi	r18, 0x51	; 81
    210a:	41 e5       	ldi	r20, 0x51	; 81
    210c:	68 2f       	mov	r22, r24
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(16, LEDinten[6], 81, 81, 81);//LED 16		
    2114:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <__data_end+0x18>
    2118:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <__data_end+0x19>
    211c:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <__data_end+0x1a>
    2120:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <__data_end+0x1b>
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	01 e5       	ldi	r16, 0x51	; 81
    2132:	21 e5       	ldi	r18, 0x51	; 81
    2134:	41 e5       	ldi	r20, 0x51	; 81
    2136:	68 2f       	mov	r22, r24
    2138:	80 e1       	ldi	r24, 0x10	; 16
    213a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[7] > 10)
    213e:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    2142:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    2146:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    214a:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    215e:	18 16       	cp	r1, r24
    2160:	dc f4       	brge	.+54     	; 0x2198 <main+0xe14>
				{
					LEDinten[7] = LEDinten[7] - 8;
    2162:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    2166:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    216a:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    216e:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	51 e4       	ldi	r21, 0x41	; 65
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <__data_end+0x1c>
    218a:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <__data_end+0x1d>
    218e:	a0 93 f0 21 	sts	0x21F0, r26	; 0x8021f0 <__data_end+0x1e>
    2192:	b0 93 f1 21 	sts	0x21F1, r27	; 0x8021f1 <__data_end+0x1f>
    2196:	08 c0       	rjmp	.+16     	; 0x21a8 <main+0xe24>
				}
				else
				{
					LEDinten[7] = 0;
    2198:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <__data_end+0x1c>
    219c:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <__data_end+0x1d>
    21a0:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <__data_end+0x1e>
    21a4:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <__data_end+0x1f>
				}
				ledSetProgressSegmentColour(2, LEDinten[7], 81, 81, 81); //LED 2
    21a8:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    21ac:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    21b0:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    21b4:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	01 e5       	ldi	r16, 0x51	; 81
    21c6:	21 e5       	ldi	r18, 0x51	; 81
    21c8:	41 e5       	ldi	r20, 0x51	; 81
    21ca:	68 2f       	mov	r22, r24
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(17, LEDinten[7], 81, 81, 81);//LED 17		
    21d2:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <__data_end+0x1c>
    21d6:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <__data_end+0x1d>
    21da:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <__data_end+0x1e>
    21de:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <__data_end+0x1f>
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	01 e5       	ldi	r16, 0x51	; 81
    21f0:	21 e5       	ldi	r18, 0x51	; 81
    21f2:	41 e5       	ldi	r20, 0x51	; 81
    21f4:	68 2f       	mov	r22, r24
    21f6:	81 e1       	ldi	r24, 0x11	; 17
    21f8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[8] >= 10)
    21fc:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    2200:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    2204:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    2208:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    221c:	88 23       	and	r24, r24
    221e:	dc f0       	brlt	.+54     	; 0x2256 <main+0xed2>
				{
					LEDinten[8] = LEDinten[8] - 9;
    2220:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    2224:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    2228:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    222c:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e1       	ldi	r20, 0x10	; 16
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <__data_end+0x20>
    2248:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <__data_end+0x21>
    224c:	a0 93 f4 21 	sts	0x21F4, r26	; 0x8021f4 <__data_end+0x22>
    2250:	b0 93 f5 21 	sts	0x21F5, r27	; 0x8021f5 <__data_end+0x23>
    2254:	08 c0       	rjmp	.+16     	; 0x2266 <main+0xee2>
				}
				else
				{
					LEDinten[8] = 0;
    2256:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <__data_end+0x20>
    225a:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <__data_end+0x21>
    225e:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <__data_end+0x22>
    2262:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <__data_end+0x23>
				}
				ledSetProgressSegmentColour(1, LEDinten[8], 81, 81, 81); //LED 1
    2266:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    226a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    226e:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    2272:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	01 e5       	ldi	r16, 0x51	; 81
    2284:	21 e5       	ldi	r18, 0x51	; 81
    2286:	41 e5       	ldi	r20, 0x51	; 81
    2288:	68 2f       	mov	r22, r24
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(18, LEDinten[8], 81, 81, 81);//LED 18	
    2290:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end+0x20>
    2294:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x21>
    2298:	a0 91 f4 21 	lds	r26, 0x21F4	; 0x8021f4 <__data_end+0x22>
    229c:	b0 91 f5 21 	lds	r27, 0x21F5	; 0x8021f5 <__data_end+0x23>
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	01 e5       	ldi	r16, 0x51	; 81
    22ae:	21 e5       	ldi	r18, 0x51	; 81
    22b0:	41 e5       	ldi	r20, 0x51	; 81
    22b2:	68 2f       	mov	r22, r24
    22b4:	82 e1       	ldi	r24, 0x12	; 18
    22b6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				
				if (LEDinten[9] > 10)
    22ba:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    22be:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    22c2:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    22c6:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__gesf2>
    22da:	18 16       	cp	r1, r24
    22dc:	dc f4       	brge	.+54     	; 0x2314 <main+0xf90>
				{
					LEDinten[9] = LEDinten[9] - 10;
    22de:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    22e2:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    22e6:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    22ea:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__subsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <__data_end+0x24>
    2306:	90 93 f7 21 	sts	0x21F7, r25	; 0x8021f7 <__data_end+0x25>
    230a:	a0 93 f8 21 	sts	0x21F8, r26	; 0x8021f8 <__data_end+0x26>
    230e:	b0 93 f9 21 	sts	0x21F9, r27	; 0x8021f9 <__data_end+0x27>
    2312:	08 c0       	rjmp	.+16     	; 0x2324 <main+0xfa0>
				}
				else
				{
					LEDinten[9] = 0;
    2314:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <__data_end+0x24>
    2318:	10 92 f7 21 	sts	0x21F7, r1	; 0x8021f7 <__data_end+0x25>
    231c:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <__data_end+0x26>
    2320:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <__data_end+0x27>

				}
				ledSetProgressSegmentColour(0, LEDinten[9], 81, 81, 81); //LED 0
    2324:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    2328:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    232c:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    2330:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	01 e5       	ldi	r16, 0x51	; 81
    2342:	21 e5       	ldi	r18, 0x51	; 81
    2344:	41 e5       	ldi	r20, 0x51	; 81
    2346:	68 2f       	mov	r22, r24
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
				ledSetProgressSegmentColour(19, LEDinten[9], 81, 81, 81);//LED 19			
    234e:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__data_end+0x24>
    2352:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__data_end+0x25>
    2356:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <__data_end+0x26>
    235a:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <__data_end+0x27>
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	01 e5       	ldi	r16, 0x51	; 81
    236c:	21 e5       	ldi	r18, 0x51	; 81
    236e:	41 e5       	ldi	r20, 0x51	; 81
    2370:	68 2f       	mov	r22, r24
    2372:	83 e1       	ldi	r24, 0x13	; 19
    2374:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ledSetProgressSegmentColour>
// 				}
// 			}
// 		}
// 	}
// }
	}
    2378:	1c c8       	rjmp	.-4040   	; 0x13b2 <main+0x2e>

0000237a <manualResetDetectInit>:

/** Initialise the manual Reset Detect
	\return Nothing
*/   
void manualResetDetectInit(void)
{
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : USER-RST/, input with pull-up */
	PORTE.DIRCLR = 0x80;	/* Clear to input */
    2382:	80 e8       	ldi	r24, 0x80	; 128
    2384:	96 e0       	ldi	r25, 0x06	; 6
    2386:	20 e8       	ldi	r18, 0x80	; 128
    2388:	fc 01       	movw	r30, r24
    238a:	22 83       	std	Z+2, r18	; 0x02

	/* configured to pull-up on input */
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;
    238c:	80 e8       	ldi	r24, 0x80	; 128
    238e:	96 e0       	ldi	r25, 0x06	; 6
    2390:	28 e1       	ldi	r18, 0x18	; 24
    2392:	fc 01       	movw	r30, r24
    2394:	27 8b       	std	Z+23, r18	; 0x17

}
    2396:	00 00       	nop
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <manageManualResetDetect>:

bool manageManualResetDetect(void)
{
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	1f 92       	push	r1
    23a4:	1f 92       	push	r1
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	bool bActive;
	uint8_t cPinMask;

	bActive = false;
    23aa:	19 82       	std	Y+1, r1	; 0x01
	cPinMask = PIN7_bm;
    23ac:	80 e8       	ldi	r24, 0x80	; 128
    23ae:	8a 83       	std	Y+2, r24	; 0x02

	if((PORTE.IN & cPinMask) == 0)
    23b0:	80 e8       	ldi	r24, 0x80	; 128
    23b2:	96 e0       	ldi	r25, 0x06	; 6
    23b4:	fc 01       	movw	r30, r24
    23b6:	90 85       	ldd	r25, Z+8	; 0x08
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	89 23       	and	r24, r25
    23bc:	88 23       	and	r24, r24
    23be:	11 f4       	brne	.+4      	; 0x23c4 <manageManualResetDetect+0x26>
	{	/* button indicating active */
		bActive = true;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	08 95       	ret

000023d0 <proximitySensorInit>:

/** Initialise the proximity Sensor driver
	\return Nothing
*/
void proximitySensorInit(void)
{
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : */
	PORTE.DIRCLR = 0x04;	/* Clear to input */
    23d8:	80 e8       	ldi	r24, 0x80	; 128
    23da:	96 e0       	ldi	r25, 0x06	; 6
    23dc:	24 e0       	ldi	r18, 0x04	; 4
    23de:	fc 01       	movw	r30, r24
    23e0:	22 83       	std	Z+2, r18	; 0x02

	/* configured to pull-up on input */
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;
    23e2:	80 e8       	ldi	r24, 0x80	; 128
    23e4:	96 e0       	ldi	r25, 0x06	; 6
    23e6:	28 e1       	ldi	r18, 0x18	; 24
    23e8:	fc 01       	movw	r30, r24
    23ea:	22 8b       	std	Z+18, r18	; 0x12

}
    23ec:	00 00       	nop
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <EnableInterrupts>:
	DisableInterrupts();
	
	pHaltEvent->vccAdcResult = adcResult;
	
	EnableInterrupts();
}
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	78 94       	sei
    23fe:	00 00       	nop
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <DisableInterrupts>:
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	f8 94       	cli
    2410:	00 00       	nop
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	08 95       	ret

00002418 <pscSetSecondsAlive>:
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	00 d0       	rcall	.+0      	; 0x241e <pscSetSecondsAlive+0x6>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <pscSetSecondsAlive+0x8>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	6b 83       	std	Y+3, r22	; 0x03
    2426:	7c 83       	std	Y+4, r23	; 0x04
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	0e 94 a8 14 	call	0x2950	; 0x2950 <pscI2cGetTxBuffer>
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	0e 94 03 12 	call	0x2406	; 0x2406 <DisableInterrupts>
    2438:	29 81       	ldd	r18, Y+1	; 0x01
    243a:	3a 81       	ldd	r19, Y+2	; 0x02
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	ad 81       	ldd	r26, Y+5	; 0x05
    2442:	be 81       	ldd	r27, Y+6	; 0x06
    2444:	f9 01       	movw	r30, r18
    2446:	84 87       	std	Z+12, r24	; 0x0c
    2448:	95 87       	std	Z+13, r25	; 0x0d
    244a:	a6 87       	std	Z+14, r26	; 0x0e
    244c:	b7 87       	std	Z+15, r27	; 0x0f
    244e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <EnableInterrupts>
    2452:	00 00       	nop
    2454:	26 96       	adiw	r28, 0x06	; 6
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <pscSetLastReasonForReset>:

void pscSetLastReasonForReset(uint8_t lastReasonForReset)
{
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	00 d0       	rcall	.+0      	; 0x2466 <pscSetLastReasonForReset+0x6>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	8b 83       	std	Y+3, r24	; 0x03
	PscHALTEvent_t* pHaltEvent = (PscHALTEvent_t*)pscI2cGetTxBuffer();
    246c:	0e 94 a8 14 	call	0x2950	; 0x2950 <pscI2cGetTxBuffer>
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	9a 83       	std	Y+2, r25	; 0x02
	
	/* Disable interrupts while editing the buffer the PSC I2C interrupt also uses */
	DisableInterrupts();
    2474:	0e 94 03 12 	call	0x2406	; 0x2406 <DisableInterrupts>
	
	pHaltEvent->lastReasonForReset = lastReasonForReset;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	2b 81       	ldd	r18, Y+3	; 0x03
    247e:	fc 01       	movw	r30, r24
    2480:	26 8b       	std	Z+22, r18	; 0x16
	
	EnableInterrupts();
    2482:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <EnableInterrupts>
}
    2486:	00 00       	nop
    2488:	23 96       	adiw	r28, 0x03	; 3
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	08 95       	ret

00002494 <pscI2cInit>:
		*pDest++ = *pSrc++;
	}
		
	/* Reset / Clear the flag which indicates a PSC command has been received and is ready for processing */
	gPscI2c.bCommandPendingProcessing = false;
}
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	80 e8       	ldi	r24, 0x80	; 128
    249e:	94 e0       	ldi	r25, 0x04	; 4
    24a0:	fc 01       	movw	r30, r24
    24a2:	10 86       	std	Z+8, r1	; 0x08
    24a4:	8a e3       	ldi	r24, 0x3A	; 58
    24a6:	92 e2       	ldi	r25, 0x22	; 34
    24a8:	0e 94 96 12 	call	0x252c	; 0x252c <pscI2cInitialiseDriver>
    24ac:	82 e4       	ldi	r24, 0x42	; 66
    24ae:	40 e4       	ldi	r20, 0x40	; 64
    24b0:	68 2f       	mov	r22, r24
    24b2:	8a e3       	ldi	r24, 0x3A	; 58
    24b4:	92 e2       	ldi	r25, 0x22	; 34
    24b6:	0e 94 c6 12 	call	0x258c	; 0x258c <pscI2cInitialiseModule>
    24ba:	00 00       	nop
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret

000024c2 <__vector_12>:



/*! TWIC Slave Interrupt vector. */
ISR(TWIC_TWIS_vect)
{
    24c2:	1f 92       	push	r1
    24c4:	0f 92       	push	r0
    24c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24d2:	0f 92       	push	r0
    24d4:	2f 93       	push	r18
    24d6:	3f 93       	push	r19
    24d8:	4f 93       	push	r20
    24da:	5f 93       	push	r21
    24dc:	6f 93       	push	r22
    24de:	7f 93       	push	r23
    24e0:	8f 93       	push	r24
    24e2:	9f 93       	push	r25
    24e4:	af 93       	push	r26
    24e6:	bf 93       	push	r27
    24e8:	ef 93       	push	r30
    24ea:	ff 93       	push	r31
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
	pscI2cInterruptHandler(&gPscI2c);
    24f4:	8a e3       	ldi	r24, 0x3A	; 58
    24f6:	92 e2       	ldi	r25, 0x22	; 34
    24f8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <pscI2cInterruptHandler>
}
    24fc:	00 00       	nop
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	ff 91       	pop	r31
    2504:	ef 91       	pop	r30
    2506:	bf 91       	pop	r27
    2508:	af 91       	pop	r26
    250a:	9f 91       	pop	r25
    250c:	8f 91       	pop	r24
    250e:	7f 91       	pop	r23
    2510:	6f 91       	pop	r22
    2512:	5f 91       	pop	r21
    2514:	4f 91       	pop	r20
    2516:	3f 91       	pop	r19
    2518:	2f 91       	pop	r18
    251a:	0f 90       	pop	r0
    251c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2520:	0f 90       	pop	r0
    2522:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2526:	0f 90       	pop	r0
    2528:	1f 90       	pop	r1
    252a:	18 95       	reti

0000252c <pscI2cInitialiseDriver>:




void pscI2cInitialiseDriver(PscI2c_t *ppscI2c)
{
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	1f 92       	push	r1
    2532:	1f 92       	push	r1
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	9a 83       	std	Y+2, r25	; 0x02
	ppscI2c->cCountOfRxBytes = 0;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	87 53       	subi	r24, 0x37	; 55
    2542:	9f 4f       	sbci	r25, 0xFF	; 255
    2544:	fc 01       	movw	r30, r24
    2546:	10 82       	st	Z, r1
	ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	86 53       	subi	r24, 0x36	; 54
    254e:	9f 4f       	sbci	r25, 0xFF	; 255
    2550:	fc 01       	movw	r30, r24
    2552:	10 82       	st	Z, r1
	ppscI2c->cStatus = PscI2cReady;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	82 53       	subi	r24, 0x32	; 50
    255a:	9f 4f       	sbci	r25, 0xFF	; 255
    255c:	fc 01       	movw	r30, r24
    255e:	10 82       	st	Z, r1
	ppscI2c->cResult = PscI2cResultUnknown;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	81 53       	subi	r24, 0x31	; 49
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	fc 01       	movw	r30, r24
    256a:	10 82       	st	Z, r1
	ppscI2c->bAbort = false;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	85 53       	subi	r24, 0x35	; 53
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	fc 01       	movw	r30, r24
    2576:	10 82       	st	Z, r1
	ppscI2c->bCommandPendingProcessing = false;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	fc 01       	movw	r30, r24
    257e:	10 82       	st	Z, r1
}
    2580:	00 00       	nop
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <pscI2cInitialiseModule>:


void pscI2cInitialiseModule(PscI2c_t *ppscI2c,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	00 d0       	rcall	.+0      	; 0x2592 <pscI2cInitialiseModule+0x6>
    2592:	1f 92       	push	r1
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	6b 83       	std	Y+3, r22	; 0x03
    259e:	4c 83       	std	Y+4, r20	; 0x04
	TWIC.SLAVE.CTRLA = intLevel |
    25a0:	80 e8       	ldi	r24, 0x80	; 128
    25a2:	94 e0       	ldi	r25, 0x04	; 4
    25a4:	2c 81       	ldd	r18, Y+4	; 0x04
    25a6:	2c 63       	ori	r18, 0x3C	; 60
    25a8:	fc 01       	movw	r30, r24
    25aa:	20 87       	std	Z+8, r18	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
											TWI_SLAVE_PIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	TWIC.SLAVE.ADDR = (address<<1);
    25ac:	80 e8       	ldi	r24, 0x80	; 128
    25ae:	94 e0       	ldi	r25, 0x04	; 4
    25b0:	2b 81       	ldd	r18, Y+3	; 0x03
    25b2:	22 0f       	add	r18, r18
    25b4:	fc 01       	movw	r30, r24
    25b6:	23 87       	std	Z+11, r18	; 0x0b
}
    25b8:	00 00       	nop
    25ba:	24 96       	adiw	r28, 0x04	; 4
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <pscI2cInterruptHandler>:


void pscI2cInterruptHandler(PscI2c_t *ppscI2c)
{
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <pscI2cInterruptHandler+0x6>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t i2cStatus = TWIC.SLAVE.STATUS;
    25d4:	80 e8       	ldi	r24, 0x80	; 128
    25d6:	94 e0       	ldi	r25, 0x04	; 4
    25d8:	fc 01       	movw	r30, r24
    25da:	82 85       	ldd	r24, Z+10	; 0x0a
    25dc:	89 83       	std	Y+1, r24	; 0x01

	if(i2cStatus & TWI_SLAVE_BUSERR_bm) 
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	84 70       	andi	r24, 0x04	; 4
    25e6:	99 27       	eor	r25, r25
    25e8:	89 2b       	or	r24, r25
    25ea:	d1 f0       	breq	.+52     	; 0x2620 <pscI2cInterruptHandler+0x5a>
	{	/* bus error */
		ppscI2c->cCountOfRxBytes = 0;
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	87 53       	subi	r24, 0x37	; 55
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	fc 01       	movw	r30, r24
    25f6:	10 82       	st	Z, r1
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	86 53       	subi	r24, 0x36	; 54
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	fc 01       	movw	r30, r24
    2602:	10 82       	st	Z, r1
		ppscI2c->cResult = PscI2cResultBusError;
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	81 53       	subi	r24, 0x31	; 49
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	24 e0       	ldi	r18, 0x04	; 4
    260e:	fc 01       	movw	r30, r24
    2610:	20 83       	st	Z, r18
		ppscI2c->cStatus = PscI2cReady;
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	82 53       	subi	r24, 0x32	; 50
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	fc 01       	movw	r30, r24
    261c:	10 82       	st	Z, r1
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    261e:	4d c0       	rjmp	.+154    	; 0x26ba <pscI2cInterruptHandler+0xf4>
		ppscI2c->cCountOfRxBytes = 0;
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
		ppscI2c->cResult = PscI2cResultBusError;
		ppscI2c->cStatus = PscI2cReady;
	}
	else if(i2cStatus & TWI_SLAVE_COLL_bm) 
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	88 2f       	mov	r24, r24
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	88 70       	andi	r24, 0x08	; 8
    2628:	99 27       	eor	r25, r25
    262a:	89 2b       	or	r24, r25
    262c:	d1 f0       	breq	.+52     	; 0x2662 <pscI2cInterruptHandler+0x9c>
	{	/* transmit collision */
		ppscI2c->cCountOfRxBytes = 0;
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	9b 81       	ldd	r25, Y+3	; 0x03
    2632:	87 53       	subi	r24, 0x37	; 55
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	fc 01       	movw	r30, r24
    2638:	10 82       	st	Z, r1
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	86 53       	subi	r24, 0x36	; 54
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	fc 01       	movw	r30, r24
    2644:	10 82       	st	Z, r1
		ppscI2c->cResult = PscI2cResultTransmitCollision;
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	81 53       	subi	r24, 0x31	; 49
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	23 e0       	ldi	r18, 0x03	; 3
    2650:	fc 01       	movw	r30, r24
    2652:	20 83       	st	Z, r18
		ppscI2c->cStatus = PscI2cReady;
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	82 53       	subi	r24, 0x32	; 50
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	fc 01       	movw	r30, r24
    265e:	10 82       	st	Z, r1
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2660:	2c c0       	rjmp	.+88     	; 0x26ba <pscI2cInterruptHandler+0xf4>
		ppscI2c->cCountOfRxBytes = 0;
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
		ppscI2c->cResult = PscI2cResultTransmitCollision;
		ppscI2c->cStatus = PscI2cReady;
	}
	else if((i2cStatus & TWI_SLAVE_APIF_bm) && (i2cStatus & TWI_SLAVE_AP_bm)) 
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	80 74       	andi	r24, 0x40	; 64
    266a:	99 27       	eor	r25, r25
    266c:	89 2b       	or	r24, r25
    266e:	61 f0       	breq	.+24     	; 0x2688 <pscI2cInterruptHandler+0xc2>
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	99 27       	eor	r25, r25
    267a:	89 2b       	or	r24, r25
    267c:	29 f0       	breq	.+10     	; 0x2688 <pscI2cInterruptHandler+0xc2>
	{	/* address match */
		pscI2cAddressMatchHandler(ppscI2c);
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	0e 94 64 13 	call	0x26c8	; 0x26c8 <pscI2cAddressMatchHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2686:	19 c0       	rjmp	.+50     	; 0x26ba <pscI2cInterruptHandler+0xf4>
	}
	else if((i2cStatus & TWI_SLAVE_APIF_bm) && (i2cStatus & TWI_SLAVE_AP_bm)) 
	{	/* address match */
		pscI2cAddressMatchHandler(ppscI2c);
	}
	else if(i2cStatus & TWI_SLAVE_APIF_bm) 
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	80 74       	andi	r24, 0x40	; 64
    2690:	99 27       	eor	r25, r25
    2692:	89 2b       	or	r24, r25
    2694:	29 f0       	breq	.+10     	; 0x26a0 <pscI2cInterruptHandler+0xda>
	{	/* stop (only enabled through slave read transaction) */
		pscI2cStopHandler(ppscI2c);
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <pscI2cStopHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <pscI2cInterruptHandler+0xf4>
	}
	else if(i2cStatus & TWI_SLAVE_APIF_bm) 
	{	/* stop (only enabled through slave read transaction) */
		pscI2cStopHandler(ppscI2c);
	}
	else if(i2cStatus & TWI_SLAVE_DIF_bm) 
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	88 23       	and	r24, r24
    26a4:	2c f4       	brge	.+10     	; 0x26b0 <pscI2cInterruptHandler+0xea>
	{	/* data interrupt */
		pscI2cDataHandler(ppscI2c);
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	9b 81       	ldd	r25, Y+3	; 0x03
    26aa:	0e 94 1e 14 	call	0x283c	; 0x283c <pscI2cDataHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <pscI2cInterruptHandler+0xf4>
	{	/* data interrupt */
		pscI2cDataHandler(ppscI2c);
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	65 e0       	ldi	r22, 0x05	; 5
    26b6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
	}
}
    26ba:	00 00       	nop
    26bc:	23 96       	adiw	r28, 0x03	; 3
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <pscI2cAddressMatchHandler>:
 *  Prepares TWI module for transaction upon address match
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cAddressMatchHandler(PscI2c_t *ppscI2c)
{
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <pscI2cAddressMatchHandler+0x6>
    26ce:	1f 92       	push	r1
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	8b 83       	std	Y+3, r24	; 0x03
    26d6:	9c 83       	std	Y+4, r25	; 0x04
	bool bOK;
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	94 e0       	ldi	r25, 0x04	; 4
    26dc:	fc 01       	movw	r30, r24
    26de:	82 85       	ldd	r24, Z+10	; 0x0a
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	82 70       	andi	r24, 0x02	; 2
    26e6:	99 27       	eor	r25, r25
    26e8:	21 e0       	ldi	r18, 0x01	; 1
    26ea:	89 2b       	or	r24, r25
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <pscI2cAddressMatchHandler+0x28>
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	2a 83       	std	Y+2, r18	; 0x02
	
	
	/* If application signalling need to abort (error occured). */
	if(ppscI2c->bAbort) 
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	85 53       	subi	r24, 0x35	; 53
    26f8:	9f 4f       	sbci	r25, 0xFF	; 255
    26fa:	fc 01       	movw	r30, r24
    26fc:	80 81       	ld	r24, Z
    26fe:	88 23       	and	r24, r24
    2700:	89 f0       	breq	.+34     	; 0x2724 <pscI2cAddressMatchHandler+0x5c>
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    2702:	80 e8       	ldi	r24, 0x80	; 128
    2704:	94 e0       	ldi	r25, 0x04	; 4
    2706:	22 e0       	ldi	r18, 0x02	; 2
    2708:	fc 01       	movw	r30, r24
    270a:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	66 e0       	ldi	r22, 0x06	; 6
    2712:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
		ppscI2c->bAbort = false;
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	85 53       	subi	r24, 0x35	; 53
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	fc 01       	movw	r30, r24
    2720:	10 82       	st	Z, r1
    2722:	39 c0       	rjmp	.+114    	; 0x2796 <pscI2cAddressMatchHandler+0xce>
	} 
	else 
	{
		bOK = true;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	89 83       	std	Y+1, r24	; 0x01
		if(bRead)
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	88 23       	and	r24, r24
    272c:	39 f4       	brne	.+14     	; 0x273c <pscI2cAddressMatchHandler+0x74>
		{}
		else
		{	/* PSC trying to write data */
			if(ppscI2c->bCommandPendingProcessing)
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	fc 01       	movw	r30, r24
    2734:	80 81       	ld	r24, Z
    2736:	88 23       	and	r24, r24
    2738:	09 f0       	breq	.+2      	; 0x273c <pscI2cAddressMatchHandler+0x74>
			{	/* Buffer is already in use */
				/* HMI not able to accept data from the PSC at this time */
				/* Terminate the transfer */
				bOK = false;
    273a:	19 82       	std	Y+1, r1	; 0x01
			{	/* buffer is free */
				/* OK to continue with transfer */
			}
		}

		if(bOK)
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	88 23       	and	r24, r24
    2740:	f9 f0       	breq	.+62     	; 0x2780 <pscI2cAddressMatchHandler+0xb8>
		{
			ppscI2c->cStatus = PscI2cBusy;
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	82 53       	subi	r24, 0x32	; 50
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	21 e0       	ldi	r18, 0x01	; 1
    274c:	fc 01       	movw	r30, r24
    274e:	20 83       	st	Z, r18
			ppscI2c->cResult = PscI2cResultUnknown;
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	81 53       	subi	r24, 0x31	; 49
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	fc 01       	movw	r30, r24
    275a:	10 82       	st	Z, r1

			ppscI2c->cCountOfRxBytes = 0;
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	87 53       	subi	r24, 0x37	; 55
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	fc 01       	movw	r30, r24
    2766:	10 82       	st	Z, r1
			ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	86 53       	subi	r24, 0x36	; 54
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	fc 01       	movw	r30, r24
    2772:	10 82       	st	Z, r1

			/* Send ACK, wait for data interrupt. */
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    2774:	80 e8       	ldi	r24, 0x80	; 128
    2776:	94 e0       	ldi	r25, 0x04	; 4
    2778:	23 e0       	ldi	r18, 0x03	; 3
    277a:	fc 01       	movw	r30, r24
    277c:	21 87       	std	Z+9, r18	; 0x09
    277e:	0b c0       	rjmp	.+22     	; 0x2796 <pscI2cAddressMatchHandler+0xce>
		}
		else
		{	
			/* Send Nack */
			/* Terminate the transfer */
			TWIC.SLAVE.CTRLB = (/*TWI_SLAVE_ACKACT_bm | */TWI_SLAVE_CMD_COMPTRANS_gc);
    2780:	80 e8       	ldi	r24, 0x80	; 128
    2782:	94 e0       	ldi	r25, 0x04	; 4
    2784:	22 e0       	ldi	r18, 0x02	; 2
    2786:	fc 01       	movw	r30, r24
    2788:	21 87       	std	Z+9, r18	; 0x09
			ppscI2c->cStatus = PscI2cReady;
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	82 53       	subi	r24, 0x32	; 50
    2790:	9f 4f       	sbci	r25, 0xFF	; 255
    2792:	fc 01       	movw	r30, r24
    2794:	10 82       	st	Z, r1
		}
	}
	
	gMarkLastI2cActivity = gdwSecondsAlive;
    2796:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
    279a:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
    279e:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
    27a2:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
    27a6:	80 93 36 22 	sts	0x2236, r24	; 0x802236 <gMarkLastI2cActivity>
    27aa:	90 93 37 22 	sts	0x2237, r25	; 0x802237 <gMarkLastI2cActivity+0x1>
    27ae:	a0 93 38 22 	sts	0x2238, r26	; 0x802238 <gMarkLastI2cActivity+0x2>
    27b2:	b0 93 39 22 	sts	0x2239, r27	; 0x802239 <gMarkLastI2cActivity+0x3>
}
    27b6:	00 00       	nop
    27b8:	24 96       	adiw	r28, 0x04	; 4
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <pscI2cStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cStopHandler(PscI2c_t *ppscI2c)
{
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <pscI2cStopHandler+0x6>
    27ca:	1f 92       	push	r1
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	9c 83       	std	Y+4, r25	; 0x04
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    27d4:	80 e8       	ldi	r24, 0x80	; 128
    27d6:	94 e0       	ldi	r25, 0x04	; 4
    27d8:	fc 01       	movw	r30, r24
    27da:	82 85       	ldd	r24, Z+10	; 0x0a
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	82 70       	andi	r24, 0x02	; 2
    27e2:	99 27       	eor	r25, r25
    27e4:	21 e0       	ldi	r18, 0x01	; 1
    27e6:	89 2b       	or	r24, r25
    27e8:	09 f4       	brne	.+2      	; 0x27ec <pscI2cStopHandler+0x28>
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	29 83       	std	Y+1, r18	; 0x01
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t i2cStatus = TWIC.SLAVE.STATUS;
    27ee:	80 e8       	ldi	r24, 0x80	; 128
    27f0:	94 e0       	ldi	r25, 0x04	; 4
    27f2:	fc 01       	movw	r30, r24
    27f4:	82 85       	ldd	r24, Z+10	; 0x0a
    27f6:	8a 83       	std	Y+2, r24	; 0x02
	TWIC.SLAVE.STATUS = i2cStatus | TWI_SLAVE_APIF_bm;
    27f8:	80 e8       	ldi	r24, 0x80	; 128
    27fa:	94 e0       	ldi	r25, 0x04	; 4
    27fc:	2a 81       	ldd	r18, Y+2	; 0x02
    27fe:	20 64       	ori	r18, 0x40	; 64
    2800:	fc 01       	movw	r30, r24
    2802:	22 87       	std	Z+10, r18	; 0x0a

	pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
	
	if(bRead)
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	88 23       	and	r24, r24
    2812:	69 f4       	brne	.+26     	; 0x282e <pscI2cStopHandler+0x6a>
	{
		
	}
	else
	{	/* PSC writing bytes to the HMI */
		if(ppscI2c->cCountOfRxBytes > 0)
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	87 53       	subi	r24, 0x37	; 55
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	fc 01       	movw	r30, r24
    281e:	80 81       	ld	r24, Z
    2820:	88 23       	and	r24, r24
    2822:	29 f0       	breq	.+10     	; 0x282e <pscI2cStopHandler+0x6a>
		{	/* PSC has successfully sent some bytes */
			/* Does it amount to a complete command ?
				no way to check without a CRC */
			ppscI2c->bCommandPendingProcessing = true;
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	21 e0       	ldi	r18, 0x01	; 1
    282a:	fc 01       	movw	r30, r24
    282c:	20 83       	st	Z, r18
		}
	}
}
    282e:	00 00       	nop
    2830:	24 96       	adiw	r28, 0x04	; 4
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	08 95       	ret

0000283c <pscI2cDataHandler>:
 *  Calls the appropriate slave read or write handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cDataHandler(PscI2c_t *ppscI2c)
{
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	00 d0       	rcall	.+0      	; 0x2842 <pscI2cDataHandler+0x6>
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	8a 83       	std	Y+2, r24	; 0x02
    2848:	9b 83       	std	Y+3, r25	; 0x03
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    284a:	80 e8       	ldi	r24, 0x80	; 128
    284c:	94 e0       	ldi	r25, 0x04	; 4
    284e:	fc 01       	movw	r30, r24
    2850:	82 85       	ldd	r24, Z+10	; 0x0a
    2852:	88 2f       	mov	r24, r24
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	82 70       	andi	r24, 0x02	; 2
    2858:	99 27       	eor	r25, r25
    285a:	21 e0       	ldi	r18, 0x01	; 1
    285c:	89 2b       	or	r24, r25
    285e:	09 f4       	brne	.+2      	; 0x2862 <pscI2cDataHandler+0x26>
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	29 83       	std	Y+1, r18	; 0x01
	
	if(bRead)
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 23       	and	r24, r24
    2868:	29 f0       	breq	.+10     	; 0x2874 <pscI2cDataHandler+0x38>
	{	/* PSC I2C master is reading data from the HMI */
		pscI2cReadHandler(ppscI2c);
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	0e 94 b1 14 	call	0x2962	; 0x2962 <pscI2cReadHandler>
	} 
	else 
	{	/* PSC I2C master is writing data to the HMI */
		pscI2cWriteHandler(ppscI2c);
	}
}
    2872:	04 c0       	rjmp	.+8      	; 0x287c <pscI2cDataHandler+0x40>
	{	/* PSC I2C master is reading data from the HMI */
		pscI2cReadHandler(ppscI2c);
	} 
	else 
	{	/* PSC I2C master is writing data to the HMI */
		pscI2cWriteHandler(ppscI2c);
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	9b 81       	ldd	r25, Y+3	; 0x03
    2878:	0e 94 45 14 	call	0x288a	; 0x288a <pscI2cWriteHandler>
	}
}
    287c:	00 00       	nop
    287e:	23 96       	adiw	r28, 0x03	; 3
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	08 95       	ret

0000288a <pscI2cWriteHandler>:
/*! \brief PSC I2C slave read interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cWriteHandler(PscI2c_t *ppscI2c)
{
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	00 d0       	rcall	.+0      	; 0x2890 <pscI2cWriteHandler+0x6>
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	8a 83       	std	Y+2, r24	; 0x02
    2896:	9b 83       	std	Y+3, r25	; 0x03
	/* Enable stop interrupt. */
	///uint8_t currentCtrlA = TWIC.SLAVE.CTRLA;
	///TWIC.SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;


	if(ppscI2c->cCountOfRxBytes < PscI2cRxBufferSize) 
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	87 53       	subi	r24, 0x37	; 55
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	fc 01       	movw	r30, r24
    28a2:	80 81       	ld	r24, Z
    28a4:	84 36       	cpi	r24, 0x64	; 100
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <pscI2cWriteHandler+0x20>
    28a8:	42 c0       	rjmp	.+132    	; 0x292e <pscI2cWriteHandler+0xa4>
	{	/* Space in buffer for another byte */
		data = TWIC.SLAVE.DATA;
    28aa:	80 e8       	ldi	r24, 0x80	; 128
    28ac:	94 e0       	ldi	r25, 0x04	; 4
    28ae:	fc 01       	movw	r30, r24
    28b0:	84 85       	ldd	r24, Z+12	; 0x0c
    28b2:	89 83       	std	Y+1, r24	; 0x01
		ppscI2c->cRxData[ppscI2c->cCountOfRxBytes] = data;
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	9b 81       	ldd	r25, Y+3	; 0x03
    28b8:	87 53       	subi	r24, 0x37	; 55
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	fc 01       	movw	r30, r24
    28be:	80 81       	ld	r24, Z
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	2a 81       	ldd	r18, Y+2	; 0x02
    28c6:	3b 81       	ldd	r19, Y+3	; 0x03
    28c8:	82 0f       	add	r24, r18
    28ca:	93 1f       	adc	r25, r19
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	29 81       	ldd	r18, Y+1	; 0x01
    28d0:	fc 01       	movw	r30, r24
    28d2:	20 83       	st	Z, r18

		ppscI2c->cCountOfRxBytes++;
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	9b 81       	ldd	r25, Y+3	; 0x03
    28d8:	87 53       	subi	r24, 0x37	; 55
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	fc 01       	movw	r30, r24
    28de:	80 81       	ld	r24, Z
    28e0:	21 e0       	ldi	r18, 0x01	; 1
    28e2:	28 0f       	add	r18, r24
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	87 53       	subi	r24, 0x37	; 55
    28ea:	9f 4f       	sbci	r25, 0xFF	; 255
    28ec:	fc 01       	movw	r30, r24
    28ee:	20 83       	st	Z, r18

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if(ppscI2c->bAbort) 
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	85 53       	subi	r24, 0x35	; 53
    28f6:	9f 4f       	sbci	r25, 0xFF	; 255
    28f8:	fc 01       	movw	r30, r24
    28fa:	80 81       	ld	r24, Z
    28fc:	88 23       	and	r24, r24
    28fe:	89 f0       	breq	.+34     	; 0x2922 <pscI2cWriteHandler+0x98>
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    2900:	80 e8       	ldi	r24, 0x80	; 128
    2902:	94 e0       	ldi	r25, 0x04	; 4
    2904:	22 e0       	ldi	r18, 0x02	; 2
    2906:	fc 01       	movw	r30, r24
    2908:	21 87       	std	Z+9, r18	; 0x09
			pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
    290e:	66 e0       	ldi	r22, 0x06	; 6
    2910:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
			ppscI2c->bAbort = false;
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	9b 81       	ldd	r25, Y+3	; 0x03
    2918:	85 53       	subi	r24, 0x35	; 53
    291a:	9f 4f       	sbci	r25, 0xFF	; 255
    291c:	fc 01       	movw	r30, r24
    291e:	10 82       	st	Z, r1
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
	}
}
    2920:	10 c0       	rjmp	.+32     	; 0x2942 <pscI2cWriteHandler+0xb8>
			pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
			ppscI2c->bAbort = false;
		} 
		else 
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    2922:	80 e8       	ldi	r24, 0x80	; 128
    2924:	94 e0       	ldi	r25, 0x04	; 4
    2926:	23 e0       	ldi	r18, 0x03	; 3
    2928:	fc 01       	movw	r30, r24
    292a:	21 87       	std	Z+9, r18	; 0x09
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
	}
}
    292c:	0a c0       	rjmp	.+20     	; 0x2942 <pscI2cWriteHandler+0xb8>
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	94 e0       	ldi	r25, 0x04	; 4
    2932:	26 e0       	ldi	r18, 0x06	; 6
    2934:	fc 01       	movw	r30, r24
    2936:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	9b 81       	ldd	r25, Y+3	; 0x03
    293c:	62 e0       	ldi	r22, 0x02	; 2
    293e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
	}
}
    2942:	00 00       	nop
    2944:	23 96       	adiw	r28, 0x03	; 3
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <pscI2cGetTxBuffer>:

uint8_t* pscI2cGetTxBuffer(void)
{
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
	return(gPscI2c.cDataForPscToCollect);
    2958:	8f e9       	ldi	r24, 0x9F	; 159
    295a:	92 e2       	ldi	r25, 0x22	; 34
}
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	08 95       	ret

00002962 <pscI2cReadHandler>:
/*! \brief PSC I2C slave write interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cReadHandler(PscI2c_t *ppscI2c)
{
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	00 d0       	rcall	.+0      	; 0x2968 <pscI2cReadHandler+0x6>
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	8a 83       	std	Y+2, r24	; 0x02
    296e:	9b 83       	std	Y+3, r25	; 0x03
	/* If NACK, slave write transaction finished. */
	if((ppscI2c->cCountOfBytesCollectedByPsc > 0) && (TWIC.SLAVE.STATUS & TWI_SLAVE_RXACK_bm)) 
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	9b 81       	ldd	r25, Y+3	; 0x03
    2974:	86 53       	subi	r24, 0x36	; 54
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	fc 01       	movw	r30, r24
    297a:	80 81       	ld	r24, Z
    297c:	88 23       	and	r24, r24
    297e:	a9 f0       	breq	.+42     	; 0x29aa <pscI2cReadHandler+0x48>
    2980:	80 e8       	ldi	r24, 0x80	; 128
    2982:	94 e0       	ldi	r25, 0x04	; 4
    2984:	fc 01       	movw	r30, r24
    2986:	82 85       	ldd	r24, Z+10	; 0x0a
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	80 71       	andi	r24, 0x10	; 16
    298e:	99 27       	eor	r25, r25
    2990:	89 2b       	or	r24, r25
    2992:	59 f0       	breq	.+22     	; 0x29aa <pscI2cReadHandler+0x48>
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    2994:	80 e8       	ldi	r24, 0x80	; 128
    2996:	94 e0       	ldi	r25, 0x04	; 4
    2998:	22 e0       	ldi	r18, 0x02	; 2
    299a:	fc 01       	movw	r30, r24
    299c:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
		}
	}
}
    29a8:	3c c0       	rjmp	.+120    	; 0x2a22 <pscI2cReadHandler+0xc0>
		pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
	}
	/* If ACK, master expects more data. */
	else 
	{
		if(ppscI2c->cCountOfBytesCollectedByPsc < PscI2cTxBufferSize) 
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	9b 81       	ldd	r25, Y+3	; 0x03
    29ae:	86 53       	subi	r24, 0x36	; 54
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	fc 01       	movw	r30, r24
    29b4:	80 81       	ld	r24, Z
    29b6:	84 36       	cpi	r24, 0x64	; 100
    29b8:	50 f5       	brcc	.+84     	; 0x2a0e <pscI2cReadHandler+0xac>
		{
			uint8_t data = ppscI2c->cDataForPscToCollect[ppscI2c->cCountOfBytesCollectedByPsc];
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	9b 81       	ldd	r25, Y+3	; 0x03
    29be:	86 53       	subi	r24, 0x36	; 54
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	fc 01       	movw	r30, r24
    29c4:	80 81       	ld	r24, Z
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	2a 81       	ldd	r18, Y+2	; 0x02
    29cc:	3b 81       	ldd	r19, Y+3	; 0x03
    29ce:	82 0f       	add	r24, r18
    29d0:	93 1f       	adc	r25, r19
    29d2:	8b 59       	subi	r24, 0x9B	; 155
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	fc 01       	movw	r30, r24
    29d8:	80 81       	ld	r24, Z
    29da:	89 83       	std	Y+1, r24	; 0x01
			TWIC.SLAVE.DATA = data;
    29dc:	80 e8       	ldi	r24, 0x80	; 128
    29de:	94 e0       	ldi	r25, 0x04	; 4
    29e0:	29 81       	ldd	r18, Y+1	; 0x01
    29e2:	fc 01       	movw	r30, r24
    29e4:	24 87       	std	Z+12, r18	; 0x0c
			ppscI2c->cCountOfBytesCollectedByPsc++;
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	86 53       	subi	r24, 0x36	; 54
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	fc 01       	movw	r30, r24
    29f0:	80 81       	ld	r24, Z
    29f2:	21 e0       	ldi	r18, 0x01	; 1
    29f4:	28 0f       	add	r18, r24
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	86 53       	subi	r24, 0x36	; 54
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	fc 01       	movw	r30, r24
    2a00:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    2a02:	80 e8       	ldi	r24, 0x80	; 128
    2a04:	94 e0       	ldi	r25, 0x04	; 4
    2a06:	23 e0       	ldi	r18, 0x03	; 3
    2a08:	fc 01       	movw	r30, r24
    2a0a:	21 87       	std	Z+9, r18	; 0x09
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
		}
	}
}
    2a0c:	0a c0       	rjmp	.+20     	; 0x2a22 <pscI2cReadHandler+0xc0>
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
		}
		/* If buffer overflow. */
		else 
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    2a0e:	80 e8       	ldi	r24, 0x80	; 128
    2a10:	94 e0       	ldi	r25, 0x04	; 4
    2a12:	22 e0       	ldi	r18, 0x02	; 2
    2a14:	fc 01       	movw	r30, r24
    2a16:	21 87       	std	Z+9, r18	; 0x09
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	62 e0       	ldi	r22, 0x02	; 2
    2a1e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <pscI2cTransactionFinished>
		}
	}
}
    2a22:	00 00       	nop
    2a24:	23 96       	adiw	r28, 0x03	; 3
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

00002a30 <pscI2cTransactionFinished>:
 *
 *  \param ppscI2c    The PscI2c_t struct instance.
 *  \param result The result of the transaction.
 */
void pscI2cTransactionFinished(PscI2c_t *ppscI2c, uint8_t result)
{
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <pscI2cTransactionFinished+0x6>
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	6b 83       	std	Y+3, r22	; 0x03
	ppscI2c->cResult = result;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	81 53       	subi	r24, 0x31	; 49
    2a46:	9f 4f       	sbci	r25, 0xFF	; 255
    2a48:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
	ppscI2c->cStatus = PscI2cReady;
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	82 53       	subi	r24, 0x32	; 50
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	fc 01       	movw	r30, r24
    2a58:	10 82       	st	Z, r1
}
    2a5a:	00 00       	nop
    2a5c:	23 96       	adiw	r28, 0x03	; 3
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <mainTimerInit>:

/** Initialise the main timer which is used for general timing.
	\return Nothing
*/   
void mainTimerInit(void)
{
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
		Assume CPU clock is 8 MHz
		Target is 1000 interrupts per second (every 1 ms)
		8 MHz / 256 = 31250 Hz
	to work from CPUCLK/64, with period 10000 and
	 */
	TCC0.PER = 8000;
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	98 e0       	ldi	r25, 0x08	; 8
    2a74:	20 e4       	ldi	r18, 0x40	; 64
    2a76:	3f e1       	ldi	r19, 0x1F	; 31
    2a78:	fc 01       	movw	r30, r24
    2a7a:	26 a3       	std	Z+38, r18	; 0x26
    2a7c:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	98 e0       	ldi	r25, 0x08	; 8
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	38 e0       	ldi	r19, 0x08	; 8
    2a86:	f9 01       	movw	r30, r18
    2a88:	20 81       	ld	r18, Z
    2a8a:	20 7f       	andi	r18, 0xF0	; 240
    2a8c:	21 60       	ori	r18, 0x01	; 1
    2a8e:	fc 01       	movw	r30, r24
    2a90:	20 83       	st	Z, r18
	
	/* Enable overflow interrupt */
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_LO_gc;
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	98 e0       	ldi	r25, 0x08	; 8
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	38 e0       	ldi	r19, 0x08	; 8
    2a9a:	f9 01       	movw	r30, r18
    2a9c:	26 81       	ldd	r18, Z+6	; 0x06
    2a9e:	2c 7f       	andi	r18, 0xFC	; 252
    2aa0:	21 60       	ori	r18, 0x01	; 1
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	26 83       	std	Z+6, r18	; 0x06

}
    2aa6:	00 00       	nop
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	08 95       	ret

00002aae <__vector_14>:

/** Interrupt handler for the main timer which is used for general timing
	\return Nothing
*/   
ISR(TCC0_OVF_vect)
{	/* Interrupt every 1ms */
    2aae:	1f 92       	push	r1
    2ab0:	0f 92       	push	r0
    2ab2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	af 93       	push	r26
    2ac0:	bf 93       	push	r27
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62

	/* Increment a count of ms that can be used elsewhere */
	gdw_LocalmsTimeCount++;	/* Wraps every ~50 days */
    2aca:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <gdw_LocalmsTimeCount>
    2ace:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <gdw_LocalmsTimeCount+0x1>
    2ad2:	a0 91 14 23 	lds	r26, 0x2314	; 0x802314 <gdw_LocalmsTimeCount+0x2>
    2ad6:	b0 91 15 23 	lds	r27, 0x2315	; 0x802315 <gdw_LocalmsTimeCount+0x3>
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	a1 1d       	adc	r26, r1
    2ade:	b1 1d       	adc	r27, r1
    2ae0:	80 93 12 23 	sts	0x2312, r24	; 0x802312 <gdw_LocalmsTimeCount>
    2ae4:	90 93 13 23 	sts	0x2313, r25	; 0x802313 <gdw_LocalmsTimeCount+0x1>
    2ae8:	a0 93 14 23 	sts	0x2314, r26	; 0x802314 <gdw_LocalmsTimeCount+0x2>
    2aec:	b0 93 15 23 	sts	0x2315, r27	; 0x802315 <gdw_LocalmsTimeCount+0x3>

	if(++gc10msCount >= 10)
    2af0:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gc10msCount>
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	80 93 0a 23 	sts	0x230A, r24	; 0x80230a <gc10msCount>
    2afa:	8a 30       	cpi	r24, 0x0A	; 10
    2afc:	98 f1       	brcs	.+102    	; 0x2b64 <__vector_14+0xb6>
	{	/* Another 10ms */
		gc10msCount = 0;
    2afe:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <gc10msCount>

		/* Counter wraps every 2.56s */
		/* This is READ-ONLY from the main loop */
		gc10msTick++;	/* This is a simple counter to allow the main loop to use small time increments */
    2b02:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <gc10msTick>
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	80 93 18 23 	sts	0x2318, r24	; 0x802318 <gc10msTick>

		if(++gc100msCount >= gcTenthSecond_PartCount)
    2b0c:	80 91 16 23 	lds	r24, 0x2316	; 0x802316 <gc100msCount>
    2b10:	8f 5f       	subi	r24, 0xFF	; 255
    2b12:	80 93 16 23 	sts	0x2316, r24	; 0x802316 <gc100msCount>
    2b16:	9a e0       	ldi	r25, 0x0A	; 10
    2b18:	89 17       	cp	r24, r25
    2b1a:	a8 f0       	brcs	.+42     	; 0x2b46 <__vector_14+0x98>
		{	/* Another 100ms. Counter wraps every 25.6s */
			gc100msCount = 0;
    2b1c:	10 92 16 23 	sts	0x2316, r1	; 0x802316 <gc100msCount>
			gc100msTick++;	/* This is a simple counter to allow the main loop to use small time increments
    2b20:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc100msTick>
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <gc100msTick>
									This is READ-ONLY from the main loop */


			if(++gc1sCount >= 10)
    2b2a:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <gc1sCount>
    2b2e:	8f 5f       	subi	r24, 0xFF	; 255
    2b30:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <gc1sCount>
    2b34:	8a 30       	cpi	r24, 0x0A	; 10
    2b36:	38 f0       	brcs	.+14     	; 0x2b46 <__vector_14+0x98>
			{	/* Another 1000ms = 1s */
				gc1sCount = 0;
    2b38:	10 92 0f 23 	sts	0x230F, r1	; 0x80230f <gc1sCount>
				gc1sTick++;	/* This is a simple counter to allow the main loop to use small time increments
    2b3c:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <gc1sTick>
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <gc1sTick>
									This is READ-ONLY from the main loop */
			}
		}

		if(++gcSubSecondCnt >= gcQuarterSecond_PartCount)
    2b46:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <gcSubSecondCnt>
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <gcSubSecondCnt>
    2b50:	99 e1       	ldi	r25, 0x19	; 25
    2b52:	89 17       	cp	r24, r25
    2b54:	38 f0       	brcs	.+14     	; 0x2b64 <__vector_14+0xb6>
		{	/* Another quarter second */
			gcSubSecondCnt = 0;
    2b56:	10 92 0c 23 	sts	0x230C, r1	; 0x80230c <gcSubSecondCnt>
			gc250msTick++;	/* This is a simple counter to allow the main loop to use small time increments
    2b5a:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <gc250msTick>
    2b5e:	8f 5f       	subi	r24, 0xFF	; 255
    2b60:	80 93 0b 23 	sts	0x230B, r24	; 0x80230b <gc250msTick>
									This is READ-ONLY from the main loop */
		}

	}

}
    2b64:	00 00       	nop
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	bf 91       	pop	r27
    2b6c:	af 91       	pop	r26
    2b6e:	9f 91       	pop	r25
    2b70:	8f 91       	pop	r24
    2b72:	0f 90       	pop	r0
    2b74:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b78:	0f 90       	pop	r0
    2b7a:	1f 90       	pop	r1
    2b7c:	18 95       	reti

00002b7e <mainTimerService>:
/** Manage general timing events.
	This is called once from the main loop and manages slower timing that can be handled outside of the interrupt.
	\return Nothing
*/   
void mainTimerService(void)
{
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <mainTimerService+0x6>
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <mainTimerService+0x8>
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	bool bAnother_100ms;
	bool bAnother_250ms;
	uint32_t dwTemp;

	bAnother_100ms = false;
    2b8a:	1e 82       	std	Y+6, r1	; 0x06
	bAnother_250ms = false;
    2b8c:	19 82       	std	Y+1, r1	; 0x01

	/* some rather weird looking code in here is most likely due to trying to avoid clashes with the interrupt 
		eg avoiding writing to variables that the interrupt also writes to */
	if(gcLastTimeHere_100ms != gc100msTick)
    2b8e:	90 91 1e 23 	lds	r25, 0x231E	; 0x80231e <gcLastTimeHere_100ms>
    2b92:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <gc100msTick>
    2b96:	98 17       	cp	r25, r24
    2b98:	39 f0       	breq	.+14     	; 0x2ba8 <mainTimerService+0x2a>
	{	/* At least 100ms since last check */
		gcLastTimeHere_100ms++;	/* Catch up */
    2b9a:	80 91 1e 23 	lds	r24, 0x231E	; 0x80231e <gcLastTimeHere_100ms>
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 93 1e 23 	sts	0x231E, r24	; 0x80231e <gcLastTimeHere_100ms>
		bAnother_100ms = true;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	8e 83       	std	Y+6, r24	; 0x06
	}

	if(gcLastTimeHere_250ms != gc250msTick)
    2ba8:	90 91 10 23 	lds	r25, 0x2310	; 0x802310 <gcLastTimeHere_250ms>
    2bac:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <gc250msTick>
    2bb0:	98 17       	cp	r25, r24
    2bb2:	39 f0       	breq	.+14     	; 0x2bc2 <mainTimerService+0x44>
	{	/* At least 250ms since last check */
		gcLastTimeHere_250ms++;	/* Catch up */
    2bb4:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <gcLastTimeHere_250ms>
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <gcLastTimeHere_250ms>
		bAnother_250ms = true;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	89 83       	std	Y+1, r24	; 0x01
	}

	/* gdw_msTimeCount Wraps every ~50 days */
	/* read repeatedly until 2 reads the same, to ensure int does not change it in middle of it being copied here */
	dwTemp = 0;
    2bc2:	1a 82       	std	Y+2, r1	; 0x02
    2bc4:	1b 82       	std	Y+3, r1	; 0x03
    2bc6:	1c 82       	std	Y+4, r1	; 0x04
    2bc8:	1d 82       	std	Y+5, r1	; 0x05
	do
	{
		gdw_msTimeCount = dwTemp;			/* Copy temp to destination */
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	ac 81       	ldd	r26, Y+4	; 0x04
    2bd0:	bd 81       	ldd	r27, Y+5	; 0x05
    2bd2:	80 93 1f 23 	sts	0x231F, r24	; 0x80231f <gdw_msTimeCount>
    2bd6:	90 93 20 23 	sts	0x2320, r25	; 0x802320 <gdw_msTimeCount+0x1>
    2bda:	a0 93 21 23 	sts	0x2321, r26	; 0x802321 <gdw_msTimeCount+0x2>
    2bde:	b0 93 22 23 	sts	0x2322, r27	; 0x802322 <gdw_msTimeCount+0x3>
		dwTemp = gdw_LocalmsTimeCount;	/* Update temp from the src */
    2be2:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <gdw_LocalmsTimeCount>
    2be6:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <gdw_LocalmsTimeCount+0x1>
    2bea:	a0 91 14 23 	lds	r26, 0x2314	; 0x802314 <gdw_LocalmsTimeCount+0x2>
    2bee:	b0 91 15 23 	lds	r27, 0x2315	; 0x802315 <gdw_LocalmsTimeCount+0x3>
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
    2bf4:	9b 83       	std	Y+3, r25	; 0x03
    2bf6:	ac 83       	std	Y+4, r26	; 0x04
    2bf8:	bd 83       	std	Y+5, r27	; 0x05
	} while(gdw_msTimeCount != dwTemp);	/* check the src has not changed since setting the destination */
    2bfa:	20 91 1f 23 	lds	r18, 0x231F	; 0x80231f <gdw_msTimeCount>
    2bfe:	30 91 20 23 	lds	r19, 0x2320	; 0x802320 <gdw_msTimeCount+0x1>
    2c02:	40 91 21 23 	lds	r20, 0x2321	; 0x802321 <gdw_msTimeCount+0x2>
    2c06:	50 91 22 23 	lds	r21, 0x2322	; 0x802322 <gdw_msTimeCount+0x3>
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	ac 81       	ldd	r26, Y+4	; 0x04
    2c10:	bd 81       	ldd	r27, Y+5	; 0x05
    2c12:	28 17       	cp	r18, r24
    2c14:	39 07       	cpc	r19, r25
    2c16:	4a 07       	cpc	r20, r26
    2c18:	5b 07       	cpc	r21, r27
    2c1a:	b9 f6       	brne	.-82     	; 0x2bca <mainTimerService+0x4c>
	if(bAnother_100ms)
	{	/* Another 100 ms */
	}


	if(bAnother_250ms)
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	88 23       	and	r24, r24
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <mainTimerService+0xa6>
    2c22:	40 c0       	rjmp	.+128    	; 0x2ca4 <mainTimerService+0x126>
	{	/* Another quarter second */
		if(++gcSecondTimer >= 4)
    2c24:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <gcSecondTimer>
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	80 93 17 23 	sts	0x2317, r24	; 0x802317 <gcSecondTimer>
    2c2e:	80 91 17 23 	lds	r24, 0x2317	; 0x802317 <gcSecondTimer>
    2c32:	84 30       	cpi	r24, 0x04	; 4
    2c34:	b8 f1       	brcs	.+110    	; 0x2ca4 <mainTimerService+0x126>
		{	/* Another second */
			gcSecondTimer = 0;
    2c36:	10 92 17 23 	sts	0x2317, r1	; 0x802317 <gcSecondTimer>

			/* Track how many seconds the controller has been up for. 32-bit. Can track 136 years */
			gdwSecondsAlive++;
    2c3a:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
    2c3e:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
    2c42:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
    2c46:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	a1 1d       	adc	r26, r1
    2c4e:	b1 1d       	adc	r27, r1
    2c50:	80 93 19 23 	sts	0x2319, r24	; 0x802319 <gdwSecondsAlive>
    2c54:	90 93 1a 23 	sts	0x231A, r25	; 0x80231a <gdwSecondsAlive+0x1>
    2c58:	a0 93 1b 23 	sts	0x231B, r26	; 0x80231b <gdwSecondsAlive+0x2>
    2c5c:	b0 93 1c 23 	sts	0x231C, r27	; 0x80231c <gdwSecondsAlive+0x3>
			
			pscSetSecondsAlive(gdwSecondsAlive);
    2c60:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gdwSecondsAlive>
    2c64:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <gdwSecondsAlive+0x1>
    2c68:	a0 91 1b 23 	lds	r26, 0x231B	; 0x80231b <gdwSecondsAlive+0x2>
    2c6c:	b0 91 1c 23 	lds	r27, 0x231C	; 0x80231c <gdwSecondsAlive+0x3>
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 0c 12 	call	0x2418	; 0x2418 <pscSetSecondsAlive>


			gcTwoSecondTimer++;
    2c78:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <gcTwoSecondTimer>
    2c7c:	8f 5f       	subi	r24, 0xFF	; 255
    2c7e:	80 93 1d 23 	sts	0x231D, r24	; 0x80231d <gcTwoSecondTimer>
			if(gcTwoSecondTimer >= 2)
    2c82:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <gcTwoSecondTimer>
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	10 f0       	brcs	.+4      	; 0x2c8e <mainTimerService+0x110>
			{
				/* Another two-seconds */
				gcTwoSecondTimer = 0;
    2c8a:	10 92 1d 23 	sts	0x231D, r1	; 0x80231d <gcTwoSecondTimer>
			}

			if(++gcMinuteTimer >= 60)
    2c8e:	80 91 11 23 	lds	r24, 0x2311	; 0x802311 <gcMinuteTimer>
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	80 93 11 23 	sts	0x2311, r24	; 0x802311 <gcMinuteTimer>
    2c98:	80 91 11 23 	lds	r24, 0x2311	; 0x802311 <gcMinuteTimer>
    2c9c:	8c 33       	cpi	r24, 0x3C	; 60
    2c9e:	10 f0       	brcs	.+4      	; 0x2ca4 <mainTimerService+0x126>
			{
				/* Another minute */
				gcMinuteTimer = 0;
    2ca0:	10 92 11 23 	sts	0x2311, r1	; 0x802311 <gcMinuteTimer>
			}

		}	/* Another second */

	}
}
    2ca4:	00 00       	nop
    2ca6:	26 96       	adiw	r28, 0x06	; 6
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	08 95       	ret

00002cb2 <quadInit>:

/** Initialise the quadrature decoder
	\return Nothing
*/
void quadInit(void)
{
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    2cba:	80 e8       	ldi	r24, 0x80	; 128
    2cbc:	96 e0       	ldi	r25, 0x06	; 6
    2cbe:	28 e1       	ldi	r18, 0x18	; 24
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	25 8b       	std	Z+21, r18	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    2cc4:	80 e8       	ldi	r24, 0x80	; 128
    2cc6:	96 e0       	ldi	r25, 0x06	; 6
    2cc8:	28 e1       	ldi	r18, 0x18	; 24
    2cca:	fc 01       	movw	r30, r24
    2ccc:	26 8b       	std	Z+22, r18	; 0x16
}
    2cce:	00 00       	nop
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <rstInit>:

/** Initialise the reset object, read the reason for the reset
	\return Nothing
*/   
void rstInit(void)
{
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
	gLastReasonForReset = RST.STATUS;
    2cde:	88 e7       	ldi	r24, 0x78	; 120
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	80 81       	ld	r24, Z
    2ce6:	80 93 23 23 	sts	0x2323, r24	; 0x802323 <gLastReasonForReset>
	
	/* Clear all reset flags */
	RST.STATUS = 0x3F;
    2cea:	88 e7       	ldi	r24, 0x78	; 120
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	2f e3       	ldi	r18, 0x3F	; 63
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	20 83       	st	Z, r18
}
    2cf4:	00 00       	nop
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	08 95       	ret

00002cfc <rstGetLastReasonForReset>:

uint8_t rstGetLastReasonForReset(void)
{
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
	return(gLastReasonForReset);
    2d04:	80 91 23 23 	lds	r24, 0x2323	; 0x802323 <gLastReasonForReset>
}
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <spiInit>:
uint8_t gTemp;

/* static function prototypes */

void spiInit(void)
{
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
	/* Configure GPIO for SPI pins */
	PORTC.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm;          /* MOSI, SCK, SS outputs; MISO input */
    2d16:	80 e4       	ldi	r24, 0x40	; 64
    2d18:	96 e0       	ldi	r25, 0x06	; 6
    2d1a:	20 eb       	ldi	r18, 0xB0	; 176
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET = PIN4_bm;       /* de-assert CS pin (active low) */
    2d20:	80 e4       	ldi	r24, 0x40	; 64
    2d22:	96 e0       	ldi	r25, 0x06	; 6
    2d24:	20 e1       	ldi	r18, 0x10	; 16
    2d26:	fc 01       	movw	r30, r24
    2d28:	25 83       	std	Z+5, r18	; 0x05
	
	/* Configure SPI, Master, Mode 0, 512 kHz clock */
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
    2d2a:	80 ec       	ldi	r24, 0xC0	; 192
    2d2c:	98 e0       	ldi	r25, 0x08	; 8
    2d2e:	21 e5       	ldi	r18, 0x51	; 81
    2d30:	fc 01       	movw	r30, r24
    2d32:	20 83       	st	Z, r18
	
	/* Flush master receive buffer */
	while(SPIC.STATUS & 0x80)
    2d34:	06 c0       	rjmp	.+12     	; 0x2d42 <spiInit+0x34>
	{
		gTemp = SPIC.DATA;
    2d36:	80 ec       	ldi	r24, 0xC0	; 192
    2d38:	98 e0       	ldi	r25, 0x08	; 8
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	83 81       	ldd	r24, Z+3	; 0x03
    2d3e:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <gTemp>
	
	/* Configure SPI, Master, Mode 0, 512 kHz clock */
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
	
	/* Flush master receive buffer */
	while(SPIC.STATUS & 0x80)
    2d42:	80 ec       	ldi	r24, 0xC0	; 192
    2d44:	98 e0       	ldi	r25, 0x08	; 8
    2d46:	fc 01       	movw	r30, r24
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	88 23       	and	r24, r24
    2d4c:	a4 f3       	brlt	.-24     	; 0x2d36 <spiInit+0x28>
	{
		gTemp = SPIC.DATA;
	}
}
    2d4e:	00 00       	nop
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	08 95       	ret

00002d56 <__subsf3>:
    2d56:	50 58       	subi	r21, 0x80	; 128

00002d58 <__addsf3>:
    2d58:	bb 27       	eor	r27, r27
    2d5a:	aa 27       	eor	r26, r26
    2d5c:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__addsf3x>
    2d60:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__fp_round>
    2d64:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__fp_pscA>
    2d68:	38 f0       	brcs	.+14     	; 0x2d78 <__addsf3+0x20>
    2d6a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__fp_pscB>
    2d6e:	20 f0       	brcs	.+8      	; 0x2d78 <__addsf3+0x20>
    2d70:	39 f4       	brne	.+14     	; 0x2d80 <__addsf3+0x28>
    2d72:	9f 3f       	cpi	r25, 0xFF	; 255
    2d74:	19 f4       	brne	.+6      	; 0x2d7c <__addsf3+0x24>
    2d76:	26 f4       	brtc	.+8      	; 0x2d80 <__addsf3+0x28>
    2d78:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__fp_nan>
    2d7c:	0e f4       	brtc	.+2      	; 0x2d80 <__addsf3+0x28>
    2d7e:	e0 95       	com	r30
    2d80:	e7 fb       	bst	r30, 7
    2d82:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__fp_inf>

00002d86 <__addsf3x>:
    2d86:	e9 2f       	mov	r30, r25
    2d88:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__fp_split3>
    2d8c:	58 f3       	brcs	.-42     	; 0x2d64 <__addsf3+0xc>
    2d8e:	ba 17       	cp	r27, r26
    2d90:	62 07       	cpc	r22, r18
    2d92:	73 07       	cpc	r23, r19
    2d94:	84 07       	cpc	r24, r20
    2d96:	95 07       	cpc	r25, r21
    2d98:	20 f0       	brcs	.+8      	; 0x2da2 <__addsf3x+0x1c>
    2d9a:	79 f4       	brne	.+30     	; 0x2dba <__addsf3x+0x34>
    2d9c:	a6 f5       	brtc	.+104    	; 0x2e06 <__addsf3x+0x80>
    2d9e:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_zero>
    2da2:	0e f4       	brtc	.+2      	; 0x2da6 <__addsf3x+0x20>
    2da4:	e0 95       	com	r30
    2da6:	0b 2e       	mov	r0, r27
    2da8:	ba 2f       	mov	r27, r26
    2daa:	a0 2d       	mov	r26, r0
    2dac:	0b 01       	movw	r0, r22
    2dae:	b9 01       	movw	r22, r18
    2db0:	90 01       	movw	r18, r0
    2db2:	0c 01       	movw	r0, r24
    2db4:	ca 01       	movw	r24, r20
    2db6:	a0 01       	movw	r20, r0
    2db8:	11 24       	eor	r1, r1
    2dba:	ff 27       	eor	r31, r31
    2dbc:	59 1b       	sub	r21, r25
    2dbe:	99 f0       	breq	.+38     	; 0x2de6 <__addsf3x+0x60>
    2dc0:	59 3f       	cpi	r21, 0xF9	; 249
    2dc2:	50 f4       	brcc	.+20     	; 0x2dd8 <__addsf3x+0x52>
    2dc4:	50 3e       	cpi	r21, 0xE0	; 224
    2dc6:	68 f1       	brcs	.+90     	; 0x2e22 <__addsf3x+0x9c>
    2dc8:	1a 16       	cp	r1, r26
    2dca:	f0 40       	sbci	r31, 0x00	; 0
    2dcc:	a2 2f       	mov	r26, r18
    2dce:	23 2f       	mov	r18, r19
    2dd0:	34 2f       	mov	r19, r20
    2dd2:	44 27       	eor	r20, r20
    2dd4:	58 5f       	subi	r21, 0xF8	; 248
    2dd6:	f3 cf       	rjmp	.-26     	; 0x2dbe <__addsf3x+0x38>
    2dd8:	46 95       	lsr	r20
    2dda:	37 95       	ror	r19
    2ddc:	27 95       	ror	r18
    2dde:	a7 95       	ror	r26
    2de0:	f0 40       	sbci	r31, 0x00	; 0
    2de2:	53 95       	inc	r21
    2de4:	c9 f7       	brne	.-14     	; 0x2dd8 <__addsf3x+0x52>
    2de6:	7e f4       	brtc	.+30     	; 0x2e06 <__addsf3x+0x80>
    2de8:	1f 16       	cp	r1, r31
    2dea:	ba 0b       	sbc	r27, r26
    2dec:	62 0b       	sbc	r22, r18
    2dee:	73 0b       	sbc	r23, r19
    2df0:	84 0b       	sbc	r24, r20
    2df2:	ba f0       	brmi	.+46     	; 0x2e22 <__addsf3x+0x9c>
    2df4:	91 50       	subi	r25, 0x01	; 1
    2df6:	a1 f0       	breq	.+40     	; 0x2e20 <__addsf3x+0x9a>
    2df8:	ff 0f       	add	r31, r31
    2dfa:	bb 1f       	adc	r27, r27
    2dfc:	66 1f       	adc	r22, r22
    2dfe:	77 1f       	adc	r23, r23
    2e00:	88 1f       	adc	r24, r24
    2e02:	c2 f7       	brpl	.-16     	; 0x2df4 <__addsf3x+0x6e>
    2e04:	0e c0       	rjmp	.+28     	; 0x2e22 <__addsf3x+0x9c>
    2e06:	ba 0f       	add	r27, r26
    2e08:	62 1f       	adc	r22, r18
    2e0a:	73 1f       	adc	r23, r19
    2e0c:	84 1f       	adc	r24, r20
    2e0e:	48 f4       	brcc	.+18     	; 0x2e22 <__addsf3x+0x9c>
    2e10:	87 95       	ror	r24
    2e12:	77 95       	ror	r23
    2e14:	67 95       	ror	r22
    2e16:	b7 95       	ror	r27
    2e18:	f7 95       	ror	r31
    2e1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e1c:	08 f0       	brcs	.+2      	; 0x2e20 <__addsf3x+0x9a>
    2e1e:	b0 cf       	rjmp	.-160    	; 0x2d80 <__addsf3+0x28>
    2e20:	93 95       	inc	r25
    2e22:	88 0f       	add	r24, r24
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <__addsf3x+0xa2>
    2e26:	99 27       	eor	r25, r25
    2e28:	ee 0f       	add	r30, r30
    2e2a:	97 95       	ror	r25
    2e2c:	87 95       	ror	r24
    2e2e:	08 95       	ret

00002e30 <__cmpsf2>:
    2e30:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__fp_cmp>
    2e34:	08 f4       	brcc	.+2      	; 0x2e38 <__cmpsf2+0x8>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	08 95       	ret

00002e3a <__fixunssfsi>:
    2e3a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__fp_splitA>
    2e3e:	88 f0       	brcs	.+34     	; 0x2e62 <__fixunssfsi+0x28>
    2e40:	9f 57       	subi	r25, 0x7F	; 127
    2e42:	98 f0       	brcs	.+38     	; 0x2e6a <__fixunssfsi+0x30>
    2e44:	b9 2f       	mov	r27, r25
    2e46:	99 27       	eor	r25, r25
    2e48:	b7 51       	subi	r27, 0x17	; 23
    2e4a:	b0 f0       	brcs	.+44     	; 0x2e78 <__fixunssfsi+0x3e>
    2e4c:	e1 f0       	breq	.+56     	; 0x2e86 <__fixunssfsi+0x4c>
    2e4e:	66 0f       	add	r22, r22
    2e50:	77 1f       	adc	r23, r23
    2e52:	88 1f       	adc	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	1a f0       	brmi	.+6      	; 0x2e5e <__fixunssfsi+0x24>
    2e58:	ba 95       	dec	r27
    2e5a:	c9 f7       	brne	.-14     	; 0x2e4e <__fixunssfsi+0x14>
    2e5c:	14 c0       	rjmp	.+40     	; 0x2e86 <__fixunssfsi+0x4c>
    2e5e:	b1 30       	cpi	r27, 0x01	; 1
    2e60:	91 f0       	breq	.+36     	; 0x2e86 <__fixunssfsi+0x4c>
    2e62:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__fp_zero>
    2e66:	b1 e0       	ldi	r27, 0x01	; 1
    2e68:	08 95       	ret
    2e6a:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_zero>
    2e6e:	67 2f       	mov	r22, r23
    2e70:	78 2f       	mov	r23, r24
    2e72:	88 27       	eor	r24, r24
    2e74:	b8 5f       	subi	r27, 0xF8	; 248
    2e76:	39 f0       	breq	.+14     	; 0x2e86 <__fixunssfsi+0x4c>
    2e78:	b9 3f       	cpi	r27, 0xF9	; 249
    2e7a:	cc f3       	brlt	.-14     	; 0x2e6e <__fixunssfsi+0x34>
    2e7c:	86 95       	lsr	r24
    2e7e:	77 95       	ror	r23
    2e80:	67 95       	ror	r22
    2e82:	b3 95       	inc	r27
    2e84:	d9 f7       	brne	.-10     	; 0x2e7c <__fixunssfsi+0x42>
    2e86:	3e f4       	brtc	.+14     	; 0x2e96 <__fixunssfsi+0x5c>
    2e88:	90 95       	com	r25
    2e8a:	80 95       	com	r24
    2e8c:	70 95       	com	r23
    2e8e:	61 95       	neg	r22
    2e90:	7f 4f       	sbci	r23, 0xFF	; 255
    2e92:	8f 4f       	sbci	r24, 0xFF	; 255
    2e94:	9f 4f       	sbci	r25, 0xFF	; 255
    2e96:	08 95       	ret

00002e98 <__fp_cmp>:
    2e98:	99 0f       	add	r25, r25
    2e9a:	00 08       	sbc	r0, r0
    2e9c:	55 0f       	add	r21, r21
    2e9e:	aa 0b       	sbc	r26, r26
    2ea0:	e0 e8       	ldi	r30, 0x80	; 128
    2ea2:	fe ef       	ldi	r31, 0xFE	; 254
    2ea4:	16 16       	cp	r1, r22
    2ea6:	17 06       	cpc	r1, r23
    2ea8:	e8 07       	cpc	r30, r24
    2eaa:	f9 07       	cpc	r31, r25
    2eac:	c0 f0       	brcs	.+48     	; 0x2ede <__fp_cmp+0x46>
    2eae:	12 16       	cp	r1, r18
    2eb0:	13 06       	cpc	r1, r19
    2eb2:	e4 07       	cpc	r30, r20
    2eb4:	f5 07       	cpc	r31, r21
    2eb6:	98 f0       	brcs	.+38     	; 0x2ede <__fp_cmp+0x46>
    2eb8:	62 1b       	sub	r22, r18
    2eba:	73 0b       	sbc	r23, r19
    2ebc:	84 0b       	sbc	r24, r20
    2ebe:	95 0b       	sbc	r25, r21
    2ec0:	39 f4       	brne	.+14     	; 0x2ed0 <__fp_cmp+0x38>
    2ec2:	0a 26       	eor	r0, r26
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <__fp_cmp+0x46>
    2ec6:	23 2b       	or	r18, r19
    2ec8:	24 2b       	or	r18, r20
    2eca:	25 2b       	or	r18, r21
    2ecc:	21 f4       	brne	.+8      	; 0x2ed6 <__fp_cmp+0x3e>
    2ece:	08 95       	ret
    2ed0:	0a 26       	eor	r0, r26
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <__fp_cmp+0x3e>
    2ed4:	a1 40       	sbci	r26, 0x01	; 1
    2ed6:	a6 95       	lsr	r26
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	81 1d       	adc	r24, r1
    2edc:	81 1d       	adc	r24, r1
    2ede:	08 95       	ret

00002ee0 <__fp_inf>:
    2ee0:	97 f9       	bld	r25, 7
    2ee2:	9f 67       	ori	r25, 0x7F	; 127
    2ee4:	80 e8       	ldi	r24, 0x80	; 128
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	08 95       	ret

00002eec <__fp_nan>:
    2eec:	9f ef       	ldi	r25, 0xFF	; 255
    2eee:	80 ec       	ldi	r24, 0xC0	; 192
    2ef0:	08 95       	ret

00002ef2 <__fp_pscA>:
    2ef2:	00 24       	eor	r0, r0
    2ef4:	0a 94       	dec	r0
    2ef6:	16 16       	cp	r1, r22
    2ef8:	17 06       	cpc	r1, r23
    2efa:	18 06       	cpc	r1, r24
    2efc:	09 06       	cpc	r0, r25
    2efe:	08 95       	ret

00002f00 <__fp_pscB>:
    2f00:	00 24       	eor	r0, r0
    2f02:	0a 94       	dec	r0
    2f04:	12 16       	cp	r1, r18
    2f06:	13 06       	cpc	r1, r19
    2f08:	14 06       	cpc	r1, r20
    2f0a:	05 06       	cpc	r0, r21
    2f0c:	08 95       	ret

00002f0e <__fp_round>:
    2f0e:	09 2e       	mov	r0, r25
    2f10:	03 94       	inc	r0
    2f12:	00 0c       	add	r0, r0
    2f14:	11 f4       	brne	.+4      	; 0x2f1a <__fp_round+0xc>
    2f16:	88 23       	and	r24, r24
    2f18:	52 f0       	brmi	.+20     	; 0x2f2e <__fp_round+0x20>
    2f1a:	bb 0f       	add	r27, r27
    2f1c:	40 f4       	brcc	.+16     	; 0x2f2e <__fp_round+0x20>
    2f1e:	bf 2b       	or	r27, r31
    2f20:	11 f4       	brne	.+4      	; 0x2f26 <__fp_round+0x18>
    2f22:	60 ff       	sbrs	r22, 0
    2f24:	04 c0       	rjmp	.+8      	; 0x2f2e <__fp_round+0x20>
    2f26:	6f 5f       	subi	r22, 0xFF	; 255
    2f28:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2e:	08 95       	ret

00002f30 <__fp_split3>:
    2f30:	57 fd       	sbrc	r21, 7
    2f32:	90 58       	subi	r25, 0x80	; 128
    2f34:	44 0f       	add	r20, r20
    2f36:	55 1f       	adc	r21, r21
    2f38:	59 f0       	breq	.+22     	; 0x2f50 <__fp_splitA+0x10>
    2f3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f3c:	71 f0       	breq	.+28     	; 0x2f5a <__fp_splitA+0x1a>
    2f3e:	47 95       	ror	r20

00002f40 <__fp_splitA>:
    2f40:	88 0f       	add	r24, r24
    2f42:	97 fb       	bst	r25, 7
    2f44:	99 1f       	adc	r25, r25
    2f46:	61 f0       	breq	.+24     	; 0x2f60 <__fp_splitA+0x20>
    2f48:	9f 3f       	cpi	r25, 0xFF	; 255
    2f4a:	79 f0       	breq	.+30     	; 0x2f6a <__fp_splitA+0x2a>
    2f4c:	87 95       	ror	r24
    2f4e:	08 95       	ret
    2f50:	12 16       	cp	r1, r18
    2f52:	13 06       	cpc	r1, r19
    2f54:	14 06       	cpc	r1, r20
    2f56:	55 1f       	adc	r21, r21
    2f58:	f2 cf       	rjmp	.-28     	; 0x2f3e <__fp_split3+0xe>
    2f5a:	46 95       	lsr	r20
    2f5c:	f1 df       	rcall	.-30     	; 0x2f40 <__fp_splitA>
    2f5e:	08 c0       	rjmp	.+16     	; 0x2f70 <__fp_splitA+0x30>
    2f60:	16 16       	cp	r1, r22
    2f62:	17 06       	cpc	r1, r23
    2f64:	18 06       	cpc	r1, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	f1 cf       	rjmp	.-30     	; 0x2f4c <__fp_splitA+0xc>
    2f6a:	86 95       	lsr	r24
    2f6c:	71 05       	cpc	r23, r1
    2f6e:	61 05       	cpc	r22, r1
    2f70:	08 94       	sec
    2f72:	08 95       	ret

00002f74 <__fp_zero>:
    2f74:	e8 94       	clt

00002f76 <__fp_szero>:
    2f76:	bb 27       	eor	r27, r27
    2f78:	66 27       	eor	r22, r22
    2f7a:	77 27       	eor	r23, r23
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	97 f9       	bld	r25, 7
    2f80:	08 95       	ret

00002f82 <__gesf2>:
    2f82:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__fp_cmp>
    2f86:	08 f4       	brcc	.+2      	; 0x2f8a <__gesf2+0x8>
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	08 95       	ret

00002f8c <_exit>:
    2f8c:	f8 94       	cli

00002f8e <__stop_program>:
    2f8e:	ff cf       	rjmp	.-2      	; 0x2f8e <__stop_program>
