
I2C_HMI_BeverageMaker_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00802000  00003c6e  00003d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016d  008021d0  008021d0  00003ed2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ed2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ac28  00000000  00000000  00004684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004667  00000000  00000000  0000f2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000048db  00000000  00000000  00013913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001784  00000000  00000000  000181f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d1b  00000000  00000000  00019974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f0d  00000000  00000000  0001f68f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d8  00000000  00000000  0002259c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 01 	jmp	0x228	; 0x228 <__dtors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__vector_14>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      48:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      6c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      98:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b8:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__vector_46>
      bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      cc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      dc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ec:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      fc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     100:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     104:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     108:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     10c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     110:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     114:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     118:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     11c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     120:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     124:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     128:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     12c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     130:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     134:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     138:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     13c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     140:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     144:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     148:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     14c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     150:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     154:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     158:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     15c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     160:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     164:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     168:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     16c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     170:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     174:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     178:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     17c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     180:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     184:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     188:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     18c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     190:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     194:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     198:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     19c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c8:	49 07       	cpc	r20, r25
     1ca:	4e 07       	cpc	r20, r30
     1cc:	53 07       	cpc	r21, r19
     1ce:	58 07       	cpc	r21, r24
     1d0:	5d 07       	cpc	r21, r29
     1d2:	62 07       	cpc	r22, r18
     1d4:	67 07       	cpc	r22, r23
     1d6:	6c 07       	cpc	r22, r28
     1d8:	71 07       	cpc	r23, r17
     1da:	05 a8       	ldd	r0, Z+53	; 0x35
     1dc:	4c cd       	rjmp	.-1384   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
     1de:	b2 d4       	rcall	.+2404   	; 0xb44 <_ZN15LedStateMachine19WaitOverTemperatureEv+0x4c>
     1e0:	4e b9       	out	0x0e, r20	; 14
     1e2:	38 36       	cpi	r19, 0x68	; 104
     1e4:	a9 02       	muls	r26, r25
     1e6:	0c 50       	subi	r16, 0x0C	; 12
     1e8:	b9 91       	ld	r27, Y+
     1ea:	86 88       	ldd	r8, Z+22	; 0x16
     1ec:	08 3c       	cpi	r16, 0xC8	; 200
     1ee:	a6 aa       	std	Z+54, r10	; 0x36
     1f0:	aa 2a       	or	r10, r26
     1f2:	be 00       	.word	0x00be	; ????
     1f4:	00 00       	nop
     1f6:	80 3f       	cpi	r24, 0xF0	; 240

000001f8 <__trampolines_start>:
     1f8:	0c 94 53 07 	jmp	0xea6	; 0xea6 <_ZN15LedStateMachine12HandleStatesEh+0x52>
     1fc:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <_ZN15LedStateMachine12HandleStatesEh+0x5c>
     200:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_GLOBAL__sub_D_back>
     204:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_ZN15LedStateMachine12HandleStatesEh+0x3e>
     208:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_ZN15LedStateMachine12HandleStatesEh+0x66>
     20c:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <_ZN15LedStateMachine12HandleStatesEh+0x84>
     210:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <_ZN15LedStateMachine12HandleStatesEh+0x48>
     214:	0c 94 67 07 	jmp	0xece	; 0xece <_ZN15LedStateMachine12HandleStatesEh+0x7a>
     218:	0c 94 62 07 	jmp	0xec4	; 0xec4 <_ZN15LedStateMachine12HandleStatesEh+0x70>
     21c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_GLOBAL__sub_I_back>
     220:	0c 94 71 07 	jmp	0xee2	; 0xee2 <_ZN15LedStateMachine12HandleStatesEh+0x8e>

00000224 <__ctors_start>:
     224:	62 01       	movw	r12, r4

00000226 <__ctors_end>:
     226:	6b 01       	movw	r12, r22

00000228 <__dtors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	df e9       	ldi	r29, 0x9F	; 159
     232:	de bf       	out	0x3e, r29	; 62
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0c bf       	out	0x3c, r16	; 60

00000238 <__do_copy_data>:
     238:	11 e2       	ldi	r17, 0x21	; 33
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b0 e2       	ldi	r27, 0x20	; 32
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	fc e3       	ldi	r31, 0x3C	; 60
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0b bf       	out	0x3b, r16	; 59
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x14>
     248:	07 90       	elpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a0 3d       	cpi	r26, 0xD0	; 208
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0x10>

00000252 <__do_clear_bss>:
     252:	23 e2       	ldi	r18, 0x23	; 35
     254:	a0 ed       	ldi	r26, 0xD0	; 208
     256:	b1 e2       	ldi	r27, 0x21	; 33
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	ad 33       	cpi	r26, 0x3D	; 61
     25e:	b2 07       	cpc	r27, r18
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>

00000262 <__do_global_ctors>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	c3 e1       	ldi	r28, 0x13	; 19
     266:	d1 e0       	ldi	r29, 0x01	; 1
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	06 c0       	rjmp	.+12     	; 0x278 <__do_global_ctors+0x16>
     26c:	21 97       	sbiw	r28, 0x01	; 1
     26e:	01 09       	sbc	r16, r1
     270:	80 2f       	mov	r24, r16
     272:	fe 01       	movw	r30, r28
     274:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__tablejump2__>
     278:	c2 31       	cpi	r28, 0x12	; 18
     27a:	d1 07       	cpc	r29, r17
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	08 07       	cpc	r16, r24
     280:	a9 f7       	brne	.-22     	; 0x26c <__do_global_ctors+0xa>
     282:	0e 94 47 01 	call	0x28e	; 0x28e <main>
     286:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__do_global_dtors>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <main>:
volatile bool back=false;


int main(void)
{
	hmi.Init();
     28e:	84 ed       	ldi	r24, 0xD4	; 212
     290:	91 e2       	ldi	r25, 0x21	; 33
     292:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN15LedStateMachine4InitEv>
	psc.Init();
     296:	80 ed       	ldi	r24, 0xD0	; 208
     298:	91 e2       	ldi	r25, 0x21	; 33
     29a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN17PSC_I2C_Interface4InitEv>
	uint8_t commando=0;
     29e:	c0 e0       	ldi	r28, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		if (psc.GotData())
     2a0:	80 ed       	ldi	r24, 0xD0	; 208
     2a2:	91 e2       	ldi	r25, 0x21	; 33
     2a4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN17PSC_I2C_Interface7GotDataEv>
     2a8:	88 23       	and	r24, r24
     2aa:	31 f0       	breq	.+12     	; 0x2b8 <main+0x2a>
		{
			commando=psc.ReadCommand();
     2ac:	80 ed       	ldi	r24, 0xD0	; 208
     2ae:	91 e2       	ldi	r25, 0x21	; 33
     2b0:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN17PSC_I2C_Interface11ReadCommandEv>
     2b4:	c8 2f       	mov	r28, r24
     2b6:	f4 cf       	rjmp	.-24     	; 0x2a0 <main+0x12>
		} 
		else
		{
			hmi.RunState(commando);
     2b8:	6c 2f       	mov	r22, r28
     2ba:	84 ed       	ldi	r24, 0xD4	; 212
     2bc:	91 e2       	ldi	r25, 0x21	; 33
     2be:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN15LedStateMachine8RunStateEh>
     2c2:	ee cf       	rjmp	.-36     	; 0x2a0 <main+0x12>

000002c4 <_GLOBAL__sub_I_back>:

#include <avr/io.h>
#include "compiler.h"
#include "LedStateMachine.h"
#include "PSC_I2C_Interface.h"
static LedStateMachine hmi;
     2c4:	84 ed       	ldi	r24, 0xD4	; 212
     2c6:	91 e2       	ldi	r25, 0x21	; 33
     2c8:	0e 94 94 01 	call	0x328	; 0x328 <_ZN15LedStateMachineC1Ev>
static	PSC_I2C_Interface psc;
     2cc:	80 ed       	ldi	r24, 0xD0	; 208
     2ce:	91 e2       	ldi	r25, 0x21	; 33
     2d0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN17PSC_I2C_InterfaceC1Ev>
     2d4:	08 95       	ret

000002d6 <_GLOBAL__sub_D_back>:
     2d6:	80 ed       	ldi	r24, 0xD0	; 208
     2d8:	91 e2       	ldi	r25, 0x21	; 33
     2da:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN17PSC_I2C_InterfaceD1Ev>

#include <avr/io.h>
#include "compiler.h"
#include "LedStateMachine.h"
#include "PSC_I2C_Interface.h"
static LedStateMachine hmi;
     2de:	84 ed       	ldi	r24, 0xD4	; 212
     2e0:	91 e2       	ldi	r25, 0x21	; 33
     2e2:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN15LedStateMachineD1Ev>
     2e6:	08 95       	ret

000002e8 <_ZN17PSC_I2C_InterfaceC1Ev>:


#include "PSC_I2C_Interface.h"

// default constructor
PSC_I2C_Interface::PSC_I2C_Interface()
     2e8:	08 95       	ret

000002ea <_ZN17PSC_I2C_InterfaceD1Ev>:
{
} //PCS_I2C_Interface

// default destructor
PSC_I2C_Interface::~PSC_I2C_Interface()
     2ea:	08 95       	ret

000002ec <_ZN17PSC_I2C_Interface4InitEv>:
{
} //~PCS_I2C_Interface

bool PSC_I2C_Interface::Init(void){
	psc=&gPscI2c;
     2ec:	2b e2       	ldi	r18, 0x2B	; 43
     2ee:	32 e2       	ldi	r19, 0x22	; 34
     2f0:	fc 01       	movw	r30, r24
     2f2:	22 83       	std	Z+2, r18	; 0x02
     2f4:	33 83       	std	Z+3, r19	; 0x03
	return isReady;
     2f6:	80 81       	ld	r24, Z
}
     2f8:	08 95       	ret

000002fa <_ZN17PSC_I2C_Interface7GotDataEv>:

bool PSC_I2C_Interface::GotData(){
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	ec 01       	movw	r28, r24
		/* check if a command has been sent from the PSC */
	isReady=pscI2cIsCommandPendingProcessing();
     300:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <pscI2cIsCommandPendingProcessing>
     304:	88 83       	st	Y, r24
	return isReady;
     306:	88 81       	ld	r24, Y
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <_ZN17PSC_I2C_Interface11ReadCommandEv>:

uint8_t PSC_I2C_Interface::ReadCommand(void){
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	ec 01       	movw	r28, r24
	isReady=false;
     314:	fc 01       	movw	r30, r24
     316:	11 92       	st	Z+, r1
     318:	cf 01       	movw	r24, r30
	pscI2cReadCommandData((uint8_t*)&pscCommand,1);
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <pscI2cReadCommandData>
	return pscCommand;
	
}
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <_ZN15LedStateMachineC1Ev>:
		break;
	}
}

void	LedStateMachine::RunManual(void){
	while (1)
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	9a 81       	ldd	r25, Y+2	; 0x02
     33c:	fc 01       	movw	r30, r24
     33e:	11 86       	std	Z+9, r1	; 0x09
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	9a 81       	ldd	r25, Y+2	; 0x02
     344:	fc 01       	movw	r30, r24
     346:	12 86       	std	Z+10, r1	; 0x0a
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	2a e0       	ldi	r18, 0x0A	; 10
     34e:	fc 01       	movw	r30, r24
     350:	23 87       	std	Z+11, r18	; 0x0b
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	2a e0       	ldi	r18, 0x0A	; 10
     358:	fc 01       	movw	r30, r24
     35a:	24 87       	std	Z+12, r18	; 0x0c
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	fc 01       	movw	r30, r24
     362:	15 86       	std	Z+13, r1	; 0x0d
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	fc 01       	movw	r30, r24
     36c:	26 87       	std	Z+14, r18	; 0x0e
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	22 e0       	ldi	r18, 0x02	; 2
     374:	fc 01       	movw	r30, r24
     376:	21 af       	std	Z+57, r18	; 0x39
     378:	00 00       	nop
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <_ZN15LedStateMachineD1Ev>:
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	1f 92       	push	r1
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	89 83       	std	Y+1, r24	; 0x01
     392:	9a 83       	std	Y+2, r25	; 0x02
     394:	00 00       	nop
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <_ZN15LedStateMachine4InitEv>:
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	1f 92       	push	r1
     3a6:	1f 92       	push	r1
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	89 83       	std	Y+1, r24	; 0x01
     3ae:	9a 83       	std	Y+2, r25	; 0x02
     3b0:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
     3b4:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
     3b8:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
     3bc:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
     3c0:	29 81       	ldd	r18, Y+1	; 0x01
     3c2:	3a 81       	ldd	r19, Y+2	; 0x02
     3c4:	f9 01       	movw	r30, r18
     3c6:	81 83       	std	Z+1, r24	; 0x01
     3c8:	92 83       	std	Z+2, r25	; 0x02
     3ca:	a3 83       	std	Z+3, r26	; 0x03
     3cc:	b4 83       	std	Z+4, r27	; 0x04
     3ce:	0e 94 d5 09 	call	0x13aa	; 0x13aa <systemInitialisation>
     3d2:	00 00       	nop
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <_ZN15LedStateMachine15RunPeriodicTaskEv>:
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	1f 92       	push	r1
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	89 83       	std	Y+1, r24	; 0x01
     3ec:	9a 83       	std	Y+2, r25	; 0x02
     3ee:	a8 95       	wdr
     3f0:	0e 94 8c 14 	call	0x2918	; 0x2918 <mainTimerService>
     3f4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <btnManageButtonScan>
     3f8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <manageManualResetDetect>
     3fc:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <ledManager>
     400:	00 00       	nop
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <_ZN15LedStateMachine10StandbyOffEv>:
     40c:	0f 93       	push	r16
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	00 d0       	rcall	.+0      	; 0x414 <_ZN15LedStateMachine10StandbyOffEv+0x8>
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	9b 83       	std	Y+3, r25	; 0x03
     41c:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	8a 81       	ldd	r24, Y+2	; 0x02
     42a:	9b 81       	ldd	r25, Y+3	; 0x03
     42c:	fc 01       	movw	r30, r24
     42e:	81 81       	ldd	r24, Z+1	; 0x01
     430:	92 81       	ldd	r25, Z+2	; 0x02
     432:	a3 81       	ldd	r26, Z+3	; 0x03
     434:	b4 81       	ldd	r27, Z+4	; 0x04
     436:	28 17       	cp	r18, r24
     438:	39 07       	cpc	r19, r25
     43a:	4a 07       	cpc	r20, r26
     43c:	5b 07       	cpc	r21, r27
     43e:	a1 f1       	breq	.+104    	; 0x4a8 <_ZN15LedStateMachine10StandbyOffEv+0x9c>
     440:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	2a 81       	ldd	r18, Y+2	; 0x02
     44e:	3b 81       	ldd	r19, Y+3	; 0x03
     450:	f9 01       	movw	r30, r18
     452:	81 83       	std	Z+1, r24	; 0x01
     454:	92 83       	std	Z+2, r25	; 0x02
     456:	a3 83       	std	Z+3, r26	; 0x03
     458:	b4 83       	std	Z+4, r27	; 0x04
     45a:	19 82       	std	Y+1, r1	; 0x01
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	84 31       	cpi	r24, 0x14	; 20
     460:	58 f4       	brcc	.+22     	; 0x478 <_ZN15LedStateMachine10StandbyOffEv+0x6c>
     462:	0f ef       	ldi	r16, 0xFF	; 255
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	68 ef       	ldi	r22, 0xF8	; 248
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	89 83       	std	Y+1, r24	; 0x01
     476:	f2 cf       	rjmp	.-28     	; 0x45c <_ZN15LedStateMachine10StandbyOffEv+0x50>
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <ledSetAllButtonColour>
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	9b 81       	ldd	r25, Y+3	; 0x03
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	81 70       	andi	r24, 0x01	; 1
     48c:	88 23       	and	r24, r24
     48e:	61 f0       	breq	.+24     	; 0x4a8 <_ZN15LedStateMachine10StandbyOffEv+0x9c>
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	9b 81       	ldd	r25, Y+3	; 0x03
     49e:	fc 01       	movw	r30, r24
     4a0:	20 81       	ld	r18, Z
     4a2:	2e 7f       	andi	r18, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
     4a8:	00 00       	nop
     4aa:	23 96       	adiw	r28, 0x03	; 3
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <_ZN15LedStateMachine17WhiteBarIntensityEh>:
     4b8:	0f 93       	push	r16
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <_ZN15LedStateMachine17WhiteBarIntensityEh+0x8>
     4c0:	1f 92       	push	r1
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	8a 83       	std	Y+2, r24	; 0x02
     4c8:	9b 83       	std	Y+3, r25	; 0x03
     4ca:	6c 83       	std	Y+4, r22	; 0x04
     4cc:	19 82       	std	Y+1, r1	; 0x01
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	84 31       	cpi	r24, 0x14	; 20
     4d2:	58 f4       	brcc	.+22     	; 0x4ea <_ZN15LedStateMachine17WhiteBarIntensityEh+0x32>
     4d4:	01 e5       	ldi	r16, 0x51	; 81
     4d6:	21 e5       	ldi	r18, 0x51	; 81
     4d8:	41 e5       	ldi	r20, 0x51	; 81
     4da:	6c 81       	ldd	r22, Y+4	; 0x04
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	f2 cf       	rjmp	.-28     	; 0x4ce <_ZN15LedStateMachine17WhiteBarIntensityEh+0x16>
     4ea:	00 00       	nop
     4ec:	24 96       	adiw	r28, 0x04	; 4
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <_ZN15LedStateMachine15WhiteBarPulsingEv>:
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	2a 97       	sbiw	r28, 0x0a	; 10
     504:	cd bf       	out	0x3d, r28	; 61
     506:	de bf       	out	0x3e, r29	; 62
     508:	89 87       	std	Y+9, r24	; 0x09
     50a:	9a 87       	std	Y+10, r25	; 0x0a
     50c:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <_ZL11timedicrete>
     510:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <_ZL11timedicrete+0x1>
     514:	a0 91 11 22 	lds	r26, 0x2211	; 0x802211 <_ZL11timedicrete+0x2>
     518:	b0 91 12 22 	lds	r27, 0x2212	; 0x802212 <_ZL11timedicrete+0x3>
     51c:	28 e6       	ldi	r18, 0x68	; 104
     51e:	31 e0       	ldi	r19, 0x01	; 1
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	bc 01       	movw	r22, r24
     526:	cd 01       	movw	r24, r26
     528:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodsi4>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__floatunsisf>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	2b ed       	ldi	r18, 0xDB	; 219
     53e:	3f e0       	ldi	r19, 0x0F	; 15
     540:	49 e4       	ldi	r20, 0x49	; 73
     542:	50 e4       	ldi	r21, 0x40	; 64
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__mulsf3>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	44 e3       	ldi	r20, 0x34	; 52
     556:	53 e4       	ldi	r21, 0x43	; 67
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	0e 94 cf 1b 	call	0x379e	; 0x379e <__divsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	bc 01       	movw	r22, r24
     566:	cd 01       	movw	r24, r26
     568:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <sin>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	4e ef       	ldi	r20, 0xFE	; 254
     576:	52 e4       	ldi	r21, 0x42	; 66
     578:	bc 01       	movw	r22, r24
     57a:	cd 01       	movw	r24, r26
     57c:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__mulsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	53 e4       	ldi	r21, 0x43	; 67
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__addsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	ab 83       	std	Y+3, r26	; 0x03
     59e:	bc 83       	std	Y+4, r27	; 0x04
     5a0:	69 81       	ldd	r22, Y+1	; 0x01
     5a2:	7a 81       	ldd	r23, Y+2	; 0x02
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	0e 94 41 1c 	call	0x3882	; 0x3882 <__fixunssfsi>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	8d 83       	std	Y+5, r24	; 0x05
     5b2:	9e 83       	std	Y+6, r25	; 0x06
     5b4:	af 83       	std	Y+7, r26	; 0x07
     5b6:	b8 87       	std	Y+8, r27	; 0x08
     5b8:	2d 81       	ldd	r18, Y+5	; 0x05
     5ba:	89 85       	ldd	r24, Y+9	; 0x09
     5bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5be:	fc 01       	movw	r30, r24
     5c0:	22 af       	std	Z+58, r18	; 0x3a
     5c2:	89 85       	ldd	r24, Y+9	; 0x09
     5c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c6:	fc 01       	movw	r30, r24
     5c8:	22 ad       	ldd	r18, Z+58	; 0x3a
     5ca:	89 85       	ldd	r24, Y+9	; 0x09
     5cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ce:	62 2f       	mov	r22, r18
     5d0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN15LedStateMachine17WhiteBarIntensityEh>
     5d4:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <_ZL11timedicrete>
     5d8:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <_ZL11timedicrete+0x1>
     5dc:	a0 91 11 22 	lds	r26, 0x2211	; 0x802211 <_ZL11timedicrete+0x2>
     5e0:	b0 91 12 22 	lds	r27, 0x2212	; 0x802212 <_ZL11timedicrete+0x3>
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	a1 1d       	adc	r26, r1
     5e8:	b1 1d       	adc	r27, r1
     5ea:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <_ZL11timedicrete>
     5ee:	90 93 10 22 	sts	0x2210, r25	; 0x802210 <_ZL11timedicrete+0x1>
     5f2:	a0 93 11 22 	sts	0x2211, r26	; 0x802211 <_ZL11timedicrete+0x2>
     5f6:	b0 93 12 22 	sts	0x2212, r27	; 0x802212 <_ZL11timedicrete+0x3>
     5fa:	00 00       	nop
     5fc:	2a 96       	adiw	r28, 0x0a	; 10
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	de bf       	out	0x3e, r29	; 62
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <_ZN15LedStateMachine24LeftButtonGreenIntensityEh>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	00 d0       	rcall	.+0      	; 0x60e <_ZN15LedStateMachine24LeftButtonGreenIntensityEh+0x6>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	9a 83       	std	Y+2, r25	; 0x02
     616:	6b 83       	std	Y+3, r22	; 0x03
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	41 e5       	ldi	r20, 0x51	; 81
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ledSetLeftButtonColourInt>
     624:	00 00       	nop
     626:	23 96       	adiw	r28, 0x03	; 3
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <_ZN15LedStateMachine25LedLeftButtonGreenPulsingEv>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2a 97       	sbiw	r28, 0x0a	; 10
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	de bf       	out	0x3e, r29	; 62
     640:	89 87       	std	Y+9, r24	; 0x09
     642:	9a 87       	std	Y+10, r25	; 0x0a
     644:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <_ZL11timedicrete>
     648:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <_ZL11timedicrete+0x1>
     64c:	a0 91 11 22 	lds	r26, 0x2211	; 0x802211 <_ZL11timedicrete+0x2>
     650:	b0 91 12 22 	lds	r27, 0x2212	; 0x802212 <_ZL11timedicrete+0x3>
     654:	28 e6       	ldi	r18, 0x68	; 104
     656:	31 e0       	ldi	r19, 0x01	; 1
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	bc 01       	movw	r22, r24
     65e:	cd 01       	movw	r24, r26
     660:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodsi4>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__floatunsisf>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	2b ed       	ldi	r18, 0xDB	; 219
     676:	3f e0       	ldi	r19, 0x0F	; 15
     678:	49 e4       	ldi	r20, 0x49	; 73
     67a:	50 e4       	ldi	r21, 0x40	; 64
     67c:	bc 01       	movw	r22, r24
     67e:	cd 01       	movw	r24, r26
     680:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__mulsf3>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	44 e3       	ldi	r20, 0x34	; 52
     68e:	53 e4       	ldi	r21, 0x43	; 67
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 cf 1b 	call	0x379e	; 0x379e <__divsf3>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <sin>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	4e ef       	ldi	r20, 0xFE	; 254
     6ae:	52 e4       	ldi	r21, 0x42	; 66
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__mulsf3>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	53 e4       	ldi	r21, 0x43	; 67
     6c4:	bc 01       	movw	r22, r24
     6c6:	cd 01       	movw	r24, r26
     6c8:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__addsf3>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	89 83       	std	Y+1, r24	; 0x01
     6d2:	9a 83       	std	Y+2, r25	; 0x02
     6d4:	ab 83       	std	Y+3, r26	; 0x03
     6d6:	bc 83       	std	Y+4, r27	; 0x04
     6d8:	69 81       	ldd	r22, Y+1	; 0x01
     6da:	7a 81       	ldd	r23, Y+2	; 0x02
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	0e 94 41 1c 	call	0x3882	; 0x3882 <__fixunssfsi>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	8d 83       	std	Y+5, r24	; 0x05
     6ea:	9e 83       	std	Y+6, r25	; 0x06
     6ec:	af 83       	std	Y+7, r26	; 0x07
     6ee:	b8 87       	std	Y+8, r27	; 0x08
     6f0:	2d 81       	ldd	r18, Y+5	; 0x05
     6f2:	89 85       	ldd	r24, Y+9	; 0x09
     6f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f6:	fc 01       	movw	r30, r24
     6f8:	22 af       	std	Z+58, r18	; 0x3a
     6fa:	89 85       	ldd	r24, Y+9	; 0x09
     6fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fe:	fc 01       	movw	r30, r24
     700:	22 ad       	ldd	r18, Z+58	; 0x3a
     702:	89 85       	ldd	r24, Y+9	; 0x09
     704:	9a 85       	ldd	r25, Y+10	; 0x0a
     706:	62 2f       	mov	r22, r18
     708:	0e 94 04 03 	call	0x608	; 0x608 <_ZN15LedStateMachine24LeftButtonGreenIntensityEh>
     70c:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <_ZL11timedicrete>
     710:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <_ZL11timedicrete+0x1>
     714:	a0 91 11 22 	lds	r26, 0x2211	; 0x802211 <_ZL11timedicrete+0x2>
     718:	b0 91 12 22 	lds	r27, 0x2212	; 0x802212 <_ZL11timedicrete+0x3>
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	a1 1d       	adc	r26, r1
     720:	b1 1d       	adc	r27, r1
     722:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <_ZL11timedicrete>
     726:	90 93 10 22 	sts	0x2210, r25	; 0x802210 <_ZL11timedicrete+0x1>
     72a:	a0 93 11 22 	sts	0x2211, r26	; 0x802211 <_ZL11timedicrete+0x2>
     72e:	b0 93 12 22 	sts	0x2212, r27	; 0x802212 <_ZL11timedicrete+0x3>
     732:	00 00       	nop
     734:	2a 96       	adiw	r28, 0x0a	; 10
     736:	cd bf       	out	0x3d, r28	; 61
     738:	de bf       	out	0x3e, r29	; 62
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <_ZN15LedStateMachine7HeatingEv>:
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	1f 92       	push	r1
     746:	1f 92       	push	r1
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	9a 83       	std	Y+2, r25	; 0x02
     750:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	fc 01       	movw	r30, r24
     762:	85 81       	ldd	r24, Z+5	; 0x05
     764:	96 81       	ldd	r25, Z+6	; 0x06
     766:	a7 81       	ldd	r26, Z+7	; 0x07
     768:	b0 85       	ldd	r27, Z+8	; 0x08
     76a:	28 17       	cp	r18, r24
     76c:	39 07       	cpc	r19, r25
     76e:	4a 07       	cpc	r20, r26
     770:	5b 07       	cpc	r21, r27
     772:	d9 f1       	breq	.+118    	; 0x7ea <_ZN15LedStateMachine7HeatingEv+0xaa>
     774:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     778:	88 2f       	mov	r24, r24
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	a0 e0       	ldi	r26, 0x00	; 0
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	29 81       	ldd	r18, Y+1	; 0x01
     782:	3a 81       	ldd	r19, Y+2	; 0x02
     784:	f9 01       	movw	r30, r18
     786:	85 83       	std	Z+5, r24	; 0x05
     788:	96 83       	std	Z+6, r25	; 0x06
     78a:	a7 83       	std	Z+7, r26	; 0x07
     78c:	b0 87       	std	Z+8, r27	; 0x08
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN15LedStateMachine15WhiteBarPulsingEv>
     796:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <_ZL11timedicrete>
     79a:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <_ZL11timedicrete+0x1>
     79e:	a0 91 11 22 	lds	r26, 0x2211	; 0x802211 <_ZL11timedicrete+0x2>
     7a2:	b0 91 12 22 	lds	r27, 0x2212	; 0x802212 <_ZL11timedicrete+0x3>
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	a1 09       	sbc	r26, r1
     7aa:	b1 09       	sbc	r27, r1
     7ac:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <_ZL11timedicrete>
     7b0:	90 93 10 22 	sts	0x2210, r25	; 0x802210 <_ZL11timedicrete+0x1>
     7b4:	a0 93 11 22 	sts	0x2211, r26	; 0x802211 <_ZL11timedicrete+0x2>
     7b8:	b0 93 12 22 	sts	0x2212, r27	; 0x802212 <_ZL11timedicrete+0x3>
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	fc 01       	movw	r30, r24
     7c2:	80 81       	ld	r24, Z
     7c4:	81 70       	andi	r24, 0x01	; 1
     7c6:	88 23       	and	r24, r24
     7c8:	61 f0       	breq	.+24     	; 0x7e2 <_ZN15LedStateMachine7HeatingEv+0xa2>
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	fc 01       	movw	r30, r24
     7da:	20 81       	ld	r18, Z
     7dc:	2e 7f       	andi	r18, 0xFE	; 254
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	0e 94 19 03 	call	0x632	; 0x632 <_ZN15LedStateMachine25LedLeftButtonGreenPulsingEv>
     7ea:	00 00       	nop
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv>:
     7f6:	0f 93       	push	r16
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	1f 92       	push	r1
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <gc1sTick>
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	fc 01       	movw	r30, r24
     81a:	81 81       	ldd	r24, Z+1	; 0x01
     81c:	92 81       	ldd	r25, Z+2	; 0x02
     81e:	a3 81       	ldd	r26, Z+3	; 0x03
     820:	b4 81       	ldd	r27, Z+4	; 0x04
     822:	28 17       	cp	r18, r24
     824:	39 07       	cpc	r19, r25
     826:	4a 07       	cpc	r20, r26
     828:	5b 07       	cpc	r21, r27
     82a:	09 f4       	brne	.+2      	; 0x82e <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x38>
     82c:	d2 c0       	rjmp	.+420    	; 0x9d2 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1dc>
     82e:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <gc1sTick>
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	29 81       	ldd	r18, Y+1	; 0x01
     83c:	3a 81       	ldd	r19, Y+2	; 0x02
     83e:	f9 01       	movw	r30, r18
     840:	81 83       	std	Z+1, r24	; 0x01
     842:	92 83       	std	Z+2, r25	; 0x02
     844:	a3 83       	std	Z+3, r26	; 0x03
     846:	b4 83       	std	Z+4, r27	; 0x04
     848:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     84c:	88 23       	and	r24, r24
     84e:	d9 f4       	brne	.+54     	; 0x886 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x90>
     850:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     860:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     864:	8f 5f       	subi	r24, 0xFF	; 255
     866:	0f ef       	ldi	r16, 0xFF	; 255
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	60 e8       	ldi	r22, 0x80	; 128
     86e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     872:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     876:	8e 5f       	subi	r24, 0xFE	; 254
     878:	0f ef       	ldi	r16, 0xFF	; 255
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	6f ef       	ldi	r22, 0xFF	; 255
     880:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     884:	9b c0       	rjmp	.+310    	; 0x9bc <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
     886:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	20 f5       	brcc	.+72     	; 0x8d6 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0xe0>
     88e:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     892:	81 50       	subi	r24, 0x01	; 1
     894:	0f ef       	ldi	r16, 0xFF	; 255
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	60 e8       	ldi	r22, 0x80	; 128
     89c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     8a0:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     8a4:	00 e0       	ldi	r16, 0x00	; 0
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     8b0:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	0f ef       	ldi	r16, 0xFF	; 255
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	60 e8       	ldi	r22, 0x80	; 128
     8be:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     8c2:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     8c6:	8e 5f       	subi	r24, 0xFE	; 254
     8c8:	0f ef       	ldi	r16, 0xFF	; 255
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	6f ef       	ldi	r22, 0xFF	; 255
     8d0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     8d4:	73 c0       	rjmp	.+230    	; 0x9bc <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
     8d6:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     8da:	81 31       	cpi	r24, 0x11	; 17
     8dc:	68 f5       	brcc	.+90     	; 0x938 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x142>
     8de:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     8e2:	82 50       	subi	r24, 0x02	; 2
     8e4:	0f ef       	ldi	r16, 0xFF	; 255
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	6f ef       	ldi	r22, 0xFF	; 255
     8ec:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     8f0:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     8f4:	81 50       	subi	r24, 0x01	; 1
     8f6:	0f ef       	ldi	r16, 0xFF	; 255
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	60 e8       	ldi	r22, 0x80	; 128
     8fe:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     902:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     906:	00 e0       	ldi	r16, 0x00	; 0
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     912:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	0f ef       	ldi	r16, 0xFF	; 255
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	60 e8       	ldi	r22, 0x80	; 128
     920:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     924:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     928:	8e 5f       	subi	r24, 0xFE	; 254
     92a:	0f ef       	ldi	r16, 0xFF	; 255
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	6f ef       	ldi	r22, 0xFF	; 255
     932:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     936:	42 c0       	rjmp	.+132    	; 0x9bc <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
     938:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     93c:	82 31       	cpi	r24, 0x12	; 18
     93e:	20 f5       	brcc	.+72     	; 0x988 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x192>
     940:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     944:	82 50       	subi	r24, 0x02	; 2
     946:	0f ef       	ldi	r16, 0xFF	; 255
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	6f ef       	ldi	r22, 0xFF	; 255
     94e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     952:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     956:	81 50       	subi	r24, 0x01	; 1
     958:	0f ef       	ldi	r16, 0xFF	; 255
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	60 e8       	ldi	r22, 0x80	; 128
     960:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     964:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     974:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	0f ef       	ldi	r16, 0xFF	; 255
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	60 e8       	ldi	r22, 0x80	; 128
     982:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     986:	1a c0       	rjmp	.+52     	; 0x9bc <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1c6>
     988:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     98c:	82 50       	subi	r24, 0x02	; 2
     98e:	0f ef       	ldi	r16, 0xFF	; 255
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	6f ef       	ldi	r22, 0xFF	; 255
     996:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     99a:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	0f ef       	ldi	r16, 0xFF	; 255
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	60 e8       	ldi	r22, 0x80	; 128
     9a8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     9ac:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     9b0:	00 e0       	ldi	r16, 0x00	; 0
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     9bc:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <_ZL19ledIndexProgressBar>
     9c6:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     9ca:	84 31       	cpi	r24, 0x14	; 20
     9cc:	10 f0       	brcs	.+4      	; 0x9d2 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv+0x1dc>
     9ce:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <_ZL19ledIndexProgressBar>
     9d2:	00 00       	nop
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	0f 91       	pop	r16
     9de:	08 95       	ret

000009e0 <_ZN15LedStateMachine7FillingEv>:
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	1f 92       	push	r1
     9e6:	1f 92       	push	r1
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	9a 83       	std	Y+2, r25	; 0x02
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN15LedStateMachine24BlueBarDarkSpotScrollingEv>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ledSetLeftButtonColourInt>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     a0e:	00 00       	nop
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <_ZN15LedStateMachine5ReadyEv>:
     a1a:	0f 93       	push	r16
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	00 d0       	rcall	.+0      	; 0xa22 <_ZN15LedStateMachine5ReadyEv+0x8>
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	8a 83       	std	Y+2, r24	; 0x02
     a28:	9b 83       	std	Y+3, r25	; 0x03
     a2a:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     a2e:	28 2f       	mov	r18, r24
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	9b 81       	ldd	r25, Y+3	; 0x03
     a3a:	fc 01       	movw	r30, r24
     a3c:	85 81       	ldd	r24, Z+5	; 0x05
     a3e:	96 81       	ldd	r25, Z+6	; 0x06
     a40:	a7 81       	ldd	r26, Z+7	; 0x07
     a42:	b0 85       	ldd	r27, Z+8	; 0x08
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	4a 07       	cpc	r20, r26
     a4a:	5b 07       	cpc	r21, r27
     a4c:	11 f1       	breq	.+68     	; 0xa92 <_ZN15LedStateMachine5ReadyEv+0x78>
     a4e:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	2a 81       	ldd	r18, Y+2	; 0x02
     a5c:	3b 81       	ldd	r19, Y+3	; 0x03
     a5e:	f9 01       	movw	r30, r18
     a60:	85 83       	std	Z+5, r24	; 0x05
     a62:	96 83       	std	Z+6, r25	; 0x06
     a64:	a7 83       	std	Z+7, r26	; 0x07
     a66:	b0 87       	std	Z+8, r27	; 0x08
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	4f ef       	ldi	r20, 0xFF	; 255
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ledSetLeftButtonColourInt>
     a74:	19 82       	std	Y+1, r1	; 0x01
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	84 31       	cpi	r24, 0x14	; 20
     a7a:	58 f4       	brcc	.+22     	; 0xa92 <_ZN15LedStateMachine5ReadyEv+0x78>
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	21 e5       	ldi	r18, 0x51	; 81
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	6f ef       	ldi	r22, 0xFF	; 255
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	f2 cf       	rjmp	.-28     	; 0xa76 <_ZN15LedStateMachine5ReadyEv+0x5c>
     a92:	00 00       	nop
     a94:	23 96       	adiw	r28, 0x03	; 3
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <_ZN15LedStateMachine11WaitNoWaterEv>:
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	1f 92       	push	r1
     aa8:	1f 92       	push	r1
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN15LedStateMachine9WaitStateEv>
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	81 70       	andi	r24, 0x01	; 1
     ac4:	88 23       	and	r24, r24
     ac6:	61 f0       	breq	.+24     	; 0xae0 <_ZN15LedStateMachine11WaitNoWaterEv+0x3e>
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 81       	ld	r18, Z
     ada:	2e 7f       	andi	r18, 0xFE	; 254
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
     ae0:	21 e5       	ldi	r18, 0x51	; 81
     ae2:	41 e5       	ldi	r20, 0x51	; 81
     ae4:	61 e5       	ldi	r22, 0x51	; 81
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ledSetIndicatorColour>
     aec:	00 00       	nop
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <_ZN15LedStateMachine19WaitOverTemperatureEv>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	1f 92       	push	r1
     afe:	1f 92       	push	r1
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	9a 83       	std	Y+2, r25	; 0x02
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN15LedStateMachine9WaitStateEv>
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	fc 01       	movw	r30, r24
     b16:	80 81       	ld	r24, Z
     b18:	81 70       	andi	r24, 0x01	; 1
     b1a:	88 23       	and	r24, r24
     b1c:	61 f0       	breq	.+24     	; 0xb36 <_ZN15LedStateMachine19WaitOverTemperatureEv+0x3e>
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 81       	ld	r18, Z
     b30:	2e 7f       	andi	r18, 0xFE	; 254
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
     b36:	28 e2       	ldi	r18, 0x28	; 40
     b38:	48 e2       	ldi	r20, 0x28	; 40
     b3a:	61 e5       	ldi	r22, 0x51	; 81
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ledSetIndicatorColour>
     b42:	00 00       	nop
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN15LedStateMachine9WaitStateEv>:
     b4e:	0f 93       	push	r16
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	1f 92       	push	r1
     b56:	1f 92       	push	r1
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <gc1sTick>
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	fc 01       	movw	r30, r24
     b72:	81 81       	ldd	r24, Z+1	; 0x01
     b74:	92 81       	ldd	r25, Z+2	; 0x02
     b76:	a3 81       	ldd	r26, Z+3	; 0x03
     b78:	b4 81       	ldd	r27, Z+4	; 0x04
     b7a:	28 17       	cp	r18, r24
     b7c:	39 07       	cpc	r19, r25
     b7e:	4a 07       	cpc	r20, r26
     b80:	5b 07       	cpc	r21, r27
     b82:	09 f4       	brne	.+2      	; 0xb86 <_ZN15LedStateMachine9WaitStateEv+0x38>
     b84:	83 c0       	rjmp	.+262    	; 0xc8c <_ZN15LedStateMachine9WaitStateEv+0x13e>
     b86:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <gc1sTick>
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	29 81       	ldd	r18, Y+1	; 0x01
     b94:	3a 81       	ldd	r19, Y+2	; 0x02
     b96:	f9 01       	movw	r30, r18
     b98:	81 83       	std	Z+1, r24	; 0x01
     b9a:	92 83       	std	Z+2, r25	; 0x02
     b9c:	a3 83       	std	Z+3, r26	; 0x03
     b9e:	b4 83       	std	Z+4, r27	; 0x04
     ba0:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     ba4:	88 23       	and	r24, r24
     ba6:	01 f5       	brne	.+64     	; 0xbe8 <_ZN15LedStateMachine9WaitStateEv+0x9a>
     ba8:	00 e0       	ldi	r16, 0x00	; 0
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	82 e1       	ldi	r24, 0x12	; 18
     bb2:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     bb6:	00 e0       	ldi	r16, 0x00	; 0
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	83 e1       	ldi	r24, 0x13	; 19
     bc0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     bc4:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     bc8:	01 e5       	ldi	r16, 0x51	; 81
     bca:	21 e5       	ldi	r18, 0x51	; 81
     bcc:	41 e5       	ldi	r20, 0x51	; 81
     bce:	6f ef       	ldi	r22, 0xFF	; 255
     bd0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     bd4:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	01 e5       	ldi	r16, 0x51	; 81
     bdc:	21 e5       	ldi	r18, 0x51	; 81
     bde:	41 e5       	ldi	r20, 0x51	; 81
     be0:	60 e8       	ldi	r22, 0x80	; 128
     be2:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     be6:	46 c0       	rjmp	.+140    	; 0xc74 <_ZN15LedStateMachine9WaitStateEv+0x126>
     be8:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	d8 f4       	brcc	.+54     	; 0xc26 <_ZN15LedStateMachine9WaitStateEv+0xd8>
     bf0:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     bf4:	81 50       	subi	r24, 0x01	; 1
     bf6:	01 e5       	ldi	r16, 0x51	; 81
     bf8:	21 e5       	ldi	r18, 0x51	; 81
     bfa:	41 e5       	ldi	r20, 0x51	; 81
     bfc:	60 e8       	ldi	r22, 0x80	; 128
     bfe:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c02:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c06:	01 e5       	ldi	r16, 0x51	; 81
     c08:	21 e5       	ldi	r18, 0x51	; 81
     c0a:	41 e5       	ldi	r20, 0x51	; 81
     c0c:	6f ef       	ldi	r22, 0xFF	; 255
     c0e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c12:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	01 e5       	ldi	r16, 0x51	; 81
     c1a:	21 e5       	ldi	r18, 0x51	; 81
     c1c:	41 e5       	ldi	r20, 0x51	; 81
     c1e:	60 e8       	ldi	r22, 0x80	; 128
     c20:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c24:	27 c0       	rjmp	.+78     	; 0xc74 <_ZN15LedStateMachine9WaitStateEv+0x126>
     c26:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c2a:	84 31       	cpi	r24, 0x14	; 20
     c2c:	18 f5       	brcc	.+70     	; 0xc74 <_ZN15LedStateMachine9WaitStateEv+0x126>
     c2e:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c32:	82 50       	subi	r24, 0x02	; 2
     c34:	00 e0       	ldi	r16, 0x00	; 0
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c40:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	01 e5       	ldi	r16, 0x51	; 81
     c48:	21 e5       	ldi	r18, 0x51	; 81
     c4a:	41 e5       	ldi	r20, 0x51	; 81
     c4c:	60 e8       	ldi	r22, 0x80	; 128
     c4e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c52:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c56:	01 e5       	ldi	r16, 0x51	; 81
     c58:	21 e5       	ldi	r18, 0x51	; 81
     c5a:	41 e5       	ldi	r20, 0x51	; 81
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c62:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	01 e5       	ldi	r16, 0x51	; 81
     c6a:	21 e5       	ldi	r18, 0x51	; 81
     c6c:	41 e5       	ldi	r20, 0x51	; 81
     c6e:	60 e8       	ldi	r22, 0x80	; 128
     c70:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     c74:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <_ZL19ledIndexProgressBar>
     c7e:	80 91 13 22 	lds	r24, 0x2213	; 0x802213 <_ZL19ledIndexProgressBar>
     c82:	84 31       	cpi	r24, 0x14	; 20
     c84:	30 f1       	brcs	.+76     	; 0xcd2 <_ZN15LedStateMachine9WaitStateEv+0x184>
     c86:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <_ZL19ledIndexProgressBar>
     c8a:	23 c0       	rjmp	.+70     	; 0xcd2 <_ZN15LedStateMachine9WaitStateEv+0x184>
     c8c:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	fc 01       	movw	r30, r24
     c9e:	85 81       	ldd	r24, Z+5	; 0x05
     ca0:	96 81       	ldd	r25, Z+6	; 0x06
     ca2:	a7 81       	ldd	r26, Z+7	; 0x07
     ca4:	b0 85       	ldd	r27, Z+8	; 0x08
     ca6:	28 17       	cp	r18, r24
     ca8:	39 07       	cpc	r19, r25
     caa:	4a 07       	cpc	r20, r26
     cac:	5b 07       	cpc	r21, r27
     cae:	89 f0       	breq	.+34     	; 0xcd2 <_ZN15LedStateMachine9WaitStateEv+0x184>
     cb0:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	3a 81       	ldd	r19, Y+2	; 0x02
     cc0:	f9 01       	movw	r30, r18
     cc2:	85 83       	std	Z+5, r24	; 0x05
     cc4:	96 83       	std	Z+6, r25	; 0x06
     cc6:	a7 83       	std	Z+7, r26	; 0x07
     cc8:	b0 87       	std	Z+8, r27	; 0x08
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	0e 94 19 03 	call	0x632	; 0x632 <_ZN15LedStateMachine25LedLeftButtonGreenPulsingEv>
     cd2:	00 00       	nop
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <_ZN15LedStateMachine13FaultLowWaterEv>:
     ce0:	0f 93       	push	r16
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <_ZN15LedStateMachine13FaultLowWaterEv+0x8>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	9b 83       	std	Y+3, r25	; 0x03
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	81 70       	andi	r24, 0x01	; 1
     cfa:	88 23       	and	r24, r24
     cfc:	61 f0       	breq	.+24     	; 0xd16 <_ZN15LedStateMachine13FaultLowWaterEv+0x36>
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 81       	ld	r18, Z
     d10:	2e 7f       	andi	r18, 0xFE	; 254
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
     d16:	21 e5       	ldi	r18, 0x51	; 81
     d18:	41 e5       	ldi	r20, 0x51	; 81
     d1a:	61 e5       	ldi	r22, 0x51	; 81
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ledSetIndicatorColour>
     d22:	28 e0       	ldi	r18, 0x08	; 8
     d24:	4c e3       	ldi	r20, 0x3C	; 60
     d26:	61 e5       	ldi	r22, 0x51	; 81
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ledSetLeftButtonColourInt>
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 31       	cpi	r24, 0x14	; 20
     d34:	58 f4       	brcc	.+22     	; 0xd4c <_ZN15LedStateMachine13FaultLowWaterEv+0x6c>
     d36:	08 e0       	ldi	r16, 0x08	; 8
     d38:	2c e3       	ldi	r18, 0x3C	; 60
     d3a:	41 e5       	ldi	r20, 0x51	; 81
     d3c:	6f ef       	ldi	r22, 0xFF	; 255
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	f2 cf       	rjmp	.-28     	; 0xd30 <_ZN15LedStateMachine13FaultLowWaterEv+0x50>
     d4c:	00 00       	nop
     d4e:	23 96       	adiw	r28, 0x03	; 3
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <_ZN15LedStateMachine21FaultOvertemeperatureEv>:
     d5c:	0f 93       	push	r16
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	00 d0       	rcall	.+0      	; 0xd64 <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x8>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	9b 83       	std	Y+3, r25	; 0x03
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	9b 81       	ldd	r25, Y+3	; 0x03
     d70:	fc 01       	movw	r30, r24
     d72:	80 81       	ld	r24, Z
     d74:	81 70       	andi	r24, 0x01	; 1
     d76:	88 23       	and	r24, r24
     d78:	61 f0       	breq	.+24     	; 0xd92 <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x36>
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	fc 01       	movw	r30, r24
     d8a:	20 81       	ld	r18, Z
     d8c:	2e 7f       	andi	r18, 0xFE	; 254
     d8e:	fc 01       	movw	r30, r24
     d90:	20 83       	st	Z, r18
     d92:	28 e2       	ldi	r18, 0x28	; 40
     d94:	48 e2       	ldi	r20, 0x28	; 40
     d96:	61 e5       	ldi	r22, 0x51	; 81
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ledSetIndicatorColour>
     d9e:	28 e0       	ldi	r18, 0x08	; 8
     da0:	4c e3       	ldi	r20, 0x3C	; 60
     da2:	61 e5       	ldi	r22, 0x51	; 81
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ledSetLeftButtonColourInt>
     daa:	19 82       	std	Y+1, r1	; 0x01
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	84 31       	cpi	r24, 0x14	; 20
     db0:	58 f4       	brcc	.+22     	; 0xdc8 <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x6c>
     db2:	08 e0       	ldi	r16, 0x08	; 8
     db4:	2c e3       	ldi	r18, 0x3C	; 60
     db6:	41 e5       	ldi	r20, 0x51	; 81
     db8:	6f ef       	ldi	r22, 0xFF	; 255
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	f2 cf       	rjmp	.-28     	; 0xdac <_ZN15LedStateMachine21FaultOvertemeperatureEv+0x50>
     dc8:	00 00       	nop
     dca:	23 96       	adiw	r28, 0x03	; 3
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <_ZN15LedStateMachine13FaultDrainageEv>:
     dd8:	0f 93       	push	r16
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <_ZN15LedStateMachine13FaultDrainageEv+0x8>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	8a 83       	std	Y+2, r24	; 0x02
     de6:	9b 83       	std	Y+3, r25	; 0x03
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	fc 01       	movw	r30, r24
     dee:	80 81       	ld	r24, Z
     df0:	81 70       	andi	r24, 0x01	; 1
     df2:	88 23       	and	r24, r24
     df4:	61 f0       	breq	.+24     	; 0xe0e <_ZN15LedStateMachine13FaultDrainageEv+0x36>
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ledSetAllIndicatorColour>
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	fc 01       	movw	r30, r24
     e06:	20 81       	ld	r18, Z
     e08:	2e 7f       	andi	r18, 0xFE	; 254
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
     e0e:	21 e5       	ldi	r18, 0x51	; 81
     e10:	48 e2       	ldi	r20, 0x28	; 40
     e12:	68 e2       	ldi	r22, 0x28	; 40
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ledSetIndicatorColour>
     e1a:	28 e0       	ldi	r18, 0x08	; 8
     e1c:	4c e3       	ldi	r20, 0x3C	; 60
     e1e:	61 e5       	ldi	r22, 0x51	; 81
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ledSetLeftButtonColourInt>
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	84 31       	cpi	r24, 0x14	; 20
     e2c:	58 f4       	brcc	.+22     	; 0xe44 <_ZN15LedStateMachine13FaultDrainageEv+0x6c>
     e2e:	08 e0       	ldi	r16, 0x08	; 8
     e30:	2c e3       	ldi	r18, 0x3C	; 60
     e32:	41 e5       	ldi	r20, 0x51	; 81
     e34:	6f ef       	ldi	r22, 0xFF	; 255
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ledSetProgressSegmentColour>
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	f2 cf       	rjmp	.-28     	; 0xe28 <_ZN15LedStateMachine13FaultDrainageEv+0x50>
     e44:	00 00       	nop
     e46:	23 96       	adiw	r28, 0x03	; 3
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <_ZN15LedStateMachine12HandleStatesEh>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	00 d0       	rcall	.+0      	; 0xe5a <_ZN15LedStateMachine12HandleStatesEh+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	6b 83       	std	Y+3, r22	; 0x03
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	09 2e       	mov	r0, r25
     e6c:	00 0c       	add	r0, r0
     e6e:	aa 0b       	sbc	r26, r26
     e70:	bb 0b       	sbc	r27, r27
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	28 e0       	ldi	r18, 0x08	; 8
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	84 1b       	sub	r24, r20
     e7c:	95 0b       	sbc	r25, r21
     e7e:	28 17       	cp	r18, r24
     e80:	39 07       	cpc	r19, r25
     e82:	a0 f1       	brcs	.+104    	; 0xeec <_ZN15LedStateMachine12HandleStatesEh+0x98>
     e84:	fc 01       	movw	r30, r24
     e86:	88 27       	eor	r24, r24
     e88:	ec 51       	subi	r30, 0x1C	; 28
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__tablejump2__>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN15LedStateMachine10StandbyOffEv>
     e9a:	2d c0       	rjmp	.+90     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN15LedStateMachine7FillingEv>
     ea4:	28 c0       	rjmp	.+80     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN15LedStateMachine7HeatingEv>
     eae:	23 c0       	rjmp	.+70     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN15LedStateMachine5ReadyEv>
     eb8:	1e c0       	rjmp	.+60     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN15LedStateMachine11WaitNoWaterEv>
     ec2:	19 c0       	rjmp	.+50     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN15LedStateMachine19WaitOverTemperatureEv>
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN15LedStateMachine13FaultLowWaterEv>
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN15LedStateMachine21FaultOvertemeperatureEv>
     ee0:	0a c0       	rjmp	.+20     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN15LedStateMachine13FaultDrainageEv>
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <_ZN15LedStateMachine12HandleStatesEh+0xa2>
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN15LedStateMachine11WaitNoWaterEv>
     ef4:	00 00       	nop
     ef6:	00 00       	nop
     ef8:	23 96       	adiw	r28, 0x03	; 3
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <_ZN15LedStateMachine8RunStateEh>:
		HandleStates(stateIndex);
	}

	
}
void	LedStateMachine::RunState(uint8_t index ){
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	00 d0       	rcall	.+0      	; 0xf0a <_ZN15LedStateMachine8RunStateEh+0x6>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	6b 83       	std	Y+3, r22	; 0x03


			if (state!=index)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	fc 01       	movw	r30, r24
     f1a:	97 85       	ldd	r25, Z+15	; 0x0f
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	98 17       	cp	r25, r24
     f20:	e9 f0       	breq	.+58     	; 0xf5c <_ZN15LedStateMachine8RunStateEh+0x58>
			{
				lastState=state;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	fc 01       	movw	r30, r24
     f28:	27 85       	ldd	r18, Z+15	; 0x0f
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	20 8b       	std	Z+16, r18	; 0x10
				state=index;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	fc 01       	movw	r30, r24
     f3a:	27 87       	std	Z+15, r18	; 0x0f
				stateChange=true;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	20 81       	ld	r18, Z
     f44:	21 60       	ori	r18, 0x01	; 1
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
				if (state>=kNumberStates)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	fc 01       	movw	r30, r24
     f50:	87 85       	ldd	r24, Z+15	; 0x0f
     f52:	8a 30       	cpi	r24, 0x0A	; 10
     f54:	18 f0       	brcs	.+6      	; 0xf5c <_ZN15LedStateMachine8RunStateEh+0x58>
				{
					stateIndex=1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <_ZL10stateIndex>
				}
				
			}
			HandleStates(state);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	fc 01       	movw	r30, r24
     f62:	27 85       	ldd	r18, Z+15	; 0x0f
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	62 2f       	mov	r22, r18
     f6a:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN15LedStateMachine12HandleStatesEh>
			RunPeriodicTask();
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN15LedStateMachine15RunPeriodicTaskEv>
		
	
		

	
}
     f76:	00 00       	nop
     f78:	23 96       	adiw	r28, 0x03	; 3
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <btnInitButtons>:

/** Initialise the User Interface Buttons driver
	\return Nothing
*/   
void btnInitButtons(void)
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : SW-COL1, initialise to input, high-impedance */
	/*	              | | | +----------- b4 : SW-COL2, initialise to input, high-impedance */
	/*	              | | +------------- b5 : SW-COL3, input with pull-up, reserved for future expansion */
	/*	              | +--------------- b6 : SW-ROW1, input with pull-up  */
	/*	              +----------------- b7 : SW-ROW2, input with pull-up, reserved for future expansion */
	PORTB.DIRCLR = 0xFC;	/* Clear to input */
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	96 e0       	ldi	r25, 0x06	; 6
     f90:	2c ef       	ldi	r18, 0xFC	; 252
     f92:	fc 01       	movw	r30, r24
     f94:	22 83       	std	Z+2, r18	; 0x02
	
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	96 e0       	ldi	r25, 0x06	; 6
     f9a:	28 e1       	ldi	r18, 0x18	; 24
     f9c:	fc 01       	movw	r30, r24
     f9e:	22 8b       	std	Z+18, r18	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	96 e0       	ldi	r25, 0x06	; 6
     fa4:	fc 01       	movw	r30, r24
     fa6:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
     fa8:	80 e2       	ldi	r24, 0x20	; 32
     faa:	96 e0       	ldi	r25, 0x06	; 6
     fac:	fc 01       	movw	r30, r24
     fae:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     fb0:	80 e2       	ldi	r24, 0x20	; 32
     fb2:	96 e0       	ldi	r25, 0x06	; 6
     fb4:	28 e1       	ldi	r18, 0x18	; 24
     fb6:	fc 01       	movw	r30, r24
     fb8:	25 8b       	std	Z+21, r18	; 0x15
	PORTB.PIN6CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     fba:	80 e2       	ldi	r24, 0x20	; 32
     fbc:	96 e0       	ldi	r25, 0x06	; 6
     fbe:	28 e1       	ldi	r18, 0x18	; 24
     fc0:	fc 01       	movw	r30, r24
     fc2:	26 8b       	std	Z+22, r18	; 0x16
	PORTB.PIN7CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	96 e0       	ldi	r25, 0x06	; 6
     fc8:	28 e1       	ldi	r18, 0x18	; 24
     fca:	fc 01       	movw	r30, r24
     fcc:	27 8b       	std	Z+23, r18	; 0x17

	/* User-Interface Buttons row on PORTD */
	/* SW-ROW3, reserved for future expansion */
	PORTD.DIRCLR = 0x01;	/* Clear to input */
     fce:	80 e6       	ldi	r24, 0x60	; 96
     fd0:	96 e0       	ldi	r25, 0x06	; 6
     fd2:	21 e0       	ldi	r18, 0x01	; 1
     fd4:	fc 01       	movw	r30, r24
     fd6:	22 83       	std	Z+2, r18	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
     fd8:	80 e6       	ldi	r24, 0x60	; 96
     fda:	96 e0       	ldi	r25, 0x06	; 6
     fdc:	28 e1       	ldi	r18, 0x18	; 24
     fde:	fc 01       	movw	r30, r24
     fe0:	20 8b       	std	Z+16, r18	; 0x10

	/* next column drive */
	btnDriveButtonColumn();
     fe2:	0e 94 0c 08 	call	0x1018	; 0x1018 <btnDriveButtonColumn>
}
     fe6:	00 00       	nop
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <btnReleaseKeyboardAllColumn>:
		Advance to next column and Repeat

*/

static void btnReleaseKeyboardAllColumn(void)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	/* All column drive to high impedance  */
	PORTB.DIRCLR = 0x5C;	/* Clear to input */
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	96 e0       	ldi	r25, 0x06	; 6
     ffa:	2c e5       	ldi	r18, 0x5C	; 92
     ffc:	fc 01       	movw	r30, r24
     ffe:	22 83       	std	Z+2, r18	; 0x02
	
	PORTB.PIN3CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	fc 01       	movw	r30, r24
    1006:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_INPUT_HIGH_IMPEDANCE;	/* input, high-impedance */
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	96 e0       	ldi	r25, 0x06	; 6
    100c:	fc 01       	movw	r30, r24
    100e:	14 8a       	std	Z+20, r1	; 0x14
}
    1010:	00 00       	nop
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <btnDriveButtonColumn>:

static void btnDriveButtonColumn(void)
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	00 d0       	rcall	.+0      	; 0x101e <btnDriveButtonColumn+0x6>
    101e:	1f 92       	push	r1
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	uint8_t cPinNum;
	uint8_t cPinMask;

	/* All column drive to high impedance first, to avoid short across power rails */
	btnReleaseKeyboardAllColumn();
    1024:	0e 94 f7 07 	call	0xfee	; 0xfee <btnReleaseKeyboardAllColumn>

	/* Drive the target column to logic 0 */
	cPinNum = gcBtnColumnToPinNumMap_Array[gcColumnDrvNum];
    1028:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <gcColumnDrvNum>
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	82 53       	subi	r24, 0x32	; 50
    1032:	9e 4d       	sbci	r25, 0xDE	; 222
    1034:	fc 01       	movw	r30, r24
    1036:	80 81       	ld	r24, Z
    1038:	89 83       	std	Y+1, r24	; 0x01
	cPinMask = (0x01 << cPinNum);
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <btnDriveButtonColumn+0x32>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <btnDriveButtonColumn+0x2e>
    104e:	8a 83       	std	Y+2, r24	; 0x02
	
    register8_t* pinControl = &(PORTB.PIN0CTRL);
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	96 e0       	ldi	r25, 0x06	; 6
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	9c 83       	std	Y+4, r25	; 0x04
	pinControl += cPinNum;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	2b 81       	ldd	r18, Y+3	; 0x03
    1060:	3c 81       	ldd	r19, Y+4	; 0x04
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	9c 83       	std	Y+4, r25	; 0x04
	*pinControl = 0;	/* totem-pole output */
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	fc 01       	movw	r30, r24
    1070:	10 82       	st	Z, r1
	PORTB.DIRSET = cPinMask;		/* Set as output */
    1072:	80 e2       	ldi	r24, 0x20	; 32
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	2a 81       	ldd	r18, Y+2	; 0x02
    1078:	fc 01       	movw	r30, r24
    107a:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTCLR = cPinMask;	/* Logic LOW */
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	2a 81       	ldd	r18, Y+2	; 0x02
    1082:	fc 01       	movw	r30, r24
    1084:	26 83       	std	Z+6, r18	; 0x06
}
    1086:	00 00       	nop
    1088:	24 96       	adiw	r28, 0x04	; 4
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <btnCheckWhichButtonsActive>:

static void btnCheckWhichButtonsActive(void)
{
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <btnCheckWhichButtonsActive+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <btnCheckWhichButtonsActive+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	uint8_t cButtonNum;
	bool bButtonActive;
	bool bConfirmedStateIsChanged;
	ButtonState_t* pButton;
	
	for(cRow = 0; cRow <= HIGHEST_VALID_ROW_NUM; cRow++)
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	2e c0       	rjmp	.+92     	; 0x1100 <btnCheckWhichButtonsActive+0x6c>
	{
		bButtonActive = btnIsButtonActiveOnRow(cRow);
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	0e 94 8d 09 	call	0x131a	; 0x131a <btnIsButtonActiveOnRow>
    10aa:	8a 83       	std	Y+2, r24	; 0x02
		cButtonNum = btnColumnAndRowToBtnNum(gcColumnDrvNum, cRow);
    10ac:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <gcColumnDrvNum>
    10b0:	69 81       	ldd	r22, Y+1	; 0x01
    10b2:	0e 94 a4 08 	call	0x1148	; 0x1148 <btnColumnAndRowToBtnNum>
    10b6:	8b 83       	std	Y+3, r24	; 0x03
		
		pButton = &(gButtonStates_Array[cButtonNum]);
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	c9 01       	movw	r24, r18
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	83 5e       	subi	r24, 0xE3	; 227
    10ce:	9d 4d       	sbci	r25, 0xDD	; 221
    10d0:	8c 83       	std	Y+4, r24	; 0x04
    10d2:	9d 83       	std	Y+5, r25	; 0x05
		bConfirmedStateIsChanged = btnUpdateButtonState(pButton, bButtonActive);
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	0e 94 b8 08 	call	0x1170	; 0x1170 <btnUpdateButtonState>
    10de:	8e 83       	std	Y+6, r24	; 0x06
		if(bConfirmedStateIsChanged)
    10e0:	8e 81       	ldd	r24, Y+6	; 0x06
    10e2:	88 23       	and	r24, r24
    10e4:	51 f0       	breq	.+20     	; 0x10fa <btnCheckWhichButtonsActive+0x66>
		{
			pscSetPublicButtonState(cButtonNum, pButton->m_bActive_Confirmed);
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	fc 01       	movw	r30, r24
    10ec:	84 81       	ldd	r24, Z+4	; 0x04
    10ee:	86 95       	lsr	r24
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	68 2f       	mov	r22, r24
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	0e 94 20 10 	call	0x2040	; 0x2040 <pscSetPublicButtonState>
	uint8_t cButtonNum;
	bool bButtonActive;
	bool bConfirmedStateIsChanged;
	ButtonState_t* pButton;
	
	for(cRow = 0; cRow <= HIGHEST_VALID_ROW_NUM; cRow++)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	88 23       	and	r24, r24
    1104:	79 f2       	breq	.-98     	; 0x10a4 <btnCheckWhichButtonsActive+0x10>
			pscSetPublicButtonState(cButtonNum, pButton->m_bActive_Confirmed);
		}
	}
	
	/* Always check the power button, which is not part of the matrix */
	bButtonActive = btnIsOnOffButtonActive();
    1106:	0e 94 b3 09 	call	0x1366	; 0x1366 <btnIsOnOffButtonActive>
    110a:	8a 83       	std	Y+2, r24	; 0x02
	pButton = &gOnOffButton;
    110c:	87 e1       	ldi	r24, 0x17	; 23
    110e:	92 e2       	ldi	r25, 0x22	; 34
    1110:	8c 83       	std	Y+4, r24	; 0x04
    1112:	9d 83       	std	Y+5, r25	; 0x05
	bConfirmedStateIsChanged = btnUpdateButtonState(pButton, bButtonActive);
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	6a 81       	ldd	r22, Y+2	; 0x02
    111a:	0e 94 b8 08 	call	0x1170	; 0x1170 <btnUpdateButtonState>
    111e:	8e 83       	std	Y+6, r24	; 0x06
	if(bConfirmedStateIsChanged)
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	88 23       	and	r24, r24
    1124:	51 f0       	breq	.+20     	; 0x113a <btnCheckWhichButtonsActive+0xa6>
	{
		pscSetPublicButtonState(BtnLeft, pButton->m_bActive_Confirmed);
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	fc 01       	movw	r30, r24
    112c:	84 81       	ldd	r24, Z+4	; 0x04
    112e:	86 95       	lsr	r24
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	68 2f       	mov	r22, r24
    1134:	84 e6       	ldi	r24, 0x64	; 100
    1136:	0e 94 20 10 	call	0x2040	; 0x2040 <pscSetPublicButtonState>
	}
}
    113a:	00 00       	nop
    113c:	26 96       	adiw	r28, 0x06	; 6
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <btnColumnAndRowToBtnNum>:
		hardware drive matrix Column and Row.
	The buttonNum is ZERO-based
	The matrix Column & Row are ZERO-based
*/
static uint8_t btnColumnAndRowToBtnNum(uint8_t cColumnNum, uint8_t cRow)
{
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	00 d0       	rcall	.+0      	; 0x114e <btnColumnAndRowToBtnNum+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t cButtonNum;

	cButtonNum = cColumnNum * ROW_COUNT;
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
	cButtonNum += cRow;
    115a:	99 81       	ldd	r25, Y+1	; 0x01
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	89 0f       	add	r24, r25
    1160:	89 83       	std	Y+1, r24	; 0x01

	return(cButtonNum);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	23 96       	adiw	r28, 0x03	; 3
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <btnUpdateButtonState>:

/*
	returns TRUE if the confirmed button state has been changed
*/
static bool btnUpdateButtonState(ButtonState_t* pButton, bool bButtonActive)
{
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	00 d0       	rcall	.+0      	; 0x1176 <btnUpdateButtonState+0x6>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	6b 83       	std	Y+3, r22	; 0x03
	if(pButton->m_bUnconfirmedState_Active != bButtonActive)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	fc 01       	movw	r30, r24
    1186:	84 81       	ldd	r24, Z+4	; 0x04
    1188:	98 2f       	mov	r25, r24
    118a:	91 70       	andi	r25, 0x01	; 1
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	98 17       	cp	r25, r24
    1190:	c9 f0       	breq	.+50     	; 0x11c4 <btnUpdateButtonState+0x54>
	{	/* The button state has changed / is changing */
		/* Update the time-line mark, to track the time of the last change */
		pButton->m_dw_TimeOfLastChange_ms = gdw_msTimeCount;
    1192:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <gdw_msTimeCount>
    1196:	90 91 11 23 	lds	r25, 0x2311	; 0x802311 <gdw_msTimeCount+0x1>
    119a:	a0 91 12 23 	lds	r26, 0x2312	; 0x802312 <gdw_msTimeCount+0x2>
    119e:	b0 91 13 23 	lds	r27, 0x2313	; 0x802313 <gdw_msTimeCount+0x3>
    11a2:	29 81       	ldd	r18, Y+1	; 0x01
    11a4:	3a 81       	ldd	r19, Y+2	; 0x02
    11a6:	f9 01       	movw	r30, r18
    11a8:	80 83       	st	Z, r24
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	a2 83       	std	Z+2, r26	; 0x02
    11ae:	b3 83       	std	Z+3, r27	; 0x03

		pButton->m_bUnconfirmedState_Active = bButtonActive;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	21 70       	andi	r18, 0x01	; 1
    11b8:	fc 01       	movw	r30, r24
    11ba:	34 81       	ldd	r19, Z+4	; 0x04
    11bc:	3e 7f       	andi	r19, 0xFE	; 254
    11be:	23 2b       	or	r18, r19
    11c0:	fc 01       	movw	r30, r24
    11c2:	24 83       	std	Z+4, r18	; 0x04
	}

	return btnDebounceButton(pButton);
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <btnDebounceButton>
}
    11cc:	23 96       	adiw	r28, 0x03	; 3
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <btnDebounceButton>:

static bool btnDebounceButton(ButtonState_t* pButton)
{
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	28 97       	sbiw	r28, 0x08	; 8
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	8f 83       	std	Y+7, r24	; 0x07
    11f0:	98 87       	std	Y+8, r25	; 0x08
	uint32_t dwTimeDiff;
	bool bConfirmedStateIsChanged = false;
    11f2:	19 82       	std	Y+1, r1	; 0x01

	if(pButton->m_bActive_Confirmed != pButton->m_bUnconfirmedState_Active)
    11f4:	8f 81       	ldd	r24, Y+7	; 0x07
    11f6:	98 85       	ldd	r25, Y+8	; 0x08
    11f8:	fc 01       	movw	r30, r24
    11fa:	84 81       	ldd	r24, Z+4	; 0x04
    11fc:	81 fb       	bst	r24, 1
    11fe:	22 27       	eor	r18, r18
    1200:	20 f9       	bld	r18, 0
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	fc 01       	movw	r30, r24
    1208:	84 81       	ldd	r24, Z+4	; 0x04
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	28 17       	cp	r18, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <btnDebounceButton+0x3a>
    1210:	60 c0       	rjmp	.+192    	; 0x12d2 <btnDebounceButton+0xfa>
	{	/* Recent change to button state, not yet made public */
		/* update the public state only if the de-bounce interval has elapsed since the last change */
		if(pButton->m_dw_TimeOfLastChange_ms > gdw_msTimeCount)
    1212:	8f 81       	ldd	r24, Y+7	; 0x07
    1214:	98 85       	ldd	r25, Y+8	; 0x08
    1216:	fc 01       	movw	r30, r24
    1218:	20 81       	ld	r18, Z
    121a:	31 81       	ldd	r19, Z+1	; 0x01
    121c:	42 81       	ldd	r20, Z+2	; 0x02
    121e:	53 81       	ldd	r21, Z+3	; 0x03
    1220:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <gdw_msTimeCount>
    1224:	90 91 11 23 	lds	r25, 0x2311	; 0x802311 <gdw_msTimeCount+0x1>
    1228:	a0 91 12 23 	lds	r26, 0x2312	; 0x802312 <gdw_msTimeCount+0x2>
    122c:	b0 91 13 23 	lds	r27, 0x2313	; 0x802313 <gdw_msTimeCount+0x3>
    1230:	82 17       	cp	r24, r18
    1232:	93 07       	cpc	r25, r19
    1234:	a4 07       	cpc	r26, r20
    1236:	b5 07       	cpc	r27, r21
    1238:	78 f4       	brcc	.+30     	; 0x1258 <btnDebounceButton+0x80>
		{	/* The global counter has wrapped since this button changed state */
			/* Start the interval again */
			pButton->m_dw_TimeOfLastChange_ms = gdw_msTimeCount;
    123a:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <gdw_msTimeCount>
    123e:	90 91 11 23 	lds	r25, 0x2311	; 0x802311 <gdw_msTimeCount+0x1>
    1242:	a0 91 12 23 	lds	r26, 0x2312	; 0x802312 <gdw_msTimeCount+0x2>
    1246:	b0 91 13 23 	lds	r27, 0x2313	; 0x802313 <gdw_msTimeCount+0x3>
    124a:	2f 81       	ldd	r18, Y+7	; 0x07
    124c:	38 85       	ldd	r19, Y+8	; 0x08
    124e:	f9 01       	movw	r30, r18
    1250:	80 83       	st	Z, r24
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	a2 83       	std	Z+2, r26	; 0x02
    1256:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		dwTimeDiff = gdw_msTimeCount -pButton->m_dw_TimeOfLastChange_ms;
    1258:	20 91 10 23 	lds	r18, 0x2310	; 0x802310 <gdw_msTimeCount>
    125c:	30 91 11 23 	lds	r19, 0x2311	; 0x802311 <gdw_msTimeCount+0x1>
    1260:	40 91 12 23 	lds	r20, 0x2312	; 0x802312 <gdw_msTimeCount+0x2>
    1264:	50 91 13 23 	lds	r21, 0x2313	; 0x802313 <gdw_msTimeCount+0x3>
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	fc 01       	movw	r30, r24
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	a2 81       	ldd	r26, Z+2	; 0x02
    1274:	b3 81       	ldd	r27, Z+3	; 0x03
    1276:	79 01       	movw	r14, r18
    1278:	8a 01       	movw	r16, r20
    127a:	e8 1a       	sub	r14, r24
    127c:	f9 0a       	sbc	r15, r25
    127e:	0a 0b       	sbc	r16, r26
    1280:	1b 0b       	sbc	r17, r27
    1282:	d8 01       	movw	r26, r16
    1284:	c7 01       	movw	r24, r14
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	9b 83       	std	Y+3, r25	; 0x03
    128a:	ac 83       	std	Y+4, r26	; 0x04
    128c:	bd 83       	std	Y+5, r27	; 0x05
		if(dwTimeDiff >= BUTTON_DEBOUNCE_INTERVAL_MS)
    128e:	84 e1       	ldi	r24, 0x14	; 20
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9c 01       	movw	r18, r24
    1294:	99 0f       	add	r25, r25
    1296:	44 0b       	sbc	r20, r20
    1298:	55 0b       	sbc	r21, r21
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	ac 81       	ldd	r26, Y+4	; 0x04
    12a0:	bd 81       	ldd	r27, Y+5	; 0x05
    12a2:	82 17       	cp	r24, r18
    12a4:	93 07       	cpc	r25, r19
    12a6:	a4 07       	cpc	r26, r20
    12a8:	b5 07       	cpc	r27, r21
    12aa:	98 f0       	brcs	.+38     	; 0x12d2 <btnDebounceButton+0xfa>
		{	/* de-bounce interval complete */
			bool bButtonActive = pButton->m_bUnconfirmedState_Active;
    12ac:	8f 81       	ldd	r24, Y+7	; 0x07
    12ae:	98 85       	ldd	r25, Y+8	; 0x08
    12b0:	fc 01       	movw	r30, r24
    12b2:	84 81       	ldd	r24, Z+4	; 0x04
    12b4:	81 70       	andi	r24, 0x01	; 1
    12b6:	8e 83       	std	Y+6, r24	; 0x06
			/* Update the public / reported state */
			pButton->m_bActive_Confirmed = bButtonActive;
    12b8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ba:	98 85       	ldd	r25, Y+8	; 0x08
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	21 70       	andi	r18, 0x01	; 1
    12c0:	22 0f       	add	r18, r18
    12c2:	fc 01       	movw	r30, r24
    12c4:	34 81       	ldd	r19, Z+4	; 0x04
    12c6:	3d 7f       	andi	r19, 0xFD	; 253
    12c8:	23 2b       	or	r18, r19
    12ca:	fc 01       	movw	r30, r24
    12cc:	24 83       	std	Z+4, r18	; 0x04

			bConfirmedStateIsChanged = true;	/* Indicate the confirmed button state is changed */
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return bConfirmedStateIsChanged;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	28 96       	adiw	r28, 0x08	; 8
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	08 95       	ret

000012e8 <btnManageButtonScan>:

void btnManageButtonScan(void)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	btnCheckWhichButtonsActive();
    12f0:	0e 94 4a 08 	call	0x1094	; 0x1094 <btnCheckWhichButtonsActive>

	/* Release all column drive */
	btnReleaseKeyboardAllColumn();
    12f4:	0e 94 f7 07 	call	0xfee	; 0xfee <btnReleaseKeyboardAllColumn>

	/* Advance to next column */
	gcColumnDrvNum++;
    12f8:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <gcColumnDrvNum>
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <gcColumnDrvNum>
	if(gcColumnDrvNum > HIGHEST_VALID_COLUMN_NUM)
    1302:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <gcColumnDrvNum>
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	10 f0       	brcs	.+4      	; 0x130e <btnManageButtonScan+0x26>
	{	/* Matrix scan complete */
		/* Start again at first column */
		gcColumnDrvNum = 0;
    130a:	10 92 1c 22 	sts	0x221C, r1	; 0x80221c <gcColumnDrvNum>
	}

	/* next column drive */
	btnDriveButtonColumn();
    130e:	0e 94 0c 08 	call	0x1018	; 0x1018 <btnDriveButtonColumn>
}
    1312:	00 00       	nop
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <btnIsButtonActiveOnRow>:

static bool btnIsButtonActiveOnRow(uint8_t cRow)
{
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	00 d0       	rcall	.+0      	; 0x1320 <btnIsButtonActiveOnRow+0x6>
    1320:	1f 92       	push	r1
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	8c 83       	std	Y+4, r24	; 0x04
	bool bActive;
	uint8_t cPinNum;
	uint8_t cPinMask;

	bActive = false;
    1328:	19 82       	std	Y+1, r1	; 0x01
	cPinNum = gc_BtnRowToPinNumMap_Array[cRow];
    132a:	86 e0       	ldi	r24, 0x06	; 6
    132c:	8a 83       	std	Y+2, r24	; 0x02
	cPinMask = (0x01 << cPinNum);
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <btnIsButtonActiveOnRow+0x24>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	2a 95       	dec	r18
    1340:	e2 f7       	brpl	.-8      	; 0x133a <btnIsButtonActiveOnRow+0x20>
    1342:	8b 83       	std	Y+3, r24	; 0x03

	if((PORTB.IN & cPinMask) == 0)
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	96 e0       	ldi	r25, 0x06	; 6
    1348:	fc 01       	movw	r30, r24
    134a:	90 85       	ldd	r25, Z+8	; 0x08
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	89 23       	and	r24, r25
    1350:	88 23       	and	r24, r24
    1352:	11 f4       	brne	.+4      	; 0x1358 <btnIsButtonActiveOnRow+0x3e>
	{	/* button indicating active */
		bActive = true;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    1358:	89 81       	ldd	r24, Y+1	; 0x01
}
    135a:	24 96       	adiw	r28, 0x04	; 4
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <btnIsOnOffButtonActive>:


static bool btnIsOnOffButtonActive(void)
{
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	1f 92       	push	r1
    136c:	1f 92       	push	r1
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	bool bActive;
	uint8_t cPinMask;

	bActive = false;
    1372:	19 82       	std	Y+1, r1	; 0x01
	cPinMask = PIN2_bm;
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	8a 83       	std	Y+2, r24	; 0x02

	if((PORTB.IN & cPinMask) == 0)
    1378:	80 e2       	ldi	r24, 0x20	; 32
    137a:	96 e0       	ldi	r25, 0x06	; 6
    137c:	fc 01       	movw	r30, r24
    137e:	90 85       	ldd	r25, Z+8	; 0x08
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	89 23       	and	r24, r25
    1384:	88 23       	and	r24, r24
    1386:	11 f4       	brne	.+4      	; 0x138c <btnIsOnOffButtonActive+0x26>
	{	/* button indicating active */
		bActive = true;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    138c:	89 81       	ldd	r24, Y+1	; 0x01
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <EnableInterrupts>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

static inline void EnableInterrupts(void)	{sei();}
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	78 94       	sei
    13a2:	00 00       	nop
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <systemInitialisation>:

/** Initialise everything
	\return Nothing
*/
void systemInitialisation(void)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	1f 92       	push	r1
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	/* After Power-on-Reset, the XMEGA configures itself to use the internal 2MHz internal oscillator */
	/* The watchdog is enabled, locked and the interval set using the programmed FUSES */

	dspResetHold();	/* Assert the display reset signal early and hold */
    13b4:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <dspResetHold>
	ledResetHold();	/* Assert the LED ICs reset signal early and hold */
    13b8:	0e 94 ad 0a 	call	0x155a	; 0x155a <ledResetHold>
	watchdogInit();	/* Watchdog active as soon as possible */
    13bc:	0e 94 45 0a 	call	0x148a	; 0x148a <watchdogInit>
	
	/* delay to give the power time to settle */
	delayAfterPowerOnReset();	
    13c0:	0e 94 4d 0a 	call	0x149a	; 0x149a <delayAfterPowerOnReset>
	
	cpuClockInit();	/* Configure the clock source and frequency to be used */
    13c4:	0e 94 1e 0a 	call	0x143c	; 0x143c <cpuClockInit>
	rstInit();
    13c8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <rstInit>
	dspResetHold();	/* Assert the display reset signal and hold */
    13cc:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <dspResetHold>
	ledResetHold();	/* Assert the LED ICs reset signal early and hold */
    13d0:	0e 94 ad 0a 	call	0x155a	; 0x155a <ledResetHold>
	pscI2cInit();
    13d4:	0e 94 63 10 	call	0x20c6	; 0x20c6 <pscI2cInit>
	hmiI2cInit();
    13d8:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <hmiI2cInit>
	adcInit();	/* forSupplyVoltageMeasurement, AmbientLightLevelMeasurement */
    13dc:	0e 94 78 15 	call	0x2af0	; 0x2af0 <adcInit>
	proximitySensorInit();	/* Configure Prox. Sensor */
    13e0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <proximitySensorInit>
	btnInitButtons();
    13e4:	0e 94 c2 07 	call	0xf84	; 0xf84 <btnInitButtons>
	manualResetDetectInit();
    13e8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <manualResetDetectInit>
	beepInit();
    13ec:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <beepInit>
	lowPowerInit(); /* Standby / low power (off / normal running mode) */
    13f0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <lowPowerInit>
	mainTimerInit();	/* Used for general timing */
    13f4:	0e 94 01 14 	call	0x2802	; 0x2802 <mainTimerInit>
	dspInit();
    13f8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <dspInit>
	ledDriverInit();
    13fc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ledDriverInit>
	spiInit();
    1400:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <spiInit>
	esfInit();
    1404:	0e 94 d5 18 	call	0x31aa	; 0x31aa <esfInit>
	quadInit();
    1408:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <quadInit>


	
	/* wait for external devices to be ready after reset */
	/* The LED driver ICs require 2 ms after power up to fully wake up */
	delayAfterExternalHardwareReset();
    140c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <delayAfterExternalHardwareReset>

	uint8_t lastReasonForReset = rstGetLastReasonForReset();
    1410:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <rstGetLastReasonForReset>
    1414:	89 83       	std	Y+1, r24	; 0x01
	pscSetLastReasonForReset(lastReasonForReset);
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	0e 94 06 10 	call	0x200c	; 0x200c <pscSetLastReasonForReset>
	
	
	/* Enable low interrupt level */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    141c:	80 ea       	ldi	r24, 0xA0	; 160
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	20 ea       	ldi	r18, 0xA0	; 160
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	f9 01       	movw	r30, r18
    1426:	22 81       	ldd	r18, Z+2	; 0x02
    1428:	21 60       	ori	r18, 0x01	; 1
    142a:	fc 01       	movw	r30, r24
    142c:	22 83       	std	Z+2, r18	; 0x02

	/* Enable global interrupts */
	EnableInterrupts();
    142e:	0e 94 cc 09 	call	0x1398	; 0x1398 <EnableInterrupts>
}
    1432:	00 00       	nop
    1434:	0f 90       	pop	r0
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <cpuClockInit>:
	(NOTE the RS485 and bluetooth units use UART comms, but these are not fitted to production PCBA)
	The external xtal is not fitted to production PCBA.
	\return Nothing
*/   
static void cpuClockInit(void)
{
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	/*  Configure PLL with the 2 MHz RC oscillator as source and
	 *  multiply by 4 to yield 8 MHz PLL clock. Wait
	 *  for it to be stable and set prescaler C to divide by two
	 *  CPU clock = 8 MHz
	 */
	CLKSYS_PLL_Config(OSC_PLLSRC_RC2M_gc, 4);	/* multiply by 4 */
    1444:	64 e0       	ldi	r22, 0x04	; 4
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 94 16 	call	0x2d28	; 0x2d28 <CLKSYS_PLL_Config>
	CLKSYS_Enable(OSC_PLLEN_bm);	/* Enable the clock source */
    144c:	80 e5       	ldi	r24, 0x50	; 80
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	20 e5       	ldi	r18, 0x50	; 80
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	f9 01       	movw	r30, r18
    1456:	20 81       	ld	r18, Z
    1458:	20 61       	ori	r18, 0x10	; 16
    145a:	fc 01       	movw	r30, r24
    145c:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config(CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);	/* Set the prescalers to 1. No division */
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <CLKSYS_Prescalers_Config>
	
	/* Wait for clock source to be stable */
	while(CLKSYS_IsReady(OSC_PLLRDY_bm) == 0)
    1466:	00 00       	nop
    1468:	80 e5       	ldi	r24, 0x50	; 80
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	80 71       	andi	r24, 0x10	; 16
    1476:	99 27       	eor	r25, r25
    1478:	89 2b       	or	r24, r25
    147a:	b1 f3       	breq	.-20     	; 0x1468 <cpuClockInit+0x2c>
	{}
		
	/* Select the clock source */
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_PLL_gc);
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <CLKSYS_Main_ClockSource_Select>
}
    1482:	00 00       	nop
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <watchdogInit>:
/** Initialise the Watchdog
	Nothing to do in firmware, The watchdog is enabled, locked and the interval set using the programmed FUSES
	\return Nothing
*/   
static void watchdogInit(void)
{
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
	/* The watchdog is enabled, locked and the interval set using the programmed FUSES */
}
    1492:	00 00       	nop
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <delayAfterPowerOnReset>:

/** Create a delay after reset
	\return Nothing
*/   
static void delayAfterPowerOnReset(void)
{
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	/* Set up Timer/Counter 0 .
		CPU clock is 2 MHz
		prescale / divide by 2 to yield 1 MHz, or 1us timer clock
		Count full 16-bit range yields 65 ms
	 */
	TCD0.PER = 0;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	99 e0       	ldi	r25, 0x09	; 9
    14a6:	fc 01       	movw	r30, r24
    14a8:	16 a2       	std	Z+38, r1	; 0x26
    14aa:	17 a2       	std	Z+39, r1	; 0x27
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV2_gc;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	99 e0       	ldi	r25, 0x09	; 9
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	39 e0       	ldi	r19, 0x09	; 9
    14b4:	f9 01       	movw	r30, r18
    14b6:	20 81       	ld	r18, Z
    14b8:	20 7f       	andi	r18, 0xF0	; 240
    14ba:	22 60       	ori	r18, 0x02	; 2
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
	
	/* Wait until the interval has ellapsed */
	while((TCD0.INTFLAGS & TC0_OVFIF_bm) == 0)
    14c0:	00 00       	nop
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	99 e0       	ldi	r25, 0x09	; 9
    14c6:	fc 01       	movw	r30, r24
    14c8:	84 85       	ldd	r24, Z+12	; 0x0c
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	99 27       	eor	r25, r25
    14d2:	89 2b       	or	r24, r25
    14d4:	b1 f3       	breq	.-20     	; 0x14c2 <delayAfterPowerOnReset+0x28>
	{}

	/* Disable the timer */
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm );
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	99 e0       	ldi	r25, 0x09	; 9
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	39 e0       	ldi	r19, 0x09	; 9
    14de:	f9 01       	movw	r30, r18
    14e0:	20 81       	ld	r18, Z
    14e2:	20 7f       	andi	r18, 0xF0	; 240
    14e4:	fc 01       	movw	r30, r24
    14e6:	20 83       	st	Z, r18
	
	/* Clear the overflow flag */
	TCD0.INTFLAGS = TC0_OVFIF_bm;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	99 e0       	ldi	r25, 0x09	; 9
    14ec:	21 e0       	ldi	r18, 0x01	; 1
    14ee:	fc 01       	movw	r30, r24
    14f0:	24 87       	std	Z+12, r18	; 0x0c
}
    14f2:	00 00       	nop
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <delayAfterExternalHardwareReset>:


static void delayAfterExternalHardwareReset(void)
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
	/* Set up Timer/Counter 0 .
		CPU clock is 8 MHz
		Count full 16-bit range yields 8 ms
	 */
	TCD0.PER = 0;
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	99 e0       	ldi	r25, 0x09	; 9
    1506:	fc 01       	movw	r30, r24
    1508:	16 a2       	std	Z+38, r1	; 0x26
    150a:	17 a2       	std	Z+39, r1	; 0x27
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	99 e0       	ldi	r25, 0x09	; 9
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	39 e0       	ldi	r19, 0x09	; 9
    1514:	f9 01       	movw	r30, r18
    1516:	20 81       	ld	r18, Z
    1518:	20 7f       	andi	r18, 0xF0	; 240
    151a:	21 60       	ori	r18, 0x01	; 1
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
	
	/* Wait until the interval has ellapsed */
	while((TCD0.INTFLAGS & TC0_OVFIF_bm) == 0)
    1520:	00 00       	nop
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	99 e0       	ldi	r25, 0x09	; 9
    1526:	fc 01       	movw	r30, r24
    1528:	84 85       	ldd	r24, Z+12	; 0x0c
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	99 27       	eor	r25, r25
    1532:	89 2b       	or	r24, r25
    1534:	b1 f3       	breq	.-20     	; 0x1522 <delayAfterExternalHardwareReset+0x28>
	{}

	/* Disable the timer */
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm );
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	99 e0       	ldi	r25, 0x09	; 9
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	39 e0       	ldi	r19, 0x09	; 9
    153e:	f9 01       	movw	r30, r18
    1540:	20 81       	ld	r18, Z
    1542:	20 7f       	andi	r18, 0xF0	; 240
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
	
	/* Clear the overflow flag */
	TCD0.INTFLAGS = TC0_OVFIF_bm;
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	99 e0       	ldi	r25, 0x09	; 9
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	fc 01       	movw	r30, r24
    1550:	24 87       	std	Z+12, r18	; 0x0c
}
    1552:	00 00       	nop
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <ledResetHold>:
}

void ledSetButtonOff(uint8_t cButton)
{
	ledSetButtonColour(cButton, 0,0,0);
}
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	80 ea       	ldi	r24, 0xA0	; 160
    1564:	96 e0       	ldi	r25, 0x06	; 6
    1566:	21 e0       	ldi	r18, 0x01	; 1
    1568:	fc 01       	movw	r30, r24
    156a:	25 83       	std	Z+5, r18	; 0x05
    156c:	80 ea       	ldi	r24, 0xA0	; 160
    156e:	96 e0       	ldi	r25, 0x06	; 6
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	fc 01       	movw	r30, r24
    1574:	21 83       	std	Z+1, r18	; 0x01
    1576:	80 ea       	ldi	r24, 0xA0	; 160
    1578:	96 e0       	ldi	r25, 0x06	; 6
    157a:	fc 01       	movw	r30, r24
    157c:	10 8a       	std	Z+16, r1	; 0x10
    157e:	00 00       	nop
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <ledDriverInit>:
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	80 ea       	ldi	r24, 0xA0	; 160
    1590:	96 e0       	ldi	r25, 0x06	; 6
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	fc 01       	movw	r30, r24
    1596:	26 83       	std	Z+6, r18	; 0x06
    1598:	00 00       	nop
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <ledSetAllIndicatorColour>:
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <ledSetAllIndicatorColour+0x6>
    15a6:	1f 92       	push	r1
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8a 83       	std	Y+2, r24	; 0x02
    15ae:	6b 83       	std	Y+3, r22	; 0x03
    15b0:	4c 83       	std	Y+4, r20	; 0x04
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <ledSetAllIndicatorColour+0x28>
    15b6:	2c 81       	ldd	r18, Y+4	; 0x04
    15b8:	4b 81       	ldd	r20, Y+3	; 0x03
    15ba:	6a 81       	ldd	r22, Y+2	; 0x02
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ledSetIndicatorColour>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	85 30       	cpi	r24, 0x05	; 5
    15cc:	a0 f3       	brcs	.-24     	; 0x15b6 <ledSetAllIndicatorColour+0x16>
    15ce:	00 00       	nop
    15d0:	24 96       	adiw	r28, 0x04	; 4
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <ledSetIndicatorColour>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	27 97       	sbiw	r28, 0x07	; 7
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	8c 83       	std	Y+4, r24	; 0x04
    15ec:	6d 83       	std	Y+5, r22	; 0x05
    15ee:	4e 83       	std	Y+6, r20	; 0x06
    15f0:	2f 83       	std	Y+7, r18	; 0x07
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e2       	ldi	r25, 0x20	; 32
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	88 e1       	ldi	r24, 0x18	; 24
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	89 2f       	mov	r24, r25
    1602:	88 0f       	add	r24, r24
    1604:	89 0f       	add	r24, r25
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	89 0f       	add	r24, r25
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	82 35       	cpi	r24, 0x52	; 82
    1610:	10 f0       	brcs	.+4      	; 0x1616 <ledSetIndicatorColour+0x3a>
    1612:	81 e5       	ldi	r24, 0x51	; 81
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	8e 81       	ldd	r24, Y+6	; 0x06
    1618:	82 35       	cpi	r24, 0x52	; 82
    161a:	10 f0       	brcs	.+4      	; 0x1620 <ledSetIndicatorColour+0x44>
    161c:	81 e5       	ldi	r24, 0x51	; 81
    161e:	8e 83       	std	Y+6, r24	; 0x06
    1620:	8f 81       	ldd	r24, Y+7	; 0x07
    1622:	82 35       	cpi	r24, 0x52	; 82
    1624:	10 f0       	brcs	.+4      	; 0x162a <ledSetIndicatorColour+0x4e>
    1626:	81 e5       	ldi	r24, 0x51	; 81
    1628:	8f 83       	std	Y+7, r24	; 0x07
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	29 81       	ldd	r18, Y+1	; 0x01
    1632:	3a 81       	ldd	r19, Y+2	; 0x02
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	02 96       	adiw	r24, 0x02	; 2
    163a:	2d 81       	ldd	r18, Y+5	; 0x05
    163c:	fc 01       	movw	r30, r24
    163e:	20 83       	st	Z, r18
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	8b 83       	std	Y+3, r24	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	29 81       	ldd	r18, Y+1	; 0x01
    164e:	3a 81       	ldd	r19, Y+2	; 0x02
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
    1654:	02 96       	adiw	r24, 0x02	; 2
    1656:	2e 81       	ldd	r18, Y+6	; 0x06
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	8b 83       	std	Y+3, r24	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	29 81       	ldd	r18, Y+1	; 0x01
    166a:	3a 81       	ldd	r19, Y+2	; 0x02
    166c:	82 0f       	add	r24, r18
    166e:	93 1f       	adc	r25, r19
    1670:	02 96       	adiw	r24, 0x02	; 2
    1672:	2f 81       	ldd	r18, Y+7	; 0x07
    1674:	fc 01       	movw	r30, r24
    1676:	20 83       	st	Z, r18
    1678:	88 e0       	ldi	r24, 0x08	; 8
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	89 2f       	mov	r24, r25
    1680:	88 0f       	add	r24, r24
    1682:	89 0f       	add	r24, r25
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	89 0f       	add	r24, r25
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	29 81       	ldd	r18, Y+1	; 0x01
    1692:	3a 81       	ldd	r19, Y+2	; 0x02
    1694:	82 0f       	add	r24, r18
    1696:	93 1f       	adc	r25, r19
    1698:	02 96       	adiw	r24, 0x02	; 2
    169a:	2f ef       	ldi	r18, 0xFF	; 255
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	29 81       	ldd	r18, Y+1	; 0x01
    16ae:	3a 81       	ldd	r19, Y+2	; 0x02
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	02 96       	adiw	r24, 0x02	; 2
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	fc 01       	movw	r30, r24
    16ba:	20 83       	st	Z, r18
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	29 81       	ldd	r18, Y+1	; 0x01
    16ca:	3a 81       	ldd	r19, Y+2	; 0x02
    16cc:	82 0f       	add	r24, r18
    16ce:	93 1f       	adc	r25, r19
    16d0:	02 96       	adiw	r24, 0x02	; 2
    16d2:	2f ef       	ldi	r18, 0xFF	; 255
    16d4:	fc 01       	movw	r30, r24
    16d6:	20 83       	st	Z, r18
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    16de:	00 00       	nop
    16e0:	27 96       	adiw	r28, 0x07	; 7
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <ledSetAllButtonColour>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <ledSetAllButtonColour+0x6>
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	6a 83       	std	Y+2, r22	; 0x02
    16fa:	4b 83       	std	Y+3, r20	; 0x03
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1700:	69 81       	ldd	r22, Y+1	; 0x01
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	0e 94 97 0b 	call	0x172e	; 0x172e <ledSetButtonColour>
    1708:	2b 81       	ldd	r18, Y+3	; 0x03
    170a:	4a 81       	ldd	r20, Y+2	; 0x02
    170c:	69 81       	ldd	r22, Y+1	; 0x01
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	0e 94 97 0b 	call	0x172e	; 0x172e <ledSetButtonColour>
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	4a 81       	ldd	r20, Y+2	; 0x02
    1718:	69 81       	ldd	r22, Y+1	; 0x01
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	0e 94 97 0b 	call	0x172e	; 0x172e <ledSetButtonColour>
    1720:	00 00       	nop
    1722:	23 96       	adiw	r28, 0x03	; 3
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <ledSetButtonColour>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	00 d0       	rcall	.+0      	; 0x1734 <ledSetButtonColour+0x6>
    1734:	1f 92       	push	r1
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	6a 83       	std	Y+2, r22	; 0x02
    173e:	4b 83       	std	Y+3, r20	; 0x03
    1740:	2c 83       	std	Y+4, r18	; 0x04
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	88 23       	and	r24, r24
    1746:	31 f4       	brne	.+12     	; 0x1754 <ledSetButtonColour+0x26>
    1748:	4c 81       	ldd	r20, Y+4	; 0x04
    174a:	6b 81       	ldd	r22, Y+3	; 0x03
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	0e 94 bf 0b 	call	0x177e	; 0x177e <ledSetLeftButtonColour>
    1752:	0e c0       	rjmp	.+28     	; 0x1770 <ledSetButtonColour+0x42>
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	31 f4       	brne	.+12     	; 0x1766 <ledSetButtonColour+0x38>
    175a:	4c 81       	ldd	r20, Y+4	; 0x04
    175c:	6b 81       	ldd	r22, Y+3	; 0x03
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <ledSetCentreButtonColour>
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <ledSetButtonColour+0x42>
    1766:	4c 81       	ldd	r20, Y+4	; 0x04
    1768:	6b 81       	ldd	r22, Y+3	; 0x03
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ledSetRightButtonColour>
    1770:	00 00       	nop
    1772:	24 96       	adiw	r28, 0x04	; 4
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <ledSetLeftButtonColour>:

void ledSetLeftButtonColour(uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	00 d0       	rcall	.+0      	; 0x1784 <ledSetLeftButtonColour+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <ledSetLeftButtonColour+0x8>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	6d 83       	std	Y+5, r22	; 0x05
    178e:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsLeftAndCtr;
    1790:	82 e4       	ldi	r24, 0x42	; 66
    1792:	90 e2       	ldi	r25, 0x20	; 32
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1798:	88 e1       	ldi	r24, 0x18	; 24
    179a:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	82 35       	cpi	r24, 0x52	; 82
    17a0:	10 f0       	brcs	.+4      	; 0x17a6 <ledSetLeftButtonColour+0x28>
	{
		cRed = ledDriverIref3mA;
    17a2:	81 e5       	ldi	r24, 0x51	; 81
    17a4:	8c 83       	std	Y+4, r24	; 0x04
	}
	if(cGreen  > ledDriverIref3mA)
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	82 35       	cpi	r24, 0x52	; 82
    17aa:	10 f0       	brcs	.+4      	; 0x17b0 <ledSetLeftButtonColour+0x32>
	{
		cGreen = ledDriverIref3mA;
    17ac:	81 e5       	ldi	r24, 0x51	; 81
    17ae:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cBlue  > ledDriverIref3mA)
    17b0:	8e 81       	ldd	r24, Y+6	; 0x06
    17b2:	82 35       	cpi	r24, 0x52	; 82
    17b4:	10 f0       	brcs	.+4      	; 0x17ba <ledSetLeftButtonColour+0x3c>
	{
		cBlue = ledDriverIref3mA;
    17b6:	81 e5       	ldi	r24, 0x51	; 81
    17b8:	8e 83       	std	Y+6, r24	; 0x06
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	29 81       	ldd	r18, Y+1	; 0x01
    17c2:	3a 81       	ldd	r19, Y+2	; 0x02
    17c4:	82 0f       	add	r24, r18
    17c6:	93 1f       	adc	r25, r19
    17c8:	02 96       	adiw	r24, 0x02	; 2
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	fc 01       	movw	r30, r24
    17ce:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	29 81       	ldd	r18, Y+1	; 0x01
    17de:	3a 81       	ldd	r19, Y+2	; 0x02
    17e0:	82 0f       	add	r24, r18
    17e2:	93 1f       	adc	r25, r19
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	2d 81       	ldd	r18, Y+5	; 0x05
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	29 81       	ldd	r18, Y+1	; 0x01
    17fa:	3a 81       	ldd	r19, Y+2	; 0x02
    17fc:	82 0f       	add	r24, r18
    17fe:	93 1f       	adc	r25, r19
    1800:	02 96       	adiw	r24, 0x02	; 2
    1802:	2e 81       	ldd	r18, Y+6	; 0x06
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Both channels are set the same */
	pLedDriver->cRegister[cRegisterIndex] = cRed;
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	29 81       	ldd	r18, Y+1	; 0x01
    1816:	3a 81       	ldd	r19, Y+2	; 0x02
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	02 96       	adiw	r24, 0x02	; 2
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	fc 01       	movw	r30, r24
    1822:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	8f 5f       	subi	r24, 0xFF	; 255
    1828:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	29 81       	ldd	r18, Y+1	; 0x01
    1832:	3a 81       	ldd	r19, Y+2	; 0x02
    1834:	82 0f       	add	r24, r18
    1836:	93 1f       	adc	r25, r19
    1838:	02 96       	adiw	r24, 0x02	; 2
    183a:	2d 81       	ldd	r18, Y+5	; 0x05
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	29 81       	ldd	r18, Y+1	; 0x01
    184e:	3a 81       	ldd	r19, Y+2	; 0x02
    1850:	82 0f       	add	r24, r18
    1852:	93 1f       	adc	r25, r19
    1854:	02 96       	adiw	r24, 0x02	; 2
    1856:	2e 81       	ldd	r18, Y+6	; 0x06
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
	
	//cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
	cRegisterIndex = REG_PWM0;
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	8b 83       	std	Y+3, r24	; 0x03
	
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	29 81       	ldd	r18, Y+1	; 0x01
    1868:	3a 81       	ldd	r19, Y+2	; 0x02
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	02 96       	adiw	r24, 0x02	; 2
    1870:	2f ef       	ldi	r18, 0xFF	; 255
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	29 81       	ldd	r18, Y+1	; 0x01
    1884:	3a 81       	ldd	r19, Y+2	; 0x02
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	02 96       	adiw	r24, 0x02	; 2
    188c:	2f ef       	ldi	r18, 0xFF	; 255
    188e:	fc 01       	movw	r30, r24
    1890:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	29 81       	ldd	r18, Y+1	; 0x01
    18a0:	3a 81       	ldd	r19, Y+2	; 0x02
    18a2:	82 0f       	add	r24, r18
    18a4:	93 1f       	adc	r25, r19
    18a6:	02 96       	adiw	r24, 0x02	; 2
    18a8:	2f ef       	ldi	r18, 0xFF	; 255
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18
	cRegisterIndex++;
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	8f 5f       	subi	r24, 0xFF	; 255
    18b2:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	29 81       	ldd	r18, Y+1	; 0x01
    18bc:	3a 81       	ldd	r19, Y+2	; 0x02
    18be:	82 0f       	add	r24, r18
    18c0:	93 1f       	adc	r25, r19
    18c2:	02 96       	adiw	r24, 0x02	; 2
    18c4:	2f ef       	ldi	r18, 0xFF	; 255
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	29 81       	ldd	r18, Y+1	; 0x01
    18d8:	3a 81       	ldd	r19, Y+2	; 0x02
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	02 96       	adiw	r24, 0x02	; 2
    18e0:	2f ef       	ldi	r18, 0xFF	; 255
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = 255;
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	29 81       	ldd	r18, Y+1	; 0x01
    18f4:	3a 81       	ldd	r19, Y+2	; 0x02
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	02 96       	adiw	r24, 0x02	; 2
    18fc:	2f ef       	ldi	r18, 0xFF	; 255
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
	cRegisterIndex++;
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	8b 83       	std	Y+3, r24	; 0x03
}
    1908:	00 00       	nop
    190a:	26 96       	adiw	r28, 0x06	; 6
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <ledSetLeftButtonColourInt>:

void ledSetLeftButtonColourInt(uint8_t cInt,uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	27 97       	sbiw	r28, 0x07	; 7
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	8c 83       	std	Y+4, r24	; 0x04
    1926:	6d 83       	std	Y+5, r22	; 0x05
    1928:	4e 83       	std	Y+6, r20	; 0x06
    192a:	2f 83       	std	Y+7, r18	; 0x07
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsLeftAndCtr;
    192c:	82 e4       	ldi	r24, 0x42	; 66
    192e:	90 e2       	ldi	r25, 0x20	; 32
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1934:	88 e1       	ldi	r24, 0x18	; 24
    1936:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	82 35       	cpi	r24, 0x52	; 82
    193c:	10 f0       	brcs	.+4      	; 0x1942 <ledSetLeftButtonColourInt+0x2c>
	{
		cRed = ledDriverIref3mA;
    193e:	81 e5       	ldi	r24, 0x51	; 81
    1940:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cGreen  > ledDriverIref3mA)
    1942:	8e 81       	ldd	r24, Y+6	; 0x06
    1944:	82 35       	cpi	r24, 0x52	; 82
    1946:	10 f0       	brcs	.+4      	; 0x194c <ledSetLeftButtonColourInt+0x36>
	{
		cGreen = ledDriverIref3mA;
    1948:	81 e5       	ldi	r24, 0x51	; 81
    194a:	8e 83       	std	Y+6, r24	; 0x06
	}
	if(cBlue  > ledDriverIref3mA)
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	82 35       	cpi	r24, 0x52	; 82
    1950:	10 f0       	brcs	.+4      	; 0x1956 <ledSetLeftButtonColourInt+0x40>
	{
		cBlue = ledDriverIref3mA;
    1952:	81 e5       	ldi	r24, 0x51	; 81
    1954:	8f 83       	std	Y+7, r24	; 0x07
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	29 81       	ldd	r18, Y+1	; 0x01
    195e:	3a 81       	ldd	r19, Y+2	; 0x02
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	02 96       	adiw	r24, 0x02	; 2
    1966:	2d 81       	ldd	r18, Y+5	; 0x05
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	3a 81       	ldd	r19, Y+2	; 0x02
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	02 96       	adiw	r24, 0x02	; 2
    1982:	2e 81       	ldd	r18, Y+6	; 0x06
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	29 81       	ldd	r18, Y+1	; 0x01
    1996:	3a 81       	ldd	r19, Y+2	; 0x02
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	02 96       	adiw	r24, 0x02	; 2
    199e:	2f 81       	ldd	r18, Y+7	; 0x07
    19a0:	fc 01       	movw	r30, r24
    19a2:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Both channels are set the same */
	pLedDriver->cRegister[cRegisterIndex] = cRed;
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	29 81       	ldd	r18, Y+1	; 0x01
    19b2:	3a 81       	ldd	r19, Y+2	; 0x02
    19b4:	82 0f       	add	r24, r18
    19b6:	93 1f       	adc	r25, r19
    19b8:	02 96       	adiw	r24, 0x02	; 2
    19ba:	2d 81       	ldd	r18, Y+5	; 0x05
    19bc:	fc 01       	movw	r30, r24
    19be:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	29 81       	ldd	r18, Y+1	; 0x01
    19ce:	3a 81       	ldd	r19, Y+2	; 0x02
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	02 96       	adiw	r24, 0x02	; 2
    19d6:	2e 81       	ldd	r18, Y+6	; 0x06
    19d8:	fc 01       	movw	r30, r24
    19da:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	8f 5f       	subi	r24, 0xFF	; 255
    19e0:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	29 81       	ldd	r18, Y+1	; 0x01
    19ea:	3a 81       	ldd	r19, Y+2	; 0x02
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	02 96       	adiw	r24, 0x02	; 2
    19f2:	2f 81       	ldd	r18, Y+7	; 0x07
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18
	
	//cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
	cRegisterIndex = REG_PWM0;
    19f8:	88 e0       	ldi	r24, 0x08	; 8
    19fa:	8b 83       	std	Y+3, r24	; 0x03
	
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	29 81       	ldd	r18, Y+1	; 0x01
    1a04:	3a 81       	ldd	r19, Y+2	; 0x02
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	02 96       	adiw	r24, 0x02	; 2
    1a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0e:	fc 01       	movw	r30, r24
    1a10:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	8f 5f       	subi	r24, 0xFF	; 255
    1a16:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	82 0f       	add	r24, r18
    1a24:	93 1f       	adc	r25, r19
    1a26:	02 96       	adiw	r24, 0x02	; 2
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	8f 5f       	subi	r24, 0xFF	; 255
    1a32:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	29 81       	ldd	r18, Y+1	; 0x01
    1a3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	02 96       	adiw	r24, 0x02	; 2
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 83       	st	Z, r18
	cRegisterIndex++;
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	29 81       	ldd	r18, Y+1	; 0x01
    1a58:	3a 81       	ldd	r19, Y+2	; 0x02
    1a5a:	82 0f       	add	r24, r18
    1a5c:	93 1f       	adc	r25, r19
    1a5e:	02 96       	adiw	r24, 0x02	; 2
    1a60:	2c 81       	ldd	r18, Y+4	; 0x04
    1a62:	fc 01       	movw	r30, r24
    1a64:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	8f 5f       	subi	r24, 0xFF	; 255
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	29 81       	ldd	r18, Y+1	; 0x01
    1a74:	3a 81       	ldd	r19, Y+2	; 0x02
    1a76:	82 0f       	add	r24, r18
    1a78:	93 1f       	adc	r25, r19
    1a7a:	02 96       	adiw	r24, 0x02	; 2
    1a7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	29 81       	ldd	r18, Y+1	; 0x01
    1a90:	3a 81       	ldd	r19, Y+2	; 0x02
    1a92:	82 0f       	add	r24, r18
    1a94:	93 1f       	adc	r25, r19
    1a96:	02 96       	adiw	r24, 0x02	; 2
    1a98:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 83       	st	Z, r18
	cRegisterIndex++;
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	8f 5f       	subi	r24, 0xFF	; 255
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
}
    1aa4:	00 00       	nop
    1aa6:	27 96       	adiw	r28, 0x07	; 7
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <ledSetCentreButtonColour>:

void ledSetCentreButtonColour(uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <ledSetCentreButtonColour+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <ledSetCentreButtonColour+0x8>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	8c 83       	std	Y+4, r24	; 0x04
    1ac0:	6d 83       	std	Y+5, r22	; 0x05
    1ac2:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsLeftAndCtr;
    1ac4:	82 e4       	ldi	r24, 0x42	; 66
    1ac6:	90 e2       	ldi	r25, 0x20	; 32
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1acc:	88 e1       	ldi	r24, 0x18	; 24
    1ace:	8b 83       	std	Y+3, r24	; 0x03
	cRegisterIndex += 6;	/* move to the RGB set for the target  */
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	8a 5f       	subi	r24, 0xFA	; 250
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	82 35       	cpi	r24, 0x52	; 82
    1ada:	10 f0       	brcs	.+4      	; 0x1ae0 <ledSetCentreButtonColour+0x2e>
	{
		cRed = ledDriverIref3mA;
    1adc:	81 e5       	ldi	r24, 0x51	; 81
    1ade:	8c 83       	std	Y+4, r24	; 0x04
	}
	if(cGreen  > ledDriverIref3mA)
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	82 35       	cpi	r24, 0x52	; 82
    1ae4:	10 f0       	brcs	.+4      	; 0x1aea <ledSetCentreButtonColour+0x38>
	{
		cGreen = ledDriverIref3mA;
    1ae6:	81 e5       	ldi	r24, 0x51	; 81
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cBlue  > ledDriverIref3mA)
    1aea:	8e 81       	ldd	r24, Y+6	; 0x06
    1aec:	82 35       	cpi	r24, 0x52	; 82
    1aee:	10 f0       	brcs	.+4      	; 0x1af4 <ledSetCentreButtonColour+0x42>
	{
		cBlue = ledDriverIref3mA;
    1af0:	81 e5       	ldi	r24, 0x51	; 81
    1af2:	8e 83       	std	Y+6, r24	; 0x06
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	3a 81       	ldd	r19, Y+2	; 0x02
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	02 96       	adiw	r24, 0x02	; 2
    1b04:	2c 81       	ldd	r18, Y+4	; 0x04
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	29 81       	ldd	r18, Y+1	; 0x01
    1b18:	3a 81       	ldd	r19, Y+2	; 0x02
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	02 96       	adiw	r24, 0x02	; 2
    1b20:	2d 81       	ldd	r18, Y+5	; 0x05
    1b22:	fc 01       	movw	r30, r24
    1b24:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	29 81       	ldd	r18, Y+1	; 0x01
    1b34:	3a 81       	ldd	r19, Y+2	; 0x02
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	02 96       	adiw	r24, 0x02	; 2
    1b3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b3e:	fc 01       	movw	r30, r24
    1b40:	20 83       	st	Z, r18

	/* The 2nd channel for the centre button is connected on a different driver */	
	pLedDriver = &gLedButtonsCtrAndRight;
    1b42:	84 e8       	ldi	r24, 0x84	; 132
    1b44:	90 e2       	ldi	r25, 0x20	; 32
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1b4a:	88 e1       	ldi	r24, 0x18	; 24
    1b4c:	8b 83       	std	Y+3, r24	; 0x03

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	3a 81       	ldd	r19, Y+2	; 0x02
    1b58:	82 0f       	add	r24, r18
    1b5a:	93 1f       	adc	r25, r19
    1b5c:	02 96       	adiw	r24, 0x02	; 2
    1b5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	29 81       	ldd	r18, Y+1	; 0x01
    1b72:	3a 81       	ldd	r19, Y+2	; 0x02
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	02 96       	adiw	r24, 0x02	; 2
    1b7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	29 81       	ldd	r18, Y+1	; 0x01
    1b8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	02 96       	adiw	r24, 0x02	; 2
    1b96:	2e 81       	ldd	r18, Y+6	; 0x06
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 83       	st	Z, r18
}
    1b9c:	00 00       	nop
    1b9e:	26 96       	adiw	r28, 0x06	; 6
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	08 95       	ret

00001baa <ledSetRightButtonColour>:

void ledSetRightButtonColour(uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <ledSetRightButtonColour+0x6>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <ledSetRightButtonColour+0x8>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
    1bb8:	6d 83       	std	Y+5, r22	; 0x05
    1bba:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The back-lights for each button are arranged on two driver channels */

	pLedDriver = &gLedButtonsCtrAndRight;
    1bbc:	84 e8       	ldi	r24, 0x84	; 132
    1bbe:	90 e2       	ldi	r25, 0x20	; 32
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	9a 83       	std	Y+2, r25	; 0x02

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	cRegisterIndex = REG_IREF0;
    1bc4:	88 e1       	ldi	r24, 0x18	; 24
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
	cRegisterIndex += 3;	/* move to the RGB set for the target  */
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	8d 5f       	subi	r24, 0xFD	; 253
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	82 35       	cpi	r24, 0x52	; 82
    1bd2:	10 f0       	brcs	.+4      	; 0x1bd8 <ledSetRightButtonColour+0x2e>
	{
		cRed = ledDriverIref3mA;
    1bd4:	81 e5       	ldi	r24, 0x51	; 81
    1bd6:	8c 83       	std	Y+4, r24	; 0x04
	}
	if(cGreen  > ledDriverIref3mA)
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	82 35       	cpi	r24, 0x52	; 82
    1bdc:	10 f0       	brcs	.+4      	; 0x1be2 <ledSetRightButtonColour+0x38>
	{
		cGreen = ledDriverIref3mA;
    1bde:	81 e5       	ldi	r24, 0x51	; 81
    1be0:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(cBlue  > ledDriverIref3mA)
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	82 35       	cpi	r24, 0x52	; 82
    1be6:	10 f0       	brcs	.+4      	; 0x1bec <ledSetRightButtonColour+0x42>
	{
		cBlue = ledDriverIref3mA;
    1be8:	81 e5       	ldi	r24, 0x51	; 81
    1bea:	8e 83       	std	Y+6, r24	; 0x06
	}

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	29 81       	ldd	r18, Y+1	; 0x01
    1bf4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	02 96       	adiw	r24, 0x02	; 2
    1bfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfe:	fc 01       	movw	r30, r24
    1c00:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	8f 5f       	subi	r24, 0xFF	; 255
    1c06:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	29 81       	ldd	r18, Y+1	; 0x01
    1c10:	3a 81       	ldd	r19, Y+2	; 0x02
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	02 96       	adiw	r24, 0x02	; 2
    1c18:	2d 81       	ldd	r18, Y+5	; 0x05
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	29 81       	ldd	r18, Y+1	; 0x01
    1c2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	02 96       	adiw	r24, 0x02	; 2
    1c34:	2e 81       	ldd	r18, Y+6	; 0x06
    1c36:	fc 01       	movw	r30, r24
    1c38:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Both channels are set the same */
	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	29 81       	ldd	r18, Y+1	; 0x01
    1c48:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	02 96       	adiw	r24, 0x02	; 2
    1c50:	2c 81       	ldd	r18, Y+4	; 0x04
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cGreen;
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	29 81       	ldd	r18, Y+1	; 0x01
    1c64:	3a 81       	ldd	r19, Y+2	; 0x02
    1c66:	82 0f       	add	r24, r18
    1c68:	93 1f       	adc	r25, r19
    1c6a:	02 96       	adiw	r24, 0x02	; 2
    1c6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	8b 83       	std	Y+3, r24	; 0x03
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	29 81       	ldd	r18, Y+1	; 0x01
    1c80:	3a 81       	ldd	r19, Y+2	; 0x02
    1c82:	82 0f       	add	r24, r18
    1c84:	93 1f       	adc	r25, r19
    1c86:	02 96       	adiw	r24, 0x02	; 2
    1c88:	2e 81       	ldd	r18, Y+6	; 0x06
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	20 83       	st	Z, r18
}
    1c8e:	00 00       	nop
    1c90:	26 96       	adiw	r28, 0x06	; 6
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <ledSetProgressSegmentColour>:

void ledSetProgressSegmentColour(uint8_t cSegment, uint8_t cInt, uint8_t cRed, uint8_t cGreen, uint8_t cBlue)
{
    1c9c:	0f 93       	push	r16
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	8e 83       	std	Y+6, r24	; 0x06
    1cae:	6f 83       	std	Y+7, r22	; 0x07
    1cb0:	48 87       	std	Y+8, r20	; 0x08
    1cb2:	29 87       	std	Y+9, r18	; 0x09
    1cb4:	0a 87       	std	Y+10, r16	; 0x0a
	uint8_t cRegisterIndex;
	LedDriver_t* pLedDriver;

	/* The progress bar back-lights are arranged on four driver ICs */
	uint8_t driverIndex = cSegment / ProgressBarSegmentCountPerDriver;
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	8d ec       	ldi	r24, 0xCD	; 205
    1cba:	98 9f       	mul	r25, r24
    1cbc:	81 2d       	mov	r24, r1
    1cbe:	11 24       	eor	r1, r1
    1cc0:	86 95       	lsr	r24
    1cc2:	86 95       	lsr	r24
    1cc4:	89 83       	std	Y+1, r24	; 0x01

	pLedDriver = &gLedProgressBar[driverIndex];
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	42 e4       	ldi	r20, 0x42	; 66
    1cce:	42 9f       	mul	r20, r18
    1cd0:	c0 01       	movw	r24, r0
    1cd2:	43 9f       	mul	r20, r19
    1cd4:	90 0d       	add	r25, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	8a 53       	subi	r24, 0x3A	; 58
    1cda:	9f 4d       	sbci	r25, 0xDF	; 223
    1cdc:	8a 83       	std	Y+2, r24	; 0x02
    1cde:	9b 83       	std	Y+3, r25	; 0x03

	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	uint8_t driverSegment = cSegment % ProgressBarSegmentCountPerDriver;	/* range is 0 to 4 */
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	8d ec       	ldi	r24, 0xCD	; 205
    1ce4:	98 9f       	mul	r25, r24
    1ce6:	81 2d       	mov	r24, r1
    1ce8:	11 24       	eor	r1, r1
    1cea:	28 2f       	mov	r18, r24
    1cec:	26 95       	lsr	r18
    1cee:	26 95       	lsr	r18
    1cf0:	82 2f       	mov	r24, r18
    1cf2:	88 0f       	add	r24, r24
    1cf4:	88 0f       	add	r24, r24
    1cf6:	82 0f       	add	r24, r18
    1cf8:	29 2f       	mov	r18, r25
    1cfa:	28 1b       	sub	r18, r24
    1cfc:	82 2f       	mov	r24, r18
    1cfe:	8c 83       	std	Y+4, r24	; 0x04
	cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	89 2f       	mov	r24, r25
    1d04:	88 0f       	add	r24, r24
    1d06:	89 0f       	add	r24, r25
    1d08:	8d 83       	std	Y+5, r24	; 0x05
	cRegisterIndex += REG_IREF0;
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	88 5e       	subi	r24, 0xE8	; 232
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
	
	/* Limit the current to 3mA. This is the max LED current at higher temperatures */
	if(cRed  > ledDriverIref3mA)
    1d10:	88 85       	ldd	r24, Y+8	; 0x08
    1d12:	82 35       	cpi	r24, 0x52	; 82
    1d14:	10 f0       	brcs	.+4      	; 0x1d1a <ledSetProgressSegmentColour+0x7e>
	{
		cRed = ledDriverIref3mA;
    1d16:	81 e5       	ldi	r24, 0x51	; 81
    1d18:	88 87       	std	Y+8, r24	; 0x08
	}
	if(cGreen  > ledDriverIref3mA)
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	82 35       	cpi	r24, 0x52	; 82
    1d1e:	10 f0       	brcs	.+4      	; 0x1d24 <ledSetProgressSegmentColour+0x88>
	{
		cGreen = ledDriverIref3mA;
    1d20:	81 e5       	ldi	r24, 0x51	; 81
    1d22:	89 87       	std	Y+9, r24	; 0x09
	}
	if(cBlue  > ledDriverIref3mA)
    1d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d26:	82 35       	cpi	r24, 0x52	; 82
    1d28:	10 f0       	brcs	.+4      	; 0x1d2e <ledSetProgressSegmentColour+0x92>
	{
		cBlue = ledDriverIref3mA;
    1d2a:	81 e5       	ldi	r24, 0x51	; 81
    1d2c:	8a 87       	std	Y+10, r24	; 0x0a
	}
	

	pLedDriver->cRegister[cRegisterIndex] = cRed;
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	2a 81       	ldd	r18, Y+2	; 0x02
    1d36:	3b 81       	ldd	r19, Y+3	; 0x03
    1d38:	82 0f       	add	r24, r18
    1d3a:	93 1f       	adc	r25, r19
    1d3c:	02 96       	adiw	r24, 0x02	; 2
    1d3e:	28 85       	ldd	r18, Y+8	; 0x08
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] =cGreen;
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	2a 81       	ldd	r18, Y+2	; 0x02
    1d52:	3b 81       	ldd	r19, Y+3	; 0x03
    1d54:	82 0f       	add	r24, r18
    1d56:	93 1f       	adc	r25, r19
    1d58:	02 96       	adiw	r24, 0x02	; 2
    1d5a:	29 85       	ldd	r18, Y+9	; 0x09
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cBlue;
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d6e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d70:	82 0f       	add	r24, r18
    1d72:	93 1f       	adc	r25, r19
    1d74:	02 96       	adiw	r24, 0x02	; 2
    1d76:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d78:	fc 01       	movw	r30, r24
    1d7a:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	8d 83       	std	Y+5, r24	; 0x05
	
// 	///////////////////////////
	/* Move to the register index to that sets the constant current of the red LED in the set for the target backlight */
	driverSegment = cSegment % ProgressBarSegmentCountPerDriver;	/* range is 0 to 4 */
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	8d ec       	ldi	r24, 0xCD	; 205
    1d86:	98 9f       	mul	r25, r24
    1d88:	81 2d       	mov	r24, r1
    1d8a:	11 24       	eor	r1, r1
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	26 95       	lsr	r18
    1d90:	26 95       	lsr	r18
    1d92:	82 2f       	mov	r24, r18
    1d94:	88 0f       	add	r24, r24
    1d96:	88 0f       	add	r24, r24
    1d98:	82 0f       	add	r24, r18
    1d9a:	f9 2f       	mov	r31, r25
    1d9c:	f8 1b       	sub	r31, r24
    1d9e:	8f 2f       	mov	r24, r31
    1da0:	8c 83       	std	Y+4, r24	; 0x04
	cRegisterIndex = driverSegment *ledChannelCountPerBacklight;	/* move to the RGB set for the target  */
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	89 2f       	mov	r24, r25
    1da6:	88 0f       	add	r24, r24
    1da8:	89 0f       	add	r24, r25
    1daa:	8d 83       	std	Y+5, r24	; 0x05
	cRegisterIndex += REG_PWM0;
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	88 5f       	subi	r24, 0xF8	; 248
    1db0:	8d 83       	std	Y+5, r24	; 0x05
	
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dba:	3b 81       	ldd	r19, Y+3	; 0x03
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	02 96       	adiw	r24, 0x02	; 2
    1dc2:	2f 81       	ldd	r18, Y+7	; 0x07
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	02 96       	adiw	r24, 0x02	; 2
    1dde:	2f 81       	ldd	r18, Y+7	; 0x07
    1de0:	fc 01       	movw	r30, r24
    1de2:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	8d 83       	std	Y+5, r24	; 0x05
	pLedDriver->cRegister[cRegisterIndex] = cInt;
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	2a 81       	ldd	r18, Y+2	; 0x02
    1df2:	3b 81       	ldd	r19, Y+3	; 0x03
    1df4:	82 0f       	add	r24, r18
    1df6:	93 1f       	adc	r25, r19
    1df8:	02 96       	adiw	r24, 0x02	; 2
    1dfa:	2f 81       	ldd	r18, Y+7	; 0x07
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
	cRegisterIndex++;	/* Advance to next register */
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	8d 83       	std	Y+5, r24	; 0x05

}
    1e06:	00 00       	nop
    1e08:	2a 96       	adiw	r28, 0x0a	; 10
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <ledIndexToRegisterCache>:

static LedDriver_t* ledIndexToRegisterCache(uint8_t cLedIcIndex)
{
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <ledIndexToRegisterCache+0x6>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	8b 83       	std	Y+3, r24	; 0x03
	LedDriver_t* pLedDriver;

	pLedDriver = &gLedIndicators;
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e2       	ldi	r25, 0x20	; 32
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	9a 83       	std	Y+2, r25	; 0x02

	if(cLedIcIndex <= ledIndex_DriverIc_Progress3)
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	84 30       	cpi	r24, 0x04	; 4
    1e2e:	70 f4       	brcc	.+28     	; 0x1e4c <ledIndexToRegisterCache+0x36>
	{
		pLedDriver = &gLedProgressBar[cLedIcIndex]; 	/* Led Driver ICs for Progress Bar */
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	42 e4       	ldi	r20, 0x42	; 66
    1e38:	42 9f       	mul	r20, r18
    1e3a:	c0 01       	movw	r24, r0
    1e3c:	43 9f       	mul	r20, r19
    1e3e:	90 0d       	add	r25, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	8a 53       	subi	r24, 0x3A	; 58
    1e44:	9f 4d       	sbci	r25, 0xDF	; 223
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	17 c0       	rjmp	.+46     	; 0x1e7a <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_Indicators)
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	84 30       	cpi	r24, 0x04	; 4
    1e50:	29 f4       	brne	.+10     	; 0x1e5c <ledIndexToRegisterCache+0x46>
	{
		pLedDriver = &gLedIndicators;
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e2       	ldi	r25, 0x20	; 32
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_ButtonsLeftAndCtr)
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	85 30       	cpi	r24, 0x05	; 5
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <ledIndexToRegisterCache+0x56>
	{
		pLedDriver = &gLedButtonsLeftAndCtr; 	/* Led Driver IC for the Left and Centre buttons */
    1e62:	82 e4       	ldi	r24, 0x42	; 66
    1e64:	90 e2       	ldi	r25, 0x20	; 32
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <ledIndexToRegisterCache+0x64>
	}
	else if(cLedIcIndex == ledIndex_DriverIc_ButtonsCtrAndRight)
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	86 30       	cpi	r24, 0x06	; 6
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <ledIndexToRegisterCache+0x64>
	{
		pLedDriver = &gLedButtonsCtrAndRight; 	/* Led Driver IC for the Centre and Right buttons */
    1e72:	84 e8       	ldi	r24, 0x84	; 132
    1e74:	90 e2       	ldi	r25, 0x20	; 32
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	9a 83       	std	Y+2, r25	; 0x02
	}
	else
	{}

	return pLedDriver;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e7e:	23 96       	adiw	r28, 0x03	; 3
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <ledManager>:

/** Manage the LED driver IC settings.
	\return Nothing
*/   
void ledManager(void)
{
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	1f 92       	push	r1
    1e90:	1f 92       	push	r1
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	LedDriver_t* pLedDriver;

	
	if(gc10msTick_Local == gc10msTick)
    1e96:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <gc10msTick_Local>
    1e9a:	80 91 09 23 	lds	r24, 0x2309	; 0x802309 <gc10msTick>
    1e9e:	98 17       	cp	r25, r24
    1ea0:	31 f1       	breq	.+76     	; 0x1eee <ledManager+0x64>
	{}	/* Leave some time between accesses on the I2C, to give the prox sensor access an opportunity */
	else if(hmiI2cReady())
    1ea2:	0e 94 12 19 	call	0x3224	; 0x3224 <hmiI2cReady>
    1ea6:	88 23       	and	r24, r24
    1ea8:	11 f1       	breq	.+68     	; 0x1eee <ledManager+0x64>
	{	/* HMI I2C bus is free */

		/* get a pointer to the LED IC variable */
		pLedDriver = ledIndexToRegisterCache(gcLedIcIndex);
    1eaa:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <gcLedIcIndex>
    1eae:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <ledIndexToRegisterCache>
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
		/* send data-set to IC */
		hmiI2cWrite(pLedDriver->cSlaveAddress, &(pLedDriver->cControl), gcLedDriverRegisterCount +1);	/* include the control register */
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	9c 01       	movw	r18, r24
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	80 81       	ld	r24, Z
    1ec8:	41 e4       	ldi	r20, 0x41	; 65
    1eca:	b9 01       	movw	r22, r18
    1ecc:	0e 94 8a 19 	call	0x3314	; 0x3314 <hmiI2cWrite>

		gcLedIcIndex++;	/* Move on to next driver next time */
    1ed0:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <gcLedIcIndex>
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <gcLedIcIndex>
		if(gcLedIcIndex > ledIcCount)
    1eda:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <gcLedIcIndex>
    1ede:	88 30       	cpi	r24, 0x08	; 8
    1ee0:	10 f0       	brcs	.+4      	; 0x1ee6 <ledManager+0x5c>
		{	/* Transferred data to all ICs */
			gcLedIcIndex = 0;	/* Start again */
    1ee2:	10 92 15 22 	sts	0x2215, r1	; 0x802215 <gcLedIcIndex>
		}
		
		gc10msTick_Local = gc10msTick;	/* mark the time of the last access to a LED IC */
    1ee6:	80 91 09 23 	lds	r24, 0x2309	; 0x802309 <gc10msTick>
    1eea:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <gc10msTick_Local>
	}
	else
	{	/* HMI I2C bus is busy */
		/* try again next time around the main loop */
	}
}
    1eee:	00 00       	nop
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <lowPowerInit>:

/** Initialise the low power (standby) mode driver
	\return Nothing
*/
void lowPowerInit(void)
{
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : STANDBY, output, Logic 0 = Power-on; Logic 1 = Standby/Lo-power. Initialise power-on */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : */
	PORTE.OUTCLR = 0x10;	/* Clear output drive to logic 0 */
    1f02:	80 e8       	ldi	r24, 0x80	; 128
    1f04:	96 e0       	ldi	r25, 0x06	; 6
    1f06:	20 e1       	ldi	r18, 0x10	; 16
    1f08:	fc 01       	movw	r30, r24
    1f0a:	26 83       	std	Z+6, r18	; 0x06
	PORTE.DIRSET = 0x10;	/* Set outputs */
    1f0c:	80 e8       	ldi	r24, 0x80	; 128
    1f0e:	96 e0       	ldi	r25, 0x06	; 6
    1f10:	20 e1       	ldi	r18, 0x10	; 16
    1f12:	fc 01       	movw	r30, r24
    1f14:	21 83       	std	Z+1, r18	; 0x01

	/* configured to output, totem-pole */
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc;
    1f16:	80 e8       	ldi	r24, 0x80	; 128
    1f18:	96 e0       	ldi	r25, 0x06	; 6
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	14 8a       	std	Z+20, r1	; 0x14
}
    1f1e:	00 00       	nop
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <manualResetDetectInit>:

/** Initialise the manual Reset Detect
	\return Nothing
*/   
void manualResetDetectInit(void)
{
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : USER-RST/, input with pull-up */
	PORTE.DIRCLR = 0x80;	/* Clear to input */
    1f2e:	80 e8       	ldi	r24, 0x80	; 128
    1f30:	96 e0       	ldi	r25, 0x06	; 6
    1f32:	20 e8       	ldi	r18, 0x80	; 128
    1f34:	fc 01       	movw	r30, r24
    1f36:	22 83       	std	Z+2, r18	; 0x02

	/* configured to pull-up on input */
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;
    1f38:	80 e8       	ldi	r24, 0x80	; 128
    1f3a:	96 e0       	ldi	r25, 0x06	; 6
    1f3c:	28 e1       	ldi	r18, 0x18	; 24
    1f3e:	fc 01       	movw	r30, r24
    1f40:	27 8b       	std	Z+23, r18	; 0x17

}
    1f42:	00 00       	nop
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <manageManualResetDetect>:

bool manageManualResetDetect(void)
{
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	1f 92       	push	r1
    1f50:	1f 92       	push	r1
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	bool bActive;
	uint8_t cPinMask;

	bActive = false;
    1f56:	19 82       	std	Y+1, r1	; 0x01
	cPinMask = PIN7_bm;
    1f58:	80 e8       	ldi	r24, 0x80	; 128
    1f5a:	8a 83       	std	Y+2, r24	; 0x02

	if((PORTE.IN & cPinMask) == 0)
    1f5c:	80 e8       	ldi	r24, 0x80	; 128
    1f5e:	96 e0       	ldi	r25, 0x06	; 6
    1f60:	fc 01       	movw	r30, r24
    1f62:	90 85       	ldd	r25, Z+8	; 0x08
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	89 23       	and	r24, r25
    1f68:	88 23       	and	r24, r24
    1f6a:	11 f4       	brne	.+4      	; 0x1f70 <manageManualResetDetect+0x26>
	{	/* button indicating active */
		bActive = true;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	}

	return(bActive);
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <proximitySensorInit>:

/** Initialise the proximity Sensor driver
	\return Nothing
*/
void proximitySensorInit(void)
{
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
	/*	              | | | |  +-------- b3 : */
	/*	              | | | +----------- b4 : */
	/*	              | | +------------- b5 : */
	/*	              | +--------------- b6 : */
	/*	              +----------------- b7 : */
	PORTE.DIRCLR = 0x04;	/* Clear to input */
    1f84:	80 e8       	ldi	r24, 0x80	; 128
    1f86:	96 e0       	ldi	r25, 0x06	; 6
    1f88:	24 e0       	ldi	r18, 0x04	; 4
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	22 83       	std	Z+2, r18	; 0x02

	/* configured to pull-up on input */
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;
    1f8e:	80 e8       	ldi	r24, 0x80	; 128
    1f90:	96 e0       	ldi	r25, 0x06	; 6
    1f92:	28 e1       	ldi	r18, 0x18	; 24
    1f94:	fc 01       	movw	r30, r24
    1f96:	22 8b       	std	Z+18, r18	; 0x12

}
    1f98:	00 00       	nop
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	08 95       	ret

00001fa0 <EnableInterrupts>:
	
	pHaltEvent->externalFlashMemSuccessCount = externalFlashMemSuccessCount;
	pHaltEvent->externalFlashMemFailedCount = externalFlashMemFailedCount;
	
	EnableInterrupts();
}
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	78 94       	sei
    1faa:	00 00       	nop
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <DisableInterrupts>:
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	f8 94       	cli
    1fbc:	00 00       	nop
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <pscSetSecondsAlive>:
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <pscSetSecondsAlive+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <pscSetSecondsAlive+0x8>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	6b 83       	std	Y+3, r22	; 0x03
    1fd2:	7c 83       	std	Y+4, r23	; 0x04
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	0e 94 75 13 	call	0x26ea	; 0x26ea <pscI2cGetTxBuffer>
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <DisableInterrupts>
    1fe4:	29 81       	ldd	r18, Y+1	; 0x01
    1fe6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	ad 81       	ldd	r26, Y+5	; 0x05
    1fee:	be 81       	ldd	r27, Y+6	; 0x06
    1ff0:	f9 01       	movw	r30, r18
    1ff2:	84 87       	std	Z+12, r24	; 0x0c
    1ff4:	95 87       	std	Z+13, r25	; 0x0d
    1ff6:	a6 87       	std	Z+14, r26	; 0x0e
    1ff8:	b7 87       	std	Z+15, r27	; 0x0f
    1ffa:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <EnableInterrupts>
    1ffe:	00 00       	nop
    2000:	26 96       	adiw	r28, 0x06	; 6
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	08 95       	ret

0000200c <pscSetLastReasonForReset>:
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <pscSetLastReasonForReset+0x6>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	8b 83       	std	Y+3, r24	; 0x03
    2018:	0e 94 75 13 	call	0x26ea	; 0x26ea <pscI2cGetTxBuffer>
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <DisableInterrupts>
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	fc 01       	movw	r30, r24
    202c:	26 8b       	std	Z+22, r18	; 0x16
    202e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <EnableInterrupts>
    2032:	00 00       	nop
    2034:	23 96       	adiw	r28, 0x03	; 3
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <pscSetPublicButtonState>:

void pscSetPublicButtonState(uint8_t cButton, bool bActive)
{
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	00 d0       	rcall	.+0      	; 0x2046 <pscSetPublicButtonState+0x6>
    2046:	1f 92       	push	r1
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	8b 83       	std	Y+3, r24	; 0x03
    204e:	6c 83       	std	Y+4, r22	; 0x04
	PscHALTEvent_t* pHaltEvent = (PscHALTEvent_t*)pscI2cGetTxBuffer();
    2050:	0e 94 75 13 	call	0x26ea	; 0x26ea <pscI2cGetTxBuffer>
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	9a 83       	std	Y+2, r25	; 0x02
	
	/* Disable interrupts while editing the buffer the PSC I2C interrupt also uses */
	DisableInterrupts();
    2058:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <DisableInterrupts>
	
	if(cButton == BtnLeft)
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	84 36       	cpi	r24, 0x64	; 100
    2060:	59 f4       	brne	.+22     	; 0x2078 <pscSetPublicButtonState+0x38>
	{
		pHaltEvent->leftButtonStatus = bActive;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	2c 81       	ldd	r18, Y+4	; 0x04
    2068:	21 70       	andi	r18, 0x01	; 1
    206a:	fc 01       	movw	r30, r24
    206c:	37 89       	ldd	r19, Z+23	; 0x17
    206e:	3e 7f       	andi	r19, 0xFE	; 254
    2070:	23 2b       	or	r18, r19
    2072:	fc 01       	movw	r30, r24
    2074:	27 8b       	std	Z+23, r18	; 0x17
    2076:	1e c0       	rjmp	.+60     	; 0x20b4 <pscSetPublicButtonState+0x74>
	}
	else if(cButton == BtnCentre)
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	88 23       	and	r24, r24
    207c:	61 f4       	brne	.+24     	; 0x2096 <pscSetPublicButtonState+0x56>
	{
		pHaltEvent->centreButtonStatus = bActive;
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	2c 81       	ldd	r18, Y+4	; 0x04
    2084:	21 70       	andi	r18, 0x01	; 1
    2086:	22 0f       	add	r18, r18
    2088:	fc 01       	movw	r30, r24
    208a:	37 89       	ldd	r19, Z+23	; 0x17
    208c:	3d 7f       	andi	r19, 0xFD	; 253
    208e:	23 2b       	or	r18, r19
    2090:	fc 01       	movw	r30, r24
    2092:	27 8b       	std	Z+23, r18	; 0x17
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <pscSetPublicButtonState+0x74>
	}
	else if(cButton == BtnRight)
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	61 f4       	brne	.+24     	; 0x20b4 <pscSetPublicButtonState+0x74>
	{
		pHaltEvent->rightButtonStatus = bActive;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	2c 81       	ldd	r18, Y+4	; 0x04
    20a2:	21 70       	andi	r18, 0x01	; 1
    20a4:	22 0f       	add	r18, r18
    20a6:	22 0f       	add	r18, r18
    20a8:	fc 01       	movw	r30, r24
    20aa:	37 89       	ldd	r19, Z+23	; 0x17
    20ac:	3b 7f       	andi	r19, 0xFB	; 251
    20ae:	23 2b       	or	r18, r19
    20b0:	fc 01       	movw	r30, r24
    20b2:	27 8b       	std	Z+23, r18	; 0x17
	}
	else
	{}
		
	EnableInterrupts();
    20b4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <EnableInterrupts>
}
    20b8:	00 00       	nop
    20ba:	24 96       	adiw	r28, 0x04	; 4
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <pscI2cInit>:

/** Initialise the I2C bus for communication with the PSC
	\return Nothing
*/   
void pscI2cInit(void)
{
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	/* Configuration of I2C peripheral overrides the normal port pin function */
	/* PSC-I2C-SDA */
	/* PSC-I2C-SCL */
	
	/* Initialise I2C */
	TWIC.SLAVE.CTRLA = 0;
    20ce:	80 e8       	ldi	r24, 0x80	; 128
    20d0:	94 e0       	ldi	r25, 0x04	; 4
    20d2:	fc 01       	movw	r30, r24
    20d4:	10 86       	std	Z+8, r1	; 0x08
	pscI2cInitialiseDriver(&gPscI2c);
    20d6:	8b e2       	ldi	r24, 0x2B	; 43
    20d8:	92 e2       	ldi	r25, 0x22	; 34
    20da:	0e 94 63 11 	call	0x22c6	; 0x22c6 <pscI2cInitialiseDriver>
	pscI2cInitialiseModule(&gPscI2c, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_LO_gc);
    20de:	82 e4       	ldi	r24, 0x42	; 66
    20e0:	40 e4       	ldi	r20, 0x40	; 64
    20e2:	68 2f       	mov	r22, r24
    20e4:	8b e2       	ldi	r24, 0x2B	; 43
    20e6:	92 e2       	ldi	r25, 0x22	; 34
    20e8:	0e 94 93 11 	call	0x2326	; 0x2326 <pscI2cInitialiseModule>
}
    20ec:	00 00       	nop
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <pscI2cIsCommandPendingProcessing>:
/** Check if a command has been received from the PSC and is pending processing
	\return true if a command is pending processing
	\return false if a command isn't pending processing
*/   
bool pscI2cIsCommandPendingProcessing(void)
{
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	25 97       	sbiw	r28, 0x05	; 5
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	de bf       	out	0x3e, r29	; 62
	/* Restart the I2C peripheral if an error appears to be stopping communication */
	if(gMarkLastI2cActivity > gdwSecondsAlive)
    210a:	20 91 27 22 	lds	r18, 0x2227	; 0x802227 <gMarkLastI2cActivity>
    210e:	30 91 28 22 	lds	r19, 0x2228	; 0x802228 <gMarkLastI2cActivity+0x1>
    2112:	40 91 29 22 	lds	r20, 0x2229	; 0x802229 <gMarkLastI2cActivity+0x2>
    2116:	50 91 2a 22 	lds	r21, 0x222A	; 0x80222a <gMarkLastI2cActivity+0x3>
    211a:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    211e:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    2122:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    2126:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    212a:	82 17       	cp	r24, r18
    212c:	93 07       	cpc	r25, r19
    212e:	a4 07       	cpc	r26, r20
    2130:	b5 07       	cpc	r27, r21
    2132:	80 f4       	brcc	.+32     	; 0x2154 <pscI2cIsCommandPendingProcessing+0x60>
	{
		gMarkLastI2cActivity = gdwSecondsAlive;
    2134:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    2138:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    213c:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    2140:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    2144:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <gMarkLastI2cActivity>
    2148:	90 93 28 22 	sts	0x2228, r25	; 0x802228 <gMarkLastI2cActivity+0x1>
    214c:	a0 93 29 22 	sts	0x2229, r26	; 0x802229 <gMarkLastI2cActivity+0x2>
    2150:	b0 93 2a 22 	sts	0x222A, r27	; 0x80222a <gMarkLastI2cActivity+0x3>
	}
	uint32_t dwDiff = gdwSecondsAlive -gMarkLastI2cActivity;
    2154:	20 91 0a 23 	lds	r18, 0x230A	; 0x80230a <gdwSecondsAlive>
    2158:	30 91 0b 23 	lds	r19, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    215c:	40 91 0c 23 	lds	r20, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    2160:	50 91 0d 23 	lds	r21, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    2164:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <gMarkLastI2cActivity>
    2168:	90 91 28 22 	lds	r25, 0x2228	; 0x802228 <gMarkLastI2cActivity+0x1>
    216c:	a0 91 29 22 	lds	r26, 0x2229	; 0x802229 <gMarkLastI2cActivity+0x2>
    2170:	b0 91 2a 22 	lds	r27, 0x222A	; 0x80222a <gMarkLastI2cActivity+0x3>
    2174:	79 01       	movw	r14, r18
    2176:	8a 01       	movw	r16, r20
    2178:	e8 1a       	sub	r14, r24
    217a:	f9 0a       	sbc	r15, r25
    217c:	0a 0b       	sbc	r16, r26
    217e:	1b 0b       	sbc	r17, r27
    2180:	d8 01       	movw	r26, r16
    2182:	c7 01       	movw	r24, r14
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	ab 83       	std	Y+3, r26	; 0x03
    218a:	bc 83       	std	Y+4, r27	; 0x04
	if(dwDiff > 5)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	ab 81       	ldd	r26, Y+3	; 0x03
    2192:	bc 81       	ldd	r27, Y+4	; 0x04
    2194:	06 97       	sbiw	r24, 0x06	; 6
    2196:	a1 05       	cpc	r26, r1
    2198:	b1 05       	cpc	r27, r1
    219a:	d8 f0       	brcs	.+54     	; 0x21d2 <pscI2cIsCommandPendingProcessing+0xde>
	{
		gMarkLastI2cActivity = gdwSecondsAlive;
    219c:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    21a0:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    21a4:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    21a8:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    21ac:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <gMarkLastI2cActivity>
    21b0:	90 93 28 22 	sts	0x2228, r25	; 0x802228 <gMarkLastI2cActivity+0x1>
    21b4:	a0 93 29 22 	sts	0x2229, r26	; 0x802229 <gMarkLastI2cActivity+0x2>
    21b8:	b0 93 2a 22 	sts	0x222A, r27	; 0x80222a <gMarkLastI2cActivity+0x3>
	
		uint8_t i2cStatus = TWIC.SLAVE.STATUS & (TWI_SLAVE_DIF_bm | TWI_SLAVE_APIF_bm | TWI_SLAVE_CLKHOLD_bm | TWI_SLAVE_COLL_bm | TWI_SLAVE_BUSERR_bm);
    21bc:	80 e8       	ldi	r24, 0x80	; 128
    21be:	94 e0       	ldi	r25, 0x04	; 4
    21c0:	fc 01       	movw	r30, r24
    21c2:	82 85       	ldd	r24, Z+10	; 0x0a
    21c4:	8c 7e       	andi	r24, 0xEC	; 236
    21c6:	8d 83       	std	Y+5, r24	; 0x05
		if(i2cStatus != 0)
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	88 23       	and	r24, r24
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <pscI2cIsCommandPendingProcessing+0xde>
		{
			pscI2cInit();
    21ce:	0e 94 63 10 	call	0x20c6	; 0x20c6 <pscI2cInit>
		}
	}

	return(gPscI2c.bCommandPendingProcessing);
    21d2:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <gPscI2c>
}
    21d6:	25 96       	adiw	r28, 0x05	; 5
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	08 95       	ret

000021ea <pscI2cReadCommandData>:
/** Copy the latest command data sent from the PSC.
	Also clears the flag indicating a command is pending processing
	\return Nothing
*/   
void pscI2cReadCommandData(uint8_t* pDest, uint8_t cLength)
{
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	27 97       	sbiw	r28, 0x07	; 7
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t* pSrc;
	uint8_t cMaxLength = cLength;
    21fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2200:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Ensure the count of bytes copied does not exceed the maximum source length */
	if(cMaxLength > PscI2cRxBufferSize)
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	85 36       	cpi	r24, 0x65	; 101
    2206:	10 f0       	brcs	.+4      	; 0x220c <pscI2cReadCommandData+0x22>
	{
		cMaxLength = PscI2cRxBufferSize;
    2208:	84 e6       	ldi	r24, 0x64	; 100
    220a:	8b 83       	std	Y+3, r24	; 0x03
	}
		
	/* Copy the data to the destination buffer */
	pSrc = (uint8_t*)gPscI2c.cRxData;
    220c:	8c e2       	ldi	r24, 0x2C	; 44
    220e:	92 e2       	ldi	r25, 0x22	; 34
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	9a 83       	std	Y+2, r25	; 0x02
	for(uint8_t c = 0; c < cMaxLength; c++)
    2214:	1c 82       	std	Y+4, r1	; 0x04
    2216:	15 c0       	rjmp	.+42     	; 0x2242 <pscI2cReadCommandData+0x58>
	{
		*pDest++ = *pSrc++;
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9c 01       	movw	r18, r24
    221e:	2f 5f       	subi	r18, 0xFF	; 255
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	2d 83       	std	Y+5, r18	; 0x05
    2224:	3e 83       	std	Y+6, r19	; 0x06
    2226:	29 81       	ldd	r18, Y+1	; 0x01
    2228:	3a 81       	ldd	r19, Y+2	; 0x02
    222a:	a9 01       	movw	r20, r18
    222c:	4f 5f       	subi	r20, 0xFF	; 255
    222e:	5f 4f       	sbci	r21, 0xFF	; 255
    2230:	49 83       	std	Y+1, r20	; 0x01
    2232:	5a 83       	std	Y+2, r21	; 0x02
    2234:	f9 01       	movw	r30, r18
    2236:	20 81       	ld	r18, Z
    2238:	fc 01       	movw	r30, r24
    223a:	20 83       	st	Z, r18
		cMaxLength = PscI2cRxBufferSize;
	}
		
	/* Copy the data to the destination buffer */
	pSrc = (uint8_t*)gPscI2c.cRxData;
	for(uint8_t c = 0; c < cMaxLength; c++)
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	8c 83       	std	Y+4, r24	; 0x04
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	98 17       	cp	r25, r24
    2248:	38 f3       	brcs	.-50     	; 0x2218 <pscI2cReadCommandData+0x2e>
	{
		*pDest++ = *pSrc++;
	}
		
	/* Reset / Clear the flag which indicates a PSC command has been received and is ready for processing */
	gPscI2c.bCommandPendingProcessing = false;
    224a:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <gPscI2c>
}
    224e:	00 00       	nop
    2250:	27 96       	adiw	r28, 0x07	; 7
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <__vector_12>:



/*! TWIC Slave Interrupt vector. */
ISR(TWIC_TWIS_vect)
{
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2264:	0f 92       	push	r0
    2266:	11 24       	eor	r1, r1
    2268:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    226c:	0f 92       	push	r0
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	ef 93       	push	r30
    2284:	ff 93       	push	r31
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	pscI2cInterruptHandler(&gPscI2c);
    228e:	8b e2       	ldi	r24, 0x2B	; 43
    2290:	92 e2       	ldi	r25, 0x22	; 34
    2292:	0e 94 b0 11 	call	0x2360	; 0x2360 <pscI2cInterruptHandler>
}
    2296:	00 00       	nop
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	ff 91       	pop	r31
    229e:	ef 91       	pop	r30
    22a0:	bf 91       	pop	r27
    22a2:	af 91       	pop	r26
    22a4:	9f 91       	pop	r25
    22a6:	8f 91       	pop	r24
    22a8:	7f 91       	pop	r23
    22aa:	6f 91       	pop	r22
    22ac:	5f 91       	pop	r21
    22ae:	4f 91       	pop	r20
    22b0:	3f 91       	pop	r19
    22b2:	2f 91       	pop	r18
    22b4:	0f 90       	pop	r0
    22b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22ba:	0f 90       	pop	r0
    22bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <pscI2cInitialiseDriver>:




void pscI2cInitialiseDriver(PscI2c_t *ppscI2c)
{
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	1f 92       	push	r1
    22cc:	1f 92       	push	r1
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	9a 83       	std	Y+2, r25	; 0x02
	ppscI2c->cCountOfRxBytes = 0;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	87 53       	subi	r24, 0x37	; 55
    22dc:	9f 4f       	sbci	r25, 0xFF	; 255
    22de:	fc 01       	movw	r30, r24
    22e0:	10 82       	st	Z, r1
	ppscI2c->cCountOfBytesCollectedByPsc = 0;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	86 53       	subi	r24, 0x36	; 54
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	fc 01       	movw	r30, r24
    22ec:	10 82       	st	Z, r1
	ppscI2c->cStatus = PscI2cReady;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	82 53       	subi	r24, 0x32	; 50
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	fc 01       	movw	r30, r24
    22f8:	10 82       	st	Z, r1
	ppscI2c->cResult = PscI2cResultUnknown;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	81 53       	subi	r24, 0x31	; 49
    2300:	9f 4f       	sbci	r25, 0xFF	; 255
    2302:	fc 01       	movw	r30, r24
    2304:	10 82       	st	Z, r1
	ppscI2c->bAbort = false;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	85 53       	subi	r24, 0x35	; 53
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	fc 01       	movw	r30, r24
    2310:	10 82       	st	Z, r1
	ppscI2c->bCommandPendingProcessing = false;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	fc 01       	movw	r30, r24
    2318:	10 82       	st	Z, r1
}
    231a:	00 00       	nop
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	08 95       	ret

00002326 <pscI2cInitialiseModule>:


void pscI2cInitialiseModule(PscI2c_t *ppscI2c,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	00 d0       	rcall	.+0      	; 0x232c <pscI2cInitialiseModule+0x6>
    232c:	1f 92       	push	r1
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	6b 83       	std	Y+3, r22	; 0x03
    2338:	4c 83       	std	Y+4, r20	; 0x04
	TWIC.SLAVE.CTRLA = intLevel |
    233a:	80 e8       	ldi	r24, 0x80	; 128
    233c:	94 e0       	ldi	r25, 0x04	; 4
    233e:	2c 81       	ldd	r18, Y+4	; 0x04
    2340:	2c 63       	ori	r18, 0x3C	; 60
    2342:	fc 01       	movw	r30, r24
    2344:	20 87       	std	Z+8, r18	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
											TWI_SLAVE_PIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	TWIC.SLAVE.ADDR = (address<<1);
    2346:	80 e8       	ldi	r24, 0x80	; 128
    2348:	94 e0       	ldi	r25, 0x04	; 4
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	22 0f       	add	r18, r18
    234e:	fc 01       	movw	r30, r24
    2350:	23 87       	std	Z+11, r18	; 0x0b
}
    2352:	00 00       	nop
    2354:	24 96       	adiw	r28, 0x04	; 4
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

00002360 <pscI2cInterruptHandler>:


void pscI2cInterruptHandler(PscI2c_t *ppscI2c)
{
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	00 d0       	rcall	.+0      	; 0x2366 <pscI2cInterruptHandler+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t i2cStatus = TWIC.SLAVE.STATUS;
    236e:	80 e8       	ldi	r24, 0x80	; 128
    2370:	94 e0       	ldi	r25, 0x04	; 4
    2372:	fc 01       	movw	r30, r24
    2374:	82 85       	ldd	r24, Z+10	; 0x0a
    2376:	89 83       	std	Y+1, r24	; 0x01

	if(i2cStatus & TWI_SLAVE_BUSERR_bm) 
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	84 70       	andi	r24, 0x04	; 4
    2380:	99 27       	eor	r25, r25
    2382:	89 2b       	or	r24, r25
    2384:	d1 f0       	breq	.+52     	; 0x23ba <pscI2cInterruptHandler+0x5a>
	{	/* bus error */
		ppscI2c->cCountOfRxBytes = 0;
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	87 53       	subi	r24, 0x37	; 55
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	fc 01       	movw	r30, r24
    2390:	10 82       	st	Z, r1
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	86 53       	subi	r24, 0x36	; 54
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	fc 01       	movw	r30, r24
    239c:	10 82       	st	Z, r1
		ppscI2c->cResult = PscI2cResultBusError;
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	9b 81       	ldd	r25, Y+3	; 0x03
    23a2:	81 53       	subi	r24, 0x31	; 49
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	24 e0       	ldi	r18, 0x04	; 4
    23a8:	fc 01       	movw	r30, r24
    23aa:	20 83       	st	Z, r18
		ppscI2c->cStatus = PscI2cReady;
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	82 53       	subi	r24, 0x32	; 50
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	fc 01       	movw	r30, r24
    23b6:	10 82       	st	Z, r1
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    23b8:	4d c0       	rjmp	.+154    	; 0x2454 <pscI2cInterruptHandler+0xf4>
		ppscI2c->cCountOfRxBytes = 0;
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
		ppscI2c->cResult = PscI2cResultBusError;
		ppscI2c->cStatus = PscI2cReady;
	}
	else if(i2cStatus & TWI_SLAVE_COLL_bm) 
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	88 70       	andi	r24, 0x08	; 8
    23c2:	99 27       	eor	r25, r25
    23c4:	89 2b       	or	r24, r25
    23c6:	d1 f0       	breq	.+52     	; 0x23fc <pscI2cInterruptHandler+0x9c>
	{	/* transmit collision */
		ppscI2c->cCountOfRxBytes = 0;
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	87 53       	subi	r24, 0x37	; 55
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	fc 01       	movw	r30, r24
    23d2:	10 82       	st	Z, r1
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	9b 81       	ldd	r25, Y+3	; 0x03
    23d8:	86 53       	subi	r24, 0x36	; 54
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	fc 01       	movw	r30, r24
    23de:	10 82       	st	Z, r1
		ppscI2c->cResult = PscI2cResultTransmitCollision;
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	9b 81       	ldd	r25, Y+3	; 0x03
    23e4:	81 53       	subi	r24, 0x31	; 49
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	23 e0       	ldi	r18, 0x03	; 3
    23ea:	fc 01       	movw	r30, r24
    23ec:	20 83       	st	Z, r18
		ppscI2c->cStatus = PscI2cReady;
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	82 53       	subi	r24, 0x32	; 50
    23f4:	9f 4f       	sbci	r25, 0xFF	; 255
    23f6:	fc 01       	movw	r30, r24
    23f8:	10 82       	st	Z, r1
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    23fa:	2c c0       	rjmp	.+88     	; 0x2454 <pscI2cInterruptHandler+0xf4>
		ppscI2c->cCountOfRxBytes = 0;
		ppscI2c->cCountOfBytesCollectedByPsc = 0;
		ppscI2c->cResult = PscI2cResultTransmitCollision;
		ppscI2c->cStatus = PscI2cReady;
	}
	else if((i2cStatus & TWI_SLAVE_APIF_bm) && (i2cStatus & TWI_SLAVE_AP_bm)) 
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	80 74       	andi	r24, 0x40	; 64
    2404:	99 27       	eor	r25, r25
    2406:	89 2b       	or	r24, r25
    2408:	61 f0       	breq	.+24     	; 0x2422 <pscI2cInterruptHandler+0xc2>
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	99 27       	eor	r25, r25
    2414:	89 2b       	or	r24, r25
    2416:	29 f0       	breq	.+10     	; 0x2422 <pscI2cInterruptHandler+0xc2>
	{	/* address match */
		pscI2cAddressMatchHandler(ppscI2c);
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	0e 94 31 12 	call	0x2462	; 0x2462 <pscI2cAddressMatchHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2420:	19 c0       	rjmp	.+50     	; 0x2454 <pscI2cInterruptHandler+0xf4>
	}
	else if((i2cStatus & TWI_SLAVE_APIF_bm) && (i2cStatus & TWI_SLAVE_AP_bm)) 
	{	/* address match */
		pscI2cAddressMatchHandler(ppscI2c);
	}
	else if(i2cStatus & TWI_SLAVE_APIF_bm) 
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	80 74       	andi	r24, 0x40	; 64
    242a:	99 27       	eor	r25, r25
    242c:	89 2b       	or	r24, r25
    242e:	29 f0       	breq	.+10     	; 0x243a <pscI2cInterruptHandler+0xda>
	{	/* stop (only enabled through slave read transaction) */
		pscI2cStopHandler(ppscI2c);
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	9b 81       	ldd	r25, Y+3	; 0x03
    2434:	0e 94 af 12 	call	0x255e	; 0x255e <pscI2cStopHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <pscI2cInterruptHandler+0xf4>
	}
	else if(i2cStatus & TWI_SLAVE_APIF_bm) 
	{	/* stop (only enabled through slave read transaction) */
		pscI2cStopHandler(ppscI2c);
	}
	else if(i2cStatus & TWI_SLAVE_DIF_bm) 
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <pscI2cInterruptHandler+0xea>
	{	/* data interrupt */
		pscI2cDataHandler(ppscI2c);
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <pscI2cDataHandler>
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
	}
}
    2448:	05 c0       	rjmp	.+10     	; 0x2454 <pscI2cInterruptHandler+0xf4>
	{	/* data interrupt */
		pscI2cDataHandler(ppscI2c);
	}
	else 
	{	/* unexpected state */
		pscI2cTransactionFinished(ppscI2c, PscI2cResultFail);
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	65 e0       	ldi	r22, 0x05	; 5
    2450:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
	}
}
    2454:	00 00       	nop
    2456:	23 96       	adiw	r28, 0x03	; 3
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	08 95       	ret

00002462 <pscI2cAddressMatchHandler>:
 *  Prepares TWI module for transaction upon address match
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cAddressMatchHandler(PscI2c_t *ppscI2c)
{
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	00 d0       	rcall	.+0      	; 0x2468 <pscI2cAddressMatchHandler+0x6>
    2468:	1f 92       	push	r1
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	8b 83       	std	Y+3, r24	; 0x03
    2470:	9c 83       	std	Y+4, r25	; 0x04
	bool bOK;
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    2472:	80 e8       	ldi	r24, 0x80	; 128
    2474:	94 e0       	ldi	r25, 0x04	; 4
    2476:	fc 01       	movw	r30, r24
    2478:	82 85       	ldd	r24, Z+10	; 0x0a
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	82 70       	andi	r24, 0x02	; 2
    2480:	99 27       	eor	r25, r25
    2482:	21 e0       	ldi	r18, 0x01	; 1
    2484:	89 2b       	or	r24, r25
    2486:	09 f4       	brne	.+2      	; 0x248a <pscI2cAddressMatchHandler+0x28>
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	2a 83       	std	Y+2, r18	; 0x02
	
	
	/* If application signalling need to abort (error occured). */
	if(ppscI2c->bAbort) 
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	85 53       	subi	r24, 0x35	; 53
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	fc 01       	movw	r30, r24
    2496:	80 81       	ld	r24, Z
    2498:	88 23       	and	r24, r24
    249a:	89 f0       	breq	.+34     	; 0x24be <pscI2cAddressMatchHandler+0x5c>
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    249c:	80 e8       	ldi	r24, 0x80	; 128
    249e:	94 e0       	ldi	r25, 0x04	; 4
    24a0:	22 e0       	ldi	r18, 0x02	; 2
    24a2:	fc 01       	movw	r30, r24
    24a4:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	66 e0       	ldi	r22, 0x06	; 6
    24ac:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
		ppscI2c->bAbort = false;
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	85 53       	subi	r24, 0x35	; 53
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	fc 01       	movw	r30, r24
    24ba:	10 82       	st	Z, r1
    24bc:	39 c0       	rjmp	.+114    	; 0x2530 <pscI2cAddressMatchHandler+0xce>
	} 
	else 
	{
		bOK = true;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	89 83       	std	Y+1, r24	; 0x01
		if(bRead)
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	88 23       	and	r24, r24
    24c6:	39 f4       	brne	.+14     	; 0x24d6 <pscI2cAddressMatchHandler+0x74>
		{}
		else
		{	/* PSC trying to write data */
			if(ppscI2c->bCommandPendingProcessing)
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	fc 01       	movw	r30, r24
    24ce:	80 81       	ld	r24, Z
    24d0:	88 23       	and	r24, r24
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <pscI2cAddressMatchHandler+0x74>
			{	/* Buffer is already in use */
				/* HMI not able to accept data from the PSC at this time */
				/* Terminate the transfer */
				bOK = false;
    24d4:	19 82       	std	Y+1, r1	; 0x01
			{	/* buffer is free */
				/* OK to continue with transfer */
			}
		}

		if(bOK)
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	88 23       	and	r24, r24
    24da:	f9 f0       	breq	.+62     	; 0x251a <pscI2cAddressMatchHandler+0xb8>
		{
			ppscI2c->cStatus = PscI2cBusy;
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	82 53       	subi	r24, 0x32	; 50
    24e2:	9f 4f       	sbci	r25, 0xFF	; 255
    24e4:	21 e0       	ldi	r18, 0x01	; 1
    24e6:	fc 01       	movw	r30, r24
    24e8:	20 83       	st	Z, r18
			ppscI2c->cResult = PscI2cResultUnknown;
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	81 53       	subi	r24, 0x31	; 49
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	fc 01       	movw	r30, r24
    24f4:	10 82       	st	Z, r1

			ppscI2c->cCountOfRxBytes = 0;
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	87 53       	subi	r24, 0x37	; 55
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	fc 01       	movw	r30, r24
    2500:	10 82       	st	Z, r1
			ppscI2c->cCountOfBytesCollectedByPsc = 0;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	86 53       	subi	r24, 0x36	; 54
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	fc 01       	movw	r30, r24
    250c:	10 82       	st	Z, r1

			/* Send ACK, wait for data interrupt. */
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    250e:	80 e8       	ldi	r24, 0x80	; 128
    2510:	94 e0       	ldi	r25, 0x04	; 4
    2512:	23 e0       	ldi	r18, 0x03	; 3
    2514:	fc 01       	movw	r30, r24
    2516:	21 87       	std	Z+9, r18	; 0x09
    2518:	0b c0       	rjmp	.+22     	; 0x2530 <pscI2cAddressMatchHandler+0xce>
		}
		else
		{	
			/* Send Nack */
			/* Terminate the transfer */
			TWIC.SLAVE.CTRLB = (/*TWI_SLAVE_ACKACT_bm | */TWI_SLAVE_CMD_COMPTRANS_gc);
    251a:	80 e8       	ldi	r24, 0x80	; 128
    251c:	94 e0       	ldi	r25, 0x04	; 4
    251e:	22 e0       	ldi	r18, 0x02	; 2
    2520:	fc 01       	movw	r30, r24
    2522:	21 87       	std	Z+9, r18	; 0x09
			ppscI2c->cStatus = PscI2cReady;
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	82 53       	subi	r24, 0x32	; 50
    252a:	9f 4f       	sbci	r25, 0xFF	; 255
    252c:	fc 01       	movw	r30, r24
    252e:	10 82       	st	Z, r1
		}
	}
	
	gMarkLastI2cActivity = gdwSecondsAlive;
    2530:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    2534:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    2538:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    253c:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    2540:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <gMarkLastI2cActivity>
    2544:	90 93 28 22 	sts	0x2228, r25	; 0x802228 <gMarkLastI2cActivity+0x1>
    2548:	a0 93 29 22 	sts	0x2229, r26	; 0x802229 <gMarkLastI2cActivity+0x2>
    254c:	b0 93 2a 22 	sts	0x222A, r27	; 0x80222a <gMarkLastI2cActivity+0x3>
}
    2550:	00 00       	nop
    2552:	24 96       	adiw	r28, 0x04	; 4
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <pscI2cStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cStopHandler(PscI2c_t *ppscI2c)
{
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	00 d0       	rcall	.+0      	; 0x2564 <pscI2cStopHandler+0x6>
    2564:	1f 92       	push	r1
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	9c 83       	std	Y+4, r25	; 0x04
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    256e:	80 e8       	ldi	r24, 0x80	; 128
    2570:	94 e0       	ldi	r25, 0x04	; 4
    2572:	fc 01       	movw	r30, r24
    2574:	82 85       	ldd	r24, Z+10	; 0x0a
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	82 70       	andi	r24, 0x02	; 2
    257c:	99 27       	eor	r25, r25
    257e:	21 e0       	ldi	r18, 0x01	; 1
    2580:	89 2b       	or	r24, r25
    2582:	09 f4       	brne	.+2      	; 0x2586 <pscI2cStopHandler+0x28>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	29 83       	std	Y+1, r18	; 0x01
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t i2cStatus = TWIC.SLAVE.STATUS;
    2588:	80 e8       	ldi	r24, 0x80	; 128
    258a:	94 e0       	ldi	r25, 0x04	; 4
    258c:	fc 01       	movw	r30, r24
    258e:	82 85       	ldd	r24, Z+10	; 0x0a
    2590:	8a 83       	std	Y+2, r24	; 0x02
	TWIC.SLAVE.STATUS = i2cStatus | TWI_SLAVE_APIF_bm;
    2592:	80 e8       	ldi	r24, 0x80	; 128
    2594:	94 e0       	ldi	r25, 0x04	; 4
    2596:	2a 81       	ldd	r18, Y+2	; 0x02
    2598:	20 64       	ori	r18, 0x40	; 64
    259a:	fc 01       	movw	r30, r24
    259c:	22 87       	std	Z+10, r18	; 0x0a

	pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
	
	if(bRead)
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	88 23       	and	r24, r24
    25ac:	69 f4       	brne	.+26     	; 0x25c8 <pscI2cStopHandler+0x6a>
	{
		
	}
	else
	{	/* PSC writing bytes to the HMI */
		if(ppscI2c->cCountOfRxBytes > 0)
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	87 53       	subi	r24, 0x37	; 55
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	fc 01       	movw	r30, r24
    25b8:	80 81       	ld	r24, Z
    25ba:	88 23       	and	r24, r24
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <pscI2cStopHandler+0x6a>
		{	/* PSC has successfully sent some bytes */
			/* Does it amount to a complete command ?
				no way to check without a CRC */
			ppscI2c->bCommandPendingProcessing = true;
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	21 e0       	ldi	r18, 0x01	; 1
    25c4:	fc 01       	movw	r30, r24
    25c6:	20 83       	st	Z, r18
		}
	}
}
    25c8:	00 00       	nop
    25ca:	24 96       	adiw	r28, 0x04	; 4
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	08 95       	ret

000025d6 <pscI2cDataHandler>:
 *  Calls the appropriate slave read or write handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cDataHandler(PscI2c_t *ppscI2c)
{
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	00 d0       	rcall	.+0      	; 0x25dc <pscI2cDataHandler+0x6>
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	9b 83       	std	Y+3, r25	; 0x03
	bool bRead = ((TWIC.SLAVE.STATUS & TWI_SLAVE_DIR_bm) != 0);
    25e4:	80 e8       	ldi	r24, 0x80	; 128
    25e6:	94 e0       	ldi	r25, 0x04	; 4
    25e8:	fc 01       	movw	r30, r24
    25ea:	82 85       	ldd	r24, Z+10	; 0x0a
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	82 70       	andi	r24, 0x02	; 2
    25f2:	99 27       	eor	r25, r25
    25f4:	21 e0       	ldi	r18, 0x01	; 1
    25f6:	89 2b       	or	r24, r25
    25f8:	09 f4       	brne	.+2      	; 0x25fc <pscI2cDataHandler+0x26>
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	29 83       	std	Y+1, r18	; 0x01
	
	if(bRead)
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	88 23       	and	r24, r24
    2602:	29 f0       	breq	.+10     	; 0x260e <pscI2cDataHandler+0x38>
	{	/* PSC I2C master is reading data from the HMI */
		pscI2cReadHandler(ppscI2c);
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	0e 94 7e 13 	call	0x26fc	; 0x26fc <pscI2cReadHandler>
	} 
	else 
	{	/* PSC I2C master is writing data to the HMI */
		pscI2cWriteHandler(ppscI2c);
	}
}
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <pscI2cDataHandler+0x40>
	{	/* PSC I2C master is reading data from the HMI */
		pscI2cReadHandler(ppscI2c);
	} 
	else 
	{	/* PSC I2C master is writing data to the HMI */
		pscI2cWriteHandler(ppscI2c);
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	9b 81       	ldd	r25, Y+3	; 0x03
    2612:	0e 94 12 13 	call	0x2624	; 0x2624 <pscI2cWriteHandler>
	}
}
    2616:	00 00       	nop
    2618:	23 96       	adiw	r28, 0x03	; 3
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <pscI2cWriteHandler>:
/*! \brief PSC I2C slave read interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cWriteHandler(PscI2c_t *ppscI2c)
{
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	00 d0       	rcall	.+0      	; 0x262a <pscI2cWriteHandler+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	8a 83       	std	Y+2, r24	; 0x02
    2630:	9b 83       	std	Y+3, r25	; 0x03
	/* Enable stop interrupt. */
	///uint8_t currentCtrlA = TWIC.SLAVE.CTRLA;
	///TWIC.SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;


	if(ppscI2c->cCountOfRxBytes < PscI2cRxBufferSize) 
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	87 53       	subi	r24, 0x37	; 55
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	fc 01       	movw	r30, r24
    263c:	80 81       	ld	r24, Z
    263e:	84 36       	cpi	r24, 0x64	; 100
    2640:	08 f0       	brcs	.+2      	; 0x2644 <pscI2cWriteHandler+0x20>
    2642:	42 c0       	rjmp	.+132    	; 0x26c8 <pscI2cWriteHandler+0xa4>
	{	/* Space in buffer for another byte */
		data = TWIC.SLAVE.DATA;
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	94 e0       	ldi	r25, 0x04	; 4
    2648:	fc 01       	movw	r30, r24
    264a:	84 85       	ldd	r24, Z+12	; 0x0c
    264c:	89 83       	std	Y+1, r24	; 0x01
		ppscI2c->cRxData[ppscI2c->cCountOfRxBytes] = data;
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	9b 81       	ldd	r25, Y+3	; 0x03
    2652:	87 53       	subi	r24, 0x37	; 55
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	fc 01       	movw	r30, r24
    2658:	80 81       	ld	r24, Z
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	2a 81       	ldd	r18, Y+2	; 0x02
    2660:	3b 81       	ldd	r19, Y+3	; 0x03
    2662:	82 0f       	add	r24, r18
    2664:	93 1f       	adc	r25, r19
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	29 81       	ldd	r18, Y+1	; 0x01
    266a:	fc 01       	movw	r30, r24
    266c:	20 83       	st	Z, r18

		ppscI2c->cCountOfRxBytes++;
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	9b 81       	ldd	r25, Y+3	; 0x03
    2672:	87 53       	subi	r24, 0x37	; 55
    2674:	9f 4f       	sbci	r25, 0xFF	; 255
    2676:	fc 01       	movw	r30, r24
    2678:	80 81       	ld	r24, Z
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	28 0f       	add	r18, r24
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	87 53       	subi	r24, 0x37	; 55
    2684:	9f 4f       	sbci	r25, 0xFF	; 255
    2686:	fc 01       	movw	r30, r24
    2688:	20 83       	st	Z, r18

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if(ppscI2c->bAbort) 
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	85 53       	subi	r24, 0x35	; 53
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	fc 01       	movw	r30, r24
    2694:	80 81       	ld	r24, Z
    2696:	88 23       	and	r24, r24
    2698:	89 f0       	breq	.+34     	; 0x26bc <pscI2cWriteHandler+0x98>
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    269a:	80 e8       	ldi	r24, 0x80	; 128
    269c:	94 e0       	ldi	r25, 0x04	; 4
    269e:	22 e0       	ldi	r18, 0x02	; 2
    26a0:	fc 01       	movw	r30, r24
    26a2:	21 87       	std	Z+9, r18	; 0x09
			pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	66 e0       	ldi	r22, 0x06	; 6
    26aa:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
			ppscI2c->bAbort = false;
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	85 53       	subi	r24, 0x35	; 53
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	fc 01       	movw	r30, r24
    26b8:	10 82       	st	Z, r1
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
	}
}
    26ba:	10 c0       	rjmp	.+32     	; 0x26dc <pscI2cWriteHandler+0xb8>
			pscI2cTransactionFinished(ppscI2c, PscI2cResultAborted);
			ppscI2c->bAbort = false;
		} 
		else 
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    26bc:	80 e8       	ldi	r24, 0x80	; 128
    26be:	94 e0       	ldi	r25, 0x04	; 4
    26c0:	23 e0       	ldi	r18, 0x03	; 3
    26c2:	fc 01       	movw	r30, r24
    26c4:	21 87       	std	Z+9, r18	; 0x09
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
	}
}
    26c6:	0a c0       	rjmp	.+20     	; 0x26dc <pscI2cWriteHandler+0xb8>
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else 
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_COMPTRANS_gc;
    26c8:	80 e8       	ldi	r24, 0x80	; 128
    26ca:	94 e0       	ldi	r25, 0x04	; 4
    26cc:	26 e0       	ldi	r18, 0x06	; 6
    26ce:	fc 01       	movw	r30, r24
    26d0:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	9b 81       	ldd	r25, Y+3	; 0x03
    26d6:	62 e0       	ldi	r22, 0x02	; 2
    26d8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
	}
}
    26dc:	00 00       	nop
    26de:	23 96       	adiw	r28, 0x03	; 3
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <pscI2cGetTxBuffer>:

uint8_t* pscI2cGetTxBuffer(void)
{
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
	return(gPscI2c.cDataForPscToCollect);
    26f2:	80 e9       	ldi	r24, 0x90	; 144
    26f4:	92 e2       	ldi	r25, 0x22	; 34
}
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <pscI2cReadHandler>:
/*! \brief PSC I2C slave write interrupt handler.
 *
 *  \param ppscI2c The PscI2c_t struct instance.
 */
void pscI2cReadHandler(PscI2c_t *ppscI2c)
{
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	00 d0       	rcall	.+0      	; 0x2702 <pscI2cReadHandler+0x6>
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	8a 83       	std	Y+2, r24	; 0x02
    2708:	9b 83       	std	Y+3, r25	; 0x03
	/* If NACK, slave write transaction finished. */
	if((ppscI2c->cCountOfBytesCollectedByPsc > 0) && (TWIC.SLAVE.STATUS & TWI_SLAVE_RXACK_bm)) 
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	86 53       	subi	r24, 0x36	; 54
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	fc 01       	movw	r30, r24
    2714:	80 81       	ld	r24, Z
    2716:	88 23       	and	r24, r24
    2718:	a9 f0       	breq	.+42     	; 0x2744 <pscI2cReadHandler+0x48>
    271a:	80 e8       	ldi	r24, 0x80	; 128
    271c:	94 e0       	ldi	r25, 0x04	; 4
    271e:	fc 01       	movw	r30, r24
    2720:	82 85       	ldd	r24, Z+10	; 0x0a
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	80 71       	andi	r24, 0x10	; 16
    2728:	99 27       	eor	r25, r25
    272a:	89 2b       	or	r24, r25
    272c:	59 f0       	breq	.+22     	; 0x2744 <pscI2cReadHandler+0x48>
	{
		TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    272e:	80 e8       	ldi	r24, 0x80	; 128
    2730:	94 e0       	ldi	r25, 0x04	; 4
    2732:	22 e0       	ldi	r18, 0x02	; 2
    2734:	fc 01       	movw	r30, r24
    2736:	21 87       	std	Z+9, r18	; 0x09
		pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
		}
	}
}
    2742:	3c c0       	rjmp	.+120    	; 0x27bc <pscI2cReadHandler+0xc0>
		pscI2cTransactionFinished(ppscI2c, PscI2cResultOk);
	}
	/* If ACK, master expects more data. */
	else 
	{
		if(ppscI2c->cCountOfBytesCollectedByPsc < PscI2cTxBufferSize) 
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	86 53       	subi	r24, 0x36	; 54
    274a:	9f 4f       	sbci	r25, 0xFF	; 255
    274c:	fc 01       	movw	r30, r24
    274e:	80 81       	ld	r24, Z
    2750:	84 36       	cpi	r24, 0x64	; 100
    2752:	50 f5       	brcc	.+84     	; 0x27a8 <pscI2cReadHandler+0xac>
		{
			uint8_t data = ppscI2c->cDataForPscToCollect[ppscI2c->cCountOfBytesCollectedByPsc];
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	9b 81       	ldd	r25, Y+3	; 0x03
    2758:	86 53       	subi	r24, 0x36	; 54
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	fc 01       	movw	r30, r24
    275e:	80 81       	ld	r24, Z
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	2a 81       	ldd	r18, Y+2	; 0x02
    2766:	3b 81       	ldd	r19, Y+3	; 0x03
    2768:	82 0f       	add	r24, r18
    276a:	93 1f       	adc	r25, r19
    276c:	8b 59       	subi	r24, 0x9B	; 155
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	fc 01       	movw	r30, r24
    2772:	80 81       	ld	r24, Z
    2774:	89 83       	std	Y+1, r24	; 0x01
			TWIC.SLAVE.DATA = data;
    2776:	80 e8       	ldi	r24, 0x80	; 128
    2778:	94 e0       	ldi	r25, 0x04	; 4
    277a:	29 81       	ldd	r18, Y+1	; 0x01
    277c:	fc 01       	movw	r30, r24
    277e:	24 87       	std	Z+12, r18	; 0x0c
			ppscI2c->cCountOfBytesCollectedByPsc++;
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	86 53       	subi	r24, 0x36	; 54
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	fc 01       	movw	r30, r24
    278a:	80 81       	ld	r24, Z
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	28 0f       	add	r18, r24
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	86 53       	subi	r24, 0x36	; 54
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	fc 01       	movw	r30, r24
    279a:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    279c:	80 e8       	ldi	r24, 0x80	; 128
    279e:	94 e0       	ldi	r25, 0x04	; 4
    27a0:	23 e0       	ldi	r18, 0x03	; 3
    27a2:	fc 01       	movw	r30, r24
    27a4:	21 87       	std	Z+9, r18	; 0x09
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
		}
	}
}
    27a6:	0a c0       	rjmp	.+20     	; 0x27bc <pscI2cReadHandler+0xc0>
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
		}
		/* If buffer overflow. */
		else 
		{
			TWIC.SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    27a8:	80 e8       	ldi	r24, 0x80	; 128
    27aa:	94 e0       	ldi	r25, 0x04	; 4
    27ac:	22 e0       	ldi	r18, 0x02	; 2
    27ae:	fc 01       	movw	r30, r24
    27b0:	21 87       	std	Z+9, r18	; 0x09
			pscI2cTransactionFinished(ppscI2c, PscI2cResultBufferOverflow);
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	9b 81       	ldd	r25, Y+3	; 0x03
    27b6:	62 e0       	ldi	r22, 0x02	; 2
    27b8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <pscI2cTransactionFinished>
		}
	}
}
    27bc:	00 00       	nop
    27be:	23 96       	adiw	r28, 0x03	; 3
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	08 95       	ret

000027ca <pscI2cTransactionFinished>:
 *
 *  \param ppscI2c    The PscI2c_t struct instance.
 *  \param result The result of the transaction.
 */
void pscI2cTransactionFinished(PscI2c_t *ppscI2c, uint8_t result)
{
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <pscI2cTransactionFinished+0x6>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	6b 83       	std	Y+3, r22	; 0x03
	ppscI2c->cResult = result;
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	81 53       	subi	r24, 0x31	; 49
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	2b 81       	ldd	r18, Y+3	; 0x03
    27e4:	fc 01       	movw	r30, r24
    27e6:	20 83       	st	Z, r18
	ppscI2c->cStatus = PscI2cReady;
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	82 53       	subi	r24, 0x32	; 50
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	fc 01       	movw	r30, r24
    27f2:	10 82       	st	Z, r1
}
    27f4:	00 00       	nop
    27f6:	23 96       	adiw	r28, 0x03	; 3
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret

00002802 <mainTimerInit>:

/** Initialise the main timer which is used for general timing.
	\return Nothing
*/   
void mainTimerInit(void)
{
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
		Assume CPU clock is 8 MHz
		Target is 1000 interrupts per second (every 1 ms)
		8 MHz / 256 = 31250 Hz
	to work from CPUCLK/64, with period 10000 and
	 */
	TCC0.PER = 800;
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	98 e0       	ldi	r25, 0x08	; 8
    280e:	20 e2       	ldi	r18, 0x20	; 32
    2810:	33 e0       	ldi	r19, 0x03	; 3
    2812:	fc 01       	movw	r30, r24
    2814:	26 a3       	std	Z+38, r18	; 0x26
    2816:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	98 e0       	ldi	r25, 0x08	; 8
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	38 e0       	ldi	r19, 0x08	; 8
    2820:	f9 01       	movw	r30, r18
    2822:	20 81       	ld	r18, Z
    2824:	20 7f       	andi	r18, 0xF0	; 240
    2826:	21 60       	ori	r18, 0x01	; 1
    2828:	fc 01       	movw	r30, r24
    282a:	20 83       	st	Z, r18
	
	/* Enable overflow interrupt */
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_LO_gc;
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	98 e0       	ldi	r25, 0x08	; 8
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	38 e0       	ldi	r19, 0x08	; 8
    2834:	f9 01       	movw	r30, r18
    2836:	26 81       	ldd	r18, Z+6	; 0x06
    2838:	2c 7f       	andi	r18, 0xFC	; 252
    283a:	21 60       	ori	r18, 0x01	; 1
    283c:	fc 01       	movw	r30, r24
    283e:	26 83       	std	Z+6, r18	; 0x06

}
    2840:	00 00       	nop
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <__vector_14>:

/** Interrupt handler for the main timer which is used for general timing
	\return Nothing
*/   
ISR(TCC0_OVF_vect)
{	/* Interrupt every 1ms */
    2848:	1f 92       	push	r1
    284a:	0f 92       	push	r0
    284c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2850:	0f 92       	push	r0
    2852:	11 24       	eor	r1, r1
    2854:	8f 93       	push	r24
    2856:	9f 93       	push	r25
    2858:	af 93       	push	r26
    285a:	bf 93       	push	r27
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62

	/* Increment a count of ms that can be used elsewhere */
	gdw_LocalmsTimeCount++;	/* Wraps every ~50 days */
    2864:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <gdw_LocalmsTimeCount>
    2868:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <gdw_LocalmsTimeCount+0x1>
    286c:	a0 91 05 23 	lds	r26, 0x2305	; 0x802305 <gdw_LocalmsTimeCount+0x2>
    2870:	b0 91 06 23 	lds	r27, 0x2306	; 0x802306 <gdw_LocalmsTimeCount+0x3>
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	a1 1d       	adc	r26, r1
    2878:	b1 1d       	adc	r27, r1
    287a:	80 93 03 23 	sts	0x2303, r24	; 0x802303 <gdw_LocalmsTimeCount>
    287e:	90 93 04 23 	sts	0x2304, r25	; 0x802304 <gdw_LocalmsTimeCount+0x1>
    2882:	a0 93 05 23 	sts	0x2305, r26	; 0x802305 <gdw_LocalmsTimeCount+0x2>
    2886:	b0 93 06 23 	sts	0x2306, r27	; 0x802306 <gdw_LocalmsTimeCount+0x3>

	if(++gc10msCount >= 10)
    288a:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <gc10msCount>
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <gc10msCount>
    2894:	8a 30       	cpi	r24, 0x0A	; 10
    2896:	98 f1       	brcs	.+102    	; 0x28fe <__vector_14+0xb6>
	{	/* Another 10ms */
		gc10msCount = 0;
    2898:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <gc10msCount>

		/* Counter wraps every 2.56s */
		/* This is READ-ONLY from the main loop */
		gc10msTick++;	/* This is a simple counter to allow the main loop to use small time increments */
    289c:	80 91 09 23 	lds	r24, 0x2309	; 0x802309 <gc10msTick>
    28a0:	8f 5f       	subi	r24, 0xFF	; 255
    28a2:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <gc10msTick>

		if(++gc100msCount >= gcTenthSecond_PartCount)
    28a6:	80 91 07 23 	lds	r24, 0x2307	; 0x802307 <gc100msCount>
    28aa:	8f 5f       	subi	r24, 0xFF	; 255
    28ac:	80 93 07 23 	sts	0x2307, r24	; 0x802307 <gc100msCount>
    28b0:	9a e0       	ldi	r25, 0x0A	; 10
    28b2:	89 17       	cp	r24, r25
    28b4:	a8 f0       	brcs	.+42     	; 0x28e0 <__vector_14+0x98>
		{	/* Another 100ms. Counter wraps every 25.6s */
			gc100msCount = 0;
    28b6:	10 92 07 23 	sts	0x2307, r1	; 0x802307 <gc100msCount>
			gc100msTick++;	/* This is a simple counter to allow the main loop to use small time increments
    28ba:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	80 93 fe 22 	sts	0x22FE, r24	; 0x8022fe <gc100msTick>
									This is READ-ONLY from the main loop */


			if(++gc1sCount >= 10)
    28c4:	80 91 00 23 	lds	r24, 0x2300	; 0x802300 <gc1sCount>
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	80 93 00 23 	sts	0x2300, r24	; 0x802300 <gc1sCount>
    28ce:	8a 30       	cpi	r24, 0x0A	; 10
    28d0:	38 f0       	brcs	.+14     	; 0x28e0 <__vector_14+0x98>
			{	/* Another 1000ms = 1s */
				gc1sCount = 0;
    28d2:	10 92 00 23 	sts	0x2300, r1	; 0x802300 <gc1sCount>
				gc1sTick++;	/* This is a simple counter to allow the main loop to use small time increments
    28d6:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <gc1sTick>
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <gc1sTick>
									This is READ-ONLY from the main loop */
			}
		}

		if(++gcSubSecondCnt >= gcQuarterSecond_PartCount)
    28e0:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <gcSubSecondCnt>
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <gcSubSecondCnt>
    28ea:	99 e1       	ldi	r25, 0x19	; 25
    28ec:	89 17       	cp	r24, r25
    28ee:	38 f0       	brcs	.+14     	; 0x28fe <__vector_14+0xb6>
		{	/* Another quarter second */
			gcSubSecondCnt = 0;
    28f0:	10 92 fd 22 	sts	0x22FD, r1	; 0x8022fd <gcSubSecondCnt>
			gc250msTick++;	/* This is a simple counter to allow the main loop to use small time increments
    28f4:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <gc250msTick>
    28f8:	8f 5f       	subi	r24, 0xFF	; 255
    28fa:	80 93 fc 22 	sts	0x22FC, r24	; 0x8022fc <gc250msTick>
									This is READ-ONLY from the main loop */
		}

	}

}
    28fe:	00 00       	nop
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	bf 91       	pop	r27
    2906:	af 91       	pop	r26
    2908:	9f 91       	pop	r25
    290a:	8f 91       	pop	r24
    290c:	0f 90       	pop	r0
    290e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2912:	0f 90       	pop	r0
    2914:	1f 90       	pop	r1
    2916:	18 95       	reti

00002918 <mainTimerService>:
/** Manage general timing events.
	This is called once from the main loop and manages slower timing that can be handled outside of the interrupt.
	\return Nothing
*/   
void mainTimerService(void)
{
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	00 d0       	rcall	.+0      	; 0x291e <mainTimerService+0x6>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <mainTimerService+0x8>
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
	bool bAnother_100ms;
	bool bAnother_250ms;
	uint32_t dwTemp;

	bAnother_100ms = false;
    2924:	1e 82       	std	Y+6, r1	; 0x06
	bAnother_250ms = false;
    2926:	19 82       	std	Y+1, r1	; 0x01

	/* some rather weird looking code in here is most likely due to trying to avoid clashes with the interrupt 
		eg avoiding writing to variables that the interrupt also writes to */
	if(gcLastTimeHere_100ms != gc100msTick)
    2928:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <gcLastTimeHere_100ms>
    292c:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <gc100msTick>
    2930:	98 17       	cp	r25, r24
    2932:	39 f0       	breq	.+14     	; 0x2942 <mainTimerService+0x2a>
	{	/* At least 100ms since last check */
		gcLastTimeHere_100ms++;	/* Catch up */
    2934:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <gcLastTimeHere_100ms>
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <gcLastTimeHere_100ms>
		bAnother_100ms = true;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	8e 83       	std	Y+6, r24	; 0x06
	}

	if(gcLastTimeHere_250ms != gc250msTick)
    2942:	90 91 01 23 	lds	r25, 0x2301	; 0x802301 <gcLastTimeHere_250ms>
    2946:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <gc250msTick>
    294a:	98 17       	cp	r25, r24
    294c:	39 f0       	breq	.+14     	; 0x295c <mainTimerService+0x44>
	{	/* At least 250ms since last check */
		gcLastTimeHere_250ms++;	/* Catch up */
    294e:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <gcLastTimeHere_250ms>
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	80 93 01 23 	sts	0x2301, r24	; 0x802301 <gcLastTimeHere_250ms>
		bAnother_250ms = true;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	89 83       	std	Y+1, r24	; 0x01
	}

	/* gdw_msTimeCount Wraps every ~50 days */
	/* read repeatedly until 2 reads the same, to ensure int does not change it in middle of it being copied here */
	dwTemp = 0;
    295c:	1a 82       	std	Y+2, r1	; 0x02
    295e:	1b 82       	std	Y+3, r1	; 0x03
    2960:	1c 82       	std	Y+4, r1	; 0x04
    2962:	1d 82       	std	Y+5, r1	; 0x05
	do
	{
		gdw_msTimeCount = dwTemp;			/* Copy temp to destination */
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	ac 81       	ldd	r26, Y+4	; 0x04
    296a:	bd 81       	ldd	r27, Y+5	; 0x05
    296c:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <gdw_msTimeCount>
    2970:	90 93 11 23 	sts	0x2311, r25	; 0x802311 <gdw_msTimeCount+0x1>
    2974:	a0 93 12 23 	sts	0x2312, r26	; 0x802312 <gdw_msTimeCount+0x2>
    2978:	b0 93 13 23 	sts	0x2313, r27	; 0x802313 <gdw_msTimeCount+0x3>
		dwTemp = gdw_LocalmsTimeCount;	/* Update temp from the src */
    297c:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <gdw_LocalmsTimeCount>
    2980:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <gdw_LocalmsTimeCount+0x1>
    2984:	a0 91 05 23 	lds	r26, 0x2305	; 0x802305 <gdw_LocalmsTimeCount+0x2>
    2988:	b0 91 06 23 	lds	r27, 0x2306	; 0x802306 <gdw_LocalmsTimeCount+0x3>
    298c:	8a 83       	std	Y+2, r24	; 0x02
    298e:	9b 83       	std	Y+3, r25	; 0x03
    2990:	ac 83       	std	Y+4, r26	; 0x04
    2992:	bd 83       	std	Y+5, r27	; 0x05
	} while(gdw_msTimeCount != dwTemp);	/* check the src has not changed since setting the destination */
    2994:	20 91 10 23 	lds	r18, 0x2310	; 0x802310 <gdw_msTimeCount>
    2998:	30 91 11 23 	lds	r19, 0x2311	; 0x802311 <gdw_msTimeCount+0x1>
    299c:	40 91 12 23 	lds	r20, 0x2312	; 0x802312 <gdw_msTimeCount+0x2>
    29a0:	50 91 13 23 	lds	r21, 0x2313	; 0x802313 <gdw_msTimeCount+0x3>
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	ac 81       	ldd	r26, Y+4	; 0x04
    29aa:	bd 81       	ldd	r27, Y+5	; 0x05
    29ac:	28 17       	cp	r18, r24
    29ae:	39 07       	cpc	r19, r25
    29b0:	4a 07       	cpc	r20, r26
    29b2:	5b 07       	cpc	r21, r27
    29b4:	b9 f6       	brne	.-82     	; 0x2964 <mainTimerService+0x4c>
	if(bAnother_100ms)
	{	/* Another 100 ms */
	}


	if(bAnother_250ms)
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	88 23       	and	r24, r24
    29ba:	09 f4       	brne	.+2      	; 0x29be <mainTimerService+0xa6>
    29bc:	40 c0       	rjmp	.+128    	; 0x2a3e <mainTimerService+0x126>
	{	/* Another quarter second */
		if(++gcSecondTimer >= 4)
    29be:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <gcSecondTimer>
    29c2:	8f 5f       	subi	r24, 0xFF	; 255
    29c4:	80 93 08 23 	sts	0x2308, r24	; 0x802308 <gcSecondTimer>
    29c8:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <gcSecondTimer>
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	b8 f1       	brcs	.+110    	; 0x2a3e <mainTimerService+0x126>
		{	/* Another second */
			gcSecondTimer = 0;
    29d0:	10 92 08 23 	sts	0x2308, r1	; 0x802308 <gcSecondTimer>

			/* Track how many seconds the controller has been up for. 32-bit. Can track 136 years */
			gdwSecondsAlive++;
    29d4:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    29d8:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    29dc:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    29e0:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	a1 1d       	adc	r26, r1
    29e8:	b1 1d       	adc	r27, r1
    29ea:	80 93 0a 23 	sts	0x230A, r24	; 0x80230a <gdwSecondsAlive>
    29ee:	90 93 0b 23 	sts	0x230B, r25	; 0x80230b <gdwSecondsAlive+0x1>
    29f2:	a0 93 0c 23 	sts	0x230C, r26	; 0x80230c <gdwSecondsAlive+0x2>
    29f6:	b0 93 0d 23 	sts	0x230D, r27	; 0x80230d <gdwSecondsAlive+0x3>
			
			pscSetSecondsAlive(gdwSecondsAlive);
    29fa:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    29fe:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    2a02:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    2a06:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <pscSetSecondsAlive>


			gcTwoSecondTimer++;
    2a12:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <gcTwoSecondTimer>
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <gcTwoSecondTimer>
			if(gcTwoSecondTimer >= 2)
    2a1c:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <gcTwoSecondTimer>
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	10 f0       	brcs	.+4      	; 0x2a28 <mainTimerService+0x110>
			{
				/* Another two-seconds */
				gcTwoSecondTimer = 0;
    2a24:	10 92 0e 23 	sts	0x230E, r1	; 0x80230e <gcTwoSecondTimer>
			}

			if(++gcMinuteTimer >= 60)
    2a28:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <gcMinuteTimer>
    2a2c:	8f 5f       	subi	r24, 0xFF	; 255
    2a2e:	80 93 02 23 	sts	0x2302, r24	; 0x802302 <gcMinuteTimer>
    2a32:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <gcMinuteTimer>
    2a36:	8c 33       	cpi	r24, 0x3C	; 60
    2a38:	10 f0       	brcs	.+4      	; 0x2a3e <mainTimerService+0x126>
			{
				/* Another minute */
				gcMinuteTimer = 0;
    2a3a:	10 92 02 23 	sts	0x2302, r1	; 0x802302 <gcMinuteTimer>
			}

		}	/* Another second */

	}
}
    2a3e:	00 00       	nop
    2a40:	26 96       	adiw	r28, 0x06	; 6
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	08 95       	ret

00002a4c <quadInit>:

/** Initialise the quadrature decoder
	\return Nothing
*/
void quadInit(void)
{
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    2a54:	80 e8       	ldi	r24, 0x80	; 128
    2a56:	96 e0       	ldi	r25, 0x06	; 6
    2a58:	28 e1       	ldi	r18, 0x18	; 24
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	25 8b       	std	Z+21, r18	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;	/* configured to pull-up on input */
    2a5e:	80 e8       	ldi	r24, 0x80	; 128
    2a60:	96 e0       	ldi	r25, 0x06	; 6
    2a62:	28 e1       	ldi	r18, 0x18	; 24
    2a64:	fc 01       	movw	r30, r24
    2a66:	26 8b       	std	Z+22, r18	; 0x16
}
    2a68:	00 00       	nop
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	08 95       	ret

00002a70 <rstInit>:

/** Initialise the reset object, read the reason for the reset
	\return Nothing
*/   
void rstInit(void)
{
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	gLastReasonForReset = RST.STATUS;
    2a78:	88 e7       	ldi	r24, 0x78	; 120
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	80 81       	ld	r24, Z
    2a80:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <gLastReasonForReset>
	
	/* Clear all reset flags */
	RST.STATUS = 0x3F;
    2a84:	88 e7       	ldi	r24, 0x78	; 120
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	2f e3       	ldi	r18, 0x3F	; 63
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	20 83       	st	Z, r18
}
    2a8e:	00 00       	nop
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret

00002a96 <rstGetLastReasonForReset>:

uint8_t rstGetLastReasonForReset(void)
{
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
	return(gLastReasonForReset);
    2a9e:	80 91 14 23 	lds	r24, 0x2314	; 0x802314 <gLastReasonForReset>
}
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <spiInit>:
uint8_t gTemp;

/* static function prototypes */

void spiInit(void)
{
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	/* Configure GPIO for SPI pins */
	PORTC.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm;          /* MOSI, SCK, SS outputs; MISO input */
    2ab0:	80 e4       	ldi	r24, 0x40	; 64
    2ab2:	96 e0       	ldi	r25, 0x06	; 6
    2ab4:	20 eb       	ldi	r18, 0xB0	; 176
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET = PIN4_bm;       /* de-assert CS pin (active low) */
    2aba:	80 e4       	ldi	r24, 0x40	; 64
    2abc:	96 e0       	ldi	r25, 0x06	; 6
    2abe:	20 e1       	ldi	r18, 0x10	; 16
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	25 83       	std	Z+5, r18	; 0x05
	
	/* Configure SPI, Master, Mode 0, 512 kHz clock */
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
    2ac4:	80 ec       	ldi	r24, 0xC0	; 192
    2ac6:	98 e0       	ldi	r25, 0x08	; 8
    2ac8:	21 e5       	ldi	r18, 0x51	; 81
    2aca:	fc 01       	movw	r30, r24
    2acc:	20 83       	st	Z, r18
	
	/* Flush master receive buffer */
	while(SPIC.STATUS & 0x80)
    2ace:	06 c0       	rjmp	.+12     	; 0x2adc <spiInit+0x34>
	{
		gTemp = SPIC.DATA;
    2ad0:	80 ec       	ldi	r24, 0xC0	; 192
    2ad2:	98 e0       	ldi	r25, 0x08	; 8
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	83 81       	ldd	r24, Z+3	; 0x03
    2ad8:	80 93 15 23 	sts	0x2315, r24	; 0x802315 <gTemp>
	
	/* Configure SPI, Master, Mode 0, 512 kHz clock */
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
	
	/* Flush master receive buffer */
	while(SPIC.STATUS & 0x80)
    2adc:	80 ec       	ldi	r24, 0xC0	; 192
    2ade:	98 e0       	ldi	r25, 0x08	; 8
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	88 23       	and	r24, r24
    2ae6:	a4 f3       	brlt	.-24     	; 0x2ad0 <spiInit+0x28>
	{
		gTemp = SPIC.DATA;
	}
}
    2ae8:	00 00       	nop
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	08 95       	ret

00002af0 <adcInit>:
	{
		gAdcChannel = 0;
	}

	adcSetupForNextChannel();
}
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	80 e2       	ldi	r24, 0x20	; 32
    2afe:	96 e0       	ldi	r25, 0x06	; 6
    2b00:	23 e0       	ldi	r18, 0x03	; 3
    2b02:	fc 01       	movw	r30, r24
    2b04:	22 83       	std	Z+2, r18	; 0x02
    2b06:	00 e0       	ldi	r16, 0x00	; 0
    2b08:	12 e0       	ldi	r17, 0x02	; 2
    2b0a:	80 e2       	ldi	r24, 0x20	; 32
    2b0c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <adcReadCalibrationByte>
    2b10:	f8 01       	movw	r30, r16
    2b12:	84 87       	std	Z+12, r24	; 0x0c
    2b14:	00 e0       	ldi	r16, 0x00	; 0
    2b16:	12 e0       	ldi	r17, 0x02	; 2
    2b18:	81 e2       	ldi	r24, 0x21	; 33
    2b1a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <adcReadCalibrationByte>
    2b1e:	f8 01       	movw	r30, r16
    2b20:	85 87       	std	Z+13, r24	; 0x0d
    2b22:	00 e0       	ldi	r16, 0x00	; 0
    2b24:	12 e0       	ldi	r17, 0x02	; 2
    2b26:	80 e2       	ldi	r24, 0x20	; 32
    2b28:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <adcReadCalibrationByte>
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	84 87       	std	Z+12, r24	; 0x0c
    2b30:	00 e0       	ldi	r16, 0x00	; 0
    2b32:	12 e0       	ldi	r17, 0x02	; 2
    2b34:	81 e2       	ldi	r24, 0x21	; 33
    2b36:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <adcReadCalibrationByte>
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	85 87       	std	Z+13, r24	; 0x0d
    2b3e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <adcSetupForNextChannel>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	92 e0       	ldi	r25, 0x02	; 2
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	32 e0       	ldi	r19, 0x02	; 2
    2b4a:	f9 01       	movw	r30, r18
    2b4c:	20 a1       	ldd	r18, Z+32	; 0x20
    2b4e:	20 68       	ori	r18, 0x80	; 128
    2b50:	fc 01       	movw	r30, r24
    2b52:	20 a3       	std	Z+32, r18	; 0x20
    2b54:	00 00       	nop
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	08 95       	ret

00002b60 <adcReadCalibrationByte>:
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	25 97       	sbiw	r28, 0x05	; 5
    2b6a:	cd bf       	out	0x3d, r28	; 61
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	8a ec       	ldi	r24, 0xCA	; 202
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	22 e0       	ldi	r18, 0x02	; 2
    2b76:	fc 01       	movw	r30, r24
    2b78:	20 83       	st	Z, r18
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	fc 01       	movw	r30, r24
    2b8a:	84 91       	lpm	r24, Z
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	8c 83       	std	Y+4, r24	; 0x04
    2b92:	8a ec       	ldi	r24, 0xCA	; 202
    2b94:	91 e0       	ldi	r25, 0x01	; 1
    2b96:	fc 01       	movw	r30, r24
    2b98:	10 82       	st	Z, r1
    2b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9c:	25 96       	adiw	r28, 0x05	; 5
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	08 95       	ret

00002ba8 <adcSetupForNextChannel>:

static void adcSetupForNextChannel(void)
{
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |       |     PRESCALER[2:0]    |
	//     0       0       0       0       0       0       0       0
	// The ADC runs off of the CPU_per clock, 8MHz
	// Set ADC clock to 63kHz:  CPU_per/128    =>    8MHz/128
	ADCA.PRESCALER = ADC_PRESCALER2_bm | ADC_PRESCALER0_bm;
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	92 e0       	ldi	r25, 0x02	; 2
    2bb4:	25 e0       	ldi	r18, 0x05	; 5
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	24 83       	std	Z+4, r18	; 0x04
	//////////////////////////////////////////////////////////////////////
	//     7       6       5       4       3       2       1       0
	// |   -   |   -   |   -   |   -   |   -   |   -   |   -   | CH0IF |
	//     0       0       0       0       0       0       0       0
	// Ensure the ADC complete flag is cleared (by writing a '1' to it)
	ADCA.INTFLAGS = ADC_CH0IF_bm;
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	92 e0       	ldi	r25, 0x02	; 2
    2bbe:	21 e0       	ldi	r18, 0x01	; 1
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	26 83       	std	Z+6, r18	; 0x06
	// |   -   |      REFSEL[2:0]      |   -   |   -   | BANDGAP | TEMPREF |
	//     0       0       0       0       0       0        0         0
	// Set Vref to the internal 1V0 bandgap
	// Enable the bandgap
	// Enable the temperature sensor
	ADCA.REFCTRL = ADC_BANDGAP_bm | ADC_TEMPREF_bm;
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	23 e0       	ldi	r18, 0x03	; 3
    2bca:	fc 01       	movw	r30, r24
    2bcc:	22 83       	std	Z+2, r18	; 0x02
	//////////////////////////////////////////////////////////////////////

	if(gAdcChannel == gAdcAvccChannel)
    2bce:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gAdcChannel>
    2bd2:	88 23       	and	r24, r24
    2bd4:	51 f4       	brne	.+20     	; 0x2bea <adcSetupForNextChannel+0x42>
		/////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = 0;	/* Internal signal */
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	92 e0       	ldi	r25, 0x02	; 2
    2bda:	fc 01       	movw	r30, r24
    2bdc:	10 a2       	std	Z+32, r1	; 0x20

		ADCA.CH0.MUXCTRL = ADC_CH_MUXINT1_bm;	/* 1/10 Scaled Vcc */
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	92 e0       	ldi	r25, 0x02	; 2
    2be2:	20 e1       	ldi	r18, 0x10	; 16
    2be4:	fc 01       	movw	r30, r24
    2be6:	21 a3       	std	Z+33, r18	; 0x21
    2be8:	2a c0       	rjmp	.+84     	; 0x2c3e <adcSetupForNextChannel+0x96>
	}
	else if(gAdcChannel == gAdcTemperatureChannel)
    2bea:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gAdcChannel>
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	49 f4       	brne	.+18     	; 0x2c04 <adcSetupForNextChannel+0x5c>
		/////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = 0;	/* Internal signal */
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	92 e0       	ldi	r25, 0x02	; 2
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	10 a2       	std	Z+32, r1	; 0x20

		ADCA.CH0.MUXCTRL = 0;	/* Temperature */
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	92 e0       	ldi	r25, 0x02	; 2
    2bfe:	fc 01       	movw	r30, r24
    2c00:	11 a2       	std	Z+33, r1	; 0x21
    2c02:	1d c0       	rjmp	.+58     	; 0x2c3e <adcSetupForNextChannel+0x96>
	}
	else if(gAdcChannel == gHmiSupplyVoltageChannel)
    2c04:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gAdcChannel>
    2c08:	82 30       	cpi	r24, 0x02	; 2
    2c0a:	59 f4       	brne	.+22     	; 0x2c22 <adcSetupForNextChannel+0x7a>
		//////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm;
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	92 e0       	ldi	r25, 0x02	; 2
    2c10:	21 e0       	ldi	r18, 0x01	; 1
    2c12:	fc 01       	movw	r30, r24
    2c14:	20 a3       	std	Z+32, r18	; 0x20

		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS3_bm;		/* ADC8, PB0 */
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	92 e0       	ldi	r25, 0x02	; 2
    2c1a:	20 e4       	ldi	r18, 0x40	; 64
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	21 a3       	std	Z+33, r18	; 0x21
    2c20:	0e c0       	rjmp	.+28     	; 0x2c3e <adcSetupForNextChannel+0x96>
	}
	else if(gAdcChannel == gAmbientLightChannel)
    2c22:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <gAdcChannel>
    2c26:	83 30       	cpi	r24, 0x03	; 3
    2c28:	51 f4       	brne	.+20     	; 0x2c3e <adcSetupForNextChannel+0x96>
		//////////////////////////////////////////////////////////////////////
		//     7        6       5        4        3        2       1       0
		// | START  |   -   |   -   |         GAIN[2:0]        | INPUTMODE[1:0] |
		//     0        0       0        0        0        0       0       0
		// Gain set to 1
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE0_bm;
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	92 e0       	ldi	r25, 0x02	; 2
    2c2e:	21 e0       	ldi	r18, 0x01	; 1
    2c30:	fc 01       	movw	r30, r24
    2c32:	20 a3       	std	Z+32, r18	; 0x20

		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS3_bm | ADC_CH_MUXPOS0_bm;		/* ADC9, PB1 */
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	92 e0       	ldi	r25, 0x02	; 2
    2c38:	28 e4       	ldi	r18, 0x48	; 72
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	21 a3       	std	Z+33, r18	; 0x21
	//ADCA.CTRLA
	//     7       6       5       4       3         2        1        0
	// |   -   |   -   |   -   |   -   |   -   | CH0START | FLUSH | ENABLE |
	//     0       0       0       0       0         0        0        0
	// Enable ADC
	ADCA.CTRLA = ADC_ENABLE_bm;
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	92 e0       	ldi	r25, 0x02	; 2
    2c42:	21 e0       	ldi	r18, 0x01	; 1
    2c44:	fc 01       	movw	r30, r24
    2c46:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////

	gAdcDiscardSamples = 1;	/* Discard the first sample after switching channels */
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	80 93 17 23 	sts	0x2317, r24	; 0x802317 <gAdcDiscardSamples>
}
    2c4e:	00 00       	nop
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	08 95       	ret

00002c56 <beepInit>:
}

static void beepOn(void)
{
	PORTF.DIRSET = BeepPinMask;	/* Set pin as output */
}
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	80 ea       	ldi	r24, 0xA0	; 160
    2c60:	96 e0       	ldi	r25, 0x06	; 6
    2c62:	22 e0       	ldi	r18, 0x02	; 2
    2c64:	fc 01       	movw	r30, r24
    2c66:	26 83       	std	Z+6, r18	; 0x06
    2c68:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <beepOff>
    2c6c:	80 ea       	ldi	r24, 0xA0	; 160
    2c6e:	96 e0       	ldi	r25, 0x06	; 6
    2c70:	fc 01       	movw	r30, r24
    2c72:	11 8a       	std	Z+17, r1	; 0x11
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	9b e0       	ldi	r25, 0x0B	; 11
    2c78:	22 e0       	ldi	r18, 0x02	; 2
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	20 83       	st	Z, r18
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	9b e0       	ldi	r25, 0x0B	; 11
    2c82:	23 e2       	ldi	r18, 0x23	; 35
    2c84:	fc 01       	movw	r30, r24
    2c86:	21 83       	std	Z+1, r18	; 0x01
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	9b e0       	ldi	r25, 0x0B	; 11
    2c8c:	28 ee       	ldi	r18, 0xE8	; 232
    2c8e:	33 e0       	ldi	r19, 0x03	; 3
    2c90:	fc 01       	movw	r30, r24
    2c92:	26 a3       	std	Z+38, r18	; 0x26
    2c94:	37 a3       	std	Z+39, r19	; 0x27
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	9b e0       	ldi	r25, 0x0B	; 11
    2c9a:	24 ef       	ldi	r18, 0xF4	; 244
    2c9c:	31 e0       	ldi	r19, 0x01	; 1
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	22 a7       	std	Z+42, r18	; 0x2a
    2ca2:	33 a7       	std	Z+43, r19	; 0x2b
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	9b e0       	ldi	r25, 0x0B	; 11
    2ca8:	fc 01       	movw	r30, r24
    2caa:	10 a2       	std	Z+32, r1	; 0x20
    2cac:	11 a2       	std	Z+33, r1	; 0x21
    2cae:	00 00       	nop
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <beepOff>:

static void beepOff(void)
{
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = BeepPinMask;	/* Set pin as input */
    2cbe:	80 ea       	ldi	r24, 0xA0	; 160
    2cc0:	96 e0       	ldi	r25, 0x06	; 6
    2cc2:	22 e0       	ldi	r18, 0x02	; 2
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	22 83       	std	Z+2, r18	; 0x02
}
    2cc8:	00 00       	nop
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	08 95       	ret

00002cd0 <CCPWrite>:
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
	uint8_t clkEnabled = OSC.CTRL & oscSel;
	return clkEnabled;
}
    2cd0:	0f 93       	push	r16
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	00 d0       	rcall	.+0      	; 0x2cd8 <CCPWrite+0x8>
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <CCPWrite+0xa>
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	8c 83       	std	Y+4, r24	; 0x04
    2ce0:	9d 83       	std	Y+5, r25	; 0x05
    2ce2:	6e 83       	std	Y+6, r22	; 0x06
    2ce4:	8f e3       	ldi	r24, 0x3F	; 63
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	fc 01       	movw	r30, r24
    2cea:	80 81       	ld	r24, Z
    2cec:	8b 83       	std	Y+3, r24	; 0x03
    2cee:	f8 94       	cli
    2cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	8b e3       	ldi	r24, 0x3B	; 59
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	10 82       	st	Z, r1
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	2e 81       	ldd	r18, Y+6	; 0x06
    2d06:	fc 01       	movw	r30, r24
    2d08:	08 ed       	ldi	r16, 0xD8	; 216
    2d0a:	04 bf       	out	0x34, r16	; 52
    2d0c:	20 83       	st	Z, r18
    2d0e:	8f e3       	ldi	r24, 0x3F	; 63
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	2b 81       	ldd	r18, Y+3	; 0x03
    2d14:	fc 01       	movw	r30, r24
    2d16:	20 83       	st	Z, r18
    2d18:	00 00       	nop
    2d1a:	26 96       	adiw	r28, 0x06	; 6
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	0f 91       	pop	r16
    2d26:	08 95       	ret

00002d28 <CLKSYS_PLL_Config>:
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	1f 92       	push	r1
    2d2e:	1f 92       	push	r1
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	6a 83       	std	Y+2, r22	; 0x02
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	8f 71       	andi	r24, 0x1F	; 31
    2d3c:	8a 83       	std	Y+2, r24	; 0x02
    2d3e:	80 e5       	ldi	r24, 0x50	; 80
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	39 81       	ldd	r19, Y+1	; 0x01
    2d44:	2a 81       	ldd	r18, Y+2	; 0x02
    2d46:	23 2b       	or	r18, r19
    2d48:	fc 01       	movw	r30, r24
    2d4a:	25 83       	std	Z+5, r18	; 0x05
    2d4c:	00 00       	nop
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	08 95       	ret

00002d58 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <CLKSYS_Prescalers_Config+0x6>
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	8a 83       	std	Y+2, r24	; 0x02
    2d64:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	89 2b       	or	r24, r25
    2d6c:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
    2d6e:	69 81       	ldd	r22, Y+1	; 0x01
    2d70:	81 e4       	ldi	r24, 0x41	; 65
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <CCPWrite>
}
    2d78:	00 00       	nop
    2d7a:	23 96       	adiw	r28, 0x03	; 3
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	1f 92       	push	r1
    2d8c:	1f 92       	push	r1
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    2d94:	80 e4       	ldi	r24, 0x40	; 64
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	fc 01       	movw	r30, r24
    2d9a:	80 81       	ld	r24, Z
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	98 7f       	andi	r25, 0xF8	; 248
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	89 2b       	or	r24, r25
    2da4:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
    2da6:	69 81       	ldd	r22, Y+1	; 0x01
    2da8:	80 e4       	ldi	r24, 0x40	; 64
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    2db0:	80 e4       	ldi	r24, 0x40	; 64
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	fc 01       	movw	r30, r24
    2db6:	90 81       	ld	r25, Z
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	89 23       	and	r24, r25
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	08 95       	ret

00002dca <dspSetContrast>:
	
	for (i = 0; i < num_pages; i++)
	{
		dspWritePage(pixelData, page + i, x, width);
	}
}
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	1f 92       	push	r1
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	81 e8       	ldi	r24, 0x81	; 129
    2dd8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2de2:	00 00       	nop
    2de4:	0f 90       	pop	r0
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	08 95       	ret

00002dec <dspInverseDisable>:
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	86 ea       	ldi	r24, 0xA6	; 166
    2df6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2dfa:	00 00       	nop
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	08 95       	ret

00002e02 <dspSetStartLine>:
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	1f 92       	push	r1
    2e08:	1f 92       	push	r1
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	8a 83       	std	Y+2, r24	; 0x02
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	8f 73       	andi	r24, 0x3F	; 63
    2e14:	8a 83       	std	Y+2, r24	; 0x02
    2e16:	80 e4       	ldi	r24, 0x40	; 64
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	99 81       	ldd	r25, Y+1	; 0x01
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	89 2b       	or	r24, r25
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2e28:	00 00       	nop
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	08 95       	ret

00002e34 <dspWriteByteToDisplay>:
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <dspWriteByteToDisplay+0x6>
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	6a 83       	std	Y+2, r22	; 0x02
    2e42:	4b 83       	std	Y+3, r20	; 0x03
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	0e 94 32 17 	call	0x2e64	; 0x2e64 <dspSetPage>
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <dspSetColumn>
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	0e 94 3f 18 	call	0x307e	; 0x307e <dspWriteData>
    2e56:	00 00       	nop
    2e58:	23 96       	adiw	r28, 0x03	; 3
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	08 95       	ret

00002e64 <dspSetPage>:
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	1f 92       	push	r1
    2e6a:	1f 92       	push	r1
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	8a 83       	std	Y+2, r24	; 0x02
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	87 70       	andi	r24, 0x07	; 7
    2e76:	8a 83       	std	Y+2, r24	; 0x02
    2e78:	80 eb       	ldi	r24, 0xB0	; 176
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	99 81       	ldd	r25, Y+1	; 0x01
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	89 2b       	or	r24, r25
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2e8a:	00 00       	nop
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <dspSetColumn>:
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	1f 92       	push	r1
    2e9c:	1f 92       	push	r1
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	8a 83       	std	Y+2, r24	; 0x02
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	8f 77       	andi	r24, 0x7F	; 127
    2ea8:	8a 83       	std	Y+2, r24	; 0x02
    2eaa:	80 e1       	ldi	r24, 0x10	; 16
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	82 95       	swap	r24
    2eb2:	8f 70       	andi	r24, 0x0F	; 15
    2eb4:	99 81       	ldd	r25, Y+1	; 0x01
    2eb6:	89 2b       	or	r24, r25
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2ec0:	19 82       	std	Y+1, r1	; 0x01
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	9f 70       	andi	r25, 0x0F	; 15
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	89 2b       	or	r24, r25
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2ed4:	00 00       	nop
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	08 95       	ret

00002ee0 <dspResetHold>:
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	80 ea       	ldi	r24, 0xA0	; 160
    2eea:	96 e0       	ldi	r25, 0x06	; 6
    2eec:	24 e3       	ldi	r18, 0x34	; 52
    2eee:	fc 01       	movw	r30, r24
    2ef0:	26 83       	std	Z+6, r18	; 0x06
    2ef2:	80 ea       	ldi	r24, 0xA0	; 160
    2ef4:	96 e0       	ldi	r25, 0x06	; 6
    2ef6:	28 ec       	ldi	r18, 0xC8	; 200
    2ef8:	fc 01       	movw	r30, r24
    2efa:	25 83       	std	Z+5, r18	; 0x05
    2efc:	80 ea       	ldi	r24, 0xA0	; 160
    2efe:	96 e0       	ldi	r25, 0x06	; 6
    2f00:	2c ef       	ldi	r18, 0xFC	; 252
    2f02:	fc 01       	movw	r30, r24
    2f04:	21 83       	std	Z+1, r18	; 0x01
    2f06:	00 00       	nop
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	08 95       	ret

00002f0e <dspInit>:
    2f0e:	cf 93       	push	r28
    2f10:	df 93       	push	r29
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	96 e0       	ldi	r25, 0x06	; 6
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	10 8a       	std	Z+16, r1	; 0x10
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	96 e0       	ldi	r25, 0x06	; 6
    2f22:	fc 01       	movw	r30, r24
    2f24:	11 8a       	std	Z+17, r1	; 0x11
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	96 e0       	ldi	r25, 0x06	; 6
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	12 8a       	std	Z+18, r1	; 0x12
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	96 e0       	ldi	r25, 0x06	; 6
    2f32:	fc 01       	movw	r30, r24
    2f34:	13 8a       	std	Z+19, r1	; 0x13
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	96 e0       	ldi	r25, 0x06	; 6
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	14 8a       	std	Z+20, r1	; 0x14
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	96 e0       	ldi	r25, 0x06	; 6
    2f42:	fc 01       	movw	r30, r24
    2f44:	15 8a       	std	Z+21, r1	; 0x15
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	96 e0       	ldi	r25, 0x06	; 6
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	16 8a       	std	Z+22, r1	; 0x16
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	96 e0       	ldi	r25, 0x06	; 6
    2f52:	fc 01       	movw	r30, r24
    2f54:	17 8a       	std	Z+23, r1	; 0x17
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	96 e0       	ldi	r25, 0x06	; 6
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	14 82       	std	Z+4, r1	; 0x04
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	96 e0       	ldi	r25, 0x06	; 6
    2f62:	2f ef       	ldi	r18, 0xFF	; 255
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 83       	st	Z, r18
    2f68:	80 ea       	ldi	r24, 0xA0	; 160
    2f6a:	96 e0       	ldi	r25, 0x06	; 6
    2f6c:	24 e2       	ldi	r18, 0x24	; 36
    2f6e:	fc 01       	movw	r30, r24
    2f70:	26 83       	std	Z+6, r18	; 0x06
    2f72:	80 ea       	ldi	r24, 0xA0	; 160
    2f74:	96 e0       	ldi	r25, 0x06	; 6
    2f76:	28 ed       	ldi	r18, 0xD8	; 216
    2f78:	fc 01       	movw	r30, r24
    2f7a:	25 83       	std	Z+5, r18	; 0x05
    2f7c:	80 ea       	ldi	r24, 0xA0	; 160
    2f7e:	96 e0       	ldi	r25, 0x06	; 6
    2f80:	2c ef       	ldi	r18, 0xFC	; 252
    2f82:	fc 01       	movw	r30, r24
    2f84:	21 83       	std	Z+1, r18	; 0x01
    2f86:	80 ea       	ldi	r24, 0xA0	; 160
    2f88:	96 e0       	ldi	r25, 0x06	; 6
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	12 8a       	std	Z+18, r1	; 0x12
    2f8e:	80 ea       	ldi	r24, 0xA0	; 160
    2f90:	96 e0       	ldi	r25, 0x06	; 6
    2f92:	fc 01       	movw	r30, r24
    2f94:	13 8a       	std	Z+19, r1	; 0x13
    2f96:	80 ea       	ldi	r24, 0xA0	; 160
    2f98:	96 e0       	ldi	r25, 0x06	; 6
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	14 8a       	std	Z+20, r1	; 0x14
    2f9e:	80 ea       	ldi	r24, 0xA0	; 160
    2fa0:	96 e0       	ldi	r25, 0x06	; 6
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	15 8a       	std	Z+21, r1	; 0x15
    2fa6:	80 ea       	ldi	r24, 0xA0	; 160
    2fa8:	96 e0       	ldi	r25, 0x06	; 6
    2faa:	fc 01       	movw	r30, r24
    2fac:	16 8a       	std	Z+22, r1	; 0x16
    2fae:	80 ea       	ldi	r24, 0xA0	; 160
    2fb0:	96 e0       	ldi	r25, 0x06	; 6
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	17 8a       	std	Z+23, r1	; 0x17
    2fb6:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <initSsd1309>
    2fba:	0e 94 87 18 	call	0x310e	; 0x310e <dspBlackWhiteHalf>
    2fbe:	00 00       	nop
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	08 95       	ret

00002fc6 <initSsd1309>:
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	1f 92       	push	r1
    2fcc:	1f 92       	push	r1
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	88 ea       	ldi	r24, 0xA8	; 168
    2fd4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2fd8:	8f e1       	ldi	r24, 0x1F	; 31
    2fda:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2fde:	83 ed       	ldi	r24, 0xD3	; 211
    2fe0:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2fea:	80 e2       	ldi	r24, 0x20	; 32
    2fec:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2ff6:	80 ea       	ldi	r24, 0xA0	; 160
    2ff8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    2ffc:	80 ec       	ldi	r24, 0xC0	; 192
    2ffe:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    3002:	8a ed       	ldi	r24, 0xDA	; 218
    3004:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    3008:	82 e1       	ldi	r24, 0x12	; 18
    300a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    300e:	8f ef       	ldi	r24, 0xFF	; 255
    3010:	0e 94 e5 16 	call	0x2dca	; 0x2dca <dspSetContrast>
    3014:	85 ed       	ldi	r24, 0xD5	; 213
    3016:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    301a:	80 e8       	ldi	r24, 0x80	; 128
    301c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    3020:	8b ed       	ldi	r24, 0xDB	; 219
    3022:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    3026:	80 e4       	ldi	r24, 0x40	; 64
    3028:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    302c:	89 ed       	ldi	r24, 0xD9	; 217
    302e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    3032:	81 ef       	ldi	r24, 0xF1	; 241
    3034:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    3038:	84 ea       	ldi	r24, 0xA4	; 164
    303a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <dspWriteCommand>
    303e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <dspInverseDisable>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	0e 94 01 17 	call	0x2e02	; 0x2e02 <dspSetStartLine>
    3048:	19 82       	std	Y+1, r1	; 0x01
    304a:	10 c0       	rjmp	.+32     	; 0x306c <initSsd1309+0xa6>
    304c:	1a 82       	std	Y+2, r1	; 0x02
    304e:	08 c0       	rjmp	.+16     	; 0x3060 <initSsd1309+0x9a>
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	6a 81       	ldd	r22, Y+2	; 0x02
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <dspWriteByteToDisplay>
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	8f 5f       	subi	r24, 0xFF	; 255
    305e:	8a 83       	std	Y+2, r24	; 0x02
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	88 23       	and	r24, r24
    3064:	ac f7       	brge	.-22     	; 0x3050 <initSsd1309+0x8a>
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	84 30       	cpi	r24, 0x04	; 4
    3070:	68 f3       	brcs	.-38     	; 0x304c <initSsd1309+0x86>
    3072:	00 00       	nop
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	08 95       	ret

0000307e <dspWriteData>:
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	1f 92       	push	r1
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	80 ea       	ldi	r24, 0xA0	; 160
    308c:	96 e0       	ldi	r25, 0x06	; 6
    308e:	20 e2       	ldi	r18, 0x20	; 32
    3090:	fc 01       	movw	r30, r24
    3092:	25 83       	std	Z+5, r18	; 0x05
    3094:	80 ea       	ldi	r24, 0xA0	; 160
    3096:	96 e0       	ldi	r25, 0x06	; 6
    3098:	28 e4       	ldi	r18, 0x48	; 72
    309a:	fc 01       	movw	r30, r24
    309c:	26 83       	std	Z+6, r18	; 0x06
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	96 e0       	ldi	r25, 0x06	; 6
    30a2:	29 81       	ldd	r18, Y+1	; 0x01
    30a4:	fc 01       	movw	r30, r24
    30a6:	24 83       	std	Z+4, r18	; 0x04
    30a8:	80 ea       	ldi	r24, 0xA0	; 160
    30aa:	96 e0       	ldi	r25, 0x06	; 6
    30ac:	20 e4       	ldi	r18, 0x40	; 64
    30ae:	fc 01       	movw	r30, r24
    30b0:	25 83       	std	Z+5, r18	; 0x05
    30b2:	80 ea       	ldi	r24, 0xA0	; 160
    30b4:	96 e0       	ldi	r25, 0x06	; 6
    30b6:	28 e0       	ldi	r18, 0x08	; 8
    30b8:	fc 01       	movw	r30, r24
    30ba:	25 83       	std	Z+5, r18	; 0x05
    30bc:	00 00       	nop
    30be:	0f 90       	pop	r0
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	08 95       	ret

000030c6 <dspWriteCommand>:
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    30ca:	1f 92       	push	r1
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	80 ea       	ldi	r24, 0xA0	; 160
    30d4:	96 e0       	ldi	r25, 0x06	; 6
    30d6:	20 e2       	ldi	r18, 0x20	; 32
    30d8:	fc 01       	movw	r30, r24
    30da:	26 83       	std	Z+6, r18	; 0x06
    30dc:	80 ea       	ldi	r24, 0xA0	; 160
    30de:	96 e0       	ldi	r25, 0x06	; 6
    30e0:	28 e4       	ldi	r18, 0x48	; 72
    30e2:	fc 01       	movw	r30, r24
    30e4:	26 83       	std	Z+6, r18	; 0x06
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	96 e0       	ldi	r25, 0x06	; 6
    30ea:	29 81       	ldd	r18, Y+1	; 0x01
    30ec:	fc 01       	movw	r30, r24
    30ee:	24 83       	std	Z+4, r18	; 0x04
    30f0:	80 ea       	ldi	r24, 0xA0	; 160
    30f2:	96 e0       	ldi	r25, 0x06	; 6
    30f4:	20 e4       	ldi	r18, 0x40	; 64
    30f6:	fc 01       	movw	r30, r24
    30f8:	25 83       	std	Z+5, r18	; 0x05
    30fa:	80 ea       	ldi	r24, 0xA0	; 160
    30fc:	96 e0       	ldi	r25, 0x06	; 6
    30fe:	28 e0       	ldi	r18, 0x08	; 8
    3100:	fc 01       	movw	r30, r24
    3102:	25 83       	std	Z+5, r18	; 0x05
    3104:	00 00       	nop
    3106:	0f 90       	pop	r0
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	08 95       	ret

0000310e <dspBlackWhiteHalf>:
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	27 97       	sbiw	r28, 0x07	; 7
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	80 e4       	ldi	r24, 0x40	; 64
    311e:	8a 83       	std	Y+2, r24	; 0x02
    3120:	1b 82       	std	Y+3, r1	; 0x03
    3122:	8f ef       	ldi	r24, 0xFF	; 255
    3124:	8c 83       	std	Y+4, r24	; 0x04
    3126:	84 e0       	ldi	r24, 0x04	; 4
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	86 95       	lsr	r24
    312e:	86 95       	lsr	r24
    3130:	86 95       	lsr	r24
    3132:	8e 83       	std	Y+6, r24	; 0x06
    3134:	80 e4       	ldi	r24, 0x40	; 64
    3136:	8f 83       	std	Y+7, r24	; 0x07
    3138:	19 82       	std	Y+1, r1	; 0x01
    313a:	0c c0       	rjmp	.+24     	; 0x3154 <dspBlackWhiteHalf+0x46>
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	89 0f       	add	r24, r25
    3142:	2f 81       	ldd	r18, Y+7	; 0x07
    3144:	4a 81       	ldd	r20, Y+2	; 0x02
    3146:	68 2f       	mov	r22, r24
    3148:	8c 81       	ldd	r24, Y+4	; 0x04
    314a:	0e 94 b5 18 	call	0x316a	; 0x316a <dspWritePage>
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	99 81       	ldd	r25, Y+1	; 0x01
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	98 17       	cp	r25, r24
    315a:	80 f3       	brcs	.-32     	; 0x313c <dspBlackWhiteHalf+0x2e>
    315c:	00 00       	nop
    315e:	27 96       	adiw	r28, 0x07	; 7
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	08 95       	ret

0000316a <dspWritePage>:

static void dspWritePage(uint8_t pixelData, uint8_t page,uint8_t column, uint8_t width)
{
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	00 d0       	rcall	.+0      	; 0x3170 <dspWritePage+0x6>
    3170:	1f 92       	push	r1
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	6a 83       	std	Y+2, r22	; 0x02
    317a:	4b 83       	std	Y+3, r20	; 0x03
    317c:	2c 83       	std	Y+4, r18	; 0x04
	dspSetPage(page);
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	0e 94 32 17 	call	0x2e64	; 0x2e64 <dspSetPage>
	dspSetColumn(column);
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <dspSetColumn>

	do 
	{
		dspWriteData(pixelData);
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	0e 94 3f 18 	call	0x307e	; 0x307e <dspWriteData>
	} while (--width);
    3190:	8c 81       	ldd	r24, Y+4	; 0x04
    3192:	81 50       	subi	r24, 0x01	; 1
    3194:	8c 83       	std	Y+4, r24	; 0x04
    3196:	8c 81       	ldd	r24, Y+4	; 0x04
    3198:	88 23       	and	r24, r24
    319a:	b9 f7       	brne	.-18     	; 0x318a <dspWritePage+0x20>
}
    319c:	00 00       	nop
    319e:	24 96       	adiw	r28, 0x04	; 4
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	df 91       	pop	r29
    31a6:	cf 91       	pop	r28
    31a8:	08 95       	ret

000031aa <esfInit>:
static inline void CS_Flash_Disable(void)		{PORTC.OUTSET = PIN4_bm;	/* de-assert CS pin (active low) */}



void esfInit(void)
{
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
	/* Configure GPIO for external flash write-protect pin */
	PORTD.DIRSET = PIN4_bm;       /* /WP */
    31b2:	80 e6       	ldi	r24, 0x60	; 96
    31b4:	96 e0       	ldi	r25, 0x06	; 6
    31b6:	20 e1       	ldi	r18, 0x10	; 16
    31b8:	fc 01       	movw	r30, r24
    31ba:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = PIN4_bm;			/* de-assert /WP pin (active low) */
    31bc:	80 e6       	ldi	r24, 0x60	; 96
    31be:	96 e0       	ldi	r25, 0x06	; 6
    31c0:	20 e1       	ldi	r18, 0x10	; 16
    31c2:	fc 01       	movw	r30, r24
    31c4:	25 83       	std	Z+5, r18	; 0x05

	/* request erase the first Flash sector before the test starts */
	gCheckForFlashEraseNextSector = true;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	80 93 1a 23 	sts	0x231A, r24	; 0x80231a <gCheckForFlashEraseNextSector>
}
    31cc:	00 00       	nop
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	08 95       	ret

000031d4 <hmiI2cInit>:

/** Initialise the I2C bus for communication with ICs on the HMI internal bus
	\return Nothing
*/   
void hmiI2cInit(void)
{
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
	/* Configuration of I2C peripheral overrides the normal port pin function */
	/* M-SDA */
	/* M-SCL */
	
	
	TWIE.MASTER.CTRLA = 0;
    31dc:	80 ea       	ldi	r24, 0xA0	; 160
    31de:	94 e0       	ldi	r25, 0x04	; 4
    31e0:	fc 01       	movw	r30, r24
    31e2:	11 82       	std	Z+1, r1	; 0x01
	gHmiI2c.pInterface = &TWIE;
    31e4:	80 ea       	ldi	r24, 0xA0	; 160
    31e6:	94 e0       	ldi	r25, 0x04	; 4
    31e8:	80 93 2c 23 	sts	0x232C, r24	; 0x80232c <gHmiI2c>
    31ec:	90 93 2d 23 	sts	0x232D, r25	; 0x80232d <gHmiI2c+0x1>
	TWIE.MASTER.CTRLA = TWI_MASTER_INTLVL_LO_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
    31f0:	80 ea       	ldi	r24, 0xA0	; 160
    31f2:	94 e0       	ldi	r25, 0x04	; 4
    31f4:	28 e7       	ldi	r18, 0x78	; 120
    31f6:	fc 01       	movw	r30, r24
    31f8:	21 83       	std	Z+1, r18	; 0x01
	
	/* Baud-Setting =((gdwCpuFrequency /(2 * desired-baudrate)) - 5) */
	TWIE.MASTER.BAUD = gdwBaudSetting;
    31fa:	20 ea       	ldi	r18, 0xA0	; 160
    31fc:	34 e0       	ldi	r19, 0x04	; 4
    31fe:	83 e2       	ldi	r24, 0x23	; 35
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	a0 e0       	ldi	r26, 0x00	; 0
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	f9 01       	movw	r30, r18
    3208:	85 83       	std	Z+5, r24	; 0x05
	TWIE.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    320a:	80 ea       	ldi	r24, 0xA0	; 160
    320c:	94 e0       	ldi	r25, 0x04	; 4
    320e:	21 e0       	ldi	r18, 0x01	; 1
    3210:	fc 01       	movw	r30, r24
    3212:	24 83       	std	Z+4, r18	; 0x04

	gHmiI2c.cResult = HmiI2cResultUnknown;	/* indicate a transaction is not finished */
    3214:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <gHmiI2c+0xc>
	gHmiI2c.cStatus = HmiI2cReady;
    3218:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <gHmiI2c+0xb>
}
    321c:	00 00       	nop
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	08 95       	ret

00003224 <hmiI2cReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool hmiI2cReady(void)
{
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	25 97       	sbiw	r28, 0x05	; 5
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	de bf       	out	0x3e, r29	; 62
	/* Restart the I2C peripheral if an error appears to be stopping communication */
	if(gMarkLastHmiI2cActivity > gdwSecondsAlive)
    323a:	20 91 39 23 	lds	r18, 0x2339	; 0x802339 <gMarkLastHmiI2cActivity>
    323e:	30 91 3a 23 	lds	r19, 0x233A	; 0x80233a <gMarkLastHmiI2cActivity+0x1>
    3242:	40 91 3b 23 	lds	r20, 0x233B	; 0x80233b <gMarkLastHmiI2cActivity+0x2>
    3246:	50 91 3c 23 	lds	r21, 0x233C	; 0x80233c <gMarkLastHmiI2cActivity+0x3>
    324a:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    324e:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    3252:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    3256:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    325a:	82 17       	cp	r24, r18
    325c:	93 07       	cpc	r25, r19
    325e:	a4 07       	cpc	r26, r20
    3260:	b5 07       	cpc	r27, r21
    3262:	80 f4       	brcc	.+32     	; 0x3284 <hmiI2cReady+0x60>
	{
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
    3264:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    3268:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    326c:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    3270:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    3274:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <gMarkLastHmiI2cActivity>
    3278:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <gMarkLastHmiI2cActivity+0x1>
    327c:	a0 93 3b 23 	sts	0x233B, r26	; 0x80233b <gMarkLastHmiI2cActivity+0x2>
    3280:	b0 93 3c 23 	sts	0x233C, r27	; 0x80233c <gMarkLastHmiI2cActivity+0x3>
	}
	uint32_t dwDiff = gdwSecondsAlive -gMarkLastHmiI2cActivity;
    3284:	20 91 0a 23 	lds	r18, 0x230A	; 0x80230a <gdwSecondsAlive>
    3288:	30 91 0b 23 	lds	r19, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    328c:	40 91 0c 23 	lds	r20, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    3290:	50 91 0d 23 	lds	r21, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    3294:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <gMarkLastHmiI2cActivity>
    3298:	90 91 3a 23 	lds	r25, 0x233A	; 0x80233a <gMarkLastHmiI2cActivity+0x1>
    329c:	a0 91 3b 23 	lds	r26, 0x233B	; 0x80233b <gMarkLastHmiI2cActivity+0x2>
    32a0:	b0 91 3c 23 	lds	r27, 0x233C	; 0x80233c <gMarkLastHmiI2cActivity+0x3>
    32a4:	79 01       	movw	r14, r18
    32a6:	8a 01       	movw	r16, r20
    32a8:	e8 1a       	sub	r14, r24
    32aa:	f9 0a       	sbc	r15, r25
    32ac:	0a 0b       	sbc	r16, r26
    32ae:	1b 0b       	sbc	r17, r27
    32b0:	d8 01       	movw	r26, r16
    32b2:	c7 01       	movw	r24, r14
    32b4:	89 83       	std	Y+1, r24	; 0x01
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	ab 83       	std	Y+3, r26	; 0x03
    32ba:	bc 83       	std	Y+4, r27	; 0x04
	if(dwDiff > 5)
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	9a 81       	ldd	r25, Y+2	; 0x02
    32c0:	ab 81       	ldd	r26, Y+3	; 0x03
    32c2:	bc 81       	ldd	r27, Y+4	; 0x04
    32c4:	06 97       	sbiw	r24, 0x06	; 6
    32c6:	a1 05       	cpc	r26, r1
    32c8:	b1 05       	cpc	r27, r1
    32ca:	90 f0       	brcs	.+36     	; 0x32f0 <hmiI2cReady+0xcc>
	{
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
    32cc:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    32d0:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    32d4:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    32d8:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    32dc:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <gMarkLastHmiI2cActivity>
    32e0:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <gMarkLastHmiI2cActivity+0x1>
    32e4:	a0 93 3b 23 	sts	0x233B, r26	; 0x80233b <gMarkLastHmiI2cActivity+0x2>
    32e8:	b0 93 3c 23 	sts	0x233C, r27	; 0x80233c <gMarkLastHmiI2cActivity+0x3>
		
		hmiI2cInit();
    32ec:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <hmiI2cInit>
	}

	bool twi_status = (gHmiI2c.cStatus == HmiI2cReady);
    32f0:	90 91 37 23 	lds	r25, 0x2337	; 0x802337 <gHmiI2c+0xb>
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	99 23       	and	r25, r25
    32f8:	09 f0       	breq	.+2      	; 0x32fc <hmiI2cReady+0xd8>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	8d 83       	std	Y+5, r24	; 0x05
	return twi_status;
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3300:	25 96       	adiw	r28, 0x05	; 5
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	08 95       	ret

00003314 <hmiI2cWrite>:
 *  \retval 
 */
void hmiI2cWrite(uint8_t cAddress
                     ,uint8_t *pcWriteData
                     ,uint8_t cCountOfBytesToWrite)
{
    3314:	0f 93       	push	r16
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	00 d0       	rcall	.+0      	; 0x331c <hmiI2cWrite+0x8>
    331c:	1f 92       	push	r1
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	6a 83       	std	Y+2, r22	; 0x02
    3326:	7b 83       	std	Y+3, r23	; 0x03
    3328:	4c 83       	std	Y+4, r20	; 0x04
	hmiI2cWriteRead(cAddress, pcWriteData, cCountOfBytesToWrite, 0, 0);
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	9b 81       	ldd	r25, Y+3	; 0x03
    332e:	00 e0       	ldi	r16, 0x00	; 0
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	4c 81       	ldd	r20, Y+4	; 0x04
    3336:	bc 01       	movw	r22, r24
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	0e 94 a7 19 	call	0x334e	; 0x334e <hmiI2cWriteRead>
}
    333e:	00 00       	nop
    3340:	24 96       	adiw	r28, 0x04	; 4
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	0f 91       	pop	r16
    334c:	08 95       	ret

0000334e <hmiI2cWriteRead>:
void hmiI2cWriteRead(uint8_t cAddress,
                         uint8_t *pcWriteData,
                         uint8_t cCountOfBytesToWrite,
								 uint8_t *pcReadBuffer,
                         uint8_t cCountOfBytesToRead)
{
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	27 97       	sbiw	r28, 0x07	; 7
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	6a 83       	std	Y+2, r22	; 0x02
    3364:	7b 83       	std	Y+3, r23	; 0x03
    3366:	4c 83       	std	Y+4, r20	; 0x04
    3368:	2d 83       	std	Y+5, r18	; 0x05
    336a:	3e 83       	std	Y+6, r19	; 0x06
    336c:	0f 83       	std	Y+7, r16	; 0x07
	/*Initiate transaction */
	gHmiI2c.cStatus = HmiI2cBusy;	/* indicate a transaction is in progress */
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <gHmiI2c+0xb>
	gHmiI2c.cResult = HmiI2cResultUnknown;	/* indicate a transaction is not finished */
    3374:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <gHmiI2c+0xc>

	gHmiI2c.cAddress = cAddress;
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	80 93 2e 23 	sts	0x232E, r24	; 0x80232e <gHmiI2c+0x2>

	/* Note the start of the data to be written */
	gHmiI2c.pcWriteData = pcWriteData;
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	9b 81       	ldd	r25, Y+3	; 0x03
    3382:	80 93 2f 23 	sts	0x232F, r24	; 0x80232f <gHmiI2c+0x3>
    3386:	90 93 30 23 	sts	0x2330, r25	; 0x802330 <gHmiI2c+0x4>
	
	gHmiI2c.pcReadBuf = pcReadBuffer;
    338a:	8d 81       	ldd	r24, Y+5	; 0x05
    338c:	9e 81       	ldd	r25, Y+6	; 0x06
    338e:	80 93 31 23 	sts	0x2331, r24	; 0x802331 <gHmiI2c+0x5>
    3392:	90 93 32 23 	sts	0x2332, r25	; 0x802332 <gHmiI2c+0x6>

	gHmiI2c.cCountOfBytesToWrite = cCountOfBytesToWrite;
    3396:	8c 81       	ldd	r24, Y+4	; 0x04
    3398:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <gHmiI2c+0x7>
	gHmiI2c.cCountOfBytesToRead = cCountOfBytesToRead;
    339c:	8f 81       	ldd	r24, Y+7	; 0x07
    339e:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <gHmiI2c+0x8>
	gHmiI2c.cCountOfBytesRead = 0;
    33a2:	10 92 36 23 	sts	0x2336, r1	; 0x802336 <gHmiI2c+0xa>

	if(gHmiI2c.cCountOfBytesToWrite > 0) 
    33a6:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <gHmiI2c+0x7>
    33aa:	88 23       	and	r24, r24
    33ac:	59 f0       	breq	.+22     	; 0x33c4 <hmiI2cWriteRead+0x76>
	{	/* write request */
		/* send the START condition + Address +Write ('R/_W = 0') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressWrite(gHmiI2c.cAddress);
    33ae:	00 91 2c 23 	lds	r16, 0x232C	; 0x80232c <gHmiI2c>
    33b2:	10 91 2d 23 	lds	r17, 0x232D	; 0x80232d <gHmiI2c+0x1>
    33b6:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <gHmiI2c+0x2>
    33ba:	0e 94 00 1b 	call	0x3600	; 0x3600 <i2cFormatSlaveAddressWrite>
    33be:	f8 01       	movw	r30, r16
    33c0:	86 83       	std	Z+6, r24	; 0x06
		/* send the START condition + Address +Read('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
	}
	else
	{}	/* Should never be a request which neither writes nor reads anything */
}
    33c2:	0e c0       	rjmp	.+28     	; 0x33e0 <hmiI2cWriteRead+0x92>
	if(gHmiI2c.cCountOfBytesToWrite > 0) 
	{	/* write request */
		/* send the START condition + Address +Write ('R/_W = 0') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressWrite(gHmiI2c.cAddress);
	}
	else if(gHmiI2c.cCountOfBytesToRead > 0) 
    33c4:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gHmiI2c+0x8>
    33c8:	88 23       	and	r24, r24
    33ca:	51 f0       	breq	.+20     	; 0x33e0 <hmiI2cWriteRead+0x92>
	{	/* read request */
		/* send the START condition + Address +Read('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
    33cc:	00 91 2c 23 	lds	r16, 0x232C	; 0x80232c <gHmiI2c>
    33d0:	10 91 2d 23 	lds	r17, 0x232D	; 0x80232d <gHmiI2c+0x1>
    33d4:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <gHmiI2c+0x2>
    33d8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <i2cFormatSlaveAddressRead>
    33dc:	f8 01       	movw	r30, r16
    33de:	86 83       	std	Z+6, r24	; 0x06
	}
	else
	{}	/* Should never be a request which neither writes nor reads anything */
}
    33e0:	00 00       	nop
    33e2:	27 96       	adiw	r28, 0x07	; 7
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	08 95       	ret

000033f2 <__vector_46>:
 *  Check current status and calls the appropriate handler.
 *
 */
/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    33f2:	1f 92       	push	r1
    33f4:	0f 92       	push	r0
    33f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    33fa:	0f 92       	push	r0
    33fc:	11 24       	eor	r1, r1
    33fe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3402:	0f 92       	push	r0
    3404:	2f 93       	push	r18
    3406:	3f 93       	push	r19
    3408:	4f 93       	push	r20
    340a:	5f 93       	push	r21
    340c:	6f 93       	push	r22
    340e:	7f 93       	push	r23
    3410:	8f 93       	push	r24
    3412:	9f 93       	push	r25
    3414:	af 93       	push	r26
    3416:	bf 93       	push	r27
    3418:	ef 93       	push	r30
    341a:	ff 93       	push	r31
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	1f 92       	push	r1
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = gHmiI2c.pInterface->MASTER.STATUS;
    3426:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    342a:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    342e:	fc 01       	movw	r30, r24
    3430:	84 81       	ldd	r24, Z+4	; 0x04
    3432:	89 83       	std	Y+1, r24	; 0x01
	
	if(currentStatus & (TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm))
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	88 2f       	mov	r24, r24
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	8c 70       	andi	r24, 0x0C	; 12
    343c:	99 27       	eor	r25, r25
    343e:	89 2b       	or	r24, r25
    3440:	19 f0       	breq	.+6      	; 0x3448 <__vector_46+0x56>
	{	/* arbitration lost or bus error */
		hmiI2cArbitrationLostBusErrorHandler();
    3442:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <hmiI2cArbitrationLostBusErrorHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
    3446:	23 c0       	rjmp	.+70     	; 0x348e <__vector_46+0x9c>
	
	if(currentStatus & (TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm))
	{	/* arbitration lost or bus error */
		hmiI2cArbitrationLostBusErrorHandler();
	}
	else if(currentStatus & TWI_MASTER_WIF_bm) 
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	80 74       	andi	r24, 0x40	; 64
    3450:	99 27       	eor	r25, r25
    3452:	89 2b       	or	r24, r25
    3454:	99 f0       	breq	.+38     	; 0x347c <__vector_46+0x8a>
	{	/* write interrupt */
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
    3456:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <gdwSecondsAlive>
    345a:	90 91 0b 23 	lds	r25, 0x230B	; 0x80230b <gdwSecondsAlive+0x1>
    345e:	a0 91 0c 23 	lds	r26, 0x230C	; 0x80230c <gdwSecondsAlive+0x2>
    3462:	b0 91 0d 23 	lds	r27, 0x230D	; 0x80230d <gdwSecondsAlive+0x3>
    3466:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <gMarkLastHmiI2cActivity>
    346a:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <gMarkLastHmiI2cActivity+0x1>
    346e:	a0 93 3b 23 	sts	0x233B, r26	; 0x80233b <gMarkLastHmiI2cActivity+0x2>
    3472:	b0 93 3c 23 	sts	0x233C, r27	; 0x80233c <gMarkLastHmiI2cActivity+0x3>
		
		hmiI2cWriteHandler();
    3476:	0e 94 88 1a 	call	0x3510	; 0x3510 <hmiI2cWriteHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
    347a:	09 c0       	rjmp	.+18     	; 0x348e <__vector_46+0x9c>
	{	/* write interrupt */
		gMarkLastHmiI2cActivity = gdwSecondsAlive;
		
		hmiI2cWriteHandler();
	}	
	else if(currentStatus & TWI_MASTER_RIF_bm) 
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	88 23       	and	r24, r24
    3480:	1c f4       	brge	.+6      	; 0x3488 <__vector_46+0x96>
	{	/* read interrupt */
		hmiI2cReadHandler();
    3482:	0e 94 12 1b 	call	0x3624	; 0x3624 <hmiI2cReadHandler>
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
	}
}
    3486:	03 c0       	rjmp	.+6      	; 0x348e <__vector_46+0x9c>
	{	/* read interrupt */
		hmiI2cReadHandler();
	}
	else 
	{	/* unexpected state */
		hmiI2cTransactionFinished(HmiI2cResultFail);
    3488:	86 e0       	ldi	r24, 0x06	; 6
    348a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <hmiI2cTransactionFinished>
	}
}
    348e:	00 00       	nop
    3490:	0f 90       	pop	r0
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	ff 91       	pop	r31
    3498:	ef 91       	pop	r30
    349a:	bf 91       	pop	r27
    349c:	af 91       	pop	r26
    349e:	9f 91       	pop	r25
    34a0:	8f 91       	pop	r24
    34a2:	7f 91       	pop	r23
    34a4:	6f 91       	pop	r22
    34a6:	5f 91       	pop	r21
    34a8:	4f 91       	pop	r20
    34aa:	3f 91       	pop	r19
    34ac:	2f 91       	pop	r18
    34ae:	0f 90       	pop	r0
    34b0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    34b4:	0f 90       	pop	r0
    34b6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    34ba:	0f 90       	pop	r0
    34bc:	1f 90       	pop	r1
    34be:	18 95       	reti

000034c0 <hmiI2cArbitrationLostBusErrorHandler>:
 *
 *  Handles TWI responses to lost arbitration and bus error.
 *
 */
inline static void hmiI2cArbitrationLostBusErrorHandler(void)
{
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	1f 92       	push	r1
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = gHmiI2c.pInterface->MASTER.STATUS;
    34ca:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    34ce:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    34d2:	fc 01       	movw	r30, r24
    34d4:	84 81       	ldd	r24, Z+4	; 0x04
    34d6:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if(currentStatus & TWI_MASTER_BUSERR_bm) 
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	88 2f       	mov	r24, r24
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	84 70       	andi	r24, 0x04	; 4
    34e0:	99 27       	eor	r25, r25
    34e2:	89 2b       	or	r24, r25
    34e4:	21 f0       	breq	.+8      	; 0x34ee <hmiI2cArbitrationLostBusErrorHandler+0x2e>
	{
		gHmiI2c.cResult = HmiI2cResultBusError;
    34e6:	84 e0       	ldi	r24, 0x04	; 4
    34e8:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <gHmiI2c+0xc>
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <hmiI2cArbitrationLostBusErrorHandler+0x34>
	}
	/* If arbitration lost. */
	else 
	{
		gHmiI2c.cResult = HmiI2cResultArbitrationLost;
    34ee:	83 e0       	ldi	r24, 0x03	; 3
    34f0:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <gHmiI2c+0xc>
	}

	/* Clear interrupt flag. */
	gHmiI2c.pInterface->MASTER.STATUS =(TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm);
    34f4:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    34f8:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    34fc:	2c e0       	ldi	r18, 0x0C	; 12
    34fe:	fc 01       	movw	r30, r24
    3500:	24 83       	std	Z+4, r18	; 0x04

	gHmiI2c.cStatus = HmiI2cReady;
    3502:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <gHmiI2c+0xb>
}
    3506:	00 00       	nop
    3508:	0f 90       	pop	r0
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	08 95       	ret

00003510 <hmiI2cWriteHandler>:
 *
 *  Handles TWI transactions(master write) and responses to(N)ACK.
 *
 */
inline static void hmiI2cWriteHandler(void)
{
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	1f 92       	push	r1
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
	if(gHmiI2c.pInterface->MASTER.STATUS & TWI_MASTER_RXACK_bm) 
    351e:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    3522:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    3526:	fc 01       	movw	r30, r24
    3528:	84 81       	ldd	r24, Z+4	; 0x04
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	80 71       	andi	r24, 0x10	; 16
    3530:	99 27       	eor	r25, r25
    3532:	89 2b       	or	r24, r25
    3534:	69 f0       	breq	.+26     	; 0x3550 <hmiI2cWriteHandler+0x40>
	{	/* NOT acknowledged(NACK) by slave */
		/* cancel the transaction */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3536:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    353a:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    353e:	23 e0       	ldi	r18, 0x03	; 3
    3540:	fc 01       	movw	r30, r24
    3542:	23 83       	std	Z+3, r18	; 0x03
		gHmiI2c.cResult = HmiI2cResultNackReceived;
    3544:	85 e0       	ldi	r24, 0x05	; 5
    3546:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <gHmiI2c+0xc>
		gHmiI2c.cStatus = HmiI2cReady;
    354a:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <gHmiI2c+0xb>
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    354e:	3c c0       	rjmp	.+120    	; 0x35c8 <hmiI2cWriteHandler+0xb8>
		/* cancel the transaction */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		gHmiI2c.cResult = HmiI2cResultNackReceived;
		gHmiI2c.cStatus = HmiI2cReady;
	}
	else if(gHmiI2c.cCountOfBytesToWrite != 0) 
    3550:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <gHmiI2c+0x7>
    3554:	88 23       	and	r24, r24
    3556:	e9 f0       	breq	.+58     	; 0x3592 <hmiI2cWriteHandler+0x82>
	{	/* more data to write */
		/* send next byte */
		gHmiI2c.cCountOfBytesToWrite--;
    3558:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <gHmiI2c+0x7>
    355c:	81 50       	subi	r24, 0x01	; 1
    355e:	80 93 33 23 	sts	0x2333, r24	; 0x802333 <gHmiI2c+0x7>
	
		uint8_t data = *(gHmiI2c.pcWriteData);
    3562:	80 91 2f 23 	lds	r24, 0x232F	; 0x80232f <gHmiI2c+0x3>
    3566:	90 91 30 23 	lds	r25, 0x2330	; 0x802330 <gHmiI2c+0x4>
    356a:	fc 01       	movw	r30, r24
    356c:	80 81       	ld	r24, Z
    356e:	89 83       	std	Y+1, r24	; 0x01
		gHmiI2c.pInterface->MASTER.DATA = data;
    3570:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    3574:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    3578:	29 81       	ldd	r18, Y+1	; 0x01
    357a:	fc 01       	movw	r30, r24
    357c:	27 83       	std	Z+7, r18	; 0x07
		gHmiI2c.pcWriteData++;
    357e:	80 91 2f 23 	lds	r24, 0x232F	; 0x80232f <gHmiI2c+0x3>
    3582:	90 91 30 23 	lds	r25, 0x2330	; 0x802330 <gHmiI2c+0x4>
    3586:	01 96       	adiw	r24, 0x01	; 1
    3588:	80 93 2f 23 	sts	0x232F, r24	; 0x80232f <gHmiI2c+0x3>
    358c:	90 93 30 23 	sts	0x2330, r25	; 0x802330 <gHmiI2c+0x4>
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    3590:	1b c0       	rjmp	.+54     	; 0x35c8 <hmiI2cWriteHandler+0xb8>
	
		uint8_t data = *(gHmiI2c.pcWriteData);
		gHmiI2c.pInterface->MASTER.DATA = data;
		gHmiI2c.pcWriteData++;
	}
	else if(gHmiI2c.cCountOfBytesRead < gHmiI2c.cCountOfBytesToRead) 
    3592:	90 91 36 23 	lds	r25, 0x2336	; 0x802336 <gHmiI2c+0xa>
    3596:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gHmiI2c+0x8>
    359a:	98 17       	cp	r25, r24
    359c:	58 f4       	brcc	.+22     	; 0x35b4 <hmiI2cWriteHandler+0xa4>
	{	/* setup data written, target data to be read */
		/* send repeated START condition + Address + Read ('R/_W = 1') */
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
    359e:	00 91 2c 23 	lds	r16, 0x232C	; 0x80232c <gHmiI2c>
    35a2:	10 91 2d 23 	lds	r17, 0x232D	; 0x80232d <gHmiI2c+0x1>
    35a6:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <gHmiI2c+0x2>
    35aa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <i2cFormatSlaveAddressRead>
    35ae:	f8 01       	movw	r30, r16
    35b0:	86 83       	std	Z+6, r24	; 0x06
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    35b2:	0a c0       	rjmp	.+20     	; 0x35c8 <hmiI2cWriteHandler+0xb8>
		gHmiI2c.pInterface->MASTER.ADDR = i2cFormatSlaveAddressRead(gHmiI2c.cAddress);
	}
	else 
	{	/* transaction finished */
		/* send STOP condition and set RESULT OK. */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    35b4:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    35b8:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    35bc:	23 e0       	ldi	r18, 0x03	; 3
    35be:	fc 01       	movw	r30, r24
    35c0:	23 83       	std	Z+3, r18	; 0x03
		hmiI2cTransactionFinished(HmiI2cResultOK);
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <hmiI2cTransactionFinished>
	}
}
    35c8:	00 00       	nop
    35ca:	0f 90       	pop	r0
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	08 95       	ret

000035d6 <i2cFormatSlaveAddressRead>:

inline static uint8_t i2cFormatSlaveAddressRead(uint8_t cAddress)
{
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	1f 92       	push	r1
    35dc:	1f 92       	push	r1
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t cSlaveAddress = cAddress;
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress <<= 1;	/* shift the slave address into position */
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	88 0f       	add	r24, r24
    35ec:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress |= 0x01;	/* include the READ bit */
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	81 60       	ori	r24, 0x01	; 1
    35f2:	89 83       	std	Y+1, r24	; 0x01

	return cSlaveAddress;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	08 95       	ret

00003600 <i2cFormatSlaveAddressWrite>:

inline static uint8_t i2cFormatSlaveAddressWrite(uint8_t cAddress)
{
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	1f 92       	push	r1
    3606:	1f 92       	push	r1
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t cSlaveAddress = cAddress;
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
	cSlaveAddress <<= 1;	/* shift the slave address into position */
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	88 0f       	add	r24, r24
    3616:	89 83       	std	Y+1, r24	; 0x01

	return cSlaveAddress;
    3618:	89 81       	ldd	r24, Y+1	; 0x01
}
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	08 95       	ret

00003624 <hmiI2cReadHandler>:
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 *
 */
inline static void hmiI2cReadHandler(void)
{
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	1f 92       	push	r1
    362a:	1f 92       	push	r1
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = gHmiI2c.pInterface->MASTER.DATA;
    3630:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    3634:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    3638:	fc 01       	movw	r30, r24
    363a:	87 81       	ldd	r24, Z+7	; 0x07
    363c:	89 83       	std	Y+1, r24	; 0x01
	*(gHmiI2c.pcReadBuf)++ = data;
    363e:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <gHmiI2c+0x5>
    3642:	90 91 32 23 	lds	r25, 0x2332	; 0x802332 <gHmiI2c+0x6>
    3646:	9c 01       	movw	r18, r24
    3648:	2f 5f       	subi	r18, 0xFF	; 255
    364a:	3f 4f       	sbci	r19, 0xFF	; 255
    364c:	20 93 31 23 	sts	0x2331, r18	; 0x802331 <gHmiI2c+0x5>
    3650:	30 93 32 23 	sts	0x2332, r19	; 0x802332 <gHmiI2c+0x6>
    3654:	29 81       	ldd	r18, Y+1	; 0x01
    3656:	fc 01       	movw	r30, r24
    3658:	20 83       	st	Z, r18
	gHmiI2c.cCountOfBytesRead++;
    365a:	80 91 36 23 	lds	r24, 0x2336	; 0x802336 <gHmiI2c+0xa>
    365e:	8f 5f       	subi	r24, 0xFF	; 255
    3660:	80 93 36 23 	sts	0x2336, r24	; 0x802336 <gHmiI2c+0xa>

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t cCountOfBytesToRead = gHmiI2c.cCountOfBytesToRead;
    3664:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <gHmiI2c+0x8>
    3668:	8a 83       	std	Y+2, r24	; 0x02

	
	if(gHmiI2c.cCountOfBytesRead < cCountOfBytesToRead) 
    366a:	90 91 36 23 	lds	r25, 0x2336	; 0x802336 <gHmiI2c+0xa>
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	98 17       	cp	r25, r24
    3672:	40 f4       	brcc	.+16     	; 0x3684 <hmiI2cReadHandler+0x60>
	{	/* more bytes to read */
		/* issue ACK to start next byte read */
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3674:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    3678:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    367c:	22 e0       	ldi	r18, 0x02	; 2
    367e:	fc 01       	movw	r30, r24
    3680:	23 83       	std	Z+3, r18	; 0x03
	{	/* transaction finished */
		/* issue NACK and STOP condition. */
		gHmiI2c.pInterface->MASTER.CTRLC = (TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc);
		hmiI2cTransactionFinished(HmiI2cResultOK);
	}
}
    3682:	0a c0       	rjmp	.+20     	; 0x3698 <hmiI2cReadHandler+0x74>
		gHmiI2c.pInterface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}
	else 
	{	/* transaction finished */
		/* issue NACK and STOP condition. */
		gHmiI2c.pInterface->MASTER.CTRLC = (TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc);
    3684:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <gHmiI2c>
    3688:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <gHmiI2c+0x1>
    368c:	27 e0       	ldi	r18, 0x07	; 7
    368e:	fc 01       	movw	r30, r24
    3690:	23 83       	std	Z+3, r18	; 0x03
		hmiI2cTransactionFinished(HmiI2cResultOK);
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <hmiI2cTransactionFinished>
	}
}
    3698:	00 00       	nop
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	08 95       	ret

000036a4 <hmiI2cTransactionFinished>:
 *
 *  \param twi     The hmiI2c_t struct instance.
 *  \param result  The result of the operation.
 */
static inline void hmiI2cTransactionFinished(uint8_t result)
{
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	1f 92       	push	r1
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	89 83       	std	Y+1, r24	; 0x01
	gHmiI2c.cResult = result;
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <gHmiI2c+0xc>
	gHmiI2c.cStatus = HmiI2cReady;
    36b6:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <gHmiI2c+0xb>
}
    36ba:	00 00       	nop
    36bc:	0f 90       	pop	r0
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	08 95       	ret

000036c4 <__subsf3>:
    36c4:	50 58       	subi	r21, 0x80	; 128

000036c6 <__addsf3>:
    36c6:	bb 27       	eor	r27, r27
    36c8:	aa 27       	eor	r26, r26
    36ca:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__addsf3x>
    36ce:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__fp_round>
    36d2:	0e 94 b6 1c 	call	0x396c	; 0x396c <__fp_pscA>
    36d6:	38 f0       	brcs	.+14     	; 0x36e6 <__addsf3+0x20>
    36d8:	0e 94 bd 1c 	call	0x397a	; 0x397a <__fp_pscB>
    36dc:	20 f0       	brcs	.+8      	; 0x36e6 <__addsf3+0x20>
    36de:	39 f4       	brne	.+14     	; 0x36ee <__addsf3+0x28>
    36e0:	9f 3f       	cpi	r25, 0xFF	; 255
    36e2:	19 f4       	brne	.+6      	; 0x36ea <__addsf3+0x24>
    36e4:	26 f4       	brtc	.+8      	; 0x36ee <__addsf3+0x28>
    36e6:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <__fp_nan>
    36ea:	0e f4       	brtc	.+2      	; 0x36ee <__addsf3+0x28>
    36ec:	e0 95       	com	r30
    36ee:	e7 fb       	bst	r30, 7
    36f0:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__fp_inf>

000036f4 <__addsf3x>:
    36f4:	e9 2f       	mov	r30, r25
    36f6:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__fp_split3>
    36fa:	58 f3       	brcs	.-42     	; 0x36d2 <__addsf3+0xc>
    36fc:	ba 17       	cp	r27, r26
    36fe:	62 07       	cpc	r22, r18
    3700:	73 07       	cpc	r23, r19
    3702:	84 07       	cpc	r24, r20
    3704:	95 07       	cpc	r25, r21
    3706:	20 f0       	brcs	.+8      	; 0x3710 <__addsf3x+0x1c>
    3708:	79 f4       	brne	.+30     	; 0x3728 <__addsf3x+0x34>
    370a:	a6 f5       	brtc	.+104    	; 0x3774 <__addsf3x+0x80>
    370c:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__fp_zero>
    3710:	0e f4       	brtc	.+2      	; 0x3714 <__addsf3x+0x20>
    3712:	e0 95       	com	r30
    3714:	0b 2e       	mov	r0, r27
    3716:	ba 2f       	mov	r27, r26
    3718:	a0 2d       	mov	r26, r0
    371a:	0b 01       	movw	r0, r22
    371c:	b9 01       	movw	r22, r18
    371e:	90 01       	movw	r18, r0
    3720:	0c 01       	movw	r0, r24
    3722:	ca 01       	movw	r24, r20
    3724:	a0 01       	movw	r20, r0
    3726:	11 24       	eor	r1, r1
    3728:	ff 27       	eor	r31, r31
    372a:	59 1b       	sub	r21, r25
    372c:	99 f0       	breq	.+38     	; 0x3754 <__addsf3x+0x60>
    372e:	59 3f       	cpi	r21, 0xF9	; 249
    3730:	50 f4       	brcc	.+20     	; 0x3746 <__addsf3x+0x52>
    3732:	50 3e       	cpi	r21, 0xE0	; 224
    3734:	68 f1       	brcs	.+90     	; 0x3790 <__addsf3x+0x9c>
    3736:	1a 16       	cp	r1, r26
    3738:	f0 40       	sbci	r31, 0x00	; 0
    373a:	a2 2f       	mov	r26, r18
    373c:	23 2f       	mov	r18, r19
    373e:	34 2f       	mov	r19, r20
    3740:	44 27       	eor	r20, r20
    3742:	58 5f       	subi	r21, 0xF8	; 248
    3744:	f3 cf       	rjmp	.-26     	; 0x372c <__addsf3x+0x38>
    3746:	46 95       	lsr	r20
    3748:	37 95       	ror	r19
    374a:	27 95       	ror	r18
    374c:	a7 95       	ror	r26
    374e:	f0 40       	sbci	r31, 0x00	; 0
    3750:	53 95       	inc	r21
    3752:	c9 f7       	brne	.-14     	; 0x3746 <__addsf3x+0x52>
    3754:	7e f4       	brtc	.+30     	; 0x3774 <__addsf3x+0x80>
    3756:	1f 16       	cp	r1, r31
    3758:	ba 0b       	sbc	r27, r26
    375a:	62 0b       	sbc	r22, r18
    375c:	73 0b       	sbc	r23, r19
    375e:	84 0b       	sbc	r24, r20
    3760:	ba f0       	brmi	.+46     	; 0x3790 <__addsf3x+0x9c>
    3762:	91 50       	subi	r25, 0x01	; 1
    3764:	a1 f0       	breq	.+40     	; 0x378e <__addsf3x+0x9a>
    3766:	ff 0f       	add	r31, r31
    3768:	bb 1f       	adc	r27, r27
    376a:	66 1f       	adc	r22, r22
    376c:	77 1f       	adc	r23, r23
    376e:	88 1f       	adc	r24, r24
    3770:	c2 f7       	brpl	.-16     	; 0x3762 <__addsf3x+0x6e>
    3772:	0e c0       	rjmp	.+28     	; 0x3790 <__addsf3x+0x9c>
    3774:	ba 0f       	add	r27, r26
    3776:	62 1f       	adc	r22, r18
    3778:	73 1f       	adc	r23, r19
    377a:	84 1f       	adc	r24, r20
    377c:	48 f4       	brcc	.+18     	; 0x3790 <__addsf3x+0x9c>
    377e:	87 95       	ror	r24
    3780:	77 95       	ror	r23
    3782:	67 95       	ror	r22
    3784:	b7 95       	ror	r27
    3786:	f7 95       	ror	r31
    3788:	9e 3f       	cpi	r25, 0xFE	; 254
    378a:	08 f0       	brcs	.+2      	; 0x378e <__addsf3x+0x9a>
    378c:	b0 cf       	rjmp	.-160    	; 0x36ee <__addsf3+0x28>
    378e:	93 95       	inc	r25
    3790:	88 0f       	add	r24, r24
    3792:	08 f0       	brcs	.+2      	; 0x3796 <__addsf3x+0xa2>
    3794:	99 27       	eor	r25, r25
    3796:	ee 0f       	add	r30, r30
    3798:	97 95       	ror	r25
    379a:	87 95       	ror	r24
    379c:	08 95       	ret

0000379e <__divsf3>:
    379e:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__divsf3x>
    37a2:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__fp_round>
    37a6:	0e 94 bd 1c 	call	0x397a	; 0x397a <__fp_pscB>
    37aa:	58 f0       	brcs	.+22     	; 0x37c2 <__divsf3+0x24>
    37ac:	0e 94 b6 1c 	call	0x396c	; 0x396c <__fp_pscA>
    37b0:	40 f0       	brcs	.+16     	; 0x37c2 <__divsf3+0x24>
    37b2:	29 f4       	brne	.+10     	; 0x37be <__divsf3+0x20>
    37b4:	5f 3f       	cpi	r21, 0xFF	; 255
    37b6:	29 f0       	breq	.+10     	; 0x37c2 <__divsf3+0x24>
    37b8:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__fp_inf>
    37bc:	51 11       	cpse	r21, r1
    37be:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__fp_szero>
    37c2:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <__fp_nan>

000037c6 <__divsf3x>:
    37c6:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__fp_split3>
    37ca:	68 f3       	brcs	.-38     	; 0x37a6 <__divsf3+0x8>

000037cc <__divsf3_pse>:
    37cc:	99 23       	and	r25, r25
    37ce:	b1 f3       	breq	.-20     	; 0x37bc <__divsf3+0x1e>
    37d0:	55 23       	and	r21, r21
    37d2:	91 f3       	breq	.-28     	; 0x37b8 <__divsf3+0x1a>
    37d4:	95 1b       	sub	r25, r21
    37d6:	55 0b       	sbc	r21, r21
    37d8:	bb 27       	eor	r27, r27
    37da:	aa 27       	eor	r26, r26
    37dc:	62 17       	cp	r22, r18
    37de:	73 07       	cpc	r23, r19
    37e0:	84 07       	cpc	r24, r20
    37e2:	38 f0       	brcs	.+14     	; 0x37f2 <__divsf3_pse+0x26>
    37e4:	9f 5f       	subi	r25, 0xFF	; 255
    37e6:	5f 4f       	sbci	r21, 0xFF	; 255
    37e8:	22 0f       	add	r18, r18
    37ea:	33 1f       	adc	r19, r19
    37ec:	44 1f       	adc	r20, r20
    37ee:	aa 1f       	adc	r26, r26
    37f0:	a9 f3       	breq	.-22     	; 0x37dc <__divsf3_pse+0x10>
    37f2:	35 d0       	rcall	.+106    	; 0x385e <__divsf3_pse+0x92>
    37f4:	0e 2e       	mov	r0, r30
    37f6:	3a f0       	brmi	.+14     	; 0x3806 <__divsf3_pse+0x3a>
    37f8:	e0 e8       	ldi	r30, 0x80	; 128
    37fa:	32 d0       	rcall	.+100    	; 0x3860 <__divsf3_pse+0x94>
    37fc:	91 50       	subi	r25, 0x01	; 1
    37fe:	50 40       	sbci	r21, 0x00	; 0
    3800:	e6 95       	lsr	r30
    3802:	00 1c       	adc	r0, r0
    3804:	ca f7       	brpl	.-14     	; 0x37f8 <__divsf3_pse+0x2c>
    3806:	2b d0       	rcall	.+86     	; 0x385e <__divsf3_pse+0x92>
    3808:	fe 2f       	mov	r31, r30
    380a:	29 d0       	rcall	.+82     	; 0x385e <__divsf3_pse+0x92>
    380c:	66 0f       	add	r22, r22
    380e:	77 1f       	adc	r23, r23
    3810:	88 1f       	adc	r24, r24
    3812:	bb 1f       	adc	r27, r27
    3814:	26 17       	cp	r18, r22
    3816:	37 07       	cpc	r19, r23
    3818:	48 07       	cpc	r20, r24
    381a:	ab 07       	cpc	r26, r27
    381c:	b0 e8       	ldi	r27, 0x80	; 128
    381e:	09 f0       	breq	.+2      	; 0x3822 <__divsf3_pse+0x56>
    3820:	bb 0b       	sbc	r27, r27
    3822:	80 2d       	mov	r24, r0
    3824:	bf 01       	movw	r22, r30
    3826:	ff 27       	eor	r31, r31
    3828:	93 58       	subi	r25, 0x83	; 131
    382a:	5f 4f       	sbci	r21, 0xFF	; 255
    382c:	3a f0       	brmi	.+14     	; 0x383c <__divsf3_pse+0x70>
    382e:	9e 3f       	cpi	r25, 0xFE	; 254
    3830:	51 05       	cpc	r21, r1
    3832:	78 f0       	brcs	.+30     	; 0x3852 <__divsf3_pse+0x86>
    3834:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__fp_inf>
    3838:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__fp_szero>
    383c:	5f 3f       	cpi	r21, 0xFF	; 255
    383e:	e4 f3       	brlt	.-8      	; 0x3838 <__divsf3_pse+0x6c>
    3840:	98 3e       	cpi	r25, 0xE8	; 232
    3842:	d4 f3       	brlt	.-12     	; 0x3838 <__divsf3_pse+0x6c>
    3844:	86 95       	lsr	r24
    3846:	77 95       	ror	r23
    3848:	67 95       	ror	r22
    384a:	b7 95       	ror	r27
    384c:	f7 95       	ror	r31
    384e:	9f 5f       	subi	r25, 0xFF	; 255
    3850:	c9 f7       	brne	.-14     	; 0x3844 <__divsf3_pse+0x78>
    3852:	88 0f       	add	r24, r24
    3854:	91 1d       	adc	r25, r1
    3856:	96 95       	lsr	r25
    3858:	87 95       	ror	r24
    385a:	97 f9       	bld	r25, 7
    385c:	08 95       	ret
    385e:	e1 e0       	ldi	r30, 0x01	; 1
    3860:	66 0f       	add	r22, r22
    3862:	77 1f       	adc	r23, r23
    3864:	88 1f       	adc	r24, r24
    3866:	bb 1f       	adc	r27, r27
    3868:	62 17       	cp	r22, r18
    386a:	73 07       	cpc	r23, r19
    386c:	84 07       	cpc	r24, r20
    386e:	ba 07       	cpc	r27, r26
    3870:	20 f0       	brcs	.+8      	; 0x387a <__divsf3_pse+0xae>
    3872:	62 1b       	sub	r22, r18
    3874:	73 0b       	sbc	r23, r19
    3876:	84 0b       	sbc	r24, r20
    3878:	ba 0b       	sbc	r27, r26
    387a:	ee 1f       	adc	r30, r30
    387c:	88 f7       	brcc	.-30     	; 0x3860 <__divsf3_pse+0x94>
    387e:	e0 95       	com	r30
    3880:	08 95       	ret

00003882 <__fixunssfsi>:
    3882:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__fp_splitA>
    3886:	88 f0       	brcs	.+34     	; 0x38aa <__fixunssfsi+0x28>
    3888:	9f 57       	subi	r25, 0x7F	; 127
    388a:	98 f0       	brcs	.+38     	; 0x38b2 <__fixunssfsi+0x30>
    388c:	b9 2f       	mov	r27, r25
    388e:	99 27       	eor	r25, r25
    3890:	b7 51       	subi	r27, 0x17	; 23
    3892:	b0 f0       	brcs	.+44     	; 0x38c0 <__fixunssfsi+0x3e>
    3894:	e1 f0       	breq	.+56     	; 0x38ce <__fixunssfsi+0x4c>
    3896:	66 0f       	add	r22, r22
    3898:	77 1f       	adc	r23, r23
    389a:	88 1f       	adc	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	1a f0       	brmi	.+6      	; 0x38a6 <__fixunssfsi+0x24>
    38a0:	ba 95       	dec	r27
    38a2:	c9 f7       	brne	.-14     	; 0x3896 <__fixunssfsi+0x14>
    38a4:	14 c0       	rjmp	.+40     	; 0x38ce <__fixunssfsi+0x4c>
    38a6:	b1 30       	cpi	r27, 0x01	; 1
    38a8:	91 f0       	breq	.+36     	; 0x38ce <__fixunssfsi+0x4c>
    38aa:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__fp_zero>
    38ae:	b1 e0       	ldi	r27, 0x01	; 1
    38b0:	08 95       	ret
    38b2:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__fp_zero>
    38b6:	67 2f       	mov	r22, r23
    38b8:	78 2f       	mov	r23, r24
    38ba:	88 27       	eor	r24, r24
    38bc:	b8 5f       	subi	r27, 0xF8	; 248
    38be:	39 f0       	breq	.+14     	; 0x38ce <__fixunssfsi+0x4c>
    38c0:	b9 3f       	cpi	r27, 0xF9	; 249
    38c2:	cc f3       	brlt	.-14     	; 0x38b6 <__fixunssfsi+0x34>
    38c4:	86 95       	lsr	r24
    38c6:	77 95       	ror	r23
    38c8:	67 95       	ror	r22
    38ca:	b3 95       	inc	r27
    38cc:	d9 f7       	brne	.-10     	; 0x38c4 <__fixunssfsi+0x42>
    38ce:	3e f4       	brtc	.+14     	; 0x38de <__fixunssfsi+0x5c>
    38d0:	90 95       	com	r25
    38d2:	80 95       	com	r24
    38d4:	70 95       	com	r23
    38d6:	61 95       	neg	r22
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	8f 4f       	sbci	r24, 0xFF	; 255
    38dc:	9f 4f       	sbci	r25, 0xFF	; 255
    38de:	08 95       	ret

000038e0 <__floatunsisf>:
    38e0:	e8 94       	clt
    38e2:	09 c0       	rjmp	.+18     	; 0x38f6 <__floatsisf+0x12>

000038e4 <__floatsisf>:
    38e4:	97 fb       	bst	r25, 7
    38e6:	3e f4       	brtc	.+14     	; 0x38f6 <__floatsisf+0x12>
    38e8:	90 95       	com	r25
    38ea:	80 95       	com	r24
    38ec:	70 95       	com	r23
    38ee:	61 95       	neg	r22
    38f0:	7f 4f       	sbci	r23, 0xFF	; 255
    38f2:	8f 4f       	sbci	r24, 0xFF	; 255
    38f4:	9f 4f       	sbci	r25, 0xFF	; 255
    38f6:	99 23       	and	r25, r25
    38f8:	a9 f0       	breq	.+42     	; 0x3924 <__floatsisf+0x40>
    38fa:	f9 2f       	mov	r31, r25
    38fc:	96 e9       	ldi	r25, 0x96	; 150
    38fe:	bb 27       	eor	r27, r27
    3900:	93 95       	inc	r25
    3902:	f6 95       	lsr	r31
    3904:	87 95       	ror	r24
    3906:	77 95       	ror	r23
    3908:	67 95       	ror	r22
    390a:	b7 95       	ror	r27
    390c:	f1 11       	cpse	r31, r1
    390e:	f8 cf       	rjmp	.-16     	; 0x3900 <__floatsisf+0x1c>
    3910:	fa f4       	brpl	.+62     	; 0x3950 <__floatsisf+0x6c>
    3912:	bb 0f       	add	r27, r27
    3914:	11 f4       	brne	.+4      	; 0x391a <__floatsisf+0x36>
    3916:	60 ff       	sbrs	r22, 0
    3918:	1b c0       	rjmp	.+54     	; 0x3950 <__floatsisf+0x6c>
    391a:	6f 5f       	subi	r22, 0xFF	; 255
    391c:	7f 4f       	sbci	r23, 0xFF	; 255
    391e:	8f 4f       	sbci	r24, 0xFF	; 255
    3920:	9f 4f       	sbci	r25, 0xFF	; 255
    3922:	16 c0       	rjmp	.+44     	; 0x3950 <__floatsisf+0x6c>
    3924:	88 23       	and	r24, r24
    3926:	11 f0       	breq	.+4      	; 0x392c <__floatsisf+0x48>
    3928:	96 e9       	ldi	r25, 0x96	; 150
    392a:	11 c0       	rjmp	.+34     	; 0x394e <__floatsisf+0x6a>
    392c:	77 23       	and	r23, r23
    392e:	21 f0       	breq	.+8      	; 0x3938 <__floatsisf+0x54>
    3930:	9e e8       	ldi	r25, 0x8E	; 142
    3932:	87 2f       	mov	r24, r23
    3934:	76 2f       	mov	r23, r22
    3936:	05 c0       	rjmp	.+10     	; 0x3942 <__floatsisf+0x5e>
    3938:	66 23       	and	r22, r22
    393a:	71 f0       	breq	.+28     	; 0x3958 <__floatsisf+0x74>
    393c:	96 e8       	ldi	r25, 0x86	; 134
    393e:	86 2f       	mov	r24, r22
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	60 e0       	ldi	r22, 0x00	; 0
    3944:	2a f0       	brmi	.+10     	; 0x3950 <__floatsisf+0x6c>
    3946:	9a 95       	dec	r25
    3948:	66 0f       	add	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	88 1f       	adc	r24, r24
    394e:	da f7       	brpl	.-10     	; 0x3946 <__floatsisf+0x62>
    3950:	88 0f       	add	r24, r24
    3952:	96 95       	lsr	r25
    3954:	87 95       	ror	r24
    3956:	97 f9       	bld	r25, 7
    3958:	08 95       	ret

0000395a <__fp_inf>:
    395a:	97 f9       	bld	r25, 7
    395c:	9f 67       	ori	r25, 0x7F	; 127
    395e:	80 e8       	ldi	r24, 0x80	; 128
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	08 95       	ret

00003966 <__fp_nan>:
    3966:	9f ef       	ldi	r25, 0xFF	; 255
    3968:	80 ec       	ldi	r24, 0xC0	; 192
    396a:	08 95       	ret

0000396c <__fp_pscA>:
    396c:	00 24       	eor	r0, r0
    396e:	0a 94       	dec	r0
    3970:	16 16       	cp	r1, r22
    3972:	17 06       	cpc	r1, r23
    3974:	18 06       	cpc	r1, r24
    3976:	09 06       	cpc	r0, r25
    3978:	08 95       	ret

0000397a <__fp_pscB>:
    397a:	00 24       	eor	r0, r0
    397c:	0a 94       	dec	r0
    397e:	12 16       	cp	r1, r18
    3980:	13 06       	cpc	r1, r19
    3982:	14 06       	cpc	r1, r20
    3984:	05 06       	cpc	r0, r21
    3986:	08 95       	ret

00003988 <__fp_round>:
    3988:	09 2e       	mov	r0, r25
    398a:	03 94       	inc	r0
    398c:	00 0c       	add	r0, r0
    398e:	11 f4       	brne	.+4      	; 0x3994 <__fp_round+0xc>
    3990:	88 23       	and	r24, r24
    3992:	52 f0       	brmi	.+20     	; 0x39a8 <__fp_round+0x20>
    3994:	bb 0f       	add	r27, r27
    3996:	40 f4       	brcc	.+16     	; 0x39a8 <__fp_round+0x20>
    3998:	bf 2b       	or	r27, r31
    399a:	11 f4       	brne	.+4      	; 0x39a0 <__fp_round+0x18>
    399c:	60 ff       	sbrs	r22, 0
    399e:	04 c0       	rjmp	.+8      	; 0x39a8 <__fp_round+0x20>
    39a0:	6f 5f       	subi	r22, 0xFF	; 255
    39a2:	7f 4f       	sbci	r23, 0xFF	; 255
    39a4:	8f 4f       	sbci	r24, 0xFF	; 255
    39a6:	9f 4f       	sbci	r25, 0xFF	; 255
    39a8:	08 95       	ret

000039aa <__fp_split3>:
    39aa:	57 fd       	sbrc	r21, 7
    39ac:	90 58       	subi	r25, 0x80	; 128
    39ae:	44 0f       	add	r20, r20
    39b0:	55 1f       	adc	r21, r21
    39b2:	59 f0       	breq	.+22     	; 0x39ca <__fp_splitA+0x10>
    39b4:	5f 3f       	cpi	r21, 0xFF	; 255
    39b6:	71 f0       	breq	.+28     	; 0x39d4 <__fp_splitA+0x1a>
    39b8:	47 95       	ror	r20

000039ba <__fp_splitA>:
    39ba:	88 0f       	add	r24, r24
    39bc:	97 fb       	bst	r25, 7
    39be:	99 1f       	adc	r25, r25
    39c0:	61 f0       	breq	.+24     	; 0x39da <__fp_splitA+0x20>
    39c2:	9f 3f       	cpi	r25, 0xFF	; 255
    39c4:	79 f0       	breq	.+30     	; 0x39e4 <__fp_splitA+0x2a>
    39c6:	87 95       	ror	r24
    39c8:	08 95       	ret
    39ca:	12 16       	cp	r1, r18
    39cc:	13 06       	cpc	r1, r19
    39ce:	14 06       	cpc	r1, r20
    39d0:	55 1f       	adc	r21, r21
    39d2:	f2 cf       	rjmp	.-28     	; 0x39b8 <__fp_split3+0xe>
    39d4:	46 95       	lsr	r20
    39d6:	f1 df       	rcall	.-30     	; 0x39ba <__fp_splitA>
    39d8:	08 c0       	rjmp	.+16     	; 0x39ea <__fp_splitA+0x30>
    39da:	16 16       	cp	r1, r22
    39dc:	17 06       	cpc	r1, r23
    39de:	18 06       	cpc	r1, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	f1 cf       	rjmp	.-30     	; 0x39c6 <__fp_splitA+0xc>
    39e4:	86 95       	lsr	r24
    39e6:	71 05       	cpc	r23, r1
    39e8:	61 05       	cpc	r22, r1
    39ea:	08 94       	sec
    39ec:	08 95       	ret

000039ee <__fp_zero>:
    39ee:	e8 94       	clt

000039f0 <__fp_szero>:
    39f0:	bb 27       	eor	r27, r27
    39f2:	66 27       	eor	r22, r22
    39f4:	77 27       	eor	r23, r23
    39f6:	cb 01       	movw	r24, r22
    39f8:	97 f9       	bld	r25, 7
    39fa:	08 95       	ret

000039fc <__mulsf3>:
    39fc:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__mulsf3x>
    3a00:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__fp_round>
    3a04:	0e 94 b6 1c 	call	0x396c	; 0x396c <__fp_pscA>
    3a08:	38 f0       	brcs	.+14     	; 0x3a18 <__mulsf3+0x1c>
    3a0a:	0e 94 bd 1c 	call	0x397a	; 0x397a <__fp_pscB>
    3a0e:	20 f0       	brcs	.+8      	; 0x3a18 <__mulsf3+0x1c>
    3a10:	95 23       	and	r25, r21
    3a12:	11 f0       	breq	.+4      	; 0x3a18 <__mulsf3+0x1c>
    3a14:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__fp_inf>
    3a18:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <__fp_nan>
    3a1c:	11 24       	eor	r1, r1
    3a1e:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__fp_szero>

00003a22 <__mulsf3x>:
    3a22:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__fp_split3>
    3a26:	70 f3       	brcs	.-36     	; 0x3a04 <__mulsf3+0x8>

00003a28 <__mulsf3_pse>:
    3a28:	95 9f       	mul	r25, r21
    3a2a:	c1 f3       	breq	.-16     	; 0x3a1c <__mulsf3+0x20>
    3a2c:	95 0f       	add	r25, r21
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	55 1f       	adc	r21, r21
    3a32:	62 9f       	mul	r22, r18
    3a34:	f0 01       	movw	r30, r0
    3a36:	72 9f       	mul	r23, r18
    3a38:	bb 27       	eor	r27, r27
    3a3a:	f0 0d       	add	r31, r0
    3a3c:	b1 1d       	adc	r27, r1
    3a3e:	63 9f       	mul	r22, r19
    3a40:	aa 27       	eor	r26, r26
    3a42:	f0 0d       	add	r31, r0
    3a44:	b1 1d       	adc	r27, r1
    3a46:	aa 1f       	adc	r26, r26
    3a48:	64 9f       	mul	r22, r20
    3a4a:	66 27       	eor	r22, r22
    3a4c:	b0 0d       	add	r27, r0
    3a4e:	a1 1d       	adc	r26, r1
    3a50:	66 1f       	adc	r22, r22
    3a52:	82 9f       	mul	r24, r18
    3a54:	22 27       	eor	r18, r18
    3a56:	b0 0d       	add	r27, r0
    3a58:	a1 1d       	adc	r26, r1
    3a5a:	62 1f       	adc	r22, r18
    3a5c:	73 9f       	mul	r23, r19
    3a5e:	b0 0d       	add	r27, r0
    3a60:	a1 1d       	adc	r26, r1
    3a62:	62 1f       	adc	r22, r18
    3a64:	83 9f       	mul	r24, r19
    3a66:	a0 0d       	add	r26, r0
    3a68:	61 1d       	adc	r22, r1
    3a6a:	22 1f       	adc	r18, r18
    3a6c:	74 9f       	mul	r23, r20
    3a6e:	33 27       	eor	r19, r19
    3a70:	a0 0d       	add	r26, r0
    3a72:	61 1d       	adc	r22, r1
    3a74:	23 1f       	adc	r18, r19
    3a76:	84 9f       	mul	r24, r20
    3a78:	60 0d       	add	r22, r0
    3a7a:	21 1d       	adc	r18, r1
    3a7c:	82 2f       	mov	r24, r18
    3a7e:	76 2f       	mov	r23, r22
    3a80:	6a 2f       	mov	r22, r26
    3a82:	11 24       	eor	r1, r1
    3a84:	9f 57       	subi	r25, 0x7F	; 127
    3a86:	50 40       	sbci	r21, 0x00	; 0
    3a88:	9a f0       	brmi	.+38     	; 0x3ab0 <__mulsf3_pse+0x88>
    3a8a:	f1 f0       	breq	.+60     	; 0x3ac8 <__mulsf3_pse+0xa0>
    3a8c:	88 23       	and	r24, r24
    3a8e:	4a f0       	brmi	.+18     	; 0x3aa2 <__mulsf3_pse+0x7a>
    3a90:	ee 0f       	add	r30, r30
    3a92:	ff 1f       	adc	r31, r31
    3a94:	bb 1f       	adc	r27, r27
    3a96:	66 1f       	adc	r22, r22
    3a98:	77 1f       	adc	r23, r23
    3a9a:	88 1f       	adc	r24, r24
    3a9c:	91 50       	subi	r25, 0x01	; 1
    3a9e:	50 40       	sbci	r21, 0x00	; 0
    3aa0:	a9 f7       	brne	.-22     	; 0x3a8c <__mulsf3_pse+0x64>
    3aa2:	9e 3f       	cpi	r25, 0xFE	; 254
    3aa4:	51 05       	cpc	r21, r1
    3aa6:	80 f0       	brcs	.+32     	; 0x3ac8 <__mulsf3_pse+0xa0>
    3aa8:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__fp_inf>
    3aac:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__fp_szero>
    3ab0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ab2:	e4 f3       	brlt	.-8      	; 0x3aac <__mulsf3_pse+0x84>
    3ab4:	98 3e       	cpi	r25, 0xE8	; 232
    3ab6:	d4 f3       	brlt	.-12     	; 0x3aac <__mulsf3_pse+0x84>
    3ab8:	86 95       	lsr	r24
    3aba:	77 95       	ror	r23
    3abc:	67 95       	ror	r22
    3abe:	b7 95       	ror	r27
    3ac0:	f7 95       	ror	r31
    3ac2:	e7 95       	ror	r30
    3ac4:	9f 5f       	subi	r25, 0xFF	; 255
    3ac6:	c1 f7       	brne	.-16     	; 0x3ab8 <__mulsf3_pse+0x90>
    3ac8:	fe 2b       	or	r31, r30
    3aca:	88 0f       	add	r24, r24
    3acc:	91 1d       	adc	r25, r1
    3ace:	96 95       	lsr	r25
    3ad0:	87 95       	ror	r24
    3ad2:	97 f9       	bld	r25, 7
    3ad4:	08 95       	ret

00003ad6 <sin>:
    3ad6:	9f 93       	push	r25
    3ad8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__fp_rempio2>
    3adc:	0f 90       	pop	r0
    3ade:	07 fc       	sbrc	r0, 7
    3ae0:	ee 5f       	subi	r30, 0xFE	; 254
    3ae2:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__fp_sinus>
    3ae6:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <__fp_nan>

00003aea <__fp_rempio2>:
    3aea:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__fp_splitA>
    3aee:	d8 f3       	brcs	.-10     	; 0x3ae6 <sin+0x10>
    3af0:	e8 94       	clt
    3af2:	e0 e0       	ldi	r30, 0x00	; 0
    3af4:	bb 27       	eor	r27, r27
    3af6:	9f 57       	subi	r25, 0x7F	; 127
    3af8:	f0 f0       	brcs	.+60     	; 0x3b36 <__fp_rempio2+0x4c>
    3afa:	2a ed       	ldi	r18, 0xDA	; 218
    3afc:	3f e0       	ldi	r19, 0x0F	; 15
    3afe:	49 ec       	ldi	r20, 0xC9	; 201
    3b00:	06 c0       	rjmp	.+12     	; 0x3b0e <__fp_rempio2+0x24>
    3b02:	ee 0f       	add	r30, r30
    3b04:	bb 0f       	add	r27, r27
    3b06:	66 1f       	adc	r22, r22
    3b08:	77 1f       	adc	r23, r23
    3b0a:	88 1f       	adc	r24, r24
    3b0c:	28 f0       	brcs	.+10     	; 0x3b18 <__fp_rempio2+0x2e>
    3b0e:	b2 3a       	cpi	r27, 0xA2	; 162
    3b10:	62 07       	cpc	r22, r18
    3b12:	73 07       	cpc	r23, r19
    3b14:	84 07       	cpc	r24, r20
    3b16:	28 f0       	brcs	.+10     	; 0x3b22 <__fp_rempio2+0x38>
    3b18:	b2 5a       	subi	r27, 0xA2	; 162
    3b1a:	62 0b       	sbc	r22, r18
    3b1c:	73 0b       	sbc	r23, r19
    3b1e:	84 0b       	sbc	r24, r20
    3b20:	e3 95       	inc	r30
    3b22:	9a 95       	dec	r25
    3b24:	72 f7       	brpl	.-36     	; 0x3b02 <__fp_rempio2+0x18>
    3b26:	80 38       	cpi	r24, 0x80	; 128
    3b28:	30 f4       	brcc	.+12     	; 0x3b36 <__fp_rempio2+0x4c>
    3b2a:	9a 95       	dec	r25
    3b2c:	bb 0f       	add	r27, r27
    3b2e:	66 1f       	adc	r22, r22
    3b30:	77 1f       	adc	r23, r23
    3b32:	88 1f       	adc	r24, r24
    3b34:	d2 f7       	brpl	.-12     	; 0x3b2a <__fp_rempio2+0x40>
    3b36:	90 48       	sbci	r25, 0x80	; 128
    3b38:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__fp_mpack_finite>

00003b3c <__fp_sinus>:
    3b3c:	ef 93       	push	r30
    3b3e:	e0 ff       	sbrs	r30, 0
    3b40:	07 c0       	rjmp	.+14     	; 0x3b50 <__fp_sinus+0x14>
    3b42:	a2 ea       	ldi	r26, 0xA2	; 162
    3b44:	2a ed       	ldi	r18, 0xDA	; 218
    3b46:	3f e0       	ldi	r19, 0x0F	; 15
    3b48:	49 ec       	ldi	r20, 0xC9	; 201
    3b4a:	5f eb       	ldi	r21, 0xBF	; 191
    3b4c:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__addsf3x>
    3b50:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__fp_round>
    3b54:	0f 90       	pop	r0
    3b56:	03 94       	inc	r0
    3b58:	01 fc       	sbrc	r0, 1
    3b5a:	90 58       	subi	r25, 0x80	; 128
    3b5c:	ea ed       	ldi	r30, 0xDA	; 218
    3b5e:	f1 e0       	ldi	r31, 0x01	; 1
    3b60:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__fp_powsodd>

00003b64 <__fp_mpack>:
    3b64:	9f 3f       	cpi	r25, 0xFF	; 255
    3b66:	31 f0       	breq	.+12     	; 0x3b74 <__fp_mpack_finite+0xc>

00003b68 <__fp_mpack_finite>:
    3b68:	91 50       	subi	r25, 0x01	; 1
    3b6a:	20 f4       	brcc	.+8      	; 0x3b74 <__fp_mpack_finite+0xc>
    3b6c:	87 95       	ror	r24
    3b6e:	77 95       	ror	r23
    3b70:	67 95       	ror	r22
    3b72:	b7 95       	ror	r27
    3b74:	88 0f       	add	r24, r24
    3b76:	91 1d       	adc	r25, r1
    3b78:	96 95       	lsr	r25
    3b7a:	87 95       	ror	r24
    3b7c:	97 f9       	bld	r25, 7
    3b7e:	08 95       	ret

00003b80 <__fp_powsodd>:
    3b80:	9f 93       	push	r25
    3b82:	8f 93       	push	r24
    3b84:	7f 93       	push	r23
    3b86:	6f 93       	push	r22
    3b88:	ff 93       	push	r31
    3b8a:	ef 93       	push	r30
    3b8c:	9b 01       	movw	r18, r22
    3b8e:	ac 01       	movw	r20, r24
    3b90:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__mulsf3>
    3b94:	ef 91       	pop	r30
    3b96:	ff 91       	pop	r31
    3b98:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__fp_powser>
    3b9c:	2f 91       	pop	r18
    3b9e:	3f 91       	pop	r19
    3ba0:	4f 91       	pop	r20
    3ba2:	5f 91       	pop	r21
    3ba4:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__mulsf3>

00003ba8 <__fp_powser>:
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	1f 93       	push	r17
    3bae:	0f 93       	push	r16
    3bb0:	ff 92       	push	r15
    3bb2:	ef 92       	push	r14
    3bb4:	df 92       	push	r13
    3bb6:	7b 01       	movw	r14, r22
    3bb8:	8c 01       	movw	r16, r24
    3bba:	68 94       	set
    3bbc:	06 c0       	rjmp	.+12     	; 0x3bca <__fp_powser+0x22>
    3bbe:	da 2e       	mov	r13, r26
    3bc0:	ef 01       	movw	r28, r30
    3bc2:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__mulsf3x>
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e8 94       	clt
    3bca:	a5 91       	lpm	r26, Z+
    3bcc:	25 91       	lpm	r18, Z+
    3bce:	35 91       	lpm	r19, Z+
    3bd0:	45 91       	lpm	r20, Z+
    3bd2:	55 91       	lpm	r21, Z+
    3bd4:	a6 f3       	brts	.-24     	; 0x3bbe <__fp_powser+0x16>
    3bd6:	ef 01       	movw	r28, r30
    3bd8:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__addsf3x>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	97 01       	movw	r18, r14
    3be0:	a8 01       	movw	r20, r16
    3be2:	da 94       	dec	r13
    3be4:	69 f7       	brne	.-38     	; 0x3bc0 <__fp_powser+0x18>
    3be6:	df 90       	pop	r13
    3be8:	ef 90       	pop	r14
    3bea:	ff 90       	pop	r15
    3bec:	0f 91       	pop	r16
    3bee:	1f 91       	pop	r17
    3bf0:	cf 91       	pop	r28
    3bf2:	df 91       	pop	r29
    3bf4:	08 95       	ret

00003bf6 <__udivmodsi4>:
    3bf6:	a1 e2       	ldi	r26, 0x21	; 33
    3bf8:	1a 2e       	mov	r1, r26
    3bfa:	aa 1b       	sub	r26, r26
    3bfc:	bb 1b       	sub	r27, r27
    3bfe:	fd 01       	movw	r30, r26
    3c00:	0d c0       	rjmp	.+26     	; 0x3c1c <__udivmodsi4_ep>

00003c02 <__udivmodsi4_loop>:
    3c02:	aa 1f       	adc	r26, r26
    3c04:	bb 1f       	adc	r27, r27
    3c06:	ee 1f       	adc	r30, r30
    3c08:	ff 1f       	adc	r31, r31
    3c0a:	a2 17       	cp	r26, r18
    3c0c:	b3 07       	cpc	r27, r19
    3c0e:	e4 07       	cpc	r30, r20
    3c10:	f5 07       	cpc	r31, r21
    3c12:	20 f0       	brcs	.+8      	; 0x3c1c <__udivmodsi4_ep>
    3c14:	a2 1b       	sub	r26, r18
    3c16:	b3 0b       	sbc	r27, r19
    3c18:	e4 0b       	sbc	r30, r20
    3c1a:	f5 0b       	sbc	r31, r21

00003c1c <__udivmodsi4_ep>:
    3c1c:	66 1f       	adc	r22, r22
    3c1e:	77 1f       	adc	r23, r23
    3c20:	88 1f       	adc	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	1a 94       	dec	r1
    3c26:	69 f7       	brne	.-38     	; 0x3c02 <__udivmodsi4_loop>
    3c28:	60 95       	com	r22
    3c2a:	70 95       	com	r23
    3c2c:	80 95       	com	r24
    3c2e:	90 95       	com	r25
    3c30:	9b 01       	movw	r18, r22
    3c32:	ac 01       	movw	r20, r24
    3c34:	bd 01       	movw	r22, r26
    3c36:	cf 01       	movw	r24, r30
    3c38:	08 95       	ret

00003c3a <__tablejump2__>:
    3c3a:	ee 0f       	add	r30, r30
    3c3c:	ff 1f       	adc	r31, r31
    3c3e:	88 1f       	adc	r24, r24
    3c40:	8b bf       	out	0x3b, r24	; 59
    3c42:	07 90       	elpm	r0, Z+
    3c44:	f6 91       	elpm	r31, Z
    3c46:	e0 2d       	mov	r30, r0
    3c48:	19 94       	eijmp

00003c4a <__do_global_dtors>:
    3c4a:	11 e0       	ldi	r17, 0x01	; 1
    3c4c:	c3 e1       	ldi	r28, 0x13	; 19
    3c4e:	d1 e0       	ldi	r29, 0x01	; 1
    3c50:	00 e0       	ldi	r16, 0x00	; 0
    3c52:	06 c0       	rjmp	.+12     	; 0x3c60 <__do_global_dtors+0x16>
    3c54:	80 2f       	mov	r24, r16
    3c56:	fe 01       	movw	r30, r28
    3c58:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__tablejump2__>
    3c5c:	21 96       	adiw	r28, 0x01	; 1
    3c5e:	01 1d       	adc	r16, r1
    3c60:	c4 31       	cpi	r28, 0x14	; 20
    3c62:	d1 07       	cpc	r29, r17
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	08 07       	cpc	r16, r24
    3c68:	a9 f7       	brne	.-22     	; 0x3c54 <__do_global_dtors+0xa>
    3c6a:	f8 94       	cli

00003c6c <__stop_program>:
    3c6c:	ff cf       	rjmp	.-2      	; 0x3c6c <__stop_program>
