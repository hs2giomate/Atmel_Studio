
LTC2983_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000039b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020068  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020068  2**0
                  CONTENTS
  4 .bss          000003e8  20000068  00003a1c  00020068  2**2
                  ALLOC
  5 .stack        00010000  20000450  00003e04  00020068  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002b7d7  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003b9c  00000000  00000000  0004b8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000129f9  00000000  00000000  0004f462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d08  00000000  00000000  00061e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001530  00000000  00000000  00062b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003462e  00000000  00000000  00064093  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001509f  00000000  00000000  000986c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011e0b3  00000000  00000000  000ad760  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000237c  00000000  00000000  001cb814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 04 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     P.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	51 11 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     Q...............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 75 17 00 00 89 17 00 00 9d 17 00 00     ....u...........
     144:	b1 17 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 c5 17 00 00 d9 17 00 00 ed 17 00 00     ................
     164:	01 18 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 0d 2d 00 00     .............-..
     184:	19 2d 00 00 25 2d 00 00 31 2d 00 00 e5 02 00 00     .-..%-..1-......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000068 	.word	0x20000068
     280:	00000000 	.word	0x00000000
     284:	000039b4 	.word	0x000039b4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000039b4 	.word	0x000039b4
     2c4:	2000006c 	.word	0x2000006c
     2c8:	000039b4 	.word	0x000039b4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000609 	.word	0x00000609
     2e0:	00003829 	.word	0x00003829

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	000039b4 	.word	0x000039b4
     364:	20000068 	.word	0x20000068
     368:	20000450 	.word	0x20000450
     36c:	20000068 	.word	0x20000068
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00003835 	.word	0x00003835
     37c:	00002d3d 	.word	0x00002d3d

00000380 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     380:	4b2f      	ldr	r3, [pc, #188]	; (440 <SPI_0_PORT_init+0xc0>)
     382:	f44f 7280 	mov.w	r2, #256	; 0x100
     386:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     38a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     38e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     392:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     396:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     39a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     39e:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3aa:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ae:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3b6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ba:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3be:	f44f 7200 	mov.w	r2, #512	; 0x200
     3c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3d2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d6:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     3da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e6:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ee:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     402:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     406:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     40a:	4a0e      	ldr	r2, [pc, #56]	; (444 <SPI_0_PORT_init+0xc4>)
     40c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     410:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     414:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     418:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     41c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     424:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     428:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     42c:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     430:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     434:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     438:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
     43c:	4770      	bx	lr
     43e:	bf00      	nop
     440:	41008000 	.word	0x41008000
     444:	c0020000 	.word	0xc0020000

00000448 <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     448:	4b06      	ldr	r3, [pc, #24]	; (464 <SPI_0_CLOCK_init+0x1c>)
     44a:	2240      	movs	r2, #64	; 0x40
     44c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     450:	2243      	movs	r2, #67	; 0x43
     452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     456:	4a04      	ldr	r2, [pc, #16]	; (468 <SPI_0_CLOCK_init+0x20>)
     458:	6a13      	ldr	r3, [r2, #32]
     45a:	f043 0301 	orr.w	r3, r3, #1
     45e:	6213      	str	r3, [r2, #32]
     460:	4770      	bx	lr
     462:	bf00      	nop
     464:	40001c00 	.word	0x40001c00
     468:	40000800 	.word	0x40000800

0000046c <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_0_init(void)
{
     46c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     46e:	4b05      	ldr	r3, [pc, #20]	; (484 <SPI_0_init+0x18>)
     470:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM4);
     472:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     476:	4804      	ldr	r0, [pc, #16]	; (488 <SPI_0_init+0x1c>)
     478:	4b04      	ldr	r3, [pc, #16]	; (48c <SPI_0_init+0x20>)
     47a:	4798      	blx	r3
	SPI_0_PORT_init();
     47c:	4b04      	ldr	r3, [pc, #16]	; (490 <SPI_0_init+0x24>)
     47e:	4798      	blx	r3
     480:	bd08      	pop	{r3, pc}
     482:	bf00      	nop
     484:	00000449 	.word	0x00000449
     488:	200003b8 	.word	0x200003b8
     48c:	00000909 	.word	0x00000909
     490:	00000381 	.word	0x00000381

00000494 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     494:	4b16      	ldr	r3, [pc, #88]	; (4f0 <I2C_0_PORT_init+0x5c>)
     496:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     49a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     49e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a2:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ae:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b2:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4be:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c2:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     4c6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4ca:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4de:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     4ee:	4770      	bx	lr
     4f0:	41008000 	.word	0x41008000

000004f4 <I2C_0_CLOCK_init>:
     4f4:	4b06      	ldr	r3, [pc, #24]	; (510 <I2C_0_CLOCK_init+0x1c>)
     4f6:	2240      	movs	r2, #64	; 0x40
     4f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     4fc:	2243      	movs	r2, #67	; 0x43
     4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     502:	4a04      	ldr	r2, [pc, #16]	; (514 <I2C_0_CLOCK_init+0x20>)
     504:	6a13      	ldr	r3, [r2, #32]
     506:	f043 0304 	orr.w	r3, r3, #4
     50a:	6213      	str	r3, [r2, #32]
     50c:	4770      	bx	lr
     50e:	bf00      	nop
     510:	40001c00 	.word	0x40001c00
     514:	40000800 	.word	0x40000800

00000518 <I2C_0_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void I2C_0_init(void)
{
     518:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     51a:	4b04      	ldr	r3, [pc, #16]	; (52c <I2C_0_init+0x14>)
     51c:	4798      	blx	r3
	i2c_m_async_init(&I2C_0, SERCOM6);
     51e:	4904      	ldr	r1, [pc, #16]	; (530 <I2C_0_init+0x18>)
     520:	4804      	ldr	r0, [pc, #16]	; (534 <I2C_0_init+0x1c>)
     522:	4b05      	ldr	r3, [pc, #20]	; (538 <I2C_0_init+0x20>)
     524:	4798      	blx	r3
	I2C_0_PORT_init();
     526:	4b05      	ldr	r3, [pc, #20]	; (53c <I2C_0_init+0x24>)
     528:	4798      	blx	r3
     52a:	bd08      	pop	{r3, pc}
     52c:	000004f5 	.word	0x000004f5
     530:	43000800 	.word	0x43000800
     534:	20000400 	.word	0x20000400
     538:	000006dd 	.word	0x000006dd
     53c:	00000495 	.word	0x00000495

00000540 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     540:	4b1e      	ldr	r3, [pc, #120]	; (5bc <USB_0_PORT_init+0x7c>)
     542:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     546:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     548:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     54c:	6299      	str	r1, [r3, #40]	; 0x28
     54e:	481c      	ldr	r0, [pc, #112]	; (5c0 <USB_0_PORT_init+0x80>)
     550:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     552:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     554:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     558:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     55c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     560:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     568:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     570:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     574:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     578:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     584:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     586:	6299      	str	r1, [r3, #40]	; 0x28
     588:	490e      	ldr	r1, [pc, #56]	; (5c4 <USB_0_PORT_init+0x84>)
     58a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     58c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     58e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     592:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     596:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     59e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5aa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5b2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     5ba:	4770      	bx	lr
     5bc:	41008000 	.word	0x41008000
     5c0:	c0000100 	.word	0xc0000100
     5c4:	c0000200 	.word	0xc0000200

000005c8 <USB_0_CLOCK_init>:
     5c8:	224a      	movs	r2, #74	; 0x4a
     5ca:	4b07      	ldr	r3, [pc, #28]	; (5e8 <USB_0_CLOCK_init+0x20>)
     5cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     5d0:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     5d4:	691a      	ldr	r2, [r3, #16]
     5d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     5da:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     5dc:	699a      	ldr	r2, [r3, #24]
     5de:	f042 0201 	orr.w	r2, r2, #1
     5e2:	619a      	str	r2, [r3, #24]
     5e4:	4770      	bx	lr
     5e6:	bf00      	nop
     5e8:	40001c00 	.word	0x40001c00

000005ec <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     5ec:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     5ee:	4b03      	ldr	r3, [pc, #12]	; (5fc <USB_0_init+0x10>)
     5f0:	4798      	blx	r3
	usb_d_init();
     5f2:	4b03      	ldr	r3, [pc, #12]	; (600 <USB_0_init+0x14>)
     5f4:	4798      	blx	r3
	USB_0_PORT_init();
     5f6:	4b03      	ldr	r3, [pc, #12]	; (604 <USB_0_init+0x18>)
     5f8:	4798      	blx	r3
     5fa:	bd08      	pop	{r3, pc}
     5fc:	000005c9 	.word	0x000005c9
     600:	00000be1 	.word	0x00000be1
     604:	00000541 	.word	0x00000541

00000608 <system_init>:
}

void system_init(void)
{
     608:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     60a:	4b04      	ldr	r3, [pc, #16]	; (61c <system_init+0x14>)
     60c:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <system_init+0x18>)
     610:	4798      	blx	r3

	I2C_0_init();
     612:	4b04      	ldr	r3, [pc, #16]	; (624 <system_init+0x1c>)
     614:	4798      	blx	r3

	USB_0_init();
     616:	4b04      	ldr	r3, [pc, #16]	; (628 <system_init+0x20>)
     618:	4798      	blx	r3
     61a:	bd08      	pop	{r3, pc}
     61c:	00000f95 	.word	0x00000f95
     620:	0000046d 	.word	0x0000046d
     624:	00000519 	.word	0x00000519
     628:	000005ed 	.word	0x000005ed

0000062c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     62c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     630:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     632:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     634:	f3bf 8f5f 	dmb	sy
     638:	4770      	bx	lr

0000063a <atomic_leave_critical>:
     63a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     63e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     640:	f383 8810 	msr	PRIMASK, r3
     644:	4770      	bx	lr

00000646 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     646:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     648:	8843      	ldrh	r3, [r0, #2]
     64a:	f413 7f80 	tst.w	r3, #256	; 0x100
     64e:	d102      	bne.n	656 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
     650:	6b43      	ldr	r3, [r0, #52]	; 0x34
     652:	b103      	cbz	r3, 656 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
     654:	4798      	blx	r3
     656:	bd08      	pop	{r3, pc}

00000658 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     658:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     65a:	8843      	ldrh	r3, [r0, #2]
     65c:	f413 7f80 	tst.w	r3, #256	; 0x100
     660:	d102      	bne.n	668 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
     662:	6b83      	ldr	r3, [r0, #56]	; 0x38
     664:	b103      	cbz	r3, 668 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
     666:	4798      	blx	r3
     668:	bd08      	pop	{r3, pc}

0000066a <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
     66a:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     66c:	8843      	ldrh	r3, [r0, #2]
     66e:	f413 7f80 	tst.w	r3, #256	; 0x100
     672:	d102      	bne.n	67a <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
     674:	6b03      	ldr	r3, [r0, #48]	; 0x30
     676:	b103      	cbz	r3, 67a <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
     678:	4798      	blx	r3
     67a:	bd08      	pop	{r3, pc}

0000067c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
     67c:	b510      	push	{r4, lr}
     67e:	b084      	sub	sp, #16
     680:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
     682:	8a83      	ldrh	r3, [r0, #20]
     684:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     688:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     68a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     68e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     692:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     694:	a901      	add	r1, sp, #4
     696:	3828      	subs	r0, #40	; 0x28
     698:	4b03      	ldr	r3, [pc, #12]	; (6a8 <i2c_m_async_write+0x2c>)
     69a:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
     69c:	2800      	cmp	r0, #0
     69e:	bf08      	it	eq
     6a0:	4620      	moveq	r0, r4
     6a2:	b004      	add	sp, #16
     6a4:	bd10      	pop	{r4, pc}
     6a6:	bf00      	nop
     6a8:	00001629 	.word	0x00001629

000006ac <i2c_m_async_read>:
{
     6ac:	b510      	push	{r4, lr}
     6ae:	b084      	sub	sp, #16
     6b0:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     6b2:	8a83      	ldrh	r3, [r0, #20]
     6b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     6b8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     6ba:	f248 0301 	movw	r3, #32769	; 0x8001
     6be:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     6c2:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     6c4:	a901      	add	r1, sp, #4
     6c6:	3828      	subs	r0, #40	; 0x28
     6c8:	4b03      	ldr	r3, [pc, #12]	; (6d8 <i2c_m_async_read+0x2c>)
     6ca:	4798      	blx	r3
}
     6cc:	2800      	cmp	r0, #0
     6ce:	bf08      	it	eq
     6d0:	4620      	moveq	r0, r4
     6d2:	b004      	add	sp, #16
     6d4:	bd10      	pop	{r4, pc}
     6d6:	bf00      	nop
     6d8:	00001629 	.word	0x00001629

000006dc <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
     6dc:	b570      	push	{r4, r5, r6, lr}
     6de:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     6e0:	4604      	mov	r4, r0
     6e2:	2289      	movs	r2, #137	; 0x89
     6e4:	490f      	ldr	r1, [pc, #60]	; (724 <i2c_m_async_init+0x48>)
     6e6:	3000      	adds	r0, #0
     6e8:	bf18      	it	ne
     6ea:	2001      	movne	r0, #1
     6ec:	4b0e      	ldr	r3, [pc, #56]	; (728 <i2c_m_async_init+0x4c>)
     6ee:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
     6f0:	4629      	mov	r1, r5
     6f2:	4620      	mov	r0, r4
     6f4:	4b0d      	ldr	r3, [pc, #52]	; (72c <i2c_m_async_init+0x50>)
     6f6:	4798      	blx	r3
	if (init_status) {
     6f8:	4605      	mov	r5, r0
     6fa:	b108      	cbz	r0, 700 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
     6fc:	4628      	mov	r0, r5
     6fe:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
     700:	4b0b      	ldr	r3, [pc, #44]	; (730 <i2c_m_async_init+0x54>)
     702:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <i2c_m_async_init+0x58>)
     706:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
     708:	4a0b      	ldr	r2, [pc, #44]	; (738 <i2c_m_async_init+0x5c>)
     70a:	2101      	movs	r1, #1
     70c:	4620      	mov	r0, r4
     70e:	4e0b      	ldr	r6, [pc, #44]	; (73c <i2c_m_async_init+0x60>)
     710:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
     712:	4a0b      	ldr	r2, [pc, #44]	; (740 <i2c_m_async_init+0x64>)
     714:	2102      	movs	r1, #2
     716:	4620      	mov	r0, r4
     718:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
     71a:	4a0a      	ldr	r2, [pc, #40]	; (744 <i2c_m_async_init+0x68>)
     71c:	2100      	movs	r1, #0
     71e:	4620      	mov	r0, r4
     720:	47b0      	blx	r6
	return ERR_NONE;
     722:	e7eb      	b.n	6fc <i2c_m_async_init+0x20>
     724:	000038a4 	.word	0x000038a4
     728:	00000f2d 	.word	0x00000f2d
     72c:	000015a9 	.word	0x000015a9
     730:	000006ad 	.word	0x000006ad
     734:	0000067d 	.word	0x0000067d
     738:	00000647 	.word	0x00000647
     73c:	00001759 	.word	0x00001759
     740:	00000659 	.word	0x00000659
     744:	0000066b 	.word	0x0000066b

00000748 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     74a:	460f      	mov	r7, r1
     74c:	4616      	mov	r6, r2
	ASSERT(io);
     74e:	4604      	mov	r4, r0
     750:	f240 1227 	movw	r2, #295	; 0x127
     754:	4909      	ldr	r1, [pc, #36]	; (77c <_spi_m_async_io_write+0x34>)
     756:	3000      	adds	r0, #0
     758:	bf18      	it	ne
     75a:	2001      	movne	r0, #1
     75c:	4b08      	ldr	r3, [pc, #32]	; (780 <_spi_m_async_io_write+0x38>)
     75e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     760:	2500      	movs	r5, #0
     762:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     764:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     766:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     768:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     76a:	2310      	movs	r3, #16
     76c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     76e:	2101      	movs	r1, #1
     770:	f1a4 0020 	sub.w	r0, r4, #32
     774:	4b03      	ldr	r3, [pc, #12]	; (784 <_spi_m_async_io_write+0x3c>)
     776:	4798      	blx	r3

	return ERR_NONE;
}
     778:	4628      	mov	r0, r5
     77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     77c:	000038c4 	.word	0x000038c4
     780:	00000f2d 	.word	0x00000f2d
     784:	00001971 	.word	0x00001971

00000788 <_spi_m_async_io_read>:
{
     788:	b570      	push	{r4, r5, r6, lr}
     78a:	460d      	mov	r5, r1
     78c:	4616      	mov	r6, r2
	ASSERT(io);
     78e:	4604      	mov	r4, r0
     790:	f240 1205 	movw	r2, #261	; 0x105
     794:	490c      	ldr	r1, [pc, #48]	; (7c8 <_spi_m_async_io_read+0x40>)
     796:	3000      	adds	r0, #0
     798:	bf18      	it	ne
     79a:	2001      	movne	r0, #1
     79c:	4b0b      	ldr	r3, [pc, #44]	; (7cc <_spi_m_async_io_read+0x44>)
     79e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     7a0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     7a2:	2500      	movs	r5, #0
     7a4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     7a6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     7a8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     7aa:	2310      	movs	r3, #16
     7ac:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     7ae:	3c20      	subs	r4, #32
     7b0:	2101      	movs	r1, #1
     7b2:	4620      	mov	r0, r4
     7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <_spi_m_async_io_read+0x48>)
     7b6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     7b8:	f240 11ff 	movw	r1, #511	; 0x1ff
     7bc:	4620      	mov	r0, r4
     7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <_spi_m_async_io_read+0x4c>)
     7c0:	4798      	blx	r3
}
     7c2:	4628      	mov	r0, r5
     7c4:	bd70      	pop	{r4, r5, r6, pc}
     7c6:	bf00      	nop
     7c8:	000038c4 	.word	0x000038c4
     7cc:	00000f2d 	.word	0x00000f2d
     7d0:	000019a5 	.word	0x000019a5
     7d4:	00001a21 	.word	0x00001a21

000007d8 <_spi_dev_error>:
{
     7d8:	b570      	push	{r4, r5, r6, lr}
     7da:	4604      	mov	r4, r0
     7dc:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     7de:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     7e0:	2100      	movs	r1, #0
     7e2:	4b09      	ldr	r3, [pc, #36]	; (808 <_spi_dev_error+0x30>)
     7e4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     7e6:	2100      	movs	r1, #0
     7e8:	4620      	mov	r0, r4
     7ea:	4b08      	ldr	r3, [pc, #32]	; (80c <_spi_dev_error+0x34>)
     7ec:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     7ee:	2100      	movs	r1, #0
     7f0:	4620      	mov	r0, r4
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <_spi_dev_error+0x38>)
     7f4:	4798      	blx	r3
	spi->stat = 0;
     7f6:	2300      	movs	r3, #0
     7f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     7fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
     7fe:	b113      	cbz	r3, 806 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     800:	4631      	mov	r1, r6
     802:	4628      	mov	r0, r5
     804:	4798      	blx	r3
     806:	bd70      	pop	{r4, r5, r6, pc}
     808:	00001971 	.word	0x00001971
     80c:	000019a5 	.word	0x000019a5
     810:	000019e5 	.word	0x000019e5

00000814 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     814:	6c02      	ldr	r2, [r0, #64]	; 0x40
     816:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     818:	429a      	cmp	r2, r3
     81a:	d200      	bcs.n	81e <_spi_dev_complete+0xa>
     81c:	4770      	bx	lr
{
     81e:	b510      	push	{r4, lr}
     820:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     822:	2100      	movs	r1, #0
     824:	4b04      	ldr	r3, [pc, #16]	; (838 <_spi_dev_complete+0x24>)
     826:	4798      	blx	r3
		spi->stat = 0;
     828:	2300      	movs	r3, #0
     82a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     82e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     830:	b10b      	cbz	r3, 836 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     832:	1f20      	subs	r0, r4, #4
     834:	4798      	blx	r3
     836:	bd10      	pop	{r4, pc}
     838:	000019e5 	.word	0x000019e5

0000083c <_spi_dev_tx>:
{
     83c:	b510      	push	{r4, lr}
     83e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     840:	7903      	ldrb	r3, [r0, #4]
     842:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     844:	6b42      	ldr	r2, [r0, #52]	; 0x34
     846:	6c03      	ldr	r3, [r0, #64]	; 0x40
     848:	f103 0101 	add.w	r1, r3, #1
     84c:	6401      	str	r1, [r0, #64]	; 0x40
     84e:	bf94      	ite	ls
     850:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     852:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     856:	4b08      	ldr	r3, [pc, #32]	; (878 <_spi_dev_tx+0x3c>)
     858:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     85a:	6c22      	ldr	r2, [r4, #64]	; 0x40
     85c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     85e:	429a      	cmp	r2, r3
     860:	d000      	beq.n	864 <_spi_dev_tx+0x28>
     862:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     864:	2100      	movs	r1, #0
     866:	4620      	mov	r0, r4
     868:	4b04      	ldr	r3, [pc, #16]	; (87c <_spi_dev_tx+0x40>)
     86a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     86c:	2101      	movs	r1, #1
     86e:	4620      	mov	r0, r4
     870:	4b03      	ldr	r3, [pc, #12]	; (880 <_spi_dev_tx+0x44>)
     872:	4798      	blx	r3
}
     874:	e7f5      	b.n	862 <_spi_dev_tx+0x26>
     876:	bf00      	nop
     878:	00001a21 	.word	0x00001a21
     87c:	00001971 	.word	0x00001971
     880:	000019e5 	.word	0x000019e5

00000884 <_spi_dev_rx>:
{
     884:	b570      	push	{r4, r5, r6, lr}
     886:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     888:	6b85      	ldr	r5, [r0, #56]	; 0x38
     88a:	b305      	cbz	r5, 8ce <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     88c:	7903      	ldrb	r3, [r0, #4]
     88e:	2b01      	cmp	r3, #1
     890:	d916      	bls.n	8c0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     892:	6c06      	ldr	r6, [r0, #64]	; 0x40
     894:	1c73      	adds	r3, r6, #1
     896:	6403      	str	r3, [r0, #64]	; 0x40
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <_spi_dev_rx+0x78>)
     89a:	4798      	blx	r3
     89c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     8a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
     8a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     8a4:	4293      	cmp	r3, r2
     8a6:	d21d      	bcs.n	8e4 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     8a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
     8aa:	b1b2      	cbz	r2, 8da <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     8ac:	7921      	ldrb	r1, [r4, #4]
     8ae:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     8b0:	bf94      	ite	ls
     8b2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     8b4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     8b8:	4620      	mov	r0, r4
     8ba:	4b11      	ldr	r3, [pc, #68]	; (900 <_spi_dev_rx+0x7c>)
     8bc:	4798      	blx	r3
     8be:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     8c0:	6c06      	ldr	r6, [r0, #64]	; 0x40
     8c2:	1c73      	adds	r3, r6, #1
     8c4:	6403      	str	r3, [r0, #64]	; 0x40
     8c6:	4b0d      	ldr	r3, [pc, #52]	; (8fc <_spi_dev_rx+0x78>)
     8c8:	4798      	blx	r3
     8ca:	55a8      	strb	r0, [r5, r6]
     8cc:	e7e8      	b.n	8a0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     8ce:	4b0b      	ldr	r3, [pc, #44]	; (8fc <_spi_dev_rx+0x78>)
     8d0:	4798      	blx	r3
		spi->xfercnt++;
     8d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
     8d4:	3301      	adds	r3, #1
     8d6:	6423      	str	r3, [r4, #64]	; 0x40
     8d8:	e7e2      	b.n	8a0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     8da:	88e1      	ldrh	r1, [r4, #6]
     8dc:	4620      	mov	r0, r4
     8de:	4b08      	ldr	r3, [pc, #32]	; (900 <_spi_dev_rx+0x7c>)
     8e0:	4798      	blx	r3
     8e2:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     8e4:	2100      	movs	r1, #0
     8e6:	4620      	mov	r0, r4
     8e8:	4b06      	ldr	r3, [pc, #24]	; (904 <_spi_dev_rx+0x80>)
     8ea:	4798      	blx	r3
		spi->stat = 0;
     8ec:	2300      	movs	r3, #0
     8ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     8f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     8f4:	b10b      	cbz	r3, 8fa <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     8f6:	1f20      	subs	r0, r4, #4
     8f8:	4798      	blx	r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	00001a51 	.word	0x00001a51
     900:	00001a21 	.word	0x00001a21
     904:	000019a5 	.word	0x000019a5

00000908 <spi_m_async_init>:
{
     908:	b570      	push	{r4, r5, r6, lr}
     90a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     90c:	4606      	mov	r6, r0
     90e:	b330      	cbz	r0, 95e <spi_m_async_init+0x56>
     910:	1c08      	adds	r0, r1, #0
     912:	bf18      	it	ne
     914:	2001      	movne	r0, #1
     916:	22a5      	movs	r2, #165	; 0xa5
     918:	4912      	ldr	r1, [pc, #72]	; (964 <spi_m_async_init+0x5c>)
     91a:	4b13      	ldr	r3, [pc, #76]	; (968 <spi_m_async_init+0x60>)
     91c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     91e:	4634      	mov	r4, r6
     920:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     924:	4629      	mov	r1, r5
     926:	4620      	mov	r0, r4
     928:	4b10      	ldr	r3, [pc, #64]	; (96c <spi_m_async_init+0x64>)
     92a:	4798      	blx	r3
	if (rc >= 0) {
     92c:	2800      	cmp	r0, #0
     92e:	db15      	blt.n	95c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     930:	4a0f      	ldr	r2, [pc, #60]	; (970 <spi_m_async_init+0x68>)
     932:	2100      	movs	r1, #0
     934:	4620      	mov	r0, r4
     936:	4d0f      	ldr	r5, [pc, #60]	; (974 <spi_m_async_init+0x6c>)
     938:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     93a:	4a0f      	ldr	r2, [pc, #60]	; (978 <spi_m_async_init+0x70>)
     93c:	2101      	movs	r1, #1
     93e:	4620      	mov	r0, r4
     940:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     942:	4a0e      	ldr	r2, [pc, #56]	; (97c <spi_m_async_init+0x74>)
     944:	2102      	movs	r1, #2
     946:	4620      	mov	r0, r4
     948:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     94a:	4a0d      	ldr	r2, [pc, #52]	; (980 <spi_m_async_init+0x78>)
     94c:	2103      	movs	r1, #3
     94e:	4620      	mov	r0, r4
     950:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     952:	4b0c      	ldr	r3, [pc, #48]	; (984 <spi_m_async_init+0x7c>)
     954:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     956:	4b0c      	ldr	r3, [pc, #48]	; (988 <spi_m_async_init+0x80>)
     958:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     95a:	2000      	movs	r0, #0
}
     95c:	bd70      	pop	{r4, r5, r6, pc}
     95e:	2000      	movs	r0, #0
     960:	e7d9      	b.n	916 <spi_m_async_init+0xe>
     962:	bf00      	nop
     964:	000038c4 	.word	0x000038c4
     968:	00000f2d 	.word	0x00000f2d
     96c:	00001909 	.word	0x00001909
     970:	0000083d 	.word	0x0000083d
     974:	00001a7d 	.word	0x00001a7d
     978:	00000885 	.word	0x00000885
     97c:	00000815 	.word	0x00000815
     980:	000007d9 	.word	0x000007d9
     984:	00000789 	.word	0x00000789
     988:	00000749 	.word	0x00000749

0000098c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     98c:	4b0f      	ldr	r3, [pc, #60]	; (9cc <_usb_d_find_ep+0x40>)
     98e:	7859      	ldrb	r1, [r3, #1]
     990:	4288      	cmp	r0, r1
     992:	d018      	beq.n	9c6 <_usb_d_find_ep+0x3a>
{
     994:	b430      	push	{r4, r5}
     996:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     998:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     99a:	f000 050f 	and.w	r5, r0, #15
     99e:	e007      	b.n	9b0 <_usb_d_find_ep+0x24>
     9a0:	3301      	adds	r3, #1
     9a2:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     9a4:	2b04      	cmp	r3, #4
     9a6:	d009      	beq.n	9bc <_usb_d_find_ep+0x30>
     9a8:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     9aa:	7851      	ldrb	r1, [r2, #1]
     9ac:	4281      	cmp	r1, r0
     9ae:	d007      	beq.n	9c0 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     9b0:	7814      	ldrb	r4, [r2, #0]
     9b2:	2c00      	cmp	r4, #0
     9b4:	d1f4      	bne.n	9a0 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     9b6:	428d      	cmp	r5, r1
     9b8:	d1f2      	bne.n	9a0 <_usb_d_find_ep+0x14>
     9ba:	e001      	b.n	9c0 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     9bc:	f04f 33ff 	mov.w	r3, #4294967295
}
     9c0:	4618      	mov	r0, r3
     9c2:	bc30      	pop	{r4, r5}
     9c4:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     9c6:	2300      	movs	r3, #0
}
     9c8:	4618      	mov	r0, r3
     9ca:	4770      	bx	lr
     9cc:	20000084 	.word	0x20000084

000009d0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     9d0:	2000      	movs	r0, #0
     9d2:	4770      	bx	lr

000009d4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     9d4:	b538      	push	{r3, r4, r5, lr}
     9d6:	4604      	mov	r4, r0
     9d8:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     9da:	4b09      	ldr	r3, [pc, #36]	; (a00 <usb_d_cb_trans_more+0x2c>)
     9dc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     9de:	4b09      	ldr	r3, [pc, #36]	; (a04 <usb_d_cb_trans_more+0x30>)
     9e0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     9e4:	789b      	ldrb	r3, [r3, #2]
     9e6:	2b03      	cmp	r3, #3
     9e8:	d001      	beq.n	9ee <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     9ea:	2000      	movs	r0, #0
}
     9ec:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <usb_d_cb_trans_more+0x30>)
     9f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     9f4:	6983      	ldr	r3, [r0, #24]
     9f6:	4629      	mov	r1, r5
     9f8:	4620      	mov	r0, r4
     9fa:	4798      	blx	r3
     9fc:	bd38      	pop	{r3, r4, r5, pc}
     9fe:	bf00      	nop
     a00:	0000098d 	.word	0x0000098d
     a04:	20000084 	.word	0x20000084

00000a08 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     a08:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0a:	b085      	sub	sp, #20
     a0c:	4606      	mov	r6, r0
     a0e:	460d      	mov	r5, r1
     a10:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     a12:	4b4d      	ldr	r3, [pc, #308]	; (b48 <_usb_d_cb_trans_done+0x140>)
     a14:	4798      	blx	r3
     a16:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     a18:	2d00      	cmp	r5, #0
     a1a:	d15b      	bne.n	ad4 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     a1c:	4a4b      	ldr	r2, [pc, #300]	; (b4c <_usb_d_cb_trans_done+0x144>)
     a1e:	0143      	lsls	r3, r0, #5
     a20:	18d1      	adds	r1, r2, r3
     a22:	2000      	movs	r0, #0
     a24:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a26:	5cd3      	ldrb	r3, [r2, r3]
     a28:	b173      	cbz	r3, a48 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     a2a:	4b48      	ldr	r3, [pc, #288]	; (b4c <_usb_d_cb_trans_done+0x144>)
     a2c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a30:	2201      	movs	r2, #1
     a32:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     a34:	4845      	ldr	r0, [pc, #276]	; (b4c <_usb_d_cb_trans_done+0x144>)
     a36:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     a3a:	69c3      	ldr	r3, [r0, #28]
     a3c:	463a      	mov	r2, r7
     a3e:	78c1      	ldrb	r1, [r0, #3]
     a40:	4630      	mov	r0, r6
     a42:	4798      	blx	r3
}
     a44:	b005      	add	sp, #20
     a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     a48:	788b      	ldrb	r3, [r1, #2]
     a4a:	2b03      	cmp	r3, #3
     a4c:	d00b      	beq.n	a66 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     a4e:	483f      	ldr	r0, [pc, #252]	; (b4c <_usb_d_cb_trans_done+0x144>)
     a50:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     a54:	4614      	mov	r4, r2
     a56:	69d3      	ldr	r3, [r2, #28]
     a58:	320c      	adds	r2, #12
     a5a:	2100      	movs	r1, #0
     a5c:	7860      	ldrb	r0, [r4, #1]
     a5e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a60:	2302      	movs	r3, #2
     a62:	70a3      	strb	r3, [r4, #2]
     a64:	e7ee      	b.n	a44 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     a66:	460b      	mov	r3, r1
     a68:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     a6c:	460a      	mov	r2, r1
     a6e:	69ce      	ldr	r6, [r1, #28]
     a70:	320c      	adds	r2, #12
     a72:	2101      	movs	r1, #1
     a74:	7858      	ldrb	r0, [r3, #1]
     a76:	47b0      	blx	r6
		if (err) {
     a78:	b1a0      	cbz	r0, aa4 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     a7a:	4b34      	ldr	r3, [pc, #208]	; (b4c <_usb_d_cb_trans_done+0x144>)
     a7c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a80:	2205      	movs	r2, #5
     a82:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     a84:	2202      	movs	r2, #2
     a86:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     a88:	2d00      	cmp	r5, #0
     a8a:	db09      	blt.n	aa0 <_usb_d_cb_trans_done+0x98>
     a8c:	482f      	ldr	r0, [pc, #188]	; (b4c <_usb_d_cb_trans_done+0x144>)
     a8e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     a92:	7840      	ldrb	r0, [r0, #1]
     a94:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     a98:	2101      	movs	r1, #1
     a9a:	4b2d      	ldr	r3, [pc, #180]	; (b50 <_usb_d_cb_trans_done+0x148>)
     a9c:	4798      	blx	r3
     a9e:	e7d1      	b.n	a44 <_usb_d_cb_trans_done+0x3c>
     aa0:	7858      	ldrb	r0, [r3, #1]
     aa2:	e7f9      	b.n	a98 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     aa4:	4829      	ldr	r0, [pc, #164]	; (b4c <_usb_d_cb_trans_done+0x144>)
     aa6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     aaa:	2304      	movs	r3, #4
     aac:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     aae:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     ab0:	2200      	movs	r2, #0
     ab2:	9201      	str	r2, [sp, #4]
     ab4:	9202      	str	r2, [sp, #8]
     ab6:	4295      	cmp	r5, r2
     ab8:	bfac      	ite	ge
     aba:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     abe:	f003 030f 	andlt.w	r3, r3, #15
     ac2:	f88d 300c 	strb.w	r3, [sp, #12]
     ac6:	2301      	movs	r3, #1
     ac8:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     acc:	a801      	add	r0, sp, #4
     ace:	4b21      	ldr	r3, [pc, #132]	; (b54 <_usb_d_cb_trans_done+0x14c>)
     ad0:	4798      	blx	r3
     ad2:	e7b7      	b.n	a44 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     ad4:	2d01      	cmp	r5, #1
     ad6:	d00a      	beq.n	aee <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     ad8:	2d02      	cmp	r5, #2
     ada:	d01c      	beq.n	b16 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     adc:	2d03      	cmp	r5, #3
     ade:	d02a      	beq.n	b36 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     ae0:	4b1a      	ldr	r3, [pc, #104]	; (b4c <_usb_d_cb_trans_done+0x144>)
     ae2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     ae6:	2206      	movs	r2, #6
     ae8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     aea:	70da      	strb	r2, [r3, #3]
     aec:	e7a2      	b.n	a34 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     aee:	4a17      	ldr	r2, [pc, #92]	; (b4c <_usb_d_cb_trans_done+0x144>)
     af0:	0143      	lsls	r3, r0, #5
     af2:	18d1      	adds	r1, r2, r3
     af4:	2002      	movs	r0, #2
     af6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     af8:	5cd3      	ldrb	r3, [r2, r3]
     afa:	b12b      	cbz	r3, b08 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     afc:	4b13      	ldr	r3, [pc, #76]	; (b4c <_usb_d_cb_trans_done+0x144>)
     afe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b02:	2205      	movs	r2, #5
     b04:	709a      	strb	r2, [r3, #2]
     b06:	e795      	b.n	a34 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     b08:	460b      	mov	r3, r1
     b0a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b0c:	2100      	movs	r1, #0
     b0e:	4630      	mov	r0, r6
     b10:	4b0f      	ldr	r3, [pc, #60]	; (b50 <_usb_d_cb_trans_done+0x148>)
     b12:	4798      	blx	r3
     b14:	e78e      	b.n	a34 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     b16:	4a0d      	ldr	r2, [pc, #52]	; (b4c <_usb_d_cb_trans_done+0x144>)
     b18:	0143      	lsls	r3, r0, #5
     b1a:	18d1      	adds	r1, r2, r3
     b1c:	2004      	movs	r0, #4
     b1e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     b20:	5cd3      	ldrb	r3, [r2, r3]
     b22:	b12b      	cbz	r3, b30 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     b24:	4b09      	ldr	r3, [pc, #36]	; (b4c <_usb_d_cb_trans_done+0x144>)
     b26:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b2a:	2201      	movs	r2, #1
     b2c:	709a      	strb	r2, [r3, #2]
     b2e:	e781      	b.n	a34 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     b30:	2302      	movs	r3, #2
     b32:	708b      	strb	r3, [r1, #2]
			return;
     b34:	e786      	b.n	a44 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <_usb_d_cb_trans_done+0x144>)
     b38:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     b3c:	2200      	movs	r2, #0
     b3e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     b40:	2205      	movs	r2, #5
     b42:	70da      	strb	r2, [r3, #3]
     b44:	e776      	b.n	a34 <_usb_d_cb_trans_done+0x2c>
     b46:	bf00      	nop
     b48:	0000098d 	.word	0x0000098d
     b4c:	20000084 	.word	0x20000084
     b50:	00002931 	.word	0x00002931
     b54:	00002ad9 	.word	0x00002ad9

00000b58 <usb_d_cb_trans_setup>:
{
     b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b5c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     b5e:	4b1c      	ldr	r3, [pc, #112]	; (bd0 <usb_d_cb_trans_setup+0x78>)
     b60:	4798      	blx	r3
     b62:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     b64:	4c1b      	ldr	r4, [pc, #108]	; (bd4 <usb_d_cb_trans_setup+0x7c>)
     b66:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     b6a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     b6c:	4621      	mov	r1, r4
     b6e:	4628      	mov	r0, r5
     b70:	4b19      	ldr	r3, [pc, #100]	; (bd8 <usb_d_cb_trans_setup+0x80>)
     b72:	4798      	blx	r3
	if (n != 8) {
     b74:	b2c0      	uxtb	r0, r0
     b76:	2808      	cmp	r0, #8
     b78:	d009      	beq.n	b8e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b7a:	2101      	movs	r1, #1
     b7c:	4628      	mov	r0, r5
     b7e:	4c17      	ldr	r4, [pc, #92]	; (bdc <usb_d_cb_trans_setup+0x84>)
     b80:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b82:	2101      	movs	r1, #1
     b84:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     b88:	47a0      	blx	r4
		return;
     b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b8e:	2100      	movs	r1, #0
     b90:	4628      	mov	r0, r5
     b92:	4f12      	ldr	r7, [pc, #72]	; (bdc <usb_d_cb_trans_setup+0x84>)
     b94:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     b96:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     b9a:	2100      	movs	r1, #0
     b9c:	4640      	mov	r0, r8
     b9e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     ba0:	4b0c      	ldr	r3, [pc, #48]	; (bd4 <usb_d_cb_trans_setup+0x7c>)
     ba2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     ba6:	2201      	movs	r2, #1
     ba8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     baa:	695b      	ldr	r3, [r3, #20]
     bac:	4621      	mov	r1, r4
     bae:	4628      	mov	r0, r5
     bb0:	4798      	blx	r3
     bb2:	b108      	cbz	r0, bb8 <usb_d_cb_trans_setup+0x60>
     bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <usb_d_cb_trans_setup+0x7c>)
     bba:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     bbe:	2305      	movs	r3, #5
     bc0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     bc2:	2101      	movs	r1, #1
     bc4:	4628      	mov	r0, r5
     bc6:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     bc8:	2101      	movs	r1, #1
     bca:	4640      	mov	r0, r8
     bcc:	47b8      	blx	r7
     bce:	e7f1      	b.n	bb4 <usb_d_cb_trans_setup+0x5c>
     bd0:	0000098d 	.word	0x0000098d
     bd4:	20000084 	.word	0x20000084
     bd8:	00002a79 	.word	0x00002a79
     bdc:	00002931 	.word	0x00002931

00000be0 <usb_d_init>:

int32_t usb_d_init(void)
{
     be0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     be2:	4b11      	ldr	r3, [pc, #68]	; (c28 <usb_d_init+0x48>)
     be4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     be6:	2800      	cmp	r0, #0
     be8:	db1c      	blt.n	c24 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     bea:	4c10      	ldr	r4, [pc, #64]	; (c2c <usb_d_init+0x4c>)
     bec:	2280      	movs	r2, #128	; 0x80
     bee:	2100      	movs	r1, #0
     bf0:	4620      	mov	r0, r4
     bf2:	4b0f      	ldr	r3, [pc, #60]	; (c30 <usb_d_init+0x50>)
     bf4:	4798      	blx	r3
     bf6:	4623      	mov	r3, r4
     bf8:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     bfc:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     bfe:	4a0d      	ldr	r2, [pc, #52]	; (c34 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     c00:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     c02:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     c04:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     c06:	61da      	str	r2, [r3, #28]
     c08:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c0a:	4283      	cmp	r3, r0
     c0c:	d1f8      	bne.n	c00 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     c0e:	490a      	ldr	r1, [pc, #40]	; (c38 <usb_d_init+0x58>)
     c10:	2000      	movs	r0, #0
     c12:	4c0a      	ldr	r4, [pc, #40]	; (c3c <usb_d_init+0x5c>)
     c14:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     c16:	490a      	ldr	r1, [pc, #40]	; (c40 <usb_d_init+0x60>)
     c18:	2001      	movs	r0, #1
     c1a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     c1c:	4909      	ldr	r1, [pc, #36]	; (c44 <usb_d_init+0x64>)
     c1e:	2002      	movs	r0, #2
     c20:	47a0      	blx	r4
	return ERR_NONE;
     c22:	2000      	movs	r0, #0
}
     c24:	bd10      	pop	{r4, pc}
     c26:	bf00      	nop
     c28:	00002325 	.word	0x00002325
     c2c:	20000084 	.word	0x20000084
     c30:	00003893 	.word	0x00003893
     c34:	000009d1 	.word	0x000009d1
     c38:	00000b59 	.word	0x00000b59
     c3c:	00002cdd 	.word	0x00002cdd
     c40:	000009d5 	.word	0x000009d5
     c44:	00000a09 	.word	0x00000a09

00000c48 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     c48:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     c4a:	4b01      	ldr	r3, [pc, #4]	; (c50 <usb_d_register_callback+0x8>)
     c4c:	4798      	blx	r3
     c4e:	bd08      	pop	{r3, pc}
     c50:	00002cb9 	.word	0x00002cb9

00000c54 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     c54:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     c56:	4b01      	ldr	r3, [pc, #4]	; (c5c <usb_d_enable+0x8>)
     c58:	4798      	blx	r3
}
     c5a:	bd08      	pop	{r3, pc}
     c5c:	00002421 	.word	0x00002421

00000c60 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     c60:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     c62:	4b01      	ldr	r3, [pc, #4]	; (c68 <usb_d_attach+0x8>)
     c64:	4798      	blx	r3
     c66:	bd08      	pop	{r3, pc}
     c68:	0000248d 	.word	0x0000248d

00000c6c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     c6c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     c6e:	4b01      	ldr	r3, [pc, #4]	; (c74 <usb_d_set_address+0x8>)
     c70:	4798      	blx	r3
     c72:	bd08      	pop	{r3, pc}
     c74:	0000249f 	.word	0x0000249f

00000c78 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c7a:	4606      	mov	r6, r0
     c7c:	460c      	mov	r4, r1
     c7e:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     c80:	4b0f      	ldr	r3, [pc, #60]	; (cc0 <usb_d_ep_init+0x48>)
     c82:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     c84:	2800      	cmp	r0, #0
     c86:	da14      	bge.n	cb2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     c88:	20ff      	movs	r0, #255	; 0xff
     c8a:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <usb_d_ep_init+0x48>)
     c8c:	4798      	blx	r3
		if (ep_index < 0) {
     c8e:	1e05      	subs	r5, r0, #0
     c90:	db12      	blt.n	cb8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     c92:	463a      	mov	r2, r7
     c94:	4621      	mov	r1, r4
     c96:	4630      	mov	r0, r6
     c98:	4b0a      	ldr	r3, [pc, #40]	; (cc4 <usb_d_ep_init+0x4c>)
     c9a:	4798      	blx	r3
	if (rc < 0) {
     c9c:	2800      	cmp	r0, #0
     c9e:	db0d      	blt.n	cbc <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     ca0:	4b09      	ldr	r3, [pc, #36]	; (cc8 <usb_d_ep_init+0x50>)
     ca2:	0168      	lsls	r0, r5, #5
     ca4:	181a      	adds	r2, r3, r0
     ca6:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     ca8:	f004 0403 	and.w	r4, r4, #3
     cac:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     cae:	2000      	movs	r0, #0
     cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     cb2:	f06f 0013 	mvn.w	r0, #19
     cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     cb8:	f06f 0014 	mvn.w	r0, #20
}
     cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cbe:	bf00      	nop
     cc0:	0000098d 	.word	0x0000098d
     cc4:	000024ad 	.word	0x000024ad
     cc8:	20000084 	.word	0x20000084

00000ccc <usb_d_ep0_init>:
{
     ccc:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     cce:	4602      	mov	r2, r0
     cd0:	2100      	movs	r1, #0
     cd2:	4608      	mov	r0, r1
     cd4:	4b01      	ldr	r3, [pc, #4]	; (cdc <usb_d_ep0_init+0x10>)
     cd6:	4798      	blx	r3
}
     cd8:	bd08      	pop	{r3, pc}
     cda:	bf00      	nop
     cdc:	00000c79 	.word	0x00000c79

00000ce0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     ce0:	b538      	push	{r3, r4, r5, lr}
     ce2:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ce4:	4b06      	ldr	r3, [pc, #24]	; (d00 <usb_d_ep_deinit+0x20>)
     ce6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     ce8:	1e04      	subs	r4, r0, #0
     cea:	db07      	blt.n	cfc <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     cec:	4628      	mov	r0, r5
     cee:	4b05      	ldr	r3, [pc, #20]	; (d04 <usb_d_ep_deinit+0x24>)
     cf0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     cf2:	4805      	ldr	r0, [pc, #20]	; (d08 <usb_d_ep_deinit+0x28>)
     cf4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     cf8:	23ff      	movs	r3, #255	; 0xff
     cfa:	7043      	strb	r3, [r0, #1]
     cfc:	bd38      	pop	{r3, r4, r5, pc}
     cfe:	bf00      	nop
     d00:	0000098d 	.word	0x0000098d
     d04:	000025c5 	.word	0x000025c5
     d08:	20000084 	.word	0x20000084

00000d0c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     d0c:	b538      	push	{r3, r4, r5, lr}
     d0e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     d10:	4b0e      	ldr	r3, [pc, #56]	; (d4c <usb_d_ep_enable+0x40>)
     d12:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     d14:	1e04      	subs	r4, r0, #0
     d16:	db16      	blt.n	d46 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     d18:	0163      	lsls	r3, r4, #5
     d1a:	4a0d      	ldr	r2, [pc, #52]	; (d50 <usb_d_ep_enable+0x44>)
     d1c:	5cd3      	ldrb	r3, [r2, r3]
     d1e:	2b00      	cmp	r3, #0
     d20:	bf0c      	ite	eq
     d22:	2202      	moveq	r2, #2
     d24:	2201      	movne	r2, #1
     d26:	4b0a      	ldr	r3, [pc, #40]	; (d50 <usb_d_ep_enable+0x44>)
     d28:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     d2c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     d2e:	4628      	mov	r0, r5
     d30:	4b08      	ldr	r3, [pc, #32]	; (d54 <usb_d_ep_enable+0x48>)
     d32:	4798      	blx	r3
	if (rc < 0) {
     d34:	2800      	cmp	r0, #0
     d36:	db00      	blt.n	d3a <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     d38:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     d3a:	4b05      	ldr	r3, [pc, #20]	; (d50 <usb_d_ep_enable+0x44>)
     d3c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     d40:	2300      	movs	r3, #0
     d42:	70a3      	strb	r3, [r4, #2]
     d44:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     d46:	f06f 0011 	mvn.w	r0, #17
     d4a:	e7f5      	b.n	d38 <usb_d_ep_enable+0x2c>
     d4c:	0000098d 	.word	0x0000098d
     d50:	20000084 	.word	0x20000084
     d54:	00002689 	.word	0x00002689

00000d58 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d5c:	b086      	sub	sp, #24
     d5e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     d60:	7a07      	ldrb	r7, [r0, #8]
     d62:	4638      	mov	r0, r7
     d64:	4b3f      	ldr	r3, [pc, #252]	; (e64 <usb_d_ep_transfer+0x10c>)
     d66:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     d68:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     d6a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     d6e:	1e06      	subs	r6, r0, #0
     d70:	db72      	blt.n	e58 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     d72:	a804      	add	r0, sp, #16
     d74:	4b3c      	ldr	r3, [pc, #240]	; (e68 <usb_d_ep_transfer+0x110>)
     d76:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     d78:	4b3c      	ldr	r3, [pc, #240]	; (e6c <usb_d_ep_transfer+0x114>)
     d7a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     d7e:	789b      	ldrb	r3, [r3, #2]
     d80:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     d84:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d88:	b2db      	uxtb	r3, r3
     d8a:	2b01      	cmp	r3, #1
     d8c:	d011      	beq.n	db2 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     d8e:	a804      	add	r0, sp, #16
     d90:	4b37      	ldr	r3, [pc, #220]	; (e70 <usb_d_ep_transfer+0x118>)
     d92:	4798      	blx	r3
		switch (state) {
     d94:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d98:	b2db      	uxtb	r3, r3
     d9a:	2b05      	cmp	r3, #5
     d9c:	d05f      	beq.n	e5e <usb_d_ep_transfer+0x106>
     d9e:	2b06      	cmp	r3, #6
     da0:	d023      	beq.n	dea <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     da2:	2b00      	cmp	r3, #0
     da4:	bf0c      	ite	eq
     da6:	f06f 0012 	mvneq.w	r0, #18
     daa:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     dac:	b006      	add	sp, #24
     dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     db2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e6c <usb_d_ep_transfer+0x114>
     db6:	ea4f 1946 	mov.w	r9, r6, lsl #5
     dba:	eb0a 0309 	add.w	r3, sl, r9
     dbe:	2203      	movs	r2, #3
     dc0:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     dc2:	a804      	add	r0, sp, #16
     dc4:	4b2a      	ldr	r3, [pc, #168]	; (e70 <usb_d_ep_transfer+0x118>)
     dc6:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     dc8:	f81a 3009 	ldrb.w	r3, [sl, r9]
     dcc:	b183      	cbz	r3, df0 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dce:	7a22      	ldrb	r2, [r4, #8]
     dd0:	3500      	adds	r5, #0
     dd2:	bf18      	it	ne
     dd4:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     dd6:	6823      	ldr	r3, [r4, #0]
     dd8:	9301      	str	r3, [sp, #4]
     dda:	f8cd 8008 	str.w	r8, [sp, #8]
     dde:	f017 0f80 	tst.w	r7, #128	; 0x80
     de2:	d119      	bne.n	e18 <usb_d_ep_transfer+0xc0>
     de4:	f002 030f 	and.w	r3, r2, #15
     de8:	e018      	b.n	e1c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     dea:	f06f 000f 	mvn.w	r0, #15
     dee:	e7dd      	b.n	dac <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     df0:	4b1e      	ldr	r3, [pc, #120]	; (e6c <usb_d_ep_transfer+0x114>)
     df2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     df6:	7cda      	ldrb	r2, [r3, #19]
     df8:	7c9d      	ldrb	r5, [r3, #18]
     dfa:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     dfe:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     e00:	b9a5      	cbnz	r5, e2c <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     e02:	4b1a      	ldr	r3, [pc, #104]	; (e6c <usb_d_ep_transfer+0x114>)
     e04:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     e08:	2304      	movs	r3, #4
     e0a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     e0c:	2300      	movs	r3, #0
			zlp                 = true;
     e0e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e10:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     e12:	6821      	ldr	r1, [r4, #0]
     e14:	9101      	str	r1, [sp, #4]
     e16:	9302      	str	r3, [sp, #8]
     e18:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     e1c:	f88d 300c 	strb.w	r3, [sp, #12]
     e20:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     e24:	a801      	add	r0, sp, #4
     e26:	4b13      	ldr	r3, [pc, #76]	; (e74 <usb_d_ep_transfer+0x11c>)
     e28:	4798      	blx	r3
	return rc;
     e2a:	e7bf      	b.n	dac <usb_d_ep_transfer+0x54>
     e2c:	4643      	mov	r3, r8
     e2e:	45a8      	cmp	r8, r5
     e30:	bf28      	it	cs
     e32:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     e34:	4a0d      	ldr	r2, [pc, #52]	; (e6c <usb_d_ep_transfer+0x114>)
     e36:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     e3a:	f996 200c 	ldrsb.w	r2, [r6, #12]
     e3e:	2a00      	cmp	r2, #0
     e40:	db05      	blt.n	e4e <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e42:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     e44:	6821      	ldr	r1, [r4, #0]
     e46:	9101      	str	r1, [sp, #4]
     e48:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e4a:	2500      	movs	r5, #0
     e4c:	e7ca      	b.n	de4 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     e4e:	429d      	cmp	r5, r3
     e50:	bf94      	ite	ls
     e52:	2500      	movls	r5, #0
     e54:	2501      	movhi	r5, #1
     e56:	e7db      	b.n	e10 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     e58:	f06f 0011 	mvn.w	r0, #17
     e5c:	e7a6      	b.n	dac <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     e5e:	2002      	movs	r0, #2
     e60:	e7a4      	b.n	dac <usb_d_ep_transfer+0x54>
     e62:	bf00      	nop
     e64:	0000098d 	.word	0x0000098d
     e68:	0000062d 	.word	0x0000062d
     e6c:	20000084 	.word	0x20000084
     e70:	0000063b 	.word	0x0000063b
     e74:	00002ad9 	.word	0x00002ad9

00000e78 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     e78:	b538      	push	{r3, r4, r5, lr}
     e7a:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     e7c:	b141      	cbz	r1, e90 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     e7e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e80:	bf0c      	ite	eq
     e82:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     e84:	2102      	movne	r1, #2
     e86:	4b13      	ldr	r3, [pc, #76]	; (ed4 <usb_d_ep_halt+0x5c>)
     e88:	4798      	blx	r3
     e8a:	4603      	mov	r3, r0
	}
}
     e8c:	4618      	mov	r0, r3
     e8e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     e90:	4b11      	ldr	r3, [pc, #68]	; (ed8 <usb_d_ep_halt+0x60>)
     e92:	4798      	blx	r3
	if (ep_index < 0) {
     e94:	1e05      	subs	r5, r0, #0
     e96:	db19      	blt.n	ecc <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     e98:	2102      	movs	r1, #2
     e9a:	4620      	mov	r0, r4
     e9c:	4b0d      	ldr	r3, [pc, #52]	; (ed4 <usb_d_ep_halt+0x5c>)
     e9e:	4798      	blx	r3
     ea0:	4603      	mov	r3, r0
     ea2:	2800      	cmp	r0, #0
     ea4:	d0f2      	beq.n	e8c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ea6:	2100      	movs	r1, #0
     ea8:	4620      	mov	r0, r4
     eaa:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <usb_d_ep_halt+0x5c>)
     eac:	4798      	blx	r3
		if (rc < 0) {
     eae:	1e03      	subs	r3, r0, #0
     eb0:	dbec      	blt.n	e8c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     eb2:	4b0a      	ldr	r3, [pc, #40]	; (edc <usb_d_ep_halt+0x64>)
     eb4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     eb8:	2201      	movs	r2, #1
     eba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     ebc:	2103      	movs	r1, #3
     ebe:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     ec0:	69db      	ldr	r3, [r3, #28]
     ec2:	2200      	movs	r2, #0
     ec4:	4620      	mov	r0, r4
     ec6:	4798      	blx	r3
	return ERR_NONE;
     ec8:	2300      	movs	r3, #0
     eca:	e7df      	b.n	e8c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     ecc:	f06f 0311 	mvn.w	r3, #17
     ed0:	e7dc      	b.n	e8c <usb_d_ep_halt+0x14>
     ed2:	bf00      	nop
     ed4:	00002931 	.word	0x00002931
     ed8:	0000098d 	.word	0x0000098d
     edc:	20000084 	.word	0x20000084

00000ee0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     ee0:	b538      	push	{r3, r4, r5, lr}
     ee2:	460d      	mov	r5, r1
     ee4:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     ee6:	4b0e      	ldr	r3, [pc, #56]	; (f20 <usb_d_ep_register_callback+0x40>)
     ee8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     eea:	4b0e      	ldr	r3, [pc, #56]	; (f24 <usb_d_ep_register_callback+0x44>)
     eec:	2c00      	cmp	r4, #0
     eee:	bf08      	it	eq
     ef0:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     ef2:	2800      	cmp	r0, #0
     ef4:	db13      	blt.n	f1e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     ef6:	2d01      	cmp	r5, #1
     ef8:	d008      	beq.n	f0c <usb_d_ep_register_callback+0x2c>
     efa:	b115      	cbz	r5, f02 <usb_d_ep_register_callback+0x22>
     efc:	2d02      	cmp	r5, #2
     efe:	d00a      	beq.n	f16 <usb_d_ep_register_callback+0x36>
     f00:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     f02:	4b09      	ldr	r3, [pc, #36]	; (f28 <usb_d_ep_register_callback+0x48>)
     f04:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     f08:	6144      	str	r4, [r0, #20]
		break;
     f0a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     f0c:	4b06      	ldr	r3, [pc, #24]	; (f28 <usb_d_ep_register_callback+0x48>)
     f0e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     f12:	6184      	str	r4, [r0, #24]
		break;
     f14:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     f16:	4b04      	ldr	r3, [pc, #16]	; (f28 <usb_d_ep_register_callback+0x48>)
     f18:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     f1c:	61c4      	str	r4, [r0, #28]
     f1e:	bd38      	pop	{r3, r4, r5, pc}
     f20:	0000098d 	.word	0x0000098d
     f24:	000009d1 	.word	0x000009d1
     f28:	20000084 	.word	0x20000084

00000f2c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f2c:	b900      	cbnz	r0, f30 <assert+0x4>
		__asm("BKPT #0");
     f2e:	be00      	bkpt	0x0000
     f30:	4770      	bx	lr

00000f32 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f32:	6803      	ldr	r3, [r0, #0]
     f34:	b14b      	cbz	r3, f4a <is_list_element+0x18>
		if (it == element) {
     f36:	428b      	cmp	r3, r1
     f38:	d009      	beq.n	f4e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	b11b      	cbz	r3, f46 <is_list_element+0x14>
		if (it == element) {
     f3e:	4299      	cmp	r1, r3
     f40:	d1fb      	bne.n	f3a <is_list_element+0x8>
			return true;
     f42:	2001      	movs	r0, #1
		}
	}

	return false;
}
     f44:	4770      	bx	lr
	return false;
     f46:	2000      	movs	r0, #0
     f48:	4770      	bx	lr
     f4a:	2000      	movs	r0, #0
     f4c:	4770      	bx	lr
			return true;
     f4e:	2001      	movs	r0, #1
     f50:	4770      	bx	lr
	...

00000f54 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	4605      	mov	r5, r0
     f58:	460e      	mov	r6, r1
	struct list_element *it = list->head;
     f5a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     f5c:	4b0a      	ldr	r3, [pc, #40]	; (f88 <list_insert_at_end+0x34>)
     f5e:	4798      	blx	r3
     f60:	f080 0001 	eor.w	r0, r0, #1
     f64:	224f      	movs	r2, #79	; 0x4f
     f66:	4909      	ldr	r1, [pc, #36]	; (f8c <list_insert_at_end+0x38>)
     f68:	b2c0      	uxtb	r0, r0
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <list_insert_at_end+0x3c>)
     f6c:	4798      	blx	r3

	if (!list->head) {
     f6e:	682b      	ldr	r3, [r5, #0]
     f70:	b91b      	cbnz	r3, f7a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
     f72:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     f74:	6033      	str	r3, [r6, #0]
		return;
     f76:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
     f78:	461c      	mov	r4, r3
	while (it->next) {
     f7a:	6823      	ldr	r3, [r4, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d1fb      	bne.n	f78 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
     f80:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     f82:	6033      	str	r3, [r6, #0]
     f84:	bd70      	pop	{r4, r5, r6, pc}
     f86:	bf00      	nop
     f88:	00000f33 	.word	0x00000f33
     f8c:	000038e4 	.word	0x000038e4
     f90:	00000f2d 	.word	0x00000f2d

00000f94 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f94:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f96:	4a08      	ldr	r2, [pc, #32]	; (fb8 <_init_chip+0x24>)
     f98:	8813      	ldrh	r3, [r2, #0]
     f9a:	b29b      	uxth	r3, r3
     f9c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f9e:	4b07      	ldr	r3, [pc, #28]	; (fbc <_init_chip+0x28>)
     fa0:	4798      	blx	r3
	_oscctrl_init_sources();
     fa2:	4b07      	ldr	r3, [pc, #28]	; (fc0 <_init_chip+0x2c>)
     fa4:	4798      	blx	r3
	_mclk_init();
     fa6:	4b07      	ldr	r3, [pc, #28]	; (fc4 <_init_chip+0x30>)
     fa8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     faa:	4b07      	ldr	r3, [pc, #28]	; (fc8 <_init_chip+0x34>)
     fac:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     fae:	f640 70ff 	movw	r0, #4095	; 0xfff
     fb2:	4b06      	ldr	r3, [pc, #24]	; (fcc <_init_chip+0x38>)
     fb4:	4798      	blx	r3
     fb6:	bd08      	pop	{r3, pc}
     fb8:	41004000 	.word	0x41004000
     fbc:	00001039 	.word	0x00001039
     fc0:	0000104d 	.word	0x0000104d
     fc4:	0000102d 	.word	0x0000102d
     fc8:	00001069 	.word	0x00001069
     fcc:	00000fd1 	.word	0x00000fd1

00000fd0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     fd0:	f010 0f01 	tst.w	r0, #1
     fd4:	d008      	beq.n	fe8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     fd6:	4a11      	ldr	r2, [pc, #68]	; (101c <_gclk_init_generators_by_fref+0x4c>)
     fd8:	4b11      	ldr	r3, [pc, #68]	; (1020 <_gclk_init_generators_by_fref+0x50>)
     fda:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     fdc:	4619      	mov	r1, r3
     fde:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     fe2:	684b      	ldr	r3, [r1, #4]
     fe4:	4213      	tst	r3, r2
     fe6:	d1fc      	bne.n	fe2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
     fe8:	f410 6f80 	tst.w	r0, #1024	; 0x400
     fec:	d008      	beq.n	1000 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     fee:	4a0d      	ldr	r2, [pc, #52]	; (1024 <_gclk_init_generators_by_fref+0x54>)
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <_gclk_init_generators_by_fref+0x50>)
     ff2:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ff4:	4619      	mov	r1, r3
     ff6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     ffa:	684b      	ldr	r3, [r1, #4]
     ffc:	4213      	tst	r3, r2
     ffe:	d1fc      	bne.n	ffa <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1000:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1004:	d008      	beq.n	1018 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1006:	4a08      	ldr	r2, [pc, #32]	; (1028 <_gclk_init_generators_by_fref+0x58>)
    1008:	4b05      	ldr	r3, [pc, #20]	; (1020 <_gclk_init_generators_by_fref+0x50>)
    100a:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    100c:	4619      	mov	r1, r3
    100e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1012:	684b      	ldr	r3, [r1, #4]
    1014:	4213      	tst	r3, r2
    1016:	d1fc      	bne.n	1012 <_gclk_init_generators_by_fref+0x42>
    1018:	4770      	bx	lr
    101a:	bf00      	nop
    101c:	00010101 	.word	0x00010101
    1020:	40001c00 	.word	0x40001c00
    1024:	00010906 	.word	0x00010906
    1028:	00010904 	.word	0x00010904

0000102c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    102c:	2201      	movs	r2, #1
    102e:	4b01      	ldr	r3, [pc, #4]	; (1034 <_mclk_init+0x8>)
    1030:	715a      	strb	r2, [r3, #5]
    1032:	4770      	bx	lr
    1034:	40000800 	.word	0x40000800

00001038 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1038:	4b03      	ldr	r3, [pc, #12]	; (1048 <_osc32kctrl_init_sources+0x10>)
    103a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    103c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1040:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1042:	2201      	movs	r2, #1
    1044:	741a      	strb	r2, [r3, #16]
    1046:	4770      	bx	lr
    1048:	40001400 	.word	0x40001400

0000104c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    104c:	4a04      	ldr	r2, [pc, #16]	; (1060 <_oscctrl_init_sources+0x14>)
    104e:	4b05      	ldr	r3, [pc, #20]	; (1064 <_oscctrl_init_sources+0x18>)
    1050:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1052:	461a      	mov	r2, r3
    1054:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1056:	f013 0f02 	tst.w	r3, #2
    105a:	d0fb      	beq.n	1054 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    105c:	4770      	bx	lr
    105e:	bf00      	nop
    1060:	03002606 	.word	0x03002606
    1064:	40001000 	.word	0x40001000

00001068 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1068:	4a36      	ldr	r2, [pc, #216]	; (1144 <_oscctrl_init_referenced_generators+0xdc>)
    106a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    106c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1070:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1074:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1076:	4611      	mov	r1, r2
    1078:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    107c:	684b      	ldr	r3, [r1, #4]
    107e:	4213      	tst	r3, r2
    1080:	d1fc      	bne.n	107c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1082:	4a30      	ldr	r2, [pc, #192]	; (1144 <_oscctrl_init_referenced_generators+0xdc>)
    1084:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1086:	f013 0f04 	tst.w	r3, #4
    108a:	d1fb      	bne.n	1084 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    108c:	4b2e      	ldr	r3, [pc, #184]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    108e:	2200      	movs	r2, #0
    1090:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1092:	4a2e      	ldr	r2, [pc, #184]	; (114c <_oscctrl_init_referenced_generators+0xe4>)
    1094:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1096:	461a      	mov	r2, r3
    1098:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    109c:	f013 0f10 	tst.w	r3, #16
    10a0:	d1fa      	bne.n	1098 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    10a2:	2200      	movs	r2, #0
    10a4:	4b28      	ldr	r3, [pc, #160]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    10a6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    10aa:	461a      	mov	r2, r3
    10ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    10b0:	f013 0f04 	tst.w	r3, #4
    10b4:	d1fa      	bne.n	10ac <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    10b6:	2202      	movs	r2, #2
    10b8:	4b23      	ldr	r3, [pc, #140]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    10ba:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    10bc:	461a      	mov	r2, r3
    10be:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    10c2:	f013 0f02 	tst.w	r3, #2
    10c6:	d1fa      	bne.n	10be <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    10c8:	4b1f      	ldr	r3, [pc, #124]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    10ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    10cc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    10ce:	461a      	mov	r2, r3
    10d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    10d4:	f013 0f08 	tst.w	r3, #8
    10d8:	d1fa      	bne.n	10d0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    10da:	2219      	movs	r2, #25
    10dc:	4b1a      	ldr	r3, [pc, #104]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    10de:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    10e2:	461a      	mov	r2, r3
    10e4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    10e8:	f013 0f04 	tst.w	r3, #4
    10ec:	d1fa      	bne.n	10e4 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    10ee:	4b16      	ldr	r3, [pc, #88]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    10f0:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    10f4:	f013 0f01 	tst.w	r3, #1
    10f8:	d01d      	beq.n	1136 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    10fa:	4a13      	ldr	r2, [pc, #76]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    10fc:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    10fe:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1102:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1106:	d1f9      	bne.n	10fc <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1108:	4a0e      	ldr	r2, [pc, #56]	; (1144 <_oscctrl_init_referenced_generators+0xdc>)
    110a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    110c:	2b00      	cmp	r3, #0
    110e:	d1fc      	bne.n	110a <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1110:	4a0c      	ldr	r2, [pc, #48]	; (1144 <_oscctrl_init_referenced_generators+0xdc>)
    1112:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1114:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1118:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    111c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    111e:	4611      	mov	r1, r2
    1120:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1124:	684b      	ldr	r3, [r1, #4]
    1126:	4213      	tst	r3, r2
    1128:	d1fc      	bne.n	1124 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    112a:	4a06      	ldr	r2, [pc, #24]	; (1144 <_oscctrl_init_referenced_generators+0xdc>)
    112c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    112e:	f013 0f04 	tst.w	r3, #4
    1132:	d1fb      	bne.n	112c <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1134:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1136:	4a04      	ldr	r2, [pc, #16]	; (1148 <_oscctrl_init_referenced_generators+0xe0>)
    1138:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    113a:	f413 7f80 	tst.w	r3, #256	; 0x100
    113e:	d0fb      	beq.n	1138 <_oscctrl_init_referenced_generators+0xd0>
    1140:	e7e2      	b.n	1108 <_oscctrl_init_referenced_generators+0xa0>
    1142:	bf00      	nop
    1144:	40001c00 	.word	0x40001c00
    1148:	40001000 	.word	0x40001000
    114c:	0401bb80 	.word	0x0401bb80

00001150 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1150:	b500      	push	{lr}
    1152:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1154:	4b0d      	ldr	r3, [pc, #52]	; (118c <RAMECC_Handler+0x3c>)
    1156:	789b      	ldrb	r3, [r3, #2]
    1158:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    115a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    115c:	9b01      	ldr	r3, [sp, #4]
    115e:	f013 0f02 	tst.w	r3, #2
    1162:	d006      	beq.n	1172 <RAMECC_Handler+0x22>
    1164:	4b0a      	ldr	r3, [pc, #40]	; (1190 <RAMECC_Handler+0x40>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	b11b      	cbz	r3, 1172 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    116a:	4a08      	ldr	r2, [pc, #32]	; (118c <RAMECC_Handler+0x3c>)
    116c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    116e:	4798      	blx	r3
    1170:	e009      	b.n	1186 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1172:	9b01      	ldr	r3, [sp, #4]
    1174:	f013 0f01 	tst.w	r3, #1
    1178:	d005      	beq.n	1186 <RAMECC_Handler+0x36>
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <RAMECC_Handler+0x40>)
    117c:	685b      	ldr	r3, [r3, #4]
    117e:	b113      	cbz	r3, 1186 <RAMECC_Handler+0x36>
    1180:	4a02      	ldr	r2, [pc, #8]	; (118c <RAMECC_Handler+0x3c>)
    1182:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1184:	4798      	blx	r3
	} else {
		return;
	}
}
    1186:	b003      	add	sp, #12
    1188:	f85d fb04 	ldr.w	pc, [sp], #4
    118c:	41020000 	.word	0x41020000
    1190:	20000440 	.word	0x20000440

00001194 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1194:	b470      	push	{r4, r5, r6}
    1196:	b089      	sub	sp, #36	; 0x24
    1198:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    119a:	466c      	mov	r4, sp
    119c:	4d0d      	ldr	r5, [pc, #52]	; (11d4 <_sercom_get_hardware_index+0x40>)
    119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    11a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    11a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    11a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    11aa:	9b00      	ldr	r3, [sp, #0]
    11ac:	42b3      	cmp	r3, r6
    11ae:	d00d      	beq.n	11cc <_sercom_get_hardware_index+0x38>
    11b0:	4631      	mov	r1, r6
    11b2:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11b4:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    11b6:	f853 2b04 	ldr.w	r2, [r3], #4
    11ba:	428a      	cmp	r2, r1
    11bc:	d007      	beq.n	11ce <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11be:	3001      	adds	r0, #1
    11c0:	2808      	cmp	r0, #8
    11c2:	d1f8      	bne.n	11b6 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    11c4:	2000      	movs	r0, #0
}
    11c6:	b009      	add	sp, #36	; 0x24
    11c8:	bc70      	pop	{r4, r5, r6}
    11ca:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11cc:	2000      	movs	r0, #0
			return i;
    11ce:	b2c0      	uxtb	r0, r0
    11d0:	e7f9      	b.n	11c6 <_sercom_get_hardware_index+0x32>
    11d2:	bf00      	nop
    11d4:	00003904 	.word	0x00003904

000011d8 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
    11d8:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    11dc:	d005      	beq.n	11ea <_sercom_init_irq_param+0x12>
		_sercom4_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM6) {
    11de:	4b04      	ldr	r3, [pc, #16]	; (11f0 <_sercom_init_irq_param+0x18>)
    11e0:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _i2c_m_async_device *)dev;
    11e2:	bf04      	itt	eq
    11e4:	4b03      	ldreq	r3, [pc, #12]	; (11f4 <_sercom_init_irq_param+0x1c>)
    11e6:	6059      	streq	r1, [r3, #4]
    11e8:	4770      	bx	lr
		_sercom4_dev = (struct _spi_async_dev *)dev;
    11ea:	4b02      	ldr	r3, [pc, #8]	; (11f4 <_sercom_init_irq_param+0x1c>)
    11ec:	6019      	str	r1, [r3, #0]
    11ee:	4770      	bx	lr
    11f0:	43000800 	.word	0x43000800
    11f4:	20000104 	.word	0x20000104

000011f8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    11f8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    11fa:	4b03      	ldr	r3, [pc, #12]	; (1208 <_sercom_get_irq_num+0x10>)
    11fc:	4798      	blx	r3
    11fe:	0080      	lsls	r0, r0, #2
    1200:	302e      	adds	r0, #46	; 0x2e
}
    1202:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1206:	bd08      	pop	{r3, pc}
    1208:	00001195 	.word	0x00001195

0000120c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    120c:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    120e:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1210:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1212:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1214:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1216:	f013 0f01 	tst.w	r3, #1
    121a:	d109      	bne.n	1230 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    121c:	f013 0f04 	tst.w	r3, #4
    1220:	d109      	bne.n	1236 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1222:	f013 0f02 	tst.w	r3, #2
    1226:	d109      	bne.n	123c <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1228:	f013 0f80 	tst.w	r3, #128	; 0x80
    122c:	d10b      	bne.n	1246 <_spi_handler+0x3a>
    122e:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1230:	6883      	ldr	r3, [r0, #8]
    1232:	4798      	blx	r3
    1234:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    1236:	68c3      	ldr	r3, [r0, #12]
    1238:	4798      	blx	r3
    123a:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    123c:	2302      	movs	r3, #2
    123e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1240:	6903      	ldr	r3, [r0, #16]
    1242:	4798      	blx	r3
    1244:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1246:	2304      	movs	r3, #4
    1248:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    124a:	2380      	movs	r3, #128	; 0x80
    124c:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    124e:	6943      	ldr	r3, [r0, #20]
    1250:	f06f 0112 	mvn.w	r1, #18
    1254:	4798      	blx	r3
	}
}
    1256:	e7ea      	b.n	122e <_spi_handler+0x22>

00001258 <_get_i2cm_index>:
{
    1258:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    125a:	4b07      	ldr	r3, [pc, #28]	; (1278 <_get_i2cm_index+0x20>)
    125c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    125e:	2806      	cmp	r0, #6
    1260:	d008      	beq.n	1274 <_get_i2cm_index+0x1c>
	ASSERT(false);
    1262:	f240 32b2 	movw	r2, #946	; 0x3b2
    1266:	4905      	ldr	r1, [pc, #20]	; (127c <_get_i2cm_index+0x24>)
    1268:	2000      	movs	r0, #0
    126a:	4b05      	ldr	r3, [pc, #20]	; (1280 <_get_i2cm_index+0x28>)
    126c:	4798      	blx	r3
	return -1;
    126e:	f04f 30ff 	mov.w	r0, #4294967295
}
    1272:	bd08      	pop	{r3, pc}
			return i;
    1274:	2000      	movs	r0, #0
    1276:	bd08      	pop	{r3, pc}
    1278:	00001195 	.word	0x00001195
    127c:	0000393c 	.word	0x0000393c
    1280:	00000f2d 	.word	0x00000f2d

00001284 <_i2c_m_sync_init_impl>:
{
    1284:	b538      	push	{r3, r4, r5, lr}
    1286:	4605      	mov	r5, r0
    1288:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    128a:	4608      	mov	r0, r1
    128c:	4b32      	ldr	r3, [pc, #200]	; (1358 <_i2c_m_sync_init_impl+0xd4>)
    128e:	4798      	blx	r3
    1290:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1292:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1294:	f013 0f01 	tst.w	r3, #1
    1298:	d122      	bne.n	12e0 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    129a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    129e:	4a2f      	ldr	r2, [pc, #188]	; (135c <_i2c_m_sync_init_impl+0xd8>)
    12a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    12a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    12a6:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12aa:	69e3      	ldr	r3, [r4, #28]
    12ac:	f013 0f03 	tst.w	r3, #3
    12b0:	d1fb      	bne.n	12aa <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    12b2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    12b4:	f013 0f02 	tst.w	r3, #2
    12b8:	d00b      	beq.n	12d2 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12ba:	6823      	ldr	r3, [r4, #0]
    12bc:	f023 0302 	bic.w	r3, r3, #2
    12c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	f013 0f03 	tst.w	r3, #3
    12c8:	d1fb      	bne.n	12c2 <_i2c_m_sync_init_impl+0x3e>
    12ca:	69e3      	ldr	r3, [r4, #28]
    12cc:	f013 0f02 	tst.w	r3, #2
    12d0:	d1fb      	bne.n	12ca <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    12d2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12d6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12d8:	69e3      	ldr	r3, [r4, #28]
    12da:	f013 0f03 	tst.w	r3, #3
    12de:	d1fb      	bne.n	12d8 <_i2c_m_sync_init_impl+0x54>
    12e0:	69e3      	ldr	r3, [r4, #28]
    12e2:	f013 0f01 	tst.w	r3, #1
    12e6:	d1fb      	bne.n	12e0 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    12e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12ec:	4a1b      	ldr	r2, [pc, #108]	; (135c <_i2c_m_sync_init_impl+0xd8>)
    12ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    12f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12f4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12f6:	69e3      	ldr	r3, [r4, #28]
    12f8:	f013 0f03 	tst.w	r3, #3
    12fc:	d1fb      	bne.n	12f6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    12fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1302:	4916      	ldr	r1, [pc, #88]	; (135c <_i2c_m_sync_init_impl+0xd8>)
    1304:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    130a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    130c:	69e3      	ldr	r3, [r4, #28]
    130e:	f013 0f04 	tst.w	r3, #4
    1312:	d1fb      	bne.n	130c <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1314:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1318:	4910      	ldr	r1, [pc, #64]	; (135c <_i2c_m_sync_init_impl+0xd8>)
    131a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1320:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1322:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1326:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1328:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    132a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    132e:	2b01      	cmp	r3, #1
    1330:	bf94      	ite	ls
    1332:	2300      	movls	r3, #0
    1334:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1336:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    133a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    133c:	69e3      	ldr	r3, [r4, #28]
    133e:	f013 0f04 	tst.w	r3, #4
    1342:	d1fb      	bne.n	133c <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    1344:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1348:	4b04      	ldr	r3, [pc, #16]	; (135c <_i2c_m_sync_init_impl+0xd8>)
    134a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    134e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1350:	81eb      	strh	r3, [r5, #14]
}
    1352:	2000      	movs	r0, #0
    1354:	bd38      	pop	{r3, r4, r5, pc}
    1356:	bf00      	nop
    1358:	00001259 	.word	0x00001259
    135c:	00003904 	.word	0x00003904

00001360 <_sercom_i2c_m_irq_handler>:
{
    1360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1364:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    1366:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1368:	7e26      	ldrb	r6, [r4, #24]
    136a:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    136c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 15a4 <_sercom_i2c_m_irq_handler+0x244>
    1370:	f240 4224 	movw	r2, #1060	; 0x424
    1374:	4641      	mov	r1, r8
    1376:	3000      	adds	r0, #0
    1378:	bf18      	it	ne
    137a:	2001      	movne	r0, #1
    137c:	4f88      	ldr	r7, [pc, #544]	; (15a0 <_sercom_i2c_m_irq_handler+0x240>)
    137e:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1380:	6928      	ldr	r0, [r5, #16]
    1382:	f240 4225 	movw	r2, #1061	; 0x425
    1386:	4641      	mov	r1, r8
    1388:	3000      	adds	r0, #0
    138a:	bf18      	it	ne
    138c:	2001      	movne	r0, #1
    138e:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    1390:	f016 0f80 	tst.w	r6, #128	; 0x80
    1394:	f040 80f6 	bne.w	1584 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1398:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    139a:	69e3      	ldr	r3, [r4, #28]
    139c:	f013 0f04 	tst.w	r3, #4
    13a0:	d1fb      	bne.n	139a <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    13a2:	8b63      	ldrh	r3, [r4, #26]
    13a4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    13a6:	f016 0f01 	tst.w	r6, #1
    13aa:	f000 8092 	beq.w	14d2 <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    13ae:	f013 0f02 	tst.w	r3, #2
    13b2:	d024      	beq.n	13fe <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    13b4:	2201      	movs	r2, #1
    13b6:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    13b8:	886a      	ldrh	r2, [r5, #2]
    13ba:	b292      	uxth	r2, r2
    13bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    13c0:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    13c2:	886a      	ldrh	r2, [r5, #2]
    13c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    13c8:	0412      	lsls	r2, r2, #16
    13ca:	0c12      	lsrs	r2, r2, #16
    13cc:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    13ce:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    13d2:	2b00      	cmp	r3, #0
    13d4:	bf14      	ite	ne
    13d6:	f06f 0104 	mvnne.w	r1, #4
    13da:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    13de:	886b      	ldrh	r3, [r5, #2]
    13e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    13e4:	041b      	lsls	r3, r3, #16
    13e6:	0c1b      	lsrs	r3, r3, #16
    13e8:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    13ea:	696b      	ldr	r3, [r5, #20]
    13ec:	2b00      	cmp	r3, #0
    13ee:	f000 80c7 	beq.w	1580 <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    13f2:	4628      	mov	r0, r5
    13f4:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    13f6:	2380      	movs	r3, #128	; 0x80
    13f8:	7623      	strb	r3, [r4, #24]
    13fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    13fe:	f013 0f04 	tst.w	r3, #4
    1402:	d124      	bne.n	144e <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    1404:	886b      	ldrh	r3, [r5, #2]
    1406:	f413 6f80 	tst.w	r3, #1024	; 0x400
    140a:	d03e      	beq.n	148a <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    140c:	882b      	ldrh	r3, [r5, #0]
    140e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1410:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1414:	69e3      	ldr	r3, [r4, #28]
    1416:	f013 0f04 	tst.w	r3, #4
    141a:	d1fb      	bne.n	1414 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    141c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1422:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1426:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1428:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    142a:	69e3      	ldr	r3, [r4, #28]
    142c:	f013 0f04 	tst.w	r3, #4
    1430:	d1fb      	bne.n	142a <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    1432:	886b      	ldrh	r3, [r5, #2]
    1434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1438:	041b      	lsls	r3, r3, #16
    143a:	0c1b      	lsrs	r3, r3, #16
    143c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    143e:	69ab      	ldr	r3, [r5, #24]
    1440:	2b00      	cmp	r3, #0
    1442:	f000 8088 	beq.w	1556 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    1446:	4628      	mov	r0, r5
    1448:	4798      	blx	r3
    144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    144e:	686b      	ldr	r3, [r5, #4]
    1450:	2b00      	cmp	r3, #0
    1452:	dd04      	ble.n	145e <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    1454:	886b      	ldrh	r3, [r5, #2]
    1456:	b29b      	uxth	r3, r3
    1458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    145c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    145e:	886b      	ldrh	r3, [r5, #2]
    1460:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1464:	d108      	bne.n	1478 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    1466:	886b      	ldrh	r3, [r5, #2]
    1468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    146c:	041b      	lsls	r3, r3, #16
    146e:	0c1b      	lsrs	r3, r3, #16
    1470:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1472:	f06f 0101 	mvn.w	r1, #1
    1476:	e7b2      	b.n	13de <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1478:	6863      	ldr	r3, [r4, #4]
    147a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    147e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1480:	69e3      	ldr	r3, [r4, #28]
    1482:	f013 0f04 	tst.w	r3, #4
    1486:	d1fb      	bne.n	1480 <_sercom_i2c_m_irq_handler+0x120>
    1488:	e7ed      	b.n	1466 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    148a:	686b      	ldr	r3, [r5, #4]
    148c:	b99b      	cbnz	r3, 14b6 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    148e:	886b      	ldrh	r3, [r5, #2]
    1490:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1494:	d106      	bne.n	14a4 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    1496:	886b      	ldrh	r3, [r5, #2]
    1498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    149c:	041b      	lsls	r3, r3, #16
    149e:	0c1b      	lsrs	r3, r3, #16
    14a0:	806b      	strh	r3, [r5, #2]
    14a2:	e7cc      	b.n	143e <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14a4:	6863      	ldr	r3, [r4, #4]
    14a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    14aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14ac:	69e3      	ldr	r3, [r4, #28]
    14ae:	f013 0f04 	tst.w	r3, #4
    14b2:	d1fb      	bne.n	14ac <_sercom_i2c_m_irq_handler+0x14c>
    14b4:	e7ef      	b.n	1496 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    14b6:	68ab      	ldr	r3, [r5, #8]
    14b8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    14ba:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14bc:	69e3      	ldr	r3, [r4, #28]
    14be:	f013 0f04 	tst.w	r3, #4
    14c2:	d1fb      	bne.n	14bc <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    14c4:	68ab      	ldr	r3, [r5, #8]
    14c6:	3301      	adds	r3, #1
    14c8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    14ca:	686b      	ldr	r3, [r5, #4]
    14cc:	3b01      	subs	r3, #1
    14ce:	606b      	str	r3, [r5, #4]
    14d0:	e7b5      	b.n	143e <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    14d2:	f016 0f02 	tst.w	r6, #2
    14d6:	d041      	beq.n	155c <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    14d8:	686a      	ldr	r2, [r5, #4]
    14da:	2a00      	cmp	r2, #0
    14dc:	d036      	beq.n	154c <_sercom_i2c_m_irq_handler+0x1ec>
    14de:	f013 0f04 	tst.w	r3, #4
    14e2:	d133      	bne.n	154c <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    14e4:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    14e8:	3a01      	subs	r2, #1
    14ea:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    14ec:	2a00      	cmp	r2, #0
    14ee:	d137      	bne.n	1560 <_sercom_i2c_m_irq_handler+0x200>
    14f0:	2900      	cmp	r1, #0
    14f2:	d039      	beq.n	1568 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    14f4:	886b      	ldrh	r3, [r5, #2]
    14f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14fa:	d116      	bne.n	152a <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    14fc:	886b      	ldrh	r3, [r5, #2]
    14fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1502:	041b      	lsls	r3, r3, #16
    1504:	0c1b      	lsrs	r3, r3, #16
    1506:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1508:	68aa      	ldr	r2, [r5, #8]
    150a:	1c53      	adds	r3, r2, #1
    150c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    150e:	69e3      	ldr	r3, [r4, #28]
    1510:	f013 0f04 	tst.w	r3, #4
    1514:	d1fb      	bne.n	150e <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1516:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1518:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    151a:	2302      	movs	r3, #2
    151c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    151e:	69eb      	ldr	r3, [r5, #28]
    1520:	b1e3      	cbz	r3, 155c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    1522:	4628      	mov	r0, r5
    1524:	4798      	blx	r3
    1526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    152a:	6863      	ldr	r3, [r4, #4]
    152c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1530:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1532:	69e3      	ldr	r3, [r4, #28]
    1534:	f013 0f04 	tst.w	r3, #4
    1538:	d1fb      	bne.n	1532 <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    153a:	6863      	ldr	r3, [r4, #4]
    153c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1540:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1542:	69e3      	ldr	r3, [r4, #28]
    1544:	f013 0f04 	tst.w	r3, #4
    1548:	d1fb      	bne.n	1542 <_sercom_i2c_m_irq_handler+0x1e2>
    154a:	e7d7      	b.n	14fc <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    154c:	2302      	movs	r3, #2
    154e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1550:	f06f 0101 	mvn.w	r1, #1
    1554:	e743      	b.n	13de <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    1556:	f016 0f02 	tst.w	r6, #2
    155a:	d1e0      	bne.n	151e <_sercom_i2c_m_irq_handler+0x1be>
    155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1560:	2a01      	cmp	r2, #1
    1562:	d1d1      	bne.n	1508 <_sercom_i2c_m_irq_handler+0x1a8>
    1564:	2900      	cmp	r1, #0
    1566:	d0cf      	beq.n	1508 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1568:	6863      	ldr	r3, [r4, #4]
    156a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    156e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1570:	69e3      	ldr	r3, [r4, #28]
    1572:	f013 0f04 	tst.w	r3, #4
    1576:	d1fb      	bne.n	1570 <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    1578:	686b      	ldr	r3, [r5, #4]
    157a:	2b00      	cmp	r3, #0
    157c:	d0ba      	beq.n	14f4 <_sercom_i2c_m_irq_handler+0x194>
    157e:	e7c3      	b.n	1508 <_sercom_i2c_m_irq_handler+0x1a8>
    1580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1584:	886b      	ldrh	r3, [r5, #2]
    1586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    158a:	041b      	lsls	r3, r3, #16
    158c:	0c1b      	lsrs	r3, r3, #16
    158e:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    1590:	696b      	ldr	r3, [r5, #20]
    1592:	2b00      	cmp	r3, #0
    1594:	d0e2      	beq.n	155c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    1596:	f06f 0104 	mvn.w	r1, #4
    159a:	4628      	mov	r0, r5
    159c:	4798      	blx	r3
    159e:	e72a      	b.n	13f6 <_sercom_i2c_m_irq_handler+0x96>
    15a0:	00000f2d 	.word	0x00000f2d
    15a4:	0000393c 	.word	0x0000393c

000015a8 <_i2c_m_async_init>:
{
    15a8:	b570      	push	{r4, r5, r6, lr}
    15aa:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    15ac:	4606      	mov	r6, r0
    15ae:	f44f 6293 	mov.w	r2, #1176	; 0x498
    15b2:	4918      	ldr	r1, [pc, #96]	; (1614 <_i2c_m_async_init+0x6c>)
    15b4:	3000      	adds	r0, #0
    15b6:	bf18      	it	ne
    15b8:	2001      	movne	r0, #1
    15ba:	4b17      	ldr	r3, [pc, #92]	; (1618 <_i2c_m_async_init+0x70>)
    15bc:	4798      	blx	r3
	i2c_dev->hw = hw;
    15be:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    15c0:	4629      	mov	r1, r5
    15c2:	4630      	mov	r0, r6
    15c4:	4b15      	ldr	r3, [pc, #84]	; (161c <_i2c_m_async_init+0x74>)
    15c6:	4798      	blx	r3
	if (init_status) {
    15c8:	4604      	mov	r4, r0
    15ca:	b108      	cbz	r0, 15d0 <_i2c_m_async_init+0x28>
}
    15cc:	4620      	mov	r0, r4
    15ce:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    15d0:	4631      	mov	r1, r6
    15d2:	4628      	mov	r0, r5
    15d4:	4b12      	ldr	r3, [pc, #72]	; (1620 <_i2c_m_async_init+0x78>)
    15d6:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    15d8:	4628      	mov	r0, r5
    15da:	4b12      	ldr	r3, [pc, #72]	; (1624 <_i2c_m_async_init+0x7c>)
    15dc:	4798      	blx	r3
    15de:	1d01      	adds	r1, r0, #4
    15e0:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15e2:	2501      	movs	r5, #1
    15e4:	f000 021f 	and.w	r2, r0, #31
    15e8:	fa05 f202 	lsl.w	r2, r5, r2
    15ec:	0943      	lsrs	r3, r0, #5
    15ee:	009b      	lsls	r3, r3, #2
    15f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    15f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    15f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    15fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1600:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1604:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1608:	601a      	str	r2, [r3, #0]
		irq++;
    160a:	3001      	adds	r0, #1
    160c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    160e:	4281      	cmp	r1, r0
    1610:	d1e8      	bne.n	15e4 <_i2c_m_async_init+0x3c>
    1612:	e7db      	b.n	15cc <_i2c_m_async_init+0x24>
    1614:	0000393c 	.word	0x0000393c
    1618:	00000f2d 	.word	0x00000f2d
    161c:	00001285 	.word	0x00001285
    1620:	000011d9 	.word	0x000011d9
    1624:	000011f9 	.word	0x000011f9

00001628 <_i2c_m_async_transfer>:
{
    1628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    162c:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    162e:	4605      	mov	r5, r0
    1630:	f110 0800 	adds.w	r8, r0, #0
    1634:	bf18      	it	ne
    1636:	f04f 0801 	movne.w	r8, #1
    163a:	4f45      	ldr	r7, [pc, #276]	; (1750 <_i2c_m_async_transfer+0x128>)
    163c:	f240 42ee 	movw	r2, #1262	; 0x4ee
    1640:	4639      	mov	r1, r7
    1642:	4640      	mov	r0, r8
    1644:	4e43      	ldr	r6, [pc, #268]	; (1754 <_i2c_m_async_transfer+0x12c>)
    1646:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1648:	6928      	ldr	r0, [r5, #16]
    164a:	f240 42ef 	movw	r2, #1263	; 0x4ef
    164e:	4639      	mov	r1, r7
    1650:	3000      	adds	r0, #0
    1652:	bf18      	it	ne
    1654:	2001      	movne	r0, #1
    1656:	47b0      	blx	r6
	ASSERT(msg);
    1658:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    165c:	4639      	mov	r1, r7
    165e:	1c20      	adds	r0, r4, #0
    1660:	bf18      	it	ne
    1662:	2001      	movne	r0, #1
    1664:	47b0      	blx	r6
	if (msg->len == 0) {
    1666:	6860      	ldr	r0, [r4, #4]
    1668:	2800      	cmp	r0, #0
    166a:	d06f      	beq.n	174c <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    166c:	886b      	ldrh	r3, [r5, #2]
    166e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1672:	d169      	bne.n	1748 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    1674:	8863      	ldrh	r3, [r4, #2]
    1676:	b29b      	uxth	r3, r3
    1678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    167c:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    167e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1682:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    1686:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1688:	6853      	ldr	r3, [r2, #4]
    168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    168e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1690:	69d3      	ldr	r3, [r2, #28]
    1692:	f013 0f04 	tst.w	r3, #4
    1696:	d1fb      	bne.n	1690 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    1698:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    169a:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    169c:	f240 42c6 	movw	r2, #1222	; 0x4c6
    16a0:	492b      	ldr	r1, [pc, #172]	; (1750 <_i2c_m_async_transfer+0x128>)
    16a2:	4640      	mov	r0, r8
    16a4:	4b2b      	ldr	r3, [pc, #172]	; (1754 <_i2c_m_async_transfer+0x12c>)
    16a6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    16a8:	686b      	ldr	r3, [r5, #4]
    16aa:	2b01      	cmp	r3, #1
    16ac:	d02a      	beq.n	1704 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16ae:	6863      	ldr	r3, [r4, #4]
    16b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    16b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16b6:	69e3      	ldr	r3, [r4, #28]
    16b8:	f013 0f04 	tst.w	r3, #4
    16bc:	d1fb      	bne.n	16b6 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    16be:	882b      	ldrh	r3, [r5, #0]
    16c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    16c4:	d02a      	beq.n	171c <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    16c6:	886a      	ldrh	r2, [r5, #2]
    16c8:	f012 0f01 	tst.w	r2, #1
    16cc:	d004      	beq.n	16d8 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    16ce:	886a      	ldrh	r2, [r5, #2]
    16d0:	b292      	uxth	r2, r2
    16d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    16d6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    16d8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    16dc:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    16e0:	69e3      	ldr	r3, [r4, #28]
    16e2:	f013 0f04 	tst.w	r3, #4
    16e6:	d1fb      	bne.n	16e0 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    16e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    16ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    16ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    16f2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    16f4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16f6:	69e3      	ldr	r3, [r4, #28]
    16f8:	f013 0f04 	tst.w	r3, #4
    16fc:	d1fb      	bne.n	16f6 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    16fe:	2000      	movs	r0, #0
    1700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    1704:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    1708:	d0d1      	beq.n	16ae <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    170a:	6863      	ldr	r3, [r4, #4]
    170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1710:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1712:	69e3      	ldr	r3, [r4, #28]
    1714:	f013 0f04 	tst.w	r3, #4
    1718:	d1fb      	bne.n	1712 <_i2c_m_async_transfer+0xea>
    171a:	e7d0      	b.n	16be <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    171c:	8869      	ldrh	r1, [r5, #2]
    171e:	005a      	lsls	r2, r3, #1
    1720:	b2d2      	uxtb	r2, r2
    1722:	f001 0301 	and.w	r3, r1, #1
    1726:	431a      	orrs	r2, r3
    1728:	69e3      	ldr	r3, [r4, #28]
    172a:	f013 0f04 	tst.w	r3, #4
    172e:	d1fb      	bne.n	1728 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1730:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1736:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1738:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    173a:	69e3      	ldr	r3, [r4, #28]
    173c:	f013 0f04 	tst.w	r3, #4
    1740:	d1fb      	bne.n	173a <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    1742:	2000      	movs	r0, #0
    1744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    1748:	f06f 0003 	mvn.w	r0, #3
}
    174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1750:	0000393c 	.word	0x0000393c
    1754:	00000f2d 	.word	0x00000f2d

00001758 <_i2c_m_async_register_callback>:
	switch (type) {
    1758:	2901      	cmp	r1, #1
    175a:	d006      	beq.n	176a <_i2c_m_async_register_callback+0x12>
    175c:	b119      	cbz	r1, 1766 <_i2c_m_async_register_callback+0xe>
    175e:	2902      	cmp	r1, #2
    1760:	d005      	beq.n	176e <_i2c_m_async_register_callback+0x16>
}
    1762:	2000      	movs	r0, #0
    1764:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    1766:	6142      	str	r2, [r0, #20]
		break;
    1768:	e7fb      	b.n	1762 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    176a:	6182      	str	r2, [r0, #24]
		break;
    176c:	e7f9      	b.n	1762 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    176e:	61c2      	str	r2, [r0, #28]
		break;
    1770:	e7f7      	b.n	1762 <_i2c_m_async_register_callback+0xa>
	...

00001774 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    1774:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    1776:	4b02      	ldr	r3, [pc, #8]	; (1780 <SERCOM4_0_Handler+0xc>)
    1778:	6818      	ldr	r0, [r3, #0]
    177a:	4b02      	ldr	r3, [pc, #8]	; (1784 <SERCOM4_0_Handler+0x10>)
    177c:	4798      	blx	r3
    177e:	bd08      	pop	{r3, pc}
    1780:	20000104 	.word	0x20000104
    1784:	0000120d 	.word	0x0000120d

00001788 <SERCOM4_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    1788:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    178a:	4b02      	ldr	r3, [pc, #8]	; (1794 <SERCOM4_1_Handler+0xc>)
    178c:	6818      	ldr	r0, [r3, #0]
    178e:	4b02      	ldr	r3, [pc, #8]	; (1798 <SERCOM4_1_Handler+0x10>)
    1790:	4798      	blx	r3
    1792:	bd08      	pop	{r3, pc}
    1794:	20000104 	.word	0x20000104
    1798:	0000120d 	.word	0x0000120d

0000179c <SERCOM4_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    179c:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    179e:	4b02      	ldr	r3, [pc, #8]	; (17a8 <SERCOM4_2_Handler+0xc>)
    17a0:	6818      	ldr	r0, [r3, #0]
    17a2:	4b02      	ldr	r3, [pc, #8]	; (17ac <SERCOM4_2_Handler+0x10>)
    17a4:	4798      	blx	r3
    17a6:	bd08      	pop	{r3, pc}
    17a8:	20000104 	.word	0x20000104
    17ac:	0000120d 	.word	0x0000120d

000017b0 <SERCOM4_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    17b0:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    17b2:	4b02      	ldr	r3, [pc, #8]	; (17bc <SERCOM4_3_Handler+0xc>)
    17b4:	6818      	ldr	r0, [r3, #0]
    17b6:	4b02      	ldr	r3, [pc, #8]	; (17c0 <SERCOM4_3_Handler+0x10>)
    17b8:	4798      	blx	r3
    17ba:	bd08      	pop	{r3, pc}
    17bc:	20000104 	.word	0x20000104
    17c0:	0000120d 	.word	0x0000120d

000017c4 <SERCOM6_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_0_Handler(void)
{
    17c4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    17c6:	4b02      	ldr	r3, [pc, #8]	; (17d0 <SERCOM6_0_Handler+0xc>)
    17c8:	6858      	ldr	r0, [r3, #4]
    17ca:	4b02      	ldr	r3, [pc, #8]	; (17d4 <SERCOM6_0_Handler+0x10>)
    17cc:	4798      	blx	r3
    17ce:	bd08      	pop	{r3, pc}
    17d0:	20000104 	.word	0x20000104
    17d4:	00001361 	.word	0x00001361

000017d8 <SERCOM6_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_1_Handler(void)
{
    17d8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    17da:	4b02      	ldr	r3, [pc, #8]	; (17e4 <SERCOM6_1_Handler+0xc>)
    17dc:	6858      	ldr	r0, [r3, #4]
    17de:	4b02      	ldr	r3, [pc, #8]	; (17e8 <SERCOM6_1_Handler+0x10>)
    17e0:	4798      	blx	r3
    17e2:	bd08      	pop	{r3, pc}
    17e4:	20000104 	.word	0x20000104
    17e8:	00001361 	.word	0x00001361

000017ec <SERCOM6_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_2_Handler(void)
{
    17ec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    17ee:	4b02      	ldr	r3, [pc, #8]	; (17f8 <SERCOM6_2_Handler+0xc>)
    17f0:	6858      	ldr	r0, [r3, #4]
    17f2:	4b02      	ldr	r3, [pc, #8]	; (17fc <SERCOM6_2_Handler+0x10>)
    17f4:	4798      	blx	r3
    17f6:	bd08      	pop	{r3, pc}
    17f8:	20000104 	.word	0x20000104
    17fc:	00001361 	.word	0x00001361

00001800 <SERCOM6_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_3_Handler(void)
{
    1800:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    1802:	4b02      	ldr	r3, [pc, #8]	; (180c <SERCOM6_3_Handler+0xc>)
    1804:	6858      	ldr	r0, [r3, #4]
    1806:	4b02      	ldr	r3, [pc, #8]	; (1810 <SERCOM6_3_Handler+0x10>)
    1808:	4798      	blx	r3
    180a:	bd08      	pop	{r3, pc}
    180c:	20000104 	.word	0x20000104
    1810:	00001361 	.word	0x00001361

00001814 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1814:	b538      	push	{r3, r4, r5, lr}
    1816:	4605      	mov	r5, r0
    1818:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    181a:	4608      	mov	r0, r1
    181c:	4b36      	ldr	r3, [pc, #216]	; (18f8 <_spi_m_sync_init+0xe4>)
    181e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1820:	2804      	cmp	r0, #4
    1822:	d00c      	beq.n	183e <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1824:	2d00      	cmp	r5, #0
    1826:	d055      	beq.n	18d4 <_spi_m_sync_init+0xc0>
    1828:	f640 12c6 	movw	r2, #2502	; 0x9c6
    182c:	4933      	ldr	r1, [pc, #204]	; (18fc <_spi_m_sync_init+0xe8>)
    182e:	1c20      	adds	r0, r4, #0
    1830:	bf18      	it	ne
    1832:	2001      	movne	r0, #1
    1834:	4b32      	ldr	r3, [pc, #200]	; (1900 <_spi_m_sync_init+0xec>)
    1836:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1838:	f06f 000c 	mvn.w	r0, #12
    183c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    183e:	2d00      	cmp	r5, #0
    1840:	d151      	bne.n	18e6 <_spi_m_sync_init+0xd2>
    1842:	f640 12c6 	movw	r2, #2502	; 0x9c6
    1846:	492d      	ldr	r1, [pc, #180]	; (18fc <_spi_m_sync_init+0xe8>)
    1848:	2000      	movs	r0, #0
    184a:	4b2d      	ldr	r3, [pc, #180]	; (1900 <_spi_m_sync_init+0xec>)
    184c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    184e:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1850:	f013 0f01 	tst.w	r3, #1
    1854:	d119      	bne.n	188a <_spi_m_sync_init+0x76>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1856:	69e3      	ldr	r3, [r4, #28]
    1858:	f013 0f03 	tst.w	r3, #3
    185c:	d1fb      	bne.n	1856 <_spi_m_sync_init+0x42>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    185e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1860:	f013 0f02 	tst.w	r3, #2
    1864:	d00b      	beq.n	187e <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1866:	6823      	ldr	r3, [r4, #0]
    1868:	f023 0302 	bic.w	r3, r3, #2
    186c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    186e:	69e3      	ldr	r3, [r4, #28]
    1870:	f013 0f03 	tst.w	r3, #3
    1874:	d1fb      	bne.n	186e <_spi_m_sync_init+0x5a>
    1876:	69e3      	ldr	r3, [r4, #28]
    1878:	f013 0f02 	tst.w	r3, #2
    187c:	d1fb      	bne.n	1876 <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    187e:	230d      	movs	r3, #13
    1880:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1882:	69e3      	ldr	r3, [r4, #28]
    1884:	f013 0f03 	tst.w	r3, #3
    1888:	d1fb      	bne.n	1882 <_spi_m_sync_init+0x6e>
    188a:	69e3      	ldr	r3, [r4, #28]
    188c:	f013 0f01 	tst.w	r3, #1
    1890:	d1fb      	bne.n	188a <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1892:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1894:	f640 123c 	movw	r2, #2364	; 0x93c
    1898:	4918      	ldr	r1, [pc, #96]	; (18fc <_spi_m_sync_init+0xe8>)
    189a:	1c20      	adds	r0, r4, #0
    189c:	bf18      	it	ne
    189e:	2001      	movne	r0, #1
    18a0:	4b17      	ldr	r3, [pc, #92]	; (1900 <_spi_m_sync_init+0xec>)
    18a2:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    18a4:	4b17      	ldr	r3, [pc, #92]	; (1904 <_spi_m_sync_init+0xf0>)
    18a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18a8:	69e3      	ldr	r3, [r4, #28]
    18aa:	f013 0f03 	tst.w	r3, #3
    18ae:	d1fb      	bne.n	18a8 <_spi_m_sync_init+0x94>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    18b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    18b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18b6:	69e3      	ldr	r3, [r4, #28]
    18b8:	f013 0f17 	tst.w	r3, #23
    18bc:	d1fb      	bne.n	18b6 <_spi_m_sync_init+0xa2>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    18be:	2377      	movs	r3, #119	; 0x77
    18c0:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    18c2:	2000      	movs	r0, #0
    18c4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    18c8:	2301      	movs	r3, #1
    18ca:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    18cc:	f240 13ff 	movw	r3, #511	; 0x1ff
    18d0:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    18d2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    18d4:	f640 12c6 	movw	r2, #2502	; 0x9c6
    18d8:	4908      	ldr	r1, [pc, #32]	; (18fc <_spi_m_sync_init+0xe8>)
    18da:	2000      	movs	r0, #0
    18dc:	4b08      	ldr	r3, [pc, #32]	; (1900 <_spi_m_sync_init+0xec>)
    18de:	4798      	blx	r3
		return ERR_INVALID_ARG;
    18e0:	f06f 000c 	mvn.w	r0, #12
    18e4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    18e6:	f640 12c6 	movw	r2, #2502	; 0x9c6
    18ea:	4904      	ldr	r1, [pc, #16]	; (18fc <_spi_m_sync_init+0xe8>)
    18ec:	1c20      	adds	r0, r4, #0
    18ee:	bf18      	it	ne
    18f0:	2001      	movne	r0, #1
    18f2:	4b03      	ldr	r3, [pc, #12]	; (1900 <_spi_m_sync_init+0xec>)
    18f4:	4798      	blx	r3
    18f6:	e7aa      	b.n	184e <_spi_m_sync_init+0x3a>
    18f8:	00001195 	.word	0x00001195
    18fc:	0000393c 	.word	0x0000393c
    1900:	00000f2d 	.word	0x00000f2d
    1904:	0020000c 	.word	0x0020000c

00001908 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1908:	b538      	push	{r3, r4, r5, lr}
    190a:	4604      	mov	r4, r0
    190c:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    190e:	4b15      	ldr	r3, [pc, #84]	; (1964 <_spi_m_async_init+0x5c>)
    1910:	4798      	blx	r3

	if (rc < 0) {
    1912:	2800      	cmp	r0, #0
    1914:	db24      	blt.n	1960 <_spi_m_async_init+0x58>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    1916:	4621      	mov	r1, r4
    1918:	4628      	mov	r0, r5
    191a:	4b13      	ldr	r3, [pc, #76]	; (1968 <_spi_m_async_init+0x60>)
    191c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    191e:	2300      	movs	r3, #0
    1920:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1922:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1924:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1926:	4628      	mov	r0, r5
    1928:	4b10      	ldr	r3, [pc, #64]	; (196c <_spi_m_async_init+0x64>)
    192a:	4798      	blx	r3
    192c:	1d01      	adds	r1, r0, #4
    192e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1930:	2401      	movs	r4, #1
    1932:	f000 021f 	and.w	r2, r0, #31
    1936:	fa04 f202 	lsl.w	r2, r4, r2
    193a:	0943      	lsrs	r3, r0, #5
    193c:	009b      	lsls	r3, r3, #2
    193e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1942:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    194a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    194e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1952:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1956:	3001      	adds	r0, #1
    1958:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    195a:	4281      	cmp	r1, r0
    195c:	d1e9      	bne.n	1932 <_spi_m_async_init+0x2a>
	}

	return ERR_NONE;
    195e:	2000      	movs	r0, #0
}
    1960:	bd38      	pop	{r3, r4, r5, pc}
    1962:	bf00      	nop
    1964:	00001815 	.word	0x00001815
    1968:	000011d9 	.word	0x000011d9
    196c:	000011f9 	.word	0x000011f9

00001970 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1970:	b538      	push	{r3, r4, r5, lr}
    1972:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1974:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1976:	b160      	cbz	r0, 1992 <_spi_m_async_enable_tx+0x22>
    1978:	1c20      	adds	r0, r4, #0
    197a:	bf18      	it	ne
    197c:	2001      	movne	r0, #1
    197e:	f640 3256 	movw	r2, #2902	; 0xb56
    1982:	4906      	ldr	r1, [pc, #24]	; (199c <_spi_m_async_enable_tx+0x2c>)
    1984:	4b06      	ldr	r3, [pc, #24]	; (19a0 <_spi_m_async_enable_tx+0x30>)
    1986:	4798      	blx	r3

	if (state) {
    1988:	b92d      	cbnz	r5, 1996 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    198a:	2301      	movs	r3, #1
    198c:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    198e:	2000      	movs	r0, #0
    1990:	bd38      	pop	{r3, r4, r5, pc}
    1992:	2000      	movs	r0, #0
    1994:	e7f3      	b.n	197e <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    1996:	2301      	movs	r3, #1
    1998:	75a3      	strb	r3, [r4, #22]
    199a:	e7f8      	b.n	198e <_spi_m_async_enable_tx+0x1e>
    199c:	0000393c 	.word	0x0000393c
    19a0:	00000f2d 	.word	0x00000f2d

000019a4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    19a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19a6:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    19a8:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    19aa:	4e0c      	ldr	r6, [pc, #48]	; (19dc <_spi_m_async_enable_rx+0x38>)
    19ac:	f640 326a 	movw	r2, #2922	; 0xb6a
    19b0:	4631      	mov	r1, r6
    19b2:	3000      	adds	r0, #0
    19b4:	bf18      	it	ne
    19b6:	2001      	movne	r0, #1
    19b8:	4d09      	ldr	r5, [pc, #36]	; (19e0 <_spi_m_async_enable_rx+0x3c>)
    19ba:	47a8      	blx	r5
	ASSERT(hw);
    19bc:	f640 326b 	movw	r2, #2923	; 0xb6b
    19c0:	4631      	mov	r1, r6
    19c2:	1c20      	adds	r0, r4, #0
    19c4:	bf18      	it	ne
    19c6:	2001      	movne	r0, #1
    19c8:	47a8      	blx	r5

	if (state) {
    19ca:	b91f      	cbnz	r7, 19d4 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    19cc:	2304      	movs	r3, #4
    19ce:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    19d0:	2000      	movs	r0, #0
    19d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    19d4:	2304      	movs	r3, #4
    19d6:	75a3      	strb	r3, [r4, #22]
    19d8:	e7fa      	b.n	19d0 <_spi_m_async_enable_rx+0x2c>
    19da:	bf00      	nop
    19dc:	0000393c 	.word	0x0000393c
    19e0:	00000f2d 	.word	0x00000f2d

000019e4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    19e4:	b538      	push	{r3, r4, r5, lr}
    19e6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    19e8:	4604      	mov	r4, r0
    19ea:	b170      	cbz	r0, 1a0a <_spi_m_async_enable_tx_complete+0x26>
    19ec:	6800      	ldr	r0, [r0, #0]
    19ee:	3000      	adds	r0, #0
    19f0:	bf18      	it	ne
    19f2:	2001      	movne	r0, #1
    19f4:	f640 327d 	movw	r2, #2941	; 0xb7d
    19f8:	4907      	ldr	r1, [pc, #28]	; (1a18 <_spi_m_async_enable_tx_complete+0x34>)
    19fa:	4b08      	ldr	r3, [pc, #32]	; (1a1c <_spi_m_async_enable_tx_complete+0x38>)
    19fc:	4798      	blx	r3

	if (state) {
    19fe:	b935      	cbnz	r5, 1a0e <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1a00:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1a02:	2202      	movs	r2, #2
    1a04:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1a06:	2000      	movs	r0, #0
    1a08:	bd38      	pop	{r3, r4, r5, pc}
    1a0a:	2000      	movs	r0, #0
    1a0c:	e7f2      	b.n	19f4 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    1a0e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1a10:	2202      	movs	r2, #2
    1a12:	759a      	strb	r2, [r3, #22]
    1a14:	e7f7      	b.n	1a06 <_spi_m_async_enable_tx_complete+0x22>
    1a16:	bf00      	nop
    1a18:	0000393c 	.word	0x0000393c
    1a1c:	00000f2d 	.word	0x00000f2d

00001a20 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1a20:	b538      	push	{r3, r4, r5, lr}
    1a22:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1a24:	4604      	mov	r4, r0
    1a26:	b160      	cbz	r0, 1a42 <_spi_m_async_write_one+0x22>
    1a28:	6800      	ldr	r0, [r0, #0]
    1a2a:	3000      	adds	r0, #0
    1a2c:	bf18      	it	ne
    1a2e:	2001      	movne	r0, #1
    1a30:	f640 328f 	movw	r2, #2959	; 0xb8f
    1a34:	4904      	ldr	r1, [pc, #16]	; (1a48 <_spi_m_async_write_one+0x28>)
    1a36:	4b05      	ldr	r3, [pc, #20]	; (1a4c <_spi_m_async_write_one+0x2c>)
    1a38:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1a3a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1a3c:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1a3e:	2000      	movs	r0, #0
    1a40:	bd38      	pop	{r3, r4, r5, pc}
    1a42:	2000      	movs	r0, #0
    1a44:	e7f4      	b.n	1a30 <_spi_m_async_write_one+0x10>
    1a46:	bf00      	nop
    1a48:	0000393c 	.word	0x0000393c
    1a4c:	00000f2d 	.word	0x00000f2d

00001a50 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1a50:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1a52:	4604      	mov	r4, r0
    1a54:	b160      	cbz	r0, 1a70 <_spi_m_async_read_one+0x20>
    1a56:	6800      	ldr	r0, [r0, #0]
    1a58:	3000      	adds	r0, #0
    1a5a:	bf18      	it	ne
    1a5c:	2001      	movne	r0, #1
    1a5e:	f640 32aa 	movw	r2, #2986	; 0xbaa
    1a62:	4904      	ldr	r1, [pc, #16]	; (1a74 <_spi_m_async_read_one+0x24>)
    1a64:	4b04      	ldr	r3, [pc, #16]	; (1a78 <_spi_m_async_read_one+0x28>)
    1a66:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1a68:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1a6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1a6c:	b280      	uxth	r0, r0
    1a6e:	bd10      	pop	{r4, pc}
    1a70:	2000      	movs	r0, #0
    1a72:	e7f4      	b.n	1a5e <_spi_m_async_read_one+0xe>
    1a74:	0000393c 	.word	0x0000393c
    1a78:	00000f2d 	.word	0x00000f2d

00001a7c <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1a7c:	b570      	push	{r4, r5, r6, lr}
    1a7e:	460d      	mov	r5, r1
    1a80:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1a82:	4604      	mov	r4, r0
    1a84:	b168      	cbz	r0, 1aa2 <_spi_m_async_register_callback+0x26>
    1a86:	2903      	cmp	r1, #3
    1a88:	bf8c      	ite	hi
    1a8a:	2000      	movhi	r0, #0
    1a8c:	2001      	movls	r0, #1
    1a8e:	f640 32c3 	movw	r2, #3011	; 0xbc3
    1a92:	4905      	ldr	r1, [pc, #20]	; (1aa8 <_spi_m_async_register_callback+0x2c>)
    1a94:	4b05      	ldr	r3, [pc, #20]	; (1aac <_spi_m_async_register_callback+0x30>)
    1a96:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1a98:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1a9c:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1a9e:	2000      	movs	r0, #0
    1aa0:	bd70      	pop	{r4, r5, r6, pc}
    1aa2:	2000      	movs	r0, #0
    1aa4:	e7f3      	b.n	1a8e <_spi_m_async_register_callback+0x12>
    1aa6:	bf00      	nop
    1aa8:	0000393c 	.word	0x0000393c
    1aac:	00000f2d 	.word	0x00000f2d

00001ab0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1ab0:	2000      	movs	r0, #0
    1ab2:	4770      	bx	lr

00001ab4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1ab4:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1ab6:	7c83      	ldrb	r3, [r0, #18]
    1ab8:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1abc:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1abe:	f002 0107 	and.w	r1, r2, #7
    1ac2:	2901      	cmp	r1, #1
    1ac4:	d00b      	beq.n	1ade <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ac6:	015a      	lsls	r2, r3, #5
    1ac8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1acc:	2110      	movs	r1, #16
    1ace:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1ad2:	015b      	lsls	r3, r3, #5
    1ad4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ad8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1adc:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1ade:	f012 0f40 	tst.w	r2, #64	; 0x40
    1ae2:	d00c      	beq.n	1afe <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1ae4:	7cc2      	ldrb	r2, [r0, #19]
    1ae6:	f36f 1286 	bfc	r2, #6, #1
    1aea:	74c2      	strb	r2, [r0, #19]
    1aec:	015a      	lsls	r2, r3, #5
    1aee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1af2:	2180      	movs	r1, #128	; 0x80
    1af4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1af8:	2140      	movs	r1, #64	; 0x40
    1afa:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1afe:	7cc2      	ldrb	r2, [r0, #19]
    1b00:	f36f 02c3 	bfc	r2, #3, #1
    1b04:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1b06:	4909      	ldr	r1, [pc, #36]	; (1b2c <_usb_d_dev_handle_setup+0x78>)
    1b08:	015a      	lsls	r2, r3, #5
    1b0a:	188c      	adds	r4, r1, r2
    1b0c:	2500      	movs	r5, #0
    1b0e:	72a5      	strb	r5, [r4, #10]
    1b10:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b12:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1b16:	246f      	movs	r4, #111	; 0x6f
    1b18:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b1c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b20:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1b24:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1b26:	7c80      	ldrb	r0, [r0, #18]
    1b28:	4798      	blx	r3
    1b2a:	bd38      	pop	{r3, r4, r5, pc}
    1b2c:	2000010c 	.word	0x2000010c

00001b30 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1b30:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1b32:	2320      	movs	r3, #32
    1b34:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1b38:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b3a:	7c83      	ldrb	r3, [r0, #18]
    1b3c:	f003 030f 	and.w	r3, r3, #15
    1b40:	015b      	lsls	r3, r3, #5
    1b42:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b46:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1b4a:	4b03      	ldr	r3, [pc, #12]	; (1b58 <_usb_d_dev_handle_stall+0x28>)
    1b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1b4e:	6882      	ldr	r2, [r0, #8]
    1b50:	2101      	movs	r1, #1
    1b52:	7c80      	ldrb	r0, [r0, #18]
    1b54:	4798      	blx	r3
    1b56:	bd08      	pop	{r3, pc}
    1b58:	2000010c 	.word	0x2000010c

00001b5c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1b5c:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1b5e:	7c84      	ldrb	r4, [r0, #18]
    1b60:	2cff      	cmp	r4, #255	; 0xff
    1b62:	d003      	beq.n	1b6c <_usb_d_dev_trans_done+0x10>
    1b64:	7cc3      	ldrb	r3, [r0, #19]
    1b66:	f013 0f40 	tst.w	r3, #64	; 0x40
    1b6a:	d100      	bne.n	1b6e <_usb_d_dev_trans_done+0x12>
    1b6c:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1b6e:	7cc2      	ldrb	r2, [r0, #19]
    1b70:	f36f 1286 	bfc	r2, #6, #1
    1b74:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1b76:	4a03      	ldr	r2, [pc, #12]	; (1b84 <_usb_d_dev_trans_done+0x28>)
    1b78:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1b7a:	6882      	ldr	r2, [r0, #8]
    1b7c:	4620      	mov	r0, r4
    1b7e:	47a8      	blx	r5
    1b80:	e7f4      	b.n	1b6c <_usb_d_dev_trans_done+0x10>
    1b82:	bf00      	nop
    1b84:	2000010c 	.word	0x2000010c

00001b88 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1b88:	b530      	push	{r4, r5, lr}
    1b8a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b8c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1b8e:	2425      	movs	r4, #37	; 0x25
    1b90:	f88d 4004 	strb.w	r4, [sp, #4]
    1b94:	244a      	movs	r4, #74	; 0x4a
    1b96:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1b9a:	2bff      	cmp	r3, #255	; 0xff
    1b9c:	d01e      	beq.n	1bdc <_usb_d_dev_trans_stop+0x54>
    1b9e:	7cc4      	ldrb	r4, [r0, #19]
    1ba0:	f014 0f40 	tst.w	r4, #64	; 0x40
    1ba4:	d01a      	beq.n	1bdc <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1ba6:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    1baa:	b1c9      	cbz	r1, 1be0 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1bac:	0163      	lsls	r3, r4, #5
    1bae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1bb2:	2580      	movs	r5, #128	; 0x80
    1bb4:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1bb8:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1bba:	a902      	add	r1, sp, #8
    1bbc:	440b      	add	r3, r1
    1bbe:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bc2:	0163      	lsls	r3, r4, #5
    1bc4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1bc8:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1bcc:	0163      	lsls	r3, r4, #5
    1bce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1bd2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1bd6:	4611      	mov	r1, r2
    1bd8:	4b05      	ldr	r3, [pc, #20]	; (1bf0 <_usb_d_dev_trans_stop+0x68>)
    1bda:	4798      	blx	r3
}
    1bdc:	b003      	add	sp, #12
    1bde:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1be0:	0163      	lsls	r3, r4, #5
    1be2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1be6:	2540      	movs	r5, #64	; 0x40
    1be8:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1bec:	e7e4      	b.n	1bb8 <_usb_d_dev_trans_stop+0x30>
    1bee:	bf00      	nop
    1bf0:	00001b5d 	.word	0x00001b5d

00001bf4 <_usb_d_dev_handle_trfail>:
{
    1bf4:	b530      	push	{r4, r5, lr}
    1bf6:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1bf8:	7c83      	ldrb	r3, [r0, #18]
    1bfa:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1bfe:	2204      	movs	r2, #4
    1c00:	f88d 2004 	strb.w	r2, [sp, #4]
    1c04:	2208      	movs	r2, #8
    1c06:	f88d 2005 	strb.w	r2, [sp, #5]
    1c0a:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1c0c:	460c      	mov	r4, r1
    1c0e:	b391      	cbz	r1, 1c76 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1c10:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1c14:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1c18:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1c1c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1c20:	4a32      	ldr	r2, [pc, #200]	; (1cec <_usb_d_dev_handle_trfail+0xf8>)
    1c22:	440a      	add	r2, r1
    1c24:	7a91      	ldrb	r1, [r2, #10]
    1c26:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1c28:	2d02      	cmp	r5, #2
    1c2a:	d02c      	beq.n	1c86 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1c2c:	f011 0f02 	tst.w	r1, #2
    1c30:	d045      	beq.n	1cbe <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c32:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1c34:	7a91      	ldrb	r1, [r2, #10]
    1c36:	f36f 0141 	bfc	r1, #1, #1
    1c3a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1c3c:	aa02      	add	r2, sp, #8
    1c3e:	4422      	add	r2, r4
    1c40:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c44:	015a      	lsls	r2, r3, #5
    1c46:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c4a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c4e:	015b      	lsls	r3, r3, #5
    1c50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c54:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1c58:	f005 0307 	and.w	r3, r5, #7
    1c5c:	2b01      	cmp	r3, #1
    1c5e:	d143      	bne.n	1ce8 <_usb_d_dev_handle_trfail+0xf4>
    1c60:	7cc3      	ldrb	r3, [r0, #19]
    1c62:	f013 0f40 	tst.w	r3, #64	; 0x40
    1c66:	d03f      	beq.n	1ce8 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1c68:	09d9      	lsrs	r1, r3, #7
    1c6a:	428c      	cmp	r4, r1
    1c6c:	d03c      	beq.n	1ce8 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1c6e:	2200      	movs	r2, #0
    1c70:	4b1f      	ldr	r3, [pc, #124]	; (1cf0 <_usb_d_dev_handle_trfail+0xfc>)
    1c72:	4798      	blx	r3
    1c74:	e038      	b.n	1ce8 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1c76:	0159      	lsls	r1, r3, #5
    1c78:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1c7c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1c80:	f005 0507 	and.w	r5, r5, #7
    1c84:	e7ca      	b.n	1c1c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1c86:	f011 0f01 	tst.w	r1, #1
    1c8a:	d0cf      	beq.n	1c2c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1c8c:	7a91      	ldrb	r1, [r2, #10]
    1c8e:	f36f 0100 	bfc	r1, #0, #1
    1c92:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1c94:	aa02      	add	r2, sp, #8
    1c96:	4422      	add	r2, r4
    1c98:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c9c:	015a      	lsls	r2, r3, #5
    1c9e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ca2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ca6:	015b      	lsls	r3, r3, #5
    1ca8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1cac:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1cb0:	2204      	movs	r2, #4
    1cb2:	1c21      	adds	r1, r4, #0
    1cb4:	bf18      	it	ne
    1cb6:	2101      	movne	r1, #1
    1cb8:	4b0d      	ldr	r3, [pc, #52]	; (1cf0 <_usb_d_dev_handle_trfail+0xfc>)
    1cba:	4798      	blx	r3
    1cbc:	e014      	b.n	1ce8 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1cbe:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1cc2:	4a0a      	ldr	r2, [pc, #40]	; (1cec <_usb_d_dev_handle_trfail+0xf8>)
    1cc4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1cc8:	2100      	movs	r1, #0
    1cca:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1ccc:	aa02      	add	r2, sp, #8
    1cce:	4414      	add	r4, r2
    1cd0:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cd4:	015a      	lsls	r2, r3, #5
    1cd6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1cda:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cde:	015b      	lsls	r3, r3, #5
    1ce0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ce4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1ce8:	b003      	add	sp, #12
    1cea:	bd30      	pop	{r4, r5, pc}
    1cec:	2000010c 	.word	0x2000010c
    1cf0:	00001b89 	.word	0x00001b89

00001cf4 <_usb_d_dev_reset_epts>:
{
    1cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cf8:	4d0c      	ldr	r5, [pc, #48]	; (1d2c <_usb_d_dev_reset_epts+0x38>)
    1cfa:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1cfe:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1d02:	f04f 0803 	mov.w	r8, #3
    1d06:	4f0a      	ldr	r7, [pc, #40]	; (1d30 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1d08:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1d0a:	4641      	mov	r1, r8
    1d0c:	4620      	mov	r0, r4
    1d0e:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1d10:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1d12:	2300      	movs	r3, #0
    1d14:	74e3      	strb	r3, [r4, #19]
    1d16:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1d18:	42ac      	cmp	r4, r5
    1d1a:	d1f6      	bne.n	1d0a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1d1c:	2260      	movs	r2, #96	; 0x60
    1d1e:	4619      	mov	r1, r3
    1d20:	4802      	ldr	r0, [pc, #8]	; (1d2c <_usb_d_dev_reset_epts+0x38>)
    1d22:	4b04      	ldr	r3, [pc, #16]	; (1d34 <_usb_d_dev_reset_epts+0x40>)
    1d24:	4798      	blx	r3
    1d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d2a:	bf00      	nop
    1d2c:	2000010c 	.word	0x2000010c
    1d30:	00001b5d 	.word	0x00001b5d
    1d34:	00003893 	.word	0x00003893

00001d38 <_usb_d_dev_in_next>:
{
    1d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d3c:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1d3e:	7c84      	ldrb	r4, [r0, #18]
    1d40:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1d44:	4688      	mov	r8, r1
    1d46:	2900      	cmp	r1, #0
    1d48:	f000 809f 	beq.w	1e8a <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1d4c:	4b58      	ldr	r3, [pc, #352]	; (1eb0 <_usb_d_dev_in_next+0x178>)
    1d4e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1d52:	6958      	ldr	r0, [r3, #20]
    1d54:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1d58:	8a2b      	ldrh	r3, [r5, #16]
    1d5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1d5e:	4293      	cmp	r3, r2
    1d60:	f000 808d 	beq.w	1e7e <_usb_d_dev_in_next+0x146>
    1d64:	3b01      	subs	r3, #1
    1d66:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1d68:	7cef      	ldrb	r7, [r5, #19]
    1d6a:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    1d6e:	f1b8 0f00 	cmp.w	r8, #0
    1d72:	d005      	beq.n	1d80 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d74:	0162      	lsls	r2, r4, #5
    1d76:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1d7a:	2302      	movs	r3, #2
    1d7c:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1d80:	68a9      	ldr	r1, [r5, #8]
    1d82:	eb0e 0301 	add.w	r3, lr, r1
    1d86:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1d88:	686e      	ldr	r6, [r5, #4]
    1d8a:	42b3      	cmp	r3, r6
    1d8c:	d23f      	bcs.n	1e0e <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1d8e:	1af6      	subs	r6, r6, r3
    1d90:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1d92:	7cea      	ldrb	r2, [r5, #19]
    1d94:	f012 0f20 	tst.w	r2, #32
    1d98:	d02d      	beq.n	1df6 <_usb_d_dev_in_next+0xbe>
    1d9a:	8a2a      	ldrh	r2, [r5, #16]
    1d9c:	4296      	cmp	r6, r2
    1d9e:	bf28      	it	cs
    1da0:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1da2:	6829      	ldr	r1, [r5, #0]
    1da4:	4632      	mov	r2, r6
    1da6:	4419      	add	r1, r3
    1da8:	68e8      	ldr	r0, [r5, #12]
    1daa:	4b42      	ldr	r3, [pc, #264]	; (1eb4 <_usb_d_dev_in_next+0x17c>)
    1dac:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1dae:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1db0:	4b3f      	ldr	r3, [pc, #252]	; (1eb0 <_usb_d_dev_in_next+0x178>)
    1db2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1db6:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1db8:	4b3d      	ldr	r3, [pc, #244]	; (1eb0 <_usb_d_dev_in_next+0x178>)
    1dba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1dbe:	695a      	ldr	r2, [r3, #20]
    1dc0:	f366 020d 	bfi	r2, r6, #0, #14
    1dc4:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1dc6:	695a      	ldr	r2, [r3, #20]
    1dc8:	f36f 329b 	bfc	r2, #14, #14
    1dcc:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1dce:	f1b8 0f00 	cmp.w	r8, #0
    1dd2:	d108      	bne.n	1de6 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1dd4:	2f01      	cmp	r7, #1
    1dd6:	bf0c      	ite	eq
    1dd8:	224e      	moveq	r2, #78	; 0x4e
    1dda:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ddc:	0163      	lsls	r3, r4, #5
    1dde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1de2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1de6:	0164      	lsls	r4, r4, #5
    1de8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1dec:	2380      	movs	r3, #128	; 0x80
    1dee:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1df6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1dfa:	bf28      	it	cs
    1dfc:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1e00:	6829      	ldr	r1, [r5, #0]
    1e02:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1e04:	4a2a      	ldr	r2, [pc, #168]	; (1eb0 <_usb_d_dev_in_next+0x178>)
    1e06:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1e0a:	6113      	str	r3, [r2, #16]
    1e0c:	e7d4      	b.n	1db8 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    1e0e:	7ceb      	ldrb	r3, [r5, #19]
    1e10:	f013 0f10 	tst.w	r3, #16
    1e14:	d00f      	beq.n	1e36 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1e16:	7ceb      	ldrb	r3, [r5, #19]
    1e18:	f36f 1304 	bfc	r3, #4, #1
    1e1c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1e1e:	4b24      	ldr	r3, [pc, #144]	; (1eb0 <_usb_d_dev_in_next+0x178>)
    1e20:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1e24:	695a      	ldr	r2, [r3, #20]
    1e26:	f36f 020d 	bfc	r2, #0, #14
    1e2a:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1e2c:	695a      	ldr	r2, [r3, #20]
    1e2e:	f36f 329b 	bfc	r2, #14, #14
    1e32:	615a      	str	r2, [r3, #20]
    1e34:	e7cb      	b.n	1dce <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1e36:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e38:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1e3c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1e40:	bf0c      	ite	eq
    1e42:	234b      	moveq	r3, #75	; 0x4b
    1e44:	234a      	movne	r3, #74	; 0x4a
    1e46:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    1e4a:	8a2a      	ldrh	r2, [r5, #16]
    1e4c:	ea00 030e 	and.w	r3, r0, lr
    1e50:	429a      	cmp	r2, r3
    1e52:	d005      	beq.n	1e60 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1e54:	2100      	movs	r1, #0
    1e56:	4628      	mov	r0, r5
    1e58:	4b17      	ldr	r3, [pc, #92]	; (1eb8 <_usb_d_dev_in_next+0x180>)
    1e5a:	4798      	blx	r3
	return;
    1e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    1e60:	7ceb      	ldrb	r3, [r5, #19]
    1e62:	f36f 1386 	bfc	r3, #6, #1
    1e66:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1e68:	4b11      	ldr	r3, [pc, #68]	; (1eb0 <_usb_d_dev_in_next+0x178>)
    1e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1e6c:	68a9      	ldr	r1, [r5, #8]
    1e6e:	7ca8      	ldrb	r0, [r5, #18]
    1e70:	4798      	blx	r3
    1e72:	b9d0      	cbnz	r0, 1eaa <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1e74:	7ceb      	ldrb	r3, [r5, #19]
    1e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e7a:	74eb      	strb	r3, [r5, #19]
    1e7c:	e7ea      	b.n	1e54 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e7e:	7cef      	ldrb	r7, [r5, #19]
    1e80:	f007 0707 	and.w	r7, r7, #7
    1e84:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1e88:	e774      	b.n	1d74 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e8a:	8a03      	ldrh	r3, [r0, #16]
    1e8c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1e90:	4293      	cmp	r3, r2
    1e92:	d107      	bne.n	1ea4 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e94:	7cef      	ldrb	r7, [r5, #19]
    1e96:	f007 0707 	and.w	r7, r7, #7
    1e9a:	f04f 0e00 	mov.w	lr, #0
    1e9e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1ea2:	e76d      	b.n	1d80 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1ea4:	f04f 0e00 	mov.w	lr, #0
    1ea8:	e75c      	b.n	1d64 <_usb_d_dev_in_next+0x2c>
    1eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eae:	bf00      	nop
    1eb0:	2000010c 	.word	0x2000010c
    1eb4:	0000387d 	.word	0x0000387d
    1eb8:	00001b5d 	.word	0x00001b5d

00001ebc <_usb_d_dev_out_next>:
{
    1ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ec0:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1ec2:	7c85      	ldrb	r5, [r0, #18]
    1ec4:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1ec8:	4689      	mov	r9, r1
    1eca:	2900      	cmp	r1, #0
    1ecc:	d056      	beq.n	1f7c <_usb_d_dev_out_next+0xc0>
    1ece:	4b74      	ldr	r3, [pc, #464]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    1ed0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1ed4:	685a      	ldr	r2, [r3, #4]
    1ed6:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1eda:	685f      	ldr	r7, [r3, #4]
    1edc:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1ee0:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1ee2:	8a06      	ldrh	r6, [r0, #16]
    1ee4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1ee8:	429e      	cmp	r6, r3
    1eea:	f000 80ba 	beq.w	2062 <_usb_d_dev_out_next+0x1a6>
    1eee:	3e01      	subs	r6, #1
    1ef0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1ef2:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ef6:	f894 8013 	ldrb.w	r8, [r4, #19]
    1efa:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    1efe:	f1b9 0f00 	cmp.w	r9, #0
    1f02:	d005      	beq.n	1f10 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f04:	016b      	lsls	r3, r5, #5
    1f06:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f0a:	2201      	movs	r2, #1
    1f0c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1f10:	7ce3      	ldrb	r3, [r4, #19]
    1f12:	f013 0f20 	tst.w	r3, #32
    1f16:	d00d      	beq.n	1f34 <_usb_d_dev_out_next+0x78>
    1f18:	6862      	ldr	r2, [r4, #4]
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	d037      	beq.n	1f8e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1f1e:	68a0      	ldr	r0, [r4, #8]
    1f20:	1a12      	subs	r2, r2, r0
    1f22:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1f24:	6823      	ldr	r3, [r4, #0]
    1f26:	42ba      	cmp	r2, r7
    1f28:	bf28      	it	cs
    1f2a:	463a      	movcs	r2, r7
    1f2c:	68e1      	ldr	r1, [r4, #12]
    1f2e:	4418      	add	r0, r3
    1f30:	4b5c      	ldr	r3, [pc, #368]	; (20a4 <_usb_d_dev_out_next+0x1e8>)
    1f32:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1f34:	6863      	ldr	r3, [r4, #4]
    1f36:	b353      	cbz	r3, 1f8e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1f38:	f1b9 0f00 	cmp.w	r9, #0
    1f3c:	d040      	beq.n	1fc0 <_usb_d_dev_out_next+0x104>
    1f3e:	8a22      	ldrh	r2, [r4, #16]
    1f40:	42ba      	cmp	r2, r7
    1f42:	d93d      	bls.n	1fc0 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1f44:	7ce3      	ldrb	r3, [r4, #19]
    1f46:	f36f 1304 	bfc	r3, #4, #1
    1f4a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1f4c:	68a3      	ldr	r3, [r4, #8]
    1f4e:	445b      	add	r3, fp
    1f50:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1f52:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f56:	ea4f 1345 	mov.w	r3, r5, lsl #5
    1f5a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f5e:	bf0c      	ite	eq
    1f60:	222d      	moveq	r2, #45	; 0x2d
    1f62:	2225      	movne	r2, #37	; 0x25
    1f64:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1f68:	b915      	cbnz	r5, 1f70 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1f6a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1f6c:	4b4c      	ldr	r3, [pc, #304]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    1f6e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1f70:	2100      	movs	r1, #0
    1f72:	4620      	mov	r0, r4
    1f74:	4b4c      	ldr	r3, [pc, #304]	; (20a8 <_usb_d_dev_out_next+0x1ec>)
    1f76:	4798      	blx	r3
	return;
    1f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f7c:	8a06      	ldrh	r6, [r0, #16]
    1f7e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1f82:	429e      	cmp	r6, r3
    1f84:	d07b      	beq.n	207e <_usb_d_dev_out_next+0x1c2>
    1f86:	f04f 0b00 	mov.w	fp, #0
    1f8a:	46da      	mov	sl, fp
    1f8c:	e7af      	b.n	1eee <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1f8e:	7ce3      	ldrb	r3, [r4, #19]
    1f90:	f013 0f10 	tst.w	r3, #16
    1f94:	d06c      	beq.n	2070 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1f96:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1f98:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1f9c:	f043 0320 	orr.w	r3, r3, #32
    1fa0:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1fa2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1fa4:	493e      	ldr	r1, [pc, #248]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    1fa6:	016a      	lsls	r2, r5, #5
    1fa8:	188b      	adds	r3, r1, r2
    1faa:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1fac:	8a21      	ldrh	r1, [r4, #16]
    1fae:	685a      	ldr	r2, [r3, #4]
    1fb0:	f361 329b 	bfi	r2, r1, #14, #14
    1fb4:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1fb6:	685a      	ldr	r2, [r3, #4]
    1fb8:	f36f 020d 	bfc	r2, #0, #14
    1fbc:	605a      	str	r2, [r3, #4]
    1fbe:	e01d      	b.n	1ffc <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    1fc0:	68a2      	ldr	r2, [r4, #8]
    1fc2:	4452      	add	r2, sl
    1fc4:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1fc6:	4293      	cmp	r3, r2
    1fc8:	d9c3      	bls.n	1f52 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    1fca:	1a9b      	subs	r3, r3, r2
    1fcc:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1fce:	7ce1      	ldrb	r1, [r4, #19]
    1fd0:	f011 0f20 	tst.w	r1, #32
    1fd4:	d026      	beq.n	2024 <_usb_d_dev_out_next+0x168>
    1fd6:	8a22      	ldrh	r2, [r4, #16]
    1fd8:	4293      	cmp	r3, r2
    1fda:	bf28      	it	cs
    1fdc:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1fde:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1fe0:	016a      	lsls	r2, r5, #5
    1fe2:	492f      	ldr	r1, [pc, #188]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    1fe4:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1fe6:	4a2e      	ldr	r2, [pc, #184]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    1fe8:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    1fec:	6851      	ldr	r1, [r2, #4]
    1fee:	f363 319b 	bfi	r1, r3, #14, #14
    1ff2:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1ff4:	6853      	ldr	r3, [r2, #4]
    1ff6:	f36f 030d 	bfc	r3, #0, #14
    1ffa:	6053      	str	r3, [r2, #4]
	if (!isr) {
    1ffc:	f1b9 0f00 	cmp.w	r9, #0
    2000:	d108      	bne.n	2014 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2002:	f1b8 0f01 	cmp.w	r8, #1
    2006:	d025      	beq.n	2054 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2008:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    200a:	016b      	lsls	r3, r5, #5
    200c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2010:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2014:	016d      	lsls	r5, r5, #5
    2016:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    201a:	2340      	movs	r3, #64	; 0x40
    201c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2024:	8a21      	ldrh	r1, [r4, #16]
    2026:	428b      	cmp	r3, r1
    2028:	d90a      	bls.n	2040 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    202a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    202e:	d80e      	bhi.n	204e <_usb_d_dev_out_next+0x192>
    2030:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2034:	6821      	ldr	r1, [r4, #0]
    2036:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2038:	0169      	lsls	r1, r5, #5
    203a:	4819      	ldr	r0, [pc, #100]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    203c:	5042      	str	r2, [r0, r1]
    203e:	e7d2      	b.n	1fe6 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2040:	428b      	cmp	r3, r1
    2042:	d2f7      	bcs.n	2034 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2044:	7ce1      	ldrb	r1, [r4, #19]
    2046:	f041 0120 	orr.w	r1, r1, #32
    204a:	74e1      	strb	r1, [r4, #19]
    204c:	e7f2      	b.n	2034 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    204e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2052:	e7ef      	b.n	2034 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2054:	4b12      	ldr	r3, [pc, #72]	; (20a0 <_usb_d_dev_out_next+0x1e4>)
    2056:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    205a:	2200      	movs	r2, #0
    205c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    205e:	222d      	movs	r2, #45	; 0x2d
    2060:	e7d3      	b.n	200a <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2062:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2066:	f890 8013 	ldrb.w	r8, [r0, #19]
    206a:	f008 0807 	and.w	r8, r8, #7
    206e:	e749      	b.n	1f04 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2070:	f1b9 0f00 	cmp.w	r9, #0
    2074:	d10b      	bne.n	208e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2076:	68a3      	ldr	r3, [r4, #8]
    2078:	4453      	add	r3, sl
    207a:	60a3      	str	r3, [r4, #8]
    207c:	e769      	b.n	1f52 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    207e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2082:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2086:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2088:	46bb      	mov	fp, r7
    208a:	46ba      	mov	sl, r7
    208c:	e740      	b.n	1f10 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    208e:	8a23      	ldrh	r3, [r4, #16]
    2090:	42bb      	cmp	r3, r7
    2092:	f63f af57 	bhi.w	1f44 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2096:	68a3      	ldr	r3, [r4, #8]
    2098:	4453      	add	r3, sl
    209a:	60a3      	str	r3, [r4, #8]
    209c:	e759      	b.n	1f52 <_usb_d_dev_out_next+0x96>
    209e:	bf00      	nop
    20a0:	2000010c 	.word	0x2000010c
    20a4:	0000387d 	.word	0x0000387d
    20a8:	00001b5d 	.word	0x00001b5d

000020ac <_usb_d_dev_handler>:
{
    20ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    20b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    20b4:	8c1e      	ldrh	r6, [r3, #32]
    20b6:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    20b8:	b146      	cbz	r6, 20cc <_usb_d_dev_handler+0x20>
    20ba:	4d91      	ldr	r5, [pc, #580]	; (2300 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    20bc:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    20be:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    20c2:	f8df 9258 	ldr.w	r9, [pc, #600]	; 231c <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    20c6:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2320 <_usb_d_dev_handler+0x274>
    20ca:	e0d3      	b.n	2274 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    20cc:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    20ce:	8b1b      	ldrh	r3, [r3, #24]
    20d0:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    20d2:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    20d4:	f013 0f04 	tst.w	r3, #4
    20d8:	d11d      	bne.n	2116 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    20da:	f413 7f00 	tst.w	r3, #512	; 0x200
    20de:	d123      	bne.n	2128 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    20e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    20e4:	d147      	bne.n	2176 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    20e6:	f013 0f70 	tst.w	r3, #112	; 0x70
    20ea:	d14f      	bne.n	218c <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    20ec:	f013 0f08 	tst.w	r3, #8
    20f0:	d16e      	bne.n	21d0 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    20f2:	f013 0f01 	tst.w	r3, #1
    20f6:	d0e0      	beq.n	20ba <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    20f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    20fc:	f240 2201 	movw	r2, #513	; 0x201
    2100:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2102:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2104:	2270      	movs	r2, #112	; 0x70
    2106:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2108:	4b7e      	ldr	r3, [pc, #504]	; (2304 <_usb_d_dev_handler+0x258>)
    210a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    210c:	2100      	movs	r1, #0
    210e:	2004      	movs	r0, #4
    2110:	4798      	blx	r3
    2112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2116:	2204      	movs	r2, #4
    2118:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    211c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    211e:	4b79      	ldr	r3, [pc, #484]	; (2304 <_usb_d_dev_handler+0x258>)
    2120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2122:	4798      	blx	r3
    2124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2128:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    212c:	f240 2201 	movw	r2, #513	; 0x201
    2130:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2132:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2134:	2270      	movs	r2, #112	; 0x70
    2136:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2138:	4b72      	ldr	r3, [pc, #456]	; (2304 <_usb_d_dev_handler+0x258>)
    213a:	891b      	ldrh	r3, [r3, #8]
    213c:	f003 030f 	and.w	r3, r3, #15
    2140:	2b03      	cmp	r3, #3
    2142:	d00e      	beq.n	2162 <_usb_d_dev_handler+0xb6>
    2144:	4b6f      	ldr	r3, [pc, #444]	; (2304 <_usb_d_dev_handler+0x258>)
    2146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2148:	f003 030f 	and.w	r3, r3, #15
    214c:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    214e:	bf08      	it	eq
    2150:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2152:	d007      	beq.n	2164 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2154:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2156:	4b6b      	ldr	r3, [pc, #428]	; (2304 <_usb_d_dev_handler+0x258>)
    2158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    215a:	2003      	movs	r0, #3
    215c:	4798      	blx	r3
    215e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2162:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2164:	4b67      	ldr	r3, [pc, #412]	; (2304 <_usb_d_dev_handler+0x258>)
    2166:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    216a:	8919      	ldrh	r1, [r3, #8]
    216c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2170:	2200      	movs	r2, #0
    2172:	811a      	strh	r2, [r3, #8]
    2174:	e7ef      	b.n	2156 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2176:	2280      	movs	r2, #128	; 0x80
    2178:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    217c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    217e:	4b61      	ldr	r3, [pc, #388]	; (2304 <_usb_d_dev_handler+0x258>)
    2180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2182:	2100      	movs	r1, #0
    2184:	2005      	movs	r0, #5
    2186:	4798      	blx	r3
    2188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    218c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2190:	2270      	movs	r2, #112	; 0x70
    2192:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2194:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2196:	f240 2201 	movw	r2, #513	; 0x201
    219a:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    219c:	4b5a      	ldr	r3, [pc, #360]	; (2308 <_usb_d_dev_handler+0x25c>)
    219e:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    21a2:	f013 0f01 	tst.w	r3, #1
    21a6:	d00d      	beq.n	21c4 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    21a8:	4a57      	ldr	r2, [pc, #348]	; (2308 <_usb_d_dev_handler+0x25c>)
    21aa:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    21ac:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    21b0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    21b4:	d1f9      	bne.n	21aa <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    21b6:	4b53      	ldr	r3, [pc, #332]	; (2304 <_usb_d_dev_handler+0x258>)
    21b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    21ba:	2100      	movs	r1, #0
    21bc:	2002      	movs	r0, #2
    21be:	4798      	blx	r3
    21c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    21c4:	4a50      	ldr	r2, [pc, #320]	; (2308 <_usb_d_dev_handler+0x25c>)
    21c6:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    21c8:	f413 7f80 	tst.w	r3, #256	; 0x100
    21cc:	d0fb      	beq.n	21c6 <_usb_d_dev_handler+0x11a>
    21ce:	e7f2      	b.n	21b6 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    21d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    21d4:	2400      	movs	r4, #0
    21d6:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    21da:	2208      	movs	r2, #8
    21dc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    21de:	2270      	movs	r2, #112	; 0x70
    21e0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    21e2:	f240 2201 	movw	r2, #513	; 0x201
    21e6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    21e8:	4b48      	ldr	r3, [pc, #288]	; (230c <_usb_d_dev_handler+0x260>)
    21ea:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    21ec:	4b45      	ldr	r3, [pc, #276]	; (2304 <_usb_d_dev_handler+0x258>)
    21ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    21f0:	4621      	mov	r1, r4
    21f2:	2001      	movs	r0, #1
    21f4:	4798      	blx	r3
    21f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    21fa:	f011 0f10 	tst.w	r1, #16
    21fe:	d109      	bne.n	2214 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2200:	f011 0f40 	tst.w	r1, #64	; 0x40
    2204:	d108      	bne.n	2218 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2206:	f011 0f20 	tst.w	r1, #32
    220a:	d02f      	beq.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    220c:	2100      	movs	r1, #0
    220e:	4b40      	ldr	r3, [pc, #256]	; (2310 <_usb_d_dev_handler+0x264>)
    2210:	4798      	blx	r3
    2212:	e02b      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2214:	47c8      	blx	r9
    2216:	e029      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2218:	2101      	movs	r1, #1
    221a:	4b3d      	ldr	r3, [pc, #244]	; (2310 <_usb_d_dev_handler+0x264>)
    221c:	4798      	blx	r3
    221e:	e025      	b.n	226c <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2220:	f011 0f40 	tst.w	r1, #64	; 0x40
    2224:	d111      	bne.n	224a <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2226:	f011 0f08 	tst.w	r1, #8
    222a:	d112      	bne.n	2252 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    222c:	f011 0f02 	tst.w	r1, #2
    2230:	d112      	bne.n	2258 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2232:	f003 0307 	and.w	r3, r3, #7
    2236:	2b01      	cmp	r3, #1
    2238:	d118      	bne.n	226c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    223a:	f011 0f04 	tst.w	r1, #4
    223e:	d10f      	bne.n	2260 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2240:	f011 0f10 	tst.w	r1, #16
    2244:	d012      	beq.n	226c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2246:	47c8      	blx	r9
    2248:	e010      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    224a:	2101      	movs	r1, #1
    224c:	4b30      	ldr	r3, [pc, #192]	; (2310 <_usb_d_dev_handler+0x264>)
    224e:	4798      	blx	r3
    2250:	e00c      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2252:	2101      	movs	r1, #1
    2254:	47c0      	blx	r8
    2256:	e009      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2258:	2101      	movs	r1, #1
    225a:	4b2e      	ldr	r3, [pc, #184]	; (2314 <_usb_d_dev_handler+0x268>)
    225c:	4798      	blx	r3
    225e:	e005      	b.n	226c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2260:	2100      	movs	r1, #0
    2262:	47c0      	blx	r8
    2264:	e002      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2266:	2100      	movs	r1, #0
    2268:	4b29      	ldr	r3, [pc, #164]	; (2310 <_usb_d_dev_handler+0x264>)
    226a:	4798      	blx	r3
    226c:	3401      	adds	r4, #1
    226e:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2270:	2c09      	cmp	r4, #9
    2272:	d042      	beq.n	22fa <_usb_d_dev_handler+0x24e>
    2274:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2276:	7cab      	ldrb	r3, [r5, #18]
    2278:	2bff      	cmp	r3, #255	; 0xff
    227a:	d0f7      	beq.n	226c <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    227c:	f003 030f 	and.w	r3, r3, #15
    2280:	2101      	movs	r1, #1
    2282:	4099      	lsls	r1, r3
    2284:	4231      	tst	r1, r6
    2286:	d0f1      	beq.n	226c <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2288:	0159      	lsls	r1, r3, #5
    228a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    228e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2292:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2294:	015b      	lsls	r3, r3, #5
    2296:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    229a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    229e:	4019      	ands	r1, r3
    22a0:	d0e4      	beq.n	226c <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    22a2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    22a6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    22aa:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    22ae:	f003 0247 	and.w	r2, r3, #71	; 0x47
    22b2:	2a01      	cmp	r2, #1
    22b4:	d0a1      	beq.n	21fa <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    22b6:	f013 0f80 	tst.w	r3, #128	; 0x80
    22ba:	d1b1      	bne.n	2220 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    22bc:	f011 0f20 	tst.w	r1, #32
    22c0:	d1d1      	bne.n	2266 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    22c2:	f011 0f04 	tst.w	r1, #4
    22c6:	d10e      	bne.n	22e6 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    22c8:	f011 0f01 	tst.w	r1, #1
    22cc:	d10e      	bne.n	22ec <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    22ce:	f003 0307 	and.w	r3, r3, #7
    22d2:	2b01      	cmp	r3, #1
    22d4:	d1ca      	bne.n	226c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    22d6:	f011 0f08 	tst.w	r1, #8
    22da:	d10b      	bne.n	22f4 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    22dc:	f011 0f10 	tst.w	r1, #16
    22e0:	d0c4      	beq.n	226c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    22e2:	47c8      	blx	r9
    22e4:	e7c2      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    22e6:	2100      	movs	r1, #0
    22e8:	47c0      	blx	r8
    22ea:	e7bf      	b.n	226c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    22ec:	2101      	movs	r1, #1
    22ee:	4b0a      	ldr	r3, [pc, #40]	; (2318 <_usb_d_dev_handler+0x26c>)
    22f0:	4798      	blx	r3
    22f2:	e7bb      	b.n	226c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    22f4:	2101      	movs	r1, #1
    22f6:	47c0      	blx	r8
    22f8:	e7b8      	b.n	226c <_usb_d_dev_handler+0x1c0>
    22fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    22fe:	bf00      	nop
    2300:	20000180 	.word	0x20000180
    2304:	2000010c 	.word	0x2000010c
    2308:	40001000 	.word	0x40001000
    230c:	00001cf5 	.word	0x00001cf5
    2310:	00001b31 	.word	0x00001b31
    2314:	00001d39 	.word	0x00001d39
    2318:	00001ebd 	.word	0x00001ebd
    231c:	00001ab5 	.word	0x00001ab5
    2320:	00001bf5 	.word	0x00001bf5

00002324 <_usb_d_dev_init>:
{
    2324:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2326:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    232a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    232c:	f013 0f01 	tst.w	r3, #1
    2330:	d124      	bne.n	237c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2332:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2336:	7893      	ldrb	r3, [r2, #2]
    2338:	f013 0f03 	tst.w	r3, #3
    233c:	d1fb      	bne.n	2336 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    233e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2342:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2344:	f013 0f02 	tst.w	r3, #2
    2348:	d00f      	beq.n	236a <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    234a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    234e:	7813      	ldrb	r3, [r2, #0]
    2350:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2354:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2356:	7893      	ldrb	r3, [r2, #2]
    2358:	f013 0f03 	tst.w	r3, #3
    235c:	d1fb      	bne.n	2356 <_usb_d_dev_init+0x32>
    235e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2362:	7893      	ldrb	r3, [r2, #2]
    2364:	f013 0f02 	tst.w	r3, #2
    2368:	d1fb      	bne.n	2362 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    236a:	2201      	movs	r2, #1
    236c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2370:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2372:	461a      	mov	r2, r3
    2374:	7893      	ldrb	r3, [r2, #2]
    2376:	f013 0f03 	tst.w	r3, #3
    237a:	d1fb      	bne.n	2374 <_usb_d_dev_init+0x50>
    237c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2380:	7893      	ldrb	r3, [r2, #2]
    2382:	f013 0f01 	tst.w	r3, #1
    2386:	d1fb      	bne.n	2380 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2388:	4b21      	ldr	r3, [pc, #132]	; (2410 <_usb_d_dev_init+0xec>)
    238a:	4a22      	ldr	r2, [pc, #136]	; (2414 <_usb_d_dev_init+0xf0>)
    238c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    238e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2390:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2392:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2394:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2396:	4b20      	ldr	r3, [pc, #128]	; (2418 <_usb_d_dev_init+0xf4>)
    2398:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    239a:	4b20      	ldr	r3, [pc, #128]	; (241c <_usb_d_dev_init+0xf8>)
    239c:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    239e:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    23a2:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    23a6:	f011 011f 	ands.w	r1, r1, #31
    23aa:	d02b      	beq.n	2404 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    23ac:	291f      	cmp	r1, #31
    23ae:	bf08      	it	eq
    23b0:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    23b2:	b34b      	cbz	r3, 2408 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    23b4:	2b1f      	cmp	r3, #31
    23b6:	bf08      	it	eq
    23b8:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    23ba:	b33a      	cbz	r2, 240c <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    23bc:	2a07      	cmp	r2, #7
    23be:	bf08      	it	eq
    23c0:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    23c2:	f003 031f 	and.w	r3, r3, #31
    23c6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    23ca:	0312      	lsls	r2, r2, #12
    23cc:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    23d0:	4313      	orrs	r3, r2
    23d2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    23d6:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    23d8:	78d3      	ldrb	r3, [r2, #3]
    23da:	f043 0303 	orr.w	r3, r3, #3
    23de:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    23e0:	78d3      	ldrb	r3, [r2, #3]
    23e2:	f043 030c 	orr.w	r3, r3, #12
    23e6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    23e8:	2304      	movs	r3, #4
    23ea:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    23ec:	7893      	ldrb	r3, [r2, #2]
    23ee:	f013 0f03 	tst.w	r3, #3
    23f2:	d1fb      	bne.n	23ec <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    23f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23f8:	4a05      	ldr	r2, [pc, #20]	; (2410 <_usb_d_dev_init+0xec>)
    23fa:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    23fc:	2201      	movs	r2, #1
    23fe:	811a      	strh	r2, [r3, #8]
}
    2400:	2000      	movs	r0, #0
    2402:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2404:	2109      	movs	r1, #9
    2406:	e7d4      	b.n	23b2 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    2408:	2319      	movs	r3, #25
    240a:	e7d6      	b.n	23ba <_usb_d_dev_init+0x96>
		pad_trim = 6;
    240c:	2206      	movs	r2, #6
    240e:	e7d8      	b.n	23c2 <_usb_d_dev_init+0x9e>
    2410:	2000010c 	.word	0x2000010c
    2414:	00001ab1 	.word	0x00001ab1
    2418:	00001cf5 	.word	0x00001cf5
    241c:	00800084 	.word	0x00800084

00002420 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2420:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2424:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2426:	f013 0f03 	tst.w	r3, #3
    242a:	d129      	bne.n	2480 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    242c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2430:	7893      	ldrb	r3, [r2, #2]
    2432:	f013 0f03 	tst.w	r3, #3
    2436:	d1fb      	bne.n	2430 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2438:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2440:	f013 0f02 	tst.w	r3, #2
    2444:	d108      	bne.n	2458 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2446:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    244a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    244e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2450:	7893      	ldrb	r3, [r2, #2]
    2452:	f013 0f03 	tst.w	r3, #3
    2456:	d1fb      	bne.n	2450 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2458:	4b0b      	ldr	r3, [pc, #44]	; (2488 <_usb_d_dev_enable+0x68>)
    245a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    245e:	609a      	str	r2, [r3, #8]
    2460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2464:	609a      	str	r2, [r3, #8]
    2466:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    246a:	609a      	str	r2, [r3, #8]
    246c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2470:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2472:	f240 228d 	movw	r2, #653	; 0x28d
    2476:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    247a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    247c:	2000      	movs	r0, #0
    247e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2480:	f06f 0010 	mvn.w	r0, #16
}
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	e000e100 	.word	0xe000e100

0000248c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    248c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2490:	8913      	ldrh	r3, [r2, #8]
    2492:	f023 0301 	bic.w	r3, r3, #1
    2496:	041b      	lsls	r3, r3, #16
    2498:	0c1b      	lsrs	r3, r3, #16
    249a:	8113      	strh	r3, [r2, #8]
    249c:	4770      	bx	lr

0000249e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    249e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    24a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    24a6:	7298      	strb	r0, [r3, #10]
    24a8:	4770      	bx	lr
	...

000024ac <_usb_d_dev_ep_init>:
{
    24ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ae:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24b2:	f010 050f 	ands.w	r5, r0, #15
    24b6:	d04d      	beq.n	2554 <_usb_d_dev_ep_init+0xa8>
    24b8:	f1be 0f00 	cmp.w	lr, #0
    24bc:	bfb4      	ite	lt
    24be:	1cac      	addlt	r4, r5, #2
    24c0:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    24c2:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    24c6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    24c8:	2d02      	cmp	r5, #2
    24ca:	d947      	bls.n	255c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    24cc:	f06f 0011 	mvn.w	r0, #17
    24d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    24d2:	f1be 0f00 	cmp.w	lr, #0
    24d6:	db1b      	blt.n	2510 <_usb_d_dev_ep_init+0x64>
    24d8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    24dc:	4e37      	ldr	r6, [pc, #220]	; (25bc <_usb_d_dev_ep_init+0x110>)
    24de:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    24e2:	2d00      	cmp	r5, #0
    24e4:	d15e      	bne.n	25a4 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    24e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    24ea:	4d34      	ldr	r5, [pc, #208]	; (25bc <_usb_d_dev_ep_init+0x110>)
    24ec:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    24f0:	4d33      	ldr	r5, [pc, #204]	; (25c0 <_usb_d_dev_ep_init+0x114>)
    24f2:	00a6      	lsls	r6, r4, #2
    24f4:	1933      	adds	r3, r6, r4
    24f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    24fa:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    24fe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    2502:	3101      	adds	r1, #1
    2504:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    2508:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    250c:	2000      	movs	r0, #0
    250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2510:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2514:	4e29      	ldr	r6, [pc, #164]	; (25bc <_usb_d_dev_ep_init+0x110>)
    2516:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    251a:	686d      	ldr	r5, [r5, #4]
    251c:	b935      	cbnz	r5, 252c <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    251e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2522:	4d26      	ldr	r5, [pc, #152]	; (25bc <_usb_d_dev_ep_init+0x110>)
    2524:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2528:	685f      	ldr	r7, [r3, #4]
    252a:	e7e1      	b.n	24f0 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    252c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2530:	4e22      	ldr	r6, [pc, #136]	; (25bc <_usb_d_dev_ep_init+0x110>)
    2532:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2536:	896d      	ldrh	r5, [r5, #10]
    2538:	4295      	cmp	r5, r2
    253a:	daf0      	bge.n	251e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    253c:	f06f 0012 	mvn.w	r0, #18
    2540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2542:	f06f 0013 	mvn.w	r0, #19
    2546:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2548:	f06f 0013 	mvn.w	r0, #19
    254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    254e:	f06f 0012 	mvn.w	r0, #18
    2552:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2554:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    2558:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    255a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    255c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    2560:	4f17      	ldr	r7, [pc, #92]	; (25c0 <_usb_d_dev_ep_init+0x114>)
    2562:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    2566:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    256a:	2eff      	cmp	r6, #255	; 0xff
    256c:	d1e9      	bne.n	2542 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    256e:	2900      	cmp	r1, #0
    2570:	d1af      	bne.n	24d2 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2572:	b125      	cbz	r5, 257e <_usb_d_dev_ep_init+0xd2>
    2574:	f1be 0f00 	cmp.w	lr, #0
    2578:	bfa4      	itt	ge
    257a:	3502      	addge	r5, #2
    257c:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    257e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2582:	4e0f      	ldr	r6, [pc, #60]	; (25c0 <_usb_d_dev_ep_init+0x114>)
    2584:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2588:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    258c:	2dff      	cmp	r5, #255	; 0xff
    258e:	d1db      	bne.n	2548 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    2590:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2594:	4e09      	ldr	r6, [pc, #36]	; (25bc <_usb_d_dev_ep_init+0x110>)
    2596:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    259a:	2d00      	cmp	r5, #0
    259c:	d0d7      	beq.n	254e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    259e:	f1be 0f00 	cmp.w	lr, #0
    25a2:	dbb5      	blt.n	2510 <_usb_d_dev_ep_init+0x64>
    25a4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    25a8:	4e04      	ldr	r6, [pc, #16]	; (25bc <_usb_d_dev_ep_init+0x110>)
    25aa:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    25ae:	892d      	ldrh	r5, [r5, #8]
    25b0:	4295      	cmp	r5, r2
    25b2:	da98      	bge.n	24e6 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    25b4:	f06f 0012 	mvn.w	r0, #18
    25b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ba:	bf00      	nop
    25bc:	00003958 	.word	0x00003958
    25c0:	2000010c 	.word	0x2000010c

000025c4 <_usb_d_dev_ep_deinit>:
{
    25c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25c6:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25c8:	f010 060f 	ands.w	r6, r0, #15
    25cc:	d00e      	beq.n	25ec <_usb_d_dev_ep_deinit+0x28>
    25ce:	2f00      	cmp	r7, #0
    25d0:	bfb4      	ite	lt
    25d2:	1cb3      	addlt	r3, r6, #2
    25d4:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    25d6:	2e02      	cmp	r6, #2
    25d8:	d900      	bls.n	25dc <_usb_d_dev_ep_deinit+0x18>
    25da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    25dc:	461d      	mov	r5, r3
    25de:	3301      	adds	r3, #1
    25e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    25e4:	4a24      	ldr	r2, [pc, #144]	; (2678 <_usb_d_dev_ep_deinit+0xb4>)
    25e6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    25ea:	e002      	b.n	25f2 <_usb_d_dev_ep_deinit+0x2e>
    25ec:	f8df e094 	ldr.w	lr, [pc, #148]	; 2684 <_usb_d_dev_ep_deinit+0xc0>
    25f0:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    25f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    25f6:	4a21      	ldr	r2, [pc, #132]	; (267c <_usb_d_dev_ep_deinit+0xb8>)
    25f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25fc:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    2600:	2aff      	cmp	r2, #255	; 0xff
    2602:	d0ea      	beq.n	25da <_usb_d_dev_ep_deinit+0x16>
    2604:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2606:	2203      	movs	r2, #3
    2608:	0ff9      	lsrs	r1, r7, #31
    260a:	4670      	mov	r0, lr
    260c:	4b1c      	ldr	r3, [pc, #112]	; (2680 <_usb_d_dev_ep_deinit+0xbc>)
    260e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2610:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2614:	4a19      	ldr	r2, [pc, #100]	; (267c <_usb_d_dev_ep_deinit+0xb8>)
    2616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    261a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    261e:	f003 0307 	and.w	r3, r3, #7
    2622:	2b01      	cmp	r3, #1
    2624:	d016      	beq.n	2654 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    2626:	2f00      	cmp	r7, #0
    2628:	db1b      	blt.n	2662 <_usb_d_dev_ep_deinit+0x9e>
    262a:	0160      	lsls	r0, r4, #5
    262c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2630:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    2634:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    2638:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    263c:	4b0f      	ldr	r3, [pc, #60]	; (267c <_usb_d_dev_ep_deinit+0xb8>)
    263e:	00aa      	lsls	r2, r5, #2
    2640:	1951      	adds	r1, r2, r5
    2642:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2646:	2000      	movs	r0, #0
    2648:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    264c:	22ff      	movs	r2, #255	; 0xff
    264e:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    2652:	e7c2      	b.n	25da <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2654:	0160      	lsls	r0, r4, #5
    2656:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    265a:	2300      	movs	r3, #0
    265c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    2660:	e7ec      	b.n	263c <_usb_d_dev_ep_deinit+0x78>
    2662:	0176      	lsls	r6, r6, #5
    2664:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2668:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    266c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    2670:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    2674:	e7e2      	b.n	263c <_usb_d_dev_ep_deinit+0x78>
    2676:	bf00      	nop
    2678:	2000016c 	.word	0x2000016c
    267c:	2000010c 	.word	0x2000010c
    2680:	00001b89 	.word	0x00001b89
    2684:	20000180 	.word	0x20000180

00002688 <_usb_d_dev_ep_enable>:
{
    2688:	b5f0      	push	{r4, r5, r6, r7, lr}
    268a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    268c:	f010 000f 	ands.w	r0, r0, #15
    2690:	f000 80a6 	beq.w	27e0 <_usb_d_dev_ep_enable+0x158>
    2694:	2f00      	cmp	r7, #0
    2696:	bfb4      	ite	lt
    2698:	1c83      	addlt	r3, r0, #2
    269a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    269c:	4606      	mov	r6, r0
    269e:	0142      	lsls	r2, r0, #5
    26a0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    26a4:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    26a8:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    26aa:	2802      	cmp	r0, #2
    26ac:	f240 809f 	bls.w	27ee <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    26b0:	f06f 0011 	mvn.w	r0, #17
    26b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    26b6:	f014 0f77 	tst.w	r4, #119	; 0x77
    26ba:	f040 8088 	bne.w	27ce <_usb_d_dev_ep_enable+0x146>
    26be:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    26c2:	2111      	movs	r1, #17
    26c4:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    26c8:	4c97      	ldr	r4, [pc, #604]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    26ca:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    26ce:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    26d2:	4996      	ldr	r1, [pc, #600]	; (292c <_usb_d_dev_ep_enable+0x2a4>)
    26d4:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    26d8:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    26dc:	f200 80cc 	bhi.w	2878 <_usb_d_dev_ep_enable+0x1f0>
    26e0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    26e4:	f200 810a 	bhi.w	28fc <_usb_d_dev_ep_enable+0x274>
    26e8:	2c80      	cmp	r4, #128	; 0x80
    26ea:	f200 80f9 	bhi.w	28e0 <_usb_d_dev_ep_enable+0x258>
    26ee:	2c40      	cmp	r4, #64	; 0x40
    26f0:	f200 810b 	bhi.w	290a <_usb_d_dev_ep_enable+0x282>
    26f4:	2c20      	cmp	r4, #32
    26f6:	f200 80fa 	bhi.w	28ee <_usb_d_dev_ep_enable+0x266>
    26fa:	2c10      	cmp	r4, #16
    26fc:	f200 810c 	bhi.w	2918 <_usb_d_dev_ep_enable+0x290>
    2700:	2c08      	cmp	r4, #8
    2702:	bf94      	ite	ls
    2704:	2700      	movls	r7, #0
    2706:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2708:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    270c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    270e:	f3c4 010d 	ubfx	r1, r4, #0, #14
    2712:	e0b7      	b.n	2884 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2714:	f014 0f70 	tst.w	r4, #112	; 0x70
    2718:	d15c      	bne.n	27d4 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    271a:	4d83      	ldr	r5, [pc, #524]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    271c:	009f      	lsls	r7, r3, #2
    271e:	18f9      	adds	r1, r7, r3
    2720:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2724:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2728:	0109      	lsls	r1, r1, #4
    272a:	f001 0170 	and.w	r1, r1, #112	; 0x70
    272e:	430c      	orrs	r4, r1
    2730:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2734:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2738:	443b      	add	r3, r7
    273a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    273e:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    2742:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    274a:	d80f      	bhi.n	276c <_usb_d_dev_ep_enable+0xe4>
    274c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2750:	d819      	bhi.n	2786 <_usb_d_dev_ep_enable+0xfe>
    2752:	2b80      	cmp	r3, #128	; 0x80
    2754:	d819      	bhi.n	278a <_usb_d_dev_ep_enable+0x102>
    2756:	2b40      	cmp	r3, #64	; 0x40
    2758:	d819      	bhi.n	278e <_usb_d_dev_ep_enable+0x106>
    275a:	2b20      	cmp	r3, #32
    275c:	d819      	bhi.n	2792 <_usb_d_dev_ep_enable+0x10a>
    275e:	2b10      	cmp	r3, #16
    2760:	d819      	bhi.n	2796 <_usb_d_dev_ep_enable+0x10e>
    2762:	2b08      	cmp	r3, #8
    2764:	bf94      	ite	ls
    2766:	2300      	movls	r3, #0
    2768:	2301      	movhi	r3, #1
    276a:	e000      	b.n	276e <_usb_d_dev_ep_enable+0xe6>
    276c:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    276e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    2772:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2774:	2380      	movs	r3, #128	; 0x80
    2776:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    277a:	4b6b      	ldr	r3, [pc, #428]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    277c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2780:	2000      	movs	r0, #0
    2782:	76b0      	strb	r0, [r6, #26]
    2784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2786:	2306      	movs	r3, #6
    2788:	e7f1      	b.n	276e <_usb_d_dev_ep_enable+0xe6>
    278a:	2305      	movs	r3, #5
    278c:	e7ef      	b.n	276e <_usb_d_dev_ep_enable+0xe6>
    278e:	2304      	movs	r3, #4
    2790:	e7ed      	b.n	276e <_usb_d_dev_ep_enable+0xe6>
    2792:	2303      	movs	r3, #3
    2794:	e7eb      	b.n	276e <_usb_d_dev_ep_enable+0xe6>
    2796:	2302      	movs	r3, #2
    2798:	e7e9      	b.n	276e <_usb_d_dev_ep_enable+0xe6>
    279a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    279c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    27a0:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    27a2:	2340      	movs	r3, #64	; 0x40
    27a4:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    27a8:	4b5f      	ldr	r3, [pc, #380]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    27aa:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    27ae:	2000      	movs	r0, #0
    27b0:	72b0      	strb	r0, [r6, #10]
    27b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    27b4:	2106      	movs	r1, #6
    27b6:	e7f1      	b.n	279c <_usb_d_dev_ep_enable+0x114>
    27b8:	2105      	movs	r1, #5
    27ba:	e7ef      	b.n	279c <_usb_d_dev_ep_enable+0x114>
    27bc:	2104      	movs	r1, #4
    27be:	e7ed      	b.n	279c <_usb_d_dev_ep_enable+0x114>
    27c0:	2103      	movs	r1, #3
    27c2:	e7eb      	b.n	279c <_usb_d_dev_ep_enable+0x114>
    27c4:	2102      	movs	r1, #2
    27c6:	e7e9      	b.n	279c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    27c8:	f06f 0011 	mvn.w	r0, #17
    27cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    27ce:	f06f 0013 	mvn.w	r0, #19
    27d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    27d4:	f06f 0013 	mvn.w	r0, #19
    27d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    27da:	f06f 0013 	mvn.w	r0, #19
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    27e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27e4:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    27e8:	b2e4      	uxtb	r4, r4
    27ea:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    27ec:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    27ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    27f2:	494d      	ldr	r1, [pc, #308]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    27f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    27f8:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    27fc:	2dff      	cmp	r5, #255	; 0xff
    27fe:	d0e3      	beq.n	27c8 <_usb_d_dev_ep_enable+0x140>
    2800:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2802:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2804:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    2808:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    280c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2810:	f001 0107 	and.w	r1, r1, #7
    2814:	2901      	cmp	r1, #1
    2816:	f43f af4e 	beq.w	26b6 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    281a:	2f00      	cmp	r7, #0
    281c:	f6ff af7a 	blt.w	2714 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2820:	f014 0f07 	tst.w	r4, #7
    2824:	d1d9      	bne.n	27da <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2826:	4d40      	ldr	r5, [pc, #256]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    2828:	009f      	lsls	r7, r3, #2
    282a:	18f9      	adds	r1, r7, r3
    282c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2830:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2834:	f001 0107 	and.w	r1, r1, #7
    2838:	430c      	orrs	r4, r1
    283a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    283e:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2842:	443b      	add	r3, r7
    2844:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2848:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    284c:	4b37      	ldr	r3, [pc, #220]	; (292c <_usb_d_dev_ep_enable+0x2a4>)
    284e:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2852:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2856:	d8a0      	bhi.n	279a <_usb_d_dev_ep_enable+0x112>
    2858:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    285c:	d8aa      	bhi.n	27b4 <_usb_d_dev_ep_enable+0x12c>
    285e:	2980      	cmp	r1, #128	; 0x80
    2860:	d8aa      	bhi.n	27b8 <_usb_d_dev_ep_enable+0x130>
    2862:	2940      	cmp	r1, #64	; 0x40
    2864:	d8aa      	bhi.n	27bc <_usb_d_dev_ep_enable+0x134>
    2866:	2920      	cmp	r1, #32
    2868:	d8aa      	bhi.n	27c0 <_usb_d_dev_ep_enable+0x138>
    286a:	2910      	cmp	r1, #16
    286c:	d8aa      	bhi.n	27c4 <_usb_d_dev_ep_enable+0x13c>
    286e:	2908      	cmp	r1, #8
    2870:	bf94      	ite	ls
    2872:	2100      	movls	r1, #0
    2874:	2101      	movhi	r1, #1
    2876:	e791      	b.n	279c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2878:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    287c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    287e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2882:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2884:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2888:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    288a:	2140      	movs	r1, #64	; 0x40
    288c:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2890:	2080      	movs	r0, #128	; 0x80
    2892:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2896:	4a24      	ldr	r2, [pc, #144]	; (2928 <_usb_d_dev_ep_enable+0x2a0>)
    2898:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    289c:	2000      	movs	r0, #0
    289e:	72b0      	strb	r0, [r6, #10]
    28a0:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28a2:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    28a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    28aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28ae:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    28b2:	016d      	lsls	r5, r5, #5
    28b4:	1953      	adds	r3, r2, r5
    28b6:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    28b8:	685a      	ldr	r2, [r3, #4]
    28ba:	f364 329b 	bfi	r2, r4, #14, #14
    28be:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    28c0:	685a      	ldr	r2, [r3, #4]
    28c2:	f360 020d 	bfi	r2, r0, #0, #14
    28c6:	605a      	str	r2, [r3, #4]
    28c8:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    28cc:	22b0      	movs	r2, #176	; 0xb0
    28ce:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28d2:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    28d6:	461d      	mov	r5, r3
    28d8:	2310      	movs	r3, #16
    28da:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    28de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28e0:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    28e4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28e6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    28ea:	2705      	movs	r7, #5
    28ec:	e7ca      	b.n	2884 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28ee:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    28f2:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28f4:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    28f8:	2703      	movs	r7, #3
    28fa:	e7c3      	b.n	2884 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28fc:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2900:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2902:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2906:	2706      	movs	r7, #6
    2908:	e7bc      	b.n	2884 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    290a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    290e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2910:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2914:	2704      	movs	r7, #4
    2916:	e7b5      	b.n	2884 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2918:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    291c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    291e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2922:	2702      	movs	r7, #2
    2924:	e7ae      	b.n	2884 <_usb_d_dev_ep_enable+0x1fc>
    2926:	bf00      	nop
    2928:	2000010c 	.word	0x2000010c
    292c:	0fffc000 	.word	0x0fffc000

00002930 <_usb_d_dev_ep_stall>:
{
    2930:	b470      	push	{r4, r5, r6}
    2932:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2934:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2936:	f010 000f 	ands.w	r0, r0, #15
    293a:	d008      	beq.n	294e <_usb_d_dev_ep_stall+0x1e>
    293c:	2b00      	cmp	r3, #0
    293e:	bfb4      	ite	lt
    2940:	1c83      	addlt	r3, r0, #2
    2942:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2944:	2802      	cmp	r0, #2
    2946:	d903      	bls.n	2950 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2948:	f06f 0011 	mvn.w	r0, #17
    294c:	e018      	b.n	2980 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    294e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2950:	2901      	cmp	r1, #1
    2952:	d017      	beq.n	2984 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2954:	2900      	cmp	r1, #0
    2956:	d03a      	beq.n	29ce <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    295c:	4a45      	ldr	r2, [pc, #276]	; (2a74 <_usb_d_dev_ep_stall+0x144>)
    295e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2962:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2966:	f003 030f 	and.w	r3, r3, #15
    296a:	015b      	lsls	r3, r3, #5
    296c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2970:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2974:	2310      	movs	r3, #16
    2976:	40a3      	lsls	r3, r4
    2978:	421a      	tst	r2, r3
    297a:	bf14      	ite	ne
    297c:	2001      	movne	r0, #1
    297e:	2000      	moveq	r0, #0
}
    2980:	bc70      	pop	{r4, r5, r6}
    2982:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2984:	2510      	movs	r5, #16
    2986:	40a5      	lsls	r5, r4
    2988:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    298a:	493a      	ldr	r1, [pc, #232]	; (2a74 <_usb_d_dev_ep_stall+0x144>)
    298c:	009e      	lsls	r6, r3, #2
    298e:	18f2      	adds	r2, r6, r3
    2990:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2994:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2998:	f002 020f 	and.w	r2, r2, #15
    299c:	0150      	lsls	r0, r2, #5
    299e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    29a2:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    29a6:	2020      	movs	r0, #32
    29a8:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    29ac:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    29ae:	0152      	lsls	r2, r2, #5
    29b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    29b4:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    29b8:	4433      	add	r3, r6
    29ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    29be:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    29c2:	f042 0208 	orr.w	r2, r2, #8
    29c6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    29ca:	2000      	movs	r0, #0
    29cc:	e7d8      	b.n	2980 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    29ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    29d2:	4928      	ldr	r1, [pc, #160]	; (2a74 <_usb_d_dev_ep_stall+0x144>)
    29d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    29d8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    29dc:	f002 020f 	and.w	r2, r2, #15
    29e0:	0151      	lsls	r1, r2, #5
    29e2:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    29e6:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    29ea:	2010      	movs	r0, #16
    29ec:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    29ee:	4205      	tst	r5, r0
    29f0:	d03c      	beq.n	2a6c <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    29f2:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    29f4:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    29f8:	2020      	movs	r0, #32
    29fa:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    29fc:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    29fe:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2a02:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2a06:	4202      	tst	r2, r0
    2a08:	d007      	beq.n	2a1a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a0a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2a0e:	2201      	movs	r2, #1
    2a10:	fa02 f404 	lsl.w	r4, r2, r4
    2a14:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a16:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2a1a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2a1e:	4815      	ldr	r0, [pc, #84]	; (2a74 <_usb_d_dev_ep_stall+0x144>)
    2a20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2a24:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2a28:	f002 0207 	and.w	r2, r2, #7
    2a2c:	2a01      	cmp	r2, #1
    2a2e:	d00c      	beq.n	2a4a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    2a30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2a34:	4a0f      	ldr	r2, [pc, #60]	; (2a74 <_usb_d_dev_ep_stall+0x144>)
    2a36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a3a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2a3e:	f36f 02c3 	bfc	r2, #3, #1
    2a42:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2a46:	2000      	movs	r0, #0
    2a48:	e79a      	b.n	2980 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2a4a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2a4e:	f012 0f30 	tst.w	r2, #48	; 0x30
    2a52:	d10d      	bne.n	2a70 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2a54:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2a58:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2a5c:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2a60:	f36f 02c3 	bfc	r2, #3, #1
    2a64:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2a68:	2000      	movs	r0, #0
    2a6a:	e789      	b.n	2980 <_usb_d_dev_ep_stall+0x50>
    2a6c:	2000      	movs	r0, #0
    2a6e:	e787      	b.n	2980 <_usb_d_dev_ep_stall+0x50>
    2a70:	2000      	movs	r0, #0
    2a72:	e785      	b.n	2980 <_usb_d_dev_ep_stall+0x50>
    2a74:	2000010c 	.word	0x2000010c

00002a78 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2a78:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    2a7a:	f000 040f 	and.w	r4, r0, #15
    2a7e:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2a80:	4a14      	ldr	r2, [pc, #80]	; (2ad4 <_usb_d_dev_ep_read_req+0x5c>)
    2a82:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2a84:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2a86:	6840      	ldr	r0, [r0, #4]
    2a88:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2a8c:	2c02      	cmp	r4, #2
    2a8e:	d817      	bhi.n	2ac0 <_usb_d_dev_ep_read_req+0x48>
    2a90:	b1c9      	cbz	r1, 2ac6 <_usb_d_dev_ep_read_req+0x4e>
    2a92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2a96:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    2a9a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2a9c:	2a11      	cmp	r2, #17
    2a9e:	d115      	bne.n	2acc <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2aa0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2aa4:	f012 0f10 	tst.w	r2, #16
    2aa8:	d102      	bne.n	2ab0 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    2aaa:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2aac:	bc30      	pop	{r4, r5}
    2aae:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2ab0:	682c      	ldr	r4, [r5, #0]
    2ab2:	686a      	ldr	r2, [r5, #4]
    2ab4:	600c      	str	r4, [r1, #0]
    2ab6:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2ab8:	2210      	movs	r2, #16
    2aba:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2abe:	e7f5      	b.n	2aac <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2ac0:	f06f 0011 	mvn.w	r0, #17
    2ac4:	e7f2      	b.n	2aac <_usb_d_dev_ep_read_req+0x34>
    2ac6:	f06f 0011 	mvn.w	r0, #17
    2aca:	e7ef      	b.n	2aac <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2acc:	f06f 0012 	mvn.w	r0, #18
    2ad0:	e7ec      	b.n	2aac <_usb_d_dev_ep_read_req+0x34>
    2ad2:	bf00      	nop
    2ad4:	2000010c 	.word	0x2000010c

00002ad8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2adc:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2ade:	7a03      	ldrb	r3, [r0, #8]
    2ae0:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2ae2:	f013 030f 	ands.w	r3, r3, #15
    2ae6:	f000 80c2 	beq.w	2c6e <_usb_d_dev_ep_trans+0x196>
    2aea:	2e00      	cmp	r6, #0
    2aec:	bfb4      	ite	lt
    2aee:	1c9a      	addlt	r2, r3, #2
    2af0:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2af2:	4614      	mov	r4, r2
    2af4:	4969      	ldr	r1, [pc, #420]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2af6:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2afa:	1c55      	adds	r5, r2, #1
    2afc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b00:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2b04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2b08:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2b0c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2b10:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2b14:	428a      	cmp	r2, r1
    2b16:	d025      	beq.n	2b64 <_usb_d_dev_ep_trans+0x8c>
    2b18:	1e55      	subs	r5, r2, #1
    2b1a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2b1c:	6841      	ldr	r1, [r0, #4]
    2b1e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2b20:	2b02      	cmp	r3, #2
    2b22:	f200 8092 	bhi.w	2c4a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2b26:	6803      	ldr	r3, [r0, #0]
    2b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2b2c:	d31c      	bcc.n	2b68 <_usb_d_dev_ep_trans+0x90>
    2b2e:	eb03 0c01 	add.w	ip, r3, r1
    2b32:	f8df e180 	ldr.w	lr, [pc, #384]	; 2cb4 <_usb_d_dev_ep_trans+0x1dc>
    2b36:	45f4      	cmp	ip, lr
    2b38:	d816      	bhi.n	2b68 <_usb_d_dev_ep_trans+0x90>
    2b3a:	f013 0f03 	tst.w	r3, #3
    2b3e:	d113      	bne.n	2b68 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    2b40:	2e00      	cmp	r6, #0
    2b42:	db2a      	blt.n	2b9a <_usb_d_dev_ep_trans+0xc2>
    2b44:	428a      	cmp	r2, r1
    2b46:	f200 809c 	bhi.w	2c82 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2b4a:	b34d      	cbz	r5, 2ba0 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2b4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2b50:	4a52      	ldr	r2, [pc, #328]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2b52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d07b      	beq.n	2c56 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2b5e:	f04f 0800 	mov.w	r8, #0
    2b62:	e00c      	b.n	2b7e <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2b64:	4615      	mov	r5, r2
    2b66:	e7d9      	b.n	2b1c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2b68:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2b6c:	4a4b      	ldr	r2, [pc, #300]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2b6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2b76:	2b00      	cmp	r3, #0
    2b78:	d06a      	beq.n	2c50 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    2b7a:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2b7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2b82:	4a46      	ldr	r2, [pc, #280]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b88:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2b8c:	f013 0f08 	tst.w	r3, #8
    2b90:	d009      	beq.n	2ba6 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2b92:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2b94:	b003      	add	sp, #12
    2b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    2b9a:	f04f 0800 	mov.w	r8, #0
    2b9e:	e7ee      	b.n	2b7e <_usb_d_dev_ep_trans+0xa6>
    2ba0:	f04f 0800 	mov.w	r8, #0
    2ba4:	e7eb      	b.n	2b7e <_usb_d_dev_ep_trans+0xa6>
    2ba6:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2ba8:	a801      	add	r0, sp, #4
    2baa:	4b3d      	ldr	r3, [pc, #244]	; (2ca0 <_usb_d_dev_ep_trans+0x1c8>)
    2bac:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2bae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2bb2:	4a3a      	ldr	r2, [pc, #232]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2bb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2bb8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2bbc:	f013 0f40 	tst.w	r3, #64	; 0x40
    2bc0:	d13c      	bne.n	2c3c <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2bc2:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2bc6:	4b35      	ldr	r3, [pc, #212]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2bc8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2bcc:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2bd4:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2bd8:	a801      	add	r0, sp, #4
    2bda:	4b32      	ldr	r3, [pc, #200]	; (2ca4 <_usb_d_dev_ep_trans+0x1cc>)
    2bdc:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2bde:	f8da 3000 	ldr.w	r3, [sl]
    2be2:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2be6:	f8da 3004 	ldr.w	r3, [sl, #4]
    2bea:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2bee:	2300      	movs	r3, #0
    2bf0:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2bf4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2bf6:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2bfa:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2bfe:	f368 1345 	bfi	r3, r8, #5, #1
    2c02:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2c06:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2c0a:	b1e3      	cbz	r3, 2c46 <_usb_d_dev_ep_trans+0x16e>
    2c0c:	fab5 f585 	clz	r5, r5
    2c10:	096d      	lsrs	r5, r5, #5
    2c12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2c16:	4b21      	ldr	r3, [pc, #132]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2c18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2c1c:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2c20:	f365 1304 	bfi	r3, r5, #4, #1
    2c24:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2c28:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2c2a:	f04f 0100 	mov.w	r1, #0
    2c2e:	4638      	mov	r0, r7
    2c30:	bfb4      	ite	lt
    2c32:	4b1d      	ldrlt	r3, [pc, #116]	; (2ca8 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2c34:	4b1d      	ldrge	r3, [pc, #116]	; (2cac <_usb_d_dev_ep_trans+0x1d4>)
    2c36:	4798      	blx	r3
	return ERR_NONE;
    2c38:	2000      	movs	r0, #0
    2c3a:	e7ab      	b.n	2b94 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2c3c:	a801      	add	r0, sp, #4
    2c3e:	4b19      	ldr	r3, [pc, #100]	; (2ca4 <_usb_d_dev_ep_trans+0x1cc>)
    2c40:	4798      	blx	r3
		return USB_BUSY;
    2c42:	2001      	movs	r0, #1
    2c44:	e7a6      	b.n	2b94 <_usb_d_dev_ep_trans+0xbc>
    2c46:	2500      	movs	r5, #0
    2c48:	e7e3      	b.n	2c12 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2c4a:	f06f 0011 	mvn.w	r0, #17
    2c4e:	e7a1      	b.n	2b94 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2c50:	f06f 0012 	mvn.w	r0, #18
    2c54:	e79e      	b.n	2b94 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    2c56:	f06f 0011 	mvn.w	r0, #17
    2c5a:	e79b      	b.n	2b94 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2c5c:	f06f 0012 	mvn.w	r0, #18
    2c60:	e798      	b.n	2b94 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2c62:	6841      	ldr	r1, [r0, #4]
    2c64:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2c68:	4f11      	ldr	r7, [pc, #68]	; (2cb0 <_usb_d_dev_ep_trans+0x1d8>)
    2c6a:	2400      	movs	r4, #0
    2c6c:	e75b      	b.n	2b26 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2c6e:	4a0b      	ldr	r2, [pc, #44]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2c70:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2c74:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2c78:	428a      	cmp	r2, r1
    2c7a:	d0f2      	beq.n	2c62 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2c7c:	4f0c      	ldr	r7, [pc, #48]	; (2cb0 <_usb_d_dev_ep_trans+0x1d8>)
    2c7e:	2400      	movs	r4, #0
    2c80:	e74a      	b.n	2b18 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2c82:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2c86:	4a05      	ldr	r2, [pc, #20]	; (2c9c <_usb_d_dev_ep_trans+0x1c4>)
    2c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2c90:	2b00      	cmp	r3, #0
    2c92:	d0e3      	beq.n	2c5c <_usb_d_dev_ep_trans+0x184>
    2c94:	f04f 0801 	mov.w	r8, #1
    2c98:	e771      	b.n	2b7e <_usb_d_dev_ep_trans+0xa6>
    2c9a:	bf00      	nop
    2c9c:	2000010c 	.word	0x2000010c
    2ca0:	0000062d 	.word	0x0000062d
    2ca4:	0000063b 	.word	0x0000063b
    2ca8:	00001d39 	.word	0x00001d39
    2cac:	00001ebd 	.word	0x00001ebd
    2cb0:	20000180 	.word	0x20000180
    2cb4:	20041fff 	.word	0x20041fff

00002cb8 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2cb8:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <_usb_d_dev_register_callback+0x1c>)
    2cba:	2900      	cmp	r1, #0
    2cbc:	bf08      	it	eq
    2cbe:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2cc0:	2801      	cmp	r0, #1
    2cc2:	d003      	beq.n	2ccc <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2cc4:	b908      	cbnz	r0, 2cca <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2cc6:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <_usb_d_dev_register_callback+0x20>)
    2cc8:	6619      	str	r1, [r3, #96]	; 0x60
    2cca:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2ccc:	4b02      	ldr	r3, [pc, #8]	; (2cd8 <_usb_d_dev_register_callback+0x20>)
    2cce:	6659      	str	r1, [r3, #100]	; 0x64
    2cd0:	4770      	bx	lr
    2cd2:	bf00      	nop
    2cd4:	00001ab1 	.word	0x00001ab1
    2cd8:	2000010c 	.word	0x2000010c

00002cdc <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2cdc:	4b09      	ldr	r3, [pc, #36]	; (2d04 <_usb_d_dev_register_ep_callback+0x28>)
    2cde:	2900      	cmp	r1, #0
    2ce0:	bf08      	it	eq
    2ce2:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2ce4:	4603      	mov	r3, r0
    2ce6:	b130      	cbz	r0, 2cf6 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2ce8:	2801      	cmp	r0, #1
    2cea:	d007      	beq.n	2cfc <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2cec:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2cee:	bf04      	itt	eq
    2cf0:	4b05      	ldreq	r3, [pc, #20]	; (2d08 <_usb_d_dev_register_ep_callback+0x2c>)
    2cf2:	6719      	streq	r1, [r3, #112]	; 0x70
    2cf4:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2cf6:	4b04      	ldr	r3, [pc, #16]	; (2d08 <_usb_d_dev_register_ep_callback+0x2c>)
    2cf8:	6699      	str	r1, [r3, #104]	; 0x68
    2cfa:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2cfc:	4b02      	ldr	r3, [pc, #8]	; (2d08 <_usb_d_dev_register_ep_callback+0x2c>)
    2cfe:	66d9      	str	r1, [r3, #108]	; 0x6c
    2d00:	4770      	bx	lr
    2d02:	bf00      	nop
    2d04:	00001ab1 	.word	0x00001ab1
    2d08:	2000010c 	.word	0x2000010c

00002d0c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2d0c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2d0e:	4b01      	ldr	r3, [pc, #4]	; (2d14 <USB_0_Handler+0x8>)
    2d10:	4798      	blx	r3
    2d12:	bd08      	pop	{r3, pc}
    2d14:	000020ad 	.word	0x000020ad

00002d18 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2d18:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2d1a:	4b01      	ldr	r3, [pc, #4]	; (2d20 <USB_1_Handler+0x8>)
    2d1c:	4798      	blx	r3
    2d1e:	bd08      	pop	{r3, pc}
    2d20:	000020ad 	.word	0x000020ad

00002d24 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2d24:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2d26:	4b01      	ldr	r3, [pc, #4]	; (2d2c <USB_2_Handler+0x8>)
    2d28:	4798      	blx	r3
    2d2a:	bd08      	pop	{r3, pc}
    2d2c:	000020ad 	.word	0x000020ad

00002d30 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2d30:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2d32:	4b01      	ldr	r3, [pc, #4]	; (2d38 <USB_3_Handler+0x8>)
    2d34:	4798      	blx	r3
    2d36:	bd08      	pop	{r3, pc}
    2d38:	000020ad 	.word	0x000020ad

00002d3c <main>:
#include <atmel_start.h>

int main(void)
{
    2d3c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2d3e:	4b01      	ldr	r3, [pc, #4]	; (2d44 <main+0x8>)
    2d40:	4798      	blx	r3
    2d42:	e7fe      	b.n	2d42 <main+0x6>
    2d44:	000002d1 	.word	0x000002d1

00002d48 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2d4c:	780b      	ldrb	r3, [r1, #0]
    2d4e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2d52:	2c01      	cmp	r4, #1
    2d54:	d15e      	bne.n	2e14 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2d56:	888c      	ldrh	r4, [r1, #4]
    2d58:	4d35      	ldr	r5, [pc, #212]	; (2e30 <cdcdf_acm_req+0xe8>)
    2d5a:	782d      	ldrb	r5, [r5, #0]
    2d5c:	42a5      	cmp	r5, r4
    2d5e:	d003      	beq.n	2d68 <cdcdf_acm_req+0x20>
    2d60:	4d33      	ldr	r5, [pc, #204]	; (2e30 <cdcdf_acm_req+0xe8>)
    2d62:	786d      	ldrb	r5, [r5, #1]
    2d64:	42a5      	cmp	r5, r4
    2d66:	d158      	bne.n	2e1a <cdcdf_acm_req+0xd2>
    2d68:	4616      	mov	r6, r2
    2d6a:	460c      	mov	r4, r1
    2d6c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2d6e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d72:	d10c      	bne.n	2d8e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2d74:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2d76:	4b2f      	ldr	r3, [pc, #188]	; (2e34 <cdcdf_acm_req+0xec>)
    2d78:	4798      	blx	r3
    2d7a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2d7c:	7863      	ldrb	r3, [r4, #1]
    2d7e:	2b20      	cmp	r3, #32
    2d80:	d013      	beq.n	2daa <cdcdf_acm_req+0x62>
    2d82:	2b22      	cmp	r3, #34	; 0x22
    2d84:	d032      	beq.n	2dec <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    2d86:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2d8a:	b003      	add	sp, #12
    2d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2d8e:	2a01      	cmp	r2, #1
    2d90:	d046      	beq.n	2e20 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2d92:	784b      	ldrb	r3, [r1, #1]
    2d94:	2b21      	cmp	r3, #33	; 0x21
    2d96:	d145      	bne.n	2e24 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2d98:	88cb      	ldrh	r3, [r1, #6]
    2d9a:	2b07      	cmp	r3, #7
    2d9c:	d145      	bne.n	2e2a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2d9e:	2300      	movs	r3, #0
    2da0:	2207      	movs	r2, #7
    2da2:	4925      	ldr	r1, [pc, #148]	; (2e38 <cdcdf_acm_req+0xf0>)
    2da4:	4c25      	ldr	r4, [pc, #148]	; (2e3c <cdcdf_acm_req+0xf4>)
    2da6:	47a0      	blx	r4
    2da8:	e7ef      	b.n	2d8a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2daa:	2f07      	cmp	r7, #7
    2dac:	d12b      	bne.n	2e06 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2dae:	b1be      	cbz	r6, 2de0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2db0:	6800      	ldr	r0, [r0, #0]
    2db2:	9000      	str	r0, [sp, #0]
    2db4:	888a      	ldrh	r2, [r1, #4]
    2db6:	798b      	ldrb	r3, [r1, #6]
    2db8:	f8ad 2004 	strh.w	r2, [sp, #4]
    2dbc:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2dc0:	4b1b      	ldr	r3, [pc, #108]	; (2e30 <cdcdf_acm_req+0xe8>)
    2dc2:	691b      	ldr	r3, [r3, #16]
    2dc4:	b113      	cbz	r3, 2dcc <cdcdf_acm_req+0x84>
    2dc6:	4668      	mov	r0, sp
    2dc8:	4798      	blx	r3
    2dca:	b1f8      	cbz	r0, 2e0c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2dcc:	4b18      	ldr	r3, [pc, #96]	; (2e30 <cdcdf_acm_req+0xe8>)
    2dce:	aa02      	add	r2, sp, #8
    2dd0:	e912 0003 	ldmdb	r2, {r0, r1}
    2dd4:	6098      	str	r0, [r3, #8]
    2dd6:	8199      	strh	r1, [r3, #12]
    2dd8:	0c09      	lsrs	r1, r1, #16
    2dda:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2ddc:	2000      	movs	r0, #0
    2dde:	e7d4      	b.n	2d8a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2de0:	2300      	movs	r3, #0
    2de2:	2207      	movs	r2, #7
    2de4:	4628      	mov	r0, r5
    2de6:	4c15      	ldr	r4, [pc, #84]	; (2e3c <cdcdf_acm_req+0xf4>)
    2de8:	47a0      	blx	r4
    2dea:	e7ce      	b.n	2d8a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2dec:	2300      	movs	r3, #0
    2dee:	461a      	mov	r2, r3
    2df0:	4619      	mov	r1, r3
    2df2:	4618      	mov	r0, r3
    2df4:	4d11      	ldr	r5, [pc, #68]	; (2e3c <cdcdf_acm_req+0xf4>)
    2df6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2df8:	4b0d      	ldr	r3, [pc, #52]	; (2e30 <cdcdf_acm_req+0xe8>)
    2dfa:	695b      	ldr	r3, [r3, #20]
    2dfc:	b143      	cbz	r3, 2e10 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    2dfe:	8860      	ldrh	r0, [r4, #2]
    2e00:	4798      	blx	r3
		return ERR_NONE;
    2e02:	2000      	movs	r0, #0
    2e04:	e7c1      	b.n	2d8a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2e06:	f04f 30ff 	mov.w	r0, #4294967295
    2e0a:	e7be      	b.n	2d8a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    2e0c:	2000      	movs	r0, #0
    2e0e:	e7bc      	b.n	2d8a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2e10:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2e12:	e7ba      	b.n	2d8a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2e14:	f06f 0009 	mvn.w	r0, #9
    2e18:	e7b7      	b.n	2d8a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2e1a:	f06f 0009 	mvn.w	r0, #9
    2e1e:	e7b4      	b.n	2d8a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2e20:	2000      	movs	r0, #0
    2e22:	e7b2      	b.n	2d8a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    2e24:	f06f 000c 	mvn.w	r0, #12
    2e28:	e7af      	b.n	2d8a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2e2a:	f04f 30ff 	mov.w	r0, #4294967295
    2e2e:	e7ac      	b.n	2d8a <cdcdf_acm_req+0x42>
    2e30:	200002f4 	.word	0x200002f4
    2e34:	000036a9 	.word	0x000036a9
    2e38:	200002fc 	.word	0x200002fc
    2e3c:	00003185 	.word	0x00003185

00002e40 <cdcdf_acm_ctrl>:
{
    2e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e44:	b083      	sub	sp, #12
    2e46:	4616      	mov	r6, r2
	switch (ctrl) {
    2e48:	2901      	cmp	r1, #1
    2e4a:	d066      	beq.n	2f1a <cdcdf_acm_ctrl+0xda>
    2e4c:	b141      	cbz	r1, 2e60 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    2e4e:	2902      	cmp	r1, #2
    2e50:	bf0c      	ite	eq
    2e52:	f06f 001a 	mvneq.w	r0, #26
    2e56:	f06f 000c 	mvnne.w	r0, #12
}
    2e5a:	b003      	add	sp, #12
    2e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2e60:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    2e64:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2e66:	2800      	cmp	r0, #0
    2e68:	f000 8085 	beq.w	2f76 <cdcdf_acm_ctrl+0x136>
    2e6c:	f10a 3bff 	add.w	fp, sl, #4294967295
    2e70:	f10a 0301 	add.w	r3, sl, #1
    2e74:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2e76:	4f46      	ldr	r7, [pc, #280]	; (2f90 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    2e78:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2fa0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2e7c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2fa4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    2e80:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2e82:	7943      	ldrb	r3, [r0, #5]
    2e84:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2e88:	2b02      	cmp	r3, #2
    2e8a:	d002      	beq.n	2e92 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    2e8c:	f06f 0009 	mvn.w	r0, #9
    2e90:	e7e3      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
    2e92:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2e96:	f89b 3000 	ldrb.w	r3, [fp]
    2e9a:	429a      	cmp	r2, r3
    2e9c:	d06e      	beq.n	2f7c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2e9e:	2bff      	cmp	r3, #255	; 0xff
    2ea0:	d16f      	bne.n	2f82 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2ea2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2ea6:	2205      	movs	r2, #5
    2ea8:	6871      	ldr	r1, [r6, #4]
    2eaa:	4b3a      	ldr	r3, [pc, #232]	; (2f94 <cdcdf_acm_ctrl+0x154>)
    2eac:	4798      	blx	r3
		while (NULL != ep) {
    2eae:	4604      	mov	r4, r0
    2eb0:	b1f8      	cbz	r0, 2ef2 <cdcdf_acm_ctrl+0xb2>
    2eb2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    2eb6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2eb8:	7963      	ldrb	r3, [r4, #5]
    2eba:	7922      	ldrb	r2, [r4, #4]
    2ebc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2ec0:	b292      	uxth	r2, r2
    2ec2:	78e1      	ldrb	r1, [r4, #3]
    2ec4:	4628      	mov	r0, r5
    2ec6:	47b8      	blx	r7
    2ec8:	2800      	cmp	r0, #0
    2eca:	d15d      	bne.n	2f88 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2ecc:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2ed0:	bf14      	ite	ne
    2ed2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2ed6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2eda:	4628      	mov	r0, r5
    2edc:	47c8      	blx	r9
			desc->sod = ep;
    2ede:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2ee0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2ee2:	6871      	ldr	r1, [r6, #4]
    2ee4:	4420      	add	r0, r4
    2ee6:	47c0      	blx	r8
		while (NULL != ep) {
    2ee8:	4604      	mov	r4, r0
    2eea:	2800      	cmp	r0, #0
    2eec:	d1e3      	bne.n	2eb6 <cdcdf_acm_ctrl+0x76>
    2eee:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2ef2:	6833      	ldr	r3, [r6, #0]
    2ef4:	7818      	ldrb	r0, [r3, #0]
    2ef6:	2204      	movs	r2, #4
    2ef8:	6871      	ldr	r1, [r6, #4]
    2efa:	4418      	add	r0, r3
    2efc:	4b25      	ldr	r3, [pc, #148]	; (2f94 <cdcdf_acm_ctrl+0x154>)
    2efe:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2f00:	9b00      	ldr	r3, [sp, #0]
    2f02:	459b      	cmp	fp, r3
    2f04:	d004      	beq.n	2f10 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    2f06:	2800      	cmp	r0, #0
    2f08:	d1ba      	bne.n	2e80 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    2f0a:	f06f 0009 	mvn.w	r0, #9
    2f0e:	e7a4      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    2f10:	2201      	movs	r2, #1
    2f12:	4b21      	ldr	r3, [pc, #132]	; (2f98 <cdcdf_acm_ctrl+0x158>)
    2f14:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2f16:	2000      	movs	r0, #0
    2f18:	e79f      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2f1a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2f1c:	b142      	cbz	r2, 2f30 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2f1e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2f20:	795b      	ldrb	r3, [r3, #5]
    2f22:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2f26:	2b02      	cmp	r3, #2
    2f28:	d002      	beq.n	2f30 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    2f2a:	f06f 0009 	mvn.w	r0, #9
    2f2e:	e794      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2f30:	7823      	ldrb	r3, [r4, #0]
    2f32:	2bff      	cmp	r3, #255	; 0xff
    2f34:	d008      	beq.n	2f48 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2f36:	23ff      	movs	r3, #255	; 0xff
    2f38:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f3a:	78a0      	ldrb	r0, [r4, #2]
    2f3c:	4298      	cmp	r0, r3
    2f3e:	d003      	beq.n	2f48 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f40:	4b16      	ldr	r3, [pc, #88]	; (2f9c <cdcdf_acm_ctrl+0x15c>)
    2f42:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f44:	23ff      	movs	r3, #255	; 0xff
    2f46:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2f48:	7863      	ldrb	r3, [r4, #1]
    2f4a:	2bff      	cmp	r3, #255	; 0xff
    2f4c:	d008      	beq.n	2f60 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    2f4e:	23ff      	movs	r3, #255	; 0xff
    2f50:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f52:	78e0      	ldrb	r0, [r4, #3]
    2f54:	4298      	cmp	r0, r3
    2f56:	d003      	beq.n	2f60 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f58:	4b10      	ldr	r3, [pc, #64]	; (2f9c <cdcdf_acm_ctrl+0x15c>)
    2f5a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f5c:	23ff      	movs	r3, #255	; 0xff
    2f5e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2f60:	7920      	ldrb	r0, [r4, #4]
    2f62:	28ff      	cmp	r0, #255	; 0xff
    2f64:	d003      	beq.n	2f6e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    2f66:	4b0d      	ldr	r3, [pc, #52]	; (2f9c <cdcdf_acm_ctrl+0x15c>)
    2f68:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2f6a:	23ff      	movs	r3, #255	; 0xff
    2f6c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2f6e:	2000      	movs	r0, #0
    2f70:	4b09      	ldr	r3, [pc, #36]	; (2f98 <cdcdf_acm_ctrl+0x158>)
    2f72:	7158      	strb	r0, [r3, #5]
    2f74:	e771      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    2f76:	f06f 0009 	mvn.w	r0, #9
    2f7a:	e76e      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    2f7c:	f06f 0011 	mvn.w	r0, #17
    2f80:	e76b      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2f82:	f06f 001b 	mvn.w	r0, #27
    2f86:	e768      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2f88:	f06f 0013 	mvn.w	r0, #19
    2f8c:	e765      	b.n	2e5a <cdcdf_acm_ctrl+0x1a>
    2f8e:	bf00      	nop
    2f90:	00000c79 	.word	0x00000c79
    2f94:	000036c9 	.word	0x000036c9
    2f98:	200002f4 	.word	0x200002f4
    2f9c:	00000ce1 	.word	0x00000ce1
    2fa0:	00000d0d 	.word	0x00000d0d
    2fa4:	00003703 	.word	0x00003703

00002fa8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2fa8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2faa:	4b0a      	ldr	r3, [pc, #40]	; (2fd4 <cdcdf_acm_init+0x2c>)
    2fac:	4798      	blx	r3
    2fae:	2801      	cmp	r0, #1
    2fb0:	d80c      	bhi.n	2fcc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2fb2:	4809      	ldr	r0, [pc, #36]	; (2fd8 <cdcdf_acm_init+0x30>)
    2fb4:	4b09      	ldr	r3, [pc, #36]	; (2fdc <cdcdf_acm_init+0x34>)
    2fb6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2fb8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2fba:	3018      	adds	r0, #24
    2fbc:	4b08      	ldr	r3, [pc, #32]	; (2fe0 <cdcdf_acm_init+0x38>)
    2fbe:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2fc0:	4908      	ldr	r1, [pc, #32]	; (2fe4 <cdcdf_acm_init+0x3c>)
    2fc2:	2001      	movs	r0, #1
    2fc4:	4b08      	ldr	r3, [pc, #32]	; (2fe8 <cdcdf_acm_init+0x40>)
    2fc6:	4798      	blx	r3
	return ERR_NONE;
    2fc8:	2000      	movs	r0, #0
    2fca:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2fcc:	f06f 0010 	mvn.w	r0, #16
}
    2fd0:	bd08      	pop	{r3, pc}
    2fd2:	bf00      	nop
    2fd4:	000036b5 	.word	0x000036b5
    2fd8:	200002f4 	.word	0x200002f4
    2fdc:	00002e41 	.word	0x00002e41
    2fe0:	00003655 	.word	0x00003655
    2fe4:	20000000 	.word	0x20000000
    2fe8:	000035c1 	.word	0x000035c1

00002fec <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2fec:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2fee:	4b07      	ldr	r3, [pc, #28]	; (300c <usbdc_unconfig+0x20>)
    2ff0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2ff2:	b14c      	cbz	r4, 3008 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2ff4:	2600      	movs	r6, #0
    2ff6:	2501      	movs	r5, #1
    2ff8:	6863      	ldr	r3, [r4, #4]
    2ffa:	4632      	mov	r2, r6
    2ffc:	4629      	mov	r1, r5
    2ffe:	4620      	mov	r0, r4
    3000:	4798      	blx	r3
		func = func->next;
    3002:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3004:	2c00      	cmp	r4, #0
    3006:	d1f7      	bne.n	2ff8 <usbdc_unconfig+0xc>
    3008:	bd70      	pop	{r4, r5, r6, pc}
    300a:	bf00      	nop
    300c:	20000318 	.word	0x20000318

00003010 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3010:	b570      	push	{r4, r5, r6, lr}
    3012:	4606      	mov	r6, r0
    3014:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3016:	4b07      	ldr	r3, [pc, #28]	; (3034 <usbdc_change_notify+0x24>)
    3018:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    301a:	b91c      	cbnz	r4, 3024 <usbdc_change_notify+0x14>
    301c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    301e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3020:	2c00      	cmp	r4, #0
    3022:	d0fb      	beq.n	301c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    3024:	6863      	ldr	r3, [r4, #4]
    3026:	2b00      	cmp	r3, #0
    3028:	d0f9      	beq.n	301e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    302a:	4629      	mov	r1, r5
    302c:	4630      	mov	r0, r6
    302e:	4798      	blx	r3
    3030:	e7f5      	b.n	301e <usbdc_change_notify+0xe>
    3032:	bf00      	nop
    3034:	20000318 	.word	0x20000318

00003038 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303a:	4607      	mov	r7, r0
    303c:	460e      	mov	r6, r1
    303e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3040:	4b0c      	ldr	r3, [pc, #48]	; (3074 <usbdc_request_handler+0x3c>)
    3042:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3044:	b91c      	cbnz	r4, 304e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3046:	2000      	movs	r0, #0
    3048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    304a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    304c:	b16c      	cbz	r4, 306a <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    304e:	6863      	ldr	r3, [r4, #4]
    3050:	2b00      	cmp	r3, #0
    3052:	d0fa      	beq.n	304a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    3054:	462a      	mov	r2, r5
    3056:	4631      	mov	r1, r6
    3058:	4638      	mov	r0, r7
    305a:	4798      	blx	r3
			if (0 == rc) {
    305c:	b138      	cbz	r0, 306e <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    305e:	f110 0f0a 	cmn.w	r0, #10
    3062:	d0f2      	beq.n	304a <usbdc_request_handler+0x12>
				return -1;
    3064:	f04f 30ff 	mov.w	r0, #4294967295
}
    3068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    306a:	2000      	movs	r0, #0
    306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    306e:	2001      	movs	r0, #1
    3070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3072:	bf00      	nop
    3074:	20000318 	.word	0x20000318

00003078 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3078:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    307a:	4b06      	ldr	r3, [pc, #24]	; (3094 <usbd_sof_cb+0x1c>)
    307c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    307e:	b91c      	cbnz	r4, 3088 <usbd_sof_cb+0x10>
    3080:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3082:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3084:	2c00      	cmp	r4, #0
    3086:	d0fb      	beq.n	3080 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    3088:	6863      	ldr	r3, [r4, #4]
    308a:	2b00      	cmp	r3, #0
    308c:	d0f9      	beq.n	3082 <usbd_sof_cb+0xa>
			sof->cb();
    308e:	4798      	blx	r3
    3090:	e7f7      	b.n	3082 <usbd_sof_cb+0xa>
    3092:	bf00      	nop
    3094:	20000318 	.word	0x20000318

00003098 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3098:	b510      	push	{r4, lr}
    309a:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    309c:	b119      	cbz	r1, 30a6 <usbdc_cb_ctl_done+0xe>
    309e:	2901      	cmp	r1, #1
    30a0:	d026      	beq.n	30f0 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    30a2:	2000      	movs	r0, #0
    30a4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    30a6:	7813      	ldrb	r3, [r2, #0]
    30a8:	2b00      	cmp	r3, #0
    30aa:	d1fa      	bne.n	30a2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    30ac:	7853      	ldrb	r3, [r2, #1]
    30ae:	2b05      	cmp	r3, #5
    30b0:	d00f      	beq.n	30d2 <usbdc_cb_ctl_done+0x3a>
    30b2:	2b09      	cmp	r3, #9
    30b4:	d1f5      	bne.n	30a2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    30b6:	8852      	ldrh	r2, [r2, #2]
    30b8:	4b10      	ldr	r3, [pc, #64]	; (30fc <usbdc_cb_ctl_done+0x64>)
    30ba:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    30bc:	8863      	ldrh	r3, [r4, #2]
    30be:	2b00      	cmp	r3, #0
    30c0:	bf14      	ite	ne
    30c2:	2104      	movne	r1, #4
    30c4:	2103      	moveq	r1, #3
    30c6:	4b0d      	ldr	r3, [pc, #52]	; (30fc <usbdc_cb_ctl_done+0x64>)
    30c8:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    30ca:	2001      	movs	r0, #1
    30cc:	4b0c      	ldr	r3, [pc, #48]	; (3100 <usbdc_cb_ctl_done+0x68>)
    30ce:	4798      	blx	r3
    30d0:	e7e7      	b.n	30a2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    30d2:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    30d4:	b2c0      	uxtb	r0, r0
    30d6:	4b0b      	ldr	r3, [pc, #44]	; (3104 <usbdc_cb_ctl_done+0x6c>)
    30d8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    30da:	8863      	ldrh	r3, [r4, #2]
    30dc:	2b00      	cmp	r3, #0
    30de:	bf14      	ite	ne
    30e0:	2103      	movne	r1, #3
    30e2:	2102      	moveq	r1, #2
    30e4:	4b05      	ldr	r3, [pc, #20]	; (30fc <usbdc_cb_ctl_done+0x64>)
    30e6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    30e8:	2001      	movs	r0, #1
    30ea:	4b05      	ldr	r3, [pc, #20]	; (3100 <usbdc_cb_ctl_done+0x68>)
    30ec:	4798      	blx	r3
    30ee:	e7d8      	b.n	30a2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    30f0:	2201      	movs	r2, #1
    30f2:	4621      	mov	r1, r4
    30f4:	2000      	movs	r0, #0
    30f6:	4b04      	ldr	r3, [pc, #16]	; (3108 <usbdc_cb_ctl_done+0x70>)
    30f8:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    30fa:	e7d2      	b.n	30a2 <usbdc_cb_ctl_done+0xa>
    30fc:	20000318 	.word	0x20000318
    3100:	00003011 	.word	0x00003011
    3104:	00000c6d 	.word	0x00000c6d
    3108:	00003039 	.word	0x00003039

0000310c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    310c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    310e:	4b0d      	ldr	r3, [pc, #52]	; (3144 <usbdc_reset+0x38>)
    3110:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3112:	4d0d      	ldr	r5, [pc, #52]	; (3148 <usbdc_reset+0x3c>)
    3114:	2602      	movs	r6, #2
    3116:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3118:	2400      	movs	r4, #0
    311a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    311c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    311e:	4620      	mov	r0, r4
    3120:	4b0a      	ldr	r3, [pc, #40]	; (314c <usbdc_reset+0x40>)
    3122:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3124:	7f28      	ldrb	r0, [r5, #28]
    3126:	4b0a      	ldr	r3, [pc, #40]	; (3150 <usbdc_reset+0x44>)
    3128:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    312a:	4a0a      	ldr	r2, [pc, #40]	; (3154 <usbdc_reset+0x48>)
    312c:	4621      	mov	r1, r4
    312e:	4620      	mov	r0, r4
    3130:	4d09      	ldr	r5, [pc, #36]	; (3158 <usbdc_reset+0x4c>)
    3132:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3134:	4a09      	ldr	r2, [pc, #36]	; (315c <usbdc_reset+0x50>)
    3136:	4631      	mov	r1, r6
    3138:	4620      	mov	r0, r4
    313a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    313c:	4620      	mov	r0, r4
    313e:	4b08      	ldr	r3, [pc, #32]	; (3160 <usbdc_reset+0x54>)
    3140:	4798      	blx	r3
    3142:	bd70      	pop	{r4, r5, r6, pc}
    3144:	00002fed 	.word	0x00002fed
    3148:	20000318 	.word	0x20000318
    314c:	00000ce1 	.word	0x00000ce1
    3150:	00000ccd 	.word	0x00000ccd
    3154:	000031a5 	.word	0x000031a5
    3158:	00000ee1 	.word	0x00000ee1
    315c:	00003099 	.word	0x00003099
    3160:	00000d0d 	.word	0x00000d0d

00003164 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3164:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    3166:	b110      	cbz	r0, 316e <usbd_event_cb+0xa>
    3168:	2801      	cmp	r0, #1
    316a:	d004      	beq.n	3176 <usbd_event_cb+0x12>
    316c:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    316e:	2000      	movs	r0, #0
    3170:	4b02      	ldr	r3, [pc, #8]	; (317c <usbd_event_cb+0x18>)
    3172:	4798      	blx	r3
		break;
    3174:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    3176:	4b02      	ldr	r3, [pc, #8]	; (3180 <usbd_event_cb+0x1c>)
    3178:	4798      	blx	r3
    317a:	bd08      	pop	{r3, pc}
    317c:	00003011 	.word	0x00003011
    3180:	0000310d 	.word	0x0000310d

00003184 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3184:	b500      	push	{lr}
    3186:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3188:	9101      	str	r1, [sp, #4]
    318a:	9202      	str	r2, [sp, #8]
    318c:	f88d 000c 	strb.w	r0, [sp, #12]
    3190:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    3194:	a801      	add	r0, sp, #4
    3196:	4b02      	ldr	r3, [pc, #8]	; (31a0 <usbdc_xfer+0x1c>)
    3198:	4798      	blx	r3
}
    319a:	b005      	add	sp, #20
    319c:	f85d fb04 	ldr.w	pc, [sp], #4
    31a0:	00000d59 	.word	0x00000d59

000031a4 <usbdc_cb_ctl_req>:
{
    31a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31a8:	b083      	sub	sp, #12
    31aa:	4605      	mov	r5, r0
    31ac:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    31ae:	2200      	movs	r2, #0
    31b0:	4b9b      	ldr	r3, [pc, #620]	; (3420 <usbdc_cb_ctl_req+0x27c>)
    31b2:	4798      	blx	r3
    31b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    31b8:	d00b      	beq.n	31d2 <usbdc_cb_ctl_req+0x2e>
    31ba:	2801      	cmp	r0, #1
    31bc:	f000 81e3 	beq.w	3586 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    31c0:	7823      	ldrb	r3, [r4, #0]
    31c2:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    31c6:	d008      	beq.n	31da <usbdc_cb_ctl_req+0x36>
    31c8:	2a80      	cmp	r2, #128	; 0x80
    31ca:	f000 80f4 	beq.w	33b6 <usbdc_cb_ctl_req+0x212>
		return false;
    31ce:	2000      	movs	r0, #0
    31d0:	e000      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    31d2:	2000      	movs	r0, #0
}
    31d4:	b003      	add	sp, #12
    31d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    31da:	7862      	ldrb	r2, [r4, #1]
    31dc:	3a01      	subs	r2, #1
    31de:	2a0a      	cmp	r2, #10
    31e0:	f200 81d3 	bhi.w	358a <usbdc_cb_ctl_req+0x3e6>
    31e4:	e8df f012 	tbh	[pc, r2, lsl #1]
    31e8:	01d10060 	.word	0x01d10060
    31ec:	01d10076 	.word	0x01d10076
    31f0:	01d1000b 	.word	0x01d1000b
    31f4:	01d101d1 	.word	0x01d101d1
    31f8:	01d10015 	.word	0x01d10015
    31fc:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    31fe:	2301      	movs	r3, #1
    3200:	2200      	movs	r2, #0
    3202:	4611      	mov	r1, r2
    3204:	4628      	mov	r0, r5
    3206:	4c87      	ldr	r4, [pc, #540]	; (3424 <usbdc_cb_ctl_req+0x280>)
    3208:	47a0      	blx	r4
    320a:	fab0 f080 	clz	r0, r0
    320e:	0940      	lsrs	r0, r0, #5
    3210:	e7e0      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    3212:	8862      	ldrh	r2, [r4, #2]
    3214:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    3216:	b1ca      	cbz	r2, 324c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3218:	4b83      	ldr	r3, [pc, #524]	; (3428 <usbdc_cb_ctl_req+0x284>)
    321a:	681b      	ldr	r3, [r3, #0]
    321c:	6859      	ldr	r1, [r3, #4]
    321e:	6818      	ldr	r0, [r3, #0]
    3220:	4b82      	ldr	r3, [pc, #520]	; (342c <usbdc_cb_ctl_req+0x288>)
    3222:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3224:	2800      	cmp	r0, #0
    3226:	f000 81be 	beq.w	35a6 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    322a:	78c2      	ldrb	r2, [r0, #3]
    322c:	7881      	ldrb	r1, [r0, #2]
    322e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    3232:	fa10 f181 	uxtah	r1, r0, r1
    3236:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3238:	2204      	movs	r2, #4
    323a:	4b7d      	ldr	r3, [pc, #500]	; (3430 <usbdc_cb_ctl_req+0x28c>)
    323c:	4798      	blx	r3
    323e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3240:	b130      	cbz	r0, 3250 <usbdc_cb_ctl_req+0xac>
    3242:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3244:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3428 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3248:	4f79      	ldr	r7, [pc, #484]	; (3430 <usbdc_cb_ctl_req+0x28c>)
    324a:	e018      	b.n	327e <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    324c:	4b79      	ldr	r3, [pc, #484]	; (3434 <usbdc_cb_ctl_req+0x290>)
    324e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3250:	2301      	movs	r3, #1
    3252:	2200      	movs	r2, #0
    3254:	4611      	mov	r1, r2
    3256:	4628      	mov	r0, r5
    3258:	4c72      	ldr	r4, [pc, #456]	; (3424 <usbdc_cb_ctl_req+0x280>)
    325a:	47a0      	blx	r4
    325c:	fab0 f080 	clz	r0, r0
    3260:	0940      	lsrs	r0, r0, #5
    3262:	e7b7      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    3264:	464c      	mov	r4, r9
    3266:	e000      	b.n	326a <usbdc_cb_ctl_req+0xc6>
    3268:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    326a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    326c:	7803      	ldrb	r3, [r0, #0]
    326e:	4418      	add	r0, r3
    3270:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3272:	2204      	movs	r2, #4
    3274:	9901      	ldr	r1, [sp, #4]
    3276:	47b8      	blx	r7
    3278:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    327a:	2800      	cmp	r0, #0
    327c:	d0e8      	beq.n	3250 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    327e:	f890 9002 	ldrb.w	r9, [r0, #2]
    3282:	45a1      	cmp	r9, r4
    3284:	d0f1      	beq.n	326a <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3286:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    328a:	2c00      	cmp	r4, #0
    328c:	d0ea      	beq.n	3264 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    328e:	2600      	movs	r6, #0
    3290:	6863      	ldr	r3, [r4, #4]
    3292:	466a      	mov	r2, sp
    3294:	4631      	mov	r1, r6
    3296:	4620      	mov	r0, r4
    3298:	4798      	blx	r3
    329a:	2800      	cmp	r0, #0
    329c:	d0e4      	beq.n	3268 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    329e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    32a0:	2c00      	cmp	r4, #0
    32a2:	d1f5      	bne.n	3290 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    32a4:	464c      	mov	r4, r9
    32a6:	e7e0      	b.n	326a <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    32a8:	f003 031f 	and.w	r3, r3, #31
    32ac:	2b02      	cmp	r3, #2
    32ae:	f040 816e 	bne.w	358e <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    32b2:	88e3      	ldrh	r3, [r4, #6]
    32b4:	b10b      	cbz	r3, 32ba <usbdc_cb_ctl_req+0x116>
			return false;
    32b6:	2000      	movs	r0, #0
    32b8:	e78c      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    32ba:	88a0      	ldrh	r0, [r4, #4]
    32bc:	2100      	movs	r1, #0
    32be:	b2c0      	uxtb	r0, r0
    32c0:	4b5d      	ldr	r3, [pc, #372]	; (3438 <usbdc_cb_ctl_req+0x294>)
    32c2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    32c4:	2301      	movs	r3, #1
    32c6:	2200      	movs	r2, #0
    32c8:	4611      	mov	r1, r2
    32ca:	4628      	mov	r0, r5
    32cc:	4c55      	ldr	r4, [pc, #340]	; (3424 <usbdc_cb_ctl_req+0x280>)
    32ce:	47a0      	blx	r4
		return true;
    32d0:	2001      	movs	r0, #1
    32d2:	e77f      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    32d4:	f003 031f 	and.w	r3, r3, #31
    32d8:	2b02      	cmp	r3, #2
    32da:	f040 815a 	bne.w	3592 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    32de:	88e3      	ldrh	r3, [r4, #6]
    32e0:	b10b      	cbz	r3, 32e6 <usbdc_cb_ctl_req+0x142>
			return false;
    32e2:	2000      	movs	r0, #0
    32e4:	e776      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    32e6:	88a0      	ldrh	r0, [r4, #4]
    32e8:	2101      	movs	r1, #1
    32ea:	b2c0      	uxtb	r0, r0
    32ec:	4b52      	ldr	r3, [pc, #328]	; (3438 <usbdc_cb_ctl_req+0x294>)
    32ee:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    32f0:	2301      	movs	r3, #1
    32f2:	2200      	movs	r2, #0
    32f4:	4611      	mov	r1, r2
    32f6:	4628      	mov	r0, r5
    32f8:	4c4a      	ldr	r4, [pc, #296]	; (3424 <usbdc_cb_ctl_req+0x280>)
    32fa:	47a0      	blx	r4
		return true;
    32fc:	2001      	movs	r0, #1
    32fe:	e769      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3300:	8866      	ldrh	r6, [r4, #2]
    3302:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3304:	4a48      	ldr	r2, [pc, #288]	; (3428 <usbdc_cb_ctl_req+0x284>)
    3306:	6813      	ldr	r3, [r2, #0]
    3308:	7ed2      	ldrb	r2, [r2, #27]
    330a:	6859      	ldr	r1, [r3, #4]
    330c:	6818      	ldr	r0, [r3, #0]
    330e:	4b47      	ldr	r3, [pc, #284]	; (342c <usbdc_cb_ctl_req+0x288>)
    3310:	4798      	blx	r3
	if (NULL == ifc) {
    3312:	2800      	cmp	r0, #0
    3314:	d045      	beq.n	33a2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    3316:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3318:	78c2      	ldrb	r2, [r0, #3]
    331a:	7881      	ldrb	r1, [r0, #2]
    331c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3320:	fa10 f181 	uxtah	r1, r0, r1
    3324:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3326:	2204      	movs	r2, #4
    3328:	4b41      	ldr	r3, [pc, #260]	; (3430 <usbdc_cb_ctl_req+0x28c>)
    332a:	4798      	blx	r3
    332c:	4603      	mov	r3, r0
    332e:	2800      	cmp	r0, #0
    3330:	d039      	beq.n	33a6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3332:	2704      	movs	r7, #4
    3334:	4d3e      	ldr	r5, [pc, #248]	; (3430 <usbdc_cb_ctl_req+0x28c>)
    3336:	e008      	b.n	334a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3338:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    333a:	7803      	ldrb	r3, [r0, #0]
    333c:	4418      	add	r0, r3
    333e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3340:	463a      	mov	r2, r7
    3342:	9901      	ldr	r1, [sp, #4]
    3344:	47a8      	blx	r5
		if (NULL == ifc) {
    3346:	4603      	mov	r3, r0
    3348:	b378      	cbz	r0, 33aa <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    334a:	789a      	ldrb	r2, [r3, #2]
    334c:	42a2      	cmp	r2, r4
    334e:	d1f3      	bne.n	3338 <usbdc_cb_ctl_req+0x194>
    3350:	78da      	ldrb	r2, [r3, #3]
    3352:	42b2      	cmp	r2, r6
    3354:	d1f0      	bne.n	3338 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    3356:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3358:	4b33      	ldr	r3, [pc, #204]	; (3428 <usbdc_cb_ctl_req+0x284>)
    335a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    335c:	b33d      	cbz	r5, 33ae <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    335e:	2701      	movs	r7, #1
    3360:	686b      	ldr	r3, [r5, #4]
    3362:	466a      	mov	r2, sp
    3364:	4639      	mov	r1, r7
    3366:	4628      	mov	r0, r5
    3368:	4798      	blx	r3
    336a:	b120      	cbz	r0, 3376 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    336c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    336e:	2d00      	cmp	r5, #0
    3370:	d1f6      	bne.n	3360 <usbdc_cb_ctl_req+0x1bc>
	return false;
    3372:	2000      	movs	r0, #0
    3374:	e72e      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3376:	686b      	ldr	r3, [r5, #4]
    3378:	466a      	mov	r2, sp
    337a:	2100      	movs	r1, #0
    337c:	4628      	mov	r0, r5
    337e:	4798      	blx	r3
    3380:	b9b8      	cbnz	r0, 33b2 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    3382:	b136      	cbz	r6, 3392 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3384:	4a28      	ldr	r2, [pc, #160]	; (3428 <usbdc_cb_ctl_req+0x284>)
    3386:	2301      	movs	r3, #1
    3388:	fa03 f404 	lsl.w	r4, r3, r4
    338c:	7f53      	ldrb	r3, [r2, #29]
    338e:	4323      	orrs	r3, r4
    3390:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3392:	2300      	movs	r3, #0
    3394:	461a      	mov	r2, r3
    3396:	4619      	mov	r1, r3
    3398:	4618      	mov	r0, r3
    339a:	4c22      	ldr	r4, [pc, #136]	; (3424 <usbdc_cb_ctl_req+0x280>)
    339c:	47a0      	blx	r4
			return true;
    339e:	2001      	movs	r0, #1
    33a0:	e718      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    33a2:	2000      	movs	r0, #0
    33a4:	e716      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    33a6:	2000      	movs	r0, #0
    33a8:	e714      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
			return false;
    33aa:	2000      	movs	r0, #0
    33ac:	e712      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
	return false;
    33ae:	2000      	movs	r0, #0
    33b0:	e710      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
			return false;
    33b2:	2000      	movs	r0, #0
    33b4:	e70e      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    33b6:	7862      	ldrb	r2, [r4, #1]
    33b8:	2a0a      	cmp	r2, #10
    33ba:	f200 80ec 	bhi.w	3596 <usbdc_cb_ctl_req+0x3f2>
    33be:	e8df f012 	tbh	[pc, r2, lsl #1]
    33c2:	008e      	.short	0x008e
    33c4:	00ea00ea 	.word	0x00ea00ea
    33c8:	00ea00ea 	.word	0x00ea00ea
    33cc:	000b00ea 	.word	0x000b00ea
    33d0:	008200ea 	.word	0x008200ea
    33d4:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    33d8:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    33da:	0a13      	lsrs	r3, r2, #8
    33dc:	2b02      	cmp	r3, #2
    33de:	d02d      	beq.n	343c <usbdc_cb_ctl_req+0x298>
    33e0:	2b03      	cmp	r3, #3
    33e2:	d050      	beq.n	3486 <usbdc_cb_ctl_req+0x2e2>
    33e4:	2b01      	cmp	r3, #1
    33e6:	d001      	beq.n	33ec <usbdc_cb_ctl_req+0x248>
	return false;
    33e8:	2000      	movs	r0, #0
    33ea:	e6f3      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    33ec:	88e2      	ldrh	r2, [r4, #6]
    33ee:	2a12      	cmp	r2, #18
    33f0:	bf28      	it	cs
    33f2:	2212      	movcs	r2, #18
    33f4:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    33f6:	4b0c      	ldr	r3, [pc, #48]	; (3428 <usbdc_cb_ctl_req+0x284>)
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	2201      	movs	r2, #1
    33fc:	6859      	ldr	r1, [r3, #4]
    33fe:	6818      	ldr	r0, [r3, #0]
    3400:	4b0b      	ldr	r3, [pc, #44]	; (3430 <usbdc_cb_ctl_req+0x28c>)
    3402:	4798      	blx	r3
	if (!dev_desc) {
    3404:	4601      	mov	r1, r0
    3406:	2800      	cmp	r0, #0
    3408:	f000 80c7 	beq.w	359a <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    340c:	2300      	movs	r3, #0
    340e:	4622      	mov	r2, r4
    3410:	4628      	mov	r0, r5
    3412:	4c04      	ldr	r4, [pc, #16]	; (3424 <usbdc_cb_ctl_req+0x280>)
    3414:	47a0      	blx	r4
    3416:	fab0 f080 	clz	r0, r0
    341a:	0940      	lsrs	r0, r0, #5
    341c:	e6da      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
    341e:	bf00      	nop
    3420:	00003039 	.word	0x00003039
    3424:	00003185 	.word	0x00003185
    3428:	20000318 	.word	0x20000318
    342c:	00003749 	.word	0x00003749
    3430:	000036c9 	.word	0x000036c9
    3434:	00002fed 	.word	0x00002fed
    3438:	00000e79 	.word	0x00000e79
	uint16_t length   = req->wLength;
    343c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    343e:	4b5b      	ldr	r3, [pc, #364]	; (35ac <usbdc_cb_ctl_req+0x408>)
    3440:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3442:	681b      	ldr	r3, [r3, #0]
    3444:	3201      	adds	r2, #1
    3446:	b2d2      	uxtb	r2, r2
    3448:	6859      	ldr	r1, [r3, #4]
    344a:	6818      	ldr	r0, [r3, #0]
    344c:	4b58      	ldr	r3, [pc, #352]	; (35b0 <usbdc_cb_ctl_req+0x40c>)
    344e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3450:	4601      	mov	r1, r0
    3452:	2800      	cmp	r0, #0
    3454:	f000 80a3 	beq.w	359e <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    3458:	78c3      	ldrb	r3, [r0, #3]
    345a:	7882      	ldrb	r2, [r0, #2]
    345c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3460:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3462:	4294      	cmp	r4, r2
    3464:	d90d      	bls.n	3482 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3466:	3e01      	subs	r6, #1
    3468:	4226      	tst	r6, r4
    346a:	bf0c      	ite	eq
    346c:	2301      	moveq	r3, #1
    346e:	2300      	movne	r3, #0
		length = total_len;
    3470:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3472:	4622      	mov	r2, r4
    3474:	4628      	mov	r0, r5
    3476:	4c4f      	ldr	r4, [pc, #316]	; (35b4 <usbdc_cb_ctl_req+0x410>)
    3478:	47a0      	blx	r4
    347a:	fab0 f080 	clz	r0, r0
    347e:	0940      	lsrs	r0, r0, #5
    3480:	e6a8      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    3482:	2300      	movs	r3, #0
    3484:	e7f5      	b.n	3472 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    3486:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3488:	4b48      	ldr	r3, [pc, #288]	; (35ac <usbdc_cb_ctl_req+0x408>)
    348a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    348c:	681b      	ldr	r3, [r3, #0]
    348e:	b2d2      	uxtb	r2, r2
    3490:	6859      	ldr	r1, [r3, #4]
    3492:	6818      	ldr	r0, [r3, #0]
    3494:	4b48      	ldr	r3, [pc, #288]	; (35b8 <usbdc_cb_ctl_req+0x414>)
    3496:	4798      	blx	r3
	if (NULL == str_desc) {
    3498:	4601      	mov	r1, r0
    349a:	2800      	cmp	r0, #0
    349c:	f000 8081 	beq.w	35a2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    34a0:	7802      	ldrb	r2, [r0, #0]
    34a2:	4294      	cmp	r4, r2
    34a4:	d90d      	bls.n	34c2 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    34a6:	3e01      	subs	r6, #1
    34a8:	4226      	tst	r6, r4
    34aa:	bf0c      	ite	eq
    34ac:	2301      	moveq	r3, #1
    34ae:	2300      	movne	r3, #0
		length = str_desc[0];
    34b0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    34b2:	4622      	mov	r2, r4
    34b4:	4628      	mov	r0, r5
    34b6:	4c3f      	ldr	r4, [pc, #252]	; (35b4 <usbdc_cb_ctl_req+0x410>)
    34b8:	47a0      	blx	r4
    34ba:	fab0 f080 	clz	r0, r0
    34be:	0940      	lsrs	r0, r0, #5
    34c0:	e688      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    34c2:	2300      	movs	r3, #0
    34c4:	e7f5      	b.n	34b2 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    34c6:	4939      	ldr	r1, [pc, #228]	; (35ac <usbdc_cb_ctl_req+0x408>)
    34c8:	694b      	ldr	r3, [r1, #20]
    34ca:	7eca      	ldrb	r2, [r1, #27]
    34cc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    34ce:	2300      	movs	r3, #0
    34d0:	2201      	movs	r2, #1
    34d2:	6949      	ldr	r1, [r1, #20]
    34d4:	4628      	mov	r0, r5
    34d6:	4c37      	ldr	r4, [pc, #220]	; (35b4 <usbdc_cb_ctl_req+0x410>)
    34d8:	47a0      	blx	r4
		return true;
    34da:	2001      	movs	r0, #1
    34dc:	e67a      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34de:	f003 031f 	and.w	r3, r3, #31
    34e2:	2b01      	cmp	r3, #1
    34e4:	d903      	bls.n	34ee <usbdc_cb_ctl_req+0x34a>
    34e6:	2b02      	cmp	r3, #2
    34e8:	d010      	beq.n	350c <usbdc_cb_ctl_req+0x368>
		return false;
    34ea:	2000      	movs	r0, #0
    34ec:	e672      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		st = 0;
    34ee:	2300      	movs	r3, #0
    34f0:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    34f2:	492e      	ldr	r1, [pc, #184]	; (35ac <usbdc_cb_ctl_req+0x408>)
    34f4:	694b      	ldr	r3, [r1, #20]
    34f6:	f8bd 2000 	ldrh.w	r2, [sp]
    34fa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    34fc:	2300      	movs	r3, #0
    34fe:	2202      	movs	r2, #2
    3500:	6949      	ldr	r1, [r1, #20]
    3502:	4628      	mov	r0, r5
    3504:	4c2b      	ldr	r4, [pc, #172]	; (35b4 <usbdc_cb_ctl_req+0x410>)
    3506:	47a0      	blx	r4
	return true;
    3508:	2001      	movs	r0, #1
    350a:	e663      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    350c:	88a0      	ldrh	r0, [r4, #4]
    350e:	2102      	movs	r1, #2
    3510:	b2c0      	uxtb	r0, r0
    3512:	4b2a      	ldr	r3, [pc, #168]	; (35bc <usbdc_cb_ctl_req+0x418>)
    3514:	4798      	blx	r3
		if (st < 0) {
    3516:	2800      	cmp	r0, #0
    3518:	db03      	blt.n	3522 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    351a:	f000 0001 	and.w	r0, r0, #1
    351e:	9000      	str	r0, [sp, #0]
    3520:	e7e7      	b.n	34f2 <usbdc_cb_ctl_req+0x34e>
			return false;
    3522:	2000      	movs	r0, #0
    3524:	e656      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3526:	4b21      	ldr	r3, [pc, #132]	; (35ac <usbdc_cb_ctl_req+0x408>)
    3528:	7f5b      	ldrb	r3, [r3, #29]
    352a:	88a2      	ldrh	r2, [r4, #4]
    352c:	4113      	asrs	r3, r2
    352e:	f013 0f01 	tst.w	r3, #1
    3532:	d012      	beq.n	355a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3534:	4b1d      	ldr	r3, [pc, #116]	; (35ac <usbdc_cb_ctl_req+0x408>)
    3536:	691d      	ldr	r5, [r3, #16]
	return false;
    3538:	2000      	movs	r0, #0
	while (NULL != func) {
    353a:	2d00      	cmp	r5, #0
    353c:	f43f ae4a 	beq.w	31d4 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3540:	2602      	movs	r6, #2
    3542:	686b      	ldr	r3, [r5, #4]
    3544:	4622      	mov	r2, r4
    3546:	4631      	mov	r1, r6
    3548:	4628      	mov	r0, r5
    354a:	4798      	blx	r3
    354c:	2800      	cmp	r0, #0
    354e:	da0f      	bge.n	3570 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    3550:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3552:	2d00      	cmp	r5, #0
    3554:	d1f5      	bne.n	3542 <usbdc_cb_ctl_req+0x39e>
	return false;
    3556:	2000      	movs	r0, #0
    3558:	e63c      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    355a:	4914      	ldr	r1, [pc, #80]	; (35ac <usbdc_cb_ctl_req+0x408>)
    355c:	694b      	ldr	r3, [r1, #20]
    355e:	2000      	movs	r0, #0
    3560:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3562:	4603      	mov	r3, r0
    3564:	2201      	movs	r2, #1
    3566:	6949      	ldr	r1, [r1, #20]
    3568:	4c12      	ldr	r4, [pc, #72]	; (35b4 <usbdc_cb_ctl_req+0x410>)
    356a:	47a0      	blx	r4
		return true;
    356c:	2001      	movs	r0, #1
    356e:	e631      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3570:	490e      	ldr	r1, [pc, #56]	; (35ac <usbdc_cb_ctl_req+0x408>)
    3572:	694b      	ldr	r3, [r1, #20]
    3574:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3576:	2300      	movs	r3, #0
    3578:	2201      	movs	r2, #1
    357a:	6949      	ldr	r1, [r1, #20]
    357c:	4618      	mov	r0, r3
    357e:	4c0d      	ldr	r4, [pc, #52]	; (35b4 <usbdc_cb_ctl_req+0x410>)
    3580:	47a0      	blx	r4
			return true;
    3582:	2001      	movs	r0, #1
    3584:	e626      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return true;
    3586:	2001      	movs	r0, #1
    3588:	e624      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    358a:	2000      	movs	r0, #0
    358c:	e622      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    358e:	2000      	movs	r0, #0
    3590:	e620      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    3592:	2000      	movs	r0, #0
    3594:	e61e      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    3596:	2000      	movs	r0, #0
    3598:	e61c      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    359a:	2000      	movs	r0, #0
    359c:	e61a      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    359e:	2000      	movs	r0, #0
    35a0:	e618      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
		return false;
    35a2:	2000      	movs	r0, #0
    35a4:	e616      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
			return false;
    35a6:	2000      	movs	r0, #0
    35a8:	e614      	b.n	31d4 <usbdc_cb_ctl_req+0x30>
    35aa:	bf00      	nop
    35ac:	20000318 	.word	0x20000318
    35b0:	00003749 	.word	0x00003749
    35b4:	00003185 	.word	0x00003185
    35b8:	000037b1 	.word	0x000037b1
    35bc:	00000e79 	.word	0x00000e79

000035c0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    35c0:	b508      	push	{r3, lr}
	switch (type) {
    35c2:	2801      	cmp	r0, #1
    35c4:	d007      	beq.n	35d6 <usbdc_register_handler+0x16>
    35c6:	b110      	cbz	r0, 35ce <usbdc_register_handler+0xe>
    35c8:	2802      	cmp	r0, #2
    35ca:	d008      	beq.n	35de <usbdc_register_handler+0x1e>
    35cc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    35ce:	4806      	ldr	r0, [pc, #24]	; (35e8 <usbdc_register_handler+0x28>)
    35d0:	4b06      	ldr	r3, [pc, #24]	; (35ec <usbdc_register_handler+0x2c>)
    35d2:	4798      	blx	r3
		break;
    35d4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    35d6:	4806      	ldr	r0, [pc, #24]	; (35f0 <usbdc_register_handler+0x30>)
    35d8:	4b04      	ldr	r3, [pc, #16]	; (35ec <usbdc_register_handler+0x2c>)
    35da:	4798      	blx	r3
		break;
    35dc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    35de:	4805      	ldr	r0, [pc, #20]	; (35f4 <usbdc_register_handler+0x34>)
    35e0:	4b02      	ldr	r3, [pc, #8]	; (35ec <usbdc_register_handler+0x2c>)
    35e2:	4798      	blx	r3
    35e4:	bd08      	pop	{r3, pc}
    35e6:	bf00      	nop
    35e8:	2000031c 	.word	0x2000031c
    35ec:	00000f55 	.word	0x00000f55
    35f0:	20000320 	.word	0x20000320
    35f4:	20000324 	.word	0x20000324

000035f8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    35f8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    35fa:	4605      	mov	r5, r0
    35fc:	f240 3255 	movw	r2, #853	; 0x355
    3600:	490c      	ldr	r1, [pc, #48]	; (3634 <usbdc_init+0x3c>)
    3602:	3000      	adds	r0, #0
    3604:	bf18      	it	ne
    3606:	2001      	movne	r0, #1
    3608:	4b0b      	ldr	r3, [pc, #44]	; (3638 <usbdc_init+0x40>)
    360a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    360c:	4b0b      	ldr	r3, [pc, #44]	; (363c <usbdc_init+0x44>)
    360e:	4798      	blx	r3
	if (rc < 0) {
    3610:	2800      	cmp	r0, #0
    3612:	db0e      	blt.n	3632 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3614:	4c0a      	ldr	r4, [pc, #40]	; (3640 <usbdc_init+0x48>)
    3616:	2220      	movs	r2, #32
    3618:	2100      	movs	r1, #0
    361a:	4620      	mov	r0, r4
    361c:	4b09      	ldr	r3, [pc, #36]	; (3644 <usbdc_init+0x4c>)
    361e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3620:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3622:	4909      	ldr	r1, [pc, #36]	; (3648 <usbdc_init+0x50>)
    3624:	2000      	movs	r0, #0
    3626:	4c09      	ldr	r4, [pc, #36]	; (364c <usbdc_init+0x54>)
    3628:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    362a:	4909      	ldr	r1, [pc, #36]	; (3650 <usbdc_init+0x58>)
    362c:	2001      	movs	r0, #1
    362e:	47a0      	blx	r4

	return 0;
    3630:	2000      	movs	r0, #0
}
    3632:	bd38      	pop	{r3, r4, r5, pc}
    3634:	0000397c 	.word	0x0000397c
    3638:	00000f2d 	.word	0x00000f2d
    363c:	00000be1 	.word	0x00000be1
    3640:	20000318 	.word	0x20000318
    3644:	00003893 	.word	0x00003893
    3648:	00003079 	.word	0x00003079
    364c:	00000c49 	.word	0x00000c49
    3650:	00003165 	.word	0x00003165

00003654 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3654:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    3656:	4601      	mov	r1, r0
    3658:	4801      	ldr	r0, [pc, #4]	; (3660 <usbdc_register_function+0xc>)
    365a:	4b02      	ldr	r3, [pc, #8]	; (3664 <usbdc_register_function+0x10>)
    365c:	4798      	blx	r3
    365e:	bd08      	pop	{r3, pc}
    3660:	20000328 	.word	0x20000328
    3664:	00000f55 	.word	0x00000f55

00003668 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3668:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    366a:	4b0a      	ldr	r3, [pc, #40]	; (3694 <usbdc_start+0x2c>)
    366c:	7e9b      	ldrb	r3, [r3, #26]
    366e:	b95b      	cbnz	r3, 3688 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3670:	b168      	cbz	r0, 368e <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    3672:	4b08      	ldr	r3, [pc, #32]	; (3694 <usbdc_start+0x2c>)
    3674:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3676:	6802      	ldr	r2, [r0, #0]
    3678:	79d2      	ldrb	r2, [r2, #7]
    367a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    367c:	2201      	movs	r2, #1
    367e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3680:	4b05      	ldr	r3, [pc, #20]	; (3698 <usbdc_start+0x30>)
    3682:	4798      	blx	r3
	return ERR_NONE;
    3684:	2000      	movs	r0, #0
    3686:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    3688:	f06f 0003 	mvn.w	r0, #3
    368c:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    368e:	f06f 0008 	mvn.w	r0, #8
}
    3692:	bd08      	pop	{r3, pc}
    3694:	20000318 	.word	0x20000318
    3698:	00000c55 	.word	0x00000c55

0000369c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    369c:	b508      	push	{r3, lr}
	usb_d_attach();
    369e:	4b01      	ldr	r3, [pc, #4]	; (36a4 <usbdc_attach+0x8>)
    36a0:	4798      	blx	r3
    36a2:	bd08      	pop	{r3, pc}
    36a4:	00000c61 	.word	0x00000c61

000036a8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    36a8:	4b01      	ldr	r3, [pc, #4]	; (36b0 <usbdc_get_ctrl_buffer+0x8>)
    36aa:	6958      	ldr	r0, [r3, #20]
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop
    36b0:	20000318 	.word	0x20000318

000036b4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    36b4:	4b03      	ldr	r3, [pc, #12]	; (36c4 <usbdc_get_state+0x10>)
    36b6:	7e98      	ldrb	r0, [r3, #26]
    36b8:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    36bc:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    36be:	bf18      	it	ne
    36c0:	2010      	movne	r0, #16
    36c2:	4770      	bx	lr
    36c4:	20000318 	.word	0x20000318

000036c8 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    36c8:	4288      	cmp	r0, r1
    36ca:	d214      	bcs.n	36f6 <usb_find_desc+0x2e>
	return desc[0];
    36cc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    36ce:	2b01      	cmp	r3, #1
    36d0:	d913      	bls.n	36fa <usb_find_desc+0x32>
{
    36d2:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    36d4:	7844      	ldrb	r4, [r0, #1]
    36d6:	4294      	cmp	r4, r2
    36d8:	d00a      	beq.n	36f0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    36da:	4418      	add	r0, r3
	while (desc < eof) {
    36dc:	4281      	cmp	r1, r0
    36de:	d906      	bls.n	36ee <usb_find_desc+0x26>
	return desc[0];
    36e0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    36e2:	2b01      	cmp	r3, #1
    36e4:	d90b      	bls.n	36fe <usb_find_desc+0x36>
	return desc[1];
    36e6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    36e8:	4294      	cmp	r4, r2
    36ea:	d1f6      	bne.n	36da <usb_find_desc+0x12>
    36ec:	e000      	b.n	36f0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    36ee:	2000      	movs	r0, #0
}
    36f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    36f4:	4770      	bx	lr
	return NULL;
    36f6:	2000      	movs	r0, #0
    36f8:	4770      	bx	lr
		_desc_len_check();
    36fa:	2000      	movs	r0, #0
    36fc:	4770      	bx	lr
    36fe:	2000      	movs	r0, #0
    3700:	e7f6      	b.n	36f0 <usb_find_desc+0x28>

00003702 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3702:	4288      	cmp	r0, r1
    3704:	d216      	bcs.n	3734 <usb_find_ep_desc+0x32>
	return desc[0];
    3706:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3708:	2b01      	cmp	r3, #1
    370a:	d915      	bls.n	3738 <usb_find_ep_desc+0x36>
	return desc[1];
    370c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    370e:	2a04      	cmp	r2, #4
    3710:	d014      	beq.n	373c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3712:	2a05      	cmp	r2, #5
    3714:	d00b      	beq.n	372e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    3716:	4418      	add	r0, r3
	while (desc < eof) {
    3718:	4281      	cmp	r1, r0
    371a:	d909      	bls.n	3730 <usb_find_ep_desc+0x2e>
	return desc[0];
    371c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    371e:	2b01      	cmp	r3, #1
    3720:	d90e      	bls.n	3740 <usb_find_ep_desc+0x3e>
	return desc[1];
    3722:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3724:	2a04      	cmp	r2, #4
    3726:	d00d      	beq.n	3744 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3728:	2a05      	cmp	r2, #5
    372a:	d1f4      	bne.n	3716 <usb_find_ep_desc+0x14>
    372c:	e00b      	b.n	3746 <usb_find_ep_desc+0x44>
    372e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3730:	2000      	movs	r0, #0
    3732:	4770      	bx	lr
    3734:	2000      	movs	r0, #0
    3736:	4770      	bx	lr
		_desc_len_check();
    3738:	2000      	movs	r0, #0
    373a:	4770      	bx	lr
	return NULL;
    373c:	2000      	movs	r0, #0
    373e:	4770      	bx	lr
		_desc_len_check();
    3740:	2000      	movs	r0, #0
    3742:	4770      	bx	lr
	return NULL;
    3744:	2000      	movs	r0, #0
}
    3746:	4770      	bx	lr

00003748 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3748:	b538      	push	{r3, r4, r5, lr}
    374a:	460c      	mov	r4, r1
    374c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    374e:	2202      	movs	r2, #2
    3750:	4b16      	ldr	r3, [pc, #88]	; (37ac <usb_find_cfg_desc+0x64>)
    3752:	4798      	blx	r3
	if (!desc) {
    3754:	4603      	mov	r3, r0
    3756:	b1e8      	cbz	r0, 3794 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3758:	4284      	cmp	r4, r0
    375a:	d91d      	bls.n	3798 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    375c:	7802      	ldrb	r2, [r0, #0]
    375e:	2a01      	cmp	r2, #1
    3760:	d91c      	bls.n	379c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    3762:	7842      	ldrb	r2, [r0, #1]
    3764:	2a02      	cmp	r2, #2
    3766:	d11b      	bne.n	37a0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    3768:	7942      	ldrb	r2, [r0, #5]
    376a:	42aa      	cmp	r2, r5
    376c:	d012      	beq.n	3794 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    376e:	78d9      	ldrb	r1, [r3, #3]
    3770:	789a      	ldrb	r2, [r3, #2]
    3772:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3776:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    377a:	429c      	cmp	r4, r3
    377c:	d909      	bls.n	3792 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    377e:	781a      	ldrb	r2, [r3, #0]
    3780:	2a01      	cmp	r2, #1
    3782:	d90f      	bls.n	37a4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3784:	785a      	ldrb	r2, [r3, #1]
    3786:	2a02      	cmp	r2, #2
    3788:	d10e      	bne.n	37a8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    378a:	795a      	ldrb	r2, [r3, #5]
    378c:	42aa      	cmp	r2, r5
    378e:	d1ee      	bne.n	376e <usb_find_cfg_desc+0x26>
    3790:	e000      	b.n	3794 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3792:	2300      	movs	r3, #0
}
    3794:	4618      	mov	r0, r3
    3796:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    3798:	2300      	movs	r3, #0
    379a:	e7fb      	b.n	3794 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    379c:	2300      	movs	r3, #0
    379e:	e7f9      	b.n	3794 <usb_find_cfg_desc+0x4c>
	return NULL;
    37a0:	2300      	movs	r3, #0
    37a2:	e7f7      	b.n	3794 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    37a4:	2300      	movs	r3, #0
    37a6:	e7f5      	b.n	3794 <usb_find_cfg_desc+0x4c>
	return NULL;
    37a8:	2300      	movs	r3, #0
    37aa:	e7f3      	b.n	3794 <usb_find_cfg_desc+0x4c>
    37ac:	000036c9 	.word	0x000036c9

000037b0 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    37b0:	4288      	cmp	r0, r1
    37b2:	d217      	bcs.n	37e4 <usb_find_str_desc+0x34>
{
    37b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37b8:	460d      	mov	r5, r1
    37ba:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    37bc:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    37be:	f04f 0803 	mov.w	r8, #3
    37c2:	4f0c      	ldr	r7, [pc, #48]	; (37f4 <usb_find_str_desc+0x44>)
    37c4:	4642      	mov	r2, r8
    37c6:	4629      	mov	r1, r5
    37c8:	47b8      	blx	r7
		if (desc) {
    37ca:	4603      	mov	r3, r0
    37cc:	b170      	cbz	r0, 37ec <usb_find_str_desc+0x3c>
	return desc[0];
    37ce:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    37d0:	2801      	cmp	r0, #1
    37d2:	d90a      	bls.n	37ea <usb_find_str_desc+0x3a>
			if (i == str_index) {
    37d4:	42a6      	cmp	r6, r4
    37d6:	d009      	beq.n	37ec <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    37d8:	4418      	add	r0, r3
    37da:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    37dc:	4285      	cmp	r5, r0
    37de:	d8f1      	bhi.n	37c4 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    37e0:	2300      	movs	r3, #0
    37e2:	e003      	b.n	37ec <usb_find_str_desc+0x3c>
    37e4:	2300      	movs	r3, #0
}
    37e6:	4618      	mov	r0, r3
    37e8:	4770      	bx	lr
			_desc_len_check();
    37ea:	2300      	movs	r3, #0
}
    37ec:	4618      	mov	r0, r3
    37ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37f2:	bf00      	nop
    37f4:	000036c9 	.word	0x000036c9

000037f8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    37f8:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    37fa:	4805      	ldr	r0, [pc, #20]	; (3810 <cdc_device_acm_init+0x18>)
    37fc:	4b05      	ldr	r3, [pc, #20]	; (3814 <cdc_device_acm_init+0x1c>)
    37fe:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3800:	4b05      	ldr	r3, [pc, #20]	; (3818 <cdc_device_acm_init+0x20>)
    3802:	4798      	blx	r3

	usbdc_start(single_desc);
    3804:	4805      	ldr	r0, [pc, #20]	; (381c <cdc_device_acm_init+0x24>)
    3806:	4b06      	ldr	r3, [pc, #24]	; (3820 <cdc_device_acm_init+0x28>)
    3808:	4798      	blx	r3
	usbdc_attach();
    380a:	4b06      	ldr	r3, [pc, #24]	; (3824 <cdc_device_acm_init+0x2c>)
    380c:	4798      	blx	r3
    380e:	bd08      	pop	{r3, pc}
    3810:	20000378 	.word	0x20000378
    3814:	000035f9 	.word	0x000035f9
    3818:	00002fa9 	.word	0x00002fa9
    381c:	20000008 	.word	0x20000008
    3820:	00003669 	.word	0x00003669
    3824:	0000369d 	.word	0x0000369d

00003828 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3828:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    382a:	4b01      	ldr	r3, [pc, #4]	; (3830 <usb_init+0x8>)
    382c:	4798      	blx	r3
    382e:	bd08      	pop	{r3, pc}
    3830:	000037f9 	.word	0x000037f9

00003834 <__libc_init_array>:
    3834:	b570      	push	{r4, r5, r6, lr}
    3836:	4e0d      	ldr	r6, [pc, #52]	; (386c <__libc_init_array+0x38>)
    3838:	4c0d      	ldr	r4, [pc, #52]	; (3870 <__libc_init_array+0x3c>)
    383a:	1ba4      	subs	r4, r4, r6
    383c:	10a4      	asrs	r4, r4, #2
    383e:	2500      	movs	r5, #0
    3840:	42a5      	cmp	r5, r4
    3842:	d109      	bne.n	3858 <__libc_init_array+0x24>
    3844:	4e0b      	ldr	r6, [pc, #44]	; (3874 <__libc_init_array+0x40>)
    3846:	4c0c      	ldr	r4, [pc, #48]	; (3878 <__libc_init_array+0x44>)
    3848:	f000 f8a4 	bl	3994 <_init>
    384c:	1ba4      	subs	r4, r4, r6
    384e:	10a4      	asrs	r4, r4, #2
    3850:	2500      	movs	r5, #0
    3852:	42a5      	cmp	r5, r4
    3854:	d105      	bne.n	3862 <__libc_init_array+0x2e>
    3856:	bd70      	pop	{r4, r5, r6, pc}
    3858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    385c:	4798      	blx	r3
    385e:	3501      	adds	r5, #1
    3860:	e7ee      	b.n	3840 <__libc_init_array+0xc>
    3862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3866:	4798      	blx	r3
    3868:	3501      	adds	r5, #1
    386a:	e7f2      	b.n	3852 <__libc_init_array+0x1e>
    386c:	000039a0 	.word	0x000039a0
    3870:	000039a0 	.word	0x000039a0
    3874:	000039a0 	.word	0x000039a0
    3878:	000039a4 	.word	0x000039a4

0000387c <memcpy>:
    387c:	b510      	push	{r4, lr}
    387e:	1e43      	subs	r3, r0, #1
    3880:	440a      	add	r2, r1
    3882:	4291      	cmp	r1, r2
    3884:	d100      	bne.n	3888 <memcpy+0xc>
    3886:	bd10      	pop	{r4, pc}
    3888:	f811 4b01 	ldrb.w	r4, [r1], #1
    388c:	f803 4f01 	strb.w	r4, [r3, #1]!
    3890:	e7f7      	b.n	3882 <memcpy+0x6>

00003892 <memset>:
    3892:	4402      	add	r2, r0
    3894:	4603      	mov	r3, r0
    3896:	4293      	cmp	r3, r2
    3898:	d100      	bne.n	389c <memset+0xa>
    389a:	4770      	bx	lr
    389c:	f803 1b01 	strb.w	r1, [r3], #1
    38a0:	e7f9      	b.n	3896 <memset+0x4>
    38a2:	0000      	movs	r0, r0
    38a4:	682f2e2e 	.word	0x682f2e2e
    38a8:	732f6c61 	.word	0x732f6c61
    38ac:	682f6372 	.word	0x682f6372
    38b0:	695f6c61 	.word	0x695f6c61
    38b4:	6d5f6332 	.word	0x6d5f6332
    38b8:	7973615f 	.word	0x7973615f
    38bc:	632e636e 	.word	0x632e636e
    38c0:	00000000 	.word	0x00000000
    38c4:	682f2e2e 	.word	0x682f2e2e
    38c8:	732f6c61 	.word	0x732f6c61
    38cc:	682f6372 	.word	0x682f6372
    38d0:	735f6c61 	.word	0x735f6c61
    38d4:	6d5f6970 	.word	0x6d5f6970
    38d8:	7973615f 	.word	0x7973615f
    38dc:	632e636e 	.word	0x632e636e
    38e0:	00000000 	.word	0x00000000
    38e4:	682f2e2e 	.word	0x682f2e2e
    38e8:	752f6c61 	.word	0x752f6c61
    38ec:	736c6974 	.word	0x736c6974
    38f0:	6372732f 	.word	0x6372732f
    38f4:	6974752f 	.word	0x6974752f
    38f8:	6c5f736c 	.word	0x6c5f736c
    38fc:	2e747369 	.word	0x2e747369
    3900:	00000063 	.word	0x00000063
    3904:	40003000 	.word	0x40003000
    3908:	40003400 	.word	0x40003400
    390c:	41012000 	.word	0x41012000
    3910:	41014000 	.word	0x41014000
    3914:	43000000 	.word	0x43000000
    3918:	43000400 	.word	0x43000400
    391c:	43000800 	.word	0x43000800
    3920:	43000c00 	.word	0x43000c00

00003924 <_i2cms>:
    3924:	00000006 00200014 00000100 00003635     ...... .....56..
    3934:	00d70000 00b71b00 682f2e2e 732f6c70     ........../hpl/s
    3944:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    3954:	0000632e                                .c..

00003958 <_usb_ep_cfgs>:
    3958:	200002b4 00000000 00000040 20000274     ... ....@...t.. 
    3968:	00000000 00000040 20000234 00000000     ....@...4.. ....
    3978:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    3988:	73752f65 2e636462 00000063              e/usbdc.c...

00003994 <_init>:
    3994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3996:	bf00      	nop
    3998:	bcf8      	pop	{r3, r4, r5, r6, r7}
    399a:	bc08      	pop	{r3}
    399c:	469e      	mov	lr, r3
    399e:	4770      	bx	lr

000039a0 <__init_array_start>:
    39a0:	00000289 	.word	0x00000289

000039a4 <_fini>:
    39a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a6:	bf00      	nop
    39a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39aa:	bc08      	pop	{r3}
    39ac:	469e      	mov	lr, r3
    39ae:	4770      	bx	lr

000039b0 <__fini_array_start>:
    39b0:	00000265 	.word	0x00000265
