
MainDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003248  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00003248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020068  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020068  2**0
                  CONTENTS
  4 .bss          000003a4  20000068  000032b0  00020068  2**2
                  ALLOC
  5 .stack        00010004  2000040c  00003654  00020068  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
  8 .debug_info   000298bc  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000038c7  00000000  00000000  000499ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000118d4  00000000  00000000  0004d272  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c10  00000000  00000000  0005eb46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001400  00000000  00000000  0005f756  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033db6  00000000  00000000  00060b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013ffb  00000000  00000000  0009490c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011dad8  00000000  00000000  000a8907  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000020c0  00000000  00000000  001c63e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 04 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	8d 0f 00 00 75 10 00 00 89 10 00 00 9d 10 00 00     ....u...........
     104:	b1 10 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c1 25 00 00     .............%..
     184:	cd 25 00 00 d9 25 00 00 e5 25 00 00 e5 02 00 00     .%...%...%......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000068 	.word	0x20000068
     280:	00000000 	.word	0x00000000
     284:	00003248 	.word	0x00003248

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003248 	.word	0x00003248
     2c4:	2000006c 	.word	0x2000006c
     2c8:	00003248 	.word	0x00003248
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000541 	.word	0x00000541
     2e0:	000030dd 	.word	0x000030dd

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00003248 	.word	0x00003248
     364:	20000068 	.word	0x20000068
     368:	2000040c 	.word	0x2000040c
     36c:	20000068 	.word	0x20000068
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	000030e9 	.word	0x000030e9
     37c:	000025f1 	.word	0x000025f1

00000380 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     380:	4b28      	ldr	r3, [pc, #160]	; (424 <SPI_0_PORT_init+0xa4>)
     382:	2210      	movs	r2, #16
     384:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     386:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     388:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     38c:	629a      	str	r2, [r3, #40]	; 0x28
     38e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     392:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     394:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ac:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3b4:	2220      	movs	r2, #32
     3b6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3b8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3be:	629a      	str	r2, [r3, #40]	; 0x28
     3c0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3ea:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     3ee:	629a      	str	r2, [r3, #40]	; 0x28
     3f0:	4a0d      	ldr	r2, [pc, #52]	; (428 <SPI_0_PORT_init+0xa8>)
     3f2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3f4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     3f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     400:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     408:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     410:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     414:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     418:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     41c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     420:	4770      	bx	lr
     422:	bf00      	nop
     424:	41008000 	.word	0x41008000
     428:	c0020000 	.word	0xc0020000

0000042c <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     42c:	4b06      	ldr	r3, [pc, #24]	; (448 <SPI_0_CLOCK_init+0x1c>)
     42e:	2240      	movs	r2, #64	; 0x40
     430:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     434:	2243      	movs	r2, #67	; 0x43
     436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     43a:	4a04      	ldr	r2, [pc, #16]	; (44c <SPI_0_CLOCK_init+0x20>)
     43c:	6953      	ldr	r3, [r2, #20]
     43e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     442:	6153      	str	r3, [r2, #20]
     444:	4770      	bx	lr
     446:	bf00      	nop
     448:	40001c00 	.word	0x40001c00
     44c:	40000800 	.word	0x40000800

00000450 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     450:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     452:	4b04      	ldr	r3, [pc, #16]	; (464 <SPI_0_init+0x14>)
     454:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     456:	4904      	ldr	r1, [pc, #16]	; (468 <SPI_0_init+0x18>)
     458:	4804      	ldr	r0, [pc, #16]	; (46c <SPI_0_init+0x1c>)
     45a:	4b05      	ldr	r3, [pc, #20]	; (470 <SPI_0_init+0x20>)
     45c:	4798      	blx	r3
	SPI_0_PORT_init();
     45e:	4b05      	ldr	r3, [pc, #20]	; (474 <SPI_0_init+0x24>)
     460:	4798      	blx	r3
     462:	bd08      	pop	{r3, pc}
     464:	0000042d 	.word	0x0000042d
     468:	40003000 	.word	0x40003000
     46c:	200003b4 	.word	0x200003b4
     470:	00000739 	.word	0x00000739
     474:	00000381 	.word	0x00000381

00000478 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     478:	4b1e      	ldr	r3, [pc, #120]	; (4f4 <USB_0_PORT_init+0x7c>)
     47a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     47e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     484:	6299      	str	r1, [r3, #40]	; 0x28
     486:	481c      	ldr	r0, [pc, #112]	; (4f8 <USB_0_PORT_init+0x80>)
     488:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4bc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4be:	6299      	str	r1, [r3, #40]	; 0x28
     4c0:	490e      	ldr	r1, [pc, #56]	; (4fc <USB_0_PORT_init+0x84>)
     4c2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4c4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4ca:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4e6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ea:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     4f2:	4770      	bx	lr
     4f4:	41008000 	.word	0x41008000
     4f8:	c0000100 	.word	0xc0000100
     4fc:	c0000200 	.word	0xc0000200

00000500 <USB_0_CLOCK_init>:
     500:	2244      	movs	r2, #68	; 0x44
     502:	4b07      	ldr	r3, [pc, #28]	; (520 <USB_0_CLOCK_init+0x20>)
     504:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     508:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     50c:	691a      	ldr	r2, [r3, #16]
     50e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     512:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     514:	699a      	ldr	r2, [r3, #24]
     516:	f042 0201 	orr.w	r2, r2, #1
     51a:	619a      	str	r2, [r3, #24]
     51c:	4770      	bx	lr
     51e:	bf00      	nop
     520:	40001c00 	.word	0x40001c00

00000524 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     524:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     526:	4b03      	ldr	r3, [pc, #12]	; (534 <USB_0_init+0x10>)
     528:	4798      	blx	r3
	usb_d_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <USB_0_init+0x14>)
     52c:	4798      	blx	r3
	USB_0_PORT_init();
     52e:	4b03      	ldr	r3, [pc, #12]	; (53c <USB_0_init+0x18>)
     530:	4798      	blx	r3
     532:	bd08      	pop	{r3, pc}
     534:	00000501 	.word	0x00000501
     538:	00000a11 	.word	0x00000a11
     53c:	00000479 	.word	0x00000479

00000540 <system_init>:
}

void system_init(void)
{
     540:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     542:	4b03      	ldr	r3, [pc, #12]	; (550 <system_init+0x10>)
     544:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
     546:	4b03      	ldr	r3, [pc, #12]	; (554 <system_init+0x14>)
     548:	4798      	blx	r3

	USB_0_init();
     54a:	4b03      	ldr	r3, [pc, #12]	; (558 <system_init+0x18>)
     54c:	4798      	blx	r3
     54e:	bd08      	pop	{r3, pc}
     550:	00000dc5 	.word	0x00000dc5
     554:	00000451 	.word	0x00000451
     558:	00000525 	.word	0x00000525

0000055c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     55c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     560:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     562:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     564:	f3bf 8f5f 	dmb	sy
     568:	4770      	bx	lr

0000056a <atomic_leave_critical>:
     56a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     56e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     570:	f383 8810 	msr	PRIMASK, r3
     574:	4770      	bx	lr
	...

00000578 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     57a:	460f      	mov	r7, r1
     57c:	4616      	mov	r6, r2
	ASSERT(io);
     57e:	4604      	mov	r4, r0
     580:	f240 1227 	movw	r2, #295	; 0x127
     584:	4909      	ldr	r1, [pc, #36]	; (5ac <_spi_m_async_io_write+0x34>)
     586:	3000      	adds	r0, #0
     588:	bf18      	it	ne
     58a:	2001      	movne	r0, #1
     58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <_spi_m_async_io_write+0x38>)
     58e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     590:	2500      	movs	r5, #0
     592:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     594:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     596:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     598:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     59a:	2310      	movs	r3, #16
     59c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     59e:	2101      	movs	r1, #1
     5a0:	f1a4 0020 	sub.w	r0, r4, #32
     5a4:	4b03      	ldr	r3, [pc, #12]	; (5b4 <_spi_m_async_io_write+0x3c>)
     5a6:	4798      	blx	r3

	return ERR_NONE;
}
     5a8:	4628      	mov	r0, r5
     5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5ac:	00003158 	.word	0x00003158
     5b0:	00000d5d 	.word	0x00000d5d
     5b4:	00001225 	.word	0x00001225

000005b8 <_spi_m_async_io_read>:
{
     5b8:	b570      	push	{r4, r5, r6, lr}
     5ba:	460d      	mov	r5, r1
     5bc:	4616      	mov	r6, r2
	ASSERT(io);
     5be:	4604      	mov	r4, r0
     5c0:	f240 1205 	movw	r2, #261	; 0x105
     5c4:	490c      	ldr	r1, [pc, #48]	; (5f8 <_spi_m_async_io_read+0x40>)
     5c6:	3000      	adds	r0, #0
     5c8:	bf18      	it	ne
     5ca:	2001      	movne	r0, #1
     5cc:	4b0b      	ldr	r3, [pc, #44]	; (5fc <_spi_m_async_io_read+0x44>)
     5ce:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     5d0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     5d2:	2500      	movs	r5, #0
     5d4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     5d6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     5d8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     5da:	2310      	movs	r3, #16
     5dc:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     5de:	3c20      	subs	r4, #32
     5e0:	2101      	movs	r1, #1
     5e2:	4620      	mov	r0, r4
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <_spi_m_async_io_read+0x48>)
     5e6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     5e8:	f240 11ff 	movw	r1, #511	; 0x1ff
     5ec:	4620      	mov	r0, r4
     5ee:	4b05      	ldr	r3, [pc, #20]	; (604 <_spi_m_async_io_read+0x4c>)
     5f0:	4798      	blx	r3
}
     5f2:	4628      	mov	r0, r5
     5f4:	bd70      	pop	{r4, r5, r6, pc}
     5f6:	bf00      	nop
     5f8:	00003158 	.word	0x00003158
     5fc:	00000d5d 	.word	0x00000d5d
     600:	00001259 	.word	0x00001259
     604:	000012d5 	.word	0x000012d5

00000608 <_spi_dev_error>:
{
     608:	b570      	push	{r4, r5, r6, lr}
     60a:	4604      	mov	r4, r0
     60c:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     60e:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     610:	2100      	movs	r1, #0
     612:	4b09      	ldr	r3, [pc, #36]	; (638 <_spi_dev_error+0x30>)
     614:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     616:	2100      	movs	r1, #0
     618:	4620      	mov	r0, r4
     61a:	4b08      	ldr	r3, [pc, #32]	; (63c <_spi_dev_error+0x34>)
     61c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     61e:	2100      	movs	r1, #0
     620:	4620      	mov	r0, r4
     622:	4b07      	ldr	r3, [pc, #28]	; (640 <_spi_dev_error+0x38>)
     624:	4798      	blx	r3
	spi->stat = 0;
     626:	2300      	movs	r3, #0
     628:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     62c:	6b23      	ldr	r3, [r4, #48]	; 0x30
     62e:	b113      	cbz	r3, 636 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     630:	4631      	mov	r1, r6
     632:	4628      	mov	r0, r5
     634:	4798      	blx	r3
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	00001225 	.word	0x00001225
     63c:	00001259 	.word	0x00001259
     640:	00001299 	.word	0x00001299

00000644 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     644:	6c02      	ldr	r2, [r0, #64]	; 0x40
     646:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     648:	429a      	cmp	r2, r3
     64a:	d200      	bcs.n	64e <_spi_dev_complete+0xa>
     64c:	4770      	bx	lr
{
     64e:	b510      	push	{r4, lr}
     650:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     652:	2100      	movs	r1, #0
     654:	4b04      	ldr	r3, [pc, #16]	; (668 <_spi_dev_complete+0x24>)
     656:	4798      	blx	r3
		spi->stat = 0;
     658:	2300      	movs	r3, #0
     65a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     65e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     660:	b10b      	cbz	r3, 666 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     662:	1f20      	subs	r0, r4, #4
     664:	4798      	blx	r3
     666:	bd10      	pop	{r4, pc}
     668:	00001299 	.word	0x00001299

0000066c <_spi_dev_tx>:
{
     66c:	b510      	push	{r4, lr}
     66e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     670:	7903      	ldrb	r3, [r0, #4]
     672:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     674:	6b42      	ldr	r2, [r0, #52]	; 0x34
     676:	6c03      	ldr	r3, [r0, #64]	; 0x40
     678:	f103 0101 	add.w	r1, r3, #1
     67c:	6401      	str	r1, [r0, #64]	; 0x40
     67e:	bf94      	ite	ls
     680:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     682:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     686:	4b08      	ldr	r3, [pc, #32]	; (6a8 <_spi_dev_tx+0x3c>)
     688:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     68a:	6c22      	ldr	r2, [r4, #64]	; 0x40
     68c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     68e:	429a      	cmp	r2, r3
     690:	d000      	beq.n	694 <_spi_dev_tx+0x28>
     692:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     694:	2100      	movs	r1, #0
     696:	4620      	mov	r0, r4
     698:	4b04      	ldr	r3, [pc, #16]	; (6ac <_spi_dev_tx+0x40>)
     69a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     69c:	2101      	movs	r1, #1
     69e:	4620      	mov	r0, r4
     6a0:	4b03      	ldr	r3, [pc, #12]	; (6b0 <_spi_dev_tx+0x44>)
     6a2:	4798      	blx	r3
}
     6a4:	e7f5      	b.n	692 <_spi_dev_tx+0x26>
     6a6:	bf00      	nop
     6a8:	000012d5 	.word	0x000012d5
     6ac:	00001225 	.word	0x00001225
     6b0:	00001299 	.word	0x00001299

000006b4 <_spi_dev_rx>:
{
     6b4:	b570      	push	{r4, r5, r6, lr}
     6b6:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     6b8:	6b85      	ldr	r5, [r0, #56]	; 0x38
     6ba:	b305      	cbz	r5, 6fe <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     6bc:	7903      	ldrb	r3, [r0, #4]
     6be:	2b01      	cmp	r3, #1
     6c0:	d916      	bls.n	6f0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     6c2:	6c06      	ldr	r6, [r0, #64]	; 0x40
     6c4:	1c73      	adds	r3, r6, #1
     6c6:	6403      	str	r3, [r0, #64]	; 0x40
     6c8:	4b18      	ldr	r3, [pc, #96]	; (72c <_spi_dev_rx+0x78>)
     6ca:	4798      	blx	r3
     6cc:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     6d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
     6d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     6d4:	4293      	cmp	r3, r2
     6d6:	d21d      	bcs.n	714 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     6d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
     6da:	b1b2      	cbz	r2, 70a <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     6dc:	7921      	ldrb	r1, [r4, #4]
     6de:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     6e0:	bf94      	ite	ls
     6e2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     6e4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     6e8:	4620      	mov	r0, r4
     6ea:	4b11      	ldr	r3, [pc, #68]	; (730 <_spi_dev_rx+0x7c>)
     6ec:	4798      	blx	r3
     6ee:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     6f0:	6c06      	ldr	r6, [r0, #64]	; 0x40
     6f2:	1c73      	adds	r3, r6, #1
     6f4:	6403      	str	r3, [r0, #64]	; 0x40
     6f6:	4b0d      	ldr	r3, [pc, #52]	; (72c <_spi_dev_rx+0x78>)
     6f8:	4798      	blx	r3
     6fa:	55a8      	strb	r0, [r5, r6]
     6fc:	e7e8      	b.n	6d0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     6fe:	4b0b      	ldr	r3, [pc, #44]	; (72c <_spi_dev_rx+0x78>)
     700:	4798      	blx	r3
		spi->xfercnt++;
     702:	6c23      	ldr	r3, [r4, #64]	; 0x40
     704:	3301      	adds	r3, #1
     706:	6423      	str	r3, [r4, #64]	; 0x40
     708:	e7e2      	b.n	6d0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     70a:	88e1      	ldrh	r1, [r4, #6]
     70c:	4620      	mov	r0, r4
     70e:	4b08      	ldr	r3, [pc, #32]	; (730 <_spi_dev_rx+0x7c>)
     710:	4798      	blx	r3
     712:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     714:	2100      	movs	r1, #0
     716:	4620      	mov	r0, r4
     718:	4b06      	ldr	r3, [pc, #24]	; (734 <_spi_dev_rx+0x80>)
     71a:	4798      	blx	r3
		spi->stat = 0;
     71c:	2300      	movs	r3, #0
     71e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     724:	b10b      	cbz	r3, 72a <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     726:	1f20      	subs	r0, r4, #4
     728:	4798      	blx	r3
     72a:	bd70      	pop	{r4, r5, r6, pc}
     72c:	00001305 	.word	0x00001305
     730:	000012d5 	.word	0x000012d5
     734:	00001259 	.word	0x00001259

00000738 <spi_m_async_init>:
{
     738:	b570      	push	{r4, r5, r6, lr}
     73a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     73c:	4606      	mov	r6, r0
     73e:	b330      	cbz	r0, 78e <spi_m_async_init+0x56>
     740:	1c08      	adds	r0, r1, #0
     742:	bf18      	it	ne
     744:	2001      	movne	r0, #1
     746:	22a5      	movs	r2, #165	; 0xa5
     748:	4912      	ldr	r1, [pc, #72]	; (794 <spi_m_async_init+0x5c>)
     74a:	4b13      	ldr	r3, [pc, #76]	; (798 <spi_m_async_init+0x60>)
     74c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     74e:	4634      	mov	r4, r6
     750:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     754:	4629      	mov	r1, r5
     756:	4620      	mov	r0, r4
     758:	4b10      	ldr	r3, [pc, #64]	; (79c <spi_m_async_init+0x64>)
     75a:	4798      	blx	r3
	if (rc >= 0) {
     75c:	2800      	cmp	r0, #0
     75e:	db15      	blt.n	78c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     760:	4a0f      	ldr	r2, [pc, #60]	; (7a0 <spi_m_async_init+0x68>)
     762:	2100      	movs	r1, #0
     764:	4620      	mov	r0, r4
     766:	4d0f      	ldr	r5, [pc, #60]	; (7a4 <spi_m_async_init+0x6c>)
     768:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     76a:	4a0f      	ldr	r2, [pc, #60]	; (7a8 <spi_m_async_init+0x70>)
     76c:	2101      	movs	r1, #1
     76e:	4620      	mov	r0, r4
     770:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     772:	4a0e      	ldr	r2, [pc, #56]	; (7ac <spi_m_async_init+0x74>)
     774:	2102      	movs	r1, #2
     776:	4620      	mov	r0, r4
     778:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     77a:	4a0d      	ldr	r2, [pc, #52]	; (7b0 <spi_m_async_init+0x78>)
     77c:	2103      	movs	r1, #3
     77e:	4620      	mov	r0, r4
     780:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     782:	4b0c      	ldr	r3, [pc, #48]	; (7b4 <spi_m_async_init+0x7c>)
     784:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     786:	4b0c      	ldr	r3, [pc, #48]	; (7b8 <spi_m_async_init+0x80>)
     788:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     78a:	2000      	movs	r0, #0
}
     78c:	bd70      	pop	{r4, r5, r6, pc}
     78e:	2000      	movs	r0, #0
     790:	e7d9      	b.n	746 <spi_m_async_init+0xe>
     792:	bf00      	nop
     794:	00003158 	.word	0x00003158
     798:	00000d5d 	.word	0x00000d5d
     79c:	000011b9 	.word	0x000011b9
     7a0:	0000066d 	.word	0x0000066d
     7a4:	00001331 	.word	0x00001331
     7a8:	000006b5 	.word	0x000006b5
     7ac:	00000645 	.word	0x00000645
     7b0:	00000609 	.word	0x00000609
     7b4:	000005b9 	.word	0x000005b9
     7b8:	00000579 	.word	0x00000579

000007bc <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     7bc:	4b0f      	ldr	r3, [pc, #60]	; (7fc <_usb_d_find_ep+0x40>)
     7be:	7859      	ldrb	r1, [r3, #1]
     7c0:	4288      	cmp	r0, r1
     7c2:	d018      	beq.n	7f6 <_usb_d_find_ep+0x3a>
{
     7c4:	b430      	push	{r4, r5}
     7c6:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     7c8:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     7ca:	f000 050f 	and.w	r5, r0, #15
     7ce:	e007      	b.n	7e0 <_usb_d_find_ep+0x24>
     7d0:	3301      	adds	r3, #1
     7d2:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     7d4:	2b04      	cmp	r3, #4
     7d6:	d009      	beq.n	7ec <_usb_d_find_ep+0x30>
     7d8:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     7da:	7851      	ldrb	r1, [r2, #1]
     7dc:	4281      	cmp	r1, r0
     7de:	d007      	beq.n	7f0 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     7e0:	7814      	ldrb	r4, [r2, #0]
     7e2:	2c00      	cmp	r4, #0
     7e4:	d1f4      	bne.n	7d0 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     7e6:	428d      	cmp	r5, r1
     7e8:	d1f2      	bne.n	7d0 <_usb_d_find_ep+0x14>
     7ea:	e001      	b.n	7f0 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     7ec:	f04f 33ff 	mov.w	r3, #4294967295
}
     7f0:	4618      	mov	r0, r3
     7f2:	bc30      	pop	{r4, r5}
     7f4:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     7f6:	2300      	movs	r3, #0
}
     7f8:	4618      	mov	r0, r3
     7fa:	4770      	bx	lr
     7fc:	20000084 	.word	0x20000084

00000800 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     800:	2000      	movs	r0, #0
     802:	4770      	bx	lr

00000804 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     804:	b538      	push	{r3, r4, r5, lr}
     806:	4604      	mov	r4, r0
     808:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     80a:	4b09      	ldr	r3, [pc, #36]	; (830 <usb_d_cb_trans_more+0x2c>)
     80c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     80e:	4b09      	ldr	r3, [pc, #36]	; (834 <usb_d_cb_trans_more+0x30>)
     810:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     814:	789b      	ldrb	r3, [r3, #2]
     816:	2b03      	cmp	r3, #3
     818:	d001      	beq.n	81e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     81a:	2000      	movs	r0, #0
}
     81c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     81e:	4b05      	ldr	r3, [pc, #20]	; (834 <usb_d_cb_trans_more+0x30>)
     820:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     824:	6983      	ldr	r3, [r0, #24]
     826:	4629      	mov	r1, r5
     828:	4620      	mov	r0, r4
     82a:	4798      	blx	r3
     82c:	bd38      	pop	{r3, r4, r5, pc}
     82e:	bf00      	nop
     830:	000007bd 	.word	0x000007bd
     834:	20000084 	.word	0x20000084

00000838 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     838:	b5f0      	push	{r4, r5, r6, r7, lr}
     83a:	b085      	sub	sp, #20
     83c:	4606      	mov	r6, r0
     83e:	460d      	mov	r5, r1
     840:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     842:	4b4d      	ldr	r3, [pc, #308]	; (978 <_usb_d_cb_trans_done+0x140>)
     844:	4798      	blx	r3
     846:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     848:	2d00      	cmp	r5, #0
     84a:	d15b      	bne.n	904 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     84c:	4a4b      	ldr	r2, [pc, #300]	; (97c <_usb_d_cb_trans_done+0x144>)
     84e:	0143      	lsls	r3, r0, #5
     850:	18d1      	adds	r1, r2, r3
     852:	2000      	movs	r0, #0
     854:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     856:	5cd3      	ldrb	r3, [r2, r3]
     858:	b173      	cbz	r3, 878 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     85a:	4b48      	ldr	r3, [pc, #288]	; (97c <_usb_d_cb_trans_done+0x144>)
     85c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     860:	2201      	movs	r2, #1
     862:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     864:	4845      	ldr	r0, [pc, #276]	; (97c <_usb_d_cb_trans_done+0x144>)
     866:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     86a:	69c3      	ldr	r3, [r0, #28]
     86c:	463a      	mov	r2, r7
     86e:	78c1      	ldrb	r1, [r0, #3]
     870:	4630      	mov	r0, r6
     872:	4798      	blx	r3
}
     874:	b005      	add	sp, #20
     876:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     878:	788b      	ldrb	r3, [r1, #2]
     87a:	2b03      	cmp	r3, #3
     87c:	d00b      	beq.n	896 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     87e:	483f      	ldr	r0, [pc, #252]	; (97c <_usb_d_cb_trans_done+0x144>)
     880:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     884:	4614      	mov	r4, r2
     886:	69d3      	ldr	r3, [r2, #28]
     888:	320c      	adds	r2, #12
     88a:	2100      	movs	r1, #0
     88c:	7860      	ldrb	r0, [r4, #1]
     88e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     890:	2302      	movs	r3, #2
     892:	70a3      	strb	r3, [r4, #2]
     894:	e7ee      	b.n	874 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     896:	460b      	mov	r3, r1
     898:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     89c:	460a      	mov	r2, r1
     89e:	69ce      	ldr	r6, [r1, #28]
     8a0:	320c      	adds	r2, #12
     8a2:	2101      	movs	r1, #1
     8a4:	7858      	ldrb	r0, [r3, #1]
     8a6:	47b0      	blx	r6
		if (err) {
     8a8:	b1a0      	cbz	r0, 8d4 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     8aa:	4b34      	ldr	r3, [pc, #208]	; (97c <_usb_d_cb_trans_done+0x144>)
     8ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     8b0:	2205      	movs	r2, #5
     8b2:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     8b4:	2202      	movs	r2, #2
     8b6:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     8b8:	2d00      	cmp	r5, #0
     8ba:	db09      	blt.n	8d0 <_usb_d_cb_trans_done+0x98>
     8bc:	482f      	ldr	r0, [pc, #188]	; (97c <_usb_d_cb_trans_done+0x144>)
     8be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     8c2:	7840      	ldrb	r0, [r0, #1]
     8c4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     8c8:	2101      	movs	r1, #1
     8ca:	4b2d      	ldr	r3, [pc, #180]	; (980 <_usb_d_cb_trans_done+0x148>)
     8cc:	4798      	blx	r3
     8ce:	e7d1      	b.n	874 <_usb_d_cb_trans_done+0x3c>
     8d0:	7858      	ldrb	r0, [r3, #1]
     8d2:	e7f9      	b.n	8c8 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     8d4:	4829      	ldr	r0, [pc, #164]	; (97c <_usb_d_cb_trans_done+0x144>)
     8d6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     8da:	2304      	movs	r3, #4
     8dc:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     8de:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     8e0:	2200      	movs	r2, #0
     8e2:	9201      	str	r2, [sp, #4]
     8e4:	9202      	str	r2, [sp, #8]
     8e6:	4295      	cmp	r5, r2
     8e8:	bfac      	ite	ge
     8ea:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     8ee:	f003 030f 	andlt.w	r3, r3, #15
     8f2:	f88d 300c 	strb.w	r3, [sp, #12]
     8f6:	2301      	movs	r3, #1
     8f8:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     8fc:	a801      	add	r0, sp, #4
     8fe:	4b21      	ldr	r3, [pc, #132]	; (984 <_usb_d_cb_trans_done+0x14c>)
     900:	4798      	blx	r3
     902:	e7b7      	b.n	874 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     904:	2d01      	cmp	r5, #1
     906:	d00a      	beq.n	91e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     908:	2d02      	cmp	r5, #2
     90a:	d01c      	beq.n	946 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     90c:	2d03      	cmp	r5, #3
     90e:	d02a      	beq.n	966 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     910:	4b1a      	ldr	r3, [pc, #104]	; (97c <_usb_d_cb_trans_done+0x144>)
     912:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     916:	2206      	movs	r2, #6
     918:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     91a:	70da      	strb	r2, [r3, #3]
     91c:	e7a2      	b.n	864 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     91e:	4a17      	ldr	r2, [pc, #92]	; (97c <_usb_d_cb_trans_done+0x144>)
     920:	0143      	lsls	r3, r0, #5
     922:	18d1      	adds	r1, r2, r3
     924:	2002      	movs	r0, #2
     926:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     928:	5cd3      	ldrb	r3, [r2, r3]
     92a:	b12b      	cbz	r3, 938 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     92c:	4b13      	ldr	r3, [pc, #76]	; (97c <_usb_d_cb_trans_done+0x144>)
     92e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     932:	2205      	movs	r2, #5
     934:	709a      	strb	r2, [r3, #2]
     936:	e795      	b.n	864 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     938:	460b      	mov	r3, r1
     93a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     93c:	2100      	movs	r1, #0
     93e:	4630      	mov	r0, r6
     940:	4b0f      	ldr	r3, [pc, #60]	; (980 <_usb_d_cb_trans_done+0x148>)
     942:	4798      	blx	r3
     944:	e78e      	b.n	864 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     946:	4a0d      	ldr	r2, [pc, #52]	; (97c <_usb_d_cb_trans_done+0x144>)
     948:	0143      	lsls	r3, r0, #5
     94a:	18d1      	adds	r1, r2, r3
     94c:	2004      	movs	r0, #4
     94e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     950:	5cd3      	ldrb	r3, [r2, r3]
     952:	b12b      	cbz	r3, 960 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     954:	4b09      	ldr	r3, [pc, #36]	; (97c <_usb_d_cb_trans_done+0x144>)
     956:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     95a:	2201      	movs	r2, #1
     95c:	709a      	strb	r2, [r3, #2]
     95e:	e781      	b.n	864 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     960:	2302      	movs	r3, #2
     962:	708b      	strb	r3, [r1, #2]
			return;
     964:	e786      	b.n	874 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     966:	4b05      	ldr	r3, [pc, #20]	; (97c <_usb_d_cb_trans_done+0x144>)
     968:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     96c:	2200      	movs	r2, #0
     96e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     970:	2205      	movs	r2, #5
     972:	70da      	strb	r2, [r3, #3]
     974:	e776      	b.n	864 <_usb_d_cb_trans_done+0x2c>
     976:	bf00      	nop
     978:	000007bd 	.word	0x000007bd
     97c:	20000084 	.word	0x20000084
     980:	000021e5 	.word	0x000021e5
     984:	0000238d 	.word	0x0000238d

00000988 <usb_d_cb_trans_setup>:
{
     988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     98c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     98e:	4b1c      	ldr	r3, [pc, #112]	; (a00 <usb_d_cb_trans_setup+0x78>)
     990:	4798      	blx	r3
     992:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     994:	4c1b      	ldr	r4, [pc, #108]	; (a04 <usb_d_cb_trans_setup+0x7c>)
     996:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     99a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     99c:	4621      	mov	r1, r4
     99e:	4628      	mov	r0, r5
     9a0:	4b19      	ldr	r3, [pc, #100]	; (a08 <usb_d_cb_trans_setup+0x80>)
     9a2:	4798      	blx	r3
	if (n != 8) {
     9a4:	b2c0      	uxtb	r0, r0
     9a6:	2808      	cmp	r0, #8
     9a8:	d009      	beq.n	9be <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     9aa:	2101      	movs	r1, #1
     9ac:	4628      	mov	r0, r5
     9ae:	4c17      	ldr	r4, [pc, #92]	; (a0c <usb_d_cb_trans_setup+0x84>)
     9b0:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     9b2:	2101      	movs	r1, #1
     9b4:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     9b8:	47a0      	blx	r4
		return;
     9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     9be:	2100      	movs	r1, #0
     9c0:	4628      	mov	r0, r5
     9c2:	4f12      	ldr	r7, [pc, #72]	; (a0c <usb_d_cb_trans_setup+0x84>)
     9c4:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     9c6:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     9ca:	2100      	movs	r1, #0
     9cc:	4640      	mov	r0, r8
     9ce:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     9d0:	4b0c      	ldr	r3, [pc, #48]	; (a04 <usb_d_cb_trans_setup+0x7c>)
     9d2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     9d6:	2201      	movs	r2, #1
     9d8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     9da:	695b      	ldr	r3, [r3, #20]
     9dc:	4621      	mov	r1, r4
     9de:	4628      	mov	r0, r5
     9e0:	4798      	blx	r3
     9e2:	b108      	cbz	r0, 9e8 <usb_d_cb_trans_setup+0x60>
     9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     9e8:	4b06      	ldr	r3, [pc, #24]	; (a04 <usb_d_cb_trans_setup+0x7c>)
     9ea:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     9ee:	2305      	movs	r3, #5
     9f0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     9f2:	2101      	movs	r1, #1
     9f4:	4628      	mov	r0, r5
     9f6:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     9f8:	2101      	movs	r1, #1
     9fa:	4640      	mov	r0, r8
     9fc:	47b8      	blx	r7
     9fe:	e7f1      	b.n	9e4 <usb_d_cb_trans_setup+0x5c>
     a00:	000007bd 	.word	0x000007bd
     a04:	20000084 	.word	0x20000084
     a08:	0000232d 	.word	0x0000232d
     a0c:	000021e5 	.word	0x000021e5

00000a10 <usb_d_init>:

int32_t usb_d_init(void)
{
     a10:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     a12:	4b11      	ldr	r3, [pc, #68]	; (a58 <usb_d_init+0x48>)
     a14:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     a16:	2800      	cmp	r0, #0
     a18:	db1c      	blt.n	a54 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     a1a:	4c10      	ldr	r4, [pc, #64]	; (a5c <usb_d_init+0x4c>)
     a1c:	2280      	movs	r2, #128	; 0x80
     a1e:	2100      	movs	r1, #0
     a20:	4620      	mov	r0, r4
     a22:	4b0f      	ldr	r3, [pc, #60]	; (a60 <usb_d_init+0x50>)
     a24:	4798      	blx	r3
     a26:	4623      	mov	r3, r4
     a28:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     a2c:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     a2e:	4a0d      	ldr	r2, [pc, #52]	; (a64 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     a30:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     a32:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     a34:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     a36:	61da      	str	r2, [r3, #28]
     a38:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a3a:	4283      	cmp	r3, r0
     a3c:	d1f8      	bne.n	a30 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     a3e:	490a      	ldr	r1, [pc, #40]	; (a68 <usb_d_init+0x58>)
     a40:	2000      	movs	r0, #0
     a42:	4c0a      	ldr	r4, [pc, #40]	; (a6c <usb_d_init+0x5c>)
     a44:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     a46:	490a      	ldr	r1, [pc, #40]	; (a70 <usb_d_init+0x60>)
     a48:	2001      	movs	r0, #1
     a4a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     a4c:	4909      	ldr	r1, [pc, #36]	; (a74 <usb_d_init+0x64>)
     a4e:	2002      	movs	r0, #2
     a50:	47a0      	blx	r4
	return ERR_NONE;
     a52:	2000      	movs	r0, #0
}
     a54:	bd10      	pop	{r4, pc}
     a56:	bf00      	nop
     a58:	00001bd9 	.word	0x00001bd9
     a5c:	20000084 	.word	0x20000084
     a60:	00003147 	.word	0x00003147
     a64:	00000801 	.word	0x00000801
     a68:	00000989 	.word	0x00000989
     a6c:	00002591 	.word	0x00002591
     a70:	00000805 	.word	0x00000805
     a74:	00000839 	.word	0x00000839

00000a78 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     a78:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     a7a:	4b01      	ldr	r3, [pc, #4]	; (a80 <usb_d_register_callback+0x8>)
     a7c:	4798      	blx	r3
     a7e:	bd08      	pop	{r3, pc}
     a80:	0000256d 	.word	0x0000256d

00000a84 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     a84:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     a86:	4b01      	ldr	r3, [pc, #4]	; (a8c <usb_d_enable+0x8>)
     a88:	4798      	blx	r3
}
     a8a:	bd08      	pop	{r3, pc}
     a8c:	00001cd5 	.word	0x00001cd5

00000a90 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     a90:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     a92:	4b01      	ldr	r3, [pc, #4]	; (a98 <usb_d_attach+0x8>)
     a94:	4798      	blx	r3
     a96:	bd08      	pop	{r3, pc}
     a98:	00001d41 	.word	0x00001d41

00000a9c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     a9c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     a9e:	4b01      	ldr	r3, [pc, #4]	; (aa4 <usb_d_set_address+0x8>)
     aa0:	4798      	blx	r3
     aa2:	bd08      	pop	{r3, pc}
     aa4:	00001d53 	.word	0x00001d53

00000aa8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aaa:	4606      	mov	r6, r0
     aac:	460c      	mov	r4, r1
     aae:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     ab0:	4b0f      	ldr	r3, [pc, #60]	; (af0 <usb_d_ep_init+0x48>)
     ab2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     ab4:	2800      	cmp	r0, #0
     ab6:	da14      	bge.n	ae2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     ab8:	20ff      	movs	r0, #255	; 0xff
     aba:	4b0d      	ldr	r3, [pc, #52]	; (af0 <usb_d_ep_init+0x48>)
     abc:	4798      	blx	r3
		if (ep_index < 0) {
     abe:	1e05      	subs	r5, r0, #0
     ac0:	db12      	blt.n	ae8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     ac2:	463a      	mov	r2, r7
     ac4:	4621      	mov	r1, r4
     ac6:	4630      	mov	r0, r6
     ac8:	4b0a      	ldr	r3, [pc, #40]	; (af4 <usb_d_ep_init+0x4c>)
     aca:	4798      	blx	r3
	if (rc < 0) {
     acc:	2800      	cmp	r0, #0
     ace:	db0d      	blt.n	aec <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     ad0:	4b09      	ldr	r3, [pc, #36]	; (af8 <usb_d_ep_init+0x50>)
     ad2:	0168      	lsls	r0, r5, #5
     ad4:	181a      	adds	r2, r3, r0
     ad6:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     ad8:	f004 0403 	and.w	r4, r4, #3
     adc:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     ade:	2000      	movs	r0, #0
     ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     ae2:	f06f 0013 	mvn.w	r0, #19
     ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     ae8:	f06f 0014 	mvn.w	r0, #20
}
     aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aee:	bf00      	nop
     af0:	000007bd 	.word	0x000007bd
     af4:	00001d61 	.word	0x00001d61
     af8:	20000084 	.word	0x20000084

00000afc <usb_d_ep0_init>:
{
     afc:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     afe:	4602      	mov	r2, r0
     b00:	2100      	movs	r1, #0
     b02:	4608      	mov	r0, r1
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <usb_d_ep0_init+0x10>)
     b06:	4798      	blx	r3
}
     b08:	bd08      	pop	{r3, pc}
     b0a:	bf00      	nop
     b0c:	00000aa9 	.word	0x00000aa9

00000b10 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     b10:	b538      	push	{r3, r4, r5, lr}
     b12:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <usb_d_ep_deinit+0x20>)
     b16:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     b18:	1e04      	subs	r4, r0, #0
     b1a:	db07      	blt.n	b2c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     b1c:	4628      	mov	r0, r5
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <usb_d_ep_deinit+0x24>)
     b20:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     b22:	4805      	ldr	r0, [pc, #20]	; (b38 <usb_d_ep_deinit+0x28>)
     b24:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     b28:	23ff      	movs	r3, #255	; 0xff
     b2a:	7043      	strb	r3, [r0, #1]
     b2c:	bd38      	pop	{r3, r4, r5, pc}
     b2e:	bf00      	nop
     b30:	000007bd 	.word	0x000007bd
     b34:	00001e79 	.word	0x00001e79
     b38:	20000084 	.word	0x20000084

00000b3c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     b3c:	b538      	push	{r3, r4, r5, lr}
     b3e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     b40:	4b0e      	ldr	r3, [pc, #56]	; (b7c <usb_d_ep_enable+0x40>)
     b42:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     b44:	1e04      	subs	r4, r0, #0
     b46:	db16      	blt.n	b76 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     b48:	0163      	lsls	r3, r4, #5
     b4a:	4a0d      	ldr	r2, [pc, #52]	; (b80 <usb_d_ep_enable+0x44>)
     b4c:	5cd3      	ldrb	r3, [r2, r3]
     b4e:	2b00      	cmp	r3, #0
     b50:	bf0c      	ite	eq
     b52:	2202      	moveq	r2, #2
     b54:	2201      	movne	r2, #1
     b56:	4b0a      	ldr	r3, [pc, #40]	; (b80 <usb_d_ep_enable+0x44>)
     b58:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b5c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     b5e:	4628      	mov	r0, r5
     b60:	4b08      	ldr	r3, [pc, #32]	; (b84 <usb_d_ep_enable+0x48>)
     b62:	4798      	blx	r3
	if (rc < 0) {
     b64:	2800      	cmp	r0, #0
     b66:	db00      	blt.n	b6a <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     b68:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <usb_d_ep_enable+0x44>)
     b6c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     b70:	2300      	movs	r3, #0
     b72:	70a3      	strb	r3, [r4, #2]
     b74:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     b76:	f06f 0011 	mvn.w	r0, #17
     b7a:	e7f5      	b.n	b68 <usb_d_ep_enable+0x2c>
     b7c:	000007bd 	.word	0x000007bd
     b80:	20000084 	.word	0x20000084
     b84:	00001f3d 	.word	0x00001f3d

00000b88 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b8c:	b086      	sub	sp, #24
     b8e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     b90:	7a07      	ldrb	r7, [r0, #8]
     b92:	4638      	mov	r0, r7
     b94:	4b3f      	ldr	r3, [pc, #252]	; (c94 <usb_d_ep_transfer+0x10c>)
     b96:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     b98:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     b9a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     b9e:	1e06      	subs	r6, r0, #0
     ba0:	db72      	blt.n	c88 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     ba2:	a804      	add	r0, sp, #16
     ba4:	4b3c      	ldr	r3, [pc, #240]	; (c98 <usb_d_ep_transfer+0x110>)
     ba6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     ba8:	4b3c      	ldr	r3, [pc, #240]	; (c9c <usb_d_ep_transfer+0x114>)
     baa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     bae:	789b      	ldrb	r3, [r3, #2]
     bb0:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     bb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
     bb8:	b2db      	uxtb	r3, r3
     bba:	2b01      	cmp	r3, #1
     bbc:	d011      	beq.n	be2 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     bbe:	a804      	add	r0, sp, #16
     bc0:	4b37      	ldr	r3, [pc, #220]	; (ca0 <usb_d_ep_transfer+0x118>)
     bc2:	4798      	blx	r3
		switch (state) {
     bc4:	f89d 3017 	ldrb.w	r3, [sp, #23]
     bc8:	b2db      	uxtb	r3, r3
     bca:	2b05      	cmp	r3, #5
     bcc:	d05f      	beq.n	c8e <usb_d_ep_transfer+0x106>
     bce:	2b06      	cmp	r3, #6
     bd0:	d023      	beq.n	c1a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     bd2:	2b00      	cmp	r3, #0
     bd4:	bf0c      	ite	eq
     bd6:	f06f 0012 	mvneq.w	r0, #18
     bda:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     bdc:	b006      	add	sp, #24
     bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     be2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; c9c <usb_d_ep_transfer+0x114>
     be6:	ea4f 1946 	mov.w	r9, r6, lsl #5
     bea:	eb0a 0309 	add.w	r3, sl, r9
     bee:	2203      	movs	r2, #3
     bf0:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     bf2:	a804      	add	r0, sp, #16
     bf4:	4b2a      	ldr	r3, [pc, #168]	; (ca0 <usb_d_ep_transfer+0x118>)
     bf6:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     bf8:	f81a 3009 	ldrb.w	r3, [sl, r9]
     bfc:	b183      	cbz	r3, c20 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     bfe:	7a22      	ldrb	r2, [r4, #8]
     c00:	3500      	adds	r5, #0
     c02:	bf18      	it	ne
     c04:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     c06:	6823      	ldr	r3, [r4, #0]
     c08:	9301      	str	r3, [sp, #4]
     c0a:	f8cd 8008 	str.w	r8, [sp, #8]
     c0e:	f017 0f80 	tst.w	r7, #128	; 0x80
     c12:	d119      	bne.n	c48 <usb_d_ep_transfer+0xc0>
     c14:	f002 030f 	and.w	r3, r2, #15
     c18:	e018      	b.n	c4c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     c1a:	f06f 000f 	mvn.w	r0, #15
     c1e:	e7dd      	b.n	bdc <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     c20:	4b1e      	ldr	r3, [pc, #120]	; (c9c <usb_d_ep_transfer+0x114>)
     c22:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     c26:	7cda      	ldrb	r2, [r3, #19]
     c28:	7c9d      	ldrb	r5, [r3, #18]
     c2a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     c2e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     c30:	b9a5      	cbnz	r5, c5c <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     c32:	4b1a      	ldr	r3, [pc, #104]	; (c9c <usb_d_ep_transfer+0x114>)
     c34:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     c38:	2304      	movs	r3, #4
     c3a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     c3c:	2300      	movs	r3, #0
			zlp                 = true;
     c3e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     c40:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     c42:	6821      	ldr	r1, [r4, #0]
     c44:	9101      	str	r1, [sp, #4]
     c46:	9302      	str	r3, [sp, #8]
     c48:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     c4c:	f88d 300c 	strb.w	r3, [sp, #12]
     c50:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     c54:	a801      	add	r0, sp, #4
     c56:	4b13      	ldr	r3, [pc, #76]	; (ca4 <usb_d_ep_transfer+0x11c>)
     c58:	4798      	blx	r3
	return rc;
     c5a:	e7bf      	b.n	bdc <usb_d_ep_transfer+0x54>
     c5c:	4643      	mov	r3, r8
     c5e:	45a8      	cmp	r8, r5
     c60:	bf28      	it	cs
     c62:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     c64:	4a0d      	ldr	r2, [pc, #52]	; (c9c <usb_d_ep_transfer+0x114>)
     c66:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     c6a:	f996 200c 	ldrsb.w	r2, [r6, #12]
     c6e:	2a00      	cmp	r2, #0
     c70:	db05      	blt.n	c7e <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     c72:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     c74:	6821      	ldr	r1, [r4, #0]
     c76:	9101      	str	r1, [sp, #4]
     c78:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     c7a:	2500      	movs	r5, #0
     c7c:	e7ca      	b.n	c14 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     c7e:	429d      	cmp	r5, r3
     c80:	bf94      	ite	ls
     c82:	2500      	movls	r5, #0
     c84:	2501      	movhi	r5, #1
     c86:	e7db      	b.n	c40 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     c88:	f06f 0011 	mvn.w	r0, #17
     c8c:	e7a6      	b.n	bdc <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     c8e:	2002      	movs	r0, #2
     c90:	e7a4      	b.n	bdc <usb_d_ep_transfer+0x54>
     c92:	bf00      	nop
     c94:	000007bd 	.word	0x000007bd
     c98:	0000055d 	.word	0x0000055d
     c9c:	20000084 	.word	0x20000084
     ca0:	0000056b 	.word	0x0000056b
     ca4:	0000238d 	.word	0x0000238d

00000ca8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     ca8:	b538      	push	{r3, r4, r5, lr}
     caa:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     cac:	b141      	cbz	r1, cc0 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     cae:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     cb0:	bf0c      	ite	eq
     cb2:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     cb4:	2102      	movne	r1, #2
     cb6:	4b13      	ldr	r3, [pc, #76]	; (d04 <usb_d_ep_halt+0x5c>)
     cb8:	4798      	blx	r3
     cba:	4603      	mov	r3, r0
	}
}
     cbc:	4618      	mov	r0, r3
     cbe:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     cc0:	4b11      	ldr	r3, [pc, #68]	; (d08 <usb_d_ep_halt+0x60>)
     cc2:	4798      	blx	r3
	if (ep_index < 0) {
     cc4:	1e05      	subs	r5, r0, #0
     cc6:	db19      	blt.n	cfc <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     cc8:	2102      	movs	r1, #2
     cca:	4620      	mov	r0, r4
     ccc:	4b0d      	ldr	r3, [pc, #52]	; (d04 <usb_d_ep_halt+0x5c>)
     cce:	4798      	blx	r3
     cd0:	4603      	mov	r3, r0
     cd2:	2800      	cmp	r0, #0
     cd4:	d0f2      	beq.n	cbc <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     cd6:	2100      	movs	r1, #0
     cd8:	4620      	mov	r0, r4
     cda:	4b0a      	ldr	r3, [pc, #40]	; (d04 <usb_d_ep_halt+0x5c>)
     cdc:	4798      	blx	r3
		if (rc < 0) {
     cde:	1e03      	subs	r3, r0, #0
     ce0:	dbec      	blt.n	cbc <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     ce2:	4b0a      	ldr	r3, [pc, #40]	; (d0c <usb_d_ep_halt+0x64>)
     ce4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     ce8:	2201      	movs	r2, #1
     cea:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     cec:	2103      	movs	r1, #3
     cee:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     cf0:	69db      	ldr	r3, [r3, #28]
     cf2:	2200      	movs	r2, #0
     cf4:	4620      	mov	r0, r4
     cf6:	4798      	blx	r3
	return ERR_NONE;
     cf8:	2300      	movs	r3, #0
     cfa:	e7df      	b.n	cbc <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     cfc:	f06f 0311 	mvn.w	r3, #17
     d00:	e7dc      	b.n	cbc <usb_d_ep_halt+0x14>
     d02:	bf00      	nop
     d04:	000021e5 	.word	0x000021e5
     d08:	000007bd 	.word	0x000007bd
     d0c:	20000084 	.word	0x20000084

00000d10 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     d10:	b538      	push	{r3, r4, r5, lr}
     d12:	460d      	mov	r5, r1
     d14:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     d16:	4b0e      	ldr	r3, [pc, #56]	; (d50 <usb_d_ep_register_callback+0x40>)
     d18:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     d1a:	4b0e      	ldr	r3, [pc, #56]	; (d54 <usb_d_ep_register_callback+0x44>)
     d1c:	2c00      	cmp	r4, #0
     d1e:	bf08      	it	eq
     d20:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     d22:	2800      	cmp	r0, #0
     d24:	db13      	blt.n	d4e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     d26:	2d01      	cmp	r5, #1
     d28:	d008      	beq.n	d3c <usb_d_ep_register_callback+0x2c>
     d2a:	b115      	cbz	r5, d32 <usb_d_ep_register_callback+0x22>
     d2c:	2d02      	cmp	r5, #2
     d2e:	d00a      	beq.n	d46 <usb_d_ep_register_callback+0x36>
     d30:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     d32:	4b09      	ldr	r3, [pc, #36]	; (d58 <usb_d_ep_register_callback+0x48>)
     d34:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     d38:	6144      	str	r4, [r0, #20]
		break;
     d3a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     d3c:	4b06      	ldr	r3, [pc, #24]	; (d58 <usb_d_ep_register_callback+0x48>)
     d3e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     d42:	6184      	str	r4, [r0, #24]
		break;
     d44:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     d46:	4b04      	ldr	r3, [pc, #16]	; (d58 <usb_d_ep_register_callback+0x48>)
     d48:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     d4c:	61c4      	str	r4, [r0, #28]
     d4e:	bd38      	pop	{r3, r4, r5, pc}
     d50:	000007bd 	.word	0x000007bd
     d54:	00000801 	.word	0x00000801
     d58:	20000084 	.word	0x20000084

00000d5c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     d5c:	b900      	cbnz	r0, d60 <assert+0x4>
		__asm("BKPT #0");
     d5e:	be00      	bkpt	0x0000
     d60:	4770      	bx	lr

00000d62 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     d62:	6803      	ldr	r3, [r0, #0]
     d64:	b14b      	cbz	r3, d7a <is_list_element+0x18>
		if (it == element) {
     d66:	428b      	cmp	r3, r1
     d68:	d009      	beq.n	d7e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	b11b      	cbz	r3, d76 <is_list_element+0x14>
		if (it == element) {
     d6e:	4299      	cmp	r1, r3
     d70:	d1fb      	bne.n	d6a <is_list_element+0x8>
			return true;
     d72:	2001      	movs	r0, #1
		}
	}

	return false;
}
     d74:	4770      	bx	lr
	return false;
     d76:	2000      	movs	r0, #0
     d78:	4770      	bx	lr
     d7a:	2000      	movs	r0, #0
     d7c:	4770      	bx	lr
			return true;
     d7e:	2001      	movs	r0, #1
     d80:	4770      	bx	lr
	...

00000d84 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     d84:	b570      	push	{r4, r5, r6, lr}
     d86:	4605      	mov	r5, r0
     d88:	460e      	mov	r6, r1
	struct list_element *it = list->head;
     d8a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     d8c:	4b0a      	ldr	r3, [pc, #40]	; (db8 <list_insert_at_end+0x34>)
     d8e:	4798      	blx	r3
     d90:	f080 0001 	eor.w	r0, r0, #1
     d94:	224f      	movs	r2, #79	; 0x4f
     d96:	4909      	ldr	r1, [pc, #36]	; (dbc <list_insert_at_end+0x38>)
     d98:	b2c0      	uxtb	r0, r0
     d9a:	4b09      	ldr	r3, [pc, #36]	; (dc0 <list_insert_at_end+0x3c>)
     d9c:	4798      	blx	r3

	if (!list->head) {
     d9e:	682b      	ldr	r3, [r5, #0]
     da0:	b91b      	cbnz	r3, daa <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
     da2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     da4:	6033      	str	r3, [r6, #0]
		return;
     da6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
     da8:	461c      	mov	r4, r3
	while (it->next) {
     daa:	6823      	ldr	r3, [r4, #0]
     dac:	2b00      	cmp	r3, #0
     dae:	d1fb      	bne.n	da8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
     db0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     db2:	6033      	str	r3, [r6, #0]
     db4:	bd70      	pop	{r4, r5, r6, pc}
     db6:	bf00      	nop
     db8:	00000d63 	.word	0x00000d63
     dbc:	00003178 	.word	0x00003178
     dc0:	00000d5d 	.word	0x00000d5d

00000dc4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     dc4:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     dc6:	4a08      	ldr	r2, [pc, #32]	; (de8 <_init_chip+0x24>)
     dc8:	8813      	ldrh	r3, [r2, #0]
     dca:	b29b      	uxth	r3, r3
     dcc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <_init_chip+0x28>)
     dd0:	4798      	blx	r3
	_oscctrl_init_sources();
     dd2:	4b07      	ldr	r3, [pc, #28]	; (df0 <_init_chip+0x2c>)
     dd4:	4798      	blx	r3
	_mclk_init();
     dd6:	4b07      	ldr	r3, [pc, #28]	; (df4 <_init_chip+0x30>)
     dd8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     dda:	4b07      	ldr	r3, [pc, #28]	; (df8 <_init_chip+0x34>)
     ddc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     dde:	f640 70ff 	movw	r0, #4095	; 0xfff
     de2:	4b06      	ldr	r3, [pc, #24]	; (dfc <_init_chip+0x38>)
     de4:	4798      	blx	r3
     de6:	bd08      	pop	{r3, pc}
     de8:	41004000 	.word	0x41004000
     dec:	00000e69 	.word	0x00000e69
     df0:	00000e89 	.word	0x00000e89
     df4:	00000e5d 	.word	0x00000e5d
     df8:	00000ea5 	.word	0x00000ea5
     dfc:	00000e01 	.word	0x00000e01

00000e00 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e00:	f010 0f01 	tst.w	r0, #1
     e04:	d008      	beq.n	e18 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e06:	4a11      	ldr	r2, [pc, #68]	; (e4c <_gclk_init_generators_by_fref+0x4c>)
     e08:	4b11      	ldr	r3, [pc, #68]	; (e50 <_gclk_init_generators_by_fref+0x50>)
     e0a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e0c:	4619      	mov	r1, r3
     e0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e12:	684b      	ldr	r3, [r1, #4]
     e14:	4213      	tst	r3, r2
     e16:	d1fc      	bne.n	e12 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e18:	f010 0f08 	tst.w	r0, #8
     e1c:	d008      	beq.n	e30 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e1e:	4a0d      	ldr	r2, [pc, #52]	; (e54 <_gclk_init_generators_by_fref+0x54>)
     e20:	4b0b      	ldr	r3, [pc, #44]	; (e50 <_gclk_init_generators_by_fref+0x50>)
     e22:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e24:	4619      	mov	r1, r3
     e26:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e2a:	684b      	ldr	r3, [r1, #4]
     e2c:	4213      	tst	r3, r2
     e2e:	d1fc      	bne.n	e2a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     e30:	f010 0f10 	tst.w	r0, #16
     e34:	d008      	beq.n	e48 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e36:	4a08      	ldr	r2, [pc, #32]	; (e58 <_gclk_init_generators_by_fref+0x58>)
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <_gclk_init_generators_by_fref+0x50>)
     e3a:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e3c:	4619      	mov	r1, r3
     e3e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e42:	684b      	ldr	r3, [r1, #4]
     e44:	4213      	tst	r3, r2
     e46:	d1fc      	bne.n	e42 <_gclk_init_generators_by_fref+0x42>
     e48:	4770      	bx	lr
     e4a:	bf00      	nop
     e4c:	00010101 	.word	0x00010101
     e50:	40001c00 	.word	0x40001c00
     e54:	00010905 	.word	0x00010905
     e58:	00010906 	.word	0x00010906

00000e5c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     e5c:	2201      	movs	r2, #1
     e5e:	4b01      	ldr	r3, [pc, #4]	; (e64 <_mclk_init+0x8>)
     e60:	715a      	strb	r2, [r3, #5]
     e62:	4770      	bx	lr
     e64:	40000800 	.word	0x40000800

00000e68 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     e68:	4b06      	ldr	r3, [pc, #24]	; (e84 <_osc32kctrl_init_sources+0x1c>)
     e6a:	f242 0286 	movw	r2, #8326	; 0x2086
     e6e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     e70:	2200      	movs	r2, #0
     e72:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     e74:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     e76:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     e78:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     e7c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     e7e:	2201      	movs	r2, #1
     e80:	741a      	strb	r2, [r3, #16]
     e82:	4770      	bx	lr
     e84:	40001400 	.word	0x40001400

00000e88 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     e88:	4a04      	ldr	r2, [pc, #16]	; (e9c <_oscctrl_init_sources+0x14>)
     e8a:	4b05      	ldr	r3, [pc, #20]	; (ea0 <_oscctrl_init_sources+0x18>)
     e8c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     e8e:	461a      	mov	r2, r3
     e90:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     e92:	f013 0f02 	tst.w	r3, #2
     e96:	d0fb      	beq.n	e90 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     e98:	4770      	bx	lr
     e9a:	bf00      	nop
     e9c:	03002606 	.word	0x03002606
     ea0:	40001000 	.word	0x40001000

00000ea4 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     ea4:	4a36      	ldr	r2, [pc, #216]	; (f80 <_oscctrl_init_referenced_generators+0xdc>)
     ea6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     ea8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     eac:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     eb0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     eb2:	4611      	mov	r1, r2
     eb4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     eb8:	684b      	ldr	r3, [r1, #4]
     eba:	4213      	tst	r3, r2
     ebc:	d1fc      	bne.n	eb8 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     ebe:	4a30      	ldr	r2, [pc, #192]	; (f80 <_oscctrl_init_referenced_generators+0xdc>)
     ec0:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     ec2:	f013 0f04 	tst.w	r3, #4
     ec6:	d1fb      	bne.n	ec0 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     ec8:	4b2e      	ldr	r3, [pc, #184]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     eca:	2200      	movs	r2, #0
     ecc:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     ece:	4a2e      	ldr	r2, [pc, #184]	; (f88 <_oscctrl_init_referenced_generators+0xe4>)
     ed0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     ed2:	461a      	mov	r2, r3
     ed4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     ed8:	f013 0f10 	tst.w	r3, #16
     edc:	d1fa      	bne.n	ed4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     ede:	2200      	movs	r2, #0
     ee0:	4b28      	ldr	r3, [pc, #160]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     ee2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     ee6:	461a      	mov	r2, r3
     ee8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     eec:	f013 0f04 	tst.w	r3, #4
     ef0:	d1fa      	bne.n	ee8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     ef2:	2202      	movs	r2, #2
     ef4:	4b23      	ldr	r3, [pc, #140]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     ef6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     ef8:	461a      	mov	r2, r3
     efa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     efe:	f013 0f02 	tst.w	r3, #2
     f02:	d1fa      	bne.n	efa <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     f04:	4b1f      	ldr	r3, [pc, #124]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     f08:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f0a:	461a      	mov	r2, r3
     f0c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     f10:	f013 0f08 	tst.w	r3, #8
     f14:	d1fa      	bne.n	f0c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     f16:	2219      	movs	r2, #25
     f18:	4b1a      	ldr	r3, [pc, #104]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     f1a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f1e:	461a      	mov	r2, r3
     f20:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     f24:	f013 0f04 	tst.w	r3, #4
     f28:	d1fa      	bne.n	f20 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     f2a:	4b16      	ldr	r3, [pc, #88]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     f30:	f013 0f01 	tst.w	r3, #1
     f34:	d01d      	beq.n	f72 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     f36:	4a13      	ldr	r2, [pc, #76]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     f38:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     f3a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     f3e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     f42:	d1f9      	bne.n	f38 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     f44:	4a0e      	ldr	r2, [pc, #56]	; (f80 <_oscctrl_init_referenced_generators+0xdc>)
     f46:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     f48:	2b00      	cmp	r3, #0
     f4a:	d1fc      	bne.n	f46 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     f4c:	4a0c      	ldr	r2, [pc, #48]	; (f80 <_oscctrl_init_referenced_generators+0xdc>)
     f4e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     f50:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     f54:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     f58:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f5a:	4611      	mov	r1, r2
     f5c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f60:	684b      	ldr	r3, [r1, #4]
     f62:	4213      	tst	r3, r2
     f64:	d1fc      	bne.n	f60 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     f66:	4a06      	ldr	r2, [pc, #24]	; (f80 <_oscctrl_init_referenced_generators+0xdc>)
     f68:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     f6a:	f013 0f04 	tst.w	r3, #4
     f6e:	d1fb      	bne.n	f68 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     f70:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     f72:	4a04      	ldr	r2, [pc, #16]	; (f84 <_oscctrl_init_referenced_generators+0xe0>)
     f74:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     f76:	f413 7f80 	tst.w	r3, #256	; 0x100
     f7a:	d0fb      	beq.n	f74 <_oscctrl_init_referenced_generators+0xd0>
     f7c:	e7e2      	b.n	f44 <_oscctrl_init_referenced_generators+0xa0>
     f7e:	bf00      	nop
     f80:	40001c00 	.word	0x40001c00
     f84:	40001000 	.word	0x40001000
     f88:	0401bb80 	.word	0x0401bb80

00000f8c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     f8c:	b500      	push	{lr}
     f8e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     f90:	4b0d      	ldr	r3, [pc, #52]	; (fc8 <RAMECC_Handler+0x3c>)
     f92:	789b      	ldrb	r3, [r3, #2]
     f94:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     f96:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	f013 0f02 	tst.w	r3, #2
     f9e:	d006      	beq.n	fae <RAMECC_Handler+0x22>
     fa0:	4b0a      	ldr	r3, [pc, #40]	; (fcc <RAMECC_Handler+0x40>)
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	b11b      	cbz	r3, fae <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     fa6:	4a08      	ldr	r2, [pc, #32]	; (fc8 <RAMECC_Handler+0x3c>)
     fa8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     faa:	4798      	blx	r3
     fac:	e009      	b.n	fc2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     fae:	9b01      	ldr	r3, [sp, #4]
     fb0:	f013 0f01 	tst.w	r3, #1
     fb4:	d005      	beq.n	fc2 <RAMECC_Handler+0x36>
     fb6:	4b05      	ldr	r3, [pc, #20]	; (fcc <RAMECC_Handler+0x40>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	b113      	cbz	r3, fc2 <RAMECC_Handler+0x36>
     fbc:	4a02      	ldr	r2, [pc, #8]	; (fc8 <RAMECC_Handler+0x3c>)
     fbe:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     fc0:	4798      	blx	r3
	} else {
		return;
	}
}
     fc2:	b003      	add	sp, #12
     fc4:	f85d fb04 	ldr.w	pc, [sp], #4
     fc8:	41020000 	.word	0x41020000
     fcc:	200003fc 	.word	0x200003fc

00000fd0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     fd0:	b470      	push	{r4, r5, r6}
     fd2:	b089      	sub	sp, #36	; 0x24
     fd4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     fd6:	466c      	mov	r4, sp
     fd8:	4d0d      	ldr	r5, [pc, #52]	; (1010 <_sercom_get_hardware_index+0x40>)
     fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     fde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     fe6:	9b00      	ldr	r3, [sp, #0]
     fe8:	42b3      	cmp	r3, r6
     fea:	d00d      	beq.n	1008 <_sercom_get_hardware_index+0x38>
     fec:	4631      	mov	r1, r6
     fee:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ff0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     ff2:	f853 2b04 	ldr.w	r2, [r3], #4
     ff6:	428a      	cmp	r2, r1
     ff8:	d007      	beq.n	100a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ffa:	3001      	adds	r0, #1
     ffc:	2808      	cmp	r0, #8
     ffe:	d1f8      	bne.n	ff2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1000:	2000      	movs	r0, #0
}
    1002:	b009      	add	sp, #36	; 0x24
    1004:	bc70      	pop	{r4, r5, r6}
    1006:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1008:	2000      	movs	r0, #0
			return i;
    100a:	b2c0      	uxtb	r0, r0
    100c:	e7f9      	b.n	1002 <_sercom_get_hardware_index+0x32>
    100e:	bf00      	nop
    1010:	00003198 	.word	0x00003198

00001014 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1014:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1016:	4b03      	ldr	r3, [pc, #12]	; (1024 <_sercom_get_irq_num+0x10>)
    1018:	4798      	blx	r3
    101a:	0080      	lsls	r0, r0, #2
    101c:	302e      	adds	r0, #46	; 0x2e
}
    101e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1022:	bd08      	pop	{r3, pc}
    1024:	00000fd1 	.word	0x00000fd1

00001028 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1028:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    102a:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    102c:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    102e:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1030:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1032:	f013 0f01 	tst.w	r3, #1
    1036:	d109      	bne.n	104c <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1038:	f013 0f04 	tst.w	r3, #4
    103c:	d109      	bne.n	1052 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    103e:	f013 0f02 	tst.w	r3, #2
    1042:	d109      	bne.n	1058 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1044:	f013 0f80 	tst.w	r3, #128	; 0x80
    1048:	d10b      	bne.n	1062 <_spi_handler+0x3a>
    104a:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    104c:	6883      	ldr	r3, [r0, #8]
    104e:	4798      	blx	r3
    1050:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    1052:	68c3      	ldr	r3, [r0, #12]
    1054:	4798      	blx	r3
    1056:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1058:	2302      	movs	r3, #2
    105a:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    105c:	6903      	ldr	r3, [r0, #16]
    105e:	4798      	blx	r3
    1060:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1062:	2304      	movs	r3, #4
    1064:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1066:	2380      	movs	r3, #128	; 0x80
    1068:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    106a:	6943      	ldr	r3, [r0, #20]
    106c:	f06f 0112 	mvn.w	r1, #18
    1070:	4798      	blx	r3
	}
}
    1072:	e7ea      	b.n	104a <_spi_handler+0x22>

00001074 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    1074:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1076:	4b02      	ldr	r3, [pc, #8]	; (1080 <SERCOM0_0_Handler+0xc>)
    1078:	6818      	ldr	r0, [r3, #0]
    107a:	4b02      	ldr	r3, [pc, #8]	; (1084 <SERCOM0_0_Handler+0x10>)
    107c:	4798      	blx	r3
    107e:	bd08      	pop	{r3, pc}
    1080:	20000104 	.word	0x20000104
    1084:	00001029 	.word	0x00001029

00001088 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    1088:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    108a:	4b02      	ldr	r3, [pc, #8]	; (1094 <SERCOM0_1_Handler+0xc>)
    108c:	6818      	ldr	r0, [r3, #0]
    108e:	4b02      	ldr	r3, [pc, #8]	; (1098 <SERCOM0_1_Handler+0x10>)
    1090:	4798      	blx	r3
    1092:	bd08      	pop	{r3, pc}
    1094:	20000104 	.word	0x20000104
    1098:	00001029 	.word	0x00001029

0000109c <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    109c:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    109e:	4b02      	ldr	r3, [pc, #8]	; (10a8 <SERCOM0_2_Handler+0xc>)
    10a0:	6818      	ldr	r0, [r3, #0]
    10a2:	4b02      	ldr	r3, [pc, #8]	; (10ac <SERCOM0_2_Handler+0x10>)
    10a4:	4798      	blx	r3
    10a6:	bd08      	pop	{r3, pc}
    10a8:	20000104 	.word	0x20000104
    10ac:	00001029 	.word	0x00001029

000010b0 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    10b0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    10b2:	4b02      	ldr	r3, [pc, #8]	; (10bc <SERCOM0_3_Handler+0xc>)
    10b4:	6818      	ldr	r0, [r3, #0]
    10b6:	4b02      	ldr	r3, [pc, #8]	; (10c0 <SERCOM0_3_Handler+0x10>)
    10b8:	4798      	blx	r3
    10ba:	bd08      	pop	{r3, pc}
    10bc:	20000104 	.word	0x20000104
    10c0:	00001029 	.word	0x00001029

000010c4 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    10c4:	b538      	push	{r3, r4, r5, lr}
    10c6:	4605      	mov	r5, r0
    10c8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    10ca:	4608      	mov	r0, r1
    10cc:	4b36      	ldr	r3, [pc, #216]	; (11a8 <_spi_m_sync_init+0xe4>)
    10ce:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    10d0:	b160      	cbz	r0, 10ec <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    10d2:	2d00      	cmp	r5, #0
    10d4:	d055      	beq.n	1182 <_spi_m_sync_init+0xbe>
    10d6:	f640 1273 	movw	r2, #2419	; 0x973
    10da:	4934      	ldr	r1, [pc, #208]	; (11ac <_spi_m_sync_init+0xe8>)
    10dc:	1c20      	adds	r0, r4, #0
    10de:	bf18      	it	ne
    10e0:	2001      	movne	r0, #1
    10e2:	4b33      	ldr	r3, [pc, #204]	; (11b0 <_spi_m_sync_init+0xec>)
    10e4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    10e6:	f06f 000c 	mvn.w	r0, #12
    10ea:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    10ec:	2d00      	cmp	r5, #0
    10ee:	d151      	bne.n	1194 <_spi_m_sync_init+0xd0>
    10f0:	f640 1273 	movw	r2, #2419	; 0x973
    10f4:	492d      	ldr	r1, [pc, #180]	; (11ac <_spi_m_sync_init+0xe8>)
    10f6:	2000      	movs	r0, #0
    10f8:	4b2d      	ldr	r3, [pc, #180]	; (11b0 <_spi_m_sync_init+0xec>)
    10fa:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    10fc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    10fe:	f013 0f01 	tst.w	r3, #1
    1102:	d119      	bne.n	1138 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1104:	69e3      	ldr	r3, [r4, #28]
    1106:	f013 0f03 	tst.w	r3, #3
    110a:	d1fb      	bne.n	1104 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    110c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    110e:	f013 0f02 	tst.w	r3, #2
    1112:	d00b      	beq.n	112c <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1114:	6823      	ldr	r3, [r4, #0]
    1116:	f023 0302 	bic.w	r3, r3, #2
    111a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    111c:	69e3      	ldr	r3, [r4, #28]
    111e:	f013 0f03 	tst.w	r3, #3
    1122:	d1fb      	bne.n	111c <_spi_m_sync_init+0x58>
    1124:	69e3      	ldr	r3, [r4, #28]
    1126:	f013 0f02 	tst.w	r3, #2
    112a:	d1fb      	bne.n	1124 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    112c:	230d      	movs	r3, #13
    112e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1130:	69e3      	ldr	r3, [r4, #28]
    1132:	f013 0f03 	tst.w	r3, #3
    1136:	d1fb      	bne.n	1130 <_spi_m_sync_init+0x6c>
    1138:	69e3      	ldr	r3, [r4, #28]
    113a:	f013 0f01 	tst.w	r3, #1
    113e:	d1fb      	bne.n	1138 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1140:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1142:	f640 1206 	movw	r2, #2310	; 0x906
    1146:	4919      	ldr	r1, [pc, #100]	; (11ac <_spi_m_sync_init+0xe8>)
    1148:	1c20      	adds	r0, r4, #0
    114a:	bf18      	it	ne
    114c:	2001      	movne	r0, #1
    114e:	4b18      	ldr	r3, [pc, #96]	; (11b0 <_spi_m_sync_init+0xec>)
    1150:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1152:	4b18      	ldr	r3, [pc, #96]	; (11b4 <_spi_m_sync_init+0xf0>)
    1154:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1156:	69e3      	ldr	r3, [r4, #28]
    1158:	f013 0f03 	tst.w	r3, #3
    115c:	d1fb      	bne.n	1156 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1162:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1164:	69e3      	ldr	r3, [r4, #28]
    1166:	f013 0f17 	tst.w	r3, #23
    116a:	d1fb      	bne.n	1164 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    116c:	2377      	movs	r3, #119	; 0x77
    116e:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1170:	2000      	movs	r0, #0
    1172:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1176:	2301      	movs	r3, #1
    1178:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    117a:	f240 13ff 	movw	r3, #511	; 0x1ff
    117e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1180:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1182:	f640 1273 	movw	r2, #2419	; 0x973
    1186:	4909      	ldr	r1, [pc, #36]	; (11ac <_spi_m_sync_init+0xe8>)
    1188:	2000      	movs	r0, #0
    118a:	4b09      	ldr	r3, [pc, #36]	; (11b0 <_spi_m_sync_init+0xec>)
    118c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    118e:	f06f 000c 	mvn.w	r0, #12
    1192:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1194:	f640 1273 	movw	r2, #2419	; 0x973
    1198:	4904      	ldr	r1, [pc, #16]	; (11ac <_spi_m_sync_init+0xe8>)
    119a:	1c20      	adds	r0, r4, #0
    119c:	bf18      	it	ne
    119e:	2001      	movne	r0, #1
    11a0:	4b03      	ldr	r3, [pc, #12]	; (11b0 <_spi_m_sync_init+0xec>)
    11a2:	4798      	blx	r3
    11a4:	e7aa      	b.n	10fc <_spi_m_sync_init+0x38>
    11a6:	bf00      	nop
    11a8:	00000fd1 	.word	0x00000fd1
    11ac:	000031d0 	.word	0x000031d0
    11b0:	00000d5d 	.word	0x00000d5d
    11b4:	0020000c 	.word	0x0020000c

000011b8 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    11b8:	b538      	push	{r3, r4, r5, lr}
    11ba:	4604      	mov	r4, r0
    11bc:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    11be:	4b15      	ldr	r3, [pc, #84]	; (1214 <_spi_m_async_init+0x5c>)
    11c0:	4798      	blx	r3

	if (rc < 0) {
    11c2:	2800      	cmp	r0, #0
    11c4:	db25      	blt.n	1212 <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    11c6:	4b14      	ldr	r3, [pc, #80]	; (1218 <_spi_m_async_init+0x60>)
    11c8:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    11ca:	bf04      	itt	eq
    11cc:	4b13      	ldreq	r3, [pc, #76]	; (121c <_spi_m_async_init+0x64>)
    11ce:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    11d0:	2300      	movs	r3, #0
    11d2:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    11d4:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    11d6:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    11d8:	4628      	mov	r0, r5
    11da:	4b11      	ldr	r3, [pc, #68]	; (1220 <_spi_m_async_init+0x68>)
    11dc:	4798      	blx	r3
    11de:	1d01      	adds	r1, r0, #4
    11e0:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11e2:	2401      	movs	r4, #1
    11e4:	f000 021f 	and.w	r2, r0, #31
    11e8:	fa04 f202 	lsl.w	r2, r4, r2
    11ec:	0943      	lsrs	r3, r0, #5
    11ee:	009b      	lsls	r3, r3, #2
    11f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    11f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    11f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    11fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1200:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1204:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1208:	3001      	adds	r0, #1
    120a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    120c:	4281      	cmp	r1, r0
    120e:	d1e9      	bne.n	11e4 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1210:	2000      	movs	r0, #0
}
    1212:	bd38      	pop	{r3, r4, r5, pc}
    1214:	000010c5 	.word	0x000010c5
    1218:	40003000 	.word	0x40003000
    121c:	20000104 	.word	0x20000104
    1220:	00001015 	.word	0x00001015

00001224 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1224:	b538      	push	{r3, r4, r5, lr}
    1226:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1228:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    122a:	b160      	cbz	r0, 1246 <_spi_m_async_enable_tx+0x22>
    122c:	1c20      	adds	r0, r4, #0
    122e:	bf18      	it	ne
    1230:	2001      	movne	r0, #1
    1232:	f640 3203 	movw	r2, #2819	; 0xb03
    1236:	4906      	ldr	r1, [pc, #24]	; (1250 <_spi_m_async_enable_tx+0x2c>)
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <_spi_m_async_enable_tx+0x30>)
    123a:	4798      	blx	r3

	if (state) {
    123c:	b92d      	cbnz	r5, 124a <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    123e:	2301      	movs	r3, #1
    1240:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1242:	2000      	movs	r0, #0
    1244:	bd38      	pop	{r3, r4, r5, pc}
    1246:	2000      	movs	r0, #0
    1248:	e7f3      	b.n	1232 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    124a:	2301      	movs	r3, #1
    124c:	75a3      	strb	r3, [r4, #22]
    124e:	e7f8      	b.n	1242 <_spi_m_async_enable_tx+0x1e>
    1250:	000031d0 	.word	0x000031d0
    1254:	00000d5d 	.word	0x00000d5d

00001258 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    1258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    125a:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    125c:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    125e:	4e0c      	ldr	r6, [pc, #48]	; (1290 <_spi_m_async_enable_rx+0x38>)
    1260:	f640 3217 	movw	r2, #2839	; 0xb17
    1264:	4631      	mov	r1, r6
    1266:	3000      	adds	r0, #0
    1268:	bf18      	it	ne
    126a:	2001      	movne	r0, #1
    126c:	4d09      	ldr	r5, [pc, #36]	; (1294 <_spi_m_async_enable_rx+0x3c>)
    126e:	47a8      	blx	r5
	ASSERT(hw);
    1270:	f640 3218 	movw	r2, #2840	; 0xb18
    1274:	4631      	mov	r1, r6
    1276:	1c20      	adds	r0, r4, #0
    1278:	bf18      	it	ne
    127a:	2001      	movne	r0, #1
    127c:	47a8      	blx	r5

	if (state) {
    127e:	b91f      	cbnz	r7, 1288 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1280:	2304      	movs	r3, #4
    1282:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    1284:	2000      	movs	r0, #0
    1286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    1288:	2304      	movs	r3, #4
    128a:	75a3      	strb	r3, [r4, #22]
    128c:	e7fa      	b.n	1284 <_spi_m_async_enable_rx+0x2c>
    128e:	bf00      	nop
    1290:	000031d0 	.word	0x000031d0
    1294:	00000d5d 	.word	0x00000d5d

00001298 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1298:	b538      	push	{r3, r4, r5, lr}
    129a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    129c:	4604      	mov	r4, r0
    129e:	b170      	cbz	r0, 12be <_spi_m_async_enable_tx_complete+0x26>
    12a0:	6800      	ldr	r0, [r0, #0]
    12a2:	3000      	adds	r0, #0
    12a4:	bf18      	it	ne
    12a6:	2001      	movne	r0, #1
    12a8:	f640 322a 	movw	r2, #2858	; 0xb2a
    12ac:	4907      	ldr	r1, [pc, #28]	; (12cc <_spi_m_async_enable_tx_complete+0x34>)
    12ae:	4b08      	ldr	r3, [pc, #32]	; (12d0 <_spi_m_async_enable_tx_complete+0x38>)
    12b0:	4798      	blx	r3

	if (state) {
    12b2:	b935      	cbnz	r5, 12c2 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    12b4:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    12b6:	2202      	movs	r2, #2
    12b8:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    12ba:	2000      	movs	r0, #0
    12bc:	bd38      	pop	{r3, r4, r5, pc}
    12be:	2000      	movs	r0, #0
    12c0:	e7f2      	b.n	12a8 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    12c2:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    12c4:	2202      	movs	r2, #2
    12c6:	759a      	strb	r2, [r3, #22]
    12c8:	e7f7      	b.n	12ba <_spi_m_async_enable_tx_complete+0x22>
    12ca:	bf00      	nop
    12cc:	000031d0 	.word	0x000031d0
    12d0:	00000d5d 	.word	0x00000d5d

000012d4 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    12d4:	b538      	push	{r3, r4, r5, lr}
    12d6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    12d8:	4604      	mov	r4, r0
    12da:	b160      	cbz	r0, 12f6 <_spi_m_async_write_one+0x22>
    12dc:	6800      	ldr	r0, [r0, #0]
    12de:	3000      	adds	r0, #0
    12e0:	bf18      	it	ne
    12e2:	2001      	movne	r0, #1
    12e4:	f640 323c 	movw	r2, #2876	; 0xb3c
    12e8:	4904      	ldr	r1, [pc, #16]	; (12fc <_spi_m_async_write_one+0x28>)
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <_spi_m_async_write_one+0x2c>)
    12ec:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    12ee:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    12f0:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    12f2:	2000      	movs	r0, #0
    12f4:	bd38      	pop	{r3, r4, r5, pc}
    12f6:	2000      	movs	r0, #0
    12f8:	e7f4      	b.n	12e4 <_spi_m_async_write_one+0x10>
    12fa:	bf00      	nop
    12fc:	000031d0 	.word	0x000031d0
    1300:	00000d5d 	.word	0x00000d5d

00001304 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1304:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1306:	4604      	mov	r4, r0
    1308:	b160      	cbz	r0, 1324 <_spi_m_async_read_one+0x20>
    130a:	6800      	ldr	r0, [r0, #0]
    130c:	3000      	adds	r0, #0
    130e:	bf18      	it	ne
    1310:	2001      	movne	r0, #1
    1312:	f640 3257 	movw	r2, #2903	; 0xb57
    1316:	4904      	ldr	r1, [pc, #16]	; (1328 <_spi_m_async_read_one+0x24>)
    1318:	4b04      	ldr	r3, [pc, #16]	; (132c <_spi_m_async_read_one+0x28>)
    131a:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    131c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    131e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1320:	b280      	uxth	r0, r0
    1322:	bd10      	pop	{r4, pc}
    1324:	2000      	movs	r0, #0
    1326:	e7f4      	b.n	1312 <_spi_m_async_read_one+0xe>
    1328:	000031d0 	.word	0x000031d0
    132c:	00000d5d 	.word	0x00000d5d

00001330 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1330:	b570      	push	{r4, r5, r6, lr}
    1332:	460d      	mov	r5, r1
    1334:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1336:	4604      	mov	r4, r0
    1338:	b168      	cbz	r0, 1356 <_spi_m_async_register_callback+0x26>
    133a:	2903      	cmp	r1, #3
    133c:	bf8c      	ite	hi
    133e:	2000      	movhi	r0, #0
    1340:	2001      	movls	r0, #1
    1342:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    1346:	4905      	ldr	r1, [pc, #20]	; (135c <_spi_m_async_register_callback+0x2c>)
    1348:	4b05      	ldr	r3, [pc, #20]	; (1360 <_spi_m_async_register_callback+0x30>)
    134a:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    134c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1350:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1352:	2000      	movs	r0, #0
    1354:	bd70      	pop	{r4, r5, r6, pc}
    1356:	2000      	movs	r0, #0
    1358:	e7f3      	b.n	1342 <_spi_m_async_register_callback+0x12>
    135a:	bf00      	nop
    135c:	000031d0 	.word	0x000031d0
    1360:	00000d5d 	.word	0x00000d5d

00001364 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1364:	2000      	movs	r0, #0
    1366:	4770      	bx	lr

00001368 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1368:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    136a:	7c83      	ldrb	r3, [r0, #18]
    136c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1370:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1372:	f002 0107 	and.w	r1, r2, #7
    1376:	2901      	cmp	r1, #1
    1378:	d00b      	beq.n	1392 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    137a:	015a      	lsls	r2, r3, #5
    137c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1380:	2110      	movs	r1, #16
    1382:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1386:	015b      	lsls	r3, r3, #5
    1388:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    138c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1390:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1392:	f012 0f40 	tst.w	r2, #64	; 0x40
    1396:	d00c      	beq.n	13b2 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1398:	7cc2      	ldrb	r2, [r0, #19]
    139a:	f36f 1286 	bfc	r2, #6, #1
    139e:	74c2      	strb	r2, [r0, #19]
    13a0:	015a      	lsls	r2, r3, #5
    13a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    13a6:	2180      	movs	r1, #128	; 0x80
    13a8:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    13ac:	2140      	movs	r1, #64	; 0x40
    13ae:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    13b2:	7cc2      	ldrb	r2, [r0, #19]
    13b4:	f36f 02c3 	bfc	r2, #3, #1
    13b8:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    13ba:	4909      	ldr	r1, [pc, #36]	; (13e0 <_usb_d_dev_handle_setup+0x78>)
    13bc:	015a      	lsls	r2, r3, #5
    13be:	188c      	adds	r4, r1, r2
    13c0:	2500      	movs	r5, #0
    13c2:	72a5      	strb	r5, [r4, #10]
    13c4:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    13c6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    13ca:	246f      	movs	r4, #111	; 0x6f
    13cc:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    13d4:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    13d8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    13da:	7c80      	ldrb	r0, [r0, #18]
    13dc:	4798      	blx	r3
    13de:	bd38      	pop	{r3, r4, r5, pc}
    13e0:	20000108 	.word	0x20000108

000013e4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    13e4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    13e6:	2320      	movs	r3, #32
    13e8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    13ec:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    13ee:	7c83      	ldrb	r3, [r0, #18]
    13f0:	f003 030f 	and.w	r3, r3, #15
    13f4:	015b      	lsls	r3, r3, #5
    13f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    13fa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    13fe:	4b03      	ldr	r3, [pc, #12]	; (140c <_usb_d_dev_handle_stall+0x28>)
    1400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1402:	6882      	ldr	r2, [r0, #8]
    1404:	2101      	movs	r1, #1
    1406:	7c80      	ldrb	r0, [r0, #18]
    1408:	4798      	blx	r3
    140a:	bd08      	pop	{r3, pc}
    140c:	20000108 	.word	0x20000108

00001410 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1410:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1412:	7c84      	ldrb	r4, [r0, #18]
    1414:	2cff      	cmp	r4, #255	; 0xff
    1416:	d003      	beq.n	1420 <_usb_d_dev_trans_done+0x10>
    1418:	7cc3      	ldrb	r3, [r0, #19]
    141a:	f013 0f40 	tst.w	r3, #64	; 0x40
    141e:	d100      	bne.n	1422 <_usb_d_dev_trans_done+0x12>
    1420:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1422:	7cc2      	ldrb	r2, [r0, #19]
    1424:	f36f 1286 	bfc	r2, #6, #1
    1428:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    142a:	4a03      	ldr	r2, [pc, #12]	; (1438 <_usb_d_dev_trans_done+0x28>)
    142c:	6f15      	ldr	r5, [r2, #112]	; 0x70
    142e:	6882      	ldr	r2, [r0, #8]
    1430:	4620      	mov	r0, r4
    1432:	47a8      	blx	r5
    1434:	e7f4      	b.n	1420 <_usb_d_dev_trans_done+0x10>
    1436:	bf00      	nop
    1438:	20000108 	.word	0x20000108

0000143c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    143c:	b530      	push	{r4, r5, lr}
    143e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1440:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1442:	2425      	movs	r4, #37	; 0x25
    1444:	f88d 4004 	strb.w	r4, [sp, #4]
    1448:	244a      	movs	r4, #74	; 0x4a
    144a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    144e:	2bff      	cmp	r3, #255	; 0xff
    1450:	d01e      	beq.n	1490 <_usb_d_dev_trans_stop+0x54>
    1452:	7cc4      	ldrb	r4, [r0, #19]
    1454:	f014 0f40 	tst.w	r4, #64	; 0x40
    1458:	d01a      	beq.n	1490 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    145a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    145e:	b1c9      	cbz	r1, 1494 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1460:	0163      	lsls	r3, r4, #5
    1462:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1466:	2580      	movs	r5, #128	; 0x80
    1468:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    146c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    146e:	a902      	add	r1, sp, #8
    1470:	440b      	add	r3, r1
    1472:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1476:	0163      	lsls	r3, r4, #5
    1478:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    147c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1480:	0163      	lsls	r3, r4, #5
    1482:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1486:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    148a:	4611      	mov	r1, r2
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <_usb_d_dev_trans_stop+0x68>)
    148e:	4798      	blx	r3
}
    1490:	b003      	add	sp, #12
    1492:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1494:	0163      	lsls	r3, r4, #5
    1496:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    149a:	2540      	movs	r5, #64	; 0x40
    149c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    14a0:	e7e4      	b.n	146c <_usb_d_dev_trans_stop+0x30>
    14a2:	bf00      	nop
    14a4:	00001411 	.word	0x00001411

000014a8 <_usb_d_dev_handle_trfail>:
{
    14a8:	b530      	push	{r4, r5, lr}
    14aa:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    14ac:	7c83      	ldrb	r3, [r0, #18]
    14ae:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    14b2:	2204      	movs	r2, #4
    14b4:	f88d 2004 	strb.w	r2, [sp, #4]
    14b8:	2208      	movs	r2, #8
    14ba:	f88d 2005 	strb.w	r2, [sp, #5]
    14be:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    14c0:	460c      	mov	r4, r1
    14c2:	b391      	cbz	r1, 152a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    14c4:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    14c8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    14cc:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    14d0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    14d4:	4a32      	ldr	r2, [pc, #200]	; (15a0 <_usb_d_dev_handle_trfail+0xf8>)
    14d6:	440a      	add	r2, r1
    14d8:	7a91      	ldrb	r1, [r2, #10]
    14da:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    14dc:	2d02      	cmp	r5, #2
    14de:	d02c      	beq.n	153a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    14e0:	f011 0f02 	tst.w	r1, #2
    14e4:	d045      	beq.n	1572 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    14e6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    14e8:	7a91      	ldrb	r1, [r2, #10]
    14ea:	f36f 0141 	bfc	r1, #1, #1
    14ee:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    14f0:	aa02      	add	r2, sp, #8
    14f2:	4422      	add	r2, r4
    14f4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    14f8:	015a      	lsls	r2, r3, #5
    14fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    14fe:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1502:	015b      	lsls	r3, r3, #5
    1504:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1508:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    150c:	f005 0307 	and.w	r3, r5, #7
    1510:	2b01      	cmp	r3, #1
    1512:	d143      	bne.n	159c <_usb_d_dev_handle_trfail+0xf4>
    1514:	7cc3      	ldrb	r3, [r0, #19]
    1516:	f013 0f40 	tst.w	r3, #64	; 0x40
    151a:	d03f      	beq.n	159c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    151c:	09d9      	lsrs	r1, r3, #7
    151e:	428c      	cmp	r4, r1
    1520:	d03c      	beq.n	159c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1522:	2200      	movs	r2, #0
    1524:	4b1f      	ldr	r3, [pc, #124]	; (15a4 <_usb_d_dev_handle_trfail+0xfc>)
    1526:	4798      	blx	r3
    1528:	e038      	b.n	159c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    152a:	0159      	lsls	r1, r3, #5
    152c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1530:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1534:	f005 0507 	and.w	r5, r5, #7
    1538:	e7ca      	b.n	14d0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    153a:	f011 0f01 	tst.w	r1, #1
    153e:	d0cf      	beq.n	14e0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1540:	7a91      	ldrb	r1, [r2, #10]
    1542:	f36f 0100 	bfc	r1, #0, #1
    1546:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1548:	aa02      	add	r2, sp, #8
    154a:	4422      	add	r2, r4
    154c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1550:	015a      	lsls	r2, r3, #5
    1552:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1556:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    155a:	015b      	lsls	r3, r3, #5
    155c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1560:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1564:	2204      	movs	r2, #4
    1566:	1c21      	adds	r1, r4, #0
    1568:	bf18      	it	ne
    156a:	2101      	movne	r1, #1
    156c:	4b0d      	ldr	r3, [pc, #52]	; (15a4 <_usb_d_dev_handle_trfail+0xfc>)
    156e:	4798      	blx	r3
    1570:	e014      	b.n	159c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1572:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1576:	4a0a      	ldr	r2, [pc, #40]	; (15a0 <_usb_d_dev_handle_trfail+0xf8>)
    1578:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    157c:	2100      	movs	r1, #0
    157e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1580:	aa02      	add	r2, sp, #8
    1582:	4414      	add	r4, r2
    1584:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1588:	015a      	lsls	r2, r3, #5
    158a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    158e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1592:	015b      	lsls	r3, r3, #5
    1594:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1598:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    159c:	b003      	add	sp, #12
    159e:	bd30      	pop	{r4, r5, pc}
    15a0:	20000108 	.word	0x20000108
    15a4:	0000143d 	.word	0x0000143d

000015a8 <_usb_d_dev_reset_epts>:
{
    15a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15ac:	4d0c      	ldr	r5, [pc, #48]	; (15e0 <_usb_d_dev_reset_epts+0x38>)
    15ae:	f105 0474 	add.w	r4, r5, #116	; 0x74
    15b2:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    15b6:	f04f 0803 	mov.w	r8, #3
    15ba:	4f0a      	ldr	r7, [pc, #40]	; (15e4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    15bc:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    15be:	4641      	mov	r1, r8
    15c0:	4620      	mov	r0, r4
    15c2:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    15c4:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    15c6:	2300      	movs	r3, #0
    15c8:	74e3      	strb	r3, [r4, #19]
    15ca:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    15cc:	42ac      	cmp	r4, r5
    15ce:	d1f6      	bne.n	15be <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    15d0:	2260      	movs	r2, #96	; 0x60
    15d2:	4619      	mov	r1, r3
    15d4:	4802      	ldr	r0, [pc, #8]	; (15e0 <_usb_d_dev_reset_epts+0x38>)
    15d6:	4b04      	ldr	r3, [pc, #16]	; (15e8 <_usb_d_dev_reset_epts+0x40>)
    15d8:	4798      	blx	r3
    15da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15de:	bf00      	nop
    15e0:	20000108 	.word	0x20000108
    15e4:	00001411 	.word	0x00001411
    15e8:	00003147 	.word	0x00003147

000015ec <_usb_d_dev_in_next>:
{
    15ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15f0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    15f2:	7c84      	ldrb	r4, [r0, #18]
    15f4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    15f8:	4688      	mov	r8, r1
    15fa:	2900      	cmp	r1, #0
    15fc:	f000 809f 	beq.w	173e <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1600:	4b58      	ldr	r3, [pc, #352]	; (1764 <_usb_d_dev_in_next+0x178>)
    1602:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1606:	6958      	ldr	r0, [r3, #20]
    1608:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    160c:	8a2b      	ldrh	r3, [r5, #16]
    160e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1612:	4293      	cmp	r3, r2
    1614:	f000 808d 	beq.w	1732 <_usb_d_dev_in_next+0x146>
    1618:	3b01      	subs	r3, #1
    161a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    161c:	7cef      	ldrb	r7, [r5, #19]
    161e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    1622:	f1b8 0f00 	cmp.w	r8, #0
    1626:	d005      	beq.n	1634 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1628:	0162      	lsls	r2, r4, #5
    162a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    162e:	2302      	movs	r3, #2
    1630:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1634:	68a9      	ldr	r1, [r5, #8]
    1636:	eb0e 0301 	add.w	r3, lr, r1
    163a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    163c:	686e      	ldr	r6, [r5, #4]
    163e:	42b3      	cmp	r3, r6
    1640:	d23f      	bcs.n	16c2 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1642:	1af6      	subs	r6, r6, r3
    1644:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1646:	7cea      	ldrb	r2, [r5, #19]
    1648:	f012 0f20 	tst.w	r2, #32
    164c:	d02d      	beq.n	16aa <_usb_d_dev_in_next+0xbe>
    164e:	8a2a      	ldrh	r2, [r5, #16]
    1650:	4296      	cmp	r6, r2
    1652:	bf28      	it	cs
    1654:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1656:	6829      	ldr	r1, [r5, #0]
    1658:	4632      	mov	r2, r6
    165a:	4419      	add	r1, r3
    165c:	68e8      	ldr	r0, [r5, #12]
    165e:	4b42      	ldr	r3, [pc, #264]	; (1768 <_usb_d_dev_in_next+0x17c>)
    1660:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1662:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1664:	4b3f      	ldr	r3, [pc, #252]	; (1764 <_usb_d_dev_in_next+0x178>)
    1666:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    166a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    166c:	4b3d      	ldr	r3, [pc, #244]	; (1764 <_usb_d_dev_in_next+0x178>)
    166e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1672:	695a      	ldr	r2, [r3, #20]
    1674:	f366 020d 	bfi	r2, r6, #0, #14
    1678:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    167a:	695a      	ldr	r2, [r3, #20]
    167c:	f36f 329b 	bfc	r2, #14, #14
    1680:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1682:	f1b8 0f00 	cmp.w	r8, #0
    1686:	d108      	bne.n	169a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1688:	2f01      	cmp	r7, #1
    168a:	bf0c      	ite	eq
    168c:	224e      	moveq	r2, #78	; 0x4e
    168e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1690:	0163      	lsls	r3, r4, #5
    1692:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1696:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    169a:	0164      	lsls	r4, r4, #5
    169c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    16a0:	2380      	movs	r3, #128	; 0x80
    16a2:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    16a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16aa:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    16ae:	bf28      	it	cs
    16b0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    16b4:	6829      	ldr	r1, [r5, #0]
    16b6:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    16b8:	4a2a      	ldr	r2, [pc, #168]	; (1764 <_usb_d_dev_in_next+0x178>)
    16ba:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    16be:	6113      	str	r3, [r2, #16]
    16c0:	e7d4      	b.n	166c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    16c2:	7ceb      	ldrb	r3, [r5, #19]
    16c4:	f013 0f10 	tst.w	r3, #16
    16c8:	d00f      	beq.n	16ea <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    16ca:	7ceb      	ldrb	r3, [r5, #19]
    16cc:	f36f 1304 	bfc	r3, #4, #1
    16d0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    16d2:	4b24      	ldr	r3, [pc, #144]	; (1764 <_usb_d_dev_in_next+0x178>)
    16d4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    16d8:	695a      	ldr	r2, [r3, #20]
    16da:	f36f 020d 	bfc	r2, #0, #14
    16de:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    16e0:	695a      	ldr	r2, [r3, #20]
    16e2:	f36f 329b 	bfc	r2, #14, #14
    16e6:	615a      	str	r2, [r3, #20]
    16e8:	e7cb      	b.n	1682 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    16ea:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    16ec:	ea4f 1444 	mov.w	r4, r4, lsl #5
    16f0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    16f4:	bf0c      	ite	eq
    16f6:	234b      	moveq	r3, #75	; 0x4b
    16f8:	234a      	movne	r3, #74	; 0x4a
    16fa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    16fe:	8a2a      	ldrh	r2, [r5, #16]
    1700:	ea00 030e 	and.w	r3, r0, lr
    1704:	429a      	cmp	r2, r3
    1706:	d005      	beq.n	1714 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1708:	2100      	movs	r1, #0
    170a:	4628      	mov	r0, r5
    170c:	4b17      	ldr	r3, [pc, #92]	; (176c <_usb_d_dev_in_next+0x180>)
    170e:	4798      	blx	r3
	return;
    1710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    1714:	7ceb      	ldrb	r3, [r5, #19]
    1716:	f36f 1386 	bfc	r3, #6, #1
    171a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    171c:	4b11      	ldr	r3, [pc, #68]	; (1764 <_usb_d_dev_in_next+0x178>)
    171e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1720:	68a9      	ldr	r1, [r5, #8]
    1722:	7ca8      	ldrb	r0, [r5, #18]
    1724:	4798      	blx	r3
    1726:	b9d0      	cbnz	r0, 175e <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1728:	7ceb      	ldrb	r3, [r5, #19]
    172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    172e:	74eb      	strb	r3, [r5, #19]
    1730:	e7ea      	b.n	1708 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1732:	7cef      	ldrb	r7, [r5, #19]
    1734:	f007 0707 	and.w	r7, r7, #7
    1738:	f240 30ff 	movw	r0, #1023	; 0x3ff
    173c:	e774      	b.n	1628 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    173e:	8a03      	ldrh	r3, [r0, #16]
    1740:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1744:	4293      	cmp	r3, r2
    1746:	d107      	bne.n	1758 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1748:	7cef      	ldrb	r7, [r5, #19]
    174a:	f007 0707 	and.w	r7, r7, #7
    174e:	f04f 0e00 	mov.w	lr, #0
    1752:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1756:	e76d      	b.n	1634 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1758:	f04f 0e00 	mov.w	lr, #0
    175c:	e75c      	b.n	1618 <_usb_d_dev_in_next+0x2c>
    175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1762:	bf00      	nop
    1764:	20000108 	.word	0x20000108
    1768:	00003131 	.word	0x00003131
    176c:	00001411 	.word	0x00001411

00001770 <_usb_d_dev_out_next>:
{
    1770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1774:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1776:	7c85      	ldrb	r5, [r0, #18]
    1778:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    177c:	4689      	mov	r9, r1
    177e:	2900      	cmp	r1, #0
    1780:	d056      	beq.n	1830 <_usb_d_dev_out_next+0xc0>
    1782:	4b74      	ldr	r3, [pc, #464]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    1784:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1788:	685a      	ldr	r2, [r3, #4]
    178a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    178e:	685f      	ldr	r7, [r3, #4]
    1790:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1794:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1796:	8a06      	ldrh	r6, [r0, #16]
    1798:	f240 33ff 	movw	r3, #1023	; 0x3ff
    179c:	429e      	cmp	r6, r3
    179e:	f000 80ba 	beq.w	1916 <_usb_d_dev_out_next+0x1a6>
    17a2:	3e01      	subs	r6, #1
    17a4:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    17a6:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    17aa:	f894 8013 	ldrb.w	r8, [r4, #19]
    17ae:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    17b2:	f1b9 0f00 	cmp.w	r9, #0
    17b6:	d005      	beq.n	17c4 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17b8:	016b      	lsls	r3, r5, #5
    17ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    17be:	2201      	movs	r2, #1
    17c0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    17c4:	7ce3      	ldrb	r3, [r4, #19]
    17c6:	f013 0f20 	tst.w	r3, #32
    17ca:	d00d      	beq.n	17e8 <_usb_d_dev_out_next+0x78>
    17cc:	6862      	ldr	r2, [r4, #4]
    17ce:	2a00      	cmp	r2, #0
    17d0:	d037      	beq.n	1842 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    17d2:	68a0      	ldr	r0, [r4, #8]
    17d4:	1a12      	subs	r2, r2, r0
    17d6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    17d8:	6823      	ldr	r3, [r4, #0]
    17da:	42ba      	cmp	r2, r7
    17dc:	bf28      	it	cs
    17de:	463a      	movcs	r2, r7
    17e0:	68e1      	ldr	r1, [r4, #12]
    17e2:	4418      	add	r0, r3
    17e4:	4b5c      	ldr	r3, [pc, #368]	; (1958 <_usb_d_dev_out_next+0x1e8>)
    17e6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    17e8:	6863      	ldr	r3, [r4, #4]
    17ea:	b353      	cbz	r3, 1842 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    17ec:	f1b9 0f00 	cmp.w	r9, #0
    17f0:	d040      	beq.n	1874 <_usb_d_dev_out_next+0x104>
    17f2:	8a22      	ldrh	r2, [r4, #16]
    17f4:	42ba      	cmp	r2, r7
    17f6:	d93d      	bls.n	1874 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    17f8:	7ce3      	ldrb	r3, [r4, #19]
    17fa:	f36f 1304 	bfc	r3, #4, #1
    17fe:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1800:	68a3      	ldr	r3, [r4, #8]
    1802:	445b      	add	r3, fp
    1804:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1806:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    180a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    180e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1812:	bf0c      	ite	eq
    1814:	222d      	moveq	r2, #45	; 0x2d
    1816:	2225      	movne	r2, #37	; 0x25
    1818:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    181c:	b915      	cbnz	r5, 1824 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    181e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1820:	4b4c      	ldr	r3, [pc, #304]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    1822:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1824:	2100      	movs	r1, #0
    1826:	4620      	mov	r0, r4
    1828:	4b4c      	ldr	r3, [pc, #304]	; (195c <_usb_d_dev_out_next+0x1ec>)
    182a:	4798      	blx	r3
	return;
    182c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1830:	8a06      	ldrh	r6, [r0, #16]
    1832:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1836:	429e      	cmp	r6, r3
    1838:	d07b      	beq.n	1932 <_usb_d_dev_out_next+0x1c2>
    183a:	f04f 0b00 	mov.w	fp, #0
    183e:	46da      	mov	sl, fp
    1840:	e7af      	b.n	17a2 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1842:	7ce3      	ldrb	r3, [r4, #19]
    1844:	f013 0f10 	tst.w	r3, #16
    1848:	d06c      	beq.n	1924 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    184a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    184c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1850:	f043 0320 	orr.w	r3, r3, #32
    1854:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1856:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1858:	493e      	ldr	r1, [pc, #248]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    185a:	016a      	lsls	r2, r5, #5
    185c:	188b      	adds	r3, r1, r2
    185e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1860:	8a21      	ldrh	r1, [r4, #16]
    1862:	685a      	ldr	r2, [r3, #4]
    1864:	f361 329b 	bfi	r2, r1, #14, #14
    1868:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    186a:	685a      	ldr	r2, [r3, #4]
    186c:	f36f 020d 	bfc	r2, #0, #14
    1870:	605a      	str	r2, [r3, #4]
    1872:	e01d      	b.n	18b0 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    1874:	68a2      	ldr	r2, [r4, #8]
    1876:	4452      	add	r2, sl
    1878:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    187a:	4293      	cmp	r3, r2
    187c:	d9c3      	bls.n	1806 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    187e:	1a9b      	subs	r3, r3, r2
    1880:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1882:	7ce1      	ldrb	r1, [r4, #19]
    1884:	f011 0f20 	tst.w	r1, #32
    1888:	d026      	beq.n	18d8 <_usb_d_dev_out_next+0x168>
    188a:	8a22      	ldrh	r2, [r4, #16]
    188c:	4293      	cmp	r3, r2
    188e:	bf28      	it	cs
    1890:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1892:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1894:	016a      	lsls	r2, r5, #5
    1896:	492f      	ldr	r1, [pc, #188]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    1898:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    189a:	4a2e      	ldr	r2, [pc, #184]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    189c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    18a0:	6851      	ldr	r1, [r2, #4]
    18a2:	f363 319b 	bfi	r1, r3, #14, #14
    18a6:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    18a8:	6853      	ldr	r3, [r2, #4]
    18aa:	f36f 030d 	bfc	r3, #0, #14
    18ae:	6053      	str	r3, [r2, #4]
	if (!isr) {
    18b0:	f1b9 0f00 	cmp.w	r9, #0
    18b4:	d108      	bne.n	18c8 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    18b6:	f1b8 0f01 	cmp.w	r8, #1
    18ba:	d025      	beq.n	1908 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    18bc:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    18be:	016b      	lsls	r3, r5, #5
    18c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    18c4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    18c8:	016d      	lsls	r5, r5, #5
    18ca:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    18ce:	2340      	movs	r3, #64	; 0x40
    18d0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    18d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    18d8:	8a21      	ldrh	r1, [r4, #16]
    18da:	428b      	cmp	r3, r1
    18dc:	d90a      	bls.n	18f4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    18de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    18e2:	d80e      	bhi.n	1902 <_usb_d_dev_out_next+0x192>
    18e4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    18e8:	6821      	ldr	r1, [r4, #0]
    18ea:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    18ec:	0169      	lsls	r1, r5, #5
    18ee:	4819      	ldr	r0, [pc, #100]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    18f0:	5042      	str	r2, [r0, r1]
    18f2:	e7d2      	b.n	189a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    18f4:	428b      	cmp	r3, r1
    18f6:	d2f7      	bcs.n	18e8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    18f8:	7ce1      	ldrb	r1, [r4, #19]
    18fa:	f041 0120 	orr.w	r1, r1, #32
    18fe:	74e1      	strb	r1, [r4, #19]
    1900:	e7f2      	b.n	18e8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    1902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1906:	e7ef      	b.n	18e8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    1908:	4b12      	ldr	r3, [pc, #72]	; (1954 <_usb_d_dev_out_next+0x1e4>)
    190a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    190e:	2200      	movs	r2, #0
    1910:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1912:	222d      	movs	r2, #45	; 0x2d
    1914:	e7d3      	b.n	18be <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    1916:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    191a:	f890 8013 	ldrb.w	r8, [r0, #19]
    191e:	f008 0807 	and.w	r8, r8, #7
    1922:	e749      	b.n	17b8 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    1924:	f1b9 0f00 	cmp.w	r9, #0
    1928:	d10b      	bne.n	1942 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    192a:	68a3      	ldr	r3, [r4, #8]
    192c:	4453      	add	r3, sl
    192e:	60a3      	str	r3, [r4, #8]
    1930:	e769      	b.n	1806 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1932:	f890 8013 	ldrb.w	r8, [r0, #19]
    1936:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    193a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    193c:	46bb      	mov	fp, r7
    193e:	46ba      	mov	sl, r7
    1940:	e740      	b.n	17c4 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    1942:	8a23      	ldrh	r3, [r4, #16]
    1944:	42bb      	cmp	r3, r7
    1946:	f63f af57 	bhi.w	17f8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    194a:	68a3      	ldr	r3, [r4, #8]
    194c:	4453      	add	r3, sl
    194e:	60a3      	str	r3, [r4, #8]
    1950:	e759      	b.n	1806 <_usb_d_dev_out_next+0x96>
    1952:	bf00      	nop
    1954:	20000108 	.word	0x20000108
    1958:	00003131 	.word	0x00003131
    195c:	00001411 	.word	0x00001411

00001960 <_usb_d_dev_handler>:
{
    1960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1964:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1968:	8c1e      	ldrh	r6, [r3, #32]
    196a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    196c:	b146      	cbz	r6, 1980 <_usb_d_dev_handler+0x20>
    196e:	4d91      	ldr	r5, [pc, #580]	; (1bb4 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    1970:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1972:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    1976:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1bd0 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    197a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 1bd4 <_usb_d_dev_handler+0x274>
    197e:	e0d3      	b.n	1b28 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1980:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1982:	8b1b      	ldrh	r3, [r3, #24]
    1984:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1986:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1988:	f013 0f04 	tst.w	r3, #4
    198c:	d11d      	bne.n	19ca <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    198e:	f413 7f00 	tst.w	r3, #512	; 0x200
    1992:	d123      	bne.n	19dc <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1994:	f013 0f80 	tst.w	r3, #128	; 0x80
    1998:	d147      	bne.n	1a2a <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    199a:	f013 0f70 	tst.w	r3, #112	; 0x70
    199e:	d14f      	bne.n	1a40 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    19a0:	f013 0f08 	tst.w	r3, #8
    19a4:	d16e      	bne.n	1a84 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    19a6:	f013 0f01 	tst.w	r3, #1
    19aa:	d0e0      	beq.n	196e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    19ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    19b0:	f240 2201 	movw	r2, #513	; 0x201
    19b4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    19b6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    19b8:	2270      	movs	r2, #112	; 0x70
    19ba:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    19bc:	4b7e      	ldr	r3, [pc, #504]	; (1bb8 <_usb_d_dev_handler+0x258>)
    19be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    19c0:	2100      	movs	r1, #0
    19c2:	2004      	movs	r0, #4
    19c4:	4798      	blx	r3
    19c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    19ca:	2204      	movs	r2, #4
    19cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    19d0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    19d2:	4b79      	ldr	r3, [pc, #484]	; (1bb8 <_usb_d_dev_handler+0x258>)
    19d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    19d6:	4798      	blx	r3
    19d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    19e0:	f240 2201 	movw	r2, #513	; 0x201
    19e4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    19e6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    19e8:	2270      	movs	r2, #112	; 0x70
    19ea:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    19ec:	4b72      	ldr	r3, [pc, #456]	; (1bb8 <_usb_d_dev_handler+0x258>)
    19ee:	891b      	ldrh	r3, [r3, #8]
    19f0:	f003 030f 	and.w	r3, r3, #15
    19f4:	2b03      	cmp	r3, #3
    19f6:	d00e      	beq.n	1a16 <_usb_d_dev_handler+0xb6>
    19f8:	4b6f      	ldr	r3, [pc, #444]	; (1bb8 <_usb_d_dev_handler+0x258>)
    19fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    19fc:	f003 030f 	and.w	r3, r3, #15
    1a00:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1a02:	bf08      	it	eq
    1a04:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1a06:	d007      	beq.n	1a18 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    1a08:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1a0a:	4b6b      	ldr	r3, [pc, #428]	; (1bb8 <_usb_d_dev_handler+0x258>)
    1a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a0e:	2003      	movs	r0, #3
    1a10:	4798      	blx	r3
    1a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1a16:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1a18:	4b67      	ldr	r3, [pc, #412]	; (1bb8 <_usb_d_dev_handler+0x258>)
    1a1a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1a1e:	8919      	ldrh	r1, [r3, #8]
    1a20:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    1a24:	2200      	movs	r2, #0
    1a26:	811a      	strh	r2, [r3, #8]
    1a28:	e7ef      	b.n	1a0a <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a2a:	2280      	movs	r2, #128	; 0x80
    1a2c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a30:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1a32:	4b61      	ldr	r3, [pc, #388]	; (1bb8 <_usb_d_dev_handler+0x258>)
    1a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a36:	2100      	movs	r1, #0
    1a38:	2005      	movs	r0, #5
    1a3a:	4798      	blx	r3
    1a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a40:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a44:	2270      	movs	r2, #112	; 0x70
    1a46:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1a48:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1a4a:	f240 2201 	movw	r2, #513	; 0x201
    1a4e:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1a50:	4b5a      	ldr	r3, [pc, #360]	; (1bbc <_usb_d_dev_handler+0x25c>)
    1a52:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    1a56:	f013 0f01 	tst.w	r3, #1
    1a5a:	d00d      	beq.n	1a78 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1a5c:	4a57      	ldr	r2, [pc, #348]	; (1bbc <_usb_d_dev_handler+0x25c>)
    1a5e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1a60:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1a64:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1a68:	d1f9      	bne.n	1a5e <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1a6a:	4b53      	ldr	r3, [pc, #332]	; (1bb8 <_usb_d_dev_handler+0x258>)
    1a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a6e:	2100      	movs	r1, #0
    1a70:	2002      	movs	r0, #2
    1a72:	4798      	blx	r3
    1a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1a78:	4a50      	ldr	r2, [pc, #320]	; (1bbc <_usb_d_dev_handler+0x25c>)
    1a7a:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1a7c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1a80:	d0fb      	beq.n	1a7a <_usb_d_dev_handler+0x11a>
    1a82:	e7f2      	b.n	1a6a <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a88:	2400      	movs	r4, #0
    1a8a:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a8e:	2208      	movs	r2, #8
    1a90:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1a92:	2270      	movs	r2, #112	; 0x70
    1a94:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1a96:	f240 2201 	movw	r2, #513	; 0x201
    1a9a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1a9c:	4b48      	ldr	r3, [pc, #288]	; (1bc0 <_usb_d_dev_handler+0x260>)
    1a9e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1aa0:	4b45      	ldr	r3, [pc, #276]	; (1bb8 <_usb_d_dev_handler+0x258>)
    1aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1aa4:	4621      	mov	r1, r4
    1aa6:	2001      	movs	r0, #1
    1aa8:	4798      	blx	r3
    1aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1aae:	f011 0f10 	tst.w	r1, #16
    1ab2:	d109      	bne.n	1ac8 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1ab4:	f011 0f40 	tst.w	r1, #64	; 0x40
    1ab8:	d108      	bne.n	1acc <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1aba:	f011 0f20 	tst.w	r1, #32
    1abe:	d02f      	beq.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1ac0:	2100      	movs	r1, #0
    1ac2:	4b40      	ldr	r3, [pc, #256]	; (1bc4 <_usb_d_dev_handler+0x264>)
    1ac4:	4798      	blx	r3
    1ac6:	e02b      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    1ac8:	47c8      	blx	r9
    1aca:	e029      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1acc:	2101      	movs	r1, #1
    1ace:	4b3d      	ldr	r3, [pc, #244]	; (1bc4 <_usb_d_dev_handler+0x264>)
    1ad0:	4798      	blx	r3
    1ad2:	e025      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1ad4:	f011 0f40 	tst.w	r1, #64	; 0x40
    1ad8:	d111      	bne.n	1afe <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1ada:	f011 0f08 	tst.w	r1, #8
    1ade:	d112      	bne.n	1b06 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1ae0:	f011 0f02 	tst.w	r1, #2
    1ae4:	d112      	bne.n	1b0c <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ae6:	f003 0307 	and.w	r3, r3, #7
    1aea:	2b01      	cmp	r3, #1
    1aec:	d118      	bne.n	1b20 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1aee:	f011 0f04 	tst.w	r1, #4
    1af2:	d10f      	bne.n	1b14 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1af4:	f011 0f10 	tst.w	r1, #16
    1af8:	d012      	beq.n	1b20 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1afa:	47c8      	blx	r9
    1afc:	e010      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1afe:	2101      	movs	r1, #1
    1b00:	4b30      	ldr	r3, [pc, #192]	; (1bc4 <_usb_d_dev_handler+0x264>)
    1b02:	4798      	blx	r3
    1b04:	e00c      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    1b06:	2101      	movs	r1, #1
    1b08:	47c0      	blx	r8
    1b0a:	e009      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    1b0c:	2101      	movs	r1, #1
    1b0e:	4b2e      	ldr	r3, [pc, #184]	; (1bc8 <_usb_d_dev_handler+0x268>)
    1b10:	4798      	blx	r3
    1b12:	e005      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    1b14:	2100      	movs	r1, #0
    1b16:	47c0      	blx	r8
    1b18:	e002      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1b1a:	2100      	movs	r1, #0
    1b1c:	4b29      	ldr	r3, [pc, #164]	; (1bc4 <_usb_d_dev_handler+0x264>)
    1b1e:	4798      	blx	r3
    1b20:	3401      	adds	r4, #1
    1b22:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1b24:	2c09      	cmp	r4, #9
    1b26:	d042      	beq.n	1bae <_usb_d_dev_handler+0x24e>
    1b28:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1b2a:	7cab      	ldrb	r3, [r5, #18]
    1b2c:	2bff      	cmp	r3, #255	; 0xff
    1b2e:	d0f7      	beq.n	1b20 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1b30:	f003 030f 	and.w	r3, r3, #15
    1b34:	2101      	movs	r1, #1
    1b36:	4099      	lsls	r1, r3
    1b38:	4231      	tst	r1, r6
    1b3a:	d0f1      	beq.n	1b20 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1b3c:	0159      	lsls	r1, r3, #5
    1b3e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1b42:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1b46:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1b48:	015b      	lsls	r3, r3, #5
    1b4a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b4e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1b52:	4019      	ands	r1, r3
    1b54:	d0e4      	beq.n	1b20 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1b56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1b5a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1b5e:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    1b62:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1b66:	2a01      	cmp	r2, #1
    1b68:	d0a1      	beq.n	1aae <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1b6a:	f013 0f80 	tst.w	r3, #128	; 0x80
    1b6e:	d1b1      	bne.n	1ad4 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1b70:	f011 0f20 	tst.w	r1, #32
    1b74:	d1d1      	bne.n	1b1a <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1b76:	f011 0f04 	tst.w	r1, #4
    1b7a:	d10e      	bne.n	1b9a <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1b7c:	f011 0f01 	tst.w	r1, #1
    1b80:	d10e      	bne.n	1ba0 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1b82:	f003 0307 	and.w	r3, r3, #7
    1b86:	2b01      	cmp	r3, #1
    1b88:	d1ca      	bne.n	1b20 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1b8a:	f011 0f08 	tst.w	r1, #8
    1b8e:	d10b      	bne.n	1ba8 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1b90:	f011 0f10 	tst.w	r1, #16
    1b94:	d0c4      	beq.n	1b20 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1b96:	47c8      	blx	r9
    1b98:	e7c2      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    1b9a:	2100      	movs	r1, #0
    1b9c:	47c0      	blx	r8
    1b9e:	e7bf      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    1ba0:	2101      	movs	r1, #1
    1ba2:	4b0a      	ldr	r3, [pc, #40]	; (1bcc <_usb_d_dev_handler+0x26c>)
    1ba4:	4798      	blx	r3
    1ba6:	e7bb      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    1ba8:	2101      	movs	r1, #1
    1baa:	47c0      	blx	r8
    1bac:	e7b8      	b.n	1b20 <_usb_d_dev_handler+0x1c0>
    1bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1bb2:	bf00      	nop
    1bb4:	2000017c 	.word	0x2000017c
    1bb8:	20000108 	.word	0x20000108
    1bbc:	40001000 	.word	0x40001000
    1bc0:	000015a9 	.word	0x000015a9
    1bc4:	000013e5 	.word	0x000013e5
    1bc8:	000015ed 	.word	0x000015ed
    1bcc:	00001771 	.word	0x00001771
    1bd0:	00001369 	.word	0x00001369
    1bd4:	000014a9 	.word	0x000014a9

00001bd8 <_usb_d_dev_init>:
{
    1bd8:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1bda:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1bde:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1be0:	f013 0f01 	tst.w	r3, #1
    1be4:	d124      	bne.n	1c30 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1be6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1bea:	7893      	ldrb	r3, [r2, #2]
    1bec:	f013 0f03 	tst.w	r3, #3
    1bf0:	d1fb      	bne.n	1bea <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1bf2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1bf6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1bf8:	f013 0f02 	tst.w	r3, #2
    1bfc:	d00f      	beq.n	1c1e <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1bfe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c02:	7813      	ldrb	r3, [r2, #0]
    1c04:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1c08:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1c0a:	7893      	ldrb	r3, [r2, #2]
    1c0c:	f013 0f03 	tst.w	r3, #3
    1c10:	d1fb      	bne.n	1c0a <_usb_d_dev_init+0x32>
    1c12:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c16:	7893      	ldrb	r3, [r2, #2]
    1c18:	f013 0f02 	tst.w	r3, #2
    1c1c:	d1fb      	bne.n	1c16 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1c1e:	2201      	movs	r2, #1
    1c20:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c24:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1c26:	461a      	mov	r2, r3
    1c28:	7893      	ldrb	r3, [r2, #2]
    1c2a:	f013 0f03 	tst.w	r3, #3
    1c2e:	d1fb      	bne.n	1c28 <_usb_d_dev_init+0x50>
    1c30:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c34:	7893      	ldrb	r3, [r2, #2]
    1c36:	f013 0f01 	tst.w	r3, #1
    1c3a:	d1fb      	bne.n	1c34 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1c3c:	4b21      	ldr	r3, [pc, #132]	; (1cc4 <_usb_d_dev_init+0xec>)
    1c3e:	4a22      	ldr	r2, [pc, #136]	; (1cc8 <_usb_d_dev_init+0xf0>)
    1c40:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1c42:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1c44:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1c46:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1c48:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1c4a:	4b20      	ldr	r3, [pc, #128]	; (1ccc <_usb_d_dev_init+0xf4>)
    1c4c:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1c4e:	4b20      	ldr	r3, [pc, #128]	; (1cd0 <_usb_d_dev_init+0xf8>)
    1c50:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1c52:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1c56:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1c5a:	f011 011f 	ands.w	r1, r1, #31
    1c5e:	d02b      	beq.n	1cb8 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1c60:	291f      	cmp	r1, #31
    1c62:	bf08      	it	eq
    1c64:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1c66:	b34b      	cbz	r3, 1cbc <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1c68:	2b1f      	cmp	r3, #31
    1c6a:	bf08      	it	eq
    1c6c:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1c6e:	b33a      	cbz	r2, 1cc0 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1c70:	2a07      	cmp	r2, #7
    1c72:	bf08      	it	eq
    1c74:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1c76:	f003 031f 	and.w	r3, r3, #31
    1c7a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1c7e:	0312      	lsls	r2, r2, #12
    1c80:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    1c84:	4313      	orrs	r3, r2
    1c86:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c8a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1c8c:	78d3      	ldrb	r3, [r2, #3]
    1c8e:	f043 0303 	orr.w	r3, r3, #3
    1c92:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1c94:	78d3      	ldrb	r3, [r2, #3]
    1c96:	f043 030c 	orr.w	r3, r3, #12
    1c9a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1c9c:	2304      	movs	r3, #4
    1c9e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ca0:	7893      	ldrb	r3, [r2, #2]
    1ca2:	f013 0f03 	tst.w	r3, #3
    1ca6:	d1fb      	bne.n	1ca0 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1ca8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cac:	4a05      	ldr	r2, [pc, #20]	; (1cc4 <_usb_d_dev_init+0xec>)
    1cae:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1cb0:	2201      	movs	r2, #1
    1cb2:	811a      	strh	r2, [r3, #8]
}
    1cb4:	2000      	movs	r0, #0
    1cb6:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    1cb8:	2109      	movs	r1, #9
    1cba:	e7d4      	b.n	1c66 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    1cbc:	2319      	movs	r3, #25
    1cbe:	e7d6      	b.n	1c6e <_usb_d_dev_init+0x96>
		pad_trim = 6;
    1cc0:	2206      	movs	r2, #6
    1cc2:	e7d8      	b.n	1c76 <_usb_d_dev_init+0x9e>
    1cc4:	20000108 	.word	0x20000108
    1cc8:	00001365 	.word	0x00001365
    1ccc:	000015a9 	.word	0x000015a9
    1cd0:	00800084 	.word	0x00800084

00001cd4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1cd4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cd8:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1cda:	f013 0f03 	tst.w	r3, #3
    1cde:	d129      	bne.n	1d34 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ce0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ce4:	7893      	ldrb	r3, [r2, #2]
    1ce6:	f013 0f03 	tst.w	r3, #3
    1cea:	d1fb      	bne.n	1ce4 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1cec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1cf4:	f013 0f02 	tst.w	r3, #2
    1cf8:	d108      	bne.n	1d0c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1cfa:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1cfe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1d02:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d04:	7893      	ldrb	r3, [r2, #2]
    1d06:	f013 0f03 	tst.w	r3, #3
    1d0a:	d1fb      	bne.n	1d04 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d0c:	4b0b      	ldr	r3, [pc, #44]	; (1d3c <_usb_d_dev_enable+0x68>)
    1d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1d12:	609a      	str	r2, [r3, #8]
    1d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1d18:	609a      	str	r2, [r3, #8]
    1d1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1d1e:	609a      	str	r2, [r3, #8]
    1d20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1d24:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d26:	f240 228d 	movw	r2, #653	; 0x28d
    1d2a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d2e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1d30:	2000      	movs	r0, #0
    1d32:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1d34:	f06f 0010 	mvn.w	r0, #16
}
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	e000e100 	.word	0xe000e100

00001d40 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1d40:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1d44:	8913      	ldrh	r3, [r2, #8]
    1d46:	f023 0301 	bic.w	r3, r3, #1
    1d4a:	041b      	lsls	r3, r3, #16
    1d4c:	0c1b      	lsrs	r3, r3, #16
    1d4e:	8113      	strh	r3, [r2, #8]
    1d50:	4770      	bx	lr

00001d52 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1d52:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1d56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d5a:	7298      	strb	r0, [r3, #10]
    1d5c:	4770      	bx	lr
	...

00001d60 <_usb_d_dev_ep_init>:
{
    1d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d62:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1d66:	f010 050f 	ands.w	r5, r0, #15
    1d6a:	d04d      	beq.n	1e08 <_usb_d_dev_ep_init+0xa8>
    1d6c:	f1be 0f00 	cmp.w	lr, #0
    1d70:	bfb4      	ite	lt
    1d72:	1cac      	addlt	r4, r5, #2
    1d74:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1d76:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1d7a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    1d7c:	2d02      	cmp	r5, #2
    1d7e:	d947      	bls.n	1e10 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    1d80:	f06f 0011 	mvn.w	r0, #17
    1d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1d86:	f1be 0f00 	cmp.w	lr, #0
    1d8a:	db1b      	blt.n	1dc4 <_usb_d_dev_ep_init+0x64>
    1d8c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1d90:	4e37      	ldr	r6, [pc, #220]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1d92:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1d96:	2d00      	cmp	r5, #0
    1d98:	d15e      	bne.n	1e58 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1d9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d9e:	4d34      	ldr	r5, [pc, #208]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1da0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    1da4:	4d33      	ldr	r5, [pc, #204]	; (1e74 <_usb_d_dev_ep_init+0x114>)
    1da6:	00a6      	lsls	r6, r4, #2
    1da8:	1933      	adds	r3, r6, r4
    1daa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1dae:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    1db2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    1db6:	3101      	adds	r1, #1
    1db8:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    1dbc:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    1dc0:	2000      	movs	r0, #0
    1dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1dc4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1dc8:	4e29      	ldr	r6, [pc, #164]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1dca:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1dce:	686d      	ldr	r5, [r5, #4]
    1dd0:	b935      	cbnz	r5, 1de0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1dd6:	4d26      	ldr	r5, [pc, #152]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1dd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1ddc:	685f      	ldr	r7, [r3, #4]
    1dde:	e7e1      	b.n	1da4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1de0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1de4:	4e22      	ldr	r6, [pc, #136]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1de6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1dea:	896d      	ldrh	r5, [r5, #10]
    1dec:	4295      	cmp	r5, r2
    1dee:	daf0      	bge.n	1dd2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    1df0:	f06f 0012 	mvn.w	r0, #18
    1df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1df6:	f06f 0013 	mvn.w	r0, #19
    1dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1dfc:	f06f 0013 	mvn.w	r0, #19
    1e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    1e02:	f06f 0012 	mvn.w	r0, #18
    1e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1e08:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    1e0c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1e0e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    1e10:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    1e14:	4f17      	ldr	r7, [pc, #92]	; (1e74 <_usb_d_dev_ep_init+0x114>)
    1e16:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    1e1a:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    1e1e:	2eff      	cmp	r6, #255	; 0xff
    1e20:	d1e9      	bne.n	1df6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1e22:	2900      	cmp	r1, #0
    1e24:	d1af      	bne.n	1d86 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e26:	b125      	cbz	r5, 1e32 <_usb_d_dev_ep_init+0xd2>
    1e28:	f1be 0f00 	cmp.w	lr, #0
    1e2c:	bfa4      	itt	ge
    1e2e:	3502      	addge	r5, #2
    1e30:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    1e32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1e36:	4e0f      	ldr	r6, [pc, #60]	; (1e74 <_usb_d_dev_ep_init+0x114>)
    1e38:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1e3c:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    1e40:	2dff      	cmp	r5, #255	; 0xff
    1e42:	d1db      	bne.n	1dfc <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    1e44:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e48:	4e09      	ldr	r6, [pc, #36]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1e4a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1e4e:	2d00      	cmp	r5, #0
    1e50:	d0d7      	beq.n	1e02 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e52:	f1be 0f00 	cmp.w	lr, #0
    1e56:	dbb5      	blt.n	1dc4 <_usb_d_dev_ep_init+0x64>
    1e58:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e5c:	4e04      	ldr	r6, [pc, #16]	; (1e70 <_usb_d_dev_ep_init+0x110>)
    1e5e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1e62:	892d      	ldrh	r5, [r5, #8]
    1e64:	4295      	cmp	r5, r2
    1e66:	da98      	bge.n	1d9a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    1e68:	f06f 0012 	mvn.w	r0, #18
    1e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e6e:	bf00      	nop
    1e70:	000031ec 	.word	0x000031ec
    1e74:	20000108 	.word	0x20000108

00001e78 <_usb_d_dev_ep_deinit>:
{
    1e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e7a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e7c:	f010 060f 	ands.w	r6, r0, #15
    1e80:	d00e      	beq.n	1ea0 <_usb_d_dev_ep_deinit+0x28>
    1e82:	2f00      	cmp	r7, #0
    1e84:	bfb4      	ite	lt
    1e86:	1cb3      	addlt	r3, r6, #2
    1e88:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1e8a:	2e02      	cmp	r6, #2
    1e8c:	d900      	bls.n	1e90 <_usb_d_dev_ep_deinit+0x18>
    1e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    1e90:	461d      	mov	r5, r3
    1e92:	3301      	adds	r3, #1
    1e94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e98:	4a24      	ldr	r2, [pc, #144]	; (1f2c <_usb_d_dev_ep_deinit+0xb4>)
    1e9a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    1e9e:	e002      	b.n	1ea6 <_usb_d_dev_ep_deinit+0x2e>
    1ea0:	f8df e094 	ldr.w	lr, [pc, #148]	; 1f38 <_usb_d_dev_ep_deinit+0xc0>
    1ea4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1ea6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1eaa:	4a21      	ldr	r2, [pc, #132]	; (1f30 <_usb_d_dev_ep_deinit+0xb8>)
    1eac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1eb0:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    1eb4:	2aff      	cmp	r2, #255	; 0xff
    1eb6:	d0ea      	beq.n	1e8e <_usb_d_dev_ep_deinit+0x16>
    1eb8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1eba:	2203      	movs	r2, #3
    1ebc:	0ff9      	lsrs	r1, r7, #31
    1ebe:	4670      	mov	r0, lr
    1ec0:	4b1c      	ldr	r3, [pc, #112]	; (1f34 <_usb_d_dev_ep_deinit+0xbc>)
    1ec2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ec4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ec8:	4a19      	ldr	r2, [pc, #100]	; (1f30 <_usb_d_dev_ep_deinit+0xb8>)
    1eca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ece:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1ed2:	f003 0307 	and.w	r3, r3, #7
    1ed6:	2b01      	cmp	r3, #1
    1ed8:	d016      	beq.n	1f08 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    1eda:	2f00      	cmp	r7, #0
    1edc:	db1b      	blt.n	1f16 <_usb_d_dev_ep_deinit+0x9e>
    1ede:	0160      	lsls	r0, r4, #5
    1ee0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1ee4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    1ee8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    1eec:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    1ef0:	4b0f      	ldr	r3, [pc, #60]	; (1f30 <_usb_d_dev_ep_deinit+0xb8>)
    1ef2:	00aa      	lsls	r2, r5, #2
    1ef4:	1951      	adds	r1, r2, r5
    1ef6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1efa:	2000      	movs	r0, #0
    1efc:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    1f00:	22ff      	movs	r2, #255	; 0xff
    1f02:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    1f06:	e7c2      	b.n	1e8e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1f08:	0160      	lsls	r0, r4, #5
    1f0a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1f0e:	2300      	movs	r3, #0
    1f10:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    1f14:	e7ec      	b.n	1ef0 <_usb_d_dev_ep_deinit+0x78>
    1f16:	0176      	lsls	r6, r6, #5
    1f18:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1f1c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    1f20:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    1f24:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    1f28:	e7e2      	b.n	1ef0 <_usb_d_dev_ep_deinit+0x78>
    1f2a:	bf00      	nop
    1f2c:	20000168 	.word	0x20000168
    1f30:	20000108 	.word	0x20000108
    1f34:	0000143d 	.word	0x0000143d
    1f38:	2000017c 	.word	0x2000017c

00001f3c <_usb_d_dev_ep_enable>:
{
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f40:	f010 000f 	ands.w	r0, r0, #15
    1f44:	f000 80a6 	beq.w	2094 <_usb_d_dev_ep_enable+0x158>
    1f48:	2f00      	cmp	r7, #0
    1f4a:	bfb4      	ite	lt
    1f4c:	1c83      	addlt	r3, r0, #2
    1f4e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1f50:	4606      	mov	r6, r0
    1f52:	0142      	lsls	r2, r0, #5
    1f54:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f58:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    1f5c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f5e:	2802      	cmp	r0, #2
    1f60:	f240 809f 	bls.w	20a2 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    1f64:	f06f 0011 	mvn.w	r0, #17
    1f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1f6a:	f014 0f77 	tst.w	r4, #119	; 0x77
    1f6e:	f040 8088 	bne.w	2082 <_usb_d_dev_ep_enable+0x146>
    1f72:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1f76:	2111      	movs	r1, #17
    1f78:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1f7c:	4c97      	ldr	r4, [pc, #604]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    1f7e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    1f82:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    1f86:	4996      	ldr	r1, [pc, #600]	; (21e0 <_usb_d_dev_ep_enable+0x2a4>)
    1f88:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1f8c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1f90:	f200 80cc 	bhi.w	212c <_usb_d_dev_ep_enable+0x1f0>
    1f94:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1f98:	f200 810a 	bhi.w	21b0 <_usb_d_dev_ep_enable+0x274>
    1f9c:	2c80      	cmp	r4, #128	; 0x80
    1f9e:	f200 80f9 	bhi.w	2194 <_usb_d_dev_ep_enable+0x258>
    1fa2:	2c40      	cmp	r4, #64	; 0x40
    1fa4:	f200 810b 	bhi.w	21be <_usb_d_dev_ep_enable+0x282>
    1fa8:	2c20      	cmp	r4, #32
    1faa:	f200 80fa 	bhi.w	21a2 <_usb_d_dev_ep_enable+0x266>
    1fae:	2c10      	cmp	r4, #16
    1fb0:	f200 810c 	bhi.w	21cc <_usb_d_dev_ep_enable+0x290>
    1fb4:	2c08      	cmp	r4, #8
    1fb6:	bf94      	ite	ls
    1fb8:	2700      	movls	r7, #0
    1fba:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1fbc:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1fc0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1fc2:	f3c4 010d 	ubfx	r1, r4, #0, #14
    1fc6:	e0b7      	b.n	2138 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1fc8:	f014 0f70 	tst.w	r4, #112	; 0x70
    1fcc:	d15c      	bne.n	2088 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1fce:	4d83      	ldr	r5, [pc, #524]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    1fd0:	009f      	lsls	r7, r3, #2
    1fd2:	18f9      	adds	r1, r7, r3
    1fd4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    1fd8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    1fdc:	0109      	lsls	r1, r1, #4
    1fde:	f001 0170 	and.w	r1, r1, #112	; 0x70
    1fe2:	430c      	orrs	r4, r1
    1fe4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1fe8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1fec:	443b      	add	r3, r7
    1fee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1ff2:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    1ff6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1ffe:	d80f      	bhi.n	2020 <_usb_d_dev_ep_enable+0xe4>
    2000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2004:	d819      	bhi.n	203a <_usb_d_dev_ep_enable+0xfe>
    2006:	2b80      	cmp	r3, #128	; 0x80
    2008:	d819      	bhi.n	203e <_usb_d_dev_ep_enable+0x102>
    200a:	2b40      	cmp	r3, #64	; 0x40
    200c:	d819      	bhi.n	2042 <_usb_d_dev_ep_enable+0x106>
    200e:	2b20      	cmp	r3, #32
    2010:	d819      	bhi.n	2046 <_usb_d_dev_ep_enable+0x10a>
    2012:	2b10      	cmp	r3, #16
    2014:	d819      	bhi.n	204a <_usb_d_dev_ep_enable+0x10e>
    2016:	2b08      	cmp	r3, #8
    2018:	bf94      	ite	ls
    201a:	2300      	movls	r3, #0
    201c:	2301      	movhi	r3, #1
    201e:	e000      	b.n	2022 <_usb_d_dev_ep_enable+0xe6>
    2020:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2022:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    2026:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2028:	2380      	movs	r3, #128	; 0x80
    202a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    202e:	4b6b      	ldr	r3, [pc, #428]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    2030:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2034:	2000      	movs	r0, #0
    2036:	76b0      	strb	r0, [r6, #26]
    2038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    203a:	2306      	movs	r3, #6
    203c:	e7f1      	b.n	2022 <_usb_d_dev_ep_enable+0xe6>
    203e:	2305      	movs	r3, #5
    2040:	e7ef      	b.n	2022 <_usb_d_dev_ep_enable+0xe6>
    2042:	2304      	movs	r3, #4
    2044:	e7ed      	b.n	2022 <_usb_d_dev_ep_enable+0xe6>
    2046:	2303      	movs	r3, #3
    2048:	e7eb      	b.n	2022 <_usb_d_dev_ep_enable+0xe6>
    204a:	2302      	movs	r3, #2
    204c:	e7e9      	b.n	2022 <_usb_d_dev_ep_enable+0xe6>
    204e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2050:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2054:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2056:	2340      	movs	r3, #64	; 0x40
    2058:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    205c:	4b5f      	ldr	r3, [pc, #380]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    205e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2062:	2000      	movs	r0, #0
    2064:	72b0      	strb	r0, [r6, #10]
    2066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2068:	2106      	movs	r1, #6
    206a:	e7f1      	b.n	2050 <_usb_d_dev_ep_enable+0x114>
    206c:	2105      	movs	r1, #5
    206e:	e7ef      	b.n	2050 <_usb_d_dev_ep_enable+0x114>
    2070:	2104      	movs	r1, #4
    2072:	e7ed      	b.n	2050 <_usb_d_dev_ep_enable+0x114>
    2074:	2103      	movs	r1, #3
    2076:	e7eb      	b.n	2050 <_usb_d_dev_ep_enable+0x114>
    2078:	2102      	movs	r1, #2
    207a:	e7e9      	b.n	2050 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    207c:	f06f 0011 	mvn.w	r0, #17
    2080:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2082:	f06f 0013 	mvn.w	r0, #19
    2086:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2088:	f06f 0013 	mvn.w	r0, #19
    208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    208e:	f06f 0013 	mvn.w	r0, #19
    2092:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2094:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2098:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    209c:	b2e4      	uxtb	r4, r4
    209e:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    20a0:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    20a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    20a6:	494d      	ldr	r1, [pc, #308]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    20a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    20ac:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    20b0:	2dff      	cmp	r5, #255	; 0xff
    20b2:	d0e3      	beq.n	207c <_usb_d_dev_ep_enable+0x140>
    20b4:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    20b6:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    20b8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    20bc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    20c0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    20c4:	f001 0107 	and.w	r1, r1, #7
    20c8:	2901      	cmp	r1, #1
    20ca:	f43f af4e 	beq.w	1f6a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    20ce:	2f00      	cmp	r7, #0
    20d0:	f6ff af7a 	blt.w	1fc8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    20d4:	f014 0f07 	tst.w	r4, #7
    20d8:	d1d9      	bne.n	208e <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    20da:	4d40      	ldr	r5, [pc, #256]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    20dc:	009f      	lsls	r7, r3, #2
    20de:	18f9      	adds	r1, r7, r3
    20e0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    20e4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    20e8:	f001 0107 	and.w	r1, r1, #7
    20ec:	430c      	orrs	r4, r1
    20ee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    20f2:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20f6:	443b      	add	r3, r7
    20f8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    20fc:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    2100:	4b37      	ldr	r3, [pc, #220]	; (21e0 <_usb_d_dev_ep_enable+0x2a4>)
    2102:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2106:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    210a:	d8a0      	bhi.n	204e <_usb_d_dev_ep_enable+0x112>
    210c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    2110:	d8aa      	bhi.n	2068 <_usb_d_dev_ep_enable+0x12c>
    2112:	2980      	cmp	r1, #128	; 0x80
    2114:	d8aa      	bhi.n	206c <_usb_d_dev_ep_enable+0x130>
    2116:	2940      	cmp	r1, #64	; 0x40
    2118:	d8aa      	bhi.n	2070 <_usb_d_dev_ep_enable+0x134>
    211a:	2920      	cmp	r1, #32
    211c:	d8aa      	bhi.n	2074 <_usb_d_dev_ep_enable+0x138>
    211e:	2910      	cmp	r1, #16
    2120:	d8aa      	bhi.n	2078 <_usb_d_dev_ep_enable+0x13c>
    2122:	2908      	cmp	r1, #8
    2124:	bf94      	ite	ls
    2126:	2100      	movls	r1, #0
    2128:	2101      	movhi	r1, #1
    212a:	e791      	b.n	2050 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    212c:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2130:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2132:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2136:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2138:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    213c:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    213e:	2140      	movs	r1, #64	; 0x40
    2140:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2144:	2080      	movs	r0, #128	; 0x80
    2146:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    214a:	4a24      	ldr	r2, [pc, #144]	; (21dc <_usb_d_dev_ep_enable+0x2a0>)
    214c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    2150:	2000      	movs	r0, #0
    2152:	72b0      	strb	r0, [r6, #10]
    2154:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2156:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    215a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    215e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2162:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2166:	016d      	lsls	r5, r5, #5
    2168:	1953      	adds	r3, r2, r5
    216a:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    216c:	685a      	ldr	r2, [r3, #4]
    216e:	f364 329b 	bfi	r2, r4, #14, #14
    2172:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2174:	685a      	ldr	r2, [r3, #4]
    2176:	f360 020d 	bfi	r2, r0, #0, #14
    217a:	605a      	str	r2, [r3, #4]
    217c:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2180:	22b0      	movs	r2, #176	; 0xb0
    2182:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2186:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    218a:	461d      	mov	r5, r3
    218c:	2310      	movs	r3, #16
    218e:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2194:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2198:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    219a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    219e:	2705      	movs	r7, #5
    21a0:	e7ca      	b.n	2138 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21a2:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21a6:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21a8:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21ac:	2703      	movs	r7, #3
    21ae:	e7c3      	b.n	2138 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21b0:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21b4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21b6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21ba:	2706      	movs	r7, #6
    21bc:	e7bc      	b.n	2138 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21c2:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21c4:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21c8:	2704      	movs	r7, #4
    21ca:	e7b5      	b.n	2138 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21cc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21d0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21d2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21d6:	2702      	movs	r7, #2
    21d8:	e7ae      	b.n	2138 <_usb_d_dev_ep_enable+0x1fc>
    21da:	bf00      	nop
    21dc:	20000108 	.word	0x20000108
    21e0:	0fffc000 	.word	0x0fffc000

000021e4 <_usb_d_dev_ep_stall>:
{
    21e4:	b470      	push	{r4, r5, r6}
    21e6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    21e8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    21ea:	f010 000f 	ands.w	r0, r0, #15
    21ee:	d008      	beq.n	2202 <_usb_d_dev_ep_stall+0x1e>
    21f0:	2b00      	cmp	r3, #0
    21f2:	bfb4      	ite	lt
    21f4:	1c83      	addlt	r3, r0, #2
    21f6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    21f8:	2802      	cmp	r0, #2
    21fa:	d903      	bls.n	2204 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    21fc:	f06f 0011 	mvn.w	r0, #17
    2200:	e018      	b.n	2234 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    2202:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2204:	2901      	cmp	r1, #1
    2206:	d017      	beq.n	2238 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2208:	2900      	cmp	r1, #0
    220a:	d03a      	beq.n	2282 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    220c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2210:	4a45      	ldr	r2, [pc, #276]	; (2328 <_usb_d_dev_ep_stall+0x144>)
    2212:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2216:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    221a:	f003 030f 	and.w	r3, r3, #15
    221e:	015b      	lsls	r3, r3, #5
    2220:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2224:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2228:	2310      	movs	r3, #16
    222a:	40a3      	lsls	r3, r4
    222c:	421a      	tst	r2, r3
    222e:	bf14      	ite	ne
    2230:	2001      	movne	r0, #1
    2232:	2000      	moveq	r0, #0
}
    2234:	bc70      	pop	{r4, r5, r6}
    2236:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2238:	2510      	movs	r5, #16
    223a:	40a5      	lsls	r5, r4
    223c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    223e:	493a      	ldr	r1, [pc, #232]	; (2328 <_usb_d_dev_ep_stall+0x144>)
    2240:	009e      	lsls	r6, r3, #2
    2242:	18f2      	adds	r2, r6, r3
    2244:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2248:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    224c:	f002 020f 	and.w	r2, r2, #15
    2250:	0150      	lsls	r0, r2, #5
    2252:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2256:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    225a:	2020      	movs	r0, #32
    225c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2260:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2262:	0152      	lsls	r2, r2, #5
    2264:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2268:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    226c:	4433      	add	r3, r6
    226e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2272:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2276:	f042 0208 	orr.w	r2, r2, #8
    227a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    227e:	2000      	movs	r0, #0
    2280:	e7d8      	b.n	2234 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2282:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2286:	4928      	ldr	r1, [pc, #160]	; (2328 <_usb_d_dev_ep_stall+0x144>)
    2288:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    228c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2290:	f002 020f 	and.w	r2, r2, #15
    2294:	0151      	lsls	r1, r2, #5
    2296:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    229a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    229e:	2010      	movs	r0, #16
    22a0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    22a2:	4205      	tst	r5, r0
    22a4:	d03c      	beq.n	2320 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    22a6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    22a8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    22ac:	2020      	movs	r0, #32
    22ae:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    22b0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    22b2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    22b6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    22ba:	4202      	tst	r2, r0
    22bc:	d007      	beq.n	22ce <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22be:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    22c2:	2201      	movs	r2, #1
    22c4:	fa02 f404 	lsl.w	r4, r2, r4
    22c8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    22ca:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    22ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    22d2:	4815      	ldr	r0, [pc, #84]	; (2328 <_usb_d_dev_ep_stall+0x144>)
    22d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    22d8:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    22dc:	f002 0207 	and.w	r2, r2, #7
    22e0:	2a01      	cmp	r2, #1
    22e2:	d00c      	beq.n	22fe <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    22e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    22e8:	4a0f      	ldr	r2, [pc, #60]	; (2328 <_usb_d_dev_ep_stall+0x144>)
    22ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    22ee:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    22f2:	f36f 02c3 	bfc	r2, #3, #1
    22f6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    22fa:	2000      	movs	r0, #0
    22fc:	e79a      	b.n	2234 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    22fe:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2302:	f012 0f30 	tst.w	r2, #48	; 0x30
    2306:	d10d      	bne.n	2324 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2308:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    230c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2310:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2314:	f36f 02c3 	bfc	r2, #3, #1
    2318:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    231c:	2000      	movs	r0, #0
    231e:	e789      	b.n	2234 <_usb_d_dev_ep_stall+0x50>
    2320:	2000      	movs	r0, #0
    2322:	e787      	b.n	2234 <_usb_d_dev_ep_stall+0x50>
    2324:	2000      	movs	r0, #0
    2326:	e785      	b.n	2234 <_usb_d_dev_ep_stall+0x50>
    2328:	20000108 	.word	0x20000108

0000232c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    232c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    232e:	f000 040f 	and.w	r4, r0, #15
    2332:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2334:	4a14      	ldr	r2, [pc, #80]	; (2388 <_usb_d_dev_ep_read_req+0x5c>)
    2336:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2338:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    233a:	6840      	ldr	r0, [r0, #4]
    233c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2340:	2c02      	cmp	r4, #2
    2342:	d817      	bhi.n	2374 <_usb_d_dev_ep_read_req+0x48>
    2344:	b1c9      	cbz	r1, 237a <_usb_d_dev_ep_read_req+0x4e>
    2346:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    234a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    234e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2350:	2a11      	cmp	r2, #17
    2352:	d115      	bne.n	2380 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2354:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2358:	f012 0f10 	tst.w	r2, #16
    235c:	d102      	bne.n	2364 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    235e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2360:	bc30      	pop	{r4, r5}
    2362:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2364:	682c      	ldr	r4, [r5, #0]
    2366:	686a      	ldr	r2, [r5, #4]
    2368:	600c      	str	r4, [r1, #0]
    236a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    236c:	2210      	movs	r2, #16
    236e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2372:	e7f5      	b.n	2360 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2374:	f06f 0011 	mvn.w	r0, #17
    2378:	e7f2      	b.n	2360 <_usb_d_dev_ep_read_req+0x34>
    237a:	f06f 0011 	mvn.w	r0, #17
    237e:	e7ef      	b.n	2360 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2380:	f06f 0012 	mvn.w	r0, #18
    2384:	e7ec      	b.n	2360 <_usb_d_dev_ep_read_req+0x34>
    2386:	bf00      	nop
    2388:	20000108 	.word	0x20000108

0000238c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2390:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2392:	7a03      	ldrb	r3, [r0, #8]
    2394:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2396:	f013 030f 	ands.w	r3, r3, #15
    239a:	f000 80c2 	beq.w	2522 <_usb_d_dev_ep_trans+0x196>
    239e:	2e00      	cmp	r6, #0
    23a0:	bfb4      	ite	lt
    23a2:	1c9a      	addlt	r2, r3, #2
    23a4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    23a6:	4614      	mov	r4, r2
    23a8:	4969      	ldr	r1, [pc, #420]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    23aa:	f101 0760 	add.w	r7, r1, #96	; 0x60
    23ae:	1c55      	adds	r5, r2, #1
    23b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    23b4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    23b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    23bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    23c0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    23c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    23c8:	428a      	cmp	r2, r1
    23ca:	d025      	beq.n	2418 <_usb_d_dev_ep_trans+0x8c>
    23cc:	1e55      	subs	r5, r2, #1
    23ce:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    23d0:	6841      	ldr	r1, [r0, #4]
    23d2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    23d4:	2b02      	cmp	r3, #2
    23d6:	f200 8092 	bhi.w	24fe <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    23da:	6803      	ldr	r3, [r0, #0]
    23dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    23e0:	d31c      	bcc.n	241c <_usb_d_dev_ep_trans+0x90>
    23e2:	eb03 0c01 	add.w	ip, r3, r1
    23e6:	f8df e180 	ldr.w	lr, [pc, #384]	; 2568 <_usb_d_dev_ep_trans+0x1dc>
    23ea:	45f4      	cmp	ip, lr
    23ec:	d816      	bhi.n	241c <_usb_d_dev_ep_trans+0x90>
    23ee:	f013 0f03 	tst.w	r3, #3
    23f2:	d113      	bne.n	241c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    23f4:	2e00      	cmp	r6, #0
    23f6:	db2a      	blt.n	244e <_usb_d_dev_ep_trans+0xc2>
    23f8:	428a      	cmp	r2, r1
    23fa:	f200 809c 	bhi.w	2536 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    23fe:	b34d      	cbz	r5, 2454 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2400:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2404:	4a52      	ldr	r2, [pc, #328]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    2406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    240a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    240e:	2b00      	cmp	r3, #0
    2410:	d07b      	beq.n	250a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2412:	f04f 0800 	mov.w	r8, #0
    2416:	e00c      	b.n	2432 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2418:	4615      	mov	r5, r2
    241a:	e7d9      	b.n	23d0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    241c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2420:	4a4b      	ldr	r2, [pc, #300]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    2422:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    242a:	2b00      	cmp	r3, #0
    242c:	d06a      	beq.n	2504 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    242e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2432:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2436:	4a46      	ldr	r2, [pc, #280]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    2438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    243c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2440:	f013 0f08 	tst.w	r3, #8
    2444:	d009      	beq.n	245a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2446:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2448:	b003      	add	sp, #12
    244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    244e:	f04f 0800 	mov.w	r8, #0
    2452:	e7ee      	b.n	2432 <_usb_d_dev_ep_trans+0xa6>
    2454:	f04f 0800 	mov.w	r8, #0
    2458:	e7eb      	b.n	2432 <_usb_d_dev_ep_trans+0xa6>
    245a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    245c:	a801      	add	r0, sp, #4
    245e:	4b3d      	ldr	r3, [pc, #244]	; (2554 <_usb_d_dev_ep_trans+0x1c8>)
    2460:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2462:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2466:	4a3a      	ldr	r2, [pc, #232]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    2468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    246c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2470:	f013 0f40 	tst.w	r3, #64	; 0x40
    2474:	d13c      	bne.n	24f0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2476:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    247a:	4b35      	ldr	r3, [pc, #212]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    247c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2480:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2488:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    248c:	a801      	add	r0, sp, #4
    248e:	4b32      	ldr	r3, [pc, #200]	; (2558 <_usb_d_dev_ep_trans+0x1cc>)
    2490:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2492:	f8da 3000 	ldr.w	r3, [sl]
    2496:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    249a:	f8da 3004 	ldr.w	r3, [sl, #4]
    249e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    24a2:	2300      	movs	r3, #0
    24a4:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    24a8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    24aa:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    24ae:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    24b2:	f368 1345 	bfi	r3, r8, #5, #1
    24b6:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    24ba:	f89a 3009 	ldrb.w	r3, [sl, #9]
    24be:	b1e3      	cbz	r3, 24fa <_usb_d_dev_ep_trans+0x16e>
    24c0:	fab5 f585 	clz	r5, r5
    24c4:	096d      	lsrs	r5, r5, #5
    24c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    24ca:	4b21      	ldr	r3, [pc, #132]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    24cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    24d0:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    24d4:	f365 1304 	bfi	r3, r5, #4, #1
    24d8:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    24dc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    24de:	f04f 0100 	mov.w	r1, #0
    24e2:	4638      	mov	r0, r7
    24e4:	bfb4      	ite	lt
    24e6:	4b1d      	ldrlt	r3, [pc, #116]	; (255c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    24e8:	4b1d      	ldrge	r3, [pc, #116]	; (2560 <_usb_d_dev_ep_trans+0x1d4>)
    24ea:	4798      	blx	r3
	return ERR_NONE;
    24ec:	2000      	movs	r0, #0
    24ee:	e7ab      	b.n	2448 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    24f0:	a801      	add	r0, sp, #4
    24f2:	4b19      	ldr	r3, [pc, #100]	; (2558 <_usb_d_dev_ep_trans+0x1cc>)
    24f4:	4798      	blx	r3
		return USB_BUSY;
    24f6:	2001      	movs	r0, #1
    24f8:	e7a6      	b.n	2448 <_usb_d_dev_ep_trans+0xbc>
    24fa:	2500      	movs	r5, #0
    24fc:	e7e3      	b.n	24c6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    24fe:	f06f 0011 	mvn.w	r0, #17
    2502:	e7a1      	b.n	2448 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2504:	f06f 0012 	mvn.w	r0, #18
    2508:	e79e      	b.n	2448 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    250a:	f06f 0011 	mvn.w	r0, #17
    250e:	e79b      	b.n	2448 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2510:	f06f 0012 	mvn.w	r0, #18
    2514:	e798      	b.n	2448 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2516:	6841      	ldr	r1, [r0, #4]
    2518:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    251c:	4f11      	ldr	r7, [pc, #68]	; (2564 <_usb_d_dev_ep_trans+0x1d8>)
    251e:	2400      	movs	r4, #0
    2520:	e75b      	b.n	23da <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2522:	4a0b      	ldr	r2, [pc, #44]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    2524:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2528:	f240 31ff 	movw	r1, #1023	; 0x3ff
    252c:	428a      	cmp	r2, r1
    252e:	d0f2      	beq.n	2516 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2530:	4f0c      	ldr	r7, [pc, #48]	; (2564 <_usb_d_dev_ep_trans+0x1d8>)
    2532:	2400      	movs	r4, #0
    2534:	e74a      	b.n	23cc <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2536:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    253a:	4a05      	ldr	r2, [pc, #20]	; (2550 <_usb_d_dev_ep_trans+0x1c4>)
    253c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2544:	2b00      	cmp	r3, #0
    2546:	d0e3      	beq.n	2510 <_usb_d_dev_ep_trans+0x184>
    2548:	f04f 0801 	mov.w	r8, #1
    254c:	e771      	b.n	2432 <_usb_d_dev_ep_trans+0xa6>
    254e:	bf00      	nop
    2550:	20000108 	.word	0x20000108
    2554:	0000055d 	.word	0x0000055d
    2558:	0000056b 	.word	0x0000056b
    255c:	000015ed 	.word	0x000015ed
    2560:	00001771 	.word	0x00001771
    2564:	2000017c 	.word	0x2000017c
    2568:	20041fff 	.word	0x20041fff

0000256c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    256c:	4b06      	ldr	r3, [pc, #24]	; (2588 <_usb_d_dev_register_callback+0x1c>)
    256e:	2900      	cmp	r1, #0
    2570:	bf08      	it	eq
    2572:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2574:	2801      	cmp	r0, #1
    2576:	d003      	beq.n	2580 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2578:	b908      	cbnz	r0, 257e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    257a:	4b04      	ldr	r3, [pc, #16]	; (258c <_usb_d_dev_register_callback+0x20>)
    257c:	6619      	str	r1, [r3, #96]	; 0x60
    257e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2580:	4b02      	ldr	r3, [pc, #8]	; (258c <_usb_d_dev_register_callback+0x20>)
    2582:	6659      	str	r1, [r3, #100]	; 0x64
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	00001365 	.word	0x00001365
    258c:	20000108 	.word	0x20000108

00002590 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2590:	4b09      	ldr	r3, [pc, #36]	; (25b8 <_usb_d_dev_register_ep_callback+0x28>)
    2592:	2900      	cmp	r1, #0
    2594:	bf08      	it	eq
    2596:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2598:	4603      	mov	r3, r0
    259a:	b130      	cbz	r0, 25aa <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    259c:	2801      	cmp	r0, #1
    259e:	d007      	beq.n	25b0 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    25a0:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    25a2:	bf04      	itt	eq
    25a4:	4b05      	ldreq	r3, [pc, #20]	; (25bc <_usb_d_dev_register_ep_callback+0x2c>)
    25a6:	6719      	streq	r1, [r3, #112]	; 0x70
    25a8:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    25aa:	4b04      	ldr	r3, [pc, #16]	; (25bc <_usb_d_dev_register_ep_callback+0x2c>)
    25ac:	6699      	str	r1, [r3, #104]	; 0x68
    25ae:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    25b0:	4b02      	ldr	r3, [pc, #8]	; (25bc <_usb_d_dev_register_ep_callback+0x2c>)
    25b2:	66d9      	str	r1, [r3, #108]	; 0x6c
    25b4:	4770      	bx	lr
    25b6:	bf00      	nop
    25b8:	00001365 	.word	0x00001365
    25bc:	20000108 	.word	0x20000108

000025c0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    25c0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    25c2:	4b01      	ldr	r3, [pc, #4]	; (25c8 <USB_0_Handler+0x8>)
    25c4:	4798      	blx	r3
    25c6:	bd08      	pop	{r3, pc}
    25c8:	00001961 	.word	0x00001961

000025cc <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    25cc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    25ce:	4b01      	ldr	r3, [pc, #4]	; (25d4 <USB_1_Handler+0x8>)
    25d0:	4798      	blx	r3
    25d2:	bd08      	pop	{r3, pc}
    25d4:	00001961 	.word	0x00001961

000025d8 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    25d8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    25da:	4b01      	ldr	r3, [pc, #4]	; (25e0 <USB_2_Handler+0x8>)
    25dc:	4798      	blx	r3
    25de:	bd08      	pop	{r3, pc}
    25e0:	00001961 	.word	0x00001961

000025e4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    25e4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    25e6:	4b01      	ldr	r3, [pc, #4]	; (25ec <USB_3_Handler+0x8>)
    25e8:	4798      	blx	r3
    25ea:	bd08      	pop	{r3, pc}
    25ec:	00001961 	.word	0x00001961

000025f0 <main>:
#include <atmel_start.h>

int main(void)
{
    25f0:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    25f2:	4b01      	ldr	r3, [pc, #4]	; (25f8 <main+0x8>)
    25f4:	4798      	blx	r3
    25f6:	e7fe      	b.n	25f6 <main+0x6>
    25f8:	000002d1 	.word	0x000002d1

000025fc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    25fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fe:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2600:	780b      	ldrb	r3, [r1, #0]
    2602:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2606:	2c01      	cmp	r4, #1
    2608:	d15e      	bne.n	26c8 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    260a:	888c      	ldrh	r4, [r1, #4]
    260c:	4d35      	ldr	r5, [pc, #212]	; (26e4 <cdcdf_acm_req+0xe8>)
    260e:	782d      	ldrb	r5, [r5, #0]
    2610:	42a5      	cmp	r5, r4
    2612:	d003      	beq.n	261c <cdcdf_acm_req+0x20>
    2614:	4d33      	ldr	r5, [pc, #204]	; (26e4 <cdcdf_acm_req+0xe8>)
    2616:	786d      	ldrb	r5, [r5, #1]
    2618:	42a5      	cmp	r5, r4
    261a:	d158      	bne.n	26ce <cdcdf_acm_req+0xd2>
    261c:	4616      	mov	r6, r2
    261e:	460c      	mov	r4, r1
    2620:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2622:	f013 0f80 	tst.w	r3, #128	; 0x80
    2626:	d10c      	bne.n	2642 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2628:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    262a:	4b2f      	ldr	r3, [pc, #188]	; (26e8 <cdcdf_acm_req+0xec>)
    262c:	4798      	blx	r3
    262e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2630:	7863      	ldrb	r3, [r4, #1]
    2632:	2b20      	cmp	r3, #32
    2634:	d013      	beq.n	265e <cdcdf_acm_req+0x62>
    2636:	2b22      	cmp	r3, #34	; 0x22
    2638:	d032      	beq.n	26a0 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    263a:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    263e:	b003      	add	sp, #12
    2640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2642:	2a01      	cmp	r2, #1
    2644:	d046      	beq.n	26d4 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2646:	784b      	ldrb	r3, [r1, #1]
    2648:	2b21      	cmp	r3, #33	; 0x21
    264a:	d145      	bne.n	26d8 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    264c:	88cb      	ldrh	r3, [r1, #6]
    264e:	2b07      	cmp	r3, #7
    2650:	d145      	bne.n	26de <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2652:	2300      	movs	r3, #0
    2654:	2207      	movs	r2, #7
    2656:	4925      	ldr	r1, [pc, #148]	; (26ec <cdcdf_acm_req+0xf0>)
    2658:	4c25      	ldr	r4, [pc, #148]	; (26f0 <cdcdf_acm_req+0xf4>)
    265a:	47a0      	blx	r4
    265c:	e7ef      	b.n	263e <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    265e:	2f07      	cmp	r7, #7
    2660:	d12b      	bne.n	26ba <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2662:	b1be      	cbz	r6, 2694 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2664:	6800      	ldr	r0, [r0, #0]
    2666:	9000      	str	r0, [sp, #0]
    2668:	888a      	ldrh	r2, [r1, #4]
    266a:	798b      	ldrb	r3, [r1, #6]
    266c:	f8ad 2004 	strh.w	r2, [sp, #4]
    2670:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2674:	4b1b      	ldr	r3, [pc, #108]	; (26e4 <cdcdf_acm_req+0xe8>)
    2676:	691b      	ldr	r3, [r3, #16]
    2678:	b113      	cbz	r3, 2680 <cdcdf_acm_req+0x84>
    267a:	4668      	mov	r0, sp
    267c:	4798      	blx	r3
    267e:	b1f8      	cbz	r0, 26c0 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2680:	4b18      	ldr	r3, [pc, #96]	; (26e4 <cdcdf_acm_req+0xe8>)
    2682:	aa02      	add	r2, sp, #8
    2684:	e912 0003 	ldmdb	r2, {r0, r1}
    2688:	6098      	str	r0, [r3, #8]
    268a:	8199      	strh	r1, [r3, #12]
    268c:	0c09      	lsrs	r1, r1, #16
    268e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2690:	2000      	movs	r0, #0
    2692:	e7d4      	b.n	263e <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2694:	2300      	movs	r3, #0
    2696:	2207      	movs	r2, #7
    2698:	4628      	mov	r0, r5
    269a:	4c15      	ldr	r4, [pc, #84]	; (26f0 <cdcdf_acm_req+0xf4>)
    269c:	47a0      	blx	r4
    269e:	e7ce      	b.n	263e <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    26a0:	2300      	movs	r3, #0
    26a2:	461a      	mov	r2, r3
    26a4:	4619      	mov	r1, r3
    26a6:	4618      	mov	r0, r3
    26a8:	4d11      	ldr	r5, [pc, #68]	; (26f0 <cdcdf_acm_req+0xf4>)
    26aa:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    26ac:	4b0d      	ldr	r3, [pc, #52]	; (26e4 <cdcdf_acm_req+0xe8>)
    26ae:	695b      	ldr	r3, [r3, #20]
    26b0:	b143      	cbz	r3, 26c4 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    26b2:	8860      	ldrh	r0, [r4, #2]
    26b4:	4798      	blx	r3
		return ERR_NONE;
    26b6:	2000      	movs	r0, #0
    26b8:	e7c1      	b.n	263e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    26ba:	f04f 30ff 	mov.w	r0, #4294967295
    26be:	e7be      	b.n	263e <cdcdf_acm_req+0x42>
			return ERR_NONE;
    26c0:	2000      	movs	r0, #0
    26c2:	e7bc      	b.n	263e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    26c4:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    26c6:	e7ba      	b.n	263e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    26c8:	f06f 0009 	mvn.w	r0, #9
    26cc:	e7b7      	b.n	263e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    26ce:	f06f 0009 	mvn.w	r0, #9
    26d2:	e7b4      	b.n	263e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    26d4:	2000      	movs	r0, #0
    26d6:	e7b2      	b.n	263e <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    26d8:	f06f 000c 	mvn.w	r0, #12
    26dc:	e7af      	b.n	263e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    26de:	f04f 30ff 	mov.w	r0, #4294967295
    26e2:	e7ac      	b.n	263e <cdcdf_acm_req+0x42>
    26e4:	200002f0 	.word	0x200002f0
    26e8:	00002f5d 	.word	0x00002f5d
    26ec:	200002f8 	.word	0x200002f8
    26f0:	00002a39 	.word	0x00002a39

000026f4 <cdcdf_acm_ctrl>:
{
    26f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26f8:	b083      	sub	sp, #12
    26fa:	4616      	mov	r6, r2
	switch (ctrl) {
    26fc:	2901      	cmp	r1, #1
    26fe:	d066      	beq.n	27ce <cdcdf_acm_ctrl+0xda>
    2700:	b141      	cbz	r1, 2714 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    2702:	2902      	cmp	r1, #2
    2704:	bf0c      	ite	eq
    2706:	f06f 001a 	mvneq.w	r0, #26
    270a:	f06f 000c 	mvnne.w	r0, #12
}
    270e:	b003      	add	sp, #12
    2710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2714:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    2718:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    271a:	2800      	cmp	r0, #0
    271c:	f000 8085 	beq.w	282a <cdcdf_acm_ctrl+0x136>
    2720:	f10a 3bff 	add.w	fp, sl, #4294967295
    2724:	f10a 0301 	add.w	r3, sl, #1
    2728:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    272a:	4f46      	ldr	r7, [pc, #280]	; (2844 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    272c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2854 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2730:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2858 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    2734:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2736:	7943      	ldrb	r3, [r0, #5]
    2738:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    273c:	2b02      	cmp	r3, #2
    273e:	d002      	beq.n	2746 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    2740:	f06f 0009 	mvn.w	r0, #9
    2744:	e7e3      	b.n	270e <cdcdf_acm_ctrl+0x1a>
    2746:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    274a:	f89b 3000 	ldrb.w	r3, [fp]
    274e:	429a      	cmp	r2, r3
    2750:	d06e      	beq.n	2830 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2752:	2bff      	cmp	r3, #255	; 0xff
    2754:	d16f      	bne.n	2836 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2756:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    275a:	2205      	movs	r2, #5
    275c:	6871      	ldr	r1, [r6, #4]
    275e:	4b3a      	ldr	r3, [pc, #232]	; (2848 <cdcdf_acm_ctrl+0x154>)
    2760:	4798      	blx	r3
		while (NULL != ep) {
    2762:	4604      	mov	r4, r0
    2764:	b1f8      	cbz	r0, 27a6 <cdcdf_acm_ctrl+0xb2>
    2766:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    276a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    276c:	7963      	ldrb	r3, [r4, #5]
    276e:	7922      	ldrb	r2, [r4, #4]
    2770:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2774:	b292      	uxth	r2, r2
    2776:	78e1      	ldrb	r1, [r4, #3]
    2778:	4628      	mov	r0, r5
    277a:	47b8      	blx	r7
    277c:	2800      	cmp	r0, #0
    277e:	d15d      	bne.n	283c <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2780:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2784:	bf14      	ite	ne
    2786:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    278a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    278e:	4628      	mov	r0, r5
    2790:	47c8      	blx	r9
			desc->sod = ep;
    2792:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2794:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2796:	6871      	ldr	r1, [r6, #4]
    2798:	4420      	add	r0, r4
    279a:	47c0      	blx	r8
		while (NULL != ep) {
    279c:	4604      	mov	r4, r0
    279e:	2800      	cmp	r0, #0
    27a0:	d1e3      	bne.n	276a <cdcdf_acm_ctrl+0x76>
    27a2:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    27a6:	6833      	ldr	r3, [r6, #0]
    27a8:	7818      	ldrb	r0, [r3, #0]
    27aa:	2204      	movs	r2, #4
    27ac:	6871      	ldr	r1, [r6, #4]
    27ae:	4418      	add	r0, r3
    27b0:	4b25      	ldr	r3, [pc, #148]	; (2848 <cdcdf_acm_ctrl+0x154>)
    27b2:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    27b4:	9b00      	ldr	r3, [sp, #0]
    27b6:	459b      	cmp	fp, r3
    27b8:	d004      	beq.n	27c4 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    27ba:	2800      	cmp	r0, #0
    27bc:	d1ba      	bne.n	2734 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    27be:	f06f 0009 	mvn.w	r0, #9
    27c2:	e7a4      	b.n	270e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    27c4:	2201      	movs	r2, #1
    27c6:	4b21      	ldr	r3, [pc, #132]	; (284c <cdcdf_acm_ctrl+0x158>)
    27c8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    27ca:	2000      	movs	r0, #0
    27cc:	e79f      	b.n	270e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    27ce:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    27d0:	b142      	cbz	r2, 27e4 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    27d2:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    27d4:	795b      	ldrb	r3, [r3, #5]
    27d6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    27da:	2b02      	cmp	r3, #2
    27dc:	d002      	beq.n	27e4 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    27de:	f06f 0009 	mvn.w	r0, #9
    27e2:	e794      	b.n	270e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    27e4:	7823      	ldrb	r3, [r4, #0]
    27e6:	2bff      	cmp	r3, #255	; 0xff
    27e8:	d008      	beq.n	27fc <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    27ea:	23ff      	movs	r3, #255	; 0xff
    27ec:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    27ee:	78a0      	ldrb	r0, [r4, #2]
    27f0:	4298      	cmp	r0, r3
    27f2:	d003      	beq.n	27fc <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    27f4:	4b16      	ldr	r3, [pc, #88]	; (2850 <cdcdf_acm_ctrl+0x15c>)
    27f6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    27f8:	23ff      	movs	r3, #255	; 0xff
    27fa:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    27fc:	7863      	ldrb	r3, [r4, #1]
    27fe:	2bff      	cmp	r3, #255	; 0xff
    2800:	d008      	beq.n	2814 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    2802:	23ff      	movs	r3, #255	; 0xff
    2804:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2806:	78e0      	ldrb	r0, [r4, #3]
    2808:	4298      	cmp	r0, r3
    280a:	d003      	beq.n	2814 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    280c:	4b10      	ldr	r3, [pc, #64]	; (2850 <cdcdf_acm_ctrl+0x15c>)
    280e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2810:	23ff      	movs	r3, #255	; 0xff
    2812:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2814:	7920      	ldrb	r0, [r4, #4]
    2816:	28ff      	cmp	r0, #255	; 0xff
    2818:	d003      	beq.n	2822 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    281a:	4b0d      	ldr	r3, [pc, #52]	; (2850 <cdcdf_acm_ctrl+0x15c>)
    281c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    281e:	23ff      	movs	r3, #255	; 0xff
    2820:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2822:	2000      	movs	r0, #0
    2824:	4b09      	ldr	r3, [pc, #36]	; (284c <cdcdf_acm_ctrl+0x158>)
    2826:	7158      	strb	r0, [r3, #5]
    2828:	e771      	b.n	270e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    282a:	f06f 0009 	mvn.w	r0, #9
    282e:	e76e      	b.n	270e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    2830:	f06f 0011 	mvn.w	r0, #17
    2834:	e76b      	b.n	270e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2836:	f06f 001b 	mvn.w	r0, #27
    283a:	e768      	b.n	270e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    283c:	f06f 0013 	mvn.w	r0, #19
    2840:	e765      	b.n	270e <cdcdf_acm_ctrl+0x1a>
    2842:	bf00      	nop
    2844:	00000aa9 	.word	0x00000aa9
    2848:	00002f7d 	.word	0x00002f7d
    284c:	200002f0 	.word	0x200002f0
    2850:	00000b11 	.word	0x00000b11
    2854:	00000b3d 	.word	0x00000b3d
    2858:	00002fb7 	.word	0x00002fb7

0000285c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    285c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    285e:	4b0a      	ldr	r3, [pc, #40]	; (2888 <cdcdf_acm_init+0x2c>)
    2860:	4798      	blx	r3
    2862:	2801      	cmp	r0, #1
    2864:	d80c      	bhi.n	2880 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2866:	4809      	ldr	r0, [pc, #36]	; (288c <cdcdf_acm_init+0x30>)
    2868:	4b09      	ldr	r3, [pc, #36]	; (2890 <cdcdf_acm_init+0x34>)
    286a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    286c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    286e:	3018      	adds	r0, #24
    2870:	4b08      	ldr	r3, [pc, #32]	; (2894 <cdcdf_acm_init+0x38>)
    2872:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2874:	4908      	ldr	r1, [pc, #32]	; (2898 <cdcdf_acm_init+0x3c>)
    2876:	2001      	movs	r0, #1
    2878:	4b08      	ldr	r3, [pc, #32]	; (289c <cdcdf_acm_init+0x40>)
    287a:	4798      	blx	r3
	return ERR_NONE;
    287c:	2000      	movs	r0, #0
    287e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2880:	f06f 0010 	mvn.w	r0, #16
}
    2884:	bd08      	pop	{r3, pc}
    2886:	bf00      	nop
    2888:	00002f69 	.word	0x00002f69
    288c:	200002f0 	.word	0x200002f0
    2890:	000026f5 	.word	0x000026f5
    2894:	00002f09 	.word	0x00002f09
    2898:	20000000 	.word	0x20000000
    289c:	00002e75 	.word	0x00002e75

000028a0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    28a0:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    28a2:	4b07      	ldr	r3, [pc, #28]	; (28c0 <usbdc_unconfig+0x20>)
    28a4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    28a6:	b14c      	cbz	r4, 28bc <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    28a8:	2600      	movs	r6, #0
    28aa:	2501      	movs	r5, #1
    28ac:	6863      	ldr	r3, [r4, #4]
    28ae:	4632      	mov	r2, r6
    28b0:	4629      	mov	r1, r5
    28b2:	4620      	mov	r0, r4
    28b4:	4798      	blx	r3
		func = func->next;
    28b6:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    28b8:	2c00      	cmp	r4, #0
    28ba:	d1f7      	bne.n	28ac <usbdc_unconfig+0xc>
    28bc:	bd70      	pop	{r4, r5, r6, pc}
    28be:	bf00      	nop
    28c0:	20000314 	.word	0x20000314

000028c4 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    28c4:	b570      	push	{r4, r5, r6, lr}
    28c6:	4606      	mov	r6, r0
    28c8:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    28ca:	4b07      	ldr	r3, [pc, #28]	; (28e8 <usbdc_change_notify+0x24>)
    28cc:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    28ce:	b91c      	cbnz	r4, 28d8 <usbdc_change_notify+0x14>
    28d0:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    28d2:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    28d4:	2c00      	cmp	r4, #0
    28d6:	d0fb      	beq.n	28d0 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    28d8:	6863      	ldr	r3, [r4, #4]
    28da:	2b00      	cmp	r3, #0
    28dc:	d0f9      	beq.n	28d2 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    28de:	4629      	mov	r1, r5
    28e0:	4630      	mov	r0, r6
    28e2:	4798      	blx	r3
    28e4:	e7f5      	b.n	28d2 <usbdc_change_notify+0xe>
    28e6:	bf00      	nop
    28e8:	20000314 	.word	0x20000314

000028ec <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    28ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ee:	4607      	mov	r7, r0
    28f0:	460e      	mov	r6, r1
    28f2:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    28f4:	4b0c      	ldr	r3, [pc, #48]	; (2928 <usbdc_request_handler+0x3c>)
    28f6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    28f8:	b91c      	cbnz	r4, 2902 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    28fa:	2000      	movs	r0, #0
    28fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    28fe:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2900:	b16c      	cbz	r4, 291e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    2902:	6863      	ldr	r3, [r4, #4]
    2904:	2b00      	cmp	r3, #0
    2906:	d0fa      	beq.n	28fe <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    2908:	462a      	mov	r2, r5
    290a:	4631      	mov	r1, r6
    290c:	4638      	mov	r0, r7
    290e:	4798      	blx	r3
			if (0 == rc) {
    2910:	b138      	cbz	r0, 2922 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    2912:	f110 0f0a 	cmn.w	r0, #10
    2916:	d0f2      	beq.n	28fe <usbdc_request_handler+0x12>
				return -1;
    2918:	f04f 30ff 	mov.w	r0, #4294967295
}
    291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    291e:	2000      	movs	r0, #0
    2920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2922:	2001      	movs	r0, #1
    2924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2926:	bf00      	nop
    2928:	20000314 	.word	0x20000314

0000292c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    292c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    292e:	4b06      	ldr	r3, [pc, #24]	; (2948 <usbd_sof_cb+0x1c>)
    2930:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2932:	b91c      	cbnz	r4, 293c <usbd_sof_cb+0x10>
    2934:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2936:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2938:	2c00      	cmp	r4, #0
    293a:	d0fb      	beq.n	2934 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    293c:	6863      	ldr	r3, [r4, #4]
    293e:	2b00      	cmp	r3, #0
    2940:	d0f9      	beq.n	2936 <usbd_sof_cb+0xa>
			sof->cb();
    2942:	4798      	blx	r3
    2944:	e7f7      	b.n	2936 <usbd_sof_cb+0xa>
    2946:	bf00      	nop
    2948:	20000314 	.word	0x20000314

0000294c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    294c:	b510      	push	{r4, lr}
    294e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    2950:	b119      	cbz	r1, 295a <usbdc_cb_ctl_done+0xe>
    2952:	2901      	cmp	r1, #1
    2954:	d026      	beq.n	29a4 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2956:	2000      	movs	r0, #0
    2958:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    295a:	7813      	ldrb	r3, [r2, #0]
    295c:	2b00      	cmp	r3, #0
    295e:	d1fa      	bne.n	2956 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    2960:	7853      	ldrb	r3, [r2, #1]
    2962:	2b05      	cmp	r3, #5
    2964:	d00f      	beq.n	2986 <usbdc_cb_ctl_done+0x3a>
    2966:	2b09      	cmp	r3, #9
    2968:	d1f5      	bne.n	2956 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    296a:	8852      	ldrh	r2, [r2, #2]
    296c:	4b10      	ldr	r3, [pc, #64]	; (29b0 <usbdc_cb_ctl_done+0x64>)
    296e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2970:	8863      	ldrh	r3, [r4, #2]
    2972:	2b00      	cmp	r3, #0
    2974:	bf14      	ite	ne
    2976:	2104      	movne	r1, #4
    2978:	2103      	moveq	r1, #3
    297a:	4b0d      	ldr	r3, [pc, #52]	; (29b0 <usbdc_cb_ctl_done+0x64>)
    297c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    297e:	2001      	movs	r0, #1
    2980:	4b0c      	ldr	r3, [pc, #48]	; (29b4 <usbdc_cb_ctl_done+0x68>)
    2982:	4798      	blx	r3
    2984:	e7e7      	b.n	2956 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    2986:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    2988:	b2c0      	uxtb	r0, r0
    298a:	4b0b      	ldr	r3, [pc, #44]	; (29b8 <usbdc_cb_ctl_done+0x6c>)
    298c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    298e:	8863      	ldrh	r3, [r4, #2]
    2990:	2b00      	cmp	r3, #0
    2992:	bf14      	ite	ne
    2994:	2103      	movne	r1, #3
    2996:	2102      	moveq	r1, #2
    2998:	4b05      	ldr	r3, [pc, #20]	; (29b0 <usbdc_cb_ctl_done+0x64>)
    299a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    299c:	2001      	movs	r0, #1
    299e:	4b05      	ldr	r3, [pc, #20]	; (29b4 <usbdc_cb_ctl_done+0x68>)
    29a0:	4798      	blx	r3
    29a2:	e7d8      	b.n	2956 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    29a4:	2201      	movs	r2, #1
    29a6:	4621      	mov	r1, r4
    29a8:	2000      	movs	r0, #0
    29aa:	4b04      	ldr	r3, [pc, #16]	; (29bc <usbdc_cb_ctl_done+0x70>)
    29ac:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    29ae:	e7d2      	b.n	2956 <usbdc_cb_ctl_done+0xa>
    29b0:	20000314 	.word	0x20000314
    29b4:	000028c5 	.word	0x000028c5
    29b8:	00000a9d 	.word	0x00000a9d
    29bc:	000028ed 	.word	0x000028ed

000029c0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    29c0:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    29c2:	4b0d      	ldr	r3, [pc, #52]	; (29f8 <usbdc_reset+0x38>)
    29c4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    29c6:	4d0d      	ldr	r5, [pc, #52]	; (29fc <usbdc_reset+0x3c>)
    29c8:	2602      	movs	r6, #2
    29ca:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    29cc:	2400      	movs	r4, #0
    29ce:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    29d0:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    29d2:	4620      	mov	r0, r4
    29d4:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <usbdc_reset+0x40>)
    29d6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    29d8:	7f28      	ldrb	r0, [r5, #28]
    29da:	4b0a      	ldr	r3, [pc, #40]	; (2a04 <usbdc_reset+0x44>)
    29dc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    29de:	4a0a      	ldr	r2, [pc, #40]	; (2a08 <usbdc_reset+0x48>)
    29e0:	4621      	mov	r1, r4
    29e2:	4620      	mov	r0, r4
    29e4:	4d09      	ldr	r5, [pc, #36]	; (2a0c <usbdc_reset+0x4c>)
    29e6:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    29e8:	4a09      	ldr	r2, [pc, #36]	; (2a10 <usbdc_reset+0x50>)
    29ea:	4631      	mov	r1, r6
    29ec:	4620      	mov	r0, r4
    29ee:	47a8      	blx	r5
	usb_d_ep_enable(0);
    29f0:	4620      	mov	r0, r4
    29f2:	4b08      	ldr	r3, [pc, #32]	; (2a14 <usbdc_reset+0x54>)
    29f4:	4798      	blx	r3
    29f6:	bd70      	pop	{r4, r5, r6, pc}
    29f8:	000028a1 	.word	0x000028a1
    29fc:	20000314 	.word	0x20000314
    2a00:	00000b11 	.word	0x00000b11
    2a04:	00000afd 	.word	0x00000afd
    2a08:	00002a59 	.word	0x00002a59
    2a0c:	00000d11 	.word	0x00000d11
    2a10:	0000294d 	.word	0x0000294d
    2a14:	00000b3d 	.word	0x00000b3d

00002a18 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2a18:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    2a1a:	b110      	cbz	r0, 2a22 <usbd_event_cb+0xa>
    2a1c:	2801      	cmp	r0, #1
    2a1e:	d004      	beq.n	2a2a <usbd_event_cb+0x12>
    2a20:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    2a22:	2000      	movs	r0, #0
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <usbd_event_cb+0x18>)
    2a26:	4798      	blx	r3
		break;
    2a28:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    2a2a:	4b02      	ldr	r3, [pc, #8]	; (2a34 <usbd_event_cb+0x1c>)
    2a2c:	4798      	blx	r3
    2a2e:	bd08      	pop	{r3, pc}
    2a30:	000028c5 	.word	0x000028c5
    2a34:	000029c1 	.word	0x000029c1

00002a38 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2a38:	b500      	push	{lr}
    2a3a:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2a3c:	9101      	str	r1, [sp, #4]
    2a3e:	9202      	str	r2, [sp, #8]
    2a40:	f88d 000c 	strb.w	r0, [sp, #12]
    2a44:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    2a48:	a801      	add	r0, sp, #4
    2a4a:	4b02      	ldr	r3, [pc, #8]	; (2a54 <usbdc_xfer+0x1c>)
    2a4c:	4798      	blx	r3
}
    2a4e:	b005      	add	sp, #20
    2a50:	f85d fb04 	ldr.w	pc, [sp], #4
    2a54:	00000b89 	.word	0x00000b89

00002a58 <usbdc_cb_ctl_req>:
{
    2a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a5c:	b083      	sub	sp, #12
    2a5e:	4605      	mov	r5, r0
    2a60:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2a62:	2200      	movs	r2, #0
    2a64:	4b9b      	ldr	r3, [pc, #620]	; (2cd4 <usbdc_cb_ctl_req+0x27c>)
    2a66:	4798      	blx	r3
    2a68:	f1b0 3fff 	cmp.w	r0, #4294967295
    2a6c:	d00b      	beq.n	2a86 <usbdc_cb_ctl_req+0x2e>
    2a6e:	2801      	cmp	r0, #1
    2a70:	f000 81e3 	beq.w	2e3a <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2a74:	7823      	ldrb	r3, [r4, #0]
    2a76:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    2a7a:	d008      	beq.n	2a8e <usbdc_cb_ctl_req+0x36>
    2a7c:	2a80      	cmp	r2, #128	; 0x80
    2a7e:	f000 80f4 	beq.w	2c6a <usbdc_cb_ctl_req+0x212>
		return false;
    2a82:	2000      	movs	r0, #0
    2a84:	e000      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2a86:	2000      	movs	r0, #0
}
    2a88:	b003      	add	sp, #12
    2a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2a8e:	7862      	ldrb	r2, [r4, #1]
    2a90:	3a01      	subs	r2, #1
    2a92:	2a0a      	cmp	r2, #10
    2a94:	f200 81d3 	bhi.w	2e3e <usbdc_cb_ctl_req+0x3e6>
    2a98:	e8df f012 	tbh	[pc, r2, lsl #1]
    2a9c:	01d10060 	.word	0x01d10060
    2aa0:	01d10076 	.word	0x01d10076
    2aa4:	01d1000b 	.word	0x01d1000b
    2aa8:	01d101d1 	.word	0x01d101d1
    2aac:	01d10015 	.word	0x01d10015
    2ab0:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2ab2:	2301      	movs	r3, #1
    2ab4:	2200      	movs	r2, #0
    2ab6:	4611      	mov	r1, r2
    2ab8:	4628      	mov	r0, r5
    2aba:	4c87      	ldr	r4, [pc, #540]	; (2cd8 <usbdc_cb_ctl_req+0x280>)
    2abc:	47a0      	blx	r4
    2abe:	fab0 f080 	clz	r0, r0
    2ac2:	0940      	lsrs	r0, r0, #5
    2ac4:	e7e0      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    2ac6:	8862      	ldrh	r2, [r4, #2]
    2ac8:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    2aca:	b1ca      	cbz	r2, 2b00 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2acc:	4b83      	ldr	r3, [pc, #524]	; (2cdc <usbdc_cb_ctl_req+0x284>)
    2ace:	681b      	ldr	r3, [r3, #0]
    2ad0:	6859      	ldr	r1, [r3, #4]
    2ad2:	6818      	ldr	r0, [r3, #0]
    2ad4:	4b82      	ldr	r3, [pc, #520]	; (2ce0 <usbdc_cb_ctl_req+0x288>)
    2ad6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2ad8:	2800      	cmp	r0, #0
    2ada:	f000 81be 	beq.w	2e5a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    2ade:	78c2      	ldrb	r2, [r0, #3]
    2ae0:	7881      	ldrb	r1, [r0, #2]
    2ae2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    2ae6:	fa10 f181 	uxtah	r1, r0, r1
    2aea:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2aec:	2204      	movs	r2, #4
    2aee:	4b7d      	ldr	r3, [pc, #500]	; (2ce4 <usbdc_cb_ctl_req+0x28c>)
    2af0:	4798      	blx	r3
    2af2:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2af4:	b130      	cbz	r0, 2b04 <usbdc_cb_ctl_req+0xac>
    2af6:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2af8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2cdc <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2afc:	4f79      	ldr	r7, [pc, #484]	; (2ce4 <usbdc_cb_ctl_req+0x28c>)
    2afe:	e018      	b.n	2b32 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    2b00:	4b79      	ldr	r3, [pc, #484]	; (2ce8 <usbdc_cb_ctl_req+0x290>)
    2b02:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2b04:	2301      	movs	r3, #1
    2b06:	2200      	movs	r2, #0
    2b08:	4611      	mov	r1, r2
    2b0a:	4628      	mov	r0, r5
    2b0c:	4c72      	ldr	r4, [pc, #456]	; (2cd8 <usbdc_cb_ctl_req+0x280>)
    2b0e:	47a0      	blx	r4
    2b10:	fab0 f080 	clz	r0, r0
    2b14:	0940      	lsrs	r0, r0, #5
    2b16:	e7b7      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    2b18:	464c      	mov	r4, r9
    2b1a:	e000      	b.n	2b1e <usbdc_cb_ctl_req+0xc6>
    2b1c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    2b1e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2b20:	7803      	ldrb	r3, [r0, #0]
    2b22:	4418      	add	r0, r3
    2b24:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2b26:	2204      	movs	r2, #4
    2b28:	9901      	ldr	r1, [sp, #4]
    2b2a:	47b8      	blx	r7
    2b2c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2b2e:	2800      	cmp	r0, #0
    2b30:	d0e8      	beq.n	2b04 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2b32:	f890 9002 	ldrb.w	r9, [r0, #2]
    2b36:	45a1      	cmp	r9, r4
    2b38:	d0f1      	beq.n	2b1e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2b3a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2b3e:	2c00      	cmp	r4, #0
    2b40:	d0ea      	beq.n	2b18 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2b42:	2600      	movs	r6, #0
    2b44:	6863      	ldr	r3, [r4, #4]
    2b46:	466a      	mov	r2, sp
    2b48:	4631      	mov	r1, r6
    2b4a:	4620      	mov	r0, r4
    2b4c:	4798      	blx	r3
    2b4e:	2800      	cmp	r0, #0
    2b50:	d0e4      	beq.n	2b1c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2b52:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2b54:	2c00      	cmp	r4, #0
    2b56:	d1f5      	bne.n	2b44 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    2b58:	464c      	mov	r4, r9
    2b5a:	e7e0      	b.n	2b1e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2b5c:	f003 031f 	and.w	r3, r3, #31
    2b60:	2b02      	cmp	r3, #2
    2b62:	f040 816e 	bne.w	2e42 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    2b66:	88e3      	ldrh	r3, [r4, #6]
    2b68:	b10b      	cbz	r3, 2b6e <usbdc_cb_ctl_req+0x116>
			return false;
    2b6a:	2000      	movs	r0, #0
    2b6c:	e78c      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2b6e:	88a0      	ldrh	r0, [r4, #4]
    2b70:	2100      	movs	r1, #0
    2b72:	b2c0      	uxtb	r0, r0
    2b74:	4b5d      	ldr	r3, [pc, #372]	; (2cec <usbdc_cb_ctl_req+0x294>)
    2b76:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2b78:	2301      	movs	r3, #1
    2b7a:	2200      	movs	r2, #0
    2b7c:	4611      	mov	r1, r2
    2b7e:	4628      	mov	r0, r5
    2b80:	4c55      	ldr	r4, [pc, #340]	; (2cd8 <usbdc_cb_ctl_req+0x280>)
    2b82:	47a0      	blx	r4
		return true;
    2b84:	2001      	movs	r0, #1
    2b86:	e77f      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2b88:	f003 031f 	and.w	r3, r3, #31
    2b8c:	2b02      	cmp	r3, #2
    2b8e:	f040 815a 	bne.w	2e46 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2b92:	88e3      	ldrh	r3, [r4, #6]
    2b94:	b10b      	cbz	r3, 2b9a <usbdc_cb_ctl_req+0x142>
			return false;
    2b96:	2000      	movs	r0, #0
    2b98:	e776      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2b9a:	88a0      	ldrh	r0, [r4, #4]
    2b9c:	2101      	movs	r1, #1
    2b9e:	b2c0      	uxtb	r0, r0
    2ba0:	4b52      	ldr	r3, [pc, #328]	; (2cec <usbdc_cb_ctl_req+0x294>)
    2ba2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2ba4:	2301      	movs	r3, #1
    2ba6:	2200      	movs	r2, #0
    2ba8:	4611      	mov	r1, r2
    2baa:	4628      	mov	r0, r5
    2bac:	4c4a      	ldr	r4, [pc, #296]	; (2cd8 <usbdc_cb_ctl_req+0x280>)
    2bae:	47a0      	blx	r4
		return true;
    2bb0:	2001      	movs	r0, #1
    2bb2:	e769      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2bb4:	8866      	ldrh	r6, [r4, #2]
    2bb6:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2bb8:	4a48      	ldr	r2, [pc, #288]	; (2cdc <usbdc_cb_ctl_req+0x284>)
    2bba:	6813      	ldr	r3, [r2, #0]
    2bbc:	7ed2      	ldrb	r2, [r2, #27]
    2bbe:	6859      	ldr	r1, [r3, #4]
    2bc0:	6818      	ldr	r0, [r3, #0]
    2bc2:	4b47      	ldr	r3, [pc, #284]	; (2ce0 <usbdc_cb_ctl_req+0x288>)
    2bc4:	4798      	blx	r3
	if (NULL == ifc) {
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d045      	beq.n	2c56 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    2bca:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2bcc:	78c2      	ldrb	r2, [r0, #3]
    2bce:	7881      	ldrb	r1, [r0, #2]
    2bd0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2bd4:	fa10 f181 	uxtah	r1, r0, r1
    2bd8:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2bda:	2204      	movs	r2, #4
    2bdc:	4b41      	ldr	r3, [pc, #260]	; (2ce4 <usbdc_cb_ctl_req+0x28c>)
    2bde:	4798      	blx	r3
    2be0:	4603      	mov	r3, r0
    2be2:	2800      	cmp	r0, #0
    2be4:	d039      	beq.n	2c5a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2be6:	2704      	movs	r7, #4
    2be8:	4d3e      	ldr	r5, [pc, #248]	; (2ce4 <usbdc_cb_ctl_req+0x28c>)
    2bea:	e008      	b.n	2bfe <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    2bec:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2bee:	7803      	ldrb	r3, [r0, #0]
    2bf0:	4418      	add	r0, r3
    2bf2:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2bf4:	463a      	mov	r2, r7
    2bf6:	9901      	ldr	r1, [sp, #4]
    2bf8:	47a8      	blx	r5
		if (NULL == ifc) {
    2bfa:	4603      	mov	r3, r0
    2bfc:	b378      	cbz	r0, 2c5e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2bfe:	789a      	ldrb	r2, [r3, #2]
    2c00:	42a2      	cmp	r2, r4
    2c02:	d1f3      	bne.n	2bec <usbdc_cb_ctl_req+0x194>
    2c04:	78da      	ldrb	r2, [r3, #3]
    2c06:	42b2      	cmp	r2, r6
    2c08:	d1f0      	bne.n	2bec <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    2c0a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2c0c:	4b33      	ldr	r3, [pc, #204]	; (2cdc <usbdc_cb_ctl_req+0x284>)
    2c0e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    2c10:	b33d      	cbz	r5, 2c62 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2c12:	2701      	movs	r7, #1
    2c14:	686b      	ldr	r3, [r5, #4]
    2c16:	466a      	mov	r2, sp
    2c18:	4639      	mov	r1, r7
    2c1a:	4628      	mov	r0, r5
    2c1c:	4798      	blx	r3
    2c1e:	b120      	cbz	r0, 2c2a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    2c20:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2c22:	2d00      	cmp	r5, #0
    2c24:	d1f6      	bne.n	2c14 <usbdc_cb_ctl_req+0x1bc>
	return false;
    2c26:	2000      	movs	r0, #0
    2c28:	e72e      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2c2a:	686b      	ldr	r3, [r5, #4]
    2c2c:	466a      	mov	r2, sp
    2c2e:	2100      	movs	r1, #0
    2c30:	4628      	mov	r0, r5
    2c32:	4798      	blx	r3
    2c34:	b9b8      	cbnz	r0, 2c66 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    2c36:	b136      	cbz	r6, 2c46 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2c38:	4a28      	ldr	r2, [pc, #160]	; (2cdc <usbdc_cb_ctl_req+0x284>)
    2c3a:	2301      	movs	r3, #1
    2c3c:	fa03 f404 	lsl.w	r4, r3, r4
    2c40:	7f53      	ldrb	r3, [r2, #29]
    2c42:	4323      	orrs	r3, r4
    2c44:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2c46:	2300      	movs	r3, #0
    2c48:	461a      	mov	r2, r3
    2c4a:	4619      	mov	r1, r3
    2c4c:	4618      	mov	r0, r3
    2c4e:	4c22      	ldr	r4, [pc, #136]	; (2cd8 <usbdc_cb_ctl_req+0x280>)
    2c50:	47a0      	blx	r4
			return true;
    2c52:	2001      	movs	r0, #1
    2c54:	e718      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2c56:	2000      	movs	r0, #0
    2c58:	e716      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2c5a:	2000      	movs	r0, #0
    2c5c:	e714      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
			return false;
    2c5e:	2000      	movs	r0, #0
    2c60:	e712      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
	return false;
    2c62:	2000      	movs	r0, #0
    2c64:	e710      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
			return false;
    2c66:	2000      	movs	r0, #0
    2c68:	e70e      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    2c6a:	7862      	ldrb	r2, [r4, #1]
    2c6c:	2a0a      	cmp	r2, #10
    2c6e:	f200 80ec 	bhi.w	2e4a <usbdc_cb_ctl_req+0x3f2>
    2c72:	e8df f012 	tbh	[pc, r2, lsl #1]
    2c76:	008e      	.short	0x008e
    2c78:	00ea00ea 	.word	0x00ea00ea
    2c7c:	00ea00ea 	.word	0x00ea00ea
    2c80:	000b00ea 	.word	0x000b00ea
    2c84:	008200ea 	.word	0x008200ea
    2c88:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2c8c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2c8e:	0a13      	lsrs	r3, r2, #8
    2c90:	2b02      	cmp	r3, #2
    2c92:	d02d      	beq.n	2cf0 <usbdc_cb_ctl_req+0x298>
    2c94:	2b03      	cmp	r3, #3
    2c96:	d050      	beq.n	2d3a <usbdc_cb_ctl_req+0x2e2>
    2c98:	2b01      	cmp	r3, #1
    2c9a:	d001      	beq.n	2ca0 <usbdc_cb_ctl_req+0x248>
	return false;
    2c9c:	2000      	movs	r0, #0
    2c9e:	e6f3      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2ca0:	88e2      	ldrh	r2, [r4, #6]
    2ca2:	2a12      	cmp	r2, #18
    2ca4:	bf28      	it	cs
    2ca6:	2212      	movcs	r2, #18
    2ca8:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2caa:	4b0c      	ldr	r3, [pc, #48]	; (2cdc <usbdc_cb_ctl_req+0x284>)
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	2201      	movs	r2, #1
    2cb0:	6859      	ldr	r1, [r3, #4]
    2cb2:	6818      	ldr	r0, [r3, #0]
    2cb4:	4b0b      	ldr	r3, [pc, #44]	; (2ce4 <usbdc_cb_ctl_req+0x28c>)
    2cb6:	4798      	blx	r3
	if (!dev_desc) {
    2cb8:	4601      	mov	r1, r0
    2cba:	2800      	cmp	r0, #0
    2cbc:	f000 80c7 	beq.w	2e4e <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2cc0:	2300      	movs	r3, #0
    2cc2:	4622      	mov	r2, r4
    2cc4:	4628      	mov	r0, r5
    2cc6:	4c04      	ldr	r4, [pc, #16]	; (2cd8 <usbdc_cb_ctl_req+0x280>)
    2cc8:	47a0      	blx	r4
    2cca:	fab0 f080 	clz	r0, r0
    2cce:	0940      	lsrs	r0, r0, #5
    2cd0:	e6da      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
    2cd2:	bf00      	nop
    2cd4:	000028ed 	.word	0x000028ed
    2cd8:	00002a39 	.word	0x00002a39
    2cdc:	20000314 	.word	0x20000314
    2ce0:	00002ffd 	.word	0x00002ffd
    2ce4:	00002f7d 	.word	0x00002f7d
    2ce8:	000028a1 	.word	0x000028a1
    2cec:	00000ca9 	.word	0x00000ca9
	uint16_t length   = req->wLength;
    2cf0:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2cf2:	4b5b      	ldr	r3, [pc, #364]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2cf4:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	3201      	adds	r2, #1
    2cfa:	b2d2      	uxtb	r2, r2
    2cfc:	6859      	ldr	r1, [r3, #4]
    2cfe:	6818      	ldr	r0, [r3, #0]
    2d00:	4b58      	ldr	r3, [pc, #352]	; (2e64 <usbdc_cb_ctl_req+0x40c>)
    2d02:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2d04:	4601      	mov	r1, r0
    2d06:	2800      	cmp	r0, #0
    2d08:	f000 80a3 	beq.w	2e52 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    2d0c:	78c3      	ldrb	r3, [r0, #3]
    2d0e:	7882      	ldrb	r2, [r0, #2]
    2d10:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2d14:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2d16:	4294      	cmp	r4, r2
    2d18:	d90d      	bls.n	2d36 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2d1a:	3e01      	subs	r6, #1
    2d1c:	4226      	tst	r6, r4
    2d1e:	bf0c      	ite	eq
    2d20:	2301      	moveq	r3, #1
    2d22:	2300      	movne	r3, #0
		length = total_len;
    2d24:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2d26:	4622      	mov	r2, r4
    2d28:	4628      	mov	r0, r5
    2d2a:	4c4f      	ldr	r4, [pc, #316]	; (2e68 <usbdc_cb_ctl_req+0x410>)
    2d2c:	47a0      	blx	r4
    2d2e:	fab0 f080 	clz	r0, r0
    2d32:	0940      	lsrs	r0, r0, #5
    2d34:	e6a8      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2d36:	2300      	movs	r3, #0
    2d38:	e7f5      	b.n	2d26 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    2d3a:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2d3c:	4b48      	ldr	r3, [pc, #288]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2d3e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	b2d2      	uxtb	r2, r2
    2d44:	6859      	ldr	r1, [r3, #4]
    2d46:	6818      	ldr	r0, [r3, #0]
    2d48:	4b48      	ldr	r3, [pc, #288]	; (2e6c <usbdc_cb_ctl_req+0x414>)
    2d4a:	4798      	blx	r3
	if (NULL == str_desc) {
    2d4c:	4601      	mov	r1, r0
    2d4e:	2800      	cmp	r0, #0
    2d50:	f000 8081 	beq.w	2e56 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    2d54:	7802      	ldrb	r2, [r0, #0]
    2d56:	4294      	cmp	r4, r2
    2d58:	d90d      	bls.n	2d76 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2d5a:	3e01      	subs	r6, #1
    2d5c:	4226      	tst	r6, r4
    2d5e:	bf0c      	ite	eq
    2d60:	2301      	moveq	r3, #1
    2d62:	2300      	movne	r3, #0
		length = str_desc[0];
    2d64:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2d66:	4622      	mov	r2, r4
    2d68:	4628      	mov	r0, r5
    2d6a:	4c3f      	ldr	r4, [pc, #252]	; (2e68 <usbdc_cb_ctl_req+0x410>)
    2d6c:	47a0      	blx	r4
    2d6e:	fab0 f080 	clz	r0, r0
    2d72:	0940      	lsrs	r0, r0, #5
    2d74:	e688      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2d76:	2300      	movs	r3, #0
    2d78:	e7f5      	b.n	2d66 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2d7a:	4939      	ldr	r1, [pc, #228]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2d7c:	694b      	ldr	r3, [r1, #20]
    2d7e:	7eca      	ldrb	r2, [r1, #27]
    2d80:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2d82:	2300      	movs	r3, #0
    2d84:	2201      	movs	r2, #1
    2d86:	6949      	ldr	r1, [r1, #20]
    2d88:	4628      	mov	r0, r5
    2d8a:	4c37      	ldr	r4, [pc, #220]	; (2e68 <usbdc_cb_ctl_req+0x410>)
    2d8c:	47a0      	blx	r4
		return true;
    2d8e:	2001      	movs	r0, #1
    2d90:	e67a      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2d92:	f003 031f 	and.w	r3, r3, #31
    2d96:	2b01      	cmp	r3, #1
    2d98:	d903      	bls.n	2da2 <usbdc_cb_ctl_req+0x34a>
    2d9a:	2b02      	cmp	r3, #2
    2d9c:	d010      	beq.n	2dc0 <usbdc_cb_ctl_req+0x368>
		return false;
    2d9e:	2000      	movs	r0, #0
    2da0:	e672      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		st = 0;
    2da2:	2300      	movs	r3, #0
    2da4:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2da6:	492e      	ldr	r1, [pc, #184]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2da8:	694b      	ldr	r3, [r1, #20]
    2daa:	f8bd 2000 	ldrh.w	r2, [sp]
    2dae:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2db0:	2300      	movs	r3, #0
    2db2:	2202      	movs	r2, #2
    2db4:	6949      	ldr	r1, [r1, #20]
    2db6:	4628      	mov	r0, r5
    2db8:	4c2b      	ldr	r4, [pc, #172]	; (2e68 <usbdc_cb_ctl_req+0x410>)
    2dba:	47a0      	blx	r4
	return true;
    2dbc:	2001      	movs	r0, #1
    2dbe:	e663      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2dc0:	88a0      	ldrh	r0, [r4, #4]
    2dc2:	2102      	movs	r1, #2
    2dc4:	b2c0      	uxtb	r0, r0
    2dc6:	4b2a      	ldr	r3, [pc, #168]	; (2e70 <usbdc_cb_ctl_req+0x418>)
    2dc8:	4798      	blx	r3
		if (st < 0) {
    2dca:	2800      	cmp	r0, #0
    2dcc:	db03      	blt.n	2dd6 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    2dce:	f000 0001 	and.w	r0, r0, #1
    2dd2:	9000      	str	r0, [sp, #0]
    2dd4:	e7e7      	b.n	2da6 <usbdc_cb_ctl_req+0x34e>
			return false;
    2dd6:	2000      	movs	r0, #0
    2dd8:	e656      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2dda:	4b21      	ldr	r3, [pc, #132]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2ddc:	7f5b      	ldrb	r3, [r3, #29]
    2dde:	88a2      	ldrh	r2, [r4, #4]
    2de0:	4113      	asrs	r3, r2
    2de2:	f013 0f01 	tst.w	r3, #1
    2de6:	d012      	beq.n	2e0e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2de8:	4b1d      	ldr	r3, [pc, #116]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2dea:	691d      	ldr	r5, [r3, #16]
	return false;
    2dec:	2000      	movs	r0, #0
	while (NULL != func) {
    2dee:	2d00      	cmp	r5, #0
    2df0:	f43f ae4a 	beq.w	2a88 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2df4:	2602      	movs	r6, #2
    2df6:	686b      	ldr	r3, [r5, #4]
    2df8:	4622      	mov	r2, r4
    2dfa:	4631      	mov	r1, r6
    2dfc:	4628      	mov	r0, r5
    2dfe:	4798      	blx	r3
    2e00:	2800      	cmp	r0, #0
    2e02:	da0f      	bge.n	2e24 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    2e04:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2e06:	2d00      	cmp	r5, #0
    2e08:	d1f5      	bne.n	2df6 <usbdc_cb_ctl_req+0x39e>
	return false;
    2e0a:	2000      	movs	r0, #0
    2e0c:	e63c      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    2e0e:	4914      	ldr	r1, [pc, #80]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2e10:	694b      	ldr	r3, [r1, #20]
    2e12:	2000      	movs	r0, #0
    2e14:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2e16:	4603      	mov	r3, r0
    2e18:	2201      	movs	r2, #1
    2e1a:	6949      	ldr	r1, [r1, #20]
    2e1c:	4c12      	ldr	r4, [pc, #72]	; (2e68 <usbdc_cb_ctl_req+0x410>)
    2e1e:	47a0      	blx	r4
		return true;
    2e20:	2001      	movs	r0, #1
    2e22:	e631      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2e24:	490e      	ldr	r1, [pc, #56]	; (2e60 <usbdc_cb_ctl_req+0x408>)
    2e26:	694b      	ldr	r3, [r1, #20]
    2e28:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2e2a:	2300      	movs	r3, #0
    2e2c:	2201      	movs	r2, #1
    2e2e:	6949      	ldr	r1, [r1, #20]
    2e30:	4618      	mov	r0, r3
    2e32:	4c0d      	ldr	r4, [pc, #52]	; (2e68 <usbdc_cb_ctl_req+0x410>)
    2e34:	47a0      	blx	r4
			return true;
    2e36:	2001      	movs	r0, #1
    2e38:	e626      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return true;
    2e3a:	2001      	movs	r0, #1
    2e3c:	e624      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e3e:	2000      	movs	r0, #0
    2e40:	e622      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e42:	2000      	movs	r0, #0
    2e44:	e620      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e46:	2000      	movs	r0, #0
    2e48:	e61e      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e4a:	2000      	movs	r0, #0
    2e4c:	e61c      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e4e:	2000      	movs	r0, #0
    2e50:	e61a      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e52:	2000      	movs	r0, #0
    2e54:	e618      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
		return false;
    2e56:	2000      	movs	r0, #0
    2e58:	e616      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
			return false;
    2e5a:	2000      	movs	r0, #0
    2e5c:	e614      	b.n	2a88 <usbdc_cb_ctl_req+0x30>
    2e5e:	bf00      	nop
    2e60:	20000314 	.word	0x20000314
    2e64:	00002ffd 	.word	0x00002ffd
    2e68:	00002a39 	.word	0x00002a39
    2e6c:	00003065 	.word	0x00003065
    2e70:	00000ca9 	.word	0x00000ca9

00002e74 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2e74:	b508      	push	{r3, lr}
	switch (type) {
    2e76:	2801      	cmp	r0, #1
    2e78:	d007      	beq.n	2e8a <usbdc_register_handler+0x16>
    2e7a:	b110      	cbz	r0, 2e82 <usbdc_register_handler+0xe>
    2e7c:	2802      	cmp	r0, #2
    2e7e:	d008      	beq.n	2e92 <usbdc_register_handler+0x1e>
    2e80:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2e82:	4806      	ldr	r0, [pc, #24]	; (2e9c <usbdc_register_handler+0x28>)
    2e84:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <usbdc_register_handler+0x2c>)
    2e86:	4798      	blx	r3
		break;
    2e88:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2e8a:	4806      	ldr	r0, [pc, #24]	; (2ea4 <usbdc_register_handler+0x30>)
    2e8c:	4b04      	ldr	r3, [pc, #16]	; (2ea0 <usbdc_register_handler+0x2c>)
    2e8e:	4798      	blx	r3
		break;
    2e90:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2e92:	4805      	ldr	r0, [pc, #20]	; (2ea8 <usbdc_register_handler+0x34>)
    2e94:	4b02      	ldr	r3, [pc, #8]	; (2ea0 <usbdc_register_handler+0x2c>)
    2e96:	4798      	blx	r3
    2e98:	bd08      	pop	{r3, pc}
    2e9a:	bf00      	nop
    2e9c:	20000318 	.word	0x20000318
    2ea0:	00000d85 	.word	0x00000d85
    2ea4:	2000031c 	.word	0x2000031c
    2ea8:	20000320 	.word	0x20000320

00002eac <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2eac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    2eae:	4605      	mov	r5, r0
    2eb0:	f240 3255 	movw	r2, #853	; 0x355
    2eb4:	490c      	ldr	r1, [pc, #48]	; (2ee8 <usbdc_init+0x3c>)
    2eb6:	3000      	adds	r0, #0
    2eb8:	bf18      	it	ne
    2eba:	2001      	movne	r0, #1
    2ebc:	4b0b      	ldr	r3, [pc, #44]	; (2eec <usbdc_init+0x40>)
    2ebe:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2ec0:	4b0b      	ldr	r3, [pc, #44]	; (2ef0 <usbdc_init+0x44>)
    2ec2:	4798      	blx	r3
	if (rc < 0) {
    2ec4:	2800      	cmp	r0, #0
    2ec6:	db0e      	blt.n	2ee6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2ec8:	4c0a      	ldr	r4, [pc, #40]	; (2ef4 <usbdc_init+0x48>)
    2eca:	2220      	movs	r2, #32
    2ecc:	2100      	movs	r1, #0
    2ece:	4620      	mov	r0, r4
    2ed0:	4b09      	ldr	r3, [pc, #36]	; (2ef8 <usbdc_init+0x4c>)
    2ed2:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2ed4:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2ed6:	4909      	ldr	r1, [pc, #36]	; (2efc <usbdc_init+0x50>)
    2ed8:	2000      	movs	r0, #0
    2eda:	4c09      	ldr	r4, [pc, #36]	; (2f00 <usbdc_init+0x54>)
    2edc:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2ede:	4909      	ldr	r1, [pc, #36]	; (2f04 <usbdc_init+0x58>)
    2ee0:	2001      	movs	r0, #1
    2ee2:	47a0      	blx	r4

	return 0;
    2ee4:	2000      	movs	r0, #0
}
    2ee6:	bd38      	pop	{r3, r4, r5, pc}
    2ee8:	00003210 	.word	0x00003210
    2eec:	00000d5d 	.word	0x00000d5d
    2ef0:	00000a11 	.word	0x00000a11
    2ef4:	20000314 	.word	0x20000314
    2ef8:	00003147 	.word	0x00003147
    2efc:	0000292d 	.word	0x0000292d
    2f00:	00000a79 	.word	0x00000a79
    2f04:	00002a19 	.word	0x00002a19

00002f08 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2f08:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    2f0a:	4601      	mov	r1, r0
    2f0c:	4801      	ldr	r0, [pc, #4]	; (2f14 <usbdc_register_function+0xc>)
    2f0e:	4b02      	ldr	r3, [pc, #8]	; (2f18 <usbdc_register_function+0x10>)
    2f10:	4798      	blx	r3
    2f12:	bd08      	pop	{r3, pc}
    2f14:	20000324 	.word	0x20000324
    2f18:	00000d85 	.word	0x00000d85

00002f1c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2f1c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2f1e:	4b0a      	ldr	r3, [pc, #40]	; (2f48 <usbdc_start+0x2c>)
    2f20:	7e9b      	ldrb	r3, [r3, #26]
    2f22:	b95b      	cbnz	r3, 2f3c <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    2f24:	b168      	cbz	r0, 2f42 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    2f26:	4b08      	ldr	r3, [pc, #32]	; (2f48 <usbdc_start+0x2c>)
    2f28:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2f2a:	6802      	ldr	r2, [r0, #0]
    2f2c:	79d2      	ldrb	r2, [r2, #7]
    2f2e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2f30:	2201      	movs	r2, #1
    2f32:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2f34:	4b05      	ldr	r3, [pc, #20]	; (2f4c <usbdc_start+0x30>)
    2f36:	4798      	blx	r3
	return ERR_NONE;
    2f38:	2000      	movs	r0, #0
    2f3a:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    2f3c:	f06f 0003 	mvn.w	r0, #3
    2f40:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    2f42:	f06f 0008 	mvn.w	r0, #8
}
    2f46:	bd08      	pop	{r3, pc}
    2f48:	20000314 	.word	0x20000314
    2f4c:	00000a85 	.word	0x00000a85

00002f50 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2f50:	b508      	push	{r3, lr}
	usb_d_attach();
    2f52:	4b01      	ldr	r3, [pc, #4]	; (2f58 <usbdc_attach+0x8>)
    2f54:	4798      	blx	r3
    2f56:	bd08      	pop	{r3, pc}
    2f58:	00000a91 	.word	0x00000a91

00002f5c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    2f5c:	4b01      	ldr	r3, [pc, #4]	; (2f64 <usbdc_get_ctrl_buffer+0x8>)
    2f5e:	6958      	ldr	r0, [r3, #20]
    2f60:	4770      	bx	lr
    2f62:	bf00      	nop
    2f64:	20000314 	.word	0x20000314

00002f68 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2f68:	4b03      	ldr	r3, [pc, #12]	; (2f78 <usbdc_get_state+0x10>)
    2f6a:	7e98      	ldrb	r0, [r3, #26]
    2f6c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    2f70:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    2f72:	bf18      	it	ne
    2f74:	2010      	movne	r0, #16
    2f76:	4770      	bx	lr
    2f78:	20000314 	.word	0x20000314

00002f7c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2f7c:	4288      	cmp	r0, r1
    2f7e:	d214      	bcs.n	2faa <usb_find_desc+0x2e>
	return desc[0];
    2f80:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f82:	2b01      	cmp	r3, #1
    2f84:	d913      	bls.n	2fae <usb_find_desc+0x32>
{
    2f86:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    2f88:	7844      	ldrb	r4, [r0, #1]
    2f8a:	4294      	cmp	r4, r2
    2f8c:	d00a      	beq.n	2fa4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2f8e:	4418      	add	r0, r3
	while (desc < eof) {
    2f90:	4281      	cmp	r1, r0
    2f92:	d906      	bls.n	2fa2 <usb_find_desc+0x26>
	return desc[0];
    2f94:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f96:	2b01      	cmp	r3, #1
    2f98:	d90b      	bls.n	2fb2 <usb_find_desc+0x36>
	return desc[1];
    2f9a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2f9c:	4294      	cmp	r4, r2
    2f9e:	d1f6      	bne.n	2f8e <usb_find_desc+0x12>
    2fa0:	e000      	b.n	2fa4 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2fa2:	2000      	movs	r0, #0
}
    2fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
    2fa8:	4770      	bx	lr
	return NULL;
    2faa:	2000      	movs	r0, #0
    2fac:	4770      	bx	lr
		_desc_len_check();
    2fae:	2000      	movs	r0, #0
    2fb0:	4770      	bx	lr
    2fb2:	2000      	movs	r0, #0
    2fb4:	e7f6      	b.n	2fa4 <usb_find_desc+0x28>

00002fb6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2fb6:	4288      	cmp	r0, r1
    2fb8:	d216      	bcs.n	2fe8 <usb_find_ep_desc+0x32>
	return desc[0];
    2fba:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2fbc:	2b01      	cmp	r3, #1
    2fbe:	d915      	bls.n	2fec <usb_find_ep_desc+0x36>
	return desc[1];
    2fc0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2fc2:	2a04      	cmp	r2, #4
    2fc4:	d014      	beq.n	2ff0 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2fc6:	2a05      	cmp	r2, #5
    2fc8:	d00b      	beq.n	2fe2 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    2fca:	4418      	add	r0, r3
	while (desc < eof) {
    2fcc:	4281      	cmp	r1, r0
    2fce:	d909      	bls.n	2fe4 <usb_find_ep_desc+0x2e>
	return desc[0];
    2fd0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2fd2:	2b01      	cmp	r3, #1
    2fd4:	d90e      	bls.n	2ff4 <usb_find_ep_desc+0x3e>
	return desc[1];
    2fd6:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2fd8:	2a04      	cmp	r2, #4
    2fda:	d00d      	beq.n	2ff8 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2fdc:	2a05      	cmp	r2, #5
    2fde:	d1f4      	bne.n	2fca <usb_find_ep_desc+0x14>
    2fe0:	e00b      	b.n	2ffa <usb_find_ep_desc+0x44>
    2fe2:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2fe4:	2000      	movs	r0, #0
    2fe6:	4770      	bx	lr
    2fe8:	2000      	movs	r0, #0
    2fea:	4770      	bx	lr
		_desc_len_check();
    2fec:	2000      	movs	r0, #0
    2fee:	4770      	bx	lr
	return NULL;
    2ff0:	2000      	movs	r0, #0
    2ff2:	4770      	bx	lr
		_desc_len_check();
    2ff4:	2000      	movs	r0, #0
    2ff6:	4770      	bx	lr
	return NULL;
    2ff8:	2000      	movs	r0, #0
}
    2ffa:	4770      	bx	lr

00002ffc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2ffc:	b538      	push	{r3, r4, r5, lr}
    2ffe:	460c      	mov	r4, r1
    3000:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3002:	2202      	movs	r2, #2
    3004:	4b16      	ldr	r3, [pc, #88]	; (3060 <usb_find_cfg_desc+0x64>)
    3006:	4798      	blx	r3
	if (!desc) {
    3008:	4603      	mov	r3, r0
    300a:	b1e8      	cbz	r0, 3048 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    300c:	4284      	cmp	r4, r0
    300e:	d91d      	bls.n	304c <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3010:	7802      	ldrb	r2, [r0, #0]
    3012:	2a01      	cmp	r2, #1
    3014:	d91c      	bls.n	3050 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    3016:	7842      	ldrb	r2, [r0, #1]
    3018:	2a02      	cmp	r2, #2
    301a:	d11b      	bne.n	3054 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    301c:	7942      	ldrb	r2, [r0, #5]
    301e:	42aa      	cmp	r2, r5
    3020:	d012      	beq.n	3048 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3022:	78d9      	ldrb	r1, [r3, #3]
    3024:	789a      	ldrb	r2, [r3, #2]
    3026:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    302a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    302e:	429c      	cmp	r4, r3
    3030:	d909      	bls.n	3046 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3032:	781a      	ldrb	r2, [r3, #0]
    3034:	2a01      	cmp	r2, #1
    3036:	d90f      	bls.n	3058 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3038:	785a      	ldrb	r2, [r3, #1]
    303a:	2a02      	cmp	r2, #2
    303c:	d10e      	bne.n	305c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    303e:	795a      	ldrb	r2, [r3, #5]
    3040:	42aa      	cmp	r2, r5
    3042:	d1ee      	bne.n	3022 <usb_find_cfg_desc+0x26>
    3044:	e000      	b.n	3048 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3046:	2300      	movs	r3, #0
}
    3048:	4618      	mov	r0, r3
    304a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    304c:	2300      	movs	r3, #0
    304e:	e7fb      	b.n	3048 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3050:	2300      	movs	r3, #0
    3052:	e7f9      	b.n	3048 <usb_find_cfg_desc+0x4c>
	return NULL;
    3054:	2300      	movs	r3, #0
    3056:	e7f7      	b.n	3048 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3058:	2300      	movs	r3, #0
    305a:	e7f5      	b.n	3048 <usb_find_cfg_desc+0x4c>
	return NULL;
    305c:	2300      	movs	r3, #0
    305e:	e7f3      	b.n	3048 <usb_find_cfg_desc+0x4c>
    3060:	00002f7d 	.word	0x00002f7d

00003064 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3064:	4288      	cmp	r0, r1
    3066:	d217      	bcs.n	3098 <usb_find_str_desc+0x34>
{
    3068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    306c:	460d      	mov	r5, r1
    306e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3070:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3072:	f04f 0803 	mov.w	r8, #3
    3076:	4f0c      	ldr	r7, [pc, #48]	; (30a8 <usb_find_str_desc+0x44>)
    3078:	4642      	mov	r2, r8
    307a:	4629      	mov	r1, r5
    307c:	47b8      	blx	r7
		if (desc) {
    307e:	4603      	mov	r3, r0
    3080:	b170      	cbz	r0, 30a0 <usb_find_str_desc+0x3c>
	return desc[0];
    3082:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3084:	2801      	cmp	r0, #1
    3086:	d90a      	bls.n	309e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3088:	42a6      	cmp	r6, r4
    308a:	d009      	beq.n	30a0 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    308c:	4418      	add	r0, r3
    308e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3090:	4285      	cmp	r5, r0
    3092:	d8f1      	bhi.n	3078 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3094:	2300      	movs	r3, #0
    3096:	e003      	b.n	30a0 <usb_find_str_desc+0x3c>
    3098:	2300      	movs	r3, #0
}
    309a:	4618      	mov	r0, r3
    309c:	4770      	bx	lr
			_desc_len_check();
    309e:	2300      	movs	r3, #0
}
    30a0:	4618      	mov	r0, r3
    30a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30a6:	bf00      	nop
    30a8:	00002f7d 	.word	0x00002f7d

000030ac <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    30ac:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    30ae:	4805      	ldr	r0, [pc, #20]	; (30c4 <cdc_device_acm_init+0x18>)
    30b0:	4b05      	ldr	r3, [pc, #20]	; (30c8 <cdc_device_acm_init+0x1c>)
    30b2:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    30b4:	4b05      	ldr	r3, [pc, #20]	; (30cc <cdc_device_acm_init+0x20>)
    30b6:	4798      	blx	r3

	usbdc_start(single_desc);
    30b8:	4805      	ldr	r0, [pc, #20]	; (30d0 <cdc_device_acm_init+0x24>)
    30ba:	4b06      	ldr	r3, [pc, #24]	; (30d4 <cdc_device_acm_init+0x28>)
    30bc:	4798      	blx	r3
	usbdc_attach();
    30be:	4b06      	ldr	r3, [pc, #24]	; (30d8 <cdc_device_acm_init+0x2c>)
    30c0:	4798      	blx	r3
    30c2:	bd08      	pop	{r3, pc}
    30c4:	20000374 	.word	0x20000374
    30c8:	00002ead 	.word	0x00002ead
    30cc:	0000285d 	.word	0x0000285d
    30d0:	20000008 	.word	0x20000008
    30d4:	00002f1d 	.word	0x00002f1d
    30d8:	00002f51 	.word	0x00002f51

000030dc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    30dc:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    30de:	4b01      	ldr	r3, [pc, #4]	; (30e4 <usb_init+0x8>)
    30e0:	4798      	blx	r3
    30e2:	bd08      	pop	{r3, pc}
    30e4:	000030ad 	.word	0x000030ad

000030e8 <__libc_init_array>:
    30e8:	b570      	push	{r4, r5, r6, lr}
    30ea:	4e0d      	ldr	r6, [pc, #52]	; (3120 <__libc_init_array+0x38>)
    30ec:	4c0d      	ldr	r4, [pc, #52]	; (3124 <__libc_init_array+0x3c>)
    30ee:	1ba4      	subs	r4, r4, r6
    30f0:	10a4      	asrs	r4, r4, #2
    30f2:	2500      	movs	r5, #0
    30f4:	42a5      	cmp	r5, r4
    30f6:	d109      	bne.n	310c <__libc_init_array+0x24>
    30f8:	4e0b      	ldr	r6, [pc, #44]	; (3128 <__libc_init_array+0x40>)
    30fa:	4c0c      	ldr	r4, [pc, #48]	; (312c <__libc_init_array+0x44>)
    30fc:	f000 f894 	bl	3228 <_init>
    3100:	1ba4      	subs	r4, r4, r6
    3102:	10a4      	asrs	r4, r4, #2
    3104:	2500      	movs	r5, #0
    3106:	42a5      	cmp	r5, r4
    3108:	d105      	bne.n	3116 <__libc_init_array+0x2e>
    310a:	bd70      	pop	{r4, r5, r6, pc}
    310c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3110:	4798      	blx	r3
    3112:	3501      	adds	r5, #1
    3114:	e7ee      	b.n	30f4 <__libc_init_array+0xc>
    3116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    311a:	4798      	blx	r3
    311c:	3501      	adds	r5, #1
    311e:	e7f2      	b.n	3106 <__libc_init_array+0x1e>
    3120:	00003234 	.word	0x00003234
    3124:	00003234 	.word	0x00003234
    3128:	00003234 	.word	0x00003234
    312c:	00003238 	.word	0x00003238

00003130 <memcpy>:
    3130:	b510      	push	{r4, lr}
    3132:	1e43      	subs	r3, r0, #1
    3134:	440a      	add	r2, r1
    3136:	4291      	cmp	r1, r2
    3138:	d100      	bne.n	313c <memcpy+0xc>
    313a:	bd10      	pop	{r4, pc}
    313c:	f811 4b01 	ldrb.w	r4, [r1], #1
    3140:	f803 4f01 	strb.w	r4, [r3, #1]!
    3144:	e7f7      	b.n	3136 <memcpy+0x6>

00003146 <memset>:
    3146:	4402      	add	r2, r0
    3148:	4603      	mov	r3, r0
    314a:	4293      	cmp	r3, r2
    314c:	d100      	bne.n	3150 <memset+0xa>
    314e:	4770      	bx	lr
    3150:	f803 1b01 	strb.w	r1, [r3], #1
    3154:	e7f9      	b.n	314a <memset+0x4>
    3156:	0000      	movs	r0, r0
    3158:	682f2e2e 	.word	0x682f2e2e
    315c:	732f6c61 	.word	0x732f6c61
    3160:	682f6372 	.word	0x682f6372
    3164:	735f6c61 	.word	0x735f6c61
    3168:	6d5f6970 	.word	0x6d5f6970
    316c:	7973615f 	.word	0x7973615f
    3170:	632e636e 	.word	0x632e636e
    3174:	00000000 	.word	0x00000000
    3178:	682f2e2e 	.word	0x682f2e2e
    317c:	752f6c61 	.word	0x752f6c61
    3180:	736c6974 	.word	0x736c6974
    3184:	6372732f 	.word	0x6372732f
    3188:	6974752f 	.word	0x6974752f
    318c:	6c5f736c 	.word	0x6c5f736c
    3190:	2e747369 	.word	0x2e747369
    3194:	00000063 	.word	0x00000063
    3198:	40003000 	.word	0x40003000
    319c:	40003400 	.word	0x40003400
    31a0:	41012000 	.word	0x41012000
    31a4:	41014000 	.word	0x41014000
    31a8:	43000000 	.word	0x43000000
    31ac:	43000400 	.word	0x43000400
    31b0:	43000800 	.word	0x43000800
    31b4:	43000c00 	.word	0x43000c00

000031b8 <_i2cms>:
	...
    31d0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    31e0:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000031ec <_usb_ep_cfgs>:
    31ec:	200002b0 00000000 00000040 20000270     ... ....@...p.. 
    31fc:	00000000 00000040 20000230 00000000     ....@...0.. ....
    320c:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    321c:	73752f65 2e636462 00000063              e/usbdc.c...

00003228 <_init>:
    3228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    322a:	bf00      	nop
    322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    322e:	bc08      	pop	{r3}
    3230:	469e      	mov	lr, r3
    3232:	4770      	bx	lr

00003234 <__init_array_start>:
    3234:	00000289 	.word	0x00000289

00003238 <_fini>:
    3238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    323a:	bf00      	nop
    323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    323e:	bc08      	pop	{r3}
    3240:	469e      	mov	lr, r3
    3242:	4770      	bx	lr

00003244 <__fini_array_start>:
    3244:	00000265 	.word	0x00000265
