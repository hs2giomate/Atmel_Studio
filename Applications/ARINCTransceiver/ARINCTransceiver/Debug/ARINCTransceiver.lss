
ARINCTransceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075a4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000075a4  000075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000071c  20000000  000075ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002071c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002071c  2**0
                  CONTENTS
  5 .bss          00000734  2000071c  00007cc8  0002071c  2**2
                  ALLOC
  6 .stack        00010000  20000e50  000083fc  0002071c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002071c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002074a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004d8ed  00000000  00000000  000207a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007342  00000000  00000000  0006e090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001ab95  00000000  00000000  000753d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001528  00000000  00000000  0008ff67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c60  00000000  00000000  0009148f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000441b2  00000000  00000000  000930ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00028343  00000000  00000000  000d72a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012ebad  00000000  00000000  000ff5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00004094  00000000  00000000  0022e194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 0e 01 20 01 1c 00 00 85 1c 00 00 85 1c 00 00     P.. ............
      10:	85 1c 00 00 85 1c 00 00 85 1c 00 00 00 00 00 00     ................
	...
      2c:	85 1c 00 00 85 1c 00 00 00 00 00 00 85 1c 00 00     ................
      3c:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      4c:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      5c:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      6c:	25 3d 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     %=..............
      7c:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      8c:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      9c:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      ac:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      bc:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      cc:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
      dc:	85 1c 00 00 85 1c 00 00 85 1c 00 00 00 00 00 00     ................
	...
      f4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     104:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     114:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     124:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     134:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     144:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     154:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     164:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     174:	85 1c 00 00 85 1c 00 00 85 1c 00 00 71 53 00 00     ............qS..
     184:	7d 53 00 00 89 53 00 00 95 53 00 00 85 1c 00 00     }S...S...S......
     194:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     1a4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     1b4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     1c4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     1d4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     1e4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     1f4:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     204:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     214:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     224:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     234:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     244:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................
     254:	85 1c 00 00 85 1c 00 00 85 1c 00 00 85 1c 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000071c 	.word	0x2000071c
     280:	00000000 	.word	0x00000000
     284:	000075ac 	.word	0x000075ac

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000075ac 	.word	0x000075ac
     2c4:	20000720 	.word	0x20000720
     2c8:	000075ac 	.word	0x000075ac
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //ARINC_Conversions
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN17ARINC_Conversions6atohexEh>:
	}
	return result;
}

uint8_t ARINC_Conversions::atohex(unsigned char ch)
{
     2e4:	b480      	push	{r7}
     2e6:	b085      	sub	sp, #20
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
     2ec:	460b      	mov	r3, r1
     2ee:	70fb      	strb	r3, [r7, #3]
	uint8_t hex;
	
	if((ch>='0') && (ch<='9'))
     2f0:	78fb      	ldrb	r3, [r7, #3]
     2f2:	2b2f      	cmp	r3, #47	; 0x2f
     2f4:	dd06      	ble.n	304 <_ZN17ARINC_Conversions6atohexEh+0x20>
     2f6:	78fb      	ldrb	r3, [r7, #3]
     2f8:	2b39      	cmp	r3, #57	; 0x39
     2fa:	dc03      	bgt.n	304 <_ZN17ARINC_Conversions6atohexEh+0x20>
	hex = ch - '0';
     2fc:	78fb      	ldrb	r3, [r7, #3]
     2fe:	3b30      	subs	r3, #48	; 0x30
     300:	73fb      	strb	r3, [r7, #15]
     302:	e015      	b.n	330 <_ZN17ARINC_Conversions6atohexEh+0x4c>
	else if ((ch>='A') && (ch<='F'))
     304:	78fb      	ldrb	r3, [r7, #3]
     306:	2b40      	cmp	r3, #64	; 0x40
     308:	dd06      	ble.n	318 <_ZN17ARINC_Conversions6atohexEh+0x34>
     30a:	78fb      	ldrb	r3, [r7, #3]
     30c:	2b46      	cmp	r3, #70	; 0x46
     30e:	dc03      	bgt.n	318 <_ZN17ARINC_Conversions6atohexEh+0x34>
	hex = ch - 'A' + 10;
     310:	78fb      	ldrb	r3, [r7, #3]
     312:	3b37      	subs	r3, #55	; 0x37
     314:	73fb      	strb	r3, [r7, #15]
     316:	e00b      	b.n	330 <_ZN17ARINC_Conversions6atohexEh+0x4c>
	else if ((ch>='a') && (ch<='f'))
     318:	78fb      	ldrb	r3, [r7, #3]
     31a:	2b60      	cmp	r3, #96	; 0x60
     31c:	dd06      	ble.n	32c <_ZN17ARINC_Conversions6atohexEh+0x48>
     31e:	78fb      	ldrb	r3, [r7, #3]
     320:	2b66      	cmp	r3, #102	; 0x66
     322:	dc03      	bgt.n	32c <_ZN17ARINC_Conversions6atohexEh+0x48>
	hex = ch - 'a' +10;
     324:	78fb      	ldrb	r3, [r7, #3]
     326:	3b57      	subs	r3, #87	; 0x57
     328:	73fb      	strb	r3, [r7, #15]
     32a:	e001      	b.n	330 <_ZN17ARINC_Conversions6atohexEh+0x4c>
	else hex = 0;
     32c:	2300      	movs	r3, #0
     32e:	73fb      	strb	r3, [r7, #15]
	
	return hex;
     330:	7bfb      	ldrb	r3, [r7, #15]

}
     332:	4618      	mov	r0, r3
     334:	3714      	adds	r7, #20
     336:	46bd      	mov	sp, r7
     338:	bc80      	pop	{r7}
     33a:	4770      	bx	lr

0000033c <_ZN17ARINC_Conversions7atohex2Ecc>:
char ARINC_Conversions::atohex2(char upperNibble, char lowerNibble)
{
     33c:	b580      	push	{r7, lr}
     33e:	b084      	sub	sp, #16
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
     344:	460b      	mov	r3, r1
     346:	70fb      	strb	r3, [r7, #3]
     348:	4613      	mov	r3, r2
     34a:	70bb      	strb	r3, [r7, #2]
	char hex2;
	hex2 = 0;
     34c:	2300      	movs	r3, #0
     34e:	73fb      	strb	r3, [r7, #15]
	hex2 = atohex(upperNibble) << 4;    // get upper hex nibble
     350:	78fb      	ldrb	r3, [r7, #3]
     352:	4619      	mov	r1, r3
     354:	6878      	ldr	r0, [r7, #4]
     356:	4b0a      	ldr	r3, [pc, #40]	; (380 <_ZN17ARINC_Conversions7atohex2Ecc+0x44>)
     358:	4798      	blx	r3
     35a:	4603      	mov	r3, r0
     35c:	011b      	lsls	r3, r3, #4
     35e:	73fb      	strb	r3, [r7, #15]
	hex2 |= atohex(lowerNibble);        // get lower hex nibble and merge
     360:	78bb      	ldrb	r3, [r7, #2]
     362:	4619      	mov	r1, r3
     364:	6878      	ldr	r0, [r7, #4]
     366:	4b06      	ldr	r3, [pc, #24]	; (380 <_ZN17ARINC_Conversions7atohex2Ecc+0x44>)
     368:	4798      	blx	r3
     36a:	4603      	mov	r3, r0
     36c:	461a      	mov	r2, r3
     36e:	7bfb      	ldrb	r3, [r7, #15]
     370:	4313      	orrs	r3, r2
     372:	73fb      	strb	r3, [r7, #15]
	return hex2;
     374:	7bfb      	ldrb	r3, [r7, #15]

     376:	4618      	mov	r0, r3
     378:	3710      	adds	r7, #16
     37a:	46bd      	mov	sp, r7
     37c:	bd80      	pop	{r7, pc}
     37e:	bf00      	nop
     380:	000002e5 	.word	0x000002e5

00000384 <hri_port_read_DIR_reg>:
			//xprint("\n\rTransmitting2\n\r>");
			if(ch==' ')                         // print out the status registers if
			// SW3 pressed or spacebar from PC
			{
				ch=0xff;
				xprint("\n\rHI-3593 Status, Control Registers\r\n");
     384:	b480      	push	{r7}
			
				printStatusRegisters();                  // print out the status registers
     386:	b083      	sub	sp, #12
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
			
				xprint("\n\r\t  ***** Press  spacebar to continue ******");
     38c:	460b      	mov	r3, r1
     38e:	70fb      	strb	r3, [r7, #3]
     390:	78fb      	ldrb	r3, [r7, #3]
     392:	687a      	ldr	r2, [r7, #4]
				
				while(' ' != ch){xgetchar(&ch);};        // start again if SW-4 pressed/spacebar
     394:	01db      	lsls	r3, r3, #7
     396:	4413      	add	r3, r2
     398:	681b      	ldr	r3, [r3, #0]
     39a:	4618      	mov	r0, r3
     39c:	370c      	adds	r7, #12
     39e:	46bd      	mov	sp, r7
     3a0:	bc80      	pop	{r7}
     3a2:	4770      	bx	lr

000003a4 <hri_port_set_OUT_reg>:
     3a4:	b480      	push	{r7}
     3a6:	b085      	sub	sp, #20
				ch=0x00;
     3a8:	af00      	add	r7, sp, #0
     3aa:	60f8      	str	r0, [r7, #12]
			}
			
			if( ch=='p'|| TxPaused){  
     3ac:	460b      	mov	r3, r1
     3ae:	607a      	str	r2, [r7, #4]
     3b0:	72fb      	strb	r3, [r7, #11]
     3b2:	7afb      	ldrb	r3, [r7, #11]
     3b4:	68fa      	ldr	r2, [r7, #12]
     3b6:	01db      	lsls	r3, r3, #7
     3b8:	4413      	add	r3, r2
				ch=0xff;                  // pause transmitting
     3ba:	3318      	adds	r3, #24
     3bc:	687a      	ldr	r2, [r7, #4]
				debounceButton(OLED_BUTTON2);                // debounce this button
     3be:	601a      	str	r2, [r3, #0]
     3c0:	bf00      	nop
     3c2:	3714      	adds	r7, #20
     3c4:	46bd      	mov	sp, r7
				xprint("\n\n\rTransmit Paused\n\r");
     3c6:	bc80      	pop	{r7}
     3c8:	4770      	bx	lr

000003ca <hri_port_read_OUT_reg>:
     3ca:	b480      	push	{r7}
     3cc:	b083      	sub	sp, #12
				xprint("\n\rPress OLED_BUTTON-2 to transmit one frame and pause\n\r");
     3ce:	af00      	add	r7, sp, #0
     3d0:	6078      	str	r0, [r7, #4]
     3d2:	460b      	mov	r3, r1
     3d4:	70fb      	strb	r3, [r7, #3]
				xprint("\n\rPress OLED_BUTTON-3 to Resume\n\r");
     3d6:	78fb      	ldrb	r3, [r7, #3]
     3d8:	687a      	ldr	r2, [r7, #4]
     3da:	01db      	lsls	r3, r3, #7
     3dc:	4413      	add	r3, r2

				TxPaused=YES;
     3de:	3310      	adds	r3, #16
     3e0:	681b      	ldr	r3, [r3, #0]
     3e2:	4618      	mov	r0, r3
				while(gpio_get_pin_level(OLED_BUTTON2))                          // wait for button-2 pressed again
     3e4:	370c      	adds	r7, #12
     3e6:	46bd      	mov	sp, r7
     3e8:	bc80      	pop	{r7}
     3ea:	4770      	bx	lr

000003ec <hri_port_clear_OUT_reg>:
     3ec:	b480      	push	{r7}
     3ee:	b085      	sub	sp, #20
				{
					if(!gpio_get_pin_level(OLED_BUTTON3))
     3f0:	af00      	add	r7, sp, #0
     3f2:	60f8      	str	r0, [r7, #12]
     3f4:	460b      	mov	r3, r1
     3f6:	607a      	str	r2, [r7, #4]
     3f8:	72fb      	strb	r3, [r7, #11]
     3fa:	7afb      	ldrb	r3, [r7, #11]
     3fc:	68fa      	ldr	r2, [r7, #12]
     3fe:	01db      	lsls	r3, r3, #7
     400:	4413      	add	r3, r2
					{
						TxPaused=NO;
     402:	3314      	adds	r3, #20
     404:	687a      	ldr	r2, [r7, #4]
     406:	601a      	str	r2, [r3, #0]
						xprint("\n\rTransmitter Resumed...\n\r");
     408:	bf00      	nop
     40a:	3714      	adds	r7, #20
     40c:	46bd      	mov	sp, r7
     40e:	bc80      	pop	{r7}
						break;
					}
				};
				debounceButton(OLED_BUTTON2);         // debounce this button
     410:	4770      	bx	lr

00000412 <hri_port_toggle_OUT_reg>:
     412:	b480      	push	{r7}
     414:	b085      	sub	sp, #20
     416:	af00      	add	r7, sp, #0
			}
			
			if(ch=='m' ){     // print out the Label memory for both receivers if SW3 pushed
     418:	60f8      	str	r0, [r7, #12]
     41a:	460b      	mov	r3, r1
     41c:	607a      	str	r2, [r7, #4]
				ch=0xff;
     41e:	72fb      	strb	r3, [r7, #11]
     420:	7afb      	ldrb	r3, [r7, #11]
 				xprint("\n\rReceiver 1 Labels\n\r");
     422:	68fa      	ldr	r2, [r7, #12]
     424:	01db      	lsls	r3, r3, #7
     426:	4413      	add	r3, r2
     428:	331c      	adds	r3, #28
				PrintLabelsOnConsole(LabelsAr1);
     42a:	687a      	ldr	r2, [r7, #4]
     42c:	601a      	str	r2, [r3, #0]
     42e:	bf00      	nop
     430:	3714      	adds	r7, #20
     432:	46bd      	mov	sp, r7
     434:	bc80      	pop	{r7}
			//	PrintOctalLabelsOnConsole(LabelsAr1);
				//crlf();
				
				xprint("\n\rReceiver 2 Labels\n\r");
     436:	4770      	bx	lr

00000438 <hri_port_read_IN_reg>:
     438:	b480      	push	{r7}
     43a:	b083      	sub	sp, #12
     43c:	af00      	add	r7, sp, #0
				PrintLabelsOnConsole(LabelsAr2);
     43e:	6078      	str	r0, [r7, #4]
     440:	460b      	mov	r3, r1
     442:	70fb      	strb	r3, [r7, #3]
     444:	78fb      	ldrb	r3, [r7, #3]
     446:	687a      	ldr	r2, [r7, #4]
     448:	01db      	lsls	r3, r3, #7
				xprint("\n\rPress OLED_BUTTON-3 to Resume\n\r");
     44a:	4413      	add	r3, r2
     44c:	3320      	adds	r3, #32
     44e:	681b      	ldr	r3, [r3, #0]
     450:	4618      	mov	r0, r3
				
				while(gpio_get_pin_level(OLED_BUTTON3));                      // resume if Button-4 pressed or spacebar again
     452:	370c      	adds	r7, #12
     454:	46bd      	mov	sp, r7
     456:	bc80      	pop	{r7}
     458:	4770      	bx	lr
	...

0000045c <_gpio_set_level>:
     45c:	b580      	push	{r7, lr}
     45e:	b082      	sub	sp, #8
				xprint("\n\rTransmitter Resumed...\n\r");
     460:	af00      	add	r7, sp, #0
     462:	4603      	mov	r3, r0
     464:	6039      	str	r1, [r7, #0]
     466:	71fb      	strb	r3, [r7, #7]
			}
			
			cpu_irq_disable();
     468:	4613      	mov	r3, r2
     46a:	71bb      	strb	r3, [r7, #6]
     46c:	79bb      	ldrb	r3, [r7, #6]
			Status_F = HI3893.R_Register(R_TSR);      // Transmit control register
     46e:	2b00      	cmp	r3, #0
     470:	d006      	beq.n	480 <_gpio_set_level+0x24>
     472:	79fb      	ldrb	r3, [r7, #7]
     474:	683a      	ldr	r2, [r7, #0]
     476:	4619      	mov	r1, r3
     478:	4806      	ldr	r0, [pc, #24]	; (494 <_gpio_set_level+0x38>)
     47a:	4b07      	ldr	r3, [pc, #28]	; (498 <_gpio_set_level+0x3c>)
     47c:	4798      	blx	r3
     47e:	e005      	b.n	48c <_gpio_set_level+0x30>
			cpu_irq_enable();
     480:	79fb      	ldrb	r3, [r7, #7]
     482:	683a      	ldr	r2, [r7, #0]
     484:	4619      	mov	r1, r3
		} while (Status_F & TFFULL);      // Wait until FIFO not full before loading next byte
     486:	4803      	ldr	r0, [pc, #12]	; (494 <_gpio_set_level+0x38>)
     488:	4b04      	ldr	r3, [pc, #16]	; (49c <_gpio_set_level+0x40>)
     48a:	4798      	blx	r3
     48c:	bf00      	nop
     48e:	3708      	adds	r7, #8
     490:	46bd      	mov	sp, r7
		do {
     492:	bd80      	pop	{r7, pc}

		if(ConsoleCommands(ch)){              // 1 second delay to see the message on the console
     494:	41008000 	.word	0x41008000
     498:	000003a5 	.word	0x000003a5
     49c:	000003ed 	.word	0x000003ed

000004a0 <_gpio_toggle_level>:
     4a0:	b580      	push	{r7, lr}
     4a2:	b082      	sub	sp, #8
			delay_ms(K_1SEC);
     4a4:	af00      	add	r7, sp, #0
     4a6:	4603      	mov	r3, r0
     4a8:	6039      	str	r1, [r7, #0]
     4aa:	71fb      	strb	r3, [r7, #7]
		}
		
		cpu_irq_disable();
     4ac:	79fb      	ldrb	r3, [r7, #7]
     4ae:	683a      	ldr	r2, [r7, #0]
     4b0:	4619      	mov	r1, r3
		HI3893.TransmitCommandAndData(TXFIFO,TXBuffer);
     4b2:	4803      	ldr	r0, [pc, #12]	; (4c0 <_gpio_toggle_level+0x20>)
     4b4:	4b03      	ldr	r3, [pc, #12]	; (4c4 <_gpio_toggle_level+0x24>)
     4b6:	4798      	blx	r3
     4b8:	bf00      	nop
     4ba:	3708      	adds	r7, #8
     4bc:	46bd      	mov	sp, r7
     4be:	bd80      	pop	{r7, pc}
     4c0:	41008000 	.word	0x41008000
		cpu_irq_enable();
     4c4:	00000413 	.word	0x00000413

000004c8 <_gpio_get_level>:
     4c8:	b580      	push	{r7, lr}
		printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     4ca:	b086      	sub	sp, #24
     4cc:	af00      	add	r7, sp, #0
     4ce:	4603      	mov	r3, r0
     4d0:	71fb      	strb	r3, [r7, #7]
     4d2:	f107 030c 	add.w	r3, r7, #12
		//PORTT= ~TXBuffer[3];                               // show the transmitted nibble of the LSB

		//PORTA |= 0x80;                                     // pulse high for scope
		//PORTA &= 0x7F;
		
		BigCounter.Word32++;
     4d6:	4618      	mov	r0, r3
     4d8:	4b13      	ldr	r3, [pc, #76]	; (528 <_gpio_get_level+0x60>)
     4da:	4798      	blx	r3
     4dc:	79fb      	ldrb	r3, [r7, #7]
     4de:	4619      	mov	r1, r3
     4e0:	4812      	ldr	r0, [pc, #72]	; (52c <_gpio_get_level+0x64>)
     4e2:	4b13      	ldr	r3, [pc, #76]	; (530 <_gpio_get_level+0x68>)
		TXBuffer[2] = 0xff;

		TXBuffer[3] = 0xff;              // *** generate test labels ***
		#else                                 // increment the HUGE counter
		
		TXBuffer[0] = BigCounter.PayLoad[1];
     4e4:	4798      	blx	r3
     4e6:	6178      	str	r0, [r7, #20]
     4e8:	79fb      	ldrb	r3, [r7, #7]
     4ea:	4619      	mov	r1, r3
     4ec:	480f      	ldr	r0, [pc, #60]	; (52c <_gpio_get_level+0x64>)
     4ee:	4b11      	ldr	r3, [pc, #68]	; (534 <_gpio_get_level+0x6c>)
		TXBuffer[1] = BigCounter.PayLoad[2];
     4f0:	4798      	blx	r3
     4f2:	4602      	mov	r2, r0
     4f4:	697b      	ldr	r3, [r7, #20]
     4f6:	43db      	mvns	r3, r3
     4f8:	4013      	ands	r3, r2
     4fa:	613b      	str	r3, [r7, #16]
		TXBuffer[2] = BigCounter.PayLoad[3];
     4fc:	79fb      	ldrb	r3, [r7, #7]
     4fe:	4619      	mov	r1, r3
     500:	480a      	ldr	r0, [pc, #40]	; (52c <_gpio_get_level+0x64>)
     502:	4b0d      	ldr	r3, [pc, #52]	; (538 <_gpio_get_level+0x70>)
     504:	4798      	blx	r3
     506:	4602      	mov	r2, r0
		TXBuffer[3] = BigCounter.PayLoad[3];              // copy the LSB to the label for testing purposes
     508:	697b      	ldr	r3, [r7, #20]
     50a:	4013      	ands	r3, r2
     50c:	693a      	ldr	r2, [r7, #16]
     50e:	4313      	orrs	r3, r2
     510:	613b      	str	r3, [r7, #16]
     512:	f107 030c 	add.w	r3, r7, #12
			for(;;);
			
		}
		#endif
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     516:	4618      	mov	r0, r3
     518:	4b08      	ldr	r3, [pc, #32]	; (53c <_gpio_get_level+0x74>)
     51a:	4798      	blx	r3
     51c:	693b      	ldr	r3, [r7, #16]
     51e:	4618      	mov	r0, r3
     520:	3718      	adds	r7, #24
     522:	46bd      	mov	sp, r7
		delay_ms(K_1SEC);                      // small delay so we can see the PL LEDs flash better
     524:	bd80      	pop	{r7, pc}
     526:	bf00      	nop
     528:	00002f81 	.word	0x00002f81
			xgetchar(&ch);
     52c:	41008000 	.word	0x41008000
     530:	00000385 	.word	0x00000385
     534:	00000439 	.word	0x00000439
     538:	000003cb 	.word	0x000003cb
     53c:	00002f8f 	.word	0x00002f8f

00000540 <gpio_set_pin_level>:
     540:	b580      	push	{r7, lr}
     542:	b082      	sub	sp, #8
     544:	af00      	add	r7, sp, #0
     546:	4603      	mov	r3, r0
     548:	460a      	mov	r2, r1
     54a:	71fb      	strb	r3, [r7, #7]
     54c:	4613      	mov	r3, r2
     54e:	71bb      	strb	r3, [r7, #6]
     550:	79fb      	ldrb	r3, [r7, #7]
     552:	115b      	asrs	r3, r3, #5
     554:	b2d8      	uxtb	r0, r3
     556:	79fb      	ldrb	r3, [r7, #7]
     558:	f003 031f 	and.w	r3, r3, #31
     55c:	2201      	movs	r2, #1
     55e:	fa02 f303 	lsl.w	r3, r2, r3
     562:	79ba      	ldrb	r2, [r7, #6]
     564:	4619      	mov	r1, r3
     566:	4b03      	ldr	r3, [pc, #12]	; (574 <gpio_set_pin_level+0x34>)
     568:	4798      	blx	r3
     56a:	bf00      	nop
     56c:	3708      	adds	r7, #8
     56e:	46bd      	mov	sp, r7
     570:	bd80      	pop	{r7, pc}
     572:	bf00      	nop
     574:	0000045d 	.word	0x0000045d

00000578 <gpio_toggle_pin_level>:
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
     57e:	4603      	mov	r3, r0
     580:	71fb      	strb	r3, [r7, #7]
     582:	79fb      	ldrb	r3, [r7, #7]
     584:	115b      	asrs	r3, r3, #5
     586:	b2d8      	uxtb	r0, r3
     588:	79fb      	ldrb	r3, [r7, #7]
     58a:	f003 031f 	and.w	r3, r3, #31
     58e:	2201      	movs	r2, #1
     590:	fa02 f303 	lsl.w	r3, r2, r3
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     594:	4619      	mov	r1, r3
     596:	4b03      	ldr	r3, [pc, #12]	; (5a4 <gpio_toggle_pin_level+0x2c>)
     598:	4798      	blx	r3
}
     59a:	bf00      	nop
     59c:	3708      	adds	r7, #8
     59e:	46bd      	mov	sp, r7
     5a0:	bd80      	pop	{r7, pc}
     5a2:	bf00      	nop
     5a4:	000004a1 	.word	0x000004a1

000005a8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
     5ae:	4603      	mov	r3, r0
     5b0:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     5b2:	79fb      	ldrb	r3, [r7, #7]
     5b4:	115b      	asrs	r3, r3, #5
     5b6:	b2db      	uxtb	r3, r3
     5b8:	4618      	mov	r0, r3
     5ba:	4b09      	ldr	r3, [pc, #36]	; (5e0 <gpio_get_pin_level+0x38>)
     5bc:	4798      	blx	r3
     5be:	4601      	mov	r1, r0
     5c0:	79fb      	ldrb	r3, [r7, #7]
     5c2:	f003 031f 	and.w	r3, r3, #31
     5c6:	2201      	movs	r2, #1
     5c8:	fa02 f303 	lsl.w	r3, r2, r3
     5cc:	400b      	ands	r3, r1
     5ce:	2b00      	cmp	r3, #0
     5d0:	bf14      	ite	ne
     5d2:	2301      	movne	r3, #1
     5d4:	2300      	moveq	r3, #0
     5d6:	b2db      	uxtb	r3, r3
}
     5d8:	4618      	mov	r0, r3
     5da:	3708      	adds	r7, #8
     5dc:	46bd      	mov	sp, r7
     5de:	bd80      	pop	{r7, pc}
     5e0:	000004c9 	.word	0x000004c9

000005e4 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
     5e4:	b580      	push	{r7, lr}
     5e6:	b082      	sub	sp, #8
     5e8:	af00      	add	r7, sp, #0
     5ea:	6078      	str	r0, [r7, #4]
     5ec:	687b      	ldr	r3, [r7, #4]
     5ee:	4618      	mov	r0, r3
     5f0:	4b0a      	ldr	r3, [pc, #40]	; (61c <_ZN15ARINC_InterfaceC1Ev+0x38>)
     5f2:	4798      	blx	r3
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	3340      	adds	r3, #64	; 0x40
     5f8:	4618      	mov	r0, r3
     5fa:	4b09      	ldr	r3, [pc, #36]	; (620 <_ZN15ARINC_InterfaceC1Ev+0x3c>)
     5fc:	4798      	blx	r3
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
     604:	4618      	mov	r0, r3
     606:	4b07      	ldr	r3, [pc, #28]	; (624 <_ZN15ARINC_InterfaceC1Ev+0x40>)
     608:	4798      	blx	r3
	ptrARINC=this;
     60a:	4a07      	ldr	r2, [pc, #28]	; (628 <_ZN15ARINC_InterfaceC1Ev+0x44>)
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
     610:	687b      	ldr	r3, [r7, #4]
     612:	4618      	mov	r0, r3
     614:	3708      	adds	r7, #8
     616:	46bd      	mov	sp, r7
     618:	bd80      	pop	{r7, pc}
     61a:	bf00      	nop
     61c:	00002559 	.word	0x00002559
     620:	00001d55 	.word	0x00001d55
     624:	000002d1 	.word	0x000002d1
     628:	200007a0 	.word	0x200007a0

0000062c <_ZN15ARINC_Interface4InitEv>:
void	ARINC_Interface::Init(void){
     62c:	b580      	push	{r7, lr}
     62e:	b082      	sub	sp, #8
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
	usb0.init();
     634:	481b      	ldr	r0, [pc, #108]	; (6a4 <_ZN15ARINC_Interface4InitEv+0x78>)
     636:	4b1c      	ldr	r3, [pc, #112]	; (6a8 <_ZN15ARINC_Interface4InitEv+0x7c>)
     638:	4798      	blx	r3
	BITRATE0=false;
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	2200      	movs	r2, #0
     63e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	BITRATE1=false;
     642:	687b      	ldr	r3, [r7, #4]
     644:	2200      	movs	r2, #0
     646:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	BITRATE2=false;
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	2200      	movs	r2, #0
     64e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	OPT1=true;
     652:	687b      	ldr	r3, [r7, #4]
     654:	2201      	movs	r2, #1
     656:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	OPT2=false;
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	2200      	movs	r2, #0
     65e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PARITY=false;
     662:	687b      	ldr	r3, [r7, #4]
     664:	2200      	movs	r2, #0
     666:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	HW_RESET();
     66a:	6878      	ldr	r0, [r7, #4]
     66c:	4b0f      	ldr	r3, [pc, #60]	; (6ac <_ZN15ARINC_Interface4InitEv+0x80>)
     66e:	4798      	blx	r3
	HI3893.Init();
     670:	687b      	ldr	r3, [r7, #4]
     672:	3340      	adds	r3, #64	; 0x40
     674:	4618      	mov	r0, r3
     676:	4b0e      	ldr	r3, [pc, #56]	; (6b0 <_ZN15ARINC_Interface4InitEv+0x84>)
     678:	4798      	blx	r3
	timer1.Init();
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	4618      	mov	r0, r3
     67e:	4b0d      	ldr	r3, [pc, #52]	; (6b4 <_ZN15ARINC_Interface4InitEv+0x88>)
     680:	4798      	blx	r3
	handler=(FUNC_PTR)&ARINC_Interface::blink_LED0;
     682:	687b      	ldr	r3, [r7, #4]
     684:	4a0c      	ldr	r2, [pc, #48]	; (6b8 <_ZN15ARINC_Interface4InitEv+0x8c>)
     686:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	timer1.add_task(handler,1);
     68a:	6878      	ldr	r0, [r7, #4]
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
     692:	2201      	movs	r2, #1
     694:	4619      	mov	r1, r3
     696:	4b09      	ldr	r3, [pc, #36]	; (6bc <_ZN15ARINC_Interface4InitEv+0x90>)
     698:	4798      	blx	r3
}
     69a:	bf00      	nop
     69c:	3708      	adds	r7, #8
     69e:	46bd      	mov	sp, r7
     6a0:	bd80      	pop	{r7, pc}
     6a2:	bf00      	nop
     6a4:	20000738 	.word	0x20000738
     6a8:	00002771 	.word	0x00002771
     6ac:	000013b5 	.word	0x000013b5
     6b0:	00001d75 	.word	0x00001d75
     6b4:	000025a9 	.word	0x000025a9
     6b8:	000013e5 	.word	0x000013e5
     6bc:	00002639 	.word	0x00002639

000006c0 <_ZN15ARINC_Interface8SayHelloEv>:
void	ARINC_Interface::SayHello(void){
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
	xprint("\n\r\n--- hs2 ARINC Interface  ----\n\r");
     6c8:	4903      	ldr	r1, [pc, #12]	; (6d8 <_ZN15ARINC_Interface8SayHelloEv+0x18>)
     6ca:	6878      	ldr	r0, [r7, #4]
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <_ZN15ARINC_Interface8SayHelloEv+0x1c>)
     6ce:	4798      	blx	r3
}
     6d0:	bf00      	nop
     6d2:	3708      	adds	r7, #8
     6d4:	46bd      	mov	sp, r7
     6d6:	bd80      	pop	{r7, pc}
     6d8:	00006934 	.word	0x00006934
     6dc:	000006e1 	.word	0x000006e1

000006e0 <_ZN15ARINC_Interface6xprintEPKc>:
		
	} // loop
	timer1.stop();
}  // Transmit Mode End

void ARINC_Interface::xprint(const char *message){
     6e0:	b580      	push	{r7, lr}
     6e2:	b0c6      	sub	sp, #280	; 0x118
     6e4:	af00      	add	r7, sp, #0
     6e6:	1d3b      	adds	r3, r7, #4
     6e8:	6018      	str	r0, [r3, #0]
     6ea:	463b      	mov	r3, r7
     6ec:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
     6ee:	463b      	mov	r3, r7
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
     6f6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
     6fa:	4b18      	ldr	r3, [pc, #96]	; (75c <_ZN15ARINC_Interface6xprintEPKc+0x7c>)
     6fc:	4798      	blx	r3
     6fe:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){		
     702:	2300      	movs	r3, #0
     704:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
     708:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
     70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
     710:	429a      	cmp	r2, r3
     712:	d212      	bcs.n	73a <_ZN15ARINC_Interface6xprintEPKc+0x5a>
			chain[i]=*p;
     714:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
     718:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     71c:	7811      	ldrb	r1, [r2, #0]
     71e:	f107 0208 	add.w	r2, r7, #8
     722:	54d1      	strb	r1, [r2, r3]
			p++;			
     724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     728:	3301      	adds	r3, #1
     72a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){		
     72e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
     732:	3301      	adds	r3, #1
     734:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
     738:	e7e6      	b.n	708 <_ZN15ARINC_Interface6xprintEPKc+0x28>
		}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
     73a:	f107 0308 	add.w	r3, r7, #8
     73e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	usb0.write(ptr,s);
     742:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
     746:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
     74a:	4805      	ldr	r0, [pc, #20]	; (760 <_ZN15ARINC_Interface6xprintEPKc+0x80>)
     74c:	4b05      	ldr	r3, [pc, #20]	; (764 <_ZN15ARINC_Interface6xprintEPKc+0x84>)
     74e:	4798      	blx	r3
	}
     750:	bf00      	nop
     752:	f507 778c 	add.w	r7, r7, #280	; 0x118
     756:	46bd      	mov	sp, r7
     758:	bd80      	pop	{r7, pc}
     75a:	bf00      	nop
     75c:	00006701 	.word	0x00006701
     760:	20000738 	.word	0x20000738
     764:	000027fd 	.word	0x000027fd

00000768 <_ZN15ARINC_Interface8xgetcharEPc>:
	
void	ARINC_Interface::xgetchar(char * ch){
     768:	b580      	push	{r7, lr}
     76a:	b084      	sub	sp, #16
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
     770:	6039      	str	r1, [r7, #0]

	uint8_t	*p=(uint8_t*)ch;
     772:	683b      	ldr	r3, [r7, #0]
     774:	60fb      	str	r3, [r7, #12]
	usb0.read(p,1);
     776:	2201      	movs	r2, #1
     778:	68f9      	ldr	r1, [r7, #12]
     77a:	4803      	ldr	r0, [pc, #12]	; (788 <_ZN15ARINC_Interface8xgetcharEPc+0x20>)
     77c:	4b03      	ldr	r3, [pc, #12]	; (78c <_ZN15ARINC_Interface8xgetcharEPc+0x24>)
     77e:	4798      	blx	r3
	//while(!usb0.rxDone);

}
     780:	bf00      	nop
     782:	3710      	adds	r7, #16
     784:	46bd      	mov	sp, r7
     786:	bd80      	pop	{r7, pc}
     788:	20000738 	.word	0x20000738
     78c:	00002889 	.word	0x00002889

00000790 <_ZN15ARINC_Interface8xgetcharEPcb>:
char	ARINC_Interface::xgetchar(char * ch, bool wait){
     790:	b590      	push	{r4, r7, lr}
     792:	b087      	sub	sp, #28
     794:	af00      	add	r7, sp, #0
     796:	60f8      	str	r0, [r7, #12]
     798:	60b9      	str	r1, [r7, #8]
     79a:	4613      	mov	r3, r2
     79c:	71fb      	strb	r3, [r7, #7]
	char c;
	uint8_t	*p=(uint8_t*)ch;
     79e:	68bb      	ldr	r3, [r7, #8]
     7a0:	617b      	str	r3, [r7, #20]
	usb0.read(p,1,wait);
     7a2:	79fb      	ldrb	r3, [r7, #7]
     7a4:	2201      	movs	r2, #1
     7a6:	6979      	ldr	r1, [r7, #20]
     7a8:	4805      	ldr	r0, [pc, #20]	; (7c0 <_ZN15ARINC_Interface8xgetcharEPcb+0x30>)
     7aa:	4c06      	ldr	r4, [pc, #24]	; (7c4 <_ZN15ARINC_Interface8xgetcharEPcb+0x34>)
     7ac:	47a0      	blx	r4
	c=*p;
     7ae:	697b      	ldr	r3, [r7, #20]
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	74fb      	strb	r3, [r7, #19]
	return c;
     7b4:	7cfb      	ldrb	r3, [r7, #19]

}
     7b6:	4618      	mov	r0, r3
     7b8:	371c      	adds	r7, #28
     7ba:	46bd      	mov	sp, r7
     7bc:	bd90      	pop	{r4, r7, pc}
     7be:	bf00      	nop
     7c0:	20000738 	.word	0x20000738
     7c4:	0000284d 	.word	0x0000284d

000007c8 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv>:
	// <false"> Low
	// <true"> High
	true);
}
void ARINC_Interface::ConsoleCommandsHelp(void)
{
     7c8:	b580      	push	{r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
	xprint("\n\r\n--- Console Commands Help ---");
     7d0:	4915      	ldr	r1, [pc, #84]	; (828 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x60>)
     7d2:	6878      	ldr	r0, [r7, #4]
     7d4:	4b15      	ldr	r3, [pc, #84]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     7d6:	4798      	blx	r3
	xprint("\n\r  P = Parity Toggle on/off");
     7d8:	4915      	ldr	r1, [pc, #84]	; (830 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x68>)
     7da:	6878      	ldr	r0, [r7, #4]
     7dc:	4b13      	ldr	r3, [pc, #76]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     7de:	4798      	blx	r3
	xprint("\n\r  T = TFLIP  Toggle on/off");
     7e0:	4914      	ldr	r1, [pc, #80]	; (834 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x6c>)
     7e2:	6878      	ldr	r0, [r7, #4]
     7e4:	4b11      	ldr	r3, [pc, #68]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     7e6:	4798      	blx	r3
	xprint("\n\r  R = RFLIP  Toggle on/off");
     7e8:	4913      	ldr	r1, [pc, #76]	; (838 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x70>)
     7ea:	6878      	ldr	r0, [r7, #4]
     7ec:	4b0f      	ldr	r3, [pc, #60]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     7ee:	4798      	blx	r3
	xprint("\n\r  S = SDON, SD9, SD10 Toggle on/off");
     7f0:	4912      	ldr	r1, [pc, #72]	; (83c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x74>)
     7f2:	6878      	ldr	r0, [r7, #4]
     7f4:	4b0d      	ldr	r3, [pc, #52]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     7f6:	4798      	blx	r3
	xprint("\n\r  H = This Help Page");
     7f8:	4911      	ldr	r1, [pc, #68]	; (840 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x78>)
     7fa:	6878      	ldr	r0, [r7, #4]
     7fc:	4b0b      	ldr	r3, [pc, #44]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     7fe:	4798      	blx	r3
	xprint("\n\r  Space Bar = Display Status and Control regs");
     800:	4910      	ldr	r1, [pc, #64]	; (844 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x7c>)
     802:	6878      	ldr	r0, [r7, #4]
     804:	4b09      	ldr	r3, [pc, #36]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     806:	4798      	blx	r3
	xprint("\n\r  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
     808:	490f      	ldr	r1, [pc, #60]	; (848 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x80>)
     80a:	6878      	ldr	r0, [r7, #4]
     80c:	4b07      	ldr	r3, [pc, #28]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     80e:	4798      	blx	r3
	xprint("\n\r  M = Enter Custom Message. Explorer Mode  - ONLY!");
     810:	490e      	ldr	r1, [pc, #56]	; (84c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x84>)
     812:	6878      	ldr	r0, [r7, #4]
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     816:	4798      	blx	r3
	xprint("\n\r  ENTER= Transmit next message. Explorer Mode  - ONLY!\n\r");
     818:	490d      	ldr	r1, [pc, #52]	; (850 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x88>)
     81a:	6878      	ldr	r0, [r7, #4]
     81c:	4b03      	ldr	r3, [pc, #12]	; (82c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     81e:	4798      	blx	r3
}
     820:	bf00      	nop
     822:	3708      	adds	r7, #8
     824:	46bd      	mov	sp, r7
     826:	bd80      	pop	{r7, pc}
     828:	00006cbc 	.word	0x00006cbc
     82c:	000006e1 	.word	0x000006e1
     830:	00006ce0 	.word	0x00006ce0
     834:	00006d00 	.word	0x00006d00
     838:	00006d20 	.word	0x00006d20
     83c:	00006d40 	.word	0x00006d40
     840:	00006d68 	.word	0x00006d68
     844:	00006d80 	.word	0x00006d80
     848:	00006db0 	.word	0x00006db0
     84c:	00006df0 	.word	0x00006df0
     850:	00006e28 	.word	0x00006e28

00000854 <_ZN15ARINC_Interface14cpu_irq_enableEv>:

void	ARINC_Interface::cpu_irq_enable(void){
     854:	b480      	push	{r7}
     856:	b083      	sub	sp, #12
     858:	af00      	add	r7, sp, #0
     85a:	6078      	str	r0, [r7, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     85c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     860:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
     862:	bf00      	nop
     864:	370c      	adds	r7, #12
     866:	46bd      	mov	sp, r7
     868:	bc80      	pop	{r7}
     86a:	4770      	bx	lr

0000086c <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
     86c:	b480      	push	{r7}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
     874:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     878:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
     87a:	bf00      	nop
     87c:	370c      	adds	r7, #12
     87e:	46bd      	mov	sp, r7
     880:	bc80      	pop	{r7}
     882:	4770      	bx	lr

00000884 <_ZN15ARINC_Interface20printStatusRegistersEv>:
void	ARINC_Interface::printStatusRegisters(void){
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
	uint8_t	i;
	
	cpu_irq_disable();
     88c:	6878      	ldr	r0, [r7, #4]
     88e:	4b15      	ldr	r3, [pc, #84]	; (8e4 <_ZN15ARINC_Interface20printStatusRegistersEv+0x60>)
     890:	4798      	blx	r3
	getRegStatus();
     892:	6878      	ldr	r0, [r7, #4]
     894:	4b14      	ldr	r3, [pc, #80]	; (8e8 <_ZN15ARINC_Interface20printStatusRegistersEv+0x64>)
     896:	4798      	blx	r3
	cpu_irq_enable();
     898:	6878      	ldr	r0, [r7, #4]
     89a:	4b14      	ldr	r3, [pc, #80]	; (8ec <_ZN15ARINC_Interface20printStatusRegistersEv+0x68>)
     89c:	4798      	blx	r3
	for(i=0; i< 14;i++) {
     89e:	2300      	movs	r3, #0
     8a0:	73fb      	strb	r3, [r7, #15]
     8a2:	7bfb      	ldrb	r3, [r7, #15]
     8a4:	2b0d      	cmp	r3, #13
     8a6:	dc19      	bgt.n	8dc <_ZN15ARINC_Interface20printStatusRegistersEv+0x58>
	//	p=DebugArrayStrings[i];
		char *ptr=DebugArrayStrings[i];
     8a8:	7bfa      	ldrb	r2, [r7, #15]
     8aa:	4613      	mov	r3, r2
     8ac:	009b      	lsls	r3, r3, #2
     8ae:	4413      	add	r3, r2
     8b0:	009a      	lsls	r2, r3, #2
     8b2:	4413      	add	r3, r2
     8b4:	4a0e      	ldr	r2, [pc, #56]	; (8f0 <_ZN15ARINC_Interface20printStatusRegistersEv+0x6c>)
     8b6:	4413      	add	r3, r2
     8b8:	60bb      	str	r3, [r7, #8]
	//	char *ptr=p;
		xprint(ptr);
     8ba:	68b9      	ldr	r1, [r7, #8]
     8bc:	6878      	ldr	r0, [r7, #4]
     8be:	4b0d      	ldr	r3, [pc, #52]	; (8f4 <_ZN15ARINC_Interface20printStatusRegistersEv+0x70>)
     8c0:	4798      	blx	r3
		PrintHexByte(DebugArray[i]);  // Output the status registers
     8c2:	7bfb      	ldrb	r3, [r7, #15]
     8c4:	687a      	ldr	r2, [r7, #4]
     8c6:	4413      	add	r3, r2
     8c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
     8cc:	4619      	mov	r1, r3
     8ce:	6878      	ldr	r0, [r7, #4]
     8d0:	4b09      	ldr	r3, [pc, #36]	; (8f8 <_ZN15ARINC_Interface20printStatusRegistersEv+0x74>)
     8d2:	4798      	blx	r3
	for(i=0; i< 14;i++) {
     8d4:	7bfb      	ldrb	r3, [r7, #15]
     8d6:	3301      	adds	r3, #1
     8d8:	73fb      	strb	r3, [r7, #15]
     8da:	e7e2      	b.n	8a2 <_ZN15ARINC_Interface20printStatusRegistersEv+0x1e>
		//crlf();
	}
	
}
     8dc:	bf00      	nop
     8de:	3710      	adds	r7, #16
     8e0:	46bd      	mov	sp, r7
     8e2:	bd80      	pop	{r7, pc}
     8e4:	0000086d 	.word	0x0000086d
     8e8:	00000961 	.word	0x00000961
     8ec:	00000855 	.word	0x00000855
     8f0:	2000003c 	.word	0x2000003c
     8f4:	000006e1 	.word	0x000006e1
     8f8:	00000919 	.word	0x00000919

000008fc <_ZN15ARINC_Interface4crlfEv>:
void	ARINC_Interface::crlf(void){
     8fc:	b480      	push	{r7}
     8fe:	b085      	sub	sp, #20
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
	uint8_t p=0x0A;
     904:	230a      	movs	r3, #10
     906:	73fb      	strb	r3, [r7, #15]
	//usb0.write(&p,1);
	p=0x0D;
     908:	230d      	movs	r3, #13
     90a:	73fb      	strb	r3, [r7, #15]
	//usb0.write(&p,1);
}
     90c:	bf00      	nop
     90e:	3714      	adds	r7, #20
     910:	46bd      	mov	sp, r7
     912:	bc80      	pop	{r7}
     914:	4770      	bx	lr
	...

00000918 <_ZN15ARINC_Interface12PrintHexByteEh>:
void ARINC_Interface::PrintHexByte(uint8 c)
{
     918:	b580      	push	{r7, lr}
     91a:	b082      	sub	sp, #8
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	460b      	mov	r3, r1
     922:	70fb      	strb	r3, [r7, #3]
	//uint8_t q[]="0x";
//	uint8_t *ptr=q;
//	usb0.write(ptr,sizeof(q));
	static uint8_t p[]="0x00 ";
	p[2]=HexToAscii[(c>>4)];
     924:	78fb      	ldrb	r3, [r7, #3]
     926:	111b      	asrs	r3, r3, #4
     928:	4a09      	ldr	r2, [pc, #36]	; (950 <_ZN15ARINC_Interface12PrintHexByteEh+0x38>)
     92a:	5cd2      	ldrb	r2, [r2, r3]
     92c:	4b09      	ldr	r3, [pc, #36]	; (954 <_ZN15ARINC_Interface12PrintHexByteEh+0x3c>)
     92e:	709a      	strb	r2, [r3, #2]
	
	//xprint(&ch);
	//usb0.write((uint8_t *)&ch,1);
	p[3]=HexToAscii[(c & 0x0f)];
     930:	78fb      	ldrb	r3, [r7, #3]
     932:	f003 030f 	and.w	r3, r3, #15
     936:	4a06      	ldr	r2, [pc, #24]	; (950 <_ZN15ARINC_Interface12PrintHexByteEh+0x38>)
     938:	5cd2      	ldrb	r2, [r2, r3]
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <_ZN15ARINC_Interface12PrintHexByteEh+0x3c>)
     93c:	70da      	strb	r2, [r3, #3]

	usb0.write(&p[0],sizeof(p));
     93e:	2206      	movs	r2, #6
     940:	4904      	ldr	r1, [pc, #16]	; (954 <_ZN15ARINC_Interface12PrintHexByteEh+0x3c>)
     942:	4805      	ldr	r0, [pc, #20]	; (958 <_ZN15ARINC_Interface12PrintHexByteEh+0x40>)
     944:	4b05      	ldr	r3, [pc, #20]	; (95c <_ZN15ARINC_Interface12PrintHexByteEh+0x44>)
     946:	4798      	blx	r3
	
}
     948:	bf00      	nop
     94a:	3708      	adds	r7, #8
     94c:	46bd      	mov	sp, r7
     94e:	bd80      	pop	{r7, pc}
     950:	00006914 	.word	0x00006914
     954:	2000019c 	.word	0x2000019c
     958:	20000738 	.word	0x20000738
     95c:	000027fd 	.word	0x000027fd

00000960 <_ZN15ARINC_Interface12getRegStatusEv>:

	xprint(&asciiOctal[0]);
	
}

void ARINC_Interface::getRegStatus(void){
     960:	b590      	push	{r4, r7, lr}
     962:	b085      	sub	sp, #20
     964:	af00      	add	r7, sp, #0
     966:	6078      	str	r0, [r7, #4]
	uint8 priorityMatchLabels3[3];
	
	DebugArray[0] =HI3893.R_Register(0x90);     // Fetch Receiver 1 Status Reg
     968:	687b      	ldr	r3, [r7, #4]
     96a:	3340      	adds	r3, #64	; 0x40
     96c:	2190      	movs	r1, #144	; 0x90
     96e:	4618      	mov	r0, r3
     970:	4b40      	ldr	r3, [pc, #256]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     972:	4798      	blx	r3
     974:	4603      	mov	r3, r0
     976:	461a      	mov	r2, r3
     978:	687b      	ldr	r3, [r7, #4]
     97a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	DebugArray[1] =HI3893.R_Register(0x94);     // Fetch Receiver 1 Control Reg
     97e:	687b      	ldr	r3, [r7, #4]
     980:	3340      	adds	r3, #64	; 0x40
     982:	2194      	movs	r1, #148	; 0x94
     984:	4618      	mov	r0, r3
     986:	4b3b      	ldr	r3, [pc, #236]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     988:	4798      	blx	r3
     98a:	4603      	mov	r3, r0
     98c:	461a      	mov	r2, r3
     98e:	687b      	ldr	r3, [r7, #4]
     990:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	
	DebugArray[2] =HI3893.R_Register(0xB0);     // Fetch Receiver 2 Status Reg
     994:	687b      	ldr	r3, [r7, #4]
     996:	3340      	adds	r3, #64	; 0x40
     998:	21b0      	movs	r1, #176	; 0xb0
     99a:	4618      	mov	r0, r3
     99c:	4b35      	ldr	r3, [pc, #212]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     99e:	4798      	blx	r3
     9a0:	4603      	mov	r3, r0
     9a2:	461a      	mov	r2, r3
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	DebugArray[3] =HI3893.R_Register(0xB4);     // Fetch Receiver 2 Control Reg
     9aa:	687b      	ldr	r3, [r7, #4]
     9ac:	3340      	adds	r3, #64	; 0x40
     9ae:	21b4      	movs	r1, #180	; 0xb4
     9b0:	4618      	mov	r0, r3
     9b2:	4b30      	ldr	r3, [pc, #192]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     9b4:	4798      	blx	r3
     9b6:	4603      	mov	r3, r0
     9b8:	461a      	mov	r2, r3
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	
	DebugArray[4] = HI3893.R_Register(0x80);     // Fetch Transmit Status Register
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	3340      	adds	r3, #64	; 0x40
     9c4:	2180      	movs	r1, #128	; 0x80
     9c6:	4618      	mov	r0, r3
     9c8:	4b2a      	ldr	r3, [pc, #168]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     9ca:	4798      	blx	r3
     9cc:	4603      	mov	r3, r0
     9ce:	461a      	mov	r2, r3
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	DebugArray[5] = HI3893.R_Register(0x84);     // Fetch Transmit Control Register
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	3340      	adds	r3, #64	; 0x40
     9da:	2184      	movs	r1, #132	; 0x84
     9dc:	4618      	mov	r0, r3
     9de:	4b25      	ldr	r3, [pc, #148]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     9e0:	4798      	blx	r3
     9e2:	4603      	mov	r3, r0
     9e4:	461a      	mov	r2, r3
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
	DebugArray[6] = HI3893.R_Register(0xD0);     // Fetch Read Flag/ Interrupt Register
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	3340      	adds	r3, #64	; 0x40
     9f0:	21d0      	movs	r1, #208	; 0xd0
     9f2:	4618      	mov	r0, r3
     9f4:	4b1f      	ldr	r3, [pc, #124]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     9f6:	4798      	blx	r3
     9f8:	4603      	mov	r3, r0
     9fa:	461a      	mov	r2, r3
     9fc:	687b      	ldr	r3, [r7, #4]
     9fe:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	DebugArray[7] = HI3893.R_Register(0xD4);     // Fetch ACLK Divsion Register
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	3340      	adds	r3, #64	; 0x40
     a06:	21d4      	movs	r1, #212	; 0xd4
     a08:	4618      	mov	r0, r3
     a0a:	4b1a      	ldr	r3, [pc, #104]	; (a74 <_ZN15ARINC_Interface12getRegStatusEv+0x114>)
     a0c:	4798      	blx	r3
     a0e:	4603      	mov	r3, r0
     a10:	461a      	mov	r2, r3
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	
	HI3893.MultiByteRead(0x9C,3, priorityMatchLabels3);     // Fetch Priority Match Labels
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	f103 0040 	add.w	r0, r3, #64	; 0x40
     a1e:	f107 030c 	add.w	r3, r7, #12
     a22:	2203      	movs	r2, #3
     a24:	219c      	movs	r1, #156	; 0x9c
     a26:	4c14      	ldr	r4, [pc, #80]	; (a78 <_ZN15ARINC_Interface12getRegStatusEv+0x118>)
     a28:	47a0      	blx	r4
	DebugArray[8] = priorityMatchLabels3[2];         // Fetch Priority Match Label
     a2a:	7bba      	ldrb	r2, [r7, #14]
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	DebugArray[9] = priorityMatchLabels3[1];         // Fetch Priority Match Label
     a32:	7b7a      	ldrb	r2, [r7, #13]
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	DebugArray[10] = priorityMatchLabels3[0];        // Fetch Priority Match Label
     a3a:	7b3a      	ldrb	r2, [r7, #12]
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
	HI3893.MultiByteRead(0xBC,3, priorityMatchLabels3);     //  Fetch Priority Match Labels
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	f103 0040 	add.w	r0, r3, #64	; 0x40
     a48:	f107 030c 	add.w	r3, r7, #12
     a4c:	2203      	movs	r2, #3
     a4e:	21bc      	movs	r1, #188	; 0xbc
     a50:	4c09      	ldr	r4, [pc, #36]	; (a78 <_ZN15ARINC_Interface12getRegStatusEv+0x118>)
     a52:	47a0      	blx	r4
	DebugArray[11] = priorityMatchLabels3[2];        //  Fetch Priority Match Label
     a54:	7bba      	ldrb	r2, [r7, #14]
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	DebugArray[12] = priorityMatchLabels3[1];        //  Fetch Priority Match Label
     a5c:	7b7a      	ldrb	r2, [r7, #13]
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	DebugArray[13] = priorityMatchLabels3[0];        //  Fetch Priority Match Label
     a64:	7b3a      	ldrb	r2, [r7, #12]
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

}
     a6c:	bf00      	nop
     a6e:	3714      	adds	r7, #20
     a70:	46bd      	mov	sp, r7
     a72:	bd90      	pop	{r4, r7, pc}
     a74:	0000232d 	.word	0x0000232d
     a78:	00002061 	.word	0x00002061

00000a7c <_ZN15ARINC_Interface14debounceButtonEh>:
void  ARINC_Interface::debounceButton(uint8 button)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b084      	sub	sp, #16
     a80:	af00      	add	r7, sp, #0
     a82:	6078      	str	r0, [r7, #4]
     a84:	460b      	mov	r3, r1
     a86:	70fb      	strb	r3, [r7, #3]
	uint8 debounceCnt;
	
	debounceCnt=10;
     a88:	230a      	movs	r3, #10
     a8a:	73fb      	strb	r3, [r7, #15]
	while(debounceCnt){
     a8c:	7bfb      	ldrb	r3, [r7, #15]
     a8e:	2b00      	cmp	r3, #0
     a90:	d013      	beq.n	aba <_ZN15ARINC_Interface14debounceButtonEh+0x3e>
		delay_ms(10);            // delay 1ms
     a92:	200a      	movs	r0, #10
     a94:	4b0b      	ldr	r3, [pc, #44]	; (ac4 <_ZN15ARINC_Interface14debounceButtonEh+0x48>)
     a96:	4798      	blx	r3
		if(! (gpio_get_pin_level(button))){
     a98:	78fb      	ldrb	r3, [r7, #3]
     a9a:	4618      	mov	r0, r3
     a9c:	4b0a      	ldr	r3, [pc, #40]	; (ac8 <_ZN15ARINC_Interface14debounceButtonEh+0x4c>)
     a9e:	4798      	blx	r3
     aa0:	4603      	mov	r3, r0
     aa2:	f083 0301 	eor.w	r3, r3, #1
     aa6:	b2db      	uxtb	r3, r3
     aa8:	2b00      	cmp	r3, #0
     aaa:	d002      	beq.n	ab2 <_ZN15ARINC_Interface14debounceButtonEh+0x36>
			debounceCnt=10;
     aac:	230a      	movs	r3, #10
     aae:	73fb      	strb	r3, [r7, #15]
     ab0:	e7ec      	b.n	a8c <_ZN15ARINC_Interface14debounceButtonEh+0x10>
		}else{
			debounceCnt--;
     ab2:	7bfb      	ldrb	r3, [r7, #15]
     ab4:	3b01      	subs	r3, #1
     ab6:	73fb      	strb	r3, [r7, #15]
	while(debounceCnt){
     ab8:	e7e8      	b.n	a8c <_ZN15ARINC_Interface14debounceButtonEh+0x10>
		}
		
	}
}
     aba:	bf00      	nop
     abc:	3710      	adds	r7, #16
     abe:	46bd      	mov	sp, r7
     ac0:	bd80      	pop	{r7, pc}
     ac2:	bf00      	nop
     ac4:	00002fd1 	.word	0x00002fd1
     ac8:	000005a9 	.word	0x000005a9

00000acc <_ZN15ARINC_Interface15ConsoleCommandsEc>:
bool   ARINC_Interface::ConsoleCommands(char ch)
{
     acc:	b580      	push	{r7, lr}
     ace:	b084      	sub	sp, #16
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
     ad4:	460b      	mov	r3, r1
     ad6:	70fb      	strb	r3, [r7, #3]
	unsigned char TCRTemp, RCR1Temp, RCR2Temp;
	
	if(ch=='P' || ch=='p'|| ch=='R' || ch=='r' || ch=='S' || ch=='s' ||ch=='T' || ch=='t' || ch=='H' || ch=='h')
     ad8:	78fb      	ldrb	r3, [r7, #3]
     ada:	2b50      	cmp	r3, #80	; 0x50
     adc:	d01b      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     ade:	78fb      	ldrb	r3, [r7, #3]
     ae0:	2b70      	cmp	r3, #112	; 0x70
     ae2:	d018      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     ae4:	78fb      	ldrb	r3, [r7, #3]
     ae6:	2b52      	cmp	r3, #82	; 0x52
     ae8:	d015      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     aea:	78fb      	ldrb	r3, [r7, #3]
     aec:	2b72      	cmp	r3, #114	; 0x72
     aee:	d012      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     af0:	78fb      	ldrb	r3, [r7, #3]
     af2:	2b53      	cmp	r3, #83	; 0x53
     af4:	d00f      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     af6:	78fb      	ldrb	r3, [r7, #3]
     af8:	2b73      	cmp	r3, #115	; 0x73
     afa:	d00c      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     afc:	78fb      	ldrb	r3, [r7, #3]
     afe:	2b54      	cmp	r3, #84	; 0x54
     b00:	d009      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     b02:	78fb      	ldrb	r3, [r7, #3]
     b04:	2b74      	cmp	r3, #116	; 0x74
     b06:	d006      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     b08:	78fb      	ldrb	r3, [r7, #3]
     b0a:	2b48      	cmp	r3, #72	; 0x48
     b0c:	d003      	beq.n	b16 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x4a>
     b0e:	78fb      	ldrb	r3, [r7, #3]
     b10:	2b68      	cmp	r3, #104	; 0x68
     b12:	f040 80e1 	bne.w	cd8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x20c>
	{
		TCRTemp =  HI3893.R_Register(R_TCR);    // Read the TCR
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	3340      	adds	r3, #64	; 0x40
     b1a:	2184      	movs	r1, #132	; 0x84
     b1c:	4618      	mov	r0, r3
     b1e:	4b72      	ldr	r3, [pc, #456]	; (ce8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x21c>)
     b20:	4798      	blx	r3
     b22:	4603      	mov	r3, r0
     b24:	73fb      	strb	r3, [r7, #15]
		RCR1Temp = HI3893.R_Register(R_RCR1);   // Read the RCR1
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	3340      	adds	r3, #64	; 0x40
     b2a:	2194      	movs	r1, #148	; 0x94
     b2c:	4618      	mov	r0, r3
     b2e:	4b6e      	ldr	r3, [pc, #440]	; (ce8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x21c>)
     b30:	4798      	blx	r3
     b32:	4603      	mov	r3, r0
     b34:	73bb      	strb	r3, [r7, #14]
		RCR2Temp = HI3893.R_Register(R_RCR2);   // Read the RCR2
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	3340      	adds	r3, #64	; 0x40
     b3a:	21b4      	movs	r1, #180	; 0xb4
     b3c:	4618      	mov	r0, r3
     b3e:	4b6a      	ldr	r3, [pc, #424]	; (ce8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x21c>)
     b40:	4798      	blx	r3
     b42:	4603      	mov	r3, r0
     b44:	737b      	strb	r3, [r7, #13]
		
		if(ch=='P' || ch=='p')           // Toggle the ODD/EVEN parity bit in the TCR reg
     b46:	78fb      	ldrb	r3, [r7, #3]
     b48:	2b50      	cmp	r3, #80	; 0x50
     b4a:	d002      	beq.n	b52 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x86>
     b4c:	78fb      	ldrb	r3, [r7, #3]
     b4e:	2b70      	cmp	r3, #112	; 0x70
     b50:	d118      	bne.n	b84 <_ZN15ARINC_Interface15ConsoleCommandsEc+0xb8>
		{
			TCRTemp ^= 4;                 // Toggle the TX parity bit
     b52:	7bfb      	ldrb	r3, [r7, #15]
     b54:	f083 0304 	eor.w	r3, r3, #4
     b58:	73fb      	strb	r3, [r7, #15]
			if(TCRTemp & 4)
     b5a:	7bfb      	ldrb	r3, [r7, #15]
     b5c:	f003 0304 	and.w	r3, r3, #4
     b60:	2b00      	cmp	r3, #0
     b62:	d004      	beq.n	b6e <_ZN15ARINC_Interface15ConsoleCommandsEc+0xa2>
			xprint("TX Parity ON\n\r>");
     b64:	4961      	ldr	r1, [pc, #388]	; (cec <_ZN15ARINC_Interface15ConsoleCommandsEc+0x220>)
     b66:	6878      	ldr	r0, [r7, #4]
     b68:	4b61      	ldr	r3, [pc, #388]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     b6a:	4798      	blx	r3
     b6c:	e003      	b.n	b76 <_ZN15ARINC_Interface15ConsoleCommandsEc+0xaa>
			else
			xprint("TX Parity OFF\n\r>");
     b6e:	4961      	ldr	r1, [pc, #388]	; (cf4 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x228>)
     b70:	6878      	ldr	r0, [r7, #4]
     b72:	4b5f      	ldr	r3, [pc, #380]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     b74:	4798      	blx	r3
			HI3893.W_CommandValue(TCR, TCRTemp);
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	3340      	adds	r3, #64	; 0x40
     b7a:	7bfa      	ldrb	r2, [r7, #15]
     b7c:	2108      	movs	r1, #8
     b7e:	4618      	mov	r0, r3
     b80:	4b5d      	ldr	r3, [pc, #372]	; (cf8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x22c>)
     b82:	4798      	blx	r3
		}

		if(ch=='T' || ch=='t')          // Toggle the TFLIP bit in the TCR reg
     b84:	78fb      	ldrb	r3, [r7, #3]
     b86:	2b54      	cmp	r3, #84	; 0x54
     b88:	d002      	beq.n	b90 <_ZN15ARINC_Interface15ConsoleCommandsEc+0xc4>
     b8a:	78fb      	ldrb	r3, [r7, #3]
     b8c:	2b74      	cmp	r3, #116	; 0x74
     b8e:	d118      	bne.n	bc2 <_ZN15ARINC_Interface15ConsoleCommandsEc+0xf6>
		{
			TCRTemp ^= 0x40;             // Toggle the TFLIP bit
     b90:	7bfb      	ldrb	r3, [r7, #15]
     b92:	f083 0340 	eor.w	r3, r3, #64	; 0x40
     b96:	73fb      	strb	r3, [r7, #15]
			if(TCRTemp & 0x40)
     b98:	7bfb      	ldrb	r3, [r7, #15]
     b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
     b9e:	2b00      	cmp	r3, #0
     ba0:	d004      	beq.n	bac <_ZN15ARINC_Interface15ConsoleCommandsEc+0xe0>
			xprint("TFLIP Set\n\r>");
     ba2:	4956      	ldr	r1, [pc, #344]	; (cfc <_ZN15ARINC_Interface15ConsoleCommandsEc+0x230>)
     ba4:	6878      	ldr	r0, [r7, #4]
     ba6:	4b52      	ldr	r3, [pc, #328]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     ba8:	4798      	blx	r3
     baa:	e003      	b.n	bb4 <_ZN15ARINC_Interface15ConsoleCommandsEc+0xe8>
			else
			xprint("TFLIP Cleared\n\r>");
     bac:	4954      	ldr	r1, [pc, #336]	; (d00 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x234>)
     bae:	6878      	ldr	r0, [r7, #4]
     bb0:	4b4f      	ldr	r3, [pc, #316]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     bb2:	4798      	blx	r3
			HI3893.W_CommandValue(TCR, TCRTemp);
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	3340      	adds	r3, #64	; 0x40
     bb8:	7bfa      	ldrb	r2, [r7, #15]
     bba:	2108      	movs	r1, #8
     bbc:	4618      	mov	r0, r3
     bbe:	4b4e      	ldr	r3, [pc, #312]	; (cf8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x22c>)
     bc0:	4798      	blx	r3
		}
		
		if(ch=='R' || ch=='r')           // Toggle the RFLIP bit in the RCR1/RCR2 regs
     bc2:	78fb      	ldrb	r3, [r7, #3]
     bc4:	2b52      	cmp	r3, #82	; 0x52
     bc6:	d002      	beq.n	bce <_ZN15ARINC_Interface15ConsoleCommandsEc+0x102>
     bc8:	78fb      	ldrb	r3, [r7, #3]
     bca:	2b72      	cmp	r3, #114	; 0x72
     bcc:	d131      	bne.n	c32 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x166>
		{
			RCR1Temp ^= 0x80;             // Toggle the RFLIP bit
     bce:	7bbb      	ldrb	r3, [r7, #14]
     bd0:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
     bd4:	43db      	mvns	r3, r3
     bd6:	73bb      	strb	r3, [r7, #14]
			RCR2Temp ^= 0x80;             // Toggle the RFLIP bit
     bd8:	7b7b      	ldrb	r3, [r7, #13]
     bda:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
     bde:	43db      	mvns	r3, r3
     be0:	737b      	strb	r3, [r7, #13]
			if(RCR1Temp & 0x80)
     be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
     be6:	2b00      	cmp	r3, #0
     be8:	da04      	bge.n	bf4 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x128>
			xprint("REC-1 RFLIP Set\n\r>");
     bea:	4946      	ldr	r1, [pc, #280]	; (d04 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x238>)
     bec:	6878      	ldr	r0, [r7, #4]
     bee:	4b40      	ldr	r3, [pc, #256]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     bf0:	4798      	blx	r3
     bf2:	e003      	b.n	bfc <_ZN15ARINC_Interface15ConsoleCommandsEc+0x130>
			else
			xprint("REC-1 RFLIP Cleared\n\r>");
     bf4:	4944      	ldr	r1, [pc, #272]	; (d08 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x23c>)
     bf6:	6878      	ldr	r0, [r7, #4]
     bf8:	4b3d      	ldr	r3, [pc, #244]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     bfa:	4798      	blx	r3
			HI3893.W_CommandValue(REC1CR, RCR1Temp);
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	3340      	adds	r3, #64	; 0x40
     c00:	7bba      	ldrb	r2, [r7, #14]
     c02:	2110      	movs	r1, #16
     c04:	4618      	mov	r0, r3
     c06:	4b3c      	ldr	r3, [pc, #240]	; (cf8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x22c>)
     c08:	4798      	blx	r3
			if(RCR2Temp & 0x80)
     c0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
     c0e:	2b00      	cmp	r3, #0
     c10:	da04      	bge.n	c1c <_ZN15ARINC_Interface15ConsoleCommandsEc+0x150>
			xprint("REC-2 RFLIP Set\n\r>");
     c12:	493e      	ldr	r1, [pc, #248]	; (d0c <_ZN15ARINC_Interface15ConsoleCommandsEc+0x240>)
     c14:	6878      	ldr	r0, [r7, #4]
     c16:	4b36      	ldr	r3, [pc, #216]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     c18:	4798      	blx	r3
     c1a:	e003      	b.n	c24 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x158>
			else
			xprint("REC-2 RFLIP Cleared\n\r>");
     c1c:	493c      	ldr	r1, [pc, #240]	; (d10 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x244>)
     c1e:	6878      	ldr	r0, [r7, #4]
     c20:	4b33      	ldr	r3, [pc, #204]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     c22:	4798      	blx	r3
			HI3893.W_CommandValue(REC2CR, RCR2Temp);
     c24:	687b      	ldr	r3, [r7, #4]
     c26:	3340      	adds	r3, #64	; 0x40
     c28:	7b7a      	ldrb	r2, [r7, #13]
     c2a:	2124      	movs	r1, #36	; 0x24
     c2c:	4618      	mov	r0, r3
     c2e:	4b32      	ldr	r3, [pc, #200]	; (cf8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x22c>)
     c30:	4798      	blx	r3
		}
		
		if(ch=='S' || ch=='s')          // Toggle the SDON bit in the RCR1/RCR2 regs
     c32:	78fb      	ldrb	r3, [r7, #3]
     c34:	2b53      	cmp	r3, #83	; 0x53
     c36:	d002      	beq.n	c3e <_ZN15ARINC_Interface15ConsoleCommandsEc+0x172>
     c38:	78fb      	ldrb	r3, [r7, #3]
     c3a:	2b73      	cmp	r3, #115	; 0x73
     c3c:	d131      	bne.n	ca2 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x1d6>
		{
			RCR1Temp ^= 0x70;             // Toggle the SDON, SD9, SD10 bits
     c3e:	7bbb      	ldrb	r3, [r7, #14]
     c40:	f083 0370 	eor.w	r3, r3, #112	; 0x70
     c44:	73bb      	strb	r3, [r7, #14]
			RCR2Temp ^= 0x70;             // Toggle the SDON, SD9, SD10 bits
     c46:	7b7b      	ldrb	r3, [r7, #13]
     c48:	f083 0370 	eor.w	r3, r3, #112	; 0x70
     c4c:	737b      	strb	r3, [r7, #13]
			if(RCR1Temp & 0x10)
     c4e:	7bbb      	ldrb	r3, [r7, #14]
     c50:	f003 0310 	and.w	r3, r3, #16
     c54:	2b00      	cmp	r3, #0
     c56:	d004      	beq.n	c62 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x196>
			xprint("REC-1 SDON,SD9 and SD10 Set\n\r>");
     c58:	492e      	ldr	r1, [pc, #184]	; (d14 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x248>)
     c5a:	6878      	ldr	r0, [r7, #4]
     c5c:	4b24      	ldr	r3, [pc, #144]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     c5e:	4798      	blx	r3
     c60:	e003      	b.n	c6a <_ZN15ARINC_Interface15ConsoleCommandsEc+0x19e>
			else
			xprint("REC-1 SDON,SD9 and SD10 Cleared\n\r>");
     c62:	492d      	ldr	r1, [pc, #180]	; (d18 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x24c>)
     c64:	6878      	ldr	r0, [r7, #4]
     c66:	4b22      	ldr	r3, [pc, #136]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     c68:	4798      	blx	r3
			HI3893.W_CommandValue(REC1CR, RCR1Temp);
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	3340      	adds	r3, #64	; 0x40
     c6e:	7bba      	ldrb	r2, [r7, #14]
     c70:	2110      	movs	r1, #16
     c72:	4618      	mov	r0, r3
     c74:	4b20      	ldr	r3, [pc, #128]	; (cf8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x22c>)
     c76:	4798      	blx	r3
			if(RCR2Temp & 0x10)
     c78:	7b7b      	ldrb	r3, [r7, #13]
     c7a:	f003 0310 	and.w	r3, r3, #16
     c7e:	2b00      	cmp	r3, #0
     c80:	d004      	beq.n	c8c <_ZN15ARINC_Interface15ConsoleCommandsEc+0x1c0>
			xprint("REC-2 SDON,SD9 and SD10 Set\n\r>");
     c82:	4926      	ldr	r1, [pc, #152]	; (d1c <_ZN15ARINC_Interface15ConsoleCommandsEc+0x250>)
     c84:	6878      	ldr	r0, [r7, #4]
     c86:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     c88:	4798      	blx	r3
     c8a:	e003      	b.n	c94 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x1c8>
			else
			xprint("REC-2 SDON,SD9 and SD10 Cleared\n\r>");
     c8c:	4924      	ldr	r1, [pc, #144]	; (d20 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x254>)
     c8e:	6878      	ldr	r0, [r7, #4]
     c90:	4b17      	ldr	r3, [pc, #92]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     c92:	4798      	blx	r3
			HI3893.W_CommandValue(REC2CR, RCR2Temp);
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	3340      	adds	r3, #64	; 0x40
     c98:	7b7a      	ldrb	r2, [r7, #13]
     c9a:	2124      	movs	r1, #36	; 0x24
     c9c:	4618      	mov	r0, r3
     c9e:	4b16      	ldr	r3, [pc, #88]	; (cf8 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x22c>)
     ca0:	4798      	blx	r3
		}
		
		if(ch=='H' || ch=='h')            // Print out the help screen
     ca2:	78fb      	ldrb	r3, [r7, #3]
     ca4:	2b48      	cmp	r3, #72	; 0x48
     ca6:	d002      	beq.n	cae <_ZN15ARINC_Interface15ConsoleCommandsEc+0x1e2>
     ca8:	78fb      	ldrb	r3, [r7, #3]
     caa:	2b68      	cmp	r3, #104	; 0x68
     cac:	d116      	bne.n	cdc <_ZN15ARINC_Interface15ConsoleCommandsEc+0x210>
		{
			ConsoleCommandsHelp();
     cae:	6878      	ldr	r0, [r7, #4]
     cb0:	4b1c      	ldr	r3, [pc, #112]	; (d24 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x258>)
     cb2:	4798      	blx	r3
			xprint("\n\r\nPress Space Bar or SW-4 to resume");
     cb4:	491c      	ldr	r1, [pc, #112]	; (d28 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x25c>)
     cb6:	6878      	ldr	r0, [r7, #4]
     cb8:	4b0d      	ldr	r3, [pc, #52]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     cba:	4798      	blx	r3
			while(OLED_BUTTON3 && ' ' != ch){xgetchar(&ch);};        // start again if Button-4 pressed/spacebar
     cbc:	78fb      	ldrb	r3, [r7, #3]
     cbe:	2b20      	cmp	r3, #32
     cc0:	d005      	beq.n	cce <_ZN15ARINC_Interface15ConsoleCommandsEc+0x202>
     cc2:	1cfb      	adds	r3, r7, #3
     cc4:	4619      	mov	r1, r3
     cc6:	6878      	ldr	r0, [r7, #4]
     cc8:	4b18      	ldr	r3, [pc, #96]	; (d2c <_ZN15ARINC_Interface15ConsoleCommandsEc+0x260>)
     cca:	4798      	blx	r3
     ccc:	e7f6      	b.n	cbc <_ZN15ARINC_Interface15ConsoleCommandsEc+0x1f0>
			xprint("\n\r>");
     cce:	4918      	ldr	r1, [pc, #96]	; (d30 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x264>)
     cd0:	6878      	ldr	r0, [r7, #4]
     cd2:	4b07      	ldr	r3, [pc, #28]	; (cf0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x224>)
     cd4:	4798      	blx	r3
		if(ch=='H' || ch=='h')            // Print out the help screen
     cd6:	e001      	b.n	cdc <_ZN15ARINC_Interface15ConsoleCommandsEc+0x210>
		}
		

	} else
	{                                  // No command to process
		return false;
     cd8:	2300      	movs	r3, #0
     cda:	e001      	b.n	ce0 <_ZN15ARINC_Interface15ConsoleCommandsEc+0x214>
		if(ch=='H' || ch=='h')            // Print out the help screen
     cdc:	bf00      	nop
	}
	return true;
     cde:	2301      	movs	r3, #1
	
}
     ce0:	4618      	mov	r0, r3
     ce2:	3710      	adds	r7, #16
     ce4:	46bd      	mov	sp, r7
     ce6:	bd80      	pop	{r7, pc}
     ce8:	0000232d 	.word	0x0000232d
     cec:	00006e6c 	.word	0x00006e6c
     cf0:	000006e1 	.word	0x000006e1
     cf4:	00006e7c 	.word	0x00006e7c
     cf8:	000022b9 	.word	0x000022b9
     cfc:	00006e90 	.word	0x00006e90
     d00:	00006ea0 	.word	0x00006ea0
     d04:	00006eb4 	.word	0x00006eb4
     d08:	00006ec8 	.word	0x00006ec8
     d0c:	00006ee0 	.word	0x00006ee0
     d10:	00006ef4 	.word	0x00006ef4
     d14:	00006f0c 	.word	0x00006f0c
     d18:	00006f2c 	.word	0x00006f2c
     d1c:	00006f50 	.word	0x00006f50
     d20:	00006f70 	.word	0x00006f70
     d24:	000007c9 	.word	0x000007c9
     d28:	00006f94 	.word	0x00006f94
     d2c:	00000769 	.word	0x00000769
     d30:	00006b8c 	.word	0x00006b8c

00000d34 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh>:

void ARINC_Interface::PrintLabelsOnConsole(unsigned char *labelarray)
{
     d34:	b580      	push	{r7, lr}
     d36:	b084      	sub	sp, #16
     d38:	af00      	add	r7, sp, #0
     d3a:	6078      	str	r0, [r7, #4]
     d3c:	6039      	str	r1, [r7, #0]
	uint8 i;
	
	xprint("Labels  0 - 63:  ");
     d3e:	4919      	ldr	r1, [pc, #100]	; (da4 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x70>)
     d40:	6878      	ldr	r0, [r7, #4]
     d42:	4b19      	ldr	r3, [pc, #100]	; (da8 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x74>)
     d44:	4798      	blx	r3
	for(i=31; i != 0xFF;i--) {
     d46:	231f      	movs	r3, #31
     d48:	73fb      	strb	r3, [r7, #15]
     d4a:	7bfb      	ldrb	r3, [r7, #15]
     d4c:	2bff      	cmp	r3, #255	; 0xff
     d4e:	d024      	beq.n	d9a <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x66>
		//xprint("0x");
		PrintHexByte(labelarray[i]);          // Output the frame data
     d50:	7bfb      	ldrb	r3, [r7, #15]
     d52:	683a      	ldr	r2, [r7, #0]
     d54:	4413      	add	r3, r2
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	4619      	mov	r1, r3
     d5a:	6878      	ldr	r0, [r7, #4]
     d5c:	4b13      	ldr	r3, [pc, #76]	; (dac <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x78>)
     d5e:	4798      	blx	r3
		xprint(" ");
     d60:	4913      	ldr	r1, [pc, #76]	; (db0 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x7c>)
     d62:	6878      	ldr	r0, [r7, #4]
     d64:	4b10      	ldr	r3, [pc, #64]	; (da8 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x74>)
     d66:	4798      	blx	r3
		if(i==24)
     d68:	7bfb      	ldrb	r3, [r7, #15]
     d6a:	2b18      	cmp	r3, #24
     d6c:	d103      	bne.n	d76 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x42>
		xprint("\n\rLabels  64-127:  ");
     d6e:	4911      	ldr	r1, [pc, #68]	; (db4 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x80>)
     d70:	6878      	ldr	r0, [r7, #4]
     d72:	4b0d      	ldr	r3, [pc, #52]	; (da8 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x74>)
     d74:	4798      	blx	r3
		if(i==16)
     d76:	7bfb      	ldrb	r3, [r7, #15]
     d78:	2b10      	cmp	r3, #16
     d7a:	d103      	bne.n	d84 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x50>
		xprint("\n\rLabels 128-191:  ");
     d7c:	490e      	ldr	r1, [pc, #56]	; (db8 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x84>)
     d7e:	6878      	ldr	r0, [r7, #4]
     d80:	4b09      	ldr	r3, [pc, #36]	; (da8 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x74>)
     d82:	4798      	blx	r3
		if(i==8)
     d84:	7bfb      	ldrb	r3, [r7, #15]
     d86:	2b08      	cmp	r3, #8
     d88:	d103      	bne.n	d92 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x5e>
		xprint("\n\rLabels 192-255:  ");
     d8a:	490c      	ldr	r1, [pc, #48]	; (dbc <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x88>)
     d8c:	6878      	ldr	r0, [r7, #4]
     d8e:	4b06      	ldr	r3, [pc, #24]	; (da8 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x74>)
     d90:	4798      	blx	r3
	for(i=31; i != 0xFF;i--) {
     d92:	7bfb      	ldrb	r3, [r7, #15]
     d94:	3b01      	subs	r3, #1
     d96:	73fb      	strb	r3, [r7, #15]
     d98:	e7d7      	b.n	d4a <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x16>
	}
	
}
     d9a:	bf00      	nop
     d9c:	3710      	adds	r7, #16
     d9e:	46bd      	mov	sp, r7
     da0:	bd80      	pop	{r7, pc}
     da2:	bf00      	nop
     da4:	00006fbc 	.word	0x00006fbc
     da8:	000006e1 	.word	0x000006e1
     dac:	00000919 	.word	0x00000919
     db0:	00006fd0 	.word	0x00006fd0
     db4:	00006fd4 	.word	0x00006fd4
     db8:	00006fe8 	.word	0x00006fe8
     dbc:	00006ffc 	.word	0x00006ffc

00000dc0 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		xprint("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
     dc0:	b580      	push	{r7, lr}
     dc2:	b084      	sub	sp, #16
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	xprint("\n\r>TX    Data:");
     dca:	4914      	ldr	r1, [pc, #80]	; (e1c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
     dcc:	6878      	ldr	r0, [r7, #4]
     dce:	4b14      	ldr	r3, [pc, #80]	; (e20 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
     dd0:	4798      	blx	r3
	for(i=0; i< 3;i++) {
     dd2:	2300      	movs	r3, #0
     dd4:	73fb      	strb	r3, [r7, #15]
     dd6:	7bfb      	ldrb	r3, [r7, #15]
     dd8:	2b02      	cmp	r3, #2
     dda:	dc0b      	bgt.n	df4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
     ddc:	7bfb      	ldrb	r3, [r7, #15]
     dde:	683a      	ldr	r2, [r7, #0]
     de0:	4413      	add	r3, r2
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	4619      	mov	r1, r3
     de6:	6878      	ldr	r0, [r7, #4]
     de8:	4b0e      	ldr	r3, [pc, #56]	; (e24 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
     dea:	4798      	blx	r3
	for(i=0; i< 3;i++) {
     dec:	7bfb      	ldrb	r3, [r7, #15]
     dee:	3301      	adds	r3, #1
     df0:	73fb      	strb	r3, [r7, #15]
     df2:	e7f0      	b.n	dd6 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	xprint("Label:");
     df4:	490c      	ldr	r1, [pc, #48]	; (e28 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
     df6:	6878      	ldr	r0, [r7, #4]
     df8:	4b09      	ldr	r3, [pc, #36]	; (e20 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
     dfa:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
     dfc:	683b      	ldr	r3, [r7, #0]
     dfe:	3303      	adds	r3, #3
     e00:	781b      	ldrb	r3, [r3, #0]
     e02:	4619      	mov	r1, r3
     e04:	6878      	ldr	r0, [r7, #4]
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
     e08:	4798      	blx	r3
	
	//crlf();
	xprint(">");
     e0a:	4908      	ldr	r1, [pc, #32]	; (e2c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
     e0c:	6878      	ldr	r0, [r7, #4]
     e0e:	4b04      	ldr	r3, [pc, #16]	; (e20 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
     e10:	4798      	blx	r3
}
     e12:	bf00      	nop
     e14:	3710      	adds	r7, #16
     e16:	46bd      	mov	sp, r7
     e18:	bd80      	pop	{r7, pc}
     e1a:	bf00      	nop
     e1c:	00007024 	.word	0x00007024
     e20:	000006e1 	.word	0x000006e1
     e24:	00000919 	.word	0x00000919
     e28:	00007034 	.word	0x00007034
     e2c:	0000703c 	.word	0x0000703c

00000e30 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_>:

void ARINC_Interface::FetchAllMessagesAndDisplay(unsigned char *RXBuffer,unsigned char *RXBufferPL)
{
     e30:	b580      	push	{r7, lr}
     e32:	b084      	sub	sp, #16
     e34:	af00      	add	r7, sp, #0
     e36:	60f8      	str	r0, [r7, #12]
     e38:	60b9      	str	r1, [r7, #8]
     e3a:	607a      	str	r2, [r7, #4]
	//LED_CTL(LED_5,OFF);     // Turn off PL-1 LED
//	LED_CTL(LED_6,OFF);     // Turn off PL-2 LED
//	LED_CTL(LED_7,OFF);     // Turn off PL-3 LED
	
	// Recever -1
	cpu_irq_disable();
     e3c:	68f8      	ldr	r0, [r7, #12]
     e3e:	4b9e      	ldr	r3, [pc, #632]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     e40:	4798      	blx	r3
	Status_F = HI3893.R_Register(RXSTATUS_1);                       // Poll Receiver1 status register
     e42:	68fb      	ldr	r3, [r7, #12]
     e44:	3340      	adds	r3, #64	; 0x40
     e46:	2190      	movs	r1, #144	; 0x90
     e48:	4618      	mov	r0, r3
     e4a:	4b9c      	ldr	r3, [pc, #624]	; (10bc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x28c>)
     e4c:	4798      	blx	r3
     e4e:	4603      	mov	r3, r0
     e50:	461a      	mov	r2, r3
     e52:	4b9b      	ldr	r3, [pc, #620]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     e54:	701a      	strb	r2, [r3, #0]
	cpu_irq_enable();
     e56:	68f8      	ldr	r0, [r7, #12]
     e58:	4b9a      	ldr	r3, [pc, #616]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     e5a:	4798      	blx	r3

	if((Status_F & FFEMPTY) == 0)
     e5c:	4b98      	ldr	r3, [pc, #608]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	f003 0301 	and.w	r3, r3, #1
     e64:	2b00      	cmp	r3, #0
     e66:	d11e      	bne.n	ea6 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x76>
	{
		cpu_irq_disable();
     e68:	68f8      	ldr	r0, [r7, #12]
     e6a:	4b93      	ldr	r3, [pc, #588]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     e6c:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_1,RXBuffer );
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	3340      	adds	r3, #64	; 0x40
     e72:	68ba      	ldr	r2, [r7, #8]
     e74:	21a0      	movs	r1, #160	; 0xa0
     e76:	4618      	mov	r0, r3
     e78:	4b93      	ldr	r3, [pc, #588]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
     e7a:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
     e82:	3328      	adds	r3, #40	; 0x28
     e84:	009b      	lsls	r3, r3, #2
     e86:	68fa      	ldr	r2, [r7, #12]
     e88:	4413      	add	r3, r2
     e8a:	68ba      	ldr	r2, [r7, #8]
     e8c:	6812      	ldr	r2, [r2, #0]
     e8e:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
     e90:	68f8      	ldr	r0, [r7, #12]
     e92:	4b8c      	ldr	r3, [pc, #560]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     e94:	4798      	blx	r3
		printARINCData(REC1_HEADER,RXBuffer);
     e96:	68ba      	ldr	r2, [r7, #8]
     e98:	2101      	movs	r1, #1
     e9a:	68f8      	ldr	r0, [r7, #12]
     e9c:	4b8b      	ldr	r3, [pc, #556]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
     e9e:	4798      	blx	r3
		CheckMessageCountMax();
     ea0:	68f8      	ldr	r0, [r7, #12]
     ea2:	4b8b      	ldr	r3, [pc, #556]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
     ea4:	4798      	blx	r3
	}

	// Receiver1 Priority Labels
	if(Status_F & PL1)
     ea6:	4b86      	ldr	r3, [pc, #536]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	f003 0308 	and.w	r3, r3, #8
     eae:	2b00      	cmp	r3, #0
     eb0:	d01e      	beq.n	ef0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0xc0>
	{
		//LED_CTL(LED_5,ON);               // Turn on LED5 for PL1
		cpu_irq_disable();
     eb2:	68f8      	ldr	r0, [r7, #12]
     eb4:	4b80      	ldr	r3, [pc, #512]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     eb6:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_1L1,RXBufferPL );
     eb8:	68fb      	ldr	r3, [r7, #12]
     eba:	3340      	adds	r3, #64	; 0x40
     ebc:	687a      	ldr	r2, [r7, #4]
     ebe:	21a4      	movs	r1, #164	; 0xa4
     ec0:	4618      	mov	r0, r3
     ec2:	4b81      	ldr	r3, [pc, #516]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
     ec4:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     ec6:	68fb      	ldr	r3, [r7, #12]
     ec8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
     ecc:	3328      	adds	r3, #40	; 0x28
     ece:	009b      	lsls	r3, r3, #2
     ed0:	68fa      	ldr	r2, [r7, #12]
     ed2:	4413      	add	r3, r2
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	6812      	ldr	r2, [r2, #0]
     ed8:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
     eda:	68f8      	ldr	r0, [r7, #12]
     edc:	4b79      	ldr	r3, [pc, #484]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     ede:	4798      	blx	r3
		printARINCData(REC1_L1_HEADER,RXBufferPL);
     ee0:	687a      	ldr	r2, [r7, #4]
     ee2:	2102      	movs	r1, #2
     ee4:	68f8      	ldr	r0, [r7, #12]
     ee6:	4b79      	ldr	r3, [pc, #484]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
     ee8:	4798      	blx	r3
		CheckMessageCountMax();
     eea:	68f8      	ldr	r0, [r7, #12]
     eec:	4b78      	ldr	r3, [pc, #480]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
     eee:	4798      	blx	r3
	}

	// Receiver1 Priority Label 2
	if(Status_F & PL2)
     ef0:	4b73      	ldr	r3, [pc, #460]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     ef2:	781b      	ldrb	r3, [r3, #0]
     ef4:	f003 0310 	and.w	r3, r3, #16
     ef8:	2b00      	cmp	r3, #0
     efa:	d01e      	beq.n	f3a <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x10a>
	{
		//LED_CTL(LED_6,ON);               // Turn on LED6 for PL2
		cpu_irq_disable();
     efc:	68f8      	ldr	r0, [r7, #12]
     efe:	4b6e      	ldr	r3, [pc, #440]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     f00:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_1L2,RXBufferPL );
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	3340      	adds	r3, #64	; 0x40
     f06:	687a      	ldr	r2, [r7, #4]
     f08:	21a8      	movs	r1, #168	; 0xa8
     f0a:	4618      	mov	r0, r3
     f0c:	4b6e      	ldr	r3, [pc, #440]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
     f0e:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
     f16:	3328      	adds	r3, #40	; 0x28
     f18:	009b      	lsls	r3, r3, #2
     f1a:	68fa      	ldr	r2, [r7, #12]
     f1c:	4413      	add	r3, r2
     f1e:	687a      	ldr	r2, [r7, #4]
     f20:	6812      	ldr	r2, [r2, #0]
     f22:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
     f24:	68f8      	ldr	r0, [r7, #12]
     f26:	4b67      	ldr	r3, [pc, #412]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     f28:	4798      	blx	r3
		printARINCData(REC1_L2_HEADER,RXBufferPL);
     f2a:	687a      	ldr	r2, [r7, #4]
     f2c:	2103      	movs	r1, #3
     f2e:	68f8      	ldr	r0, [r7, #12]
     f30:	4b66      	ldr	r3, [pc, #408]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
     f32:	4798      	blx	r3
		CheckMessageCountMax();
     f34:	68f8      	ldr	r0, [r7, #12]
     f36:	4b66      	ldr	r3, [pc, #408]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
     f38:	4798      	blx	r3
	}
	// Receiver1 Priority Label 3
	if(Status_F & PL3)
     f3a:	4b61      	ldr	r3, [pc, #388]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	f003 0320 	and.w	r3, r3, #32
     f42:	2b00      	cmp	r3, #0
     f44:	d01e      	beq.n	f84 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x154>
	{
		//LED_CTL(LED_7,ON);               // Turn on LED7 for PL3
		cpu_irq_disable();
     f46:	68f8      	ldr	r0, [r7, #12]
     f48:	4b5b      	ldr	r3, [pc, #364]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     f4a:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_1L3,RXBufferPL );
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	3340      	adds	r3, #64	; 0x40
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	21ac      	movs	r1, #172	; 0xac
     f54:	4618      	mov	r0, r3
     f56:	4b5c      	ldr	r3, [pc, #368]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
     f58:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
     f60:	3328      	adds	r3, #40	; 0x28
     f62:	009b      	lsls	r3, r3, #2
     f64:	68fa      	ldr	r2, [r7, #12]
     f66:	4413      	add	r3, r2
     f68:	687a      	ldr	r2, [r7, #4]
     f6a:	6812      	ldr	r2, [r2, #0]
     f6c:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
     f6e:	68f8      	ldr	r0, [r7, #12]
     f70:	4b54      	ldr	r3, [pc, #336]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     f72:	4798      	blx	r3
		printARINCData(REC1_L3_HEADER,RXBufferPL);
     f74:	687a      	ldr	r2, [r7, #4]
     f76:	2104      	movs	r1, #4
     f78:	68f8      	ldr	r0, [r7, #12]
     f7a:	4b54      	ldr	r3, [pc, #336]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
     f7c:	4798      	blx	r3
		CheckMessageCountMax();
     f7e:	68f8      	ldr	r0, [r7, #12]
     f80:	4b53      	ldr	r3, [pc, #332]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
     f82:	4798      	blx	r3
	}
	
	// Recever -2
	cpu_irq_disable();
     f84:	68f8      	ldr	r0, [r7, #12]
     f86:	4b4c      	ldr	r3, [pc, #304]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     f88:	4798      	blx	r3
	Status_F = HI3893.R_Register(RXSTATUS_2);
     f8a:	68fb      	ldr	r3, [r7, #12]
     f8c:	3340      	adds	r3, #64	; 0x40
     f8e:	21b0      	movs	r1, #176	; 0xb0
     f90:	4618      	mov	r0, r3
     f92:	4b4a      	ldr	r3, [pc, #296]	; (10bc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x28c>)
     f94:	4798      	blx	r3
     f96:	4603      	mov	r3, r0
     f98:	461a      	mov	r2, r3
     f9a:	4b49      	ldr	r3, [pc, #292]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     f9c:	701a      	strb	r2, [r3, #0]
	cpu_irq_enable();
     f9e:	68f8      	ldr	r0, [r7, #12]
     fa0:	4b48      	ldr	r3, [pc, #288]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     fa2:	4798      	blx	r3
	if((Status_F & FFEMPTY) == 0)
     fa4:	4b46      	ldr	r3, [pc, #280]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	f003 0301 	and.w	r3, r3, #1
     fac:	2b00      	cmp	r3, #0
     fae:	d11e      	bne.n	fee <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x1be>
	{
		cpu_irq_disable();
     fb0:	68f8      	ldr	r0, [r7, #12]
     fb2:	4b41      	ldr	r3, [pc, #260]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     fb4:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_2,RXBuffer );
     fb6:	68fb      	ldr	r3, [r7, #12]
     fb8:	3340      	adds	r3, #64	; 0x40
     fba:	68ba      	ldr	r2, [r7, #8]
     fbc:	21c0      	movs	r1, #192	; 0xc0
     fbe:	4618      	mov	r0, r3
     fc0:	4b41      	ldr	r3, [pc, #260]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
     fc2:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
     fca:	3328      	adds	r3, #40	; 0x28
     fcc:	009b      	lsls	r3, r3, #2
     fce:	68fa      	ldr	r2, [r7, #12]
     fd0:	4413      	add	r3, r2
     fd2:	68ba      	ldr	r2, [r7, #8]
     fd4:	6812      	ldr	r2, [r2, #0]
     fd6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
     fd8:	68f8      	ldr	r0, [r7, #12]
     fda:	4b3a      	ldr	r3, [pc, #232]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
     fdc:	4798      	blx	r3
		printARINCData(REC2_HEADER,RXBuffer);
     fde:	68ba      	ldr	r2, [r7, #8]
     fe0:	2105      	movs	r1, #5
     fe2:	68f8      	ldr	r0, [r7, #12]
     fe4:	4b39      	ldr	r3, [pc, #228]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
     fe6:	4798      	blx	r3
		CheckMessageCountMax();
     fe8:	68f8      	ldr	r0, [r7, #12]
     fea:	4b39      	ldr	r3, [pc, #228]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
     fec:	4798      	blx	r3
	}

	// Receiver2 Priority Label 1
	if(Status_F & PL1)
     fee:	4b34      	ldr	r3, [pc, #208]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	f003 0308 	and.w	r3, r3, #8
     ff6:	2b00      	cmp	r3, #0
     ff8:	d01e      	beq.n	1038 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x208>
	{
		//LED_CTL(LED_5,ON);               // Turn on LED5 for PL1
		cpu_irq_disable();
     ffa:	68f8      	ldr	r0, [r7, #12]
     ffc:	4b2e      	ldr	r3, [pc, #184]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
     ffe:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_2L1,RXBufferPL );
    1000:	68fb      	ldr	r3, [r7, #12]
    1002:	3340      	adds	r3, #64	; 0x40
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	21c4      	movs	r1, #196	; 0xc4
    1008:	4618      	mov	r0, r3
    100a:	4b2f      	ldr	r3, [pc, #188]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
    100c:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
    1014:	3328      	adds	r3, #40	; 0x28
    1016:	009b      	lsls	r3, r3, #2
    1018:	68fa      	ldr	r2, [r7, #12]
    101a:	4413      	add	r3, r2
    101c:	687a      	ldr	r2, [r7, #4]
    101e:	6812      	ldr	r2, [r2, #0]
    1020:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
    1022:	68f8      	ldr	r0, [r7, #12]
    1024:	4b27      	ldr	r3, [pc, #156]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
    1026:	4798      	blx	r3
		printARINCData(REC2_L1_HEADER,RXBufferPL);
    1028:	687a      	ldr	r2, [r7, #4]
    102a:	2106      	movs	r1, #6
    102c:	68f8      	ldr	r0, [r7, #12]
    102e:	4b27      	ldr	r3, [pc, #156]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
    1030:	4798      	blx	r3
		CheckMessageCountMax();
    1032:	68f8      	ldr	r0, [r7, #12]
    1034:	4b26      	ldr	r3, [pc, #152]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
    1036:	4798      	blx	r3
	}
	// Receiver2 Priority Label 2
	if(Status_F & PL2)
    1038:	4b21      	ldr	r3, [pc, #132]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
    103a:	781b      	ldrb	r3, [r3, #0]
    103c:	f003 0310 	and.w	r3, r3, #16
    1040:	2b00      	cmp	r3, #0
    1042:	d01e      	beq.n	1082 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x252>
	{
		//LED_CTL(LED_6,ON);               // Turn on LED6 for PL2
		cpu_irq_disable();
    1044:	68f8      	ldr	r0, [r7, #12]
    1046:	4b1c      	ldr	r3, [pc, #112]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
    1048:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_2L2,RXBufferPL );
    104a:	68fb      	ldr	r3, [r7, #12]
    104c:	3340      	adds	r3, #64	; 0x40
    104e:	687a      	ldr	r2, [r7, #4]
    1050:	21c8      	movs	r1, #200	; 0xc8
    1052:	4618      	mov	r0, r3
    1054:	4b1c      	ldr	r3, [pc, #112]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
    1056:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
    1058:	68fb      	ldr	r3, [r7, #12]
    105a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
    105e:	3328      	adds	r3, #40	; 0x28
    1060:	009b      	lsls	r3, r3, #2
    1062:	68fa      	ldr	r2, [r7, #12]
    1064:	4413      	add	r3, r2
    1066:	687a      	ldr	r2, [r7, #4]
    1068:	6812      	ldr	r2, [r2, #0]
    106a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
    106c:	68f8      	ldr	r0, [r7, #12]
    106e:	4b15      	ldr	r3, [pc, #84]	; (10c4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x294>)
    1070:	4798      	blx	r3
		printARINCData(REC2_L2_HEADER,RXBufferPL);
    1072:	687a      	ldr	r2, [r7, #4]
    1074:	2107      	movs	r1, #7
    1076:	68f8      	ldr	r0, [r7, #12]
    1078:	4b14      	ldr	r3, [pc, #80]	; (10cc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x29c>)
    107a:	4798      	blx	r3
		CheckMessageCountMax();
    107c:	68f8      	ldr	r0, [r7, #12]
    107e:	4b14      	ldr	r3, [pc, #80]	; (10d0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a0>)
    1080:	4798      	blx	r3
	}
	// Receiver2 Priority Label 3
	if(Status_F & PL3)
    1082:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x290>)
    1084:	781b      	ldrb	r3, [r3, #0]
    1086:	f003 0320 	and.w	r3, r3, #32
    108a:	2b00      	cmp	r3, #0
    108c:	d02e      	beq.n	10ec <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2bc>
	{                                // Turn on LED7 for PL3
		//LED_CTL(LED_7,ON);
		cpu_irq_disable();
    108e:	68f8      	ldr	r0, [r7, #12]
    1090:	4b09      	ldr	r3, [pc, #36]	; (10b8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x288>)
    1092:	4798      	blx	r3
		HI3893.ArincRead(RXFIFO_2L3,RXBufferPL );
    1094:	68fb      	ldr	r3, [r7, #12]
    1096:	3340      	adds	r3, #64	; 0x40
    1098:	687a      	ldr	r2, [r7, #4]
    109a:	21cc      	movs	r1, #204	; 0xcc
    109c:	4618      	mov	r0, r3
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x298>)
    10a0:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
    10a2:	68fb      	ldr	r3, [r7, #12]
    10a4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
    10a8:	3328      	adds	r3, #40	; 0x28
    10aa:	009b      	lsls	r3, r3, #2
    10ac:	68fa      	ldr	r2, [r7, #12]
    10ae:	4413      	add	r3, r2
    10b0:	687a      	ldr	r2, [r7, #4]
    10b2:	6812      	ldr	r2, [r2, #0]
    10b4:	e00e      	b.n	10d4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2a4>
    10b6:	bf00      	nop
    10b8:	0000086d 	.word	0x0000086d
    10bc:	0000232d 	.word	0x0000232d
    10c0:	200007a4 	.word	0x200007a4
    10c4:	00000855 	.word	0x00000855
    10c8:	000020e5 	.word	0x000020e5
    10cc:	00001135 	.word	0x00001135
    10d0:	00001101 	.word	0x00001101
    10d4:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
    10d6:	68f8      	ldr	r0, [r7, #12]
    10d8:	4b06      	ldr	r3, [pc, #24]	; (10f4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2c4>)
    10da:	4798      	blx	r3
		printARINCData(REC2_L3_HEADER,RXBufferPL);
    10dc:	687a      	ldr	r2, [r7, #4]
    10de:	2108      	movs	r1, #8
    10e0:	68f8      	ldr	r0, [r7, #12]
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2c8>)
    10e4:	4798      	blx	r3
		CheckMessageCountMax();
    10e6:	68f8      	ldr	r0, [r7, #12]
    10e8:	4b04      	ldr	r3, [pc, #16]	; (10fc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2cc>)
    10ea:	4798      	blx	r3
	}
	
}
    10ec:	bf00      	nop
    10ee:	3710      	adds	r7, #16
    10f0:	46bd      	mov	sp, r7
    10f2:	bd80      	pop	{r7, pc}
    10f4:	00000855 	.word	0x00000855
    10f8:	00001135 	.word	0x00001135
    10fc:	00001101 	.word	0x00001101

00001100 <_ZN15ARINC_Interface20CheckMessageCountMaxEv>:
		default: break;
	}
}
*/
void ARINC_Interface::CheckMessageCountMax(void)
{
    1100:	b480      	push	{r7}
    1102:	b083      	sub	sp, #12
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
	MessageCount++;
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
    110e:	3301      	adds	r3, #1
    1110:	b2da      	uxtb	r2, r3
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	if(MessageCount==MESSAGECOUNTMAX)
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
    111e:	2b40      	cmp	r3, #64	; 0x40
    1120:	d103      	bne.n	112a <_ZN15ARINC_Interface20CheckMessageCountMaxEv+0x2a>
	MessageCount=0;
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	2200      	movs	r2, #0
    1126:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
    112a:	bf00      	nop
    112c:	370c      	adds	r7, #12
    112e:	46bd      	mov	sp, r7
    1130:	bc80      	pop	{r7}
    1132:	4770      	bx	lr

00001134 <_ZN15ARINC_Interface14printARINCDataEhPh>:

void ARINC_Interface::printARINCData(const uint8 channel, unsigned char *array) {
    1134:	b580      	push	{r7, lr}
    1136:	b086      	sub	sp, #24
    1138:	af00      	add	r7, sp, #0
    113a:	60f8      	str	r0, [r7, #12]
    113c:	460b      	mov	r3, r1
    113e:	607a      	str	r2, [r7, #4]
    1140:	72fb      	strb	r3, [r7, #11]
	unsigned char i;

	
	switch (channel)
    1142:	7afb      	ldrb	r3, [r7, #11]
    1144:	3b01      	subs	r3, #1
    1146:	2b07      	cmp	r3, #7
    1148:	f200 810a 	bhi.w	1360 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22c>
    114c:	a201      	add	r2, pc, #4	; (adr r2, 1154 <_ZN15ARINC_Interface14printARINCDataEhPh+0x20>)
    114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1152:	bf00      	nop
    1154:	00001175 	.word	0x00001175
    1158:	000011b7 	.word	0x000011b7
    115c:	000011f3 	.word	0x000011f3
    1160:	0000122f 	.word	0x0000122f
    1164:	0000126b 	.word	0x0000126b
    1168:	000012ad 	.word	0x000012ad
    116c:	000012e9 	.word	0x000012e9
    1170:	00001325 	.word	0x00001325
	{
		case REC1_HEADER:
		xprint("Rec-1 Data:");
    1174:	4981      	ldr	r1, [pc, #516]	; (137c <_ZN15ARINC_Interface14printARINCDataEhPh+0x248>)
    1176:	68f8      	ldr	r0, [r7, #12]
    1178:	4b81      	ldr	r3, [pc, #516]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    117a:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    117c:	2300      	movs	r3, #0
    117e:	75fb      	strb	r3, [r7, #23]
    1180:	7dfb      	ldrb	r3, [r7, #23]
    1182:	2b02      	cmp	r3, #2
    1184:	dc0b      	bgt.n	119e <_ZN15ARINC_Interface14printARINCDataEhPh+0x6a>
			PrintHexByte(array[i]);       // Output the data
    1186:	7dfb      	ldrb	r3, [r7, #23]
    1188:	687a      	ldr	r2, [r7, #4]
    118a:	4413      	add	r3, r2
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	4619      	mov	r1, r3
    1190:	68f8      	ldr	r0, [r7, #12]
    1192:	4b7c      	ldr	r3, [pc, #496]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    1194:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    1196:	7dfb      	ldrb	r3, [r7, #23]
    1198:	3301      	adds	r3, #1
    119a:	75fb      	strb	r3, [r7, #23]
    119c:	e7f0      	b.n	1180 <_ZN15ARINC_Interface14printARINCDataEhPh+0x4c>
		}
		xprint("Label:");
    119e:	497a      	ldr	r1, [pc, #488]	; (1388 <_ZN15ARINC_Interface14printARINCDataEhPh+0x254>)
    11a0:	68f8      	ldr	r0, [r7, #12]
    11a2:	4b77      	ldr	r3, [pc, #476]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    11a4:	4798      	blx	r3
		PrintHexByte(array[3]);          // Output the label data
    11a6:	687b      	ldr	r3, [r7, #4]
    11a8:	3303      	adds	r3, #3
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	4619      	mov	r1, r3
    11ae:	68f8      	ldr	r0, [r7, #12]
    11b0:	4b74      	ldr	r3, [pc, #464]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    11b2:	4798      	blx	r3
		break;
    11b4:	e0d5      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		case REC1_L1_HEADER:
		xprint("PL1-1 Data:");
    11b6:	4975      	ldr	r1, [pc, #468]	; (138c <_ZN15ARINC_Interface14printARINCDataEhPh+0x258>)
    11b8:	68f8      	ldr	r0, [r7, #12]
    11ba:	4b71      	ldr	r3, [pc, #452]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    11bc:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    11be:	2300      	movs	r3, #0
    11c0:	75fb      	strb	r3, [r7, #23]
    11c2:	7dfb      	ldrb	r3, [r7, #23]
    11c4:	2b02      	cmp	r3, #2
    11c6:	dc0b      	bgt.n	11e0 <_ZN15ARINC_Interface14printARINCDataEhPh+0xac>
			PrintHexByte(array[i]);       // Output the  data
    11c8:	7dfb      	ldrb	r3, [r7, #23]
    11ca:	687a      	ldr	r2, [r7, #4]
    11cc:	4413      	add	r3, r2
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	4619      	mov	r1, r3
    11d2:	68f8      	ldr	r0, [r7, #12]
    11d4:	4b6b      	ldr	r3, [pc, #428]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    11d6:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    11d8:	7dfb      	ldrb	r3, [r7, #23]
    11da:	3301      	adds	r3, #1
    11dc:	75fb      	strb	r3, [r7, #23]
    11de:	e7f0      	b.n	11c2 <_ZN15ARINC_Interface14printARINCDataEhPh+0x8e>
		}
		xprint("Match:");
    11e0:	496b      	ldr	r1, [pc, #428]	; (1390 <_ZN15ARINC_Interface14printARINCDataEhPh+0x25c>)
    11e2:	68f8      	ldr	r0, [r7, #12]
    11e4:	4b66      	ldr	r3, [pc, #408]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    11e6:	4798      	blx	r3
		PrintHexByte(PL11);              // Output the Match label
    11e8:	2120      	movs	r1, #32
    11ea:	68f8      	ldr	r0, [r7, #12]
    11ec:	4b65      	ldr	r3, [pc, #404]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    11ee:	4798      	blx	r3
		
		break;
    11f0:	e0b7      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		case REC1_L2_HEADER:
		xprint("PL1-2 Data:");
    11f2:	4968      	ldr	r1, [pc, #416]	; (1394 <_ZN15ARINC_Interface14printARINCDataEhPh+0x260>)
    11f4:	68f8      	ldr	r0, [r7, #12]
    11f6:	4b62      	ldr	r3, [pc, #392]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    11f8:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    11fa:	2300      	movs	r3, #0
    11fc:	75fb      	strb	r3, [r7, #23]
    11fe:	7dfb      	ldrb	r3, [r7, #23]
    1200:	2b02      	cmp	r3, #2
    1202:	dc0b      	bgt.n	121c <_ZN15ARINC_Interface14printARINCDataEhPh+0xe8>
			PrintHexByte(array[i]);       // Output the data
    1204:	7dfb      	ldrb	r3, [r7, #23]
    1206:	687a      	ldr	r2, [r7, #4]
    1208:	4413      	add	r3, r2
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	4619      	mov	r1, r3
    120e:	68f8      	ldr	r0, [r7, #12]
    1210:	4b5c      	ldr	r3, [pc, #368]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    1212:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    1214:	7dfb      	ldrb	r3, [r7, #23]
    1216:	3301      	adds	r3, #1
    1218:	75fb      	strb	r3, [r7, #23]
    121a:	e7f0      	b.n	11fe <_ZN15ARINC_Interface14printARINCDataEhPh+0xca>
		}
		xprint("Match:");
    121c:	495c      	ldr	r1, [pc, #368]	; (1390 <_ZN15ARINC_Interface14printARINCDataEhPh+0x25c>)
    121e:	68f8      	ldr	r0, [r7, #12]
    1220:	4b57      	ldr	r3, [pc, #348]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1222:	4798      	blx	r3
		PrintHexByte(PL12);              // Output the Match label
    1224:	2140      	movs	r1, #64	; 0x40
    1226:	68f8      	ldr	r0, [r7, #12]
    1228:	4b56      	ldr	r3, [pc, #344]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    122a:	4798      	blx	r3
		
		break;
    122c:	e099      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		case REC1_L3_HEADER:
		xprint("PL1-3 Data:");
    122e:	495a      	ldr	r1, [pc, #360]	; (1398 <_ZN15ARINC_Interface14printARINCDataEhPh+0x264>)
    1230:	68f8      	ldr	r0, [r7, #12]
    1232:	4b53      	ldr	r3, [pc, #332]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1234:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    1236:	2300      	movs	r3, #0
    1238:	75fb      	strb	r3, [r7, #23]
    123a:	7dfb      	ldrb	r3, [r7, #23]
    123c:	2b02      	cmp	r3, #2
    123e:	dc0b      	bgt.n	1258 <_ZN15ARINC_Interface14printARINCDataEhPh+0x124>
			PrintHexByte(array[i]);       // Output the data
    1240:	7dfb      	ldrb	r3, [r7, #23]
    1242:	687a      	ldr	r2, [r7, #4]
    1244:	4413      	add	r3, r2
    1246:	781b      	ldrb	r3, [r3, #0]
    1248:	4619      	mov	r1, r3
    124a:	68f8      	ldr	r0, [r7, #12]
    124c:	4b4d      	ldr	r3, [pc, #308]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    124e:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    1250:	7dfb      	ldrb	r3, [r7, #23]
    1252:	3301      	adds	r3, #1
    1254:	75fb      	strb	r3, [r7, #23]
    1256:	e7f0      	b.n	123a <_ZN15ARINC_Interface14printARINCDataEhPh+0x106>
		}
		xprint("Match:");
    1258:	494d      	ldr	r1, [pc, #308]	; (1390 <_ZN15ARINC_Interface14printARINCDataEhPh+0x25c>)
    125a:	68f8      	ldr	r0, [r7, #12]
    125c:	4b48      	ldr	r3, [pc, #288]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    125e:	4798      	blx	r3
		PrintHexByte(PL13);              // Output the Match label
    1260:	217f      	movs	r1, #127	; 0x7f
    1262:	68f8      	ldr	r0, [r7, #12]
    1264:	4b47      	ldr	r3, [pc, #284]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    1266:	4798      	blx	r3
		
		break;
    1268:	e07b      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		
		case REC2_HEADER:
		xprint("Rec-2 Data:");
    126a:	494c      	ldr	r1, [pc, #304]	; (139c <_ZN15ARINC_Interface14printARINCDataEhPh+0x268>)
    126c:	68f8      	ldr	r0, [r7, #12]
    126e:	4b44      	ldr	r3, [pc, #272]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1270:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    1272:	2300      	movs	r3, #0
    1274:	75fb      	strb	r3, [r7, #23]
    1276:	7dfb      	ldrb	r3, [r7, #23]
    1278:	2b02      	cmp	r3, #2
    127a:	dc0b      	bgt.n	1294 <_ZN15ARINC_Interface14printARINCDataEhPh+0x160>
			PrintHexByte(array[i]);        // Output the data
    127c:	7dfb      	ldrb	r3, [r7, #23]
    127e:	687a      	ldr	r2, [r7, #4]
    1280:	4413      	add	r3, r2
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	4619      	mov	r1, r3
    1286:	68f8      	ldr	r0, [r7, #12]
    1288:	4b3e      	ldr	r3, [pc, #248]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    128a:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    128c:	7dfb      	ldrb	r3, [r7, #23]
    128e:	3301      	adds	r3, #1
    1290:	75fb      	strb	r3, [r7, #23]
    1292:	e7f0      	b.n	1276 <_ZN15ARINC_Interface14printARINCDataEhPh+0x142>
		}
		xprint("Label:");
    1294:	493c      	ldr	r1, [pc, #240]	; (1388 <_ZN15ARINC_Interface14printARINCDataEhPh+0x254>)
    1296:	68f8      	ldr	r0, [r7, #12]
    1298:	4b39      	ldr	r3, [pc, #228]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    129a:	4798      	blx	r3
		PrintHexByte(array[3]);          // Output the Match label
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	3303      	adds	r3, #3
    12a0:	781b      	ldrb	r3, [r3, #0]
    12a2:	4619      	mov	r1, r3
    12a4:	68f8      	ldr	r0, [r7, #12]
    12a6:	4b37      	ldr	r3, [pc, #220]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    12a8:	4798      	blx	r3
		break;
    12aa:	e05a      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		case REC2_L1_HEADER:
		xprint("PL2-1 Data:");
    12ac:	493c      	ldr	r1, [pc, #240]	; (13a0 <_ZN15ARINC_Interface14printARINCDataEhPh+0x26c>)
    12ae:	68f8      	ldr	r0, [r7, #12]
    12b0:	4b33      	ldr	r3, [pc, #204]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    12b2:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    12b4:	2300      	movs	r3, #0
    12b6:	75fb      	strb	r3, [r7, #23]
    12b8:	7dfb      	ldrb	r3, [r7, #23]
    12ba:	2b02      	cmp	r3, #2
    12bc:	dc0b      	bgt.n	12d6 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1a2>
			PrintHexByte(array[i]);       // Output the  data
    12be:	7dfb      	ldrb	r3, [r7, #23]
    12c0:	687a      	ldr	r2, [r7, #4]
    12c2:	4413      	add	r3, r2
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	4619      	mov	r1, r3
    12c8:	68f8      	ldr	r0, [r7, #12]
    12ca:	4b2e      	ldr	r3, [pc, #184]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    12cc:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    12ce:	7dfb      	ldrb	r3, [r7, #23]
    12d0:	3301      	adds	r3, #1
    12d2:	75fb      	strb	r3, [r7, #23]
    12d4:	e7f0      	b.n	12b8 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>
		}
		xprint("Match:");
    12d6:	492e      	ldr	r1, [pc, #184]	; (1390 <_ZN15ARINC_Interface14printARINCDataEhPh+0x25c>)
    12d8:	68f8      	ldr	r0, [r7, #12]
    12da:	4b29      	ldr	r3, [pc, #164]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    12dc:	4798      	blx	r3
		PrintHexByte(PL21);              // Output the Match label
    12de:	21b0      	movs	r1, #176	; 0xb0
    12e0:	68f8      	ldr	r0, [r7, #12]
    12e2:	4b28      	ldr	r3, [pc, #160]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    12e4:	4798      	blx	r3
		
		break;
    12e6:	e03c      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		
		case REC2_L2_HEADER:
		xprint("PL2-2 Data:");
    12e8:	492e      	ldr	r1, [pc, #184]	; (13a4 <_ZN15ARINC_Interface14printARINCDataEhPh+0x270>)
    12ea:	68f8      	ldr	r0, [r7, #12]
    12ec:	4b24      	ldr	r3, [pc, #144]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    12ee:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    12f0:	2300      	movs	r3, #0
    12f2:	75fb      	strb	r3, [r7, #23]
    12f4:	7dfb      	ldrb	r3, [r7, #23]
    12f6:	2b02      	cmp	r3, #2
    12f8:	dc0b      	bgt.n	1312 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1de>
			PrintHexByte(array[i]);        // Output the  data
    12fa:	7dfb      	ldrb	r3, [r7, #23]
    12fc:	687a      	ldr	r2, [r7, #4]
    12fe:	4413      	add	r3, r2
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	4619      	mov	r1, r3
    1304:	68f8      	ldr	r0, [r7, #12]
    1306:	4b1f      	ldr	r3, [pc, #124]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    1308:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    130a:	7dfb      	ldrb	r3, [r7, #23]
    130c:	3301      	adds	r3, #1
    130e:	75fb      	strb	r3, [r7, #23]
    1310:	e7f0      	b.n	12f4 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1c0>
		}
		xprint("Match:");
    1312:	491f      	ldr	r1, [pc, #124]	; (1390 <_ZN15ARINC_Interface14printARINCDataEhPh+0x25c>)
    1314:	68f8      	ldr	r0, [r7, #12]
    1316:	4b1a      	ldr	r3, [pc, #104]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1318:	4798      	blx	r3
		PrintHexByte(PL22);              // Output the Match label
    131a:	21d0      	movs	r1, #208	; 0xd0
    131c:	68f8      	ldr	r0, [r7, #12]
    131e:	4b19      	ldr	r3, [pc, #100]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    1320:	4798      	blx	r3
		
		break;
    1322:	e01e      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		case REC2_L3_HEADER:
		xprint("PL2-3 Data:");
    1324:	4920      	ldr	r1, [pc, #128]	; (13a8 <_ZN15ARINC_Interface14printARINCDataEhPh+0x274>)
    1326:	68f8      	ldr	r0, [r7, #12]
    1328:	4b15      	ldr	r3, [pc, #84]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    132a:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    132c:	2300      	movs	r3, #0
    132e:	75fb      	strb	r3, [r7, #23]
    1330:	7dfb      	ldrb	r3, [r7, #23]
    1332:	2b02      	cmp	r3, #2
    1334:	dc0b      	bgt.n	134e <_ZN15ARINC_Interface14printARINCDataEhPh+0x21a>
			PrintHexByte(array[i]);        // Output the  data
    1336:	7dfb      	ldrb	r3, [r7, #23]
    1338:	687a      	ldr	r2, [r7, #4]
    133a:	4413      	add	r3, r2
    133c:	781b      	ldrb	r3, [r3, #0]
    133e:	4619      	mov	r1, r3
    1340:	68f8      	ldr	r0, [r7, #12]
    1342:	4b10      	ldr	r3, [pc, #64]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    1344:	4798      	blx	r3
		for(i=0; i< 3;i++) {
    1346:	7dfb      	ldrb	r3, [r7, #23]
    1348:	3301      	adds	r3, #1
    134a:	75fb      	strb	r3, [r7, #23]
    134c:	e7f0      	b.n	1330 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1fc>
		}
		xprint("Match:");
    134e:	4910      	ldr	r1, [pc, #64]	; (1390 <_ZN15ARINC_Interface14printARINCDataEhPh+0x25c>)
    1350:	68f8      	ldr	r0, [r7, #12]
    1352:	4b0b      	ldr	r3, [pc, #44]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1354:	4798      	blx	r3
		PrintHexByte(PL23);              // Output the Match label
    1356:	21ff      	movs	r1, #255	; 0xff
    1358:	68f8      	ldr	r0, [r7, #12]
    135a:	4b0a      	ldr	r3, [pc, #40]	; (1384 <_ZN15ARINC_Interface14printARINCDataEhPh+0x250>)
    135c:	4798      	blx	r3
		
		break;
    135e:	e000      	b.n	1362 <_ZN15ARINC_Interface14printARINCDataEhPh+0x22e>
		
		
		default:
		break;
    1360:	bf00      	nop
	};
	
	//crlf();
	xprint("\n\r");
    1362:	4912      	ldr	r1, [pc, #72]	; (13ac <_ZN15ARINC_Interface14printARINCDataEhPh+0x278>)
    1364:	68f8      	ldr	r0, [r7, #12]
    1366:	4b06      	ldr	r3, [pc, #24]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1368:	4798      	blx	r3
	xprint(">");
    136a:	4911      	ldr	r1, [pc, #68]	; (13b0 <_ZN15ARINC_Interface14printARINCDataEhPh+0x27c>)
    136c:	68f8      	ldr	r0, [r7, #12]
    136e:	4b04      	ldr	r3, [pc, #16]	; (1380 <_ZN15ARINC_Interface14printARINCDataEhPh+0x24c>)
    1370:	4798      	blx	r3
}
    1372:	bf00      	nop
    1374:	3718      	adds	r7, #24
    1376:	46bd      	mov	sp, r7
    1378:	bd80      	pop	{r7, pc}
    137a:	bf00      	nop
    137c:	00007040 	.word	0x00007040
    1380:	000006e1 	.word	0x000006e1
    1384:	00000919 	.word	0x00000919
    1388:	00007034 	.word	0x00007034
    138c:	0000704c 	.word	0x0000704c
    1390:	00007058 	.word	0x00007058
    1394:	00007060 	.word	0x00007060
    1398:	0000706c 	.word	0x0000706c
    139c:	00007078 	.word	0x00007078
    13a0:	00007084 	.word	0x00007084
    13a4:	00007090 	.word	0x00007090
    13a8:	0000709c 	.word	0x0000709c
    13ac:	000070a8 	.word	0x000070a8
    13b0:	0000703c 	.word	0x0000703c

000013b4 <_ZN15ARINC_Interface8HW_RESETEv>:

void ARINC_Interface::HW_RESET(void){
    13b4:	b580      	push	{r7, lr}
    13b6:	b082      	sub	sp, #8
    13b8:	af00      	add	r7, sp, #0
    13ba:	6078      	str	r0, [r7, #4]
		
	gpio_set_pin_level(MR,true);
    13bc:	2101      	movs	r1, #1
    13be:	203d      	movs	r0, #61	; 0x3d
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <_ZN15ARINC_Interface8HW_RESETEv+0x28>)
    13c2:	4798      	blx	r3
	delay_us(2);
    13c4:	2002      	movs	r0, #2
    13c6:	4b06      	ldr	r3, [pc, #24]	; (13e0 <_ZN15ARINC_Interface8HW_RESETEv+0x2c>)
    13c8:	4798      	blx	r3
	gpio_set_pin_level(MR,false);
    13ca:	2100      	movs	r1, #0
    13cc:	203d      	movs	r0, #61	; 0x3d
    13ce:	4b03      	ldr	r3, [pc, #12]	; (13dc <_ZN15ARINC_Interface8HW_RESETEv+0x28>)
    13d0:	4798      	blx	r3
}
    13d2:	bf00      	nop
    13d4:	3708      	adds	r7, #8
    13d6:	46bd      	mov	sp, r7
    13d8:	bd80      	pop	{r7, pc}
    13da:	bf00      	nop
    13dc:	00000541 	.word	0x00000541
    13e0:	00002fb1 	.word	0x00002fb1

000013e4 <_ZN15ARINC_Interface10blink_LED0Ev>:
void ARINC_Interface::blink_LED0(void){
    13e4:	b580      	push	{r7, lr}
    13e6:	b082      	sub	sp, #8
    13e8:	af00      	add	r7, sp, #0
    13ea:	6078      	str	r0, [r7, #4]
	gpio_toggle_pin_level(LED0);
    13ec:	2052      	movs	r0, #82	; 0x52
    13ee:	4b03      	ldr	r3, [pc, #12]	; (13fc <_ZN15ARINC_Interface10blink_LED0Ev+0x18>)
    13f0:	4798      	blx	r3
}
    13f2:	bf00      	nop
    13f4:	3708      	adds	r7, #8
    13f6:	46bd      	mov	sp, r7
    13f8:	bd80      	pop	{r7, pc}
    13fa:	bf00      	nop
    13fc:	00000579 	.word	0x00000579

00001400 <_ZN15ARINC_Interface13CustomMessageEh>:

void ARINC_Interface::CustomMessage(const uint8 SELFTEST){
    1400:	b590      	push	{r4, r7, lr}
    1402:	b08d      	sub	sp, #52	; 0x34
    1404:	af02      	add	r7, sp, #8
    1406:	6078      	str	r0, [r7, #4]
    1408:	460b      	mov	r3, r1
    140a:	70fb      	strb	r3, [r7, #3]
	static unsigned char TxPaused;
	static  unsigned char RXBuffer[g_RXBuffSize];       // Temp buffer to hold messages data
	static  unsigned char RXBufferPL[g_RXBuffSize];     // Temp buffer to hold PL messages data
	static  unsigned char LabelsAr1[32];                // All Rec1 256 labels
	static  unsigned char LabelsAr2[32];                // All Rec2 256 labels
	bool					done=false;
    140c:	2300      	movs	r3, #0
    140e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	union Buffer32 BigCounter;
	char ch,chL,chR;                    // console character
	uint8 ARINCLabel;
	uint8 i;
	
	TxPaused=0;                // start out not paused
    1412:	4b66      	ldr	r3, [pc, #408]	; (15ac <_ZN15ARINC_Interface13CustomMessageEh+0x1ac>)
    1414:	2200      	movs	r2, #0
    1416:	701a      	strb	r2, [r3, #0]
	BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
    1418:	2300      	movs	r3, #0
    141a:	613b      	str	r3, [r7, #16]
	MessageCount=0;
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	2200      	movs	r2, #0
    1420:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	ARINCLabel = 0x30;         // Write ARINC Label
    1424:	2330      	movs	r3, #48	; 0x30
    1426:	75fb      	strb	r3, [r7, #23]
	Arate=0;
    1428:	2300      	movs	r3, #0
    142a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	xprint("\n\rExplorer Mode\n\r");
    142e:	4960      	ldr	r1, [pc, #384]	; (15b0 <_ZN15ARINC_Interface13CustomMessageEh+0x1b0>)
    1430:	6878      	ldr	r0, [r7, #4]
    1432:	4b60      	ldr	r3, [pc, #384]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    1434:	4798      	blx	r3
	if(SELFTEST)
    1436:	78fb      	ldrb	r3, [r7, #3]
    1438:	2b00      	cmp	r3, #0
    143a:	d003      	beq.n	1444 <_ZN15ARINC_Interface13CustomMessageEh+0x44>
	xprint("\n\rSELF-TEST, Internal Digital Loop-back, No data is transmitted externally\n\r");
    143c:	495e      	ldr	r1, [pc, #376]	; (15b8 <_ZN15ARINC_Interface13CustomMessageEh+0x1b8>)
    143e:	6878      	ldr	r0, [r7, #4]
    1440:	4b5c      	ldr	r3, [pc, #368]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    1442:	4798      	blx	r3
	
	if(BITRATE0)
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    144a:	2b00      	cmp	r3, #0
    144c:	d007      	beq.n	145e <_ZN15ARINC_Interface13CustomMessageEh+0x5e>
	{
		Arate = 1;              // BITRATE0 open so set for slow speed
    144e:	2301      	movs	r3, #1
    1450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		xprint("\n\rSlow Speed");
    1454:	4959      	ldr	r1, [pc, #356]	; (15bc <_ZN15ARINC_Interface13CustomMessageEh+0x1bc>)
    1456:	6878      	ldr	r0, [r7, #4]
    1458:	4b56      	ldr	r3, [pc, #344]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    145a:	4798      	blx	r3
    145c:	e003      	b.n	1466 <_ZN15ARINC_Interface13CustomMessageEh+0x66>
	} else
	{
		xprint("\n\rFast Speed");
    145e:	4958      	ldr	r1, [pc, #352]	; (15c0 <_ZN15ARINC_Interface13CustomMessageEh+0x1c0>)
    1460:	6878      	ldr	r0, [r7, #4]
    1462:	4b54      	ldr	r3, [pc, #336]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    1464:	4798      	blx	r3
	}
	
	if(OPT1)
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    146c:	2b00      	cmp	r3, #0
    146e:	d009      	beq.n	1484 <_ZN15ARINC_Interface13CustomMessageEh+0x84>
	{
		Arate |= TRANSMIT_PARTY_ON << 2;   // enable the transmitter parity
    1470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    1474:	f043 0304 	orr.w	r3, r3, #4
    1478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Arate |= PARITYODD << 3;           // select ODD for now. Expect compiler dead warning if 0.
		xprint("\n\rTransmitter Parity Enabled");
    147c:	4951      	ldr	r1, [pc, #324]	; (15c4 <_ZN15ARINC_Interface13CustomMessageEh+0x1c4>)
    147e:	6878      	ldr	r0, [r7, #4]
    1480:	4b4c      	ldr	r3, [pc, #304]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    1482:	4798      	blx	r3
	}


	//Initilize the TCR and the ACLK Divisor and look for the expected value in the TCR status reg
	if(TSR_Default != HI3893.Init3593(ACLKDIV,  // ARINC clock divisor
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	f103 0040 	add.w	r0, r3, #64	; 0x40
    148a:	78fa      	ldrb	r2, [r7, #3]
    148c:	2301      	movs	r3, #1
    148e:	9301      	str	r3, [sp, #4]
    1490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    1494:	9300      	str	r3, [sp, #0]
    1496:	4613      	mov	r3, r2
    1498:	2201      	movs	r2, #1
    149a:	2104      	movs	r1, #4
    149c:	4c4a      	ldr	r4, [pc, #296]	; (15c8 <_ZN15ARINC_Interface13CustomMessageEh+0x1c8>)
    149e:	47a0      	blx	r4
    14a0:	4603      	mov	r3, r0
    14a2:	2b01      	cmp	r3, #1
    14a4:	bf14      	ite	ne
    14a6:	2301      	movne	r3, #1
    14a8:	2300      	moveq	r3, #0
    14aa:	b2db      	uxtb	r3, r3
    14ac:	2b00      	cmp	r3, #0
    14ae:	d004      	beq.n	14ba <_ZN15ARINC_Interface13CustomMessageEh+0xba>
	SELFTEST, // Selftest defined by Mode switches
	Arate,    // Arinc speed and if Parity is enabled by the switch
	TFLIP ))
	{
		//LED_CTL(LED_8,ON);              // turn on RED LED if failed
		xprint("\n\rHI-3593 failed to initilize\n\r");
    14b0:	4946      	ldr	r1, [pc, #280]	; (15cc <_ZN15ARINC_Interface13CustomMessageEh+0x1cc>)
    14b2:	6878      	ldr	r0, [r7, #4]
    14b4:	4b3f      	ldr	r3, [pc, #252]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    14b6:	4798      	blx	r3
		for(;;);
    14b8:	e7fe      	b.n	14b8 <_ZN15ARINC_Interface13CustomMessageEh+0xb8>
	}

	(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	3372      	adds	r3, #114	; 0x72
    14be:	2210      	movs	r2, #16
    14c0:	2100      	movs	r1, #0
    14c2:	4618      	mov	r0, r3
    14c4:	4b42      	ldr	r3, [pc, #264]	; (15d0 <_ZN15ARINC_Interface13CustomMessageEh+0x1d0>)
    14c6:	4798      	blx	r3
	
	// Setup the Labels
	HI3893.initReceiver1Labels();     // initial Rec1 labels
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	3340      	adds	r3, #64	; 0x40
    14cc:	4618      	mov	r0, r3
    14ce:	4b41      	ldr	r3, [pc, #260]	; (15d4 <_ZN15ARINC_Interface13CustomMessageEh+0x1d4>)
    14d0:	4798      	blx	r3
	HI3893.initReceiver2Labels();     // initial Rec2 labels
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	3340      	adds	r3, #64	; 0x40
    14d6:	4618      	mov	r0, r3
    14d8:	4b3f      	ldr	r3, [pc, #252]	; (15d8 <_ZN15ARINC_Interface13CustomMessageEh+0x1d8>)
    14da:	4798      	blx	r3
	HI3893.MultiByteRead(REC1MEMORY, 32, LabelsAr1); // read in all Rec-1 labels into the passed array
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	f103 0040 	add.w	r0, r3, #64	; 0x40
    14e2:	4b3e      	ldr	r3, [pc, #248]	; (15dc <_ZN15ARINC_Interface13CustomMessageEh+0x1dc>)
    14e4:	2220      	movs	r2, #32
    14e6:	2198      	movs	r1, #152	; 0x98
    14e8:	4c3d      	ldr	r4, [pc, #244]	; (15e0 <_ZN15ARINC_Interface13CustomMessageEh+0x1e0>)
    14ea:	47a0      	blx	r4
	HI3893.MultiByteRead(REC2MEMORY, 32, LabelsAr2); // read in all Rec-2 labels into the passed array
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	f103 0040 	add.w	r0, r3, #64	; 0x40
    14f2:	4b3c      	ldr	r3, [pc, #240]	; (15e4 <_ZN15ARINC_Interface13CustomMessageEh+0x1e4>)
    14f4:	2220      	movs	r2, #32
    14f6:	21b8      	movs	r1, #184	; 0xb8
    14f8:	4c39      	ldr	r4, [pc, #228]	; (15e0 <_ZN15ARINC_Interface13CustomMessageEh+0x1e0>)
    14fa:	47a0      	blx	r4

	Rec1Parity =0;
    14fc:	2300      	movs	r3, #0
    14fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Rec2Parity =0;
    1502:	2300      	movs	r3, #0
    1504:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(BITRATE1)
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
    150e:	2b00      	cmp	r3, #0
    1510:	d007      	beq.n	1522 <_ZN15ARINC_Interface13CustomMessageEh+0x122>
	{
		Rec1Parity =8;     // Receiver 1 parity enable
    1512:	2308      	movs	r3, #8
    1514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		xprint("\n\rReceiver-1 Parity is Enabled");
    1518:	4933      	ldr	r1, [pc, #204]	; (15e8 <_ZN15ARINC_Interface13CustomMessageEh+0x1e8>)
    151a:	6878      	ldr	r0, [r7, #4]
    151c:	4b25      	ldr	r3, [pc, #148]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    151e:	4798      	blx	r3
    1520:	e003      	b.n	152a <_ZN15ARINC_Interface13CustomMessageEh+0x12a>
		
	} else
	{
		xprint("\n\rReceiver-1 Parity is Disabled");
    1522:	4932      	ldr	r1, [pc, #200]	; (15ec <_ZN15ARINC_Interface13CustomMessageEh+0x1ec>)
    1524:	6878      	ldr	r0, [r7, #4]
    1526:	4b23      	ldr	r3, [pc, #140]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    1528:	4798      	blx	r3
	}
	if(BITRATE2)
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    1530:	2b00      	cmp	r3, #0
    1532:	d007      	beq.n	1544 <_ZN15ARINC_Interface13CustomMessageEh+0x144>
	{
		Rec2Parity =8;     // Receiver 2 parity enable
    1534:	2308      	movs	r3, #8
    1536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		xprint("\n\rReceiver-2 Parity is Enabled");
    153a:	492d      	ldr	r1, [pc, #180]	; (15f0 <_ZN15ARINC_Interface13CustomMessageEh+0x1f0>)
    153c:	6878      	ldr	r0, [r7, #4]
    153e:	4b1d      	ldr	r3, [pc, #116]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    1540:	4798      	blx	r3
    1542:	e003      	b.n	154c <_ZN15ARINC_Interface13CustomMessageEh+0x14c>
	} else
	{
		xprint("\n\rReceiver-2 Parity is Disabled");
    1544:	492b      	ldr	r1, [pc, #172]	; (15f4 <_ZN15ARINC_Interface13CustomMessageEh+0x1f4>)
    1546:	6878      	ldr	r0, [r7, #4]
    1548:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    154a:	4798      	blx	r3
	}
	
	
	Arate &= 1;           // mask off everything else except the speed bit before using it here
    154c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    1550:	f003 0301 	and.w	r3, r3, #1
    1554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(OPT2)      // enable labels if SW OTP2 is open
    1558:	687b      	ldr	r3, [r7, #4]
    155a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    155e:	2b00      	cmp	r3, #0
    1560:	d04e      	beq.n	1600 <_ZN15ARINC_Interface13CustomMessageEh+0x200>
	{
		HI3893.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1568:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    156c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    1570:	4313      	orrs	r3, r2
    1572:	b2db      	uxtb	r3, r3
    1574:	f063 0379 	orn	r3, r3, #121	; 0x79
    1578:	b2db      	uxtb	r3, r3
    157a:	461a      	mov	r2, r3
    157c:	2110      	movs	r1, #16
    157e:	4b1e      	ldr	r3, [pc, #120]	; (15f8 <_ZN15ARINC_Interface13CustomMessageEh+0x1f8>)
    1580:	4798      	blx	r3
		HI3893.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1588:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    158c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    1590:	4313      	orrs	r3, r2
    1592:	b2db      	uxtb	r3, r3
    1594:	f063 0379 	orn	r3, r3, #121	; 0x79
    1598:	b2db      	uxtb	r3, r3
    159a:	461a      	mov	r2, r3
    159c:	2124      	movs	r1, #36	; 0x24
    159e:	4b16      	ldr	r3, [pc, #88]	; (15f8 <_ZN15ARINC_Interface13CustomMessageEh+0x1f8>)
    15a0:	4798      	blx	r3
		xprint("\n\rAll labels are Enabled");
    15a2:	4916      	ldr	r1, [pc, #88]	; (15fc <_ZN15ARINC_Interface13CustomMessageEh+0x1fc>)
    15a4:	6878      	ldr	r0, [r7, #4]
    15a6:	4b03      	ldr	r3, [pc, #12]	; (15b4 <_ZN15ARINC_Interface13CustomMessageEh+0x1b4>)
    15a8:	4798      	blx	r3
    15aa:	e04d      	b.n	1648 <_ZN15ARINC_Interface13CustomMessageEh+0x248>
    15ac:	200007a6 	.word	0x200007a6
    15b0:	000070ac 	.word	0x000070ac
    15b4:	000006e1 	.word	0x000006e1
    15b8:	00006980 	.word	0x00006980
    15bc:	000069d0 	.word	0x000069d0
    15c0:	000069e0 	.word	0x000069e0
    15c4:	000069f0 	.word	0x000069f0
    15c8:	00001dad 	.word	0x00001dad
    15cc:	00006a10 	.word	0x00006a10
    15d0:	00006651 	.word	0x00006651
    15d4:	00001edd 	.word	0x00001edd
    15d8:	00001ff5 	.word	0x00001ff5
    15dc:	200007b0 	.word	0x200007b0
    15e0:	00002061 	.word	0x00002061
    15e4:	200007d0 	.word	0x200007d0
    15e8:	00006a30 	.word	0x00006a30
    15ec:	00006a50 	.word	0x00006a50
    15f0:	00006a70 	.word	0x00006a70
    15f4:	00006a90 	.word	0x00006a90
    15f8:	000022b9 	.word	0x000022b9
    15fc:	00006ab0 	.word	0x00006ab0
	} else
	{
		HI3893.W_CommandValue(REC1CR, RFLIP | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1606:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    160a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    160e:	4313      	orrs	r3, r2
    1610:	b2db      	uxtb	r3, r3
    1612:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1616:	b2db      	uxtb	r3, r3
    1618:	461a      	mov	r2, r3
    161a:	2110      	movs	r1, #16
    161c:	4b97      	ldr	r3, [pc, #604]	; (187c <_ZN15ARINC_Interface13CustomMessageEh+0x47c>)
    161e:	4798      	blx	r3
		HI3893.W_CommandValue(REC2CR, RFLIP | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1626:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    162a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    162e:	4313      	orrs	r3, r2
    1630:	b2db      	uxtb	r3, r3
    1632:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1636:	b2db      	uxtb	r3, r3
    1638:	461a      	mov	r2, r3
    163a:	2124      	movs	r1, #36	; 0x24
    163c:	4b8f      	ldr	r3, [pc, #572]	; (187c <_ZN15ARINC_Interface13CustomMessageEh+0x47c>)
    163e:	4798      	blx	r3
		xprint("\n\rAll labels are Disabled");
    1640:	498f      	ldr	r1, [pc, #572]	; (1880 <_ZN15ARINC_Interface13CustomMessageEh+0x480>)
    1642:	6878      	ldr	r0, [r7, #4]
    1644:	4b8f      	ldr	r3, [pc, #572]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1646:	4798      	blx	r3
	}
	
	// Priorty Labels
	TXBuffer[0] =  PL13;   // filter 3
    1648:	687b      	ldr	r3, [r7, #4]
    164a:	227f      	movs	r2, #127	; 0x7f
    164c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	TXBuffer[1] =  PL12;   // filter 2
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	2240      	movs	r2, #64	; 0x40
    1654:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	TXBuffer[2] =  PL11;   // filter 1
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	2220      	movs	r2, #32
    165c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	HI3893.TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	3372      	adds	r3, #114	; 0x72
    166a:	461a      	mov	r2, r3
    166c:	2118      	movs	r1, #24
    166e:	4b86      	ldr	r3, [pc, #536]	; (1888 <_ZN15ARINC_Interface13CustomMessageEh+0x488>)
    1670:	4798      	blx	r3
	
	TXBuffer[0] =  PL23;   // filter 3
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	22ff      	movs	r2, #255	; 0xff
    1676:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	TXBuffer[1] =  PL22;   // filter 2
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	22d0      	movs	r2, #208	; 0xd0
    167e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	TXBuffer[2] =  PL21;   // filter 1
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	22b0      	movs	r2, #176	; 0xb0
    1686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	HI3893.TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	3372      	adds	r3, #114	; 0x72
    1694:	461a      	mov	r2, r3
    1696:	212c      	movs	r1, #44	; 0x2c
    1698:	4b7b      	ldr	r3, [pc, #492]	; (1888 <_ZN15ARINC_Interface13CustomMessageEh+0x488>)
    169a:	4798      	blx	r3
	
	// Prepare the first message in the transmit buffer with [00-00-00-default label]
	TXBuffer[0] = BigCounter.PayLoad[1];
    169c:	7c7a      	ldrb	r2, [r7, #17]
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	TXBuffer[1] = BigCounter.PayLoad[2];
    16a4:	7cba      	ldrb	r2, [r7, #18]
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	TXBuffer[2] = BigCounter.PayLoad[3];
    16ac:	7cfa      	ldrb	r2, [r7, #19]
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	TXBuffer[3] = ARINCLabel;            // normal default label
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	7dfa      	ldrb	r2, [r7, #23]
    16b8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

	xprint("\n\r\n--- Button Commands ---");
    16bc:	4973      	ldr	r1, [pc, #460]	; (188c <_ZN15ARINC_Interface13CustomMessageEh+0x48c>)
    16be:	6878      	ldr	r0, [r7, #4]
    16c0:	4b70      	ldr	r3, [pc, #448]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    16c2:	4798      	blx	r3
	xprint("\n\r  spacebar to Display Status and Control Registers");
    16c4:	4972      	ldr	r1, [pc, #456]	; (1890 <_ZN15ARINC_Interface13CustomMessageEh+0x490>)
    16c6:	6878      	ldr	r0, [r7, #4]
    16c8:	4b6e      	ldr	r3, [pc, #440]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    16ca:	4798      	blx	r3
	xprint("\n\r  OLED-BUTTON2 transmit one message from transmit buffer");
    16cc:	4971      	ldr	r1, [pc, #452]	; (1894 <_ZN15ARINC_Interface13CustomMessageEh+0x494>)
    16ce:	6878      	ldr	r0, [r7, #4]
    16d0:	4b6c      	ldr	r3, [pc, #432]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    16d2:	4798      	blx	r3
	xprint("\n\r  L to Print Label Memory\n\r");
    16d4:	4970      	ldr	r1, [pc, #448]	; (1898 <_ZN15ARINC_Interface13CustomMessageEh+0x498>)
    16d6:	6878      	ldr	r0, [r7, #4]
    16d8:	4b6a      	ldr	r3, [pc, #424]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    16da:	4798      	blx	r3
	
	
	ConsoleCommandsHelp();
    16dc:	6878      	ldr	r0, [r7, #4]
    16de:	4b6f      	ldr	r3, [pc, #444]	; (189c <_ZN15ARINC_Interface13CustomMessageEh+0x49c>)
    16e0:	4798      	blx	r3
	xprint("\n\rPress ENTER to Transmit or use the (M) command to enter a custom message");
    16e2:	496f      	ldr	r1, [pc, #444]	; (18a0 <_ZN15ARINC_Interface13CustomMessageEh+0x4a0>)
    16e4:	6878      	ldr	r0, [r7, #4]
    16e6:	4b67      	ldr	r3, [pc, #412]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    16e8:	4798      	blx	r3
	xprint("\n\r>");
    16ea:	496e      	ldr	r1, [pc, #440]	; (18a4 <_ZN15ARINC_Interface13CustomMessageEh+0x4a4>)
    16ec:	6878      	ldr	r0, [r7, #4]
    16ee:	4b65      	ldr	r3, [pc, #404]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    16f0:	4798      	blx	r3
	ch=0xff;
    16f2:	23ff      	movs	r3, #255	; 0xff
    16f4:	73fb      	strb	r3, [r7, #15]
	for(;;) {     // TEST Transmit loop
		
		xgetchar(&ch);
    16f6:	f107 030f 	add.w	r3, r7, #15
    16fa:	4619      	mov	r1, r3
    16fc:	6878      	ldr	r0, [r7, #4]
    16fe:	4b6a      	ldr	r3, [pc, #424]	; (18a8 <_ZN15ARINC_Interface13CustomMessageEh+0x4a8>)
    1700:	4798      	blx	r3
		do {
			if(ch==' ')                         // print out the status registers if
    1702:	7bfb      	ldrb	r3, [r7, #15]
    1704:	2b20      	cmp	r3, #32
    1706:	d11a      	bne.n	173e <_ZN15ARINC_Interface13CustomMessageEh+0x33e>
			// SW3 pressed or spacebar from console
			{	
				ch=0xff;
    1708:	23ff      	movs	r3, #255	; 0xff
    170a:	73fb      	strb	r3, [r7, #15]
				xprint("\n\rHI-3593 Status, Control Registers\r\n");
    170c:	4967      	ldr	r1, [pc, #412]	; (18ac <_ZN15ARINC_Interface13CustomMessageEh+0x4ac>)
    170e:	6878      	ldr	r0, [r7, #4]
    1710:	4b5c      	ldr	r3, [pc, #368]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1712:	4798      	blx	r3
			
				printStatusRegisters();                  // print out the status registers
    1714:	6878      	ldr	r0, [r7, #4]
    1716:	4b66      	ldr	r3, [pc, #408]	; (18b0 <_ZN15ARINC_Interface13CustomMessageEh+0x4b0>)
    1718:	4798      	blx	r3
	
				xprint("Press SW4 or spacebar to continue");
    171a:	4966      	ldr	r1, [pc, #408]	; (18b4 <_ZN15ARINC_Interface13CustomMessageEh+0x4b4>)
    171c:	6878      	ldr	r0, [r7, #4]
    171e:	4b59      	ldr	r3, [pc, #356]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1720:	4798      	blx	r3
				while(' ' != ch){xgetchar(&ch);};      // start again if Button-4 pressed/spacebar
    1722:	7bfb      	ldrb	r3, [r7, #15]
    1724:	2b20      	cmp	r3, #32
    1726:	d006      	beq.n	1736 <_ZN15ARINC_Interface13CustomMessageEh+0x336>
    1728:	f107 030f 	add.w	r3, r7, #15
    172c:	4619      	mov	r1, r3
    172e:	6878      	ldr	r0, [r7, #4]
    1730:	4b5d      	ldr	r3, [pc, #372]	; (18a8 <_ZN15ARINC_Interface13CustomMessageEh+0x4a8>)
    1732:	4798      	blx	r3
    1734:	e7f5      	b.n	1722 <_ZN15ARINC_Interface13CustomMessageEh+0x322>
				xprint("\n\r>");
    1736:	495b      	ldr	r1, [pc, #364]	; (18a4 <_ZN15ARINC_Interface13CustomMessageEh+0x4a4>)
    1738:	6878      	ldr	r0, [r7, #4]
    173a:	4b52      	ldr	r3, [pc, #328]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    173c:	4798      	blx	r3
			}
			
			
			if(ch=='l'||ch=='L'){     // print out the Label memory for both receivers if SW3 pushed
    173e:	7bfb      	ldrb	r3, [r7, #15]
    1740:	2b6c      	cmp	r3, #108	; 0x6c
    1742:	d002      	beq.n	174a <_ZN15ARINC_Interface13CustomMessageEh+0x34a>
    1744:	7bfb      	ldrb	r3, [r7, #15]
    1746:	2b4c      	cmp	r3, #76	; 0x4c
    1748:	d127      	bne.n	179a <_ZN15ARINC_Interface13CustomMessageEh+0x39a>
				ch=0xff;
    174a:	23ff      	movs	r3, #255	; 0xff
    174c:	73fb      	strb	r3, [r7, #15]
				xprint("\n\rReceiver 1 Labels\n\r");
    174e:	495a      	ldr	r1, [pc, #360]	; (18b8 <_ZN15ARINC_Interface13CustomMessageEh+0x4b8>)
    1750:	6878      	ldr	r0, [r7, #4]
    1752:	4b4c      	ldr	r3, [pc, #304]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1754:	4798      	blx	r3
				PrintLabelsOnConsole(LabelsAr1);
    1756:	4959      	ldr	r1, [pc, #356]	; (18bc <_ZN15ARINC_Interface13CustomMessageEh+0x4bc>)
    1758:	6878      	ldr	r0, [r7, #4]
    175a:	4b59      	ldr	r3, [pc, #356]	; (18c0 <_ZN15ARINC_Interface13CustomMessageEh+0x4c0>)
    175c:	4798      	blx	r3
				crlf();
    175e:	6878      	ldr	r0, [r7, #4]
    1760:	4b58      	ldr	r3, [pc, #352]	; (18c4 <_ZN15ARINC_Interface13CustomMessageEh+0x4c4>)
    1762:	4798      	blx	r3
				
				xprint("\n\rReceiver 2 Labels\n\r");
    1764:	4958      	ldr	r1, [pc, #352]	; (18c8 <_ZN15ARINC_Interface13CustomMessageEh+0x4c8>)
    1766:	6878      	ldr	r0, [r7, #4]
    1768:	4b46      	ldr	r3, [pc, #280]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    176a:	4798      	blx	r3
				PrintLabelsOnConsole(LabelsAr2);
    176c:	4957      	ldr	r1, [pc, #348]	; (18cc <_ZN15ARINC_Interface13CustomMessageEh+0x4cc>)
    176e:	6878      	ldr	r0, [r7, #4]
    1770:	4b53      	ldr	r3, [pc, #332]	; (18c0 <_ZN15ARINC_Interface13CustomMessageEh+0x4c0>)
    1772:	4798      	blx	r3
				xprint("\n\rPress  OLED-BUTTON3 to Resume\n\r");
    1774:	4956      	ldr	r1, [pc, #344]	; (18d0 <_ZN15ARINC_Interface13CustomMessageEh+0x4d0>)
    1776:	6878      	ldr	r0, [r7, #4]
    1778:	4b42      	ldr	r3, [pc, #264]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    177a:	4798      	blx	r3
				
				while(gpio_get_pin_level(OLED_BUTTON3));                      // resume if Button-4 pressed or spacebar again
    177c:	2043      	movs	r0, #67	; 0x43
    177e:	4b55      	ldr	r3, [pc, #340]	; (18d4 <_ZN15ARINC_Interface13CustomMessageEh+0x4d4>)
    1780:	4798      	blx	r3
    1782:	4603      	mov	r3, r0
    1784:	2b00      	cmp	r3, #0
    1786:	d000      	beq.n	178a <_ZN15ARINC_Interface13CustomMessageEh+0x38a>
    1788:	e7f8      	b.n	177c <_ZN15ARINC_Interface13CustomMessageEh+0x37c>
				xprint("\n\rResumed...\n\r");
    178a:	4953      	ldr	r1, [pc, #332]	; (18d8 <_ZN15ARINC_Interface13CustomMessageEh+0x4d8>)
    178c:	6878      	ldr	r0, [r7, #4]
    178e:	4b3d      	ldr	r3, [pc, #244]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1790:	4798      	blx	r3
				xprint(">");
    1792:	4952      	ldr	r1, [pc, #328]	; (18dc <_ZN15ARINC_Interface13CustomMessageEh+0x4dc>)
    1794:	6878      	ldr	r0, [r7, #4]
    1796:	4b3b      	ldr	r3, [pc, #236]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1798:	4798      	blx	r3
			}
			
			cpu_irq_disable();
    179a:	6878      	ldr	r0, [r7, #4]
    179c:	4b50      	ldr	r3, [pc, #320]	; (18e0 <_ZN15ARINC_Interface13CustomMessageEh+0x4e0>)
    179e:	4798      	blx	r3
			Status_F =HI3893.R_Register(R_TSR);   // Transmit control register
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	3340      	adds	r3, #64	; 0x40
    17a4:	2180      	movs	r1, #128	; 0x80
    17a6:	4618      	mov	r0, r3
    17a8:	4b4e      	ldr	r3, [pc, #312]	; (18e4 <_ZN15ARINC_Interface13CustomMessageEh+0x4e4>)
    17aa:	4798      	blx	r3
    17ac:	4603      	mov	r3, r0
    17ae:	461a      	mov	r2, r3
    17b0:	4b4d      	ldr	r3, [pc, #308]	; (18e8 <_ZN15ARINC_Interface13CustomMessageEh+0x4e8>)
    17b2:	701a      	strb	r2, [r3, #0]
			cpu_irq_enable();
    17b4:	6878      	ldr	r0, [r7, #4]
    17b6:	4b4d      	ldr	r3, [pc, #308]	; (18ec <_ZN15ARINC_Interface13CustomMessageEh+0x4ec>)
    17b8:	4798      	blx	r3
		} while (Status_F & TFFULL);      // Wait until FIFO not full before loading next byte
    17ba:	4b4b      	ldr	r3, [pc, #300]	; (18e8 <_ZN15ARINC_Interface13CustomMessageEh+0x4e8>)
    17bc:	781b      	ldrb	r3, [r3, #0]
    17be:	f003 0304 	and.w	r3, r3, #4
    17c2:	2b00      	cmp	r3, #0
    17c4:	d000      	beq.n	17c8 <_ZN15ARINC_Interface13CustomMessageEh+0x3c8>
		do {
    17c6:	e79c      	b.n	1702 <_ZN15ARINC_Interface13CustomMessageEh+0x302>

		
		(void)ConsoleCommands(ch);             // check for on the fly console commands
    17c8:	7bfb      	ldrb	r3, [r7, #15]
    17ca:	4619      	mov	r1, r3
    17cc:	6878      	ldr	r0, [r7, #4]
    17ce:	4b48      	ldr	r3, [pc, #288]	; (18f0 <_ZN15ARINC_Interface13CustomMessageEh+0x4f0>)
    17d0:	4798      	blx	r3
		
		// check for a M command to transmit a custom message
		if(ch=='m' || ch=='M')
    17d2:	7bfb      	ldrb	r3, [r7, #15]
    17d4:	2b6d      	cmp	r3, #109	; 0x6d
    17d6:	d003      	beq.n	17e0 <_ZN15ARINC_Interface13CustomMessageEh+0x3e0>
    17d8:	7bfb      	ldrb	r3, [r7, #15]
    17da:	2b4d      	cmp	r3, #77	; 0x4d
    17dc:	f040 811b 	bne.w	1a16 <_ZN15ARINC_Interface13CustomMessageEh+0x616>
		{
			ch=0xff;
    17e0:	23ff      	movs	r3, #255	; 0xff
    17e2:	73fb      	strb	r3, [r7, #15]
			xprint("\n\r>Command M");
    17e4:	4943      	ldr	r1, [pc, #268]	; (18f4 <_ZN15ARINC_Interface13CustomMessageEh+0x4f4>)
    17e6:	6878      	ldr	r0, [r7, #4]
    17e8:	4b26      	ldr	r3, [pc, #152]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    17ea:	4798      	blx	r3
			xprint("\n\rEnter 3 bytes + LABEL to Transmit followed by ENTER\n\r");
    17ec:	4942      	ldr	r1, [pc, #264]	; (18f8 <_ZN15ARINC_Interface13CustomMessageEh+0x4f8>)
    17ee:	6878      	ldr	r0, [r7, #4]
    17f0:	4b24      	ldr	r3, [pc, #144]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    17f2:	4798      	blx	r3
			xprint("\n\rTo Transmit, enter 3 bytes followed by a Label byte followed by ENTER\n\r");
    17f4:	4941      	ldr	r1, [pc, #260]	; (18fc <_ZN15ARINC_Interface13CustomMessageEh+0x4fc>)
    17f6:	6878      	ldr	r0, [r7, #4]
    17f8:	4b22      	ldr	r3, [pc, #136]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    17fa:	4798      	blx	r3
			xprint("Format: Bits32-25, Bits24-17, Bits16-9, LABEL\n\r:");
    17fc:	4940      	ldr	r1, [pc, #256]	; (1900 <_ZN15ARINC_Interface13CustomMessageEh+0x500>)
    17fe:	6878      	ldr	r0, [r7, #4]
    1800:	4b20      	ldr	r3, [pc, #128]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    1802:	4798      	blx	r3
			xprint("Example: 01 23 45 67 ENTER\n\r:");
    1804:	493f      	ldr	r1, [pc, #252]	; (1904 <_ZN15ARINC_Interface13CustomMessageEh+0x504>)
    1806:	6878      	ldr	r0, [r7, #4]
    1808:	4b1e      	ldr	r3, [pc, #120]	; (1884 <_ZN15ARINC_Interface13CustomMessageEh+0x484>)
    180a:	4798      	blx	r3
			
			for(i = 0; i < 4; i++)   // Read in 8 characters from the console to make 4 bytes
    180c:	2300      	movs	r3, #0
    180e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1816:	2b03      	cmp	r3, #3
    1818:	f300 80d2 	bgt.w	19c0 <_ZN15ARINC_Interface13CustomMessageEh+0x5c0>
			{
				
				do{
					
					done=false;
    181c:	2300      	movs	r3, #0
    181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					xgetchar(&chL,true);
    1822:	f107 030e 	add.w	r3, r7, #14
    1826:	2201      	movs	r2, #1
    1828:	4619      	mov	r1, r3
    182a:	6878      	ldr	r0, [r7, #4]
    182c:	4b36      	ldr	r3, [pc, #216]	; (1908 <_ZN15ARINC_Interface13CustomMessageEh+0x508>)
    182e:	4798      	blx	r3
					//while(!usb0.rxDone);
					for (int i=0;i<sizeof(HexSymbols);i++)
    1830:	2300      	movs	r3, #0
    1832:	61fb      	str	r3, [r7, #28]
    1834:	69fb      	ldr	r3, [r7, #28]
    1836:	2b15      	cmp	r3, #21
    1838:	d80e      	bhi.n	1858 <_ZN15ARINC_Interface13CustomMessageEh+0x458>
					{
						if (HexSymbols[i]==chL)
    183a:	4a34      	ldr	r2, [pc, #208]	; (190c <_ZN15ARINC_Interface13CustomMessageEh+0x50c>)
    183c:	69fb      	ldr	r3, [r7, #28]
    183e:	4413      	add	r3, r2
    1840:	781a      	ldrb	r2, [r3, #0]
    1842:	7bbb      	ldrb	r3, [r7, #14]
    1844:	429a      	cmp	r2, r3
    1846:	d103      	bne.n	1850 <_ZN15ARINC_Interface13CustomMessageEh+0x450>
						{
							done=true;
    1848:	2301      	movs	r3, #1
    184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
    184e:	e003      	b.n	1858 <_ZN15ARINC_Interface13CustomMessageEh+0x458>
					for (int i=0;i<sizeof(HexSymbols);i++)
    1850:	69fb      	ldr	r3, [r7, #28]
    1852:	3301      	adds	r3, #1
    1854:	61fb      	str	r3, [r7, #28]
    1856:	e7ed      	b.n	1834 <_ZN15ARINC_Interface13CustomMessageEh+0x434>
						}
					}
		
			
				}while(( chL == LF) || (chL == CR) || (chL == SPACE) || (chL==EOF)|| (chL==TAB)||(!done));
    1858:	7bbb      	ldrb	r3, [r7, #14]
    185a:	2b0a      	cmp	r3, #10
    185c:	d0de      	beq.n	181c <_ZN15ARINC_Interface13CustomMessageEh+0x41c>
    185e:	7bbb      	ldrb	r3, [r7, #14]
    1860:	2b0d      	cmp	r3, #13
    1862:	d0db      	beq.n	181c <_ZN15ARINC_Interface13CustomMessageEh+0x41c>
    1864:	7bbb      	ldrb	r3, [r7, #14]
    1866:	2b20      	cmp	r3, #32
    1868:	d0d8      	beq.n	181c <_ZN15ARINC_Interface13CustomMessageEh+0x41c>
    186a:	7bbb      	ldrb	r3, [r7, #14]
    186c:	2b09      	cmp	r3, #9
    186e:	d0d5      	beq.n	181c <_ZN15ARINC_Interface13CustomMessageEh+0x41c>
    1870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    1874:	2b00      	cmp	r3, #0
    1876:	d14b      	bne.n	1910 <_ZN15ARINC_Interface13CustomMessageEh+0x510>
				do{
    1878:	e7d0      	b.n	181c <_ZN15ARINC_Interface13CustomMessageEh+0x41c>
    187a:	bf00      	nop
    187c:	000022b9 	.word	0x000022b9
    1880:	00006acc 	.word	0x00006acc
    1884:	000006e1 	.word	0x000006e1
    1888:	000021b9 	.word	0x000021b9
    188c:	000070c0 	.word	0x000070c0
    1890:	000070dc 	.word	0x000070dc
    1894:	00007114 	.word	0x00007114
    1898:	00007150 	.word	0x00007150
    189c:	000007c9 	.word	0x000007c9
    18a0:	00007170 	.word	0x00007170
    18a4:	00006b8c 	.word	0x00006b8c
    18a8:	00000769 	.word	0x00000769
    18ac:	00006ba4 	.word	0x00006ba4
    18b0:	00000885 	.word	0x00000885
    18b4:	000071bc 	.word	0x000071bc
    18b8:	00006c8c 	.word	0x00006c8c
    18bc:	200007b0 	.word	0x200007b0
    18c0:	00000d35 	.word	0x00000d35
    18c4:	000008fd 	.word	0x000008fd
    18c8:	00006ca4 	.word	0x00006ca4
    18cc:	200007d0 	.word	0x200007d0
    18d0:	000071e0 	.word	0x000071e0
    18d4:	000005a9 	.word	0x000005a9
    18d8:	00007204 	.word	0x00007204
    18dc:	0000703c 	.word	0x0000703c
    18e0:	0000086d 	.word	0x0000086d
    18e4:	0000232d 	.word	0x0000232d
    18e8:	200007a5 	.word	0x200007a5
    18ec:	00000855 	.word	0x00000855
    18f0:	00000acd 	.word	0x00000acd
    18f4:	00007214 	.word	0x00007214
    18f8:	00007224 	.word	0x00007224
    18fc:	0000725c 	.word	0x0000725c
    1900:	000072a8 	.word	0x000072a8
    1904:	000072dc 	.word	0x000072dc
    1908:	00000791 	.word	0x00000791
    190c:	20000024 	.word	0x20000024
				xputc(chL);
    1910:	7bbb      	ldrb	r3, [r7, #14]
    1912:	4619      	mov	r1, r3
    1914:	6878      	ldr	r0, [r7, #4]
    1916:	4b7b      	ldr	r3, [pc, #492]	; (1b04 <_ZN15ARINC_Interface13CustomMessageEh+0x704>)
    1918:	4798      	blx	r3
				
				do{
					
					done=false;
    191a:	2300      	movs	r3, #0
    191c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					xgetchar(&chR,true);
    1920:	f107 030d 	add.w	r3, r7, #13
    1924:	2201      	movs	r2, #1
    1926:	4619      	mov	r1, r3
    1928:	6878      	ldr	r0, [r7, #4]
    192a:	4b77      	ldr	r3, [pc, #476]	; (1b08 <_ZN15ARINC_Interface13CustomMessageEh+0x708>)
    192c:	4798      	blx	r3
				//	while(!usb0.rxDone);
					for (int i=0;i<sizeof(HexSymbols);i++)
    192e:	2300      	movs	r3, #0
    1930:	61bb      	str	r3, [r7, #24]
    1932:	69bb      	ldr	r3, [r7, #24]
    1934:	2b15      	cmp	r3, #21
    1936:	d80e      	bhi.n	1956 <_ZN15ARINC_Interface13CustomMessageEh+0x556>
					{
						if (HexSymbols[i]==chR)
    1938:	4a74      	ldr	r2, [pc, #464]	; (1b0c <_ZN15ARINC_Interface13CustomMessageEh+0x70c>)
    193a:	69bb      	ldr	r3, [r7, #24]
    193c:	4413      	add	r3, r2
    193e:	781a      	ldrb	r2, [r3, #0]
    1940:	7b7b      	ldrb	r3, [r7, #13]
    1942:	429a      	cmp	r2, r3
    1944:	d103      	bne.n	194e <_ZN15ARINC_Interface13CustomMessageEh+0x54e>
						{
							done=true;
    1946:	2301      	movs	r3, #1
    1948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
    194c:	e003      	b.n	1956 <_ZN15ARINC_Interface13CustomMessageEh+0x556>
					for (int i=0;i<sizeof(HexSymbols);i++)
    194e:	69bb      	ldr	r3, [r7, #24]
    1950:	3301      	adds	r3, #1
    1952:	61bb      	str	r3, [r7, #24]
    1954:	e7ed      	b.n	1932 <_ZN15ARINC_Interface13CustomMessageEh+0x532>
						}
					}
					
				}while(( chR == LF) || (chR== CR) || (chR == SPACE) || (chR==EOF)|| (chL==TAB)||(!done));
    1956:	7b7b      	ldrb	r3, [r7, #13]
    1958:	2b0a      	cmp	r3, #10
    195a:	d0de      	beq.n	191a <_ZN15ARINC_Interface13CustomMessageEh+0x51a>
    195c:	7b7b      	ldrb	r3, [r7, #13]
    195e:	2b0d      	cmp	r3, #13
    1960:	d0db      	beq.n	191a <_ZN15ARINC_Interface13CustomMessageEh+0x51a>
    1962:	7b7b      	ldrb	r3, [r7, #13]
    1964:	2b20      	cmp	r3, #32
    1966:	d0d8      	beq.n	191a <_ZN15ARINC_Interface13CustomMessageEh+0x51a>
    1968:	7bbb      	ldrb	r3, [r7, #14]
    196a:	2b09      	cmp	r3, #9
    196c:	d0d5      	beq.n	191a <_ZN15ARINC_Interface13CustomMessageEh+0x51a>
    196e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    1972:	2b00      	cmp	r3, #0
    1974:	d100      	bne.n	1978 <_ZN15ARINC_Interface13CustomMessageEh+0x578>
				do{
    1976:	e7d0      	b.n	191a <_ZN15ARINC_Interface13CustomMessageEh+0x51a>
				
				xputc(chR);
    1978:	7b7b      	ldrb	r3, [r7, #13]
    197a:	4619      	mov	r1, r3
    197c:	6878      	ldr	r0, [r7, #4]
    197e:	4b61      	ldr	r3, [pc, #388]	; (1b04 <_ZN15ARINC_Interface13CustomMessageEh+0x704>)
    1980:	4798      	blx	r3
				ch=converter.atohex2(chL,chR);
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
    1988:	7bb9      	ldrb	r1, [r7, #14]
    198a:	7b7a      	ldrb	r2, [r7, #13]
    198c:	4618      	mov	r0, r3
    198e:	4b60      	ldr	r3, [pc, #384]	; (1b10 <_ZN15ARINC_Interface13CustomMessageEh+0x710>)
    1990:	4798      	blx	r3
    1992:	4603      	mov	r3, r0
    1994:	73fb      	strb	r3, [r7, #15]
				TXBuffer[i] = ch;
    1996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    199a:	7bf9      	ldrb	r1, [r7, #15]
    199c:	687a      	ldr	r2, [r7, #4]
    199e:	4413      	add	r3, r2
    19a0:	460a      	mov	r2, r1
    19a2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				space();
    19a6:	6878      	ldr	r0, [r7, #4]
    19a8:	4b5a      	ldr	r3, [pc, #360]	; (1b14 <_ZN15ARINC_Interface13CustomMessageEh+0x714>)
    19aa:	4798      	blx	r3
				chL=0xff;
    19ac:	23ff      	movs	r3, #255	; 0xff
    19ae:	73bb      	strb	r3, [r7, #14]
				chR=0xff;
    19b0:	23ff      	movs	r3, #255	; 0xff
    19b2:	737b      	strb	r3, [r7, #13]
			for(i = 0; i < 4; i++)   // Read in 8 characters from the console to make 4 bytes
    19b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    19b8:	3301      	adds	r3, #1
    19ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    19be:	e728      	b.n	1812 <_ZN15ARINC_Interface13CustomMessageEh+0x412>
				
			}
			xprint(" Press RETURN");
    19c0:	4955      	ldr	r1, [pc, #340]	; (1b18 <_ZN15ARINC_Interface13CustomMessageEh+0x718>)
    19c2:	6878      	ldr	r0, [r7, #4]
    19c4:	4b55      	ldr	r3, [pc, #340]	; (1b1c <_ZN15ARINC_Interface13CustomMessageEh+0x71c>)
    19c6:	4798      	blx	r3
			do{
				xgetchar(&chL);
    19c8:	f107 030e 	add.w	r3, r7, #14
    19cc:	4619      	mov	r1, r3
    19ce:	6878      	ldr	r0, [r7, #4]
    19d0:	4b53      	ldr	r3, [pc, #332]	; (1b20 <_ZN15ARINC_Interface13CustomMessageEh+0x720>)
    19d2:	4798      	blx	r3
		
			}while(chL!=CR);
    19d4:	7bbb      	ldrb	r3, [r7, #14]
    19d6:	2b0d      	cmp	r3, #13
    19d8:	d000      	beq.n	19dc <_ZN15ARINC_Interface13CustomMessageEh+0x5dc>
			do{
    19da:	e7f5      	b.n	19c8 <_ZN15ARINC_Interface13CustomMessageEh+0x5c8>
			xprint(" Transmitted...\n\r\n");
    19dc:	4951      	ldr	r1, [pc, #324]	; (1b24 <_ZN15ARINC_Interface13CustomMessageEh+0x724>)
    19de:	6878      	ldr	r0, [r7, #4]
    19e0:	4b4e      	ldr	r3, [pc, #312]	; (1b1c <_ZN15ARINC_Interface13CustomMessageEh+0x71c>)
    19e2:	4798      	blx	r3
			cpu_irq_disable();
    19e4:	6878      	ldr	r0, [r7, #4]
    19e6:	4b50      	ldr	r3, [pc, #320]	; (1b28 <_ZN15ARINC_Interface13CustomMessageEh+0x728>)
    19e8:	4798      	blx	r3
			HI3893.TransmitCommandAndData(TXFIFO,TXBuffer);
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	f103 0040 	add.w	r0, r3, #64	; 0x40
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	3372      	adds	r3, #114	; 0x72
    19f4:	461a      	mov	r2, r3
    19f6:	210c      	movs	r1, #12
    19f8:	4b4c      	ldr	r3, [pc, #304]	; (1b2c <_ZN15ARINC_Interface13CustomMessageEh+0x72c>)
    19fa:	4798      	blx	r3
			cpu_irq_enable();
    19fc:	6878      	ldr	r0, [r7, #4]
    19fe:	4b4c      	ldr	r3, [pc, #304]	; (1b30 <_ZN15ARINC_Interface13CustomMessageEh+0x730>)
    1a00:	4798      	blx	r3
			xprint(">");
    1a02:	494c      	ldr	r1, [pc, #304]	; (1b34 <_ZN15ARINC_Interface13CustomMessageEh+0x734>)
    1a04:	6878      	ldr	r0, [r7, #4]
    1a06:	4b45      	ldr	r3, [pc, #276]	; (1b1c <_ZN15ARINC_Interface13CustomMessageEh+0x71c>)
    1a08:	4798      	blx	r3
			printARINCTXData(TXBuffer);                     // print the TX data written to the TXFIFO
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	3372      	adds	r3, #114	; 0x72
    1a0e:	4619      	mov	r1, r3
    1a10:	6878      	ldr	r0, [r7, #4]
    1a12:	4b49      	ldr	r3, [pc, #292]	; (1b38 <_ZN15ARINC_Interface13CustomMessageEh+0x738>)
    1a14:	4798      	blx	r3
		//	PORTT= ~TXBuffer[3];                            // show the transmitted upper nibble of the LSB

		} // M command
		
		// if a Enter was pressed just transmit the last message in the buffer
		if(ch==CR || !gpio_get_pin_level(OLED_BUTTON2) )
    1a16:	7bfb      	ldrb	r3, [r7, #15]
    1a18:	2b0d      	cmp	r3, #13
    1a1a:	d008      	beq.n	1a2e <_ZN15ARINC_Interface13CustomMessageEh+0x62e>
    1a1c:	2042      	movs	r0, #66	; 0x42
    1a1e:	4b47      	ldr	r3, [pc, #284]	; (1b3c <_ZN15ARINC_Interface13CustomMessageEh+0x73c>)
    1a20:	4798      	blx	r3
    1a22:	4603      	mov	r3, r0
    1a24:	f083 0301 	eor.w	r3, r3, #1
    1a28:	b2db      	uxtb	r3, r3
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d001      	beq.n	1a32 <_ZN15ARINC_Interface13CustomMessageEh+0x632>
    1a2e:	2301      	movs	r3, #1
    1a30:	e000      	b.n	1a34 <_ZN15ARINC_Interface13CustomMessageEh+0x634>
    1a32:	2300      	movs	r3, #0
    1a34:	2b00      	cmp	r3, #0
    1a36:	d02a      	beq.n	1a8e <_ZN15ARINC_Interface13CustomMessageEh+0x68e>
		{
				ch=0xff;
    1a38:	23ff      	movs	r3, #255	; 0xff
    1a3a:	73fb      	strb	r3, [r7, #15]
			cpu_irq_disable();
    1a3c:	6878      	ldr	r0, [r7, #4]
    1a3e:	4b3a      	ldr	r3, [pc, #232]	; (1b28 <_ZN15ARINC_Interface13CustomMessageEh+0x728>)
    1a40:	4798      	blx	r3
			HI3893.TransmitCommandAndData(TXFIFO,TXBuffer);
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	3372      	adds	r3, #114	; 0x72
    1a4c:	461a      	mov	r2, r3
    1a4e:	210c      	movs	r1, #12
    1a50:	4b36      	ldr	r3, [pc, #216]	; (1b2c <_ZN15ARINC_Interface13CustomMessageEh+0x72c>)
    1a52:	4798      	blx	r3
			cpu_irq_enable();
    1a54:	6878      	ldr	r0, [r7, #4]
    1a56:	4b36      	ldr	r3, [pc, #216]	; (1b30 <_ZN15ARINC_Interface13CustomMessageEh+0x730>)
    1a58:	4798      	blx	r3
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	3372      	adds	r3, #114	; 0x72
    1a5e:	4619      	mov	r1, r3
    1a60:	6878      	ldr	r0, [r7, #4]
    1a62:	4b35      	ldr	r3, [pc, #212]	; (1b38 <_ZN15ARINC_Interface13CustomMessageEh+0x738>)
    1a64:	4798      	blx	r3
		//	PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
			BigCounter.PayLoad[1] = TXBuffer[0];               // synchronise the Big counter with the new value
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
    1a6c:	747b      	strb	r3, [r7, #17]
			BigCounter.PayLoad[2] = TXBuffer[1];
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1a74:	74bb      	strb	r3, [r7, #18]
			BigCounter.PayLoad[3] = TXBuffer[2];
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    1a7c:	74fb      	strb	r3, [r7, #19]
			BigCounter.PayLoad[4] = TXBuffer[3];
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    1a84:	753b      	strb	r3, [r7, #20]
		//	PORTA |= 0x80;                                     // pulse high for scope
		//	PORTA &= 0x7F;
			debounceButton(OLED_BUTTON2);                           // debounce this button
    1a86:	2142      	movs	r1, #66	; 0x42
    1a88:	6878      	ldr	r0, [r7, #4]
    1a8a:	4b2d      	ldr	r3, [pc, #180]	; (1b40 <_ZN15ARINC_Interface13CustomMessageEh+0x740>)
    1a8c:	4798      	blx	r3
		}
		
		// Increment the data if "I" pressed
		if(ch=='I' || ch=='i')
    1a8e:	7bfb      	ldrb	r3, [r7, #15]
    1a90:	2b49      	cmp	r3, #73	; 0x49
    1a92:	d002      	beq.n	1a9a <_ZN15ARINC_Interface13CustomMessageEh+0x69a>
    1a94:	7bfb      	ldrb	r3, [r7, #15]
    1a96:	2b69      	cmp	r3, #105	; 0x69
    1a98:	d12d      	bne.n	1af6 <_ZN15ARINC_Interface13CustomMessageEh+0x6f6>
		{
				ch=0xff;
    1a9a:	23ff      	movs	r3, #255	; 0xff
    1a9c:	73fb      	strb	r3, [r7, #15]
			xprint("Command I: Increment data\n\r>");
    1a9e:	4929      	ldr	r1, [pc, #164]	; (1b44 <_ZN15ARINC_Interface13CustomMessageEh+0x744>)
    1aa0:	6878      	ldr	r0, [r7, #4]
    1aa2:	4b1e      	ldr	r3, [pc, #120]	; (1b1c <_ZN15ARINC_Interface13CustomMessageEh+0x71c>)
    1aa4:	4798      	blx	r3
			BigCounter.Word32++;
    1aa6:	693b      	ldr	r3, [r7, #16]
    1aa8:	3301      	adds	r3, #1
    1aaa:	613b      	str	r3, [r7, #16]
			TXBuffer[0] = BigCounter.PayLoad[1];
    1aac:	7c7a      	ldrb	r2, [r7, #17]
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			TXBuffer[1] = BigCounter.PayLoad[2];
    1ab4:	7cba      	ldrb	r2, [r7, #18]
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
			TXBuffer[2] = BigCounter.PayLoad[3];
    1abc:	7cfa      	ldrb	r2, [r7, #19]
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
    1ac4:	7cfa      	ldrb	r2, [r7, #19]
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			
			cpu_irq_disable();
    1acc:	6878      	ldr	r0, [r7, #4]
    1ace:	4b16      	ldr	r3, [pc, #88]	; (1b28 <_ZN15ARINC_Interface13CustomMessageEh+0x728>)
    1ad0:	4798      	blx	r3
			HI3893.TransmitCommandAndData(TXFIFO,TXBuffer);
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f103 0040 	add.w	r0, r3, #64	; 0x40
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	3372      	adds	r3, #114	; 0x72
    1adc:	461a      	mov	r2, r3
    1ade:	210c      	movs	r1, #12
    1ae0:	4b12      	ldr	r3, [pc, #72]	; (1b2c <_ZN15ARINC_Interface13CustomMessageEh+0x72c>)
    1ae2:	4798      	blx	r3
			cpu_irq_enable();
    1ae4:	6878      	ldr	r0, [r7, #4]
    1ae6:	4b12      	ldr	r3, [pc, #72]	; (1b30 <_ZN15ARINC_Interface13CustomMessageEh+0x730>)
    1ae8:	4798      	blx	r3
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	3372      	adds	r3, #114	; 0x72
    1aee:	4619      	mov	r1, r3
    1af0:	6878      	ldr	r0, [r7, #4]
    1af2:	4b11      	ldr	r3, [pc, #68]	; (1b38 <_ZN15ARINC_Interface13CustomMessageEh+0x738>)
    1af4:	4798      	blx	r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
    1af6:	4a14      	ldr	r2, [pc, #80]	; (1b48 <_ZN15ARINC_Interface13CustomMessageEh+0x748>)
    1af8:	4914      	ldr	r1, [pc, #80]	; (1b4c <_ZN15ARINC_Interface13CustomMessageEh+0x74c>)
    1afa:	6878      	ldr	r0, [r7, #4]
    1afc:	4b14      	ldr	r3, [pc, #80]	; (1b50 <_ZN15ARINC_Interface13CustomMessageEh+0x750>)
    1afe:	4798      	blx	r3
		

	}
    1b00:	e5f9      	b.n	16f6 <_ZN15ARINC_Interface13CustomMessageEh+0x2f6>
    1b02:	bf00      	nop
    1b04:	00001b71 	.word	0x00001b71
    1b08:	00000791 	.word	0x00000791
    1b0c:	20000024 	.word	0x20000024
    1b10:	0000033d 	.word	0x0000033d
    1b14:	00001b55 	.word	0x00001b55
    1b18:	000072fc 	.word	0x000072fc
    1b1c:	000006e1 	.word	0x000006e1
    1b20:	00000769 	.word	0x00000769
    1b24:	0000730c 	.word	0x0000730c
    1b28:	0000086d 	.word	0x0000086d
    1b2c:	000021b9 	.word	0x000021b9
    1b30:	00000855 	.word	0x00000855
    1b34:	0000703c 	.word	0x0000703c
    1b38:	00000dc1 	.word	0x00000dc1
    1b3c:	000005a9 	.word	0x000005a9
    1b40:	00000a7d 	.word	0x00000a7d
    1b44:	00007320 	.word	0x00007320
    1b48:	200007ac 	.word	0x200007ac
    1b4c:	200007a8 	.word	0x200007a8
    1b50:	00000e31 	.word	0x00000e31

00001b54 <_ZN15ARINC_Interface5spaceEv>:
	
}  // Transmit Custom Mode End

void  ARINC_Interface::space(void){
    1b54:	b580      	push	{r7, lr}
    1b56:	b082      	sub	sp, #8
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
	xputc(0x20);
    1b5c:	2120      	movs	r1, #32
    1b5e:	6878      	ldr	r0, [r7, #4]
    1b60:	4b02      	ldr	r3, [pc, #8]	; (1b6c <_ZN15ARINC_Interface5spaceEv+0x18>)
    1b62:	4798      	blx	r3
}
    1b64:	bf00      	nop
    1b66:	3708      	adds	r7, #8
    1b68:	46bd      	mov	sp, r7
    1b6a:	bd80      	pop	{r7, pc}
    1b6c:	00001b71 	.word	0x00001b71

00001b70 <_ZN15ARINC_Interface5xputcEc>:
void	ARINC_Interface::xputc(char byte) {
    1b70:	b580      	push	{r7, lr}
    1b72:	b084      	sub	sp, #16
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
    1b78:	460b      	mov	r3, r1
    1b7a:	70fb      	strb	r3, [r7, #3]
	uint8_t p[]="0";
    1b7c:	2330      	movs	r3, #48	; 0x30
    1b7e:	81bb      	strh	r3, [r7, #12]
	p[0]=uint8_t(byte);
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	733b      	strb	r3, [r7, #12]
	
	usb0.write(&p[0],sizeof(p));
    1b84:	f107 030c 	add.w	r3, r7, #12
    1b88:	2202      	movs	r2, #2
    1b8a:	4619      	mov	r1, r3
    1b8c:	4803      	ldr	r0, [pc, #12]	; (1b9c <_ZN15ARINC_Interface5xputcEc+0x2c>)
    1b8e:	4b04      	ldr	r3, [pc, #16]	; (1ba0 <_ZN15ARINC_Interface5xputcEc+0x30>)
    1b90:	4798      	blx	r3
    1b92:	bf00      	nop
    1b94:	3710      	adds	r7, #16
    1b96:	46bd      	mov	sp, r7
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	bf00      	nop
    1b9c:	20000738 	.word	0x20000738
    1ba0:	000027fd 	.word	0x000027fd

00001ba4 <_Z41__static_initialization_and_destruction_0ii>:
    1ba4:	b580      	push	{r7, lr}
    1ba6:	b082      	sub	sp, #8
    1ba8:	af00      	add	r7, sp, #0
    1baa:	6078      	str	r0, [r7, #4]
    1bac:	6039      	str	r1, [r7, #0]
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	2b01      	cmp	r3, #1
    1bb2:	d10c      	bne.n	1bce <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1bb4:	683b      	ldr	r3, [r7, #0]
    1bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1bba:	4293      	cmp	r3, r2
    1bbc:	d107      	bne.n	1bce <_Z41__static_initialization_and_destruction_0ii+0x2a>
USB_CDC_Class ARINC_Interface::usb0;
    1bbe:	4806      	ldr	r0, [pc, #24]	; (1bd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1bc2:	4798      	blx	r3
    1bc4:	4a06      	ldr	r2, [pc, #24]	; (1be0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1bc6:	4907      	ldr	r1, [pc, #28]	; (1be4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1bc8:	4803      	ldr	r0, [pc, #12]	; (1bd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1bca:	4b07      	ldr	r3, [pc, #28]	; (1be8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1bcc:	4798      	blx	r3
    1bce:	bf00      	nop
    1bd0:	3708      	adds	r7, #8
    1bd2:	46bd      	mov	sp, r7
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	bf00      	nop
    1bd8:	20000738 	.word	0x20000738
    1bdc:	00002739 	.word	0x00002739
    1be0:	20000000 	.word	0x20000000
    1be4:	00002961 	.word	0x00002961
    1be8:	000064b5 	.word	0x000064b5

00001bec <_GLOBAL__sub_I_HexSymbols>:
    1bec:	b580      	push	{r7, lr}
    1bee:	af00      	add	r7, sp, #0
    1bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1bf4:	2001      	movs	r0, #1
    1bf6:	4b01      	ldr	r3, [pc, #4]	; (1bfc <_GLOBAL__sub_I_HexSymbols+0x10>)
    1bf8:	4798      	blx	r3
    1bfa:	bd80      	pop	{r7, pc}
    1bfc:	00001ba5 	.word	0x00001ba5

00001c00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1c00:	b580      	push	{r7, lr}
    1c02:	b082      	sub	sp, #8
    1c04:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1c06:	4b16      	ldr	r3, [pc, #88]	; (1c60 <Reset_Handler+0x60>)
    1c08:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1c0a:	4b16      	ldr	r3, [pc, #88]	; (1c64 <Reset_Handler+0x64>)
    1c0c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1c0e:	687a      	ldr	r2, [r7, #4]
    1c10:	683b      	ldr	r3, [r7, #0]
    1c12:	429a      	cmp	r2, r3
    1c14:	d00c      	beq.n	1c30 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1c16:	e007      	b.n	1c28 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1c18:	683b      	ldr	r3, [r7, #0]
    1c1a:	1d1a      	adds	r2, r3, #4
    1c1c:	603a      	str	r2, [r7, #0]
    1c1e:	687a      	ldr	r2, [r7, #4]
    1c20:	1d11      	adds	r1, r2, #4
    1c22:	6079      	str	r1, [r7, #4]
    1c24:	6812      	ldr	r2, [r2, #0]
    1c26:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	4a0f      	ldr	r2, [pc, #60]	; (1c68 <Reset_Handler+0x68>)
    1c2c:	4293      	cmp	r3, r2
    1c2e:	d3f3      	bcc.n	1c18 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1c30:	4b0e      	ldr	r3, [pc, #56]	; (1c6c <Reset_Handler+0x6c>)
    1c32:	603b      	str	r3, [r7, #0]
    1c34:	e004      	b.n	1c40 <Reset_Handler+0x40>
                *pDest++ = 0;
    1c36:	683b      	ldr	r3, [r7, #0]
    1c38:	1d1a      	adds	r2, r3, #4
    1c3a:	603a      	str	r2, [r7, #0]
    1c3c:	2200      	movs	r2, #0
    1c3e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1c40:	683b      	ldr	r3, [r7, #0]
    1c42:	4a0b      	ldr	r2, [pc, #44]	; (1c70 <Reset_Handler+0x70>)
    1c44:	4293      	cmp	r3, r2
    1c46:	d3f6      	bcc.n	1c36 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <Reset_Handler+0x74>)
    1c4a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c4c:	4a0a      	ldr	r2, [pc, #40]	; (1c78 <Reset_Handler+0x78>)
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1c54:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    1c56:	4b09      	ldr	r3, [pc, #36]	; (1c7c <Reset_Handler+0x7c>)
    1c58:	4798      	blx	r3

        /* Branch to main function */
        main();
    1c5a:	4b09      	ldr	r3, [pc, #36]	; (1c80 <Reset_Handler+0x80>)
    1c5c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1c5e:	e7fe      	b.n	1c5e <Reset_Handler+0x5e>
    1c60:	000075ac 	.word	0x000075ac
    1c64:	20000000 	.word	0x20000000
    1c68:	2000071c 	.word	0x2000071c
    1c6c:	2000071c 	.word	0x2000071c
    1c70:	20000e50 	.word	0x20000e50
    1c74:	00000000 	.word	0x00000000
    1c78:	e000ed00 	.word	0xe000ed00
    1c7c:	000064cd 	.word	0x000064cd
    1c80:	000023d1 	.word	0x000023d1

00001c84 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c84:	b480      	push	{r7}
    1c86:	af00      	add	r7, sp, #0
        while (1) {
    1c88:	e7fe      	b.n	1c88 <Dummy_Handler+0x4>

00001c8a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1c8a:	b480      	push	{r7}
    1c8c:	b085      	sub	sp, #20
    1c8e:	af00      	add	r7, sp, #0
    1c90:	60f8      	str	r0, [r7, #12]
    1c92:	460b      	mov	r3, r1
    1c94:	607a      	str	r2, [r7, #4]
    1c96:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c98:	7afb      	ldrb	r3, [r7, #11]
    1c9a:	68fa      	ldr	r2, [r7, #12]
    1c9c:	01db      	lsls	r3, r3, #7
    1c9e:	4413      	add	r3, r2
    1ca0:	3318      	adds	r3, #24
    1ca2:	687a      	ldr	r2, [r7, #4]
    1ca4:	601a      	str	r2, [r3, #0]
}
    1ca6:	bf00      	nop
    1ca8:	3714      	adds	r7, #20
    1caa:	46bd      	mov	sp, r7
    1cac:	bc80      	pop	{r7}
    1cae:	4770      	bx	lr

00001cb0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1cb0:	b480      	push	{r7}
    1cb2:	b085      	sub	sp, #20
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	60f8      	str	r0, [r7, #12]
    1cb8:	460b      	mov	r3, r1
    1cba:	607a      	str	r2, [r7, #4]
    1cbc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1cbe:	7afb      	ldrb	r3, [r7, #11]
    1cc0:	68fa      	ldr	r2, [r7, #12]
    1cc2:	01db      	lsls	r3, r3, #7
    1cc4:	4413      	add	r3, r2
    1cc6:	3314      	adds	r3, #20
    1cc8:	687a      	ldr	r2, [r7, #4]
    1cca:	601a      	str	r2, [r3, #0]
}
    1ccc:	bf00      	nop
    1cce:	3714      	adds	r7, #20
    1cd0:	46bd      	mov	sp, r7
    1cd2:	bc80      	pop	{r7}
    1cd4:	4770      	bx	lr
	...

00001cd8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1cd8:	b580      	push	{r7, lr}
    1cda:	b082      	sub	sp, #8
    1cdc:	af00      	add	r7, sp, #0
    1cde:	4603      	mov	r3, r0
    1ce0:	6039      	str	r1, [r7, #0]
    1ce2:	71fb      	strb	r3, [r7, #7]
    1ce4:	4613      	mov	r3, r2
    1ce6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1ce8:	79bb      	ldrb	r3, [r7, #6]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d006      	beq.n	1cfc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1cee:	79fb      	ldrb	r3, [r7, #7]
    1cf0:	683a      	ldr	r2, [r7, #0]
    1cf2:	4619      	mov	r1, r3
    1cf4:	4806      	ldr	r0, [pc, #24]	; (1d10 <_gpio_set_level+0x38>)
    1cf6:	4b07      	ldr	r3, [pc, #28]	; (1d14 <_gpio_set_level+0x3c>)
    1cf8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1cfa:	e005      	b.n	1d08 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1cfc:	79fb      	ldrb	r3, [r7, #7]
    1cfe:	683a      	ldr	r2, [r7, #0]
    1d00:	4619      	mov	r1, r3
    1d02:	4803      	ldr	r0, [pc, #12]	; (1d10 <_gpio_set_level+0x38>)
    1d04:	4b04      	ldr	r3, [pc, #16]	; (1d18 <_gpio_set_level+0x40>)
    1d06:	4798      	blx	r3
}
    1d08:	bf00      	nop
    1d0a:	3708      	adds	r7, #8
    1d0c:	46bd      	mov	sp, r7
    1d0e:	bd80      	pop	{r7, pc}
    1d10:	41008000 	.word	0x41008000
    1d14:	00001c8b 	.word	0x00001c8b
    1d18:	00001cb1 	.word	0x00001cb1

00001d1c <gpio_set_pin_level>:
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b082      	sub	sp, #8
    1d20:	af00      	add	r7, sp, #0
    1d22:	4603      	mov	r3, r0
    1d24:	460a      	mov	r2, r1
    1d26:	71fb      	strb	r3, [r7, #7]
    1d28:	4613      	mov	r3, r2
    1d2a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1d2c:	79fb      	ldrb	r3, [r7, #7]
    1d2e:	115b      	asrs	r3, r3, #5
    1d30:	b2d8      	uxtb	r0, r3
    1d32:	79fb      	ldrb	r3, [r7, #7]
    1d34:	f003 031f 	and.w	r3, r3, #31
    1d38:	2201      	movs	r2, #1
    1d3a:	fa02 f303 	lsl.w	r3, r2, r3
    1d3e:	79ba      	ldrb	r2, [r7, #6]
    1d40:	4619      	mov	r1, r3
    1d42:	4b03      	ldr	r3, [pc, #12]	; (1d50 <gpio_set_pin_level+0x34>)
    1d44:	4798      	blx	r3
}
    1d46:	bf00      	nop
    1d48:	3708      	adds	r7, #8
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	00001cd9 	.word	0x00001cd9

00001d54 <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
    1d54:	b580      	push	{r7, lr}
    1d56:	b082      	sub	sp, #8
    1d58:	af00      	add	r7, sp, #0
    1d5a:	6078      	str	r0, [r7, #4]
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	4618      	mov	r0, r3
    1d60:	4b03      	ldr	r3, [pc, #12]	; (1d70 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
    1d62:	4798      	blx	r3
{
} //Holt_3593_Class
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	4618      	mov	r0, r3
    1d68:	3708      	adds	r7, #8
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	bf00      	nop
    1d70:	00002429 	.word	0x00002429

00001d74 <_ZN15Holt_3593_Class4InitEv>:
unsigned char LabelPriority2 [3] = {
//   [0]     [1]     [2]  
     0x03,   0x04,   0X05, 
}; 
  
 void	Holt_3593_Class::Init(void){
    1d74:	b590      	push	{r4, r7, lr}
    1d76:	b087      	sub	sp, #28
    1d78:	af02      	add	r7, sp, #8
    1d7a:	6078      	str	r0, [r7, #4]
	  spi.init();
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	4618      	mov	r0, r3
    1d80:	4b08      	ldr	r3, [pc, #32]	; (1da4 <_ZN15Holt_3593_Class4InitEv+0x30>)
    1d82:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 1,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
    1d84:	2301      	movs	r3, #1
    1d86:	9301      	str	r3, [sp, #4]
    1d88:	2301      	movs	r3, #1
    1d8a:	9300      	str	r3, [sp, #0]
    1d8c:	2300      	movs	r3, #0
    1d8e:	2201      	movs	r2, #1
    1d90:	2104      	movs	r1, #4
    1d92:	6878      	ldr	r0, [r7, #4]
    1d94:	4c04      	ldr	r4, [pc, #16]	; (1da8 <_ZN15Holt_3593_Class4InitEv+0x34>)
    1d96:	47a0      	blx	r4
    1d98:	4603      	mov	r3, r0
    1d9a:	73fb      	strb	r3, [r7, #15]
	
	 
 } 
    1d9c:	bf00      	nop
    1d9e:	3714      	adds	r7, #20
    1da0:	46bd      	mov	sp, r7
    1da2:	bd90      	pop	{r4, r7, pc}
    1da4:	00002449 	.word	0x00002449
    1da8:	00001dad 	.word	0x00001dad

00001dac <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
    1dac:	b580      	push	{r7, lr}
    1dae:	b084      	sub	sp, #16
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
    1db4:	4608      	mov	r0, r1
    1db6:	4611      	mov	r1, r2
    1db8:	461a      	mov	r2, r3
    1dba:	4603      	mov	r3, r0
    1dbc:	70fb      	strb	r3, [r7, #3]
    1dbe:	460b      	mov	r3, r1
    1dc0:	70bb      	strb	r3, [r7, #2]
    1dc2:	4613      	mov	r3, r2
    1dc4:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
    1dc6:	2300      	movs	r3, #0
    1dc8:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
    1dca:	2104      	movs	r1, #4
    1dcc:	6878      	ldr	r0, [r7, #4]
    1dce:	4b18      	ldr	r3, [pc, #96]	; (1e30 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
    1dd0:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
    1dd2:	78fb      	ldrb	r3, [r7, #3]
    1dd4:	461a      	mov	r2, r3
    1dd6:	2138      	movs	r1, #56	; 0x38
    1dd8:	6878      	ldr	r0, [r7, #4]
    1dda:	4b16      	ldr	r3, [pc, #88]	; (1e34 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
    1ddc:	4798      	blx	r3
	 cmd =  arate;
    1dde:	7e3b      	ldrb	r3, [r7, #24]
    1de0:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
    1de2:	787b      	ldrb	r3, [r7, #1]
    1de4:	011b      	lsls	r3, r3, #4
    1de6:	b25a      	sxtb	r2, r3
    1de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1dec:	4313      	orrs	r3, r2
    1dee:	b25b      	sxtb	r3, r3
    1df0:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
    1df2:	78bb      	ldrb	r3, [r7, #2]
    1df4:	015b      	lsls	r3, r3, #5
    1df6:	b25a      	sxtb	r2, r3
    1df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1dfc:	4313      	orrs	r3, r2
    1dfe:	b25b      	sxtb	r3, r3
    1e00:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
    1e02:	7f3b      	ldrb	r3, [r7, #28]
    1e04:	019b      	lsls	r3, r3, #6
    1e06:	b25a      	sxtb	r2, r3
    1e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e0c:	4313      	orrs	r3, r2
    1e0e:	b25b      	sxtb	r3, r3
    1e10:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
    1e12:	7bfb      	ldrb	r3, [r7, #15]
    1e14:	461a      	mov	r2, r3
    1e16:	2108      	movs	r1, #8
    1e18:	6878      	ldr	r0, [r7, #4]
    1e1a:	4b06      	ldr	r3, [pc, #24]	; (1e34 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
    1e1c:	4798      	blx	r3
	 return R_Register (R_TSR);
    1e1e:	2180      	movs	r1, #128	; 0x80
    1e20:	6878      	ldr	r0, [r7, #4]
    1e22:	4b05      	ldr	r3, [pc, #20]	; (1e38 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
    1e24:	4798      	blx	r3
    1e26:	4603      	mov	r3, r0
	 
 }
    1e28:	4618      	mov	r0, r3
    1e2a:	3710      	adds	r7, #16
    1e2c:	46bd      	mov	sp, r7
    1e2e:	bd80      	pop	{r7, pc}
    1e30:	00002265 	.word	0x00002265
    1e34:	000022b9 	.word	0x000022b9
    1e38:	0000232d 	.word	0x0000232d

00001e3c <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b082      	sub	sp, #8
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
	 	spi.enable();
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	4618      	mov	r0, r3
    1e48:	4b04      	ldr	r3, [pc, #16]	; (1e5c <_ZN15Holt_3593_Class4openEv+0x20>)
    1e4a:	4798      	blx	r3
		 SS_Low();
    1e4c:	6878      	ldr	r0, [r7, #4]
    1e4e:	4b04      	ldr	r3, [pc, #16]	; (1e60 <_ZN15Holt_3593_Class4openEv+0x24>)
    1e50:	4798      	blx	r3
 }
    1e52:	bf00      	nop
    1e54:	3708      	adds	r7, #8
    1e56:	46bd      	mov	sp, r7
    1e58:	bd80      	pop	{r7, pc}
    1e5a:	bf00      	nop
    1e5c:	00002471 	.word	0x00002471
    1e60:	00002399 	.word	0x00002399

00001e64 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
    1e64:	b580      	push	{r7, lr}
    1e66:	b082      	sub	sp, #8
    1e68:	af00      	add	r7, sp, #0
    1e6a:	6078      	str	r0, [r7, #4]
	    SS_High();
    1e6c:	6878      	ldr	r0, [r7, #4]
    1e6e:	4b05      	ldr	r3, [pc, #20]	; (1e84 <_ZN15Holt_3593_Class5closeEv+0x20>)
    1e70:	4798      	blx	r3
	  spi.disable();
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	4618      	mov	r0, r3
    1e76:	4b04      	ldr	r3, [pc, #16]	; (1e88 <_ZN15Holt_3593_Class5closeEv+0x24>)
    1e78:	4798      	blx	r3
	
  }
    1e7a:	bf00      	nop
    1e7c:	3708      	adds	r7, #8
    1e7e:	46bd      	mov	sp, r7
    1e80:	bd80      	pop	{r7, pc}
    1e82:	bf00      	nop
    1e84:	000023b5 	.word	0x000023b5
    1e88:	000024e1 	.word	0x000024e1

00001e8c <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
    1e8c:	b580      	push	{r7, lr}
    1e8e:	b084      	sub	sp, #16
    1e90:	af00      	add	r7, sp, #0
    1e92:	6078      	str	r0, [r7, #4]
    1e94:	460b      	mov	r3, r1
    1e96:	70fb      	strb	r3, [r7, #3]
    1e98:	4613      	mov	r3, r2
    1e9a:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
    1e9c:	78fb      	ldrb	r3, [r7, #3]
    1e9e:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
    1ea0:	7bfb      	ldrb	r3, [r7, #15]
    1ea2:	4619      	mov	r1, r3
    1ea4:	6878      	ldr	r0, [r7, #4]
    1ea6:	4b0b      	ldr	r3, [pc, #44]	; (1ed4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
    1ea8:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
    1eaa:	78bb      	ldrb	r3, [r7, #2]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d00a      	beq.n	1ec6 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	4618      	mov	r0, r3
    1eb4:	4b08      	ldr	r3, [pc, #32]	; (1ed8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
    1eb6:	4798      	blx	r3
    1eb8:	4603      	mov	r3, r0
    1eba:	f083 0301 	eor.w	r3, r3, #1
    1ebe:	b2db      	uxtb	r3, r3
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d000      	beq.n	1ec6 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    1ec4:	e7f4      	b.n	1eb0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
    1ec6:	78fb      	ldrb	r3, [r7, #3]
    1ec8:	73bb      	strb	r3, [r7, #14]
    1eca:	7bbb      	ldrb	r3, [r7, #14]
  
}
    1ecc:	4618      	mov	r0, r3
    1ece:	3710      	adds	r7, #16
    1ed0:	46bd      	mov	sp, r7
    1ed2:	bd80      	pop	{r7, pc}
    1ed4:	00001f49 	.word	0x00001f49
    1ed8:	000024f1 	.word	0x000024f1

00001edc <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b084      	sub	sp, #16
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
    1ee4:	6878      	ldr	r0, [r7, #4]
    1ee6:	4b14      	ldr	r3, [pc, #80]	; (1f38 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
    1ee8:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
    1eea:	2201      	movs	r2, #1
    1eec:	2114      	movs	r1, #20
    1eee:	6878      	ldr	r0, [r7, #4]
    1ef0:	4b12      	ldr	r3, [pc, #72]	; (1f3c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
    1ef2:	4798      	blx	r3
    1ef4:	4603      	mov	r3, r0
    1ef6:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    1ef8:	231f      	movs	r3, #31
    1efa:	73fb      	strb	r3, [r7, #15]
    1efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1f00:	2b00      	cmp	r3, #0
    1f02:	db11      	blt.n	1f28 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
    1f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1f08:	4a0d      	ldr	r2, [pc, #52]	; (1f40 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
    1f0a:	5cd3      	ldrb	r3, [r2, r3]
    1f0c:	2201      	movs	r2, #1
    1f0e:	4619      	mov	r1, r3
    1f10:	6878      	ldr	r0, [r7, #4]
    1f12:	4b0a      	ldr	r3, [pc, #40]	; (1f3c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
    1f14:	4798      	blx	r3
    1f16:	4603      	mov	r3, r0
    1f18:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
    1f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	3b01      	subs	r3, #1
    1f22:	b2db      	uxtb	r3, r3
    1f24:	73fb      	strb	r3, [r7, #15]
    1f26:	e7e9      	b.n	1efc <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
    1f28:	6878      	ldr	r0, [r7, #4]
    1f2a:	4b06      	ldr	r3, [pc, #24]	; (1f44 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
    1f2c:	4798      	blx	r3
}
    1f2e:	bf00      	nop
    1f30:	3710      	adds	r7, #16
    1f32:	46bd      	mov	sp, r7
    1f34:	bd80      	pop	{r7, pc}
    1f36:	bf00      	nop
    1f38:	00001e3d 	.word	0x00001e3d
    1f3c:	00001e8d 	.word	0x00001e8d
    1f40:	200001a4 	.word	0x200001a4
    1f44:	00001e65 	.word	0x00001e65

00001f48 <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b082      	sub	sp, #8
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
    1f50:	460b      	mov	r3, r1
    1f52:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	4618      	mov	r0, r3
    1f58:	4b0f      	ldr	r3, [pc, #60]	; (1f98 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
    1f5a:	4798      	blx	r3
    1f5c:	4603      	mov	r3, r0
    1f5e:	f083 0301 	eor.w	r3, r3, #1
    1f62:	b2db      	uxtb	r3, r3
    1f64:	2b00      	cmp	r3, #0
    1f66:	d000      	beq.n	1f6a <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
    1f68:	e7f4      	b.n	1f54 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	1cf9      	adds	r1, r7, #3
    1f6e:	2201      	movs	r2, #1
    1f70:	4618      	mov	r0, r3
    1f72:	4b0a      	ldr	r3, [pc, #40]	; (1f9c <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
    1f74:	4798      	blx	r3
	while (!spi.isSPIReady());  
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	4618      	mov	r0, r3
    1f7a:	4b07      	ldr	r3, [pc, #28]	; (1f98 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
    1f7c:	4798      	blx	r3
    1f7e:	4603      	mov	r3, r0
    1f80:	f083 0301 	eor.w	r3, r3, #1
    1f84:	b2db      	uxtb	r3, r3
    1f86:	2b00      	cmp	r3, #0
    1f88:	d000      	beq.n	1f8c <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
    1f8a:	e7f4      	b.n	1f76 <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
    1f8c:	78fb      	ldrb	r3, [r7, #3]
}
    1f8e:	4618      	mov	r0, r3
    1f90:	3708      	adds	r7, #8
    1f92:	46bd      	mov	sp, r7
    1f94:	bd80      	pop	{r7, pc}
    1f96:	bf00      	nop
    1f98:	000024f1 	.word	0x000024f1
    1f9c:	00002499 	.word	0x00002499

00001fa0 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b084      	sub	sp, #16
    1fa4:	af00      	add	r7, sp, #0
    1fa6:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	4618      	mov	r0, r3
    1fac:	4b0f      	ldr	r3, [pc, #60]	; (1fec <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
    1fae:	4798      	blx	r3
    1fb0:	4603      	mov	r3, r0
    1fb2:	f083 0301 	eor.w	r3, r3, #1
    1fb6:	b2db      	uxtb	r3, r3
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d000      	beq.n	1fbe <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
    1fbc:	e7f4      	b.n	1fa8 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	f107 010f 	add.w	r1, r7, #15
    1fc4:	2201      	movs	r2, #1
    1fc6:	4618      	mov	r0, r3
    1fc8:	4b09      	ldr	r3, [pc, #36]	; (1ff0 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
    1fca:	4798      	blx	r3
	while (!spi.isSPIReady());
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	4618      	mov	r0, r3
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
    1fd2:	4798      	blx	r3
    1fd4:	4603      	mov	r3, r0
    1fd6:	f083 0301 	eor.w	r3, r3, #1
    1fda:	b2db      	uxtb	r3, r3
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d000      	beq.n	1fe2 <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
    1fe0:	e7f4      	b.n	1fcc <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
    1fe2:	7bfb      	ldrb	r3, [r7, #15]
}	
    1fe4:	4618      	mov	r0, r3
    1fe6:	3710      	adds	r7, #16
    1fe8:	46bd      	mov	sp, r7
    1fea:	bd80      	pop	{r7, pc}
    1fec:	000024f1 	.word	0x000024f1
    1ff0:	000024bd 	.word	0x000024bd

00001ff4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	b084      	sub	sp, #16
    1ff8:	af00      	add	r7, sp, #0
    1ffa:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
    1ffc:	6878      	ldr	r0, [r7, #4]
    1ffe:	4b14      	ldr	r3, [pc, #80]	; (2050 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
    2000:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
    2002:	2201      	movs	r2, #1
    2004:	2128      	movs	r1, #40	; 0x28
    2006:	6878      	ldr	r0, [r7, #4]
    2008:	4b12      	ldr	r3, [pc, #72]	; (2054 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
    200a:	4798      	blx	r3
    200c:	4603      	mov	r3, r0
    200e:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    2010:	231f      	movs	r3, #31
    2012:	73fb      	strb	r3, [r7, #15]
    2014:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2018:	2b00      	cmp	r3, #0
    201a:	db11      	blt.n	2040 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
    201c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2020:	4a0d      	ldr	r2, [pc, #52]	; (2058 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
    2022:	5cd3      	ldrb	r3, [r2, r3]
    2024:	2201      	movs	r2, #1
    2026:	4619      	mov	r1, r3
    2028:	6878      	ldr	r0, [r7, #4]
    202a:	4b0a      	ldr	r3, [pc, #40]	; (2054 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
    202c:	4798      	blx	r3
    202e:	4603      	mov	r3, r0
    2030:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
    2032:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2036:	b2db      	uxtb	r3, r3
    2038:	3b01      	subs	r3, #1
    203a:	b2db      	uxtb	r3, r3
    203c:	73fb      	strb	r3, [r7, #15]
    203e:	e7e9      	b.n	2014 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
    2040:	6878      	ldr	r0, [r7, #4]
    2042:	4b06      	ldr	r3, [pc, #24]	; (205c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
    2044:	4798      	blx	r3
}
    2046:	bf00      	nop
    2048:	3710      	adds	r7, #16
    204a:	46bd      	mov	sp, r7
    204c:	bd80      	pop	{r7, pc}
    204e:	bf00      	nop
    2050:	00001e3d 	.word	0x00001e3d
    2054:	00001e8d 	.word	0x00001e8d
    2058:	200001c4 	.word	0x200001c4
    205c:	00001e65 	.word	0x00001e65

00002060 <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
    2060:	b580      	push	{r7, lr}
    2062:	b086      	sub	sp, #24
    2064:	af00      	add	r7, sp, #0
    2066:	60f8      	str	r0, [r7, #12]
    2068:	607b      	str	r3, [r7, #4]
    206a:	460b      	mov	r3, r1
    206c:	72fb      	strb	r3, [r7, #11]
    206e:	4613      	mov	r3, r2
    2070:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   
   CS_HL();  
    2072:	68f8      	ldr	r0, [r7, #12]
    2074:	4b16      	ldr	r3, [pc, #88]	; (20d0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
    2076:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
    2078:	7afb      	ldrb	r3, [r7, #11]
    207a:	4619      	mov	r1, r3
    207c:	68f8      	ldr	r0, [r7, #12]
    207e:	4b15      	ldr	r3, [pc, #84]	; (20d4 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
    2080:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
    2082:	68fb      	ldr	r3, [r7, #12]
    2084:	4618      	mov	r0, r3
    2086:	4b14      	ldr	r3, [pc, #80]	; (20d8 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
    2088:	4798      	blx	r3
    208a:	4603      	mov	r3, r0
    208c:	f083 0301 	eor.w	r3, r3, #1
    2090:	b2db      	uxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	d000      	beq.n	2098 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
    2096:	e7f4      	b.n	2082 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    2098:	2300      	movs	r3, #0
    209a:	75fb      	strb	r3, [r7, #23]
    209c:	7dfa      	ldrb	r2, [r7, #23]
    209e:	7abb      	ldrb	r3, [r7, #10]
    20a0:	429a      	cmp	r2, r3
    20a2:	da0d      	bge.n	20c0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
    20a4:	68f8      	ldr	r0, [r7, #12]
    20a6:	4b0d      	ldr	r3, [pc, #52]	; (20dc <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
    20a8:	4798      	blx	r3
    20aa:	4603      	mov	r3, r0
    20ac:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
    20ae:	7dfb      	ldrb	r3, [r7, #23]
    20b0:	687a      	ldr	r2, [r7, #4]
    20b2:	4413      	add	r3, r2
    20b4:	7dba      	ldrb	r2, [r7, #22]
    20b6:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    20b8:	7dfb      	ldrb	r3, [r7, #23]
    20ba:	3301      	adds	r3, #1
    20bc:	75fb      	strb	r3, [r7, #23]
    20be:	e7ed      	b.n	209c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
    20c0:	68f8      	ldr	r0, [r7, #12]
    20c2:	4b07      	ldr	r3, [pc, #28]	; (20e0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
    20c4:	4798      	blx	r3
  
}
    20c6:	bf00      	nop
    20c8:	3718      	adds	r7, #24
    20ca:	46bd      	mov	sp, r7
    20cc:	bd80      	pop	{r7, pc}
    20ce:	bf00      	nop
    20d0:	00002375 	.word	0x00002375
    20d4:	00001f49 	.word	0x00001f49
    20d8:	000024f1 	.word	0x000024f1
    20dc:	00001fa1 	.word	0x00001fa1
    20e0:	00001e65 	.word	0x00001e65

000020e4 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b086      	sub	sp, #24
    20e8:	af00      	add	r7, sp, #0
    20ea:	60f8      	str	r0, [r7, #12]
    20ec:	460b      	mov	r3, r1
    20ee:	607a      	str	r2, [r7, #4]
    20f0:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
    20f2:	2303      	movs	r3, #3
    20f4:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
    20f6:	7afb      	ldrb	r3, [r7, #11]
    20f8:	2ba0      	cmp	r3, #160	; 0xa0
    20fa:	d002      	beq.n	2102 <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
    20fc:	7afb      	ldrb	r3, [r7, #11]
    20fe:	2bc0      	cmp	r3, #192	; 0xc0
    2100:	d102      	bne.n	2108 <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
    2102:	7dbb      	ldrb	r3, [r7, #22]
    2104:	3301      	adds	r3, #1
    2106:	75bb      	strb	r3, [r7, #22]
	   }                        
   CS_HL();  
    2108:	68f8      	ldr	r0, [r7, #12]
    210a:	4b13      	ldr	r3, [pc, #76]	; (2158 <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
    210c:	4798      	blx	r3
   dummy = Get_Byte();                   // clear SPI status register    
    210e:	68f8      	ldr	r0, [r7, #12]
    2110:	4b12      	ldr	r3, [pc, #72]	; (215c <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
    2112:	4798      	blx	r3
    2114:	4603      	mov	r3, r0
    2116:	757b      	strb	r3, [r7, #21]
   Send_Byte(source) ;                  // source command to read FIFO data
    2118:	7afb      	ldrb	r3, [r7, #11]
    211a:	4619      	mov	r1, r3
    211c:	68f8      	ldr	r0, [r7, #12]
    211e:	4b10      	ldr	r3, [pc, #64]	; (2160 <_ZN15Holt_3593_Class9ArincReadEhPh+0x7c>)
    2120:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    2122:	2300      	movs	r3, #0
    2124:	75fb      	strb	r3, [r7, #23]
    2126:	7dfa      	ldrb	r2, [r7, #23]
    2128:	7dbb      	ldrb	r3, [r7, #22]
    212a:	429a      	cmp	r2, r3
    212c:	da0d      	bge.n	214a <_ZN15Holt_3593_Class9ArincReadEhPh+0x66>
      dummy = Get_Byte(); 
    212e:	68f8      	ldr	r0, [r7, #12]
    2130:	4b0a      	ldr	r3, [pc, #40]	; (215c <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
    2132:	4798      	blx	r3
    2134:	4603      	mov	r3, r0
    2136:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
    2138:	7dfb      	ldrb	r3, [r7, #23]
    213a:	687a      	ldr	r2, [r7, #4]
    213c:	4413      	add	r3, r2
    213e:	7d7a      	ldrb	r2, [r7, #21]
    2140:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    2142:	7dfb      	ldrb	r3, [r7, #23]
    2144:	3301      	adds	r3, #1
    2146:	75fb      	strb	r3, [r7, #23]
    2148:	e7ed      	b.n	2126 <_ZN15Holt_3593_Class9ArincReadEhPh+0x42>
     }

  close();
    214a:	68f8      	ldr	r0, [r7, #12]
    214c:	4b05      	ldr	r3, [pc, #20]	; (2164 <_ZN15Holt_3593_Class9ArincReadEhPh+0x80>)
    214e:	4798      	blx	r3
  
}
    2150:	bf00      	nop
    2152:	3718      	adds	r7, #24
    2154:	46bd      	mov	sp, r7
    2156:	bd80      	pop	{r7, pc}
    2158:	00002375 	.word	0x00002375
    215c:	00001fa1 	.word	0x00001fa1
    2160:	00001f49 	.word	0x00001f49
    2164:	00001e65 	.word	0x00001e65

00002168 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
    2168:	b580      	push	{r7, lr}
    216a:	b084      	sub	sp, #16
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
    2170:	460b      	mov	r3, r1
    2172:	70fb      	strb	r3, [r7, #3]
    2174:	4613      	mov	r3, r2
    2176:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
    2178:	78fb      	ldrb	r3, [r7, #3]
    217a:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
    217c:	7bfb      	ldrb	r3, [r7, #15]
    217e:	4619      	mov	r1, r3
    2180:	6878      	ldr	r0, [r7, #4]
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
    2184:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
    2186:	78bb      	ldrb	r3, [r7, #2]
    2188:	2b00      	cmp	r3, #0
    218a:	d00a      	beq.n	21a2 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	4618      	mov	r0, r3
    2190:	4b08      	ldr	r3, [pc, #32]	; (21b4 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
    2192:	4798      	blx	r3
    2194:	4603      	mov	r3, r0
    2196:	f083 0301 	eor.w	r3, r3, #1
    219a:	b2db      	uxtb	r3, r3
    219c:	2b00      	cmp	r3, #0
    219e:	d000      	beq.n	21a2 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
    21a0:	e7f4      	b.n	218c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
    21a2:	78fb      	ldrb	r3, [r7, #3]
    21a4:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
    21a6:	7bbb      	ldrb	r3, [r7, #14]
  
 }
    21a8:	4618      	mov	r0, r3
    21aa:	3710      	adds	r7, #16
    21ac:	46bd      	mov	sp, r7
    21ae:	bd80      	pop	{r7, pc}
    21b0:	00001f49 	.word	0x00001f49
    21b4:	000024f1 	.word	0x000024f1

000021b8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
    21b8:	b580      	push	{r7, lr}
    21ba:	b084      	sub	sp, #16
    21bc:	af00      	add	r7, sp, #0
    21be:	60f8      	str	r0, [r7, #12]
    21c0:	460b      	mov	r3, r1
    21c2:	607a      	str	r2, [r7, #4]
    21c4:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
    21c6:	68f8      	ldr	r0, [r7, #12]
    21c8:	4b20      	ldr	r3, [pc, #128]	; (224c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
    21ca:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
    21cc:	4b20      	ldr	r3, [pc, #128]	; (2250 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
    21ce:	2204      	movs	r2, #4
    21d0:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match)          // if writing PL Match registers send only 3 bytes
    21d2:	7afb      	ldrb	r3, [r7, #11]
    21d4:	2b18      	cmp	r3, #24
    21d6:	d002      	beq.n	21de <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
    21d8:	7afb      	ldrb	r3, [r7, #11]
    21da:	2b2c      	cmp	r3, #44	; 0x2c
    21dc:	d105      	bne.n	21ea <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
    21de:	4b1c      	ldr	r3, [pc, #112]	; (2250 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	3b01      	subs	r3, #1
    21e4:	b2da      	uxtb	r2, r3
    21e6:	4b1a      	ldr	r3, [pc, #104]	; (2250 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
    21e8:	701a      	strb	r2, [r3, #0]
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
    21ea:	7afb      	ldrb	r3, [r7, #11]
    21ec:	2201      	movs	r2, #1
    21ee:	4619      	mov	r1, r3
    21f0:	68f8      	ldr	r0, [r7, #12]
    21f2:	4b18      	ldr	r3, [pc, #96]	; (2254 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
    21f4:	4798      	blx	r3
    21f6:	4603      	mov	r3, r0
    21f8:	461a      	mov	r2, r3
    21fa:	4b17      	ldr	r3, [pc, #92]	; (2258 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
    21fc:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
    21fe:	4b17      	ldr	r3, [pc, #92]	; (225c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
    2200:	2200      	movs	r2, #0
    2202:	701a      	strb	r2, [r3, #0]
    2204:	4b15      	ldr	r3, [pc, #84]	; (225c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	461a      	mov	r2, r3
    220a:	4b11      	ldr	r3, [pc, #68]	; (2250 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
    220c:	781b      	ldrb	r3, [r3, #0]
    220e:	429a      	cmp	r2, r3
    2210:	da15      	bge.n	223e <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
    2212:	4b12      	ldr	r3, [pc, #72]	; (225c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	461a      	mov	r2, r3
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	4413      	add	r3, r2
    221c:	781b      	ldrb	r3, [r3, #0]
    221e:	2201      	movs	r2, #1
    2220:	4619      	mov	r1, r3
    2222:	68f8      	ldr	r0, [r7, #12]
    2224:	4b0b      	ldr	r3, [pc, #44]	; (2254 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
    2226:	4798      	blx	r3
    2228:	4603      	mov	r3, r0
    222a:	461a      	mov	r2, r3
    222c:	4b0a      	ldr	r3, [pc, #40]	; (2258 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
    222e:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
    2230:	4b0a      	ldr	r3, [pc, #40]	; (225c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
    2232:	781b      	ldrb	r3, [r3, #0]
    2234:	3301      	adds	r3, #1
    2236:	b2da      	uxtb	r2, r3
    2238:	4b08      	ldr	r3, [pc, #32]	; (225c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
    223a:	701a      	strb	r2, [r3, #0]
    223c:	e7e2      	b.n	2204 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
    223e:	68f8      	ldr	r0, [r7, #12]
    2240:	4b07      	ldr	r3, [pc, #28]	; (2260 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
    2242:	4798      	blx	r3
}
    2244:	bf00      	nop
    2246:	3710      	adds	r7, #16
    2248:	46bd      	mov	sp, r7
    224a:	bd80      	pop	{r7, pc}
    224c:	00001e3d 	.word	0x00001e3d
    2250:	200007f2 	.word	0x200007f2
    2254:	00002169 	.word	0x00002169
    2258:	200007f1 	.word	0x200007f1
    225c:	200007f0 	.word	0x200007f0
    2260:	00001e65 	.word	0x00001e65

00002264 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
    2264:	b580      	push	{r7, lr}
    2266:	b084      	sub	sp, #16
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	460b      	mov	r3, r1
    226e:	70fb      	strb	r3, [r7, #3]
  static unsigned char dummy;
 	  uint8_t p(cmd); 
    2270:	78fb      	ldrb	r3, [r7, #3]
    2272:	73fb      	strb	r3, [r7, #15]
  open();
    2274:	6878      	ldr	r0, [r7, #4]
    2276:	4b0c      	ldr	r3, [pc, #48]	; (22a8 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
    2278:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
    227a:	7bfb      	ldrb	r3, [r7, #15]
    227c:	4619      	mov	r1, r3
    227e:	6878      	ldr	r0, [r7, #4]
    2280:	4b0a      	ldr	r3, [pc, #40]	; (22ac <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
    2282:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	4618      	mov	r0, r3
    2288:	4b09      	ldr	r3, [pc, #36]	; (22b0 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
    228a:	4798      	blx	r3
    228c:	4603      	mov	r3, r0
    228e:	f083 0301 	eor.w	r3, r3, #1
    2292:	b2db      	uxtb	r3, r3
    2294:	2b00      	cmp	r3, #0
    2296:	d000      	beq.n	229a <_ZN15Holt_3593_Class9W_CommandEc+0x36>
    2298:	e7f4      	b.n	2284 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
    229a:	6878      	ldr	r0, [r7, #4]
    229c:	4b05      	ldr	r3, [pc, #20]	; (22b4 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
    229e:	4798      	blx	r3
}
    22a0:	bf00      	nop
    22a2:	3710      	adds	r7, #16
    22a4:	46bd      	mov	sp, r7
    22a6:	bd80      	pop	{r7, pc}
    22a8:	00001e3d 	.word	0x00001e3d
    22ac:	00001f49 	.word	0x00001f49
    22b0:	000024f1 	.word	0x000024f1
    22b4:	00001e65 	.word	0x00001e65

000022b8 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
    22b8:	b580      	push	{r7, lr}
    22ba:	b082      	sub	sp, #8
    22bc:	af00      	add	r7, sp, #0
    22be:	6078      	str	r0, [r7, #4]
    22c0:	460b      	mov	r3, r1
    22c2:	70fb      	strb	r3, [r7, #3]
    22c4:	4613      	mov	r3, r2
    22c6:	70bb      	strb	r3, [r7, #2]
  uint8_t dummy; 
  	
  open();                             // assert the SPI0 /SS strobe
    22c8:	6878      	ldr	r0, [r7, #4]
    22ca:	4b14      	ldr	r3, [pc, #80]	; (231c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
    22cc:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
    22ce:	78fb      	ldrb	r3, [r7, #3]
    22d0:	4619      	mov	r1, r3
    22d2:	6878      	ldr	r0, [r7, #4]
    22d4:	4b12      	ldr	r3, [pc, #72]	; (2320 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
    22d6:	4798      	blx	r3
  while (!spi.isSPIReady());    
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	4618      	mov	r0, r3
    22dc:	4b11      	ldr	r3, [pc, #68]	; (2324 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
    22de:	4798      	blx	r3
    22e0:	4603      	mov	r3, r0
    22e2:	f083 0301 	eor.w	r3, r3, #1
    22e6:	b2db      	uxtb	r3, r3
    22e8:	2b00      	cmp	r3, #0
    22ea:	d000      	beq.n	22ee <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
    22ec:	e7f4      	b.n	22d8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
    22ee:	78bb      	ldrb	r3, [r7, #2]
    22f0:	4619      	mov	r1, r3
    22f2:	6878      	ldr	r0, [r7, #4]
    22f4:	4b0a      	ldr	r3, [pc, #40]	; (2320 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
    22f6:	4798      	blx	r3
  while (!spi.isSPIReady());    
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	4618      	mov	r0, r3
    22fc:	4b09      	ldr	r3, [pc, #36]	; (2324 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
    22fe:	4798      	blx	r3
    2300:	4603      	mov	r3, r0
    2302:	f083 0301 	eor.w	r3, r3, #1
    2306:	b2db      	uxtb	r3, r3
    2308:	2b00      	cmp	r3, #0
    230a:	d000      	beq.n	230e <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
    230c:	e7f4      	b.n	22f8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
    230e:	6878      	ldr	r0, [r7, #4]
    2310:	4b05      	ldr	r3, [pc, #20]	; (2328 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
    2312:	4798      	blx	r3
}
    2314:	bf00      	nop
    2316:	3708      	adds	r7, #8
    2318:	46bd      	mov	sp, r7
    231a:	bd80      	pop	{r7, pc}
    231c:	00001e3d 	.word	0x00001e3d
    2320:	00001f49 	.word	0x00001f49
    2324:	000024f1 	.word	0x000024f1
    2328:	00001e65 	.word	0x00001e65

0000232c <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
    232c:	b580      	push	{r7, lr}
    232e:	b084      	sub	sp, #16
    2330:	af00      	add	r7, sp, #0
    2332:	6078      	str	r0, [r7, #4]
    2334:	460b      	mov	r3, r1
    2336:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
    2338:	6878      	ldr	r0, [r7, #4]
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
    233c:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
    233e:	78fb      	ldrb	r3, [r7, #3]
    2340:	2201      	movs	r2, #1
    2342:	4619      	mov	r1, r3
    2344:	6878      	ldr	r0, [r7, #4]
    2346:	4b08      	ldr	r3, [pc, #32]	; (2368 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
    2348:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
    234a:	6878      	ldr	r0, [r7, #4]
    234c:	4b07      	ldr	r3, [pc, #28]	; (236c <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
    234e:	4798      	blx	r3
    2350:	4603      	mov	r3, r0
    2352:	73fb      	strb	r3, [r7, #15]
         
  close();
    2354:	6878      	ldr	r0, [r7, #4]
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
    2358:	4798      	blx	r3
  return R_Reg;
    235a:	7bfb      	ldrb	r3, [r7, #15]
}
    235c:	4618      	mov	r0, r3
    235e:	3710      	adds	r7, #16
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}
    2364:	00001e3d 	.word	0x00001e3d
    2368:	00002169 	.word	0x00002169
    236c:	00001fa1 	.word	0x00001fa1
    2370:	00001e65 	.word	0x00001e65

00002374 <_ZN15Holt_3593_Class5CS_HLEv>:
// ------------------------------------------------------
// Set the SPI nCS high then low
// ------------------------------------------------------
void Holt_3593_Class::CS_HL (void) {
    2374:	b580      	push	{r7, lr}
    2376:	b082      	sub	sp, #8
    2378:	af00      	add	r7, sp, #0
    237a:	6078      	str	r0, [r7, #4]
	close();
    237c:	6878      	ldr	r0, [r7, #4]
    237e:	4b04      	ldr	r3, [pc, #16]	; (2390 <_ZN15Holt_3593_Class5CS_HLEv+0x1c>)
    2380:	4798      	blx	r3
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
    2382:	6878      	ldr	r0, [r7, #4]
    2384:	4b03      	ldr	r3, [pc, #12]	; (2394 <_ZN15Holt_3593_Class5CS_HLEv+0x20>)
    2386:	4798      	blx	r3
  } 
    2388:	bf00      	nop
    238a:	3708      	adds	r7, #8
    238c:	46bd      	mov	sp, r7
    238e:	bd80      	pop	{r7, pc}
    2390:	00001e65 	.word	0x00001e65
    2394:	00001e3d 	.word	0x00001e3d

00002398 <_ZN15Holt_3593_Class6SS_LowEv>:

void Holt_3593_Class::SS_Low(void)
{
    2398:	b580      	push	{r7, lr}
    239a:	b082      	sub	sp, #8
    239c:	af00      	add	r7, sp, #0
    239e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(SPI1_CS,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
    23a0:	2100      	movs	r1, #0
    23a2:	203c      	movs	r0, #60	; 0x3c
    23a4:	4b02      	ldr	r3, [pc, #8]	; (23b0 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
    23a6:	4798      	blx	r3
}
    23a8:	bf00      	nop
    23aa:	3708      	adds	r7, #8
    23ac:	46bd      	mov	sp, r7
    23ae:	bd80      	pop	{r7, pc}
    23b0:	00001d1d 	.word	0x00001d1d

000023b4 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b082      	sub	sp, #8
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(SPI1_CS,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    23bc:	2101      	movs	r1, #1
    23be:	203c      	movs	r0, #60	; 0x3c
    23c0:	4b02      	ldr	r3, [pc, #8]	; (23cc <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
    23c2:	4798      	blx	r3
}
    23c4:	bf00      	nop
    23c6:	3708      	adds	r7, #8
    23c8:	46bd      	mov	sp, r7
    23ca:	bd80      	pop	{r7, pc}
    23cc:	00001d1d 	.word	0x00001d1d

000023d0 <main>:
//#include "USB_CDC_Class.h"
#include "ARINC_Interface.h"
static uint8_t p[]="   Usb Interface Test\n\r";

int main(void)
{		
    23d0:	b580      	push	{r7, lr}
    23d2:	b0ec      	sub	sp, #432	; 0x1b0
    23d4:	af00      	add	r7, sp, #0
		atmel_start_init();
    23d6:	4b0e      	ldr	r3, [pc, #56]	; (2410 <main+0x40>)
    23d8:	4798      	blx	r3
	//	USB_CDC_Class	usb1;
		//usb1.init();
		ARINC_Interface		ECSBox;
    23da:	463b      	mov	r3, r7
    23dc:	4618      	mov	r0, r3
    23de:	4b0d      	ldr	r3, [pc, #52]	; (2414 <main+0x44>)
    23e0:	4798      	blx	r3
		ECSBox.Init();
    23e2:	463b      	mov	r3, r7
    23e4:	4618      	mov	r0, r3
    23e6:	4b0c      	ldr	r3, [pc, #48]	; (2418 <main+0x48>)
    23e8:	4798      	blx	r3
		
		//delay_ms(3000);
		//ECSBox.SayHello();
		delay_ms(300);
    23ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
    23ee:	4b0b      	ldr	r3, [pc, #44]	; (241c <main+0x4c>)
    23f0:	4798      	blx	r3
		
    /* Replace with your application code */
    while (1) 
    {
		//usb1.write(&p[0],sizeof(p));
		ECSBox.SayHello();
    23f2:	463b      	mov	r3, r7
    23f4:	4618      	mov	r0, r3
    23f6:	4b0a      	ldr	r3, [pc, #40]	; (2420 <main+0x50>)
    23f8:	4798      	blx	r3
		delay_ms(300);
    23fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
    23fe:	4b07      	ldr	r3, [pc, #28]	; (241c <main+0x4c>)
    2400:	4798      	blx	r3
		ECSBox.CustomMessage(SELFTEST_OFF);
    2402:	463b      	mov	r3, r7
    2404:	2100      	movs	r1, #0
    2406:	4618      	mov	r0, r3
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <main+0x54>)
    240a:	4798      	blx	r3
		ECSBox.SayHello();
    240c:	e7f1      	b.n	23f2 <main+0x22>
    240e:	bf00      	nop
    2410:	0000297d 	.word	0x0000297d
    2414:	000005e5 	.word	0x000005e5
    2418:	0000062d 	.word	0x0000062d
    241c:	00002fd1 	.word	0x00002fd1
    2420:	000006c1 	.word	0x000006c1
    2424:	00001401 	.word	0x00001401

00002428 <_ZN13SPI_Syn_ClassC1Ev>:


#include "SPI_Syn_Class.h"

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    2428:	b470      	push	{r4, r5, r6}
    242a:	4606      	mov	r6, r0
{
	SPI=SPI_1;
    242c:	1d04      	adds	r4, r0, #4
    242e:	4d05      	ldr	r5, [pc, #20]	; (2444 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    2430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2434:	e895 0003 	ldmia.w	r5, {r0, r1}
    2438:	e884 0003 	stmia.w	r4, {r0, r1}
} //SPI_Syn_Class
    243c:	4630      	mov	r0, r6
    243e:	bc70      	pop	{r4, r5, r6}
    2440:	4770      	bx	lr
    2442:	bf00      	nop
    2444:	20000dd8 	.word	0x20000dd8

00002448 <_ZN13SPI_Syn_Class4initEv>:
// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class

void SPI_Syn_Class::init(){
    2448:	b510      	push	{r4, lr}
    244a:	4604      	mov	r4, r0
	SPI_1_CLOCK_init();
    244c:	4b05      	ldr	r3, [pc, #20]	; (2464 <_ZN13SPI_Syn_Class4initEv+0x1c>)
    244e:	4798      	blx	r3
	spi_m_sync_init(&SPI, SERCOM4);
    2450:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2454:	1d20      	adds	r0, r4, #4
    2456:	4b04      	ldr	r3, [pc, #16]	; (2468 <_ZN13SPI_Syn_Class4initEv+0x20>)
    2458:	4798      	blx	r3
	SPI_1_PORT_init();
    245a:	4b04      	ldr	r3, [pc, #16]	; (246c <_ZN13SPI_Syn_Class4initEv+0x24>)
    245c:	4798      	blx	r3
	
	ready=true;
    245e:	2301      	movs	r3, #1
    2460:	7023      	strb	r3, [r4, #0]
    2462:	bd10      	pop	{r4, pc}
    2464:	00002a85 	.word	0x00002a85
    2468:	0000305d 	.word	0x0000305d
    246c:	000029c1 	.word	0x000029c1

00002470 <_ZN13SPI_Syn_Class6enableEv>:
	
}

int32_t SPI_Syn_Class::enable(){
    2470:	b538      	push	{r3, r4, r5, lr}
    2472:	4604      	mov	r4, r0
	spi_m_sync_get_io_descriptor(&SPI, &spio);
    2474:	1d05      	adds	r5, r0, #4
    2476:	f100 011c 	add.w	r1, r0, #28
    247a:	4628      	mov	r0, r5
    247c:	4b04      	ldr	r3, [pc, #16]	; (2490 <_ZN13SPI_Syn_Class6enableEv+0x20>)
    247e:	4798      	blx	r3
	spi_m_sync_enable(&SPI);
    2480:	4628      	mov	r0, r5
    2482:	4b04      	ldr	r3, [pc, #16]	; (2494 <_ZN13SPI_Syn_Class6enableEv+0x24>)
    2484:	4798      	blx	r3
	ready=true;
    2486:	2301      	movs	r3, #1
    2488:	7023      	strb	r3, [r4, #0]
	return 0;
}
    248a:	2000      	movs	r0, #0
    248c:	bd38      	pop	{r3, r4, r5, pc}
    248e:	bf00      	nop
    2490:	000031b5 	.word	0x000031b5
    2494:	000030ad 	.word	0x000030ad

00002498 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    2498:	b510      	push	{r4, lr}
    249a:	4604      	mov	r4, r0
	int32_t w;
	wFlag=true;
    249c:	2301      	movs	r3, #1
    249e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	w= io_write(spio,p,(uint16_t)n);
    24a2:	b292      	uxth	r2, r2
    24a4:	69c0      	ldr	r0, [r0, #28]
    24a6:	4b04      	ldr	r3, [pc, #16]	; (24b8 <_ZN13SPI_Syn_Class5writeEPKhl+0x20>)
    24a8:	4798      	blx	r3
	wFlag=(bool)w;
    24aa:	1c03      	adds	r3, r0, #0
    24ac:	bf18      	it	ne
    24ae:	2301      	movne	r3, #1
    24b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	 return w;
	
}
    24b4:	bd10      	pop	{r4, pc}
    24b6:	bf00      	nop
    24b8:	00002ffd 	.word	0x00002ffd

000024bc <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    24bc:	b510      	push	{r4, lr}
    24be:	4604      	mov	r4, r0
	int32_t r;
	rFlag=true;
    24c0:	2301      	movs	r3, #1
    24c2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	r=io_read(spio,p,(uint16_t)n);
    24c6:	b292      	uxth	r2, r2
    24c8:	69c0      	ldr	r0, [r0, #28]
    24ca:	4b04      	ldr	r3, [pc, #16]	; (24dc <_ZN13SPI_Syn_Class4readEPhl+0x20>)
    24cc:	4798      	blx	r3
	rFlag=(bool)r;
    24ce:	1c03      	adds	r3, r0, #0
    24d0:	bf18      	it	ne
    24d2:	2301      	movne	r3, #1
    24d4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	return  r;
}
    24d8:	bd10      	pop	{r4, pc}
    24da:	bf00      	nop
    24dc:	0000302d 	.word	0x0000302d

000024e0 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    24e0:	b508      	push	{r3, lr}
	spi_m_sync_disable(&SPI);
    24e2:	3004      	adds	r0, #4
    24e4:	4b01      	ldr	r3, [pc, #4]	; (24ec <_ZN13SPI_Syn_Class7disableEv+0xc>)
    24e6:	4798      	blx	r3
    24e8:	bd08      	pop	{r3, pc}
    24ea:	bf00      	nop
    24ec:	000030d5 	.word	0x000030d5

000024f0 <_ZN13SPI_Syn_Class10isSPIReadyEv>:
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
	ready=~(rFlag||wFlag);
    24f0:	2301      	movs	r3, #1
    24f2:	7003      	strb	r3, [r0, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
    24f4:	7800      	ldrb	r0, [r0, #0]
	{
		return false;
	}
	return ready;
	
}
    24f6:	4770      	bx	lr

000024f8 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    24f8:	b480      	push	{r7}
    24fa:	b083      	sub	sp, #12
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	695b      	ldr	r3, [r3, #20]
    2504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    250c:	bf00      	nop
    250e:	370c      	adds	r7, #12
    2510:	46bd      	mov	sp, r7
    2512:	bc80      	pop	{r7}
    2514:	4770      	bx	lr
	...

00002518 <_ZL14extern_task_cbPK10timer_task>:

#include "Timer_Class.h"

Timer_Class*	ptrTimerClass;
static void extern_task_cb(const struct timer_task *const timer_task)
{
    2518:	b580      	push	{r7, lr}
    251a:	b082      	sub	sp, #8
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
	ptrTimerClass->handler();
    2520:	4b03      	ldr	r3, [pc, #12]	; (2530 <_ZL14extern_task_cbPK10timer_task+0x18>)
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2526:	4798      	blx	r3
}
    2528:	bf00      	nop
    252a:	3708      	adds	r7, #8
    252c:	46bd      	mov	sp, r7
    252e:	bd80      	pop	{r7, pc}
    2530:	200007f4 	.word	0x200007f4

00002534 <_ZL7task_cbPK10timer_task>:
static void task_cb(const struct timer_task *const timer_task)
{
    2534:	b580      	push	{r7, lr}
    2536:	b082      	sub	sp, #8
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <_ZL7task_cbPK10timer_task+0x1c>)
    253e:	681b      	ldr	r3, [r3, #0]
    2540:	4618      	mov	r0, r3
    2542:	4b04      	ldr	r3, [pc, #16]	; (2554 <_ZL7task_cbPK10timer_task+0x20>)
    2544:	4798      	blx	r3
}
    2546:	bf00      	nop
    2548:	3708      	adds	r7, #8
    254a:	46bd      	mov	sp, r7
    254c:	bd80      	pop	{r7, pc}
    254e:	bf00      	nop
    2550:	200007f4 	.word	0x200007f4
    2554:	00002621 	.word	0x00002621

00002558 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
    2558:	b4b0      	push	{r4, r5, r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
{
	TIMER0=TIMER_0;
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	4a0e      	ldr	r2, [pc, #56]	; (259c <_ZN11Timer_ClassC1Ev+0x44>)
    2564:	1d1c      	adds	r4, r3, #4
    2566:	4615      	mov	r5, r2
    2568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    256c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    2570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	prtTimer=this;
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	687a      	ldr	r2, [r7, #4]
    2578:	639a      	str	r2, [r3, #56]	; 0x38
	ptrTimerClass=this;
    257a:	4a09      	ldr	r2, [pc, #36]	; (25a0 <_ZN11Timer_ClassC1Ev+0x48>)
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2586:	63da      	str	r2, [r3, #60]	; 0x3c
	task.cb=task_cb;
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	4a06      	ldr	r2, [pc, #24]	; (25a4 <_ZN11Timer_ClassC1Ev+0x4c>)
    258c:	62da      	str	r2, [r3, #44]	; 0x2c
} //Timer_Class
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	4618      	mov	r0, r3
    2592:	370c      	adds	r7, #12
    2594:	46bd      	mov	sp, r7
    2596:	bcb0      	pop	{r4, r5, r7}
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	20000e08 	.word	0x20000e08
    25a0:	200007f4 	.word	0x200007f4
    25a4:	00002535 	.word	0x00002535

000025a8 <_ZN11Timer_Class4InitEv>:
	timeout=0;
} //~Timer_Class



void Timer_Class::Init(void){
    25a8:	b590      	push	{r4, r7, lr}
    25aa:	b083      	sub	sp, #12
    25ac:	af00      	add	r7, sp, #0
    25ae:	6078      	str	r0, [r7, #4]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    25b0:	480b      	ldr	r0, [pc, #44]	; (25e0 <_ZN11Timer_Class4InitEv+0x38>)
    25b2:	4b0c      	ldr	r3, [pc, #48]	; (25e4 <_ZN11Timer_Class4InitEv+0x3c>)
    25b4:	4798      	blx	r3
	timer_init(&TIMER0, RTC, _rtc_get_timer());
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	1d1c      	adds	r4, r3, #4
    25ba:	4b0b      	ldr	r3, [pc, #44]	; (25e8 <_ZN11Timer_Class4InitEv+0x40>)
    25bc:	4798      	blx	r3
    25be:	4603      	mov	r3, r0
    25c0:	461a      	mov	r2, r3
    25c2:	490a      	ldr	r1, [pc, #40]	; (25ec <_ZN11Timer_Class4InitEv+0x44>)
    25c4:	4620      	mov	r0, r4
    25c6:	4b0a      	ldr	r3, [pc, #40]	; (25f0 <_ZN11Timer_Class4InitEv+0x48>)
    25c8:	4798      	blx	r3
	set_clock_cycles_per_tick(clockCycles);
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    25ce:	4619      	mov	r1, r3
    25d0:	6878      	ldr	r0, [r7, #4]
    25d2:	4b08      	ldr	r3, [pc, #32]	; (25f4 <_ZN11Timer_Class4InitEv+0x4c>)
    25d4:	4798      	blx	r3
}
    25d6:	bf00      	nop
    25d8:	370c      	adds	r7, #12
    25da:	46bd      	mov	sp, r7
    25dc:	bd90      	pop	{r4, r7, pc}
    25de:	bf00      	nop
    25e0:	40000800 	.word	0x40000800
    25e4:	000024f9 	.word	0x000024f9
    25e8:	00003d21 	.word	0x00003d21
    25ec:	40002400 	.word	0x40002400
    25f0:	000032b9 	.word	0x000032b9
    25f4:	000025f9 	.word	0x000025f9

000025f8 <_ZN11Timer_Class25set_clock_cycles_per_tickEm>:
int32_t Timer_Class::set_clock_cycles_per_tick(uint32_t clock_cycles){
    25f8:	b580      	push	{r7, lr}
    25fa:	b084      	sub	sp, #16
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
    2600:	6039      	str	r1, [r7, #0]
	int32_t	status;
	status=timer_set_clock_cycles_per_tick(&TIMER0,clock_cycles);
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	3304      	adds	r3, #4
    2606:	6839      	ldr	r1, [r7, #0]
    2608:	4618      	mov	r0, r3
    260a:	4b04      	ldr	r3, [pc, #16]	; (261c <_ZN11Timer_Class25set_clock_cycles_per_tickEm+0x24>)
    260c:	4798      	blx	r3
    260e:	60f8      	str	r0, [r7, #12]
	return status;
    2610:	68fb      	ldr	r3, [r7, #12]
}
    2612:	4618      	mov	r0, r3
    2614:	3710      	adds	r7, #16
    2616:	46bd      	mov	sp, r7
    2618:	bd80      	pop	{r7, pc}
    261a:	bf00      	nop
    261c:	000032f5 	.word	0x000032f5

00002620 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(&TIMER0, &task);
}

void Timer_Class::setTimeout(){
    2620:	b480      	push	{r7}
    2622:	b083      	sub	sp, #12
    2624:	af00      	add	r7, sp, #0
    2626:	6078      	str	r0, [r7, #4]
	timeout=1;
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	2201      	movs	r2, #1
    262c:	705a      	strb	r2, [r3, #1]
}
    262e:	bf00      	nop
    2630:	370c      	adds	r7, #12
    2632:	46bd      	mov	sp, r7
    2634:	bc80      	pop	{r7}
    2636:	4770      	bx	lr

00002638 <_ZN11Timer_Class8add_taskEPFvvEm>:
void	Timer_Class::deinit(){
	timer_deinit(&TIMER0);
}

int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval){
    2638:	b580      	push	{r7, lr}
    263a:	b086      	sub	sp, #24
    263c:	af00      	add	r7, sp, #0
    263e:	60f8      	str	r0, [r7, #12]
    2640:	60b9      	str	r1, [r7, #8]
    2642:	607a      	str	r2, [r7, #4]
	int32_t	status;

	handler=func;
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	68ba      	ldr	r2, [r7, #8]
    2648:	635a      	str	r2, [r3, #52]	; 0x34
	task.interval = interval;
    264a:	68fb      	ldr	r3, [r7, #12]
    264c:	687a      	ldr	r2, [r7, #4]
    264e:	629a      	str	r2, [r3, #40]	; 0x28
	task.cb       = extern_task_cb;
    2650:	68fb      	ldr	r3, [r7, #12]
    2652:	4a0a      	ldr	r2, [pc, #40]	; (267c <_ZN11Timer_Class8add_taskEPFvvEm+0x44>)
    2654:	62da      	str	r2, [r3, #44]	; 0x2c
	task.mode     = TIMER_TASK_REPEAT;
    2656:	68fb      	ldr	r3, [r7, #12]
    2658:	2201      	movs	r2, #1
    265a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	status=timer_add_task(&TIMER0, &task);
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	1d1a      	adds	r2, r3, #4
    2662:	68fb      	ldr	r3, [r7, #12]
    2664:	3320      	adds	r3, #32
    2666:	4619      	mov	r1, r3
    2668:	4610      	mov	r0, r2
    266a:	4b05      	ldr	r3, [pc, #20]	; (2680 <_ZN11Timer_Class8add_taskEPFvvEm+0x48>)
    266c:	4798      	blx	r3
    266e:	6178      	str	r0, [r7, #20]
	
	return status;
    2670:	697b      	ldr	r3, [r7, #20]
}
    2672:	4618      	mov	r0, r3
    2674:	3718      	adds	r7, #24
    2676:	46bd      	mov	sp, r7
    2678:	bd80      	pop	{r7, pc}
    267a:	bf00      	nop
    267c:	00002519 	.word	0x00002519
    2680:	00003321 	.word	0x00003321

00002684 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    2684:	b580      	push	{r7, lr}
    2686:	b082      	sub	sp, #8
    2688:	af00      	add	r7, sp, #0
    268a:	4603      	mov	r3, r0
    268c:	603a      	str	r2, [r7, #0]
    268e:	71fb      	strb	r3, [r7, #7]
    2690:	460b      	mov	r3, r1
    2692:	71bb      	strb	r3, [r7, #6]
	//cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
	//ptrUSBClass->write_buffer(count);
	//ptrUSBClass->GetLastChar();
	//bool done=true;
	ptrUSBClass->setLastChar();
    2694:	4b07      	ldr	r3, [pc, #28]	; (26b4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	4618      	mov	r0, r3
    269a:	4b07      	ldr	r3, [pc, #28]	; (26b8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    269c:	4798      	blx	r3
	ptrUSBClass->setRxDone();
    269e:	4b05      	ldr	r3, [pc, #20]	; (26b4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	4618      	mov	r0, r3
    26a4:	4b05      	ldr	r3, [pc, #20]	; (26bc <_ZL12cb_bulk_readh13usb_xfer_codem+0x38>)
    26a6:	4798      	blx	r3
	//ptrUSBClass->rxDone=done;
	/* No error. */
	return false;
    26a8:	2300      	movs	r3, #0
}
    26aa:	4618      	mov	r0, r3
    26ac:	3708      	adds	r7, #8
    26ae:	46bd      	mov	sp, r7
    26b0:	bd80      	pop	{r7, pc}
    26b2:	bf00      	nop
    26b4:	20000878 	.word	0x20000878
    26b8:	00002941 	.word	0x00002941
    26bc:	00002919 	.word	0x00002919

000026c0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    26c0:	b580      	push	{r7, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	af00      	add	r7, sp, #0
    26c6:	4603      	mov	r3, r0
    26c8:	603a      	str	r2, [r7, #0]
    26ca:	71fb      	strb	r3, [r7, #7]
    26cc:	460b      	mov	r3, r1
    26ce:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	//cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	//volatile bool *done=ptrUSBClass->pTx;
	//*done=true;
	
	ptrUSBClass->setTxDone();
    26d0:	4b04      	ldr	r3, [pc, #16]	; (26e4 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x24>)
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	4618      	mov	r0, r3
    26d6:	4b04      	ldr	r3, [pc, #16]	; (26e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x28>)
    26d8:	4798      	blx	r3
	//ptrUSBClass->GetLastChar();
	//ptrUSBClass->txDone=done;
	

	/* No error. */
	return false;
    26da:	2300      	movs	r3, #0
}
    26dc:	4618      	mov	r0, r3
    26de:	3708      	adds	r7, #8
    26e0:	46bd      	mov	sp, r7
    26e2:	bd80      	pop	{r7, pc}
    26e4:	20000878 	.word	0x20000878
    26e8:	000028f1 	.word	0x000028f1

000026ec <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b082      	sub	sp, #8
    26f0:	af00      	add	r7, sp, #0
    26f2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    26f4:	793b      	ldrb	r3, [r7, #4]
    26f6:	f003 0301 	and.w	r3, r3, #1
    26fa:	b2db      	uxtb	r3, r3
    26fc:	2b00      	cmp	r3, #0
    26fe:	d00c      	beq.n	271a <_ZL10cb_state_c22usb_cdc_control_signal+0x2e>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    2700:	4908      	ldr	r1, [pc, #32]	; (2724 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    2702:	2000      	movs	r0, #0
    2704:	4b08      	ldr	r3, [pc, #32]	; (2728 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    2706:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    2708:	4908      	ldr	r1, [pc, #32]	; (272c <_ZL10cb_state_c22usb_cdc_control_signal+0x40>)
    270a:	2001      	movs	r0, #1
    270c:	4b06      	ldr	r3, [pc, #24]	; (2728 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    270e:	4798      	blx	r3
		/* Start Rx */
		//ptrUSBClass->read_char(1);
		ptrUSBClass->setTxDone();
    2710:	4b07      	ldr	r3, [pc, #28]	; (2730 <_ZL10cb_state_c22usb_cdc_control_signal+0x44>)
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	4618      	mov	r0, r3
    2716:	4b07      	ldr	r3, [pc, #28]	; (2734 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    2718:	4798      	blx	r3
		//ptrUSBClass->setTxDone();
		//ptrUSBClass->txDone=done;
	}

	/* No error. */
	return false;
    271a:	2300      	movs	r3, #0
}
    271c:	4618      	mov	r0, r3
    271e:	3708      	adds	r7, #8
    2720:	46bd      	mov	sp, r7
    2722:	bd80      	pop	{r7, pc}
    2724:	00002685 	.word	0x00002685
    2728:	000056b1 	.word	0x000056b1
    272c:	000026c1 	.word	0x000026c1
    2730:	20000878 	.word	0x20000878
    2734:	000028f1 	.word	0x000028f1

00002738 <_ZN13USB_CDC_ClassC1Ev>:

// default constructor
USB_CDC_Class::USB_CDC_Class()
    2738:	b480      	push	{r7}
    273a:	b083      	sub	sp, #12
    273c:	af00      	add	r7, sp, #0
    273e:	6078      	str	r0, [r7, #4]
{
	descUSB=desc;
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	4a08      	ldr	r2, [pc, #32]	; (2764 <_ZN13USB_CDC_ClassC1Ev+0x2c>)
    2744:	605a      	str	r2, [r3, #4]
	ptr_cdc_buffer=usbd_cdc_buffer;
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	4a07      	ldr	r2, [pc, #28]	; (2768 <_ZN13USB_CDC_ClassC1Ev+0x30>)
    274a:	609a      	str	r2, [r3, #8]
	ptrUSBClass=this;
    274c:	4a07      	ldr	r2, [pc, #28]	; (276c <_ZN13USB_CDC_ClassC1Ev+0x34>)
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	6013      	str	r3, [r2, #0]
	pUSBClass=this;
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	687a      	ldr	r2, [r7, #4]
    2756:	665a      	str	r2, [r3, #100]	; 0x64



} //USB_CDC_Class
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	4618      	mov	r0, r3
    275c:	370c      	adds	r7, #12
    275e:	46bd      	mov	sp, r7
    2760:	bc80      	pop	{r7}
    2762:	4770      	bx	lr
    2764:	20000244 	.word	0x20000244
    2768:	200007f8 	.word	0x200007f8
    276c:	20000878 	.word	0x20000878

00002770 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	usbdc_init(usb_ctrl_buffer);
    2778:	4815      	ldr	r0, [pc, #84]	; (27d0 <_ZN13USB_CDC_Class4initEv+0x60>)
    277a:	4b16      	ldr	r3, [pc, #88]	; (27d4 <_ZN13USB_CDC_Class4initEv+0x64>)
    277c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    277e:	4b16      	ldr	r3, [pc, #88]	; (27d8 <_ZN13USB_CDC_Class4initEv+0x68>)
    2780:	4798      	blx	r3

	usbdc_start(desc);
    2782:	4816      	ldr	r0, [pc, #88]	; (27dc <_ZN13USB_CDC_Class4initEv+0x6c>)
    2784:	4b16      	ldr	r3, [pc, #88]	; (27e0 <_ZN13USB_CDC_Class4initEv+0x70>)
    2786:	4798      	blx	r3
	usbdc_attach();
    2788:	4b16      	ldr	r3, [pc, #88]	; (27e4 <_ZN13USB_CDC_Class4initEv+0x74>)
    278a:	4798      	blx	r3
	while (!isUSBEnabled()){};
    278c:	6878      	ldr	r0, [r7, #4]
    278e:	4b16      	ldr	r3, [pc, #88]	; (27e8 <_ZN13USB_CDC_Class4initEv+0x78>)
    2790:	4798      	blx	r3
    2792:	4603      	mov	r3, r0
    2794:	f083 0301 	eor.w	r3, r3, #1
    2798:	b2db      	uxtb	r3, r3
    279a:	2b00      	cmp	r3, #0
    279c:	d000      	beq.n	27a0 <_ZN13USB_CDC_Class4initEv+0x30>
    279e:	e7f5      	b.n	278c <_ZN13USB_CDC_Class4initEv+0x1c>
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    27a0:	4912      	ldr	r1, [pc, #72]	; (27ec <_ZN13USB_CDC_Class4initEv+0x7c>)
    27a2:	2003      	movs	r0, #3
    27a4:	4b12      	ldr	r3, [pc, #72]	; (27f0 <_ZN13USB_CDC_Class4initEv+0x80>)
    27a6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    27a8:	4912      	ldr	r1, [pc, #72]	; (27f4 <_ZN13USB_CDC_Class4initEv+0x84>)
    27aa:	2000      	movs	r0, #0
    27ac:	4b10      	ldr	r3, [pc, #64]	; (27f0 <_ZN13USB_CDC_Class4initEv+0x80>)
    27ae:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    27b0:	4911      	ldr	r1, [pc, #68]	; (27f8 <_ZN13USB_CDC_Class4initEv+0x88>)
    27b2:	2001      	movs	r0, #1
    27b4:	4b0e      	ldr	r3, [pc, #56]	; (27f0 <_ZN13USB_CDC_Class4initEv+0x80>)
    27b6:	4798      	blx	r3
	txDone=true;
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	2201      	movs	r2, #1
    27bc:	f883 2020 	strb.w	r2, [r3, #32]
	rxDone=true;
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	2201      	movs	r2, #1
    27c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
	
}
    27c8:	bf00      	nop
    27ca:	3708      	adds	r7, #8
    27cc:	46bd      	mov	sp, r7
    27ce:	bd80      	pop	{r7, pc}
    27d0:	20000838 	.word	0x20000838
    27d4:	00005d15 	.word	0x00005d15
    27d8:	00005601 	.word	0x00005601
    27dc:	20000244 	.word	0x20000244
    27e0:	00005d85 	.word	0x00005d85
    27e4:	00005db9 	.word	0x00005db9
    27e8:	000028d5 	.word	0x000028d5
    27ec:	000026ed 	.word	0x000026ed
    27f0:	000056b1 	.word	0x000056b1
    27f4:	00002685 	.word	0x00002685
    27f8:	000026c1 	.word	0x000026c1

000027fc <_ZN13USB_CDC_Class5writeEPhm>:
int32_t USB_CDC_Class::enable(){
	cdcdf_acm_init();
	return 0;
}

int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
    27fc:	b580      	push	{r7, lr}
    27fe:	b086      	sub	sp, #24
    2800:	af00      	add	r7, sp, #0
    2802:	60f8      	str	r0, [r7, #12]
    2804:	60b9      	str	r1, [r7, #8]
    2806:	607a      	str	r2, [r7, #4]
	int32_t w;

	while(!isUSBEnabled());
    2808:	68f8      	ldr	r0, [r7, #12]
    280a:	4b0e      	ldr	r3, [pc, #56]	; (2844 <_ZN13USB_CDC_Class5writeEPhm+0x48>)
    280c:	4798      	blx	r3
    280e:	4603      	mov	r3, r0
    2810:	f083 0301 	eor.w	r3, r3, #1
    2814:	b2db      	uxtb	r3, r3
    2816:	2b00      	cmp	r3, #0
    2818:	d000      	beq.n	281c <_ZN13USB_CDC_Class5writeEPhm+0x20>
    281a:	e7f5      	b.n	2808 <_ZN13USB_CDC_Class5writeEPhm+0xc>
	while(!txDone);
    281c:	68fb      	ldr	r3, [r7, #12]
    281e:	f893 3020 	ldrb.w	r3, [r3, #32]
    2822:	2b00      	cmp	r3, #0
    2824:	d100      	bne.n	2828 <_ZN13USB_CDC_Class5writeEPhm+0x2c>
    2826:	e7f9      	b.n	281c <_ZN13USB_CDC_Class5writeEPhm+0x20>
	txDone=false;
    2828:	68fb      	ldr	r3, [r7, #12]
    282a:	2200      	movs	r2, #0
    282c:	f883 2020 	strb.w	r2, [r3, #32]
	w=cdcdf_acm_write(p,n);
    2830:	6879      	ldr	r1, [r7, #4]
    2832:	68b8      	ldr	r0, [r7, #8]
    2834:	4b04      	ldr	r3, [pc, #16]	; (2848 <_ZN13USB_CDC_Class5writeEPhm+0x4c>)
    2836:	4798      	blx	r3
    2838:	6178      	str	r0, [r7, #20]
	
	return w;
    283a:	697b      	ldr	r3, [r7, #20]
	
}
    283c:	4618      	mov	r0, r3
    283e:	3718      	adds	r7, #24
    2840:	46bd      	mov	sp, r7
    2842:	bd80      	pop	{r7, pc}
    2844:	000028d5 	.word	0x000028d5
    2848:	00005689 	.word	0x00005689

0000284c <_ZN13USB_CDC_Class4readEPhmb>:
	w=cdcdf_acm_write((uint8_t *)ptr_cdc_buffer, n);
	
	return w;
	
}
int32_t  USB_CDC_Class::read(uint8_t * p, uint32_t n,bool wait){
    284c:	b580      	push	{r7, lr}
    284e:	b086      	sub	sp, #24
    2850:	af00      	add	r7, sp, #0
    2852:	60f8      	str	r0, [r7, #12]
    2854:	60b9      	str	r1, [r7, #8]
    2856:	607a      	str	r2, [r7, #4]
    2858:	70fb      	strb	r3, [r7, #3]
	int32_t r;
	r=read(p,n);
    285a:	687a      	ldr	r2, [r7, #4]
    285c:	68b9      	ldr	r1, [r7, #8]
    285e:	68f8      	ldr	r0, [r7, #12]
    2860:	4b08      	ldr	r3, [pc, #32]	; (2884 <_ZN13USB_CDC_Class4readEPhmb+0x38>)
    2862:	4798      	blx	r3
    2864:	6178      	str	r0, [r7, #20]
	if (wait)
    2866:	78fb      	ldrb	r3, [r7, #3]
    2868:	2b00      	cmp	r3, #0
    286a:	d005      	beq.n	2878 <_ZN13USB_CDC_Class4readEPhmb+0x2c>
	{
		while(!rxDone);
    286c:	68fb      	ldr	r3, [r7, #12]
    286e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    2872:	2b00      	cmp	r3, #0
    2874:	d100      	bne.n	2878 <_ZN13USB_CDC_Class4readEPhmb+0x2c>
    2876:	e7f9      	b.n	286c <_ZN13USB_CDC_Class4readEPhmb+0x20>
	}
	return  r;
    2878:	697b      	ldr	r3, [r7, #20]
}
    287a:	4618      	mov	r0, r3
    287c:	3718      	adds	r7, #24
    287e:	46bd      	mov	sp, r7
    2880:	bd80      	pop	{r7, pc}
    2882:	bf00      	nop
    2884:	00002889 	.word	0x00002889

00002888 <_ZN13USB_CDC_Class4readEPhm>:
int32_t  USB_CDC_Class::read(uint8_t * p, uint32_t n){
    2888:	b580      	push	{r7, lr}
    288a:	b086      	sub	sp, #24
    288c:	af00      	add	r7, sp, #0
    288e:	60f8      	str	r0, [r7, #12]
    2890:	60b9      	str	r1, [r7, #8]
    2892:	607a      	str	r2, [r7, #4]
	int32_t r;
	char_buffer=p;
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	68ba      	ldr	r2, [r7, #8]
    2898:	60da      	str	r2, [r3, #12]
	while(!isUSBEnabled());
    289a:	68f8      	ldr	r0, [r7, #12]
    289c:	4b0b      	ldr	r3, [pc, #44]	; (28cc <_ZN13USB_CDC_Class4readEPhm+0x44>)
    289e:	4798      	blx	r3
    28a0:	4603      	mov	r3, r0
    28a2:	f083 0301 	eor.w	r3, r3, #1
    28a6:	b2db      	uxtb	r3, r3
    28a8:	2b00      	cmp	r3, #0
    28aa:	d000      	beq.n	28ae <_ZN13USB_CDC_Class4readEPhm+0x26>
    28ac:	e7f5      	b.n	289a <_ZN13USB_CDC_Class4readEPhm+0x12>
	//while(!rxDone);
	rxDone=false;
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	2200      	movs	r2, #0
    28b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	r=cdcdf_acm_read(p, n);
    28b6:	6879      	ldr	r1, [r7, #4]
    28b8:	68b8      	ldr	r0, [r7, #8]
    28ba:	4b05      	ldr	r3, [pc, #20]	; (28d0 <_ZN13USB_CDC_Class4readEPhm+0x48>)
    28bc:	4798      	blx	r3
    28be:	6178      	str	r0, [r7, #20]
	

	return  r;
    28c0:	697b      	ldr	r3, [r7, #20]
}
    28c2:	4618      	mov	r0, r3
    28c4:	3718      	adds	r7, #24
    28c6:	46bd      	mov	sp, r7
    28c8:	bd80      	pop	{r7, pc}
    28ca:	bf00      	nop
    28cc:	000028d5 	.word	0x000028d5
    28d0:	00005661 	.word	0x00005661

000028d4 <_ZN13USB_CDC_Class12isUSBEnabledEv>:
}
void USB_CDC_Class::disable(void){
cdcdf_acm_deinit();
	
}
bool USB_CDC_Class::isUSBEnabled(void){
    28d4:	b580      	push	{r7, lr}
    28d6:	b082      	sub	sp, #8
    28d8:	af00      	add	r7, sp, #0
    28da:	6078      	str	r0, [r7, #4]
	

	return cdcdf_acm_is_enabled();
    28dc:	4b03      	ldr	r3, [pc, #12]	; (28ec <_ZN13USB_CDC_Class12isUSBEnabledEv+0x18>)
    28de:	4798      	blx	r3
    28e0:	4603      	mov	r3, r0
	
}
    28e2:	4618      	mov	r0, r3
    28e4:	3708      	adds	r7, #8
    28e6:	46bd      	mov	sp, r7
    28e8:	bd80      	pop	{r7, pc}
    28ea:	bf00      	nop
    28ec:	000056fd 	.word	0x000056fd

000028f0 <_ZN13USB_CDC_Class9setTxDoneEv>:
bool  USB_CDC_Class::setTxDone(void){
    28f0:	b480      	push	{r7}
    28f2:	b083      	sub	sp, #12
    28f4:	af00      	add	r7, sp, #0
    28f6:	6078      	str	r0, [r7, #4]
	txDone=true;
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	2201      	movs	r2, #1
    28fc:	f883 2020 	strb.w	r2, [r3, #32]
	txDone=true;
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	2201      	movs	r2, #1
    2904:	f883 2020 	strb.w	r2, [r3, #32]
	return txDone;
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
    290e:	4618      	mov	r0, r3
    2910:	370c      	adds	r7, #12
    2912:	46bd      	mov	sp, r7
    2914:	bc80      	pop	{r7}
    2916:	4770      	bx	lr

00002918 <_ZN13USB_CDC_Class9setRxDoneEv>:
bool  USB_CDC_Class::setRxDone(void){
    2918:	b480      	push	{r7}
    291a:	b083      	sub	sp, #12
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
	rxDone=true;
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	2201      	movs	r2, #1
    2924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rxDone=true;
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	2201      	movs	r2, #1
    292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return rxDone;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
    2936:	4618      	mov	r0, r3
    2938:	370c      	adds	r7, #12
    293a:	46bd      	mov	sp, r7
    293c:	bc80      	pop	{r7}
    293e:	4770      	bx	lr

00002940 <_ZN13USB_CDC_Class11setLastCharEv>:
char USB_CDC_Class::getLastChar(){
	
	return (char)byte;
	
}
uint8_t USB_CDC_Class::setLastChar(){
    2940:	b480      	push	{r7}
    2942:	b083      	sub	sp, #12
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
	byte=*char_buffer;
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	68db      	ldr	r3, [r3, #12]
    294c:	781a      	ldrb	r2, [r3, #0]
    294e:	687b      	ldr	r3, [r7, #4]
    2950:	741a      	strb	r2, [r3, #16]

	return byte;
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	7c1b      	ldrb	r3, [r3, #16]
	
}
    2956:	4618      	mov	r0, r3
    2958:	370c      	adds	r7, #12
    295a:	46bd      	mov	sp, r7
    295c:	bc80      	pop	{r7}
    295e:	4770      	bx	lr

00002960 <_ZN13USB_CDC_ClassD1Ev>:


// default destructor
USB_CDC_Class::~USB_CDC_Class()
    2960:	b580      	push	{r7, lr}
    2962:	b082      	sub	sp, #8
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
{
	cdcdf_acm_deinit();
    2968:	4b03      	ldr	r3, [pc, #12]	; (2978 <_ZN13USB_CDC_ClassD1Ev+0x18>)
    296a:	4798      	blx	r3
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	4618      	mov	r0, r3
    2970:	3708      	adds	r7, #8
    2972:	46bd      	mov	sp, r7
    2974:	bd80      	pop	{r7, pc}
    2976:	bf00      	nop
    2978:	00005645 	.word	0x00005645

0000297c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    297c:	b508      	push	{r3, lr}
	system_init();
    297e:	4b03      	ldr	r3, [pc, #12]	; (298c <atmel_start_init+0x10>)
    2980:	4798      	blx	r3
	gfx_mono_init();
    2982:	4b03      	ldr	r3, [pc, #12]	; (2990 <atmel_start_init+0x14>)
    2984:	4798      	blx	r3
	usb_init();
    2986:	4b03      	ldr	r3, [pc, #12]	; (2994 <atmel_start_init+0x18>)
    2988:	4798      	blx	r3
    298a:	bd08      	pop	{r3, pc}
    298c:	00002cb5 	.word	0x00002cb5
    2990:	00002f0d 	.word	0x00002f0d
    2994:	00005f45 	.word	0x00005f45

00002998 <EVENT_SYSTEM_0_init>:
struct timer_descriptor      TIMER_0;
struct spi_m_sync_descriptor SPI_1;
struct spi_m_sync_descriptor SPI_DISPLAY;

void EVENT_SYSTEM_0_init(void)
{
    2998:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    299a:	2240      	movs	r2, #64	; 0x40
    299c:	4b05      	ldr	r3, [pc, #20]	; (29b4 <EVENT_SYSTEM_0_init+0x1c>)
    299e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    29a2:	4a05      	ldr	r2, [pc, #20]	; (29b8 <EVENT_SYSTEM_0_init+0x20>)
    29a4:	6993      	ldr	r3, [r2, #24]
    29a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    29aa:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    29ac:	4b03      	ldr	r3, [pc, #12]	; (29bc <EVENT_SYSTEM_0_init+0x24>)
    29ae:	4798      	blx	r3
    29b0:	bd08      	pop	{r3, pc}
    29b2:	bf00      	nop
    29b4:	40001c00 	.word	0x40001c00
    29b8:	40000800 	.word	0x40000800
    29bc:	00002ff1 	.word	0x00002ff1

000029c0 <SPI_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29c0:	4b2d      	ldr	r3, [pc, #180]	; (2a78 <SPI_1_PORT_init+0xb8>)
    29c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    29c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    29d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    29d6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    29da:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29de:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    29e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    29e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29ea:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    29ee:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    29f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    29f6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    29fa:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29fe:	f44f 7200 	mov.w	r2, #512	; 0x200
    2a02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a0a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2a0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2a12:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a16:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a1e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a22:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a26:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2a2a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2a2e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a32:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a3e:	4a0f      	ldr	r2, [pc, #60]	; (2a7c <SPI_1_PORT_init+0xbc>)
    2a40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2a44:	4a0e      	ldr	r2, [pc, #56]	; (2a80 <SPI_1_PORT_init+0xc0>)
    2a46:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2a4a:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
    2a4e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2a52:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a56:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a5e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a62:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a66:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2a6a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2a6e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a72:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
    2a76:	4770      	bx	lr
    2a78:	41008000 	.word	0x41008000
    2a7c:	40024000 	.word	0x40024000
    2a80:	c0020000 	.word	0xc0020000

00002a84 <SPI_1_CLOCK_init>:
    2a84:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <SPI_1_CLOCK_init+0x1c>)
    2a86:	2240      	movs	r2, #64	; 0x40
    2a88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    2a8c:	2243      	movs	r2, #67	; 0x43
    2a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2a92:	4a04      	ldr	r2, [pc, #16]	; (2aa4 <SPI_1_CLOCK_init+0x20>)
    2a94:	6a13      	ldr	r3, [r2, #32]
    2a96:	f043 0301 	orr.w	r3, r3, #1
    2a9a:	6213      	str	r3, [r2, #32]
    2a9c:	4770      	bx	lr
    2a9e:	bf00      	nop
    2aa0:	40001c00 	.word	0x40001c00
    2aa4:	40000800 	.word	0x40000800

00002aa8 <SPI_1_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_1_init(void)
{
    2aa8:	b508      	push	{r3, lr}
	SPI_1_CLOCK_init();
    2aaa:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <SPI_1_init+0x18>)
    2aac:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM4);
    2aae:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2ab2:	4804      	ldr	r0, [pc, #16]	; (2ac4 <SPI_1_init+0x1c>)
    2ab4:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <SPI_1_init+0x20>)
    2ab6:	4798      	blx	r3
	SPI_1_PORT_init();
    2ab8:	4b04      	ldr	r3, [pc, #16]	; (2acc <SPI_1_init+0x24>)
    2aba:	4798      	blx	r3
    2abc:	bd08      	pop	{r3, pc}
    2abe:	bf00      	nop
    2ac0:	00002a85 	.word	0x00002a85
    2ac4:	20000dd8 	.word	0x20000dd8
    2ac8:	0000305d 	.word	0x0000305d
    2acc:	000029c1 	.word	0x000029c1

00002ad0 <SPI_DISPLAY_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ad0:	4b2d      	ldr	r3, [pc, #180]	; (2b88 <SPI_DISPLAY_PORT_init+0xb8>)
    2ad2:	2210      	movs	r2, #16
    2ad4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ad8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2adc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2ae0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2ae4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2ae8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2aec:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
    2af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2af4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2af8:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2afc:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2b00:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2b04:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b08:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b0c:	2220      	movs	r2, #32
    2b0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b16:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2b1a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2b1e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b22:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b2a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b2e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b32:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2b36:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2b3a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b3e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b42:	2280      	movs	r2, #128	; 0x80
    2b44:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2b4c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2b50:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2b54:	4a0d      	ldr	r2, [pc, #52]	; (2b8c <SPI_DISPLAY_PORT_init+0xbc>)
    2b56:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b5a:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
    2b5e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2b62:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b66:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b6e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b72:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b76:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2b7a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2b7e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b82:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    2b86:	4770      	bx	lr
    2b88:	41008000 	.word	0x41008000
    2b8c:	c0020000 	.word	0xc0020000

00002b90 <SPI_DISPLAY_CLOCK_init>:
    2b90:	4b05      	ldr	r3, [pc, #20]	; (2ba8 <SPI_DISPLAY_CLOCK_init+0x18>)
    2b92:	2240      	movs	r2, #64	; 0x40
    2b94:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2b98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2b9c:	4a03      	ldr	r2, [pc, #12]	; (2bac <SPI_DISPLAY_CLOCK_init+0x1c>)
    2b9e:	6a13      	ldr	r3, [r2, #32]
    2ba0:	f043 0304 	orr.w	r3, r3, #4
    2ba4:	6213      	str	r3, [r2, #32]
    2ba6:	4770      	bx	lr
    2ba8:	40001c00 	.word	0x40001c00
    2bac:	40000800 	.word	0x40000800

00002bb0 <SPI_DISPLAY_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_DISPLAY_init(void)
{
    2bb0:	b508      	push	{r3, lr}
	SPI_DISPLAY_CLOCK_init();
    2bb2:	4b04      	ldr	r3, [pc, #16]	; (2bc4 <SPI_DISPLAY_init+0x14>)
    2bb4:	4798      	blx	r3
	spi_m_sync_init(&SPI_DISPLAY, SERCOM6);
    2bb6:	4904      	ldr	r1, [pc, #16]	; (2bc8 <SPI_DISPLAY_init+0x18>)
    2bb8:	4804      	ldr	r0, [pc, #16]	; (2bcc <SPI_DISPLAY_init+0x1c>)
    2bba:	4b05      	ldr	r3, [pc, #20]	; (2bd0 <SPI_DISPLAY_init+0x20>)
    2bbc:	4798      	blx	r3
	SPI_DISPLAY_PORT_init();
    2bbe:	4b05      	ldr	r3, [pc, #20]	; (2bd4 <SPI_DISPLAY_init+0x24>)
    2bc0:	4798      	blx	r3
    2bc2:	bd08      	pop	{r3, pc}
    2bc4:	00002b91 	.word	0x00002b91
    2bc8:	43000800 	.word	0x43000800
    2bcc:	20000df0 	.word	0x20000df0
    2bd0:	0000305d 	.word	0x0000305d
    2bd4:	00002ad1 	.word	0x00002ad1

00002bd8 <delay_driver_init>:
}

void delay_driver_init(void)
{
    2bd8:	b508      	push	{r3, lr}
	delay_init(SysTick);
    2bda:	4802      	ldr	r0, [pc, #8]	; (2be4 <delay_driver_init+0xc>)
    2bdc:	4b02      	ldr	r3, [pc, #8]	; (2be8 <delay_driver_init+0x10>)
    2bde:	4798      	blx	r3
    2be0:	bd08      	pop	{r3, pc}
    2be2:	bf00      	nop
    2be4:	e000e010 	.word	0xe000e010
    2be8:	00002f9d 	.word	0x00002f9d

00002bec <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2bec:	4b1e      	ldr	r3, [pc, #120]	; (2c68 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    2bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2bf2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2bf8:	6299      	str	r1, [r3, #40]	; 0x28
    2bfa:	481c      	ldr	r0, [pc, #112]	; (2c6c <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    2bfc:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bfe:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2c00:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    2c04:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2c08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c0c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c14:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c1c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2c20:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2c24:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    2c30:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c32:	6299      	str	r1, [r3, #40]	; 0x28
    2c34:	490e      	ldr	r1, [pc, #56]	; (2c70 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    2c36:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c38:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2c3a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    2c3e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2c42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c46:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c4e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c56:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2c5a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2c5e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    2c66:	4770      	bx	lr
    2c68:	41008000 	.word	0x41008000
    2c6c:	c0000100 	.word	0xc0000100
    2c70:	c0000200 	.word	0xc0000200

00002c74 <USB_DEVICE_INSTANCE_CLOCK_init>:
    2c74:	2244      	movs	r2, #68	; 0x44
    2c76:	4b07      	ldr	r3, [pc, #28]	; (2c94 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    2c78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2c7c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    2c80:	691a      	ldr	r2, [r3, #16]
    2c82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2c86:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2c88:	699a      	ldr	r2, [r3, #24]
    2c8a:	f042 0201 	orr.w	r2, r2, #1
    2c8e:	619a      	str	r2, [r3, #24]
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop
    2c94:	40001c00 	.word	0x40001c00

00002c98 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
    2c98:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    2c9a:	4b03      	ldr	r3, [pc, #12]	; (2ca8 <USB_DEVICE_INSTANCE_init+0x10>)
    2c9c:	4798      	blx	r3
	usb_d_init();
    2c9e:	4b03      	ldr	r3, [pc, #12]	; (2cac <USB_DEVICE_INSTANCE_init+0x14>)
    2ca0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    2ca2:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <USB_DEVICE_INSTANCE_init+0x18>)
    2ca4:	4798      	blx	r3
    2ca6:	bd08      	pop	{r3, pc}
    2ca8:	00002c75 	.word	0x00002c75
    2cac:	0000361d 	.word	0x0000361d
    2cb0:	00002bed 	.word	0x00002bed

00002cb4 <system_init>:
}

void system_init(void)
{
    2cb4:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2cb6:	4b81      	ldr	r3, [pc, #516]	; (2ebc <system_init+0x208>)
    2cb8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cba:	4b81      	ldr	r3, [pc, #516]	; (2ec0 <system_init+0x20c>)
    2cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2cc0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ccc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2cd0:	497c      	ldr	r1, [pc, #496]	; (2ec4 <system_init+0x210>)
    2cd2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cd6:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cda:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cde:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2ce6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cea:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2cf2:	4975      	ldr	r1, [pc, #468]	; (2ec8 <system_init+0x214>)
    2cf4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cf8:	f893 10dd 	ldrb.w	r1, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cfc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d00:	f883 10dd 	strb.w	r1, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d04:	2102      	movs	r1, #2
    2d06:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d0a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d0e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2d12:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    2d16:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2d1a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d1e:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d22:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d26:	f883 0141 	strb.w	r0, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d2a:	2004      	movs	r0, #4
    2d2c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d30:	4c66      	ldr	r4, [pc, #408]	; (2ecc <system_init+0x218>)
    2d32:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    2d36:	4d66      	ldr	r5, [pc, #408]	; (2ed0 <system_init+0x21c>)
    2d38:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d3c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2d40:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
    2d44:	4304      	orrs	r4, r0
    2d46:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d4a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d4e:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d52:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d56:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d5a:	2008      	movs	r0, #8
    2d5c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d60:	4c5c      	ldr	r4, [pc, #368]	; (2ed4 <system_init+0x220>)
    2d62:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    2d66:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d6a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2d6e:	f893 4143 	ldrb.w	r4, [r3, #323]	; 0x143
    2d72:	f044 0404 	orr.w	r4, r4, #4
    2d76:	f883 4143 	strb.w	r4, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d7a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d7e:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d82:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d86:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    2d8e:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d92:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d96:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    2d9a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    2d9e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2da2:	f893 014e 	ldrb.w	r0, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    2da6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2daa:	f883 014e 	strb.w	r0, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2db2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2db6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2dba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2dbe:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    2dc2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2dc6:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dca:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dce:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2dd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2dda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2dde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2de2:	483d      	ldr	r0, [pc, #244]	; (2ed8 <system_init+0x224>)
    2de4:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2de8:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dec:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2df0:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2df4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2df8:	4838      	ldr	r0, [pc, #224]	; (2edc <system_init+0x228>)
    2dfa:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    2dfe:	4838      	ldr	r0, [pc, #224]	; (2ee0 <system_init+0x22c>)
    2e00:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2e04:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2e08:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
    2e0c:	f040 0004 	orr.w	r0, r0, #4
    2e10:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e18:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e1c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e20:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e24:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    2e28:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e2c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e30:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2e34:	f102 2280 	add.w	r2, r2, #2147516416	; 0x80008000
    2e38:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e3c:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e44:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2e4c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e50:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2e58:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    2e5c:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e60:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e68:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2e70:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e74:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e78:	4c1a      	ldr	r4, [pc, #104]	; (2ee4 <system_init+0x230>)
    2e7a:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
    2e7e:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e82:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e8a:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
    2e8e:	4b16      	ldr	r3, [pc, #88]	; (2ee8 <system_init+0x234>)
    2e90:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2e92:	6963      	ldr	r3, [r4, #20]
    2e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2e98:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    2e9a:	4b14      	ldr	r3, [pc, #80]	; (2eec <system_init+0x238>)
    2e9c:	4798      	blx	r3
    2e9e:	4602      	mov	r2, r0
    2ea0:	4913      	ldr	r1, [pc, #76]	; (2ef0 <system_init+0x23c>)
    2ea2:	4814      	ldr	r0, [pc, #80]	; (2ef4 <system_init+0x240>)
    2ea4:	4b14      	ldr	r3, [pc, #80]	; (2ef8 <system_init+0x244>)
    2ea6:	4798      	blx	r3

	TIMER_0_init();

	SPI_1_init();
    2ea8:	4b14      	ldr	r3, [pc, #80]	; (2efc <system_init+0x248>)
    2eaa:	4798      	blx	r3

	SPI_DISPLAY_init();
    2eac:	4b14      	ldr	r3, [pc, #80]	; (2f00 <system_init+0x24c>)
    2eae:	4798      	blx	r3

	delay_driver_init();
    2eb0:	4b14      	ldr	r3, [pc, #80]	; (2f04 <system_init+0x250>)
    2eb2:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    2eb4:	4b14      	ldr	r3, [pc, #80]	; (2f08 <system_init+0x254>)
    2eb6:	4798      	blx	r3
    2eb8:	bd38      	pop	{r3, r4, r5, pc}
    2eba:	bf00      	nop
    2ebc:	00003a35 	.word	0x00003a35
    2ec0:	41008000 	.word	0x41008000
    2ec4:	c0001000 	.word	0xc0001000
    2ec8:	c0002000 	.word	0xc0002000
    2ecc:	40020004 	.word	0x40020004
    2ed0:	c0020000 	.word	0xc0020000
    2ed4:	40020008 	.word	0x40020008
    2ed8:	c0000004 	.word	0xc0000004
    2edc:	40020000 	.word	0x40020000
    2ee0:	c0024000 	.word	0xc0024000
    2ee4:	40000800 	.word	0x40000800
    2ee8:	00002999 	.word	0x00002999
    2eec:	00003d21 	.word	0x00003d21
    2ef0:	40002400 	.word	0x40002400
    2ef4:	20000e08 	.word	0x20000e08
    2ef8:	000032b9 	.word	0x000032b9
    2efc:	00002aa9 	.word	0x00002aa9
    2f00:	00002bb1 	.word	0x00002bb1
    2f04:	00002bd9 	.word	0x00002bd9
    2f08:	00002c99 	.word	0x00002c99

00002f0c <gfx_mono_init>:

/**
 * \brief Initialize GFX Mono library
 */
void gfx_mono_init(void)
{
    2f0c:	b530      	push	{r4, r5, lr}
    2f0e:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f10:	4b12      	ldr	r3, [pc, #72]	; (2f5c <gfx_mono_init+0x50>)
    2f12:	2201      	movs	r2, #1
    2f14:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f16:	4812      	ldr	r0, [pc, #72]	; (2f60 <gfx_mono_init+0x54>)
    2f18:	6298      	str	r0, [r3, #40]	; 0x28
    2f1a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2f1e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f20:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f22:	6298      	str	r0, [r3, #40]	; 0x28
    2f24:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f26:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f28:	6298      	str	r0, [r3, #40]	; 0x28
    2f2a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f2c:	619a      	str	r2, [r3, #24]
    2f2e:	619a      	str	r2, [r3, #24]
    2f30:	619a      	str	r2, [r3, #24]
	gpio_set_pin_direction(CONTROLLER_INSTANCE_RES_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CONTROLLER_INSTANCE_DC_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(CONTROLLER_INSTANCE_CS_PIN, true);
	gpio_set_pin_level(CONTROLLER_INSTANCE_RES_PIN, true);
	gpio_set_pin_level(CONTROLLER_INSTANCE_DC_PIN, true);
	ug2832hsweg04_construct(&DISPLAY_INSTANCE_0_c12832a1z_desc.parent,
    2f32:	490c      	ldr	r1, [pc, #48]	; (2f64 <gfx_mono_init+0x58>)
    2f34:	f501 7500 	add.w	r5, r1, #512	; 0x200
    2f38:	2300      	movs	r3, #0
    2f3a:	9301      	str	r3, [sp, #4]
    2f3c:	9300      	str	r3, [sp, #0]
    2f3e:	4a0a      	ldr	r2, [pc, #40]	; (2f68 <gfx_mono_init+0x5c>)
    2f40:	4628      	mov	r0, r5
    2f42:	4c0a      	ldr	r4, [pc, #40]	; (2f6c <gfx_mono_init+0x60>)
    2f44:	47a0      	blx	r4
	                        DISPLAY_INSTANCE_0_buffer,
	                        &SPI_DISPLAY.io,
	                        CONTROLLER_INSTANCE_CS_PIN,
	                        CONTROLLER_INSTANCE_RES_PIN,
	                        CONTROLLER_INSTANCE_DC_PIN);
	gfx_mono_construct(&PRIMITIVES_INSTANCE_desc, &DISPLAY_INSTANCE_0_c12832a1z_desc.parent);
    2f46:	4c0a      	ldr	r4, [pc, #40]	; (2f70 <gfx_mono_init+0x64>)
    2f48:	4629      	mov	r1, r5
    2f4a:	4620      	mov	r0, r4
    2f4c:	4b09      	ldr	r3, [pc, #36]	; (2f74 <gfx_mono_init+0x68>)
    2f4e:	4798      	blx	r3
	gfx_mono_text_construct(&MONOCHROME_TEXT_0_desc, &PRIMITIVES_INSTANCE_desc);
    2f50:	4621      	mov	r1, r4
    2f52:	4809      	ldr	r0, [pc, #36]	; (2f78 <gfx_mono_init+0x6c>)
    2f54:	4b09      	ldr	r3, [pc, #36]	; (2f7c <gfx_mono_init+0x70>)
    2f56:	4798      	blx	r3
}
    2f58:	b003      	add	sp, #12
    2f5a:	bd30      	pop	{r4, r5, pc}
    2f5c:	41008000 	.word	0x41008000
    2f60:	40000001 	.word	0x40000001
    2f64:	2000087c 	.word	0x2000087c
    2f68:	20000dfc 	.word	0x20000dfc
    2f6c:	00005ff9 	.word	0x00005ff9
    2f70:	20000e28 	.word	0x20000e28
    2f74:	00006255 	.word	0x00006255
    2f78:	20000e24 	.word	0x20000e24
    2f7c:	00006259 	.word	0x00006259

00002f80 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f80:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2f84:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2f86:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2f88:	f3bf 8f5f 	dmb	sy
    2f8c:	4770      	bx	lr

00002f8e <atomic_leave_critical>:
    2f8e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2f92:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2f94:	f383 8810 	msr	PRIMASK, r3
    2f98:	4770      	bx	lr
	...

00002f9c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2f9c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    2f9e:	4b02      	ldr	r3, [pc, #8]	; (2fa8 <delay_init+0xc>)
    2fa0:	6018      	str	r0, [r3, #0]
    2fa2:	4b02      	ldr	r3, [pc, #8]	; (2fac <delay_init+0x10>)
    2fa4:	4798      	blx	r3
    2fa6:	bd08      	pop	{r3, pc}
    2fa8:	20000aa4 	.word	0x20000aa4
    2fac:	000040a5 	.word	0x000040a5

00002fb0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2fb0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2fb2:	4b04      	ldr	r3, [pc, #16]	; (2fc4 <delay_us+0x14>)
    2fb4:	681c      	ldr	r4, [r3, #0]
    2fb6:	4b04      	ldr	r3, [pc, #16]	; (2fc8 <delay_us+0x18>)
    2fb8:	4798      	blx	r3
    2fba:	4601      	mov	r1, r0
    2fbc:	4620      	mov	r0, r4
    2fbe:	4b03      	ldr	r3, [pc, #12]	; (2fcc <delay_us+0x1c>)
    2fc0:	4798      	blx	r3
    2fc2:	bd10      	pop	{r4, pc}
    2fc4:	20000aa4 	.word	0x20000aa4
    2fc8:	00003a11 	.word	0x00003a11
    2fcc:	000040b9 	.word	0x000040b9

00002fd0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2fd0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2fd2:	4b04      	ldr	r3, [pc, #16]	; (2fe4 <delay_ms+0x14>)
    2fd4:	681c      	ldr	r4, [r3, #0]
    2fd6:	4b04      	ldr	r3, [pc, #16]	; (2fe8 <delay_ms+0x18>)
    2fd8:	4798      	blx	r3
    2fda:	4601      	mov	r1, r0
    2fdc:	4620      	mov	r0, r4
    2fde:	4b03      	ldr	r3, [pc, #12]	; (2fec <delay_ms+0x1c>)
    2fe0:	4798      	blx	r3
    2fe2:	bd10      	pop	{r4, pc}
    2fe4:	20000aa4 	.word	0x20000aa4
    2fe8:	00003a29 	.word	0x00003a29
    2fec:	000040b9 	.word	0x000040b9

00002ff0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2ff0:	b508      	push	{r3, lr}
	return _event_system_init();
    2ff2:	4b01      	ldr	r3, [pc, #4]	; (2ff8 <event_system_init+0x8>)
    2ff4:	4798      	blx	r3
}
    2ff6:	bd08      	pop	{r3, pc}
    2ff8:	00003a99 	.word	0x00003a99

00002ffc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2ffc:	b570      	push	{r4, r5, r6, lr}
    2ffe:	460d      	mov	r5, r1
    3000:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    3002:	4604      	mov	r4, r0
    3004:	b160      	cbz	r0, 3020 <io_write+0x24>
    3006:	1c08      	adds	r0, r1, #0
    3008:	bf18      	it	ne
    300a:	2001      	movne	r0, #1
    300c:	2234      	movs	r2, #52	; 0x34
    300e:	4905      	ldr	r1, [pc, #20]	; (3024 <io_write+0x28>)
    3010:	4b05      	ldr	r3, [pc, #20]	; (3028 <io_write+0x2c>)
    3012:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    3014:	6823      	ldr	r3, [r4, #0]
    3016:	4632      	mov	r2, r6
    3018:	4629      	mov	r1, r5
    301a:	4620      	mov	r0, r4
    301c:	4798      	blx	r3
}
    301e:	bd70      	pop	{r4, r5, r6, pc}
    3020:	2000      	movs	r0, #0
    3022:	e7f3      	b.n	300c <io_write+0x10>
    3024:	00007340 	.word	0x00007340
    3028:	00003969 	.word	0x00003969

0000302c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    302c:	b570      	push	{r4, r5, r6, lr}
    302e:	460d      	mov	r5, r1
    3030:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    3032:	4604      	mov	r4, r0
    3034:	b160      	cbz	r0, 3050 <io_read+0x24>
    3036:	1c08      	adds	r0, r1, #0
    3038:	bf18      	it	ne
    303a:	2001      	movne	r0, #1
    303c:	223d      	movs	r2, #61	; 0x3d
    303e:	4905      	ldr	r1, [pc, #20]	; (3054 <io_read+0x28>)
    3040:	4b05      	ldr	r3, [pc, #20]	; (3058 <io_read+0x2c>)
    3042:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    3044:	6863      	ldr	r3, [r4, #4]
    3046:	4632      	mov	r2, r6
    3048:	4629      	mov	r1, r5
    304a:	4620      	mov	r0, r4
    304c:	4798      	blx	r3
}
    304e:	bd70      	pop	{r4, r5, r6, pc}
    3050:	2000      	movs	r0, #0
    3052:	e7f3      	b.n	303c <io_read+0x10>
    3054:	00007340 	.word	0x00007340
    3058:	00003969 	.word	0x00003969

0000305c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    305c:	b538      	push	{r3, r4, r5, lr}
    305e:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    3060:	4604      	mov	r4, r0
    3062:	b1b8      	cbz	r0, 3094 <spi_m_sync_init+0x38>
    3064:	1c08      	adds	r0, r1, #0
    3066:	bf18      	it	ne
    3068:	2001      	movne	r0, #1
    306a:	2240      	movs	r2, #64	; 0x40
    306c:	490a      	ldr	r1, [pc, #40]	; (3098 <spi_m_sync_init+0x3c>)
    306e:	4b0b      	ldr	r3, [pc, #44]	; (309c <spi_m_sync_init+0x40>)
    3070:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3072:	4620      	mov	r0, r4
    3074:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3078:	4629      	mov	r1, r5
    307a:	4b09      	ldr	r3, [pc, #36]	; (30a0 <spi_m_sync_init+0x44>)
    307c:	4798      	blx	r3

	if (rc < 0) {
    307e:	2800      	cmp	r0, #0
    3080:	db07      	blt.n	3092 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3086:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3088:	4b06      	ldr	r3, [pc, #24]	; (30a4 <spi_m_sync_init+0x48>)
    308a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    308c:	4b06      	ldr	r3, [pc, #24]	; (30a8 <spi_m_sync_init+0x4c>)
    308e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    3090:	2000      	movs	r0, #0
}
    3092:	bd38      	pop	{r3, r4, r5, pc}
    3094:	2000      	movs	r0, #0
    3096:	e7e8      	b.n	306a <spi_m_sync_init+0xe>
    3098:	00007354 	.word	0x00007354
    309c:	00003969 	.word	0x00003969
    30a0:	00003dd5 	.word	0x00003dd5
    30a4:	00003179 	.word	0x00003179
    30a8:	0000313d 	.word	0x0000313d

000030ac <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    30ac:	b510      	push	{r4, lr}
	ASSERT(spi);
    30ae:	4604      	mov	r4, r0
    30b0:	2257      	movs	r2, #87	; 0x57
    30b2:	4905      	ldr	r1, [pc, #20]	; (30c8 <spi_m_sync_enable+0x1c>)
    30b4:	3000      	adds	r0, #0
    30b6:	bf18      	it	ne
    30b8:	2001      	movne	r0, #1
    30ba:	4b04      	ldr	r3, [pc, #16]	; (30cc <spi_m_sync_enable+0x20>)
    30bc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    30be:	1d20      	adds	r0, r4, #4
    30c0:	4b03      	ldr	r3, [pc, #12]	; (30d0 <spi_m_sync_enable+0x24>)
    30c2:	4798      	blx	r3
    30c4:	bd10      	pop	{r4, pc}
    30c6:	bf00      	nop
    30c8:	00007354 	.word	0x00007354
    30cc:	00003969 	.word	0x00003969
    30d0:	00003f65 	.word	0x00003f65

000030d4 <spi_m_sync_disable>:
}

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    30d4:	b510      	push	{r4, lr}
	ASSERT(spi);
    30d6:	4604      	mov	r4, r0
    30d8:	225d      	movs	r2, #93	; 0x5d
    30da:	4905      	ldr	r1, [pc, #20]	; (30f0 <spi_m_sync_disable+0x1c>)
    30dc:	3000      	adds	r0, #0
    30de:	bf18      	it	ne
    30e0:	2001      	movne	r0, #1
    30e2:	4b04      	ldr	r3, [pc, #16]	; (30f4 <spi_m_sync_disable+0x20>)
    30e4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    30e6:	1d20      	adds	r0, r4, #4
    30e8:	4b03      	ldr	r3, [pc, #12]	; (30f8 <spi_m_sync_disable+0x24>)
    30ea:	4798      	blx	r3
    30ec:	bd10      	pop	{r4, pc}
    30ee:	bf00      	nop
    30f0:	00007354 	.word	0x00007354
    30f4:	00003969 	.word	0x00003969
    30f8:	00003f95 	.word	0x00003f95

000030fc <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    30fc:	b530      	push	{r4, r5, lr}
    30fe:	b085      	sub	sp, #20
    3100:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3102:	4605      	mov	r5, r0
    3104:	b190      	cbz	r0, 312c <spi_m_sync_transfer+0x30>
    3106:	1c08      	adds	r0, r1, #0
    3108:	bf18      	it	ne
    310a:	2001      	movne	r0, #1
    310c:	22b3      	movs	r2, #179	; 0xb3
    310e:	4908      	ldr	r1, [pc, #32]	; (3130 <spi_m_sync_transfer+0x34>)
    3110:	4b08      	ldr	r3, [pc, #32]	; (3134 <spi_m_sync_transfer+0x38>)
    3112:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3114:	6823      	ldr	r3, [r4, #0]
    3116:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    3118:	6863      	ldr	r3, [r4, #4]
    311a:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    311c:	68a3      	ldr	r3, [r4, #8]
    311e:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3120:	a901      	add	r1, sp, #4
    3122:	1d28      	adds	r0, r5, #4
    3124:	4b04      	ldr	r3, [pc, #16]	; (3138 <spi_m_sync_transfer+0x3c>)
    3126:	4798      	blx	r3
}
    3128:	b005      	add	sp, #20
    312a:	bd30      	pop	{r4, r5, pc}
    312c:	2000      	movs	r0, #0
    312e:	e7ed      	b.n	310c <spi_m_sync_transfer+0x10>
    3130:	00007354 	.word	0x00007354
    3134:	00003969 	.word	0x00003969
    3138:	00003fc5 	.word	0x00003fc5

0000313c <_spi_m_sync_io_write>:
{
    313c:	b570      	push	{r4, r5, r6, lr}
    313e:	b084      	sub	sp, #16
    3140:	460e      	mov	r6, r1
    3142:	4615      	mov	r5, r2
	ASSERT(io);
    3144:	4604      	mov	r4, r0
    3146:	22a3      	movs	r2, #163	; 0xa3
    3148:	4908      	ldr	r1, [pc, #32]	; (316c <_spi_m_sync_io_write+0x30>)
    314a:	3000      	adds	r0, #0
    314c:	bf18      	it	ne
    314e:	2001      	movne	r0, #1
    3150:	4b07      	ldr	r3, [pc, #28]	; (3170 <_spi_m_sync_io_write+0x34>)
    3152:	4798      	blx	r3
	xfer.rxbuf = 0;
    3154:	2300      	movs	r3, #0
    3156:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    3158:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    315a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    315c:	a901      	add	r1, sp, #4
    315e:	f1a4 000c 	sub.w	r0, r4, #12
    3162:	4b04      	ldr	r3, [pc, #16]	; (3174 <_spi_m_sync_io_write+0x38>)
    3164:	4798      	blx	r3
}
    3166:	b004      	add	sp, #16
    3168:	bd70      	pop	{r4, r5, r6, pc}
    316a:	bf00      	nop
    316c:	00007354 	.word	0x00007354
    3170:	00003969 	.word	0x00003969
    3174:	000030fd 	.word	0x000030fd

00003178 <_spi_m_sync_io_read>:
{
    3178:	b570      	push	{r4, r5, r6, lr}
    317a:	b084      	sub	sp, #16
    317c:	460e      	mov	r6, r1
    317e:	4615      	mov	r5, r2
	ASSERT(io);
    3180:	4604      	mov	r4, r0
    3182:	2287      	movs	r2, #135	; 0x87
    3184:	4908      	ldr	r1, [pc, #32]	; (31a8 <_spi_m_sync_io_read+0x30>)
    3186:	3000      	adds	r0, #0
    3188:	bf18      	it	ne
    318a:	2001      	movne	r0, #1
    318c:	4b07      	ldr	r3, [pc, #28]	; (31ac <_spi_m_sync_io_read+0x34>)
    318e:	4798      	blx	r3
	xfer.rxbuf = buf;
    3190:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    3192:	2300      	movs	r3, #0
    3194:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    3196:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    3198:	a901      	add	r1, sp, #4
    319a:	f1a4 000c 	sub.w	r0, r4, #12
    319e:	4b04      	ldr	r3, [pc, #16]	; (31b0 <_spi_m_sync_io_read+0x38>)
    31a0:	4798      	blx	r3
}
    31a2:	b004      	add	sp, #16
    31a4:	bd70      	pop	{r4, r5, r6, pc}
    31a6:	bf00      	nop
    31a8:	00007354 	.word	0x00007354
    31ac:	00003969 	.word	0x00003969
    31b0:	000030fd 	.word	0x000030fd

000031b4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    31b4:	b538      	push	{r3, r4, r5, lr}
    31b6:	460d      	mov	r5, r1
	ASSERT(spi && io);
    31b8:	4604      	mov	r4, r0
    31ba:	b150      	cbz	r0, 31d2 <spi_m_sync_get_io_descriptor+0x1e>
    31bc:	1c08      	adds	r0, r1, #0
    31be:	bf18      	it	ne
    31c0:	2001      	movne	r0, #1
    31c2:	22bd      	movs	r2, #189	; 0xbd
    31c4:	4904      	ldr	r1, [pc, #16]	; (31d8 <spi_m_sync_get_io_descriptor+0x24>)
    31c6:	4b05      	ldr	r3, [pc, #20]	; (31dc <spi_m_sync_get_io_descriptor+0x28>)
    31c8:	4798      	blx	r3
	*io = &spi->io;
    31ca:	340c      	adds	r4, #12
    31cc:	602c      	str	r4, [r5, #0]
	return 0;
}
    31ce:	2000      	movs	r0, #0
    31d0:	bd38      	pop	{r3, r4, r5, pc}
    31d2:	2000      	movs	r0, #0
    31d4:	e7f5      	b.n	31c2 <spi_m_sync_get_io_descriptor+0xe>
    31d6:	bf00      	nop
    31d8:	00007354 	.word	0x00007354
    31dc:	00003969 	.word	0x00003969

000031e0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    31e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31e2:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    31e4:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    31e6:	b12f      	cbz	r7, 31f4 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    31e8:	688d      	ldr	r5, [r1, #8]
    31ea:	463c      	mov	r4, r7
    31ec:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    31ee:	f1c2 0e01 	rsb	lr, r2, #1
    31f2:	e00b      	b.n	320c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    31f4:	4b0e      	ldr	r3, [pc, #56]	; (3230 <timer_add_timer_task+0x50>)
    31f6:	4798      	blx	r3
		return;
    31f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    31fa:	4473      	add	r3, lr
    31fc:	68a0      	ldr	r0, [r4, #8]
    31fe:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    3200:	42ab      	cmp	r3, r5
    3202:	d20a      	bcs.n	321a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    3204:	6823      	ldr	r3, [r4, #0]
    3206:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3208:	b153      	cbz	r3, 3220 <timer_add_timer_task+0x40>
    320a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    320c:	6863      	ldr	r3, [r4, #4]
    320e:	4293      	cmp	r3, r2
    3210:	d8f3      	bhi.n	31fa <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    3212:	68a0      	ldr	r0, [r4, #8]
    3214:	4403      	add	r3, r0
    3216:	1a9b      	subs	r3, r3, r2
    3218:	e7f2      	b.n	3200 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    321a:	42a7      	cmp	r7, r4
    321c:	d004      	beq.n	3228 <timer_add_timer_task+0x48>
    321e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    3220:	4620      	mov	r0, r4
    3222:	4b04      	ldr	r3, [pc, #16]	; (3234 <timer_add_timer_task+0x54>)
    3224:	4798      	blx	r3
    3226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    3228:	4660      	mov	r0, ip
    322a:	4b01      	ldr	r3, [pc, #4]	; (3230 <timer_add_timer_task+0x50>)
    322c:	4798      	blx	r3
    322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3230:	00003991 	.word	0x00003991
    3234:	000039bd 	.word	0x000039bd

00003238 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    323c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    323e:	6907      	ldr	r7, [r0, #16]
    3240:	3701      	adds	r7, #1
    3242:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3244:	7e03      	ldrb	r3, [r0, #24]
    3246:	f013 0f01 	tst.w	r3, #1
    324a:	d113      	bne.n	3274 <timer_process_counted+0x3c>
    324c:	7e03      	ldrb	r3, [r0, #24]
    324e:	f013 0f02 	tst.w	r3, #2
    3252:	d10f      	bne.n	3274 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    3254:	b354      	cbz	r4, 32ac <timer_process_counted+0x74>
    3256:	6863      	ldr	r3, [r4, #4]
    3258:	1afb      	subs	r3, r7, r3
    325a:	68a2      	ldr	r2, [r4, #8]
    325c:	4293      	cmp	r3, r2
    325e:	d307      	bcc.n	3270 <timer_process_counted+0x38>
    3260:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    3262:	f100 0814 	add.w	r8, r0, #20
    3266:	f8df 9048 	ldr.w	r9, [pc, #72]	; 32b0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    326a:	f8df a048 	ldr.w	sl, [pc, #72]	; 32b4 <timer_process_counted+0x7c>
    326e:	e012      	b.n	3296 <timer_process_counted+0x5e>
    3270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3274:	7e03      	ldrb	r3, [r0, #24]
    3276:	f043 0302 	orr.w	r3, r3, #2
    327a:	7603      	strb	r3, [r0, #24]
		return;
    327c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3280:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    3282:	68e3      	ldr	r3, [r4, #12]
    3284:	4620      	mov	r0, r4
    3286:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3288:	b185      	cbz	r5, 32ac <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    328a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    328c:	686b      	ldr	r3, [r5, #4]
    328e:	1afb      	subs	r3, r7, r3
    3290:	68aa      	ldr	r2, [r5, #8]
    3292:	4293      	cmp	r3, r2
    3294:	d30a      	bcc.n	32ac <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    3296:	4640      	mov	r0, r8
    3298:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    329a:	7c23      	ldrb	r3, [r4, #16]
    329c:	2b01      	cmp	r3, #1
    329e:	d1ef      	bne.n	3280 <timer_process_counted+0x48>
			tmp->time_label = time;
    32a0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    32a2:	463a      	mov	r2, r7
    32a4:	4621      	mov	r1, r4
    32a6:	4640      	mov	r0, r8
    32a8:	47d0      	blx	sl
    32aa:	e7e9      	b.n	3280 <timer_process_counted+0x48>
    32ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32b0:	00003a05 	.word	0x00003a05
    32b4:	000031e1 	.word	0x000031e1

000032b8 <timer_init>:
{
    32b8:	b538      	push	{r3, r4, r5, lr}
    32ba:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    32bc:	4604      	mov	r4, r0
    32be:	b178      	cbz	r0, 32e0 <timer_init+0x28>
    32c0:	1c08      	adds	r0, r1, #0
    32c2:	bf18      	it	ne
    32c4:	2001      	movne	r0, #1
    32c6:	223b      	movs	r2, #59	; 0x3b
    32c8:	4906      	ldr	r1, [pc, #24]	; (32e4 <timer_init+0x2c>)
    32ca:	4b07      	ldr	r3, [pc, #28]	; (32e8 <timer_init+0x30>)
    32cc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    32ce:	4629      	mov	r1, r5
    32d0:	4620      	mov	r0, r4
    32d2:	4b06      	ldr	r3, [pc, #24]	; (32ec <timer_init+0x34>)
    32d4:	4798      	blx	r3
	descr->time                           = 0;
    32d6:	2000      	movs	r0, #0
    32d8:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    32da:	4b05      	ldr	r3, [pc, #20]	; (32f0 <timer_init+0x38>)
    32dc:	6023      	str	r3, [r4, #0]
}
    32de:	bd38      	pop	{r3, r4, r5, pc}
    32e0:	2000      	movs	r0, #0
    32e2:	e7f0      	b.n	32c6 <timer_init+0xe>
    32e4:	00007370 	.word	0x00007370
    32e8:	00003969 	.word	0x00003969
    32ec:	00003c9d 	.word	0x00003c9d
    32f0:	00003239 	.word	0x00003239

000032f4 <timer_set_clock_cycles_per_tick>:
{
    32f4:	b538      	push	{r3, r4, r5, lr}
    32f6:	460d      	mov	r5, r1
	ASSERT(descr);
    32f8:	4604      	mov	r4, r0
    32fa:	226f      	movs	r2, #111	; 0x6f
    32fc:	4905      	ldr	r1, [pc, #20]	; (3314 <timer_set_clock_cycles_per_tick+0x20>)
    32fe:	3000      	adds	r0, #0
    3300:	bf18      	it	ne
    3302:	2001      	movne	r0, #1
    3304:	4b04      	ldr	r3, [pc, #16]	; (3318 <timer_set_clock_cycles_per_tick+0x24>)
    3306:	4798      	blx	r3
	_timer_set_period(&descr->device, clock_cycles);
    3308:	4629      	mov	r1, r5
    330a:	4620      	mov	r0, r4
    330c:	4b03      	ldr	r3, [pc, #12]	; (331c <timer_set_clock_cycles_per_tick+0x28>)
    330e:	4798      	blx	r3
}
    3310:	2000      	movs	r0, #0
    3312:	bd38      	pop	{r3, r4, r5, pc}
    3314:	00007370 	.word	0x00007370
    3318:	00003969 	.word	0x00003969
    331c:	00003d11 	.word	0x00003d11

00003320 <timer_add_task>:
{
    3320:	b570      	push	{r4, r5, r6, lr}
    3322:	b082      	sub	sp, #8
    3324:	460d      	mov	r5, r1
	ASSERT(descr && task);
    3326:	4604      	mov	r4, r0
    3328:	b318      	cbz	r0, 3372 <timer_add_task+0x52>
    332a:	1c08      	adds	r0, r1, #0
    332c:	bf18      	it	ne
    332e:	2001      	movne	r0, #1
    3330:	227a      	movs	r2, #122	; 0x7a
    3332:	491e      	ldr	r1, [pc, #120]	; (33ac <timer_add_task+0x8c>)
    3334:	4b1e      	ldr	r3, [pc, #120]	; (33b0 <timer_add_task+0x90>)
    3336:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3338:	7e23      	ldrb	r3, [r4, #24]
    333a:	f043 0301 	orr.w	r3, r3, #1
    333e:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    3340:	f104 0614 	add.w	r6, r4, #20
    3344:	4629      	mov	r1, r5
    3346:	4630      	mov	r0, r6
    3348:	4b1a      	ldr	r3, [pc, #104]	; (33b4 <timer_add_task+0x94>)
    334a:	4798      	blx	r3
    334c:	b998      	cbnz	r0, 3376 <timer_add_task+0x56>
	task->time_label = descr->time;
    334e:	6923      	ldr	r3, [r4, #16]
    3350:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3352:	6922      	ldr	r2, [r4, #16]
    3354:	4629      	mov	r1, r5
    3356:	4630      	mov	r0, r6
    3358:	4b17      	ldr	r3, [pc, #92]	; (33b8 <timer_add_task+0x98>)
    335a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    335c:	7e23      	ldrb	r3, [r4, #24]
    335e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3362:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3364:	7e23      	ldrb	r3, [r4, #24]
    3366:	f013 0f02 	tst.w	r3, #2
    336a:	d110      	bne.n	338e <timer_add_task+0x6e>
	return ERR_NONE;
    336c:	2000      	movs	r0, #0
}
    336e:	b002      	add	sp, #8
    3370:	bd70      	pop	{r4, r5, r6, pc}
    3372:	2000      	movs	r0, #0
    3374:	e7dc      	b.n	3330 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3376:	7e23      	ldrb	r3, [r4, #24]
    3378:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    337c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    337e:	227f      	movs	r2, #127	; 0x7f
    3380:	490a      	ldr	r1, [pc, #40]	; (33ac <timer_add_task+0x8c>)
    3382:	2000      	movs	r0, #0
    3384:	4b0a      	ldr	r3, [pc, #40]	; (33b0 <timer_add_task+0x90>)
    3386:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3388:	f06f 0011 	mvn.w	r0, #17
    338c:	e7ef      	b.n	336e <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    338e:	a801      	add	r0, sp, #4
    3390:	4b0a      	ldr	r3, [pc, #40]	; (33bc <timer_add_task+0x9c>)
    3392:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3394:	7e23      	ldrb	r3, [r4, #24]
    3396:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    339a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    339c:	4620      	mov	r0, r4
    339e:	4b08      	ldr	r3, [pc, #32]	; (33c0 <timer_add_task+0xa0>)
    33a0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    33a2:	a801      	add	r0, sp, #4
    33a4:	4b07      	ldr	r3, [pc, #28]	; (33c4 <timer_add_task+0xa4>)
    33a6:	4798      	blx	r3
	return ERR_NONE;
    33a8:	2000      	movs	r0, #0
    33aa:	e7e0      	b.n	336e <timer_add_task+0x4e>
    33ac:	00007370 	.word	0x00007370
    33b0:	00003969 	.word	0x00003969
    33b4:	0000396f 	.word	0x0000396f
    33b8:	000031e1 	.word	0x000031e1
    33bc:	00002f81 	.word	0x00002f81
    33c0:	00003d1f 	.word	0x00003d1f
    33c4:	00002f8f 	.word	0x00002f8f

000033c8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    33c8:	4b0f      	ldr	r3, [pc, #60]	; (3408 <_usb_d_find_ep+0x40>)
    33ca:	7859      	ldrb	r1, [r3, #1]
    33cc:	4288      	cmp	r0, r1
    33ce:	d018      	beq.n	3402 <_usb_d_find_ep+0x3a>
{
    33d0:	b430      	push	{r4, r5}
    33d2:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    33d4:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    33d6:	f000 050f 	and.w	r5, r0, #15
    33da:	e007      	b.n	33ec <_usb_d_find_ep+0x24>
    33dc:	3301      	adds	r3, #1
    33de:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33e0:	2b04      	cmp	r3, #4
    33e2:	d009      	beq.n	33f8 <_usb_d_find_ep+0x30>
    33e4:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    33e6:	7851      	ldrb	r1, [r2, #1]
    33e8:	4281      	cmp	r1, r0
    33ea:	d007      	beq.n	33fc <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    33ec:	7814      	ldrb	r4, [r2, #0]
    33ee:	2c00      	cmp	r4, #0
    33f0:	d1f4      	bne.n	33dc <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    33f2:	428d      	cmp	r5, r1
    33f4:	d1f2      	bne.n	33dc <_usb_d_find_ep+0x14>
    33f6:	e001      	b.n	33fc <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    33f8:	f04f 33ff 	mov.w	r3, #4294967295
}
    33fc:	4618      	mov	r0, r3
    33fe:	bc30      	pop	{r4, r5}
    3400:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3402:	2300      	movs	r3, #0
}
    3404:	4618      	mov	r0, r3
    3406:	4770      	bx	lr
    3408:	20000aa8 	.word	0x20000aa8

0000340c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    340c:	2000      	movs	r0, #0
    340e:	4770      	bx	lr

00003410 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3410:	b538      	push	{r3, r4, r5, lr}
    3412:	4604      	mov	r4, r0
    3414:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    3416:	4b09      	ldr	r3, [pc, #36]	; (343c <usb_d_cb_trans_more+0x2c>)
    3418:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    341a:	4b09      	ldr	r3, [pc, #36]	; (3440 <usb_d_cb_trans_more+0x30>)
    341c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    3420:	789b      	ldrb	r3, [r3, #2]
    3422:	2b03      	cmp	r3, #3
    3424:	d001      	beq.n	342a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    3426:	2000      	movs	r0, #0
}
    3428:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    342a:	4b05      	ldr	r3, [pc, #20]	; (3440 <usb_d_cb_trans_more+0x30>)
    342c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3430:	6983      	ldr	r3, [r0, #24]
    3432:	4629      	mov	r1, r5
    3434:	4620      	mov	r0, r4
    3436:	4798      	blx	r3
    3438:	bd38      	pop	{r3, r4, r5, pc}
    343a:	bf00      	nop
    343c:	000033c9 	.word	0x000033c9
    3440:	20000aa8 	.word	0x20000aa8

00003444 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3444:	b5f0      	push	{r4, r5, r6, r7, lr}
    3446:	b085      	sub	sp, #20
    3448:	4606      	mov	r6, r0
    344a:	460d      	mov	r5, r1
    344c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    344e:	4b4d      	ldr	r3, [pc, #308]	; (3584 <_usb_d_cb_trans_done+0x140>)
    3450:	4798      	blx	r3
    3452:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    3454:	2d00      	cmp	r5, #0
    3456:	d15b      	bne.n	3510 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3458:	4a4b      	ldr	r2, [pc, #300]	; (3588 <_usb_d_cb_trans_done+0x144>)
    345a:	0143      	lsls	r3, r0, #5
    345c:	18d1      	adds	r1, r2, r3
    345e:	2000      	movs	r0, #0
    3460:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3462:	5cd3      	ldrb	r3, [r2, r3]
    3464:	b173      	cbz	r3, 3484 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3466:	4b48      	ldr	r3, [pc, #288]	; (3588 <_usb_d_cb_trans_done+0x144>)
    3468:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    346c:	2201      	movs	r2, #1
    346e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3470:	4845      	ldr	r0, [pc, #276]	; (3588 <_usb_d_cb_trans_done+0x144>)
    3472:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    3476:	69c3      	ldr	r3, [r0, #28]
    3478:	463a      	mov	r2, r7
    347a:	78c1      	ldrb	r1, [r0, #3]
    347c:	4630      	mov	r0, r6
    347e:	4798      	blx	r3
}
    3480:	b005      	add	sp, #20
    3482:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    3484:	788b      	ldrb	r3, [r1, #2]
    3486:	2b03      	cmp	r3, #3
    3488:	d00b      	beq.n	34a2 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    348a:	483f      	ldr	r0, [pc, #252]	; (3588 <_usb_d_cb_trans_done+0x144>)
    348c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    3490:	4614      	mov	r4, r2
    3492:	69d3      	ldr	r3, [r2, #28]
    3494:	320c      	adds	r2, #12
    3496:	2100      	movs	r1, #0
    3498:	7860      	ldrb	r0, [r4, #1]
    349a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    349c:	2302      	movs	r3, #2
    349e:	70a3      	strb	r3, [r4, #2]
    34a0:	e7ee      	b.n	3480 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    34a2:	460b      	mov	r3, r1
    34a4:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    34a8:	460a      	mov	r2, r1
    34aa:	69ce      	ldr	r6, [r1, #28]
    34ac:	320c      	adds	r2, #12
    34ae:	2101      	movs	r1, #1
    34b0:	7858      	ldrb	r0, [r3, #1]
    34b2:	47b0      	blx	r6
		if (err) {
    34b4:	b1a0      	cbz	r0, 34e0 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    34b6:	4b34      	ldr	r3, [pc, #208]	; (3588 <_usb_d_cb_trans_done+0x144>)
    34b8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    34bc:	2205      	movs	r2, #5
    34be:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    34c0:	2202      	movs	r2, #2
    34c2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    34c4:	2d00      	cmp	r5, #0
    34c6:	db09      	blt.n	34dc <_usb_d_cb_trans_done+0x98>
    34c8:	482f      	ldr	r0, [pc, #188]	; (3588 <_usb_d_cb_trans_done+0x144>)
    34ca:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    34ce:	7840      	ldrb	r0, [r0, #1]
    34d0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    34d4:	2101      	movs	r1, #1
    34d6:	4b2d      	ldr	r3, [pc, #180]	; (358c <_usb_d_cb_trans_done+0x148>)
    34d8:	4798      	blx	r3
    34da:	e7d1      	b.n	3480 <_usb_d_cb_trans_done+0x3c>
    34dc:	7858      	ldrb	r0, [r3, #1]
    34de:	e7f9      	b.n	34d4 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    34e0:	4829      	ldr	r0, [pc, #164]	; (3588 <_usb_d_cb_trans_done+0x144>)
    34e2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    34e6:	2304      	movs	r3, #4
    34e8:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    34ea:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    34ec:	2200      	movs	r2, #0
    34ee:	9201      	str	r2, [sp, #4]
    34f0:	9202      	str	r2, [sp, #8]
    34f2:	4295      	cmp	r5, r2
    34f4:	bfac      	ite	ge
    34f6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    34fa:	f003 030f 	andlt.w	r3, r3, #15
    34fe:	f88d 300c 	strb.w	r3, [sp, #12]
    3502:	2301      	movs	r3, #1
    3504:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    3508:	a801      	add	r0, sp, #4
    350a:	4b21      	ldr	r3, [pc, #132]	; (3590 <_usb_d_cb_trans_done+0x14c>)
    350c:	4798      	blx	r3
    350e:	e7b7      	b.n	3480 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    3510:	2d01      	cmp	r5, #1
    3512:	d00a      	beq.n	352a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    3514:	2d02      	cmp	r5, #2
    3516:	d01c      	beq.n	3552 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    3518:	2d03      	cmp	r5, #3
    351a:	d02a      	beq.n	3572 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    351c:	4b1a      	ldr	r3, [pc, #104]	; (3588 <_usb_d_cb_trans_done+0x144>)
    351e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    3522:	2206      	movs	r2, #6
    3524:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3526:	70da      	strb	r2, [r3, #3]
    3528:	e7a2      	b.n	3470 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    352a:	4a17      	ldr	r2, [pc, #92]	; (3588 <_usb_d_cb_trans_done+0x144>)
    352c:	0143      	lsls	r3, r0, #5
    352e:	18d1      	adds	r1, r2, r3
    3530:	2002      	movs	r0, #2
    3532:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3534:	5cd3      	ldrb	r3, [r2, r3]
    3536:	b12b      	cbz	r3, 3544 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3538:	4b13      	ldr	r3, [pc, #76]	; (3588 <_usb_d_cb_trans_done+0x144>)
    353a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    353e:	2205      	movs	r2, #5
    3540:	709a      	strb	r2, [r3, #2]
    3542:	e795      	b.n	3470 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3544:	460b      	mov	r3, r1
    3546:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3548:	2100      	movs	r1, #0
    354a:	4630      	mov	r0, r6
    354c:	4b0f      	ldr	r3, [pc, #60]	; (358c <_usb_d_cb_trans_done+0x148>)
    354e:	4798      	blx	r3
    3550:	e78e      	b.n	3470 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3552:	4a0d      	ldr	r2, [pc, #52]	; (3588 <_usb_d_cb_trans_done+0x144>)
    3554:	0143      	lsls	r3, r0, #5
    3556:	18d1      	adds	r1, r2, r3
    3558:	2004      	movs	r0, #4
    355a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    355c:	5cd3      	ldrb	r3, [r2, r3]
    355e:	b12b      	cbz	r3, 356c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3560:	4b09      	ldr	r3, [pc, #36]	; (3588 <_usb_d_cb_trans_done+0x144>)
    3562:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3566:	2201      	movs	r2, #1
    3568:	709a      	strb	r2, [r3, #2]
    356a:	e781      	b.n	3470 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    356c:	2302      	movs	r3, #2
    356e:	708b      	strb	r3, [r1, #2]
			return;
    3570:	e786      	b.n	3480 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3572:	4b05      	ldr	r3, [pc, #20]	; (3588 <_usb_d_cb_trans_done+0x144>)
    3574:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    3578:	2200      	movs	r2, #0
    357a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    357c:	2205      	movs	r2, #5
    357e:	70da      	strb	r2, [r3, #3]
    3580:	e776      	b.n	3470 <_usb_d_cb_trans_done+0x2c>
    3582:	bf00      	nop
    3584:	000033c9 	.word	0x000033c9
    3588:	20000aa8 	.word	0x20000aa8
    358c:	00004f95 	.word	0x00004f95
    3590:	0000513d 	.word	0x0000513d

00003594 <usb_d_cb_trans_setup>:
{
    3594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3598:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    359a:	4b1c      	ldr	r3, [pc, #112]	; (360c <usb_d_cb_trans_setup+0x78>)
    359c:	4798      	blx	r3
    359e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    35a0:	4c1b      	ldr	r4, [pc, #108]	; (3610 <usb_d_cb_trans_setup+0x7c>)
    35a2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    35a6:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    35a8:	4621      	mov	r1, r4
    35aa:	4628      	mov	r0, r5
    35ac:	4b19      	ldr	r3, [pc, #100]	; (3614 <usb_d_cb_trans_setup+0x80>)
    35ae:	4798      	blx	r3
	if (n != 8) {
    35b0:	b2c0      	uxtb	r0, r0
    35b2:	2808      	cmp	r0, #8
    35b4:	d009      	beq.n	35ca <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    35b6:	2101      	movs	r1, #1
    35b8:	4628      	mov	r0, r5
    35ba:	4c17      	ldr	r4, [pc, #92]	; (3618 <usb_d_cb_trans_setup+0x84>)
    35bc:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    35be:	2101      	movs	r1, #1
    35c0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    35c4:	47a0      	blx	r4
		return;
    35c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    35ca:	2100      	movs	r1, #0
    35cc:	4628      	mov	r0, r5
    35ce:	4f12      	ldr	r7, [pc, #72]	; (3618 <usb_d_cb_trans_setup+0x84>)
    35d0:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    35d2:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    35d6:	2100      	movs	r1, #0
    35d8:	4640      	mov	r0, r8
    35da:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    35dc:	4b0c      	ldr	r3, [pc, #48]	; (3610 <usb_d_cb_trans_setup+0x7c>)
    35de:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    35e2:	2201      	movs	r2, #1
    35e4:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    35e6:	695b      	ldr	r3, [r3, #20]
    35e8:	4621      	mov	r1, r4
    35ea:	4628      	mov	r0, r5
    35ec:	4798      	blx	r3
    35ee:	b108      	cbz	r0, 35f4 <usb_d_cb_trans_setup+0x60>
    35f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    35f4:	4b06      	ldr	r3, [pc, #24]	; (3610 <usb_d_cb_trans_setup+0x7c>)
    35f6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    35fa:	2305      	movs	r3, #5
    35fc:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    35fe:	2101      	movs	r1, #1
    3600:	4628      	mov	r0, r5
    3602:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3604:	2101      	movs	r1, #1
    3606:	4640      	mov	r0, r8
    3608:	47b8      	blx	r7
    360a:	e7f1      	b.n	35f0 <usb_d_cb_trans_setup+0x5c>
    360c:	000033c9 	.word	0x000033c9
    3610:	20000aa8 	.word	0x20000aa8
    3614:	000050dd 	.word	0x000050dd
    3618:	00004f95 	.word	0x00004f95

0000361c <usb_d_init>:

int32_t usb_d_init(void)
{
    361c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    361e:	4b11      	ldr	r3, [pc, #68]	; (3664 <usb_d_init+0x48>)
    3620:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    3622:	2800      	cmp	r0, #0
    3624:	db1c      	blt.n	3660 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3626:	4c10      	ldr	r4, [pc, #64]	; (3668 <usb_d_init+0x4c>)
    3628:	2280      	movs	r2, #128	; 0x80
    362a:	2100      	movs	r1, #0
    362c:	4620      	mov	r0, r4
    362e:	4b0f      	ldr	r3, [pc, #60]	; (366c <usb_d_init+0x50>)
    3630:	4798      	blx	r3
    3632:	4623      	mov	r3, r4
    3634:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3638:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    363a:	4a0d      	ldr	r2, [pc, #52]	; (3670 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    363c:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    363e:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3640:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3642:	61da      	str	r2, [r3, #28]
    3644:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3646:	4283      	cmp	r3, r0
    3648:	d1f8      	bne.n	363c <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    364a:	490a      	ldr	r1, [pc, #40]	; (3674 <usb_d_init+0x58>)
    364c:	2000      	movs	r0, #0
    364e:	4c0a      	ldr	r4, [pc, #40]	; (3678 <usb_d_init+0x5c>)
    3650:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3652:	490a      	ldr	r1, [pc, #40]	; (367c <usb_d_init+0x60>)
    3654:	2001      	movs	r0, #1
    3656:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3658:	4909      	ldr	r1, [pc, #36]	; (3680 <usb_d_init+0x64>)
    365a:	2002      	movs	r0, #2
    365c:	47a0      	blx	r4
	return ERR_NONE;
    365e:	2000      	movs	r0, #0
}
    3660:	bd10      	pop	{r4, pc}
    3662:	bf00      	nop
    3664:	00004989 	.word	0x00004989
    3668:	20000aa8 	.word	0x20000aa8
    366c:	00006651 	.word	0x00006651
    3670:	0000340d 	.word	0x0000340d
    3674:	00003595 	.word	0x00003595
    3678:	00005341 	.word	0x00005341
    367c:	00003411 	.word	0x00003411
    3680:	00003445 	.word	0x00003445

00003684 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3684:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3686:	4b01      	ldr	r3, [pc, #4]	; (368c <usb_d_register_callback+0x8>)
    3688:	4798      	blx	r3
    368a:	bd08      	pop	{r3, pc}
    368c:	0000531d 	.word	0x0000531d

00003690 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    3690:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    3692:	4b01      	ldr	r3, [pc, #4]	; (3698 <usb_d_enable+0x8>)
    3694:	4798      	blx	r3
}
    3696:	bd08      	pop	{r3, pc}
    3698:	00004a85 	.word	0x00004a85

0000369c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    369c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    369e:	4b01      	ldr	r3, [pc, #4]	; (36a4 <usb_d_attach+0x8>)
    36a0:	4798      	blx	r3
    36a2:	bd08      	pop	{r3, pc}
    36a4:	00004af1 	.word	0x00004af1

000036a8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    36a8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    36aa:	4b01      	ldr	r3, [pc, #4]	; (36b0 <usb_d_set_address+0x8>)
    36ac:	4798      	blx	r3
    36ae:	bd08      	pop	{r3, pc}
    36b0:	00004b03 	.word	0x00004b03

000036b4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    36b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36b6:	4606      	mov	r6, r0
    36b8:	460c      	mov	r4, r1
    36ba:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    36bc:	4b0f      	ldr	r3, [pc, #60]	; (36fc <usb_d_ep_init+0x48>)
    36be:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    36c0:	2800      	cmp	r0, #0
    36c2:	da14      	bge.n	36ee <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    36c4:	20ff      	movs	r0, #255	; 0xff
    36c6:	4b0d      	ldr	r3, [pc, #52]	; (36fc <usb_d_ep_init+0x48>)
    36c8:	4798      	blx	r3
		if (ep_index < 0) {
    36ca:	1e05      	subs	r5, r0, #0
    36cc:	db12      	blt.n	36f4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    36ce:	463a      	mov	r2, r7
    36d0:	4621      	mov	r1, r4
    36d2:	4630      	mov	r0, r6
    36d4:	4b0a      	ldr	r3, [pc, #40]	; (3700 <usb_d_ep_init+0x4c>)
    36d6:	4798      	blx	r3
	if (rc < 0) {
    36d8:	2800      	cmp	r0, #0
    36da:	db0d      	blt.n	36f8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    36dc:	4b09      	ldr	r3, [pc, #36]	; (3704 <usb_d_ep_init+0x50>)
    36de:	0168      	lsls	r0, r5, #5
    36e0:	181a      	adds	r2, r3, r0
    36e2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    36e4:	f004 0403 	and.w	r4, r4, #3
    36e8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    36ea:	2000      	movs	r0, #0
    36ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    36ee:	f06f 0013 	mvn.w	r0, #19
    36f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    36f4:	f06f 0014 	mvn.w	r0, #20
}
    36f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36fa:	bf00      	nop
    36fc:	000033c9 	.word	0x000033c9
    3700:	00004b11 	.word	0x00004b11
    3704:	20000aa8 	.word	0x20000aa8

00003708 <usb_d_ep0_init>:
{
    3708:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    370a:	4602      	mov	r2, r0
    370c:	2100      	movs	r1, #0
    370e:	4608      	mov	r0, r1
    3710:	4b01      	ldr	r3, [pc, #4]	; (3718 <usb_d_ep0_init+0x10>)
    3712:	4798      	blx	r3
}
    3714:	bd08      	pop	{r3, pc}
    3716:	bf00      	nop
    3718:	000036b5 	.word	0x000036b5

0000371c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    371c:	b538      	push	{r3, r4, r5, lr}
    371e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    3720:	4b06      	ldr	r3, [pc, #24]	; (373c <usb_d_ep_deinit+0x20>)
    3722:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    3724:	1e04      	subs	r4, r0, #0
    3726:	db07      	blt.n	3738 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3728:	4628      	mov	r0, r5
    372a:	4b05      	ldr	r3, [pc, #20]	; (3740 <usb_d_ep_deinit+0x24>)
    372c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    372e:	4805      	ldr	r0, [pc, #20]	; (3744 <usb_d_ep_deinit+0x28>)
    3730:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    3734:	23ff      	movs	r3, #255	; 0xff
    3736:	7043      	strb	r3, [r0, #1]
    3738:	bd38      	pop	{r3, r4, r5, pc}
    373a:	bf00      	nop
    373c:	000033c9 	.word	0x000033c9
    3740:	00004c29 	.word	0x00004c29
    3744:	20000aa8 	.word	0x20000aa8

00003748 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3748:	b538      	push	{r3, r4, r5, lr}
    374a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    374c:	4b0e      	ldr	r3, [pc, #56]	; (3788 <usb_d_ep_enable+0x40>)
    374e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    3750:	1e04      	subs	r4, r0, #0
    3752:	db16      	blt.n	3782 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3754:	0163      	lsls	r3, r4, #5
    3756:	4a0d      	ldr	r2, [pc, #52]	; (378c <usb_d_ep_enable+0x44>)
    3758:	5cd3      	ldrb	r3, [r2, r3]
    375a:	2b00      	cmp	r3, #0
    375c:	bf0c      	ite	eq
    375e:	2202      	moveq	r2, #2
    3760:	2201      	movne	r2, #1
    3762:	4b0a      	ldr	r3, [pc, #40]	; (378c <usb_d_ep_enable+0x44>)
    3764:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3768:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    376a:	4628      	mov	r0, r5
    376c:	4b08      	ldr	r3, [pc, #32]	; (3790 <usb_d_ep_enable+0x48>)
    376e:	4798      	blx	r3
	if (rc < 0) {
    3770:	2800      	cmp	r0, #0
    3772:	db00      	blt.n	3776 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    3774:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3776:	4b05      	ldr	r3, [pc, #20]	; (378c <usb_d_ep_enable+0x44>)
    3778:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    377c:	2300      	movs	r3, #0
    377e:	70a3      	strb	r3, [r4, #2]
    3780:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    3782:	f06f 0011 	mvn.w	r0, #17
    3786:	e7f5      	b.n	3774 <usb_d_ep_enable+0x2c>
    3788:	000033c9 	.word	0x000033c9
    378c:	20000aa8 	.word	0x20000aa8
    3790:	00004ced 	.word	0x00004ced

00003794 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3798:	b086      	sub	sp, #24
    379a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    379c:	7a07      	ldrb	r7, [r0, #8]
    379e:	4638      	mov	r0, r7
    37a0:	4b3f      	ldr	r3, [pc, #252]	; (38a0 <usb_d_ep_transfer+0x10c>)
    37a2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    37a4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    37a6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    37aa:	1e06      	subs	r6, r0, #0
    37ac:	db72      	blt.n	3894 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    37ae:	a804      	add	r0, sp, #16
    37b0:	4b3c      	ldr	r3, [pc, #240]	; (38a4 <usb_d_ep_transfer+0x110>)
    37b2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    37b4:	4b3c      	ldr	r3, [pc, #240]	; (38a8 <usb_d_ep_transfer+0x114>)
    37b6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    37ba:	789b      	ldrb	r3, [r3, #2]
    37bc:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    37c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    37c4:	b2db      	uxtb	r3, r3
    37c6:	2b01      	cmp	r3, #1
    37c8:	d011      	beq.n	37ee <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    37ca:	a804      	add	r0, sp, #16
    37cc:	4b37      	ldr	r3, [pc, #220]	; (38ac <usb_d_ep_transfer+0x118>)
    37ce:	4798      	blx	r3
		switch (state) {
    37d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    37d4:	b2db      	uxtb	r3, r3
    37d6:	2b05      	cmp	r3, #5
    37d8:	d05f      	beq.n	389a <usb_d_ep_transfer+0x106>
    37da:	2b06      	cmp	r3, #6
    37dc:	d023      	beq.n	3826 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    37de:	2b00      	cmp	r3, #0
    37e0:	bf0c      	ite	eq
    37e2:	f06f 0012 	mvneq.w	r0, #18
    37e6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    37e8:	b006      	add	sp, #24
    37ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    37ee:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 38a8 <usb_d_ep_transfer+0x114>
    37f2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    37f6:	eb0a 0309 	add.w	r3, sl, r9
    37fa:	2203      	movs	r2, #3
    37fc:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    37fe:	a804      	add	r0, sp, #16
    3800:	4b2a      	ldr	r3, [pc, #168]	; (38ac <usb_d_ep_transfer+0x118>)
    3802:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3804:	f81a 3009 	ldrb.w	r3, [sl, r9]
    3808:	b183      	cbz	r3, 382c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    380a:	7a22      	ldrb	r2, [r4, #8]
    380c:	3500      	adds	r5, #0
    380e:	bf18      	it	ne
    3810:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    3812:	6823      	ldr	r3, [r4, #0]
    3814:	9301      	str	r3, [sp, #4]
    3816:	f8cd 8008 	str.w	r8, [sp, #8]
    381a:	f017 0f80 	tst.w	r7, #128	; 0x80
    381e:	d119      	bne.n	3854 <usb_d_ep_transfer+0xc0>
    3820:	f002 030f 	and.w	r3, r2, #15
    3824:	e018      	b.n	3858 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    3826:	f06f 000f 	mvn.w	r0, #15
    382a:	e7dd      	b.n	37e8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    382c:	4b1e      	ldr	r3, [pc, #120]	; (38a8 <usb_d_ep_transfer+0x114>)
    382e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    3832:	7cda      	ldrb	r2, [r3, #19]
    3834:	7c9d      	ldrb	r5, [r3, #18]
    3836:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    383a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    383c:	b9a5      	cbnz	r5, 3868 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    383e:	4b1a      	ldr	r3, [pc, #104]	; (38a8 <usb_d_ep_transfer+0x114>)
    3840:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3844:	2304      	movs	r3, #4
    3846:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    3848:	2300      	movs	r3, #0
			zlp                 = true;
    384a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    384c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    384e:	6821      	ldr	r1, [r4, #0]
    3850:	9101      	str	r1, [sp, #4]
    3852:	9302      	str	r3, [sp, #8]
    3854:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    3858:	f88d 300c 	strb.w	r3, [sp, #12]
    385c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    3860:	a801      	add	r0, sp, #4
    3862:	4b13      	ldr	r3, [pc, #76]	; (38b0 <usb_d_ep_transfer+0x11c>)
    3864:	4798      	blx	r3
	return rc;
    3866:	e7bf      	b.n	37e8 <usb_d_ep_transfer+0x54>
    3868:	4643      	mov	r3, r8
    386a:	45a8      	cmp	r8, r5
    386c:	bf28      	it	cs
    386e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3870:	4a0d      	ldr	r2, [pc, #52]	; (38a8 <usb_d_ep_transfer+0x114>)
    3872:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    3876:	f996 200c 	ldrsb.w	r2, [r6, #12]
    387a:	2a00      	cmp	r2, #0
    387c:	db05      	blt.n	388a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    387e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    3880:	6821      	ldr	r1, [r4, #0]
    3882:	9101      	str	r1, [sp, #4]
    3884:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3886:	2500      	movs	r5, #0
    3888:	e7ca      	b.n	3820 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    388a:	429d      	cmp	r5, r3
    388c:	bf94      	ite	ls
    388e:	2500      	movls	r5, #0
    3890:	2501      	movhi	r5, #1
    3892:	e7db      	b.n	384c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    3894:	f06f 0011 	mvn.w	r0, #17
    3898:	e7a6      	b.n	37e8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    389a:	2002      	movs	r0, #2
    389c:	e7a4      	b.n	37e8 <usb_d_ep_transfer+0x54>
    389e:	bf00      	nop
    38a0:	000033c9 	.word	0x000033c9
    38a4:	00002f81 	.word	0x00002f81
    38a8:	20000aa8 	.word	0x20000aa8
    38ac:	00002f8f 	.word	0x00002f8f
    38b0:	0000513d 	.word	0x0000513d

000038b4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    38b4:	b538      	push	{r3, r4, r5, lr}
    38b6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    38b8:	b141      	cbz	r1, 38cc <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    38ba:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    38bc:	bf0c      	ite	eq
    38be:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    38c0:	2102      	movne	r1, #2
    38c2:	4b13      	ldr	r3, [pc, #76]	; (3910 <usb_d_ep_halt+0x5c>)
    38c4:	4798      	blx	r3
    38c6:	4603      	mov	r3, r0
	}
}
    38c8:	4618      	mov	r0, r3
    38ca:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    38cc:	4b11      	ldr	r3, [pc, #68]	; (3914 <usb_d_ep_halt+0x60>)
    38ce:	4798      	blx	r3
	if (ep_index < 0) {
    38d0:	1e05      	subs	r5, r0, #0
    38d2:	db19      	blt.n	3908 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    38d4:	2102      	movs	r1, #2
    38d6:	4620      	mov	r0, r4
    38d8:	4b0d      	ldr	r3, [pc, #52]	; (3910 <usb_d_ep_halt+0x5c>)
    38da:	4798      	blx	r3
    38dc:	4603      	mov	r3, r0
    38de:	2800      	cmp	r0, #0
    38e0:	d0f2      	beq.n	38c8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    38e2:	2100      	movs	r1, #0
    38e4:	4620      	mov	r0, r4
    38e6:	4b0a      	ldr	r3, [pc, #40]	; (3910 <usb_d_ep_halt+0x5c>)
    38e8:	4798      	blx	r3
		if (rc < 0) {
    38ea:	1e03      	subs	r3, r0, #0
    38ec:	dbec      	blt.n	38c8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    38ee:	4b0a      	ldr	r3, [pc, #40]	; (3918 <usb_d_ep_halt+0x64>)
    38f0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    38f4:	2201      	movs	r2, #1
    38f6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    38f8:	2103      	movs	r1, #3
    38fa:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    38fc:	69db      	ldr	r3, [r3, #28]
    38fe:	2200      	movs	r2, #0
    3900:	4620      	mov	r0, r4
    3902:	4798      	blx	r3
	return ERR_NONE;
    3904:	2300      	movs	r3, #0
    3906:	e7df      	b.n	38c8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    3908:	f06f 0311 	mvn.w	r3, #17
    390c:	e7dc      	b.n	38c8 <usb_d_ep_halt+0x14>
    390e:	bf00      	nop
    3910:	00004f95 	.word	0x00004f95
    3914:	000033c9 	.word	0x000033c9
    3918:	20000aa8 	.word	0x20000aa8

0000391c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    391c:	b538      	push	{r3, r4, r5, lr}
    391e:	460d      	mov	r5, r1
    3920:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    3922:	4b0e      	ldr	r3, [pc, #56]	; (395c <usb_d_ep_register_callback+0x40>)
    3924:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3926:	4b0e      	ldr	r3, [pc, #56]	; (3960 <usb_d_ep_register_callback+0x44>)
    3928:	2c00      	cmp	r4, #0
    392a:	bf08      	it	eq
    392c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    392e:	2800      	cmp	r0, #0
    3930:	db13      	blt.n	395a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    3932:	2d01      	cmp	r5, #1
    3934:	d008      	beq.n	3948 <usb_d_ep_register_callback+0x2c>
    3936:	b115      	cbz	r5, 393e <usb_d_ep_register_callback+0x22>
    3938:	2d02      	cmp	r5, #2
    393a:	d00a      	beq.n	3952 <usb_d_ep_register_callback+0x36>
    393c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    393e:	4b09      	ldr	r3, [pc, #36]	; (3964 <usb_d_ep_register_callback+0x48>)
    3940:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3944:	6144      	str	r4, [r0, #20]
		break;
    3946:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3948:	4b06      	ldr	r3, [pc, #24]	; (3964 <usb_d_ep_register_callback+0x48>)
    394a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    394e:	6184      	str	r4, [r0, #24]
		break;
    3950:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3952:	4b04      	ldr	r3, [pc, #16]	; (3964 <usb_d_ep_register_callback+0x48>)
    3954:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3958:	61c4      	str	r4, [r0, #28]
    395a:	bd38      	pop	{r3, r4, r5, pc}
    395c:	000033c9 	.word	0x000033c9
    3960:	0000340d 	.word	0x0000340d
    3964:	20000aa8 	.word	0x20000aa8

00003968 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    3968:	b900      	cbnz	r0, 396c <assert+0x4>
		__asm("BKPT #0");
    396a:	be00      	bkpt	0x0000
    396c:	4770      	bx	lr

0000396e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    396e:	6803      	ldr	r3, [r0, #0]
    3970:	b14b      	cbz	r3, 3986 <is_list_element+0x18>
		if (it == element) {
    3972:	428b      	cmp	r3, r1
    3974:	d009      	beq.n	398a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	b11b      	cbz	r3, 3982 <is_list_element+0x14>
		if (it == element) {
    397a:	4299      	cmp	r1, r3
    397c:	d1fb      	bne.n	3976 <is_list_element+0x8>
			return true;
    397e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    3980:	4770      	bx	lr
	return false;
    3982:	2000      	movs	r0, #0
    3984:	4770      	bx	lr
    3986:	2000      	movs	r0, #0
    3988:	4770      	bx	lr
			return true;
    398a:	2001      	movs	r0, #1
    398c:	4770      	bx	lr
	...

00003990 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3990:	b538      	push	{r3, r4, r5, lr}
    3992:	4604      	mov	r4, r0
    3994:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    3996:	4b06      	ldr	r3, [pc, #24]	; (39b0 <list_insert_as_head+0x20>)
    3998:	4798      	blx	r3
    399a:	f080 0001 	eor.w	r0, r0, #1
    399e:	2239      	movs	r2, #57	; 0x39
    39a0:	4904      	ldr	r1, [pc, #16]	; (39b4 <list_insert_as_head+0x24>)
    39a2:	b2c0      	uxtb	r0, r0
    39a4:	4b04      	ldr	r3, [pc, #16]	; (39b8 <list_insert_as_head+0x28>)
    39a6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    39a8:	6823      	ldr	r3, [r4, #0]
    39aa:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    39ac:	6025      	str	r5, [r4, #0]
    39ae:	bd38      	pop	{r3, r4, r5, pc}
    39b0:	0000396f 	.word	0x0000396f
    39b4:	00007388 	.word	0x00007388
    39b8:	00003969 	.word	0x00003969

000039bc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    39bc:	6803      	ldr	r3, [r0, #0]
    39be:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    39c0:	6001      	str	r1, [r0, #0]
    39c2:	4770      	bx	lr

000039c4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    39c4:	b570      	push	{r4, r5, r6, lr}
    39c6:	4605      	mov	r5, r0
    39c8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    39ca:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    39cc:	4b0a      	ldr	r3, [pc, #40]	; (39f8 <list_insert_at_end+0x34>)
    39ce:	4798      	blx	r3
    39d0:	f080 0001 	eor.w	r0, r0, #1
    39d4:	224f      	movs	r2, #79	; 0x4f
    39d6:	4909      	ldr	r1, [pc, #36]	; (39fc <list_insert_at_end+0x38>)
    39d8:	b2c0      	uxtb	r0, r0
    39da:	4b09      	ldr	r3, [pc, #36]	; (3a00 <list_insert_at_end+0x3c>)
    39dc:	4798      	blx	r3

	if (!list->head) {
    39de:	682b      	ldr	r3, [r5, #0]
    39e0:	b91b      	cbnz	r3, 39ea <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    39e2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    39e4:	6033      	str	r3, [r6, #0]
		return;
    39e6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    39e8:	461c      	mov	r4, r3
	while (it->next) {
    39ea:	6823      	ldr	r3, [r4, #0]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d1fb      	bne.n	39e8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    39f0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    39f2:	6033      	str	r3, [r6, #0]
    39f4:	bd70      	pop	{r4, r5, r6, pc}
    39f6:	bf00      	nop
    39f8:	0000396f 	.word	0x0000396f
    39fc:	00007388 	.word	0x00007388
    3a00:	00003969 	.word	0x00003969

00003a04 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    3a04:	6803      	ldr	r3, [r0, #0]
    3a06:	b10b      	cbz	r3, 3a0c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    3a08:	681a      	ldr	r2, [r3, #0]
    3a0a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    3a0c:	4618      	mov	r0, r3
    3a0e:	4770      	bx	lr

00003a10 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    3a10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3a14:	00c0      	lsls	r0, r0, #3
    3a16:	3801      	subs	r0, #1
    3a18:	4b02      	ldr	r3, [pc, #8]	; (3a24 <_get_cycles_for_us+0x14>)
    3a1a:	fba3 3000 	umull	r3, r0, r3, r0
    3a1e:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3a20:	3001      	adds	r0, #1
    3a22:	4770      	bx	lr
    3a24:	cccccccd 	.word	0xcccccccd

00003a28 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3a28:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    3a2c:	fb03 f000 	mul.w	r0, r3, r0
    3a30:	4770      	bx	lr
	...

00003a34 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3a34:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3a36:	4a11      	ldr	r2, [pc, #68]	; (3a7c <_init_chip+0x48>)
    3a38:	8813      	ldrh	r3, [r2, #0]
    3a3a:	b29b      	uxth	r3, r3
    3a3c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3a3e:	4b10      	ldr	r3, [pc, #64]	; (3a80 <_init_chip+0x4c>)
    3a40:	4798      	blx	r3
	_oscctrl_init_sources();
    3a42:	4b10      	ldr	r3, [pc, #64]	; (3a84 <_init_chip+0x50>)
    3a44:	4798      	blx	r3
	_mclk_init();
    3a46:	4b10      	ldr	r3, [pc, #64]	; (3a88 <_init_chip+0x54>)
    3a48:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    3a4a:	4b10      	ldr	r3, [pc, #64]	; (3a8c <_init_chip+0x58>)
    3a4c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3a4e:	f640 70ff 	movw	r0, #4095	; 0xfff
    3a52:	4b0f      	ldr	r3, [pc, #60]	; (3a90 <_init_chip+0x5c>)
    3a54:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3a56:	4b0f      	ldr	r3, [pc, #60]	; (3a94 <_init_chip+0x60>)
    3a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    3a5c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    3a60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    3a64:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    3a68:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    3a6c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    3a70:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    3a74:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    3a78:	bd08      	pop	{r3, pc}
    3a7a:	bf00      	nop
    3a7c:	41004000 	.word	0x41004000
    3a80:	00003b79 	.word	0x00003b79
    3a84:	00003b99 	.word	0x00003b99
    3a88:	00003b6d 	.word	0x00003b6d
    3a8c:	00003bb5 	.word	0x00003bb5
    3a90:	00003af5 	.word	0x00003af5
    3a94:	41008000 	.word	0x41008000

00003a98 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    3a98:	b430      	push	{r4, r5}
    3a9a:	4814      	ldr	r0, [pc, #80]	; (3aec <_event_system_init+0x54>)
    3a9c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    3aa0:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    3aa2:	4c13      	ldr	r4, [pc, #76]	; (3af0 <_event_system_init+0x58>)
    3aa4:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    3aa6:	f813 1b01 	ldrb.w	r1, [r3], #1
    3aaa:	3248      	adds	r2, #72	; 0x48
    3aac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    3ab0:	42ab      	cmp	r3, r5
    3ab2:	d1f7      	bne.n	3aa4 <_event_system_init+0xc>
    3ab4:	480d      	ldr	r0, [pc, #52]	; (3aec <_event_system_init+0x54>)
    3ab6:	f100 0442 	add.w	r4, r0, #66	; 0x42
    3aba:	3080      	adds	r0, #128	; 0x80
    3abc:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    3abe:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3ac2:	00ca      	lsls	r2, r1, #3
    3ac4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3ac8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    3acc:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    3ace:	f850 3f04 	ldr.w	r3, [r0, #4]!
    3ad2:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    3ad4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    3ad8:	43db      	mvns	r3, r3
    3ada:	b2db      	uxtb	r3, r3
    3adc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3ae0:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    3ae2:	2920      	cmp	r1, #32
    3ae4:	d1eb      	bne.n	3abe <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    3ae6:	2000      	movs	r0, #0
    3ae8:	bc30      	pop	{r4, r5}
    3aea:	4770      	bx	lr
    3aec:	000073a8 	.word	0x000073a8
    3af0:	4100e000 	.word	0x4100e000

00003af4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3af4:	f010 0f01 	tst.w	r0, #1
    3af8:	d008      	beq.n	3b0c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3afa:	4a17      	ldr	r2, [pc, #92]	; (3b58 <_gclk_init_generators_by_fref+0x64>)
    3afc:	4b17      	ldr	r3, [pc, #92]	; (3b5c <_gclk_init_generators_by_fref+0x68>)
    3afe:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b00:	4619      	mov	r1, r3
    3b02:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b06:	684b      	ldr	r3, [r1, #4]
    3b08:	4213      	tst	r3, r2
    3b0a:	d1fc      	bne.n	3b06 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    3b0c:	f010 0f08 	tst.w	r0, #8
    3b10:	d008      	beq.n	3b24 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3b12:	4a13      	ldr	r2, [pc, #76]	; (3b60 <_gclk_init_generators_by_fref+0x6c>)
    3b14:	4b11      	ldr	r3, [pc, #68]	; (3b5c <_gclk_init_generators_by_fref+0x68>)
    3b16:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b18:	4619      	mov	r1, r3
    3b1a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b1e:	684b      	ldr	r3, [r1, #4]
    3b20:	4213      	tst	r3, r2
    3b22:	d1fc      	bne.n	3b1e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    3b24:	f010 0f10 	tst.w	r0, #16
    3b28:	d008      	beq.n	3b3c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3b2a:	4a0e      	ldr	r2, [pc, #56]	; (3b64 <_gclk_init_generators_by_fref+0x70>)
    3b2c:	4b0b      	ldr	r3, [pc, #44]	; (3b5c <_gclk_init_generators_by_fref+0x68>)
    3b2e:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b30:	4619      	mov	r1, r3
    3b32:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b36:	684b      	ldr	r3, [r1, #4]
    3b38:	4213      	tst	r3, r2
    3b3a:	d1fc      	bne.n	3b36 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    3b3c:	f410 6f00 	tst.w	r0, #2048	; 0x800
    3b40:	d008      	beq.n	3b54 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3b42:	4a09      	ldr	r2, [pc, #36]	; (3b68 <_gclk_init_generators_by_fref+0x74>)
    3b44:	4b05      	ldr	r3, [pc, #20]	; (3b5c <_gclk_init_generators_by_fref+0x68>)
    3b46:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b48:	4619      	mov	r1, r3
    3b4a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b4e:	684b      	ldr	r3, [r1, #4]
    3b50:	4213      	tst	r3, r2
    3b52:	d1fc      	bne.n	3b4e <_gclk_init_generators_by_fref+0x5a>
    3b54:	4770      	bx	lr
    3b56:	bf00      	nop
    3b58:	00010101 	.word	0x00010101
    3b5c:	40001c00 	.word	0x40001c00
    3b60:	00010105 	.word	0x00010105
    3b64:	00010106 	.word	0x00010106
    3b68:	00041104 	.word	0x00041104

00003b6c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    3b6c:	2201      	movs	r2, #1
    3b6e:	4b01      	ldr	r3, [pc, #4]	; (3b74 <_mclk_init+0x8>)
    3b70:	715a      	strb	r2, [r3, #5]
    3b72:	4770      	bx	lr
    3b74:	40000800 	.word	0x40000800

00003b78 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    3b78:	4b06      	ldr	r3, [pc, #24]	; (3b94 <_osc32kctrl_init_sources+0x1c>)
    3b7a:	f242 028e 	movw	r2, #8334	; 0x208e
    3b7e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    3b80:	2200      	movs	r2, #0
    3b82:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    3b84:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    3b86:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    3b88:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3b8c:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3b8e:	741a      	strb	r2, [r3, #16]
    3b90:	4770      	bx	lr
    3b92:	bf00      	nop
    3b94:	40001400 	.word	0x40001400

00003b98 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    3b98:	4a04      	ldr	r2, [pc, #16]	; (3bac <_oscctrl_init_sources+0x14>)
    3b9a:	4b05      	ldr	r3, [pc, #20]	; (3bb0 <_oscctrl_init_sources+0x18>)
    3b9c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    3b9e:	461a      	mov	r2, r3
    3ba0:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    3ba2:	f013 0f02 	tst.w	r3, #2
    3ba6:	d0fb      	beq.n	3ba0 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    3ba8:	4770      	bx	lr
    3baa:	bf00      	nop
    3bac:	03002606 	.word	0x03002606
    3bb0:	40001000 	.word	0x40001000

00003bb4 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3bb4:	4a36      	ldr	r2, [pc, #216]	; (3c90 <_oscctrl_init_referenced_generators+0xdc>)
    3bb6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3bb8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3bbc:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3bc0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3bc2:	4611      	mov	r1, r2
    3bc4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3bc8:	684b      	ldr	r3, [r1, #4]
    3bca:	4213      	tst	r3, r2
    3bcc:	d1fc      	bne.n	3bc8 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3bce:	4a30      	ldr	r2, [pc, #192]	; (3c90 <_oscctrl_init_referenced_generators+0xdc>)
    3bd0:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    3bd2:	f013 0f04 	tst.w	r3, #4
    3bd6:	d1fb      	bne.n	3bd0 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3bd8:	4b2e      	ldr	r3, [pc, #184]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3bda:	2200      	movs	r2, #0
    3bdc:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    3bde:	4a2e      	ldr	r2, [pc, #184]	; (3c98 <_oscctrl_init_referenced_generators+0xe4>)
    3be0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3be2:	461a      	mov	r2, r3
    3be4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    3be8:	f013 0f10 	tst.w	r3, #16
    3bec:	d1fa      	bne.n	3be4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3bee:	2200      	movs	r2, #0
    3bf0:	4b28      	ldr	r3, [pc, #160]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3bf2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3bf6:	461a      	mov	r2, r3
    3bf8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3bfc:	f013 0f04 	tst.w	r3, #4
    3c00:	d1fa      	bne.n	3bf8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3c02:	2202      	movs	r2, #2
    3c04:	4b23      	ldr	r3, [pc, #140]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3c06:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3c08:	461a      	mov	r2, r3
    3c0a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    3c0e:	f013 0f02 	tst.w	r3, #2
    3c12:	d1fa      	bne.n	3c0a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3c14:	4b1f      	ldr	r3, [pc, #124]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3c18:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3c1a:	461a      	mov	r2, r3
    3c1c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    3c20:	f013 0f08 	tst.w	r3, #8
    3c24:	d1fa      	bne.n	3c1c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3c26:	2219      	movs	r2, #25
    3c28:	4b1a      	ldr	r3, [pc, #104]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3c2a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3c2e:	461a      	mov	r2, r3
    3c30:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3c34:	f013 0f04 	tst.w	r3, #4
    3c38:	d1fa      	bne.n	3c30 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3c3a:	4b16      	ldr	r3, [pc, #88]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    3c40:	f013 0f01 	tst.w	r3, #1
    3c44:	d01d      	beq.n	3c82 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3c46:	4a13      	ldr	r2, [pc, #76]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3c48:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3c4a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    3c4e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3c52:	d1f9      	bne.n	3c48 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3c54:	4a0e      	ldr	r2, [pc, #56]	; (3c90 <_oscctrl_init_referenced_generators+0xdc>)
    3c56:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d1fc      	bne.n	3c56 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3c5c:	4a0c      	ldr	r2, [pc, #48]	; (3c90 <_oscctrl_init_referenced_generators+0xdc>)
    3c5e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3c60:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3c64:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3c68:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3c6a:	4611      	mov	r1, r2
    3c6c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3c70:	684b      	ldr	r3, [r1, #4]
    3c72:	4213      	tst	r3, r2
    3c74:	d1fc      	bne.n	3c70 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3c76:	4a06      	ldr	r2, [pc, #24]	; (3c90 <_oscctrl_init_referenced_generators+0xdc>)
    3c78:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    3c7a:	f013 0f04 	tst.w	r3, #4
    3c7e:	d1fb      	bne.n	3c78 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    3c80:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    3c82:	4a04      	ldr	r2, [pc, #16]	; (3c94 <_oscctrl_init_referenced_generators+0xe0>)
    3c84:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    3c86:	f413 7f80 	tst.w	r3, #256	; 0x100
    3c8a:	d0fb      	beq.n	3c84 <_oscctrl_init_referenced_generators+0xd0>
    3c8c:	e7e2      	b.n	3c54 <_oscctrl_init_referenced_generators+0xa0>
    3c8e:	bf00      	nop
    3c90:	40001c00 	.word	0x40001c00
    3c94:	40001000 	.word	0x40001000
    3c98:	0401bb80 	.word	0x0401bb80

00003c9c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    3c9c:	b538      	push	{r3, r4, r5, lr}
    3c9e:	460c      	mov	r4, r1
	ASSERT(dev);
    3ca0:	4605      	mov	r5, r0
    3ca2:	2230      	movs	r2, #48	; 0x30
    3ca4:	4917      	ldr	r1, [pc, #92]	; (3d04 <_timer_init+0x68>)
    3ca6:	3000      	adds	r0, #0
    3ca8:	bf18      	it	ne
    3caa:	2001      	movne	r0, #1
    3cac:	4b16      	ldr	r3, [pc, #88]	; (3d08 <_timer_init+0x6c>)
    3cae:	4798      	blx	r3

	dev->hw = hw;
    3cb0:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    3cb2:	2301      	movs	r3, #1
    3cb4:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3cb6:	f248 0203 	movw	r2, #32771	; 0x8003
    3cba:	6923      	ldr	r3, [r4, #16]
    3cbc:	4213      	tst	r3, r2
    3cbe:	d1fc      	bne.n	3cba <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    3cc0:	68ea      	ldr	r2, [r5, #12]
    3cc2:	6913      	ldr	r3, [r2, #16]
    3cc4:	f013 0f01 	tst.w	r3, #1
    3cc8:	d1fb      	bne.n	3cc2 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    3cca:	f44f 7380 	mov.w	r3, #256	; 0x100
    3cce:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    3cd0:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    3cd2:	f248 0380 	movw	r3, #32896	; 0x8080
    3cd6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3cd8:	f248 0103 	movw	r1, #32771	; 0x8003
    3cdc:	6913      	ldr	r3, [r2, #16]
    3cde:	420b      	tst	r3, r1
    3ce0:	d1fc      	bne.n	3cdc <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    3ce2:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    3ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3ce8:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3cea:	6913      	ldr	r3, [r2, #16]
    3cec:	f013 0f60 	tst.w	r3, #96	; 0x60
    3cf0:	d1fb      	bne.n	3cea <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    3cf2:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    3cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    3cf8:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    3cfa:	4b04      	ldr	r3, [pc, #16]	; (3d0c <_timer_init+0x70>)
    3cfc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    3cfe:	2000      	movs	r0, #0
    3d00:	bd38      	pop	{r3, r4, r5, pc}
    3d02:	bf00      	nop
    3d04:	000074ac 	.word	0x000074ac
    3d08:	00003969 	.word	0x00003969
    3d0c:	20000b28 	.word	0x20000b28

00003d10 <_timer_set_period>:
/**
 * \brief Set timer period
 */
void _timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    3d10:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    3d12:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3d14:	6913      	ldr	r3, [r2, #16]
    3d16:	f013 0f60 	tst.w	r3, #96	; 0x60
    3d1a:	d1fb      	bne.n	3d14 <_timer_set_period+0x4>
}
    3d1c:	4770      	bx	lr

00003d1e <_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
    3d1e:	4770      	bx	lr

00003d20 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    3d20:	2000      	movs	r0, #0
    3d22:	4770      	bx	lr

00003d24 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    3d24:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    3d26:	4b08      	ldr	r3, [pc, #32]	; (3d48 <RTC_Handler+0x24>)
    3d28:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    3d2a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    3d2c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    3d2e:	f413 7f80 	tst.w	r3, #256	; 0x100
    3d32:	d007      	beq.n	3d44 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    3d34:	6823      	ldr	r3, [r4, #0]
    3d36:	b10b      	cbz	r3, 3d3c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    3d38:	4620      	mov	r0, r4
    3d3a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    3d3c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    3d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    3d42:	819a      	strh	r2, [r3, #12]
    3d44:	bd10      	pop	{r4, pc}
    3d46:	bf00      	nop
    3d48:	20000b28 	.word	0x20000b28

00003d4c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3d4c:	b470      	push	{r4, r5, r6}
    3d4e:	b089      	sub	sp, #36	; 0x24
    3d50:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3d52:	466c      	mov	r4, sp
    3d54:	4d0d      	ldr	r5, [pc, #52]	; (3d8c <_sercom_get_hardware_index+0x40>)
    3d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3d5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3d62:	9b00      	ldr	r3, [sp, #0]
    3d64:	42b3      	cmp	r3, r6
    3d66:	d00d      	beq.n	3d84 <_sercom_get_hardware_index+0x38>
    3d68:	4631      	mov	r1, r6
    3d6a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d6c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3d6e:	f853 2b04 	ldr.w	r2, [r3], #4
    3d72:	428a      	cmp	r2, r1
    3d74:	d007      	beq.n	3d86 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d76:	3001      	adds	r0, #1
    3d78:	2808      	cmp	r0, #8
    3d7a:	d1f8      	bne.n	3d6e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    3d7c:	2000      	movs	r0, #0
}
    3d7e:	b009      	add	sp, #36	; 0x24
    3d80:	bc70      	pop	{r4, r5, r6}
    3d82:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d84:	2000      	movs	r0, #0
			return i;
    3d86:	b2c0      	uxtb	r0, r0
    3d88:	e7f9      	b.n	3d7e <_sercom_get_hardware_index+0x32>
    3d8a:	bf00      	nop
    3d8c:	000074c4 	.word	0x000074c4

00003d90 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3d90:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3d92:	f013 0f01 	tst.w	r3, #1
    3d96:	d109      	bne.n	3dac <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3d98:	6803      	ldr	r3, [r0, #0]
    3d9a:	f043 0302 	orr.w	r3, r3, #2
    3d9e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3da0:	69c3      	ldr	r3, [r0, #28]
    3da2:	f013 0f03 	tst.w	r3, #3
    3da6:	d1fb      	bne.n	3da0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    3da8:	2000      	movs	r0, #0
    3daa:	4770      	bx	lr
		return ERR_BUSY;
    3dac:	f06f 0003 	mvn.w	r0, #3
}
    3db0:	4770      	bx	lr

00003db2 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3db2:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3db4:	f013 0f01 	tst.w	r3, #1
    3db8:	d109      	bne.n	3dce <_spi_sync_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3dba:	6803      	ldr	r3, [r0, #0]
    3dbc:	f023 0302 	bic.w	r3, r3, #2
    3dc0:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3dc2:	69c3      	ldr	r3, [r0, #28]
    3dc4:	f013 0f03 	tst.w	r3, #3
    3dc8:	d1fb      	bne.n	3dc2 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    3dca:	2000      	movs	r0, #0
    3dcc:	4770      	bx	lr
		return ERR_BUSY;
    3dce:	f06f 0003 	mvn.w	r0, #3
}
    3dd2:	4770      	bx	lr

00003dd4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3dd4:	b570      	push	{r4, r5, r6, lr}
    3dd6:	4606      	mov	r6, r0
    3dd8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3dda:	4608      	mov	r0, r1
    3ddc:	4b5d      	ldr	r3, [pc, #372]	; (3f54 <_spi_m_sync_init+0x180>)
    3dde:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3de0:	2804      	cmp	r0, #4
    3de2:	d00c      	beq.n	3dfe <_spi_m_sync_init+0x2a>
    3de4:	2806      	cmp	r0, #6
    3de6:	bf08      	it	eq
    3de8:	2301      	moveq	r3, #1
    3dea:	d009      	beq.n	3e00 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3dec:	2e00      	cmp	r6, #0
    3dee:	f000 809f 	beq.w	3f30 <_spi_m_sync_init+0x15c>
    3df2:	2c00      	cmp	r4, #0
    3df4:	f040 80a5 	bne.w	3f42 <_spi_m_sync_init+0x16e>
	return NULL;
    3df8:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3dfa:	2000      	movs	r0, #0
    3dfc:	e009      	b.n	3e12 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    3dfe:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3e00:	4d55      	ldr	r5, [pc, #340]	; (3f58 <_spi_m_sync_init+0x184>)
    3e02:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    3e06:	441d      	add	r5, r3
	ASSERT(dev && hw);
    3e08:	2e00      	cmp	r6, #0
    3e0a:	d0f6      	beq.n	3dfa <_spi_m_sync_init+0x26>
    3e0c:	2001      	movs	r0, #1
    3e0e:	2c00      	cmp	r4, #0
    3e10:	d0f3      	beq.n	3dfa <_spi_m_sync_init+0x26>
    3e12:	f640 123c 	movw	r2, #2364	; 0x93c
    3e16:	4951      	ldr	r1, [pc, #324]	; (3f5c <_spi_m_sync_init+0x188>)
    3e18:	4b51      	ldr	r3, [pc, #324]	; (3f60 <_spi_m_sync_init+0x18c>)
    3e1a:	4798      	blx	r3

	if (regs == NULL) {
    3e1c:	2d00      	cmp	r5, #0
    3e1e:	f000 8084 	beq.w	3f2a <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3e22:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3e24:	f013 0f01 	tst.w	r3, #1
    3e28:	d11d      	bne.n	3e66 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3e2a:	682b      	ldr	r3, [r5, #0]
    3e2c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e30:	69e3      	ldr	r3, [r4, #28]
    3e32:	f013 0f03 	tst.w	r3, #3
    3e36:	d1fb      	bne.n	3e30 <_spi_m_sync_init+0x5c>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3e38:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3e3a:	f013 0f02 	tst.w	r3, #2
    3e3e:	d00b      	beq.n	3e58 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3e40:	6823      	ldr	r3, [r4, #0]
    3e42:	f023 0302 	bic.w	r3, r3, #2
    3e46:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e48:	69e3      	ldr	r3, [r4, #28]
    3e4a:	f013 0f03 	tst.w	r3, #3
    3e4e:	d1fb      	bne.n	3e48 <_spi_m_sync_init+0x74>
    3e50:	69e3      	ldr	r3, [r4, #28]
    3e52:	f013 0f02 	tst.w	r3, #2
    3e56:	d1fb      	bne.n	3e50 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3e58:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3e5c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e5e:	69e3      	ldr	r3, [r4, #28]
    3e60:	f013 0f03 	tst.w	r3, #3
    3e64:	d1fb      	bne.n	3e5e <_spi_m_sync_init+0x8a>
    3e66:	69e3      	ldr	r3, [r4, #28]
    3e68:	f013 0f01 	tst.w	r3, #1
    3e6c:	d1fb      	bne.n	3e66 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3e6e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3e70:	682b      	ldr	r3, [r5, #0]
    3e72:	f003 031c 	and.w	r3, r3, #28
    3e76:	2b08      	cmp	r3, #8
    3e78:	d02e      	beq.n	3ed8 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    3e7a:	f640 1206 	movw	r2, #2310	; 0x906
    3e7e:	4937      	ldr	r1, [pc, #220]	; (3f5c <_spi_m_sync_init+0x188>)
    3e80:	1c20      	adds	r0, r4, #0
    3e82:	bf18      	it	ne
    3e84:	2001      	movne	r0, #1
    3e86:	4b36      	ldr	r3, [pc, #216]	; (3f60 <_spi_m_sync_init+0x18c>)
    3e88:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3e8a:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3e8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3e90:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3e94:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e96:	69e3      	ldr	r3, [r4, #28]
    3e98:	f013 0f03 	tst.w	r3, #3
    3e9c:	d1fb      	bne.n	3e96 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    3e9e:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3ea0:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3ea4:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3eac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3eae:	69e3      	ldr	r3, [r4, #28]
    3eb0:	f013 0f17 	tst.w	r3, #23
    3eb4:	d1fb      	bne.n	3eae <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3eb6:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3eb8:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3eba:	7b6b      	ldrb	r3, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3ebc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3ec0:	686b      	ldr	r3, [r5, #4]
    3ec2:	f003 0307 	and.w	r3, r3, #7
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	bf0c      	ite	eq
    3eca:	2301      	moveq	r3, #1
    3ecc:	2302      	movne	r3, #2
    3ece:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    3ed0:	89eb      	ldrh	r3, [r5, #14]
    3ed2:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    3ed4:	2000      	movs	r0, #0
    3ed6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    3ed8:	f640 121a 	movw	r2, #2330	; 0x91a
    3edc:	491f      	ldr	r1, [pc, #124]	; (3f5c <_spi_m_sync_init+0x188>)
    3ede:	1c20      	adds	r0, r4, #0
    3ee0:	bf18      	it	ne
    3ee2:	2001      	movne	r0, #1
    3ee4:	4b1e      	ldr	r3, [pc, #120]	; (3f60 <_spi_m_sync_init+0x18c>)
    3ee6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3ee8:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3eea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3eee:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3ef2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ef4:	69e3      	ldr	r3, [r4, #28]
    3ef6:	f013 0f03 	tst.w	r3, #3
    3efa:	d1fb      	bne.n	3ef4 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3efc:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3efe:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3f02:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f0a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3f0e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f10:	69e3      	ldr	r3, [r4, #28]
    3f12:	f013 0f17 	tst.w	r3, #23
    3f16:	d1fb      	bne.n	3f10 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3f18:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3f1a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3f1c:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3f1e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3f22:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3f24:	2b00      	cmp	r3, #0
    3f26:	d1fc      	bne.n	3f22 <_spi_m_sync_init+0x14e>
    3f28:	e7ca      	b.n	3ec0 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    3f2a:	f06f 000c 	mvn.w	r0, #12
    3f2e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3f30:	f640 123c 	movw	r2, #2364	; 0x93c
    3f34:	4909      	ldr	r1, [pc, #36]	; (3f5c <_spi_m_sync_init+0x188>)
    3f36:	2000      	movs	r0, #0
    3f38:	4b09      	ldr	r3, [pc, #36]	; (3f60 <_spi_m_sync_init+0x18c>)
    3f3a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3f3c:	f06f 000c 	mvn.w	r0, #12
    3f40:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3f42:	f640 123c 	movw	r2, #2364	; 0x93c
    3f46:	4905      	ldr	r1, [pc, #20]	; (3f5c <_spi_m_sync_init+0x188>)
    3f48:	2001      	movs	r0, #1
    3f4a:	4b05      	ldr	r3, [pc, #20]	; (3f60 <_spi_m_sync_init+0x18c>)
    3f4c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3f4e:	f06f 000c 	mvn.w	r0, #12
    3f52:	bd70      	pop	{r4, r5, r6, pc}
    3f54:	00003d4d 	.word	0x00003d4d
    3f58:	000074fc 	.word	0x000074fc
    3f5c:	00007520 	.word	0x00007520
    3f60:	00003969 	.word	0x00003969

00003f64 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3f64:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3f66:	4604      	mov	r4, r0
    3f68:	b160      	cbz	r0, 3f84 <_spi_m_sync_enable+0x20>
    3f6a:	6800      	ldr	r0, [r0, #0]
    3f6c:	3000      	adds	r0, #0
    3f6e:	bf18      	it	ne
    3f70:	2001      	movne	r0, #1
    3f72:	f640 129b 	movw	r2, #2459	; 0x99b
    3f76:	4904      	ldr	r1, [pc, #16]	; (3f88 <_spi_m_sync_enable+0x24>)
    3f78:	4b04      	ldr	r3, [pc, #16]	; (3f8c <_spi_m_sync_enable+0x28>)
    3f7a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3f7c:	6820      	ldr	r0, [r4, #0]
    3f7e:	4b04      	ldr	r3, [pc, #16]	; (3f90 <_spi_m_sync_enable+0x2c>)
    3f80:	4798      	blx	r3
}
    3f82:	bd10      	pop	{r4, pc}
    3f84:	2000      	movs	r0, #0
    3f86:	e7f4      	b.n	3f72 <_spi_m_sync_enable+0xe>
    3f88:	00007520 	.word	0x00007520
    3f8c:	00003969 	.word	0x00003969
    3f90:	00003d91 	.word	0x00003d91

00003f94 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    3f94:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3f96:	4604      	mov	r4, r0
    3f98:	b160      	cbz	r0, 3fb4 <_spi_m_sync_disable+0x20>
    3f9a:	6800      	ldr	r0, [r0, #0]
    3f9c:	3000      	adds	r0, #0
    3f9e:	bf18      	it	ne
    3fa0:	2001      	movne	r0, #1
    3fa2:	f640 12b7 	movw	r2, #2487	; 0x9b7
    3fa6:	4904      	ldr	r1, [pc, #16]	; (3fb8 <_spi_m_sync_disable+0x24>)
    3fa8:	4b04      	ldr	r3, [pc, #16]	; (3fbc <_spi_m_sync_disable+0x28>)
    3faa:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    3fac:	6820      	ldr	r0, [r4, #0]
    3fae:	4b04      	ldr	r3, [pc, #16]	; (3fc0 <_spi_m_sync_disable+0x2c>)
    3fb0:	4798      	blx	r3
}
    3fb2:	bd10      	pop	{r4, pc}
    3fb4:	2000      	movs	r0, #0
    3fb6:	e7f4      	b.n	3fa2 <_spi_m_sync_disable+0xe>
    3fb8:	00007520 	.word	0x00007520
    3fbc:	00003969 	.word	0x00003969
    3fc0:	00003db3 	.word	0x00003db3

00003fc4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3fc8:	4681      	mov	r9, r0
    3fca:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    3fcc:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3fce:	f8d1 8000 	ldr.w	r8, [r1]
    3fd2:	684d      	ldr	r5, [r1, #4]
    3fd4:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    3fd6:	b1a8      	cbz	r0, 4004 <_spi_m_sync_trans+0x40>
    3fd8:	1c20      	adds	r0, r4, #0
    3fda:	bf18      	it	ne
    3fdc:	2001      	movne	r0, #1
    3fde:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    3fe2:	492e      	ldr	r1, [pc, #184]	; (409c <_spi_m_sync_trans+0xd8>)
    3fe4:	4b2e      	ldr	r3, [pc, #184]	; (40a0 <_spi_m_sync_trans+0xdc>)
    3fe6:	4798      	blx	r3
    3fe8:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3fea:	f013 0f07 	tst.w	r3, #7
    3fee:	d134      	bne.n	405a <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ff0:	69e0      	ldr	r0, [r4, #28]
    3ff2:	f010 0003 	ands.w	r0, r0, #3
    3ff6:	d1fb      	bne.n	3ff0 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3ff8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3ffa:	f013 0f02 	tst.w	r3, #2
    3ffe:	d030      	beq.n	4062 <_spi_m_sync_trans+0x9e>
    4000:	4602      	mov	r2, r0
    4002:	e008      	b.n	4016 <_spi_m_sync_trans+0x52>
    4004:	2000      	movs	r0, #0
    4006:	e7ea      	b.n	3fde <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    4008:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    400a:	f013 0f80 	tst.w	r3, #128	; 0x80
    400e:	d112      	bne.n	4036 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    4010:	68b3      	ldr	r3, [r6, #8]
    4012:	4283      	cmp	r3, r0
    4014:	d91e      	bls.n	4054 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    4016:	7e23      	ldrb	r3, [r4, #24]
    4018:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    401a:	f013 0f04 	tst.w	r3, #4
    401e:	d024      	beq.n	406a <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    4020:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    4022:	2d00      	cmp	r5, #0
    4024:	d0f0      	beq.n	4008 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    4026:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    4028:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    402a:	bf91      	iteee	ls
    402c:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    402e:	0a09      	lsrhi	r1, r1, #8
    4030:	7069      	strbhi	r1, [r5, #1]
    4032:	3502      	addhi	r5, #2
    4034:	e7e8      	b.n	4008 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    4036:	f64f 73ff 	movw	r3, #65535	; 0xffff
    403a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    403c:	2380      	movs	r3, #128	; 0x80
    403e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    4040:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    4044:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    4046:	f013 0f03 	tst.w	r3, #3
    404a:	d0fb      	beq.n	4044 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    404c:	2303      	movs	r3, #3
    404e:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    4050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    4054:	4293      	cmp	r3, r2
    4056:	d8de      	bhi.n	4016 <_spi_m_sync_trans+0x52>
    4058:	e7f4      	b.n	4044 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    405a:	f06f 0003 	mvn.w	r0, #3
    405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    4062:	f06f 0013 	mvn.w	r0, #19
    4066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    406a:	4290      	cmp	r0, r2
    406c:	d8cd      	bhi.n	400a <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    406e:	f013 0f01 	tst.w	r3, #1
    4072:	d0ca      	beq.n	400a <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    4074:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    4078:	f1b8 0f00 	cmp.w	r8, #0
    407c:	d00b      	beq.n	4096 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    407e:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    4082:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    4084:	bf91      	iteee	ls
    4086:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    408a:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    408e:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    4092:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    4096:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    4098:	62a1      	str	r1, [r4, #40]	; 0x28
    409a:	e7b6      	b.n	400a <_spi_m_sync_trans+0x46>
    409c:	00007520 	.word	0x00007520
    40a0:	00003969 	.word	0x00003969

000040a4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    40a4:	4b03      	ldr	r3, [pc, #12]	; (40b4 <_delay_init+0x10>)
    40a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    40aa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    40ac:	2205      	movs	r2, #5
    40ae:	601a      	str	r2, [r3, #0]
    40b0:	4770      	bx	lr
    40b2:	bf00      	nop
    40b4:	e000e010 	.word	0xe000e010

000040b8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    40b8:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    40ba:	b303      	cbz	r3, 40fe <_delay_cycles+0x46>
{
    40bc:	b430      	push	{r4, r5}
    40be:	1e5d      	subs	r5, r3, #1
    40c0:	b2ed      	uxtb	r5, r5
	while (n--) {
    40c2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    40c4:	4a12      	ldr	r2, [pc, #72]	; (4110 <_delay_cycles+0x58>)
    40c6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    40ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    40cc:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40ce:	6813      	ldr	r3, [r2, #0]
    40d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40d4:	d0fb      	beq.n	40ce <_delay_cycles+0x16>
	while (n--) {
    40d6:	3801      	subs	r0, #1
    40d8:	b2c0      	uxtb	r0, r0
    40da:	28ff      	cmp	r0, #255	; 0xff
    40dc:	d1f5      	bne.n	40ca <_delay_cycles+0x12>
    40de:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    40e2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    40e6:	3101      	adds	r1, #1
    40e8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    40ea:	4b09      	ldr	r3, [pc, #36]	; (4110 <_delay_cycles+0x58>)
    40ec:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    40ee:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40f0:	461a      	mov	r2, r3
    40f2:	6813      	ldr	r3, [r2, #0]
    40f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40f8:	d0fb      	beq.n	40f2 <_delay_cycles+0x3a>
		;
}
    40fa:	bc30      	pop	{r4, r5}
    40fc:	4770      	bx	lr
	SysTick->LOAD = buf;
    40fe:	4b04      	ldr	r3, [pc, #16]	; (4110 <_delay_cycles+0x58>)
    4100:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4102:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4104:	461a      	mov	r2, r3
    4106:	6813      	ldr	r3, [r2, #0]
    4108:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    410c:	d0fb      	beq.n	4106 <_delay_cycles+0x4e>
    410e:	4770      	bx	lr
    4110:	e000e010 	.word	0xe000e010

00004114 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4114:	2000      	movs	r0, #0
    4116:	4770      	bx	lr

00004118 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4118:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    411a:	7c83      	ldrb	r3, [r0, #18]
    411c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4120:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    4122:	f002 0107 	and.w	r1, r2, #7
    4126:	2901      	cmp	r1, #1
    4128:	d00b      	beq.n	4142 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    412a:	015a      	lsls	r2, r3, #5
    412c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4130:	2110      	movs	r1, #16
    4132:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4136:	015b      	lsls	r3, r3, #5
    4138:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    413c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    4140:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    4142:	f012 0f40 	tst.w	r2, #64	; 0x40
    4146:	d00c      	beq.n	4162 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4148:	7cc2      	ldrb	r2, [r0, #19]
    414a:	f36f 1286 	bfc	r2, #6, #1
    414e:	74c2      	strb	r2, [r0, #19]
    4150:	015a      	lsls	r2, r3, #5
    4152:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4156:	2180      	movs	r1, #128	; 0x80
    4158:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    415c:	2140      	movs	r1, #64	; 0x40
    415e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    4162:	7cc2      	ldrb	r2, [r0, #19]
    4164:	f36f 02c3 	bfc	r2, #3, #1
    4168:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    416a:	4909      	ldr	r1, [pc, #36]	; (4190 <_usb_d_dev_handle_setup+0x78>)
    416c:	015a      	lsls	r2, r3, #5
    416e:	188c      	adds	r4, r1, r2
    4170:	2500      	movs	r5, #0
    4172:	72a5      	strb	r5, [r4, #10]
    4174:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4176:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    417a:	246f      	movs	r4, #111	; 0x6f
    417c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4180:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4184:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    4188:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    418a:	7c80      	ldrb	r0, [r0, #18]
    418c:	4798      	blx	r3
    418e:	bd38      	pop	{r3, r4, r5, pc}
    4190:	20000b2c 	.word	0x20000b2c

00004194 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    4194:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4196:	2320      	movs	r3, #32
    4198:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    419c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    419e:	7c83      	ldrb	r3, [r0, #18]
    41a0:	f003 030f 	and.w	r3, r3, #15
    41a4:	015b      	lsls	r3, r3, #5
    41a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    41aa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    41ae:	4b03      	ldr	r3, [pc, #12]	; (41bc <_usb_d_dev_handle_stall+0x28>)
    41b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    41b2:	6882      	ldr	r2, [r0, #8]
    41b4:	2101      	movs	r1, #1
    41b6:	7c80      	ldrb	r0, [r0, #18]
    41b8:	4798      	blx	r3
    41ba:	bd08      	pop	{r3, pc}
    41bc:	20000b2c 	.word	0x20000b2c

000041c0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    41c0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    41c2:	7c84      	ldrb	r4, [r0, #18]
    41c4:	2cff      	cmp	r4, #255	; 0xff
    41c6:	d003      	beq.n	41d0 <_usb_d_dev_trans_done+0x10>
    41c8:	7cc3      	ldrb	r3, [r0, #19]
    41ca:	f013 0f40 	tst.w	r3, #64	; 0x40
    41ce:	d100      	bne.n	41d2 <_usb_d_dev_trans_done+0x12>
    41d0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    41d2:	7cc2      	ldrb	r2, [r0, #19]
    41d4:	f36f 1286 	bfc	r2, #6, #1
    41d8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    41da:	4a03      	ldr	r2, [pc, #12]	; (41e8 <_usb_d_dev_trans_done+0x28>)
    41dc:	6f15      	ldr	r5, [r2, #112]	; 0x70
    41de:	6882      	ldr	r2, [r0, #8]
    41e0:	4620      	mov	r0, r4
    41e2:	47a8      	blx	r5
    41e4:	e7f4      	b.n	41d0 <_usb_d_dev_trans_done+0x10>
    41e6:	bf00      	nop
    41e8:	20000b2c 	.word	0x20000b2c

000041ec <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    41ec:	b530      	push	{r4, r5, lr}
    41ee:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    41f0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    41f2:	2425      	movs	r4, #37	; 0x25
    41f4:	f88d 4004 	strb.w	r4, [sp, #4]
    41f8:	244a      	movs	r4, #74	; 0x4a
    41fa:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    41fe:	2bff      	cmp	r3, #255	; 0xff
    4200:	d01e      	beq.n	4240 <_usb_d_dev_trans_stop+0x54>
    4202:	7cc4      	ldrb	r4, [r0, #19]
    4204:	f014 0f40 	tst.w	r4, #64	; 0x40
    4208:	d01a      	beq.n	4240 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    420a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    420e:	b1c9      	cbz	r1, 4244 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4210:	0163      	lsls	r3, r4, #5
    4212:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4216:	2580      	movs	r5, #128	; 0x80
    4218:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    421c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    421e:	a902      	add	r1, sp, #8
    4220:	440b      	add	r3, r1
    4222:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4226:	0163      	lsls	r3, r4, #5
    4228:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    422c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4230:	0163      	lsls	r3, r4, #5
    4232:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4236:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    423a:	4611      	mov	r1, r2
    423c:	4b05      	ldr	r3, [pc, #20]	; (4254 <_usb_d_dev_trans_stop+0x68>)
    423e:	4798      	blx	r3
}
    4240:	b003      	add	sp, #12
    4242:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4244:	0163      	lsls	r3, r4, #5
    4246:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    424a:	2540      	movs	r5, #64	; 0x40
    424c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4250:	e7e4      	b.n	421c <_usb_d_dev_trans_stop+0x30>
    4252:	bf00      	nop
    4254:	000041c1 	.word	0x000041c1

00004258 <_usb_d_dev_handle_trfail>:
{
    4258:	b530      	push	{r4, r5, lr}
    425a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    425c:	7c83      	ldrb	r3, [r0, #18]
    425e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    4262:	2204      	movs	r2, #4
    4264:	f88d 2004 	strb.w	r2, [sp, #4]
    4268:	2208      	movs	r2, #8
    426a:	f88d 2005 	strb.w	r2, [sp, #5]
    426e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    4270:	460c      	mov	r4, r1
    4272:	b391      	cbz	r1, 42da <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4274:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    4278:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    427c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    4280:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4284:	4a32      	ldr	r2, [pc, #200]	; (4350 <_usb_d_dev_handle_trfail+0xf8>)
    4286:	440a      	add	r2, r1
    4288:	7a91      	ldrb	r1, [r2, #10]
    428a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    428c:	2d02      	cmp	r5, #2
    428e:	d02c      	beq.n	42ea <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    4290:	f011 0f02 	tst.w	r1, #2
    4294:	d045      	beq.n	4322 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4296:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    4298:	7a91      	ldrb	r1, [r2, #10]
    429a:	f36f 0141 	bfc	r1, #1, #1
    429e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    42a0:	aa02      	add	r2, sp, #8
    42a2:	4422      	add	r2, r4
    42a4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    42a8:	015a      	lsls	r2, r3, #5
    42aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    42ae:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    42b2:	015b      	lsls	r3, r3, #5
    42b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    42b8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    42bc:	f005 0307 	and.w	r3, r5, #7
    42c0:	2b01      	cmp	r3, #1
    42c2:	d143      	bne.n	434c <_usb_d_dev_handle_trfail+0xf4>
    42c4:	7cc3      	ldrb	r3, [r0, #19]
    42c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    42ca:	d03f      	beq.n	434c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    42cc:	09d9      	lsrs	r1, r3, #7
    42ce:	428c      	cmp	r4, r1
    42d0:	d03c      	beq.n	434c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    42d2:	2200      	movs	r2, #0
    42d4:	4b1f      	ldr	r3, [pc, #124]	; (4354 <_usb_d_dev_handle_trfail+0xfc>)
    42d6:	4798      	blx	r3
    42d8:	e038      	b.n	434c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    42da:	0159      	lsls	r1, r3, #5
    42dc:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    42e0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    42e4:	f005 0507 	and.w	r5, r5, #7
    42e8:	e7ca      	b.n	4280 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    42ea:	f011 0f01 	tst.w	r1, #1
    42ee:	d0cf      	beq.n	4290 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    42f0:	7a91      	ldrb	r1, [r2, #10]
    42f2:	f36f 0100 	bfc	r1, #0, #1
    42f6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    42f8:	aa02      	add	r2, sp, #8
    42fa:	4422      	add	r2, r4
    42fc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4300:	015a      	lsls	r2, r3, #5
    4302:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4306:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    430a:	015b      	lsls	r3, r3, #5
    430c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4310:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4314:	2204      	movs	r2, #4
    4316:	1c21      	adds	r1, r4, #0
    4318:	bf18      	it	ne
    431a:	2101      	movne	r1, #1
    431c:	4b0d      	ldr	r3, [pc, #52]	; (4354 <_usb_d_dev_handle_trfail+0xfc>)
    431e:	4798      	blx	r3
    4320:	e014      	b.n	434c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4322:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4326:	4a0a      	ldr	r2, [pc, #40]	; (4350 <_usb_d_dev_handle_trfail+0xf8>)
    4328:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    432c:	2100      	movs	r1, #0
    432e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4330:	aa02      	add	r2, sp, #8
    4332:	4414      	add	r4, r2
    4334:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4338:	015a      	lsls	r2, r3, #5
    433a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    433e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4342:	015b      	lsls	r3, r3, #5
    4344:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4348:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    434c:	b003      	add	sp, #12
    434e:	bd30      	pop	{r4, r5, pc}
    4350:	20000b2c 	.word	0x20000b2c
    4354:	000041ed 	.word	0x000041ed

00004358 <_usb_d_dev_reset_epts>:
{
    4358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    435c:	4d0c      	ldr	r5, [pc, #48]	; (4390 <_usb_d_dev_reset_epts+0x38>)
    435e:	f105 0474 	add.w	r4, r5, #116	; 0x74
    4362:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4366:	f04f 0803 	mov.w	r8, #3
    436a:	4f0a      	ldr	r7, [pc, #40]	; (4394 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    436c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    436e:	4641      	mov	r1, r8
    4370:	4620      	mov	r0, r4
    4372:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    4374:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    4376:	2300      	movs	r3, #0
    4378:	74e3      	strb	r3, [r4, #19]
    437a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    437c:	42ac      	cmp	r4, r5
    437e:	d1f6      	bne.n	436e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4380:	2260      	movs	r2, #96	; 0x60
    4382:	4619      	mov	r1, r3
    4384:	4802      	ldr	r0, [pc, #8]	; (4390 <_usb_d_dev_reset_epts+0x38>)
    4386:	4b04      	ldr	r3, [pc, #16]	; (4398 <_usb_d_dev_reset_epts+0x40>)
    4388:	4798      	blx	r3
    438a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    438e:	bf00      	nop
    4390:	20000b2c 	.word	0x20000b2c
    4394:	000041c1 	.word	0x000041c1
    4398:	00006651 	.word	0x00006651

0000439c <_usb_d_dev_in_next>:
{
    439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43a0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    43a2:	7c84      	ldrb	r4, [r0, #18]
    43a4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    43a8:	4688      	mov	r8, r1
    43aa:	2900      	cmp	r1, #0
    43ac:	f000 809f 	beq.w	44ee <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    43b0:	4b58      	ldr	r3, [pc, #352]	; (4514 <_usb_d_dev_in_next+0x178>)
    43b2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    43b6:	6958      	ldr	r0, [r3, #20]
    43b8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    43bc:	8a2b      	ldrh	r3, [r5, #16]
    43be:	f240 32ff 	movw	r2, #1023	; 0x3ff
    43c2:	4293      	cmp	r3, r2
    43c4:	f000 808d 	beq.w	44e2 <_usb_d_dev_in_next+0x146>
    43c8:	3b01      	subs	r3, #1
    43ca:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    43cc:	7cef      	ldrb	r7, [r5, #19]
    43ce:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    43d2:	f1b8 0f00 	cmp.w	r8, #0
    43d6:	d005      	beq.n	43e4 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    43d8:	0162      	lsls	r2, r4, #5
    43da:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    43de:	2302      	movs	r3, #2
    43e0:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    43e4:	68a9      	ldr	r1, [r5, #8]
    43e6:	eb0e 0301 	add.w	r3, lr, r1
    43ea:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    43ec:	686e      	ldr	r6, [r5, #4]
    43ee:	42b3      	cmp	r3, r6
    43f0:	d23f      	bcs.n	4472 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    43f2:	1af6      	subs	r6, r6, r3
    43f4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    43f6:	7cea      	ldrb	r2, [r5, #19]
    43f8:	f012 0f20 	tst.w	r2, #32
    43fc:	d02d      	beq.n	445a <_usb_d_dev_in_next+0xbe>
    43fe:	8a2a      	ldrh	r2, [r5, #16]
    4400:	4296      	cmp	r6, r2
    4402:	bf28      	it	cs
    4404:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4406:	6829      	ldr	r1, [r5, #0]
    4408:	4632      	mov	r2, r6
    440a:	4419      	add	r1, r3
    440c:	68e8      	ldr	r0, [r5, #12]
    440e:	4b42      	ldr	r3, [pc, #264]	; (4518 <_usb_d_dev_in_next+0x17c>)
    4410:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4412:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4414:	4b3f      	ldr	r3, [pc, #252]	; (4514 <_usb_d_dev_in_next+0x178>)
    4416:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    441a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    441c:	4b3d      	ldr	r3, [pc, #244]	; (4514 <_usb_d_dev_in_next+0x178>)
    441e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4422:	695a      	ldr	r2, [r3, #20]
    4424:	f366 020d 	bfi	r2, r6, #0, #14
    4428:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    442a:	695a      	ldr	r2, [r3, #20]
    442c:	f36f 329b 	bfc	r2, #14, #14
    4430:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4432:	f1b8 0f00 	cmp.w	r8, #0
    4436:	d108      	bne.n	444a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4438:	2f01      	cmp	r7, #1
    443a:	bf0c      	ite	eq
    443c:	224e      	moveq	r2, #78	; 0x4e
    443e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4440:	0163      	lsls	r3, r4, #5
    4442:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4446:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    444a:	0164      	lsls	r4, r4, #5
    444c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4450:	2380      	movs	r3, #128	; 0x80
    4452:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    4456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    445a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    445e:	bf28      	it	cs
    4460:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4464:	6829      	ldr	r1, [r5, #0]
    4466:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    4468:	4a2a      	ldr	r2, [pc, #168]	; (4514 <_usb_d_dev_in_next+0x178>)
    446a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    446e:	6113      	str	r3, [r2, #16]
    4470:	e7d4      	b.n	441c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    4472:	7ceb      	ldrb	r3, [r5, #19]
    4474:	f013 0f10 	tst.w	r3, #16
    4478:	d00f      	beq.n	449a <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    447a:	7ceb      	ldrb	r3, [r5, #19]
    447c:	f36f 1304 	bfc	r3, #4, #1
    4480:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4482:	4b24      	ldr	r3, [pc, #144]	; (4514 <_usb_d_dev_in_next+0x178>)
    4484:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4488:	695a      	ldr	r2, [r3, #20]
    448a:	f36f 020d 	bfc	r2, #0, #14
    448e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4490:	695a      	ldr	r2, [r3, #20]
    4492:	f36f 329b 	bfc	r2, #14, #14
    4496:	615a      	str	r2, [r3, #20]
    4498:	e7cb      	b.n	4432 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    449a:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    449c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    44a0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    44a4:	bf0c      	ite	eq
    44a6:	234b      	moveq	r3, #75	; 0x4b
    44a8:	234a      	movne	r3, #74	; 0x4a
    44aa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    44ae:	8a2a      	ldrh	r2, [r5, #16]
    44b0:	ea00 030e 	and.w	r3, r0, lr
    44b4:	429a      	cmp	r2, r3
    44b6:	d005      	beq.n	44c4 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    44b8:	2100      	movs	r1, #0
    44ba:	4628      	mov	r0, r5
    44bc:	4b17      	ldr	r3, [pc, #92]	; (451c <_usb_d_dev_in_next+0x180>)
    44be:	4798      	blx	r3
	return;
    44c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    44c4:	7ceb      	ldrb	r3, [r5, #19]
    44c6:	f36f 1386 	bfc	r3, #6, #1
    44ca:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    44cc:	4b11      	ldr	r3, [pc, #68]	; (4514 <_usb_d_dev_in_next+0x178>)
    44ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    44d0:	68a9      	ldr	r1, [r5, #8]
    44d2:	7ca8      	ldrb	r0, [r5, #18]
    44d4:	4798      	blx	r3
    44d6:	b9d0      	cbnz	r0, 450e <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    44d8:	7ceb      	ldrb	r3, [r5, #19]
    44da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    44de:	74eb      	strb	r3, [r5, #19]
    44e0:	e7ea      	b.n	44b8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    44e2:	7cef      	ldrb	r7, [r5, #19]
    44e4:	f007 0707 	and.w	r7, r7, #7
    44e8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    44ec:	e774      	b.n	43d8 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    44ee:	8a03      	ldrh	r3, [r0, #16]
    44f0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    44f4:	4293      	cmp	r3, r2
    44f6:	d107      	bne.n	4508 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    44f8:	7cef      	ldrb	r7, [r5, #19]
    44fa:	f007 0707 	and.w	r7, r7, #7
    44fe:	f04f 0e00 	mov.w	lr, #0
    4502:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4506:	e76d      	b.n	43e4 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4508:	f04f 0e00 	mov.w	lr, #0
    450c:	e75c      	b.n	43c8 <_usb_d_dev_in_next+0x2c>
    450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4512:	bf00      	nop
    4514:	20000b2c 	.word	0x20000b2c
    4518:	0000651d 	.word	0x0000651d
    451c:	000041c1 	.word	0x000041c1

00004520 <_usb_d_dev_out_next>:
{
    4520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4524:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4526:	7c85      	ldrb	r5, [r0, #18]
    4528:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    452c:	4689      	mov	r9, r1
    452e:	2900      	cmp	r1, #0
    4530:	d056      	beq.n	45e0 <_usb_d_dev_out_next+0xc0>
    4532:	4b74      	ldr	r3, [pc, #464]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    4534:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4538:	685a      	ldr	r2, [r3, #4]
    453a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    453e:	685f      	ldr	r7, [r3, #4]
    4540:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4544:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4546:	8a06      	ldrh	r6, [r0, #16]
    4548:	f240 33ff 	movw	r3, #1023	; 0x3ff
    454c:	429e      	cmp	r6, r3
    454e:	f000 80ba 	beq.w	46c6 <_usb_d_dev_out_next+0x1a6>
    4552:	3e01      	subs	r6, #1
    4554:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4556:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    455a:	f894 8013 	ldrb.w	r8, [r4, #19]
    455e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    4562:	f1b9 0f00 	cmp.w	r9, #0
    4566:	d005      	beq.n	4574 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4568:	016b      	lsls	r3, r5, #5
    456a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    456e:	2201      	movs	r2, #1
    4570:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    4574:	7ce3      	ldrb	r3, [r4, #19]
    4576:	f013 0f20 	tst.w	r3, #32
    457a:	d00d      	beq.n	4598 <_usb_d_dev_out_next+0x78>
    457c:	6862      	ldr	r2, [r4, #4]
    457e:	2a00      	cmp	r2, #0
    4580:	d037      	beq.n	45f2 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4582:	68a0      	ldr	r0, [r4, #8]
    4584:	1a12      	subs	r2, r2, r0
    4586:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    4588:	6823      	ldr	r3, [r4, #0]
    458a:	42ba      	cmp	r2, r7
    458c:	bf28      	it	cs
    458e:	463a      	movcs	r2, r7
    4590:	68e1      	ldr	r1, [r4, #12]
    4592:	4418      	add	r0, r3
    4594:	4b5c      	ldr	r3, [pc, #368]	; (4708 <_usb_d_dev_out_next+0x1e8>)
    4596:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4598:	6863      	ldr	r3, [r4, #4]
    459a:	b353      	cbz	r3, 45f2 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    459c:	f1b9 0f00 	cmp.w	r9, #0
    45a0:	d040      	beq.n	4624 <_usb_d_dev_out_next+0x104>
    45a2:	8a22      	ldrh	r2, [r4, #16]
    45a4:	42ba      	cmp	r2, r7
    45a6:	d93d      	bls.n	4624 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    45a8:	7ce3      	ldrb	r3, [r4, #19]
    45aa:	f36f 1304 	bfc	r3, #4, #1
    45ae:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    45b0:	68a3      	ldr	r3, [r4, #8]
    45b2:	445b      	add	r3, fp
    45b4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    45b6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    45ba:	ea4f 1345 	mov.w	r3, r5, lsl #5
    45be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    45c2:	bf0c      	ite	eq
    45c4:	222d      	moveq	r2, #45	; 0x2d
    45c6:	2225      	movne	r2, #37	; 0x25
    45c8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    45cc:	b915      	cbnz	r5, 45d4 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    45ce:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    45d0:	4b4c      	ldr	r3, [pc, #304]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    45d2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    45d4:	2100      	movs	r1, #0
    45d6:	4620      	mov	r0, r4
    45d8:	4b4c      	ldr	r3, [pc, #304]	; (470c <_usb_d_dev_out_next+0x1ec>)
    45da:	4798      	blx	r3
	return;
    45dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    45e0:	8a06      	ldrh	r6, [r0, #16]
    45e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    45e6:	429e      	cmp	r6, r3
    45e8:	d07b      	beq.n	46e2 <_usb_d_dev_out_next+0x1c2>
    45ea:	f04f 0b00 	mov.w	fp, #0
    45ee:	46da      	mov	sl, fp
    45f0:	e7af      	b.n	4552 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    45f2:	7ce3      	ldrb	r3, [r4, #19]
    45f4:	f013 0f10 	tst.w	r3, #16
    45f8:	d06c      	beq.n	46d4 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    45fa:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    45fc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4600:	f043 0320 	orr.w	r3, r3, #32
    4604:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4606:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4608:	493e      	ldr	r1, [pc, #248]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    460a:	016a      	lsls	r2, r5, #5
    460c:	188b      	adds	r3, r1, r2
    460e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4610:	8a21      	ldrh	r1, [r4, #16]
    4612:	685a      	ldr	r2, [r3, #4]
    4614:	f361 329b 	bfi	r2, r1, #14, #14
    4618:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    461a:	685a      	ldr	r2, [r3, #4]
    461c:	f36f 020d 	bfc	r2, #0, #14
    4620:	605a      	str	r2, [r3, #4]
    4622:	e01d      	b.n	4660 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4624:	68a2      	ldr	r2, [r4, #8]
    4626:	4452      	add	r2, sl
    4628:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    462a:	4293      	cmp	r3, r2
    462c:	d9c3      	bls.n	45b6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    462e:	1a9b      	subs	r3, r3, r2
    4630:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4632:	7ce1      	ldrb	r1, [r4, #19]
    4634:	f011 0f20 	tst.w	r1, #32
    4638:	d026      	beq.n	4688 <_usb_d_dev_out_next+0x168>
    463a:	8a22      	ldrh	r2, [r4, #16]
    463c:	4293      	cmp	r3, r2
    463e:	bf28      	it	cs
    4640:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4642:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4644:	016a      	lsls	r2, r5, #5
    4646:	492f      	ldr	r1, [pc, #188]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    4648:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    464a:	4a2e      	ldr	r2, [pc, #184]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    464c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4650:	6851      	ldr	r1, [r2, #4]
    4652:	f363 319b 	bfi	r1, r3, #14, #14
    4656:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4658:	6853      	ldr	r3, [r2, #4]
    465a:	f36f 030d 	bfc	r3, #0, #14
    465e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4660:	f1b9 0f00 	cmp.w	r9, #0
    4664:	d108      	bne.n	4678 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4666:	f1b8 0f01 	cmp.w	r8, #1
    466a:	d025      	beq.n	46b8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    466c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    466e:	016b      	lsls	r3, r5, #5
    4670:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4674:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4678:	016d      	lsls	r5, r5, #5
    467a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    467e:	2340      	movs	r3, #64	; 0x40
    4680:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4688:	8a21      	ldrh	r1, [r4, #16]
    468a:	428b      	cmp	r3, r1
    468c:	d90a      	bls.n	46a4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4692:	d80e      	bhi.n	46b2 <_usb_d_dev_out_next+0x192>
    4694:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4698:	6821      	ldr	r1, [r4, #0]
    469a:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    469c:	0169      	lsls	r1, r5, #5
    469e:	4819      	ldr	r0, [pc, #100]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    46a0:	5042      	str	r2, [r0, r1]
    46a2:	e7d2      	b.n	464a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    46a4:	428b      	cmp	r3, r1
    46a6:	d2f7      	bcs.n	4698 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    46a8:	7ce1      	ldrb	r1, [r4, #19]
    46aa:	f041 0120 	orr.w	r1, r1, #32
    46ae:	74e1      	strb	r1, [r4, #19]
    46b0:	e7f2      	b.n	4698 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    46b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    46b6:	e7ef      	b.n	4698 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    46b8:	4b12      	ldr	r3, [pc, #72]	; (4704 <_usb_d_dev_out_next+0x1e4>)
    46ba:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    46be:	2200      	movs	r2, #0
    46c0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    46c2:	222d      	movs	r2, #45	; 0x2d
    46c4:	e7d3      	b.n	466e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    46c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    46ca:	f890 8013 	ldrb.w	r8, [r0, #19]
    46ce:	f008 0807 	and.w	r8, r8, #7
    46d2:	e749      	b.n	4568 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    46d4:	f1b9 0f00 	cmp.w	r9, #0
    46d8:	d10b      	bne.n	46f2 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    46da:	68a3      	ldr	r3, [r4, #8]
    46dc:	4453      	add	r3, sl
    46de:	60a3      	str	r3, [r4, #8]
    46e0:	e769      	b.n	45b6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    46e2:	f890 8013 	ldrb.w	r8, [r0, #19]
    46e6:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    46ea:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    46ec:	46bb      	mov	fp, r7
    46ee:	46ba      	mov	sl, r7
    46f0:	e740      	b.n	4574 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    46f2:	8a23      	ldrh	r3, [r4, #16]
    46f4:	42bb      	cmp	r3, r7
    46f6:	f63f af57 	bhi.w	45a8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    46fa:	68a3      	ldr	r3, [r4, #8]
    46fc:	4453      	add	r3, sl
    46fe:	60a3      	str	r3, [r4, #8]
    4700:	e759      	b.n	45b6 <_usb_d_dev_out_next+0x96>
    4702:	bf00      	nop
    4704:	20000b2c 	.word	0x20000b2c
    4708:	0000651d 	.word	0x0000651d
    470c:	000041c1 	.word	0x000041c1

00004710 <_usb_d_dev_handler>:
{
    4710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4714:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4718:	8c1e      	ldrh	r6, [r3, #32]
    471a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    471c:	b146      	cbz	r6, 4730 <_usb_d_dev_handler+0x20>
    471e:	4d91      	ldr	r5, [pc, #580]	; (4964 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    4720:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4722:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    4726:	f8df 9258 	ldr.w	r9, [pc, #600]	; 4980 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    472a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 4984 <_usb_d_dev_handler+0x274>
    472e:	e0d3      	b.n	48d8 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4730:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4732:	8b1b      	ldrh	r3, [r3, #24]
    4734:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4736:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4738:	f013 0f04 	tst.w	r3, #4
    473c:	d11d      	bne.n	477a <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    473e:	f413 7f00 	tst.w	r3, #512	; 0x200
    4742:	d123      	bne.n	478c <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4744:	f013 0f80 	tst.w	r3, #128	; 0x80
    4748:	d147      	bne.n	47da <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    474a:	f013 0f70 	tst.w	r3, #112	; 0x70
    474e:	d14f      	bne.n	47f0 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4750:	f013 0f08 	tst.w	r3, #8
    4754:	d16e      	bne.n	4834 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4756:	f013 0f01 	tst.w	r3, #1
    475a:	d0e0      	beq.n	471e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    475c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4760:	f240 2201 	movw	r2, #513	; 0x201
    4764:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4766:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4768:	2270      	movs	r2, #112	; 0x70
    476a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    476c:	4b7e      	ldr	r3, [pc, #504]	; (4968 <_usb_d_dev_handler+0x258>)
    476e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4770:	2100      	movs	r1, #0
    4772:	2004      	movs	r0, #4
    4774:	4798      	blx	r3
    4776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    477a:	2204      	movs	r2, #4
    477c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4780:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4782:	4b79      	ldr	r3, [pc, #484]	; (4968 <_usb_d_dev_handler+0x258>)
    4784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4786:	4798      	blx	r3
    4788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    478c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4790:	f240 2201 	movw	r2, #513	; 0x201
    4794:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4796:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4798:	2270      	movs	r2, #112	; 0x70
    479a:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    479c:	4b72      	ldr	r3, [pc, #456]	; (4968 <_usb_d_dev_handler+0x258>)
    479e:	891b      	ldrh	r3, [r3, #8]
    47a0:	f003 030f 	and.w	r3, r3, #15
    47a4:	2b03      	cmp	r3, #3
    47a6:	d00e      	beq.n	47c6 <_usb_d_dev_handler+0xb6>
    47a8:	4b6f      	ldr	r3, [pc, #444]	; (4968 <_usb_d_dev_handler+0x258>)
    47aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    47ac:	f003 030f 	and.w	r3, r3, #15
    47b0:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    47b2:	bf08      	it	eq
    47b4:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    47b6:	d007      	beq.n	47c8 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    47b8:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    47ba:	4b6b      	ldr	r3, [pc, #428]	; (4968 <_usb_d_dev_handler+0x258>)
    47bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    47be:	2003      	movs	r0, #3
    47c0:	4798      	blx	r3
    47c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    47c6:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    47c8:	4b67      	ldr	r3, [pc, #412]	; (4968 <_usb_d_dev_handler+0x258>)
    47ca:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    47ce:	8919      	ldrh	r1, [r3, #8]
    47d0:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    47d4:	2200      	movs	r2, #0
    47d6:	811a      	strh	r2, [r3, #8]
    47d8:	e7ef      	b.n	47ba <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    47da:	2280      	movs	r2, #128	; 0x80
    47dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    47e0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    47e2:	4b61      	ldr	r3, [pc, #388]	; (4968 <_usb_d_dev_handler+0x258>)
    47e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    47e6:	2100      	movs	r1, #0
    47e8:	2005      	movs	r0, #5
    47ea:	4798      	blx	r3
    47ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    47f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    47f4:	2270      	movs	r2, #112	; 0x70
    47f6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    47f8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    47fa:	f240 2201 	movw	r2, #513	; 0x201
    47fe:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4800:	4b5a      	ldr	r3, [pc, #360]	; (496c <_usb_d_dev_handler+0x25c>)
    4802:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    4806:	f013 0f01 	tst.w	r3, #1
    480a:	d00d      	beq.n	4828 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    480c:	4a57      	ldr	r2, [pc, #348]	; (496c <_usb_d_dev_handler+0x25c>)
    480e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4810:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    4814:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4818:	d1f9      	bne.n	480e <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    481a:	4b53      	ldr	r3, [pc, #332]	; (4968 <_usb_d_dev_handler+0x258>)
    481c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    481e:	2100      	movs	r1, #0
    4820:	2002      	movs	r0, #2
    4822:	4798      	blx	r3
    4824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4828:	4a50      	ldr	r2, [pc, #320]	; (496c <_usb_d_dev_handler+0x25c>)
    482a:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    482c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4830:	d0fb      	beq.n	482a <_usb_d_dev_handler+0x11a>
    4832:	e7f2      	b.n	481a <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4834:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4838:	2400      	movs	r4, #0
    483a:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    483e:	2208      	movs	r2, #8
    4840:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4842:	2270      	movs	r2, #112	; 0x70
    4844:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4846:	f240 2201 	movw	r2, #513	; 0x201
    484a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    484c:	4b48      	ldr	r3, [pc, #288]	; (4970 <_usb_d_dev_handler+0x260>)
    484e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4850:	4b45      	ldr	r3, [pc, #276]	; (4968 <_usb_d_dev_handler+0x258>)
    4852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4854:	4621      	mov	r1, r4
    4856:	2001      	movs	r0, #1
    4858:	4798      	blx	r3
    485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    485e:	f011 0f10 	tst.w	r1, #16
    4862:	d109      	bne.n	4878 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4864:	f011 0f40 	tst.w	r1, #64	; 0x40
    4868:	d108      	bne.n	487c <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    486a:	f011 0f20 	tst.w	r1, #32
    486e:	d02f      	beq.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    4870:	2100      	movs	r1, #0
    4872:	4b40      	ldr	r3, [pc, #256]	; (4974 <_usb_d_dev_handler+0x264>)
    4874:	4798      	blx	r3
    4876:	e02b      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    4878:	47c8      	blx	r9
    487a:	e029      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    487c:	2101      	movs	r1, #1
    487e:	4b3d      	ldr	r3, [pc, #244]	; (4974 <_usb_d_dev_handler+0x264>)
    4880:	4798      	blx	r3
    4882:	e025      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4884:	f011 0f40 	tst.w	r1, #64	; 0x40
    4888:	d111      	bne.n	48ae <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    488a:	f011 0f08 	tst.w	r1, #8
    488e:	d112      	bne.n	48b6 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4890:	f011 0f02 	tst.w	r1, #2
    4894:	d112      	bne.n	48bc <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4896:	f003 0307 	and.w	r3, r3, #7
    489a:	2b01      	cmp	r3, #1
    489c:	d118      	bne.n	48d0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    489e:	f011 0f04 	tst.w	r1, #4
    48a2:	d10f      	bne.n	48c4 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    48a4:	f011 0f10 	tst.w	r1, #16
    48a8:	d012      	beq.n	48d0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    48aa:	47c8      	blx	r9
    48ac:	e010      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    48ae:	2101      	movs	r1, #1
    48b0:	4b30      	ldr	r3, [pc, #192]	; (4974 <_usb_d_dev_handler+0x264>)
    48b2:	4798      	blx	r3
    48b4:	e00c      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    48b6:	2101      	movs	r1, #1
    48b8:	47c0      	blx	r8
    48ba:	e009      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    48bc:	2101      	movs	r1, #1
    48be:	4b2e      	ldr	r3, [pc, #184]	; (4978 <_usb_d_dev_handler+0x268>)
    48c0:	4798      	blx	r3
    48c2:	e005      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    48c4:	2100      	movs	r1, #0
    48c6:	47c0      	blx	r8
    48c8:	e002      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    48ca:	2100      	movs	r1, #0
    48cc:	4b29      	ldr	r3, [pc, #164]	; (4974 <_usb_d_dev_handler+0x264>)
    48ce:	4798      	blx	r3
    48d0:	3401      	adds	r4, #1
    48d2:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    48d4:	2c09      	cmp	r4, #9
    48d6:	d042      	beq.n	495e <_usb_d_dev_handler+0x24e>
    48d8:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    48da:	7cab      	ldrb	r3, [r5, #18]
    48dc:	2bff      	cmp	r3, #255	; 0xff
    48de:	d0f7      	beq.n	48d0 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    48e0:	f003 030f 	and.w	r3, r3, #15
    48e4:	2101      	movs	r1, #1
    48e6:	4099      	lsls	r1, r3
    48e8:	4231      	tst	r1, r6
    48ea:	d0f1      	beq.n	48d0 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    48ec:	0159      	lsls	r1, r3, #5
    48ee:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    48f2:	f501 7180 	add.w	r1, r1, #256	; 0x100
    48f6:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    48f8:	015b      	lsls	r3, r3, #5
    48fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    48fe:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    4902:	4019      	ands	r1, r3
    4904:	d0e4      	beq.n	48d0 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4906:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    490a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    490e:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    4912:	f003 0247 	and.w	r2, r3, #71	; 0x47
    4916:	2a01      	cmp	r2, #1
    4918:	d0a1      	beq.n	485e <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    491a:	f013 0f80 	tst.w	r3, #128	; 0x80
    491e:	d1b1      	bne.n	4884 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4920:	f011 0f20 	tst.w	r1, #32
    4924:	d1d1      	bne.n	48ca <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4926:	f011 0f04 	tst.w	r1, #4
    492a:	d10e      	bne.n	494a <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    492c:	f011 0f01 	tst.w	r1, #1
    4930:	d10e      	bne.n	4950 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4932:	f003 0307 	and.w	r3, r3, #7
    4936:	2b01      	cmp	r3, #1
    4938:	d1ca      	bne.n	48d0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    493a:	f011 0f08 	tst.w	r1, #8
    493e:	d10b      	bne.n	4958 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4940:	f011 0f10 	tst.w	r1, #16
    4944:	d0c4      	beq.n	48d0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    4946:	47c8      	blx	r9
    4948:	e7c2      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    494a:	2100      	movs	r1, #0
    494c:	47c0      	blx	r8
    494e:	e7bf      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    4950:	2101      	movs	r1, #1
    4952:	4b0a      	ldr	r3, [pc, #40]	; (497c <_usb_d_dev_handler+0x26c>)
    4954:	4798      	blx	r3
    4956:	e7bb      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    4958:	2101      	movs	r1, #1
    495a:	47c0      	blx	r8
    495c:	e7b8      	b.n	48d0 <_usb_d_dev_handler+0x1c0>
    495e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4962:	bf00      	nop
    4964:	20000ba0 	.word	0x20000ba0
    4968:	20000b2c 	.word	0x20000b2c
    496c:	40001000 	.word	0x40001000
    4970:	00004359 	.word	0x00004359
    4974:	00004195 	.word	0x00004195
    4978:	0000439d 	.word	0x0000439d
    497c:	00004521 	.word	0x00004521
    4980:	00004119 	.word	0x00004119
    4984:	00004259 	.word	0x00004259

00004988 <_usb_d_dev_init>:
{
    4988:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    498a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    498e:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4990:	f013 0f01 	tst.w	r3, #1
    4994:	d124      	bne.n	49e0 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4996:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    499a:	7893      	ldrb	r3, [r2, #2]
    499c:	f013 0f03 	tst.w	r3, #3
    49a0:	d1fb      	bne.n	499a <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    49a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    49a6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    49a8:	f013 0f02 	tst.w	r3, #2
    49ac:	d00f      	beq.n	49ce <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    49ae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    49b2:	7813      	ldrb	r3, [r2, #0]
    49b4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    49b8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    49ba:	7893      	ldrb	r3, [r2, #2]
    49bc:	f013 0f03 	tst.w	r3, #3
    49c0:	d1fb      	bne.n	49ba <_usb_d_dev_init+0x32>
    49c2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    49c6:	7893      	ldrb	r3, [r2, #2]
    49c8:	f013 0f02 	tst.w	r3, #2
    49cc:	d1fb      	bne.n	49c6 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    49ce:	2201      	movs	r2, #1
    49d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    49d4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    49d6:	461a      	mov	r2, r3
    49d8:	7893      	ldrb	r3, [r2, #2]
    49da:	f013 0f03 	tst.w	r3, #3
    49de:	d1fb      	bne.n	49d8 <_usb_d_dev_init+0x50>
    49e0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    49e4:	7893      	ldrb	r3, [r2, #2]
    49e6:	f013 0f01 	tst.w	r3, #1
    49ea:	d1fb      	bne.n	49e4 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    49ec:	4b21      	ldr	r3, [pc, #132]	; (4a74 <_usb_d_dev_init+0xec>)
    49ee:	4a22      	ldr	r2, [pc, #136]	; (4a78 <_usb_d_dev_init+0xf0>)
    49f0:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    49f2:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    49f4:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    49f6:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    49f8:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    49fa:	4b20      	ldr	r3, [pc, #128]	; (4a7c <_usb_d_dev_init+0xf4>)
    49fc:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    49fe:	4b20      	ldr	r3, [pc, #128]	; (4a80 <_usb_d_dev_init+0xf8>)
    4a00:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    4a02:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4a06:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    4a0a:	f011 011f 	ands.w	r1, r1, #31
    4a0e:	d02b      	beq.n	4a68 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    4a10:	291f      	cmp	r1, #31
    4a12:	bf08      	it	eq
    4a14:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    4a16:	b34b      	cbz	r3, 4a6c <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    4a18:	2b1f      	cmp	r3, #31
    4a1a:	bf08      	it	eq
    4a1c:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    4a1e:	b33a      	cbz	r2, 4a70 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    4a20:	2a07      	cmp	r2, #7
    4a22:	bf08      	it	eq
    4a24:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4a26:	f003 031f 	and.w	r3, r3, #31
    4a2a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    4a2e:	0312      	lsls	r2, r2, #12
    4a30:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    4a34:	4313      	orrs	r3, r2
    4a36:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4a3a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4a3c:	78d3      	ldrb	r3, [r2, #3]
    4a3e:	f043 0303 	orr.w	r3, r3, #3
    4a42:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4a44:	78d3      	ldrb	r3, [r2, #3]
    4a46:	f043 030c 	orr.w	r3, r3, #12
    4a4a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4a4c:	2304      	movs	r3, #4
    4a4e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4a50:	7893      	ldrb	r3, [r2, #2]
    4a52:	f013 0f03 	tst.w	r3, #3
    4a56:	d1fb      	bne.n	4a50 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4a58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4a5c:	4a05      	ldr	r2, [pc, #20]	; (4a74 <_usb_d_dev_init+0xec>)
    4a5e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4a60:	2201      	movs	r2, #1
    4a62:	811a      	strh	r2, [r3, #8]
}
    4a64:	2000      	movs	r0, #0
    4a66:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    4a68:	2109      	movs	r1, #9
    4a6a:	e7d4      	b.n	4a16 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    4a6c:	2319      	movs	r3, #25
    4a6e:	e7d6      	b.n	4a1e <_usb_d_dev_init+0x96>
		pad_trim = 6;
    4a70:	2206      	movs	r2, #6
    4a72:	e7d8      	b.n	4a26 <_usb_d_dev_init+0x9e>
    4a74:	20000b2c 	.word	0x20000b2c
    4a78:	00004115 	.word	0x00004115
    4a7c:	00004359 	.word	0x00004359
    4a80:	00800084 	.word	0x00800084

00004a84 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4a84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4a88:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4a8a:	f013 0f03 	tst.w	r3, #3
    4a8e:	d129      	bne.n	4ae4 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4a90:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4a94:	7893      	ldrb	r3, [r2, #2]
    4a96:	f013 0f03 	tst.w	r3, #3
    4a9a:	d1fb      	bne.n	4a94 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4a9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4aa4:	f013 0f02 	tst.w	r3, #2
    4aa8:	d108      	bne.n	4abc <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4aaa:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4aae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4ab2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4ab4:	7893      	ldrb	r3, [r2, #2]
    4ab6:	f013 0f03 	tst.w	r3, #3
    4aba:	d1fb      	bne.n	4ab4 <_usb_d_dev_enable+0x30>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4abc:	4b0b      	ldr	r3, [pc, #44]	; (4aec <_usb_d_dev_enable+0x68>)
    4abe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4ac2:	609a      	str	r2, [r3, #8]
    4ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4ac8:	609a      	str	r2, [r3, #8]
    4aca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4ace:	609a      	str	r2, [r3, #8]
    4ad0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4ad4:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4ad6:	f240 228d 	movw	r2, #653	; 0x28d
    4ada:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ade:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4ae0:	2000      	movs	r0, #0
    4ae2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4ae4:	f06f 0010 	mvn.w	r0, #16
}
    4ae8:	4770      	bx	lr
    4aea:	bf00      	nop
    4aec:	e000e100 	.word	0xe000e100

00004af0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4af0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4af4:	8913      	ldrh	r3, [r2, #8]
    4af6:	f023 0301 	bic.w	r3, r3, #1
    4afa:	041b      	lsls	r3, r3, #16
    4afc:	0c1b      	lsrs	r3, r3, #16
    4afe:	8113      	strh	r3, [r2, #8]
    4b00:	4770      	bx	lr

00004b02 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4b02:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4b06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4b0a:	7298      	strb	r0, [r3, #10]
    4b0c:	4770      	bx	lr
	...

00004b10 <_usb_d_dev_ep_init>:
{
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4b16:	f010 050f 	ands.w	r5, r0, #15
    4b1a:	d04d      	beq.n	4bb8 <_usb_d_dev_ep_init+0xa8>
    4b1c:	f1be 0f00 	cmp.w	lr, #0
    4b20:	bfb4      	ite	lt
    4b22:	1cac      	addlt	r4, r5, #2
    4b24:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4b26:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4b2a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    4b2c:	2d02      	cmp	r5, #2
    4b2e:	d947      	bls.n	4bc0 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    4b30:	f06f 0011 	mvn.w	r0, #17
    4b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4b36:	f1be 0f00 	cmp.w	lr, #0
    4b3a:	db1b      	blt.n	4b74 <_usb_d_dev_ep_init+0x64>
    4b3c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4b40:	4e37      	ldr	r6, [pc, #220]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4b42:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4b46:	2d00      	cmp	r5, #0
    4b48:	d15e      	bne.n	4c08 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4b4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4b4e:	4d34      	ldr	r5, [pc, #208]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4b50:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4b54:	4d33      	ldr	r5, [pc, #204]	; (4c24 <_usb_d_dev_ep_init+0x114>)
    4b56:	00a6      	lsls	r6, r4, #2
    4b58:	1933      	adds	r3, r6, r4
    4b5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4b5e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    4b62:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    4b66:	3101      	adds	r1, #1
    4b68:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    4b6c:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    4b70:	2000      	movs	r0, #0
    4b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4b74:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4b78:	4e29      	ldr	r6, [pc, #164]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4b7a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4b7e:	686d      	ldr	r5, [r5, #4]
    4b80:	b935      	cbnz	r5, 4b90 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4b86:	4d26      	ldr	r5, [pc, #152]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4b88:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4b8c:	685f      	ldr	r7, [r3, #4]
    4b8e:	e7e1      	b.n	4b54 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4b90:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4b94:	4e22      	ldr	r6, [pc, #136]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4b96:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4b9a:	896d      	ldrh	r5, [r5, #10]
    4b9c:	4295      	cmp	r5, r2
    4b9e:	daf0      	bge.n	4b82 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    4ba0:	f06f 0012 	mvn.w	r0, #18
    4ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4ba6:	f06f 0013 	mvn.w	r0, #19
    4baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4bac:	f06f 0013 	mvn.w	r0, #19
    4bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    4bb2:	f06f 0012 	mvn.w	r0, #18
    4bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4bb8:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    4bbc:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4bbe:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    4bc0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    4bc4:	4f17      	ldr	r7, [pc, #92]	; (4c24 <_usb_d_dev_ep_init+0x114>)
    4bc6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    4bca:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    4bce:	2eff      	cmp	r6, #255	; 0xff
    4bd0:	d1e9      	bne.n	4ba6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4bd2:	2900      	cmp	r1, #0
    4bd4:	d1af      	bne.n	4b36 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4bd6:	b125      	cbz	r5, 4be2 <_usb_d_dev_ep_init+0xd2>
    4bd8:	f1be 0f00 	cmp.w	lr, #0
    4bdc:	bfa4      	itt	ge
    4bde:	3502      	addge	r5, #2
    4be0:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    4be2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4be6:	4e0f      	ldr	r6, [pc, #60]	; (4c24 <_usb_d_dev_ep_init+0x114>)
    4be8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4bec:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    4bf0:	2dff      	cmp	r5, #255	; 0xff
    4bf2:	d1db      	bne.n	4bac <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    4bf4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4bf8:	4e09      	ldr	r6, [pc, #36]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4bfa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4bfe:	2d00      	cmp	r5, #0
    4c00:	d0d7      	beq.n	4bb2 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4c02:	f1be 0f00 	cmp.w	lr, #0
    4c06:	dbb5      	blt.n	4b74 <_usb_d_dev_ep_init+0x64>
    4c08:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4c0c:	4e04      	ldr	r6, [pc, #16]	; (4c20 <_usb_d_dev_ep_init+0x110>)
    4c0e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4c12:	892d      	ldrh	r5, [r5, #8]
    4c14:	4295      	cmp	r5, r2
    4c16:	da98      	bge.n	4b4a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    4c18:	f06f 0012 	mvn.w	r0, #18
    4c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c1e:	bf00      	nop
    4c20:	0000753c 	.word	0x0000753c
    4c24:	20000b2c 	.word	0x20000b2c

00004c28 <_usb_d_dev_ep_deinit>:
{
    4c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c2a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4c2c:	f010 060f 	ands.w	r6, r0, #15
    4c30:	d00e      	beq.n	4c50 <_usb_d_dev_ep_deinit+0x28>
    4c32:	2f00      	cmp	r7, #0
    4c34:	bfb4      	ite	lt
    4c36:	1cb3      	addlt	r3, r6, #2
    4c38:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4c3a:	2e02      	cmp	r6, #2
    4c3c:	d900      	bls.n	4c40 <_usb_d_dev_ep_deinit+0x18>
    4c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    4c40:	461d      	mov	r5, r3
    4c42:	3301      	adds	r3, #1
    4c44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4c48:	4a24      	ldr	r2, [pc, #144]	; (4cdc <_usb_d_dev_ep_deinit+0xb4>)
    4c4a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    4c4e:	e002      	b.n	4c56 <_usb_d_dev_ep_deinit+0x2e>
    4c50:	f8df e094 	ldr.w	lr, [pc, #148]	; 4ce8 <_usb_d_dev_ep_deinit+0xc0>
    4c54:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4c56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4c5a:	4a21      	ldr	r2, [pc, #132]	; (4ce0 <_usb_d_dev_ep_deinit+0xb8>)
    4c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4c60:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    4c64:	2aff      	cmp	r2, #255	; 0xff
    4c66:	d0ea      	beq.n	4c3e <_usb_d_dev_ep_deinit+0x16>
    4c68:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    4c6a:	2203      	movs	r2, #3
    4c6c:	0ff9      	lsrs	r1, r7, #31
    4c6e:	4670      	mov	r0, lr
    4c70:	4b1c      	ldr	r3, [pc, #112]	; (4ce4 <_usb_d_dev_ep_deinit+0xbc>)
    4c72:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4c74:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4c78:	4a19      	ldr	r2, [pc, #100]	; (4ce0 <_usb_d_dev_ep_deinit+0xb8>)
    4c7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4c7e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4c82:	f003 0307 	and.w	r3, r3, #7
    4c86:	2b01      	cmp	r3, #1
    4c88:	d016      	beq.n	4cb8 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    4c8a:	2f00      	cmp	r7, #0
    4c8c:	db1b      	blt.n	4cc6 <_usb_d_dev_ep_deinit+0x9e>
    4c8e:	0160      	lsls	r0, r4, #5
    4c90:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4c94:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    4c98:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4c9c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    4ca0:	4b0f      	ldr	r3, [pc, #60]	; (4ce0 <_usb_d_dev_ep_deinit+0xb8>)
    4ca2:	00aa      	lsls	r2, r5, #2
    4ca4:	1951      	adds	r1, r2, r5
    4ca6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4caa:	2000      	movs	r0, #0
    4cac:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    4cb0:	22ff      	movs	r2, #255	; 0xff
    4cb2:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    4cb6:	e7c2      	b.n	4c3e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    4cb8:	0160      	lsls	r0, r4, #5
    4cba:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4cbe:	2300      	movs	r3, #0
    4cc0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    4cc4:	e7ec      	b.n	4ca0 <_usb_d_dev_ep_deinit+0x78>
    4cc6:	0176      	lsls	r6, r6, #5
    4cc8:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4ccc:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    4cd0:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    4cd4:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    4cd8:	e7e2      	b.n	4ca0 <_usb_d_dev_ep_deinit+0x78>
    4cda:	bf00      	nop
    4cdc:	20000b8c 	.word	0x20000b8c
    4ce0:	20000b2c 	.word	0x20000b2c
    4ce4:	000041ed 	.word	0x000041ed
    4ce8:	20000ba0 	.word	0x20000ba0

00004cec <_usb_d_dev_ep_enable>:
{
    4cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cee:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4cf0:	f010 000f 	ands.w	r0, r0, #15
    4cf4:	f000 80a6 	beq.w	4e44 <_usb_d_dev_ep_enable+0x158>
    4cf8:	2f00      	cmp	r7, #0
    4cfa:	bfb4      	ite	lt
    4cfc:	1c83      	addlt	r3, r0, #2
    4cfe:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4d00:	4606      	mov	r6, r0
    4d02:	0142      	lsls	r2, r0, #5
    4d04:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4d08:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    4d0c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4d0e:	2802      	cmp	r0, #2
    4d10:	f240 809f 	bls.w	4e52 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    4d14:	f06f 0011 	mvn.w	r0, #17
    4d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    4d1a:	f014 0f77 	tst.w	r4, #119	; 0x77
    4d1e:	f040 8088 	bne.w	4e32 <_usb_d_dev_ep_enable+0x146>
    4d22:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4d26:	2111      	movs	r1, #17
    4d28:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4d2c:	4c97      	ldr	r4, [pc, #604]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4d2e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    4d32:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    4d36:	4996      	ldr	r1, [pc, #600]	; (4f90 <_usb_d_dev_ep_enable+0x2a4>)
    4d38:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4d3c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    4d40:	f200 80cc 	bhi.w	4edc <_usb_d_dev_ep_enable+0x1f0>
    4d44:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    4d48:	f200 810a 	bhi.w	4f60 <_usb_d_dev_ep_enable+0x274>
    4d4c:	2c80      	cmp	r4, #128	; 0x80
    4d4e:	f200 80f9 	bhi.w	4f44 <_usb_d_dev_ep_enable+0x258>
    4d52:	2c40      	cmp	r4, #64	; 0x40
    4d54:	f200 810b 	bhi.w	4f6e <_usb_d_dev_ep_enable+0x282>
    4d58:	2c20      	cmp	r4, #32
    4d5a:	f200 80fa 	bhi.w	4f52 <_usb_d_dev_ep_enable+0x266>
    4d5e:	2c10      	cmp	r4, #16
    4d60:	f200 810c 	bhi.w	4f7c <_usb_d_dev_ep_enable+0x290>
    4d64:	2c08      	cmp	r4, #8
    4d66:	bf94      	ite	ls
    4d68:	2700      	movls	r7, #0
    4d6a:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4d6c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4d70:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4d72:	f3c4 010d 	ubfx	r1, r4, #0, #14
    4d76:	e0b7      	b.n	4ee8 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    4d78:	f014 0f70 	tst.w	r4, #112	; 0x70
    4d7c:	d15c      	bne.n	4e38 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4d7e:	4d83      	ldr	r5, [pc, #524]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4d80:	009f      	lsls	r7, r3, #2
    4d82:	18f9      	adds	r1, r7, r3
    4d84:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4d88:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4d8c:	0109      	lsls	r1, r1, #4
    4d8e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    4d92:	430c      	orrs	r4, r1
    4d94:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4d98:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4d9c:	443b      	add	r3, r7
    4d9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4da2:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    4da6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4dae:	d80f      	bhi.n	4dd0 <_usb_d_dev_ep_enable+0xe4>
    4db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4db4:	d819      	bhi.n	4dea <_usb_d_dev_ep_enable+0xfe>
    4db6:	2b80      	cmp	r3, #128	; 0x80
    4db8:	d819      	bhi.n	4dee <_usb_d_dev_ep_enable+0x102>
    4dba:	2b40      	cmp	r3, #64	; 0x40
    4dbc:	d819      	bhi.n	4df2 <_usb_d_dev_ep_enable+0x106>
    4dbe:	2b20      	cmp	r3, #32
    4dc0:	d819      	bhi.n	4df6 <_usb_d_dev_ep_enable+0x10a>
    4dc2:	2b10      	cmp	r3, #16
    4dc4:	d819      	bhi.n	4dfa <_usb_d_dev_ep_enable+0x10e>
    4dc6:	2b08      	cmp	r3, #8
    4dc8:	bf94      	ite	ls
    4dca:	2300      	movls	r3, #0
    4dcc:	2301      	movhi	r3, #1
    4dce:	e000      	b.n	4dd2 <_usb_d_dev_ep_enable+0xe6>
    4dd0:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4dd2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    4dd6:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4dd8:	2380      	movs	r3, #128	; 0x80
    4dda:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4dde:	4b6b      	ldr	r3, [pc, #428]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4de0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4de4:	2000      	movs	r0, #0
    4de6:	76b0      	strb	r0, [r6, #26]
    4de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4dea:	2306      	movs	r3, #6
    4dec:	e7f1      	b.n	4dd2 <_usb_d_dev_ep_enable+0xe6>
    4dee:	2305      	movs	r3, #5
    4df0:	e7ef      	b.n	4dd2 <_usb_d_dev_ep_enable+0xe6>
    4df2:	2304      	movs	r3, #4
    4df4:	e7ed      	b.n	4dd2 <_usb_d_dev_ep_enable+0xe6>
    4df6:	2303      	movs	r3, #3
    4df8:	e7eb      	b.n	4dd2 <_usb_d_dev_ep_enable+0xe6>
    4dfa:	2302      	movs	r3, #2
    4dfc:	e7e9      	b.n	4dd2 <_usb_d_dev_ep_enable+0xe6>
    4dfe:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e00:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e04:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4e06:	2340      	movs	r3, #64	; 0x40
    4e08:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    4e0c:	4b5f      	ldr	r3, [pc, #380]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4e0e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4e12:	2000      	movs	r0, #0
    4e14:	72b0      	strb	r0, [r6, #10]
    4e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e18:	2106      	movs	r1, #6
    4e1a:	e7f1      	b.n	4e00 <_usb_d_dev_ep_enable+0x114>
    4e1c:	2105      	movs	r1, #5
    4e1e:	e7ef      	b.n	4e00 <_usb_d_dev_ep_enable+0x114>
    4e20:	2104      	movs	r1, #4
    4e22:	e7ed      	b.n	4e00 <_usb_d_dev_ep_enable+0x114>
    4e24:	2103      	movs	r1, #3
    4e26:	e7eb      	b.n	4e00 <_usb_d_dev_ep_enable+0x114>
    4e28:	2102      	movs	r1, #2
    4e2a:	e7e9      	b.n	4e00 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    4e2c:	f06f 0011 	mvn.w	r0, #17
    4e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4e32:	f06f 0013 	mvn.w	r0, #19
    4e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4e38:	f06f 0013 	mvn.w	r0, #19
    4e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4e3e:	f06f 0013 	mvn.w	r0, #19
    4e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4e44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e48:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    4e4c:	b2e4      	uxtb	r4, r4
    4e4e:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    4e50:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4e52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4e56:	494d      	ldr	r1, [pc, #308]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4e58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4e5c:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    4e60:	2dff      	cmp	r5, #255	; 0xff
    4e62:	d0e3      	beq.n	4e2c <_usb_d_dev_ep_enable+0x140>
    4e64:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    4e66:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    4e68:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    4e6c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    4e70:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4e74:	f001 0107 	and.w	r1, r1, #7
    4e78:	2901      	cmp	r1, #1
    4e7a:	f43f af4e 	beq.w	4d1a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    4e7e:	2f00      	cmp	r7, #0
    4e80:	f6ff af7a 	blt.w	4d78 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    4e84:	f014 0f07 	tst.w	r4, #7
    4e88:	d1d9      	bne.n	4e3e <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    4e8a:	4d40      	ldr	r5, [pc, #256]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4e8c:	009f      	lsls	r7, r3, #2
    4e8e:	18f9      	adds	r1, r7, r3
    4e90:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4e94:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4e98:	f001 0107 	and.w	r1, r1, #7
    4e9c:	430c      	orrs	r4, r1
    4e9e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4ea2:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4ea6:	443b      	add	r3, r7
    4ea8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4eac:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    4eb0:	4b37      	ldr	r3, [pc, #220]	; (4f90 <_usb_d_dev_ep_enable+0x2a4>)
    4eb2:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4eb6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4eba:	d8a0      	bhi.n	4dfe <_usb_d_dev_ep_enable+0x112>
    4ebc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4ec0:	d8aa      	bhi.n	4e18 <_usb_d_dev_ep_enable+0x12c>
    4ec2:	2980      	cmp	r1, #128	; 0x80
    4ec4:	d8aa      	bhi.n	4e1c <_usb_d_dev_ep_enable+0x130>
    4ec6:	2940      	cmp	r1, #64	; 0x40
    4ec8:	d8aa      	bhi.n	4e20 <_usb_d_dev_ep_enable+0x134>
    4eca:	2920      	cmp	r1, #32
    4ecc:	d8aa      	bhi.n	4e24 <_usb_d_dev_ep_enable+0x138>
    4ece:	2910      	cmp	r1, #16
    4ed0:	d8aa      	bhi.n	4e28 <_usb_d_dev_ep_enable+0x13c>
    4ed2:	2908      	cmp	r1, #8
    4ed4:	bf94      	ite	ls
    4ed6:	2100      	movls	r1, #0
    4ed8:	2101      	movhi	r1, #1
    4eda:	e791      	b.n	4e00 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4edc:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4ee0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ee2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4ee6:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ee8:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    4eec:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4eee:	2140      	movs	r1, #64	; 0x40
    4ef0:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4ef4:	2080      	movs	r0, #128	; 0x80
    4ef6:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4efa:	4a24      	ldr	r2, [pc, #144]	; (4f8c <_usb_d_dev_ep_enable+0x2a0>)
    4efc:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    4f00:	2000      	movs	r0, #0
    4f02:	72b0      	strb	r0, [r6, #10]
    4f04:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4f06:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4f0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f12:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    4f16:	016d      	lsls	r5, r5, #5
    4f18:	1953      	adds	r3, r2, r5
    4f1a:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4f1c:	685a      	ldr	r2, [r3, #4]
    4f1e:	f364 329b 	bfi	r2, r4, #14, #14
    4f22:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4f24:	685a      	ldr	r2, [r3, #4]
    4f26:	f360 020d 	bfi	r2, r0, #0, #14
    4f2a:	605a      	str	r2, [r3, #4]
    4f2c:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    4f30:	22b0      	movs	r2, #176	; 0xb0
    4f32:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4f36:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4f3a:	461d      	mov	r5, r3
    4f3c:	2310      	movs	r3, #16
    4f3e:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    4f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f44:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f48:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f4a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f4e:	2705      	movs	r7, #5
    4f50:	e7ca      	b.n	4ee8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f52:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f56:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f58:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f5c:	2703      	movs	r7, #3
    4f5e:	e7c3      	b.n	4ee8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f60:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f64:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f66:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f6a:	2706      	movs	r7, #6
    4f6c:	e7bc      	b.n	4ee8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f6e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f72:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f74:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f78:	2704      	movs	r7, #4
    4f7a:	e7b5      	b.n	4ee8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f7c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f80:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f82:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f86:	2702      	movs	r7, #2
    4f88:	e7ae      	b.n	4ee8 <_usb_d_dev_ep_enable+0x1fc>
    4f8a:	bf00      	nop
    4f8c:	20000b2c 	.word	0x20000b2c
    4f90:	0fffc000 	.word	0x0fffc000

00004f94 <_usb_d_dev_ep_stall>:
{
    4f94:	b470      	push	{r4, r5, r6}
    4f96:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4f98:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4f9a:	f010 000f 	ands.w	r0, r0, #15
    4f9e:	d008      	beq.n	4fb2 <_usb_d_dev_ep_stall+0x1e>
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	bfb4      	ite	lt
    4fa4:	1c83      	addlt	r3, r0, #2
    4fa6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    4fa8:	2802      	cmp	r0, #2
    4faa:	d903      	bls.n	4fb4 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4fac:	f06f 0011 	mvn.w	r0, #17
    4fb0:	e018      	b.n	4fe4 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    4fb2:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    4fb4:	2901      	cmp	r1, #1
    4fb6:	d017      	beq.n	4fe8 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    4fb8:	2900      	cmp	r1, #0
    4fba:	d03a      	beq.n	5032 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4fbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4fc0:	4a45      	ldr	r2, [pc, #276]	; (50d8 <_usb_d_dev_ep_stall+0x144>)
    4fc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4fc6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4fca:	f003 030f 	and.w	r3, r3, #15
    4fce:	015b      	lsls	r3, r3, #5
    4fd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4fd4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4fd8:	2310      	movs	r3, #16
    4fda:	40a3      	lsls	r3, r4
    4fdc:	421a      	tst	r2, r3
    4fde:	bf14      	ite	ne
    4fe0:	2001      	movne	r0, #1
    4fe2:	2000      	moveq	r0, #0
}
    4fe4:	bc70      	pop	{r4, r5, r6}
    4fe6:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4fe8:	2510      	movs	r5, #16
    4fea:	40a5      	lsls	r5, r4
    4fec:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4fee:	493a      	ldr	r1, [pc, #232]	; (50d8 <_usb_d_dev_ep_stall+0x144>)
    4ff0:	009e      	lsls	r6, r3, #2
    4ff2:	18f2      	adds	r2, r6, r3
    4ff4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4ff8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4ffc:	f002 020f 	and.w	r2, r2, #15
    5000:	0150      	lsls	r0, r2, #5
    5002:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5006:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    500a:	2020      	movs	r0, #32
    500c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    5010:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5012:	0152      	lsls	r2, r2, #5
    5014:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5018:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    501c:	4433      	add	r3, r6
    501e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5022:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    5026:	f042 0208 	orr.w	r2, r2, #8
    502a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    502e:	2000      	movs	r0, #0
    5030:	e7d8      	b.n	4fe4 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    5032:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5036:	4928      	ldr	r1, [pc, #160]	; (50d8 <_usb_d_dev_ep_stall+0x144>)
    5038:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    503c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    5040:	f002 020f 	and.w	r2, r2, #15
    5044:	0151      	lsls	r1, r2, #5
    5046:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    504a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    504e:	2010      	movs	r0, #16
    5050:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    5052:	4205      	tst	r5, r0
    5054:	d03c      	beq.n	50d0 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5056:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5058:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    505c:	2020      	movs	r0, #32
    505e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    5060:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5062:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5066:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    506a:	4202      	tst	r2, r0
    506c:	d007      	beq.n	507e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    506e:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    5072:	2201      	movs	r2, #1
    5074:	fa02 f404 	lsl.w	r4, r2, r4
    5078:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    507a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    507e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5082:	4815      	ldr	r0, [pc, #84]	; (50d8 <_usb_d_dev_ep_stall+0x144>)
    5084:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5088:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    508c:	f002 0207 	and.w	r2, r2, #7
    5090:	2a01      	cmp	r2, #1
    5092:	d00c      	beq.n	50ae <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    5094:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5098:	4a0f      	ldr	r2, [pc, #60]	; (50d8 <_usb_d_dev_ep_stall+0x144>)
    509a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    509e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    50a2:	f36f 02c3 	bfc	r2, #3, #1
    50a6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    50aa:	2000      	movs	r0, #0
    50ac:	e79a      	b.n	4fe4 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    50ae:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    50b2:	f012 0f30 	tst.w	r2, #48	; 0x30
    50b6:	d10d      	bne.n	50d4 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    50b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    50bc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    50c0:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    50c4:	f36f 02c3 	bfc	r2, #3, #1
    50c8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    50cc:	2000      	movs	r0, #0
    50ce:	e789      	b.n	4fe4 <_usb_d_dev_ep_stall+0x50>
    50d0:	2000      	movs	r0, #0
    50d2:	e787      	b.n	4fe4 <_usb_d_dev_ep_stall+0x50>
    50d4:	2000      	movs	r0, #0
    50d6:	e785      	b.n	4fe4 <_usb_d_dev_ep_stall+0x50>
    50d8:	20000b2c 	.word	0x20000b2c

000050dc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    50dc:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    50de:	f000 040f 	and.w	r4, r0, #15
    50e2:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    50e4:	4a14      	ldr	r2, [pc, #80]	; (5138 <_usb_d_dev_ep_read_req+0x5c>)
    50e6:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    50e8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    50ea:	6840      	ldr	r0, [r0, #4]
    50ec:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    50f0:	2c02      	cmp	r4, #2
    50f2:	d817      	bhi.n	5124 <_usb_d_dev_ep_read_req+0x48>
    50f4:	b1c9      	cbz	r1, 512a <_usb_d_dev_ep_read_req+0x4e>
    50f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    50fa:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    50fe:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5100:	2a11      	cmp	r2, #17
    5102:	d115      	bne.n	5130 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5104:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5108:	f012 0f10 	tst.w	r2, #16
    510c:	d102      	bne.n	5114 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    510e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5110:	bc30      	pop	{r4, r5}
    5112:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5114:	682c      	ldr	r4, [r5, #0]
    5116:	686a      	ldr	r2, [r5, #4]
    5118:	600c      	str	r4, [r1, #0]
    511a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    511c:	2210      	movs	r2, #16
    511e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5122:	e7f5      	b.n	5110 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5124:	f06f 0011 	mvn.w	r0, #17
    5128:	e7f2      	b.n	5110 <_usb_d_dev_ep_read_req+0x34>
    512a:	f06f 0011 	mvn.w	r0, #17
    512e:	e7ef      	b.n	5110 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    5130:	f06f 0012 	mvn.w	r0, #18
    5134:	e7ec      	b.n	5110 <_usb_d_dev_ep_read_req+0x34>
    5136:	bf00      	nop
    5138:	20000b2c 	.word	0x20000b2c

0000513c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5140:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5142:	7a03      	ldrb	r3, [r0, #8]
    5144:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5146:	f013 030f 	ands.w	r3, r3, #15
    514a:	f000 80c2 	beq.w	52d2 <_usb_d_dev_ep_trans+0x196>
    514e:	2e00      	cmp	r6, #0
    5150:	bfb4      	ite	lt
    5152:	1c9a      	addlt	r2, r3, #2
    5154:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    5156:	4614      	mov	r4, r2
    5158:	4969      	ldr	r1, [pc, #420]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    515a:	f101 0760 	add.w	r7, r1, #96	; 0x60
    515e:	1c55      	adds	r5, r2, #1
    5160:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5164:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5168:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    516c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5170:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    5174:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5178:	428a      	cmp	r2, r1
    517a:	d025      	beq.n	51c8 <_usb_d_dev_ep_trans+0x8c>
    517c:	1e55      	subs	r5, r2, #1
    517e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    5180:	6841      	ldr	r1, [r0, #4]
    5182:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    5184:	2b02      	cmp	r3, #2
    5186:	f200 8092 	bhi.w	52ae <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    518a:	6803      	ldr	r3, [r0, #0]
    518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5190:	d31c      	bcc.n	51cc <_usb_d_dev_ep_trans+0x90>
    5192:	eb03 0c01 	add.w	ip, r3, r1
    5196:	f8df e180 	ldr.w	lr, [pc, #384]	; 5318 <_usb_d_dev_ep_trans+0x1dc>
    519a:	45f4      	cmp	ip, lr
    519c:	d816      	bhi.n	51cc <_usb_d_dev_ep_trans+0x90>
    519e:	f013 0f03 	tst.w	r3, #3
    51a2:	d113      	bne.n	51cc <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    51a4:	2e00      	cmp	r6, #0
    51a6:	db2a      	blt.n	51fe <_usb_d_dev_ep_trans+0xc2>
    51a8:	428a      	cmp	r2, r1
    51aa:	f200 809c 	bhi.w	52e6 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    51ae:	b34d      	cbz	r5, 5204 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    51b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    51b4:	4a52      	ldr	r2, [pc, #328]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    51b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    51ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    51be:	2b00      	cmp	r3, #0
    51c0:	d07b      	beq.n	52ba <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    51c2:	f04f 0800 	mov.w	r8, #0
    51c6:	e00c      	b.n	51e2 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    51c8:	4615      	mov	r5, r2
    51ca:	e7d9      	b.n	5180 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    51cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    51d0:	4a4b      	ldr	r2, [pc, #300]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    51d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    51d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    51da:	2b00      	cmp	r3, #0
    51dc:	d06a      	beq.n	52b4 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    51de:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    51e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    51e6:	4a46      	ldr	r2, [pc, #280]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    51e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    51ec:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    51f0:	f013 0f08 	tst.w	r3, #8
    51f4:	d009      	beq.n	520a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    51f6:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    51f8:	b003      	add	sp, #12
    51fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    51fe:	f04f 0800 	mov.w	r8, #0
    5202:	e7ee      	b.n	51e2 <_usb_d_dev_ep_trans+0xa6>
    5204:	f04f 0800 	mov.w	r8, #0
    5208:	e7eb      	b.n	51e2 <_usb_d_dev_ep_trans+0xa6>
    520a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    520c:	a801      	add	r0, sp, #4
    520e:	4b3d      	ldr	r3, [pc, #244]	; (5304 <_usb_d_dev_ep_trans+0x1c8>)
    5210:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5212:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5216:	4a3a      	ldr	r2, [pc, #232]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    5218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    521c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    5220:	f013 0f40 	tst.w	r3, #64	; 0x40
    5224:	d13c      	bne.n	52a0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5226:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    522a:	4b35      	ldr	r3, [pc, #212]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    522c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5230:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    5234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5238:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    523c:	a801      	add	r0, sp, #4
    523e:	4b32      	ldr	r3, [pc, #200]	; (5308 <_usb_d_dev_ep_trans+0x1cc>)
    5240:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5242:	f8da 3000 	ldr.w	r3, [sl]
    5246:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    524a:	f8da 3004 	ldr.w	r3, [sl, #4]
    524e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    5252:	2300      	movs	r3, #0
    5254:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    5258:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    525a:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    525e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    5262:	f368 1345 	bfi	r3, r8, #5, #1
    5266:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    526a:	f89a 3009 	ldrb.w	r3, [sl, #9]
    526e:	b1e3      	cbz	r3, 52aa <_usb_d_dev_ep_trans+0x16e>
    5270:	fab5 f585 	clz	r5, r5
    5274:	096d      	lsrs	r5, r5, #5
    5276:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    527a:	4b21      	ldr	r3, [pc, #132]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    527c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5280:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    5284:	f365 1304 	bfi	r3, r5, #4, #1
    5288:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    528c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    528e:	f04f 0100 	mov.w	r1, #0
    5292:	4638      	mov	r0, r7
    5294:	bfb4      	ite	lt
    5296:	4b1d      	ldrlt	r3, [pc, #116]	; (530c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    5298:	4b1d      	ldrge	r3, [pc, #116]	; (5310 <_usb_d_dev_ep_trans+0x1d4>)
    529a:	4798      	blx	r3
	return ERR_NONE;
    529c:	2000      	movs	r0, #0
    529e:	e7ab      	b.n	51f8 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    52a0:	a801      	add	r0, sp, #4
    52a2:	4b19      	ldr	r3, [pc, #100]	; (5308 <_usb_d_dev_ep_trans+0x1cc>)
    52a4:	4798      	blx	r3
		return USB_BUSY;
    52a6:	2001      	movs	r0, #1
    52a8:	e7a6      	b.n	51f8 <_usb_d_dev_ep_trans+0xbc>
    52aa:	2500      	movs	r5, #0
    52ac:	e7e3      	b.n	5276 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    52ae:	f06f 0011 	mvn.w	r0, #17
    52b2:	e7a1      	b.n	51f8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    52b4:	f06f 0012 	mvn.w	r0, #18
    52b8:	e79e      	b.n	51f8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    52ba:	f06f 0011 	mvn.w	r0, #17
    52be:	e79b      	b.n	51f8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    52c0:	f06f 0012 	mvn.w	r0, #18
    52c4:	e798      	b.n	51f8 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    52c6:	6841      	ldr	r1, [r0, #4]
    52c8:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    52cc:	4f11      	ldr	r7, [pc, #68]	; (5314 <_usb_d_dev_ep_trans+0x1d8>)
    52ce:	2400      	movs	r4, #0
    52d0:	e75b      	b.n	518a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    52d2:	4a0b      	ldr	r2, [pc, #44]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    52d4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    52d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    52dc:	428a      	cmp	r2, r1
    52de:	d0f2      	beq.n	52c6 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    52e0:	4f0c      	ldr	r7, [pc, #48]	; (5314 <_usb_d_dev_ep_trans+0x1d8>)
    52e2:	2400      	movs	r4, #0
    52e4:	e74a      	b.n	517c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    52e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    52ea:	4a05      	ldr	r2, [pc, #20]	; (5300 <_usb_d_dev_ep_trans+0x1c4>)
    52ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    52f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    52f4:	2b00      	cmp	r3, #0
    52f6:	d0e3      	beq.n	52c0 <_usb_d_dev_ep_trans+0x184>
    52f8:	f04f 0801 	mov.w	r8, #1
    52fc:	e771      	b.n	51e2 <_usb_d_dev_ep_trans+0xa6>
    52fe:	bf00      	nop
    5300:	20000b2c 	.word	0x20000b2c
    5304:	00002f81 	.word	0x00002f81
    5308:	00002f8f 	.word	0x00002f8f
    530c:	0000439d 	.word	0x0000439d
    5310:	00004521 	.word	0x00004521
    5314:	20000ba0 	.word	0x20000ba0
    5318:	20041fff 	.word	0x20041fff

0000531c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    531c:	4b06      	ldr	r3, [pc, #24]	; (5338 <_usb_d_dev_register_callback+0x1c>)
    531e:	2900      	cmp	r1, #0
    5320:	bf08      	it	eq
    5322:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5324:	2801      	cmp	r0, #1
    5326:	d003      	beq.n	5330 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5328:	b908      	cbnz	r0, 532e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    532a:	4b04      	ldr	r3, [pc, #16]	; (533c <_usb_d_dev_register_callback+0x20>)
    532c:	6619      	str	r1, [r3, #96]	; 0x60
    532e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5330:	4b02      	ldr	r3, [pc, #8]	; (533c <_usb_d_dev_register_callback+0x20>)
    5332:	6659      	str	r1, [r3, #100]	; 0x64
    5334:	4770      	bx	lr
    5336:	bf00      	nop
    5338:	00004115 	.word	0x00004115
    533c:	20000b2c 	.word	0x20000b2c

00005340 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5340:	4b09      	ldr	r3, [pc, #36]	; (5368 <_usb_d_dev_register_ep_callback+0x28>)
    5342:	2900      	cmp	r1, #0
    5344:	bf08      	it	eq
    5346:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5348:	4603      	mov	r3, r0
    534a:	b130      	cbz	r0, 535a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    534c:	2801      	cmp	r0, #1
    534e:	d007      	beq.n	5360 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    5350:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    5352:	bf04      	itt	eq
    5354:	4b05      	ldreq	r3, [pc, #20]	; (536c <_usb_d_dev_register_ep_callback+0x2c>)
    5356:	6719      	streq	r1, [r3, #112]	; 0x70
    5358:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    535a:	4b04      	ldr	r3, [pc, #16]	; (536c <_usb_d_dev_register_ep_callback+0x2c>)
    535c:	6699      	str	r1, [r3, #104]	; 0x68
    535e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    5360:	4b02      	ldr	r3, [pc, #8]	; (536c <_usb_d_dev_register_ep_callback+0x2c>)
    5362:	66d9      	str	r1, [r3, #108]	; 0x6c
    5364:	4770      	bx	lr
    5366:	bf00      	nop
    5368:	00004115 	.word	0x00004115
    536c:	20000b2c 	.word	0x20000b2c

00005370 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    5370:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5372:	4b01      	ldr	r3, [pc, #4]	; (5378 <USB_0_Handler+0x8>)
    5374:	4798      	blx	r3
    5376:	bd08      	pop	{r3, pc}
    5378:	00004711 	.word	0x00004711

0000537c <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    537c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    537e:	4b01      	ldr	r3, [pc, #4]	; (5384 <USB_1_Handler+0x8>)
    5380:	4798      	blx	r3
    5382:	bd08      	pop	{r3, pc}
    5384:	00004711 	.word	0x00004711

00005388 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    5388:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    538a:	4b01      	ldr	r3, [pc, #4]	; (5390 <USB_2_Handler+0x8>)
    538c:	4798      	blx	r3
    538e:	bd08      	pop	{r3, pc}
    5390:	00004711 	.word	0x00004711

00005394 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    5394:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5396:	4b01      	ldr	r3, [pc, #4]	; (539c <USB_3_Handler+0x8>)
    5398:	4798      	blx	r3
    539a:	bd08      	pop	{r3, pc}
    539c:	00004711 	.word	0x00004711

000053a0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    53a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53a2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    53a4:	780b      	ldrb	r3, [r1, #0]
    53a6:	f3c3 1441 	ubfx	r4, r3, #5, #2
    53aa:	2c01      	cmp	r4, #1
    53ac:	d15e      	bne.n	546c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    53ae:	888c      	ldrh	r4, [r1, #4]
    53b0:	4d35      	ldr	r5, [pc, #212]	; (5488 <cdcdf_acm_req+0xe8>)
    53b2:	782d      	ldrb	r5, [r5, #0]
    53b4:	42a5      	cmp	r5, r4
    53b6:	d003      	beq.n	53c0 <cdcdf_acm_req+0x20>
    53b8:	4d33      	ldr	r5, [pc, #204]	; (5488 <cdcdf_acm_req+0xe8>)
    53ba:	786d      	ldrb	r5, [r5, #1]
    53bc:	42a5      	cmp	r5, r4
    53be:	d158      	bne.n	5472 <cdcdf_acm_req+0xd2>
    53c0:	4616      	mov	r6, r2
    53c2:	460c      	mov	r4, r1
    53c4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    53c6:	f013 0f80 	tst.w	r3, #128	; 0x80
    53ca:	d10c      	bne.n	53e6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    53cc:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    53ce:	4b2f      	ldr	r3, [pc, #188]	; (548c <cdcdf_acm_req+0xec>)
    53d0:	4798      	blx	r3
    53d2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    53d4:	7863      	ldrb	r3, [r4, #1]
    53d6:	2b20      	cmp	r3, #32
    53d8:	d013      	beq.n	5402 <cdcdf_acm_req+0x62>
    53da:	2b22      	cmp	r3, #34	; 0x22
    53dc:	d032      	beq.n	5444 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    53de:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    53e2:	b003      	add	sp, #12
    53e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    53e6:	2a01      	cmp	r2, #1
    53e8:	d046      	beq.n	5478 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    53ea:	784b      	ldrb	r3, [r1, #1]
    53ec:	2b21      	cmp	r3, #33	; 0x21
    53ee:	d145      	bne.n	547c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    53f0:	88cb      	ldrh	r3, [r1, #6]
    53f2:	2b07      	cmp	r3, #7
    53f4:	d145      	bne.n	5482 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    53f6:	2300      	movs	r3, #0
    53f8:	2207      	movs	r2, #7
    53fa:	4925      	ldr	r1, [pc, #148]	; (5490 <cdcdf_acm_req+0xf0>)
    53fc:	4c25      	ldr	r4, [pc, #148]	; (5494 <cdcdf_acm_req+0xf4>)
    53fe:	47a0      	blx	r4
    5400:	e7ef      	b.n	53e2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5402:	2f07      	cmp	r7, #7
    5404:	d12b      	bne.n	545e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    5406:	b1be      	cbz	r6, 5438 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    5408:	6800      	ldr	r0, [r0, #0]
    540a:	9000      	str	r0, [sp, #0]
    540c:	888a      	ldrh	r2, [r1, #4]
    540e:	798b      	ldrb	r3, [r1, #6]
    5410:	f8ad 2004 	strh.w	r2, [sp, #4]
    5414:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5418:	4b1b      	ldr	r3, [pc, #108]	; (5488 <cdcdf_acm_req+0xe8>)
    541a:	691b      	ldr	r3, [r3, #16]
    541c:	b113      	cbz	r3, 5424 <cdcdf_acm_req+0x84>
    541e:	4668      	mov	r0, sp
    5420:	4798      	blx	r3
    5422:	b1f8      	cbz	r0, 5464 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    5424:	4b18      	ldr	r3, [pc, #96]	; (5488 <cdcdf_acm_req+0xe8>)
    5426:	aa02      	add	r2, sp, #8
    5428:	e912 0003 	ldmdb	r2, {r0, r1}
    542c:	6098      	str	r0, [r3, #8]
    542e:	8199      	strh	r1, [r3, #12]
    5430:	0c09      	lsrs	r1, r1, #16
    5432:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    5434:	2000      	movs	r0, #0
    5436:	e7d4      	b.n	53e2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    5438:	2300      	movs	r3, #0
    543a:	2207      	movs	r2, #7
    543c:	4628      	mov	r0, r5
    543e:	4c15      	ldr	r4, [pc, #84]	; (5494 <cdcdf_acm_req+0xf4>)
    5440:	47a0      	blx	r4
    5442:	e7ce      	b.n	53e2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    5444:	2300      	movs	r3, #0
    5446:	461a      	mov	r2, r3
    5448:	4619      	mov	r1, r3
    544a:	4618      	mov	r0, r3
    544c:	4d11      	ldr	r5, [pc, #68]	; (5494 <cdcdf_acm_req+0xf4>)
    544e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    5450:	4b0d      	ldr	r3, [pc, #52]	; (5488 <cdcdf_acm_req+0xe8>)
    5452:	695b      	ldr	r3, [r3, #20]
    5454:	b143      	cbz	r3, 5468 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    5456:	8860      	ldrh	r0, [r4, #2]
    5458:	4798      	blx	r3
		return ERR_NONE;
    545a:	2000      	movs	r0, #0
    545c:	e7c1      	b.n	53e2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    545e:	f04f 30ff 	mov.w	r0, #4294967295
    5462:	e7be      	b.n	53e2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    5464:	2000      	movs	r0, #0
    5466:	e7bc      	b.n	53e2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    5468:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    546a:	e7ba      	b.n	53e2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    546c:	f06f 0009 	mvn.w	r0, #9
    5470:	e7b7      	b.n	53e2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5472:	f06f 0009 	mvn.w	r0, #9
    5476:	e7b4      	b.n	53e2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    5478:	2000      	movs	r0, #0
    547a:	e7b2      	b.n	53e2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    547c:	f06f 000c 	mvn.w	r0, #12
    5480:	e7af      	b.n	53e2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5482:	f04f 30ff 	mov.w	r0, #4294967295
    5486:	e7ac      	b.n	53e2 <cdcdf_acm_req+0x42>
    5488:	20000d14 	.word	0x20000d14
    548c:	00005dc5 	.word	0x00005dc5
    5490:	20000d1c 	.word	0x20000d1c
    5494:	000058a1 	.word	0x000058a1

00005498 <cdcdf_acm_ctrl>:
{
    5498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    549c:	b083      	sub	sp, #12
    549e:	4616      	mov	r6, r2
	switch (ctrl) {
    54a0:	2901      	cmp	r1, #1
    54a2:	d066      	beq.n	5572 <cdcdf_acm_ctrl+0xda>
    54a4:	b141      	cbz	r1, 54b8 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    54a6:	2902      	cmp	r1, #2
    54a8:	bf0c      	ite	eq
    54aa:	f06f 001a 	mvneq.w	r0, #26
    54ae:	f06f 000c 	mvnne.w	r0, #12
}
    54b2:	b003      	add	sp, #12
    54b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    54b8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    54bc:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    54be:	2800      	cmp	r0, #0
    54c0:	f000 8085 	beq.w	55ce <cdcdf_acm_ctrl+0x136>
    54c4:	f10a 3bff 	add.w	fp, sl, #4294967295
    54c8:	f10a 0301 	add.w	r3, sl, #1
    54cc:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    54ce:	4f46      	ldr	r7, [pc, #280]	; (55e8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    54d0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 55f8 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    54d4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 55fc <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    54d8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    54da:	7943      	ldrb	r3, [r0, #5]
    54dc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    54e0:	2b02      	cmp	r3, #2
    54e2:	d002      	beq.n	54ea <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    54e4:	f06f 0009 	mvn.w	r0, #9
    54e8:	e7e3      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
    54ea:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    54ee:	f89b 3000 	ldrb.w	r3, [fp]
    54f2:	429a      	cmp	r2, r3
    54f4:	d06e      	beq.n	55d4 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    54f6:	2bff      	cmp	r3, #255	; 0xff
    54f8:	d16f      	bne.n	55da <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    54fa:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    54fe:	2205      	movs	r2, #5
    5500:	6871      	ldr	r1, [r6, #4]
    5502:	4b3a      	ldr	r3, [pc, #232]	; (55ec <cdcdf_acm_ctrl+0x154>)
    5504:	4798      	blx	r3
		while (NULL != ep) {
    5506:	4604      	mov	r4, r0
    5508:	b1f8      	cbz	r0, 554a <cdcdf_acm_ctrl+0xb2>
    550a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    550e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    5510:	7963      	ldrb	r3, [r4, #5]
    5512:	7922      	ldrb	r2, [r4, #4]
    5514:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5518:	b292      	uxth	r2, r2
    551a:	78e1      	ldrb	r1, [r4, #3]
    551c:	4628      	mov	r0, r5
    551e:	47b8      	blx	r7
    5520:	2800      	cmp	r0, #0
    5522:	d15d      	bne.n	55e0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    5524:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    5528:	bf14      	ite	ne
    552a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    552e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    5532:	4628      	mov	r0, r5
    5534:	47c8      	blx	r9
			desc->sod = ep;
    5536:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    5538:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    553a:	6871      	ldr	r1, [r6, #4]
    553c:	4420      	add	r0, r4
    553e:	47c0      	blx	r8
		while (NULL != ep) {
    5540:	4604      	mov	r4, r0
    5542:	2800      	cmp	r0, #0
    5544:	d1e3      	bne.n	550e <cdcdf_acm_ctrl+0x76>
    5546:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    554a:	6833      	ldr	r3, [r6, #0]
    554c:	7818      	ldrb	r0, [r3, #0]
    554e:	2204      	movs	r2, #4
    5550:	6871      	ldr	r1, [r6, #4]
    5552:	4418      	add	r0, r3
    5554:	4b25      	ldr	r3, [pc, #148]	; (55ec <cdcdf_acm_ctrl+0x154>)
    5556:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    5558:	9b00      	ldr	r3, [sp, #0]
    555a:	459b      	cmp	fp, r3
    555c:	d004      	beq.n	5568 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    555e:	2800      	cmp	r0, #0
    5560:	d1ba      	bne.n	54d8 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    5562:	f06f 0009 	mvn.w	r0, #9
    5566:	e7a4      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    5568:	2201      	movs	r2, #1
    556a:	4b21      	ldr	r3, [pc, #132]	; (55f0 <cdcdf_acm_ctrl+0x158>)
    556c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    556e:	2000      	movs	r0, #0
    5570:	e79f      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5572:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    5574:	b142      	cbz	r2, 5588 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    5576:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    5578:	795b      	ldrb	r3, [r3, #5]
    557a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    557e:	2b02      	cmp	r3, #2
    5580:	d002      	beq.n	5588 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    5582:	f06f 0009 	mvn.w	r0, #9
    5586:	e794      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    5588:	7823      	ldrb	r3, [r4, #0]
    558a:	2bff      	cmp	r3, #255	; 0xff
    558c:	d008      	beq.n	55a0 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    558e:	23ff      	movs	r3, #255	; 0xff
    5590:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    5592:	78a0      	ldrb	r0, [r4, #2]
    5594:	4298      	cmp	r0, r3
    5596:	d003      	beq.n	55a0 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    5598:	4b16      	ldr	r3, [pc, #88]	; (55f4 <cdcdf_acm_ctrl+0x15c>)
    559a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    559c:	23ff      	movs	r3, #255	; 0xff
    559e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    55a0:	7863      	ldrb	r3, [r4, #1]
    55a2:	2bff      	cmp	r3, #255	; 0xff
    55a4:	d008      	beq.n	55b8 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    55a6:	23ff      	movs	r3, #255	; 0xff
    55a8:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    55aa:	78e0      	ldrb	r0, [r4, #3]
    55ac:	4298      	cmp	r0, r3
    55ae:	d003      	beq.n	55b8 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    55b0:	4b10      	ldr	r3, [pc, #64]	; (55f4 <cdcdf_acm_ctrl+0x15c>)
    55b2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    55b4:	23ff      	movs	r3, #255	; 0xff
    55b6:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    55b8:	7920      	ldrb	r0, [r4, #4]
    55ba:	28ff      	cmp	r0, #255	; 0xff
    55bc:	d003      	beq.n	55c6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    55be:	4b0d      	ldr	r3, [pc, #52]	; (55f4 <cdcdf_acm_ctrl+0x15c>)
    55c0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    55c2:	23ff      	movs	r3, #255	; 0xff
    55c4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    55c6:	2000      	movs	r0, #0
    55c8:	4b09      	ldr	r3, [pc, #36]	; (55f0 <cdcdf_acm_ctrl+0x158>)
    55ca:	7158      	strb	r0, [r3, #5]
    55cc:	e771      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    55ce:	f06f 0009 	mvn.w	r0, #9
    55d2:	e76e      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    55d4:	f06f 0011 	mvn.w	r0, #17
    55d8:	e76b      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    55da:	f06f 001b 	mvn.w	r0, #27
    55de:	e768      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    55e0:	f06f 0013 	mvn.w	r0, #19
    55e4:	e765      	b.n	54b2 <cdcdf_acm_ctrl+0x1a>
    55e6:	bf00      	nop
    55e8:	000036b5 	.word	0x000036b5
    55ec:	00005de5 	.word	0x00005de5
    55f0:	20000d14 	.word	0x20000d14
    55f4:	0000371d 	.word	0x0000371d
    55f8:	00003749 	.word	0x00003749
    55fc:	00005e1f 	.word	0x00005e1f

00005600 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    5600:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    5602:	4b0a      	ldr	r3, [pc, #40]	; (562c <cdcdf_acm_init+0x2c>)
    5604:	4798      	blx	r3
    5606:	2801      	cmp	r0, #1
    5608:	d80c      	bhi.n	5624 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    560a:	4809      	ldr	r0, [pc, #36]	; (5630 <cdcdf_acm_init+0x30>)
    560c:	4b09      	ldr	r3, [pc, #36]	; (5634 <cdcdf_acm_init+0x34>)
    560e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    5610:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    5612:	3018      	adds	r0, #24
    5614:	4b08      	ldr	r3, [pc, #32]	; (5638 <cdcdf_acm_init+0x38>)
    5616:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    5618:	4908      	ldr	r1, [pc, #32]	; (563c <cdcdf_acm_init+0x3c>)
    561a:	2001      	movs	r0, #1
    561c:	4b08      	ldr	r3, [pc, #32]	; (5640 <cdcdf_acm_init+0x40>)
    561e:	4798      	blx	r3
	return ERR_NONE;
    5620:	2000      	movs	r0, #0
    5622:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    5624:	f06f 0010 	mvn.w	r0, #16
}
    5628:	bd08      	pop	{r3, pc}
    562a:	bf00      	nop
    562c:	00005dd1 	.word	0x00005dd1
    5630:	20000d14 	.word	0x20000d14
    5634:	00005499 	.word	0x00005499
    5638:	00005d71 	.word	0x00005d71
    563c:	2000024c 	.word	0x2000024c
    5640:	00005cdd 	.word	0x00005cdd

00005644 <cdcdf_acm_deinit>:

/**
 * \brief Deinitialize the USB CDC ACM Function Driver
 */
void cdcdf_acm_deinit(void)
{
    5644:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_COMM_EP_INDEX]);
    5646:	4d04      	ldr	r5, [pc, #16]	; (5658 <cdcdf_acm_deinit+0x14>)
    5648:	78a8      	ldrb	r0, [r5, #2]
    564a:	4c04      	ldr	r4, [pc, #16]	; (565c <cdcdf_acm_deinit+0x18>)
    564c:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    564e:	78e8      	ldrb	r0, [r5, #3]
    5650:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_out);
    5652:	7928      	ldrb	r0, [r5, #4]
    5654:	47a0      	blx	r4
    5656:	bd38      	pop	{r3, r4, r5, pc}
    5658:	20000d14 	.word	0x20000d14
    565c:	0000371d 	.word	0x0000371d

00005660 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    5660:	4b07      	ldr	r3, [pc, #28]	; (5680 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    5662:	795b      	ldrb	r3, [r3, #5]
    5664:	b143      	cbz	r3, 5678 <cdcdf_acm_read+0x18>
{
    5666:	b510      	push	{r4, lr}
    5668:	460a      	mov	r2, r1
    566a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    566c:	2300      	movs	r3, #0
    566e:	4804      	ldr	r0, [pc, #16]	; (5680 <cdcdf_acm_read+0x20>)
    5670:	7900      	ldrb	r0, [r0, #4]
    5672:	4c04      	ldr	r4, [pc, #16]	; (5684 <cdcdf_acm_read+0x24>)
    5674:	47a0      	blx	r4
    5676:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    5678:	f06f 0010 	mvn.w	r0, #16
    567c:	4770      	bx	lr
    567e:	bf00      	nop
    5680:	20000d14 	.word	0x20000d14
    5684:	000058a1 	.word	0x000058a1

00005688 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    5688:	4b07      	ldr	r3, [pc, #28]	; (56a8 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    568a:	795b      	ldrb	r3, [r3, #5]
    568c:	b143      	cbz	r3, 56a0 <cdcdf_acm_write+0x18>
{
    568e:	b510      	push	{r4, lr}
    5690:	460a      	mov	r2, r1
    5692:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    5694:	2301      	movs	r3, #1
    5696:	4804      	ldr	r0, [pc, #16]	; (56a8 <cdcdf_acm_write+0x20>)
    5698:	78c0      	ldrb	r0, [r0, #3]
    569a:	4c04      	ldr	r4, [pc, #16]	; (56ac <cdcdf_acm_write+0x24>)
    569c:	47a0      	blx	r4
    569e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    56a0:	f06f 0010 	mvn.w	r0, #16
    56a4:	4770      	bx	lr
    56a6:	bf00      	nop
    56a8:	20000d14 	.word	0x20000d14
    56ac:	000058a1 	.word	0x000058a1

000056b0 <cdcdf_acm_register_callback>:
{
    56b0:	b508      	push	{r3, lr}
	switch (cb_type) {
    56b2:	2803      	cmp	r0, #3
    56b4:	d81b      	bhi.n	56ee <cdcdf_acm_register_callback+0x3e>
    56b6:	e8df f000 	tbb	[pc, r0]
    56ba:	0a02      	.short	0x0a02
    56bc:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    56be:	460a      	mov	r2, r1
    56c0:	2102      	movs	r1, #2
    56c2:	4b0c      	ldr	r3, [pc, #48]	; (56f4 <cdcdf_acm_register_callback+0x44>)
    56c4:	7918      	ldrb	r0, [r3, #4]
    56c6:	4b0c      	ldr	r3, [pc, #48]	; (56f8 <cdcdf_acm_register_callback+0x48>)
    56c8:	4798      	blx	r3
	return ERR_NONE;
    56ca:	2000      	movs	r0, #0
		break;
    56cc:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    56ce:	460a      	mov	r2, r1
    56d0:	2102      	movs	r1, #2
    56d2:	4b08      	ldr	r3, [pc, #32]	; (56f4 <cdcdf_acm_register_callback+0x44>)
    56d4:	78d8      	ldrb	r0, [r3, #3]
    56d6:	4b08      	ldr	r3, [pc, #32]	; (56f8 <cdcdf_acm_register_callback+0x48>)
    56d8:	4798      	blx	r3
	return ERR_NONE;
    56da:	2000      	movs	r0, #0
		break;
    56dc:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    56de:	4b05      	ldr	r3, [pc, #20]	; (56f4 <cdcdf_acm_register_callback+0x44>)
    56e0:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    56e2:	2000      	movs	r0, #0
		break;
    56e4:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    56e6:	4b03      	ldr	r3, [pc, #12]	; (56f4 <cdcdf_acm_register_callback+0x44>)
    56e8:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    56ea:	2000      	movs	r0, #0
		break;
    56ec:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    56ee:	f06f 000c 	mvn.w	r0, #12
}
    56f2:	bd08      	pop	{r3, pc}
    56f4:	20000d14 	.word	0x20000d14
    56f8:	0000391d 	.word	0x0000391d

000056fc <cdcdf_acm_is_enabled>:
}
    56fc:	4b01      	ldr	r3, [pc, #4]	; (5704 <cdcdf_acm_is_enabled+0x8>)
    56fe:	7958      	ldrb	r0, [r3, #5]
    5700:	4770      	bx	lr
    5702:	bf00      	nop
    5704:	20000d14 	.word	0x20000d14

00005708 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    5708:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    570a:	4b07      	ldr	r3, [pc, #28]	; (5728 <usbdc_unconfig+0x20>)
    570c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    570e:	b14c      	cbz	r4, 5724 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    5710:	2600      	movs	r6, #0
    5712:	2501      	movs	r5, #1
    5714:	6863      	ldr	r3, [r4, #4]
    5716:	4632      	mov	r2, r6
    5718:	4629      	mov	r1, r5
    571a:	4620      	mov	r0, r4
    571c:	4798      	blx	r3
		func = func->next;
    571e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    5720:	2c00      	cmp	r4, #0
    5722:	d1f7      	bne.n	5714 <usbdc_unconfig+0xc>
    5724:	bd70      	pop	{r4, r5, r6, pc}
    5726:	bf00      	nop
    5728:	20000d38 	.word	0x20000d38

0000572c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    572c:	b570      	push	{r4, r5, r6, lr}
    572e:	4606      	mov	r6, r0
    5730:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    5732:	4b07      	ldr	r3, [pc, #28]	; (5750 <usbdc_change_notify+0x24>)
    5734:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    5736:	b91c      	cbnz	r4, 5740 <usbdc_change_notify+0x14>
    5738:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    573a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    573c:	2c00      	cmp	r4, #0
    573e:	d0fb      	beq.n	5738 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    5740:	6863      	ldr	r3, [r4, #4]
    5742:	2b00      	cmp	r3, #0
    5744:	d0f9      	beq.n	573a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    5746:	4629      	mov	r1, r5
    5748:	4630      	mov	r0, r6
    574a:	4798      	blx	r3
    574c:	e7f5      	b.n	573a <usbdc_change_notify+0xe>
    574e:	bf00      	nop
    5750:	20000d38 	.word	0x20000d38

00005754 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5756:	4607      	mov	r7, r0
    5758:	460e      	mov	r6, r1
    575a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    575c:	4b0c      	ldr	r3, [pc, #48]	; (5790 <usbdc_request_handler+0x3c>)
    575e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    5760:	b91c      	cbnz	r4, 576a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    5762:	2000      	movs	r0, #0
    5764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    5766:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    5768:	b16c      	cbz	r4, 5786 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    576a:	6863      	ldr	r3, [r4, #4]
    576c:	2b00      	cmp	r3, #0
    576e:	d0fa      	beq.n	5766 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    5770:	462a      	mov	r2, r5
    5772:	4631      	mov	r1, r6
    5774:	4638      	mov	r0, r7
    5776:	4798      	blx	r3
			if (0 == rc) {
    5778:	b138      	cbz	r0, 578a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    577a:	f110 0f0a 	cmn.w	r0, #10
    577e:	d0f2      	beq.n	5766 <usbdc_request_handler+0x12>
				return -1;
    5780:	f04f 30ff 	mov.w	r0, #4294967295
}
    5784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    5786:	2000      	movs	r0, #0
    5788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    578a:	2001      	movs	r0, #1
    578c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    578e:	bf00      	nop
    5790:	20000d38 	.word	0x20000d38

00005794 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    5794:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    5796:	4b06      	ldr	r3, [pc, #24]	; (57b0 <usbd_sof_cb+0x1c>)
    5798:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    579a:	b91c      	cbnz	r4, 57a4 <usbd_sof_cb+0x10>
    579c:	bd10      	pop	{r4, pc}
		sof = sof->next;
    579e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    57a0:	2c00      	cmp	r4, #0
    57a2:	d0fb      	beq.n	579c <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    57a4:	6863      	ldr	r3, [r4, #4]
    57a6:	2b00      	cmp	r3, #0
    57a8:	d0f9      	beq.n	579e <usbd_sof_cb+0xa>
			sof->cb();
    57aa:	4798      	blx	r3
    57ac:	e7f7      	b.n	579e <usbd_sof_cb+0xa>
    57ae:	bf00      	nop
    57b0:	20000d38 	.word	0x20000d38

000057b4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    57b4:	b510      	push	{r4, lr}
    57b6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    57b8:	b119      	cbz	r1, 57c2 <usbdc_cb_ctl_done+0xe>
    57ba:	2901      	cmp	r1, #1
    57bc:	d026      	beq.n	580c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    57be:	2000      	movs	r0, #0
    57c0:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    57c2:	7813      	ldrb	r3, [r2, #0]
    57c4:	2b00      	cmp	r3, #0
    57c6:	d1fa      	bne.n	57be <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    57c8:	7853      	ldrb	r3, [r2, #1]
    57ca:	2b05      	cmp	r3, #5
    57cc:	d00f      	beq.n	57ee <usbdc_cb_ctl_done+0x3a>
    57ce:	2b09      	cmp	r3, #9
    57d0:	d1f5      	bne.n	57be <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    57d2:	8852      	ldrh	r2, [r2, #2]
    57d4:	4b10      	ldr	r3, [pc, #64]	; (5818 <usbdc_cb_ctl_done+0x64>)
    57d6:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    57d8:	8863      	ldrh	r3, [r4, #2]
    57da:	2b00      	cmp	r3, #0
    57dc:	bf14      	ite	ne
    57de:	2104      	movne	r1, #4
    57e0:	2103      	moveq	r1, #3
    57e2:	4b0d      	ldr	r3, [pc, #52]	; (5818 <usbdc_cb_ctl_done+0x64>)
    57e4:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    57e6:	2001      	movs	r0, #1
    57e8:	4b0c      	ldr	r3, [pc, #48]	; (581c <usbdc_cb_ctl_done+0x68>)
    57ea:	4798      	blx	r3
    57ec:	e7e7      	b.n	57be <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    57ee:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    57f0:	b2c0      	uxtb	r0, r0
    57f2:	4b0b      	ldr	r3, [pc, #44]	; (5820 <usbdc_cb_ctl_done+0x6c>)
    57f4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    57f6:	8863      	ldrh	r3, [r4, #2]
    57f8:	2b00      	cmp	r3, #0
    57fa:	bf14      	ite	ne
    57fc:	2103      	movne	r1, #3
    57fe:	2102      	moveq	r1, #2
    5800:	4b05      	ldr	r3, [pc, #20]	; (5818 <usbdc_cb_ctl_done+0x64>)
    5802:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5804:	2001      	movs	r0, #1
    5806:	4b05      	ldr	r3, [pc, #20]	; (581c <usbdc_cb_ctl_done+0x68>)
    5808:	4798      	blx	r3
    580a:	e7d8      	b.n	57be <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    580c:	2201      	movs	r2, #1
    580e:	4621      	mov	r1, r4
    5810:	2000      	movs	r0, #0
    5812:	4b04      	ldr	r3, [pc, #16]	; (5824 <usbdc_cb_ctl_done+0x70>)
    5814:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    5816:	e7d2      	b.n	57be <usbdc_cb_ctl_done+0xa>
    5818:	20000d38 	.word	0x20000d38
    581c:	0000572d 	.word	0x0000572d
    5820:	000036a9 	.word	0x000036a9
    5824:	00005755 	.word	0x00005755

00005828 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    5828:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    582a:	4b0d      	ldr	r3, [pc, #52]	; (5860 <usbdc_reset+0x38>)
    582c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    582e:	4d0d      	ldr	r5, [pc, #52]	; (5864 <usbdc_reset+0x3c>)
    5830:	2602      	movs	r6, #2
    5832:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    5834:	2400      	movs	r4, #0
    5836:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    5838:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    583a:	4620      	mov	r0, r4
    583c:	4b0a      	ldr	r3, [pc, #40]	; (5868 <usbdc_reset+0x40>)
    583e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5840:	7f28      	ldrb	r0, [r5, #28]
    5842:	4b0a      	ldr	r3, [pc, #40]	; (586c <usbdc_reset+0x44>)
    5844:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    5846:	4a0a      	ldr	r2, [pc, #40]	; (5870 <usbdc_reset+0x48>)
    5848:	4621      	mov	r1, r4
    584a:	4620      	mov	r0, r4
    584c:	4d09      	ldr	r5, [pc, #36]	; (5874 <usbdc_reset+0x4c>)
    584e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5850:	4a09      	ldr	r2, [pc, #36]	; (5878 <usbdc_reset+0x50>)
    5852:	4631      	mov	r1, r6
    5854:	4620      	mov	r0, r4
    5856:	47a8      	blx	r5
	usb_d_ep_enable(0);
    5858:	4620      	mov	r0, r4
    585a:	4b08      	ldr	r3, [pc, #32]	; (587c <usbdc_reset+0x54>)
    585c:	4798      	blx	r3
    585e:	bd70      	pop	{r4, r5, r6, pc}
    5860:	00005709 	.word	0x00005709
    5864:	20000d38 	.word	0x20000d38
    5868:	0000371d 	.word	0x0000371d
    586c:	00003709 	.word	0x00003709
    5870:	000058c1 	.word	0x000058c1
    5874:	0000391d 	.word	0x0000391d
    5878:	000057b5 	.word	0x000057b5
    587c:	00003749 	.word	0x00003749

00005880 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5880:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    5882:	b110      	cbz	r0, 588a <usbd_event_cb+0xa>
    5884:	2801      	cmp	r0, #1
    5886:	d004      	beq.n	5892 <usbd_event_cb+0x12>
    5888:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    588a:	2000      	movs	r0, #0
    588c:	4b02      	ldr	r3, [pc, #8]	; (5898 <usbd_event_cb+0x18>)
    588e:	4798      	blx	r3
		break;
    5890:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    5892:	4b02      	ldr	r3, [pc, #8]	; (589c <usbd_event_cb+0x1c>)
    5894:	4798      	blx	r3
    5896:	bd08      	pop	{r3, pc}
    5898:	0000572d 	.word	0x0000572d
    589c:	00005829 	.word	0x00005829

000058a0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    58a0:	b500      	push	{lr}
    58a2:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    58a4:	9101      	str	r1, [sp, #4]
    58a6:	9202      	str	r2, [sp, #8]
    58a8:	f88d 000c 	strb.w	r0, [sp, #12]
    58ac:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    58b0:	a801      	add	r0, sp, #4
    58b2:	4b02      	ldr	r3, [pc, #8]	; (58bc <usbdc_xfer+0x1c>)
    58b4:	4798      	blx	r3
}
    58b6:	b005      	add	sp, #20
    58b8:	f85d fb04 	ldr.w	pc, [sp], #4
    58bc:	00003795 	.word	0x00003795

000058c0 <usbdc_cb_ctl_req>:
{
    58c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    58c4:	b083      	sub	sp, #12
    58c6:	4605      	mov	r5, r0
    58c8:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    58ca:	2200      	movs	r2, #0
    58cc:	4b9b      	ldr	r3, [pc, #620]	; (5b3c <usbdc_cb_ctl_req+0x27c>)
    58ce:	4798      	blx	r3
    58d0:	f1b0 3fff 	cmp.w	r0, #4294967295
    58d4:	d00b      	beq.n	58ee <usbdc_cb_ctl_req+0x2e>
    58d6:	2801      	cmp	r0, #1
    58d8:	f000 81e3 	beq.w	5ca2 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    58dc:	7823      	ldrb	r3, [r4, #0]
    58de:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    58e2:	d008      	beq.n	58f6 <usbdc_cb_ctl_req+0x36>
    58e4:	2a80      	cmp	r2, #128	; 0x80
    58e6:	f000 80f4 	beq.w	5ad2 <usbdc_cb_ctl_req+0x212>
		return false;
    58ea:	2000      	movs	r0, #0
    58ec:	e000      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    58ee:	2000      	movs	r0, #0
}
    58f0:	b003      	add	sp, #12
    58f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    58f6:	7862      	ldrb	r2, [r4, #1]
    58f8:	3a01      	subs	r2, #1
    58fa:	2a0a      	cmp	r2, #10
    58fc:	f200 81d3 	bhi.w	5ca6 <usbdc_cb_ctl_req+0x3e6>
    5900:	e8df f012 	tbh	[pc, r2, lsl #1]
    5904:	01d10060 	.word	0x01d10060
    5908:	01d10076 	.word	0x01d10076
    590c:	01d1000b 	.word	0x01d1000b
    5910:	01d101d1 	.word	0x01d101d1
    5914:	01d10015 	.word	0x01d10015
    5918:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    591a:	2301      	movs	r3, #1
    591c:	2200      	movs	r2, #0
    591e:	4611      	mov	r1, r2
    5920:	4628      	mov	r0, r5
    5922:	4c87      	ldr	r4, [pc, #540]	; (5b40 <usbdc_cb_ctl_req+0x280>)
    5924:	47a0      	blx	r4
    5926:	fab0 f080 	clz	r0, r0
    592a:	0940      	lsrs	r0, r0, #5
    592c:	e7e0      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    592e:	8862      	ldrh	r2, [r4, #2]
    5930:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    5932:	b1ca      	cbz	r2, 5968 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    5934:	4b83      	ldr	r3, [pc, #524]	; (5b44 <usbdc_cb_ctl_req+0x284>)
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	6859      	ldr	r1, [r3, #4]
    593a:	6818      	ldr	r0, [r3, #0]
    593c:	4b82      	ldr	r3, [pc, #520]	; (5b48 <usbdc_cb_ctl_req+0x288>)
    593e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5940:	2800      	cmp	r0, #0
    5942:	f000 81be 	beq.w	5cc2 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    5946:	78c2      	ldrb	r2, [r0, #3]
    5948:	7881      	ldrb	r1, [r0, #2]
    594a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    594e:	fa10 f181 	uxtah	r1, r0, r1
    5952:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    5954:	2204      	movs	r2, #4
    5956:	4b7d      	ldr	r3, [pc, #500]	; (5b4c <usbdc_cb_ctl_req+0x28c>)
    5958:	4798      	blx	r3
    595a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    595c:	b130      	cbz	r0, 596c <usbdc_cb_ctl_req+0xac>
    595e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    5960:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 5b44 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5964:	4f79      	ldr	r7, [pc, #484]	; (5b4c <usbdc_cb_ctl_req+0x28c>)
    5966:	e018      	b.n	599a <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    5968:	4b79      	ldr	r3, [pc, #484]	; (5b50 <usbdc_cb_ctl_req+0x290>)
    596a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    596c:	2301      	movs	r3, #1
    596e:	2200      	movs	r2, #0
    5970:	4611      	mov	r1, r2
    5972:	4628      	mov	r0, r5
    5974:	4c72      	ldr	r4, [pc, #456]	; (5b40 <usbdc_cb_ctl_req+0x280>)
    5976:	47a0      	blx	r4
    5978:	fab0 f080 	clz	r0, r0
    597c:	0940      	lsrs	r0, r0, #5
    597e:	e7b7      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    5980:	464c      	mov	r4, r9
    5982:	e000      	b.n	5986 <usbdc_cb_ctl_req+0xc6>
    5984:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    5986:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    5988:	7803      	ldrb	r3, [r0, #0]
    598a:	4418      	add	r0, r3
    598c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    598e:	2204      	movs	r2, #4
    5990:	9901      	ldr	r1, [sp, #4]
    5992:	47b8      	blx	r7
    5994:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    5996:	2800      	cmp	r0, #0
    5998:	d0e8      	beq.n	596c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    599a:	f890 9002 	ldrb.w	r9, [r0, #2]
    599e:	45a1      	cmp	r9, r4
    59a0:	d0f1      	beq.n	5986 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    59a2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    59a6:	2c00      	cmp	r4, #0
    59a8:	d0ea      	beq.n	5980 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    59aa:	2600      	movs	r6, #0
    59ac:	6863      	ldr	r3, [r4, #4]
    59ae:	466a      	mov	r2, sp
    59b0:	4631      	mov	r1, r6
    59b2:	4620      	mov	r0, r4
    59b4:	4798      	blx	r3
    59b6:	2800      	cmp	r0, #0
    59b8:	d0e4      	beq.n	5984 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    59ba:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    59bc:	2c00      	cmp	r4, #0
    59be:	d1f5      	bne.n	59ac <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    59c0:	464c      	mov	r4, r9
    59c2:	e7e0      	b.n	5986 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    59c4:	f003 031f 	and.w	r3, r3, #31
    59c8:	2b02      	cmp	r3, #2
    59ca:	f040 816e 	bne.w	5caa <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    59ce:	88e3      	ldrh	r3, [r4, #6]
    59d0:	b10b      	cbz	r3, 59d6 <usbdc_cb_ctl_req+0x116>
			return false;
    59d2:	2000      	movs	r0, #0
    59d4:	e78c      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    59d6:	88a0      	ldrh	r0, [r4, #4]
    59d8:	2100      	movs	r1, #0
    59da:	b2c0      	uxtb	r0, r0
    59dc:	4b5d      	ldr	r3, [pc, #372]	; (5b54 <usbdc_cb_ctl_req+0x294>)
    59de:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    59e0:	2301      	movs	r3, #1
    59e2:	2200      	movs	r2, #0
    59e4:	4611      	mov	r1, r2
    59e6:	4628      	mov	r0, r5
    59e8:	4c55      	ldr	r4, [pc, #340]	; (5b40 <usbdc_cb_ctl_req+0x280>)
    59ea:	47a0      	blx	r4
		return true;
    59ec:	2001      	movs	r0, #1
    59ee:	e77f      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    59f0:	f003 031f 	and.w	r3, r3, #31
    59f4:	2b02      	cmp	r3, #2
    59f6:	f040 815a 	bne.w	5cae <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    59fa:	88e3      	ldrh	r3, [r4, #6]
    59fc:	b10b      	cbz	r3, 5a02 <usbdc_cb_ctl_req+0x142>
			return false;
    59fe:	2000      	movs	r0, #0
    5a00:	e776      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    5a02:	88a0      	ldrh	r0, [r4, #4]
    5a04:	2101      	movs	r1, #1
    5a06:	b2c0      	uxtb	r0, r0
    5a08:	4b52      	ldr	r3, [pc, #328]	; (5b54 <usbdc_cb_ctl_req+0x294>)
    5a0a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5a0c:	2301      	movs	r3, #1
    5a0e:	2200      	movs	r2, #0
    5a10:	4611      	mov	r1, r2
    5a12:	4628      	mov	r0, r5
    5a14:	4c4a      	ldr	r4, [pc, #296]	; (5b40 <usbdc_cb_ctl_req+0x280>)
    5a16:	47a0      	blx	r4
		return true;
    5a18:	2001      	movs	r0, #1
    5a1a:	e769      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    5a1c:	8866      	ldrh	r6, [r4, #2]
    5a1e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5a20:	4a48      	ldr	r2, [pc, #288]	; (5b44 <usbdc_cb_ctl_req+0x284>)
    5a22:	6813      	ldr	r3, [r2, #0]
    5a24:	7ed2      	ldrb	r2, [r2, #27]
    5a26:	6859      	ldr	r1, [r3, #4]
    5a28:	6818      	ldr	r0, [r3, #0]
    5a2a:	4b47      	ldr	r3, [pc, #284]	; (5b48 <usbdc_cb_ctl_req+0x288>)
    5a2c:	4798      	blx	r3
	if (NULL == ifc) {
    5a2e:	2800      	cmp	r0, #0
    5a30:	d045      	beq.n	5abe <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    5a32:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    5a34:	78c2      	ldrb	r2, [r0, #3]
    5a36:	7881      	ldrb	r1, [r0, #2]
    5a38:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    5a3c:	fa10 f181 	uxtah	r1, r0, r1
    5a40:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5a42:	2204      	movs	r2, #4
    5a44:	4b41      	ldr	r3, [pc, #260]	; (5b4c <usbdc_cb_ctl_req+0x28c>)
    5a46:	4798      	blx	r3
    5a48:	4603      	mov	r3, r0
    5a4a:	2800      	cmp	r0, #0
    5a4c:	d039      	beq.n	5ac2 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5a4e:	2704      	movs	r7, #4
    5a50:	4d3e      	ldr	r5, [pc, #248]	; (5b4c <usbdc_cb_ctl_req+0x28c>)
    5a52:	e008      	b.n	5a66 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    5a54:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    5a56:	7803      	ldrb	r3, [r0, #0]
    5a58:	4418      	add	r0, r3
    5a5a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5a5c:	463a      	mov	r2, r7
    5a5e:	9901      	ldr	r1, [sp, #4]
    5a60:	47a8      	blx	r5
		if (NULL == ifc) {
    5a62:	4603      	mov	r3, r0
    5a64:	b378      	cbz	r0, 5ac6 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5a66:	789a      	ldrb	r2, [r3, #2]
    5a68:	42a2      	cmp	r2, r4
    5a6a:	d1f3      	bne.n	5a54 <usbdc_cb_ctl_req+0x194>
    5a6c:	78da      	ldrb	r2, [r3, #3]
    5a6e:	42b2      	cmp	r2, r6
    5a70:	d1f0      	bne.n	5a54 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    5a72:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    5a74:	4b33      	ldr	r3, [pc, #204]	; (5b44 <usbdc_cb_ctl_req+0x284>)
    5a76:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    5a78:	b33d      	cbz	r5, 5aca <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    5a7a:	2701      	movs	r7, #1
    5a7c:	686b      	ldr	r3, [r5, #4]
    5a7e:	466a      	mov	r2, sp
    5a80:	4639      	mov	r1, r7
    5a82:	4628      	mov	r0, r5
    5a84:	4798      	blx	r3
    5a86:	b120      	cbz	r0, 5a92 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    5a88:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    5a8a:	2d00      	cmp	r5, #0
    5a8c:	d1f6      	bne.n	5a7c <usbdc_cb_ctl_req+0x1bc>
	return false;
    5a8e:	2000      	movs	r0, #0
    5a90:	e72e      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    5a92:	686b      	ldr	r3, [r5, #4]
    5a94:	466a      	mov	r2, sp
    5a96:	2100      	movs	r1, #0
    5a98:	4628      	mov	r0, r5
    5a9a:	4798      	blx	r3
    5a9c:	b9b8      	cbnz	r0, 5ace <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    5a9e:	b136      	cbz	r6, 5aae <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    5aa0:	4a28      	ldr	r2, [pc, #160]	; (5b44 <usbdc_cb_ctl_req+0x284>)
    5aa2:	2301      	movs	r3, #1
    5aa4:	fa03 f404 	lsl.w	r4, r3, r4
    5aa8:	7f53      	ldrb	r3, [r2, #29]
    5aaa:	4323      	orrs	r3, r4
    5aac:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    5aae:	2300      	movs	r3, #0
    5ab0:	461a      	mov	r2, r3
    5ab2:	4619      	mov	r1, r3
    5ab4:	4618      	mov	r0, r3
    5ab6:	4c22      	ldr	r4, [pc, #136]	; (5b40 <usbdc_cb_ctl_req+0x280>)
    5ab8:	47a0      	blx	r4
			return true;
    5aba:	2001      	movs	r0, #1
    5abc:	e718      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5abe:	2000      	movs	r0, #0
    5ac0:	e716      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5ac2:	2000      	movs	r0, #0
    5ac4:	e714      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
			return false;
    5ac6:	2000      	movs	r0, #0
    5ac8:	e712      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
	return false;
    5aca:	2000      	movs	r0, #0
    5acc:	e710      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
			return false;
    5ace:	2000      	movs	r0, #0
    5ad0:	e70e      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    5ad2:	7862      	ldrb	r2, [r4, #1]
    5ad4:	2a0a      	cmp	r2, #10
    5ad6:	f200 80ec 	bhi.w	5cb2 <usbdc_cb_ctl_req+0x3f2>
    5ada:	e8df f012 	tbh	[pc, r2, lsl #1]
    5ade:	008e      	.short	0x008e
    5ae0:	00ea00ea 	.word	0x00ea00ea
    5ae4:	00ea00ea 	.word	0x00ea00ea
    5ae8:	000b00ea 	.word	0x000b00ea
    5aec:	008200ea 	.word	0x008200ea
    5af0:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    5af4:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    5af6:	0a13      	lsrs	r3, r2, #8
    5af8:	2b02      	cmp	r3, #2
    5afa:	d02d      	beq.n	5b58 <usbdc_cb_ctl_req+0x298>
    5afc:	2b03      	cmp	r3, #3
    5afe:	d050      	beq.n	5ba2 <usbdc_cb_ctl_req+0x2e2>
    5b00:	2b01      	cmp	r3, #1
    5b02:	d001      	beq.n	5b08 <usbdc_cb_ctl_req+0x248>
	return false;
    5b04:	2000      	movs	r0, #0
    5b06:	e6f3      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    5b08:	88e2      	ldrh	r2, [r4, #6]
    5b0a:	2a12      	cmp	r2, #18
    5b0c:	bf28      	it	cs
    5b0e:	2212      	movcs	r2, #18
    5b10:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    5b12:	4b0c      	ldr	r3, [pc, #48]	; (5b44 <usbdc_cb_ctl_req+0x284>)
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	2201      	movs	r2, #1
    5b18:	6859      	ldr	r1, [r3, #4]
    5b1a:	6818      	ldr	r0, [r3, #0]
    5b1c:	4b0b      	ldr	r3, [pc, #44]	; (5b4c <usbdc_cb_ctl_req+0x28c>)
    5b1e:	4798      	blx	r3
	if (!dev_desc) {
    5b20:	4601      	mov	r1, r0
    5b22:	2800      	cmp	r0, #0
    5b24:	f000 80c7 	beq.w	5cb6 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    5b28:	2300      	movs	r3, #0
    5b2a:	4622      	mov	r2, r4
    5b2c:	4628      	mov	r0, r5
    5b2e:	4c04      	ldr	r4, [pc, #16]	; (5b40 <usbdc_cb_ctl_req+0x280>)
    5b30:	47a0      	blx	r4
    5b32:	fab0 f080 	clz	r0, r0
    5b36:	0940      	lsrs	r0, r0, #5
    5b38:	e6da      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
    5b3a:	bf00      	nop
    5b3c:	00005755 	.word	0x00005755
    5b40:	000058a1 	.word	0x000058a1
    5b44:	20000d38 	.word	0x20000d38
    5b48:	00005e65 	.word	0x00005e65
    5b4c:	00005de5 	.word	0x00005de5
    5b50:	00005709 	.word	0x00005709
    5b54:	000038b5 	.word	0x000038b5
	uint16_t length   = req->wLength;
    5b58:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5b5a:	4b5b      	ldr	r3, [pc, #364]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5b5c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	3201      	adds	r2, #1
    5b62:	b2d2      	uxtb	r2, r2
    5b64:	6859      	ldr	r1, [r3, #4]
    5b66:	6818      	ldr	r0, [r3, #0]
    5b68:	4b58      	ldr	r3, [pc, #352]	; (5ccc <usbdc_cb_ctl_req+0x40c>)
    5b6a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5b6c:	4601      	mov	r1, r0
    5b6e:	2800      	cmp	r0, #0
    5b70:	f000 80a3 	beq.w	5cba <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    5b74:	78c3      	ldrb	r3, [r0, #3]
    5b76:	7882      	ldrb	r2, [r0, #2]
    5b78:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    5b7c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    5b7e:	4294      	cmp	r4, r2
    5b80:	d90d      	bls.n	5b9e <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5b82:	3e01      	subs	r6, #1
    5b84:	4226      	tst	r6, r4
    5b86:	bf0c      	ite	eq
    5b88:	2301      	moveq	r3, #1
    5b8a:	2300      	movne	r3, #0
		length = total_len;
    5b8c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    5b8e:	4622      	mov	r2, r4
    5b90:	4628      	mov	r0, r5
    5b92:	4c4f      	ldr	r4, [pc, #316]	; (5cd0 <usbdc_cb_ctl_req+0x410>)
    5b94:	47a0      	blx	r4
    5b96:	fab0 f080 	clz	r0, r0
    5b9a:	0940      	lsrs	r0, r0, #5
    5b9c:	e6a8      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    5b9e:	2300      	movs	r3, #0
    5ba0:	e7f5      	b.n	5b8e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    5ba2:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5ba4:	4b48      	ldr	r3, [pc, #288]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5ba6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    5ba8:	681b      	ldr	r3, [r3, #0]
    5baa:	b2d2      	uxtb	r2, r2
    5bac:	6859      	ldr	r1, [r3, #4]
    5bae:	6818      	ldr	r0, [r3, #0]
    5bb0:	4b48      	ldr	r3, [pc, #288]	; (5cd4 <usbdc_cb_ctl_req+0x414>)
    5bb2:	4798      	blx	r3
	if (NULL == str_desc) {
    5bb4:	4601      	mov	r1, r0
    5bb6:	2800      	cmp	r0, #0
    5bb8:	f000 8081 	beq.w	5cbe <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    5bbc:	7802      	ldrb	r2, [r0, #0]
    5bbe:	4294      	cmp	r4, r2
    5bc0:	d90d      	bls.n	5bde <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5bc2:	3e01      	subs	r6, #1
    5bc4:	4226      	tst	r6, r4
    5bc6:	bf0c      	ite	eq
    5bc8:	2301      	moveq	r3, #1
    5bca:	2300      	movne	r3, #0
		length = str_desc[0];
    5bcc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    5bce:	4622      	mov	r2, r4
    5bd0:	4628      	mov	r0, r5
    5bd2:	4c3f      	ldr	r4, [pc, #252]	; (5cd0 <usbdc_cb_ctl_req+0x410>)
    5bd4:	47a0      	blx	r4
    5bd6:	fab0 f080 	clz	r0, r0
    5bda:	0940      	lsrs	r0, r0, #5
    5bdc:	e688      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    5bde:	2300      	movs	r3, #0
    5be0:	e7f5      	b.n	5bce <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    5be2:	4939      	ldr	r1, [pc, #228]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5be4:	694b      	ldr	r3, [r1, #20]
    5be6:	7eca      	ldrb	r2, [r1, #27]
    5be8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    5bea:	2300      	movs	r3, #0
    5bec:	2201      	movs	r2, #1
    5bee:	6949      	ldr	r1, [r1, #20]
    5bf0:	4628      	mov	r0, r5
    5bf2:	4c37      	ldr	r4, [pc, #220]	; (5cd0 <usbdc_cb_ctl_req+0x410>)
    5bf4:	47a0      	blx	r4
		return true;
    5bf6:	2001      	movs	r0, #1
    5bf8:	e67a      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5bfa:	f003 031f 	and.w	r3, r3, #31
    5bfe:	2b01      	cmp	r3, #1
    5c00:	d903      	bls.n	5c0a <usbdc_cb_ctl_req+0x34a>
    5c02:	2b02      	cmp	r3, #2
    5c04:	d010      	beq.n	5c28 <usbdc_cb_ctl_req+0x368>
		return false;
    5c06:	2000      	movs	r0, #0
    5c08:	e672      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		st = 0;
    5c0a:	2300      	movs	r3, #0
    5c0c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    5c0e:	492e      	ldr	r1, [pc, #184]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5c10:	694b      	ldr	r3, [r1, #20]
    5c12:	f8bd 2000 	ldrh.w	r2, [sp]
    5c16:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    5c18:	2300      	movs	r3, #0
    5c1a:	2202      	movs	r2, #2
    5c1c:	6949      	ldr	r1, [r1, #20]
    5c1e:	4628      	mov	r0, r5
    5c20:	4c2b      	ldr	r4, [pc, #172]	; (5cd0 <usbdc_cb_ctl_req+0x410>)
    5c22:	47a0      	blx	r4
	return true;
    5c24:	2001      	movs	r0, #1
    5c26:	e663      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    5c28:	88a0      	ldrh	r0, [r4, #4]
    5c2a:	2102      	movs	r1, #2
    5c2c:	b2c0      	uxtb	r0, r0
    5c2e:	4b2a      	ldr	r3, [pc, #168]	; (5cd8 <usbdc_cb_ctl_req+0x418>)
    5c30:	4798      	blx	r3
		if (st < 0) {
    5c32:	2800      	cmp	r0, #0
    5c34:	db03      	blt.n	5c3e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    5c36:	f000 0001 	and.w	r0, r0, #1
    5c3a:	9000      	str	r0, [sp, #0]
    5c3c:	e7e7      	b.n	5c0e <usbdc_cb_ctl_req+0x34e>
			return false;
    5c3e:	2000      	movs	r0, #0
    5c40:	e656      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    5c42:	4b21      	ldr	r3, [pc, #132]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5c44:	7f5b      	ldrb	r3, [r3, #29]
    5c46:	88a2      	ldrh	r2, [r4, #4]
    5c48:	4113      	asrs	r3, r2
    5c4a:	f013 0f01 	tst.w	r3, #1
    5c4e:	d012      	beq.n	5c76 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5c50:	4b1d      	ldr	r3, [pc, #116]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5c52:	691d      	ldr	r5, [r3, #16]
	return false;
    5c54:	2000      	movs	r0, #0
	while (NULL != func) {
    5c56:	2d00      	cmp	r5, #0
    5c58:	f43f ae4a 	beq.w	58f0 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    5c5c:	2602      	movs	r6, #2
    5c5e:	686b      	ldr	r3, [r5, #4]
    5c60:	4622      	mov	r2, r4
    5c62:	4631      	mov	r1, r6
    5c64:	4628      	mov	r0, r5
    5c66:	4798      	blx	r3
    5c68:	2800      	cmp	r0, #0
    5c6a:	da0f      	bge.n	5c8c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    5c6c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    5c6e:	2d00      	cmp	r5, #0
    5c70:	d1f5      	bne.n	5c5e <usbdc_cb_ctl_req+0x39e>
	return false;
    5c72:	2000      	movs	r0, #0
    5c74:	e63c      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    5c76:	4914      	ldr	r1, [pc, #80]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5c78:	694b      	ldr	r3, [r1, #20]
    5c7a:	2000      	movs	r0, #0
    5c7c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5c7e:	4603      	mov	r3, r0
    5c80:	2201      	movs	r2, #1
    5c82:	6949      	ldr	r1, [r1, #20]
    5c84:	4c12      	ldr	r4, [pc, #72]	; (5cd0 <usbdc_cb_ctl_req+0x410>)
    5c86:	47a0      	blx	r4
		return true;
    5c88:	2001      	movs	r0, #1
    5c8a:	e631      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    5c8c:	490e      	ldr	r1, [pc, #56]	; (5cc8 <usbdc_cb_ctl_req+0x408>)
    5c8e:	694b      	ldr	r3, [r1, #20]
    5c90:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5c92:	2300      	movs	r3, #0
    5c94:	2201      	movs	r2, #1
    5c96:	6949      	ldr	r1, [r1, #20]
    5c98:	4618      	mov	r0, r3
    5c9a:	4c0d      	ldr	r4, [pc, #52]	; (5cd0 <usbdc_cb_ctl_req+0x410>)
    5c9c:	47a0      	blx	r4
			return true;
    5c9e:	2001      	movs	r0, #1
    5ca0:	e626      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return true;
    5ca2:	2001      	movs	r0, #1
    5ca4:	e624      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5ca6:	2000      	movs	r0, #0
    5ca8:	e622      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5caa:	2000      	movs	r0, #0
    5cac:	e620      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5cae:	2000      	movs	r0, #0
    5cb0:	e61e      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5cb2:	2000      	movs	r0, #0
    5cb4:	e61c      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5cb6:	2000      	movs	r0, #0
    5cb8:	e61a      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5cba:	2000      	movs	r0, #0
    5cbc:	e618      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
		return false;
    5cbe:	2000      	movs	r0, #0
    5cc0:	e616      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
			return false;
    5cc2:	2000      	movs	r0, #0
    5cc4:	e614      	b.n	58f0 <usbdc_cb_ctl_req+0x30>
    5cc6:	bf00      	nop
    5cc8:	20000d38 	.word	0x20000d38
    5ccc:	00005e65 	.word	0x00005e65
    5cd0:	000058a1 	.word	0x000058a1
    5cd4:	00005ecd 	.word	0x00005ecd
    5cd8:	000038b5 	.word	0x000038b5

00005cdc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    5cdc:	b508      	push	{r3, lr}
	switch (type) {
    5cde:	2801      	cmp	r0, #1
    5ce0:	d007      	beq.n	5cf2 <usbdc_register_handler+0x16>
    5ce2:	b110      	cbz	r0, 5cea <usbdc_register_handler+0xe>
    5ce4:	2802      	cmp	r0, #2
    5ce6:	d008      	beq.n	5cfa <usbdc_register_handler+0x1e>
    5ce8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    5cea:	4806      	ldr	r0, [pc, #24]	; (5d04 <usbdc_register_handler+0x28>)
    5cec:	4b06      	ldr	r3, [pc, #24]	; (5d08 <usbdc_register_handler+0x2c>)
    5cee:	4798      	blx	r3
		break;
    5cf0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    5cf2:	4806      	ldr	r0, [pc, #24]	; (5d0c <usbdc_register_handler+0x30>)
    5cf4:	4b04      	ldr	r3, [pc, #16]	; (5d08 <usbdc_register_handler+0x2c>)
    5cf6:	4798      	blx	r3
		break;
    5cf8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    5cfa:	4805      	ldr	r0, [pc, #20]	; (5d10 <usbdc_register_handler+0x34>)
    5cfc:	4b02      	ldr	r3, [pc, #8]	; (5d08 <usbdc_register_handler+0x2c>)
    5cfe:	4798      	blx	r3
    5d00:	bd08      	pop	{r3, pc}
    5d02:	bf00      	nop
    5d04:	20000d3c 	.word	0x20000d3c
    5d08:	000039c5 	.word	0x000039c5
    5d0c:	20000d40 	.word	0x20000d40
    5d10:	20000d44 	.word	0x20000d44

00005d14 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    5d14:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    5d16:	4605      	mov	r5, r0
    5d18:	f240 3255 	movw	r2, #853	; 0x355
    5d1c:	490c      	ldr	r1, [pc, #48]	; (5d50 <usbdc_init+0x3c>)
    5d1e:	3000      	adds	r0, #0
    5d20:	bf18      	it	ne
    5d22:	2001      	movne	r0, #1
    5d24:	4b0b      	ldr	r3, [pc, #44]	; (5d54 <usbdc_init+0x40>)
    5d26:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    5d28:	4b0b      	ldr	r3, [pc, #44]	; (5d58 <usbdc_init+0x44>)
    5d2a:	4798      	blx	r3
	if (rc < 0) {
    5d2c:	2800      	cmp	r0, #0
    5d2e:	db0e      	blt.n	5d4e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5d30:	4c0a      	ldr	r4, [pc, #40]	; (5d5c <usbdc_init+0x48>)
    5d32:	2220      	movs	r2, #32
    5d34:	2100      	movs	r1, #0
    5d36:	4620      	mov	r0, r4
    5d38:	4b09      	ldr	r3, [pc, #36]	; (5d60 <usbdc_init+0x4c>)
    5d3a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    5d3c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    5d3e:	4909      	ldr	r1, [pc, #36]	; (5d64 <usbdc_init+0x50>)
    5d40:	2000      	movs	r0, #0
    5d42:	4c09      	ldr	r4, [pc, #36]	; (5d68 <usbdc_init+0x54>)
    5d44:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    5d46:	4909      	ldr	r1, [pc, #36]	; (5d6c <usbdc_init+0x58>)
    5d48:	2001      	movs	r0, #1
    5d4a:	47a0      	blx	r4

	return 0;
    5d4c:	2000      	movs	r0, #0
}
    5d4e:	bd38      	pop	{r3, r4, r5, pc}
    5d50:	00007560 	.word	0x00007560
    5d54:	00003969 	.word	0x00003969
    5d58:	0000361d 	.word	0x0000361d
    5d5c:	20000d38 	.word	0x20000d38
    5d60:	00006651 	.word	0x00006651
    5d64:	00005795 	.word	0x00005795
    5d68:	00003685 	.word	0x00003685
    5d6c:	00005881 	.word	0x00005881

00005d70 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    5d70:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    5d72:	4601      	mov	r1, r0
    5d74:	4801      	ldr	r0, [pc, #4]	; (5d7c <usbdc_register_function+0xc>)
    5d76:	4b02      	ldr	r3, [pc, #8]	; (5d80 <usbdc_register_function+0x10>)
    5d78:	4798      	blx	r3
    5d7a:	bd08      	pop	{r3, pc}
    5d7c:	20000d48 	.word	0x20000d48
    5d80:	000039c5 	.word	0x000039c5

00005d84 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    5d84:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    5d86:	4b0a      	ldr	r3, [pc, #40]	; (5db0 <usbdc_start+0x2c>)
    5d88:	7e9b      	ldrb	r3, [r3, #26]
    5d8a:	b95b      	cbnz	r3, 5da4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    5d8c:	b168      	cbz	r0, 5daa <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    5d8e:	4b08      	ldr	r3, [pc, #32]	; (5db0 <usbdc_start+0x2c>)
    5d90:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    5d92:	6802      	ldr	r2, [r0, #0]
    5d94:	79d2      	ldrb	r2, [r2, #7]
    5d96:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    5d98:	2201      	movs	r2, #1
    5d9a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    5d9c:	4b05      	ldr	r3, [pc, #20]	; (5db4 <usbdc_start+0x30>)
    5d9e:	4798      	blx	r3
	return ERR_NONE;
    5da0:	2000      	movs	r0, #0
    5da2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    5da4:	f06f 0003 	mvn.w	r0, #3
    5da8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    5daa:	f06f 0008 	mvn.w	r0, #8
}
    5dae:	bd08      	pop	{r3, pc}
    5db0:	20000d38 	.word	0x20000d38
    5db4:	00003691 	.word	0x00003691

00005db8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    5db8:	b508      	push	{r3, lr}
	usb_d_attach();
    5dba:	4b01      	ldr	r3, [pc, #4]	; (5dc0 <usbdc_attach+0x8>)
    5dbc:	4798      	blx	r3
    5dbe:	bd08      	pop	{r3, pc}
    5dc0:	0000369d 	.word	0x0000369d

00005dc4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    5dc4:	4b01      	ldr	r3, [pc, #4]	; (5dcc <usbdc_get_ctrl_buffer+0x8>)
    5dc6:	6958      	ldr	r0, [r3, #20]
    5dc8:	4770      	bx	lr
    5dca:	bf00      	nop
    5dcc:	20000d38 	.word	0x20000d38

00005dd0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    5dd0:	4b03      	ldr	r3, [pc, #12]	; (5de0 <usbdc_get_state+0x10>)
    5dd2:	7e98      	ldrb	r0, [r3, #26]
    5dd4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    5dd8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    5dda:	bf18      	it	ne
    5ddc:	2010      	movne	r0, #16
    5dde:	4770      	bx	lr
    5de0:	20000d38 	.word	0x20000d38

00005de4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5de4:	4288      	cmp	r0, r1
    5de6:	d214      	bcs.n	5e12 <usb_find_desc+0x2e>
	return desc[0];
    5de8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5dea:	2b01      	cmp	r3, #1
    5dec:	d913      	bls.n	5e16 <usb_find_desc+0x32>
{
    5dee:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    5df0:	7844      	ldrb	r4, [r0, #1]
    5df2:	4294      	cmp	r4, r2
    5df4:	d00a      	beq.n	5e0c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    5df6:	4418      	add	r0, r3
	while (desc < eof) {
    5df8:	4281      	cmp	r1, r0
    5dfa:	d906      	bls.n	5e0a <usb_find_desc+0x26>
	return desc[0];
    5dfc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5dfe:	2b01      	cmp	r3, #1
    5e00:	d90b      	bls.n	5e1a <usb_find_desc+0x36>
	return desc[1];
    5e02:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    5e04:	4294      	cmp	r4, r2
    5e06:	d1f6      	bne.n	5df6 <usb_find_desc+0x12>
    5e08:	e000      	b.n	5e0c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5e0a:	2000      	movs	r0, #0
}
    5e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e10:	4770      	bx	lr
	return NULL;
    5e12:	2000      	movs	r0, #0
    5e14:	4770      	bx	lr
		_desc_len_check();
    5e16:	2000      	movs	r0, #0
    5e18:	4770      	bx	lr
    5e1a:	2000      	movs	r0, #0
    5e1c:	e7f6      	b.n	5e0c <usb_find_desc+0x28>

00005e1e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5e1e:	4288      	cmp	r0, r1
    5e20:	d216      	bcs.n	5e50 <usb_find_ep_desc+0x32>
	return desc[0];
    5e22:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5e24:	2b01      	cmp	r3, #1
    5e26:	d915      	bls.n	5e54 <usb_find_ep_desc+0x36>
	return desc[1];
    5e28:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5e2a:	2a04      	cmp	r2, #4
    5e2c:	d014      	beq.n	5e58 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5e2e:	2a05      	cmp	r2, #5
    5e30:	d00b      	beq.n	5e4a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    5e32:	4418      	add	r0, r3
	while (desc < eof) {
    5e34:	4281      	cmp	r1, r0
    5e36:	d909      	bls.n	5e4c <usb_find_ep_desc+0x2e>
	return desc[0];
    5e38:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5e3a:	2b01      	cmp	r3, #1
    5e3c:	d90e      	bls.n	5e5c <usb_find_ep_desc+0x3e>
	return desc[1];
    5e3e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5e40:	2a04      	cmp	r2, #4
    5e42:	d00d      	beq.n	5e60 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5e44:	2a05      	cmp	r2, #5
    5e46:	d1f4      	bne.n	5e32 <usb_find_ep_desc+0x14>
    5e48:	e00b      	b.n	5e62 <usb_find_ep_desc+0x44>
    5e4a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5e4c:	2000      	movs	r0, #0
    5e4e:	4770      	bx	lr
    5e50:	2000      	movs	r0, #0
    5e52:	4770      	bx	lr
		_desc_len_check();
    5e54:	2000      	movs	r0, #0
    5e56:	4770      	bx	lr
	return NULL;
    5e58:	2000      	movs	r0, #0
    5e5a:	4770      	bx	lr
		_desc_len_check();
    5e5c:	2000      	movs	r0, #0
    5e5e:	4770      	bx	lr
	return NULL;
    5e60:	2000      	movs	r0, #0
}
    5e62:	4770      	bx	lr

00005e64 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    5e64:	b538      	push	{r3, r4, r5, lr}
    5e66:	460c      	mov	r4, r1
    5e68:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    5e6a:	2202      	movs	r2, #2
    5e6c:	4b16      	ldr	r3, [pc, #88]	; (5ec8 <usb_find_cfg_desc+0x64>)
    5e6e:	4798      	blx	r3
	if (!desc) {
    5e70:	4603      	mov	r3, r0
    5e72:	b1e8      	cbz	r0, 5eb0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    5e74:	4284      	cmp	r4, r0
    5e76:	d91d      	bls.n	5eb4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    5e78:	7802      	ldrb	r2, [r0, #0]
    5e7a:	2a01      	cmp	r2, #1
    5e7c:	d91c      	bls.n	5eb8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    5e7e:	7842      	ldrb	r2, [r0, #1]
    5e80:	2a02      	cmp	r2, #2
    5e82:	d11b      	bne.n	5ebc <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    5e84:	7942      	ldrb	r2, [r0, #5]
    5e86:	42aa      	cmp	r2, r5
    5e88:	d012      	beq.n	5eb0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    5e8a:	78d9      	ldrb	r1, [r3, #3]
    5e8c:	789a      	ldrb	r2, [r3, #2]
    5e8e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    5e92:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    5e96:	429c      	cmp	r4, r3
    5e98:	d909      	bls.n	5eae <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    5e9a:	781a      	ldrb	r2, [r3, #0]
    5e9c:	2a01      	cmp	r2, #1
    5e9e:	d90f      	bls.n	5ec0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    5ea0:	785a      	ldrb	r2, [r3, #1]
    5ea2:	2a02      	cmp	r2, #2
    5ea4:	d10e      	bne.n	5ec4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    5ea6:	795a      	ldrb	r2, [r3, #5]
    5ea8:	42aa      	cmp	r2, r5
    5eaa:	d1ee      	bne.n	5e8a <usb_find_cfg_desc+0x26>
    5eac:	e000      	b.n	5eb0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    5eae:	2300      	movs	r3, #0
}
    5eb0:	4618      	mov	r0, r3
    5eb2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    5eb4:	2300      	movs	r3, #0
    5eb6:	e7fb      	b.n	5eb0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    5eb8:	2300      	movs	r3, #0
    5eba:	e7f9      	b.n	5eb0 <usb_find_cfg_desc+0x4c>
	return NULL;
    5ebc:	2300      	movs	r3, #0
    5ebe:	e7f7      	b.n	5eb0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    5ec0:	2300      	movs	r3, #0
    5ec2:	e7f5      	b.n	5eb0 <usb_find_cfg_desc+0x4c>
	return NULL;
    5ec4:	2300      	movs	r3, #0
    5ec6:	e7f3      	b.n	5eb0 <usb_find_cfg_desc+0x4c>
    5ec8:	00005de5 	.word	0x00005de5

00005ecc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    5ecc:	4288      	cmp	r0, r1
    5ece:	d217      	bcs.n	5f00 <usb_find_str_desc+0x34>
{
    5ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ed4:	460d      	mov	r5, r1
    5ed6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    5ed8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    5eda:	f04f 0803 	mov.w	r8, #3
    5ede:	4f0c      	ldr	r7, [pc, #48]	; (5f10 <usb_find_str_desc+0x44>)
    5ee0:	4642      	mov	r2, r8
    5ee2:	4629      	mov	r1, r5
    5ee4:	47b8      	blx	r7
		if (desc) {
    5ee6:	4603      	mov	r3, r0
    5ee8:	b170      	cbz	r0, 5f08 <usb_find_str_desc+0x3c>
	return desc[0];
    5eea:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    5eec:	2801      	cmp	r0, #1
    5eee:	d90a      	bls.n	5f06 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    5ef0:	42a6      	cmp	r6, r4
    5ef2:	d009      	beq.n	5f08 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    5ef4:	4418      	add	r0, r3
    5ef6:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    5ef8:	4285      	cmp	r5, r0
    5efa:	d8f1      	bhi.n	5ee0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    5efc:	2300      	movs	r3, #0
    5efe:	e003      	b.n	5f08 <usb_find_str_desc+0x3c>
    5f00:	2300      	movs	r3, #0
}
    5f02:	4618      	mov	r0, r3
    5f04:	4770      	bx	lr
			_desc_len_check();
    5f06:	2300      	movs	r3, #0
}
    5f08:	4618      	mov	r0, r3
    5f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f0e:	bf00      	nop
    5f10:	00005de5 	.word	0x00005de5

00005f14 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    5f14:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    5f16:	4805      	ldr	r0, [pc, #20]	; (5f2c <cdc_device_acm_init+0x18>)
    5f18:	4b05      	ldr	r3, [pc, #20]	; (5f30 <cdc_device_acm_init+0x1c>)
    5f1a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    5f1c:	4b05      	ldr	r3, [pc, #20]	; (5f34 <cdc_device_acm_init+0x20>)
    5f1e:	4798      	blx	r3

	usbdc_start(single_desc);
    5f20:	4805      	ldr	r0, [pc, #20]	; (5f38 <cdc_device_acm_init+0x24>)
    5f22:	4b06      	ldr	r3, [pc, #24]	; (5f3c <cdc_device_acm_init+0x28>)
    5f24:	4798      	blx	r3
	usbdc_attach();
    5f26:	4b06      	ldr	r3, [pc, #24]	; (5f40 <cdc_device_acm_init+0x2c>)
    5f28:	4798      	blx	r3
    5f2a:	bd08      	pop	{r3, pc}
    5f2c:	20000d98 	.word	0x20000d98
    5f30:	00005d15 	.word	0x00005d15
    5f34:	00005601 	.word	0x00005601
    5f38:	20000254 	.word	0x20000254
    5f3c:	00005d85 	.word	0x00005d85
    5f40:	00005db9 	.word	0x00005db9

00005f44 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    5f44:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    5f46:	4b01      	ldr	r3, [pc, #4]	; (5f4c <usb_init+0x8>)
    5f48:	4798      	blx	r3
    5f4a:	bd08      	pop	{r3, pc}
    5f4c:	00005f15 	.word	0x00005f15

00005f50 <ug2832hsweg04_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void ug2832hsweg04_put_page(const struct display_mono *const me, const enum gfx_mono_color *data,
                            const gfx_coord_t page, const gfx_coord_t page_offset, const gfx_coord_t width)
{
    5f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5f54:	b083      	sub	sp, #12
    5f56:	4604      	mov	r4, r0
    5f58:	460e      	mov	r6, r1
    5f5a:	4617      	mov	r7, r2
    5f5c:	4698      	mov	r8, r3
    5f5e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_page(&disp->framebuffer.parent, data, page, page_offset, width);
    5f62:	9500      	str	r5, [sp, #0]
    5f64:	3018      	adds	r0, #24
    5f66:	f8df 901c 	ldr.w	r9, [pc, #28]	; 5f84 <ug2832hsweg04_put_page+0x34>
    5f6a:	47c8      	blx	r9
#endif
	display_mono_put_page(&disp->parent, data, page, page_offset, width);
    5f6c:	9500      	str	r5, [sp, #0]
    5f6e:	4643      	mov	r3, r8
    5f70:	463a      	mov	r2, r7
    5f72:	4631      	mov	r1, r6
    5f74:	4620      	mov	r0, r4
    5f76:	4c02      	ldr	r4, [pc, #8]	; (5f80 <ug2832hsweg04_put_page+0x30>)
    5f78:	47a0      	blx	r4
}
    5f7a:	b003      	add	sp, #12
    5f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f80:	00006353 	.word	0x00006353
    5f84:	000063df 	.word	0x000063df

00005f88 <ug2832hsweg04_draw_pixel>:
/**
 * \brief Draw pixel to screen
 */
void ug2832hsweg04_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                              const enum gfx_mono_color color)
{
    5f88:	b510      	push	{r4, lr}
    5f8a:	b084      	sub	sp, #16
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_draw_pixel(&disp->parent, x, y, color, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT, 8);
    5f8c:	2408      	movs	r4, #8
    5f8e:	9402      	str	r4, [sp, #8]
    5f90:	2420      	movs	r4, #32
    5f92:	9401      	str	r4, [sp, #4]
    5f94:	2480      	movs	r4, #128	; 0x80
    5f96:	9400      	str	r4, [sp, #0]
    5f98:	4c01      	ldr	r4, [pc, #4]	; (5fa0 <ug2832hsweg04_draw_pixel+0x18>)
    5f9a:	47a0      	blx	r4
}
    5f9c:	b004      	add	sp, #16
    5f9e:	bd10      	pop	{r4, pc}
    5fa0:	000062df 	.word	0x000062df

00005fa4 <ug2832hsweg04_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void ug2832hsweg04_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const uint8_t data)
{
    5fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fa8:	4604      	mov	r4, r0
    5faa:	460d      	mov	r5, r1
    5fac:	4616      	mov	r6, r2
    5fae:	461f      	mov	r7, r3
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_byte(&disp->framebuffer.parent, page, column, data);
    5fb0:	3018      	adds	r0, #24
    5fb2:	f8df 8018 	ldr.w	r8, [pc, #24]	; 5fcc <ug2832hsweg04_put_byte+0x28>
    5fb6:	47c0      	blx	r8
#endif
	display_mono_put_byte(&disp->parent, page, column, data);
    5fb8:	463b      	mov	r3, r7
    5fba:	4632      	mov	r2, r6
    5fbc:	4629      	mov	r1, r5
    5fbe:	4620      	mov	r0, r4
    5fc0:	4c01      	ldr	r4, [pc, #4]	; (5fc8 <ug2832hsweg04_put_byte+0x24>)
    5fc2:	47a0      	blx	r4
    5fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fc8:	0000626f 	.word	0x0000626f
    5fcc:	00006409 	.word	0x00006409

00005fd0 <ug2832hsweg04_get_byte>:

/**
 * \brief Get a byte from the display controller RAM
 */
uint8_t ug2832hsweg04_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
    5fd0:	b508      	push	{r3, lr}
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	return framebuffer_get_byte(&disp->framebuffer.parent, page, column);
    5fd2:	3018      	adds	r0, #24
    5fd4:	4b01      	ldr	r3, [pc, #4]	; (5fdc <ug2832hsweg04_get_byte+0xc>)
    5fd6:	4798      	blx	r3
#else
	return display_mono_get_byte(&disp->parent, page, column);
#endif
}
    5fd8:	bd08      	pop	{r3, pc}
    5fda:	bf00      	nop
    5fdc:	0000641b 	.word	0x0000641b

00005fe0 <ug2832hsweg04_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void ug2832hsweg04_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                             const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
    5fe0:	b510      	push	{r4, lr}
    5fe2:	b082      	sub	sp, #8
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
    5fe4:	f89d 4010 	ldrb.w	r4, [sp, #16]
    5fe8:	9400      	str	r4, [sp, #0]
    5fea:	4c02      	ldr	r4, [pc, #8]	; (5ff4 <ug2832hsweg04_mask_byte+0x14>)
    5fec:	47a0      	blx	r4
}
    5fee:	b002      	add	sp, #8
    5ff0:	bd10      	pop	{r4, pc}
    5ff2:	bf00      	nop
    5ff4:	00006295 	.word	0x00006295

00005ff8 <ug2832hsweg04_construct>:
{
    5ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ffc:	b083      	sub	sp, #12
    5ffe:	4604      	mov	r4, r0
    6000:	4689      	mov	r9, r1
    6002:	4617      	mov	r7, r2
    6004:	4698      	mov	r8, r3
	display_mono_construct(&display->parent,
    6006:	f100 050c 	add.w	r5, r0, #12
    600a:	4b10      	ldr	r3, [pc, #64]	; (604c <ug2832hsweg04_construct+0x54>)
    600c:	9300      	str	r3, [sp, #0]
    600e:	2320      	movs	r3, #32
    6010:	2280      	movs	r2, #128	; 0x80
    6012:	4629      	mov	r1, r5
    6014:	4e0e      	ldr	r6, [pc, #56]	; (6050 <ug2832hsweg04_construct+0x58>)
    6016:	47b0      	blx	r6
	ssd1306_construct(&display->dc.parent, io, cs, res, dc);
    6018:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    601c:	9300      	str	r3, [sp, #0]
    601e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    6022:	4642      	mov	r2, r8
    6024:	4639      	mov	r1, r7
    6026:	4628      	mov	r0, r5
    6028:	4d0a      	ldr	r5, [pc, #40]	; (6054 <ug2832hsweg04_construct+0x5c>)
    602a:	47a8      	blx	r5
	framebuffer_construct(&display->framebuffer.parent, framebuffer, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT);
    602c:	2320      	movs	r3, #32
    602e:	2280      	movs	r2, #128	; 0x80
    6030:	4649      	mov	r1, r9
    6032:	f104 0018 	add.w	r0, r4, #24
    6036:	4d08      	ldr	r5, [pc, #32]	; (6058 <ug2832hsweg04_construct+0x60>)
    6038:	47a8      	blx	r5
	display_mono_init(me, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_PAGES);
    603a:	2204      	movs	r2, #4
    603c:	2180      	movs	r1, #128	; 0x80
    603e:	4620      	mov	r0, r4
    6040:	4b06      	ldr	r3, [pc, #24]	; (605c <ug2832hsweg04_construct+0x64>)
    6042:	4798      	blx	r3
}
    6044:	4620      	mov	r0, r4
    6046:	b003      	add	sp, #12
    6048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    604c:	200002b4 	.word	0x200002b4
    6050:	0000625d 	.word	0x0000625d
    6054:	00006199 	.word	0x00006199
    6058:	0000645d 	.word	0x0000645d
    605c:	0000638d 	.word	0x0000638d

00006060 <ssd1306_write_data>:

/**
 * \brief Write data to the display controller
 */
void ssd1306_write_data(const struct display_ctrl_mono *const me, const uint8_t data)
{
    6060:	b5f0      	push	{r4, r5, r6, r7, lr}
    6062:	b083      	sub	sp, #12
    6064:	4606      	mov	r6, r0
    6066:	af02      	add	r7, sp, #8
    6068:	f807 1d01 	strb.w	r1, [r7, #-1]!
	struct io_descriptor *      io   = me->io;
    606c:	6800      	ldr	r0, [r0, #0]
	const struct ssd1306 *const ctrl = (const struct ssd1306 *const)me;

	gpio_set_pin_level(ctrl->pin_dc, true);
    606e:	7ab3      	ldrb	r3, [r6, #10]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    6070:	f003 021f 	and.w	r2, r3, #31
    6074:	2401      	movs	r4, #1
    6076:	fa04 f202 	lsl.w	r2, r4, r2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    607a:	095b      	lsrs	r3, r3, #5
    607c:	4d0d      	ldr	r5, [pc, #52]	; (60b4 <ssd1306_write_data+0x54>)
    607e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6082:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(ctrl->pin_cs, false);
    6084:	7a33      	ldrb	r3, [r6, #8]
    6086:	f003 021f 	and.w	r2, r3, #31
    608a:	fa04 f202 	lsl.w	r2, r4, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    608e:	095b      	lsrs	r3, r3, #5
    6090:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6094:	615a      	str	r2, [r3, #20]
	io->write(io, &data, 1);
    6096:	6803      	ldr	r3, [r0, #0]
    6098:	4622      	mov	r2, r4
    609a:	4639      	mov	r1, r7
    609c:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
    609e:	7a33      	ldrb	r3, [r6, #8]
    60a0:	f003 021f 	and.w	r2, r3, #31
    60a4:	4094      	lsls	r4, r2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60a6:	095b      	lsrs	r3, r3, #5
    60a8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    60ac:	61ac      	str	r4, [r5, #24]
}
    60ae:	b003      	add	sp, #12
    60b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60b2:	bf00      	nop
    60b4:	41008000 	.word	0x41008000

000060b8 <ssd1306_read_data>:
 */
uint8_t ssd1306_read_data(const struct display_ctrl_mono *const me)
{
	(void)me;
	return 0;
}
    60b8:	2000      	movs	r0, #0
    60ba:	4770      	bx	lr

000060bc <ssd1306_write_command>:
{
    60bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60be:	b083      	sub	sp, #12
    60c0:	4606      	mov	r6, r0
    60c2:	af02      	add	r7, sp, #8
    60c4:	f807 1d01 	strb.w	r1, [r7, #-1]!
	struct io_descriptor *      io   = me->io;
    60c8:	6800      	ldr	r0, [r0, #0]
	gpio_set_pin_level(ctrl->pin_dc, false);
    60ca:	7ab3      	ldrb	r3, [r6, #10]
    60cc:	f003 021f 	and.w	r2, r3, #31
    60d0:	2401      	movs	r4, #1
    60d2:	fa04 f202 	lsl.w	r2, r4, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60d6:	095b      	lsrs	r3, r3, #5
    60d8:	4d0d      	ldr	r5, [pc, #52]	; (6110 <ssd1306_write_command+0x54>)
    60da:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    60de:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(ctrl->pin_cs, false);
    60e0:	7a33      	ldrb	r3, [r6, #8]
    60e2:	f003 021f 	and.w	r2, r3, #31
    60e6:	fa04 f202 	lsl.w	r2, r4, r2
    60ea:	095b      	lsrs	r3, r3, #5
    60ec:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    60f0:	615a      	str	r2, [r3, #20]
	io->write(io, &command, 1);
    60f2:	6803      	ldr	r3, [r0, #0]
    60f4:	4622      	mov	r2, r4
    60f6:	4639      	mov	r1, r7
    60f8:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
    60fa:	7a33      	ldrb	r3, [r6, #8]
    60fc:	f003 021f 	and.w	r2, r3, #31
    6100:	4094      	lsls	r4, r2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6102:	095b      	lsrs	r3, r3, #5
    6104:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6108:	61ac      	str	r4, [r5, #24]
}
    610a:	b003      	add	sp, #12
    610c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    610e:	bf00      	nop
    6110:	41008000 	.word	0x41008000

00006114 <ssd1306_set_page_address>:

/**
 * \brief Set current page in display RAM
 */
void ssd1306_set_page_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
    6114:	b508      	push	{r3, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_PAGE_START_ADDRESS(address & 0xF));
    6116:	f001 0107 	and.w	r1, r1, #7
    611a:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
    611e:	4b01      	ldr	r3, [pc, #4]	; (6124 <ssd1306_set_page_address+0x10>)
    6120:	4798      	blx	r3
    6122:	bd08      	pop	{r3, pc}
    6124:	000060bd 	.word	0x000060bd

00006128 <ssd1306_set_column_address>:

/**
 * \brief Set current column in display RAM
 */
void ssd1306_set_column_address(const struct display_ctrl_mono *const me, uint8_t address)
{
    6128:	b570      	push	{r4, r5, r6, lr}
    612a:	4606      	mov	r6, r0
    612c:	460d      	mov	r5, r1
	address &= 0x7F;
	ssd1306_write_command(me, SSD1306_CMD_SET_HIGH_COL(address >> 4));
    612e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    6132:	f041 0110 	orr.w	r1, r1, #16
    6136:	4c03      	ldr	r4, [pc, #12]	; (6144 <ssd1306_set_column_address+0x1c>)
    6138:	47a0      	blx	r4
	ssd1306_write_command(me, SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    613a:	f005 010f 	and.w	r1, r5, #15
    613e:	4630      	mov	r0, r6
    6140:	47a0      	blx	r4
    6142:	bd70      	pop	{r4, r5, r6, pc}
    6144:	000060bd 	.word	0x000060bd

00006148 <ssd1306_set_start_line_address>:

/**
 * \brief Set the display start draw line address
 */
void ssd1306_set_start_line_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
    6148:	b508      	push	{r3, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(address & 0x3F));
    614a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    614e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    6152:	4b01      	ldr	r3, [pc, #4]	; (6158 <ssd1306_set_start_line_address+0x10>)
    6154:	4798      	blx	r3
    6156:	bd08      	pop	{r3, pc}
    6158:	000060bd 	.word	0x000060bd

0000615c <ssd1306_hard_reset>:
{
    615c:	b508      	push	{r3, lr}
	display_ctrl_mono_hard_reset(((const struct ssd1306 *)me)->pin_res, 10);
    615e:	210a      	movs	r1, #10
    6160:	7a40      	ldrb	r0, [r0, #9]
    6162:	4b01      	ldr	r3, [pc, #4]	; (6168 <ssd1306_hard_reset+0xc>)
    6164:	4798      	blx	r3
    6166:	bd08      	pop	{r3, pc}
    6168:	00006489 	.word	0x00006489

0000616c <ssd1306_on>:

/**
 * \brief Turn the display display on
 */
void ssd1306_on(const struct display_ctrl_mono *const me)
{
    616c:	b508      	push	{r3, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_ON);
    616e:	21af      	movs	r1, #175	; 0xaf
    6170:	4b01      	ldr	r3, [pc, #4]	; (6178 <ssd1306_on+0xc>)
    6172:	4798      	blx	r3
    6174:	bd08      	pop	{r3, pc}
    6176:	bf00      	nop
    6178:	000060bd 	.word	0x000060bd

0000617c <ssd1306_set_contrast>:

/**
 * \brief Set the display contrast level
 */
uint8_t ssd1306_set_contrast(const struct display_ctrl_mono *const me, const uint8_t contrast)
{
    617c:	b570      	push	{r4, r5, r6, lr}
    617e:	4606      	mov	r6, r0
    6180:	460c      	mov	r4, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    6182:	2181      	movs	r1, #129	; 0x81
    6184:	4d03      	ldr	r5, [pc, #12]	; (6194 <ssd1306_set_contrast+0x18>)
    6186:	47a8      	blx	r5
	ssd1306_write_command(me, contrast);
    6188:	4621      	mov	r1, r4
    618a:	4630      	mov	r0, r6
    618c:	47a8      	blx	r5

	return contrast;
}
    618e:	4620      	mov	r0, r4
    6190:	bd70      	pop	{r4, r5, r6, pc}
    6192:	bf00      	nop
    6194:	000060bd 	.word	0x000060bd

00006198 <ssd1306_construct>:
{
    6198:	b570      	push	{r4, r5, r6, lr}
    619a:	4604      	mov	r4, r0
    619c:	4616      	mov	r6, r2
    619e:	461d      	mov	r5, r3
	display_ctrl_mono_construct(me, io, &ssd1306_interface);
    61a0:	4a26      	ldr	r2, [pc, #152]	; (623c <ssd1306_construct+0xa4>)
    61a2:	4b27      	ldr	r3, [pc, #156]	; (6240 <ssd1306_construct+0xa8>)
    61a4:	4798      	blx	r3
	ssd->pin_cs  = cs;
    61a6:	7226      	strb	r6, [r4, #8]
	ssd->pin_res = res;
    61a8:	7265      	strb	r5, [r4, #9]
	ssd->pin_dc  = dc;
    61aa:	f89d 3010 	ldrb.w	r3, [sp, #16]
    61ae:	72a3      	strb	r3, [r4, #10]
	ssd1306_hard_reset(me);
    61b0:	4620      	mov	r0, r4
    61b2:	4b24      	ldr	r3, [pc, #144]	; (6244 <ssd1306_construct+0xac>)
    61b4:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_SET_MULTIPLEX_RATIO);
    61b6:	21a8      	movs	r1, #168	; 0xa8
    61b8:	4620      	mov	r0, r4
    61ba:	4d23      	ldr	r5, [pc, #140]	; (6248 <ssd1306_construct+0xb0>)
    61bc:	47a8      	blx	r5
	ssd1306_write_command(me, 0x1F);
    61be:	211f      	movs	r1, #31
    61c0:	4620      	mov	r0, r4
    61c2:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_OFFSET);
    61c4:	21d3      	movs	r1, #211	; 0xd3
    61c6:	4620      	mov	r0, r4
    61c8:	47a8      	blx	r5
	ssd1306_write_command(me, 0x00);
    61ca:	2100      	movs	r1, #0
    61cc:	4620      	mov	r0, r4
    61ce:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(0x00));
    61d0:	2140      	movs	r1, #64	; 0x40
    61d2:	4620      	mov	r0, r4
    61d4:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    61d6:	21a1      	movs	r1, #161	; 0xa1
    61d8:	4620      	mov	r0, r4
    61da:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    61dc:	21c8      	movs	r1, #200	; 0xc8
    61de:	4620      	mov	r0, r4
    61e0:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_PINS);
    61e2:	21da      	movs	r1, #218	; 0xda
    61e4:	4620      	mov	r0, r4
    61e6:	47a8      	blx	r5
	ssd1306_write_command(me, 0x02);
    61e8:	2102      	movs	r1, #2
    61ea:	4620      	mov	r0, r4
    61ec:	47a8      	blx	r5
	ssd1306_set_contrast(me, 0x8F);
    61ee:	218f      	movs	r1, #143	; 0x8f
    61f0:	4620      	mov	r0, r4
    61f2:	4b16      	ldr	r3, [pc, #88]	; (624c <ssd1306_construct+0xb4>)
    61f4:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    61f6:	21a4      	movs	r1, #164	; 0xa4
    61f8:	4620      	mov	r0, r4
    61fa:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_NORMAL_DISPLAY);
    61fc:	21a6      	movs	r1, #166	; 0xa6
    61fe:	4620      	mov	r0, r4
    6200:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    6202:	21d5      	movs	r1, #213	; 0xd5
    6204:	4620      	mov	r0, r4
    6206:	47a8      	blx	r5
	ssd1306_write_command(me, 0x80);
    6208:	2180      	movs	r1, #128	; 0x80
    620a:	4620      	mov	r0, r4
    620c:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    620e:	218d      	movs	r1, #141	; 0x8d
    6210:	4620      	mov	r0, r4
    6212:	47a8      	blx	r5
	ssd1306_write_command(me, 0x14);
    6214:	2114      	movs	r1, #20
    6216:	4620      	mov	r0, r4
    6218:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    621a:	21db      	movs	r1, #219	; 0xdb
    621c:	4620      	mov	r0, r4
    621e:	47a8      	blx	r5
	ssd1306_write_command(me, 0x40);
    6220:	2140      	movs	r1, #64	; 0x40
    6222:	4620      	mov	r0, r4
    6224:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    6226:	21d9      	movs	r1, #217	; 0xd9
    6228:	4620      	mov	r0, r4
    622a:	47a8      	blx	r5
	ssd1306_write_command(me, 0xF1);
    622c:	21f1      	movs	r1, #241	; 0xf1
    622e:	4620      	mov	r0, r4
    6230:	47a8      	blx	r5
	ssd1306_on(me);
    6232:	4620      	mov	r0, r4
    6234:	4b06      	ldr	r3, [pc, #24]	; (6250 <ssd1306_construct+0xb8>)
    6236:	4798      	blx	r3
}
    6238:	4620      	mov	r0, r4
    623a:	bd70      	pop	{r4, r5, r6, pc}
    623c:	200002c8 	.word	0x200002c8
    6240:	00006481 	.word	0x00006481
    6244:	0000615d 	.word	0x0000615d
    6248:	000060bd 	.word	0x000060bd
    624c:	0000617d 	.word	0x0000617d
    6250:	0000616d 	.word	0x0000616d

00006254 <gfx_mono_construct>:
/**
 * \brief Construct GFX mono
 */
struct gfx_mono *gfx_mono_construct(struct gfx_mono *const me, struct display_mono *const d)
{
	me->display = d;
    6254:	6001      	str	r1, [r0, #0]

	return me;
}
    6256:	4770      	bx	lr

00006258 <gfx_mono_text_construct>:
/**
 * \brief Construct GFX mono text
 */
struct gfx_mono_text *gfx_mono_text_construct(struct gfx_mono_text *const me, struct gfx_mono *const gfx)
{
	me->gfx = gfx;
    6258:	6001      	str	r1, [r0, #0]

	return me;
}
    625a:	4770      	bx	lr

0000625c <display_mono_construct>:
 * \brief Construct / initialize instance of abstract display
 */
struct display_mono *display_mono_construct(struct display_mono *const me, struct display_ctrl_mono *const dc,
                                            const gfx_coord_t width, const gfx_coord_t height,
                                            struct display_mono_interface *const interface)
{
    625c:	b410      	push	{r4}
	me->dc        = dc;
    625e:	6001      	str	r1, [r0, #0]
	me->width     = width;
    6260:	7102      	strb	r2, [r0, #4]
	me->height    = height;
    6262:	7143      	strb	r3, [r0, #5]
	me->interface = interface;
    6264:	9b01      	ldr	r3, [sp, #4]
    6266:	6083      	str	r3, [r0, #8]

	return me;
}
    6268:	f85d 4b04 	ldr.w	r4, [sp], #4
    626c:	4770      	bx	lr

0000626e <display_mono_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void display_mono_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const uint8_t data)
{
    626e:	b570      	push	{r4, r5, r6, lr}
    6270:	4604      	mov	r4, r0
    6272:	4616      	mov	r6, r2
    6274:	461d      	mov	r5, r3
	me->dc->interface->set_page_address(me->dc, page);
    6276:	6800      	ldr	r0, [r0, #0]
    6278:	6843      	ldr	r3, [r0, #4]
    627a:	689b      	ldr	r3, [r3, #8]
    627c:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, column);
    627e:	6820      	ldr	r0, [r4, #0]
    6280:	6843      	ldr	r3, [r0, #4]
    6282:	68db      	ldr	r3, [r3, #12]
    6284:	4631      	mov	r1, r6
    6286:	4798      	blx	r3
	me->dc->interface->write_data(me->dc, data);
    6288:	6820      	ldr	r0, [r4, #0]
    628a:	6843      	ldr	r3, [r0, #4]
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	4629      	mov	r1, r5
    6290:	4798      	blx	r3
    6292:	bd70      	pop	{r4, r5, r6, pc}

00006294 <display_mono_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void display_mono_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
    6294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6298:	4604      	mov	r4, r0
    629a:	460e      	mov	r6, r1
    629c:	4617      	mov	r7, r2
    629e:	4698      	mov	r8, r3
    62a0:	f89d 5018 	ldrb.w	r5, [sp, #24]
	uint8_t temp = me->interface->get_byte(me, page, column);
    62a4:	6883      	ldr	r3, [r0, #8]
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	4798      	blx	r3
    62aa:	4603      	mov	r3, r0

	switch (color) {
    62ac:	2d01      	cmp	r5, #1
    62ae:	d00a      	beq.n	62c6 <display_mono_mask_byte+0x32>
    62b0:	b16d      	cbz	r5, 62ce <display_mono_mask_byte+0x3a>
    62b2:	2d02      	cmp	r5, #2
    62b4:	d00f      	beq.n	62d6 <display_mono_mask_byte+0x42>

	default:
		break;
	}

	me->interface->put_byte(me, page, column, temp);
    62b6:	68a2      	ldr	r2, [r4, #8]
    62b8:	6855      	ldr	r5, [r2, #4]
    62ba:	463a      	mov	r2, r7
    62bc:	4631      	mov	r1, r6
    62be:	4620      	mov	r0, r4
    62c0:	47a8      	blx	r5
    62c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp |= (uint8_t)pixel_mask;
    62c6:	ea40 0308 	orr.w	r3, r0, r8
    62ca:	b2db      	uxtb	r3, r3
		break;
    62cc:	e7f3      	b.n	62b6 <display_mono_mask_byte+0x22>
		temp &= ~(uint8_t)pixel_mask;
    62ce:	ea20 0308 	bic.w	r3, r0, r8
    62d2:	b2db      	uxtb	r3, r3
		break;
    62d4:	e7ef      	b.n	62b6 <display_mono_mask_byte+0x22>
		temp ^= (uint8_t)pixel_mask;
    62d6:	ea80 0308 	eor.w	r3, r0, r8
    62da:	b2db      	uxtb	r3, r3
		break;
    62dc:	e7eb      	b.n	62b6 <display_mono_mask_byte+0x22>

000062de <display_mono_draw_pixel>:
 * \brief Draw pixel to screen
 */
void display_mono_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                             const enum gfx_mono_color color, const gfx_coord_t width, const gfx_coord_t height,
                             const uint8_t pixels)
{
    62de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > width - 1) || (y > height - 1)) {
    62e2:	f89d 4020 	ldrb.w	r4, [sp, #32]
    62e6:	3c01      	subs	r4, #1
    62e8:	42a1      	cmp	r1, r4
    62ea:	dc04      	bgt.n	62f6 <display_mono_draw_pixel+0x18>
    62ec:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    62f0:	3c01      	subs	r4, #1
    62f2:	42a2      	cmp	r2, r4
    62f4:	dd01      	ble.n	62fa <display_mono_draw_pixel+0x1c>
    62f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    62fa:	461e      	mov	r6, r3
    62fc:	460c      	mov	r4, r1
    62fe:	4607      	mov	r7, r0
		return;
	}

	page       = y / pixels;
    6300:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    6304:	fbb2 f5f5 	udiv	r5, r2, r5
	pixel_mask = (1 << (y - (page * 8)));
    6308:	eba2 02c5 	sub.w	r2, r2, r5, lsl #3
    630c:	2301      	movs	r3, #1
    630e:	fa03 f802 	lsl.w	r8, r3, r2
    6312:	fa5f f988 	uxtb.w	r9, r8
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = me->interface->get_byte(me, page, x);
    6316:	6883      	ldr	r3, [r0, #8]
    6318:	681b      	ldr	r3, [r3, #0]
    631a:	460a      	mov	r2, r1
    631c:	4629      	mov	r1, r5
    631e:	4798      	blx	r3
    6320:	4603      	mov	r3, r0

	switch (color) {
    6322:	2e01      	cmp	r6, #1
    6324:	d009      	beq.n	633a <display_mono_draw_pixel+0x5c>
    6326:	b166      	cbz	r6, 6342 <display_mono_draw_pixel+0x64>
    6328:	2e02      	cmp	r6, #2
    632a:	d00e      	beq.n	634a <display_mono_draw_pixel+0x6c>

	default:
		break;
	}

	me->interface->put_byte(me, page, x, pixel_value);
    632c:	68ba      	ldr	r2, [r7, #8]
    632e:	6856      	ldr	r6, [r2, #4]
    6330:	4622      	mov	r2, r4
    6332:	4629      	mov	r1, r5
    6334:	4638      	mov	r0, r7
    6336:	47b0      	blx	r6
    6338:	e7dd      	b.n	62f6 <display_mono_draw_pixel+0x18>
		pixel_value |= pixel_mask;
    633a:	ea49 0300 	orr.w	r3, r9, r0
    633e:	b2db      	uxtb	r3, r3
		break;
    6340:	e7f4      	b.n	632c <display_mono_draw_pixel+0x4e>
		pixel_value &= ~pixel_mask;
    6342:	ea20 0308 	bic.w	r3, r0, r8
    6346:	b2db      	uxtb	r3, r3
		break;
    6348:	e7f0      	b.n	632c <display_mono_draw_pixel+0x4e>
		pixel_value ^= pixel_mask;
    634a:	ea89 0300 	eor.w	r3, r9, r0
    634e:	b2db      	uxtb	r3, r3
		break;
    6350:	e7ec      	b.n	632c <display_mono_draw_pixel+0x4e>

00006352 <display_mono_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void display_mono_put_page(const struct display_mono *const me, const enum gfx_mono_color *data, const gfx_coord_t page,
                           const gfx_coord_t page_offset, gfx_coord_t width)
{
    6352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6354:	4606      	mov	r6, r0
    6356:	460f      	mov	r7, r1
    6358:	461c      	mov	r4, r3
	me->dc->interface->set_page_address(me->dc, page);
    635a:	6800      	ldr	r0, [r0, #0]
    635c:	6843      	ldr	r3, [r0, #4]
    635e:	689b      	ldr	r3, [r3, #8]
    6360:	4611      	mov	r1, r2
    6362:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, page_offset);
    6364:	6830      	ldr	r0, [r6, #0]
    6366:	6843      	ldr	r3, [r0, #4]
    6368:	68db      	ldr	r3, [r3, #12]
    636a:	4621      	mov	r1, r4
    636c:	4798      	blx	r3
    636e:	1e7c      	subs	r4, r7, #1
    6370:	f89d 5018 	ldrb.w	r5, [sp, #24]
    6374:	3d01      	subs	r5, #1
    6376:	fa57 f585 	uxtab	r5, r7, r5

	do {
		me->dc->interface->write_data(me->dc, *data++);
    637a:	6830      	ldr	r0, [r6, #0]
    637c:	6843      	ldr	r3, [r0, #4]
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    6384:	4798      	blx	r3
	} while (--width);
    6386:	42ac      	cmp	r4, r5
    6388:	d1f7      	bne.n	637a <display_mono_put_page+0x28>
}
    638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000638c <display_mono_init>:

/**
 * \brief Initialize abstract display controller and abstract display.
 */
void display_mono_init(const struct display_mono *const me, const gfx_coord_t width, const uint8_t pages)
{
    638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6390:	4605      	mov	r5, r0
    6392:	4688      	mov	r8, r1
    6394:	4692      	mov	sl, r2
	uint8_t page = 0;

	if (me->dc) {
    6396:	6800      	ldr	r0, [r0, #0]
    6398:	b118      	cbz	r0, 63a2 <display_mono_init+0x16>
		me->dc->interface->set_start_line_address(me->dc, 0);
    639a:	6843      	ldr	r3, [r0, #4]
    639c:	691b      	ldr	r3, [r3, #16]
    639e:	2100      	movs	r1, #0
    63a0:	4798      	blx	r3
	}
	for (; page < pages; page++) {
    63a2:	f1ba 0f00 	cmp.w	sl, #0
    63a6:	d002      	beq.n	63ae <display_mono_init+0x22>
    63a8:	2700      	movs	r7, #0
		uint8_t column = 0;

		for (; column < width; column++) {
    63aa:	46b9      	mov	r9, r7
    63ac:	e010      	b.n	63d0 <display_mono_init+0x44>
    63ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			me->interface->put_byte(me, page, column, 0x00);
    63b2:	68ab      	ldr	r3, [r5, #8]
    63b4:	685e      	ldr	r6, [r3, #4]
    63b6:	464b      	mov	r3, r9
    63b8:	4622      	mov	r2, r4
    63ba:	4639      	mov	r1, r7
    63bc:	4628      	mov	r0, r5
    63be:	47b0      	blx	r6
		for (; column < width; column++) {
    63c0:	3401      	adds	r4, #1
    63c2:	b2e4      	uxtb	r4, r4
    63c4:	45a0      	cmp	r8, r4
    63c6:	d1f4      	bne.n	63b2 <display_mono_init+0x26>
	for (; page < pages; page++) {
    63c8:	3701      	adds	r7, #1
    63ca:	b2ff      	uxtb	r7, r7
    63cc:	45ba      	cmp	sl, r7
    63ce:	d004      	beq.n	63da <display_mono_init+0x4e>
		for (; column < width; column++) {
    63d0:	464c      	mov	r4, r9
    63d2:	f1b8 0f00 	cmp.w	r8, #0
    63d6:	d1ec      	bne.n	63b2 <display_mono_init+0x26>
    63d8:	e7f6      	b.n	63c8 <display_mono_init+0x3c>
    63da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000063de <framebuffer_put_page>:
/**
 * \brief Put a page from RAM to the buffer in RAM.
 */
void framebuffer_put_page(const struct display_mono *const me, const enum gfx_mono_color *const data,
                          const gfx_coord_t page, const gfx_coord_t page_offset, gfx_coord_t width)
{
    63de:	b410      	push	{r4}
	const struct framebuffer * disp           = (const struct framebuffer *)me;
	const enum gfx_mono_color *data_pt        = data;
	gfx_coord_t *              framebuffer_pt = disp->fbpointer + ((page * disp->parent.width) + page_offset);
    63e0:	7904      	ldrb	r4, [r0, #4]
    63e2:	fb02 3304 	mla	r3, r2, r4, r3
    63e6:	68c2      	ldr	r2, [r0, #12]
    63e8:	4413      	add	r3, r2
    63ea:	1e58      	subs	r0, r3, #1
    63ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    63f0:	3a01      	subs	r2, #1
    63f2:	fa53 f282 	uxtab	r2, r3, r2

	do {
		*framebuffer_pt++ = *data_pt++;
    63f6:	f811 3b01 	ldrb.w	r3, [r1], #1
    63fa:	f800 3f01 	strb.w	r3, [r0, #1]!
	} while (--width > 0);
    63fe:	4290      	cmp	r0, r2
    6400:	d1f9      	bne.n	63f6 <framebuffer_put_page+0x18>
}
    6402:	f85d 4b04 	ldr.w	r4, [sp], #4
    6406:	4770      	bx	lr

00006408 <framebuffer_put_byte>:
/**
 * \brief Put a byte to the buffer in RAM
 */
void framebuffer_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                          const uint8_t data)
{
    6408:	b410      	push	{r4}
	const struct framebuffer *disp = (const struct framebuffer *)me;

	*(disp->fbpointer + (page * disp->parent.width) + column) = data;
    640a:	7904      	ldrb	r4, [r0, #4]
    640c:	68c0      	ldr	r0, [r0, #12]
    640e:	fb01 0104 	mla	r1, r1, r4, r0
    6412:	548b      	strb	r3, [r1, r2]
}
    6414:	f85d 4b04 	ldr.w	r4, [sp], #4
    6418:	4770      	bx	lr

0000641a <framebuffer_get_byte>:
 */
uint8_t framebuffer_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
	const struct framebuffer *disp = (const struct framebuffer *)me;

	return *(disp->fbpointer + (page * disp->parent.width) + column);
    641a:	7903      	ldrb	r3, [r0, #4]
    641c:	68c0      	ldr	r0, [r0, #12]
    641e:	fb01 0103 	mla	r1, r1, r3, r0
}
    6422:	5c88      	ldrb	r0, [r1, r2]
    6424:	4770      	bx	lr
	...

00006428 <framebuffer_draw_pixel>:
{
    6428:	b530      	push	{r4, r5, lr}
    642a:	b085      	sub	sp, #20
	display_mono_draw_pixel(&disp->parent, x, y, color, disp->parent.width, disp->parent.height, 8);
    642c:	2508      	movs	r5, #8
    642e:	9502      	str	r5, [sp, #8]
    6430:	7945      	ldrb	r5, [r0, #5]
    6432:	9501      	str	r5, [sp, #4]
    6434:	7904      	ldrb	r4, [r0, #4]
    6436:	9400      	str	r4, [sp, #0]
    6438:	4c01      	ldr	r4, [pc, #4]	; (6440 <framebuffer_draw_pixel+0x18>)
    643a:	47a0      	blx	r4
}
    643c:	b005      	add	sp, #20
    643e:	bd30      	pop	{r4, r5, pc}
    6440:	000062df 	.word	0x000062df

00006444 <framebuffer_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the buffer in RAM
 */
void framebuffer_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
    6444:	b510      	push	{r4, lr}
    6446:	b082      	sub	sp, #8
	const struct framebuffer *disp = (const struct framebuffer *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
    6448:	f89d 4010 	ldrb.w	r4, [sp, #16]
    644c:	9400      	str	r4, [sp, #0]
    644e:	4c02      	ldr	r4, [pc, #8]	; (6458 <framebuffer_mask_byte+0x14>)
    6450:	47a0      	blx	r4
}
    6452:	b002      	add	sp, #8
    6454:	bd10      	pop	{r4, pc}
    6456:	bf00      	nop
    6458:	00006295 	.word	0x00006295

0000645c <framebuffer_construct>:
{
    645c:	b570      	push	{r4, r5, r6, lr}
    645e:	b082      	sub	sp, #8
    6460:	4604      	mov	r4, r0
    6462:	460d      	mov	r5, r1
	display_mono_construct(&display->parent, NULL, width, height, &framebuffer_interface);
    6464:	4904      	ldr	r1, [pc, #16]	; (6478 <framebuffer_construct+0x1c>)
    6466:	9100      	str	r1, [sp, #0]
    6468:	2100      	movs	r1, #0
    646a:	4e04      	ldr	r6, [pc, #16]	; (647c <framebuffer_construct+0x20>)
    646c:	47b0      	blx	r6
	display->fbpointer = framebuffer;
    646e:	60e5      	str	r5, [r4, #12]
}
    6470:	4620      	mov	r0, r4
    6472:	b002      	add	sp, #8
    6474:	bd70      	pop	{r4, r5, r6, pc}
    6476:	bf00      	nop
    6478:	200002dc 	.word	0x200002dc
    647c:	0000625d 	.word	0x0000625d

00006480 <display_ctrl_mono_construct>:
 */
struct display_ctrl_mono *display_ctrl_mono_construct(struct display_ctrl_mono *const           me,
                                                      struct io_descriptor *const               io,
                                                      struct display_ctrl_mono_interface *const interface)
{
	me->io        = io;
    6480:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    6482:	6042      	str	r2, [r0, #4]

	return me;
}
    6484:	4770      	bx	lr
	...

00006488 <display_ctrl_mono_hard_reset>:

/**
 * \brief Perform the hard reset of display controller
 */
void display_ctrl_mono_hard_reset(const uint8_t pin, const uint32_t delay)
{
    6488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    648a:	f000 031f 	and.w	r3, r0, #31
    648e:	2501      	movs	r5, #1
    6490:	409d      	lsls	r5, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6492:	0944      	lsrs	r4, r0, #5
    6494:	01e4      	lsls	r4, r4, #7
    6496:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    649a:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
    649e:	6165      	str	r5, [r4, #20]
	gpio_set_pin_level(pin, false);
	delay_us(delay);
    64a0:	b28f      	uxth	r7, r1
    64a2:	4638      	mov	r0, r7
    64a4:	4e02      	ldr	r6, [pc, #8]	; (64b0 <display_ctrl_mono_hard_reset+0x28>)
    64a6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    64a8:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(pin, true);
	delay_us(delay);
    64aa:	4638      	mov	r0, r7
    64ac:	47b0      	blx	r6
    64ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64b0:	00002fb1 	.word	0x00002fb1

000064b4 <__aeabi_atexit>:
    64b4:	460b      	mov	r3, r1
    64b6:	4601      	mov	r1, r0
    64b8:	4618      	mov	r0, r3
    64ba:	f000 b801 	b.w	64c0 <__cxa_atexit>
    64be:	bf00      	nop

000064c0 <__cxa_atexit>:
    64c0:	4613      	mov	r3, r2
    64c2:	460a      	mov	r2, r1
    64c4:	4601      	mov	r1, r0
    64c6:	2002      	movs	r0, #2
    64c8:	f000 b988 	b.w	67dc <__register_exitproc>

000064cc <__libc_init_array>:
    64cc:	b570      	push	{r4, r5, r6, lr}
    64ce:	4e0f      	ldr	r6, [pc, #60]	; (650c <__libc_init_array+0x40>)
    64d0:	4d0f      	ldr	r5, [pc, #60]	; (6510 <__libc_init_array+0x44>)
    64d2:	1b76      	subs	r6, r6, r5
    64d4:	10b6      	asrs	r6, r6, #2
    64d6:	bf18      	it	ne
    64d8:	2400      	movne	r4, #0
    64da:	d005      	beq.n	64e8 <__libc_init_array+0x1c>
    64dc:	3401      	adds	r4, #1
    64de:	f855 3b04 	ldr.w	r3, [r5], #4
    64e2:	4798      	blx	r3
    64e4:	42a6      	cmp	r6, r4
    64e6:	d1f9      	bne.n	64dc <__libc_init_array+0x10>
    64e8:	4e0a      	ldr	r6, [pc, #40]	; (6514 <__libc_init_array+0x48>)
    64ea:	4d0b      	ldr	r5, [pc, #44]	; (6518 <__libc_init_array+0x4c>)
    64ec:	1b76      	subs	r6, r6, r5
    64ee:	f001 f845 	bl	757c <_init>
    64f2:	10b6      	asrs	r6, r6, #2
    64f4:	bf18      	it	ne
    64f6:	2400      	movne	r4, #0
    64f8:	d006      	beq.n	6508 <__libc_init_array+0x3c>
    64fa:	3401      	adds	r4, #1
    64fc:	f855 3b04 	ldr.w	r3, [r5], #4
    6500:	4798      	blx	r3
    6502:	42a6      	cmp	r6, r4
    6504:	d1f9      	bne.n	64fa <__libc_init_array+0x2e>
    6506:	bd70      	pop	{r4, r5, r6, pc}
    6508:	bd70      	pop	{r4, r5, r6, pc}
    650a:	bf00      	nop
    650c:	00007588 	.word	0x00007588
    6510:	00007588 	.word	0x00007588
    6514:	00007594 	.word	0x00007594
    6518:	00007588 	.word	0x00007588

0000651c <memcpy>:
    651c:	4684      	mov	ip, r0
    651e:	ea41 0300 	orr.w	r3, r1, r0
    6522:	f013 0303 	ands.w	r3, r3, #3
    6526:	d16d      	bne.n	6604 <memcpy+0xe8>
    6528:	3a40      	subs	r2, #64	; 0x40
    652a:	d341      	bcc.n	65b0 <memcpy+0x94>
    652c:	f851 3b04 	ldr.w	r3, [r1], #4
    6530:	f840 3b04 	str.w	r3, [r0], #4
    6534:	f851 3b04 	ldr.w	r3, [r1], #4
    6538:	f840 3b04 	str.w	r3, [r0], #4
    653c:	f851 3b04 	ldr.w	r3, [r1], #4
    6540:	f840 3b04 	str.w	r3, [r0], #4
    6544:	f851 3b04 	ldr.w	r3, [r1], #4
    6548:	f840 3b04 	str.w	r3, [r0], #4
    654c:	f851 3b04 	ldr.w	r3, [r1], #4
    6550:	f840 3b04 	str.w	r3, [r0], #4
    6554:	f851 3b04 	ldr.w	r3, [r1], #4
    6558:	f840 3b04 	str.w	r3, [r0], #4
    655c:	f851 3b04 	ldr.w	r3, [r1], #4
    6560:	f840 3b04 	str.w	r3, [r0], #4
    6564:	f851 3b04 	ldr.w	r3, [r1], #4
    6568:	f840 3b04 	str.w	r3, [r0], #4
    656c:	f851 3b04 	ldr.w	r3, [r1], #4
    6570:	f840 3b04 	str.w	r3, [r0], #4
    6574:	f851 3b04 	ldr.w	r3, [r1], #4
    6578:	f840 3b04 	str.w	r3, [r0], #4
    657c:	f851 3b04 	ldr.w	r3, [r1], #4
    6580:	f840 3b04 	str.w	r3, [r0], #4
    6584:	f851 3b04 	ldr.w	r3, [r1], #4
    6588:	f840 3b04 	str.w	r3, [r0], #4
    658c:	f851 3b04 	ldr.w	r3, [r1], #4
    6590:	f840 3b04 	str.w	r3, [r0], #4
    6594:	f851 3b04 	ldr.w	r3, [r1], #4
    6598:	f840 3b04 	str.w	r3, [r0], #4
    659c:	f851 3b04 	ldr.w	r3, [r1], #4
    65a0:	f840 3b04 	str.w	r3, [r0], #4
    65a4:	f851 3b04 	ldr.w	r3, [r1], #4
    65a8:	f840 3b04 	str.w	r3, [r0], #4
    65ac:	3a40      	subs	r2, #64	; 0x40
    65ae:	d2bd      	bcs.n	652c <memcpy+0x10>
    65b0:	3230      	adds	r2, #48	; 0x30
    65b2:	d311      	bcc.n	65d8 <memcpy+0xbc>
    65b4:	f851 3b04 	ldr.w	r3, [r1], #4
    65b8:	f840 3b04 	str.w	r3, [r0], #4
    65bc:	f851 3b04 	ldr.w	r3, [r1], #4
    65c0:	f840 3b04 	str.w	r3, [r0], #4
    65c4:	f851 3b04 	ldr.w	r3, [r1], #4
    65c8:	f840 3b04 	str.w	r3, [r0], #4
    65cc:	f851 3b04 	ldr.w	r3, [r1], #4
    65d0:	f840 3b04 	str.w	r3, [r0], #4
    65d4:	3a10      	subs	r2, #16
    65d6:	d2ed      	bcs.n	65b4 <memcpy+0x98>
    65d8:	320c      	adds	r2, #12
    65da:	d305      	bcc.n	65e8 <memcpy+0xcc>
    65dc:	f851 3b04 	ldr.w	r3, [r1], #4
    65e0:	f840 3b04 	str.w	r3, [r0], #4
    65e4:	3a04      	subs	r2, #4
    65e6:	d2f9      	bcs.n	65dc <memcpy+0xc0>
    65e8:	3204      	adds	r2, #4
    65ea:	d008      	beq.n	65fe <memcpy+0xe2>
    65ec:	07d2      	lsls	r2, r2, #31
    65ee:	bf1c      	itt	ne
    65f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    65f4:	f800 3b01 	strbne.w	r3, [r0], #1
    65f8:	d301      	bcc.n	65fe <memcpy+0xe2>
    65fa:	880b      	ldrh	r3, [r1, #0]
    65fc:	8003      	strh	r3, [r0, #0]
    65fe:	4660      	mov	r0, ip
    6600:	4770      	bx	lr
    6602:	bf00      	nop
    6604:	2a08      	cmp	r2, #8
    6606:	d313      	bcc.n	6630 <memcpy+0x114>
    6608:	078b      	lsls	r3, r1, #30
    660a:	d08d      	beq.n	6528 <memcpy+0xc>
    660c:	f010 0303 	ands.w	r3, r0, #3
    6610:	d08a      	beq.n	6528 <memcpy+0xc>
    6612:	f1c3 0304 	rsb	r3, r3, #4
    6616:	1ad2      	subs	r2, r2, r3
    6618:	07db      	lsls	r3, r3, #31
    661a:	bf1c      	itt	ne
    661c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    6620:	f800 3b01 	strbne.w	r3, [r0], #1
    6624:	d380      	bcc.n	6528 <memcpy+0xc>
    6626:	f831 3b02 	ldrh.w	r3, [r1], #2
    662a:	f820 3b02 	strh.w	r3, [r0], #2
    662e:	e77b      	b.n	6528 <memcpy+0xc>
    6630:	3a04      	subs	r2, #4
    6632:	d3d9      	bcc.n	65e8 <memcpy+0xcc>
    6634:	3a01      	subs	r2, #1
    6636:	f811 3b01 	ldrb.w	r3, [r1], #1
    663a:	f800 3b01 	strb.w	r3, [r0], #1
    663e:	d2f9      	bcs.n	6634 <memcpy+0x118>
    6640:	780b      	ldrb	r3, [r1, #0]
    6642:	7003      	strb	r3, [r0, #0]
    6644:	784b      	ldrb	r3, [r1, #1]
    6646:	7043      	strb	r3, [r0, #1]
    6648:	788b      	ldrb	r3, [r1, #2]
    664a:	7083      	strb	r3, [r0, #2]
    664c:	4660      	mov	r0, ip
    664e:	4770      	bx	lr

00006650 <memset>:
    6650:	b470      	push	{r4, r5, r6}
    6652:	0786      	lsls	r6, r0, #30
    6654:	d046      	beq.n	66e4 <memset+0x94>
    6656:	1e54      	subs	r4, r2, #1
    6658:	2a00      	cmp	r2, #0
    665a:	d041      	beq.n	66e0 <memset+0x90>
    665c:	b2ca      	uxtb	r2, r1
    665e:	4603      	mov	r3, r0
    6660:	e002      	b.n	6668 <memset+0x18>
    6662:	f114 34ff 	adds.w	r4, r4, #4294967295
    6666:	d33b      	bcc.n	66e0 <memset+0x90>
    6668:	f803 2b01 	strb.w	r2, [r3], #1
    666c:	079d      	lsls	r5, r3, #30
    666e:	d1f8      	bne.n	6662 <memset+0x12>
    6670:	2c03      	cmp	r4, #3
    6672:	d92e      	bls.n	66d2 <memset+0x82>
    6674:	b2cd      	uxtb	r5, r1
    6676:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    667a:	2c0f      	cmp	r4, #15
    667c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    6680:	d919      	bls.n	66b6 <memset+0x66>
    6682:	f103 0210 	add.w	r2, r3, #16
    6686:	4626      	mov	r6, r4
    6688:	3e10      	subs	r6, #16
    668a:	2e0f      	cmp	r6, #15
    668c:	f842 5c10 	str.w	r5, [r2, #-16]
    6690:	f842 5c0c 	str.w	r5, [r2, #-12]
    6694:	f842 5c08 	str.w	r5, [r2, #-8]
    6698:	f842 5c04 	str.w	r5, [r2, #-4]
    669c:	f102 0210 	add.w	r2, r2, #16
    66a0:	d8f2      	bhi.n	6688 <memset+0x38>
    66a2:	f1a4 0210 	sub.w	r2, r4, #16
    66a6:	f022 020f 	bic.w	r2, r2, #15
    66aa:	f004 040f 	and.w	r4, r4, #15
    66ae:	3210      	adds	r2, #16
    66b0:	2c03      	cmp	r4, #3
    66b2:	4413      	add	r3, r2
    66b4:	d90d      	bls.n	66d2 <memset+0x82>
    66b6:	461e      	mov	r6, r3
    66b8:	4622      	mov	r2, r4
    66ba:	3a04      	subs	r2, #4
    66bc:	2a03      	cmp	r2, #3
    66be:	f846 5b04 	str.w	r5, [r6], #4
    66c2:	d8fa      	bhi.n	66ba <memset+0x6a>
    66c4:	1f22      	subs	r2, r4, #4
    66c6:	f022 0203 	bic.w	r2, r2, #3
    66ca:	3204      	adds	r2, #4
    66cc:	4413      	add	r3, r2
    66ce:	f004 0403 	and.w	r4, r4, #3
    66d2:	b12c      	cbz	r4, 66e0 <memset+0x90>
    66d4:	b2c9      	uxtb	r1, r1
    66d6:	441c      	add	r4, r3
    66d8:	f803 1b01 	strb.w	r1, [r3], #1
    66dc:	429c      	cmp	r4, r3
    66de:	d1fb      	bne.n	66d8 <memset+0x88>
    66e0:	bc70      	pop	{r4, r5, r6}
    66e2:	4770      	bx	lr
    66e4:	4614      	mov	r4, r2
    66e6:	4603      	mov	r3, r0
    66e8:	e7c2      	b.n	6670 <memset+0x20>
    66ea:	bf00      	nop
	...

00006700 <strlen>:
    6700:	f890 f000 	pld	[r0]
    6704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6708:	f020 0107 	bic.w	r1, r0, #7
    670c:	f06f 0c00 	mvn.w	ip, #0
    6710:	f010 0407 	ands.w	r4, r0, #7
    6714:	f891 f020 	pld	[r1, #32]
    6718:	f040 8049 	bne.w	67ae <strlen+0xae>
    671c:	f04f 0400 	mov.w	r4, #0
    6720:	f06f 0007 	mvn.w	r0, #7
    6724:	e9d1 2300 	ldrd	r2, r3, [r1]
    6728:	f891 f040 	pld	[r1, #64]	; 0x40
    672c:	f100 0008 	add.w	r0, r0, #8
    6730:	fa82 f24c 	uadd8	r2, r2, ip
    6734:	faa4 f28c 	sel	r2, r4, ip
    6738:	fa83 f34c 	uadd8	r3, r3, ip
    673c:	faa2 f38c 	sel	r3, r2, ip
    6740:	bb4b      	cbnz	r3, 6796 <strlen+0x96>
    6742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6746:	fa82 f24c 	uadd8	r2, r2, ip
    674a:	f100 0008 	add.w	r0, r0, #8
    674e:	faa4 f28c 	sel	r2, r4, ip
    6752:	fa83 f34c 	uadd8	r3, r3, ip
    6756:	faa2 f38c 	sel	r3, r2, ip
    675a:	b9e3      	cbnz	r3, 6796 <strlen+0x96>
    675c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    6760:	fa82 f24c 	uadd8	r2, r2, ip
    6764:	f100 0008 	add.w	r0, r0, #8
    6768:	faa4 f28c 	sel	r2, r4, ip
    676c:	fa83 f34c 	uadd8	r3, r3, ip
    6770:	faa2 f38c 	sel	r3, r2, ip
    6774:	b97b      	cbnz	r3, 6796 <strlen+0x96>
    6776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    677a:	f101 0120 	add.w	r1, r1, #32
    677e:	fa82 f24c 	uadd8	r2, r2, ip
    6782:	f100 0008 	add.w	r0, r0, #8
    6786:	faa4 f28c 	sel	r2, r4, ip
    678a:	fa83 f34c 	uadd8	r3, r3, ip
    678e:	faa2 f38c 	sel	r3, r2, ip
    6792:	2b00      	cmp	r3, #0
    6794:	d0c6      	beq.n	6724 <strlen+0x24>
    6796:	2a00      	cmp	r2, #0
    6798:	bf04      	itt	eq
    679a:	3004      	addeq	r0, #4
    679c:	461a      	moveq	r2, r3
    679e:	ba12      	rev	r2, r2
    67a0:	fab2 f282 	clz	r2, r2
    67a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    67a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    67ac:	4770      	bx	lr
    67ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    67b2:	f004 0503 	and.w	r5, r4, #3
    67b6:	f1c4 0000 	rsb	r0, r4, #0
    67ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    67be:	f014 0f04 	tst.w	r4, #4
    67c2:	f891 f040 	pld	[r1, #64]	; 0x40
    67c6:	fa0c f505 	lsl.w	r5, ip, r5
    67ca:	ea62 0205 	orn	r2, r2, r5
    67ce:	bf1c      	itt	ne
    67d0:	ea63 0305 	ornne	r3, r3, r5
    67d4:	4662      	movne	r2, ip
    67d6:	f04f 0400 	mov.w	r4, #0
    67da:	e7a9      	b.n	6730 <strlen+0x30>

000067dc <__register_exitproc>:
    67dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67e0:	4d2c      	ldr	r5, [pc, #176]	; (6894 <__register_exitproc+0xb8>)
    67e2:	4606      	mov	r6, r0
    67e4:	6828      	ldr	r0, [r5, #0]
    67e6:	4698      	mov	r8, r3
    67e8:	460f      	mov	r7, r1
    67ea:	4691      	mov	r9, r2
    67ec:	f000 f882 	bl	68f4 <__retarget_lock_acquire_recursive>
    67f0:	4b29      	ldr	r3, [pc, #164]	; (6898 <__register_exitproc+0xbc>)
    67f2:	681c      	ldr	r4, [r3, #0]
    67f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    67f8:	2b00      	cmp	r3, #0
    67fa:	d03e      	beq.n	687a <__register_exitproc+0x9e>
    67fc:	685a      	ldr	r2, [r3, #4]
    67fe:	2a1f      	cmp	r2, #31
    6800:	dc1c      	bgt.n	683c <__register_exitproc+0x60>
    6802:	f102 0e01 	add.w	lr, r2, #1
    6806:	b176      	cbz	r6, 6826 <__register_exitproc+0x4a>
    6808:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    680c:	2401      	movs	r4, #1
    680e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    6812:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    6816:	4094      	lsls	r4, r2
    6818:	4320      	orrs	r0, r4
    681a:	2e02      	cmp	r6, #2
    681c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    6820:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    6824:	d023      	beq.n	686e <__register_exitproc+0x92>
    6826:	3202      	adds	r2, #2
    6828:	f8c3 e004 	str.w	lr, [r3, #4]
    682c:	6828      	ldr	r0, [r5, #0]
    682e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    6832:	f000 f861 	bl	68f8 <__retarget_lock_release_recursive>
    6836:	2000      	movs	r0, #0
    6838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    683c:	4b17      	ldr	r3, [pc, #92]	; (689c <__register_exitproc+0xc0>)
    683e:	b30b      	cbz	r3, 6884 <__register_exitproc+0xa8>
    6840:	f44f 70c8 	mov.w	r0, #400	; 0x190
    6844:	f3af 8000 	nop.w
    6848:	4603      	mov	r3, r0
    684a:	b1d8      	cbz	r0, 6884 <__register_exitproc+0xa8>
    684c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    6850:	6002      	str	r2, [r0, #0]
    6852:	2100      	movs	r1, #0
    6854:	6041      	str	r1, [r0, #4]
    6856:	460a      	mov	r2, r1
    6858:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    685c:	f04f 0e01 	mov.w	lr, #1
    6860:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    6864:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    6868:	2e00      	cmp	r6, #0
    686a:	d0dc      	beq.n	6826 <__register_exitproc+0x4a>
    686c:	e7cc      	b.n	6808 <__register_exitproc+0x2c>
    686e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    6872:	430c      	orrs	r4, r1
    6874:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    6878:	e7d5      	b.n	6826 <__register_exitproc+0x4a>
    687a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    687e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    6882:	e7bb      	b.n	67fc <__register_exitproc+0x20>
    6884:	6828      	ldr	r0, [r5, #0]
    6886:	f000 f837 	bl	68f8 <__retarget_lock_release_recursive>
    688a:	f04f 30ff 	mov.w	r0, #4294967295
    688e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6892:	bf00      	nop
    6894:	20000718 	.word	0x20000718
    6898:	00007578 	.word	0x00007578
    689c:	00000000 	.word	0x00000000

000068a0 <register_fini>:
    68a0:	4b02      	ldr	r3, [pc, #8]	; (68ac <register_fini+0xc>)
    68a2:	b113      	cbz	r3, 68aa <register_fini+0xa>
    68a4:	4802      	ldr	r0, [pc, #8]	; (68b0 <register_fini+0x10>)
    68a6:	f000 b805 	b.w	68b4 <atexit>
    68aa:	4770      	bx	lr
    68ac:	00000000 	.word	0x00000000
    68b0:	000068c1 	.word	0x000068c1

000068b4 <atexit>:
    68b4:	2300      	movs	r3, #0
    68b6:	4601      	mov	r1, r0
    68b8:	461a      	mov	r2, r3
    68ba:	4618      	mov	r0, r3
    68bc:	f7ff bf8e 	b.w	67dc <__register_exitproc>

000068c0 <__libc_fini_array>:
    68c0:	b538      	push	{r3, r4, r5, lr}
    68c2:	4c0a      	ldr	r4, [pc, #40]	; (68ec <__libc_fini_array+0x2c>)
    68c4:	4d0a      	ldr	r5, [pc, #40]	; (68f0 <__libc_fini_array+0x30>)
    68c6:	1b64      	subs	r4, r4, r5
    68c8:	10a4      	asrs	r4, r4, #2
    68ca:	d00a      	beq.n	68e2 <__libc_fini_array+0x22>
    68cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    68d0:	3b01      	subs	r3, #1
    68d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    68d6:	3c01      	subs	r4, #1
    68d8:	f855 3904 	ldr.w	r3, [r5], #-4
    68dc:	4798      	blx	r3
    68de:	2c00      	cmp	r4, #0
    68e0:	d1f9      	bne.n	68d6 <__libc_fini_array+0x16>
    68e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    68e6:	f000 be55 	b.w	7594 <_fini>
    68ea:	bf00      	nop
    68ec:	000075a4 	.word	0x000075a4
    68f0:	000075a0 	.word	0x000075a0

000068f4 <__retarget_lock_acquire_recursive>:
    68f4:	4770      	bx	lr
    68f6:	bf00      	nop

000068f8 <__retarget_lock_release_recursive>:
    68f8:	4770      	bx	lr
    68fa:	bf00      	nop

000068fc <_ZL5Mesg1>:
    68fc:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

0000690c <_ZL5Mesg2>:
    690c:	6144 6174 203a 0000                         Data: ..

00006914 <_ZL10HexToAscii>:
    6914:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

00006924 <_ZL11HistoryMesg>:
    6924:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
    6934:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
    6944:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
    6954:	0d0a 0000 0d0a 7254 6e61 6d73 7469 2620     ......Transmit &
    6964:	5220 6365 6965 6576 5720 7469 2068 614c      Receive With La
    6974:	6562 736c 4d20 646f 0a65 000d 0d0a 4553     bels Mode.....SE
    6984:	464c 542d 5345 2c54 4920 746e 7265 616e     LF-TEST, Interna
    6994:	206c 6944 6967 6174 206c 6f4c 706f 622d     l Digital Loop-b
    69a4:	6361 2c6b 4e20 206f 6164 6174 6920 2073     ack, No data is 
    69b4:	7274 6e61 6d73 7469 6574 2064 7865 6574     transmitted exte
    69c4:	6e72 6c61 796c 0d0a 0000 0000 0d0a 6c53     rnally........Sl
    69d4:	776f 5320 6570 6465 0000 0000 0d0a 6146     ow Speed......Fa
    69e4:	7473 5320 6570 6465 0000 0000 0d0a 7254     st Speed......Tr
    69f4:	6e61 6d73 7469 6574 2072 6150 6972 7974     ansmitter Parity
    6a04:	4520 616e 6c62 6465 0000 0000 0d0a 4948      Enabled......HI
    6a14:	332d 3935 2033 6166 6c69 6465 7420 206f     -3593 failed to 
    6a24:	6e69 7469 6c69 7a69 0a65 000d 0d0a 6552     initilize.....Re
    6a34:	6563 7669 7265 312d 5020 7261 7469 2079     ceiver-1 Parity 
    6a44:	7369 4520 616e 6c62 6465 0000 0d0a 6552     is Enabled....Re
    6a54:	6563 7669 7265 312d 5020 7261 7469 2079     ceiver-1 Parity 
    6a64:	7369 4420 7369 6261 656c 0064 0d0a 6552     is Disabled...Re
    6a74:	6563 7669 7265 322d 5020 7261 7469 2079     ceiver-2 Parity 
    6a84:	7369 4520 616e 6c62 6465 0000 0d0a 6552     is Enabled....Re
    6a94:	6563 7669 7265 322d 5020 7261 7469 2079     ceiver-2 Parity 
    6aa4:	7369 4420 7369 6261 656c 0064 0d0a 6c41     is Disabled...Al
    6ab4:	206c 616c 6562 736c 6120 6572 4520 616e     l labels are Ena
    6ac4:	6c62 6465 0000 0000 0d0a 6c41 206c 616c     bled......All la
    6ad4:	6562 736c 6120 6572 4420 7369 6261 656c     bels are Disable
    6ae4:	0064 0000 0d0a 500a 6572 7373 5320 2d57     d......Press SW-
    6af4:	2031 6f74 7320 6174 7472 6920 696e 6974     1 to start initi
    6b04:	6c61 796c 0d0a 000a 2d2d 202d 7542 7474     ally....--- Butt
    6b14:	6e6f 4320 6d6f 616d 646e 2073 2d2d 0a2d     on Commands ---.
    6b24:	000d 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
    6b34:	6f74 4420 7369 6c70 7961 5320 6174 7574     to Display Statu
    6b44:	2073 6e61 2064 6f43 746e 6f72 206c 6552     s and Control Re
    6b54:	6967 7473 7265 0a73 000d 0000 2020 2070     gisters.....  p 
    6b64:	6f74 5020 7561 6573 0d0a 0000 2020 206d     to Pause....  m 
    6b74:	6f74 4420 7369 6c70 7961 4c20 6261 6c65     to Display Label
    6b84:	4d20 6d65 726f 0079 0d0a 003e 0d0a 7254      Memory...>...Tr
    6b94:	6e61 6d73 7469 6974 676e 0d0a 003e 0000     ansmitting..>...
    6ba4:	0d0a 4948 332d 3935 2033 7453 7461 7375     ..HI-3593 Status
    6bb4:	202c 6f43 746e 6f72 206c 6552 6967 7473     , Control Regist
    6bc4:	7265 0d73 000a 0000 0d0a 2009 2a20 2a2a     ers........  ***
    6bd4:	2a2a 5020 6572 7373 2020 7073 6361 6265     ** Press  spaceb
    6be4:	7261 7420 206f 6f63 746e 6e69 6575 2a20     ar to continue *
    6bf4:	2a2a 2a2a 002a 0000 0a0a 540d 6172 736e     *****......Trans
    6c04:	696d 2074 6150 7375 6465 0d0a 0000 0000     mit Paused......
    6c14:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
    6c24:	4f54 2d4e 2032 6f74 7420 6172 736e 696d     TON-2 to transmi
    6c34:	2074 6e6f 2065 7266 6d61 2065 6e61 2064     t one frame and 
    6c44:	6170 7375 0a65 000d 0d0a 7250 7365 2073     pause.....Press 
    6c54:	4c4f 4445 425f 5455 4f54 2d4e 2033 6f74     OLED_BUTTON-3 to
    6c64:	5220 7365 6d75 0a65 000d 0000 0d0a 7254      Resume.......Tr
    6c74:	6e61 6d73 7469 6574 2072 6552 7573 656d     ansmitter Resume
    6c84:	2e64 2e2e 0d0a 0000 0d0a 6552 6563 7669     d.........Receiv
    6c94:	7265 3120 4c20 6261 6c65 0a73 000d 0000     er 1 Labels.....
    6ca4:	0d0a 6552 6563 7669 7265 3220 4c20 6261     ..Receiver 2 Lab
    6cb4:	6c65 0a73 000d 0000 0d0a 2d0a 2d2d 4320     els........--- C
    6cc4:	6e6f 6f73 656c 4320 6d6f 616d 646e 2073     onsole Commands 
    6cd4:	6548 706c 2d20 2d2d 0000 0000 0d0a 2020     Help ---......  
    6ce4:	2050 203d 6150 6972 7974 5420 676f 6c67     P = Parity Toggl
    6cf4:	2065 6e6f 6f2f 6666 0000 0000 0d0a 2020     e on/off......  
    6d04:	2054 203d 4654 494c 2050 5420 676f 6c67     T = TFLIP  Toggl
    6d14:	2065 6e6f 6f2f 6666 0000 0000 0d0a 2020     e on/off......  
    6d24:	2052 203d 4652 494c 2050 5420 676f 6c67     R = RFLIP  Toggl
    6d34:	2065 6e6f 6f2f 6666 0000 0000 0d0a 2020     e on/off......  
    6d44:	2053 203d 4453 4e4f 202c 4453 2c39 5320     S = SDON, SD9, S
    6d54:	3144 2030 6f54 6767 656c 6f20 2f6e 666f     D10 Toggle on/of
    6d64:	0066 0000 0d0a 2020 2048 203d 6854 7369     f.....  H = This
    6d74:	4820 6c65 2070 6150 6567 0000 0d0a 2020      Help Page....  
    6d84:	7053 6361 2065 6142 2072 203d 6944 7073     Space Bar = Disp
    6d94:	616c 2079 7453 7461 7375 6120 646e 4320     lay Status and C
    6da4:	6e6f 7274 6c6f 7220 6765 0073 0d0a 2020     ontrol regs...  
    6db4:	2049 203d 6e49 7263 6d65 6e65 2074 654d     I = Increment Me
    6dc4:	7373 6761 2065 6e61 2064 7254 6e61 6d73     ssage and Transm
    6dd4:	7469 202e 7845 6c70 726f 7265 4d20 646f     it. Explorer Mod
    6de4:	2065 2d20 4f20 4c4e 2159 0000 0d0a 2020     e  - ONLY!....  
    6df4:	204d 203d 6e45 6574 2072 7543 7473 6d6f     M = Enter Custom
    6e04:	4d20 7365 6173 6567 202e 7845 6c70 726f      Message. Explor
    6e14:	7265 4d20 646f 2065 2d20 4f20 4c4e 2159     er Mode  - ONLY!
    6e24:	0000 0000 0d0a 2020 4e45 4554 3d52 5420     ......  ENTER= T
    6e34:	6172 736e 696d 2074 656e 7478 6d20 7365     ransmit next mes
    6e44:	6173 6567 202e 7845 6c70 726f 7265 4d20     sage. Explorer M
    6e54:	646f 2065 2d20 4f20 4c4e 2159 0d0a 0000     ode  - ONLY!....
    6e64:	7826 3030 2030 0000 5854 5020 7261 7469     &x000 ..TX Parit
    6e74:	2079 4e4f 0d0a 003e 5854 5020 7261 7469     y ON..>.TX Parit
    6e84:	2079 464f 0a46 3e0d 0000 0000 4654 494c     y OFF..>....TFLI
    6e94:	2050 6553 0a74 3e0d 0000 0000 4654 494c     P Set..>....TFLI
    6ea4:	2050 6c43 6165 6572 0a64 3e0d 0000 0000     P Cleared..>....
    6eb4:	4552 2d43 2031 4652 494c 2050 6553 0a74     REC-1 RFLIP Set.
    6ec4:	3e0d 0000 4552 2d43 2031 4652 494c 2050     .>..REC-1 RFLIP 
    6ed4:	6c43 6165 6572 0a64 3e0d 0000 4552 2d43     Cleared..>..REC-
    6ee4:	2032 4652 494c 2050 6553 0a74 3e0d 0000     2 RFLIP Set..>..
    6ef4:	4552 2d43 2032 4652 494c 2050 6c43 6165     REC-2 RFLIP Clea
    6f04:	6572 0a64 3e0d 0000 4552 2d43 2031 4453     red..>..REC-1 SD
    6f14:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
    6f24:	6553 0a74 3e0d 0000 4552 2d43 2031 4453     Set..>..REC-1 SD
    6f34:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
    6f44:	6c43 6165 6572 0a64 3e0d 0000 4552 2d43     Cleared..>..REC-
    6f54:	2032 4453 4e4f 532c 3944 6120 646e 5320     2 SDON,SD9 and S
    6f64:	3144 2030 6553 0a74 3e0d 0000 4552 2d43     D10 Set..>..REC-
    6f74:	2032 4453 4e4f 532c 3944 6120 646e 5320     2 SDON,SD9 and S
    6f84:	3144 2030 6c43 6165 6572 0a64 3e0d 0000     D10 Cleared..>..
    6f94:	0d0a 500a 6572 7373 5320 6170 6563 4220     ...Press Space B
    6fa4:	7261 6f20 2072 5753 342d 7420 206f 6572     ar or SW-4 to re
    6fb4:	7573 656d 0000 0000 614c 6562 736c 2020     sume....Labels  
    6fc4:	2030 202d 3336 203a 0020 0000 0020 0000     0 - 63:  ... ...
    6fd4:	0d0a 614c 6562 736c 2020 3436 312d 3732     ..Labels  64-127
    6fe4:	203a 0020 0d0a 614c 6562 736c 3120 3832     :  ...Labels 128
    6ff4:	312d 3139 203a 0020 0d0a 614c 6562 736c     -191:  ...Labels
    7004:	3120 3239 322d 3535 203a 0020 0d0a 614c      192-255:  ...La
    7014:	6562 736c 2020 2030 202d 3336 203a 0020     bels  0 - 63:  .
    7024:	0d0a 543e 2058 2020 4420 7461 3a61 0000     ..>TX    Data:..
    7034:	614c 6562 3a6c 0000 003e 0000 6552 2d63     Label:..>...Rec-
    7044:	2031 6144 6174 003a 4c50 2d31 2031 6144     1 Data:.PL1-1 Da
    7054:	6174 003a 614d 6374 3a68 0000 4c50 2d31     ta:.Match:..PL1-
    7064:	2032 6144 6174 003a 4c50 2d31 2033 6144     2 Data:.PL1-3 Da
    7074:	6174 003a 6552 2d63 2032 6144 6174 003a     ta:.Rec-2 Data:.
    7084:	4c50 2d32 2031 6144 6174 003a 4c50 2d32     PL2-1 Data:.PL2-
    7094:	2032 6144 6174 003a 4c50 2d32 2033 6144     2 Data:.PL2-3 Da
    70a4:	6174 003a 0d0a 0000 0d0a 7845 6c70 726f     ta:.......Explor
    70b4:	7265 4d20 646f 0a65 000d 0000 0d0a 2d0a     er Mode........-
    70c4:	2d2d 4220 7475 6f74 206e 6f43 6d6d 6e61     -- Button Comman
    70d4:	7364 2d20 2d2d 0000 0d0a 2020 7073 6361     ds ---....  spac
    70e4:	6265 7261 7420 206f 6944 7073 616c 2079     ebar to Display 
    70f4:	7453 7461 7375 6120 646e 4320 6e6f 7274     Status and Contr
    7104:	6c6f 5220 6765 7369 6574 7372 0000 0000     ol Registers....
    7114:	0d0a 2020 4c4f 4445 422d 5455 4f54 324e     ..  OLED-BUTTON2
    7124:	7420 6172 736e 696d 2074 6e6f 2065 656d      transmit one me
    7134:	7373 6761 2065 7266 6d6f 7420 6172 736e     ssage from trans
    7144:	696d 2074 7562 6666 7265 0000 0d0a 2020     mit buffer....  
    7154:	204c 6f74 5020 6972 746e 4c20 6261 6c65     L to Print Label
    7164:	4d20 6d65 726f 0a79 000d 0000 0d0a 7250      Memory.......Pr
    7174:	7365 2073 4e45 4554 2052 6f74 5420 6172     ess ENTER to Tra
    7184:	736e 696d 2074 726f 7520 6573 7420 6568     nsmit or use the
    7194:	2820 294d 6320 6d6f 616d 646e 7420 206f      (M) command to 
    71a4:	6e65 6574 2072 2061 7563 7473 6d6f 6d20     enter a custom m
    71b4:	7365 6173 6567 0000 7250 7365 2073 5753     essage..Press SW
    71c4:	2034 726f 7320 6170 6563 6162 2072 6f74     4 or spacebar to
    71d4:	6320 6e6f 6974 756e 0065 0000 0d0a 7250      continue.....Pr
    71e4:	7365 2073 4f20 454c 2d44 5542 5454 4e4f     ess  OLED-BUTTON
    71f4:	2033 6f74 5220 7365 6d75 0a65 000d 0000     3 to Resume.....
    7204:	0d0a 6552 7573 656d 2e64 2e2e 0d0a 0000     ..Resumed.......
    7214:	0d0a 433e 6d6f 616d 646e 4d20 0000 0000     ..>Command M....
    7224:	0d0a 6e45 6574 2072 2033 7962 6574 2073     ..Enter 3 bytes 
    7234:	202b 414c 4542 204c 6f74 5420 6172 736e     + LABEL to Trans
    7244:	696d 2074 6f66 6c6c 776f 6465 6220 2079     mit followed by 
    7254:	4e45 4554 0a52 000d 0d0a 6f54 5420 6172     ENTER.....To Tra
    7264:	736e 696d 2c74 6520 746e 7265 3320 6220     nsmit, enter 3 b
    7274:	7479 7365 6620 6c6f 6f6c 6577 2064 7962     ytes followed by
    7284:	6120 4c20 6261 6c65 6220 7479 2065 6f66      a Label byte fo
    7294:	6c6c 776f 6465 6220 2079 4e45 4554 0a52     llowed by ENTER.
    72a4:	000d 0000 6f46 6d72 7461 203a 6942 7374     ....Format: Bits
    72b4:	3233 322d 2c35 4220 7469 3273 2d34 3731     32-25, Bits24-17
    72c4:	202c 6942 7374 3631 392d 202c 414c 4542     , Bits16-9, LABE
    72d4:	0a4c 3a0d 0000 0000 7845 6d61 6c70 3a65     L..:....Example:
    72e4:	3020 2031 3332 3420 2035 3736 4520 544e      01 23 45 67 ENT
    72f4:	5245 0d0a 003a 0000 5020 6572 7373 5220     ER..:... Press R
    7304:	5445 5255 004e 0000 5420 6172 736e 696d     ETURN... Transmi
    7314:	7474 6465 2e2e 0a2e 0a0d 0000 6f43 6d6d     tted........Comm
    7324:	6e61 2064 3a49 4920 636e 6572 656d 746e     and I: Increment
    7334:	6420 7461 0a61 3e0d 0000 0000 2e2e 682f      data..>....../h
    7344:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
    7354:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    7364:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    7374:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
    7384:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
    7394:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
    73a4:	0063 0000                                   c...

000073a8 <user_mux_confs>:
    73a8:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000073ec <channel_confs>:
    73ec:	060c 0000 0000 0000 0000 0000 0000 0000     ................
	...

0000742c <interrupt_cfg>:
	...
    74ac:	2e2e 682f 6c70 722f 6374 682f 6c70 725f     ../hpl/rtc/hpl_r
    74bc:	6374 632e 0000 0000 3000 4000 3400 4000     tc.c.....0.@.4.@
    74cc:	2000 4101 4000 4101 0000 4300 0400 4300     . .A.@.A...C...C
    74dc:	0800 4300 0c00 4300                         ...C...C

000074e4 <_i2cms>:
	...

000074fc <sercomspi_regs>:
    74fc:	000c 0020 0000 0002 0000 0000 0077 01ff     .. .........w...
    750c:	8c04 3000 0000 0200 0000 0000 7700 ff00     ...0.........w..
    751c:	0601 0000 2e2e 682f 6c70 732f 7265 6f63     ....../hpl/serco
    752c:	2f6d 7068 5f6c 6573 6372 6d6f 632e 0000     m/hpl_sercom.c..

0000753c <_usb_ep_cfgs>:
    753c:	0cd4 2000 0000 0000 0040 0000 0c94 2000     ... ....@...... 
    754c:	0000 0000 0040 0000 0c54 2000 0000 0000     ....@...T.. ....
    755c:	0040 0000 2e2e 752f 6273 642f 7665 6369     @...../usb/devic
    756c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00007578 <_global_impure_ptr>:
    7578:	02f0 2000                                   ... 

0000757c <_init>:
    757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    757e:	bf00      	nop
    7580:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7582:	bc08      	pop	{r3}
    7584:	469e      	mov	lr, r3
    7586:	4770      	bx	lr

00007588 <__init_array_start>:
    7588:	000068a1 	.word	0x000068a1

0000758c <__frame_dummy_init_array_entry>:
    758c:	00000289 00001bed                       ........

00007594 <_fini>:
    7594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7596:	bf00      	nop
    7598:	bcf8      	pop	{r3, r4, r5, r6, r7}
    759a:	bc08      	pop	{r3}
    759c:	469e      	mov	lr, r3
    759e:	4770      	bx	lr

000075a0 <__fini_array_start>:
    75a0:	00000265 	.word	0x00000265
