
ARINCTransceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ec  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000494  20000000  000038ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020494  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020494  2**0
                  CONTENTS
  4 .bss          000003c0  20000494  00003d80  00020494  2**2
                  ALLOC
  5 .stack        00010004  20000854  00004140  00020494  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204c2  2**0
                  CONTENTS, READONLY
  8 .debug_info   000320e2  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000494a  00000000  00000000  000525fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014467  00000000  00000000  00056f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001008  00000000  00000000  0006b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017b0  00000000  00000000  0006c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a84b  00000000  00000000  0006db66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a093  00000000  00000000  000a83b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125983  00000000  00000000  000c2444  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002b6c  00000000  00000000  001e7dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 08 01 20 11 03 00 00 0d 03 00 00 0d 03 00 00     X.. ............
      10:	0d 03 00 00 0d 03 00 00 0d 03 00 00 00 00 00 00     ................
	...
      2c:	0d 03 00 00 0d 03 00 00 00 00 00 00 0d 03 00 00     ................
      3c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      4c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      5c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      6c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      7c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      8c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      9c:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      ac:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      bc:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      cc:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
      dc:	0d 03 00 00 0d 03 00 00 0d 03 00 00 00 00 00 00     ................
	...
      f4:	0d 03 00 00 c5 12 00 00 d9 12 00 00 ed 12 00 00     ................
     104:	01 13 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     114:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     124:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     134:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     144:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     154:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     164:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     174:	0d 03 00 00 0d 03 00 00 0d 03 00 00 81 28 00 00     .............(..
     184:	8d 28 00 00 99 28 00 00 a5 28 00 00 0d 03 00 00     .(...(...(......
     194:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     1a4:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     1b4:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     1c4:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     1d4:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     1e4:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     1f4:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     204:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     214:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     224:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     234:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     244:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................
     254:	0d 03 00 00 0d 03 00 00 0d 03 00 00 0d 03 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000494 	.word	0x20000494
     280:	00000000 	.word	0x00000000
     284:	000038ec 	.word	0x000038ec

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000038ec 	.word	0x000038ec
     2c4:	20000498 	.word	0x20000498
     2c8:	000038ec 	.word	0x000038ec
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN15ARINC_InterfaceC1Ev>:


#include "ARINC_Interface.h"

// default constructor
ARINC_Interface::ARINC_Interface()
     2d0:	b510      	push	{r4, lr}
     2d2:	4604      	mov	r4, r0
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <_ZN15ARINC_InterfaceC1Ev+0xc>)
     2d6:	4798      	blx	r3
{
} //ARINC_Interface
     2d8:	4620      	mov	r0, r4
     2da:	bd10      	pop	{r4, pc}
     2dc:	000003c5 	.word	0x000003c5

000002e0 <_ZN15ARINC_Interface8SayHelloEv>:

void	ARINC_Interface::Init(void){
	usb0.init();
}

void	ARINC_Interface::SayHello(void){
     2e0:	b570      	push	{r4, r5, r6, lr}
     2e2:	b088      	sub	sp, #32
     2e4:	4606      	mov	r6, r0
	uint8_t p[]="   hs2 ARINC Interface\n\r";
     2e6:	ac01      	add	r4, sp, #4
     2e8:	4d06      	ldr	r5, [pc, #24]	; (304 <_ZN15ARINC_Interface8SayHelloEv+0x24>)
     2ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     2ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     2ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     2f2:	c403      	stmia	r4!, {r0, r1}
     2f4:	7022      	strb	r2, [r4, #0]
	uint8_t *ptr=p;
	usb0.write(ptr,sizeof(p));
     2f6:	2219      	movs	r2, #25
     2f8:	a901      	add	r1, sp, #4
     2fa:	4630      	mov	r0, r6
     2fc:	4b02      	ldr	r3, [pc, #8]	; (308 <_ZN15ARINC_Interface8SayHelloEv+0x28>)
     2fe:	4798      	blx	r3
	
     300:	b008      	add	sp, #32
     302:	bd70      	pop	{r4, r5, r6, pc}
     304:	0000378c 	.word	0x0000378c
     308:	000003c9 	.word	0x000003c9

0000030c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     30c:	e7fe      	b.n	30c <Dummy_Handler>
	...

00000310 <Reset_Handler>:
{
     310:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     312:	4b17      	ldr	r3, [pc, #92]	; (370 <Reset_Handler+0x60>)
     314:	4a17      	ldr	r2, [pc, #92]	; (374 <Reset_Handler+0x64>)
     316:	429a      	cmp	r2, r3
     318:	d010      	beq.n	33c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     31a:	4b17      	ldr	r3, [pc, #92]	; (378 <Reset_Handler+0x68>)
     31c:	4a14      	ldr	r2, [pc, #80]	; (370 <Reset_Handler+0x60>)
     31e:	429a      	cmp	r2, r3
     320:	d20c      	bcs.n	33c <Reset_Handler+0x2c>
     322:	3b01      	subs	r3, #1
     324:	1a9b      	subs	r3, r3, r2
     326:	f023 0303 	bic.w	r3, r3, #3
     32a:	3304      	adds	r3, #4
     32c:	4413      	add	r3, r2
     32e:	4911      	ldr	r1, [pc, #68]	; (374 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     330:	f851 0b04 	ldr.w	r0, [r1], #4
     334:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     338:	429a      	cmp	r2, r3
     33a:	d1f9      	bne.n	330 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     33c:	4b0f      	ldr	r3, [pc, #60]	; (37c <Reset_Handler+0x6c>)
     33e:	4a10      	ldr	r2, [pc, #64]	; (380 <Reset_Handler+0x70>)
     340:	429a      	cmp	r2, r3
     342:	d20a      	bcs.n	35a <Reset_Handler+0x4a>
     344:	3b01      	subs	r3, #1
     346:	1a9b      	subs	r3, r3, r2
     348:	f023 0303 	bic.w	r3, r3, #3
     34c:	3304      	adds	r3, #4
     34e:	4413      	add	r3, r2
                *pDest++ = 0;
     350:	2100      	movs	r1, #0
     352:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     356:	4293      	cmp	r3, r2
     358:	d1fb      	bne.n	352 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     35a:	4a0a      	ldr	r2, [pc, #40]	; (384 <Reset_Handler+0x74>)
     35c:	4b0a      	ldr	r3, [pc, #40]	; (388 <Reset_Handler+0x78>)
     35e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     362:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     364:	4b09      	ldr	r3, [pc, #36]	; (38c <Reset_Handler+0x7c>)
     366:	4798      	blx	r3
        main();
     368:	4b09      	ldr	r3, [pc, #36]	; (390 <Reset_Handler+0x80>)
     36a:	4798      	blx	r3
     36c:	e7fe      	b.n	36c <Reset_Handler+0x5c>
     36e:	bf00      	nop
     370:	20000000 	.word	0x20000000
     374:	000038ec 	.word	0x000038ec
     378:	20000494 	.word	0x20000494
     37c:	20000854 	.word	0x20000854
     380:	20000494 	.word	0x20000494
     384:	e000ed00 	.word	0xe000ed00
     388:	00000000 	.word	0x00000000
     38c:	0000344d 	.word	0x0000344d
     390:	00000395 	.word	0x00000395

00000394 <main>:
#include <atmel_start.h>

#include "ARINC_Interface.h"

int main(void)
{
     394:	b500      	push	{lr}
     396:	b099      	sub	sp, #100	; 0x64
		atmel_start_init();
     398:	4b06      	ldr	r3, [pc, #24]	; (3b4 <main+0x20>)
     39a:	4798      	blx	r3
		ARINC_Interface		ECSBox;
     39c:	a801      	add	r0, sp, #4
     39e:	4b06      	ldr	r3, [pc, #24]	; (3b8 <main+0x24>)
     3a0:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		ECSBox.SayHello();
     3a2:	4d06      	ldr	r5, [pc, #24]	; (3bc <main+0x28>)
			delay_ms(1000);
     3a4:	4c06      	ldr	r4, [pc, #24]	; (3c0 <main+0x2c>)
		ECSBox.SayHello();
     3a6:	a801      	add	r0, sp, #4
     3a8:	47a8      	blx	r5
			delay_ms(1000);
     3aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     3ae:	47a0      	blx	r4
     3b0:	e7f9      	b.n	3a6 <main+0x12>
     3b2:	bf00      	nop
     3b4:	000003e9 	.word	0x000003e9
     3b8:	000002d1 	.word	0x000002d1
     3bc:	000002e1 	.word	0x000002e1
     3c0:	000006b1 	.word	0x000006b1

000003c4 <_ZN13USB_CDC_ClassC1Ev>:
{
	//portNumber=0;
	//usb_desc=&single_desc;
	//USBbuffer=usbd_cdc_buffer;

} //USB_CDC_Class
     3c4:	4770      	bx	lr
	...

000003c8 <_ZN13USB_CDC_Class5writeEPhm>:
int32_t USB_CDC_Class::enable(){
	
	return 0;
}

int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	460d      	mov	r5, r1
     3cc:	4616      	mov	r6, r2


bool USB_CDC_Class::isUSBEnabled(void){
	

		return cdcdf_acm_is_enabled();
     3ce:	4c04      	ldr	r4, [pc, #16]	; (3e0 <_ZN13USB_CDC_Class5writeEPhm+0x18>)
     3d0:	47a0      	blx	r4
	while(!isUSBEnabled());
     3d2:	2800      	cmp	r0, #0
     3d4:	d0fc      	beq.n	3d0 <_ZN13USB_CDC_Class5writeEPhm+0x8>
	w=cdcdf_acm_write(p,n);
     3d6:	4631      	mov	r1, r6
     3d8:	4628      	mov	r0, r5
     3da:	4b02      	ldr	r3, [pc, #8]	; (3e4 <_ZN13USB_CDC_Class5writeEPhm+0x1c>)
     3dc:	4798      	blx	r3
}
     3de:	bd70      	pop	{r4, r5, r6, pc}
     3e0:	00002b7d 	.word	0x00002b7d
     3e4:	00002b55 	.word	0x00002b55

000003e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3e8:	b508      	push	{r3, lr}
	system_init();
     3ea:	4b02      	ldr	r3, [pc, #8]	; (3f4 <atmel_start_init+0xc>)
     3ec:	4798      	blx	r3
	usb_init();
     3ee:	4b02      	ldr	r3, [pc, #8]	; (3f8 <atmel_start_init+0x10>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	00000611 	.word	0x00000611
     3f8:	000033c5 	.word	0x000033c5

000003fc <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3fc:	4a04      	ldr	r2, [pc, #16]	; (410 <ADC_0_CLOCK_init+0x14>)
     3fe:	6a13      	ldr	r3, [r2, #32]
     400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     404:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     406:	2240      	movs	r2, #64	; 0x40
     408:	4b02      	ldr	r3, [pc, #8]	; (414 <ADC_0_CLOCK_init+0x18>)
     40a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     40e:	4770      	bx	lr
     410:	40000800 	.word	0x40000800
     414:	40001c00 	.word	0x40001c00

00000418 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     418:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     41a:	4b04      	ldr	r3, [pc, #16]	; (42c <ADC_0_init+0x14>)
     41c:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     41e:	2200      	movs	r2, #0
     420:	4903      	ldr	r1, [pc, #12]	; (430 <ADC_0_init+0x18>)
     422:	4804      	ldr	r0, [pc, #16]	; (434 <ADC_0_init+0x1c>)
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <ADC_0_init+0x20>)
     426:	4798      	blx	r3
     428:	bd08      	pop	{r3, pc}
     42a:	bf00      	nop
     42c:	000003fd 	.word	0x000003fd
     430:	43001c00 	.word	0x43001c00
     434:	200007e4 	.word	0x200007e4
     438:	0000066d 	.word	0x0000066d

0000043c <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     43c:	4b28      	ldr	r3, [pc, #160]	; (4e0 <SPI_0_PORT_init+0xa4>)
     43e:	2210      	movs	r2, #16
     440:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     442:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     444:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     448:	629a      	str	r2, [r3, #40]	; 0x28
     44a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     44e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     450:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     458:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     460:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     464:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     468:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     470:	2220      	movs	r2, #32
     472:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     474:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     476:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     47a:	629a      	str	r2, [r3, #40]	; 0x28
     47c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     482:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     486:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     48a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     492:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     496:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     49a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49e:	2240      	movs	r2, #64	; 0x40
     4a0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4a6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     4aa:	629a      	str	r2, [r3, #40]	; 0x28
     4ac:	4a0d      	ldr	r2, [pc, #52]	; (4e4 <SPI_0_PORT_init+0xa8>)
     4ae:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     4b4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4bc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4c4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4cc:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4d4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     4dc:	4770      	bx	lr
     4de:	bf00      	nop
     4e0:	41008000 	.word	0x41008000
     4e4:	c0020000 	.word	0xc0020000

000004e8 <SPI_0_CLOCK_init>:
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <SPI_0_CLOCK_init+0x1c>)
     4ea:	2240      	movs	r2, #64	; 0x40
     4ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     4f0:	2243      	movs	r2, #67	; 0x43
     4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     4f6:	4a04      	ldr	r2, [pc, #16]	; (508 <SPI_0_CLOCK_init+0x20>)
     4f8:	6953      	ldr	r3, [r2, #20]
     4fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4fe:	6153      	str	r3, [r2, #20]
     500:	4770      	bx	lr
     502:	bf00      	nop
     504:	40001c00 	.word	0x40001c00
     508:	40000800 	.word	0x40000800

0000050c <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     50c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     50e:	4b04      	ldr	r3, [pc, #16]	; (520 <SPI_0_init+0x14>)
     510:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     512:	4904      	ldr	r1, [pc, #16]	; (524 <SPI_0_init+0x18>)
     514:	4804      	ldr	r0, [pc, #16]	; (528 <SPI_0_init+0x1c>)
     516:	4b05      	ldr	r3, [pc, #20]	; (52c <SPI_0_init+0x20>)
     518:	4798      	blx	r3
	SPI_0_PORT_init();
     51a:	4b05      	ldr	r3, [pc, #20]	; (530 <SPI_0_init+0x24>)
     51c:	4798      	blx	r3
     51e:	bd08      	pop	{r3, pc}
     520:	000004e9 	.word	0x000004e9
     524:	40003000 	.word	0x40003000
     528:	200007e8 	.word	0x200007e8
     52c:	00000891 	.word	0x00000891
     530:	0000043d 	.word	0x0000043d

00000534 <delay_driver_init>:
}

void delay_driver_init(void)
{
     534:	b508      	push	{r3, lr}
	delay_init(SysTick);
     536:	4802      	ldr	r0, [pc, #8]	; (540 <delay_driver_init+0xc>)
     538:	4b02      	ldr	r3, [pc, #8]	; (544 <delay_driver_init+0x10>)
     53a:	4798      	blx	r3
     53c:	bd08      	pop	{r3, pc}
     53e:	bf00      	nop
     540:	e000e010 	.word	0xe000e010
     544:	0000069d 	.word	0x0000069d

00000548 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     548:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <USB_0_PORT_init+0x7c>)
     54a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     54e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     550:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     554:	6299      	str	r1, [r3, #40]	; 0x28
     556:	481c      	ldr	r0, [pc, #112]	; (5c8 <USB_0_PORT_init+0x80>)
     558:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     55c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     560:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     564:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     568:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     56c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     570:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     578:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     57c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     580:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     58c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     58e:	6299      	str	r1, [r3, #40]	; 0x28
     590:	490e      	ldr	r1, [pc, #56]	; (5cc <USB_0_PORT_init+0x84>)
     592:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     594:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     596:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     59a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     59e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ba:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     5c2:	4770      	bx	lr
     5c4:	41008000 	.word	0x41008000
     5c8:	c0000100 	.word	0xc0000100
     5cc:	c0000200 	.word	0xc0000200

000005d0 <USB_0_CLOCK_init>:
     5d0:	2244      	movs	r2, #68	; 0x44
     5d2:	4b07      	ldr	r3, [pc, #28]	; (5f0 <USB_0_CLOCK_init+0x20>)
     5d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     5d8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     5dc:	691a      	ldr	r2, [r3, #16]
     5de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     5e2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     5e4:	699a      	ldr	r2, [r3, #24]
     5e6:	f042 0201 	orr.w	r2, r2, #1
     5ea:	619a      	str	r2, [r3, #24]
     5ec:	4770      	bx	lr
     5ee:	bf00      	nop
     5f0:	40001c00 	.word	0x40001c00

000005f4 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     5f4:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     5f6:	4b03      	ldr	r3, [pc, #12]	; (604 <USB_0_init+0x10>)
     5f8:	4798      	blx	r3
	usb_d_init();
     5fa:	4b03      	ldr	r3, [pc, #12]	; (608 <USB_0_init+0x14>)
     5fc:	4798      	blx	r3
	USB_0_PORT_init();
     5fe:	4b03      	ldr	r3, [pc, #12]	; (60c <USB_0_init+0x18>)
     600:	4798      	blx	r3
     602:	bd08      	pop	{r3, pc}
     604:	000005d1 	.word	0x000005d1
     608:	00000b69 	.word	0x00000b69
     60c:	00000549 	.word	0x00000549

00000610 <system_init>:
}

void system_init(void)
{
     610:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     612:	4b0f      	ldr	r3, [pc, #60]	; (650 <system_init+0x40>)
     614:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     616:	4b0f      	ldr	r3, [pc, #60]	; (654 <system_init+0x44>)
     618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     61c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     628:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     62c:	4a0a      	ldr	r2, [pc, #40]	; (658 <system_init+0x48>)
     62e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	// Set pin direction to output
	gpio_set_pin_direction(SPI0_CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SPI0_CS, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     63e:	4b07      	ldr	r3, [pc, #28]	; (65c <system_init+0x4c>)
     640:	4798      	blx	r3

	SPI_0_init();
     642:	4b07      	ldr	r3, [pc, #28]	; (660 <system_init+0x50>)
     644:	4798      	blx	r3

	delay_driver_init();
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <system_init+0x54>)
     648:	4798      	blx	r3

	USB_0_init();
     64a:	4b07      	ldr	r3, [pc, #28]	; (668 <system_init+0x58>)
     64c:	4798      	blx	r3
     64e:	bd08      	pop	{r3, pc}
     650:	00001059 	.word	0x00001059
     654:	41008000 	.word	0x41008000
     658:	c0001000 	.word	0xc0001000
     65c:	00000419 	.word	0x00000419
     660:	0000050d 	.word	0x0000050d
     664:	00000535 	.word	0x00000535
     668:	000005f5 	.word	0x000005f5

0000066c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     66c:	b538      	push	{r3, r4, r5, lr}
     66e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     670:	4605      	mov	r5, r0
     672:	b158      	cbz	r0, 68c <adc_sync_init+0x20>
     674:	1c08      	adds	r0, r1, #0
     676:	bf18      	it	ne
     678:	2001      	movne	r0, #1
     67a:	2239      	movs	r2, #57	; 0x39
     67c:	4904      	ldr	r1, [pc, #16]	; (690 <adc_sync_init+0x24>)
     67e:	4b05      	ldr	r3, [pc, #20]	; (694 <adc_sync_init+0x28>)
     680:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     682:	4621      	mov	r1, r4
     684:	4628      	mov	r0, r5
     686:	4b04      	ldr	r3, [pc, #16]	; (698 <adc_sync_init+0x2c>)
     688:	4798      	blx	r3
}
     68a:	bd38      	pop	{r3, r4, r5, pc}
     68c:	2000      	movs	r0, #0
     68e:	e7f4      	b.n	67a <adc_sync_init+0xe>
     690:	000037a8 	.word	0x000037a8
     694:	00000eb5 	.word	0x00000eb5
     698:	00001015 	.word	0x00001015

0000069c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     69c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <delay_init+0xc>)
     6a0:	6018      	str	r0, [r3, #0]
     6a2:	4b02      	ldr	r3, [pc, #8]	; (6ac <delay_init+0x10>)
     6a4:	4798      	blx	r3
     6a6:	bd08      	pop	{r3, pc}
     6a8:	200004b0 	.word	0x200004b0
     6ac:	000015b5 	.word	0x000015b5

000006b0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6b0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6b2:	4b04      	ldr	r3, [pc, #16]	; (6c4 <delay_ms+0x14>)
     6b4:	681c      	ldr	r4, [r3, #0]
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <delay_ms+0x18>)
     6b8:	4798      	blx	r3
     6ba:	4601      	mov	r1, r0
     6bc:	4620      	mov	r0, r4
     6be:	4b03      	ldr	r3, [pc, #12]	; (6cc <delay_ms+0x1c>)
     6c0:	4798      	blx	r3
     6c2:	bd10      	pop	{r4, pc}
     6c4:	200004b0 	.word	0x200004b0
     6c8:	0000104d 	.word	0x0000104d
     6cc:	000015c9 	.word	0x000015c9

000006d0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6d2:	460f      	mov	r7, r1
     6d4:	4616      	mov	r6, r2
	ASSERT(io);
     6d6:	4604      	mov	r4, r0
     6d8:	f240 1227 	movw	r2, #295	; 0x127
     6dc:	4909      	ldr	r1, [pc, #36]	; (704 <_spi_m_async_io_write+0x34>)
     6de:	3000      	adds	r0, #0
     6e0:	bf18      	it	ne
     6e2:	2001      	movne	r0, #1
     6e4:	4b08      	ldr	r3, [pc, #32]	; (708 <_spi_m_async_io_write+0x38>)
     6e6:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     6e8:	2500      	movs	r5, #0
     6ea:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     6ec:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     6ee:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     6f0:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     6f2:	2310      	movs	r3, #16
     6f4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     6f6:	2101      	movs	r1, #1
     6f8:	f1a4 0020 	sub.w	r0, r4, #32
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <_spi_m_async_io_write+0x3c>)
     6fe:	4798      	blx	r3

	return ERR_NONE;
}
     700:	4628      	mov	r0, r5
     702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     704:	000037c4 	.word	0x000037c4
     708:	00000eb5 	.word	0x00000eb5
     70c:	00001475 	.word	0x00001475

00000710 <_spi_m_async_io_read>:
{
     710:	b570      	push	{r4, r5, r6, lr}
     712:	460d      	mov	r5, r1
     714:	4616      	mov	r6, r2
	ASSERT(io);
     716:	4604      	mov	r4, r0
     718:	f240 1205 	movw	r2, #261	; 0x105
     71c:	490c      	ldr	r1, [pc, #48]	; (750 <_spi_m_async_io_read+0x40>)
     71e:	3000      	adds	r0, #0
     720:	bf18      	it	ne
     722:	2001      	movne	r0, #1
     724:	4b0b      	ldr	r3, [pc, #44]	; (754 <_spi_m_async_io_read+0x44>)
     726:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     728:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     72a:	2500      	movs	r5, #0
     72c:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     72e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     730:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     732:	2310      	movs	r3, #16
     734:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     736:	3c20      	subs	r4, #32
     738:	2101      	movs	r1, #1
     73a:	4620      	mov	r0, r4
     73c:	4b06      	ldr	r3, [pc, #24]	; (758 <_spi_m_async_io_read+0x48>)
     73e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     740:	f240 11ff 	movw	r1, #511	; 0x1ff
     744:	4620      	mov	r0, r4
     746:	4b05      	ldr	r3, [pc, #20]	; (75c <_spi_m_async_io_read+0x4c>)
     748:	4798      	blx	r3
}
     74a:	4628      	mov	r0, r5
     74c:	bd70      	pop	{r4, r5, r6, pc}
     74e:	bf00      	nop
     750:	000037c4 	.word	0x000037c4
     754:	00000eb5 	.word	0x00000eb5
     758:	000014a9 	.word	0x000014a9
     75c:	00001525 	.word	0x00001525

00000760 <_spi_dev_error>:
{
     760:	b570      	push	{r4, r5, r6, lr}
     762:	4604      	mov	r4, r0
     764:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     766:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     768:	2100      	movs	r1, #0
     76a:	4b09      	ldr	r3, [pc, #36]	; (790 <_spi_dev_error+0x30>)
     76c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     76e:	2100      	movs	r1, #0
     770:	4620      	mov	r0, r4
     772:	4b08      	ldr	r3, [pc, #32]	; (794 <_spi_dev_error+0x34>)
     774:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     776:	2100      	movs	r1, #0
     778:	4620      	mov	r0, r4
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <_spi_dev_error+0x38>)
     77c:	4798      	blx	r3
	spi->stat = 0;
     77e:	2300      	movs	r3, #0
     780:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     784:	6b23      	ldr	r3, [r4, #48]	; 0x30
     786:	b113      	cbz	r3, 78e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     788:	4631      	mov	r1, r6
     78a:	4628      	mov	r0, r5
     78c:	4798      	blx	r3
     78e:	bd70      	pop	{r4, r5, r6, pc}
     790:	00001475 	.word	0x00001475
     794:	000014a9 	.word	0x000014a9
     798:	000014e9 	.word	0x000014e9

0000079c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     79c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     79e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7a0:	429a      	cmp	r2, r3
     7a2:	d200      	bcs.n	7a6 <_spi_dev_complete+0xa>
     7a4:	4770      	bx	lr
{
     7a6:	b510      	push	{r4, lr}
     7a8:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     7aa:	2100      	movs	r1, #0
     7ac:	4b04      	ldr	r3, [pc, #16]	; (7c0 <_spi_dev_complete+0x24>)
     7ae:	4798      	blx	r3
		spi->stat = 0;
     7b0:	2300      	movs	r3, #0
     7b2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     7b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     7b8:	b10b      	cbz	r3, 7be <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     7ba:	1f20      	subs	r0, r4, #4
     7bc:	4798      	blx	r3
     7be:	bd10      	pop	{r4, pc}
     7c0:	000014e9 	.word	0x000014e9

000007c4 <_spi_dev_tx>:
{
     7c4:	b510      	push	{r4, lr}
     7c6:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     7c8:	7903      	ldrb	r3, [r0, #4]
     7ca:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     7cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
     7ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
     7d0:	f103 0101 	add.w	r1, r3, #1
     7d4:	6401      	str	r1, [r0, #64]	; 0x40
     7d6:	bf94      	ite	ls
     7d8:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     7da:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     7de:	4b08      	ldr	r3, [pc, #32]	; (800 <_spi_dev_tx+0x3c>)
     7e0:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     7e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
     7e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     7e6:	429a      	cmp	r2, r3
     7e8:	d000      	beq.n	7ec <_spi_dev_tx+0x28>
     7ea:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     7ec:	2100      	movs	r1, #0
     7ee:	4620      	mov	r0, r4
     7f0:	4b04      	ldr	r3, [pc, #16]	; (804 <_spi_dev_tx+0x40>)
     7f2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     7f4:	2101      	movs	r1, #1
     7f6:	4620      	mov	r0, r4
     7f8:	4b03      	ldr	r3, [pc, #12]	; (808 <_spi_dev_tx+0x44>)
     7fa:	4798      	blx	r3
}
     7fc:	e7f5      	b.n	7ea <_spi_dev_tx+0x26>
     7fe:	bf00      	nop
     800:	00001525 	.word	0x00001525
     804:	00001475 	.word	0x00001475
     808:	000014e9 	.word	0x000014e9

0000080c <_spi_dev_rx>:
{
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     810:	6b85      	ldr	r5, [r0, #56]	; 0x38
     812:	b305      	cbz	r5, 856 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     814:	7903      	ldrb	r3, [r0, #4]
     816:	2b01      	cmp	r3, #1
     818:	d916      	bls.n	848 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     81a:	6c06      	ldr	r6, [r0, #64]	; 0x40
     81c:	1c73      	adds	r3, r6, #1
     81e:	6403      	str	r3, [r0, #64]	; 0x40
     820:	4b18      	ldr	r3, [pc, #96]	; (884 <_spi_dev_rx+0x78>)
     822:	4798      	blx	r3
     824:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     828:	6c23      	ldr	r3, [r4, #64]	; 0x40
     82a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     82c:	4293      	cmp	r3, r2
     82e:	d21d      	bcs.n	86c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     830:	6b62      	ldr	r2, [r4, #52]	; 0x34
     832:	b1b2      	cbz	r2, 862 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     834:	7921      	ldrb	r1, [r4, #4]
     836:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     838:	bf94      	ite	ls
     83a:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     83c:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     840:	4620      	mov	r0, r4
     842:	4b11      	ldr	r3, [pc, #68]	; (888 <_spi_dev_rx+0x7c>)
     844:	4798      	blx	r3
     846:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     848:	6c06      	ldr	r6, [r0, #64]	; 0x40
     84a:	1c73      	adds	r3, r6, #1
     84c:	6403      	str	r3, [r0, #64]	; 0x40
     84e:	4b0d      	ldr	r3, [pc, #52]	; (884 <_spi_dev_rx+0x78>)
     850:	4798      	blx	r3
     852:	55a8      	strb	r0, [r5, r6]
     854:	e7e8      	b.n	828 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     856:	4b0b      	ldr	r3, [pc, #44]	; (884 <_spi_dev_rx+0x78>)
     858:	4798      	blx	r3
		spi->xfercnt++;
     85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
     85c:	3301      	adds	r3, #1
     85e:	6423      	str	r3, [r4, #64]	; 0x40
     860:	e7e2      	b.n	828 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     862:	88e1      	ldrh	r1, [r4, #6]
     864:	4620      	mov	r0, r4
     866:	4b08      	ldr	r3, [pc, #32]	; (888 <_spi_dev_rx+0x7c>)
     868:	4798      	blx	r3
     86a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     86c:	2100      	movs	r1, #0
     86e:	4620      	mov	r0, r4
     870:	4b06      	ldr	r3, [pc, #24]	; (88c <_spi_dev_rx+0x80>)
     872:	4798      	blx	r3
		spi->stat = 0;
     874:	2300      	movs	r3, #0
     876:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     87a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     87c:	b10b      	cbz	r3, 882 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     87e:	1f20      	subs	r0, r4, #4
     880:	4798      	blx	r3
     882:	bd70      	pop	{r4, r5, r6, pc}
     884:	00001555 	.word	0x00001555
     888:	00001525 	.word	0x00001525
     88c:	000014a9 	.word	0x000014a9

00000890 <spi_m_async_init>:
{
     890:	b570      	push	{r4, r5, r6, lr}
     892:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     894:	4606      	mov	r6, r0
     896:	b330      	cbz	r0, 8e6 <spi_m_async_init+0x56>
     898:	1c08      	adds	r0, r1, #0
     89a:	bf18      	it	ne
     89c:	2001      	movne	r0, #1
     89e:	22a5      	movs	r2, #165	; 0xa5
     8a0:	4912      	ldr	r1, [pc, #72]	; (8ec <spi_m_async_init+0x5c>)
     8a2:	4b13      	ldr	r3, [pc, #76]	; (8f0 <spi_m_async_init+0x60>)
     8a4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     8a6:	4634      	mov	r4, r6
     8a8:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     8ac:	4629      	mov	r1, r5
     8ae:	4620      	mov	r0, r4
     8b0:	4b10      	ldr	r3, [pc, #64]	; (8f4 <spi_m_async_init+0x64>)
     8b2:	4798      	blx	r3
	if (rc >= 0) {
     8b4:	2800      	cmp	r0, #0
     8b6:	db15      	blt.n	8e4 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     8b8:	4a0f      	ldr	r2, [pc, #60]	; (8f8 <spi_m_async_init+0x68>)
     8ba:	2100      	movs	r1, #0
     8bc:	4620      	mov	r0, r4
     8be:	4d0f      	ldr	r5, [pc, #60]	; (8fc <spi_m_async_init+0x6c>)
     8c0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     8c2:	4a0f      	ldr	r2, [pc, #60]	; (900 <spi_m_async_init+0x70>)
     8c4:	2101      	movs	r1, #1
     8c6:	4620      	mov	r0, r4
     8c8:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     8ca:	4a0e      	ldr	r2, [pc, #56]	; (904 <spi_m_async_init+0x74>)
     8cc:	2102      	movs	r1, #2
     8ce:	4620      	mov	r0, r4
     8d0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     8d2:	4a0d      	ldr	r2, [pc, #52]	; (908 <spi_m_async_init+0x78>)
     8d4:	2103      	movs	r1, #3
     8d6:	4620      	mov	r0, r4
     8d8:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     8da:	4b0c      	ldr	r3, [pc, #48]	; (90c <spi_m_async_init+0x7c>)
     8dc:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     8de:	4b0c      	ldr	r3, [pc, #48]	; (910 <spi_m_async_init+0x80>)
     8e0:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     8e2:	2000      	movs	r0, #0
}
     8e4:	bd70      	pop	{r4, r5, r6, pc}
     8e6:	2000      	movs	r0, #0
     8e8:	e7d9      	b.n	89e <spi_m_async_init+0xe>
     8ea:	bf00      	nop
     8ec:	000037c4 	.word	0x000037c4
     8f0:	00000eb5 	.word	0x00000eb5
     8f4:	00001409 	.word	0x00001409
     8f8:	000007c5 	.word	0x000007c5
     8fc:	00001581 	.word	0x00001581
     900:	0000080d 	.word	0x0000080d
     904:	0000079d 	.word	0x0000079d
     908:	00000761 	.word	0x00000761
     90c:	00000711 	.word	0x00000711
     910:	000006d1 	.word	0x000006d1

00000914 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     914:	4b0f      	ldr	r3, [pc, #60]	; (954 <_usb_d_find_ep+0x40>)
     916:	7859      	ldrb	r1, [r3, #1]
     918:	4288      	cmp	r0, r1
     91a:	d018      	beq.n	94e <_usb_d_find_ep+0x3a>
{
     91c:	b430      	push	{r4, r5}
     91e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     920:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     922:	f000 050f 	and.w	r5, r0, #15
     926:	e007      	b.n	938 <_usb_d_find_ep+0x24>
     928:	3301      	adds	r3, #1
     92a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     92c:	2b04      	cmp	r3, #4
     92e:	d009      	beq.n	944 <_usb_d_find_ep+0x30>
     930:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     932:	7851      	ldrb	r1, [r2, #1]
     934:	4281      	cmp	r1, r0
     936:	d007      	beq.n	948 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     938:	7814      	ldrb	r4, [r2, #0]
     93a:	2c00      	cmp	r4, #0
     93c:	d1f4      	bne.n	928 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     93e:	428d      	cmp	r5, r1
     940:	d1f2      	bne.n	928 <_usb_d_find_ep+0x14>
     942:	e001      	b.n	948 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     944:	f04f 33ff 	mov.w	r3, #4294967295
}
     948:	4618      	mov	r0, r3
     94a:	bc30      	pop	{r4, r5}
     94c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     94e:	2300      	movs	r3, #0
}
     950:	4618      	mov	r0, r3
     952:	4770      	bx	lr
     954:	200004b4 	.word	0x200004b4

00000958 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     958:	2000      	movs	r0, #0
     95a:	4770      	bx	lr

0000095c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     95c:	b538      	push	{r3, r4, r5, lr}
     95e:	4604      	mov	r4, r0
     960:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     962:	4b09      	ldr	r3, [pc, #36]	; (988 <usb_d_cb_trans_more+0x2c>)
     964:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     966:	4b09      	ldr	r3, [pc, #36]	; (98c <usb_d_cb_trans_more+0x30>)
     968:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     96c:	789b      	ldrb	r3, [r3, #2]
     96e:	2b03      	cmp	r3, #3
     970:	d001      	beq.n	976 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     972:	2000      	movs	r0, #0
}
     974:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <usb_d_cb_trans_more+0x30>)
     978:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     97c:	6983      	ldr	r3, [r0, #24]
     97e:	4629      	mov	r1, r5
     980:	4620      	mov	r0, r4
     982:	4798      	blx	r3
     984:	bd38      	pop	{r3, r4, r5, pc}
     986:	bf00      	nop
     988:	00000915 	.word	0x00000915
     98c:	200004b4 	.word	0x200004b4

00000990 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	b085      	sub	sp, #20
     994:	4606      	mov	r6, r0
     996:	460d      	mov	r5, r1
     998:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     99a:	4b4d      	ldr	r3, [pc, #308]	; (ad0 <_usb_d_cb_trans_done+0x140>)
     99c:	4798      	blx	r3
     99e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     9a0:	2d00      	cmp	r5, #0
     9a2:	d15b      	bne.n	a5c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     9a4:	4a4b      	ldr	r2, [pc, #300]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     9a6:	0143      	lsls	r3, r0, #5
     9a8:	18d1      	adds	r1, r2, r3
     9aa:	2000      	movs	r0, #0
     9ac:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9ae:	5cd3      	ldrb	r3, [r2, r3]
     9b0:	b173      	cbz	r3, 9d0 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     9b2:	4b48      	ldr	r3, [pc, #288]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     9b4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     9b8:	2201      	movs	r2, #1
     9ba:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     9bc:	4845      	ldr	r0, [pc, #276]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     9be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     9c2:	69c3      	ldr	r3, [r0, #28]
     9c4:	463a      	mov	r2, r7
     9c6:	78c1      	ldrb	r1, [r0, #3]
     9c8:	4630      	mov	r0, r6
     9ca:	4798      	blx	r3
}
     9cc:	b005      	add	sp, #20
     9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     9d0:	788b      	ldrb	r3, [r1, #2]
     9d2:	2b03      	cmp	r3, #3
     9d4:	d00b      	beq.n	9ee <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     9d6:	483f      	ldr	r0, [pc, #252]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     9d8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     9dc:	4614      	mov	r4, r2
     9de:	69d3      	ldr	r3, [r2, #28]
     9e0:	320c      	adds	r2, #12
     9e2:	2100      	movs	r1, #0
     9e4:	7860      	ldrb	r0, [r4, #1]
     9e6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     9e8:	2302      	movs	r3, #2
     9ea:	70a3      	strb	r3, [r4, #2]
     9ec:	e7ee      	b.n	9cc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     9ee:	460b      	mov	r3, r1
     9f0:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     9f4:	460a      	mov	r2, r1
     9f6:	69ce      	ldr	r6, [r1, #28]
     9f8:	320c      	adds	r2, #12
     9fa:	2101      	movs	r1, #1
     9fc:	7858      	ldrb	r0, [r3, #1]
     9fe:	47b0      	blx	r6
		if (err) {
     a00:	b1a0      	cbz	r0, a2c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     a02:	4b34      	ldr	r3, [pc, #208]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     a04:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a08:	2205      	movs	r2, #5
     a0a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     a0c:	2202      	movs	r2, #2
     a0e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     a10:	2d00      	cmp	r5, #0
     a12:	db09      	blt.n	a28 <_usb_d_cb_trans_done+0x98>
     a14:	482f      	ldr	r0, [pc, #188]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     a16:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     a1a:	7840      	ldrb	r0, [r0, #1]
     a1c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     a20:	2101      	movs	r1, #1
     a22:	4b2d      	ldr	r3, [pc, #180]	; (ad8 <_usb_d_cb_trans_done+0x148>)
     a24:	4798      	blx	r3
     a26:	e7d1      	b.n	9cc <_usb_d_cb_trans_done+0x3c>
     a28:	7858      	ldrb	r0, [r3, #1]
     a2a:	e7f9      	b.n	a20 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a2c:	4829      	ldr	r0, [pc, #164]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     a2e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     a32:	2304      	movs	r3, #4
     a34:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     a36:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     a38:	2200      	movs	r2, #0
     a3a:	9201      	str	r2, [sp, #4]
     a3c:	9202      	str	r2, [sp, #8]
     a3e:	4295      	cmp	r5, r2
     a40:	bfac      	ite	ge
     a42:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     a46:	f003 030f 	andlt.w	r3, r3, #15
     a4a:	f88d 300c 	strb.w	r3, [sp, #12]
     a4e:	2301      	movs	r3, #1
     a50:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     a54:	a801      	add	r0, sp, #4
     a56:	4b21      	ldr	r3, [pc, #132]	; (adc <_usb_d_cb_trans_done+0x14c>)
     a58:	4798      	blx	r3
     a5a:	e7b7      	b.n	9cc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     a5c:	2d01      	cmp	r5, #1
     a5e:	d00a      	beq.n	a76 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     a60:	2d02      	cmp	r5, #2
     a62:	d01c      	beq.n	a9e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     a64:	2d03      	cmp	r5, #3
     a66:	d02a      	beq.n	abe <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     a68:	4b1a      	ldr	r3, [pc, #104]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     a6a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     a6e:	2206      	movs	r2, #6
     a70:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     a72:	70da      	strb	r2, [r3, #3]
     a74:	e7a2      	b.n	9bc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     a76:	4a17      	ldr	r2, [pc, #92]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     a78:	0143      	lsls	r3, r0, #5
     a7a:	18d1      	adds	r1, r2, r3
     a7c:	2002      	movs	r0, #2
     a7e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a80:	5cd3      	ldrb	r3, [r2, r3]
     a82:	b12b      	cbz	r3, a90 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     a84:	4b13      	ldr	r3, [pc, #76]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     a86:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a8a:	2205      	movs	r2, #5
     a8c:	709a      	strb	r2, [r3, #2]
     a8e:	e795      	b.n	9bc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a90:	460b      	mov	r3, r1
     a92:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a94:	2100      	movs	r1, #0
     a96:	4630      	mov	r0, r6
     a98:	4b0f      	ldr	r3, [pc, #60]	; (ad8 <_usb_d_cb_trans_done+0x148>)
     a9a:	4798      	blx	r3
     a9c:	e78e      	b.n	9bc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     a9e:	4a0d      	ldr	r2, [pc, #52]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     aa0:	0143      	lsls	r3, r0, #5
     aa2:	18d1      	adds	r1, r2, r3
     aa4:	2004      	movs	r0, #4
     aa6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     aa8:	5cd3      	ldrb	r3, [r2, r3]
     aaa:	b12b      	cbz	r3, ab8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     aac:	4b09      	ldr	r3, [pc, #36]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     aae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ab2:	2201      	movs	r2, #1
     ab4:	709a      	strb	r2, [r3, #2]
     ab6:	e781      	b.n	9bc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ab8:	2302      	movs	r3, #2
     aba:	708b      	strb	r3, [r1, #2]
			return;
     abc:	e786      	b.n	9cc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     abe:	4b05      	ldr	r3, [pc, #20]	; (ad4 <_usb_d_cb_trans_done+0x144>)
     ac0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     ac4:	2200      	movs	r2, #0
     ac6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     ac8:	2205      	movs	r2, #5
     aca:	70da      	strb	r2, [r3, #3]
     acc:	e776      	b.n	9bc <_usb_d_cb_trans_done+0x2c>
     ace:	bf00      	nop
     ad0:	00000915 	.word	0x00000915
     ad4:	200004b4 	.word	0x200004b4
     ad8:	000024a5 	.word	0x000024a5
     adc:	0000264d 	.word	0x0000264d

00000ae0 <usb_d_cb_trans_setup>:
{
     ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ae4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ae6:	4b1c      	ldr	r3, [pc, #112]	; (b58 <usb_d_cb_trans_setup+0x78>)
     ae8:	4798      	blx	r3
     aea:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     aec:	4c1b      	ldr	r4, [pc, #108]	; (b5c <usb_d_cb_trans_setup+0x7c>)
     aee:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     af2:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     af4:	4621      	mov	r1, r4
     af6:	4628      	mov	r0, r5
     af8:	4b19      	ldr	r3, [pc, #100]	; (b60 <usb_d_cb_trans_setup+0x80>)
     afa:	4798      	blx	r3
	if (n != 8) {
     afc:	b2c0      	uxtb	r0, r0
     afe:	2808      	cmp	r0, #8
     b00:	d009      	beq.n	b16 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b02:	2101      	movs	r1, #1
     b04:	4628      	mov	r0, r5
     b06:	4c17      	ldr	r4, [pc, #92]	; (b64 <usb_d_cb_trans_setup+0x84>)
     b08:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b0a:	2101      	movs	r1, #1
     b0c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     b10:	47a0      	blx	r4
		return;
     b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b16:	2100      	movs	r1, #0
     b18:	4628      	mov	r0, r5
     b1a:	4f12      	ldr	r7, [pc, #72]	; (b64 <usb_d_cb_trans_setup+0x84>)
     b1c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     b1e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     b22:	2100      	movs	r1, #0
     b24:	4640      	mov	r0, r8
     b26:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     b28:	4b0c      	ldr	r3, [pc, #48]	; (b5c <usb_d_cb_trans_setup+0x7c>)
     b2a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     b2e:	2201      	movs	r2, #1
     b30:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     b32:	695b      	ldr	r3, [r3, #20]
     b34:	4621      	mov	r1, r4
     b36:	4628      	mov	r0, r5
     b38:	4798      	blx	r3
     b3a:	b108      	cbz	r0, b40 <usb_d_cb_trans_setup+0x60>
     b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <usb_d_cb_trans_setup+0x7c>)
     b42:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     b46:	2305      	movs	r3, #5
     b48:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b4a:	2101      	movs	r1, #1
     b4c:	4628      	mov	r0, r5
     b4e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b50:	2101      	movs	r1, #1
     b52:	4640      	mov	r0, r8
     b54:	47b8      	blx	r7
     b56:	e7f1      	b.n	b3c <usb_d_cb_trans_setup+0x5c>
     b58:	00000915 	.word	0x00000915
     b5c:	200004b4 	.word	0x200004b4
     b60:	000025ed 	.word	0x000025ed
     b64:	000024a5 	.word	0x000024a5

00000b68 <usb_d_init>:

int32_t usb_d_init(void)
{
     b68:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     b6a:	4b11      	ldr	r3, [pc, #68]	; (bb0 <usb_d_init+0x48>)
     b6c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     b6e:	2800      	cmp	r0, #0
     b70:	db1c      	blt.n	bac <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     b72:	4c10      	ldr	r4, [pc, #64]	; (bb4 <usb_d_init+0x4c>)
     b74:	2280      	movs	r2, #128	; 0x80
     b76:	2100      	movs	r1, #0
     b78:	4620      	mov	r0, r4
     b7a:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <usb_d_init+0x50>)
     b7c:	4798      	blx	r3
     b7e:	4623      	mov	r3, r4
     b80:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b84:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b86:	4a0d      	ldr	r2, [pc, #52]	; (bbc <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b88:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b8a:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     b8c:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     b8e:	61da      	str	r2, [r3, #28]
     b90:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     b92:	4283      	cmp	r3, r0
     b94:	d1f8      	bne.n	b88 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     b96:	490a      	ldr	r1, [pc, #40]	; (bc0 <usb_d_init+0x58>)
     b98:	2000      	movs	r0, #0
     b9a:	4c0a      	ldr	r4, [pc, #40]	; (bc4 <usb_d_init+0x5c>)
     b9c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     b9e:	490a      	ldr	r1, [pc, #40]	; (bc8 <usb_d_init+0x60>)
     ba0:	2001      	movs	r0, #1
     ba2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     ba4:	4909      	ldr	r1, [pc, #36]	; (bcc <usb_d_init+0x64>)
     ba6:	2002      	movs	r0, #2
     ba8:	47a0      	blx	r4
	return ERR_NONE;
     baa:	2000      	movs	r0, #0
}
     bac:	bd10      	pop	{r4, pc}
     bae:	bf00      	nop
     bb0:	00001e99 	.word	0x00001e99
     bb4:	200004b4 	.word	0x200004b4
     bb8:	000035d1 	.word	0x000035d1
     bbc:	00000959 	.word	0x00000959
     bc0:	00000ae1 	.word	0x00000ae1
     bc4:	00002851 	.word	0x00002851
     bc8:	0000095d 	.word	0x0000095d
     bcc:	00000991 	.word	0x00000991

00000bd0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     bd0:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     bd2:	4b01      	ldr	r3, [pc, #4]	; (bd8 <usb_d_register_callback+0x8>)
     bd4:	4798      	blx	r3
     bd6:	bd08      	pop	{r3, pc}
     bd8:	0000282d 	.word	0x0000282d

00000bdc <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     bdc:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     bde:	4b01      	ldr	r3, [pc, #4]	; (be4 <usb_d_enable+0x8>)
     be0:	4798      	blx	r3
}
     be2:	bd08      	pop	{r3, pc}
     be4:	00001f95 	.word	0x00001f95

00000be8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     be8:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     bea:	4b01      	ldr	r3, [pc, #4]	; (bf0 <usb_d_attach+0x8>)
     bec:	4798      	blx	r3
     bee:	bd08      	pop	{r3, pc}
     bf0:	00002001 	.word	0x00002001

00000bf4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     bf4:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     bf6:	4b01      	ldr	r3, [pc, #4]	; (bfc <usb_d_set_address+0x8>)
     bf8:	4798      	blx	r3
     bfa:	bd08      	pop	{r3, pc}
     bfc:	00002013 	.word	0x00002013

00000c00 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c02:	4606      	mov	r6, r0
     c04:	460c      	mov	r4, r1
     c06:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     c08:	4b0f      	ldr	r3, [pc, #60]	; (c48 <usb_d_ep_init+0x48>)
     c0a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     c0c:	2800      	cmp	r0, #0
     c0e:	da14      	bge.n	c3a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     c10:	20ff      	movs	r0, #255	; 0xff
     c12:	4b0d      	ldr	r3, [pc, #52]	; (c48 <usb_d_ep_init+0x48>)
     c14:	4798      	blx	r3
		if (ep_index < 0) {
     c16:	1e05      	subs	r5, r0, #0
     c18:	db12      	blt.n	c40 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     c1a:	463a      	mov	r2, r7
     c1c:	4621      	mov	r1, r4
     c1e:	4630      	mov	r0, r6
     c20:	4b0a      	ldr	r3, [pc, #40]	; (c4c <usb_d_ep_init+0x4c>)
     c22:	4798      	blx	r3
	if (rc < 0) {
     c24:	2800      	cmp	r0, #0
     c26:	db0d      	blt.n	c44 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     c28:	4b09      	ldr	r3, [pc, #36]	; (c50 <usb_d_ep_init+0x50>)
     c2a:	0168      	lsls	r0, r5, #5
     c2c:	181a      	adds	r2, r3, r0
     c2e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     c30:	f004 0403 	and.w	r4, r4, #3
     c34:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     c36:	2000      	movs	r0, #0
     c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     c3a:	f06f 0013 	mvn.w	r0, #19
     c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     c40:	f06f 0014 	mvn.w	r0, #20
}
     c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c46:	bf00      	nop
     c48:	00000915 	.word	0x00000915
     c4c:	00002021 	.word	0x00002021
     c50:	200004b4 	.word	0x200004b4

00000c54 <usb_d_ep0_init>:
{
     c54:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     c56:	4602      	mov	r2, r0
     c58:	2100      	movs	r1, #0
     c5a:	4608      	mov	r0, r1
     c5c:	4b01      	ldr	r3, [pc, #4]	; (c64 <usb_d_ep0_init+0x10>)
     c5e:	4798      	blx	r3
}
     c60:	bd08      	pop	{r3, pc}
     c62:	bf00      	nop
     c64:	00000c01 	.word	0x00000c01

00000c68 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     c68:	b538      	push	{r3, r4, r5, lr}
     c6a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c6c:	4b06      	ldr	r3, [pc, #24]	; (c88 <usb_d_ep_deinit+0x20>)
     c6e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     c70:	1e04      	subs	r4, r0, #0
     c72:	db07      	blt.n	c84 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     c74:	4628      	mov	r0, r5
     c76:	4b05      	ldr	r3, [pc, #20]	; (c8c <usb_d_ep_deinit+0x24>)
     c78:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     c7a:	4805      	ldr	r0, [pc, #20]	; (c90 <usb_d_ep_deinit+0x28>)
     c7c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     c80:	23ff      	movs	r3, #255	; 0xff
     c82:	7043      	strb	r3, [r0, #1]
     c84:	bd38      	pop	{r3, r4, r5, pc}
     c86:	bf00      	nop
     c88:	00000915 	.word	0x00000915
     c8c:	00002139 	.word	0x00002139
     c90:	200004b4 	.word	0x200004b4

00000c94 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     c94:	b538      	push	{r3, r4, r5, lr}
     c96:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c98:	4b0e      	ldr	r3, [pc, #56]	; (cd4 <usb_d_ep_enable+0x40>)
     c9a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     c9c:	1e04      	subs	r4, r0, #0
     c9e:	db16      	blt.n	cce <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     ca0:	0163      	lsls	r3, r4, #5
     ca2:	4a0d      	ldr	r2, [pc, #52]	; (cd8 <usb_d_ep_enable+0x44>)
     ca4:	5cd3      	ldrb	r3, [r2, r3]
     ca6:	2b00      	cmp	r3, #0
     ca8:	bf0c      	ite	eq
     caa:	2202      	moveq	r2, #2
     cac:	2201      	movne	r2, #1
     cae:	4b0a      	ldr	r3, [pc, #40]	; (cd8 <usb_d_ep_enable+0x44>)
     cb0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     cb4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     cb6:	4628      	mov	r0, r5
     cb8:	4b08      	ldr	r3, [pc, #32]	; (cdc <usb_d_ep_enable+0x48>)
     cba:	4798      	blx	r3
	if (rc < 0) {
     cbc:	2800      	cmp	r0, #0
     cbe:	db00      	blt.n	cc2 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     cc0:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <usb_d_ep_enable+0x44>)
     cc4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     cc8:	2300      	movs	r3, #0
     cca:	70a3      	strb	r3, [r4, #2]
     ccc:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     cce:	f06f 0011 	mvn.w	r0, #17
     cd2:	e7f5      	b.n	cc0 <usb_d_ep_enable+0x2c>
     cd4:	00000915 	.word	0x00000915
     cd8:	200004b4 	.word	0x200004b4
     cdc:	000021fd 	.word	0x000021fd

00000ce0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ce4:	b086      	sub	sp, #24
     ce6:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     ce8:	7a07      	ldrb	r7, [r0, #8]
     cea:	4638      	mov	r0, r7
     cec:	4b3f      	ldr	r3, [pc, #252]	; (dec <usb_d_ep_transfer+0x10c>)
     cee:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     cf0:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     cf2:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     cf6:	1e06      	subs	r6, r0, #0
     cf8:	db72      	blt.n	de0 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     cfa:	a804      	add	r0, sp, #16
     cfc:	4b3c      	ldr	r3, [pc, #240]	; (df0 <usb_d_ep_transfer+0x110>)
     cfe:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     d00:	4b3c      	ldr	r3, [pc, #240]	; (df4 <usb_d_ep_transfer+0x114>)
     d02:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     d06:	789b      	ldrb	r3, [r3, #2]
     d08:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     d0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d10:	b2db      	uxtb	r3, r3
     d12:	2b01      	cmp	r3, #1
     d14:	d011      	beq.n	d3a <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     d16:	a804      	add	r0, sp, #16
     d18:	4b37      	ldr	r3, [pc, #220]	; (df8 <usb_d_ep_transfer+0x118>)
     d1a:	4798      	blx	r3
		switch (state) {
     d1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d20:	b2db      	uxtb	r3, r3
     d22:	2b05      	cmp	r3, #5
     d24:	d05f      	beq.n	de6 <usb_d_ep_transfer+0x106>
     d26:	2b06      	cmp	r3, #6
     d28:	d023      	beq.n	d72 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     d2a:	2b00      	cmp	r3, #0
     d2c:	bf0c      	ite	eq
     d2e:	f06f 0012 	mvneq.w	r0, #18
     d32:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     d34:	b006      	add	sp, #24
     d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     d3a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; df4 <usb_d_ep_transfer+0x114>
     d3e:	ea4f 1946 	mov.w	r9, r6, lsl #5
     d42:	eb0a 0309 	add.w	r3, sl, r9
     d46:	2203      	movs	r2, #3
     d48:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     d4a:	a804      	add	r0, sp, #16
     d4c:	4b2a      	ldr	r3, [pc, #168]	; (df8 <usb_d_ep_transfer+0x118>)
     d4e:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d50:	f81a 3009 	ldrb.w	r3, [sl, r9]
     d54:	b183      	cbz	r3, d78 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d56:	7a22      	ldrb	r2, [r4, #8]
     d58:	3500      	adds	r5, #0
     d5a:	bf18      	it	ne
     d5c:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     d5e:	6823      	ldr	r3, [r4, #0]
     d60:	9301      	str	r3, [sp, #4]
     d62:	f8cd 8008 	str.w	r8, [sp, #8]
     d66:	f017 0f80 	tst.w	r7, #128	; 0x80
     d6a:	d119      	bne.n	da0 <usb_d_ep_transfer+0xc0>
     d6c:	f002 030f 	and.w	r3, r2, #15
     d70:	e018      	b.n	da4 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     d72:	f06f 000f 	mvn.w	r0, #15
     d76:	e7dd      	b.n	d34 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     d78:	4b1e      	ldr	r3, [pc, #120]	; (df4 <usb_d_ep_transfer+0x114>)
     d7a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     d7e:	7cda      	ldrb	r2, [r3, #19]
     d80:	7c9d      	ldrb	r5, [r3, #18]
     d82:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     d86:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     d88:	b9a5      	cbnz	r5, db4 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     d8a:	4b1a      	ldr	r3, [pc, #104]	; (df4 <usb_d_ep_transfer+0x114>)
     d8c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     d90:	2304      	movs	r3, #4
     d92:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     d94:	2300      	movs	r3, #0
			zlp                 = true;
     d96:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d98:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     d9a:	6821      	ldr	r1, [r4, #0]
     d9c:	9101      	str	r1, [sp, #4]
     d9e:	9302      	str	r3, [sp, #8]
     da0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     da4:	f88d 300c 	strb.w	r3, [sp, #12]
     da8:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     dac:	a801      	add	r0, sp, #4
     dae:	4b13      	ldr	r3, [pc, #76]	; (dfc <usb_d_ep_transfer+0x11c>)
     db0:	4798      	blx	r3
	return rc;
     db2:	e7bf      	b.n	d34 <usb_d_ep_transfer+0x54>
     db4:	4643      	mov	r3, r8
     db6:	45a8      	cmp	r8, r5
     db8:	bf28      	it	cs
     dba:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     dbc:	4a0d      	ldr	r2, [pc, #52]	; (df4 <usb_d_ep_transfer+0x114>)
     dbe:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     dc2:	f996 200c 	ldrsb.w	r2, [r6, #12]
     dc6:	2a00      	cmp	r2, #0
     dc8:	db05      	blt.n	dd6 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dca:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     dcc:	6821      	ldr	r1, [r4, #0]
     dce:	9101      	str	r1, [sp, #4]
     dd0:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dd2:	2500      	movs	r5, #0
     dd4:	e7ca      	b.n	d6c <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     dd6:	429d      	cmp	r5, r3
     dd8:	bf94      	ite	ls
     dda:	2500      	movls	r5, #0
     ddc:	2501      	movhi	r5, #1
     dde:	e7db      	b.n	d98 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     de0:	f06f 0011 	mvn.w	r0, #17
     de4:	e7a6      	b.n	d34 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     de6:	2002      	movs	r0, #2
     de8:	e7a4      	b.n	d34 <usb_d_ep_transfer+0x54>
     dea:	bf00      	nop
     dec:	00000915 	.word	0x00000915
     df0:	000033d1 	.word	0x000033d1
     df4:	200004b4 	.word	0x200004b4
     df8:	000033df 	.word	0x000033df
     dfc:	0000264d 	.word	0x0000264d

00000e00 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     e04:	b141      	cbz	r1, e18 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     e06:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e08:	bf0c      	ite	eq
     e0a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     e0c:	2102      	movne	r1, #2
     e0e:	4b13      	ldr	r3, [pc, #76]	; (e5c <usb_d_ep_halt+0x5c>)
     e10:	4798      	blx	r3
     e12:	4603      	mov	r3, r0
	}
}
     e14:	4618      	mov	r0, r3
     e16:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     e18:	4b11      	ldr	r3, [pc, #68]	; (e60 <usb_d_ep_halt+0x60>)
     e1a:	4798      	blx	r3
	if (ep_index < 0) {
     e1c:	1e05      	subs	r5, r0, #0
     e1e:	db19      	blt.n	e54 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     e20:	2102      	movs	r1, #2
     e22:	4620      	mov	r0, r4
     e24:	4b0d      	ldr	r3, [pc, #52]	; (e5c <usb_d_ep_halt+0x5c>)
     e26:	4798      	blx	r3
     e28:	4603      	mov	r3, r0
     e2a:	2800      	cmp	r0, #0
     e2c:	d0f2      	beq.n	e14 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e2e:	2100      	movs	r1, #0
     e30:	4620      	mov	r0, r4
     e32:	4b0a      	ldr	r3, [pc, #40]	; (e5c <usb_d_ep_halt+0x5c>)
     e34:	4798      	blx	r3
		if (rc < 0) {
     e36:	1e03      	subs	r3, r0, #0
     e38:	dbec      	blt.n	e14 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     e3a:	4b0a      	ldr	r3, [pc, #40]	; (e64 <usb_d_ep_halt+0x64>)
     e3c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     e40:	2201      	movs	r2, #1
     e42:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     e44:	2103      	movs	r1, #3
     e46:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     e48:	69db      	ldr	r3, [r3, #28]
     e4a:	2200      	movs	r2, #0
     e4c:	4620      	mov	r0, r4
     e4e:	4798      	blx	r3
	return ERR_NONE;
     e50:	2300      	movs	r3, #0
     e52:	e7df      	b.n	e14 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     e54:	f06f 0311 	mvn.w	r3, #17
     e58:	e7dc      	b.n	e14 <usb_d_ep_halt+0x14>
     e5a:	bf00      	nop
     e5c:	000024a5 	.word	0x000024a5
     e60:	00000915 	.word	0x00000915
     e64:	200004b4 	.word	0x200004b4

00000e68 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     e68:	b538      	push	{r3, r4, r5, lr}
     e6a:	460d      	mov	r5, r1
     e6c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e6e:	4b0e      	ldr	r3, [pc, #56]	; (ea8 <usb_d_ep_register_callback+0x40>)
     e70:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     e72:	4b0e      	ldr	r3, [pc, #56]	; (eac <usb_d_ep_register_callback+0x44>)
     e74:	2c00      	cmp	r4, #0
     e76:	bf08      	it	eq
     e78:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     e7a:	2800      	cmp	r0, #0
     e7c:	db13      	blt.n	ea6 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     e7e:	2d01      	cmp	r5, #1
     e80:	d008      	beq.n	e94 <usb_d_ep_register_callback+0x2c>
     e82:	b115      	cbz	r5, e8a <usb_d_ep_register_callback+0x22>
     e84:	2d02      	cmp	r5, #2
     e86:	d00a      	beq.n	e9e <usb_d_ep_register_callback+0x36>
     e88:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     e8a:	4b09      	ldr	r3, [pc, #36]	; (eb0 <usb_d_ep_register_callback+0x48>)
     e8c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     e90:	6144      	str	r4, [r0, #20]
		break;
     e92:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     e94:	4b06      	ldr	r3, [pc, #24]	; (eb0 <usb_d_ep_register_callback+0x48>)
     e96:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     e9a:	6184      	str	r4, [r0, #24]
		break;
     e9c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     e9e:	4b04      	ldr	r3, [pc, #16]	; (eb0 <usb_d_ep_register_callback+0x48>)
     ea0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     ea4:	61c4      	str	r4, [r0, #28]
     ea6:	bd38      	pop	{r3, r4, r5, pc}
     ea8:	00000915 	.word	0x00000915
     eac:	00000959 	.word	0x00000959
     eb0:	200004b4 	.word	0x200004b4

00000eb4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     eb4:	b900      	cbnz	r0, eb8 <assert+0x4>
		__asm("BKPT #0");
     eb6:	be00      	bkpt	0x0000
     eb8:	4770      	bx	lr
	...

00000ebc <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     ebc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     ebe:	f013 0f01 	tst.w	r3, #1
     ec2:	d11b      	bne.n	efc <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ec4:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ec6:	f013 0f03 	tst.w	r3, #3
     eca:	d1fb      	bne.n	ec4 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     ecc:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     ece:	f013 0f02 	tst.w	r3, #2
     ed2:	d00d      	beq.n	ef0 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     ed4:	8803      	ldrh	r3, [r0, #0]
     ed6:	f023 0302 	bic.w	r3, r3, #2
     eda:	041b      	lsls	r3, r3, #16
     edc:	0c1b      	lsrs	r3, r3, #16
     ede:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ee0:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ee2:	f013 0f03 	tst.w	r3, #3
     ee6:	d1fb      	bne.n	ee0 <_adc_init+0x24>
     ee8:	6b03      	ldr	r3, [r0, #48]	; 0x30
     eea:	f013 0f02 	tst.w	r3, #2
     eee:	d1fb      	bne.n	ee8 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     ef0:	2301      	movs	r3, #1
     ef2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ef4:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ef6:	f013 0f03 	tst.w	r3, #3
     efa:	d1fb      	bne.n	ef4 <_adc_init+0x38>
     efc:	6b03      	ldr	r3, [r0, #48]	; 0x30
     efe:	f013 0f01 	tst.w	r3, #1
     f02:	d1fb      	bne.n	efc <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     f04:	2316      	movs	r3, #22
     f06:	4a37      	ldr	r2, [pc, #220]	; (fe4 <_adc_init+0x128>)
     f08:	fb03 2301 	mla	r3, r3, r1, r2
     f0c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
     f0e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f10:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f16:	2b00      	cmp	r3, #0
     f18:	d1fa      	bne.n	f10 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     f1a:	2316      	movs	r3, #22
     f1c:	4a31      	ldr	r2, [pc, #196]	; (fe4 <_adc_init+0x128>)
     f1e:	fb03 2301 	mla	r3, r3, r1, r2
     f22:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
     f24:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f26:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f2c:	2b00      	cmp	r3, #0
     f2e:	d1fa      	bne.n	f26 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     f30:	2316      	movs	r3, #22
     f32:	4a2c      	ldr	r2, [pc, #176]	; (fe4 <_adc_init+0x128>)
     f34:	fb03 2301 	mla	r3, r3, r1, r2
     f38:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
     f3a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     f3c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
     f3e:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f40:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f46:	2b00      	cmp	r3, #0
     f48:	d1fa      	bne.n	f40 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     f4a:	2316      	movs	r3, #22
     f4c:	4a25      	ldr	r2, [pc, #148]	; (fe4 <_adc_init+0x128>)
     f4e:	fb03 2301 	mla	r3, r3, r1, r2
     f52:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
     f54:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f56:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f5c:	2b00      	cmp	r3, #0
     f5e:	d1fa      	bne.n	f56 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     f60:	2316      	movs	r3, #22
     f62:	4a20      	ldr	r2, [pc, #128]	; (fe4 <_adc_init+0x128>)
     f64:	fb03 2301 	mla	r3, r3, r1, r2
     f68:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
     f6a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f72:	2b00      	cmp	r3, #0
     f74:	d1fa      	bne.n	f6c <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     f76:	2316      	movs	r3, #22
     f78:	4a1a      	ldr	r2, [pc, #104]	; (fe4 <_adc_init+0x128>)
     f7a:	fb03 2301 	mla	r3, r3, r1, r2
     f7e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
     f80:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f82:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f84:	f013 0f80 	tst.w	r3, #128	; 0x80
     f88:	d1fb      	bne.n	f82 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     f8a:	2316      	movs	r3, #22
     f8c:	4a15      	ldr	r2, [pc, #84]	; (fe4 <_adc_init+0x128>)
     f8e:	fb03 2301 	mla	r3, r3, r1, r2
     f92:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
     f94:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f96:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f98:	f413 7f80 	tst.w	r3, #256	; 0x100
     f9c:	d1fb      	bne.n	f96 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     f9e:	2316      	movs	r3, #22
     fa0:	4a10      	ldr	r2, [pc, #64]	; (fe4 <_adc_init+0x128>)
     fa2:	fb03 2301 	mla	r3, r3, r1, r2
     fa6:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
     fa8:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     faa:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fac:	f413 7f00 	tst.w	r3, #512	; 0x200
     fb0:	d1fb      	bne.n	faa <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     fb2:	2316      	movs	r3, #22
     fb4:	4a0b      	ldr	r2, [pc, #44]	; (fe4 <_adc_init+0x128>)
     fb6:	fb03 2301 	mla	r3, r3, r1, r2
     fba:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
     fbc:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fc0:	f413 6f80 	tst.w	r3, #1024	; 0x400
     fc4:	d1fb      	bne.n	fbe <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     fc6:	2216      	movs	r2, #22
     fc8:	4b06      	ldr	r3, [pc, #24]	; (fe4 <_adc_init+0x128>)
     fca:	fb02 3101 	mla	r1, r2, r1, r3
     fce:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     fd0:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     fd2:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
     fd4:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fd8:	f013 0f03 	tst.w	r3, #3
     fdc:	d1fb      	bne.n	fd6 <_adc_init+0x11a>

	return ERR_NONE;
}
     fde:	2000      	movs	r0, #0
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop
     fe4:	000037e4 	.word	0x000037e4

00000fe8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     fe8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
     fec:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
     ff0:	f3c0 2087 	ubfx	r0, r0, #10, #8
     ff4:	b138      	cbz	r0, 1006 <_adc_get_regs+0x1e>
{
     ff6:	b508      	push	{r3, lr}
	ASSERT(false);
     ff8:	2288      	movs	r2, #136	; 0x88
     ffa:	4904      	ldr	r1, [pc, #16]	; (100c <_adc_get_regs+0x24>)
     ffc:	2000      	movs	r0, #0
     ffe:	4b04      	ldr	r3, [pc, #16]	; (1010 <_adc_get_regs+0x28>)
    1000:	4798      	blx	r3
}
    1002:	2000      	movs	r0, #0
    1004:	bd08      	pop	{r3, pc}
    1006:	2000      	movs	r0, #0
    1008:	4770      	bx	lr
    100a:	bf00      	nop
    100c:	000037fc 	.word	0x000037fc
    1010:	00000eb5 	.word	0x00000eb5

00001014 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1014:	b538      	push	{r3, r4, r5, lr}
    1016:	460c      	mov	r4, r1
	ASSERT(device);
    1018:	4605      	mov	r5, r0
    101a:	22ce      	movs	r2, #206	; 0xce
    101c:	4907      	ldr	r1, [pc, #28]	; (103c <_adc_sync_init+0x28>)
    101e:	3000      	adds	r0, #0
    1020:	bf18      	it	ne
    1022:	2001      	movne	r0, #1
    1024:	4b06      	ldr	r3, [pc, #24]	; (1040 <_adc_sync_init+0x2c>)
    1026:	4798      	blx	r3

	device->hw = hw;
    1028:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    102a:	4620      	mov	r0, r4
    102c:	4b05      	ldr	r3, [pc, #20]	; (1044 <_adc_sync_init+0x30>)
    102e:	4798      	blx	r3
    1030:	4601      	mov	r1, r0
    1032:	4620      	mov	r0, r4
    1034:	4b04      	ldr	r3, [pc, #16]	; (1048 <_adc_sync_init+0x34>)
    1036:	4798      	blx	r3
}
    1038:	bd38      	pop	{r3, r4, r5, pc}
    103a:	bf00      	nop
    103c:	000037fc 	.word	0x000037fc
    1040:	00000eb5 	.word	0x00000eb5
    1044:	00000fe9 	.word	0x00000fe9
    1048:	00000ebd 	.word	0x00000ebd

0000104c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    104c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1050:	fb03 f000 	mul.w	r0, r3, r0
    1054:	4770      	bx	lr
	...

00001058 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1058:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    105a:	4a08      	ldr	r2, [pc, #32]	; (107c <_init_chip+0x24>)
    105c:	8813      	ldrh	r3, [r2, #0]
    105e:	b29b      	uxth	r3, r3
    1060:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1062:	4b07      	ldr	r3, [pc, #28]	; (1080 <_init_chip+0x28>)
    1064:	4798      	blx	r3
	_oscctrl_init_sources();
    1066:	4b07      	ldr	r3, [pc, #28]	; (1084 <_init_chip+0x2c>)
    1068:	4798      	blx	r3
	_mclk_init();
    106a:	4b07      	ldr	r3, [pc, #28]	; (1088 <_init_chip+0x30>)
    106c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    106e:	4b07      	ldr	r3, [pc, #28]	; (108c <_init_chip+0x34>)
    1070:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1072:	f640 70ff 	movw	r0, #4095	; 0xfff
    1076:	4b06      	ldr	r3, [pc, #24]	; (1090 <_init_chip+0x38>)
    1078:	4798      	blx	r3
    107a:	bd08      	pop	{r3, pc}
    107c:	41004000 	.word	0x41004000
    1080:	000010fd 	.word	0x000010fd
    1084:	0000111d 	.word	0x0000111d
    1088:	000010f1 	.word	0x000010f1
    108c:	00001139 	.word	0x00001139
    1090:	00001095 	.word	0x00001095

00001094 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1094:	f010 0f01 	tst.w	r0, #1
    1098:	d008      	beq.n	10ac <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    109a:	4a11      	ldr	r2, [pc, #68]	; (10e0 <_gclk_init_generators_by_fref+0x4c>)
    109c:	4b11      	ldr	r3, [pc, #68]	; (10e4 <_gclk_init_generators_by_fref+0x50>)
    109e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10a0:	4619      	mov	r1, r3
    10a2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    10a6:	684b      	ldr	r3, [r1, #4]
    10a8:	4213      	tst	r3, r2
    10aa:	d1fc      	bne.n	10a6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    10ac:	f010 0f08 	tst.w	r0, #8
    10b0:	d008      	beq.n	10c4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10b2:	4a0d      	ldr	r2, [pc, #52]	; (10e8 <_gclk_init_generators_by_fref+0x54>)
    10b4:	4b0b      	ldr	r3, [pc, #44]	; (10e4 <_gclk_init_generators_by_fref+0x50>)
    10b6:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10b8:	4619      	mov	r1, r3
    10ba:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    10be:	684b      	ldr	r3, [r1, #4]
    10c0:	4213      	tst	r3, r2
    10c2:	d1fc      	bne.n	10be <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    10c4:	f010 0f10 	tst.w	r0, #16
    10c8:	d008      	beq.n	10dc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10ca:	4a08      	ldr	r2, [pc, #32]	; (10ec <_gclk_init_generators_by_fref+0x58>)
    10cc:	4b05      	ldr	r3, [pc, #20]	; (10e4 <_gclk_init_generators_by_fref+0x50>)
    10ce:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10d0:	4619      	mov	r1, r3
    10d2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    10d6:	684b      	ldr	r3, [r1, #4]
    10d8:	4213      	tst	r3, r2
    10da:	d1fc      	bne.n	10d6 <_gclk_init_generators_by_fref+0x42>
    10dc:	4770      	bx	lr
    10de:	bf00      	nop
    10e0:	00010101 	.word	0x00010101
    10e4:	40001c00 	.word	0x40001c00
    10e8:	00010105 	.word	0x00010105
    10ec:	00010106 	.word	0x00010106

000010f0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10f0:	2201      	movs	r2, #1
    10f2:	4b01      	ldr	r3, [pc, #4]	; (10f8 <_mclk_init+0x8>)
    10f4:	715a      	strb	r2, [r3, #5]
    10f6:	4770      	bx	lr
    10f8:	40000800 	.word	0x40000800

000010fc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    10fc:	4b06      	ldr	r3, [pc, #24]	; (1118 <_osc32kctrl_init_sources+0x1c>)
    10fe:	f242 028e 	movw	r2, #8334	; 0x208e
    1102:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1104:	2200      	movs	r2, #0
    1106:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1108:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    110a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    110c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1110:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1112:	2201      	movs	r2, #1
    1114:	741a      	strb	r2, [r3, #16]
    1116:	4770      	bx	lr
    1118:	40001400 	.word	0x40001400

0000111c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    111c:	4a04      	ldr	r2, [pc, #16]	; (1130 <_oscctrl_init_sources+0x14>)
    111e:	4b05      	ldr	r3, [pc, #20]	; (1134 <_oscctrl_init_sources+0x18>)
    1120:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1122:	461a      	mov	r2, r3
    1124:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1126:	f013 0f02 	tst.w	r3, #2
    112a:	d0fb      	beq.n	1124 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    112c:	4770      	bx	lr
    112e:	bf00      	nop
    1130:	03002606 	.word	0x03002606
    1134:	40001000 	.word	0x40001000

00001138 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1138:	4a36      	ldr	r2, [pc, #216]	; (1214 <_oscctrl_init_referenced_generators+0xdc>)
    113a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    113c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1140:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1144:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1146:	4611      	mov	r1, r2
    1148:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    114c:	684b      	ldr	r3, [r1, #4]
    114e:	4213      	tst	r3, r2
    1150:	d1fc      	bne.n	114c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1152:	4a30      	ldr	r2, [pc, #192]	; (1214 <_oscctrl_init_referenced_generators+0xdc>)
    1154:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1156:	f013 0f04 	tst.w	r3, #4
    115a:	d1fb      	bne.n	1154 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    115c:	4b2e      	ldr	r3, [pc, #184]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    115e:	2200      	movs	r2, #0
    1160:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1162:	4a2e      	ldr	r2, [pc, #184]	; (121c <_oscctrl_init_referenced_generators+0xe4>)
    1164:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1166:	461a      	mov	r2, r3
    1168:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    116c:	f013 0f10 	tst.w	r3, #16
    1170:	d1fa      	bne.n	1168 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1172:	2200      	movs	r2, #0
    1174:	4b28      	ldr	r3, [pc, #160]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    1176:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    117a:	461a      	mov	r2, r3
    117c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1180:	f013 0f04 	tst.w	r3, #4
    1184:	d1fa      	bne.n	117c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1186:	2202      	movs	r2, #2
    1188:	4b23      	ldr	r3, [pc, #140]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    118a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    118c:	461a      	mov	r2, r3
    118e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1192:	f013 0f02 	tst.w	r3, #2
    1196:	d1fa      	bne.n	118e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1198:	4b1f      	ldr	r3, [pc, #124]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    119a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    119c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    119e:	461a      	mov	r2, r3
    11a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    11a4:	f013 0f08 	tst.w	r3, #8
    11a8:	d1fa      	bne.n	11a0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    11aa:	2219      	movs	r2, #25
    11ac:	4b1a      	ldr	r3, [pc, #104]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    11ae:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    11b2:	461a      	mov	r2, r3
    11b4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    11b8:	f013 0f04 	tst.w	r3, #4
    11bc:	d1fa      	bne.n	11b4 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    11be:	4b16      	ldr	r3, [pc, #88]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    11c0:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    11c4:	f013 0f01 	tst.w	r3, #1
    11c8:	d01d      	beq.n	1206 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    11ca:	4a13      	ldr	r2, [pc, #76]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    11cc:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    11ce:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    11d2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    11d6:	d1f9      	bne.n	11cc <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    11d8:	4a0e      	ldr	r2, [pc, #56]	; (1214 <_oscctrl_init_referenced_generators+0xdc>)
    11da:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    11dc:	2b00      	cmp	r3, #0
    11de:	d1fc      	bne.n	11da <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    11e0:	4a0c      	ldr	r2, [pc, #48]	; (1214 <_oscctrl_init_referenced_generators+0xdc>)
    11e2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    11e4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    11e8:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    11ec:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11ee:	4611      	mov	r1, r2
    11f0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    11f4:	684b      	ldr	r3, [r1, #4]
    11f6:	4213      	tst	r3, r2
    11f8:	d1fc      	bne.n	11f4 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    11fa:	4a06      	ldr	r2, [pc, #24]	; (1214 <_oscctrl_init_referenced_generators+0xdc>)
    11fc:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    11fe:	f013 0f04 	tst.w	r3, #4
    1202:	d1fb      	bne.n	11fc <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1204:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1206:	4a04      	ldr	r2, [pc, #16]	; (1218 <_oscctrl_init_referenced_generators+0xe0>)
    1208:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    120a:	f413 7f80 	tst.w	r3, #256	; 0x100
    120e:	d0fb      	beq.n	1208 <_oscctrl_init_referenced_generators+0xd0>
    1210:	e7e2      	b.n	11d8 <_oscctrl_init_referenced_generators+0xa0>
    1212:	bf00      	nop
    1214:	40001c00 	.word	0x40001c00
    1218:	40001000 	.word	0x40001000
    121c:	0401bb80 	.word	0x0401bb80

00001220 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1220:	b470      	push	{r4, r5, r6}
    1222:	b089      	sub	sp, #36	; 0x24
    1224:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1226:	466c      	mov	r4, sp
    1228:	4d0d      	ldr	r5, [pc, #52]	; (1260 <_sercom_get_hardware_index+0x40>)
    122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    122c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    122e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1236:	9b00      	ldr	r3, [sp, #0]
    1238:	42b3      	cmp	r3, r6
    123a:	d00d      	beq.n	1258 <_sercom_get_hardware_index+0x38>
    123c:	4631      	mov	r1, r6
    123e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1240:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1242:	f853 2b04 	ldr.w	r2, [r3], #4
    1246:	428a      	cmp	r2, r1
    1248:	d007      	beq.n	125a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    124a:	3001      	adds	r0, #1
    124c:	2808      	cmp	r0, #8
    124e:	d1f8      	bne.n	1242 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1250:	2000      	movs	r0, #0
}
    1252:	b009      	add	sp, #36	; 0x24
    1254:	bc70      	pop	{r4, r5, r6}
    1256:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1258:	2000      	movs	r0, #0
			return i;
    125a:	b2c0      	uxtb	r0, r0
    125c:	e7f9      	b.n	1252 <_sercom_get_hardware_index+0x32>
    125e:	bf00      	nop
    1260:	00003814 	.word	0x00003814

00001264 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1264:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1266:	4b03      	ldr	r3, [pc, #12]	; (1274 <_sercom_get_irq_num+0x10>)
    1268:	4798      	blx	r3
    126a:	0080      	lsls	r0, r0, #2
    126c:	302e      	adds	r0, #46	; 0x2e
}
    126e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1272:	bd08      	pop	{r3, pc}
    1274:	00001221 	.word	0x00001221

00001278 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1278:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    127a:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    127c:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    127e:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1280:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1282:	f013 0f01 	tst.w	r3, #1
    1286:	d109      	bne.n	129c <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1288:	f013 0f04 	tst.w	r3, #4
    128c:	d109      	bne.n	12a2 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    128e:	f013 0f02 	tst.w	r3, #2
    1292:	d109      	bne.n	12a8 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1294:	f013 0f80 	tst.w	r3, #128	; 0x80
    1298:	d10b      	bne.n	12b2 <_spi_handler+0x3a>
    129a:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    129c:	6883      	ldr	r3, [r0, #8]
    129e:	4798      	blx	r3
    12a0:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    12a2:	68c3      	ldr	r3, [r0, #12]
    12a4:	4798      	blx	r3
    12a6:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12a8:	2302      	movs	r3, #2
    12aa:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    12ac:	6903      	ldr	r3, [r0, #16]
    12ae:	4798      	blx	r3
    12b0:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    12b2:	2304      	movs	r3, #4
    12b4:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12b6:	2380      	movs	r3, #128	; 0x80
    12b8:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    12ba:	6943      	ldr	r3, [r0, #20]
    12bc:	f06f 0112 	mvn.w	r1, #18
    12c0:	4798      	blx	r3
	}
}
    12c2:	e7ea      	b.n	129a <_spi_handler+0x22>

000012c4 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    12c4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    12c6:	4b02      	ldr	r3, [pc, #8]	; (12d0 <SERCOM0_0_Handler+0xc>)
    12c8:	6818      	ldr	r0, [r3, #0]
    12ca:	4b02      	ldr	r3, [pc, #8]	; (12d4 <SERCOM0_0_Handler+0x10>)
    12cc:	4798      	blx	r3
    12ce:	bd08      	pop	{r3, pc}
    12d0:	20000534 	.word	0x20000534
    12d4:	00001279 	.word	0x00001279

000012d8 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    12d8:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    12da:	4b02      	ldr	r3, [pc, #8]	; (12e4 <SERCOM0_1_Handler+0xc>)
    12dc:	6818      	ldr	r0, [r3, #0]
    12de:	4b02      	ldr	r3, [pc, #8]	; (12e8 <SERCOM0_1_Handler+0x10>)
    12e0:	4798      	blx	r3
    12e2:	bd08      	pop	{r3, pc}
    12e4:	20000534 	.word	0x20000534
    12e8:	00001279 	.word	0x00001279

000012ec <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    12ec:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    12ee:	4b02      	ldr	r3, [pc, #8]	; (12f8 <SERCOM0_2_Handler+0xc>)
    12f0:	6818      	ldr	r0, [r3, #0]
    12f2:	4b02      	ldr	r3, [pc, #8]	; (12fc <SERCOM0_2_Handler+0x10>)
    12f4:	4798      	blx	r3
    12f6:	bd08      	pop	{r3, pc}
    12f8:	20000534 	.word	0x20000534
    12fc:	00001279 	.word	0x00001279

00001300 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    1300:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1302:	4b02      	ldr	r3, [pc, #8]	; (130c <SERCOM0_3_Handler+0xc>)
    1304:	6818      	ldr	r0, [r3, #0]
    1306:	4b02      	ldr	r3, [pc, #8]	; (1310 <SERCOM0_3_Handler+0x10>)
    1308:	4798      	blx	r3
    130a:	bd08      	pop	{r3, pc}
    130c:	20000534 	.word	0x20000534
    1310:	00001279 	.word	0x00001279

00001314 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1314:	b538      	push	{r3, r4, r5, lr}
    1316:	4605      	mov	r5, r0
    1318:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    131a:	4608      	mov	r0, r1
    131c:	4b36      	ldr	r3, [pc, #216]	; (13f8 <_spi_m_sync_init+0xe4>)
    131e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1320:	b160      	cbz	r0, 133c <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1322:	2d00      	cmp	r5, #0
    1324:	d055      	beq.n	13d2 <_spi_m_sync_init+0xbe>
    1326:	f640 1273 	movw	r2, #2419	; 0x973
    132a:	4934      	ldr	r1, [pc, #208]	; (13fc <_spi_m_sync_init+0xe8>)
    132c:	1c20      	adds	r0, r4, #0
    132e:	bf18      	it	ne
    1330:	2001      	movne	r0, #1
    1332:	4b33      	ldr	r3, [pc, #204]	; (1400 <_spi_m_sync_init+0xec>)
    1334:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1336:	f06f 000c 	mvn.w	r0, #12
    133a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    133c:	2d00      	cmp	r5, #0
    133e:	d151      	bne.n	13e4 <_spi_m_sync_init+0xd0>
    1340:	f640 1273 	movw	r2, #2419	; 0x973
    1344:	492d      	ldr	r1, [pc, #180]	; (13fc <_spi_m_sync_init+0xe8>)
    1346:	2000      	movs	r0, #0
    1348:	4b2d      	ldr	r3, [pc, #180]	; (1400 <_spi_m_sync_init+0xec>)
    134a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    134c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    134e:	f013 0f01 	tst.w	r3, #1
    1352:	d119      	bne.n	1388 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1354:	69e3      	ldr	r3, [r4, #28]
    1356:	f013 0f03 	tst.w	r3, #3
    135a:	d1fb      	bne.n	1354 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    135c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    135e:	f013 0f02 	tst.w	r3, #2
    1362:	d00b      	beq.n	137c <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1364:	6823      	ldr	r3, [r4, #0]
    1366:	f023 0302 	bic.w	r3, r3, #2
    136a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    136c:	69e3      	ldr	r3, [r4, #28]
    136e:	f013 0f03 	tst.w	r3, #3
    1372:	d1fb      	bne.n	136c <_spi_m_sync_init+0x58>
    1374:	69e3      	ldr	r3, [r4, #28]
    1376:	f013 0f02 	tst.w	r3, #2
    137a:	d1fb      	bne.n	1374 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    137c:	230d      	movs	r3, #13
    137e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1380:	69e3      	ldr	r3, [r4, #28]
    1382:	f013 0f03 	tst.w	r3, #3
    1386:	d1fb      	bne.n	1380 <_spi_m_sync_init+0x6c>
    1388:	69e3      	ldr	r3, [r4, #28]
    138a:	f013 0f01 	tst.w	r3, #1
    138e:	d1fb      	bne.n	1388 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1390:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1392:	f640 1206 	movw	r2, #2310	; 0x906
    1396:	4919      	ldr	r1, [pc, #100]	; (13fc <_spi_m_sync_init+0xe8>)
    1398:	1c20      	adds	r0, r4, #0
    139a:	bf18      	it	ne
    139c:	2001      	movne	r0, #1
    139e:	4b18      	ldr	r3, [pc, #96]	; (1400 <_spi_m_sync_init+0xec>)
    13a0:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    13a2:	4b18      	ldr	r3, [pc, #96]	; (1404 <_spi_m_sync_init+0xf0>)
    13a4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13a6:	69e3      	ldr	r3, [r4, #28]
    13a8:	f013 0f03 	tst.w	r3, #3
    13ac:	d1fb      	bne.n	13a6 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    13ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    13b2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13b4:	69e3      	ldr	r3, [r4, #28]
    13b6:	f013 0f17 	tst.w	r3, #23
    13ba:	d1fb      	bne.n	13b4 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    13bc:	2377      	movs	r3, #119	; 0x77
    13be:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    13c0:	2000      	movs	r0, #0
    13c2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    13c6:	2301      	movs	r3, #1
    13c8:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    13ca:	f240 13ff 	movw	r3, #511	; 0x1ff
    13ce:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    13d0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    13d2:	f640 1273 	movw	r2, #2419	; 0x973
    13d6:	4909      	ldr	r1, [pc, #36]	; (13fc <_spi_m_sync_init+0xe8>)
    13d8:	2000      	movs	r0, #0
    13da:	4b09      	ldr	r3, [pc, #36]	; (1400 <_spi_m_sync_init+0xec>)
    13dc:	4798      	blx	r3
		return ERR_INVALID_ARG;
    13de:	f06f 000c 	mvn.w	r0, #12
    13e2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    13e4:	f640 1273 	movw	r2, #2419	; 0x973
    13e8:	4904      	ldr	r1, [pc, #16]	; (13fc <_spi_m_sync_init+0xe8>)
    13ea:	1c20      	adds	r0, r4, #0
    13ec:	bf18      	it	ne
    13ee:	2001      	movne	r0, #1
    13f0:	4b03      	ldr	r3, [pc, #12]	; (1400 <_spi_m_sync_init+0xec>)
    13f2:	4798      	blx	r3
    13f4:	e7aa      	b.n	134c <_spi_m_sync_init+0x38>
    13f6:	bf00      	nop
    13f8:	00001221 	.word	0x00001221
    13fc:	0000384c 	.word	0x0000384c
    1400:	00000eb5 	.word	0x00000eb5
    1404:	0020000c 	.word	0x0020000c

00001408 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1408:	b538      	push	{r3, r4, r5, lr}
    140a:	4604      	mov	r4, r0
    140c:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    140e:	4b15      	ldr	r3, [pc, #84]	; (1464 <_spi_m_async_init+0x5c>)
    1410:	4798      	blx	r3

	if (rc < 0) {
    1412:	2800      	cmp	r0, #0
    1414:	db25      	blt.n	1462 <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    1416:	4b14      	ldr	r3, [pc, #80]	; (1468 <_spi_m_async_init+0x60>)
    1418:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    141a:	bf04      	itt	eq
    141c:	4b13      	ldreq	r3, [pc, #76]	; (146c <_spi_m_async_init+0x64>)
    141e:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1420:	2300      	movs	r3, #0
    1422:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1424:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1426:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1428:	4628      	mov	r0, r5
    142a:	4b11      	ldr	r3, [pc, #68]	; (1470 <_spi_m_async_init+0x68>)
    142c:	4798      	blx	r3
    142e:	1d01      	adds	r1, r0, #4
    1430:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1432:	2401      	movs	r4, #1
    1434:	f000 021f 	and.w	r2, r0, #31
    1438:	fa04 f202 	lsl.w	r2, r4, r2
    143c:	0943      	lsrs	r3, r0, #5
    143e:	009b      	lsls	r3, r3, #2
    1440:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1444:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    144c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1450:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1454:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1458:	3001      	adds	r0, #1
    145a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    145c:	4281      	cmp	r1, r0
    145e:	d1e9      	bne.n	1434 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1460:	2000      	movs	r0, #0
}
    1462:	bd38      	pop	{r3, r4, r5, pc}
    1464:	00001315 	.word	0x00001315
    1468:	40003000 	.word	0x40003000
    146c:	20000534 	.word	0x20000534
    1470:	00001265 	.word	0x00001265

00001474 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1474:	b538      	push	{r3, r4, r5, lr}
    1476:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1478:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    147a:	b160      	cbz	r0, 1496 <_spi_m_async_enable_tx+0x22>
    147c:	1c20      	adds	r0, r4, #0
    147e:	bf18      	it	ne
    1480:	2001      	movne	r0, #1
    1482:	f640 3203 	movw	r2, #2819	; 0xb03
    1486:	4906      	ldr	r1, [pc, #24]	; (14a0 <_spi_m_async_enable_tx+0x2c>)
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <_spi_m_async_enable_tx+0x30>)
    148a:	4798      	blx	r3

	if (state) {
    148c:	b92d      	cbnz	r5, 149a <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    148e:	2301      	movs	r3, #1
    1490:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1492:	2000      	movs	r0, #0
    1494:	bd38      	pop	{r3, r4, r5, pc}
    1496:	2000      	movs	r0, #0
    1498:	e7f3      	b.n	1482 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    149a:	2301      	movs	r3, #1
    149c:	75a3      	strb	r3, [r4, #22]
    149e:	e7f8      	b.n	1492 <_spi_m_async_enable_tx+0x1e>
    14a0:	0000384c 	.word	0x0000384c
    14a4:	00000eb5 	.word	0x00000eb5

000014a8 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    14a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14aa:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    14ac:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    14ae:	4e0c      	ldr	r6, [pc, #48]	; (14e0 <_spi_m_async_enable_rx+0x38>)
    14b0:	f640 3217 	movw	r2, #2839	; 0xb17
    14b4:	4631      	mov	r1, r6
    14b6:	3000      	adds	r0, #0
    14b8:	bf18      	it	ne
    14ba:	2001      	movne	r0, #1
    14bc:	4d09      	ldr	r5, [pc, #36]	; (14e4 <_spi_m_async_enable_rx+0x3c>)
    14be:	47a8      	blx	r5
	ASSERT(hw);
    14c0:	f640 3218 	movw	r2, #2840	; 0xb18
    14c4:	4631      	mov	r1, r6
    14c6:	1c20      	adds	r0, r4, #0
    14c8:	bf18      	it	ne
    14ca:	2001      	movne	r0, #1
    14cc:	47a8      	blx	r5

	if (state) {
    14ce:	b91f      	cbnz	r7, 14d8 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    14d0:	2304      	movs	r3, #4
    14d2:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    14d4:	2000      	movs	r0, #0
    14d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    14d8:	2304      	movs	r3, #4
    14da:	75a3      	strb	r3, [r4, #22]
    14dc:	e7fa      	b.n	14d4 <_spi_m_async_enable_rx+0x2c>
    14de:	bf00      	nop
    14e0:	0000384c 	.word	0x0000384c
    14e4:	00000eb5 	.word	0x00000eb5

000014e8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    14ec:	4604      	mov	r4, r0
    14ee:	b170      	cbz	r0, 150e <_spi_m_async_enable_tx_complete+0x26>
    14f0:	6800      	ldr	r0, [r0, #0]
    14f2:	3000      	adds	r0, #0
    14f4:	bf18      	it	ne
    14f6:	2001      	movne	r0, #1
    14f8:	f640 322a 	movw	r2, #2858	; 0xb2a
    14fc:	4907      	ldr	r1, [pc, #28]	; (151c <_spi_m_async_enable_tx_complete+0x34>)
    14fe:	4b08      	ldr	r3, [pc, #32]	; (1520 <_spi_m_async_enable_tx_complete+0x38>)
    1500:	4798      	blx	r3

	if (state) {
    1502:	b935      	cbnz	r5, 1512 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1504:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1506:	2202      	movs	r2, #2
    1508:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    150a:	2000      	movs	r0, #0
    150c:	bd38      	pop	{r3, r4, r5, pc}
    150e:	2000      	movs	r0, #0
    1510:	e7f2      	b.n	14f8 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    1512:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1514:	2202      	movs	r2, #2
    1516:	759a      	strb	r2, [r3, #22]
    1518:	e7f7      	b.n	150a <_spi_m_async_enable_tx_complete+0x22>
    151a:	bf00      	nop
    151c:	0000384c 	.word	0x0000384c
    1520:	00000eb5 	.word	0x00000eb5

00001524 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1524:	b538      	push	{r3, r4, r5, lr}
    1526:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1528:	4604      	mov	r4, r0
    152a:	b160      	cbz	r0, 1546 <_spi_m_async_write_one+0x22>
    152c:	6800      	ldr	r0, [r0, #0]
    152e:	3000      	adds	r0, #0
    1530:	bf18      	it	ne
    1532:	2001      	movne	r0, #1
    1534:	f640 323c 	movw	r2, #2876	; 0xb3c
    1538:	4904      	ldr	r1, [pc, #16]	; (154c <_spi_m_async_write_one+0x28>)
    153a:	4b05      	ldr	r3, [pc, #20]	; (1550 <_spi_m_async_write_one+0x2c>)
    153c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    153e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1540:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1542:	2000      	movs	r0, #0
    1544:	bd38      	pop	{r3, r4, r5, pc}
    1546:	2000      	movs	r0, #0
    1548:	e7f4      	b.n	1534 <_spi_m_async_write_one+0x10>
    154a:	bf00      	nop
    154c:	0000384c 	.word	0x0000384c
    1550:	00000eb5 	.word	0x00000eb5

00001554 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1554:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1556:	4604      	mov	r4, r0
    1558:	b160      	cbz	r0, 1574 <_spi_m_async_read_one+0x20>
    155a:	6800      	ldr	r0, [r0, #0]
    155c:	3000      	adds	r0, #0
    155e:	bf18      	it	ne
    1560:	2001      	movne	r0, #1
    1562:	f640 3257 	movw	r2, #2903	; 0xb57
    1566:	4904      	ldr	r1, [pc, #16]	; (1578 <_spi_m_async_read_one+0x24>)
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <_spi_m_async_read_one+0x28>)
    156a:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    156c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    156e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1570:	b280      	uxth	r0, r0
    1572:	bd10      	pop	{r4, pc}
    1574:	2000      	movs	r0, #0
    1576:	e7f4      	b.n	1562 <_spi_m_async_read_one+0xe>
    1578:	0000384c 	.word	0x0000384c
    157c:	00000eb5 	.word	0x00000eb5

00001580 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1580:	b570      	push	{r4, r5, r6, lr}
    1582:	460d      	mov	r5, r1
    1584:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1586:	4604      	mov	r4, r0
    1588:	b168      	cbz	r0, 15a6 <_spi_m_async_register_callback+0x26>
    158a:	2903      	cmp	r1, #3
    158c:	bf8c      	ite	hi
    158e:	2000      	movhi	r0, #0
    1590:	2001      	movls	r0, #1
    1592:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    1596:	4905      	ldr	r1, [pc, #20]	; (15ac <_spi_m_async_register_callback+0x2c>)
    1598:	4b05      	ldr	r3, [pc, #20]	; (15b0 <_spi_m_async_register_callback+0x30>)
    159a:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    159c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    15a0:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    15a2:	2000      	movs	r0, #0
    15a4:	bd70      	pop	{r4, r5, r6, pc}
    15a6:	2000      	movs	r0, #0
    15a8:	e7f3      	b.n	1592 <_spi_m_async_register_callback+0x12>
    15aa:	bf00      	nop
    15ac:	0000384c 	.word	0x0000384c
    15b0:	00000eb5 	.word	0x00000eb5

000015b4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    15b4:	4b03      	ldr	r3, [pc, #12]	; (15c4 <_delay_init+0x10>)
    15b6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    15ba:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    15bc:	2205      	movs	r2, #5
    15be:	601a      	str	r2, [r3, #0]
    15c0:	4770      	bx	lr
    15c2:	bf00      	nop
    15c4:	e000e010 	.word	0xe000e010

000015c8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    15c8:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    15ca:	b303      	cbz	r3, 160e <_delay_cycles+0x46>
{
    15cc:	b430      	push	{r4, r5}
    15ce:	1e5d      	subs	r5, r3, #1
    15d0:	b2ed      	uxtb	r5, r5
	while (n--) {
    15d2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    15d4:	4a12      	ldr	r2, [pc, #72]	; (1620 <_delay_cycles+0x58>)
    15d6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    15da:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    15dc:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    15de:	6813      	ldr	r3, [r2, #0]
    15e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    15e4:	d0fb      	beq.n	15de <_delay_cycles+0x16>
	while (n--) {
    15e6:	3801      	subs	r0, #1
    15e8:	b2c0      	uxtb	r0, r0
    15ea:	28ff      	cmp	r0, #255	; 0xff
    15ec:	d1f5      	bne.n	15da <_delay_cycles+0x12>
    15ee:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    15f2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    15f6:	3101      	adds	r1, #1
    15f8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    15fa:	4b09      	ldr	r3, [pc, #36]	; (1620 <_delay_cycles+0x58>)
    15fc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    15fe:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1600:	461a      	mov	r2, r3
    1602:	6813      	ldr	r3, [r2, #0]
    1604:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1608:	d0fb      	beq.n	1602 <_delay_cycles+0x3a>
		;
}
    160a:	bc30      	pop	{r4, r5}
    160c:	4770      	bx	lr
	SysTick->LOAD = buf;
    160e:	4b04      	ldr	r3, [pc, #16]	; (1620 <_delay_cycles+0x58>)
    1610:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1612:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1614:	461a      	mov	r2, r3
    1616:	6813      	ldr	r3, [r2, #0]
    1618:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    161c:	d0fb      	beq.n	1616 <_delay_cycles+0x4e>
    161e:	4770      	bx	lr
    1620:	e000e010 	.word	0xe000e010

00001624 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1624:	2000      	movs	r0, #0
    1626:	4770      	bx	lr

00001628 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1628:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    162a:	7c83      	ldrb	r3, [r0, #18]
    162c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1630:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1632:	f002 0107 	and.w	r1, r2, #7
    1636:	2901      	cmp	r1, #1
    1638:	d00b      	beq.n	1652 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    163a:	015a      	lsls	r2, r3, #5
    163c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1640:	2110      	movs	r1, #16
    1642:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1646:	015b      	lsls	r3, r3, #5
    1648:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    164c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1650:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1652:	f012 0f40 	tst.w	r2, #64	; 0x40
    1656:	d00c      	beq.n	1672 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1658:	7cc2      	ldrb	r2, [r0, #19]
    165a:	f36f 1286 	bfc	r2, #6, #1
    165e:	74c2      	strb	r2, [r0, #19]
    1660:	015a      	lsls	r2, r3, #5
    1662:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1666:	2180      	movs	r1, #128	; 0x80
    1668:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    166c:	2140      	movs	r1, #64	; 0x40
    166e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1672:	7cc2      	ldrb	r2, [r0, #19]
    1674:	f36f 02c3 	bfc	r2, #3, #1
    1678:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    167a:	4909      	ldr	r1, [pc, #36]	; (16a0 <_usb_d_dev_handle_setup+0x78>)
    167c:	015a      	lsls	r2, r3, #5
    167e:	188c      	adds	r4, r1, r2
    1680:	2500      	movs	r5, #0
    1682:	72a5      	strb	r5, [r4, #10]
    1684:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1686:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    168a:	246f      	movs	r4, #111	; 0x6f
    168c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1690:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1694:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1698:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    169a:	7c80      	ldrb	r0, [r0, #18]
    169c:	4798      	blx	r3
    169e:	bd38      	pop	{r3, r4, r5, pc}
    16a0:	20000538 	.word	0x20000538

000016a4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    16a4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    16a6:	2320      	movs	r3, #32
    16a8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    16ac:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    16ae:	7c83      	ldrb	r3, [r0, #18]
    16b0:	f003 030f 	and.w	r3, r3, #15
    16b4:	015b      	lsls	r3, r3, #5
    16b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    16ba:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    16be:	4b03      	ldr	r3, [pc, #12]	; (16cc <_usb_d_dev_handle_stall+0x28>)
    16c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    16c2:	6882      	ldr	r2, [r0, #8]
    16c4:	2101      	movs	r1, #1
    16c6:	7c80      	ldrb	r0, [r0, #18]
    16c8:	4798      	blx	r3
    16ca:	bd08      	pop	{r3, pc}
    16cc:	20000538 	.word	0x20000538

000016d0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    16d0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    16d2:	7c84      	ldrb	r4, [r0, #18]
    16d4:	2cff      	cmp	r4, #255	; 0xff
    16d6:	d003      	beq.n	16e0 <_usb_d_dev_trans_done+0x10>
    16d8:	7cc3      	ldrb	r3, [r0, #19]
    16da:	f013 0f40 	tst.w	r3, #64	; 0x40
    16de:	d100      	bne.n	16e2 <_usb_d_dev_trans_done+0x12>
    16e0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    16e2:	7cc2      	ldrb	r2, [r0, #19]
    16e4:	f36f 1286 	bfc	r2, #6, #1
    16e8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    16ea:	4a03      	ldr	r2, [pc, #12]	; (16f8 <_usb_d_dev_trans_done+0x28>)
    16ec:	6f15      	ldr	r5, [r2, #112]	; 0x70
    16ee:	6882      	ldr	r2, [r0, #8]
    16f0:	4620      	mov	r0, r4
    16f2:	47a8      	blx	r5
    16f4:	e7f4      	b.n	16e0 <_usb_d_dev_trans_done+0x10>
    16f6:	bf00      	nop
    16f8:	20000538 	.word	0x20000538

000016fc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    16fc:	b530      	push	{r4, r5, lr}
    16fe:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1700:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1702:	2425      	movs	r4, #37	; 0x25
    1704:	f88d 4004 	strb.w	r4, [sp, #4]
    1708:	244a      	movs	r4, #74	; 0x4a
    170a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    170e:	2bff      	cmp	r3, #255	; 0xff
    1710:	d01e      	beq.n	1750 <_usb_d_dev_trans_stop+0x54>
    1712:	7cc4      	ldrb	r4, [r0, #19]
    1714:	f014 0f40 	tst.w	r4, #64	; 0x40
    1718:	d01a      	beq.n	1750 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    171a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    171e:	b1c9      	cbz	r1, 1754 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1720:	0163      	lsls	r3, r4, #5
    1722:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1726:	2580      	movs	r5, #128	; 0x80
    1728:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    172c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    172e:	a902      	add	r1, sp, #8
    1730:	440b      	add	r3, r1
    1732:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1736:	0163      	lsls	r3, r4, #5
    1738:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    173c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1740:	0163      	lsls	r3, r4, #5
    1742:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1746:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    174a:	4611      	mov	r1, r2
    174c:	4b05      	ldr	r3, [pc, #20]	; (1764 <_usb_d_dev_trans_stop+0x68>)
    174e:	4798      	blx	r3
}
    1750:	b003      	add	sp, #12
    1752:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1754:	0163      	lsls	r3, r4, #5
    1756:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    175a:	2540      	movs	r5, #64	; 0x40
    175c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1760:	e7e4      	b.n	172c <_usb_d_dev_trans_stop+0x30>
    1762:	bf00      	nop
    1764:	000016d1 	.word	0x000016d1

00001768 <_usb_d_dev_handle_trfail>:
{
    1768:	b530      	push	{r4, r5, lr}
    176a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    176c:	7c83      	ldrb	r3, [r0, #18]
    176e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1772:	2204      	movs	r2, #4
    1774:	f88d 2004 	strb.w	r2, [sp, #4]
    1778:	2208      	movs	r2, #8
    177a:	f88d 2005 	strb.w	r2, [sp, #5]
    177e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1780:	460c      	mov	r4, r1
    1782:	b391      	cbz	r1, 17ea <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1784:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1788:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    178c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1790:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1794:	4a32      	ldr	r2, [pc, #200]	; (1860 <_usb_d_dev_handle_trfail+0xf8>)
    1796:	440a      	add	r2, r1
    1798:	7a91      	ldrb	r1, [r2, #10]
    179a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    179c:	2d02      	cmp	r5, #2
    179e:	d02c      	beq.n	17fa <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    17a0:	f011 0f02 	tst.w	r1, #2
    17a4:	d045      	beq.n	1832 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    17a6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    17a8:	7a91      	ldrb	r1, [r2, #10]
    17aa:	f36f 0141 	bfc	r1, #1, #1
    17ae:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    17b0:	aa02      	add	r2, sp, #8
    17b2:	4422      	add	r2, r4
    17b4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17b8:	015a      	lsls	r2, r3, #5
    17ba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17be:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17c2:	015b      	lsls	r3, r3, #5
    17c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    17c8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    17cc:	f005 0307 	and.w	r3, r5, #7
    17d0:	2b01      	cmp	r3, #1
    17d2:	d143      	bne.n	185c <_usb_d_dev_handle_trfail+0xf4>
    17d4:	7cc3      	ldrb	r3, [r0, #19]
    17d6:	f013 0f40 	tst.w	r3, #64	; 0x40
    17da:	d03f      	beq.n	185c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    17dc:	09d9      	lsrs	r1, r3, #7
    17de:	428c      	cmp	r4, r1
    17e0:	d03c      	beq.n	185c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    17e2:	2200      	movs	r2, #0
    17e4:	4b1f      	ldr	r3, [pc, #124]	; (1864 <_usb_d_dev_handle_trfail+0xfc>)
    17e6:	4798      	blx	r3
    17e8:	e038      	b.n	185c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17ea:	0159      	lsls	r1, r3, #5
    17ec:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    17f0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    17f4:	f005 0507 	and.w	r5, r5, #7
    17f8:	e7ca      	b.n	1790 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    17fa:	f011 0f01 	tst.w	r1, #1
    17fe:	d0cf      	beq.n	17a0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1800:	7a91      	ldrb	r1, [r2, #10]
    1802:	f36f 0100 	bfc	r1, #0, #1
    1806:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1808:	aa02      	add	r2, sp, #8
    180a:	4422      	add	r2, r4
    180c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1810:	015a      	lsls	r2, r3, #5
    1812:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1816:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    181a:	015b      	lsls	r3, r3, #5
    181c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1820:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1824:	2204      	movs	r2, #4
    1826:	1c21      	adds	r1, r4, #0
    1828:	bf18      	it	ne
    182a:	2101      	movne	r1, #1
    182c:	4b0d      	ldr	r3, [pc, #52]	; (1864 <_usb_d_dev_handle_trfail+0xfc>)
    182e:	4798      	blx	r3
    1830:	e014      	b.n	185c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1832:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1836:	4a0a      	ldr	r2, [pc, #40]	; (1860 <_usb_d_dev_handle_trfail+0xf8>)
    1838:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    183c:	2100      	movs	r1, #0
    183e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1840:	aa02      	add	r2, sp, #8
    1842:	4414      	add	r4, r2
    1844:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1848:	015a      	lsls	r2, r3, #5
    184a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    184e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1852:	015b      	lsls	r3, r3, #5
    1854:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1858:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    185c:	b003      	add	sp, #12
    185e:	bd30      	pop	{r4, r5, pc}
    1860:	20000538 	.word	0x20000538
    1864:	000016fd 	.word	0x000016fd

00001868 <_usb_d_dev_reset_epts>:
{
    1868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    186c:	4d0c      	ldr	r5, [pc, #48]	; (18a0 <_usb_d_dev_reset_epts+0x38>)
    186e:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1872:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1876:	f04f 0803 	mov.w	r8, #3
    187a:	4f0a      	ldr	r7, [pc, #40]	; (18a4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    187c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    187e:	4641      	mov	r1, r8
    1880:	4620      	mov	r0, r4
    1882:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1884:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1886:	2300      	movs	r3, #0
    1888:	74e3      	strb	r3, [r4, #19]
    188a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    188c:	42ac      	cmp	r4, r5
    188e:	d1f6      	bne.n	187e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1890:	2260      	movs	r2, #96	; 0x60
    1892:	4619      	mov	r1, r3
    1894:	4802      	ldr	r0, [pc, #8]	; (18a0 <_usb_d_dev_reset_epts+0x38>)
    1896:	4b04      	ldr	r3, [pc, #16]	; (18a8 <_usb_d_dev_reset_epts+0x40>)
    1898:	4798      	blx	r3
    189a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    189e:	bf00      	nop
    18a0:	20000538 	.word	0x20000538
    18a4:	000016d1 	.word	0x000016d1
    18a8:	000035d1 	.word	0x000035d1

000018ac <_usb_d_dev_in_next>:
{
    18ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18b0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    18b2:	7c84      	ldrb	r4, [r0, #18]
    18b4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    18b8:	4688      	mov	r8, r1
    18ba:	2900      	cmp	r1, #0
    18bc:	f000 809f 	beq.w	19fe <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    18c0:	4b58      	ldr	r3, [pc, #352]	; (1a24 <_usb_d_dev_in_next+0x178>)
    18c2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    18c6:	6958      	ldr	r0, [r3, #20]
    18c8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    18cc:	8a2b      	ldrh	r3, [r5, #16]
    18ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
    18d2:	4293      	cmp	r3, r2
    18d4:	f000 808d 	beq.w	19f2 <_usb_d_dev_in_next+0x146>
    18d8:	3b01      	subs	r3, #1
    18da:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    18dc:	7cef      	ldrb	r7, [r5, #19]
    18de:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    18e2:	f1b8 0f00 	cmp.w	r8, #0
    18e6:	d005      	beq.n	18f4 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18e8:	0162      	lsls	r2, r4, #5
    18ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    18ee:	2302      	movs	r3, #2
    18f0:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    18f4:	68a9      	ldr	r1, [r5, #8]
    18f6:	eb0e 0301 	add.w	r3, lr, r1
    18fa:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    18fc:	686e      	ldr	r6, [r5, #4]
    18fe:	42b3      	cmp	r3, r6
    1900:	d23f      	bcs.n	1982 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1902:	1af6      	subs	r6, r6, r3
    1904:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1906:	7cea      	ldrb	r2, [r5, #19]
    1908:	f012 0f20 	tst.w	r2, #32
    190c:	d02d      	beq.n	196a <_usb_d_dev_in_next+0xbe>
    190e:	8a2a      	ldrh	r2, [r5, #16]
    1910:	4296      	cmp	r6, r2
    1912:	bf28      	it	cs
    1914:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1916:	6829      	ldr	r1, [r5, #0]
    1918:	4632      	mov	r2, r6
    191a:	4419      	add	r1, r3
    191c:	68e8      	ldr	r0, [r5, #12]
    191e:	4b42      	ldr	r3, [pc, #264]	; (1a28 <_usb_d_dev_in_next+0x17c>)
    1920:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1922:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1924:	4b3f      	ldr	r3, [pc, #252]	; (1a24 <_usb_d_dev_in_next+0x178>)
    1926:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    192a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    192c:	4b3d      	ldr	r3, [pc, #244]	; (1a24 <_usb_d_dev_in_next+0x178>)
    192e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1932:	695a      	ldr	r2, [r3, #20]
    1934:	f366 020d 	bfi	r2, r6, #0, #14
    1938:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    193a:	695a      	ldr	r2, [r3, #20]
    193c:	f36f 329b 	bfc	r2, #14, #14
    1940:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1942:	f1b8 0f00 	cmp.w	r8, #0
    1946:	d108      	bne.n	195a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1948:	2f01      	cmp	r7, #1
    194a:	bf0c      	ite	eq
    194c:	224e      	moveq	r2, #78	; 0x4e
    194e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1950:	0163      	lsls	r3, r4, #5
    1952:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1956:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    195a:	0164      	lsls	r4, r4, #5
    195c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1960:	2380      	movs	r3, #128	; 0x80
    1962:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    196a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    196e:	bf28      	it	cs
    1970:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1974:	6829      	ldr	r1, [r5, #0]
    1976:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1978:	4a2a      	ldr	r2, [pc, #168]	; (1a24 <_usb_d_dev_in_next+0x178>)
    197a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    197e:	6113      	str	r3, [r2, #16]
    1980:	e7d4      	b.n	192c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    1982:	7ceb      	ldrb	r3, [r5, #19]
    1984:	f013 0f10 	tst.w	r3, #16
    1988:	d00f      	beq.n	19aa <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    198a:	7ceb      	ldrb	r3, [r5, #19]
    198c:	f36f 1304 	bfc	r3, #4, #1
    1990:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1992:	4b24      	ldr	r3, [pc, #144]	; (1a24 <_usb_d_dev_in_next+0x178>)
    1994:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1998:	695a      	ldr	r2, [r3, #20]
    199a:	f36f 020d 	bfc	r2, #0, #14
    199e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    19a0:	695a      	ldr	r2, [r3, #20]
    19a2:	f36f 329b 	bfc	r2, #14, #14
    19a6:	615a      	str	r2, [r3, #20]
    19a8:	e7cb      	b.n	1942 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    19aa:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19ac:	ea4f 1444 	mov.w	r4, r4, lsl #5
    19b0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    19b4:	bf0c      	ite	eq
    19b6:	234b      	moveq	r3, #75	; 0x4b
    19b8:	234a      	movne	r3, #74	; 0x4a
    19ba:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    19be:	8a2a      	ldrh	r2, [r5, #16]
    19c0:	ea00 030e 	and.w	r3, r0, lr
    19c4:	429a      	cmp	r2, r3
    19c6:	d005      	beq.n	19d4 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    19c8:	2100      	movs	r1, #0
    19ca:	4628      	mov	r0, r5
    19cc:	4b17      	ldr	r3, [pc, #92]	; (1a2c <_usb_d_dev_in_next+0x180>)
    19ce:	4798      	blx	r3
	return;
    19d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    19d4:	7ceb      	ldrb	r3, [r5, #19]
    19d6:	f36f 1386 	bfc	r3, #6, #1
    19da:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    19dc:	4b11      	ldr	r3, [pc, #68]	; (1a24 <_usb_d_dev_in_next+0x178>)
    19de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    19e0:	68a9      	ldr	r1, [r5, #8]
    19e2:	7ca8      	ldrb	r0, [r5, #18]
    19e4:	4798      	blx	r3
    19e6:	b9d0      	cbnz	r0, 1a1e <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    19e8:	7ceb      	ldrb	r3, [r5, #19]
    19ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19ee:	74eb      	strb	r3, [r5, #19]
    19f0:	e7ea      	b.n	19c8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    19f2:	7cef      	ldrb	r7, [r5, #19]
    19f4:	f007 0707 	and.w	r7, r7, #7
    19f8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    19fc:	e774      	b.n	18e8 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    19fe:	8a03      	ldrh	r3, [r0, #16]
    1a00:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1a04:	4293      	cmp	r3, r2
    1a06:	d107      	bne.n	1a18 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a08:	7cef      	ldrb	r7, [r5, #19]
    1a0a:	f007 0707 	and.w	r7, r7, #7
    1a0e:	f04f 0e00 	mov.w	lr, #0
    1a12:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1a16:	e76d      	b.n	18f4 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1a18:	f04f 0e00 	mov.w	lr, #0
    1a1c:	e75c      	b.n	18d8 <_usb_d_dev_in_next+0x2c>
    1a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a22:	bf00      	nop
    1a24:	20000538 	.word	0x20000538
    1a28:	0000349d 	.word	0x0000349d
    1a2c:	000016d1 	.word	0x000016d1

00001a30 <_usb_d_dev_out_next>:
{
    1a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a34:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1a36:	7c85      	ldrb	r5, [r0, #18]
    1a38:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1a3c:	4689      	mov	r9, r1
    1a3e:	2900      	cmp	r1, #0
    1a40:	d056      	beq.n	1af0 <_usb_d_dev_out_next+0xc0>
    1a42:	4b74      	ldr	r3, [pc, #464]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1a44:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1a48:	685a      	ldr	r2, [r3, #4]
    1a4a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1a4e:	685f      	ldr	r7, [r3, #4]
    1a50:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1a54:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1a56:	8a06      	ldrh	r6, [r0, #16]
    1a58:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1a5c:	429e      	cmp	r6, r3
    1a5e:	f000 80ba 	beq.w	1bd6 <_usb_d_dev_out_next+0x1a6>
    1a62:	3e01      	subs	r6, #1
    1a64:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1a66:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1a6a:	f894 8013 	ldrb.w	r8, [r4, #19]
    1a6e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    1a72:	f1b9 0f00 	cmp.w	r9, #0
    1a76:	d005      	beq.n	1a84 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a78:	016b      	lsls	r3, r5, #5
    1a7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1a7e:	2201      	movs	r2, #1
    1a80:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1a84:	7ce3      	ldrb	r3, [r4, #19]
    1a86:	f013 0f20 	tst.w	r3, #32
    1a8a:	d00d      	beq.n	1aa8 <_usb_d_dev_out_next+0x78>
    1a8c:	6862      	ldr	r2, [r4, #4]
    1a8e:	2a00      	cmp	r2, #0
    1a90:	d037      	beq.n	1b02 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1a92:	68a0      	ldr	r0, [r4, #8]
    1a94:	1a12      	subs	r2, r2, r0
    1a96:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1a98:	6823      	ldr	r3, [r4, #0]
    1a9a:	42ba      	cmp	r2, r7
    1a9c:	bf28      	it	cs
    1a9e:	463a      	movcs	r2, r7
    1aa0:	68e1      	ldr	r1, [r4, #12]
    1aa2:	4418      	add	r0, r3
    1aa4:	4b5c      	ldr	r3, [pc, #368]	; (1c18 <_usb_d_dev_out_next+0x1e8>)
    1aa6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1aa8:	6863      	ldr	r3, [r4, #4]
    1aaa:	b353      	cbz	r3, 1b02 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1aac:	f1b9 0f00 	cmp.w	r9, #0
    1ab0:	d040      	beq.n	1b34 <_usb_d_dev_out_next+0x104>
    1ab2:	8a22      	ldrh	r2, [r4, #16]
    1ab4:	42ba      	cmp	r2, r7
    1ab6:	d93d      	bls.n	1b34 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1ab8:	7ce3      	ldrb	r3, [r4, #19]
    1aba:	f36f 1304 	bfc	r3, #4, #1
    1abe:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1ac0:	68a3      	ldr	r3, [r4, #8]
    1ac2:	445b      	add	r3, fp
    1ac4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1ac6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1aca:	ea4f 1345 	mov.w	r3, r5, lsl #5
    1ace:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ad2:	bf0c      	ite	eq
    1ad4:	222d      	moveq	r2, #45	; 0x2d
    1ad6:	2225      	movne	r2, #37	; 0x25
    1ad8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1adc:	b915      	cbnz	r5, 1ae4 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1ade:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1ae0:	4b4c      	ldr	r3, [pc, #304]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1ae2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1ae4:	2100      	movs	r1, #0
    1ae6:	4620      	mov	r0, r4
    1ae8:	4b4c      	ldr	r3, [pc, #304]	; (1c1c <_usb_d_dev_out_next+0x1ec>)
    1aea:	4798      	blx	r3
	return;
    1aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1af0:	8a06      	ldrh	r6, [r0, #16]
    1af2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1af6:	429e      	cmp	r6, r3
    1af8:	d07b      	beq.n	1bf2 <_usb_d_dev_out_next+0x1c2>
    1afa:	f04f 0b00 	mov.w	fp, #0
    1afe:	46da      	mov	sl, fp
    1b00:	e7af      	b.n	1a62 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1b02:	7ce3      	ldrb	r3, [r4, #19]
    1b04:	f013 0f10 	tst.w	r3, #16
    1b08:	d06c      	beq.n	1be4 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1b0a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1b0c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1b10:	f043 0320 	orr.w	r3, r3, #32
    1b14:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b16:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1b18:	493e      	ldr	r1, [pc, #248]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1b1a:	016a      	lsls	r2, r5, #5
    1b1c:	188b      	adds	r3, r1, r2
    1b1e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b20:	8a21      	ldrh	r1, [r4, #16]
    1b22:	685a      	ldr	r2, [r3, #4]
    1b24:	f361 329b 	bfi	r2, r1, #14, #14
    1b28:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b2a:	685a      	ldr	r2, [r3, #4]
    1b2c:	f36f 020d 	bfc	r2, #0, #14
    1b30:	605a      	str	r2, [r3, #4]
    1b32:	e01d      	b.n	1b70 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    1b34:	68a2      	ldr	r2, [r4, #8]
    1b36:	4452      	add	r2, sl
    1b38:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1b3a:	4293      	cmp	r3, r2
    1b3c:	d9c3      	bls.n	1ac6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    1b3e:	1a9b      	subs	r3, r3, r2
    1b40:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1b42:	7ce1      	ldrb	r1, [r4, #19]
    1b44:	f011 0f20 	tst.w	r1, #32
    1b48:	d026      	beq.n	1b98 <_usb_d_dev_out_next+0x168>
    1b4a:	8a22      	ldrh	r2, [r4, #16]
    1b4c:	4293      	cmp	r3, r2
    1b4e:	bf28      	it	cs
    1b50:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b52:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1b54:	016a      	lsls	r2, r5, #5
    1b56:	492f      	ldr	r1, [pc, #188]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1b58:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b5a:	4a2e      	ldr	r2, [pc, #184]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1b5c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    1b60:	6851      	ldr	r1, [r2, #4]
    1b62:	f363 319b 	bfi	r1, r3, #14, #14
    1b66:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b68:	6853      	ldr	r3, [r2, #4]
    1b6a:	f36f 030d 	bfc	r3, #0, #14
    1b6e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    1b70:	f1b9 0f00 	cmp.w	r9, #0
    1b74:	d108      	bne.n	1b88 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    1b76:	f1b8 0f01 	cmp.w	r8, #1
    1b7a:	d025      	beq.n	1bc8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    1b7c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b7e:	016b      	lsls	r3, r5, #5
    1b80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b84:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b88:	016d      	lsls	r5, r5, #5
    1b8a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    1b8e:	2340      	movs	r3, #64	; 0x40
    1b90:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    1b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    1b98:	8a21      	ldrh	r1, [r4, #16]
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d90a      	bls.n	1bb4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    1ba2:	d80e      	bhi.n	1bc2 <_usb_d_dev_out_next+0x192>
    1ba4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1ba8:	6821      	ldr	r1, [r4, #0]
    1baa:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    1bac:	0169      	lsls	r1, r5, #5
    1bae:	4819      	ldr	r0, [pc, #100]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1bb0:	5042      	str	r2, [r0, r1]
    1bb2:	e7d2      	b.n	1b5a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    1bb4:	428b      	cmp	r3, r1
    1bb6:	d2f7      	bcs.n	1ba8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    1bb8:	7ce1      	ldrb	r1, [r4, #19]
    1bba:	f041 0120 	orr.w	r1, r1, #32
    1bbe:	74e1      	strb	r1, [r4, #19]
    1bc0:	e7f2      	b.n	1ba8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    1bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1bc6:	e7ef      	b.n	1ba8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    1bc8:	4b12      	ldr	r3, [pc, #72]	; (1c14 <_usb_d_dev_out_next+0x1e4>)
    1bca:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1bce:	2200      	movs	r2, #0
    1bd0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1bd2:	222d      	movs	r2, #45	; 0x2d
    1bd4:	e7d3      	b.n	1b7e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    1bd6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bda:	f890 8013 	ldrb.w	r8, [r0, #19]
    1bde:	f008 0807 	and.w	r8, r8, #7
    1be2:	e749      	b.n	1a78 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    1be4:	f1b9 0f00 	cmp.w	r9, #0
    1be8:	d10b      	bne.n	1c02 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    1bea:	68a3      	ldr	r3, [r4, #8]
    1bec:	4453      	add	r3, sl
    1bee:	60a3      	str	r3, [r4, #8]
    1bf0:	e769      	b.n	1ac6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bf2:	f890 8013 	ldrb.w	r8, [r0, #19]
    1bf6:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    1bfa:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bfc:	46bb      	mov	fp, r7
    1bfe:	46ba      	mov	sl, r7
    1c00:	e740      	b.n	1a84 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    1c02:	8a23      	ldrh	r3, [r4, #16]
    1c04:	42bb      	cmp	r3, r7
    1c06:	f63f af57 	bhi.w	1ab8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    1c0a:	68a3      	ldr	r3, [r4, #8]
    1c0c:	4453      	add	r3, sl
    1c0e:	60a3      	str	r3, [r4, #8]
    1c10:	e759      	b.n	1ac6 <_usb_d_dev_out_next+0x96>
    1c12:	bf00      	nop
    1c14:	20000538 	.word	0x20000538
    1c18:	0000349d 	.word	0x0000349d
    1c1c:	000016d1 	.word	0x000016d1

00001c20 <_usb_d_dev_handler>:
{
    1c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1c24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c28:	8c1e      	ldrh	r6, [r3, #32]
    1c2a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1c2c:	b146      	cbz	r6, 1c40 <_usb_d_dev_handler+0x20>
    1c2e:	4d91      	ldr	r5, [pc, #580]	; (1e74 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    1c30:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1c32:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    1c36:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1e90 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    1c3a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 1e94 <_usb_d_dev_handler+0x274>
    1c3e:	e0d3      	b.n	1de8 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1c40:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1c42:	8b1b      	ldrh	r3, [r3, #24]
    1c44:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1c46:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1c48:	f013 0f04 	tst.w	r3, #4
    1c4c:	d11d      	bne.n	1c8a <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1c4e:	f413 7f00 	tst.w	r3, #512	; 0x200
    1c52:	d123      	bne.n	1c9c <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1c54:	f013 0f80 	tst.w	r3, #128	; 0x80
    1c58:	d147      	bne.n	1cea <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1c5a:	f013 0f70 	tst.w	r3, #112	; 0x70
    1c5e:	d14f      	bne.n	1d00 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1c60:	f013 0f08 	tst.w	r3, #8
    1c64:	d16e      	bne.n	1d44 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1c66:	f013 0f01 	tst.w	r3, #1
    1c6a:	d0e0      	beq.n	1c2e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c70:	f240 2201 	movw	r2, #513	; 0x201
    1c74:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c76:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c78:	2270      	movs	r2, #112	; 0x70
    1c7a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1c7c:	4b7e      	ldr	r3, [pc, #504]	; (1e78 <_usb_d_dev_handler+0x258>)
    1c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c80:	2100      	movs	r1, #0
    1c82:	2004      	movs	r0, #4
    1c84:	4798      	blx	r3
    1c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c8a:	2204      	movs	r2, #4
    1c8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c90:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1c92:	4b79      	ldr	r3, [pc, #484]	; (1e78 <_usb_d_dev_handler+0x258>)
    1c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1c96:	4798      	blx	r3
    1c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ca0:	f240 2201 	movw	r2, #513	; 0x201
    1ca4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1ca6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ca8:	2270      	movs	r2, #112	; 0x70
    1caa:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1cac:	4b72      	ldr	r3, [pc, #456]	; (1e78 <_usb_d_dev_handler+0x258>)
    1cae:	891b      	ldrh	r3, [r3, #8]
    1cb0:	f003 030f 	and.w	r3, r3, #15
    1cb4:	2b03      	cmp	r3, #3
    1cb6:	d00e      	beq.n	1cd6 <_usb_d_dev_handler+0xb6>
    1cb8:	4b6f      	ldr	r3, [pc, #444]	; (1e78 <_usb_d_dev_handler+0x258>)
    1cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1cbc:	f003 030f 	and.w	r3, r3, #15
    1cc0:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1cc2:	bf08      	it	eq
    1cc4:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1cc6:	d007      	beq.n	1cd8 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    1cc8:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1cca:	4b6b      	ldr	r3, [pc, #428]	; (1e78 <_usb_d_dev_handler+0x258>)
    1ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1cce:	2003      	movs	r0, #3
    1cd0:	4798      	blx	r3
    1cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1cd6:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1cd8:	4b67      	ldr	r3, [pc, #412]	; (1e78 <_usb_d_dev_handler+0x258>)
    1cda:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1cde:	8919      	ldrh	r1, [r3, #8]
    1ce0:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    1ce4:	2200      	movs	r2, #0
    1ce6:	811a      	strh	r2, [r3, #8]
    1ce8:	e7ef      	b.n	1cca <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1cea:	2280      	movs	r2, #128	; 0x80
    1cec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cf0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1cf2:	4b61      	ldr	r3, [pc, #388]	; (1e78 <_usb_d_dev_handler+0x258>)
    1cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1cf6:	2100      	movs	r1, #0
    1cf8:	2005      	movs	r0, #5
    1cfa:	4798      	blx	r3
    1cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d00:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d04:	2270      	movs	r2, #112	; 0x70
    1d06:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d08:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d0a:	f240 2201 	movw	r2, #513	; 0x201
    1d0e:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1d10:	4b5a      	ldr	r3, [pc, #360]	; (1e7c <_usb_d_dev_handler+0x25c>)
    1d12:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    1d16:	f013 0f01 	tst.w	r3, #1
    1d1a:	d00d      	beq.n	1d38 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d1c:	4a57      	ldr	r2, [pc, #348]	; (1e7c <_usb_d_dev_handler+0x25c>)
    1d1e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d20:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1d24:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d28:	d1f9      	bne.n	1d1e <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1d2a:	4b53      	ldr	r3, [pc, #332]	; (1e78 <_usb_d_dev_handler+0x258>)
    1d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d2e:	2100      	movs	r1, #0
    1d30:	2002      	movs	r0, #2
    1d32:	4798      	blx	r3
    1d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d38:	4a50      	ldr	r2, [pc, #320]	; (1e7c <_usb_d_dev_handler+0x25c>)
    1d3a:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1d3c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d40:	d0fb      	beq.n	1d3a <_usb_d_dev_handler+0x11a>
    1d42:	e7f2      	b.n	1d2a <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1d44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d48:	2400      	movs	r4, #0
    1d4a:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1d4e:	2208      	movs	r2, #8
    1d50:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d52:	2270      	movs	r2, #112	; 0x70
    1d54:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d56:	f240 2201 	movw	r2, #513	; 0x201
    1d5a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1d5c:	4b48      	ldr	r3, [pc, #288]	; (1e80 <_usb_d_dev_handler+0x260>)
    1d5e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1d60:	4b45      	ldr	r3, [pc, #276]	; (1e78 <_usb_d_dev_handler+0x258>)
    1d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d64:	4621      	mov	r1, r4
    1d66:	2001      	movs	r0, #1
    1d68:	4798      	blx	r3
    1d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d6e:	f011 0f10 	tst.w	r1, #16
    1d72:	d109      	bne.n	1d88 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1d74:	f011 0f40 	tst.w	r1, #64	; 0x40
    1d78:	d108      	bne.n	1d8c <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1d7a:	f011 0f20 	tst.w	r1, #32
    1d7e:	d02f      	beq.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1d80:	2100      	movs	r1, #0
    1d82:	4b40      	ldr	r3, [pc, #256]	; (1e84 <_usb_d_dev_handler+0x264>)
    1d84:	4798      	blx	r3
    1d86:	e02b      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    1d88:	47c8      	blx	r9
    1d8a:	e029      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1d8c:	2101      	movs	r1, #1
    1d8e:	4b3d      	ldr	r3, [pc, #244]	; (1e84 <_usb_d_dev_handler+0x264>)
    1d90:	4798      	blx	r3
    1d92:	e025      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1d94:	f011 0f40 	tst.w	r1, #64	; 0x40
    1d98:	d111      	bne.n	1dbe <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1d9a:	f011 0f08 	tst.w	r1, #8
    1d9e:	d112      	bne.n	1dc6 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1da0:	f011 0f02 	tst.w	r1, #2
    1da4:	d112      	bne.n	1dcc <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1da6:	f003 0307 	and.w	r3, r3, #7
    1daa:	2b01      	cmp	r3, #1
    1dac:	d118      	bne.n	1de0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1dae:	f011 0f04 	tst.w	r1, #4
    1db2:	d10f      	bne.n	1dd4 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1db4:	f011 0f10 	tst.w	r1, #16
    1db8:	d012      	beq.n	1de0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1dba:	47c8      	blx	r9
    1dbc:	e010      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1dbe:	2101      	movs	r1, #1
    1dc0:	4b30      	ldr	r3, [pc, #192]	; (1e84 <_usb_d_dev_handler+0x264>)
    1dc2:	4798      	blx	r3
    1dc4:	e00c      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    1dc6:	2101      	movs	r1, #1
    1dc8:	47c0      	blx	r8
    1dca:	e009      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    1dcc:	2101      	movs	r1, #1
    1dce:	4b2e      	ldr	r3, [pc, #184]	; (1e88 <_usb_d_dev_handler+0x268>)
    1dd0:	4798      	blx	r3
    1dd2:	e005      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    1dd4:	2100      	movs	r1, #0
    1dd6:	47c0      	blx	r8
    1dd8:	e002      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1dda:	2100      	movs	r1, #0
    1ddc:	4b29      	ldr	r3, [pc, #164]	; (1e84 <_usb_d_dev_handler+0x264>)
    1dde:	4798      	blx	r3
    1de0:	3401      	adds	r4, #1
    1de2:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1de4:	2c09      	cmp	r4, #9
    1de6:	d042      	beq.n	1e6e <_usb_d_dev_handler+0x24e>
    1de8:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1dea:	7cab      	ldrb	r3, [r5, #18]
    1dec:	2bff      	cmp	r3, #255	; 0xff
    1dee:	d0f7      	beq.n	1de0 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1df0:	f003 030f 	and.w	r3, r3, #15
    1df4:	2101      	movs	r1, #1
    1df6:	4099      	lsls	r1, r3
    1df8:	4231      	tst	r1, r6
    1dfa:	d0f1      	beq.n	1de0 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1dfc:	0159      	lsls	r1, r3, #5
    1dfe:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1e02:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1e06:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1e08:	015b      	lsls	r3, r3, #5
    1e0a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e0e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1e12:	4019      	ands	r1, r3
    1e14:	d0e4      	beq.n	1de0 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1e16:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1e1a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1e1e:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    1e22:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1e26:	2a01      	cmp	r2, #1
    1e28:	d0a1      	beq.n	1d6e <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1e2a:	f013 0f80 	tst.w	r3, #128	; 0x80
    1e2e:	d1b1      	bne.n	1d94 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1e30:	f011 0f20 	tst.w	r1, #32
    1e34:	d1d1      	bne.n	1dda <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1e36:	f011 0f04 	tst.w	r1, #4
    1e3a:	d10e      	bne.n	1e5a <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1e3c:	f011 0f01 	tst.w	r1, #1
    1e40:	d10e      	bne.n	1e60 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1e42:	f003 0307 	and.w	r3, r3, #7
    1e46:	2b01      	cmp	r3, #1
    1e48:	d1ca      	bne.n	1de0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1e4a:	f011 0f08 	tst.w	r1, #8
    1e4e:	d10b      	bne.n	1e68 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1e50:	f011 0f10 	tst.w	r1, #16
    1e54:	d0c4      	beq.n	1de0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1e56:	47c8      	blx	r9
    1e58:	e7c2      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    1e5a:	2100      	movs	r1, #0
    1e5c:	47c0      	blx	r8
    1e5e:	e7bf      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    1e60:	2101      	movs	r1, #1
    1e62:	4b0a      	ldr	r3, [pc, #40]	; (1e8c <_usb_d_dev_handler+0x26c>)
    1e64:	4798      	blx	r3
    1e66:	e7bb      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    1e68:	2101      	movs	r1, #1
    1e6a:	47c0      	blx	r8
    1e6c:	e7b8      	b.n	1de0 <_usb_d_dev_handler+0x1c0>
    1e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e72:	bf00      	nop
    1e74:	200005ac 	.word	0x200005ac
    1e78:	20000538 	.word	0x20000538
    1e7c:	40001000 	.word	0x40001000
    1e80:	00001869 	.word	0x00001869
    1e84:	000016a5 	.word	0x000016a5
    1e88:	000018ad 	.word	0x000018ad
    1e8c:	00001a31 	.word	0x00001a31
    1e90:	00001629 	.word	0x00001629
    1e94:	00001769 	.word	0x00001769

00001e98 <_usb_d_dev_init>:
{
    1e98:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1e9a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1e9e:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1ea0:	f013 0f01 	tst.w	r3, #1
    1ea4:	d124      	bne.n	1ef0 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ea6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1eaa:	7893      	ldrb	r3, [r2, #2]
    1eac:	f013 0f03 	tst.w	r3, #3
    1eb0:	d1fb      	bne.n	1eaa <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1eb2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1eb6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1eb8:	f013 0f02 	tst.w	r3, #2
    1ebc:	d00f      	beq.n	1ede <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1ebe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ec2:	7813      	ldrb	r3, [r2, #0]
    1ec4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1ec8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1eca:	7893      	ldrb	r3, [r2, #2]
    1ecc:	f013 0f03 	tst.w	r3, #3
    1ed0:	d1fb      	bne.n	1eca <_usb_d_dev_init+0x32>
    1ed2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ed6:	7893      	ldrb	r3, [r2, #2]
    1ed8:	f013 0f02 	tst.w	r3, #2
    1edc:	d1fb      	bne.n	1ed6 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1ede:	2201      	movs	r2, #1
    1ee0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ee4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ee6:	461a      	mov	r2, r3
    1ee8:	7893      	ldrb	r3, [r2, #2]
    1eea:	f013 0f03 	tst.w	r3, #3
    1eee:	d1fb      	bne.n	1ee8 <_usb_d_dev_init+0x50>
    1ef0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ef4:	7893      	ldrb	r3, [r2, #2]
    1ef6:	f013 0f01 	tst.w	r3, #1
    1efa:	d1fb      	bne.n	1ef4 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1efc:	4b21      	ldr	r3, [pc, #132]	; (1f84 <_usb_d_dev_init+0xec>)
    1efe:	4a22      	ldr	r2, [pc, #136]	; (1f88 <_usb_d_dev_init+0xf0>)
    1f00:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1f02:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1f04:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1f06:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1f08:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1f0a:	4b20      	ldr	r3, [pc, #128]	; (1f8c <_usb_d_dev_init+0xf4>)
    1f0c:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1f0e:	4b20      	ldr	r3, [pc, #128]	; (1f90 <_usb_d_dev_init+0xf8>)
    1f10:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1f12:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1f16:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1f1a:	f011 011f 	ands.w	r1, r1, #31
    1f1e:	d02b      	beq.n	1f78 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1f20:	291f      	cmp	r1, #31
    1f22:	bf08      	it	eq
    1f24:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1f26:	b34b      	cbz	r3, 1f7c <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1f28:	2b1f      	cmp	r3, #31
    1f2a:	bf08      	it	eq
    1f2c:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1f2e:	b33a      	cbz	r2, 1f80 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1f30:	2a07      	cmp	r2, #7
    1f32:	bf08      	it	eq
    1f34:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1f36:	f003 031f 	and.w	r3, r3, #31
    1f3a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1f3e:	0312      	lsls	r2, r2, #12
    1f40:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    1f44:	4313      	orrs	r3, r2
    1f46:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1f4a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1f4c:	78d3      	ldrb	r3, [r2, #3]
    1f4e:	f043 0303 	orr.w	r3, r3, #3
    1f52:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1f54:	78d3      	ldrb	r3, [r2, #3]
    1f56:	f043 030c 	orr.w	r3, r3, #12
    1f5a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1f5c:	2304      	movs	r3, #4
    1f5e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1f60:	7893      	ldrb	r3, [r2, #2]
    1f62:	f013 0f03 	tst.w	r3, #3
    1f66:	d1fb      	bne.n	1f60 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1f68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1f6c:	4a05      	ldr	r2, [pc, #20]	; (1f84 <_usb_d_dev_init+0xec>)
    1f6e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1f70:	2201      	movs	r2, #1
    1f72:	811a      	strh	r2, [r3, #8]
}
    1f74:	2000      	movs	r0, #0
    1f76:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    1f78:	2109      	movs	r1, #9
    1f7a:	e7d4      	b.n	1f26 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    1f7c:	2319      	movs	r3, #25
    1f7e:	e7d6      	b.n	1f2e <_usb_d_dev_init+0x96>
		pad_trim = 6;
    1f80:	2206      	movs	r2, #6
    1f82:	e7d8      	b.n	1f36 <_usb_d_dev_init+0x9e>
    1f84:	20000538 	.word	0x20000538
    1f88:	00001625 	.word	0x00001625
    1f8c:	00001869 	.word	0x00001869
    1f90:	00800084 	.word	0x00800084

00001f94 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1f94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1f98:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1f9a:	f013 0f03 	tst.w	r3, #3
    1f9e:	d129      	bne.n	1ff4 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fa0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1fa4:	7893      	ldrb	r3, [r2, #2]
    1fa6:	f013 0f03 	tst.w	r3, #3
    1faa:	d1fb      	bne.n	1fa4 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1fac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1fb4:	f013 0f02 	tst.w	r3, #2
    1fb8:	d108      	bne.n	1fcc <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1fba:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1fbe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1fc2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fc4:	7893      	ldrb	r3, [r2, #2]
    1fc6:	f013 0f03 	tst.w	r3, #3
    1fca:	d1fb      	bne.n	1fc4 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fcc:	4b0b      	ldr	r3, [pc, #44]	; (1ffc <_usb_d_dev_enable+0x68>)
    1fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1fd2:	609a      	str	r2, [r3, #8]
    1fd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1fd8:	609a      	str	r2, [r3, #8]
    1fda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1fde:	609a      	str	r2, [r3, #8]
    1fe0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1fe4:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1fe6:	f240 228d 	movw	r2, #653	; 0x28d
    1fea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1fee:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1ff0:	2000      	movs	r0, #0
    1ff2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1ff4:	f06f 0010 	mvn.w	r0, #16
}
    1ff8:	4770      	bx	lr
    1ffa:	bf00      	nop
    1ffc:	e000e100 	.word	0xe000e100

00002000 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2000:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2004:	8913      	ldrh	r3, [r2, #8]
    2006:	f023 0301 	bic.w	r3, r3, #1
    200a:	041b      	lsls	r3, r3, #16
    200c:	0c1b      	lsrs	r3, r3, #16
    200e:	8113      	strh	r3, [r2, #8]
    2010:	4770      	bx	lr

00002012 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2012:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2016:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    201a:	7298      	strb	r0, [r3, #10]
    201c:	4770      	bx	lr
	...

00002020 <_usb_d_dev_ep_init>:
{
    2020:	b5f0      	push	{r4, r5, r6, r7, lr}
    2022:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2026:	f010 050f 	ands.w	r5, r0, #15
    202a:	d04d      	beq.n	20c8 <_usb_d_dev_ep_init+0xa8>
    202c:	f1be 0f00 	cmp.w	lr, #0
    2030:	bfb4      	ite	lt
    2032:	1cac      	addlt	r4, r5, #2
    2034:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2036:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    203a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    203c:	2d02      	cmp	r5, #2
    203e:	d947      	bls.n	20d0 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    2040:	f06f 0011 	mvn.w	r0, #17
    2044:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2046:	f1be 0f00 	cmp.w	lr, #0
    204a:	db1b      	blt.n	2084 <_usb_d_dev_ep_init+0x64>
    204c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2050:	4e37      	ldr	r6, [pc, #220]	; (2130 <_usb_d_dev_ep_init+0x110>)
    2052:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2056:	2d00      	cmp	r5, #0
    2058:	d15e      	bne.n	2118 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    205a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    205e:	4d34      	ldr	r5, [pc, #208]	; (2130 <_usb_d_dev_ep_init+0x110>)
    2060:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    2064:	4d33      	ldr	r5, [pc, #204]	; (2134 <_usb_d_dev_ep_init+0x114>)
    2066:	00a6      	lsls	r6, r4, #2
    2068:	1933      	adds	r3, r6, r4
    206a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    206e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    2072:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    2076:	3101      	adds	r1, #1
    2078:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    207c:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    2080:	2000      	movs	r0, #0
    2082:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2084:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2088:	4e29      	ldr	r6, [pc, #164]	; (2130 <_usb_d_dev_ep_init+0x110>)
    208a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    208e:	686d      	ldr	r5, [r5, #4]
    2090:	b935      	cbnz	r5, 20a0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2096:	4d26      	ldr	r5, [pc, #152]	; (2130 <_usb_d_dev_ep_init+0x110>)
    2098:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    209c:	685f      	ldr	r7, [r3, #4]
    209e:	e7e1      	b.n	2064 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    20a0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    20a4:	4e22      	ldr	r6, [pc, #136]	; (2130 <_usb_d_dev_ep_init+0x110>)
    20a6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    20aa:	896d      	ldrh	r5, [r5, #10]
    20ac:	4295      	cmp	r5, r2
    20ae:	daf0      	bge.n	2092 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    20b0:	f06f 0012 	mvn.w	r0, #18
    20b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    20b6:	f06f 0013 	mvn.w	r0, #19
    20ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    20bc:	f06f 0013 	mvn.w	r0, #19
    20c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    20c2:	f06f 0012 	mvn.w	r0, #18
    20c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    20c8:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    20cc:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    20ce:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    20d0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    20d4:	4f17      	ldr	r7, [pc, #92]	; (2134 <_usb_d_dev_ep_init+0x114>)
    20d6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    20da:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    20de:	2eff      	cmp	r6, #255	; 0xff
    20e0:	d1e9      	bne.n	20b6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    20e2:	2900      	cmp	r1, #0
    20e4:	d1af      	bne.n	2046 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    20e6:	b125      	cbz	r5, 20f2 <_usb_d_dev_ep_init+0xd2>
    20e8:	f1be 0f00 	cmp.w	lr, #0
    20ec:	bfa4      	itt	ge
    20ee:	3502      	addge	r5, #2
    20f0:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    20f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    20f6:	4e0f      	ldr	r6, [pc, #60]	; (2134 <_usb_d_dev_ep_init+0x114>)
    20f8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    20fc:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    2100:	2dff      	cmp	r5, #255	; 0xff
    2102:	d1db      	bne.n	20bc <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    2104:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2108:	4e09      	ldr	r6, [pc, #36]	; (2130 <_usb_d_dev_ep_init+0x110>)
    210a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    210e:	2d00      	cmp	r5, #0
    2110:	d0d7      	beq.n	20c2 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2112:	f1be 0f00 	cmp.w	lr, #0
    2116:	dbb5      	blt.n	2084 <_usb_d_dev_ep_init+0x64>
    2118:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    211c:	4e04      	ldr	r6, [pc, #16]	; (2130 <_usb_d_dev_ep_init+0x110>)
    211e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2122:	892d      	ldrh	r5, [r5, #8]
    2124:	4295      	cmp	r5, r2
    2126:	da98      	bge.n	205a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    2128:	f06f 0012 	mvn.w	r0, #18
    212c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    212e:	bf00      	nop
    2130:	00003868 	.word	0x00003868
    2134:	20000538 	.word	0x20000538

00002138 <_usb_d_dev_ep_deinit>:
{
    2138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    213a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    213c:	f010 060f 	ands.w	r6, r0, #15
    2140:	d00e      	beq.n	2160 <_usb_d_dev_ep_deinit+0x28>
    2142:	2f00      	cmp	r7, #0
    2144:	bfb4      	ite	lt
    2146:	1cb3      	addlt	r3, r6, #2
    2148:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    214a:	2e02      	cmp	r6, #2
    214c:	d900      	bls.n	2150 <_usb_d_dev_ep_deinit+0x18>
    214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    2150:	461d      	mov	r5, r3
    2152:	3301      	adds	r3, #1
    2154:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2158:	4a24      	ldr	r2, [pc, #144]	; (21ec <_usb_d_dev_ep_deinit+0xb4>)
    215a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    215e:	e002      	b.n	2166 <_usb_d_dev_ep_deinit+0x2e>
    2160:	f8df e094 	ldr.w	lr, [pc, #148]	; 21f8 <_usb_d_dev_ep_deinit+0xc0>
    2164:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2166:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    216a:	4a21      	ldr	r2, [pc, #132]	; (21f0 <_usb_d_dev_ep_deinit+0xb8>)
    216c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2170:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    2174:	2aff      	cmp	r2, #255	; 0xff
    2176:	d0ea      	beq.n	214e <_usb_d_dev_ep_deinit+0x16>
    2178:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    217a:	2203      	movs	r2, #3
    217c:	0ff9      	lsrs	r1, r7, #31
    217e:	4670      	mov	r0, lr
    2180:	4b1c      	ldr	r3, [pc, #112]	; (21f4 <_usb_d_dev_ep_deinit+0xbc>)
    2182:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2184:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2188:	4a19      	ldr	r2, [pc, #100]	; (21f0 <_usb_d_dev_ep_deinit+0xb8>)
    218a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    218e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2192:	f003 0307 	and.w	r3, r3, #7
    2196:	2b01      	cmp	r3, #1
    2198:	d016      	beq.n	21c8 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    219a:	2f00      	cmp	r7, #0
    219c:	db1b      	blt.n	21d6 <_usb_d_dev_ep_deinit+0x9e>
    219e:	0160      	lsls	r0, r4, #5
    21a0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    21a4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    21a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    21ac:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    21b0:	4b0f      	ldr	r3, [pc, #60]	; (21f0 <_usb_d_dev_ep_deinit+0xb8>)
    21b2:	00aa      	lsls	r2, r5, #2
    21b4:	1951      	adds	r1, r2, r5
    21b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    21ba:	2000      	movs	r0, #0
    21bc:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    21c0:	22ff      	movs	r2, #255	; 0xff
    21c2:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    21c6:	e7c2      	b.n	214e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    21c8:	0160      	lsls	r0, r4, #5
    21ca:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    21ce:	2300      	movs	r3, #0
    21d0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    21d4:	e7ec      	b.n	21b0 <_usb_d_dev_ep_deinit+0x78>
    21d6:	0176      	lsls	r6, r6, #5
    21d8:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    21dc:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    21e0:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    21e4:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    21e8:	e7e2      	b.n	21b0 <_usb_d_dev_ep_deinit+0x78>
    21ea:	bf00      	nop
    21ec:	20000598 	.word	0x20000598
    21f0:	20000538 	.word	0x20000538
    21f4:	000016fd 	.word	0x000016fd
    21f8:	200005ac 	.word	0x200005ac

000021fc <_usb_d_dev_ep_enable>:
{
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fe:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2200:	f010 000f 	ands.w	r0, r0, #15
    2204:	f000 80a6 	beq.w	2354 <_usb_d_dev_ep_enable+0x158>
    2208:	2f00      	cmp	r7, #0
    220a:	bfb4      	ite	lt
    220c:	1c83      	addlt	r3, r0, #2
    220e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2210:	4606      	mov	r6, r0
    2212:	0142      	lsls	r2, r0, #5
    2214:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2218:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    221c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    221e:	2802      	cmp	r0, #2
    2220:	f240 809f 	bls.w	2362 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    2224:	f06f 0011 	mvn.w	r0, #17
    2228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    222a:	f014 0f77 	tst.w	r4, #119	; 0x77
    222e:	f040 8088 	bne.w	2342 <_usb_d_dev_ep_enable+0x146>
    2232:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2236:	2111      	movs	r1, #17
    2238:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    223c:	4c97      	ldr	r4, [pc, #604]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    223e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    2242:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    2246:	4996      	ldr	r1, [pc, #600]	; (24a0 <_usb_d_dev_ep_enable+0x2a4>)
    2248:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    224c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2250:	f200 80cc 	bhi.w	23ec <_usb_d_dev_ep_enable+0x1f0>
    2254:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2258:	f200 810a 	bhi.w	2470 <_usb_d_dev_ep_enable+0x274>
    225c:	2c80      	cmp	r4, #128	; 0x80
    225e:	f200 80f9 	bhi.w	2454 <_usb_d_dev_ep_enable+0x258>
    2262:	2c40      	cmp	r4, #64	; 0x40
    2264:	f200 810b 	bhi.w	247e <_usb_d_dev_ep_enable+0x282>
    2268:	2c20      	cmp	r4, #32
    226a:	f200 80fa 	bhi.w	2462 <_usb_d_dev_ep_enable+0x266>
    226e:	2c10      	cmp	r4, #16
    2270:	f200 810c 	bhi.w	248c <_usb_d_dev_ep_enable+0x290>
    2274:	2c08      	cmp	r4, #8
    2276:	bf94      	ite	ls
    2278:	2700      	movls	r7, #0
    227a:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    227c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2280:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2282:	f3c4 010d 	ubfx	r1, r4, #0, #14
    2286:	e0b7      	b.n	23f8 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2288:	f014 0f70 	tst.w	r4, #112	; 0x70
    228c:	d15c      	bne.n	2348 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    228e:	4d83      	ldr	r5, [pc, #524]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    2290:	009f      	lsls	r7, r3, #2
    2292:	18f9      	adds	r1, r7, r3
    2294:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2298:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    229c:	0109      	lsls	r1, r1, #4
    229e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    22a2:	430c      	orrs	r4, r1
    22a4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    22a8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22ac:	443b      	add	r3, r7
    22ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    22b2:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    22b6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    22be:	d80f      	bhi.n	22e0 <_usb_d_dev_ep_enable+0xe4>
    22c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    22c4:	d819      	bhi.n	22fa <_usb_d_dev_ep_enable+0xfe>
    22c6:	2b80      	cmp	r3, #128	; 0x80
    22c8:	d819      	bhi.n	22fe <_usb_d_dev_ep_enable+0x102>
    22ca:	2b40      	cmp	r3, #64	; 0x40
    22cc:	d819      	bhi.n	2302 <_usb_d_dev_ep_enable+0x106>
    22ce:	2b20      	cmp	r3, #32
    22d0:	d819      	bhi.n	2306 <_usb_d_dev_ep_enable+0x10a>
    22d2:	2b10      	cmp	r3, #16
    22d4:	d819      	bhi.n	230a <_usb_d_dev_ep_enable+0x10e>
    22d6:	2b08      	cmp	r3, #8
    22d8:	bf94      	ite	ls
    22da:	2300      	movls	r3, #0
    22dc:	2301      	movhi	r3, #1
    22de:	e000      	b.n	22e2 <_usb_d_dev_ep_enable+0xe6>
    22e0:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22e2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    22e6:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    22e8:	2380      	movs	r3, #128	; 0x80
    22ea:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    22ee:	4b6b      	ldr	r3, [pc, #428]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    22f0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    22f4:	2000      	movs	r0, #0
    22f6:	76b0      	strb	r0, [r6, #26]
    22f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22fa:	2306      	movs	r3, #6
    22fc:	e7f1      	b.n	22e2 <_usb_d_dev_ep_enable+0xe6>
    22fe:	2305      	movs	r3, #5
    2300:	e7ef      	b.n	22e2 <_usb_d_dev_ep_enable+0xe6>
    2302:	2304      	movs	r3, #4
    2304:	e7ed      	b.n	22e2 <_usb_d_dev_ep_enable+0xe6>
    2306:	2303      	movs	r3, #3
    2308:	e7eb      	b.n	22e2 <_usb_d_dev_ep_enable+0xe6>
    230a:	2302      	movs	r3, #2
    230c:	e7e9      	b.n	22e2 <_usb_d_dev_ep_enable+0xe6>
    230e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2310:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2314:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2316:	2340      	movs	r3, #64	; 0x40
    2318:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    231c:	4b5f      	ldr	r3, [pc, #380]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    231e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2322:	2000      	movs	r0, #0
    2324:	72b0      	strb	r0, [r6, #10]
    2326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2328:	2106      	movs	r1, #6
    232a:	e7f1      	b.n	2310 <_usb_d_dev_ep_enable+0x114>
    232c:	2105      	movs	r1, #5
    232e:	e7ef      	b.n	2310 <_usb_d_dev_ep_enable+0x114>
    2330:	2104      	movs	r1, #4
    2332:	e7ed      	b.n	2310 <_usb_d_dev_ep_enable+0x114>
    2334:	2103      	movs	r1, #3
    2336:	e7eb      	b.n	2310 <_usb_d_dev_ep_enable+0x114>
    2338:	2102      	movs	r1, #2
    233a:	e7e9      	b.n	2310 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    233c:	f06f 0011 	mvn.w	r0, #17
    2340:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2342:	f06f 0013 	mvn.w	r0, #19
    2346:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2348:	f06f 0013 	mvn.w	r0, #19
    234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    234e:	f06f 0013 	mvn.w	r0, #19
    2352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2354:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2358:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    235c:	b2e4      	uxtb	r4, r4
    235e:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    2360:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2362:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2366:	494d      	ldr	r1, [pc, #308]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    2368:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    236c:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    2370:	2dff      	cmp	r5, #255	; 0xff
    2372:	d0e3      	beq.n	233c <_usb_d_dev_ep_enable+0x140>
    2374:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2376:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2378:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    237c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2380:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2384:	f001 0107 	and.w	r1, r1, #7
    2388:	2901      	cmp	r1, #1
    238a:	f43f af4e 	beq.w	222a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    238e:	2f00      	cmp	r7, #0
    2390:	f6ff af7a 	blt.w	2288 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2394:	f014 0f07 	tst.w	r4, #7
    2398:	d1d9      	bne.n	234e <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    239a:	4d40      	ldr	r5, [pc, #256]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    239c:	009f      	lsls	r7, r3, #2
    239e:	18f9      	adds	r1, r7, r3
    23a0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    23a4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    23a8:	f001 0107 	and.w	r1, r1, #7
    23ac:	430c      	orrs	r4, r1
    23ae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    23b2:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23b6:	443b      	add	r3, r7
    23b8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    23bc:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    23c0:	4b37      	ldr	r3, [pc, #220]	; (24a0 <_usb_d_dev_ep_enable+0x2a4>)
    23c2:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    23ca:	d8a0      	bhi.n	230e <_usb_d_dev_ep_enable+0x112>
    23cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    23d0:	d8aa      	bhi.n	2328 <_usb_d_dev_ep_enable+0x12c>
    23d2:	2980      	cmp	r1, #128	; 0x80
    23d4:	d8aa      	bhi.n	232c <_usb_d_dev_ep_enable+0x130>
    23d6:	2940      	cmp	r1, #64	; 0x40
    23d8:	d8aa      	bhi.n	2330 <_usb_d_dev_ep_enable+0x134>
    23da:	2920      	cmp	r1, #32
    23dc:	d8aa      	bhi.n	2334 <_usb_d_dev_ep_enable+0x138>
    23de:	2910      	cmp	r1, #16
    23e0:	d8aa      	bhi.n	2338 <_usb_d_dev_ep_enable+0x13c>
    23e2:	2908      	cmp	r1, #8
    23e4:	bf94      	ite	ls
    23e6:	2100      	movls	r1, #0
    23e8:	2101      	movhi	r1, #1
    23ea:	e791      	b.n	2310 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23ec:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23f0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23f2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23f6:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23f8:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    23fc:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    23fe:	2140      	movs	r1, #64	; 0x40
    2400:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2404:	2080      	movs	r0, #128	; 0x80
    2406:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    240a:	4a24      	ldr	r2, [pc, #144]	; (249c <_usb_d_dev_ep_enable+0x2a0>)
    240c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    2410:	2000      	movs	r0, #0
    2412:	72b0      	strb	r0, [r6, #10]
    2414:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2416:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    241a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    241e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2422:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2426:	016d      	lsls	r5, r5, #5
    2428:	1953      	adds	r3, r2, r5
    242a:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    242c:	685a      	ldr	r2, [r3, #4]
    242e:	f364 329b 	bfi	r2, r4, #14, #14
    2432:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2434:	685a      	ldr	r2, [r3, #4]
    2436:	f360 020d 	bfi	r2, r0, #0, #14
    243a:	605a      	str	r2, [r3, #4]
    243c:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2440:	22b0      	movs	r2, #176	; 0xb0
    2442:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2446:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    244a:	461d      	mov	r5, r3
    244c:	2310      	movs	r3, #16
    244e:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    2452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2454:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2458:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    245a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    245e:	2705      	movs	r7, #5
    2460:	e7ca      	b.n	23f8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2462:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2466:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2468:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    246c:	2703      	movs	r7, #3
    246e:	e7c3      	b.n	23f8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2470:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2474:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2476:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    247a:	2706      	movs	r7, #6
    247c:	e7bc      	b.n	23f8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    247e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2482:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2484:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2488:	2704      	movs	r7, #4
    248a:	e7b5      	b.n	23f8 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    248c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2490:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2492:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2496:	2702      	movs	r7, #2
    2498:	e7ae      	b.n	23f8 <_usb_d_dev_ep_enable+0x1fc>
    249a:	bf00      	nop
    249c:	20000538 	.word	0x20000538
    24a0:	0fffc000 	.word	0x0fffc000

000024a4 <_usb_d_dev_ep_stall>:
{
    24a4:	b470      	push	{r4, r5, r6}
    24a6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    24a8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24aa:	f010 000f 	ands.w	r0, r0, #15
    24ae:	d008      	beq.n	24c2 <_usb_d_dev_ep_stall+0x1e>
    24b0:	2b00      	cmp	r3, #0
    24b2:	bfb4      	ite	lt
    24b4:	1c83      	addlt	r3, r0, #2
    24b6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    24b8:	2802      	cmp	r0, #2
    24ba:	d903      	bls.n	24c4 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    24bc:	f06f 0011 	mvn.w	r0, #17
    24c0:	e018      	b.n	24f4 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    24c2:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    24c4:	2901      	cmp	r1, #1
    24c6:	d017      	beq.n	24f8 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    24c8:	2900      	cmp	r1, #0
    24ca:	d03a      	beq.n	2542 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    24cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    24d0:	4a45      	ldr	r2, [pc, #276]	; (25e8 <_usb_d_dev_ep_stall+0x144>)
    24d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24d6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    24da:	f003 030f 	and.w	r3, r3, #15
    24de:	015b      	lsls	r3, r3, #5
    24e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    24e4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    24e8:	2310      	movs	r3, #16
    24ea:	40a3      	lsls	r3, r4
    24ec:	421a      	tst	r2, r3
    24ee:	bf14      	ite	ne
    24f0:	2001      	movne	r0, #1
    24f2:	2000      	moveq	r0, #0
}
    24f4:	bc70      	pop	{r4, r5, r6}
    24f6:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    24f8:	2510      	movs	r5, #16
    24fa:	40a5      	lsls	r5, r4
    24fc:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    24fe:	493a      	ldr	r1, [pc, #232]	; (25e8 <_usb_d_dev_ep_stall+0x144>)
    2500:	009e      	lsls	r6, r3, #2
    2502:	18f2      	adds	r2, r6, r3
    2504:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2508:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    250c:	f002 020f 	and.w	r2, r2, #15
    2510:	0150      	lsls	r0, r2, #5
    2512:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2516:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    251a:	2020      	movs	r0, #32
    251c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2520:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2522:	0152      	lsls	r2, r2, #5
    2524:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2528:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    252c:	4433      	add	r3, r6
    252e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2532:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2536:	f042 0208 	orr.w	r2, r2, #8
    253a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    253e:	2000      	movs	r0, #0
    2540:	e7d8      	b.n	24f4 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2542:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2546:	4928      	ldr	r1, [pc, #160]	; (25e8 <_usb_d_dev_ep_stall+0x144>)
    2548:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    254c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2550:	f002 020f 	and.w	r2, r2, #15
    2554:	0151      	lsls	r1, r2, #5
    2556:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    255a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    255e:	2010      	movs	r0, #16
    2560:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    2562:	4205      	tst	r5, r0
    2564:	d03c      	beq.n	25e0 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2566:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2568:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    256c:	2020      	movs	r0, #32
    256e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2570:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2572:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2576:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    257a:	4202      	tst	r2, r0
    257c:	d007      	beq.n	258e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    257e:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2582:	2201      	movs	r2, #1
    2584:	fa02 f404 	lsl.w	r4, r2, r4
    2588:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    258a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    258e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2592:	4815      	ldr	r0, [pc, #84]	; (25e8 <_usb_d_dev_ep_stall+0x144>)
    2594:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2598:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    259c:	f002 0207 	and.w	r2, r2, #7
    25a0:	2a01      	cmp	r2, #1
    25a2:	d00c      	beq.n	25be <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    25a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    25a8:	4a0f      	ldr	r2, [pc, #60]	; (25e8 <_usb_d_dev_ep_stall+0x144>)
    25aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25ae:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    25b2:	f36f 02c3 	bfc	r2, #3, #1
    25b6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    25ba:	2000      	movs	r0, #0
    25bc:	e79a      	b.n	24f4 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    25be:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    25c2:	f012 0f30 	tst.w	r2, #48	; 0x30
    25c6:	d10d      	bne.n	25e4 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    25c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    25cc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    25d0:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    25d4:	f36f 02c3 	bfc	r2, #3, #1
    25d8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    25dc:	2000      	movs	r0, #0
    25de:	e789      	b.n	24f4 <_usb_d_dev_ep_stall+0x50>
    25e0:	2000      	movs	r0, #0
    25e2:	e787      	b.n	24f4 <_usb_d_dev_ep_stall+0x50>
    25e4:	2000      	movs	r0, #0
    25e6:	e785      	b.n	24f4 <_usb_d_dev_ep_stall+0x50>
    25e8:	20000538 	.word	0x20000538

000025ec <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    25ec:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    25ee:	f000 040f 	and.w	r4, r0, #15
    25f2:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    25f4:	4a14      	ldr	r2, [pc, #80]	; (2648 <_usb_d_dev_ep_read_req+0x5c>)
    25f6:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    25f8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    25fa:	6840      	ldr	r0, [r0, #4]
    25fc:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2600:	2c02      	cmp	r4, #2
    2602:	d817      	bhi.n	2634 <_usb_d_dev_ep_read_req+0x48>
    2604:	b1c9      	cbz	r1, 263a <_usb_d_dev_ep_read_req+0x4e>
    2606:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    260a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    260e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2610:	2a11      	cmp	r2, #17
    2612:	d115      	bne.n	2640 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2614:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2618:	f012 0f10 	tst.w	r2, #16
    261c:	d102      	bne.n	2624 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    261e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2620:	bc30      	pop	{r4, r5}
    2622:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2624:	682c      	ldr	r4, [r5, #0]
    2626:	686a      	ldr	r2, [r5, #4]
    2628:	600c      	str	r4, [r1, #0]
    262a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    262c:	2210      	movs	r2, #16
    262e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2632:	e7f5      	b.n	2620 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2634:	f06f 0011 	mvn.w	r0, #17
    2638:	e7f2      	b.n	2620 <_usb_d_dev_ep_read_req+0x34>
    263a:	f06f 0011 	mvn.w	r0, #17
    263e:	e7ef      	b.n	2620 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2640:	f06f 0012 	mvn.w	r0, #18
    2644:	e7ec      	b.n	2620 <_usb_d_dev_ep_read_req+0x34>
    2646:	bf00      	nop
    2648:	20000538 	.word	0x20000538

0000264c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2650:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2652:	7a03      	ldrb	r3, [r0, #8]
    2654:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2656:	f013 030f 	ands.w	r3, r3, #15
    265a:	f000 80c2 	beq.w	27e2 <_usb_d_dev_ep_trans+0x196>
    265e:	2e00      	cmp	r6, #0
    2660:	bfb4      	ite	lt
    2662:	1c9a      	addlt	r2, r3, #2
    2664:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2666:	4614      	mov	r4, r2
    2668:	4969      	ldr	r1, [pc, #420]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    266a:	f101 0760 	add.w	r7, r1, #96	; 0x60
    266e:	1c55      	adds	r5, r2, #1
    2670:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2674:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2678:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    267c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2680:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2684:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2688:	428a      	cmp	r2, r1
    268a:	d025      	beq.n	26d8 <_usb_d_dev_ep_trans+0x8c>
    268c:	1e55      	subs	r5, r2, #1
    268e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2690:	6841      	ldr	r1, [r0, #4]
    2692:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2694:	2b02      	cmp	r3, #2
    2696:	f200 8092 	bhi.w	27be <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    269a:	6803      	ldr	r3, [r0, #0]
    269c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    26a0:	d31c      	bcc.n	26dc <_usb_d_dev_ep_trans+0x90>
    26a2:	eb03 0c01 	add.w	ip, r3, r1
    26a6:	f8df e180 	ldr.w	lr, [pc, #384]	; 2828 <_usb_d_dev_ep_trans+0x1dc>
    26aa:	45f4      	cmp	ip, lr
    26ac:	d816      	bhi.n	26dc <_usb_d_dev_ep_trans+0x90>
    26ae:	f013 0f03 	tst.w	r3, #3
    26b2:	d113      	bne.n	26dc <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    26b4:	2e00      	cmp	r6, #0
    26b6:	db2a      	blt.n	270e <_usb_d_dev_ep_trans+0xc2>
    26b8:	428a      	cmp	r2, r1
    26ba:	f200 809c 	bhi.w	27f6 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    26be:	b34d      	cbz	r5, 2714 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    26c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    26c4:	4a52      	ldr	r2, [pc, #328]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    26c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    26ce:	2b00      	cmp	r3, #0
    26d0:	d07b      	beq.n	27ca <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    26d2:	f04f 0800 	mov.w	r8, #0
    26d6:	e00c      	b.n	26f2 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    26d8:	4615      	mov	r5, r2
    26da:	e7d9      	b.n	2690 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    26dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    26e0:	4a4b      	ldr	r2, [pc, #300]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    26e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    26ea:	2b00      	cmp	r3, #0
    26ec:	d06a      	beq.n	27c4 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    26ee:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    26f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    26f6:	4a46      	ldr	r2, [pc, #280]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    26f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26fc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2700:	f013 0f08 	tst.w	r3, #8
    2704:	d009      	beq.n	271a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2706:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2708:	b003      	add	sp, #12
    270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    270e:	f04f 0800 	mov.w	r8, #0
    2712:	e7ee      	b.n	26f2 <_usb_d_dev_ep_trans+0xa6>
    2714:	f04f 0800 	mov.w	r8, #0
    2718:	e7eb      	b.n	26f2 <_usb_d_dev_ep_trans+0xa6>
    271a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    271c:	a801      	add	r0, sp, #4
    271e:	4b3d      	ldr	r3, [pc, #244]	; (2814 <_usb_d_dev_ep_trans+0x1c8>)
    2720:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2722:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2726:	4a3a      	ldr	r2, [pc, #232]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    2728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    272c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2730:	f013 0f40 	tst.w	r3, #64	; 0x40
    2734:	d13c      	bne.n	27b0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2736:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    273a:	4b35      	ldr	r3, [pc, #212]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    273c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2740:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2748:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    274c:	a801      	add	r0, sp, #4
    274e:	4b32      	ldr	r3, [pc, #200]	; (2818 <_usb_d_dev_ep_trans+0x1cc>)
    2750:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2752:	f8da 3000 	ldr.w	r3, [sl]
    2756:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    275a:	f8da 3004 	ldr.w	r3, [sl, #4]
    275e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2762:	2300      	movs	r3, #0
    2764:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2768:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    276a:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    276e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2772:	f368 1345 	bfi	r3, r8, #5, #1
    2776:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    277a:	f89a 3009 	ldrb.w	r3, [sl, #9]
    277e:	b1e3      	cbz	r3, 27ba <_usb_d_dev_ep_trans+0x16e>
    2780:	fab5 f585 	clz	r5, r5
    2784:	096d      	lsrs	r5, r5, #5
    2786:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    278a:	4b21      	ldr	r3, [pc, #132]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    278c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2790:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2794:	f365 1304 	bfi	r3, r5, #4, #1
    2798:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    279c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    279e:	f04f 0100 	mov.w	r1, #0
    27a2:	4638      	mov	r0, r7
    27a4:	bfb4      	ite	lt
    27a6:	4b1d      	ldrlt	r3, [pc, #116]	; (281c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    27a8:	4b1d      	ldrge	r3, [pc, #116]	; (2820 <_usb_d_dev_ep_trans+0x1d4>)
    27aa:	4798      	blx	r3
	return ERR_NONE;
    27ac:	2000      	movs	r0, #0
    27ae:	e7ab      	b.n	2708 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    27b0:	a801      	add	r0, sp, #4
    27b2:	4b19      	ldr	r3, [pc, #100]	; (2818 <_usb_d_dev_ep_trans+0x1cc>)
    27b4:	4798      	blx	r3
		return USB_BUSY;
    27b6:	2001      	movs	r0, #1
    27b8:	e7a6      	b.n	2708 <_usb_d_dev_ep_trans+0xbc>
    27ba:	2500      	movs	r5, #0
    27bc:	e7e3      	b.n	2786 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    27be:	f06f 0011 	mvn.w	r0, #17
    27c2:	e7a1      	b.n	2708 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    27c4:	f06f 0012 	mvn.w	r0, #18
    27c8:	e79e      	b.n	2708 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    27ca:	f06f 0011 	mvn.w	r0, #17
    27ce:	e79b      	b.n	2708 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    27d0:	f06f 0012 	mvn.w	r0, #18
    27d4:	e798      	b.n	2708 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    27d6:	6841      	ldr	r1, [r0, #4]
    27d8:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    27dc:	4f11      	ldr	r7, [pc, #68]	; (2824 <_usb_d_dev_ep_trans+0x1d8>)
    27de:	2400      	movs	r4, #0
    27e0:	e75b      	b.n	269a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    27e2:	4a0b      	ldr	r2, [pc, #44]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    27e4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    27e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    27ec:	428a      	cmp	r2, r1
    27ee:	d0f2      	beq.n	27d6 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    27f0:	4f0c      	ldr	r7, [pc, #48]	; (2824 <_usb_d_dev_ep_trans+0x1d8>)
    27f2:	2400      	movs	r4, #0
    27f4:	e74a      	b.n	268c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    27f6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    27fa:	4a05      	ldr	r2, [pc, #20]	; (2810 <_usb_d_dev_ep_trans+0x1c4>)
    27fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2804:	2b00      	cmp	r3, #0
    2806:	d0e3      	beq.n	27d0 <_usb_d_dev_ep_trans+0x184>
    2808:	f04f 0801 	mov.w	r8, #1
    280c:	e771      	b.n	26f2 <_usb_d_dev_ep_trans+0xa6>
    280e:	bf00      	nop
    2810:	20000538 	.word	0x20000538
    2814:	000033d1 	.word	0x000033d1
    2818:	000033df 	.word	0x000033df
    281c:	000018ad 	.word	0x000018ad
    2820:	00001a31 	.word	0x00001a31
    2824:	200005ac 	.word	0x200005ac
    2828:	20041fff 	.word	0x20041fff

0000282c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    282c:	4b06      	ldr	r3, [pc, #24]	; (2848 <_usb_d_dev_register_callback+0x1c>)
    282e:	2900      	cmp	r1, #0
    2830:	bf08      	it	eq
    2832:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2834:	2801      	cmp	r0, #1
    2836:	d003      	beq.n	2840 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2838:	b908      	cbnz	r0, 283e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    283a:	4b04      	ldr	r3, [pc, #16]	; (284c <_usb_d_dev_register_callback+0x20>)
    283c:	6619      	str	r1, [r3, #96]	; 0x60
    283e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2840:	4b02      	ldr	r3, [pc, #8]	; (284c <_usb_d_dev_register_callback+0x20>)
    2842:	6659      	str	r1, [r3, #100]	; 0x64
    2844:	4770      	bx	lr
    2846:	bf00      	nop
    2848:	00001625 	.word	0x00001625
    284c:	20000538 	.word	0x20000538

00002850 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2850:	4b09      	ldr	r3, [pc, #36]	; (2878 <_usb_d_dev_register_ep_callback+0x28>)
    2852:	2900      	cmp	r1, #0
    2854:	bf08      	it	eq
    2856:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2858:	4603      	mov	r3, r0
    285a:	b130      	cbz	r0, 286a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    285c:	2801      	cmp	r0, #1
    285e:	d007      	beq.n	2870 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2860:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2862:	bf04      	itt	eq
    2864:	4b05      	ldreq	r3, [pc, #20]	; (287c <_usb_d_dev_register_ep_callback+0x2c>)
    2866:	6719      	streq	r1, [r3, #112]	; 0x70
    2868:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    286a:	4b04      	ldr	r3, [pc, #16]	; (287c <_usb_d_dev_register_ep_callback+0x2c>)
    286c:	6699      	str	r1, [r3, #104]	; 0x68
    286e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2870:	4b02      	ldr	r3, [pc, #8]	; (287c <_usb_d_dev_register_ep_callback+0x2c>)
    2872:	66d9      	str	r1, [r3, #108]	; 0x6c
    2874:	4770      	bx	lr
    2876:	bf00      	nop
    2878:	00001625 	.word	0x00001625
    287c:	20000538 	.word	0x20000538

00002880 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2880:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2882:	4b01      	ldr	r3, [pc, #4]	; (2888 <USB_0_Handler+0x8>)
    2884:	4798      	blx	r3
    2886:	bd08      	pop	{r3, pc}
    2888:	00001c21 	.word	0x00001c21

0000288c <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    288c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    288e:	4b01      	ldr	r3, [pc, #4]	; (2894 <USB_1_Handler+0x8>)
    2890:	4798      	blx	r3
    2892:	bd08      	pop	{r3, pc}
    2894:	00001c21 	.word	0x00001c21

00002898 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2898:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    289a:	4b01      	ldr	r3, [pc, #4]	; (28a0 <USB_2_Handler+0x8>)
    289c:	4798      	blx	r3
    289e:	bd08      	pop	{r3, pc}
    28a0:	00001c21 	.word	0x00001c21

000028a4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    28a4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    28a6:	4b01      	ldr	r3, [pc, #4]	; (28ac <USB_3_Handler+0x8>)
    28a8:	4798      	blx	r3
    28aa:	bd08      	pop	{r3, pc}
    28ac:	00001c21 	.word	0x00001c21

000028b0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    28b4:	780b      	ldrb	r3, [r1, #0]
    28b6:	f3c3 1441 	ubfx	r4, r3, #5, #2
    28ba:	2c01      	cmp	r4, #1
    28bc:	d15e      	bne.n	297c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    28be:	888c      	ldrh	r4, [r1, #4]
    28c0:	4d35      	ldr	r5, [pc, #212]	; (2998 <cdcdf_acm_req+0xe8>)
    28c2:	782d      	ldrb	r5, [r5, #0]
    28c4:	42a5      	cmp	r5, r4
    28c6:	d003      	beq.n	28d0 <cdcdf_acm_req+0x20>
    28c8:	4d33      	ldr	r5, [pc, #204]	; (2998 <cdcdf_acm_req+0xe8>)
    28ca:	786d      	ldrb	r5, [r5, #1]
    28cc:	42a5      	cmp	r5, r4
    28ce:	d158      	bne.n	2982 <cdcdf_acm_req+0xd2>
    28d0:	4616      	mov	r6, r2
    28d2:	460c      	mov	r4, r1
    28d4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    28d6:	f013 0f80 	tst.w	r3, #128	; 0x80
    28da:	d10c      	bne.n	28f6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    28dc:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    28de:	4b2f      	ldr	r3, [pc, #188]	; (299c <cdcdf_acm_req+0xec>)
    28e0:	4798      	blx	r3
    28e2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    28e4:	7863      	ldrb	r3, [r4, #1]
    28e6:	2b20      	cmp	r3, #32
    28e8:	d013      	beq.n	2912 <cdcdf_acm_req+0x62>
    28ea:	2b22      	cmp	r3, #34	; 0x22
    28ec:	d032      	beq.n	2954 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    28ee:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    28f2:	b003      	add	sp, #12
    28f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    28f6:	2a01      	cmp	r2, #1
    28f8:	d046      	beq.n	2988 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    28fa:	784b      	ldrb	r3, [r1, #1]
    28fc:	2b21      	cmp	r3, #33	; 0x21
    28fe:	d145      	bne.n	298c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2900:	88cb      	ldrh	r3, [r1, #6]
    2902:	2b07      	cmp	r3, #7
    2904:	d145      	bne.n	2992 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2906:	2300      	movs	r3, #0
    2908:	2207      	movs	r2, #7
    290a:	4925      	ldr	r1, [pc, #148]	; (29a0 <cdcdf_acm_req+0xf0>)
    290c:	4c25      	ldr	r4, [pc, #148]	; (29a4 <cdcdf_acm_req+0xf4>)
    290e:	47a0      	blx	r4
    2910:	e7ef      	b.n	28f2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2912:	2f07      	cmp	r7, #7
    2914:	d12b      	bne.n	296e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2916:	b1be      	cbz	r6, 2948 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2918:	6800      	ldr	r0, [r0, #0]
    291a:	9000      	str	r0, [sp, #0]
    291c:	888a      	ldrh	r2, [r1, #4]
    291e:	798b      	ldrb	r3, [r1, #6]
    2920:	f8ad 2004 	strh.w	r2, [sp, #4]
    2924:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2928:	4b1b      	ldr	r3, [pc, #108]	; (2998 <cdcdf_acm_req+0xe8>)
    292a:	691b      	ldr	r3, [r3, #16]
    292c:	b113      	cbz	r3, 2934 <cdcdf_acm_req+0x84>
    292e:	4668      	mov	r0, sp
    2930:	4798      	blx	r3
    2932:	b1f8      	cbz	r0, 2974 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2934:	4b18      	ldr	r3, [pc, #96]	; (2998 <cdcdf_acm_req+0xe8>)
    2936:	aa02      	add	r2, sp, #8
    2938:	e912 0003 	ldmdb	r2, {r0, r1}
    293c:	6098      	str	r0, [r3, #8]
    293e:	8199      	strh	r1, [r3, #12]
    2940:	0c09      	lsrs	r1, r1, #16
    2942:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2944:	2000      	movs	r0, #0
    2946:	e7d4      	b.n	28f2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2948:	2300      	movs	r3, #0
    294a:	2207      	movs	r2, #7
    294c:	4628      	mov	r0, r5
    294e:	4c15      	ldr	r4, [pc, #84]	; (29a4 <cdcdf_acm_req+0xf4>)
    2950:	47a0      	blx	r4
    2952:	e7ce      	b.n	28f2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2954:	2300      	movs	r3, #0
    2956:	461a      	mov	r2, r3
    2958:	4619      	mov	r1, r3
    295a:	4618      	mov	r0, r3
    295c:	4d11      	ldr	r5, [pc, #68]	; (29a4 <cdcdf_acm_req+0xf4>)
    295e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2960:	4b0d      	ldr	r3, [pc, #52]	; (2998 <cdcdf_acm_req+0xe8>)
    2962:	695b      	ldr	r3, [r3, #20]
    2964:	b143      	cbz	r3, 2978 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    2966:	8860      	ldrh	r0, [r4, #2]
    2968:	4798      	blx	r3
		return ERR_NONE;
    296a:	2000      	movs	r0, #0
    296c:	e7c1      	b.n	28f2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    296e:	f04f 30ff 	mov.w	r0, #4294967295
    2972:	e7be      	b.n	28f2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    2974:	2000      	movs	r0, #0
    2976:	e7bc      	b.n	28f2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2978:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    297a:	e7ba      	b.n	28f2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    297c:	f06f 0009 	mvn.w	r0, #9
    2980:	e7b7      	b.n	28f2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2982:	f06f 0009 	mvn.w	r0, #9
    2986:	e7b4      	b.n	28f2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2988:	2000      	movs	r0, #0
    298a:	e7b2      	b.n	28f2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    298c:	f06f 000c 	mvn.w	r0, #12
    2990:	e7af      	b.n	28f2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2992:	f04f 30ff 	mov.w	r0, #4294967295
    2996:	e7ac      	b.n	28f2 <cdcdf_acm_req+0x42>
    2998:	20000720 	.word	0x20000720
    299c:	00003245 	.word	0x00003245
    29a0:	20000728 	.word	0x20000728
    29a4:	00002d21 	.word	0x00002d21

000029a8 <cdcdf_acm_ctrl>:
{
    29a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29ac:	b083      	sub	sp, #12
    29ae:	4616      	mov	r6, r2
	switch (ctrl) {
    29b0:	2901      	cmp	r1, #1
    29b2:	d066      	beq.n	2a82 <cdcdf_acm_ctrl+0xda>
    29b4:	b141      	cbz	r1, 29c8 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    29b6:	2902      	cmp	r1, #2
    29b8:	bf0c      	ite	eq
    29ba:	f06f 001a 	mvneq.w	r0, #26
    29be:	f06f 000c 	mvnne.w	r0, #12
}
    29c2:	b003      	add	sp, #12
    29c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    29c8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    29cc:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    29ce:	2800      	cmp	r0, #0
    29d0:	f000 8085 	beq.w	2ade <cdcdf_acm_ctrl+0x136>
    29d4:	f10a 3bff 	add.w	fp, sl, #4294967295
    29d8:	f10a 0301 	add.w	r3, sl, #1
    29dc:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    29de:	4f46      	ldr	r7, [pc, #280]	; (2af8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    29e0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2b08 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    29e4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2b0c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    29e8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    29ea:	7943      	ldrb	r3, [r0, #5]
    29ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    29f0:	2b02      	cmp	r3, #2
    29f2:	d002      	beq.n	29fa <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    29f4:	f06f 0009 	mvn.w	r0, #9
    29f8:	e7e3      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
    29fa:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    29fe:	f89b 3000 	ldrb.w	r3, [fp]
    2a02:	429a      	cmp	r2, r3
    2a04:	d06e      	beq.n	2ae4 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2a06:	2bff      	cmp	r3, #255	; 0xff
    2a08:	d16f      	bne.n	2aea <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2a0a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2a0e:	2205      	movs	r2, #5
    2a10:	6871      	ldr	r1, [r6, #4]
    2a12:	4b3a      	ldr	r3, [pc, #232]	; (2afc <cdcdf_acm_ctrl+0x154>)
    2a14:	4798      	blx	r3
		while (NULL != ep) {
    2a16:	4604      	mov	r4, r0
    2a18:	b1f8      	cbz	r0, 2a5a <cdcdf_acm_ctrl+0xb2>
    2a1a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    2a1e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2a20:	7963      	ldrb	r3, [r4, #5]
    2a22:	7922      	ldrb	r2, [r4, #4]
    2a24:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2a28:	b292      	uxth	r2, r2
    2a2a:	78e1      	ldrb	r1, [r4, #3]
    2a2c:	4628      	mov	r0, r5
    2a2e:	47b8      	blx	r7
    2a30:	2800      	cmp	r0, #0
    2a32:	d15d      	bne.n	2af0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2a34:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2a38:	bf14      	ite	ne
    2a3a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2a3e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2a42:	4628      	mov	r0, r5
    2a44:	47c8      	blx	r9
			desc->sod = ep;
    2a46:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2a48:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2a4a:	6871      	ldr	r1, [r6, #4]
    2a4c:	4420      	add	r0, r4
    2a4e:	47c0      	blx	r8
		while (NULL != ep) {
    2a50:	4604      	mov	r4, r0
    2a52:	2800      	cmp	r0, #0
    2a54:	d1e3      	bne.n	2a1e <cdcdf_acm_ctrl+0x76>
    2a56:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2a5a:	6833      	ldr	r3, [r6, #0]
    2a5c:	7818      	ldrb	r0, [r3, #0]
    2a5e:	2204      	movs	r2, #4
    2a60:	6871      	ldr	r1, [r6, #4]
    2a62:	4418      	add	r0, r3
    2a64:	4b25      	ldr	r3, [pc, #148]	; (2afc <cdcdf_acm_ctrl+0x154>)
    2a66:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2a68:	9b00      	ldr	r3, [sp, #0]
    2a6a:	459b      	cmp	fp, r3
    2a6c:	d004      	beq.n	2a78 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    2a6e:	2800      	cmp	r0, #0
    2a70:	d1ba      	bne.n	29e8 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    2a72:	f06f 0009 	mvn.w	r0, #9
    2a76:	e7a4      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    2a78:	2201      	movs	r2, #1
    2a7a:	4b21      	ldr	r3, [pc, #132]	; (2b00 <cdcdf_acm_ctrl+0x158>)
    2a7c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2a7e:	2000      	movs	r0, #0
    2a80:	e79f      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2a82:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2a84:	b142      	cbz	r2, 2a98 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2a86:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2a88:	795b      	ldrb	r3, [r3, #5]
    2a8a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d002      	beq.n	2a98 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    2a92:	f06f 0009 	mvn.w	r0, #9
    2a96:	e794      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2a98:	7823      	ldrb	r3, [r4, #0]
    2a9a:	2bff      	cmp	r3, #255	; 0xff
    2a9c:	d008      	beq.n	2ab0 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2a9e:	23ff      	movs	r3, #255	; 0xff
    2aa0:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2aa2:	78a0      	ldrb	r0, [r4, #2]
    2aa4:	4298      	cmp	r0, r3
    2aa6:	d003      	beq.n	2ab0 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2aa8:	4b16      	ldr	r3, [pc, #88]	; (2b04 <cdcdf_acm_ctrl+0x15c>)
    2aaa:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2aac:	23ff      	movs	r3, #255	; 0xff
    2aae:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2ab0:	7863      	ldrb	r3, [r4, #1]
    2ab2:	2bff      	cmp	r3, #255	; 0xff
    2ab4:	d008      	beq.n	2ac8 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    2ab6:	23ff      	movs	r3, #255	; 0xff
    2ab8:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2aba:	78e0      	ldrb	r0, [r4, #3]
    2abc:	4298      	cmp	r0, r3
    2abe:	d003      	beq.n	2ac8 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2ac0:	4b10      	ldr	r3, [pc, #64]	; (2b04 <cdcdf_acm_ctrl+0x15c>)
    2ac2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2ac4:	23ff      	movs	r3, #255	; 0xff
    2ac6:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2ac8:	7920      	ldrb	r0, [r4, #4]
    2aca:	28ff      	cmp	r0, #255	; 0xff
    2acc:	d003      	beq.n	2ad6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    2ace:	4b0d      	ldr	r3, [pc, #52]	; (2b04 <cdcdf_acm_ctrl+0x15c>)
    2ad0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2ad2:	23ff      	movs	r3, #255	; 0xff
    2ad4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2ad6:	2000      	movs	r0, #0
    2ad8:	4b09      	ldr	r3, [pc, #36]	; (2b00 <cdcdf_acm_ctrl+0x158>)
    2ada:	7158      	strb	r0, [r3, #5]
    2adc:	e771      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    2ade:	f06f 0009 	mvn.w	r0, #9
    2ae2:	e76e      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    2ae4:	f06f 0011 	mvn.w	r0, #17
    2ae8:	e76b      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2aea:	f06f 001b 	mvn.w	r0, #27
    2aee:	e768      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2af0:	f06f 0013 	mvn.w	r0, #19
    2af4:	e765      	b.n	29c2 <cdcdf_acm_ctrl+0x1a>
    2af6:	bf00      	nop
    2af8:	00000c01 	.word	0x00000c01
    2afc:	00003265 	.word	0x00003265
    2b00:	20000720 	.word	0x20000720
    2b04:	00000c69 	.word	0x00000c69
    2b08:	00000c95 	.word	0x00000c95
    2b0c:	0000329f 	.word	0x0000329f

00002b10 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2b10:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2b12:	4b0a      	ldr	r3, [pc, #40]	; (2b3c <cdcdf_acm_init+0x2c>)
    2b14:	4798      	blx	r3
    2b16:	2801      	cmp	r0, #1
    2b18:	d80c      	bhi.n	2b34 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2b1a:	4809      	ldr	r0, [pc, #36]	; (2b40 <cdcdf_acm_init+0x30>)
    2b1c:	4b09      	ldr	r3, [pc, #36]	; (2b44 <cdcdf_acm_init+0x34>)
    2b1e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2b20:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2b22:	3018      	adds	r0, #24
    2b24:	4b08      	ldr	r3, [pc, #32]	; (2b48 <cdcdf_acm_init+0x38>)
    2b26:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2b28:	4908      	ldr	r1, [pc, #32]	; (2b4c <cdcdf_acm_init+0x3c>)
    2b2a:	2001      	movs	r0, #1
    2b2c:	4b08      	ldr	r3, [pc, #32]	; (2b50 <cdcdf_acm_init+0x40>)
    2b2e:	4798      	blx	r3
	return ERR_NONE;
    2b30:	2000      	movs	r0, #0
    2b32:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2b34:	f06f 0010 	mvn.w	r0, #16
}
    2b38:	bd08      	pop	{r3, pc}
    2b3a:	bf00      	nop
    2b3c:	00003251 	.word	0x00003251
    2b40:	20000720 	.word	0x20000720
    2b44:	000029a9 	.word	0x000029a9
    2b48:	000031f1 	.word	0x000031f1
    2b4c:	20000000 	.word	0x20000000
    2b50:	0000315d 	.word	0x0000315d

00002b54 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2b54:	4b07      	ldr	r3, [pc, #28]	; (2b74 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    2b56:	795b      	ldrb	r3, [r3, #5]
    2b58:	b143      	cbz	r3, 2b6c <cdcdf_acm_write+0x18>
{
    2b5a:	b510      	push	{r4, lr}
    2b5c:	460a      	mov	r2, r1
    2b5e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2b60:	2301      	movs	r3, #1
    2b62:	4804      	ldr	r0, [pc, #16]	; (2b74 <cdcdf_acm_write+0x20>)
    2b64:	78c0      	ldrb	r0, [r0, #3]
    2b66:	4c04      	ldr	r4, [pc, #16]	; (2b78 <cdcdf_acm_write+0x24>)
    2b68:	47a0      	blx	r4
    2b6a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2b6c:	f06f 0010 	mvn.w	r0, #16
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop
    2b74:	20000720 	.word	0x20000720
    2b78:	00002d21 	.word	0x00002d21

00002b7c <cdcdf_acm_is_enabled>:
}
    2b7c:	4b01      	ldr	r3, [pc, #4]	; (2b84 <cdcdf_acm_is_enabled+0x8>)
    2b7e:	7958      	ldrb	r0, [r3, #5]
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	20000720 	.word	0x20000720

00002b88 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2b88:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2b8a:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <usbdc_unconfig+0x20>)
    2b8c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2b8e:	b14c      	cbz	r4, 2ba4 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2b90:	2600      	movs	r6, #0
    2b92:	2501      	movs	r5, #1
    2b94:	6863      	ldr	r3, [r4, #4]
    2b96:	4632      	mov	r2, r6
    2b98:	4629      	mov	r1, r5
    2b9a:	4620      	mov	r0, r4
    2b9c:	4798      	blx	r3
		func = func->next;
    2b9e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2ba0:	2c00      	cmp	r4, #0
    2ba2:	d1f7      	bne.n	2b94 <usbdc_unconfig+0xc>
    2ba4:	bd70      	pop	{r4, r5, r6, pc}
    2ba6:	bf00      	nop
    2ba8:	20000744 	.word	0x20000744

00002bac <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2bac:	b570      	push	{r4, r5, r6, lr}
    2bae:	4606      	mov	r6, r0
    2bb0:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2bb2:	4b07      	ldr	r3, [pc, #28]	; (2bd0 <usbdc_change_notify+0x24>)
    2bb4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2bb6:	b91c      	cbnz	r4, 2bc0 <usbdc_change_notify+0x14>
    2bb8:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    2bba:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2bbc:	2c00      	cmp	r4, #0
    2bbe:	d0fb      	beq.n	2bb8 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    2bc0:	6863      	ldr	r3, [r4, #4]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d0f9      	beq.n	2bba <usbdc_change_notify+0xe>
			cg->cb(change, value);
    2bc6:	4629      	mov	r1, r5
    2bc8:	4630      	mov	r0, r6
    2bca:	4798      	blx	r3
    2bcc:	e7f5      	b.n	2bba <usbdc_change_notify+0xe>
    2bce:	bf00      	nop
    2bd0:	20000744 	.word	0x20000744

00002bd4 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bd6:	4607      	mov	r7, r0
    2bd8:	460e      	mov	r6, r1
    2bda:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2bdc:	4b0c      	ldr	r3, [pc, #48]	; (2c10 <usbdc_request_handler+0x3c>)
    2bde:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2be0:	b91c      	cbnz	r4, 2bea <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2be2:	2000      	movs	r0, #0
    2be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    2be6:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2be8:	b16c      	cbz	r4, 2c06 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    2bea:	6863      	ldr	r3, [r4, #4]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d0fa      	beq.n	2be6 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    2bf0:	462a      	mov	r2, r5
    2bf2:	4631      	mov	r1, r6
    2bf4:	4638      	mov	r0, r7
    2bf6:	4798      	blx	r3
			if (0 == rc) {
    2bf8:	b138      	cbz	r0, 2c0a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    2bfa:	f110 0f0a 	cmn.w	r0, #10
    2bfe:	d0f2      	beq.n	2be6 <usbdc_request_handler+0x12>
				return -1;
    2c00:	f04f 30ff 	mov.w	r0, #4294967295
}
    2c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2c06:	2000      	movs	r0, #0
    2c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2c0a:	2001      	movs	r0, #1
    2c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c0e:	bf00      	nop
    2c10:	20000744 	.word	0x20000744

00002c14 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2c14:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2c16:	4b06      	ldr	r3, [pc, #24]	; (2c30 <usbd_sof_cb+0x1c>)
    2c18:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2c1a:	b91c      	cbnz	r4, 2c24 <usbd_sof_cb+0x10>
    2c1c:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2c1e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2c20:	2c00      	cmp	r4, #0
    2c22:	d0fb      	beq.n	2c1c <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    2c24:	6863      	ldr	r3, [r4, #4]
    2c26:	2b00      	cmp	r3, #0
    2c28:	d0f9      	beq.n	2c1e <usbd_sof_cb+0xa>
			sof->cb();
    2c2a:	4798      	blx	r3
    2c2c:	e7f7      	b.n	2c1e <usbd_sof_cb+0xa>
    2c2e:	bf00      	nop
    2c30:	20000744 	.word	0x20000744

00002c34 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2c34:	b510      	push	{r4, lr}
    2c36:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    2c38:	b119      	cbz	r1, 2c42 <usbdc_cb_ctl_done+0xe>
    2c3a:	2901      	cmp	r1, #1
    2c3c:	d026      	beq.n	2c8c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2c3e:	2000      	movs	r0, #0
    2c40:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2c42:	7813      	ldrb	r3, [r2, #0]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d1fa      	bne.n	2c3e <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    2c48:	7853      	ldrb	r3, [r2, #1]
    2c4a:	2b05      	cmp	r3, #5
    2c4c:	d00f      	beq.n	2c6e <usbdc_cb_ctl_done+0x3a>
    2c4e:	2b09      	cmp	r3, #9
    2c50:	d1f5      	bne.n	2c3e <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    2c52:	8852      	ldrh	r2, [r2, #2]
    2c54:	4b10      	ldr	r3, [pc, #64]	; (2c98 <usbdc_cb_ctl_done+0x64>)
    2c56:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2c58:	8863      	ldrh	r3, [r4, #2]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	bf14      	ite	ne
    2c5e:	2104      	movne	r1, #4
    2c60:	2103      	moveq	r1, #3
    2c62:	4b0d      	ldr	r3, [pc, #52]	; (2c98 <usbdc_cb_ctl_done+0x64>)
    2c64:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2c66:	2001      	movs	r0, #1
    2c68:	4b0c      	ldr	r3, [pc, #48]	; (2c9c <usbdc_cb_ctl_done+0x68>)
    2c6a:	4798      	blx	r3
    2c6c:	e7e7      	b.n	2c3e <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    2c6e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    2c70:	b2c0      	uxtb	r0, r0
    2c72:	4b0b      	ldr	r3, [pc, #44]	; (2ca0 <usbdc_cb_ctl_done+0x6c>)
    2c74:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2c76:	8863      	ldrh	r3, [r4, #2]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	bf14      	ite	ne
    2c7c:	2103      	movne	r1, #3
    2c7e:	2102      	moveq	r1, #2
    2c80:	4b05      	ldr	r3, [pc, #20]	; (2c98 <usbdc_cb_ctl_done+0x64>)
    2c82:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2c84:	2001      	movs	r0, #1
    2c86:	4b05      	ldr	r3, [pc, #20]	; (2c9c <usbdc_cb_ctl_done+0x68>)
    2c88:	4798      	blx	r3
    2c8a:	e7d8      	b.n	2c3e <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2c8c:	2201      	movs	r2, #1
    2c8e:	4621      	mov	r1, r4
    2c90:	2000      	movs	r0, #0
    2c92:	4b04      	ldr	r3, [pc, #16]	; (2ca4 <usbdc_cb_ctl_done+0x70>)
    2c94:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2c96:	e7d2      	b.n	2c3e <usbdc_cb_ctl_done+0xa>
    2c98:	20000744 	.word	0x20000744
    2c9c:	00002bad 	.word	0x00002bad
    2ca0:	00000bf5 	.word	0x00000bf5
    2ca4:	00002bd5 	.word	0x00002bd5

00002ca8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2ca8:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    2caa:	4b0d      	ldr	r3, [pc, #52]	; (2ce0 <usbdc_reset+0x38>)
    2cac:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2cae:	4d0d      	ldr	r5, [pc, #52]	; (2ce4 <usbdc_reset+0x3c>)
    2cb0:	2602      	movs	r6, #2
    2cb2:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    2cb4:	2400      	movs	r4, #0
    2cb6:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    2cb8:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2cba:	4620      	mov	r0, r4
    2cbc:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <usbdc_reset+0x40>)
    2cbe:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2cc0:	7f28      	ldrb	r0, [r5, #28]
    2cc2:	4b0a      	ldr	r3, [pc, #40]	; (2cec <usbdc_reset+0x44>)
    2cc4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2cc6:	4a0a      	ldr	r2, [pc, #40]	; (2cf0 <usbdc_reset+0x48>)
    2cc8:	4621      	mov	r1, r4
    2cca:	4620      	mov	r0, r4
    2ccc:	4d09      	ldr	r5, [pc, #36]	; (2cf4 <usbdc_reset+0x4c>)
    2cce:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2cd0:	4a09      	ldr	r2, [pc, #36]	; (2cf8 <usbdc_reset+0x50>)
    2cd2:	4631      	mov	r1, r6
    2cd4:	4620      	mov	r0, r4
    2cd6:	47a8      	blx	r5
	usb_d_ep_enable(0);
    2cd8:	4620      	mov	r0, r4
    2cda:	4b08      	ldr	r3, [pc, #32]	; (2cfc <usbdc_reset+0x54>)
    2cdc:	4798      	blx	r3
    2cde:	bd70      	pop	{r4, r5, r6, pc}
    2ce0:	00002b89 	.word	0x00002b89
    2ce4:	20000744 	.word	0x20000744
    2ce8:	00000c69 	.word	0x00000c69
    2cec:	00000c55 	.word	0x00000c55
    2cf0:	00002d41 	.word	0x00002d41
    2cf4:	00000e69 	.word	0x00000e69
    2cf8:	00002c35 	.word	0x00002c35
    2cfc:	00000c95 	.word	0x00000c95

00002d00 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2d00:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    2d02:	b110      	cbz	r0, 2d0a <usbd_event_cb+0xa>
    2d04:	2801      	cmp	r0, #1
    2d06:	d004      	beq.n	2d12 <usbd_event_cb+0x12>
    2d08:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    2d0a:	2000      	movs	r0, #0
    2d0c:	4b02      	ldr	r3, [pc, #8]	; (2d18 <usbd_event_cb+0x18>)
    2d0e:	4798      	blx	r3
		break;
    2d10:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    2d12:	4b02      	ldr	r3, [pc, #8]	; (2d1c <usbd_event_cb+0x1c>)
    2d14:	4798      	blx	r3
    2d16:	bd08      	pop	{r3, pc}
    2d18:	00002bad 	.word	0x00002bad
    2d1c:	00002ca9 	.word	0x00002ca9

00002d20 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2d20:	b500      	push	{lr}
    2d22:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2d24:	9101      	str	r1, [sp, #4]
    2d26:	9202      	str	r2, [sp, #8]
    2d28:	f88d 000c 	strb.w	r0, [sp, #12]
    2d2c:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    2d30:	a801      	add	r0, sp, #4
    2d32:	4b02      	ldr	r3, [pc, #8]	; (2d3c <usbdc_xfer+0x1c>)
    2d34:	4798      	blx	r3
}
    2d36:	b005      	add	sp, #20
    2d38:	f85d fb04 	ldr.w	pc, [sp], #4
    2d3c:	00000ce1 	.word	0x00000ce1

00002d40 <usbdc_cb_ctl_req>:
{
    2d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d44:	b083      	sub	sp, #12
    2d46:	4605      	mov	r5, r0
    2d48:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2d4a:	2200      	movs	r2, #0
    2d4c:	4b9b      	ldr	r3, [pc, #620]	; (2fbc <usbdc_cb_ctl_req+0x27c>)
    2d4e:	4798      	blx	r3
    2d50:	f1b0 3fff 	cmp.w	r0, #4294967295
    2d54:	d00b      	beq.n	2d6e <usbdc_cb_ctl_req+0x2e>
    2d56:	2801      	cmp	r0, #1
    2d58:	f000 81e3 	beq.w	3122 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2d5c:	7823      	ldrb	r3, [r4, #0]
    2d5e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    2d62:	d008      	beq.n	2d76 <usbdc_cb_ctl_req+0x36>
    2d64:	2a80      	cmp	r2, #128	; 0x80
    2d66:	f000 80f4 	beq.w	2f52 <usbdc_cb_ctl_req+0x212>
		return false;
    2d6a:	2000      	movs	r0, #0
    2d6c:	e000      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    2d6e:	2000      	movs	r0, #0
}
    2d70:	b003      	add	sp, #12
    2d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2d76:	7862      	ldrb	r2, [r4, #1]
    2d78:	3a01      	subs	r2, #1
    2d7a:	2a0a      	cmp	r2, #10
    2d7c:	f200 81d3 	bhi.w	3126 <usbdc_cb_ctl_req+0x3e6>
    2d80:	e8df f012 	tbh	[pc, r2, lsl #1]
    2d84:	01d10060 	.word	0x01d10060
    2d88:	01d10076 	.word	0x01d10076
    2d8c:	01d1000b 	.word	0x01d1000b
    2d90:	01d101d1 	.word	0x01d101d1
    2d94:	01d10015 	.word	0x01d10015
    2d98:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2d9a:	2301      	movs	r3, #1
    2d9c:	2200      	movs	r2, #0
    2d9e:	4611      	mov	r1, r2
    2da0:	4628      	mov	r0, r5
    2da2:	4c87      	ldr	r4, [pc, #540]	; (2fc0 <usbdc_cb_ctl_req+0x280>)
    2da4:	47a0      	blx	r4
    2da6:	fab0 f080 	clz	r0, r0
    2daa:	0940      	lsrs	r0, r0, #5
    2dac:	e7e0      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    2dae:	8862      	ldrh	r2, [r4, #2]
    2db0:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    2db2:	b1ca      	cbz	r2, 2de8 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2db4:	4b83      	ldr	r3, [pc, #524]	; (2fc4 <usbdc_cb_ctl_req+0x284>)
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	6859      	ldr	r1, [r3, #4]
    2dba:	6818      	ldr	r0, [r3, #0]
    2dbc:	4b82      	ldr	r3, [pc, #520]	; (2fc8 <usbdc_cb_ctl_req+0x288>)
    2dbe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2dc0:	2800      	cmp	r0, #0
    2dc2:	f000 81be 	beq.w	3142 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    2dc6:	78c2      	ldrb	r2, [r0, #3]
    2dc8:	7881      	ldrb	r1, [r0, #2]
    2dca:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    2dce:	fa10 f181 	uxtah	r1, r0, r1
    2dd2:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2dd4:	2204      	movs	r2, #4
    2dd6:	4b7d      	ldr	r3, [pc, #500]	; (2fcc <usbdc_cb_ctl_req+0x28c>)
    2dd8:	4798      	blx	r3
    2dda:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2ddc:	b130      	cbz	r0, 2dec <usbdc_cb_ctl_req+0xac>
    2dde:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2de0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2fc4 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2de4:	4f79      	ldr	r7, [pc, #484]	; (2fcc <usbdc_cb_ctl_req+0x28c>)
    2de6:	e018      	b.n	2e1a <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    2de8:	4b79      	ldr	r3, [pc, #484]	; (2fd0 <usbdc_cb_ctl_req+0x290>)
    2dea:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2dec:	2301      	movs	r3, #1
    2dee:	2200      	movs	r2, #0
    2df0:	4611      	mov	r1, r2
    2df2:	4628      	mov	r0, r5
    2df4:	4c72      	ldr	r4, [pc, #456]	; (2fc0 <usbdc_cb_ctl_req+0x280>)
    2df6:	47a0      	blx	r4
    2df8:	fab0 f080 	clz	r0, r0
    2dfc:	0940      	lsrs	r0, r0, #5
    2dfe:	e7b7      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    2e00:	464c      	mov	r4, r9
    2e02:	e000      	b.n	2e06 <usbdc_cb_ctl_req+0xc6>
    2e04:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    2e06:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2e08:	7803      	ldrb	r3, [r0, #0]
    2e0a:	4418      	add	r0, r3
    2e0c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2e0e:	2204      	movs	r2, #4
    2e10:	9901      	ldr	r1, [sp, #4]
    2e12:	47b8      	blx	r7
    2e14:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2e16:	2800      	cmp	r0, #0
    2e18:	d0e8      	beq.n	2dec <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2e1a:	f890 9002 	ldrb.w	r9, [r0, #2]
    2e1e:	45a1      	cmp	r9, r4
    2e20:	d0f1      	beq.n	2e06 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2e22:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2e26:	2c00      	cmp	r4, #0
    2e28:	d0ea      	beq.n	2e00 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2e2a:	2600      	movs	r6, #0
    2e2c:	6863      	ldr	r3, [r4, #4]
    2e2e:	466a      	mov	r2, sp
    2e30:	4631      	mov	r1, r6
    2e32:	4620      	mov	r0, r4
    2e34:	4798      	blx	r3
    2e36:	2800      	cmp	r0, #0
    2e38:	d0e4      	beq.n	2e04 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2e3a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2e3c:	2c00      	cmp	r4, #0
    2e3e:	d1f5      	bne.n	2e2c <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    2e40:	464c      	mov	r4, r9
    2e42:	e7e0      	b.n	2e06 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2e44:	f003 031f 	and.w	r3, r3, #31
    2e48:	2b02      	cmp	r3, #2
    2e4a:	f040 816e 	bne.w	312a <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    2e4e:	88e3      	ldrh	r3, [r4, #6]
    2e50:	b10b      	cbz	r3, 2e56 <usbdc_cb_ctl_req+0x116>
			return false;
    2e52:	2000      	movs	r0, #0
    2e54:	e78c      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2e56:	88a0      	ldrh	r0, [r4, #4]
    2e58:	2100      	movs	r1, #0
    2e5a:	b2c0      	uxtb	r0, r0
    2e5c:	4b5d      	ldr	r3, [pc, #372]	; (2fd4 <usbdc_cb_ctl_req+0x294>)
    2e5e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2e60:	2301      	movs	r3, #1
    2e62:	2200      	movs	r2, #0
    2e64:	4611      	mov	r1, r2
    2e66:	4628      	mov	r0, r5
    2e68:	4c55      	ldr	r4, [pc, #340]	; (2fc0 <usbdc_cb_ctl_req+0x280>)
    2e6a:	47a0      	blx	r4
		return true;
    2e6c:	2001      	movs	r0, #1
    2e6e:	e77f      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2e70:	f003 031f 	and.w	r3, r3, #31
    2e74:	2b02      	cmp	r3, #2
    2e76:	f040 815a 	bne.w	312e <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2e7a:	88e3      	ldrh	r3, [r4, #6]
    2e7c:	b10b      	cbz	r3, 2e82 <usbdc_cb_ctl_req+0x142>
			return false;
    2e7e:	2000      	movs	r0, #0
    2e80:	e776      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2e82:	88a0      	ldrh	r0, [r4, #4]
    2e84:	2101      	movs	r1, #1
    2e86:	b2c0      	uxtb	r0, r0
    2e88:	4b52      	ldr	r3, [pc, #328]	; (2fd4 <usbdc_cb_ctl_req+0x294>)
    2e8a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2e8c:	2301      	movs	r3, #1
    2e8e:	2200      	movs	r2, #0
    2e90:	4611      	mov	r1, r2
    2e92:	4628      	mov	r0, r5
    2e94:	4c4a      	ldr	r4, [pc, #296]	; (2fc0 <usbdc_cb_ctl_req+0x280>)
    2e96:	47a0      	blx	r4
		return true;
    2e98:	2001      	movs	r0, #1
    2e9a:	e769      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2e9c:	8866      	ldrh	r6, [r4, #2]
    2e9e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2ea0:	4a48      	ldr	r2, [pc, #288]	; (2fc4 <usbdc_cb_ctl_req+0x284>)
    2ea2:	6813      	ldr	r3, [r2, #0]
    2ea4:	7ed2      	ldrb	r2, [r2, #27]
    2ea6:	6859      	ldr	r1, [r3, #4]
    2ea8:	6818      	ldr	r0, [r3, #0]
    2eaa:	4b47      	ldr	r3, [pc, #284]	; (2fc8 <usbdc_cb_ctl_req+0x288>)
    2eac:	4798      	blx	r3
	if (NULL == ifc) {
    2eae:	2800      	cmp	r0, #0
    2eb0:	d045      	beq.n	2f3e <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    2eb2:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2eb4:	78c2      	ldrb	r2, [r0, #3]
    2eb6:	7881      	ldrb	r1, [r0, #2]
    2eb8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2ebc:	fa10 f181 	uxtah	r1, r0, r1
    2ec0:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2ec2:	2204      	movs	r2, #4
    2ec4:	4b41      	ldr	r3, [pc, #260]	; (2fcc <usbdc_cb_ctl_req+0x28c>)
    2ec6:	4798      	blx	r3
    2ec8:	4603      	mov	r3, r0
    2eca:	2800      	cmp	r0, #0
    2ecc:	d039      	beq.n	2f42 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2ece:	2704      	movs	r7, #4
    2ed0:	4d3e      	ldr	r5, [pc, #248]	; (2fcc <usbdc_cb_ctl_req+0x28c>)
    2ed2:	e008      	b.n	2ee6 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    2ed4:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2ed6:	7803      	ldrb	r3, [r0, #0]
    2ed8:	4418      	add	r0, r3
    2eda:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2edc:	463a      	mov	r2, r7
    2ede:	9901      	ldr	r1, [sp, #4]
    2ee0:	47a8      	blx	r5
		if (NULL == ifc) {
    2ee2:	4603      	mov	r3, r0
    2ee4:	b378      	cbz	r0, 2f46 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2ee6:	789a      	ldrb	r2, [r3, #2]
    2ee8:	42a2      	cmp	r2, r4
    2eea:	d1f3      	bne.n	2ed4 <usbdc_cb_ctl_req+0x194>
    2eec:	78da      	ldrb	r2, [r3, #3]
    2eee:	42b2      	cmp	r2, r6
    2ef0:	d1f0      	bne.n	2ed4 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    2ef2:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2ef4:	4b33      	ldr	r3, [pc, #204]	; (2fc4 <usbdc_cb_ctl_req+0x284>)
    2ef6:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    2ef8:	b33d      	cbz	r5, 2f4a <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2efa:	2701      	movs	r7, #1
    2efc:	686b      	ldr	r3, [r5, #4]
    2efe:	466a      	mov	r2, sp
    2f00:	4639      	mov	r1, r7
    2f02:	4628      	mov	r0, r5
    2f04:	4798      	blx	r3
    2f06:	b120      	cbz	r0, 2f12 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    2f08:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2f0a:	2d00      	cmp	r5, #0
    2f0c:	d1f6      	bne.n	2efc <usbdc_cb_ctl_req+0x1bc>
	return false;
    2f0e:	2000      	movs	r0, #0
    2f10:	e72e      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2f12:	686b      	ldr	r3, [r5, #4]
    2f14:	466a      	mov	r2, sp
    2f16:	2100      	movs	r1, #0
    2f18:	4628      	mov	r0, r5
    2f1a:	4798      	blx	r3
    2f1c:	b9b8      	cbnz	r0, 2f4e <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    2f1e:	b136      	cbz	r6, 2f2e <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2f20:	4a28      	ldr	r2, [pc, #160]	; (2fc4 <usbdc_cb_ctl_req+0x284>)
    2f22:	2301      	movs	r3, #1
    2f24:	fa03 f404 	lsl.w	r4, r3, r4
    2f28:	7f53      	ldrb	r3, [r2, #29]
    2f2a:	4323      	orrs	r3, r4
    2f2c:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2f2e:	2300      	movs	r3, #0
    2f30:	461a      	mov	r2, r3
    2f32:	4619      	mov	r1, r3
    2f34:	4618      	mov	r0, r3
    2f36:	4c22      	ldr	r4, [pc, #136]	; (2fc0 <usbdc_cb_ctl_req+0x280>)
    2f38:	47a0      	blx	r4
			return true;
    2f3a:	2001      	movs	r0, #1
    2f3c:	e718      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    2f3e:	2000      	movs	r0, #0
    2f40:	e716      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    2f42:	2000      	movs	r0, #0
    2f44:	e714      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
			return false;
    2f46:	2000      	movs	r0, #0
    2f48:	e712      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
	return false;
    2f4a:	2000      	movs	r0, #0
    2f4c:	e710      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
			return false;
    2f4e:	2000      	movs	r0, #0
    2f50:	e70e      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    2f52:	7862      	ldrb	r2, [r4, #1]
    2f54:	2a0a      	cmp	r2, #10
    2f56:	f200 80ec 	bhi.w	3132 <usbdc_cb_ctl_req+0x3f2>
    2f5a:	e8df f012 	tbh	[pc, r2, lsl #1]
    2f5e:	008e      	.short	0x008e
    2f60:	00ea00ea 	.word	0x00ea00ea
    2f64:	00ea00ea 	.word	0x00ea00ea
    2f68:	000b00ea 	.word	0x000b00ea
    2f6c:	008200ea 	.word	0x008200ea
    2f70:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2f74:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2f76:	0a13      	lsrs	r3, r2, #8
    2f78:	2b02      	cmp	r3, #2
    2f7a:	d02d      	beq.n	2fd8 <usbdc_cb_ctl_req+0x298>
    2f7c:	2b03      	cmp	r3, #3
    2f7e:	d050      	beq.n	3022 <usbdc_cb_ctl_req+0x2e2>
    2f80:	2b01      	cmp	r3, #1
    2f82:	d001      	beq.n	2f88 <usbdc_cb_ctl_req+0x248>
	return false;
    2f84:	2000      	movs	r0, #0
    2f86:	e6f3      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2f88:	88e2      	ldrh	r2, [r4, #6]
    2f8a:	2a12      	cmp	r2, #18
    2f8c:	bf28      	it	cs
    2f8e:	2212      	movcs	r2, #18
    2f90:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2f92:	4b0c      	ldr	r3, [pc, #48]	; (2fc4 <usbdc_cb_ctl_req+0x284>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	2201      	movs	r2, #1
    2f98:	6859      	ldr	r1, [r3, #4]
    2f9a:	6818      	ldr	r0, [r3, #0]
    2f9c:	4b0b      	ldr	r3, [pc, #44]	; (2fcc <usbdc_cb_ctl_req+0x28c>)
    2f9e:	4798      	blx	r3
	if (!dev_desc) {
    2fa0:	4601      	mov	r1, r0
    2fa2:	2800      	cmp	r0, #0
    2fa4:	f000 80c7 	beq.w	3136 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2fa8:	2300      	movs	r3, #0
    2faa:	4622      	mov	r2, r4
    2fac:	4628      	mov	r0, r5
    2fae:	4c04      	ldr	r4, [pc, #16]	; (2fc0 <usbdc_cb_ctl_req+0x280>)
    2fb0:	47a0      	blx	r4
    2fb2:	fab0 f080 	clz	r0, r0
    2fb6:	0940      	lsrs	r0, r0, #5
    2fb8:	e6da      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
    2fba:	bf00      	nop
    2fbc:	00002bd5 	.word	0x00002bd5
    2fc0:	00002d21 	.word	0x00002d21
    2fc4:	20000744 	.word	0x20000744
    2fc8:	000032e5 	.word	0x000032e5
    2fcc:	00003265 	.word	0x00003265
    2fd0:	00002b89 	.word	0x00002b89
    2fd4:	00000e01 	.word	0x00000e01
	uint16_t length   = req->wLength;
    2fd8:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2fda:	4b5b      	ldr	r3, [pc, #364]	; (3148 <usbdc_cb_ctl_req+0x408>)
    2fdc:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	3201      	adds	r2, #1
    2fe2:	b2d2      	uxtb	r2, r2
    2fe4:	6859      	ldr	r1, [r3, #4]
    2fe6:	6818      	ldr	r0, [r3, #0]
    2fe8:	4b58      	ldr	r3, [pc, #352]	; (314c <usbdc_cb_ctl_req+0x40c>)
    2fea:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2fec:	4601      	mov	r1, r0
    2fee:	2800      	cmp	r0, #0
    2ff0:	f000 80a3 	beq.w	313a <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    2ff4:	78c3      	ldrb	r3, [r0, #3]
    2ff6:	7882      	ldrb	r2, [r0, #2]
    2ff8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2ffc:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2ffe:	4294      	cmp	r4, r2
    3000:	d90d      	bls.n	301e <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3002:	3e01      	subs	r6, #1
    3004:	4226      	tst	r6, r4
    3006:	bf0c      	ite	eq
    3008:	2301      	moveq	r3, #1
    300a:	2300      	movne	r3, #0
		length = total_len;
    300c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    300e:	4622      	mov	r2, r4
    3010:	4628      	mov	r0, r5
    3012:	4c4f      	ldr	r4, [pc, #316]	; (3150 <usbdc_cb_ctl_req+0x410>)
    3014:	47a0      	blx	r4
    3016:	fab0 f080 	clz	r0, r0
    301a:	0940      	lsrs	r0, r0, #5
    301c:	e6a8      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    301e:	2300      	movs	r3, #0
    3020:	e7f5      	b.n	300e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    3022:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3024:	4b48      	ldr	r3, [pc, #288]	; (3148 <usbdc_cb_ctl_req+0x408>)
    3026:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	b2d2      	uxtb	r2, r2
    302c:	6859      	ldr	r1, [r3, #4]
    302e:	6818      	ldr	r0, [r3, #0]
    3030:	4b48      	ldr	r3, [pc, #288]	; (3154 <usbdc_cb_ctl_req+0x414>)
    3032:	4798      	blx	r3
	if (NULL == str_desc) {
    3034:	4601      	mov	r1, r0
    3036:	2800      	cmp	r0, #0
    3038:	f000 8081 	beq.w	313e <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    303c:	7802      	ldrb	r2, [r0, #0]
    303e:	4294      	cmp	r4, r2
    3040:	d90d      	bls.n	305e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3042:	3e01      	subs	r6, #1
    3044:	4226      	tst	r6, r4
    3046:	bf0c      	ite	eq
    3048:	2301      	moveq	r3, #1
    304a:	2300      	movne	r3, #0
		length = str_desc[0];
    304c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    304e:	4622      	mov	r2, r4
    3050:	4628      	mov	r0, r5
    3052:	4c3f      	ldr	r4, [pc, #252]	; (3150 <usbdc_cb_ctl_req+0x410>)
    3054:	47a0      	blx	r4
    3056:	fab0 f080 	clz	r0, r0
    305a:	0940      	lsrs	r0, r0, #5
    305c:	e688      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    305e:	2300      	movs	r3, #0
    3060:	e7f5      	b.n	304e <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3062:	4939      	ldr	r1, [pc, #228]	; (3148 <usbdc_cb_ctl_req+0x408>)
    3064:	694b      	ldr	r3, [r1, #20]
    3066:	7eca      	ldrb	r2, [r1, #27]
    3068:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    306a:	2300      	movs	r3, #0
    306c:	2201      	movs	r2, #1
    306e:	6949      	ldr	r1, [r1, #20]
    3070:	4628      	mov	r0, r5
    3072:	4c37      	ldr	r4, [pc, #220]	; (3150 <usbdc_cb_ctl_req+0x410>)
    3074:	47a0      	blx	r4
		return true;
    3076:	2001      	movs	r0, #1
    3078:	e67a      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    307a:	f003 031f 	and.w	r3, r3, #31
    307e:	2b01      	cmp	r3, #1
    3080:	d903      	bls.n	308a <usbdc_cb_ctl_req+0x34a>
    3082:	2b02      	cmp	r3, #2
    3084:	d010      	beq.n	30a8 <usbdc_cb_ctl_req+0x368>
		return false;
    3086:	2000      	movs	r0, #0
    3088:	e672      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		st = 0;
    308a:	2300      	movs	r3, #0
    308c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    308e:	492e      	ldr	r1, [pc, #184]	; (3148 <usbdc_cb_ctl_req+0x408>)
    3090:	694b      	ldr	r3, [r1, #20]
    3092:	f8bd 2000 	ldrh.w	r2, [sp]
    3096:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3098:	2300      	movs	r3, #0
    309a:	2202      	movs	r2, #2
    309c:	6949      	ldr	r1, [r1, #20]
    309e:	4628      	mov	r0, r5
    30a0:	4c2b      	ldr	r4, [pc, #172]	; (3150 <usbdc_cb_ctl_req+0x410>)
    30a2:	47a0      	blx	r4
	return true;
    30a4:	2001      	movs	r0, #1
    30a6:	e663      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    30a8:	88a0      	ldrh	r0, [r4, #4]
    30aa:	2102      	movs	r1, #2
    30ac:	b2c0      	uxtb	r0, r0
    30ae:	4b2a      	ldr	r3, [pc, #168]	; (3158 <usbdc_cb_ctl_req+0x418>)
    30b0:	4798      	blx	r3
		if (st < 0) {
    30b2:	2800      	cmp	r0, #0
    30b4:	db03      	blt.n	30be <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    30b6:	f000 0001 	and.w	r0, r0, #1
    30ba:	9000      	str	r0, [sp, #0]
    30bc:	e7e7      	b.n	308e <usbdc_cb_ctl_req+0x34e>
			return false;
    30be:	2000      	movs	r0, #0
    30c0:	e656      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    30c2:	4b21      	ldr	r3, [pc, #132]	; (3148 <usbdc_cb_ctl_req+0x408>)
    30c4:	7f5b      	ldrb	r3, [r3, #29]
    30c6:	88a2      	ldrh	r2, [r4, #4]
    30c8:	4113      	asrs	r3, r2
    30ca:	f013 0f01 	tst.w	r3, #1
    30ce:	d012      	beq.n	30f6 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    30d0:	4b1d      	ldr	r3, [pc, #116]	; (3148 <usbdc_cb_ctl_req+0x408>)
    30d2:	691d      	ldr	r5, [r3, #16]
	return false;
    30d4:	2000      	movs	r0, #0
	while (NULL != func) {
    30d6:	2d00      	cmp	r5, #0
    30d8:	f43f ae4a 	beq.w	2d70 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    30dc:	2602      	movs	r6, #2
    30de:	686b      	ldr	r3, [r5, #4]
    30e0:	4622      	mov	r2, r4
    30e2:	4631      	mov	r1, r6
    30e4:	4628      	mov	r0, r5
    30e6:	4798      	blx	r3
    30e8:	2800      	cmp	r0, #0
    30ea:	da0f      	bge.n	310c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    30ec:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    30ee:	2d00      	cmp	r5, #0
    30f0:	d1f5      	bne.n	30de <usbdc_cb_ctl_req+0x39e>
	return false;
    30f2:	2000      	movs	r0, #0
    30f4:	e63c      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    30f6:	4914      	ldr	r1, [pc, #80]	; (3148 <usbdc_cb_ctl_req+0x408>)
    30f8:	694b      	ldr	r3, [r1, #20]
    30fa:	2000      	movs	r0, #0
    30fc:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    30fe:	4603      	mov	r3, r0
    3100:	2201      	movs	r2, #1
    3102:	6949      	ldr	r1, [r1, #20]
    3104:	4c12      	ldr	r4, [pc, #72]	; (3150 <usbdc_cb_ctl_req+0x410>)
    3106:	47a0      	blx	r4
		return true;
    3108:	2001      	movs	r0, #1
    310a:	e631      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    310c:	490e      	ldr	r1, [pc, #56]	; (3148 <usbdc_cb_ctl_req+0x408>)
    310e:	694b      	ldr	r3, [r1, #20]
    3110:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3112:	2300      	movs	r3, #0
    3114:	2201      	movs	r2, #1
    3116:	6949      	ldr	r1, [r1, #20]
    3118:	4618      	mov	r0, r3
    311a:	4c0d      	ldr	r4, [pc, #52]	; (3150 <usbdc_cb_ctl_req+0x410>)
    311c:	47a0      	blx	r4
			return true;
    311e:	2001      	movs	r0, #1
    3120:	e626      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return true;
    3122:	2001      	movs	r0, #1
    3124:	e624      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    3126:	2000      	movs	r0, #0
    3128:	e622      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    312a:	2000      	movs	r0, #0
    312c:	e620      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    312e:	2000      	movs	r0, #0
    3130:	e61e      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    3132:	2000      	movs	r0, #0
    3134:	e61c      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    3136:	2000      	movs	r0, #0
    3138:	e61a      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    313a:	2000      	movs	r0, #0
    313c:	e618      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
		return false;
    313e:	2000      	movs	r0, #0
    3140:	e616      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
			return false;
    3142:	2000      	movs	r0, #0
    3144:	e614      	b.n	2d70 <usbdc_cb_ctl_req+0x30>
    3146:	bf00      	nop
    3148:	20000744 	.word	0x20000744
    314c:	000032e5 	.word	0x000032e5
    3150:	00002d21 	.word	0x00002d21
    3154:	0000334d 	.word	0x0000334d
    3158:	00000e01 	.word	0x00000e01

0000315c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    315c:	b508      	push	{r3, lr}
	switch (type) {
    315e:	2801      	cmp	r0, #1
    3160:	d007      	beq.n	3172 <usbdc_register_handler+0x16>
    3162:	b110      	cbz	r0, 316a <usbdc_register_handler+0xe>
    3164:	2802      	cmp	r0, #2
    3166:	d008      	beq.n	317a <usbdc_register_handler+0x1e>
    3168:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    316a:	4806      	ldr	r0, [pc, #24]	; (3184 <usbdc_register_handler+0x28>)
    316c:	4b06      	ldr	r3, [pc, #24]	; (3188 <usbdc_register_handler+0x2c>)
    316e:	4798      	blx	r3
		break;
    3170:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3172:	4806      	ldr	r0, [pc, #24]	; (318c <usbdc_register_handler+0x30>)
    3174:	4b04      	ldr	r3, [pc, #16]	; (3188 <usbdc_register_handler+0x2c>)
    3176:	4798      	blx	r3
		break;
    3178:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    317a:	4805      	ldr	r0, [pc, #20]	; (3190 <usbdc_register_handler+0x34>)
    317c:	4b02      	ldr	r3, [pc, #8]	; (3188 <usbdc_register_handler+0x2c>)
    317e:	4798      	blx	r3
    3180:	bd08      	pop	{r3, pc}
    3182:	bf00      	nop
    3184:	20000748 	.word	0x20000748
    3188:	0000340d 	.word	0x0000340d
    318c:	2000074c 	.word	0x2000074c
    3190:	20000750 	.word	0x20000750

00003194 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3194:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    3196:	4605      	mov	r5, r0
    3198:	f240 3255 	movw	r2, #853	; 0x355
    319c:	490c      	ldr	r1, [pc, #48]	; (31d0 <usbdc_init+0x3c>)
    319e:	3000      	adds	r0, #0
    31a0:	bf18      	it	ne
    31a2:	2001      	movne	r0, #1
    31a4:	4b0b      	ldr	r3, [pc, #44]	; (31d4 <usbdc_init+0x40>)
    31a6:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    31a8:	4b0b      	ldr	r3, [pc, #44]	; (31d8 <usbdc_init+0x44>)
    31aa:	4798      	blx	r3
	if (rc < 0) {
    31ac:	2800      	cmp	r0, #0
    31ae:	db0e      	blt.n	31ce <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    31b0:	4c0a      	ldr	r4, [pc, #40]	; (31dc <usbdc_init+0x48>)
    31b2:	2220      	movs	r2, #32
    31b4:	2100      	movs	r1, #0
    31b6:	4620      	mov	r0, r4
    31b8:	4b09      	ldr	r3, [pc, #36]	; (31e0 <usbdc_init+0x4c>)
    31ba:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    31bc:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    31be:	4909      	ldr	r1, [pc, #36]	; (31e4 <usbdc_init+0x50>)
    31c0:	2000      	movs	r0, #0
    31c2:	4c09      	ldr	r4, [pc, #36]	; (31e8 <usbdc_init+0x54>)
    31c4:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    31c6:	4909      	ldr	r1, [pc, #36]	; (31ec <usbdc_init+0x58>)
    31c8:	2001      	movs	r0, #1
    31ca:	47a0      	blx	r4

	return 0;
    31cc:	2000      	movs	r0, #0
}
    31ce:	bd38      	pop	{r3, r4, r5, pc}
    31d0:	0000388c 	.word	0x0000388c
    31d4:	00000eb5 	.word	0x00000eb5
    31d8:	00000b69 	.word	0x00000b69
    31dc:	20000744 	.word	0x20000744
    31e0:	000035d1 	.word	0x000035d1
    31e4:	00002c15 	.word	0x00002c15
    31e8:	00000bd1 	.word	0x00000bd1
    31ec:	00002d01 	.word	0x00002d01

000031f0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    31f0:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    31f2:	4601      	mov	r1, r0
    31f4:	4801      	ldr	r0, [pc, #4]	; (31fc <usbdc_register_function+0xc>)
    31f6:	4b02      	ldr	r3, [pc, #8]	; (3200 <usbdc_register_function+0x10>)
    31f8:	4798      	blx	r3
    31fa:	bd08      	pop	{r3, pc}
    31fc:	20000754 	.word	0x20000754
    3200:	0000340d 	.word	0x0000340d

00003204 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3204:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3206:	4b0a      	ldr	r3, [pc, #40]	; (3230 <usbdc_start+0x2c>)
    3208:	7e9b      	ldrb	r3, [r3, #26]
    320a:	b95b      	cbnz	r3, 3224 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    320c:	b168      	cbz	r0, 322a <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    320e:	4b08      	ldr	r3, [pc, #32]	; (3230 <usbdc_start+0x2c>)
    3210:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3212:	6802      	ldr	r2, [r0, #0]
    3214:	79d2      	ldrb	r2, [r2, #7]
    3216:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3218:	2201      	movs	r2, #1
    321a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    321c:	4b05      	ldr	r3, [pc, #20]	; (3234 <usbdc_start+0x30>)
    321e:	4798      	blx	r3
	return ERR_NONE;
    3220:	2000      	movs	r0, #0
    3222:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    3224:	f06f 0003 	mvn.w	r0, #3
    3228:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    322a:	f06f 0008 	mvn.w	r0, #8
}
    322e:	bd08      	pop	{r3, pc}
    3230:	20000744 	.word	0x20000744
    3234:	00000bdd 	.word	0x00000bdd

00003238 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3238:	b508      	push	{r3, lr}
	usb_d_attach();
    323a:	4b01      	ldr	r3, [pc, #4]	; (3240 <usbdc_attach+0x8>)
    323c:	4798      	blx	r3
    323e:	bd08      	pop	{r3, pc}
    3240:	00000be9 	.word	0x00000be9

00003244 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    3244:	4b01      	ldr	r3, [pc, #4]	; (324c <usbdc_get_ctrl_buffer+0x8>)
    3246:	6958      	ldr	r0, [r3, #20]
    3248:	4770      	bx	lr
    324a:	bf00      	nop
    324c:	20000744 	.word	0x20000744

00003250 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3250:	4b03      	ldr	r3, [pc, #12]	; (3260 <usbdc_get_state+0x10>)
    3252:	7e98      	ldrb	r0, [r3, #26]
    3254:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3258:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    325a:	bf18      	it	ne
    325c:	2010      	movne	r0, #16
    325e:	4770      	bx	lr
    3260:	20000744 	.word	0x20000744

00003264 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3264:	4288      	cmp	r0, r1
    3266:	d214      	bcs.n	3292 <usb_find_desc+0x2e>
	return desc[0];
    3268:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    326a:	2b01      	cmp	r3, #1
    326c:	d913      	bls.n	3296 <usb_find_desc+0x32>
{
    326e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    3270:	7844      	ldrb	r4, [r0, #1]
    3272:	4294      	cmp	r4, r2
    3274:	d00a      	beq.n	328c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3276:	4418      	add	r0, r3
	while (desc < eof) {
    3278:	4281      	cmp	r1, r0
    327a:	d906      	bls.n	328a <usb_find_desc+0x26>
	return desc[0];
    327c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    327e:	2b01      	cmp	r3, #1
    3280:	d90b      	bls.n	329a <usb_find_desc+0x36>
	return desc[1];
    3282:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3284:	4294      	cmp	r4, r2
    3286:	d1f6      	bne.n	3276 <usb_find_desc+0x12>
    3288:	e000      	b.n	328c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    328a:	2000      	movs	r0, #0
}
    328c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3290:	4770      	bx	lr
	return NULL;
    3292:	2000      	movs	r0, #0
    3294:	4770      	bx	lr
		_desc_len_check();
    3296:	2000      	movs	r0, #0
    3298:	4770      	bx	lr
    329a:	2000      	movs	r0, #0
    329c:	e7f6      	b.n	328c <usb_find_desc+0x28>

0000329e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    329e:	4288      	cmp	r0, r1
    32a0:	d216      	bcs.n	32d0 <usb_find_ep_desc+0x32>
	return desc[0];
    32a2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    32a4:	2b01      	cmp	r3, #1
    32a6:	d915      	bls.n	32d4 <usb_find_ep_desc+0x36>
	return desc[1];
    32a8:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    32aa:	2a04      	cmp	r2, #4
    32ac:	d014      	beq.n	32d8 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    32ae:	2a05      	cmp	r2, #5
    32b0:	d00b      	beq.n	32ca <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    32b2:	4418      	add	r0, r3
	while (desc < eof) {
    32b4:	4281      	cmp	r1, r0
    32b6:	d909      	bls.n	32cc <usb_find_ep_desc+0x2e>
	return desc[0];
    32b8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    32ba:	2b01      	cmp	r3, #1
    32bc:	d90e      	bls.n	32dc <usb_find_ep_desc+0x3e>
	return desc[1];
    32be:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    32c0:	2a04      	cmp	r2, #4
    32c2:	d00d      	beq.n	32e0 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    32c4:	2a05      	cmp	r2, #5
    32c6:	d1f4      	bne.n	32b2 <usb_find_ep_desc+0x14>
    32c8:	e00b      	b.n	32e2 <usb_find_ep_desc+0x44>
    32ca:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    32cc:	2000      	movs	r0, #0
    32ce:	4770      	bx	lr
    32d0:	2000      	movs	r0, #0
    32d2:	4770      	bx	lr
		_desc_len_check();
    32d4:	2000      	movs	r0, #0
    32d6:	4770      	bx	lr
	return NULL;
    32d8:	2000      	movs	r0, #0
    32da:	4770      	bx	lr
		_desc_len_check();
    32dc:	2000      	movs	r0, #0
    32de:	4770      	bx	lr
	return NULL;
    32e0:	2000      	movs	r0, #0
}
    32e2:	4770      	bx	lr

000032e4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    32e4:	b538      	push	{r3, r4, r5, lr}
    32e6:	460c      	mov	r4, r1
    32e8:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    32ea:	2202      	movs	r2, #2
    32ec:	4b16      	ldr	r3, [pc, #88]	; (3348 <usb_find_cfg_desc+0x64>)
    32ee:	4798      	blx	r3
	if (!desc) {
    32f0:	4603      	mov	r3, r0
    32f2:	b1e8      	cbz	r0, 3330 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    32f4:	4284      	cmp	r4, r0
    32f6:	d91d      	bls.n	3334 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    32f8:	7802      	ldrb	r2, [r0, #0]
    32fa:	2a01      	cmp	r2, #1
    32fc:	d91c      	bls.n	3338 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    32fe:	7842      	ldrb	r2, [r0, #1]
    3300:	2a02      	cmp	r2, #2
    3302:	d11b      	bne.n	333c <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    3304:	7942      	ldrb	r2, [r0, #5]
    3306:	42aa      	cmp	r2, r5
    3308:	d012      	beq.n	3330 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    330a:	78d9      	ldrb	r1, [r3, #3]
    330c:	789a      	ldrb	r2, [r3, #2]
    330e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3312:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    3316:	429c      	cmp	r4, r3
    3318:	d909      	bls.n	332e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    331a:	781a      	ldrb	r2, [r3, #0]
    331c:	2a01      	cmp	r2, #1
    331e:	d90f      	bls.n	3340 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3320:	785a      	ldrb	r2, [r3, #1]
    3322:	2a02      	cmp	r2, #2
    3324:	d10e      	bne.n	3344 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    3326:	795a      	ldrb	r2, [r3, #5]
    3328:	42aa      	cmp	r2, r5
    332a:	d1ee      	bne.n	330a <usb_find_cfg_desc+0x26>
    332c:	e000      	b.n	3330 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    332e:	2300      	movs	r3, #0
}
    3330:	4618      	mov	r0, r3
    3332:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    3334:	2300      	movs	r3, #0
    3336:	e7fb      	b.n	3330 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3338:	2300      	movs	r3, #0
    333a:	e7f9      	b.n	3330 <usb_find_cfg_desc+0x4c>
	return NULL;
    333c:	2300      	movs	r3, #0
    333e:	e7f7      	b.n	3330 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3340:	2300      	movs	r3, #0
    3342:	e7f5      	b.n	3330 <usb_find_cfg_desc+0x4c>
	return NULL;
    3344:	2300      	movs	r3, #0
    3346:	e7f3      	b.n	3330 <usb_find_cfg_desc+0x4c>
    3348:	00003265 	.word	0x00003265

0000334c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    334c:	4288      	cmp	r0, r1
    334e:	d217      	bcs.n	3380 <usb_find_str_desc+0x34>
{
    3350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3354:	460d      	mov	r5, r1
    3356:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3358:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    335a:	f04f 0803 	mov.w	r8, #3
    335e:	4f0c      	ldr	r7, [pc, #48]	; (3390 <usb_find_str_desc+0x44>)
    3360:	4642      	mov	r2, r8
    3362:	4629      	mov	r1, r5
    3364:	47b8      	blx	r7
		if (desc) {
    3366:	4603      	mov	r3, r0
    3368:	b170      	cbz	r0, 3388 <usb_find_str_desc+0x3c>
	return desc[0];
    336a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    336c:	2801      	cmp	r0, #1
    336e:	d90a      	bls.n	3386 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3370:	42a6      	cmp	r6, r4
    3372:	d009      	beq.n	3388 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    3374:	4418      	add	r0, r3
    3376:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3378:	4285      	cmp	r5, r0
    337a:	d8f1      	bhi.n	3360 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    337c:	2300      	movs	r3, #0
    337e:	e003      	b.n	3388 <usb_find_str_desc+0x3c>
    3380:	2300      	movs	r3, #0
}
    3382:	4618      	mov	r0, r3
    3384:	4770      	bx	lr
			_desc_len_check();
    3386:	2300      	movs	r3, #0
}
    3388:	4618      	mov	r0, r3
    338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    338e:	bf00      	nop
    3390:	00003265 	.word	0x00003265

00003394 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3394:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3396:	4805      	ldr	r0, [pc, #20]	; (33ac <cdc_device_acm_init+0x18>)
    3398:	4b05      	ldr	r3, [pc, #20]	; (33b0 <cdc_device_acm_init+0x1c>)
    339a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    339c:	4b05      	ldr	r3, [pc, #20]	; (33b4 <cdc_device_acm_init+0x20>)
    339e:	4798      	blx	r3

	usbdc_start(single_desc);
    33a0:	4805      	ldr	r0, [pc, #20]	; (33b8 <cdc_device_acm_init+0x24>)
    33a2:	4b06      	ldr	r3, [pc, #24]	; (33bc <cdc_device_acm_init+0x28>)
    33a4:	4798      	blx	r3
	usbdc_attach();
    33a6:	4b06      	ldr	r3, [pc, #24]	; (33c0 <cdc_device_acm_init+0x2c>)
    33a8:	4798      	blx	r3
    33aa:	bd08      	pop	{r3, pc}
    33ac:	200007a4 	.word	0x200007a4
    33b0:	00003195 	.word	0x00003195
    33b4:	00002b11 	.word	0x00002b11
    33b8:	20000008 	.word	0x20000008
    33bc:	00003205 	.word	0x00003205
    33c0:	00003239 	.word	0x00003239

000033c4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    33c4:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    33c6:	4b01      	ldr	r3, [pc, #4]	; (33cc <usb_init+0x8>)
    33c8:	4798      	blx	r3
    33ca:	bd08      	pop	{r3, pc}
    33cc:	00003395 	.word	0x00003395

000033d0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    33d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    33d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    33d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    33d8:	f3bf 8f5f 	dmb	sy
    33dc:	4770      	bx	lr

000033de <atomic_leave_critical>:
    33de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    33e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    33e4:	f383 8810 	msr	PRIMASK, r3
    33e8:	4770      	bx	lr

000033ea <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    33ea:	6803      	ldr	r3, [r0, #0]
    33ec:	b14b      	cbz	r3, 3402 <is_list_element+0x18>
		if (it == element) {
    33ee:	428b      	cmp	r3, r1
    33f0:	d009      	beq.n	3406 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    33f2:	681b      	ldr	r3, [r3, #0]
    33f4:	b11b      	cbz	r3, 33fe <is_list_element+0x14>
		if (it == element) {
    33f6:	4299      	cmp	r1, r3
    33f8:	d1fb      	bne.n	33f2 <is_list_element+0x8>
			return true;
    33fa:	2001      	movs	r0, #1
		}
	}

	return false;
}
    33fc:	4770      	bx	lr
	return false;
    33fe:	2000      	movs	r0, #0
    3400:	4770      	bx	lr
    3402:	2000      	movs	r0, #0
    3404:	4770      	bx	lr
			return true;
    3406:	2001      	movs	r0, #1
    3408:	4770      	bx	lr
	...

0000340c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    340c:	b570      	push	{r4, r5, r6, lr}
    340e:	4605      	mov	r5, r0
    3410:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    3412:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    3414:	4b0a      	ldr	r3, [pc, #40]	; (3440 <list_insert_at_end+0x34>)
    3416:	4798      	blx	r3
    3418:	f080 0001 	eor.w	r0, r0, #1
    341c:	224f      	movs	r2, #79	; 0x4f
    341e:	4909      	ldr	r1, [pc, #36]	; (3444 <list_insert_at_end+0x38>)
    3420:	b2c0      	uxtb	r0, r0
    3422:	4b09      	ldr	r3, [pc, #36]	; (3448 <list_insert_at_end+0x3c>)
    3424:	4798      	blx	r3

	if (!list->head) {
    3426:	682b      	ldr	r3, [r5, #0]
    3428:	b91b      	cbnz	r3, 3432 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    342a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    342c:	6033      	str	r3, [r6, #0]
		return;
    342e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    3430:	461c      	mov	r4, r3
	while (it->next) {
    3432:	6823      	ldr	r3, [r4, #0]
    3434:	2b00      	cmp	r3, #0
    3436:	d1fb      	bne.n	3430 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    3438:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    343a:	6033      	str	r3, [r6, #0]
    343c:	bd70      	pop	{r4, r5, r6, pc}
    343e:	bf00      	nop
    3440:	000033eb 	.word	0x000033eb
    3444:	000038a4 	.word	0x000038a4
    3448:	00000eb5 	.word	0x00000eb5

0000344c <__libc_init_array>:
    344c:	b570      	push	{r4, r5, r6, lr}
    344e:	4e0f      	ldr	r6, [pc, #60]	; (348c <__libc_init_array+0x40>)
    3450:	4d0f      	ldr	r5, [pc, #60]	; (3490 <__libc_init_array+0x44>)
    3452:	1b76      	subs	r6, r6, r5
    3454:	10b6      	asrs	r6, r6, #2
    3456:	bf18      	it	ne
    3458:	2400      	movne	r4, #0
    345a:	d005      	beq.n	3468 <__libc_init_array+0x1c>
    345c:	3401      	adds	r4, #1
    345e:	f855 3b04 	ldr.w	r3, [r5], #4
    3462:	4798      	blx	r3
    3464:	42a6      	cmp	r6, r4
    3466:	d1f9      	bne.n	345c <__libc_init_array+0x10>
    3468:	4e0a      	ldr	r6, [pc, #40]	; (3494 <__libc_init_array+0x48>)
    346a:	4d0b      	ldr	r5, [pc, #44]	; (3498 <__libc_init_array+0x4c>)
    346c:	1b76      	subs	r6, r6, r5
    346e:	f000 fa2b 	bl	38c8 <_init>
    3472:	10b6      	asrs	r6, r6, #2
    3474:	bf18      	it	ne
    3476:	2400      	movne	r4, #0
    3478:	d006      	beq.n	3488 <__libc_init_array+0x3c>
    347a:	3401      	adds	r4, #1
    347c:	f855 3b04 	ldr.w	r3, [r5], #4
    3480:	4798      	blx	r3
    3482:	42a6      	cmp	r6, r4
    3484:	d1f9      	bne.n	347a <__libc_init_array+0x2e>
    3486:	bd70      	pop	{r4, r5, r6, pc}
    3488:	bd70      	pop	{r4, r5, r6, pc}
    348a:	bf00      	nop
    348c:	000038d4 	.word	0x000038d4
    3490:	000038d4 	.word	0x000038d4
    3494:	000038dc 	.word	0x000038dc
    3498:	000038d4 	.word	0x000038d4

0000349c <memcpy>:
    349c:	4684      	mov	ip, r0
    349e:	ea41 0300 	orr.w	r3, r1, r0
    34a2:	f013 0303 	ands.w	r3, r3, #3
    34a6:	d16d      	bne.n	3584 <memcpy+0xe8>
    34a8:	3a40      	subs	r2, #64	; 0x40
    34aa:	d341      	bcc.n	3530 <memcpy+0x94>
    34ac:	f851 3b04 	ldr.w	r3, [r1], #4
    34b0:	f840 3b04 	str.w	r3, [r0], #4
    34b4:	f851 3b04 	ldr.w	r3, [r1], #4
    34b8:	f840 3b04 	str.w	r3, [r0], #4
    34bc:	f851 3b04 	ldr.w	r3, [r1], #4
    34c0:	f840 3b04 	str.w	r3, [r0], #4
    34c4:	f851 3b04 	ldr.w	r3, [r1], #4
    34c8:	f840 3b04 	str.w	r3, [r0], #4
    34cc:	f851 3b04 	ldr.w	r3, [r1], #4
    34d0:	f840 3b04 	str.w	r3, [r0], #4
    34d4:	f851 3b04 	ldr.w	r3, [r1], #4
    34d8:	f840 3b04 	str.w	r3, [r0], #4
    34dc:	f851 3b04 	ldr.w	r3, [r1], #4
    34e0:	f840 3b04 	str.w	r3, [r0], #4
    34e4:	f851 3b04 	ldr.w	r3, [r1], #4
    34e8:	f840 3b04 	str.w	r3, [r0], #4
    34ec:	f851 3b04 	ldr.w	r3, [r1], #4
    34f0:	f840 3b04 	str.w	r3, [r0], #4
    34f4:	f851 3b04 	ldr.w	r3, [r1], #4
    34f8:	f840 3b04 	str.w	r3, [r0], #4
    34fc:	f851 3b04 	ldr.w	r3, [r1], #4
    3500:	f840 3b04 	str.w	r3, [r0], #4
    3504:	f851 3b04 	ldr.w	r3, [r1], #4
    3508:	f840 3b04 	str.w	r3, [r0], #4
    350c:	f851 3b04 	ldr.w	r3, [r1], #4
    3510:	f840 3b04 	str.w	r3, [r0], #4
    3514:	f851 3b04 	ldr.w	r3, [r1], #4
    3518:	f840 3b04 	str.w	r3, [r0], #4
    351c:	f851 3b04 	ldr.w	r3, [r1], #4
    3520:	f840 3b04 	str.w	r3, [r0], #4
    3524:	f851 3b04 	ldr.w	r3, [r1], #4
    3528:	f840 3b04 	str.w	r3, [r0], #4
    352c:	3a40      	subs	r2, #64	; 0x40
    352e:	d2bd      	bcs.n	34ac <memcpy+0x10>
    3530:	3230      	adds	r2, #48	; 0x30
    3532:	d311      	bcc.n	3558 <memcpy+0xbc>
    3534:	f851 3b04 	ldr.w	r3, [r1], #4
    3538:	f840 3b04 	str.w	r3, [r0], #4
    353c:	f851 3b04 	ldr.w	r3, [r1], #4
    3540:	f840 3b04 	str.w	r3, [r0], #4
    3544:	f851 3b04 	ldr.w	r3, [r1], #4
    3548:	f840 3b04 	str.w	r3, [r0], #4
    354c:	f851 3b04 	ldr.w	r3, [r1], #4
    3550:	f840 3b04 	str.w	r3, [r0], #4
    3554:	3a10      	subs	r2, #16
    3556:	d2ed      	bcs.n	3534 <memcpy+0x98>
    3558:	320c      	adds	r2, #12
    355a:	d305      	bcc.n	3568 <memcpy+0xcc>
    355c:	f851 3b04 	ldr.w	r3, [r1], #4
    3560:	f840 3b04 	str.w	r3, [r0], #4
    3564:	3a04      	subs	r2, #4
    3566:	d2f9      	bcs.n	355c <memcpy+0xc0>
    3568:	3204      	adds	r2, #4
    356a:	d008      	beq.n	357e <memcpy+0xe2>
    356c:	07d2      	lsls	r2, r2, #31
    356e:	bf1c      	itt	ne
    3570:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3574:	f800 3b01 	strbne.w	r3, [r0], #1
    3578:	d301      	bcc.n	357e <memcpy+0xe2>
    357a:	880b      	ldrh	r3, [r1, #0]
    357c:	8003      	strh	r3, [r0, #0]
    357e:	4660      	mov	r0, ip
    3580:	4770      	bx	lr
    3582:	bf00      	nop
    3584:	2a08      	cmp	r2, #8
    3586:	d313      	bcc.n	35b0 <memcpy+0x114>
    3588:	078b      	lsls	r3, r1, #30
    358a:	d08d      	beq.n	34a8 <memcpy+0xc>
    358c:	f010 0303 	ands.w	r3, r0, #3
    3590:	d08a      	beq.n	34a8 <memcpy+0xc>
    3592:	f1c3 0304 	rsb	r3, r3, #4
    3596:	1ad2      	subs	r2, r2, r3
    3598:	07db      	lsls	r3, r3, #31
    359a:	bf1c      	itt	ne
    359c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    35a0:	f800 3b01 	strbne.w	r3, [r0], #1
    35a4:	d380      	bcc.n	34a8 <memcpy+0xc>
    35a6:	f831 3b02 	ldrh.w	r3, [r1], #2
    35aa:	f820 3b02 	strh.w	r3, [r0], #2
    35ae:	e77b      	b.n	34a8 <memcpy+0xc>
    35b0:	3a04      	subs	r2, #4
    35b2:	d3d9      	bcc.n	3568 <memcpy+0xcc>
    35b4:	3a01      	subs	r2, #1
    35b6:	f811 3b01 	ldrb.w	r3, [r1], #1
    35ba:	f800 3b01 	strb.w	r3, [r0], #1
    35be:	d2f9      	bcs.n	35b4 <memcpy+0x118>
    35c0:	780b      	ldrb	r3, [r1, #0]
    35c2:	7003      	strb	r3, [r0, #0]
    35c4:	784b      	ldrb	r3, [r1, #1]
    35c6:	7043      	strb	r3, [r0, #1]
    35c8:	788b      	ldrb	r3, [r1, #2]
    35ca:	7083      	strb	r3, [r0, #2]
    35cc:	4660      	mov	r0, ip
    35ce:	4770      	bx	lr

000035d0 <memset>:
    35d0:	b470      	push	{r4, r5, r6}
    35d2:	0786      	lsls	r6, r0, #30
    35d4:	d046      	beq.n	3664 <memset+0x94>
    35d6:	1e54      	subs	r4, r2, #1
    35d8:	2a00      	cmp	r2, #0
    35da:	d041      	beq.n	3660 <memset+0x90>
    35dc:	b2ca      	uxtb	r2, r1
    35de:	4603      	mov	r3, r0
    35e0:	e002      	b.n	35e8 <memset+0x18>
    35e2:	f114 34ff 	adds.w	r4, r4, #4294967295
    35e6:	d33b      	bcc.n	3660 <memset+0x90>
    35e8:	f803 2b01 	strb.w	r2, [r3], #1
    35ec:	079d      	lsls	r5, r3, #30
    35ee:	d1f8      	bne.n	35e2 <memset+0x12>
    35f0:	2c03      	cmp	r4, #3
    35f2:	d92e      	bls.n	3652 <memset+0x82>
    35f4:	b2cd      	uxtb	r5, r1
    35f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    35fa:	2c0f      	cmp	r4, #15
    35fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3600:	d919      	bls.n	3636 <memset+0x66>
    3602:	f103 0210 	add.w	r2, r3, #16
    3606:	4626      	mov	r6, r4
    3608:	3e10      	subs	r6, #16
    360a:	2e0f      	cmp	r6, #15
    360c:	f842 5c10 	str.w	r5, [r2, #-16]
    3610:	f842 5c0c 	str.w	r5, [r2, #-12]
    3614:	f842 5c08 	str.w	r5, [r2, #-8]
    3618:	f842 5c04 	str.w	r5, [r2, #-4]
    361c:	f102 0210 	add.w	r2, r2, #16
    3620:	d8f2      	bhi.n	3608 <memset+0x38>
    3622:	f1a4 0210 	sub.w	r2, r4, #16
    3626:	f022 020f 	bic.w	r2, r2, #15
    362a:	f004 040f 	and.w	r4, r4, #15
    362e:	3210      	adds	r2, #16
    3630:	2c03      	cmp	r4, #3
    3632:	4413      	add	r3, r2
    3634:	d90d      	bls.n	3652 <memset+0x82>
    3636:	461e      	mov	r6, r3
    3638:	4622      	mov	r2, r4
    363a:	3a04      	subs	r2, #4
    363c:	2a03      	cmp	r2, #3
    363e:	f846 5b04 	str.w	r5, [r6], #4
    3642:	d8fa      	bhi.n	363a <memset+0x6a>
    3644:	1f22      	subs	r2, r4, #4
    3646:	f022 0203 	bic.w	r2, r2, #3
    364a:	3204      	adds	r2, #4
    364c:	4413      	add	r3, r2
    364e:	f004 0403 	and.w	r4, r4, #3
    3652:	b12c      	cbz	r4, 3660 <memset+0x90>
    3654:	b2c9      	uxtb	r1, r1
    3656:	441c      	add	r4, r3
    3658:	f803 1b01 	strb.w	r1, [r3], #1
    365c:	429c      	cmp	r4, r3
    365e:	d1fb      	bne.n	3658 <memset+0x88>
    3660:	bc70      	pop	{r4, r5, r6}
    3662:	4770      	bx	lr
    3664:	4614      	mov	r4, r2
    3666:	4603      	mov	r3, r0
    3668:	e7c2      	b.n	35f0 <memset+0x20>
    366a:	bf00      	nop

0000366c <register_fini>:
    366c:	4b02      	ldr	r3, [pc, #8]	; (3678 <register_fini+0xc>)
    366e:	b113      	cbz	r3, 3676 <register_fini+0xa>
    3670:	4802      	ldr	r0, [pc, #8]	; (367c <register_fini+0x10>)
    3672:	f000 b805 	b.w	3680 <atexit>
    3676:	4770      	bx	lr
    3678:	00000000 	.word	0x00000000
    367c:	0000368d 	.word	0x0000368d

00003680 <atexit>:
    3680:	2300      	movs	r3, #0
    3682:	4601      	mov	r1, r0
    3684:	461a      	mov	r2, r3
    3686:	4618      	mov	r0, r3
    3688:	f000 b81e 	b.w	36c8 <__register_exitproc>

0000368c <__libc_fini_array>:
    368c:	b538      	push	{r3, r4, r5, lr}
    368e:	4c0a      	ldr	r4, [pc, #40]	; (36b8 <__libc_fini_array+0x2c>)
    3690:	4d0a      	ldr	r5, [pc, #40]	; (36bc <__libc_fini_array+0x30>)
    3692:	1b64      	subs	r4, r4, r5
    3694:	10a4      	asrs	r4, r4, #2
    3696:	d00a      	beq.n	36ae <__libc_fini_array+0x22>
    3698:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    369c:	3b01      	subs	r3, #1
    369e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    36a2:	3c01      	subs	r4, #1
    36a4:	f855 3904 	ldr.w	r3, [r5], #-4
    36a8:	4798      	blx	r3
    36aa:	2c00      	cmp	r4, #0
    36ac:	d1f9      	bne.n	36a2 <__libc_fini_array+0x16>
    36ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    36b2:	f000 b913 	b.w	38dc <_fini>
    36b6:	bf00      	nop
    36b8:	000038ec 	.word	0x000038ec
    36bc:	000038e8 	.word	0x000038e8

000036c0 <__retarget_lock_acquire_recursive>:
    36c0:	4770      	bx	lr
    36c2:	bf00      	nop

000036c4 <__retarget_lock_release_recursive>:
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop

000036c8 <__register_exitproc>:
    36c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36cc:	4d2c      	ldr	r5, [pc, #176]	; (3780 <__register_exitproc+0xb8>)
    36ce:	4606      	mov	r6, r0
    36d0:	6828      	ldr	r0, [r5, #0]
    36d2:	4698      	mov	r8, r3
    36d4:	460f      	mov	r7, r1
    36d6:	4691      	mov	r9, r2
    36d8:	f7ff fff2 	bl	36c0 <__retarget_lock_acquire_recursive>
    36dc:	4b29      	ldr	r3, [pc, #164]	; (3784 <__register_exitproc+0xbc>)
    36de:	681c      	ldr	r4, [r3, #0]
    36e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    36e4:	2b00      	cmp	r3, #0
    36e6:	d03e      	beq.n	3766 <__register_exitproc+0x9e>
    36e8:	685a      	ldr	r2, [r3, #4]
    36ea:	2a1f      	cmp	r2, #31
    36ec:	dc1c      	bgt.n	3728 <__register_exitproc+0x60>
    36ee:	f102 0e01 	add.w	lr, r2, #1
    36f2:	b176      	cbz	r6, 3712 <__register_exitproc+0x4a>
    36f4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    36f8:	2401      	movs	r4, #1
    36fa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    36fe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    3702:	4094      	lsls	r4, r2
    3704:	4320      	orrs	r0, r4
    3706:	2e02      	cmp	r6, #2
    3708:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    370c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    3710:	d023      	beq.n	375a <__register_exitproc+0x92>
    3712:	3202      	adds	r2, #2
    3714:	f8c3 e004 	str.w	lr, [r3, #4]
    3718:	6828      	ldr	r0, [r5, #0]
    371a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    371e:	f7ff ffd1 	bl	36c4 <__retarget_lock_release_recursive>
    3722:	2000      	movs	r0, #0
    3724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3728:	4b17      	ldr	r3, [pc, #92]	; (3788 <__register_exitproc+0xc0>)
    372a:	b30b      	cbz	r3, 3770 <__register_exitproc+0xa8>
    372c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3730:	f3af 8000 	nop.w
    3734:	4603      	mov	r3, r0
    3736:	b1d8      	cbz	r0, 3770 <__register_exitproc+0xa8>
    3738:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    373c:	6002      	str	r2, [r0, #0]
    373e:	2100      	movs	r1, #0
    3740:	6041      	str	r1, [r0, #4]
    3742:	460a      	mov	r2, r1
    3744:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3748:	f04f 0e01 	mov.w	lr, #1
    374c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3750:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    3754:	2e00      	cmp	r6, #0
    3756:	d0dc      	beq.n	3712 <__register_exitproc+0x4a>
    3758:	e7cc      	b.n	36f4 <__register_exitproc+0x2c>
    375a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    375e:	430c      	orrs	r4, r1
    3760:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    3764:	e7d5      	b.n	3712 <__register_exitproc+0x4a>
    3766:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    376a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    376e:	e7bb      	b.n	36e8 <__register_exitproc+0x20>
    3770:	6828      	ldr	r0, [r5, #0]
    3772:	f7ff ffa7 	bl	36c4 <__retarget_lock_release_recursive>
    3776:	f04f 30ff 	mov.w	r0, #4294967295
    377a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    377e:	bf00      	nop
    3780:	20000490 	.word	0x20000490
    3784:	000038c4 	.word	0x000038c4
    3788:	00000000 	.word	0x00000000
    378c:	68202020 	.word	0x68202020
    3790:	41203273 	.word	0x41203273
    3794:	434e4952 	.word	0x434e4952
    3798:	746e4920 	.word	0x746e4920
    379c:	61667265 	.word	0x61667265
    37a0:	0d0a6563 	.word	0x0d0a6563
    37a4:	00000000 	.word	0x00000000
    37a8:	682f2e2e 	.word	0x682f2e2e
    37ac:	732f6c61 	.word	0x732f6c61
    37b0:	682f6372 	.word	0x682f6372
    37b4:	615f6c61 	.word	0x615f6c61
    37b8:	735f6364 	.word	0x735f6364
    37bc:	2e636e79 	.word	0x2e636e79
    37c0:	00000063 	.word	0x00000063
    37c4:	682f2e2e 	.word	0x682f2e2e
    37c8:	732f6c61 	.word	0x732f6c61
    37cc:	682f6372 	.word	0x682f6372
    37d0:	735f6c61 	.word	0x735f6c61
    37d4:	6d5f6970 	.word	0x6d5f6970
    37d8:	7973615f 	.word	0x7973615f
    37dc:	632e636e 	.word	0x632e636e
    37e0:	00000000 	.word	0x00000000

000037e4 <_adcs>:
    37e4:	01000000 00800000 0000181d 00000000     ................
	...
    37fc:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    380c:	632e6364 00000000 40003000 40003400     dc.c.....0.@.4.@
    381c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    382c:	43000800 43000c00                       ...C...C

00003834 <_i2cms>:
	...
    384c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    385c:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00003868 <_usb_ep_cfgs>:
    3868:	200006e0 00000000 00000040 200006a0     ... ....@...... 
    3878:	00000000 00000040 20000660 00000000     ....@...`.. ....
    3888:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    3898:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    38a8:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    38b8:	6c5f736c 2e747369 00000063              ls_list.c...

000038c4 <_global_impure_ptr>:
    38c4:	20000068                                h.. 

000038c8 <_init>:
    38c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ca:	bf00      	nop
    38cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38ce:	bc08      	pop	{r3}
    38d0:	469e      	mov	lr, r3
    38d2:	4770      	bx	lr

000038d4 <__init_array_start>:
    38d4:	0000366d 	.word	0x0000366d

000038d8 <__frame_dummy_init_array_entry>:
    38d8:	00000289                                ....

000038dc <_fini>:
    38dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38de:	bf00      	nop
    38e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38e2:	bc08      	pop	{r3}
    38e4:	469e      	mov	lr, r3
    38e6:	4770      	bx	lr

000038e8 <__fini_array_start>:
    38e8:	00000265 	.word	0x00000265
