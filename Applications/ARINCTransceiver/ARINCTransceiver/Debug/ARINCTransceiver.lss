
ARINCTransceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d68  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000053c  20000000  00005d68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002053c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002053c  2**0
                  CONTENTS
  4 .bss          00000438  2000053c  000062a4  0002053c  2**2
                  ALLOC
  5 .stack        00010004  20000974  000066dc  0002053c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002056a  2**0
                  CONTENTS, READONLY
  8 .debug_info   000456c2  00000000  00000000  000205c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000060ef  00000000  00000000  00065c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001866d  00000000  00000000  0006bd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001370  00000000  00000000  000843e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001bb8  00000000  00000000  00085751  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e99b  00000000  00000000  00087309  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020d71  00000000  00000000  000c5ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012aa6d  00000000  00000000  000e6a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000034b0  00000000  00000000  00211484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 09 01 20 59 11 00 00 55 11 00 00 55 11 00 00     x.. Y...U...U...
      10:	55 11 00 00 55 11 00 00 55 11 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 11 00 00 55 11 00 00 00 00 00 00 55 11 00 00     U...U.......U...
      3c:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      4c:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      5c:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      6c:	d5 2b 00 00 55 11 00 00 55 11 00 00 55 11 00 00     .+..U...U...U...
      7c:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      8c:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      9c:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      ac:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      bc:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      cc:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
      dc:	55 11 00 00 55 11 00 00 55 11 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 11 00 00 75 2d 00 00 89 2d 00 00 9d 2d 00 00     U...u-...-...-..
     104:	b1 2d 00 00 55 11 00 00 55 11 00 00 55 11 00 00     .-..U...U...U...
     114:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     124:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     134:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     144:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     154:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     164:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     174:	55 11 00 00 55 11 00 00 55 11 00 00 c9 43 00 00     U...U...U....C..
     184:	d5 43 00 00 e1 43 00 00 ed 43 00 00 55 11 00 00     .C...C...C..U...
     194:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     1a4:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     1b4:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     1c4:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     1d4:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     1e4:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     1f4:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     204:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     214:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     224:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     234:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     244:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...
     254:	55 11 00 00 55 11 00 00 55 11 00 00 55 11 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000053c 	.word	0x2000053c
     280:	00000000 	.word	0x00000000
     284:	00005d68 	.word	0x00005d68

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005d68 	.word	0x00005d68
     2c4:	20000540 	.word	0x20000540
     2c8:	00005d68 	.word	0x00005d68
     2cc:	00000000 	.word	0x00000000

000002d0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
     2d0:	b510      	push	{r4, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	4604      	mov	r4, r0
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     2d6:	a801      	add	r0, sp, #4
     2d8:	4b08      	ldr	r3, [pc, #32]	; (2fc <_gpio_get_level+0x2c>)
     2da:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     2dc:	4b08      	ldr	r3, [pc, #32]	; (300 <_gpio_get_level+0x30>)
     2de:	01e0      	lsls	r0, r4, #7
     2e0:	181a      	adds	r2, r3, r0
     2e2:	5819      	ldr	r1, [r3, r0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     2e4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     2e6:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     2e8:	405c      	eors	r4, r3
     2ea:	400c      	ands	r4, r1
     2ec:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     2ee:	a801      	add	r0, sp, #4
     2f0:	4b04      	ldr	r3, [pc, #16]	; (304 <_gpio_get_level+0x34>)
     2f2:	4798      	blx	r3

	return tmp;
}
     2f4:	4620      	mov	r0, r4
     2f6:	b002      	add	sp, #8
     2f8:	bd10      	pop	{r4, pc}
     2fa:	bf00      	nop
     2fc:	00001c41 	.word	0x00001c41
     300:	41008000 	.word	0x41008000
     304:	00001c4f 	.word	0x00001c4f

00000308 <_ZN15ARINC_InterfaceC1Ev>:
	"PL2 Match 3 Reg \t"
};


// default constructor
ARINC_Interface::ARINC_Interface()
     308:	b510      	push	{r4, lr}
     30a:	4604      	mov	r4, r0
     30c:	4b03      	ldr	r3, [pc, #12]	; (31c <_ZN15ARINC_InterfaceC1Ev+0x14>)
     30e:	4798      	blx	r3
     310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
     314:	4b02      	ldr	r3, [pc, #8]	; (320 <_ZN15ARINC_InterfaceC1Ev+0x18>)
     316:	4798      	blx	r3
{
} //ARINC_Interface
     318:	4620      	mov	r0, r4
     31a:	bd10      	pop	{r4, pc}
     31c:	00001771 	.word	0x00001771
     320:	000011dd 	.word	0x000011dd

00000324 <_ZN15ARINC_Interface4InitEv>:
// default destructor
ARINC_Interface::~ARINC_Interface()
{
} //~ARINC_Interface

void	ARINC_Interface::Init(void){
     324:	b510      	push	{r4, lr}
     326:	4604      	mov	r4, r0
	usb0.init();
     328:	4b0a      	ldr	r3, [pc, #40]	; (354 <_ZN15ARINC_Interface4InitEv+0x30>)
     32a:	4798      	blx	r3
	BITRATE0=false;
     32c:	2300      	movs	r3, #0
     32e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	BITRATE1=false;
     332:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	BITRATE2=false;
     336:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	OPT1=true;
     33a:	2201      	movs	r2, #1
     33c:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
	OPT2=false;
     340:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	PARITY=false;
     344:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
	HI3893.Init();
     348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
     34c:	4b02      	ldr	r3, [pc, #8]	; (358 <_ZN15ARINC_Interface4InitEv+0x34>)
     34e:	4798      	blx	r3
     350:	bd10      	pop	{r4, pc}
     352:	bf00      	nop
     354:	00001775 	.word	0x00001775
     358:	000014f1 	.word	0x000014f1

0000035c <_ZN15ARINC_Interface8SayHelloEv>:
}

void	ARINC_Interface::SayHello(void){
     35c:	b570      	push	{r4, r5, r6, lr}
     35e:	b088      	sub	sp, #32
     360:	4606      	mov	r6, r0
	uint8_t p[]="   hs2 ARINC Interface\n\r";
     362:	ac01      	add	r4, sp, #4
     364:	4d06      	ldr	r5, [pc, #24]	; (380 <_ZN15ARINC_Interface8SayHelloEv+0x24>)
     366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     36a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     36e:	c403      	stmia	r4!, {r0, r1}
     370:	7022      	strb	r2, [r4, #0]
	uint8_t *ptr=p;
	usb0.write(ptr,sizeof(p));
     372:	2219      	movs	r2, #25
     374:	a901      	add	r1, sp, #4
     376:	4630      	mov	r0, r6
     378:	4b02      	ldr	r3, [pc, #8]	; (384 <_ZN15ARINC_Interface8SayHelloEv+0x28>)
     37a:	4798      	blx	r3
	
}
     37c:	b008      	add	sp, #32
     37e:	bd70      	pop	{r4, r5, r6, pc}
     380:	0000538c 	.word	0x0000538c
     384:	000017a9 	.word	0x000017a9

00000388 <_ZN15ARINC_Interface6xprintEPc>:
		
		
	} // loop
}  // Transmit Mode End

void ARINC_Interface::xprint(char *string){
     388:	b538      	push	{r3, r4, r5, lr}
     38a:	4605      	mov	r5, r0
     38c:	460c      	mov	r4, r1
	uint8_t	*p;
	p=(uint8_t *)string;
	usb0.write(p,strlen(string));
     38e:	4608      	mov	r0, r1
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <_ZN15ARINC_Interface6xprintEPc+0x18>)
     392:	4798      	blx	r3
     394:	4602      	mov	r2, r0
     396:	4621      	mov	r1, r4
     398:	4628      	mov	r0, r5
     39a:	4b02      	ldr	r3, [pc, #8]	; (3a4 <_ZN15ARINC_Interface6xprintEPc+0x1c>)
     39c:	4798      	blx	r3
     39e:	bd38      	pop	{r3, r4, r5, pc}
     3a0:	00005181 	.word	0x00005181
     3a4:	000017a9 	.word	0x000017a9

000003a8 <_ZN15ARINC_Interface8xgetcharEv>:
	}
char	ARINC_Interface::xgetchar(void){
     3a8:	b500      	push	{lr}
     3aa:	b083      	sub	sp, #12
	
	uint8_t	p;
	usb0.read(&p,1);
     3ac:	2201      	movs	r2, #1
     3ae:	f10d 0107 	add.w	r1, sp, #7
     3b2:	4b02      	ldr	r3, [pc, #8]	; (3bc <_ZN15ARINC_Interface8xgetcharEv+0x14>)
     3b4:	4798      	blx	r3
	char i(p);
}
     3b6:	b003      	add	sp, #12
     3b8:	f85d fb04 	ldr.w	pc, [sp], #4
     3bc:	000017c9 	.word	0x000017c9

000003c0 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv>:
	// <false"> Low
	// <true"> High
	true);
}
void ARINC_Interface::ConsoleCommandsHelp(void)
{
     3c0:	b538      	push	{r3, r4, r5, lr}
     3c2:	4605      	mov	r5, r0
	xprint("\n\r\n--- Console Commands Help ---");
     3c4:	490f      	ldr	r1, [pc, #60]	; (404 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x44>)
     3c6:	4c10      	ldr	r4, [pc, #64]	; (408 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x48>)
     3c8:	47a0      	blx	r4
	xprint("\n\r  P = Parity Toggle on/off");
     3ca:	4910      	ldr	r1, [pc, #64]	; (40c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x4c>)
     3cc:	4628      	mov	r0, r5
     3ce:	47a0      	blx	r4
	xprint("\n\r  T = TFLIP  Toggle on/off");
     3d0:	490f      	ldr	r1, [pc, #60]	; (410 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x50>)
     3d2:	4628      	mov	r0, r5
     3d4:	47a0      	blx	r4
	xprint("\n\r  R = RFLIP  Toggle on/off");
     3d6:	490f      	ldr	r1, [pc, #60]	; (414 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x54>)
     3d8:	4628      	mov	r0, r5
     3da:	47a0      	blx	r4
	xprint("\n\r  S = SDON, SD9, SD10 Toggle on/off");
     3dc:	490e      	ldr	r1, [pc, #56]	; (418 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x58>)
     3de:	4628      	mov	r0, r5
     3e0:	47a0      	blx	r4
	xprint("\n\r  H = This Help Page");
     3e2:	490e      	ldr	r1, [pc, #56]	; (41c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x5c>)
     3e4:	4628      	mov	r0, r5
     3e6:	47a0      	blx	r4
	xprint("\n\r  Space Bar = Display Status and Control regs");
     3e8:	490d      	ldr	r1, [pc, #52]	; (420 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x60>)
     3ea:	4628      	mov	r0, r5
     3ec:	47a0      	blx	r4
	xprint("\n\r  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
     3ee:	490d      	ldr	r1, [pc, #52]	; (424 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x64>)
     3f0:	4628      	mov	r0, r5
     3f2:	47a0      	blx	r4
	xprint("\n\r  M = Enter Custom Message. Explorer Mode  - ONLY!");
     3f4:	490c      	ldr	r1, [pc, #48]	; (428 <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x68>)
     3f6:	4628      	mov	r0, r5
     3f8:	47a0      	blx	r4
	xprint("\n\r  ENTER= Transmit next message. Explorer Mode  - ONLY!\n\r");
     3fa:	490c      	ldr	r1, [pc, #48]	; (42c <_ZN15ARINC_Interface19ConsoleCommandsHelpEv+0x6c>)
     3fc:	4628      	mov	r0, r5
     3fe:	47a0      	blx	r4
     400:	bd38      	pop	{r3, r4, r5, pc}
     402:	bf00      	nop
     404:	000053a8 	.word	0x000053a8
     408:	00000389 	.word	0x00000389
     40c:	000053cc 	.word	0x000053cc
     410:	000053ec 	.word	0x000053ec
     414:	0000540c 	.word	0x0000540c
     418:	0000542c 	.word	0x0000542c
     41c:	00005454 	.word	0x00005454
     420:	0000546c 	.word	0x0000546c
     424:	0000549c 	.word	0x0000549c
     428:	000054dc 	.word	0x000054dc
     42c:	00005514 	.word	0x00005514

00000430 <_ZN15ARINC_Interface4crlfEv>:
		//PrintHexByte(DebugArray[i]);  // Output the status registers
		crlf();
	}
	
}
void	ARINC_Interface::crlf(void){
     430:	b570      	push	{r4, r5, r6, lr}
     432:	b082      	sub	sp, #8
     434:	4606      	mov	r6, r0
	uint8_t p=0x0A;
     436:	ac02      	add	r4, sp, #8
     438:	230a      	movs	r3, #10
     43a:	f804 3d01 	strb.w	r3, [r4, #-1]!
	usb0.write(&p,1);
     43e:	2201      	movs	r2, #1
     440:	4621      	mov	r1, r4
     442:	4d05      	ldr	r5, [pc, #20]	; (458 <_ZN15ARINC_Interface4crlfEv+0x28>)
     444:	47a8      	blx	r5
	p=0x0D;
     446:	230d      	movs	r3, #13
     448:	f88d 3007 	strb.w	r3, [sp, #7]
	usb0.write(&p,1);
     44c:	2201      	movs	r2, #1
     44e:	4621      	mov	r1, r4
     450:	4630      	mov	r0, r6
     452:	47a8      	blx	r5
}
     454:	b002      	add	sp, #8
     456:	bd70      	pop	{r4, r5, r6, pc}
     458:	000017a9 	.word	0x000017a9

0000045c <_ZN15ARINC_Interface12PrintHexByteEh>:
void ARINC_Interface::PrintHexByte(uint8 c)
{
     45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     460:	b082      	sub	sp, #8
     462:	4607      	mov	r7, r0
     464:	460e      	mov	r6, r1
	uint8_t q[]="0x";
     466:	4b15      	ldr	r3, [pc, #84]	; (4bc <_ZN15ARINC_Interface12PrintHexByteEh+0x60>)
     468:	681b      	ldr	r3, [r3, #0]
     46a:	f8ad 3004 	strh.w	r3, [sp, #4]
     46e:	0c1b      	lsrs	r3, r3, #16
     470:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t *ptr=q;
	usb0.write(ptr,sizeof(q));
     474:	2203      	movs	r2, #3
     476:	a901      	add	r1, sp, #4
     478:	4c11      	ldr	r4, [pc, #68]	; (4c0 <_ZN15ARINC_Interface12PrintHexByteEh+0x64>)
     47a:	47a0      	blx	r4
	uint8_t p;
	p=HexToAscii[(c>>4)];
     47c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4c4 <_ZN15ARINC_Interface12PrintHexByteEh+0x68>
     480:	1133      	asrs	r3, r6, #4
     482:	f818 3003 	ldrb.w	r3, [r8, r3]
     486:	ad02      	add	r5, sp, #8
     488:	f805 3d05 	strb.w	r3, [r5, #-5]!
	usb0.write(&p,1);
     48c:	2201      	movs	r2, #1
     48e:	4629      	mov	r1, r5
     490:	4638      	mov	r0, r7
     492:	47a0      	blx	r4
	p=HexToAscii[(c & 0x0f)];
     494:	f006 060f 	and.w	r6, r6, #15
     498:	f818 3006 	ldrb.w	r3, [r8, r6]
     49c:	f88d 3003 	strb.w	r3, [sp, #3]
	usb0.write(&p,1);
     4a0:	2201      	movs	r2, #1
     4a2:	4629      	mov	r1, r5
     4a4:	4638      	mov	r0, r7
     4a6:	47a0      	blx	r4
	*ptr=SPACE;
     4a8:	2320      	movs	r3, #32
     4aa:	f88d 3004 	strb.w	r3, [sp, #4]
	usb0.write(ptr,1);
     4ae:	2201      	movs	r2, #1
     4b0:	a901      	add	r1, sp, #4
     4b2:	4638      	mov	r0, r7
     4b4:	47a0      	blx	r4
}
     4b6:	b002      	add	sp, #8
     4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4bc:	00005550 	.word	0x00005550
     4c0:	000017a9 	.word	0x000017a9
     4c4:	0000537c 	.word	0x0000537c

000004c8 <_ZN15ARINC_Interface12getRegStatusEv>:

void ARINC_Interface::getRegStatus(void){
     4c8:	b570      	push	{r4, r5, r6, lr}
     4ca:	b082      	sub	sp, #8
     4cc:	4604      	mov	r4, r0
	uint8 priorityMatchLabels3[3];
	
	DebugArray[0] =HI3893.R_Register(0x90);     // Fetch Receiver 1 Status Reg
     4ce:	f100 055c 	add.w	r5, r0, #92	; 0x5c
     4d2:	2190      	movs	r1, #144	; 0x90
     4d4:	4628      	mov	r0, r5
     4d6:	4e26      	ldr	r6, [pc, #152]	; (570 <_ZN15ARINC_Interface12getRegStatusEv+0xa8>)
     4d8:	47b0      	blx	r6
     4da:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	DebugArray[1] =HI3893.R_Register(0x94);     // Fetch Receiver 1 Control Reg
     4de:	2194      	movs	r1, #148	; 0x94
     4e0:	4628      	mov	r0, r5
     4e2:	47b0      	blx	r6
     4e4:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd
	
	DebugArray[2] =HI3893.R_Register(0xB0);     // Fetch Receiver 2 Status Reg
     4e8:	21b0      	movs	r1, #176	; 0xb0
     4ea:	4628      	mov	r0, r5
     4ec:	47b0      	blx	r6
     4ee:	f884 00de 	strb.w	r0, [r4, #222]	; 0xde
	DebugArray[3] =HI3893.R_Register(0xB4);     // Fetch Receiver 2 Control Reg
     4f2:	21b4      	movs	r1, #180	; 0xb4
     4f4:	4628      	mov	r0, r5
     4f6:	47b0      	blx	r6
     4f8:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
	
	DebugArray[4] = HI3893.R_Register(0x80);     // Fetch Transmit Status Register
     4fc:	2180      	movs	r1, #128	; 0x80
     4fe:	4628      	mov	r0, r5
     500:	47b0      	blx	r6
     502:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
	DebugArray[5] = HI3893.R_Register(0x84);     // Fetch Transmit Control Register
     506:	2184      	movs	r1, #132	; 0x84
     508:	4628      	mov	r0, r5
     50a:	47b0      	blx	r6
     50c:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
	
	DebugArray[6] = HI3893.R_Register(0xD0);     // Fetch Read Flag/ Interrupt Register
     510:	21d0      	movs	r1, #208	; 0xd0
     512:	4628      	mov	r0, r5
     514:	47b0      	blx	r6
     516:	f884 00e2 	strb.w	r0, [r4, #226]	; 0xe2
	DebugArray[7] = HI3893.R_Register(0xD4);     // Fetch ACLK Divsion Register
     51a:	21d4      	movs	r1, #212	; 0xd4
     51c:	4628      	mov	r0, r5
     51e:	47b0      	blx	r6
     520:	f884 00e3 	strb.w	r0, [r4, #227]	; 0xe3
	
	HI3893.MultiByteRead(0x9C,3, priorityMatchLabels3);     // Fetch Priority Match Labels
     524:	ab01      	add	r3, sp, #4
     526:	2203      	movs	r2, #3
     528:	219c      	movs	r1, #156	; 0x9c
     52a:	4628      	mov	r0, r5
     52c:	4e11      	ldr	r6, [pc, #68]	; (574 <_ZN15ARINC_Interface12getRegStatusEv+0xac>)
     52e:	47b0      	blx	r6
	DebugArray[8] = priorityMatchLabels3[2];         // Fetch Priority Match Label
     530:	f89d 3006 	ldrb.w	r3, [sp, #6]
     534:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	DebugArray[9] = priorityMatchLabels3[1];         // Fetch Priority Match Label
     538:	f89d 3005 	ldrb.w	r3, [sp, #5]
     53c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	DebugArray[10] = priorityMatchLabels3[0];        // Fetch Priority Match Label
     540:	f89d 3004 	ldrb.w	r3, [sp, #4]
     544:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
	
	HI3893.MultiByteRead(0xBC,3, priorityMatchLabels3);     //  Fetch Priority Match Labels
     548:	ab01      	add	r3, sp, #4
     54a:	2203      	movs	r2, #3
     54c:	21bc      	movs	r1, #188	; 0xbc
     54e:	4628      	mov	r0, r5
     550:	47b0      	blx	r6
	DebugArray[11] = priorityMatchLabels3[2];        //  Fetch Priority Match Label
     552:	f89d 3006 	ldrb.w	r3, [sp, #6]
     556:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	DebugArray[12] = priorityMatchLabels3[1];        //  Fetch Priority Match Label
     55a:	f89d 3005 	ldrb.w	r3, [sp, #5]
     55e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	DebugArray[13] = priorityMatchLabels3[0];        //  Fetch Priority Match Label
     562:	f89d 3004 	ldrb.w	r3, [sp, #4]
     566:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

}
     56a:	b002      	add	sp, #8
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	bf00      	nop
     570:	00001471 	.word	0x00001471
     574:	00001531 	.word	0x00001531

00000578 <_ZN15ARINC_Interface20printStatusRegistersEv>:
void	ARINC_Interface::printStatusRegisters(void){
     578:	b570      	push	{r4, r5, r6, lr}
     57a:	4606      	mov	r6, r0
	getRegStatus();
     57c:	4b04      	ldr	r3, [pc, #16]	; (590 <_ZN15ARINC_Interface20printStatusRegistersEv+0x18>)
     57e:	4798      	blx	r3
     580:	240e      	movs	r4, #14
		crlf();
     582:	4d04      	ldr	r5, [pc, #16]	; (594 <_ZN15ARINC_Interface20printStatusRegistersEv+0x1c>)
     584:	4630      	mov	r0, r6
     586:	47a8      	blx	r5
	for(i=0; i< 14;i++) {
     588:	3c01      	subs	r4, #1
     58a:	d1fb      	bne.n	584 <_ZN15ARINC_Interface20printStatusRegistersEv+0xc>
}
     58c:	bd70      	pop	{r4, r5, r6, pc}
     58e:	bf00      	nop
     590:	000004c9 	.word	0x000004c9
     594:	00000431 	.word	0x00000431

00000598 <_ZN15ARINC_Interface14debounceButtonEh>:
void  ARINC_Interface::debounceButton(uint8 button)
{
     598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     59c:	b082      	sub	sp, #8
     59e:	094d      	lsrs	r5, r1, #5
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     5a0:	f001 011f 	and.w	r1, r1, #31
     5a4:	2701      	movs	r7, #1
     5a6:	408f      	lsls	r7, r1
	uint8 debounceCnt;
	
	debounceCnt=10;
     5a8:	260a      	movs	r6, #10
	while(debounceCnt){
		delay_ms(10);            // delay 1ms
     5aa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 5f4 <_ZN15ARINC_Interface14debounceButtonEh+0x5c>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     5ae:	01ed      	lsls	r5, r5, #7
     5b0:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
     5b4:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
     5b8:	e000      	b.n	5bc <_ZN15ARINC_Interface14debounceButtonEh+0x24>
		if(! (gpio_get_pin_level(button))){
			debounceCnt=10;
     5ba:	260a      	movs	r6, #10
		delay_ms(10);            // delay 1ms
     5bc:	200a      	movs	r0, #10
     5be:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
     5c0:	a801      	add	r0, sp, #4
     5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <_ZN15ARINC_Interface14debounceButtonEh+0x54>)
     5c4:	4798      	blx	r3
     5c6:	682a      	ldr	r2, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     5c8:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     5ca:	692c      	ldr	r4, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     5cc:	405c      	eors	r4, r3
     5ce:	4014      	ands	r4, r2
     5d0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     5d2:	a801      	add	r0, sp, #4
     5d4:	4b06      	ldr	r3, [pc, #24]	; (5f0 <_ZN15ARINC_Interface14debounceButtonEh+0x58>)
     5d6:	4798      	blx	r3
		if(! (gpio_get_pin_level(button))){
     5d8:	4227      	tst	r7, r4
     5da:	d0ee      	beq.n	5ba <_ZN15ARINC_Interface14debounceButtonEh+0x22>
		}else{
			debounceCnt--;
     5dc:	3e01      	subs	r6, #1
	while(debounceCnt){
     5de:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
     5e2:	d1eb      	bne.n	5bc <_ZN15ARINC_Interface14debounceButtonEh+0x24>
		}
		
	}
}
     5e4:	b002      	add	sp, #8
     5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5ea:	bf00      	nop
     5ec:	00001c41 	.word	0x00001c41
     5f0:	00001c4f 	.word	0x00001c4f
     5f4:	00001c71 	.word	0x00001c71

000005f8 <_ZN15ARINC_Interface15ConsoleCommandsEh>:
unsigned char   ARINC_Interface::ConsoleCommands(unsigned char ch)
{
     5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5fc:	4604      	mov	r4, r0
     5fe:	460d      	mov	r5, r1
	unsigned char TCRTemp, RCR1Temp, RCR2Temp;
	
	if(ch=='P' || ch=='p'|| ch=='R' || ch=='r' || ch=='S' || ch=='s' ||ch=='T' || ch=='t' || ch=='H' || ch=='h')
     600:	2950      	cmp	r1, #80	; 0x50
     602:	d058      	beq.n	6b6 <_ZN15ARINC_Interface15ConsoleCommandsEh+0xbe>
     604:	2970      	cmp	r1, #112	; 0x70
     606:	f000 80a1 	beq.w	74c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x154>
     60a:	f001 02df 	and.w	r2, r1, #223	; 0xdf
     60e:	f1a2 0352 	sub.w	r3, r2, #82	; 0x52
     612:	b2db      	uxtb	r3, r3
     614:	2b02      	cmp	r3, #2
     616:	d95e      	bls.n	6d6 <_ZN15ARINC_Interface15ConsoleCommandsEh+0xde>
     618:	2a48      	cmp	r2, #72	; 0x48
     61a:	d05c      	beq.n	6d6 <_ZN15ARINC_Interface15ConsoleCommandsEh+0xde>
		}
		

	} else
	{                                  // No command to process
		return false;
     61c:	2000      	movs	r0, #0
     61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			TCRTemp ^= 0x40;             // Toggle the TFLIP bit
     622:	f089 0940 	eor.w	r9, r9, #64	; 0x40
     626:	fa5f f989 	uxtb.w	r9, r9
			if(TCRTemp & 0x40)
     62a:	f019 0f40 	tst.w	r9, #64	; 0x40
			xprint("TFLIP Set\n\r>");
     62e:	bf14      	ite	ne
     630:	4957      	ldrne	r1, [pc, #348]	; (790 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x198>)
			xprint("TFLIP Cleared\n\r>");
     632:	4958      	ldreq	r1, [pc, #352]	; (794 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x19c>)
     634:	4620      	mov	r0, r4
     636:	4b58      	ldr	r3, [pc, #352]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     638:	4798      	blx	r3
			HI3893.W_CommandValue(TCR, TCRTemp);
     63a:	464a      	mov	r2, r9
     63c:	2108      	movs	r1, #8
     63e:	4630      	mov	r0, r6
     640:	4b56      	ldr	r3, [pc, #344]	; (79c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a4>)
     642:	4798      	blx	r3
		if(ch=='S' || ch=='s')          // Toggle the SDON bit in the RCR1/RCR2 regs
     644:	2d53      	cmp	r5, #83	; 0x53
     646:	d17c      	bne.n	742 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x14a>
			RCR1Temp ^= 0x70;             // Toggle the SDON, SD9, SD10 bits
     648:	f088 0870 	eor.w	r8, r8, #112	; 0x70
     64c:	fa5f f888 	uxtb.w	r8, r8
			RCR2Temp ^= 0x70;             // Toggle the SDON, SD9, SD10 bits
     650:	f087 0770 	eor.w	r7, r7, #112	; 0x70
     654:	b2ff      	uxtb	r7, r7
			if(RCR1Temp & 0x10)
     656:	f018 0f10 	tst.w	r8, #16
			xprint("REC-1 SDON,SD9 and SD10 Set\n\r>");
     65a:	bf14      	ite	ne
     65c:	4950      	ldrne	r1, [pc, #320]	; (7a0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a8>)
			xprint("REC-1 SDON,SD9 and SD10 Cleared\n\r>");
     65e:	4951      	ldreq	r1, [pc, #324]	; (7a4 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1ac>)
     660:	4620      	mov	r0, r4
     662:	4b4d      	ldr	r3, [pc, #308]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     664:	4798      	blx	r3
			HI3893.W_CommandValue(REC1CR, RCR1Temp);
     666:	4642      	mov	r2, r8
     668:	2110      	movs	r1, #16
     66a:	4630      	mov	r0, r6
     66c:	4b4b      	ldr	r3, [pc, #300]	; (79c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a4>)
     66e:	4798      	blx	r3
			if(RCR2Temp & 0x10)
     670:	f017 0f10 	tst.w	r7, #16
			xprint("REC-2 SDON,SD9 and SD10 Set\n\r>");
     674:	bf14      	ite	ne
     676:	494c      	ldrne	r1, [pc, #304]	; (7a8 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1b0>)
			xprint("REC-2 SDON,SD9 and SD10 Cleared\n\r>");
     678:	494c      	ldreq	r1, [pc, #304]	; (7ac <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1b4>)
     67a:	4620      	mov	r0, r4
     67c:	4b46      	ldr	r3, [pc, #280]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     67e:	4798      	blx	r3
			HI3893.W_CommandValue(REC2CR, RCR2Temp);
     680:	463a      	mov	r2, r7
     682:	2124      	movs	r1, #36	; 0x24
     684:	4630      	mov	r0, r6
     686:	4b45      	ldr	r3, [pc, #276]	; (79c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a4>)
     688:	4798      	blx	r3
	}
	return true;
     68a:	2001      	movs	r0, #1
     68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ConsoleCommandsHelp();
     690:	4620      	mov	r0, r4
     692:	4b47      	ldr	r3, [pc, #284]	; (7b0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1b8>)
     694:	4798      	blx	r3
			xprint("\n\r\nPress Space Bar or SW-4 to resume");
     696:	4947      	ldr	r1, [pc, #284]	; (7b4 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1bc>)
     698:	4620      	mov	r0, r4
     69a:	4b3f      	ldr	r3, [pc, #252]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     69c:	4798      	blx	r3
			while(OLED_BUTTON3 && ' ' != xgetchar());        // start again if Button-4 pressed/spacebar
     69e:	4d46      	ldr	r5, [pc, #280]	; (7b8 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1c0>)
     6a0:	4620      	mov	r0, r4
     6a2:	47a8      	blx	r5
     6a4:	2820      	cmp	r0, #32
     6a6:	d1fb      	bne.n	6a0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0xa8>
			xprint("\n\r>");
     6a8:	4944      	ldr	r1, [pc, #272]	; (7bc <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1c4>)
     6aa:	4620      	mov	r0, r4
     6ac:	4b3a      	ldr	r3, [pc, #232]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     6ae:	4798      	blx	r3
	return true;
     6b0:	2001      	movs	r0, #1
     6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		TCRTemp =  HI3893.R_Register(R_TCR);    // Read the TCR
     6b6:	f100 065c 	add.w	r6, r0, #92	; 0x5c
     6ba:	2184      	movs	r1, #132	; 0x84
     6bc:	4630      	mov	r0, r6
     6be:	4f40      	ldr	r7, [pc, #256]	; (7c0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1c8>)
     6c0:	47b8      	blx	r7
     6c2:	4681      	mov	r9, r0
		RCR1Temp = HI3893.R_Register(R_RCR1);   // Read the RCR1
     6c4:	2194      	movs	r1, #148	; 0x94
     6c6:	4630      	mov	r0, r6
     6c8:	47b8      	blx	r7
     6ca:	4680      	mov	r8, r0
		RCR2Temp = HI3893.R_Register(R_RCR2);   // Read the RCR2
     6cc:	21b4      	movs	r1, #180	; 0xb4
     6ce:	4630      	mov	r0, r6
     6d0:	47b8      	blx	r7
     6d2:	4607      	mov	r7, r0
     6d4:	e049      	b.n	76a <_ZN15ARINC_Interface15ConsoleCommandsEh+0x172>
		TCRTemp =  HI3893.R_Register(R_TCR);    // Read the TCR
     6d6:	f104 065c 	add.w	r6, r4, #92	; 0x5c
     6da:	2184      	movs	r1, #132	; 0x84
     6dc:	4630      	mov	r0, r6
     6de:	4f38      	ldr	r7, [pc, #224]	; (7c0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1c8>)
     6e0:	47b8      	blx	r7
     6e2:	4681      	mov	r9, r0
		RCR1Temp = HI3893.R_Register(R_RCR1);   // Read the RCR1
     6e4:	2194      	movs	r1, #148	; 0x94
     6e6:	4630      	mov	r0, r6
     6e8:	47b8      	blx	r7
     6ea:	4680      	mov	r8, r0
		RCR2Temp = HI3893.R_Register(R_RCR2);   // Read the RCR2
     6ec:	21b4      	movs	r1, #180	; 0xb4
     6ee:	4630      	mov	r0, r6
     6f0:	47b8      	blx	r7
     6f2:	4607      	mov	r7, r0
		if(ch=='T' || ch=='t')          // Toggle the TFLIP bit in the TCR reg
     6f4:	f005 05df 	and.w	r5, r5, #223	; 0xdf
     6f8:	2d54      	cmp	r5, #84	; 0x54
     6fa:	d092      	beq.n	622 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x2a>
		if(ch=='R' || ch=='r')           // Toggle the RFLIP bit in the RCR1/RCR2 regs
     6fc:	2d52      	cmp	r5, #82	; 0x52
     6fe:	d1a1      	bne.n	644 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x4c>
			RCR1Temp ^= 0x80;             // Toggle the RFLIP bit
     700:	f088 0880 	eor.w	r8, r8, #128	; 0x80
     704:	fa5f f888 	uxtb.w	r8, r8
			RCR2Temp ^= 0x80;             // Toggle the RFLIP bit
     708:	f087 0780 	eor.w	r7, r7, #128	; 0x80
     70c:	b2ff      	uxtb	r7, r7
			if(RCR1Temp & 0x80)
     70e:	f018 0f80 	tst.w	r8, #128	; 0x80
			xprint("REC-1 RFLIP Set\n\r>");
     712:	bf14      	ite	ne
     714:	492b      	ldrne	r1, [pc, #172]	; (7c4 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1cc>)
			xprint("REC-1 RFLIP Cleared\n\r>");
     716:	492c      	ldreq	r1, [pc, #176]	; (7c8 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1d0>)
     718:	4620      	mov	r0, r4
     71a:	4b1f      	ldr	r3, [pc, #124]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     71c:	4798      	blx	r3
			HI3893.W_CommandValue(REC1CR, RCR1Temp);
     71e:	4642      	mov	r2, r8
     720:	2110      	movs	r1, #16
     722:	4630      	mov	r0, r6
     724:	4b1d      	ldr	r3, [pc, #116]	; (79c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a4>)
     726:	4798      	blx	r3
			if(RCR2Temp & 0x80)
     728:	f017 0f80 	tst.w	r7, #128	; 0x80
			xprint("REC-2 RFLIP Set\n\r>");
     72c:	bf14      	ite	ne
     72e:	4927      	ldrne	r1, [pc, #156]	; (7cc <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1d4>)
			xprint("REC-2 RFLIP Cleared\n\r>");
     730:	4927      	ldreq	r1, [pc, #156]	; (7d0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1d8>)
     732:	4620      	mov	r0, r4
     734:	4b18      	ldr	r3, [pc, #96]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     736:	4798      	blx	r3
			HI3893.W_CommandValue(REC2CR, RCR2Temp);
     738:	463a      	mov	r2, r7
     73a:	2124      	movs	r1, #36	; 0x24
     73c:	4630      	mov	r0, r6
     73e:	4b17      	ldr	r3, [pc, #92]	; (79c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a4>)
     740:	4798      	blx	r3
		if(ch=='H' || ch=='h')            // Print out the help screen
     742:	2d48      	cmp	r5, #72	; 0x48
     744:	d0a4      	beq.n	690 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x98>
	return true;
     746:	2001      	movs	r0, #1
     748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		TCRTemp =  HI3893.R_Register(R_TCR);    // Read the TCR
     74c:	f100 065c 	add.w	r6, r0, #92	; 0x5c
     750:	2184      	movs	r1, #132	; 0x84
     752:	4630      	mov	r0, r6
     754:	4f1a      	ldr	r7, [pc, #104]	; (7c0 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1c8>)
     756:	47b8      	blx	r7
     758:	4681      	mov	r9, r0
		RCR1Temp = HI3893.R_Register(R_RCR1);   // Read the RCR1
     75a:	2194      	movs	r1, #148	; 0x94
     75c:	4630      	mov	r0, r6
     75e:	47b8      	blx	r7
     760:	4680      	mov	r8, r0
		RCR2Temp = HI3893.R_Register(R_RCR2);   // Read the RCR2
     762:	21b4      	movs	r1, #180	; 0xb4
     764:	4630      	mov	r0, r6
     766:	47b8      	blx	r7
     768:	4607      	mov	r7, r0
			TCRTemp ^= 4;                 // Toggle the TX parity bit
     76a:	f089 0904 	eor.w	r9, r9, #4
     76e:	fa5f f989 	uxtb.w	r9, r9
			if(TCRTemp & 4)
     772:	f019 0f04 	tst.w	r9, #4
			xprint("TX Parity ON\n\r>");
     776:	bf14      	ite	ne
     778:	4916      	ldrne	r1, [pc, #88]	; (7d4 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1dc>)
			xprint("TX Parity OFF\n\r>");
     77a:	4917      	ldreq	r1, [pc, #92]	; (7d8 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1e0>)
     77c:	4620      	mov	r0, r4
     77e:	4b06      	ldr	r3, [pc, #24]	; (798 <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a0>)
     780:	4798      	blx	r3
			HI3893.W_CommandValue(TCR, TCRTemp);
     782:	464a      	mov	r2, r9
     784:	2108      	movs	r1, #8
     786:	4630      	mov	r0, r6
     788:	4b04      	ldr	r3, [pc, #16]	; (79c <_ZN15ARINC_Interface15ConsoleCommandsEh+0x1a4>)
     78a:	4798      	blx	r3
     78c:	e7b2      	b.n	6f4 <_ZN15ARINC_Interface15ConsoleCommandsEh+0xfc>
     78e:	bf00      	nop
     790:	00005578 	.word	0x00005578
     794:	00005588 	.word	0x00005588
     798:	00000389 	.word	0x00000389
     79c:	00001411 	.word	0x00001411
     7a0:	000055f4 	.word	0x000055f4
     7a4:	00005614 	.word	0x00005614
     7a8:	00005638 	.word	0x00005638
     7ac:	00005658 	.word	0x00005658
     7b0:	000003c1 	.word	0x000003c1
     7b4:	0000567c 	.word	0x0000567c
     7b8:	000003a9 	.word	0x000003a9
     7bc:	00005560 	.word	0x00005560
     7c0:	00001471 	.word	0x00001471
     7c4:	0000559c 	.word	0x0000559c
     7c8:	000055b0 	.word	0x000055b0
     7cc:	000055c8 	.word	0x000055c8
     7d0:	000055dc 	.word	0x000055dc
     7d4:	00005554 	.word	0x00005554
     7d8:	00005564 	.word	0x00005564

000007dc <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh>:
	
}

void ARINC_Interface::PrintLabelsOnConsole(unsigned char *labelarray)
{
     7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     7e0:	4606      	mov	r6, r0
     7e2:	468a      	mov	sl, r1
	uint8 i;
	
	xprint("Labels  0 - 63:  ");
     7e4:	4916      	ldr	r1, [pc, #88]	; (840 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x64>)
     7e6:	4b17      	ldr	r3, [pc, #92]	; (844 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x68>)
     7e8:	4798      	blx	r3
     7ea:	251e      	movs	r5, #30
     7ec:	241f      	movs	r4, #31
	for(i=31; i != 0xFF;i--) {
		xprint("0x");
     7ee:	f8df 9068 	ldr.w	r9, [pc, #104]	; 858 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x7c>
     7f2:	4f14      	ldr	r7, [pc, #80]	; (844 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x68>)
		PrintHexByte(labelarray[i]);          // Output the frame data
     7f4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 85c <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x80>
     7f8:	e00e      	b.n	818 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x3c>
		xprint(" ");
		if(i==24)
		xprint("\n\rLabels  64-127:  ");
     7fa:	4913      	ldr	r1, [pc, #76]	; (848 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x6c>)
     7fc:	4630      	mov	r0, r6
     7fe:	47b8      	blx	r7
     800:	e01a      	b.n	838 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x5c>
		if(i==16)
		xprint("\n\rLabels 128-191:  ");
     802:	4912      	ldr	r1, [pc, #72]	; (84c <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x70>)
     804:	4630      	mov	r0, r6
     806:	47b8      	blx	r7
     808:	e016      	b.n	838 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x5c>
		if(i==8)
		xprint("\n\rLabels 192-255:  ");
     80a:	4911      	ldr	r1, [pc, #68]	; (850 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x74>)
     80c:	4630      	mov	r0, r6
     80e:	47b8      	blx	r7
     810:	3c01      	subs	r4, #1
     812:	b2e4      	uxtb	r4, r4
     814:	3d01      	subs	r5, #1
     816:	b2ed      	uxtb	r5, r5
		xprint("0x");
     818:	4649      	mov	r1, r9
     81a:	4630      	mov	r0, r6
     81c:	47b8      	blx	r7
		PrintHexByte(labelarray[i]);          // Output the frame data
     81e:	f81a 1004 	ldrb.w	r1, [sl, r4]
     822:	4630      	mov	r0, r6
     824:	47c0      	blx	r8
		xprint(" ");
     826:	490b      	ldr	r1, [pc, #44]	; (854 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x78>)
     828:	4630      	mov	r0, r6
     82a:	47b8      	blx	r7
		if(i==24)
     82c:	2c18      	cmp	r4, #24
     82e:	d0e4      	beq.n	7fa <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x1e>
		if(i==16)
     830:	2c10      	cmp	r4, #16
     832:	d0e6      	beq.n	802 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x26>
		if(i==8)
     834:	2c08      	cmp	r4, #8
     836:	d0e8      	beq.n	80a <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x2e>
	for(i=31; i != 0xFF;i--) {
     838:	2dff      	cmp	r5, #255	; 0xff
     83a:	d1e9      	bne.n	810 <_ZN15ARINC_Interface20PrintLabelsOnConsoleEPh+0x34>
	}
	
}
     83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     840:	000056a4 	.word	0x000056a4
     844:	00000389 	.word	0x00000389
     848:	000056b8 	.word	0x000056b8
     84c:	000056cc 	.word	0x000056cc
     850:	000056e0 	.word	0x000056e0
     854:	000056b4 	.word	0x000056b4
     858:	00005550 	.word	0x00005550
     85c:	0000045d 	.word	0x0000045d

00000860 <_ZN15ARINC_Interface16printARINCTXDataEPh>:

void ARINC_Interface::printARINCTXData(unsigned char *array) {
     860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     864:	4605      	mov	r5, r0
     866:	460e      	mov	r6, r1
	unsigned char i;
	
	xprint("\n\r>TX    Data:");
     868:	490e      	ldr	r1, [pc, #56]	; (8a4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x44>)
     86a:	4b0f      	ldr	r3, [pc, #60]	; (8a8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x48>)
     86c:	4798      	blx	r3
     86e:	1e74      	subs	r4, r6, #1
     870:	f106 0802 	add.w	r8, r6, #2
	for(i=0; i< 3;i++) {
		PrintHexByte(array[i]);          // Output the data
     874:	4f0d      	ldr	r7, [pc, #52]	; (8ac <_ZN15ARINC_Interface16printARINCTXDataEPh+0x4c>)
     876:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     87a:	4628      	mov	r0, r5
     87c:	47b8      	blx	r7
	for(i=0; i< 3;i++) {
     87e:	4544      	cmp	r4, r8
     880:	d1f9      	bne.n	876 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	xprint("Label:");
     882:	490b      	ldr	r1, [pc, #44]	; (8b0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x50>)
     884:	4628      	mov	r0, r5
     886:	4c08      	ldr	r4, [pc, #32]	; (8a8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x48>)
     888:	47a0      	blx	r4
	PrintHexByte(array[3]);             // Output the label data
     88a:	78f1      	ldrb	r1, [r6, #3]
     88c:	4628      	mov	r0, r5
     88e:	4b07      	ldr	r3, [pc, #28]	; (8ac <_ZN15ARINC_Interface16printARINCTXDataEPh+0x4c>)
     890:	4798      	blx	r3
	
	crlf();
     892:	4628      	mov	r0, r5
     894:	4b07      	ldr	r3, [pc, #28]	; (8b4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x54>)
     896:	4798      	blx	r3
	xprint(">");
     898:	4907      	ldr	r1, [pc, #28]	; (8b8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x58>)
     89a:	4628      	mov	r0, r5
     89c:	47a0      	blx	r4
     89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8a2:	bf00      	nop
     8a4:	000056f4 	.word	0x000056f4
     8a8:	00000389 	.word	0x00000389
     8ac:	0000045d 	.word	0x0000045d
     8b0:	00005704 	.word	0x00005704
     8b4:	00000431 	.word	0x00000431
     8b8:	000059b8 	.word	0x000059b8

000008bc <_ZN15ARINC_Interface20CheckMessageCountMaxEv>:
	}
}
*/
void ARINC_Interface::CheckMessageCountMax(void)
{
	MessageCount++;
     8bc:	f890 30d9 	ldrb.w	r3, [r0, #217]	; 0xd9
     8c0:	3301      	adds	r3, #1
     8c2:	b2db      	uxtb	r3, r3
	if(MessageCount==MESSAGECOUNTMAX)
     8c4:	2b40      	cmp	r3, #64	; 0x40
	MessageCount=0;
     8c6:	bf08      	it	eq
     8c8:	2300      	moveq	r3, #0
     8ca:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
     8ce:	4770      	bx	lr

000008d0 <_ZN15ARINC_Interface14printARINCDataEhPh>:
}

void ARINC_Interface::printARINCData(const uint8 channel, unsigned char *array) {
     8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8d4:	4604      	mov	r4, r0
     8d6:	4615      	mov	r5, r2
	unsigned char i;

	
	switch (channel)
     8d8:	3901      	subs	r1, #1
     8da:	2907      	cmp	r1, #7
     8dc:	d81a      	bhi.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
     8de:	e8df f001 	tbb	[pc, r1]
     8e2:	2204      	.short	0x2204
     8e4:	77614c37 	.word	0x77614c37
     8e8:	a18c      	.short	0xa18c
	{
		case REC1_HEADER:
		xprint("Rec-1 Data:");
     8ea:	4959      	ldr	r1, [pc, #356]	; (a50 <_ZN15ARINC_Interface14printARINCDataEhPh+0x180>)
     8ec:	4b59      	ldr	r3, [pc, #356]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     8ee:	4798      	blx	r3
     8f0:	1e6e      	subs	r6, r5, #1
     8f2:	f105 0802 	add.w	r8, r5, #2
		for(i=0; i< 3;i++) {
			PrintHexByte(array[i]);       // Output the data
     8f6:	4f58      	ldr	r7, [pc, #352]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     8f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     8fc:	4620      	mov	r0, r4
     8fe:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     900:	45b0      	cmp	r8, r6
     902:	d1f9      	bne.n	8f8 <_ZN15ARINC_Interface14printARINCDataEhPh+0x28>
		}
		xprint("Label:");
     904:	4955      	ldr	r1, [pc, #340]	; (a5c <_ZN15ARINC_Interface14printARINCDataEhPh+0x18c>)
     906:	4620      	mov	r0, r4
     908:	4b52      	ldr	r3, [pc, #328]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     90a:	4798      	blx	r3
		PrintHexByte(array[3]);          // Output the label data
     90c:	78e9      	ldrb	r1, [r5, #3]
     90e:	4620      	mov	r0, r4
     910:	4b51      	ldr	r3, [pc, #324]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     912:	4798      	blx	r3
		
		default:
		break;
	};
	
	crlf();
     914:	4620      	mov	r0, r4
     916:	4b52      	ldr	r3, [pc, #328]	; (a60 <_ZN15ARINC_Interface14printARINCDataEhPh+0x190>)
     918:	4798      	blx	r3
	xprint(">");
     91a:	4952      	ldr	r1, [pc, #328]	; (a64 <_ZN15ARINC_Interface14printARINCDataEhPh+0x194>)
     91c:	4620      	mov	r0, r4
     91e:	4b4d      	ldr	r3, [pc, #308]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     920:	4798      	blx	r3
     922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xprint("PL1-1 Data:");
     926:	4950      	ldr	r1, [pc, #320]	; (a68 <_ZN15ARINC_Interface14printARINCDataEhPh+0x198>)
     928:	4b4a      	ldr	r3, [pc, #296]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     92a:	4798      	blx	r3
     92c:	1e6e      	subs	r6, r5, #1
     92e:	3502      	adds	r5, #2
			PrintHexByte(array[i]);       // Output the  data
     930:	4f49      	ldr	r7, [pc, #292]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     936:	4620      	mov	r0, r4
     938:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     93a:	42ae      	cmp	r6, r5
     93c:	d1f9      	bne.n	932 <_ZN15ARINC_Interface14printARINCDataEhPh+0x62>
		xprint("Match:");
     93e:	494b      	ldr	r1, [pc, #300]	; (a6c <_ZN15ARINC_Interface14printARINCDataEhPh+0x19c>)
     940:	4620      	mov	r0, r4
     942:	4b44      	ldr	r3, [pc, #272]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     944:	4798      	blx	r3
		PrintHexByte(PL11);              // Output the Match label
     946:	2120      	movs	r1, #32
     948:	4620      	mov	r0, r4
     94a:	4b43      	ldr	r3, [pc, #268]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     94c:	4798      	blx	r3
		break;
     94e:	e7e1      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
		xprint("PL1-2 Data:");
     950:	4947      	ldr	r1, [pc, #284]	; (a70 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1a0>)
     952:	4b40      	ldr	r3, [pc, #256]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     954:	4798      	blx	r3
     956:	1e6e      	subs	r6, r5, #1
     958:	3502      	adds	r5, #2
			PrintHexByte(array[i]);       // Output the data
     95a:	4f3f      	ldr	r7, [pc, #252]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     95c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     960:	4620      	mov	r0, r4
     962:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     964:	42b5      	cmp	r5, r6
     966:	d1f9      	bne.n	95c <_ZN15ARINC_Interface14printARINCDataEhPh+0x8c>
		xprint("Match:");
     968:	4940      	ldr	r1, [pc, #256]	; (a6c <_ZN15ARINC_Interface14printARINCDataEhPh+0x19c>)
     96a:	4620      	mov	r0, r4
     96c:	4b39      	ldr	r3, [pc, #228]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     96e:	4798      	blx	r3
		PrintHexByte(PL12);              // Output the Match label
     970:	2140      	movs	r1, #64	; 0x40
     972:	4620      	mov	r0, r4
     974:	4b38      	ldr	r3, [pc, #224]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     976:	4798      	blx	r3
		break;
     978:	e7cc      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
		xprint("PL1-3 Data:");
     97a:	493e      	ldr	r1, [pc, #248]	; (a74 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1a4>)
     97c:	4b35      	ldr	r3, [pc, #212]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     97e:	4798      	blx	r3
     980:	1e6e      	subs	r6, r5, #1
     982:	3502      	adds	r5, #2
			PrintHexByte(array[i]);       // Output the data
     984:	4f34      	ldr	r7, [pc, #208]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     986:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     98a:	4620      	mov	r0, r4
     98c:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     98e:	42b5      	cmp	r5, r6
     990:	d1f9      	bne.n	986 <_ZN15ARINC_Interface14printARINCDataEhPh+0xb6>
		xprint("Match:");
     992:	4936      	ldr	r1, [pc, #216]	; (a6c <_ZN15ARINC_Interface14printARINCDataEhPh+0x19c>)
     994:	4620      	mov	r0, r4
     996:	4b2f      	ldr	r3, [pc, #188]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     998:	4798      	blx	r3
		PrintHexByte(PL13);              // Output the Match label
     99a:	217f      	movs	r1, #127	; 0x7f
     99c:	4620      	mov	r0, r4
     99e:	4b2e      	ldr	r3, [pc, #184]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     9a0:	4798      	blx	r3
		break;
     9a2:	e7b7      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
		xprint("Rec-2 Data:");
     9a4:	4934      	ldr	r1, [pc, #208]	; (a78 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1a8>)
     9a6:	4b2b      	ldr	r3, [pc, #172]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     9a8:	4798      	blx	r3
     9aa:	1e6e      	subs	r6, r5, #1
     9ac:	f105 0802 	add.w	r8, r5, #2
			PrintHexByte(array[i]);        // Output the data
     9b0:	4f29      	ldr	r7, [pc, #164]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     9b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     9b6:	4620      	mov	r0, r4
     9b8:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     9ba:	4546      	cmp	r6, r8
     9bc:	d1f9      	bne.n	9b2 <_ZN15ARINC_Interface14printARINCDataEhPh+0xe2>
		xprint("Label:");
     9be:	4927      	ldr	r1, [pc, #156]	; (a5c <_ZN15ARINC_Interface14printARINCDataEhPh+0x18c>)
     9c0:	4620      	mov	r0, r4
     9c2:	4b24      	ldr	r3, [pc, #144]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     9c4:	4798      	blx	r3
		PrintHexByte(array[3]);          // Output the Match label
     9c6:	78e9      	ldrb	r1, [r5, #3]
     9c8:	4620      	mov	r0, r4
     9ca:	4b23      	ldr	r3, [pc, #140]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     9cc:	4798      	blx	r3
		break;
     9ce:	e7a1      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
		xprint("PL2-1 Data:");
     9d0:	492a      	ldr	r1, [pc, #168]	; (a7c <_ZN15ARINC_Interface14printARINCDataEhPh+0x1ac>)
     9d2:	4b20      	ldr	r3, [pc, #128]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     9d4:	4798      	blx	r3
     9d6:	1e6e      	subs	r6, r5, #1
     9d8:	3502      	adds	r5, #2
			PrintHexByte(array[i]);       // Output the  data
     9da:	4f1f      	ldr	r7, [pc, #124]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     9dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     9e0:	4620      	mov	r0, r4
     9e2:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     9e4:	42ae      	cmp	r6, r5
     9e6:	d1f9      	bne.n	9dc <_ZN15ARINC_Interface14printARINCDataEhPh+0x10c>
		xprint("Match:");
     9e8:	4920      	ldr	r1, [pc, #128]	; (a6c <_ZN15ARINC_Interface14printARINCDataEhPh+0x19c>)
     9ea:	4620      	mov	r0, r4
     9ec:	4b19      	ldr	r3, [pc, #100]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     9ee:	4798      	blx	r3
		PrintHexByte(PL21);              // Output the Match label
     9f0:	21b0      	movs	r1, #176	; 0xb0
     9f2:	4620      	mov	r0, r4
     9f4:	4b18      	ldr	r3, [pc, #96]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     9f6:	4798      	blx	r3
		break;
     9f8:	e78c      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
		xprint("PL2-2 Data:");
     9fa:	4921      	ldr	r1, [pc, #132]	; (a80 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1b0>)
     9fc:	4b15      	ldr	r3, [pc, #84]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     9fe:	4798      	blx	r3
     a00:	1e6e      	subs	r6, r5, #1
     a02:	3502      	adds	r5, #2
			PrintHexByte(array[i]);        // Output the  data
     a04:	4f14      	ldr	r7, [pc, #80]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     a06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     a0a:	4620      	mov	r0, r4
     a0c:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     a0e:	42ae      	cmp	r6, r5
     a10:	d1f9      	bne.n	a06 <_ZN15ARINC_Interface14printARINCDataEhPh+0x136>
		xprint("Match:");
     a12:	4916      	ldr	r1, [pc, #88]	; (a6c <_ZN15ARINC_Interface14printARINCDataEhPh+0x19c>)
     a14:	4620      	mov	r0, r4
     a16:	4b0f      	ldr	r3, [pc, #60]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     a18:	4798      	blx	r3
		PrintHexByte(PL22);              // Output the Match label
     a1a:	21d0      	movs	r1, #208	; 0xd0
     a1c:	4620      	mov	r0, r4
     a1e:	4b0e      	ldr	r3, [pc, #56]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     a20:	4798      	blx	r3
		break;
     a22:	e777      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
		xprint("PL2-3 Data:");
     a24:	4917      	ldr	r1, [pc, #92]	; (a84 <_ZN15ARINC_Interface14printARINCDataEhPh+0x1b4>)
     a26:	4b0b      	ldr	r3, [pc, #44]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     a28:	4798      	blx	r3
     a2a:	1e6e      	subs	r6, r5, #1
     a2c:	3502      	adds	r5, #2
			PrintHexByte(array[i]);        // Output the  data
     a2e:	4f0a      	ldr	r7, [pc, #40]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     a34:	4620      	mov	r0, r4
     a36:	47b8      	blx	r7
		for(i=0; i< 3;i++) {
     a38:	42ae      	cmp	r6, r5
     a3a:	d1f9      	bne.n	a30 <_ZN15ARINC_Interface14printARINCDataEhPh+0x160>
		xprint("Match:");
     a3c:	490b      	ldr	r1, [pc, #44]	; (a6c <_ZN15ARINC_Interface14printARINCDataEhPh+0x19c>)
     a3e:	4620      	mov	r0, r4
     a40:	4b04      	ldr	r3, [pc, #16]	; (a54 <_ZN15ARINC_Interface14printARINCDataEhPh+0x184>)
     a42:	4798      	blx	r3
		PrintHexByte(PL23);              // Output the Match label
     a44:	21ff      	movs	r1, #255	; 0xff
     a46:	4620      	mov	r0, r4
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <_ZN15ARINC_Interface14printARINCDataEhPh+0x188>)
     a4a:	4798      	blx	r3
		break;
     a4c:	e762      	b.n	914 <_ZN15ARINC_Interface14printARINCDataEhPh+0x44>
     a4e:	bf00      	nop
     a50:	0000570c 	.word	0x0000570c
     a54:	00000389 	.word	0x00000389
     a58:	0000045d 	.word	0x0000045d
     a5c:	00005704 	.word	0x00005704
     a60:	00000431 	.word	0x00000431
     a64:	000059b8 	.word	0x000059b8
     a68:	00005718 	.word	0x00005718
     a6c:	00005724 	.word	0x00005724
     a70:	0000572c 	.word	0x0000572c
     a74:	00005738 	.word	0x00005738
     a78:	00005744 	.word	0x00005744
     a7c:	00005750 	.word	0x00005750
     a80:	0000575c 	.word	0x0000575c
     a84:	00005768 	.word	0x00005768

00000a88 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_>:
{
     a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a8a:	4604      	mov	r4, r0
     a8c:	460f      	mov	r7, r1
     a8e:	4615      	mov	r5, r2
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     a90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     a94:	b672      	cpsid	i
	Status_F = HI3893.R_Register(RXSTATUS_1);                       // Poll Receiver1 status register
     a96:	f100 065c 	add.w	r6, r0, #92	; 0x5c
     a9a:	2190      	movs	r1, #144	; 0x90
     a9c:	4630      	mov	r0, r6
     a9e:	4b86      	ldr	r3, [pc, #536]	; (cb8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x230>)
     aa0:	4798      	blx	r3
     aa2:	4b86      	ldr	r3, [pc, #536]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     aa4:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     aa6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     aaa:	b662      	cpsie	i
	if((Status_F & FFEMPTY) == 0)
     aac:	781b      	ldrb	r3, [r3, #0]
     aae:	f013 0f01 	tst.w	r3, #1
     ab2:	d031      	beq.n	b18 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x90>
	if(Status_F & PL1)
     ab4:	4b81      	ldr	r3, [pc, #516]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     ab6:	781b      	ldrb	r3, [r3, #0]
     ab8:	f013 0f08 	tst.w	r3, #8
     abc:	d146      	bne.n	b4c <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0xc4>
	if(Status_F & PL2)
     abe:	4b7f      	ldr	r3, [pc, #508]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	f013 0f10 	tst.w	r3, #16
     ac6:	d15b      	bne.n	b80 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0xf8>
	if(Status_F & PL3)
     ac8:	4b7c      	ldr	r3, [pc, #496]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     aca:	781b      	ldrb	r3, [r3, #0]
     acc:	f013 0f20 	tst.w	r3, #32
     ad0:	d170      	bne.n	bb4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x12c>
  __ASM volatile ("dmb 0xF":::"memory");
     ad2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     ad6:	b672      	cpsid	i
	Status_F = HI3893.R_Register(RXSTATUS_2);
     ad8:	21b0      	movs	r1, #176	; 0xb0
     ada:	4630      	mov	r0, r6
     adc:	4b76      	ldr	r3, [pc, #472]	; (cb8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x230>)
     ade:	4798      	blx	r3
     ae0:	4b76      	ldr	r3, [pc, #472]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     ae2:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     ae4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ae8:	b662      	cpsie	i
	if((Status_F & FFEMPTY) == 0)
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	f013 0f01 	tst.w	r3, #1
     af0:	d07a      	beq.n	be8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x160>
	if(Status_F & PL1)
     af2:	4b72      	ldr	r3, [pc, #456]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	f013 0f08 	tst.w	r3, #8
     afa:	f040 808f 	bne.w	c1c <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x194>
	if(Status_F & PL2)
     afe:	4b6f      	ldr	r3, [pc, #444]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	f013 0f10 	tst.w	r3, #16
     b06:	f040 80a3 	bne.w	c50 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x1c8>
	if(Status_F & PL3)
     b0a:	4b6c      	ldr	r3, [pc, #432]	; (cbc <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x234>)
     b0c:	781b      	ldrb	r3, [r3, #0]
     b0e:	f013 0f20 	tst.w	r3, #32
     b12:	f040 80b7 	bne.w	c84 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x1fc>
     b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("dmb 0xF":::"memory");
     b18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_1,RXBuffer );
     b1e:	463a      	mov	r2, r7
     b20:	21a0      	movs	r1, #160	; 0xa0
     b22:	4630      	mov	r0, r6
     b24:	4b66      	ldr	r3, [pc, #408]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     b26:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
     b28:	683a      	ldr	r2, [r7, #0]
     b2a:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     b2e:	333b      	adds	r3, #59	; 0x3b
     b30:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     b34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b38:	b662      	cpsie	i
		printARINCData(REC1_HEADER,RXBuffer);
     b3a:	463a      	mov	r2, r7
     b3c:	2101      	movs	r1, #1
     b3e:	4620      	mov	r0, r4
     b40:	4b60      	ldr	r3, [pc, #384]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     b42:	4798      	blx	r3
		CheckMessageCountMax();
     b44:	4620      	mov	r0, r4
     b46:	4b60      	ldr	r3, [pc, #384]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     b48:	4798      	blx	r3
     b4a:	e7b3      	b.n	ab4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x2c>
  __ASM volatile ("dmb 0xF":::"memory");
     b4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     b50:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_1L1,RXBufferPL );
     b52:	462a      	mov	r2, r5
     b54:	21a4      	movs	r1, #164	; 0xa4
     b56:	4630      	mov	r0, r6
     b58:	4b59      	ldr	r3, [pc, #356]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     b5a:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     b5c:	682a      	ldr	r2, [r5, #0]
     b5e:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     b62:	333b      	adds	r3, #59	; 0x3b
     b64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     b68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b6c:	b662      	cpsie	i
		printARINCData(REC1_L1_HEADER,RXBufferPL);
     b6e:	462a      	mov	r2, r5
     b70:	2102      	movs	r1, #2
     b72:	4620      	mov	r0, r4
     b74:	4b53      	ldr	r3, [pc, #332]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     b76:	4798      	blx	r3
		CheckMessageCountMax();
     b78:	4620      	mov	r0, r4
     b7a:	4b53      	ldr	r3, [pc, #332]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     b7c:	4798      	blx	r3
     b7e:	e79e      	b.n	abe <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x36>
  __ASM volatile ("dmb 0xF":::"memory");
     b80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     b84:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_1L2,RXBufferPL );
     b86:	462a      	mov	r2, r5
     b88:	21a8      	movs	r1, #168	; 0xa8
     b8a:	4630      	mov	r0, r6
     b8c:	4b4c      	ldr	r3, [pc, #304]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     b8e:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     b90:	682a      	ldr	r2, [r5, #0]
     b92:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     b96:	333b      	adds	r3, #59	; 0x3b
     b98:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     b9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ba0:	b662      	cpsie	i
		printARINCData(REC1_L2_HEADER,RXBufferPL);
     ba2:	462a      	mov	r2, r5
     ba4:	2103      	movs	r1, #3
     ba6:	4620      	mov	r0, r4
     ba8:	4b46      	ldr	r3, [pc, #280]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     baa:	4798      	blx	r3
		CheckMessageCountMax();
     bac:	4620      	mov	r0, r4
     bae:	4b46      	ldr	r3, [pc, #280]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     bb0:	4798      	blx	r3
     bb2:	e789      	b.n	ac8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x40>
  __ASM volatile ("dmb 0xF":::"memory");
     bb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     bb8:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_1L3,RXBufferPL );
     bba:	462a      	mov	r2, r5
     bbc:	21ac      	movs	r1, #172	; 0xac
     bbe:	4630      	mov	r0, r6
     bc0:	4b3f      	ldr	r3, [pc, #252]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     bc2:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     bc4:	682a      	ldr	r2, [r5, #0]
     bc6:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     bca:	333b      	adds	r3, #59	; 0x3b
     bcc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     bd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     bd4:	b662      	cpsie	i
		printARINCData(REC1_L3_HEADER,RXBufferPL);
     bd6:	462a      	mov	r2, r5
     bd8:	2104      	movs	r1, #4
     bda:	4620      	mov	r0, r4
     bdc:	4b39      	ldr	r3, [pc, #228]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     bde:	4798      	blx	r3
		CheckMessageCountMax();
     be0:	4620      	mov	r0, r4
     be2:	4b39      	ldr	r3, [pc, #228]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     be4:	4798      	blx	r3
     be6:	e774      	b.n	ad2 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x4a>
  __ASM volatile ("dmb 0xF":::"memory");
     be8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     bec:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_2,RXBuffer );
     bee:	463a      	mov	r2, r7
     bf0:	21c0      	movs	r1, #192	; 0xc0
     bf2:	4630      	mov	r0, r6
     bf4:	4b32      	ldr	r3, [pc, #200]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     bf6:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
     bf8:	683a      	ldr	r2, [r7, #0]
     bfa:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     bfe:	333b      	adds	r3, #59	; 0x3b
     c00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     c04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c08:	b662      	cpsie	i
		printARINCData(REC2_HEADER,RXBuffer);
     c0a:	463a      	mov	r2, r7
     c0c:	2105      	movs	r1, #5
     c0e:	4620      	mov	r0, r4
     c10:	4b2c      	ldr	r3, [pc, #176]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     c12:	4798      	blx	r3
		CheckMessageCountMax();
     c14:	4620      	mov	r0, r4
     c16:	4b2c      	ldr	r3, [pc, #176]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     c18:	4798      	blx	r3
     c1a:	e76a      	b.n	af2 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x6a>
  __ASM volatile ("dmb 0xF":::"memory");
     c1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_2L1,RXBufferPL );
     c22:	462a      	mov	r2, r5
     c24:	21c4      	movs	r1, #196	; 0xc4
     c26:	4630      	mov	r0, r6
     c28:	4b25      	ldr	r3, [pc, #148]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     c2a:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     c2c:	682a      	ldr	r2, [r5, #0]
     c2e:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     c32:	333b      	adds	r3, #59	; 0x3b
     c34:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     c38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c3c:	b662      	cpsie	i
		printARINCData(REC2_L1_HEADER,RXBufferPL);
     c3e:	462a      	mov	r2, r5
     c40:	2106      	movs	r1, #6
     c42:	4620      	mov	r0, r4
     c44:	4b1f      	ldr	r3, [pc, #124]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     c46:	4798      	blx	r3
		CheckMessageCountMax();
     c48:	4620      	mov	r0, r4
     c4a:	4b1f      	ldr	r3, [pc, #124]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     c4c:	4798      	blx	r3
     c4e:	e756      	b.n	afe <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x76>
  __ASM volatile ("dmb 0xF":::"memory");
     c50:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     c54:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_2L2,RXBufferPL );
     c56:	462a      	mov	r2, r5
     c58:	21c8      	movs	r1, #200	; 0xc8
     c5a:	4630      	mov	r0, r6
     c5c:	4b18      	ldr	r3, [pc, #96]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     c5e:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     c60:	682a      	ldr	r2, [r5, #0]
     c62:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     c66:	333b      	adds	r3, #59	; 0x3b
     c68:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     c6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c70:	b662      	cpsie	i
		printARINCData(REC2_L2_HEADER,RXBufferPL);
     c72:	462a      	mov	r2, r5
     c74:	2107      	movs	r1, #7
     c76:	4620      	mov	r0, r4
     c78:	4b12      	ldr	r3, [pc, #72]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     c7a:	4798      	blx	r3
		CheckMessageCountMax();
     c7c:	4620      	mov	r0, r4
     c7e:	4b12      	ldr	r3, [pc, #72]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     c80:	4798      	blx	r3
     c82:	e742      	b.n	b0a <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x82>
  __ASM volatile ("dmb 0xF":::"memory");
     c84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     c88:	b672      	cpsid	i
		HI3893.ArincRead(RXFIFO_2L3,RXBufferPL );
     c8a:	462a      	mov	r2, r5
     c8c:	21cc      	movs	r1, #204	; 0xcc
     c8e:	4630      	mov	r0, r6
     c90:	4b0b      	ldr	r3, [pc, #44]	; (cc0 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x238>)
     c92:	4798      	blx	r3
		(void)memcpy(g_RXBuffer[MessageCount],RXBufferPL,g_RXBuffSize);  // copy frame to large array for safe keeping
     c94:	682a      	ldr	r2, [r5, #0]
     c96:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
     c9a:	333b      	adds	r3, #59	; 0x3b
     c9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  __ASM volatile ("dmb 0xF":::"memory");
     ca0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ca4:	b662      	cpsie	i
		printARINCData(REC2_L3_HEADER,RXBufferPL);
     ca6:	462a      	mov	r2, r5
     ca8:	2108      	movs	r1, #8
     caa:	4620      	mov	r0, r4
     cac:	4b05      	ldr	r3, [pc, #20]	; (cc4 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x23c>)
     cae:	4798      	blx	r3
		CheckMessageCountMax();
     cb0:	4620      	mov	r0, r4
     cb2:	4b05      	ldr	r3, [pc, #20]	; (cc8 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x240>)
     cb4:	4798      	blx	r3
}
     cb6:	e72e      	b.n	b16 <_ZN15ARINC_Interface26FetchAllMessagesAndDisplayEPhS0_+0x8e>
     cb8:	00001471 	.word	0x00001471
     cbc:	20000558 	.word	0x20000558
     cc0:	000015a9 	.word	0x000015a9
     cc4:	000008d1 	.word	0x000008d1
     cc8:	000008bd 	.word	0x000008bd

00000ccc <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh>:
void ARINC_Interface::TransmitReceiveWithLabels_Mode(const uint8_t SELFTEST){
     ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cd0:	b089      	sub	sp, #36	; 0x24
     cd2:	4605      	mov	r5, r0
     cd4:	460e      	mov	r6, r1
	BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
     cd6:	2300      	movs	r3, #0
     cd8:	9304      	str	r3, [sp, #16]
	MessageCount=0;
     cda:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
	xprint("\n\rTransmit & Receive With Labels Mode\n\r");
     cde:	49b0      	ldr	r1, [pc, #704]	; (fa0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d4>)
     ce0:	4bb0      	ldr	r3, [pc, #704]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     ce2:	4798      	blx	r3
	if(SELFTEST)
     ce4:	b11e      	cbz	r6, cee <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x22>
	xprint("\n\rSELF-TEST, Internal Digital Loop-back, No data is transmitted externally\n\r");
     ce6:	49b0      	ldr	r1, [pc, #704]	; (fa8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2dc>)
     ce8:	4628      	mov	r0, r5
     cea:	4bae      	ldr	r3, [pc, #696]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     cec:	4798      	blx	r3
	if(BITRATE0)
     cee:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
     cf2:	b1fb      	cbz	r3, d34 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x68>
		xprint("\n\rSlow Speed");
     cf4:	49ad      	ldr	r1, [pc, #692]	; (fac <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2e0>)
     cf6:	4628      	mov	r0, r5
     cf8:	4baa      	ldr	r3, [pc, #680]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     cfa:	4798      	blx	r3
		Arate = 1;              // BITRATE0 open so set for slow speed
     cfc:	2401      	movs	r4, #1
	if(PARITY)
     cfe:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
     d02:	b12b      	cbz	r3, d10 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x44>
		Arate |= TRANSMIT_PARTY_ON << 2;   // enable the transmitter parity
     d04:	f044 0404 	orr.w	r4, r4, #4
		xprint("\n\rTransmitter Parity Enabled");
     d08:	49a9      	ldr	r1, [pc, #676]	; (fb0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2e4>)
     d0a:	4628      	mov	r0, r5
     d0c:	4ba5      	ldr	r3, [pc, #660]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     d0e:	4798      	blx	r3
	if(TSR_Default != HI3893.Init3593(ACLKDIV,  // ARINC clock divisor
     d10:	f105 035c 	add.w	r3, r5, #92	; 0x5c
     d14:	4618      	mov	r0, r3
     d16:	9302      	str	r3, [sp, #8]
     d18:	2201      	movs	r2, #1
     d1a:	9201      	str	r2, [sp, #4]
     d1c:	9400      	str	r4, [sp, #0]
     d1e:	4633      	mov	r3, r6
     d20:	2104      	movs	r1, #4
     d22:	4ea4      	ldr	r6, [pc, #656]	; (fb4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2e8>)
     d24:	47b0      	blx	r6
     d26:	2801      	cmp	r0, #1
     d28:	d00a      	beq.n	d40 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x74>
		xprint("\n\rHI-3593 failed to initilize\n\r");
     d2a:	49a3      	ldr	r1, [pc, #652]	; (fb8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2ec>)
     d2c:	4628      	mov	r0, r5
     d2e:	4b9d      	ldr	r3, [pc, #628]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     d30:	4798      	blx	r3
     d32:	e7fe      	b.n	d32 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x66>
		xprint("\n\rFast Speed");
     d34:	49a1      	ldr	r1, [pc, #644]	; (fbc <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2f0>)
     d36:	4628      	mov	r0, r5
     d38:	4b9a      	ldr	r3, [pc, #616]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     d3a:	4798      	blx	r3
	Arate=0;
     d3c:	2400      	movs	r4, #0
     d3e:	e7de      	b.n	cfe <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x32>
	(void)memset(TXBuffer, 0, sizeof(TXBuffer));                   // clear the buffer
     d40:	f105 03be 	add.w	r3, r5, #190	; 0xbe
     d44:	4619      	mov	r1, r3
     d46:	9305      	str	r3, [sp, #20]
     d48:	2300      	movs	r3, #0
     d4a:	f8c5 30be 	str.w	r3, [r5, #190]	; 0xbe
     d4e:	604b      	str	r3, [r1, #4]
     d50:	608b      	str	r3, [r1, #8]
     d52:	60cb      	str	r3, [r1, #12]
	HI3893.initReceiver1Labels();     // initial Rec1 labels
     d54:	f8dd 8008 	ldr.w	r8, [sp, #8]
     d58:	4640      	mov	r0, r8
     d5a:	4b99      	ldr	r3, [pc, #612]	; (fc0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2f4>)
     d5c:	4798      	blx	r3
	HI3893.initReceiver2Labels();     // initial Rec2 labels
     d5e:	4640      	mov	r0, r8
     d60:	4b98      	ldr	r3, [pc, #608]	; (fc4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2f8>)
     d62:	4798      	blx	r3
	HI3893.MultiByteRead(REC1MEMORY, 32, LabelsAr1); // read in all Rec-1 labels into the passed array
     d64:	4f98      	ldr	r7, [pc, #608]	; (fc8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2fc>)
     d66:	1d3b      	adds	r3, r7, #4
     d68:	2220      	movs	r2, #32
     d6a:	2198      	movs	r1, #152	; 0x98
     d6c:	4640      	mov	r0, r8
     d6e:	4e97      	ldr	r6, [pc, #604]	; (fcc <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x300>)
     d70:	47b0      	blx	r6
	HI3893.MultiByteRead(REC2MEMORY, 32, LabelsAr2); // read in all Rec-2 labels into the passed array
     d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
     d76:	2220      	movs	r2, #32
     d78:	21b8      	movs	r1, #184	; 0xb8
     d7a:	4640      	mov	r0, r8
     d7c:	47b0      	blx	r6
	if(BITRATE1)
     d7e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
     d82:	2b00      	cmp	r3, #0
     d84:	f000 8088 	beq.w	e98 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x1cc>
		xprint("\n\rReceiver-1 Parity is Enabled");
     d88:	4991      	ldr	r1, [pc, #580]	; (fd0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x304>)
     d8a:	4628      	mov	r0, r5
     d8c:	4b85      	ldr	r3, [pc, #532]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     d8e:	4798      	blx	r3
		Rec1Parity =8;     // Receiver 1 parity enable
     d90:	2708      	movs	r7, #8
	if(BITRATE2)
     d92:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
     d96:	2b00      	cmp	r3, #0
     d98:	f000 8084 	beq.w	ea4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x1d8>
		xprint("\n\rReceiver-2 Parity is Enabled");
     d9c:	498d      	ldr	r1, [pc, #564]	; (fd4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x308>)
     d9e:	4628      	mov	r0, r5
     da0:	4b80      	ldr	r3, [pc, #512]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     da2:	4798      	blx	r3
		Rec2Parity =8;     // Receiver 2 parity enable
     da4:	2608      	movs	r6, #8
	Arate &= 1;           // mask off everything else except the speed bit before using it here
     da6:	f004 0401 	and.w	r4, r4, #1
	if(OPT2)      // enable labels if SW OTP2 is open
     daa:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
     dae:	2b00      	cmp	r3, #0
     db0:	d07e      	beq.n	eb0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x1e4>
     db2:	f064 0479 	orn	r4, r4, #121	; 0x79
     db6:	b2e4      	uxtb	r4, r4
		HI3893.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
     db8:	ea47 0204 	orr.w	r2, r7, r4
     dbc:	2110      	movs	r1, #16
     dbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
     dc2:	4640      	mov	r0, r8
     dc4:	4f84      	ldr	r7, [pc, #528]	; (fd8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x30c>)
     dc6:	47b8      	blx	r7
		HI3893.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
     dc8:	ea46 0204 	orr.w	r2, r6, r4
     dcc:	2124      	movs	r1, #36	; 0x24
     dce:	4640      	mov	r0, r8
     dd0:	47b8      	blx	r7
		xprint("\n\rAll labels are Enabled");
     dd2:	4982      	ldr	r1, [pc, #520]	; (fdc <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x310>)
     dd4:	4628      	mov	r0, r5
     dd6:	4b73      	ldr	r3, [pc, #460]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     dd8:	4798      	blx	r3
	TXBuffer[0] =  PL13;   // filter 3
     dda:	237f      	movs	r3, #127	; 0x7f
     ddc:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
	TXBuffer[1] =  PL12;   // filter 2
     de0:	2340      	movs	r3, #64	; 0x40
     de2:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf
	TXBuffer[2] =  PL11;   // filter 1
     de6:	2320      	movs	r3, #32
     de8:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
	HI3893.TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
     dec:	9f05      	ldr	r7, [sp, #20]
     dee:	463a      	mov	r2, r7
     df0:	2118      	movs	r1, #24
     df2:	9e02      	ldr	r6, [sp, #8]
     df4:	4630      	mov	r0, r6
     df6:	4c7a      	ldr	r4, [pc, #488]	; (fe0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x314>)
     df8:	47a0      	blx	r4
	TXBuffer[0] =  PL23;   // filter 3
     dfa:	23ff      	movs	r3, #255	; 0xff
     dfc:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
	TXBuffer[1] =  PL22;   // filter 2
     e00:	23d0      	movs	r3, #208	; 0xd0
     e02:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf
	TXBuffer[2] =  PL21;   // filter 1
     e06:	23b0      	movs	r3, #176	; 0xb0
     e08:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
	HI3893.TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
     e0c:	463a      	mov	r2, r7
     e0e:	212c      	movs	r1, #44	; 0x2c
     e10:	4630      	mov	r0, r6
     e12:	47a0      	blx	r4
	TXBuffer[0] = BigCounter.PayLoad[1];
     e14:	2300      	movs	r3, #0
     e16:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
	TXBuffer[1] = BigCounter.PayLoad[2];
     e1a:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf
	TXBuffer[2] = BigCounter.PayLoad[3];
     e1e:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
	TXBuffer[3] = ARINCLabel;            // normal default label
     e22:	2330      	movs	r3, #48	; 0x30
     e24:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
	xprint("\n\r\nPress SW-1 to start initially\n\r\n");
     e28:	496e      	ldr	r1, [pc, #440]	; (fe4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x318>)
     e2a:	4628      	mov	r0, r5
     e2c:	4c5d      	ldr	r4, [pc, #372]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     e2e:	47a0      	blx	r4
	xprint("--- Button Commands ---\n\r");
     e30:	496d      	ldr	r1, [pc, #436]	; (fe8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x31c>)
     e32:	4628      	mov	r0, r5
     e34:	47a0      	blx	r4
	xprint("  Space Bar to Display Status and Control Registers\n\r");
     e36:	496d      	ldr	r1, [pc, #436]	; (fec <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x320>)
     e38:	4628      	mov	r0, r5
     e3a:	47a0      	blx	r4
	xprint("  p to Pause\n\r");
     e3c:	496c      	ldr	r1, [pc, #432]	; (ff0 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x324>)
     e3e:	4628      	mov	r0, r5
     e40:	47a0      	blx	r4
	xprint("  m to Display Label Memory");
     e42:	496c      	ldr	r1, [pc, #432]	; (ff4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x328>)
     e44:	4628      	mov	r0, r5
     e46:	47a0      	blx	r4
	ConsoleCommandsHelp();
     e48:	4628      	mov	r0, r5
     e4a:	4b6b      	ldr	r3, [pc, #428]	; (ff8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x32c>)
     e4c:	4798      	blx	r3
	xprint("\n\r>");
     e4e:	496b      	ldr	r1, [pc, #428]	; (ffc <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x330>)
     e50:	4628      	mov	r0, r5
     e52:	47a0      	blx	r4
     e54:	2602      	movs	r6, #2
     e56:	4c6a      	ldr	r4, [pc, #424]	; (1000 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x334>)
     e58:	4630      	mov	r0, r6
     e5a:	47a0      	blx	r4
	while(gpio_get_pin_level(OLED_BUTTON1));
     e5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
     e60:	d1fa      	bne.n	e58 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x18c>
     e62:	2602      	movs	r6, #2
     e64:	4c66      	ldr	r4, [pc, #408]	; (1000 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x334>)
     e66:	4630      	mov	r0, r6
     e68:	47a0      	blx	r4
	while(!gpio_get_pin_level(OLED_BUTTON1));
     e6a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
     e6e:	d0fa      	beq.n	e66 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x19a>
	delay_ms(K_1SEC);              // blink for 1 sec
     e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e74:	4b63      	ldr	r3, [pc, #396]	; (1004 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x338>)
     e76:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e7c:	4b62      	ldr	r3, [pc, #392]	; (1008 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x33c>)
     e7e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	xprint("\n\rTransmitting\n\r>");
     e82:	4962      	ldr	r1, [pc, #392]	; (100c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x340>)
     e84:	4628      	mov	r0, r5
     e86:	4b47      	ldr	r3, [pc, #284]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     e88:	4798      	blx	r3
			ch=xgetchar();
     e8a:	4e61      	ldr	r6, [pc, #388]	; (1010 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x344>)
				PrintLabelsOnConsole(LabelsAr1);
     e8c:	f8df 9138 	ldr.w	r9, [pc, #312]	; fc8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2fc>
     e90:	f109 0304 	add.w	r3, r9, #4
     e94:	9303      	str	r3, [sp, #12]
     e96:	e046      	b.n	f26 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x25a>
		xprint("\n\rReceiver-1 Parity is Disabled");
     e98:	495e      	ldr	r1, [pc, #376]	; (1014 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x348>)
     e9a:	4628      	mov	r0, r5
     e9c:	4b41      	ldr	r3, [pc, #260]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     e9e:	4798      	blx	r3
	Rec1Parity =0;
     ea0:	2700      	movs	r7, #0
     ea2:	e776      	b.n	d92 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0xc6>
		xprint("\n\rReceiver-2 Parity is Disabled");
     ea4:	495c      	ldr	r1, [pc, #368]	; (1018 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x34c>)
     ea6:	4628      	mov	r0, r5
     ea8:	4b3e      	ldr	r3, [pc, #248]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     eaa:	4798      	blx	r3
	Rec2Parity =0;
     eac:	2600      	movs	r6, #0
     eae:	e77a      	b.n	da6 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0xda>
     eb0:	f064 047f 	orn	r4, r4, #127	; 0x7f
     eb4:	b2e4      	uxtb	r4, r4
		HI3893.W_CommandValue(REC1CR, RFLIP | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
     eb6:	ea47 0204 	orr.w	r2, r7, r4
     eba:	2110      	movs	r1, #16
     ebc:	f8dd 8008 	ldr.w	r8, [sp, #8]
     ec0:	4640      	mov	r0, r8
     ec2:	4f45      	ldr	r7, [pc, #276]	; (fd8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x30c>)
     ec4:	47b8      	blx	r7
		HI3893.W_CommandValue(REC2CR, RFLIP | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
     ec6:	ea46 0204 	orr.w	r2, r6, r4
     eca:	2124      	movs	r1, #36	; 0x24
     ecc:	4640      	mov	r0, r8
     ece:	47b8      	blx	r7
		xprint("\n\rAll labels are Disabled");
     ed0:	4952      	ldr	r1, [pc, #328]	; (101c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x350>)
     ed2:	4628      	mov	r0, r5
     ed4:	4b33      	ldr	r3, [pc, #204]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     ed6:	4798      	blx	r3
     ed8:	e77f      	b.n	dda <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x10e>
				xprint("\n\rHI-3593 Status, Control Registers\r\n");
     eda:	4951      	ldr	r1, [pc, #324]	; (1020 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x354>)
     edc:	4628      	mov	r0, r5
     ede:	4c31      	ldr	r4, [pc, #196]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     ee0:	47a0      	blx	r4
  __ASM volatile ("dmb 0xF":::"memory");
     ee2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     ee6:	b672      	cpsid	i
				printStatusRegisters();                  // print out the status registers
     ee8:	4628      	mov	r0, r5
     eea:	4b4e      	ldr	r3, [pc, #312]	; (1024 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x358>)
     eec:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
     eee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ef2:	b662      	cpsie	i
				xprint("Press SW4 or spacebar to continue");
     ef4:	494c      	ldr	r1, [pc, #304]	; (1028 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x35c>)
     ef6:	4628      	mov	r0, r5
     ef8:	47a0      	blx	r4
				while(' ' != xgetchar());        // start again if SW-4 pressed/spacebar
     efa:	4628      	mov	r0, r5
     efc:	47b0      	blx	r6
     efe:	2820      	cmp	r0, #32
     f00:	d1fb      	bne.n	efa <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x22e>
  __ASM volatile ("dmb 0xF":::"memory");
     f02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     f06:	b672      	cpsid	i
			Status_F = HI3893.R_Register(R_TSR);      // Transmit control register
     f08:	2180      	movs	r1, #128	; 0x80
     f0a:	9802      	ldr	r0, [sp, #8]
     f0c:	4b47      	ldr	r3, [pc, #284]	; (102c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x360>)
     f0e:	4798      	blx	r3
     f10:	f889 0044 	strb.w	r0, [r9, #68]	; 0x44
  __ASM volatile ("dmb 0xF":::"memory");
     f14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f18:	b662      	cpsie	i
		} while (Status_F & TFFULL);      // Wait until FIFO not full before loading next byte
     f1a:	f899 3044 	ldrb.w	r3, [r9, #68]	; 0x44
     f1e:	f013 0f04 	tst.w	r3, #4
     f22:	f000 80c4 	beq.w	10ae <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x3e2>
			ch=xgetchar();
     f26:	4628      	mov	r0, r5
     f28:	47b0      	blx	r6
     f2a:	4607      	mov	r7, r0
			if(ch==' ')                         // print out the status registers if
     f2c:	2820      	cmp	r0, #32
     f2e:	d0d4      	beq.n	eda <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x20e>
			if( ch=='p'){                    // pause transmitting
     f30:	2870      	cmp	r0, #112	; 0x70
     f32:	f000 808d 	beq.w	1050 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x384>
			if(ch=='m' ){     // print out the Label memory for both receivers if SW3 pushed
     f36:	286d      	cmp	r0, #109	; 0x6d
     f38:	d1e3      	bne.n	f02 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x236>
				xprint("\n\rReceiver 1 Labels\n\r");
     f3a:	493d      	ldr	r1, [pc, #244]	; (1030 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x364>)
     f3c:	4628      	mov	r0, r5
     f3e:	4c19      	ldr	r4, [pc, #100]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     f40:	47a0      	blx	r4
				PrintLabelsOnConsole(LabelsAr1);
     f42:	9903      	ldr	r1, [sp, #12]
     f44:	4628      	mov	r0, r5
     f46:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1044 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x378>
     f4a:	47c0      	blx	r8
				crlf();
     f4c:	4628      	mov	r0, r5
     f4e:	4b39      	ldr	r3, [pc, #228]	; (1034 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x368>)
     f50:	4798      	blx	r3
				xprint("\n\rReceiver 2 Labels\n\r");
     f52:	4939      	ldr	r1, [pc, #228]	; (1038 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x36c>)
     f54:	4628      	mov	r0, r5
     f56:	47a0      	blx	r4
				PrintLabelsOnConsole(LabelsAr2);
     f58:	f109 0124 	add.w	r1, r9, #36	; 0x24
     f5c:	4628      	mov	r0, r5
     f5e:	47c0      	blx	r8
				xprint("\n\rPress SW-4 to Resume\n\r");
     f60:	4936      	ldr	r1, [pc, #216]	; (103c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x370>)
     f62:	4628      	mov	r0, r5
     f64:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
     f66:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1048 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x37c>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     f6a:	4c27      	ldr	r4, [pc, #156]	; (1008 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x33c>)
	CRITICAL_SECTION_LEAVE();
     f6c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 104c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x380>
	CRITICAL_SECTION_ENTER();
     f70:	a807      	add	r0, sp, #28
     f72:	47d0      	blx	sl
     f74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     f78:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     f7c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     f80:	ea82 0b03 	eor.w	fp, r2, r3
     f84:	ea0b 0b01 	and.w	fp, fp, r1
     f88:	ea8b 0b02 	eor.w	fp, fp, r2
	CRITICAL_SECTION_LEAVE();
     f8c:	a807      	add	r0, sp, #28
     f8e:	47c0      	blx	r8
				while(gpio_get_pin_level(OLED_BUTTON3));                      // resume if Button-4 pressed or spacebar again
     f90:	f01b 0f08 	tst.w	fp, #8
     f94:	d1ec      	bne.n	f70 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2a4>
				xprint("\n\rTransmitter Resumed...\n\r");
     f96:	492a      	ldr	r1, [pc, #168]	; (1040 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x374>)
     f98:	4628      	mov	r0, r5
     f9a:	4b02      	ldr	r3, [pc, #8]	; (fa4 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x2d8>)
     f9c:	4798      	blx	r3
     f9e:	e7b0      	b.n	f02 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x236>
     fa0:	00005774 	.word	0x00005774
     fa4:	00000389 	.word	0x00000389
     fa8:	0000579c 	.word	0x0000579c
     fac:	000057ec 	.word	0x000057ec
     fb0:	0000580c 	.word	0x0000580c
     fb4:	000014a5 	.word	0x000014a5
     fb8:	0000582c 	.word	0x0000582c
     fbc:	000057fc 	.word	0x000057fc
     fc0:	00001295 	.word	0x00001295
     fc4:	000012dd 	.word	0x000012dd
     fc8:	20000558 	.word	0x20000558
     fcc:	00001531 	.word	0x00001531
     fd0:	0000584c 	.word	0x0000584c
     fd4:	0000588c 	.word	0x0000588c
     fd8:	00001411 	.word	0x00001411
     fdc:	000058cc 	.word	0x000058cc
     fe0:	00001359 	.word	0x00001359
     fe4:	00005904 	.word	0x00005904
     fe8:	00005928 	.word	0x00005928
     fec:	00005944 	.word	0x00005944
     ff0:	0000597c 	.word	0x0000597c
     ff4:	0000598c 	.word	0x0000598c
     ff8:	000003c1 	.word	0x000003c1
     ffc:	00005560 	.word	0x00005560
    1000:	000002d1 	.word	0x000002d1
    1004:	00001c71 	.word	0x00001c71
    1008:	41008000 	.word	0x41008000
    100c:	000059a8 	.word	0x000059a8
    1010:	000003a9 	.word	0x000003a9
    1014:	0000586c 	.word	0x0000586c
    1018:	000058ac 	.word	0x000058ac
    101c:	000058e8 	.word	0x000058e8
    1020:	000059bc 	.word	0x000059bc
    1024:	00000579 	.word	0x00000579
    1028:	000059e4 	.word	0x000059e4
    102c:	00001471 	.word	0x00001471
    1030:	00005a90 	.word	0x00005a90
    1034:	00000431 	.word	0x00000431
    1038:	00005aa8 	.word	0x00005aa8
    103c:	00005ac0 	.word	0x00005ac0
    1040:	00005a74 	.word	0x00005a74
    1044:	000007dd 	.word	0x000007dd
    1048:	00001c41 	.word	0x00001c41
    104c:	00001c4f 	.word	0x00001c4f
				debounceButton(OLED_BUTTON2);                // debounce this button
    1050:	2142      	movs	r1, #66	; 0x42
    1052:	4628      	mov	r0, r5
    1054:	4b31      	ldr	r3, [pc, #196]	; (111c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x450>)
    1056:	4798      	blx	r3
				xprint("\n\rTransmit Paused\n\r");
    1058:	4931      	ldr	r1, [pc, #196]	; (1120 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x454>)
    105a:	4628      	mov	r0, r5
    105c:	4c31      	ldr	r4, [pc, #196]	; (1124 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x458>)
    105e:	47a0      	blx	r4
				xprint("Press OLED_BUTTON-2 to transmit one frame and pause\n\r");
    1060:	4931      	ldr	r1, [pc, #196]	; (1128 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x45c>)
    1062:	4628      	mov	r0, r5
    1064:	47a0      	blx	r4
				xprint("Press OLED_BUTTON-3 to Resume\n\r");
    1066:	4931      	ldr	r1, [pc, #196]	; (112c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x460>)
    1068:	4628      	mov	r0, r5
    106a:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    106c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 114c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x480>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1070:	4c2f      	ldr	r4, [pc, #188]	; (1130 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x464>)
	CRITICAL_SECTION_LEAVE();
    1072:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1150 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x484>
	CRITICAL_SECTION_ENTER();
    1076:	a806      	add	r0, sp, #24
    1078:	47d0      	blx	sl
    107a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    107e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1082:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    1086:	ea82 0b03 	eor.w	fp, r2, r3
    108a:	ea0b 0b01 	and.w	fp, fp, r1
    108e:	ea8b 0b02 	eor.w	fp, fp, r2
	CRITICAL_SECTION_LEAVE();
    1092:	a806      	add	r0, sp, #24
    1094:	47c0      	blx	r8
					if(!gpio_get_pin_level(OLED_BUTTON3))
    1096:	f01b 0f08 	tst.w	fp, #8
    109a:	d1ec      	bne.n	1076 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x3aa>
						xprint("\n\rTransmitter Resumed...\n\r");
    109c:	4925      	ldr	r1, [pc, #148]	; (1134 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x468>)
    109e:	4628      	mov	r0, r5
    10a0:	4b20      	ldr	r3, [pc, #128]	; (1124 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x458>)
    10a2:	4798      	blx	r3
				debounceButton(OLED_BUTTON2);         // debounce this button
    10a4:	2142      	movs	r1, #66	; 0x42
    10a6:	4628      	mov	r0, r5
    10a8:	4b1c      	ldr	r3, [pc, #112]	; (111c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x450>)
    10aa:	4798      	blx	r3
    10ac:	e729      	b.n	f02 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x236>
		if(ConsoleCommands(ch))                // 1 second delay to see the message on the console
    10ae:	4639      	mov	r1, r7
    10b0:	4628      	mov	r0, r5
    10b2:	4b21      	ldr	r3, [pc, #132]	; (1138 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x46c>)
    10b4:	4798      	blx	r3
    10b6:	bb60      	cbnz	r0, 1112 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x446>
  __ASM volatile ("dmb 0xF":::"memory");
    10b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    10bc:	b672      	cpsid	i
		HI3893.TransmitCommandAndData(TXFIFO,TXBuffer);
    10be:	9c05      	ldr	r4, [sp, #20]
    10c0:	4622      	mov	r2, r4
    10c2:	210c      	movs	r1, #12
    10c4:	9802      	ldr	r0, [sp, #8]
    10c6:	4b1d      	ldr	r3, [pc, #116]	; (113c <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x470>)
    10c8:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    10ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    10ce:	b662      	cpsie	i
		printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
    10d0:	4621      	mov	r1, r4
    10d2:	4628      	mov	r0, r5
    10d4:	4b1a      	ldr	r3, [pc, #104]	; (1140 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x474>)
    10d6:	4798      	blx	r3
		BigCounter.Word32++;
    10d8:	9b04      	ldr	r3, [sp, #16]
    10da:	3301      	adds	r3, #1
    10dc:	4619      	mov	r1, r3
    10de:	9304      	str	r3, [sp, #16]
		TXBuffer[0] = BigCounter.PayLoad[1];
    10e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    10e4:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
		TXBuffer[1] = BigCounter.PayLoad[2];
    10e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
    10ec:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf
		TXBuffer[2] = BigCounter.PayLoad[3];
    10f0:	f3c1 6307 	ubfx	r3, r1, #24, #8
    10f4:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		TXBuffer[3] = BigCounter.PayLoad[3];              // copy the LSB to the label for testing purposes
    10f8:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
    10fc:	f109 0248 	add.w	r2, r9, #72	; 0x48
    1100:	f109 014c 	add.w	r1, r9, #76	; 0x4c
    1104:	4628      	mov	r0, r5
    1106:	4b0f      	ldr	r3, [pc, #60]	; (1144 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x478>)
    1108:	4798      	blx	r3
		delay_ms(K_10MS);                      // small delay so we can see the PL LEDs flash better
    110a:	200a      	movs	r0, #10
    110c:	4b0e      	ldr	r3, [pc, #56]	; (1148 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x47c>)
    110e:	4798      	blx	r3
	for(;;) {     // TEST Transmit loop
    1110:	e709      	b.n	f26 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x25a>
		delay_ms(K_1SEC);
    1112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1116:	4b0c      	ldr	r3, [pc, #48]	; (1148 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x47c>)
    1118:	4798      	blx	r3
    111a:	e7cd      	b.n	10b8 <_ZN15ARINC_Interface30TransmitReceiveWithLabels_ModeEh+0x3ec>
    111c:	00000599 	.word	0x00000599
    1120:	00005a08 	.word	0x00005a08
    1124:	00000389 	.word	0x00000389
    1128:	00005a1c 	.word	0x00005a1c
    112c:	00005a54 	.word	0x00005a54
    1130:	41008000 	.word	0x41008000
    1134:	00005a74 	.word	0x00005a74
    1138:	000005f9 	.word	0x000005f9
    113c:	00001359 	.word	0x00001359
    1140:	00000861 	.word	0x00000861
    1144:	00000a89 	.word	0x00000a89
    1148:	00001c71 	.word	0x00001c71
    114c:	00001c41 	.word	0x00001c41
    1150:	00001c4f 	.word	0x00001c4f

00001154 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1154:	e7fe      	b.n	1154 <Dummy_Handler>
	...

00001158 <Reset_Handler>:
{
    1158:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    115a:	4b17      	ldr	r3, [pc, #92]	; (11b8 <Reset_Handler+0x60>)
    115c:	4a17      	ldr	r2, [pc, #92]	; (11bc <Reset_Handler+0x64>)
    115e:	429a      	cmp	r2, r3
    1160:	d010      	beq.n	1184 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    1162:	4b17      	ldr	r3, [pc, #92]	; (11c0 <Reset_Handler+0x68>)
    1164:	4a14      	ldr	r2, [pc, #80]	; (11b8 <Reset_Handler+0x60>)
    1166:	429a      	cmp	r2, r3
    1168:	d20c      	bcs.n	1184 <Reset_Handler+0x2c>
    116a:	3b01      	subs	r3, #1
    116c:	1a9b      	subs	r3, r3, r2
    116e:	f023 0303 	bic.w	r3, r3, #3
    1172:	3304      	adds	r3, #4
    1174:	4413      	add	r3, r2
    1176:	4911      	ldr	r1, [pc, #68]	; (11bc <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
    1178:	f851 0b04 	ldr.w	r0, [r1], #4
    117c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    1180:	429a      	cmp	r2, r3
    1182:	d1f9      	bne.n	1178 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    1184:	4b0f      	ldr	r3, [pc, #60]	; (11c4 <Reset_Handler+0x6c>)
    1186:	4a10      	ldr	r2, [pc, #64]	; (11c8 <Reset_Handler+0x70>)
    1188:	429a      	cmp	r2, r3
    118a:	d20a      	bcs.n	11a2 <Reset_Handler+0x4a>
    118c:	3b01      	subs	r3, #1
    118e:	1a9b      	subs	r3, r3, r2
    1190:	f023 0303 	bic.w	r3, r3, #3
    1194:	3304      	adds	r3, #4
    1196:	4413      	add	r3, r2
                *pDest++ = 0;
    1198:	2100      	movs	r1, #0
    119a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    119e:	4293      	cmp	r3, r2
    11a0:	d1fb      	bne.n	119a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    11a2:	4a0a      	ldr	r2, [pc, #40]	; (11cc <Reset_Handler+0x74>)
    11a4:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <Reset_Handler+0x78>)
    11a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    11aa:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    11ac:	4b09      	ldr	r3, [pc, #36]	; (11d4 <Reset_Handler+0x7c>)
    11ae:	4798      	blx	r3
        main();
    11b0:	4b09      	ldr	r3, [pc, #36]	; (11d8 <Reset_Handler+0x80>)
    11b2:	4798      	blx	r3
    11b4:	e7fe      	b.n	11b4 <Reset_Handler+0x5c>
    11b6:	bf00      	nop
    11b8:	20000000 	.word	0x20000000
    11bc:	00005d68 	.word	0x00005d68
    11c0:	2000053c 	.word	0x2000053c
    11c4:	20000974 	.word	0x20000974
    11c8:	2000053c 	.word	0x2000053c
    11cc:	e000ed00 	.word	0xe000ed00
    11d0:	00000000 	.word	0x00000000
    11d4:	00004f41 	.word	0x00004f41
    11d8:	00001635 	.word	0x00001635

000011dc <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
    11dc:	b510      	push	{r4, lr}
    11de:	4604      	mov	r4, r0
    11e0:	4b01      	ldr	r3, [pc, #4]	; (11e8 <_ZN15Holt_3593_ClassC1Ev+0xc>)
    11e2:	4798      	blx	r3
{
} //Holt_3593_Class
    11e4:	4620      	mov	r0, r4
    11e6:	bd10      	pop	{r4, pc}
    11e8:	0000168d 	.word	0x0000168d

000011ec <_ZN15Holt_3593_Class4openEv>:
	 1,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
	 spi0.init();
	 
 } 
 void Holt_3593_Class::open(){
    11ec:	b508      	push	{r3, lr}
	 	spi0.enable();
    11ee:	4b04      	ldr	r3, [pc, #16]	; (1200 <_ZN15Holt_3593_Class4openEv+0x14>)
    11f0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    11f6:	4b03      	ldr	r3, [pc, #12]	; (1204 <_ZN15Holt_3593_Class4openEv+0x18>)
    11f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    11fc:	bd08      	pop	{r3, pc}
    11fe:	bf00      	nop
    1200:	000016ed 	.word	0x000016ed
    1204:	41008000 	.word	0x41008000

00001208 <_ZN15Holt_3593_Class5closeEv>:
		 SS_Low();
 }
  void Holt_3593_Class::close(){
    1208:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    120e:	4b03      	ldr	r3, [pc, #12]	; (121c <_ZN15Holt_3593_Class5closeEv+0x14>)
    1210:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	    SS_High();
	  spi0.disable();
    1214:	4b02      	ldr	r3, [pc, #8]	; (1220 <_ZN15Holt_3593_Class5closeEv+0x18>)
    1216:	4798      	blx	r3
    1218:	bd08      	pop	{r3, pc}
    121a:	bf00      	nop
    121c:	41008000 	.word	0x41008000
    1220:	0000175d 	.word	0x0000175d

00001224 <_ZN15Holt_3593_Class9Send_ByteEh>:
 	  
	close();
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
    1224:	b500      	push	{lr}
    1226:	b083      	sub	sp, #12
    1228:	ab02      	add	r3, sp, #8
    122a:	f803 1d01 	strb.w	r1, [r3, #-1]!
	spi0.write(&byte,1);
    122e:	2201      	movs	r2, #1
    1230:	4619      	mov	r1, r3
    1232:	4b03      	ldr	r3, [pc, #12]	; (1240 <_ZN15Holt_3593_Class9Send_ByteEh+0x1c>)
    1234:	4798      	blx	r3
	return byte;
}
    1236:	f89d 0007 	ldrb.w	r0, [sp, #7]
    123a:	b003      	add	sp, #12
    123c:	f85d fb04 	ldr.w	pc, [sp], #4
    1240:	00001725 	.word	0x00001725

00001244 <_ZN15Holt_3593_Class8Get_ByteEv>:
uint8_t Holt_3593_Class::Get_Byte(void)
{
    1244:	b500      	push	{lr}
    1246:	b083      	sub	sp, #12
	uint8_t byte;
	spi0.read(&byte,1);
    1248:	2201      	movs	r2, #1
    124a:	f10d 0107 	add.w	r1, sp, #7
    124e:	4b03      	ldr	r3, [pc, #12]	; (125c <_ZN15Holt_3593_Class8Get_ByteEv+0x18>)
    1250:	4798      	blx	r3
	
	return byte;
}	
    1252:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1256:	b003      	add	sp, #12
    1258:	f85d fb04 	ldr.w	pc, [sp], #4
    125c:	00001741 	.word	0x00001741

00001260 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	4604      	mov	r4, r0
    1264:	460e      	mov	r6, r1
    1266:	4615      	mov	r5, r2
  rxbyte = Get_Byte();         // clear SPI status register
    1268:	4b07      	ldr	r3, [pc, #28]	; (1288 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x28>)
    126a:	4798      	blx	r3
  Send_Byte(p)    ;   // write Data Register to begin transfer  
    126c:	4631      	mov	r1, r6
    126e:	4620      	mov	r0, r4
    1270:	4b06      	ldr	r3, [pc, #24]	; (128c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x2c>)
    1272:	4798      	blx	r3
  if (return_when_done) {  // optional wait for SPIF flag
    1274:	b125      	cbz	r5, 1280 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x20>
    while (!spi0.isSPIReady());     
    1276:	4d06      	ldr	r5, [pc, #24]	; (1290 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x30>)
    1278:	4620      	mov	r0, r4
    127a:	47a8      	blx	r5
    127c:	2800      	cmp	r0, #0
    127e:	d0fb      	beq.n	1278 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x18>
  return rxbyte = Get_Byte();
    1280:	4620      	mov	r0, r4
    1282:	4b01      	ldr	r3, [pc, #4]	; (1288 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x28>)
    1284:	4798      	blx	r3
}
    1286:	bd70      	pop	{r4, r5, r6, pc}
    1288:	00001245 	.word	0x00001245
    128c:	00001225 	.word	0x00001225
    1290:	0000176d 	.word	0x0000176d

00001294 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:
{
    1294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1298:	4606      	mov	r6, r0
  open();
    129a:	4b0c      	ldr	r3, [pc, #48]	; (12cc <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x38>)
    129c:	4798      	blx	r3
  dummy = txrx8bits_8(0x14,1);  
    129e:	2201      	movs	r2, #1
    12a0:	2114      	movs	r1, #20
    12a2:	4630      	mov	r0, r6
    12a4:	4b0a      	ldr	r3, [pc, #40]	; (12d0 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x3c>)
    12a6:	4798      	blx	r3
    12a8:	4d0a      	ldr	r5, [pc, #40]	; (12d4 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x40>)
    12aa:	f105 0420 	add.w	r4, r5, #32
    dummy = txrx8bits_8(LabelArray_1[i],1);       
    12ae:	f04f 0801 	mov.w	r8, #1
    12b2:	4f07      	ldr	r7, [pc, #28]	; (12d0 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x3c>)
    12b4:	4642      	mov	r2, r8
    12b6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    12ba:	4630      	mov	r0, r6
    12bc:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
    12be:	42ac      	cmp	r4, r5
    12c0:	d1f8      	bne.n	12b4 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
	close();
    12c2:	4630      	mov	r0, r6
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x44>)
    12c6:	4798      	blx	r3
    12c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12cc:	000011ed 	.word	0x000011ed
    12d0:	00001261 	.word	0x00001261
    12d4:	20000000 	.word	0x20000000
    12d8:	00001209 	.word	0x00001209

000012dc <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
    12dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12e0:	4606      	mov	r6, r0
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
    12e2:	4b0c      	ldr	r3, [pc, #48]	; (1314 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x38>)
    12e4:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
    12e6:	2201      	movs	r2, #1
    12e8:	2128      	movs	r1, #40	; 0x28
    12ea:	4630      	mov	r0, r6
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x3c>)
    12ee:	4798      	blx	r3
    12f0:	4d0a      	ldr	r5, [pc, #40]	; (131c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
    12f2:	f105 0420 	add.w	r4, r5, #32
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
    12f6:	f04f 0801 	mov.w	r8, #1
    12fa:	4f07      	ldr	r7, [pc, #28]	; (1318 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x3c>)
    12fc:	4642      	mov	r2, r8
    12fe:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    1302:	4630      	mov	r0, r6
    1304:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
    1306:	42ac      	cmp	r4, r5
    1308:	d1f8      	bne.n	12fc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
    130a:	4630      	mov	r0, r6
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x44>)
    130e:	4798      	blx	r3
    1310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1314:	000011ed 	.word	0x000011ed
    1318:	00001261 	.word	0x00001261
    131c:	20000020 	.word	0x20000020
    1320:	00001209 	.word	0x00001209

00001324 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
    1324:	b570      	push	{r4, r5, r6, lr}
    1326:	4604      	mov	r4, r0
    1328:	460e      	mov	r6, r1
    132a:	4615      	mov	r5, r2
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
    rxbyte = Get_Byte();         // clear SPI status register  
    132c:	4b07      	ldr	r3, [pc, #28]	; (134c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x28>)
    132e:	4798      	blx	r3
	Send_Byte(p);        // write Data Register to begin transfer    
    1330:	4631      	mov	r1, r6
    1332:	4620      	mov	r0, r4
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x2c>)
    1336:	4798      	blx	r3
	if (return_when_done) {  // optional wait for SPIF flag
    1338:	b125      	cbz	r5, 1344 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x20>
		while (!spi0.isSPIReady());      
    133a:	4d06      	ldr	r5, [pc, #24]	; (1354 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x30>)
    133c:	4620      	mov	r0, r4
    133e:	47a8      	blx	r5
    1340:	2800      	cmp	r0, #0
    1342:	d0fb      	beq.n	133c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x18>
    }

  return rxbyte = Get_Byte();  // get received data byte from Data Register
    1344:	4620      	mov	r0, r4
    1346:	4b01      	ldr	r3, [pc, #4]	; (134c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x28>)
    1348:	4798      	blx	r3
  
 }
    134a:	bd70      	pop	{r4, r5, r6, pc}
    134c:	00001245 	.word	0x00001245
    1350:	00001225 	.word	0x00001225
    1354:	0000176d 	.word	0x0000176d

00001358 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
    1358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    135c:	4605      	mov	r5, r0
    135e:	460c      	mov	r4, r1
    1360:	4616      	mov	r6, r2
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
    1362:	4b16      	ldr	r3, [pc, #88]	; (13bc <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x64>)
    1364:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   if(cmd==W_PL1Match || cmd==W_PL2Match)          // if writing PL Match registers send only 3 bytes
    1366:	2c18      	cmp	r4, #24
    1368:	d023      	beq.n	13b2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x5a>
    136a:	2c2c      	cmp	r4, #44	; 0x2c
    136c:	d021      	beq.n	13b2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x5a>
   transmitCount=4;                                // Standard messages are 4 bytes
    136e:	2204      	movs	r2, #4
    1370:	4b13      	ldr	r3, [pc, #76]	; (13c0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x68>)
    1372:	701a      	strb	r2, [r3, #0]
      transmitCount--;
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
    1374:	2201      	movs	r2, #1
    1376:	4621      	mov	r1, r4
    1378:	4628      	mov	r0, r5
    137a:	4b12      	ldr	r3, [pc, #72]	; (13c4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x6c>)
    137c:	4798      	blx	r3

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
    137e:	4b10      	ldr	r3, [pc, #64]	; (13c0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x68>)
    1380:	2200      	movs	r2, #0
    1382:	705a      	strb	r2, [r3, #1]
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	b17b      	cbz	r3, 13a8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x50>
    1388:	4613      	mov	r3, r2
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
    138a:	f04f 0801 	mov.w	r8, #1
    138e:	4f0d      	ldr	r7, [pc, #52]	; (13c4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x6c>)
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
    1390:	4c0b      	ldr	r4, [pc, #44]	; (13c0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x68>)
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
    1392:	4642      	mov	r2, r8
    1394:	5cf1      	ldrb	r1, [r6, r3]
    1396:	4628      	mov	r0, r5
    1398:	47b8      	blx	r7
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
    139a:	7863      	ldrb	r3, [r4, #1]
    139c:	3301      	adds	r3, #1
    139e:	b2db      	uxtb	r3, r3
    13a0:	7063      	strb	r3, [r4, #1]
    13a2:	7822      	ldrb	r2, [r4, #0]
    13a4:	4293      	cmp	r3, r2
    13a6:	dbf4      	blt.n	1392 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x3a>
      }   
 close();
    13a8:	4628      	mov	r0, r5
    13aa:	4b07      	ldr	r3, [pc, #28]	; (13c8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x70>)
    13ac:	4798      	blx	r3
    13ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      transmitCount--;
    13b2:	2203      	movs	r2, #3
    13b4:	4b02      	ldr	r3, [pc, #8]	; (13c0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x68>)
    13b6:	701a      	strb	r2, [r3, #0]
    13b8:	e7dc      	b.n	1374 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x1c>
    13ba:	bf00      	nop
    13bc:	000011ed 	.word	0x000011ed
    13c0:	200005a8 	.word	0x200005a8
    13c4:	00001325 	.word	0x00001325
    13c8:	00001209 	.word	0x00001209

000013cc <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
    13cc:	b538      	push	{r3, r4, r5, lr}
    13ce:	4604      	mov	r4, r0
    13d0:	460d      	mov	r5, r1
  static unsigned char dummy;
 	
  open();
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <_ZN15Holt_3593_Class9W_CommandEc+0x30>)
    13d4:	4798      	blx	r3
  dummy = Get_Byte();               // clear SPI status register    
    13d6:	4620      	mov	r0, r4
    13d8:	4b09      	ldr	r3, [pc, #36]	; (1400 <_ZN15Holt_3593_Class9W_CommandEc+0x34>)
    13da:	4798      	blx	r3
  uint8_t p(cmd);  
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
    13dc:	4629      	mov	r1, r5
    13de:	4620      	mov	r0, r4
    13e0:	4b08      	ldr	r3, [pc, #32]	; (1404 <_ZN15Holt_3593_Class9W_CommandEc+0x38>)
    13e2:	4798      	blx	r3
  while (!spi0.isSPIReady()) {;}      // Wait for data to come back in.
    13e4:	4d08      	ldr	r5, [pc, #32]	; (1408 <_ZN15Holt_3593_Class9W_CommandEc+0x3c>)
    13e6:	4620      	mov	r0, r4
    13e8:	47a8      	blx	r5
    13ea:	2800      	cmp	r0, #0
    13ec:	d0fb      	beq.n	13e6 <_ZN15Holt_3593_Class9W_CommandEc+0x1a>
  dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
    13ee:	4620      	mov	r0, r4
    13f0:	4b03      	ldr	r3, [pc, #12]	; (1400 <_ZN15Holt_3593_Class9W_CommandEc+0x34>)
    13f2:	4798      	blx	r3
  close();
    13f4:	4620      	mov	r0, r4
    13f6:	4b05      	ldr	r3, [pc, #20]	; (140c <_ZN15Holt_3593_Class9W_CommandEc+0x40>)
    13f8:	4798      	blx	r3
    13fa:	bd38      	pop	{r3, r4, r5, pc}
    13fc:	000011ed 	.word	0x000011ed
    1400:	00001245 	.word	0x00001245
    1404:	00001225 	.word	0x00001225
    1408:	0000176d 	.word	0x0000176d
    140c:	00001209 	.word	0x00001209

00001410 <_ZN15Holt_3593_Class14W_CommandValueEhh>:
}

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
    1410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1412:	4606      	mov	r6, r0
    1414:	460c      	mov	r4, r1
    1416:	4617      	mov	r7, r2
  uint8_t dummy; 
  	
  open();                             // assert the SPI0 /SS strobe
    1418:	4b10      	ldr	r3, [pc, #64]	; (145c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x4c>)
    141a:	4798      	blx	r3
  dummy = Get_Byte();                           // clear SPI status register    
    141c:	4630      	mov	r0, r6
    141e:	4b10      	ldr	r3, [pc, #64]	; (1460 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x50>)
    1420:	4798      	blx	r3
  Send_Byte(cmd);                             // SPI  command 
    1422:	4621      	mov	r1, r4
    1424:	4630      	mov	r0, r6
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x54>)
    1428:	4798      	blx	r3
  while (!spi0.isSPIReady());    
    142a:	4634      	mov	r4, r6
    142c:	4d0e      	ldr	r5, [pc, #56]	; (1468 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x58>)
    142e:	4620      	mov	r0, r4
    1430:	47a8      	blx	r5
    1432:	2800      	cmp	r0, #0
    1434:	d0fb      	beq.n	142e <_ZN15Holt_3593_Class14W_CommandValueEhh+0x1e>
  dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
    1436:	4630      	mov	r0, r6
    1438:	4b09      	ldr	r3, [pc, #36]	; (1460 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x50>)
    143a:	4798      	blx	r3
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
    143c:	4639      	mov	r1, r7
    143e:	4630      	mov	r0, r6
    1440:	4b08      	ldr	r3, [pc, #32]	; (1464 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x54>)
    1442:	4798      	blx	r3
  while (!spi0.isSPIReady());    
    1444:	4d08      	ldr	r5, [pc, #32]	; (1468 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x58>)
    1446:	4620      	mov	r0, r4
    1448:	47a8      	blx	r5
    144a:	2800      	cmp	r0, #0
    144c:	d0fb      	beq.n	1446 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
  dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
    144e:	4630      	mov	r0, r6
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x50>)
    1452:	4798      	blx	r3

  close();
    1454:	4630      	mov	r0, r6
    1456:	4b05      	ldr	r3, [pc, #20]	; (146c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x5c>)
    1458:	4798      	blx	r3
    145a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    145c:	000011ed 	.word	0x000011ed
    1460:	00001245 	.word	0x00001245
    1464:	00001225 	.word	0x00001225
    1468:	0000176d 	.word	0x0000176d
    146c:	00001209 	.word	0x00001209

00001470 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
    1470:	b538      	push	{r3, r4, r5, lr}
    1472:	4604      	mov	r4, r0
    1474:	460d      	mov	r5, r1
  unsigned char R_Reg;
	
  open();
    1476:	4b08      	ldr	r3, [pc, #32]	; (1498 <_ZN15Holt_3593_Class10R_RegisterEc+0x28>)
    1478:	4798      	blx	r3
  R_Reg  = txrx8bits(Reg,1);                   // send op code (ignore returned data byte)
    147a:	2201      	movs	r2, #1
    147c:	4629      	mov	r1, r5
    147e:	4620      	mov	r0, r4
    1480:	4d06      	ldr	r5, [pc, #24]	; (149c <_ZN15Holt_3593_Class10R_RegisterEc+0x2c>)
    1482:	47a8      	blx	r5
  R_Reg  = txrx8bits(0x00,1);                   // send dummy data / receive Status Reg byte           
    1484:	2201      	movs	r2, #1
    1486:	2100      	movs	r1, #0
    1488:	4620      	mov	r0, r4
    148a:	47a8      	blx	r5
    148c:	4605      	mov	r5, r0
  close();
    148e:	4620      	mov	r0, r4
    1490:	4b03      	ldr	r3, [pc, #12]	; (14a0 <_ZN15Holt_3593_Class10R_RegisterEc+0x30>)
    1492:	4798      	blx	r3
  return R_Reg;
}
    1494:	4628      	mov	r0, r5
    1496:	bd38      	pop	{r3, r4, r5, pc}
    1498:	000011ed 	.word	0x000011ed
    149c:	00001325 	.word	0x00001325
    14a0:	00001209 	.word	0x00001209

000014a4 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
   {
    14a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14a6:	4604      	mov	r4, r0
    14a8:	460d      	mov	r5, r1
    14aa:	4617      	mov	r7, r2
    14ac:	461e      	mov	r6, r3
   W_Command(RESETCMD);                // Reset the HI-3593         
    14ae:	2104      	movs	r1, #4
    14b0:	4b0c      	ldr	r3, [pc, #48]	; (14e4 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x40>)
    14b2:	4798      	blx	r3
   W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor      
    14b4:	462a      	mov	r2, r5
    14b6:	2138      	movs	r1, #56	; 0x38
    14b8:	4620      	mov	r0, r4
    14ba:	4d0b      	ldr	r5, [pc, #44]	; (14e8 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x44>)
    14bc:	47a8      	blx	r5
   cmd |= tflip << 6;                  // TFLIP on
    14be:	f89d 2018 	ldrb.w	r2, [sp, #24]
    14c2:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
    14c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
    14ca:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
    14ce:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
   W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
    14d2:	b2d2      	uxtb	r2, r2
    14d4:	2108      	movs	r1, #8
    14d6:	4620      	mov	r0, r4
    14d8:	47a8      	blx	r5
   return R_Register (R_TSR);
    14da:	2180      	movs	r1, #128	; 0x80
    14dc:	4620      	mov	r0, r4
    14de:	4b03      	ldr	r3, [pc, #12]	; (14ec <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x48>)
    14e0:	4798      	blx	r3
   }
    14e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14e4:	000013cd 	.word	0x000013cd
    14e8:	00001411 	.word	0x00001411
    14ec:	00001471 	.word	0x00001471

000014f0 <_ZN15Holt_3593_Class4InitEv>:
 void	Holt_3593_Class::Init(void){
    14f0:	b530      	push	{r4, r5, lr}
    14f2:	b083      	sub	sp, #12
    14f4:	4604      	mov	r4, r0
	 TFLIP );
    14f6:	2201      	movs	r2, #1
    14f8:	9201      	str	r2, [sp, #4]
    14fa:	9200      	str	r2, [sp, #0]
    14fc:	2300      	movs	r3, #0
    14fe:	2104      	movs	r1, #4
    1500:	4d03      	ldr	r5, [pc, #12]	; (1510 <_ZN15Holt_3593_Class4InitEv+0x20>)
    1502:	47a8      	blx	r5
	 spi0.init();
    1504:	4620      	mov	r0, r4
    1506:	4b03      	ldr	r3, [pc, #12]	; (1514 <_ZN15Holt_3593_Class4InitEv+0x24>)
    1508:	4798      	blx	r3
 } 
    150a:	b003      	add	sp, #12
    150c:	bd30      	pop	{r4, r5, pc}
    150e:	bf00      	nop
    1510:	000014a5 	.word	0x000014a5
    1514:	000016b5 	.word	0x000016b5

00001518 <_ZN15Holt_3593_Class5CS_HLEv>:
// ------------------------------------------------------
// Set the SPI nCS high then low
// ------------------------------------------------------
void Holt_3593_Class::CS_HL (void) {
    1518:	b510      	push	{r4, lr}
    151a:	4604      	mov	r4, r0
	close();
    151c:	4b02      	ldr	r3, [pc, #8]	; (1528 <_ZN15Holt_3593_Class5CS_HLEv+0x10>)
    151e:	4798      	blx	r3
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
    1520:	4620      	mov	r0, r4
    1522:	4b02      	ldr	r3, [pc, #8]	; (152c <_ZN15Holt_3593_Class5CS_HLEv+0x14>)
    1524:	4798      	blx	r3
    1526:	bd10      	pop	{r4, pc}
    1528:	00001209 	.word	0x00001209
    152c:	000011ed 	.word	0x000011ed

00001530 <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
{
    1530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1534:	4605      	mov	r5, r0
    1536:	460c      	mov	r4, r1
    1538:	4690      	mov	r8, r2
    153a:	461f      	mov	r7, r3
   CS_HL();  
    153c:	4b14      	ldr	r3, [pc, #80]	; (1590 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>)
    153e:	4798      	blx	r3
   dummy = Get_Byte();                  // clear SPI status register    
    1540:	4628      	mov	r0, r5
    1542:	4b14      	ldr	r3, [pc, #80]	; (1594 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x64>)
    1544:	4798      	blx	r3
   Send_Byte(ReadCommand);
    1546:	4621      	mov	r1, r4
    1548:	4628      	mov	r0, r5
    154a:	4b13      	ldr	r3, [pc, #76]	; (1598 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x68>)
    154c:	4798      	blx	r3
   while (!spi0.isSPIReady());            // wait for SPIF flag assertion    
    154e:	4c13      	ldr	r4, [pc, #76]	; (159c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x6c>)
    1550:	4628      	mov	r0, r5
    1552:	47a0      	blx	r4
    1554:	2800      	cmp	r0, #0
    1556:	d0fb      	beq.n	1550 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x20>
   dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
    1558:	4628      	mov	r0, r5
    155a:	4b0e      	ldr	r3, [pc, #56]	; (1594 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x64>)
    155c:	4798      	blx	r3
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    155e:	4646      	mov	r6, r8
    1560:	f1b8 0f00 	cmp.w	r8, #0
    1564:	d00e      	beq.n	1584 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x54>
    1566:	2400      	movs	r4, #0
      dummy = txrx8bits(0x00,1); 
    1568:	f04f 0a01 	mov.w	sl, #1
    156c:	46a1      	mov	r9, r4
    156e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 15a4 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>
    1572:	4652      	mov	r2, sl
    1574:	4649      	mov	r1, r9
    1576:	4628      	mov	r0, r5
    1578:	47c0      	blx	r8
      passedArray[ByteCount] = dummy; 
    157a:	5538      	strb	r0, [r7, r4]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    157c:	3401      	adds	r4, #1
    157e:	b2e4      	uxtb	r4, r4
    1580:	42b4      	cmp	r4, r6
    1582:	dbf6      	blt.n	1572 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x42>
  close();
    1584:	4628      	mov	r0, r5
    1586:	4b06      	ldr	r3, [pc, #24]	; (15a0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
    1588:	4798      	blx	r3
    158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    158e:	bf00      	nop
    1590:	00001519 	.word	0x00001519
    1594:	00001245 	.word	0x00001245
    1598:	00001225 	.word	0x00001225
    159c:	0000176d 	.word	0x0000176d
    15a0:	00001209 	.word	0x00001209
    15a4:	00001325 	.word	0x00001325

000015a8 <_ZN15Holt_3593_Class9ArincReadEhPh>:
{
    15a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ac:	4605      	mov	r5, r0
    15ae:	460c      	mov	r4, r1
    15b0:	4617      	mov	r7, r2
   if(source==0xA0 || source == 0xC0)  // is it a normal Word?
    15b2:	29a0      	cmp	r1, #160	; 0xa0
    15b4:	d02f      	beq.n	1616 <_ZN15Holt_3593_Class9ArincReadEhPh+0x6e>
       count++;                        // then it has 4 bytes.   
    15b6:	29c0      	cmp	r1, #192	; 0xc0
    15b8:	bf14      	ite	ne
    15ba:	f04f 0803 	movne.w	r8, #3
    15be:	f04f 0804 	moveq.w	r8, #4
   CS_HL();  
    15c2:	4628      	mov	r0, r5
    15c4:	4b15      	ldr	r3, [pc, #84]	; (161c <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
    15c6:	4798      	blx	r3
   dummy = Get_Byte();                   // clear SPI status register    
    15c8:	4628      	mov	r0, r5
    15ca:	4b15      	ldr	r3, [pc, #84]	; (1620 <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
    15cc:	4798      	blx	r3
   Send_Byte(source) ;                  // source command to read FIFO data
    15ce:	4621      	mov	r1, r4
    15d0:	4628      	mov	r0, r5
    15d2:	4b14      	ldr	r3, [pc, #80]	; (1624 <_ZN15Holt_3593_Class9ArincReadEhPh+0x7c>)
    15d4:	4798      	blx	r3
   while (!spi0.isSPIReady());            // wait for SPIF flag assertion    
    15d6:	4c14      	ldr	r4, [pc, #80]	; (1628 <_ZN15Holt_3593_Class9ArincReadEhPh+0x80>)
    15d8:	4628      	mov	r0, r5
    15da:	47a0      	blx	r4
    15dc:	2800      	cmp	r0, #0
    15de:	d0fb      	beq.n	15d8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x30>
   dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
    15e0:	4628      	mov	r0, r5
    15e2:	4b0f      	ldr	r3, [pc, #60]	; (1620 <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
    15e4:	4798      	blx	r3
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    15e6:	4646      	mov	r6, r8
    15e8:	f1b8 0f00 	cmp.w	r8, #0
    15ec:	d00e      	beq.n	160c <_ZN15Holt_3593_Class9ArincReadEhPh+0x64>
    15ee:	2400      	movs	r4, #0
      dummy = txrx8bits(0x00,1); 
    15f0:	f04f 0a01 	mov.w	sl, #1
    15f4:	46a1      	mov	r9, r4
    15f6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1630 <_ZN15Holt_3593_Class9ArincReadEhPh+0x88>
    15fa:	4652      	mov	r2, sl
    15fc:	4649      	mov	r1, r9
    15fe:	4628      	mov	r0, r5
    1600:	47c0      	blx	r8
      passedArray[ByteCount] = dummy; 
    1602:	5538      	strb	r0, [r7, r4]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    1604:	3401      	adds	r4, #1
    1606:	b2e4      	uxtb	r4, r4
    1608:	42b4      	cmp	r4, r6
    160a:	dbf6      	blt.n	15fa <_ZN15Holt_3593_Class9ArincReadEhPh+0x52>
  close();
    160c:	4628      	mov	r0, r5
    160e:	4b07      	ldr	r3, [pc, #28]	; (162c <_ZN15Holt_3593_Class9ArincReadEhPh+0x84>)
    1610:	4798      	blx	r3
    1612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       count++;                        // then it has 4 bytes.   
    1616:	f04f 0804 	mov.w	r8, #4
    161a:	e7d2      	b.n	15c2 <_ZN15Holt_3593_Class9ArincReadEhPh+0x1a>
    161c:	00001519 	.word	0x00001519
    1620:	00001245 	.word	0x00001245
    1624:	00001225 	.word	0x00001225
    1628:	0000176d 	.word	0x0000176d
    162c:	00001209 	.word	0x00001209
    1630:	00001325 	.word	0x00001325

00001634 <main>:
#include <atmel_start.h>

#include "ARINC_Interface.h"

int main(void)
{
    1634:	b500      	push	{lr}
    1636:	b0fd      	sub	sp, #500	; 0x1f4
		atmel_start_init();
    1638:	4b09      	ldr	r3, [pc, #36]	; (1660 <main+0x2c>)
    163a:	4798      	blx	r3
		ARINC_Interface		ECSBox;
    163c:	a801      	add	r0, sp, #4
    163e:	4b09      	ldr	r3, [pc, #36]	; (1664 <main+0x30>)
    1640:	4798      	blx	r3
		ECSBox.Init();
    1642:	a801      	add	r0, sp, #4
    1644:	4b08      	ldr	r3, [pc, #32]	; (1668 <main+0x34>)
    1646:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		ECSBox.SayHello();
    1648:	4e08      	ldr	r6, [pc, #32]	; (166c <main+0x38>)
		delay_ms(1000);
    164a:	4d09      	ldr	r5, [pc, #36]	; (1670 <main+0x3c>)
		ECSBox.TransmitReceiveWithLabels_Mode(SELFTEST_ON);
    164c:	4c09      	ldr	r4, [pc, #36]	; (1674 <main+0x40>)
		ECSBox.SayHello();
    164e:	a801      	add	r0, sp, #4
    1650:	47b0      	blx	r6
		delay_ms(1000);
    1652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1656:	47a8      	blx	r5
		ECSBox.TransmitReceiveWithLabels_Mode(SELFTEST_ON);
    1658:	2101      	movs	r1, #1
    165a:	a801      	add	r0, sp, #4
    165c:	47a0      	blx	r4
    165e:	e7f6      	b.n	164e <main+0x1a>
    1660:	000017e9 	.word	0x000017e9
    1664:	00000309 	.word	0x00000309
    1668:	00000325 	.word	0x00000325
    166c:	0000035d 	.word	0x0000035d
    1670:	00001c71 	.word	0x00001c71
    1674:	00000ccd 	.word	0x00000ccd

00001678 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor>:
static void complete_cb_SPI_0(const struct spi_m_async_descriptor *const io_descr)
{
	//SPI_Asyn_Class spiHandler;
	//ptrSPIClass=pSPIClass;
	//ptrSPIClass->ready=true;
	asm("nop");
    1678:	bf00      	nop
	ptrSPIClass->setSPIReady();
    167a:	4b03      	ldr	r3, [pc, #12]	; (1688 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor+0x10>)
    167c:	681b      	ldr	r3, [r3, #0]
	spi_m_async_disable(&SPI0);
	
}
void  SPI_Asyn_Class::setSPIReady(void)
{
	ready=true;
    167e:	2201      	movs	r2, #1
    1680:	701a      	strb	r2, [r3, #0]
	ready=true;
    1682:	701a      	strb	r2, [r3, #0]
	asm("nop");
    1684:	bf00      	nop
    1686:	4770      	bx	lr
    1688:	200005ac 	.word	0x200005ac

0000168c <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class()
    168c:	b510      	push	{r4, lr}
    168e:	4604      	mov	r4, r0
	portNumber=0;
    1690:	2300      	movs	r3, #0
    1692:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	SPI0=SPI_0;
    1696:	2248      	movs	r2, #72	; 0x48
    1698:	4903      	ldr	r1, [pc, #12]	; (16a8 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
    169a:	3008      	adds	r0, #8
    169c:	4b03      	ldr	r3, [pc, #12]	; (16ac <_ZN14SPI_Asyn_ClassC1Ev+0x20>)
    169e:	4798      	blx	r3
	ptrSPIClass=this;
    16a0:	4b03      	ldr	r3, [pc, #12]	; (16b0 <_ZN14SPI_Asyn_ClassC1Ev+0x24>)
    16a2:	601c      	str	r4, [r3, #0]
} //SPI_Asyn_Class
    16a4:	4620      	mov	r0, r4
    16a6:	bd10      	pop	{r4, pc}
    16a8:	200008ec 	.word	0x200008ec
    16ac:	00004f91 	.word	0x00004f91
    16b0:	200005ac 	.word	0x200005ac

000016b4 <_ZN14SPI_Asyn_Class4initEv>:
void SPI_Asyn_Class::init(){
    16b4:	b510      	push	{r4, lr}
    16b6:	4604      	mov	r4, r0
	SPI_0_CLOCK_init();
    16b8:	4b07      	ldr	r3, [pc, #28]	; (16d8 <_ZN14SPI_Asyn_Class4initEv+0x24>)
    16ba:	4798      	blx	r3
	spi_m_async_init(&SPI0, SERCOM0);
    16bc:	4907      	ldr	r1, [pc, #28]	; (16dc <_ZN14SPI_Asyn_Class4initEv+0x28>)
    16be:	f104 0008 	add.w	r0, r4, #8
    16c2:	4b07      	ldr	r3, [pc, #28]	; (16e0 <_ZN14SPI_Asyn_Class4initEv+0x2c>)
    16c4:	4798      	blx	r3
	SPI_0_PORT_init();
    16c6:	4b07      	ldr	r3, [pc, #28]	; (16e4 <_ZN14SPI_Asyn_Class4initEv+0x30>)
    16c8:	4798      	blx	r3
	pSPIClass=this;
    16ca:	65a4      	str	r4, [r4, #88]	; 0x58
	ptrSPIClass=pSPIClass;
    16cc:	4b06      	ldr	r3, [pc, #24]	; (16e8 <_ZN14SPI_Asyn_Class4initEv+0x34>)
    16ce:	601c      	str	r4, [r3, #0]
	ready=true;
    16d0:	2301      	movs	r3, #1
    16d2:	7023      	strb	r3, [r4, #0]
    16d4:	bd10      	pop	{r4, pc}
    16d6:	bf00      	nop
    16d8:	00001915 	.word	0x00001915
    16dc:	40003000 	.word	0x40003000
    16e0:	00001ebd 	.word	0x00001ebd
    16e4:	00001869 	.word	0x00001869
    16e8:	200005ac 	.word	0x200005ac

000016ec <_ZN14SPI_Asyn_Class6enableEv>:
int32_t SPI_Asyn_Class::enable(){
    16ec:	b538      	push	{r3, r4, r5, lr}
    16ee:	4604      	mov	r4, r0
	spi_m_async_get_io_descriptor(&SPI0, &spio);
    16f0:	f100 0508 	add.w	r5, r0, #8
    16f4:	1d01      	adds	r1, r0, #4
    16f6:	4628      	mov	r0, r5
    16f8:	4b06      	ldr	r3, [pc, #24]	; (1714 <_ZN14SPI_Asyn_Class6enableEv+0x28>)
    16fa:	4798      	blx	r3
	spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI_0));
    16fc:	4a06      	ldr	r2, [pc, #24]	; (1718 <_ZN14SPI_Asyn_Class6enableEv+0x2c>)
    16fe:	2100      	movs	r1, #0
    1700:	4628      	mov	r0, r5
    1702:	4b06      	ldr	r3, [pc, #24]	; (171c <_ZN14SPI_Asyn_Class6enableEv+0x30>)
    1704:	4798      	blx	r3
	spi_m_async_enable(&SPI0);
    1706:	4628      	mov	r0, r5
    1708:	4b05      	ldr	r3, [pc, #20]	; (1720 <_ZN14SPI_Asyn_Class6enableEv+0x34>)
    170a:	4798      	blx	r3
	ready=true;
    170c:	2301      	movs	r3, #1
    170e:	7023      	strb	r3, [r4, #0]
}
    1710:	2000      	movs	r0, #0
    1712:	bd38      	pop	{r3, r4, r5, pc}
    1714:	00001fed 	.word	0x00001fed
    1718:	00001679 	.word	0x00001679
    171c:	00001fa9 	.word	0x00001fa9
    1720:	00001f41 	.word	0x00001f41

00001724 <_ZN14SPI_Asyn_Class5writeEPKhl>:
int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
    1724:	b508      	push	{r3, lr}
		while(!ready){
    1726:	7803      	ldrb	r3, [r0, #0]
    1728:	2b00      	cmp	r3, #0
    172a:	d0fc      	beq.n	1726 <_ZN14SPI_Asyn_Class5writeEPKhl+0x2>
	ready=false;
    172c:	2300      	movs	r3, #0
    172e:	7003      	strb	r3, [r0, #0]
	w= io_write(spio,p,(uint16_t)n);
    1730:	b292      	uxth	r2, r2
    1732:	6840      	ldr	r0, [r0, #4]
    1734:	4b01      	ldr	r3, [pc, #4]	; (173c <_ZN14SPI_Asyn_Class5writeEPKhl+0x18>)
    1736:	4798      	blx	r3
}
    1738:	bd08      	pop	{r3, pc}
    173a:	bf00      	nop
    173c:	00001c9d 	.word	0x00001c9d

00001740 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
    1740:	b508      	push	{r3, lr}
		while(!ready){
    1742:	7803      	ldrb	r3, [r0, #0]
    1744:	2b00      	cmp	r3, #0
    1746:	d0fc      	beq.n	1742 <_ZN14SPI_Asyn_Class4readEPhl+0x2>
	ready=false;
    1748:	2300      	movs	r3, #0
    174a:	7003      	strb	r3, [r0, #0]
	r=io_read(spio,p,(uint16_t)n);
    174c:	b292      	uxth	r2, r2
    174e:	6840      	ldr	r0, [r0, #4]
    1750:	4b01      	ldr	r3, [pc, #4]	; (1758 <_ZN14SPI_Asyn_Class4readEPhl+0x18>)
    1752:	4798      	blx	r3
}
    1754:	bd08      	pop	{r3, pc}
    1756:	bf00      	nop
    1758:	00001ccd 	.word	0x00001ccd

0000175c <_ZN14SPI_Asyn_Class7disableEv>:
void SPI_Asyn_Class::disable(void){
    175c:	b508      	push	{r3, lr}
	spi_m_async_disable(&SPI0);
    175e:	3008      	adds	r0, #8
    1760:	4b01      	ldr	r3, [pc, #4]	; (1768 <_ZN14SPI_Asyn_Class7disableEv+0xc>)
    1762:	4798      	blx	r3
    1764:	bd08      	pop	{r3, pc}
    1766:	bf00      	nop
    1768:	00001f69 	.word	0x00001f69

0000176c <_ZN14SPI_Asyn_Class10isSPIReadyEv>:
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Asyn_Class::isSPIReady(void){
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready==true)
    176c:	7800      	ldrb	r0, [r0, #0]
	{
		return false;
	}
	return ready;
	
}
    176e:	4770      	bx	lr

00001770 <_ZN13USB_CDC_ClassC1Ev>:
{
	//portNumber=0;
	//usb_desc=&single_desc;
	//USBbuffer=usbd_cdc_buffer;

} //USB_CDC_Class
    1770:	4770      	bx	lr
	...

00001774 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
    1774:	b508      	push	{r3, lr}
	usbdc_init(ctrl_buffer);
    1776:	3014      	adds	r0, #20
    1778:	4b05      	ldr	r3, [pc, #20]	; (1790 <_ZN13USB_CDC_Class4initEv+0x1c>)
    177a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    177c:	4b05      	ldr	r3, [pc, #20]	; (1794 <_ZN13USB_CDC_Class4initEv+0x20>)
    177e:	4798      	blx	r3

	usbdc_start(single_desc);
    1780:	4805      	ldr	r0, [pc, #20]	; (1798 <_ZN13USB_CDC_Class4initEv+0x24>)
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <_ZN13USB_CDC_Class4initEv+0x28>)
    1784:	4798      	blx	r3
	usbdc_attach();
    1786:	4b06      	ldr	r3, [pc, #24]	; (17a0 <_ZN13USB_CDC_Class4initEv+0x2c>)
    1788:	4798      	blx	r3


bool USB_CDC_Class::isUSBEnabled(void){
	

		return cdcdf_acm_is_enabled();
    178a:	4b06      	ldr	r3, [pc, #24]	; (17a4 <_ZN13USB_CDC_Class4initEv+0x30>)
    178c:	4798      	blx	r3
    178e:	bd08      	pop	{r3, pc}
    1790:	00004d05 	.word	0x00004d05
    1794:	00004659 	.word	0x00004659
    1798:	20000048 	.word	0x20000048
    179c:	00004d75 	.word	0x00004d75
    17a0:	00004da9 	.word	0x00004da9
    17a4:	000046ed 	.word	0x000046ed

000017a8 <_ZN13USB_CDC_Class5writeEPhm>:
int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
    17a8:	b570      	push	{r4, r5, r6, lr}
    17aa:	460d      	mov	r5, r1
    17ac:	4616      	mov	r6, r2
		return cdcdf_acm_is_enabled();
    17ae:	4c04      	ldr	r4, [pc, #16]	; (17c0 <_ZN13USB_CDC_Class5writeEPhm+0x18>)
    17b0:	47a0      	blx	r4
	while(!isUSBEnabled());
    17b2:	2800      	cmp	r0, #0
    17b4:	d0fc      	beq.n	17b0 <_ZN13USB_CDC_Class5writeEPhm+0x8>
	w=cdcdf_acm_write(p,n);
    17b6:	4631      	mov	r1, r6
    17b8:	4628      	mov	r0, r5
    17ba:	4b02      	ldr	r3, [pc, #8]	; (17c4 <_ZN13USB_CDC_Class5writeEPhm+0x1c>)
    17bc:	4798      	blx	r3
}
    17be:	bd70      	pop	{r4, r5, r6, pc}
    17c0:	000046ed 	.word	0x000046ed
    17c4:	000046c5 	.word	0x000046c5

000017c8 <_ZN13USB_CDC_Class4readEPhm>:
int32_t  USB_CDC_Class::read(uint8_t * p, uint32_t n){
    17c8:	b570      	push	{r4, r5, r6, lr}
    17ca:	460d      	mov	r5, r1
    17cc:	4616      	mov	r6, r2
		return cdcdf_acm_is_enabled();
    17ce:	4c04      	ldr	r4, [pc, #16]	; (17e0 <_ZN13USB_CDC_Class4readEPhm+0x18>)
    17d0:	47a0      	blx	r4
	while(!isUSBEnabled());
    17d2:	2800      	cmp	r0, #0
    17d4:	d0fc      	beq.n	17d0 <_ZN13USB_CDC_Class4readEPhm+0x8>
	r=cdcdf_acm_read(p, n);
    17d6:	4631      	mov	r1, r6
    17d8:	4628      	mov	r0, r5
    17da:	4b02      	ldr	r3, [pc, #8]	; (17e4 <_ZN13USB_CDC_Class4readEPhm+0x1c>)
    17dc:	4798      	blx	r3
}
    17de:	bd70      	pop	{r4, r5, r6, pc}
    17e0:	000046ed 	.word	0x000046ed
    17e4:	0000469d 	.word	0x0000469d

000017e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    17e8:	b508      	push	{r3, lr}
	system_init();
    17ea:	4b02      	ldr	r3, [pc, #8]	; (17f4 <atmel_start_init+0xc>)
    17ec:	4798      	blx	r3
	usb_init();
    17ee:	4b02      	ldr	r3, [pc, #8]	; (17f8 <atmel_start_init+0x10>)
    17f0:	4798      	blx	r3
    17f2:	bd08      	pop	{r3, pc}
    17f4:	00001a3d 	.word	0x00001a3d
    17f8:	00004f35 	.word	0x00004f35

000017fc <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    17fc:	4a04      	ldr	r2, [pc, #16]	; (1810 <ADC_0_CLOCK_init+0x14>)
    17fe:	6a13      	ldr	r3, [r2, #32]
    1800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1804:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1806:	2240      	movs	r2, #64	; 0x40
    1808:	4b02      	ldr	r3, [pc, #8]	; (1814 <ADC_0_CLOCK_init+0x18>)
    180a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    180e:	4770      	bx	lr
    1810:	40000800 	.word	0x40000800
    1814:	40001c00 	.word	0x40001c00

00001818 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    1818:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    181a:	4b04      	ldr	r3, [pc, #16]	; (182c <ADC_0_init+0x14>)
    181c:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    181e:	2200      	movs	r2, #0
    1820:	4903      	ldr	r1, [pc, #12]	; (1830 <ADC_0_init+0x18>)
    1822:	4804      	ldr	r0, [pc, #16]	; (1834 <ADC_0_init+0x1c>)
    1824:	4b04      	ldr	r3, [pc, #16]	; (1838 <ADC_0_init+0x20>)
    1826:	4798      	blx	r3
    1828:	bd08      	pop	{r3, pc}
    182a:	bf00      	nop
    182c:	000017fd 	.word	0x000017fd
    1830:	43001c00 	.word	0x43001c00
    1834:	200008e8 	.word	0x200008e8
    1838:	00001c11 	.word	0x00001c11

0000183c <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    183c:	b508      	push	{r3, lr}
    183e:	4b07      	ldr	r3, [pc, #28]	; (185c <EVENT_SYSTEM_0_init+0x20>)
    1840:	2240      	movs	r2, #64	; 0x40
    1842:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1846:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    184a:	4a05      	ldr	r2, [pc, #20]	; (1860 <EVENT_SYSTEM_0_init+0x24>)
    184c:	6993      	ldr	r3, [r2, #24]
    184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1852:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    1854:	4b03      	ldr	r3, [pc, #12]	; (1864 <EVENT_SYSTEM_0_init+0x28>)
    1856:	4798      	blx	r3
    1858:	bd08      	pop	{r3, pc}
    185a:	bf00      	nop
    185c:	40001c00 	.word	0x40001c00
    1860:	40000800 	.word	0x40000800
    1864:	00001c91 	.word	0x00001c91

00001868 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1868:	4b28      	ldr	r3, [pc, #160]	; (190c <SPI_0_PORT_init+0xa4>)
    186a:	2210      	movs	r2, #16
    186c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    186e:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1870:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1874:	629a      	str	r2, [r3, #40]	; 0x28
    1876:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    187a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    187c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    1880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1884:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    188c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1890:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1894:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1898:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    189c:	2220      	movs	r2, #32
    189e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    18a0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    18a6:	629a      	str	r2, [r3, #40]	; 0x28
    18a8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    18ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    18ba:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    18be:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    18c2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    18c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18ca:	2240      	movs	r2, #64	; 0x40
    18cc:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    18d2:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    18d6:	629a      	str	r2, [r3, #40]	; 0x28
    18d8:	4a0d      	ldr	r2, [pc, #52]	; (1910 <SPI_0_PORT_init+0xa8>)
    18da:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    18dc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    18e0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    18e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18e8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    18ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18f0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    18f8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    18fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1900:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1904:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    1908:	4770      	bx	lr
    190a:	bf00      	nop
    190c:	41008000 	.word	0x41008000
    1910:	c0020000 	.word	0xc0020000

00001914 <SPI_0_CLOCK_init>:
    1914:	4b06      	ldr	r3, [pc, #24]	; (1930 <SPI_0_CLOCK_init+0x1c>)
    1916:	2240      	movs	r2, #64	; 0x40
    1918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    191c:	2243      	movs	r2, #67	; 0x43
    191e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    1922:	4a04      	ldr	r2, [pc, #16]	; (1934 <SPI_0_CLOCK_init+0x20>)
    1924:	6953      	ldr	r3, [r2, #20]
    1926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    192a:	6153      	str	r3, [r2, #20]
    192c:	4770      	bx	lr
    192e:	bf00      	nop
    1930:	40001c00 	.word	0x40001c00
    1934:	40000800 	.word	0x40000800

00001938 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
    1938:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
    193a:	4b04      	ldr	r3, [pc, #16]	; (194c <SPI_0_init+0x14>)
    193c:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
    193e:	4904      	ldr	r1, [pc, #16]	; (1950 <SPI_0_init+0x18>)
    1940:	4804      	ldr	r0, [pc, #16]	; (1954 <SPI_0_init+0x1c>)
    1942:	4b05      	ldr	r3, [pc, #20]	; (1958 <SPI_0_init+0x20>)
    1944:	4798      	blx	r3
	SPI_0_PORT_init();
    1946:	4b05      	ldr	r3, [pc, #20]	; (195c <SPI_0_init+0x24>)
    1948:	4798      	blx	r3
    194a:	bd08      	pop	{r3, pc}
    194c:	00001915 	.word	0x00001915
    1950:	40003000 	.word	0x40003000
    1954:	200008ec 	.word	0x200008ec
    1958:	00001ebd 	.word	0x00001ebd
    195c:	00001869 	.word	0x00001869

00001960 <delay_driver_init>:
}

void delay_driver_init(void)
{
    1960:	b508      	push	{r3, lr}
	delay_init(SysTick);
    1962:	4802      	ldr	r0, [pc, #8]	; (196c <delay_driver_init+0xc>)
    1964:	4b02      	ldr	r3, [pc, #8]	; (1970 <delay_driver_init+0x10>)
    1966:	4798      	blx	r3
    1968:	bd08      	pop	{r3, pc}
    196a:	bf00      	nop
    196c:	e000e010 	.word	0xe000e010
    1970:	00001c5d 	.word	0x00001c5d

00001974 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1974:	4b1e      	ldr	r3, [pc, #120]	; (19f0 <USB_0_PORT_init+0x7c>)
    1976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    197a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    197c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1980:	6299      	str	r1, [r3, #40]	; 0x28
    1982:	481c      	ldr	r0, [pc, #112]	; (19f4 <USB_0_PORT_init+0x80>)
    1984:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1986:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1988:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    198c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1990:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1994:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    1998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    199c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    19a4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    19a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    19ac:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    19b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    19b8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19ba:	6299      	str	r1, [r3, #40]	; 0x28
    19bc:	490e      	ldr	r1, [pc, #56]	; (19f8 <USB_0_PORT_init+0x84>)
    19be:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19c0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    19c2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    19c6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    19ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19ce:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    19d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    19d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    19de:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    19e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    19e6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    19ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    19ee:	4770      	bx	lr
    19f0:	41008000 	.word	0x41008000
    19f4:	c0000100 	.word	0xc0000100
    19f8:	c0000200 	.word	0xc0000200

000019fc <USB_0_CLOCK_init>:
    19fc:	2244      	movs	r2, #68	; 0x44
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <USB_0_CLOCK_init+0x20>)
    1a00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1a04:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    1a08:	691a      	ldr	r2, [r3, #16]
    1a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1a0e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1a10:	699a      	ldr	r2, [r3, #24]
    1a12:	f042 0201 	orr.w	r2, r2, #1
    1a16:	619a      	str	r2, [r3, #24]
    1a18:	4770      	bx	lr
    1a1a:	bf00      	nop
    1a1c:	40001c00 	.word	0x40001c00

00001a20 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
    1a20:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
    1a22:	4b03      	ldr	r3, [pc, #12]	; (1a30 <USB_0_init+0x10>)
    1a24:	4798      	blx	r3
	usb_d_init();
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <USB_0_init+0x14>)
    1a28:	4798      	blx	r3
	USB_0_PORT_init();
    1a2a:	4b03      	ldr	r3, [pc, #12]	; (1a38 <USB_0_init+0x18>)
    1a2c:	4798      	blx	r3
    1a2e:	bd08      	pop	{r3, pc}
    1a30:	000019fd 	.word	0x000019fd
    1a34:	00002381 	.word	0x00002381
    1a38:	00001975 	.word	0x00001975

00001a3c <system_init>:
}

void system_init(void)
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1a3e:	4b61      	ldr	r3, [pc, #388]	; (1bc4 <system_init+0x188>)
    1a40:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1a42:	4b61      	ldr	r3, [pc, #388]	; (1bc8 <system_init+0x18c>)
    1a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1a48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1a54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1a58:	495c      	ldr	r1, [pc, #368]	; (1bcc <system_init+0x190>)
    1a5a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a5e:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a62:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a66:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a6e:	4d58      	ldr	r5, [pc, #352]	; (1bd0 <system_init+0x194>)
    1a70:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
    1a74:	4c57      	ldr	r4, [pc, #348]	; (1bd4 <system_init+0x198>)
    1a76:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1a7e:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
    1a82:	f041 0104 	orr.w	r1, r1, #4
    1a86:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1a8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a8e:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a92:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a96:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a9a:	2104      	movs	r1, #4
    1a9c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1aa0:	484d      	ldr	r0, [pc, #308]	; (1bd8 <system_init+0x19c>)
    1aa2:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    1aa6:	4e4d      	ldr	r6, [pc, #308]	; (1bdc <system_init+0x1a0>)
    1aa8:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1aac:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1ab0:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
    1ab4:	4308      	orrs	r0, r1
    1ab6:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1aba:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1abe:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ac2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ac6:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1aca:	2108      	movs	r1, #8
    1acc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ad0:	4843      	ldr	r0, [pc, #268]	; (1be0 <system_init+0x1a4>)
    1ad2:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    1ad6:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ada:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1ade:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
    1ae2:	f040 0004 	orr.w	r0, r0, #4
    1ae6:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1aea:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1aee:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
    1af2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1af6:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1afe:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b02:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1b0a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    1b0e:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    1b12:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b16:	f893 114f 	ldrb.w	r1, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b1e:	f883 114f 	strb.w	r1, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1b26:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b2a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1b32:	492c      	ldr	r1, [pc, #176]	; (1be4 <system_init+0x1a8>)
    1b34:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b38:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b3c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b40:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b44:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b48:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
    1b4c:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1b54:	f893 115e 	ldrb.w	r1, [r3, #350]	; 0x15e
    1b58:	f041 0104 	orr.w	r1, r1, #4
    1b5c:	f883 115e 	strb.w	r1, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b64:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b6c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b74:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b78:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1b80:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    1b84:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b88:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b90:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED1, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    1b94:	4b14      	ldr	r3, [pc, #80]	; (1be8 <system_init+0x1ac>)
    1b96:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1b98:	4b14      	ldr	r3, [pc, #80]	; (1bec <system_init+0x1b0>)
    1b9a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1b9c:	4a14      	ldr	r2, [pc, #80]	; (1bf0 <system_init+0x1b4>)
    1b9e:	6953      	ldr	r3, [r2, #20]
    1ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1ba4:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    1ba6:	4b13      	ldr	r3, [pc, #76]	; (1bf4 <system_init+0x1b8>)
    1ba8:	4798      	blx	r3
    1baa:	4602      	mov	r2, r0
    1bac:	4912      	ldr	r1, [pc, #72]	; (1bf8 <system_init+0x1bc>)
    1bae:	4813      	ldr	r0, [pc, #76]	; (1bfc <system_init+0x1c0>)
    1bb0:	4b13      	ldr	r3, [pc, #76]	; (1c00 <system_init+0x1c4>)
    1bb2:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
    1bb4:	4b13      	ldr	r3, [pc, #76]	; (1c04 <system_init+0x1c8>)
    1bb6:	4798      	blx	r3

	delay_driver_init();
    1bb8:	4b13      	ldr	r3, [pc, #76]	; (1c08 <system_init+0x1cc>)
    1bba:	4798      	blx	r3

	USB_0_init();
    1bbc:	4b13      	ldr	r3, [pc, #76]	; (1c0c <system_init+0x1d0>)
    1bbe:	4798      	blx	r3
    1bc0:	bd70      	pop	{r4, r5, r6, pc}
    1bc2:	bf00      	nop
    1bc4:	00002911 	.word	0x00002911
    1bc8:	41008000 	.word	0x41008000
    1bcc:	c0001000 	.word	0xc0001000
    1bd0:	40020000 	.word	0x40020000
    1bd4:	c0024000 	.word	0xc0024000
    1bd8:	40020004 	.word	0x40020004
    1bdc:	c0020000 	.word	0xc0020000
    1be0:	40020008 	.word	0x40020008
    1be4:	c0000004 	.word	0xc0000004
    1be8:	00001819 	.word	0x00001819
    1bec:	0000183d 	.word	0x0000183d
    1bf0:	40000800 	.word	0x40000800
    1bf4:	00002bd1 	.word	0x00002bd1
    1bf8:	40002400 	.word	0x40002400
    1bfc:	20000934 	.word	0x20000934
    1c00:	000020f1 	.word	0x000020f1
    1c04:	00001939 	.word	0x00001939
    1c08:	00001961 	.word	0x00001961
    1c0c:	00001a21 	.word	0x00001a21

00001c10 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1c10:	b538      	push	{r3, r4, r5, lr}
    1c12:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1c14:	4605      	mov	r5, r0
    1c16:	b158      	cbz	r0, 1c30 <adc_sync_init+0x20>
    1c18:	1c08      	adds	r0, r1, #0
    1c1a:	bf18      	it	ne
    1c1c:	2001      	movne	r0, #1
    1c1e:	2239      	movs	r2, #57	; 0x39
    1c20:	4904      	ldr	r1, [pc, #16]	; (1c34 <adc_sync_init+0x24>)
    1c22:	4b05      	ldr	r3, [pc, #20]	; (1c38 <adc_sync_init+0x28>)
    1c24:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1c26:	4621      	mov	r1, r4
    1c28:	4628      	mov	r0, r5
    1c2a:	4b04      	ldr	r3, [pc, #16]	; (1c3c <adc_sync_init+0x2c>)
    1c2c:	4798      	blx	r3
}
    1c2e:	bd38      	pop	{r3, r4, r5, pc}
    1c30:	2000      	movs	r0, #0
    1c32:	e7f4      	b.n	1c1e <adc_sync_init+0xe>
    1c34:	00005adc 	.word	0x00005adc
    1c38:	000026cd 	.word	0x000026cd
    1c3c:	000028cd 	.word	0x000028cd

00001c40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1c44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1c46:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1c48:	f3bf 8f5f 	dmb	sy
    1c4c:	4770      	bx	lr

00001c4e <atomic_leave_critical>:
    1c4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1c52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1c54:	f383 8810 	msr	PRIMASK, r3
    1c58:	4770      	bx	lr
	...

00001c5c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1c5c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <delay_init+0xc>)
    1c60:	6018      	str	r0, [r3, #0]
    1c62:	4b02      	ldr	r3, [pc, #8]	; (1c6c <delay_init+0x10>)
    1c64:	4798      	blx	r3
    1c66:	bd08      	pop	{r3, pc}
    1c68:	200005b0 	.word	0x200005b0
    1c6c:	000030fd 	.word	0x000030fd

00001c70 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1c70:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1c72:	4b04      	ldr	r3, [pc, #16]	; (1c84 <delay_ms+0x14>)
    1c74:	681c      	ldr	r4, [r3, #0]
    1c76:	4b04      	ldr	r3, [pc, #16]	; (1c88 <delay_ms+0x18>)
    1c78:	4798      	blx	r3
    1c7a:	4601      	mov	r1, r0
    1c7c:	4620      	mov	r0, r4
    1c7e:	4b03      	ldr	r3, [pc, #12]	; (1c8c <delay_ms+0x1c>)
    1c80:	4798      	blx	r3
    1c82:	bd10      	pop	{r4, pc}
    1c84:	200005b0 	.word	0x200005b0
    1c88:	00002905 	.word	0x00002905
    1c8c:	00003111 	.word	0x00003111

00001c90 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1c90:	b508      	push	{r3, lr}
	return _event_system_init();
    1c92:	4b01      	ldr	r3, [pc, #4]	; (1c98 <event_system_init+0x8>)
    1c94:	4798      	blx	r3
}
    1c96:	bd08      	pop	{r3, pc}
    1c98:	00002975 	.word	0x00002975

00001c9c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	460d      	mov	r5, r1
    1ca0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1ca2:	4604      	mov	r4, r0
    1ca4:	b160      	cbz	r0, 1cc0 <io_write+0x24>
    1ca6:	1c08      	adds	r0, r1, #0
    1ca8:	bf18      	it	ne
    1caa:	2001      	movne	r0, #1
    1cac:	2234      	movs	r2, #52	; 0x34
    1cae:	4905      	ldr	r1, [pc, #20]	; (1cc4 <io_write+0x28>)
    1cb0:	4b05      	ldr	r3, [pc, #20]	; (1cc8 <io_write+0x2c>)
    1cb2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	4632      	mov	r2, r6
    1cb8:	4629      	mov	r1, r5
    1cba:	4620      	mov	r0, r4
    1cbc:	4798      	blx	r3
}
    1cbe:	bd70      	pop	{r4, r5, r6, pc}
    1cc0:	2000      	movs	r0, #0
    1cc2:	e7f3      	b.n	1cac <io_write+0x10>
    1cc4:	00005af8 	.word	0x00005af8
    1cc8:	000026cd 	.word	0x000026cd

00001ccc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
    1cce:	460d      	mov	r5, r1
    1cd0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1cd2:	4604      	mov	r4, r0
    1cd4:	b160      	cbz	r0, 1cf0 <io_read+0x24>
    1cd6:	1c08      	adds	r0, r1, #0
    1cd8:	bf18      	it	ne
    1cda:	2001      	movne	r0, #1
    1cdc:	223d      	movs	r2, #61	; 0x3d
    1cde:	4905      	ldr	r1, [pc, #20]	; (1cf4 <io_read+0x28>)
    1ce0:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <io_read+0x2c>)
    1ce2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1ce4:	6863      	ldr	r3, [r4, #4]
    1ce6:	4632      	mov	r2, r6
    1ce8:	4629      	mov	r1, r5
    1cea:	4620      	mov	r0, r4
    1cec:	4798      	blx	r3
}
    1cee:	bd70      	pop	{r4, r5, r6, pc}
    1cf0:	2000      	movs	r0, #0
    1cf2:	e7f3      	b.n	1cdc <io_read+0x10>
    1cf4:	00005af8 	.word	0x00005af8
    1cf8:	000026cd 	.word	0x000026cd

00001cfc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cfe:	460f      	mov	r7, r1
    1d00:	4616      	mov	r6, r2
	ASSERT(io);
    1d02:	4604      	mov	r4, r0
    1d04:	f240 1227 	movw	r2, #295	; 0x127
    1d08:	4909      	ldr	r1, [pc, #36]	; (1d30 <_spi_m_async_io_write+0x34>)
    1d0a:	3000      	adds	r0, #0
    1d0c:	bf18      	it	ne
    1d0e:	2001      	movne	r0, #1
    1d10:	4b08      	ldr	r3, [pc, #32]	; (1d34 <_spi_m_async_io_write+0x38>)
    1d12:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    1d14:	2500      	movs	r5, #0
    1d16:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    1d18:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    1d1a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    1d1c:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1d1e:	2310      	movs	r3, #16
    1d20:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    1d22:	2101      	movs	r1, #1
    1d24:	f1a4 0020 	sub.w	r0, r4, #32
    1d28:	4b03      	ldr	r3, [pc, #12]	; (1d38 <_spi_m_async_io_write+0x3c>)
    1d2a:	4798      	blx	r3

	return ERR_NONE;
}
    1d2c:	4628      	mov	r0, r5
    1d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d30:	00005b0c 	.word	0x00005b0c
    1d34:	000026cd 	.word	0x000026cd
    1d38:	00002f85 	.word	0x00002f85

00001d3c <_spi_m_async_io_read>:
{
    1d3c:	b570      	push	{r4, r5, r6, lr}
    1d3e:	460d      	mov	r5, r1
    1d40:	4616      	mov	r6, r2
	ASSERT(io);
    1d42:	4604      	mov	r4, r0
    1d44:	f240 1205 	movw	r2, #261	; 0x105
    1d48:	490c      	ldr	r1, [pc, #48]	; (1d7c <_spi_m_async_io_read+0x40>)
    1d4a:	3000      	adds	r0, #0
    1d4c:	bf18      	it	ne
    1d4e:	2001      	movne	r0, #1
    1d50:	4b0b      	ldr	r3, [pc, #44]	; (1d80 <_spi_m_async_io_read+0x44>)
    1d52:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    1d54:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    1d56:	2500      	movs	r5, #0
    1d58:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    1d5a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    1d5c:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1d5e:	2310      	movs	r3, #16
    1d60:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    1d62:	3c20      	subs	r4, #32
    1d64:	2101      	movs	r1, #1
    1d66:	4620      	mov	r0, r4
    1d68:	4b06      	ldr	r3, [pc, #24]	; (1d84 <_spi_m_async_io_read+0x48>)
    1d6a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    1d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
    1d70:	4620      	mov	r0, r4
    1d72:	4b05      	ldr	r3, [pc, #20]	; (1d88 <_spi_m_async_io_read+0x4c>)
    1d74:	4798      	blx	r3
}
    1d76:	4628      	mov	r0, r5
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	bf00      	nop
    1d7c:	00005b0c 	.word	0x00005b0c
    1d80:	000026cd 	.word	0x000026cd
    1d84:	00002fb9 	.word	0x00002fb9
    1d88:	00003035 	.word	0x00003035

00001d8c <_spi_dev_error>:
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	4604      	mov	r4, r0
    1d90:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1d92:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    1d94:	2100      	movs	r1, #0
    1d96:	4b09      	ldr	r3, [pc, #36]	; (1dbc <_spi_dev_error+0x30>)
    1d98:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    1d9a:	2100      	movs	r1, #0
    1d9c:	4620      	mov	r0, r4
    1d9e:	4b08      	ldr	r3, [pc, #32]	; (1dc0 <_spi_dev_error+0x34>)
    1da0:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    1da2:	2100      	movs	r1, #0
    1da4:	4620      	mov	r0, r4
    1da6:	4b07      	ldr	r3, [pc, #28]	; (1dc4 <_spi_dev_error+0x38>)
    1da8:	4798      	blx	r3
	spi->stat = 0;
    1daa:	2300      	movs	r3, #0
    1dac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    1db0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1db2:	b113      	cbz	r3, 1dba <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    1db4:	4631      	mov	r1, r6
    1db6:	4628      	mov	r0, r5
    1db8:	4798      	blx	r3
    1dba:	bd70      	pop	{r4, r5, r6, pc}
    1dbc:	00002f85 	.word	0x00002f85
    1dc0:	00002fb9 	.word	0x00002fb9
    1dc4:	00002ff9 	.word	0x00002ff9

00001dc8 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    1dc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1dca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1dcc:	429a      	cmp	r2, r3
    1dce:	d200      	bcs.n	1dd2 <_spi_dev_complete+0xa>
    1dd0:	4770      	bx	lr
{
    1dd2:	b510      	push	{r4, lr}
    1dd4:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    1dd6:	2100      	movs	r1, #0
    1dd8:	4b04      	ldr	r3, [pc, #16]	; (1dec <_spi_dev_complete+0x24>)
    1dda:	4798      	blx	r3
		spi->stat = 0;
    1ddc:	2300      	movs	r3, #0
    1dde:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1de2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1de4:	b10b      	cbz	r3, 1dea <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    1de6:	1f20      	subs	r0, r4, #4
    1de8:	4798      	blx	r3
    1dea:	bd10      	pop	{r4, pc}
    1dec:	00002ff9 	.word	0x00002ff9

00001df0 <_spi_dev_tx>:
{
    1df0:	b510      	push	{r4, lr}
    1df2:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    1df4:	7903      	ldrb	r3, [r0, #4]
    1df6:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1df8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1dfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1dfc:	f103 0101 	add.w	r1, r3, #1
    1e00:	6401      	str	r1, [r0, #64]	; 0x40
    1e02:	bf94      	ite	ls
    1e04:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1e06:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1e0a:	4b08      	ldr	r3, [pc, #32]	; (1e2c <_spi_dev_tx+0x3c>)
    1e0c:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    1e0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1e10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1e12:	429a      	cmp	r2, r3
    1e14:	d000      	beq.n	1e18 <_spi_dev_tx+0x28>
    1e16:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    1e18:	2100      	movs	r1, #0
    1e1a:	4620      	mov	r0, r4
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <_spi_dev_tx+0x40>)
    1e1e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1e20:	2101      	movs	r1, #1
    1e22:	4620      	mov	r0, r4
    1e24:	4b03      	ldr	r3, [pc, #12]	; (1e34 <_spi_dev_tx+0x44>)
    1e26:	4798      	blx	r3
}
    1e28:	e7f5      	b.n	1e16 <_spi_dev_tx+0x26>
    1e2a:	bf00      	nop
    1e2c:	00003035 	.word	0x00003035
    1e30:	00002f85 	.word	0x00002f85
    1e34:	00002ff9 	.word	0x00002ff9

00001e38 <_spi_dev_rx>:
{
    1e38:	b570      	push	{r4, r5, r6, lr}
    1e3a:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    1e3c:	6b85      	ldr	r5, [r0, #56]	; 0x38
    1e3e:	b305      	cbz	r5, 1e82 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    1e40:	7903      	ldrb	r3, [r0, #4]
    1e42:	2b01      	cmp	r3, #1
    1e44:	d916      	bls.n	1e74 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1e46:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1e48:	1c73      	adds	r3, r6, #1
    1e4a:	6403      	str	r3, [r0, #64]	; 0x40
    1e4c:	4b18      	ldr	r3, [pc, #96]	; (1eb0 <_spi_dev_rx+0x78>)
    1e4e:	4798      	blx	r3
    1e50:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    1e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1e58:	4293      	cmp	r3, r2
    1e5a:	d21d      	bcs.n	1e98 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    1e5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1e5e:	b1b2      	cbz	r2, 1e8e <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    1e60:	7921      	ldrb	r1, [r4, #4]
    1e62:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1e64:	bf94      	ite	ls
    1e66:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1e68:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1e6c:	4620      	mov	r0, r4
    1e6e:	4b11      	ldr	r3, [pc, #68]	; (1eb4 <_spi_dev_rx+0x7c>)
    1e70:	4798      	blx	r3
    1e72:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1e74:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1e76:	1c73      	adds	r3, r6, #1
    1e78:	6403      	str	r3, [r0, #64]	; 0x40
    1e7a:	4b0d      	ldr	r3, [pc, #52]	; (1eb0 <_spi_dev_rx+0x78>)
    1e7c:	4798      	blx	r3
    1e7e:	55a8      	strb	r0, [r5, r6]
    1e80:	e7e8      	b.n	1e54 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    1e82:	4b0b      	ldr	r3, [pc, #44]	; (1eb0 <_spi_dev_rx+0x78>)
    1e84:	4798      	blx	r3
		spi->xfercnt++;
    1e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e88:	3301      	adds	r3, #1
    1e8a:	6423      	str	r3, [r4, #64]	; 0x40
    1e8c:	e7e2      	b.n	1e54 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1e8e:	88e1      	ldrh	r1, [r4, #6]
    1e90:	4620      	mov	r0, r4
    1e92:	4b08      	ldr	r3, [pc, #32]	; (1eb4 <_spi_dev_rx+0x7c>)
    1e94:	4798      	blx	r3
    1e96:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    1e98:	2100      	movs	r1, #0
    1e9a:	4620      	mov	r0, r4
    1e9c:	4b06      	ldr	r3, [pc, #24]	; (1eb8 <_spi_dev_rx+0x80>)
    1e9e:	4798      	blx	r3
		spi->stat = 0;
    1ea0:	2300      	movs	r3, #0
    1ea2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ea8:	b10b      	cbz	r3, 1eae <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    1eaa:	1f20      	subs	r0, r4, #4
    1eac:	4798      	blx	r3
    1eae:	bd70      	pop	{r4, r5, r6, pc}
    1eb0:	00003065 	.word	0x00003065
    1eb4:	00003035 	.word	0x00003035
    1eb8:	00002fb9 	.word	0x00002fb9

00001ebc <spi_m_async_init>:
{
    1ebc:	b570      	push	{r4, r5, r6, lr}
    1ebe:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    1ec0:	4606      	mov	r6, r0
    1ec2:	b330      	cbz	r0, 1f12 <spi_m_async_init+0x56>
    1ec4:	1c08      	adds	r0, r1, #0
    1ec6:	bf18      	it	ne
    1ec8:	2001      	movne	r0, #1
    1eca:	22a5      	movs	r2, #165	; 0xa5
    1ecc:	4912      	ldr	r1, [pc, #72]	; (1f18 <spi_m_async_init+0x5c>)
    1ece:	4b13      	ldr	r3, [pc, #76]	; (1f1c <spi_m_async_init+0x60>)
    1ed0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1ed2:	4634      	mov	r4, r6
    1ed4:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    1ed8:	4629      	mov	r1, r5
    1eda:	4620      	mov	r0, r4
    1edc:	4b10      	ldr	r3, [pc, #64]	; (1f20 <spi_m_async_init+0x64>)
    1ede:	4798      	blx	r3
	if (rc >= 0) {
    1ee0:	2800      	cmp	r0, #0
    1ee2:	db15      	blt.n	1f10 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1ee4:	4a0f      	ldr	r2, [pc, #60]	; (1f24 <spi_m_async_init+0x68>)
    1ee6:	2100      	movs	r1, #0
    1ee8:	4620      	mov	r0, r4
    1eea:	4d0f      	ldr	r5, [pc, #60]	; (1f28 <spi_m_async_init+0x6c>)
    1eec:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1eee:	4a0f      	ldr	r2, [pc, #60]	; (1f2c <spi_m_async_init+0x70>)
    1ef0:	2101      	movs	r1, #1
    1ef2:	4620      	mov	r0, r4
    1ef4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1ef6:	4a0e      	ldr	r2, [pc, #56]	; (1f30 <spi_m_async_init+0x74>)
    1ef8:	2102      	movs	r1, #2
    1efa:	4620      	mov	r0, r4
    1efc:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1efe:	4a0d      	ldr	r2, [pc, #52]	; (1f34 <spi_m_async_init+0x78>)
    1f00:	2103      	movs	r1, #3
    1f02:	4620      	mov	r0, r4
    1f04:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    1f06:	4b0c      	ldr	r3, [pc, #48]	; (1f38 <spi_m_async_init+0x7c>)
    1f08:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    1f0a:	4b0c      	ldr	r3, [pc, #48]	; (1f3c <spi_m_async_init+0x80>)
    1f0c:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    1f0e:	2000      	movs	r0, #0
}
    1f10:	bd70      	pop	{r4, r5, r6, pc}
    1f12:	2000      	movs	r0, #0
    1f14:	e7d9      	b.n	1eca <spi_m_async_init+0xe>
    1f16:	bf00      	nop
    1f18:	00005b0c 	.word	0x00005b0c
    1f1c:	000026cd 	.word	0x000026cd
    1f20:	00002eb9 	.word	0x00002eb9
    1f24:	00001df1 	.word	0x00001df1
    1f28:	00003091 	.word	0x00003091
    1f2c:	00001e39 	.word	0x00001e39
    1f30:	00001dc9 	.word	0x00001dc9
    1f34:	00001d8d 	.word	0x00001d8d
    1f38:	00001d3d 	.word	0x00001d3d
    1f3c:	00001cfd 	.word	0x00001cfd

00001f40 <spi_m_async_enable>:
{
    1f40:	b510      	push	{r4, lr}
	ASSERT(spi);
    1f42:	4604      	mov	r4, r0
    1f44:	22c1      	movs	r2, #193	; 0xc1
    1f46:	4905      	ldr	r1, [pc, #20]	; (1f5c <spi_m_async_enable+0x1c>)
    1f48:	3000      	adds	r0, #0
    1f4a:	bf18      	it	ne
    1f4c:	2001      	movne	r0, #1
    1f4e:	4b04      	ldr	r3, [pc, #16]	; (1f60 <spi_m_async_enable+0x20>)
    1f50:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    1f52:	1d20      	adds	r0, r4, #4
    1f54:	4b03      	ldr	r3, [pc, #12]	; (1f64 <spi_m_async_enable+0x24>)
    1f56:	4798      	blx	r3
    1f58:	bd10      	pop	{r4, pc}
    1f5a:	bf00      	nop
    1f5c:	00005b0c 	.word	0x00005b0c
    1f60:	000026cd 	.word	0x000026cd
    1f64:	00002f25 	.word	0x00002f25

00001f68 <spi_m_async_disable>:
{
    1f68:	b510      	push	{r4, lr}
	ASSERT(spi);
    1f6a:	4604      	mov	r4, r0
    1f6c:	22c7      	movs	r2, #199	; 0xc7
    1f6e:	4909      	ldr	r1, [pc, #36]	; (1f94 <spi_m_async_disable+0x2c>)
    1f70:	3000      	adds	r0, #0
    1f72:	bf18      	it	ne
    1f74:	2001      	movne	r0, #1
    1f76:	4b08      	ldr	r3, [pc, #32]	; (1f98 <spi_m_async_disable+0x30>)
    1f78:	4798      	blx	r3
	_spi_m_async_enable_tx(&spi->dev, false);
    1f7a:	3404      	adds	r4, #4
    1f7c:	2100      	movs	r1, #0
    1f7e:	4620      	mov	r0, r4
    1f80:	4b06      	ldr	r3, [pc, #24]	; (1f9c <spi_m_async_disable+0x34>)
    1f82:	4798      	blx	r3
	_spi_m_async_enable_rx(&spi->dev, false);
    1f84:	2100      	movs	r1, #0
    1f86:	4620      	mov	r0, r4
    1f88:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <spi_m_async_disable+0x38>)
    1f8a:	4798      	blx	r3
	_spi_m_async_disable(&spi->dev);
    1f8c:	4620      	mov	r0, r4
    1f8e:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <spi_m_async_disable+0x3c>)
    1f90:	4798      	blx	r3
    1f92:	bd10      	pop	{r4, pc}
    1f94:	00005b0c 	.word	0x00005b0c
    1f98:	000026cd 	.word	0x000026cd
    1f9c:	00002f85 	.word	0x00002f85
    1fa0:	00002fb9 	.word	0x00002fb9
    1fa4:	00002f55 	.word	0x00002f55

00001fa8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    1fa8:	b570      	push	{r4, r5, r6, lr}
    1faa:	460c      	mov	r4, r1
    1fac:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    1fae:	4605      	mov	r5, r0
    1fb0:	b158      	cbz	r0, 1fca <spi_m_async_register_callback+0x22>
    1fb2:	2901      	cmp	r1, #1
    1fb4:	bf8c      	ite	hi
    1fb6:	2000      	movhi	r0, #0
    1fb8:	2001      	movls	r0, #1
    1fba:	f240 1263 	movw	r2, #355	; 0x163
    1fbe:	4908      	ldr	r1, [pc, #32]	; (1fe0 <spi_m_async_register_callback+0x38>)
    1fc0:	4b08      	ldr	r3, [pc, #32]	; (1fe4 <spi_m_async_register_callback+0x3c>)
    1fc2:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    1fc4:	b91c      	cbnz	r4, 1fce <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    1fc6:	632e      	str	r6, [r5, #48]	; 0x30
    1fc8:	bd70      	pop	{r4, r5, r6, pc}
    1fca:	2000      	movs	r0, #0
    1fcc:	e7f5      	b.n	1fba <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    1fce:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    1fd0:	1c32      	adds	r2, r6, #0
    1fd2:	bf18      	it	ne
    1fd4:	2201      	movne	r2, #1
    1fd6:	2103      	movs	r1, #3
    1fd8:	1d28      	adds	r0, r5, #4
    1fda:	4b03      	ldr	r3, [pc, #12]	; (1fe8 <spi_m_async_register_callback+0x40>)
    1fdc:	4798      	blx	r3
    1fde:	bd70      	pop	{r4, r5, r6, pc}
    1fe0:	00005b0c 	.word	0x00005b0c
    1fe4:	000026cd 	.word	0x000026cd
    1fe8:	000030c5 	.word	0x000030c5

00001fec <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    1fec:	b538      	push	{r3, r4, r5, lr}
    1fee:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1ff0:	4604      	mov	r4, r0
    1ff2:	b158      	cbz	r0, 200c <spi_m_async_get_io_descriptor+0x20>
    1ff4:	1c08      	adds	r0, r1, #0
    1ff6:	bf18      	it	ne
    1ff8:	2001      	movne	r0, #1
    1ffa:	f240 126f 	movw	r2, #367	; 0x16f
    1ffe:	4904      	ldr	r1, [pc, #16]	; (2010 <spi_m_async_get_io_descriptor+0x24>)
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <spi_m_async_get_io_descriptor+0x28>)
    2002:	4798      	blx	r3
	*io = &spi->io;
    2004:	3424      	adds	r4, #36	; 0x24
    2006:	602c      	str	r4, [r5, #0]
	return 0;
}
    2008:	2000      	movs	r0, #0
    200a:	bd38      	pop	{r3, r4, r5, pc}
    200c:	2000      	movs	r0, #0
    200e:	e7f4      	b.n	1ffa <spi_m_async_get_io_descriptor+0xe>
    2010:	00005b0c 	.word	0x00005b0c
    2014:	000026cd 	.word	0x000026cd

00002018 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    201a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    201c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    201e:	b12f      	cbz	r7, 202c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    2020:	688d      	ldr	r5, [r1, #8]
    2022:	463c      	mov	r4, r7
    2024:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2026:	f1c2 0e01 	rsb	lr, r2, #1
    202a:	e00b      	b.n	2044 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    202c:	4b0e      	ldr	r3, [pc, #56]	; (2068 <timer_add_timer_task+0x50>)
    202e:	4798      	blx	r3
		return;
    2030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2032:	4473      	add	r3, lr
    2034:	68a0      	ldr	r0, [r4, #8]
    2036:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    2038:	42ab      	cmp	r3, r5
    203a:	d20a      	bcs.n	2052 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    203c:	6823      	ldr	r3, [r4, #0]
    203e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2040:	b153      	cbz	r3, 2058 <timer_add_timer_task+0x40>
    2042:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    2044:	6863      	ldr	r3, [r4, #4]
    2046:	4293      	cmp	r3, r2
    2048:	d8f3      	bhi.n	2032 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    204a:	68a0      	ldr	r0, [r4, #8]
    204c:	4403      	add	r3, r0
    204e:	1a9b      	subs	r3, r3, r2
    2050:	e7f2      	b.n	2038 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    2052:	42a7      	cmp	r7, r4
    2054:	d004      	beq.n	2060 <timer_add_timer_task+0x48>
    2056:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2058:	4620      	mov	r0, r4
    205a:	4b04      	ldr	r3, [pc, #16]	; (206c <timer_add_timer_task+0x54>)
    205c:	4798      	blx	r3
    205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2060:	4660      	mov	r0, ip
    2062:	4b01      	ldr	r3, [pc, #4]	; (2068 <timer_add_timer_task+0x50>)
    2064:	4798      	blx	r3
    2066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2068:	000026f5 	.word	0x000026f5
    206c:	00002721 	.word	0x00002721

00002070 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    2074:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    2076:	6907      	ldr	r7, [r0, #16]
    2078:	3701      	adds	r7, #1
    207a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    207c:	7e03      	ldrb	r3, [r0, #24]
    207e:	f013 0f01 	tst.w	r3, #1
    2082:	d113      	bne.n	20ac <timer_process_counted+0x3c>
    2084:	7e03      	ldrb	r3, [r0, #24]
    2086:	f013 0f02 	tst.w	r3, #2
    208a:	d10f      	bne.n	20ac <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    208c:	b354      	cbz	r4, 20e4 <timer_process_counted+0x74>
    208e:	6863      	ldr	r3, [r4, #4]
    2090:	1afb      	subs	r3, r7, r3
    2092:	68a2      	ldr	r2, [r4, #8]
    2094:	4293      	cmp	r3, r2
    2096:	d307      	bcc.n	20a8 <timer_process_counted+0x38>
    2098:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    209a:	f100 0814 	add.w	r8, r0, #20
    209e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 20e8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    20a2:	f8df a048 	ldr.w	sl, [pc, #72]	; 20ec <timer_process_counted+0x7c>
    20a6:	e012      	b.n	20ce <timer_process_counted+0x5e>
    20a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    20ac:	7e03      	ldrb	r3, [r0, #24]
    20ae:	f043 0302 	orr.w	r3, r3, #2
    20b2:	7603      	strb	r3, [r0, #24]
		return;
    20b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20b8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    20ba:	68e3      	ldr	r3, [r4, #12]
    20bc:	4620      	mov	r0, r4
    20be:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    20c0:	b185      	cbz	r5, 20e4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    20c2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    20c4:	686b      	ldr	r3, [r5, #4]
    20c6:	1afb      	subs	r3, r7, r3
    20c8:	68aa      	ldr	r2, [r5, #8]
    20ca:	4293      	cmp	r3, r2
    20cc:	d30a      	bcc.n	20e4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    20ce:	4640      	mov	r0, r8
    20d0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    20d2:	7c23      	ldrb	r3, [r4, #16]
    20d4:	2b01      	cmp	r3, #1
    20d6:	d1ef      	bne.n	20b8 <timer_process_counted+0x48>
			tmp->time_label = time;
    20d8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    20da:	463a      	mov	r2, r7
    20dc:	4621      	mov	r1, r4
    20de:	4640      	mov	r0, r8
    20e0:	47d0      	blx	sl
    20e2:	e7e9      	b.n	20b8 <timer_process_counted+0x48>
    20e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20e8:	00002769 	.word	0x00002769
    20ec:	00002019 	.word	0x00002019

000020f0 <timer_init>:
{
    20f0:	b538      	push	{r3, r4, r5, lr}
    20f2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    20f4:	4604      	mov	r4, r0
    20f6:	b178      	cbz	r0, 2118 <timer_init+0x28>
    20f8:	1c08      	adds	r0, r1, #0
    20fa:	bf18      	it	ne
    20fc:	2001      	movne	r0, #1
    20fe:	223b      	movs	r2, #59	; 0x3b
    2100:	4906      	ldr	r1, [pc, #24]	; (211c <timer_init+0x2c>)
    2102:	4b07      	ldr	r3, [pc, #28]	; (2120 <timer_init+0x30>)
    2104:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2106:	4629      	mov	r1, r5
    2108:	4620      	mov	r0, r4
    210a:	4b06      	ldr	r3, [pc, #24]	; (2124 <timer_init+0x34>)
    210c:	4798      	blx	r3
	descr->time                           = 0;
    210e:	2000      	movs	r0, #0
    2110:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2112:	4b05      	ldr	r3, [pc, #20]	; (2128 <timer_init+0x38>)
    2114:	6023      	str	r3, [r4, #0]
}
    2116:	bd38      	pop	{r3, r4, r5, pc}
    2118:	2000      	movs	r0, #0
    211a:	e7f0      	b.n	20fe <timer_init+0xe>
    211c:	00005b2c 	.word	0x00005b2c
    2120:	000026cd 	.word	0x000026cd
    2124:	00002b5d 	.word	0x00002b5d
    2128:	00002071 	.word	0x00002071

0000212c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    212c:	4b0f      	ldr	r3, [pc, #60]	; (216c <_usb_d_find_ep+0x40>)
    212e:	7859      	ldrb	r1, [r3, #1]
    2130:	4288      	cmp	r0, r1
    2132:	d018      	beq.n	2166 <_usb_d_find_ep+0x3a>
{
    2134:	b430      	push	{r4, r5}
    2136:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2138:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    213a:	f000 050f 	and.w	r5, r0, #15
    213e:	e007      	b.n	2150 <_usb_d_find_ep+0x24>
    2140:	3301      	adds	r3, #1
    2142:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2144:	2b04      	cmp	r3, #4
    2146:	d009      	beq.n	215c <_usb_d_find_ep+0x30>
    2148:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    214a:	7851      	ldrb	r1, [r2, #1]
    214c:	4281      	cmp	r1, r0
    214e:	d007      	beq.n	2160 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2150:	7814      	ldrb	r4, [r2, #0]
    2152:	2c00      	cmp	r4, #0
    2154:	d1f4      	bne.n	2140 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2156:	428d      	cmp	r5, r1
    2158:	d1f2      	bne.n	2140 <_usb_d_find_ep+0x14>
    215a:	e001      	b.n	2160 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    215c:	f04f 33ff 	mov.w	r3, #4294967295
}
    2160:	4618      	mov	r0, r3
    2162:	bc30      	pop	{r4, r5}
    2164:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2166:	2300      	movs	r3, #0
}
    2168:	4618      	mov	r0, r3
    216a:	4770      	bx	lr
    216c:	200005b4 	.word	0x200005b4

00002170 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2170:	2000      	movs	r0, #0
    2172:	4770      	bx	lr

00002174 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2174:	b538      	push	{r3, r4, r5, lr}
    2176:	4604      	mov	r4, r0
    2178:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    217a:	4b09      	ldr	r3, [pc, #36]	; (21a0 <usb_d_cb_trans_more+0x2c>)
    217c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    217e:	4b09      	ldr	r3, [pc, #36]	; (21a4 <usb_d_cb_trans_more+0x30>)
    2180:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    2184:	789b      	ldrb	r3, [r3, #2]
    2186:	2b03      	cmp	r3, #3
    2188:	d001      	beq.n	218e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    218a:	2000      	movs	r0, #0
}
    218c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <usb_d_cb_trans_more+0x30>)
    2190:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2194:	6983      	ldr	r3, [r0, #24]
    2196:	4629      	mov	r1, r5
    2198:	4620      	mov	r0, r4
    219a:	4798      	blx	r3
    219c:	bd38      	pop	{r3, r4, r5, pc}
    219e:	bf00      	nop
    21a0:	0000212d 	.word	0x0000212d
    21a4:	200005b4 	.word	0x200005b4

000021a8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    21a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21aa:	b085      	sub	sp, #20
    21ac:	4606      	mov	r6, r0
    21ae:	460d      	mov	r5, r1
    21b0:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    21b2:	4b4d      	ldr	r3, [pc, #308]	; (22e8 <_usb_d_cb_trans_done+0x140>)
    21b4:	4798      	blx	r3
    21b6:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    21b8:	2d00      	cmp	r5, #0
    21ba:	d15b      	bne.n	2274 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    21bc:	4a4b      	ldr	r2, [pc, #300]	; (22ec <_usb_d_cb_trans_done+0x144>)
    21be:	0143      	lsls	r3, r0, #5
    21c0:	18d1      	adds	r1, r2, r3
    21c2:	2000      	movs	r0, #0
    21c4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    21c6:	5cd3      	ldrb	r3, [r2, r3]
    21c8:	b173      	cbz	r3, 21e8 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    21ca:	4b48      	ldr	r3, [pc, #288]	; (22ec <_usb_d_cb_trans_done+0x144>)
    21cc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    21d0:	2201      	movs	r2, #1
    21d2:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    21d4:	4845      	ldr	r0, [pc, #276]	; (22ec <_usb_d_cb_trans_done+0x144>)
    21d6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    21da:	69c3      	ldr	r3, [r0, #28]
    21dc:	463a      	mov	r2, r7
    21de:	78c1      	ldrb	r1, [r0, #3]
    21e0:	4630      	mov	r0, r6
    21e2:	4798      	blx	r3
}
    21e4:	b005      	add	sp, #20
    21e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    21e8:	788b      	ldrb	r3, [r1, #2]
    21ea:	2b03      	cmp	r3, #3
    21ec:	d00b      	beq.n	2206 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    21ee:	483f      	ldr	r0, [pc, #252]	; (22ec <_usb_d_cb_trans_done+0x144>)
    21f0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    21f4:	4614      	mov	r4, r2
    21f6:	69d3      	ldr	r3, [r2, #28]
    21f8:	320c      	adds	r2, #12
    21fa:	2100      	movs	r1, #0
    21fc:	7860      	ldrb	r0, [r4, #1]
    21fe:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2200:	2302      	movs	r3, #2
    2202:	70a3      	strb	r3, [r4, #2]
    2204:	e7ee      	b.n	21e4 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2206:	460b      	mov	r3, r1
    2208:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    220c:	460a      	mov	r2, r1
    220e:	69ce      	ldr	r6, [r1, #28]
    2210:	320c      	adds	r2, #12
    2212:	2101      	movs	r1, #1
    2214:	7858      	ldrb	r0, [r3, #1]
    2216:	47b0      	blx	r6
		if (err) {
    2218:	b1a0      	cbz	r0, 2244 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    221a:	4b34      	ldr	r3, [pc, #208]	; (22ec <_usb_d_cb_trans_done+0x144>)
    221c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2220:	2205      	movs	r2, #5
    2222:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2224:	2202      	movs	r2, #2
    2226:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2228:	2d00      	cmp	r5, #0
    222a:	db09      	blt.n	2240 <_usb_d_cb_trans_done+0x98>
    222c:	482f      	ldr	r0, [pc, #188]	; (22ec <_usb_d_cb_trans_done+0x144>)
    222e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2232:	7840      	ldrb	r0, [r0, #1]
    2234:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    2238:	2101      	movs	r1, #1
    223a:	4b2d      	ldr	r3, [pc, #180]	; (22f0 <_usb_d_cb_trans_done+0x148>)
    223c:	4798      	blx	r3
    223e:	e7d1      	b.n	21e4 <_usb_d_cb_trans_done+0x3c>
    2240:	7858      	ldrb	r0, [r3, #1]
    2242:	e7f9      	b.n	2238 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2244:	4829      	ldr	r0, [pc, #164]	; (22ec <_usb_d_cb_trans_done+0x144>)
    2246:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    224a:	2304      	movs	r3, #4
    224c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    224e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    2250:	2200      	movs	r2, #0
    2252:	9201      	str	r2, [sp, #4]
    2254:	9202      	str	r2, [sp, #8]
    2256:	4295      	cmp	r5, r2
    2258:	bfac      	ite	ge
    225a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    225e:	f003 030f 	andlt.w	r3, r3, #15
    2262:	f88d 300c 	strb.w	r3, [sp, #12]
    2266:	2301      	movs	r3, #1
    2268:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    226c:	a801      	add	r0, sp, #4
    226e:	4b21      	ldr	r3, [pc, #132]	; (22f4 <_usb_d_cb_trans_done+0x14c>)
    2270:	4798      	blx	r3
    2272:	e7b7      	b.n	21e4 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    2274:	2d01      	cmp	r5, #1
    2276:	d00a      	beq.n	228e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    2278:	2d02      	cmp	r5, #2
    227a:	d01c      	beq.n	22b6 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    227c:	2d03      	cmp	r5, #3
    227e:	d02a      	beq.n	22d6 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2280:	4b1a      	ldr	r3, [pc, #104]	; (22ec <_usb_d_cb_trans_done+0x144>)
    2282:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    2286:	2206      	movs	r2, #6
    2288:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    228a:	70da      	strb	r2, [r3, #3]
    228c:	e7a2      	b.n	21d4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    228e:	4a17      	ldr	r2, [pc, #92]	; (22ec <_usb_d_cb_trans_done+0x144>)
    2290:	0143      	lsls	r3, r0, #5
    2292:	18d1      	adds	r1, r2, r3
    2294:	2002      	movs	r0, #2
    2296:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2298:	5cd3      	ldrb	r3, [r2, r3]
    229a:	b12b      	cbz	r3, 22a8 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    229c:	4b13      	ldr	r3, [pc, #76]	; (22ec <_usb_d_cb_trans_done+0x144>)
    229e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22a2:	2205      	movs	r2, #5
    22a4:	709a      	strb	r2, [r3, #2]
    22a6:	e795      	b.n	21d4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    22a8:	460b      	mov	r3, r1
    22aa:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    22ac:	2100      	movs	r1, #0
    22ae:	4630      	mov	r0, r6
    22b0:	4b0f      	ldr	r3, [pc, #60]	; (22f0 <_usb_d_cb_trans_done+0x148>)
    22b2:	4798      	blx	r3
    22b4:	e78e      	b.n	21d4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    22b6:	4a0d      	ldr	r2, [pc, #52]	; (22ec <_usb_d_cb_trans_done+0x144>)
    22b8:	0143      	lsls	r3, r0, #5
    22ba:	18d1      	adds	r1, r2, r3
    22bc:	2004      	movs	r0, #4
    22be:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    22c0:	5cd3      	ldrb	r3, [r2, r3]
    22c2:	b12b      	cbz	r3, 22d0 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    22c4:	4b09      	ldr	r3, [pc, #36]	; (22ec <_usb_d_cb_trans_done+0x144>)
    22c6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22ca:	2201      	movs	r2, #1
    22cc:	709a      	strb	r2, [r3, #2]
    22ce:	e781      	b.n	21d4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    22d0:	2302      	movs	r3, #2
    22d2:	708b      	strb	r3, [r1, #2]
			return;
    22d4:	e786      	b.n	21e4 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <_usb_d_cb_trans_done+0x144>)
    22d8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    22dc:	2200      	movs	r2, #0
    22de:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    22e0:	2205      	movs	r2, #5
    22e2:	70da      	strb	r2, [r3, #3]
    22e4:	e776      	b.n	21d4 <_usb_d_cb_trans_done+0x2c>
    22e6:	bf00      	nop
    22e8:	0000212d 	.word	0x0000212d
    22ec:	200005b4 	.word	0x200005b4
    22f0:	00003fed 	.word	0x00003fed
    22f4:	00004195 	.word	0x00004195

000022f8 <usb_d_cb_trans_setup>:
{
    22f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22fc:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    22fe:	4b1c      	ldr	r3, [pc, #112]	; (2370 <usb_d_cb_trans_setup+0x78>)
    2300:	4798      	blx	r3
    2302:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2304:	4c1b      	ldr	r4, [pc, #108]	; (2374 <usb_d_cb_trans_setup+0x7c>)
    2306:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    230a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    230c:	4621      	mov	r1, r4
    230e:	4628      	mov	r0, r5
    2310:	4b19      	ldr	r3, [pc, #100]	; (2378 <usb_d_cb_trans_setup+0x80>)
    2312:	4798      	blx	r3
	if (n != 8) {
    2314:	b2c0      	uxtb	r0, r0
    2316:	2808      	cmp	r0, #8
    2318:	d009      	beq.n	232e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    231a:	2101      	movs	r1, #1
    231c:	4628      	mov	r0, r5
    231e:	4c17      	ldr	r4, [pc, #92]	; (237c <usb_d_cb_trans_setup+0x84>)
    2320:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2322:	2101      	movs	r1, #1
    2324:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    2328:	47a0      	blx	r4
		return;
    232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    232e:	2100      	movs	r1, #0
    2330:	4628      	mov	r0, r5
    2332:	4f12      	ldr	r7, [pc, #72]	; (237c <usb_d_cb_trans_setup+0x84>)
    2334:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2336:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    233a:	2100      	movs	r1, #0
    233c:	4640      	mov	r0, r8
    233e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2340:	4b0c      	ldr	r3, [pc, #48]	; (2374 <usb_d_cb_trans_setup+0x7c>)
    2342:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2346:	2201      	movs	r2, #1
    2348:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    234a:	695b      	ldr	r3, [r3, #20]
    234c:	4621      	mov	r1, r4
    234e:	4628      	mov	r0, r5
    2350:	4798      	blx	r3
    2352:	b108      	cbz	r0, 2358 <usb_d_cb_trans_setup+0x60>
    2354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2358:	4b06      	ldr	r3, [pc, #24]	; (2374 <usb_d_cb_trans_setup+0x7c>)
    235a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    235e:	2305      	movs	r3, #5
    2360:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2362:	2101      	movs	r1, #1
    2364:	4628      	mov	r0, r5
    2366:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2368:	2101      	movs	r1, #1
    236a:	4640      	mov	r0, r8
    236c:	47b8      	blx	r7
    236e:	e7f1      	b.n	2354 <usb_d_cb_trans_setup+0x5c>
    2370:	0000212d 	.word	0x0000212d
    2374:	200005b4 	.word	0x200005b4
    2378:	00004135 	.word	0x00004135
    237c:	00003fed 	.word	0x00003fed

00002380 <usb_d_init>:

int32_t usb_d_init(void)
{
    2380:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2382:	4b11      	ldr	r3, [pc, #68]	; (23c8 <usb_d_init+0x48>)
    2384:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    2386:	2800      	cmp	r0, #0
    2388:	db1c      	blt.n	23c4 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    238a:	4c10      	ldr	r4, [pc, #64]	; (23cc <usb_d_init+0x4c>)
    238c:	2280      	movs	r2, #128	; 0x80
    238e:	2100      	movs	r1, #0
    2390:	4620      	mov	r0, r4
    2392:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <usb_d_init+0x50>)
    2394:	4798      	blx	r3
    2396:	4623      	mov	r3, r4
    2398:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    239c:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    239e:	4a0d      	ldr	r2, [pc, #52]	; (23d4 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    23a0:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    23a2:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    23a4:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    23a6:	61da      	str	r2, [r3, #28]
    23a8:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    23aa:	4283      	cmp	r3, r0
    23ac:	d1f8      	bne.n	23a0 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    23ae:	490a      	ldr	r1, [pc, #40]	; (23d8 <usb_d_init+0x58>)
    23b0:	2000      	movs	r0, #0
    23b2:	4c0a      	ldr	r4, [pc, #40]	; (23dc <usb_d_init+0x5c>)
    23b4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    23b6:	490a      	ldr	r1, [pc, #40]	; (23e0 <usb_d_init+0x60>)
    23b8:	2001      	movs	r0, #1
    23ba:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    23bc:	4909      	ldr	r1, [pc, #36]	; (23e4 <usb_d_init+0x64>)
    23be:	2002      	movs	r0, #2
    23c0:	47a0      	blx	r4
	return ERR_NONE;
    23c2:	2000      	movs	r0, #0
}
    23c4:	bd10      	pop	{r4, pc}
    23c6:	bf00      	nop
    23c8:	000039e1 	.word	0x000039e1
    23cc:	200005b4 	.word	0x200005b4
    23d0:	000050c5 	.word	0x000050c5
    23d4:	00002171 	.word	0x00002171
    23d8:	000022f9 	.word	0x000022f9
    23dc:	00004399 	.word	0x00004399
    23e0:	00002175 	.word	0x00002175
    23e4:	000021a9 	.word	0x000021a9

000023e8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    23e8:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    23ea:	4b01      	ldr	r3, [pc, #4]	; (23f0 <usb_d_register_callback+0x8>)
    23ec:	4798      	blx	r3
    23ee:	bd08      	pop	{r3, pc}
    23f0:	00004375 	.word	0x00004375

000023f4 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    23f4:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    23f6:	4b01      	ldr	r3, [pc, #4]	; (23fc <usb_d_enable+0x8>)
    23f8:	4798      	blx	r3
}
    23fa:	bd08      	pop	{r3, pc}
    23fc:	00003add 	.word	0x00003add

00002400 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2400:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    2402:	4b01      	ldr	r3, [pc, #4]	; (2408 <usb_d_attach+0x8>)
    2404:	4798      	blx	r3
    2406:	bd08      	pop	{r3, pc}
    2408:	00003b49 	.word	0x00003b49

0000240c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    240c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    240e:	4b01      	ldr	r3, [pc, #4]	; (2414 <usb_d_set_address+0x8>)
    2410:	4798      	blx	r3
    2412:	bd08      	pop	{r3, pc}
    2414:	00003b5b 	.word	0x00003b5b

00002418 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    241a:	4606      	mov	r6, r0
    241c:	460c      	mov	r4, r1
    241e:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2420:	4b0f      	ldr	r3, [pc, #60]	; (2460 <usb_d_ep_init+0x48>)
    2422:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2424:	2800      	cmp	r0, #0
    2426:	da14      	bge.n	2452 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2428:	20ff      	movs	r0, #255	; 0xff
    242a:	4b0d      	ldr	r3, [pc, #52]	; (2460 <usb_d_ep_init+0x48>)
    242c:	4798      	blx	r3
		if (ep_index < 0) {
    242e:	1e05      	subs	r5, r0, #0
    2430:	db12      	blt.n	2458 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2432:	463a      	mov	r2, r7
    2434:	4621      	mov	r1, r4
    2436:	4630      	mov	r0, r6
    2438:	4b0a      	ldr	r3, [pc, #40]	; (2464 <usb_d_ep_init+0x4c>)
    243a:	4798      	blx	r3
	if (rc < 0) {
    243c:	2800      	cmp	r0, #0
    243e:	db0d      	blt.n	245c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2440:	4b09      	ldr	r3, [pc, #36]	; (2468 <usb_d_ep_init+0x50>)
    2442:	0168      	lsls	r0, r5, #5
    2444:	181a      	adds	r2, r3, r0
    2446:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2448:	f004 0403 	and.w	r4, r4, #3
    244c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    244e:	2000      	movs	r0, #0
    2450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2452:	f06f 0013 	mvn.w	r0, #19
    2456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    2458:	f06f 0014 	mvn.w	r0, #20
}
    245c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    245e:	bf00      	nop
    2460:	0000212d 	.word	0x0000212d
    2464:	00003b69 	.word	0x00003b69
    2468:	200005b4 	.word	0x200005b4

0000246c <usb_d_ep0_init>:
{
    246c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    246e:	4602      	mov	r2, r0
    2470:	2100      	movs	r1, #0
    2472:	4608      	mov	r0, r1
    2474:	4b01      	ldr	r3, [pc, #4]	; (247c <usb_d_ep0_init+0x10>)
    2476:	4798      	blx	r3
}
    2478:	bd08      	pop	{r3, pc}
    247a:	bf00      	nop
    247c:	00002419 	.word	0x00002419

00002480 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2480:	b538      	push	{r3, r4, r5, lr}
    2482:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2484:	4b06      	ldr	r3, [pc, #24]	; (24a0 <usb_d_ep_deinit+0x20>)
    2486:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2488:	1e04      	subs	r4, r0, #0
    248a:	db07      	blt.n	249c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    248c:	4628      	mov	r0, r5
    248e:	4b05      	ldr	r3, [pc, #20]	; (24a4 <usb_d_ep_deinit+0x24>)
    2490:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2492:	4805      	ldr	r0, [pc, #20]	; (24a8 <usb_d_ep_deinit+0x28>)
    2494:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2498:	23ff      	movs	r3, #255	; 0xff
    249a:	7043      	strb	r3, [r0, #1]
    249c:	bd38      	pop	{r3, r4, r5, pc}
    249e:	bf00      	nop
    24a0:	0000212d 	.word	0x0000212d
    24a4:	00003c81 	.word	0x00003c81
    24a8:	200005b4 	.word	0x200005b4

000024ac <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    24ac:	b538      	push	{r3, r4, r5, lr}
    24ae:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    24b0:	4b0e      	ldr	r3, [pc, #56]	; (24ec <usb_d_ep_enable+0x40>)
    24b2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    24b4:	1e04      	subs	r4, r0, #0
    24b6:	db16      	blt.n	24e6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    24b8:	0163      	lsls	r3, r4, #5
    24ba:	4a0d      	ldr	r2, [pc, #52]	; (24f0 <usb_d_ep_enable+0x44>)
    24bc:	5cd3      	ldrb	r3, [r2, r3]
    24be:	2b00      	cmp	r3, #0
    24c0:	bf0c      	ite	eq
    24c2:	2202      	moveq	r2, #2
    24c4:	2201      	movne	r2, #1
    24c6:	4b0a      	ldr	r3, [pc, #40]	; (24f0 <usb_d_ep_enable+0x44>)
    24c8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    24cc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    24ce:	4628      	mov	r0, r5
    24d0:	4b08      	ldr	r3, [pc, #32]	; (24f4 <usb_d_ep_enable+0x48>)
    24d2:	4798      	blx	r3
	if (rc < 0) {
    24d4:	2800      	cmp	r0, #0
    24d6:	db00      	blt.n	24da <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    24d8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    24da:	4b05      	ldr	r3, [pc, #20]	; (24f0 <usb_d_ep_enable+0x44>)
    24dc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    24e0:	2300      	movs	r3, #0
    24e2:	70a3      	strb	r3, [r4, #2]
    24e4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    24e6:	f06f 0011 	mvn.w	r0, #17
    24ea:	e7f5      	b.n	24d8 <usb_d_ep_enable+0x2c>
    24ec:	0000212d 	.word	0x0000212d
    24f0:	200005b4 	.word	0x200005b4
    24f4:	00003d45 	.word	0x00003d45

000024f8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    24f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24fc:	b086      	sub	sp, #24
    24fe:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2500:	7a07      	ldrb	r7, [r0, #8]
    2502:	4638      	mov	r0, r7
    2504:	4b3f      	ldr	r3, [pc, #252]	; (2604 <usb_d_ep_transfer+0x10c>)
    2506:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2508:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    250a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    250e:	1e06      	subs	r6, r0, #0
    2510:	db72      	blt.n	25f8 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    2512:	a804      	add	r0, sp, #16
    2514:	4b3c      	ldr	r3, [pc, #240]	; (2608 <usb_d_ep_transfer+0x110>)
    2516:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2518:	4b3c      	ldr	r3, [pc, #240]	; (260c <usb_d_ep_transfer+0x114>)
    251a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    251e:	789b      	ldrb	r3, [r3, #2]
    2520:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    2524:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2528:	b2db      	uxtb	r3, r3
    252a:	2b01      	cmp	r3, #1
    252c:	d011      	beq.n	2552 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    252e:	a804      	add	r0, sp, #16
    2530:	4b37      	ldr	r3, [pc, #220]	; (2610 <usb_d_ep_transfer+0x118>)
    2532:	4798      	blx	r3
		switch (state) {
    2534:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2538:	b2db      	uxtb	r3, r3
    253a:	2b05      	cmp	r3, #5
    253c:	d05f      	beq.n	25fe <usb_d_ep_transfer+0x106>
    253e:	2b06      	cmp	r3, #6
    2540:	d023      	beq.n	258a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    2542:	2b00      	cmp	r3, #0
    2544:	bf0c      	ite	eq
    2546:	f06f 0012 	mvneq.w	r0, #18
    254a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    254c:	b006      	add	sp, #24
    254e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2552:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 260c <usb_d_ep_transfer+0x114>
    2556:	ea4f 1946 	mov.w	r9, r6, lsl #5
    255a:	eb0a 0309 	add.w	r3, sl, r9
    255e:	2203      	movs	r2, #3
    2560:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2562:	a804      	add	r0, sp, #16
    2564:	4b2a      	ldr	r3, [pc, #168]	; (2610 <usb_d_ep_transfer+0x118>)
    2566:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2568:	f81a 3009 	ldrb.w	r3, [sl, r9]
    256c:	b183      	cbz	r3, 2590 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    256e:	7a22      	ldrb	r2, [r4, #8]
    2570:	3500      	adds	r5, #0
    2572:	bf18      	it	ne
    2574:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    2576:	6823      	ldr	r3, [r4, #0]
    2578:	9301      	str	r3, [sp, #4]
    257a:	f8cd 8008 	str.w	r8, [sp, #8]
    257e:	f017 0f80 	tst.w	r7, #128	; 0x80
    2582:	d119      	bne.n	25b8 <usb_d_ep_transfer+0xc0>
    2584:	f002 030f 	and.w	r3, r2, #15
    2588:	e018      	b.n	25bc <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    258a:	f06f 000f 	mvn.w	r0, #15
    258e:	e7dd      	b.n	254c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2590:	4b1e      	ldr	r3, [pc, #120]	; (260c <usb_d_ep_transfer+0x114>)
    2592:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2596:	7cda      	ldrb	r2, [r3, #19]
    2598:	7c9d      	ldrb	r5, [r3, #18]
    259a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    259e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    25a0:	b9a5      	cbnz	r5, 25cc <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    25a2:	4b1a      	ldr	r3, [pc, #104]	; (260c <usb_d_ep_transfer+0x114>)
    25a4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    25a8:	2304      	movs	r3, #4
    25aa:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    25ac:	2300      	movs	r3, #0
			zlp                 = true;
    25ae:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25b0:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    25b2:	6821      	ldr	r1, [r4, #0]
    25b4:	9101      	str	r1, [sp, #4]
    25b6:	9302      	str	r3, [sp, #8]
    25b8:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    25bc:	f88d 300c 	strb.w	r3, [sp, #12]
    25c0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    25c4:	a801      	add	r0, sp, #4
    25c6:	4b13      	ldr	r3, [pc, #76]	; (2614 <usb_d_ep_transfer+0x11c>)
    25c8:	4798      	blx	r3
	return rc;
    25ca:	e7bf      	b.n	254c <usb_d_ep_transfer+0x54>
    25cc:	4643      	mov	r3, r8
    25ce:	45a8      	cmp	r8, r5
    25d0:	bf28      	it	cs
    25d2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    25d4:	4a0d      	ldr	r2, [pc, #52]	; (260c <usb_d_ep_transfer+0x114>)
    25d6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    25da:	f996 200c 	ldrsb.w	r2, [r6, #12]
    25de:	2a00      	cmp	r2, #0
    25e0:	db05      	blt.n	25ee <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25e2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    25e4:	6821      	ldr	r1, [r4, #0]
    25e6:	9101      	str	r1, [sp, #4]
    25e8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25ea:	2500      	movs	r5, #0
    25ec:	e7ca      	b.n	2584 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    25ee:	429d      	cmp	r5, r3
    25f0:	bf94      	ite	ls
    25f2:	2500      	movls	r5, #0
    25f4:	2501      	movhi	r5, #1
    25f6:	e7db      	b.n	25b0 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    25f8:	f06f 0011 	mvn.w	r0, #17
    25fc:	e7a6      	b.n	254c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    25fe:	2002      	movs	r0, #2
    2600:	e7a4      	b.n	254c <usb_d_ep_transfer+0x54>
    2602:	bf00      	nop
    2604:	0000212d 	.word	0x0000212d
    2608:	00001c41 	.word	0x00001c41
    260c:	200005b4 	.word	0x200005b4
    2610:	00001c4f 	.word	0x00001c4f
    2614:	00004195 	.word	0x00004195

00002618 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2618:	b538      	push	{r3, r4, r5, lr}
    261a:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    261c:	b141      	cbz	r1, 2630 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    261e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2620:	bf0c      	ite	eq
    2622:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2624:	2102      	movne	r1, #2
    2626:	4b13      	ldr	r3, [pc, #76]	; (2674 <usb_d_ep_halt+0x5c>)
    2628:	4798      	blx	r3
    262a:	4603      	mov	r3, r0
	}
}
    262c:	4618      	mov	r0, r3
    262e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2630:	4b11      	ldr	r3, [pc, #68]	; (2678 <usb_d_ep_halt+0x60>)
    2632:	4798      	blx	r3
	if (ep_index < 0) {
    2634:	1e05      	subs	r5, r0, #0
    2636:	db19      	blt.n	266c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2638:	2102      	movs	r1, #2
    263a:	4620      	mov	r0, r4
    263c:	4b0d      	ldr	r3, [pc, #52]	; (2674 <usb_d_ep_halt+0x5c>)
    263e:	4798      	blx	r3
    2640:	4603      	mov	r3, r0
    2642:	2800      	cmp	r0, #0
    2644:	d0f2      	beq.n	262c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2646:	2100      	movs	r1, #0
    2648:	4620      	mov	r0, r4
    264a:	4b0a      	ldr	r3, [pc, #40]	; (2674 <usb_d_ep_halt+0x5c>)
    264c:	4798      	blx	r3
		if (rc < 0) {
    264e:	1e03      	subs	r3, r0, #0
    2650:	dbec      	blt.n	262c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2652:	4b0a      	ldr	r3, [pc, #40]	; (267c <usb_d_ep_halt+0x64>)
    2654:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2658:	2201      	movs	r2, #1
    265a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    265c:	2103      	movs	r1, #3
    265e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2660:	69db      	ldr	r3, [r3, #28]
    2662:	2200      	movs	r2, #0
    2664:	4620      	mov	r0, r4
    2666:	4798      	blx	r3
	return ERR_NONE;
    2668:	2300      	movs	r3, #0
    266a:	e7df      	b.n	262c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    266c:	f06f 0311 	mvn.w	r3, #17
    2670:	e7dc      	b.n	262c <usb_d_ep_halt+0x14>
    2672:	bf00      	nop
    2674:	00003fed 	.word	0x00003fed
    2678:	0000212d 	.word	0x0000212d
    267c:	200005b4 	.word	0x200005b4

00002680 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2680:	b538      	push	{r3, r4, r5, lr}
    2682:	460d      	mov	r5, r1
    2684:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2686:	4b0e      	ldr	r3, [pc, #56]	; (26c0 <usb_d_ep_register_callback+0x40>)
    2688:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    268a:	4b0e      	ldr	r3, [pc, #56]	; (26c4 <usb_d_ep_register_callback+0x44>)
    268c:	2c00      	cmp	r4, #0
    268e:	bf08      	it	eq
    2690:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    2692:	2800      	cmp	r0, #0
    2694:	db13      	blt.n	26be <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    2696:	2d01      	cmp	r5, #1
    2698:	d008      	beq.n	26ac <usb_d_ep_register_callback+0x2c>
    269a:	b115      	cbz	r5, 26a2 <usb_d_ep_register_callback+0x22>
    269c:	2d02      	cmp	r5, #2
    269e:	d00a      	beq.n	26b6 <usb_d_ep_register_callback+0x36>
    26a0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    26a2:	4b09      	ldr	r3, [pc, #36]	; (26c8 <usb_d_ep_register_callback+0x48>)
    26a4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    26a8:	6144      	str	r4, [r0, #20]
		break;
    26aa:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    26ac:	4b06      	ldr	r3, [pc, #24]	; (26c8 <usb_d_ep_register_callback+0x48>)
    26ae:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    26b2:	6184      	str	r4, [r0, #24]
		break;
    26b4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    26b6:	4b04      	ldr	r3, [pc, #16]	; (26c8 <usb_d_ep_register_callback+0x48>)
    26b8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    26bc:	61c4      	str	r4, [r0, #28]
    26be:	bd38      	pop	{r3, r4, r5, pc}
    26c0:	0000212d 	.word	0x0000212d
    26c4:	00002171 	.word	0x00002171
    26c8:	200005b4 	.word	0x200005b4

000026cc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    26cc:	b900      	cbnz	r0, 26d0 <assert+0x4>
		__asm("BKPT #0");
    26ce:	be00      	bkpt	0x0000
    26d0:	4770      	bx	lr

000026d2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    26d2:	6803      	ldr	r3, [r0, #0]
    26d4:	b14b      	cbz	r3, 26ea <is_list_element+0x18>
		if (it == element) {
    26d6:	428b      	cmp	r3, r1
    26d8:	d009      	beq.n	26ee <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    26da:	681b      	ldr	r3, [r3, #0]
    26dc:	b11b      	cbz	r3, 26e6 <is_list_element+0x14>
		if (it == element) {
    26de:	4299      	cmp	r1, r3
    26e0:	d1fb      	bne.n	26da <is_list_element+0x8>
			return true;
    26e2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    26e4:	4770      	bx	lr
	return false;
    26e6:	2000      	movs	r0, #0
    26e8:	4770      	bx	lr
    26ea:	2000      	movs	r0, #0
    26ec:	4770      	bx	lr
			return true;
    26ee:	2001      	movs	r0, #1
    26f0:	4770      	bx	lr
	...

000026f4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    26f4:	b538      	push	{r3, r4, r5, lr}
    26f6:	4604      	mov	r4, r0
    26f8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <list_insert_as_head+0x20>)
    26fc:	4798      	blx	r3
    26fe:	f080 0001 	eor.w	r0, r0, #1
    2702:	2239      	movs	r2, #57	; 0x39
    2704:	4904      	ldr	r1, [pc, #16]	; (2718 <list_insert_as_head+0x24>)
    2706:	b2c0      	uxtb	r0, r0
    2708:	4b04      	ldr	r3, [pc, #16]	; (271c <list_insert_as_head+0x28>)
    270a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    270c:	6823      	ldr	r3, [r4, #0]
    270e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2710:	6025      	str	r5, [r4, #0]
    2712:	bd38      	pop	{r3, r4, r5, pc}
    2714:	000026d3 	.word	0x000026d3
    2718:	00005b44 	.word	0x00005b44
    271c:	000026cd 	.word	0x000026cd

00002720 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2720:	6803      	ldr	r3, [r0, #0]
    2722:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2724:	6001      	str	r1, [r0, #0]
    2726:	4770      	bx	lr

00002728 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	4605      	mov	r5, r0
    272c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    272e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2730:	4b0a      	ldr	r3, [pc, #40]	; (275c <list_insert_at_end+0x34>)
    2732:	4798      	blx	r3
    2734:	f080 0001 	eor.w	r0, r0, #1
    2738:	224f      	movs	r2, #79	; 0x4f
    273a:	4909      	ldr	r1, [pc, #36]	; (2760 <list_insert_at_end+0x38>)
    273c:	b2c0      	uxtb	r0, r0
    273e:	4b09      	ldr	r3, [pc, #36]	; (2764 <list_insert_at_end+0x3c>)
    2740:	4798      	blx	r3

	if (!list->head) {
    2742:	682b      	ldr	r3, [r5, #0]
    2744:	b91b      	cbnz	r3, 274e <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    2746:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2748:	6033      	str	r3, [r6, #0]
		return;
    274a:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    274c:	461c      	mov	r4, r3
	while (it->next) {
    274e:	6823      	ldr	r3, [r4, #0]
    2750:	2b00      	cmp	r3, #0
    2752:	d1fb      	bne.n	274c <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    2754:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    2756:	6033      	str	r3, [r6, #0]
    2758:	bd70      	pop	{r4, r5, r6, pc}
    275a:	bf00      	nop
    275c:	000026d3 	.word	0x000026d3
    2760:	00005b44 	.word	0x00005b44
    2764:	000026cd 	.word	0x000026cd

00002768 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2768:	6803      	ldr	r3, [r0, #0]
    276a:	b10b      	cbz	r3, 2770 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    276c:	681a      	ldr	r2, [r3, #0]
    276e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2770:	4618      	mov	r0, r3
    2772:	4770      	bx	lr

00002774 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    2774:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    2776:	f013 0f01 	tst.w	r3, #1
    277a:	d11b      	bne.n	27b4 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    277c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    277e:	f013 0f03 	tst.w	r3, #3
    2782:	d1fb      	bne.n	277c <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    2784:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    2786:	f013 0f02 	tst.w	r3, #2
    278a:	d00d      	beq.n	27a8 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    278c:	8803      	ldrh	r3, [r0, #0]
    278e:	f023 0302 	bic.w	r3, r3, #2
    2792:	041b      	lsls	r3, r3, #16
    2794:	0c1b      	lsrs	r3, r3, #16
    2796:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2798:	6b03      	ldr	r3, [r0, #48]	; 0x30
    279a:	f013 0f03 	tst.w	r3, #3
    279e:	d1fb      	bne.n	2798 <_adc_init+0x24>
    27a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27a2:	f013 0f02 	tst.w	r3, #2
    27a6:	d1fb      	bne.n	27a0 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    27a8:	2301      	movs	r3, #1
    27aa:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    27ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27ae:	f013 0f03 	tst.w	r3, #3
    27b2:	d1fb      	bne.n	27ac <_adc_init+0x38>
    27b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27b6:	f013 0f01 	tst.w	r3, #1
    27ba:	d1fb      	bne.n	27b4 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    27bc:	2316      	movs	r3, #22
    27be:	4a37      	ldr	r2, [pc, #220]	; (289c <_adc_init+0x128>)
    27c0:	fb03 2301 	mla	r3, r3, r1, r2
    27c4:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    27c6:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    27c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    27ce:	2b00      	cmp	r3, #0
    27d0:	d1fa      	bne.n	27c8 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    27d2:	2316      	movs	r3, #22
    27d4:	4a31      	ldr	r2, [pc, #196]	; (289c <_adc_init+0x128>)
    27d6:	fb03 2301 	mla	r3, r3, r1, r2
    27da:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    27dc:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    27de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    27e4:	2b00      	cmp	r3, #0
    27e6:	d1fa      	bne.n	27de <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    27e8:	2316      	movs	r3, #22
    27ea:	4a2c      	ldr	r2, [pc, #176]	; (289c <_adc_init+0x128>)
    27ec:	fb03 2301 	mla	r3, r3, r1, r2
    27f0:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    27f2:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    27f4:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    27f6:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    27f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    27fe:	2b00      	cmp	r3, #0
    2800:	d1fa      	bne.n	27f8 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2802:	2316      	movs	r3, #22
    2804:	4a25      	ldr	r2, [pc, #148]	; (289c <_adc_init+0x128>)
    2806:	fb03 2301 	mla	r3, r3, r1, r2
    280a:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    280c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    280e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2810:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2814:	2b00      	cmp	r3, #0
    2816:	d1fa      	bne.n	280e <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2818:	2316      	movs	r3, #22
    281a:	4a20      	ldr	r2, [pc, #128]	; (289c <_adc_init+0x128>)
    281c:	fb03 2301 	mla	r3, r3, r1, r2
    2820:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2822:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2824:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2826:	f3c3 030b 	ubfx	r3, r3, #0, #12
    282a:	2b00      	cmp	r3, #0
    282c:	d1fa      	bne.n	2824 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    282e:	2316      	movs	r3, #22
    2830:	4a1a      	ldr	r2, [pc, #104]	; (289c <_adc_init+0x128>)
    2832:	fb03 2301 	mla	r3, r3, r1, r2
    2836:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2838:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    283a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    283c:	f013 0f80 	tst.w	r3, #128	; 0x80
    2840:	d1fb      	bne.n	283a <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2842:	2316      	movs	r3, #22
    2844:	4a15      	ldr	r2, [pc, #84]	; (289c <_adc_init+0x128>)
    2846:	fb03 2301 	mla	r3, r3, r1, r2
    284a:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    284c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    284e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2850:	f413 7f80 	tst.w	r3, #256	; 0x100
    2854:	d1fb      	bne.n	284e <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2856:	2316      	movs	r3, #22
    2858:	4a10      	ldr	r2, [pc, #64]	; (289c <_adc_init+0x128>)
    285a:	fb03 2301 	mla	r3, r3, r1, r2
    285e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2860:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2862:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2864:	f413 7f00 	tst.w	r3, #512	; 0x200
    2868:	d1fb      	bne.n	2862 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    286a:	2316      	movs	r3, #22
    286c:	4a0b      	ldr	r2, [pc, #44]	; (289c <_adc_init+0x128>)
    286e:	fb03 2301 	mla	r3, r3, r1, r2
    2872:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2874:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2876:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2878:	f413 6f80 	tst.w	r3, #1024	; 0x400
    287c:	d1fb      	bne.n	2876 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    287e:	2216      	movs	r2, #22
    2880:	4b06      	ldr	r3, [pc, #24]	; (289c <_adc_init+0x128>)
    2882:	fb02 3101 	mla	r1, r2, r1, r3
    2886:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2888:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    288a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    288c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    288e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2890:	f013 0f03 	tst.w	r3, #3
    2894:	d1fb      	bne.n	288e <_adc_init+0x11a>

	return ERR_NONE;
}
    2896:	2000      	movs	r0, #0
    2898:	4770      	bx	lr
    289a:	bf00      	nop
    289c:	00005b64 	.word	0x00005b64

000028a0 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    28a0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    28a4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    28a8:	f3c0 2087 	ubfx	r0, r0, #10, #8
    28ac:	b138      	cbz	r0, 28be <_adc_get_regs+0x1e>
{
    28ae:	b508      	push	{r3, lr}
	ASSERT(false);
    28b0:	2288      	movs	r2, #136	; 0x88
    28b2:	4904      	ldr	r1, [pc, #16]	; (28c4 <_adc_get_regs+0x24>)
    28b4:	2000      	movs	r0, #0
    28b6:	4b04      	ldr	r3, [pc, #16]	; (28c8 <_adc_get_regs+0x28>)
    28b8:	4798      	blx	r3
}
    28ba:	2000      	movs	r0, #0
    28bc:	bd08      	pop	{r3, pc}
    28be:	2000      	movs	r0, #0
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop
    28c4:	00005b7c 	.word	0x00005b7c
    28c8:	000026cd 	.word	0x000026cd

000028cc <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    28cc:	b538      	push	{r3, r4, r5, lr}
    28ce:	460c      	mov	r4, r1
	ASSERT(device);
    28d0:	4605      	mov	r5, r0
    28d2:	22ce      	movs	r2, #206	; 0xce
    28d4:	4907      	ldr	r1, [pc, #28]	; (28f4 <_adc_sync_init+0x28>)
    28d6:	3000      	adds	r0, #0
    28d8:	bf18      	it	ne
    28da:	2001      	movne	r0, #1
    28dc:	4b06      	ldr	r3, [pc, #24]	; (28f8 <_adc_sync_init+0x2c>)
    28de:	4798      	blx	r3

	device->hw = hw;
    28e0:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    28e2:	4620      	mov	r0, r4
    28e4:	4b05      	ldr	r3, [pc, #20]	; (28fc <_adc_sync_init+0x30>)
    28e6:	4798      	blx	r3
    28e8:	4601      	mov	r1, r0
    28ea:	4620      	mov	r0, r4
    28ec:	4b04      	ldr	r3, [pc, #16]	; (2900 <_adc_sync_init+0x34>)
    28ee:	4798      	blx	r3
}
    28f0:	bd38      	pop	{r3, r4, r5, pc}
    28f2:	bf00      	nop
    28f4:	00005b7c 	.word	0x00005b7c
    28f8:	000026cd 	.word	0x000026cd
    28fc:	000028a1 	.word	0x000028a1
    2900:	00002775 	.word	0x00002775

00002904 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2904:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    2908:	fb03 f000 	mul.w	r0, r3, r0
    290c:	4770      	bx	lr
	...

00002910 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2910:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2912:	4a11      	ldr	r2, [pc, #68]	; (2958 <_init_chip+0x48>)
    2914:	8813      	ldrh	r3, [r2, #0]
    2916:	b29b      	uxth	r3, r3
    2918:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    291a:	4b10      	ldr	r3, [pc, #64]	; (295c <_init_chip+0x4c>)
    291c:	4798      	blx	r3
	_oscctrl_init_sources();
    291e:	4b10      	ldr	r3, [pc, #64]	; (2960 <_init_chip+0x50>)
    2920:	4798      	blx	r3
	_mclk_init();
    2922:	4b10      	ldr	r3, [pc, #64]	; (2964 <_init_chip+0x54>)
    2924:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2926:	4b10      	ldr	r3, [pc, #64]	; (2968 <_init_chip+0x58>)
    2928:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    292a:	f640 70ff 	movw	r0, #4095	; 0xfff
    292e:	4b0f      	ldr	r3, [pc, #60]	; (296c <_init_chip+0x5c>)
    2930:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    2932:	4b0f      	ldr	r3, [pc, #60]	; (2970 <_init_chip+0x60>)
    2934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2936:	62da      	str	r2, [r3, #44]	; 0x2c
    2938:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    293c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    2940:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    2944:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    2948:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    294c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    2950:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    2954:	bd08      	pop	{r3, pc}
    2956:	bf00      	nop
    2958:	41004000 	.word	0x41004000
    295c:	00002a39 	.word	0x00002a39
    2960:	00002a59 	.word	0x00002a59
    2964:	00002a2d 	.word	0x00002a2d
    2968:	00002a75 	.word	0x00002a75
    296c:	000029d1 	.word	0x000029d1
    2970:	41008000 	.word	0x41008000

00002974 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2974:	b430      	push	{r4, r5}
    2976:	4814      	ldr	r0, [pc, #80]	; (29c8 <_event_system_init+0x54>)
    2978:	f100 0543 	add.w	r5, r0, #67	; 0x43
    297c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    297e:	4c13      	ldr	r4, [pc, #76]	; (29cc <_event_system_init+0x58>)
    2980:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2982:	f813 1b01 	ldrb.w	r1, [r3], #1
    2986:	3248      	adds	r2, #72	; 0x48
    2988:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    298c:	42ab      	cmp	r3, r5
    298e:	d1f7      	bne.n	2980 <_event_system_init+0xc>
    2990:	480d      	ldr	r0, [pc, #52]	; (29c8 <_event_system_init+0x54>)
    2992:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2996:	3080      	adds	r0, #128	; 0x80
    2998:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    299a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    299e:	00ca      	lsls	r2, r1, #3
    29a0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    29a4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    29a8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    29aa:	f850 3f04 	ldr.w	r3, [r0, #4]!
    29ae:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    29b0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    29b4:	43db      	mvns	r3, r3
    29b6:	b2db      	uxtb	r3, r3
    29b8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    29bc:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    29be:	2920      	cmp	r1, #32
    29c0:	d1eb      	bne.n	299a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    29c2:	2000      	movs	r0, #0
    29c4:	bc30      	pop	{r4, r5}
    29c6:	4770      	bx	lr
    29c8:	00005b94 	.word	0x00005b94
    29cc:	4100e000 	.word	0x4100e000

000029d0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    29d0:	f010 0f01 	tst.w	r0, #1
    29d4:	d008      	beq.n	29e8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    29d6:	4a11      	ldr	r2, [pc, #68]	; (2a1c <_gclk_init_generators_by_fref+0x4c>)
    29d8:	4b11      	ldr	r3, [pc, #68]	; (2a20 <_gclk_init_generators_by_fref+0x50>)
    29da:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    29dc:	4619      	mov	r1, r3
    29de:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    29e2:	684b      	ldr	r3, [r1, #4]
    29e4:	4213      	tst	r3, r2
    29e6:	d1fc      	bne.n	29e2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    29e8:	f010 0f08 	tst.w	r0, #8
    29ec:	d008      	beq.n	2a00 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    29ee:	4a0d      	ldr	r2, [pc, #52]	; (2a24 <_gclk_init_generators_by_fref+0x54>)
    29f0:	4b0b      	ldr	r3, [pc, #44]	; (2a20 <_gclk_init_generators_by_fref+0x50>)
    29f2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    29f4:	4619      	mov	r1, r3
    29f6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    29fa:	684b      	ldr	r3, [r1, #4]
    29fc:	4213      	tst	r3, r2
    29fe:	d1fc      	bne.n	29fa <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2a00:	f010 0f10 	tst.w	r0, #16
    2a04:	d008      	beq.n	2a18 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2a06:	4a08      	ldr	r2, [pc, #32]	; (2a28 <_gclk_init_generators_by_fref+0x58>)
    2a08:	4b05      	ldr	r3, [pc, #20]	; (2a20 <_gclk_init_generators_by_fref+0x50>)
    2a0a:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2a0c:	4619      	mov	r1, r3
    2a0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2a12:	684b      	ldr	r3, [r1, #4]
    2a14:	4213      	tst	r3, r2
    2a16:	d1fc      	bne.n	2a12 <_gclk_init_generators_by_fref+0x42>
    2a18:	4770      	bx	lr
    2a1a:	bf00      	nop
    2a1c:	00010101 	.word	0x00010101
    2a20:	40001c00 	.word	0x40001c00
    2a24:	00010105 	.word	0x00010105
    2a28:	00010106 	.word	0x00010106

00002a2c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2a2c:	2201      	movs	r2, #1
    2a2e:	4b01      	ldr	r3, [pc, #4]	; (2a34 <_mclk_init+0x8>)
    2a30:	715a      	strb	r2, [r3, #5]
    2a32:	4770      	bx	lr
    2a34:	40000800 	.word	0x40000800

00002a38 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2a38:	4b06      	ldr	r3, [pc, #24]	; (2a54 <_osc32kctrl_init_sources+0x1c>)
    2a3a:	f242 028e 	movw	r2, #8334	; 0x208e
    2a3e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2a40:	2200      	movs	r2, #0
    2a42:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2a44:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2a46:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2a48:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2a4c:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2a4e:	741a      	strb	r2, [r3, #16]
    2a50:	4770      	bx	lr
    2a52:	bf00      	nop
    2a54:	40001400 	.word	0x40001400

00002a58 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2a58:	4a04      	ldr	r2, [pc, #16]	; (2a6c <_oscctrl_init_sources+0x14>)
    2a5a:	4b05      	ldr	r3, [pc, #20]	; (2a70 <_oscctrl_init_sources+0x18>)
    2a5c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2a5e:	461a      	mov	r2, r3
    2a60:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    2a62:	f013 0f02 	tst.w	r3, #2
    2a66:	d0fb      	beq.n	2a60 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2a68:	4770      	bx	lr
    2a6a:	bf00      	nop
    2a6c:	03002606 	.word	0x03002606
    2a70:	40001000 	.word	0x40001000

00002a74 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2a74:	4a36      	ldr	r2, [pc, #216]	; (2b50 <_oscctrl_init_referenced_generators+0xdc>)
    2a76:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2a78:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2a7c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2a80:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2a82:	4611      	mov	r1, r2
    2a84:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2a88:	684b      	ldr	r3, [r1, #4]
    2a8a:	4213      	tst	r3, r2
    2a8c:	d1fc      	bne.n	2a88 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2a8e:	4a30      	ldr	r2, [pc, #192]	; (2b50 <_oscctrl_init_referenced_generators+0xdc>)
    2a90:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2a92:	f013 0f04 	tst.w	r3, #4
    2a96:	d1fb      	bne.n	2a90 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2a98:	4b2e      	ldr	r3, [pc, #184]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2a9a:	2200      	movs	r2, #0
    2a9c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2a9e:	4a2e      	ldr	r2, [pc, #184]	; (2b58 <_oscctrl_init_referenced_generators+0xe4>)
    2aa0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2aa2:	461a      	mov	r2, r3
    2aa4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2aa8:	f013 0f10 	tst.w	r3, #16
    2aac:	d1fa      	bne.n	2aa4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2aae:	2200      	movs	r2, #0
    2ab0:	4b28      	ldr	r3, [pc, #160]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2ab2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2ab6:	461a      	mov	r2, r3
    2ab8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2abc:	f013 0f04 	tst.w	r3, #4
    2ac0:	d1fa      	bne.n	2ab8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2ac2:	2202      	movs	r2, #2
    2ac4:	4b23      	ldr	r3, [pc, #140]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2ac6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2ac8:	461a      	mov	r2, r3
    2aca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2ace:	f013 0f02 	tst.w	r3, #2
    2ad2:	d1fa      	bne.n	2aca <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2ad4:	4b1f      	ldr	r3, [pc, #124]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2ad8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2ada:	461a      	mov	r2, r3
    2adc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2ae0:	f013 0f08 	tst.w	r3, #8
    2ae4:	d1fa      	bne.n	2adc <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2ae6:	2219      	movs	r2, #25
    2ae8:	4b1a      	ldr	r3, [pc, #104]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2aea:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2aee:	461a      	mov	r2, r3
    2af0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2af4:	f013 0f04 	tst.w	r3, #4
    2af8:	d1fa      	bne.n	2af0 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2afa:	4b16      	ldr	r3, [pc, #88]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2afc:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2b00:	f013 0f01 	tst.w	r3, #1
    2b04:	d01d      	beq.n	2b42 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2b06:	4a13      	ldr	r2, [pc, #76]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2b08:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2b0a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2b0e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2b12:	d1f9      	bne.n	2b08 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2b14:	4a0e      	ldr	r2, [pc, #56]	; (2b50 <_oscctrl_init_referenced_generators+0xdc>)
    2b16:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d1fc      	bne.n	2b16 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2b1c:	4a0c      	ldr	r2, [pc, #48]	; (2b50 <_oscctrl_init_referenced_generators+0xdc>)
    2b1e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2b20:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2b24:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2b28:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b2a:	4611      	mov	r1, r2
    2b2c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b30:	684b      	ldr	r3, [r1, #4]
    2b32:	4213      	tst	r3, r2
    2b34:	d1fc      	bne.n	2b30 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2b36:	4a06      	ldr	r2, [pc, #24]	; (2b50 <_oscctrl_init_referenced_generators+0xdc>)
    2b38:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2b3a:	f013 0f04 	tst.w	r3, #4
    2b3e:	d1fb      	bne.n	2b38 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    2b40:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2b42:	4a04      	ldr	r2, [pc, #16]	; (2b54 <_oscctrl_init_referenced_generators+0xe0>)
    2b44:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2b46:	f413 7f80 	tst.w	r3, #256	; 0x100
    2b4a:	d0fb      	beq.n	2b44 <_oscctrl_init_referenced_generators+0xd0>
    2b4c:	e7e2      	b.n	2b14 <_oscctrl_init_referenced_generators+0xa0>
    2b4e:	bf00      	nop
    2b50:	40001c00 	.word	0x40001c00
    2b54:	40001000 	.word	0x40001000
    2b58:	0401bb80 	.word	0x0401bb80

00002b5c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    2b5c:	b538      	push	{r3, r4, r5, lr}
    2b5e:	460c      	mov	r4, r1
	ASSERT(dev);
    2b60:	4605      	mov	r5, r0
    2b62:	2230      	movs	r2, #48	; 0x30
    2b64:	4917      	ldr	r1, [pc, #92]	; (2bc4 <_timer_init+0x68>)
    2b66:	3000      	adds	r0, #0
    2b68:	bf18      	it	ne
    2b6a:	2001      	movne	r0, #1
    2b6c:	4b16      	ldr	r3, [pc, #88]	; (2bc8 <_timer_init+0x6c>)
    2b6e:	4798      	blx	r3

	dev->hw = hw;
    2b70:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2b72:	2301      	movs	r3, #1
    2b74:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b76:	f248 0203 	movw	r2, #32771	; 0x8003
    2b7a:	6923      	ldr	r3, [r4, #16]
    2b7c:	4213      	tst	r3, r2
    2b7e:	d1fc      	bne.n	2b7a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2b80:	68ea      	ldr	r2, [r5, #12]
    2b82:	6913      	ldr	r3, [r2, #16]
    2b84:	f013 0f01 	tst.w	r3, #1
    2b88:	d1fb      	bne.n	2b82 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    2b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
    2b8e:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    2b90:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2b92:	f248 1380 	movw	r3, #33152	; 0x8180
    2b96:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b98:	f248 0103 	movw	r1, #32771	; 0x8003
    2b9c:	6913      	ldr	r3, [r2, #16]
    2b9e:	420b      	tst	r3, r1
    2ba0:	d1fc      	bne.n	2b9c <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2ba2:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2ba8:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2baa:	6913      	ldr	r3, [r2, #16]
    2bac:	f013 0f60 	tst.w	r3, #96	; 0x60
    2bb0:	d1fb      	bne.n	2baa <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2bb2:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
    2bb8:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    2bba:	4b04      	ldr	r3, [pc, #16]	; (2bcc <_timer_init+0x70>)
    2bbc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    2bbe:	2000      	movs	r0, #0
    2bc0:	bd38      	pop	{r3, r4, r5, pc}
    2bc2:	bf00      	nop
    2bc4:	00005c98 	.word	0x00005c98
    2bc8:	000026cd 	.word	0x000026cd
    2bcc:	20000634 	.word	0x20000634

00002bd0 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    2bd0:	2000      	movs	r0, #0
    2bd2:	4770      	bx	lr

00002bd4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2bd4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    2bd6:	4b08      	ldr	r3, [pc, #32]	; (2bf8 <RTC_Handler+0x24>)
    2bd8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2bda:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2bdc:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2bde:	f413 7f80 	tst.w	r3, #256	; 0x100
    2be2:	d007      	beq.n	2bf4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    2be4:	6823      	ldr	r3, [r4, #0]
    2be6:	b10b      	cbz	r3, 2bec <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    2be8:	4620      	mov	r0, r4
    2bea:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2bec:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2bee:	f44f 7280 	mov.w	r2, #256	; 0x100
    2bf2:	819a      	strh	r2, [r3, #12]
    2bf4:	bd10      	pop	{r4, pc}
    2bf6:	bf00      	nop
    2bf8:	20000634 	.word	0x20000634

00002bfc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2bfc:	b470      	push	{r4, r5, r6}
    2bfe:	b089      	sub	sp, #36	; 0x24
    2c00:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2c02:	466c      	mov	r4, sp
    2c04:	4d0d      	ldr	r5, [pc, #52]	; (2c3c <_sercom_get_hardware_index+0x40>)
    2c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2c12:	9b00      	ldr	r3, [sp, #0]
    2c14:	42b3      	cmp	r3, r6
    2c16:	d00d      	beq.n	2c34 <_sercom_get_hardware_index+0x38>
    2c18:	4631      	mov	r1, r6
    2c1a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c1c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2c1e:	f853 2b04 	ldr.w	r2, [r3], #4
    2c22:	428a      	cmp	r2, r1
    2c24:	d007      	beq.n	2c36 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c26:	3001      	adds	r0, #1
    2c28:	2808      	cmp	r0, #8
    2c2a:	d1f8      	bne.n	2c1e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2c2c:	2000      	movs	r0, #0
}
    2c2e:	b009      	add	sp, #36	; 0x24
    2c30:	bc70      	pop	{r4, r5, r6}
    2c32:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c34:	2000      	movs	r0, #0
			return i;
    2c36:	b2c0      	uxtb	r0, r0
    2c38:	e7f9      	b.n	2c2e <_sercom_get_hardware_index+0x32>
    2c3a:	bf00      	nop
    2c3c:	00005cb0 	.word	0x00005cb0

00002c40 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2c40:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2c42:	4b03      	ldr	r3, [pc, #12]	; (2c50 <_sercom_get_irq_num+0x10>)
    2c44:	4798      	blx	r3
    2c46:	0080      	lsls	r0, r0, #2
    2c48:	302e      	adds	r0, #46	; 0x2e
}
    2c4a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2c4e:	bd08      	pop	{r3, pc}
    2c50:	00002bfd 	.word	0x00002bfd

00002c54 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2c54:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2c56:	f013 0f01 	tst.w	r3, #1
    2c5a:	d109      	bne.n	2c70 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2c5c:	6803      	ldr	r3, [r0, #0]
    2c5e:	f043 0302 	orr.w	r3, r3, #2
    2c62:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2c64:	69c3      	ldr	r3, [r0, #28]
    2c66:	f013 0f03 	tst.w	r3, #3
    2c6a:	d1fb      	bne.n	2c64 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2c6c:	2000      	movs	r0, #0
    2c6e:	4770      	bx	lr
		return ERR_BUSY;
    2c70:	f06f 0003 	mvn.w	r0, #3
}
    2c74:	4770      	bx	lr
	...

00002c78 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    2c78:	b538      	push	{r3, r4, r5, lr}
    2c7a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    2c7c:	4b0b      	ldr	r3, [pc, #44]	; (2cac <_spi_async_enable+0x34>)
    2c7e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2c80:	4620      	mov	r0, r4
    2c82:	4b0b      	ldr	r3, [pc, #44]	; (2cb0 <_spi_async_enable+0x38>)
    2c84:	4798      	blx	r3
    2c86:	1d01      	adds	r1, r0, #4
    2c88:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c8a:	2501      	movs	r5, #1
    2c8c:	4c09      	ldr	r4, [pc, #36]	; (2cb4 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    2c8e:	1c43      	adds	r3, r0, #1
    2c90:	b2db      	uxtb	r3, r3
    2c92:	0942      	lsrs	r2, r0, #5
    2c94:	f000 001f 	and.w	r0, r0, #31
    2c98:	fa05 f000 	lsl.w	r0, r5, r0
    2c9c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    2ca0:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    2ca2:	4299      	cmp	r1, r3
    2ca4:	d1f3      	bne.n	2c8e <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    2ca6:	2000      	movs	r0, #0
    2ca8:	bd38      	pop	{r3, r4, r5, pc}
    2caa:	bf00      	nop
    2cac:	00002c55 	.word	0x00002c55
    2cb0:	00002c41 	.word	0x00002c41
    2cb4:	e000e100 	.word	0xe000e100

00002cb8 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2cb8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2cba:	f013 0f01 	tst.w	r3, #1
    2cbe:	d109      	bne.n	2cd4 <_spi_sync_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2cc0:	6803      	ldr	r3, [r0, #0]
    2cc2:	f023 0302 	bic.w	r3, r3, #2
    2cc6:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2cc8:	69c3      	ldr	r3, [r0, #28]
    2cca:	f013 0f03 	tst.w	r3, #3
    2cce:	d1fb      	bne.n	2cc8 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2cd0:	2000      	movs	r0, #0
    2cd2:	4770      	bx	lr
		return ERR_BUSY;
    2cd4:	f06f 0003 	mvn.w	r0, #3
}
    2cd8:	4770      	bx	lr
	...

00002cdc <_spi_async_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_async_disable(void *const hw)
{
    2cdc:	b538      	push	{r3, r4, r5, lr}
    2cde:	4604      	mov	r4, r0
	_spi_sync_disable(hw);
    2ce0:	4b0e      	ldr	r3, [pc, #56]	; (2d1c <_spi_async_disable+0x40>)
    2ce2:	4798      	blx	r3
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
    2ce4:	2387      	movs	r3, #135	; 0x87
    2ce6:	7523      	strb	r3, [r4, #20]
	hri_sercomspi_clear_INTEN_reg(
	    hw, SERCOM_SPI_INTFLAG_ERROR | SERCOM_SPI_INTFLAG_RXC | SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
	uint8_t irq = _sercom_get_irq_num(hw);
    2ce8:	4620      	mov	r0, r4
    2cea:	4b0d      	ldr	r3, [pc, #52]	; (2d20 <_spi_async_disable+0x44>)
    2cec:	4798      	blx	r3
    2cee:	1d01      	adds	r1, r0, #4
    2cf0:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cf2:	2501      	movs	r5, #1
    2cf4:	4c0b      	ldr	r4, [pc, #44]	; (2d24 <_spi_async_disable+0x48>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq++);
    2cf6:	1c43      	adds	r3, r0, #1
    2cf8:	b2db      	uxtb	r3, r3
    2cfa:	0942      	lsrs	r2, r0, #5
    2cfc:	f000 001f 	and.w	r0, r0, #31
    2d00:	fa05 f000 	lsl.w	r0, r5, r0
    2d04:	3220      	adds	r2, #32
    2d06:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d0e:	f3bf 8f6f 	isb	sy
    2d12:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    2d14:	4299      	cmp	r1, r3
    2d16:	d1ee      	bne.n	2cf6 <_spi_async_disable+0x1a>
	}

	return ERR_NONE;
}
    2d18:	2000      	movs	r0, #0
    2d1a:	bd38      	pop	{r3, r4, r5, pc}
    2d1c:	00002cb9 	.word	0x00002cb9
    2d20:	00002c41 	.word	0x00002c41
    2d24:	e000e100 	.word	0xe000e100

00002d28 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    2d28:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    2d2a:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2d2c:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    2d2e:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    2d30:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    2d32:	f013 0f01 	tst.w	r3, #1
    2d36:	d109      	bne.n	2d4c <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    2d38:	f013 0f04 	tst.w	r3, #4
    2d3c:	d109      	bne.n	2d52 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    2d3e:	f013 0f02 	tst.w	r3, #2
    2d42:	d109      	bne.n	2d58 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    2d44:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d48:	d10b      	bne.n	2d62 <_spi_handler+0x3a>
    2d4a:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    2d4c:	6883      	ldr	r3, [r0, #8]
    2d4e:	4798      	blx	r3
    2d50:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    2d52:	68c3      	ldr	r3, [r0, #12]
    2d54:	4798      	blx	r3
    2d56:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2d58:	2302      	movs	r3, #2
    2d5a:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    2d5c:	6903      	ldr	r3, [r0, #16]
    2d5e:	4798      	blx	r3
    2d60:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2d62:	2304      	movs	r3, #4
    2d64:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2d66:	2380      	movs	r3, #128	; 0x80
    2d68:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    2d6a:	6943      	ldr	r3, [r0, #20]
    2d6c:	f06f 0112 	mvn.w	r1, #18
    2d70:	4798      	blx	r3
	}
}
    2d72:	e7ea      	b.n	2d4a <_spi_handler+0x22>

00002d74 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    2d74:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    2d76:	4b02      	ldr	r3, [pc, #8]	; (2d80 <SERCOM0_0_Handler+0xc>)
    2d78:	6818      	ldr	r0, [r3, #0]
    2d7a:	4b02      	ldr	r3, [pc, #8]	; (2d84 <SERCOM0_0_Handler+0x10>)
    2d7c:	4798      	blx	r3
    2d7e:	bd08      	pop	{r3, pc}
    2d80:	20000638 	.word	0x20000638
    2d84:	00002d29 	.word	0x00002d29

00002d88 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    2d88:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    2d8a:	4b02      	ldr	r3, [pc, #8]	; (2d94 <SERCOM0_1_Handler+0xc>)
    2d8c:	6818      	ldr	r0, [r3, #0]
    2d8e:	4b02      	ldr	r3, [pc, #8]	; (2d98 <SERCOM0_1_Handler+0x10>)
    2d90:	4798      	blx	r3
    2d92:	bd08      	pop	{r3, pc}
    2d94:	20000638 	.word	0x20000638
    2d98:	00002d29 	.word	0x00002d29

00002d9c <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    2d9c:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    2d9e:	4b02      	ldr	r3, [pc, #8]	; (2da8 <SERCOM0_2_Handler+0xc>)
    2da0:	6818      	ldr	r0, [r3, #0]
    2da2:	4b02      	ldr	r3, [pc, #8]	; (2dac <SERCOM0_2_Handler+0x10>)
    2da4:	4798      	blx	r3
    2da6:	bd08      	pop	{r3, pc}
    2da8:	20000638 	.word	0x20000638
    2dac:	00002d29 	.word	0x00002d29

00002db0 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    2db0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    2db2:	4b02      	ldr	r3, [pc, #8]	; (2dbc <SERCOM0_3_Handler+0xc>)
    2db4:	6818      	ldr	r0, [r3, #0]
    2db6:	4b02      	ldr	r3, [pc, #8]	; (2dc0 <SERCOM0_3_Handler+0x10>)
    2db8:	4798      	blx	r3
    2dba:	bd08      	pop	{r3, pc}
    2dbc:	20000638 	.word	0x20000638
    2dc0:	00002d29 	.word	0x00002d29

00002dc4 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2dc4:	b538      	push	{r3, r4, r5, lr}
    2dc6:	4605      	mov	r5, r0
    2dc8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2dca:	4608      	mov	r0, r1
    2dcc:	4b36      	ldr	r3, [pc, #216]	; (2ea8 <_spi_m_sync_init+0xe4>)
    2dce:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2dd0:	b160      	cbz	r0, 2dec <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2dd2:	2d00      	cmp	r5, #0
    2dd4:	d055      	beq.n	2e82 <_spi_m_sync_init+0xbe>
    2dd6:	f640 1273 	movw	r2, #2419	; 0x973
    2dda:	4934      	ldr	r1, [pc, #208]	; (2eac <_spi_m_sync_init+0xe8>)
    2ddc:	1c20      	adds	r0, r4, #0
    2dde:	bf18      	it	ne
    2de0:	2001      	movne	r0, #1
    2de2:	4b33      	ldr	r3, [pc, #204]	; (2eb0 <_spi_m_sync_init+0xec>)
    2de4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    2de6:	f06f 000c 	mvn.w	r0, #12
    2dea:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    2dec:	2d00      	cmp	r5, #0
    2dee:	d151      	bne.n	2e94 <_spi_m_sync_init+0xd0>
    2df0:	f640 1273 	movw	r2, #2419	; 0x973
    2df4:	492d      	ldr	r1, [pc, #180]	; (2eac <_spi_m_sync_init+0xe8>)
    2df6:	2000      	movs	r0, #0
    2df8:	4b2d      	ldr	r3, [pc, #180]	; (2eb0 <_spi_m_sync_init+0xec>)
    2dfa:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2dfc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2dfe:	f013 0f01 	tst.w	r3, #1
    2e02:	d119      	bne.n	2e38 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e04:	69e3      	ldr	r3, [r4, #28]
    2e06:	f013 0f03 	tst.w	r3, #3
    2e0a:	d1fb      	bne.n	2e04 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2e0c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2e0e:	f013 0f02 	tst.w	r3, #2
    2e12:	d00b      	beq.n	2e2c <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2e14:	6823      	ldr	r3, [r4, #0]
    2e16:	f023 0302 	bic.w	r3, r3, #2
    2e1a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e1c:	69e3      	ldr	r3, [r4, #28]
    2e1e:	f013 0f03 	tst.w	r3, #3
    2e22:	d1fb      	bne.n	2e1c <_spi_m_sync_init+0x58>
    2e24:	69e3      	ldr	r3, [r4, #28]
    2e26:	f013 0f02 	tst.w	r3, #2
    2e2a:	d1fb      	bne.n	2e24 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e2c:	230d      	movs	r3, #13
    2e2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e30:	69e3      	ldr	r3, [r4, #28]
    2e32:	f013 0f03 	tst.w	r3, #3
    2e36:	d1fb      	bne.n	2e30 <_spi_m_sync_init+0x6c>
    2e38:	69e3      	ldr	r3, [r4, #28]
    2e3a:	f013 0f01 	tst.w	r3, #1
    2e3e:	d1fb      	bne.n	2e38 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2e40:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2e42:	f640 1206 	movw	r2, #2310	; 0x906
    2e46:	4919      	ldr	r1, [pc, #100]	; (2eac <_spi_m_sync_init+0xe8>)
    2e48:	1c20      	adds	r0, r4, #0
    2e4a:	bf18      	it	ne
    2e4c:	2001      	movne	r0, #1
    2e4e:	4b18      	ldr	r3, [pc, #96]	; (2eb0 <_spi_m_sync_init+0xec>)
    2e50:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e52:	4b18      	ldr	r3, [pc, #96]	; (2eb4 <_spi_m_sync_init+0xf0>)
    2e54:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e56:	69e3      	ldr	r3, [r4, #28]
    2e58:	f013 0f03 	tst.w	r3, #3
    2e5c:	d1fb      	bne.n	2e56 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2e62:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e64:	69e3      	ldr	r3, [r4, #28]
    2e66:	f013 0f17 	tst.w	r3, #23
    2e6a:	d1fb      	bne.n	2e64 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2e6c:	2377      	movs	r3, #119	; 0x77
    2e6e:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2e70:	2000      	movs	r0, #0
    2e72:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2e76:	2301      	movs	r3, #1
    2e78:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    2e7a:	f240 13ff 	movw	r3, #511	; 0x1ff
    2e7e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    2e80:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    2e82:	f640 1273 	movw	r2, #2419	; 0x973
    2e86:	4909      	ldr	r1, [pc, #36]	; (2eac <_spi_m_sync_init+0xe8>)
    2e88:	2000      	movs	r0, #0
    2e8a:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <_spi_m_sync_init+0xec>)
    2e8c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2e8e:	f06f 000c 	mvn.w	r0, #12
    2e92:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    2e94:	f640 1273 	movw	r2, #2419	; 0x973
    2e98:	4904      	ldr	r1, [pc, #16]	; (2eac <_spi_m_sync_init+0xe8>)
    2e9a:	1c20      	adds	r0, r4, #0
    2e9c:	bf18      	it	ne
    2e9e:	2001      	movne	r0, #1
    2ea0:	4b03      	ldr	r3, [pc, #12]	; (2eb0 <_spi_m_sync_init+0xec>)
    2ea2:	4798      	blx	r3
    2ea4:	e7aa      	b.n	2dfc <_spi_m_sync_init+0x38>
    2ea6:	bf00      	nop
    2ea8:	00002bfd 	.word	0x00002bfd
    2eac:	00005ce8 	.word	0x00005ce8
    2eb0:	000026cd 	.word	0x000026cd
    2eb4:	0020000c 	.word	0x0020000c

00002eb8 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    2eb8:	b538      	push	{r3, r4, r5, lr}
    2eba:	4604      	mov	r4, r0
    2ebc:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    2ebe:	4b15      	ldr	r3, [pc, #84]	; (2f14 <_spi_m_async_init+0x5c>)
    2ec0:	4798      	blx	r3

	if (rc < 0) {
    2ec2:	2800      	cmp	r0, #0
    2ec4:	db25      	blt.n	2f12 <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    2ec6:	4b14      	ldr	r3, [pc, #80]	; (2f18 <_spi_m_async_init+0x60>)
    2ec8:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    2eca:	bf04      	itt	eq
    2ecc:	4b13      	ldreq	r3, [pc, #76]	; (2f1c <_spi_m_async_init+0x64>)
    2ece:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    2ed0:	2300      	movs	r3, #0
    2ed2:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    2ed4:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    2ed6:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    2ed8:	4628      	mov	r0, r5
    2eda:	4b11      	ldr	r3, [pc, #68]	; (2f20 <_spi_m_async_init+0x68>)
    2edc:	4798      	blx	r3
    2ede:	1d01      	adds	r1, r0, #4
    2ee0:	b2c9      	uxtb	r1, r1
    2ee2:	2401      	movs	r4, #1
    2ee4:	f000 021f 	and.w	r2, r0, #31
    2ee8:	fa04 f202 	lsl.w	r2, r4, r2
    2eec:	0943      	lsrs	r3, r0, #5
    2eee:	009b      	lsls	r3, r3, #2
    2ef0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2ef4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f00:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    2f08:	3001      	adds	r0, #1
    2f0a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2f0c:	4281      	cmp	r1, r0
    2f0e:	d1e9      	bne.n	2ee4 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    2f10:	2000      	movs	r0, #0
}
    2f12:	bd38      	pop	{r3, r4, r5, pc}
    2f14:	00002dc5 	.word	0x00002dc5
    2f18:	40003000 	.word	0x40003000
    2f1c:	20000638 	.word	0x20000638
    2f20:	00002c41 	.word	0x00002c41

00002f24 <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    2f24:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    2f26:	4604      	mov	r4, r0
    2f28:	b160      	cbz	r0, 2f44 <_spi_m_async_enable+0x20>
    2f2a:	6800      	ldr	r0, [r0, #0]
    2f2c:	3000      	adds	r0, #0
    2f2e:	bf18      	it	ne
    2f30:	2001      	movne	r0, #1
    2f32:	f44f 621e 	mov.w	r2, #2528	; 0x9e0
    2f36:	4904      	ldr	r1, [pc, #16]	; (2f48 <_spi_m_async_enable+0x24>)
    2f38:	4b04      	ldr	r3, [pc, #16]	; (2f4c <_spi_m_async_enable+0x28>)
    2f3a:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    2f3c:	6820      	ldr	r0, [r4, #0]
    2f3e:	4b04      	ldr	r3, [pc, #16]	; (2f50 <_spi_m_async_enable+0x2c>)
    2f40:	4798      	blx	r3
}
    2f42:	bd10      	pop	{r4, pc}
    2f44:	2000      	movs	r0, #0
    2f46:	e7f4      	b.n	2f32 <_spi_m_async_enable+0xe>
    2f48:	00005ce8 	.word	0x00005ce8
    2f4c:	000026cd 	.word	0x000026cd
    2f50:	00002c79 	.word	0x00002c79

00002f54 <_spi_m_async_disable>:

	return _spi_sync_disable(dev->prvt);
}

int32_t _spi_m_async_disable(struct _spi_async_dev *dev)
{
    2f54:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    2f56:	4604      	mov	r4, r0
    2f58:	b160      	cbz	r0, 2f74 <_spi_m_async_disable+0x20>
    2f5a:	6800      	ldr	r0, [r0, #0]
    2f5c:	3000      	adds	r0, #0
    2f5e:	bf18      	it	ne
    2f60:	2001      	movne	r0, #1
    2f62:	f640 12fc 	movw	r2, #2556	; 0x9fc
    2f66:	4904      	ldr	r1, [pc, #16]	; (2f78 <_spi_m_async_disable+0x24>)
    2f68:	4b04      	ldr	r3, [pc, #16]	; (2f7c <_spi_m_async_disable+0x28>)
    2f6a:	4798      	blx	r3

	return _spi_async_disable(dev->prvt);
    2f6c:	6820      	ldr	r0, [r4, #0]
    2f6e:	4b04      	ldr	r3, [pc, #16]	; (2f80 <_spi_m_async_disable+0x2c>)
    2f70:	4798      	blx	r3
}
    2f72:	bd10      	pop	{r4, pc}
    2f74:	2000      	movs	r0, #0
    2f76:	e7f4      	b.n	2f62 <_spi_m_async_disable+0xe>
    2f78:	00005ce8 	.word	0x00005ce8
    2f7c:	000026cd 	.word	0x000026cd
    2f80:	00002cdd 	.word	0x00002cdd

00002f84 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    2f84:	b538      	push	{r3, r4, r5, lr}
    2f86:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    2f88:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    2f8a:	b160      	cbz	r0, 2fa6 <_spi_m_async_enable_tx+0x22>
    2f8c:	1c20      	adds	r0, r4, #0
    2f8e:	bf18      	it	ne
    2f90:	2001      	movne	r0, #1
    2f92:	f640 3203 	movw	r2, #2819	; 0xb03
    2f96:	4906      	ldr	r1, [pc, #24]	; (2fb0 <_spi_m_async_enable_tx+0x2c>)
    2f98:	4b06      	ldr	r3, [pc, #24]	; (2fb4 <_spi_m_async_enable_tx+0x30>)
    2f9a:	4798      	blx	r3

	if (state) {
    2f9c:	b92d      	cbnz	r5, 2faa <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    2f9e:	2301      	movs	r3, #1
    2fa0:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    2fa2:	2000      	movs	r0, #0
    2fa4:	bd38      	pop	{r3, r4, r5, pc}
    2fa6:	2000      	movs	r0, #0
    2fa8:	e7f3      	b.n	2f92 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    2faa:	2301      	movs	r3, #1
    2fac:	75a3      	strb	r3, [r4, #22]
    2fae:	e7f8      	b.n	2fa2 <_spi_m_async_enable_tx+0x1e>
    2fb0:	00005ce8 	.word	0x00005ce8
    2fb4:	000026cd 	.word	0x000026cd

00002fb8 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    2fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fba:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    2fbc:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    2fbe:	4e0c      	ldr	r6, [pc, #48]	; (2ff0 <_spi_m_async_enable_rx+0x38>)
    2fc0:	f640 3217 	movw	r2, #2839	; 0xb17
    2fc4:	4631      	mov	r1, r6
    2fc6:	3000      	adds	r0, #0
    2fc8:	bf18      	it	ne
    2fca:	2001      	movne	r0, #1
    2fcc:	4d09      	ldr	r5, [pc, #36]	; (2ff4 <_spi_m_async_enable_rx+0x3c>)
    2fce:	47a8      	blx	r5
	ASSERT(hw);
    2fd0:	f640 3218 	movw	r2, #2840	; 0xb18
    2fd4:	4631      	mov	r1, r6
    2fd6:	1c20      	adds	r0, r4, #0
    2fd8:	bf18      	it	ne
    2fda:	2001      	movne	r0, #1
    2fdc:	47a8      	blx	r5

	if (state) {
    2fde:	b91f      	cbnz	r7, 2fe8 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    2fe0:	2304      	movs	r3, #4
    2fe2:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    2fe4:	2000      	movs	r0, #0
    2fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    2fe8:	2304      	movs	r3, #4
    2fea:	75a3      	strb	r3, [r4, #22]
    2fec:	e7fa      	b.n	2fe4 <_spi_m_async_enable_rx+0x2c>
    2fee:	bf00      	nop
    2ff0:	00005ce8 	.word	0x00005ce8
    2ff4:	000026cd 	.word	0x000026cd

00002ff8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    2ff8:	b538      	push	{r3, r4, r5, lr}
    2ffa:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    2ffc:	4604      	mov	r4, r0
    2ffe:	b170      	cbz	r0, 301e <_spi_m_async_enable_tx_complete+0x26>
    3000:	6800      	ldr	r0, [r0, #0]
    3002:	3000      	adds	r0, #0
    3004:	bf18      	it	ne
    3006:	2001      	movne	r0, #1
    3008:	f640 322a 	movw	r2, #2858	; 0xb2a
    300c:	4907      	ldr	r1, [pc, #28]	; (302c <_spi_m_async_enable_tx_complete+0x34>)
    300e:	4b08      	ldr	r3, [pc, #32]	; (3030 <_spi_m_async_enable_tx_complete+0x38>)
    3010:	4798      	blx	r3

	if (state) {
    3012:	b935      	cbnz	r5, 3022 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    3014:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    3016:	2202      	movs	r2, #2
    3018:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    301a:	2000      	movs	r0, #0
    301c:	bd38      	pop	{r3, r4, r5, pc}
    301e:	2000      	movs	r0, #0
    3020:	e7f2      	b.n	3008 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    3022:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    3024:	2202      	movs	r2, #2
    3026:	759a      	strb	r2, [r3, #22]
    3028:	e7f7      	b.n	301a <_spi_m_async_enable_tx_complete+0x22>
    302a:	bf00      	nop
    302c:	00005ce8 	.word	0x00005ce8
    3030:	000026cd 	.word	0x000026cd

00003034 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    3034:	b538      	push	{r3, r4, r5, lr}
    3036:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3038:	4604      	mov	r4, r0
    303a:	b160      	cbz	r0, 3056 <_spi_m_async_write_one+0x22>
    303c:	6800      	ldr	r0, [r0, #0]
    303e:	3000      	adds	r0, #0
    3040:	bf18      	it	ne
    3042:	2001      	movne	r0, #1
    3044:	f640 323c 	movw	r2, #2876	; 0xb3c
    3048:	4904      	ldr	r1, [pc, #16]	; (305c <_spi_m_async_write_one+0x28>)
    304a:	4b05      	ldr	r3, [pc, #20]	; (3060 <_spi_m_async_write_one+0x2c>)
    304c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    304e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    3050:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    3052:	2000      	movs	r0, #0
    3054:	bd38      	pop	{r3, r4, r5, pc}
    3056:	2000      	movs	r0, #0
    3058:	e7f4      	b.n	3044 <_spi_m_async_write_one+0x10>
    305a:	bf00      	nop
    305c:	00005ce8 	.word	0x00005ce8
    3060:	000026cd 	.word	0x000026cd

00003064 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    3064:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3066:	4604      	mov	r4, r0
    3068:	b160      	cbz	r0, 3084 <_spi_m_async_read_one+0x20>
    306a:	6800      	ldr	r0, [r0, #0]
    306c:	3000      	adds	r0, #0
    306e:	bf18      	it	ne
    3070:	2001      	movne	r0, #1
    3072:	f640 3257 	movw	r2, #2903	; 0xb57
    3076:	4904      	ldr	r1, [pc, #16]	; (3088 <_spi_m_async_read_one+0x24>)
    3078:	4b04      	ldr	r3, [pc, #16]	; (308c <_spi_m_async_read_one+0x28>)
    307a:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    307c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    307e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3080:	b280      	uxth	r0, r0
    3082:	bd10      	pop	{r4, pc}
    3084:	2000      	movs	r0, #0
    3086:	e7f4      	b.n	3072 <_spi_m_async_read_one+0xe>
    3088:	00005ce8 	.word	0x00005ce8
    308c:	000026cd 	.word	0x000026cd

00003090 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    3090:	b570      	push	{r4, r5, r6, lr}
    3092:	460d      	mov	r5, r1
    3094:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    3096:	4604      	mov	r4, r0
    3098:	b168      	cbz	r0, 30b6 <_spi_m_async_register_callback+0x26>
    309a:	2903      	cmp	r1, #3
    309c:	bf8c      	ite	hi
    309e:	2000      	movhi	r0, #0
    30a0:	2001      	movls	r0, #1
    30a2:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    30a6:	4905      	ldr	r1, [pc, #20]	; (30bc <_spi_m_async_register_callback+0x2c>)
    30a8:	4b05      	ldr	r3, [pc, #20]	; (30c0 <_spi_m_async_register_callback+0x30>)
    30aa:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    30ac:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    30b0:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    30b2:	2000      	movs	r0, #0
    30b4:	bd70      	pop	{r4, r5, r6, pc}
    30b6:	2000      	movs	r0, #0
    30b8:	e7f3      	b.n	30a2 <_spi_m_async_register_callback+0x12>
    30ba:	bf00      	nop
    30bc:	00005ce8 	.word	0x00005ce8
    30c0:	000026cd 	.word	0x000026cd

000030c4 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    30c4:	b570      	push	{r4, r5, r6, lr}
    30c6:	460c      	mov	r4, r1
    30c8:	4615      	mov	r5, r2
	ASSERT(device);
    30ca:	4606      	mov	r6, r0
    30cc:	f640 32b1 	movw	r2, #2993	; 0xbb1
    30d0:	4908      	ldr	r1, [pc, #32]	; (30f4 <_spi_m_async_set_irq_state+0x30>)
    30d2:	3000      	adds	r0, #0
    30d4:	bf18      	it	ne
    30d6:	2001      	movne	r0, #1
    30d8:	4b07      	ldr	r3, [pc, #28]	; (30f8 <_spi_m_async_set_irq_state+0x34>)
    30da:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    30dc:	2c03      	cmp	r4, #3
    30de:	d000      	beq.n	30e2 <_spi_m_async_set_irq_state+0x1e>
    30e0:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    30e2:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    30e4:	b115      	cbz	r5, 30ec <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    30e6:	2280      	movs	r2, #128	; 0x80
    30e8:	759a      	strb	r2, [r3, #22]
	}
}
    30ea:	e7f9      	b.n	30e0 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    30ec:	2280      	movs	r2, #128	; 0x80
    30ee:	751a      	strb	r2, [r3, #20]
    30f0:	bd70      	pop	{r4, r5, r6, pc}
    30f2:	bf00      	nop
    30f4:	00005ce8 	.word	0x00005ce8
    30f8:	000026cd 	.word	0x000026cd

000030fc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    30fc:	4b03      	ldr	r3, [pc, #12]	; (310c <_delay_init+0x10>)
    30fe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    3102:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3104:	2205      	movs	r2, #5
    3106:	601a      	str	r2, [r3, #0]
    3108:	4770      	bx	lr
    310a:	bf00      	nop
    310c:	e000e010 	.word	0xe000e010

00003110 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3110:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3112:	b303      	cbz	r3, 3156 <_delay_cycles+0x46>
{
    3114:	b430      	push	{r4, r5}
    3116:	1e5d      	subs	r5, r3, #1
    3118:	b2ed      	uxtb	r5, r5
	while (n--) {
    311a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    311c:	4a12      	ldr	r2, [pc, #72]	; (3168 <_delay_cycles+0x58>)
    311e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    3122:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3124:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3126:	6813      	ldr	r3, [r2, #0]
    3128:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    312c:	d0fb      	beq.n	3126 <_delay_cycles+0x16>
	while (n--) {
    312e:	3801      	subs	r0, #1
    3130:	b2c0      	uxtb	r0, r0
    3132:	28ff      	cmp	r0, #255	; 0xff
    3134:	d1f5      	bne.n	3122 <_delay_cycles+0x12>
    3136:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    313a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    313e:	3101      	adds	r1, #1
    3140:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3142:	4b09      	ldr	r3, [pc, #36]	; (3168 <_delay_cycles+0x58>)
    3144:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3146:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3148:	461a      	mov	r2, r3
    314a:	6813      	ldr	r3, [r2, #0]
    314c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3150:	d0fb      	beq.n	314a <_delay_cycles+0x3a>
		;
}
    3152:	bc30      	pop	{r4, r5}
    3154:	4770      	bx	lr
	SysTick->LOAD = buf;
    3156:	4b04      	ldr	r3, [pc, #16]	; (3168 <_delay_cycles+0x58>)
    3158:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    315a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    315c:	461a      	mov	r2, r3
    315e:	6813      	ldr	r3, [r2, #0]
    3160:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3164:	d0fb      	beq.n	315e <_delay_cycles+0x4e>
    3166:	4770      	bx	lr
    3168:	e000e010 	.word	0xe000e010

0000316c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    316c:	2000      	movs	r0, #0
    316e:	4770      	bx	lr

00003170 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3170:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3172:	7c83      	ldrb	r3, [r0, #18]
    3174:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3178:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    317a:	f002 0107 	and.w	r1, r2, #7
    317e:	2901      	cmp	r1, #1
    3180:	d00b      	beq.n	319a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3182:	015a      	lsls	r2, r3, #5
    3184:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3188:	2110      	movs	r1, #16
    318a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    318e:	015b      	lsls	r3, r3, #5
    3190:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3194:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    3198:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    319a:	f012 0f40 	tst.w	r2, #64	; 0x40
    319e:	d00c      	beq.n	31ba <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    31a0:	7cc2      	ldrb	r2, [r0, #19]
    31a2:	f36f 1286 	bfc	r2, #6, #1
    31a6:	74c2      	strb	r2, [r0, #19]
    31a8:	015a      	lsls	r2, r3, #5
    31aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    31ae:	2180      	movs	r1, #128	; 0x80
    31b0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    31b4:	2140      	movs	r1, #64	; 0x40
    31b6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    31ba:	7cc2      	ldrb	r2, [r0, #19]
    31bc:	f36f 02c3 	bfc	r2, #3, #1
    31c0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    31c2:	4909      	ldr	r1, [pc, #36]	; (31e8 <_usb_d_dev_handle_setup+0x78>)
    31c4:	015a      	lsls	r2, r3, #5
    31c6:	188c      	adds	r4, r1, r2
    31c8:	2500      	movs	r5, #0
    31ca:	72a5      	strb	r5, [r4, #10]
    31cc:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    31ce:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    31d2:	246f      	movs	r4, #111	; 0x6f
    31d4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    31d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    31dc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    31e0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    31e2:	7c80      	ldrb	r0, [r0, #18]
    31e4:	4798      	blx	r3
    31e6:	bd38      	pop	{r3, r4, r5, pc}
    31e8:	2000063c 	.word	0x2000063c

000031ec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    31ec:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    31ee:	2320      	movs	r3, #32
    31f0:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    31f4:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    31f6:	7c83      	ldrb	r3, [r0, #18]
    31f8:	f003 030f 	and.w	r3, r3, #15
    31fc:	015b      	lsls	r3, r3, #5
    31fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3202:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3206:	4b03      	ldr	r3, [pc, #12]	; (3214 <_usb_d_dev_handle_stall+0x28>)
    3208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    320a:	6882      	ldr	r2, [r0, #8]
    320c:	2101      	movs	r1, #1
    320e:	7c80      	ldrb	r0, [r0, #18]
    3210:	4798      	blx	r3
    3212:	bd08      	pop	{r3, pc}
    3214:	2000063c 	.word	0x2000063c

00003218 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3218:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    321a:	7c84      	ldrb	r4, [r0, #18]
    321c:	2cff      	cmp	r4, #255	; 0xff
    321e:	d003      	beq.n	3228 <_usb_d_dev_trans_done+0x10>
    3220:	7cc3      	ldrb	r3, [r0, #19]
    3222:	f013 0f40 	tst.w	r3, #64	; 0x40
    3226:	d100      	bne.n	322a <_usb_d_dev_trans_done+0x12>
    3228:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    322a:	7cc2      	ldrb	r2, [r0, #19]
    322c:	f36f 1286 	bfc	r2, #6, #1
    3230:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3232:	4a03      	ldr	r2, [pc, #12]	; (3240 <_usb_d_dev_trans_done+0x28>)
    3234:	6f15      	ldr	r5, [r2, #112]	; 0x70
    3236:	6882      	ldr	r2, [r0, #8]
    3238:	4620      	mov	r0, r4
    323a:	47a8      	blx	r5
    323c:	e7f4      	b.n	3228 <_usb_d_dev_trans_done+0x10>
    323e:	bf00      	nop
    3240:	2000063c 	.word	0x2000063c

00003244 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3244:	b530      	push	{r4, r5, lr}
    3246:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3248:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    324a:	2425      	movs	r4, #37	; 0x25
    324c:	f88d 4004 	strb.w	r4, [sp, #4]
    3250:	244a      	movs	r4, #74	; 0x4a
    3252:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3256:	2bff      	cmp	r3, #255	; 0xff
    3258:	d01e      	beq.n	3298 <_usb_d_dev_trans_stop+0x54>
    325a:	7cc4      	ldrb	r4, [r0, #19]
    325c:	f014 0f40 	tst.w	r4, #64	; 0x40
    3260:	d01a      	beq.n	3298 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3262:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    3266:	b1c9      	cbz	r1, 329c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3268:	0163      	lsls	r3, r4, #5
    326a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    326e:	2580      	movs	r5, #128	; 0x80
    3270:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    3274:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3276:	a902      	add	r1, sp, #8
    3278:	440b      	add	r3, r1
    327a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    327e:	0163      	lsls	r3, r4, #5
    3280:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3284:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3288:	0163      	lsls	r3, r4, #5
    328a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    328e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    3292:	4611      	mov	r1, r2
    3294:	4b05      	ldr	r3, [pc, #20]	; (32ac <_usb_d_dev_trans_stop+0x68>)
    3296:	4798      	blx	r3
}
    3298:	b003      	add	sp, #12
    329a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    329c:	0163      	lsls	r3, r4, #5
    329e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    32a2:	2540      	movs	r5, #64	; 0x40
    32a4:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    32a8:	e7e4      	b.n	3274 <_usb_d_dev_trans_stop+0x30>
    32aa:	bf00      	nop
    32ac:	00003219 	.word	0x00003219

000032b0 <_usb_d_dev_handle_trfail>:
{
    32b0:	b530      	push	{r4, r5, lr}
    32b2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    32b4:	7c83      	ldrb	r3, [r0, #18]
    32b6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    32ba:	2204      	movs	r2, #4
    32bc:	f88d 2004 	strb.w	r2, [sp, #4]
    32c0:	2208      	movs	r2, #8
    32c2:	f88d 2005 	strb.w	r2, [sp, #5]
    32c6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    32c8:	460c      	mov	r4, r1
    32ca:	b391      	cbz	r1, 3332 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    32cc:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    32d0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    32d4:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    32d8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    32dc:	4a32      	ldr	r2, [pc, #200]	; (33a8 <_usb_d_dev_handle_trfail+0xf8>)
    32de:	440a      	add	r2, r1
    32e0:	7a91      	ldrb	r1, [r2, #10]
    32e2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    32e4:	2d02      	cmp	r5, #2
    32e6:	d02c      	beq.n	3342 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    32e8:	f011 0f02 	tst.w	r1, #2
    32ec:	d045      	beq.n	337a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    32ee:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    32f0:	7a91      	ldrb	r1, [r2, #10]
    32f2:	f36f 0141 	bfc	r1, #1, #1
    32f6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    32f8:	aa02      	add	r2, sp, #8
    32fa:	4422      	add	r2, r4
    32fc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3300:	015a      	lsls	r2, r3, #5
    3302:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3306:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    330a:	015b      	lsls	r3, r3, #5
    330c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3310:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3314:	f005 0307 	and.w	r3, r5, #7
    3318:	2b01      	cmp	r3, #1
    331a:	d143      	bne.n	33a4 <_usb_d_dev_handle_trfail+0xf4>
    331c:	7cc3      	ldrb	r3, [r0, #19]
    331e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3322:	d03f      	beq.n	33a4 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3324:	09d9      	lsrs	r1, r3, #7
    3326:	428c      	cmp	r4, r1
    3328:	d03c      	beq.n	33a4 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    332a:	2200      	movs	r2, #0
    332c:	4b1f      	ldr	r3, [pc, #124]	; (33ac <_usb_d_dev_handle_trfail+0xfc>)
    332e:	4798      	blx	r3
    3330:	e038      	b.n	33a4 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3332:	0159      	lsls	r1, r3, #5
    3334:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3338:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    333c:	f005 0507 	and.w	r5, r5, #7
    3340:	e7ca      	b.n	32d8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3342:	f011 0f01 	tst.w	r1, #1
    3346:	d0cf      	beq.n	32e8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3348:	7a91      	ldrb	r1, [r2, #10]
    334a:	f36f 0100 	bfc	r1, #0, #1
    334e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3350:	aa02      	add	r2, sp, #8
    3352:	4422      	add	r2, r4
    3354:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3358:	015a      	lsls	r2, r3, #5
    335a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    335e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3362:	015b      	lsls	r3, r3, #5
    3364:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3368:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    336c:	2204      	movs	r2, #4
    336e:	1c21      	adds	r1, r4, #0
    3370:	bf18      	it	ne
    3372:	2101      	movne	r1, #1
    3374:	4b0d      	ldr	r3, [pc, #52]	; (33ac <_usb_d_dev_handle_trfail+0xfc>)
    3376:	4798      	blx	r3
    3378:	e014      	b.n	33a4 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    337a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    337e:	4a0a      	ldr	r2, [pc, #40]	; (33a8 <_usb_d_dev_handle_trfail+0xf8>)
    3380:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    3384:	2100      	movs	r1, #0
    3386:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3388:	aa02      	add	r2, sp, #8
    338a:	4414      	add	r4, r2
    338c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3390:	015a      	lsls	r2, r3, #5
    3392:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3396:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    339a:	015b      	lsls	r3, r3, #5
    339c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    33a0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    33a4:	b003      	add	sp, #12
    33a6:	bd30      	pop	{r4, r5, pc}
    33a8:	2000063c 	.word	0x2000063c
    33ac:	00003245 	.word	0x00003245

000033b0 <_usb_d_dev_reset_epts>:
{
    33b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33b4:	4d0c      	ldr	r5, [pc, #48]	; (33e8 <_usb_d_dev_reset_epts+0x38>)
    33b6:	f105 0474 	add.w	r4, r5, #116	; 0x74
    33ba:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    33be:	f04f 0803 	mov.w	r8, #3
    33c2:	4f0a      	ldr	r7, [pc, #40]	; (33ec <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    33c4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    33c6:	4641      	mov	r1, r8
    33c8:	4620      	mov	r0, r4
    33ca:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    33cc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    33ce:	2300      	movs	r3, #0
    33d0:	74e3      	strb	r3, [r4, #19]
    33d2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    33d4:	42ac      	cmp	r4, r5
    33d6:	d1f6      	bne.n	33c6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    33d8:	2260      	movs	r2, #96	; 0x60
    33da:	4619      	mov	r1, r3
    33dc:	4802      	ldr	r0, [pc, #8]	; (33e8 <_usb_d_dev_reset_epts+0x38>)
    33de:	4b04      	ldr	r3, [pc, #16]	; (33f0 <_usb_d_dev_reset_epts+0x40>)
    33e0:	4798      	blx	r3
    33e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33e6:	bf00      	nop
    33e8:	2000063c 	.word	0x2000063c
    33ec:	00003219 	.word	0x00003219
    33f0:	000050c5 	.word	0x000050c5

000033f4 <_usb_d_dev_in_next>:
{
    33f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33f8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    33fa:	7c84      	ldrb	r4, [r0, #18]
    33fc:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3400:	4688      	mov	r8, r1
    3402:	2900      	cmp	r1, #0
    3404:	f000 809f 	beq.w	3546 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3408:	4b58      	ldr	r3, [pc, #352]	; (356c <_usb_d_dev_in_next+0x178>)
    340a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    340e:	6958      	ldr	r0, [r3, #20]
    3410:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3414:	8a2b      	ldrh	r3, [r5, #16]
    3416:	f240 32ff 	movw	r2, #1023	; 0x3ff
    341a:	4293      	cmp	r3, r2
    341c:	f000 808d 	beq.w	353a <_usb_d_dev_in_next+0x146>
    3420:	3b01      	subs	r3, #1
    3422:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3424:	7cef      	ldrb	r7, [r5, #19]
    3426:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    342a:	f1b8 0f00 	cmp.w	r8, #0
    342e:	d005      	beq.n	343c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3430:	0162      	lsls	r2, r4, #5
    3432:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3436:	2302      	movs	r3, #2
    3438:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    343c:	68a9      	ldr	r1, [r5, #8]
    343e:	eb0e 0301 	add.w	r3, lr, r1
    3442:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    3444:	686e      	ldr	r6, [r5, #4]
    3446:	42b3      	cmp	r3, r6
    3448:	d23f      	bcs.n	34ca <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    344a:	1af6      	subs	r6, r6, r3
    344c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    344e:	7cea      	ldrb	r2, [r5, #19]
    3450:	f012 0f20 	tst.w	r2, #32
    3454:	d02d      	beq.n	34b2 <_usb_d_dev_in_next+0xbe>
    3456:	8a2a      	ldrh	r2, [r5, #16]
    3458:	4296      	cmp	r6, r2
    345a:	bf28      	it	cs
    345c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    345e:	6829      	ldr	r1, [r5, #0]
    3460:	4632      	mov	r2, r6
    3462:	4419      	add	r1, r3
    3464:	68e8      	ldr	r0, [r5, #12]
    3466:	4b42      	ldr	r3, [pc, #264]	; (3570 <_usb_d_dev_in_next+0x17c>)
    3468:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    346a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    346c:	4b3f      	ldr	r3, [pc, #252]	; (356c <_usb_d_dev_in_next+0x178>)
    346e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3472:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3474:	4b3d      	ldr	r3, [pc, #244]	; (356c <_usb_d_dev_in_next+0x178>)
    3476:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    347a:	695a      	ldr	r2, [r3, #20]
    347c:	f366 020d 	bfi	r2, r6, #0, #14
    3480:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3482:	695a      	ldr	r2, [r3, #20]
    3484:	f36f 329b 	bfc	r2, #14, #14
    3488:	615a      	str	r2, [r3, #20]
	if (!isr) {
    348a:	f1b8 0f00 	cmp.w	r8, #0
    348e:	d108      	bne.n	34a2 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    3490:	2f01      	cmp	r7, #1
    3492:	bf0c      	ite	eq
    3494:	224e      	moveq	r2, #78	; 0x4e
    3496:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3498:	0163      	lsls	r3, r4, #5
    349a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    349e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    34a2:	0164      	lsls	r4, r4, #5
    34a4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    34a8:	2380      	movs	r3, #128	; 0x80
    34aa:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    34ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34b2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    34b6:	bf28      	it	cs
    34b8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    34bc:	6829      	ldr	r1, [r5, #0]
    34be:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    34c0:	4a2a      	ldr	r2, [pc, #168]	; (356c <_usb_d_dev_in_next+0x178>)
    34c2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    34c6:	6113      	str	r3, [r2, #16]
    34c8:	e7d4      	b.n	3474 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    34ca:	7ceb      	ldrb	r3, [r5, #19]
    34cc:	f013 0f10 	tst.w	r3, #16
    34d0:	d00f      	beq.n	34f2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    34d2:	7ceb      	ldrb	r3, [r5, #19]
    34d4:	f36f 1304 	bfc	r3, #4, #1
    34d8:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    34da:	4b24      	ldr	r3, [pc, #144]	; (356c <_usb_d_dev_in_next+0x178>)
    34dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    34e0:	695a      	ldr	r2, [r3, #20]
    34e2:	f36f 020d 	bfc	r2, #0, #14
    34e6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    34e8:	695a      	ldr	r2, [r3, #20]
    34ea:	f36f 329b 	bfc	r2, #14, #14
    34ee:	615a      	str	r2, [r3, #20]
    34f0:	e7cb      	b.n	348a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    34f2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34f4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    34f8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    34fc:	bf0c      	ite	eq
    34fe:	234b      	moveq	r3, #75	; 0x4b
    3500:	234a      	movne	r3, #74	; 0x4a
    3502:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    3506:	8a2a      	ldrh	r2, [r5, #16]
    3508:	ea00 030e 	and.w	r3, r0, lr
    350c:	429a      	cmp	r2, r3
    350e:	d005      	beq.n	351c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3510:	2100      	movs	r1, #0
    3512:	4628      	mov	r0, r5
    3514:	4b17      	ldr	r3, [pc, #92]	; (3574 <_usb_d_dev_in_next+0x180>)
    3516:	4798      	blx	r3
	return;
    3518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    351c:	7ceb      	ldrb	r3, [r5, #19]
    351e:	f36f 1386 	bfc	r3, #6, #1
    3522:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    3524:	4b11      	ldr	r3, [pc, #68]	; (356c <_usb_d_dev_in_next+0x178>)
    3526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3528:	68a9      	ldr	r1, [r5, #8]
    352a:	7ca8      	ldrb	r0, [r5, #18]
    352c:	4798      	blx	r3
    352e:	b9d0      	cbnz	r0, 3566 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    3530:	7ceb      	ldrb	r3, [r5, #19]
    3532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3536:	74eb      	strb	r3, [r5, #19]
    3538:	e7ea      	b.n	3510 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    353a:	7cef      	ldrb	r7, [r5, #19]
    353c:	f007 0707 	and.w	r7, r7, #7
    3540:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3544:	e774      	b.n	3430 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3546:	8a03      	ldrh	r3, [r0, #16]
    3548:	f240 32ff 	movw	r2, #1023	; 0x3ff
    354c:	4293      	cmp	r3, r2
    354e:	d107      	bne.n	3560 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3550:	7cef      	ldrb	r7, [r5, #19]
    3552:	f007 0707 	and.w	r7, r7, #7
    3556:	f04f 0e00 	mov.w	lr, #0
    355a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    355e:	e76d      	b.n	343c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3560:	f04f 0e00 	mov.w	lr, #0
    3564:	e75c      	b.n	3420 <_usb_d_dev_in_next+0x2c>
    3566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    356a:	bf00      	nop
    356c:	2000063c 	.word	0x2000063c
    3570:	00004f91 	.word	0x00004f91
    3574:	00003219 	.word	0x00003219

00003578 <_usb_d_dev_out_next>:
{
    3578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    357c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    357e:	7c85      	ldrb	r5, [r0, #18]
    3580:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3584:	4689      	mov	r9, r1
    3586:	2900      	cmp	r1, #0
    3588:	d056      	beq.n	3638 <_usb_d_dev_out_next+0xc0>
    358a:	4b74      	ldr	r3, [pc, #464]	; (375c <_usb_d_dev_out_next+0x1e4>)
    358c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3590:	685a      	ldr	r2, [r3, #4]
    3592:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3596:	685f      	ldr	r7, [r3, #4]
    3598:	f3c7 070d 	ubfx	r7, r7, #0, #14
    359c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    359e:	8a06      	ldrh	r6, [r0, #16]
    35a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    35a4:	429e      	cmp	r6, r3
    35a6:	f000 80ba 	beq.w	371e <_usb_d_dev_out_next+0x1a6>
    35aa:	3e01      	subs	r6, #1
    35ac:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    35ae:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    35b2:	f894 8013 	ldrb.w	r8, [r4, #19]
    35b6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    35ba:	f1b9 0f00 	cmp.w	r9, #0
    35be:	d005      	beq.n	35cc <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35c0:	016b      	lsls	r3, r5, #5
    35c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    35c6:	2201      	movs	r2, #1
    35c8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    35cc:	7ce3      	ldrb	r3, [r4, #19]
    35ce:	f013 0f20 	tst.w	r3, #32
    35d2:	d00d      	beq.n	35f0 <_usb_d_dev_out_next+0x78>
    35d4:	6862      	ldr	r2, [r4, #4]
    35d6:	2a00      	cmp	r2, #0
    35d8:	d037      	beq.n	364a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    35da:	68a0      	ldr	r0, [r4, #8]
    35dc:	1a12      	subs	r2, r2, r0
    35de:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    35e0:	6823      	ldr	r3, [r4, #0]
    35e2:	42ba      	cmp	r2, r7
    35e4:	bf28      	it	cs
    35e6:	463a      	movcs	r2, r7
    35e8:	68e1      	ldr	r1, [r4, #12]
    35ea:	4418      	add	r0, r3
    35ec:	4b5c      	ldr	r3, [pc, #368]	; (3760 <_usb_d_dev_out_next+0x1e8>)
    35ee:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    35f0:	6863      	ldr	r3, [r4, #4]
    35f2:	b353      	cbz	r3, 364a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    35f4:	f1b9 0f00 	cmp.w	r9, #0
    35f8:	d040      	beq.n	367c <_usb_d_dev_out_next+0x104>
    35fa:	8a22      	ldrh	r2, [r4, #16]
    35fc:	42ba      	cmp	r2, r7
    35fe:	d93d      	bls.n	367c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    3600:	7ce3      	ldrb	r3, [r4, #19]
    3602:	f36f 1304 	bfc	r3, #4, #1
    3606:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3608:	68a3      	ldr	r3, [r4, #8]
    360a:	445b      	add	r3, fp
    360c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    360e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3612:	ea4f 1345 	mov.w	r3, r5, lsl #5
    3616:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    361a:	bf0c      	ite	eq
    361c:	222d      	moveq	r2, #45	; 0x2d
    361e:	2225      	movne	r2, #37	; 0x25
    3620:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    3624:	b915      	cbnz	r5, 362c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3626:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3628:	4b4c      	ldr	r3, [pc, #304]	; (375c <_usb_d_dev_out_next+0x1e4>)
    362a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    362c:	2100      	movs	r1, #0
    362e:	4620      	mov	r0, r4
    3630:	4b4c      	ldr	r3, [pc, #304]	; (3764 <_usb_d_dev_out_next+0x1ec>)
    3632:	4798      	blx	r3
	return;
    3634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3638:	8a06      	ldrh	r6, [r0, #16]
    363a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    363e:	429e      	cmp	r6, r3
    3640:	d07b      	beq.n	373a <_usb_d_dev_out_next+0x1c2>
    3642:	f04f 0b00 	mov.w	fp, #0
    3646:	46da      	mov	sl, fp
    3648:	e7af      	b.n	35aa <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    364a:	7ce3      	ldrb	r3, [r4, #19]
    364c:	f013 0f10 	tst.w	r3, #16
    3650:	d06c      	beq.n	372c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    3652:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    3654:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3658:	f043 0320 	orr.w	r3, r3, #32
    365c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    365e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3660:	493e      	ldr	r1, [pc, #248]	; (375c <_usb_d_dev_out_next+0x1e4>)
    3662:	016a      	lsls	r2, r5, #5
    3664:	188b      	adds	r3, r1, r2
    3666:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3668:	8a21      	ldrh	r1, [r4, #16]
    366a:	685a      	ldr	r2, [r3, #4]
    366c:	f361 329b 	bfi	r2, r1, #14, #14
    3670:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3672:	685a      	ldr	r2, [r3, #4]
    3674:	f36f 020d 	bfc	r2, #0, #14
    3678:	605a      	str	r2, [r3, #4]
    367a:	e01d      	b.n	36b8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    367c:	68a2      	ldr	r2, [r4, #8]
    367e:	4452      	add	r2, sl
    3680:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3682:	4293      	cmp	r3, r2
    3684:	d9c3      	bls.n	360e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    3686:	1a9b      	subs	r3, r3, r2
    3688:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    368a:	7ce1      	ldrb	r1, [r4, #19]
    368c:	f011 0f20 	tst.w	r1, #32
    3690:	d026      	beq.n	36e0 <_usb_d_dev_out_next+0x168>
    3692:	8a22      	ldrh	r2, [r4, #16]
    3694:	4293      	cmp	r3, r2
    3696:	bf28      	it	cs
    3698:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    369a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    369c:	016a      	lsls	r2, r5, #5
    369e:	492f      	ldr	r1, [pc, #188]	; (375c <_usb_d_dev_out_next+0x1e4>)
    36a0:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    36a2:	4a2e      	ldr	r2, [pc, #184]	; (375c <_usb_d_dev_out_next+0x1e4>)
    36a4:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    36a8:	6851      	ldr	r1, [r2, #4]
    36aa:	f363 319b 	bfi	r1, r3, #14, #14
    36ae:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    36b0:	6853      	ldr	r3, [r2, #4]
    36b2:	f36f 030d 	bfc	r3, #0, #14
    36b6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    36b8:	f1b9 0f00 	cmp.w	r9, #0
    36bc:	d108      	bne.n	36d0 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    36be:	f1b8 0f01 	cmp.w	r8, #1
    36c2:	d025      	beq.n	3710 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    36c4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    36c6:	016b      	lsls	r3, r5, #5
    36c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36cc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    36d0:	016d      	lsls	r5, r5, #5
    36d2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    36d6:	2340      	movs	r3, #64	; 0x40
    36d8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    36dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    36e0:	8a21      	ldrh	r1, [r4, #16]
    36e2:	428b      	cmp	r3, r1
    36e4:	d90a      	bls.n	36fc <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    36e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    36ea:	d80e      	bhi.n	370a <_usb_d_dev_out_next+0x192>
    36ec:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    36f0:	6821      	ldr	r1, [r4, #0]
    36f2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    36f4:	0169      	lsls	r1, r5, #5
    36f6:	4819      	ldr	r0, [pc, #100]	; (375c <_usb_d_dev_out_next+0x1e4>)
    36f8:	5042      	str	r2, [r0, r1]
    36fa:	e7d2      	b.n	36a2 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    36fc:	428b      	cmp	r3, r1
    36fe:	d2f7      	bcs.n	36f0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    3700:	7ce1      	ldrb	r1, [r4, #19]
    3702:	f041 0120 	orr.w	r1, r1, #32
    3706:	74e1      	strb	r1, [r4, #19]
    3708:	e7f2      	b.n	36f0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    370a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    370e:	e7ef      	b.n	36f0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    3710:	4b12      	ldr	r3, [pc, #72]	; (375c <_usb_d_dev_out_next+0x1e4>)
    3712:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3716:	2200      	movs	r2, #0
    3718:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    371a:	222d      	movs	r2, #45	; 0x2d
    371c:	e7d3      	b.n	36c6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    371e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3722:	f890 8013 	ldrb.w	r8, [r0, #19]
    3726:	f008 0807 	and.w	r8, r8, #7
    372a:	e749      	b.n	35c0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    372c:	f1b9 0f00 	cmp.w	r9, #0
    3730:	d10b      	bne.n	374a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    3732:	68a3      	ldr	r3, [r4, #8]
    3734:	4453      	add	r3, sl
    3736:	60a3      	str	r3, [r4, #8]
    3738:	e769      	b.n	360e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    373a:	f890 8013 	ldrb.w	r8, [r0, #19]
    373e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    3742:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3744:	46bb      	mov	fp, r7
    3746:	46ba      	mov	sl, r7
    3748:	e740      	b.n	35cc <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    374a:	8a23      	ldrh	r3, [r4, #16]
    374c:	42bb      	cmp	r3, r7
    374e:	f63f af57 	bhi.w	3600 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    3752:	68a3      	ldr	r3, [r4, #8]
    3754:	4453      	add	r3, sl
    3756:	60a3      	str	r3, [r4, #8]
    3758:	e759      	b.n	360e <_usb_d_dev_out_next+0x96>
    375a:	bf00      	nop
    375c:	2000063c 	.word	0x2000063c
    3760:	00004f91 	.word	0x00004f91
    3764:	00003219 	.word	0x00003219

00003768 <_usb_d_dev_handler>:
{
    3768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    376c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3770:	8c1e      	ldrh	r6, [r3, #32]
    3772:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3774:	b146      	cbz	r6, 3788 <_usb_d_dev_handler+0x20>
    3776:	4d91      	ldr	r5, [pc, #580]	; (39bc <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    3778:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    377a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    377e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 39d8 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    3782:	f8df 8258 	ldr.w	r8, [pc, #600]	; 39dc <_usb_d_dev_handler+0x274>
    3786:	e0d3      	b.n	3930 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3788:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    378a:	8b1b      	ldrh	r3, [r3, #24]
    378c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    378e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3790:	f013 0f04 	tst.w	r3, #4
    3794:	d11d      	bne.n	37d2 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3796:	f413 7f00 	tst.w	r3, #512	; 0x200
    379a:	d123      	bne.n	37e4 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    379c:	f013 0f80 	tst.w	r3, #128	; 0x80
    37a0:	d147      	bne.n	3832 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    37a2:	f013 0f70 	tst.w	r3, #112	; 0x70
    37a6:	d14f      	bne.n	3848 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    37a8:	f013 0f08 	tst.w	r3, #8
    37ac:	d16e      	bne.n	388c <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    37ae:	f013 0f01 	tst.w	r3, #1
    37b2:	d0e0      	beq.n	3776 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    37b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    37b8:	f240 2201 	movw	r2, #513	; 0x201
    37bc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    37be:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    37c0:	2270      	movs	r2, #112	; 0x70
    37c2:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    37c4:	4b7e      	ldr	r3, [pc, #504]	; (39c0 <_usb_d_dev_handler+0x258>)
    37c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    37c8:	2100      	movs	r1, #0
    37ca:	2004      	movs	r0, #4
    37cc:	4798      	blx	r3
    37ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    37d2:	2204      	movs	r2, #4
    37d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    37d8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    37da:	4b79      	ldr	r3, [pc, #484]	; (39c0 <_usb_d_dev_handler+0x258>)
    37dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    37de:	4798      	blx	r3
    37e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    37e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    37e8:	f240 2201 	movw	r2, #513	; 0x201
    37ec:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    37ee:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    37f0:	2270      	movs	r2, #112	; 0x70
    37f2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    37f4:	4b72      	ldr	r3, [pc, #456]	; (39c0 <_usb_d_dev_handler+0x258>)
    37f6:	891b      	ldrh	r3, [r3, #8]
    37f8:	f003 030f 	and.w	r3, r3, #15
    37fc:	2b03      	cmp	r3, #3
    37fe:	d00e      	beq.n	381e <_usb_d_dev_handler+0xb6>
    3800:	4b6f      	ldr	r3, [pc, #444]	; (39c0 <_usb_d_dev_handler+0x258>)
    3802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3804:	f003 030f 	and.w	r3, r3, #15
    3808:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    380a:	bf08      	it	eq
    380c:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    380e:	d007      	beq.n	3820 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    3810:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3812:	4b6b      	ldr	r3, [pc, #428]	; (39c0 <_usb_d_dev_handler+0x258>)
    3814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3816:	2003      	movs	r0, #3
    3818:	4798      	blx	r3
    381a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    381e:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3820:	4b67      	ldr	r3, [pc, #412]	; (39c0 <_usb_d_dev_handler+0x258>)
    3822:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    3826:	8919      	ldrh	r1, [r3, #8]
    3828:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    382c:	2200      	movs	r2, #0
    382e:	811a      	strh	r2, [r3, #8]
    3830:	e7ef      	b.n	3812 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3832:	2280      	movs	r2, #128	; 0x80
    3834:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3838:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    383a:	4b61      	ldr	r3, [pc, #388]	; (39c0 <_usb_d_dev_handler+0x258>)
    383c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    383e:	2100      	movs	r1, #0
    3840:	2005      	movs	r0, #5
    3842:	4798      	blx	r3
    3844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3848:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    384c:	2270      	movs	r2, #112	; 0x70
    384e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3850:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3852:	f240 2201 	movw	r2, #513	; 0x201
    3856:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3858:	4b5a      	ldr	r3, [pc, #360]	; (39c4 <_usb_d_dev_handler+0x25c>)
    385a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    385e:	f013 0f01 	tst.w	r3, #1
    3862:	d00d      	beq.n	3880 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3864:	4a57      	ldr	r2, [pc, #348]	; (39c4 <_usb_d_dev_handler+0x25c>)
    3866:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3868:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    386c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3870:	d1f9      	bne.n	3866 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3872:	4b53      	ldr	r3, [pc, #332]	; (39c0 <_usb_d_dev_handler+0x258>)
    3874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3876:	2100      	movs	r1, #0
    3878:	2002      	movs	r0, #2
    387a:	4798      	blx	r3
    387c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3880:	4a50      	ldr	r2, [pc, #320]	; (39c4 <_usb_d_dev_handler+0x25c>)
    3882:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3884:	f413 7f80 	tst.w	r3, #256	; 0x100
    3888:	d0fb      	beq.n	3882 <_usb_d_dev_handler+0x11a>
    388a:	e7f2      	b.n	3872 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    388c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3890:	2400      	movs	r4, #0
    3892:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3896:	2208      	movs	r2, #8
    3898:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    389a:	2270      	movs	r2, #112	; 0x70
    389c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    389e:	f240 2201 	movw	r2, #513	; 0x201
    38a2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    38a4:	4b48      	ldr	r3, [pc, #288]	; (39c8 <_usb_d_dev_handler+0x260>)
    38a6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    38a8:	4b45      	ldr	r3, [pc, #276]	; (39c0 <_usb_d_dev_handler+0x258>)
    38aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    38ac:	4621      	mov	r1, r4
    38ae:	2001      	movs	r0, #1
    38b0:	4798      	blx	r3
    38b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    38b6:	f011 0f10 	tst.w	r1, #16
    38ba:	d109      	bne.n	38d0 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    38bc:	f011 0f40 	tst.w	r1, #64	; 0x40
    38c0:	d108      	bne.n	38d4 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    38c2:	f011 0f20 	tst.w	r1, #32
    38c6:	d02f      	beq.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    38c8:	2100      	movs	r1, #0
    38ca:	4b40      	ldr	r3, [pc, #256]	; (39cc <_usb_d_dev_handler+0x264>)
    38cc:	4798      	blx	r3
    38ce:	e02b      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    38d0:	47c8      	blx	r9
    38d2:	e029      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    38d4:	2101      	movs	r1, #1
    38d6:	4b3d      	ldr	r3, [pc, #244]	; (39cc <_usb_d_dev_handler+0x264>)
    38d8:	4798      	blx	r3
    38da:	e025      	b.n	3928 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    38dc:	f011 0f40 	tst.w	r1, #64	; 0x40
    38e0:	d111      	bne.n	3906 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    38e2:	f011 0f08 	tst.w	r1, #8
    38e6:	d112      	bne.n	390e <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    38e8:	f011 0f02 	tst.w	r1, #2
    38ec:	d112      	bne.n	3914 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    38ee:	f003 0307 	and.w	r3, r3, #7
    38f2:	2b01      	cmp	r3, #1
    38f4:	d118      	bne.n	3928 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    38f6:	f011 0f04 	tst.w	r1, #4
    38fa:	d10f      	bne.n	391c <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    38fc:	f011 0f10 	tst.w	r1, #16
    3900:	d012      	beq.n	3928 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    3902:	47c8      	blx	r9
    3904:	e010      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    3906:	2101      	movs	r1, #1
    3908:	4b30      	ldr	r3, [pc, #192]	; (39cc <_usb_d_dev_handler+0x264>)
    390a:	4798      	blx	r3
    390c:	e00c      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    390e:	2101      	movs	r1, #1
    3910:	47c0      	blx	r8
    3912:	e009      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    3914:	2101      	movs	r1, #1
    3916:	4b2e      	ldr	r3, [pc, #184]	; (39d0 <_usb_d_dev_handler+0x268>)
    3918:	4798      	blx	r3
    391a:	e005      	b.n	3928 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    391c:	2100      	movs	r1, #0
    391e:	47c0      	blx	r8
    3920:	e002      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    3922:	2100      	movs	r1, #0
    3924:	4b29      	ldr	r3, [pc, #164]	; (39cc <_usb_d_dev_handler+0x264>)
    3926:	4798      	blx	r3
    3928:	3401      	adds	r4, #1
    392a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    392c:	2c09      	cmp	r4, #9
    392e:	d042      	beq.n	39b6 <_usb_d_dev_handler+0x24e>
    3930:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    3932:	7cab      	ldrb	r3, [r5, #18]
    3934:	2bff      	cmp	r3, #255	; 0xff
    3936:	d0f7      	beq.n	3928 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    3938:	f003 030f 	and.w	r3, r3, #15
    393c:	2101      	movs	r1, #1
    393e:	4099      	lsls	r1, r3
    3940:	4231      	tst	r1, r6
    3942:	d0f1      	beq.n	3928 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3944:	0159      	lsls	r1, r3, #5
    3946:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    394a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    394e:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3950:	015b      	lsls	r3, r3, #5
    3952:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3956:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    395a:	4019      	ands	r1, r3
    395c:	d0e4      	beq.n	3928 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    395e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    3962:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3966:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    396a:	f003 0247 	and.w	r2, r3, #71	; 0x47
    396e:	2a01      	cmp	r2, #1
    3970:	d0a1      	beq.n	38b6 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3972:	f013 0f80 	tst.w	r3, #128	; 0x80
    3976:	d1b1      	bne.n	38dc <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3978:	f011 0f20 	tst.w	r1, #32
    397c:	d1d1      	bne.n	3922 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    397e:	f011 0f04 	tst.w	r1, #4
    3982:	d10e      	bne.n	39a2 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3984:	f011 0f01 	tst.w	r1, #1
    3988:	d10e      	bne.n	39a8 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    398a:	f003 0307 	and.w	r3, r3, #7
    398e:	2b01      	cmp	r3, #1
    3990:	d1ca      	bne.n	3928 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3992:	f011 0f08 	tst.w	r1, #8
    3996:	d10b      	bne.n	39b0 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3998:	f011 0f10 	tst.w	r1, #16
    399c:	d0c4      	beq.n	3928 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    399e:	47c8      	blx	r9
    39a0:	e7c2      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    39a2:	2100      	movs	r1, #0
    39a4:	47c0      	blx	r8
    39a6:	e7bf      	b.n	3928 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    39a8:	2101      	movs	r1, #1
    39aa:	4b0a      	ldr	r3, [pc, #40]	; (39d4 <_usb_d_dev_handler+0x26c>)
    39ac:	4798      	blx	r3
    39ae:	e7bb      	b.n	3928 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    39b0:	2101      	movs	r1, #1
    39b2:	47c0      	blx	r8
    39b4:	e7b8      	b.n	3928 <_usb_d_dev_handler+0x1c0>
    39b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    39ba:	bf00      	nop
    39bc:	200006b0 	.word	0x200006b0
    39c0:	2000063c 	.word	0x2000063c
    39c4:	40001000 	.word	0x40001000
    39c8:	000033b1 	.word	0x000033b1
    39cc:	000031ed 	.word	0x000031ed
    39d0:	000033f5 	.word	0x000033f5
    39d4:	00003579 	.word	0x00003579
    39d8:	00003171 	.word	0x00003171
    39dc:	000032b1 	.word	0x000032b1

000039e0 <_usb_d_dev_init>:
{
    39e0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    39e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    39e6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    39e8:	f013 0f01 	tst.w	r3, #1
    39ec:	d124      	bne.n	3a38 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    39ee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    39f2:	7893      	ldrb	r3, [r2, #2]
    39f4:	f013 0f03 	tst.w	r3, #3
    39f8:	d1fb      	bne.n	39f2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    39fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    39fe:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3a00:	f013 0f02 	tst.w	r3, #2
    3a04:	d00f      	beq.n	3a26 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3a06:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a0a:	7813      	ldrb	r3, [r2, #0]
    3a0c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3a10:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a12:	7893      	ldrb	r3, [r2, #2]
    3a14:	f013 0f03 	tst.w	r3, #3
    3a18:	d1fb      	bne.n	3a12 <_usb_d_dev_init+0x32>
    3a1a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a1e:	7893      	ldrb	r3, [r2, #2]
    3a20:	f013 0f02 	tst.w	r3, #2
    3a24:	d1fb      	bne.n	3a1e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3a26:	2201      	movs	r2, #1
    3a28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3a2c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a2e:	461a      	mov	r2, r3
    3a30:	7893      	ldrb	r3, [r2, #2]
    3a32:	f013 0f03 	tst.w	r3, #3
    3a36:	d1fb      	bne.n	3a30 <_usb_d_dev_init+0x50>
    3a38:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a3c:	7893      	ldrb	r3, [r2, #2]
    3a3e:	f013 0f01 	tst.w	r3, #1
    3a42:	d1fb      	bne.n	3a3c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3a44:	4b21      	ldr	r3, [pc, #132]	; (3acc <_usb_d_dev_init+0xec>)
    3a46:	4a22      	ldr	r2, [pc, #136]	; (3ad0 <_usb_d_dev_init+0xf0>)
    3a48:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3a4a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3a4c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3a4e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3a50:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    3a52:	4b20      	ldr	r3, [pc, #128]	; (3ad4 <_usb_d_dev_init+0xf4>)
    3a54:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3a56:	4b20      	ldr	r3, [pc, #128]	; (3ad8 <_usb_d_dev_init+0xf8>)
    3a58:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3a5a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3a5e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3a62:	f011 011f 	ands.w	r1, r1, #31
    3a66:	d02b      	beq.n	3ac0 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    3a68:	291f      	cmp	r1, #31
    3a6a:	bf08      	it	eq
    3a6c:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3a6e:	b34b      	cbz	r3, 3ac4 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    3a70:	2b1f      	cmp	r3, #31
    3a72:	bf08      	it	eq
    3a74:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3a76:	b33a      	cbz	r2, 3ac8 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    3a78:	2a07      	cmp	r2, #7
    3a7a:	bf08      	it	eq
    3a7c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3a7e:	f003 031f 	and.w	r3, r3, #31
    3a82:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3a86:	0312      	lsls	r2, r2, #12
    3a88:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3a8c:	4313      	orrs	r3, r2
    3a8e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a92:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3a94:	78d3      	ldrb	r3, [r2, #3]
    3a96:	f043 0303 	orr.w	r3, r3, #3
    3a9a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3a9c:	78d3      	ldrb	r3, [r2, #3]
    3a9e:	f043 030c 	orr.w	r3, r3, #12
    3aa2:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3aa4:	2304      	movs	r3, #4
    3aa6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3aa8:	7893      	ldrb	r3, [r2, #2]
    3aaa:	f013 0f03 	tst.w	r3, #3
    3aae:	d1fb      	bne.n	3aa8 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3ab0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3ab4:	4a05      	ldr	r2, [pc, #20]	; (3acc <_usb_d_dev_init+0xec>)
    3ab6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3ab8:	2201      	movs	r2, #1
    3aba:	811a      	strh	r2, [r3, #8]
}
    3abc:	2000      	movs	r0, #0
    3abe:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3ac0:	2109      	movs	r1, #9
    3ac2:	e7d4      	b.n	3a6e <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    3ac4:	2319      	movs	r3, #25
    3ac6:	e7d6      	b.n	3a76 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    3ac8:	2206      	movs	r2, #6
    3aca:	e7d8      	b.n	3a7e <_usb_d_dev_init+0x9e>
    3acc:	2000063c 	.word	0x2000063c
    3ad0:	0000316d 	.word	0x0000316d
    3ad4:	000033b1 	.word	0x000033b1
    3ad8:	00800084 	.word	0x00800084

00003adc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3adc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3ae0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3ae2:	f013 0f03 	tst.w	r3, #3
    3ae6:	d129      	bne.n	3b3c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3ae8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3aec:	7893      	ldrb	r3, [r2, #2]
    3aee:	f013 0f03 	tst.w	r3, #3
    3af2:	d1fb      	bne.n	3aec <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    3af4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3afc:	f013 0f02 	tst.w	r3, #2
    3b00:	d108      	bne.n	3b14 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    3b02:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3b06:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b0a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3b0c:	7893      	ldrb	r3, [r2, #2]
    3b0e:	f013 0f03 	tst.w	r3, #3
    3b12:	d1fb      	bne.n	3b0c <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b14:	4b0b      	ldr	r3, [pc, #44]	; (3b44 <_usb_d_dev_enable+0x68>)
    3b16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b1a:	609a      	str	r2, [r3, #8]
    3b1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3b20:	609a      	str	r2, [r3, #8]
    3b22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3b26:	609a      	str	r2, [r3, #8]
    3b28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3b2c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3b2e:	f240 228d 	movw	r2, #653	; 0x28d
    3b32:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b36:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3b38:	2000      	movs	r0, #0
    3b3a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3b3c:	f06f 0010 	mvn.w	r0, #16
}
    3b40:	4770      	bx	lr
    3b42:	bf00      	nop
    3b44:	e000e100 	.word	0xe000e100

00003b48 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3b48:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b4c:	8913      	ldrh	r3, [r2, #8]
    3b4e:	f023 0301 	bic.w	r3, r3, #1
    3b52:	041b      	lsls	r3, r3, #16
    3b54:	0c1b      	lsrs	r3, r3, #16
    3b56:	8113      	strh	r3, [r2, #8]
    3b58:	4770      	bx	lr

00003b5a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3b5a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3b5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b62:	7298      	strb	r0, [r3, #10]
    3b64:	4770      	bx	lr
	...

00003b68 <_usb_d_dev_ep_init>:
{
    3b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b6a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b6e:	f010 050f 	ands.w	r5, r0, #15
    3b72:	d04d      	beq.n	3c10 <_usb_d_dev_ep_init+0xa8>
    3b74:	f1be 0f00 	cmp.w	lr, #0
    3b78:	bfb4      	ite	lt
    3b7a:	1cac      	addlt	r4, r5, #2
    3b7c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3b7e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3b82:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3b84:	2d02      	cmp	r5, #2
    3b86:	d947      	bls.n	3c18 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    3b88:	f06f 0011 	mvn.w	r0, #17
    3b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3b8e:	f1be 0f00 	cmp.w	lr, #0
    3b92:	db1b      	blt.n	3bcc <_usb_d_dev_ep_init+0x64>
    3b94:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3b98:	4e37      	ldr	r6, [pc, #220]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3b9a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3b9e:	2d00      	cmp	r5, #0
    3ba0:	d15e      	bne.n	3c60 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3ba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ba6:	4d34      	ldr	r5, [pc, #208]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3ba8:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    3bac:	4d33      	ldr	r5, [pc, #204]	; (3c7c <_usb_d_dev_ep_init+0x114>)
    3bae:	00a6      	lsls	r6, r4, #2
    3bb0:	1933      	adds	r3, r6, r4
    3bb2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3bb6:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    3bba:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    3bbe:	3101      	adds	r1, #1
    3bc0:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    3bc4:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    3bc8:	2000      	movs	r0, #0
    3bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3bcc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3bd0:	4e29      	ldr	r6, [pc, #164]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3bd2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3bd6:	686d      	ldr	r5, [r5, #4]
    3bd8:	b935      	cbnz	r5, 3be8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3bda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bde:	4d26      	ldr	r5, [pc, #152]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3be0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3be4:	685f      	ldr	r7, [r3, #4]
    3be6:	e7e1      	b.n	3bac <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3be8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3bec:	4e22      	ldr	r6, [pc, #136]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3bee:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3bf2:	896d      	ldrh	r5, [r5, #10]
    3bf4:	4295      	cmp	r5, r2
    3bf6:	daf0      	bge.n	3bda <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    3bf8:	f06f 0012 	mvn.w	r0, #18
    3bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    3bfe:	f06f 0013 	mvn.w	r0, #19
    3c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3c04:	f06f 0013 	mvn.w	r0, #19
    3c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    3c0a:	f06f 0012 	mvn.w	r0, #18
    3c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3c10:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    3c14:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3c16:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    3c18:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    3c1c:	4f17      	ldr	r7, [pc, #92]	; (3c7c <_usb_d_dev_ep_init+0x114>)
    3c1e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    3c22:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    3c26:	2eff      	cmp	r6, #255	; 0xff
    3c28:	d1e9      	bne.n	3bfe <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3c2a:	2900      	cmp	r1, #0
    3c2c:	d1af      	bne.n	3b8e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c2e:	b125      	cbz	r5, 3c3a <_usb_d_dev_ep_init+0xd2>
    3c30:	f1be 0f00 	cmp.w	lr, #0
    3c34:	bfa4      	itt	ge
    3c36:	3502      	addge	r5, #2
    3c38:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    3c3a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3c3e:	4e0f      	ldr	r6, [pc, #60]	; (3c7c <_usb_d_dev_ep_init+0x114>)
    3c40:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3c44:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    3c48:	2dff      	cmp	r5, #255	; 0xff
    3c4a:	d1db      	bne.n	3c04 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    3c4c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3c50:	4e09      	ldr	r6, [pc, #36]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3c52:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3c56:	2d00      	cmp	r5, #0
    3c58:	d0d7      	beq.n	3c0a <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3c5a:	f1be 0f00 	cmp.w	lr, #0
    3c5e:	dbb5      	blt.n	3bcc <_usb_d_dev_ep_init+0x64>
    3c60:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3c64:	4e04      	ldr	r6, [pc, #16]	; (3c78 <_usb_d_dev_ep_init+0x110>)
    3c66:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3c6a:	892d      	ldrh	r5, [r5, #8]
    3c6c:	4295      	cmp	r5, r2
    3c6e:	da98      	bge.n	3ba2 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    3c70:	f06f 0012 	mvn.w	r0, #18
    3c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c76:	bf00      	nop
    3c78:	00005d04 	.word	0x00005d04
    3c7c:	2000063c 	.word	0x2000063c

00003c80 <_usb_d_dev_ep_deinit>:
{
    3c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c82:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c84:	f010 060f 	ands.w	r6, r0, #15
    3c88:	d00e      	beq.n	3ca8 <_usb_d_dev_ep_deinit+0x28>
    3c8a:	2f00      	cmp	r7, #0
    3c8c:	bfb4      	ite	lt
    3c8e:	1cb3      	addlt	r3, r6, #2
    3c90:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3c92:	2e02      	cmp	r6, #2
    3c94:	d900      	bls.n	3c98 <_usb_d_dev_ep_deinit+0x18>
    3c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    3c98:	461d      	mov	r5, r3
    3c9a:	3301      	adds	r3, #1
    3c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3ca0:	4a24      	ldr	r2, [pc, #144]	; (3d34 <_usb_d_dev_ep_deinit+0xb4>)
    3ca2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    3ca6:	e002      	b.n	3cae <_usb_d_dev_ep_deinit+0x2e>
    3ca8:	f8df e094 	ldr.w	lr, [pc, #148]	; 3d40 <_usb_d_dev_ep_deinit+0xc0>
    3cac:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3cae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3cb2:	4a21      	ldr	r2, [pc, #132]	; (3d38 <_usb_d_dev_ep_deinit+0xb8>)
    3cb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cb8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    3cbc:	2aff      	cmp	r2, #255	; 0xff
    3cbe:	d0ea      	beq.n	3c96 <_usb_d_dev_ep_deinit+0x16>
    3cc0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3cc2:	2203      	movs	r2, #3
    3cc4:	0ff9      	lsrs	r1, r7, #31
    3cc6:	4670      	mov	r0, lr
    3cc8:	4b1c      	ldr	r3, [pc, #112]	; (3d3c <_usb_d_dev_ep_deinit+0xbc>)
    3cca:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3ccc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3cd0:	4a19      	ldr	r2, [pc, #100]	; (3d38 <_usb_d_dev_ep_deinit+0xb8>)
    3cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cd6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3cda:	f003 0307 	and.w	r3, r3, #7
    3cde:	2b01      	cmp	r3, #1
    3ce0:	d016      	beq.n	3d10 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    3ce2:	2f00      	cmp	r7, #0
    3ce4:	db1b      	blt.n	3d1e <_usb_d_dev_ep_deinit+0x9e>
    3ce6:	0160      	lsls	r0, r4, #5
    3ce8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3cec:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3cf0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3cf4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    3cf8:	4b0f      	ldr	r3, [pc, #60]	; (3d38 <_usb_d_dev_ep_deinit+0xb8>)
    3cfa:	00aa      	lsls	r2, r5, #2
    3cfc:	1951      	adds	r1, r2, r5
    3cfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3d02:	2000      	movs	r0, #0
    3d04:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    3d08:	22ff      	movs	r2, #255	; 0xff
    3d0a:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    3d0e:	e7c2      	b.n	3c96 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3d10:	0160      	lsls	r0, r4, #5
    3d12:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3d16:	2300      	movs	r3, #0
    3d18:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3d1c:	e7ec      	b.n	3cf8 <_usb_d_dev_ep_deinit+0x78>
    3d1e:	0176      	lsls	r6, r6, #5
    3d20:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3d24:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    3d28:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3d2c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    3d30:	e7e2      	b.n	3cf8 <_usb_d_dev_ep_deinit+0x78>
    3d32:	bf00      	nop
    3d34:	2000069c 	.word	0x2000069c
    3d38:	2000063c 	.word	0x2000063c
    3d3c:	00003245 	.word	0x00003245
    3d40:	200006b0 	.word	0x200006b0

00003d44 <_usb_d_dev_ep_enable>:
{
    3d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d46:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3d48:	f010 000f 	ands.w	r0, r0, #15
    3d4c:	f000 80a6 	beq.w	3e9c <_usb_d_dev_ep_enable+0x158>
    3d50:	2f00      	cmp	r7, #0
    3d52:	bfb4      	ite	lt
    3d54:	1c83      	addlt	r3, r0, #2
    3d56:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3d58:	4606      	mov	r6, r0
    3d5a:	0142      	lsls	r2, r0, #5
    3d5c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3d60:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3d64:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3d66:	2802      	cmp	r0, #2
    3d68:	f240 809f 	bls.w	3eaa <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    3d6c:	f06f 0011 	mvn.w	r0, #17
    3d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3d72:	f014 0f77 	tst.w	r4, #119	; 0x77
    3d76:	f040 8088 	bne.w	3e8a <_usb_d_dev_ep_enable+0x146>
    3d7a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3d7e:	2111      	movs	r1, #17
    3d80:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3d84:	4c97      	ldr	r4, [pc, #604]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3d86:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    3d8a:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    3d8e:	4996      	ldr	r1, [pc, #600]	; (3fe8 <_usb_d_dev_ep_enable+0x2a4>)
    3d90:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3d94:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    3d98:	f200 80cc 	bhi.w	3f34 <_usb_d_dev_ep_enable+0x1f0>
    3d9c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    3da0:	f200 810a 	bhi.w	3fb8 <_usb_d_dev_ep_enable+0x274>
    3da4:	2c80      	cmp	r4, #128	; 0x80
    3da6:	f200 80f9 	bhi.w	3f9c <_usb_d_dev_ep_enable+0x258>
    3daa:	2c40      	cmp	r4, #64	; 0x40
    3dac:	f200 810b 	bhi.w	3fc6 <_usb_d_dev_ep_enable+0x282>
    3db0:	2c20      	cmp	r4, #32
    3db2:	f200 80fa 	bhi.w	3faa <_usb_d_dev_ep_enable+0x266>
    3db6:	2c10      	cmp	r4, #16
    3db8:	f200 810c 	bhi.w	3fd4 <_usb_d_dev_ep_enable+0x290>
    3dbc:	2c08      	cmp	r4, #8
    3dbe:	bf94      	ite	ls
    3dc0:	2700      	movls	r7, #0
    3dc2:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3dc4:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3dc8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3dca:	f3c4 010d 	ubfx	r1, r4, #0, #14
    3dce:	e0b7      	b.n	3f40 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3dd0:	f014 0f70 	tst.w	r4, #112	; 0x70
    3dd4:	d15c      	bne.n	3e90 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3dd6:	4d83      	ldr	r5, [pc, #524]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3dd8:	009f      	lsls	r7, r3, #2
    3dda:	18f9      	adds	r1, r7, r3
    3ddc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3de0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3de4:	0109      	lsls	r1, r1, #4
    3de6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    3dea:	430c      	orrs	r4, r1
    3dec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3df0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3df4:	443b      	add	r3, r7
    3df6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3dfa:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    3dfe:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e06:	d80f      	bhi.n	3e28 <_usb_d_dev_ep_enable+0xe4>
    3e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3e0c:	d819      	bhi.n	3e42 <_usb_d_dev_ep_enable+0xfe>
    3e0e:	2b80      	cmp	r3, #128	; 0x80
    3e10:	d819      	bhi.n	3e46 <_usb_d_dev_ep_enable+0x102>
    3e12:	2b40      	cmp	r3, #64	; 0x40
    3e14:	d819      	bhi.n	3e4a <_usb_d_dev_ep_enable+0x106>
    3e16:	2b20      	cmp	r3, #32
    3e18:	d819      	bhi.n	3e4e <_usb_d_dev_ep_enable+0x10a>
    3e1a:	2b10      	cmp	r3, #16
    3e1c:	d819      	bhi.n	3e52 <_usb_d_dev_ep_enable+0x10e>
    3e1e:	2b08      	cmp	r3, #8
    3e20:	bf94      	ite	ls
    3e22:	2300      	movls	r3, #0
    3e24:	2301      	movhi	r3, #1
    3e26:	e000      	b.n	3e2a <_usb_d_dev_ep_enable+0xe6>
    3e28:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e2a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    3e2e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e30:	2380      	movs	r3, #128	; 0x80
    3e32:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3e36:	4b6b      	ldr	r3, [pc, #428]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3e38:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3e3c:	2000      	movs	r0, #0
    3e3e:	76b0      	strb	r0, [r6, #26]
    3e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e42:	2306      	movs	r3, #6
    3e44:	e7f1      	b.n	3e2a <_usb_d_dev_ep_enable+0xe6>
    3e46:	2305      	movs	r3, #5
    3e48:	e7ef      	b.n	3e2a <_usb_d_dev_ep_enable+0xe6>
    3e4a:	2304      	movs	r3, #4
    3e4c:	e7ed      	b.n	3e2a <_usb_d_dev_ep_enable+0xe6>
    3e4e:	2303      	movs	r3, #3
    3e50:	e7eb      	b.n	3e2a <_usb_d_dev_ep_enable+0xe6>
    3e52:	2302      	movs	r3, #2
    3e54:	e7e9      	b.n	3e2a <_usb_d_dev_ep_enable+0xe6>
    3e56:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e5c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e5e:	2340      	movs	r3, #64	; 0x40
    3e60:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3e64:	4b5f      	ldr	r3, [pc, #380]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3e66:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3e6a:	2000      	movs	r0, #0
    3e6c:	72b0      	strb	r0, [r6, #10]
    3e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e70:	2106      	movs	r1, #6
    3e72:	e7f1      	b.n	3e58 <_usb_d_dev_ep_enable+0x114>
    3e74:	2105      	movs	r1, #5
    3e76:	e7ef      	b.n	3e58 <_usb_d_dev_ep_enable+0x114>
    3e78:	2104      	movs	r1, #4
    3e7a:	e7ed      	b.n	3e58 <_usb_d_dev_ep_enable+0x114>
    3e7c:	2103      	movs	r1, #3
    3e7e:	e7eb      	b.n	3e58 <_usb_d_dev_ep_enable+0x114>
    3e80:	2102      	movs	r1, #2
    3e82:	e7e9      	b.n	3e58 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3e84:	f06f 0011 	mvn.w	r0, #17
    3e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3e8a:	f06f 0013 	mvn.w	r0, #19
    3e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3e90:	f06f 0013 	mvn.w	r0, #19
    3e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3e96:	f06f 0013 	mvn.w	r0, #19
    3e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3e9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3ea0:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3ea4:	b2e4      	uxtb	r4, r4
    3ea6:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    3ea8:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3eaa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3eae:	494d      	ldr	r1, [pc, #308]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3eb0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3eb4:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    3eb8:	2dff      	cmp	r5, #255	; 0xff
    3eba:	d0e3      	beq.n	3e84 <_usb_d_dev_ep_enable+0x140>
    3ebc:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3ebe:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3ec0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3ec4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    3ec8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3ecc:	f001 0107 	and.w	r1, r1, #7
    3ed0:	2901      	cmp	r1, #1
    3ed2:	f43f af4e 	beq.w	3d72 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    3ed6:	2f00      	cmp	r7, #0
    3ed8:	f6ff af7a 	blt.w	3dd0 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3edc:	f014 0f07 	tst.w	r4, #7
    3ee0:	d1d9      	bne.n	3e96 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3ee2:	4d40      	ldr	r5, [pc, #256]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3ee4:	009f      	lsls	r7, r3, #2
    3ee6:	18f9      	adds	r1, r7, r3
    3ee8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3eec:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3ef0:	f001 0107 	and.w	r1, r1, #7
    3ef4:	430c      	orrs	r4, r1
    3ef6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3efa:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3efe:	443b      	add	r3, r7
    3f00:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3f04:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    3f08:	4b37      	ldr	r3, [pc, #220]	; (3fe8 <_usb_d_dev_ep_enable+0x2a4>)
    3f0a:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3f12:	d8a0      	bhi.n	3e56 <_usb_d_dev_ep_enable+0x112>
    3f14:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3f18:	d8aa      	bhi.n	3e70 <_usb_d_dev_ep_enable+0x12c>
    3f1a:	2980      	cmp	r1, #128	; 0x80
    3f1c:	d8aa      	bhi.n	3e74 <_usb_d_dev_ep_enable+0x130>
    3f1e:	2940      	cmp	r1, #64	; 0x40
    3f20:	d8aa      	bhi.n	3e78 <_usb_d_dev_ep_enable+0x134>
    3f22:	2920      	cmp	r1, #32
    3f24:	d8aa      	bhi.n	3e7c <_usb_d_dev_ep_enable+0x138>
    3f26:	2910      	cmp	r1, #16
    3f28:	d8aa      	bhi.n	3e80 <_usb_d_dev_ep_enable+0x13c>
    3f2a:	2908      	cmp	r1, #8
    3f2c:	bf94      	ite	ls
    3f2e:	2100      	movls	r1, #0
    3f30:	2101      	movhi	r1, #1
    3f32:	e791      	b.n	3e58 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f34:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f38:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f3a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f3e:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f40:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3f44:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f46:	2140      	movs	r1, #64	; 0x40
    3f48:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f4c:	2080      	movs	r0, #128	; 0x80
    3f4e:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3f52:	4a24      	ldr	r2, [pc, #144]	; (3fe4 <_usb_d_dev_ep_enable+0x2a0>)
    3f54:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    3f58:	2000      	movs	r0, #0
    3f5a:	72b0      	strb	r0, [r6, #10]
    3f5c:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f5e:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3f62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3f66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f6a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    3f6e:	016d      	lsls	r5, r5, #5
    3f70:	1953      	adds	r3, r2, r5
    3f72:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3f74:	685a      	ldr	r2, [r3, #4]
    3f76:	f364 329b 	bfi	r2, r4, #14, #14
    3f7a:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3f7c:	685a      	ldr	r2, [r3, #4]
    3f7e:	f360 020d 	bfi	r2, r0, #0, #14
    3f82:	605a      	str	r2, [r3, #4]
    3f84:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    3f88:	22b0      	movs	r2, #176	; 0xb0
    3f8a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f8e:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f92:	461d      	mov	r5, r3
    3f94:	2310      	movs	r3, #16
    3f96:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    3f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f9c:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fa0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fa2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fa6:	2705      	movs	r7, #5
    3fa8:	e7ca      	b.n	3f40 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3faa:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fae:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fb0:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fb4:	2703      	movs	r7, #3
    3fb6:	e7c3      	b.n	3f40 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fb8:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fbc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fbe:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fc2:	2706      	movs	r7, #6
    3fc4:	e7bc      	b.n	3f40 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fc6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fca:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fcc:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fd0:	2704      	movs	r7, #4
    3fd2:	e7b5      	b.n	3f40 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fd4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fd8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fda:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fde:	2702      	movs	r7, #2
    3fe0:	e7ae      	b.n	3f40 <_usb_d_dev_ep_enable+0x1fc>
    3fe2:	bf00      	nop
    3fe4:	2000063c 	.word	0x2000063c
    3fe8:	0fffc000 	.word	0x0fffc000

00003fec <_usb_d_dev_ep_stall>:
{
    3fec:	b470      	push	{r4, r5, r6}
    3fee:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3ff0:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3ff2:	f010 000f 	ands.w	r0, r0, #15
    3ff6:	d008      	beq.n	400a <_usb_d_dev_ep_stall+0x1e>
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	bfb4      	ite	lt
    3ffc:	1c83      	addlt	r3, r0, #2
    3ffe:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    4000:	2802      	cmp	r0, #2
    4002:	d903      	bls.n	400c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4004:	f06f 0011 	mvn.w	r0, #17
    4008:	e018      	b.n	403c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    400a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    400c:	2901      	cmp	r1, #1
    400e:	d017      	beq.n	4040 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    4010:	2900      	cmp	r1, #0
    4012:	d03a      	beq.n	408a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4014:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4018:	4a45      	ldr	r2, [pc, #276]	; (4130 <_usb_d_dev_ep_stall+0x144>)
    401a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    401e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4022:	f003 030f 	and.w	r3, r3, #15
    4026:	015b      	lsls	r3, r3, #5
    4028:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    402c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4030:	2310      	movs	r3, #16
    4032:	40a3      	lsls	r3, r4
    4034:	421a      	tst	r2, r3
    4036:	bf14      	ite	ne
    4038:	2001      	movne	r0, #1
    403a:	2000      	moveq	r0, #0
}
    403c:	bc70      	pop	{r4, r5, r6}
    403e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4040:	2510      	movs	r5, #16
    4042:	40a5      	lsls	r5, r4
    4044:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4046:	493a      	ldr	r1, [pc, #232]	; (4130 <_usb_d_dev_ep_stall+0x144>)
    4048:	009e      	lsls	r6, r3, #2
    404a:	18f2      	adds	r2, r6, r3
    404c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4050:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4054:	f002 020f 	and.w	r2, r2, #15
    4058:	0150      	lsls	r0, r2, #5
    405a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    405e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4062:	2020      	movs	r0, #32
    4064:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4068:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    406a:	0152      	lsls	r2, r2, #5
    406c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4070:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    4074:	4433      	add	r3, r6
    4076:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    407a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    407e:	f042 0208 	orr.w	r2, r2, #8
    4082:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    4086:	2000      	movs	r0, #0
    4088:	e7d8      	b.n	403c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    408a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    408e:	4928      	ldr	r1, [pc, #160]	; (4130 <_usb_d_dev_ep_stall+0x144>)
    4090:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4094:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    4098:	f002 020f 	and.w	r2, r2, #15
    409c:	0151      	lsls	r1, r2, #5
    409e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    40a2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    40a6:	2010      	movs	r0, #16
    40a8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    40aa:	4205      	tst	r5, r0
    40ac:	d03c      	beq.n	4128 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    40ae:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    40b0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    40b4:	2020      	movs	r0, #32
    40b6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    40b8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    40ba:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    40be:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    40c2:	4202      	tst	r2, r0
    40c4:	d007      	beq.n	40d6 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40c6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    40ca:	2201      	movs	r2, #1
    40cc:	fa02 f404 	lsl.w	r4, r2, r4
    40d0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    40d2:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    40d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    40da:	4815      	ldr	r0, [pc, #84]	; (4130 <_usb_d_dev_ep_stall+0x144>)
    40dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    40e0:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    40e4:	f002 0207 	and.w	r2, r2, #7
    40e8:	2a01      	cmp	r2, #1
    40ea:	d00c      	beq.n	4106 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    40ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    40f0:	4a0f      	ldr	r2, [pc, #60]	; (4130 <_usb_d_dev_ep_stall+0x144>)
    40f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    40f6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    40fa:	f36f 02c3 	bfc	r2, #3, #1
    40fe:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4102:	2000      	movs	r0, #0
    4104:	e79a      	b.n	403c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4106:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    410a:	f012 0f30 	tst.w	r2, #48	; 0x30
    410e:	d10d      	bne.n	412c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    4110:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4114:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    4118:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    411c:	f36f 02c3 	bfc	r2, #3, #1
    4120:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4124:	2000      	movs	r0, #0
    4126:	e789      	b.n	403c <_usb_d_dev_ep_stall+0x50>
    4128:	2000      	movs	r0, #0
    412a:	e787      	b.n	403c <_usb_d_dev_ep_stall+0x50>
    412c:	2000      	movs	r0, #0
    412e:	e785      	b.n	403c <_usb_d_dev_ep_stall+0x50>
    4130:	2000063c 	.word	0x2000063c

00004134 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4134:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    4136:	f000 040f 	and.w	r4, r0, #15
    413a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    413c:	4a14      	ldr	r2, [pc, #80]	; (4190 <_usb_d_dev_ep_read_req+0x5c>)
    413e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    4140:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    4142:	6840      	ldr	r0, [r0, #4]
    4144:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4148:	2c02      	cmp	r4, #2
    414a:	d817      	bhi.n	417c <_usb_d_dev_ep_read_req+0x48>
    414c:	b1c9      	cbz	r1, 4182 <_usb_d_dev_ep_read_req+0x4e>
    414e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4152:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    4156:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4158:	2a11      	cmp	r2, #17
    415a:	d115      	bne.n	4188 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    415c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    4160:	f012 0f10 	tst.w	r2, #16
    4164:	d102      	bne.n	416c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    4166:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4168:	bc30      	pop	{r4, r5}
    416a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    416c:	682c      	ldr	r4, [r5, #0]
    416e:	686a      	ldr	r2, [r5, #4]
    4170:	600c      	str	r4, [r1, #0]
    4172:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4174:	2210      	movs	r2, #16
    4176:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    417a:	e7f5      	b.n	4168 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    417c:	f06f 0011 	mvn.w	r0, #17
    4180:	e7f2      	b.n	4168 <_usb_d_dev_ep_read_req+0x34>
    4182:	f06f 0011 	mvn.w	r0, #17
    4186:	e7ef      	b.n	4168 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    4188:	f06f 0012 	mvn.w	r0, #18
    418c:	e7ec      	b.n	4168 <_usb_d_dev_ep_read_req+0x34>
    418e:	bf00      	nop
    4190:	2000063c 	.word	0x2000063c

00004194 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4198:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    419a:	7a03      	ldrb	r3, [r0, #8]
    419c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    419e:	f013 030f 	ands.w	r3, r3, #15
    41a2:	f000 80c2 	beq.w	432a <_usb_d_dev_ep_trans+0x196>
    41a6:	2e00      	cmp	r6, #0
    41a8:	bfb4      	ite	lt
    41aa:	1c9a      	addlt	r2, r3, #2
    41ac:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    41ae:	4614      	mov	r4, r2
    41b0:	4969      	ldr	r1, [pc, #420]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    41b2:	f101 0760 	add.w	r7, r1, #96	; 0x60
    41b6:	1c55      	adds	r5, r2, #1
    41b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    41bc:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    41c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    41c4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    41c8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    41cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    41d0:	428a      	cmp	r2, r1
    41d2:	d025      	beq.n	4220 <_usb_d_dev_ep_trans+0x8c>
    41d4:	1e55      	subs	r5, r2, #1
    41d6:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    41d8:	6841      	ldr	r1, [r0, #4]
    41da:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    41dc:	2b02      	cmp	r3, #2
    41de:	f200 8092 	bhi.w	4306 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    41e2:	6803      	ldr	r3, [r0, #0]
    41e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    41e8:	d31c      	bcc.n	4224 <_usb_d_dev_ep_trans+0x90>
    41ea:	eb03 0c01 	add.w	ip, r3, r1
    41ee:	f8df e180 	ldr.w	lr, [pc, #384]	; 4370 <_usb_d_dev_ep_trans+0x1dc>
    41f2:	45f4      	cmp	ip, lr
    41f4:	d816      	bhi.n	4224 <_usb_d_dev_ep_trans+0x90>
    41f6:	f013 0f03 	tst.w	r3, #3
    41fa:	d113      	bne.n	4224 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    41fc:	2e00      	cmp	r6, #0
    41fe:	db2a      	blt.n	4256 <_usb_d_dev_ep_trans+0xc2>
    4200:	428a      	cmp	r2, r1
    4202:	f200 809c 	bhi.w	433e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    4206:	b34d      	cbz	r5, 425c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    4208:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    420c:	4a52      	ldr	r2, [pc, #328]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    420e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4216:	2b00      	cmp	r3, #0
    4218:	d07b      	beq.n	4312 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    421a:	f04f 0800 	mov.w	r8, #0
    421e:	e00c      	b.n	423a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4220:	4615      	mov	r5, r2
    4222:	e7d9      	b.n	41d8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    4224:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4228:	4a4b      	ldr	r2, [pc, #300]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    422a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    422e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4232:	2b00      	cmp	r3, #0
    4234:	d06a      	beq.n	430c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    4236:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    423a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    423e:	4a46      	ldr	r2, [pc, #280]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    4240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4244:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4248:	f013 0f08 	tst.w	r3, #8
    424c:	d009      	beq.n	4262 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    424e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    4250:	b003      	add	sp, #12
    4252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    4256:	f04f 0800 	mov.w	r8, #0
    425a:	e7ee      	b.n	423a <_usb_d_dev_ep_trans+0xa6>
    425c:	f04f 0800 	mov.w	r8, #0
    4260:	e7eb      	b.n	423a <_usb_d_dev_ep_trans+0xa6>
    4262:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    4264:	a801      	add	r0, sp, #4
    4266:	4b3d      	ldr	r3, [pc, #244]	; (435c <_usb_d_dev_ep_trans+0x1c8>)
    4268:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    426a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    426e:	4a3a      	ldr	r2, [pc, #232]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    4270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4274:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4278:	f013 0f40 	tst.w	r3, #64	; 0x40
    427c:	d13c      	bne.n	42f8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    427e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    4282:	4b35      	ldr	r3, [pc, #212]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    4284:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    4288:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    428c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4290:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    4294:	a801      	add	r0, sp, #4
    4296:	4b32      	ldr	r3, [pc, #200]	; (4360 <_usb_d_dev_ep_trans+0x1cc>)
    4298:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    429a:	f8da 3000 	ldr.w	r3, [sl]
    429e:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    42a2:	f8da 3004 	ldr.w	r3, [sl, #4]
    42a6:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    42aa:	2300      	movs	r3, #0
    42ac:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    42b0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    42b2:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    42b6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    42ba:	f368 1345 	bfi	r3, r8, #5, #1
    42be:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    42c2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    42c6:	b1e3      	cbz	r3, 4302 <_usb_d_dev_ep_trans+0x16e>
    42c8:	fab5 f585 	clz	r5, r5
    42cc:	096d      	lsrs	r5, r5, #5
    42ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    42d2:	4b21      	ldr	r3, [pc, #132]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    42d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    42d8:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    42dc:	f365 1304 	bfi	r3, r5, #4, #1
    42e0:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    42e4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    42e6:	f04f 0100 	mov.w	r1, #0
    42ea:	4638      	mov	r0, r7
    42ec:	bfb4      	ite	lt
    42ee:	4b1d      	ldrlt	r3, [pc, #116]	; (4364 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    42f0:	4b1d      	ldrge	r3, [pc, #116]	; (4368 <_usb_d_dev_ep_trans+0x1d4>)
    42f2:	4798      	blx	r3
	return ERR_NONE;
    42f4:	2000      	movs	r0, #0
    42f6:	e7ab      	b.n	4250 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    42f8:	a801      	add	r0, sp, #4
    42fa:	4b19      	ldr	r3, [pc, #100]	; (4360 <_usb_d_dev_ep_trans+0x1cc>)
    42fc:	4798      	blx	r3
		return USB_BUSY;
    42fe:	2001      	movs	r0, #1
    4300:	e7a6      	b.n	4250 <_usb_d_dev_ep_trans+0xbc>
    4302:	2500      	movs	r5, #0
    4304:	e7e3      	b.n	42ce <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    4306:	f06f 0011 	mvn.w	r0, #17
    430a:	e7a1      	b.n	4250 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    430c:	f06f 0012 	mvn.w	r0, #18
    4310:	e79e      	b.n	4250 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    4312:	f06f 0011 	mvn.w	r0, #17
    4316:	e79b      	b.n	4250 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4318:	f06f 0012 	mvn.w	r0, #18
    431c:	e798      	b.n	4250 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    431e:	6841      	ldr	r1, [r0, #4]
    4320:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    4324:	4f11      	ldr	r7, [pc, #68]	; (436c <_usb_d_dev_ep_trans+0x1d8>)
    4326:	2400      	movs	r4, #0
    4328:	e75b      	b.n	41e2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    432a:	4a0b      	ldr	r2, [pc, #44]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    432c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    4330:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4334:	428a      	cmp	r2, r1
    4336:	d0f2      	beq.n	431e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    4338:	4f0c      	ldr	r7, [pc, #48]	; (436c <_usb_d_dev_ep_trans+0x1d8>)
    433a:	2400      	movs	r4, #0
    433c:	e74a      	b.n	41d4 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    433e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4342:	4a05      	ldr	r2, [pc, #20]	; (4358 <_usb_d_dev_ep_trans+0x1c4>)
    4344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    434c:	2b00      	cmp	r3, #0
    434e:	d0e3      	beq.n	4318 <_usb_d_dev_ep_trans+0x184>
    4350:	f04f 0801 	mov.w	r8, #1
    4354:	e771      	b.n	423a <_usb_d_dev_ep_trans+0xa6>
    4356:	bf00      	nop
    4358:	2000063c 	.word	0x2000063c
    435c:	00001c41 	.word	0x00001c41
    4360:	00001c4f 	.word	0x00001c4f
    4364:	000033f5 	.word	0x000033f5
    4368:	00003579 	.word	0x00003579
    436c:	200006b0 	.word	0x200006b0
    4370:	20041fff 	.word	0x20041fff

00004374 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4374:	4b06      	ldr	r3, [pc, #24]	; (4390 <_usb_d_dev_register_callback+0x1c>)
    4376:	2900      	cmp	r1, #0
    4378:	bf08      	it	eq
    437a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    437c:	2801      	cmp	r0, #1
    437e:	d003      	beq.n	4388 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    4380:	b908      	cbnz	r0, 4386 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4382:	4b04      	ldr	r3, [pc, #16]	; (4394 <_usb_d_dev_register_callback+0x20>)
    4384:	6619      	str	r1, [r3, #96]	; 0x60
    4386:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4388:	4b02      	ldr	r3, [pc, #8]	; (4394 <_usb_d_dev_register_callback+0x20>)
    438a:	6659      	str	r1, [r3, #100]	; 0x64
    438c:	4770      	bx	lr
    438e:	bf00      	nop
    4390:	0000316d 	.word	0x0000316d
    4394:	2000063c 	.word	0x2000063c

00004398 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4398:	4b09      	ldr	r3, [pc, #36]	; (43c0 <_usb_d_dev_register_ep_callback+0x28>)
    439a:	2900      	cmp	r1, #0
    439c:	bf08      	it	eq
    439e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    43a0:	4603      	mov	r3, r0
    43a2:	b130      	cbz	r0, 43b2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    43a4:	2801      	cmp	r0, #1
    43a6:	d007      	beq.n	43b8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    43a8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    43aa:	bf04      	itt	eq
    43ac:	4b05      	ldreq	r3, [pc, #20]	; (43c4 <_usb_d_dev_register_ep_callback+0x2c>)
    43ae:	6719      	streq	r1, [r3, #112]	; 0x70
    43b0:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    43b2:	4b04      	ldr	r3, [pc, #16]	; (43c4 <_usb_d_dev_register_ep_callback+0x2c>)
    43b4:	6699      	str	r1, [r3, #104]	; 0x68
    43b6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    43b8:	4b02      	ldr	r3, [pc, #8]	; (43c4 <_usb_d_dev_register_ep_callback+0x2c>)
    43ba:	66d9      	str	r1, [r3, #108]	; 0x6c
    43bc:	4770      	bx	lr
    43be:	bf00      	nop
    43c0:	0000316d 	.word	0x0000316d
    43c4:	2000063c 	.word	0x2000063c

000043c8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    43c8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    43ca:	4b01      	ldr	r3, [pc, #4]	; (43d0 <USB_0_Handler+0x8>)
    43cc:	4798      	blx	r3
    43ce:	bd08      	pop	{r3, pc}
    43d0:	00003769 	.word	0x00003769

000043d4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    43d4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    43d6:	4b01      	ldr	r3, [pc, #4]	; (43dc <USB_1_Handler+0x8>)
    43d8:	4798      	blx	r3
    43da:	bd08      	pop	{r3, pc}
    43dc:	00003769 	.word	0x00003769

000043e0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    43e0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    43e2:	4b01      	ldr	r3, [pc, #4]	; (43e8 <USB_2_Handler+0x8>)
    43e4:	4798      	blx	r3
    43e6:	bd08      	pop	{r3, pc}
    43e8:	00003769 	.word	0x00003769

000043ec <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    43ec:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    43ee:	4b01      	ldr	r3, [pc, #4]	; (43f4 <USB_3_Handler+0x8>)
    43f0:	4798      	blx	r3
    43f2:	bd08      	pop	{r3, pc}
    43f4:	00003769 	.word	0x00003769

000043f8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    43f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43fa:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    43fc:	780b      	ldrb	r3, [r1, #0]
    43fe:	f3c3 1441 	ubfx	r4, r3, #5, #2
    4402:	2c01      	cmp	r4, #1
    4404:	d15e      	bne.n	44c4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    4406:	888c      	ldrh	r4, [r1, #4]
    4408:	4d35      	ldr	r5, [pc, #212]	; (44e0 <cdcdf_acm_req+0xe8>)
    440a:	782d      	ldrb	r5, [r5, #0]
    440c:	42a5      	cmp	r5, r4
    440e:	d003      	beq.n	4418 <cdcdf_acm_req+0x20>
    4410:	4d33      	ldr	r5, [pc, #204]	; (44e0 <cdcdf_acm_req+0xe8>)
    4412:	786d      	ldrb	r5, [r5, #1]
    4414:	42a5      	cmp	r5, r4
    4416:	d158      	bne.n	44ca <cdcdf_acm_req+0xd2>
    4418:	4616      	mov	r6, r2
    441a:	460c      	mov	r4, r1
    441c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    441e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4422:	d10c      	bne.n	443e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    4424:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    4426:	4b2f      	ldr	r3, [pc, #188]	; (44e4 <cdcdf_acm_req+0xec>)
    4428:	4798      	blx	r3
    442a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    442c:	7863      	ldrb	r3, [r4, #1]
    442e:	2b20      	cmp	r3, #32
    4430:	d013      	beq.n	445a <cdcdf_acm_req+0x62>
    4432:	2b22      	cmp	r3, #34	; 0x22
    4434:	d032      	beq.n	449c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    4436:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    443a:	b003      	add	sp, #12
    443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    443e:	2a01      	cmp	r2, #1
    4440:	d046      	beq.n	44d0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    4442:	784b      	ldrb	r3, [r1, #1]
    4444:	2b21      	cmp	r3, #33	; 0x21
    4446:	d145      	bne.n	44d4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4448:	88cb      	ldrh	r3, [r1, #6]
    444a:	2b07      	cmp	r3, #7
    444c:	d145      	bne.n	44da <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    444e:	2300      	movs	r3, #0
    4450:	2207      	movs	r2, #7
    4452:	4925      	ldr	r1, [pc, #148]	; (44e8 <cdcdf_acm_req+0xf0>)
    4454:	4c25      	ldr	r4, [pc, #148]	; (44ec <cdcdf_acm_req+0xf4>)
    4456:	47a0      	blx	r4
    4458:	e7ef      	b.n	443a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    445a:	2f07      	cmp	r7, #7
    445c:	d12b      	bne.n	44b6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    445e:	b1be      	cbz	r6, 4490 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    4460:	6800      	ldr	r0, [r0, #0]
    4462:	9000      	str	r0, [sp, #0]
    4464:	888a      	ldrh	r2, [r1, #4]
    4466:	798b      	ldrb	r3, [r1, #6]
    4468:	f8ad 2004 	strh.w	r2, [sp, #4]
    446c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4470:	4b1b      	ldr	r3, [pc, #108]	; (44e0 <cdcdf_acm_req+0xe8>)
    4472:	691b      	ldr	r3, [r3, #16]
    4474:	b113      	cbz	r3, 447c <cdcdf_acm_req+0x84>
    4476:	4668      	mov	r0, sp
    4478:	4798      	blx	r3
    447a:	b1f8      	cbz	r0, 44bc <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    447c:	4b18      	ldr	r3, [pc, #96]	; (44e0 <cdcdf_acm_req+0xe8>)
    447e:	aa02      	add	r2, sp, #8
    4480:	e912 0003 	ldmdb	r2, {r0, r1}
    4484:	6098      	str	r0, [r3, #8]
    4486:	8199      	strh	r1, [r3, #12]
    4488:	0c09      	lsrs	r1, r1, #16
    448a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    448c:	2000      	movs	r0, #0
    448e:	e7d4      	b.n	443a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    4490:	2300      	movs	r3, #0
    4492:	2207      	movs	r2, #7
    4494:	4628      	mov	r0, r5
    4496:	4c15      	ldr	r4, [pc, #84]	; (44ec <cdcdf_acm_req+0xf4>)
    4498:	47a0      	blx	r4
    449a:	e7ce      	b.n	443a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    449c:	2300      	movs	r3, #0
    449e:	461a      	mov	r2, r3
    44a0:	4619      	mov	r1, r3
    44a2:	4618      	mov	r0, r3
    44a4:	4d11      	ldr	r5, [pc, #68]	; (44ec <cdcdf_acm_req+0xf4>)
    44a6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    44a8:	4b0d      	ldr	r3, [pc, #52]	; (44e0 <cdcdf_acm_req+0xe8>)
    44aa:	695b      	ldr	r3, [r3, #20]
    44ac:	b143      	cbz	r3, 44c0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    44ae:	8860      	ldrh	r0, [r4, #2]
    44b0:	4798      	blx	r3
		return ERR_NONE;
    44b2:	2000      	movs	r0, #0
    44b4:	e7c1      	b.n	443a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    44b6:	f04f 30ff 	mov.w	r0, #4294967295
    44ba:	e7be      	b.n	443a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    44bc:	2000      	movs	r0, #0
    44be:	e7bc      	b.n	443a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    44c0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    44c2:	e7ba      	b.n	443a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    44c4:	f06f 0009 	mvn.w	r0, #9
    44c8:	e7b7      	b.n	443a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    44ca:	f06f 0009 	mvn.w	r0, #9
    44ce:	e7b4      	b.n	443a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    44d0:	2000      	movs	r0, #0
    44d2:	e7b2      	b.n	443a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    44d4:	f06f 000c 	mvn.w	r0, #12
    44d8:	e7af      	b.n	443a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    44da:	f04f 30ff 	mov.w	r0, #4294967295
    44de:	e7ac      	b.n	443a <cdcdf_acm_req+0x42>
    44e0:	20000824 	.word	0x20000824
    44e4:	00004db5 	.word	0x00004db5
    44e8:	2000082c 	.word	0x2000082c
    44ec:	00004891 	.word	0x00004891

000044f0 <cdcdf_acm_ctrl>:
{
    44f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f4:	b083      	sub	sp, #12
    44f6:	4616      	mov	r6, r2
	switch (ctrl) {
    44f8:	2901      	cmp	r1, #1
    44fa:	d066      	beq.n	45ca <cdcdf_acm_ctrl+0xda>
    44fc:	b141      	cbz	r1, 4510 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    44fe:	2902      	cmp	r1, #2
    4500:	bf0c      	ite	eq
    4502:	f06f 001a 	mvneq.w	r0, #26
    4506:	f06f 000c 	mvnne.w	r0, #12
}
    450a:	b003      	add	sp, #12
    450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    4510:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    4514:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    4516:	2800      	cmp	r0, #0
    4518:	f000 8085 	beq.w	4626 <cdcdf_acm_ctrl+0x136>
    451c:	f10a 3bff 	add.w	fp, sl, #4294967295
    4520:	f10a 0301 	add.w	r3, sl, #1
    4524:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4526:	4f46      	ldr	r7, [pc, #280]	; (4640 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    4528:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4650 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    452c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4654 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    4530:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4532:	7943      	ldrb	r3, [r0, #5]
    4534:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    4538:	2b02      	cmp	r3, #2
    453a:	d002      	beq.n	4542 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    453c:	f06f 0009 	mvn.w	r0, #9
    4540:	e7e3      	b.n	450a <cdcdf_acm_ctrl+0x1a>
    4542:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    4546:	f89b 3000 	ldrb.w	r3, [fp]
    454a:	429a      	cmp	r2, r3
    454c:	d06e      	beq.n	462c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    454e:	2bff      	cmp	r3, #255	; 0xff
    4550:	d16f      	bne.n	4632 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    4552:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    4556:	2205      	movs	r2, #5
    4558:	6871      	ldr	r1, [r6, #4]
    455a:	4b3a      	ldr	r3, [pc, #232]	; (4644 <cdcdf_acm_ctrl+0x154>)
    455c:	4798      	blx	r3
		while (NULL != ep) {
    455e:	4604      	mov	r4, r0
    4560:	b1f8      	cbz	r0, 45a2 <cdcdf_acm_ctrl+0xb2>
    4562:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    4566:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    4568:	7963      	ldrb	r3, [r4, #5]
    456a:	7922      	ldrb	r2, [r4, #4]
    456c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4570:	b292      	uxth	r2, r2
    4572:	78e1      	ldrb	r1, [r4, #3]
    4574:	4628      	mov	r0, r5
    4576:	47b8      	blx	r7
    4578:	2800      	cmp	r0, #0
    457a:	d15d      	bne.n	4638 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    457c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4580:	bf14      	ite	ne
    4582:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4586:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    458a:	4628      	mov	r0, r5
    458c:	47c8      	blx	r9
			desc->sod = ep;
    458e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    4590:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4592:	6871      	ldr	r1, [r6, #4]
    4594:	4420      	add	r0, r4
    4596:	47c0      	blx	r8
		while (NULL != ep) {
    4598:	4604      	mov	r4, r0
    459a:	2800      	cmp	r0, #0
    459c:	d1e3      	bne.n	4566 <cdcdf_acm_ctrl+0x76>
    459e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    45a2:	6833      	ldr	r3, [r6, #0]
    45a4:	7818      	ldrb	r0, [r3, #0]
    45a6:	2204      	movs	r2, #4
    45a8:	6871      	ldr	r1, [r6, #4]
    45aa:	4418      	add	r0, r3
    45ac:	4b25      	ldr	r3, [pc, #148]	; (4644 <cdcdf_acm_ctrl+0x154>)
    45ae:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    45b0:	9b00      	ldr	r3, [sp, #0]
    45b2:	459b      	cmp	fp, r3
    45b4:	d004      	beq.n	45c0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    45b6:	2800      	cmp	r0, #0
    45b8:	d1ba      	bne.n	4530 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    45ba:	f06f 0009 	mvn.w	r0, #9
    45be:	e7a4      	b.n	450a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    45c0:	2201      	movs	r2, #1
    45c2:	4b21      	ldr	r3, [pc, #132]	; (4648 <cdcdf_acm_ctrl+0x158>)
    45c4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    45c6:	2000      	movs	r0, #0
    45c8:	e79f      	b.n	450a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    45ca:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    45cc:	b142      	cbz	r2, 45e0 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    45ce:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    45d0:	795b      	ldrb	r3, [r3, #5]
    45d2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    45d6:	2b02      	cmp	r3, #2
    45d8:	d002      	beq.n	45e0 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    45da:	f06f 0009 	mvn.w	r0, #9
    45de:	e794      	b.n	450a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    45e0:	7823      	ldrb	r3, [r4, #0]
    45e2:	2bff      	cmp	r3, #255	; 0xff
    45e4:	d008      	beq.n	45f8 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    45e6:	23ff      	movs	r3, #255	; 0xff
    45e8:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    45ea:	78a0      	ldrb	r0, [r4, #2]
    45ec:	4298      	cmp	r0, r3
    45ee:	d003      	beq.n	45f8 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    45f0:	4b16      	ldr	r3, [pc, #88]	; (464c <cdcdf_acm_ctrl+0x15c>)
    45f2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    45f4:	23ff      	movs	r3, #255	; 0xff
    45f6:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    45f8:	7863      	ldrb	r3, [r4, #1]
    45fa:	2bff      	cmp	r3, #255	; 0xff
    45fc:	d008      	beq.n	4610 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    45fe:	23ff      	movs	r3, #255	; 0xff
    4600:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    4602:	78e0      	ldrb	r0, [r4, #3]
    4604:	4298      	cmp	r0, r3
    4606:	d003      	beq.n	4610 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    4608:	4b10      	ldr	r3, [pc, #64]	; (464c <cdcdf_acm_ctrl+0x15c>)
    460a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    460c:	23ff      	movs	r3, #255	; 0xff
    460e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    4610:	7920      	ldrb	r0, [r4, #4]
    4612:	28ff      	cmp	r0, #255	; 0xff
    4614:	d003      	beq.n	461e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    4616:	4b0d      	ldr	r3, [pc, #52]	; (464c <cdcdf_acm_ctrl+0x15c>)
    4618:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    461a:	23ff      	movs	r3, #255	; 0xff
    461c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    461e:	2000      	movs	r0, #0
    4620:	4b09      	ldr	r3, [pc, #36]	; (4648 <cdcdf_acm_ctrl+0x158>)
    4622:	7158      	strb	r0, [r3, #5]
    4624:	e771      	b.n	450a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    4626:	f06f 0009 	mvn.w	r0, #9
    462a:	e76e      	b.n	450a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    462c:	f06f 0011 	mvn.w	r0, #17
    4630:	e76b      	b.n	450a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    4632:	f06f 001b 	mvn.w	r0, #27
    4636:	e768      	b.n	450a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    4638:	f06f 0013 	mvn.w	r0, #19
    463c:	e765      	b.n	450a <cdcdf_acm_ctrl+0x1a>
    463e:	bf00      	nop
    4640:	00002419 	.word	0x00002419
    4644:	00004dd5 	.word	0x00004dd5
    4648:	20000824 	.word	0x20000824
    464c:	00002481 	.word	0x00002481
    4650:	000024ad 	.word	0x000024ad
    4654:	00004e0f 	.word	0x00004e0f

00004658 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4658:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    465a:	4b0a      	ldr	r3, [pc, #40]	; (4684 <cdcdf_acm_init+0x2c>)
    465c:	4798      	blx	r3
    465e:	2801      	cmp	r0, #1
    4660:	d80c      	bhi.n	467c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    4662:	4809      	ldr	r0, [pc, #36]	; (4688 <cdcdf_acm_init+0x30>)
    4664:	4b09      	ldr	r3, [pc, #36]	; (468c <cdcdf_acm_init+0x34>)
    4666:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4668:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    466a:	3018      	adds	r0, #24
    466c:	4b08      	ldr	r3, [pc, #32]	; (4690 <cdcdf_acm_init+0x38>)
    466e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4670:	4908      	ldr	r1, [pc, #32]	; (4694 <cdcdf_acm_init+0x3c>)
    4672:	2001      	movs	r0, #1
    4674:	4b08      	ldr	r3, [pc, #32]	; (4698 <cdcdf_acm_init+0x40>)
    4676:	4798      	blx	r3
	return ERR_NONE;
    4678:	2000      	movs	r0, #0
    467a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    467c:	f06f 0010 	mvn.w	r0, #16
}
    4680:	bd08      	pop	{r3, pc}
    4682:	bf00      	nop
    4684:	00004dc1 	.word	0x00004dc1
    4688:	20000824 	.word	0x20000824
    468c:	000044f1 	.word	0x000044f1
    4690:	00004d61 	.word	0x00004d61
    4694:	200000a8 	.word	0x200000a8
    4698:	00004ccd 	.word	0x00004ccd

0000469c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    469c:	4b07      	ldr	r3, [pc, #28]	; (46bc <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    469e:	795b      	ldrb	r3, [r3, #5]
    46a0:	b143      	cbz	r3, 46b4 <cdcdf_acm_read+0x18>
{
    46a2:	b510      	push	{r4, lr}
    46a4:	460a      	mov	r2, r1
    46a6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    46a8:	2300      	movs	r3, #0
    46aa:	4804      	ldr	r0, [pc, #16]	; (46bc <cdcdf_acm_read+0x20>)
    46ac:	7900      	ldrb	r0, [r0, #4]
    46ae:	4c04      	ldr	r4, [pc, #16]	; (46c0 <cdcdf_acm_read+0x24>)
    46b0:	47a0      	blx	r4
    46b2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    46b4:	f06f 0010 	mvn.w	r0, #16
    46b8:	4770      	bx	lr
    46ba:	bf00      	nop
    46bc:	20000824 	.word	0x20000824
    46c0:	00004891 	.word	0x00004891

000046c4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    46c4:	4b07      	ldr	r3, [pc, #28]	; (46e4 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    46c6:	795b      	ldrb	r3, [r3, #5]
    46c8:	b143      	cbz	r3, 46dc <cdcdf_acm_write+0x18>
{
    46ca:	b510      	push	{r4, lr}
    46cc:	460a      	mov	r2, r1
    46ce:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    46d0:	2301      	movs	r3, #1
    46d2:	4804      	ldr	r0, [pc, #16]	; (46e4 <cdcdf_acm_write+0x20>)
    46d4:	78c0      	ldrb	r0, [r0, #3]
    46d6:	4c04      	ldr	r4, [pc, #16]	; (46e8 <cdcdf_acm_write+0x24>)
    46d8:	47a0      	blx	r4
    46da:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    46dc:	f06f 0010 	mvn.w	r0, #16
    46e0:	4770      	bx	lr
    46e2:	bf00      	nop
    46e4:	20000824 	.word	0x20000824
    46e8:	00004891 	.word	0x00004891

000046ec <cdcdf_acm_is_enabled>:
}
    46ec:	4b01      	ldr	r3, [pc, #4]	; (46f4 <cdcdf_acm_is_enabled+0x8>)
    46ee:	7958      	ldrb	r0, [r3, #5]
    46f0:	4770      	bx	lr
    46f2:	bf00      	nop
    46f4:	20000824 	.word	0x20000824

000046f8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    46f8:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    46fa:	4b07      	ldr	r3, [pc, #28]	; (4718 <usbdc_unconfig+0x20>)
    46fc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    46fe:	b14c      	cbz	r4, 4714 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    4700:	2600      	movs	r6, #0
    4702:	2501      	movs	r5, #1
    4704:	6863      	ldr	r3, [r4, #4]
    4706:	4632      	mov	r2, r6
    4708:	4629      	mov	r1, r5
    470a:	4620      	mov	r0, r4
    470c:	4798      	blx	r3
		func = func->next;
    470e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4710:	2c00      	cmp	r4, #0
    4712:	d1f7      	bne.n	4704 <usbdc_unconfig+0xc>
    4714:	bd70      	pop	{r4, r5, r6, pc}
    4716:	bf00      	nop
    4718:	20000848 	.word	0x20000848

0000471c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    471c:	b570      	push	{r4, r5, r6, lr}
    471e:	4606      	mov	r6, r0
    4720:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    4722:	4b07      	ldr	r3, [pc, #28]	; (4740 <usbdc_change_notify+0x24>)
    4724:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    4726:	b91c      	cbnz	r4, 4730 <usbdc_change_notify+0x14>
    4728:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    472a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    472c:	2c00      	cmp	r4, #0
    472e:	d0fb      	beq.n	4728 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    4730:	6863      	ldr	r3, [r4, #4]
    4732:	2b00      	cmp	r3, #0
    4734:	d0f9      	beq.n	472a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    4736:	4629      	mov	r1, r5
    4738:	4630      	mov	r0, r6
    473a:	4798      	blx	r3
    473c:	e7f5      	b.n	472a <usbdc_change_notify+0xe>
    473e:	bf00      	nop
    4740:	20000848 	.word	0x20000848

00004744 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4746:	4607      	mov	r7, r0
    4748:	460e      	mov	r6, r1
    474a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    474c:	4b0c      	ldr	r3, [pc, #48]	; (4780 <usbdc_request_handler+0x3c>)
    474e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    4750:	b91c      	cbnz	r4, 475a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    4752:	2000      	movs	r0, #0
    4754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    4756:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    4758:	b16c      	cbz	r4, 4776 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    475a:	6863      	ldr	r3, [r4, #4]
    475c:	2b00      	cmp	r3, #0
    475e:	d0fa      	beq.n	4756 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    4760:	462a      	mov	r2, r5
    4762:	4631      	mov	r1, r6
    4764:	4638      	mov	r0, r7
    4766:	4798      	blx	r3
			if (0 == rc) {
    4768:	b138      	cbz	r0, 477a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    476a:	f110 0f0a 	cmn.w	r0, #10
    476e:	d0f2      	beq.n	4756 <usbdc_request_handler+0x12>
				return -1;
    4770:	f04f 30ff 	mov.w	r0, #4294967295
}
    4774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    4776:	2000      	movs	r0, #0
    4778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    477a:	2001      	movs	r0, #1
    477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    477e:	bf00      	nop
    4780:	20000848 	.word	0x20000848

00004784 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    4784:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    4786:	4b06      	ldr	r3, [pc, #24]	; (47a0 <usbd_sof_cb+0x1c>)
    4788:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    478a:	b91c      	cbnz	r4, 4794 <usbd_sof_cb+0x10>
    478c:	bd10      	pop	{r4, pc}
		sof = sof->next;
    478e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    4790:	2c00      	cmp	r4, #0
    4792:	d0fb      	beq.n	478c <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    4794:	6863      	ldr	r3, [r4, #4]
    4796:	2b00      	cmp	r3, #0
    4798:	d0f9      	beq.n	478e <usbd_sof_cb+0xa>
			sof->cb();
    479a:	4798      	blx	r3
    479c:	e7f7      	b.n	478e <usbd_sof_cb+0xa>
    479e:	bf00      	nop
    47a0:	20000848 	.word	0x20000848

000047a4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    47a4:	b510      	push	{r4, lr}
    47a6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    47a8:	b119      	cbz	r1, 47b2 <usbdc_cb_ctl_done+0xe>
    47aa:	2901      	cmp	r1, #1
    47ac:	d026      	beq.n	47fc <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    47ae:	2000      	movs	r0, #0
    47b0:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    47b2:	7813      	ldrb	r3, [r2, #0]
    47b4:	2b00      	cmp	r3, #0
    47b6:	d1fa      	bne.n	47ae <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    47b8:	7853      	ldrb	r3, [r2, #1]
    47ba:	2b05      	cmp	r3, #5
    47bc:	d00f      	beq.n	47de <usbdc_cb_ctl_done+0x3a>
    47be:	2b09      	cmp	r3, #9
    47c0:	d1f5      	bne.n	47ae <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    47c2:	8852      	ldrh	r2, [r2, #2]
    47c4:	4b10      	ldr	r3, [pc, #64]	; (4808 <usbdc_cb_ctl_done+0x64>)
    47c6:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    47c8:	8863      	ldrh	r3, [r4, #2]
    47ca:	2b00      	cmp	r3, #0
    47cc:	bf14      	ite	ne
    47ce:	2104      	movne	r1, #4
    47d0:	2103      	moveq	r1, #3
    47d2:	4b0d      	ldr	r3, [pc, #52]	; (4808 <usbdc_cb_ctl_done+0x64>)
    47d4:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    47d6:	2001      	movs	r0, #1
    47d8:	4b0c      	ldr	r3, [pc, #48]	; (480c <usbdc_cb_ctl_done+0x68>)
    47da:	4798      	blx	r3
    47dc:	e7e7      	b.n	47ae <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    47de:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    47e0:	b2c0      	uxtb	r0, r0
    47e2:	4b0b      	ldr	r3, [pc, #44]	; (4810 <usbdc_cb_ctl_done+0x6c>)
    47e4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    47e6:	8863      	ldrh	r3, [r4, #2]
    47e8:	2b00      	cmp	r3, #0
    47ea:	bf14      	ite	ne
    47ec:	2103      	movne	r1, #3
    47ee:	2102      	moveq	r1, #2
    47f0:	4b05      	ldr	r3, [pc, #20]	; (4808 <usbdc_cb_ctl_done+0x64>)
    47f2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    47f4:	2001      	movs	r0, #1
    47f6:	4b05      	ldr	r3, [pc, #20]	; (480c <usbdc_cb_ctl_done+0x68>)
    47f8:	4798      	blx	r3
    47fa:	e7d8      	b.n	47ae <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    47fc:	2201      	movs	r2, #1
    47fe:	4621      	mov	r1, r4
    4800:	2000      	movs	r0, #0
    4802:	4b04      	ldr	r3, [pc, #16]	; (4814 <usbdc_cb_ctl_done+0x70>)
    4804:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    4806:	e7d2      	b.n	47ae <usbdc_cb_ctl_done+0xa>
    4808:	20000848 	.word	0x20000848
    480c:	0000471d 	.word	0x0000471d
    4810:	0000240d 	.word	0x0000240d
    4814:	00004745 	.word	0x00004745

00004818 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4818:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    481a:	4b0d      	ldr	r3, [pc, #52]	; (4850 <usbdc_reset+0x38>)
    481c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    481e:	4d0d      	ldr	r5, [pc, #52]	; (4854 <usbdc_reset+0x3c>)
    4820:	2602      	movs	r6, #2
    4822:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    4824:	2400      	movs	r4, #0
    4826:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    4828:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    482a:	4620      	mov	r0, r4
    482c:	4b0a      	ldr	r3, [pc, #40]	; (4858 <usbdc_reset+0x40>)
    482e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    4830:	7f28      	ldrb	r0, [r5, #28]
    4832:	4b0a      	ldr	r3, [pc, #40]	; (485c <usbdc_reset+0x44>)
    4834:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    4836:	4a0a      	ldr	r2, [pc, #40]	; (4860 <usbdc_reset+0x48>)
    4838:	4621      	mov	r1, r4
    483a:	4620      	mov	r0, r4
    483c:	4d09      	ldr	r5, [pc, #36]	; (4864 <usbdc_reset+0x4c>)
    483e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    4840:	4a09      	ldr	r2, [pc, #36]	; (4868 <usbdc_reset+0x50>)
    4842:	4631      	mov	r1, r6
    4844:	4620      	mov	r0, r4
    4846:	47a8      	blx	r5
	usb_d_ep_enable(0);
    4848:	4620      	mov	r0, r4
    484a:	4b08      	ldr	r3, [pc, #32]	; (486c <usbdc_reset+0x54>)
    484c:	4798      	blx	r3
    484e:	bd70      	pop	{r4, r5, r6, pc}
    4850:	000046f9 	.word	0x000046f9
    4854:	20000848 	.word	0x20000848
    4858:	00002481 	.word	0x00002481
    485c:	0000246d 	.word	0x0000246d
    4860:	000048b1 	.word	0x000048b1
    4864:	00002681 	.word	0x00002681
    4868:	000047a5 	.word	0x000047a5
    486c:	000024ad 	.word	0x000024ad

00004870 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    4870:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    4872:	b110      	cbz	r0, 487a <usbd_event_cb+0xa>
    4874:	2801      	cmp	r0, #1
    4876:	d004      	beq.n	4882 <usbd_event_cb+0x12>
    4878:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    487a:	2000      	movs	r0, #0
    487c:	4b02      	ldr	r3, [pc, #8]	; (4888 <usbd_event_cb+0x18>)
    487e:	4798      	blx	r3
		break;
    4880:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    4882:	4b02      	ldr	r3, [pc, #8]	; (488c <usbd_event_cb+0x1c>)
    4884:	4798      	blx	r3
    4886:	bd08      	pop	{r3, pc}
    4888:	0000471d 	.word	0x0000471d
    488c:	00004819 	.word	0x00004819

00004890 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    4890:	b500      	push	{lr}
    4892:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    4894:	9101      	str	r1, [sp, #4]
    4896:	9202      	str	r2, [sp, #8]
    4898:	f88d 000c 	strb.w	r0, [sp, #12]
    489c:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    48a0:	a801      	add	r0, sp, #4
    48a2:	4b02      	ldr	r3, [pc, #8]	; (48ac <usbdc_xfer+0x1c>)
    48a4:	4798      	blx	r3
}
    48a6:	b005      	add	sp, #20
    48a8:	f85d fb04 	ldr.w	pc, [sp], #4
    48ac:	000024f9 	.word	0x000024f9

000048b0 <usbdc_cb_ctl_req>:
{
    48b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48b4:	b083      	sub	sp, #12
    48b6:	4605      	mov	r5, r0
    48b8:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    48ba:	2200      	movs	r2, #0
    48bc:	4b9b      	ldr	r3, [pc, #620]	; (4b2c <usbdc_cb_ctl_req+0x27c>)
    48be:	4798      	blx	r3
    48c0:	f1b0 3fff 	cmp.w	r0, #4294967295
    48c4:	d00b      	beq.n	48de <usbdc_cb_ctl_req+0x2e>
    48c6:	2801      	cmp	r0, #1
    48c8:	f000 81e3 	beq.w	4c92 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    48cc:	7823      	ldrb	r3, [r4, #0]
    48ce:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    48d2:	d008      	beq.n	48e6 <usbdc_cb_ctl_req+0x36>
    48d4:	2a80      	cmp	r2, #128	; 0x80
    48d6:	f000 80f4 	beq.w	4ac2 <usbdc_cb_ctl_req+0x212>
		return false;
    48da:	2000      	movs	r0, #0
    48dc:	e000      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    48de:	2000      	movs	r0, #0
}
    48e0:	b003      	add	sp, #12
    48e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    48e6:	7862      	ldrb	r2, [r4, #1]
    48e8:	3a01      	subs	r2, #1
    48ea:	2a0a      	cmp	r2, #10
    48ec:	f200 81d3 	bhi.w	4c96 <usbdc_cb_ctl_req+0x3e6>
    48f0:	e8df f012 	tbh	[pc, r2, lsl #1]
    48f4:	01d10060 	.word	0x01d10060
    48f8:	01d10076 	.word	0x01d10076
    48fc:	01d1000b 	.word	0x01d1000b
    4900:	01d101d1 	.word	0x01d101d1
    4904:	01d10015 	.word	0x01d10015
    4908:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    490a:	2301      	movs	r3, #1
    490c:	2200      	movs	r2, #0
    490e:	4611      	mov	r1, r2
    4910:	4628      	mov	r0, r5
    4912:	4c87      	ldr	r4, [pc, #540]	; (4b30 <usbdc_cb_ctl_req+0x280>)
    4914:	47a0      	blx	r4
    4916:	fab0 f080 	clz	r0, r0
    491a:	0940      	lsrs	r0, r0, #5
    491c:	e7e0      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    491e:	8862      	ldrh	r2, [r4, #2]
    4920:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    4922:	b1ca      	cbz	r2, 4958 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    4924:	4b83      	ldr	r3, [pc, #524]	; (4b34 <usbdc_cb_ctl_req+0x284>)
    4926:	681b      	ldr	r3, [r3, #0]
    4928:	6859      	ldr	r1, [r3, #4]
    492a:	6818      	ldr	r0, [r3, #0]
    492c:	4b82      	ldr	r3, [pc, #520]	; (4b38 <usbdc_cb_ctl_req+0x288>)
    492e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4930:	2800      	cmp	r0, #0
    4932:	f000 81be 	beq.w	4cb2 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    4936:	78c2      	ldrb	r2, [r0, #3]
    4938:	7881      	ldrb	r1, [r0, #2]
    493a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    493e:	fa10 f181 	uxtah	r1, r0, r1
    4942:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    4944:	2204      	movs	r2, #4
    4946:	4b7d      	ldr	r3, [pc, #500]	; (4b3c <usbdc_cb_ctl_req+0x28c>)
    4948:	4798      	blx	r3
    494a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    494c:	b130      	cbz	r0, 495c <usbdc_cb_ctl_req+0xac>
    494e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4950:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 4b34 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4954:	4f79      	ldr	r7, [pc, #484]	; (4b3c <usbdc_cb_ctl_req+0x28c>)
    4956:	e018      	b.n	498a <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    4958:	4b79      	ldr	r3, [pc, #484]	; (4b40 <usbdc_cb_ctl_req+0x290>)
    495a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    495c:	2301      	movs	r3, #1
    495e:	2200      	movs	r2, #0
    4960:	4611      	mov	r1, r2
    4962:	4628      	mov	r0, r5
    4964:	4c72      	ldr	r4, [pc, #456]	; (4b30 <usbdc_cb_ctl_req+0x280>)
    4966:	47a0      	blx	r4
    4968:	fab0 f080 	clz	r0, r0
    496c:	0940      	lsrs	r0, r0, #5
    496e:	e7b7      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    4970:	464c      	mov	r4, r9
    4972:	e000      	b.n	4976 <usbdc_cb_ctl_req+0xc6>
    4974:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    4976:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    4978:	7803      	ldrb	r3, [r0, #0]
    497a:	4418      	add	r0, r3
    497c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    497e:	2204      	movs	r2, #4
    4980:	9901      	ldr	r1, [sp, #4]
    4982:	47b8      	blx	r7
    4984:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    4986:	2800      	cmp	r0, #0
    4988:	d0e8      	beq.n	495c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    498a:	f890 9002 	ldrb.w	r9, [r0, #2]
    498e:	45a1      	cmp	r9, r4
    4990:	d0f1      	beq.n	4976 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4992:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    4996:	2c00      	cmp	r4, #0
    4998:	d0ea      	beq.n	4970 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    499a:	2600      	movs	r6, #0
    499c:	6863      	ldr	r3, [r4, #4]
    499e:	466a      	mov	r2, sp
    49a0:	4631      	mov	r1, r6
    49a2:	4620      	mov	r0, r4
    49a4:	4798      	blx	r3
    49a6:	2800      	cmp	r0, #0
    49a8:	d0e4      	beq.n	4974 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    49aa:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    49ac:	2c00      	cmp	r4, #0
    49ae:	d1f5      	bne.n	499c <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    49b0:	464c      	mov	r4, r9
    49b2:	e7e0      	b.n	4976 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    49b4:	f003 031f 	and.w	r3, r3, #31
    49b8:	2b02      	cmp	r3, #2
    49ba:	f040 816e 	bne.w	4c9a <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    49be:	88e3      	ldrh	r3, [r4, #6]
    49c0:	b10b      	cbz	r3, 49c6 <usbdc_cb_ctl_req+0x116>
			return false;
    49c2:	2000      	movs	r0, #0
    49c4:	e78c      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    49c6:	88a0      	ldrh	r0, [r4, #4]
    49c8:	2100      	movs	r1, #0
    49ca:	b2c0      	uxtb	r0, r0
    49cc:	4b5d      	ldr	r3, [pc, #372]	; (4b44 <usbdc_cb_ctl_req+0x294>)
    49ce:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    49d0:	2301      	movs	r3, #1
    49d2:	2200      	movs	r2, #0
    49d4:	4611      	mov	r1, r2
    49d6:	4628      	mov	r0, r5
    49d8:	4c55      	ldr	r4, [pc, #340]	; (4b30 <usbdc_cb_ctl_req+0x280>)
    49da:	47a0      	blx	r4
		return true;
    49dc:	2001      	movs	r0, #1
    49de:	e77f      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    49e0:	f003 031f 	and.w	r3, r3, #31
    49e4:	2b02      	cmp	r3, #2
    49e6:	f040 815a 	bne.w	4c9e <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    49ea:	88e3      	ldrh	r3, [r4, #6]
    49ec:	b10b      	cbz	r3, 49f2 <usbdc_cb_ctl_req+0x142>
			return false;
    49ee:	2000      	movs	r0, #0
    49f0:	e776      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    49f2:	88a0      	ldrh	r0, [r4, #4]
    49f4:	2101      	movs	r1, #1
    49f6:	b2c0      	uxtb	r0, r0
    49f8:	4b52      	ldr	r3, [pc, #328]	; (4b44 <usbdc_cb_ctl_req+0x294>)
    49fa:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    49fc:	2301      	movs	r3, #1
    49fe:	2200      	movs	r2, #0
    4a00:	4611      	mov	r1, r2
    4a02:	4628      	mov	r0, r5
    4a04:	4c4a      	ldr	r4, [pc, #296]	; (4b30 <usbdc_cb_ctl_req+0x280>)
    4a06:	47a0      	blx	r4
		return true;
    4a08:	2001      	movs	r0, #1
    4a0a:	e769      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4a0c:	8866      	ldrh	r6, [r4, #2]
    4a0e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    4a10:	4a48      	ldr	r2, [pc, #288]	; (4b34 <usbdc_cb_ctl_req+0x284>)
    4a12:	6813      	ldr	r3, [r2, #0]
    4a14:	7ed2      	ldrb	r2, [r2, #27]
    4a16:	6859      	ldr	r1, [r3, #4]
    4a18:	6818      	ldr	r0, [r3, #0]
    4a1a:	4b47      	ldr	r3, [pc, #284]	; (4b38 <usbdc_cb_ctl_req+0x288>)
    4a1c:	4798      	blx	r3
	if (NULL == ifc) {
    4a1e:	2800      	cmp	r0, #0
    4a20:	d045      	beq.n	4aae <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    4a22:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    4a24:	78c2      	ldrb	r2, [r0, #3]
    4a26:	7881      	ldrb	r1, [r0, #2]
    4a28:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4a2c:	fa10 f181 	uxtah	r1, r0, r1
    4a30:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    4a32:	2204      	movs	r2, #4
    4a34:	4b41      	ldr	r3, [pc, #260]	; (4b3c <usbdc_cb_ctl_req+0x28c>)
    4a36:	4798      	blx	r3
    4a38:	4603      	mov	r3, r0
    4a3a:	2800      	cmp	r0, #0
    4a3c:	d039      	beq.n	4ab2 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4a3e:	2704      	movs	r7, #4
    4a40:	4d3e      	ldr	r5, [pc, #248]	; (4b3c <usbdc_cb_ctl_req+0x28c>)
    4a42:	e008      	b.n	4a56 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    4a44:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    4a46:	7803      	ldrb	r3, [r0, #0]
    4a48:	4418      	add	r0, r3
    4a4a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4a4c:	463a      	mov	r2, r7
    4a4e:	9901      	ldr	r1, [sp, #4]
    4a50:	47a8      	blx	r5
		if (NULL == ifc) {
    4a52:	4603      	mov	r3, r0
    4a54:	b378      	cbz	r0, 4ab6 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    4a56:	789a      	ldrb	r2, [r3, #2]
    4a58:	42a2      	cmp	r2, r4
    4a5a:	d1f3      	bne.n	4a44 <usbdc_cb_ctl_req+0x194>
    4a5c:	78da      	ldrb	r2, [r3, #3]
    4a5e:	42b2      	cmp	r2, r6
    4a60:	d1f0      	bne.n	4a44 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    4a62:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    4a64:	4b33      	ldr	r3, [pc, #204]	; (4b34 <usbdc_cb_ctl_req+0x284>)
    4a66:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    4a68:	b33d      	cbz	r5, 4aba <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    4a6a:	2701      	movs	r7, #1
    4a6c:	686b      	ldr	r3, [r5, #4]
    4a6e:	466a      	mov	r2, sp
    4a70:	4639      	mov	r1, r7
    4a72:	4628      	mov	r0, r5
    4a74:	4798      	blx	r3
    4a76:	b120      	cbz	r0, 4a82 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    4a78:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    4a7a:	2d00      	cmp	r5, #0
    4a7c:	d1f6      	bne.n	4a6c <usbdc_cb_ctl_req+0x1bc>
	return false;
    4a7e:	2000      	movs	r0, #0
    4a80:	e72e      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    4a82:	686b      	ldr	r3, [r5, #4]
    4a84:	466a      	mov	r2, sp
    4a86:	2100      	movs	r1, #0
    4a88:	4628      	mov	r0, r5
    4a8a:	4798      	blx	r3
    4a8c:	b9b8      	cbnz	r0, 4abe <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    4a8e:	b136      	cbz	r6, 4a9e <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    4a90:	4a28      	ldr	r2, [pc, #160]	; (4b34 <usbdc_cb_ctl_req+0x284>)
    4a92:	2301      	movs	r3, #1
    4a94:	fa03 f404 	lsl.w	r4, r3, r4
    4a98:	7f53      	ldrb	r3, [r2, #29]
    4a9a:	4323      	orrs	r3, r4
    4a9c:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    4a9e:	2300      	movs	r3, #0
    4aa0:	461a      	mov	r2, r3
    4aa2:	4619      	mov	r1, r3
    4aa4:	4618      	mov	r0, r3
    4aa6:	4c22      	ldr	r4, [pc, #136]	; (4b30 <usbdc_cb_ctl_req+0x280>)
    4aa8:	47a0      	blx	r4
			return true;
    4aaa:	2001      	movs	r0, #1
    4aac:	e718      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4aae:	2000      	movs	r0, #0
    4ab0:	e716      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4ab2:	2000      	movs	r0, #0
    4ab4:	e714      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
			return false;
    4ab6:	2000      	movs	r0, #0
    4ab8:	e712      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
	return false;
    4aba:	2000      	movs	r0, #0
    4abc:	e710      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
			return false;
    4abe:	2000      	movs	r0, #0
    4ac0:	e70e      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    4ac2:	7862      	ldrb	r2, [r4, #1]
    4ac4:	2a0a      	cmp	r2, #10
    4ac6:	f200 80ec 	bhi.w	4ca2 <usbdc_cb_ctl_req+0x3f2>
    4aca:	e8df f012 	tbh	[pc, r2, lsl #1]
    4ace:	008e      	.short	0x008e
    4ad0:	00ea00ea 	.word	0x00ea00ea
    4ad4:	00ea00ea 	.word	0x00ea00ea
    4ad8:	000b00ea 	.word	0x000b00ea
    4adc:	008200ea 	.word	0x008200ea
    4ae0:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    4ae4:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    4ae6:	0a13      	lsrs	r3, r2, #8
    4ae8:	2b02      	cmp	r3, #2
    4aea:	d02d      	beq.n	4b48 <usbdc_cb_ctl_req+0x298>
    4aec:	2b03      	cmp	r3, #3
    4aee:	d050      	beq.n	4b92 <usbdc_cb_ctl_req+0x2e2>
    4af0:	2b01      	cmp	r3, #1
    4af2:	d001      	beq.n	4af8 <usbdc_cb_ctl_req+0x248>
	return false;
    4af4:	2000      	movs	r0, #0
    4af6:	e6f3      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    4af8:	88e2      	ldrh	r2, [r4, #6]
    4afa:	2a12      	cmp	r2, #18
    4afc:	bf28      	it	cs
    4afe:	2212      	movcs	r2, #18
    4b00:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    4b02:	4b0c      	ldr	r3, [pc, #48]	; (4b34 <usbdc_cb_ctl_req+0x284>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	2201      	movs	r2, #1
    4b08:	6859      	ldr	r1, [r3, #4]
    4b0a:	6818      	ldr	r0, [r3, #0]
    4b0c:	4b0b      	ldr	r3, [pc, #44]	; (4b3c <usbdc_cb_ctl_req+0x28c>)
    4b0e:	4798      	blx	r3
	if (!dev_desc) {
    4b10:	4601      	mov	r1, r0
    4b12:	2800      	cmp	r0, #0
    4b14:	f000 80c7 	beq.w	4ca6 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4b18:	2300      	movs	r3, #0
    4b1a:	4622      	mov	r2, r4
    4b1c:	4628      	mov	r0, r5
    4b1e:	4c04      	ldr	r4, [pc, #16]	; (4b30 <usbdc_cb_ctl_req+0x280>)
    4b20:	47a0      	blx	r4
    4b22:	fab0 f080 	clz	r0, r0
    4b26:	0940      	lsrs	r0, r0, #5
    4b28:	e6da      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
    4b2a:	bf00      	nop
    4b2c:	00004745 	.word	0x00004745
    4b30:	00004891 	.word	0x00004891
    4b34:	20000848 	.word	0x20000848
    4b38:	00004e55 	.word	0x00004e55
    4b3c:	00004dd5 	.word	0x00004dd5
    4b40:	000046f9 	.word	0x000046f9
    4b44:	00002619 	.word	0x00002619
	uint16_t length   = req->wLength;
    4b48:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4b4a:	4b5b      	ldr	r3, [pc, #364]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4b4c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4b4e:	681b      	ldr	r3, [r3, #0]
    4b50:	3201      	adds	r2, #1
    4b52:	b2d2      	uxtb	r2, r2
    4b54:	6859      	ldr	r1, [r3, #4]
    4b56:	6818      	ldr	r0, [r3, #0]
    4b58:	4b58      	ldr	r3, [pc, #352]	; (4cbc <usbdc_cb_ctl_req+0x40c>)
    4b5a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4b5c:	4601      	mov	r1, r0
    4b5e:	2800      	cmp	r0, #0
    4b60:	f000 80a3 	beq.w	4caa <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    4b64:	78c3      	ldrb	r3, [r0, #3]
    4b66:	7882      	ldrb	r2, [r0, #2]
    4b68:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    4b6c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    4b6e:	4294      	cmp	r4, r2
    4b70:	d90d      	bls.n	4b8e <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4b72:	3e01      	subs	r6, #1
    4b74:	4226      	tst	r6, r4
    4b76:	bf0c      	ite	eq
    4b78:	2301      	moveq	r3, #1
    4b7a:	2300      	movne	r3, #0
		length = total_len;
    4b7c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    4b7e:	4622      	mov	r2, r4
    4b80:	4628      	mov	r0, r5
    4b82:	4c4f      	ldr	r4, [pc, #316]	; (4cc0 <usbdc_cb_ctl_req+0x410>)
    4b84:	47a0      	blx	r4
    4b86:	fab0 f080 	clz	r0, r0
    4b8a:	0940      	lsrs	r0, r0, #5
    4b8c:	e6a8      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4b8e:	2300      	movs	r3, #0
    4b90:	e7f5      	b.n	4b7e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    4b92:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4b94:	4b48      	ldr	r3, [pc, #288]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4b96:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    4b98:	681b      	ldr	r3, [r3, #0]
    4b9a:	b2d2      	uxtb	r2, r2
    4b9c:	6859      	ldr	r1, [r3, #4]
    4b9e:	6818      	ldr	r0, [r3, #0]
    4ba0:	4b48      	ldr	r3, [pc, #288]	; (4cc4 <usbdc_cb_ctl_req+0x414>)
    4ba2:	4798      	blx	r3
	if (NULL == str_desc) {
    4ba4:	4601      	mov	r1, r0
    4ba6:	2800      	cmp	r0, #0
    4ba8:	f000 8081 	beq.w	4cae <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    4bac:	7802      	ldrb	r2, [r0, #0]
    4bae:	4294      	cmp	r4, r2
    4bb0:	d90d      	bls.n	4bce <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4bb2:	3e01      	subs	r6, #1
    4bb4:	4226      	tst	r6, r4
    4bb6:	bf0c      	ite	eq
    4bb8:	2301      	moveq	r3, #1
    4bba:	2300      	movne	r3, #0
		length = str_desc[0];
    4bbc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4bbe:	4622      	mov	r2, r4
    4bc0:	4628      	mov	r0, r5
    4bc2:	4c3f      	ldr	r4, [pc, #252]	; (4cc0 <usbdc_cb_ctl_req+0x410>)
    4bc4:	47a0      	blx	r4
    4bc6:	fab0 f080 	clz	r0, r0
    4bca:	0940      	lsrs	r0, r0, #5
    4bcc:	e688      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4bce:	2300      	movs	r3, #0
    4bd0:	e7f5      	b.n	4bbe <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    4bd2:	4939      	ldr	r1, [pc, #228]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4bd4:	694b      	ldr	r3, [r1, #20]
    4bd6:	7eca      	ldrb	r2, [r1, #27]
    4bd8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4bda:	2300      	movs	r3, #0
    4bdc:	2201      	movs	r2, #1
    4bde:	6949      	ldr	r1, [r1, #20]
    4be0:	4628      	mov	r0, r5
    4be2:	4c37      	ldr	r4, [pc, #220]	; (4cc0 <usbdc_cb_ctl_req+0x410>)
    4be4:	47a0      	blx	r4
		return true;
    4be6:	2001      	movs	r0, #1
    4be8:	e67a      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4bea:	f003 031f 	and.w	r3, r3, #31
    4bee:	2b01      	cmp	r3, #1
    4bf0:	d903      	bls.n	4bfa <usbdc_cb_ctl_req+0x34a>
    4bf2:	2b02      	cmp	r3, #2
    4bf4:	d010      	beq.n	4c18 <usbdc_cb_ctl_req+0x368>
		return false;
    4bf6:	2000      	movs	r0, #0
    4bf8:	e672      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		st = 0;
    4bfa:	2300      	movs	r3, #0
    4bfc:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4bfe:	492e      	ldr	r1, [pc, #184]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4c00:	694b      	ldr	r3, [r1, #20]
    4c02:	f8bd 2000 	ldrh.w	r2, [sp]
    4c06:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4c08:	2300      	movs	r3, #0
    4c0a:	2202      	movs	r2, #2
    4c0c:	6949      	ldr	r1, [r1, #20]
    4c0e:	4628      	mov	r0, r5
    4c10:	4c2b      	ldr	r4, [pc, #172]	; (4cc0 <usbdc_cb_ctl_req+0x410>)
    4c12:	47a0      	blx	r4
	return true;
    4c14:	2001      	movs	r0, #1
    4c16:	e663      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4c18:	88a0      	ldrh	r0, [r4, #4]
    4c1a:	2102      	movs	r1, #2
    4c1c:	b2c0      	uxtb	r0, r0
    4c1e:	4b2a      	ldr	r3, [pc, #168]	; (4cc8 <usbdc_cb_ctl_req+0x418>)
    4c20:	4798      	blx	r3
		if (st < 0) {
    4c22:	2800      	cmp	r0, #0
    4c24:	db03      	blt.n	4c2e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    4c26:	f000 0001 	and.w	r0, r0, #1
    4c2a:	9000      	str	r0, [sp, #0]
    4c2c:	e7e7      	b.n	4bfe <usbdc_cb_ctl_req+0x34e>
			return false;
    4c2e:	2000      	movs	r0, #0
    4c30:	e656      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4c32:	4b21      	ldr	r3, [pc, #132]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4c34:	7f5b      	ldrb	r3, [r3, #29]
    4c36:	88a2      	ldrh	r2, [r4, #4]
    4c38:	4113      	asrs	r3, r2
    4c3a:	f013 0f01 	tst.w	r3, #1
    4c3e:	d012      	beq.n	4c66 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4c40:	4b1d      	ldr	r3, [pc, #116]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4c42:	691d      	ldr	r5, [r3, #16]
	return false;
    4c44:	2000      	movs	r0, #0
	while (NULL != func) {
    4c46:	2d00      	cmp	r5, #0
    4c48:	f43f ae4a 	beq.w	48e0 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4c4c:	2602      	movs	r6, #2
    4c4e:	686b      	ldr	r3, [r5, #4]
    4c50:	4622      	mov	r2, r4
    4c52:	4631      	mov	r1, r6
    4c54:	4628      	mov	r0, r5
    4c56:	4798      	blx	r3
    4c58:	2800      	cmp	r0, #0
    4c5a:	da0f      	bge.n	4c7c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    4c5c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    4c5e:	2d00      	cmp	r5, #0
    4c60:	d1f5      	bne.n	4c4e <usbdc_cb_ctl_req+0x39e>
	return false;
    4c62:	2000      	movs	r0, #0
    4c64:	e63c      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    4c66:	4914      	ldr	r1, [pc, #80]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4c68:	694b      	ldr	r3, [r1, #20]
    4c6a:	2000      	movs	r0, #0
    4c6c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4c6e:	4603      	mov	r3, r0
    4c70:	2201      	movs	r2, #1
    4c72:	6949      	ldr	r1, [r1, #20]
    4c74:	4c12      	ldr	r4, [pc, #72]	; (4cc0 <usbdc_cb_ctl_req+0x410>)
    4c76:	47a0      	blx	r4
		return true;
    4c78:	2001      	movs	r0, #1
    4c7a:	e631      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4c7c:	490e      	ldr	r1, [pc, #56]	; (4cb8 <usbdc_cb_ctl_req+0x408>)
    4c7e:	694b      	ldr	r3, [r1, #20]
    4c80:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4c82:	2300      	movs	r3, #0
    4c84:	2201      	movs	r2, #1
    4c86:	6949      	ldr	r1, [r1, #20]
    4c88:	4618      	mov	r0, r3
    4c8a:	4c0d      	ldr	r4, [pc, #52]	; (4cc0 <usbdc_cb_ctl_req+0x410>)
    4c8c:	47a0      	blx	r4
			return true;
    4c8e:	2001      	movs	r0, #1
    4c90:	e626      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return true;
    4c92:	2001      	movs	r0, #1
    4c94:	e624      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4c96:	2000      	movs	r0, #0
    4c98:	e622      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4c9a:	2000      	movs	r0, #0
    4c9c:	e620      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4c9e:	2000      	movs	r0, #0
    4ca0:	e61e      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4ca2:	2000      	movs	r0, #0
    4ca4:	e61c      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4ca6:	2000      	movs	r0, #0
    4ca8:	e61a      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4caa:	2000      	movs	r0, #0
    4cac:	e618      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
		return false;
    4cae:	2000      	movs	r0, #0
    4cb0:	e616      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
			return false;
    4cb2:	2000      	movs	r0, #0
    4cb4:	e614      	b.n	48e0 <usbdc_cb_ctl_req+0x30>
    4cb6:	bf00      	nop
    4cb8:	20000848 	.word	0x20000848
    4cbc:	00004e55 	.word	0x00004e55
    4cc0:	00004891 	.word	0x00004891
    4cc4:	00004ebd 	.word	0x00004ebd
    4cc8:	00002619 	.word	0x00002619

00004ccc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4ccc:	b508      	push	{r3, lr}
	switch (type) {
    4cce:	2801      	cmp	r0, #1
    4cd0:	d007      	beq.n	4ce2 <usbdc_register_handler+0x16>
    4cd2:	b110      	cbz	r0, 4cda <usbdc_register_handler+0xe>
    4cd4:	2802      	cmp	r0, #2
    4cd6:	d008      	beq.n	4cea <usbdc_register_handler+0x1e>
    4cd8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4cda:	4806      	ldr	r0, [pc, #24]	; (4cf4 <usbdc_register_handler+0x28>)
    4cdc:	4b06      	ldr	r3, [pc, #24]	; (4cf8 <usbdc_register_handler+0x2c>)
    4cde:	4798      	blx	r3
		break;
    4ce0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    4ce2:	4806      	ldr	r0, [pc, #24]	; (4cfc <usbdc_register_handler+0x30>)
    4ce4:	4b04      	ldr	r3, [pc, #16]	; (4cf8 <usbdc_register_handler+0x2c>)
    4ce6:	4798      	blx	r3
		break;
    4ce8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4cea:	4805      	ldr	r0, [pc, #20]	; (4d00 <usbdc_register_handler+0x34>)
    4cec:	4b02      	ldr	r3, [pc, #8]	; (4cf8 <usbdc_register_handler+0x2c>)
    4cee:	4798      	blx	r3
    4cf0:	bd08      	pop	{r3, pc}
    4cf2:	bf00      	nop
    4cf4:	2000084c 	.word	0x2000084c
    4cf8:	00002729 	.word	0x00002729
    4cfc:	20000850 	.word	0x20000850
    4d00:	20000854 	.word	0x20000854

00004d04 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4d04:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    4d06:	4605      	mov	r5, r0
    4d08:	f240 3255 	movw	r2, #853	; 0x355
    4d0c:	490c      	ldr	r1, [pc, #48]	; (4d40 <usbdc_init+0x3c>)
    4d0e:	3000      	adds	r0, #0
    4d10:	bf18      	it	ne
    4d12:	2001      	movne	r0, #1
    4d14:	4b0b      	ldr	r3, [pc, #44]	; (4d44 <usbdc_init+0x40>)
    4d16:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4d18:	4b0b      	ldr	r3, [pc, #44]	; (4d48 <usbdc_init+0x44>)
    4d1a:	4798      	blx	r3
	if (rc < 0) {
    4d1c:	2800      	cmp	r0, #0
    4d1e:	db0e      	blt.n	4d3e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4d20:	4c0a      	ldr	r4, [pc, #40]	; (4d4c <usbdc_init+0x48>)
    4d22:	2220      	movs	r2, #32
    4d24:	2100      	movs	r1, #0
    4d26:	4620      	mov	r0, r4
    4d28:	4b09      	ldr	r3, [pc, #36]	; (4d50 <usbdc_init+0x4c>)
    4d2a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4d2c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4d2e:	4909      	ldr	r1, [pc, #36]	; (4d54 <usbdc_init+0x50>)
    4d30:	2000      	movs	r0, #0
    4d32:	4c09      	ldr	r4, [pc, #36]	; (4d58 <usbdc_init+0x54>)
    4d34:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4d36:	4909      	ldr	r1, [pc, #36]	; (4d5c <usbdc_init+0x58>)
    4d38:	2001      	movs	r0, #1
    4d3a:	47a0      	blx	r4

	return 0;
    4d3c:	2000      	movs	r0, #0
}
    4d3e:	bd38      	pop	{r3, r4, r5, pc}
    4d40:	00005d28 	.word	0x00005d28
    4d44:	000026cd 	.word	0x000026cd
    4d48:	00002381 	.word	0x00002381
    4d4c:	20000848 	.word	0x20000848
    4d50:	000050c5 	.word	0x000050c5
    4d54:	00004785 	.word	0x00004785
    4d58:	000023e9 	.word	0x000023e9
    4d5c:	00004871 	.word	0x00004871

00004d60 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    4d60:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    4d62:	4601      	mov	r1, r0
    4d64:	4801      	ldr	r0, [pc, #4]	; (4d6c <usbdc_register_function+0xc>)
    4d66:	4b02      	ldr	r3, [pc, #8]	; (4d70 <usbdc_register_function+0x10>)
    4d68:	4798      	blx	r3
    4d6a:	bd08      	pop	{r3, pc}
    4d6c:	20000858 	.word	0x20000858
    4d70:	00002729 	.word	0x00002729

00004d74 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4d74:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4d76:	4b0a      	ldr	r3, [pc, #40]	; (4da0 <usbdc_start+0x2c>)
    4d78:	7e9b      	ldrb	r3, [r3, #26]
    4d7a:	b95b      	cbnz	r3, 4d94 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    4d7c:	b168      	cbz	r0, 4d9a <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    4d7e:	4b08      	ldr	r3, [pc, #32]	; (4da0 <usbdc_start+0x2c>)
    4d80:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    4d82:	6802      	ldr	r2, [r0, #0]
    4d84:	79d2      	ldrb	r2, [r2, #7]
    4d86:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4d88:	2201      	movs	r2, #1
    4d8a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4d8c:	4b05      	ldr	r3, [pc, #20]	; (4da4 <usbdc_start+0x30>)
    4d8e:	4798      	blx	r3
	return ERR_NONE;
    4d90:	2000      	movs	r0, #0
    4d92:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    4d94:	f06f 0003 	mvn.w	r0, #3
    4d98:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    4d9a:	f06f 0008 	mvn.w	r0, #8
}
    4d9e:	bd08      	pop	{r3, pc}
    4da0:	20000848 	.word	0x20000848
    4da4:	000023f5 	.word	0x000023f5

00004da8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4da8:	b508      	push	{r3, lr}
	usb_d_attach();
    4daa:	4b01      	ldr	r3, [pc, #4]	; (4db0 <usbdc_attach+0x8>)
    4dac:	4798      	blx	r3
    4dae:	bd08      	pop	{r3, pc}
    4db0:	00002401 	.word	0x00002401

00004db4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    4db4:	4b01      	ldr	r3, [pc, #4]	; (4dbc <usbdc_get_ctrl_buffer+0x8>)
    4db6:	6958      	ldr	r0, [r3, #20]
    4db8:	4770      	bx	lr
    4dba:	bf00      	nop
    4dbc:	20000848 	.word	0x20000848

00004dc0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4dc0:	4b03      	ldr	r3, [pc, #12]	; (4dd0 <usbdc_get_state+0x10>)
    4dc2:	7e98      	ldrb	r0, [r3, #26]
    4dc4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    4dc8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    4dca:	bf18      	it	ne
    4dcc:	2010      	movne	r0, #16
    4dce:	4770      	bx	lr
    4dd0:	20000848 	.word	0x20000848

00004dd4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4dd4:	4288      	cmp	r0, r1
    4dd6:	d214      	bcs.n	4e02 <usb_find_desc+0x2e>
	return desc[0];
    4dd8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4dda:	2b01      	cmp	r3, #1
    4ddc:	d913      	bls.n	4e06 <usb_find_desc+0x32>
{
    4dde:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    4de0:	7844      	ldrb	r4, [r0, #1]
    4de2:	4294      	cmp	r4, r2
    4de4:	d00a      	beq.n	4dfc <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4de6:	4418      	add	r0, r3
	while (desc < eof) {
    4de8:	4281      	cmp	r1, r0
    4dea:	d906      	bls.n	4dfa <usb_find_desc+0x26>
	return desc[0];
    4dec:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4dee:	2b01      	cmp	r3, #1
    4df0:	d90b      	bls.n	4e0a <usb_find_desc+0x36>
	return desc[1];
    4df2:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4df4:	4294      	cmp	r4, r2
    4df6:	d1f6      	bne.n	4de6 <usb_find_desc+0x12>
    4df8:	e000      	b.n	4dfc <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4dfa:	2000      	movs	r0, #0
}
    4dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e00:	4770      	bx	lr
	return NULL;
    4e02:	2000      	movs	r0, #0
    4e04:	4770      	bx	lr
		_desc_len_check();
    4e06:	2000      	movs	r0, #0
    4e08:	4770      	bx	lr
    4e0a:	2000      	movs	r0, #0
    4e0c:	e7f6      	b.n	4dfc <usb_find_desc+0x28>

00004e0e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4e0e:	4288      	cmp	r0, r1
    4e10:	d216      	bcs.n	4e40 <usb_find_ep_desc+0x32>
	return desc[0];
    4e12:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4e14:	2b01      	cmp	r3, #1
    4e16:	d915      	bls.n	4e44 <usb_find_ep_desc+0x36>
	return desc[1];
    4e18:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4e1a:	2a04      	cmp	r2, #4
    4e1c:	d014      	beq.n	4e48 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4e1e:	2a05      	cmp	r2, #5
    4e20:	d00b      	beq.n	4e3a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    4e22:	4418      	add	r0, r3
	while (desc < eof) {
    4e24:	4281      	cmp	r1, r0
    4e26:	d909      	bls.n	4e3c <usb_find_ep_desc+0x2e>
	return desc[0];
    4e28:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4e2a:	2b01      	cmp	r3, #1
    4e2c:	d90e      	bls.n	4e4c <usb_find_ep_desc+0x3e>
	return desc[1];
    4e2e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4e30:	2a04      	cmp	r2, #4
    4e32:	d00d      	beq.n	4e50 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4e34:	2a05      	cmp	r2, #5
    4e36:	d1f4      	bne.n	4e22 <usb_find_ep_desc+0x14>
    4e38:	e00b      	b.n	4e52 <usb_find_ep_desc+0x44>
    4e3a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4e3c:	2000      	movs	r0, #0
    4e3e:	4770      	bx	lr
    4e40:	2000      	movs	r0, #0
    4e42:	4770      	bx	lr
		_desc_len_check();
    4e44:	2000      	movs	r0, #0
    4e46:	4770      	bx	lr
	return NULL;
    4e48:	2000      	movs	r0, #0
    4e4a:	4770      	bx	lr
		_desc_len_check();
    4e4c:	2000      	movs	r0, #0
    4e4e:	4770      	bx	lr
	return NULL;
    4e50:	2000      	movs	r0, #0
}
    4e52:	4770      	bx	lr

00004e54 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4e54:	b538      	push	{r3, r4, r5, lr}
    4e56:	460c      	mov	r4, r1
    4e58:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4e5a:	2202      	movs	r2, #2
    4e5c:	4b16      	ldr	r3, [pc, #88]	; (4eb8 <usb_find_cfg_desc+0x64>)
    4e5e:	4798      	blx	r3
	if (!desc) {
    4e60:	4603      	mov	r3, r0
    4e62:	b1e8      	cbz	r0, 4ea0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4e64:	4284      	cmp	r4, r0
    4e66:	d91d      	bls.n	4ea4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    4e68:	7802      	ldrb	r2, [r0, #0]
    4e6a:	2a01      	cmp	r2, #1
    4e6c:	d91c      	bls.n	4ea8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    4e6e:	7842      	ldrb	r2, [r0, #1]
    4e70:	2a02      	cmp	r2, #2
    4e72:	d11b      	bne.n	4eac <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    4e74:	7942      	ldrb	r2, [r0, #5]
    4e76:	42aa      	cmp	r2, r5
    4e78:	d012      	beq.n	4ea0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    4e7a:	78d9      	ldrb	r1, [r3, #3]
    4e7c:	789a      	ldrb	r2, [r3, #2]
    4e7e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4e82:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    4e86:	429c      	cmp	r4, r3
    4e88:	d909      	bls.n	4e9e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    4e8a:	781a      	ldrb	r2, [r3, #0]
    4e8c:	2a01      	cmp	r2, #1
    4e8e:	d90f      	bls.n	4eb0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    4e90:	785a      	ldrb	r2, [r3, #1]
    4e92:	2a02      	cmp	r2, #2
    4e94:	d10e      	bne.n	4eb4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    4e96:	795a      	ldrb	r2, [r3, #5]
    4e98:	42aa      	cmp	r2, r5
    4e9a:	d1ee      	bne.n	4e7a <usb_find_cfg_desc+0x26>
    4e9c:	e000      	b.n	4ea0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4e9e:	2300      	movs	r3, #0
}
    4ea0:	4618      	mov	r0, r3
    4ea2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    4ea4:	2300      	movs	r3, #0
    4ea6:	e7fb      	b.n	4ea0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4ea8:	2300      	movs	r3, #0
    4eaa:	e7f9      	b.n	4ea0 <usb_find_cfg_desc+0x4c>
	return NULL;
    4eac:	2300      	movs	r3, #0
    4eae:	e7f7      	b.n	4ea0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4eb0:	2300      	movs	r3, #0
    4eb2:	e7f5      	b.n	4ea0 <usb_find_cfg_desc+0x4c>
	return NULL;
    4eb4:	2300      	movs	r3, #0
    4eb6:	e7f3      	b.n	4ea0 <usb_find_cfg_desc+0x4c>
    4eb8:	00004dd5 	.word	0x00004dd5

00004ebc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4ebc:	4288      	cmp	r0, r1
    4ebe:	d217      	bcs.n	4ef0 <usb_find_str_desc+0x34>
{
    4ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ec4:	460d      	mov	r5, r1
    4ec6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4ec8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4eca:	f04f 0803 	mov.w	r8, #3
    4ece:	4f0c      	ldr	r7, [pc, #48]	; (4f00 <usb_find_str_desc+0x44>)
    4ed0:	4642      	mov	r2, r8
    4ed2:	4629      	mov	r1, r5
    4ed4:	47b8      	blx	r7
		if (desc) {
    4ed6:	4603      	mov	r3, r0
    4ed8:	b170      	cbz	r0, 4ef8 <usb_find_str_desc+0x3c>
	return desc[0];
    4eda:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4edc:	2801      	cmp	r0, #1
    4ede:	d90a      	bls.n	4ef6 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    4ee0:	42a6      	cmp	r6, r4
    4ee2:	d009      	beq.n	4ef8 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    4ee4:	4418      	add	r0, r3
    4ee6:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4ee8:	4285      	cmp	r5, r0
    4eea:	d8f1      	bhi.n	4ed0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4eec:	2300      	movs	r3, #0
    4eee:	e003      	b.n	4ef8 <usb_find_str_desc+0x3c>
    4ef0:	2300      	movs	r3, #0
}
    4ef2:	4618      	mov	r0, r3
    4ef4:	4770      	bx	lr
			_desc_len_check();
    4ef6:	2300      	movs	r3, #0
}
    4ef8:	4618      	mov	r0, r3
    4efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4efe:	bf00      	nop
    4f00:	00004dd5 	.word	0x00004dd5

00004f04 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    4f04:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    4f06:	4805      	ldr	r0, [pc, #20]	; (4f1c <cdc_device_acm_init+0x18>)
    4f08:	4b05      	ldr	r3, [pc, #20]	; (4f20 <cdc_device_acm_init+0x1c>)
    4f0a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4f0c:	4b05      	ldr	r3, [pc, #20]	; (4f24 <cdc_device_acm_init+0x20>)
    4f0e:	4798      	blx	r3

	usbdc_start(single_desc);
    4f10:	4805      	ldr	r0, [pc, #20]	; (4f28 <cdc_device_acm_init+0x24>)
    4f12:	4b06      	ldr	r3, [pc, #24]	; (4f2c <cdc_device_acm_init+0x28>)
    4f14:	4798      	blx	r3
	usbdc_attach();
    4f16:	4b06      	ldr	r3, [pc, #24]	; (4f30 <cdc_device_acm_init+0x2c>)
    4f18:	4798      	blx	r3
    4f1a:	bd08      	pop	{r3, pc}
    4f1c:	200008a8 	.word	0x200008a8
    4f20:	00004d05 	.word	0x00004d05
    4f24:	00004659 	.word	0x00004659
    4f28:	200000b0 	.word	0x200000b0
    4f2c:	00004d75 	.word	0x00004d75
    4f30:	00004da9 	.word	0x00004da9

00004f34 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4f34:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    4f36:	4b01      	ldr	r3, [pc, #4]	; (4f3c <usb_init+0x8>)
    4f38:	4798      	blx	r3
    4f3a:	bd08      	pop	{r3, pc}
    4f3c:	00004f05 	.word	0x00004f05

00004f40 <__libc_init_array>:
    4f40:	b570      	push	{r4, r5, r6, lr}
    4f42:	4e0f      	ldr	r6, [pc, #60]	; (4f80 <__libc_init_array+0x40>)
    4f44:	4d0f      	ldr	r5, [pc, #60]	; (4f84 <__libc_init_array+0x44>)
    4f46:	1b76      	subs	r6, r6, r5
    4f48:	10b6      	asrs	r6, r6, #2
    4f4a:	bf18      	it	ne
    4f4c:	2400      	movne	r4, #0
    4f4e:	d005      	beq.n	4f5c <__libc_init_array+0x1c>
    4f50:	3401      	adds	r4, #1
    4f52:	f855 3b04 	ldr.w	r3, [r5], #4
    4f56:	4798      	blx	r3
    4f58:	42a6      	cmp	r6, r4
    4f5a:	d1f9      	bne.n	4f50 <__libc_init_array+0x10>
    4f5c:	4e0a      	ldr	r6, [pc, #40]	; (4f88 <__libc_init_array+0x48>)
    4f5e:	4d0b      	ldr	r5, [pc, #44]	; (4f8c <__libc_init_array+0x4c>)
    4f60:	1b76      	subs	r6, r6, r5
    4f62:	f000 feef 	bl	5d44 <_init>
    4f66:	10b6      	asrs	r6, r6, #2
    4f68:	bf18      	it	ne
    4f6a:	2400      	movne	r4, #0
    4f6c:	d006      	beq.n	4f7c <__libc_init_array+0x3c>
    4f6e:	3401      	adds	r4, #1
    4f70:	f855 3b04 	ldr.w	r3, [r5], #4
    4f74:	4798      	blx	r3
    4f76:	42a6      	cmp	r6, r4
    4f78:	d1f9      	bne.n	4f6e <__libc_init_array+0x2e>
    4f7a:	bd70      	pop	{r4, r5, r6, pc}
    4f7c:	bd70      	pop	{r4, r5, r6, pc}
    4f7e:	bf00      	nop
    4f80:	00005d50 	.word	0x00005d50
    4f84:	00005d50 	.word	0x00005d50
    4f88:	00005d58 	.word	0x00005d58
    4f8c:	00005d50 	.word	0x00005d50

00004f90 <memcpy>:
    4f90:	4684      	mov	ip, r0
    4f92:	ea41 0300 	orr.w	r3, r1, r0
    4f96:	f013 0303 	ands.w	r3, r3, #3
    4f9a:	d16d      	bne.n	5078 <memcpy+0xe8>
    4f9c:	3a40      	subs	r2, #64	; 0x40
    4f9e:	d341      	bcc.n	5024 <memcpy+0x94>
    4fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fa4:	f840 3b04 	str.w	r3, [r0], #4
    4fa8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fac:	f840 3b04 	str.w	r3, [r0], #4
    4fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fb4:	f840 3b04 	str.w	r3, [r0], #4
    4fb8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fbc:	f840 3b04 	str.w	r3, [r0], #4
    4fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fc4:	f840 3b04 	str.w	r3, [r0], #4
    4fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fcc:	f840 3b04 	str.w	r3, [r0], #4
    4fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fd4:	f840 3b04 	str.w	r3, [r0], #4
    4fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fdc:	f840 3b04 	str.w	r3, [r0], #4
    4fe0:	f851 3b04 	ldr.w	r3, [r1], #4
    4fe4:	f840 3b04 	str.w	r3, [r0], #4
    4fe8:	f851 3b04 	ldr.w	r3, [r1], #4
    4fec:	f840 3b04 	str.w	r3, [r0], #4
    4ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    4ff4:	f840 3b04 	str.w	r3, [r0], #4
    4ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    4ffc:	f840 3b04 	str.w	r3, [r0], #4
    5000:	f851 3b04 	ldr.w	r3, [r1], #4
    5004:	f840 3b04 	str.w	r3, [r0], #4
    5008:	f851 3b04 	ldr.w	r3, [r1], #4
    500c:	f840 3b04 	str.w	r3, [r0], #4
    5010:	f851 3b04 	ldr.w	r3, [r1], #4
    5014:	f840 3b04 	str.w	r3, [r0], #4
    5018:	f851 3b04 	ldr.w	r3, [r1], #4
    501c:	f840 3b04 	str.w	r3, [r0], #4
    5020:	3a40      	subs	r2, #64	; 0x40
    5022:	d2bd      	bcs.n	4fa0 <memcpy+0x10>
    5024:	3230      	adds	r2, #48	; 0x30
    5026:	d311      	bcc.n	504c <memcpy+0xbc>
    5028:	f851 3b04 	ldr.w	r3, [r1], #4
    502c:	f840 3b04 	str.w	r3, [r0], #4
    5030:	f851 3b04 	ldr.w	r3, [r1], #4
    5034:	f840 3b04 	str.w	r3, [r0], #4
    5038:	f851 3b04 	ldr.w	r3, [r1], #4
    503c:	f840 3b04 	str.w	r3, [r0], #4
    5040:	f851 3b04 	ldr.w	r3, [r1], #4
    5044:	f840 3b04 	str.w	r3, [r0], #4
    5048:	3a10      	subs	r2, #16
    504a:	d2ed      	bcs.n	5028 <memcpy+0x98>
    504c:	320c      	adds	r2, #12
    504e:	d305      	bcc.n	505c <memcpy+0xcc>
    5050:	f851 3b04 	ldr.w	r3, [r1], #4
    5054:	f840 3b04 	str.w	r3, [r0], #4
    5058:	3a04      	subs	r2, #4
    505a:	d2f9      	bcs.n	5050 <memcpy+0xc0>
    505c:	3204      	adds	r2, #4
    505e:	d008      	beq.n	5072 <memcpy+0xe2>
    5060:	07d2      	lsls	r2, r2, #31
    5062:	bf1c      	itt	ne
    5064:	f811 3b01 	ldrbne.w	r3, [r1], #1
    5068:	f800 3b01 	strbne.w	r3, [r0], #1
    506c:	d301      	bcc.n	5072 <memcpy+0xe2>
    506e:	880b      	ldrh	r3, [r1, #0]
    5070:	8003      	strh	r3, [r0, #0]
    5072:	4660      	mov	r0, ip
    5074:	4770      	bx	lr
    5076:	bf00      	nop
    5078:	2a08      	cmp	r2, #8
    507a:	d313      	bcc.n	50a4 <memcpy+0x114>
    507c:	078b      	lsls	r3, r1, #30
    507e:	d08d      	beq.n	4f9c <memcpy+0xc>
    5080:	f010 0303 	ands.w	r3, r0, #3
    5084:	d08a      	beq.n	4f9c <memcpy+0xc>
    5086:	f1c3 0304 	rsb	r3, r3, #4
    508a:	1ad2      	subs	r2, r2, r3
    508c:	07db      	lsls	r3, r3, #31
    508e:	bf1c      	itt	ne
    5090:	f811 3b01 	ldrbne.w	r3, [r1], #1
    5094:	f800 3b01 	strbne.w	r3, [r0], #1
    5098:	d380      	bcc.n	4f9c <memcpy+0xc>
    509a:	f831 3b02 	ldrh.w	r3, [r1], #2
    509e:	f820 3b02 	strh.w	r3, [r0], #2
    50a2:	e77b      	b.n	4f9c <memcpy+0xc>
    50a4:	3a04      	subs	r2, #4
    50a6:	d3d9      	bcc.n	505c <memcpy+0xcc>
    50a8:	3a01      	subs	r2, #1
    50aa:	f811 3b01 	ldrb.w	r3, [r1], #1
    50ae:	f800 3b01 	strb.w	r3, [r0], #1
    50b2:	d2f9      	bcs.n	50a8 <memcpy+0x118>
    50b4:	780b      	ldrb	r3, [r1, #0]
    50b6:	7003      	strb	r3, [r0, #0]
    50b8:	784b      	ldrb	r3, [r1, #1]
    50ba:	7043      	strb	r3, [r0, #1]
    50bc:	788b      	ldrb	r3, [r1, #2]
    50be:	7083      	strb	r3, [r0, #2]
    50c0:	4660      	mov	r0, ip
    50c2:	4770      	bx	lr

000050c4 <memset>:
    50c4:	b470      	push	{r4, r5, r6}
    50c6:	0786      	lsls	r6, r0, #30
    50c8:	d046      	beq.n	5158 <memset+0x94>
    50ca:	1e54      	subs	r4, r2, #1
    50cc:	2a00      	cmp	r2, #0
    50ce:	d041      	beq.n	5154 <memset+0x90>
    50d0:	b2ca      	uxtb	r2, r1
    50d2:	4603      	mov	r3, r0
    50d4:	e002      	b.n	50dc <memset+0x18>
    50d6:	f114 34ff 	adds.w	r4, r4, #4294967295
    50da:	d33b      	bcc.n	5154 <memset+0x90>
    50dc:	f803 2b01 	strb.w	r2, [r3], #1
    50e0:	079d      	lsls	r5, r3, #30
    50e2:	d1f8      	bne.n	50d6 <memset+0x12>
    50e4:	2c03      	cmp	r4, #3
    50e6:	d92e      	bls.n	5146 <memset+0x82>
    50e8:	b2cd      	uxtb	r5, r1
    50ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    50ee:	2c0f      	cmp	r4, #15
    50f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    50f4:	d919      	bls.n	512a <memset+0x66>
    50f6:	f103 0210 	add.w	r2, r3, #16
    50fa:	4626      	mov	r6, r4
    50fc:	3e10      	subs	r6, #16
    50fe:	2e0f      	cmp	r6, #15
    5100:	f842 5c10 	str.w	r5, [r2, #-16]
    5104:	f842 5c0c 	str.w	r5, [r2, #-12]
    5108:	f842 5c08 	str.w	r5, [r2, #-8]
    510c:	f842 5c04 	str.w	r5, [r2, #-4]
    5110:	f102 0210 	add.w	r2, r2, #16
    5114:	d8f2      	bhi.n	50fc <memset+0x38>
    5116:	f1a4 0210 	sub.w	r2, r4, #16
    511a:	f022 020f 	bic.w	r2, r2, #15
    511e:	f004 040f 	and.w	r4, r4, #15
    5122:	3210      	adds	r2, #16
    5124:	2c03      	cmp	r4, #3
    5126:	4413      	add	r3, r2
    5128:	d90d      	bls.n	5146 <memset+0x82>
    512a:	461e      	mov	r6, r3
    512c:	4622      	mov	r2, r4
    512e:	3a04      	subs	r2, #4
    5130:	2a03      	cmp	r2, #3
    5132:	f846 5b04 	str.w	r5, [r6], #4
    5136:	d8fa      	bhi.n	512e <memset+0x6a>
    5138:	1f22      	subs	r2, r4, #4
    513a:	f022 0203 	bic.w	r2, r2, #3
    513e:	3204      	adds	r2, #4
    5140:	4413      	add	r3, r2
    5142:	f004 0403 	and.w	r4, r4, #3
    5146:	b12c      	cbz	r4, 5154 <memset+0x90>
    5148:	b2c9      	uxtb	r1, r1
    514a:	441c      	add	r4, r3
    514c:	f803 1b01 	strb.w	r1, [r3], #1
    5150:	429c      	cmp	r4, r3
    5152:	d1fb      	bne.n	514c <memset+0x88>
    5154:	bc70      	pop	{r4, r5, r6}
    5156:	4770      	bx	lr
    5158:	4614      	mov	r4, r2
    515a:	4603      	mov	r3, r0
    515c:	e7c2      	b.n	50e4 <memset+0x20>
    515e:	bf00      	nop
	...

00005180 <strlen>:
    5180:	f890 f000 	pld	[r0]
    5184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5188:	f020 0107 	bic.w	r1, r0, #7
    518c:	f06f 0c00 	mvn.w	ip, #0
    5190:	f010 0407 	ands.w	r4, r0, #7
    5194:	f891 f020 	pld	[r1, #32]
    5198:	f040 8049 	bne.w	522e <strlen+0xae>
    519c:	f04f 0400 	mov.w	r4, #0
    51a0:	f06f 0007 	mvn.w	r0, #7
    51a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    51a8:	f891 f040 	pld	[r1, #64]	; 0x40
    51ac:	f100 0008 	add.w	r0, r0, #8
    51b0:	fa82 f24c 	uadd8	r2, r2, ip
    51b4:	faa4 f28c 	sel	r2, r4, ip
    51b8:	fa83 f34c 	uadd8	r3, r3, ip
    51bc:	faa2 f38c 	sel	r3, r2, ip
    51c0:	bb4b      	cbnz	r3, 5216 <strlen+0x96>
    51c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    51c6:	fa82 f24c 	uadd8	r2, r2, ip
    51ca:	f100 0008 	add.w	r0, r0, #8
    51ce:	faa4 f28c 	sel	r2, r4, ip
    51d2:	fa83 f34c 	uadd8	r3, r3, ip
    51d6:	faa2 f38c 	sel	r3, r2, ip
    51da:	b9e3      	cbnz	r3, 5216 <strlen+0x96>
    51dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    51e0:	fa82 f24c 	uadd8	r2, r2, ip
    51e4:	f100 0008 	add.w	r0, r0, #8
    51e8:	faa4 f28c 	sel	r2, r4, ip
    51ec:	fa83 f34c 	uadd8	r3, r3, ip
    51f0:	faa2 f38c 	sel	r3, r2, ip
    51f4:	b97b      	cbnz	r3, 5216 <strlen+0x96>
    51f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    51fa:	f101 0120 	add.w	r1, r1, #32
    51fe:	fa82 f24c 	uadd8	r2, r2, ip
    5202:	f100 0008 	add.w	r0, r0, #8
    5206:	faa4 f28c 	sel	r2, r4, ip
    520a:	fa83 f34c 	uadd8	r3, r3, ip
    520e:	faa2 f38c 	sel	r3, r2, ip
    5212:	2b00      	cmp	r3, #0
    5214:	d0c6      	beq.n	51a4 <strlen+0x24>
    5216:	2a00      	cmp	r2, #0
    5218:	bf04      	itt	eq
    521a:	3004      	addeq	r0, #4
    521c:	461a      	moveq	r2, r3
    521e:	ba12      	rev	r2, r2
    5220:	fab2 f282 	clz	r2, r2
    5224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    522c:	4770      	bx	lr
    522e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5232:	f004 0503 	and.w	r5, r4, #3
    5236:	f1c4 0000 	rsb	r0, r4, #0
    523a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    523e:	f014 0f04 	tst.w	r4, #4
    5242:	f891 f040 	pld	[r1, #64]	; 0x40
    5246:	fa0c f505 	lsl.w	r5, ip, r5
    524a:	ea62 0205 	orn	r2, r2, r5
    524e:	bf1c      	itt	ne
    5250:	ea63 0305 	ornne	r3, r3, r5
    5254:	4662      	movne	r2, ip
    5256:	f04f 0400 	mov.w	r4, #0
    525a:	e7a9      	b.n	51b0 <strlen+0x30>

0000525c <register_fini>:
    525c:	4b02      	ldr	r3, [pc, #8]	; (5268 <register_fini+0xc>)
    525e:	b113      	cbz	r3, 5266 <register_fini+0xa>
    5260:	4802      	ldr	r0, [pc, #8]	; (526c <register_fini+0x10>)
    5262:	f000 b805 	b.w	5270 <atexit>
    5266:	4770      	bx	lr
    5268:	00000000 	.word	0x00000000
    526c:	0000527d 	.word	0x0000527d

00005270 <atexit>:
    5270:	2300      	movs	r3, #0
    5272:	4601      	mov	r1, r0
    5274:	461a      	mov	r2, r3
    5276:	4618      	mov	r0, r3
    5278:	f000 b81e 	b.w	52b8 <__register_exitproc>

0000527c <__libc_fini_array>:
    527c:	b538      	push	{r3, r4, r5, lr}
    527e:	4c0a      	ldr	r4, [pc, #40]	; (52a8 <__libc_fini_array+0x2c>)
    5280:	4d0a      	ldr	r5, [pc, #40]	; (52ac <__libc_fini_array+0x30>)
    5282:	1b64      	subs	r4, r4, r5
    5284:	10a4      	asrs	r4, r4, #2
    5286:	d00a      	beq.n	529e <__libc_fini_array+0x22>
    5288:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    528c:	3b01      	subs	r3, #1
    528e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5292:	3c01      	subs	r4, #1
    5294:	f855 3904 	ldr.w	r3, [r5], #-4
    5298:	4798      	blx	r3
    529a:	2c00      	cmp	r4, #0
    529c:	d1f9      	bne.n	5292 <__libc_fini_array+0x16>
    529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    52a2:	f000 bd59 	b.w	5d58 <_fini>
    52a6:	bf00      	nop
    52a8:	00005d68 	.word	0x00005d68
    52ac:	00005d64 	.word	0x00005d64

000052b0 <__retarget_lock_acquire_recursive>:
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop

000052b4 <__retarget_lock_release_recursive>:
    52b4:	4770      	bx	lr
    52b6:	bf00      	nop

000052b8 <__register_exitproc>:
    52b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52bc:	4d2c      	ldr	r5, [pc, #176]	; (5370 <__register_exitproc+0xb8>)
    52be:	4606      	mov	r6, r0
    52c0:	6828      	ldr	r0, [r5, #0]
    52c2:	4698      	mov	r8, r3
    52c4:	460f      	mov	r7, r1
    52c6:	4691      	mov	r9, r2
    52c8:	f7ff fff2 	bl	52b0 <__retarget_lock_acquire_recursive>
    52cc:	4b29      	ldr	r3, [pc, #164]	; (5374 <__register_exitproc+0xbc>)
    52ce:	681c      	ldr	r4, [r3, #0]
    52d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    52d4:	2b00      	cmp	r3, #0
    52d6:	d03e      	beq.n	5356 <__register_exitproc+0x9e>
    52d8:	685a      	ldr	r2, [r3, #4]
    52da:	2a1f      	cmp	r2, #31
    52dc:	dc1c      	bgt.n	5318 <__register_exitproc+0x60>
    52de:	f102 0e01 	add.w	lr, r2, #1
    52e2:	b176      	cbz	r6, 5302 <__register_exitproc+0x4a>
    52e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    52e8:	2401      	movs	r4, #1
    52ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    52ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    52f2:	4094      	lsls	r4, r2
    52f4:	4320      	orrs	r0, r4
    52f6:	2e02      	cmp	r6, #2
    52f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    52fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    5300:	d023      	beq.n	534a <__register_exitproc+0x92>
    5302:	3202      	adds	r2, #2
    5304:	f8c3 e004 	str.w	lr, [r3, #4]
    5308:	6828      	ldr	r0, [r5, #0]
    530a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    530e:	f7ff ffd1 	bl	52b4 <__retarget_lock_release_recursive>
    5312:	2000      	movs	r0, #0
    5314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5318:	4b17      	ldr	r3, [pc, #92]	; (5378 <__register_exitproc+0xc0>)
    531a:	b30b      	cbz	r3, 5360 <__register_exitproc+0xa8>
    531c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5320:	f3af 8000 	nop.w
    5324:	4603      	mov	r3, r0
    5326:	b1d8      	cbz	r0, 5360 <__register_exitproc+0xa8>
    5328:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    532c:	6002      	str	r2, [r0, #0]
    532e:	2100      	movs	r1, #0
    5330:	6041      	str	r1, [r0, #4]
    5332:	460a      	mov	r2, r1
    5334:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    5338:	f04f 0e01 	mov.w	lr, #1
    533c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    5340:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    5344:	2e00      	cmp	r6, #0
    5346:	d0dc      	beq.n	5302 <__register_exitproc+0x4a>
    5348:	e7cc      	b.n	52e4 <__register_exitproc+0x2c>
    534a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    534e:	430c      	orrs	r4, r1
    5350:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    5354:	e7d5      	b.n	5302 <__register_exitproc+0x4a>
    5356:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    535a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    535e:	e7bb      	b.n	52d8 <__register_exitproc+0x20>
    5360:	6828      	ldr	r0, [r5, #0]
    5362:	f7ff ffa7 	bl	52b4 <__retarget_lock_release_recursive>
    5366:	f04f 30ff 	mov.w	r0, #4294967295
    536a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    536e:	bf00      	nop
    5370:	20000538 	.word	0x20000538
    5374:	00005d40 	.word	0x00005d40
    5378:	00000000 	.word	0x00000000

0000537c <_ZL10HexToAscii>:
    537c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    538c:	68202020 41203273 434e4952 746e4920        hs2 ARINC Int
    539c:	61667265 0d0a6563 00000000 2d0a0d0a     erface.........-
    53ac:	43202d2d 6f736e6f 4320656c 616d6d6f     -- Console Comma
    53bc:	2073646e 706c6548 2d2d2d20 00000000     nds Help ---....
    53cc:	20200d0a 203d2050 69726150 54207974     ..  P = Parity T
    53dc:	6c67676f 6e6f2065 66666f2f 00000000     oggle on/off....
    53ec:	20200d0a 203d2054 494c4654 54202050     ..  T = TFLIP  T
    53fc:	6c67676f 6e6f2065 66666f2f 00000000     oggle on/off....
    540c:	20200d0a 203d2052 494c4652 54202050     ..  R = RFLIP  T
    541c:	6c67676f 6e6f2065 66666f2f 00000000     oggle on/off....
    542c:	20200d0a 203d2053 4e4f4453 4453202c     ..  S = SDON, SD
    543c:	53202c39 20303144 67676f54 6f20656c     9, SD10 Toggle o
    544c:	666f2f6e 00000066 20200d0a 203d2048     n/off.....  H = 
    545c:	73696854 6c654820 61502070 00006567     This Help Page..
    546c:	20200d0a 63617053 61422065 203d2072     ..  Space Bar = 
    547c:	70736944 2079616c 74617453 61207375     Display Status a
    548c:	4320646e 72746e6f 72206c6f 00736765     nd Control regs.
    549c:	20200d0a 203d2049 72636e49 6e656d65     ..  I = Incremen
    54ac:	654d2074 67617373 6e612065 72542064     t Message and Tr
    54bc:	6d736e61 202e7469 6c707845 7265726f     ansmit. Explorer
    54cc:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
    54dc:	20200d0a 203d204d 65746e45 75432072     ..  M = Enter Cu
    54ec:	6d6f7473 73654d20 65676173 7845202e     stom Message. Ex
    54fc:	726f6c70 4d207265 2065646f 4f202d20     plorer Mode  - O
    550c:	21594c4e 00000000 20200d0a 45544e45     NLY!......  ENTE
    551c:	54203d52 736e6172 2074696d 7478656e     R= Transmit next
    552c:	73656d20 65676173 7845202e 726f6c70      message. Explor
    553c:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
    554c:	00000d0a 00007830 50205854 74697261     ....0x..TX Parit
    555c:	4e4f2079 003e0d0a 50205854 74697261     y ON..>.TX Parit
    556c:	464f2079 3e0d0a46 00000000 494c4654     y OFF..>....TFLI
    557c:	65532050 3e0d0a74 00000000 494c4654     P Set..>....TFLI
    558c:	6c432050 65726165 3e0d0a64 00000000     P Cleared..>....
    559c:	2d434552 46522031 2050494c 0a746553     REC-1 RFLIP Set.
    55ac:	00003e0d 2d434552 46522031 2050494c     .>..REC-1 RFLIP 
    55bc:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
    55cc:	46522032 2050494c 0a746553 00003e0d     2 RFLIP Set..>..
    55dc:	2d434552 46522032 2050494c 61656c43     REC-2 RFLIP Clea
    55ec:	0a646572 00003e0d 2d434552 44532031     red..>..REC-1 SD
    55fc:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
    560c:	0a746553 00003e0d 2d434552 44532031     Set..>..REC-1 SD
    561c:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
    562c:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
    563c:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
    564c:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
    565c:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
    566c:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
    567c:	500a0d0a 73736572 61705320 42206563     ...Press Space B
    568c:	6f207261 57532072 7420342d 6572206f     ar or SW-4 to re
    569c:	656d7573 00000000 6562614c 2020736c     sume....Labels  
    56ac:	202d2030 203a3336 00000020 614c0d0a     0 - 63:  .....La
    56bc:	736c6562 34362020 3732312d 0020203a     bels  64-127:  .
    56cc:	614c0d0a 736c6562 38323120 3139312d     ..Labels 128-191
    56dc:	0020203a 614c0d0a 736c6562 32393120     :  ...Labels 192
    56ec:	3535322d 0020203a 543e0d0a 20202058     -255:  ...>TX   
    56fc:	74614420 00003a61 6562614c 00003a6c      Data:..Label:..
    570c:	2d636552 61442031 003a6174 2d314c50     Rec-1 Data:.PL1-
    571c:	61442031 003a6174 6374614d 00003a68     1 Data:.Match:..
    572c:	2d314c50 61442032 003a6174 2d314c50     PL1-2 Data:.PL1-
    573c:	61442033 003a6174 2d636552 61442032     3 Data:.Rec-2 Da
    574c:	003a6174 2d324c50 61442031 003a6174     ta:.PL2-1 Data:.
    575c:	2d324c50 61442032 003a6174 2d324c50     PL2-2 Data:.PL2-
    576c:	61442033 003a6174 72540d0a 6d736e61     3 Data:...Transm
    577c:	26207469 63655220 65766965 74695720     it & Receive Wit
    578c:	614c2068 736c6562 646f4d20 000d0a65     h Labels Mode...
    579c:	45530d0a 542d464c 2c545345 746e4920     ..SELF-TEST, Int
    57ac:	616e7265 6944206c 61746967 6f4c206c     ernal Digital Lo
    57bc:	622d706f 2c6b6361 206f4e20 61746164     op-back, No data
    57cc:	20736920 6e617274 74696d73 20646574      is transmitted 
    57dc:	65747865 6c616e72 0d0a796c 00000000     externally......
    57ec:	6c530d0a 5320776f 64656570 00000000     ..Slow Speed....
    57fc:	61460d0a 53207473 64656570 00000000     ..Fast Speed....
    580c:	72540d0a 6d736e61 65747469 61502072     ..Transmitter Pa
    581c:	79746972 616e4520 64656c62 00000000     rity Enabled....
    582c:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
    583c:	206f7420 74696e69 7a696c69 000d0a65      to initilize...
    584c:	65520d0a 76696563 312d7265 72615020     ..Receiver-1 Par
    585c:	20797469 45207369 6c62616e 00006465     ity is Enabled..
    586c:	65520d0a 76696563 312d7265 72615020     ..Receiver-1 Par
    587c:	20797469 44207369 62617369 0064656c     ity is Disabled.
    588c:	65520d0a 76696563 322d7265 72615020     ..Receiver-2 Par
    589c:	20797469 45207369 6c62616e 00006465     ity is Enabled..
    58ac:	65520d0a 76696563 322d7265 72615020     ..Receiver-2 Par
    58bc:	20797469 44207369 62617369 0064656c     ity is Disabled.
    58cc:	6c410d0a 616c206c 736c6562 65726120     ..All labels are
    58dc:	616e4520 64656c62 00000000 6c410d0a      Enabled......Al
    58ec:	616c206c 736c6562 65726120 73694420     l labels are Dis
    58fc:	656c6261 00000064 500a0d0a 73736572     abled......Press
    590c:	2d575320 6f742031 61747320 69207472      SW-1 to start i
    591c:	6974696e 796c6c61 000a0d0a 202d2d2d     nitially....--- 
    592c:	74747542 43206e6f 616d6d6f 2073646e     Button Commands 
    593c:	0a2d2d2d 0000000d 70532020 20656361     ---.....  Space 
    594c:	20726142 44206f74 6c707369 53207961     Bar to Display S
    595c:	75746174 6e612073 6f432064 6f72746e     tatus and Contro
    596c:	6552206c 74736967 0a737265 0000000d     l Registers.....
    597c:	20702020 50206f74 65737561 00000d0a       p to Pause....
    598c:	206d2020 44206f74 6c707369 4c207961       m to Display L
    599c:	6c656261 6d654d20 0079726f 72540d0a     abel Memory...Tr
    59ac:	6d736e61 69747469 0d0a676e 0000003e     ansmitting..>...
    59bc:	49480d0a 3935332d 74532033 73757461     ..HI-3593 Status
    59cc:	6f43202c 6f72746e 6552206c 74736967     , Control Regist
    59dc:	0d737265 0000000a 73657250 57532073     ers.....Press SW
    59ec:	726f2034 61707320 61626563 6f742072     4 or spacebar to
    59fc:	6e6f6320 756e6974 00000065 72540d0a      continue.....Tr
    5a0c:	6d736e61 50207469 65737561 000d0a64     ansmit Paused...
    5a1c:	73657250 4c4f2073 425f4445 4f545455     Press OLED_BUTTO
    5a2c:	20322d4e 74206f74 736e6172 2074696d     N-2 to transmit 
    5a3c:	20656e6f 6d617266 6e612065 61702064     one frame and pa
    5a4c:	0a657375 0000000d 73657250 4c4f2073     use.....Press OL
    5a5c:	425f4445 4f545455 20332d4e 52206f74     ED_BUTTON-3 to R
    5a6c:	6d757365 000d0a65 72540d0a 6d736e61     esume.....Transm
    5a7c:	65747469 65522072 656d7573 2e2e2e64     itter Resumed...
    5a8c:	00000d0a 65520d0a 76696563 31207265     ......Receiver 1
    5a9c:	62614c20 0a736c65 0000000d 65520d0a      Labels.......Re
    5aac:	76696563 32207265 62614c20 0a736c65     ceiver 2 Labels.
    5abc:	0000000d 72500d0a 20737365 342d5753     ......Press SW-4
    5acc:	206f7420 75736552 0d0a656d 00000000      to Resume......
    5adc:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    5aec:	735f6364 2e636e79 00000063 682f2e2e     dc_sync.c...../h
    5afc:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
    5b0c:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
    5b1c:	6d5f6970 7973615f 632e636e 00000000     pi_m_async.c....
    5b2c:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    5b3c:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    5b4c:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    5b5c:	2e747369 00000063                       ist.c...

00005b64 <_adcs>:
    5b64:	01000000 00800000 0000181d 00000000     ................
	...
    5b7c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    5b8c:	632e6364 00000000                       dc.c....

00005b94 <user_mux_confs>:
    5b94:	00000100 00000000 00000000 00000000     ................
	...

00005bd8 <channel_confs>:
    5bd8:	060c060c 00000000 00000000 00000000     ................
	...

00005c18 <interrupt_cfg>:
	...
    5c98:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    5ca8:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    5cb8:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    5cc8:	43000800 43000c00                       ...C...C

00005cd0 <_i2cms>:
	...
    5ce8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    5cf8:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00005d04 <_usb_ep_cfgs>:
    5d04:	200007e4 00000000 00000040 200007a4     ... ....@...... 
    5d14:	00000000 00000040 20000764 00000000     ....@...d.. ....
    5d24:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    5d34:	73752f65 2e636462 00000063              e/usbdc.c...

00005d40 <_global_impure_ptr>:
    5d40:	20000110                                ... 

00005d44 <_init>:
    5d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d46:	bf00      	nop
    5d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d4a:	bc08      	pop	{r3}
    5d4c:	469e      	mov	lr, r3
    5d4e:	4770      	bx	lr

00005d50 <__init_array_start>:
    5d50:	0000525d 	.word	0x0000525d

00005d54 <__frame_dummy_init_array_entry>:
    5d54:	00000289                                ....

00005d58 <_fini>:
    5d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d5a:	bf00      	nop
    5d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d5e:	bc08      	pop	{r3}
    5d60:	469e      	mov	lr, r3
    5d62:	4770      	bx	lr

00005d64 <__fini_array_start>:
    5d64:	00000265 	.word	0x00000265
