
SAMD21_DRIVER_INTERFACE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f58  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004e0  20000068  00002fc0  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000548  000034a0  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d046  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003361  00000000  00000000  0004d12f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00012109  00000000  00000000  00050490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b48  00000000  00000000  00062599  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000014b8  00000000  00000000  000630e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a1eb  00000000  00000000  00064599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f9a6  00000000  00000000  0007e784  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cf78  00000000  00000000  0008e12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e4c  00000000  00000000  0011b0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 25 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     H%. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	31 20 00 00 29 01 00 00 29 01 00 00 29 01 00 00     1 ..)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002f58 	.word	0x00002f58

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002f58 	.word	0x00002f58
     10c:	00002f58 	.word	0x00002f58
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000003e1 	.word	0x000003e1
     124:	00002de1 	.word	0x00002de1

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00002f58 	.word	0x00002f58
     1dc:	20000000 	.word	0x20000000
     1e0:	20000068 	.word	0x20000068
     1e4:	20000004 	.word	0x20000004
     1e8:	20000068 	.word	0x20000068
     1ec:	20000548 	.word	0x20000548
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00002ded 	.word	0x00002ded
     20c:	00002295 	.word	0x00002295

00000210 <SPI_MEMORIES_PORT_init>:
#include <hpl_pm_base.h>

struct spi_m_sync_descriptor SPI_MEMORIES;

void SPI_MEMORIES_PORT_init(void)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	46ce      	mov	lr, r9
     214:	4647      	mov	r7, r8
     216:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     218:	21c0      	movs	r1, #192	; 0xc0
     21a:	05c9      	lsls	r1, r1, #23
     21c:	2380      	movs	r3, #128	; 0x80
     21e:	009b      	lsls	r3, r3, #2
     220:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     222:	4b25      	ldr	r3, [pc, #148]	; (2b8 <SPI_MEMORIES_PORT_init+0xa8>)
     224:	4a25      	ldr	r2, [pc, #148]	; (2bc <SPI_MEMORIES_PORT_init+0xac>)
     226:	629a      	str	r2, [r3, #40]	; 0x28
     228:	4a25      	ldr	r2, [pc, #148]	; (2c0 <SPI_MEMORIES_PORT_init+0xb0>)
     22a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     22c:	2449      	movs	r4, #73	; 0x49
     22e:	5d1a      	ldrb	r2, [r3, r4]
     230:	2004      	movs	r0, #4
     232:	4382      	bics	r2, r0
     234:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     238:	2601      	movs	r6, #1
     23a:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23c:	2201      	movs	r2, #1
     23e:	4310      	orrs	r0, r2
     240:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     242:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     244:	2734      	movs	r7, #52	; 0x34
     246:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     248:	250f      	movs	r5, #15
     24a:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     24c:	2420      	movs	r4, #32
     24e:	46a1      	mov	r9, r4
     250:	464c      	mov	r4, r9
     252:	4320      	orrs	r0, r4
     254:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     256:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     258:	2080      	movs	r0, #128	; 0x80
     25a:	00c0      	lsls	r0, r0, #3
     25c:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25e:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     260:	4818      	ldr	r0, [pc, #96]	; (2c4 <SPI_MEMORIES_PORT_init+0xb4>)
     262:	6298      	str	r0, [r3, #40]	; 0x28
     264:	20c0      	movs	r0, #192	; 0xc0
     266:	0600      	lsls	r0, r0, #24
     268:	4684      	mov	ip, r0
     26a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26c:	3716      	adds	r7, #22
     26e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     270:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     272:	4310      	orrs	r0, r2
     274:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     276:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     278:	2035      	movs	r0, #53	; 0x35
     27a:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     27c:	240f      	movs	r4, #15
     27e:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     280:	3c0d      	subs	r4, #13
     282:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     284:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     286:	2780      	movs	r7, #128	; 0x80
     288:	013f      	lsls	r7, r7, #4
     28a:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28c:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     28e:	490e      	ldr	r1, [pc, #56]	; (2c8 <SPI_MEMORIES_PORT_init+0xb8>)
     290:	6299      	str	r1, [r3, #40]	; 0x28
     292:	4661      	mov	r1, ip
     294:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     296:	274b      	movs	r7, #75	; 0x4b
     298:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29c:	4311      	orrs	r1, r2
     29e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a0:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2a4:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     2a6:	4649      	mov	r1, r9
     2a8:	430a      	orrs	r2, r1
     2aa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ac:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     2ae:	bc0c      	pop	{r2, r3}
     2b0:	4690      	mov	r8, r2
     2b2:	4699      	mov	r9, r3
     2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	41004400 	.word	0x41004400
     2bc:	40020200 	.word	0x40020200
     2c0:	c0020000 	.word	0xc0020000
     2c4:	40000400 	.word	0x40000400
     2c8:	40000800 	.word	0x40000800

000002cc <SPI_MEMORIES_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2cc:	4a04      	ldr	r2, [pc, #16]	; (2e0 <SPI_MEMORIES_CLOCK_init+0x14>)
     2ce:	6a13      	ldr	r3, [r2, #32]
     2d0:	2104      	movs	r1, #4
     2d2:	430b      	orrs	r3, r1
     2d4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2d6:	4a03      	ldr	r2, [pc, #12]	; (2e4 <SPI_MEMORIES_CLOCK_init+0x18>)
     2d8:	4b03      	ldr	r3, [pc, #12]	; (2e8 <SPI_MEMORIES_CLOCK_init+0x1c>)
     2da:	805a      	strh	r2, [r3, #2]

void SPI_MEMORIES_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     2dc:	4770      	bx	lr
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	40000400 	.word	0x40000400
     2e4:	00004014 	.word	0x00004014
     2e8:	40000c00 	.word	0x40000c00

000002ec <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
     2ec:	b510      	push	{r4, lr}
	SPI_MEMORIES_CLOCK_init();
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <SPI_MEMORIES_init+0x14>)
     2f0:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM0);
     2f2:	4904      	ldr	r1, [pc, #16]	; (304 <SPI_MEMORIES_init+0x18>)
     2f4:	4804      	ldr	r0, [pc, #16]	; (308 <SPI_MEMORIES_init+0x1c>)
     2f6:	4b05      	ldr	r3, [pc, #20]	; (30c <SPI_MEMORIES_init+0x20>)
     2f8:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
     2fa:	4b05      	ldr	r3, [pc, #20]	; (310 <SPI_MEMORIES_init+0x24>)
     2fc:	4798      	blx	r3
}
     2fe:	bd10      	pop	{r4, pc}
     300:	000002cd 	.word	0x000002cd
     304:	42000800 	.word	0x42000800
     308:	20000530 	.word	0x20000530
     30c:	00000491 	.word	0x00000491
     310:	00000211 	.word	0x00000211

00000314 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     314:	b5f0      	push	{r4, r5, r6, r7, lr}
     316:	46c6      	mov	lr, r8
     318:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     31a:	24c0      	movs	r4, #192	; 0xc0
     31c:	05e4      	lsls	r4, r4, #23
     31e:	2280      	movs	r2, #128	; 0x80
     320:	0452      	lsls	r2, r2, #17
     322:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     324:	4b1a      	ldr	r3, [pc, #104]	; (390 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     326:	2780      	movs	r7, #128	; 0x80
     328:	05ff      	lsls	r7, r7, #23
     32a:	629f      	str	r7, [r3, #40]	; 0x28
     32c:	4919      	ldr	r1, [pc, #100]	; (394 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     32e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     330:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     332:	2058      	movs	r0, #88	; 0x58
     334:	5c19      	ldrb	r1, [r3, r0]
     336:	2204      	movs	r2, #4
     338:	4690      	mov	r8, r2
     33a:	4391      	bics	r1, r2
     33c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     33e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     340:	2601      	movs	r6, #1
     342:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     344:	2501      	movs	r5, #1
     346:	4329      	orrs	r1, r5
     348:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     34a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     34c:	381c      	subs	r0, #28
     34e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     350:	320b      	adds	r2, #11
     352:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     354:	3a09      	subs	r2, #9
     356:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     358:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     35a:	2180      	movs	r1, #128	; 0x80
     35c:	0489      	lsls	r1, r1, #18
     35e:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     360:	629f      	str	r7, [r3, #40]	; 0x28
     362:	4f0d      	ldr	r7, [pc, #52]	; (398 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     364:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     366:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     368:	2159      	movs	r1, #89	; 0x59
     36a:	5c5c      	ldrb	r4, [r3, r1]
     36c:	4642      	mov	r2, r8
     36e:	4394      	bics	r4, r2
     370:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     372:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     374:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     376:	432a      	orrs	r2, r5
     378:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     37a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     37e:	394a      	subs	r1, #74	; 0x4a
     380:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     382:	3151      	adds	r1, #81	; 0x51
     384:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     386:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     388:	bc04      	pop	{r2}
     38a:	4690      	mov	r8, r2
     38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	41004400 	.word	0x41004400
     394:	c0000100 	.word	0xc0000100
     398:	c0000200 	.word	0xc0000200

0000039c <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     39c:	4b06      	ldr	r3, [pc, #24]	; (3b8 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     39e:	69da      	ldr	r2, [r3, #28]
     3a0:	2120      	movs	r1, #32
     3a2:	430a      	orrs	r2, r1
     3a4:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     3a6:	695a      	ldr	r2, [r3, #20]
     3a8:	3120      	adds	r1, #32
     3aa:	430a      	orrs	r2, r1
     3ac:	615a      	str	r2, [r3, #20]
     3ae:	4a03      	ldr	r2, [pc, #12]	; (3bc <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     3b0:	4b03      	ldr	r3, [pc, #12]	; (3c0 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     3b2:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     3b4:	4770      	bx	lr
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	40000400 	.word	0x40000400
     3bc:	00004106 	.word	0x00004106
     3c0:	40000c00 	.word	0x40000c00

000003c4 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     3c4:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     3c6:	4b03      	ldr	r3, [pc, #12]	; (3d4 <USB_DEVICE_INSTANCE_init+0x10>)
     3c8:	4798      	blx	r3
	usb_d_init();
     3ca:	4b03      	ldr	r3, [pc, #12]	; (3d8 <USB_DEVICE_INSTANCE_init+0x14>)
     3cc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     3ce:	4b03      	ldr	r3, [pc, #12]	; (3dc <USB_DEVICE_INSTANCE_init+0x18>)
     3d0:	4798      	blx	r3
}
     3d2:	bd10      	pop	{r4, pc}
     3d4:	0000039d 	.word	0x0000039d
     3d8:	00000815 	.word	0x00000815
     3dc:	00000315 	.word	0x00000315

000003e0 <system_init>:

void system_init(void)
{
     3e0:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3e2:	4b1c      	ldr	r3, [pc, #112]	; (454 <system_init+0x74>)
     3e4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e6:	22c0      	movs	r2, #192	; 0xc0
     3e8:	05d2      	lsls	r2, r2, #23
     3ea:	2380      	movs	r3, #128	; 0x80
     3ec:	039b      	lsls	r3, r3, #14
     3ee:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3f0:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f2:	4b19      	ldr	r3, [pc, #100]	; (458 <system_init+0x78>)
     3f4:	2080      	movs	r0, #128	; 0x80
     3f6:	05c0      	lsls	r0, r0, #23
     3f8:	6298      	str	r0, [r3, #40]	; 0x28
     3fa:	4918      	ldr	r1, [pc, #96]	; (45c <system_init+0x7c>)
     3fc:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fe:	2555      	movs	r5, #85	; 0x55
     400:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     402:	2101      	movs	r1, #1
     404:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     408:	2480      	movs	r4, #128	; 0x80
     40a:	03e4      	lsls	r4, r4, #15
     40c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     40e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     410:	6298      	str	r0, [r3, #40]	; 0x28
     412:	4c13      	ldr	r4, [pc, #76]	; (460 <system_init+0x80>)
     414:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     416:	3501      	adds	r5, #1
     418:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     41a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     41e:	2480      	movs	r4, #128	; 0x80
     420:	0524      	lsls	r4, r4, #20
     422:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     424:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     426:	6298      	str	r0, [r3, #40]	; 0x28
     428:	4c0e      	ldr	r4, [pc, #56]	; (464 <system_init+0x84>)
     42a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42c:	3505      	adds	r5, #5
     42e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     430:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     434:	2480      	movs	r4, #128	; 0x80
     436:	0564      	lsls	r4, r4, #21
     438:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     43a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43c:	6298      	str	r0, [r3, #40]	; 0x28
     43e:	4a0a      	ldr	r2, [pc, #40]	; (468 <system_init+0x88>)
     440:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	205c      	movs	r0, #92	; 0x5c
     444:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     448:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_MEMORIES_init();
     44a:	4b08      	ldr	r3, [pc, #32]	; (46c <system_init+0x8c>)
     44c:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     44e:	4b08      	ldr	r3, [pc, #32]	; (470 <system_init+0x90>)
     450:	4798      	blx	r3
}
     452:	bd70      	pop	{r4, r5, r6, pc}
     454:	00000bd5 	.word	0x00000bd5
     458:	41004400 	.word	0x41004400
     45c:	c0000020 	.word	0xc0000020
     460:	c0000040 	.word	0xc0000040
     464:	c0000800 	.word	0xc0000800
     468:	c0001000 	.word	0xc0001000
     46c:	000002ed 	.word	0x000002ed
     470:	000003c5 	.word	0x000003c5

00000474 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     474:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     478:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     47a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     47c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     480:	4770      	bx	lr

00000482 <atomic_leave_critical>:
     482:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     486:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     488:	f383 8810 	msr	PRIMASK, r3
}
     48c:	4770      	bx	lr
	...

00000490 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     490:	b570      	push	{r4, r5, r6, lr}
     492:	0004      	movs	r4, r0
     494:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     496:	2800      	cmp	r0, #0
     498:	d016      	beq.n	4c8 <spi_m_sync_init+0x38>
     49a:	0008      	movs	r0, r1
     49c:	1e43      	subs	r3, r0, #1
     49e:	4198      	sbcs	r0, r3
     4a0:	b2c0      	uxtb	r0, r0
     4a2:	2240      	movs	r2, #64	; 0x40
     4a4:	4909      	ldr	r1, [pc, #36]	; (4cc <spi_m_sync_init+0x3c>)
     4a6:	4b0a      	ldr	r3, [pc, #40]	; (4d0 <spi_m_sync_init+0x40>)
     4a8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     4aa:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     4ac:	1d20      	adds	r0, r4, #4
     4ae:	0029      	movs	r1, r5
     4b0:	4b08      	ldr	r3, [pc, #32]	; (4d4 <spi_m_sync_init+0x44>)
     4b2:	4798      	blx	r3

	if (rc < 0) {
     4b4:	2800      	cmp	r0, #0
     4b6:	db06      	blt.n	4c6 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     4b8:	4b07      	ldr	r3, [pc, #28]	; (4d8 <spi_m_sync_init+0x48>)
     4ba:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     4bc:	4b07      	ldr	r3, [pc, #28]	; (4dc <spi_m_sync_init+0x4c>)
     4be:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     4c0:	4b07      	ldr	r3, [pc, #28]	; (4e0 <spi_m_sync_init+0x50>)
     4c2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     4c4:	2000      	movs	r0, #0
}
     4c6:	bd70      	pop	{r4, r5, r6, pc}
     4c8:	2000      	movs	r0, #0
     4ca:	e7ea      	b.n	4a2 <spi_m_sync_init+0x12>
     4cc:	00002e58 	.word	0x00002e58
     4d0:	00000b69 	.word	0x00000b69
     4d4:	00000c7d 	.word	0x00000c7d
     4d8:	ffff8000 	.word	0xffff8000
     4dc:	00000569 	.word	0x00000569
     4e0:	0000052d 	.word	0x0000052d

000004e4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     4e4:	b530      	push	{r4, r5, lr}
     4e6:	b087      	sub	sp, #28
     4e8:	0004      	movs	r4, r0
     4ea:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     4ec:	2800      	cmp	r0, #0
     4ee:	d014      	beq.n	51a <spi_m_sync_transfer+0x36>
     4f0:	0008      	movs	r0, r1
     4f2:	1e43      	subs	r3, r0, #1
     4f4:	4198      	sbcs	r0, r3
     4f6:	b2c0      	uxtb	r0, r0
     4f8:	22b3      	movs	r2, #179	; 0xb3
     4fa:	4909      	ldr	r1, [pc, #36]	; (520 <spi_m_sync_transfer+0x3c>)
     4fc:	4b09      	ldr	r3, [pc, #36]	; (524 <spi_m_sync_transfer+0x40>)
     4fe:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     500:	682b      	ldr	r3, [r5, #0]
     502:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     504:	686b      	ldr	r3, [r5, #4]
     506:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     508:	68ab      	ldr	r3, [r5, #8]
     50a:	9301      	str	r3, [sp, #4]
     50c:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     50e:	1d20      	adds	r0, r4, #4
     510:	a903      	add	r1, sp, #12
     512:	4b05      	ldr	r3, [pc, #20]	; (528 <spi_m_sync_transfer+0x44>)
     514:	4798      	blx	r3
}
     516:	b007      	add	sp, #28
     518:	bd30      	pop	{r4, r5, pc}
     51a:	2000      	movs	r0, #0
     51c:	e7ec      	b.n	4f8 <spi_m_sync_transfer+0x14>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	00002e58 	.word	0x00002e58
     524:	00000b69 	.word	0x00000b69
     528:	00000d75 	.word	0x00000d75

0000052c <_spi_m_sync_io_write>:
{
     52c:	b570      	push	{r4, r5, r6, lr}
     52e:	b084      	sub	sp, #16
     530:	0004      	movs	r4, r0
     532:	000e      	movs	r6, r1
     534:	0015      	movs	r5, r2
	ASSERT(io);
     536:	1e43      	subs	r3, r0, #1
     538:	4198      	sbcs	r0, r3
     53a:	b2c0      	uxtb	r0, r0
     53c:	22a3      	movs	r2, #163	; 0xa3
     53e:	4907      	ldr	r1, [pc, #28]	; (55c <_spi_m_sync_io_write+0x30>)
     540:	4b07      	ldr	r3, [pc, #28]	; (560 <_spi_m_sync_io_write+0x34>)
     542:	4798      	blx	r3
	xfer.rxbuf = 0;
     544:	2300      	movs	r3, #0
     546:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     548:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     54a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     54c:	0020      	movs	r0, r4
     54e:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     550:	a901      	add	r1, sp, #4
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <_spi_m_sync_io_write+0x38>)
     554:	4798      	blx	r3
}
     556:	b004      	add	sp, #16
     558:	bd70      	pop	{r4, r5, r6, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00002e58 	.word	0x00002e58
     560:	00000b69 	.word	0x00000b69
     564:	000004e5 	.word	0x000004e5

00000568 <_spi_m_sync_io_read>:
{
     568:	b570      	push	{r4, r5, r6, lr}
     56a:	b084      	sub	sp, #16
     56c:	0004      	movs	r4, r0
     56e:	000e      	movs	r6, r1
     570:	0015      	movs	r5, r2
	ASSERT(io);
     572:	1e43      	subs	r3, r0, #1
     574:	4198      	sbcs	r0, r3
     576:	b2c0      	uxtb	r0, r0
     578:	2287      	movs	r2, #135	; 0x87
     57a:	4907      	ldr	r1, [pc, #28]	; (598 <_spi_m_sync_io_read+0x30>)
     57c:	4b07      	ldr	r3, [pc, #28]	; (59c <_spi_m_sync_io_read+0x34>)
     57e:	4798      	blx	r3
	xfer.rxbuf = buf;
     580:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     582:	2300      	movs	r3, #0
     584:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     586:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     588:	0020      	movs	r0, r4
     58a:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     58c:	a901      	add	r1, sp, #4
     58e:	4b04      	ldr	r3, [pc, #16]	; (5a0 <_spi_m_sync_io_read+0x38>)
     590:	4798      	blx	r3
}
     592:	b004      	add	sp, #16
     594:	bd70      	pop	{r4, r5, r6, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	00002e58 	.word	0x00002e58
     59c:	00000b69 	.word	0x00000b69
     5a0:	000004e5 	.word	0x000004e5

000005a4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <_usb_d_find_ep+0x40>)
     5aa:	785a      	ldrb	r2, [r3, #1]
     5ac:	4290      	cmp	r0, r2
     5ae:	d017      	beq.n	5e0 <_usb_d_find_ep+0x3c>
     5b0:	2300      	movs	r3, #0
     5b2:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     5b4:	4f0b      	ldr	r7, [pc, #44]	; (5e4 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     5b6:	260f      	movs	r6, #15
     5b8:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     5ba:	003d      	movs	r5, r7
     5bc:	e008      	b.n	5d0 <_usb_d_find_ep+0x2c>
     5be:	3001      	adds	r0, #1
     5c0:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     5c2:	2804      	cmp	r0, #4
     5c4:	d00a      	beq.n	5dc <_usb_d_find_ep+0x38>
     5c6:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     5c8:	18ea      	adds	r2, r5, r3
     5ca:	7852      	ldrb	r2, [r2, #1]
     5cc:	42a2      	cmp	r2, r4
     5ce:	d006      	beq.n	5de <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     5d0:	5dd9      	ldrb	r1, [r3, r7]
     5d2:	2900      	cmp	r1, #0
     5d4:	d1f3      	bne.n	5be <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     5d6:	4296      	cmp	r6, r2
     5d8:	d1f1      	bne.n	5be <_usb_d_find_ep+0x1a>
     5da:	e000      	b.n	5de <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     5dc:	3805      	subs	r0, #5
}
     5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     5e0:	2000      	movs	r0, #0
     5e2:	e7fc      	b.n	5de <_usb_d_find_ep+0x3a>
     5e4:	20000084 	.word	0x20000084

000005e8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     5e8:	2000      	movs	r0, #0
     5ea:	4770      	bx	lr

000005ec <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     5ec:	b570      	push	{r4, r5, r6, lr}
     5ee:	0004      	movs	r4, r0
     5f0:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     5f2:	4b0a      	ldr	r3, [pc, #40]	; (61c <usb_d_cb_trans_more+0x30>)
     5f4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     5f6:	0142      	lsls	r2, r0, #5
     5f8:	4b09      	ldr	r3, [pc, #36]	; (620 <usb_d_cb_trans_more+0x34>)
     5fa:	189b      	adds	r3, r3, r2
     5fc:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     5fe:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     600:	2a03      	cmp	r2, #3
     602:	d001      	beq.n	608 <usb_d_cb_trans_more+0x1c>
}
     604:	0018      	movs	r0, r3
     606:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     608:	0140      	lsls	r0, r0, #5
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <usb_d_cb_trans_more+0x34>)
     60c:	1818      	adds	r0, r3, r0
     60e:	6983      	ldr	r3, [r0, #24]
     610:	0029      	movs	r1, r5
     612:	0020      	movs	r0, r4
     614:	4798      	blx	r3
     616:	0003      	movs	r3, r0
     618:	e7f4      	b.n	604 <usb_d_cb_trans_more+0x18>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	000005a5 	.word	0x000005a5
     620:	20000084 	.word	0x20000084

00000624 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	b085      	sub	sp, #20
     628:	0005      	movs	r5, r0
     62a:	000f      	movs	r7, r1
     62c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     62e:	4b51      	ldr	r3, [pc, #324]	; (774 <_usb_d_cb_trans_done+0x150>)
     630:	4798      	blx	r3
     632:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     634:	2f00      	cmp	r7, #0
     636:	d162      	bne.n	6fe <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     638:	4b4f      	ldr	r3, [pc, #316]	; (778 <_usb_d_cb_trans_done+0x154>)
     63a:	0142      	lsls	r2, r0, #5
     63c:	1899      	adds	r1, r3, r2
     63e:	2000      	movs	r0, #0
     640:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     642:	5cd3      	ldrb	r3, [r2, r3]
     644:	2b00      	cmp	r3, #0
     646:	d00e      	beq.n	666 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     648:	0162      	lsls	r2, r4, #5
     64a:	4b4b      	ldr	r3, [pc, #300]	; (778 <_usb_d_cb_trans_done+0x154>)
     64c:	189b      	adds	r3, r3, r2
     64e:	2201      	movs	r2, #1
     650:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     652:	0164      	lsls	r4, r4, #5
     654:	4b48      	ldr	r3, [pc, #288]	; (778 <_usb_d_cb_trans_done+0x154>)
     656:	191c      	adds	r4, r3, r4
     658:	78e1      	ldrb	r1, [r4, #3]
     65a:	69e3      	ldr	r3, [r4, #28]
     65c:	0032      	movs	r2, r6
     65e:	0028      	movs	r0, r5
     660:	4798      	blx	r3
}
     662:	b005      	add	sp, #20
     664:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     666:	788b      	ldrb	r3, [r1, #2]
     668:	2b03      	cmp	r3, #3
     66a:	d00c      	beq.n	686 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     66c:	4b42      	ldr	r3, [pc, #264]	; (778 <_usb_d_cb_trans_done+0x154>)
     66e:	0162      	lsls	r2, r4, #5
     670:	320c      	adds	r2, #12
     672:	189a      	adds	r2, r3, r2
     674:	0164      	lsls	r4, r4, #5
     676:	191c      	adds	r4, r3, r4
     678:	7860      	ldrb	r0, [r4, #1]
     67a:	2100      	movs	r1, #0
     67c:	69e3      	ldr	r3, [r4, #28]
     67e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     680:	2302      	movs	r3, #2
     682:	70a3      	strb	r3, [r4, #2]
     684:	e7ed      	b.n	662 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     686:	4a3c      	ldr	r2, [pc, #240]	; (778 <_usb_d_cb_trans_done+0x154>)
     688:	000b      	movs	r3, r1
     68a:	250c      	movs	r5, #12
     68c:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     68e:	0161      	lsls	r1, r4, #5
     690:	310c      	adds	r1, #12
     692:	1852      	adds	r2, r2, r1
     694:	7858      	ldrb	r0, [r3, #1]
     696:	69db      	ldr	r3, [r3, #28]
     698:	2101      	movs	r1, #1
     69a:	4798      	blx	r3
		if (err) {
     69c:	2800      	cmp	r0, #0
     69e:	d017      	beq.n	6d0 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     6a0:	0162      	lsls	r2, r4, #5
     6a2:	4b35      	ldr	r3, [pc, #212]	; (778 <_usb_d_cb_trans_done+0x154>)
     6a4:	189b      	adds	r3, r3, r2
     6a6:	2205      	movs	r2, #5
     6a8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     6aa:	3a03      	subs	r2, #3
     6ac:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     6ae:	2d00      	cmp	r5, #0
     6b0:	db09      	blt.n	6c6 <_usb_d_cb_trans_done+0xa2>
     6b2:	0164      	lsls	r4, r4, #5
     6b4:	4b30      	ldr	r3, [pc, #192]	; (778 <_usb_d_cb_trans_done+0x154>)
     6b6:	191c      	adds	r4, r3, r4
     6b8:	7860      	ldrb	r0, [r4, #1]
     6ba:	2380      	movs	r3, #128	; 0x80
     6bc:	4318      	orrs	r0, r3
     6be:	2101      	movs	r1, #1
     6c0:	4b2e      	ldr	r3, [pc, #184]	; (77c <_usb_d_cb_trans_done+0x158>)
     6c2:	4798      	blx	r3
     6c4:	e7cd      	b.n	662 <_usb_d_cb_trans_done+0x3e>
     6c6:	0164      	lsls	r4, r4, #5
     6c8:	4b2b      	ldr	r3, [pc, #172]	; (778 <_usb_d_cb_trans_done+0x154>)
     6ca:	191c      	adds	r4, r3, r4
     6cc:	7860      	ldrb	r0, [r4, #1]
     6ce:	e7f6      	b.n	6be <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     6d0:	0164      	lsls	r4, r4, #5
     6d2:	4b29      	ldr	r3, [pc, #164]	; (778 <_usb_d_cb_trans_done+0x154>)
     6d4:	191c      	adds	r4, r3, r4
     6d6:	2304      	movs	r3, #4
     6d8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     6da:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     6dc:	2200      	movs	r2, #0
     6de:	9201      	str	r2, [sp, #4]
     6e0:	9202      	str	r2, [sp, #8]
     6e2:	2d00      	cmp	r5, #0
     6e4:	db08      	blt.n	6f8 <_usb_d_cb_trans_done+0xd4>
     6e6:	3280      	adds	r2, #128	; 0x80
     6e8:	4313      	orrs	r3, r2
     6ea:	a801      	add	r0, sp, #4
     6ec:	7203      	strb	r3, [r0, #8]
     6ee:	2301      	movs	r3, #1
     6f0:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     6f2:	4b23      	ldr	r3, [pc, #140]	; (780 <_usb_d_cb_trans_done+0x15c>)
     6f4:	4798      	blx	r3
     6f6:	e7b4      	b.n	662 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     6f8:	220f      	movs	r2, #15
     6fa:	4013      	ands	r3, r2
     6fc:	e7f5      	b.n	6ea <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     6fe:	2f01      	cmp	r7, #1
     700:	d00a      	beq.n	718 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     702:	2f02      	cmp	r7, #2
     704:	d01d      	beq.n	742 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     706:	2f03      	cmp	r7, #3
     708:	d02c      	beq.n	764 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     70a:	0142      	lsls	r2, r0, #5
     70c:	4b1a      	ldr	r3, [pc, #104]	; (778 <_usb_d_cb_trans_done+0x154>)
     70e:	189b      	adds	r3, r3, r2
     710:	2206      	movs	r2, #6
     712:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     714:	70da      	strb	r2, [r3, #3]
     716:	e79c      	b.n	652 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     718:	4b17      	ldr	r3, [pc, #92]	; (778 <_usb_d_cb_trans_done+0x154>)
     71a:	0142      	lsls	r2, r0, #5
     71c:	1899      	adds	r1, r3, r2
     71e:	2002      	movs	r0, #2
     720:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     722:	5cd3      	ldrb	r3, [r2, r3]
     724:	2b00      	cmp	r3, #0
     726:	d005      	beq.n	734 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     728:	0162      	lsls	r2, r4, #5
     72a:	4b13      	ldr	r3, [pc, #76]	; (778 <_usb_d_cb_trans_done+0x154>)
     72c:	189b      	adds	r3, r3, r2
     72e:	2205      	movs	r2, #5
     730:	709a      	strb	r2, [r3, #2]
     732:	e78e      	b.n	652 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     734:	2202      	movs	r2, #2
     736:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     738:	2100      	movs	r1, #0
     73a:	0028      	movs	r0, r5
     73c:	4b0f      	ldr	r3, [pc, #60]	; (77c <_usb_d_cb_trans_done+0x158>)
     73e:	4798      	blx	r3
     740:	e787      	b.n	652 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     742:	4b0d      	ldr	r3, [pc, #52]	; (778 <_usb_d_cb_trans_done+0x154>)
     744:	0142      	lsls	r2, r0, #5
     746:	1899      	adds	r1, r3, r2
     748:	2004      	movs	r0, #4
     74a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     74c:	5cd3      	ldrb	r3, [r2, r3]
     74e:	2b00      	cmp	r3, #0
     750:	d005      	beq.n	75e <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     752:	0162      	lsls	r2, r4, #5
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <_usb_d_cb_trans_done+0x154>)
     756:	189b      	adds	r3, r3, r2
     758:	2201      	movs	r2, #1
     75a:	709a      	strb	r2, [r3, #2]
     75c:	e779      	b.n	652 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     75e:	2302      	movs	r3, #2
     760:	708b      	strb	r3, [r1, #2]
			return;
     762:	e77e      	b.n	662 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     764:	0142      	lsls	r2, r0, #5
     766:	4b04      	ldr	r3, [pc, #16]	; (778 <_usb_d_cb_trans_done+0x154>)
     768:	189b      	adds	r3, r3, r2
     76a:	2200      	movs	r2, #0
     76c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     76e:	3205      	adds	r2, #5
     770:	70da      	strb	r2, [r3, #3]
     772:	e76e      	b.n	652 <_usb_d_cb_trans_done+0x2e>
     774:	000005a5 	.word	0x000005a5
     778:	20000084 	.word	0x20000084
     77c:	00001bf9 	.word	0x00001bf9
     780:	00001dcd 	.word	0x00001dcd

00000784 <usb_d_cb_trans_setup>:
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46c6      	mov	lr, r8
     788:	b500      	push	{lr}
     78a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     78c:	4b1d      	ldr	r3, [pc, #116]	; (804 <usb_d_cb_trans_setup+0x80>)
     78e:	4798      	blx	r3
     790:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     792:	0145      	lsls	r5, r0, #5
     794:	350c      	adds	r5, #12
     796:	4b1c      	ldr	r3, [pc, #112]	; (808 <usb_d_cb_trans_setup+0x84>)
     798:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     79a:	0029      	movs	r1, r5
     79c:	0020      	movs	r0, r4
     79e:	4b1b      	ldr	r3, [pc, #108]	; (80c <usb_d_cb_trans_setup+0x88>)
     7a0:	4798      	blx	r3
	if (n != 8) {
     7a2:	b2c0      	uxtb	r0, r0
     7a4:	2808      	cmp	r0, #8
     7a6:	d00a      	beq.n	7be <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     7a8:	2101      	movs	r1, #1
     7aa:	0020      	movs	r0, r4
     7ac:	4d18      	ldr	r5, [pc, #96]	; (810 <usb_d_cb_trans_setup+0x8c>)
     7ae:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     7b0:	2080      	movs	r0, #128	; 0x80
     7b2:	4320      	orrs	r0, r4
     7b4:	2101      	movs	r1, #1
     7b6:	47a8      	blx	r5
}
     7b8:	bc04      	pop	{r2}
     7ba:	4690      	mov	r8, r2
     7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     7be:	2100      	movs	r1, #0
     7c0:	0020      	movs	r0, r4
     7c2:	4b13      	ldr	r3, [pc, #76]	; (810 <usb_d_cb_trans_setup+0x8c>)
     7c4:	4698      	mov	r8, r3
     7c6:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     7c8:	2780      	movs	r7, #128	; 0x80
     7ca:	4327      	orrs	r7, r4
     7cc:	2100      	movs	r1, #0
     7ce:	0038      	movs	r0, r7
     7d0:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     7d2:	0172      	lsls	r2, r6, #5
     7d4:	4b0c      	ldr	r3, [pc, #48]	; (808 <usb_d_cb_trans_setup+0x84>)
     7d6:	189b      	adds	r3, r3, r2
     7d8:	2201      	movs	r2, #1
     7da:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     7dc:	695b      	ldr	r3, [r3, #20]
     7de:	0029      	movs	r1, r5
     7e0:	0020      	movs	r0, r4
     7e2:	4798      	blx	r3
     7e4:	2800      	cmp	r0, #0
     7e6:	d1e7      	bne.n	7b8 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     7e8:	0176      	lsls	r6, r6, #5
     7ea:	4b07      	ldr	r3, [pc, #28]	; (808 <usb_d_cb_trans_setup+0x84>)
     7ec:	199e      	adds	r6, r3, r6
     7ee:	2305      	movs	r3, #5
     7f0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     7f2:	2101      	movs	r1, #1
     7f4:	0020      	movs	r0, r4
     7f6:	4c06      	ldr	r4, [pc, #24]	; (810 <usb_d_cb_trans_setup+0x8c>)
     7f8:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     7fa:	2101      	movs	r1, #1
     7fc:	0038      	movs	r0, r7
     7fe:	47a0      	blx	r4
     800:	e7da      	b.n	7b8 <usb_d_cb_trans_setup+0x34>
     802:	46c0      	nop			; (mov r8, r8)
     804:	000005a5 	.word	0x000005a5
     808:	20000084 	.word	0x20000084
     80c:	00001d5d 	.word	0x00001d5d
     810:	00001bf9 	.word	0x00001bf9

00000814 <usb_d_init>:

int32_t usb_d_init(void)
{
     814:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     816:	4b10      	ldr	r3, [pc, #64]	; (858 <usb_d_init+0x44>)
     818:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     81a:	2800      	cmp	r0, #0
     81c:	db1b      	blt.n	856 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     81e:	4c0f      	ldr	r4, [pc, #60]	; (85c <usb_d_init+0x48>)
     820:	2280      	movs	r2, #128	; 0x80
     822:	2100      	movs	r1, #0
     824:	0020      	movs	r0, r4
     826:	4b0e      	ldr	r3, [pc, #56]	; (860 <usb_d_init+0x4c>)
     828:	4798      	blx	r3
     82a:	0023      	movs	r3, r4
     82c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     82e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     830:	4a0c      	ldr	r2, [pc, #48]	; (864 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     832:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     834:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     836:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     838:	61da      	str	r2, [r3, #28]
     83a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     83c:	42a3      	cmp	r3, r4
     83e:	d1f8      	bne.n	832 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     840:	4909      	ldr	r1, [pc, #36]	; (868 <usb_d_init+0x54>)
     842:	2000      	movs	r0, #0
     844:	4c09      	ldr	r4, [pc, #36]	; (86c <usb_d_init+0x58>)
     846:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     848:	4909      	ldr	r1, [pc, #36]	; (870 <usb_d_init+0x5c>)
     84a:	2001      	movs	r0, #1
     84c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     84e:	4909      	ldr	r1, [pc, #36]	; (874 <usb_d_init+0x60>)
     850:	2002      	movs	r0, #2
     852:	47a0      	blx	r4
	return ERR_NONE;
     854:	2000      	movs	r0, #0
}
     856:	bd10      	pop	{r4, pc}
     858:	000015cd 	.word	0x000015cd
     85c:	20000084 	.word	0x20000084
     860:	00002e47 	.word	0x00002e47
     864:	000005e9 	.word	0x000005e9
     868:	00000785 	.word	0x00000785
     86c:	00002001 	.word	0x00002001
     870:	000005ed 	.word	0x000005ed
     874:	00000625 	.word	0x00000625

00000878 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     878:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     87a:	4b01      	ldr	r3, [pc, #4]	; (880 <usb_d_register_callback+0x8>)
     87c:	4798      	blx	r3
}
     87e:	bd10      	pop	{r4, pc}
     880:	00001fdd 	.word	0x00001fdd

00000884 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     884:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     886:	4b01      	ldr	r3, [pc, #4]	; (88c <usb_d_enable+0x8>)
     888:	4798      	blx	r3
}
     88a:	bd10      	pop	{r4, pc}
     88c:	000016ad 	.word	0x000016ad

00000890 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     890:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     892:	4b01      	ldr	r3, [pc, #4]	; (898 <usb_d_attach+0x8>)
     894:	4798      	blx	r3
}
     896:	bd10      	pop	{r4, pc}
     898:	000016fd 	.word	0x000016fd

0000089c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     89c:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     89e:	4b01      	ldr	r3, [pc, #4]	; (8a4 <usb_d_set_address+0x8>)
     8a0:	4798      	blx	r3
}
     8a2:	bd10      	pop	{r4, pc}
     8a4:	0000170d 	.word	0x0000170d

000008a8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8aa:	0005      	movs	r5, r0
     8ac:	000e      	movs	r6, r1
     8ae:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     8b0:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <usb_d_ep_init+0x48>)
     8b2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     8b4:	2800      	cmp	r0, #0
     8b6:	da14      	bge.n	8e2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     8b8:	20ff      	movs	r0, #255	; 0xff
     8ba:	4b0d      	ldr	r3, [pc, #52]	; (8f0 <usb_d_ep_init+0x48>)
     8bc:	4798      	blx	r3
     8be:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     8c0:	db12      	blt.n	8e8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     8c2:	003a      	movs	r2, r7
     8c4:	0031      	movs	r1, r6
     8c6:	0028      	movs	r0, r5
     8c8:	4b0a      	ldr	r3, [pc, #40]	; (8f4 <usb_d_ep_init+0x4c>)
     8ca:	4798      	blx	r3
	if (rc < 0) {
     8cc:	2800      	cmp	r0, #0
     8ce:	db07      	blt.n	8e0 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     8d0:	4a09      	ldr	r2, [pc, #36]	; (8f8 <usb_d_ep_init+0x50>)
     8d2:	0164      	lsls	r4, r4, #5
     8d4:	1913      	adds	r3, r2, r4
     8d6:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     8d8:	2303      	movs	r3, #3
     8da:	401e      	ands	r6, r3
     8dc:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     8de:	2000      	movs	r0, #0
}
     8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     8e2:	2014      	movs	r0, #20
     8e4:	4240      	negs	r0, r0
     8e6:	e7fb      	b.n	8e0 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     8e8:	2015      	movs	r0, #21
     8ea:	4240      	negs	r0, r0
     8ec:	e7f8      	b.n	8e0 <usb_d_ep_init+0x38>
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	000005a5 	.word	0x000005a5
     8f4:	0000171d 	.word	0x0000171d
     8f8:	20000084 	.word	0x20000084

000008fc <usb_d_ep0_init>:
{
     8fc:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     8fe:	b282      	uxth	r2, r0
     900:	2100      	movs	r1, #0
     902:	2000      	movs	r0, #0
     904:	4b01      	ldr	r3, [pc, #4]	; (90c <usb_d_ep0_init+0x10>)
     906:	4798      	blx	r3
}
     908:	bd10      	pop	{r4, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	000008a9 	.word	0x000008a9

00000910 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     910:	b570      	push	{r4, r5, r6, lr}
     912:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     914:	4b06      	ldr	r3, [pc, #24]	; (930 <usb_d_ep_deinit+0x20>)
     916:	4798      	blx	r3
     918:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     91a:	db07      	blt.n	92c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     91c:	0028      	movs	r0, r5
     91e:	4b05      	ldr	r3, [pc, #20]	; (934 <usb_d_ep_deinit+0x24>)
     920:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     922:	0164      	lsls	r4, r4, #5
     924:	4b04      	ldr	r3, [pc, #16]	; (938 <usb_d_ep_deinit+0x28>)
     926:	191c      	adds	r4, r3, r4
     928:	23ff      	movs	r3, #255	; 0xff
     92a:	7063      	strb	r3, [r4, #1]
}
     92c:	bd70      	pop	{r4, r5, r6, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	000005a5 	.word	0x000005a5
     934:	00001849 	.word	0x00001849
     938:	20000084 	.word	0x20000084

0000093c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     93c:	b570      	push	{r4, r5, r6, lr}
     93e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     940:	4b0e      	ldr	r3, [pc, #56]	; (97c <usb_d_ep_enable+0x40>)
     942:	4798      	blx	r3
     944:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     946:	db15      	blt.n	974 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     948:	0143      	lsls	r3, r0, #5
     94a:	4a0d      	ldr	r2, [pc, #52]	; (980 <usb_d_ep_enable+0x44>)
     94c:	5c9b      	ldrb	r3, [r3, r2]
     94e:	425a      	negs	r2, r3
     950:	4153      	adcs	r3, r2
     952:	3301      	adds	r3, #1
     954:	0141      	lsls	r1, r0, #5
     956:	4a0a      	ldr	r2, [pc, #40]	; (980 <usb_d_ep_enable+0x44>)
     958:	1852      	adds	r2, r2, r1
     95a:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     95c:	0020      	movs	r0, r4
     95e:	4b09      	ldr	r3, [pc, #36]	; (984 <usb_d_ep_enable+0x48>)
     960:	4798      	blx	r3
	if (rc < 0) {
     962:	2800      	cmp	r0, #0
     964:	db00      	blt.n	968 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     966:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     968:	016d      	lsls	r5, r5, #5
     96a:	4b05      	ldr	r3, [pc, #20]	; (980 <usb_d_ep_enable+0x44>)
     96c:	195d      	adds	r5, r3, r5
     96e:	2300      	movs	r3, #0
     970:	70ab      	strb	r3, [r5, #2]
     972:	e7f8      	b.n	966 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     974:	2012      	movs	r0, #18
     976:	4240      	negs	r0, r0
     978:	e7f5      	b.n	966 <usb_d_ep_enable+0x2a>
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	000005a5 	.word	0x000005a5
     980:	20000084 	.word	0x20000084
     984:	00001915 	.word	0x00001915

00000988 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	46d6      	mov	lr, sl
     98c:	464f      	mov	r7, r9
     98e:	4646      	mov	r6, r8
     990:	b5c0      	push	{r6, r7, lr}
     992:	b086      	sub	sp, #24
     994:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     996:	7a07      	ldrb	r7, [r0, #8]
     998:	0038      	movs	r0, r7
     99a:	4b40      	ldr	r3, [pc, #256]	; (a9c <usb_d_ep_transfer+0x114>)
     99c:	4798      	blx	r3
     99e:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     9a0:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     9a2:	6863      	ldr	r3, [r4, #4]
     9a4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     9a6:	2800      	cmp	r0, #0
     9a8:	da00      	bge.n	9ac <usb_d_ep_transfer+0x24>
     9aa:	e071      	b.n	a90 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     9ac:	a804      	add	r0, sp, #16
     9ae:	4b3c      	ldr	r3, [pc, #240]	; (aa0 <usb_d_ep_transfer+0x118>)
     9b0:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     9b2:	016a      	lsls	r2, r5, #5
     9b4:	4b3b      	ldr	r3, [pc, #236]	; (aa4 <usb_d_ep_transfer+0x11c>)
     9b6:	189b      	adds	r3, r3, r2
     9b8:	789a      	ldrb	r2, [r3, #2]
     9ba:	2317      	movs	r3, #23
     9bc:	446b      	add	r3, sp
     9be:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	2b01      	cmp	r3, #1
     9c4:	d010      	beq.n	9e8 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     9c6:	a804      	add	r0, sp, #16
     9c8:	4b37      	ldr	r3, [pc, #220]	; (aa8 <usb_d_ep_transfer+0x120>)
     9ca:	4798      	blx	r3
		switch (state) {
     9cc:	2317      	movs	r3, #23
     9ce:	446b      	add	r3, sp
     9d0:	781b      	ldrb	r3, [r3, #0]
     9d2:	b2db      	uxtb	r3, r3
     9d4:	2b05      	cmp	r3, #5
     9d6:	d05e      	beq.n	a96 <usb_d_ep_transfer+0x10e>
     9d8:	2b06      	cmp	r3, #6
     9da:	d023      	beq.n	a24 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     9dc:	2001      	movs	r0, #1
		switch (state) {
     9de:	2b00      	cmp	r3, #0
     9e0:	d13c      	bne.n	a5c <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     9e2:	2013      	movs	r0, #19
     9e4:	4240      	negs	r0, r0
     9e6:	e039      	b.n	a5c <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     9e8:	4b2e      	ldr	r3, [pc, #184]	; (aa4 <usb_d_ep_transfer+0x11c>)
     9ea:	4699      	mov	r9, r3
     9ec:	016b      	lsls	r3, r5, #5
     9ee:	469a      	mov	sl, r3
     9f0:	464b      	mov	r3, r9
     9f2:	4453      	add	r3, sl
     9f4:	2203      	movs	r2, #3
     9f6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     9f8:	a804      	add	r0, sp, #16
     9fa:	4b2b      	ldr	r3, [pc, #172]	; (aa8 <usb_d_ep_transfer+0x120>)
     9fc:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9fe:	464b      	mov	r3, r9
     a00:	4652      	mov	r2, sl
     a02:	5cd3      	ldrb	r3, [r2, r3]
     a04:	2b00      	cmp	r3, #0
     a06:	d010      	beq.n	a2a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a08:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     a0a:	1e72      	subs	r2, r6, #1
     a0c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a0e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     a10:	6822      	ldr	r2, [r4, #0]
     a12:	9201      	str	r2, [sp, #4]
     a14:	4642      	mov	r2, r8
     a16:	9202      	str	r2, [sp, #8]
     a18:	b27f      	sxtb	r7, r7
     a1a:	2f00      	cmp	r7, #0
     a1c:	db17      	blt.n	a4e <usb_d_ep_transfer+0xc6>
     a1e:	220f      	movs	r2, #15
     a20:	4013      	ands	r3, r2
     a22:	e016      	b.n	a52 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     a24:	2010      	movs	r0, #16
     a26:	4240      	negs	r0, r0
     a28:	e018      	b.n	a5c <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     a2a:	016b      	lsls	r3, r5, #5
     a2c:	4a1d      	ldr	r2, [pc, #116]	; (aa4 <usb_d_ep_transfer+0x11c>)
     a2e:	18d2      	adds	r2, r2, r3
     a30:	7cd1      	ldrb	r1, [r2, #19]
     a32:	0209      	lsls	r1, r1, #8
     a34:	7c93      	ldrb	r3, [r2, #18]
     a36:	185b      	adds	r3, r3, r1
     a38:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     a3a:	2b00      	cmp	r3, #0
     a3c:	d114      	bne.n	a68 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a3e:	2304      	movs	r3, #4
     a40:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     a42:	2200      	movs	r2, #0
			zlp                 = true;
     a44:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a46:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     a48:	6821      	ldr	r1, [r4, #0]
     a4a:	9101      	str	r1, [sp, #4]
     a4c:	9202      	str	r2, [sp, #8]
     a4e:	2280      	movs	r2, #128	; 0x80
     a50:	4313      	orrs	r3, r2
     a52:	a801      	add	r0, sp, #4
     a54:	7203      	strb	r3, [r0, #8]
     a56:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     a58:	4b14      	ldr	r3, [pc, #80]	; (aac <usb_d_ep_transfer+0x124>)
     a5a:	4798      	blx	r3
	return rc;
}
     a5c:	b006      	add	sp, #24
     a5e:	bc1c      	pop	{r2, r3, r4}
     a60:	4690      	mov	r8, r2
     a62:	4699      	mov	r9, r3
     a64:	46a2      	mov	sl, r4
     a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a68:	4642      	mov	r2, r8
     a6a:	429a      	cmp	r2, r3
     a6c:	d900      	bls.n	a70 <usb_d_ep_transfer+0xe8>
     a6e:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     a70:	016d      	lsls	r5, r5, #5
     a72:	490c      	ldr	r1, [pc, #48]	; (aa4 <usb_d_ep_transfer+0x11c>)
     a74:	194d      	adds	r5, r1, r5
			if (dir) {
     a76:	7b29      	ldrb	r1, [r5, #12]
     a78:	297f      	cmp	r1, #127	; 0x7f
     a7a:	d805      	bhi.n	a88 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a7c:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     a7e:	6821      	ldr	r1, [r4, #0]
     a80:	9101      	str	r1, [sp, #4]
     a82:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     a84:	2600      	movs	r6, #0
     a86:	e7ca      	b.n	a1e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     a88:	429a      	cmp	r2, r3
     a8a:	41b6      	sbcs	r6, r6
     a8c:	4276      	negs	r6, r6
     a8e:	e7da      	b.n	a46 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     a90:	2012      	movs	r0, #18
     a92:	4240      	negs	r0, r0
     a94:	e7e2      	b.n	a5c <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     a96:	2002      	movs	r0, #2
     a98:	e7e0      	b.n	a5c <usb_d_ep_transfer+0xd4>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	000005a5 	.word	0x000005a5
     aa0:	00000475 	.word	0x00000475
     aa4:	20000084 	.word	0x20000084
     aa8:	00000483 	.word	0x00000483
     aac:	00001dcd 	.word	0x00001dcd

00000ab0 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     ab4:	2900      	cmp	r1, #0
     ab6:	d005      	beq.n	ac4 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     ab8:	2901      	cmp	r1, #1
     aba:	d021      	beq.n	b00 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     abc:	2102      	movs	r1, #2
     abe:	4b13      	ldr	r3, [pc, #76]	; (b0c <usb_d_ep_halt+0x5c>)
     ac0:	4798      	blx	r3
	}
}
     ac2:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     ac4:	4b12      	ldr	r3, [pc, #72]	; (b10 <usb_d_ep_halt+0x60>)
     ac6:	4798      	blx	r3
     ac8:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     aca:	db1c      	blt.n	b06 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     acc:	2102      	movs	r1, #2
     ace:	0020      	movs	r0, r4
     ad0:	4b0e      	ldr	r3, [pc, #56]	; (b0c <usb_d_ep_halt+0x5c>)
     ad2:	4798      	blx	r3
     ad4:	2800      	cmp	r0, #0
     ad6:	d0f4      	beq.n	ac2 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ad8:	2100      	movs	r1, #0
     ada:	0020      	movs	r0, r4
     adc:	4b0b      	ldr	r3, [pc, #44]	; (b0c <usb_d_ep_halt+0x5c>)
     ade:	4798      	blx	r3
		if (rc < 0) {
     ae0:	2800      	cmp	r0, #0
     ae2:	dbee      	blt.n	ac2 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     ae4:	016d      	lsls	r5, r5, #5
     ae6:	4b0b      	ldr	r3, [pc, #44]	; (b14 <usb_d_ep_halt+0x64>)
     ae8:	195d      	adds	r5, r3, r5
     aea:	2301      	movs	r3, #1
     aec:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     aee:	3302      	adds	r3, #2
     af0:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     af2:	69eb      	ldr	r3, [r5, #28]
     af4:	2200      	movs	r2, #0
     af6:	2103      	movs	r1, #3
     af8:	0020      	movs	r0, r4
     afa:	4798      	blx	r3
	return ERR_NONE;
     afc:	2000      	movs	r0, #0
     afe:	e7e0      	b.n	ac2 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b00:	4b02      	ldr	r3, [pc, #8]	; (b0c <usb_d_ep_halt+0x5c>)
     b02:	4798      	blx	r3
     b04:	e7dd      	b.n	ac2 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     b06:	2012      	movs	r0, #18
     b08:	4240      	negs	r0, r0
     b0a:	e7da      	b.n	ac2 <usb_d_ep_halt+0x12>
     b0c:	00001bf9 	.word	0x00001bf9
     b10:	000005a5 	.word	0x000005a5
     b14:	20000084 	.word	0x20000084

00000b18 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	000d      	movs	r5, r1
     b1c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     b1e:	4b0f      	ldr	r3, [pc, #60]	; (b5c <usb_d_ep_register_callback+0x44>)
     b20:	4798      	blx	r3
     b22:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     b24:	1e22      	subs	r2, r4, #0
     b26:	d008      	beq.n	b3a <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     b28:	2b00      	cmp	r3, #0
     b2a:	db05      	blt.n	b38 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     b2c:	2d01      	cmp	r5, #1
     b2e:	d00b      	beq.n	b48 <usb_d_ep_register_callback+0x30>
     b30:	2d00      	cmp	r5, #0
     b32:	d004      	beq.n	b3e <usb_d_ep_register_callback+0x26>
     b34:	2d02      	cmp	r5, #2
     b36:	d00c      	beq.n	b52 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     b38:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     b3a:	4a09      	ldr	r2, [pc, #36]	; (b60 <usb_d_ep_register_callback+0x48>)
     b3c:	e7f4      	b.n	b28 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     b3e:	0140      	lsls	r0, r0, #5
     b40:	4b08      	ldr	r3, [pc, #32]	; (b64 <usb_d_ep_register_callback+0x4c>)
     b42:	1818      	adds	r0, r3, r0
     b44:	6142      	str	r2, [r0, #20]
		break;
     b46:	e7f7      	b.n	b38 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     b48:	0140      	lsls	r0, r0, #5
     b4a:	4b06      	ldr	r3, [pc, #24]	; (b64 <usb_d_ep_register_callback+0x4c>)
     b4c:	1818      	adds	r0, r3, r0
     b4e:	6182      	str	r2, [r0, #24]
		break;
     b50:	e7f2      	b.n	b38 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     b52:	0140      	lsls	r0, r0, #5
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <usb_d_ep_register_callback+0x4c>)
     b56:	1818      	adds	r0, r3, r0
     b58:	61c2      	str	r2, [r0, #28]
		break;
     b5a:	e7ed      	b.n	b38 <usb_d_ep_register_callback+0x20>
     b5c:	000005a5 	.word	0x000005a5
     b60:	000005e9 	.word	0x000005e9
     b64:	20000084 	.word	0x20000084

00000b68 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     b68:	2800      	cmp	r0, #0
     b6a:	d100      	bne.n	b6e <assert+0x6>
		__asm("BKPT #0");
     b6c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     b6e:	4770      	bx	lr

00000b70 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     b70:	6803      	ldr	r3, [r0, #0]
     b72:	2b00      	cmp	r3, #0
     b74:	d00a      	beq.n	b8c <is_list_element+0x1c>
		if (it == element) {
     b76:	428b      	cmp	r3, r1
     b78:	d00a      	beq.n	b90 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d003      	beq.n	b88 <is_list_element+0x18>
		if (it == element) {
     b80:	4299      	cmp	r1, r3
     b82:	d1fa      	bne.n	b7a <is_list_element+0xa>
			return true;
     b84:	2001      	movs	r0, #1
     b86:	e000      	b.n	b8a <is_list_element+0x1a>
		}
	}

	return false;
     b88:	2000      	movs	r0, #0
}
     b8a:	4770      	bx	lr
	return false;
     b8c:	2000      	movs	r0, #0
     b8e:	e7fc      	b.n	b8a <is_list_element+0x1a>
			return true;
     b90:	2001      	movs	r0, #1
     b92:	e7fa      	b.n	b8a <is_list_element+0x1a>

00000b94 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     b94:	b570      	push	{r4, r5, r6, lr}
     b96:	0005      	movs	r5, r0
     b98:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     b9a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <list_insert_at_end+0x34>)
     b9e:	4798      	blx	r3
     ba0:	2301      	movs	r3, #1
     ba2:	4058      	eors	r0, r3
     ba4:	b2c0      	uxtb	r0, r0
     ba6:	224f      	movs	r2, #79	; 0x4f
     ba8:	4908      	ldr	r1, [pc, #32]	; (bcc <list_insert_at_end+0x38>)
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <list_insert_at_end+0x3c>)
     bac:	4798      	blx	r3

	if (!list->head) {
     bae:	682b      	ldr	r3, [r5, #0]
     bb0:	2b00      	cmp	r3, #0
     bb2:	d103      	bne.n	bbc <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     bb4:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     bb6:	6033      	str	r3, [r6, #0]
		return;
     bb8:	e005      	b.n	bc6 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     bba:	001c      	movs	r4, r3
	while (it->next) {
     bbc:	6823      	ldr	r3, [r4, #0]
     bbe:	2b00      	cmp	r3, #0
     bc0:	d1fb      	bne.n	bba <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     bc2:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     bc4:	6033      	str	r3, [r6, #0]
}
     bc6:	bd70      	pop	{r4, r5, r6, pc}
     bc8:	00000b71 	.word	0x00000b71
     bcc:	00002e74 	.word	0x00002e74
     bd0:	00000b69 	.word	0x00000b69

00000bd4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bd4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     bd6:	4b06      	ldr	r3, [pc, #24]	; (bf0 <_init_chip+0x1c>)
     bd8:	685a      	ldr	r2, [r3, #4]
     bda:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     bdc:	4b05      	ldr	r3, [pc, #20]	; (bf4 <_init_chip+0x20>)
     bde:	4798      	blx	r3
	_sysctrl_init_sources();
     be0:	4b05      	ldr	r3, [pc, #20]	; (bf8 <_init_chip+0x24>)
     be2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     be4:	4b05      	ldr	r3, [pc, #20]	; (bfc <_init_chip+0x28>)
     be6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     be8:	20ff      	movs	r0, #255	; 0xff
     bea:	4b05      	ldr	r3, [pc, #20]	; (c00 <_init_chip+0x2c>)
     bec:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     bee:	bd10      	pop	{r4, pc}
     bf0:	41004000 	.word	0x41004000
     bf4:	00000c5d 	.word	0x00000c5d
     bf8:	00000e85 	.word	0x00000e85
     bfc:	00000ed9 	.word	0x00000ed9
     c00:	00000c05 	.word	0x00000c05

00000c04 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     c04:	07c3      	lsls	r3, r0, #31
     c06:	d50a      	bpl.n	c1e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     c08:	4b11      	ldr	r3, [pc, #68]	; (c50 <_gclk_init_generators_by_fref+0x4c>)
     c0a:	2280      	movs	r2, #128	; 0x80
     c0c:	0052      	lsls	r2, r2, #1
     c0e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c10:	2283      	movs	r2, #131	; 0x83
     c12:	0252      	lsls	r2, r2, #9
     c14:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c16:	001a      	movs	r2, r3
     c18:	7853      	ldrb	r3, [r2, #1]
     c1a:	09db      	lsrs	r3, r3, #7
     c1c:	d1fc      	bne.n	c18 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     c1e:	0783      	lsls	r3, r0, #30
     c20:	d509      	bpl.n	c36 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <_gclk_init_generators_by_fref+0x4c>)
     c24:	2202      	movs	r2, #2
     c26:	32ff      	adds	r2, #255	; 0xff
     c28:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c2a:	4a0a      	ldr	r2, [pc, #40]	; (c54 <_gclk_init_generators_by_fref+0x50>)
     c2c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c2e:	001a      	movs	r2, r3
     c30:	7853      	ldrb	r3, [r2, #1]
     c32:	09db      	lsrs	r3, r3, #7
     c34:	d1fc      	bne.n	c30 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
     c36:	0603      	lsls	r3, r0, #24
     c38:	d509      	bpl.n	c4e <_gclk_init_generators_by_fref+0x4a>
	((Gclk *)hw)->GENDIV.reg = data;
     c3a:	4b05      	ldr	r3, [pc, #20]	; (c50 <_gclk_init_generators_by_fref+0x4c>)
     c3c:	2208      	movs	r2, #8
     c3e:	32ff      	adds	r2, #255	; 0xff
     c40:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c42:	4a05      	ldr	r2, [pc, #20]	; (c58 <_gclk_init_generators_by_fref+0x54>)
     c44:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c46:	001a      	movs	r2, r3
     c48:	7853      	ldrb	r3, [r2, #1]
     c4a:	09db      	lsrs	r3, r3, #7
     c4c:	d1fc      	bne.n	c48 <_gclk_init_generators_by_fref+0x44>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     c4e:	4770      	bx	lr
     c50:	40000c00 	.word	0x40000c00
     c54:	00090701 	.word	0x00090701
     c58:	00010407 	.word	0x00010407

00000c5c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     c5c:	4b06      	ldr	r3, [pc, #24]	; (c78 <_pm_init+0x1c>)
     c5e:	7a1a      	ldrb	r2, [r3, #8]
     c60:	b2d2      	uxtb	r2, r2
     c62:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     c64:	7a5a      	ldrb	r2, [r3, #9]
     c66:	b2d2      	uxtb	r2, r2
     c68:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     c6a:	7a9a      	ldrb	r2, [r3, #10]
     c6c:	b2d2      	uxtb	r2, r2
     c6e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     c70:	7ada      	ldrb	r2, [r3, #11]
     c72:	b2d2      	uxtb	r2, r2
     c74:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     c76:	4770      	bx	lr
     c78:	40000400 	.word	0x40000400

00000c7c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     c7c:	b570      	push	{r4, r5, r6, lr}
     c7e:	0005      	movs	r5, r0
     c80:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     c82:	4b35      	ldr	r3, [pc, #212]	; (d58 <_spi_m_sync_init+0xdc>)
     c84:	18cb      	adds	r3, r1, r3
     c86:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     c88:	b2db      	uxtb	r3, r3
     c8a:	2b00      	cmp	r3, #0
     c8c:	d00b      	beq.n	ca6 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     c8e:	2800      	cmp	r0, #0
     c90:	d051      	beq.n	d36 <_spi_m_sync_init+0xba>
     c92:	1e60      	subs	r0, r4, #1
     c94:	4184      	sbcs	r4, r0
     c96:	b2e0      	uxtb	r0, r4
     c98:	4a30      	ldr	r2, [pc, #192]	; (d5c <_spi_m_sync_init+0xe0>)
     c9a:	4931      	ldr	r1, [pc, #196]	; (d60 <_spi_m_sync_init+0xe4>)
     c9c:	4b31      	ldr	r3, [pc, #196]	; (d64 <_spi_m_sync_init+0xe8>)
     c9e:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
     ca0:	200d      	movs	r0, #13
     ca2:	4240      	negs	r0, r0
     ca4:	e046      	b.n	d34 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
     ca6:	2800      	cmp	r0, #0
     ca8:	d14d      	bne.n	d46 <_spi_m_sync_init+0xca>
     caa:	4a2c      	ldr	r2, [pc, #176]	; (d5c <_spi_m_sync_init+0xe0>)
     cac:	492c      	ldr	r1, [pc, #176]	; (d60 <_spi_m_sync_init+0xe4>)
     cae:	2000      	movs	r0, #0
     cb0:	4b2c      	ldr	r3, [pc, #176]	; (d64 <_spi_m_sync_init+0xe8>)
     cb2:	4798      	blx	r3
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     cb4:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     cb6:	07db      	lsls	r3, r3, #31
     cb8:	d418      	bmi.n	cec <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     cba:	2203      	movs	r2, #3
     cbc:	69e3      	ldr	r3, [r4, #28]
     cbe:	421a      	tst	r2, r3
     cc0:	d1fc      	bne.n	cbc <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     cc2:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
     cc4:	079b      	lsls	r3, r3, #30
     cc6:	d50b      	bpl.n	ce0 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     cc8:	6823      	ldr	r3, [r4, #0]
     cca:	2202      	movs	r2, #2
     ccc:	4393      	bics	r3, r2
     cce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     cd0:	3201      	adds	r2, #1
     cd2:	69e3      	ldr	r3, [r4, #28]
     cd4:	421a      	tst	r2, r3
     cd6:	d1fc      	bne.n	cd2 <_spi_m_sync_init+0x56>
     cd8:	2202      	movs	r2, #2
     cda:	69e3      	ldr	r3, [r4, #28]
     cdc:	421a      	tst	r2, r3
     cde:	d1fc      	bne.n	cda <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     ce0:	230d      	movs	r3, #13
     ce2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ce4:	2203      	movs	r2, #3
     ce6:	69e3      	ldr	r3, [r4, #28]
     ce8:	421a      	tst	r2, r3
     cea:	d1fc      	bne.n	ce6 <_spi_m_sync_init+0x6a>
     cec:	2201      	movs	r2, #1
     cee:	69e3      	ldr	r3, [r4, #28]
     cf0:	421a      	tst	r2, r3
     cf2:	d1fc      	bne.n	cee <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
     cf4:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
     cf6:	0020      	movs	r0, r4
     cf8:	1e43      	subs	r3, r0, #1
     cfa:	4198      	sbcs	r0, r3
     cfc:	b2c0      	uxtb	r0, r0
     cfe:	4a1a      	ldr	r2, [pc, #104]	; (d68 <_spi_m_sync_init+0xec>)
     d00:	4917      	ldr	r1, [pc, #92]	; (d60 <_spi_m_sync_init+0xe4>)
     d02:	4b18      	ldr	r3, [pc, #96]	; (d64 <_spi_m_sync_init+0xe8>)
     d04:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     d06:	4b19      	ldr	r3, [pc, #100]	; (d6c <_spi_m_sync_init+0xf0>)
     d08:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     d0a:	2203      	movs	r2, #3
     d0c:	69e3      	ldr	r3, [r4, #28]
     d0e:	421a      	tst	r2, r3
     d10:	d1fc      	bne.n	d0c <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     d12:	2380      	movs	r3, #128	; 0x80
     d14:	029b      	lsls	r3, r3, #10
     d16:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     d18:	2207      	movs	r2, #7
     d1a:	69e3      	ldr	r3, [r4, #28]
     d1c:	421a      	tst	r2, r3
     d1e:	d1fc      	bne.n	d1a <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
     d20:	234f      	movs	r3, #79	; 0x4f
     d22:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     d24:	2200      	movs	r2, #0
     d26:	3b1f      	subs	r3, #31
     d28:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     d2a:	3b2f      	subs	r3, #47	; 0x2f
     d2c:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
     d2e:	4b10      	ldr	r3, [pc, #64]	; (d70 <_spi_m_sync_init+0xf4>)
     d30:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
     d32:	2000      	movs	r0, #0
}
     d34:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
     d36:	4a09      	ldr	r2, [pc, #36]	; (d5c <_spi_m_sync_init+0xe0>)
     d38:	4909      	ldr	r1, [pc, #36]	; (d60 <_spi_m_sync_init+0xe4>)
     d3a:	2000      	movs	r0, #0
     d3c:	4b09      	ldr	r3, [pc, #36]	; (d64 <_spi_m_sync_init+0xe8>)
     d3e:	4798      	blx	r3
		return ERR_INVALID_ARG;
     d40:	200d      	movs	r0, #13
     d42:	4240      	negs	r0, r0
     d44:	e7f6      	b.n	d34 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
     d46:	0008      	movs	r0, r1
     d48:	1e43      	subs	r3, r0, #1
     d4a:	4198      	sbcs	r0, r3
     d4c:	b2c0      	uxtb	r0, r0
     d4e:	4a03      	ldr	r2, [pc, #12]	; (d5c <_spi_m_sync_init+0xe0>)
     d50:	4903      	ldr	r1, [pc, #12]	; (d60 <_spi_m_sync_init+0xe4>)
     d52:	4b04      	ldr	r3, [pc, #16]	; (d64 <_spi_m_sync_init+0xe8>)
     d54:	4798      	blx	r3
     d56:	e7ad      	b.n	cb4 <_spi_m_sync_init+0x38>
     d58:	bdfff800 	.word	0xbdfff800
     d5c:	00000925 	.word	0x00000925
     d60:	00002e94 	.word	0x00002e94
     d64:	00000b69 	.word	0x00000b69
     d68:	000008ef 	.word	0x000008ef
     d6c:	0011000c 	.word	0x0011000c
     d70:	000001ff 	.word	0x000001ff

00000d74 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     d74:	b5f0      	push	{r4, r5, r6, r7, lr}
     d76:	46de      	mov	lr, fp
     d78:	4657      	mov	r7, sl
     d7a:	464e      	mov	r6, r9
     d7c:	4645      	mov	r5, r8
     d7e:	b5e0      	push	{r5, r6, r7, lr}
     d80:	b083      	sub	sp, #12
     d82:	4681      	mov	r9, r0
     d84:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
     d86:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     d88:	680b      	ldr	r3, [r1, #0]
     d8a:	4698      	mov	r8, r3
     d8c:	684d      	ldr	r5, [r1, #4]
     d8e:	7903      	ldrb	r3, [r0, #4]
     d90:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
     d92:	2800      	cmp	r0, #0
     d94:	d015      	beq.n	dc2 <_spi_m_sync_trans+0x4e>
     d96:	0020      	movs	r0, r4
     d98:	1e43      	subs	r3, r0, #1
     d9a:	4198      	sbcs	r0, r3
     d9c:	b2c0      	uxtb	r0, r0
     d9e:	4a36      	ldr	r2, [pc, #216]	; (e78 <_spi_m_sync_trans+0x104>)
     da0:	4936      	ldr	r1, [pc, #216]	; (e7c <_spi_m_sync_trans+0x108>)
     da2:	4b37      	ldr	r3, [pc, #220]	; (e80 <_spi_m_sync_trans+0x10c>)
     da4:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     da6:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     da8:	075b      	lsls	r3, r3, #29
     daa:	d13f      	bne.n	e2c <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     dac:	2303      	movs	r3, #3
     dae:	69e0      	ldr	r0, [r4, #28]
     db0:	4018      	ands	r0, r3
     db2:	d1fc      	bne.n	dae <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     db4:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     db6:	079b      	lsls	r3, r3, #30
     db8:	d53b      	bpl.n	e32 <_spi_m_sync_trans+0xbe>
     dba:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     dbc:	2301      	movs	r3, #1
     dbe:	469c      	mov	ip, r3
     dc0:	e009      	b.n	dd6 <_spi_m_sync_trans+0x62>
     dc2:	2000      	movs	r0, #0
     dc4:	e7eb      	b.n	d9e <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
     dc6:	3501      	adds	r5, #1
	ctrl->rxcnt++;
     dc8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     dca:	b25b      	sxtb	r3, r3
     dcc:	2b00      	cmp	r3, #0
     dce:	db16      	blt.n	dfe <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     dd0:	68b3      	ldr	r3, [r6, #8]
     dd2:	4283      	cmp	r3, r0
     dd4:	d927      	bls.n	e26 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     dd6:	7e23      	ldrb	r3, [r4, #24]
     dd8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     dda:	2104      	movs	r1, #4
     ddc:	4219      	tst	r1, r3
     dde:	d02b      	beq.n	e38 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
     de0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     de2:	2d00      	cmp	r5, #0
     de4:	d0f0      	beq.n	dc8 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
     de6:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
     de8:	9901      	ldr	r1, [sp, #4]
     dea:	2901      	cmp	r1, #1
     dec:	d9eb      	bls.n	dc6 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     dee:	0a3f      	lsrs	r7, r7, #8
     df0:	706f      	strb	r7, [r5, #1]
     df2:	3502      	adds	r5, #2
     df4:	e7e8      	b.n	dc8 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
     df6:	2101      	movs	r1, #1
     df8:	468b      	mov	fp, r1
     dfa:	44d8      	add	r8, fp
     dfc:	e037      	b.n	e6e <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     dfe:	2301      	movs	r3, #1
     e00:	425b      	negs	r3, r3
     e02:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     e04:	3381      	adds	r3, #129	; 0x81
     e06:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
     e08:	2013      	movs	r0, #19
     e0a:	4240      	negs	r0, r0
	tmp &= mask;
     e0c:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     e0e:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     e10:	4213      	tst	r3, r2
     e12:	d0fc      	beq.n	e0e <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     e14:	2303      	movs	r3, #3
     e16:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     e18:	b003      	add	sp, #12
     e1a:	bc3c      	pop	{r2, r3, r4, r5}
     e1c:	4690      	mov	r8, r2
     e1e:	4699      	mov	r9, r3
     e20:	46a2      	mov	sl, r4
     e22:	46ab      	mov	fp, r5
     e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     e26:	4293      	cmp	r3, r2
     e28:	d8d5      	bhi.n	dd6 <_spi_m_sync_trans+0x62>
     e2a:	e7ef      	b.n	e0c <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
     e2c:	2004      	movs	r0, #4
     e2e:	4240      	negs	r0, r0
     e30:	e7f2      	b.n	e18 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
     e32:	2014      	movs	r0, #20
     e34:	4240      	negs	r0, r0
     e36:	e7ef      	b.n	e18 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     e38:	4290      	cmp	r0, r2
     e3a:	d8c6      	bhi.n	dca <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     e3c:	4667      	mov	r7, ip
     e3e:	421f      	tst	r7, r3
     e40:	d0c3      	beq.n	dca <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     e42:	464f      	mov	r7, r9
     e44:	88ff      	ldrh	r7, [r7, #6]
     e46:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
     e48:	4647      	mov	r7, r8
     e4a:	2f00      	cmp	r7, #0
     e4c:	d00f      	beq.n	e6e <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
     e4e:	783f      	ldrb	r7, [r7, #0]
     e50:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
     e52:	9901      	ldr	r1, [sp, #4]
     e54:	2901      	cmp	r1, #1
     e56:	d9ce      	bls.n	df6 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
     e58:	4647      	mov	r7, r8
     e5a:	787f      	ldrb	r7, [r7, #1]
     e5c:	023f      	lsls	r7, r7, #8
     e5e:	46bb      	mov	fp, r7
     e60:	4657      	mov	r7, sl
     e62:	4659      	mov	r1, fp
     e64:	430f      	orrs	r7, r1
     e66:	46ba      	mov	sl, r7
			ctrl->txbuf++;
     e68:	2102      	movs	r1, #2
     e6a:	468b      	mov	fp, r1
     e6c:	44d8      	add	r8, fp
	ctrl->txcnt++;
     e6e:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     e70:	4657      	mov	r7, sl
     e72:	62a7      	str	r7, [r4, #40]	; 0x28
     e74:	e7a9      	b.n	dca <_spi_m_sync_trans+0x56>
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	00000a85 	.word	0x00000a85
     e7c:	00002e94 	.word	0x00002e94
     e80:	00000b69 	.word	0x00000b69

00000e84 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     e84:	4b12      	ldr	r3, [pc, #72]	; (ed0 <_sysctrl_init_sources+0x4c>)
     e86:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     e88:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     e8a:	4812      	ldr	r0, [pc, #72]	; (ed4 <_sysctrl_init_sources+0x50>)
     e8c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     e8e:	0f92      	lsrs	r2, r2, #30
     e90:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     e92:	2002      	movs	r0, #2
     e94:	4302      	orrs	r2, r0
     e96:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     e98:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     e9a:	699a      	ldr	r2, [r3, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     e9c:	21fe      	movs	r1, #254	; 0xfe
     e9e:	03c9      	lsls	r1, r1, #15
     ea0:	400a      	ands	r2, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     ea2:	2146      	movs	r1, #70	; 0x46
     ea4:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
     ea6:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     ea8:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     eaa:	3927      	subs	r1, #39	; 0x27
     eac:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     eae:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     eb0:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     eb2:	2204      	movs	r2, #4
     eb4:	68cb      	ldr	r3, [r1, #12]
     eb6:	421a      	tst	r2, r3
     eb8:	d0fc      	beq.n	eb4 <_sysctrl_init_sources+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     eba:	4905      	ldr	r1, [pc, #20]	; (ed0 <_sysctrl_init_sources+0x4c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     ebc:	2208      	movs	r2, #8
     ebe:	68cb      	ldr	r3, [r1, #12]
     ec0:	421a      	tst	r2, r3
     ec2:	d0fc      	beq.n	ebe <_sysctrl_init_sources+0x3a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     ec4:	4a02      	ldr	r2, [pc, #8]	; (ed0 <_sysctrl_init_sources+0x4c>)
     ec6:	6a13      	ldr	r3, [r2, #32]
     ec8:	2180      	movs	r1, #128	; 0x80
     eca:	430b      	orrs	r3, r1
     ecc:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     ece:	4770      	bx	lr
     ed0:	40000800 	.word	0x40000800
     ed4:	0fff0000 	.word	0x0fff0000

00000ed8 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     ed8:	2202      	movs	r2, #2
     eda:	4b17      	ldr	r3, [pc, #92]	; (f38 <_sysctrl_init_referenced_generators+0x60>)
     edc:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     ede:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     ee0:	320e      	adds	r2, #14
     ee2:	68cb      	ldr	r3, [r1, #12]
     ee4:	421a      	tst	r2, r3
     ee6:	d0fc      	beq.n	ee2 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     ee8:	4a14      	ldr	r2, [pc, #80]	; (f3c <_sysctrl_init_referenced_generators+0x64>)
     eea:	4b13      	ldr	r3, [pc, #76]	; (f38 <_sysctrl_init_referenced_generators+0x60>)
     eec:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     eee:	4b14      	ldr	r3, [pc, #80]	; (f40 <_sysctrl_init_referenced_generators+0x68>)
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	0e9b      	lsrs	r3, r3, #26
     ef4:	2b3f      	cmp	r3, #63	; 0x3f
     ef6:	d015      	beq.n	f24 <_sysctrl_init_referenced_generators+0x4c>
     ef8:	029b      	lsls	r3, r3, #10
     efa:	2280      	movs	r2, #128	; 0x80
     efc:	0092      	lsls	r2, r2, #2
     efe:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     f00:	4a0d      	ldr	r2, [pc, #52]	; (f38 <_sysctrl_init_referenced_generators+0x60>)
     f02:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     f04:	2393      	movs	r3, #147	; 0x93
     f06:	005b      	lsls	r3, r3, #1
     f08:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     f0a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     f0c:	075b      	lsls	r3, r3, #29
     f0e:	d50c      	bpl.n	f2a <_sysctrl_init_referenced_generators+0x52>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     f10:	0011      	movs	r1, r2
	tmp &= mask;
     f12:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     f14:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     f16:	421a      	tst	r2, r3
     f18:	d0fc      	beq.n	f14 <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     f1a:	4a0a      	ldr	r2, [pc, #40]	; (f44 <_sysctrl_init_referenced_generators+0x6c>)
     f1c:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     f1e:	09db      	lsrs	r3, r3, #7
     f20:	d1fc      	bne.n	f1c <_sysctrl_init_referenced_generators+0x44>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     f22:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     f24:	23fc      	movs	r3, #252	; 0xfc
     f26:	01db      	lsls	r3, r3, #7
     f28:	e7ea      	b.n	f00 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     f2a:	4903      	ldr	r1, [pc, #12]	; (f38 <_sysctrl_init_referenced_generators+0x60>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     f2c:	2210      	movs	r2, #16
     f2e:	68cb      	ldr	r3, [r1, #12]
     f30:	421a      	tst	r2, r3
     f32:	d0fc      	beq.n	f2e <_sysctrl_init_referenced_generators+0x56>
     f34:	e7f1      	b.n	f1a <_sysctrl_init_referenced_generators+0x42>
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	40000800 	.word	0x40000800
     f3c:	0401bb80 	.word	0x0401bb80
     f40:	00806024 	.word	0x00806024
     f44:	40000c00 	.word	0x40000c00

00000f48 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     f48:	2000      	movs	r0, #0
     f4a:	4770      	bx	lr

00000f4c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     f4c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     f4e:	7c83      	ldrb	r3, [r0, #18]
     f50:	220f      	movs	r2, #15
     f52:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f54:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     f56:	3a08      	subs	r2, #8
     f58:	400a      	ands	r2, r1
     f5a:	2a01      	cmp	r2, #1
     f5c:	d00b      	beq.n	f76 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f5e:	015a      	lsls	r2, r3, #5
     f60:	491a      	ldr	r1, [pc, #104]	; (fcc <_usb_d_dev_handle_setup+0x80>)
     f62:	468c      	mov	ip, r1
     f64:	4462      	add	r2, ip
     f66:	2110      	movs	r1, #16
     f68:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     f6a:	015b      	lsls	r3, r3, #5
     f6c:	4a18      	ldr	r2, [pc, #96]	; (fd0 <_usb_d_dev_handle_setup+0x84>)
     f6e:	4694      	mov	ip, r2
     f70:	4463      	add	r3, ip
     f72:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     f74:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     f76:	064a      	lsls	r2, r1, #25
     f78:	d50e      	bpl.n	f98 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     f7a:	7cc2      	ldrb	r2, [r0, #19]
     f7c:	2140      	movs	r1, #64	; 0x40
     f7e:	438a      	bics	r2, r1
     f80:	74c2      	strb	r2, [r0, #19]
     f82:	015a      	lsls	r2, r3, #5
     f84:	4c13      	ldr	r4, [pc, #76]	; (fd4 <_usb_d_dev_handle_setup+0x88>)
     f86:	46a4      	mov	ip, r4
     f88:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     f8a:	2580      	movs	r5, #128	; 0x80
     f8c:	2482      	movs	r4, #130	; 0x82
     f8e:	0064      	lsls	r4, r4, #1
     f90:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     f92:	2406      	movs	r4, #6
     f94:	34ff      	adds	r4, #255	; 0xff
     f96:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     f98:	7cc2      	ldrb	r2, [r0, #19]
     f9a:	2108      	movs	r1, #8
     f9c:	438a      	bics	r2, r1
     f9e:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     fa0:	015a      	lsls	r2, r3, #5
     fa2:	490d      	ldr	r1, [pc, #52]	; (fd8 <_usb_d_dev_handle_setup+0x8c>)
     fa4:	1889      	adds	r1, r1, r2
     fa6:	2400      	movs	r4, #0
     fa8:	728c      	strb	r4, [r1, #10]
     faa:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     fac:	0013      	movs	r3, r2
     fae:	4907      	ldr	r1, [pc, #28]	; (fcc <_usb_d_dev_handle_setup+0x80>)
     fb0:	468c      	mov	ip, r1
     fb2:	4463      	add	r3, ip
     fb4:	216f      	movs	r1, #111	; 0x6f
     fb6:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fb8:	4b05      	ldr	r3, [pc, #20]	; (fd0 <_usb_d_dev_handle_setup+0x84>)
     fba:	469c      	mov	ip, r3
     fbc:	4462      	add	r2, ip
     fbe:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     fc0:	7c80      	ldrb	r0, [r0, #18]
     fc2:	4b06      	ldr	r3, [pc, #24]	; (fdc <_usb_d_dev_handle_setup+0x90>)
     fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fc6:	4798      	blx	r3
     fc8:	e7d4      	b.n	f74 <_usb_d_dev_handle_setup+0x28>
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	41005100 	.word	0x41005100
     fd0:	41005108 	.word	0x41005108
     fd4:	41005000 	.word	0x41005000
     fd8:	20000104 	.word	0x20000104
     fdc:	20000184 	.word	0x20000184

00000fe0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     fe0:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     fe2:	2220      	movs	r2, #32
     fe4:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     fe6:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     fe8:	7c81      	ldrb	r1, [r0, #18]
     fea:	230f      	movs	r3, #15
     fec:	400b      	ands	r3, r1
     fee:	015b      	lsls	r3, r3, #5
     ff0:	4905      	ldr	r1, [pc, #20]	; (1008 <_usb_d_dev_handle_stall+0x28>)
     ff2:	468c      	mov	ip, r1
     ff4:	4463      	add	r3, ip
     ff6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     ff8:	6882      	ldr	r2, [r0, #8]
     ffa:	7c80      	ldrb	r0, [r0, #18]
     ffc:	4b03      	ldr	r3, [pc, #12]	; (100c <_usb_d_dev_handle_stall+0x2c>)
     ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1000:	2101      	movs	r1, #1
    1002:	4798      	blx	r3
}
    1004:	bd10      	pop	{r4, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	41005108 	.word	0x41005108
    100c:	20000184 	.word	0x20000184

00001010 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1010:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1012:	7c83      	ldrb	r3, [r0, #18]
    1014:	2bff      	cmp	r3, #255	; 0xff
    1016:	d002      	beq.n	101e <_usb_d_dev_trans_done+0xe>
    1018:	7cc2      	ldrb	r2, [r0, #19]
    101a:	0652      	lsls	r2, r2, #25
    101c:	d400      	bmi.n	1020 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    101e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1020:	7cc2      	ldrb	r2, [r0, #19]
    1022:	2440      	movs	r4, #64	; 0x40
    1024:	43a2      	bics	r2, r4
    1026:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1028:	6882      	ldr	r2, [r0, #8]
    102a:	4802      	ldr	r0, [pc, #8]	; (1034 <_usb_d_dev_trans_done+0x24>)
    102c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    102e:	0018      	movs	r0, r3
    1030:	47a0      	blx	r4
    1032:	e7f4      	b.n	101e <_usb_d_dev_trans_done+0xe>
    1034:	20000184 	.word	0x20000184

00001038 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1038:	b530      	push	{r4, r5, lr}
    103a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    103c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    103e:	ac01      	add	r4, sp, #4
    1040:	2525      	movs	r5, #37	; 0x25
    1042:	7025      	strb	r5, [r4, #0]
    1044:	3525      	adds	r5, #37	; 0x25
    1046:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1048:	2bff      	cmp	r3, #255	; 0xff
    104a:	d01b      	beq.n	1084 <_usb_d_dev_trans_stop+0x4c>
    104c:	7cc4      	ldrb	r4, [r0, #19]
    104e:	0664      	lsls	r4, r4, #25
    1050:	d518      	bpl.n	1084 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1052:	240f      	movs	r4, #15
    1054:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1056:	2900      	cmp	r1, #0
    1058:	d016      	beq.n	1088 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    105a:	015c      	lsls	r4, r3, #5
    105c:	4d0e      	ldr	r5, [pc, #56]	; (1098 <_usb_d_dev_trans_stop+0x60>)
    105e:	46ac      	mov	ip, r5
    1060:	4464      	add	r4, ip
    1062:	2580      	movs	r5, #128	; 0x80
    1064:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1066:	ac01      	add	r4, sp, #4
    1068:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    106a:	0159      	lsls	r1, r3, #5
    106c:	4d0a      	ldr	r5, [pc, #40]	; (1098 <_usb_d_dev_trans_stop+0x60>)
    106e:	46ac      	mov	ip, r5
    1070:	4461      	add	r1, ip
    1072:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1074:	015b      	lsls	r3, r3, #5
    1076:	4909      	ldr	r1, [pc, #36]	; (109c <_usb_d_dev_trans_stop+0x64>)
    1078:	468c      	mov	ip, r1
    107a:	4463      	add	r3, ip
    107c:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    107e:	0011      	movs	r1, r2
    1080:	4b07      	ldr	r3, [pc, #28]	; (10a0 <_usb_d_dev_trans_stop+0x68>)
    1082:	4798      	blx	r3
}
    1084:	b003      	add	sp, #12
    1086:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1088:	015c      	lsls	r4, r3, #5
    108a:	4d03      	ldr	r5, [pc, #12]	; (1098 <_usb_d_dev_trans_stop+0x60>)
    108c:	46ac      	mov	ip, r5
    108e:	4464      	add	r4, ip
    1090:	2540      	movs	r5, #64	; 0x40
    1092:	7165      	strb	r5, [r4, #5]
    1094:	e7e7      	b.n	1066 <_usb_d_dev_trans_stop+0x2e>
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	41005100 	.word	0x41005100
    109c:	41005108 	.word	0x41005108
    10a0:	00001011 	.word	0x00001011

000010a4 <_usb_d_dev_handle_trfail>:
{
    10a4:	b570      	push	{r4, r5, r6, lr}
    10a6:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    10a8:	7c83      	ldrb	r3, [r0, #18]
    10aa:	220f      	movs	r2, #15
    10ac:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    10ae:	aa01      	add	r2, sp, #4
    10b0:	2404      	movs	r4, #4
    10b2:	7014      	strb	r4, [r2, #0]
    10b4:	3404      	adds	r4, #4
    10b6:	7054      	strb	r4, [r2, #1]
    10b8:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    10ba:	2900      	cmp	r1, #0
    10bc:	d031      	beq.n	1122 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    10be:	001a      	movs	r2, r3
    10c0:	3208      	adds	r2, #8
    10c2:	0152      	lsls	r2, r2, #5
    10c4:	4c32      	ldr	r4, [pc, #200]	; (1190 <_usb_d_dev_handle_trfail+0xec>)
    10c6:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    10c8:	0664      	lsls	r4, r4, #25
    10ca:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    10cc:	010a      	lsls	r2, r1, #4
    10ce:	1952      	adds	r2, r2, r5
    10d0:	4d30      	ldr	r5, [pc, #192]	; (1194 <_usb_d_dev_handle_trfail+0xf0>)
    10d2:	18aa      	adds	r2, r5, r2
    10d4:	7a95      	ldrb	r5, [r2, #10]
    10d6:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    10d8:	2c02      	cmp	r4, #2
    10da:	d02a      	beq.n	1132 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    10dc:	07ac      	lsls	r4, r5, #30
    10de:	d541      	bpl.n	1164 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    10e0:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    10e2:	7a94      	ldrb	r4, [r2, #10]
    10e4:	2602      	movs	r6, #2
    10e6:	43b4      	bics	r4, r6
    10e8:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    10ea:	aa01      	add	r2, sp, #4
    10ec:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10ee:	015a      	lsls	r2, r3, #5
    10f0:	4e29      	ldr	r6, [pc, #164]	; (1198 <_usb_d_dev_handle_trfail+0xf4>)
    10f2:	46b4      	mov	ip, r6
    10f4:	4462      	add	r2, ip
    10f6:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10f8:	015b      	lsls	r3, r3, #5
    10fa:	4a28      	ldr	r2, [pc, #160]	; (119c <_usb_d_dev_handle_trfail+0xf8>)
    10fc:	4694      	mov	ip, r2
    10fe:	4463      	add	r3, ip
    1100:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1102:	2307      	movs	r3, #7
    1104:	402b      	ands	r3, r5
    1106:	2b01      	cmp	r3, #1
    1108:	d13f      	bne.n	118a <_usb_d_dev_handle_trfail+0xe6>
    110a:	7cc3      	ldrb	r3, [r0, #19]
    110c:	065b      	lsls	r3, r3, #25
    110e:	d53c      	bpl.n	118a <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1110:	7cc3      	ldrb	r3, [r0, #19]
    1112:	09db      	lsrs	r3, r3, #7
    1114:	4299      	cmp	r1, r3
    1116:	d038      	beq.n	118a <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1118:	2200      	movs	r2, #0
    111a:	0019      	movs	r1, r3
    111c:	4b20      	ldr	r3, [pc, #128]	; (11a0 <_usb_d_dev_handle_trfail+0xfc>)
    111e:	4798      	blx	r3
    1120:	e033      	b.n	118a <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1122:	001a      	movs	r2, r3
    1124:	3208      	adds	r2, #8
    1126:	0152      	lsls	r2, r2, #5
    1128:	4c19      	ldr	r4, [pc, #100]	; (1190 <_usb_d_dev_handle_trfail+0xec>)
    112a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    112c:	2207      	movs	r2, #7
    112e:	4014      	ands	r4, r2
    1130:	e7cc      	b.n	10cc <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1132:	07ec      	lsls	r4, r5, #31
    1134:	d5d2      	bpl.n	10dc <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1136:	7a94      	ldrb	r4, [r2, #10]
    1138:	2501      	movs	r5, #1
    113a:	43ac      	bics	r4, r5
    113c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    113e:	aa01      	add	r2, sp, #4
    1140:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1142:	015a      	lsls	r2, r3, #5
    1144:	4d14      	ldr	r5, [pc, #80]	; (1198 <_usb_d_dev_handle_trfail+0xf4>)
    1146:	46ac      	mov	ip, r5
    1148:	4462      	add	r2, ip
    114a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    114c:	015b      	lsls	r3, r3, #5
    114e:	4a13      	ldr	r2, [pc, #76]	; (119c <_usb_d_dev_handle_trfail+0xf8>)
    1150:	4694      	mov	ip, r2
    1152:	4463      	add	r3, ip
    1154:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1156:	1e4b      	subs	r3, r1, #1
    1158:	4199      	sbcs	r1, r3
    115a:	b2c9      	uxtb	r1, r1
    115c:	2204      	movs	r2, #4
    115e:	4b10      	ldr	r3, [pc, #64]	; (11a0 <_usb_d_dev_handle_trfail+0xfc>)
    1160:	4798      	blx	r3
    1162:	e012      	b.n	118a <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1164:	005a      	lsls	r2, r3, #1
    1166:	1852      	adds	r2, r2, r1
    1168:	0112      	lsls	r2, r2, #4
    116a:	480a      	ldr	r0, [pc, #40]	; (1194 <_usb_d_dev_handle_trfail+0xf0>)
    116c:	1882      	adds	r2, r0, r2
    116e:	2000      	movs	r0, #0
    1170:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1172:	aa01      	add	r2, sp, #4
    1174:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1176:	015a      	lsls	r2, r3, #5
    1178:	4807      	ldr	r0, [pc, #28]	; (1198 <_usb_d_dev_handle_trfail+0xf4>)
    117a:	4684      	mov	ip, r0
    117c:	4462      	add	r2, ip
    117e:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1180:	015b      	lsls	r3, r3, #5
    1182:	4a06      	ldr	r2, [pc, #24]	; (119c <_usb_d_dev_handle_trfail+0xf8>)
    1184:	4694      	mov	ip, r2
    1186:	4463      	add	r3, ip
    1188:	7019      	strb	r1, [r3, #0]
}
    118a:	b002      	add	sp, #8
    118c:	bd70      	pop	{r4, r5, r6, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	41005000 	.word	0x41005000
    1194:	20000104 	.word	0x20000104
    1198:	41005100 	.word	0x41005100
    119c:	41005108 	.word	0x41005108
    11a0:	00001039 	.word	0x00001039

000011a4 <_usb_d_dev_reset_epts>:
{
    11a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11a6:	46c6      	mov	lr, r8
    11a8:	b500      	push	{lr}
    11aa:	4d0c      	ldr	r5, [pc, #48]	; (11dc <_usb_d_dev_reset_epts+0x38>)
    11ac:	002c      	movs	r4, r5
    11ae:	3434      	adds	r4, #52	; 0x34
    11b0:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    11b2:	4b0b      	ldr	r3, [pc, #44]	; (11e0 <_usb_d_dev_reset_epts+0x3c>)
    11b4:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    11b6:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    11b8:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    11ba:	2103      	movs	r1, #3
    11bc:	0020      	movs	r0, r4
    11be:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    11c0:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    11c2:	74e6      	strb	r6, [r4, #19]
    11c4:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    11c6:	42ac      	cmp	r4, r5
    11c8:	d1f7      	bne.n	11ba <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    11ca:	22a0      	movs	r2, #160	; 0xa0
    11cc:	2100      	movs	r1, #0
    11ce:	4805      	ldr	r0, [pc, #20]	; (11e4 <_usb_d_dev_reset_epts+0x40>)
    11d0:	4b05      	ldr	r3, [pc, #20]	; (11e8 <_usb_d_dev_reset_epts+0x44>)
    11d2:	4798      	blx	r3
}
    11d4:	bc04      	pop	{r2}
    11d6:	4690      	mov	r8, r2
    11d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	20000184 	.word	0x20000184
    11e0:	00001011 	.word	0x00001011
    11e4:	20000104 	.word	0x20000104
    11e8:	00002e47 	.word	0x00002e47

000011ec <_usb_d_dev_in_next>:
{
    11ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ee:	46c6      	mov	lr, r8
    11f0:	b500      	push	{lr}
    11f2:	0004      	movs	r4, r0
    11f4:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    11f6:	7c83      	ldrb	r3, [r0, #18]
    11f8:	250f      	movs	r5, #15
    11fa:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    11fc:	2900      	cmp	r1, #0
    11fe:	d100      	bne.n	1202 <_usb_d_dev_in_next+0x16>
    1200:	e0aa      	b.n	1358 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1202:	016a      	lsls	r2, r5, #5
    1204:	4b5a      	ldr	r3, [pc, #360]	; (1370 <_usb_d_dev_in_next+0x184>)
    1206:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1208:	6958      	ldr	r0, [r3, #20]
    120a:	0480      	lsls	r0, r0, #18
    120c:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    120e:	8a23      	ldrh	r3, [r4, #16]
    1210:	4a58      	ldr	r2, [pc, #352]	; (1374 <_usb_d_dev_in_next+0x188>)
    1212:	4293      	cmp	r3, r2
    1214:	d100      	bne.n	1218 <_usb_d_dev_in_next+0x2c>
    1216:	e09a      	b.n	134e <_usb_d_dev_in_next+0x162>
    1218:	3b01      	subs	r3, #1
    121a:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    121c:	7ce3      	ldrb	r3, [r4, #19]
    121e:	2707      	movs	r7, #7
    1220:	401f      	ands	r7, r3
	if (isr) {
    1222:	2e00      	cmp	r6, #0
    1224:	d005      	beq.n	1232 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1226:	016b      	lsls	r3, r5, #5
    1228:	4953      	ldr	r1, [pc, #332]	; (1378 <_usb_d_dev_in_next+0x18c>)
    122a:	468c      	mov	ip, r1
    122c:	4463      	add	r3, ip
    122e:	2102      	movs	r1, #2
    1230:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1232:	68a3      	ldr	r3, [r4, #8]
    1234:	18c1      	adds	r1, r0, r3
    1236:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1238:	6863      	ldr	r3, [r4, #4]
    123a:	4299      	cmp	r1, r3
    123c:	d24a      	bcs.n	12d4 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    123e:	1a5b      	subs	r3, r3, r1
    1240:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1242:	7ce2      	ldrb	r2, [r4, #19]
    1244:	0692      	lsls	r2, r2, #26
    1246:	d535      	bpl.n	12b4 <_usb_d_dev_in_next+0xc8>
    1248:	8a22      	ldrh	r2, [r4, #16]
    124a:	1c10      	adds	r0, r2, #0
    124c:	b292      	uxth	r2, r2
    124e:	429a      	cmp	r2, r3
    1250:	d900      	bls.n	1254 <_usb_d_dev_in_next+0x68>
    1252:	1c18      	adds	r0, r3, #0
    1254:	b283      	uxth	r3, r0
    1256:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1258:	6823      	ldr	r3, [r4, #0]
    125a:	469c      	mov	ip, r3
    125c:	4461      	add	r1, ip
    125e:	4642      	mov	r2, r8
    1260:	68e0      	ldr	r0, [r4, #12]
    1262:	4b46      	ldr	r3, [pc, #280]	; (137c <_usb_d_dev_in_next+0x190>)
    1264:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1266:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1268:	016a      	lsls	r2, r5, #5
    126a:	4b41      	ldr	r3, [pc, #260]	; (1370 <_usb_d_dev_in_next+0x184>)
    126c:	189b      	adds	r3, r3, r2
    126e:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1270:	016a      	lsls	r2, r5, #5
    1272:	4b3f      	ldr	r3, [pc, #252]	; (1370 <_usb_d_dev_in_next+0x184>)
    1274:	189b      	adds	r3, r3, r2
    1276:	695a      	ldr	r2, [r3, #20]
    1278:	4641      	mov	r1, r8
    127a:	0489      	lsls	r1, r1, #18
    127c:	0c89      	lsrs	r1, r1, #18
    127e:	0b92      	lsrs	r2, r2, #14
    1280:	0392      	lsls	r2, r2, #14
    1282:	430a      	orrs	r2, r1
    1284:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1286:	695a      	ldr	r2, [r3, #20]
    1288:	493d      	ldr	r1, [pc, #244]	; (1380 <_usb_d_dev_in_next+0x194>)
    128a:	400a      	ands	r2, r1
    128c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    128e:	2e00      	cmp	r6, #0
    1290:	d107      	bne.n	12a2 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1292:	2f01      	cmp	r7, #1
    1294:	d059      	beq.n	134a <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1296:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1298:	016b      	lsls	r3, r5, #5
    129a:	493a      	ldr	r1, [pc, #232]	; (1384 <_usb_d_dev_in_next+0x198>)
    129c:	468c      	mov	ip, r1
    129e:	4463      	add	r3, ip
    12a0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    12a2:	016d      	lsls	r5, r5, #5
    12a4:	4b34      	ldr	r3, [pc, #208]	; (1378 <_usb_d_dev_in_next+0x18c>)
    12a6:	469c      	mov	ip, r3
    12a8:	4465      	add	r5, ip
    12aa:	2380      	movs	r3, #128	; 0x80
    12ac:	716b      	strb	r3, [r5, #5]
}
    12ae:	bc04      	pop	{r2}
    12b0:	4690      	mov	r8, r2
    12b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b4:	1c1a      	adds	r2, r3, #0
    12b6:	2080      	movs	r0, #128	; 0x80
    12b8:	0180      	lsls	r0, r0, #6
    12ba:	4283      	cmp	r3, r0
    12bc:	d901      	bls.n	12c2 <_usb_d_dev_in_next+0xd6>
    12be:	4b32      	ldr	r3, [pc, #200]	; (1388 <_usb_d_dev_in_next+0x19c>)
    12c0:	881a      	ldrh	r2, [r3, #0]
    12c2:	b293      	uxth	r3, r2
    12c4:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    12c6:	6823      	ldr	r3, [r4, #0]
    12c8:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    12ca:	016a      	lsls	r2, r5, #5
    12cc:	4b28      	ldr	r3, [pc, #160]	; (1370 <_usb_d_dev_in_next+0x184>)
    12ce:	189b      	adds	r3, r3, r2
    12d0:	6119      	str	r1, [r3, #16]
    12d2:	e7cd      	b.n	1270 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    12d4:	7ce3      	ldrb	r3, [r4, #19]
    12d6:	06db      	lsls	r3, r3, #27
    12d8:	d50f      	bpl.n	12fa <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    12da:	7ce3      	ldrb	r3, [r4, #19]
    12dc:	2210      	movs	r2, #16
    12de:	4393      	bics	r3, r2
    12e0:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    12e2:	016a      	lsls	r2, r5, #5
    12e4:	4b22      	ldr	r3, [pc, #136]	; (1370 <_usb_d_dev_in_next+0x184>)
    12e6:	189b      	adds	r3, r3, r2
    12e8:	695a      	ldr	r2, [r3, #20]
    12ea:	0b92      	lsrs	r2, r2, #14
    12ec:	0392      	lsls	r2, r2, #14
    12ee:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    12f0:	695a      	ldr	r2, [r3, #20]
    12f2:	4923      	ldr	r1, [pc, #140]	; (1380 <_usb_d_dev_in_next+0x194>)
    12f4:	400a      	ands	r2, r1
    12f6:	615a      	str	r2, [r3, #20]
    12f8:	e7c9      	b.n	128e <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    12fa:	2f01      	cmp	r7, #1
    12fc:	d00e      	beq.n	131c <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12fe:	016d      	lsls	r5, r5, #5
    1300:	4b22      	ldr	r3, [pc, #136]	; (138c <_usb_d_dev_in_next+0x1a0>)
    1302:	469c      	mov	ip, r3
    1304:	4465      	add	r5, ip
    1306:	234a      	movs	r3, #74	; 0x4a
    1308:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    130a:	8a21      	ldrh	r1, [r4, #16]
    130c:	4002      	ands	r2, r0
    130e:	4291      	cmp	r1, r2
    1310:	d00b      	beq.n	132a <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1312:	2100      	movs	r1, #0
    1314:	0020      	movs	r0, r4
    1316:	4b1e      	ldr	r3, [pc, #120]	; (1390 <_usb_d_dev_in_next+0x1a4>)
    1318:	4798      	blx	r3
	return;
    131a:	e7c8      	b.n	12ae <_usb_d_dev_in_next+0xc2>
    131c:	016d      	lsls	r5, r5, #5
    131e:	4b1b      	ldr	r3, [pc, #108]	; (138c <_usb_d_dev_in_next+0x1a0>)
    1320:	469c      	mov	ip, r3
    1322:	4465      	add	r5, ip
    1324:	234b      	movs	r3, #75	; 0x4b
    1326:	702b      	strb	r3, [r5, #0]
    1328:	e7ef      	b.n	130a <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    132a:	7ce3      	ldrb	r3, [r4, #19]
    132c:	2240      	movs	r2, #64	; 0x40
    132e:	4393      	bics	r3, r2
    1330:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1332:	7ca0      	ldrb	r0, [r4, #18]
    1334:	4b17      	ldr	r3, [pc, #92]	; (1394 <_usb_d_dev_in_next+0x1a8>)
    1336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1338:	68a1      	ldr	r1, [r4, #8]
    133a:	4798      	blx	r3
    133c:	2800      	cmp	r0, #0
    133e:	d1b6      	bne.n	12ae <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1340:	7ce3      	ldrb	r3, [r4, #19]
    1342:	2240      	movs	r2, #64	; 0x40
    1344:	4313      	orrs	r3, r2
    1346:	74e3      	strb	r3, [r4, #19]
    1348:	e7e3      	b.n	1312 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    134a:	224e      	movs	r2, #78	; 0x4e
    134c:	e7a4      	b.n	1298 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    134e:	7ce7      	ldrb	r7, [r4, #19]
    1350:	2307      	movs	r3, #7
    1352:	401f      	ands	r7, r3
    1354:	4a07      	ldr	r2, [pc, #28]	; (1374 <_usb_d_dev_in_next+0x188>)
    1356:	e766      	b.n	1226 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1358:	8a03      	ldrh	r3, [r0, #16]
    135a:	4a06      	ldr	r2, [pc, #24]	; (1374 <_usb_d_dev_in_next+0x188>)
    135c:	2000      	movs	r0, #0
    135e:	4293      	cmp	r3, r2
    1360:	d000      	beq.n	1364 <_usb_d_dev_in_next+0x178>
    1362:	e759      	b.n	1218 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1364:	7ce3      	ldrb	r3, [r4, #19]
    1366:	2707      	movs	r7, #7
    1368:	401f      	ands	r7, r3
    136a:	2000      	movs	r0, #0
    136c:	4a01      	ldr	r2, [pc, #4]	; (1374 <_usb_d_dev_in_next+0x188>)
    136e:	e760      	b.n	1232 <_usb_d_dev_in_next+0x46>
    1370:	20000104 	.word	0x20000104
    1374:	000003ff 	.word	0x000003ff
    1378:	41005100 	.word	0x41005100
    137c:	00002e35 	.word	0x00002e35
    1380:	f0003fff 	.word	0xf0003fff
    1384:	41005109 	.word	0x41005109
    1388:	00002eb0 	.word	0x00002eb0
    138c:	41005108 	.word	0x41005108
    1390:	00001011 	.word	0x00001011
    1394:	20000184 	.word	0x20000184

00001398 <_usb_d_dev_out_next>:
{
    1398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    139a:	46de      	mov	lr, fp
    139c:	4657      	mov	r7, sl
    139e:	464e      	mov	r6, r9
    13a0:	4645      	mov	r5, r8
    13a2:	b5e0      	push	{r5, r6, r7, lr}
    13a4:	0004      	movs	r4, r0
    13a6:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    13a8:	7c83      	ldrb	r3, [r0, #18]
    13aa:	250f      	movs	r5, #15
    13ac:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    13ae:	2900      	cmp	r1, #0
    13b0:	d057      	beq.n	1462 <_usb_d_dev_out_next+0xca>
    13b2:	016a      	lsls	r2, r5, #5
    13b4:	4b7d      	ldr	r3, [pc, #500]	; (15ac <_usb_d_dev_out_next+0x214>)
    13b6:	189b      	adds	r3, r3, r2
    13b8:	685a      	ldr	r2, [r3, #4]
    13ba:	0112      	lsls	r2, r2, #4
    13bc:	0c92      	lsrs	r2, r2, #18
    13be:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    13c0:	685f      	ldr	r7, [r3, #4]
    13c2:	04bf      	lsls	r7, r7, #18
    13c4:	0cbf      	lsrs	r7, r7, #18
    13c6:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    13c8:	8a06      	ldrh	r6, [r0, #16]
    13ca:	4b79      	ldr	r3, [pc, #484]	; (15b0 <_usb_d_dev_out_next+0x218>)
    13cc:	429e      	cmp	r6, r3
    13ce:	d100      	bne.n	13d2 <_usb_d_dev_out_next+0x3a>
    13d0:	e0cd      	b.n	156e <_usb_d_dev_out_next+0x1d6>
    13d2:	3e01      	subs	r6, #1
    13d4:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    13d6:	465f      	mov	r7, fp
    13d8:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13da:	7ce3      	ldrb	r3, [r4, #19]
    13dc:	2207      	movs	r2, #7
    13de:	401a      	ands	r2, r3
    13e0:	4691      	mov	r9, r2
	if (isr) {
    13e2:	4643      	mov	r3, r8
    13e4:	2b00      	cmp	r3, #0
    13e6:	d005      	beq.n	13f4 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    13e8:	016b      	lsls	r3, r5, #5
    13ea:	4a72      	ldr	r2, [pc, #456]	; (15b4 <_usb_d_dev_out_next+0x21c>)
    13ec:	4694      	mov	ip, r2
    13ee:	4463      	add	r3, ip
    13f0:	2201      	movs	r2, #1
    13f2:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    13f4:	7ce3      	ldrb	r3, [r4, #19]
    13f6:	069b      	lsls	r3, r3, #26
    13f8:	d50f      	bpl.n	141a <_usb_d_dev_out_next+0x82>
    13fa:	6863      	ldr	r3, [r4, #4]
    13fc:	2b00      	cmp	r3, #0
    13fe:	d039      	beq.n	1474 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1400:	68a0      	ldr	r0, [r4, #8]
    1402:	1a1b      	subs	r3, r3, r0
    1404:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1406:	6822      	ldr	r2, [r4, #0]
    1408:	4694      	mov	ip, r2
    140a:	4460      	add	r0, ip
    140c:	68e1      	ldr	r1, [r4, #12]
    140e:	001a      	movs	r2, r3
    1410:	42bb      	cmp	r3, r7
    1412:	d900      	bls.n	1416 <_usb_d_dev_out_next+0x7e>
    1414:	003a      	movs	r2, r7
    1416:	4b68      	ldr	r3, [pc, #416]	; (15b8 <_usb_d_dev_out_next+0x220>)
    1418:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    141a:	6863      	ldr	r3, [r4, #4]
    141c:	2b00      	cmp	r3, #0
    141e:	d029      	beq.n	1474 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1420:	4642      	mov	r2, r8
    1422:	2a00      	cmp	r2, #0
    1424:	d042      	beq.n	14ac <_usb_d_dev_out_next+0x114>
    1426:	8a22      	ldrh	r2, [r4, #16]
    1428:	42ba      	cmp	r2, r7
    142a:	d93f      	bls.n	14ac <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    142c:	7ce3      	ldrb	r3, [r4, #19]
    142e:	2210      	movs	r2, #16
    1430:	4393      	bics	r3, r2
    1432:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1434:	68a3      	ldr	r3, [r4, #8]
    1436:	445b      	add	r3, fp
    1438:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    143a:	464b      	mov	r3, r9
    143c:	2b01      	cmp	r3, #1
    143e:	d100      	bne.n	1442 <_usb_d_dev_out_next+0xaa>
    1440:	e087      	b.n	1552 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1442:	016b      	lsls	r3, r5, #5
    1444:	4a5d      	ldr	r2, [pc, #372]	; (15bc <_usb_d_dev_out_next+0x224>)
    1446:	4694      	mov	ip, r2
    1448:	4463      	add	r3, ip
    144a:	2225      	movs	r2, #37	; 0x25
    144c:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    144e:	2d00      	cmp	r5, #0
    1450:	d102      	bne.n	1458 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1452:	4b56      	ldr	r3, [pc, #344]	; (15ac <_usb_d_dev_out_next+0x214>)
    1454:	68e2      	ldr	r2, [r4, #12]
    1456:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1458:	2100      	movs	r1, #0
    145a:	0020      	movs	r0, r4
    145c:	4b58      	ldr	r3, [pc, #352]	; (15c0 <_usb_d_dev_out_next+0x228>)
    145e:	4798      	blx	r3
	return;
    1460:	e059      	b.n	1516 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1462:	8a06      	ldrh	r6, [r0, #16]
    1464:	4b52      	ldr	r3, [pc, #328]	; (15b0 <_usb_d_dev_out_next+0x218>)
    1466:	429e      	cmp	r6, r3
    1468:	d100      	bne.n	146c <_usb_d_dev_out_next+0xd4>
    146a:	e08e      	b.n	158a <_usb_d_dev_out_next+0x1f2>
    146c:	2300      	movs	r3, #0
    146e:	469b      	mov	fp, r3
    1470:	469a      	mov	sl, r3
    1472:	e7ae      	b.n	13d2 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1474:	7ce3      	ldrb	r3, [r4, #19]
    1476:	06db      	lsls	r3, r3, #27
    1478:	d400      	bmi.n	147c <_usb_d_dev_out_next+0xe4>
    147a:	e07f      	b.n	157c <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    147c:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    147e:	2210      	movs	r2, #16
    1480:	4393      	bics	r3, r2
    1482:	2220      	movs	r2, #32
    1484:	4313      	orrs	r3, r2
    1486:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1488:	4a48      	ldr	r2, [pc, #288]	; (15ac <_usb_d_dev_out_next+0x214>)
    148a:	016b      	lsls	r3, r5, #5
    148c:	68e1      	ldr	r1, [r4, #12]
    148e:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1490:	8a21      	ldrh	r1, [r4, #16]
    1492:	18d3      	adds	r3, r2, r3
    1494:	685a      	ldr	r2, [r3, #4]
    1496:	0489      	lsls	r1, r1, #18
    1498:	0909      	lsrs	r1, r1, #4
    149a:	484a      	ldr	r0, [pc, #296]	; (15c4 <_usb_d_dev_out_next+0x22c>)
    149c:	4002      	ands	r2, r0
    149e:	430a      	orrs	r2, r1
    14a0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    14a2:	685a      	ldr	r2, [r3, #4]
    14a4:	0b92      	lsrs	r2, r2, #14
    14a6:	0392      	lsls	r2, r2, #14
    14a8:	605a      	str	r2, [r3, #4]
    14aa:	e022      	b.n	14f2 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    14ac:	68a2      	ldr	r2, [r4, #8]
    14ae:	4452      	add	r2, sl
    14b0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    14b2:	4293      	cmp	r3, r2
    14b4:	d9c1      	bls.n	143a <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    14b6:	1a9b      	subs	r3, r3, r2
    14b8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    14ba:	7ce1      	ldrb	r1, [r4, #19]
    14bc:	0689      	lsls	r1, r1, #26
    14be:	d530      	bpl.n	1522 <_usb_d_dev_out_next+0x18a>
    14c0:	8a22      	ldrh	r2, [r4, #16]
    14c2:	1c11      	adds	r1, r2, #0
    14c4:	b292      	uxth	r2, r2
    14c6:	429a      	cmp	r2, r3
    14c8:	d900      	bls.n	14cc <_usb_d_dev_out_next+0x134>
    14ca:	1c19      	adds	r1, r3, #0
    14cc:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    14ce:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    14d0:	016a      	lsls	r2, r5, #5
    14d2:	4936      	ldr	r1, [pc, #216]	; (15ac <_usb_d_dev_out_next+0x214>)
    14d4:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    14d6:	016a      	lsls	r2, r5, #5
    14d8:	4934      	ldr	r1, [pc, #208]	; (15ac <_usb_d_dev_out_next+0x214>)
    14da:	1889      	adds	r1, r1, r2
    14dc:	684a      	ldr	r2, [r1, #4]
    14de:	049b      	lsls	r3, r3, #18
    14e0:	091b      	lsrs	r3, r3, #4
    14e2:	4838      	ldr	r0, [pc, #224]	; (15c4 <_usb_d_dev_out_next+0x22c>)
    14e4:	4002      	ands	r2, r0
    14e6:	4313      	orrs	r3, r2
    14e8:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    14ea:	684b      	ldr	r3, [r1, #4]
    14ec:	0b9b      	lsrs	r3, r3, #14
    14ee:	039b      	lsls	r3, r3, #14
    14f0:	604b      	str	r3, [r1, #4]
	if (!isr) {
    14f2:	4643      	mov	r3, r8
    14f4:	2b00      	cmp	r3, #0
    14f6:	d108      	bne.n	150a <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    14f8:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    14fa:	464b      	mov	r3, r9
    14fc:	2b01      	cmp	r3, #1
    14fe:	d02f      	beq.n	1560 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1500:	016b      	lsls	r3, r5, #5
    1502:	4931      	ldr	r1, [pc, #196]	; (15c8 <_usb_d_dev_out_next+0x230>)
    1504:	468c      	mov	ip, r1
    1506:	4463      	add	r3, ip
    1508:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    150a:	016d      	lsls	r5, r5, #5
    150c:	4b29      	ldr	r3, [pc, #164]	; (15b4 <_usb_d_dev_out_next+0x21c>)
    150e:	469c      	mov	ip, r3
    1510:	4465      	add	r5, ip
    1512:	2340      	movs	r3, #64	; 0x40
    1514:	712b      	strb	r3, [r5, #4]
}
    1516:	bc3c      	pop	{r2, r3, r4, r5}
    1518:	4690      	mov	r8, r2
    151a:	4699      	mov	r9, r3
    151c:	46a2      	mov	sl, r4
    151e:	46ab      	mov	fp, r5
    1520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1522:	8a21      	ldrh	r1, [r4, #16]
    1524:	428b      	cmp	r3, r1
    1526:	d90a      	bls.n	153e <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1528:	2180      	movs	r1, #128	; 0x80
    152a:	0189      	lsls	r1, r1, #6
    152c:	428b      	cmp	r3, r1
    152e:	d80d      	bhi.n	154c <_usb_d_dev_out_next+0x1b4>
    1530:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1532:	6821      	ldr	r1, [r4, #0]
    1534:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1536:	0169      	lsls	r1, r5, #5
    1538:	481c      	ldr	r0, [pc, #112]	; (15ac <_usb_d_dev_out_next+0x214>)
    153a:	500a      	str	r2, [r1, r0]
    153c:	e7cb      	b.n	14d6 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    153e:	428b      	cmp	r3, r1
    1540:	d2f7      	bcs.n	1532 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1542:	7ce1      	ldrb	r1, [r4, #19]
    1544:	2020      	movs	r0, #32
    1546:	4301      	orrs	r1, r0
    1548:	74e1      	strb	r1, [r4, #19]
    154a:	e7f2      	b.n	1532 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    154c:	2380      	movs	r3, #128	; 0x80
    154e:	019b      	lsls	r3, r3, #6
    1550:	e7ef      	b.n	1532 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1552:	016b      	lsls	r3, r5, #5
    1554:	4a19      	ldr	r2, [pc, #100]	; (15bc <_usb_d_dev_out_next+0x224>)
    1556:	4694      	mov	ip, r2
    1558:	4463      	add	r3, ip
    155a:	222d      	movs	r2, #45	; 0x2d
    155c:	701a      	strb	r2, [r3, #0]
    155e:	e776      	b.n	144e <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1560:	016a      	lsls	r2, r5, #5
    1562:	4b12      	ldr	r3, [pc, #72]	; (15ac <_usb_d_dev_out_next+0x214>)
    1564:	189b      	adds	r3, r3, r2
    1566:	2200      	movs	r2, #0
    1568:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    156a:	322d      	adds	r2, #45	; 0x2d
    156c:	e7c8      	b.n	1500 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    156e:	05bf      	lsls	r7, r7, #22
    1570:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1572:	7cc3      	ldrb	r3, [r0, #19]
    1574:	2207      	movs	r2, #7
    1576:	401a      	ands	r2, r3
    1578:	4691      	mov	r9, r2
    157a:	e735      	b.n	13e8 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    157c:	4643      	mov	r3, r8
    157e:	2b00      	cmp	r3, #0
    1580:	d10c      	bne.n	159c <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1582:	68a3      	ldr	r3, [r4, #8]
    1584:	4453      	add	r3, sl
    1586:	60a3      	str	r3, [r4, #8]
    1588:	e757      	b.n	143a <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    158a:	7cc3      	ldrb	r3, [r0, #19]
    158c:	2207      	movs	r2, #7
    158e:	401a      	ands	r2, r3
    1590:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1592:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1594:	2300      	movs	r3, #0
    1596:	469b      	mov	fp, r3
    1598:	469a      	mov	sl, r3
    159a:	e72b      	b.n	13f4 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    159c:	8a23      	ldrh	r3, [r4, #16]
    159e:	42bb      	cmp	r3, r7
    15a0:	d900      	bls.n	15a4 <_usb_d_dev_out_next+0x20c>
    15a2:	e743      	b.n	142c <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    15a4:	68a3      	ldr	r3, [r4, #8]
    15a6:	4453      	add	r3, sl
    15a8:	60a3      	str	r3, [r4, #8]
    15aa:	e746      	b.n	143a <_usb_d_dev_out_next+0xa2>
    15ac:	20000104 	.word	0x20000104
    15b0:	000003ff 	.word	0x000003ff
    15b4:	41005100 	.word	0x41005100
    15b8:	00002e35 	.word	0x00002e35
    15bc:	41005108 	.word	0x41005108
    15c0:	00001011 	.word	0x00001011
    15c4:	f0003fff 	.word	0xf0003fff
    15c8:	41005109 	.word	0x41005109

000015cc <_usb_d_dev_init>:
{
    15cc:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    15ce:	4b31      	ldr	r3, [pc, #196]	; (1694 <_usb_d_dev_init+0xc8>)
    15d0:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    15d2:	07db      	lsls	r3, r3, #31
    15d4:	d41f      	bmi.n	1616 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    15d6:	492f      	ldr	r1, [pc, #188]	; (1694 <_usb_d_dev_init+0xc8>)
    15d8:	2203      	movs	r2, #3
    15da:	788b      	ldrb	r3, [r1, #2]
    15dc:	4213      	tst	r3, r2
    15de:	d1fc      	bne.n	15da <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    15e0:	4b2c      	ldr	r3, [pc, #176]	; (1694 <_usb_d_dev_init+0xc8>)
    15e2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    15e4:	079b      	lsls	r3, r3, #30
    15e6:	d50e      	bpl.n	1606 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    15e8:	4a2a      	ldr	r2, [pc, #168]	; (1694 <_usb_d_dev_init+0xc8>)
    15ea:	7813      	ldrb	r3, [r2, #0]
    15ec:	2102      	movs	r1, #2
    15ee:	438b      	bics	r3, r1
    15f0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    15f2:	0011      	movs	r1, r2
    15f4:	2203      	movs	r2, #3
    15f6:	788b      	ldrb	r3, [r1, #2]
    15f8:	4213      	tst	r3, r2
    15fa:	d1fc      	bne.n	15f6 <_usb_d_dev_init+0x2a>
    15fc:	4925      	ldr	r1, [pc, #148]	; (1694 <_usb_d_dev_init+0xc8>)
    15fe:	2202      	movs	r2, #2
    1600:	788b      	ldrb	r3, [r1, #2]
    1602:	4213      	tst	r3, r2
    1604:	d1fc      	bne.n	1600 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1606:	2201      	movs	r2, #1
    1608:	4b22      	ldr	r3, [pc, #136]	; (1694 <_usb_d_dev_init+0xc8>)
    160a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    160c:	0019      	movs	r1, r3
    160e:	3202      	adds	r2, #2
    1610:	788b      	ldrb	r3, [r1, #2]
    1612:	4213      	tst	r3, r2
    1614:	d1fc      	bne.n	1610 <_usb_d_dev_init+0x44>
    1616:	491f      	ldr	r1, [pc, #124]	; (1694 <_usb_d_dev_init+0xc8>)
    1618:	2201      	movs	r2, #1
    161a:	788b      	ldrb	r3, [r1, #2]
    161c:	4213      	tst	r3, r2
    161e:	d1fc      	bne.n	161a <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1620:	4b1d      	ldr	r3, [pc, #116]	; (1698 <_usb_d_dev_init+0xcc>)
    1622:	4a1e      	ldr	r2, [pc, #120]	; (169c <_usb_d_dev_init+0xd0>)
    1624:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1626:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1628:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    162a:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    162c:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    162e:	4b1c      	ldr	r3, [pc, #112]	; (16a0 <_usb_d_dev_init+0xd4>)
    1630:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1632:	4b1c      	ldr	r3, [pc, #112]	; (16a4 <_usb_d_dev_init+0xd8>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1638:	211f      	movs	r1, #31
    163a:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    163c:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    163e:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1640:	019b      	lsls	r3, r3, #6
    1642:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1644:	2a1f      	cmp	r2, #31
    1646:	d01f      	beq.n	1688 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    1648:	291f      	cmp	r1, #31
    164a:	d01f      	beq.n	168c <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    164c:	2b07      	cmp	r3, #7
    164e:	d01f      	beq.n	1690 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1650:	0192      	lsls	r2, r2, #6
    1652:	430a      	orrs	r2, r1
    1654:	031b      	lsls	r3, r3, #12
    1656:	4313      	orrs	r3, r2
    1658:	4a0e      	ldr	r2, [pc, #56]	; (1694 <_usb_d_dev_init+0xc8>)
    165a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    165c:	78d3      	ldrb	r3, [r2, #3]
    165e:	2103      	movs	r1, #3
    1660:	430b      	orrs	r3, r1
    1662:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1664:	78d3      	ldrb	r3, [r2, #3]
    1666:	210c      	movs	r1, #12
    1668:	430b      	orrs	r3, r1
    166a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    166c:	2304      	movs	r3, #4
    166e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1670:	0011      	movs	r1, r2
    1672:	2203      	movs	r2, #3
    1674:	788b      	ldrb	r3, [r1, #2]
    1676:	4213      	tst	r3, r2
    1678:	d1fc      	bne.n	1674 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    167a:	4b06      	ldr	r3, [pc, #24]	; (1694 <_usb_d_dev_init+0xc8>)
    167c:	4a0a      	ldr	r2, [pc, #40]	; (16a8 <_usb_d_dev_init+0xdc>)
    167e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1680:	2201      	movs	r2, #1
    1682:	811a      	strh	r2, [r3, #8]
}
    1684:	2000      	movs	r0, #0
    1686:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1688:	3a1a      	subs	r2, #26
    168a:	e7dd      	b.n	1648 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    168c:	3902      	subs	r1, #2
    168e:	e7dd      	b.n	164c <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1690:	3b02      	subs	r3, #2
    1692:	e7dd      	b.n	1650 <_usb_d_dev_init+0x84>
    1694:	41005000 	.word	0x41005000
    1698:	20000184 	.word	0x20000184
    169c:	00000f49 	.word	0x00000f49
    16a0:	000011a5 	.word	0x000011a5
    16a4:	00806024 	.word	0x00806024
    16a8:	20000104 	.word	0x20000104

000016ac <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    16ac:	4b10      	ldr	r3, [pc, #64]	; (16f0 <_usb_d_dev_enable+0x44>)
    16ae:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    16b0:	079b      	lsls	r3, r3, #30
    16b2:	d11a      	bne.n	16ea <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16b4:	490e      	ldr	r1, [pc, #56]	; (16f0 <_usb_d_dev_enable+0x44>)
    16b6:	2203      	movs	r2, #3
    16b8:	788b      	ldrb	r3, [r1, #2]
    16ba:	4213      	tst	r3, r2
    16bc:	d1fc      	bne.n	16b8 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    16be:	4b0c      	ldr	r3, [pc, #48]	; (16f0 <_usb_d_dev_enable+0x44>)
    16c0:	781b      	ldrb	r3, [r3, #0]
    16c2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    16c4:	079a      	lsls	r2, r3, #30
    16c6:	d408      	bmi.n	16da <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    16c8:	2202      	movs	r2, #2
    16ca:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    16cc:	4a08      	ldr	r2, [pc, #32]	; (16f0 <_usb_d_dev_enable+0x44>)
    16ce:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16d0:	0011      	movs	r1, r2
    16d2:	2203      	movs	r2, #3
    16d4:	788b      	ldrb	r3, [r1, #2]
    16d6:	4213      	tst	r3, r2
    16d8:	d1fc      	bne.n	16d4 <_usb_d_dev_enable+0x28>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16da:	2280      	movs	r2, #128	; 0x80
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <_usb_d_dev_enable+0x48>)
    16de:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    16e0:	4a05      	ldr	r2, [pc, #20]	; (16f8 <_usb_d_dev_enable+0x4c>)
    16e2:	4b03      	ldr	r3, [pc, #12]	; (16f0 <_usb_d_dev_enable+0x44>)
    16e4:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    16e6:	2000      	movs	r0, #0
}
    16e8:	4770      	bx	lr
		return -USB_ERR_DENIED;
    16ea:	2011      	movs	r0, #17
    16ec:	4240      	negs	r0, r0
    16ee:	e7fb      	b.n	16e8 <_usb_d_dev_enable+0x3c>
    16f0:	41005000 	.word	0x41005000
    16f4:	e000e100 	.word	0xe000e100
    16f8:	0000028d 	.word	0x0000028d

000016fc <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    16fc:	4a02      	ldr	r2, [pc, #8]	; (1708 <_usb_d_dev_attach+0xc>)
    16fe:	8913      	ldrh	r3, [r2, #8]
    1700:	2101      	movs	r1, #1
    1702:	438b      	bics	r3, r1
    1704:	8113      	strh	r3, [r2, #8]
}
    1706:	4770      	bx	lr
    1708:	41005000 	.word	0x41005000

0000170c <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    170c:	2380      	movs	r3, #128	; 0x80
    170e:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1710:	4b01      	ldr	r3, [pc, #4]	; (1718 <_usb_d_dev_set_address+0xc>)
    1712:	7298      	strb	r0, [r3, #10]
}
    1714:	4770      	bx	lr
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	41005000 	.word	0x41005000

0000171c <_usb_d_dev_ep_init>:
{
    171c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    171e:	240f      	movs	r4, #15
    1720:	4004      	ands	r4, r0
    1722:	b243      	sxtb	r3, r0
    1724:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1726:	2c00      	cmp	r4, #0
    1728:	d054      	beq.n	17d4 <_usb_d_dev_ep_init+0xb8>
    172a:	0025      	movs	r5, r4
    172c:	2b00      	cmp	r3, #0
    172e:	db07      	blt.n	1740 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1730:	2303      	movs	r3, #3
    1732:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1734:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1736:	2c04      	cmp	r4, #4
    1738:	d950      	bls.n	17dc <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    173a:	2012      	movs	r0, #18
    173c:	4240      	negs	r0, r0
    173e:	e025      	b.n	178c <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1740:	1d25      	adds	r5, r4, #4
    1742:	e7f5      	b.n	1730 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1744:	4663      	mov	r3, ip
    1746:	2b00      	cmp	r3, #0
    1748:	db21      	blt.n	178e <_usb_d_dev_ep_init+0x72>
    174a:	007b      	lsls	r3, r7, #1
    174c:	19db      	adds	r3, r3, r7
    174e:	009b      	lsls	r3, r3, #2
    1750:	4c3b      	ldr	r4, [pc, #236]	; (1840 <_usb_d_dev_ep_init+0x124>)
    1752:	591b      	ldr	r3, [r3, r4]
    1754:	2b00      	cmp	r3, #0
    1756:	d166      	bne.n	1826 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1758:	007b      	lsls	r3, r7, #1
    175a:	19df      	adds	r7, r3, r7
    175c:	00bf      	lsls	r7, r7, #2
    175e:	4b38      	ldr	r3, [pc, #224]	; (1840 <_usb_d_dev_ep_init+0x124>)
    1760:	58ff      	ldr	r7, [r7, r3]
    1762:	4b38      	ldr	r3, [pc, #224]	; (1844 <_usb_d_dev_ep_init+0x128>)
    1764:	00ae      	lsls	r6, r5, #2
    1766:	1974      	adds	r4, r6, r5
    1768:	00a4      	lsls	r4, r4, #2
    176a:	191c      	adds	r4, r3, r4
    176c:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    176e:	3444      	adds	r4, #68	; 0x44
    1770:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    1772:	3320      	adds	r3, #32
    1774:	1972      	adds	r2, r6, r5
    1776:	0092      	lsls	r2, r2, #2
    1778:	189a      	adds	r2, r3, r2
    177a:	3227      	adds	r2, #39	; 0x27
    177c:	3101      	adds	r1, #1
    177e:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    1780:	1975      	adds	r5, r6, r5
    1782:	00ad      	lsls	r5, r5, #2
    1784:	195b      	adds	r3, r3, r5
    1786:	3326      	adds	r3, #38	; 0x26
    1788:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    178a:	2000      	movs	r0, #0
}
    178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    178e:	007b      	lsls	r3, r7, #1
    1790:	19db      	adds	r3, r3, r7
    1792:	009b      	lsls	r3, r3, #2
    1794:	4c2a      	ldr	r4, [pc, #168]	; (1840 <_usb_d_dev_ep_init+0x124>)
    1796:	18e3      	adds	r3, r4, r3
    1798:	685b      	ldr	r3, [r3, #4]
    179a:	2b00      	cmp	r3, #0
    179c:	d106      	bne.n	17ac <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    179e:	007b      	lsls	r3, r7, #1
    17a0:	19df      	adds	r7, r3, r7
    17a2:	00bf      	lsls	r7, r7, #2
    17a4:	4b26      	ldr	r3, [pc, #152]	; (1840 <_usb_d_dev_ep_init+0x124>)
    17a6:	19df      	adds	r7, r3, r7
    17a8:	687f      	ldr	r7, [r7, #4]
    17aa:	e7da      	b.n	1762 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    17ac:	007b      	lsls	r3, r7, #1
    17ae:	19db      	adds	r3, r3, r7
    17b0:	009b      	lsls	r3, r3, #2
    17b2:	4c23      	ldr	r4, [pc, #140]	; (1840 <_usb_d_dev_ep_init+0x124>)
    17b4:	18e3      	adds	r3, r4, r3
    17b6:	895b      	ldrh	r3, [r3, #10]
    17b8:	4293      	cmp	r3, r2
    17ba:	daf0      	bge.n	179e <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    17bc:	2013      	movs	r0, #19
    17be:	4240      	negs	r0, r0
    17c0:	e7e4      	b.n	178c <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    17c2:	2014      	movs	r0, #20
    17c4:	4240      	negs	r0, r0
    17c6:	e7e1      	b.n	178c <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    17c8:	2014      	movs	r0, #20
    17ca:	4240      	negs	r0, r0
    17cc:	e7de      	b.n	178c <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    17ce:	2013      	movs	r0, #19
    17d0:	4240      	negs	r0, r0
    17d2:	e7db      	b.n	178c <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    17d4:	2303      	movs	r3, #3
    17d6:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    17d8:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    17da:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    17dc:	00ab      	lsls	r3, r5, #2
    17de:	195b      	adds	r3, r3, r5
    17e0:	009e      	lsls	r6, r3, #2
    17e2:	4b18      	ldr	r3, [pc, #96]	; (1844 <_usb_d_dev_ep_init+0x128>)
    17e4:	199b      	adds	r3, r3, r6
    17e6:	3346      	adds	r3, #70	; 0x46
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	2bff      	cmp	r3, #255	; 0xff
    17ec:	d1e9      	bne.n	17c2 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    17ee:	2900      	cmp	r1, #0
    17f0:	d1a8      	bne.n	1744 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17f2:	2c00      	cmp	r4, #0
    17f4:	d004      	beq.n	1800 <_usb_d_dev_ep_init+0xe4>
    17f6:	4663      	mov	r3, ip
    17f8:	2b00      	cmp	r3, #0
    17fa:	db01      	blt.n	1800 <_usb_d_dev_ep_init+0xe4>
    17fc:	3404      	adds	r4, #4
    17fe:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1800:	00a3      	lsls	r3, r4, #2
    1802:	191b      	adds	r3, r3, r4
    1804:	009b      	lsls	r3, r3, #2
    1806:	4c0f      	ldr	r4, [pc, #60]	; (1844 <_usb_d_dev_ep_init+0x128>)
    1808:	18e4      	adds	r4, r4, r3
    180a:	3446      	adds	r4, #70	; 0x46
    180c:	7823      	ldrb	r3, [r4, #0]
    180e:	2bff      	cmp	r3, #255	; 0xff
    1810:	d1da      	bne.n	17c8 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    1812:	007b      	lsls	r3, r7, #1
    1814:	19db      	adds	r3, r3, r7
    1816:	009b      	lsls	r3, r3, #2
    1818:	4c09      	ldr	r4, [pc, #36]	; (1840 <_usb_d_dev_ep_init+0x124>)
    181a:	591b      	ldr	r3, [r3, r4]
    181c:	2b00      	cmp	r3, #0
    181e:	d0d6      	beq.n	17ce <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1820:	4663      	mov	r3, ip
    1822:	2b00      	cmp	r3, #0
    1824:	dbb3      	blt.n	178e <_usb_d_dev_ep_init+0x72>
    1826:	007b      	lsls	r3, r7, #1
    1828:	19db      	adds	r3, r3, r7
    182a:	009b      	lsls	r3, r3, #2
    182c:	4c04      	ldr	r4, [pc, #16]	; (1840 <_usb_d_dev_ep_init+0x124>)
    182e:	18e3      	adds	r3, r4, r3
    1830:	891b      	ldrh	r3, [r3, #8]
    1832:	4293      	cmp	r3, r2
    1834:	db00      	blt.n	1838 <_usb_d_dev_ep_init+0x11c>
    1836:	e78f      	b.n	1758 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1838:	2013      	movs	r0, #19
    183a:	4240      	negs	r0, r0
    183c:	e7a6      	b.n	178c <_usb_d_dev_ep_init+0x70>
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	00002eb4 	.word	0x00002eb4
    1844:	20000184 	.word	0x20000184

00001848 <_usb_d_dev_ep_deinit>:
{
    1848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    184a:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    184c:	240f      	movs	r4, #15
    184e:	4004      	ands	r4, r0
    1850:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1852:	2c00      	cmp	r4, #0
    1854:	d010      	beq.n	1878 <_usb_d_dev_ep_deinit+0x30>
    1856:	0020      	movs	r0, r4
    1858:	2f00      	cmp	r7, #0
    185a:	db02      	blt.n	1862 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    185c:	2c04      	cmp	r4, #4
    185e:	d902      	bls.n	1866 <_usb_d_dev_ep_deinit+0x1e>
}
    1860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1862:	1d20      	adds	r0, r4, #4
    1864:	e7fa      	b.n	185c <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    1866:	0006      	movs	r6, r0
    1868:	3001      	adds	r0, #1
    186a:	0083      	lsls	r3, r0, #2
    186c:	1818      	adds	r0, r3, r0
    186e:	0080      	lsls	r0, r0, #2
    1870:	4b25      	ldr	r3, [pc, #148]	; (1908 <_usb_d_dev_ep_deinit+0xc0>)
    1872:	3320      	adds	r3, #32
    1874:	1818      	adds	r0, r3, r0
    1876:	e002      	b.n	187e <_usb_d_dev_ep_deinit+0x36>
    1878:	4823      	ldr	r0, [pc, #140]	; (1908 <_usb_d_dev_ep_deinit+0xc0>)
    187a:	3034      	adds	r0, #52	; 0x34
    187c:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    187e:	00b3      	lsls	r3, r6, #2
    1880:	199b      	adds	r3, r3, r6
    1882:	009a      	lsls	r2, r3, #2
    1884:	4b20      	ldr	r3, [pc, #128]	; (1908 <_usb_d_dev_ep_deinit+0xc0>)
    1886:	189b      	adds	r3, r3, r2
    1888:	3346      	adds	r3, #70	; 0x46
    188a:	781b      	ldrb	r3, [r3, #0]
    188c:	2bff      	cmp	r3, #255	; 0xff
    188e:	d0e7      	beq.n	1860 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1890:	0ff9      	lsrs	r1, r7, #31
    1892:	2203      	movs	r2, #3
    1894:	4b1d      	ldr	r3, [pc, #116]	; (190c <_usb_d_dev_ep_deinit+0xc4>)
    1896:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1898:	00b3      	lsls	r3, r6, #2
    189a:	199b      	adds	r3, r3, r6
    189c:	009a      	lsls	r2, r3, #2
    189e:	4b1a      	ldr	r3, [pc, #104]	; (1908 <_usb_d_dev_ep_deinit+0xc0>)
    18a0:	189b      	adds	r3, r3, r2
    18a2:	3340      	adds	r3, #64	; 0x40
    18a4:	79da      	ldrb	r2, [r3, #7]
    18a6:	2307      	movs	r3, #7
    18a8:	4013      	ands	r3, r2
    18aa:	2b01      	cmp	r3, #1
    18ac:	d01b      	beq.n	18e6 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    18ae:	2f00      	cmp	r7, #0
    18b0:	db1f      	blt.n	18f2 <_usb_d_dev_ep_deinit+0xaa>
    18b2:	016d      	lsls	r5, r5, #5
    18b4:	4b16      	ldr	r3, [pc, #88]	; (1910 <_usb_d_dev_ep_deinit+0xc8>)
    18b6:	469c      	mov	ip, r3
    18b8:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    18ba:	2280      	movs	r2, #128	; 0x80
    18bc:	0052      	lsls	r2, r2, #1
    18be:	5cab      	ldrb	r3, [r5, r2]
    18c0:	2107      	movs	r1, #7
    18c2:	438b      	bics	r3, r1
    18c4:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    18c6:	4b10      	ldr	r3, [pc, #64]	; (1908 <_usb_d_dev_ep_deinit+0xc0>)
    18c8:	3320      	adds	r3, #32
    18ca:	00b1      	lsls	r1, r6, #2
    18cc:	198a      	adds	r2, r1, r6
    18ce:	0092      	lsls	r2, r2, #2
    18d0:	189a      	adds	r2, r3, r2
    18d2:	3227      	adds	r2, #39	; 0x27
    18d4:	2000      	movs	r0, #0
    18d6:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    18d8:	198e      	adds	r6, r1, r6
    18da:	00b6      	lsls	r6, r6, #2
    18dc:	199b      	adds	r3, r3, r6
    18de:	3326      	adds	r3, #38	; 0x26
    18e0:	22ff      	movs	r2, #255	; 0xff
    18e2:	701a      	strb	r2, [r3, #0]
    18e4:	e7bc      	b.n	1860 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    18e6:	3508      	adds	r5, #8
    18e8:	016d      	lsls	r5, r5, #5
    18ea:	2200      	movs	r2, #0
    18ec:	4b08      	ldr	r3, [pc, #32]	; (1910 <_usb_d_dev_ep_deinit+0xc8>)
    18ee:	54ea      	strb	r2, [r5, r3]
    18f0:	e7e9      	b.n	18c6 <_usb_d_dev_ep_deinit+0x7e>
    18f2:	0164      	lsls	r4, r4, #5
    18f4:	4b06      	ldr	r3, [pc, #24]	; (1910 <_usb_d_dev_ep_deinit+0xc8>)
    18f6:	469c      	mov	ip, r3
    18f8:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    18fa:	2280      	movs	r2, #128	; 0x80
    18fc:	0052      	lsls	r2, r2, #1
    18fe:	5ca3      	ldrb	r3, [r4, r2]
    1900:	2170      	movs	r1, #112	; 0x70
    1902:	438b      	bics	r3, r1
    1904:	54a3      	strb	r3, [r4, r2]
    1906:	e7de      	b.n	18c6 <_usb_d_dev_ep_deinit+0x7e>
    1908:	20000184 	.word	0x20000184
    190c:	00001039 	.word	0x00001039
    1910:	41005000 	.word	0x41005000

00001914 <_usb_d_dev_ep_enable>:
{
    1914:	b5f0      	push	{r4, r5, r6, r7, lr}
    1916:	46c6      	mov	lr, r8
    1918:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    191a:	220f      	movs	r2, #15
    191c:	4002      	ands	r2, r0
    191e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1920:	2a00      	cmp	r2, #0
    1922:	d100      	bne.n	1926 <_usb_d_dev_ep_enable+0x12>
    1924:	e092      	b.n	1a4c <_usb_d_dev_ep_enable+0x138>
    1926:	0013      	movs	r3, r2
    1928:	2800      	cmp	r0, #0
    192a:	db0b      	blt.n	1944 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    192c:	0011      	movs	r1, r2
    192e:	3208      	adds	r2, #8
    1930:	0152      	lsls	r2, r2, #5
    1932:	4cab      	ldr	r4, [pc, #684]	; (1be0 <_usb_d_dev_ep_enable+0x2cc>)
    1934:	5d15      	ldrb	r5, [r2, r4]
    1936:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1938:	2904      	cmp	r1, #4
    193a:	d800      	bhi.n	193e <_usb_d_dev_ep_enable+0x2a>
    193c:	e08d      	b.n	1a5a <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    193e:	2012      	movs	r0, #18
    1940:	4240      	negs	r0, r0
    1942:	e0e6      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1944:	1d13      	adds	r3, r2, #4
    1946:	e7f1      	b.n	192c <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1948:	2077      	movs	r0, #119	; 0x77
    194a:	4228      	tst	r0, r5
    194c:	d175      	bne.n	1a3a <_usb_d_dev_ep_enable+0x126>
    194e:	48a4      	ldr	r0, [pc, #656]	; (1be0 <_usb_d_dev_ep_enable+0x2cc>)
    1950:	4680      	mov	r8, r0
    1952:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1954:	3410      	adds	r4, #16
    1956:	2080      	movs	r0, #128	; 0x80
    1958:	0040      	lsls	r0, r0, #1
    195a:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    195c:	0098      	lsls	r0, r3, #2
    195e:	18c0      	adds	r0, r0, r3
    1960:	0084      	lsls	r4, r0, #2
    1962:	48a0      	ldr	r0, [pc, #640]	; (1be4 <_usb_d_dev_ep_enable+0x2d0>)
    1964:	1900      	adds	r0, r0, r4
    1966:	3044      	adds	r0, #68	; 0x44
    1968:	8800      	ldrh	r0, [r0, #0]
    196a:	0385      	lsls	r5, r0, #14
    196c:	4c9e      	ldr	r4, [pc, #632]	; (1be8 <_usb_d_dev_ep_enable+0x2d4>)
    196e:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1970:	2480      	movs	r4, #128	; 0x80
    1972:	00a4      	lsls	r4, r4, #2
    1974:	42a0      	cmp	r0, r4
    1976:	d900      	bls.n	197a <_usb_d_dev_ep_enable+0x66>
    1978:	e0ce      	b.n	1b18 <_usb_d_dev_ep_enable+0x204>
    197a:	3c01      	subs	r4, #1
    197c:	3cff      	subs	r4, #255	; 0xff
    197e:	42a0      	cmp	r0, r4
    1980:	d900      	bls.n	1984 <_usb_d_dev_ep_enable+0x70>
    1982:	e114      	b.n	1bae <_usb_d_dev_ep_enable+0x29a>
    1984:	2880      	cmp	r0, #128	; 0x80
    1986:	d900      	bls.n	198a <_usb_d_dev_ep_enable+0x76>
    1988:	e101      	b.n	1b8e <_usb_d_dev_ep_enable+0x27a>
    198a:	2840      	cmp	r0, #64	; 0x40
    198c:	d900      	bls.n	1990 <_usb_d_dev_ep_enable+0x7c>
    198e:	e116      	b.n	1bbe <_usb_d_dev_ep_enable+0x2aa>
    1990:	2820      	cmp	r0, #32
    1992:	d900      	bls.n	1996 <_usb_d_dev_ep_enable+0x82>
    1994:	e103      	b.n	1b9e <_usb_d_dev_ep_enable+0x28a>
    1996:	2810      	cmp	r0, #16
    1998:	d900      	bls.n	199c <_usb_d_dev_ep_enable+0x88>
    199a:	e118      	b.n	1bce <_usb_d_dev_ep_enable+0x2ba>
    199c:	3cf8      	subs	r4, #248	; 0xf8
    199e:	4284      	cmp	r4, r0
    19a0:	41a4      	sbcs	r4, r4
    19a2:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19a4:	0726      	lsls	r6, r4, #28
    19a6:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    19a8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19aa:	0485      	lsls	r5, r0, #18
    19ac:	0cad      	lsrs	r5, r5, #18
    19ae:	e0ba      	b.n	1b26 <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    19b0:	2070      	movs	r0, #112	; 0x70
    19b2:	4228      	tst	r0, r5
    19b4:	d144      	bne.n	1a40 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    19b6:	4c8b      	ldr	r4, [pc, #556]	; (1be4 <_usb_d_dev_ep_enable+0x2d0>)
    19b8:	009e      	lsls	r6, r3, #2
    19ba:	18f0      	adds	r0, r6, r3
    19bc:	0080      	lsls	r0, r0, #2
    19be:	1820      	adds	r0, r4, r0
    19c0:	3040      	adds	r0, #64	; 0x40
    19c2:	79c0      	ldrb	r0, [r0, #7]
    19c4:	0740      	lsls	r0, r0, #29
    19c6:	0e40      	lsrs	r0, r0, #25
    19c8:	4305      	orrs	r5, r0
    19ca:	4885      	ldr	r0, [pc, #532]	; (1be0 <_usb_d_dev_ep_enable+0x2cc>)
    19cc:	4684      	mov	ip, r0
    19ce:	4462      	add	r2, ip
    19d0:	2080      	movs	r0, #128	; 0x80
    19d2:	0040      	lsls	r0, r0, #1
    19d4:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19d6:	18f6      	adds	r6, r6, r3
    19d8:	00b6      	lsls	r6, r6, #2
    19da:	19a4      	adds	r4, r4, r6
    19dc:	3444      	adds	r4, #68	; 0x44
    19de:	8824      	ldrh	r4, [r4, #0]
    19e0:	04a5      	lsls	r5, r4, #18
    19e2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    19e4:	3001      	adds	r0, #1
    19e6:	30ff      	adds	r0, #255	; 0xff
    19e8:	2307      	movs	r3, #7
    19ea:	4284      	cmp	r4, r0
    19ec:	d814      	bhi.n	1a18 <_usb_d_dev_ep_enable+0x104>
    19ee:	3801      	subs	r0, #1
    19f0:	38ff      	subs	r0, #255	; 0xff
    19f2:	3b01      	subs	r3, #1
    19f4:	4284      	cmp	r4, r0
    19f6:	d80f      	bhi.n	1a18 <_usb_d_dev_ep_enable+0x104>
    19f8:	3b01      	subs	r3, #1
    19fa:	2c80      	cmp	r4, #128	; 0x80
    19fc:	d80c      	bhi.n	1a18 <_usb_d_dev_ep_enable+0x104>
    19fe:	3b01      	subs	r3, #1
    1a00:	2c40      	cmp	r4, #64	; 0x40
    1a02:	d809      	bhi.n	1a18 <_usb_d_dev_ep_enable+0x104>
    1a04:	3b01      	subs	r3, #1
    1a06:	2c20      	cmp	r4, #32
    1a08:	d806      	bhi.n	1a18 <_usb_d_dev_ep_enable+0x104>
    1a0a:	3b01      	subs	r3, #1
    1a0c:	2c10      	cmp	r4, #16
    1a0e:	d803      	bhi.n	1a18 <_usb_d_dev_ep_enable+0x104>
    1a10:	38f8      	subs	r0, #248	; 0xf8
    1a12:	42a0      	cmp	r0, r4
    1a14:	4180      	sbcs	r0, r0
    1a16:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a18:	071b      	lsls	r3, r3, #28
    1a1a:	432b      	orrs	r3, r5
    1a1c:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a1e:	2080      	movs	r0, #128	; 0x80
    1a20:	2382      	movs	r3, #130	; 0x82
    1a22:	005b      	lsls	r3, r3, #1
    1a24:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    1a26:	0149      	lsls	r1, r1, #5
    1a28:	4b70      	ldr	r3, [pc, #448]	; (1bec <_usb_d_dev_ep_enable+0x2d8>)
    1a2a:	1859      	adds	r1, r3, r1
    1a2c:	2300      	movs	r3, #0
    1a2e:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    1a30:	2000      	movs	r0, #0
    1a32:	e06e      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    1a34:	2012      	movs	r0, #18
    1a36:	4240      	negs	r0, r0
    1a38:	e06b      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    1a3a:	2014      	movs	r0, #20
    1a3c:	4240      	negs	r0, r0
    1a3e:	e068      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    1a40:	2014      	movs	r0, #20
    1a42:	4240      	negs	r0, r0
    1a44:	e065      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    1a46:	2014      	movs	r0, #20
    1a48:	4240      	negs	r0, r0
    1a4a:	e062      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1a4c:	2380      	movs	r3, #128	; 0x80
    1a4e:	005b      	lsls	r3, r3, #1
    1a50:	4a63      	ldr	r2, [pc, #396]	; (1be0 <_usb_d_dev_ep_enable+0x2cc>)
    1a52:	5cd5      	ldrb	r5, [r2, r3]
    1a54:	b2ed      	uxtb	r5, r5
    1a56:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    1a58:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1a5a:	009a      	lsls	r2, r3, #2
    1a5c:	18d2      	adds	r2, r2, r3
    1a5e:	0094      	lsls	r4, r2, #2
    1a60:	4a60      	ldr	r2, [pc, #384]	; (1be4 <_usb_d_dev_ep_enable+0x2d0>)
    1a62:	1912      	adds	r2, r2, r4
    1a64:	3246      	adds	r2, #70	; 0x46
    1a66:	7812      	ldrb	r2, [r2, #0]
    1a68:	4694      	mov	ip, r2
    1a6a:	2aff      	cmp	r2, #255	; 0xff
    1a6c:	d0e2      	beq.n	1a34 <_usb_d_dev_ep_enable+0x120>
    1a6e:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1a70:	4f5e      	ldr	r7, [pc, #376]	; (1bec <_usb_d_dev_ep_enable+0x2d8>)
    1a72:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1a74:	009c      	lsls	r4, r3, #2
    1a76:	18e4      	adds	r4, r4, r3
    1a78:	00a6      	lsls	r6, r4, #2
    1a7a:	4c5a      	ldr	r4, [pc, #360]	; (1be4 <_usb_d_dev_ep_enable+0x2d0>)
    1a7c:	19a4      	adds	r4, r4, r6
    1a7e:	3440      	adds	r4, #64	; 0x40
    1a80:	79e6      	ldrb	r6, [r4, #7]
    1a82:	2407      	movs	r4, #7
    1a84:	4034      	ands	r4, r6
    1a86:	2c01      	cmp	r4, #1
    1a88:	d100      	bne.n	1a8c <_usb_d_dev_ep_enable+0x178>
    1a8a:	e75d      	b.n	1948 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    1a8c:	2800      	cmp	r0, #0
    1a8e:	db8f      	blt.n	19b0 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1a90:	0768      	lsls	r0, r5, #29
    1a92:	d1d8      	bne.n	1a46 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1a94:	4c53      	ldr	r4, [pc, #332]	; (1be4 <_usb_d_dev_ep_enable+0x2d0>)
    1a96:	009e      	lsls	r6, r3, #2
    1a98:	18f0      	adds	r0, r6, r3
    1a9a:	0080      	lsls	r0, r0, #2
    1a9c:	1820      	adds	r0, r4, r0
    1a9e:	3040      	adds	r0, #64	; 0x40
    1aa0:	79c0      	ldrb	r0, [r0, #7]
    1aa2:	0740      	lsls	r0, r0, #29
    1aa4:	0f40      	lsrs	r0, r0, #29
    1aa6:	4305      	orrs	r5, r0
    1aa8:	484d      	ldr	r0, [pc, #308]	; (1be0 <_usb_d_dev_ep_enable+0x2cc>)
    1aaa:	4684      	mov	ip, r0
    1aac:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1aae:	2080      	movs	r0, #128	; 0x80
    1ab0:	0040      	lsls	r0, r0, #1
    1ab2:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ab4:	18f6      	adds	r6, r6, r3
    1ab6:	00b6      	lsls	r6, r6, #2
    1ab8:	19a4      	adds	r4, r4, r6
    1aba:	3444      	adds	r4, #68	; 0x44
    1abc:	8825      	ldrh	r5, [r4, #0]
    1abe:	03ab      	lsls	r3, r5, #14
    1ac0:	4c49      	ldr	r4, [pc, #292]	; (1be8 <_usb_d_dev_ep_enable+0x2d4>)
    1ac2:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ac4:	3001      	adds	r0, #1
    1ac6:	30ff      	adds	r0, #255	; 0xff
    1ac8:	2307      	movs	r3, #7
    1aca:	4285      	cmp	r5, r0
    1acc:	d814      	bhi.n	1af8 <_usb_d_dev_ep_enable+0x1e4>
    1ace:	3801      	subs	r0, #1
    1ad0:	38ff      	subs	r0, #255	; 0xff
    1ad2:	3b01      	subs	r3, #1
    1ad4:	4285      	cmp	r5, r0
    1ad6:	d80f      	bhi.n	1af8 <_usb_d_dev_ep_enable+0x1e4>
    1ad8:	3b01      	subs	r3, #1
    1ada:	2d80      	cmp	r5, #128	; 0x80
    1adc:	d80c      	bhi.n	1af8 <_usb_d_dev_ep_enable+0x1e4>
    1ade:	3b01      	subs	r3, #1
    1ae0:	2d40      	cmp	r5, #64	; 0x40
    1ae2:	d809      	bhi.n	1af8 <_usb_d_dev_ep_enable+0x1e4>
    1ae4:	3b01      	subs	r3, #1
    1ae6:	2d20      	cmp	r5, #32
    1ae8:	d806      	bhi.n	1af8 <_usb_d_dev_ep_enable+0x1e4>
    1aea:	3b01      	subs	r3, #1
    1aec:	2d10      	cmp	r5, #16
    1aee:	d803      	bhi.n	1af8 <_usb_d_dev_ep_enable+0x1e4>
    1af0:	38f8      	subs	r0, #248	; 0xf8
    1af2:	42a8      	cmp	r0, r5
    1af4:	4180      	sbcs	r0, r0
    1af6:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1af8:	071b      	lsls	r3, r3, #28
    1afa:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1afc:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1afe:	2040      	movs	r0, #64	; 0x40
    1b00:	2306      	movs	r3, #6
    1b02:	33ff      	adds	r3, #255	; 0xff
    1b04:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    1b06:	0149      	lsls	r1, r1, #5
    1b08:	4b38      	ldr	r3, [pc, #224]	; (1bec <_usb_d_dev_ep_enable+0x2d8>)
    1b0a:	1859      	adds	r1, r3, r1
    1b0c:	2300      	movs	r3, #0
    1b0e:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    1b10:	2000      	movs	r0, #0
}
    1b12:	bc04      	pop	{r2}
    1b14:	4690      	mov	r8, r2
    1b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b18:	24e0      	movs	r4, #224	; 0xe0
    1b1a:	05e4      	lsls	r4, r4, #23
    1b1c:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1b1e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b20:	0485      	lsls	r5, r0, #18
    1b22:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b24:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b26:	0724      	lsls	r4, r4, #28
    1b28:	432c      	orrs	r4, r5
    1b2a:	617c      	str	r4, [r7, #20]
    1b2c:	2406      	movs	r4, #6
    1b2e:	34ff      	adds	r4, #255	; 0xff
    1b30:	2540      	movs	r5, #64	; 0x40
    1b32:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b34:	2682      	movs	r6, #130	; 0x82
    1b36:	0076      	lsls	r6, r6, #1
    1b38:	2780      	movs	r7, #128	; 0x80
    1b3a:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    1b3c:	4f2b      	ldr	r7, [pc, #172]	; (1bec <_usb_d_dev_ep_enable+0x2d8>)
    1b3e:	0149      	lsls	r1, r1, #5
    1b40:	1879      	adds	r1, r7, r1
    1b42:	2200      	movs	r2, #0
    1b44:	728a      	strb	r2, [r1, #10]
    1b46:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b48:	210f      	movs	r1, #15
    1b4a:	4662      	mov	r2, ip
    1b4c:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b4e:	009a      	lsls	r2, r3, #2
    1b50:	18d2      	adds	r2, r2, r3
    1b52:	0092      	lsls	r2, r2, #2
    1b54:	4b23      	ldr	r3, [pc, #140]	; (1be4 <_usb_d_dev_ep_enable+0x2d0>)
    1b56:	189a      	adds	r2, r3, r2
    1b58:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    1b5a:	014b      	lsls	r3, r1, #5
    1b5c:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b5e:	18f9      	adds	r1, r7, r3
    1b60:	684a      	ldr	r2, [r1, #4]
    1b62:	0480      	lsls	r0, r0, #18
    1b64:	0907      	lsrs	r7, r0, #4
    1b66:	4822      	ldr	r0, [pc, #136]	; (1bf0 <_usb_d_dev_ep_enable+0x2dc>)
    1b68:	4010      	ands	r0, r2
    1b6a:	4338      	orrs	r0, r7
    1b6c:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b6e:	684a      	ldr	r2, [r1, #4]
    1b70:	0b92      	lsrs	r2, r2, #14
    1b72:	0392      	lsls	r2, r2, #14
    1b74:	604a      	str	r2, [r1, #4]
    1b76:	4a1a      	ldr	r2, [pc, #104]	; (1be0 <_usb_d_dev_ep_enable+0x2cc>)
    1b78:	189a      	adds	r2, r3, r2
    1b7a:	21b0      	movs	r1, #176	; 0xb0
    1b7c:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b7e:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b80:	4a1c      	ldr	r2, [pc, #112]	; (1bf4 <_usb_d_dev_ep_enable+0x2e0>)
    1b82:	4694      	mov	ip, r2
    1b84:	4463      	add	r3, ip
    1b86:	2210      	movs	r2, #16
    1b88:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    1b8a:	2000      	movs	r0, #0
    1b8c:	e7c1      	b.n	1b12 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b8e:	24a0      	movs	r4, #160	; 0xa0
    1b90:	05e4      	lsls	r4, r4, #23
    1b92:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1b94:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b96:	0485      	lsls	r5, r0, #18
    1b98:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b9a:	2405      	movs	r4, #5
    1b9c:	e7c3      	b.n	1b26 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b9e:	24c0      	movs	r4, #192	; 0xc0
    1ba0:	05a4      	lsls	r4, r4, #22
    1ba2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ba4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ba6:	0485      	lsls	r5, r0, #18
    1ba8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1baa:	2403      	movs	r4, #3
    1bac:	e7bb      	b.n	1b26 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bae:	24c0      	movs	r4, #192	; 0xc0
    1bb0:	05e4      	lsls	r4, r4, #23
    1bb2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1bb4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bb6:	0485      	lsls	r5, r0, #18
    1bb8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bba:	2406      	movs	r4, #6
    1bbc:	e7b3      	b.n	1b26 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bbe:	2480      	movs	r4, #128	; 0x80
    1bc0:	05e4      	lsls	r4, r4, #23
    1bc2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1bc4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bc6:	0485      	lsls	r5, r0, #18
    1bc8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bca:	2404      	movs	r4, #4
    1bcc:	e7ab      	b.n	1b26 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bce:	2480      	movs	r4, #128	; 0x80
    1bd0:	05a4      	lsls	r4, r4, #22
    1bd2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1bd4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bd6:	0485      	lsls	r5, r0, #18
    1bd8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bda:	2402      	movs	r4, #2
    1bdc:	e7a3      	b.n	1b26 <_usb_d_dev_ep_enable+0x212>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	41005000 	.word	0x41005000
    1be4:	20000184 	.word	0x20000184
    1be8:	0fffc000 	.word	0x0fffc000
    1bec:	20000104 	.word	0x20000104
    1bf0:	f0003fff 	.word	0xf0003fff
    1bf4:	41005109 	.word	0x41005109

00001bf8 <_usb_d_dev_ep_stall>:
{
    1bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1bfa:	230f      	movs	r3, #15
    1bfc:	4003      	ands	r3, r0
    1bfe:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1c00:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1c02:	2b00      	cmp	r3, #0
    1c04:	d009      	beq.n	1c1a <_usb_d_dev_ep_stall+0x22>
    1c06:	001a      	movs	r2, r3
    1c08:	2800      	cmp	r0, #0
    1c0a:	db04      	blt.n	1c16 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    1c0c:	2b04      	cmp	r3, #4
    1c0e:	d905      	bls.n	1c1c <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    1c10:	2012      	movs	r0, #18
    1c12:	4240      	negs	r0, r0
    1c14:	e019      	b.n	1c4a <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1c16:	1d1a      	adds	r2, r3, #4
    1c18:	e7f8      	b.n	1c0c <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    1c1a:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1c1c:	2901      	cmp	r1, #1
    1c1e:	d015      	beq.n	1c4c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1c20:	2900      	cmp	r1, #0
    1c22:	d036      	beq.n	1c92 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c24:	0093      	lsls	r3, r2, #2
    1c26:	189b      	adds	r3, r3, r2
    1c28:	009b      	lsls	r3, r3, #2
    1c2a:	4a47      	ldr	r2, [pc, #284]	; (1d48 <_usb_d_dev_ep_stall+0x150>)
    1c2c:	18d2      	adds	r2, r2, r3
    1c2e:	3246      	adds	r2, #70	; 0x46
    1c30:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1c32:	230f      	movs	r3, #15
    1c34:	4013      	ands	r3, r2
    1c36:	015b      	lsls	r3, r3, #5
    1c38:	4a44      	ldr	r2, [pc, #272]	; (1d4c <_usb_d_dev_ep_stall+0x154>)
    1c3a:	4694      	mov	ip, r2
    1c3c:	4463      	add	r3, ip
    1c3e:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c40:	2310      	movs	r3, #16
    1c42:	40a3      	lsls	r3, r4
    1c44:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    1c46:	1e43      	subs	r3, r0, #1
    1c48:	4198      	sbcs	r0, r3
}
    1c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c4c:	2510      	movs	r5, #16
    1c4e:	40a5      	lsls	r5, r4
    1c50:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c52:	493d      	ldr	r1, [pc, #244]	; (1d48 <_usb_d_dev_ep_stall+0x150>)
    1c54:	0090      	lsls	r0, r2, #2
    1c56:	1883      	adds	r3, r0, r2
    1c58:	009b      	lsls	r3, r3, #2
    1c5a:	18cb      	adds	r3, r1, r3
    1c5c:	3346      	adds	r3, #70	; 0x46
    1c5e:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c60:	230f      	movs	r3, #15
    1c62:	4033      	ands	r3, r6
    1c64:	015e      	lsls	r6, r3, #5
    1c66:	4f39      	ldr	r7, [pc, #228]	; (1d4c <_usb_d_dev_ep_stall+0x154>)
    1c68:	46bc      	mov	ip, r7
    1c6a:	4466      	add	r6, ip
    1c6c:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1c6e:	2520      	movs	r5, #32
    1c70:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1c72:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c74:	015b      	lsls	r3, r3, #5
    1c76:	4d36      	ldr	r5, [pc, #216]	; (1d50 <_usb_d_dev_ep_stall+0x158>)
    1c78:	46ac      	mov	ip, r5
    1c7a:	4463      	add	r3, ip
    1c7c:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    1c7e:	1882      	adds	r2, r0, r2
    1c80:	0092      	lsls	r2, r2, #2
    1c82:	188a      	adds	r2, r1, r2
    1c84:	3240      	adds	r2, #64	; 0x40
    1c86:	79d3      	ldrb	r3, [r2, #7]
    1c88:	2108      	movs	r1, #8
    1c8a:	430b      	orrs	r3, r1
    1c8c:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1c8e:	2000      	movs	r0, #0
    1c90:	e7db      	b.n	1c4a <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1c92:	0093      	lsls	r3, r2, #2
    1c94:	189b      	adds	r3, r3, r2
    1c96:	0099      	lsls	r1, r3, #2
    1c98:	4b2b      	ldr	r3, [pc, #172]	; (1d48 <_usb_d_dev_ep_stall+0x150>)
    1c9a:	185b      	adds	r3, r3, r1
    1c9c:	3346      	adds	r3, #70	; 0x46
    1c9e:	781b      	ldrb	r3, [r3, #0]
    1ca0:	210f      	movs	r1, #15
    1ca2:	400b      	ands	r3, r1
    1ca4:	015d      	lsls	r5, r3, #5
    1ca6:	492b      	ldr	r1, [pc, #172]	; (1d54 <_usb_d_dev_ep_stall+0x15c>)
    1ca8:	468c      	mov	ip, r1
    1caa:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1cac:	2183      	movs	r1, #131	; 0x83
    1cae:	0049      	lsls	r1, r1, #1
    1cb0:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1cb2:	39f6      	subs	r1, #246	; 0xf6
    1cb4:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1cb6:	2000      	movs	r0, #0
	if (!is_stalled) {
    1cb8:	420e      	tst	r6, r1
    1cba:	d0c6      	beq.n	1c4a <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1cbc:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cbe:	3005      	adds	r0, #5
    1cc0:	30ff      	adds	r0, #255	; 0xff
    1cc2:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1cc4:	2120      	movs	r1, #32
    1cc6:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1cc8:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cca:	015b      	lsls	r3, r3, #5
    1ccc:	4e22      	ldr	r6, [pc, #136]	; (1d58 <_usb_d_dev_ep_stall+0x160>)
    1cce:	46b4      	mov	ip, r6
    1cd0:	4463      	add	r3, ip
    1cd2:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1cd4:	2308      	movs	r3, #8
    1cd6:	33ff      	adds	r3, #255	; 0xff
    1cd8:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1cda:	420b      	tst	r3, r1
    1cdc:	d009      	beq.n	1cf2 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cde:	2308      	movs	r3, #8
    1ce0:	33ff      	adds	r3, #255	; 0xff
    1ce2:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1ce4:	3b07      	subs	r3, #7
    1ce6:	3bff      	subs	r3, #255	; 0xff
    1ce8:	40a3      	lsls	r3, r4
    1cea:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cec:	2182      	movs	r1, #130	; 0x82
    1cee:	0049      	lsls	r1, r1, #1
    1cf0:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1cf2:	0093      	lsls	r3, r2, #2
    1cf4:	189b      	adds	r3, r3, r2
    1cf6:	0099      	lsls	r1, r3, #2
    1cf8:	4b13      	ldr	r3, [pc, #76]	; (1d48 <_usb_d_dev_ep_stall+0x150>)
    1cfa:	185b      	adds	r3, r3, r1
    1cfc:	3340      	adds	r3, #64	; 0x40
    1cfe:	79d9      	ldrb	r1, [r3, #7]
    1d00:	2307      	movs	r3, #7
    1d02:	400b      	ands	r3, r1
    1d04:	2b01      	cmp	r3, #1
    1d06:	d00b      	beq.n	1d20 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    1d08:	0093      	lsls	r3, r2, #2
    1d0a:	189a      	adds	r2, r3, r2
    1d0c:	0092      	lsls	r2, r2, #2
    1d0e:	4b0e      	ldr	r3, [pc, #56]	; (1d48 <_usb_d_dev_ep_stall+0x150>)
    1d10:	189b      	adds	r3, r3, r2
    1d12:	3340      	adds	r3, #64	; 0x40
    1d14:	79da      	ldrb	r2, [r3, #7]
    1d16:	2108      	movs	r1, #8
    1d18:	438a      	bics	r2, r1
    1d1a:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1d1c:	2000      	movs	r0, #0
    1d1e:	e794      	b.n	1c4a <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1d20:	3306      	adds	r3, #6
    1d22:	33ff      	adds	r3, #255	; 0xff
    1d24:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1d26:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1d28:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1d2a:	4219      	tst	r1, r3
    1d2c:	d000      	beq.n	1d30 <_usb_d_dev_ep_stall+0x138>
    1d2e:	e78c      	b.n	1c4a <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1d30:	0093      	lsls	r3, r2, #2
    1d32:	189a      	adds	r2, r3, r2
    1d34:	0092      	lsls	r2, r2, #2
    1d36:	4b04      	ldr	r3, [pc, #16]	; (1d48 <_usb_d_dev_ep_stall+0x150>)
    1d38:	189b      	adds	r3, r3, r2
    1d3a:	3340      	adds	r3, #64	; 0x40
    1d3c:	79da      	ldrb	r2, [r3, #7]
    1d3e:	2108      	movs	r1, #8
    1d40:	438a      	bics	r2, r1
    1d42:	71da      	strb	r2, [r3, #7]
    1d44:	e781      	b.n	1c4a <_usb_d_dev_ep_stall+0x52>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	20000184 	.word	0x20000184
    1d4c:	41005100 	.word	0x41005100
    1d50:	41005109 	.word	0x41005109
    1d54:	41005000 	.word	0x41005000
    1d58:	41005108 	.word	0x41005108

00001d5c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1d5c:	b570      	push	{r4, r5, r6, lr}
    1d5e:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1d60:	230f      	movs	r3, #15
    1d62:	4018      	ands	r0, r3
    1d64:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1d66:	4b16      	ldr	r3, [pc, #88]	; (1dc0 <_usb_d_dev_ep_read_req+0x64>)
    1d68:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    1d6a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1d6c:	685b      	ldr	r3, [r3, #4]
    1d6e:	049b      	lsls	r3, r3, #18
    1d70:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1d72:	2804      	cmp	r0, #4
    1d74:	d81a      	bhi.n	1dac <_usb_d_dev_ep_read_req+0x50>
    1d76:	2d00      	cmp	r5, #0
    1d78:	d01b      	beq.n	1db2 <_usb_d_dev_ep_read_req+0x56>
    1d7a:	4b12      	ldr	r3, [pc, #72]	; (1dc4 <_usb_d_dev_ep_read_req+0x68>)
    1d7c:	469c      	mov	ip, r3
    1d7e:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d80:	2380      	movs	r3, #128	; 0x80
    1d82:	005b      	lsls	r3, r3, #1
    1d84:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1d86:	2b11      	cmp	r3, #17
    1d88:	d116      	bne.n	1db8 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1d8a:	2308      	movs	r3, #8
    1d8c:	33ff      	adds	r3, #255	; 0xff
    1d8e:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1d90:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1d92:	06db      	lsls	r3, r3, #27
    1d94:	d400      	bmi.n	1d98 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1d96:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    1d98:	2208      	movs	r2, #8
    1d9a:	0028      	movs	r0, r5
    1d9c:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <_usb_d_dev_ep_read_req+0x6c>)
    1d9e:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1da0:	2210      	movs	r2, #16
    1da2:	2308      	movs	r3, #8
    1da4:	33ff      	adds	r3, #255	; 0xff
    1da6:	54e2      	strb	r2, [r4, r3]
	return bytes;
    1da8:	0030      	movs	r0, r6
    1daa:	e7f4      	b.n	1d96 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    1dac:	2012      	movs	r0, #18
    1dae:	4240      	negs	r0, r0
    1db0:	e7f1      	b.n	1d96 <_usb_d_dev_ep_read_req+0x3a>
    1db2:	2012      	movs	r0, #18
    1db4:	4240      	negs	r0, r0
    1db6:	e7ee      	b.n	1d96 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    1db8:	2013      	movs	r0, #19
    1dba:	4240      	negs	r0, r0
    1dbc:	e7eb      	b.n	1d96 <_usb_d_dev_ep_read_req+0x3a>
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	20000104 	.word	0x20000104
    1dc4:	41005000 	.word	0x41005000
    1dc8:	00002e35 	.word	0x00002e35

00001dcc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dce:	46de      	mov	lr, fp
    1dd0:	4657      	mov	r7, sl
    1dd2:	464e      	mov	r6, r9
    1dd4:	4645      	mov	r5, r8
    1dd6:	b5e0      	push	{r5, r6, r7, lr}
    1dd8:	b085      	sub	sp, #20
    1dda:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1ddc:	7a05      	ldrb	r5, [r0, #8]
    1dde:	230f      	movs	r3, #15
    1de0:	402b      	ands	r3, r5
    1de2:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1de4:	2b00      	cmp	r3, #0
    1de6:	d100      	bne.n	1dea <_usb_d_dev_ep_trans+0x1e>
    1de8:	e0d0      	b.n	1f8c <_usb_d_dev_ep_trans+0x1c0>
    1dea:	001e      	movs	r6, r3
    1dec:	2d00      	cmp	r5, #0
    1dee:	db39      	blt.n	1e64 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    1df0:	0034      	movs	r4, r6
    1df2:	4a72      	ldr	r2, [pc, #456]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1df4:	2120      	movs	r1, #32
    1df6:	4688      	mov	r8, r1
    1df8:	4490      	add	r8, r2
    1dfa:	1c71      	adds	r1, r6, #1
    1dfc:	0088      	lsls	r0, r1, #2
    1dfe:	1840      	adds	r0, r0, r1
    1e00:	0080      	lsls	r0, r0, #2
    1e02:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e04:	00b1      	lsls	r1, r6, #2
    1e06:	1989      	adds	r1, r1, r6
    1e08:	0089      	lsls	r1, r1, #2
    1e0a:	1852      	adds	r2, r2, r1
    1e0c:	3244      	adds	r2, #68	; 0x44
    1e0e:	8812      	ldrh	r2, [r2, #0]
    1e10:	496b      	ldr	r1, [pc, #428]	; (1fc0 <_usb_d_dev_ep_trans+0x1f4>)
    1e12:	428a      	cmp	r2, r1
    1e14:	d028      	beq.n	1e68 <_usb_d_dev_ep_trans+0x9c>
    1e16:	1e56      	subs	r6, r2, #1
    1e18:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    1e1a:	6879      	ldr	r1, [r7, #4]
    1e1c:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1e1e:	2b04      	cmp	r3, #4
    1e20:	d900      	bls.n	1e24 <_usb_d_dev_ep_trans+0x58>
    1e22:	e09e      	b.n	1f62 <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1e24:	683b      	ldr	r3, [r7, #0]
    1e26:	4867      	ldr	r0, [pc, #412]	; (1fc4 <_usb_d_dev_ep_trans+0x1f8>)
    1e28:	4283      	cmp	r3, r0
    1e2a:	d91f      	bls.n	1e6c <_usb_d_dev_ep_trans+0xa0>
    1e2c:	1858      	adds	r0, r3, r1
    1e2e:	9001      	str	r0, [sp, #4]
    1e30:	4865      	ldr	r0, [pc, #404]	; (1fc8 <_usb_d_dev_ep_trans+0x1fc>)
    1e32:	4684      	mov	ip, r0
    1e34:	9801      	ldr	r0, [sp, #4]
    1e36:	4560      	cmp	r0, ip
    1e38:	d818      	bhi.n	1e6c <_usb_d_dev_ep_trans+0xa0>
    1e3a:	079b      	lsls	r3, r3, #30
    1e3c:	d116      	bne.n	1e6c <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1e3e:	2d00      	cmp	r5, #0
    1e40:	db30      	blt.n	1ea4 <_usb_d_dev_ep_trans+0xd8>
    1e42:	428a      	cmp	r2, r1
    1e44:	d900      	bls.n	1e48 <_usb_d_dev_ep_trans+0x7c>
    1e46:	e0ad      	b.n	1fa4 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1e48:	2e00      	cmp	r6, #0
    1e4a:	d02e      	beq.n	1eaa <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    1e4c:	00a3      	lsls	r3, r4, #2
    1e4e:	191b      	adds	r3, r3, r4
    1e50:	009b      	lsls	r3, r3, #2
    1e52:	4a5a      	ldr	r2, [pc, #360]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1e54:	18d3      	adds	r3, r2, r3
    1e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d100      	bne.n	1e5e <_usb_d_dev_ep_trans+0x92>
    1e5c:	e087      	b.n	1f6e <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    1e5e:	2300      	movs	r3, #0
    1e60:	4699      	mov	r9, r3
    1e62:	e00e      	b.n	1e82 <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e64:	1d1e      	adds	r6, r3, #4
    1e66:	e7c3      	b.n	1df0 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e68:	0016      	movs	r6, r2
    1e6a:	e7d6      	b.n	1e1a <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    1e6c:	00a3      	lsls	r3, r4, #2
    1e6e:	191b      	adds	r3, r3, r4
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	4a52      	ldr	r2, [pc, #328]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1e74:	18d3      	adds	r3, r2, r3
    1e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d100      	bne.n	1e7e <_usb_d_dev_ep_trans+0xb2>
    1e7c:	e074      	b.n	1f68 <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    1e7e:	2301      	movs	r3, #1
    1e80:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1e82:	00a3      	lsls	r3, r4, #2
    1e84:	191b      	adds	r3, r3, r4
    1e86:	009a      	lsls	r2, r3, #2
    1e88:	4b4c      	ldr	r3, [pc, #304]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1e8a:	189b      	adds	r3, r3, r2
    1e8c:	3340      	adds	r3, #64	; 0x40
    1e8e:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    1e90:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1e92:	071b      	lsls	r3, r3, #28
    1e94:	d50c      	bpl.n	1eb0 <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1e96:	b005      	add	sp, #20
    1e98:	bc3c      	pop	{r2, r3, r4, r5}
    1e9a:	4690      	mov	r8, r2
    1e9c:	4699      	mov	r9, r3
    1e9e:	46a2      	mov	sl, r4
    1ea0:	46ab      	mov	fp, r5
    1ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    1ea4:	2300      	movs	r3, #0
    1ea6:	4699      	mov	r9, r3
    1ea8:	e7eb      	b.n	1e82 <_usb_d_dev_ep_trans+0xb6>
    1eaa:	2300      	movs	r3, #0
    1eac:	4699      	mov	r9, r3
    1eae:	e7e8      	b.n	1e82 <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    1eb0:	a803      	add	r0, sp, #12
    1eb2:	4b46      	ldr	r3, [pc, #280]	; (1fcc <_usb_d_dev_ep_trans+0x200>)
    1eb4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1eb6:	00a3      	lsls	r3, r4, #2
    1eb8:	191b      	adds	r3, r3, r4
    1eba:	009a      	lsls	r2, r3, #2
    1ebc:	4b3f      	ldr	r3, [pc, #252]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1ebe:	189b      	adds	r3, r3, r2
    1ec0:	3340      	adds	r3, #64	; 0x40
    1ec2:	79db      	ldrb	r3, [r3, #7]
    1ec4:	065b      	lsls	r3, r3, #25
    1ec6:	d441      	bmi.n	1f4c <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    1ec8:	00a3      	lsls	r3, r4, #2
    1eca:	191b      	adds	r3, r3, r4
    1ecc:	009b      	lsls	r3, r3, #2
    1ece:	4a3b      	ldr	r2, [pc, #236]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1ed0:	4693      	mov	fp, r2
    1ed2:	449b      	add	fp, r3
    1ed4:	2340      	movs	r3, #64	; 0x40
    1ed6:	445b      	add	r3, fp
    1ed8:	469a      	mov	sl, r3
    1eda:	79db      	ldrb	r3, [r3, #7]
    1edc:	2240      	movs	r2, #64	; 0x40
    1ede:	4313      	orrs	r3, r2
    1ee0:	4652      	mov	r2, sl
    1ee2:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1ee4:	a803      	add	r0, sp, #12
    1ee6:	4b3a      	ldr	r3, [pc, #232]	; (1fd0 <_usb_d_dev_ep_trans+0x204>)
    1ee8:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1eea:	465b      	mov	r3, fp
    1eec:	683a      	ldr	r2, [r7, #0]
    1eee:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    1ef0:	687a      	ldr	r2, [r7, #4]
    1ef2:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    1ef4:	2300      	movs	r3, #0
    1ef6:	465a      	mov	r2, fp
    1ef8:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1efa:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    1efc:	01d2      	lsls	r2, r2, #7
    1efe:	4653      	mov	r3, sl
    1f00:	79d9      	ldrb	r1, [r3, #7]
    1f02:	237f      	movs	r3, #127	; 0x7f
    1f04:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1f06:	4649      	mov	r1, r9
    1f08:	0149      	lsls	r1, r1, #5
    1f0a:	4313      	orrs	r3, r2
    1f0c:	2220      	movs	r2, #32
    1f0e:	4393      	bics	r3, r2
    1f10:	430b      	orrs	r3, r1
    1f12:	4652      	mov	r2, sl
    1f14:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1f16:	7a7b      	ldrb	r3, [r7, #9]
    1f18:	2200      	movs	r2, #0
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d002      	beq.n	1f24 <_usb_d_dev_ep_trans+0x158>
    1f1e:	4272      	negs	r2, r6
    1f20:	4172      	adcs	r2, r6
    1f22:	b2d2      	uxtb	r2, r2
    1f24:	00a3      	lsls	r3, r4, #2
    1f26:	191c      	adds	r4, r3, r4
    1f28:	00a4      	lsls	r4, r4, #2
    1f2a:	4b24      	ldr	r3, [pc, #144]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1f2c:	191b      	adds	r3, r3, r4
    1f2e:	3340      	adds	r3, #64	; 0x40
    1f30:	0112      	lsls	r2, r2, #4
    1f32:	79de      	ldrb	r6, [r3, #7]
    1f34:	2110      	movs	r1, #16
    1f36:	438e      	bics	r6, r1
    1f38:	4316      	orrs	r6, r2
    1f3a:	71de      	strb	r6, [r3, #7]
	if (dir) {
    1f3c:	2d00      	cmp	r5, #0
    1f3e:	db0a      	blt.n	1f56 <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    1f40:	2100      	movs	r1, #0
    1f42:	4640      	mov	r0, r8
    1f44:	4b23      	ldr	r3, [pc, #140]	; (1fd4 <_usb_d_dev_ep_trans+0x208>)
    1f46:	4798      	blx	r3
	return ERR_NONE;
    1f48:	2000      	movs	r0, #0
    1f4a:	e7a4      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    1f4c:	a803      	add	r0, sp, #12
    1f4e:	4b20      	ldr	r3, [pc, #128]	; (1fd0 <_usb_d_dev_ep_trans+0x204>)
    1f50:	4798      	blx	r3
		return USB_BUSY;
    1f52:	2001      	movs	r0, #1
    1f54:	e79f      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    1f56:	2100      	movs	r1, #0
    1f58:	4640      	mov	r0, r8
    1f5a:	4b1f      	ldr	r3, [pc, #124]	; (1fd8 <_usb_d_dev_ep_trans+0x20c>)
    1f5c:	4798      	blx	r3
	return ERR_NONE;
    1f5e:	2000      	movs	r0, #0
    1f60:	e799      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    1f62:	2012      	movs	r0, #18
    1f64:	4240      	negs	r0, r0
    1f66:	e796      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    1f68:	2013      	movs	r0, #19
    1f6a:	4240      	negs	r0, r0
    1f6c:	e793      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    1f6e:	2012      	movs	r0, #18
    1f70:	4240      	negs	r0, r0
    1f72:	e790      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    1f74:	2013      	movs	r0, #19
    1f76:	4240      	negs	r0, r0
    1f78:	e78d      	b.n	1e96 <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    1f7a:	6879      	ldr	r1, [r7, #4]
    1f7c:	058e      	lsls	r6, r1, #22
    1f7e:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    1f80:	4b0e      	ldr	r3, [pc, #56]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1f82:	2034      	movs	r0, #52	; 0x34
    1f84:	4680      	mov	r8, r0
    1f86:	4498      	add	r8, r3
    1f88:	2400      	movs	r4, #0
    1f8a:	e74b      	b.n	1e24 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f8c:	2244      	movs	r2, #68	; 0x44
    1f8e:	490b      	ldr	r1, [pc, #44]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1f90:	5a8a      	ldrh	r2, [r1, r2]
    1f92:	490b      	ldr	r1, [pc, #44]	; (1fc0 <_usb_d_dev_ep_trans+0x1f4>)
    1f94:	428a      	cmp	r2, r1
    1f96:	d0f0      	beq.n	1f7a <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    1f98:	4908      	ldr	r1, [pc, #32]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1f9a:	2034      	movs	r0, #52	; 0x34
    1f9c:	4680      	mov	r8, r0
    1f9e:	4488      	add	r8, r1
    1fa0:	2400      	movs	r4, #0
    1fa2:	e738      	b.n	1e16 <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    1fa4:	00a3      	lsls	r3, r4, #2
    1fa6:	191b      	adds	r3, r3, r4
    1fa8:	009b      	lsls	r3, r3, #2
    1faa:	4a04      	ldr	r2, [pc, #16]	; (1fbc <_usb_d_dev_ep_trans+0x1f0>)
    1fac:	18d3      	adds	r3, r2, r3
    1fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d0df      	beq.n	1f74 <_usb_d_dev_ep_trans+0x1a8>
    1fb4:	2301      	movs	r3, #1
    1fb6:	4699      	mov	r9, r3
    1fb8:	e763      	b.n	1e82 <_usb_d_dev_ep_trans+0xb6>
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	20000184 	.word	0x20000184
    1fc0:	000003ff 	.word	0x000003ff
    1fc4:	1fffffff 	.word	0x1fffffff
    1fc8:	20007fff 	.word	0x20007fff
    1fcc:	00000475 	.word	0x00000475
    1fd0:	00000483 	.word	0x00000483
    1fd4:	00001399 	.word	0x00001399
    1fd8:	000011ed 	.word	0x000011ed

00001fdc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1fdc:	1e0b      	subs	r3, r1, #0
    1fde:	d006      	beq.n	1fee <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    1fe0:	2801      	cmp	r0, #1
    1fe2:	d006      	beq.n	1ff2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1fe4:	2800      	cmp	r0, #0
    1fe6:	d101      	bne.n	1fec <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1fe8:	4a03      	ldr	r2, [pc, #12]	; (1ff8 <_usb_d_dev_register_callback+0x1c>)
    1fea:	6213      	str	r3, [r2, #32]
	}
}
    1fec:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1fee:	4b03      	ldr	r3, [pc, #12]	; (1ffc <_usb_d_dev_register_callback+0x20>)
    1ff0:	e7f6      	b.n	1fe0 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1ff2:	4a01      	ldr	r2, [pc, #4]	; (1ff8 <_usb_d_dev_register_callback+0x1c>)
    1ff4:	6253      	str	r3, [r2, #36]	; 0x24
    1ff6:	e7f9      	b.n	1fec <_usb_d_dev_register_callback+0x10>
    1ff8:	20000184 	.word	0x20000184
    1ffc:	00000f49 	.word	0x00000f49

00002000 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2000:	1e0b      	subs	r3, r1, #0
    2002:	d008      	beq.n	2016 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2004:	2800      	cmp	r0, #0
    2006:	d008      	beq.n	201a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2008:	2801      	cmp	r0, #1
    200a:	d009      	beq.n	2020 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    200c:	2802      	cmp	r0, #2
    200e:	d106      	bne.n	201e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2010:	4a05      	ldr	r2, [pc, #20]	; (2028 <_usb_d_dev_register_ep_callback+0x28>)
    2012:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    2014:	e003      	b.n	201e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2016:	4b05      	ldr	r3, [pc, #20]	; (202c <_usb_d_dev_register_ep_callback+0x2c>)
    2018:	e7f4      	b.n	2004 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    201a:	4a03      	ldr	r2, [pc, #12]	; (2028 <_usb_d_dev_register_ep_callback+0x28>)
    201c:	6293      	str	r3, [r2, #40]	; 0x28
}
    201e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2020:	4a01      	ldr	r2, [pc, #4]	; (2028 <_usb_d_dev_register_ep_callback+0x28>)
    2022:	62d3      	str	r3, [r2, #44]	; 0x2c
    2024:	e7fb      	b.n	201e <_usb_d_dev_register_ep_callback+0x1e>
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	20000184 	.word	0x20000184
    202c:	00000f49 	.word	0x00000f49

00002030 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2032:	4b8b      	ldr	r3, [pc, #556]	; (2260 <USB_Handler+0x230>)
    2034:	8c1e      	ldrh	r6, [r3, #32]
    2036:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2038:	2e00      	cmp	r6, #0
    203a:	d003      	beq.n	2044 <USB_Handler+0x14>
    203c:	4c89      	ldr	r4, [pc, #548]	; (2264 <USB_Handler+0x234>)
    203e:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    2040:	2500      	movs	r5, #0
    2042:	e0ca      	b.n	21da <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2044:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2046:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2048:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    204a:	075a      	lsls	r2, r3, #29
    204c:	d418      	bmi.n	2080 <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    204e:	059a      	lsls	r2, r3, #22
    2050:	d41d      	bmi.n	208e <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2052:	061a      	lsls	r2, r3, #24
    2054:	d44f      	bmi.n	20f6 <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2056:	2270      	movs	r2, #112	; 0x70
    2058:	421a      	tst	r2, r3
    205a:	d155      	bne.n	2108 <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    205c:	071a      	lsls	r2, r3, #28
    205e:	d500      	bpl.n	2062 <USB_Handler+0x32>
    2060:	e06e      	b.n	2140 <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2062:	07db      	lsls	r3, r3, #31
    2064:	d5ea      	bpl.n	203c <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2066:	4b7e      	ldr	r3, [pc, #504]	; (2260 <USB_Handler+0x230>)
    2068:	4a7f      	ldr	r2, [pc, #508]	; (2268 <USB_Handler+0x238>)
    206a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    206c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    206e:	3a92      	subs	r2, #146	; 0x92
    2070:	3aff      	subs	r2, #255	; 0xff
    2072:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2074:	4b7b      	ldr	r3, [pc, #492]	; (2264 <USB_Handler+0x234>)
    2076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2078:	2100      	movs	r1, #0
    207a:	2004      	movs	r0, #4
    207c:	4798      	blx	r3
    207e:	e005      	b.n	208c <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2080:	2204      	movs	r2, #4
    2082:	4b77      	ldr	r3, [pc, #476]	; (2260 <USB_Handler+0x230>)
    2084:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2086:	4b77      	ldr	r3, [pc, #476]	; (2264 <USB_Handler+0x234>)
    2088:	6a1b      	ldr	r3, [r3, #32]
    208a:	4798      	blx	r3

	_usb_d_dev_handler();
}
    208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    208e:	4b74      	ldr	r3, [pc, #464]	; (2260 <USB_Handler+0x230>)
    2090:	4a75      	ldr	r2, [pc, #468]	; (2268 <USB_Handler+0x238>)
    2092:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2094:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2096:	3a92      	subs	r2, #146	; 0x92
    2098:	3aff      	subs	r2, #255	; 0xff
    209a:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    209c:	4b73      	ldr	r3, [pc, #460]	; (226c <USB_Handler+0x23c>)
    209e:	891b      	ldrh	r3, [r3, #8]
    20a0:	071b      	lsls	r3, r3, #28
    20a2:	0f1b      	lsrs	r3, r3, #28
    20a4:	2b03      	cmp	r3, #3
    20a6:	d024      	beq.n	20f2 <USB_Handler+0xc2>
    20a8:	4b70      	ldr	r3, [pc, #448]	; (226c <USB_Handler+0x23c>)
    20aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    20ac:	071b      	lsls	r3, r3, #28
    20ae:	0f1b      	lsrs	r3, r3, #28
    20b0:	2b03      	cmp	r3, #3
    20b2:	d012      	beq.n	20da <USB_Handler+0xaa>
    20b4:	2348      	movs	r3, #72	; 0x48
    20b6:	4a6d      	ldr	r2, [pc, #436]	; (226c <USB_Handler+0x23c>)
    20b8:	5ad3      	ldrh	r3, [r2, r3]
    20ba:	071b      	lsls	r3, r3, #28
    20bc:	0f1b      	lsrs	r3, r3, #28
    20be:	2b03      	cmp	r3, #3
    20c0:	d015      	beq.n	20ee <USB_Handler+0xbe>
    20c2:	2368      	movs	r3, #104	; 0x68
    20c4:	5ad3      	ldrh	r3, [r2, r3]
    20c6:	071b      	lsls	r3, r3, #28
    20c8:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    20ca:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    20cc:	2b03      	cmp	r3, #3
    20ce:	d005      	beq.n	20dc <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    20d0:	4b64      	ldr	r3, [pc, #400]	; (2264 <USB_Handler+0x234>)
    20d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20d4:	2003      	movs	r0, #3
    20d6:	4798      	blx	r3
    20d8:	e7d8      	b.n	208c <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    20da:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    20dc:	015b      	lsls	r3, r3, #5
    20de:	4a63      	ldr	r2, [pc, #396]	; (226c <USB_Handler+0x23c>)
    20e0:	18d3      	adds	r3, r2, r3
    20e2:	8919      	ldrh	r1, [r3, #8]
    20e4:	0449      	lsls	r1, r1, #17
    20e6:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    20e8:	2200      	movs	r2, #0
    20ea:	811a      	strh	r2, [r3, #8]
    20ec:	e7f0      	b.n	20d0 <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    20ee:	2302      	movs	r3, #2
    20f0:	e7f4      	b.n	20dc <USB_Handler+0xac>
    20f2:	2300      	movs	r3, #0
    20f4:	e7f2      	b.n	20dc <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    20f6:	2280      	movs	r2, #128	; 0x80
    20f8:	4b59      	ldr	r3, [pc, #356]	; (2260 <USB_Handler+0x230>)
    20fa:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    20fc:	4b59      	ldr	r3, [pc, #356]	; (2264 <USB_Handler+0x234>)
    20fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2100:	2100      	movs	r1, #0
    2102:	2005      	movs	r0, #5
    2104:	4798      	blx	r3
    2106:	e7c1      	b.n	208c <USB_Handler+0x5c>
    2108:	4b55      	ldr	r3, [pc, #340]	; (2260 <USB_Handler+0x230>)
    210a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    210c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    210e:	4a56      	ldr	r2, [pc, #344]	; (2268 <USB_Handler+0x238>)
    2110:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2112:	4b57      	ldr	r3, [pc, #348]	; (2270 <USB_Handler+0x240>)
    2114:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2116:	069b      	lsls	r3, r3, #26
    2118:	d40c      	bmi.n	2134 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    211a:	4955      	ldr	r1, [pc, #340]	; (2270 <USB_Handler+0x240>)
	tmp &= mask;
    211c:	3a32      	subs	r2, #50	; 0x32
    211e:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2120:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2122:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2124:	2bd0      	cmp	r3, #208	; 0xd0
    2126:	d1fb      	bne.n	2120 <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2128:	4b4e      	ldr	r3, [pc, #312]	; (2264 <USB_Handler+0x234>)
    212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    212c:	2100      	movs	r1, #0
    212e:	2002      	movs	r0, #2
    2130:	4798      	blx	r3
    2132:	e7ab      	b.n	208c <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2134:	494e      	ldr	r1, [pc, #312]	; (2270 <USB_Handler+0x240>)
	tmp &= mask;
    2136:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2138:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    213a:	421a      	tst	r2, r3
    213c:	d0fc      	beq.n	2138 <USB_Handler+0x108>
    213e:	e7f3      	b.n	2128 <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2140:	4b47      	ldr	r3, [pc, #284]	; (2260 <USB_Handler+0x230>)
    2142:	2100      	movs	r1, #0
    2144:	2280      	movs	r2, #128	; 0x80
    2146:	0052      	lsls	r2, r2, #1
    2148:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    214a:	3af8      	subs	r2, #248	; 0xf8
    214c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    214e:	3268      	adds	r2, #104	; 0x68
    2150:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2152:	4a45      	ldr	r2, [pc, #276]	; (2268 <USB_Handler+0x238>)
    2154:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2156:	4b47      	ldr	r3, [pc, #284]	; (2274 <USB_Handler+0x244>)
    2158:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    215a:	4b42      	ldr	r3, [pc, #264]	; (2264 <USB_Handler+0x234>)
    215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    215e:	2100      	movs	r1, #0
    2160:	2001      	movs	r0, #1
    2162:	4798      	blx	r3
    2164:	e792      	b.n	208c <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2166:	06cb      	lsls	r3, r1, #27
    2168:	d407      	bmi.n	217a <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    216a:	064b      	lsls	r3, r1, #25
    216c:	d408      	bmi.n	2180 <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    216e:	068b      	lsls	r3, r1, #26
    2170:	d52e      	bpl.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    2172:	2100      	movs	r1, #0
    2174:	4b40      	ldr	r3, [pc, #256]	; (2278 <USB_Handler+0x248>)
    2176:	4798      	blx	r3
    2178:	e02a      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    217a:	4b40      	ldr	r3, [pc, #256]	; (227c <USB_Handler+0x24c>)
    217c:	4798      	blx	r3
    217e:	e027      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    2180:	2101      	movs	r1, #1
    2182:	4b3d      	ldr	r3, [pc, #244]	; (2278 <USB_Handler+0x248>)
    2184:	4798      	blx	r3
    2186:	e023      	b.n	21d0 <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2188:	064b      	lsls	r3, r1, #25
    218a:	d40e      	bmi.n	21aa <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    218c:	070b      	lsls	r3, r1, #28
    218e:	d410      	bmi.n	21b2 <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2190:	078b      	lsls	r3, r1, #30
    2192:	d412      	bmi.n	21ba <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2194:	2307      	movs	r3, #7
    2196:	401a      	ands	r2, r3
    2198:	2a01      	cmp	r2, #1
    219a:	d119      	bne.n	21d0 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    219c:	074b      	lsls	r3, r1, #29
    219e:	d410      	bmi.n	21c2 <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    21a0:	06cb      	lsls	r3, r1, #27
    21a2:	d515      	bpl.n	21d0 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    21a4:	4b35      	ldr	r3, [pc, #212]	; (227c <USB_Handler+0x24c>)
    21a6:	4798      	blx	r3
    21a8:	e012      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    21aa:	2101      	movs	r1, #1
    21ac:	4b32      	ldr	r3, [pc, #200]	; (2278 <USB_Handler+0x248>)
    21ae:	4798      	blx	r3
    21b0:	e00e      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    21b2:	2101      	movs	r1, #1
    21b4:	4b32      	ldr	r3, [pc, #200]	; (2280 <USB_Handler+0x250>)
    21b6:	4798      	blx	r3
    21b8:	e00a      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    21ba:	2101      	movs	r1, #1
    21bc:	4b31      	ldr	r3, [pc, #196]	; (2284 <USB_Handler+0x254>)
    21be:	4798      	blx	r3
    21c0:	e006      	b.n	21d0 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    21c2:	2100      	movs	r1, #0
    21c4:	4b2e      	ldr	r3, [pc, #184]	; (2280 <USB_Handler+0x250>)
    21c6:	4798      	blx	r3
    21c8:	e002      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    21ca:	2100      	movs	r1, #0
    21cc:	4b2a      	ldr	r3, [pc, #168]	; (2278 <USB_Handler+0x248>)
    21ce:	4798      	blx	r3
    21d0:	3501      	adds	r5, #1
    21d2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    21d4:	2d09      	cmp	r5, #9
    21d6:	d100      	bne.n	21da <USB_Handler+0x1aa>
    21d8:	e758      	b.n	208c <USB_Handler+0x5c>
    21da:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    21dc:	7ca1      	ldrb	r1, [r4, #18]
    21de:	29ff      	cmp	r1, #255	; 0xff
    21e0:	d0f6      	beq.n	21d0 <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    21e2:	230f      	movs	r3, #15
    21e4:	400b      	ands	r3, r1
    21e6:	2101      	movs	r1, #1
    21e8:	4099      	lsls	r1, r3
    21ea:	420e      	tst	r6, r1
    21ec:	d0f0      	beq.n	21d0 <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    21ee:	0159      	lsls	r1, r3, #5
    21f0:	4f25      	ldr	r7, [pc, #148]	; (2288 <USB_Handler+0x258>)
    21f2:	46bc      	mov	ip, r7
    21f4:	4461      	add	r1, ip
    21f6:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    21f8:	015b      	lsls	r3, r3, #5
    21fa:	4f24      	ldr	r7, [pc, #144]	; (228c <USB_Handler+0x25c>)
    21fc:	46bc      	mov	ip, r7
    21fe:	4463      	add	r3, ip
    2200:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2202:	4019      	ands	r1, r3
	if (flags) {
    2204:	d0e4      	beq.n	21d0 <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2206:	00ab      	lsls	r3, r5, #2
    2208:	195a      	adds	r2, r3, r5
    220a:	0092      	lsls	r2, r2, #2
    220c:	4b15      	ldr	r3, [pc, #84]	; (2264 <USB_Handler+0x234>)
    220e:	469c      	mov	ip, r3
    2210:	4462      	add	r2, ip
    2212:	3230      	adds	r2, #48	; 0x30
    2214:	7dd2      	ldrb	r2, [r2, #23]
    2216:	2347      	movs	r3, #71	; 0x47
    2218:	4013      	ands	r3, r2
    221a:	2b01      	cmp	r3, #1
    221c:	d0a3      	beq.n	2166 <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    221e:	b253      	sxtb	r3, r2
    2220:	2b00      	cmp	r3, #0
    2222:	dbb1      	blt.n	2188 <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2224:	068b      	lsls	r3, r1, #26
    2226:	d4d0      	bmi.n	21ca <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2228:	074b      	lsls	r3, r1, #29
    222a:	d40c      	bmi.n	2246 <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    222c:	07cb      	lsls	r3, r1, #31
    222e:	d40e      	bmi.n	224e <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2230:	2307      	movs	r3, #7
    2232:	401a      	ands	r2, r3
    2234:	2a01      	cmp	r2, #1
    2236:	d1cb      	bne.n	21d0 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2238:	070b      	lsls	r3, r1, #28
    223a:	d40c      	bmi.n	2256 <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    223c:	06cb      	lsls	r3, r1, #27
    223e:	d5c7      	bpl.n	21d0 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    2240:	4b0e      	ldr	r3, [pc, #56]	; (227c <USB_Handler+0x24c>)
    2242:	4798      	blx	r3
    2244:	e7c4      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    2246:	2100      	movs	r1, #0
    2248:	4b0d      	ldr	r3, [pc, #52]	; (2280 <USB_Handler+0x250>)
    224a:	4798      	blx	r3
    224c:	e7c0      	b.n	21d0 <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    224e:	2101      	movs	r1, #1
    2250:	4b0f      	ldr	r3, [pc, #60]	; (2290 <USB_Handler+0x260>)
    2252:	4798      	blx	r3
    2254:	e7bc      	b.n	21d0 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    2256:	2101      	movs	r1, #1
    2258:	4b09      	ldr	r3, [pc, #36]	; (2280 <USB_Handler+0x250>)
    225a:	4798      	blx	r3
    225c:	e7b8      	b.n	21d0 <USB_Handler+0x1a0>
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	41005000 	.word	0x41005000
    2264:	20000184 	.word	0x20000184
    2268:	00000201 	.word	0x00000201
    226c:	20000104 	.word	0x20000104
    2270:	40000800 	.word	0x40000800
    2274:	000011a5 	.word	0x000011a5
    2278:	00000fe1 	.word	0x00000fe1
    227c:	00000f4d 	.word	0x00000f4d
    2280:	000010a5 	.word	0x000010a5
    2284:	000011ed 	.word	0x000011ed
    2288:	41005100 	.word	0x41005100
    228c:	41005109 	.word	0x41005109
    2290:	00001399 	.word	0x00001399

00002294 <main>:
#include <atmel_start.h>

int main(void)
{
    2294:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2296:	4b01      	ldr	r3, [pc, #4]	; (229c <main+0x8>)
    2298:	4798      	blx	r3
    229a:	e7fe      	b.n	229a <main+0x6>
    229c:	00000115 	.word	0x00000115

000022a0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    22a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a2:	b083      	sub	sp, #12
    22a4:	0006      	movs	r6, r0
    22a6:	000c      	movs	r4, r1
    22a8:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    22aa:	780a      	ldrb	r2, [r1, #0]
    22ac:	0653      	lsls	r3, r2, #25
    22ae:	0f9b      	lsrs	r3, r3, #30
    22b0:	2b01      	cmp	r3, #1
    22b2:	d000      	beq.n	22b6 <cdcdf_acm_req+0x16>
    22b4:	e06c      	b.n	2390 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    22b6:	7909      	ldrb	r1, [r1, #4]
    22b8:	7963      	ldrb	r3, [r4, #5]
    22ba:	021b      	lsls	r3, r3, #8
    22bc:	430b      	orrs	r3, r1
    22be:	493b      	ldr	r1, [pc, #236]	; (23ac <cdcdf_acm_req+0x10c>)
    22c0:	7809      	ldrb	r1, [r1, #0]
    22c2:	4299      	cmp	r1, r3
    22c4:	d003      	beq.n	22ce <cdcdf_acm_req+0x2e>
    22c6:	4939      	ldr	r1, [pc, #228]	; (23ac <cdcdf_acm_req+0x10c>)
    22c8:	7849      	ldrb	r1, [r1, #1]
    22ca:	4299      	cmp	r1, r3
    22cc:	d163      	bne.n	2396 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    22ce:	b252      	sxtb	r2, r2
    22d0:	2a00      	cmp	r2, #0
    22d2:	db0e      	blt.n	22f2 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    22d4:	79a7      	ldrb	r7, [r4, #6]
    22d6:	79e3      	ldrb	r3, [r4, #7]
    22d8:	021b      	lsls	r3, r3, #8
    22da:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    22dc:	4b34      	ldr	r3, [pc, #208]	; (23b0 <cdcdf_acm_req+0x110>)
    22de:	4798      	blx	r3
	switch (req->bRequest) {
    22e0:	7863      	ldrb	r3, [r4, #1]
    22e2:	2b20      	cmp	r3, #32
    22e4:	d018      	beq.n	2318 <cdcdf_acm_req+0x78>
    22e6:	2b22      	cmp	r3, #34	; 0x22
    22e8:	d03c      	beq.n	2364 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    22ea:	200d      	movs	r0, #13
    22ec:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    22ee:	b003      	add	sp, #12
    22f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    22f2:	2d01      	cmp	r5, #1
    22f4:	d052      	beq.n	239c <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    22f6:	7863      	ldrb	r3, [r4, #1]
    22f8:	2b21      	cmp	r3, #33	; 0x21
    22fa:	d151      	bne.n	23a0 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    22fc:	79a2      	ldrb	r2, [r4, #6]
    22fe:	79e3      	ldrb	r3, [r4, #7]
    2300:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2302:	4313      	orrs	r3, r2
    2304:	2b07      	cmp	r3, #7
    2306:	d14e      	bne.n	23a6 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2308:	2300      	movs	r3, #0
    230a:	2207      	movs	r2, #7
    230c:	4927      	ldr	r1, [pc, #156]	; (23ac <cdcdf_acm_req+0x10c>)
    230e:	3108      	adds	r1, #8
    2310:	0030      	movs	r0, r6
    2312:	4c28      	ldr	r4, [pc, #160]	; (23b4 <cdcdf_acm_req+0x114>)
    2314:	47a0      	blx	r4
    2316:	e7ea      	b.n	22ee <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2318:	2f07      	cmp	r7, #7
    231a:	d134      	bne.n	2386 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    231c:	2d00      	cmp	r5, #0
    231e:	d01a      	beq.n	2356 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2320:	2207      	movs	r2, #7
    2322:	0001      	movs	r1, r0
    2324:	4668      	mov	r0, sp
    2326:	4b24      	ldr	r3, [pc, #144]	; (23b8 <cdcdf_acm_req+0x118>)
    2328:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    232a:	4b20      	ldr	r3, [pc, #128]	; (23ac <cdcdf_acm_req+0x10c>)
    232c:	691b      	ldr	r3, [r3, #16]
    232e:	2b00      	cmp	r3, #0
    2330:	d005      	beq.n	233e <cdcdf_acm_req+0x9e>
    2332:	4668      	mov	r0, sp
    2334:	4798      	blx	r3
    2336:	0003      	movs	r3, r0
			return ERR_NONE;
    2338:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    233a:	2b00      	cmp	r3, #0
    233c:	d0d7      	beq.n	22ee <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    233e:	4a1b      	ldr	r2, [pc, #108]	; (23ac <cdcdf_acm_req+0x10c>)
    2340:	0013      	movs	r3, r2
    2342:	9900      	ldr	r1, [sp, #0]
    2344:	6091      	str	r1, [r2, #8]
    2346:	466a      	mov	r2, sp
    2348:	8892      	ldrh	r2, [r2, #4]
    234a:	819a      	strh	r2, [r3, #12]
    234c:	466a      	mov	r2, sp
    234e:	7992      	ldrb	r2, [r2, #6]
    2350:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2352:	2000      	movs	r0, #0
    2354:	e7cb      	b.n	22ee <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2356:	2300      	movs	r3, #0
    2358:	2207      	movs	r2, #7
    235a:	0001      	movs	r1, r0
    235c:	0030      	movs	r0, r6
    235e:	4c15      	ldr	r4, [pc, #84]	; (23b4 <cdcdf_acm_req+0x114>)
    2360:	47a0      	blx	r4
    2362:	e7c4      	b.n	22ee <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2364:	2300      	movs	r3, #0
    2366:	2200      	movs	r2, #0
    2368:	2100      	movs	r1, #0
    236a:	2000      	movs	r0, #0
    236c:	4d11      	ldr	r5, [pc, #68]	; (23b4 <cdcdf_acm_req+0x114>)
    236e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2370:	4b0e      	ldr	r3, [pc, #56]	; (23ac <cdcdf_acm_req+0x10c>)
    2372:	695b      	ldr	r3, [r3, #20]
    2374:	2b00      	cmp	r3, #0
    2376:	d009      	beq.n	238c <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2378:	78a2      	ldrb	r2, [r4, #2]
    237a:	78e0      	ldrb	r0, [r4, #3]
    237c:	0200      	lsls	r0, r0, #8
    237e:	4310      	orrs	r0, r2
    2380:	4798      	blx	r3
		return ERR_NONE;
    2382:	2000      	movs	r0, #0
    2384:	e7b3      	b.n	22ee <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2386:	2001      	movs	r0, #1
    2388:	4240      	negs	r0, r0
    238a:	e7b0      	b.n	22ee <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    238c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    238e:	e7ae      	b.n	22ee <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2390:	200a      	movs	r0, #10
    2392:	4240      	negs	r0, r0
    2394:	e7ab      	b.n	22ee <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2396:	200a      	movs	r0, #10
    2398:	4240      	negs	r0, r0
    239a:	e7a8      	b.n	22ee <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    239c:	2000      	movs	r0, #0
    239e:	e7a6      	b.n	22ee <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    23a0:	200d      	movs	r0, #13
    23a2:	4240      	negs	r0, r0
    23a4:	e7a3      	b.n	22ee <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    23a6:	2001      	movs	r0, #1
    23a8:	4240      	negs	r0, r0
    23aa:	e7a0      	b.n	22ee <cdcdf_acm_req+0x4e>
    23ac:	2000046c 	.word	0x2000046c
    23b0:	00002c71 	.word	0x00002c71
    23b4:	00002721 	.word	0x00002721
    23b8:	00002e35 	.word	0x00002e35

000023bc <cdcdf_acm_ctrl>:
{
    23bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23be:	46de      	mov	lr, fp
    23c0:	4657      	mov	r7, sl
    23c2:	464e      	mov	r6, r9
    23c4:	4645      	mov	r5, r8
    23c6:	b5e0      	push	{r5, r6, r7, lr}
    23c8:	b083      	sub	sp, #12
    23ca:	0016      	movs	r6, r2
	switch (ctrl) {
    23cc:	2901      	cmp	r1, #1
    23ce:	d068      	beq.n	24a2 <cdcdf_acm_ctrl+0xe6>
    23d0:	2900      	cmp	r1, #0
    23d2:	d00b      	beq.n	23ec <cdcdf_acm_ctrl+0x30>
    23d4:	2902      	cmp	r1, #2
    23d6:	d100      	bne.n	23da <cdcdf_acm_ctrl+0x1e>
    23d8:	e093      	b.n	2502 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    23da:	200d      	movs	r0, #13
    23dc:	4240      	negs	r0, r0
}
    23de:	b003      	add	sp, #12
    23e0:	bc3c      	pop	{r2, r3, r4, r5}
    23e2:	4690      	mov	r8, r2
    23e4:	4699      	mov	r9, r3
    23e6:	46a2      	mov	sl, r4
    23e8:	46ab      	mov	fp, r5
    23ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    23ec:	6883      	ldr	r3, [r0, #8]
    23ee:	4698      	mov	r8, r3
	ifc = desc->sod;
    23f0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    23f2:	2800      	cmp	r0, #0
    23f4:	d100      	bne.n	23f8 <cdcdf_acm_ctrl+0x3c>
    23f6:	e087      	b.n	2508 <cdcdf_acm_ctrl+0x14c>
    23f8:	9301      	str	r3, [sp, #4]
    23fa:	2301      	movs	r3, #1
    23fc:	4443      	add	r3, r8
    23fe:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2400:	4f47      	ldr	r7, [pc, #284]	; (2520 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    2402:	4b48      	ldr	r3, [pc, #288]	; (2524 <cdcdf_acm_ctrl+0x168>)
    2404:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2406:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2408:	7943      	ldrb	r3, [r0, #5]
    240a:	2108      	movs	r1, #8
    240c:	438b      	bics	r3, r1
    240e:	2b02      	cmp	r3, #2
    2410:	d002      	beq.n	2418 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    2412:	200a      	movs	r0, #10
    2414:	4240      	negs	r0, r0
    2416:	e7e2      	b.n	23de <cdcdf_acm_ctrl+0x22>
    2418:	9901      	ldr	r1, [sp, #4]
    241a:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    241c:	780b      	ldrb	r3, [r1, #0]
    241e:	429a      	cmp	r2, r3
    2420:	d075      	beq.n	250e <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2422:	2bff      	cmp	r3, #255	; 0xff
    2424:	d176      	bne.n	2514 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2426:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2428:	2205      	movs	r2, #5
    242a:	6871      	ldr	r1, [r6, #4]
    242c:	4b3e      	ldr	r3, [pc, #248]	; (2528 <cdcdf_acm_ctrl+0x16c>)
    242e:	4798      	blx	r3
    2430:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2432:	d11e      	bne.n	2472 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2434:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2436:	7803      	ldrb	r3, [r0, #0]
    2438:	18c0      	adds	r0, r0, r3
    243a:	2204      	movs	r2, #4
    243c:	6871      	ldr	r1, [r6, #4]
    243e:	4b3a      	ldr	r3, [pc, #232]	; (2528 <cdcdf_acm_ctrl+0x16c>)
    2440:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2442:	9b01      	ldr	r3, [sp, #4]
    2444:	455b      	cmp	r3, fp
    2446:	d027      	beq.n	2498 <cdcdf_acm_ctrl+0xdc>
    2448:	9b01      	ldr	r3, [sp, #4]
    244a:	3301      	adds	r3, #1
    244c:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    244e:	2800      	cmp	r0, #0
    2450:	d1d9      	bne.n	2406 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    2452:	200a      	movs	r0, #10
    2454:	4240      	negs	r0, r0
    2456:	e7c2      	b.n	23de <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2458:	4653      	mov	r3, sl
    245a:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    245c:	0028      	movs	r0, r5
    245e:	4b31      	ldr	r3, [pc, #196]	; (2524 <cdcdf_acm_ctrl+0x168>)
    2460:	4798      	blx	r3
			desc->sod = ep;
    2462:	6034      	str	r4, [r6, #0]
    2464:	7820      	ldrb	r0, [r4, #0]
    2466:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2468:	6871      	ldr	r1, [r6, #4]
    246a:	4b30      	ldr	r3, [pc, #192]	; (252c <cdcdf_acm_ctrl+0x170>)
    246c:	4798      	blx	r3
    246e:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2470:	d0e0      	beq.n	2434 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2472:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2474:	7963      	ldrb	r3, [r4, #5]
    2476:	021b      	lsls	r3, r3, #8
    2478:	7922      	ldrb	r2, [r4, #4]
    247a:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    247c:	b292      	uxth	r2, r2
    247e:	78e1      	ldrb	r1, [r4, #3]
    2480:	0028      	movs	r0, r5
    2482:	47b8      	blx	r7
    2484:	2800      	cmp	r0, #0
    2486:	d148      	bne.n	251a <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2488:	b26b      	sxtb	r3, r5
    248a:	2b00      	cmp	r3, #0
    248c:	dbe4      	blt.n	2458 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    248e:	4643      	mov	r3, r8
    2490:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2492:	0028      	movs	r0, r5
    2494:	47c8      	blx	r9
    2496:	e7e4      	b.n	2462 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2498:	2201      	movs	r2, #1
    249a:	4b25      	ldr	r3, [pc, #148]	; (2530 <cdcdf_acm_ctrl+0x174>)
    249c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    249e:	2000      	movs	r0, #0
    24a0:	e79d      	b.n	23de <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    24a2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    24a4:	2a00      	cmp	r2, #0
    24a6:	d008      	beq.n	24ba <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    24a8:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    24aa:	795b      	ldrb	r3, [r3, #5]
    24ac:	2208      	movs	r2, #8
    24ae:	4393      	bics	r3, r2
    24b0:	2b02      	cmp	r3, #2
    24b2:	d002      	beq.n	24ba <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    24b4:	200a      	movs	r0, #10
    24b6:	4240      	negs	r0, r0
    24b8:	e791      	b.n	23de <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    24ba:	7823      	ldrb	r3, [r4, #0]
    24bc:	2bff      	cmp	r3, #255	; 0xff
    24be:	d008      	beq.n	24d2 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    24c0:	23ff      	movs	r3, #255	; 0xff
    24c2:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    24c4:	78a0      	ldrb	r0, [r4, #2]
    24c6:	28ff      	cmp	r0, #255	; 0xff
    24c8:	d003      	beq.n	24d2 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    24ca:	4b1a      	ldr	r3, [pc, #104]	; (2534 <cdcdf_acm_ctrl+0x178>)
    24cc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    24ce:	23ff      	movs	r3, #255	; 0xff
    24d0:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    24d2:	7863      	ldrb	r3, [r4, #1]
    24d4:	2bff      	cmp	r3, #255	; 0xff
    24d6:	d008      	beq.n	24ea <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    24d8:	23ff      	movs	r3, #255	; 0xff
    24da:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    24dc:	78e0      	ldrb	r0, [r4, #3]
    24de:	28ff      	cmp	r0, #255	; 0xff
    24e0:	d003      	beq.n	24ea <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    24e2:	4b14      	ldr	r3, [pc, #80]	; (2534 <cdcdf_acm_ctrl+0x178>)
    24e4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    24e6:	23ff      	movs	r3, #255	; 0xff
    24e8:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    24ea:	7920      	ldrb	r0, [r4, #4]
    24ec:	28ff      	cmp	r0, #255	; 0xff
    24ee:	d003      	beq.n	24f8 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    24f0:	4b10      	ldr	r3, [pc, #64]	; (2534 <cdcdf_acm_ctrl+0x178>)
    24f2:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    24f4:	23ff      	movs	r3, #255	; 0xff
    24f6:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    24f8:	2200      	movs	r2, #0
    24fa:	4b0d      	ldr	r3, [pc, #52]	; (2530 <cdcdf_acm_ctrl+0x174>)
    24fc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    24fe:	2000      	movs	r0, #0
    2500:	e76d      	b.n	23de <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    2502:	201b      	movs	r0, #27
    2504:	4240      	negs	r0, r0
    2506:	e76a      	b.n	23de <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2508:	200a      	movs	r0, #10
    250a:	4240      	negs	r0, r0
    250c:	e767      	b.n	23de <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    250e:	2012      	movs	r0, #18
    2510:	4240      	negs	r0, r0
    2512:	e764      	b.n	23de <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2514:	201c      	movs	r0, #28
    2516:	4240      	negs	r0, r0
    2518:	e761      	b.n	23de <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    251a:	2014      	movs	r0, #20
    251c:	4240      	negs	r0, r0
    251e:	e75e      	b.n	23de <cdcdf_acm_ctrl+0x22>
    2520:	000008a9 	.word	0x000008a9
    2524:	0000093d 	.word	0x0000093d
    2528:	00002c8d 	.word	0x00002c8d
    252c:	00002cc3 	.word	0x00002cc3
    2530:	2000046c 	.word	0x2000046c
    2534:	00000911 	.word	0x00000911

00002538 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2538:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    253a:	4b0a      	ldr	r3, [pc, #40]	; (2564 <cdcdf_acm_init+0x2c>)
    253c:	4798      	blx	r3
    253e:	2801      	cmp	r0, #1
    2540:	d80c      	bhi.n	255c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2542:	4809      	ldr	r0, [pc, #36]	; (2568 <cdcdf_acm_init+0x30>)
    2544:	4b09      	ldr	r3, [pc, #36]	; (256c <cdcdf_acm_init+0x34>)
    2546:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2548:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    254a:	3018      	adds	r0, #24
    254c:	4b08      	ldr	r3, [pc, #32]	; (2570 <cdcdf_acm_init+0x38>)
    254e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2550:	4908      	ldr	r1, [pc, #32]	; (2574 <cdcdf_acm_init+0x3c>)
    2552:	2001      	movs	r0, #1
    2554:	4b08      	ldr	r3, [pc, #32]	; (2578 <cdcdf_acm_init+0x40>)
    2556:	4798      	blx	r3
	return ERR_NONE;
    2558:	2000      	movs	r0, #0
}
    255a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    255c:	2011      	movs	r0, #17
    255e:	4240      	negs	r0, r0
    2560:	e7fb      	b.n	255a <cdcdf_acm_init+0x22>
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	00002c7d 	.word	0x00002c7d
    2568:	2000046c 	.word	0x2000046c
    256c:	000023bd 	.word	0x000023bd
    2570:	00002c15 	.word	0x00002c15
    2574:	20000000 	.word	0x20000000
    2578:	00002b7d 	.word	0x00002b7d

0000257c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    257c:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    257e:	4b06      	ldr	r3, [pc, #24]	; (2598 <usbdc_unconfig+0x1c>)
    2580:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2582:	2c00      	cmp	r4, #0
    2584:	d007      	beq.n	2596 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2586:	2200      	movs	r2, #0
    2588:	2101      	movs	r1, #1
    258a:	0020      	movs	r0, r4
    258c:	6863      	ldr	r3, [r4, #4]
    258e:	4798      	blx	r3
		func = func->next;
    2590:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2592:	2c00      	cmp	r4, #0
    2594:	d1f7      	bne.n	2586 <usbdc_unconfig+0xa>
	}
}
    2596:	bd10      	pop	{r4, pc}
    2598:	20000490 	.word	0x20000490

0000259c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	0006      	movs	r6, r0
    25a0:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    25a2:	4b07      	ldr	r3, [pc, #28]	; (25c0 <usbdc_change_notify+0x24>)
    25a4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    25a6:	2c00      	cmp	r4, #0
    25a8:	d103      	bne.n	25b2 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    25aa:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    25ac:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    25ae:	2c00      	cmp	r4, #0
    25b0:	d0fb      	beq.n	25aa <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    25b2:	6863      	ldr	r3, [r4, #4]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d0f9      	beq.n	25ac <usbdc_change_notify+0x10>
			cg->cb(change, value);
    25b8:	0029      	movs	r1, r5
    25ba:	0030      	movs	r0, r6
    25bc:	4798      	blx	r3
    25be:	e7f5      	b.n	25ac <usbdc_change_notify+0x10>
    25c0:	20000490 	.word	0x20000490

000025c4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    25c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25c6:	0007      	movs	r7, r0
    25c8:	000e      	movs	r6, r1
    25ca:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    25cc:	4b0d      	ldr	r3, [pc, #52]	; (2604 <usbdc_request_handler+0x40>)
    25ce:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    25d0:	2c00      	cmp	r4, #0
    25d2:	d104      	bne.n	25de <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    25d4:	2000      	movs	r0, #0
    25d6:	e011      	b.n	25fc <usbdc_request_handler+0x38>
		h = h->next;
    25d8:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    25da:	2c00      	cmp	r4, #0
    25dc:	d00d      	beq.n	25fa <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    25de:	6863      	ldr	r3, [r4, #4]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d0f9      	beq.n	25d8 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    25e4:	002a      	movs	r2, r5
    25e6:	0031      	movs	r1, r6
    25e8:	0038      	movs	r0, r7
    25ea:	4798      	blx	r3
			if (0 == rc) {
    25ec:	2800      	cmp	r0, #0
    25ee:	d006      	beq.n	25fe <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    25f0:	300a      	adds	r0, #10
    25f2:	d0f1      	beq.n	25d8 <usbdc_request_handler+0x14>
				return -1;
    25f4:	2001      	movs	r0, #1
    25f6:	4240      	negs	r0, r0
    25f8:	e000      	b.n	25fc <usbdc_request_handler+0x38>
	return false;
    25fa:	2000      	movs	r0, #0
}
    25fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    25fe:	2001      	movs	r0, #1
    2600:	e7fc      	b.n	25fc <usbdc_request_handler+0x38>
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	20000490 	.word	0x20000490

00002608 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2608:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    260a:	4b06      	ldr	r3, [pc, #24]	; (2624 <usbd_sof_cb+0x1c>)
    260c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    260e:	2c00      	cmp	r4, #0
    2610:	d103      	bne.n	261a <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    2612:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2614:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2616:	2c00      	cmp	r4, #0
    2618:	d0fb      	beq.n	2612 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    261a:	6863      	ldr	r3, [r4, #4]
    261c:	2b00      	cmp	r3, #0
    261e:	d0f9      	beq.n	2614 <usbd_sof_cb+0xc>
			sof->cb();
    2620:	4798      	blx	r3
    2622:	e7f7      	b.n	2614 <usbd_sof_cb+0xc>
    2624:	20000490 	.word	0x20000490

00002628 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2628:	b510      	push	{r4, lr}
    262a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    262c:	2900      	cmp	r1, #0
    262e:	d003      	beq.n	2638 <usbdc_cb_ctl_done+0x10>
    2630:	2901      	cmp	r1, #1
    2632:	d029      	beq.n	2688 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2634:	2000      	movs	r0, #0
    2636:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2638:	7813      	ldrb	r3, [r2, #0]
    263a:	2b00      	cmp	r3, #0
    263c:	d1fa      	bne.n	2634 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    263e:	7853      	ldrb	r3, [r2, #1]
    2640:	2b05      	cmp	r3, #5
    2642:	d011      	beq.n	2668 <usbdc_cb_ctl_done+0x40>
    2644:	2b09      	cmp	r3, #9
    2646:	d1f5      	bne.n	2634 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2648:	7892      	ldrb	r2, [r2, #2]
    264a:	4b12      	ldr	r3, [pc, #72]	; (2694 <usbdc_cb_ctl_done+0x6c>)
    264c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    264e:	78a3      	ldrb	r3, [r4, #2]
    2650:	78e1      	ldrb	r1, [r4, #3]
    2652:	0209      	lsls	r1, r1, #8
    2654:	4319      	orrs	r1, r3
    2656:	1e4b      	subs	r3, r1, #1
    2658:	4199      	sbcs	r1, r3
    265a:	3103      	adds	r1, #3
    265c:	4b0d      	ldr	r3, [pc, #52]	; (2694 <usbdc_cb_ctl_done+0x6c>)
    265e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2660:	2001      	movs	r0, #1
    2662:	4b0d      	ldr	r3, [pc, #52]	; (2698 <usbdc_cb_ctl_done+0x70>)
    2664:	4798      	blx	r3
    2666:	e7e5      	b.n	2634 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2668:	7890      	ldrb	r0, [r2, #2]
    266a:	4b0c      	ldr	r3, [pc, #48]	; (269c <usbdc_cb_ctl_done+0x74>)
    266c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    266e:	78a3      	ldrb	r3, [r4, #2]
    2670:	78e1      	ldrb	r1, [r4, #3]
    2672:	0209      	lsls	r1, r1, #8
    2674:	4319      	orrs	r1, r3
    2676:	1e4b      	subs	r3, r1, #1
    2678:	4199      	sbcs	r1, r3
    267a:	3102      	adds	r1, #2
    267c:	4b05      	ldr	r3, [pc, #20]	; (2694 <usbdc_cb_ctl_done+0x6c>)
    267e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2680:	2001      	movs	r0, #1
    2682:	4b05      	ldr	r3, [pc, #20]	; (2698 <usbdc_cb_ctl_done+0x70>)
    2684:	4798      	blx	r3
    2686:	e7d5      	b.n	2634 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2688:	2201      	movs	r2, #1
    268a:	0021      	movs	r1, r4
    268c:	2000      	movs	r0, #0
    268e:	4b04      	ldr	r3, [pc, #16]	; (26a0 <usbdc_cb_ctl_done+0x78>)
    2690:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2692:	e7cf      	b.n	2634 <usbdc_cb_ctl_done+0xc>
    2694:	20000490 	.word	0x20000490
    2698:	0000259d 	.word	0x0000259d
    269c:	0000089d 	.word	0x0000089d
    26a0:	000025c5 	.word	0x000025c5

000026a4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    26a4:	b510      	push	{r4, lr}
	usbdc_unconfig();
    26a6:	4b0d      	ldr	r3, [pc, #52]	; (26dc <usbdc_reset+0x38>)
    26a8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    26aa:	4c0d      	ldr	r4, [pc, #52]	; (26e0 <usbdc_reset+0x3c>)
    26ac:	2302      	movs	r3, #2
    26ae:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    26b0:	2300      	movs	r3, #0
    26b2:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    26b4:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    26b6:	2000      	movs	r0, #0
    26b8:	4b0a      	ldr	r3, [pc, #40]	; (26e4 <usbdc_reset+0x40>)
    26ba:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    26bc:	7f20      	ldrb	r0, [r4, #28]
    26be:	4b0a      	ldr	r3, [pc, #40]	; (26e8 <usbdc_reset+0x44>)
    26c0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    26c2:	4a0a      	ldr	r2, [pc, #40]	; (26ec <usbdc_reset+0x48>)
    26c4:	2100      	movs	r1, #0
    26c6:	2000      	movs	r0, #0
    26c8:	4c09      	ldr	r4, [pc, #36]	; (26f0 <usbdc_reset+0x4c>)
    26ca:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    26cc:	4a09      	ldr	r2, [pc, #36]	; (26f4 <usbdc_reset+0x50>)
    26ce:	2102      	movs	r1, #2
    26d0:	2000      	movs	r0, #0
    26d2:	47a0      	blx	r4
	usb_d_ep_enable(0);
    26d4:	2000      	movs	r0, #0
    26d6:	4b08      	ldr	r3, [pc, #32]	; (26f8 <usbdc_reset+0x54>)
    26d8:	4798      	blx	r3
}
    26da:	bd10      	pop	{r4, pc}
    26dc:	0000257d 	.word	0x0000257d
    26e0:	20000490 	.word	0x20000490
    26e4:	00000911 	.word	0x00000911
    26e8:	000008fd 	.word	0x000008fd
    26ec:	0000273d 	.word	0x0000273d
    26f0:	00000b19 	.word	0x00000b19
    26f4:	00002629 	.word	0x00002629
    26f8:	0000093d 	.word	0x0000093d

000026fc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    26fc:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    26fe:	2800      	cmp	r0, #0
    2700:	d002      	beq.n	2708 <usbd_event_cb+0xc>
    2702:	2801      	cmp	r0, #1
    2704:	d004      	beq.n	2710 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2706:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2708:	2000      	movs	r0, #0
    270a:	4b03      	ldr	r3, [pc, #12]	; (2718 <usbd_event_cb+0x1c>)
    270c:	4798      	blx	r3
		break;
    270e:	e7fa      	b.n	2706 <usbd_event_cb+0xa>
		usbdc_reset();
    2710:	4b02      	ldr	r3, [pc, #8]	; (271c <usbd_event_cb+0x20>)
    2712:	4798      	blx	r3
}
    2714:	e7f7      	b.n	2706 <usbd_event_cb+0xa>
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	0000259d 	.word	0x0000259d
    271c:	000026a5 	.word	0x000026a5

00002720 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2720:	b510      	push	{r4, lr}
    2722:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2724:	ac01      	add	r4, sp, #4
    2726:	9101      	str	r1, [sp, #4]
    2728:	9202      	str	r2, [sp, #8]
    272a:	7220      	strb	r0, [r4, #8]
    272c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    272e:	0020      	movs	r0, r4
    2730:	4b01      	ldr	r3, [pc, #4]	; (2738 <usbdc_xfer+0x18>)
    2732:	4798      	blx	r3
}
    2734:	b004      	add	sp, #16
    2736:	bd10      	pop	{r4, pc}
    2738:	00000989 	.word	0x00000989

0000273c <usbdc_cb_ctl_req>:
{
    273c:	b5f0      	push	{r4, r5, r6, r7, lr}
    273e:	46c6      	mov	lr, r8
    2740:	b500      	push	{lr}
    2742:	b084      	sub	sp, #16
    2744:	0005      	movs	r5, r0
    2746:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2748:	2200      	movs	r2, #0
    274a:	4bb5      	ldr	r3, [pc, #724]	; (2a20 <usbdc_cb_ctl_req+0x2e4>)
    274c:	4798      	blx	r3
    274e:	1c43      	adds	r3, r0, #1
    2750:	d00d      	beq.n	276e <usbdc_cb_ctl_req+0x32>
		return true;
    2752:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2754:	2801      	cmp	r0, #1
    2756:	d00b      	beq.n	2770 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2758:	7822      	ldrb	r2, [r4, #0]
    275a:	231f      	movs	r3, #31
    275c:	0011      	movs	r1, r2
    275e:	4399      	bics	r1, r3
    2760:	d00b      	beq.n	277a <usbdc_cb_ctl_req+0x3e>
    2762:	b2cb      	uxtb	r3, r1
    2764:	2b80      	cmp	r3, #128	; 0x80
    2766:	d100      	bne.n	276a <usbdc_cb_ctl_req+0x2e>
    2768:	e0f8      	b.n	295c <usbdc_cb_ctl_req+0x220>
		return false;
    276a:	2300      	movs	r3, #0
    276c:	e000      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    276e:	2300      	movs	r3, #0
}
    2770:	0018      	movs	r0, r3
    2772:	b004      	add	sp, #16
    2774:	bc04      	pop	{r2}
    2776:	4690      	mov	r8, r2
    2778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    277a:	7863      	ldrb	r3, [r4, #1]
    277c:	2b0b      	cmp	r3, #11
    277e:	d900      	bls.n	2782 <usbdc_cb_ctl_req+0x46>
    2780:	e1e4      	b.n	2b4c <usbdc_cb_ctl_req+0x410>
    2782:	009b      	lsls	r3, r3, #2
    2784:	49a7      	ldr	r1, [pc, #668]	; (2a24 <usbdc_cb_ctl_req+0x2e8>)
    2786:	58cb      	ldr	r3, [r1, r3]
    2788:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    278a:	2301      	movs	r3, #1
    278c:	2200      	movs	r2, #0
    278e:	2100      	movs	r1, #0
    2790:	0028      	movs	r0, r5
    2792:	4ca5      	ldr	r4, [pc, #660]	; (2a28 <usbdc_cb_ctl_req+0x2ec>)
    2794:	47a0      	blx	r4
    2796:	4243      	negs	r3, r0
    2798:	4143      	adcs	r3, r0
    279a:	b2db      	uxtb	r3, r3
    279c:	e7e8      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    279e:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    27a0:	2a00      	cmp	r2, #0
    27a2:	d01a      	beq.n	27da <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    27a4:	4ba1      	ldr	r3, [pc, #644]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	6859      	ldr	r1, [r3, #4]
    27aa:	6818      	ldr	r0, [r3, #0]
    27ac:	4ba0      	ldr	r3, [pc, #640]	; (2a30 <usbdc_cb_ctl_req+0x2f4>)
    27ae:	4798      	blx	r3
	if (NULL == cfg_desc) {
    27b0:	2800      	cmp	r0, #0
    27b2:	d100      	bne.n	27b6 <usbdc_cb_ctl_req+0x7a>
    27b4:	e1d4      	b.n	2b60 <usbdc_cb_ctl_req+0x424>
    27b6:	78c3      	ldrb	r3, [r0, #3]
    27b8:	021b      	lsls	r3, r3, #8
    27ba:	7881      	ldrb	r1, [r0, #2]
    27bc:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    27be:	b289      	uxth	r1, r1
    27c0:	1841      	adds	r1, r0, r1
    27c2:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    27c4:	2204      	movs	r2, #4
    27c6:	4b9b      	ldr	r3, [pc, #620]	; (2a34 <usbdc_cb_ctl_req+0x2f8>)
    27c8:	4798      	blx	r3
    27ca:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    27cc:	2800      	cmp	r0, #0
    27ce:	d006      	beq.n	27de <usbdc_cb_ctl_req+0xa2>
    27d0:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    27d2:	4f96      	ldr	r7, [pc, #600]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    27d4:	4b97      	ldr	r3, [pc, #604]	; (2a34 <usbdc_cb_ctl_req+0x2f8>)
    27d6:	4698      	mov	r8, r3
    27d8:	e01a      	b.n	2810 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    27da:	4b97      	ldr	r3, [pc, #604]	; (2a38 <usbdc_cb_ctl_req+0x2fc>)
    27dc:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    27de:	2301      	movs	r3, #1
    27e0:	2200      	movs	r2, #0
    27e2:	2100      	movs	r1, #0
    27e4:	0028      	movs	r0, r5
    27e6:	4c90      	ldr	r4, [pc, #576]	; (2a28 <usbdc_cb_ctl_req+0x2ec>)
    27e8:	47a0      	blx	r4
    27ea:	4243      	negs	r3, r0
    27ec:	4143      	adcs	r3, r0
    27ee:	b2db      	uxtb	r3, r3
    27f0:	e7be      	b.n	2770 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    27f2:	0034      	movs	r4, r6
    27f4:	e000      	b.n	27f8 <usbdc_cb_ctl_req+0xbc>
    27f6:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    27f8:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    27fa:	7803      	ldrb	r3, [r0, #0]
    27fc:	18c0      	adds	r0, r0, r3
    27fe:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2800:	9b03      	ldr	r3, [sp, #12]
    2802:	9301      	str	r3, [sp, #4]
    2804:	2204      	movs	r2, #4
    2806:	0019      	movs	r1, r3
    2808:	47c0      	blx	r8
    280a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    280c:	2800      	cmp	r0, #0
    280e:	d0e6      	beq.n	27de <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2810:	7886      	ldrb	r6, [r0, #2]
    2812:	42a6      	cmp	r6, r4
    2814:	d0f0      	beq.n	27f8 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2816:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    2818:	2c00      	cmp	r4, #0
    281a:	d0ea      	beq.n	27f2 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    281c:	aa02      	add	r2, sp, #8
    281e:	2100      	movs	r1, #0
    2820:	0020      	movs	r0, r4
    2822:	6863      	ldr	r3, [r4, #4]
    2824:	4798      	blx	r3
    2826:	2800      	cmp	r0, #0
    2828:	d0e5      	beq.n	27f6 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    282a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    282c:	2c00      	cmp	r4, #0
    282e:	d1f5      	bne.n	281c <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    2830:	0034      	movs	r4, r6
    2832:	e7e1      	b.n	27f8 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2834:	231f      	movs	r3, #31
    2836:	401a      	ands	r2, r3
		return false;
    2838:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    283a:	2a02      	cmp	r2, #2
    283c:	d198      	bne.n	2770 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    283e:	79a3      	ldrb	r3, [r4, #6]
    2840:	79e2      	ldrb	r2, [r4, #7]
    2842:	0212      	lsls	r2, r2, #8
    2844:	431a      	orrs	r2, r3
			return false;
    2846:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2848:	2a00      	cmp	r2, #0
    284a:	d000      	beq.n	284e <usbdc_cb_ctl_req+0x112>
    284c:	e790      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    284e:	7920      	ldrb	r0, [r4, #4]
    2850:	2100      	movs	r1, #0
    2852:	4b7a      	ldr	r3, [pc, #488]	; (2a3c <usbdc_cb_ctl_req+0x300>)
    2854:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2856:	2301      	movs	r3, #1
    2858:	2200      	movs	r2, #0
    285a:	2100      	movs	r1, #0
    285c:	0028      	movs	r0, r5
    285e:	4c72      	ldr	r4, [pc, #456]	; (2a28 <usbdc_cb_ctl_req+0x2ec>)
    2860:	47a0      	blx	r4
		return true;
    2862:	2301      	movs	r3, #1
    2864:	e784      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2866:	231f      	movs	r3, #31
    2868:	401a      	ands	r2, r3
		return false;
    286a:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    286c:	2a02      	cmp	r2, #2
    286e:	d000      	beq.n	2872 <usbdc_cb_ctl_req+0x136>
    2870:	e77e      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    2872:	79a3      	ldrb	r3, [r4, #6]
    2874:	79e2      	ldrb	r2, [r4, #7]
    2876:	0212      	lsls	r2, r2, #8
    2878:	431a      	orrs	r2, r3
			return false;
    287a:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    287c:	2a00      	cmp	r2, #0
    287e:	d000      	beq.n	2882 <usbdc_cb_ctl_req+0x146>
    2880:	e776      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2882:	7920      	ldrb	r0, [r4, #4]
    2884:	2101      	movs	r1, #1
    2886:	4b6d      	ldr	r3, [pc, #436]	; (2a3c <usbdc_cb_ctl_req+0x300>)
    2888:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    288a:	2301      	movs	r3, #1
    288c:	2200      	movs	r2, #0
    288e:	2100      	movs	r1, #0
    2890:	0028      	movs	r0, r5
    2892:	4c65      	ldr	r4, [pc, #404]	; (2a28 <usbdc_cb_ctl_req+0x2ec>)
    2894:	47a0      	blx	r4
		return true;
    2896:	2301      	movs	r3, #1
    2898:	e76a      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    289a:	78a3      	ldrb	r3, [r4, #2]
    289c:	78e5      	ldrb	r5, [r4, #3]
    289e:	022d      	lsls	r5, r5, #8
    28a0:	431d      	orrs	r5, r3
    28a2:	7923      	ldrb	r3, [r4, #4]
    28a4:	7964      	ldrb	r4, [r4, #5]
    28a6:	0224      	lsls	r4, r4, #8
    28a8:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    28aa:	4a60      	ldr	r2, [pc, #384]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    28ac:	6813      	ldr	r3, [r2, #0]
    28ae:	7ed2      	ldrb	r2, [r2, #27]
    28b0:	6859      	ldr	r1, [r3, #4]
    28b2:	6818      	ldr	r0, [r3, #0]
    28b4:	4b5e      	ldr	r3, [pc, #376]	; (2a30 <usbdc_cb_ctl_req+0x2f4>)
    28b6:	4798      	blx	r3
	if (NULL == ifc) {
    28b8:	2800      	cmp	r0, #0
    28ba:	d047      	beq.n	294c <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    28bc:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    28be:	78c3      	ldrb	r3, [r0, #3]
    28c0:	021b      	lsls	r3, r3, #8
    28c2:	7881      	ldrb	r1, [r0, #2]
    28c4:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    28c6:	b289      	uxth	r1, r1
    28c8:	1841      	adds	r1, r0, r1
    28ca:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    28cc:	2204      	movs	r2, #4
    28ce:	4b59      	ldr	r3, [pc, #356]	; (2a34 <usbdc_cb_ctl_req+0x2f8>)
    28d0:	4798      	blx	r3
    28d2:	2800      	cmp	r0, #0
    28d4:	d03c      	beq.n	2950 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    28d6:	4e57      	ldr	r6, [pc, #348]	; (2a34 <usbdc_cb_ctl_req+0x2f8>)
    28d8:	e008      	b.n	28ec <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    28da:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    28dc:	7803      	ldrb	r3, [r0, #0]
    28de:	18c0      	adds	r0, r0, r3
    28e0:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    28e2:	2204      	movs	r2, #4
    28e4:	9903      	ldr	r1, [sp, #12]
    28e6:	47b0      	blx	r6
		if (NULL == ifc) {
    28e8:	2800      	cmp	r0, #0
    28ea:	d033      	beq.n	2954 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    28ec:	7883      	ldrb	r3, [r0, #2]
    28ee:	42a3      	cmp	r3, r4
    28f0:	d1f3      	bne.n	28da <usbdc_cb_ctl_req+0x19e>
    28f2:	78c3      	ldrb	r3, [r0, #3]
    28f4:	42ab      	cmp	r3, r5
    28f6:	d1f0      	bne.n	28da <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    28f8:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    28fa:	4b4c      	ldr	r3, [pc, #304]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    28fc:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    28fe:	2e00      	cmp	r6, #0
    2900:	d02a      	beq.n	2958 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2902:	aa02      	add	r2, sp, #8
    2904:	2101      	movs	r1, #1
    2906:	0030      	movs	r0, r6
    2908:	6873      	ldr	r3, [r6, #4]
    290a:	4798      	blx	r3
    290c:	2800      	cmp	r0, #0
    290e:	d004      	beq.n	291a <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    2910:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    2912:	2e00      	cmp	r6, #0
    2914:	d1f5      	bne.n	2902 <usbdc_cb_ctl_req+0x1c6>
	return false;
    2916:	2300      	movs	r3, #0
    2918:	e72a      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    291a:	6873      	ldr	r3, [r6, #4]
    291c:	aa02      	add	r2, sp, #8
    291e:	2100      	movs	r1, #0
    2920:	0030      	movs	r0, r6
    2922:	4798      	blx	r3
			return false;
    2924:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2926:	2800      	cmp	r0, #0
    2928:	d000      	beq.n	292c <usbdc_cb_ctl_req+0x1f0>
    292a:	e721      	b.n	2770 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    292c:	2d00      	cmp	r5, #0
    292e:	d005      	beq.n	293c <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2930:	493e      	ldr	r1, [pc, #248]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    2932:	2201      	movs	r2, #1
    2934:	40a2      	lsls	r2, r4
    2936:	7f4b      	ldrb	r3, [r1, #29]
    2938:	4313      	orrs	r3, r2
    293a:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    293c:	2300      	movs	r3, #0
    293e:	2200      	movs	r2, #0
    2940:	2100      	movs	r1, #0
    2942:	2000      	movs	r0, #0
    2944:	4c38      	ldr	r4, [pc, #224]	; (2a28 <usbdc_cb_ctl_req+0x2ec>)
    2946:	47a0      	blx	r4
			return true;
    2948:	2301      	movs	r3, #1
    294a:	e711      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    294c:	2300      	movs	r3, #0
    294e:	e70f      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    2950:	2300      	movs	r3, #0
    2952:	e70d      	b.n	2770 <usbdc_cb_ctl_req+0x34>
			return false;
    2954:	2300      	movs	r3, #0
    2956:	e70b      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	return false;
    2958:	2300      	movs	r3, #0
    295a:	e709      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    295c:	7863      	ldrb	r3, [r4, #1]
    295e:	2b06      	cmp	r3, #6
    2960:	d033      	beq.n	29ca <usbdc_cb_ctl_req+0x28e>
    2962:	b2d9      	uxtb	r1, r3
    2964:	2906      	cmp	r1, #6
    2966:	d922      	bls.n	29ae <usbdc_cb_ctl_req+0x272>
    2968:	2b08      	cmp	r3, #8
    296a:	d100      	bne.n	296e <usbdc_cb_ctl_req+0x232>
    296c:	e0af      	b.n	2ace <usbdc_cb_ctl_req+0x392>
    296e:	2b0a      	cmp	r3, #10
    2970:	d000      	beq.n	2974 <usbdc_cb_ctl_req+0x238>
    2972:	e0ed      	b.n	2b50 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2974:	4b2d      	ldr	r3, [pc, #180]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    2976:	7f5a      	ldrb	r2, [r3, #29]
    2978:	7921      	ldrb	r1, [r4, #4]
    297a:	7963      	ldrb	r3, [r4, #5]
    297c:	021b      	lsls	r3, r3, #8
    297e:	430b      	orrs	r3, r1
    2980:	411a      	asrs	r2, r3
    2982:	07d3      	lsls	r3, r2, #31
    2984:	d400      	bmi.n	2988 <usbdc_cb_ctl_req+0x24c>
    2986:	e0ca      	b.n	2b1e <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2988:	4b28      	ldr	r3, [pc, #160]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    298a:	691d      	ldr	r5, [r3, #16]
	return false;
    298c:	2300      	movs	r3, #0
	while (NULL != func) {
    298e:	2d00      	cmp	r5, #0
    2990:	d100      	bne.n	2994 <usbdc_cb_ctl_req+0x258>
    2992:	e6ed      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2994:	0022      	movs	r2, r4
    2996:	2102      	movs	r1, #2
    2998:	0028      	movs	r0, r5
    299a:	686b      	ldr	r3, [r5, #4]
    299c:	4798      	blx	r3
    299e:	2800      	cmp	r0, #0
    29a0:	db00      	blt.n	29a4 <usbdc_cb_ctl_req+0x268>
    29a2:	e0c8      	b.n	2b36 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    29a4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    29a6:	2d00      	cmp	r5, #0
    29a8:	d1f4      	bne.n	2994 <usbdc_cb_ctl_req+0x258>
	return false;
    29aa:	2300      	movs	r3, #0
    29ac:	e6e0      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    29ae:	2b00      	cmp	r3, #0
    29b0:	d000      	beq.n	29b4 <usbdc_cb_ctl_req+0x278>
    29b2:	e0cd      	b.n	2b50 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    29b4:	231f      	movs	r3, #31
    29b6:	401a      	ands	r2, r3
    29b8:	b2d3      	uxtb	r3, r2
    29ba:	2b01      	cmp	r3, #1
    29bc:	d800      	bhi.n	29c0 <usbdc_cb_ctl_req+0x284>
    29be:	e092      	b.n	2ae6 <usbdc_cb_ctl_req+0x3aa>
    29c0:	2a02      	cmp	r2, #2
    29c2:	d100      	bne.n	29c6 <usbdc_cb_ctl_req+0x28a>
    29c4:	e09f      	b.n	2b06 <usbdc_cb_ctl_req+0x3ca>
		return false;
    29c6:	2300      	movs	r3, #0
    29c8:	e6d2      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    29ca:	78a3      	ldrb	r3, [r4, #2]
    29cc:	78e2      	ldrb	r2, [r4, #3]
    29ce:	0212      	lsls	r2, r2, #8
    29d0:	431a      	orrs	r2, r3
    29d2:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    29d4:	2b02      	cmp	r3, #2
    29d6:	d033      	beq.n	2a40 <usbdc_cb_ctl_req+0x304>
    29d8:	2b03      	cmp	r3, #3
    29da:	d056      	beq.n	2a8a <usbdc_cb_ctl_req+0x34e>
    29dc:	2b01      	cmp	r3, #1
    29de:	d001      	beq.n	29e4 <usbdc_cb_ctl_req+0x2a8>
	return false;
    29e0:	2300      	movs	r3, #0
    29e2:	e6c5      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    29e4:	79a2      	ldrb	r2, [r4, #6]
    29e6:	79e3      	ldrb	r3, [r4, #7]
    29e8:	021b      	lsls	r3, r3, #8
    29ea:	4313      	orrs	r3, r2
    29ec:	1c1a      	adds	r2, r3, #0
    29ee:	2b12      	cmp	r3, #18
    29f0:	d900      	bls.n	29f4 <usbdc_cb_ctl_req+0x2b8>
    29f2:	2212      	movs	r2, #18
    29f4:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    29f6:	4b0d      	ldr	r3, [pc, #52]	; (2a2c <usbdc_cb_ctl_req+0x2f0>)
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	6859      	ldr	r1, [r3, #4]
    29fc:	6818      	ldr	r0, [r3, #0]
    29fe:	2201      	movs	r2, #1
    2a00:	4b0c      	ldr	r3, [pc, #48]	; (2a34 <usbdc_cb_ctl_req+0x2f8>)
    2a02:	4798      	blx	r3
	if (!dev_desc) {
    2a04:	2800      	cmp	r0, #0
    2a06:	d100      	bne.n	2a0a <usbdc_cb_ctl_req+0x2ce>
    2a08:	e0a4      	b.n	2b54 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2a0a:	2300      	movs	r3, #0
    2a0c:	0022      	movs	r2, r4
    2a0e:	0001      	movs	r1, r0
    2a10:	0028      	movs	r0, r5
    2a12:	4c05      	ldr	r4, [pc, #20]	; (2a28 <usbdc_cb_ctl_req+0x2ec>)
    2a14:	47a0      	blx	r4
    2a16:	4243      	negs	r3, r0
    2a18:	4143      	adcs	r3, r0
    2a1a:	b2db      	uxtb	r3, r3
    2a1c:	e6a8      	b.n	2770 <usbdc_cb_ctl_req+0x34>
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	000025c5 	.word	0x000025c5
    2a24:	00002ef0 	.word	0x00002ef0
    2a28:	00002721 	.word	0x00002721
    2a2c:	20000490 	.word	0x20000490
    2a30:	00002d09 	.word	0x00002d09
    2a34:	00002c8d 	.word	0x00002c8d
    2a38:	0000257d 	.word	0x0000257d
    2a3c:	00000ab1 	.word	0x00000ab1
	uint16_t length   = req->wLength;
    2a40:	79a3      	ldrb	r3, [r4, #6]
    2a42:	79e6      	ldrb	r6, [r4, #7]
    2a44:	0236      	lsls	r6, r6, #8
    2a46:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a48:	4b46      	ldr	r3, [pc, #280]	; (2b64 <usbdc_cb_ctl_req+0x428>)
    2a4a:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	3201      	adds	r2, #1
    2a50:	b2d2      	uxtb	r2, r2
    2a52:	6859      	ldr	r1, [r3, #4]
    2a54:	6818      	ldr	r0, [r3, #0]
    2a56:	4b44      	ldr	r3, [pc, #272]	; (2b68 <usbdc_cb_ctl_req+0x42c>)
    2a58:	4798      	blx	r3
    2a5a:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    2a5c:	d07c      	beq.n	2b58 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    2a5e:	78c3      	ldrb	r3, [r0, #3]
    2a60:	021b      	lsls	r3, r3, #8
    2a62:	7884      	ldrb	r4, [r0, #2]
    2a64:	18e4      	adds	r4, r4, r3
    2a66:	b2a4      	uxth	r4, r4
		need_zlp = false;
    2a68:	2300      	movs	r3, #0
	if (length <= total_len) {
    2a6a:	42a6      	cmp	r6, r4
    2a6c:	d905      	bls.n	2a7a <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a6e:	3f01      	subs	r7, #1
    2a70:	403e      	ands	r6, r7
    2a72:	4273      	negs	r3, r6
    2a74:	4173      	adcs	r3, r6
    2a76:	b2db      	uxtb	r3, r3
		length = total_len;
    2a78:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2a7a:	0032      	movs	r2, r6
    2a7c:	0028      	movs	r0, r5
    2a7e:	4c3b      	ldr	r4, [pc, #236]	; (2b6c <usbdc_cb_ctl_req+0x430>)
    2a80:	47a0      	blx	r4
    2a82:	4243      	negs	r3, r0
    2a84:	4143      	adcs	r3, r0
    2a86:	b2db      	uxtb	r3, r3
    2a88:	e672      	b.n	2770 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    2a8a:	79a3      	ldrb	r3, [r4, #6]
    2a8c:	79e1      	ldrb	r1, [r4, #7]
    2a8e:	0209      	lsls	r1, r1, #8
    2a90:	4319      	orrs	r1, r3
    2a92:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a94:	4b33      	ldr	r3, [pc, #204]	; (2b64 <usbdc_cb_ctl_req+0x428>)
    2a96:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2a98:	681b      	ldr	r3, [r3, #0]
    2a9a:	b2d2      	uxtb	r2, r2
    2a9c:	6859      	ldr	r1, [r3, #4]
    2a9e:	6818      	ldr	r0, [r3, #0]
    2aa0:	4b33      	ldr	r3, [pc, #204]	; (2b70 <usbdc_cb_ctl_req+0x434>)
    2aa2:	4798      	blx	r3
    2aa4:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    2aa6:	d059      	beq.n	2b5c <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    2aa8:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    2aaa:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    2aac:	4294      	cmp	r4, r2
    2aae:	d906      	bls.n	2abe <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2ab0:	1e73      	subs	r3, r6, #1
    2ab2:	4023      	ands	r3, r4
    2ab4:	0018      	movs	r0, r3
    2ab6:	4243      	negs	r3, r0
    2ab8:	4143      	adcs	r3, r0
    2aba:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    2abc:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2abe:	0022      	movs	r2, r4
    2ac0:	0028      	movs	r0, r5
    2ac2:	4c2a      	ldr	r4, [pc, #168]	; (2b6c <usbdc_cb_ctl_req+0x430>)
    2ac4:	47a0      	blx	r4
    2ac6:	4243      	negs	r3, r0
    2ac8:	4143      	adcs	r3, r0
    2aca:	b2db      	uxtb	r3, r3
    2acc:	e650      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2ace:	4b25      	ldr	r3, [pc, #148]	; (2b64 <usbdc_cb_ctl_req+0x428>)
    2ad0:	7eda      	ldrb	r2, [r3, #27]
    2ad2:	6959      	ldr	r1, [r3, #20]
    2ad4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2ad6:	6959      	ldr	r1, [r3, #20]
    2ad8:	2300      	movs	r3, #0
    2ada:	2201      	movs	r2, #1
    2adc:	0028      	movs	r0, r5
    2ade:	4c23      	ldr	r4, [pc, #140]	; (2b6c <usbdc_cb_ctl_req+0x430>)
    2ae0:	47a0      	blx	r4
		return true;
    2ae2:	2301      	movs	r3, #1
    2ae4:	e644      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		st = 0;
    2ae6:	2300      	movs	r3, #0
    2ae8:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2aea:	4c1e      	ldr	r4, [pc, #120]	; (2b64 <usbdc_cb_ctl_req+0x428>)
    2aec:	2202      	movs	r2, #2
    2aee:	a902      	add	r1, sp, #8
    2af0:	6960      	ldr	r0, [r4, #20]
    2af2:	4b20      	ldr	r3, [pc, #128]	; (2b74 <usbdc_cb_ctl_req+0x438>)
    2af4:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2af6:	6961      	ldr	r1, [r4, #20]
    2af8:	2300      	movs	r3, #0
    2afa:	2202      	movs	r2, #2
    2afc:	0028      	movs	r0, r5
    2afe:	4c1b      	ldr	r4, [pc, #108]	; (2b6c <usbdc_cb_ctl_req+0x430>)
    2b00:	47a0      	blx	r4
	return true;
    2b02:	2301      	movs	r3, #1
    2b04:	e634      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2b06:	7920      	ldrb	r0, [r4, #4]
    2b08:	2102      	movs	r1, #2
    2b0a:	4b1b      	ldr	r3, [pc, #108]	; (2b78 <usbdc_cb_ctl_req+0x43c>)
    2b0c:	4798      	blx	r3
		if (st < 0) {
    2b0e:	2800      	cmp	r0, #0
    2b10:	db03      	blt.n	2b1a <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    2b12:	2301      	movs	r3, #1
    2b14:	4018      	ands	r0, r3
    2b16:	9002      	str	r0, [sp, #8]
    2b18:	e7e7      	b.n	2aea <usbdc_cb_ctl_req+0x3ae>
			return false;
    2b1a:	2300      	movs	r3, #0
    2b1c:	e628      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    2b1e:	4b11      	ldr	r3, [pc, #68]	; (2b64 <usbdc_cb_ctl_req+0x428>)
    2b20:	2200      	movs	r2, #0
    2b22:	6959      	ldr	r1, [r3, #20]
    2b24:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2b26:	6959      	ldr	r1, [r3, #20]
    2b28:	2300      	movs	r3, #0
    2b2a:	3201      	adds	r2, #1
    2b2c:	2000      	movs	r0, #0
    2b2e:	4c0f      	ldr	r4, [pc, #60]	; (2b6c <usbdc_cb_ctl_req+0x430>)
    2b30:	47a0      	blx	r4
		return true;
    2b32:	2301      	movs	r3, #1
    2b34:	e61c      	b.n	2770 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2b36:	4b0b      	ldr	r3, [pc, #44]	; (2b64 <usbdc_cb_ctl_req+0x428>)
    2b38:	695a      	ldr	r2, [r3, #20]
    2b3a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2b3c:	6959      	ldr	r1, [r3, #20]
    2b3e:	2300      	movs	r3, #0
    2b40:	2201      	movs	r2, #1
    2b42:	2000      	movs	r0, #0
    2b44:	4c09      	ldr	r4, [pc, #36]	; (2b6c <usbdc_cb_ctl_req+0x430>)
    2b46:	47a0      	blx	r4
			return true;
    2b48:	2301      	movs	r3, #1
    2b4a:	e611      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    2b4c:	2300      	movs	r3, #0
    2b4e:	e60f      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    2b50:	2300      	movs	r3, #0
    2b52:	e60d      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    2b54:	2300      	movs	r3, #0
    2b56:	e60b      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    2b58:	2300      	movs	r3, #0
    2b5a:	e609      	b.n	2770 <usbdc_cb_ctl_req+0x34>
		return false;
    2b5c:	2300      	movs	r3, #0
    2b5e:	e607      	b.n	2770 <usbdc_cb_ctl_req+0x34>
			return false;
    2b60:	2300      	movs	r3, #0
    2b62:	e605      	b.n	2770 <usbdc_cb_ctl_req+0x34>
    2b64:	20000490 	.word	0x20000490
    2b68:	00002d09 	.word	0x00002d09
    2b6c:	00002721 	.word	0x00002721
    2b70:	00002d71 	.word	0x00002d71
    2b74:	00002e35 	.word	0x00002e35
    2b78:	00000ab1 	.word	0x00000ab1

00002b7c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2b7c:	b510      	push	{r4, lr}
	switch (type) {
    2b7e:	2801      	cmp	r0, #1
    2b80:	d009      	beq.n	2b96 <usbdc_register_handler+0x1a>
    2b82:	2800      	cmp	r0, #0
    2b84:	d002      	beq.n	2b8c <usbdc_register_handler+0x10>
    2b86:	2802      	cmp	r0, #2
    2b88:	d00a      	beq.n	2ba0 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    2b8a:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2b8c:	4807      	ldr	r0, [pc, #28]	; (2bac <usbdc_register_handler+0x30>)
    2b8e:	3004      	adds	r0, #4
    2b90:	4b07      	ldr	r3, [pc, #28]	; (2bb0 <usbdc_register_handler+0x34>)
    2b92:	4798      	blx	r3
		break;
    2b94:	e7f9      	b.n	2b8a <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2b96:	4805      	ldr	r0, [pc, #20]	; (2bac <usbdc_register_handler+0x30>)
    2b98:	3008      	adds	r0, #8
    2b9a:	4b05      	ldr	r3, [pc, #20]	; (2bb0 <usbdc_register_handler+0x34>)
    2b9c:	4798      	blx	r3
		break;
    2b9e:	e7f4      	b.n	2b8a <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2ba0:	4802      	ldr	r0, [pc, #8]	; (2bac <usbdc_register_handler+0x30>)
    2ba2:	300c      	adds	r0, #12
    2ba4:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <usbdc_register_handler+0x34>)
    2ba6:	4798      	blx	r3
}
    2ba8:	e7ef      	b.n	2b8a <usbdc_register_handler+0xe>
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	20000490 	.word	0x20000490
    2bb0:	00000b95 	.word	0x00000b95

00002bb4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2bb4:	b570      	push	{r4, r5, r6, lr}
    2bb6:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2bb8:	1e43      	subs	r3, r0, #1
    2bba:	4198      	sbcs	r0, r3
    2bbc:	b2c0      	uxtb	r0, r0
    2bbe:	4a0c      	ldr	r2, [pc, #48]	; (2bf0 <usbdc_init+0x3c>)
    2bc0:	490c      	ldr	r1, [pc, #48]	; (2bf4 <usbdc_init+0x40>)
    2bc2:	4b0d      	ldr	r3, [pc, #52]	; (2bf8 <usbdc_init+0x44>)
    2bc4:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2bc6:	4b0d      	ldr	r3, [pc, #52]	; (2bfc <usbdc_init+0x48>)
    2bc8:	4798      	blx	r3
	if (rc < 0) {
    2bca:	2800      	cmp	r0, #0
    2bcc:	db0e      	blt.n	2bec <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2bce:	4d0c      	ldr	r5, [pc, #48]	; (2c00 <usbdc_init+0x4c>)
    2bd0:	2220      	movs	r2, #32
    2bd2:	2100      	movs	r1, #0
    2bd4:	0028      	movs	r0, r5
    2bd6:	4b0b      	ldr	r3, [pc, #44]	; (2c04 <usbdc_init+0x50>)
    2bd8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2bda:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2bdc:	490a      	ldr	r1, [pc, #40]	; (2c08 <usbdc_init+0x54>)
    2bde:	2000      	movs	r0, #0
    2be0:	4c0a      	ldr	r4, [pc, #40]	; (2c0c <usbdc_init+0x58>)
    2be2:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2be4:	490a      	ldr	r1, [pc, #40]	; (2c10 <usbdc_init+0x5c>)
    2be6:	2001      	movs	r0, #1
    2be8:	47a0      	blx	r4

	return 0;
    2bea:	2000      	movs	r0, #0
}
    2bec:	bd70      	pop	{r4, r5, r6, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	00000355 	.word	0x00000355
    2bf4:	00002f20 	.word	0x00002f20
    2bf8:	00000b69 	.word	0x00000b69
    2bfc:	00000815 	.word	0x00000815
    2c00:	20000490 	.word	0x20000490
    2c04:	00002e47 	.word	0x00002e47
    2c08:	00002609 	.word	0x00002609
    2c0c:	00000879 	.word	0x00000879
    2c10:	000026fd 	.word	0x000026fd

00002c14 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2c14:	b510      	push	{r4, lr}
    2c16:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2c18:	4802      	ldr	r0, [pc, #8]	; (2c24 <usbdc_register_function+0x10>)
    2c1a:	3010      	adds	r0, #16
    2c1c:	4b02      	ldr	r3, [pc, #8]	; (2c28 <usbdc_register_function+0x14>)
    2c1e:	4798      	blx	r3
}
    2c20:	bd10      	pop	{r4, pc}
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	20000490 	.word	0x20000490
    2c28:	00000b95 	.word	0x00000b95

00002c2c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2c2c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2c2e:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <usbdc_start+0x30>)
    2c30:	7e9b      	ldrb	r3, [r3, #26]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d10c      	bne.n	2c50 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    2c36:	2800      	cmp	r0, #0
    2c38:	d00d      	beq.n	2c56 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    2c3a:	4b08      	ldr	r3, [pc, #32]	; (2c5c <usbdc_start+0x30>)
    2c3c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2c3e:	6802      	ldr	r2, [r0, #0]
    2c40:	79d2      	ldrb	r2, [r2, #7]
    2c42:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2c44:	2201      	movs	r2, #1
    2c46:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2c48:	4b05      	ldr	r3, [pc, #20]	; (2c60 <usbdc_start+0x34>)
    2c4a:	4798      	blx	r3
	return ERR_NONE;
    2c4c:	2000      	movs	r0, #0
}
    2c4e:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2c50:	2004      	movs	r0, #4
    2c52:	4240      	negs	r0, r0
    2c54:	e7fb      	b.n	2c4e <usbdc_start+0x22>
		return ERR_BAD_DATA;
    2c56:	2009      	movs	r0, #9
    2c58:	4240      	negs	r0, r0
    2c5a:	e7f8      	b.n	2c4e <usbdc_start+0x22>
    2c5c:	20000490 	.word	0x20000490
    2c60:	00000885 	.word	0x00000885

00002c64 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2c64:	b510      	push	{r4, lr}
	usb_d_attach();
    2c66:	4b01      	ldr	r3, [pc, #4]	; (2c6c <usbdc_attach+0x8>)
    2c68:	4798      	blx	r3
}
    2c6a:	bd10      	pop	{r4, pc}
    2c6c:	00000891 	.word	0x00000891

00002c70 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2c70:	4b01      	ldr	r3, [pc, #4]	; (2c78 <usbdc_get_ctrl_buffer+0x8>)
    2c72:	6958      	ldr	r0, [r3, #20]
}
    2c74:	4770      	bx	lr
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	20000490 	.word	0x20000490

00002c7c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2c7c:	4b02      	ldr	r3, [pc, #8]	; (2c88 <usbdc_get_state+0xc>)
    2c7e:	7e98      	ldrb	r0, [r3, #26]
    2c80:	06c3      	lsls	r3, r0, #27
    2c82:	d500      	bpl.n	2c86 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    2c84:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    2c86:	4770      	bx	lr
    2c88:	20000490 	.word	0x20000490

00002c8c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2c8c:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2c8e:	4288      	cmp	r0, r1
    2c90:	d211      	bcs.n	2cb6 <usb_find_desc+0x2a>
	return desc[0];
    2c92:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2c94:	2b01      	cmp	r3, #1
    2c96:	d910      	bls.n	2cba <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    2c98:	7844      	ldrb	r4, [r0, #1]
    2c9a:	4294      	cmp	r4, r2
    2c9c:	d00a      	beq.n	2cb4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2c9e:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2ca0:	4281      	cmp	r1, r0
    2ca2:	d906      	bls.n	2cb2 <usb_find_desc+0x26>
	return desc[0];
    2ca4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d909      	bls.n	2cbe <usb_find_desc+0x32>
	return desc[1];
    2caa:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2cac:	4294      	cmp	r4, r2
    2cae:	d1f6      	bne.n	2c9e <usb_find_desc+0x12>
    2cb0:	e000      	b.n	2cb4 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2cb2:	2000      	movs	r0, #0
}
    2cb4:	bd10      	pop	{r4, pc}
	return NULL;
    2cb6:	2000      	movs	r0, #0
    2cb8:	e7fc      	b.n	2cb4 <usb_find_desc+0x28>
		_desc_len_check();
    2cba:	2000      	movs	r0, #0
    2cbc:	e7fa      	b.n	2cb4 <usb_find_desc+0x28>
    2cbe:	2000      	movs	r0, #0
    2cc0:	e7f8      	b.n	2cb4 <usb_find_desc+0x28>

00002cc2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2cc2:	4288      	cmp	r0, r1
    2cc4:	d215      	bcs.n	2cf2 <usb_find_ep_desc+0x30>
	return desc[0];
    2cc6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2cc8:	2b01      	cmp	r3, #1
    2cca:	d914      	bls.n	2cf6 <usb_find_ep_desc+0x34>
	return desc[1];
    2ccc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2cce:	2a04      	cmp	r2, #4
    2cd0:	d013      	beq.n	2cfa <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2cd2:	2a05      	cmp	r2, #5
    2cd4:	d00c      	beq.n	2cf0 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    2cd6:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2cd8:	4281      	cmp	r1, r0
    2cda:	d908      	bls.n	2cee <usb_find_ep_desc+0x2c>
	return desc[0];
    2cdc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2cde:	2b01      	cmp	r3, #1
    2ce0:	d90d      	bls.n	2cfe <usb_find_ep_desc+0x3c>
	return desc[1];
    2ce2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2ce4:	2a04      	cmp	r2, #4
    2ce6:	d00c      	beq.n	2d02 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2ce8:	2a05      	cmp	r2, #5
    2cea:	d1f4      	bne.n	2cd6 <usb_find_ep_desc+0x14>
    2cec:	e000      	b.n	2cf0 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2cee:	2000      	movs	r0, #0
}
    2cf0:	4770      	bx	lr
	return NULL;
    2cf2:	2000      	movs	r0, #0
    2cf4:	e7fc      	b.n	2cf0 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2cf6:	2000      	movs	r0, #0
    2cf8:	e7fa      	b.n	2cf0 <usb_find_ep_desc+0x2e>
	return NULL;
    2cfa:	2000      	movs	r0, #0
    2cfc:	e7f8      	b.n	2cf0 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2cfe:	2000      	movs	r0, #0
    2d00:	e7f6      	b.n	2cf0 <usb_find_ep_desc+0x2e>
	return NULL;
    2d02:	2000      	movs	r0, #0
    2d04:	e7f4      	b.n	2cf0 <usb_find_ep_desc+0x2e>
	...

00002d08 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2d08:	b570      	push	{r4, r5, r6, lr}
    2d0a:	000c      	movs	r4, r1
    2d0c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2d0e:	2202      	movs	r2, #2
    2d10:	4b16      	ldr	r3, [pc, #88]	; (2d6c <usb_find_cfg_desc+0x64>)
    2d12:	4798      	blx	r3
	if (!desc) {
    2d14:	2800      	cmp	r0, #0
    2d16:	d01d      	beq.n	2d54 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    2d18:	4284      	cmp	r4, r0
    2d1a:	d91c      	bls.n	2d56 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    2d1c:	7803      	ldrb	r3, [r0, #0]
    2d1e:	2b01      	cmp	r3, #1
    2d20:	d91b      	bls.n	2d5a <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    2d22:	7843      	ldrb	r3, [r0, #1]
    2d24:	2b02      	cmp	r3, #2
    2d26:	d11a      	bne.n	2d5e <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    2d28:	7943      	ldrb	r3, [r0, #5]
    2d2a:	42ab      	cmp	r3, r5
    2d2c:	d012      	beq.n	2d54 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    2d2e:	78c2      	ldrb	r2, [r0, #3]
    2d30:	0212      	lsls	r2, r2, #8
    2d32:	7883      	ldrb	r3, [r0, #2]
    2d34:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2d36:	b29b      	uxth	r3, r3
    2d38:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2d3a:	4284      	cmp	r4, r0
    2d3c:	d909      	bls.n	2d52 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    2d3e:	7803      	ldrb	r3, [r0, #0]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d90e      	bls.n	2d62 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    2d44:	7843      	ldrb	r3, [r0, #1]
    2d46:	2b02      	cmp	r3, #2
    2d48:	d10d      	bne.n	2d66 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    2d4a:	7943      	ldrb	r3, [r0, #5]
    2d4c:	42ab      	cmp	r3, r5
    2d4e:	d1ee      	bne.n	2d2e <usb_find_cfg_desc+0x26>
    2d50:	e000      	b.n	2d54 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2d52:	2000      	movs	r0, #0
}
    2d54:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    2d56:	2000      	movs	r0, #0
    2d58:	e7fc      	b.n	2d54 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2d5a:	2000      	movs	r0, #0
    2d5c:	e7fa      	b.n	2d54 <usb_find_cfg_desc+0x4c>
	return NULL;
    2d5e:	2000      	movs	r0, #0
    2d60:	e7f8      	b.n	2d54 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2d62:	2000      	movs	r0, #0
    2d64:	e7f6      	b.n	2d54 <usb_find_cfg_desc+0x4c>
	return NULL;
    2d66:	2000      	movs	r0, #0
    2d68:	e7f4      	b.n	2d54 <usb_find_cfg_desc+0x4c>
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	00002c8d 	.word	0x00002c8d

00002d70 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d72:	000d      	movs	r5, r1
    2d74:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2d76:	4288      	cmp	r0, r1
    2d78:	d212      	bcs.n	2da0 <usb_find_str_desc+0x30>
    2d7a:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2d7c:	4e0a      	ldr	r6, [pc, #40]	; (2da8 <usb_find_str_desc+0x38>)
    2d7e:	2203      	movs	r2, #3
    2d80:	0029      	movs	r1, r5
    2d82:	47b0      	blx	r6
		if (desc) {
    2d84:	2800      	cmp	r0, #0
    2d86:	d00e      	beq.n	2da6 <usb_find_str_desc+0x36>
	return desc[0];
    2d88:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    2d8a:	2b01      	cmp	r3, #1
    2d8c:	d90a      	bls.n	2da4 <usb_find_str_desc+0x34>
			if (i == str_index) {
    2d8e:	42a7      	cmp	r7, r4
    2d90:	d009      	beq.n	2da6 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    2d92:	3401      	adds	r4, #1
    2d94:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    2d96:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    2d98:	4285      	cmp	r5, r0
    2d9a:	d8f0      	bhi.n	2d7e <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2d9c:	2000      	movs	r0, #0
    2d9e:	e002      	b.n	2da6 <usb_find_str_desc+0x36>
    2da0:	2000      	movs	r0, #0
    2da2:	e000      	b.n	2da6 <usb_find_str_desc+0x36>
			_desc_len_check();
    2da4:	2000      	movs	r0, #0
}
    2da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da8:	00002c8d 	.word	0x00002c8d

00002dac <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2dac:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2dae:	4806      	ldr	r0, [pc, #24]	; (2dc8 <cdc_device_acm_init+0x1c>)
    2db0:	3040      	adds	r0, #64	; 0x40
    2db2:	4b06      	ldr	r3, [pc, #24]	; (2dcc <cdc_device_acm_init+0x20>)
    2db4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2db6:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <cdc_device_acm_init+0x24>)
    2db8:	4798      	blx	r3

	usbdc_start(single_desc);
    2dba:	4806      	ldr	r0, [pc, #24]	; (2dd4 <cdc_device_acm_init+0x28>)
    2dbc:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <cdc_device_acm_init+0x2c>)
    2dbe:	4798      	blx	r3
	usbdc_attach();
    2dc0:	4b06      	ldr	r3, [pc, #24]	; (2ddc <cdc_device_acm_init+0x30>)
    2dc2:	4798      	blx	r3
}
    2dc4:	bd10      	pop	{r4, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	200004b0 	.word	0x200004b0
    2dcc:	00002bb5 	.word	0x00002bb5
    2dd0:	00002539 	.word	0x00002539
    2dd4:	20000008 	.word	0x20000008
    2dd8:	00002c2d 	.word	0x00002c2d
    2ddc:	00002c65 	.word	0x00002c65

00002de0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2de0:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2de2:	4b01      	ldr	r3, [pc, #4]	; (2de8 <usb_init+0x8>)
    2de4:	4798      	blx	r3
}
    2de6:	bd10      	pop	{r4, pc}
    2de8:	00002dad 	.word	0x00002dad

00002dec <__libc_init_array>:
    2dec:	b570      	push	{r4, r5, r6, lr}
    2dee:	2600      	movs	r6, #0
    2df0:	4d0c      	ldr	r5, [pc, #48]	; (2e24 <__libc_init_array+0x38>)
    2df2:	4c0d      	ldr	r4, [pc, #52]	; (2e28 <__libc_init_array+0x3c>)
    2df4:	1b64      	subs	r4, r4, r5
    2df6:	10a4      	asrs	r4, r4, #2
    2df8:	42a6      	cmp	r6, r4
    2dfa:	d109      	bne.n	2e10 <__libc_init_array+0x24>
    2dfc:	2600      	movs	r6, #0
    2dfe:	f000 f89b 	bl	2f38 <_init>
    2e02:	4d0a      	ldr	r5, [pc, #40]	; (2e2c <__libc_init_array+0x40>)
    2e04:	4c0a      	ldr	r4, [pc, #40]	; (2e30 <__libc_init_array+0x44>)
    2e06:	1b64      	subs	r4, r4, r5
    2e08:	10a4      	asrs	r4, r4, #2
    2e0a:	42a6      	cmp	r6, r4
    2e0c:	d105      	bne.n	2e1a <__libc_init_array+0x2e>
    2e0e:	bd70      	pop	{r4, r5, r6, pc}
    2e10:	00b3      	lsls	r3, r6, #2
    2e12:	58eb      	ldr	r3, [r5, r3]
    2e14:	4798      	blx	r3
    2e16:	3601      	adds	r6, #1
    2e18:	e7ee      	b.n	2df8 <__libc_init_array+0xc>
    2e1a:	00b3      	lsls	r3, r6, #2
    2e1c:	58eb      	ldr	r3, [r5, r3]
    2e1e:	4798      	blx	r3
    2e20:	3601      	adds	r6, #1
    2e22:	e7f2      	b.n	2e0a <__libc_init_array+0x1e>
    2e24:	00002f44 	.word	0x00002f44
    2e28:	00002f44 	.word	0x00002f44
    2e2c:	00002f44 	.word	0x00002f44
    2e30:	00002f48 	.word	0x00002f48

00002e34 <memcpy>:
    2e34:	2300      	movs	r3, #0
    2e36:	b510      	push	{r4, lr}
    2e38:	429a      	cmp	r2, r3
    2e3a:	d100      	bne.n	2e3e <memcpy+0xa>
    2e3c:	bd10      	pop	{r4, pc}
    2e3e:	5ccc      	ldrb	r4, [r1, r3]
    2e40:	54c4      	strb	r4, [r0, r3]
    2e42:	3301      	adds	r3, #1
    2e44:	e7f8      	b.n	2e38 <memcpy+0x4>

00002e46 <memset>:
    2e46:	0003      	movs	r3, r0
    2e48:	1882      	adds	r2, r0, r2
    2e4a:	4293      	cmp	r3, r2
    2e4c:	d100      	bne.n	2e50 <memset+0xa>
    2e4e:	4770      	bx	lr
    2e50:	7019      	strb	r1, [r3, #0]
    2e52:	3301      	adds	r3, #1
    2e54:	e7f9      	b.n	2e4a <memset+0x4>
    2e56:	0000      	movs	r0, r0
    2e58:	682f2e2e 	.word	0x682f2e2e
    2e5c:	732f6c61 	.word	0x732f6c61
    2e60:	682f6372 	.word	0x682f6372
    2e64:	735f6c61 	.word	0x735f6c61
    2e68:	6d5f6970 	.word	0x6d5f6970
    2e6c:	6e79735f 	.word	0x6e79735f
    2e70:	00632e63 	.word	0x00632e63
    2e74:	682f2e2e 	.word	0x682f2e2e
    2e78:	752f6c61 	.word	0x752f6c61
    2e7c:	736c6974 	.word	0x736c6974
    2e80:	6372732f 	.word	0x6372732f
    2e84:	6974752f 	.word	0x6974752f
    2e88:	6c5f736c 	.word	0x6c5f736c
    2e8c:	2e747369 	.word	0x2e747369
    2e90:	00000063 	.word	0x00000063
    2e94:	682f2e2e 	.word	0x682f2e2e
    2e98:	732f6c70 	.word	0x732f6c70
    2e9c:	6f637265 	.word	0x6f637265
    2ea0:	70682f6d 	.word	0x70682f6d
    2ea4:	65735f6c 	.word	0x65735f6c
    2ea8:	6d6f6372 	.word	0x6d6f6372
    2eac:	0000632e 	.word	0x0000632e
    2eb0:	00002000 	.word	0x00002000

00002eb4 <_usb_ep_cfgs>:
    2eb4:	2000042c 00000000 00000040 200003ec     ,.. ....@...... 
    2ec4:	200003ac 00400040 2000036c 2000032c     ... @.@.l.. ,.. 
    2ed4:	00400040 200002ec 200002ac 00400040     @.@.... ... @.@.
    2ee4:	2000026c 00000000 00000040 00002b4c     l.. ....@...L+..
    2ef4:	00002834 00002b4c 00002866 00002b4c     4(..L+..f(..L+..
    2f04:	0000278a 00002b4c 00002b4c 00002b4c     .'..L+..L+..L+..
    2f14:	0000279e 00002b4c 0000289a 752f2e2e     .'..L+...(..../u
    2f24:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    2f34:	00000063                                c...

00002f38 <_init>:
    2f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f3e:	bc08      	pop	{r3}
    2f40:	469e      	mov	lr, r3
    2f42:	4770      	bx	lr

00002f44 <__init_array_start>:
    2f44:	000000dd 	.word	0x000000dd

00002f48 <_fini>:
    2f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f4e:	bc08      	pop	{r3}
    2f50:	469e      	mov	lr, r3
    2f52:	4770      	bx	lr

00002f54 <__fini_array_start>:
    2f54:	000000b5 	.word	0x000000b5
